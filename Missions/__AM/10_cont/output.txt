// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 65
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 66
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 63
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 59
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 60
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 62
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// ruDepotConstructed := false ;
 254: LD_ADDR_EXP 57
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnRussians := false ;
 262: LD_ADDR_EXP 58
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// attackAvalaible = 1 ;
 270: LD_ADDR_EXP 64
 274: PUSH
 275: LD_INT 1
 277: ST_TO_ADDR
// mission_prefix := 10c_ ;
 278: LD_ADDR_EXP 54
 282: PUSH
 283: LD_STRING 10c_
 285: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 286: LD_ADDR_EXP 55
 290: PUSH
 291: LD_STRING 10_
 293: ST_TO_ADDR
// debugMode = 0 ;
 294: LD_ADDR_EXP 67
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// CreateNature ;
 302: CALL 26759 0 0
// PrepareDifficulty ;
 306: CALL 11428 0 0
// PrepareJMMTeam ;
 310: CALL 1358 0 0
// PrepareCathyTeam ;
 314: CALL 2590 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 318: LD_INT 24
 320: PPUSH
 321: LD_INT 1
 323: PUSH
 324: LD_OWVAR 67
 328: PLUS
 329: PPUSH
 330: CALL 21288 0 2
// if Difficulty > 1 then
 334: LD_OWVAR 67
 338: PUSH
 339: LD_INT 1
 341: GREATER
 342: IFFALSE 356
// PlaceMines ( MineField2 , Difficulty ) ;
 344: LD_INT 25
 346: PPUSH
 347: LD_OWVAR 67
 351: PPUSH
 352: CALL 21288 0 2
// if Difficulty > 2 then
 356: LD_OWVAR 67
 360: PUSH
 361: LD_INT 2
 363: GREATER
 364: IFFALSE 378
// PlaceMines ( MineField3 , Difficulty ) ;
 366: LD_INT 26
 368: PPUSH
 369: LD_OWVAR 67
 373: PPUSH
 374: CALL 21288 0 2
// PrepareArabianCommander ;
 378: CALL 4072 0 0
// PrepareArabian ;
 382: CALL 4124 0 0
// BuildArabianBase ;
 386: CALL 14243 0 0
// TameApemans ;
 390: CALL 20093 0 0
// end ;
 394: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 395: LD_EXP 67
 399: PUSH
 400: LD_INT 1
 402: EQUAL
 403: IFFALSE 709
 405: GO 407
 407: DISABLE
 408: LD_INT 0
 410: PPUSH
// begin enable ;
 411: ENABLE
// fogoff ( true ) ;
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 419: LD_ADDR_VAR 0 1
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 470
// SetLives ( i , 1000 ) ;
 456: LD_VAR 0 1
 460: PPUSH
 461: LD_INT 1000
 463: PPUSH
 464: CALL_OW 234
 468: GO 453
 470: POP
 471: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 472: LD_ADDR_VAR 0 1
 476: PUSH
 477: LD_INT 22
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 2
 489: PUSH
 490: LD_INT 30
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 30
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL_OW 69
 523: PUSH
 524: FOR_IN
 525: IFFALSE 549
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9999
 542: PPUSH
 543: CALL_OW 277
 547: GO 524
 549: POP
 550: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 551: LD_ADDR_VAR 0 1
 555: PUSH
 556: LD_INT 22
 558: PUSH
 559: LD_INT 1
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 30
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 30
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 69
 602: PUSH
 603: FOR_IN
 604: IFFALSE 628
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 606: LD_VAR 0 1
 610: PPUSH
 611: CALL_OW 274
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: LD_INT 9999
 621: PPUSH
 622: CALL_OW 277
 626: GO 603
 628: POP
 629: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 630: LD_ADDR_VAR 0 1
 634: PUSH
 635: LD_INT 22
 637: PUSH
 638: LD_INT 1
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 30
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 30
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PPUSH
 677: CALL_OW 69
 681: PUSH
 682: FOR_IN
 683: IFFALSE 707
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 685: LD_VAR 0 1
 689: PPUSH
 690: CALL_OW 274
 694: PPUSH
 695: LD_INT 3
 697: PPUSH
 698: LD_INT 9999
 700: PPUSH
 701: CALL_OW 277
 705: GO 682
 707: POP
 708: POP
// end ;
 709: PPOPN 1
 711: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 712: LD_INT 25
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: IFFALSE 739
 728: GO 730
 730: DISABLE
// snipersTrained := true ;
 731: LD_ADDR_EXP 62
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
 739: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: CALL_OW 81
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: PUSH
 755: LD_EXP 42
 759: AND
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 21
 773: PUSH
 774: LD_INT 3
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: LD_INT 0
 792: EQUAL
 793: AND
 794: IFFALSE 806
 796: GO 798
 798: DISABLE
// SetAchievement ( ACH_POWER ) ;
 799: LD_STRING ACH_POWER
 801: PPUSH
 802: CALL_OW 543
 806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 807: LD_INT 22
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: PUSH
 836: LD_INT 22
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 32
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: AND
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 30
 878: PUSH
 879: LD_INT 33
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PPUSH
 890: CALL_OW 69
 894: AND
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 30
 908: PUSH
 909: LD_INT 5
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 69
 924: AND
 925: PUSH
 926: LD_INT 22
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: LD_INT 30
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 69
 954: AND
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_INT 1
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 36
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PPUSH
 980: CALL_OW 69
 984: AND
 985: PUSH
 986: LD_INT 22
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 31
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: CALL_OW 69
1014: AND
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 1
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 30
1028: PUSH
1029: LD_INT 22
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PPUSH
1040: CALL_OW 69
1044: AND
1045: PUSH
1046: LD_INT 22
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_INT 20
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: AND
1075: PUSH
1076: LD_INT 22
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 19
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PPUSH
1100: CALL_OW 69
1104: AND
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 30
1118: PUSH
1119: LD_INT 16
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PPUSH
1130: CALL_OW 69
1134: AND
1135: PUSH
1136: LD_INT 22
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 30
1148: PUSH
1149: LD_INT 17
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 69
1164: AND
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 30
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: AND
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 30
1208: PUSH
1209: LD_INT 29
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL_OW 69
1224: AND
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 30
1238: PUSH
1239: LD_INT 30
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 69
1254: AND
1255: PUSH
1256: LD_INT 22
1258: PUSH
1259: LD_INT 1
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 30
1268: PUSH
1269: LD_INT 27
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PPUSH
1280: CALL_OW 69
1284: AND
1285: PUSH
1286: LD_INT 22
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 69
1314: AND
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 28
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: AND
1345: IFFALSE 1357
1347: GO 1349
1349: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1350: LD_STRING ACH_ARCH
1352: PPUSH
1353: CALL_OW 543
1357: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1358: LD_INT 0
1360: PPUSH
1361: PPUSH
1362: PPUSH
1363: PPUSH
1364: PPUSH
1365: PPUSH
// uc_side = 1 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 1
1373: ST_TO_ADDR
// uc_nation = 1 ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 1
1381: ST_TO_ADDR
// count = 0 ;
1382: LD_ADDR_VAR 0 6
1386: PUSH
1387: LD_INT 0
1389: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1390: LD_ADDR_EXP 1
1394: PUSH
1395: LD_STRING JMM
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 10_
1403: PPUSH
1404: CALL 46970 0 3
1408: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1409: LD_ADDR_EXP 20
1413: PUSH
1414: LD_EXP 20
1418: PUSH
1419: LD_EXP 1
1423: ADD
1424: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING Gary
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_STRING 10_
1438: PPUSH
1439: CALL 46970 0 3
1443: ST_TO_ADDR
// if Gary then
1444: LD_EXP 10
1448: IFFALSE 1466
// JMMSquad = JMMSquad ^ Gary ;
1450: LD_ADDR_EXP 20
1454: PUSH
1455: LD_EXP 20
1459: PUSH
1460: LD_EXP 10
1464: ADD
1465: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1466: LD_ADDR_EXP 5
1470: PUSH
1471: LD_STRING Cyrus
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_STRING 10_
1479: PPUSH
1480: CALL 46970 0 3
1484: ST_TO_ADDR
// if Cyrus then
1485: LD_EXP 5
1489: IFFALSE 1507
// JMMSquad = JMMSquad ^ Cyrus ;
1491: LD_ADDR_EXP 20
1495: PUSH
1496: LD_EXP 20
1500: PUSH
1501: LD_EXP 5
1505: ADD
1506: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1507: LD_ADDR_EXP 4
1511: PUSH
1512: LD_STRING Bobby
1514: PPUSH
1515: LD_INT 1
1517: PPUSH
1518: LD_STRING 10_
1520: PPUSH
1521: CALL 46970 0 3
1525: ST_TO_ADDR
// if Bobby then
1526: LD_EXP 4
1530: IFFALSE 1548
// JMMSquad = JMMSquad ^ Bobby ;
1532: LD_ADDR_EXP 20
1536: PUSH
1537: LD_EXP 20
1541: PUSH
1542: LD_EXP 4
1546: ADD
1547: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1548: LD_ADDR_EXP 6
1552: PUSH
1553: LD_STRING Lisa
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_STRING 10_
1561: PPUSH
1562: CALL 46970 0 3
1566: ST_TO_ADDR
// if Lisa then
1567: LD_EXP 6
1571: IFFALSE 1589
// JMMSquad = JMMSquad ^ Lisa ;
1573: LD_ADDR_EXP 20
1577: PUSH
1578: LD_EXP 20
1582: PUSH
1583: LD_EXP 6
1587: ADD
1588: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1589: LD_ADDR_EXP 2
1593: PUSH
1594: LD_STRING Brown
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_STRING 10_
1602: PPUSH
1603: CALL 46970 0 3
1607: ST_TO_ADDR
// if Brown then
1608: LD_EXP 2
1612: IFFALSE 1630
// JMMSquad = JMMSquad ^ Brown ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_EXP 20
1623: PUSH
1624: LD_EXP 2
1628: ADD
1629: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1630: LD_ADDR_EXP 3
1634: PUSH
1635: LD_STRING Donaldson
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: LD_STRING 10_
1643: PPUSH
1644: CALL 46970 0 3
1648: ST_TO_ADDR
// if Donaldson then
1649: LD_EXP 3
1653: IFFALSE 1671
// JMMSquad = JMMSquad ^ Donaldson ;
1655: LD_ADDR_EXP 20
1659: PUSH
1660: LD_EXP 20
1664: PUSH
1665: LD_EXP 3
1669: ADD
1670: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1671: LD_ADDR_EXP 7
1675: PUSH
1676: LD_STRING Frank
1678: PPUSH
1679: LD_INT 1
1681: PPUSH
1682: LD_STRING 10_
1684: PPUSH
1685: CALL 46970 0 3
1689: ST_TO_ADDR
// if Frank then
1690: LD_EXP 7
1694: IFFALSE 1712
// JMMSquad = JMMSquad ^ Frank ;
1696: LD_ADDR_EXP 20
1700: PUSH
1701: LD_EXP 20
1705: PUSH
1706: LD_EXP 7
1710: ADD
1711: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1712: LD_ADDR_EXP 9
1716: PUSH
1717: LD_STRING Houten
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_STRING 10_
1725: PPUSH
1726: CALL 46970 0 3
1730: ST_TO_ADDR
// if Houten then
1731: LD_EXP 9
1735: IFFALSE 1753
// JMMSquad = JMMSquad ^ Houten ;
1737: LD_ADDR_EXP 20
1741: PUSH
1742: LD_EXP 20
1746: PUSH
1747: LD_EXP 9
1751: ADD
1752: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1753: LD_ADDR_EXP 21
1757: PUSH
1758: LD_STRING OthersIn10
1760: PPUSH
1761: CALL_OW 31
1765: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1766: LD_ADDR_EXP 24
1770: PUSH
1771: LD_STRING Powell
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 46970 0 3
1784: ST_TO_ADDR
// for i in JMMSquad do
1785: LD_ADDR_VAR 0 2
1789: PUSH
1790: LD_EXP 20
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2076
// begin if count < 3 then
1798: LD_VAR 0 6
1802: PUSH
1803: LD_INT 3
1805: LESS
1806: IFFALSE 1923
// begin vc_engine = 1 ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control = 1 ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_weapon = 12 ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 12
1831: ST_TO_ADDR
// vc_chassis = 3 ;
1832: LD_ADDR_OWVAR 37
1836: PUSH
1837: LD_INT 3
1839: ST_TO_ADDR
// veh = CreateVehicle ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1850: LD_VAR 0 4
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 2
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 49
// if count mod 2 = 0 then
1877: LD_VAR 0 6
1881: PUSH
1882: LD_INT 2
1884: MOD
1885: PUSH
1886: LD_INT 0
1888: EQUAL
1889: IFFALSE 1908
// AddCargo ( veh , 1 , 100 ) else
1891: LD_VAR 0 4
1895: PPUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_INT 100
1901: PPUSH
1902: CALL_OW 291
1906: GO 1923
// AddCargo ( veh , 3 , 100 ) end ;
1908: LD_VAR 0 4
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: LD_INT 100
1918: PPUSH
1919: CALL_OW 291
// if count >= 3 then
1923: LD_VAR 0 6
1927: PUSH
1928: LD_INT 3
1930: GREATEREQUAL
1931: IFFALSE 2046
// begin vc_engine = 1 ;
1933: LD_ADDR_OWVAR 39
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// vc_control = 1 ;
1941: LD_ADDR_OWVAR 38
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1949: LD_ADDR_OWVAR 40
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: LD_INT 4
1959: PUSH
1960: LD_INT 5
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: CALL_OW 12
1978: ARRAY
1979: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1980: LD_ADDR_OWVAR 37
1984: PUSH
1985: LD_INT 2
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: MOD
2003: PUSH
2004: LD_INT 1
2006: PLUS
2007: ARRAY
2008: ST_TO_ADDR
// veh = CreateVehicle ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 45
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ; count = count + 1 ;
2046: LD_ADDR_VAR 0 6
2050: PUSH
2051: LD_VAR 0 6
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 4
2069: PPUSH
2070: CALL_OW 52
// end ;
2074: GO 1795
2076: POP
2077: POP
// for i := 1 to others10 do
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: DOUBLE
2084: LD_INT 1
2086: DEC
2087: ST_TO_ADDR
2088: LD_EXP 21
2092: PUSH
2093: FOR_TO
2094: IFFALSE 2321
// begin if i < [ 5 , 4 , 3 ] [ Difficulty ] then
2096: LD_VAR 0 2
2100: PUSH
2101: LD_INT 5
2103: PUSH
2104: LD_INT 4
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_OWVAR 67
2119: ARRAY
2120: LESS
2121: IFFALSE 2274
// begin vc_engine = 1 ;
2123: LD_ADDR_OWVAR 39
2127: PUSH
2128: LD_INT 1
2130: ST_TO_ADDR
// vc_control = 1 ;
2131: LD_ADDR_OWVAR 38
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2139: LD_ADDR_OWVAR 40
2143: PUSH
2144: LD_INT 3
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: LD_INT 5
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 3
2163: PPUSH
2164: CALL_OW 12
2168: ARRAY
2169: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2170: LD_ADDR_OWVAR 37
2174: PUSH
2175: LD_INT 2
2177: PUSH
2178: LD_INT 3
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_VAR 0 2
2189: PUSH
2190: LD_INT 2
2192: MOD
2193: PUSH
2194: LD_INT 1
2196: PLUS
2197: ARRAY
2198: ST_TO_ADDR
// veh = CreateVehicle ;
2199: LD_ADDR_VAR 0 4
2203: PUSH
2204: CALL_OW 45
2208: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2221: LD_VAR 0 4
2225: PPUSH
2226: LD_INT 2
2228: PPUSH
2229: LD_INT 0
2231: PPUSH
2232: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2236: LD_ADDR_EXP 28
2240: PUSH
2241: LD_EXP 28
2245: PUSH
2246: LD_VAR 0 4
2250: ADD
2251: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2252: LD_EXP 21
2256: PUSH
2257: LD_VAR 0 2
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 4
2267: PPUSH
2268: CALL_OW 52
// end else
2272: GO 2319
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2274: LD_EXP 21
2278: PUSH
2279: LD_VAR 0 2
2283: ARRAY
2284: PPUSH
2285: LD_INT 106
2287: PPUSH
2288: LD_INT 33
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2301: LD_EXP 21
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PPUSH
2312: LD_INT 4
2314: PPUSH
2315: CALL_OW 235
// end ; end ;
2319: GO 2093
2321: POP
2322: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2323: LD_INT 22
2325: PUSH
2326: LD_INT 1
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: LD_INT 21
2335: PUSH
2336: LD_INT 1
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PPUSH
2347: CALL_OW 69
2351: PPUSH
2352: LD_INT 1
2354: PPUSH
2355: CALL_OW 336
// end ;
2359: LD_VAR 0 1
2363: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2364: LD_INT 0
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
// uc_side = 1 ;
2371: LD_ADDR_OWVAR 20
2375: PUSH
2376: LD_INT 1
2378: ST_TO_ADDR
// uc_nation = 1 ;
2379: LD_ADDR_OWVAR 21
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// for i := 1 to 10 do
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 10
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2583
// begin vc_engine = 1 ;
2403: LD_ADDR_OWVAR 39
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// vc_control = 1 ;
2411: LD_ADDR_OWVAR 38
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2419: LD_ADDR_OWVAR 40
2423: PUSH
2424: LD_INT 3
2426: PUSH
2427: LD_INT 4
2429: PUSH
2430: LD_INT 5
2432: PUSH
2433: LD_INT 12
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 1
2444: PPUSH
2445: LD_INT 4
2447: PPUSH
2448: CALL_OW 12
2452: ARRAY
2453: ST_TO_ADDR
// vc_chassis = 3 ;
2454: LD_ADDR_OWVAR 37
2458: PUSH
2459: LD_INT 3
2461: ST_TO_ADDR
// veh = CreateVehicle ;
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: CALL_OW 45
2471: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2472: LD_VAR 0 3
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2484: LD_VAR 0 3
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2499: LD_ADDR_EXP 28
2503: PUSH
2504: LD_EXP 28
2508: PUSH
2509: LD_VAR 0 3
2513: ADD
2514: ST_TO_ADDR
// if vc_weapon = 12 then
2515: LD_OWVAR 40
2519: PUSH
2520: LD_INT 12
2522: EQUAL
2523: IFFALSE 2581
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2525: LD_ADDR_VAR 0 4
2529: PUSH
2530: LD_INT 5
2532: PPUSH
2533: LD_INT 10
2535: PPUSH
2536: CALL_OW 12
2540: PUSH
2541: LD_INT 10
2543: MUL
2544: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2545: LD_VAR 0 3
2549: PPUSH
2550: LD_INT 1
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 1
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 12
2570: ARRAY
2571: PPUSH
2572: LD_VAR 0 4
2576: PPUSH
2577: CALL_OW 291
// end ; end ;
2581: GO 2400
2583: POP
2584: POP
// end ;
2585: LD_VAR 0 1
2589: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2590: LD_INT 0
2592: PPUSH
2593: PPUSH
2594: PPUSH
// uc_side = 4 ;
2595: LD_ADDR_OWVAR 20
2599: PUSH
2600: LD_INT 4
2602: ST_TO_ADDR
// uc_nation = 1 ;
2603: LD_ADDR_OWVAR 21
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2611: LD_ADDR_EXP 11
2615: PUSH
2616: LD_STRING Simms
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: LD_STRING 
2624: PPUSH
2625: CALL 46970 0 3
2629: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2630: LD_ADDR_EXP 12
2634: PUSH
2635: LD_STRING Denis
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_STRING 08_
2643: PPUSH
2644: CALL 46970 0 3
2648: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2649: LD_ADDR_EXP 13
2653: PUSH
2654: LD_STRING Joan
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_STRING 08_
2662: PPUSH
2663: CALL 46970 0 3
2667: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2668: LD_STRING 08_Khatam
2670: PPUSH
2671: CALL_OW 28
2675: IFFALSE 2698
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2677: LD_ADDR_EXP 14
2681: PUSH
2682: LD_STRING Khatam
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 08_
2690: PPUSH
2691: CALL 46970 0 3
2695: ST_TO_ADDR
2696: GO 2726
// if TestCharacters ( 03_Khatam ) then
2698: LD_STRING 03_Khatam
2700: PPUSH
2701: CALL_OW 28
2705: IFFALSE 2726
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2707: LD_ADDR_EXP 14
2711: PUSH
2712: LD_STRING Khatam
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: LD_STRING 03_
2720: PPUSH
2721: CALL 46970 0 3
2725: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2726: LD_ADDR_EXP 15
2730: PUSH
2731: LD_STRING Gladstone
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_STRING 08_
2739: PPUSH
2740: CALL 46970 0 3
2744: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2745: LD_ADDR_EXP 17
2749: PUSH
2750: LD_STRING DeltaDoctor
2752: PPUSH
2753: LD_INT 1
2755: PPUSH
2756: LD_STRING 
2758: PPUSH
2759: CALL 46970 0 3
2763: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2764: LD_ADDR_EXP 7
2768: PUSH
2769: LD_STRING Frank
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_STRING 08_
2777: PPUSH
2778: CALL 46970 0 3
2782: ST_TO_ADDR
// if Frank then
2783: LD_EXP 7
2787: IFFALSE 2810
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2789: LD_ADDR_EXP 8
2793: PUSH
2794: LD_STRING Yamoko
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: LD_STRING 
2802: PPUSH
2803: CALL 46970 0 3
2807: ST_TO_ADDR
2808: GO 2829
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2810: LD_ADDR_EXP 8
2814: PUSH
2815: LD_STRING Kikuchi
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: LD_STRING 08_
2823: PPUSH
2824: CALL 46970 0 3
2828: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2829: LD_ADDR_EXP 22
2833: PUSH
2834: LD_STRING 09_others
2836: PPUSH
2837: CALL_OW 31
2841: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2842: LD_ADDR_EXP 23
2846: PUSH
2847: LD_STRING 09_apes
2849: PPUSH
2850: CALL_OW 31
2854: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2855: LD_EXP 11
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2870: LD_EXP 12
2874: PPUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 0
2880: PPUSH
2881: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2885: LD_EXP 13
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2900: LD_EXP 14
2904: PPUSH
2905: LD_INT 1
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2915: LD_EXP 15
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2930: LD_EXP 17
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 0
2940: PPUSH
2941: CALL_OW 49
// if Kikuchi then
2945: LD_EXP 8
2949: IFFALSE 2966
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2951: LD_EXP 8
2955: PPUSH
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2966: LD_EXP 11
2970: PUSH
2971: LD_EXP 14
2975: PUSH
2976: LD_EXP 12
2980: PUSH
2981: LD_EXP 15
2985: PUSH
2986: LD_EXP 17
2990: PUSH
2991: LD_EXP 13
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: PPUSH
3004: LD_INT 4
3006: PPUSH
3007: CALL_OW 336
// if others09 > 2 then
3011: LD_EXP 22
3015: PUSH
3016: LD_INT 2
3018: GREATER
3019: IFFALSE 3100
// begin for i := 1 to 3 do
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: DOUBLE
3027: LD_INT 1
3029: DEC
3030: ST_TO_ADDR
3031: LD_INT 3
3033: PUSH
3034: FOR_TO
3035: IFFALSE 3096
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3037: LD_EXP 22
3041: PUSH
3042: LD_VAR 0 2
3046: ARRAY
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: LD_INT 0
3053: PPUSH
3054: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3058: LD_ADDR_EXP 22
3062: PUSH
3063: LD_EXP 22
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 3
3075: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3076: LD_EXP 22
3080: PUSH
3081: LD_VAR 0 2
3085: ARRAY
3086: PPUSH
3087: LD_INT 2
3089: PPUSH
3090: CALL_OW 336
// end ;
3094: GO 3034
3096: POP
3097: POP
// end else
3098: GO 3160
// begin for i in others09 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: LD_EXP 22
3109: PUSH
3110: FOR_IN
3111: IFFALSE 3158
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 1
3120: PPUSH
3121: LD_INT 0
3123: PPUSH
3124: CALL_OW 49
// others09 = others09 diff i ;
3128: LD_ADDR_EXP 22
3132: PUSH
3133: LD_EXP 22
3137: PUSH
3138: LD_VAR 0 2
3142: DIFF
3143: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3144: LD_VAR 0 2
3148: PPUSH
3149: LD_INT 2
3151: PPUSH
3152: CALL_OW 336
// end ;
3156: GO 3110
3158: POP
3159: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3160: LD_INT 22
3162: PUSH
3163: LD_INT 4
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 25
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 69
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3324
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3194: LD_ADDR_VAR 0 3
3198: PUSH
3199: LD_INT 22
3201: PUSH
3202: LD_INT 4
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 25
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PPUSH
3223: CALL_OW 69
3227: PUSH
3228: LD_EXP 11
3232: PUSH
3233: LD_EXP 14
3237: PUSH
3238: LD_EXP 12
3242: PUSH
3243: LD_EXP 15
3247: PUSH
3248: LD_EXP 17
3252: PUSH
3253: LD_EXP 13
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: DIFF
3266: ST_TO_ADDR
// if not tmp then
3267: LD_VAR 0 3
3271: NOT
3272: IFFALSE 3308
// begin if Denis then
3274: LD_EXP 12
3278: IFFALSE 3294
// SetClass ( Denis , 2 ) else
3280: LD_EXP 12
3284: PPUSH
3285: LD_INT 2
3287: PPUSH
3288: CALL_OW 336
3292: GO 3306
// SetClass ( DeltaDoctor , 2 ) ;
3294: LD_EXP 17
3298: PPUSH
3299: LD_INT 2
3301: PPUSH
3302: CALL_OW 336
// end else
3306: GO 3324
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3308: LD_VAR 0 3
3312: PUSH
3313: LD_INT 1
3315: ARRAY
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: CALL_OW 336
// end ; end ; for i in ape09 do
3324: LD_ADDR_VAR 0 2
3328: PUSH
3329: LD_EXP 23
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3354
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3337: LD_VAR 0 2
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: LD_INT 0
3347: PPUSH
3348: CALL_OW 49
3352: GO 3334
3354: POP
3355: POP
// uc_side = 4 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 4
3363: ST_TO_ADDR
// hc_class := 1 ;
3364: LD_ADDR_OWVAR 28
3368: PUSH
3369: LD_INT 1
3371: ST_TO_ADDR
// hc_sex := sex_female ;
3372: LD_ADDR_OWVAR 27
3376: PUSH
3377: LD_INT 2
3379: ST_TO_ADDR
// hc_gallery :=  ;
3380: LD_ADDR_OWVAR 33
3384: PUSH
3385: LD_STRING 
3387: ST_TO_ADDR
// hc_name :=  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3396: LD_ADDR_OWVAR 31
3400: PUSH
3401: LD_INT 1
3403: PUSH
3404: LD_INT 7
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 0
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: ST_TO_ADDR
// AmScout = CreateHuman ;
3419: LD_ADDR_EXP 18
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// end ;
3429: LD_VAR 0 1
3433: RET
// export function PrepareCornell ; begin
3434: LD_INT 0
3436: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3437: LD_INT 4
3439: PPUSH
3440: LD_INT 4
3442: PPUSH
3443: CALL_OW 343
// uc_side = 4 ;
3447: LD_ADDR_OWVAR 20
3451: PUSH
3452: LD_INT 4
3454: ST_TO_ADDR
// uc_nation = 1 ;
3455: LD_ADDR_OWVAR 21
3459: PUSH
3460: LD_INT 1
3462: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_STRING Cornel
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: LD_STRING 03_
3476: PPUSH
3477: CALL 46970 0 3
3481: ST_TO_ADDR
// if not Cornell then
3482: LD_EXP 19
3486: NOT
3487: IFFALSE 3491
// exit ;
3489: GO 3599
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3491: LD_EXP 19
3495: PPUSH
3496: LD_INT 8
3498: PPUSH
3499: LD_INT 0
3501: PPUSH
3502: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3506: LD_EXP 19
3510: PPUSH
3511: LD_INT 350
3513: PPUSH
3514: CALL_OW 234
// if IsInUnit ( JMM ) then
3518: LD_EXP 1
3522: PPUSH
3523: CALL_OW 310
3527: IFFALSE 3570
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3529: LD_EXP 19
3533: PPUSH
3534: LD_EXP 1
3538: PPUSH
3539: CALL_OW 310
3543: PPUSH
3544: CALL_OW 250
3548: PPUSH
3549: LD_EXP 1
3553: PPUSH
3554: CALL_OW 310
3558: PPUSH
3559: CALL_OW 251
3563: PPUSH
3564: CALL_OW 111
3568: GO 3599
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3570: LD_EXP 19
3574: PPUSH
3575: LD_EXP 1
3579: PPUSH
3580: CALL_OW 250
3584: PPUSH
3585: LD_EXP 1
3589: PPUSH
3590: CALL_OW 251
3594: PPUSH
3595: CALL_OW 111
// end ; end_of_file
3599: LD_VAR 0 1
3603: RET
// export function PrepareRussians ; var i , un ; begin
3604: LD_INT 0
3606: PPUSH
3607: PPUSH
3608: PPUSH
// uc_side = 3 ;
3609: LD_ADDR_OWVAR 20
3613: PUSH
3614: LD_INT 3
3616: ST_TO_ADDR
// uc_nation = 3 ;
3617: LD_ADDR_OWVAR 21
3621: PUSH
3622: LD_INT 3
3624: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3625: LD_ADDR_EXP 25
3629: PUSH
3630: LD_STRING Tsaritsyn
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: LD_STRING 
3638: PPUSH
3639: CALL 46970 0 3
3643: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3644: LD_EXP 25
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
// for i = 1 to 14 do
3659: LD_ADDR_VAR 0 2
3663: PUSH
3664: DOUBLE
3665: LD_INT 1
3667: DEC
3668: ST_TO_ADDR
3669: LD_INT 14
3671: PUSH
3672: FOR_TO
3673: IFFALSE 3759
// begin uc_side = 3 ;
3675: LD_ADDR_OWVAR 20
3679: PUSH
3680: LD_INT 3
3682: ST_TO_ADDR
// uc_nation = 3 ;
3683: LD_ADDR_OWVAR 21
3687: PUSH
3688: LD_INT 3
3690: ST_TO_ADDR
// hc_gallery =  ;
3691: LD_ADDR_OWVAR 33
3695: PUSH
3696: LD_STRING 
3698: ST_TO_ADDR
// hc_name =  ;
3699: LD_ADDR_OWVAR 26
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3707: LD_INT 0
3709: PPUSH
3710: LD_INT 1
3712: PPUSH
3713: LD_EXP 36
3717: PPUSH
3718: LD_EXP 37
3722: PPUSH
3723: CALL_OW 12
3727: PPUSH
3728: CALL_OW 380
// un = CreateHuman ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: CALL_OW 44
3741: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 49
// end ;
3757: GO 3672
3759: POP
3760: POP
// for i = 1 to 6 do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3861
// begin uc_side = 3 ;
3777: LD_ADDR_OWVAR 20
3781: PUSH
3782: LD_INT 3
3784: ST_TO_ADDR
// uc_nation = 3 ;
3785: LD_ADDR_OWVAR 21
3789: PUSH
3790: LD_INT 3
3792: ST_TO_ADDR
// hc_gallery =  ;
3793: LD_ADDR_OWVAR 33
3797: PUSH
3798: LD_STRING 
3800: ST_TO_ADDR
// hc_name =  ;
3801: LD_ADDR_OWVAR 26
3805: PUSH
3806: LD_STRING 
3808: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3809: LD_INT 0
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: LD_EXP 36
3819: PPUSH
3820: LD_EXP 37
3824: PPUSH
3825: CALL_OW 12
3829: PPUSH
3830: CALL_OW 380
// un = CreateHuman ;
3834: LD_ADDR_VAR 0 3
3838: PUSH
3839: CALL_OW 44
3843: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 3
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// end ;
3859: GO 3774
3861: POP
3862: POP
// for i = 1 to 6 do
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_INT 6
3875: PUSH
3876: FOR_TO
3877: IFFALSE 3963
// begin uc_side = 3 ;
3879: LD_ADDR_OWVAR 20
3883: PUSH
3884: LD_INT 3
3886: ST_TO_ADDR
// uc_nation = 3 ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_INT 3
3894: ST_TO_ADDR
// hc_gallery =  ;
3895: LD_ADDR_OWVAR 33
3899: PUSH
3900: LD_STRING 
3902: ST_TO_ADDR
// hc_name =  ;
3903: LD_ADDR_OWVAR 26
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3911: LD_INT 0
3913: PPUSH
3914: LD_INT 3
3916: PPUSH
3917: LD_EXP 36
3921: PPUSH
3922: LD_EXP 37
3926: PPUSH
3927: CALL_OW 12
3931: PPUSH
3932: CALL_OW 380
// un = CreateHuman ;
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: CALL_OW 44
3945: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3946: LD_VAR 0 3
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 49
// end ;
3961: GO 3876
3963: POP
3964: POP
// for i = 1 to 4 do
3965: LD_ADDR_VAR 0 2
3969: PUSH
3970: DOUBLE
3971: LD_INT 1
3973: DEC
3974: ST_TO_ADDR
3975: LD_INT 4
3977: PUSH
3978: FOR_TO
3979: IFFALSE 4065
// begin uc_side = 3 ;
3981: LD_ADDR_OWVAR 20
3985: PUSH
3986: LD_INT 3
3988: ST_TO_ADDR
// uc_nation = 3 ;
3989: LD_ADDR_OWVAR 21
3993: PUSH
3994: LD_INT 3
3996: ST_TO_ADDR
// hc_gallery =  ;
3997: LD_ADDR_OWVAR 33
4001: PUSH
4002: LD_STRING 
4004: ST_TO_ADDR
// hc_name =  ;
4005: LD_ADDR_OWVAR 26
4009: PUSH
4010: LD_STRING 
4012: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 4
4018: PPUSH
4019: LD_EXP 36
4023: PPUSH
4024: LD_EXP 37
4028: PPUSH
4029: CALL_OW 12
4033: PPUSH
4034: CALL_OW 380
// un = CreateHuman ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4048: LD_VAR 0 3
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 49
// end ;
4063: GO 3978
4065: POP
4066: POP
// end ; end_of_file
4067: LD_VAR 0 1
4071: RET
// export function PrepareArabianCommander ; begin
4072: LD_INT 0
4074: PPUSH
// uc_side = 2 ;
4075: LD_ADDR_OWVAR 20
4079: PUSH
4080: LD_INT 2
4082: ST_TO_ADDR
// uc_nation = 2 ;
4083: LD_ADDR_OWVAR 21
4087: PUSH
4088: LD_INT 2
4090: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4091: LD_ADDR_EXP 26
4095: PUSH
4096: LD_STRING Dietrich
4098: PPUSH
4099: CALL_OW 25
4103: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4104: LD_EXP 26
4108: PPUSH
4109: LD_INT 4
4111: PPUSH
4112: LD_INT 0
4114: PPUSH
4115: CALL_OW 49
// end ;
4119: LD_VAR 0 1
4123: RET
// export function PrepareArabian ; var i , un , veh ; begin
4124: LD_INT 0
4126: PPUSH
4127: PPUSH
4128: PPUSH
4129: PPUSH
// uc_side := 2 ;
4130: LD_ADDR_OWVAR 20
4134: PUSH
4135: LD_INT 2
4137: ST_TO_ADDR
// uc_nation := 2 ;
4138: LD_ADDR_OWVAR 21
4142: PUSH
4143: LD_INT 2
4145: ST_TO_ADDR
// if not Ahmed then
4146: LD_EXP 27
4150: NOT
4151: IFFALSE 4219
// begin InitHc ;
4153: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4157: LD_INT 1
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 36
4167: PPUSH
4168: LD_EXP 37
4172: PUSH
4173: LD_INT 1
4175: PLUS
4176: PPUSH
4177: CALL_OW 12
4181: PPUSH
4182: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4186: LD_ADDR_OWVAR 26
4190: PUSH
4191: LD_STRING Ahmed Abbasid
4193: ST_TO_ADDR
// Ahmed := CreateHuman ;
4194: LD_ADDR_EXP 27
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4204: LD_EXP 27
4208: PPUSH
4209: LD_INT 4
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 49
// end ; for i = 1 to 4 do
4219: LD_ADDR_VAR 0 2
4223: PUSH
4224: DOUBLE
4225: LD_INT 1
4227: DEC
4228: ST_TO_ADDR
4229: LD_INT 4
4231: PUSH
4232: FOR_TO
4233: IFFALSE 4319
// begin uc_side = 2 ;
4235: LD_ADDR_OWVAR 20
4239: PUSH
4240: LD_INT 2
4242: ST_TO_ADDR
// uc_nation = 2 ;
4243: LD_ADDR_OWVAR 21
4247: PUSH
4248: LD_INT 2
4250: ST_TO_ADDR
// hc_gallery =  ;
4251: LD_ADDR_OWVAR 33
4255: PUSH
4256: LD_STRING 
4258: ST_TO_ADDR
// hc_name =  ;
4259: LD_ADDR_OWVAR 26
4263: PUSH
4264: LD_STRING 
4266: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4267: LD_INT 0
4269: PPUSH
4270: LD_INT 2
4272: PPUSH
4273: LD_EXP 36
4277: PPUSH
4278: LD_EXP 37
4282: PPUSH
4283: CALL_OW 12
4287: PPUSH
4288: CALL_OW 380
// un = CreateHuman ;
4292: LD_ADDR_VAR 0 3
4296: PUSH
4297: CALL_OW 44
4301: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_INT 4
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL_OW 49
// end ;
4317: GO 4232
4319: POP
4320: POP
// for i = 1 to 5 do
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: DOUBLE
4327: LD_INT 1
4329: DEC
4330: ST_TO_ADDR
4331: LD_INT 5
4333: PUSH
4334: FOR_TO
4335: IFFALSE 4421
// begin uc_side = 2 ;
4337: LD_ADDR_OWVAR 20
4341: PUSH
4342: LD_INT 2
4344: ST_TO_ADDR
// uc_nation = 2 ;
4345: LD_ADDR_OWVAR 21
4349: PUSH
4350: LD_INT 2
4352: ST_TO_ADDR
// hc_gallery =  ;
4353: LD_ADDR_OWVAR 33
4357: PUSH
4358: LD_STRING 
4360: ST_TO_ADDR
// hc_name =  ;
4361: LD_ADDR_OWVAR 26
4365: PUSH
4366: LD_STRING 
4368: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4369: LD_INT 0
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_EXP 36
4379: PPUSH
4380: LD_EXP 37
4384: PPUSH
4385: CALL_OW 12
4389: PPUSH
4390: CALL_OW 380
// un = CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: LD_INT 0
4414: PPUSH
4415: CALL_OW 49
// end ;
4419: GO 4334
4421: POP
4422: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 3
4435: PUSH
4436: LD_INT 4
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: PUSH
4447: LD_OWVAR 67
4451: ARRAY
4452: PUSH
4453: FOR_TO
4454: IFFALSE 4540
// begin uc_side = 2 ;
4456: LD_ADDR_OWVAR 20
4460: PUSH
4461: LD_INT 2
4463: ST_TO_ADDR
// uc_nation = 2 ;
4464: LD_ADDR_OWVAR 21
4468: PUSH
4469: LD_INT 2
4471: ST_TO_ADDR
// hc_gallery =  ;
4472: LD_ADDR_OWVAR 33
4476: PUSH
4477: LD_STRING 
4479: ST_TO_ADDR
// hc_name =  ;
4480: LD_ADDR_OWVAR 26
4484: PUSH
4485: LD_STRING 
4487: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4488: LD_INT 0
4490: PPUSH
4491: LD_INT 4
4493: PPUSH
4494: LD_EXP 36
4498: PPUSH
4499: LD_EXP 37
4503: PPUSH
4504: CALL_OW 12
4508: PPUSH
4509: CALL_OW 380
// un = CreateHuman ;
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// end ;
4538: GO 4453
4540: POP
4541: POP
// for i = 1 to 2 do
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_INT 2
4554: PUSH
4555: FOR_TO
4556: IFFALSE 4686
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4558: LD_ADDR_VAR 0 4
4562: PUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 58
4585: PUSH
4586: EMPTY
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 69
4598: ST_TO_ADDR
// uc_side = 2 ;
4599: LD_ADDR_OWVAR 20
4603: PUSH
4604: LD_INT 2
4606: ST_TO_ADDR
// uc_nation = 2 ;
4607: LD_ADDR_OWVAR 21
4611: PUSH
4612: LD_INT 2
4614: ST_TO_ADDR
// hc_gallery =  ;
4615: LD_ADDR_OWVAR 33
4619: PUSH
4620: LD_STRING 
4622: ST_TO_ADDR
// hc_name =  ;
4623: LD_ADDR_OWVAR 26
4627: PUSH
4628: LD_STRING 
4630: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4631: LD_INT 0
4633: PPUSH
4634: LD_INT 3
4636: PPUSH
4637: LD_EXP 36
4641: PPUSH
4642: LD_EXP 37
4646: PPUSH
4647: CALL_OW 12
4651: PPUSH
4652: CALL_OW 380
// un = CreateHuman ;
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: CALL_OW 44
4665: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4666: LD_VAR 0 3
4670: PPUSH
4671: LD_VAR 0 4
4675: PUSH
4676: LD_INT 1
4678: ARRAY
4679: PPUSH
4680: CALL_OW 52
// end ;
4684: GO 4555
4686: POP
4687: POP
// end ;
4688: LD_VAR 0 1
4692: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4693: LD_INT 0
4695: PPUSH
4696: PPUSH
4697: PPUSH
4698: PPUSH
4699: PPUSH
4700: PPUSH
// for i := 1 to 2 do
4701: LD_ADDR_VAR 0 2
4705: PUSH
4706: DOUBLE
4707: LD_INT 1
4709: DEC
4710: ST_TO_ADDR
4711: LD_INT 2
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4841
// begin uc_side = 5 ;
4717: LD_ADDR_OWVAR 20
4721: PUSH
4722: LD_INT 5
4724: ST_TO_ADDR
// uc_nation = 2 ;
4725: LD_ADDR_OWVAR 21
4729: PUSH
4730: LD_INT 2
4732: ST_TO_ADDR
// vc_chassis := 31 ;
4733: LD_ADDR_OWVAR 37
4737: PUSH
4738: LD_INT 31
4740: ST_TO_ADDR
// vc_control := control_rider ;
4741: LD_ADDR_OWVAR 38
4745: PUSH
4746: LD_INT 4
4748: ST_TO_ADDR
// animal := CreateVehicle ;
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: CALL_OW 45
4758: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4759: LD_VAR 0 3
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 49
// hc_gallery =  ;
4774: LD_ADDR_OWVAR 33
4778: PUSH
4779: LD_STRING 
4781: ST_TO_ADDR
// hc_name =  ;
4782: LD_ADDR_OWVAR 26
4786: PUSH
4787: LD_STRING 
4789: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4790: LD_INT 0
4792: PPUSH
4793: LD_INT 11
4795: PPUSH
4796: LD_EXP 36
4800: PPUSH
4801: LD_EXP 37
4805: PPUSH
4806: CALL_OW 12
4810: PPUSH
4811: CALL_OW 380
// un = CreateHuman ;
4815: LD_ADDR_VAR 0 4
4819: PUSH
4820: CALL_OW 44
4824: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4825: LD_VAR 0 4
4829: PPUSH
4830: LD_VAR 0 3
4834: PPUSH
4835: CALL_OW 52
// end ;
4839: GO 4714
4841: POP
4842: POP
// repeat wait ( 0 0$1 ) ;
4843: LD_INT 35
4845: PPUSH
4846: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4850: LD_ADDR_VAR 0 5
4854: PUSH
4855: LD_INT 22
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PPUSH
4865: CALL_OW 69
4869: PPUSH
4870: LD_VAR 0 2
4874: PPUSH
4875: CALL_OW 74
4879: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4880: LD_ADDR_VAR 0 6
4884: PUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 1
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 2
4897: PUSH
4898: LD_INT 59
4900: PUSH
4901: EMPTY
4902: LIST
4903: PUSH
4904: LD_INT 21
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 21
4916: PUSH
4917: LD_INT 2
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: PPUSH
4937: CALL_OW 69
4941: PPUSH
4942: LD_VAR 0 2
4946: PPUSH
4947: CALL_OW 74
4951: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4952: LD_ADDR_VAR 0 2
4956: PUSH
4957: LD_INT 22
4959: PUSH
4960: LD_INT 5
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 25
4969: PUSH
4970: LD_INT 11
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: PUSH
4986: FOR_IN
4987: IFFALSE 5057
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4989: LD_VAR 0 2
4993: PPUSH
4994: LD_VAR 0 5
4998: PPUSH
4999: CALL_OW 296
5003: PUSH
5004: LD_INT 8
5006: PLUS
5007: PUSH
5008: LD_VAR 0 2
5012: PPUSH
5013: LD_VAR 0 6
5017: PPUSH
5018: CALL_OW 296
5022: LESS
5023: IFFALSE 5041
// ComAttackUnit ( i , target1 ) else
5025: LD_VAR 0 2
5029: PPUSH
5030: LD_VAR 0 5
5034: PPUSH
5035: CALL_OW 115
5039: GO 5055
// ComAttackUnit ( i , target2 ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 6
5050: PPUSH
5051: CALL_OW 115
// end ;
5055: GO 4986
5057: POP
5058: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5059: LD_INT 22
5061: PUSH
5062: LD_INT 5
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 25
5071: PUSH
5072: LD_INT 11
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PPUSH
5083: CALL_OW 69
5087: PUSH
5088: LD_INT 0
5090: EQUAL
5091: PUSH
5092: LD_INT 22
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 69
5106: PUSH
5107: LD_INT 0
5109: EQUAL
5110: OR
5111: IFFALSE 4843
// end ; end_of_file
5113: LD_VAR 0 1
5117: RET
// every 1 do
5118: GO 5120
5120: DISABLE
// begin Video ( true ) ;
5121: LD_INT 1
5123: PPUSH
5124: CALL 83264 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5128: LD_INT 1
5130: PPUSH
5131: LD_INT 19
5133: PPUSH
5134: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5138: LD_EXP 11
5142: PPUSH
5143: CALL_OW 87
// wait ( 0 0$3 ) ;
5147: LD_INT 105
5149: PPUSH
5150: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5154: LD_EXP 1
5158: PPUSH
5159: CALL_OW 310
5163: PPUSH
5164: CALL_OW 85
// Wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// if IsOk ( Gary ) then
5175: LD_EXP 10
5179: PPUSH
5180: CALL_OW 302
5184: IFFALSE 5222
// begin Say ( Gary , D2-Gary-1 ) ;
5186: LD_EXP 10
5190: PPUSH
5191: LD_STRING D2-Gary-1
5193: PPUSH
5194: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5198: LD_EXP 1
5202: PPUSH
5203: LD_STRING D2-JMM-1
5205: PPUSH
5206: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5210: LD_EXP 10
5214: PPUSH
5215: LD_STRING D2-Gary-2
5217: PPUSH
5218: CALL_OW 88
// end ; Video ( false ) ;
5222: LD_INT 0
5224: PPUSH
5225: CALL 83264 0 1
// ChangeMissionObjectives ( M1 ) ;
5229: LD_STRING M1
5231: PPUSH
5232: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5236: LD_INT 38
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: LD_INT 100
5244: PPUSH
5245: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5249: LD_INT 47
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: LD_INT 50
5257: PPUSH
5258: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5262: LD_INT 47
5264: PPUSH
5265: LD_INT 3
5267: PPUSH
5268: LD_INT 50
5270: PPUSH
5271: CALL_OW 291
// SaveForQuickRestart ;
5275: CALL_OW 22
// end ;
5279: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5280: LD_EXP 1
5284: PPUSH
5285: LD_EXP 11
5289: PPUSH
5290: CALL_OW 296
5294: PUSH
5295: LD_INT 15
5297: LESS
5298: IFFALSE 5979
5300: GO 5302
5302: DISABLE
5303: LD_INT 0
5305: PPUSH
// begin wait ( 0 0$3 ) ;
5306: LD_INT 105
5308: PPUSH
5309: CALL_OW 67
// Video ( true ) ;
5313: LD_INT 1
5315: PPUSH
5316: CALL 83264 0 1
// ComExitVehicle ( JMM ) ;
5320: LD_EXP 1
5324: PPUSH
5325: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5329: LD_EXP 1
5333: PPUSH
5334: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5338: LD_EXP 1
5342: PPUSH
5343: LD_EXP 11
5347: PPUSH
5348: CALL_OW 179
// p := 15 ;
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_INT 15
5359: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5360: LD_INT 35
5362: PPUSH
5363: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5367: LD_EXP 11
5371: PUSH
5372: LD_EXP 13
5376: PUSH
5377: LD_EXP 12
5381: PUSH
5382: LD_EXP 14
5386: PUSH
5387: LD_EXP 8
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PPUSH
5399: LD_EXP 1
5403: PPUSH
5404: CALL_OW 112
// p := p - 1 ;
5408: LD_ADDR_VAR 0 1
5412: PUSH
5413: LD_VAR 0 1
5417: PUSH
5418: LD_INT 1
5420: MINUS
5421: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_EXP 11
5431: PPUSH
5432: CALL_OW 296
5436: PUSH
5437: LD_INT 5
5439: LESS
5440: PUSH
5441: LD_VAR 0 1
5445: PUSH
5446: LD_INT 0
5448: LESSEQUAL
5449: OR
5450: IFFALSE 5360
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5452: LD_EXP 11
5456: PUSH
5457: LD_EXP 13
5461: PUSH
5462: LD_EXP 12
5466: PUSH
5467: LD_EXP 14
5471: PUSH
5472: LD_EXP 8
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: PPUSH
5484: LD_EXP 1
5488: PPUSH
5489: CALL_OW 119
// if not IsInUnit ( JMM ) then
5493: LD_EXP 1
5497: PPUSH
5498: CALL_OW 310
5502: NOT
5503: IFFALSE 5519
// ComTurnUnit ( JMM , Simms ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_EXP 11
5514: PPUSH
5515: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5519: LD_EXP 11
5523: PUSH
5524: LD_EXP 13
5528: PUSH
5529: LD_EXP 12
5533: PUSH
5534: LD_EXP 14
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: PPUSH
5545: LD_EXP 1
5549: PPUSH
5550: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5554: LD_EXP 1
5558: PUSH
5559: LD_EXP 11
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PPUSH
5568: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5572: LD_EXP 11
5576: PPUSH
5577: LD_STRING D2a-Sim-1
5579: PPUSH
5580: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5584: LD_EXP 1
5588: PPUSH
5589: LD_STRING D2a-JMM-1
5591: PPUSH
5592: CALL_OW 88
// if IsOk ( Joan ) then
5596: LD_EXP 13
5600: PPUSH
5601: CALL_OW 302
5605: IFFALSE 5683
// begin if not IsInUnit ( JMM ) then
5607: LD_EXP 1
5611: PPUSH
5612: CALL_OW 310
5616: NOT
5617: IFFALSE 5633
// ComTurnUnit ( JMM , Joan ) ;
5619: LD_EXP 1
5623: PPUSH
5624: LD_EXP 13
5628: PPUSH
5629: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5633: LD_EXP 13
5637: PPUSH
5638: LD_EXP 1
5642: PPUSH
5643: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5647: LD_EXP 13
5651: PPUSH
5652: LD_STRING D2b-Joan-1
5654: PPUSH
5655: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5659: LD_EXP 1
5663: PPUSH
5664: LD_STRING D2b-JMM-1
5666: PPUSH
5667: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5671: LD_EXP 13
5675: PPUSH
5676: LD_STRING D2b-Joan-2
5678: PPUSH
5679: CALL_OW 88
// end ; if IsOk ( Denis ) then
5683: LD_EXP 12
5687: PPUSH
5688: CALL_OW 302
5692: IFFALSE 5746
// begin if not IsInUnit ( JMM ) then
5694: LD_EXP 1
5698: PPUSH
5699: CALL_OW 310
5703: NOT
5704: IFFALSE 5720
// ComTurnUnit ( JMM , Denis ) ;
5706: LD_EXP 1
5710: PPUSH
5711: LD_EXP 12
5715: PPUSH
5716: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
5720: LD_EXP 12
5724: PPUSH
5725: LD_EXP 1
5729: PPUSH
5730: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5734: LD_EXP 12
5738: PPUSH
5739: LD_STRING D2c-Den-1
5741: PPUSH
5742: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5746: LD_EXP 8
5750: PPUSH
5751: CALL_OW 302
5755: PUSH
5756: LD_STRING 08_Kikuchi
5758: PPUSH
5759: CALL_OW 28
5763: NOT
5764: AND
5765: IFFALSE 5860
// begin repeat wait ( 0 0$1 ) ;
5767: LD_INT 35
5769: PPUSH
5770: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5774: LD_EXP 8
5778: PPUSH
5779: LD_EXP 1
5783: PPUSH
5784: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5788: LD_EXP 1
5792: PPUSH
5793: LD_EXP 8
5797: PPUSH
5798: CALL_OW 296
5802: PUSH
5803: LD_INT 5
5805: LESS
5806: IFFALSE 5767
// ComTurnUnit ( Kikuchi , JMM ) ;
5808: LD_EXP 8
5812: PPUSH
5813: LD_EXP 1
5817: PPUSH
5818: CALL_OW 119
// if not IsInUnit ( JMM ) then
5822: LD_EXP 1
5826: PPUSH
5827: CALL_OW 310
5831: NOT
5832: IFFALSE 5848
// ComTurnUnit ( JMM , Kikuchi ) ;
5834: LD_EXP 1
5838: PPUSH
5839: LD_EXP 8
5843: PPUSH
5844: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5848: LD_EXP 8
5852: PPUSH
5853: LD_STRING D3b-Yam-1
5855: PPUSH
5856: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5860: LD_EXP 14
5864: PPUSH
5865: CALL_OW 302
5869: IFFALSE 5935
// begin if not IsInUnit ( JMM ) then
5871: LD_EXP 1
5875: PPUSH
5876: CALL_OW 310
5880: NOT
5881: IFFALSE 5897
// ComTurnUnit ( JMM , Khatam ) ;
5883: LD_EXP 1
5887: PPUSH
5888: LD_EXP 14
5892: PPUSH
5893: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
5897: LD_EXP 14
5901: PPUSH
5902: LD_EXP 1
5906: PPUSH
5907: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5911: LD_EXP 1
5915: PPUSH
5916: LD_STRING D2c-JMM-1
5918: PPUSH
5919: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5923: LD_EXP 14
5927: PPUSH
5928: LD_STRING D2c-Khat-1
5930: PPUSH
5931: CALL_OW 88
// end ; Video ( false ) ;
5935: LD_INT 0
5937: PPUSH
5938: CALL 83264 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5942: LD_INT 22
5944: PUSH
5945: LD_INT 4
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 69
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5964: LD_STRING M1a
5966: PPUSH
5967: CALL_OW 337
// joinEpsilon = 1 ;
5971: LD_ADDR_EXP 29
5975: PUSH
5976: LD_INT 1
5978: ST_TO_ADDR
// end ;
5979: PPOPN 1
5981: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5982: LD_INT 38
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: CALL_OW 289
5992: PUSH
5993: LD_INT 0
5995: EQUAL
5996: PUSH
5997: LD_INT 47
5999: PPUSH
6000: LD_INT 1
6002: PPUSH
6003: CALL_OW 289
6007: PUSH
6008: LD_INT 0
6010: EQUAL
6011: AND
6012: PUSH
6013: LD_INT 47
6015: PPUSH
6016: LD_INT 2
6018: PPUSH
6019: CALL_OW 289
6023: PUSH
6024: LD_INT 0
6026: EQUAL
6027: AND
6028: IFFALSE 6153
6030: GO 6032
6032: DISABLE
6033: LD_INT 0
6035: PPUSH
// begin p := 0 ;
6036: LD_ADDR_VAR 0 1
6040: PUSH
6041: LD_INT 0
6043: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6044: LD_INT 38
6046: PUSH
6047: LD_INT 47
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: LD_INT 56
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6064: LD_INT 35
6066: PPUSH
6067: CALL_OW 67
// p := p + 1 ;
6071: LD_ADDR_VAR 0 1
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: LD_INT 1
6083: PLUS
6084: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6085: LD_INT 38
6087: PUSH
6088: LD_INT 47
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PPUSH
6095: LD_INT 56
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6105: LD_INT 38
6107: PPUSH
6108: LD_INT 27
6110: PPUSH
6111: CALL_OW 308
6115: IFFALSE 6124
// RemoveUnit ( cargo1 ) ;
6117: LD_INT 38
6119: PPUSH
6120: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6124: LD_INT 47
6126: PPUSH
6127: LD_INT 27
6129: PPUSH
6130: CALL_OW 308
6134: IFFALSE 6143
// RemoveUnit ( cargo2 ) ;
6136: LD_INT 47
6138: PPUSH
6139: CALL_OW 64
// until p > 30 ;
6143: LD_VAR 0 1
6147: PUSH
6148: LD_INT 30
6150: GREATER
6151: IFFALSE 6064
// end ;
6153: PPOPN 1
6155: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6156: LD_EXP 65
6160: PUSH
6161: LD_INT 1
6163: EQUAL
6164: IFFALSE 7296
6166: GO 6168
6168: DISABLE
6169: LD_INT 0
6171: PPUSH
6172: PPUSH
6173: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6174: LD_ADDR_VAR 0 1
6178: PUSH
6179: LD_INT 22
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 4
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 26
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: PUSH
6219: LD_EXP 1
6223: PUSH
6224: LD_EXP 2
6228: PUSH
6229: LD_EXP 3
6233: PUSH
6234: LD_EXP 4
6238: PUSH
6239: LD_EXP 5
6243: PUSH
6244: LD_EXP 6
6248: PUSH
6249: LD_EXP 7
6253: PUSH
6254: LD_EXP 8
6258: PUSH
6259: LD_EXP 9
6263: PUSH
6264: LD_EXP 10
6268: PUSH
6269: LD_EXP 11
6273: PUSH
6274: LD_EXP 12
6278: PUSH
6279: LD_EXP 13
6283: PUSH
6284: LD_EXP 14
6288: PUSH
6289: LD_EXP 15
6293: PUSH
6294: LD_EXP 16
6298: PUSH
6299: LD_EXP 17
6303: PUSH
6304: LD_EXP 18
6308: PUSH
6309: LD_EXP 19
6313: PUSH
6314: LD_EXP 24
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: DIFF
6341: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6342: LD_ADDR_VAR 0 2
6346: PUSH
6347: LD_INT 22
6349: PUSH
6350: LD_INT 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 26
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 2
6369: PUSH
6370: LD_INT 25
6372: PUSH
6373: LD_INT 1
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 25
6382: PUSH
6383: LD_INT 2
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 25
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: PPUSH
6411: CALL_OW 69
6415: PUSH
6416: LD_EXP 1
6420: PUSH
6421: LD_EXP 2
6425: PUSH
6426: LD_EXP 3
6430: PUSH
6431: LD_EXP 4
6435: PUSH
6436: LD_EXP 5
6440: PUSH
6441: LD_EXP 6
6445: PUSH
6446: LD_EXP 7
6450: PUSH
6451: LD_EXP 8
6455: PUSH
6456: LD_EXP 9
6460: PUSH
6461: LD_EXP 10
6465: PUSH
6466: LD_EXP 11
6470: PUSH
6471: LD_EXP 12
6475: PUSH
6476: LD_EXP 13
6480: PUSH
6481: LD_EXP 14
6485: PUSH
6486: LD_EXP 15
6490: PUSH
6491: LD_EXP 16
6495: PUSH
6496: LD_EXP 17
6500: PUSH
6501: LD_EXP 18
6505: PUSH
6506: LD_EXP 19
6510: PUSH
6511: LD_EXP 24
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: DIFF
6538: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6539: LD_EXP 10
6543: PUSH
6544: LD_VAR 0 2
6548: OR
6549: PUSH
6550: LD_EXP 17
6554: PUSH
6555: LD_VAR 0 1
6559: OR
6560: AND
6561: IFFALSE 6780
// begin DialogueOn ;
6563: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6567: LD_EXP 17
6571: PPUSH
6572: CALL_OW 302
6576: IFFALSE 6592
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6578: LD_EXP 17
6582: PPUSH
6583: LD_STRING D3-Sci1-1
6585: PPUSH
6586: CALL_OW 88
6590: GO 6604
// Say ( tmp1 , D3-Sci1-1 ) ;
6592: LD_VAR 0 1
6596: PPUSH
6597: LD_STRING D3-Sci1-1
6599: PPUSH
6600: CALL_OW 88
// if IsOk ( Gary ) then
6604: LD_EXP 10
6608: PPUSH
6609: CALL_OW 302
6613: IFFALSE 6629
// Say ( Gary , D3-Gary-1 ) else
6615: LD_EXP 10
6619: PPUSH
6620: LD_STRING D3-Gary-1
6622: PPUSH
6623: CALL_OW 88
6627: GO 6641
// Say ( tmp2 , D3-Gary-1 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_STRING D3-Gary-1
6636: PPUSH
6637: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6641: LD_EXP 17
6645: PPUSH
6646: CALL_OW 302
6650: IFFALSE 6666
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6652: LD_EXP 17
6656: PPUSH
6657: LD_STRING D3-Sci1-2
6659: PPUSH
6660: CALL_OW 88
6664: GO 6678
// Say ( tmp1 , D3-Sci1-2 ) ;
6666: LD_VAR 0 1
6670: PPUSH
6671: LD_STRING D3-Sci1-2
6673: PPUSH
6674: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6678: LD_EXP 1
6682: PPUSH
6683: LD_STRING D3-JMM-2
6685: PPUSH
6686: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6690: LD_EXP 17
6694: PPUSH
6695: CALL_OW 302
6699: IFFALSE 6715
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6701: LD_EXP 17
6705: PPUSH
6706: LD_STRING D3-Sci1-3
6708: PPUSH
6709: CALL_OW 88
6713: GO 6727
// Say ( tmp1 , D3-Sci1-3 ) ;
6715: LD_VAR 0 1
6719: PPUSH
6720: LD_STRING D3-Sci1-3
6722: PPUSH
6723: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6727: LD_EXP 1
6731: PPUSH
6732: LD_STRING D3-JMM-3
6734: PPUSH
6735: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6739: LD_EXP 17
6743: PPUSH
6744: CALL_OW 302
6748: IFFALSE 6764
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6750: LD_EXP 17
6754: PPUSH
6755: LD_STRING D3-Sci1-4
6757: PPUSH
6758: CALL_OW 88
6762: GO 6776
// Say ( tmp1 , D3-Sci1-4 ) ;
6764: LD_VAR 0 1
6768: PPUSH
6769: LD_STRING D3-Sci1-4
6771: PPUSH
6772: CALL_OW 88
// DialogueOff ;
6776: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6780: LD_INT 12
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: LD_INT 1
6788: PPUSH
6789: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6793: LD_INT 32
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: LD_INT 1
6801: PPUSH
6802: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6806: LD_INT 12
6808: PPUSH
6809: LD_INT 1
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6819: LD_INT 33
6821: PPUSH
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 1
6827: PPUSH
6828: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6832: LD_STRING M2
6834: PPUSH
6835: CALL_OW 337
// wait ( 3 3$0 ) ;
6839: LD_INT 6300
6841: PPUSH
6842: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6846: LD_INT 35
6848: PPUSH
6849: CALL_OW 67
// until not InBattle ( 1 ) ;
6853: LD_INT 1
6855: PPUSH
6856: CALL_OW 463
6860: NOT
6861: IFFALSE 6846
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6863: LD_EXP 11
6867: PPUSH
6868: CALL_OW 302
6872: PUSH
6873: LD_EXP 17
6877: PPUSH
6878: CALL_OW 302
6882: AND
6883: IFFALSE 7052
// begin DialogueOn ;
6885: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6889: LD_EXP 11
6893: PPUSH
6894: LD_STRING D3a-Sim-1
6896: PPUSH
6897: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6901: LD_EXP 17
6905: PPUSH
6906: LD_STRING D3a-Sci1-1
6908: PPUSH
6909: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6913: LD_EXP 11
6917: PPUSH
6918: LD_STRING D3a-Sim-2
6920: PPUSH
6921: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6925: LD_EXP 17
6929: PPUSH
6930: LD_STRING D3a-Sci1-2
6932: PPUSH
6933: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6937: LD_EXP 11
6941: PPUSH
6942: LD_STRING D3a-Sim-3
6944: PPUSH
6945: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6949: LD_EXP 17
6953: PPUSH
6954: LD_STRING D3a-Sci1-3
6956: PPUSH
6957: CALL_OW 88
// if IsOK ( Joan ) then
6961: LD_EXP 13
6965: PPUSH
6966: CALL_OW 302
6970: IFFALSE 6986
// Say ( Simms , D3a-Sim-4 ) else
6972: LD_EXP 11
6976: PPUSH
6977: LD_STRING D3a-Sim-4
6979: PPUSH
6980: CALL_OW 88
6984: GO 6998
// Say ( Simms , D3a-Sim-4a ) ;
6986: LD_EXP 11
6990: PPUSH
6991: LD_STRING D3a-Sim-4a
6993: PPUSH
6994: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6998: LD_EXP 17
7002: PPUSH
7003: LD_STRING D3a-Sci1-4
7005: PPUSH
7006: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7010: LD_EXP 11
7014: PPUSH
7015: LD_STRING D3a-Sim-5
7017: PPUSH
7018: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7022: LD_EXP 17
7026: PPUSH
7027: LD_STRING D3a-Sci1-5
7029: PPUSH
7030: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7034: LD_EXP 11
7038: PPUSH
7039: LD_STRING D3a-Sim-6
7041: PPUSH
7042: CALL_OW 88
// DialogueOff ;
7046: CALL_OW 7
// end else
7050: GO 7296
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
7052: LD_ADDR_VAR 0 3
7056: PUSH
7057: LD_INT 22
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 25
7069: PUSH
7070: LD_INT 4
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: PUSH
7086: LD_EXP 11
7090: PUSH
7091: LD_EXP 14
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: DIFF
7100: ST_TO_ADDR
// if tmp3 > 0 then
7101: LD_VAR 0 3
7105: PUSH
7106: LD_INT 0
7108: GREATER
7109: IFFALSE 7296
// begin DialogueOn ;
7111: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7115: LD_EXP 11
7119: PPUSH
7120: LD_STRING D3a-Sim-1
7122: PPUSH
7123: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7127: LD_VAR 0 3
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PPUSH
7136: LD_STRING D3a-Sci1-1
7138: PPUSH
7139: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7143: LD_EXP 11
7147: PPUSH
7148: LD_STRING D3a-Sim-2
7150: PPUSH
7151: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7155: LD_VAR 0 3
7159: PUSH
7160: LD_INT 1
7162: ARRAY
7163: PPUSH
7164: LD_STRING D3a-Sci1-2
7166: PPUSH
7167: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7171: LD_EXP 11
7175: PPUSH
7176: LD_STRING D3a-Sim-3
7178: PPUSH
7179: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7183: LD_VAR 0 3
7187: PUSH
7188: LD_INT 1
7190: ARRAY
7191: PPUSH
7192: LD_STRING D3a-Sci1-3
7194: PPUSH
7195: CALL_OW 88
// if IsOK ( Joan ) then
7199: LD_EXP 13
7203: PPUSH
7204: CALL_OW 302
7208: IFFALSE 7224
// Say ( Simms , D3a-Sim-4 ) else
7210: LD_EXP 11
7214: PPUSH
7215: LD_STRING D3a-Sim-4
7217: PPUSH
7218: CALL_OW 88
7222: GO 7236
// Say ( Simms , D3a-Sim-4a ) ;
7224: LD_EXP 11
7228: PPUSH
7229: LD_STRING D3a-Sim-4a
7231: PPUSH
7232: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7236: LD_VAR 0 3
7240: PUSH
7241: LD_INT 1
7243: ARRAY
7244: PPUSH
7245: LD_STRING D3a-Sci1-4
7247: PPUSH
7248: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7252: LD_EXP 11
7256: PPUSH
7257: LD_STRING D3a-Sim-5
7259: PPUSH
7260: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7264: LD_VAR 0 3
7268: PUSH
7269: LD_INT 1
7271: ARRAY
7272: PPUSH
7273: LD_STRING D3a-Sci1-5
7275: PPUSH
7276: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7280: LD_EXP 11
7284: PPUSH
7285: LD_STRING D3a-Sim-6
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// end ; end ; end ;
7296: PPOPN 3
7298: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7299: LD_EXP 29
7303: PUSH
7304: LD_INT 1
7306: EQUAL
7307: IFFALSE 7642
7309: GO 7311
7311: DISABLE
7312: LD_INT 0
7314: PPUSH
// begin wait ( 2 2$00 ) ;
7315: LD_INT 4200
7317: PPUSH
7318: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7322: LD_EXP 18
7326: PPUSH
7327: LD_STRING D4-FSol1-1
7329: PPUSH
7330: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7334: LD_STRING M3
7336: PPUSH
7337: CALL_OW 337
// PrepareRussians ;
7341: CALL 3604 0 0
// spawnRussians := true ;
7345: LD_ADDR_EXP 58
7349: PUSH
7350: LD_INT 1
7352: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7353: LD_ADDR_VAR 0 1
7357: PUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_INT 100
7363: PPUSH
7364: CALL_OW 12
7368: ST_TO_ADDR
// if difficulty = 1 then
7369: LD_OWVAR 67
7373: PUSH
7374: LD_INT 1
7376: EQUAL
7377: IFFALSE 7460
// begin if rnd > 0 and rnd < 51 then
7379: LD_VAR 0 1
7383: PUSH
7384: LD_INT 0
7386: GREATER
7387: PUSH
7388: LD_VAR 0 1
7392: PUSH
7393: LD_INT 51
7395: LESS
7396: AND
7397: IFFALSE 7406
// BuildRussianBase ( 2 ) ;
7399: LD_INT 2
7401: PPUSH
7402: CALL 11748 0 1
// if rnd > 50 and rnd < 81 then
7406: LD_VAR 0 1
7410: PUSH
7411: LD_INT 50
7413: GREATER
7414: PUSH
7415: LD_VAR 0 1
7419: PUSH
7420: LD_INT 81
7422: LESS
7423: AND
7424: IFFALSE 7433
// BuildRussianBase ( 1 ) ;
7426: LD_INT 1
7428: PPUSH
7429: CALL 11748 0 1
// if rnd > 80 and rnd < 101 then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 80
7440: GREATER
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 101
7449: LESS
7450: AND
7451: IFFALSE 7460
// BuildRussianBase ( 3 ) ;
7453: LD_INT 3
7455: PPUSH
7456: CALL 11748 0 1
// end ; if difficulty = 2 then
7460: LD_OWVAR 67
7464: PUSH
7465: LD_INT 2
7467: EQUAL
7468: IFFALSE 7551
// begin if rnd > 0 and rnd < 61 then
7470: LD_VAR 0 1
7474: PUSH
7475: LD_INT 0
7477: GREATER
7478: PUSH
7479: LD_VAR 0 1
7483: PUSH
7484: LD_INT 61
7486: LESS
7487: AND
7488: IFFALSE 7497
// BuildRussianBase ( 2 ) ;
7490: LD_INT 2
7492: PPUSH
7493: CALL 11748 0 1
// if rnd > 60 and rnd < 81 then
7497: LD_VAR 0 1
7501: PUSH
7502: LD_INT 60
7504: GREATER
7505: PUSH
7506: LD_VAR 0 1
7510: PUSH
7511: LD_INT 81
7513: LESS
7514: AND
7515: IFFALSE 7524
// BuildRussianBase ( 1 ) ;
7517: LD_INT 1
7519: PPUSH
7520: CALL 11748 0 1
// if rnd > 80 and rnd < 101 then
7524: LD_VAR 0 1
7528: PUSH
7529: LD_INT 80
7531: GREATER
7532: PUSH
7533: LD_VAR 0 1
7537: PUSH
7538: LD_INT 101
7540: LESS
7541: AND
7542: IFFALSE 7551
// BuildRussianBase ( 3 ) ;
7544: LD_INT 3
7546: PPUSH
7547: CALL 11748 0 1
// end ; if difficulty = 3 then
7551: LD_OWVAR 67
7555: PUSH
7556: LD_INT 3
7558: EQUAL
7559: IFFALSE 7642
// begin if rnd > 0 and rnd < 71 then
7561: LD_VAR 0 1
7565: PUSH
7566: LD_INT 0
7568: GREATER
7569: PUSH
7570: LD_VAR 0 1
7574: PUSH
7575: LD_INT 71
7577: LESS
7578: AND
7579: IFFALSE 7588
// BuildRussianBase ( 3 ) ;
7581: LD_INT 3
7583: PPUSH
7584: CALL 11748 0 1
// if rnd > 70 and rnd < 81 then
7588: LD_VAR 0 1
7592: PUSH
7593: LD_INT 70
7595: GREATER
7596: PUSH
7597: LD_VAR 0 1
7601: PUSH
7602: LD_INT 81
7604: LESS
7605: AND
7606: IFFALSE 7615
// BuildRussianBase ( 2 ) ;
7608: LD_INT 2
7610: PPUSH
7611: CALL 11748 0 1
// if rnd > 80 and rnd < 101 then
7615: LD_VAR 0 1
7619: PUSH
7620: LD_INT 80
7622: GREATER
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 101
7631: LESS
7632: AND
7633: IFFALSE 7642
// BuildRussianBase ( 1 ) ;
7635: LD_INT 1
7637: PPUSH
7638: CALL 11748 0 1
// end ; end ;
7642: PPOPN 1
7644: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7645: LD_INT 54
7647: PPUSH
7648: LD_INT 1
7650: PPUSH
7651: CALL_OW 321
7655: PUSH
7656: LD_INT 2
7658: EQUAL
7659: PUSH
7660: LD_INT 21
7662: PPUSH
7663: LD_INT 1
7665: PPUSH
7666: CALL_OW 321
7670: PUSH
7671: LD_INT 2
7673: EQUAL
7674: OR
7675: PUSH
7676: LD_INT 22
7678: PPUSH
7679: LD_INT 1
7681: PPUSH
7682: CALL_OW 321
7686: PUSH
7687: LD_INT 2
7689: EQUAL
7690: OR
7691: IFFALSE 7993
7693: GO 7695
7695: DISABLE
7696: LD_INT 0
7698: PPUSH
7699: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7700: LD_EXP 17
7704: PPUSH
7705: CALL_OW 302
7709: IFFALSE 7723
// tmp := DeltaDoctor else
7711: LD_ADDR_VAR 0 2
7715: PUSH
7716: LD_EXP 17
7720: ST_TO_ADDR
7721: GO 7733
// tmp := Denis ;
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_EXP 12
7732: ST_TO_ADDR
// if tmp then
7733: LD_VAR 0 2
7737: IFFALSE 7831
// begin DialogueOn ;
7739: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7743: LD_EXP 1
7747: PPUSH
7748: LD_STRING D6-JMM-1
7750: PPUSH
7751: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7755: LD_VAR 0 2
7759: PPUSH
7760: LD_STRING D6-Sci1-1
7762: PPUSH
7763: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7767: LD_EXP 1
7771: PPUSH
7772: LD_STRING D6-JMM-2
7774: PPUSH
7775: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7779: LD_VAR 0 2
7783: PPUSH
7784: LD_STRING D6-Sci1-2
7786: PPUSH
7787: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7791: LD_EXP 1
7795: PPUSH
7796: LD_STRING D6-JMM-3
7798: PPUSH
7799: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7803: LD_VAR 0 2
7807: PPUSH
7808: LD_STRING D6-Sci1-3
7810: PPUSH
7811: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7815: LD_EXP 1
7819: PPUSH
7820: LD_STRING D6-JMM-4
7822: PPUSH
7823: CALL_OW 88
// DialogueOff ;
7827: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7831: LD_INT 1050
7833: PPUSH
7834: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7838: LD_EXP 49
7842: PUSH
7843: LD_INT 0
7845: EQUAL
7846: PUSH
7847: LD_EXP 14
7851: PPUSH
7852: CALL_OW 302
7856: AND
7857: IFFALSE 7915
// begin DialogueOn ;
7859: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7863: LD_EXP 27
7867: PPUSH
7868: LD_STRING D5-Ar1-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7875: LD_EXP 26
7879: PPUSH
7880: LD_STRING D5-Diet-1
7882: PPUSH
7883: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7887: LD_EXP 27
7891: PPUSH
7892: LD_STRING D5-Ar1-2
7894: PPUSH
7895: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7899: LD_EXP 26
7903: PPUSH
7904: LD_STRING D5-Diet-2
7906: PPUSH
7907: CALL_OW 88
// DialogueOff ;
7911: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7915: LD_INT 35
7917: PPUSH
7918: CALL_OW 67
// until tick > 10 10$00 ;
7922: LD_OWVAR 1
7926: PUSH
7927: LD_INT 21000
7929: GREATER
7930: IFFALSE 7915
// wait ( 1 1$30 ) ;
7932: LD_INT 3150
7934: PPUSH
7935: CALL_OW 67
// if arabianTrait = 0 then
7939: LD_EXP 49
7943: PUSH
7944: LD_INT 0
7946: EQUAL
7947: IFFALSE 7993
// begin arabianTrait = 1 ;
7949: LD_ADDR_EXP 49
7953: PUSH
7954: LD_INT 1
7956: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7957: LD_INT 2
7959: PPUSH
7960: LD_INT 3
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: LD_INT 1
7968: PPUSH
7969: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7973: LD_INT 2
7975: PPUSH
7976: LD_INT 6
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 80
// PrepareArabianTrait ;
7989: CALL 7996 0 0
// end ; end ;
7993: PPOPN 2
7995: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
7996: LD_INT 0
7998: PPUSH
7999: PPUSH
8000: PPUSH
8001: PPUSH
8002: PPUSH
8003: PPUSH
8004: PPUSH
8005: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 2
8023: PUSH
8024: LD_INT 25
8026: PUSH
8027: LD_INT 4
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 25
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PPUSH
8064: CALL_OW 69
8068: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8069: LD_ADDR_VAR 0 5
8073: PUSH
8074: LD_INT 22
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: LD_INT 21
8086: PUSH
8087: LD_INT 1
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 2
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 25
8109: PUSH
8110: LD_INT 8
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 25
8119: PUSH
8120: LD_INT 15
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 69
8142: PUSH
8143: LD_EXP 26
8147: PUSH
8148: EMPTY
8149: LIST
8150: DIFF
8151: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8152: LD_ADDR_VAR 0 7
8156: PUSH
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 5
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 69
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8190: LD_VAR 0 6
8194: PPUSH
8195: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8199: LD_VAR 0 5
8203: PPUSH
8204: CALL_OW 122
// wait ( 0 0$3 ) ;
8208: LD_INT 105
8210: PPUSH
8211: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8215: LD_VAR 0 6
8219: PPUSH
8220: LD_VAR 0 7
8224: PPUSH
8225: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8229: LD_VAR 0 6
8233: PPUSH
8234: LD_INT 1
8236: PUSH
8237: LD_INT 8
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 1
8246: PPUSH
8247: LD_INT 2
8249: PPUSH
8250: CALL_OW 12
8254: ARRAY
8255: PPUSH
8256: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8260: LD_VAR 0 6
8264: PPUSH
8265: CALL_OW 182
// wait ( 0 0$1 ) ;
8269: LD_INT 35
8271: PPUSH
8272: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8276: LD_INT 76
8278: PPUSH
8279: LD_INT 19
8281: PPUSH
8282: CALL_OW 84
// DialogueOn ;
8286: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8290: LD_INT 22
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 26
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 2
8312: PUSH
8313: LD_INT 25
8315: PUSH
8316: LD_INT 1
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 25
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 4
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 69
8380: PPUSH
8381: LD_STRING D8-Sol1-1
8383: PPUSH
8384: LD_STRING D8-Sol1-1
8386: PPUSH
8387: CALL 11090 0 3
// if IsOK ( DeltaDoctor ) then
8391: LD_EXP 17
8395: PPUSH
8396: CALL_OW 302
8400: IFFALSE 8416
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8402: LD_EXP 17
8406: PPUSH
8407: LD_STRING D8-Sci1-1
8409: PPUSH
8410: CALL_OW 88
8414: GO 8517
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8416: LD_INT 22
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 26
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 2
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: LD_INT 1
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 25
8451: PUSH
8452: LD_INT 2
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 4
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 5
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 69
8506: PPUSH
8507: LD_STRING D8-Sol1-1
8509: PPUSH
8510: LD_STRING D8-Sol1-1
8512: PPUSH
8513: CALL 11090 0 3
// Say ( JMM , D8-JMM-1 ) ;
8517: LD_EXP 1
8521: PPUSH
8522: LD_STRING D8-JMM-1
8524: PPUSH
8525: CALL_OW 88
// DialogueOff ;
8529: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8533: LD_INT 2
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8543: LD_INT 1
8545: PPUSH
8546: LD_INT 2
8548: PPUSH
8549: LD_INT 2
8551: PPUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8559: LD_INT 3
8561: PPUSH
8562: LD_INT 2
8564: PPUSH
8565: LD_INT 1
8567: PPUSH
8568: LD_INT 1
8570: PPUSH
8571: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8575: LD_STRING M4
8577: PPUSH
8578: CALL_OW 337
// wait ( 0 0$1 ) ;
8582: LD_INT 35
8584: PPUSH
8585: CALL_OW 67
// if IsLive ( Khatam ) then
8589: LD_EXP 14
8593: PPUSH
8594: CALL_OW 300
8598: IFFALSE 8612
// DoNotAttack ( 2 , Khatam ) ;
8600: LD_INT 2
8602: PPUSH
8603: LD_EXP 14
8607: PPUSH
8608: CALL_OW 471
// wait ( 0 0$1 ) ;
8612: LD_INT 35
8614: PPUSH
8615: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8619: LD_ADDR_VAR 0 8
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 21
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PPUSH
8648: CALL_OW 69
8652: PPUSH
8653: LD_VAR 0 5
8657: PUSH
8658: LD_INT 1
8660: ARRAY
8661: PPUSH
8662: CALL_OW 74
8666: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8667: LD_VAR 0 5
8671: PPUSH
8672: LD_INT 25
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 72
8686: PUSH
8687: LD_INT 1
8689: ARRAY
8690: PPUSH
8691: LD_VAR 0 8
8695: PPUSH
8696: CALL_OW 250
8700: PPUSH
8701: LD_VAR 0 8
8705: PPUSH
8706: CALL_OW 251
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8720: LD_VAR 0 5
8724: PPUSH
8725: LD_INT 84
8727: PPUSH
8728: LD_INT 22
8730: PPUSH
8731: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8735: LD_VAR 0 5
8739: PPUSH
8740: LD_INT 82
8742: PPUSH
8743: LD_INT 5
8745: PPUSH
8746: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8750: LD_VAR 0 5
8754: PPUSH
8755: LD_INT 95
8757: PPUSH
8758: LD_INT 12
8760: PPUSH
8761: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 102
8772: PPUSH
8773: LD_INT 11
8775: PPUSH
8776: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8780: LD_VAR 0 5
8784: PPUSH
8785: LD_INT 116
8787: PPUSH
8788: LD_INT 15
8790: PPUSH
8791: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8795: LD_VAR 0 5
8799: PPUSH
8800: LD_INT 140
8802: PPUSH
8803: LD_INT 25
8805: PPUSH
8806: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8810: LD_VAR 0 5
8814: PPUSH
8815: LD_INT 160
8817: PPUSH
8818: LD_INT 56
8820: PPUSH
8821: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 2
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 21
8842: PUSH
8843: LD_INT 1
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 2
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 8
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: LD_INT 25
8875: PUSH
8876: LD_INT 15
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PUSH
8899: LD_EXP 26
8903: PUSH
8904: EMPTY
8905: LIST
8906: DIFF
8907: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8908: LD_ADDR_VAR 0 6
8912: PUSH
8913: LD_INT 22
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 21
8925: PUSH
8926: LD_INT 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 2
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 2
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 4
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 12
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 16
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 69
9003: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9004: LD_ADDR_VAR 0 6
9008: PUSH
9009: LD_VAR 0 6
9013: PUSH
9014: LD_EXP 26
9018: ADD
9019: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9020: LD_VAR 0 5
9024: PPUSH
9025: LD_INT 189
9027: PPUSH
9028: LD_INT 79
9030: PPUSH
9031: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9035: LD_VAR 0 5
9039: PPUSH
9040: LD_INT 25
9042: PUSH
9043: LD_INT 15
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 72
9054: IFFALSE 9095
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9056: LD_VAR 0 5
9060: PPUSH
9061: LD_INT 25
9063: PUSH
9064: LD_INT 15
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 72
9075: PUSH
9076: LD_INT 1
9078: ARRAY
9079: PPUSH
9080: LD_INT 84
9082: PPUSH
9083: LD_INT 21
9085: PPUSH
9086: CALL_OW 428
9090: PPUSH
9091: CALL_OW 120
// wait ( 0 0$4 ) ;
9095: LD_INT 140
9097: PPUSH
9098: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9102: LD_VAR 0 6
9106: PPUSH
9107: LD_INT 88
9109: PPUSH
9110: LD_INT 8
9112: PPUSH
9113: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9117: LD_VAR 0 6
9121: PPUSH
9122: LD_INT 102
9124: PPUSH
9125: LD_INT 10
9127: PPUSH
9128: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9132: LD_VAR 0 6
9136: PPUSH
9137: LD_INT 116
9139: PPUSH
9140: LD_INT 15
9142: PPUSH
9143: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9147: LD_VAR 0 6
9151: PPUSH
9152: LD_INT 140
9154: PPUSH
9155: LD_INT 25
9157: PPUSH
9158: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9162: LD_VAR 0 6
9166: PPUSH
9167: LD_INT 160
9169: PPUSH
9170: LD_INT 56
9172: PPUSH
9173: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9177: LD_VAR 0 6
9181: PPUSH
9182: LD_INT 189
9184: PPUSH
9185: LD_INT 79
9187: PPUSH
9188: CALL_OW 171
// arabianAttackersAI = 1 ;
9192: LD_ADDR_EXP 46
9196: PUSH
9197: LD_INT 1
9199: ST_TO_ADDR
// if IsOk ( Gary ) then
9200: LD_EXP 10
9204: PPUSH
9205: CALL_OW 302
9209: IFFALSE 9223
// Say ( Gary , D8a-Gary-1 ) ;
9211: LD_EXP 10
9215: PPUSH
9216: LD_STRING D8a-Gary-1
9218: PPUSH
9219: CALL_OW 88
// wait ( 0 0$5 ) ;
9223: LD_INT 175
9225: PPUSH
9226: CALL_OW 67
// if IsOK ( Khatam ) then
9230: LD_EXP 14
9234: PPUSH
9235: CALL_OW 302
9239: IFFALSE 9775
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9241: LD_ADDR_VAR 0 3
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 1
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 25
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 4
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 25
9301: PUSH
9302: LD_INT 5
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 25
9311: PUSH
9312: LD_INT 8
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: PUSH
9337: LD_EXP 1
9341: PUSH
9342: LD_EXP 2
9346: PUSH
9347: LD_EXP 3
9351: PUSH
9352: LD_EXP 4
9356: PUSH
9357: LD_EXP 5
9361: PUSH
9362: LD_EXP 6
9366: PUSH
9367: LD_EXP 7
9371: PUSH
9372: LD_EXP 8
9376: PUSH
9377: LD_EXP 9
9381: PUSH
9382: LD_EXP 10
9386: PUSH
9387: LD_EXP 11
9391: PUSH
9392: LD_EXP 12
9396: PUSH
9397: LD_EXP 13
9401: PUSH
9402: LD_EXP 14
9406: PUSH
9407: LD_EXP 15
9411: PUSH
9412: LD_EXP 16
9416: PUSH
9417: LD_EXP 17
9421: PUSH
9422: LD_EXP 19
9426: PUSH
9427: LD_EXP 24
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: DIFF
9453: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9454: LD_EXP 14
9458: PPUSH
9459: LD_INT 8
9461: PPUSH
9462: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9466: LD_EXP 14
9470: PPUSH
9471: CALL_OW 122
// wait ( 0 0$1 ) ;
9475: LD_INT 35
9477: PPUSH
9478: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9482: LD_EXP 14
9486: PPUSH
9487: CALL_OW 121
// wait ( 0 0$1 ) ;
9491: LD_INT 35
9493: PPUSH
9494: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9498: LD_EXP 14
9502: PPUSH
9503: LD_INT 7
9505: PPUSH
9506: CALL_OW 113
// if not tmp then
9510: LD_VAR 0 3
9514: NOT
9515: IFFALSE 9519
// exit ;
9517: GO 9775
// DialogueOn ;
9519: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9523: LD_VAR 0 3
9527: PUSH
9528: LD_INT 1
9530: ARRAY
9531: PPUSH
9532: CALL_OW 258
9536: PUSH
9537: LD_INT 1
9539: EQUAL
9540: IFFALSE 9560
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9542: LD_VAR 0 3
9546: PUSH
9547: LD_INT 1
9549: ARRAY
9550: PPUSH
9551: LD_STRING D8b-Sol1-1
9553: PPUSH
9554: CALL_OW 88
9558: GO 9576
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9560: LD_VAR 0 3
9564: PUSH
9565: LD_INT 1
9567: ARRAY
9568: PPUSH
9569: LD_STRING D8b-FSol1-1
9571: PPUSH
9572: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9576: LD_EXP 14
9580: PPUSH
9581: LD_STRING D8b-Khat-1
9583: PPUSH
9584: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9588: LD_VAR 0 3
9592: PUSH
9593: LD_INT 1
9595: ARRAY
9596: PPUSH
9597: CALL_OW 258
9601: PUSH
9602: LD_INT 1
9604: EQUAL
9605: IFFALSE 9625
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9607: LD_VAR 0 3
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: PPUSH
9616: LD_STRING D8b-Sol1-2
9618: PPUSH
9619: CALL_OW 88
9623: GO 9641
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9625: LD_VAR 0 3
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PPUSH
9634: LD_STRING D8b-FSol1-2
9636: PPUSH
9637: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9641: LD_EXP 14
9645: PPUSH
9646: LD_STRING D8b-Khat-2
9648: PPUSH
9649: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9653: LD_VAR 0 3
9657: PUSH
9658: LD_INT 1
9660: ARRAY
9661: PPUSH
9662: CALL_OW 258
9666: PUSH
9667: LD_INT 1
9669: EQUAL
9670: IFFALSE 9690
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9672: LD_VAR 0 3
9676: PUSH
9677: LD_INT 1
9679: ARRAY
9680: PPUSH
9681: LD_STRING D8b-Sol1-3
9683: PPUSH
9684: CALL_OW 88
9688: GO 9706
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9690: LD_VAR 0 3
9694: PUSH
9695: LD_INT 1
9697: ARRAY
9698: PPUSH
9699: LD_STRING D8b-FSol1-3
9701: PPUSH
9702: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9706: LD_EXP 14
9710: PPUSH
9711: LD_STRING D8b-Khat-3
9713: PPUSH
9714: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9718: LD_VAR 0 3
9722: PUSH
9723: LD_INT 1
9725: ARRAY
9726: PPUSH
9727: CALL_OW 258
9731: PUSH
9732: LD_INT 1
9734: EQUAL
9735: IFFALSE 9755
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 1
9744: ARRAY
9745: PPUSH
9746: LD_STRING D8b-Sol1-4
9748: PPUSH
9749: CALL_OW 88
9753: GO 9771
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 1
9762: ARRAY
9763: PPUSH
9764: LD_STRING D8b-FSol1-4
9766: PPUSH
9767: CALL_OW 88
// DialogueOff ;
9771: CALL_OW 7
// end ; end ;
9775: LD_VAR 0 1
9779: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9780: LD_INT 7
9782: PPUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 2
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PPUSH
9793: CALL_OW 70
9797: PUSH
9798: LD_INT 0
9800: GREATER
9801: PUSH
9802: LD_EXP 14
9806: PPUSH
9807: LD_INT 7
9809: PPUSH
9810: CALL_OW 308
9814: OR
9815: IFFALSE 10022
9817: GO 9819
9819: DISABLE
9820: LD_INT 0
9822: PPUSH
// begin enable ;
9823: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9824: LD_ADDR_VAR 0 1
9828: PUSH
9829: LD_INT 7
9831: PPUSH
9832: LD_INT 22
9834: PUSH
9835: LD_INT 2
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PPUSH
9842: CALL_OW 70
9846: PUSH
9847: FOR_IN
9848: IFFALSE 9989
// begin if GetClass ( i ) = 4 then
9850: LD_VAR 0 1
9854: PPUSH
9855: CALL_OW 257
9859: PUSH
9860: LD_INT 4
9862: EQUAL
9863: IFFALSE 9875
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9865: LD_INT 1
9867: PPUSH
9868: LD_STRING 10_ScientistsEscape_1
9870: PPUSH
9871: CALL_OW 39
// if i = Dietrich then
9875: LD_VAR 0 1
9879: PUSH
9880: LD_EXP 26
9884: EQUAL
9885: IFFALSE 9895
// GensherStatus = 1 ;
9887: LD_ADDR_EXP 52
9891: PUSH
9892: LD_INT 1
9894: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9895: LD_VAR 0 1
9899: PPUSH
9900: CALL_OW 257
9904: PUSH
9905: LD_INT 1
9907: EQUAL
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 257
9918: PUSH
9919: LD_INT 2
9921: EQUAL
9922: OR
9923: PUSH
9924: LD_VAR 0 1
9928: PPUSH
9929: CALL_OW 257
9933: PUSH
9934: LD_INT 3
9936: EQUAL
9937: OR
9938: PUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: CALL_OW 257
9948: PUSH
9949: LD_INT 4
9951: EQUAL
9952: OR
9953: PUSH
9954: LD_VAR 0 1
9958: PPUSH
9959: CALL_OW 257
9963: PUSH
9964: LD_INT 8
9966: EQUAL
9967: OR
9968: IFFALSE 9978
// arabianEscape = 1 ;
9970: LD_ADDR_EXP 47
9974: PUSH
9975: LD_INT 1
9977: ST_TO_ADDR
// RemoveUnit ( i ) ;
9978: LD_VAR 0 1
9982: PPUSH
9983: CALL_OW 64
// end ;
9987: GO 9847
9989: POP
9990: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9991: LD_EXP 14
9995: PPUSH
9996: LD_INT 7
9998: PPUSH
9999: CALL_OW 308
10003: IFFALSE 10022
// begin KhatamStatus = 1 ;
10005: LD_ADDR_EXP 53
10009: PUSH
10010: LD_INT 1
10012: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 64
// end ; end ;
10022: PPOPN 1
10024: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10025: LD_INT 22
10027: PUSH
10028: LD_INT 2
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: LD_INT 0
10056: EQUAL
10057: PUSH
10058: LD_INT 22
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PPUSH
10082: CALL_OW 69
10086: PUSH
10087: LD_INT 0
10089: EQUAL
10090: AND
10091: IFFALSE 10104
10093: GO 10095
10095: DISABLE
// arabianDefeated = 1 ;
10096: LD_ADDR_EXP 48
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
10104: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10105: LD_INT 54
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: CALL_OW 321
10115: PUSH
10116: LD_INT 2
10118: EQUAL
10119: PUSH
10120: LD_INT 55
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 321
10130: PUSH
10131: LD_INT 2
10133: EQUAL
10134: AND
10135: PUSH
10136: LD_INT 21
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 321
10146: PUSH
10147: LD_INT 2
10149: EQUAL
10150: AND
10151: PUSH
10152: LD_INT 22
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 321
10162: PUSH
10163: LD_INT 2
10165: EQUAL
10166: AND
10167: PUSH
10168: LD_INT 12
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 321
10178: PUSH
10179: LD_INT 2
10181: EQUAL
10182: AND
10183: PUSH
10184: LD_INT 32
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 321
10194: PUSH
10195: LD_INT 2
10197: EQUAL
10198: AND
10199: PUSH
10200: LD_EXP 63
10204: PUSH
10205: LD_INT 0
10207: EQUAL
10208: AND
10209: PUSH
10210: LD_EXP 49
10214: PUSH
10215: LD_INT 0
10217: EQUAL
10218: AND
10219: PUSH
10220: LD_OWVAR 1
10224: PUSH
10225: LD_INT 31500
10227: GREATEREQUAL
10228: AND
10229: IFFALSE 10246
10231: GO 10233
10233: DISABLE
// begin arabianTrait = 1 ;
10234: LD_ADDR_EXP 49
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// PrepareArabianTrait ;
10242: CALL 7996 0 0
// end ;
10246: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10247: LD_EXP 29
10251: PUSH
10252: LD_STRING 02_mikhailStatus_1
10254: PPUSH
10255: LD_INT 0
10257: PPUSH
10258: CALL_OW 30
10262: PUSH
10263: LD_INT 1
10265: EQUAL
10266: AND
10267: PUSH
10268: LD_INT 22
10270: PUSH
10271: LD_INT 5
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: PUSH
10283: LD_INT 0
10285: EQUAL
10286: AND
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_INT 0
10319: EQUAL
10320: PUSH
10321: LD_EXP 49
10325: PUSH
10326: LD_INT 0
10328: EQUAL
10329: OR
10330: AND
10331: IFFALSE 10340
10333: GO 10335
10335: DISABLE
// PrepareCornell ;
10336: CALL 3434 0 0
10340: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10341: LD_INT 22
10343: PUSH
10344: LD_INT 1
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: PPUSH
10356: LD_EXP 19
10360: PPUSH
10361: CALL_OW 74
10365: PPUSH
10366: LD_EXP 19
10370: PPUSH
10371: CALL_OW 296
10375: PUSH
10376: LD_INT 9
10378: LESS
10379: IFFALSE 10600
10381: GO 10383
10383: DISABLE
// begin InGameOn ;
10384: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10388: LD_EXP 19
10392: PPUSH
10393: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10397: LD_EXP 19
10401: PPUSH
10402: LD_STRING D7-Corn-1
10404: PPUSH
10405: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10409: LD_INT 22
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 25
10424: PUSH
10425: LD_INT 1
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 25
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 3
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 4
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 5
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 69
10488: PPUSH
10489: LD_STRING D7-Sol1-1
10491: PPUSH
10492: LD_STRING D7-FSol1-1
10494: PPUSH
10495: CALL 11090 0 3
// CenterNowOnUnits ( Cornell ) ;
10499: LD_EXP 19
10503: PPUSH
10504: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10508: LD_EXP 19
10512: PPUSH
10513: LD_STRING D7-Corn-2
10515: PPUSH
10516: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10520: LD_EXP 1
10524: PPUSH
10525: LD_STRING D7-JMM-2
10527: PPUSH
10528: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10532: LD_EXP 19
10536: PPUSH
10537: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10541: LD_EXP 19
10545: PPUSH
10546: LD_STRING D7-Corn-3
10548: PPUSH
10549: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10553: LD_EXP 19
10557: PPUSH
10558: LD_INT 250
10560: PPUSH
10561: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10565: LD_EXP 19
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 235
// wait ( 0 0$1 ) ;
10577: LD_INT 35
10579: PPUSH
10580: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10584: LD_EXP 1
10588: PPUSH
10589: LD_STRING D7-JMM-3
10591: PPUSH
10592: CALL_OW 88
// InGameOff ;
10596: CALL_OW 9
// end ;
10600: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10601: LD_EXP 19
10605: PPUSH
10606: CALL_OW 255
10610: PUSH
10611: LD_INT 1
10613: EQUAL
10614: PUSH
10615: LD_EXP 19
10619: PPUSH
10620: CALL_OW 256
10624: PUSH
10625: LD_INT 350
10627: GREATER
10628: AND
10629: IFFALSE 10822
10631: GO 10633
10633: DISABLE
// begin DialogueOn ;
10634: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10638: LD_EXP 1
10642: PPUSH
10643: LD_STRING D7a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10650: LD_EXP 19
10654: PPUSH
10655: LD_STRING D7a-Corn-1
10657: PPUSH
10658: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10662: LD_EXP 1
10666: PPUSH
10667: LD_STRING D7a-JMM-2
10669: PPUSH
10670: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10674: LD_EXP 19
10678: PPUSH
10679: LD_STRING D7a-Corn-2
10681: PPUSH
10682: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10686: LD_EXP 1
10690: PPUSH
10691: LD_STRING D7a-JMM-3
10693: PPUSH
10694: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10698: LD_EXP 19
10702: PPUSH
10703: LD_STRING D7a-Corn-3
10705: PPUSH
10706: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10710: LD_EXP 1
10714: PPUSH
10715: LD_STRING D7a-JMM-4
10717: PPUSH
10718: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10722: LD_EXP 19
10726: PPUSH
10727: LD_STRING D7a-Corn-4
10729: PPUSH
10730: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10734: LD_EXP 1
10738: PPUSH
10739: LD_STRING D7a-JMM-5
10741: PPUSH
10742: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10746: LD_EXP 19
10750: PPUSH
10751: LD_STRING D7a-Corn-5
10753: PPUSH
10754: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10758: LD_EXP 1
10762: PPUSH
10763: LD_STRING D7a-JMM-6
10765: PPUSH
10766: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10770: LD_EXP 19
10774: PPUSH
10775: LD_STRING D7a-Corn-6
10777: PPUSH
10778: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10782: LD_EXP 1
10786: PPUSH
10787: LD_STRING D7a-JMM-7
10789: PPUSH
10790: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10794: LD_EXP 19
10798: PPUSH
10799: LD_STRING D7a-Corn-7
10801: PPUSH
10802: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_STRING D7a-JMM-8
10813: PPUSH
10814: CALL_OW 88
// DialogueOff ;
10818: CALL_OW 7
// end ;
10822: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10823: LD_EXP 61
10827: PUSH
10828: LD_EXP 1
10832: PPUSH
10833: CALL_OW 302
10837: PUSH
10838: LD_EXP 5
10842: PPUSH
10843: CALL_OW 302
10847: OR
10848: AND
10849: IFFALSE 10939
10851: GO 10853
10853: DISABLE
// begin Wait ( 0 0$2 ) ;
10854: LD_INT 70
10856: PPUSH
10857: CALL_OW 67
// DialogueOn ;
10861: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10865: LD_EXP 61
10869: PUSH
10870: LD_INT 1
10872: ARRAY
10873: PPUSH
10874: LD_EXP 61
10878: PUSH
10879: LD_INT 2
10881: ARRAY
10882: PPUSH
10883: CALL_OW 86
// if IsOk ( Cyrus ) then
10887: LD_EXP 5
10891: PPUSH
10892: CALL_OW 302
10896: IFFALSE 10912
// Say ( Cyrus , D10-Cyrus-1 ) else
10898: LD_EXP 5
10902: PPUSH
10903: LD_STRING D10-Cyrus-1
10905: PPUSH
10906: CALL_OW 88
10910: GO 10935
// if IsOk ( JMM ) then
10912: LD_EXP 1
10916: PPUSH
10917: CALL_OW 302
10921: IFFALSE 10935
// Say ( JMM , D10-JMM-1 ) ;
10923: LD_EXP 1
10927: PPUSH
10928: LD_STRING D10-JMM-1
10930: PPUSH
10931: CALL_OW 88
// DialogueOff ;
10935: CALL_OW 7
// end ;
10939: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10940: LD_INT 12
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 321
10950: PUSH
10951: LD_INT 2
10953: EQUAL
10954: IFFALSE 10966
10956: GO 10958
10958: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10959: LD_STRING M2b
10961: PPUSH
10962: CALL_OW 337
10966: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10967: LD_INT 32
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: CALL_OW 321
10977: PUSH
10978: LD_INT 2
10980: EQUAL
10981: IFFALSE 10993
10983: GO 10985
10985: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10986: LD_STRING M2c
10988: PPUSH
10989: CALL_OW 337
10993: END
// every 0 0$1 trigger arabianDefeated = 1 do
10994: LD_EXP 48
10998: PUSH
10999: LD_INT 1
11001: EQUAL
11002: IFFALSE 11014
11004: GO 11006
11006: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11007: LD_STRING M4a
11009: PPUSH
11010: CALL_OW 337
11014: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11015: LD_INT 54
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 321
11025: PUSH
11026: LD_INT 2
11028: EQUAL
11029: PUSH
11030: LD_INT 55
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 321
11040: PUSH
11041: LD_INT 2
11043: EQUAL
11044: AND
11045: PUSH
11046: LD_INT 21
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 321
11056: PUSH
11057: LD_INT 2
11059: EQUAL
11060: AND
11061: PUSH
11062: LD_INT 22
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 321
11072: PUSH
11073: LD_INT 2
11075: EQUAL
11076: AND
11077: IFFALSE 11089
11079: GO 11081
11081: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11082: LD_STRING M2a
11084: PPUSH
11085: CALL_OW 337
11089: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11090: LD_INT 0
11092: PPUSH
11093: PPUSH
11094: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11095: LD_ADDR_VAR 0 1
11099: PUSH
11100: LD_VAR 0 1
11104: PUSH
11105: LD_EXP 1
11109: PUSH
11110: LD_EXP 2
11114: PUSH
11115: LD_EXP 3
11119: PUSH
11120: LD_EXP 4
11124: PUSH
11125: LD_EXP 5
11129: PUSH
11130: LD_EXP 6
11134: PUSH
11135: LD_EXP 7
11139: PUSH
11140: LD_EXP 8
11144: PUSH
11145: LD_EXP 9
11149: PUSH
11150: LD_EXP 10
11154: PUSH
11155: LD_EXP 11
11159: PUSH
11160: LD_EXP 12
11164: PUSH
11165: LD_EXP 13
11169: PUSH
11170: LD_EXP 14
11174: PUSH
11175: LD_EXP 15
11179: PUSH
11180: LD_EXP 16
11184: PUSH
11185: LD_EXP 17
11189: PUSH
11190: LD_EXP 18
11194: PUSH
11195: LD_EXP 19
11199: PUSH
11200: LD_EXP 24
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: DIFF
11227: ST_TO_ADDR
// if not characters then
11228: LD_VAR 0 1
11232: NOT
11233: IFFALSE 11237
// exit ;
11235: GO 11383
// rnd = rand ( 1 , characters ) ;
11237: LD_ADDR_VAR 0 6
11241: PUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_VAR 0 1
11249: PPUSH
11250: CALL_OW 12
11254: ST_TO_ADDR
// for i = 1 to characters do
11255: LD_ADDR_VAR 0 5
11259: PUSH
11260: DOUBLE
11261: LD_INT 1
11263: DEC
11264: ST_TO_ADDR
11265: LD_VAR 0 1
11269: PUSH
11270: FOR_TO
11271: IFFALSE 11381
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11273: LD_VAR 0 5
11277: PUSH
11278: LD_VAR 0 6
11282: EQUAL
11283: PUSH
11284: LD_VAR 0 1
11288: PUSH
11289: LD_VAR 0 5
11293: ARRAY
11294: PPUSH
11295: CALL_OW 258
11299: PUSH
11300: LD_INT 1
11302: EQUAL
11303: AND
11304: IFFALSE 11326
// Say ( characters [ i ] , dialogMID ) ;
11306: LD_VAR 0 1
11310: PUSH
11311: LD_VAR 0 5
11315: ARRAY
11316: PPUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11326: LD_VAR 0 5
11330: PUSH
11331: LD_VAR 0 6
11335: EQUAL
11336: PUSH
11337: LD_VAR 0 1
11341: PUSH
11342: LD_VAR 0 5
11346: ARRAY
11347: PPUSH
11348: CALL_OW 258
11352: PUSH
11353: LD_INT 2
11355: EQUAL
11356: AND
11357: IFFALSE 11379
// Say ( characters [ i ] , dialogFID ) ;
11359: LD_VAR 0 1
11363: PUSH
11364: LD_VAR 0 5
11368: ARRAY
11369: PPUSH
11370: LD_VAR 0 3
11374: PPUSH
11375: CALL_OW 88
// end ;
11379: GO 11270
11381: POP
11382: POP
// end ;
11383: LD_VAR 0 4
11387: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// for i in charactersList do
11392: LD_ADDR_VAR 0 4
11396: PUSH
11397: LD_VAR 0 1
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11421
// SaveCharacters ( i , ident ) ;
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 2
11414: PPUSH
11415: CALL_OW 38
11419: GO 11402
11421: POP
11422: POP
// end ;
11423: LD_VAR 0 3
11427: RET
// export function PrepareDifficulty ; begin
11428: LD_INT 0
11430: PPUSH
// if difficulty = 1 then
11431: LD_OWVAR 67
11435: PUSH
11436: LD_INT 1
11438: EQUAL
11439: IFFALSE 11483
// begin RuSolMinLevel = 3 ;
11441: LD_ADDR_EXP 36
11445: PUSH
11446: LD_INT 3
11448: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11449: LD_ADDR_EXP 37
11453: PUSH
11454: LD_INT 5
11456: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11457: LD_INT 51
11459: PPUSH
11460: LD_INT 6
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11470: LD_INT 51
11472: PPUSH
11473: LD_INT 5
11475: PPUSH
11476: LD_INT 2
11478: PPUSH
11479: CALL_OW 322
// end ; if difficulty = 2 then
11483: LD_OWVAR 67
11487: PUSH
11488: LD_INT 2
11490: EQUAL
11491: IFFALSE 11587
// begin RuSolMinLevel = 5 ;
11493: LD_ADDR_EXP 36
11497: PUSH
11498: LD_INT 5
11500: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11501: LD_ADDR_EXP 37
11505: PUSH
11506: LD_INT 7
11508: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11509: LD_INT 51
11511: PPUSH
11512: LD_INT 6
11514: PPUSH
11515: LD_INT 2
11517: PPUSH
11518: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11522: LD_INT 57
11524: PPUSH
11525: LD_INT 6
11527: PPUSH
11528: LD_INT 2
11530: PPUSH
11531: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11535: LD_INT 63
11537: PPUSH
11538: LD_INT 6
11540: PPUSH
11541: LD_INT 2
11543: PPUSH
11544: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11548: LD_INT 51
11550: PPUSH
11551: LD_INT 5
11553: PPUSH
11554: LD_INT 2
11556: PPUSH
11557: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11561: LD_INT 5
11563: PPUSH
11564: LD_INT 2
11566: PPUSH
11567: LD_INT 2
11569: PPUSH
11570: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11574: LD_INT 5
11576: PPUSH
11577: LD_INT 5
11579: PPUSH
11580: LD_INT 2
11582: PPUSH
11583: CALL_OW 322
// end ; if difficulty = 3 then
11587: LD_OWVAR 67
11591: PUSH
11592: LD_INT 3
11594: EQUAL
11595: IFFALSE 11743
// begin RuSolMinLevel = 6 ;
11597: LD_ADDR_EXP 36
11601: PUSH
11602: LD_INT 6
11604: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11605: LD_ADDR_EXP 37
11609: PUSH
11610: LD_INT 8
11612: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11613: LD_INT 51
11615: PPUSH
11616: LD_INT 6
11618: PPUSH
11619: LD_INT 2
11621: PPUSH
11622: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11626: LD_INT 57
11628: PPUSH
11629: LD_INT 6
11631: PPUSH
11632: LD_INT 2
11634: PPUSH
11635: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11639: LD_INT 52
11641: PPUSH
11642: LD_INT 6
11644: PPUSH
11645: LD_INT 2
11647: PPUSH
11648: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11652: LD_INT 58
11654: PPUSH
11655: LD_INT 6
11657: PPUSH
11658: LD_INT 2
11660: PPUSH
11661: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11665: LD_INT 63
11667: PPUSH
11668: LD_INT 6
11670: PPUSH
11671: LD_INT 2
11673: PPUSH
11674: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11678: LD_INT 64
11680: PPUSH
11681: LD_INT 6
11683: PPUSH
11684: LD_INT 2
11686: PPUSH
11687: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11691: LD_INT 51
11693: PPUSH
11694: LD_INT 5
11696: PPUSH
11697: LD_INT 2
11699: PPUSH
11700: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11704: LD_INT 52
11706: PPUSH
11707: LD_INT 5
11709: PPUSH
11710: LD_INT 2
11712: PPUSH
11713: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11717: LD_INT 66
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11730: LD_INT 66
11732: PPUSH
11733: LD_INT 5
11735: PPUSH
11736: LD_INT 2
11738: PPUSH
11739: CALL_OW 322
// end ; end ;
11743: LD_VAR 0 1
11747: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11756: LD_ADDR_VAR 0 7
11760: PUSH
11761: LD_INT 43
11763: PUSH
11764: LD_INT 68
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 43
11773: PUSH
11774: LD_INT 79
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 99
11783: PUSH
11784: LD_INT 114
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 103
11793: PUSH
11794: LD_INT 114
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 156
11803: PUSH
11804: LD_INT 92
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 152
11813: PUSH
11814: LD_INT 85
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: ST_TO_ADDR
// for i in sources do
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_VAR 0 7
11838: PUSH
11839: FOR_IN
11840: IFFALSE 11869
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11842: LD_VAR 0 3
11846: PUSH
11847: LD_INT 1
11849: ARRAY
11850: PPUSH
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 2
11858: ARRAY
11859: PPUSH
11860: LD_INT 3
11862: PPUSH
11863: CALL_OW 441
11867: GO 11839
11869: POP
11870: POP
// case position of 1 :
11871: LD_VAR 0 1
11875: PUSH
11876: LD_INT 1
11878: DOUBLE
11879: EQUAL
11880: IFTRUE 11884
11882: GO 11895
11884: POP
// area := westConv ; 2 :
11885: LD_ADDR_VAR 0 6
11889: PUSH
11890: LD_INT 20
11892: ST_TO_ADDR
11893: GO 11934
11895: LD_INT 2
11897: DOUBLE
11898: EQUAL
11899: IFTRUE 11903
11901: GO 11914
11903: POP
// area := midConv ; 3 :
11904: LD_ADDR_VAR 0 6
11908: PUSH
11909: LD_INT 21
11911: ST_TO_ADDR
11912: GO 11934
11914: LD_INT 3
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 11933
11922: POP
// area := eastConv ; end ;
11923: LD_ADDR_VAR 0 6
11927: PUSH
11928: LD_INT 22
11930: ST_TO_ADDR
11931: GO 11934
11933: POP
// area := AreaToList ( area , 0 ) ;
11934: LD_ADDR_VAR 0 6
11938: PUSH
11939: LD_VAR 0 6
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 517
11951: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11952: LD_ADDR_VAR 0 3
11956: PUSH
11957: DOUBLE
11958: LD_INT 1
11960: DEC
11961: ST_TO_ADDR
11962: LD_VAR 0 6
11966: PUSH
11967: LD_INT 1
11969: ARRAY
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12053
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11974: LD_VAR 0 6
11978: PUSH
11979: LD_INT 1
11981: ARRAY
11982: PUSH
11983: LD_VAR 0 3
11987: ARRAY
11988: PPUSH
11989: LD_VAR 0 6
11993: PUSH
11994: LD_INT 2
11996: ARRAY
11997: PUSH
11998: LD_VAR 0 3
12002: ARRAY
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12014: LD_VAR 0 6
12018: PUSH
12019: LD_INT 1
12021: ARRAY
12022: PUSH
12023: LD_VAR 0 3
12027: ARRAY
12028: PPUSH
12029: LD_VAR 0 6
12033: PUSH
12034: LD_INT 2
12036: ARRAY
12037: PUSH
12038: LD_VAR 0 3
12042: ARRAY
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 331
// end ;
12051: GO 11971
12053: POP
12054: POP
// ruPossition = position ;
12055: LD_ADDR_EXP 41
12059: PUSH
12060: LD_VAR 0 1
12064: ST_TO_ADDR
// if position = 1 then
12065: LD_VAR 0 1
12069: PUSH
12070: LD_INT 1
12072: EQUAL
12073: IFFALSE 12821
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12075: LD_ADDR_VAR 0 4
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 3
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 25
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PPUSH
12104: CALL_OW 69
12108: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12109: LD_ADDR_VAR 0 5
12113: PUSH
12114: LD_INT 0
12116: PUSH
12117: LD_INT 49
12119: PUSH
12120: LD_INT 74
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 4
12134: PUSH
12135: LD_INT 73
12137: PUSH
12138: LD_INT 88
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 4
12152: PUSH
12153: LD_INT 56
12155: PUSH
12156: LD_INT 62
12158: PUSH
12159: LD_INT 3
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 29
12170: PUSH
12171: LD_INT 43
12173: PUSH
12174: LD_INT 68
12176: PUSH
12177: LD_INT 2
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: LD_INT 43
12191: PUSH
12192: LD_INT 79
12194: PUSH
12195: LD_INT 5
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 28
12206: PUSH
12207: LD_INT 60
12209: PUSH
12210: LD_INT 75
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 2
12224: PUSH
12225: LD_INT 50
12227: PUSH
12228: LD_INT 87
12230: PUSH
12231: LD_INT 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 28
12242: PUSH
12243: LD_INT 45
12245: PUSH
12246: LD_INT 67
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 17
12260: PUSH
12261: LD_INT 47
12263: PUSH
12264: LD_INT 84
12266: PUSH
12267: LD_INT 2
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 18
12278: PUSH
12279: LD_INT 46
12281: PUSH
12282: LD_INT 87
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 28
12296: PUSH
12297: LD_INT 41
12299: PUSH
12300: LD_INT 64
12302: PUSH
12303: LD_INT 5
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 32
12314: PUSH
12315: LD_INT 75
12317: PUSH
12318: LD_INT 76
12320: PUSH
12321: LD_INT 5
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 32
12332: PUSH
12333: LD_INT 77
12335: PUSH
12336: LD_INT 75
12338: PUSH
12339: LD_INT 5
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 32
12350: PUSH
12351: LD_INT 69
12353: PUSH
12354: LD_INT 68
12356: PUSH
12357: LD_INT 3
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 32
12368: PUSH
12369: LD_INT 59
12371: PUSH
12372: LD_INT 96
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 32
12386: PUSH
12387: LD_INT 56
12389: PUSH
12390: LD_INT 96
12392: PUSH
12393: LD_INT 0
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 32
12404: PUSH
12405: LD_INT 51
12407: PUSH
12408: LD_INT 61
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 32
12422: PUSH
12423: LD_INT 42
12425: PUSH
12426: LD_INT 60
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 32
12440: PUSH
12441: LD_INT 36
12443: PUSH
12444: LD_INT 58
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 32
12458: PUSH
12459: LD_INT 39
12461: PUSH
12462: LD_INT 59
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 32
12476: PUSH
12477: LD_INT 61
12479: PUSH
12480: LD_INT 64
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 33
12494: PUSH
12495: LD_INT 63
12497: PUSH
12498: LD_INT 90
12500: PUSH
12501: LD_INT 5
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 33
12512: PUSH
12513: LD_INT 64
12515: PUSH
12516: LD_INT 88
12518: PUSH
12519: LD_INT 5
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 33
12530: PUSH
12531: LD_INT 72
12533: PUSH
12534: LD_INT 82
12536: PUSH
12537: LD_INT 5
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 6
12548: PUSH
12549: LD_INT 42
12551: PUSH
12552: LD_INT 74
12554: PUSH
12555: LD_INT 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 6
12566: PUSH
12567: LD_INT 56
12569: PUSH
12570: LD_INT 77
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 21
12584: PUSH
12585: LD_INT 54
12587: PUSH
12588: LD_INT 91
12590: PUSH
12591: LD_INT 5
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 16
12602: PUSH
12603: LD_INT 50
12605: PUSH
12606: LD_INT 83
12608: PUSH
12609: LD_INT 3
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 24
12620: PUSH
12621: LD_INT 50
12623: PUSH
12624: LD_INT 90
12626: PUSH
12627: LD_INT 0
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12667: LD_ADDR_VAR 0 3
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 3
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PPUSH
12703: CALL_OW 69
12707: PUSH
12708: FOR_IN
12709: IFFALSE 12728
// AddComAgressiveMove ( i , 53 , 82 ) ;
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 53
12718: PPUSH
12719: LD_INT 82
12721: PPUSH
12722: CALL_OW 174
12726: GO 12708
12728: POP
12729: POP
// for i := 1 to buildingsTab do
12730: LD_ADDR_VAR 0 3
12734: PUSH
12735: DOUBLE
12736: LD_INT 1
12738: DEC
12739: ST_TO_ADDR
12740: LD_VAR 0 5
12744: PUSH
12745: FOR_TO
12746: IFFALSE 12819
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12748: LD_VAR 0 4
12752: PPUSH
12753: LD_VAR 0 5
12757: PUSH
12758: LD_VAR 0 3
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: LD_VAR 0 5
12772: PUSH
12773: LD_VAR 0 3
12777: ARRAY
12778: PUSH
12779: LD_INT 2
12781: ARRAY
12782: PPUSH
12783: LD_VAR 0 5
12787: PUSH
12788: LD_VAR 0 3
12792: ARRAY
12793: PUSH
12794: LD_INT 3
12796: ARRAY
12797: PPUSH
12798: LD_VAR 0 5
12802: PUSH
12803: LD_VAR 0 3
12807: ARRAY
12808: PUSH
12809: LD_INT 4
12811: ARRAY
12812: PPUSH
12813: CALL_OW 205
12817: GO 12745
12819: POP
12820: POP
// end ; if position = 2 then
12821: LD_VAR 0 1
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: IFFALSE 13444
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12831: LD_ADDR_VAR 0 4
12835: PUSH
12836: LD_INT 22
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 25
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12865: LD_ADDR_VAR 0 5
12869: PUSH
12870: LD_INT 0
12872: PUSH
12873: LD_INT 104
12875: PUSH
12876: LD_INT 110
12878: PUSH
12879: LD_INT 5
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 4
12890: PUSH
12891: LD_INT 98
12893: PUSH
12894: LD_INT 90
12896: PUSH
12897: LD_INT 3
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: LD_INT 103
12911: PUSH
12912: LD_INT 114
12914: PUSH
12915: LD_INT 2
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 30
12926: PUSH
12927: LD_INT 99
12929: PUSH
12930: LD_INT 114
12932: PUSH
12933: LD_INT 3
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 28
12944: PUSH
12945: LD_INT 100
12947: PUSH
12948: LD_INT 112
12950: PUSH
12951: LD_INT 1
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 2
12962: PUSH
12963: LD_INT 92
12965: PUSH
12966: LD_INT 101
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 28
12980: PUSH
12981: LD_INT 97
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 5
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 17
12998: PUSH
12999: LD_INT 96
13001: PUSH
13002: LD_INT 101
13004: PUSH
13005: LD_INT 4
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 18
13016: PUSH
13017: LD_INT 88
13019: PUSH
13020: LD_INT 97
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 28
13034: PUSH
13035: LD_INT 106
13037: PUSH
13038: LD_INT 92
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 32
13052: PUSH
13053: LD_INT 88
13055: PUSH
13056: LD_INT 89
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 32
13070: PUSH
13071: LD_INT 86
13073: PUSH
13074: LD_INT 90
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 32
13088: PUSH
13089: LD_INT 85
13091: PUSH
13092: LD_INT 99
13094: PUSH
13095: LD_INT 2
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 32
13106: PUSH
13107: LD_INT 85
13109: PUSH
13110: LD_INT 107
13112: PUSH
13113: LD_INT 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 33
13124: PUSH
13125: LD_INT 105
13127: PUSH
13128: LD_INT 99
13130: PUSH
13131: LD_INT 1
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 33
13142: PUSH
13143: LD_INT 102
13145: PUSH
13146: LD_INT 92
13148: PUSH
13149: LD_INT 3
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 33
13160: PUSH
13161: LD_INT 105
13163: PUSH
13164: LD_INT 92
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 6
13178: PUSH
13179: LD_INT 92
13181: PUSH
13182: LD_INT 110
13184: PUSH
13185: LD_INT 0
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 6
13196: PUSH
13197: LD_INT 103
13199: PUSH
13200: LD_INT 103
13202: PUSH
13203: LD_INT 5
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 21
13214: PUSH
13215: LD_INT 89
13217: PUSH
13218: LD_INT 101
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 16
13232: PUSH
13233: LD_INT 95
13235: PUSH
13236: LD_INT 104
13238: PUSH
13239: LD_INT 4
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 24
13250: PUSH
13251: LD_INT 92
13253: PUSH
13254: LD_INT 105
13256: PUSH
13257: LD_INT 0
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13290: LD_ADDR_VAR 0 3
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 3
13307: PUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PPUSH
13326: CALL_OW 69
13330: PUSH
13331: FOR_IN
13332: IFFALSE 13351
// AddComAgressiveMove ( i , 96 , 99 ) ;
13334: LD_VAR 0 3
13338: PPUSH
13339: LD_INT 96
13341: PPUSH
13342: LD_INT 99
13344: PPUSH
13345: CALL_OW 174
13349: GO 13331
13351: POP
13352: POP
// for i := 1 to buildingsTab do
13353: LD_ADDR_VAR 0 3
13357: PUSH
13358: DOUBLE
13359: LD_INT 1
13361: DEC
13362: ST_TO_ADDR
13363: LD_VAR 0 5
13367: PUSH
13368: FOR_TO
13369: IFFALSE 13442
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13371: LD_VAR 0 4
13375: PPUSH
13376: LD_VAR 0 5
13380: PUSH
13381: LD_VAR 0 3
13385: ARRAY
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: LD_VAR 0 5
13395: PUSH
13396: LD_VAR 0 3
13400: ARRAY
13401: PUSH
13402: LD_INT 2
13404: ARRAY
13405: PPUSH
13406: LD_VAR 0 5
13410: PUSH
13411: LD_VAR 0 3
13415: ARRAY
13416: PUSH
13417: LD_INT 3
13419: ARRAY
13420: PPUSH
13421: LD_VAR 0 5
13425: PUSH
13426: LD_VAR 0 3
13430: ARRAY
13431: PUSH
13432: LD_INT 4
13434: ARRAY
13435: PPUSH
13436: CALL_OW 205
13440: GO 13368
13442: POP
13443: POP
// end ; if position = 3 then
13444: LD_VAR 0 1
13448: PUSH
13449: LD_INT 3
13451: EQUAL
13452: IFFALSE 14238
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_INT 3
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 25
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13488: LD_ADDR_VAR 0 5
13492: PUSH
13493: LD_INT 0
13495: PUSH
13496: LD_INT 151
13498: PUSH
13499: LD_INT 71
13501: PUSH
13502: LD_INT 4
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: LD_INT 145
13516: PUSH
13517: LD_INT 53
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: LD_INT 172
13534: PUSH
13535: LD_INT 102
13537: PUSH
13538: LD_INT 5
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 29
13549: PUSH
13550: LD_INT 152
13552: PUSH
13553: LD_INT 85
13555: PUSH
13556: LD_INT 3
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 30
13567: PUSH
13568: LD_INT 156
13570: PUSH
13571: LD_INT 92
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 28
13585: PUSH
13586: LD_INT 151
13588: PUSH
13589: LD_INT 66
13591: PUSH
13592: LD_INT 4
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: LD_INT 163
13606: PUSH
13607: LD_INT 95
13609: PUSH
13610: LD_INT 5
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 28
13621: PUSH
13622: LD_INT 149
13624: PUSH
13625: LD_INT 63
13627: PUSH
13628: LD_INT 4
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 17
13639: PUSH
13640: LD_INT 167
13642: PUSH
13643: LD_INT 99
13645: PUSH
13646: LD_INT 5
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 18
13657: PUSH
13658: LD_INT 163
13660: PUSH
13661: LD_INT 98
13663: PUSH
13664: LD_INT 0
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 28
13675: PUSH
13676: LD_INT 154
13678: PUSH
13679: LD_INT 70
13681: PUSH
13682: LD_INT 4
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 32
13693: PUSH
13694: LD_INT 155
13696: PUSH
13697: LD_INT 62
13699: PUSH
13700: LD_INT 4
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 32
13711: PUSH
13712: LD_INT 161
13714: PUSH
13715: LD_INT 69
13717: PUSH
13718: LD_INT 4
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 32
13729: PUSH
13730: LD_INT 168
13732: PUSH
13733: LD_INT 78
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 32
13747: PUSH
13748: LD_INT 163
13750: PUSH
13751: LD_INT 80
13753: PUSH
13754: LD_INT 5
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 32
13765: PUSH
13766: LD_INT 136
13768: PUSH
13769: LD_INT 73
13771: PUSH
13772: LD_INT 0
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 32
13783: PUSH
13784: LD_INT 157
13786: PUSH
13787: LD_INT 98
13789: PUSH
13790: LD_INT 0
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: LD_INT 150
13804: PUSH
13805: LD_INT 87
13807: PUSH
13808: LD_INT 1
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 33
13819: PUSH
13820: LD_INT 171
13822: PUSH
13823: LD_INT 97
13825: PUSH
13826: LD_INT 4
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 33
13837: PUSH
13838: LD_INT 168
13840: PUSH
13841: LD_INT 92
13843: PUSH
13844: LD_INT 4
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 33
13855: PUSH
13856: LD_INT 166
13858: PUSH
13859: LD_INT 80
13861: PUSH
13862: LD_INT 5
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 33
13873: PUSH
13874: LD_INT 141
13876: PUSH
13877: LD_INT 54
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 33
13891: PUSH
13892: LD_INT 133
13894: PUSH
13895: LD_INT 57
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 33
13909: PUSH
13910: LD_INT 132
13912: PUSH
13913: LD_INT 61
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 33
13927: PUSH
13928: LD_INT 150
13930: PUSH
13931: LD_INT 82
13933: PUSH
13934: LD_INT 0
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 33
13945: PUSH
13946: LD_INT 132
13948: PUSH
13949: LD_INT 72
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 6
13963: PUSH
13964: LD_INT 146
13966: PUSH
13967: LD_INT 64
13969: PUSH
13970: LD_INT 4
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 6
13981: PUSH
13982: LD_INT 159
13984: PUSH
13985: LD_INT 85
13987: PUSH
13988: LD_INT 4
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 21
13999: PUSH
14000: LD_INT 163
14002: PUSH
14003: LD_INT 91
14005: PUSH
14006: LD_INT 3
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 16
14017: PUSH
14018: LD_INT 166
14020: PUSH
14021: LD_INT 95
14023: PUSH
14024: LD_INT 4
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 24
14035: PUSH
14036: LD_INT 159
14038: PUSH
14039: LD_INT 95
14041: PUSH
14042: LD_INT 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14084: LD_ADDR_VAR 0 3
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 3
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: LD_INT 25
14104: PUSH
14105: LD_INT 2
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: FOR_IN
14126: IFFALSE 14145
// AddComAgressiveMove ( i , 141 , 65 ) ;
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_INT 141
14135: PPUSH
14136: LD_INT 65
14138: PPUSH
14139: CALL_OW 174
14143: GO 14125
14145: POP
14146: POP
// for i := 1 to buildingsTab do
14147: LD_ADDR_VAR 0 3
14151: PUSH
14152: DOUBLE
14153: LD_INT 1
14155: DEC
14156: ST_TO_ADDR
14157: LD_VAR 0 5
14161: PUSH
14162: FOR_TO
14163: IFFALSE 14236
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14165: LD_VAR 0 4
14169: PPUSH
14170: LD_VAR 0 5
14174: PUSH
14175: LD_VAR 0 3
14179: ARRAY
14180: PUSH
14181: LD_INT 1
14183: ARRAY
14184: PPUSH
14185: LD_VAR 0 5
14189: PUSH
14190: LD_VAR 0 3
14194: ARRAY
14195: PUSH
14196: LD_INT 2
14198: ARRAY
14199: PPUSH
14200: LD_VAR 0 5
14204: PUSH
14205: LD_VAR 0 3
14209: ARRAY
14210: PUSH
14211: LD_INT 3
14213: ARRAY
14214: PPUSH
14215: LD_VAR 0 5
14219: PUSH
14220: LD_VAR 0 3
14224: ARRAY
14225: PUSH
14226: LD_INT 4
14228: ARRAY
14229: PPUSH
14230: CALL_OW 205
14234: GO 14162
14236: POP
14237: POP
// end ; end ;
14238: LD_VAR 0 2
14242: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
14247: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14248: LD_ADDR_EXP 68
14252: PUSH
14253: LD_INT 0
14255: PUSH
14256: LD_INT 71
14258: PUSH
14259: LD_INT 15
14261: PUSH
14262: LD_INT 3
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 6
14273: PUSH
14274: LD_INT 77
14276: PUSH
14277: LD_INT 18
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 4
14291: PUSH
14292: LD_INT 77
14294: PUSH
14295: LD_INT 26
14297: PUSH
14298: LD_INT 0
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 31
14309: PUSH
14310: LD_INT 72
14312: PUSH
14313: LD_INT 24
14315: PUSH
14316: LD_INT 0
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 31
14327: PUSH
14328: LD_INT 82
14330: PUSH
14331: LD_INT 28
14333: PUSH
14334: LD_INT 0
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 31
14345: PUSH
14346: LD_INT 84
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 31
14363: PUSH
14364: LD_INT 66
14366: PUSH
14367: LD_INT 14
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 27
14381: PUSH
14382: LD_INT 67
14384: PUSH
14385: LD_INT 18
14387: PUSH
14388: LD_INT 5
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 27
14399: PUSH
14400: LD_INT 69
14402: PUSH
14403: LD_INT 23
14405: PUSH
14406: LD_INT 2
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14426: LD_ADDR_VAR 0 3
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 2
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 25
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14460: LD_VAR 0 3
14464: PPUSH
14465: LD_EXP 68
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PPUSH
14478: LD_EXP 68
14482: PUSH
14483: LD_INT 1
14485: ARRAY
14486: PUSH
14487: LD_INT 2
14489: ARRAY
14490: PPUSH
14491: LD_EXP 68
14495: PUSH
14496: LD_INT 1
14498: ARRAY
14499: PUSH
14500: LD_INT 3
14502: ARRAY
14503: PPUSH
14504: LD_EXP 68
14508: PUSH
14509: LD_INT 1
14511: ARRAY
14512: PUSH
14513: LD_INT 4
14515: ARRAY
14516: PPUSH
14517: CALL_OW 205
// end ;
14521: LD_VAR 0 1
14525: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14526: LD_INT 0
14528: PPUSH
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
14533: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14534: LD_ADDR_VAR 0 7
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_VAR 0 1
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 9
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 69
14569: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14570: LD_ADDR_VAR 0 8
14574: PUSH
14575: LD_INT 22
14577: PUSH
14578: LD_VAR 0 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 3
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14613: LD_ADDR_VAR 0 5
14617: PUSH
14618: LD_INT 1
14620: PPUSH
14621: LD_INT 3
14623: PPUSH
14624: CALL_OW 12
14628: ST_TO_ADDR
// for i = 1 to list do
14629: LD_ADDR_VAR 0 6
14633: PUSH
14634: DOUBLE
14635: LD_INT 1
14637: DEC
14638: ST_TO_ADDR
14639: LD_VAR 0 7
14643: PUSH
14644: FOR_TO
14645: IFFALSE 15635
// for ta in filter do
14647: LD_ADDR_VAR 0 4
14651: PUSH
14652: LD_VAR 0 8
14656: PUSH
14657: FOR_IN
14658: IFFALSE 15631
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14660: LD_VAR 0 7
14664: PUSH
14665: LD_VAR 0 6
14669: ARRAY
14670: PPUSH
14671: LD_VAR 0 4
14675: PPUSH
14676: CALL_OW 296
14680: PUSH
14681: LD_INT 15
14683: LESSEQUAL
14684: IFFALSE 15629
// begin case c of 1 :
14686: LD_VAR 0 5
14690: PUSH
14691: LD_INT 1
14693: DOUBLE
14694: EQUAL
14695: IFTRUE 14699
14697: GO 15131
14699: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14700: LD_VAR 0 7
14704: PUSH
14705: LD_VAR 0 6
14709: ARRAY
14710: PPUSH
14711: LD_VAR 0 4
14715: PPUSH
14716: CALL_OW 250
14720: PPUSH
14721: LD_VAR 0 4
14725: PPUSH
14726: CALL_OW 251
14730: PPUSH
14731: CALL_OW 154
// if eventVar2 = 0 then
14735: LD_EXP 66
14739: PUSH
14740: LD_INT 0
14742: EQUAL
14743: IFFALSE 15129
// begin eventVar2 = 1 ;
14745: LD_ADDR_EXP 66
14749: PUSH
14750: LD_INT 1
14752: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14753: LD_INT 245
14755: PPUSH
14756: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14760: LD_VAR 0 4
14764: PPUSH
14765: CALL_OW 250
14769: PPUSH
14770: LD_VAR 0 4
14774: PPUSH
14775: CALL_OW 251
14779: PPUSH
14780: CALL_OW 84
// DialogueOn ;
14784: CALL_OW 6
// if IsOK ( Cyrus ) then
14788: LD_EXP 5
14792: PPUSH
14793: CALL_OW 302
14797: IFFALSE 14813
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14799: LD_EXP 5
14803: PPUSH
14804: LD_STRING D9a-Cyrus-1
14806: PPUSH
14807: CALL_OW 88
// end else
14811: GO 14935
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14813: LD_INT 22
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 26
14825: PUSH
14826: LD_INT 1
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: LD_INT 25
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 25
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 4
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 5
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: PUSH
14904: LD_EXP 1
14908: PUSH
14909: LD_EXP 14
14913: PUSH
14914: LD_EXP 5
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: LIST
14923: DIFF
14924: PPUSH
14925: LD_STRING D9a-Sol1-1
14927: PPUSH
14928: LD_STRING D9a-Sol1-1
14930: PPUSH
14931: CALL 11090 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14935: LD_INT 22
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 26
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: LD_INT 25
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 25
14970: PUSH
14971: LD_INT 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 4
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 25
15000: PUSH
15001: LD_INT 5
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: PUSH
15026: LD_EXP 1
15030: PUSH
15031: LD_EXP 14
15035: PUSH
15036: LD_EXP 5
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: DIFF
15046: PPUSH
15047: LD_STRING D9b-Sol1-1
15049: PPUSH
15050: LD_STRING D9b-Sol1-1
15052: PPUSH
15053: CALL 11090 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15057: LD_STRING 09_arInfo
15059: PPUSH
15060: LD_INT 0
15062: PPUSH
15063: CALL_OW 30
15067: PUSH
15068: LD_INT 1
15070: EQUAL
15071: IFFALSE 15085
// Say ( JMM , D9a-JMM-1 ) ;
15073: LD_EXP 1
15077: PPUSH
15078: LD_STRING D9a-JMM-1
15080: PPUSH
15081: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15085: LD_EXP 1
15089: PPUSH
15090: LD_STRING D9c-JMM-1
15092: PPUSH
15093: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15097: LD_INT 12
15099: PPUSH
15100: LD_INT 1
15102: PPUSH
15103: CALL_OW 321
15107: PUSH
15108: LD_INT 2
15110: EQUAL
15111: IFFALSE 15125
// Say ( JMM , D9c-JMM-1a ) ;
15113: LD_EXP 1
15117: PPUSH
15118: LD_STRING D9c-JMM-1a
15120: PPUSH
15121: CALL_OW 88
// DialogueOff ;
15125: CALL_OW 7
// end ; end ; 2 :
15129: GO 15629
15131: LD_INT 2
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15597
15139: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15140: LD_VAR 0 7
15144: PUSH
15145: LD_VAR 0 6
15149: ARRAY
15150: PPUSH
15151: LD_VAR 0 4
15155: PPUSH
15156: CALL_OW 250
15160: PUSH
15161: LD_INT 1
15163: NEG
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 12
15172: PLUS
15173: PPUSH
15174: LD_VAR 0 4
15178: PPUSH
15179: CALL_OW 251
15183: PUSH
15184: LD_INT 1
15186: NEG
15187: PPUSH
15188: LD_INT 1
15190: PPUSH
15191: CALL_OW 12
15195: PLUS
15196: PPUSH
15197: CALL_OW 153
// if eventVar2 = 0 then
15201: LD_EXP 66
15205: PUSH
15206: LD_INT 0
15208: EQUAL
15209: IFFALSE 15595
// begin eventVar2 = 1 ;
15211: LD_ADDR_EXP 66
15215: PUSH
15216: LD_INT 1
15218: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15219: LD_INT 245
15221: PPUSH
15222: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15226: LD_VAR 0 4
15230: PPUSH
15231: CALL_OW 250
15235: PPUSH
15236: LD_VAR 0 4
15240: PPUSH
15241: CALL_OW 251
15245: PPUSH
15246: CALL_OW 84
// DialogueOn ;
15250: CALL_OW 6
// if IsOK ( Cyrus ) then
15254: LD_EXP 5
15258: PPUSH
15259: CALL_OW 302
15263: IFFALSE 15279
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15265: LD_EXP 5
15269: PPUSH
15270: LD_STRING D9a-Cyrus-1
15272: PPUSH
15273: CALL_OW 88
// end else
15277: GO 15401
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15279: LD_INT 22
15281: PUSH
15282: LD_INT 1
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 26
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: LD_INT 25
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 25
15314: PUSH
15315: LD_INT 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 25
15324: PUSH
15325: LD_INT 3
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 4
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 5
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: PPUSH
15365: CALL_OW 69
15369: PUSH
15370: LD_EXP 1
15374: PUSH
15375: LD_EXP 14
15379: PUSH
15380: LD_EXP 5
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: DIFF
15390: PPUSH
15391: LD_STRING D9a-Sol1-1
15393: PPUSH
15394: LD_STRING D9a-Sol1-1
15396: PPUSH
15397: CALL 11090 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15401: LD_INT 22
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 26
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: LD_INT 25
15426: PUSH
15427: LD_INT 1
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 25
15436: PUSH
15437: LD_INT 2
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 3
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 4
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 25
15466: PUSH
15467: LD_INT 5
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 69
15491: PUSH
15492: LD_EXP 1
15496: PUSH
15497: LD_EXP 14
15501: PUSH
15502: LD_EXP 5
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: DIFF
15512: PPUSH
15513: LD_STRING D9b-Sol1-1
15515: PPUSH
15516: LD_STRING D9b-Sol1-1
15518: PPUSH
15519: CALL 11090 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15523: LD_STRING 09_arInfo
15525: PPUSH
15526: LD_INT 0
15528: PPUSH
15529: CALL_OW 30
15533: PUSH
15534: LD_INT 1
15536: EQUAL
15537: IFFALSE 15551
// Say ( JMM , D9a-JMM-1 ) ;
15539: LD_EXP 1
15543: PPUSH
15544: LD_STRING D9a-JMM-1
15546: PPUSH
15547: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15551: LD_EXP 1
15555: PPUSH
15556: LD_STRING D9c-JMM-1
15558: PPUSH
15559: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15563: LD_INT 12
15565: PPUSH
15566: LD_INT 1
15568: PPUSH
15569: CALL_OW 321
15573: PUSH
15574: LD_INT 2
15576: EQUAL
15577: IFFALSE 15591
// Say ( JMM , D9c-JMM-1a ) ;
15579: LD_EXP 1
15583: PPUSH
15584: LD_STRING D9c-JMM-1a
15586: PPUSH
15587: CALL_OW 88
// DialogueOff ;
15591: CALL_OW 7
// end ; end ; 3 :
15595: GO 15629
15597: LD_INT 3
15599: DOUBLE
15600: EQUAL
15601: IFTRUE 15605
15603: GO 15628
15605: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15606: LD_VAR 0 7
15610: PUSH
15611: LD_VAR 0 6
15615: ARRAY
15616: PPUSH
15617: LD_VAR 0 4
15621: PPUSH
15622: CALL_OW 115
15626: GO 15629
15628: POP
// end ; end ;
15629: GO 14657
15631: POP
15632: POP
15633: GO 14644
15635: POP
15636: POP
// end ;
15637: LD_VAR 0 3
15641: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
// for i = 1 to 72 do
15648: LD_ADDR_VAR 0 5
15652: PUSH
15653: DOUBLE
15654: LD_INT 1
15656: DEC
15657: ST_TO_ADDR
15658: LD_INT 72
15660: PUSH
15661: FOR_TO
15662: IFFALSE 15720
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15664: LD_VAR 0 5
15668: PPUSH
15669: LD_VAR 0 1
15673: PPUSH
15674: CALL_OW 321
15678: PUSH
15679: LD_INT 1
15681: EQUAL
15682: PUSH
15683: LD_VAR 0 5
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: CALL_OW 482
15697: PUSH
15698: LD_INT 1
15700: EQUAL
15701: AND
15702: IFFALSE 15718
// AddComResearch ( lab , i ) ;
15704: LD_VAR 0 2
15708: PPUSH
15709: LD_VAR 0 5
15713: PPUSH
15714: CALL_OW 184
15718: GO 15661
15720: POP
15721: POP
// end ;
15722: LD_VAR 0 4
15726: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15727: LD_INT 0
15729: PPUSH
15730: PPUSH
15731: PPUSH
15732: PPUSH
15733: PPUSH
15734: PPUSH
15735: PPUSH
15736: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15737: LD_ADDR_VAR 0 6
15741: PUSH
15742: LD_INT 22
15744: PUSH
15745: LD_VAR 0 1
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 56
15756: PUSH
15757: EMPTY
15758: LIST
15759: PUSH
15760: LD_INT 24
15762: PUSH
15763: LD_INT 700
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 60
15775: PUSH
15776: EMPTY
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 2
15785: PUSH
15786: LD_INT 25
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 25
15798: PUSH
15799: LD_INT 9
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15823: LD_ADDR_VAR 0 7
15827: PUSH
15828: LD_INT 22
15830: PUSH
15831: LD_VAR 0 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 30
15842: PUSH
15843: LD_INT 32
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 58
15852: PUSH
15853: EMPTY
15854: LIST
15855: PUSH
15856: LD_INT 24
15858: PUSH
15859: LD_INT 251
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 69
15876: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15877: LD_ADDR_VAR 0 9
15881: PUSH
15882: LD_INT 22
15884: PUSH
15885: LD_VAR 0 1
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 30
15899: PUSH
15900: LD_INT 4
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 30
15909: PUSH
15910: LD_INT 5
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 24
15924: PUSH
15925: LD_INT 251
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 69
15941: ST_TO_ADDR
// if barrackList > 0 then
15942: LD_VAR 0 9
15946: PUSH
15947: LD_INT 0
15949: GREATER
15950: IFFALSE 16085
// begin if turretList = 0 then
15952: LD_VAR 0 7
15956: PUSH
15957: LD_INT 0
15959: EQUAL
15960: IFFALSE 16009
// begin for i in soldiers_list do
15962: LD_ADDR_VAR 0 4
15966: PUSH
15967: LD_VAR 0 6
15971: PUSH
15972: FOR_IN
15973: IFFALSE 16005
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15975: LD_VAR 0 4
15979: PPUSH
15980: LD_VAR 0 9
15984: PUSH
15985: LD_INT 1
15987: PPUSH
15988: LD_VAR 0 9
15992: PPUSH
15993: CALL_OW 12
15997: ARRAY
15998: PPUSH
15999: CALL_OW 120
16003: GO 15972
16005: POP
16006: POP
// end else
16007: GO 16085
// begin for i in barrackList do
16009: LD_ADDR_VAR 0 4
16013: PUSH
16014: LD_VAR 0 9
16018: PUSH
16019: FOR_IN
16020: IFFALSE 16083
// begin insideUnits = UnitsInside ( i ) ;
16022: LD_ADDR_VAR 0 10
16026: PUSH
16027: LD_VAR 0 4
16031: PPUSH
16032: CALL_OW 313
16036: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16037: LD_VAR 0 10
16041: PUSH
16042: LD_INT 1
16044: ARRAY
16045: PPUSH
16046: LD_VAR 0 7
16050: PUSH
16051: LD_INT 1
16053: ARRAY
16054: PPUSH
16055: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16059: LD_VAR 0 6
16063: PUSH
16064: LD_INT 1
16066: ARRAY
16067: PPUSH
16068: LD_VAR 0 7
16072: PUSH
16073: LD_INT 1
16075: ARRAY
16076: PPUSH
16077: CALL_OW 120
// end ;
16081: GO 16019
16083: POP
16084: POP
// end ; end ; end ;
16085: LD_VAR 0 3
16089: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16098: LD_ADDR_VAR 0 6
16102: PUSH
16103: LD_VAR 0 2
16107: PPUSH
16108: CALL_OW 313
16112: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16113: LD_ADDR_VAR 0 7
16117: PUSH
16118: LD_INT 22
16120: PUSH
16121: LD_VAR 0 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 25
16132: PUSH
16133: LD_INT 2
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 24
16142: PUSH
16143: LD_INT 1000
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 54
16155: PUSH
16156: EMPTY
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16174: LD_ADDR_VAR 0 4
16178: PUSH
16179: LD_INT 22
16181: PUSH
16182: LD_VAR 0 1
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 21
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: LD_INT 24
16206: PUSH
16207: LD_INT 1000
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: PPUSH
16226: CALL_OW 69
16230: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16231: LD_VAR 0 4
16235: NOT
16236: PUSH
16237: LD_VAR 0 7
16241: NOT
16242: AND
16243: PUSH
16244: LD_EXP 42
16248: NOT
16249: AND
16250: IFFALSE 16254
// exit ;
16252: GO 16445
// if buildings_list > 0 and engineerOkInside then
16254: LD_VAR 0 4
16258: PUSH
16259: LD_INT 0
16261: GREATER
16262: PUSH
16263: LD_VAR 0 6
16267: AND
16268: IFFALSE 16322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16270: LD_ADDR_VAR 0 5
16274: PUSH
16275: LD_INT 22
16277: PUSH
16278: LD_VAR 0 1
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 25
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PPUSH
16301: CALL_OW 69
16305: PUSH
16306: FOR_IN
16307: IFFALSE 16320
// ComExitBuilding ( i ) ;
16309: LD_VAR 0 5
16313: PPUSH
16314: CALL_OW 122
16318: GO 16306
16320: POP
16321: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16322: LD_VAR 0 4
16326: PUSH
16327: LD_INT 0
16329: GREATER
16330: PUSH
16331: LD_VAR 0 7
16335: PUSH
16336: LD_INT 0
16338: GREATER
16339: AND
16340: IFFALSE 16394
// begin for i in engineerOkOutside do
16342: LD_ADDR_VAR 0 5
16346: PUSH
16347: LD_VAR 0 7
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16392
// for j in buildings_list do
16355: LD_ADDR_VAR 0 8
16359: PUSH
16360: LD_VAR 0 4
16364: PUSH
16365: FOR_IN
16366: IFFALSE 16388
// ComRepairBuilding ( i , j [ 1 ] ) ;
16368: LD_VAR 0 5
16372: PPUSH
16373: LD_VAR 0 8
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: CALL_OW 130
16386: GO 16365
16388: POP
16389: POP
16390: GO 16352
16392: POP
16393: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16394: LD_VAR 0 4
16398: PUSH
16399: LD_INT 0
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 7
16407: PUSH
16408: LD_INT 0
16410: GREATER
16411: AND
16412: IFFALSE 16445
// for i in engineerOkOutside do
16414: LD_ADDR_VAR 0 5
16418: PUSH
16419: LD_VAR 0 7
16423: PUSH
16424: FOR_IN
16425: IFFALSE 16443
// ComEnterUnit ( i , building ) ;
16427: LD_VAR 0 5
16431: PPUSH
16432: LD_VAR 0 2
16436: PPUSH
16437: CALL_OW 120
16441: GO 16424
16443: POP
16444: POP
// end ;
16445: LD_VAR 0 3
16449: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16450: LD_INT 0
16452: PPUSH
16453: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16454: LD_INT 22
16456: PUSH
16457: LD_VAR 0 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: PUSH
16485: LD_INT 0
16487: GREATER
16488: PUSH
16489: LD_INT 22
16491: PUSH
16492: LD_VAR 0 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 21
16503: PUSH
16504: LD_INT 3
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 3
16513: PUSH
16514: LD_INT 24
16516: PUSH
16517: LD_INT 1000
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: PUSH
16538: LD_INT 0
16540: EQUAL
16541: AND
16542: PUSH
16543: LD_VAR 0 2
16547: PUSH
16548: LD_INT 0
16550: GREATER
16551: AND
16552: IFFALSE 16651
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_VAR 0 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 25
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: PUSH
16590: FOR_IN
16591: IFFALSE 16649
// begin AddComExitBuilding ( i ) ;
16593: LD_VAR 0 4
16597: PPUSH
16598: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16602: LD_VAR 0 4
16606: PPUSH
16607: LD_VAR 0 2
16611: PUSH
16612: LD_INT 1
16614: ARRAY
16615: PPUSH
16616: LD_VAR 0 2
16620: PUSH
16621: LD_INT 2
16623: ARRAY
16624: PPUSH
16625: LD_VAR 0 2
16629: PUSH
16630: LD_INT 3
16632: ARRAY
16633: PPUSH
16634: LD_VAR 0 2
16638: PUSH
16639: LD_INT 4
16641: ARRAY
16642: PPUSH
16643: CALL_OW 205
// end ;
16647: GO 16590
16649: POP
16650: POP
// end ; end ;
16651: LD_VAR 0 3
16655: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16656: LD_INT 0
16658: PPUSH
16659: PPUSH
16660: PPUSH
16661: PPUSH
16662: PPUSH
16663: PPUSH
16664: PPUSH
16665: PPUSH
16666: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16667: LD_ADDR_VAR 0 6
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_VAR 0 1
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 25
16686: PUSH
16687: LD_INT 4
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 24
16696: PUSH
16697: LD_INT 251
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16714: LD_ADDR_VAR 0 7
16718: PUSH
16719: LD_VAR 0 3
16723: PPUSH
16724: LD_INT 22
16726: PUSH
16727: LD_VAR 0 1
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 25
16738: PUSH
16739: LD_INT 4
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 50
16748: PUSH
16749: EMPTY
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: PPUSH
16757: CALL_OW 70
16761: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16762: LD_ADDR_VAR 0 10
16766: PUSH
16767: LD_VAR 0 3
16771: PPUSH
16772: LD_INT 22
16774: PUSH
16775: LD_VAR 0 1
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 1
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 3
16796: PUSH
16797: LD_INT 25
16799: PUSH
16800: LD_INT 3
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 3
16813: PUSH
16814: LD_INT 24
16816: PUSH
16817: LD_INT 750
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 70
16838: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16839: LD_ADDR_VAR 0 11
16843: PUSH
16844: LD_VAR 0 2
16848: PPUSH
16849: LD_INT 22
16851: PUSH
16852: LD_VAR 0 1
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 21
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: LD_INT 25
16876: PUSH
16877: LD_INT 3
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 3
16890: PUSH
16891: LD_INT 24
16893: PUSH
16894: LD_INT 1000
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: PPUSH
16911: CALL_OW 70
16915: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16916: LD_VAR 0 10
16920: NOT
16921: PUSH
16922: LD_VAR 0 7
16926: NOT
16927: AND
16928: PUSH
16929: LD_VAR 0 11
16933: NOT
16934: AND
16935: IFFALSE 16939
// exit ;
16937: GO 17199
// if damageUnits > 0 and sci_list > 0 then
16939: LD_VAR 0 10
16943: PUSH
16944: LD_INT 0
16946: GREATER
16947: PUSH
16948: LD_VAR 0 6
16952: PUSH
16953: LD_INT 0
16955: GREATER
16956: AND
16957: IFFALSE 16990
// for i in damageUnits do
16959: LD_ADDR_VAR 0 8
16963: PUSH
16964: LD_VAR 0 10
16968: PUSH
16969: FOR_IN
16970: IFFALSE 16988
// ComMoveToArea ( i , healArea ) ;
16972: LD_VAR 0 8
16976: PPUSH
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL_OW 113
16986: GO 16969
16988: POP
16989: POP
// if unitsToHeal > 0 and sci_list > 0 then
16990: LD_VAR 0 11
16994: PUSH
16995: LD_INT 0
16997: GREATER
16998: PUSH
16999: LD_VAR 0 6
17003: PUSH
17004: LD_INT 0
17006: GREATER
17007: AND
17008: IFFALSE 17067
// begin for i in sci_list do
17010: LD_ADDR_VAR 0 8
17014: PUSH
17015: LD_VAR 0 6
17019: PUSH
17020: FOR_IN
17021: IFFALSE 17065
// begin ComExitBuilding ( i ) ;
17023: LD_VAR 0 8
17027: PPUSH
17028: CALL_OW 122
// for j in unitsToHeal do
17032: LD_ADDR_VAR 0 9
17036: PUSH
17037: LD_VAR 0 11
17041: PUSH
17042: FOR_IN
17043: IFFALSE 17061
// AddComHeal ( i , j ) ;
17045: LD_VAR 0 8
17049: PPUSH
17050: LD_VAR 0 9
17054: PPUSH
17055: CALL_OW 188
17059: GO 17042
17061: POP
17062: POP
// end ;
17063: GO 17020
17065: POP
17066: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17067: LD_VAR 0 10
17071: PUSH
17072: LD_INT 0
17074: EQUAL
17075: PUSH
17076: LD_VAR 0 11
17080: PUSH
17081: LD_INT 0
17083: EQUAL
17084: AND
17085: PUSH
17086: LD_VAR 0 7
17090: PUSH
17091: LD_INT 0
17093: GREATER
17094: AND
17095: IFFALSE 17199
// for i in sci_listOutside do
17097: LD_ADDR_VAR 0 8
17101: PUSH
17102: LD_VAR 0 7
17106: PUSH
17107: FOR_IN
17108: IFFALSE 17197
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17110: LD_ADDR_VAR 0 12
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_VAR 0 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 21
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 8
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PPUSH
17152: CALL_OW 69
17156: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17157: LD_ADDR_VAR 0 13
17161: PUSH
17162: LD_INT 1
17164: PPUSH
17165: LD_VAR 0 12
17169: PPUSH
17170: CALL_OW 12
17174: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17175: LD_VAR 0 8
17179: PPUSH
17180: LD_VAR 0 12
17184: PUSH
17185: LD_VAR 0 13
17189: ARRAY
17190: PPUSH
17191: CALL_OW 120
// end ;
17195: GO 17107
17197: POP
17198: POP
// end ;
17199: LD_VAR 0 5
17203: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
// amChassisTab = [ ] ;
17217: LD_ADDR_VAR 0 19
17221: PUSH
17222: EMPTY
17223: ST_TO_ADDR
// arChassisTab = [ ] ;
17224: LD_ADDR_VAR 0 18
17228: PUSH
17229: EMPTY
17230: ST_TO_ADDR
// ruChassisTab = [ ] ;
17231: LD_ADDR_VAR 0 17
17235: PUSH
17236: EMPTY
17237: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17238: LD_INT 35
17240: PPUSH
17241: CALL_OW 67
// if nation = 1 then
17245: LD_VAR 0 5
17249: PUSH
17250: LD_INT 1
17252: EQUAL
17253: IFFALSE 17758
// begin uc_side = side ;
17255: LD_ADDR_OWVAR 20
17259: PUSH
17260: LD_VAR 0 2
17264: ST_TO_ADDR
// uc_nation = nation ;
17265: LD_ADDR_OWVAR 21
17269: PUSH
17270: LD_VAR 0 5
17274: ST_TO_ADDR
// vc_engine = vehengine ;
17275: LD_ADDR_OWVAR 39
17279: PUSH
17280: LD_VAR 0 6
17284: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17285: LD_ADDR_OWVAR 38
17289: PUSH
17290: LD_VAR 0 7
17294: PUSH
17295: LD_INT 1
17297: PPUSH
17298: LD_VAR 0 7
17302: PPUSH
17303: CALL_OW 12
17307: ARRAY
17308: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17309: LD_ADDR_OWVAR 40
17313: PUSH
17314: LD_VAR 0 10
17318: PUSH
17319: LD_INT 1
17321: PPUSH
17322: LD_VAR 0 10
17326: PPUSH
17327: CALL_OW 12
17331: ARRAY
17332: ST_TO_ADDR
// for j = 1 to AMWeapon do
17333: LD_ADDR_VAR 0 14
17337: PUSH
17338: DOUBLE
17339: LD_INT 1
17341: DEC
17342: ST_TO_ADDR
17343: LD_VAR 0 10
17347: PUSH
17348: FOR_TO
17349: IFFALSE 17650
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17351: LD_VAR 0 10
17355: PUSH
17356: LD_VAR 0 14
17360: ARRAY
17361: PUSH
17362: LD_INT 2
17364: EQUAL
17365: PUSH
17366: LD_VAR 0 10
17370: PUSH
17371: LD_VAR 0 14
17375: ARRAY
17376: PUSH
17377: LD_INT 3
17379: EQUAL
17380: OR
17381: IFFALSE 17434
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17383: LD_ADDR_VAR 0 19
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 3
17396: PUSH
17397: LD_INT 4
17399: PUSH
17400: LD_INT 5
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17410: LD_ADDR_OWVAR 37
17414: PUSH
17415: LD_VAR 0 19
17419: PUSH
17420: LD_INT 1
17422: PPUSH
17423: LD_VAR 0 19
17427: PPUSH
17428: CALL_OW 12
17432: ARRAY
17433: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17434: LD_VAR 0 10
17438: PUSH
17439: LD_VAR 0 14
17443: ARRAY
17444: PUSH
17445: LD_INT 4
17447: EQUAL
17448: PUSH
17449: LD_VAR 0 10
17453: PUSH
17454: LD_VAR 0 14
17458: ARRAY
17459: PUSH
17460: LD_INT 5
17462: EQUAL
17463: OR
17464: PUSH
17465: LD_VAR 0 10
17469: PUSH
17470: LD_VAR 0 14
17474: ARRAY
17475: PUSH
17476: LD_INT 9
17478: EQUAL
17479: OR
17480: PUSH
17481: LD_VAR 0 10
17485: PUSH
17486: LD_VAR 0 14
17490: ARRAY
17491: PUSH
17492: LD_INT 11
17494: EQUAL
17495: OR
17496: PUSH
17497: LD_VAR 0 10
17501: PUSH
17502: LD_VAR 0 14
17506: ARRAY
17507: PUSH
17508: LD_INT 7
17510: EQUAL
17511: OR
17512: IFFALSE 17561
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17514: LD_ADDR_VAR 0 19
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 3
17524: PUSH
17525: LD_INT 4
17527: PUSH
17528: LD_INT 5
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17537: LD_ADDR_OWVAR 37
17541: PUSH
17542: LD_VAR 0 19
17546: PUSH
17547: LD_INT 1
17549: PPUSH
17550: LD_VAR 0 19
17554: PPUSH
17555: CALL_OW 12
17559: ARRAY
17560: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17561: LD_VAR 0 10
17565: PUSH
17566: LD_VAR 0 14
17570: ARRAY
17571: PUSH
17572: LD_INT 8
17574: EQUAL
17575: PUSH
17576: LD_VAR 0 10
17580: PUSH
17581: LD_VAR 0 14
17585: ARRAY
17586: PUSH
17587: LD_INT 6
17589: EQUAL
17590: OR
17591: PUSH
17592: LD_VAR 0 10
17596: PUSH
17597: LD_VAR 0 14
17601: ARRAY
17602: PUSH
17603: LD_INT 10
17605: EQUAL
17606: OR
17607: IFFALSE 17648
// begin amChassisTab = [ 4 , 5 ] ;
17609: LD_ADDR_VAR 0 19
17613: PUSH
17614: LD_INT 4
17616: PUSH
17617: LD_INT 5
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17624: LD_ADDR_OWVAR 37
17628: PUSH
17629: LD_VAR 0 19
17633: PUSH
17634: LD_INT 1
17636: PPUSH
17637: LD_VAR 0 19
17641: PPUSH
17642: CALL_OW 12
17646: ARRAY
17647: ST_TO_ADDR
// end ; end ;
17648: GO 17348
17650: POP
17651: POP
// veh = CreateVehicle ;
17652: LD_ADDR_VAR 0 16
17656: PUSH
17657: CALL_OW 45
17661: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17662: LD_VAR 0 16
17666: PPUSH
17667: LD_VAR 0 1
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 49
// if vc_control = 1 then
17679: LD_OWVAR 38
17683: PUSH
17684: LD_INT 1
17686: EQUAL
17687: IFFALSE 17744
// begin hc_gallery =  ;
17689: LD_ADDR_OWVAR 33
17693: PUSH
17694: LD_STRING 
17696: ST_TO_ADDR
// hc_name =  ;
17697: LD_ADDR_OWVAR 26
17701: PUSH
17702: LD_STRING 
17704: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17705: LD_INT 0
17707: PPUSH
17708: LD_INT 3
17710: PPUSH
17711: LD_VAR 0 4
17715: PPUSH
17716: CALL_OW 380
// un = CreateHuman ;
17720: LD_ADDR_VAR 0 15
17724: PUSH
17725: CALL_OW 44
17729: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17730: LD_VAR 0 15
17734: PPUSH
17735: LD_VAR 0 16
17739: PPUSH
17740: CALL_OW 52
// end ; i = i + 1 ;
17744: LD_ADDR_VAR 0 13
17748: PUSH
17749: LD_VAR 0 13
17753: PUSH
17754: LD_INT 1
17756: PLUS
17757: ST_TO_ADDR
// end ; if nation = 2 then
17758: LD_VAR 0 5
17762: PUSH
17763: LD_INT 2
17765: EQUAL
17766: IFFALSE 18188
// begin uc_side = side ;
17768: LD_ADDR_OWVAR 20
17772: PUSH
17773: LD_VAR 0 2
17777: ST_TO_ADDR
// uc_nation = nation ;
17778: LD_ADDR_OWVAR 21
17782: PUSH
17783: LD_VAR 0 5
17787: ST_TO_ADDR
// vc_engine = vehengine ;
17788: LD_ADDR_OWVAR 39
17792: PUSH
17793: LD_VAR 0 6
17797: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17798: LD_ADDR_OWVAR 38
17802: PUSH
17803: LD_VAR 0 7
17807: PUSH
17808: LD_INT 1
17810: PPUSH
17811: LD_VAR 0 7
17815: PPUSH
17816: CALL_OW 12
17820: ARRAY
17821: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17822: LD_ADDR_OWVAR 40
17826: PUSH
17827: LD_VAR 0 9
17831: PUSH
17832: LD_INT 1
17834: PPUSH
17835: LD_VAR 0 9
17839: PPUSH
17840: CALL_OW 12
17844: ARRAY
17845: ST_TO_ADDR
// for j = 1 to ARWeapons do
17846: LD_ADDR_VAR 0 14
17850: PUSH
17851: DOUBLE
17852: LD_INT 1
17854: DEC
17855: ST_TO_ADDR
17856: LD_VAR 0 9
17860: PUSH
17861: FOR_TO
17862: IFFALSE 18080
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17864: LD_VAR 0 9
17868: PUSH
17869: LD_VAR 0 14
17873: ARRAY
17874: PUSH
17875: LD_INT 24
17877: EQUAL
17878: PUSH
17879: LD_VAR 0 9
17883: PUSH
17884: LD_VAR 0 14
17888: ARRAY
17889: PUSH
17890: LD_INT 22
17892: EQUAL
17893: OR
17894: PUSH
17895: LD_VAR 0 9
17899: PUSH
17900: LD_VAR 0 14
17904: ARRAY
17905: PUSH
17906: LD_INT 23
17908: EQUAL
17909: OR
17910: PUSH
17911: LD_VAR 0 9
17915: PUSH
17916: LD_VAR 0 14
17920: ARRAY
17921: PUSH
17922: LD_INT 30
17924: EQUAL
17925: OR
17926: IFFALSE 17963
// begin arChassisTab = [ 14 ] ;
17928: LD_ADDR_VAR 0 18
17932: PUSH
17933: LD_INT 14
17935: PUSH
17936: EMPTY
17937: LIST
17938: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17939: LD_ADDR_OWVAR 37
17943: PUSH
17944: LD_VAR 0 18
17948: PUSH
17949: LD_INT 1
17951: PPUSH
17952: LD_VAR 0 18
17956: PPUSH
17957: CALL_OW 12
17961: ARRAY
17962: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17963: LD_VAR 0 9
17967: PUSH
17968: LD_VAR 0 14
17972: ARRAY
17973: PUSH
17974: LD_INT 29
17976: EQUAL
17977: PUSH
17978: LD_VAR 0 9
17982: PUSH
17983: LD_VAR 0 14
17987: ARRAY
17988: PUSH
17989: LD_INT 28
17991: EQUAL
17992: OR
17993: PUSH
17994: LD_VAR 0 9
17998: PUSH
17999: LD_VAR 0 14
18003: ARRAY
18004: PUSH
18005: LD_INT 27
18007: EQUAL
18008: OR
18009: PUSH
18010: LD_VAR 0 9
18014: PUSH
18015: LD_VAR 0 14
18019: ARRAY
18020: PUSH
18021: LD_INT 26
18023: EQUAL
18024: OR
18025: PUSH
18026: LD_VAR 0 9
18030: PUSH
18031: LD_VAR 0 14
18035: ARRAY
18036: PUSH
18037: LD_INT 25
18039: EQUAL
18040: OR
18041: IFFALSE 18078
// begin arChassisTab = [ 14 ] ;
18043: LD_ADDR_VAR 0 18
18047: PUSH
18048: LD_INT 14
18050: PUSH
18051: EMPTY
18052: LIST
18053: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18054: LD_ADDR_OWVAR 37
18058: PUSH
18059: LD_VAR 0 18
18063: PUSH
18064: LD_INT 1
18066: PPUSH
18067: LD_VAR 0 18
18071: PPUSH
18072: CALL_OW 12
18076: ARRAY
18077: ST_TO_ADDR
// end ; end ;
18078: GO 17861
18080: POP
18081: POP
// veh = CreateVehicle ;
18082: LD_ADDR_VAR 0 16
18086: PUSH
18087: CALL_OW 45
18091: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18092: LD_VAR 0 16
18096: PPUSH
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 49
// if vc_control = 1 then
18109: LD_OWVAR 38
18113: PUSH
18114: LD_INT 1
18116: EQUAL
18117: IFFALSE 18174
// begin hc_gallery =  ;
18119: LD_ADDR_OWVAR 33
18123: PUSH
18124: LD_STRING 
18126: ST_TO_ADDR
// hc_name =  ;
18127: LD_ADDR_OWVAR 26
18131: PUSH
18132: LD_STRING 
18134: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18135: LD_INT 0
18137: PPUSH
18138: LD_INT 3
18140: PPUSH
18141: LD_VAR 0 4
18145: PPUSH
18146: CALL_OW 380
// un = CreateHuman ;
18150: LD_ADDR_VAR 0 15
18154: PUSH
18155: CALL_OW 44
18159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18160: LD_VAR 0 15
18164: PPUSH
18165: LD_VAR 0 16
18169: PPUSH
18170: CALL_OW 52
// end ; i = i + 1 ;
18174: LD_ADDR_VAR 0 13
18178: PUSH
18179: LD_VAR 0 13
18183: PUSH
18184: LD_INT 1
18186: PLUS
18187: ST_TO_ADDR
// end ; if nation = 3 then
18188: LD_VAR 0 5
18192: PUSH
18193: LD_INT 3
18195: EQUAL
18196: IFFALSE 18602
// begin uc_side = side ;
18198: LD_ADDR_OWVAR 20
18202: PUSH
18203: LD_VAR 0 2
18207: ST_TO_ADDR
// uc_nation = nation ;
18208: LD_ADDR_OWVAR 21
18212: PUSH
18213: LD_VAR 0 5
18217: ST_TO_ADDR
// vc_engine = vehengine ;
18218: LD_ADDR_OWVAR 39
18222: PUSH
18223: LD_VAR 0 6
18227: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18228: LD_ADDR_OWVAR 38
18232: PUSH
18233: LD_VAR 0 7
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_VAR 0 7
18245: PPUSH
18246: CALL_OW 12
18250: ARRAY
18251: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18252: LD_ADDR_OWVAR 40
18256: PUSH
18257: LD_VAR 0 8
18261: PUSH
18262: LD_INT 1
18264: PPUSH
18265: LD_VAR 0 8
18269: PPUSH
18270: CALL_OW 12
18274: ARRAY
18275: ST_TO_ADDR
// for j = 1 to RuWeapons do
18276: LD_ADDR_VAR 0 14
18280: PUSH
18281: DOUBLE
18282: LD_INT 1
18284: DEC
18285: ST_TO_ADDR
18286: LD_VAR 0 8
18290: PUSH
18291: FOR_TO
18292: IFFALSE 18494
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18294: LD_VAR 0 8
18298: PUSH
18299: LD_VAR 0 14
18303: ARRAY
18304: PUSH
18305: LD_INT 42
18307: EQUAL
18308: PUSH
18309: LD_VAR 0 8
18313: PUSH
18314: LD_VAR 0 14
18318: ARRAY
18319: PUSH
18320: LD_INT 43
18322: EQUAL
18323: OR
18324: PUSH
18325: LD_VAR 0 8
18329: PUSH
18330: LD_VAR 0 14
18334: ARRAY
18335: PUSH
18336: LD_INT 44
18338: EQUAL
18339: OR
18340: PUSH
18341: LD_VAR 0 8
18345: PUSH
18346: LD_VAR 0 14
18350: ARRAY
18351: PUSH
18352: LD_INT 45
18354: EQUAL
18355: OR
18356: PUSH
18357: LD_VAR 0 8
18361: PUSH
18362: LD_VAR 0 14
18366: ARRAY
18367: PUSH
18368: LD_INT 49
18370: EQUAL
18371: OR
18372: IFFALSE 18421
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18374: LD_ADDR_VAR 0 17
18378: PUSH
18379: LD_INT 21
18381: PUSH
18382: LD_INT 22
18384: PUSH
18385: LD_INT 23
18387: PUSH
18388: LD_INT 24
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18397: LD_ADDR_OWVAR 37
18401: PUSH
18402: LD_VAR 0 17
18406: PUSH
18407: LD_INT 1
18409: PPUSH
18410: LD_VAR 0 17
18414: PPUSH
18415: CALL_OW 12
18419: ARRAY
18420: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18421: LD_VAR 0 8
18425: PUSH
18426: LD_VAR 0 14
18430: ARRAY
18431: PUSH
18432: LD_INT 46
18434: EQUAL
18435: PUSH
18436: LD_VAR 0 8
18440: PUSH
18441: LD_VAR 0 14
18445: ARRAY
18446: PUSH
18447: LD_INT 47
18449: EQUAL
18450: OR
18451: IFFALSE 18492
// begin ruChassisTab = [ 23 , 24 ] ;
18453: LD_ADDR_VAR 0 17
18457: PUSH
18458: LD_INT 23
18460: PUSH
18461: LD_INT 24
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18468: LD_ADDR_OWVAR 37
18472: PUSH
18473: LD_VAR 0 17
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_VAR 0 17
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
// end ; end ;
18492: GO 18291
18494: POP
18495: POP
// veh = CreateVehicle ;
18496: LD_ADDR_VAR 0 16
18500: PUSH
18501: CALL_OW 45
18505: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18506: LD_VAR 0 16
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 0
18518: PPUSH
18519: CALL_OW 49
// if vc_control = 1 then
18523: LD_OWVAR 38
18527: PUSH
18528: LD_INT 1
18530: EQUAL
18531: IFFALSE 18588
// begin hc_gallery =  ;
18533: LD_ADDR_OWVAR 33
18537: PUSH
18538: LD_STRING 
18540: ST_TO_ADDR
// hc_name =  ;
18541: LD_ADDR_OWVAR 26
18545: PUSH
18546: LD_STRING 
18548: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18549: LD_INT 0
18551: PPUSH
18552: LD_INT 3
18554: PPUSH
18555: LD_VAR 0 4
18559: PPUSH
18560: CALL_OW 380
// un = CreateHuman ;
18564: LD_ADDR_VAR 0 15
18568: PUSH
18569: CALL_OW 44
18573: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18574: LD_VAR 0 15
18578: PPUSH
18579: LD_VAR 0 16
18583: PPUSH
18584: CALL_OW 52
// end ; i = i + 1 ;
18588: LD_ADDR_VAR 0 13
18592: PUSH
18593: LD_VAR 0 13
18597: PUSH
18598: LD_INT 1
18600: PLUS
18601: ST_TO_ADDR
// end ; until i = vehCount ;
18602: LD_VAR 0 13
18606: PUSH
18607: LD_VAR 0 3
18611: EQUAL
18612: IFFALSE 17238
// repeat wait ( 0 0$1 ) ;
18614: LD_INT 35
18616: PPUSH
18617: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18621: LD_ADDR_VAR 0 20
18625: PUSH
18626: LD_INT 22
18628: PUSH
18629: LD_VAR 0 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 21
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 24
18650: PUSH
18651: LD_INT 650
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: ST_TO_ADDR
// if vehicleOK_list > 0 then
18668: LD_VAR 0 20
18672: PUSH
18673: LD_INT 0
18675: GREATER
18676: IFFALSE 18867
// begin for i in vehicleOK_list do
18678: LD_ADDR_VAR 0 13
18682: PUSH
18683: LD_VAR 0 20
18687: PUSH
18688: FOR_IN
18689: IFFALSE 18865
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18691: LD_ADDR_VAR 0 21
18695: PUSH
18696: LD_INT 22
18698: PUSH
18699: LD_VAR 0 11
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: PPUSH
18713: LD_VAR 0 13
18717: PPUSH
18718: CALL_OW 74
18722: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18723: LD_ADDR_VAR 0 22
18727: PUSH
18728: LD_INT 22
18730: PUSH
18731: LD_VAR 0 11
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 59
18745: PUSH
18746: EMPTY
18747: LIST
18748: PUSH
18749: LD_INT 21
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: PPUSH
18782: CALL_OW 69
18786: PPUSH
18787: LD_VAR 0 13
18791: PPUSH
18792: CALL_OW 74
18796: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18797: LD_VAR 0 13
18801: PPUSH
18802: LD_VAR 0 21
18806: PPUSH
18807: CALL_OW 296
18811: PUSH
18812: LD_INT 8
18814: PLUS
18815: PUSH
18816: LD_VAR 0 13
18820: PPUSH
18821: LD_VAR 0 22
18825: PPUSH
18826: CALL_OW 296
18830: LESS
18831: IFFALSE 18849
// begin ComAttackUnit ( i , target1 ) ;
18833: LD_VAR 0 13
18837: PPUSH
18838: LD_VAR 0 21
18842: PPUSH
18843: CALL_OW 115
// end else
18847: GO 18863
// begin ComAttackUnit ( i , target2 ) ;
18849: LD_VAR 0 13
18853: PPUSH
18854: LD_VAR 0 22
18858: PPUSH
18859: CALL_OW 115
// end ; end ;
18863: GO 18688
18865: POP
18866: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18867: LD_INT 22
18869: PUSH
18870: LD_VAR 0 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 21
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PPUSH
18893: CALL_OW 69
18897: PUSH
18898: LD_INT 0
18900: EQUAL
18901: IFFALSE 18614
// end ;
18903: LD_VAR 0 12
18907: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18908: LD_INT 0
18910: PPUSH
18911: PPUSH
18912: PPUSH
18913: PPUSH
18914: PPUSH
18915: PPUSH
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
18920: PPUSH
// for i = 1 to soldierCount do
18921: LD_ADDR_VAR 0 13
18925: PUSH
18926: DOUBLE
18927: LD_INT 1
18929: DEC
18930: ST_TO_ADDR
18931: LD_VAR 0 3
18935: PUSH
18936: FOR_TO
18937: IFFALSE 19019
// begin uc_side = side ;
18939: LD_ADDR_OWVAR 20
18943: PUSH
18944: LD_VAR 0 1
18948: ST_TO_ADDR
// uc_nation = nation ;
18949: LD_ADDR_OWVAR 21
18953: PUSH
18954: LD_VAR 0 2
18958: ST_TO_ADDR
// hc_name =  ;
18959: LD_ADDR_OWVAR 26
18963: PUSH
18964: LD_STRING 
18966: ST_TO_ADDR
// hc_gallery =  ;
18967: LD_ADDR_OWVAR 33
18971: PUSH
18972: LD_STRING 
18974: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18975: LD_INT 0
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: LD_VAR 0 8
18985: PPUSH
18986: CALL_OW 380
// un = CreateHuman ;
18990: LD_ADDR_VAR 0 15
18994: PUSH
18995: CALL_OW 44
18999: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19000: LD_VAR 0 15
19004: PPUSH
19005: LD_VAR 0 9
19009: PPUSH
19010: LD_INT 0
19012: PPUSH
19013: CALL_OW 49
// end ;
19017: GO 18936
19019: POP
19020: POP
// for i = 1 to sniperCount do
19021: LD_ADDR_VAR 0 13
19025: PUSH
19026: DOUBLE
19027: LD_INT 1
19029: DEC
19030: ST_TO_ADDR
19031: LD_VAR 0 4
19035: PUSH
19036: FOR_TO
19037: IFFALSE 19119
// begin uc_side = side ;
19039: LD_ADDR_OWVAR 20
19043: PUSH
19044: LD_VAR 0 1
19048: ST_TO_ADDR
// uc_nation = nation ;
19049: LD_ADDR_OWVAR 21
19053: PUSH
19054: LD_VAR 0 2
19058: ST_TO_ADDR
// hc_name =  ;
19059: LD_ADDR_OWVAR 26
19063: PUSH
19064: LD_STRING 
19066: ST_TO_ADDR
// hc_gallery =  ;
19067: LD_ADDR_OWVAR 33
19071: PUSH
19072: LD_STRING 
19074: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19075: LD_INT 0
19077: PPUSH
19078: LD_INT 5
19080: PPUSH
19081: LD_VAR 0 8
19085: PPUSH
19086: CALL_OW 380
// un = CreateHuman ;
19090: LD_ADDR_VAR 0 15
19094: PUSH
19095: CALL_OW 44
19099: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19100: LD_VAR 0 15
19104: PPUSH
19105: LD_VAR 0 9
19109: PPUSH
19110: LD_INT 0
19112: PPUSH
19113: CALL_OW 49
// end ;
19117: GO 19036
19119: POP
19120: POP
// for i = 1 to bazookCount do
19121: LD_ADDR_VAR 0 13
19125: PUSH
19126: DOUBLE
19127: LD_INT 1
19129: DEC
19130: ST_TO_ADDR
19131: LD_VAR 0 5
19135: PUSH
19136: FOR_TO
19137: IFFALSE 19219
// begin uc_side = side ;
19139: LD_ADDR_OWVAR 20
19143: PUSH
19144: LD_VAR 0 1
19148: ST_TO_ADDR
// uc_nation = nation ;
19149: LD_ADDR_OWVAR 21
19153: PUSH
19154: LD_VAR 0 2
19158: ST_TO_ADDR
// hc_name =  ;
19159: LD_ADDR_OWVAR 26
19163: PUSH
19164: LD_STRING 
19166: ST_TO_ADDR
// hc_gallery =  ;
19167: LD_ADDR_OWVAR 33
19171: PUSH
19172: LD_STRING 
19174: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19175: LD_INT 0
19177: PPUSH
19178: LD_INT 9
19180: PPUSH
19181: LD_VAR 0 8
19185: PPUSH
19186: CALL_OW 380
// un = CreateHuman ;
19190: LD_ADDR_VAR 0 15
19194: PUSH
19195: CALL_OW 44
19199: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19200: LD_VAR 0 15
19204: PPUSH
19205: LD_VAR 0 9
19209: PPUSH
19210: LD_INT 0
19212: PPUSH
19213: CALL_OW 49
// end ;
19217: GO 19136
19219: POP
19220: POP
// for i = 1 to mortalCount do
19221: LD_ADDR_VAR 0 13
19225: PUSH
19226: DOUBLE
19227: LD_INT 1
19229: DEC
19230: ST_TO_ADDR
19231: LD_VAR 0 6
19235: PUSH
19236: FOR_TO
19237: IFFALSE 19319
// begin uc_side = side ;
19239: LD_ADDR_OWVAR 20
19243: PUSH
19244: LD_VAR 0 1
19248: ST_TO_ADDR
// uc_nation = nation ;
19249: LD_ADDR_OWVAR 21
19253: PUSH
19254: LD_VAR 0 2
19258: ST_TO_ADDR
// hc_name =  ;
19259: LD_ADDR_OWVAR 26
19263: PUSH
19264: LD_STRING 
19266: ST_TO_ADDR
// hc_gallery =  ;
19267: LD_ADDR_OWVAR 33
19271: PUSH
19272: LD_STRING 
19274: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19275: LD_INT 0
19277: PPUSH
19278: LD_INT 8
19280: PPUSH
19281: LD_VAR 0 8
19285: PPUSH
19286: CALL_OW 380
// un = CreateHuman ;
19290: LD_ADDR_VAR 0 15
19294: PUSH
19295: CALL_OW 44
19299: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19300: LD_VAR 0 15
19304: PPUSH
19305: LD_VAR 0 9
19309: PPUSH
19310: LD_INT 0
19312: PPUSH
19313: CALL_OW 49
// end ;
19317: GO 19236
19319: POP
19320: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19321: LD_ADDR_VAR 0 18
19325: PUSH
19326: LD_INT 22
19328: PUSH
19329: LD_VAR 0 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 25
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 25
19353: PUSH
19354: LD_INT 5
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 25
19363: PUSH
19364: LD_INT 8
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: LD_INT 9
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PPUSH
19392: CALL_OW 69
19396: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19397: LD_ADDR_VAR 0 17
19401: PUSH
19402: LD_INT 22
19404: PUSH
19405: LD_VAR 0 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 25
19416: PUSH
19417: LD_INT 4
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PPUSH
19428: CALL_OW 69
19432: ST_TO_ADDR
// for i in medic_list do
19433: LD_ADDR_VAR 0 13
19437: PUSH
19438: LD_VAR 0 17
19442: PUSH
19443: FOR_IN
19444: IFFALSE 19462
// ComMoveToArea ( i , healArea ) ;
19446: LD_VAR 0 13
19450: PPUSH
19451: LD_VAR 0 10
19455: PPUSH
19456: CALL_OW 113
19460: GO 19443
19462: POP
19463: POP
// repeat wait ( 0 0$1 ) ;
19464: LD_INT 35
19466: PPUSH
19467: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19471: LD_ADDR_VAR 0 16
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_VAR 0 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: LD_INT 24
19496: PUSH
19497: LD_INT 550
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 24
19510: PUSH
19511: LD_INT 250
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 69
19531: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19532: LD_ADDR_VAR 0 18
19536: PUSH
19537: LD_INT 22
19539: PUSH
19540: LD_VAR 0 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 25
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 25
19564: PUSH
19565: LD_INT 5
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 25
19574: PUSH
19575: LD_INT 8
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 25
19584: PUSH
19585: LD_INT 9
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 24
19601: PUSH
19602: LD_INT 1000
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 69
19618: ST_TO_ADDR
// if medicCount > 0 then
19619: LD_VAR 0 7
19623: PUSH
19624: LD_INT 0
19626: GREATER
19627: IFFALSE 19701
// begin if damageUnit_list > 0 then
19629: LD_VAR 0 16
19633: PUSH
19634: LD_INT 0
19636: GREATER
19637: IFFALSE 19701
// begin for i in damageUnit_list do
19639: LD_ADDR_VAR 0 13
19643: PUSH
19644: LD_VAR 0 16
19648: PUSH
19649: FOR_IN
19650: IFFALSE 19699
// begin ComMoveToArea ( i , healArea ) ;
19652: LD_VAR 0 13
19656: PPUSH
19657: LD_VAR 0 10
19661: PPUSH
19662: CALL_OW 113
// for j in medic_list do
19666: LD_ADDR_VAR 0 14
19670: PUSH
19671: LD_VAR 0 17
19675: PUSH
19676: FOR_IN
19677: IFFALSE 19695
// AddComHeal ( j , i ) ;
19679: LD_VAR 0 14
19683: PPUSH
19684: LD_VAR 0 13
19688: PPUSH
19689: CALL_OW 188
19693: GO 19676
19695: POP
19696: POP
// end ;
19697: GO 19649
19699: POP
19700: POP
// end ; end ; for i in soldiersOK_list do
19701: LD_ADDR_VAR 0 13
19705: PUSH
19706: LD_VAR 0 18
19710: PUSH
19711: FOR_IN
19712: IFFALSE 19888
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19714: LD_ADDR_VAR 0 21
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_VAR 0 11
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PPUSH
19736: LD_VAR 0 13
19740: PPUSH
19741: CALL_OW 74
19745: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19746: LD_ADDR_VAR 0 22
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_VAR 0 11
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 59
19768: PUSH
19769: EMPTY
19770: LIST
19771: PUSH
19772: LD_INT 21
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 21
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: PPUSH
19805: CALL_OW 69
19809: PPUSH
19810: LD_VAR 0 13
19814: PPUSH
19815: CALL_OW 74
19819: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19820: LD_VAR 0 13
19824: PPUSH
19825: LD_VAR 0 21
19829: PPUSH
19830: CALL_OW 296
19834: PUSH
19835: LD_INT 8
19837: PLUS
19838: PUSH
19839: LD_VAR 0 13
19843: PPUSH
19844: LD_VAR 0 22
19848: PPUSH
19849: CALL_OW 296
19853: LESS
19854: IFFALSE 19872
// begin ComAttackUnit ( i , target1 ) ;
19856: LD_VAR 0 13
19860: PPUSH
19861: LD_VAR 0 21
19865: PPUSH
19866: CALL_OW 115
// end else
19870: GO 19886
// begin ComAttackUnit ( i , target2 ) ;
19872: LD_VAR 0 13
19876: PPUSH
19877: LD_VAR 0 22
19881: PPUSH
19882: CALL_OW 115
// end ; end ;
19886: GO 19711
19888: POP
19889: POP
// for i in soldiersOK_list do
19890: LD_ADDR_VAR 0 13
19894: PUSH
19895: LD_VAR 0 18
19899: PUSH
19900: FOR_IN
19901: IFFALSE 20077
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19903: LD_ADDR_VAR 0 21
19907: PUSH
19908: LD_INT 22
19910: PUSH
19911: LD_VAR 0 11
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PPUSH
19920: CALL_OW 69
19924: PPUSH
19925: LD_VAR 0 13
19929: PPUSH
19930: CALL_OW 74
19934: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19935: LD_ADDR_VAR 0 22
19939: PUSH
19940: LD_INT 22
19942: PUSH
19943: LD_VAR 0 11
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: LD_INT 59
19957: PUSH
19958: EMPTY
19959: LIST
19960: PUSH
19961: LD_INT 21
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 21
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: EMPTY
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: PPUSH
19999: LD_VAR 0 13
20003: PPUSH
20004: CALL_OW 74
20008: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20009: LD_VAR 0 13
20013: PPUSH
20014: LD_VAR 0 21
20018: PPUSH
20019: CALL_OW 296
20023: PUSH
20024: LD_INT 8
20026: PLUS
20027: PUSH
20028: LD_VAR 0 13
20032: PPUSH
20033: LD_VAR 0 22
20037: PPUSH
20038: CALL_OW 296
20042: LESS
20043: IFFALSE 20061
// begin ComAttackUnit ( i , target1 ) ;
20045: LD_VAR 0 13
20049: PPUSH
20050: LD_VAR 0 21
20054: PPUSH
20055: CALL_OW 115
// end else
20059: GO 20075
// begin ComAttackUnit ( i , target2 ) ;
20061: LD_VAR 0 13
20065: PPUSH
20066: LD_VAR 0 22
20070: PPUSH
20071: CALL_OW 115
// end ; end ;
20075: GO 19900
20077: POP
20078: POP
// until soldiersOK_list = [ ] ;
20079: LD_VAR 0 18
20083: PUSH
20084: EMPTY
20085: EQUAL
20086: IFFALSE 19464
// end ;
20088: LD_VAR 0 12
20092: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20093: LD_INT 0
20095: PPUSH
20096: PPUSH
20097: PPUSH
20098: PPUSH
20099: PPUSH
20100: PPUSH
20101: PPUSH
// repeat wait ( 0 0$1 ) ;
20102: LD_INT 35
20104: PPUSH
20105: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20109: LD_ADDR_VAR 0 7
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 25
20126: PUSH
20127: LD_INT 4
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: LD_INT 60
20139: PUSH
20140: EMPTY
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: PPUSH
20152: CALL_OW 69
20156: ST_TO_ADDR
// if not tmp then
20157: LD_VAR 0 7
20161: NOT
20162: IFFALSE 20166
// continue ;
20164: GO 20102
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_INT 5
20173: PPUSH
20174: LD_INT 22
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 25
20186: PUSH
20187: LD_INT 12
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PPUSH
20198: CALL_OW 70
20202: PUSH
20203: FOR_IN
20204: IFFALSE 20237
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20206: LD_VAR 0 7
20210: PPUSH
20211: LD_VAR 0 3
20215: PPUSH
20216: CALL_OW 250
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: CALL_OW 251
20230: PPUSH
20231: CALL_OW 131
20235: GO 20203
20237: POP
20238: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20239: LD_INT 22
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 25
20251: PUSH
20252: LD_INT 4
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: PUSH
20268: LD_INT 0
20270: EQUAL
20271: PUSH
20272: LD_INT 5
20274: PPUSH
20275: LD_INT 22
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 25
20287: PUSH
20288: LD_INT 12
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PPUSH
20299: CALL_OW 70
20303: PUSH
20304: LD_INT 2
20306: LESS
20307: OR
20308: PUSH
20309: LD_OWVAR 1
20313: PUSH
20314: LD_INT 7000
20316: GREATEREQUAL
20317: OR
20318: IFFALSE 20102
// repeat wait ( 0 0$1 ) ;
20320: LD_INT 35
20322: PPUSH
20323: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20327: LD_ADDR_VAR 0 5
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 30
20344: PUSH
20345: LD_INT 5
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PPUSH
20356: CALL_OW 69
20360: ST_TO_ADDR
// until arm ;
20361: LD_VAR 0 5
20365: IFFALSE 20320
// wait ( 0 0$25 ) ;
20367: LD_INT 875
20369: PPUSH
20370: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20374: LD_ADDR_VAR 0 6
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 2
20391: PUSH
20392: LD_INT 30
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 30
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PPUSH
20421: CALL_OW 69
20425: ST_TO_ADDR
// j := 0 ;
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20434: LD_ADDR_VAR 0 2
20438: PUSH
20439: LD_INT 22
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 25
20451: PUSH
20452: LD_INT 12
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: PUSH
20468: FOR_IN
20469: IFFALSE 20556
// begin ComMoveXY ( i , 63 , 16 ) ;
20471: LD_VAR 0 2
20475: PPUSH
20476: LD_INT 63
20478: PPUSH
20479: LD_INT 16
20481: PPUSH
20482: CALL_OW 111
// j := j + 1 ;
20486: LD_ADDR_VAR 0 3
20490: PUSH
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 1
20498: PLUS
20499: ST_TO_ADDR
// if j < 5 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 5
20507: LESS
20508: IFFALSE 20526
// b := arm [ 1 ] else
20510: LD_ADDR_VAR 0 4
20514: PUSH
20515: LD_VAR 0 5
20519: PUSH
20520: LD_INT 1
20522: ARRAY
20523: ST_TO_ADDR
20524: GO 20540
// b := dep [ 1 ] ;
20526: LD_ADDR_VAR 0 4
20530: PUSH
20531: LD_VAR 0 6
20535: PUSH
20536: LD_INT 1
20538: ARRAY
20539: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20540: LD_VAR 0 2
20544: PPUSH
20545: LD_VAR 0 4
20549: PPUSH
20550: CALL_OW 180
// end ;
20554: GO 20468
20556: POP
20557: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20558: LD_ADDR_VAR 0 2
20562: PUSH
20563: LD_INT 22
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 25
20575: PUSH
20576: LD_INT 4
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PPUSH
20587: CALL_OW 69
20591: PUSH
20592: FOR_IN
20593: IFFALSE 20639
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20595: LD_VAR 0 2
20599: PPUSH
20600: LD_INT 22
20602: PUSH
20603: LD_INT 2
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 30
20612: PUSH
20613: LD_INT 8
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PPUSH
20624: CALL_OW 69
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: PPUSH
20633: CALL_OW 120
20637: GO 20592
20639: POP
20640: POP
// end ;
20641: LD_VAR 0 1
20645: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20646: LD_INT 0
20648: PPUSH
20649: PPUSH
20650: PPUSH
20651: PPUSH
20652: PPUSH
20653: PPUSH
20654: PPUSH
20655: PPUSH
20656: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20657: LD_INT 22
20659: PUSH
20660: LD_VAR 0 1
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 69
20687: PUSH
20688: LD_VAR 0 3
20692: LESSEQUAL
20693: IFFALSE 20837
// for i = 1 to vehCount do
20695: LD_ADDR_VAR 0 10
20699: PUSH
20700: DOUBLE
20701: LD_INT 1
20703: DEC
20704: ST_TO_ADDR
20705: LD_VAR 0 3
20709: PUSH
20710: FOR_TO
20711: IFFALSE 20835
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20713: LD_ADDR_VAR 0 12
20717: PUSH
20718: LD_VAR 0 5
20722: PUSH
20723: LD_INT 1
20725: PPUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: CALL_OW 12
20735: ARRAY
20736: ST_TO_ADDR
// if randWeapon = 46 then
20737: LD_VAR 0 12
20741: PUSH
20742: LD_INT 46
20744: EQUAL
20745: IFFALSE 20790
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20747: LD_VAR 0 2
20751: PPUSH
20752: LD_INT 24
20754: PPUSH
20755: LD_VAR 0 6
20759: PPUSH
20760: LD_VAR 0 7
20764: PUSH
20765: LD_INT 1
20767: PPUSH
20768: LD_VAR 0 7
20772: PPUSH
20773: CALL_OW 12
20777: ARRAY
20778: PPUSH
20779: LD_VAR 0 12
20783: PPUSH
20784: CALL_OW 185
20788: GO 20833
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_VAR 0 8
20799: PPUSH
20800: LD_VAR 0 6
20804: PPUSH
20805: LD_VAR 0 7
20809: PUSH
20810: LD_INT 1
20812: PPUSH
20813: LD_VAR 0 7
20817: PPUSH
20818: CALL_OW 12
20822: ARRAY
20823: PPUSH
20824: LD_VAR 0 12
20828: PPUSH
20829: CALL_OW 185
// end ;
20833: GO 20710
20835: POP
20836: POP
// repeat wait ( 0 0$1 ) ;
20837: LD_INT 35
20839: PPUSH
20840: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20844: LD_INT 22
20846: PUSH
20847: LD_VAR 0 1
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 21
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 24
20868: PUSH
20869: LD_INT 250
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: PPUSH
20881: CALL_OW 69
20885: PUSH
20886: LD_VAR 0 3
20890: GREATEREQUAL
20891: IFFALSE 20837
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20893: LD_INT 22
20895: PUSH
20896: LD_VAR 0 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 21
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 24
20917: PUSH
20918: LD_INT 250
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: PPUSH
20930: CALL_OW 69
20934: PUSH
20935: LD_VAR 0 3
20939: GREATEREQUAL
20940: IFFALSE 21283
// begin repeat begin wait ( 0 0$1 ) ;
20942: LD_INT 35
20944: PPUSH
20945: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20949: LD_INT 22
20951: PUSH
20952: LD_VAR 0 1
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 21
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 24
20973: PUSH
20974: LD_INT 651
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: PPUSH
20986: CALL_OW 69
20990: PUSH
20991: LD_INT 0
20993: GREATER
20994: IFFALSE 21222
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20996: LD_ADDR_VAR 0 10
21000: PUSH
21001: LD_INT 22
21003: PUSH
21004: LD_VAR 0 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 21
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 24
21025: PUSH
21026: LD_INT 651
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: PPUSH
21038: CALL_OW 69
21042: PUSH
21043: FOR_IN
21044: IFFALSE 21220
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21046: LD_ADDR_VAR 0 16
21050: PUSH
21051: LD_INT 22
21053: PUSH
21054: LD_VAR 0 4
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: PPUSH
21068: LD_VAR 0 10
21072: PPUSH
21073: CALL_OW 74
21077: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21078: LD_ADDR_VAR 0 17
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_VAR 0 4
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 59
21100: PUSH
21101: EMPTY
21102: LIST
21103: PUSH
21104: LD_INT 21
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 21
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: PPUSH
21137: CALL_OW 69
21141: PPUSH
21142: LD_VAR 0 10
21146: PPUSH
21147: CALL_OW 74
21151: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21152: LD_VAR 0 10
21156: PPUSH
21157: LD_VAR 0 16
21161: PPUSH
21162: CALL_OW 296
21166: PUSH
21167: LD_INT 8
21169: PLUS
21170: PUSH
21171: LD_VAR 0 10
21175: PPUSH
21176: LD_VAR 0 17
21180: PPUSH
21181: CALL_OW 296
21185: LESS
21186: IFFALSE 21204
// begin ComAttackUnit ( i , target1 ) ;
21188: LD_VAR 0 10
21192: PPUSH
21193: LD_VAR 0 16
21197: PPUSH
21198: CALL_OW 115
// end else
21202: GO 21218
// begin ComAttackUnit ( i , target2 ) ;
21204: LD_VAR 0 10
21208: PPUSH
21209: LD_VAR 0 17
21213: PPUSH
21214: CALL_OW 115
// end ; end ;
21218: GO 21043
21220: POP
21221: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21222: LD_INT 22
21224: PUSH
21225: LD_VAR 0 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 21
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: PUSH
21253: LD_INT 0
21255: EQUAL
21256: PUSH
21257: LD_INT 22
21259: PUSH
21260: LD_VAR 0 4
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: PPUSH
21272: CALL_OW 69
21276: PUSH
21277: LD_INT 0
21279: EQUAL
21280: OR
21281: IFFALSE 20942
// end ; end ;
21283: LD_VAR 0 9
21287: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21288: LD_INT 0
21290: PPUSH
21291: PPUSH
21292: PPUSH
21293: PPUSH
// r := 100 ;
21294: LD_ADDR_VAR 0 5
21298: PUSH
21299: LD_INT 100
21301: ST_TO_ADDR
// x := 0 ;
21302: LD_ADDR_VAR 0 6
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// while ( x < n ) do
21310: LD_VAR 0 6
21314: PUSH
21315: LD_VAR 0 2
21319: LESS
21320: IFFALSE 21607
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21322: LD_ADDR_VAR 0 4
21326: PUSH
21327: DOUBLE
21328: LD_INT 1
21330: DEC
21331: ST_TO_ADDR
21332: LD_VAR 0 1
21336: PPUSH
21337: LD_INT 0
21339: PPUSH
21340: CALL_OW 517
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PUSH
21349: FOR_TO
21350: IFFALSE 21603
// begin if r > 50 then
21352: LD_VAR 0 5
21356: PUSH
21357: LD_INT 50
21359: GREATER
21360: IFFALSE 21579
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21362: LD_VAR 0 1
21366: PPUSH
21367: LD_INT 0
21369: PPUSH
21370: CALL_OW 517
21374: PUSH
21375: LD_INT 1
21377: ARRAY
21378: PUSH
21379: LD_VAR 0 4
21383: ARRAY
21384: PPUSH
21385: LD_VAR 0 1
21389: PPUSH
21390: LD_INT 0
21392: PPUSH
21393: CALL_OW 517
21397: PUSH
21398: LD_INT 2
21400: ARRAY
21401: PUSH
21402: LD_VAR 0 4
21406: ARRAY
21407: PPUSH
21408: CALL_OW 458
21412: NOT
21413: IFFALSE 21563
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21415: LD_VAR 0 1
21419: PPUSH
21420: LD_INT 0
21422: PPUSH
21423: CALL_OW 517
21427: PUSH
21428: LD_INT 1
21430: ARRAY
21431: PUSH
21432: LD_VAR 0 4
21436: ARRAY
21437: PPUSH
21438: LD_VAR 0 1
21442: PPUSH
21443: LD_INT 0
21445: PPUSH
21446: CALL_OW 517
21450: PUSH
21451: LD_INT 2
21453: ARRAY
21454: PUSH
21455: LD_VAR 0 4
21459: ARRAY
21460: PPUSH
21461: LD_INT 5
21463: PPUSH
21464: LD_INT 0
21466: PPUSH
21467: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21471: LD_ADDR_EXP 50
21475: PUSH
21476: LD_EXP 50
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: LD_INT 0
21491: PPUSH
21492: CALL_OW 517
21496: PUSH
21497: LD_INT 1
21499: ARRAY
21500: PUSH
21501: LD_VAR 0 4
21505: ARRAY
21506: PUSH
21507: LD_VAR 0 1
21511: PPUSH
21512: LD_INT 0
21514: PPUSH
21515: CALL_OW 517
21519: PUSH
21520: LD_INT 2
21522: ARRAY
21523: PUSH
21524: LD_VAR 0 4
21528: ARRAY
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PPUSH
21534: CALL_OW 2
21538: ST_TO_ADDR
// r := 0 ;
21539: LD_ADDR_VAR 0 5
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// x := x + 1 ;
21547: LD_ADDR_VAR 0 6
21551: PUSH
21552: LD_VAR 0 6
21556: PUSH
21557: LD_INT 1
21559: PLUS
21560: ST_TO_ADDR
// end else
21561: GO 21577
// r := r + 35 ;
21563: LD_ADDR_VAR 0 5
21567: PUSH
21568: LD_VAR 0 5
21572: PUSH
21573: LD_INT 35
21575: PLUS
21576: ST_TO_ADDR
// end else
21577: GO 21601
// r := r + rand ( 10 , 25 ) ;
21579: LD_ADDR_VAR 0 5
21583: PUSH
21584: LD_VAR 0 5
21588: PUSH
21589: LD_INT 10
21591: PPUSH
21592: LD_INT 25
21594: PPUSH
21595: CALL_OW 12
21599: PLUS
21600: ST_TO_ADDR
// end ;
21601: GO 21349
21603: POP
21604: POP
21605: GO 21310
// end ; end_of_file
21607: LD_VAR 0 3
21611: RET
// every 0 0$1 trigger russianAI = 1 do
21612: LD_EXP 39
21616: PUSH
21617: LD_INT 1
21619: EQUAL
21620: IFFALSE 21839
21622: GO 21624
21624: DISABLE
// begin enable ;
21625: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21626: LD_INT 3
21628: PPUSH
21629: LD_EXP 30
21633: PPUSH
21634: CALL 16090 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21638: LD_INT 3
21640: PPUSH
21641: LD_EXP 42
21645: PPUSH
21646: CALL 16450 0 2
// if ruPossition = 1 then
21650: LD_EXP 41
21654: PUSH
21655: LD_INT 1
21657: EQUAL
21658: IFFALSE 21713
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21660: LD_INT 3
21662: PPUSH
21663: LD_INT 13
21665: PPUSH
21666: LD_INT 10
21668: PPUSH
21669: LD_INT 22
21671: PUSH
21672: LD_INT 3
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 21
21681: PUSH
21682: LD_INT 3
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 8
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: PPUSH
21704: CALL_OW 69
21708: PPUSH
21709: CALL 16656 0 4
// if ruPossition = 2 then
21713: LD_EXP 41
21717: PUSH
21718: LD_INT 2
21720: EQUAL
21721: IFFALSE 21776
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21723: LD_INT 3
21725: PPUSH
21726: LD_INT 14
21728: PPUSH
21729: LD_INT 11
21731: PPUSH
21732: LD_INT 22
21734: PUSH
21735: LD_INT 3
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: LD_INT 3
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 30
21754: PUSH
21755: LD_INT 8
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: PPUSH
21767: CALL_OW 69
21771: PPUSH
21772: CALL 16656 0 4
// if ruPossition = 3 then
21776: LD_EXP 41
21780: PUSH
21781: LD_INT 3
21783: EQUAL
21784: IFFALSE 21839
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21786: LD_INT 3
21788: PPUSH
21789: LD_INT 15
21791: PPUSH
21792: LD_INT 12
21794: PPUSH
21795: LD_INT 22
21797: PUSH
21798: LD_INT 3
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 21
21807: PUSH
21808: LD_INT 3
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 8
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PPUSH
21830: CALL_OW 69
21834: PPUSH
21835: CALL 16656 0 4
// end ;
21839: END
// every 0 0$1 do
21840: GO 21842
21842: DISABLE
// begin enable ;
21843: ENABLE
// if ruPossition = 1 then
21844: LD_EXP 41
21848: PUSH
21849: LD_INT 1
21851: EQUAL
21852: IFFALSE 21864
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21854: LD_INT 3
21856: PPUSH
21857: LD_INT 10
21859: PPUSH
21860: CALL 15727 0 2
// if ruPossition = 2 then
21864: LD_EXP 41
21868: PUSH
21869: LD_INT 2
21871: EQUAL
21872: IFFALSE 21884
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21874: LD_INT 3
21876: PPUSH
21877: LD_INT 11
21879: PPUSH
21880: CALL 15727 0 2
// if ruPossition = 3 then
21884: LD_EXP 41
21888: PUSH
21889: LD_INT 3
21891: EQUAL
21892: IFFALSE 21904
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21894: LD_INT 3
21896: PPUSH
21897: LD_INT 12
21899: PPUSH
21900: CALL 15727 0 2
// IntBazooka ( 3 , 1 ) ;
21904: LD_INT 3
21906: PPUSH
21907: LD_INT 1
21909: PPUSH
21910: CALL 14526 0 2
// IntBazooka ( 6 , 1 ) ;
21914: LD_INT 6
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: CALL 14526 0 2
// end ;
21924: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21925: LD_EXP 39
21929: PUSH
21930: LD_INT 1
21932: EQUAL
21933: PUSH
21934: LD_EXP 35
21938: PPUSH
21939: CALL_OW 302
21943: AND
21944: PUSH
21945: LD_EXP 35
21949: PPUSH
21950: CALL_OW 255
21954: PUSH
21955: LD_INT 3
21957: EQUAL
21958: AND
21959: PUSH
21960: LD_INT 22
21962: PUSH
21963: LD_INT 3
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 21
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 33
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL_OW 69
21999: PUSH
22000: LD_INT 0
22002: EQUAL
22003: AND
22004: IFFALSE 22212
22006: GO 22008
22008: DISABLE
// begin enable ;
22009: ENABLE
// if Difficulty = 1 then
22010: LD_OWVAR 67
22014: PUSH
22015: LD_INT 1
22017: EQUAL
22018: IFFALSE 22080
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22020: LD_INT 3
22022: PPUSH
22023: LD_EXP 35
22027: PPUSH
22028: LD_INT 5
22030: PPUSH
22031: LD_INT 8
22033: PPUSH
22034: CALL_OW 12
22038: PPUSH
22039: LD_INT 1
22041: PPUSH
22042: LD_INT 43
22044: PUSH
22045: LD_INT 44
22047: PUSH
22048: LD_INT 45
22050: PUSH
22051: LD_INT 46
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PPUSH
22060: LD_INT 1
22062: PPUSH
22063: LD_INT 3
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PPUSH
22073: LD_INT 22
22075: PPUSH
22076: CALL 20646 0 8
// if Difficulty = 2 then
22080: LD_OWVAR 67
22084: PUSH
22085: LD_INT 2
22087: EQUAL
22088: IFFALSE 22146
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22090: LD_INT 3
22092: PPUSH
22093: LD_EXP 35
22097: PPUSH
22098: LD_INT 6
22100: PPUSH
22101: LD_INT 8
22103: PPUSH
22104: CALL_OW 12
22108: PPUSH
22109: LD_INT 1
22111: PPUSH
22112: LD_INT 44
22114: PUSH
22115: LD_INT 45
22117: PUSH
22118: LD_INT 46
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: PPUSH
22126: LD_INT 1
22128: PPUSH
22129: LD_INT 3
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PPUSH
22139: LD_INT 22
22141: PPUSH
22142: CALL 20646 0 8
// if Difficulty = 3 then
22146: LD_OWVAR 67
22150: PUSH
22151: LD_INT 3
22153: EQUAL
22154: IFFALSE 22212
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22156: LD_INT 3
22158: PPUSH
22159: LD_EXP 35
22163: PPUSH
22164: LD_INT 7
22166: PPUSH
22167: LD_INT 8
22169: PPUSH
22170: CALL_OW 12
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: LD_INT 44
22180: PUSH
22181: LD_INT 45
22183: PUSH
22184: LD_INT 46
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: LD_INT 3
22197: PUSH
22198: LD_INT 3
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PPUSH
22205: LD_INT 22
22207: PPUSH
22208: CALL 20646 0 8
// end ;
22212: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22213: LD_EXP 50
22217: PUSH
22218: LD_EXP 49
22222: AND
22223: IFFALSE 22344
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
// begin enable ;
22231: ENABLE
// for i in arabianMines do
22232: LD_ADDR_VAR 0 1
22236: PUSH
22237: LD_EXP 50
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22342
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22245: LD_INT 22
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 92
22257: PUSH
22258: LD_VAR 0 1
22262: PUSH
22263: LD_INT 1
22265: ARRAY
22266: PUSH
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 2
22274: ARRAY
22275: PUSH
22276: LD_INT 3
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: IFFALSE 22340
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22295: LD_VAR 0 1
22299: PUSH
22300: LD_INT 1
22302: ARRAY
22303: PPUSH
22304: LD_VAR 0 1
22308: PUSH
22309: LD_INT 2
22311: ARRAY
22312: PPUSH
22313: LD_INT 5
22315: PPUSH
22316: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22320: LD_ADDR_EXP 50
22324: PUSH
22325: LD_EXP 50
22329: PPUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: CALL_OW 3
22339: ST_TO_ADDR
// end ; end ;
22340: GO 22242
22342: POP
22343: POP
// end ; end_of_file
22344: PPOPN 1
22346: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 255
22356: PUSH
22357: LD_INT 4
22359: EQUAL
22360: IFFALSE 22374
// SetBName ( building , epsilon ) ;
22362: LD_VAR 0 1
22366: PPUSH
22367: LD_STRING epsilon
22369: PPUSH
22370: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 255
22383: PUSH
22384: LD_INT 1
22386: EQUAL
22387: PUSH
22388: LD_VAR 0 1
22392: PPUSH
22393: CALL_OW 266
22397: PUSH
22398: LD_INT 0
22400: EQUAL
22401: AND
22402: IFFALSE 22416
// SetBName ( building , epsilon ) ;
22404: LD_VAR 0 1
22408: PPUSH
22409: LD_STRING epsilon
22411: PPUSH
22412: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL_OW 255
22425: PUSH
22426: LD_INT 3
22428: EQUAL
22429: PUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL_OW 266
22439: PUSH
22440: LD_INT 0
22442: EQUAL
22443: AND
22444: IFFALSE 22458
// SetBName ( building , chuikov ) ;
22446: LD_VAR 0 1
22450: PPUSH
22451: LD_STRING chuikov
22453: PPUSH
22454: CALL_OW 500
// if GetSide ( building ) = 2 then
22458: LD_VAR 0 1
22462: PPUSH
22463: CALL_OW 255
22467: PUSH
22468: LD_INT 2
22470: EQUAL
22471: IFFALSE 22527
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22473: LD_VAR 0 1
22477: PPUSH
22478: CALL_OW 266
22482: PUSH
22483: LD_INT 6
22485: EQUAL
22486: PUSH
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 266
22496: PUSH
22497: LD_INT 9
22499: EQUAL
22500: OR
22501: IFFALSE 22527
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22503: LD_VAR 0 1
22507: PPUSH
22508: LD_INT 10
22510: PPUSH
22511: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22515: LD_VAR 0 1
22519: PPUSH
22520: LD_INT 11
22522: PPUSH
22523: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22527: LD_VAR 0 1
22531: PPUSH
22532: CALL_OW 255
22536: PUSH
22537: LD_INT 3
22539: EQUAL
22540: IFFALSE 22574
// begin ruDepotConstructed := true ;
22542: LD_ADDR_EXP 57
22546: PUSH
22547: LD_INT 1
22549: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL_OW 266
22559: PUSH
22560: LD_INT 2
22562: EQUAL
22563: IFFALSE 22574
// AddComUpgrade ( building ) ;
22565: LD_VAR 0 1
22569: PPUSH
22570: CALL_OW 206
// end ; end ;
22574: PPOPN 2
22576: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22577: LD_INT 0
22579: PPUSH
22580: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22581: LD_VAR 0 1
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 23
22598: PUSH
22599: LD_INT 3
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 21
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: PPUSH
22621: CALL_OW 69
22625: IN
22626: PUSH
22627: LD_EXP 61
22631: NOT
22632: AND
22633: IFFALSE 22664
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22635: LD_ADDR_EXP 61
22639: PUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: CALL_OW 250
22649: PUSH
22650: LD_VAR 0 1
22654: PPUSH
22655: CALL_OW 251
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: ST_TO_ADDR
// end ;
22664: PPOPN 3
22666: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22667: LD_VAR 0 2
22671: PPUSH
22672: CALL_OW 255
22676: PUSH
22677: LD_INT 3
22679: EQUAL
22680: PUSH
22681: LD_EXP 35
22685: PPUSH
22686: CALL_OW 255
22690: PUSH
22691: LD_INT 3
22693: EQUAL
22694: AND
22695: PUSH
22696: LD_EXP 35
22700: PPUSH
22701: CALL_OW 302
22705: AND
22706: IFFALSE 22722
// ComEnterUnit ( human , ruFab ) ;
22708: LD_VAR 0 2
22712: PPUSH
22713: LD_EXP 35
22717: PPUSH
22718: CALL_OW 120
// end ;
22722: PPOPN 2
22724: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22725: LD_INT 0
22727: PPUSH
22728: PPUSH
22729: PPUSH
22730: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 255
22740: PUSH
22741: LD_INT 1
22743: EQUAL
22744: PUSH
22745: LD_EXP 65
22749: PUSH
22750: LD_INT 0
22752: EQUAL
22753: AND
22754: IFFALSE 22956
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22756: LD_VAR 0 1
22760: PPUSH
22761: CALL_OW 266
22765: PUSH
22766: LD_INT 26
22768: EQUAL
22769: PUSH
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 266
22779: PUSH
22780: LD_INT 27
22782: EQUAL
22783: OR
22784: PUSH
22785: LD_VAR 0 1
22789: PPUSH
22790: CALL_OW 266
22794: PUSH
22795: LD_INT 28
22797: EQUAL
22798: OR
22799: IFFALSE 22956
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22801: LD_INT 22
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 30
22816: PUSH
22817: LD_INT 7
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 8
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: PUSH
22848: LD_INT 0
22850: GREATER
22851: IFFALSE 22956
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22853: LD_ADDR_VAR 0 2
22857: PUSH
22858: LD_INT 22
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 30
22873: PUSH
22874: LD_INT 7
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 8
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PPUSH
22900: CALL_OW 69
22904: PUSH
22905: FOR_IN
22906: IFFALSE 22954
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22908: LD_VAR 0 2
22912: PPUSH
22913: LD_INT 1
22915: PPUSH
22916: CALL_OW 268
22920: PUSH
22921: LD_INT 11
22923: EQUAL
22924: PUSH
22925: LD_VAR 0 2
22929: PPUSH
22930: LD_INT 2
22932: PPUSH
22933: CALL_OW 268
22937: PUSH
22938: LD_INT 11
22940: EQUAL
22941: OR
22942: IFFALSE 22952
// eventVar1 = 1 ;
22944: LD_ADDR_EXP 65
22948: PUSH
22949: LD_INT 1
22951: ST_TO_ADDR
22952: GO 22905
22954: POP
22955: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 255
22965: PUSH
22966: LD_INT 3
22968: EQUAL
22969: IFFALSE 23449
// begin if GetBType ( building ) = b_depot then
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 266
22980: PUSH
22981: LD_INT 0
22983: EQUAL
22984: IFFALSE 23056
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 274
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: LD_INT 5000
23001: PPUSH
23002: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 274
23015: PPUSH
23016: LD_INT 2
23018: PPUSH
23019: LD_INT 300
23021: PPUSH
23022: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 274
23035: PPUSH
23036: LD_INT 3
23038: PPUSH
23039: LD_INT 100
23041: PPUSH
23042: CALL_OW 277
// ruDepot = building ;
23046: LD_ADDR_EXP 30
23050: PUSH
23051: LD_VAR 0 1
23055: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23056: LD_VAR 0 1
23060: PPUSH
23061: CALL_OW 266
23065: PUSH
23066: LD_INT 0
23068: EQUAL
23069: PUSH
23070: LD_VAR 0 1
23074: PPUSH
23075: CALL_OW 266
23079: PUSH
23080: LD_INT 2
23082: EQUAL
23083: OR
23084: PUSH
23085: LD_VAR 0 1
23089: PPUSH
23090: CALL_OW 266
23094: PUSH
23095: LD_INT 4
23097: EQUAL
23098: OR
23099: IFFALSE 23110
// ComUpgrade ( building ) ;
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 146
// if GetBType ( building ) = b_lab then
23110: LD_VAR 0 1
23114: PPUSH
23115: CALL_OW 266
23119: PUSH
23120: LD_INT 6
23122: EQUAL
23123: IFFALSE 23326
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23125: LD_INT 22
23127: PUSH
23128: LD_INT 3
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 30
23137: PUSH
23138: LD_INT 8
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PPUSH
23149: CALL_OW 69
23153: PUSH
23154: LD_INT 0
23156: EQUAL
23157: IFFALSE 23195
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23159: LD_VAR 0 1
23163: PPUSH
23164: LD_INT 10
23166: PPUSH
23167: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_INT 12
23178: PPUSH
23179: CALL_OW 207
// ruLab1 = building ;
23183: LD_ADDR_EXP 31
23187: PUSH
23188: LD_VAR 0 1
23192: ST_TO_ADDR
// end else
23193: GO 23229
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23195: LD_VAR 0 1
23199: PPUSH
23200: LD_INT 11
23202: PPUSH
23203: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23207: LD_VAR 0 1
23211: PPUSH
23212: LD_INT 14
23214: PPUSH
23215: CALL_OW 207
// ruLab2 = building ;
23219: LD_ADDR_EXP 32
23223: PUSH
23224: LD_VAR 0 1
23228: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23229: LD_INT 3
23231: PPUSH
23232: LD_VAR 0 1
23236: PPUSH
23237: LD_INT 3
23239: PPUSH
23240: CALL 15642 0 3
// if ruDestroyedBuildings > 0 then
23244: LD_EXP 42
23248: PUSH
23249: LD_INT 0
23251: GREATER
23252: IFFALSE 23326
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23254: LD_ADDR_EXP 42
23258: PUSH
23259: LD_EXP 42
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 3
23271: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23272: LD_ADDR_EXP 42
23276: PUSH
23277: LD_EXP 42
23281: PPUSH
23282: LD_INT 1
23284: PPUSH
23285: CALL_OW 3
23289: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23290: LD_ADDR_EXP 42
23294: PUSH
23295: LD_EXP 42
23299: PPUSH
23300: LD_INT 1
23302: PPUSH
23303: CALL_OW 3
23307: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23308: LD_ADDR_EXP 42
23312: PUSH
23313: LD_EXP 42
23317: PPUSH
23318: LD_INT 1
23320: PPUSH
23321: CALL_OW 3
23325: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 266
23335: PUSH
23336: LD_INT 32
23338: EQUAL
23339: IFFALSE 23376
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23341: LD_VAR 0 1
23345: PPUSH
23346: LD_INT 44
23348: PUSH
23349: LD_INT 45
23351: PUSH
23352: LD_INT 46
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: PPUSH
23363: LD_INT 3
23365: PPUSH
23366: CALL_OW 12
23370: ARRAY
23371: PPUSH
23372: CALL_OW 208
// if GetBType ( building ) = b_turret then
23376: LD_VAR 0 1
23380: PPUSH
23381: CALL_OW 266
23385: PUSH
23386: LD_INT 33
23388: EQUAL
23389: IFFALSE 23426
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_INT 44
23398: PUSH
23399: LD_INT 45
23401: PUSH
23402: LD_INT 46
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PPUSH
23413: LD_INT 3
23415: PPUSH
23416: CALL_OW 12
23420: ARRAY
23421: PPUSH
23422: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23426: LD_VAR 0 1
23430: PPUSH
23431: CALL_OW 266
23435: PUSH
23436: LD_INT 24
23438: EQUAL
23439: IFFALSE 23449
// russianAI = 1 ;
23441: LD_ADDR_EXP 39
23445: PUSH
23446: LD_INT 1
23448: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 255
23458: PUSH
23459: LD_INT 2
23461: EQUAL
23462: IFFALSE 24341
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 266
23473: PUSH
23474: LD_EXP 68
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: PUSH
23483: LD_INT 1
23485: ARRAY
23486: EQUAL
23487: IFFALSE 23614
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23489: LD_ADDR_EXP 68
23493: PUSH
23494: LD_EXP 68
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 3
23506: ST_TO_ADDR
// if arBuildingsTab then
23507: LD_EXP 68
23511: IFFALSE 23614
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23513: LD_ADDR_VAR 0 3
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 25
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PPUSH
23542: CALL_OW 69
23546: ST_TO_ADDR
// if engineers then
23547: LD_VAR 0 3
23551: IFFALSE 23614
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_EXP 68
23562: PUSH
23563: LD_INT 1
23565: ARRAY
23566: PUSH
23567: LD_INT 1
23569: ARRAY
23570: PPUSH
23571: LD_EXP 68
23575: PUSH
23576: LD_INT 1
23578: ARRAY
23579: PUSH
23580: LD_INT 2
23582: ARRAY
23583: PPUSH
23584: LD_EXP 68
23588: PUSH
23589: LD_INT 1
23591: ARRAY
23592: PUSH
23593: LD_INT 3
23595: ARRAY
23596: PPUSH
23597: LD_EXP 68
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: PUSH
23606: LD_INT 4
23608: ARRAY
23609: PPUSH
23610: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23614: LD_VAR 0 1
23618: PPUSH
23619: CALL_OW 266
23623: PUSH
23624: LD_INT 31
23626: EQUAL
23627: IFFALSE 23773
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23629: LD_ADDR_VAR 0 4
23633: PUSH
23634: LD_INT 22
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: LD_INT 25
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 25
23659: PUSH
23660: LD_INT 8
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PPUSH
23676: CALL_OW 69
23680: PUSH
23681: LD_EXP 26
23685: DIFF
23686: ST_TO_ADDR
// if not sol then
23687: LD_VAR 0 4
23691: NOT
23692: IFFALSE 23696
// exit ;
23694: GO 24341
// for i in sol do
23696: LD_ADDR_VAR 0 2
23700: PUSH
23701: LD_VAR 0 4
23705: PUSH
23706: FOR_IN
23707: IFFALSE 23771
// if not GetTag ( i ) then
23709: LD_VAR 0 2
23713: PPUSH
23714: CALL_OW 110
23718: NOT
23719: IFFALSE 23769
// begin if IsInUnit ( i ) then
23721: LD_VAR 0 2
23725: PPUSH
23726: CALL_OW 310
23730: IFFALSE 23741
// ComExitBuilding ( i ) ;
23732: LD_VAR 0 2
23736: PPUSH
23737: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23741: LD_VAR 0 2
23745: PPUSH
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 180
// SetTag ( i , 11 ) ;
23755: LD_VAR 0 2
23759: PPUSH
23760: LD_INT 11
23762: PPUSH
23763: CALL_OW 109
// break ;
23767: GO 23771
// end ;
23769: GO 23706
23771: POP
23772: POP
// end ; if GetBType ( building ) = b_depot then
23773: LD_VAR 0 1
23777: PPUSH
23778: CALL_OW 266
23782: PUSH
23783: LD_INT 0
23785: EQUAL
23786: IFFALSE 23872
// begin arDepot = building ;
23788: LD_ADDR_EXP 43
23792: PUSH
23793: LD_VAR 0 1
23797: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23798: LD_INT 38
23800: PUSH
23801: LD_INT 47
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PPUSH
23808: LD_INT 71
23810: PPUSH
23811: LD_INT 19
23813: PPUSH
23814: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23818: LD_VAR 0 1
23822: PPUSH
23823: CALL_OW 274
23827: PPUSH
23828: LD_INT 1
23830: PPUSH
23831: LD_INT 500
23833: PPUSH
23834: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 274
23847: PPUSH
23848: LD_INT 3
23850: PPUSH
23851: LD_INT 30
23853: PPUSH
23854: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23858: LD_EXP 26
23862: PPUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23872: LD_VAR 0 1
23876: PPUSH
23877: CALL_OW 266
23881: PUSH
23882: LD_INT 6
23884: EQUAL
23885: PUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 266
23895: PUSH
23896: LD_INT 9
23898: EQUAL
23899: OR
23900: IFFALSE 23951
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23902: LD_VAR 0 1
23906: PPUSH
23907: LD_INT 10
23909: PPUSH
23910: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23914: LD_VAR 0 1
23918: PPUSH
23919: LD_INT 11
23921: PPUSH
23922: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23926: LD_INT 2
23928: PPUSH
23929: LD_VAR 0 1
23933: PPUSH
23934: LD_INT 2
23936: PPUSH
23937: CALL 15642 0 3
// arLab = building ;
23941: LD_ADDR_EXP 44
23945: PUSH
23946: LD_VAR 0 1
23950: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL_OW 266
23960: PUSH
23961: LD_INT 2
23963: EQUAL
23964: PUSH
23965: LD_VAR 0 1
23969: PPUSH
23970: CALL_OW 266
23974: PUSH
23975: LD_INT 4
23977: EQUAL
23978: OR
23979: IFFALSE 24050
// begin ComUpgrade ( building ) ;
23981: LD_VAR 0 1
23985: PPUSH
23986: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL_OW 266
23999: PUSH
24000: LD_INT 4
24002: EQUAL
24003: IFFALSE 24050
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24005: LD_INT 22
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 25
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PPUSH
24029: CALL_OW 69
24033: PUSH
24034: LD_EXP 26
24038: DIFF
24039: PPUSH
24040: LD_INT 75
24042: PPUSH
24043: LD_INT 21
24045: PPUSH
24046: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24050: LD_VAR 0 1
24054: PPUSH
24055: CALL_OW 266
24059: PUSH
24060: LD_INT 27
24062: EQUAL
24063: IFFALSE 24341
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24065: LD_INT 22
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 30
24077: PUSH
24078: LD_INT 27
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PPUSH
24089: CALL_OW 69
24093: PUSH
24094: LD_INT 2
24096: EQUAL
24097: IFFALSE 24341
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24099: LD_ADDR_VAR 0 2
24103: PUSH
24104: LD_INT 22
24106: PUSH
24107: LD_INT 2
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 21
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 25
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: PPUSH
24139: CALL_OW 69
24143: PUSH
24144: LD_INT 1
24146: ARRAY
24147: ST_TO_ADDR
// if not i then
24148: LD_VAR 0 2
24152: NOT
24153: IFFALSE 24157
// exit ;
24155: GO 24341
// AddComMoveXY ( i , 92 , 34 ) ;
24157: LD_VAR 0 2
24161: PPUSH
24162: LD_INT 92
24164: PPUSH
24165: LD_INT 34
24167: PPUSH
24168: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_INT 35
24179: PPUSH
24180: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24184: LD_VAR 0 2
24188: PPUSH
24189: LD_INT 101
24191: PPUSH
24192: LD_INT 20
24194: PPUSH
24195: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24199: LD_VAR 0 2
24203: PPUSH
24204: LD_INT 35
24206: PPUSH
24207: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24211: LD_VAR 0 2
24215: PPUSH
24216: LD_INT 115
24218: PPUSH
24219: LD_INT 30
24221: PPUSH
24222: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24226: LD_VAR 0 2
24230: PPUSH
24231: LD_INT 35
24233: PPUSH
24234: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24238: LD_VAR 0 2
24242: PPUSH
24243: LD_INT 82
24245: PPUSH
24246: LD_INT 57
24248: PPUSH
24249: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24253: LD_VAR 0 2
24257: PPUSH
24258: LD_INT 35
24260: PPUSH
24261: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24265: LD_VAR 0 2
24269: PPUSH
24270: LD_INT 36
24272: PPUSH
24273: LD_INT 28
24275: PPUSH
24276: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24280: LD_VAR 0 2
24284: PPUSH
24285: LD_INT 70
24287: PPUSH
24288: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24292: LD_INT 22
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 21
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 25
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: PPUSH
24327: CALL_OW 69
24331: PPUSH
24332: LD_EXP 43
24336: PPUSH
24337: CALL_OW 180
// end ; end ; end ;
24341: PPOPN 5
24343: END
// on UpgradeComplete ( building ) do var i ;
24344: LD_INT 0
24346: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL_OW 255
24356: PUSH
24357: LD_INT 1
24359: EQUAL
24360: PUSH
24361: LD_EXP 65
24365: PUSH
24366: LD_INT 0
24368: EQUAL
24369: AND
24370: IFFALSE 24568
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 266
24381: PUSH
24382: LD_INT 7
24384: EQUAL
24385: PUSH
24386: LD_VAR 0 1
24390: PPUSH
24391: CALL_OW 266
24395: PUSH
24396: LD_INT 8
24398: EQUAL
24399: OR
24400: IFFALSE 24568
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24402: LD_INT 22
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: LD_INT 30
24417: PUSH
24418: LD_INT 26
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 30
24427: PUSH
24428: LD_INT 27
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 28
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PPUSH
24455: CALL_OW 69
24459: PUSH
24460: LD_INT 0
24462: GREATER
24463: IFFALSE 24568
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: LD_INT 22
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: PUSH
24483: LD_INT 30
24485: PUSH
24486: LD_INT 7
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 30
24495: PUSH
24496: LD_INT 8
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: CALL_OW 69
24516: PUSH
24517: FOR_IN
24518: IFFALSE 24566
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24520: LD_VAR 0 2
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 268
24532: PUSH
24533: LD_INT 11
24535: EQUAL
24536: PUSH
24537: LD_VAR 0 2
24541: PPUSH
24542: LD_INT 2
24544: PPUSH
24545: CALL_OW 268
24549: PUSH
24550: LD_INT 11
24552: EQUAL
24553: OR
24554: IFFALSE 24564
// eventVar1 = 1 ;
24556: LD_ADDR_EXP 65
24560: PUSH
24561: LD_INT 1
24563: ST_TO_ADDR
24564: GO 24517
24566: POP
24567: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 255
24577: PUSH
24578: LD_INT 2
24580: EQUAL
24581: IFFALSE 24686
// begin if GetBType ( building ) = b_barracks then
24583: LD_VAR 0 1
24587: PPUSH
24588: CALL_OW 266
24592: PUSH
24593: LD_INT 5
24595: EQUAL
24596: IFFALSE 24686
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24598: LD_ADDR_VAR 0 2
24602: PUSH
24603: LD_INT 22
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 25
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 54
24628: PUSH
24629: EMPTY
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL_OW 69
24645: PUSH
24646: LD_EXP 26
24650: PUSH
24651: EMPTY
24652: LIST
24653: DIFF
24654: PUSH
24655: FOR_IN
24656: IFFALSE 24674
// ComEnterUnit ( i , building ) ;
24658: LD_VAR 0 2
24662: PPUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 120
24672: GO 24655
24674: POP
24675: POP
// arArm = building ;
24676: LD_ADDR_EXP 45
24680: PUSH
24681: LD_VAR 0 1
24685: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: PUSH
24696: LD_INT 3
24698: EQUAL
24699: IFFALSE 25172
// begin if GetBType ( building ) = b_factory then
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: PUSH
24711: LD_INT 3
24713: EQUAL
24714: IFFALSE 24781
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_INT 3
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 25
24733: PUSH
24734: LD_INT 3
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PPUSH
24745: CALL_OW 69
24749: PUSH
24750: FOR_IN
24751: IFFALSE 24769
// ComEnterUnit ( i , building ) ;
24753: LD_VAR 0 2
24757: PPUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 120
24767: GO 24750
24769: POP
24770: POP
// ruFab = building ;
24771: LD_ADDR_EXP 35
24775: PUSH
24776: LD_VAR 0 1
24780: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24781: LD_INT 22
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 21
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 30
24803: PUSH
24804: LD_INT 8
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: PPUSH
24816: CALL_OW 69
24820: PUSH
24821: LD_INT 2
24823: EQUAL
24824: IFFALSE 25032
// begin for i = 1 to 2 do
24826: LD_ADDR_VAR 0 2
24830: PUSH
24831: DOUBLE
24832: LD_INT 1
24834: DEC
24835: ST_TO_ADDR
24836: LD_INT 2
24838: PUSH
24839: FOR_TO
24840: IFFALSE 24927
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24842: LD_INT 22
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 25
24854: PUSH
24855: LD_INT 4
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PPUSH
24866: CALL_OW 69
24870: PUSH
24871: LD_VAR 0 2
24875: ARRAY
24876: PPUSH
24877: LD_INT 22
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 21
24889: PUSH
24890: LD_INT 3
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 30
24899: PUSH
24900: LD_INT 8
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: PPUSH
24912: CALL_OW 69
24916: PUSH
24917: LD_INT 1
24919: ARRAY
24920: PPUSH
24921: CALL_OW 120
24925: GO 24839
24927: POP
24928: POP
// for i = 3 to 4 do
24929: LD_ADDR_VAR 0 2
24933: PUSH
24934: DOUBLE
24935: LD_INT 3
24937: DEC
24938: ST_TO_ADDR
24939: LD_INT 4
24941: PUSH
24942: FOR_TO
24943: IFFALSE 25030
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24945: LD_INT 22
24947: PUSH
24948: LD_INT 3
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 25
24957: PUSH
24958: LD_INT 4
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 69
24973: PUSH
24974: LD_VAR 0 2
24978: ARRAY
24979: PPUSH
24980: LD_INT 22
24982: PUSH
24983: LD_INT 3
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 21
24992: PUSH
24993: LD_INT 3
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 30
25002: PUSH
25003: LD_INT 8
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: PPUSH
25015: CALL_OW 69
25019: PUSH
25020: LD_INT 2
25022: ARRAY
25023: PPUSH
25024: CALL_OW 120
25028: GO 24942
25030: POP
25031: POP
// end ; if GetBType ( building ) = b_barracks then
25032: LD_VAR 0 1
25036: PPUSH
25037: CALL_OW 266
25041: PUSH
25042: LD_INT 5
25044: EQUAL
25045: IFFALSE 25172
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25047: LD_ADDR_VAR 0 2
25051: PUSH
25052: LD_INT 22
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 25
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 3
25074: PUSH
25075: LD_INT 54
25077: PUSH
25078: EMPTY
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 69
25094: PUSH
25095: FOR_IN
25096: IFFALSE 25114
// ComEnterUnit ( i , building ) ;
25098: LD_VAR 0 2
25102: PPUSH
25103: LD_VAR 0 1
25107: PPUSH
25108: CALL_OW 120
25112: GO 25095
25114: POP
25115: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25116: LD_INT 22
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 30
25128: PUSH
25129: LD_INT 5
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PPUSH
25140: CALL_OW 69
25144: PUSH
25145: LD_INT 0
25147: EQUAL
25148: IFFALSE 25162
// ruArm1 = building else
25150: LD_ADDR_EXP 33
25154: PUSH
25155: LD_VAR 0 1
25159: ST_TO_ADDR
25160: GO 25172
// ruArm2 = building ;
25162: LD_ADDR_EXP 34
25166: PUSH
25167: LD_VAR 0 1
25171: ST_TO_ADDR
// end ; end ; end ;
25172: PPOPN 2
25174: END
// on EnterBuilding ( building , human ) do var rnd ;
25175: LD_INT 0
25177: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25178: LD_VAR 0 2
25182: PPUSH
25183: CALL_OW 255
25187: PUSH
25188: LD_INT 2
25190: EQUAL
25191: PUSH
25192: LD_VAR 0 2
25196: PPUSH
25197: CALL_OW 257
25201: PUSH
25202: LD_INT 1
25204: EQUAL
25205: AND
25206: PUSH
25207: LD_VAR 0 1
25211: PUSH
25212: LD_EXP 45
25216: EQUAL
25217: AND
25218: IFFALSE 25265
// begin wait ( 0 0$1 ) ;
25220: LD_INT 35
25222: PPUSH
25223: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_INT 1
25234: PPUSH
25235: LD_INT 100
25237: PPUSH
25238: CALL_OW 12
25242: ST_TO_ADDR
// if rnd > 50 then
25243: LD_VAR 0 3
25247: PUSH
25248: LD_INT 50
25250: GREATER
25251: IFFALSE 25265
// SetClass ( human , class_mortar ) ;
25253: LD_VAR 0 2
25257: PPUSH
25258: LD_INT 8
25260: PPUSH
25261: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25265: LD_VAR 0 2
25269: PUSH
25270: LD_INT 22
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 25
25282: PUSH
25283: LD_INT 12
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PPUSH
25294: CALL_OW 69
25298: IN
25299: IFFALSE 25349
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 266
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: IN
25321: IFFALSE 25337
// SetClass ( human , class_apeman_engineer ) else
25323: LD_VAR 0 2
25327: PPUSH
25328: LD_INT 16
25330: PPUSH
25331: CALL_OW 336
25335: GO 25349
// SetClass ( human , class_apeman_soldier ) ;
25337: LD_VAR 0 2
25341: PPUSH
25342: LD_INT 15
25344: PPUSH
25345: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25349: LD_VAR 0 2
25353: PPUSH
25354: CALL_OW 255
25358: PUSH
25359: LD_INT 3
25361: EQUAL
25362: PUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 257
25372: PUSH
25373: LD_INT 1
25375: EQUAL
25376: AND
25377: PUSH
25378: LD_VAR 0 1
25382: PUSH
25383: LD_EXP 33
25387: EQUAL
25388: PUSH
25389: LD_VAR 0 1
25393: PUSH
25394: LD_EXP 34
25398: EQUAL
25399: OR
25400: PUSH
25401: EMPTY
25402: LIST
25403: AND
25404: IFFALSE 25425
// begin wait ( 0 0$1 ) ;
25406: LD_INT 35
25408: PPUSH
25409: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25413: LD_VAR 0 2
25417: PPUSH
25418: LD_INT 9
25420: PPUSH
25421: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25425: LD_VAR 0 2
25429: PPUSH
25430: CALL_OW 255
25434: PUSH
25435: LD_INT 3
25437: EQUAL
25438: PUSH
25439: LD_VAR 0 2
25443: PPUSH
25444: CALL_OW 257
25448: PUSH
25449: LD_INT 9
25451: EQUAL
25452: AND
25453: PUSH
25454: LD_VAR 0 1
25458: PPUSH
25459: CALL_OW 266
25463: PUSH
25464: LD_INT 32
25466: EQUAL
25467: AND
25468: IFFALSE 25489
// begin wait ( 0 0$1 ) ;
25470: LD_INT 35
25472: PPUSH
25473: CALL_OW 67
// SetClass ( human , 1 ) ;
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_INT 1
25484: PPUSH
25485: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25489: LD_VAR 0 2
25493: PPUSH
25494: CALL_OW 255
25498: PUSH
25499: LD_INT 3
25501: EQUAL
25502: PUSH
25503: LD_VAR 0 2
25507: PPUSH
25508: CALL_OW 257
25512: PUSH
25513: LD_INT 3
25515: EQUAL
25516: AND
25517: PUSH
25518: LD_VAR 0 1
25522: PUSH
25523: LD_EXP 35
25527: EQUAL
25528: AND
25529: IFFALSE 25543
// SetLives ( human , 1000 ) ;
25531: LD_VAR 0 2
25535: PPUSH
25536: LD_INT 1000
25538: PPUSH
25539: CALL_OW 234
// end ;
25543: PPOPN 3
25545: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25546: LD_VAR 0 1
25550: PUSH
25551: LD_INT 1
25553: EQUAL
25554: PUSH
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 2
25562: EQUAL
25563: AND
25564: PUSH
25565: LD_INT 1
25567: PPUSH
25568: LD_INT 2
25570: PPUSH
25571: CALL_OW 81
25575: PUSH
25576: LD_INT 1
25578: EQUAL
25579: AND
25580: IFFALSE 25601
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25582: LD_EXP 24
25586: PPUSH
25587: LD_STRING D6b-Pow-1
25589: PPUSH
25590: CALL_OW 94
// YouLost ( Powell ) ;
25594: LD_STRING Powell
25596: PPUSH
25597: CALL_OW 104
// end ; end ;
25601: PPOPN 2
25603: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25604: LD_INT 23
25606: PPUSH
25607: LD_INT 22
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 21
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PPUSH
25631: CALL_OW 70
25635: PUSH
25636: LD_INT 23
25638: PPUSH
25639: LD_INT 22
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PPUSH
25663: CALL_OW 70
25667: OR
25668: PUSH
25669: LD_INT 1
25671: PPUSH
25672: LD_INT 2
25674: PPUSH
25675: CALL_OW 81
25679: PUSH
25680: LD_INT 1
25682: EQUAL
25683: AND
25684: IFFALSE 25817
25686: GO 25688
25688: DISABLE
// begin enable ;
25689: ENABLE
// wait ( 0 0$10 ) ;
25690: LD_INT 350
25692: PPUSH
25693: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25697: LD_INT 23
25699: PPUSH
25700: LD_INT 22
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 21
25712: PUSH
25713: LD_INT 3
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 70
25728: PUSH
25729: LD_INT 23
25731: PPUSH
25732: LD_INT 22
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 21
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 70
25760: OR
25761: PUSH
25762: LD_INT 1
25764: PPUSH
25765: LD_INT 2
25767: PPUSH
25768: CALL_OW 81
25772: PUSH
25773: LD_INT 1
25775: EQUAL
25776: AND
25777: IFFALSE 25817
// begin disable ;
25779: DISABLE
// InGameOn ;
25780: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25784: LD_INT 73
25786: PPUSH
25787: LD_INT 18
25789: PPUSH
25790: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25794: LD_EXP 24
25798: PPUSH
25799: LD_STRING D6b-Pow-1
25801: PPUSH
25802: CALL_OW 94
// YouLost ( Powell ) ;
25806: LD_STRING Powell
25808: PPUSH
25809: CALL_OW 104
// InGameOff ;
25813: CALL_OW 9
// end ; end ;
25817: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25818: LD_VAR 0 1
25822: PUSH
25823: LD_EXP 1
25827: EQUAL
25828: IFFALSE 25837
// YouLost ( JMM ) ;
25830: LD_STRING JMM
25832: PPUSH
25833: CALL_OW 104
// if unit = Khatam then
25837: LD_VAR 0 1
25841: PUSH
25842: LD_EXP 14
25846: EQUAL
25847: IFFALSE 25857
// KhatamStatus = 0 ;
25849: LD_ADDR_EXP 53
25853: PUSH
25854: LD_INT 0
25856: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25857: LD_VAR 0 1
25861: PPUSH
25862: CALL_OW 255
25866: PUSH
25867: LD_INT 3
25869: EQUAL
25870: PUSH
25871: LD_VAR 0 1
25875: PPUSH
25876: CALL_OW 247
25880: PUSH
25881: LD_INT 3
25883: EQUAL
25884: AND
25885: IFFALSE 26577
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 266
25896: PUSH
25897: LD_INT 31
25899: EQUAL
25900: PUSH
25901: LD_VAR 0 1
25905: PPUSH
25906: CALL_OW 266
25910: PUSH
25911: LD_INT 32
25913: EQUAL
25914: OR
25915: PUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: CALL_OW 266
25925: PUSH
25926: LD_INT 36
25928: EQUAL
25929: OR
25930: PUSH
25931: LD_VAR 0 1
25935: PPUSH
25936: CALL_OW 266
25940: PUSH
25941: LD_INT 0
25943: EQUAL
25944: OR
25945: PUSH
25946: LD_VAR 0 1
25950: PPUSH
25951: CALL_OW 266
25955: PUSH
25956: LD_INT 24
25958: EQUAL
25959: OR
25960: PUSH
25961: LD_VAR 0 1
25965: PPUSH
25966: CALL_OW 266
25970: PUSH
25971: LD_INT 17
25973: EQUAL
25974: OR
25975: PUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL_OW 266
25985: PUSH
25986: LD_INT 25
25988: EQUAL
25989: OR
25990: PUSH
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 266
26000: PUSH
26001: LD_INT 19
26003: EQUAL
26004: OR
26005: PUSH
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 266
26015: PUSH
26016: LD_INT 20
26018: EQUAL
26019: OR
26020: PUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 266
26030: PUSH
26031: LD_INT 18
26033: EQUAL
26034: OR
26035: PUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 266
26045: PUSH
26046: LD_INT 21
26048: EQUAL
26049: OR
26050: PUSH
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 266
26060: PUSH
26061: LD_INT 23
26063: EQUAL
26064: OR
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 266
26075: PUSH
26076: LD_INT 16
26078: EQUAL
26079: OR
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 266
26090: PUSH
26091: LD_INT 6
26093: EQUAL
26094: OR
26095: PUSH
26096: LD_VAR 0 1
26100: PPUSH
26101: CALL_OW 266
26105: PUSH
26106: LD_INT 29
26108: EQUAL
26109: OR
26110: PUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 266
26120: PUSH
26121: LD_INT 26
26123: EQUAL
26124: OR
26125: PUSH
26126: LD_VAR 0 1
26130: PPUSH
26131: CALL_OW 266
26135: PUSH
26136: LD_INT 30
26138: EQUAL
26139: OR
26140: PUSH
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 266
26150: PUSH
26151: LD_INT 28
26153: EQUAL
26154: OR
26155: PUSH
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 266
26165: PUSH
26166: LD_INT 27
26168: EQUAL
26169: OR
26170: PUSH
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 266
26180: PUSH
26181: LD_INT 33
26183: EQUAL
26184: OR
26185: PUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 266
26195: PUSH
26196: LD_INT 2
26198: EQUAL
26199: OR
26200: PUSH
26201: LD_VAR 0 1
26205: PPUSH
26206: CALL_OW 266
26210: PUSH
26211: LD_INT 4
26213: EQUAL
26214: OR
26215: IFFALSE 26301
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26217: LD_ADDR_EXP 42
26221: PUSH
26222: LD_EXP 42
26226: PUSH
26227: LD_VAR 0 1
26231: PPUSH
26232: CALL_OW 266
26236: ADD
26237: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26238: LD_ADDR_EXP 42
26242: PUSH
26243: LD_EXP 42
26247: PUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 250
26257: ADD
26258: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26259: LD_ADDR_EXP 42
26263: PUSH
26264: LD_EXP 42
26268: PUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 251
26278: ADD
26279: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26280: LD_ADDR_EXP 42
26284: PUSH
26285: LD_EXP 42
26289: PUSH
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 254
26299: ADD
26300: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL_OW 266
26310: PUSH
26311: LD_INT 1
26313: EQUAL
26314: IFFALSE 26393
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26316: LD_ADDR_EXP 42
26320: PUSH
26321: LD_EXP 42
26325: PUSH
26326: LD_INT 0
26328: ADD
26329: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26330: LD_ADDR_EXP 42
26334: PUSH
26335: LD_EXP 42
26339: PUSH
26340: LD_VAR 0 1
26344: PPUSH
26345: CALL_OW 250
26349: ADD
26350: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26351: LD_ADDR_EXP 42
26355: PUSH
26356: LD_EXP 42
26360: PUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 251
26370: ADD
26371: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26372: LD_ADDR_EXP 42
26376: PUSH
26377: LD_EXP 42
26381: PUSH
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 254
26391: ADD
26392: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL_OW 266
26402: PUSH
26403: LD_INT 3
26405: EQUAL
26406: IFFALSE 26485
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26408: LD_ADDR_EXP 42
26412: PUSH
26413: LD_EXP 42
26417: PUSH
26418: LD_INT 2
26420: ADD
26421: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26422: LD_ADDR_EXP 42
26426: PUSH
26427: LD_EXP 42
26431: PUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 250
26441: ADD
26442: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26443: LD_ADDR_EXP 42
26447: PUSH
26448: LD_EXP 42
26452: PUSH
26453: LD_VAR 0 1
26457: PPUSH
26458: CALL_OW 251
26462: ADD
26463: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26464: LD_ADDR_EXP 42
26468: PUSH
26469: LD_EXP 42
26473: PUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 254
26483: ADD
26484: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26485: LD_VAR 0 1
26489: PPUSH
26490: CALL_OW 266
26494: PUSH
26495: LD_INT 5
26497: EQUAL
26498: IFFALSE 26577
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26500: LD_ADDR_EXP 42
26504: PUSH
26505: LD_EXP 42
26509: PUSH
26510: LD_INT 4
26512: ADD
26513: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26514: LD_ADDR_EXP 42
26518: PUSH
26519: LD_EXP 42
26523: PUSH
26524: LD_VAR 0 1
26528: PPUSH
26529: CALL_OW 250
26533: ADD
26534: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26535: LD_ADDR_EXP 42
26539: PUSH
26540: LD_EXP 42
26544: PUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 251
26554: ADD
26555: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26556: LD_ADDR_EXP 42
26560: PUSH
26561: LD_EXP 42
26565: PUSH
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL_OW 254
26575: ADD
26576: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26577: LD_EXP 51
26581: PUSH
26582: LD_VAR 0 1
26586: PPUSH
26587: CALL_OW 257
26591: PUSH
26592: LD_INT 3
26594: EQUAL
26595: AND
26596: PUSH
26597: LD_VAR 0 1
26601: PPUSH
26602: CALL_OW 255
26606: PUSH
26607: LD_INT 3
26609: EQUAL
26610: AND
26611: PUSH
26612: LD_EXP 35
26616: PPUSH
26617: CALL_OW 302
26621: AND
26622: PUSH
26623: LD_EXP 35
26627: PPUSH
26628: CALL_OW 255
26632: PUSH
26633: LD_INT 3
26635: EQUAL
26636: AND
26637: IFFALSE 26721
// begin ruMech := ruMech - 1 ;
26639: LD_ADDR_EXP 51
26643: PUSH
26644: LD_EXP 51
26648: PUSH
26649: LD_INT 1
26651: MINUS
26652: ST_TO_ADDR
// uc_side = 3 ;
26653: LD_ADDR_OWVAR 20
26657: PUSH
26658: LD_INT 3
26660: ST_TO_ADDR
// uc_nation = 3 ;
26661: LD_ADDR_OWVAR 21
26665: PUSH
26666: LD_INT 3
26668: ST_TO_ADDR
// hc_gallery :=  ;
26669: LD_ADDR_OWVAR 33
26673: PUSH
26674: LD_STRING 
26676: ST_TO_ADDR
// hc_name :=  ;
26677: LD_ADDR_OWVAR 26
26681: PUSH
26682: LD_STRING 
26684: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26685: LD_INT 0
26687: PPUSH
26688: LD_EXP 36
26692: PPUSH
26693: LD_EXP 37
26697: PPUSH
26698: CALL_OW 12
26702: PPUSH
26703: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26707: CALL_OW 44
26711: PPUSH
26712: LD_EXP 35
26716: PPUSH
26717: CALL_OW 52
// end ; end ;
26721: PPOPN 1
26723: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26724: LD_ADDR_OWVAR 57
26728: PUSH
26729: LD_INT 0
26731: ST_TO_ADDR
// fastEnd = 1 ;
26732: LD_ADDR_EXP 63
26736: PUSH
26737: LD_INT 1
26739: ST_TO_ADDR
// FinishMission ;
26740: CALL 27900 0 0
// end ;
26744: PPOPN 1
26746: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26747: LD_VAR 0 1
26751: PPUSH
26752: CALL 43061 0 1
// end ; end_of_file
26756: PPOPN 1
26758: END
// export function CreateNature ; var i , un ; begin
26759: LD_INT 0
26761: PPUSH
26762: PPUSH
26763: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: DOUBLE
26770: LD_INT 1
26772: DEC
26773: ST_TO_ADDR
26774: LD_OWVAR 67
26778: PUSH
26779: LD_INT 1
26781: PPUSH
26782: LD_INT 5
26784: PPUSH
26785: CALL_OW 12
26789: PLUS
26790: PUSH
26791: FOR_TO
26792: IFFALSE 26937
// begin hc_sex = sex_male ;
26794: LD_ADDR_OWVAR 27
26798: PUSH
26799: LD_INT 1
26801: ST_TO_ADDR
// uc_side = 0 ;
26802: LD_ADDR_OWVAR 20
26806: PUSH
26807: LD_INT 0
26809: ST_TO_ADDR
// uc_nation = nation_nature ;
26810: LD_ADDR_OWVAR 21
26814: PUSH
26815: LD_INT 0
26817: ST_TO_ADDR
// hc_class = class_apeman ;
26818: LD_ADDR_OWVAR 28
26822: PUSH
26823: LD_INT 12
26825: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26826: LD_ADDR_OWVAR 31
26830: PUSH
26831: LD_INT 2
26833: PPUSH
26834: LD_INT 7
26836: PPUSH
26837: CALL_OW 12
26841: PUSH
26842: LD_OWVAR 67
26846: PLUS
26847: PUSH
26848: LD_INT 2
26850: PPUSH
26851: LD_INT 10
26853: PPUSH
26854: CALL_OW 12
26858: PUSH
26859: LD_INT 2
26861: PPUSH
26862: LD_INT 10
26864: PPUSH
26865: CALL_OW 12
26869: PUSH
26870: LD_INT 2
26872: PPUSH
26873: LD_INT 10
26875: PPUSH
26876: CALL_OW 12
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26887: LD_ADDR_OWVAR 35
26891: PUSH
26892: LD_INT 5
26894: NEG
26895: PPUSH
26896: LD_INT 5
26898: PPUSH
26899: CALL_OW 12
26903: PUSH
26904: LD_OWVAR 67
26908: MUL
26909: ST_TO_ADDR
// un = CreateHuman ;
26910: LD_ADDR_VAR 0 3
26914: PUSH
26915: CALL_OW 44
26919: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26920: LD_VAR 0 3
26924: PPUSH
26925: LD_INT 5
26927: PPUSH
26928: LD_INT 0
26930: PPUSH
26931: CALL_OW 49
// end ;
26935: GO 26791
26937: POP
26938: POP
// for i = 1 to Difficulty + 2 do
26939: LD_ADDR_VAR 0 2
26943: PUSH
26944: DOUBLE
26945: LD_INT 1
26947: DEC
26948: ST_TO_ADDR
26949: LD_OWVAR 67
26953: PUSH
26954: LD_INT 2
26956: PLUS
26957: PUSH
26958: FOR_TO
26959: IFFALSE 27068
// begin hc_sex = sex_male ;
26961: LD_ADDR_OWVAR 27
26965: PUSH
26966: LD_INT 1
26968: ST_TO_ADDR
// uc_side = 0 ;
26969: LD_ADDR_OWVAR 20
26973: PUSH
26974: LD_INT 0
26976: ST_TO_ADDR
// uc_nation = nation_nature ;
26977: LD_ADDR_OWVAR 21
26981: PUSH
26982: LD_INT 0
26984: ST_TO_ADDR
// hc_class = class_tiger ;
26985: LD_ADDR_OWVAR 28
26989: PUSH
26990: LD_INT 14
26992: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26993: LD_ADDR_OWVAR 31
26997: PUSH
26998: LD_EXP 37
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27018: LD_ADDR_OWVAR 35
27022: PUSH
27023: LD_INT 5
27025: NEG
27026: PPUSH
27027: LD_INT 5
27029: PPUSH
27030: CALL_OW 12
27034: PUSH
27035: LD_OWVAR 67
27039: MUL
27040: ST_TO_ADDR
// un = CreateHuman ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: CALL_OW 44
27050: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27051: LD_VAR 0 3
27055: PPUSH
27056: LD_INT 6
27058: PPUSH
27059: LD_INT 0
27061: PPUSH
27062: CALL_OW 49
// end ;
27066: GO 26958
27068: POP
27069: POP
// for i = 1 to rand ( 3 , 4 ) do
27070: LD_ADDR_VAR 0 2
27074: PUSH
27075: DOUBLE
27076: LD_INT 1
27078: DEC
27079: ST_TO_ADDR
27080: LD_INT 3
27082: PPUSH
27083: LD_INT 4
27085: PPUSH
27086: CALL_OW 12
27090: PUSH
27091: FOR_TO
27092: IFFALSE 27186
// begin hc_sex = sex_male ;
27094: LD_ADDR_OWVAR 27
27098: PUSH
27099: LD_INT 1
27101: ST_TO_ADDR
// uc_side = 0 ;
27102: LD_ADDR_OWVAR 20
27106: PUSH
27107: LD_INT 0
27109: ST_TO_ADDR
// uc_nation = nation_nature ;
27110: LD_ADDR_OWVAR 21
27114: PUSH
27115: LD_INT 0
27117: ST_TO_ADDR
// hc_class = 18 ;
27118: LD_ADDR_OWVAR 28
27122: PUSH
27123: LD_INT 18
27125: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27126: LD_ADDR_OWVAR 31
27130: PUSH
27131: LD_EXP 37
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// hc_agressivity = 0 ;
27151: LD_ADDR_OWVAR 35
27155: PUSH
27156: LD_INT 0
27158: ST_TO_ADDR
// un = CreateHuman ;
27159: LD_ADDR_VAR 0 3
27163: PUSH
27164: CALL_OW 44
27168: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27169: LD_VAR 0 3
27173: PPUSH
27174: LD_INT 6
27176: PPUSH
27177: LD_INT 0
27179: PPUSH
27180: CALL_OW 49
// end ;
27184: GO 27091
27186: POP
27187: POP
// end ; end_of_file
27188: LD_VAR 0 1
27192: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27193: LD_EXP 46
27197: PUSH
27198: LD_INT 1
27200: EQUAL
27201: IFFALSE 27285
27203: GO 27205
27205: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27206: LD_INT 7
27208: PPUSH
27209: LD_INT 5
27211: PPUSH
27212: LD_INT 4
27214: PUSH
27215: LD_INT 5
27217: PUSH
27218: LD_INT 6
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: PUSH
27226: LD_OWVAR 67
27230: ARRAY
27231: PPUSH
27232: LD_EXP 36
27236: PPUSH
27237: LD_EXP 37
27241: PPUSH
27242: CALL_OW 12
27246: PPUSH
27247: LD_INT 2
27249: PPUSH
27250: LD_INT 1
27252: PPUSH
27253: LD_INT 1
27255: PPUSH
27256: EMPTY
27257: PPUSH
27258: LD_INT 25
27260: PUSH
27261: LD_INT 26
27263: PUSH
27264: LD_INT 27
27266: PUSH
27267: LD_INT 28
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: PPUSH
27276: EMPTY
27277: PPUSH
27278: LD_INT 1
27280: PPUSH
27281: CALL 17204 0 11
27285: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27286: LD_EXP 46
27290: PUSH
27291: LD_INT 1
27293: EQUAL
27294: IFFALSE 27382
27296: GO 27298
27298: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27299: LD_INT 5
27301: PPUSH
27302: LD_INT 2
27304: PPUSH
27305: LD_INT 5
27307: PUSH
27308: LD_INT 6
27310: PUSH
27311: LD_INT 8
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: PUSH
27319: LD_OWVAR 67
27323: ARRAY
27324: PPUSH
27325: LD_INT 0
27327: PPUSH
27328: LD_INT 0
27330: PPUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 4
27336: PUSH
27337: LD_INT 5
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: PUSH
27345: LD_OWVAR 67
27349: ARRAY
27350: PPUSH
27351: LD_INT 0
27353: PPUSH
27354: LD_EXP 36
27358: PPUSH
27359: LD_EXP 37
27363: PPUSH
27364: CALL_OW 12
27368: PPUSH
27369: LD_INT 7
27371: PPUSH
27372: LD_INT 9
27374: PPUSH
27375: LD_INT 1
27377: PPUSH
27378: CALL 18908 0 11
27382: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27383: LD_EXP 46
27387: PUSH
27388: LD_INT 1
27390: EQUAL
27391: IFFALSE 27400
27393: GO 27395
27395: DISABLE
// PrepareArabianSheik ;
27396: CALL 4693 0 0
27400: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27401: LD_EXP 29
27405: PUSH
27406: LD_EXP 64
27410: PUSH
27411: LD_INT 1
27413: EQUAL
27414: AND
27415: IFFALSE 27484
27417: GO 27419
27419: DISABLE
// begin enable ;
27420: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27421: LD_INT 6
27423: PPUSH
27424: LD_INT 3
27426: PPUSH
27427: LD_EXP 60
27431: PPUSH
27432: LD_INT 0
27434: PPUSH
27435: LD_OWVAR 67
27439: PPUSH
27440: LD_INT 0
27442: PPUSH
27443: LD_EXP 60
27447: PUSH
27448: LD_INT 3
27450: DIV
27451: PUSH
27452: LD_INT 1
27454: PLUS
27455: PPUSH
27456: LD_EXP 36
27460: PPUSH
27461: LD_EXP 37
27465: PPUSH
27466: CALL_OW 12
27470: PPUSH
27471: LD_INT 17
27473: PPUSH
27474: LD_INT 18
27476: PPUSH
27477: LD_INT 1
27479: PPUSH
27480: CALL 18908 0 11
// end ;
27484: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27485: LD_EXP 29
27489: PUSH
27490: LD_EXP 64
27494: PUSH
27495: LD_INT 1
27497: EQUAL
27498: AND
27499: IFFALSE 27576
27501: GO 27503
27503: DISABLE
// begin enable ;
27504: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27505: LD_INT 17
27507: PPUSH
27508: LD_INT 6
27510: PPUSH
27511: LD_EXP 59
27515: PPUSH
27516: LD_EXP 36
27520: PPUSH
27521: LD_EXP 37
27525: PPUSH
27526: CALL_OW 12
27530: PPUSH
27531: LD_INT 3
27533: PPUSH
27534: LD_INT 1
27536: PPUSH
27537: LD_INT 3
27539: PUSH
27540: LD_INT 3
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PPUSH
27547: LD_INT 43
27549: PUSH
27550: LD_INT 44
27552: PUSH
27553: LD_INT 45
27555: PUSH
27556: LD_INT 46
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: PPUSH
27565: EMPTY
27566: PPUSH
27567: EMPTY
27568: PPUSH
27569: LD_INT 1
27571: PPUSH
27572: CALL 17204 0 11
// end ;
27576: END
// every 10 10$00 trigger joinEpsilon do
27577: LD_EXP 29
27581: IFFALSE 27635
27583: GO 27585
27585: DISABLE
// begin enable ;
27586: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27587: LD_ADDR_EXP 59
27591: PUSH
27592: LD_EXP 59
27596: PUSH
27597: LD_INT 1
27599: PPUSH
27600: LD_OWVAR 67
27604: PPUSH
27605: CALL_OW 12
27609: PLUS
27610: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27611: LD_ADDR_EXP 60
27615: PUSH
27616: LD_EXP 60
27620: PUSH
27621: LD_INT 1
27623: PPUSH
27624: LD_OWVAR 67
27628: PPUSH
27629: CALL_OW 12
27633: PLUS
27634: ST_TO_ADDR
// end ;
27635: END
// every 21 21$0 trigger attackAvalaible = 1 do
27636: LD_EXP 64
27640: PUSH
27641: LD_INT 1
27643: EQUAL
27644: IFFALSE 27657
27646: GO 27648
27648: DISABLE
// attackAvalaible = 0 ; end_of_file
27649: LD_ADDR_EXP 64
27653: PUSH
27654: LD_INT 0
27656: ST_TO_ADDR
27657: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27658: LD_INT 54
27660: PPUSH
27661: LD_INT 1
27663: PPUSH
27664: CALL_OW 321
27668: PUSH
27669: LD_INT 2
27671: EQUAL
27672: PUSH
27673: LD_INT 55
27675: PPUSH
27676: LD_INT 1
27678: PPUSH
27679: CALL_OW 321
27683: PUSH
27684: LD_INT 2
27686: EQUAL
27687: AND
27688: PUSH
27689: LD_INT 21
27691: PPUSH
27692: LD_INT 1
27694: PPUSH
27695: CALL_OW 321
27699: PUSH
27700: LD_INT 2
27702: EQUAL
27703: AND
27704: PUSH
27705: LD_INT 22
27707: PPUSH
27708: LD_INT 1
27710: PPUSH
27711: CALL_OW 321
27715: PUSH
27716: LD_INT 2
27718: EQUAL
27719: AND
27720: PUSH
27721: LD_INT 12
27723: PPUSH
27724: LD_INT 1
27726: PPUSH
27727: CALL_OW 321
27731: PUSH
27732: LD_INT 1
27734: EQUAL
27735: PUSH
27736: LD_INT 32
27738: PPUSH
27739: LD_INT 1
27741: PPUSH
27742: CALL_OW 321
27746: PUSH
27747: LD_INT 1
27749: EQUAL
27750: OR
27751: PUSH
27752: EMPTY
27753: LIST
27754: AND
27755: PUSH
27756: LD_EXP 48
27760: PUSH
27761: LD_INT 1
27763: EQUAL
27764: AND
27765: PUSH
27766: LD_INT 22
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 21
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: PUSH
27795: LD_INT 0
27797: EQUAL
27798: AND
27799: IFFALSE 27855
27801: GO 27803
27803: DISABLE
// begin case query ( QEndMission ) of 1 :
27804: LD_STRING QEndMission
27806: PPUSH
27807: CALL_OW 97
27811: PUSH
27812: LD_INT 1
27814: DOUBLE
27815: EQUAL
27816: IFTRUE 27820
27818: GO 27831
27820: POP
// begin end_the_mission_allowed = true ;
27821: LD_ADDR_OWVAR 57
27825: PUSH
27826: LD_INT 1
27828: ST_TO_ADDR
// end ; 2 :
27829: GO 27855
27831: LD_INT 2
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27854
27839: POP
// begin fastEnd = 1 ;
27840: LD_ADDR_EXP 63
27844: PUSH
27845: LD_INT 1
27847: ST_TO_ADDR
// FinishMission ;
27848: CALL 27900 0 0
// end ; end ;
27852: GO 27855
27854: POP
// end ;
27855: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27856: LD_EXP 58
27860: PUSH
27861: LD_EXP 57
27865: NOT
27866: AND
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PPUSH
27878: CALL_OW 69
27882: PUSH
27883: LD_INT 0
27885: EQUAL
27886: AND
27887: IFFALSE 27899
27889: GO 27891
27891: DISABLE
// SetAchievement ( ACH_TACT ) ;
27892: LD_STRING ACH_TACT
27894: PPUSH
27895: CALL_OW 543
27899: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27900: LD_INT 0
27902: PPUSH
27903: PPUSH
27904: PPUSH
27905: PPUSH
// if not snipersTrained then
27906: LD_EXP 62
27910: NOT
27911: IFFALSE 27920
// SetAchievement ( ACH_SNIPER ) ;
27913: LD_STRING ACH_SNIPER
27915: PPUSH
27916: CALL_OW 543
// m1 := false ;
27920: LD_ADDR_VAR 0 2
27924: PUSH
27925: LD_INT 0
27927: ST_TO_ADDR
// m2 := false ;
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_INT 0
27935: ST_TO_ADDR
// m3 := false ;
27936: LD_ADDR_VAR 0 4
27940: PUSH
27941: LD_INT 0
27943: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27944: LD_EXP 53
27948: PPUSH
27949: LD_STRING 10_KhatamStatus_1
27951: PPUSH
27952: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27956: LD_EXP 52
27960: PPUSH
27961: LD_STRING 10_GensherEscape_1
27963: PPUSH
27964: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27968: LD_INT 12
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 321
27978: PUSH
27979: LD_INT 2
27981: EQUAL
27982: IFFALSE 28004
// begin AddMedal ( sights , 1 ) ;
27984: LD_STRING sights
27986: PPUSH
27987: LD_INT 1
27989: PPUSH
27990: CALL_OW 101
// m1 := true ;
27994: LD_ADDR_VAR 0 2
27998: PUSH
27999: LD_INT 1
28001: ST_TO_ADDR
// end else
28002: GO 28015
// begin AddMedal ( sights , - 1 ) ;
28004: LD_STRING sights
28006: PPUSH
28007: LD_INT 1
28009: NEG
28010: PPUSH
28011: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28015: LD_INT 32
28017: PPUSH
28018: LD_INT 1
28020: PPUSH
28021: CALL_OW 321
28025: PUSH
28026: LD_INT 2
28028: EQUAL
28029: IFFALSE 28051
// begin AddMedal ( computers , 1 ) ;
28031: LD_STRING computers
28033: PPUSH
28034: LD_INT 1
28036: PPUSH
28037: CALL_OW 101
// m2 := true ;
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: LD_INT 1
28048: ST_TO_ADDR
// end else
28049: GO 28062
// begin AddMedal ( computers , - 1 ) ;
28051: LD_STRING computers
28053: PPUSH
28054: LD_INT 1
28056: NEG
28057: PPUSH
28058: CALL_OW 101
// end ; if arabianEscape = 0 then
28062: LD_EXP 47
28066: PUSH
28067: LD_INT 0
28069: EQUAL
28070: IFFALSE 28102
// begin AddMedal ( renegades , 2 ) ;
28072: LD_STRING renegades
28074: PPUSH
28075: LD_INT 2
28077: PPUSH
28078: CALL_OW 101
// m3 := true ;
28082: LD_ADDR_VAR 0 4
28086: PUSH
28087: LD_INT 1
28089: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28090: LD_INT 0
28092: PPUSH
28093: LD_STRING 10_ScientistsEscape_1
28095: PPUSH
28096: CALL_OW 39
// end else
28100: GO 28113
// begin AddMedal ( renegades , - 1 ) ;
28102: LD_STRING renegades
28104: PPUSH
28105: LD_INT 1
28107: NEG
28108: PPUSH
28109: CALL_OW 101
// end ; SaveEpsilonBase ;
28113: CALL 28899 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
28117: LD_VAR 0 2
28121: PUSH
28122: LD_VAR 0 3
28126: AND
28127: PUSH
28128: LD_VAR 0 4
28132: AND
28133: PUSH
28134: LD_OWVAR 67
28138: PUSH
28139: LD_INT 3
28141: EQUAL
28142: AND
28143: IFFALSE 28155
// SetAchievementEX ( ACH_AMER , 10 ) ;
28145: LD_STRING ACH_AMER
28147: PPUSH
28148: LD_INT 10
28150: PPUSH
28151: CALL_OW 564
// if tick <= 40 40$00 then
28155: LD_OWVAR 1
28159: PUSH
28160: LD_INT 84000
28162: LESSEQUAL
28163: IFFALSE 28179
// begin wait ( 3 ) ;
28165: LD_INT 3
28167: PPUSH
28168: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28172: LD_STRING ACH_ASPEED_10
28174: PPUSH
28175: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28179: LD_STRING Main
28181: PPUSH
28182: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28186: LD_INT 22
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 23
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 21
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: LD_INT 25
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 25
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 25
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 25
28251: PUSH
28252: LD_INT 4
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 25
28261: PUSH
28262: LD_INT 5
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 25
28271: PUSH
28272: LD_INT 8
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: PPUSH
28294: CALL_OW 69
28298: PPUSH
28299: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28303: LD_EXP 1
28307: PPUSH
28308: LD_EXP 54
28312: PUSH
28313: LD_STRING JMM
28315: STR
28316: PPUSH
28317: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28321: LD_EXP 2
28325: PPUSH
28326: LD_EXP 54
28330: PUSH
28331: LD_STRING Brown
28333: STR
28334: PPUSH
28335: CALL 11388 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28339: LD_EXP 3
28343: PPUSH
28344: LD_EXP 54
28348: PUSH
28349: LD_STRING Donaldson
28351: STR
28352: PPUSH
28353: CALL 11388 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28357: LD_EXP 4
28361: PPUSH
28362: LD_EXP 54
28366: PUSH
28367: LD_STRING Bobby
28369: STR
28370: PPUSH
28371: CALL 11388 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28375: LD_EXP 5
28379: PPUSH
28380: LD_EXP 54
28384: PUSH
28385: LD_STRING Cyrus
28387: STR
28388: PPUSH
28389: CALL 11388 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28393: LD_EXP 6
28397: PPUSH
28398: LD_EXP 54
28402: PUSH
28403: LD_STRING Lisa
28405: STR
28406: PPUSH
28407: CALL 11388 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28411: LD_EXP 7
28415: PPUSH
28416: LD_EXP 54
28420: PUSH
28421: LD_STRING Frank
28423: STR
28424: PPUSH
28425: CALL 11388 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28429: LD_EXP 8
28433: PPUSH
28434: LD_EXP 54
28438: PUSH
28439: LD_STRING Kikuchi
28441: STR
28442: PPUSH
28443: CALL 11388 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28447: LD_EXP 9
28451: PPUSH
28452: LD_EXP 54
28456: PUSH
28457: LD_STRING Houten
28459: STR
28460: PPUSH
28461: CALL 11388 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28465: LD_EXP 10
28469: PPUSH
28470: LD_EXP 54
28474: PUSH
28475: LD_STRING Gary
28477: STR
28478: PPUSH
28479: CALL 11388 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28483: LD_EXP 19
28487: PPUSH
28488: LD_EXP 54
28492: PUSH
28493: LD_STRING Cornell
28495: STR
28496: PPUSH
28497: CALL 11388 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28501: LD_EXP 11
28505: PPUSH
28506: LD_EXP 54
28510: PUSH
28511: LD_STRING Simms
28513: STR
28514: PPUSH
28515: CALL 11388 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28519: LD_EXP 12
28523: PPUSH
28524: LD_EXP 54
28528: PUSH
28529: LD_STRING Denis
28531: STR
28532: PPUSH
28533: CALL 11388 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28537: LD_EXP 13
28541: PPUSH
28542: LD_EXP 54
28546: PUSH
28547: LD_STRING Joan
28549: STR
28550: PPUSH
28551: CALL 11388 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28555: LD_EXP 15
28559: PPUSH
28560: LD_EXP 54
28564: PUSH
28565: LD_STRING Gladstone
28567: STR
28568: PPUSH
28569: CALL 11388 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28573: LD_EXP 17
28577: PPUSH
28578: LD_EXP 54
28582: PUSH
28583: LD_STRING DeltaDoctor
28585: STR
28586: PPUSH
28587: CALL 11388 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28591: LD_EXP 22
28595: PPUSH
28596: LD_STRING 10c_lock
28598: PPUSH
28599: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28603: LD_INT 50
28605: PUSH
28606: EMPTY
28607: LIST
28608: PUSH
28609: LD_INT 22
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 21
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: LD_INT 25
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 25
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 25
28654: PUSH
28655: LD_INT 3
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 25
28664: PUSH
28665: LD_INT 4
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 25
28674: PUSH
28675: LD_INT 5
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 25
28684: PUSH
28685: LD_INT 8
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 69
28711: PUSH
28712: LD_EXP 1
28716: PUSH
28717: LD_EXP 2
28721: PUSH
28722: LD_EXP 3
28726: PUSH
28727: LD_EXP 4
28731: PUSH
28732: LD_EXP 5
28736: PUSH
28737: LD_EXP 6
28741: PUSH
28742: LD_EXP 7
28746: PUSH
28747: LD_EXP 15
28751: PUSH
28752: LD_EXP 8
28756: PUSH
28757: LD_EXP 12
28761: PUSH
28762: LD_EXP 13
28766: PUSH
28767: LD_EXP 9
28771: PUSH
28772: LD_EXP 11
28776: PUSH
28777: LD_EXP 10
28781: PUSH
28782: LD_EXP 17
28786: PUSH
28787: LD_EXP 19
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: DIFF
28810: PPUSH
28811: LD_STRING 10_other_survivors
28813: PPUSH
28814: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28818: LD_INT 50
28820: PUSH
28821: EMPTY
28822: LIST
28823: PUSH
28824: LD_INT 22
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 21
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: LD_INT 25
28849: PUSH
28850: LD_INT 16
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 25
28859: PUSH
28860: LD_INT 12
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 69
28882: PPUSH
28883: LD_STRING 10_ape
28885: PPUSH
28886: CALL_OW 38
// YouWin ;
28890: CALL_OW 103
// end ;
28894: LD_VAR 0 1
28898: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
// epsilonBase = [ ] ;
28905: LD_ADDR_VAR 0 2
28909: PUSH
28910: EMPTY
28911: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_INT 22
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 21
28929: PUSH
28930: LD_INT 3
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 50
28939: PUSH
28940: EMPTY
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: PPUSH
28948: CALL_OW 69
28952: ST_TO_ADDR
// for i in buildings do
28953: LD_ADDR_VAR 0 4
28957: PUSH
28958: LD_VAR 0 3
28962: PUSH
28963: FOR_IN
28964: IFFALSE 29416
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28966: LD_VAR 0 4
28970: PPUSH
28971: CALL_OW 266
28975: PUSH
28976: LD_INT 6
28978: PUSH
28979: LD_INT 7
28981: PUSH
28982: LD_INT 8
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: IN
28990: IFFALSE 29104
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28992: LD_ADDR_VAR 0 2
28996: PUSH
28997: LD_VAR 0 2
29001: PUSH
29002: LD_VAR 0 4
29006: PPUSH
29007: CALL_OW 266
29011: PUSH
29012: LD_VAR 0 4
29016: PPUSH
29017: CALL_OW 250
29021: PUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: CALL_OW 251
29031: PUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 254
29041: PUSH
29042: LD_VAR 0 4
29046: PPUSH
29047: CALL_OW 267
29051: PUSH
29052: LD_VAR 0 4
29056: PPUSH
29057: CALL_OW 248
29061: PUSH
29062: LD_VAR 0 4
29066: PPUSH
29067: LD_INT 1
29069: PPUSH
29070: CALL_OW 268
29074: PUSH
29075: LD_VAR 0 4
29079: PPUSH
29080: LD_INT 2
29082: PPUSH
29083: CALL_OW 268
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: ADD
29101: ST_TO_ADDR
29102: GO 29414
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29104: LD_VAR 0 4
29108: PPUSH
29109: CALL_OW 266
29113: PUSH
29114: LD_INT 32
29116: EQUAL
29117: PUSH
29118: LD_VAR 0 4
29122: PPUSH
29123: CALL_OW 266
29127: PUSH
29128: LD_INT 33
29130: EQUAL
29131: OR
29132: IFFALSE 29229
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29134: LD_ADDR_VAR 0 2
29138: PUSH
29139: LD_VAR 0 2
29143: PUSH
29144: LD_VAR 0 4
29148: PPUSH
29149: CALL_OW 266
29153: PUSH
29154: LD_VAR 0 4
29158: PPUSH
29159: CALL_OW 250
29163: PUSH
29164: LD_VAR 0 4
29168: PPUSH
29169: CALL_OW 251
29173: PUSH
29174: LD_VAR 0 4
29178: PPUSH
29179: CALL_OW 254
29183: PUSH
29184: LD_VAR 0 4
29188: PPUSH
29189: CALL_OW 267
29193: PUSH
29194: LD_VAR 0 4
29198: PPUSH
29199: CALL_OW 248
29203: PUSH
29204: LD_VAR 0 4
29208: PPUSH
29209: CALL_OW 269
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: ADD
29226: ST_TO_ADDR
29227: GO 29414
// if GetBType ( i ) = b_factory then
29229: LD_VAR 0 4
29233: PPUSH
29234: CALL_OW 266
29238: PUSH
29239: LD_INT 3
29241: EQUAL
29242: IFFALSE 29332
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: LD_VAR 0 2
29253: PPUSH
29254: LD_INT 1
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 266
29266: PUSH
29267: LD_VAR 0 4
29271: PPUSH
29272: CALL_OW 250
29276: PUSH
29277: LD_VAR 0 4
29281: PPUSH
29282: CALL_OW 251
29286: PUSH
29287: LD_VAR 0 4
29291: PPUSH
29292: CALL_OW 254
29296: PUSH
29297: LD_VAR 0 4
29301: PPUSH
29302: CALL_OW 267
29306: PUSH
29307: LD_VAR 0 4
29311: PPUSH
29312: CALL_OW 248
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 2
29329: ST_TO_ADDR
29330: GO 29414
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29332: LD_ADDR_VAR 0 2
29336: PUSH
29337: LD_VAR 0 2
29341: PUSH
29342: LD_VAR 0 4
29346: PPUSH
29347: CALL_OW 266
29351: PUSH
29352: LD_VAR 0 4
29356: PPUSH
29357: CALL_OW 250
29361: PUSH
29362: LD_VAR 0 4
29366: PPUSH
29367: CALL_OW 251
29371: PUSH
29372: LD_VAR 0 4
29376: PPUSH
29377: CALL_OW 254
29381: PUSH
29382: LD_VAR 0 4
29386: PPUSH
29387: CALL_OW 267
29391: PUSH
29392: LD_VAR 0 4
29396: PPUSH
29397: CALL_OW 248
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: ADD
29413: ST_TO_ADDR
// end ;
29414: GO 28963
29416: POP
29417: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_STRING 10_EpsilonBase
29425: PPUSH
29426: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29430: LD_INT 19
29432: PPUSH
29433: LD_STRING 10_EpsilonEnv
29435: PPUSH
29436: CALL 29445 0 2
// end ;
29440: LD_VAR 0 1
29444: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29445: LD_INT 0
29447: PPUSH
// result := ListEnvironmentArea ( area ) ;
29448: LD_ADDR_VAR 0 3
29452: PUSH
29453: LD_VAR 0 1
29457: PPUSH
29458: CALL_OW 353
29462: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29463: LD_VAR 0 3
29467: PPUSH
29468: LD_VAR 0 2
29472: PPUSH
29473: CALL_OW 39
// end ; end_of_file
29477: LD_VAR 0 3
29481: RET
// every 0 0$01 do var timer ;
29482: GO 29484
29484: DISABLE
29485: LD_INT 0
29487: PPUSH
// begin timer := 0 0$20 ;
29488: LD_ADDR_VAR 0 1
29492: PUSH
29493: LD_INT 700
29495: ST_TO_ADDR
// repeat wait ( timer ) ;
29496: LD_VAR 0 1
29500: PPUSH
29501: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29505: LD_EXP 56
29509: PUSH
29510: LD_INT 6
29512: GREATEREQUAL
29513: PUSH
29514: LD_EXP 56
29518: PUSH
29519: LD_INT 14
29521: LESS
29522: AND
29523: IFFALSE 29539
// timer := timer + 0 0$3 ;
29525: LD_ADDR_VAR 0 1
29529: PUSH
29530: LD_VAR 0 1
29534: PUSH
29535: LD_INT 105
29537: PLUS
29538: ST_TO_ADDR
// if cratesSpawned >= 14 then
29539: LD_EXP 56
29543: PUSH
29544: LD_INT 14
29546: GREATEREQUAL
29547: IFFALSE 29563
// timer := timer + 0 0$6 ;
29549: LD_ADDR_VAR 0 1
29553: PUSH
29554: LD_VAR 0 1
29558: PUSH
29559: LD_INT 210
29561: PLUS
29562: ST_TO_ADDR
// if timer > 2 2$00 then
29563: LD_VAR 0 1
29567: PUSH
29568: LD_INT 4200
29570: GREATER
29571: IFFALSE 29581
// timer := 0 0$45 ;
29573: LD_ADDR_VAR 0 1
29577: PUSH
29578: LD_INT 1575
29580: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29581: LD_INT 1
29583: PPUSH
29584: LD_INT 5
29586: PPUSH
29587: CALL_OW 12
29591: PPUSH
29592: LD_INT 16
29594: PPUSH
29595: LD_INT 1
29597: PPUSH
29598: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29602: LD_ADDR_EXP 56
29606: PUSH
29607: LD_EXP 56
29611: PUSH
29612: LD_INT 1
29614: PLUS
29615: ST_TO_ADDR
// until false ;
29616: LD_INT 0
29618: IFFALSE 29496
// end ; end_of_file
29620: PPOPN 1
29622: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29623: LD_INT 0
29625: PPUSH
// ar_miner := 81 ;
29626: LD_ADDR_EXP 76
29630: PUSH
29631: LD_INT 81
29633: ST_TO_ADDR
// ar_crane := 88 ;
29634: LD_ADDR_EXP 75
29638: PUSH
29639: LD_INT 88
29641: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29642: LD_ADDR_EXP 70
29646: PUSH
29647: LD_INT 89
29649: ST_TO_ADDR
// us_hack := 99 ;
29650: LD_ADDR_EXP 71
29654: PUSH
29655: LD_INT 99
29657: ST_TO_ADDR
// us_artillery := 97 ;
29658: LD_ADDR_EXP 72
29662: PUSH
29663: LD_INT 97
29665: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29666: LD_ADDR_EXP 73
29670: PUSH
29671: LD_INT 91
29673: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29674: LD_ADDR_EXP 74
29678: PUSH
29679: LD_INT 92
29681: ST_TO_ADDR
// ru_radar := 98 ;
29682: LD_ADDR_EXP 69
29686: PUSH
29687: LD_INT 98
29689: ST_TO_ADDR
// tech_Artillery := 80 ;
29690: LD_ADDR_EXP 77
29694: PUSH
29695: LD_INT 80
29697: ST_TO_ADDR
// tech_RadMat := 81 ;
29698: LD_ADDR_EXP 78
29702: PUSH
29703: LD_INT 81
29705: ST_TO_ADDR
// tech_BasicTools := 82 ;
29706: LD_ADDR_EXP 79
29710: PUSH
29711: LD_INT 82
29713: ST_TO_ADDR
// tech_Cargo := 83 ;
29714: LD_ADDR_EXP 80
29718: PUSH
29719: LD_INT 83
29721: ST_TO_ADDR
// tech_Track := 84 ;
29722: LD_ADDR_EXP 81
29726: PUSH
29727: LD_INT 84
29729: ST_TO_ADDR
// tech_Crane := 85 ;
29730: LD_ADDR_EXP 82
29734: PUSH
29735: LD_INT 85
29737: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29738: LD_ADDR_EXP 83
29742: PUSH
29743: LD_INT 86
29745: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29746: LD_ADDR_EXP 84
29750: PUSH
29751: LD_INT 87
29753: ST_TO_ADDR
// class_mastodont := 31 ;
29754: LD_ADDR_EXP 85
29758: PUSH
29759: LD_INT 31
29761: ST_TO_ADDR
// class_horse := 21 ;
29762: LD_ADDR_EXP 86
29766: PUSH
29767: LD_INT 21
29769: ST_TO_ADDR
// end ;
29770: LD_VAR 0 1
29774: RET
// every 1 do
29775: GO 29777
29777: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29778: CALL 29623 0 0
29782: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29783: LD_INT 0
29785: PPUSH
// if p2 = 100 then
29786: LD_VAR 0 2
29790: PUSH
29791: LD_INT 100
29793: EQUAL
29794: IFFALSE 30743
// begin if not StreamModeActive then
29796: LD_EXP 87
29800: NOT
29801: IFFALSE 29811
// StreamModeActive := true ;
29803: LD_ADDR_EXP 87
29807: PUSH
29808: LD_INT 1
29810: ST_TO_ADDR
// if p3 = 0 then
29811: LD_VAR 0 3
29815: PUSH
29816: LD_INT 0
29818: EQUAL
29819: IFFALSE 29825
// InitStreamMode ;
29821: CALL 30903 0 0
// if p3 = 1 then
29825: LD_VAR 0 3
29829: PUSH
29830: LD_INT 1
29832: EQUAL
29833: IFFALSE 29843
// sRocket := true ;
29835: LD_ADDR_EXP 92
29839: PUSH
29840: LD_INT 1
29842: ST_TO_ADDR
// if p3 = 2 then
29843: LD_VAR 0 3
29847: PUSH
29848: LD_INT 2
29850: EQUAL
29851: IFFALSE 29861
// sSpeed := true ;
29853: LD_ADDR_EXP 91
29857: PUSH
29858: LD_INT 1
29860: ST_TO_ADDR
// if p3 = 3 then
29861: LD_VAR 0 3
29865: PUSH
29866: LD_INT 3
29868: EQUAL
29869: IFFALSE 29879
// sEngine := true ;
29871: LD_ADDR_EXP 93
29875: PUSH
29876: LD_INT 1
29878: ST_TO_ADDR
// if p3 = 4 then
29879: LD_VAR 0 3
29883: PUSH
29884: LD_INT 4
29886: EQUAL
29887: IFFALSE 29897
// sSpec := true ;
29889: LD_ADDR_EXP 90
29893: PUSH
29894: LD_INT 1
29896: ST_TO_ADDR
// if p3 = 5 then
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 5
29904: EQUAL
29905: IFFALSE 29915
// sLevel := true ;
29907: LD_ADDR_EXP 94
29911: PUSH
29912: LD_INT 1
29914: ST_TO_ADDR
// if p3 = 6 then
29915: LD_VAR 0 3
29919: PUSH
29920: LD_INT 6
29922: EQUAL
29923: IFFALSE 29933
// sArmoury := true ;
29925: LD_ADDR_EXP 95
29929: PUSH
29930: LD_INT 1
29932: ST_TO_ADDR
// if p3 = 7 then
29933: LD_VAR 0 3
29937: PUSH
29938: LD_INT 7
29940: EQUAL
29941: IFFALSE 29951
// sRadar := true ;
29943: LD_ADDR_EXP 96
29947: PUSH
29948: LD_INT 1
29950: ST_TO_ADDR
// if p3 = 8 then
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 8
29958: EQUAL
29959: IFFALSE 29969
// sBunker := true ;
29961: LD_ADDR_EXP 97
29965: PUSH
29966: LD_INT 1
29968: ST_TO_ADDR
// if p3 = 9 then
29969: LD_VAR 0 3
29973: PUSH
29974: LD_INT 9
29976: EQUAL
29977: IFFALSE 29987
// sHack := true ;
29979: LD_ADDR_EXP 98
29983: PUSH
29984: LD_INT 1
29986: ST_TO_ADDR
// if p3 = 10 then
29987: LD_VAR 0 3
29991: PUSH
29992: LD_INT 10
29994: EQUAL
29995: IFFALSE 30005
// sFire := true ;
29997: LD_ADDR_EXP 99
30001: PUSH
30002: LD_INT 1
30004: ST_TO_ADDR
// if p3 = 11 then
30005: LD_VAR 0 3
30009: PUSH
30010: LD_INT 11
30012: EQUAL
30013: IFFALSE 30023
// sRefresh := true ;
30015: LD_ADDR_EXP 100
30019: PUSH
30020: LD_INT 1
30022: ST_TO_ADDR
// if p3 = 12 then
30023: LD_VAR 0 3
30027: PUSH
30028: LD_INT 12
30030: EQUAL
30031: IFFALSE 30041
// sExp := true ;
30033: LD_ADDR_EXP 101
30037: PUSH
30038: LD_INT 1
30040: ST_TO_ADDR
// if p3 = 13 then
30041: LD_VAR 0 3
30045: PUSH
30046: LD_INT 13
30048: EQUAL
30049: IFFALSE 30059
// sDepot := true ;
30051: LD_ADDR_EXP 102
30055: PUSH
30056: LD_INT 1
30058: ST_TO_ADDR
// if p3 = 14 then
30059: LD_VAR 0 3
30063: PUSH
30064: LD_INT 14
30066: EQUAL
30067: IFFALSE 30077
// sFlag := true ;
30069: LD_ADDR_EXP 103
30073: PUSH
30074: LD_INT 1
30076: ST_TO_ADDR
// if p3 = 15 then
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 15
30084: EQUAL
30085: IFFALSE 30095
// sKamikadze := true ;
30087: LD_ADDR_EXP 111
30091: PUSH
30092: LD_INT 1
30094: ST_TO_ADDR
// if p3 = 16 then
30095: LD_VAR 0 3
30099: PUSH
30100: LD_INT 16
30102: EQUAL
30103: IFFALSE 30113
// sTroll := true ;
30105: LD_ADDR_EXP 112
30109: PUSH
30110: LD_INT 1
30112: ST_TO_ADDR
// if p3 = 17 then
30113: LD_VAR 0 3
30117: PUSH
30118: LD_INT 17
30120: EQUAL
30121: IFFALSE 30131
// sSlow := true ;
30123: LD_ADDR_EXP 113
30127: PUSH
30128: LD_INT 1
30130: ST_TO_ADDR
// if p3 = 18 then
30131: LD_VAR 0 3
30135: PUSH
30136: LD_INT 18
30138: EQUAL
30139: IFFALSE 30149
// sLack := true ;
30141: LD_ADDR_EXP 114
30145: PUSH
30146: LD_INT 1
30148: ST_TO_ADDR
// if p3 = 19 then
30149: LD_VAR 0 3
30153: PUSH
30154: LD_INT 19
30156: EQUAL
30157: IFFALSE 30167
// sTank := true ;
30159: LD_ADDR_EXP 116
30163: PUSH
30164: LD_INT 1
30166: ST_TO_ADDR
// if p3 = 20 then
30167: LD_VAR 0 3
30171: PUSH
30172: LD_INT 20
30174: EQUAL
30175: IFFALSE 30185
// sRemote := true ;
30177: LD_ADDR_EXP 117
30181: PUSH
30182: LD_INT 1
30184: ST_TO_ADDR
// if p3 = 21 then
30185: LD_VAR 0 3
30189: PUSH
30190: LD_INT 21
30192: EQUAL
30193: IFFALSE 30203
// sPowell := true ;
30195: LD_ADDR_EXP 118
30199: PUSH
30200: LD_INT 1
30202: ST_TO_ADDR
// if p3 = 22 then
30203: LD_VAR 0 3
30207: PUSH
30208: LD_INT 22
30210: EQUAL
30211: IFFALSE 30221
// sTeleport := true ;
30213: LD_ADDR_EXP 121
30217: PUSH
30218: LD_INT 1
30220: ST_TO_ADDR
// if p3 = 23 then
30221: LD_VAR 0 3
30225: PUSH
30226: LD_INT 23
30228: EQUAL
30229: IFFALSE 30239
// sOilTower := true ;
30231: LD_ADDR_EXP 123
30235: PUSH
30236: LD_INT 1
30238: ST_TO_ADDR
// if p3 = 24 then
30239: LD_VAR 0 3
30243: PUSH
30244: LD_INT 24
30246: EQUAL
30247: IFFALSE 30257
// sShovel := true ;
30249: LD_ADDR_EXP 124
30253: PUSH
30254: LD_INT 1
30256: ST_TO_ADDR
// if p3 = 25 then
30257: LD_VAR 0 3
30261: PUSH
30262: LD_INT 25
30264: EQUAL
30265: IFFALSE 30275
// sSheik := true ;
30267: LD_ADDR_EXP 125
30271: PUSH
30272: LD_INT 1
30274: ST_TO_ADDR
// if p3 = 26 then
30275: LD_VAR 0 3
30279: PUSH
30280: LD_INT 26
30282: EQUAL
30283: IFFALSE 30293
// sEarthquake := true ;
30285: LD_ADDR_EXP 127
30289: PUSH
30290: LD_INT 1
30292: ST_TO_ADDR
// if p3 = 27 then
30293: LD_VAR 0 3
30297: PUSH
30298: LD_INT 27
30300: EQUAL
30301: IFFALSE 30311
// sAI := true ;
30303: LD_ADDR_EXP 128
30307: PUSH
30308: LD_INT 1
30310: ST_TO_ADDR
// if p3 = 28 then
30311: LD_VAR 0 3
30315: PUSH
30316: LD_INT 28
30318: EQUAL
30319: IFFALSE 30329
// sCargo := true ;
30321: LD_ADDR_EXP 131
30325: PUSH
30326: LD_INT 1
30328: ST_TO_ADDR
// if p3 = 29 then
30329: LD_VAR 0 3
30333: PUSH
30334: LD_INT 29
30336: EQUAL
30337: IFFALSE 30347
// sDLaser := true ;
30339: LD_ADDR_EXP 132
30343: PUSH
30344: LD_INT 1
30346: ST_TO_ADDR
// if p3 = 30 then
30347: LD_VAR 0 3
30351: PUSH
30352: LD_INT 30
30354: EQUAL
30355: IFFALSE 30365
// sExchange := true ;
30357: LD_ADDR_EXP 133
30361: PUSH
30362: LD_INT 1
30364: ST_TO_ADDR
// if p3 = 31 then
30365: LD_VAR 0 3
30369: PUSH
30370: LD_INT 31
30372: EQUAL
30373: IFFALSE 30383
// sFac := true ;
30375: LD_ADDR_EXP 134
30379: PUSH
30380: LD_INT 1
30382: ST_TO_ADDR
// if p3 = 32 then
30383: LD_VAR 0 3
30387: PUSH
30388: LD_INT 32
30390: EQUAL
30391: IFFALSE 30401
// sPower := true ;
30393: LD_ADDR_EXP 135
30397: PUSH
30398: LD_INT 1
30400: ST_TO_ADDR
// if p3 = 33 then
30401: LD_VAR 0 3
30405: PUSH
30406: LD_INT 33
30408: EQUAL
30409: IFFALSE 30419
// sRandom := true ;
30411: LD_ADDR_EXP 136
30415: PUSH
30416: LD_INT 1
30418: ST_TO_ADDR
// if p3 = 34 then
30419: LD_VAR 0 3
30423: PUSH
30424: LD_INT 34
30426: EQUAL
30427: IFFALSE 30437
// sShield := true ;
30429: LD_ADDR_EXP 137
30433: PUSH
30434: LD_INT 1
30436: ST_TO_ADDR
// if p3 = 35 then
30437: LD_VAR 0 3
30441: PUSH
30442: LD_INT 35
30444: EQUAL
30445: IFFALSE 30455
// sTime := true ;
30447: LD_ADDR_EXP 138
30451: PUSH
30452: LD_INT 1
30454: ST_TO_ADDR
// if p3 = 36 then
30455: LD_VAR 0 3
30459: PUSH
30460: LD_INT 36
30462: EQUAL
30463: IFFALSE 30473
// sTools := true ;
30465: LD_ADDR_EXP 139
30469: PUSH
30470: LD_INT 1
30472: ST_TO_ADDR
// if p3 = 101 then
30473: LD_VAR 0 3
30477: PUSH
30478: LD_INT 101
30480: EQUAL
30481: IFFALSE 30491
// sSold := true ;
30483: LD_ADDR_EXP 104
30487: PUSH
30488: LD_INT 1
30490: ST_TO_ADDR
// if p3 = 102 then
30491: LD_VAR 0 3
30495: PUSH
30496: LD_INT 102
30498: EQUAL
30499: IFFALSE 30509
// sDiff := true ;
30501: LD_ADDR_EXP 105
30505: PUSH
30506: LD_INT 1
30508: ST_TO_ADDR
// if p3 = 103 then
30509: LD_VAR 0 3
30513: PUSH
30514: LD_INT 103
30516: EQUAL
30517: IFFALSE 30527
// sFog := true ;
30519: LD_ADDR_EXP 108
30523: PUSH
30524: LD_INT 1
30526: ST_TO_ADDR
// if p3 = 104 then
30527: LD_VAR 0 3
30531: PUSH
30532: LD_INT 104
30534: EQUAL
30535: IFFALSE 30545
// sReset := true ;
30537: LD_ADDR_EXP 109
30541: PUSH
30542: LD_INT 1
30544: ST_TO_ADDR
// if p3 = 105 then
30545: LD_VAR 0 3
30549: PUSH
30550: LD_INT 105
30552: EQUAL
30553: IFFALSE 30563
// sSun := true ;
30555: LD_ADDR_EXP 110
30559: PUSH
30560: LD_INT 1
30562: ST_TO_ADDR
// if p3 = 106 then
30563: LD_VAR 0 3
30567: PUSH
30568: LD_INT 106
30570: EQUAL
30571: IFFALSE 30581
// sTiger := true ;
30573: LD_ADDR_EXP 106
30577: PUSH
30578: LD_INT 1
30580: ST_TO_ADDR
// if p3 = 107 then
30581: LD_VAR 0 3
30585: PUSH
30586: LD_INT 107
30588: EQUAL
30589: IFFALSE 30599
// sBomb := true ;
30591: LD_ADDR_EXP 107
30595: PUSH
30596: LD_INT 1
30598: ST_TO_ADDR
// if p3 = 108 then
30599: LD_VAR 0 3
30603: PUSH
30604: LD_INT 108
30606: EQUAL
30607: IFFALSE 30617
// sWound := true ;
30609: LD_ADDR_EXP 115
30613: PUSH
30614: LD_INT 1
30616: ST_TO_ADDR
// if p3 = 109 then
30617: LD_VAR 0 3
30621: PUSH
30622: LD_INT 109
30624: EQUAL
30625: IFFALSE 30635
// sBetray := true ;
30627: LD_ADDR_EXP 119
30631: PUSH
30632: LD_INT 1
30634: ST_TO_ADDR
// if p3 = 110 then
30635: LD_VAR 0 3
30639: PUSH
30640: LD_INT 110
30642: EQUAL
30643: IFFALSE 30653
// sContamin := true ;
30645: LD_ADDR_EXP 120
30649: PUSH
30650: LD_INT 1
30652: ST_TO_ADDR
// if p3 = 111 then
30653: LD_VAR 0 3
30657: PUSH
30658: LD_INT 111
30660: EQUAL
30661: IFFALSE 30671
// sOil := true ;
30663: LD_ADDR_EXP 122
30667: PUSH
30668: LD_INT 1
30670: ST_TO_ADDR
// if p3 = 112 then
30671: LD_VAR 0 3
30675: PUSH
30676: LD_INT 112
30678: EQUAL
30679: IFFALSE 30689
// sStu := true ;
30681: LD_ADDR_EXP 126
30685: PUSH
30686: LD_INT 1
30688: ST_TO_ADDR
// if p3 = 113 then
30689: LD_VAR 0 3
30693: PUSH
30694: LD_INT 113
30696: EQUAL
30697: IFFALSE 30707
// sBazooka := true ;
30699: LD_ADDR_EXP 129
30703: PUSH
30704: LD_INT 1
30706: ST_TO_ADDR
// if p3 = 114 then
30707: LD_VAR 0 3
30711: PUSH
30712: LD_INT 114
30714: EQUAL
30715: IFFALSE 30725
// sMortar := true ;
30717: LD_ADDR_EXP 130
30721: PUSH
30722: LD_INT 1
30724: ST_TO_ADDR
// if p3 = 115 then
30725: LD_VAR 0 3
30729: PUSH
30730: LD_INT 115
30732: EQUAL
30733: IFFALSE 30743
// sRanger := true ;
30735: LD_ADDR_EXP 140
30739: PUSH
30740: LD_INT 1
30742: ST_TO_ADDR
// end ; if p2 = 101 then
30743: LD_VAR 0 2
30747: PUSH
30748: LD_INT 101
30750: EQUAL
30751: IFFALSE 30879
// begin case p3 of 1 :
30753: LD_VAR 0 3
30757: PUSH
30758: LD_INT 1
30760: DOUBLE
30761: EQUAL
30762: IFTRUE 30766
30764: GO 30773
30766: POP
// hHackUnlimitedResources ; 2 :
30767: CALL 41916 0 0
30771: GO 30879
30773: LD_INT 2
30775: DOUBLE
30776: EQUAL
30777: IFTRUE 30781
30779: GO 30788
30781: POP
// hHackSetLevel10 ; 3 :
30782: CALL 42049 0 0
30786: GO 30879
30788: LD_INT 3
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30803
30796: POP
// hHackSetLevel10YourUnits ; 4 :
30797: CALL 42134 0 0
30801: GO 30879
30803: LD_INT 4
30805: DOUBLE
30806: EQUAL
30807: IFTRUE 30811
30809: GO 30818
30811: POP
// hHackInvincible ; 5 :
30812: CALL 42582 0 0
30816: GO 30879
30818: LD_INT 5
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 30833
30826: POP
// hHackInvisible ; 6 :
30827: CALL 42693 0 0
30831: GO 30879
30833: LD_INT 6
30835: DOUBLE
30836: EQUAL
30837: IFTRUE 30841
30839: GO 30848
30841: POP
// hHackChangeYourSide ; 7 :
30842: CALL 42750 0 0
30846: GO 30879
30848: LD_INT 7
30850: DOUBLE
30851: EQUAL
30852: IFTRUE 30856
30854: GO 30863
30856: POP
// hHackChangeUnitSide ; 8 :
30857: CALL 42792 0 0
30861: GO 30879
30863: LD_INT 8
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30878
30871: POP
// hHackFog ; end ;
30872: CALL 42893 0 0
30876: GO 30879
30878: POP
// end ; end ;
30879: LD_VAR 0 7
30883: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
30884: GO 30886
30886: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
30887: LD_STRING initStreamRollete();
30889: PPUSH
30890: CALL_OW 559
// InitStreamMode ;
30894: CALL 30903 0 0
// DefineStreamItems ( ) ;
30898: CALL 31343 0 0
// end ;
30902: END
// function InitStreamMode ; begin
30903: LD_INT 0
30905: PPUSH
// streamModeActive := false ;
30906: LD_ADDR_EXP 87
30910: PUSH
30911: LD_INT 0
30913: ST_TO_ADDR
// normalCounter := 36 ;
30914: LD_ADDR_EXP 88
30918: PUSH
30919: LD_INT 36
30921: ST_TO_ADDR
// hardcoreCounter := 16 ;
30922: LD_ADDR_EXP 89
30926: PUSH
30927: LD_INT 16
30929: ST_TO_ADDR
// sRocket := false ;
30930: LD_ADDR_EXP 92
30934: PUSH
30935: LD_INT 0
30937: ST_TO_ADDR
// sSpeed := false ;
30938: LD_ADDR_EXP 91
30942: PUSH
30943: LD_INT 0
30945: ST_TO_ADDR
// sEngine := false ;
30946: LD_ADDR_EXP 93
30950: PUSH
30951: LD_INT 0
30953: ST_TO_ADDR
// sSpec := false ;
30954: LD_ADDR_EXP 90
30958: PUSH
30959: LD_INT 0
30961: ST_TO_ADDR
// sLevel := false ;
30962: LD_ADDR_EXP 94
30966: PUSH
30967: LD_INT 0
30969: ST_TO_ADDR
// sArmoury := false ;
30970: LD_ADDR_EXP 95
30974: PUSH
30975: LD_INT 0
30977: ST_TO_ADDR
// sRadar := false ;
30978: LD_ADDR_EXP 96
30982: PUSH
30983: LD_INT 0
30985: ST_TO_ADDR
// sBunker := false ;
30986: LD_ADDR_EXP 97
30990: PUSH
30991: LD_INT 0
30993: ST_TO_ADDR
// sHack := false ;
30994: LD_ADDR_EXP 98
30998: PUSH
30999: LD_INT 0
31001: ST_TO_ADDR
// sFire := false ;
31002: LD_ADDR_EXP 99
31006: PUSH
31007: LD_INT 0
31009: ST_TO_ADDR
// sRefresh := false ;
31010: LD_ADDR_EXP 100
31014: PUSH
31015: LD_INT 0
31017: ST_TO_ADDR
// sExp := false ;
31018: LD_ADDR_EXP 101
31022: PUSH
31023: LD_INT 0
31025: ST_TO_ADDR
// sDepot := false ;
31026: LD_ADDR_EXP 102
31030: PUSH
31031: LD_INT 0
31033: ST_TO_ADDR
// sFlag := false ;
31034: LD_ADDR_EXP 103
31038: PUSH
31039: LD_INT 0
31041: ST_TO_ADDR
// sKamikadze := false ;
31042: LD_ADDR_EXP 111
31046: PUSH
31047: LD_INT 0
31049: ST_TO_ADDR
// sTroll := false ;
31050: LD_ADDR_EXP 112
31054: PUSH
31055: LD_INT 0
31057: ST_TO_ADDR
// sSlow := false ;
31058: LD_ADDR_EXP 113
31062: PUSH
31063: LD_INT 0
31065: ST_TO_ADDR
// sLack := false ;
31066: LD_ADDR_EXP 114
31070: PUSH
31071: LD_INT 0
31073: ST_TO_ADDR
// sTank := false ;
31074: LD_ADDR_EXP 116
31078: PUSH
31079: LD_INT 0
31081: ST_TO_ADDR
// sRemote := false ;
31082: LD_ADDR_EXP 117
31086: PUSH
31087: LD_INT 0
31089: ST_TO_ADDR
// sPowell := false ;
31090: LD_ADDR_EXP 118
31094: PUSH
31095: LD_INT 0
31097: ST_TO_ADDR
// sTeleport := false ;
31098: LD_ADDR_EXP 121
31102: PUSH
31103: LD_INT 0
31105: ST_TO_ADDR
// sOilTower := false ;
31106: LD_ADDR_EXP 123
31110: PUSH
31111: LD_INT 0
31113: ST_TO_ADDR
// sShovel := false ;
31114: LD_ADDR_EXP 124
31118: PUSH
31119: LD_INT 0
31121: ST_TO_ADDR
// sSheik := false ;
31122: LD_ADDR_EXP 125
31126: PUSH
31127: LD_INT 0
31129: ST_TO_ADDR
// sEarthquake := false ;
31130: LD_ADDR_EXP 127
31134: PUSH
31135: LD_INT 0
31137: ST_TO_ADDR
// sAI := false ;
31138: LD_ADDR_EXP 128
31142: PUSH
31143: LD_INT 0
31145: ST_TO_ADDR
// sCargo := false ;
31146: LD_ADDR_EXP 131
31150: PUSH
31151: LD_INT 0
31153: ST_TO_ADDR
// sDLaser := false ;
31154: LD_ADDR_EXP 132
31158: PUSH
31159: LD_INT 0
31161: ST_TO_ADDR
// sExchange := false ;
31162: LD_ADDR_EXP 133
31166: PUSH
31167: LD_INT 0
31169: ST_TO_ADDR
// sFac := false ;
31170: LD_ADDR_EXP 134
31174: PUSH
31175: LD_INT 0
31177: ST_TO_ADDR
// sPower := false ;
31178: LD_ADDR_EXP 135
31182: PUSH
31183: LD_INT 0
31185: ST_TO_ADDR
// sRandom := false ;
31186: LD_ADDR_EXP 136
31190: PUSH
31191: LD_INT 0
31193: ST_TO_ADDR
// sShield := false ;
31194: LD_ADDR_EXP 137
31198: PUSH
31199: LD_INT 0
31201: ST_TO_ADDR
// sTime := false ;
31202: LD_ADDR_EXP 138
31206: PUSH
31207: LD_INT 0
31209: ST_TO_ADDR
// sTools := false ;
31210: LD_ADDR_EXP 139
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// sSold := false ;
31218: LD_ADDR_EXP 104
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// sDiff := false ;
31226: LD_ADDR_EXP 105
31230: PUSH
31231: LD_INT 0
31233: ST_TO_ADDR
// sFog := false ;
31234: LD_ADDR_EXP 108
31238: PUSH
31239: LD_INT 0
31241: ST_TO_ADDR
// sReset := false ;
31242: LD_ADDR_EXP 109
31246: PUSH
31247: LD_INT 0
31249: ST_TO_ADDR
// sSun := false ;
31250: LD_ADDR_EXP 110
31254: PUSH
31255: LD_INT 0
31257: ST_TO_ADDR
// sTiger := false ;
31258: LD_ADDR_EXP 106
31262: PUSH
31263: LD_INT 0
31265: ST_TO_ADDR
// sBomb := false ;
31266: LD_ADDR_EXP 107
31270: PUSH
31271: LD_INT 0
31273: ST_TO_ADDR
// sWound := false ;
31274: LD_ADDR_EXP 115
31278: PUSH
31279: LD_INT 0
31281: ST_TO_ADDR
// sBetray := false ;
31282: LD_ADDR_EXP 119
31286: PUSH
31287: LD_INT 0
31289: ST_TO_ADDR
// sContamin := false ;
31290: LD_ADDR_EXP 120
31294: PUSH
31295: LD_INT 0
31297: ST_TO_ADDR
// sOil := false ;
31298: LD_ADDR_EXP 122
31302: PUSH
31303: LD_INT 0
31305: ST_TO_ADDR
// sStu := false ;
31306: LD_ADDR_EXP 126
31310: PUSH
31311: LD_INT 0
31313: ST_TO_ADDR
// sBazooka := false ;
31314: LD_ADDR_EXP 129
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// sMortar := false ;
31322: LD_ADDR_EXP 130
31326: PUSH
31327: LD_INT 0
31329: ST_TO_ADDR
// sRanger := false ;
31330: LD_ADDR_EXP 140
31334: PUSH
31335: LD_INT 0
31337: ST_TO_ADDR
// end ;
31338: LD_VAR 0 1
31342: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
31343: LD_INT 0
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
// result := [ ] ;
31350: LD_ADDR_VAR 0 1
31354: PUSH
31355: EMPTY
31356: ST_TO_ADDR
// if campaign_id = 1 then
31357: LD_OWVAR 69
31361: PUSH
31362: LD_INT 1
31364: EQUAL
31365: IFFALSE 34303
// begin case mission_number of 1 :
31367: LD_OWVAR 70
31371: PUSH
31372: LD_INT 1
31374: DOUBLE
31375: EQUAL
31376: IFTRUE 31380
31378: GO 31444
31380: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
31381: LD_ADDR_VAR 0 1
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 4
31391: PUSH
31392: LD_INT 11
31394: PUSH
31395: LD_INT 12
31397: PUSH
31398: LD_INT 15
31400: PUSH
31401: LD_INT 16
31403: PUSH
31404: LD_INT 22
31406: PUSH
31407: LD_INT 23
31409: PUSH
31410: LD_INT 26
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 101
31426: PUSH
31427: LD_INT 102
31429: PUSH
31430: LD_INT 106
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: ST_TO_ADDR
31442: GO 34301
31444: LD_INT 2
31446: DOUBLE
31447: EQUAL
31448: IFTRUE 31452
31450: GO 31524
31452: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
31453: LD_ADDR_VAR 0 1
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: LD_INT 11
31466: PUSH
31467: LD_INT 12
31469: PUSH
31470: LD_INT 15
31472: PUSH
31473: LD_INT 16
31475: PUSH
31476: LD_INT 22
31478: PUSH
31479: LD_INT 23
31481: PUSH
31482: LD_INT 26
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 101
31498: PUSH
31499: LD_INT 102
31501: PUSH
31502: LD_INT 105
31504: PUSH
31505: LD_INT 106
31507: PUSH
31508: LD_INT 108
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: ST_TO_ADDR
31522: GO 34301
31524: LD_INT 3
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31608
31532: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
31533: LD_ADDR_VAR 0 1
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: LD_INT 4
31543: PUSH
31544: LD_INT 5
31546: PUSH
31547: LD_INT 11
31549: PUSH
31550: LD_INT 12
31552: PUSH
31553: LD_INT 15
31555: PUSH
31556: LD_INT 16
31558: PUSH
31559: LD_INT 22
31561: PUSH
31562: LD_INT 26
31564: PUSH
31565: LD_INT 36
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 101
31582: PUSH
31583: LD_INT 102
31585: PUSH
31586: LD_INT 105
31588: PUSH
31589: LD_INT 106
31591: PUSH
31592: LD_INT 108
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: ST_TO_ADDR
31606: GO 34301
31608: LD_INT 4
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31700
31616: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
31617: LD_ADDR_VAR 0 1
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: LD_INT 5
31630: PUSH
31631: LD_INT 8
31633: PUSH
31634: LD_INT 11
31636: PUSH
31637: LD_INT 12
31639: PUSH
31640: LD_INT 15
31642: PUSH
31643: LD_INT 16
31645: PUSH
31646: LD_INT 22
31648: PUSH
31649: LD_INT 23
31651: PUSH
31652: LD_INT 26
31654: PUSH
31655: LD_INT 36
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 101
31674: PUSH
31675: LD_INT 102
31677: PUSH
31678: LD_INT 105
31680: PUSH
31681: LD_INT 106
31683: PUSH
31684: LD_INT 108
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: ST_TO_ADDR
31698: GO 34301
31700: LD_INT 5
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31708
31706: GO 31808
31708: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
31709: LD_ADDR_VAR 0 1
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 4
31719: PUSH
31720: LD_INT 5
31722: PUSH
31723: LD_INT 6
31725: PUSH
31726: LD_INT 8
31728: PUSH
31729: LD_INT 11
31731: PUSH
31732: LD_INT 12
31734: PUSH
31735: LD_INT 15
31737: PUSH
31738: LD_INT 16
31740: PUSH
31741: LD_INT 22
31743: PUSH
31744: LD_INT 23
31746: PUSH
31747: LD_INT 25
31749: PUSH
31750: LD_INT 26
31752: PUSH
31753: LD_INT 36
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 101
31774: PUSH
31775: LD_INT 102
31777: PUSH
31778: LD_INT 105
31780: PUSH
31781: LD_INT 106
31783: PUSH
31784: LD_INT 108
31786: PUSH
31787: LD_INT 109
31789: PUSH
31790: LD_INT 112
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: ST_TO_ADDR
31806: GO 34301
31808: LD_INT 6
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31936
31816: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
31817: LD_ADDR_VAR 0 1
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 4
31827: PUSH
31828: LD_INT 5
31830: PUSH
31831: LD_INT 6
31833: PUSH
31834: LD_INT 8
31836: PUSH
31837: LD_INT 11
31839: PUSH
31840: LD_INT 12
31842: PUSH
31843: LD_INT 15
31845: PUSH
31846: LD_INT 16
31848: PUSH
31849: LD_INT 20
31851: PUSH
31852: LD_INT 21
31854: PUSH
31855: LD_INT 22
31857: PUSH
31858: LD_INT 23
31860: PUSH
31861: LD_INT 25
31863: PUSH
31864: LD_INT 26
31866: PUSH
31867: LD_INT 30
31869: PUSH
31870: LD_INT 31
31872: PUSH
31873: LD_INT 32
31875: PUSH
31876: LD_INT 36
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 101
31902: PUSH
31903: LD_INT 102
31905: PUSH
31906: LD_INT 105
31908: PUSH
31909: LD_INT 106
31911: PUSH
31912: LD_INT 108
31914: PUSH
31915: LD_INT 109
31917: PUSH
31918: LD_INT 112
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: ST_TO_ADDR
31934: GO 34301
31936: LD_INT 7
31938: DOUBLE
31939: EQUAL
31940: IFTRUE 31944
31942: GO 32044
31944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
31945: LD_ADDR_VAR 0 1
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 4
31955: PUSH
31956: LD_INT 5
31958: PUSH
31959: LD_INT 7
31961: PUSH
31962: LD_INT 11
31964: PUSH
31965: LD_INT 12
31967: PUSH
31968: LD_INT 15
31970: PUSH
31971: LD_INT 16
31973: PUSH
31974: LD_INT 20
31976: PUSH
31977: LD_INT 21
31979: PUSH
31980: LD_INT 22
31982: PUSH
31983: LD_INT 23
31985: PUSH
31986: LD_INT 25
31988: PUSH
31989: LD_INT 26
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 101
32010: PUSH
32011: LD_INT 102
32013: PUSH
32014: LD_INT 103
32016: PUSH
32017: LD_INT 105
32019: PUSH
32020: LD_INT 106
32022: PUSH
32023: LD_INT 108
32025: PUSH
32026: LD_INT 112
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: ST_TO_ADDR
32042: GO 34301
32044: LD_INT 8
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32180
32052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
32053: LD_ADDR_VAR 0 1
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 4
32063: PUSH
32064: LD_INT 5
32066: PUSH
32067: LD_INT 6
32069: PUSH
32070: LD_INT 7
32072: PUSH
32073: LD_INT 8
32075: PUSH
32076: LD_INT 11
32078: PUSH
32079: LD_INT 12
32081: PUSH
32082: LD_INT 15
32084: PUSH
32085: LD_INT 16
32087: PUSH
32088: LD_INT 20
32090: PUSH
32091: LD_INT 21
32093: PUSH
32094: LD_INT 22
32096: PUSH
32097: LD_INT 23
32099: PUSH
32100: LD_INT 25
32102: PUSH
32103: LD_INT 26
32105: PUSH
32106: LD_INT 30
32108: PUSH
32109: LD_INT 31
32111: PUSH
32112: LD_INT 32
32114: PUSH
32115: LD_INT 36
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 101
32142: PUSH
32143: LD_INT 102
32145: PUSH
32146: LD_INT 103
32148: PUSH
32149: LD_INT 105
32151: PUSH
32152: LD_INT 106
32154: PUSH
32155: LD_INT 108
32157: PUSH
32158: LD_INT 109
32160: PUSH
32161: LD_INT 112
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: ST_TO_ADDR
32178: GO 34301
32180: LD_INT 9
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32324
32188: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
32189: LD_ADDR_VAR 0 1
32193: PUSH
32194: LD_INT 2
32196: PUSH
32197: LD_INT 4
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: LD_INT 6
32205: PUSH
32206: LD_INT 7
32208: PUSH
32209: LD_INT 8
32211: PUSH
32212: LD_INT 11
32214: PUSH
32215: LD_INT 12
32217: PUSH
32218: LD_INT 15
32220: PUSH
32221: LD_INT 16
32223: PUSH
32224: LD_INT 20
32226: PUSH
32227: LD_INT 21
32229: PUSH
32230: LD_INT 22
32232: PUSH
32233: LD_INT 23
32235: PUSH
32236: LD_INT 25
32238: PUSH
32239: LD_INT 26
32241: PUSH
32242: LD_INT 28
32244: PUSH
32245: LD_INT 30
32247: PUSH
32248: LD_INT 31
32250: PUSH
32251: LD_INT 32
32253: PUSH
32254: LD_INT 36
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 101
32282: PUSH
32283: LD_INT 102
32285: PUSH
32286: LD_INT 103
32288: PUSH
32289: LD_INT 105
32291: PUSH
32292: LD_INT 106
32294: PUSH
32295: LD_INT 108
32297: PUSH
32298: LD_INT 109
32300: PUSH
32301: LD_INT 112
32303: PUSH
32304: LD_INT 114
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: ST_TO_ADDR
32322: GO 34301
32324: LD_INT 10
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32516
32332: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
32333: LD_ADDR_VAR 0 1
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: LD_INT 4
32343: PUSH
32344: LD_INT 5
32346: PUSH
32347: LD_INT 6
32349: PUSH
32350: LD_INT 7
32352: PUSH
32353: LD_INT 8
32355: PUSH
32356: LD_INT 9
32358: PUSH
32359: LD_INT 10
32361: PUSH
32362: LD_INT 11
32364: PUSH
32365: LD_INT 12
32367: PUSH
32368: LD_INT 13
32370: PUSH
32371: LD_INT 14
32373: PUSH
32374: LD_INT 15
32376: PUSH
32377: LD_INT 16
32379: PUSH
32380: LD_INT 17
32382: PUSH
32383: LD_INT 18
32385: PUSH
32386: LD_INT 19
32388: PUSH
32389: LD_INT 20
32391: PUSH
32392: LD_INT 21
32394: PUSH
32395: LD_INT 22
32397: PUSH
32398: LD_INT 23
32400: PUSH
32401: LD_INT 24
32403: PUSH
32404: LD_INT 25
32406: PUSH
32407: LD_INT 26
32409: PUSH
32410: LD_INT 28
32412: PUSH
32413: LD_INT 30
32415: PUSH
32416: LD_INT 31
32418: PUSH
32419: LD_INT 32
32421: PUSH
32422: LD_INT 36
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 101
32458: PUSH
32459: LD_INT 102
32461: PUSH
32462: LD_INT 103
32464: PUSH
32465: LD_INT 104
32467: PUSH
32468: LD_INT 105
32470: PUSH
32471: LD_INT 106
32473: PUSH
32474: LD_INT 107
32476: PUSH
32477: LD_INT 108
32479: PUSH
32480: LD_INT 109
32482: PUSH
32483: LD_INT 110
32485: PUSH
32486: LD_INT 111
32488: PUSH
32489: LD_INT 112
32491: PUSH
32492: LD_INT 114
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: ST_TO_ADDR
32514: GO 34301
32516: LD_INT 11
32518: DOUBLE
32519: EQUAL
32520: IFTRUE 32524
32522: GO 32716
32524: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
32525: LD_ADDR_VAR 0 1
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 3
32535: PUSH
32536: LD_INT 4
32538: PUSH
32539: LD_INT 5
32541: PUSH
32542: LD_INT 6
32544: PUSH
32545: LD_INT 7
32547: PUSH
32548: LD_INT 8
32550: PUSH
32551: LD_INT 9
32553: PUSH
32554: LD_INT 10
32556: PUSH
32557: LD_INT 11
32559: PUSH
32560: LD_INT 12
32562: PUSH
32563: LD_INT 13
32565: PUSH
32566: LD_INT 14
32568: PUSH
32569: LD_INT 15
32571: PUSH
32572: LD_INT 16
32574: PUSH
32575: LD_INT 17
32577: PUSH
32578: LD_INT 18
32580: PUSH
32581: LD_INT 19
32583: PUSH
32584: LD_INT 20
32586: PUSH
32587: LD_INT 21
32589: PUSH
32590: LD_INT 22
32592: PUSH
32593: LD_INT 23
32595: PUSH
32596: LD_INT 24
32598: PUSH
32599: LD_INT 25
32601: PUSH
32602: LD_INT 26
32604: PUSH
32605: LD_INT 28
32607: PUSH
32608: LD_INT 30
32610: PUSH
32611: LD_INT 31
32613: PUSH
32614: LD_INT 32
32616: PUSH
32617: LD_INT 34
32619: PUSH
32620: LD_INT 36
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 101
32658: PUSH
32659: LD_INT 102
32661: PUSH
32662: LD_INT 103
32664: PUSH
32665: LD_INT 104
32667: PUSH
32668: LD_INT 105
32670: PUSH
32671: LD_INT 106
32673: PUSH
32674: LD_INT 107
32676: PUSH
32677: LD_INT 108
32679: PUSH
32680: LD_INT 109
32682: PUSH
32683: LD_INT 110
32685: PUSH
32686: LD_INT 111
32688: PUSH
32689: LD_INT 112
32691: PUSH
32692: LD_INT 114
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: ST_TO_ADDR
32714: GO 34301
32716: LD_INT 12
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32932
32724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
32725: LD_ADDR_VAR 0 1
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: LD_INT 4
32741: PUSH
32742: LD_INT 5
32744: PUSH
32745: LD_INT 6
32747: PUSH
32748: LD_INT 7
32750: PUSH
32751: LD_INT 8
32753: PUSH
32754: LD_INT 9
32756: PUSH
32757: LD_INT 10
32759: PUSH
32760: LD_INT 11
32762: PUSH
32763: LD_INT 12
32765: PUSH
32766: LD_INT 13
32768: PUSH
32769: LD_INT 14
32771: PUSH
32772: LD_INT 15
32774: PUSH
32775: LD_INT 16
32777: PUSH
32778: LD_INT 17
32780: PUSH
32781: LD_INT 18
32783: PUSH
32784: LD_INT 19
32786: PUSH
32787: LD_INT 20
32789: PUSH
32790: LD_INT 21
32792: PUSH
32793: LD_INT 22
32795: PUSH
32796: LD_INT 23
32798: PUSH
32799: LD_INT 24
32801: PUSH
32802: LD_INT 25
32804: PUSH
32805: LD_INT 26
32807: PUSH
32808: LD_INT 27
32810: PUSH
32811: LD_INT 28
32813: PUSH
32814: LD_INT 30
32816: PUSH
32817: LD_INT 31
32819: PUSH
32820: LD_INT 32
32822: PUSH
32823: LD_INT 33
32825: PUSH
32826: LD_INT 34
32828: PUSH
32829: LD_INT 36
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 101
32870: PUSH
32871: LD_INT 102
32873: PUSH
32874: LD_INT 103
32876: PUSH
32877: LD_INT 104
32879: PUSH
32880: LD_INT 105
32882: PUSH
32883: LD_INT 106
32885: PUSH
32886: LD_INT 107
32888: PUSH
32889: LD_INT 108
32891: PUSH
32892: LD_INT 109
32894: PUSH
32895: LD_INT 110
32897: PUSH
32898: LD_INT 111
32900: PUSH
32901: LD_INT 112
32903: PUSH
32904: LD_INT 113
32906: PUSH
32907: LD_INT 114
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: ST_TO_ADDR
32930: GO 34301
32932: LD_INT 13
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 33136
32940: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
32941: LD_ADDR_VAR 0 1
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: LD_INT 8
32963: PUSH
32964: LD_INT 9
32966: PUSH
32967: LD_INT 10
32969: PUSH
32970: LD_INT 11
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 14
32978: PUSH
32979: LD_INT 15
32981: PUSH
32982: LD_INT 16
32984: PUSH
32985: LD_INT 17
32987: PUSH
32988: LD_INT 18
32990: PUSH
32991: LD_INT 19
32993: PUSH
32994: LD_INT 20
32996: PUSH
32997: LD_INT 21
32999: PUSH
33000: LD_INT 22
33002: PUSH
33003: LD_INT 23
33005: PUSH
33006: LD_INT 24
33008: PUSH
33009: LD_INT 25
33011: PUSH
33012: LD_INT 26
33014: PUSH
33015: LD_INT 27
33017: PUSH
33018: LD_INT 28
33020: PUSH
33021: LD_INT 30
33023: PUSH
33024: LD_INT 31
33026: PUSH
33027: LD_INT 32
33029: PUSH
33030: LD_INT 33
33032: PUSH
33033: LD_INT 34
33035: PUSH
33036: LD_INT 36
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 101
33074: PUSH
33075: LD_INT 102
33077: PUSH
33078: LD_INT 103
33080: PUSH
33081: LD_INT 104
33083: PUSH
33084: LD_INT 105
33086: PUSH
33087: LD_INT 106
33089: PUSH
33090: LD_INT 107
33092: PUSH
33093: LD_INT 108
33095: PUSH
33096: LD_INT 109
33098: PUSH
33099: LD_INT 110
33101: PUSH
33102: LD_INT 111
33104: PUSH
33105: LD_INT 112
33107: PUSH
33108: LD_INT 113
33110: PUSH
33111: LD_INT 114
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: ST_TO_ADDR
33134: GO 34301
33136: LD_INT 14
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33356
33144: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
33145: LD_ADDR_VAR 0 1
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: LD_INT 3
33158: PUSH
33159: LD_INT 4
33161: PUSH
33162: LD_INT 5
33164: PUSH
33165: LD_INT 6
33167: PUSH
33168: LD_INT 7
33170: PUSH
33171: LD_INT 8
33173: PUSH
33174: LD_INT 9
33176: PUSH
33177: LD_INT 10
33179: PUSH
33180: LD_INT 11
33182: PUSH
33183: LD_INT 12
33185: PUSH
33186: LD_INT 13
33188: PUSH
33189: LD_INT 14
33191: PUSH
33192: LD_INT 15
33194: PUSH
33195: LD_INT 16
33197: PUSH
33198: LD_INT 17
33200: PUSH
33201: LD_INT 18
33203: PUSH
33204: LD_INT 19
33206: PUSH
33207: LD_INT 20
33209: PUSH
33210: LD_INT 21
33212: PUSH
33213: LD_INT 22
33215: PUSH
33216: LD_INT 23
33218: PUSH
33219: LD_INT 24
33221: PUSH
33222: LD_INT 25
33224: PUSH
33225: LD_INT 26
33227: PUSH
33228: LD_INT 27
33230: PUSH
33231: LD_INT 28
33233: PUSH
33234: LD_INT 29
33236: PUSH
33237: LD_INT 30
33239: PUSH
33240: LD_INT 31
33242: PUSH
33243: LD_INT 32
33245: PUSH
33246: LD_INT 33
33248: PUSH
33249: LD_INT 34
33251: PUSH
33252: LD_INT 36
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 101
33294: PUSH
33295: LD_INT 102
33297: PUSH
33298: LD_INT 103
33300: PUSH
33301: LD_INT 104
33303: PUSH
33304: LD_INT 105
33306: PUSH
33307: LD_INT 106
33309: PUSH
33310: LD_INT 107
33312: PUSH
33313: LD_INT 108
33315: PUSH
33316: LD_INT 109
33318: PUSH
33319: LD_INT 110
33321: PUSH
33322: LD_INT 111
33324: PUSH
33325: LD_INT 112
33327: PUSH
33328: LD_INT 113
33330: PUSH
33331: LD_INT 114
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: ST_TO_ADDR
33354: GO 34301
33356: LD_INT 15
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33576
33364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
33365: LD_ADDR_VAR 0 1
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 3
33378: PUSH
33379: LD_INT 4
33381: PUSH
33382: LD_INT 5
33384: PUSH
33385: LD_INT 6
33387: PUSH
33388: LD_INT 7
33390: PUSH
33391: LD_INT 8
33393: PUSH
33394: LD_INT 9
33396: PUSH
33397: LD_INT 10
33399: PUSH
33400: LD_INT 11
33402: PUSH
33403: LD_INT 12
33405: PUSH
33406: LD_INT 13
33408: PUSH
33409: LD_INT 14
33411: PUSH
33412: LD_INT 15
33414: PUSH
33415: LD_INT 16
33417: PUSH
33418: LD_INT 17
33420: PUSH
33421: LD_INT 18
33423: PUSH
33424: LD_INT 19
33426: PUSH
33427: LD_INT 20
33429: PUSH
33430: LD_INT 21
33432: PUSH
33433: LD_INT 22
33435: PUSH
33436: LD_INT 23
33438: PUSH
33439: LD_INT 24
33441: PUSH
33442: LD_INT 25
33444: PUSH
33445: LD_INT 26
33447: PUSH
33448: LD_INT 27
33450: PUSH
33451: LD_INT 28
33453: PUSH
33454: LD_INT 29
33456: PUSH
33457: LD_INT 30
33459: PUSH
33460: LD_INT 31
33462: PUSH
33463: LD_INT 32
33465: PUSH
33466: LD_INT 33
33468: PUSH
33469: LD_INT 34
33471: PUSH
33472: LD_INT 36
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 101
33514: PUSH
33515: LD_INT 102
33517: PUSH
33518: LD_INT 103
33520: PUSH
33521: LD_INT 104
33523: PUSH
33524: LD_INT 105
33526: PUSH
33527: LD_INT 106
33529: PUSH
33530: LD_INT 107
33532: PUSH
33533: LD_INT 108
33535: PUSH
33536: LD_INT 109
33538: PUSH
33539: LD_INT 110
33541: PUSH
33542: LD_INT 111
33544: PUSH
33545: LD_INT 112
33547: PUSH
33548: LD_INT 113
33550: PUSH
33551: LD_INT 114
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: ST_TO_ADDR
33574: GO 34301
33576: LD_INT 16
33578: DOUBLE
33579: EQUAL
33580: IFTRUE 33584
33582: GO 33708
33584: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
33585: LD_ADDR_VAR 0 1
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: LD_INT 4
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: LD_INT 7
33601: PUSH
33602: LD_INT 11
33604: PUSH
33605: LD_INT 12
33607: PUSH
33608: LD_INT 15
33610: PUSH
33611: LD_INT 16
33613: PUSH
33614: LD_INT 20
33616: PUSH
33617: LD_INT 21
33619: PUSH
33620: LD_INT 22
33622: PUSH
33623: LD_INT 23
33625: PUSH
33626: LD_INT 25
33628: PUSH
33629: LD_INT 26
33631: PUSH
33632: LD_INT 30
33634: PUSH
33635: LD_INT 31
33637: PUSH
33638: LD_INT 32
33640: PUSH
33641: LD_INT 33
33643: PUSH
33644: LD_INT 34
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 101
33670: PUSH
33671: LD_INT 102
33673: PUSH
33674: LD_INT 103
33676: PUSH
33677: LD_INT 106
33679: PUSH
33680: LD_INT 108
33682: PUSH
33683: LD_INT 112
33685: PUSH
33686: LD_INT 113
33688: PUSH
33689: LD_INT 114
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: ST_TO_ADDR
33706: GO 34301
33708: LD_INT 17
33710: DOUBLE
33711: EQUAL
33712: IFTRUE 33716
33714: GO 33928
33716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
33717: LD_ADDR_VAR 0 1
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 4
33733: PUSH
33734: LD_INT 5
33736: PUSH
33737: LD_INT 6
33739: PUSH
33740: LD_INT 7
33742: PUSH
33743: LD_INT 8
33745: PUSH
33746: LD_INT 9
33748: PUSH
33749: LD_INT 10
33751: PUSH
33752: LD_INT 11
33754: PUSH
33755: LD_INT 12
33757: PUSH
33758: LD_INT 13
33760: PUSH
33761: LD_INT 14
33763: PUSH
33764: LD_INT 15
33766: PUSH
33767: LD_INT 16
33769: PUSH
33770: LD_INT 17
33772: PUSH
33773: LD_INT 18
33775: PUSH
33776: LD_INT 19
33778: PUSH
33779: LD_INT 20
33781: PUSH
33782: LD_INT 21
33784: PUSH
33785: LD_INT 22
33787: PUSH
33788: LD_INT 23
33790: PUSH
33791: LD_INT 24
33793: PUSH
33794: LD_INT 25
33796: PUSH
33797: LD_INT 26
33799: PUSH
33800: LD_INT 27
33802: PUSH
33803: LD_INT 28
33805: PUSH
33806: LD_INT 29
33808: PUSH
33809: LD_INT 30
33811: PUSH
33812: LD_INT 31
33814: PUSH
33815: LD_INT 32
33817: PUSH
33818: LD_INT 33
33820: PUSH
33821: LD_INT 34
33823: PUSH
33824: LD_INT 36
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 101
33866: PUSH
33867: LD_INT 102
33869: PUSH
33870: LD_INT 103
33872: PUSH
33873: LD_INT 104
33875: PUSH
33876: LD_INT 105
33878: PUSH
33879: LD_INT 106
33881: PUSH
33882: LD_INT 107
33884: PUSH
33885: LD_INT 108
33887: PUSH
33888: LD_INT 109
33890: PUSH
33891: LD_INT 110
33893: PUSH
33894: LD_INT 111
33896: PUSH
33897: LD_INT 112
33899: PUSH
33900: LD_INT 113
33902: PUSH
33903: LD_INT 114
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: ST_TO_ADDR
33926: GO 34301
33928: LD_INT 18
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 34072
33936: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
33937: LD_ADDR_VAR 0 1
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: LD_INT 4
33947: PUSH
33948: LD_INT 5
33950: PUSH
33951: LD_INT 7
33953: PUSH
33954: LD_INT 11
33956: PUSH
33957: LD_INT 12
33959: PUSH
33960: LD_INT 15
33962: PUSH
33963: LD_INT 16
33965: PUSH
33966: LD_INT 20
33968: PUSH
33969: LD_INT 21
33971: PUSH
33972: LD_INT 22
33974: PUSH
33975: LD_INT 23
33977: PUSH
33978: LD_INT 25
33980: PUSH
33981: LD_INT 26
33983: PUSH
33984: LD_INT 30
33986: PUSH
33987: LD_INT 31
33989: PUSH
33990: LD_INT 32
33992: PUSH
33993: LD_INT 33
33995: PUSH
33996: LD_INT 34
33998: PUSH
33999: LD_INT 35
34001: PUSH
34002: LD_INT 36
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 101
34030: PUSH
34031: LD_INT 102
34033: PUSH
34034: LD_INT 103
34036: PUSH
34037: LD_INT 106
34039: PUSH
34040: LD_INT 108
34042: PUSH
34043: LD_INT 112
34045: PUSH
34046: LD_INT 113
34048: PUSH
34049: LD_INT 114
34051: PUSH
34052: LD_INT 115
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: ST_TO_ADDR
34070: GO 34301
34072: LD_INT 19
34074: DOUBLE
34075: EQUAL
34076: IFTRUE 34080
34078: GO 34300
34080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
34081: LD_ADDR_VAR 0 1
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: LD_INT 2
34091: PUSH
34092: LD_INT 3
34094: PUSH
34095: LD_INT 4
34097: PUSH
34098: LD_INT 5
34100: PUSH
34101: LD_INT 6
34103: PUSH
34104: LD_INT 7
34106: PUSH
34107: LD_INT 8
34109: PUSH
34110: LD_INT 9
34112: PUSH
34113: LD_INT 10
34115: PUSH
34116: LD_INT 11
34118: PUSH
34119: LD_INT 12
34121: PUSH
34122: LD_INT 13
34124: PUSH
34125: LD_INT 14
34127: PUSH
34128: LD_INT 15
34130: PUSH
34131: LD_INT 16
34133: PUSH
34134: LD_INT 17
34136: PUSH
34137: LD_INT 18
34139: PUSH
34140: LD_INT 19
34142: PUSH
34143: LD_INT 20
34145: PUSH
34146: LD_INT 21
34148: PUSH
34149: LD_INT 22
34151: PUSH
34152: LD_INT 23
34154: PUSH
34155: LD_INT 24
34157: PUSH
34158: LD_INT 25
34160: PUSH
34161: LD_INT 26
34163: PUSH
34164: LD_INT 27
34166: PUSH
34167: LD_INT 28
34169: PUSH
34170: LD_INT 29
34172: PUSH
34173: LD_INT 30
34175: PUSH
34176: LD_INT 31
34178: PUSH
34179: LD_INT 32
34181: PUSH
34182: LD_INT 33
34184: PUSH
34185: LD_INT 34
34187: PUSH
34188: LD_INT 35
34190: PUSH
34191: LD_INT 36
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 101
34234: PUSH
34235: LD_INT 102
34237: PUSH
34238: LD_INT 103
34240: PUSH
34241: LD_INT 104
34243: PUSH
34244: LD_INT 105
34246: PUSH
34247: LD_INT 106
34249: PUSH
34250: LD_INT 107
34252: PUSH
34253: LD_INT 108
34255: PUSH
34256: LD_INT 109
34258: PUSH
34259: LD_INT 110
34261: PUSH
34262: LD_INT 111
34264: PUSH
34265: LD_INT 112
34267: PUSH
34268: LD_INT 113
34270: PUSH
34271: LD_INT 114
34273: PUSH
34274: LD_INT 115
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: ST_TO_ADDR
34298: GO 34301
34300: POP
// end else
34301: GO 34520
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
34303: LD_ADDR_VAR 0 1
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 4
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: LD_INT 6
34325: PUSH
34326: LD_INT 7
34328: PUSH
34329: LD_INT 8
34331: PUSH
34332: LD_INT 9
34334: PUSH
34335: LD_INT 10
34337: PUSH
34338: LD_INT 11
34340: PUSH
34341: LD_INT 12
34343: PUSH
34344: LD_INT 13
34346: PUSH
34347: LD_INT 14
34349: PUSH
34350: LD_INT 15
34352: PUSH
34353: LD_INT 16
34355: PUSH
34356: LD_INT 17
34358: PUSH
34359: LD_INT 18
34361: PUSH
34362: LD_INT 19
34364: PUSH
34365: LD_INT 20
34367: PUSH
34368: LD_INT 21
34370: PUSH
34371: LD_INT 22
34373: PUSH
34374: LD_INT 23
34376: PUSH
34377: LD_INT 24
34379: PUSH
34380: LD_INT 25
34382: PUSH
34383: LD_INT 26
34385: PUSH
34386: LD_INT 27
34388: PUSH
34389: LD_INT 28
34391: PUSH
34392: LD_INT 29
34394: PUSH
34395: LD_INT 30
34397: PUSH
34398: LD_INT 31
34400: PUSH
34401: LD_INT 32
34403: PUSH
34404: LD_INT 33
34406: PUSH
34407: LD_INT 34
34409: PUSH
34410: LD_INT 35
34412: PUSH
34413: LD_INT 36
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 101
34456: PUSH
34457: LD_INT 102
34459: PUSH
34460: LD_INT 103
34462: PUSH
34463: LD_INT 104
34465: PUSH
34466: LD_INT 105
34468: PUSH
34469: LD_INT 106
34471: PUSH
34472: LD_INT 107
34474: PUSH
34475: LD_INT 108
34477: PUSH
34478: LD_INT 109
34480: PUSH
34481: LD_INT 110
34483: PUSH
34484: LD_INT 111
34486: PUSH
34487: LD_INT 112
34489: PUSH
34490: LD_INT 113
34492: PUSH
34493: LD_INT 114
34495: PUSH
34496: LD_INT 115
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: ST_TO_ADDR
// if result then
34520: LD_VAR 0 1
34524: IFFALSE 34813
// begin normal :=  ;
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_STRING 
34533: ST_TO_ADDR
// hardcore :=  ;
34534: LD_ADDR_VAR 0 4
34538: PUSH
34539: LD_STRING 
34541: ST_TO_ADDR
// for i = 1 to normalCounter do
34542: LD_ADDR_VAR 0 5
34546: PUSH
34547: DOUBLE
34548: LD_INT 1
34550: DEC
34551: ST_TO_ADDR
34552: LD_EXP 88
34556: PUSH
34557: FOR_TO
34558: IFFALSE 34659
// begin tmp := 0 ;
34560: LD_ADDR_VAR 0 2
34564: PUSH
34565: LD_STRING 0
34567: ST_TO_ADDR
// if result [ 1 ] then
34568: LD_VAR 0 1
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: IFFALSE 34641
// if result [ 1 ] [ 1 ] = i then
34578: LD_VAR 0 1
34582: PUSH
34583: LD_INT 1
34585: ARRAY
34586: PUSH
34587: LD_INT 1
34589: ARRAY
34590: PUSH
34591: LD_VAR 0 5
34595: EQUAL
34596: IFFALSE 34641
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
34598: LD_ADDR_VAR 0 1
34602: PUSH
34603: LD_VAR 0 1
34607: PPUSH
34608: LD_INT 1
34610: PPUSH
34611: LD_VAR 0 1
34615: PUSH
34616: LD_INT 1
34618: ARRAY
34619: PPUSH
34620: LD_INT 1
34622: PPUSH
34623: CALL_OW 3
34627: PPUSH
34628: CALL_OW 1
34632: ST_TO_ADDR
// tmp := 1 ;
34633: LD_ADDR_VAR 0 2
34637: PUSH
34638: LD_STRING 1
34640: ST_TO_ADDR
// end ; normal := normal & tmp ;
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_VAR 0 3
34650: PUSH
34651: LD_VAR 0 2
34655: STR
34656: ST_TO_ADDR
// end ;
34657: GO 34557
34659: POP
34660: POP
// for i = 1 to hardcoreCounter do
34661: LD_ADDR_VAR 0 5
34665: PUSH
34666: DOUBLE
34667: LD_INT 1
34669: DEC
34670: ST_TO_ADDR
34671: LD_EXP 89
34675: PUSH
34676: FOR_TO
34677: IFFALSE 34782
// begin tmp := 0 ;
34679: LD_ADDR_VAR 0 2
34683: PUSH
34684: LD_STRING 0
34686: ST_TO_ADDR
// if result [ 2 ] then
34687: LD_VAR 0 1
34691: PUSH
34692: LD_INT 2
34694: ARRAY
34695: IFFALSE 34764
// if result [ 2 ] [ 1 ] = 100 + i then
34697: LD_VAR 0 1
34701: PUSH
34702: LD_INT 2
34704: ARRAY
34705: PUSH
34706: LD_INT 1
34708: ARRAY
34709: PUSH
34710: LD_INT 100
34712: PUSH
34713: LD_VAR 0 5
34717: PLUS
34718: EQUAL
34719: IFFALSE 34764
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
34721: LD_ADDR_VAR 0 1
34725: PUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: LD_INT 2
34733: PPUSH
34734: LD_VAR 0 1
34738: PUSH
34739: LD_INT 2
34741: ARRAY
34742: PPUSH
34743: LD_INT 1
34745: PPUSH
34746: CALL_OW 3
34750: PPUSH
34751: CALL_OW 1
34755: ST_TO_ADDR
// tmp := 1 ;
34756: LD_ADDR_VAR 0 2
34760: PUSH
34761: LD_STRING 1
34763: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
34764: LD_ADDR_VAR 0 4
34768: PUSH
34769: LD_VAR 0 4
34773: PUSH
34774: LD_VAR 0 2
34778: STR
34779: ST_TO_ADDR
// end ;
34780: GO 34676
34782: POP
34783: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
34784: LD_STRING getStreamItemsFromMission("
34786: PUSH
34787: LD_VAR 0 3
34791: STR
34792: PUSH
34793: LD_STRING ","
34795: STR
34796: PUSH
34797: LD_VAR 0 4
34801: STR
34802: PUSH
34803: LD_STRING ")
34805: STR
34806: PPUSH
34807: CALL_OW 559
// end else
34811: GO 34820
// ToLua ( getStreamItemsFromMission("","") ) ;
34813: LD_STRING getStreamItemsFromMission("","")
34815: PPUSH
34816: CALL_OW 559
// end ;
34820: LD_VAR 0 1
34824: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
34825: LD_EXP 87
34829: PUSH
34830: LD_EXP 92
34834: AND
34835: IFFALSE 34959
34837: GO 34839
34839: DISABLE
34840: LD_INT 0
34842: PPUSH
34843: PPUSH
// begin enable ;
34844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34845: LD_ADDR_VAR 0 2
34849: PUSH
34850: LD_INT 22
34852: PUSH
34853: LD_OWVAR 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 34
34867: PUSH
34868: LD_INT 7
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 34
34877: PUSH
34878: LD_INT 45
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 34
34887: PUSH
34888: LD_INT 28
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 34
34897: PUSH
34898: LD_INT 47
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PPUSH
34916: CALL_OW 69
34920: ST_TO_ADDR
// if not tmp then
34921: LD_VAR 0 2
34925: NOT
34926: IFFALSE 34930
// exit ;
34928: GO 34959
// for i in tmp do
34930: LD_ADDR_VAR 0 1
34934: PUSH
34935: LD_VAR 0 2
34939: PUSH
34940: FOR_IN
34941: IFFALSE 34957
// begin SetLives ( i , 0 ) ;
34943: LD_VAR 0 1
34947: PPUSH
34948: LD_INT 0
34950: PPUSH
34951: CALL_OW 234
// end ;
34955: GO 34940
34957: POP
34958: POP
// end ;
34959: PPOPN 2
34961: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34962: LD_EXP 87
34966: PUSH
34967: LD_EXP 93
34971: AND
34972: IFFALSE 35056
34974: GO 34976
34976: DISABLE
34977: LD_INT 0
34979: PPUSH
34980: PPUSH
// begin enable ;
34981: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34982: LD_ADDR_VAR 0 2
34986: PUSH
34987: LD_INT 22
34989: PUSH
34990: LD_OWVAR 2
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 32
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PPUSH
35013: CALL_OW 69
35017: ST_TO_ADDR
// if not tmp then
35018: LD_VAR 0 2
35022: NOT
35023: IFFALSE 35027
// exit ;
35025: GO 35056
// for i in tmp do
35027: LD_ADDR_VAR 0 1
35031: PUSH
35032: LD_VAR 0 2
35036: PUSH
35037: FOR_IN
35038: IFFALSE 35054
// begin SetLives ( i , 0 ) ;
35040: LD_VAR 0 1
35044: PPUSH
35045: LD_INT 0
35047: PPUSH
35048: CALL_OW 234
// end ;
35052: GO 35037
35054: POP
35055: POP
// end ;
35056: PPOPN 2
35058: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
35059: LD_EXP 87
35063: PUSH
35064: LD_EXP 90
35068: AND
35069: IFFALSE 35162
35071: GO 35073
35073: DISABLE
35074: LD_INT 0
35076: PPUSH
// begin enable ;
35077: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
35078: LD_ADDR_VAR 0 1
35082: PUSH
35083: LD_INT 22
35085: PUSH
35086: LD_OWVAR 2
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 25
35100: PUSH
35101: LD_INT 5
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 25
35110: PUSH
35111: LD_INT 9
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 25
35120: PUSH
35121: LD_INT 8
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PPUSH
35138: CALL_OW 69
35142: PUSH
35143: FOR_IN
35144: IFFALSE 35160
// begin SetClass ( i , 1 ) ;
35146: LD_VAR 0 1
35150: PPUSH
35151: LD_INT 1
35153: PPUSH
35154: CALL_OW 336
// end ;
35158: GO 35143
35160: POP
35161: POP
// end ;
35162: PPOPN 1
35164: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
35165: LD_EXP 87
35169: PUSH
35170: LD_EXP 91
35174: AND
35175: PUSH
35176: LD_OWVAR 65
35180: PUSH
35181: LD_INT 7
35183: LESS
35184: AND
35185: IFFALSE 35199
35187: GO 35189
35189: DISABLE
// begin enable ;
35190: ENABLE
// game_speed := 7 ;
35191: LD_ADDR_OWVAR 65
35195: PUSH
35196: LD_INT 7
35198: ST_TO_ADDR
// end ;
35199: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
35200: LD_EXP 87
35204: PUSH
35205: LD_EXP 94
35209: AND
35210: IFFALSE 35412
35212: GO 35214
35214: DISABLE
35215: LD_INT 0
35217: PPUSH
35218: PPUSH
35219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: LD_INT 81
35227: PUSH
35228: LD_OWVAR 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 21
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PPUSH
35251: CALL_OW 69
35255: ST_TO_ADDR
// if not tmp then
35256: LD_VAR 0 3
35260: NOT
35261: IFFALSE 35265
// exit ;
35263: GO 35412
// if tmp > 5 then
35265: LD_VAR 0 3
35269: PUSH
35270: LD_INT 5
35272: GREATER
35273: IFFALSE 35285
// k := 5 else
35275: LD_ADDR_VAR 0 2
35279: PUSH
35280: LD_INT 5
35282: ST_TO_ADDR
35283: GO 35295
// k := tmp ;
35285: LD_ADDR_VAR 0 2
35289: PUSH
35290: LD_VAR 0 3
35294: ST_TO_ADDR
// for i := 1 to k do
35295: LD_ADDR_VAR 0 1
35299: PUSH
35300: DOUBLE
35301: LD_INT 1
35303: DEC
35304: ST_TO_ADDR
35305: LD_VAR 0 2
35309: PUSH
35310: FOR_TO
35311: IFFALSE 35410
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
35313: LD_VAR 0 3
35317: PUSH
35318: LD_VAR 0 1
35322: ARRAY
35323: PPUSH
35324: LD_VAR 0 1
35328: PUSH
35329: LD_INT 4
35331: MOD
35332: PUSH
35333: LD_INT 1
35335: PLUS
35336: PPUSH
35337: CALL_OW 259
35341: PUSH
35342: LD_INT 10
35344: LESS
35345: IFFALSE 35408
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
35347: LD_VAR 0 3
35351: PUSH
35352: LD_VAR 0 1
35356: ARRAY
35357: PPUSH
35358: LD_VAR 0 1
35362: PUSH
35363: LD_INT 4
35365: MOD
35366: PUSH
35367: LD_INT 1
35369: PLUS
35370: PPUSH
35371: LD_VAR 0 3
35375: PUSH
35376: LD_VAR 0 1
35380: ARRAY
35381: PPUSH
35382: LD_VAR 0 1
35386: PUSH
35387: LD_INT 4
35389: MOD
35390: PUSH
35391: LD_INT 1
35393: PLUS
35394: PPUSH
35395: CALL_OW 259
35399: PUSH
35400: LD_INT 1
35402: PLUS
35403: PPUSH
35404: CALL_OW 237
35408: GO 35310
35410: POP
35411: POP
// end ;
35412: PPOPN 3
35414: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35415: LD_EXP 87
35419: PUSH
35420: LD_EXP 95
35424: AND
35425: IFFALSE 35445
35427: GO 35429
35429: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35430: LD_INT 4
35432: PPUSH
35433: LD_OWVAR 2
35437: PPUSH
35438: LD_INT 0
35440: PPUSH
35441: CALL_OW 324
35445: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35446: LD_EXP 87
35450: PUSH
35451: LD_EXP 124
35455: AND
35456: IFFALSE 35476
35458: GO 35460
35460: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35461: LD_INT 19
35463: PPUSH
35464: LD_OWVAR 2
35468: PPUSH
35469: LD_INT 0
35471: PPUSH
35472: CALL_OW 324
35476: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35477: LD_EXP 87
35481: PUSH
35482: LD_EXP 96
35486: AND
35487: IFFALSE 35589
35489: GO 35491
35491: DISABLE
35492: LD_INT 0
35494: PPUSH
35495: PPUSH
// begin enable ;
35496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35497: LD_ADDR_VAR 0 2
35501: PUSH
35502: LD_INT 22
35504: PUSH
35505: LD_OWVAR 2
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: LD_INT 34
35519: PUSH
35520: LD_INT 11
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 34
35529: PUSH
35530: LD_INT 30
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 69
35550: ST_TO_ADDR
// if not tmp then
35551: LD_VAR 0 2
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 35589
// for i in tmp do
35560: LD_ADDR_VAR 0 1
35564: PUSH
35565: LD_VAR 0 2
35569: PUSH
35570: FOR_IN
35571: IFFALSE 35587
// begin SetLives ( i , 0 ) ;
35573: LD_VAR 0 1
35577: PPUSH
35578: LD_INT 0
35580: PPUSH
35581: CALL_OW 234
// end ;
35585: GO 35570
35587: POP
35588: POP
// end ;
35589: PPOPN 2
35591: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35592: LD_EXP 87
35596: PUSH
35597: LD_EXP 97
35601: AND
35602: IFFALSE 35622
35604: GO 35606
35606: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35607: LD_INT 32
35609: PPUSH
35610: LD_OWVAR 2
35614: PPUSH
35615: LD_INT 0
35617: PPUSH
35618: CALL_OW 324
35622: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35623: LD_EXP 87
35627: PUSH
35628: LD_EXP 98
35632: AND
35633: IFFALSE 35814
35635: GO 35637
35637: DISABLE
35638: LD_INT 0
35640: PPUSH
35641: PPUSH
35642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35643: LD_ADDR_VAR 0 2
35647: PUSH
35648: LD_INT 22
35650: PUSH
35651: LD_OWVAR 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 33
35662: PUSH
35663: LD_INT 3
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PPUSH
35674: CALL_OW 69
35678: ST_TO_ADDR
// if not tmp then
35679: LD_VAR 0 2
35683: NOT
35684: IFFALSE 35688
// exit ;
35686: GO 35814
// side := 0 ;
35688: LD_ADDR_VAR 0 3
35692: PUSH
35693: LD_INT 0
35695: ST_TO_ADDR
// for i := 1 to 8 do
35696: LD_ADDR_VAR 0 1
35700: PUSH
35701: DOUBLE
35702: LD_INT 1
35704: DEC
35705: ST_TO_ADDR
35706: LD_INT 8
35708: PUSH
35709: FOR_TO
35710: IFFALSE 35758
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
35712: LD_OWVAR 2
35716: PUSH
35717: LD_VAR 0 1
35721: NONEQUAL
35722: PUSH
35723: LD_OWVAR 2
35727: PPUSH
35728: LD_VAR 0 1
35732: PPUSH
35733: CALL_OW 81
35737: PUSH
35738: LD_INT 2
35740: EQUAL
35741: AND
35742: IFFALSE 35756
// begin side := i ;
35744: LD_ADDR_VAR 0 3
35748: PUSH
35749: LD_VAR 0 1
35753: ST_TO_ADDR
// break ;
35754: GO 35758
// end ;
35756: GO 35709
35758: POP
35759: POP
// if not side then
35760: LD_VAR 0 3
35764: NOT
35765: IFFALSE 35769
// exit ;
35767: GO 35814
// for i := 1 to tmp do
35769: LD_ADDR_VAR 0 1
35773: PUSH
35774: DOUBLE
35775: LD_INT 1
35777: DEC
35778: ST_TO_ADDR
35779: LD_VAR 0 2
35783: PUSH
35784: FOR_TO
35785: IFFALSE 35812
// if Prob ( 60 ) then
35787: LD_INT 60
35789: PPUSH
35790: CALL_OW 13
35794: IFFALSE 35810
// SetSide ( i , side ) ;
35796: LD_VAR 0 1
35800: PPUSH
35801: LD_VAR 0 3
35805: PPUSH
35806: CALL_OW 235
35810: GO 35784
35812: POP
35813: POP
// end ;
35814: PPOPN 3
35816: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
35817: LD_EXP 87
35821: PUSH
35822: LD_EXP 100
35826: AND
35827: IFFALSE 35946
35829: GO 35831
35831: DISABLE
35832: LD_INT 0
35834: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35835: LD_ADDR_VAR 0 1
35839: PUSH
35840: LD_INT 22
35842: PUSH
35843: LD_OWVAR 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 21
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: LD_INT 23
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: PPUSH
35884: CALL_OW 69
35888: PUSH
35889: FOR_IN
35890: IFFALSE 35944
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35892: LD_VAR 0 1
35896: PPUSH
35897: CALL_OW 257
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: LD_INT 4
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: IN
35920: IFFALSE 35942
// SetClass ( un , rand ( 1 , 4 ) ) ;
35922: LD_VAR 0 1
35926: PPUSH
35927: LD_INT 1
35929: PPUSH
35930: LD_INT 4
35932: PPUSH
35933: CALL_OW 12
35937: PPUSH
35938: CALL_OW 336
35942: GO 35889
35944: POP
35945: POP
// end ;
35946: PPOPN 1
35948: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35949: LD_EXP 87
35953: PUSH
35954: LD_EXP 99
35958: AND
35959: IFFALSE 36038
35961: GO 35963
35963: DISABLE
35964: LD_INT 0
35966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35967: LD_ADDR_VAR 0 1
35971: PUSH
35972: LD_INT 22
35974: PUSH
35975: LD_OWVAR 2
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 21
35986: PUSH
35987: LD_INT 3
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PPUSH
35998: CALL_OW 69
36002: ST_TO_ADDR
// if not tmp then
36003: LD_VAR 0 1
36007: NOT
36008: IFFALSE 36012
// exit ;
36010: GO 36038
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
36012: LD_VAR 0 1
36016: PUSH
36017: LD_INT 1
36019: PPUSH
36020: LD_VAR 0 1
36024: PPUSH
36025: CALL_OW 12
36029: ARRAY
36030: PPUSH
36031: LD_INT 100
36033: PPUSH
36034: CALL_OW 234
// end ;
36038: PPOPN 1
36040: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
36041: LD_EXP 87
36045: PUSH
36046: LD_EXP 101
36050: AND
36051: IFFALSE 36149
36053: GO 36055
36055: DISABLE
36056: LD_INT 0
36058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36059: LD_ADDR_VAR 0 1
36063: PUSH
36064: LD_INT 22
36066: PUSH
36067: LD_OWVAR 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 21
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PPUSH
36090: CALL_OW 69
36094: ST_TO_ADDR
// if not tmp then
36095: LD_VAR 0 1
36099: NOT
36100: IFFALSE 36104
// exit ;
36102: GO 36149
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
36104: LD_VAR 0 1
36108: PUSH
36109: LD_INT 1
36111: PPUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL_OW 12
36121: ARRAY
36122: PPUSH
36123: LD_INT 1
36125: PPUSH
36126: LD_INT 4
36128: PPUSH
36129: CALL_OW 12
36133: PPUSH
36134: LD_INT 3000
36136: PPUSH
36137: LD_INT 9000
36139: PPUSH
36140: CALL_OW 12
36144: PPUSH
36145: CALL_OW 492
// end ;
36149: PPOPN 1
36151: END
// every 0 0$1 trigger StreamModeActive and sDepot do
36152: LD_EXP 87
36156: PUSH
36157: LD_EXP 102
36161: AND
36162: IFFALSE 36182
36164: GO 36166
36166: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
36167: LD_INT 1
36169: PPUSH
36170: LD_OWVAR 2
36174: PPUSH
36175: LD_INT 0
36177: PPUSH
36178: CALL_OW 324
36182: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
36183: LD_EXP 87
36187: PUSH
36188: LD_EXP 103
36192: AND
36193: IFFALSE 36276
36195: GO 36197
36197: DISABLE
36198: LD_INT 0
36200: PPUSH
36201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36202: LD_ADDR_VAR 0 2
36206: PUSH
36207: LD_INT 22
36209: PUSH
36210: LD_OWVAR 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 21
36221: PUSH
36222: LD_INT 3
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PPUSH
36233: CALL_OW 69
36237: ST_TO_ADDR
// if not tmp then
36238: LD_VAR 0 2
36242: NOT
36243: IFFALSE 36247
// exit ;
36245: GO 36276
// for i in tmp do
36247: LD_ADDR_VAR 0 1
36251: PUSH
36252: LD_VAR 0 2
36256: PUSH
36257: FOR_IN
36258: IFFALSE 36274
// SetBLevel ( i , 10 ) ;
36260: LD_VAR 0 1
36264: PPUSH
36265: LD_INT 10
36267: PPUSH
36268: CALL_OW 241
36272: GO 36257
36274: POP
36275: POP
// end ;
36276: PPOPN 2
36278: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
36279: LD_EXP 87
36283: PUSH
36284: LD_EXP 104
36288: AND
36289: IFFALSE 36400
36291: GO 36293
36293: DISABLE
36294: LD_INT 0
36296: PPUSH
36297: PPUSH
36298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36299: LD_ADDR_VAR 0 3
36303: PUSH
36304: LD_INT 22
36306: PUSH
36307: LD_OWVAR 2
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 25
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PPUSH
36330: CALL_OW 69
36334: ST_TO_ADDR
// if not tmp then
36335: LD_VAR 0 3
36339: NOT
36340: IFFALSE 36344
// exit ;
36342: GO 36400
// un := tmp [ rand ( 1 , tmp ) ] ;
36344: LD_ADDR_VAR 0 2
36348: PUSH
36349: LD_VAR 0 3
36353: PUSH
36354: LD_INT 1
36356: PPUSH
36357: LD_VAR 0 3
36361: PPUSH
36362: CALL_OW 12
36366: ARRAY
36367: ST_TO_ADDR
// if Crawls ( un ) then
36368: LD_VAR 0 2
36372: PPUSH
36373: CALL_OW 318
36377: IFFALSE 36388
// ComWalk ( un ) ;
36379: LD_VAR 0 2
36383: PPUSH
36384: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36388: LD_VAR 0 2
36392: PPUSH
36393: LD_INT 5
36395: PPUSH
36396: CALL_OW 336
// end ;
36400: PPOPN 3
36402: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
36403: LD_EXP 87
36407: PUSH
36408: LD_EXP 105
36412: AND
36413: PUSH
36414: LD_OWVAR 67
36418: PUSH
36419: LD_INT 3
36421: LESS
36422: AND
36423: IFFALSE 36442
36425: GO 36427
36427: DISABLE
// Difficulty := Difficulty + 1 ;
36428: LD_ADDR_OWVAR 67
36432: PUSH
36433: LD_OWVAR 67
36437: PUSH
36438: LD_INT 1
36440: PLUS
36441: ST_TO_ADDR
36442: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36443: LD_EXP 87
36447: PUSH
36448: LD_EXP 106
36452: AND
36453: IFFALSE 36556
36455: GO 36457
36457: DISABLE
36458: LD_INT 0
36460: PPUSH
// begin for i := 1 to 5 do
36461: LD_ADDR_VAR 0 1
36465: PUSH
36466: DOUBLE
36467: LD_INT 1
36469: DEC
36470: ST_TO_ADDR
36471: LD_INT 5
36473: PUSH
36474: FOR_TO
36475: IFFALSE 36554
// begin uc_nation := nation_nature ;
36477: LD_ADDR_OWVAR 21
36481: PUSH
36482: LD_INT 0
36484: ST_TO_ADDR
// uc_side := 0 ;
36485: LD_ADDR_OWVAR 20
36489: PUSH
36490: LD_INT 0
36492: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36493: LD_ADDR_OWVAR 29
36497: PUSH
36498: LD_INT 12
36500: PUSH
36501: LD_INT 12
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: ST_TO_ADDR
// hc_agressivity := 20 ;
36508: LD_ADDR_OWVAR 35
36512: PUSH
36513: LD_INT 20
36515: ST_TO_ADDR
// hc_class := class_tiger ;
36516: LD_ADDR_OWVAR 28
36520: PUSH
36521: LD_INT 14
36523: ST_TO_ADDR
// hc_gallery :=  ;
36524: LD_ADDR_OWVAR 33
36528: PUSH
36529: LD_STRING 
36531: ST_TO_ADDR
// hc_name :=  ;
36532: LD_ADDR_OWVAR 26
36536: PUSH
36537: LD_STRING 
36539: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36540: CALL_OW 44
36544: PPUSH
36545: LD_INT 0
36547: PPUSH
36548: CALL_OW 51
// end ;
36552: GO 36474
36554: POP
36555: POP
// end ;
36556: PPOPN 1
36558: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36559: LD_EXP 87
36563: PUSH
36564: LD_EXP 107
36568: AND
36569: IFFALSE 36578
36571: GO 36573
36573: DISABLE
// StreamSibBomb ;
36574: CALL 36579 0 0
36578: END
// export function StreamSibBomb ; var i , x , y ; begin
36579: LD_INT 0
36581: PPUSH
36582: PPUSH
36583: PPUSH
36584: PPUSH
// result := false ;
36585: LD_ADDR_VAR 0 1
36589: PUSH
36590: LD_INT 0
36592: ST_TO_ADDR
// for i := 1 to 16 do
36593: LD_ADDR_VAR 0 2
36597: PUSH
36598: DOUBLE
36599: LD_INT 1
36601: DEC
36602: ST_TO_ADDR
36603: LD_INT 16
36605: PUSH
36606: FOR_TO
36607: IFFALSE 36806
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36609: LD_ADDR_VAR 0 3
36613: PUSH
36614: LD_INT 10
36616: PUSH
36617: LD_INT 20
36619: PUSH
36620: LD_INT 30
36622: PUSH
36623: LD_INT 40
36625: PUSH
36626: LD_INT 50
36628: PUSH
36629: LD_INT 60
36631: PUSH
36632: LD_INT 70
36634: PUSH
36635: LD_INT 80
36637: PUSH
36638: LD_INT 90
36640: PUSH
36641: LD_INT 100
36643: PUSH
36644: LD_INT 110
36646: PUSH
36647: LD_INT 120
36649: PUSH
36650: LD_INT 130
36652: PUSH
36653: LD_INT 140
36655: PUSH
36656: LD_INT 150
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PPUSH
36679: LD_INT 15
36681: PPUSH
36682: CALL_OW 12
36686: ARRAY
36687: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36688: LD_ADDR_VAR 0 4
36692: PUSH
36693: LD_INT 10
36695: PUSH
36696: LD_INT 20
36698: PUSH
36699: LD_INT 30
36701: PUSH
36702: LD_INT 40
36704: PUSH
36705: LD_INT 50
36707: PUSH
36708: LD_INT 60
36710: PUSH
36711: LD_INT 70
36713: PUSH
36714: LD_INT 80
36716: PUSH
36717: LD_INT 90
36719: PUSH
36720: LD_INT 100
36722: PUSH
36723: LD_INT 110
36725: PUSH
36726: LD_INT 120
36728: PUSH
36729: LD_INT 130
36731: PUSH
36732: LD_INT 140
36734: PUSH
36735: LD_INT 150
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PPUSH
36758: LD_INT 15
36760: PPUSH
36761: CALL_OW 12
36765: ARRAY
36766: ST_TO_ADDR
// if ValidHex ( x , y ) then
36767: LD_VAR 0 3
36771: PPUSH
36772: LD_VAR 0 4
36776: PPUSH
36777: CALL_OW 488
36781: IFFALSE 36804
// begin result := [ x , y ] ;
36783: LD_ADDR_VAR 0 1
36787: PUSH
36788: LD_VAR 0 3
36792: PUSH
36793: LD_VAR 0 4
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: ST_TO_ADDR
// break ;
36802: GO 36806
// end ; end ;
36804: GO 36606
36806: POP
36807: POP
// if result then
36808: LD_VAR 0 1
36812: IFFALSE 36872
// begin ToLua ( playSibBomb() ) ;
36814: LD_STRING playSibBomb()
36816: PPUSH
36817: CALL_OW 559
// wait ( 0 0$14 ) ;
36821: LD_INT 490
36823: PPUSH
36824: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36828: LD_VAR 0 1
36832: PUSH
36833: LD_INT 1
36835: ARRAY
36836: PPUSH
36837: LD_VAR 0 1
36841: PUSH
36842: LD_INT 2
36844: ARRAY
36845: PPUSH
36846: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36850: LD_VAR 0 1
36854: PUSH
36855: LD_INT 1
36857: ARRAY
36858: PPUSH
36859: LD_VAR 0 1
36863: PUSH
36864: LD_INT 2
36866: ARRAY
36867: PPUSH
36868: CALL_OW 429
// end ; end ;
36872: LD_VAR 0 1
36876: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36877: LD_EXP 87
36881: PUSH
36882: LD_EXP 109
36886: AND
36887: IFFALSE 36899
36889: GO 36891
36891: DISABLE
// YouLost (  ) ;
36892: LD_STRING 
36894: PPUSH
36895: CALL_OW 104
36899: END
// every 0 0$1 trigger StreamModeActive and sFog do
36900: LD_EXP 87
36904: PUSH
36905: LD_EXP 108
36909: AND
36910: IFFALSE 36924
36912: GO 36914
36914: DISABLE
// FogOff ( your_side ) ;
36915: LD_OWVAR 2
36919: PPUSH
36920: CALL_OW 344
36924: END
// every 0 0$1 trigger StreamModeActive and sSun do
36925: LD_EXP 87
36929: PUSH
36930: LD_EXP 110
36934: AND
36935: IFFALSE 36963
36937: GO 36939
36939: DISABLE
// begin solar_recharge_percent := 0 ;
36940: LD_ADDR_OWVAR 79
36944: PUSH
36945: LD_INT 0
36947: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36948: LD_INT 10500
36950: PPUSH
36951: CALL_OW 67
// solar_recharge_percent := 100 ;
36955: LD_ADDR_OWVAR 79
36959: PUSH
36960: LD_INT 100
36962: ST_TO_ADDR
// end ;
36963: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36964: LD_EXP 87
36968: PUSH
36969: LD_EXP 111
36973: AND
36974: IFFALSE 37213
36976: GO 36978
36978: DISABLE
36979: LD_INT 0
36981: PPUSH
36982: PPUSH
36983: PPUSH
// begin tmp := [ ] ;
36984: LD_ADDR_VAR 0 3
36988: PUSH
36989: EMPTY
36990: ST_TO_ADDR
// for i := 1 to 6 do
36991: LD_ADDR_VAR 0 1
36995: PUSH
36996: DOUBLE
36997: LD_INT 1
36999: DEC
37000: ST_TO_ADDR
37001: LD_INT 6
37003: PUSH
37004: FOR_TO
37005: IFFALSE 37110
// begin uc_nation := nation_nature ;
37007: LD_ADDR_OWVAR 21
37011: PUSH
37012: LD_INT 0
37014: ST_TO_ADDR
// uc_side := 0 ;
37015: LD_ADDR_OWVAR 20
37019: PUSH
37020: LD_INT 0
37022: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37023: LD_ADDR_OWVAR 29
37027: PUSH
37028: LD_INT 12
37030: PUSH
37031: LD_INT 12
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// hc_agressivity := 20 ;
37038: LD_ADDR_OWVAR 35
37042: PUSH
37043: LD_INT 20
37045: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
37046: LD_ADDR_OWVAR 28
37050: PUSH
37051: LD_INT 17
37053: ST_TO_ADDR
// hc_gallery :=  ;
37054: LD_ADDR_OWVAR 33
37058: PUSH
37059: LD_STRING 
37061: ST_TO_ADDR
// hc_name :=  ;
37062: LD_ADDR_OWVAR 26
37066: PUSH
37067: LD_STRING 
37069: ST_TO_ADDR
// un := CreateHuman ;
37070: LD_ADDR_VAR 0 2
37074: PUSH
37075: CALL_OW 44
37079: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
37080: LD_VAR 0 2
37084: PPUSH
37085: LD_INT 1
37087: PPUSH
37088: CALL_OW 51
// tmp := tmp ^ un ;
37092: LD_ADDR_VAR 0 3
37096: PUSH
37097: LD_VAR 0 3
37101: PUSH
37102: LD_VAR 0 2
37106: ADD
37107: ST_TO_ADDR
// end ;
37108: GO 37004
37110: POP
37111: POP
// repeat wait ( 0 0$1 ) ;
37112: LD_INT 35
37114: PPUSH
37115: CALL_OW 67
// for un in tmp do
37119: LD_ADDR_VAR 0 2
37123: PUSH
37124: LD_VAR 0 3
37128: PUSH
37129: FOR_IN
37130: IFFALSE 37204
// begin if IsDead ( un ) then
37132: LD_VAR 0 2
37136: PPUSH
37137: CALL_OW 301
37141: IFFALSE 37161
// begin tmp := tmp diff un ;
37143: LD_ADDR_VAR 0 3
37147: PUSH
37148: LD_VAR 0 3
37152: PUSH
37153: LD_VAR 0 2
37157: DIFF
37158: ST_TO_ADDR
// continue ;
37159: GO 37129
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
37161: LD_VAR 0 2
37165: PPUSH
37166: LD_INT 3
37168: PUSH
37169: LD_INT 22
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PPUSH
37183: CALL_OW 69
37187: PPUSH
37188: LD_VAR 0 2
37192: PPUSH
37193: CALL_OW 74
37197: PPUSH
37198: CALL_OW 115
// end ;
37202: GO 37129
37204: POP
37205: POP
// until not tmp ;
37206: LD_VAR 0 3
37210: NOT
37211: IFFALSE 37112
// end ;
37213: PPOPN 3
37215: END
// every 0 0$1 trigger StreamModeActive and sTroll do
37216: LD_EXP 87
37220: PUSH
37221: LD_EXP 112
37225: AND
37226: IFFALSE 37280
37228: GO 37230
37230: DISABLE
// begin ToLua ( displayTroll(); ) ;
37231: LD_STRING displayTroll();
37233: PPUSH
37234: CALL_OW 559
// wait ( 3 3$00 ) ;
37238: LD_INT 6300
37240: PPUSH
37241: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37245: LD_STRING hideTroll();
37247: PPUSH
37248: CALL_OW 559
// wait ( 1 1$00 ) ;
37252: LD_INT 2100
37254: PPUSH
37255: CALL_OW 67
// ToLua ( displayTroll(); ) ;
37259: LD_STRING displayTroll();
37261: PPUSH
37262: CALL_OW 559
// wait ( 1 1$00 ) ;
37266: LD_INT 2100
37268: PPUSH
37269: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37273: LD_STRING hideTroll();
37275: PPUSH
37276: CALL_OW 559
// end ;
37280: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
37281: LD_EXP 87
37285: PUSH
37286: LD_EXP 113
37290: AND
37291: IFFALSE 37354
37293: GO 37295
37295: DISABLE
37296: LD_INT 0
37298: PPUSH
// begin p := 0 ;
37299: LD_ADDR_VAR 0 1
37303: PUSH
37304: LD_INT 0
37306: ST_TO_ADDR
// repeat game_speed := 1 ;
37307: LD_ADDR_OWVAR 65
37311: PUSH
37312: LD_INT 1
37314: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37315: LD_INT 35
37317: PPUSH
37318: CALL_OW 67
// p := p + 1 ;
37322: LD_ADDR_VAR 0 1
37326: PUSH
37327: LD_VAR 0 1
37331: PUSH
37332: LD_INT 1
37334: PLUS
37335: ST_TO_ADDR
// until p >= 60 ;
37336: LD_VAR 0 1
37340: PUSH
37341: LD_INT 60
37343: GREATEREQUAL
37344: IFFALSE 37307
// game_speed := 4 ;
37346: LD_ADDR_OWVAR 65
37350: PUSH
37351: LD_INT 4
37353: ST_TO_ADDR
// end ;
37354: PPOPN 1
37356: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37357: LD_EXP 87
37361: PUSH
37362: LD_EXP 114
37366: AND
37367: IFFALSE 37513
37369: GO 37371
37371: DISABLE
37372: LD_INT 0
37374: PPUSH
37375: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37376: LD_ADDR_VAR 0 1
37380: PUSH
37381: LD_INT 22
37383: PUSH
37384: LD_OWVAR 2
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: LD_INT 30
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 30
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PPUSH
37425: CALL_OW 69
37429: ST_TO_ADDR
// if not depot then
37430: LD_VAR 0 1
37434: NOT
37435: IFFALSE 37439
// exit ;
37437: GO 37513
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37439: LD_ADDR_VAR 0 2
37443: PUSH
37444: LD_VAR 0 1
37448: PUSH
37449: LD_INT 1
37451: PPUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: CALL_OW 12
37461: ARRAY
37462: PPUSH
37463: CALL_OW 274
37467: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37468: LD_VAR 0 2
37472: PPUSH
37473: LD_INT 1
37475: PPUSH
37476: LD_INT 0
37478: PPUSH
37479: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37483: LD_VAR 0 2
37487: PPUSH
37488: LD_INT 2
37490: PPUSH
37491: LD_INT 0
37493: PPUSH
37494: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37498: LD_VAR 0 2
37502: PPUSH
37503: LD_INT 3
37505: PPUSH
37506: LD_INT 0
37508: PPUSH
37509: CALL_OW 277
// end ;
37513: PPOPN 2
37515: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37516: LD_EXP 87
37520: PUSH
37521: LD_EXP 115
37525: AND
37526: IFFALSE 37623
37528: GO 37530
37530: DISABLE
37531: LD_INT 0
37533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37534: LD_ADDR_VAR 0 1
37538: PUSH
37539: LD_INT 22
37541: PUSH
37542: LD_OWVAR 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 21
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: LD_INT 23
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: PPUSH
37583: CALL_OW 69
37587: ST_TO_ADDR
// if not tmp then
37588: LD_VAR 0 1
37592: NOT
37593: IFFALSE 37597
// exit ;
37595: GO 37623
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37597: LD_VAR 0 1
37601: PUSH
37602: LD_INT 1
37604: PPUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: CALL_OW 12
37614: ARRAY
37615: PPUSH
37616: LD_INT 200
37618: PPUSH
37619: CALL_OW 234
// end ;
37623: PPOPN 1
37625: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37626: LD_EXP 87
37630: PUSH
37631: LD_EXP 116
37635: AND
37636: IFFALSE 37715
37638: GO 37640
37640: DISABLE
37641: LD_INT 0
37643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37644: LD_ADDR_VAR 0 1
37648: PUSH
37649: LD_INT 22
37651: PUSH
37652: LD_OWVAR 2
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 21
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PPUSH
37675: CALL_OW 69
37679: ST_TO_ADDR
// if not tmp then
37680: LD_VAR 0 1
37684: NOT
37685: IFFALSE 37689
// exit ;
37687: GO 37715
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
37689: LD_VAR 0 1
37693: PUSH
37694: LD_INT 1
37696: PPUSH
37697: LD_VAR 0 1
37701: PPUSH
37702: CALL_OW 12
37706: ARRAY
37707: PPUSH
37708: LD_INT 60
37710: PPUSH
37711: CALL_OW 234
// end ;
37715: PPOPN 1
37717: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
37718: LD_EXP 87
37722: PUSH
37723: LD_EXP 117
37727: AND
37728: IFFALSE 37827
37730: GO 37732
37732: DISABLE
37733: LD_INT 0
37735: PPUSH
37736: PPUSH
// begin enable ;
37737: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
37738: LD_ADDR_VAR 0 1
37742: PUSH
37743: LD_INT 22
37745: PUSH
37746: LD_OWVAR 2
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 61
37757: PUSH
37758: EMPTY
37759: LIST
37760: PUSH
37761: LD_INT 33
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: PPUSH
37776: CALL_OW 69
37780: ST_TO_ADDR
// if not tmp then
37781: LD_VAR 0 1
37785: NOT
37786: IFFALSE 37790
// exit ;
37788: GO 37827
// for i in tmp do
37790: LD_ADDR_VAR 0 2
37794: PUSH
37795: LD_VAR 0 1
37799: PUSH
37800: FOR_IN
37801: IFFALSE 37825
// if IsControledBy ( i ) then
37803: LD_VAR 0 2
37807: PPUSH
37808: CALL_OW 312
37812: IFFALSE 37823
// ComUnlink ( i ) ;
37814: LD_VAR 0 2
37818: PPUSH
37819: CALL_OW 136
37823: GO 37800
37825: POP
37826: POP
// end ;
37827: PPOPN 2
37829: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37830: LD_EXP 87
37834: PUSH
37835: LD_EXP 118
37839: AND
37840: IFFALSE 37980
37842: GO 37844
37844: DISABLE
37845: LD_INT 0
37847: PPUSH
37848: PPUSH
// begin ToLua ( displayPowell(); ) ;
37849: LD_STRING displayPowell();
37851: PPUSH
37852: CALL_OW 559
// uc_side := 0 ;
37856: LD_ADDR_OWVAR 20
37860: PUSH
37861: LD_INT 0
37863: ST_TO_ADDR
// uc_nation := 2 ;
37864: LD_ADDR_OWVAR 21
37868: PUSH
37869: LD_INT 2
37871: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37872: LD_ADDR_OWVAR 37
37876: PUSH
37877: LD_INT 14
37879: ST_TO_ADDR
// vc_engine := engine_siberite ;
37880: LD_ADDR_OWVAR 39
37884: PUSH
37885: LD_INT 3
37887: ST_TO_ADDR
// vc_control := control_apeman ;
37888: LD_ADDR_OWVAR 38
37892: PUSH
37893: LD_INT 5
37895: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37896: LD_ADDR_OWVAR 40
37900: PUSH
37901: LD_INT 29
37903: ST_TO_ADDR
// un := CreateVehicle ;
37904: LD_ADDR_VAR 0 2
37908: PUSH
37909: CALL_OW 45
37913: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_INT 1
37921: PPUSH
37922: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37926: LD_INT 35
37928: PPUSH
37929: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37933: LD_VAR 0 2
37937: PPUSH
37938: LD_INT 22
37940: PUSH
37941: LD_OWVAR 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 69
37954: PPUSH
37955: LD_VAR 0 2
37959: PPUSH
37960: CALL_OW 74
37964: PPUSH
37965: CALL_OW 115
// until IsDead ( un ) ;
37969: LD_VAR 0 2
37973: PPUSH
37974: CALL_OW 301
37978: IFFALSE 37926
// end ;
37980: PPOPN 2
37982: END
// every 0 0$1 trigger StreamModeActive and sStu do
37983: LD_EXP 87
37987: PUSH
37988: LD_EXP 126
37992: AND
37993: IFFALSE 38009
37995: GO 37997
37997: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37998: LD_STRING displayStucuk();
38000: PPUSH
38001: CALL_OW 559
// ResetFog ;
38005: CALL_OW 335
// end ;
38009: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
38010: LD_EXP 87
38014: PUSH
38015: LD_EXP 119
38019: AND
38020: IFFALSE 38161
38022: GO 38024
38024: DISABLE
38025: LD_INT 0
38027: PPUSH
38028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38029: LD_ADDR_VAR 0 2
38033: PUSH
38034: LD_INT 22
38036: PUSH
38037: LD_OWVAR 2
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 21
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PPUSH
38060: CALL_OW 69
38064: ST_TO_ADDR
// if not tmp then
38065: LD_VAR 0 2
38069: NOT
38070: IFFALSE 38074
// exit ;
38072: GO 38161
// un := tmp [ rand ( 1 , tmp ) ] ;
38074: LD_ADDR_VAR 0 1
38078: PUSH
38079: LD_VAR 0 2
38083: PUSH
38084: LD_INT 1
38086: PPUSH
38087: LD_VAR 0 2
38091: PPUSH
38092: CALL_OW 12
38096: ARRAY
38097: ST_TO_ADDR
// SetSide ( un , 0 ) ;
38098: LD_VAR 0 1
38102: PPUSH
38103: LD_INT 0
38105: PPUSH
38106: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
38110: LD_VAR 0 1
38114: PPUSH
38115: LD_OWVAR 3
38119: PUSH
38120: LD_VAR 0 1
38124: DIFF
38125: PPUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 74
38135: PPUSH
38136: CALL_OW 115
// wait ( 0 0$20 ) ;
38140: LD_INT 700
38142: PPUSH
38143: CALL_OW 67
// SetSide ( un , your_side ) ;
38147: LD_VAR 0 1
38151: PPUSH
38152: LD_OWVAR 2
38156: PPUSH
38157: CALL_OW 235
// end ;
38161: PPOPN 2
38163: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
38164: LD_EXP 87
38168: PUSH
38169: LD_EXP 120
38173: AND
38174: IFFALSE 38280
38176: GO 38178
38178: DISABLE
38179: LD_INT 0
38181: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38182: LD_ADDR_VAR 0 1
38186: PUSH
38187: LD_INT 22
38189: PUSH
38190: LD_OWVAR 2
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: PUSH
38202: LD_INT 30
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 30
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PPUSH
38231: CALL_OW 69
38235: ST_TO_ADDR
// if not depot then
38236: LD_VAR 0 1
38240: NOT
38241: IFFALSE 38245
// exit ;
38243: GO 38280
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
38245: LD_VAR 0 1
38249: PUSH
38250: LD_INT 1
38252: ARRAY
38253: PPUSH
38254: CALL_OW 250
38258: PPUSH
38259: LD_VAR 0 1
38263: PUSH
38264: LD_INT 1
38266: ARRAY
38267: PPUSH
38268: CALL_OW 251
38272: PPUSH
38273: LD_INT 70
38275: PPUSH
38276: CALL_OW 495
// end ;
38280: PPOPN 1
38282: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
38283: LD_EXP 87
38287: PUSH
38288: LD_EXP 121
38292: AND
38293: IFFALSE 38504
38295: GO 38297
38297: DISABLE
38298: LD_INT 0
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38305: LD_ADDR_VAR 0 5
38309: PUSH
38310: LD_INT 22
38312: PUSH
38313: LD_OWVAR 2
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 21
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PPUSH
38336: CALL_OW 69
38340: ST_TO_ADDR
// if not tmp then
38341: LD_VAR 0 5
38345: NOT
38346: IFFALSE 38350
// exit ;
38348: GO 38504
// for i in tmp do
38350: LD_ADDR_VAR 0 1
38354: PUSH
38355: LD_VAR 0 5
38359: PUSH
38360: FOR_IN
38361: IFFALSE 38502
// begin d := rand ( 0 , 5 ) ;
38363: LD_ADDR_VAR 0 4
38367: PUSH
38368: LD_INT 0
38370: PPUSH
38371: LD_INT 5
38373: PPUSH
38374: CALL_OW 12
38378: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38379: LD_ADDR_VAR 0 2
38383: PUSH
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 250
38393: PPUSH
38394: LD_VAR 0 4
38398: PPUSH
38399: LD_INT 3
38401: PPUSH
38402: LD_INT 12
38404: PPUSH
38405: CALL_OW 12
38409: PPUSH
38410: CALL_OW 272
38414: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38415: LD_ADDR_VAR 0 3
38419: PUSH
38420: LD_VAR 0 1
38424: PPUSH
38425: CALL_OW 251
38429: PPUSH
38430: LD_VAR 0 4
38434: PPUSH
38435: LD_INT 3
38437: PPUSH
38438: LD_INT 12
38440: PPUSH
38441: CALL_OW 12
38445: PPUSH
38446: CALL_OW 273
38450: ST_TO_ADDR
// if ValidHex ( x , y ) then
38451: LD_VAR 0 2
38455: PPUSH
38456: LD_VAR 0 3
38460: PPUSH
38461: CALL_OW 488
38465: IFFALSE 38500
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38467: LD_VAR 0 1
38471: PPUSH
38472: LD_VAR 0 2
38476: PPUSH
38477: LD_VAR 0 3
38481: PPUSH
38482: LD_INT 3
38484: PPUSH
38485: LD_INT 6
38487: PPUSH
38488: CALL_OW 12
38492: PPUSH
38493: LD_INT 1
38495: PPUSH
38496: CALL_OW 483
// end ;
38500: GO 38360
38502: POP
38503: POP
// end ;
38504: PPOPN 5
38506: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38507: LD_EXP 87
38511: PUSH
38512: LD_EXP 122
38516: AND
38517: IFFALSE 38611
38519: GO 38521
38521: DISABLE
38522: LD_INT 0
38524: PPUSH
38525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38526: LD_ADDR_VAR 0 2
38530: PUSH
38531: LD_INT 22
38533: PUSH
38534: LD_OWVAR 2
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 32
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 21
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: PPUSH
38568: CALL_OW 69
38572: ST_TO_ADDR
// if not tmp then
38573: LD_VAR 0 2
38577: NOT
38578: IFFALSE 38582
// exit ;
38580: GO 38611
// for i in tmp do
38582: LD_ADDR_VAR 0 1
38586: PUSH
38587: LD_VAR 0 2
38591: PUSH
38592: FOR_IN
38593: IFFALSE 38609
// SetFuel ( i , 0 ) ;
38595: LD_VAR 0 1
38599: PPUSH
38600: LD_INT 0
38602: PPUSH
38603: CALL_OW 240
38607: GO 38592
38609: POP
38610: POP
// end ;
38611: PPOPN 2
38613: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38614: LD_EXP 87
38618: PUSH
38619: LD_EXP 123
38623: AND
38624: IFFALSE 38690
38626: GO 38628
38628: DISABLE
38629: LD_INT 0
38631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38632: LD_ADDR_VAR 0 1
38636: PUSH
38637: LD_INT 22
38639: PUSH
38640: LD_OWVAR 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 30
38651: PUSH
38652: LD_INT 29
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PPUSH
38663: CALL_OW 69
38667: ST_TO_ADDR
// if not tmp then
38668: LD_VAR 0 1
38672: NOT
38673: IFFALSE 38677
// exit ;
38675: GO 38690
// DestroyUnit ( tmp [ 1 ] ) ;
38677: LD_VAR 0 1
38681: PUSH
38682: LD_INT 1
38684: ARRAY
38685: PPUSH
38686: CALL_OW 65
// end ;
38690: PPOPN 1
38692: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
38693: LD_EXP 87
38697: PUSH
38698: LD_EXP 125
38702: AND
38703: IFFALSE 38832
38705: GO 38707
38707: DISABLE
38708: LD_INT 0
38710: PPUSH
// begin uc_side := 0 ;
38711: LD_ADDR_OWVAR 20
38715: PUSH
38716: LD_INT 0
38718: ST_TO_ADDR
// uc_nation := nation_arabian ;
38719: LD_ADDR_OWVAR 21
38723: PUSH
38724: LD_INT 2
38726: ST_TO_ADDR
// hc_gallery :=  ;
38727: LD_ADDR_OWVAR 33
38731: PUSH
38732: LD_STRING 
38734: ST_TO_ADDR
// hc_name :=  ;
38735: LD_ADDR_OWVAR 26
38739: PUSH
38740: LD_STRING 
38742: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
38743: LD_INT 1
38745: PPUSH
38746: LD_INT 11
38748: PPUSH
38749: LD_INT 10
38751: PPUSH
38752: CALL_OW 380
// un := CreateHuman ;
38756: LD_ADDR_VAR 0 1
38760: PUSH
38761: CALL_OW 44
38765: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38766: LD_VAR 0 1
38770: PPUSH
38771: LD_INT 1
38773: PPUSH
38774: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38778: LD_INT 35
38780: PPUSH
38781: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38785: LD_VAR 0 1
38789: PPUSH
38790: LD_INT 22
38792: PUSH
38793: LD_OWVAR 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PPUSH
38802: CALL_OW 69
38806: PPUSH
38807: LD_VAR 0 1
38811: PPUSH
38812: CALL_OW 74
38816: PPUSH
38817: CALL_OW 115
// until IsDead ( un ) ;
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 301
38830: IFFALSE 38778
// end ;
38832: PPOPN 1
38834: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38835: LD_EXP 87
38839: PUSH
38840: LD_EXP 127
38844: AND
38845: IFFALSE 38857
38847: GO 38849
38849: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38850: LD_STRING earthquake(getX(game), 0, 32)
38852: PPUSH
38853: CALL_OW 559
38857: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38858: LD_EXP 87
38862: PUSH
38863: LD_EXP 128
38867: AND
38868: IFFALSE 38959
38870: GO 38872
38872: DISABLE
38873: LD_INT 0
38875: PPUSH
// begin enable ;
38876: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38877: LD_ADDR_VAR 0 1
38881: PUSH
38882: LD_INT 22
38884: PUSH
38885: LD_OWVAR 2
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 21
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 33
38906: PUSH
38907: LD_INT 3
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: PPUSH
38919: CALL_OW 69
38923: ST_TO_ADDR
// if not tmp then
38924: LD_VAR 0 1
38928: NOT
38929: IFFALSE 38933
// exit ;
38931: GO 38959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38933: LD_VAR 0 1
38937: PUSH
38938: LD_INT 1
38940: PPUSH
38941: LD_VAR 0 1
38945: PPUSH
38946: CALL_OW 12
38950: ARRAY
38951: PPUSH
38952: LD_INT 1
38954: PPUSH
38955: CALL_OW 234
// end ;
38959: PPOPN 1
38961: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38962: LD_EXP 87
38966: PUSH
38967: LD_EXP 129
38971: AND
38972: IFFALSE 39113
38974: GO 38976
38976: DISABLE
38977: LD_INT 0
38979: PPUSH
38980: PPUSH
38981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38982: LD_ADDR_VAR 0 3
38986: PUSH
38987: LD_INT 22
38989: PUSH
38990: LD_OWVAR 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 25
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PPUSH
39013: CALL_OW 69
39017: ST_TO_ADDR
// if not tmp then
39018: LD_VAR 0 3
39022: NOT
39023: IFFALSE 39027
// exit ;
39025: GO 39113
// un := tmp [ rand ( 1 , tmp ) ] ;
39027: LD_ADDR_VAR 0 2
39031: PUSH
39032: LD_VAR 0 3
39036: PUSH
39037: LD_INT 1
39039: PPUSH
39040: LD_VAR 0 3
39044: PPUSH
39045: CALL_OW 12
39049: ARRAY
39050: ST_TO_ADDR
// if Crawls ( un ) then
39051: LD_VAR 0 2
39055: PPUSH
39056: CALL_OW 318
39060: IFFALSE 39071
// ComWalk ( un ) ;
39062: LD_VAR 0 2
39066: PPUSH
39067: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
39071: LD_VAR 0 2
39075: PPUSH
39076: LD_INT 9
39078: PPUSH
39079: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
39083: LD_INT 28
39085: PPUSH
39086: LD_OWVAR 2
39090: PPUSH
39091: LD_INT 2
39093: PPUSH
39094: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
39098: LD_INT 29
39100: PPUSH
39101: LD_OWVAR 2
39105: PPUSH
39106: LD_INT 2
39108: PPUSH
39109: CALL_OW 322
// end ;
39113: PPOPN 3
39115: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
39116: LD_EXP 87
39120: PUSH
39121: LD_EXP 130
39125: AND
39126: IFFALSE 39237
39128: GO 39130
39130: DISABLE
39131: LD_INT 0
39133: PPUSH
39134: PPUSH
39135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39136: LD_ADDR_VAR 0 3
39140: PUSH
39141: LD_INT 22
39143: PUSH
39144: LD_OWVAR 2
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 25
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PPUSH
39167: CALL_OW 69
39171: ST_TO_ADDR
// if not tmp then
39172: LD_VAR 0 3
39176: NOT
39177: IFFALSE 39181
// exit ;
39179: GO 39237
// un := tmp [ rand ( 1 , tmp ) ] ;
39181: LD_ADDR_VAR 0 2
39185: PUSH
39186: LD_VAR 0 3
39190: PUSH
39191: LD_INT 1
39193: PPUSH
39194: LD_VAR 0 3
39198: PPUSH
39199: CALL_OW 12
39203: ARRAY
39204: ST_TO_ADDR
// if Crawls ( un ) then
39205: LD_VAR 0 2
39209: PPUSH
39210: CALL_OW 318
39214: IFFALSE 39225
// ComWalk ( un ) ;
39216: LD_VAR 0 2
39220: PPUSH
39221: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39225: LD_VAR 0 2
39229: PPUSH
39230: LD_INT 8
39232: PPUSH
39233: CALL_OW 336
// end ;
39237: PPOPN 3
39239: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
39240: LD_EXP 87
39244: PUSH
39245: LD_EXP 131
39249: AND
39250: IFFALSE 39394
39252: GO 39254
39254: DISABLE
39255: LD_INT 0
39257: PPUSH
39258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
39259: LD_ADDR_VAR 0 2
39263: PUSH
39264: LD_INT 22
39266: PUSH
39267: LD_OWVAR 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 21
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 34
39291: PUSH
39292: LD_INT 12
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 34
39301: PUSH
39302: LD_INT 51
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 34
39311: PUSH
39312: LD_INT 32
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: PPUSH
39330: CALL_OW 69
39334: ST_TO_ADDR
// if not tmp then
39335: LD_VAR 0 2
39339: NOT
39340: IFFALSE 39344
// exit ;
39342: GO 39394
// for i in tmp do
39344: LD_ADDR_VAR 0 1
39348: PUSH
39349: LD_VAR 0 2
39353: PUSH
39354: FOR_IN
39355: IFFALSE 39392
// if GetCargo ( i , mat_artifact ) = 0 then
39357: LD_VAR 0 1
39361: PPUSH
39362: LD_INT 4
39364: PPUSH
39365: CALL_OW 289
39369: PUSH
39370: LD_INT 0
39372: EQUAL
39373: IFFALSE 39390
// SetCargo ( i , mat_siberit , 100 ) ;
39375: LD_VAR 0 1
39379: PPUSH
39380: LD_INT 3
39382: PPUSH
39383: LD_INT 100
39385: PPUSH
39386: CALL_OW 290
39390: GO 39354
39392: POP
39393: POP
// end ;
39394: PPOPN 2
39396: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39397: LD_EXP 87
39401: PUSH
39402: LD_EXP 132
39406: AND
39407: IFFALSE 39590
39409: GO 39411
39411: DISABLE
39412: LD_INT 0
39414: PPUSH
39415: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39416: LD_ADDR_VAR 0 2
39420: PUSH
39421: LD_INT 22
39423: PUSH
39424: LD_OWVAR 2
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PPUSH
39433: CALL_OW 69
39437: ST_TO_ADDR
// if not tmp then
39438: LD_VAR 0 2
39442: NOT
39443: IFFALSE 39447
// exit ;
39445: GO 39590
// for i := 1 to 2 do
39447: LD_ADDR_VAR 0 1
39451: PUSH
39452: DOUBLE
39453: LD_INT 1
39455: DEC
39456: ST_TO_ADDR
39457: LD_INT 2
39459: PUSH
39460: FOR_TO
39461: IFFALSE 39588
// begin uc_side := your_side ;
39463: LD_ADDR_OWVAR 20
39467: PUSH
39468: LD_OWVAR 2
39472: ST_TO_ADDR
// uc_nation := nation_american ;
39473: LD_ADDR_OWVAR 21
39477: PUSH
39478: LD_INT 1
39480: ST_TO_ADDR
// vc_chassis := us_morphling ;
39481: LD_ADDR_OWVAR 37
39485: PUSH
39486: LD_INT 5
39488: ST_TO_ADDR
// vc_engine := engine_siberite ;
39489: LD_ADDR_OWVAR 39
39493: PUSH
39494: LD_INT 3
39496: ST_TO_ADDR
// vc_control := control_computer ;
39497: LD_ADDR_OWVAR 38
39501: PUSH
39502: LD_INT 3
39504: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39505: LD_ADDR_OWVAR 40
39509: PUSH
39510: LD_INT 10
39512: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39513: LD_VAR 0 2
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: PPUSH
39522: CALL_OW 310
39526: NOT
39527: IFFALSE 39574
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39529: CALL_OW 45
39533: PPUSH
39534: LD_VAR 0 2
39538: PUSH
39539: LD_INT 1
39541: ARRAY
39542: PPUSH
39543: CALL_OW 250
39547: PPUSH
39548: LD_VAR 0 2
39552: PUSH
39553: LD_INT 1
39555: ARRAY
39556: PPUSH
39557: CALL_OW 251
39561: PPUSH
39562: LD_INT 12
39564: PPUSH
39565: LD_INT 1
39567: PPUSH
39568: CALL_OW 50
39572: GO 39586
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39574: CALL_OW 45
39578: PPUSH
39579: LD_INT 1
39581: PPUSH
39582: CALL_OW 51
// end ;
39586: GO 39460
39588: POP
39589: POP
// end ;
39590: PPOPN 2
39592: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39593: LD_EXP 87
39597: PUSH
39598: LD_EXP 133
39602: AND
39603: IFFALSE 39825
39605: GO 39607
39607: DISABLE
39608: LD_INT 0
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39616: LD_ADDR_VAR 0 6
39620: PUSH
39621: LD_INT 22
39623: PUSH
39624: LD_OWVAR 2
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 21
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 3
39645: PUSH
39646: LD_INT 23
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: PPUSH
39665: CALL_OW 69
39669: ST_TO_ADDR
// if not tmp then
39670: LD_VAR 0 6
39674: NOT
39675: IFFALSE 39679
// exit ;
39677: GO 39825
// s1 := rand ( 1 , 4 ) ;
39679: LD_ADDR_VAR 0 2
39683: PUSH
39684: LD_INT 1
39686: PPUSH
39687: LD_INT 4
39689: PPUSH
39690: CALL_OW 12
39694: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
39695: LD_ADDR_VAR 0 4
39699: PUSH
39700: LD_VAR 0 6
39704: PUSH
39705: LD_INT 1
39707: ARRAY
39708: PPUSH
39709: LD_VAR 0 2
39713: PPUSH
39714: CALL_OW 259
39718: ST_TO_ADDR
// if s1 = 1 then
39719: LD_VAR 0 2
39723: PUSH
39724: LD_INT 1
39726: EQUAL
39727: IFFALSE 39747
// s2 := rand ( 2 , 4 ) else
39729: LD_ADDR_VAR 0 3
39733: PUSH
39734: LD_INT 2
39736: PPUSH
39737: LD_INT 4
39739: PPUSH
39740: CALL_OW 12
39744: ST_TO_ADDR
39745: GO 39755
// s2 := 1 ;
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_INT 1
39754: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
39755: LD_ADDR_VAR 0 5
39759: PUSH
39760: LD_VAR 0 6
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: PPUSH
39769: LD_VAR 0 3
39773: PPUSH
39774: CALL_OW 259
39778: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
39779: LD_VAR 0 6
39783: PUSH
39784: LD_INT 1
39786: ARRAY
39787: PPUSH
39788: LD_VAR 0 2
39792: PPUSH
39793: LD_VAR 0 5
39797: PPUSH
39798: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
39802: LD_VAR 0 6
39806: PUSH
39807: LD_INT 1
39809: ARRAY
39810: PPUSH
39811: LD_VAR 0 3
39815: PPUSH
39816: LD_VAR 0 4
39820: PPUSH
39821: CALL_OW 237
// end ;
39825: PPOPN 6
39827: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39828: LD_EXP 87
39832: PUSH
39833: LD_EXP 134
39837: AND
39838: IFFALSE 39917
39840: GO 39842
39842: DISABLE
39843: LD_INT 0
39845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39846: LD_ADDR_VAR 0 1
39850: PUSH
39851: LD_INT 22
39853: PUSH
39854: LD_OWVAR 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 30
39865: PUSH
39866: LD_INT 3
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PPUSH
39877: CALL_OW 69
39881: ST_TO_ADDR
// if not tmp then
39882: LD_VAR 0 1
39886: NOT
39887: IFFALSE 39891
// exit ;
39889: GO 39917
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39891: LD_VAR 0 1
39895: PUSH
39896: LD_INT 1
39898: PPUSH
39899: LD_VAR 0 1
39903: PPUSH
39904: CALL_OW 12
39908: ARRAY
39909: PPUSH
39910: LD_INT 1
39912: PPUSH
39913: CALL_OW 234
// end ;
39917: PPOPN 1
39919: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39920: LD_EXP 87
39924: PUSH
39925: LD_EXP 135
39929: AND
39930: IFFALSE 40042
39932: GO 39934
39934: DISABLE
39935: LD_INT 0
39937: PPUSH
39938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39939: LD_ADDR_VAR 0 2
39943: PUSH
39944: LD_INT 22
39946: PUSH
39947: LD_OWVAR 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 30
39961: PUSH
39962: LD_INT 27
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 30
39971: PUSH
39972: LD_INT 26
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 30
39981: PUSH
39982: LD_INT 28
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PPUSH
39999: CALL_OW 69
40003: ST_TO_ADDR
// if not tmp then
40004: LD_VAR 0 2
40008: NOT
40009: IFFALSE 40013
// exit ;
40011: GO 40042
// for i in tmp do
40013: LD_ADDR_VAR 0 1
40017: PUSH
40018: LD_VAR 0 2
40022: PUSH
40023: FOR_IN
40024: IFFALSE 40040
// SetLives ( i , 1 ) ;
40026: LD_VAR 0 1
40030: PPUSH
40031: LD_INT 1
40033: PPUSH
40034: CALL_OW 234
40038: GO 40023
40040: POP
40041: POP
// end ;
40042: PPOPN 2
40044: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
40045: LD_EXP 87
40049: PUSH
40050: LD_EXP 136
40054: AND
40055: IFFALSE 40329
40057: GO 40059
40059: DISABLE
40060: LD_INT 0
40062: PPUSH
40063: PPUSH
40064: PPUSH
// begin i := rand ( 1 , 7 ) ;
40065: LD_ADDR_VAR 0 1
40069: PUSH
40070: LD_INT 1
40072: PPUSH
40073: LD_INT 7
40075: PPUSH
40076: CALL_OW 12
40080: ST_TO_ADDR
// case i of 1 :
40081: LD_VAR 0 1
40085: PUSH
40086: LD_INT 1
40088: DOUBLE
40089: EQUAL
40090: IFTRUE 40094
40092: GO 40104
40094: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
40095: LD_STRING earthquake(getX(game), 0, 32)
40097: PPUSH
40098: CALL_OW 559
40102: GO 40329
40104: LD_INT 2
40106: DOUBLE
40107: EQUAL
40108: IFTRUE 40112
40110: GO 40126
40112: POP
// begin ToLua ( displayStucuk(); ) ;
40113: LD_STRING displayStucuk();
40115: PPUSH
40116: CALL_OW 559
// ResetFog ;
40120: CALL_OW 335
// end ; 3 :
40124: GO 40329
40126: LD_INT 3
40128: DOUBLE
40129: EQUAL
40130: IFTRUE 40134
40132: GO 40238
40134: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40135: LD_ADDR_VAR 0 2
40139: PUSH
40140: LD_INT 22
40142: PUSH
40143: LD_OWVAR 2
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 25
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PPUSH
40166: CALL_OW 69
40170: ST_TO_ADDR
// if not tmp then
40171: LD_VAR 0 2
40175: NOT
40176: IFFALSE 40180
// exit ;
40178: GO 40329
// un := tmp [ rand ( 1 , tmp ) ] ;
40180: LD_ADDR_VAR 0 3
40184: PUSH
40185: LD_VAR 0 2
40189: PUSH
40190: LD_INT 1
40192: PPUSH
40193: LD_VAR 0 2
40197: PPUSH
40198: CALL_OW 12
40202: ARRAY
40203: ST_TO_ADDR
// if Crawls ( un ) then
40204: LD_VAR 0 3
40208: PPUSH
40209: CALL_OW 318
40213: IFFALSE 40224
// ComWalk ( un ) ;
40215: LD_VAR 0 3
40219: PPUSH
40220: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40224: LD_VAR 0 3
40228: PPUSH
40229: LD_INT 8
40231: PPUSH
40232: CALL_OW 336
// end ; 4 :
40236: GO 40329
40238: LD_INT 4
40240: DOUBLE
40241: EQUAL
40242: IFTRUE 40246
40244: GO 40307
40246: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40247: LD_ADDR_VAR 0 2
40251: PUSH
40252: LD_INT 22
40254: PUSH
40255: LD_OWVAR 2
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 30
40266: PUSH
40267: LD_INT 29
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PPUSH
40278: CALL_OW 69
40282: ST_TO_ADDR
// if not tmp then
40283: LD_VAR 0 2
40287: NOT
40288: IFFALSE 40292
// exit ;
40290: GO 40329
// DestroyUnit ( tmp [ 1 ] ) ;
40292: LD_VAR 0 2
40296: PUSH
40297: LD_INT 1
40299: ARRAY
40300: PPUSH
40301: CALL_OW 65
// end ; 5 .. 7 :
40305: GO 40329
40307: LD_INT 5
40309: DOUBLE
40310: GREATEREQUAL
40311: IFFALSE 40319
40313: LD_INT 7
40315: DOUBLE
40316: LESSEQUAL
40317: IFTRUE 40321
40319: GO 40328
40321: POP
// StreamSibBomb ; end ;
40322: CALL 36579 0 0
40326: GO 40329
40328: POP
// end ;
40329: PPOPN 3
40331: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
40332: LD_EXP 87
40336: PUSH
40337: LD_EXP 137
40341: AND
40342: IFFALSE 40498
40344: GO 40346
40346: DISABLE
40347: LD_INT 0
40349: PPUSH
40350: PPUSH
40351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
40352: LD_ADDR_VAR 0 2
40356: PUSH
40357: LD_INT 81
40359: PUSH
40360: LD_OWVAR 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 21
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 21
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PPUSH
40401: CALL_OW 69
40405: ST_TO_ADDR
// if not tmp then
40406: LD_VAR 0 2
40410: NOT
40411: IFFALSE 40415
// exit ;
40413: GO 40498
// p := 0 ;
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_INT 0
40422: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40423: LD_INT 35
40425: PPUSH
40426: CALL_OW 67
// p := p + 1 ;
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_VAR 0 3
40439: PUSH
40440: LD_INT 1
40442: PLUS
40443: ST_TO_ADDR
// for i in tmp do
40444: LD_ADDR_VAR 0 1
40448: PUSH
40449: LD_VAR 0 2
40453: PUSH
40454: FOR_IN
40455: IFFALSE 40486
// if GetLives ( i ) < 1000 then
40457: LD_VAR 0 1
40461: PPUSH
40462: CALL_OW 256
40466: PUSH
40467: LD_INT 1000
40469: LESS
40470: IFFALSE 40484
// SetLives ( i , 1000 ) ;
40472: LD_VAR 0 1
40476: PPUSH
40477: LD_INT 1000
40479: PPUSH
40480: CALL_OW 234
40484: GO 40454
40486: POP
40487: POP
// until p > 20 ;
40488: LD_VAR 0 3
40492: PUSH
40493: LD_INT 20
40495: GREATER
40496: IFFALSE 40423
// end ;
40498: PPOPN 3
40500: END
// every 0 0$1 trigger StreamModeActive and sTime do
40501: LD_EXP 87
40505: PUSH
40506: LD_EXP 138
40510: AND
40511: IFFALSE 40546
40513: GO 40515
40515: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40516: LD_INT 28
40518: PPUSH
40519: LD_OWVAR 2
40523: PPUSH
40524: LD_INT 2
40526: PPUSH
40527: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40531: LD_INT 30
40533: PPUSH
40534: LD_OWVAR 2
40538: PPUSH
40539: LD_INT 2
40541: PPUSH
40542: CALL_OW 322
// end ;
40546: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40547: LD_EXP 87
40551: PUSH
40552: LD_EXP 139
40556: AND
40557: IFFALSE 40678
40559: GO 40561
40561: DISABLE
40562: LD_INT 0
40564: PPUSH
40565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40566: LD_ADDR_VAR 0 2
40570: PUSH
40571: LD_INT 22
40573: PUSH
40574: LD_OWVAR 2
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 21
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 3
40595: PUSH
40596: LD_INT 23
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PPUSH
40615: CALL_OW 69
40619: ST_TO_ADDR
// if not tmp then
40620: LD_VAR 0 2
40624: NOT
40625: IFFALSE 40629
// exit ;
40627: GO 40678
// for i in tmp do
40629: LD_ADDR_VAR 0 1
40633: PUSH
40634: LD_VAR 0 2
40638: PUSH
40639: FOR_IN
40640: IFFALSE 40676
// begin if Crawls ( i ) then
40642: LD_VAR 0 1
40646: PPUSH
40647: CALL_OW 318
40651: IFFALSE 40662
// ComWalk ( i ) ;
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 138
// SetClass ( i , 2 ) ;
40662: LD_VAR 0 1
40666: PPUSH
40667: LD_INT 2
40669: PPUSH
40670: CALL_OW 336
// end ;
40674: GO 40639
40676: POP
40677: POP
// end ;
40678: PPOPN 2
40680: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
40681: LD_EXP 87
40685: PUSH
40686: LD_EXP 140
40690: AND
40691: IFFALSE 40972
40693: GO 40695
40695: DISABLE
40696: LD_INT 0
40698: PPUSH
40699: PPUSH
40700: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
40701: LD_OWVAR 2
40705: PPUSH
40706: LD_INT 9
40708: PPUSH
40709: LD_INT 1
40711: PPUSH
40712: LD_INT 1
40714: PPUSH
40715: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
40719: LD_INT 9
40721: PPUSH
40722: LD_OWVAR 2
40726: PPUSH
40727: CALL_OW 343
// uc_side := 9 ;
40731: LD_ADDR_OWVAR 20
40735: PUSH
40736: LD_INT 9
40738: ST_TO_ADDR
// uc_nation := 2 ;
40739: LD_ADDR_OWVAR 21
40743: PUSH
40744: LD_INT 2
40746: ST_TO_ADDR
// hc_name := Dark Warrior ;
40747: LD_ADDR_OWVAR 26
40751: PUSH
40752: LD_STRING Dark Warrior
40754: ST_TO_ADDR
// hc_gallery :=  ;
40755: LD_ADDR_OWVAR 33
40759: PUSH
40760: LD_STRING 
40762: ST_TO_ADDR
// hc_noskilllimit := true ;
40763: LD_ADDR_OWVAR 76
40767: PUSH
40768: LD_INT 1
40770: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
40771: LD_ADDR_OWVAR 31
40775: PUSH
40776: LD_INT 30
40778: PUSH
40779: LD_INT 30
40781: PUSH
40782: LD_INT 30
40784: PUSH
40785: LD_INT 30
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: ST_TO_ADDR
// un := CreateHuman ;
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: CALL_OW 44
40803: ST_TO_ADDR
// hc_noskilllimit := false ;
40804: LD_ADDR_OWVAR 76
40808: PUSH
40809: LD_INT 0
40811: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40812: LD_VAR 0 3
40816: PPUSH
40817: LD_INT 1
40819: PPUSH
40820: CALL_OW 51
// p := 0 ;
40824: LD_ADDR_VAR 0 2
40828: PUSH
40829: LD_INT 0
40831: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40832: LD_INT 35
40834: PPUSH
40835: CALL_OW 67
// p := p + 1 ;
40839: LD_ADDR_VAR 0 2
40843: PUSH
40844: LD_VAR 0 2
40848: PUSH
40849: LD_INT 1
40851: PLUS
40852: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40853: LD_VAR 0 3
40857: PPUSH
40858: CALL_OW 256
40862: PUSH
40863: LD_INT 1000
40865: LESS
40866: IFFALSE 40880
// SetLives ( un , 1000 ) ;
40868: LD_VAR 0 3
40872: PPUSH
40873: LD_INT 1000
40875: PPUSH
40876: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40880: LD_VAR 0 3
40884: PPUSH
40885: LD_INT 81
40887: PUSH
40888: LD_OWVAR 2
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 91
40899: PUSH
40900: LD_VAR 0 3
40904: PUSH
40905: LD_INT 30
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PPUSH
40917: CALL_OW 69
40921: PPUSH
40922: LD_VAR 0 3
40926: PPUSH
40927: CALL_OW 74
40931: PPUSH
40932: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
40936: LD_VAR 0 2
40940: PUSH
40941: LD_INT 60
40943: GREATER
40944: PUSH
40945: LD_VAR 0 3
40949: PPUSH
40950: CALL_OW 301
40954: OR
40955: IFFALSE 40832
// if un then
40957: LD_VAR 0 3
40961: IFFALSE 40972
// RemoveUnit ( un ) ;
40963: LD_VAR 0 3
40967: PPUSH
40968: CALL_OW 64
// end ;
40972: PPOPN 3
40974: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40975: LD_INT 0
40977: PPUSH
// case cmd of 301 :
40978: LD_VAR 0 1
40982: PUSH
40983: LD_INT 301
40985: DOUBLE
40986: EQUAL
40987: IFTRUE 40991
40989: GO 41023
40991: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
40992: LD_VAR 0 6
40996: PPUSH
40997: LD_VAR 0 7
41001: PPUSH
41002: LD_VAR 0 8
41006: PPUSH
41007: LD_VAR 0 4
41011: PPUSH
41012: LD_VAR 0 5
41016: PPUSH
41017: CALL 42224 0 5
41021: GO 41144
41023: LD_INT 302
41025: DOUBLE
41026: EQUAL
41027: IFTRUE 41031
41029: GO 41068
41031: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
41032: LD_VAR 0 6
41036: PPUSH
41037: LD_VAR 0 7
41041: PPUSH
41042: LD_VAR 0 8
41046: PPUSH
41047: LD_VAR 0 9
41051: PPUSH
41052: LD_VAR 0 4
41056: PPUSH
41057: LD_VAR 0 5
41061: PPUSH
41062: CALL 42315 0 6
41066: GO 41144
41068: LD_INT 303
41070: DOUBLE
41071: EQUAL
41072: IFTRUE 41076
41074: GO 41113
41076: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
41077: LD_VAR 0 6
41081: PPUSH
41082: LD_VAR 0 7
41086: PPUSH
41087: LD_VAR 0 8
41091: PPUSH
41092: LD_VAR 0 9
41096: PPUSH
41097: LD_VAR 0 4
41101: PPUSH
41102: LD_VAR 0 5
41106: PPUSH
41107: CALL 41149 0 6
41111: GO 41144
41113: LD_INT 304
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41143
41121: POP
// hHackTeleport ( unit , x , y ) ; end ;
41122: LD_VAR 0 2
41126: PPUSH
41127: LD_VAR 0 4
41131: PPUSH
41132: LD_VAR 0 5
41136: PPUSH
41137: CALL 42908 0 3
41141: GO 41144
41143: POP
// end ;
41144: LD_VAR 0 12
41148: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
41149: LD_INT 0
41151: PPUSH
41152: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
41153: LD_VAR 0 1
41157: PUSH
41158: LD_INT 1
41160: LESS
41161: PUSH
41162: LD_VAR 0 1
41166: PUSH
41167: LD_INT 3
41169: GREATER
41170: OR
41171: PUSH
41172: LD_VAR 0 5
41176: PPUSH
41177: LD_VAR 0 6
41181: PPUSH
41182: CALL_OW 428
41186: OR
41187: IFFALSE 41191
// exit ;
41189: GO 41911
// uc_side := your_side ;
41191: LD_ADDR_OWVAR 20
41195: PUSH
41196: LD_OWVAR 2
41200: ST_TO_ADDR
// uc_nation := nation ;
41201: LD_ADDR_OWVAR 21
41205: PUSH
41206: LD_VAR 0 1
41210: ST_TO_ADDR
// bc_level = 1 ;
41211: LD_ADDR_OWVAR 43
41215: PUSH
41216: LD_INT 1
41218: ST_TO_ADDR
// case btype of 1 :
41219: LD_VAR 0 2
41223: PUSH
41224: LD_INT 1
41226: DOUBLE
41227: EQUAL
41228: IFTRUE 41232
41230: GO 41243
41232: POP
// bc_type := b_depot ; 2 :
41233: LD_ADDR_OWVAR 42
41237: PUSH
41238: LD_INT 0
41240: ST_TO_ADDR
41241: GO 41855
41243: LD_INT 2
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41251
41249: GO 41262
41251: POP
// bc_type := b_warehouse ; 3 :
41252: LD_ADDR_OWVAR 42
41256: PUSH
41257: LD_INT 1
41259: ST_TO_ADDR
41260: GO 41855
41262: LD_INT 3
41264: DOUBLE
41265: EQUAL
41266: IFTRUE 41270
41268: GO 41281
41270: POP
// bc_type := b_lab ; 4 .. 9 :
41271: LD_ADDR_OWVAR 42
41275: PUSH
41276: LD_INT 6
41278: ST_TO_ADDR
41279: GO 41855
41281: LD_INT 4
41283: DOUBLE
41284: GREATEREQUAL
41285: IFFALSE 41293
41287: LD_INT 9
41289: DOUBLE
41290: LESSEQUAL
41291: IFTRUE 41295
41293: GO 41347
41295: POP
// begin bc_type := b_lab_half ;
41296: LD_ADDR_OWVAR 42
41300: PUSH
41301: LD_INT 7
41303: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
41304: LD_ADDR_OWVAR 44
41308: PUSH
41309: LD_INT 10
41311: PUSH
41312: LD_INT 11
41314: PUSH
41315: LD_INT 12
41317: PUSH
41318: LD_INT 15
41320: PUSH
41321: LD_INT 14
41323: PUSH
41324: LD_INT 13
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: PUSH
41335: LD_VAR 0 2
41339: PUSH
41340: LD_INT 3
41342: MINUS
41343: ARRAY
41344: ST_TO_ADDR
// end ; 10 .. 13 :
41345: GO 41855
41347: LD_INT 10
41349: DOUBLE
41350: GREATEREQUAL
41351: IFFALSE 41359
41353: LD_INT 13
41355: DOUBLE
41356: LESSEQUAL
41357: IFTRUE 41361
41359: GO 41438
41361: POP
// begin bc_type := b_lab_full ;
41362: LD_ADDR_OWVAR 42
41366: PUSH
41367: LD_INT 8
41369: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
41370: LD_ADDR_OWVAR 44
41374: PUSH
41375: LD_INT 10
41377: PUSH
41378: LD_INT 12
41380: PUSH
41381: LD_INT 14
41383: PUSH
41384: LD_INT 13
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: PUSH
41393: LD_VAR 0 2
41397: PUSH
41398: LD_INT 9
41400: MINUS
41401: ARRAY
41402: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
41403: LD_ADDR_OWVAR 45
41407: PUSH
41408: LD_INT 11
41410: PUSH
41411: LD_INT 15
41413: PUSH
41414: LD_INT 12
41416: PUSH
41417: LD_INT 15
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: PUSH
41426: LD_VAR 0 2
41430: PUSH
41431: LD_INT 9
41433: MINUS
41434: ARRAY
41435: ST_TO_ADDR
// end ; 14 :
41436: GO 41855
41438: LD_INT 14
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41446
41444: GO 41457
41446: POP
// bc_type := b_workshop ; 15 :
41447: LD_ADDR_OWVAR 42
41451: PUSH
41452: LD_INT 2
41454: ST_TO_ADDR
41455: GO 41855
41457: LD_INT 15
41459: DOUBLE
41460: EQUAL
41461: IFTRUE 41465
41463: GO 41476
41465: POP
// bc_type := b_factory ; 16 :
41466: LD_ADDR_OWVAR 42
41470: PUSH
41471: LD_INT 3
41473: ST_TO_ADDR
41474: GO 41855
41476: LD_INT 16
41478: DOUBLE
41479: EQUAL
41480: IFTRUE 41484
41482: GO 41495
41484: POP
// bc_type := b_ext_gun ; 17 :
41485: LD_ADDR_OWVAR 42
41489: PUSH
41490: LD_INT 17
41492: ST_TO_ADDR
41493: GO 41855
41495: LD_INT 17
41497: DOUBLE
41498: EQUAL
41499: IFTRUE 41503
41501: GO 41531
41503: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
41504: LD_ADDR_OWVAR 42
41508: PUSH
41509: LD_INT 19
41511: PUSH
41512: LD_INT 23
41514: PUSH
41515: LD_INT 19
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: PUSH
41523: LD_VAR 0 1
41527: ARRAY
41528: ST_TO_ADDR
41529: GO 41855
41531: LD_INT 18
41533: DOUBLE
41534: EQUAL
41535: IFTRUE 41539
41537: GO 41550
41539: POP
// bc_type := b_ext_radar ; 19 :
41540: LD_ADDR_OWVAR 42
41544: PUSH
41545: LD_INT 20
41547: ST_TO_ADDR
41548: GO 41855
41550: LD_INT 19
41552: DOUBLE
41553: EQUAL
41554: IFTRUE 41558
41556: GO 41569
41558: POP
// bc_type := b_ext_radio ; 20 :
41559: LD_ADDR_OWVAR 42
41563: PUSH
41564: LD_INT 22
41566: ST_TO_ADDR
41567: GO 41855
41569: LD_INT 20
41571: DOUBLE
41572: EQUAL
41573: IFTRUE 41577
41575: GO 41588
41577: POP
// bc_type := b_ext_siberium ; 21 :
41578: LD_ADDR_OWVAR 42
41582: PUSH
41583: LD_INT 21
41585: ST_TO_ADDR
41586: GO 41855
41588: LD_INT 21
41590: DOUBLE
41591: EQUAL
41592: IFTRUE 41596
41594: GO 41607
41596: POP
// bc_type := b_ext_computer ; 22 :
41597: LD_ADDR_OWVAR 42
41601: PUSH
41602: LD_INT 24
41604: ST_TO_ADDR
41605: GO 41855
41607: LD_INT 22
41609: DOUBLE
41610: EQUAL
41611: IFTRUE 41615
41613: GO 41626
41615: POP
// bc_type := b_ext_track ; 23 :
41616: LD_ADDR_OWVAR 42
41620: PUSH
41621: LD_INT 16
41623: ST_TO_ADDR
41624: GO 41855
41626: LD_INT 23
41628: DOUBLE
41629: EQUAL
41630: IFTRUE 41634
41632: GO 41645
41634: POP
// bc_type := b_ext_laser ; 24 :
41635: LD_ADDR_OWVAR 42
41639: PUSH
41640: LD_INT 25
41642: ST_TO_ADDR
41643: GO 41855
41645: LD_INT 24
41647: DOUBLE
41648: EQUAL
41649: IFTRUE 41653
41651: GO 41664
41653: POP
// bc_type := b_control_tower ; 25 :
41654: LD_ADDR_OWVAR 42
41658: PUSH
41659: LD_INT 36
41661: ST_TO_ADDR
41662: GO 41855
41664: LD_INT 25
41666: DOUBLE
41667: EQUAL
41668: IFTRUE 41672
41670: GO 41683
41672: POP
// bc_type := b_breastwork ; 26 :
41673: LD_ADDR_OWVAR 42
41677: PUSH
41678: LD_INT 31
41680: ST_TO_ADDR
41681: GO 41855
41683: LD_INT 26
41685: DOUBLE
41686: EQUAL
41687: IFTRUE 41691
41689: GO 41702
41691: POP
// bc_type := b_bunker ; 27 :
41692: LD_ADDR_OWVAR 42
41696: PUSH
41697: LD_INT 32
41699: ST_TO_ADDR
41700: GO 41855
41702: LD_INT 27
41704: DOUBLE
41705: EQUAL
41706: IFTRUE 41710
41708: GO 41721
41710: POP
// bc_type := b_turret ; 28 :
41711: LD_ADDR_OWVAR 42
41715: PUSH
41716: LD_INT 33
41718: ST_TO_ADDR
41719: GO 41855
41721: LD_INT 28
41723: DOUBLE
41724: EQUAL
41725: IFTRUE 41729
41727: GO 41740
41729: POP
// bc_type := b_armoury ; 29 :
41730: LD_ADDR_OWVAR 42
41734: PUSH
41735: LD_INT 4
41737: ST_TO_ADDR
41738: GO 41855
41740: LD_INT 29
41742: DOUBLE
41743: EQUAL
41744: IFTRUE 41748
41746: GO 41759
41748: POP
// bc_type := b_barracks ; 30 :
41749: LD_ADDR_OWVAR 42
41753: PUSH
41754: LD_INT 5
41756: ST_TO_ADDR
41757: GO 41855
41759: LD_INT 30
41761: DOUBLE
41762: EQUAL
41763: IFTRUE 41767
41765: GO 41778
41767: POP
// bc_type := b_solar_power ; 31 :
41768: LD_ADDR_OWVAR 42
41772: PUSH
41773: LD_INT 27
41775: ST_TO_ADDR
41776: GO 41855
41778: LD_INT 31
41780: DOUBLE
41781: EQUAL
41782: IFTRUE 41786
41784: GO 41797
41786: POP
// bc_type := b_oil_power ; 32 :
41787: LD_ADDR_OWVAR 42
41791: PUSH
41792: LD_INT 26
41794: ST_TO_ADDR
41795: GO 41855
41797: LD_INT 32
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41805
41803: GO 41816
41805: POP
// bc_type := b_siberite_power ; 33 :
41806: LD_ADDR_OWVAR 42
41810: PUSH
41811: LD_INT 28
41813: ST_TO_ADDR
41814: GO 41855
41816: LD_INT 33
41818: DOUBLE
41819: EQUAL
41820: IFTRUE 41824
41822: GO 41835
41824: POP
// bc_type := b_oil_mine ; 34 :
41825: LD_ADDR_OWVAR 42
41829: PUSH
41830: LD_INT 29
41832: ST_TO_ADDR
41833: GO 41855
41835: LD_INT 34
41837: DOUBLE
41838: EQUAL
41839: IFTRUE 41843
41841: GO 41854
41843: POP
// bc_type := b_siberite_mine ; end ;
41844: LD_ADDR_OWVAR 42
41848: PUSH
41849: LD_INT 30
41851: ST_TO_ADDR
41852: GO 41855
41854: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41855: LD_ADDR_VAR 0 8
41859: PUSH
41860: LD_VAR 0 5
41864: PPUSH
41865: LD_VAR 0 6
41869: PPUSH
41870: LD_VAR 0 3
41874: PPUSH
41875: CALL_OW 47
41879: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41880: LD_OWVAR 42
41884: PUSH
41885: LD_INT 32
41887: PUSH
41888: LD_INT 33
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: IN
41895: IFFALSE 41911
// PlaceWeaponTurret ( b , weapon ) ;
41897: LD_VAR 0 8
41901: PPUSH
41902: LD_VAR 0 4
41906: PPUSH
41907: CALL_OW 431
// end ;
41911: LD_VAR 0 7
41915: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41916: LD_INT 0
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41922: LD_ADDR_VAR 0 4
41926: PUSH
41927: LD_INT 22
41929: PUSH
41930: LD_OWVAR 2
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 30
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 30
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PPUSH
41971: CALL_OW 69
41975: ST_TO_ADDR
// if not tmp then
41976: LD_VAR 0 4
41980: NOT
41981: IFFALSE 41985
// exit ;
41983: GO 42044
// for i in tmp do
41985: LD_ADDR_VAR 0 2
41989: PUSH
41990: LD_VAR 0 4
41994: PUSH
41995: FOR_IN
41996: IFFALSE 42042
// for j = 1 to 3 do
41998: LD_ADDR_VAR 0 3
42002: PUSH
42003: DOUBLE
42004: LD_INT 1
42006: DEC
42007: ST_TO_ADDR
42008: LD_INT 3
42010: PUSH
42011: FOR_TO
42012: IFFALSE 42038
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
42014: LD_VAR 0 2
42018: PPUSH
42019: CALL_OW 274
42023: PPUSH
42024: LD_VAR 0 3
42028: PPUSH
42029: LD_INT 99999
42031: PPUSH
42032: CALL_OW 277
42036: GO 42011
42038: POP
42039: POP
42040: GO 41995
42042: POP
42043: POP
// end ;
42044: LD_VAR 0 1
42048: RET
// export function hHackSetLevel10 ; var i , j ; begin
42049: LD_INT 0
42051: PPUSH
42052: PPUSH
42053: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42054: LD_ADDR_VAR 0 2
42058: PUSH
42059: LD_INT 21
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PPUSH
42069: CALL_OW 69
42073: PUSH
42074: FOR_IN
42075: IFFALSE 42127
// if IsSelected ( i ) then
42077: LD_VAR 0 2
42081: PPUSH
42082: CALL_OW 306
42086: IFFALSE 42125
// begin for j := 1 to 4 do
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: DOUBLE
42094: LD_INT 1
42096: DEC
42097: ST_TO_ADDR
42098: LD_INT 4
42100: PUSH
42101: FOR_TO
42102: IFFALSE 42123
// SetSkill ( i , j , 10 ) ;
42104: LD_VAR 0 2
42108: PPUSH
42109: LD_VAR 0 3
42113: PPUSH
42114: LD_INT 10
42116: PPUSH
42117: CALL_OW 237
42121: GO 42101
42123: POP
42124: POP
// end ;
42125: GO 42074
42127: POP
42128: POP
// end ;
42129: LD_VAR 0 1
42133: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
42134: LD_INT 0
42136: PPUSH
42137: PPUSH
42138: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
42139: LD_ADDR_VAR 0 2
42143: PUSH
42144: LD_INT 22
42146: PUSH
42147: LD_OWVAR 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 21
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PPUSH
42170: CALL_OW 69
42174: PUSH
42175: FOR_IN
42176: IFFALSE 42217
// begin for j := 1 to 4 do
42178: LD_ADDR_VAR 0 3
42182: PUSH
42183: DOUBLE
42184: LD_INT 1
42186: DEC
42187: ST_TO_ADDR
42188: LD_INT 4
42190: PUSH
42191: FOR_TO
42192: IFFALSE 42213
// SetSkill ( i , j , 10 ) ;
42194: LD_VAR 0 2
42198: PPUSH
42199: LD_VAR 0 3
42203: PPUSH
42204: LD_INT 10
42206: PPUSH
42207: CALL_OW 237
42211: GO 42191
42213: POP
42214: POP
// end ;
42215: GO 42175
42217: POP
42218: POP
// end ;
42219: LD_VAR 0 1
42223: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
42224: LD_INT 0
42226: PPUSH
// uc_side := your_side ;
42227: LD_ADDR_OWVAR 20
42231: PUSH
42232: LD_OWVAR 2
42236: ST_TO_ADDR
// uc_nation := nation ;
42237: LD_ADDR_OWVAR 21
42241: PUSH
42242: LD_VAR 0 1
42246: ST_TO_ADDR
// InitHc ;
42247: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
42251: LD_INT 0
42253: PPUSH
42254: LD_VAR 0 2
42258: PPUSH
42259: LD_VAR 0 3
42263: PPUSH
42264: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
42268: LD_VAR 0 4
42272: PPUSH
42273: LD_VAR 0 5
42277: PPUSH
42278: CALL_OW 428
42282: PUSH
42283: LD_INT 0
42285: EQUAL
42286: IFFALSE 42310
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
42288: CALL_OW 44
42292: PPUSH
42293: LD_VAR 0 4
42297: PPUSH
42298: LD_VAR 0 5
42302: PPUSH
42303: LD_INT 1
42305: PPUSH
42306: CALL_OW 48
// end ;
42310: LD_VAR 0 6
42314: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
42315: LD_INT 0
42317: PPUSH
42318: PPUSH
// uc_side := your_side ;
42319: LD_ADDR_OWVAR 20
42323: PUSH
42324: LD_OWVAR 2
42328: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
42329: LD_VAR 0 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 4
42345: PUSH
42346: LD_INT 5
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: IN
42356: IFFALSE 42368
// uc_nation := nation_american else
42358: LD_ADDR_OWVAR 21
42362: PUSH
42363: LD_INT 1
42365: ST_TO_ADDR
42366: GO 42411
// if chassis in [ 11 , 12 , 13 , 14 ] then
42368: LD_VAR 0 1
42372: PUSH
42373: LD_INT 11
42375: PUSH
42376: LD_INT 12
42378: PUSH
42379: LD_INT 13
42381: PUSH
42382: LD_INT 14
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: IN
42391: IFFALSE 42403
// uc_nation := nation_arabian else
42393: LD_ADDR_OWVAR 21
42397: PUSH
42398: LD_INT 2
42400: ST_TO_ADDR
42401: GO 42411
// uc_nation := nation_russian ;
42403: LD_ADDR_OWVAR 21
42407: PUSH
42408: LD_INT 3
42410: ST_TO_ADDR
// vc_chassis := chassis ;
42411: LD_ADDR_OWVAR 37
42415: PUSH
42416: LD_VAR 0 1
42420: ST_TO_ADDR
// vc_engine := engine ;
42421: LD_ADDR_OWVAR 39
42425: PUSH
42426: LD_VAR 0 2
42430: ST_TO_ADDR
// vc_control := control ;
42431: LD_ADDR_OWVAR 38
42435: PUSH
42436: LD_VAR 0 3
42440: ST_TO_ADDR
// vc_weapon := weapon ;
42441: LD_ADDR_OWVAR 40
42445: PUSH
42446: LD_VAR 0 4
42450: ST_TO_ADDR
// un := CreateVehicle ;
42451: LD_ADDR_VAR 0 8
42455: PUSH
42456: CALL_OW 45
42460: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
42461: LD_VAR 0 8
42465: PPUSH
42466: LD_INT 0
42468: PPUSH
42469: LD_INT 5
42471: PPUSH
42472: CALL_OW 12
42476: PPUSH
42477: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
42481: LD_VAR 0 8
42485: PPUSH
42486: LD_VAR 0 5
42490: PPUSH
42491: LD_VAR 0 6
42495: PPUSH
42496: LD_INT 1
42498: PPUSH
42499: CALL_OW 48
// end ;
42503: LD_VAR 0 7
42507: RET
// export hInvincible ; every 1 do
42508: GO 42510
42510: DISABLE
// hInvincible := [ ] ;
42511: LD_ADDR_EXP 141
42515: PUSH
42516: EMPTY
42517: ST_TO_ADDR
42518: END
// every 10 do var i ;
42519: GO 42521
42521: DISABLE
42522: LD_INT 0
42524: PPUSH
// begin enable ;
42525: ENABLE
// if not hInvincible then
42526: LD_EXP 141
42530: NOT
42531: IFFALSE 42535
// exit ;
42533: GO 42579
// for i in hInvincible do
42535: LD_ADDR_VAR 0 1
42539: PUSH
42540: LD_EXP 141
42544: PUSH
42545: FOR_IN
42546: IFFALSE 42577
// if GetLives ( i ) < 1000 then
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 256
42557: PUSH
42558: LD_INT 1000
42560: LESS
42561: IFFALSE 42575
// SetLives ( i , 1000 ) ;
42563: LD_VAR 0 1
42567: PPUSH
42568: LD_INT 1000
42570: PPUSH
42571: CALL_OW 234
42575: GO 42545
42577: POP
42578: POP
// end ;
42579: PPOPN 1
42581: END
// export function hHackInvincible ; var i ; begin
42582: LD_INT 0
42584: PPUSH
42585: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
42586: LD_ADDR_VAR 0 2
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 21
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 21
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: PPUSH
42619: CALL_OW 69
42623: PUSH
42624: FOR_IN
42625: IFFALSE 42686
// if IsSelected ( i ) then
42627: LD_VAR 0 2
42631: PPUSH
42632: CALL_OW 306
42636: IFFALSE 42684
// begin if i in hInvincible then
42638: LD_VAR 0 2
42642: PUSH
42643: LD_EXP 141
42647: IN
42648: IFFALSE 42668
// hInvincible := hInvincible diff i else
42650: LD_ADDR_EXP 141
42654: PUSH
42655: LD_EXP 141
42659: PUSH
42660: LD_VAR 0 2
42664: DIFF
42665: ST_TO_ADDR
42666: GO 42684
// hInvincible := hInvincible union i ;
42668: LD_ADDR_EXP 141
42672: PUSH
42673: LD_EXP 141
42677: PUSH
42678: LD_VAR 0 2
42682: UNION
42683: ST_TO_ADDR
// end ;
42684: GO 42624
42686: POP
42687: POP
// end ;
42688: LD_VAR 0 1
42692: RET
// export function hHackInvisible ; var i , j ; begin
42693: LD_INT 0
42695: PPUSH
42696: PPUSH
42697: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42698: LD_ADDR_VAR 0 2
42702: PUSH
42703: LD_INT 21
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PPUSH
42713: CALL_OW 69
42717: PUSH
42718: FOR_IN
42719: IFFALSE 42743
// if IsSelected ( i ) then
42721: LD_VAR 0 2
42725: PPUSH
42726: CALL_OW 306
42730: IFFALSE 42741
// ComForceInvisible ( i ) ;
42732: LD_VAR 0 2
42736: PPUSH
42737: CALL_OW 496
42741: GO 42718
42743: POP
42744: POP
// end ;
42745: LD_VAR 0 1
42749: RET
// export function hHackChangeYourSide ; begin
42750: LD_INT 0
42752: PPUSH
// if your_side = 8 then
42753: LD_OWVAR 2
42757: PUSH
42758: LD_INT 8
42760: EQUAL
42761: IFFALSE 42773
// your_side := 0 else
42763: LD_ADDR_OWVAR 2
42767: PUSH
42768: LD_INT 0
42770: ST_TO_ADDR
42771: GO 42787
// your_side := your_side + 1 ;
42773: LD_ADDR_OWVAR 2
42777: PUSH
42778: LD_OWVAR 2
42782: PUSH
42783: LD_INT 1
42785: PLUS
42786: ST_TO_ADDR
// end ;
42787: LD_VAR 0 1
42791: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42792: LD_INT 0
42794: PPUSH
42795: PPUSH
42796: PPUSH
// for i in all_units do
42797: LD_ADDR_VAR 0 2
42801: PUSH
42802: LD_OWVAR 3
42806: PUSH
42807: FOR_IN
42808: IFFALSE 42886
// if IsSelected ( i ) then
42810: LD_VAR 0 2
42814: PPUSH
42815: CALL_OW 306
42819: IFFALSE 42884
// begin j := GetSide ( i ) ;
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_VAR 0 2
42830: PPUSH
42831: CALL_OW 255
42835: ST_TO_ADDR
// if j = 8 then
42836: LD_VAR 0 3
42840: PUSH
42841: LD_INT 8
42843: EQUAL
42844: IFFALSE 42856
// j := 0 else
42846: LD_ADDR_VAR 0 3
42850: PUSH
42851: LD_INT 0
42853: ST_TO_ADDR
42854: GO 42870
// j := j + 1 ;
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: LD_VAR 0 3
42865: PUSH
42866: LD_INT 1
42868: PLUS
42869: ST_TO_ADDR
// SetSide ( i , j ) ;
42870: LD_VAR 0 2
42874: PPUSH
42875: LD_VAR 0 3
42879: PPUSH
42880: CALL_OW 235
// end ;
42884: GO 42807
42886: POP
42887: POP
// end ;
42888: LD_VAR 0 1
42892: RET
// export function hHackFog ; begin
42893: LD_INT 0
42895: PPUSH
// FogOff ( true ) ;
42896: LD_INT 1
42898: PPUSH
42899: CALL_OW 344
// end ;
42903: LD_VAR 0 1
42907: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42908: LD_INT 0
42910: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42911: LD_VAR 0 1
42915: PPUSH
42916: LD_VAR 0 2
42920: PPUSH
42921: LD_VAR 0 3
42925: PPUSH
42926: LD_INT 1
42928: PPUSH
42929: LD_INT 1
42931: PPUSH
42932: CALL_OW 483
// CenterOnXY ( x , y ) ;
42936: LD_VAR 0 2
42940: PPUSH
42941: LD_VAR 0 3
42945: PPUSH
42946: CALL_OW 84
// end ; end_of_file
42950: LD_VAR 0 4
42954: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42955: LD_INT 0
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 264
42970: PUSH
42971: LD_EXP 73
42975: EQUAL
42976: IFFALSE 43048
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
42978: LD_INT 68
42980: PPUSH
42981: LD_VAR 0 1
42985: PPUSH
42986: CALL_OW 255
42990: PPUSH
42991: CALL_OW 321
42995: PUSH
42996: LD_INT 2
42998: EQUAL
42999: IFFALSE 43011
// eff := 70 else
43001: LD_ADDR_VAR 0 4
43005: PUSH
43006: LD_INT 70
43008: ST_TO_ADDR
43009: GO 43019
// eff := 30 ;
43011: LD_ADDR_VAR 0 4
43015: PUSH
43016: LD_INT 30
43018: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
43019: LD_VAR 0 1
43023: PPUSH
43024: CALL_OW 250
43028: PPUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 251
43038: PPUSH
43039: LD_VAR 0 4
43043: PPUSH
43044: CALL_OW 495
// end ; end ;
43048: LD_VAR 0 2
43052: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43053: LD_INT 0
43055: PPUSH
// end ;
43056: LD_VAR 0 4
43060: RET
// export function SOS_Command ( cmd ) ; begin
43061: LD_INT 0
43063: PPUSH
// end ;
43064: LD_VAR 0 2
43068: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43069: LD_INT 0
43071: PPUSH
// if cmd = 121 then
43072: LD_VAR 0 1
43076: PUSH
43077: LD_INT 121
43079: EQUAL
43080: IFFALSE 43082
// end ;
43082: LD_VAR 0 6
43086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43087: LD_INT 0
43089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43090: LD_VAR 0 1
43094: PUSH
43095: LD_INT 250
43097: EQUAL
43098: PUSH
43099: LD_VAR 0 2
43103: PPUSH
43104: CALL_OW 264
43108: PUSH
43109: LD_EXP 76
43113: EQUAL
43114: AND
43115: IFFALSE 43136
// MinerPlaceMine ( unit , x , y ) ;
43117: LD_VAR 0 2
43121: PPUSH
43122: LD_VAR 0 4
43126: PPUSH
43127: LD_VAR 0 5
43131: PPUSH
43132: CALL 45485 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43136: LD_VAR 0 1
43140: PUSH
43141: LD_INT 251
43143: EQUAL
43144: PUSH
43145: LD_VAR 0 2
43149: PPUSH
43150: CALL_OW 264
43154: PUSH
43155: LD_EXP 76
43159: EQUAL
43160: AND
43161: IFFALSE 43182
// MinerDetonateMine ( unit , x , y ) ;
43163: LD_VAR 0 2
43167: PPUSH
43168: LD_VAR 0 4
43172: PPUSH
43173: LD_VAR 0 5
43177: PPUSH
43178: CALL 45762 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43182: LD_VAR 0 1
43186: PUSH
43187: LD_INT 252
43189: EQUAL
43190: PUSH
43191: LD_VAR 0 2
43195: PPUSH
43196: CALL_OW 264
43200: PUSH
43201: LD_EXP 76
43205: EQUAL
43206: AND
43207: IFFALSE 43228
// MinerCreateMinefield ( unit , x , y ) ;
43209: LD_VAR 0 2
43213: PPUSH
43214: LD_VAR 0 4
43218: PPUSH
43219: LD_VAR 0 5
43223: PPUSH
43224: CALL 46179 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43228: LD_VAR 0 1
43232: PUSH
43233: LD_INT 253
43235: EQUAL
43236: PUSH
43237: LD_VAR 0 2
43241: PPUSH
43242: CALL_OW 257
43246: PUSH
43247: LD_INT 5
43249: EQUAL
43250: AND
43251: IFFALSE 43272
// ComBinocular ( unit , x , y ) ;
43253: LD_VAR 0 2
43257: PPUSH
43258: LD_VAR 0 4
43262: PPUSH
43263: LD_VAR 0 5
43267: PPUSH
43268: CALL 46550 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43272: LD_VAR 0 1
43276: PUSH
43277: LD_INT 254
43279: EQUAL
43280: PUSH
43281: LD_VAR 0 2
43285: PPUSH
43286: CALL_OW 264
43290: PUSH
43291: LD_EXP 71
43295: EQUAL
43296: AND
43297: PUSH
43298: LD_VAR 0 3
43302: PPUSH
43303: CALL_OW 263
43307: PUSH
43308: LD_INT 3
43310: EQUAL
43311: AND
43312: IFFALSE 43328
// HackDestroyVehicle ( unit , selectedUnit ) ;
43314: LD_VAR 0 2
43318: PPUSH
43319: LD_VAR 0 3
43323: PPUSH
43324: CALL 44845 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43328: LD_VAR 0 1
43332: PUSH
43333: LD_INT 255
43335: EQUAL
43336: PUSH
43337: LD_VAR 0 2
43341: PPUSH
43342: CALL_OW 264
43346: PUSH
43347: LD_INT 14
43349: PUSH
43350: LD_INT 53
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: IN
43357: AND
43358: PUSH
43359: LD_VAR 0 4
43363: PPUSH
43364: LD_VAR 0 5
43368: PPUSH
43369: CALL_OW 488
43373: AND
43374: IFFALSE 43398
// CutTreeXYR ( unit , x , y , 12 ) ;
43376: LD_VAR 0 2
43380: PPUSH
43381: LD_VAR 0 4
43385: PPUSH
43386: LD_VAR 0 5
43390: PPUSH
43391: LD_INT 12
43393: PPUSH
43394: CALL 43411 0 4
// end ;
43398: LD_VAR 0 6
43402: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
43403: LD_INT 0
43405: PPUSH
// end ;
43406: LD_VAR 0 4
43410: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43411: LD_INT 0
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
43421: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
43422: LD_VAR 0 1
43426: NOT
43427: PUSH
43428: LD_VAR 0 2
43432: PPUSH
43433: LD_VAR 0 3
43437: PPUSH
43438: CALL_OW 488
43442: NOT
43443: OR
43444: PUSH
43445: LD_VAR 0 4
43449: NOT
43450: OR
43451: IFFALSE 43455
// exit ;
43453: GO 43795
// list := [ ] ;
43455: LD_ADDR_VAR 0 13
43459: PUSH
43460: EMPTY
43461: ST_TO_ADDR
// if x - r < 0 then
43462: LD_VAR 0 2
43466: PUSH
43467: LD_VAR 0 4
43471: MINUS
43472: PUSH
43473: LD_INT 0
43475: LESS
43476: IFFALSE 43488
// min_x := 0 else
43478: LD_ADDR_VAR 0 7
43482: PUSH
43483: LD_INT 0
43485: ST_TO_ADDR
43486: GO 43504
// min_x := x - r ;
43488: LD_ADDR_VAR 0 7
43492: PUSH
43493: LD_VAR 0 2
43497: PUSH
43498: LD_VAR 0 4
43502: MINUS
43503: ST_TO_ADDR
// if y - r < 0 then
43504: LD_VAR 0 3
43508: PUSH
43509: LD_VAR 0 4
43513: MINUS
43514: PUSH
43515: LD_INT 0
43517: LESS
43518: IFFALSE 43530
// min_y := 0 else
43520: LD_ADDR_VAR 0 8
43524: PUSH
43525: LD_INT 0
43527: ST_TO_ADDR
43528: GO 43546
// min_y := y - r ;
43530: LD_ADDR_VAR 0 8
43534: PUSH
43535: LD_VAR 0 3
43539: PUSH
43540: LD_VAR 0 4
43544: MINUS
43545: ST_TO_ADDR
// max_x := x + r ;
43546: LD_ADDR_VAR 0 9
43550: PUSH
43551: LD_VAR 0 2
43555: PUSH
43556: LD_VAR 0 4
43560: PLUS
43561: ST_TO_ADDR
// max_y := y + r ;
43562: LD_ADDR_VAR 0 10
43566: PUSH
43567: LD_VAR 0 3
43571: PUSH
43572: LD_VAR 0 4
43576: PLUS
43577: ST_TO_ADDR
// for _x = min_x to max_x do
43578: LD_ADDR_VAR 0 11
43582: PUSH
43583: DOUBLE
43584: LD_VAR 0 7
43588: DEC
43589: ST_TO_ADDR
43590: LD_VAR 0 9
43594: PUSH
43595: FOR_TO
43596: IFFALSE 43713
// for _y = min_y to max_y do
43598: LD_ADDR_VAR 0 12
43602: PUSH
43603: DOUBLE
43604: LD_VAR 0 8
43608: DEC
43609: ST_TO_ADDR
43610: LD_VAR 0 10
43614: PUSH
43615: FOR_TO
43616: IFFALSE 43709
// begin if not ValidHex ( _x , _y ) then
43618: LD_VAR 0 11
43622: PPUSH
43623: LD_VAR 0 12
43627: PPUSH
43628: CALL_OW 488
43632: NOT
43633: IFFALSE 43637
// continue ;
43635: GO 43615
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43637: LD_VAR 0 11
43641: PPUSH
43642: LD_VAR 0 12
43646: PPUSH
43647: CALL_OW 351
43651: PUSH
43652: LD_VAR 0 11
43656: PPUSH
43657: LD_VAR 0 12
43661: PPUSH
43662: CALL_OW 554
43666: AND
43667: IFFALSE 43707
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43669: LD_ADDR_VAR 0 13
43673: PUSH
43674: LD_VAR 0 13
43678: PPUSH
43679: LD_VAR 0 13
43683: PUSH
43684: LD_INT 1
43686: PLUS
43687: PPUSH
43688: LD_VAR 0 11
43692: PUSH
43693: LD_VAR 0 12
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PPUSH
43702: CALL_OW 2
43706: ST_TO_ADDR
// end ;
43707: GO 43615
43709: POP
43710: POP
43711: GO 43595
43713: POP
43714: POP
// if not list then
43715: LD_VAR 0 13
43719: NOT
43720: IFFALSE 43724
// exit ;
43722: GO 43795
// for i in list do
43724: LD_ADDR_VAR 0 6
43728: PUSH
43729: LD_VAR 0 13
43733: PUSH
43734: FOR_IN
43735: IFFALSE 43793
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43737: LD_VAR 0 1
43741: PPUSH
43742: LD_STRING M
43744: PUSH
43745: LD_VAR 0 6
43749: PUSH
43750: LD_INT 1
43752: ARRAY
43753: PUSH
43754: LD_VAR 0 6
43758: PUSH
43759: LD_INT 2
43761: ARRAY
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: PPUSH
43787: CALL_OW 447
43791: GO 43734
43793: POP
43794: POP
// end ;
43795: LD_VAR 0 5
43799: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43800: LD_EXP 144
43804: NOT
43805: IFFALSE 43855
43807: GO 43809
43809: DISABLE
// begin initHack := true ;
43810: LD_ADDR_EXP 144
43814: PUSH
43815: LD_INT 1
43817: ST_TO_ADDR
// hackTanks := [ ] ;
43818: LD_ADDR_EXP 145
43822: PUSH
43823: EMPTY
43824: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43825: LD_ADDR_EXP 146
43829: PUSH
43830: EMPTY
43831: ST_TO_ADDR
// hackLimit := 3 ;
43832: LD_ADDR_EXP 147
43836: PUSH
43837: LD_INT 3
43839: ST_TO_ADDR
// hackDist := 12 ;
43840: LD_ADDR_EXP 148
43844: PUSH
43845: LD_INT 12
43847: ST_TO_ADDR
// hackCounter := [ ] ;
43848: LD_ADDR_EXP 149
43852: PUSH
43853: EMPTY
43854: ST_TO_ADDR
// end ;
43855: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43856: LD_EXP 144
43860: PUSH
43861: LD_INT 34
43863: PUSH
43864: LD_EXP 71
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PPUSH
43873: CALL_OW 69
43877: AND
43878: IFFALSE 44133
43880: GO 43882
43882: DISABLE
43883: LD_INT 0
43885: PPUSH
43886: PPUSH
// begin enable ;
43887: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43888: LD_ADDR_VAR 0 1
43892: PUSH
43893: LD_INT 34
43895: PUSH
43896: LD_EXP 71
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PPUSH
43905: CALL_OW 69
43909: PUSH
43910: FOR_IN
43911: IFFALSE 44131
// begin if not i in hackTanks then
43913: LD_VAR 0 1
43917: PUSH
43918: LD_EXP 145
43922: IN
43923: NOT
43924: IFFALSE 44007
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43926: LD_ADDR_EXP 145
43930: PUSH
43931: LD_EXP 145
43935: PPUSH
43936: LD_EXP 145
43940: PUSH
43941: LD_INT 1
43943: PLUS
43944: PPUSH
43945: LD_VAR 0 1
43949: PPUSH
43950: CALL_OW 1
43954: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43955: LD_ADDR_EXP 146
43959: PUSH
43960: LD_EXP 146
43964: PPUSH
43965: LD_EXP 146
43969: PUSH
43970: LD_INT 1
43972: PLUS
43973: PPUSH
43974: EMPTY
43975: PPUSH
43976: CALL_OW 1
43980: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43981: LD_ADDR_EXP 149
43985: PUSH
43986: LD_EXP 149
43990: PPUSH
43991: LD_EXP 149
43995: PUSH
43996: LD_INT 1
43998: PLUS
43999: PPUSH
44000: EMPTY
44001: PPUSH
44002: CALL_OW 1
44006: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44007: LD_VAR 0 1
44011: PPUSH
44012: CALL_OW 302
44016: NOT
44017: IFFALSE 44030
// begin HackUnlinkAll ( i ) ;
44019: LD_VAR 0 1
44023: PPUSH
44024: CALL 44136 0 1
// continue ;
44028: GO 43910
// end ; HackCheckCapturedStatus ( i ) ;
44030: LD_VAR 0 1
44034: PPUSH
44035: CALL 44579 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44039: LD_ADDR_VAR 0 2
44043: PUSH
44044: LD_INT 81
44046: PUSH
44047: LD_VAR 0 1
44051: PPUSH
44052: CALL_OW 255
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 33
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 91
44073: PUSH
44074: LD_VAR 0 1
44078: PUSH
44079: LD_EXP 148
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 50
44091: PUSH
44092: EMPTY
44093: LIST
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: PPUSH
44101: CALL_OW 69
44105: ST_TO_ADDR
// if not tmp then
44106: LD_VAR 0 2
44110: NOT
44111: IFFALSE 44115
// continue ;
44113: GO 43910
// HackLink ( i , tmp ) ;
44115: LD_VAR 0 1
44119: PPUSH
44120: LD_VAR 0 2
44124: PPUSH
44125: CALL 44272 0 2
// end ;
44129: GO 43910
44131: POP
44132: POP
// end ;
44133: PPOPN 2
44135: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44136: LD_INT 0
44138: PPUSH
44139: PPUSH
44140: PPUSH
// if not hack in hackTanks then
44141: LD_VAR 0 1
44145: PUSH
44146: LD_EXP 145
44150: IN
44151: NOT
44152: IFFALSE 44156
// exit ;
44154: GO 44267
// index := GetElementIndex ( hackTanks , hack ) ;
44156: LD_ADDR_VAR 0 4
44160: PUSH
44161: LD_EXP 145
44165: PPUSH
44166: LD_VAR 0 1
44170: PPUSH
44171: CALL 51701 0 2
44175: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44176: LD_EXP 146
44180: PUSH
44181: LD_VAR 0 4
44185: ARRAY
44186: IFFALSE 44267
// begin for i in hackTanksCaptured [ index ] do
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_EXP 146
44197: PUSH
44198: LD_VAR 0 4
44202: ARRAY
44203: PUSH
44204: FOR_IN
44205: IFFALSE 44231
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44207: LD_VAR 0 3
44211: PUSH
44212: LD_INT 1
44214: ARRAY
44215: PPUSH
44216: LD_VAR 0 3
44220: PUSH
44221: LD_INT 2
44223: ARRAY
44224: PPUSH
44225: CALL_OW 235
44229: GO 44204
44231: POP
44232: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44233: LD_ADDR_EXP 146
44237: PUSH
44238: LD_EXP 146
44242: PPUSH
44243: LD_VAR 0 4
44247: PPUSH
44248: EMPTY
44249: PPUSH
44250: CALL_OW 1
44254: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44255: LD_VAR 0 1
44259: PPUSH
44260: LD_INT 0
44262: PPUSH
44263: CALL_OW 505
// end ; end ;
44267: LD_VAR 0 2
44271: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44272: LD_INT 0
44274: PPUSH
44275: PPUSH
44276: PPUSH
// if not hack in hackTanks or not vehicles then
44277: LD_VAR 0 1
44281: PUSH
44282: LD_EXP 145
44286: IN
44287: NOT
44288: PUSH
44289: LD_VAR 0 2
44293: NOT
44294: OR
44295: IFFALSE 44299
// exit ;
44297: GO 44574
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44299: LD_ADDR_VAR 0 2
44303: PUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: LD_VAR 0 2
44313: PPUSH
44314: LD_INT 1
44316: PPUSH
44317: LD_INT 1
44319: PPUSH
44320: CALL 52351 0 4
44324: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44325: LD_ADDR_VAR 0 5
44329: PUSH
44330: LD_EXP 145
44334: PPUSH
44335: LD_VAR 0 1
44339: PPUSH
44340: CALL 51701 0 2
44344: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44345: LD_EXP 146
44349: PUSH
44350: LD_VAR 0 5
44354: ARRAY
44355: PUSH
44356: LD_EXP 147
44360: LESS
44361: IFFALSE 44550
// begin for i := 1 to vehicles do
44363: LD_ADDR_VAR 0 4
44367: PUSH
44368: DOUBLE
44369: LD_INT 1
44371: DEC
44372: ST_TO_ADDR
44373: LD_VAR 0 2
44377: PUSH
44378: FOR_TO
44379: IFFALSE 44548
// begin if hackTanksCaptured [ index ] = hackLimit then
44381: LD_EXP 146
44385: PUSH
44386: LD_VAR 0 5
44390: ARRAY
44391: PUSH
44392: LD_EXP 147
44396: EQUAL
44397: IFFALSE 44401
// break ;
44399: GO 44548
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
44401: LD_ADDR_EXP 149
44405: PUSH
44406: LD_EXP 149
44410: PPUSH
44411: LD_VAR 0 5
44415: PPUSH
44416: LD_EXP 149
44420: PUSH
44421: LD_VAR 0 5
44425: ARRAY
44426: PUSH
44427: LD_INT 1
44429: PLUS
44430: PPUSH
44431: CALL_OW 1
44435: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44436: LD_ADDR_EXP 146
44440: PUSH
44441: LD_EXP 146
44445: PPUSH
44446: LD_VAR 0 5
44450: PUSH
44451: LD_EXP 146
44455: PUSH
44456: LD_VAR 0 5
44460: ARRAY
44461: PUSH
44462: LD_INT 1
44464: PLUS
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PPUSH
44470: LD_VAR 0 2
44474: PUSH
44475: LD_VAR 0 4
44479: ARRAY
44480: PUSH
44481: LD_VAR 0 2
44485: PUSH
44486: LD_VAR 0 4
44490: ARRAY
44491: PPUSH
44492: CALL_OW 255
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PPUSH
44501: CALL 51916 0 3
44505: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44506: LD_VAR 0 2
44510: PUSH
44511: LD_VAR 0 4
44515: ARRAY
44516: PPUSH
44517: LD_VAR 0 1
44521: PPUSH
44522: CALL_OW 255
44526: PPUSH
44527: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44531: LD_VAR 0 2
44535: PUSH
44536: LD_VAR 0 4
44540: ARRAY
44541: PPUSH
44542: CALL_OW 141
// end ;
44546: GO 44378
44548: POP
44549: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44550: LD_VAR 0 1
44554: PPUSH
44555: LD_EXP 146
44559: PUSH
44560: LD_VAR 0 5
44564: ARRAY
44565: PUSH
44566: LD_INT 0
44568: PLUS
44569: PPUSH
44570: CALL_OW 505
// end ;
44574: LD_VAR 0 3
44578: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
44579: LD_INT 0
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
// if not hack in hackTanks then
44585: LD_VAR 0 1
44589: PUSH
44590: LD_EXP 145
44594: IN
44595: NOT
44596: IFFALSE 44600
// exit ;
44598: GO 44840
// index := GetElementIndex ( hackTanks , hack ) ;
44600: LD_ADDR_VAR 0 4
44604: PUSH
44605: LD_EXP 145
44609: PPUSH
44610: LD_VAR 0 1
44614: PPUSH
44615: CALL 51701 0 2
44619: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: DOUBLE
44626: LD_EXP 146
44630: PUSH
44631: LD_VAR 0 4
44635: ARRAY
44636: INC
44637: ST_TO_ADDR
44638: LD_INT 1
44640: PUSH
44641: FOR_DOWNTO
44642: IFFALSE 44814
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
44644: LD_ADDR_VAR 0 5
44648: PUSH
44649: LD_EXP 146
44653: PUSH
44654: LD_VAR 0 4
44658: ARRAY
44659: PUSH
44660: LD_VAR 0 3
44664: ARRAY
44665: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
44666: LD_VAR 0 5
44670: PUSH
44671: LD_INT 1
44673: ARRAY
44674: PPUSH
44675: CALL_OW 302
44679: NOT
44680: PUSH
44681: LD_VAR 0 5
44685: PUSH
44686: LD_INT 1
44688: ARRAY
44689: PPUSH
44690: CALL_OW 255
44694: PUSH
44695: LD_VAR 0 1
44699: PPUSH
44700: CALL_OW 255
44704: NONEQUAL
44705: OR
44706: IFFALSE 44812
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44708: LD_VAR 0 5
44712: PUSH
44713: LD_INT 1
44715: ARRAY
44716: PPUSH
44717: CALL_OW 305
44721: PUSH
44722: LD_VAR 0 5
44726: PUSH
44727: LD_INT 1
44729: ARRAY
44730: PPUSH
44731: CALL_OW 255
44735: PUSH
44736: LD_VAR 0 1
44740: PPUSH
44741: CALL_OW 255
44745: EQUAL
44746: AND
44747: IFFALSE 44771
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44749: LD_VAR 0 5
44753: PUSH
44754: LD_INT 1
44756: ARRAY
44757: PPUSH
44758: LD_VAR 0 5
44762: PUSH
44763: LD_INT 2
44765: ARRAY
44766: PPUSH
44767: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44771: LD_ADDR_EXP 146
44775: PUSH
44776: LD_EXP 146
44780: PPUSH
44781: LD_VAR 0 4
44785: PPUSH
44786: LD_EXP 146
44790: PUSH
44791: LD_VAR 0 4
44795: ARRAY
44796: PPUSH
44797: LD_VAR 0 3
44801: PPUSH
44802: CALL_OW 3
44806: PPUSH
44807: CALL_OW 1
44811: ST_TO_ADDR
// end ; end ;
44812: GO 44641
44814: POP
44815: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44816: LD_VAR 0 1
44820: PPUSH
44821: LD_EXP 146
44825: PUSH
44826: LD_VAR 0 4
44830: ARRAY
44831: PUSH
44832: LD_INT 0
44834: PLUS
44835: PPUSH
44836: CALL_OW 505
// end ;
44840: LD_VAR 0 2
44844: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44845: LD_INT 0
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
// if not hack in hackTanks then
44851: LD_VAR 0 1
44855: PUSH
44856: LD_EXP 145
44860: IN
44861: NOT
44862: IFFALSE 44866
// exit ;
44864: GO 44951
// index := GetElementIndex ( hackTanks , hack ) ;
44866: LD_ADDR_VAR 0 5
44870: PUSH
44871: LD_EXP 145
44875: PPUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL 51701 0 2
44885: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44886: LD_ADDR_VAR 0 4
44890: PUSH
44891: DOUBLE
44892: LD_INT 1
44894: DEC
44895: ST_TO_ADDR
44896: LD_EXP 146
44900: PUSH
44901: LD_VAR 0 5
44905: ARRAY
44906: PUSH
44907: FOR_TO
44908: IFFALSE 44949
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44910: LD_EXP 146
44914: PUSH
44915: LD_VAR 0 5
44919: ARRAY
44920: PUSH
44921: LD_VAR 0 4
44925: ARRAY
44926: PUSH
44927: LD_INT 1
44929: ARRAY
44930: PUSH
44931: LD_VAR 0 2
44935: EQUAL
44936: IFFALSE 44947
// KillUnit ( vehicle ) ;
44938: LD_VAR 0 2
44942: PPUSH
44943: CALL_OW 66
44947: GO 44907
44949: POP
44950: POP
// end ;
44951: LD_VAR 0 3
44955: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44956: LD_EXP 150
44960: NOT
44961: IFFALSE 44996
44963: GO 44965
44965: DISABLE
// begin initMiner := true ;
44966: LD_ADDR_EXP 150
44970: PUSH
44971: LD_INT 1
44973: ST_TO_ADDR
// minersList := [ ] ;
44974: LD_ADDR_EXP 151
44978: PUSH
44979: EMPTY
44980: ST_TO_ADDR
// minerMinesList := [ ] ;
44981: LD_ADDR_EXP 152
44985: PUSH
44986: EMPTY
44987: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44988: LD_ADDR_EXP 153
44992: PUSH
44993: LD_INT 5
44995: ST_TO_ADDR
// end ;
44996: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44997: LD_EXP 150
45001: PUSH
45002: LD_INT 34
45004: PUSH
45005: LD_EXP 76
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PPUSH
45014: CALL_OW 69
45018: AND
45019: IFFALSE 45482
45021: GO 45023
45023: DISABLE
45024: LD_INT 0
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
// begin enable ;
45030: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45031: LD_ADDR_VAR 0 1
45035: PUSH
45036: LD_INT 34
45038: PUSH
45039: LD_EXP 76
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PPUSH
45048: CALL_OW 69
45052: PUSH
45053: FOR_IN
45054: IFFALSE 45126
// begin if not i in minersList then
45056: LD_VAR 0 1
45060: PUSH
45061: LD_EXP 151
45065: IN
45066: NOT
45067: IFFALSE 45124
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45069: LD_ADDR_EXP 151
45073: PUSH
45074: LD_EXP 151
45078: PPUSH
45079: LD_EXP 151
45083: PUSH
45084: LD_INT 1
45086: PLUS
45087: PPUSH
45088: LD_VAR 0 1
45092: PPUSH
45093: CALL_OW 1
45097: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45098: LD_ADDR_EXP 152
45102: PUSH
45103: LD_EXP 152
45107: PPUSH
45108: LD_EXP 152
45112: PUSH
45113: LD_INT 1
45115: PLUS
45116: PPUSH
45117: EMPTY
45118: PPUSH
45119: CALL_OW 1
45123: ST_TO_ADDR
// end end ;
45124: GO 45053
45126: POP
45127: POP
// for i := minerMinesList downto 1 do
45128: LD_ADDR_VAR 0 1
45132: PUSH
45133: DOUBLE
45134: LD_EXP 152
45138: INC
45139: ST_TO_ADDR
45140: LD_INT 1
45142: PUSH
45143: FOR_DOWNTO
45144: IFFALSE 45480
// begin if IsLive ( minersList [ i ] ) then
45146: LD_EXP 151
45150: PUSH
45151: LD_VAR 0 1
45155: ARRAY
45156: PPUSH
45157: CALL_OW 300
45161: IFFALSE 45189
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45163: LD_EXP 151
45167: PUSH
45168: LD_VAR 0 1
45172: ARRAY
45173: PPUSH
45174: LD_EXP 152
45178: PUSH
45179: LD_VAR 0 1
45183: ARRAY
45184: PPUSH
45185: CALL_OW 505
// if not minerMinesList [ i ] then
45189: LD_EXP 152
45193: PUSH
45194: LD_VAR 0 1
45198: ARRAY
45199: NOT
45200: IFFALSE 45204
// continue ;
45202: GO 45143
// for j := minerMinesList [ i ] downto 1 do
45204: LD_ADDR_VAR 0 2
45208: PUSH
45209: DOUBLE
45210: LD_EXP 152
45214: PUSH
45215: LD_VAR 0 1
45219: ARRAY
45220: INC
45221: ST_TO_ADDR
45222: LD_INT 1
45224: PUSH
45225: FOR_DOWNTO
45226: IFFALSE 45476
// begin side := GetSide ( minersList [ i ] ) ;
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_EXP 151
45237: PUSH
45238: LD_VAR 0 1
45242: ARRAY
45243: PPUSH
45244: CALL_OW 255
45248: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45249: LD_ADDR_VAR 0 4
45253: PUSH
45254: LD_EXP 152
45258: PUSH
45259: LD_VAR 0 1
45263: ARRAY
45264: PUSH
45265: LD_VAR 0 2
45269: ARRAY
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: PPUSH
45275: LD_EXP 152
45279: PUSH
45280: LD_VAR 0 1
45284: ARRAY
45285: PUSH
45286: LD_VAR 0 2
45290: ARRAY
45291: PUSH
45292: LD_INT 2
45294: ARRAY
45295: PPUSH
45296: CALL_OW 428
45300: ST_TO_ADDR
// if not tmp then
45301: LD_VAR 0 4
45305: NOT
45306: IFFALSE 45310
// continue ;
45308: GO 45225
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45310: LD_VAR 0 4
45314: PUSH
45315: LD_INT 81
45317: PUSH
45318: LD_VAR 0 3
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PPUSH
45327: CALL_OW 69
45331: IN
45332: PUSH
45333: LD_EXP 152
45337: PUSH
45338: LD_VAR 0 1
45342: ARRAY
45343: PUSH
45344: LD_VAR 0 2
45348: ARRAY
45349: PUSH
45350: LD_INT 1
45352: ARRAY
45353: PPUSH
45354: LD_EXP 152
45358: PUSH
45359: LD_VAR 0 1
45363: ARRAY
45364: PUSH
45365: LD_VAR 0 2
45369: ARRAY
45370: PUSH
45371: LD_INT 2
45373: ARRAY
45374: PPUSH
45375: CALL_OW 458
45379: AND
45380: IFFALSE 45474
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
45382: LD_EXP 152
45386: PUSH
45387: LD_VAR 0 1
45391: ARRAY
45392: PUSH
45393: LD_VAR 0 2
45397: ARRAY
45398: PUSH
45399: LD_INT 1
45401: ARRAY
45402: PPUSH
45403: LD_EXP 152
45407: PUSH
45408: LD_VAR 0 1
45412: ARRAY
45413: PUSH
45414: LD_VAR 0 2
45418: ARRAY
45419: PUSH
45420: LD_INT 2
45422: ARRAY
45423: PPUSH
45424: LD_VAR 0 3
45428: PPUSH
45429: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45433: LD_ADDR_EXP 152
45437: PUSH
45438: LD_EXP 152
45442: PPUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: LD_EXP 152
45452: PUSH
45453: LD_VAR 0 1
45457: ARRAY
45458: PPUSH
45459: LD_VAR 0 2
45463: PPUSH
45464: CALL_OW 3
45468: PPUSH
45469: CALL_OW 1
45473: ST_TO_ADDR
// end ; end ;
45474: GO 45225
45476: POP
45477: POP
// end ;
45478: GO 45143
45480: POP
45481: POP
// end ;
45482: PPOPN 4
45484: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45485: LD_INT 0
45487: PPUSH
45488: PPUSH
// result := false ;
45489: LD_ADDR_VAR 0 4
45493: PUSH
45494: LD_INT 0
45496: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45497: LD_VAR 0 1
45501: PPUSH
45502: CALL_OW 264
45506: PUSH
45507: LD_EXP 76
45511: EQUAL
45512: NOT
45513: IFFALSE 45517
// exit ;
45515: GO 45757
// index := GetElementIndex ( minersList , unit ) ;
45517: LD_ADDR_VAR 0 5
45521: PUSH
45522: LD_EXP 151
45526: PPUSH
45527: LD_VAR 0 1
45531: PPUSH
45532: CALL 51701 0 2
45536: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45537: LD_EXP 152
45541: PUSH
45542: LD_VAR 0 5
45546: ARRAY
45547: PUSH
45548: LD_EXP 153
45552: GREATEREQUAL
45553: IFFALSE 45557
// exit ;
45555: GO 45757
// ComMoveXY ( unit , x , y ) ;
45557: LD_VAR 0 1
45561: PPUSH
45562: LD_VAR 0 2
45566: PPUSH
45567: LD_VAR 0 3
45571: PPUSH
45572: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45576: LD_INT 35
45578: PPUSH
45579: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
45583: LD_VAR 0 1
45587: PPUSH
45588: LD_VAR 0 2
45592: PPUSH
45593: LD_VAR 0 3
45597: PPUSH
45598: CALL 82098 0 3
45602: NOT
45603: PUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: CALL_OW 314
45613: AND
45614: IFFALSE 45618
// exit ;
45616: GO 45757
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
45618: LD_VAR 0 2
45622: PPUSH
45623: LD_VAR 0 3
45627: PPUSH
45628: CALL_OW 428
45632: PUSH
45633: LD_VAR 0 1
45637: EQUAL
45638: PUSH
45639: LD_VAR 0 1
45643: PPUSH
45644: CALL_OW 314
45648: NOT
45649: AND
45650: IFFALSE 45576
// PlaySoundXY ( x , y , PlantMine ) ;
45652: LD_VAR 0 2
45656: PPUSH
45657: LD_VAR 0 3
45661: PPUSH
45662: LD_STRING PlantMine
45664: PPUSH
45665: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
45669: LD_VAR 0 2
45673: PPUSH
45674: LD_VAR 0 3
45678: PPUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: CALL_OW 255
45688: PPUSH
45689: LD_INT 0
45691: PPUSH
45692: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
45696: LD_ADDR_EXP 152
45700: PUSH
45701: LD_EXP 152
45705: PPUSH
45706: LD_VAR 0 5
45710: PUSH
45711: LD_EXP 152
45715: PUSH
45716: LD_VAR 0 5
45720: ARRAY
45721: PUSH
45722: LD_INT 1
45724: PLUS
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PPUSH
45730: LD_VAR 0 2
45734: PUSH
45735: LD_VAR 0 3
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PPUSH
45744: CALL 51916 0 3
45748: ST_TO_ADDR
// result := true ;
45749: LD_ADDR_VAR 0 4
45753: PUSH
45754: LD_INT 1
45756: ST_TO_ADDR
// end ;
45757: LD_VAR 0 4
45761: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45762: LD_INT 0
45764: PPUSH
45765: PPUSH
45766: PPUSH
// if not unit in minersList then
45767: LD_VAR 0 1
45771: PUSH
45772: LD_EXP 151
45776: IN
45777: NOT
45778: IFFALSE 45782
// exit ;
45780: GO 46174
// index := GetElementIndex ( minersList , unit ) ;
45782: LD_ADDR_VAR 0 6
45786: PUSH
45787: LD_EXP 151
45791: PPUSH
45792: LD_VAR 0 1
45796: PPUSH
45797: CALL 51701 0 2
45801: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45802: LD_ADDR_VAR 0 5
45806: PUSH
45807: DOUBLE
45808: LD_EXP 152
45812: PUSH
45813: LD_VAR 0 6
45817: ARRAY
45818: INC
45819: ST_TO_ADDR
45820: LD_INT 1
45822: PUSH
45823: FOR_DOWNTO
45824: IFFALSE 45985
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45826: LD_EXP 152
45830: PUSH
45831: LD_VAR 0 6
45835: ARRAY
45836: PUSH
45837: LD_VAR 0 5
45841: ARRAY
45842: PUSH
45843: LD_INT 1
45845: ARRAY
45846: PUSH
45847: LD_VAR 0 2
45851: EQUAL
45852: PUSH
45853: LD_EXP 152
45857: PUSH
45858: LD_VAR 0 6
45862: ARRAY
45863: PUSH
45864: LD_VAR 0 5
45868: ARRAY
45869: PUSH
45870: LD_INT 2
45872: ARRAY
45873: PUSH
45874: LD_VAR 0 3
45878: EQUAL
45879: AND
45880: IFFALSE 45983
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45882: LD_EXP 152
45886: PUSH
45887: LD_VAR 0 6
45891: ARRAY
45892: PUSH
45893: LD_VAR 0 5
45897: ARRAY
45898: PUSH
45899: LD_INT 1
45901: ARRAY
45902: PPUSH
45903: LD_EXP 152
45907: PUSH
45908: LD_VAR 0 6
45912: ARRAY
45913: PUSH
45914: LD_VAR 0 5
45918: ARRAY
45919: PUSH
45920: LD_INT 2
45922: ARRAY
45923: PPUSH
45924: LD_VAR 0 1
45928: PPUSH
45929: CALL_OW 255
45933: PPUSH
45934: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45938: LD_ADDR_EXP 152
45942: PUSH
45943: LD_EXP 152
45947: PPUSH
45948: LD_VAR 0 6
45952: PPUSH
45953: LD_EXP 152
45957: PUSH
45958: LD_VAR 0 6
45962: ARRAY
45963: PPUSH
45964: LD_VAR 0 5
45968: PPUSH
45969: CALL_OW 3
45973: PPUSH
45974: CALL_OW 1
45978: ST_TO_ADDR
// exit ;
45979: POP
45980: POP
45981: GO 46174
// end ; end ;
45983: GO 45823
45985: POP
45986: POP
// for i := minerMinesList [ index ] downto 1 do
45987: LD_ADDR_VAR 0 5
45991: PUSH
45992: DOUBLE
45993: LD_EXP 152
45997: PUSH
45998: LD_VAR 0 6
46002: ARRAY
46003: INC
46004: ST_TO_ADDR
46005: LD_INT 1
46007: PUSH
46008: FOR_DOWNTO
46009: IFFALSE 46172
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46011: LD_EXP 152
46015: PUSH
46016: LD_VAR 0 6
46020: ARRAY
46021: PUSH
46022: LD_VAR 0 5
46026: ARRAY
46027: PUSH
46028: LD_INT 1
46030: ARRAY
46031: PPUSH
46032: LD_EXP 152
46036: PUSH
46037: LD_VAR 0 6
46041: ARRAY
46042: PUSH
46043: LD_VAR 0 5
46047: ARRAY
46048: PUSH
46049: LD_INT 2
46051: ARRAY
46052: PPUSH
46053: LD_VAR 0 2
46057: PPUSH
46058: LD_VAR 0 3
46062: PPUSH
46063: CALL_OW 298
46067: PUSH
46068: LD_INT 6
46070: LESS
46071: IFFALSE 46170
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46073: LD_EXP 152
46077: PUSH
46078: LD_VAR 0 6
46082: ARRAY
46083: PUSH
46084: LD_VAR 0 5
46088: ARRAY
46089: PUSH
46090: LD_INT 1
46092: ARRAY
46093: PPUSH
46094: LD_EXP 152
46098: PUSH
46099: LD_VAR 0 6
46103: ARRAY
46104: PUSH
46105: LD_VAR 0 5
46109: ARRAY
46110: PUSH
46111: LD_INT 2
46113: ARRAY
46114: PPUSH
46115: LD_VAR 0 1
46119: PPUSH
46120: CALL_OW 255
46124: PPUSH
46125: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46129: LD_ADDR_EXP 152
46133: PUSH
46134: LD_EXP 152
46138: PPUSH
46139: LD_VAR 0 6
46143: PPUSH
46144: LD_EXP 152
46148: PUSH
46149: LD_VAR 0 6
46153: ARRAY
46154: PPUSH
46155: LD_VAR 0 5
46159: PPUSH
46160: CALL_OW 3
46164: PPUSH
46165: CALL_OW 1
46169: ST_TO_ADDR
// end ; end ;
46170: GO 46008
46172: POP
46173: POP
// end ;
46174: LD_VAR 0 4
46178: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46179: LD_INT 0
46181: PPUSH
46182: PPUSH
46183: PPUSH
46184: PPUSH
46185: PPUSH
46186: PPUSH
46187: PPUSH
46188: PPUSH
46189: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 264
46199: PUSH
46200: LD_EXP 76
46204: EQUAL
46205: NOT
46206: PUSH
46207: LD_VAR 0 1
46211: PUSH
46212: LD_EXP 151
46216: IN
46217: NOT
46218: OR
46219: IFFALSE 46223
// exit ;
46221: GO 46545
// index := GetElementIndex ( minersList , unit ) ;
46223: LD_ADDR_VAR 0 6
46227: PUSH
46228: LD_EXP 151
46232: PPUSH
46233: LD_VAR 0 1
46237: PPUSH
46238: CALL 51701 0 2
46242: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46243: LD_ADDR_VAR 0 8
46247: PUSH
46248: LD_EXP 153
46252: PUSH
46253: LD_EXP 152
46257: PUSH
46258: LD_VAR 0 6
46262: ARRAY
46263: MINUS
46264: ST_TO_ADDR
// if not minesFreeAmount then
46265: LD_VAR 0 8
46269: NOT
46270: IFFALSE 46274
// exit ;
46272: GO 46545
// tmp := [ ] ;
46274: LD_ADDR_VAR 0 7
46278: PUSH
46279: EMPTY
46280: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46281: LD_ADDR_VAR 0 5
46285: PUSH
46286: DOUBLE
46287: LD_INT 1
46289: DEC
46290: ST_TO_ADDR
46291: LD_VAR 0 8
46295: PUSH
46296: FOR_TO
46297: IFFALSE 46492
// begin _d := rand ( 0 , 5 ) ;
46299: LD_ADDR_VAR 0 11
46303: PUSH
46304: LD_INT 0
46306: PPUSH
46307: LD_INT 5
46309: PPUSH
46310: CALL_OW 12
46314: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46315: LD_ADDR_VAR 0 12
46319: PUSH
46320: LD_INT 2
46322: PPUSH
46323: LD_INT 6
46325: PPUSH
46326: CALL_OW 12
46330: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46331: LD_ADDR_VAR 0 9
46335: PUSH
46336: LD_VAR 0 2
46340: PPUSH
46341: LD_VAR 0 11
46345: PPUSH
46346: LD_VAR 0 12
46350: PPUSH
46351: CALL_OW 272
46355: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46356: LD_ADDR_VAR 0 10
46360: PUSH
46361: LD_VAR 0 3
46365: PPUSH
46366: LD_VAR 0 11
46370: PPUSH
46371: LD_VAR 0 12
46375: PPUSH
46376: CALL_OW 273
46380: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
46381: LD_VAR 0 9
46385: PPUSH
46386: LD_VAR 0 10
46390: PPUSH
46391: CALL_OW 488
46395: PUSH
46396: LD_VAR 0 9
46400: PUSH
46401: LD_VAR 0 10
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_VAR 0 7
46414: IN
46415: NOT
46416: AND
46417: PUSH
46418: LD_VAR 0 9
46422: PPUSH
46423: LD_VAR 0 10
46427: PPUSH
46428: CALL_OW 458
46432: NOT
46433: AND
46434: IFFALSE 46476
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46436: LD_ADDR_VAR 0 7
46440: PUSH
46441: LD_VAR 0 7
46445: PPUSH
46446: LD_VAR 0 7
46450: PUSH
46451: LD_INT 1
46453: PLUS
46454: PPUSH
46455: LD_VAR 0 9
46459: PUSH
46460: LD_VAR 0 10
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PPUSH
46469: CALL_OW 1
46473: ST_TO_ADDR
46474: GO 46490
// i := i - 1 ;
46476: LD_ADDR_VAR 0 5
46480: PUSH
46481: LD_VAR 0 5
46485: PUSH
46486: LD_INT 1
46488: MINUS
46489: ST_TO_ADDR
// end ;
46490: GO 46296
46492: POP
46493: POP
// for i in tmp do
46494: LD_ADDR_VAR 0 5
46498: PUSH
46499: LD_VAR 0 7
46503: PUSH
46504: FOR_IN
46505: IFFALSE 46543
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46507: LD_VAR 0 1
46511: PPUSH
46512: LD_VAR 0 5
46516: PUSH
46517: LD_INT 1
46519: ARRAY
46520: PPUSH
46521: LD_VAR 0 5
46525: PUSH
46526: LD_INT 2
46528: ARRAY
46529: PPUSH
46530: CALL 45485 0 3
46534: NOT
46535: IFFALSE 46541
// exit ;
46537: POP
46538: POP
46539: GO 46545
46541: GO 46504
46543: POP
46544: POP
// end ;
46545: LD_VAR 0 4
46549: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46550: LD_INT 0
46552: PPUSH
46553: PPUSH
46554: PPUSH
46555: PPUSH
46556: PPUSH
46557: PPUSH
46558: PPUSH
// if not GetClass ( unit ) = class_sniper then
46559: LD_VAR 0 1
46563: PPUSH
46564: CALL_OW 257
46568: PUSH
46569: LD_INT 5
46571: EQUAL
46572: NOT
46573: IFFALSE 46577
// exit ;
46575: GO 46965
// dist := 8 ;
46577: LD_ADDR_VAR 0 5
46581: PUSH
46582: LD_INT 8
46584: ST_TO_ADDR
// viewRange := 12 ;
46585: LD_ADDR_VAR 0 7
46589: PUSH
46590: LD_INT 12
46592: ST_TO_ADDR
// side := GetSide ( unit ) ;
46593: LD_ADDR_VAR 0 6
46597: PUSH
46598: LD_VAR 0 1
46602: PPUSH
46603: CALL_OW 255
46607: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
46608: LD_INT 61
46610: PPUSH
46611: LD_VAR 0 6
46615: PPUSH
46616: CALL_OW 321
46620: PUSH
46621: LD_INT 2
46623: EQUAL
46624: IFFALSE 46634
// viewRange := 16 ;
46626: LD_ADDR_VAR 0 7
46630: PUSH
46631: LD_INT 16
46633: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
46634: LD_VAR 0 1
46638: PPUSH
46639: LD_VAR 0 2
46643: PPUSH
46644: LD_VAR 0 3
46648: PPUSH
46649: CALL_OW 297
46653: PUSH
46654: LD_VAR 0 5
46658: GREATER
46659: IFFALSE 46738
// begin ComMoveXY ( unit , x , y ) ;
46661: LD_VAR 0 1
46665: PPUSH
46666: LD_VAR 0 2
46670: PPUSH
46671: LD_VAR 0 3
46675: PPUSH
46676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46680: LD_INT 35
46682: PPUSH
46683: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
46687: LD_VAR 0 1
46691: PPUSH
46692: LD_VAR 0 2
46696: PPUSH
46697: LD_VAR 0 3
46701: PPUSH
46702: CALL 82098 0 3
46706: NOT
46707: IFFALSE 46711
// exit ;
46709: GO 46965
// until GetDistUnitXY ( unit , x , y ) < dist ;
46711: LD_VAR 0 1
46715: PPUSH
46716: LD_VAR 0 2
46720: PPUSH
46721: LD_VAR 0 3
46725: PPUSH
46726: CALL_OW 297
46730: PUSH
46731: LD_VAR 0 5
46735: LESS
46736: IFFALSE 46680
// end ; ComTurnXY ( unit , x , y ) ;
46738: LD_VAR 0 1
46742: PPUSH
46743: LD_VAR 0 2
46747: PPUSH
46748: LD_VAR 0 3
46752: PPUSH
46753: CALL_OW 118
// wait ( 5 ) ;
46757: LD_INT 5
46759: PPUSH
46760: CALL_OW 67
// _d := GetDir ( unit ) ;
46764: LD_ADDR_VAR 0 10
46768: PUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: CALL_OW 254
46778: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46779: LD_ADDR_VAR 0 8
46783: PUSH
46784: LD_VAR 0 1
46788: PPUSH
46789: CALL_OW 250
46793: PPUSH
46794: LD_VAR 0 10
46798: PPUSH
46799: LD_VAR 0 5
46803: PPUSH
46804: CALL_OW 272
46808: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46809: LD_ADDR_VAR 0 9
46813: PUSH
46814: LD_VAR 0 1
46818: PPUSH
46819: CALL_OW 251
46823: PPUSH
46824: LD_VAR 0 10
46828: PPUSH
46829: LD_VAR 0 5
46833: PPUSH
46834: CALL_OW 273
46838: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46839: LD_VAR 0 8
46843: PPUSH
46844: LD_VAR 0 9
46848: PPUSH
46849: CALL_OW 488
46853: NOT
46854: IFFALSE 46858
// exit ;
46856: GO 46965
// ComAnimCustom ( unit , 1 ) ;
46858: LD_VAR 0 1
46862: PPUSH
46863: LD_INT 1
46865: PPUSH
46866: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46870: LD_VAR 0 8
46874: PPUSH
46875: LD_VAR 0 9
46879: PPUSH
46880: LD_VAR 0 6
46884: PPUSH
46885: LD_VAR 0 7
46889: PPUSH
46890: CALL_OW 330
// repeat wait ( 1 ) ;
46894: LD_INT 1
46896: PPUSH
46897: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46901: LD_VAR 0 1
46905: PPUSH
46906: CALL_OW 316
46910: PUSH
46911: LD_VAR 0 1
46915: PPUSH
46916: CALL_OW 314
46920: OR
46921: PUSH
46922: LD_VAR 0 1
46926: PPUSH
46927: CALL_OW 302
46931: NOT
46932: OR
46933: PUSH
46934: LD_VAR 0 1
46938: PPUSH
46939: CALL_OW 301
46943: OR
46944: IFFALSE 46894
// RemoveSeeing ( _x , _y , side ) ;
46946: LD_VAR 0 8
46950: PPUSH
46951: LD_VAR 0 9
46955: PPUSH
46956: LD_VAR 0 6
46960: PPUSH
46961: CALL_OW 331
// end ; end_of_file
46965: LD_VAR 0 4
46969: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46970: LD_INT 0
46972: PPUSH
46973: PPUSH
// if exist_mode then
46974: LD_VAR 0 2
46978: IFFALSE 47003
// unit := CreateCharacter ( prefix & ident ) else
46980: LD_ADDR_VAR 0 5
46984: PUSH
46985: LD_VAR 0 3
46989: PUSH
46990: LD_VAR 0 1
46994: STR
46995: PPUSH
46996: CALL_OW 34
47000: ST_TO_ADDR
47001: GO 47018
// unit := NewCharacter ( ident ) ;
47003: LD_ADDR_VAR 0 5
47007: PUSH
47008: LD_VAR 0 1
47012: PPUSH
47013: CALL_OW 25
47017: ST_TO_ADDR
// result := unit ;
47018: LD_ADDR_VAR 0 4
47022: PUSH
47023: LD_VAR 0 5
47027: ST_TO_ADDR
// end ;
47028: LD_VAR 0 4
47032: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47033: LD_INT 0
47035: PPUSH
47036: PPUSH
// if not side or not nation then
47037: LD_VAR 0 1
47041: NOT
47042: PUSH
47043: LD_VAR 0 2
47047: NOT
47048: OR
47049: IFFALSE 47053
// exit ;
47051: GO 47817
// case nation of nation_american :
47053: LD_VAR 0 2
47057: PUSH
47058: LD_INT 1
47060: DOUBLE
47061: EQUAL
47062: IFTRUE 47066
47064: GO 47280
47066: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
47067: LD_ADDR_VAR 0 4
47071: PUSH
47072: LD_INT 35
47074: PUSH
47075: LD_INT 45
47077: PUSH
47078: LD_INT 46
47080: PUSH
47081: LD_INT 47
47083: PUSH
47084: LD_INT 82
47086: PUSH
47087: LD_INT 83
47089: PUSH
47090: LD_INT 84
47092: PUSH
47093: LD_INT 85
47095: PUSH
47096: LD_INT 86
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 6
47107: PUSH
47108: LD_INT 15
47110: PUSH
47111: LD_INT 16
47113: PUSH
47114: LD_INT 7
47116: PUSH
47117: LD_INT 12
47119: PUSH
47120: LD_INT 13
47122: PUSH
47123: LD_INT 10
47125: PUSH
47126: LD_INT 14
47128: PUSH
47129: LD_INT 20
47131: PUSH
47132: LD_INT 21
47134: PUSH
47135: LD_INT 22
47137: PUSH
47138: LD_INT 25
47140: PUSH
47141: LD_INT 32
47143: PUSH
47144: LD_INT 27
47146: PUSH
47147: LD_INT 36
47149: PUSH
47150: LD_INT 69
47152: PUSH
47153: LD_INT 39
47155: PUSH
47156: LD_INT 34
47158: PUSH
47159: LD_INT 40
47161: PUSH
47162: LD_INT 48
47164: PUSH
47165: LD_INT 49
47167: PUSH
47168: LD_INT 50
47170: PUSH
47171: LD_INT 51
47173: PUSH
47174: LD_INT 52
47176: PUSH
47177: LD_INT 53
47179: PUSH
47180: LD_INT 54
47182: PUSH
47183: LD_INT 55
47185: PUSH
47186: LD_INT 56
47188: PUSH
47189: LD_INT 57
47191: PUSH
47192: LD_INT 58
47194: PUSH
47195: LD_INT 59
47197: PUSH
47198: LD_INT 60
47200: PUSH
47201: LD_INT 61
47203: PUSH
47204: LD_INT 62
47206: PUSH
47207: LD_INT 80
47209: PUSH
47210: LD_INT 82
47212: PUSH
47213: LD_INT 83
47215: PUSH
47216: LD_INT 84
47218: PUSH
47219: LD_INT 85
47221: PUSH
47222: LD_INT 86
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
47278: GO 47741
47280: LD_INT 2
47282: DOUBLE
47283: EQUAL
47284: IFTRUE 47288
47286: GO 47510
47288: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
47289: LD_ADDR_VAR 0 4
47293: PUSH
47294: LD_INT 35
47296: PUSH
47297: LD_INT 45
47299: PUSH
47300: LD_INT 46
47302: PUSH
47303: LD_INT 47
47305: PUSH
47306: LD_INT 82
47308: PUSH
47309: LD_INT 83
47311: PUSH
47312: LD_INT 84
47314: PUSH
47315: LD_INT 85
47317: PUSH
47318: LD_INT 87
47320: PUSH
47321: LD_INT 70
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 11
47329: PUSH
47330: LD_INT 3
47332: PUSH
47333: LD_INT 4
47335: PUSH
47336: LD_INT 5
47338: PUSH
47339: LD_INT 6
47341: PUSH
47342: LD_INT 15
47344: PUSH
47345: LD_INT 18
47347: PUSH
47348: LD_INT 7
47350: PUSH
47351: LD_INT 17
47353: PUSH
47354: LD_INT 8
47356: PUSH
47357: LD_INT 20
47359: PUSH
47360: LD_INT 21
47362: PUSH
47363: LD_INT 22
47365: PUSH
47366: LD_INT 72
47368: PUSH
47369: LD_INT 26
47371: PUSH
47372: LD_INT 69
47374: PUSH
47375: LD_INT 39
47377: PUSH
47378: LD_INT 40
47380: PUSH
47381: LD_INT 41
47383: PUSH
47384: LD_INT 42
47386: PUSH
47387: LD_INT 43
47389: PUSH
47390: LD_INT 48
47392: PUSH
47393: LD_INT 49
47395: PUSH
47396: LD_INT 50
47398: PUSH
47399: LD_INT 51
47401: PUSH
47402: LD_INT 52
47404: PUSH
47405: LD_INT 53
47407: PUSH
47408: LD_INT 54
47410: PUSH
47411: LD_INT 55
47413: PUSH
47414: LD_INT 56
47416: PUSH
47417: LD_INT 60
47419: PUSH
47420: LD_INT 61
47422: PUSH
47423: LD_INT 62
47425: PUSH
47426: LD_INT 66
47428: PUSH
47429: LD_INT 67
47431: PUSH
47432: LD_INT 68
47434: PUSH
47435: LD_INT 81
47437: PUSH
47438: LD_INT 82
47440: PUSH
47441: LD_INT 83
47443: PUSH
47444: LD_INT 84
47446: PUSH
47447: LD_INT 85
47449: PUSH
47450: LD_INT 87
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
47508: GO 47741
47510: LD_INT 3
47512: DOUBLE
47513: EQUAL
47514: IFTRUE 47518
47516: GO 47740
47518: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
47519: LD_ADDR_VAR 0 4
47523: PUSH
47524: LD_INT 46
47526: PUSH
47527: LD_INT 47
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 82
47538: PUSH
47539: LD_INT 83
47541: PUSH
47542: LD_INT 84
47544: PUSH
47545: LD_INT 85
47547: PUSH
47548: LD_INT 86
47550: PUSH
47551: LD_INT 11
47553: PUSH
47554: LD_INT 9
47556: PUSH
47557: LD_INT 20
47559: PUSH
47560: LD_INT 19
47562: PUSH
47563: LD_INT 21
47565: PUSH
47566: LD_INT 24
47568: PUSH
47569: LD_INT 22
47571: PUSH
47572: LD_INT 25
47574: PUSH
47575: LD_INT 28
47577: PUSH
47578: LD_INT 29
47580: PUSH
47581: LD_INT 30
47583: PUSH
47584: LD_INT 31
47586: PUSH
47587: LD_INT 37
47589: PUSH
47590: LD_INT 38
47592: PUSH
47593: LD_INT 32
47595: PUSH
47596: LD_INT 27
47598: PUSH
47599: LD_INT 33
47601: PUSH
47602: LD_INT 69
47604: PUSH
47605: LD_INT 39
47607: PUSH
47608: LD_INT 34
47610: PUSH
47611: LD_INT 40
47613: PUSH
47614: LD_INT 71
47616: PUSH
47617: LD_INT 23
47619: PUSH
47620: LD_INT 44
47622: PUSH
47623: LD_INT 48
47625: PUSH
47626: LD_INT 49
47628: PUSH
47629: LD_INT 50
47631: PUSH
47632: LD_INT 51
47634: PUSH
47635: LD_INT 52
47637: PUSH
47638: LD_INT 53
47640: PUSH
47641: LD_INT 54
47643: PUSH
47644: LD_INT 55
47646: PUSH
47647: LD_INT 56
47649: PUSH
47650: LD_INT 57
47652: PUSH
47653: LD_INT 58
47655: PUSH
47656: LD_INT 59
47658: PUSH
47659: LD_INT 63
47661: PUSH
47662: LD_INT 64
47664: PUSH
47665: LD_INT 65
47667: PUSH
47668: LD_INT 82
47670: PUSH
47671: LD_INT 83
47673: PUSH
47674: LD_INT 84
47676: PUSH
47677: LD_INT 85
47679: PUSH
47680: LD_INT 86
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
47738: GO 47741
47740: POP
// if state > - 1 and state < 3 then
47741: LD_VAR 0 3
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: GREATER
47750: PUSH
47751: LD_VAR 0 3
47755: PUSH
47756: LD_INT 3
47758: LESS
47759: AND
47760: IFFALSE 47817
// for i in result do
47762: LD_ADDR_VAR 0 5
47766: PUSH
47767: LD_VAR 0 4
47771: PUSH
47772: FOR_IN
47773: IFFALSE 47815
// if GetTech ( i , side ) <> state then
47775: LD_VAR 0 5
47779: PPUSH
47780: LD_VAR 0 1
47784: PPUSH
47785: CALL_OW 321
47789: PUSH
47790: LD_VAR 0 3
47794: NONEQUAL
47795: IFFALSE 47813
// result := result diff i ;
47797: LD_ADDR_VAR 0 4
47801: PUSH
47802: LD_VAR 0 4
47806: PUSH
47807: LD_VAR 0 5
47811: DIFF
47812: ST_TO_ADDR
47813: GO 47772
47815: POP
47816: POP
// end ;
47817: LD_VAR 0 4
47821: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47822: LD_INT 0
47824: PPUSH
47825: PPUSH
47826: PPUSH
// result := true ;
47827: LD_ADDR_VAR 0 3
47831: PUSH
47832: LD_INT 1
47834: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47835: LD_ADDR_VAR 0 5
47839: PUSH
47840: LD_VAR 0 2
47844: PPUSH
47845: CALL_OW 480
47849: ST_TO_ADDR
// if not tmp then
47850: LD_VAR 0 5
47854: NOT
47855: IFFALSE 47859
// exit ;
47857: GO 47908
// for i in tmp do
47859: LD_ADDR_VAR 0 4
47863: PUSH
47864: LD_VAR 0 5
47868: PUSH
47869: FOR_IN
47870: IFFALSE 47906
// if GetTech ( i , side ) <> state_researched then
47872: LD_VAR 0 4
47876: PPUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: CALL_OW 321
47886: PUSH
47887: LD_INT 2
47889: NONEQUAL
47890: IFFALSE 47904
// begin result := false ;
47892: LD_ADDR_VAR 0 3
47896: PUSH
47897: LD_INT 0
47899: ST_TO_ADDR
// exit ;
47900: POP
47901: POP
47902: GO 47908
// end ;
47904: GO 47869
47906: POP
47907: POP
// end ;
47908: LD_VAR 0 3
47912: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47913: LD_INT 0
47915: PPUSH
47916: PPUSH
47917: PPUSH
47918: PPUSH
47919: PPUSH
47920: PPUSH
47921: PPUSH
47922: PPUSH
47923: PPUSH
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47928: LD_VAR 0 1
47932: NOT
47933: PUSH
47934: LD_VAR 0 1
47938: PPUSH
47939: CALL_OW 257
47943: PUSH
47944: LD_INT 9
47946: NONEQUAL
47947: OR
47948: IFFALSE 47952
// exit ;
47950: GO 48525
// side := GetSide ( unit ) ;
47952: LD_ADDR_VAR 0 9
47956: PUSH
47957: LD_VAR 0 1
47961: PPUSH
47962: CALL_OW 255
47966: ST_TO_ADDR
// tech_space := tech_spacanom ;
47967: LD_ADDR_VAR 0 12
47971: PUSH
47972: LD_INT 29
47974: ST_TO_ADDR
// tech_time := tech_taurad ;
47975: LD_ADDR_VAR 0 13
47979: PUSH
47980: LD_INT 28
47982: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47983: LD_ADDR_VAR 0 11
47987: PUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 310
47997: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47998: LD_VAR 0 11
48002: PPUSH
48003: CALL_OW 247
48007: PUSH
48008: LD_INT 2
48010: EQUAL
48011: IFFALSE 48015
// exit ;
48013: GO 48525
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48015: LD_ADDR_VAR 0 8
48019: PUSH
48020: LD_INT 81
48022: PUSH
48023: LD_VAR 0 9
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: LD_INT 21
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PPUSH
48053: CALL_OW 69
48057: ST_TO_ADDR
// if not tmp then
48058: LD_VAR 0 8
48062: NOT
48063: IFFALSE 48067
// exit ;
48065: GO 48525
// if in_unit then
48067: LD_VAR 0 11
48071: IFFALSE 48095
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48073: LD_ADDR_VAR 0 10
48077: PUSH
48078: LD_VAR 0 8
48082: PPUSH
48083: LD_VAR 0 11
48087: PPUSH
48088: CALL_OW 74
48092: ST_TO_ADDR
48093: GO 48115
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48095: LD_ADDR_VAR 0 10
48099: PUSH
48100: LD_VAR 0 8
48104: PPUSH
48105: LD_VAR 0 1
48109: PPUSH
48110: CALL_OW 74
48114: ST_TO_ADDR
// if not enemy then
48115: LD_VAR 0 10
48119: NOT
48120: IFFALSE 48124
// exit ;
48122: GO 48525
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48124: LD_VAR 0 11
48128: PUSH
48129: LD_VAR 0 11
48133: PPUSH
48134: LD_VAR 0 10
48138: PPUSH
48139: CALL_OW 296
48143: PUSH
48144: LD_INT 13
48146: GREATER
48147: AND
48148: PUSH
48149: LD_VAR 0 1
48153: PPUSH
48154: LD_VAR 0 10
48158: PPUSH
48159: CALL_OW 296
48163: PUSH
48164: LD_INT 12
48166: GREATER
48167: OR
48168: IFFALSE 48172
// exit ;
48170: GO 48525
// missile := [ 1 ] ;
48172: LD_ADDR_VAR 0 14
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48183: LD_VAR 0 9
48187: PPUSH
48188: LD_VAR 0 12
48192: PPUSH
48193: CALL_OW 325
48197: IFFALSE 48226
// missile := Insert ( missile , missile + 1 , 2 ) ;
48199: LD_ADDR_VAR 0 14
48203: PUSH
48204: LD_VAR 0 14
48208: PPUSH
48209: LD_VAR 0 14
48213: PUSH
48214: LD_INT 1
48216: PLUS
48217: PPUSH
48218: LD_INT 2
48220: PPUSH
48221: CALL_OW 2
48225: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48226: LD_VAR 0 9
48230: PPUSH
48231: LD_VAR 0 13
48235: PPUSH
48236: CALL_OW 325
48240: PUSH
48241: LD_VAR 0 10
48245: PPUSH
48246: CALL_OW 255
48250: PPUSH
48251: LD_VAR 0 13
48255: PPUSH
48256: CALL_OW 325
48260: NOT
48261: AND
48262: IFFALSE 48291
// missile := Insert ( missile , missile + 1 , 3 ) ;
48264: LD_ADDR_VAR 0 14
48268: PUSH
48269: LD_VAR 0 14
48273: PPUSH
48274: LD_VAR 0 14
48278: PUSH
48279: LD_INT 1
48281: PLUS
48282: PPUSH
48283: LD_INT 3
48285: PPUSH
48286: CALL_OW 2
48290: ST_TO_ADDR
// if missile < 2 then
48291: LD_VAR 0 14
48295: PUSH
48296: LD_INT 2
48298: LESS
48299: IFFALSE 48303
// exit ;
48301: GO 48525
// x := GetX ( enemy ) ;
48303: LD_ADDR_VAR 0 4
48307: PUSH
48308: LD_VAR 0 10
48312: PPUSH
48313: CALL_OW 250
48317: ST_TO_ADDR
// y := GetY ( enemy ) ;
48318: LD_ADDR_VAR 0 5
48322: PUSH
48323: LD_VAR 0 10
48327: PPUSH
48328: CALL_OW 251
48332: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48333: LD_ADDR_VAR 0 6
48337: PUSH
48338: LD_VAR 0 4
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PPUSH
48347: LD_INT 1
48349: PPUSH
48350: CALL_OW 12
48354: PLUS
48355: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48356: LD_ADDR_VAR 0 7
48360: PUSH
48361: LD_VAR 0 5
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PPUSH
48370: LD_INT 1
48372: PPUSH
48373: CALL_OW 12
48377: PLUS
48378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48379: LD_VAR 0 6
48383: PPUSH
48384: LD_VAR 0 7
48388: PPUSH
48389: CALL_OW 488
48393: NOT
48394: IFFALSE 48416
// begin _x := x ;
48396: LD_ADDR_VAR 0 6
48400: PUSH
48401: LD_VAR 0 4
48405: ST_TO_ADDR
// _y := y ;
48406: LD_ADDR_VAR 0 7
48410: PUSH
48411: LD_VAR 0 5
48415: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48416: LD_ADDR_VAR 0 3
48420: PUSH
48421: LD_INT 1
48423: PPUSH
48424: LD_VAR 0 14
48428: PPUSH
48429: CALL_OW 12
48433: ST_TO_ADDR
// case i of 1 :
48434: LD_VAR 0 3
48438: PUSH
48439: LD_INT 1
48441: DOUBLE
48442: EQUAL
48443: IFTRUE 48447
48445: GO 48464
48447: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48448: LD_VAR 0 1
48452: PPUSH
48453: LD_VAR 0 10
48457: PPUSH
48458: CALL_OW 115
48462: GO 48525
48464: LD_INT 2
48466: DOUBLE
48467: EQUAL
48468: IFTRUE 48472
48470: GO 48494
48472: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48473: LD_VAR 0 1
48477: PPUSH
48478: LD_VAR 0 6
48482: PPUSH
48483: LD_VAR 0 7
48487: PPUSH
48488: CALL_OW 153
48492: GO 48525
48494: LD_INT 3
48496: DOUBLE
48497: EQUAL
48498: IFTRUE 48502
48500: GO 48524
48502: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48503: LD_VAR 0 1
48507: PPUSH
48508: LD_VAR 0 6
48512: PPUSH
48513: LD_VAR 0 7
48517: PPUSH
48518: CALL_OW 154
48522: GO 48525
48524: POP
// end ;
48525: LD_VAR 0 2
48529: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48530: LD_INT 0
48532: PPUSH
48533: PPUSH
48534: PPUSH
48535: PPUSH
48536: PPUSH
48537: PPUSH
// if not unit or not building then
48538: LD_VAR 0 1
48542: NOT
48543: PUSH
48544: LD_VAR 0 2
48548: NOT
48549: OR
48550: IFFALSE 48554
// exit ;
48552: GO 48712
// x := GetX ( building ) ;
48554: LD_ADDR_VAR 0 5
48558: PUSH
48559: LD_VAR 0 2
48563: PPUSH
48564: CALL_OW 250
48568: ST_TO_ADDR
// y := GetY ( building ) ;
48569: LD_ADDR_VAR 0 6
48573: PUSH
48574: LD_VAR 0 2
48578: PPUSH
48579: CALL_OW 251
48583: ST_TO_ADDR
// for i = 0 to 5 do
48584: LD_ADDR_VAR 0 4
48588: PUSH
48589: DOUBLE
48590: LD_INT 0
48592: DEC
48593: ST_TO_ADDR
48594: LD_INT 5
48596: PUSH
48597: FOR_TO
48598: IFFALSE 48710
// begin _x := ShiftX ( x , i , 3 ) ;
48600: LD_ADDR_VAR 0 7
48604: PUSH
48605: LD_VAR 0 5
48609: PPUSH
48610: LD_VAR 0 4
48614: PPUSH
48615: LD_INT 3
48617: PPUSH
48618: CALL_OW 272
48622: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48623: LD_ADDR_VAR 0 8
48627: PUSH
48628: LD_VAR 0 6
48632: PPUSH
48633: LD_VAR 0 4
48637: PPUSH
48638: LD_INT 3
48640: PPUSH
48641: CALL_OW 273
48645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48646: LD_VAR 0 7
48650: PPUSH
48651: LD_VAR 0 8
48655: PPUSH
48656: CALL_OW 488
48660: NOT
48661: IFFALSE 48665
// continue ;
48663: GO 48597
// if HexInfo ( _x , _y ) = 0 then
48665: LD_VAR 0 7
48669: PPUSH
48670: LD_VAR 0 8
48674: PPUSH
48675: CALL_OW 428
48679: PUSH
48680: LD_INT 0
48682: EQUAL
48683: IFFALSE 48708
// begin ComMoveXY ( unit , _x , _y ) ;
48685: LD_VAR 0 1
48689: PPUSH
48690: LD_VAR 0 7
48694: PPUSH
48695: LD_VAR 0 8
48699: PPUSH
48700: CALL_OW 111
// exit ;
48704: POP
48705: POP
48706: GO 48712
// end ; end ;
48708: GO 48597
48710: POP
48711: POP
// end ;
48712: LD_VAR 0 3
48716: RET
// export function ScanBase ( side , base_area ) ; begin
48717: LD_INT 0
48719: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48720: LD_ADDR_VAR 0 3
48724: PUSH
48725: LD_VAR 0 2
48729: PPUSH
48730: LD_INT 81
48732: PUSH
48733: LD_VAR 0 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PPUSH
48742: CALL_OW 70
48746: ST_TO_ADDR
// end ;
48747: LD_VAR 0 3
48751: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48752: LD_INT 0
48754: PPUSH
48755: PPUSH
48756: PPUSH
48757: PPUSH
// result := false ;
48758: LD_ADDR_VAR 0 2
48762: PUSH
48763: LD_INT 0
48765: ST_TO_ADDR
// side := GetSide ( unit ) ;
48766: LD_ADDR_VAR 0 3
48770: PUSH
48771: LD_VAR 0 1
48775: PPUSH
48776: CALL_OW 255
48780: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48781: LD_ADDR_VAR 0 4
48785: PUSH
48786: LD_VAR 0 1
48790: PPUSH
48791: CALL_OW 248
48795: ST_TO_ADDR
// case nat of 1 :
48796: LD_VAR 0 4
48800: PUSH
48801: LD_INT 1
48803: DOUBLE
48804: EQUAL
48805: IFTRUE 48809
48807: GO 48820
48809: POP
// tech := tech_lassight ; 2 :
48810: LD_ADDR_VAR 0 5
48814: PUSH
48815: LD_INT 12
48817: ST_TO_ADDR
48818: GO 48859
48820: LD_INT 2
48822: DOUBLE
48823: EQUAL
48824: IFTRUE 48828
48826: GO 48839
48828: POP
// tech := tech_mortar ; 3 :
48829: LD_ADDR_VAR 0 5
48833: PUSH
48834: LD_INT 41
48836: ST_TO_ADDR
48837: GO 48859
48839: LD_INT 3
48841: DOUBLE
48842: EQUAL
48843: IFTRUE 48847
48845: GO 48858
48847: POP
// tech := tech_bazooka ; end ;
48848: LD_ADDR_VAR 0 5
48852: PUSH
48853: LD_INT 44
48855: ST_TO_ADDR
48856: GO 48859
48858: POP
// if Researched ( side , tech ) then
48859: LD_VAR 0 3
48863: PPUSH
48864: LD_VAR 0 5
48868: PPUSH
48869: CALL_OW 325
48873: IFFALSE 48900
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48875: LD_ADDR_VAR 0 2
48879: PUSH
48880: LD_INT 5
48882: PUSH
48883: LD_INT 8
48885: PUSH
48886: LD_INT 9
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: PUSH
48894: LD_VAR 0 4
48898: ARRAY
48899: ST_TO_ADDR
// end ;
48900: LD_VAR 0 2
48904: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48905: LD_INT 0
48907: PPUSH
48908: PPUSH
48909: PPUSH
// if not mines then
48910: LD_VAR 0 2
48914: NOT
48915: IFFALSE 48919
// exit ;
48917: GO 49063
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48919: LD_ADDR_VAR 0 5
48923: PUSH
48924: LD_INT 81
48926: PUSH
48927: LD_VAR 0 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 21
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PPUSH
48957: CALL_OW 69
48961: ST_TO_ADDR
// for i in mines do
48962: LD_ADDR_VAR 0 4
48966: PUSH
48967: LD_VAR 0 2
48971: PUSH
48972: FOR_IN
48973: IFFALSE 49061
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48975: LD_VAR 0 4
48979: PUSH
48980: LD_INT 1
48982: ARRAY
48983: PPUSH
48984: LD_VAR 0 4
48988: PUSH
48989: LD_INT 2
48991: ARRAY
48992: PPUSH
48993: CALL_OW 458
48997: NOT
48998: IFFALSE 49002
// continue ;
49000: GO 48972
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49002: LD_VAR 0 4
49006: PUSH
49007: LD_INT 1
49009: ARRAY
49010: PPUSH
49011: LD_VAR 0 4
49015: PUSH
49016: LD_INT 2
49018: ARRAY
49019: PPUSH
49020: CALL_OW 428
49024: PUSH
49025: LD_VAR 0 5
49029: IN
49030: IFFALSE 49059
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49032: LD_VAR 0 4
49036: PUSH
49037: LD_INT 1
49039: ARRAY
49040: PPUSH
49041: LD_VAR 0 4
49045: PUSH
49046: LD_INT 2
49048: ARRAY
49049: PPUSH
49050: LD_VAR 0 1
49054: PPUSH
49055: CALL_OW 456
// end ;
49059: GO 48972
49061: POP
49062: POP
// end ;
49063: LD_VAR 0 3
49067: RET
// export function Count ( array ) ; var i ; begin
49068: LD_INT 0
49070: PPUSH
49071: PPUSH
// result := 0 ;
49072: LD_ADDR_VAR 0 2
49076: PUSH
49077: LD_INT 0
49079: ST_TO_ADDR
// for i in array do
49080: LD_ADDR_VAR 0 3
49084: PUSH
49085: LD_VAR 0 1
49089: PUSH
49090: FOR_IN
49091: IFFALSE 49115
// if i then
49093: LD_VAR 0 3
49097: IFFALSE 49113
// result := result + 1 ;
49099: LD_ADDR_VAR 0 2
49103: PUSH
49104: LD_VAR 0 2
49108: PUSH
49109: LD_INT 1
49111: PLUS
49112: ST_TO_ADDR
49113: GO 49090
49115: POP
49116: POP
// end ;
49117: LD_VAR 0 2
49121: RET
// export function IsEmpty ( building ) ; begin
49122: LD_INT 0
49124: PPUSH
// if not building then
49125: LD_VAR 0 1
49129: NOT
49130: IFFALSE 49134
// exit ;
49132: GO 49177
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49134: LD_ADDR_VAR 0 2
49138: PUSH
49139: LD_VAR 0 1
49143: PUSH
49144: LD_INT 22
49146: PUSH
49147: LD_VAR 0 1
49151: PPUSH
49152: CALL_OW 255
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 58
49163: PUSH
49164: EMPTY
49165: LIST
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PPUSH
49171: CALL_OW 69
49175: IN
49176: ST_TO_ADDR
// end ;
49177: LD_VAR 0 2
49181: RET
// export function IsNotFull ( building ) ; begin
49182: LD_INT 0
49184: PPUSH
// if not building then
49185: LD_VAR 0 1
49189: NOT
49190: IFFALSE 49194
// exit ;
49192: GO 49213
// result := UnitsInside ( building ) < 6 ;
49194: LD_ADDR_VAR 0 2
49198: PUSH
49199: LD_VAR 0 1
49203: PPUSH
49204: CALL_OW 313
49208: PUSH
49209: LD_INT 6
49211: LESS
49212: ST_TO_ADDR
// end ;
49213: LD_VAR 0 2
49217: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
49218: LD_INT 0
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
// tmp := [ ] ;
49224: LD_ADDR_VAR 0 3
49228: PUSH
49229: EMPTY
49230: ST_TO_ADDR
// list := [ ] ;
49231: LD_ADDR_VAR 0 5
49235: PUSH
49236: EMPTY
49237: ST_TO_ADDR
// for i = 16 to 25 do
49238: LD_ADDR_VAR 0 4
49242: PUSH
49243: DOUBLE
49244: LD_INT 16
49246: DEC
49247: ST_TO_ADDR
49248: LD_INT 25
49250: PUSH
49251: FOR_TO
49252: IFFALSE 49325
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49254: LD_ADDR_VAR 0 3
49258: PUSH
49259: LD_VAR 0 3
49263: PUSH
49264: LD_INT 22
49266: PUSH
49267: LD_VAR 0 1
49271: PPUSH
49272: CALL_OW 255
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 91
49283: PUSH
49284: LD_VAR 0 1
49288: PUSH
49289: LD_INT 6
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 30
49299: PUSH
49300: LD_VAR 0 4
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: PPUSH
49317: CALL_OW 69
49321: ADD
49322: ST_TO_ADDR
49323: GO 49251
49325: POP
49326: POP
// for i = 1 to tmp do
49327: LD_ADDR_VAR 0 4
49331: PUSH
49332: DOUBLE
49333: LD_INT 1
49335: DEC
49336: ST_TO_ADDR
49337: LD_VAR 0 3
49341: PUSH
49342: FOR_TO
49343: IFFALSE 49431
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
49345: LD_ADDR_VAR 0 5
49349: PUSH
49350: LD_VAR 0 5
49354: PUSH
49355: LD_VAR 0 3
49359: PUSH
49360: LD_VAR 0 4
49364: ARRAY
49365: PPUSH
49366: CALL_OW 266
49370: PUSH
49371: LD_VAR 0 3
49375: PUSH
49376: LD_VAR 0 4
49380: ARRAY
49381: PPUSH
49382: CALL_OW 250
49386: PUSH
49387: LD_VAR 0 3
49391: PUSH
49392: LD_VAR 0 4
49396: ARRAY
49397: PPUSH
49398: CALL_OW 251
49402: PUSH
49403: LD_VAR 0 3
49407: PUSH
49408: LD_VAR 0 4
49412: ARRAY
49413: PPUSH
49414: CALL_OW 254
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: ADD
49428: ST_TO_ADDR
49429: GO 49342
49431: POP
49432: POP
// result := list ;
49433: LD_ADDR_VAR 0 2
49437: PUSH
49438: LD_VAR 0 5
49442: ST_TO_ADDR
// end ;
49443: LD_VAR 0 2
49447: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
49448: LD_INT 0
49450: PPUSH
49451: PPUSH
49452: PPUSH
49453: PPUSH
49454: PPUSH
49455: PPUSH
49456: PPUSH
// if not factory then
49457: LD_VAR 0 1
49461: NOT
49462: IFFALSE 49466
// exit ;
49464: GO 50059
// if control = control_apeman then
49466: LD_VAR 0 4
49470: PUSH
49471: LD_INT 5
49473: EQUAL
49474: IFFALSE 49583
// begin tmp := UnitsInside ( factory ) ;
49476: LD_ADDR_VAR 0 8
49480: PUSH
49481: LD_VAR 0 1
49485: PPUSH
49486: CALL_OW 313
49490: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
49491: LD_VAR 0 8
49495: PPUSH
49496: LD_INT 25
49498: PUSH
49499: LD_INT 12
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PPUSH
49506: CALL_OW 72
49510: NOT
49511: IFFALSE 49521
// control := control_manual ;
49513: LD_ADDR_VAR 0 4
49517: PUSH
49518: LD_INT 1
49520: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
49521: LD_ADDR_VAR 0 8
49525: PUSH
49526: LD_VAR 0 1
49530: PPUSH
49531: CALL 49218 0 1
49535: ST_TO_ADDR
// if tmp then
49536: LD_VAR 0 8
49540: IFFALSE 49583
// begin for i in tmp do
49542: LD_ADDR_VAR 0 7
49546: PUSH
49547: LD_VAR 0 8
49551: PUSH
49552: FOR_IN
49553: IFFALSE 49581
// if i [ 1 ] = b_ext_radio then
49555: LD_VAR 0 7
49559: PUSH
49560: LD_INT 1
49562: ARRAY
49563: PUSH
49564: LD_INT 22
49566: EQUAL
49567: IFFALSE 49579
// begin control := control_remote ;
49569: LD_ADDR_VAR 0 4
49573: PUSH
49574: LD_INT 2
49576: ST_TO_ADDR
// break ;
49577: GO 49581
// end ;
49579: GO 49552
49581: POP
49582: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49583: LD_VAR 0 1
49587: PPUSH
49588: LD_VAR 0 2
49592: PPUSH
49593: LD_VAR 0 3
49597: PPUSH
49598: LD_VAR 0 4
49602: PPUSH
49603: LD_VAR 0 5
49607: PPUSH
49608: CALL_OW 448
49612: IFFALSE 49647
// begin result := [ chassis , engine , control , weapon ] ;
49614: LD_ADDR_VAR 0 6
49618: PUSH
49619: LD_VAR 0 2
49623: PUSH
49624: LD_VAR 0 3
49628: PUSH
49629: LD_VAR 0 4
49633: PUSH
49634: LD_VAR 0 5
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// exit ;
49645: GO 50059
// end ; _chassis := AvailableChassisList ( factory ) ;
49647: LD_ADDR_VAR 0 9
49651: PUSH
49652: LD_VAR 0 1
49656: PPUSH
49657: CALL_OW 475
49661: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
49662: LD_ADDR_VAR 0 11
49666: PUSH
49667: LD_VAR 0 1
49671: PPUSH
49672: CALL_OW 476
49676: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
49677: LD_ADDR_VAR 0 12
49681: PUSH
49682: LD_VAR 0 1
49686: PPUSH
49687: CALL_OW 477
49691: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
49692: LD_ADDR_VAR 0 10
49696: PUSH
49697: LD_VAR 0 1
49701: PPUSH
49702: CALL_OW 478
49706: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
49707: LD_VAR 0 9
49711: NOT
49712: PUSH
49713: LD_VAR 0 11
49717: NOT
49718: OR
49719: PUSH
49720: LD_VAR 0 12
49724: NOT
49725: OR
49726: PUSH
49727: LD_VAR 0 10
49731: NOT
49732: OR
49733: IFFALSE 49768
// begin result := [ chassis , engine , control , weapon ] ;
49735: LD_ADDR_VAR 0 6
49739: PUSH
49740: LD_VAR 0 2
49744: PUSH
49745: LD_VAR 0 3
49749: PUSH
49750: LD_VAR 0 4
49754: PUSH
49755: LD_VAR 0 5
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// exit ;
49766: GO 50059
// end ; if not chassis in _chassis then
49768: LD_VAR 0 2
49772: PUSH
49773: LD_VAR 0 9
49777: IN
49778: NOT
49779: IFFALSE 49805
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49781: LD_ADDR_VAR 0 2
49785: PUSH
49786: LD_VAR 0 9
49790: PUSH
49791: LD_INT 1
49793: PPUSH
49794: LD_VAR 0 9
49798: PPUSH
49799: CALL_OW 12
49803: ARRAY
49804: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49805: LD_VAR 0 2
49809: PPUSH
49810: LD_VAR 0 3
49814: PPUSH
49815: CALL 50064 0 2
49819: NOT
49820: IFFALSE 49879
// repeat engine := _engine [ 1 ] ;
49822: LD_ADDR_VAR 0 3
49826: PUSH
49827: LD_VAR 0 11
49831: PUSH
49832: LD_INT 1
49834: ARRAY
49835: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49836: LD_ADDR_VAR 0 11
49840: PUSH
49841: LD_VAR 0 11
49845: PPUSH
49846: LD_INT 1
49848: PPUSH
49849: CALL_OW 3
49853: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49854: LD_VAR 0 2
49858: PPUSH
49859: LD_VAR 0 3
49863: PPUSH
49864: CALL 50064 0 2
49868: PUSH
49869: LD_VAR 0 11
49873: PUSH
49874: EMPTY
49875: EQUAL
49876: OR
49877: IFFALSE 49822
// if not control in _control then
49879: LD_VAR 0 4
49883: PUSH
49884: LD_VAR 0 12
49888: IN
49889: NOT
49890: IFFALSE 49916
// control := _control [ rand ( 1 , _control ) ] ;
49892: LD_ADDR_VAR 0 4
49896: PUSH
49897: LD_VAR 0 12
49901: PUSH
49902: LD_INT 1
49904: PPUSH
49905: LD_VAR 0 12
49909: PPUSH
49910: CALL_OW 12
49914: ARRAY
49915: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49916: LD_VAR 0 2
49920: PPUSH
49921: LD_VAR 0 5
49925: PPUSH
49926: CALL 50284 0 2
49930: NOT
49931: IFFALSE 49990
// repeat weapon := _weapon [ 1 ] ;
49933: LD_ADDR_VAR 0 5
49937: PUSH
49938: LD_VAR 0 10
49942: PUSH
49943: LD_INT 1
49945: ARRAY
49946: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49947: LD_ADDR_VAR 0 10
49951: PUSH
49952: LD_VAR 0 10
49956: PPUSH
49957: LD_INT 1
49959: PPUSH
49960: CALL_OW 3
49964: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49965: LD_VAR 0 2
49969: PPUSH
49970: LD_VAR 0 5
49974: PPUSH
49975: CALL 50284 0 2
49979: PUSH
49980: LD_VAR 0 10
49984: PUSH
49985: EMPTY
49986: EQUAL
49987: OR
49988: IFFALSE 49933
// result := [ ] ;
49990: LD_ADDR_VAR 0 6
49994: PUSH
49995: EMPTY
49996: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49997: LD_VAR 0 1
50001: PPUSH
50002: LD_VAR 0 2
50006: PPUSH
50007: LD_VAR 0 3
50011: PPUSH
50012: LD_VAR 0 4
50016: PPUSH
50017: LD_VAR 0 5
50021: PPUSH
50022: CALL_OW 448
50026: IFFALSE 50059
// result := [ chassis , engine , control , weapon ] ;
50028: LD_ADDR_VAR 0 6
50032: PUSH
50033: LD_VAR 0 2
50037: PUSH
50038: LD_VAR 0 3
50042: PUSH
50043: LD_VAR 0 4
50047: PUSH
50048: LD_VAR 0 5
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// end ;
50059: LD_VAR 0 6
50063: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50064: LD_INT 0
50066: PPUSH
// if not chassis or not engine then
50067: LD_VAR 0 1
50071: NOT
50072: PUSH
50073: LD_VAR 0 2
50077: NOT
50078: OR
50079: IFFALSE 50083
// exit ;
50081: GO 50279
// case engine of engine_solar :
50083: LD_VAR 0 2
50087: PUSH
50088: LD_INT 2
50090: DOUBLE
50091: EQUAL
50092: IFTRUE 50096
50094: GO 50134
50096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50097: LD_ADDR_VAR 0 3
50101: PUSH
50102: LD_INT 11
50104: PUSH
50105: LD_INT 12
50107: PUSH
50108: LD_INT 13
50110: PUSH
50111: LD_INT 14
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: ST_TO_ADDR
50132: GO 50263
50134: LD_INT 1
50136: DOUBLE
50137: EQUAL
50138: IFTRUE 50142
50140: GO 50204
50142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50143: LD_ADDR_VAR 0 3
50147: PUSH
50148: LD_INT 11
50150: PUSH
50151: LD_INT 12
50153: PUSH
50154: LD_INT 13
50156: PUSH
50157: LD_INT 14
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: LD_INT 4
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: LD_INT 21
50177: PUSH
50178: LD_INT 23
50180: PUSH
50181: LD_INT 22
50183: PUSH
50184: LD_INT 24
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: ST_TO_ADDR
50202: GO 50263
50204: LD_INT 3
50206: DOUBLE
50207: EQUAL
50208: IFTRUE 50212
50210: GO 50262
50212: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50213: LD_ADDR_VAR 0 3
50217: PUSH
50218: LD_INT 13
50220: PUSH
50221: LD_INT 14
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: LD_INT 5
50235: PUSH
50236: LD_INT 21
50238: PUSH
50239: LD_INT 22
50241: PUSH
50242: LD_INT 23
50244: PUSH
50245: LD_INT 24
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: ST_TO_ADDR
50260: GO 50263
50262: POP
// result := ( chassis in result ) ;
50263: LD_ADDR_VAR 0 3
50267: PUSH
50268: LD_VAR 0 1
50272: PUSH
50273: LD_VAR 0 3
50277: IN
50278: ST_TO_ADDR
// end ;
50279: LD_VAR 0 3
50283: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50284: LD_INT 0
50286: PPUSH
// if not chassis or not weapon then
50287: LD_VAR 0 1
50291: NOT
50292: PUSH
50293: LD_VAR 0 2
50297: NOT
50298: OR
50299: IFFALSE 50303
// exit ;
50301: GO 51329
// case weapon of us_machine_gun :
50303: LD_VAR 0 2
50307: PUSH
50308: LD_INT 2
50310: DOUBLE
50311: EQUAL
50312: IFTRUE 50316
50314: GO 50346
50316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50317: LD_ADDR_VAR 0 3
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: LD_INT 4
50333: PUSH
50334: LD_INT 5
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: ST_TO_ADDR
50344: GO 51313
50346: LD_INT 3
50348: DOUBLE
50349: EQUAL
50350: IFTRUE 50354
50352: GO 50384
50354: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
50355: LD_ADDR_VAR 0 3
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: LD_INT 5
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: ST_TO_ADDR
50382: GO 51313
50384: LD_INT 11
50386: DOUBLE
50387: EQUAL
50388: IFTRUE 50392
50390: GO 50422
50392: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
50393: LD_ADDR_VAR 0 3
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: LD_INT 4
50409: PUSH
50410: LD_INT 5
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: ST_TO_ADDR
50420: GO 51313
50422: LD_INT 4
50424: DOUBLE
50425: EQUAL
50426: IFTRUE 50430
50428: GO 50456
50430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
50431: LD_ADDR_VAR 0 3
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: LD_INT 4
50444: PUSH
50445: LD_INT 5
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: ST_TO_ADDR
50454: GO 51313
50456: LD_INT 5
50458: DOUBLE
50459: EQUAL
50460: IFTRUE 50464
50462: GO 50490
50464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
50465: LD_ADDR_VAR 0 3
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: LD_INT 4
50478: PUSH
50479: LD_INT 5
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: ST_TO_ADDR
50488: GO 51313
50490: LD_INT 9
50492: DOUBLE
50493: EQUAL
50494: IFTRUE 50498
50496: GO 50524
50498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
50499: LD_ADDR_VAR 0 3
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: LD_INT 4
50512: PUSH
50513: LD_INT 5
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
50522: GO 51313
50524: LD_INT 7
50526: DOUBLE
50527: EQUAL
50528: IFTRUE 50532
50530: GO 50558
50532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
50533: LD_ADDR_VAR 0 3
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: LD_INT 4
50546: PUSH
50547: LD_INT 5
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
50556: GO 51313
50558: LD_INT 12
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50566
50564: GO 50592
50566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
50567: LD_ADDR_VAR 0 3
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: LD_INT 4
50580: PUSH
50581: LD_INT 5
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
50590: GO 51313
50592: LD_INT 13
50594: DOUBLE
50595: EQUAL
50596: IFTRUE 50600
50598: GO 50626
50600: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
50601: LD_ADDR_VAR 0 3
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 4
50614: PUSH
50615: LD_INT 5
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
50624: GO 51313
50626: LD_INT 14
50628: DOUBLE
50629: EQUAL
50630: IFTRUE 50634
50632: GO 50652
50634: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
50635: LD_ADDR_VAR 0 3
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 5
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: ST_TO_ADDR
50650: GO 51313
50652: LD_INT 6
50654: DOUBLE
50655: EQUAL
50656: IFTRUE 50660
50658: GO 50678
50660: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
50661: LD_ADDR_VAR 0 3
50665: PUSH
50666: LD_INT 4
50668: PUSH
50669: LD_INT 5
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: ST_TO_ADDR
50676: GO 51313
50678: LD_INT 10
50680: DOUBLE
50681: EQUAL
50682: IFTRUE 50686
50684: GO 50704
50686: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
50687: LD_ADDR_VAR 0 3
50691: PUSH
50692: LD_INT 4
50694: PUSH
50695: LD_INT 5
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: ST_TO_ADDR
50702: GO 51313
50704: LD_INT 22
50706: DOUBLE
50707: EQUAL
50708: IFTRUE 50712
50710: GO 50738
50712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
50713: LD_ADDR_VAR 0 3
50717: PUSH
50718: LD_INT 11
50720: PUSH
50721: LD_INT 12
50723: PUSH
50724: LD_INT 13
50726: PUSH
50727: LD_INT 14
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: ST_TO_ADDR
50736: GO 51313
50738: LD_INT 23
50740: DOUBLE
50741: EQUAL
50742: IFTRUE 50746
50744: GO 50772
50746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50747: LD_ADDR_VAR 0 3
50751: PUSH
50752: LD_INT 11
50754: PUSH
50755: LD_INT 12
50757: PUSH
50758: LD_INT 13
50760: PUSH
50761: LD_INT 14
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: ST_TO_ADDR
50770: GO 51313
50772: LD_INT 24
50774: DOUBLE
50775: EQUAL
50776: IFTRUE 50780
50778: GO 50806
50780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50781: LD_ADDR_VAR 0 3
50785: PUSH
50786: LD_INT 11
50788: PUSH
50789: LD_INT 12
50791: PUSH
50792: LD_INT 13
50794: PUSH
50795: LD_INT 14
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
50804: GO 51313
50806: LD_INT 30
50808: DOUBLE
50809: EQUAL
50810: IFTRUE 50814
50812: GO 50840
50814: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50815: LD_ADDR_VAR 0 3
50819: PUSH
50820: LD_INT 11
50822: PUSH
50823: LD_INT 12
50825: PUSH
50826: LD_INT 13
50828: PUSH
50829: LD_INT 14
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
50838: GO 51313
50840: LD_INT 25
50842: DOUBLE
50843: EQUAL
50844: IFTRUE 50848
50846: GO 50866
50848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50849: LD_ADDR_VAR 0 3
50853: PUSH
50854: LD_INT 13
50856: PUSH
50857: LD_INT 14
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: ST_TO_ADDR
50864: GO 51313
50866: LD_INT 27
50868: DOUBLE
50869: EQUAL
50870: IFTRUE 50874
50872: GO 50892
50874: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50875: LD_ADDR_VAR 0 3
50879: PUSH
50880: LD_INT 13
50882: PUSH
50883: LD_INT 14
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: ST_TO_ADDR
50890: GO 51313
50892: LD_INT 28
50894: DOUBLE
50895: EQUAL
50896: IFTRUE 50900
50898: GO 50918
50900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50901: LD_ADDR_VAR 0 3
50905: PUSH
50906: LD_INT 13
50908: PUSH
50909: LD_INT 14
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: ST_TO_ADDR
50916: GO 51313
50918: LD_INT 29
50920: DOUBLE
50921: EQUAL
50922: IFTRUE 50926
50924: GO 50944
50926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50927: LD_ADDR_VAR 0 3
50931: PUSH
50932: LD_INT 13
50934: PUSH
50935: LD_INT 14
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: ST_TO_ADDR
50942: GO 51313
50944: LD_INT 31
50946: DOUBLE
50947: EQUAL
50948: IFTRUE 50952
50950: GO 50970
50952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50953: LD_ADDR_VAR 0 3
50957: PUSH
50958: LD_INT 13
50960: PUSH
50961: LD_INT 14
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: ST_TO_ADDR
50968: GO 51313
50970: LD_INT 26
50972: DOUBLE
50973: EQUAL
50974: IFTRUE 50978
50976: GO 50996
50978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50979: LD_ADDR_VAR 0 3
50983: PUSH
50984: LD_INT 13
50986: PUSH
50987: LD_INT 14
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: ST_TO_ADDR
50994: GO 51313
50996: LD_INT 42
50998: DOUBLE
50999: EQUAL
51000: IFTRUE 51004
51002: GO 51030
51004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51005: LD_ADDR_VAR 0 3
51009: PUSH
51010: LD_INT 21
51012: PUSH
51013: LD_INT 22
51015: PUSH
51016: LD_INT 23
51018: PUSH
51019: LD_INT 24
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: ST_TO_ADDR
51028: GO 51313
51030: LD_INT 43
51032: DOUBLE
51033: EQUAL
51034: IFTRUE 51038
51036: GO 51064
51038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51039: LD_ADDR_VAR 0 3
51043: PUSH
51044: LD_INT 21
51046: PUSH
51047: LD_INT 22
51049: PUSH
51050: LD_INT 23
51052: PUSH
51053: LD_INT 24
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: ST_TO_ADDR
51062: GO 51313
51064: LD_INT 44
51066: DOUBLE
51067: EQUAL
51068: IFTRUE 51072
51070: GO 51098
51072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51073: LD_ADDR_VAR 0 3
51077: PUSH
51078: LD_INT 21
51080: PUSH
51081: LD_INT 22
51083: PUSH
51084: LD_INT 23
51086: PUSH
51087: LD_INT 24
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
51096: GO 51313
51098: LD_INT 45
51100: DOUBLE
51101: EQUAL
51102: IFTRUE 51106
51104: GO 51132
51106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51107: LD_ADDR_VAR 0 3
51111: PUSH
51112: LD_INT 21
51114: PUSH
51115: LD_INT 22
51117: PUSH
51118: LD_INT 23
51120: PUSH
51121: LD_INT 24
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: ST_TO_ADDR
51130: GO 51313
51132: LD_INT 49
51134: DOUBLE
51135: EQUAL
51136: IFTRUE 51140
51138: GO 51166
51140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51141: LD_ADDR_VAR 0 3
51145: PUSH
51146: LD_INT 21
51148: PUSH
51149: LD_INT 22
51151: PUSH
51152: LD_INT 23
51154: PUSH
51155: LD_INT 24
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: ST_TO_ADDR
51164: GO 51313
51166: LD_INT 51
51168: DOUBLE
51169: EQUAL
51170: IFTRUE 51174
51172: GO 51200
51174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51175: LD_ADDR_VAR 0 3
51179: PUSH
51180: LD_INT 21
51182: PUSH
51183: LD_INT 22
51185: PUSH
51186: LD_INT 23
51188: PUSH
51189: LD_INT 24
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: ST_TO_ADDR
51198: GO 51313
51200: LD_INT 52
51202: DOUBLE
51203: EQUAL
51204: IFTRUE 51208
51206: GO 51234
51208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51209: LD_ADDR_VAR 0 3
51213: PUSH
51214: LD_INT 21
51216: PUSH
51217: LD_INT 22
51219: PUSH
51220: LD_INT 23
51222: PUSH
51223: LD_INT 24
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
51232: GO 51313
51234: LD_INT 53
51236: DOUBLE
51237: EQUAL
51238: IFTRUE 51242
51240: GO 51260
51242: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51243: LD_ADDR_VAR 0 3
51247: PUSH
51248: LD_INT 23
51250: PUSH
51251: LD_INT 24
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: ST_TO_ADDR
51258: GO 51313
51260: LD_INT 46
51262: DOUBLE
51263: EQUAL
51264: IFTRUE 51268
51266: GO 51286
51268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51269: LD_ADDR_VAR 0 3
51273: PUSH
51274: LD_INT 23
51276: PUSH
51277: LD_INT 24
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: ST_TO_ADDR
51284: GO 51313
51286: LD_INT 47
51288: DOUBLE
51289: EQUAL
51290: IFTRUE 51294
51292: GO 51312
51294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51295: LD_ADDR_VAR 0 3
51299: PUSH
51300: LD_INT 23
51302: PUSH
51303: LD_INT 24
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: ST_TO_ADDR
51310: GO 51313
51312: POP
// result := ( chassis in result ) ;
51313: LD_ADDR_VAR 0 3
51317: PUSH
51318: LD_VAR 0 1
51322: PUSH
51323: LD_VAR 0 3
51327: IN
51328: ST_TO_ADDR
// end ;
51329: LD_VAR 0 3
51333: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
51334: LD_INT 0
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
51341: PPUSH
51342: PPUSH
// result := array ;
51343: LD_ADDR_VAR 0 5
51347: PUSH
51348: LD_VAR 0 1
51352: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
51353: LD_VAR 0 1
51357: NOT
51358: PUSH
51359: LD_VAR 0 2
51363: NOT
51364: OR
51365: PUSH
51366: LD_VAR 0 3
51370: NOT
51371: OR
51372: PUSH
51373: LD_VAR 0 2
51377: PUSH
51378: LD_VAR 0 1
51382: GREATER
51383: OR
51384: PUSH
51385: LD_VAR 0 3
51389: PUSH
51390: LD_VAR 0 1
51394: GREATER
51395: OR
51396: IFFALSE 51400
// exit ;
51398: GO 51696
// if direction then
51400: LD_VAR 0 4
51404: IFFALSE 51468
// begin d := 1 ;
51406: LD_ADDR_VAR 0 9
51410: PUSH
51411: LD_INT 1
51413: ST_TO_ADDR
// if i_from > i_to then
51414: LD_VAR 0 2
51418: PUSH
51419: LD_VAR 0 3
51423: GREATER
51424: IFFALSE 51450
// length := ( array - i_from ) + i_to else
51426: LD_ADDR_VAR 0 11
51430: PUSH
51431: LD_VAR 0 1
51435: PUSH
51436: LD_VAR 0 2
51440: MINUS
51441: PUSH
51442: LD_VAR 0 3
51446: PLUS
51447: ST_TO_ADDR
51448: GO 51466
// length := i_to - i_from ;
51450: LD_ADDR_VAR 0 11
51454: PUSH
51455: LD_VAR 0 3
51459: PUSH
51460: LD_VAR 0 2
51464: MINUS
51465: ST_TO_ADDR
// end else
51466: GO 51529
// begin d := - 1 ;
51468: LD_ADDR_VAR 0 9
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: ST_TO_ADDR
// if i_from > i_to then
51477: LD_VAR 0 2
51481: PUSH
51482: LD_VAR 0 3
51486: GREATER
51487: IFFALSE 51507
// length := i_from - i_to else
51489: LD_ADDR_VAR 0 11
51493: PUSH
51494: LD_VAR 0 2
51498: PUSH
51499: LD_VAR 0 3
51503: MINUS
51504: ST_TO_ADDR
51505: GO 51529
// length := ( array - i_to ) + i_from ;
51507: LD_ADDR_VAR 0 11
51511: PUSH
51512: LD_VAR 0 1
51516: PUSH
51517: LD_VAR 0 3
51521: MINUS
51522: PUSH
51523: LD_VAR 0 2
51527: PLUS
51528: ST_TO_ADDR
// end ; if not length then
51529: LD_VAR 0 11
51533: NOT
51534: IFFALSE 51538
// exit ;
51536: GO 51696
// tmp := array ;
51538: LD_ADDR_VAR 0 10
51542: PUSH
51543: LD_VAR 0 1
51547: ST_TO_ADDR
// for i = 1 to length do
51548: LD_ADDR_VAR 0 6
51552: PUSH
51553: DOUBLE
51554: LD_INT 1
51556: DEC
51557: ST_TO_ADDR
51558: LD_VAR 0 11
51562: PUSH
51563: FOR_TO
51564: IFFALSE 51684
// begin for j = 1 to array do
51566: LD_ADDR_VAR 0 7
51570: PUSH
51571: DOUBLE
51572: LD_INT 1
51574: DEC
51575: ST_TO_ADDR
51576: LD_VAR 0 1
51580: PUSH
51581: FOR_TO
51582: IFFALSE 51670
// begin k := j + d ;
51584: LD_ADDR_VAR 0 8
51588: PUSH
51589: LD_VAR 0 7
51593: PUSH
51594: LD_VAR 0 9
51598: PLUS
51599: ST_TO_ADDR
// if k > array then
51600: LD_VAR 0 8
51604: PUSH
51605: LD_VAR 0 1
51609: GREATER
51610: IFFALSE 51620
// k := 1 ;
51612: LD_ADDR_VAR 0 8
51616: PUSH
51617: LD_INT 1
51619: ST_TO_ADDR
// if not k then
51620: LD_VAR 0 8
51624: NOT
51625: IFFALSE 51637
// k := array ;
51627: LD_ADDR_VAR 0 8
51631: PUSH
51632: LD_VAR 0 1
51636: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
51637: LD_ADDR_VAR 0 10
51641: PUSH
51642: LD_VAR 0 10
51646: PPUSH
51647: LD_VAR 0 8
51651: PPUSH
51652: LD_VAR 0 1
51656: PUSH
51657: LD_VAR 0 7
51661: ARRAY
51662: PPUSH
51663: CALL_OW 1
51667: ST_TO_ADDR
// end ;
51668: GO 51581
51670: POP
51671: POP
// array := tmp ;
51672: LD_ADDR_VAR 0 1
51676: PUSH
51677: LD_VAR 0 10
51681: ST_TO_ADDR
// end ;
51682: GO 51563
51684: POP
51685: POP
// result := array ;
51686: LD_ADDR_VAR 0 5
51690: PUSH
51691: LD_VAR 0 1
51695: ST_TO_ADDR
// end ;
51696: LD_VAR 0 5
51700: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51701: LD_INT 0
51703: PPUSH
51704: PPUSH
// result := 0 ;
51705: LD_ADDR_VAR 0 3
51709: PUSH
51710: LD_INT 0
51712: ST_TO_ADDR
// if not array or not value in array then
51713: LD_VAR 0 1
51717: NOT
51718: PUSH
51719: LD_VAR 0 2
51723: PUSH
51724: LD_VAR 0 1
51728: IN
51729: NOT
51730: OR
51731: IFFALSE 51735
// exit ;
51733: GO 51789
// for i = 1 to array do
51735: LD_ADDR_VAR 0 4
51739: PUSH
51740: DOUBLE
51741: LD_INT 1
51743: DEC
51744: ST_TO_ADDR
51745: LD_VAR 0 1
51749: PUSH
51750: FOR_TO
51751: IFFALSE 51787
// if value = array [ i ] then
51753: LD_VAR 0 2
51757: PUSH
51758: LD_VAR 0 1
51762: PUSH
51763: LD_VAR 0 4
51767: ARRAY
51768: EQUAL
51769: IFFALSE 51785
// begin result := i ;
51771: LD_ADDR_VAR 0 3
51775: PUSH
51776: LD_VAR 0 4
51780: ST_TO_ADDR
// exit ;
51781: POP
51782: POP
51783: GO 51789
// end ;
51785: GO 51750
51787: POP
51788: POP
// end ;
51789: LD_VAR 0 3
51793: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51794: LD_INT 0
51796: PPUSH
// vc_chassis := chassis ;
51797: LD_ADDR_OWVAR 37
51801: PUSH
51802: LD_VAR 0 1
51806: ST_TO_ADDR
// vc_engine := engine ;
51807: LD_ADDR_OWVAR 39
51811: PUSH
51812: LD_VAR 0 2
51816: ST_TO_ADDR
// vc_control := control ;
51817: LD_ADDR_OWVAR 38
51821: PUSH
51822: LD_VAR 0 3
51826: ST_TO_ADDR
// vc_weapon := weapon ;
51827: LD_ADDR_OWVAR 40
51831: PUSH
51832: LD_VAR 0 4
51836: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51837: LD_ADDR_OWVAR 41
51841: PUSH
51842: LD_VAR 0 5
51846: ST_TO_ADDR
// end ;
51847: LD_VAR 0 6
51851: RET
// export function WantPlant ( unit ) ; var task ; begin
51852: LD_INT 0
51854: PPUSH
51855: PPUSH
// result := false ;
51856: LD_ADDR_VAR 0 2
51860: PUSH
51861: LD_INT 0
51863: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51864: LD_ADDR_VAR 0 3
51868: PUSH
51869: LD_VAR 0 1
51873: PPUSH
51874: CALL_OW 437
51878: ST_TO_ADDR
// if task then
51879: LD_VAR 0 3
51883: IFFALSE 51911
// if task [ 1 ] [ 1 ] = p then
51885: LD_VAR 0 3
51889: PUSH
51890: LD_INT 1
51892: ARRAY
51893: PUSH
51894: LD_INT 1
51896: ARRAY
51897: PUSH
51898: LD_STRING p
51900: EQUAL
51901: IFFALSE 51911
// result := true ;
51903: LD_ADDR_VAR 0 2
51907: PUSH
51908: LD_INT 1
51910: ST_TO_ADDR
// end ;
51911: LD_VAR 0 2
51915: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51916: LD_INT 0
51918: PPUSH
51919: PPUSH
51920: PPUSH
51921: PPUSH
// if pos < 1 then
51922: LD_VAR 0 2
51926: PUSH
51927: LD_INT 1
51929: LESS
51930: IFFALSE 51934
// exit ;
51932: GO 52237
// if pos = 1 then
51934: LD_VAR 0 2
51938: PUSH
51939: LD_INT 1
51941: EQUAL
51942: IFFALSE 51975
// result := Replace ( arr , pos [ 1 ] , value ) else
51944: LD_ADDR_VAR 0 4
51948: PUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: LD_VAR 0 2
51958: PUSH
51959: LD_INT 1
51961: ARRAY
51962: PPUSH
51963: LD_VAR 0 3
51967: PPUSH
51968: CALL_OW 1
51972: ST_TO_ADDR
51973: GO 52237
// begin tmp := arr ;
51975: LD_ADDR_VAR 0 6
51979: PUSH
51980: LD_VAR 0 1
51984: ST_TO_ADDR
// s_arr := [ tmp ] ;
51985: LD_ADDR_VAR 0 7
51989: PUSH
51990: LD_VAR 0 6
51994: PUSH
51995: EMPTY
51996: LIST
51997: ST_TO_ADDR
// for i = 1 to pos - 1 do
51998: LD_ADDR_VAR 0 5
52002: PUSH
52003: DOUBLE
52004: LD_INT 1
52006: DEC
52007: ST_TO_ADDR
52008: LD_VAR 0 2
52012: PUSH
52013: LD_INT 1
52015: MINUS
52016: PUSH
52017: FOR_TO
52018: IFFALSE 52063
// begin tmp := tmp [ pos [ i ] ] ;
52020: LD_ADDR_VAR 0 6
52024: PUSH
52025: LD_VAR 0 6
52029: PUSH
52030: LD_VAR 0 2
52034: PUSH
52035: LD_VAR 0 5
52039: ARRAY
52040: ARRAY
52041: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52042: LD_ADDR_VAR 0 7
52046: PUSH
52047: LD_VAR 0 7
52051: PUSH
52052: LD_VAR 0 6
52056: PUSH
52057: EMPTY
52058: LIST
52059: ADD
52060: ST_TO_ADDR
// end ;
52061: GO 52017
52063: POP
52064: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52065: LD_ADDR_VAR 0 6
52069: PUSH
52070: LD_VAR 0 6
52074: PPUSH
52075: LD_VAR 0 2
52079: PUSH
52080: LD_VAR 0 2
52084: ARRAY
52085: PPUSH
52086: LD_VAR 0 3
52090: PPUSH
52091: CALL_OW 1
52095: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52096: LD_ADDR_VAR 0 7
52100: PUSH
52101: LD_VAR 0 7
52105: PPUSH
52106: LD_VAR 0 7
52110: PPUSH
52111: LD_VAR 0 6
52115: PPUSH
52116: CALL_OW 1
52120: ST_TO_ADDR
// for i = s_arr downto 2 do
52121: LD_ADDR_VAR 0 5
52125: PUSH
52126: DOUBLE
52127: LD_VAR 0 7
52131: INC
52132: ST_TO_ADDR
52133: LD_INT 2
52135: PUSH
52136: FOR_DOWNTO
52137: IFFALSE 52221
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52139: LD_ADDR_VAR 0 6
52143: PUSH
52144: LD_VAR 0 7
52148: PUSH
52149: LD_VAR 0 5
52153: PUSH
52154: LD_INT 1
52156: MINUS
52157: ARRAY
52158: PPUSH
52159: LD_VAR 0 2
52163: PUSH
52164: LD_VAR 0 5
52168: PUSH
52169: LD_INT 1
52171: MINUS
52172: ARRAY
52173: PPUSH
52174: LD_VAR 0 7
52178: PUSH
52179: LD_VAR 0 5
52183: ARRAY
52184: PPUSH
52185: CALL_OW 1
52189: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52190: LD_ADDR_VAR 0 7
52194: PUSH
52195: LD_VAR 0 7
52199: PPUSH
52200: LD_VAR 0 5
52204: PUSH
52205: LD_INT 1
52207: MINUS
52208: PPUSH
52209: LD_VAR 0 6
52213: PPUSH
52214: CALL_OW 1
52218: ST_TO_ADDR
// end ;
52219: GO 52136
52221: POP
52222: POP
// result := s_arr [ 1 ] ;
52223: LD_ADDR_VAR 0 4
52227: PUSH
52228: LD_VAR 0 7
52232: PUSH
52233: LD_INT 1
52235: ARRAY
52236: ST_TO_ADDR
// end ; end ;
52237: LD_VAR 0 4
52241: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52242: LD_INT 0
52244: PPUSH
52245: PPUSH
// if not list then
52246: LD_VAR 0 1
52250: NOT
52251: IFFALSE 52255
// exit ;
52253: GO 52346
// i := list [ pos1 ] ;
52255: LD_ADDR_VAR 0 5
52259: PUSH
52260: LD_VAR 0 1
52264: PUSH
52265: LD_VAR 0 2
52269: ARRAY
52270: ST_TO_ADDR
// if not i then
52271: LD_VAR 0 5
52275: NOT
52276: IFFALSE 52280
// exit ;
52278: GO 52346
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52280: LD_ADDR_VAR 0 1
52284: PUSH
52285: LD_VAR 0 1
52289: PPUSH
52290: LD_VAR 0 2
52294: PPUSH
52295: LD_VAR 0 1
52299: PUSH
52300: LD_VAR 0 3
52304: ARRAY
52305: PPUSH
52306: CALL_OW 1
52310: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
52311: LD_ADDR_VAR 0 1
52315: PUSH
52316: LD_VAR 0 1
52320: PPUSH
52321: LD_VAR 0 3
52325: PPUSH
52326: LD_VAR 0 5
52330: PPUSH
52331: CALL_OW 1
52335: ST_TO_ADDR
// result := list ;
52336: LD_ADDR_VAR 0 4
52340: PUSH
52341: LD_VAR 0 1
52345: ST_TO_ADDR
// end ;
52346: LD_VAR 0 4
52350: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
52351: LD_INT 0
52353: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
52354: LD_ADDR_VAR 0 5
52358: PUSH
52359: LD_VAR 0 1
52363: PPUSH
52364: CALL_OW 250
52368: PPUSH
52369: LD_VAR 0 1
52373: PPUSH
52374: CALL_OW 251
52378: PPUSH
52379: LD_VAR 0 2
52383: PPUSH
52384: LD_VAR 0 3
52388: PPUSH
52389: LD_VAR 0 4
52393: PPUSH
52394: CALL 52404 0 5
52398: ST_TO_ADDR
// end ;
52399: LD_VAR 0 5
52403: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
52404: LD_INT 0
52406: PPUSH
52407: PPUSH
52408: PPUSH
52409: PPUSH
// if not list then
52410: LD_VAR 0 3
52414: NOT
52415: IFFALSE 52419
// exit ;
52417: GO 52807
// result := [ ] ;
52419: LD_ADDR_VAR 0 6
52423: PUSH
52424: EMPTY
52425: ST_TO_ADDR
// for i in list do
52426: LD_ADDR_VAR 0 7
52430: PUSH
52431: LD_VAR 0 3
52435: PUSH
52436: FOR_IN
52437: IFFALSE 52639
// begin tmp := GetDistUnitXY ( i , x , y ) ;
52439: LD_ADDR_VAR 0 9
52443: PUSH
52444: LD_VAR 0 7
52448: PPUSH
52449: LD_VAR 0 1
52453: PPUSH
52454: LD_VAR 0 2
52458: PPUSH
52459: CALL_OW 297
52463: ST_TO_ADDR
// if not result then
52464: LD_VAR 0 6
52468: NOT
52469: IFFALSE 52495
// result := [ [ i , tmp ] ] else
52471: LD_ADDR_VAR 0 6
52475: PUSH
52476: LD_VAR 0 7
52480: PUSH
52481: LD_VAR 0 9
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: ST_TO_ADDR
52493: GO 52637
// begin if result [ result ] [ 2 ] < tmp then
52495: LD_VAR 0 6
52499: PUSH
52500: LD_VAR 0 6
52504: ARRAY
52505: PUSH
52506: LD_INT 2
52508: ARRAY
52509: PUSH
52510: LD_VAR 0 9
52514: LESS
52515: IFFALSE 52557
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
52517: LD_ADDR_VAR 0 6
52521: PUSH
52522: LD_VAR 0 6
52526: PPUSH
52527: LD_VAR 0 6
52531: PUSH
52532: LD_INT 1
52534: PLUS
52535: PPUSH
52536: LD_VAR 0 7
52540: PUSH
52541: LD_VAR 0 9
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PPUSH
52550: CALL_OW 2
52554: ST_TO_ADDR
52555: GO 52637
// for j = 1 to result do
52557: LD_ADDR_VAR 0 8
52561: PUSH
52562: DOUBLE
52563: LD_INT 1
52565: DEC
52566: ST_TO_ADDR
52567: LD_VAR 0 6
52571: PUSH
52572: FOR_TO
52573: IFFALSE 52635
// begin if tmp < result [ j ] [ 2 ] then
52575: LD_VAR 0 9
52579: PUSH
52580: LD_VAR 0 6
52584: PUSH
52585: LD_VAR 0 8
52589: ARRAY
52590: PUSH
52591: LD_INT 2
52593: ARRAY
52594: LESS
52595: IFFALSE 52633
// begin result := Insert ( result , j , [ i , tmp ] ) ;
52597: LD_ADDR_VAR 0 6
52601: PUSH
52602: LD_VAR 0 6
52606: PPUSH
52607: LD_VAR 0 8
52611: PPUSH
52612: LD_VAR 0 7
52616: PUSH
52617: LD_VAR 0 9
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PPUSH
52626: CALL_OW 2
52630: ST_TO_ADDR
// break ;
52631: GO 52635
// end ; end ;
52633: GO 52572
52635: POP
52636: POP
// end ; end ;
52637: GO 52436
52639: POP
52640: POP
// if result and not asc then
52641: LD_VAR 0 6
52645: PUSH
52646: LD_VAR 0 4
52650: NOT
52651: AND
52652: IFFALSE 52727
// begin tmp := result ;
52654: LD_ADDR_VAR 0 9
52658: PUSH
52659: LD_VAR 0 6
52663: ST_TO_ADDR
// for i = tmp downto 1 do
52664: LD_ADDR_VAR 0 7
52668: PUSH
52669: DOUBLE
52670: LD_VAR 0 9
52674: INC
52675: ST_TO_ADDR
52676: LD_INT 1
52678: PUSH
52679: FOR_DOWNTO
52680: IFFALSE 52725
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52682: LD_ADDR_VAR 0 6
52686: PUSH
52687: LD_VAR 0 6
52691: PPUSH
52692: LD_VAR 0 9
52696: PUSH
52697: LD_VAR 0 7
52701: MINUS
52702: PUSH
52703: LD_INT 1
52705: PLUS
52706: PPUSH
52707: LD_VAR 0 9
52711: PUSH
52712: LD_VAR 0 7
52716: ARRAY
52717: PPUSH
52718: CALL_OW 1
52722: ST_TO_ADDR
52723: GO 52679
52725: POP
52726: POP
// end ; tmp := [ ] ;
52727: LD_ADDR_VAR 0 9
52731: PUSH
52732: EMPTY
52733: ST_TO_ADDR
// if mode then
52734: LD_VAR 0 5
52738: IFFALSE 52807
// begin for i = 1 to result do
52740: LD_ADDR_VAR 0 7
52744: PUSH
52745: DOUBLE
52746: LD_INT 1
52748: DEC
52749: ST_TO_ADDR
52750: LD_VAR 0 6
52754: PUSH
52755: FOR_TO
52756: IFFALSE 52795
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52758: LD_ADDR_VAR 0 9
52762: PUSH
52763: LD_VAR 0 9
52767: PPUSH
52768: LD_VAR 0 7
52772: PPUSH
52773: LD_VAR 0 6
52777: PUSH
52778: LD_VAR 0 7
52782: ARRAY
52783: PUSH
52784: LD_INT 1
52786: ARRAY
52787: PPUSH
52788: CALL_OW 1
52792: ST_TO_ADDR
52793: GO 52755
52795: POP
52796: POP
// result := tmp ;
52797: LD_ADDR_VAR 0 6
52801: PUSH
52802: LD_VAR 0 9
52806: ST_TO_ADDR
// end ; end ;
52807: LD_VAR 0 6
52811: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52812: LD_INT 0
52814: PPUSH
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52820: LD_ADDR_VAR 0 5
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: ST_TO_ADDR
// if not x or not y then
52842: LD_VAR 0 2
52846: NOT
52847: PUSH
52848: LD_VAR 0 3
52852: NOT
52853: OR
52854: IFFALSE 52858
// exit ;
52856: GO 54504
// if not range then
52858: LD_VAR 0 4
52862: NOT
52863: IFFALSE 52873
// range := 10 ;
52865: LD_ADDR_VAR 0 4
52869: PUSH
52870: LD_INT 10
52872: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52873: LD_ADDR_VAR 0 8
52877: PUSH
52878: LD_INT 81
52880: PUSH
52881: LD_VAR 0 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 92
52892: PUSH
52893: LD_VAR 0 2
52897: PUSH
52898: LD_VAR 0 3
52902: PUSH
52903: LD_VAR 0 4
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 21
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: PPUSH
52936: CALL_OW 69
52940: ST_TO_ADDR
// if not tmp then
52941: LD_VAR 0 8
52945: NOT
52946: IFFALSE 52950
// exit ;
52948: GO 54504
// for i in tmp do
52950: LD_ADDR_VAR 0 6
52954: PUSH
52955: LD_VAR 0 8
52959: PUSH
52960: FOR_IN
52961: IFFALSE 54479
// begin points := [ 0 , 0 , 0 ] ;
52963: LD_ADDR_VAR 0 9
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: ST_TO_ADDR
// bpoints := 1 ;
52982: LD_ADDR_VAR 0 10
52986: PUSH
52987: LD_INT 1
52989: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52990: LD_VAR 0 6
52994: PPUSH
52995: CALL_OW 247
52999: PUSH
53000: LD_INT 1
53002: DOUBLE
53003: EQUAL
53004: IFTRUE 53008
53006: GO 53586
53008: POP
// begin if GetClass ( i ) = 1 then
53009: LD_VAR 0 6
53013: PPUSH
53014: CALL_OW 257
53018: PUSH
53019: LD_INT 1
53021: EQUAL
53022: IFFALSE 53043
// points := [ 10 , 5 , 3 ] ;
53024: LD_ADDR_VAR 0 9
53028: PUSH
53029: LD_INT 10
53031: PUSH
53032: LD_INT 5
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53043: LD_VAR 0 6
53047: PPUSH
53048: CALL_OW 257
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: IN
53067: IFFALSE 53088
// points := [ 3 , 2 , 1 ] ;
53069: LD_ADDR_VAR 0 9
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53088: LD_VAR 0 6
53092: PPUSH
53093: CALL_OW 257
53097: PUSH
53098: LD_INT 5
53100: EQUAL
53101: IFFALSE 53122
// points := [ 130 , 5 , 2 ] ;
53103: LD_ADDR_VAR 0 9
53107: PUSH
53108: LD_INT 130
53110: PUSH
53111: LD_INT 5
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53122: LD_VAR 0 6
53126: PPUSH
53127: CALL_OW 257
53131: PUSH
53132: LD_INT 8
53134: EQUAL
53135: IFFALSE 53156
// points := [ 35 , 35 , 30 ] ;
53137: LD_ADDR_VAR 0 9
53141: PUSH
53142: LD_INT 35
53144: PUSH
53145: LD_INT 35
53147: PUSH
53148: LD_INT 30
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53156: LD_VAR 0 6
53160: PPUSH
53161: CALL_OW 257
53165: PUSH
53166: LD_INT 9
53168: EQUAL
53169: IFFALSE 53190
// points := [ 20 , 55 , 40 ] ;
53171: LD_ADDR_VAR 0 9
53175: PUSH
53176: LD_INT 20
53178: PUSH
53179: LD_INT 55
53181: PUSH
53182: LD_INT 40
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53190: LD_VAR 0 6
53194: PPUSH
53195: CALL_OW 257
53199: PUSH
53200: LD_INT 12
53202: PUSH
53203: LD_INT 16
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: IN
53210: IFFALSE 53231
// points := [ 5 , 3 , 2 ] ;
53212: LD_ADDR_VAR 0 9
53216: PUSH
53217: LD_INT 5
53219: PUSH
53220: LD_INT 3
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53231: LD_VAR 0 6
53235: PPUSH
53236: CALL_OW 257
53240: PUSH
53241: LD_INT 17
53243: EQUAL
53244: IFFALSE 53265
// points := [ 100 , 50 , 75 ] ;
53246: LD_ADDR_VAR 0 9
53250: PUSH
53251: LD_INT 100
53253: PUSH
53254: LD_INT 50
53256: PUSH
53257: LD_INT 75
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// if GetClass ( i ) = 15 then
53265: LD_VAR 0 6
53269: PPUSH
53270: CALL_OW 257
53274: PUSH
53275: LD_INT 15
53277: EQUAL
53278: IFFALSE 53299
// points := [ 10 , 5 , 3 ] ;
53280: LD_ADDR_VAR 0 9
53284: PUSH
53285: LD_INT 10
53287: PUSH
53288: LD_INT 5
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// if GetClass ( i ) = 14 then
53299: LD_VAR 0 6
53303: PPUSH
53304: CALL_OW 257
53308: PUSH
53309: LD_INT 14
53311: EQUAL
53312: IFFALSE 53333
// points := [ 10 , 0 , 0 ] ;
53314: LD_ADDR_VAR 0 9
53318: PUSH
53319: LD_INT 10
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// if GetClass ( i ) = 11 then
53333: LD_VAR 0 6
53337: PPUSH
53338: CALL_OW 257
53342: PUSH
53343: LD_INT 11
53345: EQUAL
53346: IFFALSE 53367
// points := [ 30 , 10 , 5 ] ;
53348: LD_ADDR_VAR 0 9
53352: PUSH
53353: LD_INT 30
53355: PUSH
53356: LD_INT 10
53358: PUSH
53359: LD_INT 5
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
53367: LD_VAR 0 1
53371: PPUSH
53372: LD_INT 5
53374: PPUSH
53375: CALL_OW 321
53379: PUSH
53380: LD_INT 2
53382: EQUAL
53383: IFFALSE 53400
// bpoints := bpoints * 1.8 ;
53385: LD_ADDR_VAR 0 10
53389: PUSH
53390: LD_VAR 0 10
53394: PUSH
53395: LD_REAL  1.80000000000000E+0000
53398: MUL
53399: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
53400: LD_VAR 0 6
53404: PPUSH
53405: CALL_OW 257
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: LD_INT 4
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: IN
53428: PUSH
53429: LD_VAR 0 1
53433: PPUSH
53434: LD_INT 51
53436: PPUSH
53437: CALL_OW 321
53441: PUSH
53442: LD_INT 2
53444: EQUAL
53445: AND
53446: IFFALSE 53463
// bpoints := bpoints * 1.2 ;
53448: LD_ADDR_VAR 0 10
53452: PUSH
53453: LD_VAR 0 10
53457: PUSH
53458: LD_REAL  1.20000000000000E+0000
53461: MUL
53462: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
53463: LD_VAR 0 6
53467: PPUSH
53468: CALL_OW 257
53472: PUSH
53473: LD_INT 5
53475: PUSH
53476: LD_INT 7
53478: PUSH
53479: LD_INT 9
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: IN
53487: PUSH
53488: LD_VAR 0 1
53492: PPUSH
53493: LD_INT 52
53495: PPUSH
53496: CALL_OW 321
53500: PUSH
53501: LD_INT 2
53503: EQUAL
53504: AND
53505: IFFALSE 53522
// bpoints := bpoints * 1.5 ;
53507: LD_ADDR_VAR 0 10
53511: PUSH
53512: LD_VAR 0 10
53516: PUSH
53517: LD_REAL  1.50000000000000E+0000
53520: MUL
53521: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
53522: LD_VAR 0 1
53526: PPUSH
53527: LD_INT 66
53529: PPUSH
53530: CALL_OW 321
53534: PUSH
53535: LD_INT 2
53537: EQUAL
53538: IFFALSE 53555
// bpoints := bpoints * 1.1 ;
53540: LD_ADDR_VAR 0 10
53544: PUSH
53545: LD_VAR 0 10
53549: PUSH
53550: LD_REAL  1.10000000000000E+0000
53553: MUL
53554: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
53555: LD_ADDR_VAR 0 10
53559: PUSH
53560: LD_VAR 0 10
53564: PUSH
53565: LD_VAR 0 6
53569: PPUSH
53570: LD_INT 1
53572: PPUSH
53573: CALL_OW 259
53577: PUSH
53578: LD_REAL  1.15000000000000E+0000
53581: MUL
53582: MUL
53583: ST_TO_ADDR
// end ; unit_vehicle :
53584: GO 54408
53586: LD_INT 2
53588: DOUBLE
53589: EQUAL
53590: IFTRUE 53594
53592: GO 54396
53594: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
53595: LD_VAR 0 6
53599: PPUSH
53600: CALL_OW 264
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 42
53610: PUSH
53611: LD_INT 24
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: IN
53619: IFFALSE 53640
// points := [ 25 , 5 , 3 ] ;
53621: LD_ADDR_VAR 0 9
53625: PUSH
53626: LD_INT 25
53628: PUSH
53629: LD_INT 5
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
53640: LD_VAR 0 6
53644: PPUSH
53645: CALL_OW 264
53649: PUSH
53650: LD_INT 4
53652: PUSH
53653: LD_INT 43
53655: PUSH
53656: LD_INT 25
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: IN
53664: IFFALSE 53685
// points := [ 40 , 15 , 5 ] ;
53666: LD_ADDR_VAR 0 9
53670: PUSH
53671: LD_INT 40
53673: PUSH
53674: LD_INT 15
53676: PUSH
53677: LD_INT 5
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53685: LD_VAR 0 6
53689: PPUSH
53690: CALL_OW 264
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: LD_INT 23
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: IN
53705: IFFALSE 53726
// points := [ 7 , 25 , 8 ] ;
53707: LD_ADDR_VAR 0 9
53711: PUSH
53712: LD_INT 7
53714: PUSH
53715: LD_INT 25
53717: PUSH
53718: LD_INT 8
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53726: LD_VAR 0 6
53730: PPUSH
53731: CALL_OW 264
53735: PUSH
53736: LD_INT 5
53738: PUSH
53739: LD_INT 27
53741: PUSH
53742: LD_INT 44
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: IN
53750: IFFALSE 53771
// points := [ 14 , 50 , 16 ] ;
53752: LD_ADDR_VAR 0 9
53756: PUSH
53757: LD_INT 14
53759: PUSH
53760: LD_INT 50
53762: PUSH
53763: LD_INT 16
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: LIST
53770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53771: LD_VAR 0 6
53775: PPUSH
53776: CALL_OW 264
53780: PUSH
53781: LD_INT 6
53783: PUSH
53784: LD_INT 46
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: IN
53791: IFFALSE 53812
// points := [ 32 , 120 , 70 ] ;
53793: LD_ADDR_VAR 0 9
53797: PUSH
53798: LD_INT 32
53800: PUSH
53801: LD_INT 120
53803: PUSH
53804: LD_INT 70
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
53812: LD_VAR 0 6
53816: PPUSH
53817: CALL_OW 264
53821: PUSH
53822: LD_INT 7
53824: PUSH
53825: LD_INT 28
53827: PUSH
53828: LD_INT 45
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: IN
53836: IFFALSE 53857
// points := [ 35 , 20 , 45 ] ;
53838: LD_ADDR_VAR 0 9
53842: PUSH
53843: LD_INT 35
53845: PUSH
53846: LD_INT 20
53848: PUSH
53849: LD_INT 45
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53857: LD_VAR 0 6
53861: PPUSH
53862: CALL_OW 264
53866: PUSH
53867: LD_INT 47
53869: PUSH
53870: EMPTY
53871: LIST
53872: IN
53873: IFFALSE 53894
// points := [ 67 , 45 , 75 ] ;
53875: LD_ADDR_VAR 0 9
53879: PUSH
53880: LD_INT 67
53882: PUSH
53883: LD_INT 45
53885: PUSH
53886: LD_INT 75
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53894: LD_VAR 0 6
53898: PPUSH
53899: CALL_OW 264
53903: PUSH
53904: LD_INT 26
53906: PUSH
53907: EMPTY
53908: LIST
53909: IN
53910: IFFALSE 53931
// points := [ 120 , 30 , 80 ] ;
53912: LD_ADDR_VAR 0 9
53916: PUSH
53917: LD_INT 120
53919: PUSH
53920: LD_INT 30
53922: PUSH
53923: LD_INT 80
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53931: LD_VAR 0 6
53935: PPUSH
53936: CALL_OW 264
53940: PUSH
53941: LD_INT 22
53943: PUSH
53944: EMPTY
53945: LIST
53946: IN
53947: IFFALSE 53968
// points := [ 40 , 1 , 1 ] ;
53949: LD_ADDR_VAR 0 9
53953: PUSH
53954: LD_INT 40
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53968: LD_VAR 0 6
53972: PPUSH
53973: CALL_OW 264
53977: PUSH
53978: LD_INT 29
53980: PUSH
53981: EMPTY
53982: LIST
53983: IN
53984: IFFALSE 54005
// points := [ 70 , 200 , 400 ] ;
53986: LD_ADDR_VAR 0 9
53990: PUSH
53991: LD_INT 70
53993: PUSH
53994: LD_INT 200
53996: PUSH
53997: LD_INT 400
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54005: LD_VAR 0 6
54009: PPUSH
54010: CALL_OW 264
54014: PUSH
54015: LD_INT 14
54017: PUSH
54018: LD_INT 53
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: IN
54025: IFFALSE 54046
// points := [ 40 , 10 , 20 ] ;
54027: LD_ADDR_VAR 0 9
54031: PUSH
54032: LD_INT 40
54034: PUSH
54035: LD_INT 10
54037: PUSH
54038: LD_INT 20
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54046: LD_VAR 0 6
54050: PPUSH
54051: CALL_OW 264
54055: PUSH
54056: LD_INT 9
54058: PUSH
54059: EMPTY
54060: LIST
54061: IN
54062: IFFALSE 54083
// points := [ 5 , 70 , 20 ] ;
54064: LD_ADDR_VAR 0 9
54068: PUSH
54069: LD_INT 5
54071: PUSH
54072: LD_INT 70
54074: PUSH
54075: LD_INT 20
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54083: LD_VAR 0 6
54087: PPUSH
54088: CALL_OW 264
54092: PUSH
54093: LD_INT 10
54095: PUSH
54096: EMPTY
54097: LIST
54098: IN
54099: IFFALSE 54120
// points := [ 35 , 110 , 70 ] ;
54101: LD_ADDR_VAR 0 9
54105: PUSH
54106: LD_INT 35
54108: PUSH
54109: LD_INT 110
54111: PUSH
54112: LD_INT 70
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54120: LD_VAR 0 6
54124: PPUSH
54125: CALL_OW 265
54129: PUSH
54130: LD_INT 25
54132: EQUAL
54133: IFFALSE 54154
// points := [ 80 , 65 , 100 ] ;
54135: LD_ADDR_VAR 0 9
54139: PUSH
54140: LD_INT 80
54142: PUSH
54143: LD_INT 65
54145: PUSH
54146: LD_INT 100
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54154: LD_VAR 0 6
54158: PPUSH
54159: CALL_OW 263
54163: PUSH
54164: LD_INT 1
54166: EQUAL
54167: IFFALSE 54202
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54169: LD_ADDR_VAR 0 10
54173: PUSH
54174: LD_VAR 0 10
54178: PUSH
54179: LD_VAR 0 6
54183: PPUSH
54184: CALL_OW 311
54188: PPUSH
54189: LD_INT 3
54191: PPUSH
54192: CALL_OW 259
54196: PUSH
54197: LD_INT 4
54199: MUL
54200: MUL
54201: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54202: LD_VAR 0 6
54206: PPUSH
54207: CALL_OW 263
54211: PUSH
54212: LD_INT 2
54214: EQUAL
54215: IFFALSE 54266
// begin j := IsControledBy ( i ) ;
54217: LD_ADDR_VAR 0 7
54221: PUSH
54222: LD_VAR 0 6
54226: PPUSH
54227: CALL_OW 312
54231: ST_TO_ADDR
// if j then
54232: LD_VAR 0 7
54236: IFFALSE 54266
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54238: LD_ADDR_VAR 0 10
54242: PUSH
54243: LD_VAR 0 10
54247: PUSH
54248: LD_VAR 0 7
54252: PPUSH
54253: LD_INT 3
54255: PPUSH
54256: CALL_OW 259
54260: PUSH
54261: LD_INT 3
54263: MUL
54264: MUL
54265: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
54266: LD_VAR 0 6
54270: PPUSH
54271: CALL_OW 264
54275: PUSH
54276: LD_INT 5
54278: PUSH
54279: LD_INT 6
54281: PUSH
54282: LD_INT 46
54284: PUSH
54285: LD_INT 44
54287: PUSH
54288: LD_INT 47
54290: PUSH
54291: LD_INT 45
54293: PUSH
54294: LD_INT 28
54296: PUSH
54297: LD_INT 7
54299: PUSH
54300: LD_INT 27
54302: PUSH
54303: LD_INT 29
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: IN
54318: PUSH
54319: LD_VAR 0 1
54323: PPUSH
54324: LD_INT 52
54326: PPUSH
54327: CALL_OW 321
54331: PUSH
54332: LD_INT 2
54334: EQUAL
54335: AND
54336: IFFALSE 54353
// bpoints := bpoints * 1.2 ;
54338: LD_ADDR_VAR 0 10
54342: PUSH
54343: LD_VAR 0 10
54347: PUSH
54348: LD_REAL  1.20000000000000E+0000
54351: MUL
54352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
54353: LD_VAR 0 6
54357: PPUSH
54358: CALL_OW 264
54362: PUSH
54363: LD_INT 6
54365: PUSH
54366: LD_INT 46
54368: PUSH
54369: LD_INT 47
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: IN
54377: IFFALSE 54394
// bpoints := bpoints * 1.2 ;
54379: LD_ADDR_VAR 0 10
54383: PUSH
54384: LD_VAR 0 10
54388: PUSH
54389: LD_REAL  1.20000000000000E+0000
54392: MUL
54393: ST_TO_ADDR
// end ; unit_building :
54394: GO 54408
54396: LD_INT 3
54398: DOUBLE
54399: EQUAL
54400: IFTRUE 54404
54402: GO 54407
54404: POP
// ; end ;
54405: GO 54408
54407: POP
// for j = 1 to 3 do
54408: LD_ADDR_VAR 0 7
54412: PUSH
54413: DOUBLE
54414: LD_INT 1
54416: DEC
54417: ST_TO_ADDR
54418: LD_INT 3
54420: PUSH
54421: FOR_TO
54422: IFFALSE 54475
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
54424: LD_ADDR_VAR 0 5
54428: PUSH
54429: LD_VAR 0 5
54433: PPUSH
54434: LD_VAR 0 7
54438: PPUSH
54439: LD_VAR 0 5
54443: PUSH
54444: LD_VAR 0 7
54448: ARRAY
54449: PUSH
54450: LD_VAR 0 9
54454: PUSH
54455: LD_VAR 0 7
54459: ARRAY
54460: PUSH
54461: LD_VAR 0 10
54465: MUL
54466: PLUS
54467: PPUSH
54468: CALL_OW 1
54472: ST_TO_ADDR
54473: GO 54421
54475: POP
54476: POP
// end ;
54477: GO 52960
54479: POP
54480: POP
// result := Replace ( result , 4 , tmp ) ;
54481: LD_ADDR_VAR 0 5
54485: PUSH
54486: LD_VAR 0 5
54490: PPUSH
54491: LD_INT 4
54493: PPUSH
54494: LD_VAR 0 8
54498: PPUSH
54499: CALL_OW 1
54503: ST_TO_ADDR
// end ;
54504: LD_VAR 0 5
54508: RET
// export function DangerAtRange ( unit , range ) ; begin
54509: LD_INT 0
54511: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
54512: LD_ADDR_VAR 0 3
54516: PUSH
54517: LD_VAR 0 1
54521: PPUSH
54522: CALL_OW 255
54526: PPUSH
54527: LD_VAR 0 1
54531: PPUSH
54532: CALL_OW 250
54536: PPUSH
54537: LD_VAR 0 1
54541: PPUSH
54542: CALL_OW 251
54546: PPUSH
54547: LD_VAR 0 2
54551: PPUSH
54552: CALL 52812 0 4
54556: ST_TO_ADDR
// end ;
54557: LD_VAR 0 3
54561: RET
// export function DangerInArea ( side , area ) ; begin
54562: LD_INT 0
54564: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
54565: LD_ADDR_VAR 0 3
54569: PUSH
54570: LD_VAR 0 2
54574: PPUSH
54575: LD_INT 81
54577: PUSH
54578: LD_VAR 0 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PPUSH
54587: CALL_OW 70
54591: ST_TO_ADDR
// end ;
54592: LD_VAR 0 3
54596: RET
// export function IsExtension ( b ) ; begin
54597: LD_INT 0
54599: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
54600: LD_ADDR_VAR 0 2
54604: PUSH
54605: LD_VAR 0 1
54609: PUSH
54610: LD_INT 23
54612: PUSH
54613: LD_INT 20
54615: PUSH
54616: LD_INT 22
54618: PUSH
54619: LD_INT 17
54621: PUSH
54622: LD_INT 24
54624: PUSH
54625: LD_INT 21
54627: PUSH
54628: LD_INT 19
54630: PUSH
54631: LD_INT 16
54633: PUSH
54634: LD_INT 25
54636: PUSH
54637: LD_INT 18
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: IN
54652: ST_TO_ADDR
// end ;
54653: LD_VAR 0 2
54657: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
54658: LD_INT 0
54660: PPUSH
54661: PPUSH
54662: PPUSH
// result := [ ] ;
54663: LD_ADDR_VAR 0 4
54667: PUSH
54668: EMPTY
54669: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
54670: LD_ADDR_VAR 0 5
54674: PUSH
54675: LD_VAR 0 2
54679: PPUSH
54680: LD_INT 21
54682: PUSH
54683: LD_INT 3
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PPUSH
54690: CALL_OW 70
54694: ST_TO_ADDR
// if not tmp then
54695: LD_VAR 0 5
54699: NOT
54700: IFFALSE 54704
// exit ;
54702: GO 54768
// if checkLink then
54704: LD_VAR 0 3
54708: IFFALSE 54758
// begin for i in tmp do
54710: LD_ADDR_VAR 0 6
54714: PUSH
54715: LD_VAR 0 5
54719: PUSH
54720: FOR_IN
54721: IFFALSE 54756
// if GetBase ( i ) <> base then
54723: LD_VAR 0 6
54727: PPUSH
54728: CALL_OW 274
54732: PUSH
54733: LD_VAR 0 1
54737: NONEQUAL
54738: IFFALSE 54754
// ComLinkToBase ( base , i ) ;
54740: LD_VAR 0 1
54744: PPUSH
54745: LD_VAR 0 6
54749: PPUSH
54750: CALL_OW 169
54754: GO 54720
54756: POP
54757: POP
// end ; result := tmp ;
54758: LD_ADDR_VAR 0 4
54762: PUSH
54763: LD_VAR 0 5
54767: ST_TO_ADDR
// end ;
54768: LD_VAR 0 4
54772: RET
// export function ComComplete ( units , b ) ; var i ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
// if not units then
54777: LD_VAR 0 1
54781: NOT
54782: IFFALSE 54786
// exit ;
54784: GO 54876
// for i in units do
54786: LD_ADDR_VAR 0 4
54790: PUSH
54791: LD_VAR 0 1
54795: PUSH
54796: FOR_IN
54797: IFFALSE 54874
// if BuildingStatus ( b ) = bs_build then
54799: LD_VAR 0 2
54803: PPUSH
54804: CALL_OW 461
54808: PUSH
54809: LD_INT 1
54811: EQUAL
54812: IFFALSE 54872
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54814: LD_VAR 0 4
54818: PPUSH
54819: LD_STRING h
54821: PUSH
54822: LD_VAR 0 2
54826: PPUSH
54827: CALL_OW 250
54831: PUSH
54832: LD_VAR 0 2
54836: PPUSH
54837: CALL_OW 251
54841: PUSH
54842: LD_VAR 0 2
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: PPUSH
54868: CALL_OW 446
54872: GO 54796
54874: POP
54875: POP
// end ;
54876: LD_VAR 0 3
54880: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54881: LD_INT 0
54883: PPUSH
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
54888: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
54889: LD_VAR 0 1
54893: NOT
54894: PUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 263
54904: PUSH
54905: LD_INT 2
54907: EQUAL
54908: NOT
54909: OR
54910: IFFALSE 54914
// exit ;
54912: GO 55230
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54914: LD_ADDR_VAR 0 6
54918: PUSH
54919: LD_INT 22
54921: PUSH
54922: LD_VAR 0 1
54926: PPUSH
54927: CALL_OW 255
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: LD_INT 30
54941: PUSH
54942: LD_INT 36
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 34
54951: PUSH
54952: LD_INT 31
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PPUSH
54968: CALL_OW 69
54972: ST_TO_ADDR
// if not tmp then
54973: LD_VAR 0 6
54977: NOT
54978: IFFALSE 54982
// exit ;
54980: GO 55230
// result := [ ] ;
54982: LD_ADDR_VAR 0 2
54986: PUSH
54987: EMPTY
54988: ST_TO_ADDR
// for i in tmp do
54989: LD_ADDR_VAR 0 3
54993: PUSH
54994: LD_VAR 0 6
54998: PUSH
54999: FOR_IN
55000: IFFALSE 55071
// begin t := UnitsInside ( i ) ;
55002: LD_ADDR_VAR 0 4
55006: PUSH
55007: LD_VAR 0 3
55011: PPUSH
55012: CALL_OW 313
55016: ST_TO_ADDR
// if t then
55017: LD_VAR 0 4
55021: IFFALSE 55069
// for j in t do
55023: LD_ADDR_VAR 0 7
55027: PUSH
55028: LD_VAR 0 4
55032: PUSH
55033: FOR_IN
55034: IFFALSE 55067
// result := Insert ( result , result + 1 , j ) ;
55036: LD_ADDR_VAR 0 2
55040: PUSH
55041: LD_VAR 0 2
55045: PPUSH
55046: LD_VAR 0 2
55050: PUSH
55051: LD_INT 1
55053: PLUS
55054: PPUSH
55055: LD_VAR 0 7
55059: PPUSH
55060: CALL_OW 2
55064: ST_TO_ADDR
55065: GO 55033
55067: POP
55068: POP
// end ;
55069: GO 54999
55071: POP
55072: POP
// if not result then
55073: LD_VAR 0 2
55077: NOT
55078: IFFALSE 55082
// exit ;
55080: GO 55230
// mech := result [ 1 ] ;
55082: LD_ADDR_VAR 0 5
55086: PUSH
55087: LD_VAR 0 2
55091: PUSH
55092: LD_INT 1
55094: ARRAY
55095: ST_TO_ADDR
// if result > 1 then
55096: LD_VAR 0 2
55100: PUSH
55101: LD_INT 1
55103: GREATER
55104: IFFALSE 55216
// for i = 2 to result do
55106: LD_ADDR_VAR 0 3
55110: PUSH
55111: DOUBLE
55112: LD_INT 2
55114: DEC
55115: ST_TO_ADDR
55116: LD_VAR 0 2
55120: PUSH
55121: FOR_TO
55122: IFFALSE 55214
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55124: LD_ADDR_VAR 0 4
55128: PUSH
55129: LD_VAR 0 2
55133: PUSH
55134: LD_VAR 0 3
55138: ARRAY
55139: PPUSH
55140: LD_INT 3
55142: PPUSH
55143: CALL_OW 259
55147: PUSH
55148: LD_VAR 0 2
55152: PUSH
55153: LD_VAR 0 3
55157: ARRAY
55158: PPUSH
55159: CALL_OW 432
55163: MINUS
55164: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55165: LD_VAR 0 4
55169: PUSH
55170: LD_VAR 0 5
55174: PPUSH
55175: LD_INT 3
55177: PPUSH
55178: CALL_OW 259
55182: PUSH
55183: LD_VAR 0 5
55187: PPUSH
55188: CALL_OW 432
55192: MINUS
55193: GREATEREQUAL
55194: IFFALSE 55212
// mech := result [ i ] ;
55196: LD_ADDR_VAR 0 5
55200: PUSH
55201: LD_VAR 0 2
55205: PUSH
55206: LD_VAR 0 3
55210: ARRAY
55211: ST_TO_ADDR
// end ;
55212: GO 55121
55214: POP
55215: POP
// ComLinkTo ( vehicle , mech ) ;
55216: LD_VAR 0 1
55220: PPUSH
55221: LD_VAR 0 5
55225: PPUSH
55226: CALL_OW 135
// end ;
55230: LD_VAR 0 2
55234: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
// result := [ ] ;
55250: LD_ADDR_VAR 0 7
55254: PUSH
55255: EMPTY
55256: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55257: LD_VAR 0 1
55261: PPUSH
55262: CALL_OW 266
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: IN
55277: NOT
55278: IFFALSE 55282
// exit ;
55280: GO 56916
// if name then
55282: LD_VAR 0 3
55286: IFFALSE 55302
// SetBName ( base_dep , name ) ;
55288: LD_VAR 0 1
55292: PPUSH
55293: LD_VAR 0 3
55297: PPUSH
55298: CALL_OW 500
// base := GetBase ( base_dep ) ;
55302: LD_ADDR_VAR 0 15
55306: PUSH
55307: LD_VAR 0 1
55311: PPUSH
55312: CALL_OW 274
55316: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
55317: LD_ADDR_VAR 0 16
55321: PUSH
55322: LD_VAR 0 1
55326: PPUSH
55327: CALL_OW 255
55331: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
55332: LD_ADDR_VAR 0 17
55336: PUSH
55337: LD_VAR 0 1
55341: PPUSH
55342: CALL_OW 248
55346: ST_TO_ADDR
// if sources then
55347: LD_VAR 0 5
55351: IFFALSE 55398
// for i = 1 to 3 do
55353: LD_ADDR_VAR 0 8
55357: PUSH
55358: DOUBLE
55359: LD_INT 1
55361: DEC
55362: ST_TO_ADDR
55363: LD_INT 3
55365: PUSH
55366: FOR_TO
55367: IFFALSE 55396
// AddResourceType ( base , i , sources [ i ] ) ;
55369: LD_VAR 0 15
55373: PPUSH
55374: LD_VAR 0 8
55378: PPUSH
55379: LD_VAR 0 5
55383: PUSH
55384: LD_VAR 0 8
55388: ARRAY
55389: PPUSH
55390: CALL_OW 276
55394: GO 55366
55396: POP
55397: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
55398: LD_ADDR_VAR 0 18
55402: PUSH
55403: LD_VAR 0 15
55407: PPUSH
55408: LD_VAR 0 2
55412: PPUSH
55413: LD_INT 1
55415: PPUSH
55416: CALL 54658 0 3
55420: ST_TO_ADDR
// InitHc ;
55421: CALL_OW 19
// InitUc ;
55425: CALL_OW 18
// uc_side := side ;
55429: LD_ADDR_OWVAR 20
55433: PUSH
55434: LD_VAR 0 16
55438: ST_TO_ADDR
// uc_nation := nation ;
55439: LD_ADDR_OWVAR 21
55443: PUSH
55444: LD_VAR 0 17
55448: ST_TO_ADDR
// if buildings then
55449: LD_VAR 0 18
55453: IFFALSE 56775
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
55455: LD_ADDR_VAR 0 19
55459: PUSH
55460: LD_VAR 0 18
55464: PPUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 30
55470: PUSH
55471: LD_INT 29
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 30
55480: PUSH
55481: LD_INT 30
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: PPUSH
55493: CALL_OW 72
55497: ST_TO_ADDR
// if tmp then
55498: LD_VAR 0 19
55502: IFFALSE 55550
// for i in tmp do
55504: LD_ADDR_VAR 0 8
55508: PUSH
55509: LD_VAR 0 19
55513: PUSH
55514: FOR_IN
55515: IFFALSE 55548
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
55517: LD_VAR 0 8
55521: PPUSH
55522: CALL_OW 250
55526: PPUSH
55527: LD_VAR 0 8
55531: PPUSH
55532: CALL_OW 251
55536: PPUSH
55537: LD_VAR 0 16
55541: PPUSH
55542: CALL_OW 441
55546: GO 55514
55548: POP
55549: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
55550: LD_VAR 0 18
55554: PPUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 30
55560: PUSH
55561: LD_INT 32
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 30
55570: PUSH
55571: LD_INT 33
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: PPUSH
55583: CALL_OW 72
55587: IFFALSE 55675
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
55589: LD_ADDR_VAR 0 8
55593: PUSH
55594: LD_VAR 0 18
55598: PPUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 30
55604: PUSH
55605: LD_INT 32
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 30
55614: PUSH
55615: LD_INT 33
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: PPUSH
55627: CALL_OW 72
55631: PUSH
55632: FOR_IN
55633: IFFALSE 55673
// begin if not GetBWeapon ( i ) then
55635: LD_VAR 0 8
55639: PPUSH
55640: CALL_OW 269
55644: NOT
55645: IFFALSE 55671
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
55647: LD_VAR 0 8
55651: PPUSH
55652: LD_VAR 0 8
55656: PPUSH
55657: LD_VAR 0 2
55661: PPUSH
55662: CALL 56921 0 2
55666: PPUSH
55667: CALL_OW 431
// end ;
55671: GO 55632
55673: POP
55674: POP
// end ; for i = 1 to personel do
55675: LD_ADDR_VAR 0 8
55679: PUSH
55680: DOUBLE
55681: LD_INT 1
55683: DEC
55684: ST_TO_ADDR
55685: LD_VAR 0 6
55689: PUSH
55690: FOR_TO
55691: IFFALSE 56755
// begin if i > 4 then
55693: LD_VAR 0 8
55697: PUSH
55698: LD_INT 4
55700: GREATER
55701: IFFALSE 55705
// break ;
55703: GO 56755
// case i of 1 :
55705: LD_VAR 0 8
55709: PUSH
55710: LD_INT 1
55712: DOUBLE
55713: EQUAL
55714: IFTRUE 55718
55716: GO 55798
55718: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55719: LD_ADDR_VAR 0 12
55723: PUSH
55724: LD_VAR 0 18
55728: PPUSH
55729: LD_INT 22
55731: PUSH
55732: LD_VAR 0 16
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 58
55743: PUSH
55744: EMPTY
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 30
55752: PUSH
55753: LD_INT 32
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 30
55762: PUSH
55763: LD_INT 4
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 30
55772: PUSH
55773: LD_INT 5
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: LIST
55790: PPUSH
55791: CALL_OW 72
55795: ST_TO_ADDR
55796: GO 56020
55798: LD_INT 2
55800: DOUBLE
55801: EQUAL
55802: IFTRUE 55806
55804: GO 55868
55806: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55807: LD_ADDR_VAR 0 12
55811: PUSH
55812: LD_VAR 0 18
55816: PPUSH
55817: LD_INT 22
55819: PUSH
55820: LD_VAR 0 16
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 30
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 30
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PPUSH
55861: CALL_OW 72
55865: ST_TO_ADDR
55866: GO 56020
55868: LD_INT 3
55870: DOUBLE
55871: EQUAL
55872: IFTRUE 55876
55874: GO 55938
55876: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55877: LD_ADDR_VAR 0 12
55881: PUSH
55882: LD_VAR 0 18
55886: PPUSH
55887: LD_INT 22
55889: PUSH
55890: LD_VAR 0 16
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 30
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 30
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PPUSH
55931: CALL_OW 72
55935: ST_TO_ADDR
55936: GO 56020
55938: LD_INT 4
55940: DOUBLE
55941: EQUAL
55942: IFTRUE 55946
55944: GO 56019
55946: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55947: LD_ADDR_VAR 0 12
55951: PUSH
55952: LD_VAR 0 18
55956: PPUSH
55957: LD_INT 22
55959: PUSH
55960: LD_VAR 0 16
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 30
55974: PUSH
55975: LD_INT 6
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 30
55984: PUSH
55985: LD_INT 7
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 30
55994: PUSH
55995: LD_INT 8
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PPUSH
56012: CALL_OW 72
56016: ST_TO_ADDR
56017: GO 56020
56019: POP
// if i = 1 then
56020: LD_VAR 0 8
56024: PUSH
56025: LD_INT 1
56027: EQUAL
56028: IFFALSE 56139
// begin tmp := [ ] ;
56030: LD_ADDR_VAR 0 19
56034: PUSH
56035: EMPTY
56036: ST_TO_ADDR
// for j in f do
56037: LD_ADDR_VAR 0 9
56041: PUSH
56042: LD_VAR 0 12
56046: PUSH
56047: FOR_IN
56048: IFFALSE 56121
// if GetBType ( j ) = b_bunker then
56050: LD_VAR 0 9
56054: PPUSH
56055: CALL_OW 266
56059: PUSH
56060: LD_INT 32
56062: EQUAL
56063: IFFALSE 56090
// tmp := Insert ( tmp , 1 , j ) else
56065: LD_ADDR_VAR 0 19
56069: PUSH
56070: LD_VAR 0 19
56074: PPUSH
56075: LD_INT 1
56077: PPUSH
56078: LD_VAR 0 9
56082: PPUSH
56083: CALL_OW 2
56087: ST_TO_ADDR
56088: GO 56119
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56090: LD_ADDR_VAR 0 19
56094: PUSH
56095: LD_VAR 0 19
56099: PPUSH
56100: LD_VAR 0 19
56104: PUSH
56105: LD_INT 1
56107: PLUS
56108: PPUSH
56109: LD_VAR 0 9
56113: PPUSH
56114: CALL_OW 2
56118: ST_TO_ADDR
56119: GO 56047
56121: POP
56122: POP
// if tmp then
56123: LD_VAR 0 19
56127: IFFALSE 56139
// f := tmp ;
56129: LD_ADDR_VAR 0 12
56133: PUSH
56134: LD_VAR 0 19
56138: ST_TO_ADDR
// end ; x := personel [ i ] ;
56139: LD_ADDR_VAR 0 13
56143: PUSH
56144: LD_VAR 0 6
56148: PUSH
56149: LD_VAR 0 8
56153: ARRAY
56154: ST_TO_ADDR
// if x = - 1 then
56155: LD_VAR 0 13
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: EQUAL
56164: IFFALSE 56373
// begin for j in f do
56166: LD_ADDR_VAR 0 9
56170: PUSH
56171: LD_VAR 0 12
56175: PUSH
56176: FOR_IN
56177: IFFALSE 56369
// repeat InitHc ;
56179: CALL_OW 19
// if GetBType ( j ) = b_barracks then
56183: LD_VAR 0 9
56187: PPUSH
56188: CALL_OW 266
56192: PUSH
56193: LD_INT 5
56195: EQUAL
56196: IFFALSE 56266
// begin if UnitsInside ( j ) < 3 then
56198: LD_VAR 0 9
56202: PPUSH
56203: CALL_OW 313
56207: PUSH
56208: LD_INT 3
56210: LESS
56211: IFFALSE 56247
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56213: LD_INT 0
56215: PPUSH
56216: LD_INT 5
56218: PUSH
56219: LD_INT 8
56221: PUSH
56222: LD_INT 9
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: PUSH
56230: LD_VAR 0 17
56234: ARRAY
56235: PPUSH
56236: LD_VAR 0 4
56240: PPUSH
56241: CALL_OW 380
56245: GO 56264
// PrepareHuman ( false , i , skill ) ;
56247: LD_INT 0
56249: PPUSH
56250: LD_VAR 0 8
56254: PPUSH
56255: LD_VAR 0 4
56259: PPUSH
56260: CALL_OW 380
// end else
56264: GO 56283
// PrepareHuman ( false , i , skill ) ;
56266: LD_INT 0
56268: PPUSH
56269: LD_VAR 0 8
56273: PPUSH
56274: LD_VAR 0 4
56278: PPUSH
56279: CALL_OW 380
// un := CreateHuman ;
56283: LD_ADDR_VAR 0 14
56287: PUSH
56288: CALL_OW 44
56292: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56293: LD_ADDR_VAR 0 7
56297: PUSH
56298: LD_VAR 0 7
56302: PPUSH
56303: LD_INT 1
56305: PPUSH
56306: LD_VAR 0 14
56310: PPUSH
56311: CALL_OW 2
56315: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
56316: LD_VAR 0 14
56320: PPUSH
56321: LD_VAR 0 9
56325: PPUSH
56326: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
56330: LD_VAR 0 9
56334: PPUSH
56335: CALL_OW 313
56339: PUSH
56340: LD_INT 6
56342: EQUAL
56343: PUSH
56344: LD_VAR 0 9
56348: PPUSH
56349: CALL_OW 266
56353: PUSH
56354: LD_INT 32
56356: PUSH
56357: LD_INT 31
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: IN
56364: OR
56365: IFFALSE 56179
56367: GO 56176
56369: POP
56370: POP
// end else
56371: GO 56753
// for j = 1 to x do
56373: LD_ADDR_VAR 0 9
56377: PUSH
56378: DOUBLE
56379: LD_INT 1
56381: DEC
56382: ST_TO_ADDR
56383: LD_VAR 0 13
56387: PUSH
56388: FOR_TO
56389: IFFALSE 56751
// begin InitHc ;
56391: CALL_OW 19
// if not f then
56395: LD_VAR 0 12
56399: NOT
56400: IFFALSE 56489
// begin PrepareHuman ( false , i , skill ) ;
56402: LD_INT 0
56404: PPUSH
56405: LD_VAR 0 8
56409: PPUSH
56410: LD_VAR 0 4
56414: PPUSH
56415: CALL_OW 380
// un := CreateHuman ;
56419: LD_ADDR_VAR 0 14
56423: PUSH
56424: CALL_OW 44
56428: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56429: LD_ADDR_VAR 0 7
56433: PUSH
56434: LD_VAR 0 7
56438: PPUSH
56439: LD_INT 1
56441: PPUSH
56442: LD_VAR 0 14
56446: PPUSH
56447: CALL_OW 2
56451: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56452: LD_VAR 0 14
56456: PPUSH
56457: LD_VAR 0 1
56461: PPUSH
56462: CALL_OW 250
56466: PPUSH
56467: LD_VAR 0 1
56471: PPUSH
56472: CALL_OW 251
56476: PPUSH
56477: LD_INT 10
56479: PPUSH
56480: LD_INT 0
56482: PPUSH
56483: CALL_OW 50
// continue ;
56487: GO 56388
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
56489: LD_VAR 0 12
56493: PUSH
56494: LD_INT 1
56496: ARRAY
56497: PPUSH
56498: CALL_OW 313
56502: PUSH
56503: LD_VAR 0 12
56507: PUSH
56508: LD_INT 1
56510: ARRAY
56511: PPUSH
56512: CALL_OW 266
56516: PUSH
56517: LD_INT 32
56519: PUSH
56520: LD_INT 31
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: IN
56527: AND
56528: PUSH
56529: LD_VAR 0 12
56533: PUSH
56534: LD_INT 1
56536: ARRAY
56537: PPUSH
56538: CALL_OW 313
56542: PUSH
56543: LD_INT 6
56545: EQUAL
56546: OR
56547: IFFALSE 56567
// f := Delete ( f , 1 ) ;
56549: LD_ADDR_VAR 0 12
56553: PUSH
56554: LD_VAR 0 12
56558: PPUSH
56559: LD_INT 1
56561: PPUSH
56562: CALL_OW 3
56566: ST_TO_ADDR
// if not f then
56567: LD_VAR 0 12
56571: NOT
56572: IFFALSE 56590
// begin x := x + 2 ;
56574: LD_ADDR_VAR 0 13
56578: PUSH
56579: LD_VAR 0 13
56583: PUSH
56584: LD_INT 2
56586: PLUS
56587: ST_TO_ADDR
// continue ;
56588: GO 56388
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
56590: LD_VAR 0 12
56594: PUSH
56595: LD_INT 1
56597: ARRAY
56598: PPUSH
56599: CALL_OW 266
56603: PUSH
56604: LD_INT 5
56606: EQUAL
56607: IFFALSE 56681
// begin if UnitsInside ( f [ 1 ] ) < 3 then
56609: LD_VAR 0 12
56613: PUSH
56614: LD_INT 1
56616: ARRAY
56617: PPUSH
56618: CALL_OW 313
56622: PUSH
56623: LD_INT 3
56625: LESS
56626: IFFALSE 56662
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56628: LD_INT 0
56630: PPUSH
56631: LD_INT 5
56633: PUSH
56634: LD_INT 8
56636: PUSH
56637: LD_INT 9
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: LIST
56644: PUSH
56645: LD_VAR 0 17
56649: ARRAY
56650: PPUSH
56651: LD_VAR 0 4
56655: PPUSH
56656: CALL_OW 380
56660: GO 56679
// PrepareHuman ( false , i , skill ) ;
56662: LD_INT 0
56664: PPUSH
56665: LD_VAR 0 8
56669: PPUSH
56670: LD_VAR 0 4
56674: PPUSH
56675: CALL_OW 380
// end else
56679: GO 56698
// PrepareHuman ( false , i , skill ) ;
56681: LD_INT 0
56683: PPUSH
56684: LD_VAR 0 8
56688: PPUSH
56689: LD_VAR 0 4
56693: PPUSH
56694: CALL_OW 380
// un := CreateHuman ;
56698: LD_ADDR_VAR 0 14
56702: PUSH
56703: CALL_OW 44
56707: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56708: LD_ADDR_VAR 0 7
56712: PUSH
56713: LD_VAR 0 7
56717: PPUSH
56718: LD_INT 1
56720: PPUSH
56721: LD_VAR 0 14
56725: PPUSH
56726: CALL_OW 2
56730: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56731: LD_VAR 0 14
56735: PPUSH
56736: LD_VAR 0 12
56740: PUSH
56741: LD_INT 1
56743: ARRAY
56744: PPUSH
56745: CALL_OW 52
// end ;
56749: GO 56388
56751: POP
56752: POP
// end ;
56753: GO 55690
56755: POP
56756: POP
// result := result ^ buildings ;
56757: LD_ADDR_VAR 0 7
56761: PUSH
56762: LD_VAR 0 7
56766: PUSH
56767: LD_VAR 0 18
56771: ADD
56772: ST_TO_ADDR
// end else
56773: GO 56916
// begin for i = 1 to personel do
56775: LD_ADDR_VAR 0 8
56779: PUSH
56780: DOUBLE
56781: LD_INT 1
56783: DEC
56784: ST_TO_ADDR
56785: LD_VAR 0 6
56789: PUSH
56790: FOR_TO
56791: IFFALSE 56914
// begin if i > 4 then
56793: LD_VAR 0 8
56797: PUSH
56798: LD_INT 4
56800: GREATER
56801: IFFALSE 56805
// break ;
56803: GO 56914
// x := personel [ i ] ;
56805: LD_ADDR_VAR 0 13
56809: PUSH
56810: LD_VAR 0 6
56814: PUSH
56815: LD_VAR 0 8
56819: ARRAY
56820: ST_TO_ADDR
// if x = - 1 then
56821: LD_VAR 0 13
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: EQUAL
56830: IFFALSE 56834
// continue ;
56832: GO 56790
// PrepareHuman ( false , i , skill ) ;
56834: LD_INT 0
56836: PPUSH
56837: LD_VAR 0 8
56841: PPUSH
56842: LD_VAR 0 4
56846: PPUSH
56847: CALL_OW 380
// un := CreateHuman ;
56851: LD_ADDR_VAR 0 14
56855: PUSH
56856: CALL_OW 44
56860: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56861: LD_VAR 0 14
56865: PPUSH
56866: LD_VAR 0 1
56870: PPUSH
56871: CALL_OW 250
56875: PPUSH
56876: LD_VAR 0 1
56880: PPUSH
56881: CALL_OW 251
56885: PPUSH
56886: LD_INT 10
56888: PPUSH
56889: LD_INT 0
56891: PPUSH
56892: CALL_OW 50
// result := result ^ un ;
56896: LD_ADDR_VAR 0 7
56900: PUSH
56901: LD_VAR 0 7
56905: PUSH
56906: LD_VAR 0 14
56910: ADD
56911: ST_TO_ADDR
// end ;
56912: GO 56790
56914: POP
56915: POP
// end ; end ;
56916: LD_VAR 0 7
56920: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56921: LD_INT 0
56923: PPUSH
56924: PPUSH
56925: PPUSH
56926: PPUSH
56927: PPUSH
56928: PPUSH
56929: PPUSH
56930: PPUSH
56931: PPUSH
56932: PPUSH
56933: PPUSH
56934: PPUSH
56935: PPUSH
56936: PPUSH
56937: PPUSH
56938: PPUSH
// result := false ;
56939: LD_ADDR_VAR 0 3
56943: PUSH
56944: LD_INT 0
56946: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56947: LD_VAR 0 1
56951: NOT
56952: PUSH
56953: LD_VAR 0 1
56957: PPUSH
56958: CALL_OW 266
56962: PUSH
56963: LD_INT 32
56965: PUSH
56966: LD_INT 33
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: IN
56973: NOT
56974: OR
56975: IFFALSE 56979
// exit ;
56977: GO 58118
// nat := GetNation ( tower ) ;
56979: LD_ADDR_VAR 0 12
56983: PUSH
56984: LD_VAR 0 1
56988: PPUSH
56989: CALL_OW 248
56993: ST_TO_ADDR
// side := GetSide ( tower ) ;
56994: LD_ADDR_VAR 0 16
56998: PUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 255
57008: ST_TO_ADDR
// x := GetX ( tower ) ;
57009: LD_ADDR_VAR 0 10
57013: PUSH
57014: LD_VAR 0 1
57018: PPUSH
57019: CALL_OW 250
57023: ST_TO_ADDR
// y := GetY ( tower ) ;
57024: LD_ADDR_VAR 0 11
57028: PUSH
57029: LD_VAR 0 1
57033: PPUSH
57034: CALL_OW 251
57038: ST_TO_ADDR
// if not x or not y then
57039: LD_VAR 0 10
57043: NOT
57044: PUSH
57045: LD_VAR 0 11
57049: NOT
57050: OR
57051: IFFALSE 57055
// exit ;
57053: GO 58118
// weapon := 0 ;
57055: LD_ADDR_VAR 0 18
57059: PUSH
57060: LD_INT 0
57062: ST_TO_ADDR
// fac_list := [ ] ;
57063: LD_ADDR_VAR 0 17
57067: PUSH
57068: EMPTY
57069: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
57070: LD_ADDR_VAR 0 6
57074: PUSH
57075: LD_VAR 0 1
57079: PPUSH
57080: CALL_OW 274
57084: PPUSH
57085: LD_VAR 0 2
57089: PPUSH
57090: LD_INT 0
57092: PPUSH
57093: CALL 54658 0 3
57097: PPUSH
57098: LD_INT 30
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PPUSH
57108: CALL_OW 72
57112: ST_TO_ADDR
// if not factories then
57113: LD_VAR 0 6
57117: NOT
57118: IFFALSE 57122
// exit ;
57120: GO 58118
// for i in factories do
57122: LD_ADDR_VAR 0 8
57126: PUSH
57127: LD_VAR 0 6
57131: PUSH
57132: FOR_IN
57133: IFFALSE 57158
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57135: LD_ADDR_VAR 0 17
57139: PUSH
57140: LD_VAR 0 17
57144: PUSH
57145: LD_VAR 0 8
57149: PPUSH
57150: CALL_OW 478
57154: UNION
57155: ST_TO_ADDR
57156: GO 57132
57158: POP
57159: POP
// if not fac_list then
57160: LD_VAR 0 17
57164: NOT
57165: IFFALSE 57169
// exit ;
57167: GO 58118
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57169: LD_ADDR_VAR 0 5
57173: PUSH
57174: LD_INT 4
57176: PUSH
57177: LD_INT 5
57179: PUSH
57180: LD_INT 9
57182: PUSH
57183: LD_INT 10
57185: PUSH
57186: LD_INT 6
57188: PUSH
57189: LD_INT 7
57191: PUSH
57192: LD_INT 11
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 27
57206: PUSH
57207: LD_INT 28
57209: PUSH
57210: LD_INT 26
57212: PUSH
57213: LD_INT 30
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 43
57224: PUSH
57225: LD_INT 44
57227: PUSH
57228: LD_INT 46
57230: PUSH
57231: LD_INT 45
57233: PUSH
57234: LD_INT 47
57236: PUSH
57237: LD_INT 49
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: PUSH
57253: LD_VAR 0 12
57257: ARRAY
57258: ST_TO_ADDR
// for i in list do
57259: LD_ADDR_VAR 0 8
57263: PUSH
57264: LD_VAR 0 5
57268: PUSH
57269: FOR_IN
57270: IFFALSE 57303
// if not i in fac_list then
57272: LD_VAR 0 8
57276: PUSH
57277: LD_VAR 0 17
57281: IN
57282: NOT
57283: IFFALSE 57301
// list := list diff i ;
57285: LD_ADDR_VAR 0 5
57289: PUSH
57290: LD_VAR 0 5
57294: PUSH
57295: LD_VAR 0 8
57299: DIFF
57300: ST_TO_ADDR
57301: GO 57269
57303: POP
57304: POP
// if not list then
57305: LD_VAR 0 5
57309: NOT
57310: IFFALSE 57314
// exit ;
57312: GO 58118
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57314: LD_VAR 0 12
57318: PUSH
57319: LD_INT 3
57321: EQUAL
57322: PUSH
57323: LD_INT 49
57325: PUSH
57326: LD_VAR 0 5
57330: IN
57331: AND
57332: PUSH
57333: LD_INT 31
57335: PPUSH
57336: LD_VAR 0 16
57340: PPUSH
57341: CALL_OW 321
57345: PUSH
57346: LD_INT 2
57348: EQUAL
57349: AND
57350: IFFALSE 57410
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
57352: LD_INT 22
57354: PUSH
57355: LD_VAR 0 16
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 35
57366: PUSH
57367: LD_INT 49
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 91
57376: PUSH
57377: LD_VAR 0 1
57381: PUSH
57382: LD_INT 10
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: PPUSH
57395: CALL_OW 69
57399: NOT
57400: IFFALSE 57410
// weapon := ru_time_lapser ;
57402: LD_ADDR_VAR 0 18
57406: PUSH
57407: LD_INT 49
57409: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
57410: LD_VAR 0 12
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: IN
57425: PUSH
57426: LD_INT 11
57428: PUSH
57429: LD_VAR 0 5
57433: IN
57434: PUSH
57435: LD_INT 30
57437: PUSH
57438: LD_VAR 0 5
57442: IN
57443: OR
57444: AND
57445: PUSH
57446: LD_INT 6
57448: PPUSH
57449: LD_VAR 0 16
57453: PPUSH
57454: CALL_OW 321
57458: PUSH
57459: LD_INT 2
57461: EQUAL
57462: AND
57463: IFFALSE 57628
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
57465: LD_INT 22
57467: PUSH
57468: LD_VAR 0 16
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 35
57482: PUSH
57483: LD_INT 11
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 35
57492: PUSH
57493: LD_INT 30
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 91
57507: PUSH
57508: LD_VAR 0 1
57512: PUSH
57513: LD_INT 18
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: PPUSH
57526: CALL_OW 69
57530: NOT
57531: PUSH
57532: LD_INT 22
57534: PUSH
57535: LD_VAR 0 16
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 30
57549: PUSH
57550: LD_INT 32
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 30
57559: PUSH
57560: LD_INT 33
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 91
57574: PUSH
57575: LD_VAR 0 1
57579: PUSH
57580: LD_INT 12
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: PPUSH
57596: CALL_OW 69
57600: PUSH
57601: LD_INT 2
57603: GREATER
57604: AND
57605: IFFALSE 57628
// weapon := [ us_radar , ar_radar ] [ nat ] ;
57607: LD_ADDR_VAR 0 18
57611: PUSH
57612: LD_INT 11
57614: PUSH
57615: LD_INT 30
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_VAR 0 12
57626: ARRAY
57627: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
57628: LD_VAR 0 18
57632: NOT
57633: PUSH
57634: LD_INT 40
57636: PPUSH
57637: LD_VAR 0 16
57641: PPUSH
57642: CALL_OW 321
57646: PUSH
57647: LD_INT 2
57649: EQUAL
57650: AND
57651: PUSH
57652: LD_INT 7
57654: PUSH
57655: LD_VAR 0 5
57659: IN
57660: PUSH
57661: LD_INT 28
57663: PUSH
57664: LD_VAR 0 5
57668: IN
57669: OR
57670: PUSH
57671: LD_INT 45
57673: PUSH
57674: LD_VAR 0 5
57678: IN
57679: OR
57680: AND
57681: IFFALSE 57935
// begin hex := GetHexInfo ( x , y ) ;
57683: LD_ADDR_VAR 0 4
57687: PUSH
57688: LD_VAR 0 10
57692: PPUSH
57693: LD_VAR 0 11
57697: PPUSH
57698: CALL_OW 546
57702: ST_TO_ADDR
// if hex [ 1 ] then
57703: LD_VAR 0 4
57707: PUSH
57708: LD_INT 1
57710: ARRAY
57711: IFFALSE 57715
// exit ;
57713: GO 58118
// height := hex [ 2 ] ;
57715: LD_ADDR_VAR 0 15
57719: PUSH
57720: LD_VAR 0 4
57724: PUSH
57725: LD_INT 2
57727: ARRAY
57728: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57729: LD_ADDR_VAR 0 14
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: LD_INT 5
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// for i in tmp do
57752: LD_ADDR_VAR 0 8
57756: PUSH
57757: LD_VAR 0 14
57761: PUSH
57762: FOR_IN
57763: IFFALSE 57933
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57765: LD_ADDR_VAR 0 9
57769: PUSH
57770: LD_VAR 0 10
57774: PPUSH
57775: LD_VAR 0 8
57779: PPUSH
57780: LD_INT 5
57782: PPUSH
57783: CALL_OW 272
57787: PUSH
57788: LD_VAR 0 11
57792: PPUSH
57793: LD_VAR 0 8
57797: PPUSH
57798: LD_INT 5
57800: PPUSH
57801: CALL_OW 273
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57810: LD_VAR 0 9
57814: PUSH
57815: LD_INT 1
57817: ARRAY
57818: PPUSH
57819: LD_VAR 0 9
57823: PUSH
57824: LD_INT 2
57826: ARRAY
57827: PPUSH
57828: CALL_OW 488
57832: IFFALSE 57931
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57834: LD_ADDR_VAR 0 4
57838: PUSH
57839: LD_VAR 0 9
57843: PUSH
57844: LD_INT 1
57846: ARRAY
57847: PPUSH
57848: LD_VAR 0 9
57852: PUSH
57853: LD_INT 2
57855: ARRAY
57856: PPUSH
57857: CALL_OW 546
57861: ST_TO_ADDR
// if hex [ 1 ] then
57862: LD_VAR 0 4
57866: PUSH
57867: LD_INT 1
57869: ARRAY
57870: IFFALSE 57874
// continue ;
57872: GO 57762
// h := hex [ 2 ] ;
57874: LD_ADDR_VAR 0 13
57878: PUSH
57879: LD_VAR 0 4
57883: PUSH
57884: LD_INT 2
57886: ARRAY
57887: ST_TO_ADDR
// if h + 7 < height then
57888: LD_VAR 0 13
57892: PUSH
57893: LD_INT 7
57895: PLUS
57896: PUSH
57897: LD_VAR 0 15
57901: LESS
57902: IFFALSE 57931
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57904: LD_ADDR_VAR 0 18
57908: PUSH
57909: LD_INT 7
57911: PUSH
57912: LD_INT 28
57914: PUSH
57915: LD_INT 45
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: LIST
57922: PUSH
57923: LD_VAR 0 12
57927: ARRAY
57928: ST_TO_ADDR
// break ;
57929: GO 57933
// end ; end ; end ;
57931: GO 57762
57933: POP
57934: POP
// end ; if not weapon then
57935: LD_VAR 0 18
57939: NOT
57940: IFFALSE 58000
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57942: LD_ADDR_VAR 0 5
57946: PUSH
57947: LD_VAR 0 5
57951: PUSH
57952: LD_INT 11
57954: PUSH
57955: LD_INT 30
57957: PUSH
57958: LD_INT 49
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: LIST
57965: DIFF
57966: ST_TO_ADDR
// if not list then
57967: LD_VAR 0 5
57971: NOT
57972: IFFALSE 57976
// exit ;
57974: GO 58118
// weapon := list [ rand ( 1 , list ) ] ;
57976: LD_ADDR_VAR 0 18
57980: PUSH
57981: LD_VAR 0 5
57985: PUSH
57986: LD_INT 1
57988: PPUSH
57989: LD_VAR 0 5
57993: PPUSH
57994: CALL_OW 12
57998: ARRAY
57999: ST_TO_ADDR
// end ; if weapon then
58000: LD_VAR 0 18
58004: IFFALSE 58118
// begin tmp := CostOfWeapon ( weapon ) ;
58006: LD_ADDR_VAR 0 14
58010: PUSH
58011: LD_VAR 0 18
58015: PPUSH
58016: CALL_OW 451
58020: ST_TO_ADDR
// j := GetBase ( tower ) ;
58021: LD_ADDR_VAR 0 9
58025: PUSH
58026: LD_VAR 0 1
58030: PPUSH
58031: CALL_OW 274
58035: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58036: LD_VAR 0 9
58040: PPUSH
58041: LD_INT 1
58043: PPUSH
58044: CALL_OW 275
58048: PUSH
58049: LD_VAR 0 14
58053: PUSH
58054: LD_INT 1
58056: ARRAY
58057: GREATEREQUAL
58058: PUSH
58059: LD_VAR 0 9
58063: PPUSH
58064: LD_INT 2
58066: PPUSH
58067: CALL_OW 275
58071: PUSH
58072: LD_VAR 0 14
58076: PUSH
58077: LD_INT 2
58079: ARRAY
58080: GREATEREQUAL
58081: AND
58082: PUSH
58083: LD_VAR 0 9
58087: PPUSH
58088: LD_INT 3
58090: PPUSH
58091: CALL_OW 275
58095: PUSH
58096: LD_VAR 0 14
58100: PUSH
58101: LD_INT 3
58103: ARRAY
58104: GREATEREQUAL
58105: AND
58106: IFFALSE 58118
// result := weapon ;
58108: LD_ADDR_VAR 0 3
58112: PUSH
58113: LD_VAR 0 18
58117: ST_TO_ADDR
// end ; end ;
58118: LD_VAR 0 3
58122: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58123: LD_INT 0
58125: PPUSH
58126: PPUSH
// result := true ;
58127: LD_ADDR_VAR 0 3
58131: PUSH
58132: LD_INT 1
58134: ST_TO_ADDR
// if array1 = array2 then
58135: LD_VAR 0 1
58139: PUSH
58140: LD_VAR 0 2
58144: EQUAL
58145: IFFALSE 58205
// begin for i = 1 to array1 do
58147: LD_ADDR_VAR 0 4
58151: PUSH
58152: DOUBLE
58153: LD_INT 1
58155: DEC
58156: ST_TO_ADDR
58157: LD_VAR 0 1
58161: PUSH
58162: FOR_TO
58163: IFFALSE 58201
// if array1 [ i ] <> array2 [ i ] then
58165: LD_VAR 0 1
58169: PUSH
58170: LD_VAR 0 4
58174: ARRAY
58175: PUSH
58176: LD_VAR 0 2
58180: PUSH
58181: LD_VAR 0 4
58185: ARRAY
58186: NONEQUAL
58187: IFFALSE 58199
// begin result := false ;
58189: LD_ADDR_VAR 0 3
58193: PUSH
58194: LD_INT 0
58196: ST_TO_ADDR
// break ;
58197: GO 58201
// end ;
58199: GO 58162
58201: POP
58202: POP
// end else
58203: GO 58213
// result := false ;
58205: LD_ADDR_VAR 0 3
58209: PUSH
58210: LD_INT 0
58212: ST_TO_ADDR
// end ;
58213: LD_VAR 0 3
58217: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
58218: LD_INT 0
58220: PPUSH
58221: PPUSH
// if not array1 or not array2 then
58222: LD_VAR 0 1
58226: NOT
58227: PUSH
58228: LD_VAR 0 2
58232: NOT
58233: OR
58234: IFFALSE 58238
// exit ;
58236: GO 58302
// result := true ;
58238: LD_ADDR_VAR 0 3
58242: PUSH
58243: LD_INT 1
58245: ST_TO_ADDR
// for i = 1 to array1 do
58246: LD_ADDR_VAR 0 4
58250: PUSH
58251: DOUBLE
58252: LD_INT 1
58254: DEC
58255: ST_TO_ADDR
58256: LD_VAR 0 1
58260: PUSH
58261: FOR_TO
58262: IFFALSE 58300
// if array1 [ i ] <> array2 [ i ] then
58264: LD_VAR 0 1
58268: PUSH
58269: LD_VAR 0 4
58273: ARRAY
58274: PUSH
58275: LD_VAR 0 2
58279: PUSH
58280: LD_VAR 0 4
58284: ARRAY
58285: NONEQUAL
58286: IFFALSE 58298
// begin result := false ;
58288: LD_ADDR_VAR 0 3
58292: PUSH
58293: LD_INT 0
58295: ST_TO_ADDR
// break ;
58296: GO 58300
// end ;
58298: GO 58261
58300: POP
58301: POP
// end ;
58302: LD_VAR 0 3
58306: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58307: LD_INT 0
58309: PPUSH
58310: PPUSH
58311: PPUSH
// pom := GetBase ( fac ) ;
58312: LD_ADDR_VAR 0 5
58316: PUSH
58317: LD_VAR 0 1
58321: PPUSH
58322: CALL_OW 274
58326: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
58327: LD_ADDR_VAR 0 4
58331: PUSH
58332: LD_VAR 0 2
58336: PUSH
58337: LD_INT 1
58339: ARRAY
58340: PPUSH
58341: LD_VAR 0 2
58345: PUSH
58346: LD_INT 2
58348: ARRAY
58349: PPUSH
58350: LD_VAR 0 2
58354: PUSH
58355: LD_INT 3
58357: ARRAY
58358: PPUSH
58359: LD_VAR 0 2
58363: PUSH
58364: LD_INT 4
58366: ARRAY
58367: PPUSH
58368: CALL_OW 449
58372: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58373: LD_ADDR_VAR 0 3
58377: PUSH
58378: LD_VAR 0 5
58382: PPUSH
58383: LD_INT 1
58385: PPUSH
58386: CALL_OW 275
58390: PUSH
58391: LD_VAR 0 4
58395: PUSH
58396: LD_INT 1
58398: ARRAY
58399: GREATEREQUAL
58400: PUSH
58401: LD_VAR 0 5
58405: PPUSH
58406: LD_INT 2
58408: PPUSH
58409: CALL_OW 275
58413: PUSH
58414: LD_VAR 0 4
58418: PUSH
58419: LD_INT 2
58421: ARRAY
58422: GREATEREQUAL
58423: AND
58424: PUSH
58425: LD_VAR 0 5
58429: PPUSH
58430: LD_INT 3
58432: PPUSH
58433: CALL_OW 275
58437: PUSH
58438: LD_VAR 0 4
58442: PUSH
58443: LD_INT 3
58445: ARRAY
58446: GREATEREQUAL
58447: AND
58448: ST_TO_ADDR
// end ;
58449: LD_VAR 0 3
58453: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
58454: LD_INT 0
58456: PPUSH
58457: PPUSH
58458: PPUSH
58459: PPUSH
// pom := GetBase ( building ) ;
58460: LD_ADDR_VAR 0 3
58464: PUSH
58465: LD_VAR 0 1
58469: PPUSH
58470: CALL_OW 274
58474: ST_TO_ADDR
// if not pom then
58475: LD_VAR 0 3
58479: NOT
58480: IFFALSE 58484
// exit ;
58482: GO 58654
// btype := GetBType ( building ) ;
58484: LD_ADDR_VAR 0 5
58488: PUSH
58489: LD_VAR 0 1
58493: PPUSH
58494: CALL_OW 266
58498: ST_TO_ADDR
// if btype = b_armoury then
58499: LD_VAR 0 5
58503: PUSH
58504: LD_INT 4
58506: EQUAL
58507: IFFALSE 58517
// btype := b_barracks ;
58509: LD_ADDR_VAR 0 5
58513: PUSH
58514: LD_INT 5
58516: ST_TO_ADDR
// if btype = b_depot then
58517: LD_VAR 0 5
58521: PUSH
58522: LD_INT 0
58524: EQUAL
58525: IFFALSE 58535
// btype := b_warehouse ;
58527: LD_ADDR_VAR 0 5
58531: PUSH
58532: LD_INT 1
58534: ST_TO_ADDR
// if btype = b_workshop then
58535: LD_VAR 0 5
58539: PUSH
58540: LD_INT 2
58542: EQUAL
58543: IFFALSE 58553
// btype := b_factory ;
58545: LD_ADDR_VAR 0 5
58549: PUSH
58550: LD_INT 3
58552: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58553: LD_ADDR_VAR 0 4
58557: PUSH
58558: LD_VAR 0 5
58562: PPUSH
58563: LD_VAR 0 1
58567: PPUSH
58568: CALL_OW 248
58572: PPUSH
58573: CALL_OW 450
58577: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58578: LD_ADDR_VAR 0 2
58582: PUSH
58583: LD_VAR 0 3
58587: PPUSH
58588: LD_INT 1
58590: PPUSH
58591: CALL_OW 275
58595: PUSH
58596: LD_VAR 0 4
58600: PUSH
58601: LD_INT 1
58603: ARRAY
58604: GREATEREQUAL
58605: PUSH
58606: LD_VAR 0 3
58610: PPUSH
58611: LD_INT 2
58613: PPUSH
58614: CALL_OW 275
58618: PUSH
58619: LD_VAR 0 4
58623: PUSH
58624: LD_INT 2
58626: ARRAY
58627: GREATEREQUAL
58628: AND
58629: PUSH
58630: LD_VAR 0 3
58634: PPUSH
58635: LD_INT 3
58637: PPUSH
58638: CALL_OW 275
58642: PUSH
58643: LD_VAR 0 4
58647: PUSH
58648: LD_INT 3
58650: ARRAY
58651: GREATEREQUAL
58652: AND
58653: ST_TO_ADDR
// end ;
58654: LD_VAR 0 2
58658: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
58659: LD_INT 0
58661: PPUSH
58662: PPUSH
58663: PPUSH
// pom := GetBase ( building ) ;
58664: LD_ADDR_VAR 0 4
58668: PUSH
58669: LD_VAR 0 1
58673: PPUSH
58674: CALL_OW 274
58678: ST_TO_ADDR
// if not pom then
58679: LD_VAR 0 4
58683: NOT
58684: IFFALSE 58688
// exit ;
58686: GO 58789
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58688: LD_ADDR_VAR 0 5
58692: PUSH
58693: LD_VAR 0 2
58697: PPUSH
58698: LD_VAR 0 1
58702: PPUSH
58703: CALL_OW 248
58707: PPUSH
58708: CALL_OW 450
58712: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58713: LD_ADDR_VAR 0 3
58717: PUSH
58718: LD_VAR 0 4
58722: PPUSH
58723: LD_INT 1
58725: PPUSH
58726: CALL_OW 275
58730: PUSH
58731: LD_VAR 0 5
58735: PUSH
58736: LD_INT 1
58738: ARRAY
58739: GREATEREQUAL
58740: PUSH
58741: LD_VAR 0 4
58745: PPUSH
58746: LD_INT 2
58748: PPUSH
58749: CALL_OW 275
58753: PUSH
58754: LD_VAR 0 5
58758: PUSH
58759: LD_INT 2
58761: ARRAY
58762: GREATEREQUAL
58763: AND
58764: PUSH
58765: LD_VAR 0 4
58769: PPUSH
58770: LD_INT 3
58772: PPUSH
58773: CALL_OW 275
58777: PUSH
58778: LD_VAR 0 5
58782: PUSH
58783: LD_INT 3
58785: ARRAY
58786: GREATEREQUAL
58787: AND
58788: ST_TO_ADDR
// end ;
58789: LD_VAR 0 3
58793: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
58794: LD_INT 0
58796: PPUSH
58797: PPUSH
58798: PPUSH
58799: PPUSH
58800: PPUSH
58801: PPUSH
58802: PPUSH
58803: PPUSH
58804: PPUSH
58805: PPUSH
58806: PPUSH
// result := false ;
58807: LD_ADDR_VAR 0 8
58811: PUSH
58812: LD_INT 0
58814: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
58815: LD_VAR 0 5
58819: NOT
58820: PUSH
58821: LD_VAR 0 1
58825: NOT
58826: OR
58827: PUSH
58828: LD_VAR 0 2
58832: NOT
58833: OR
58834: PUSH
58835: LD_VAR 0 3
58839: NOT
58840: OR
58841: IFFALSE 58845
// exit ;
58843: GO 59659
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
58845: LD_ADDR_VAR 0 14
58849: PUSH
58850: LD_VAR 0 1
58854: PPUSH
58855: LD_VAR 0 2
58859: PPUSH
58860: LD_VAR 0 3
58864: PPUSH
58865: LD_VAR 0 4
58869: PPUSH
58870: LD_VAR 0 5
58874: PUSH
58875: LD_INT 1
58877: ARRAY
58878: PPUSH
58879: CALL_OW 248
58883: PPUSH
58884: LD_INT 0
58886: PPUSH
58887: CALL 60496 0 6
58891: ST_TO_ADDR
// if not hexes then
58892: LD_VAR 0 14
58896: NOT
58897: IFFALSE 58901
// exit ;
58899: GO 59659
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58901: LD_ADDR_VAR 0 17
58905: PUSH
58906: LD_VAR 0 5
58910: PPUSH
58911: LD_INT 22
58913: PUSH
58914: LD_VAR 0 13
58918: PPUSH
58919: CALL_OW 255
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 30
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 30
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PPUSH
58960: CALL_OW 72
58964: ST_TO_ADDR
// for i = 1 to hexes do
58965: LD_ADDR_VAR 0 9
58969: PUSH
58970: DOUBLE
58971: LD_INT 1
58973: DEC
58974: ST_TO_ADDR
58975: LD_VAR 0 14
58979: PUSH
58980: FOR_TO
58981: IFFALSE 59657
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58983: LD_ADDR_VAR 0 13
58987: PUSH
58988: LD_VAR 0 14
58992: PUSH
58993: LD_VAR 0 9
58997: ARRAY
58998: PUSH
58999: LD_INT 1
59001: ARRAY
59002: PPUSH
59003: LD_VAR 0 14
59007: PUSH
59008: LD_VAR 0 9
59012: ARRAY
59013: PUSH
59014: LD_INT 2
59016: ARRAY
59017: PPUSH
59018: CALL_OW 428
59022: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59023: LD_VAR 0 14
59027: PUSH
59028: LD_VAR 0 9
59032: ARRAY
59033: PUSH
59034: LD_INT 1
59036: ARRAY
59037: PPUSH
59038: LD_VAR 0 14
59042: PUSH
59043: LD_VAR 0 9
59047: ARRAY
59048: PUSH
59049: LD_INT 2
59051: ARRAY
59052: PPUSH
59053: CALL_OW 351
59057: PUSH
59058: LD_VAR 0 14
59062: PUSH
59063: LD_VAR 0 9
59067: ARRAY
59068: PUSH
59069: LD_INT 1
59071: ARRAY
59072: PPUSH
59073: LD_VAR 0 14
59077: PUSH
59078: LD_VAR 0 9
59082: ARRAY
59083: PUSH
59084: LD_INT 2
59086: ARRAY
59087: PPUSH
59088: CALL_OW 488
59092: NOT
59093: OR
59094: PUSH
59095: LD_VAR 0 13
59099: PPUSH
59100: CALL_OW 247
59104: PUSH
59105: LD_INT 3
59107: EQUAL
59108: OR
59109: IFFALSE 59115
// exit ;
59111: POP
59112: POP
59113: GO 59659
// if not tmp then
59115: LD_VAR 0 13
59119: NOT
59120: IFFALSE 59124
// continue ;
59122: GO 58980
// result := true ;
59124: LD_ADDR_VAR 0 8
59128: PUSH
59129: LD_INT 1
59131: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
59132: LD_VAR 0 6
59136: PUSH
59137: LD_VAR 0 13
59141: PPUSH
59142: CALL_OW 247
59146: PUSH
59147: LD_INT 2
59149: EQUAL
59150: AND
59151: PUSH
59152: LD_VAR 0 13
59156: PPUSH
59157: CALL_OW 263
59161: PUSH
59162: LD_INT 1
59164: EQUAL
59165: AND
59166: IFFALSE 59330
// begin if IsDrivenBy ( tmp ) then
59168: LD_VAR 0 13
59172: PPUSH
59173: CALL_OW 311
59177: IFFALSE 59181
// continue ;
59179: GO 58980
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
59181: LD_VAR 0 6
59185: PPUSH
59186: LD_INT 3
59188: PUSH
59189: LD_INT 60
59191: PUSH
59192: EMPTY
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 55
59204: PUSH
59205: EMPTY
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PPUSH
59216: CALL_OW 72
59220: IFFALSE 59328
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
59222: LD_ADDR_VAR 0 18
59226: PUSH
59227: LD_VAR 0 6
59231: PPUSH
59232: LD_INT 3
59234: PUSH
59235: LD_INT 60
59237: PUSH
59238: EMPTY
59239: LIST
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: LD_INT 55
59250: PUSH
59251: EMPTY
59252: LIST
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PPUSH
59262: CALL_OW 72
59266: PUSH
59267: LD_INT 1
59269: ARRAY
59270: ST_TO_ADDR
// if IsInUnit ( driver ) then
59271: LD_VAR 0 18
59275: PPUSH
59276: CALL_OW 310
59280: IFFALSE 59291
// ComExit ( driver ) ;
59282: LD_VAR 0 18
59286: PPUSH
59287: CALL 83680 0 1
// AddComEnterUnit ( driver , tmp ) ;
59291: LD_VAR 0 18
59295: PPUSH
59296: LD_VAR 0 13
59300: PPUSH
59301: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
59305: LD_VAR 0 18
59309: PPUSH
59310: LD_VAR 0 7
59314: PPUSH
59315: CALL_OW 173
// AddComExitVehicle ( driver ) ;
59319: LD_VAR 0 18
59323: PPUSH
59324: CALL_OW 181
// end ; continue ;
59328: GO 58980
// end ; if not cleaners or not tmp in cleaners then
59330: LD_VAR 0 6
59334: NOT
59335: PUSH
59336: LD_VAR 0 13
59340: PUSH
59341: LD_VAR 0 6
59345: IN
59346: NOT
59347: OR
59348: IFFALSE 59655
// begin if dep then
59350: LD_VAR 0 17
59354: IFFALSE 59490
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
59356: LD_ADDR_VAR 0 16
59360: PUSH
59361: LD_VAR 0 17
59365: PUSH
59366: LD_INT 1
59368: ARRAY
59369: PPUSH
59370: CALL_OW 250
59374: PPUSH
59375: LD_VAR 0 17
59379: PUSH
59380: LD_INT 1
59382: ARRAY
59383: PPUSH
59384: CALL_OW 254
59388: PPUSH
59389: LD_INT 5
59391: PPUSH
59392: CALL_OW 272
59396: PUSH
59397: LD_VAR 0 17
59401: PUSH
59402: LD_INT 1
59404: ARRAY
59405: PPUSH
59406: CALL_OW 251
59410: PPUSH
59411: LD_VAR 0 17
59415: PUSH
59416: LD_INT 1
59418: ARRAY
59419: PPUSH
59420: CALL_OW 254
59424: PPUSH
59425: LD_INT 5
59427: PPUSH
59428: CALL_OW 273
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
59437: LD_VAR 0 16
59441: PUSH
59442: LD_INT 1
59444: ARRAY
59445: PPUSH
59446: LD_VAR 0 16
59450: PUSH
59451: LD_INT 2
59453: ARRAY
59454: PPUSH
59455: CALL_OW 488
59459: IFFALSE 59490
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
59461: LD_VAR 0 13
59465: PPUSH
59466: LD_VAR 0 16
59470: PUSH
59471: LD_INT 1
59473: ARRAY
59474: PPUSH
59475: LD_VAR 0 16
59479: PUSH
59480: LD_INT 2
59482: ARRAY
59483: PPUSH
59484: CALL_OW 111
// continue ;
59488: GO 58980
// end ; end ; r := GetDir ( tmp ) ;
59490: LD_ADDR_VAR 0 15
59494: PUSH
59495: LD_VAR 0 13
59499: PPUSH
59500: CALL_OW 254
59504: ST_TO_ADDR
// if r = 5 then
59505: LD_VAR 0 15
59509: PUSH
59510: LD_INT 5
59512: EQUAL
59513: IFFALSE 59523
// r := 0 ;
59515: LD_ADDR_VAR 0 15
59519: PUSH
59520: LD_INT 0
59522: ST_TO_ADDR
// for j = r to 5 do
59523: LD_ADDR_VAR 0 10
59527: PUSH
59528: DOUBLE
59529: LD_VAR 0 15
59533: DEC
59534: ST_TO_ADDR
59535: LD_INT 5
59537: PUSH
59538: FOR_TO
59539: IFFALSE 59653
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
59541: LD_ADDR_VAR 0 11
59545: PUSH
59546: LD_VAR 0 13
59550: PPUSH
59551: CALL_OW 250
59555: PPUSH
59556: LD_VAR 0 10
59560: PPUSH
59561: LD_INT 2
59563: PPUSH
59564: CALL_OW 272
59568: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
59569: LD_ADDR_VAR 0 12
59573: PUSH
59574: LD_VAR 0 13
59578: PPUSH
59579: CALL_OW 251
59583: PPUSH
59584: LD_VAR 0 10
59588: PPUSH
59589: LD_INT 2
59591: PPUSH
59592: CALL_OW 273
59596: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
59597: LD_VAR 0 11
59601: PPUSH
59602: LD_VAR 0 12
59606: PPUSH
59607: CALL_OW 488
59611: PUSH
59612: LD_VAR 0 11
59616: PPUSH
59617: LD_VAR 0 12
59621: PPUSH
59622: CALL_OW 428
59626: NOT
59627: AND
59628: IFFALSE 59651
// begin ComMoveXY ( tmp , _x , _y ) ;
59630: LD_VAR 0 13
59634: PPUSH
59635: LD_VAR 0 11
59639: PPUSH
59640: LD_VAR 0 12
59644: PPUSH
59645: CALL_OW 111
// break ;
59649: GO 59653
// end ; end ;
59651: GO 59538
59653: POP
59654: POP
// end ; end ;
59655: GO 58980
59657: POP
59658: POP
// end ;
59659: LD_VAR 0 8
59663: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
59664: LD_INT 0
59666: PPUSH
59667: PPUSH
59668: PPUSH
59669: PPUSH
59670: PPUSH
59671: PPUSH
59672: PPUSH
59673: PPUSH
59674: PPUSH
59675: PPUSH
// result := false ;
59676: LD_ADDR_VAR 0 6
59680: PUSH
59681: LD_INT 0
59683: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59684: LD_VAR 0 1
59688: NOT
59689: PUSH
59690: LD_VAR 0 1
59694: PPUSH
59695: CALL_OW 266
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: IN
59710: NOT
59711: OR
59712: PUSH
59713: LD_VAR 0 2
59717: NOT
59718: OR
59719: PUSH
59720: LD_VAR 0 5
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: LD_INT 4
59739: PUSH
59740: LD_INT 5
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: IN
59751: NOT
59752: OR
59753: PUSH
59754: LD_VAR 0 3
59758: PPUSH
59759: LD_VAR 0 4
59763: PPUSH
59764: CALL_OW 488
59768: NOT
59769: OR
59770: IFFALSE 59774
// exit ;
59772: GO 60491
// pom := GetBase ( depot ) ;
59774: LD_ADDR_VAR 0 10
59778: PUSH
59779: LD_VAR 0 1
59783: PPUSH
59784: CALL_OW 274
59788: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59789: LD_ADDR_VAR 0 11
59793: PUSH
59794: LD_VAR 0 2
59798: PPUSH
59799: LD_VAR 0 1
59803: PPUSH
59804: CALL_OW 248
59808: PPUSH
59809: CALL_OW 450
59813: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59814: LD_VAR 0 10
59818: PPUSH
59819: LD_INT 1
59821: PPUSH
59822: CALL_OW 275
59826: PUSH
59827: LD_VAR 0 11
59831: PUSH
59832: LD_INT 1
59834: ARRAY
59835: GREATEREQUAL
59836: PUSH
59837: LD_VAR 0 10
59841: PPUSH
59842: LD_INT 2
59844: PPUSH
59845: CALL_OW 275
59849: PUSH
59850: LD_VAR 0 11
59854: PUSH
59855: LD_INT 2
59857: ARRAY
59858: GREATEREQUAL
59859: AND
59860: PUSH
59861: LD_VAR 0 10
59865: PPUSH
59866: LD_INT 3
59868: PPUSH
59869: CALL_OW 275
59873: PUSH
59874: LD_VAR 0 11
59878: PUSH
59879: LD_INT 3
59881: ARRAY
59882: GREATEREQUAL
59883: AND
59884: NOT
59885: IFFALSE 59889
// exit ;
59887: GO 60491
// if GetBType ( depot ) = b_depot then
59889: LD_VAR 0 1
59893: PPUSH
59894: CALL_OW 266
59898: PUSH
59899: LD_INT 0
59901: EQUAL
59902: IFFALSE 59914
// dist := 28 else
59904: LD_ADDR_VAR 0 14
59908: PUSH
59909: LD_INT 28
59911: ST_TO_ADDR
59912: GO 59922
// dist := 36 ;
59914: LD_ADDR_VAR 0 14
59918: PUSH
59919: LD_INT 36
59921: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59922: LD_VAR 0 1
59926: PPUSH
59927: LD_VAR 0 3
59931: PPUSH
59932: LD_VAR 0 4
59936: PPUSH
59937: CALL_OW 297
59941: PUSH
59942: LD_VAR 0 14
59946: GREATER
59947: IFFALSE 59951
// exit ;
59949: GO 60491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
59951: LD_ADDR_VAR 0 12
59955: PUSH
59956: LD_VAR 0 2
59960: PPUSH
59961: LD_VAR 0 3
59965: PPUSH
59966: LD_VAR 0 4
59970: PPUSH
59971: LD_VAR 0 5
59975: PPUSH
59976: LD_VAR 0 1
59980: PPUSH
59981: CALL_OW 248
59985: PPUSH
59986: LD_INT 0
59988: PPUSH
59989: CALL 60496 0 6
59993: ST_TO_ADDR
// if not hexes then
59994: LD_VAR 0 12
59998: NOT
59999: IFFALSE 60003
// exit ;
60001: GO 60491
// hex := GetHexInfo ( x , y ) ;
60003: LD_ADDR_VAR 0 15
60007: PUSH
60008: LD_VAR 0 3
60012: PPUSH
60013: LD_VAR 0 4
60017: PPUSH
60018: CALL_OW 546
60022: ST_TO_ADDR
// if hex [ 1 ] then
60023: LD_VAR 0 15
60027: PUSH
60028: LD_INT 1
60030: ARRAY
60031: IFFALSE 60035
// exit ;
60033: GO 60491
// height := hex [ 2 ] ;
60035: LD_ADDR_VAR 0 13
60039: PUSH
60040: LD_VAR 0 15
60044: PUSH
60045: LD_INT 2
60047: ARRAY
60048: ST_TO_ADDR
// for i = 1 to hexes do
60049: LD_ADDR_VAR 0 7
60053: PUSH
60054: DOUBLE
60055: LD_INT 1
60057: DEC
60058: ST_TO_ADDR
60059: LD_VAR 0 12
60063: PUSH
60064: FOR_TO
60065: IFFALSE 60395
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
60067: LD_VAR 0 12
60071: PUSH
60072: LD_VAR 0 7
60076: ARRAY
60077: PUSH
60078: LD_INT 1
60080: ARRAY
60081: PPUSH
60082: LD_VAR 0 12
60086: PUSH
60087: LD_VAR 0 7
60091: ARRAY
60092: PUSH
60093: LD_INT 2
60095: ARRAY
60096: PPUSH
60097: CALL_OW 488
60101: NOT
60102: PUSH
60103: LD_VAR 0 12
60107: PUSH
60108: LD_VAR 0 7
60112: ARRAY
60113: PUSH
60114: LD_INT 1
60116: ARRAY
60117: PPUSH
60118: LD_VAR 0 12
60122: PUSH
60123: LD_VAR 0 7
60127: ARRAY
60128: PUSH
60129: LD_INT 2
60131: ARRAY
60132: PPUSH
60133: CALL_OW 428
60137: PUSH
60138: LD_INT 0
60140: GREATER
60141: OR
60142: PUSH
60143: LD_VAR 0 12
60147: PUSH
60148: LD_VAR 0 7
60152: ARRAY
60153: PUSH
60154: LD_INT 1
60156: ARRAY
60157: PPUSH
60158: LD_VAR 0 12
60162: PUSH
60163: LD_VAR 0 7
60167: ARRAY
60168: PUSH
60169: LD_INT 2
60171: ARRAY
60172: PPUSH
60173: CALL_OW 351
60177: OR
60178: IFFALSE 60184
// exit ;
60180: POP
60181: POP
60182: GO 60491
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60184: LD_ADDR_VAR 0 8
60188: PUSH
60189: LD_VAR 0 12
60193: PUSH
60194: LD_VAR 0 7
60198: ARRAY
60199: PUSH
60200: LD_INT 1
60202: ARRAY
60203: PPUSH
60204: LD_VAR 0 12
60208: PUSH
60209: LD_VAR 0 7
60213: ARRAY
60214: PUSH
60215: LD_INT 2
60217: ARRAY
60218: PPUSH
60219: CALL_OW 546
60223: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
60224: LD_VAR 0 8
60228: PUSH
60229: LD_INT 1
60231: ARRAY
60232: PUSH
60233: LD_VAR 0 8
60237: PUSH
60238: LD_INT 2
60240: ARRAY
60241: PUSH
60242: LD_VAR 0 13
60246: PUSH
60247: LD_INT 2
60249: PLUS
60250: GREATER
60251: OR
60252: PUSH
60253: LD_VAR 0 8
60257: PUSH
60258: LD_INT 2
60260: ARRAY
60261: PUSH
60262: LD_VAR 0 13
60266: PUSH
60267: LD_INT 2
60269: MINUS
60270: LESS
60271: OR
60272: PUSH
60273: LD_VAR 0 8
60277: PUSH
60278: LD_INT 3
60280: ARRAY
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 8
60287: PUSH
60288: LD_INT 9
60290: PUSH
60291: LD_INT 10
60293: PUSH
60294: LD_INT 11
60296: PUSH
60297: LD_INT 12
60299: PUSH
60300: LD_INT 13
60302: PUSH
60303: LD_INT 16
60305: PUSH
60306: LD_INT 17
60308: PUSH
60309: LD_INT 18
60311: PUSH
60312: LD_INT 19
60314: PUSH
60315: LD_INT 20
60317: PUSH
60318: LD_INT 21
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: IN
60336: NOT
60337: OR
60338: PUSH
60339: LD_VAR 0 8
60343: PUSH
60344: LD_INT 5
60346: ARRAY
60347: NOT
60348: OR
60349: PUSH
60350: LD_VAR 0 8
60354: PUSH
60355: LD_INT 6
60357: ARRAY
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: LD_INT 7
60367: PUSH
60368: LD_INT 9
60370: PUSH
60371: LD_INT 10
60373: PUSH
60374: LD_INT 11
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: IN
60385: NOT
60386: OR
60387: IFFALSE 60393
// exit ;
60389: POP
60390: POP
60391: GO 60491
// end ;
60393: GO 60064
60395: POP
60396: POP
// side := GetSide ( depot ) ;
60397: LD_ADDR_VAR 0 9
60401: PUSH
60402: LD_VAR 0 1
60406: PPUSH
60407: CALL_OW 255
60411: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60412: LD_VAR 0 9
60416: PPUSH
60417: LD_VAR 0 3
60421: PPUSH
60422: LD_VAR 0 4
60426: PPUSH
60427: LD_INT 20
60429: PPUSH
60430: CALL 52812 0 4
60434: PUSH
60435: LD_INT 4
60437: ARRAY
60438: IFFALSE 60442
// exit ;
60440: GO 60491
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60442: LD_VAR 0 2
60446: PUSH
60447: LD_INT 29
60449: PUSH
60450: LD_INT 30
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: IN
60457: PUSH
60458: LD_VAR 0 3
60462: PPUSH
60463: LD_VAR 0 4
60467: PPUSH
60468: LD_VAR 0 9
60472: PPUSH
60473: CALL_OW 440
60477: NOT
60478: AND
60479: IFFALSE 60483
// exit ;
60481: GO 60491
// result := true ;
60483: LD_ADDR_VAR 0 6
60487: PUSH
60488: LD_INT 1
60490: ST_TO_ADDR
// end ;
60491: LD_VAR 0 6
60495: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
60496: LD_INT 0
60498: PPUSH
60499: PPUSH
60500: PPUSH
60501: PPUSH
60502: PPUSH
60503: PPUSH
60504: PPUSH
60505: PPUSH
60506: PPUSH
60507: PPUSH
60508: PPUSH
60509: PPUSH
60510: PPUSH
60511: PPUSH
60512: PPUSH
60513: PPUSH
60514: PPUSH
60515: PPUSH
60516: PPUSH
60517: PPUSH
60518: PPUSH
60519: PPUSH
60520: PPUSH
60521: PPUSH
60522: PPUSH
60523: PPUSH
60524: PPUSH
60525: PPUSH
60526: PPUSH
60527: PPUSH
60528: PPUSH
60529: PPUSH
60530: PPUSH
60531: PPUSH
60532: PPUSH
60533: PPUSH
60534: PPUSH
60535: PPUSH
60536: PPUSH
60537: PPUSH
60538: PPUSH
60539: PPUSH
60540: PPUSH
60541: PPUSH
60542: PPUSH
60543: PPUSH
60544: PPUSH
60545: PPUSH
60546: PPUSH
60547: PPUSH
60548: PPUSH
60549: PPUSH
60550: PPUSH
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
// result = [ ] ;
60556: LD_ADDR_VAR 0 7
60560: PUSH
60561: EMPTY
60562: ST_TO_ADDR
// temp_list = [ ] ;
60563: LD_ADDR_VAR 0 9
60567: PUSH
60568: EMPTY
60569: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60570: LD_VAR 0 4
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 4
60589: PUSH
60590: LD_INT 5
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: IN
60601: NOT
60602: PUSH
60603: LD_VAR 0 1
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: IN
60618: PUSH
60619: LD_VAR 0 5
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: LD_INT 3
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: IN
60638: NOT
60639: AND
60640: OR
60641: IFFALSE 60645
// exit ;
60643: GO 79036
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60645: LD_VAR 0 1
60649: PUSH
60650: LD_INT 6
60652: PUSH
60653: LD_INT 7
60655: PUSH
60656: LD_INT 8
60658: PUSH
60659: LD_INT 13
60661: PUSH
60662: LD_INT 12
60664: PUSH
60665: LD_INT 15
60667: PUSH
60668: LD_INT 11
60670: PUSH
60671: LD_INT 14
60673: PUSH
60674: LD_INT 10
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: IN
60688: IFFALSE 60698
// btype = b_lab ;
60690: LD_ADDR_VAR 0 1
60694: PUSH
60695: LD_INT 6
60697: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60698: LD_VAR 0 6
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: LIST
60716: IN
60717: NOT
60718: PUSH
60719: LD_VAR 0 1
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: LD_INT 6
60738: PUSH
60739: LD_INT 36
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: LD_INT 5
60747: PUSH
60748: LD_INT 31
60750: PUSH
60751: LD_INT 32
60753: PUSH
60754: LD_INT 33
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: IN
60770: NOT
60771: PUSH
60772: LD_VAR 0 6
60776: PUSH
60777: LD_INT 1
60779: EQUAL
60780: AND
60781: OR
60782: PUSH
60783: LD_VAR 0 1
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: IN
60798: NOT
60799: PUSH
60800: LD_VAR 0 6
60804: PUSH
60805: LD_INT 2
60807: EQUAL
60808: AND
60809: OR
60810: IFFALSE 60820
// mode = 0 ;
60812: LD_ADDR_VAR 0 6
60816: PUSH
60817: LD_INT 0
60819: ST_TO_ADDR
// case mode of 0 :
60820: LD_VAR 0 6
60824: PUSH
60825: LD_INT 0
60827: DOUBLE
60828: EQUAL
60829: IFTRUE 60833
60831: GO 72286
60833: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60834: LD_ADDR_VAR 0 11
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61027: LD_ADDR_VAR 0 12
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61223: LD_ADDR_VAR 0 13
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61422: LD_ADDR_VAR 0 14
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61618: LD_ADDR_VAR 0 15
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61811: LD_ADDR_VAR 0 16
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62004: LD_ADDR_VAR 0 17
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 2
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62234: LD_ADDR_VAR 0 18
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: LD_INT 2
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62464: LD_ADDR_VAR 0 19
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: LD_INT 2
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62694: LD_ADDR_VAR 0 20
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62924: LD_ADDR_VAR 0 21
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: NEG
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 2
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 2
63100: NEG
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63154: LD_ADDR_VAR 0 22
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: LD_INT 2
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: LD_INT 2
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63384: LD_ADDR_VAR 0 23
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: LD_INT 2
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 2
63480: NEG
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: LD_INT 2
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: NEG
63584: PUSH
63585: LD_INT 2
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: LD_INT 3
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: LD_INT 1
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63664: LD_ADDR_VAR 0 24
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 2
63840: NEG
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 2
63851: NEG
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 3
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63940: LD_ADDR_VAR 0 25
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: LD_INT 2
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 2
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: LD_INT 2
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: LD_INT 1
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 3
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: LD_INT 3
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 3
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64214: LD_ADDR_VAR 0 26
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 2
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: NEG
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 2
64401: NEG
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: LD_INT 3
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: LD_INT 3
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64490: LD_ADDR_VAR 0 27
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: LD_INT 2
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 2
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 2
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 3
64735: NEG
64736: PUSH
64737: LD_INT 2
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64770: LD_ADDR_VAR 0 28
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: NEG
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 2
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 1
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 2
64969: NEG
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 2
64981: NEG
64982: PUSH
64983: LD_INT 3
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: LD_INT 3
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: LD_INT 2
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65052: LD_ADDR_VAR 0 29
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: LD_INT 2
65148: NEG
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 1
65207: NEG
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: LD_INT 2
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 3
65296: NEG
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65331: LD_ADDR_VAR 0 30
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 2
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 2
65508: NEG
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: LD_INT 2
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: LD_INT 2
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: LD_INT 3
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: NEG
65564: PUSH
65565: LD_INT 1
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 3
65574: NEG
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65609: LD_ADDR_VAR 0 31
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 1
65678: NEG
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: LD_INT 2
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 2
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: LD_INT 2
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: NEG
65787: PUSH
65788: LD_INT 2
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: LD_INT 3
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 3
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 3
65852: NEG
65853: PUSH
65854: LD_INT 2
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65887: LD_ADDR_VAR 0 32
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: LD_INT 1
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: LD_INT 1
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: LD_INT 2
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 2
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 2
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: LD_INT 2
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: LD_INT 2
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 3
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: PUSH
66110: LD_INT 3
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66165: LD_ADDR_VAR 0 33
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: LD_INT 2
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 2
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 2
66331: NEG
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 2
66355: NEG
66356: PUSH
66357: LD_INT 3
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 2
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 3
66409: NEG
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66444: LD_ADDR_VAR 0 34
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: NEG
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 1
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: NEG
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 2
66600: NEG
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 2
66611: NEG
66612: PUSH
66613: LD_INT 1
66615: NEG
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 2
66623: NEG
66624: PUSH
66625: LD_INT 2
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: NEG
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 3
66658: PUSH
66659: LD_INT 2
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 3
66689: NEG
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66724: LD_ADDR_VAR 0 35
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: LD_INT 1
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 2
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: LD_INT 1
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66836: LD_ADDR_VAR 0 36
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: LD_INT 1
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: LD_INT 2
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66948: LD_ADDR_VAR 0 37
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: LD_INT 1
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: LD_INT 1
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: LD_INT 1
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67060: LD_ADDR_VAR 0 38
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: LD_INT 1
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 2
67151: NEG
67152: PUSH
67153: LD_INT 1
67155: NEG
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67172: LD_ADDR_VAR 0 39
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 1
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 1
67241: NEG
67242: PUSH
67243: LD_INT 1
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: LD_INT 2
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 1
67265: PUSH
67266: LD_INT 2
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67284: LD_ADDR_VAR 0 40
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 1
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 1
67342: NEG
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67396: LD_ADDR_VAR 0 41
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: LD_INT 2
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: LD_INT 1
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 2
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 1
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 2
67551: NEG
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 2
67574: NEG
67575: PUSH
67576: LD_INT 2
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 3
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 3
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 3
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 2
67659: NEG
67660: PUSH
67661: LD_INT 1
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 3
67670: NEG
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 3
67681: NEG
67682: PUSH
67683: LD_INT 1
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 3
67693: NEG
67694: PUSH
67695: LD_INT 2
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: NEG
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67746: LD_ADDR_VAR 0 42
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 1
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: NEG
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: LD_INT 1
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 2
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 2
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: LD_INT 2
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: LD_INT 2
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: NEG
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 2
67936: NEG
67937: PUSH
67938: LD_INT 3
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 3
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: LD_INT 2
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: LD_INT 3
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 1
68032: NEG
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: NEG
68044: PUSH
68045: LD_INT 2
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: LD_INT 3
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68096: LD_ADDR_VAR 0 43
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: LD_INT 1
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 1
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: NEG
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: LD_INT 1
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: NEG
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 2
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 2
68221: PUSH
68222: LD_INT 1
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: LD_INT 2
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 2
68262: NEG
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: LD_INT 1
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 1
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: LD_INT 3
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 2
68319: PUSH
68320: LD_INT 1
68322: NEG
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 3
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 3
68340: PUSH
68341: LD_INT 1
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: LD_INT 3
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: LD_INT 3
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 1
68370: NEG
68371: PUSH
68372: LD_INT 2
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 3
68392: NEG
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 3
68403: NEG
68404: PUSH
68405: LD_INT 1
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68444: LD_ADDR_VAR 0 44
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 0
68461: PUSH
68462: LD_INT 1
68464: NEG
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 1
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 1
68502: NEG
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 1
68513: NEG
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 1
68525: NEG
68526: PUSH
68527: LD_INT 2
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 2
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 2
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 2
68610: NEG
68611: PUSH
68612: LD_INT 1
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 2
68634: NEG
68635: PUSH
68636: LD_INT 3
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 3
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: LD_INT 2
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 3
68687: PUSH
68688: LD_INT 3
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 2
68697: PUSH
68698: LD_INT 3
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: LD_INT 1
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: LD_INT 0
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: NEG
68742: PUSH
68743: LD_INT 2
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68794: LD_ADDR_VAR 0 45
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: LD_INT 0
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: LD_INT 1
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 1
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: LD_INT 1
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 1
68863: NEG
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: LD_INT 2
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: LD_INT 2
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 1
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 2
68909: PUSH
68910: LD_INT 1
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: LD_INT 2
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: LD_INT 2
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 1
68949: NEG
68950: PUSH
68951: LD_INT 1
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 2
68960: NEG
68961: PUSH
68962: LD_INT 1
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 2
68972: NEG
68973: PUSH
68974: LD_INT 2
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 2
68984: NEG
68985: PUSH
68986: LD_INT 3
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: LD_INT 3
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 0
69008: PUSH
69009: LD_INT 3
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 1
69019: PUSH
69020: LD_INT 2
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: LD_INT 2
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 3
69040: PUSH
69041: LD_INT 3
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: LD_INT 3
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 1
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 0
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 1
69080: NEG
69081: PUSH
69082: LD_INT 2
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 3
69091: NEG
69092: PUSH
69093: LD_INT 2
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 3
69103: NEG
69104: PUSH
69105: LD_INT 3
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69144: LD_ADDR_VAR 0 46
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 1
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 1
69182: PUSH
69183: LD_INT 1
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: LD_INT 1
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 1
69202: NEG
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 1
69225: NEG
69226: PUSH
69227: LD_INT 2
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: LD_INT 2
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 2
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 1
69279: PUSH
69280: LD_INT 2
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 2
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 1
69299: NEG
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 2
69310: NEG
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 2
69321: NEG
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 3
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: LD_INT 3
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: LD_INT 2
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 2
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 3
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 3
69388: PUSH
69389: LD_INT 1
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 3
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: LD_INT 2
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 3
69440: NEG
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 3
69451: NEG
69452: PUSH
69453: LD_INT 1
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69492: LD_ADDR_VAR 0 47
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 0
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: LD_INT 0
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: LD_INT 1
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 2
69607: NEG
69608: PUSH
69609: LD_INT 1
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: LD_INT 2
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69643: LD_ADDR_VAR 0 48
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: LD_INT 1
69663: NEG
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 1
69681: PUSH
69682: LD_INT 1
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: NEG
69713: PUSH
69714: LD_INT 1
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: LD_INT 2
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: LD_INT 1
69750: NEG
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 2
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69790: LD_ADDR_VAR 0 49
69794: PUSH
69795: LD_INT 0
69797: PUSH
69798: LD_INT 0
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: LD_INT 1
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 1
69848: NEG
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 1
69859: NEG
69860: PUSH
69861: LD_INT 1
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 1
69871: PUSH
69872: LD_INT 1
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 2
69892: PUSH
69893: LD_INT 1
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 2
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69934: LD_ADDR_VAR 0 50
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 0
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 1
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: PUSH
69973: LD_INT 1
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 0
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 1
70003: NEG
70004: PUSH
70005: LD_INT 1
70007: NEG
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 2
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 2
70025: PUSH
70026: LD_INT 2
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: LD_INT 2
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: LD_INT 2
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: LD_INT 1
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70078: LD_ADDR_VAR 0 51
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: LD_INT 0
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: LD_INT 1
70098: NEG
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: LD_INT 1
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: LD_INT 1
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 1
70136: NEG
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 1
70147: NEG
70148: PUSH
70149: LD_INT 1
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 1
70159: PUSH
70160: LD_INT 2
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 1
70179: NEG
70180: PUSH
70181: LD_INT 1
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: LD_INT 0
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: NEG
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70225: LD_ADDR_VAR 0 52
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 1
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 1
70263: PUSH
70264: LD_INT 1
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 0
70273: PUSH
70274: LD_INT 1
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 1
70283: NEG
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 1
70294: NEG
70295: PUSH
70296: LD_INT 1
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 1
70306: NEG
70307: PUSH
70308: LD_INT 2
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 1
70318: NEG
70319: PUSH
70320: LD_INT 1
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 2
70329: NEG
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 2
70340: NEG
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 2
70352: NEG
70353: PUSH
70354: LD_INT 2
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70376: LD_ADDR_VAR 0 53
70380: PUSH
70381: LD_INT 0
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 1
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 1
70414: PUSH
70415: LD_INT 1
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 1
70434: NEG
70435: PUSH
70436: LD_INT 0
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: LD_INT 1
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: LD_INT 2
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 0
70469: PUSH
70470: LD_INT 2
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: LD_INT 1
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 2
70491: PUSH
70492: LD_INT 0
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 2
70501: PUSH
70502: LD_INT 1
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 2
70511: PUSH
70512: LD_INT 2
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 1
70521: PUSH
70522: LD_INT 2
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 0
70531: PUSH
70532: LD_INT 2
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 1
70541: NEG
70542: PUSH
70543: LD_INT 1
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 2
70552: NEG
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 2
70563: NEG
70564: PUSH
70565: LD_INT 1
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 2
70575: NEG
70576: PUSH
70577: LD_INT 2
70579: NEG
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70606: LD_ADDR_VAR 0 54
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: LD_INT 0
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 0
70623: PUSH
70624: LD_INT 1
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 1
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 1
70644: PUSH
70645: LD_INT 1
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: LD_INT 1
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 1
70664: NEG
70665: PUSH
70666: LD_INT 0
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 1
70675: NEG
70676: PUSH
70677: LD_INT 1
70679: NEG
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 1
70687: NEG
70688: PUSH
70689: LD_INT 2
70691: NEG
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 0
70699: PUSH
70700: LD_INT 2
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 1
70710: PUSH
70711: LD_INT 1
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 2
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 2
70731: PUSH
70732: LD_INT 1
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 2
70741: PUSH
70742: LD_INT 2
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 1
70751: PUSH
70752: LD_INT 2
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 0
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 1
70771: NEG
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 2
70782: NEG
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 2
70793: NEG
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 2
70805: NEG
70806: PUSH
70807: LD_INT 2
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70836: LD_ADDR_VAR 0 55
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 1
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 1
70874: PUSH
70875: LD_INT 1
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 0
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 1
70894: NEG
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 1
70905: NEG
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 1
70917: NEG
70918: PUSH
70919: LD_INT 2
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 0
70929: PUSH
70930: LD_INT 2
70932: NEG
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 1
70940: PUSH
70941: LD_INT 1
70943: NEG
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 2
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 2
70961: PUSH
70962: LD_INT 1
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 2
70971: PUSH
70972: LD_INT 2
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: LD_INT 2
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: LD_INT 2
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 2
71012: NEG
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: NEG
71024: PUSH
71025: LD_INT 1
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 2
71035: NEG
71036: PUSH
71037: LD_INT 2
71039: NEG
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71066: LD_ADDR_VAR 0 56
71070: PUSH
71071: LD_INT 0
71073: PUSH
71074: LD_INT 0
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 0
71083: PUSH
71084: LD_INT 1
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 1
71094: PUSH
71095: LD_INT 0
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 1
71104: PUSH
71105: LD_INT 1
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 0
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 1
71124: NEG
71125: PUSH
71126: LD_INT 0
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 1
71135: NEG
71136: PUSH
71137: LD_INT 1
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 1
71147: NEG
71148: PUSH
71149: LD_INT 2
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: LD_INT 2
71162: NEG
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: LD_INT 1
71173: NEG
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 2
71181: PUSH
71182: LD_INT 0
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 2
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 2
71201: PUSH
71202: LD_INT 2
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 1
71211: PUSH
71212: LD_INT 2
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 0
71221: PUSH
71222: LD_INT 2
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 1
71231: NEG
71232: PUSH
71233: LD_INT 1
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 2
71242: NEG
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 2
71253: NEG
71254: PUSH
71255: LD_INT 1
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 2
71265: NEG
71266: PUSH
71267: LD_INT 2
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71296: LD_ADDR_VAR 0 57
71300: PUSH
71301: LD_INT 0
71303: PUSH
71304: LD_INT 0
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 0
71313: PUSH
71314: LD_INT 1
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 1
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 1
71334: PUSH
71335: LD_INT 1
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 0
71344: PUSH
71345: LD_INT 1
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 1
71354: NEG
71355: PUSH
71356: LD_INT 0
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: LD_INT 1
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 1
71377: NEG
71378: PUSH
71379: LD_INT 2
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: LD_INT 2
71392: NEG
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 1
71400: PUSH
71401: LD_INT 1
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 2
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 2
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 2
71431: PUSH
71432: LD_INT 2
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: LD_INT 2
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 1
71461: NEG
71462: PUSH
71463: LD_INT 1
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 2
71472: NEG
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: NEG
71484: PUSH
71485: LD_INT 1
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 2
71495: NEG
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71526: LD_ADDR_VAR 0 58
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 0
71543: PUSH
71544: LD_INT 1
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 1
71554: PUSH
71555: LD_INT 0
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 1
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 0
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 1
71584: NEG
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: LD_INT 1
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 1
71607: NEG
71608: PUSH
71609: LD_INT 2
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: LD_INT 2
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 1
71630: PUSH
71631: LD_INT 1
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 2
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 2
71651: PUSH
71652: LD_INT 1
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 2
71661: PUSH
71662: LD_INT 2
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 1
71671: PUSH
71672: LD_INT 2
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: LD_INT 2
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 1
71691: NEG
71692: PUSH
71693: LD_INT 1
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 2
71702: NEG
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 2
71713: NEG
71714: PUSH
71715: LD_INT 1
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 2
71725: NEG
71726: PUSH
71727: LD_INT 2
71729: NEG
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71756: LD_ADDR_VAR 0 59
71760: PUSH
71761: LD_INT 0
71763: PUSH
71764: LD_INT 0
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 0
71773: PUSH
71774: LD_INT 1
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 1
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 1
71794: PUSH
71795: LD_INT 1
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 0
71804: PUSH
71805: LD_INT 1
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 1
71814: NEG
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 1
71825: NEG
71826: PUSH
71827: LD_INT 1
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71844: LD_ADDR_VAR 0 60
71848: PUSH
71849: LD_INT 0
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 0
71861: PUSH
71862: LD_INT 1
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 1
71872: PUSH
71873: LD_INT 0
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 1
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: LD_INT 1
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 1
71902: NEG
71903: PUSH
71904: LD_INT 0
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 1
71913: NEG
71914: PUSH
71915: LD_INT 1
71917: NEG
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71932: LD_ADDR_VAR 0 61
71936: PUSH
71937: LD_INT 0
71939: PUSH
71940: LD_INT 0
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: LD_INT 1
71952: NEG
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 1
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 1
71970: PUSH
71971: LD_INT 1
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 0
71980: PUSH
71981: LD_INT 1
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 1
71990: NEG
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 1
72001: NEG
72002: PUSH
72003: LD_INT 1
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72020: LD_ADDR_VAR 0 62
72024: PUSH
72025: LD_INT 0
72027: PUSH
72028: LD_INT 0
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: LD_INT 1
72040: NEG
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 1
72048: PUSH
72049: LD_INT 0
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 0
72068: PUSH
72069: LD_INT 1
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 1
72078: NEG
72079: PUSH
72080: LD_INT 0
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 1
72089: NEG
72090: PUSH
72091: LD_INT 1
72093: NEG
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72108: LD_ADDR_VAR 0 63
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: LD_INT 1
72128: NEG
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 1
72136: PUSH
72137: LD_INT 0
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 1
72146: PUSH
72147: LD_INT 1
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 0
72156: PUSH
72157: LD_INT 1
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 1
72166: NEG
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 1
72177: NEG
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72196: LD_ADDR_VAR 0 64
72200: PUSH
72201: LD_INT 0
72203: PUSH
72204: LD_INT 0
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: LD_INT 1
72216: NEG
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 1
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 1
72234: PUSH
72235: LD_INT 1
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: LD_INT 1
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 1
72254: NEG
72255: PUSH
72256: LD_INT 0
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 1
72265: NEG
72266: PUSH
72267: LD_INT 1
72269: NEG
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: ST_TO_ADDR
// end ; 1 :
72284: GO 78181
72286: LD_INT 1
72288: DOUBLE
72289: EQUAL
72290: IFTRUE 72294
72292: GO 74917
72294: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72295: LD_ADDR_VAR 0 11
72299: PUSH
72300: LD_INT 1
72302: NEG
72303: PUSH
72304: LD_INT 3
72306: NEG
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 0
72314: PUSH
72315: LD_INT 3
72317: NEG
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 1
72325: PUSH
72326: LD_INT 2
72328: NEG
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: LIST
72338: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72339: LD_ADDR_VAR 0 12
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: LD_INT 1
72349: NEG
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 3
72357: PUSH
72358: LD_INT 0
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 3
72367: PUSH
72368: LD_INT 1
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: LIST
72379: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72380: LD_ADDR_VAR 0 13
72384: PUSH
72385: LD_INT 3
72387: PUSH
72388: LD_INT 2
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 3
72397: PUSH
72398: LD_INT 3
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 2
72407: PUSH
72408: LD_INT 3
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: LIST
72419: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72420: LD_ADDR_VAR 0 14
72424: PUSH
72425: LD_INT 1
72427: PUSH
72428: LD_INT 3
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: LD_INT 3
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 1
72447: NEG
72448: PUSH
72449: LD_INT 2
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: LIST
72460: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72461: LD_ADDR_VAR 0 15
72465: PUSH
72466: LD_INT 2
72468: NEG
72469: PUSH
72470: LD_INT 1
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 3
72479: NEG
72480: PUSH
72481: LD_INT 0
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 3
72490: NEG
72491: PUSH
72492: LD_INT 1
72494: NEG
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: LIST
72504: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72505: LD_ADDR_VAR 0 16
72509: PUSH
72510: LD_INT 2
72512: NEG
72513: PUSH
72514: LD_INT 3
72516: NEG
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 3
72524: NEG
72525: PUSH
72526: LD_INT 2
72528: NEG
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 3
72536: NEG
72537: PUSH
72538: LD_INT 3
72540: NEG
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: LIST
72550: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72551: LD_ADDR_VAR 0 17
72555: PUSH
72556: LD_INT 1
72558: NEG
72559: PUSH
72560: LD_INT 3
72562: NEG
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 0
72570: PUSH
72571: LD_INT 3
72573: NEG
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 1
72581: PUSH
72582: LD_INT 2
72584: NEG
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: LIST
72594: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72595: LD_ADDR_VAR 0 18
72599: PUSH
72600: LD_INT 2
72602: PUSH
72603: LD_INT 1
72605: NEG
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 3
72613: PUSH
72614: LD_INT 0
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 3
72623: PUSH
72624: LD_INT 1
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: LIST
72635: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72636: LD_ADDR_VAR 0 19
72640: PUSH
72641: LD_INT 3
72643: PUSH
72644: LD_INT 2
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 3
72653: PUSH
72654: LD_INT 3
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 2
72663: PUSH
72664: LD_INT 3
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: LIST
72675: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72676: LD_ADDR_VAR 0 20
72680: PUSH
72681: LD_INT 1
72683: PUSH
72684: LD_INT 3
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 0
72693: PUSH
72694: LD_INT 3
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 1
72703: NEG
72704: PUSH
72705: LD_INT 2
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: LIST
72716: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72717: LD_ADDR_VAR 0 21
72721: PUSH
72722: LD_INT 2
72724: NEG
72725: PUSH
72726: LD_INT 1
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 3
72735: NEG
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 3
72746: NEG
72747: PUSH
72748: LD_INT 1
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: LIST
72760: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72761: LD_ADDR_VAR 0 22
72765: PUSH
72766: LD_INT 2
72768: NEG
72769: PUSH
72770: LD_INT 3
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 3
72780: NEG
72781: PUSH
72782: LD_INT 2
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 3
72792: NEG
72793: PUSH
72794: LD_INT 3
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: LIST
72806: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72807: LD_ADDR_VAR 0 23
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: LD_INT 3
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 1
72825: NEG
72826: PUSH
72827: LD_INT 4
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 1
72837: PUSH
72838: LD_INT 3
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72851: LD_ADDR_VAR 0 24
72855: PUSH
72856: LD_INT 3
72858: PUSH
72859: LD_INT 0
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 3
72868: PUSH
72869: LD_INT 1
72871: NEG
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 4
72879: PUSH
72880: LD_INT 1
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: LIST
72891: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72892: LD_ADDR_VAR 0 25
72896: PUSH
72897: LD_INT 3
72899: PUSH
72900: LD_INT 3
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 4
72909: PUSH
72910: LD_INT 3
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 3
72919: PUSH
72920: LD_INT 4
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: LIST
72931: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72932: LD_ADDR_VAR 0 26
72936: PUSH
72937: LD_INT 0
72939: PUSH
72940: LD_INT 3
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 1
72949: PUSH
72950: LD_INT 4
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 1
72959: NEG
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: LIST
72972: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72973: LD_ADDR_VAR 0 27
72977: PUSH
72978: LD_INT 3
72980: NEG
72981: PUSH
72982: LD_INT 0
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 3
72991: NEG
72992: PUSH
72993: LD_INT 1
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 4
73002: NEG
73003: PUSH
73004: LD_INT 1
73006: NEG
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: LIST
73016: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
73017: LD_ADDR_VAR 0 28
73021: PUSH
73022: LD_INT 3
73024: NEG
73025: PUSH
73026: LD_INT 3
73028: NEG
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: LD_INT 3
73036: NEG
73037: PUSH
73038: LD_INT 4
73040: NEG
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 4
73048: NEG
73049: PUSH
73050: LD_INT 3
73052: NEG
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: LIST
73062: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
73063: LD_ADDR_VAR 0 29
73067: PUSH
73068: LD_INT 1
73070: NEG
73071: PUSH
73072: LD_INT 3
73074: NEG
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 0
73082: PUSH
73083: LD_INT 3
73085: NEG
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 1
73093: PUSH
73094: LD_INT 2
73096: NEG
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 1
73104: NEG
73105: PUSH
73106: LD_INT 4
73108: NEG
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 0
73116: PUSH
73117: LD_INT 4
73119: NEG
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 1
73127: PUSH
73128: LD_INT 3
73130: NEG
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: LD_INT 1
73138: NEG
73139: PUSH
73140: LD_INT 5
73142: NEG
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 0
73150: PUSH
73151: LD_INT 5
73153: NEG
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 1
73161: PUSH
73162: LD_INT 4
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 1
73172: NEG
73173: PUSH
73174: LD_INT 6
73176: NEG
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 0
73184: PUSH
73185: LD_INT 6
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 1
73195: PUSH
73196: LD_INT 5
73198: NEG
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
73218: LD_ADDR_VAR 0 30
73222: PUSH
73223: LD_INT 2
73225: PUSH
73226: LD_INT 1
73228: NEG
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 3
73236: PUSH
73237: LD_INT 0
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 3
73246: PUSH
73247: LD_INT 1
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: LD_INT 3
73256: PUSH
73257: LD_INT 1
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 4
73267: PUSH
73268: LD_INT 0
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: LD_INT 4
73277: PUSH
73278: LD_INT 1
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: LD_INT 4
73287: PUSH
73288: LD_INT 1
73290: NEG
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 5
73298: PUSH
73299: LD_INT 0
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 5
73308: PUSH
73309: LD_INT 1
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 5
73318: PUSH
73319: LD_INT 1
73321: NEG
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 6
73329: PUSH
73330: LD_INT 0
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 6
73339: PUSH
73340: LD_INT 1
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73361: LD_ADDR_VAR 0 31
73365: PUSH
73366: LD_INT 3
73368: PUSH
73369: LD_INT 2
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 3
73378: PUSH
73379: LD_INT 3
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 2
73388: PUSH
73389: LD_INT 3
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 4
73398: PUSH
73399: LD_INT 3
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 4
73408: PUSH
73409: LD_INT 4
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 3
73418: PUSH
73419: LD_INT 4
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 5
73428: PUSH
73429: LD_INT 4
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 5
73438: PUSH
73439: LD_INT 5
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 4
73448: PUSH
73449: LD_INT 5
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 6
73458: PUSH
73459: LD_INT 5
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 6
73468: PUSH
73469: LD_INT 6
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 5
73478: PUSH
73479: LD_INT 6
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73500: LD_ADDR_VAR 0 32
73504: PUSH
73505: LD_INT 1
73507: PUSH
73508: LD_INT 3
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 0
73517: PUSH
73518: LD_INT 3
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 1
73527: NEG
73528: PUSH
73529: LD_INT 2
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 1
73538: PUSH
73539: LD_INT 4
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 0
73548: PUSH
73549: LD_INT 4
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 1
73558: NEG
73559: PUSH
73560: LD_INT 3
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 1
73569: PUSH
73570: LD_INT 5
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 0
73579: PUSH
73580: LD_INT 5
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: PUSH
73591: LD_INT 4
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: PUSH
73601: LD_INT 6
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 0
73610: PUSH
73611: LD_INT 6
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: LD_INT 1
73620: NEG
73621: PUSH
73622: LD_INT 5
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73643: LD_ADDR_VAR 0 33
73647: PUSH
73648: LD_INT 2
73650: NEG
73651: PUSH
73652: LD_INT 1
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 3
73661: NEG
73662: PUSH
73663: LD_INT 0
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 3
73672: NEG
73673: PUSH
73674: LD_INT 1
73676: NEG
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 3
73684: NEG
73685: PUSH
73686: LD_INT 1
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 4
73695: NEG
73696: PUSH
73697: LD_INT 0
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 4
73706: NEG
73707: PUSH
73708: LD_INT 1
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 4
73718: NEG
73719: PUSH
73720: LD_INT 1
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 5
73729: NEG
73730: PUSH
73731: LD_INT 0
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 5
73740: NEG
73741: PUSH
73742: LD_INT 1
73744: NEG
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 5
73752: NEG
73753: PUSH
73754: LD_INT 1
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 6
73763: NEG
73764: PUSH
73765: LD_INT 0
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 6
73774: NEG
73775: PUSH
73776: LD_INT 1
73778: NEG
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73798: LD_ADDR_VAR 0 34
73802: PUSH
73803: LD_INT 2
73805: NEG
73806: PUSH
73807: LD_INT 3
73809: NEG
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: LD_INT 3
73817: NEG
73818: PUSH
73819: LD_INT 2
73821: NEG
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 3
73829: NEG
73830: PUSH
73831: LD_INT 3
73833: NEG
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 3
73841: NEG
73842: PUSH
73843: LD_INT 4
73845: NEG
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: LD_INT 4
73853: NEG
73854: PUSH
73855: LD_INT 3
73857: NEG
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: PUSH
73863: LD_INT 4
73865: NEG
73866: PUSH
73867: LD_INT 4
73869: NEG
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 4
73877: NEG
73878: PUSH
73879: LD_INT 5
73881: NEG
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: PUSH
73887: LD_INT 5
73889: NEG
73890: PUSH
73891: LD_INT 4
73893: NEG
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 5
73901: NEG
73902: PUSH
73903: LD_INT 5
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 5
73913: NEG
73914: PUSH
73915: LD_INT 6
73917: NEG
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 6
73925: NEG
73926: PUSH
73927: LD_INT 5
73929: NEG
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: LD_INT 6
73937: NEG
73938: PUSH
73939: LD_INT 6
73941: NEG
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73961: LD_ADDR_VAR 0 41
73965: PUSH
73966: LD_INT 0
73968: PUSH
73969: LD_INT 2
73971: NEG
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 1
73979: NEG
73980: PUSH
73981: LD_INT 3
73983: NEG
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 1
73991: PUSH
73992: LD_INT 2
73994: NEG
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: LIST
74004: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
74005: LD_ADDR_VAR 0 42
74009: PUSH
74010: LD_INT 2
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 2
74022: PUSH
74023: LD_INT 1
74025: NEG
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 3
74033: PUSH
74034: LD_INT 1
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: LIST
74045: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
74046: LD_ADDR_VAR 0 43
74050: PUSH
74051: LD_INT 2
74053: PUSH
74054: LD_INT 2
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 3
74063: PUSH
74064: LD_INT 2
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: LD_INT 2
74073: PUSH
74074: LD_INT 3
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: LIST
74085: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
74086: LD_ADDR_VAR 0 44
74090: PUSH
74091: LD_INT 0
74093: PUSH
74094: LD_INT 2
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: LD_INT 1
74103: PUSH
74104: LD_INT 3
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: LD_INT 1
74113: NEG
74114: PUSH
74115: LD_INT 2
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: LIST
74126: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74127: LD_ADDR_VAR 0 45
74131: PUSH
74132: LD_INT 2
74134: NEG
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 2
74145: NEG
74146: PUSH
74147: LD_INT 1
74149: PUSH
74150: EMPTY
74151: LIST
74152: LIST
74153: PUSH
74154: LD_INT 3
74156: NEG
74157: PUSH
74158: LD_INT 1
74160: NEG
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: LIST
74170: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
74171: LD_ADDR_VAR 0 46
74175: PUSH
74176: LD_INT 2
74178: NEG
74179: PUSH
74180: LD_INT 2
74182: NEG
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 2
74190: NEG
74191: PUSH
74192: LD_INT 3
74194: NEG
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: PUSH
74200: LD_INT 3
74202: NEG
74203: PUSH
74204: LD_INT 2
74206: NEG
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: LIST
74216: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
74217: LD_ADDR_VAR 0 47
74221: PUSH
74222: LD_INT 2
74224: NEG
74225: PUSH
74226: LD_INT 3
74228: NEG
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PUSH
74234: LD_INT 1
74236: NEG
74237: PUSH
74238: LD_INT 3
74240: NEG
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
74250: LD_ADDR_VAR 0 48
74254: PUSH
74255: LD_INT 1
74257: PUSH
74258: LD_INT 2
74260: NEG
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 2
74268: PUSH
74269: LD_INT 1
74271: NEG
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
74281: LD_ADDR_VAR 0 49
74285: PUSH
74286: LD_INT 3
74288: PUSH
74289: LD_INT 1
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 3
74298: PUSH
74299: LD_INT 2
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74310: LD_ADDR_VAR 0 50
74314: PUSH
74315: LD_INT 2
74317: PUSH
74318: LD_INT 3
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 1
74327: PUSH
74328: LD_INT 3
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74339: LD_ADDR_VAR 0 51
74343: PUSH
74344: LD_INT 1
74346: NEG
74347: PUSH
74348: LD_INT 2
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 2
74357: NEG
74358: PUSH
74359: LD_INT 1
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74370: LD_ADDR_VAR 0 52
74374: PUSH
74375: LD_INT 3
74377: NEG
74378: PUSH
74379: LD_INT 1
74381: NEG
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 3
74389: NEG
74390: PUSH
74391: LD_INT 2
74393: NEG
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74403: LD_ADDR_VAR 0 53
74407: PUSH
74408: LD_INT 1
74410: NEG
74411: PUSH
74412: LD_INT 3
74414: NEG
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 0
74422: PUSH
74423: LD_INT 3
74425: NEG
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 1
74433: PUSH
74434: LD_INT 2
74436: NEG
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: LIST
74446: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74447: LD_ADDR_VAR 0 54
74451: PUSH
74452: LD_INT 2
74454: PUSH
74455: LD_INT 1
74457: NEG
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PUSH
74463: LD_INT 3
74465: PUSH
74466: LD_INT 0
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 3
74475: PUSH
74476: LD_INT 1
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: LIST
74487: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74488: LD_ADDR_VAR 0 55
74492: PUSH
74493: LD_INT 3
74495: PUSH
74496: LD_INT 2
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 3
74505: PUSH
74506: LD_INT 3
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 2
74515: PUSH
74516: LD_INT 3
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: LIST
74527: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74528: LD_ADDR_VAR 0 56
74532: PUSH
74533: LD_INT 1
74535: PUSH
74536: LD_INT 3
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PUSH
74543: LD_INT 0
74545: PUSH
74546: LD_INT 3
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 1
74555: NEG
74556: PUSH
74557: LD_INT 2
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74569: LD_ADDR_VAR 0 57
74573: PUSH
74574: LD_INT 2
74576: NEG
74577: PUSH
74578: LD_INT 1
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 3
74587: NEG
74588: PUSH
74589: LD_INT 0
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: LD_INT 3
74598: NEG
74599: PUSH
74600: LD_INT 1
74602: NEG
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: LIST
74612: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74613: LD_ADDR_VAR 0 58
74617: PUSH
74618: LD_INT 2
74620: NEG
74621: PUSH
74622: LD_INT 3
74624: NEG
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 3
74632: NEG
74633: PUSH
74634: LD_INT 2
74636: NEG
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 3
74644: NEG
74645: PUSH
74646: LD_INT 3
74648: NEG
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: LIST
74658: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74659: LD_ADDR_VAR 0 59
74663: PUSH
74664: LD_INT 1
74666: NEG
74667: PUSH
74668: LD_INT 2
74670: NEG
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 0
74678: PUSH
74679: LD_INT 2
74681: NEG
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 1
74689: PUSH
74690: LD_INT 1
74692: NEG
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74703: LD_ADDR_VAR 0 60
74707: PUSH
74708: LD_INT 1
74710: PUSH
74711: LD_INT 1
74713: NEG
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 2
74721: PUSH
74722: LD_INT 0
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PUSH
74729: LD_INT 2
74731: PUSH
74732: LD_INT 1
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: LIST
74743: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74744: LD_ADDR_VAR 0 61
74748: PUSH
74749: LD_INT 2
74751: PUSH
74752: LD_INT 1
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: LD_INT 2
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 1
74771: PUSH
74772: LD_INT 2
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: LIST
74783: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74784: LD_ADDR_VAR 0 62
74788: PUSH
74789: LD_INT 1
74791: PUSH
74792: LD_INT 2
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 0
74801: PUSH
74802: LD_INT 2
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 1
74811: NEG
74812: PUSH
74813: LD_INT 1
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: LIST
74824: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74825: LD_ADDR_VAR 0 63
74829: PUSH
74830: LD_INT 1
74832: NEG
74833: PUSH
74834: LD_INT 1
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: PUSH
74841: LD_INT 2
74843: NEG
74844: PUSH
74845: LD_INT 0
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 2
74854: NEG
74855: PUSH
74856: LD_INT 1
74858: NEG
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: LIST
74868: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74869: LD_ADDR_VAR 0 64
74873: PUSH
74874: LD_INT 1
74876: NEG
74877: PUSH
74878: LD_INT 2
74880: NEG
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 2
74888: NEG
74889: PUSH
74890: LD_INT 1
74892: NEG
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 2
74900: NEG
74901: PUSH
74902: LD_INT 2
74904: NEG
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: LIST
74914: ST_TO_ADDR
// end ; 2 :
74915: GO 78181
74917: LD_INT 2
74919: DOUBLE
74920: EQUAL
74921: IFTRUE 74925
74923: GO 78180
74925: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74926: LD_ADDR_VAR 0 29
74930: PUSH
74931: LD_INT 4
74933: PUSH
74934: LD_INT 0
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: PUSH
74941: LD_INT 4
74943: PUSH
74944: LD_INT 1
74946: NEG
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 5
74954: PUSH
74955: LD_INT 0
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 5
74964: PUSH
74965: LD_INT 1
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PUSH
74972: LD_INT 4
74974: PUSH
74975: LD_INT 1
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PUSH
74982: LD_INT 3
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 3
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_INT 3
75005: PUSH
75006: LD_INT 2
75008: NEG
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 5
75016: PUSH
75017: LD_INT 2
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PUSH
75024: LD_INT 3
75026: PUSH
75027: LD_INT 3
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PUSH
75034: LD_INT 3
75036: PUSH
75037: LD_INT 2
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: PUSH
75044: LD_INT 4
75046: PUSH
75047: LD_INT 3
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: PUSH
75054: LD_INT 4
75056: PUSH
75057: LD_INT 4
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: PUSH
75064: LD_INT 3
75066: PUSH
75067: LD_INT 4
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: LD_INT 3
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: PUSH
75084: LD_INT 2
75086: PUSH
75087: LD_INT 2
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 4
75096: PUSH
75097: LD_INT 2
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: LD_INT 2
75106: PUSH
75107: LD_INT 4
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 0
75116: PUSH
75117: LD_INT 4
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 0
75126: PUSH
75127: LD_INT 3
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 1
75136: PUSH
75137: LD_INT 4
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 1
75146: PUSH
75147: LD_INT 5
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 0
75156: PUSH
75157: LD_INT 5
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 1
75166: NEG
75167: PUSH
75168: LD_INT 4
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 1
75177: NEG
75178: PUSH
75179: LD_INT 3
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PUSH
75186: LD_INT 2
75188: PUSH
75189: LD_INT 5
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 2
75198: NEG
75199: PUSH
75200: LD_INT 3
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PUSH
75207: LD_INT 3
75209: NEG
75210: PUSH
75211: LD_INT 0
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: LD_INT 3
75220: NEG
75221: PUSH
75222: LD_INT 1
75224: NEG
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 2
75232: NEG
75233: PUSH
75234: LD_INT 0
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 2
75243: NEG
75244: PUSH
75245: LD_INT 1
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PUSH
75252: LD_INT 3
75254: NEG
75255: PUSH
75256: LD_INT 1
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 4
75265: NEG
75266: PUSH
75267: LD_INT 0
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: LD_INT 4
75276: NEG
75277: PUSH
75278: LD_INT 1
75280: NEG
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 4
75288: NEG
75289: PUSH
75290: LD_INT 2
75292: NEG
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 2
75300: NEG
75301: PUSH
75302: LD_INT 2
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 4
75311: NEG
75312: PUSH
75313: LD_INT 4
75315: NEG
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: PUSH
75321: LD_INT 4
75323: NEG
75324: PUSH
75325: LD_INT 5
75327: NEG
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: LD_INT 3
75335: NEG
75336: PUSH
75337: LD_INT 4
75339: NEG
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: LD_INT 3
75347: NEG
75348: PUSH
75349: LD_INT 3
75351: NEG
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: LD_INT 4
75359: NEG
75360: PUSH
75361: LD_INT 3
75363: NEG
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 5
75371: NEG
75372: PUSH
75373: LD_INT 4
75375: NEG
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: LD_INT 5
75383: NEG
75384: PUSH
75385: LD_INT 5
75387: NEG
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PUSH
75393: LD_INT 3
75395: NEG
75396: PUSH
75397: LD_INT 5
75399: NEG
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: LD_INT 5
75407: NEG
75408: PUSH
75409: LD_INT 3
75411: NEG
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75464: LD_ADDR_VAR 0 30
75468: PUSH
75469: LD_INT 4
75471: PUSH
75472: LD_INT 4
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: PUSH
75479: LD_INT 4
75481: PUSH
75482: LD_INT 3
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 5
75491: PUSH
75492: LD_INT 4
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: LD_INT 5
75501: PUSH
75502: LD_INT 5
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PUSH
75509: LD_INT 4
75511: PUSH
75512: LD_INT 5
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 3
75521: PUSH
75522: LD_INT 4
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 3
75531: PUSH
75532: LD_INT 3
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: LD_INT 5
75541: PUSH
75542: LD_INT 3
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 3
75551: PUSH
75552: LD_INT 5
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: PUSH
75559: LD_INT 0
75561: PUSH
75562: LD_INT 3
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 0
75571: PUSH
75572: LD_INT 2
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 1
75581: PUSH
75582: LD_INT 3
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: LD_INT 1
75591: PUSH
75592: LD_INT 4
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 0
75601: PUSH
75602: LD_INT 4
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 1
75611: NEG
75612: PUSH
75613: LD_INT 3
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 1
75622: NEG
75623: PUSH
75624: LD_INT 2
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: LD_INT 2
75633: PUSH
75634: LD_INT 4
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: PUSH
75641: LD_INT 2
75643: NEG
75644: PUSH
75645: LD_INT 2
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: LD_INT 4
75654: NEG
75655: PUSH
75656: LD_INT 0
75658: PUSH
75659: EMPTY
75660: LIST
75661: LIST
75662: PUSH
75663: LD_INT 4
75665: NEG
75666: PUSH
75667: LD_INT 1
75669: NEG
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: LD_INT 3
75677: NEG
75678: PUSH
75679: LD_INT 0
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: LD_INT 3
75688: NEG
75689: PUSH
75690: LD_INT 1
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: PUSH
75697: LD_INT 4
75699: NEG
75700: PUSH
75701: LD_INT 1
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 5
75710: NEG
75711: PUSH
75712: LD_INT 0
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 5
75721: NEG
75722: PUSH
75723: LD_INT 1
75725: NEG
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: LD_INT 5
75733: NEG
75734: PUSH
75735: LD_INT 2
75737: NEG
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PUSH
75743: LD_INT 3
75745: NEG
75746: PUSH
75747: LD_INT 2
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PUSH
75754: LD_INT 3
75756: NEG
75757: PUSH
75758: LD_INT 3
75760: NEG
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: LD_INT 3
75768: NEG
75769: PUSH
75770: LD_INT 4
75772: NEG
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 2
75780: NEG
75781: PUSH
75782: LD_INT 3
75784: NEG
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: LD_INT 2
75792: NEG
75793: PUSH
75794: LD_INT 2
75796: NEG
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: LD_INT 3
75804: NEG
75805: PUSH
75806: LD_INT 2
75808: NEG
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 4
75816: NEG
75817: PUSH
75818: LD_INT 3
75820: NEG
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 4
75828: NEG
75829: PUSH
75830: LD_INT 4
75832: NEG
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 2
75840: NEG
75841: PUSH
75842: LD_INT 4
75844: NEG
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: LD_INT 4
75852: NEG
75853: PUSH
75854: LD_INT 2
75856: NEG
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 0
75864: PUSH
75865: LD_INT 4
75867: NEG
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PUSH
75873: LD_INT 0
75875: PUSH
75876: LD_INT 5
75878: NEG
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PUSH
75884: LD_INT 1
75886: PUSH
75887: LD_INT 4
75889: NEG
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 1
75897: PUSH
75898: LD_INT 3
75900: NEG
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: PUSH
75906: LD_INT 0
75908: PUSH
75909: LD_INT 3
75911: NEG
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: PUSH
75917: LD_INT 1
75919: NEG
75920: PUSH
75921: LD_INT 4
75923: NEG
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_INT 1
75931: NEG
75932: PUSH
75933: LD_INT 5
75935: NEG
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 2
75943: PUSH
75944: LD_INT 3
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 2
75954: NEG
75955: PUSH
75956: LD_INT 5
75958: NEG
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
76011: LD_ADDR_VAR 0 31
76015: PUSH
76016: LD_INT 0
76018: PUSH
76019: LD_INT 4
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 0
76028: PUSH
76029: LD_INT 3
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 1
76038: PUSH
76039: LD_INT 4
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 1
76048: PUSH
76049: LD_INT 5
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: LD_INT 5
76061: PUSH
76062: EMPTY
76063: LIST
76064: LIST
76065: PUSH
76066: LD_INT 1
76068: NEG
76069: PUSH
76070: LD_INT 4
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: PUSH
76077: LD_INT 1
76079: NEG
76080: PUSH
76081: LD_INT 3
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: PUSH
76088: LD_INT 2
76090: PUSH
76091: LD_INT 5
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: LD_INT 2
76100: NEG
76101: PUSH
76102: LD_INT 3
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 3
76111: NEG
76112: PUSH
76113: LD_INT 0
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PUSH
76120: LD_INT 3
76122: NEG
76123: PUSH
76124: LD_INT 1
76126: NEG
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_INT 2
76134: NEG
76135: PUSH
76136: LD_INT 0
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: PUSH
76143: LD_INT 2
76145: NEG
76146: PUSH
76147: LD_INT 1
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 3
76156: NEG
76157: PUSH
76158: LD_INT 1
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: PUSH
76165: LD_INT 4
76167: NEG
76168: PUSH
76169: LD_INT 0
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PUSH
76176: LD_INT 4
76178: NEG
76179: PUSH
76180: LD_INT 1
76182: NEG
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 4
76190: NEG
76191: PUSH
76192: LD_INT 2
76194: NEG
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_INT 2
76202: NEG
76203: PUSH
76204: LD_INT 2
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: LD_INT 4
76213: NEG
76214: PUSH
76215: LD_INT 4
76217: NEG
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: LD_INT 4
76225: NEG
76226: PUSH
76227: LD_INT 5
76229: NEG
76230: PUSH
76231: EMPTY
76232: LIST
76233: LIST
76234: PUSH
76235: LD_INT 3
76237: NEG
76238: PUSH
76239: LD_INT 4
76241: NEG
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: LD_INT 3
76249: NEG
76250: PUSH
76251: LD_INT 3
76253: NEG
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PUSH
76259: LD_INT 4
76261: NEG
76262: PUSH
76263: LD_INT 3
76265: NEG
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: LD_INT 5
76273: NEG
76274: PUSH
76275: LD_INT 4
76277: NEG
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: LD_INT 5
76285: NEG
76286: PUSH
76287: LD_INT 5
76289: NEG
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PUSH
76295: LD_INT 3
76297: NEG
76298: PUSH
76299: LD_INT 5
76301: NEG
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 5
76309: NEG
76310: PUSH
76311: LD_INT 3
76313: NEG
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 0
76321: PUSH
76322: LD_INT 3
76324: NEG
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 0
76332: PUSH
76333: LD_INT 4
76335: NEG
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 1
76343: PUSH
76344: LD_INT 3
76346: NEG
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: LD_INT 1
76354: PUSH
76355: LD_INT 2
76357: NEG
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 0
76365: PUSH
76366: LD_INT 2
76368: NEG
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: LD_INT 1
76376: NEG
76377: PUSH
76378: LD_INT 3
76380: NEG
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: PUSH
76386: LD_INT 1
76388: NEG
76389: PUSH
76390: LD_INT 4
76392: NEG
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: LD_INT 2
76400: PUSH
76401: LD_INT 2
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 2
76411: NEG
76412: PUSH
76413: LD_INT 4
76415: NEG
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 4
76423: PUSH
76424: LD_INT 0
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 4
76433: PUSH
76434: LD_INT 1
76436: NEG
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: LD_INT 5
76444: PUSH
76445: LD_INT 0
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 5
76454: PUSH
76455: LD_INT 1
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: PUSH
76462: LD_INT 4
76464: PUSH
76465: LD_INT 1
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 3
76474: PUSH
76475: LD_INT 0
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 3
76484: PUSH
76485: LD_INT 1
76487: NEG
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 3
76495: PUSH
76496: LD_INT 2
76498: NEG
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 5
76506: PUSH
76507: LD_INT 2
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: LIST
76554: LIST
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76561: LD_ADDR_VAR 0 32
76565: PUSH
76566: LD_INT 4
76568: NEG
76569: PUSH
76570: LD_INT 0
76572: PUSH
76573: EMPTY
76574: LIST
76575: LIST
76576: PUSH
76577: LD_INT 4
76579: NEG
76580: PUSH
76581: LD_INT 1
76583: NEG
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: PUSH
76589: LD_INT 3
76591: NEG
76592: PUSH
76593: LD_INT 0
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: PUSH
76600: LD_INT 3
76602: NEG
76603: PUSH
76604: LD_INT 1
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PUSH
76611: LD_INT 4
76613: NEG
76614: PUSH
76615: LD_INT 1
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: PUSH
76622: LD_INT 5
76624: NEG
76625: PUSH
76626: LD_INT 0
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 5
76635: NEG
76636: PUSH
76637: LD_INT 1
76639: NEG
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: LD_INT 5
76647: NEG
76648: PUSH
76649: LD_INT 2
76651: NEG
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 3
76659: NEG
76660: PUSH
76661: LD_INT 2
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PUSH
76668: LD_INT 3
76670: NEG
76671: PUSH
76672: LD_INT 3
76674: NEG
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PUSH
76680: LD_INT 3
76682: NEG
76683: PUSH
76684: LD_INT 4
76686: NEG
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 2
76694: NEG
76695: PUSH
76696: LD_INT 3
76698: NEG
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PUSH
76704: LD_INT 2
76706: NEG
76707: PUSH
76708: LD_INT 2
76710: NEG
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 3
76718: NEG
76719: PUSH
76720: LD_INT 2
76722: NEG
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: PUSH
76728: LD_INT 4
76730: NEG
76731: PUSH
76732: LD_INT 3
76734: NEG
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PUSH
76740: LD_INT 4
76742: NEG
76743: PUSH
76744: LD_INT 4
76746: NEG
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PUSH
76752: LD_INT 2
76754: NEG
76755: PUSH
76756: LD_INT 4
76758: NEG
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: PUSH
76764: LD_INT 4
76766: NEG
76767: PUSH
76768: LD_INT 2
76770: NEG
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 0
76778: PUSH
76779: LD_INT 4
76781: NEG
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 0
76789: PUSH
76790: LD_INT 5
76792: NEG
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: PUSH
76798: LD_INT 1
76800: PUSH
76801: LD_INT 4
76803: NEG
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 1
76811: PUSH
76812: LD_INT 3
76814: NEG
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PUSH
76820: LD_INT 0
76822: PUSH
76823: LD_INT 3
76825: NEG
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: PUSH
76831: LD_INT 1
76833: NEG
76834: PUSH
76835: LD_INT 4
76837: NEG
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 1
76845: NEG
76846: PUSH
76847: LD_INT 5
76849: NEG
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 2
76857: PUSH
76858: LD_INT 3
76860: NEG
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 2
76868: NEG
76869: PUSH
76870: LD_INT 5
76872: NEG
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 3
76880: PUSH
76881: LD_INT 0
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 3
76890: PUSH
76891: LD_INT 1
76893: NEG
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: PUSH
76899: LD_INT 4
76901: PUSH
76902: LD_INT 0
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PUSH
76909: LD_INT 4
76911: PUSH
76912: LD_INT 1
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: PUSH
76919: LD_INT 3
76921: PUSH
76922: LD_INT 1
76924: PUSH
76925: EMPTY
76926: LIST
76927: LIST
76928: PUSH
76929: LD_INT 2
76931: PUSH
76932: LD_INT 0
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: PUSH
76939: LD_INT 2
76941: PUSH
76942: LD_INT 1
76944: NEG
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: LD_INT 2
76952: PUSH
76953: LD_INT 2
76955: NEG
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: PUSH
76961: LD_INT 4
76963: PUSH
76964: LD_INT 2
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 4
76973: PUSH
76974: LD_INT 4
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: LD_INT 4
76983: PUSH
76984: LD_INT 3
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 5
76993: PUSH
76994: LD_INT 4
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PUSH
77001: LD_INT 5
77003: PUSH
77004: LD_INT 5
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: PUSH
77011: LD_INT 4
77013: PUSH
77014: LD_INT 5
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 3
77023: PUSH
77024: LD_INT 4
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: LD_INT 3
77033: PUSH
77034: LD_INT 3
77036: PUSH
77037: EMPTY
77038: LIST
77039: LIST
77040: PUSH
77041: LD_INT 5
77043: PUSH
77044: LD_INT 3
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: PUSH
77051: LD_INT 3
77053: PUSH
77054: LD_INT 5
77056: PUSH
77057: EMPTY
77058: LIST
77059: LIST
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: LIST
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
77108: LD_ADDR_VAR 0 33
77112: PUSH
77113: LD_INT 4
77115: NEG
77116: PUSH
77117: LD_INT 4
77119: NEG
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PUSH
77125: LD_INT 4
77127: NEG
77128: PUSH
77129: LD_INT 5
77131: NEG
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: PUSH
77137: LD_INT 3
77139: NEG
77140: PUSH
77141: LD_INT 4
77143: NEG
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 3
77151: NEG
77152: PUSH
77153: LD_INT 3
77155: NEG
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 4
77163: NEG
77164: PUSH
77165: LD_INT 3
77167: NEG
77168: PUSH
77169: EMPTY
77170: LIST
77171: LIST
77172: PUSH
77173: LD_INT 5
77175: NEG
77176: PUSH
77177: LD_INT 4
77179: NEG
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 5
77187: NEG
77188: PUSH
77189: LD_INT 5
77191: NEG
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: PUSH
77197: LD_INT 3
77199: NEG
77200: PUSH
77201: LD_INT 5
77203: NEG
77204: PUSH
77205: EMPTY
77206: LIST
77207: LIST
77208: PUSH
77209: LD_INT 5
77211: NEG
77212: PUSH
77213: LD_INT 3
77215: NEG
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: PUSH
77221: LD_INT 0
77223: PUSH
77224: LD_INT 3
77226: NEG
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: PUSH
77232: LD_INT 0
77234: PUSH
77235: LD_INT 4
77237: NEG
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: LD_INT 1
77245: PUSH
77246: LD_INT 3
77248: NEG
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 1
77256: PUSH
77257: LD_INT 2
77259: NEG
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PUSH
77265: LD_INT 0
77267: PUSH
77268: LD_INT 2
77270: NEG
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: PUSH
77276: LD_INT 1
77278: NEG
77279: PUSH
77280: LD_INT 3
77282: NEG
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: PUSH
77288: LD_INT 1
77290: NEG
77291: PUSH
77292: LD_INT 4
77294: NEG
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: PUSH
77300: LD_INT 2
77302: PUSH
77303: LD_INT 2
77305: NEG
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PUSH
77311: LD_INT 2
77313: NEG
77314: PUSH
77315: LD_INT 4
77317: NEG
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: LD_INT 4
77325: PUSH
77326: LD_INT 0
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: LD_INT 4
77335: PUSH
77336: LD_INT 1
77338: NEG
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 5
77346: PUSH
77347: LD_INT 0
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 5
77356: PUSH
77357: LD_INT 1
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: PUSH
77364: LD_INT 4
77366: PUSH
77367: LD_INT 1
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: LD_INT 3
77376: PUSH
77377: LD_INT 0
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PUSH
77384: LD_INT 3
77386: PUSH
77387: LD_INT 1
77389: NEG
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PUSH
77395: LD_INT 3
77397: PUSH
77398: LD_INT 2
77400: NEG
77401: PUSH
77402: EMPTY
77403: LIST
77404: LIST
77405: PUSH
77406: LD_INT 5
77408: PUSH
77409: LD_INT 2
77411: PUSH
77412: EMPTY
77413: LIST
77414: LIST
77415: PUSH
77416: LD_INT 3
77418: PUSH
77419: LD_INT 3
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: LD_INT 3
77428: PUSH
77429: LD_INT 2
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: PUSH
77436: LD_INT 4
77438: PUSH
77439: LD_INT 3
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: LD_INT 4
77448: PUSH
77449: LD_INT 4
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PUSH
77456: LD_INT 3
77458: PUSH
77459: LD_INT 4
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: PUSH
77466: LD_INT 2
77468: PUSH
77469: LD_INT 3
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: LD_INT 2
77478: PUSH
77479: LD_INT 2
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PUSH
77486: LD_INT 4
77488: PUSH
77489: LD_INT 2
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: PUSH
77496: LD_INT 2
77498: PUSH
77499: LD_INT 4
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PUSH
77506: LD_INT 0
77508: PUSH
77509: LD_INT 4
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: LD_INT 0
77518: PUSH
77519: LD_INT 3
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: PUSH
77526: LD_INT 1
77528: PUSH
77529: LD_INT 4
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: PUSH
77536: LD_INT 1
77538: PUSH
77539: LD_INT 5
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: PUSH
77546: LD_INT 0
77548: PUSH
77549: LD_INT 5
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: PUSH
77556: LD_INT 1
77558: NEG
77559: PUSH
77560: LD_INT 4
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: PUSH
77567: LD_INT 1
77569: NEG
77570: PUSH
77571: LD_INT 3
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 2
77580: PUSH
77581: LD_INT 5
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: LD_INT 2
77590: NEG
77591: PUSH
77592: LD_INT 3
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: LIST
77603: LIST
77604: LIST
77605: LIST
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: LIST
77629: LIST
77630: LIST
77631: LIST
77632: LIST
77633: LIST
77634: LIST
77635: LIST
77636: LIST
77637: LIST
77638: LIST
77639: LIST
77640: LIST
77641: LIST
77642: LIST
77643: LIST
77644: LIST
77645: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77646: LD_ADDR_VAR 0 34
77650: PUSH
77651: LD_INT 0
77653: PUSH
77654: LD_INT 4
77656: NEG
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PUSH
77662: LD_INT 0
77664: PUSH
77665: LD_INT 5
77667: NEG
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: LD_INT 4
77678: NEG
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 1
77686: PUSH
77687: LD_INT 3
77689: NEG
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 0
77697: PUSH
77698: LD_INT 3
77700: NEG
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: PUSH
77706: LD_INT 1
77708: NEG
77709: PUSH
77710: LD_INT 4
77712: NEG
77713: PUSH
77714: EMPTY
77715: LIST
77716: LIST
77717: PUSH
77718: LD_INT 1
77720: NEG
77721: PUSH
77722: LD_INT 5
77724: NEG
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PUSH
77730: LD_INT 2
77732: PUSH
77733: LD_INT 3
77735: NEG
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 2
77743: NEG
77744: PUSH
77745: LD_INT 5
77747: NEG
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: PUSH
77753: LD_INT 3
77755: PUSH
77756: LD_INT 0
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: PUSH
77763: LD_INT 3
77765: PUSH
77766: LD_INT 1
77768: NEG
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 4
77776: PUSH
77777: LD_INT 0
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 4
77786: PUSH
77787: LD_INT 1
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 3
77796: PUSH
77797: LD_INT 1
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 2
77806: PUSH
77807: LD_INT 0
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 2
77816: PUSH
77817: LD_INT 1
77819: NEG
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: LD_INT 2
77827: PUSH
77828: LD_INT 2
77830: NEG
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PUSH
77836: LD_INT 4
77838: PUSH
77839: LD_INT 2
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PUSH
77846: LD_INT 4
77848: PUSH
77849: LD_INT 4
77851: PUSH
77852: EMPTY
77853: LIST
77854: LIST
77855: PUSH
77856: LD_INT 4
77858: PUSH
77859: LD_INT 3
77861: PUSH
77862: EMPTY
77863: LIST
77864: LIST
77865: PUSH
77866: LD_INT 5
77868: PUSH
77869: LD_INT 4
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 5
77878: PUSH
77879: LD_INT 5
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: LD_INT 4
77888: PUSH
77889: LD_INT 5
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: LD_INT 3
77898: PUSH
77899: LD_INT 4
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 3
77908: PUSH
77909: LD_INT 3
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: PUSH
77916: LD_INT 5
77918: PUSH
77919: LD_INT 3
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: LD_INT 3
77928: PUSH
77929: LD_INT 5
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 0
77938: PUSH
77939: LD_INT 3
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: LD_INT 0
77948: PUSH
77949: LD_INT 2
77951: PUSH
77952: EMPTY
77953: LIST
77954: LIST
77955: PUSH
77956: LD_INT 1
77958: PUSH
77959: LD_INT 3
77961: PUSH
77962: EMPTY
77963: LIST
77964: LIST
77965: PUSH
77966: LD_INT 1
77968: PUSH
77969: LD_INT 4
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: PUSH
77976: LD_INT 0
77978: PUSH
77979: LD_INT 4
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: PUSH
77986: LD_INT 1
77988: NEG
77989: PUSH
77990: LD_INT 3
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 1
77999: NEG
78000: PUSH
78001: LD_INT 2
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: LD_INT 2
78010: PUSH
78011: LD_INT 4
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: LD_INT 2
78020: NEG
78021: PUSH
78022: LD_INT 2
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 4
78031: NEG
78032: PUSH
78033: LD_INT 0
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: PUSH
78040: LD_INT 4
78042: NEG
78043: PUSH
78044: LD_INT 1
78046: NEG
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: PUSH
78052: LD_INT 3
78054: NEG
78055: PUSH
78056: LD_INT 0
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: PUSH
78063: LD_INT 3
78065: NEG
78066: PUSH
78067: LD_INT 1
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: PUSH
78074: LD_INT 4
78076: NEG
78077: PUSH
78078: LD_INT 1
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 5
78087: NEG
78088: PUSH
78089: LD_INT 0
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: PUSH
78096: LD_INT 5
78098: NEG
78099: PUSH
78100: LD_INT 1
78102: NEG
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 5
78110: NEG
78111: PUSH
78112: LD_INT 2
78114: NEG
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 3
78122: NEG
78123: PUSH
78124: LD_INT 2
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: LIST
78177: ST_TO_ADDR
// end ; end ;
78178: GO 78181
78180: POP
// case btype of b_depot , b_warehouse :
78181: LD_VAR 0 1
78185: PUSH
78186: LD_INT 0
78188: DOUBLE
78189: EQUAL
78190: IFTRUE 78200
78192: LD_INT 1
78194: DOUBLE
78195: EQUAL
78196: IFTRUE 78200
78198: GO 78401
78200: POP
// case nation of nation_american :
78201: LD_VAR 0 5
78205: PUSH
78206: LD_INT 1
78208: DOUBLE
78209: EQUAL
78210: IFTRUE 78214
78212: GO 78270
78214: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
78215: LD_ADDR_VAR 0 9
78219: PUSH
78220: LD_VAR 0 11
78224: PUSH
78225: LD_VAR 0 12
78229: PUSH
78230: LD_VAR 0 13
78234: PUSH
78235: LD_VAR 0 14
78239: PUSH
78240: LD_VAR 0 15
78244: PUSH
78245: LD_VAR 0 16
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: LIST
78256: LIST
78257: PUSH
78258: LD_VAR 0 4
78262: PUSH
78263: LD_INT 1
78265: PLUS
78266: ARRAY
78267: ST_TO_ADDR
78268: GO 78399
78270: LD_INT 2
78272: DOUBLE
78273: EQUAL
78274: IFTRUE 78278
78276: GO 78334
78278: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
78279: LD_ADDR_VAR 0 9
78283: PUSH
78284: LD_VAR 0 17
78288: PUSH
78289: LD_VAR 0 18
78293: PUSH
78294: LD_VAR 0 19
78298: PUSH
78299: LD_VAR 0 20
78303: PUSH
78304: LD_VAR 0 21
78308: PUSH
78309: LD_VAR 0 22
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: LIST
78318: LIST
78319: LIST
78320: LIST
78321: PUSH
78322: LD_VAR 0 4
78326: PUSH
78327: LD_INT 1
78329: PLUS
78330: ARRAY
78331: ST_TO_ADDR
78332: GO 78399
78334: LD_INT 3
78336: DOUBLE
78337: EQUAL
78338: IFTRUE 78342
78340: GO 78398
78342: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78343: LD_ADDR_VAR 0 9
78347: PUSH
78348: LD_VAR 0 23
78352: PUSH
78353: LD_VAR 0 24
78357: PUSH
78358: LD_VAR 0 25
78362: PUSH
78363: LD_VAR 0 26
78367: PUSH
78368: LD_VAR 0 27
78372: PUSH
78373: LD_VAR 0 28
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: PUSH
78386: LD_VAR 0 4
78390: PUSH
78391: LD_INT 1
78393: PLUS
78394: ARRAY
78395: ST_TO_ADDR
78396: GO 78399
78398: POP
78399: GO 78954
78401: LD_INT 2
78403: DOUBLE
78404: EQUAL
78405: IFTRUE 78415
78407: LD_INT 3
78409: DOUBLE
78410: EQUAL
78411: IFTRUE 78415
78413: GO 78471
78415: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78416: LD_ADDR_VAR 0 9
78420: PUSH
78421: LD_VAR 0 29
78425: PUSH
78426: LD_VAR 0 30
78430: PUSH
78431: LD_VAR 0 31
78435: PUSH
78436: LD_VAR 0 32
78440: PUSH
78441: LD_VAR 0 33
78445: PUSH
78446: LD_VAR 0 34
78450: PUSH
78451: EMPTY
78452: LIST
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: LIST
78458: PUSH
78459: LD_VAR 0 4
78463: PUSH
78464: LD_INT 1
78466: PLUS
78467: ARRAY
78468: ST_TO_ADDR
78469: GO 78954
78471: LD_INT 16
78473: DOUBLE
78474: EQUAL
78475: IFTRUE 78533
78477: LD_INT 17
78479: DOUBLE
78480: EQUAL
78481: IFTRUE 78533
78483: LD_INT 18
78485: DOUBLE
78486: EQUAL
78487: IFTRUE 78533
78489: LD_INT 19
78491: DOUBLE
78492: EQUAL
78493: IFTRUE 78533
78495: LD_INT 22
78497: DOUBLE
78498: EQUAL
78499: IFTRUE 78533
78501: LD_INT 20
78503: DOUBLE
78504: EQUAL
78505: IFTRUE 78533
78507: LD_INT 21
78509: DOUBLE
78510: EQUAL
78511: IFTRUE 78533
78513: LD_INT 23
78515: DOUBLE
78516: EQUAL
78517: IFTRUE 78533
78519: LD_INT 24
78521: DOUBLE
78522: EQUAL
78523: IFTRUE 78533
78525: LD_INT 25
78527: DOUBLE
78528: EQUAL
78529: IFTRUE 78533
78531: GO 78589
78533: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78534: LD_ADDR_VAR 0 9
78538: PUSH
78539: LD_VAR 0 35
78543: PUSH
78544: LD_VAR 0 36
78548: PUSH
78549: LD_VAR 0 37
78553: PUSH
78554: LD_VAR 0 38
78558: PUSH
78559: LD_VAR 0 39
78563: PUSH
78564: LD_VAR 0 40
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: LIST
78573: LIST
78574: LIST
78575: LIST
78576: PUSH
78577: LD_VAR 0 4
78581: PUSH
78582: LD_INT 1
78584: PLUS
78585: ARRAY
78586: ST_TO_ADDR
78587: GO 78954
78589: LD_INT 6
78591: DOUBLE
78592: EQUAL
78593: IFTRUE 78645
78595: LD_INT 7
78597: DOUBLE
78598: EQUAL
78599: IFTRUE 78645
78601: LD_INT 8
78603: DOUBLE
78604: EQUAL
78605: IFTRUE 78645
78607: LD_INT 13
78609: DOUBLE
78610: EQUAL
78611: IFTRUE 78645
78613: LD_INT 12
78615: DOUBLE
78616: EQUAL
78617: IFTRUE 78645
78619: LD_INT 15
78621: DOUBLE
78622: EQUAL
78623: IFTRUE 78645
78625: LD_INT 11
78627: DOUBLE
78628: EQUAL
78629: IFTRUE 78645
78631: LD_INT 14
78633: DOUBLE
78634: EQUAL
78635: IFTRUE 78645
78637: LD_INT 10
78639: DOUBLE
78640: EQUAL
78641: IFTRUE 78645
78643: GO 78701
78645: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
78646: LD_ADDR_VAR 0 9
78650: PUSH
78651: LD_VAR 0 41
78655: PUSH
78656: LD_VAR 0 42
78660: PUSH
78661: LD_VAR 0 43
78665: PUSH
78666: LD_VAR 0 44
78670: PUSH
78671: LD_VAR 0 45
78675: PUSH
78676: LD_VAR 0 46
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: LIST
78685: LIST
78686: LIST
78687: LIST
78688: PUSH
78689: LD_VAR 0 4
78693: PUSH
78694: LD_INT 1
78696: PLUS
78697: ARRAY
78698: ST_TO_ADDR
78699: GO 78954
78701: LD_INT 36
78703: DOUBLE
78704: EQUAL
78705: IFTRUE 78709
78707: GO 78765
78709: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78710: LD_ADDR_VAR 0 9
78714: PUSH
78715: LD_VAR 0 47
78719: PUSH
78720: LD_VAR 0 48
78724: PUSH
78725: LD_VAR 0 49
78729: PUSH
78730: LD_VAR 0 50
78734: PUSH
78735: LD_VAR 0 51
78739: PUSH
78740: LD_VAR 0 52
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: PUSH
78753: LD_VAR 0 4
78757: PUSH
78758: LD_INT 1
78760: PLUS
78761: ARRAY
78762: ST_TO_ADDR
78763: GO 78954
78765: LD_INT 4
78767: DOUBLE
78768: EQUAL
78769: IFTRUE 78791
78771: LD_INT 5
78773: DOUBLE
78774: EQUAL
78775: IFTRUE 78791
78777: LD_INT 34
78779: DOUBLE
78780: EQUAL
78781: IFTRUE 78791
78783: LD_INT 37
78785: DOUBLE
78786: EQUAL
78787: IFTRUE 78791
78789: GO 78847
78791: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78792: LD_ADDR_VAR 0 9
78796: PUSH
78797: LD_VAR 0 53
78801: PUSH
78802: LD_VAR 0 54
78806: PUSH
78807: LD_VAR 0 55
78811: PUSH
78812: LD_VAR 0 56
78816: PUSH
78817: LD_VAR 0 57
78821: PUSH
78822: LD_VAR 0 58
78826: PUSH
78827: EMPTY
78828: LIST
78829: LIST
78830: LIST
78831: LIST
78832: LIST
78833: LIST
78834: PUSH
78835: LD_VAR 0 4
78839: PUSH
78840: LD_INT 1
78842: PLUS
78843: ARRAY
78844: ST_TO_ADDR
78845: GO 78954
78847: LD_INT 31
78849: DOUBLE
78850: EQUAL
78851: IFTRUE 78897
78853: LD_INT 32
78855: DOUBLE
78856: EQUAL
78857: IFTRUE 78897
78859: LD_INT 33
78861: DOUBLE
78862: EQUAL
78863: IFTRUE 78897
78865: LD_INT 27
78867: DOUBLE
78868: EQUAL
78869: IFTRUE 78897
78871: LD_INT 26
78873: DOUBLE
78874: EQUAL
78875: IFTRUE 78897
78877: LD_INT 28
78879: DOUBLE
78880: EQUAL
78881: IFTRUE 78897
78883: LD_INT 29
78885: DOUBLE
78886: EQUAL
78887: IFTRUE 78897
78889: LD_INT 30
78891: DOUBLE
78892: EQUAL
78893: IFTRUE 78897
78895: GO 78953
78897: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
78898: LD_ADDR_VAR 0 9
78902: PUSH
78903: LD_VAR 0 59
78907: PUSH
78908: LD_VAR 0 60
78912: PUSH
78913: LD_VAR 0 61
78917: PUSH
78918: LD_VAR 0 62
78922: PUSH
78923: LD_VAR 0 63
78927: PUSH
78928: LD_VAR 0 64
78932: PUSH
78933: EMPTY
78934: LIST
78935: LIST
78936: LIST
78937: LIST
78938: LIST
78939: LIST
78940: PUSH
78941: LD_VAR 0 4
78945: PUSH
78946: LD_INT 1
78948: PLUS
78949: ARRAY
78950: ST_TO_ADDR
78951: GO 78954
78953: POP
// temp_list2 = [ ] ;
78954: LD_ADDR_VAR 0 10
78958: PUSH
78959: EMPTY
78960: ST_TO_ADDR
// for i in temp_list do
78961: LD_ADDR_VAR 0 8
78965: PUSH
78966: LD_VAR 0 9
78970: PUSH
78971: FOR_IN
78972: IFFALSE 79024
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78974: LD_ADDR_VAR 0 10
78978: PUSH
78979: LD_VAR 0 10
78983: PUSH
78984: LD_VAR 0 8
78988: PUSH
78989: LD_INT 1
78991: ARRAY
78992: PUSH
78993: LD_VAR 0 2
78997: PLUS
78998: PUSH
78999: LD_VAR 0 8
79003: PUSH
79004: LD_INT 2
79006: ARRAY
79007: PUSH
79008: LD_VAR 0 3
79012: PLUS
79013: PUSH
79014: EMPTY
79015: LIST
79016: LIST
79017: PUSH
79018: EMPTY
79019: LIST
79020: ADD
79021: ST_TO_ADDR
79022: GO 78971
79024: POP
79025: POP
// result = temp_list2 ;
79026: LD_ADDR_VAR 0 7
79030: PUSH
79031: LD_VAR 0 10
79035: ST_TO_ADDR
// end ;
79036: LD_VAR 0 7
79040: RET
// export function EnemyInRange ( unit , dist ) ; begin
79041: LD_INT 0
79043: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
79044: LD_ADDR_VAR 0 3
79048: PUSH
79049: LD_VAR 0 1
79053: PPUSH
79054: CALL_OW 255
79058: PPUSH
79059: LD_VAR 0 1
79063: PPUSH
79064: CALL_OW 250
79068: PPUSH
79069: LD_VAR 0 1
79073: PPUSH
79074: CALL_OW 251
79078: PPUSH
79079: LD_VAR 0 2
79083: PPUSH
79084: CALL 52812 0 4
79088: PUSH
79089: LD_INT 4
79091: ARRAY
79092: ST_TO_ADDR
// end ;
79093: LD_VAR 0 3
79097: RET
// export function PlayerSeeMe ( unit ) ; begin
79098: LD_INT 0
79100: PPUSH
// result := See ( your_side , unit ) ;
79101: LD_ADDR_VAR 0 2
79105: PUSH
79106: LD_OWVAR 2
79110: PPUSH
79111: LD_VAR 0 1
79115: PPUSH
79116: CALL_OW 292
79120: ST_TO_ADDR
// end ;
79121: LD_VAR 0 2
79125: RET
// export function ReverseDir ( unit ) ; begin
79126: LD_INT 0
79128: PPUSH
// if not unit then
79129: LD_VAR 0 1
79133: NOT
79134: IFFALSE 79138
// exit ;
79136: GO 79161
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
79138: LD_ADDR_VAR 0 2
79142: PUSH
79143: LD_VAR 0 1
79147: PPUSH
79148: CALL_OW 254
79152: PUSH
79153: LD_INT 3
79155: PLUS
79156: PUSH
79157: LD_INT 6
79159: MOD
79160: ST_TO_ADDR
// end ;
79161: LD_VAR 0 2
79165: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
79166: LD_INT 0
79168: PPUSH
79169: PPUSH
79170: PPUSH
79171: PPUSH
79172: PPUSH
// if not hexes then
79173: LD_VAR 0 2
79177: NOT
79178: IFFALSE 79182
// exit ;
79180: GO 79330
// dist := 9999 ;
79182: LD_ADDR_VAR 0 5
79186: PUSH
79187: LD_INT 9999
79189: ST_TO_ADDR
// for i = 1 to hexes do
79190: LD_ADDR_VAR 0 4
79194: PUSH
79195: DOUBLE
79196: LD_INT 1
79198: DEC
79199: ST_TO_ADDR
79200: LD_VAR 0 2
79204: PUSH
79205: FOR_TO
79206: IFFALSE 79318
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
79208: LD_VAR 0 1
79212: PPUSH
79213: LD_VAR 0 2
79217: PUSH
79218: LD_VAR 0 4
79222: ARRAY
79223: PUSH
79224: LD_INT 1
79226: ARRAY
79227: PPUSH
79228: LD_VAR 0 2
79232: PUSH
79233: LD_VAR 0 4
79237: ARRAY
79238: PUSH
79239: LD_INT 2
79241: ARRAY
79242: PPUSH
79243: CALL_OW 297
79247: PUSH
79248: LD_VAR 0 5
79252: LESS
79253: IFFALSE 79316
// begin hex := hexes [ i ] ;
79255: LD_ADDR_VAR 0 7
79259: PUSH
79260: LD_VAR 0 2
79264: PUSH
79265: LD_VAR 0 4
79269: ARRAY
79270: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
79271: LD_ADDR_VAR 0 5
79275: PUSH
79276: LD_VAR 0 1
79280: PPUSH
79281: LD_VAR 0 2
79285: PUSH
79286: LD_VAR 0 4
79290: ARRAY
79291: PUSH
79292: LD_INT 1
79294: ARRAY
79295: PPUSH
79296: LD_VAR 0 2
79300: PUSH
79301: LD_VAR 0 4
79305: ARRAY
79306: PUSH
79307: LD_INT 2
79309: ARRAY
79310: PPUSH
79311: CALL_OW 297
79315: ST_TO_ADDR
// end ; end ;
79316: GO 79205
79318: POP
79319: POP
// result := hex ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: LD_VAR 0 7
79329: ST_TO_ADDR
// end ;
79330: LD_VAR 0 3
79334: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79335: LD_INT 0
79337: PPUSH
79338: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79339: LD_VAR 0 1
79343: NOT
79344: PUSH
79345: LD_VAR 0 1
79349: PUSH
79350: LD_INT 21
79352: PUSH
79353: LD_INT 2
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: LD_INT 23
79362: PUSH
79363: LD_INT 2
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: PPUSH
79374: CALL_OW 69
79378: IN
79379: NOT
79380: OR
79381: IFFALSE 79385
// exit ;
79383: GO 79432
// for i = 1 to 3 do
79385: LD_ADDR_VAR 0 3
79389: PUSH
79390: DOUBLE
79391: LD_INT 1
79393: DEC
79394: ST_TO_ADDR
79395: LD_INT 3
79397: PUSH
79398: FOR_TO
79399: IFFALSE 79430
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79401: LD_VAR 0 1
79405: PPUSH
79406: CALL_OW 250
79410: PPUSH
79411: LD_VAR 0 1
79415: PPUSH
79416: CALL_OW 251
79420: PPUSH
79421: LD_INT 1
79423: PPUSH
79424: CALL_OW 453
79428: GO 79398
79430: POP
79431: POP
// end ;
79432: LD_VAR 0 2
79436: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79437: LD_INT 0
79439: PPUSH
79440: PPUSH
79441: PPUSH
79442: PPUSH
79443: PPUSH
79444: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79445: LD_VAR 0 1
79449: NOT
79450: PUSH
79451: LD_VAR 0 2
79455: NOT
79456: OR
79457: PUSH
79458: LD_VAR 0 1
79462: PPUSH
79463: CALL_OW 314
79467: OR
79468: IFFALSE 79472
// exit ;
79470: GO 79913
// x := GetX ( enemy_unit ) ;
79472: LD_ADDR_VAR 0 7
79476: PUSH
79477: LD_VAR 0 2
79481: PPUSH
79482: CALL_OW 250
79486: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79487: LD_ADDR_VAR 0 8
79491: PUSH
79492: LD_VAR 0 2
79496: PPUSH
79497: CALL_OW 251
79501: ST_TO_ADDR
// if not x or not y then
79502: LD_VAR 0 7
79506: NOT
79507: PUSH
79508: LD_VAR 0 8
79512: NOT
79513: OR
79514: IFFALSE 79518
// exit ;
79516: GO 79913
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79518: LD_ADDR_VAR 0 6
79522: PUSH
79523: LD_VAR 0 7
79527: PPUSH
79528: LD_INT 0
79530: PPUSH
79531: LD_INT 4
79533: PPUSH
79534: CALL_OW 272
79538: PUSH
79539: LD_VAR 0 8
79543: PPUSH
79544: LD_INT 0
79546: PPUSH
79547: LD_INT 4
79549: PPUSH
79550: CALL_OW 273
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: PUSH
79559: LD_VAR 0 7
79563: PPUSH
79564: LD_INT 1
79566: PPUSH
79567: LD_INT 4
79569: PPUSH
79570: CALL_OW 272
79574: PUSH
79575: LD_VAR 0 8
79579: PPUSH
79580: LD_INT 1
79582: PPUSH
79583: LD_INT 4
79585: PPUSH
79586: CALL_OW 273
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PUSH
79595: LD_VAR 0 7
79599: PPUSH
79600: LD_INT 2
79602: PPUSH
79603: LD_INT 4
79605: PPUSH
79606: CALL_OW 272
79610: PUSH
79611: LD_VAR 0 8
79615: PPUSH
79616: LD_INT 2
79618: PPUSH
79619: LD_INT 4
79621: PPUSH
79622: CALL_OW 273
79626: PUSH
79627: EMPTY
79628: LIST
79629: LIST
79630: PUSH
79631: LD_VAR 0 7
79635: PPUSH
79636: LD_INT 3
79638: PPUSH
79639: LD_INT 4
79641: PPUSH
79642: CALL_OW 272
79646: PUSH
79647: LD_VAR 0 8
79651: PPUSH
79652: LD_INT 3
79654: PPUSH
79655: LD_INT 4
79657: PPUSH
79658: CALL_OW 273
79662: PUSH
79663: EMPTY
79664: LIST
79665: LIST
79666: PUSH
79667: LD_VAR 0 7
79671: PPUSH
79672: LD_INT 4
79674: PPUSH
79675: LD_INT 4
79677: PPUSH
79678: CALL_OW 272
79682: PUSH
79683: LD_VAR 0 8
79687: PPUSH
79688: LD_INT 4
79690: PPUSH
79691: LD_INT 4
79693: PPUSH
79694: CALL_OW 273
79698: PUSH
79699: EMPTY
79700: LIST
79701: LIST
79702: PUSH
79703: LD_VAR 0 7
79707: PPUSH
79708: LD_INT 5
79710: PPUSH
79711: LD_INT 4
79713: PPUSH
79714: CALL_OW 272
79718: PUSH
79719: LD_VAR 0 8
79723: PPUSH
79724: LD_INT 5
79726: PPUSH
79727: LD_INT 4
79729: PPUSH
79730: CALL_OW 273
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: PUSH
79739: EMPTY
79740: LIST
79741: LIST
79742: LIST
79743: LIST
79744: LIST
79745: LIST
79746: ST_TO_ADDR
// for i = tmp downto 1 do
79747: LD_ADDR_VAR 0 4
79751: PUSH
79752: DOUBLE
79753: LD_VAR 0 6
79757: INC
79758: ST_TO_ADDR
79759: LD_INT 1
79761: PUSH
79762: FOR_DOWNTO
79763: IFFALSE 79864
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79765: LD_VAR 0 6
79769: PUSH
79770: LD_VAR 0 4
79774: ARRAY
79775: PUSH
79776: LD_INT 1
79778: ARRAY
79779: PPUSH
79780: LD_VAR 0 6
79784: PUSH
79785: LD_VAR 0 4
79789: ARRAY
79790: PUSH
79791: LD_INT 2
79793: ARRAY
79794: PPUSH
79795: CALL_OW 488
79799: NOT
79800: PUSH
79801: LD_VAR 0 6
79805: PUSH
79806: LD_VAR 0 4
79810: ARRAY
79811: PUSH
79812: LD_INT 1
79814: ARRAY
79815: PPUSH
79816: LD_VAR 0 6
79820: PUSH
79821: LD_VAR 0 4
79825: ARRAY
79826: PUSH
79827: LD_INT 2
79829: ARRAY
79830: PPUSH
79831: CALL_OW 428
79835: PUSH
79836: LD_INT 0
79838: NONEQUAL
79839: OR
79840: IFFALSE 79862
// tmp := Delete ( tmp , i ) ;
79842: LD_ADDR_VAR 0 6
79846: PUSH
79847: LD_VAR 0 6
79851: PPUSH
79852: LD_VAR 0 4
79856: PPUSH
79857: CALL_OW 3
79861: ST_TO_ADDR
79862: GO 79762
79864: POP
79865: POP
// j := GetClosestHex ( unit , tmp ) ;
79866: LD_ADDR_VAR 0 5
79870: PUSH
79871: LD_VAR 0 1
79875: PPUSH
79876: LD_VAR 0 6
79880: PPUSH
79881: CALL 79166 0 2
79885: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79886: LD_VAR 0 1
79890: PPUSH
79891: LD_VAR 0 5
79895: PUSH
79896: LD_INT 1
79898: ARRAY
79899: PPUSH
79900: LD_VAR 0 5
79904: PUSH
79905: LD_INT 2
79907: ARRAY
79908: PPUSH
79909: CALL_OW 111
// end ;
79913: LD_VAR 0 3
79917: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79918: LD_INT 0
79920: PPUSH
79921: PPUSH
79922: PPUSH
// uc_side = 0 ;
79923: LD_ADDR_OWVAR 20
79927: PUSH
79928: LD_INT 0
79930: ST_TO_ADDR
// uc_nation = 0 ;
79931: LD_ADDR_OWVAR 21
79935: PUSH
79936: LD_INT 0
79938: ST_TO_ADDR
// InitHc_All ( ) ;
79939: CALL_OW 584
// InitVc ;
79943: CALL_OW 20
// if mastodonts then
79947: LD_VAR 0 6
79951: IFFALSE 80018
// for i = 1 to mastodonts do
79953: LD_ADDR_VAR 0 11
79957: PUSH
79958: DOUBLE
79959: LD_INT 1
79961: DEC
79962: ST_TO_ADDR
79963: LD_VAR 0 6
79967: PUSH
79968: FOR_TO
79969: IFFALSE 80016
// begin vc_chassis := 31 ;
79971: LD_ADDR_OWVAR 37
79975: PUSH
79976: LD_INT 31
79978: ST_TO_ADDR
// vc_control := control_rider ;
79979: LD_ADDR_OWVAR 38
79983: PUSH
79984: LD_INT 4
79986: ST_TO_ADDR
// animal := CreateVehicle ;
79987: LD_ADDR_VAR 0 12
79991: PUSH
79992: CALL_OW 45
79996: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79997: LD_VAR 0 12
80001: PPUSH
80002: LD_VAR 0 8
80006: PPUSH
80007: LD_INT 0
80009: PPUSH
80010: CALL 82206 0 3
// end ;
80014: GO 79968
80016: POP
80017: POP
// if horses then
80018: LD_VAR 0 5
80022: IFFALSE 80089
// for i = 1 to horses do
80024: LD_ADDR_VAR 0 11
80028: PUSH
80029: DOUBLE
80030: LD_INT 1
80032: DEC
80033: ST_TO_ADDR
80034: LD_VAR 0 5
80038: PUSH
80039: FOR_TO
80040: IFFALSE 80087
// begin hc_class := 21 ;
80042: LD_ADDR_OWVAR 28
80046: PUSH
80047: LD_INT 21
80049: ST_TO_ADDR
// hc_gallery :=  ;
80050: LD_ADDR_OWVAR 33
80054: PUSH
80055: LD_STRING 
80057: ST_TO_ADDR
// animal := CreateHuman ;
80058: LD_ADDR_VAR 0 12
80062: PUSH
80063: CALL_OW 44
80067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80068: LD_VAR 0 12
80072: PPUSH
80073: LD_VAR 0 8
80077: PPUSH
80078: LD_INT 0
80080: PPUSH
80081: CALL 82206 0 3
// end ;
80085: GO 80039
80087: POP
80088: POP
// if birds then
80089: LD_VAR 0 1
80093: IFFALSE 80160
// for i = 1 to birds do
80095: LD_ADDR_VAR 0 11
80099: PUSH
80100: DOUBLE
80101: LD_INT 1
80103: DEC
80104: ST_TO_ADDR
80105: LD_VAR 0 1
80109: PUSH
80110: FOR_TO
80111: IFFALSE 80158
// begin hc_class = 18 ;
80113: LD_ADDR_OWVAR 28
80117: PUSH
80118: LD_INT 18
80120: ST_TO_ADDR
// hc_gallery =  ;
80121: LD_ADDR_OWVAR 33
80125: PUSH
80126: LD_STRING 
80128: ST_TO_ADDR
// animal := CreateHuman ;
80129: LD_ADDR_VAR 0 12
80133: PUSH
80134: CALL_OW 44
80138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80139: LD_VAR 0 12
80143: PPUSH
80144: LD_VAR 0 8
80148: PPUSH
80149: LD_INT 0
80151: PPUSH
80152: CALL 82206 0 3
// end ;
80156: GO 80110
80158: POP
80159: POP
// if tigers then
80160: LD_VAR 0 2
80164: IFFALSE 80248
// for i = 1 to tigers do
80166: LD_ADDR_VAR 0 11
80170: PUSH
80171: DOUBLE
80172: LD_INT 1
80174: DEC
80175: ST_TO_ADDR
80176: LD_VAR 0 2
80180: PUSH
80181: FOR_TO
80182: IFFALSE 80246
// begin hc_class = class_tiger ;
80184: LD_ADDR_OWVAR 28
80188: PUSH
80189: LD_INT 14
80191: ST_TO_ADDR
// hc_gallery =  ;
80192: LD_ADDR_OWVAR 33
80196: PUSH
80197: LD_STRING 
80199: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
80200: LD_ADDR_OWVAR 35
80204: PUSH
80205: LD_INT 7
80207: NEG
80208: PPUSH
80209: LD_INT 7
80211: PPUSH
80212: CALL_OW 12
80216: ST_TO_ADDR
// animal := CreateHuman ;
80217: LD_ADDR_VAR 0 12
80221: PUSH
80222: CALL_OW 44
80226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80227: LD_VAR 0 12
80231: PPUSH
80232: LD_VAR 0 8
80236: PPUSH
80237: LD_INT 0
80239: PPUSH
80240: CALL 82206 0 3
// end ;
80244: GO 80181
80246: POP
80247: POP
// if apemans then
80248: LD_VAR 0 3
80252: IFFALSE 80375
// for i = 1 to apemans do
80254: LD_ADDR_VAR 0 11
80258: PUSH
80259: DOUBLE
80260: LD_INT 1
80262: DEC
80263: ST_TO_ADDR
80264: LD_VAR 0 3
80268: PUSH
80269: FOR_TO
80270: IFFALSE 80373
// begin hc_class = class_apeman ;
80272: LD_ADDR_OWVAR 28
80276: PUSH
80277: LD_INT 12
80279: ST_TO_ADDR
// hc_gallery =  ;
80280: LD_ADDR_OWVAR 33
80284: PUSH
80285: LD_STRING 
80287: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
80288: LD_ADDR_OWVAR 35
80292: PUSH
80293: LD_INT 5
80295: NEG
80296: PPUSH
80297: LD_INT 5
80299: PPUSH
80300: CALL_OW 12
80304: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80305: LD_ADDR_OWVAR 31
80309: PUSH
80310: LD_INT 1
80312: PPUSH
80313: LD_INT 3
80315: PPUSH
80316: CALL_OW 12
80320: PUSH
80321: LD_INT 1
80323: PPUSH
80324: LD_INT 3
80326: PPUSH
80327: CALL_OW 12
80331: PUSH
80332: LD_INT 0
80334: PUSH
80335: LD_INT 0
80337: PUSH
80338: EMPTY
80339: LIST
80340: LIST
80341: LIST
80342: LIST
80343: ST_TO_ADDR
// animal := CreateHuman ;
80344: LD_ADDR_VAR 0 12
80348: PUSH
80349: CALL_OW 44
80353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80354: LD_VAR 0 12
80358: PPUSH
80359: LD_VAR 0 8
80363: PPUSH
80364: LD_INT 0
80366: PPUSH
80367: CALL 82206 0 3
// end ;
80371: GO 80269
80373: POP
80374: POP
// if enchidnas then
80375: LD_VAR 0 4
80379: IFFALSE 80446
// for i = 1 to enchidnas do
80381: LD_ADDR_VAR 0 11
80385: PUSH
80386: DOUBLE
80387: LD_INT 1
80389: DEC
80390: ST_TO_ADDR
80391: LD_VAR 0 4
80395: PUSH
80396: FOR_TO
80397: IFFALSE 80444
// begin hc_class = 13 ;
80399: LD_ADDR_OWVAR 28
80403: PUSH
80404: LD_INT 13
80406: ST_TO_ADDR
// hc_gallery =  ;
80407: LD_ADDR_OWVAR 33
80411: PUSH
80412: LD_STRING 
80414: ST_TO_ADDR
// animal := CreateHuman ;
80415: LD_ADDR_VAR 0 12
80419: PUSH
80420: CALL_OW 44
80424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80425: LD_VAR 0 12
80429: PPUSH
80430: LD_VAR 0 8
80434: PPUSH
80435: LD_INT 0
80437: PPUSH
80438: CALL 82206 0 3
// end ;
80442: GO 80396
80444: POP
80445: POP
// if fishes then
80446: LD_VAR 0 7
80450: IFFALSE 80517
// for i = 1 to fishes do
80452: LD_ADDR_VAR 0 11
80456: PUSH
80457: DOUBLE
80458: LD_INT 1
80460: DEC
80461: ST_TO_ADDR
80462: LD_VAR 0 7
80466: PUSH
80467: FOR_TO
80468: IFFALSE 80515
// begin hc_class = 20 ;
80470: LD_ADDR_OWVAR 28
80474: PUSH
80475: LD_INT 20
80477: ST_TO_ADDR
// hc_gallery =  ;
80478: LD_ADDR_OWVAR 33
80482: PUSH
80483: LD_STRING 
80485: ST_TO_ADDR
// animal := CreateHuman ;
80486: LD_ADDR_VAR 0 12
80490: PUSH
80491: CALL_OW 44
80495: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80496: LD_VAR 0 12
80500: PPUSH
80501: LD_VAR 0 9
80505: PPUSH
80506: LD_INT 0
80508: PPUSH
80509: CALL 82206 0 3
// end ;
80513: GO 80467
80515: POP
80516: POP
// end ;
80517: LD_VAR 0 10
80521: RET
// export function WantHeal ( sci , unit ) ; begin
80522: LD_INT 0
80524: PPUSH
// if GetTaskList ( sci ) > 0 then
80525: LD_VAR 0 1
80529: PPUSH
80530: CALL_OW 437
80534: PUSH
80535: LD_INT 0
80537: GREATER
80538: IFFALSE 80608
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80540: LD_VAR 0 1
80544: PPUSH
80545: CALL_OW 437
80549: PUSH
80550: LD_INT 1
80552: ARRAY
80553: PUSH
80554: LD_INT 1
80556: ARRAY
80557: PUSH
80558: LD_STRING l
80560: EQUAL
80561: PUSH
80562: LD_VAR 0 1
80566: PPUSH
80567: CALL_OW 437
80571: PUSH
80572: LD_INT 1
80574: ARRAY
80575: PUSH
80576: LD_INT 4
80578: ARRAY
80579: PUSH
80580: LD_VAR 0 2
80584: EQUAL
80585: AND
80586: IFFALSE 80598
// result := true else
80588: LD_ADDR_VAR 0 3
80592: PUSH
80593: LD_INT 1
80595: ST_TO_ADDR
80596: GO 80606
// result := false ;
80598: LD_ADDR_VAR 0 3
80602: PUSH
80603: LD_INT 0
80605: ST_TO_ADDR
// end else
80606: GO 80616
// result := false ;
80608: LD_ADDR_VAR 0 3
80612: PUSH
80613: LD_INT 0
80615: ST_TO_ADDR
// end ;
80616: LD_VAR 0 3
80620: RET
// export function HealTarget ( sci ) ; begin
80621: LD_INT 0
80623: PPUSH
// if not sci then
80624: LD_VAR 0 1
80628: NOT
80629: IFFALSE 80633
// exit ;
80631: GO 80698
// result := 0 ;
80633: LD_ADDR_VAR 0 2
80637: PUSH
80638: LD_INT 0
80640: ST_TO_ADDR
// if GetTaskList ( sci ) then
80641: LD_VAR 0 1
80645: PPUSH
80646: CALL_OW 437
80650: IFFALSE 80698
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80652: LD_VAR 0 1
80656: PPUSH
80657: CALL_OW 437
80661: PUSH
80662: LD_INT 1
80664: ARRAY
80665: PUSH
80666: LD_INT 1
80668: ARRAY
80669: PUSH
80670: LD_STRING l
80672: EQUAL
80673: IFFALSE 80698
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80675: LD_ADDR_VAR 0 2
80679: PUSH
80680: LD_VAR 0 1
80684: PPUSH
80685: CALL_OW 437
80689: PUSH
80690: LD_INT 1
80692: ARRAY
80693: PUSH
80694: LD_INT 4
80696: ARRAY
80697: ST_TO_ADDR
// end ;
80698: LD_VAR 0 2
80702: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80703: LD_INT 0
80705: PPUSH
80706: PPUSH
80707: PPUSH
80708: PPUSH
// if not base_units then
80709: LD_VAR 0 1
80713: NOT
80714: IFFALSE 80718
// exit ;
80716: GO 80805
// result := false ;
80718: LD_ADDR_VAR 0 2
80722: PUSH
80723: LD_INT 0
80725: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80726: LD_ADDR_VAR 0 5
80730: PUSH
80731: LD_VAR 0 1
80735: PPUSH
80736: LD_INT 21
80738: PUSH
80739: LD_INT 3
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: PPUSH
80746: CALL_OW 72
80750: ST_TO_ADDR
// if not tmp then
80751: LD_VAR 0 5
80755: NOT
80756: IFFALSE 80760
// exit ;
80758: GO 80805
// for i in tmp do
80760: LD_ADDR_VAR 0 3
80764: PUSH
80765: LD_VAR 0 5
80769: PUSH
80770: FOR_IN
80771: IFFALSE 80803
// begin result := EnemyInRange ( i , 22 ) ;
80773: LD_ADDR_VAR 0 2
80777: PUSH
80778: LD_VAR 0 3
80782: PPUSH
80783: LD_INT 22
80785: PPUSH
80786: CALL 79041 0 2
80790: ST_TO_ADDR
// if result then
80791: LD_VAR 0 2
80795: IFFALSE 80801
// exit ;
80797: POP
80798: POP
80799: GO 80805
// end ;
80801: GO 80770
80803: POP
80804: POP
// end ;
80805: LD_VAR 0 2
80809: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
80810: LD_INT 0
80812: PPUSH
80813: PPUSH
// if not units then
80814: LD_VAR 0 1
80818: NOT
80819: IFFALSE 80823
// exit ;
80821: GO 80893
// result := [ ] ;
80823: LD_ADDR_VAR 0 3
80827: PUSH
80828: EMPTY
80829: ST_TO_ADDR
// for i in units do
80830: LD_ADDR_VAR 0 4
80834: PUSH
80835: LD_VAR 0 1
80839: PUSH
80840: FOR_IN
80841: IFFALSE 80891
// if GetTag ( i ) = tag then
80843: LD_VAR 0 4
80847: PPUSH
80848: CALL_OW 110
80852: PUSH
80853: LD_VAR 0 2
80857: EQUAL
80858: IFFALSE 80889
// result := Insert ( result , result + 1 , i ) ;
80860: LD_ADDR_VAR 0 3
80864: PUSH
80865: LD_VAR 0 3
80869: PPUSH
80870: LD_VAR 0 3
80874: PUSH
80875: LD_INT 1
80877: PLUS
80878: PPUSH
80879: LD_VAR 0 4
80883: PPUSH
80884: CALL_OW 2
80888: ST_TO_ADDR
80889: GO 80840
80891: POP
80892: POP
// end ;
80893: LD_VAR 0 3
80897: RET
// export function IsDriver ( un ) ; begin
80898: LD_INT 0
80900: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80901: LD_ADDR_VAR 0 2
80905: PUSH
80906: LD_VAR 0 1
80910: PUSH
80911: LD_INT 55
80913: PUSH
80914: EMPTY
80915: LIST
80916: PPUSH
80917: CALL_OW 69
80921: IN
80922: ST_TO_ADDR
// end ;
80923: LD_VAR 0 2
80927: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80928: LD_INT 0
80930: PPUSH
80931: PPUSH
// list := [ ] ;
80932: LD_ADDR_VAR 0 5
80936: PUSH
80937: EMPTY
80938: ST_TO_ADDR
// case d of 0 :
80939: LD_VAR 0 3
80943: PUSH
80944: LD_INT 0
80946: DOUBLE
80947: EQUAL
80948: IFTRUE 80952
80950: GO 81085
80952: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80953: LD_ADDR_VAR 0 5
80957: PUSH
80958: LD_VAR 0 1
80962: PUSH
80963: LD_INT 4
80965: MINUS
80966: PUSH
80967: LD_VAR 0 2
80971: PUSH
80972: LD_INT 4
80974: MINUS
80975: PUSH
80976: LD_INT 2
80978: PUSH
80979: EMPTY
80980: LIST
80981: LIST
80982: LIST
80983: PUSH
80984: LD_VAR 0 1
80988: PUSH
80989: LD_INT 3
80991: MINUS
80992: PUSH
80993: LD_VAR 0 2
80997: PUSH
80998: LD_INT 1
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: LIST
81005: PUSH
81006: LD_VAR 0 1
81010: PUSH
81011: LD_INT 4
81013: PLUS
81014: PUSH
81015: LD_VAR 0 2
81019: PUSH
81020: LD_INT 4
81022: PUSH
81023: EMPTY
81024: LIST
81025: LIST
81026: LIST
81027: PUSH
81028: LD_VAR 0 1
81032: PUSH
81033: LD_INT 3
81035: PLUS
81036: PUSH
81037: LD_VAR 0 2
81041: PUSH
81042: LD_INT 3
81044: PLUS
81045: PUSH
81046: LD_INT 5
81048: PUSH
81049: EMPTY
81050: LIST
81051: LIST
81052: LIST
81053: PUSH
81054: LD_VAR 0 1
81058: PUSH
81059: LD_VAR 0 2
81063: PUSH
81064: LD_INT 4
81066: PLUS
81067: PUSH
81068: LD_INT 0
81070: PUSH
81071: EMPTY
81072: LIST
81073: LIST
81074: LIST
81075: PUSH
81076: EMPTY
81077: LIST
81078: LIST
81079: LIST
81080: LIST
81081: LIST
81082: ST_TO_ADDR
// end ; 1 :
81083: GO 81783
81085: LD_INT 1
81087: DOUBLE
81088: EQUAL
81089: IFTRUE 81093
81091: GO 81226
81093: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
81094: LD_ADDR_VAR 0 5
81098: PUSH
81099: LD_VAR 0 1
81103: PUSH
81104: LD_VAR 0 2
81108: PUSH
81109: LD_INT 4
81111: MINUS
81112: PUSH
81113: LD_INT 3
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: LIST
81120: PUSH
81121: LD_VAR 0 1
81125: PUSH
81126: LD_INT 3
81128: MINUS
81129: PUSH
81130: LD_VAR 0 2
81134: PUSH
81135: LD_INT 3
81137: MINUS
81138: PUSH
81139: LD_INT 2
81141: PUSH
81142: EMPTY
81143: LIST
81144: LIST
81145: LIST
81146: PUSH
81147: LD_VAR 0 1
81151: PUSH
81152: LD_INT 4
81154: MINUS
81155: PUSH
81156: LD_VAR 0 2
81160: PUSH
81161: LD_INT 1
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: LIST
81168: PUSH
81169: LD_VAR 0 1
81173: PUSH
81174: LD_VAR 0 2
81178: PUSH
81179: LD_INT 3
81181: PLUS
81182: PUSH
81183: LD_INT 0
81185: PUSH
81186: EMPTY
81187: LIST
81188: LIST
81189: LIST
81190: PUSH
81191: LD_VAR 0 1
81195: PUSH
81196: LD_INT 4
81198: PLUS
81199: PUSH
81200: LD_VAR 0 2
81204: PUSH
81205: LD_INT 4
81207: PLUS
81208: PUSH
81209: LD_INT 5
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: LIST
81216: PUSH
81217: EMPTY
81218: LIST
81219: LIST
81220: LIST
81221: LIST
81222: LIST
81223: ST_TO_ADDR
// end ; 2 :
81224: GO 81783
81226: LD_INT 2
81228: DOUBLE
81229: EQUAL
81230: IFTRUE 81234
81232: GO 81363
81234: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
81235: LD_ADDR_VAR 0 5
81239: PUSH
81240: LD_VAR 0 1
81244: PUSH
81245: LD_VAR 0 2
81249: PUSH
81250: LD_INT 3
81252: MINUS
81253: PUSH
81254: LD_INT 3
81256: PUSH
81257: EMPTY
81258: LIST
81259: LIST
81260: LIST
81261: PUSH
81262: LD_VAR 0 1
81266: PUSH
81267: LD_INT 4
81269: PLUS
81270: PUSH
81271: LD_VAR 0 2
81275: PUSH
81276: LD_INT 4
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: LIST
81283: PUSH
81284: LD_VAR 0 1
81288: PUSH
81289: LD_VAR 0 2
81293: PUSH
81294: LD_INT 4
81296: PLUS
81297: PUSH
81298: LD_INT 0
81300: PUSH
81301: EMPTY
81302: LIST
81303: LIST
81304: LIST
81305: PUSH
81306: LD_VAR 0 1
81310: PUSH
81311: LD_INT 3
81313: MINUS
81314: PUSH
81315: LD_VAR 0 2
81319: PUSH
81320: LD_INT 1
81322: PUSH
81323: EMPTY
81324: LIST
81325: LIST
81326: LIST
81327: PUSH
81328: LD_VAR 0 1
81332: PUSH
81333: LD_INT 4
81335: MINUS
81336: PUSH
81337: LD_VAR 0 2
81341: PUSH
81342: LD_INT 4
81344: MINUS
81345: PUSH
81346: LD_INT 2
81348: PUSH
81349: EMPTY
81350: LIST
81351: LIST
81352: LIST
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: LIST
81358: LIST
81359: LIST
81360: ST_TO_ADDR
// end ; 3 :
81361: GO 81783
81363: LD_INT 3
81365: DOUBLE
81366: EQUAL
81367: IFTRUE 81371
81369: GO 81504
81371: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81372: LD_ADDR_VAR 0 5
81376: PUSH
81377: LD_VAR 0 1
81381: PUSH
81382: LD_INT 3
81384: PLUS
81385: PUSH
81386: LD_VAR 0 2
81390: PUSH
81391: LD_INT 4
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: LIST
81398: PUSH
81399: LD_VAR 0 1
81403: PUSH
81404: LD_INT 4
81406: PLUS
81407: PUSH
81408: LD_VAR 0 2
81412: PUSH
81413: LD_INT 4
81415: PLUS
81416: PUSH
81417: LD_INT 5
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: LIST
81424: PUSH
81425: LD_VAR 0 1
81429: PUSH
81430: LD_INT 4
81432: MINUS
81433: PUSH
81434: LD_VAR 0 2
81438: PUSH
81439: LD_INT 1
81441: PUSH
81442: EMPTY
81443: LIST
81444: LIST
81445: LIST
81446: PUSH
81447: LD_VAR 0 1
81451: PUSH
81452: LD_VAR 0 2
81456: PUSH
81457: LD_INT 4
81459: MINUS
81460: PUSH
81461: LD_INT 3
81463: PUSH
81464: EMPTY
81465: LIST
81466: LIST
81467: LIST
81468: PUSH
81469: LD_VAR 0 1
81473: PUSH
81474: LD_INT 3
81476: MINUS
81477: PUSH
81478: LD_VAR 0 2
81482: PUSH
81483: LD_INT 3
81485: MINUS
81486: PUSH
81487: LD_INT 2
81489: PUSH
81490: EMPTY
81491: LIST
81492: LIST
81493: LIST
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: ST_TO_ADDR
// end ; 4 :
81502: GO 81783
81504: LD_INT 4
81506: DOUBLE
81507: EQUAL
81508: IFTRUE 81512
81510: GO 81645
81512: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81513: LD_ADDR_VAR 0 5
81517: PUSH
81518: LD_VAR 0 1
81522: PUSH
81523: LD_VAR 0 2
81527: PUSH
81528: LD_INT 4
81530: PLUS
81531: PUSH
81532: LD_INT 0
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: LIST
81539: PUSH
81540: LD_VAR 0 1
81544: PUSH
81545: LD_INT 3
81547: PLUS
81548: PUSH
81549: LD_VAR 0 2
81553: PUSH
81554: LD_INT 3
81556: PLUS
81557: PUSH
81558: LD_INT 5
81560: PUSH
81561: EMPTY
81562: LIST
81563: LIST
81564: LIST
81565: PUSH
81566: LD_VAR 0 1
81570: PUSH
81571: LD_INT 4
81573: PLUS
81574: PUSH
81575: LD_VAR 0 2
81579: PUSH
81580: LD_INT 4
81582: PUSH
81583: EMPTY
81584: LIST
81585: LIST
81586: LIST
81587: PUSH
81588: LD_VAR 0 1
81592: PUSH
81593: LD_VAR 0 2
81597: PUSH
81598: LD_INT 3
81600: MINUS
81601: PUSH
81602: LD_INT 3
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: LIST
81609: PUSH
81610: LD_VAR 0 1
81614: PUSH
81615: LD_INT 4
81617: MINUS
81618: PUSH
81619: LD_VAR 0 2
81623: PUSH
81624: LD_INT 4
81626: MINUS
81627: PUSH
81628: LD_INT 2
81630: PUSH
81631: EMPTY
81632: LIST
81633: LIST
81634: LIST
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: LIST
81640: LIST
81641: LIST
81642: ST_TO_ADDR
// end ; 5 :
81643: GO 81783
81645: LD_INT 5
81647: DOUBLE
81648: EQUAL
81649: IFTRUE 81653
81651: GO 81782
81653: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81654: LD_ADDR_VAR 0 5
81658: PUSH
81659: LD_VAR 0 1
81663: PUSH
81664: LD_INT 4
81666: MINUS
81667: PUSH
81668: LD_VAR 0 2
81672: PUSH
81673: LD_INT 1
81675: PUSH
81676: EMPTY
81677: LIST
81678: LIST
81679: LIST
81680: PUSH
81681: LD_VAR 0 1
81685: PUSH
81686: LD_VAR 0 2
81690: PUSH
81691: LD_INT 4
81693: MINUS
81694: PUSH
81695: LD_INT 3
81697: PUSH
81698: EMPTY
81699: LIST
81700: LIST
81701: LIST
81702: PUSH
81703: LD_VAR 0 1
81707: PUSH
81708: LD_INT 4
81710: PLUS
81711: PUSH
81712: LD_VAR 0 2
81716: PUSH
81717: LD_INT 4
81719: PLUS
81720: PUSH
81721: LD_INT 5
81723: PUSH
81724: EMPTY
81725: LIST
81726: LIST
81727: LIST
81728: PUSH
81729: LD_VAR 0 1
81733: PUSH
81734: LD_INT 3
81736: PLUS
81737: PUSH
81738: LD_VAR 0 2
81742: PUSH
81743: LD_INT 4
81745: PUSH
81746: EMPTY
81747: LIST
81748: LIST
81749: LIST
81750: PUSH
81751: LD_VAR 0 1
81755: PUSH
81756: LD_VAR 0 2
81760: PUSH
81761: LD_INT 3
81763: PLUS
81764: PUSH
81765: LD_INT 0
81767: PUSH
81768: EMPTY
81769: LIST
81770: LIST
81771: LIST
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: LIST
81779: ST_TO_ADDR
// end ; end ;
81780: GO 81783
81782: POP
// result := list ;
81783: LD_ADDR_VAR 0 4
81787: PUSH
81788: LD_VAR 0 5
81792: ST_TO_ADDR
// end ;
81793: LD_VAR 0 4
81797: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81798: LD_INT 0
81800: PPUSH
81801: PPUSH
81802: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81803: LD_VAR 0 1
81807: NOT
81808: PUSH
81809: LD_VAR 0 2
81813: PUSH
81814: LD_INT 1
81816: PUSH
81817: LD_INT 2
81819: PUSH
81820: LD_INT 3
81822: PUSH
81823: LD_INT 4
81825: PUSH
81826: EMPTY
81827: LIST
81828: LIST
81829: LIST
81830: LIST
81831: IN
81832: NOT
81833: OR
81834: IFFALSE 81838
// exit ;
81836: GO 81930
// tmp := [ ] ;
81838: LD_ADDR_VAR 0 5
81842: PUSH
81843: EMPTY
81844: ST_TO_ADDR
// for i in units do
81845: LD_ADDR_VAR 0 4
81849: PUSH
81850: LD_VAR 0 1
81854: PUSH
81855: FOR_IN
81856: IFFALSE 81899
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81858: LD_ADDR_VAR 0 5
81862: PUSH
81863: LD_VAR 0 5
81867: PPUSH
81868: LD_VAR 0 5
81872: PUSH
81873: LD_INT 1
81875: PLUS
81876: PPUSH
81877: LD_VAR 0 4
81881: PPUSH
81882: LD_VAR 0 2
81886: PPUSH
81887: CALL_OW 259
81891: PPUSH
81892: CALL_OW 2
81896: ST_TO_ADDR
81897: GO 81855
81899: POP
81900: POP
// if not tmp then
81901: LD_VAR 0 5
81905: NOT
81906: IFFALSE 81910
// exit ;
81908: GO 81930
// result := SortListByListDesc ( units , tmp ) ;
81910: LD_ADDR_VAR 0 3
81914: PUSH
81915: LD_VAR 0 1
81919: PPUSH
81920: LD_VAR 0 5
81924: PPUSH
81925: CALL_OW 77
81929: ST_TO_ADDR
// end ;
81930: LD_VAR 0 3
81934: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81935: LD_INT 0
81937: PPUSH
81938: PPUSH
81939: PPUSH
// result := false ;
81940: LD_ADDR_VAR 0 3
81944: PUSH
81945: LD_INT 0
81947: ST_TO_ADDR
// x := GetX ( building ) ;
81948: LD_ADDR_VAR 0 4
81952: PUSH
81953: LD_VAR 0 2
81957: PPUSH
81958: CALL_OW 250
81962: ST_TO_ADDR
// y := GetY ( building ) ;
81963: LD_ADDR_VAR 0 5
81967: PUSH
81968: LD_VAR 0 2
81972: PPUSH
81973: CALL_OW 251
81977: ST_TO_ADDR
// if not building or not x or not y then
81978: LD_VAR 0 2
81982: NOT
81983: PUSH
81984: LD_VAR 0 4
81988: NOT
81989: OR
81990: PUSH
81991: LD_VAR 0 5
81995: NOT
81996: OR
81997: IFFALSE 82001
// exit ;
81999: GO 82093
// if GetTaskList ( unit ) then
82001: LD_VAR 0 1
82005: PPUSH
82006: CALL_OW 437
82010: IFFALSE 82093
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
82012: LD_STRING e
82014: PUSH
82015: LD_VAR 0 1
82019: PPUSH
82020: CALL_OW 437
82024: PUSH
82025: LD_INT 1
82027: ARRAY
82028: PUSH
82029: LD_INT 1
82031: ARRAY
82032: EQUAL
82033: PUSH
82034: LD_VAR 0 4
82038: PUSH
82039: LD_VAR 0 1
82043: PPUSH
82044: CALL_OW 437
82048: PUSH
82049: LD_INT 1
82051: ARRAY
82052: PUSH
82053: LD_INT 2
82055: ARRAY
82056: EQUAL
82057: AND
82058: PUSH
82059: LD_VAR 0 5
82063: PUSH
82064: LD_VAR 0 1
82068: PPUSH
82069: CALL_OW 437
82073: PUSH
82074: LD_INT 1
82076: ARRAY
82077: PUSH
82078: LD_INT 3
82080: ARRAY
82081: EQUAL
82082: AND
82083: IFFALSE 82093
// result := true end ;
82085: LD_ADDR_VAR 0 3
82089: PUSH
82090: LD_INT 1
82092: ST_TO_ADDR
// end ;
82093: LD_VAR 0 3
82097: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
82098: LD_INT 0
82100: PPUSH
// result := false ;
82101: LD_ADDR_VAR 0 4
82105: PUSH
82106: LD_INT 0
82108: ST_TO_ADDR
// if GetTaskList ( unit ) then
82109: LD_VAR 0 1
82113: PPUSH
82114: CALL_OW 437
82118: IFFALSE 82201
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
82120: LD_STRING M
82122: PUSH
82123: LD_VAR 0 1
82127: PPUSH
82128: CALL_OW 437
82132: PUSH
82133: LD_INT 1
82135: ARRAY
82136: PUSH
82137: LD_INT 1
82139: ARRAY
82140: EQUAL
82141: PUSH
82142: LD_VAR 0 2
82146: PUSH
82147: LD_VAR 0 1
82151: PPUSH
82152: CALL_OW 437
82156: PUSH
82157: LD_INT 1
82159: ARRAY
82160: PUSH
82161: LD_INT 2
82163: ARRAY
82164: EQUAL
82165: AND
82166: PUSH
82167: LD_VAR 0 3
82171: PUSH
82172: LD_VAR 0 1
82176: PPUSH
82177: CALL_OW 437
82181: PUSH
82182: LD_INT 1
82184: ARRAY
82185: PUSH
82186: LD_INT 3
82188: ARRAY
82189: EQUAL
82190: AND
82191: IFFALSE 82201
// result := true ;
82193: LD_ADDR_VAR 0 4
82197: PUSH
82198: LD_INT 1
82200: ST_TO_ADDR
// end ; end ;
82201: LD_VAR 0 4
82205: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
82206: LD_INT 0
82208: PPUSH
82209: PPUSH
82210: PPUSH
82211: PPUSH
// if not unit or not area then
82212: LD_VAR 0 1
82216: NOT
82217: PUSH
82218: LD_VAR 0 2
82222: NOT
82223: OR
82224: IFFALSE 82228
// exit ;
82226: GO 82392
// tmp := AreaToList ( area , i ) ;
82228: LD_ADDR_VAR 0 6
82232: PUSH
82233: LD_VAR 0 2
82237: PPUSH
82238: LD_VAR 0 5
82242: PPUSH
82243: CALL_OW 517
82247: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
82248: LD_ADDR_VAR 0 5
82252: PUSH
82253: DOUBLE
82254: LD_INT 1
82256: DEC
82257: ST_TO_ADDR
82258: LD_VAR 0 6
82262: PUSH
82263: LD_INT 1
82265: ARRAY
82266: PUSH
82267: FOR_TO
82268: IFFALSE 82390
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
82270: LD_ADDR_VAR 0 7
82274: PUSH
82275: LD_VAR 0 6
82279: PUSH
82280: LD_INT 1
82282: ARRAY
82283: PUSH
82284: LD_VAR 0 5
82288: ARRAY
82289: PUSH
82290: LD_VAR 0 6
82294: PUSH
82295: LD_INT 2
82297: ARRAY
82298: PUSH
82299: LD_VAR 0 5
82303: ARRAY
82304: PUSH
82305: EMPTY
82306: LIST
82307: LIST
82308: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
82309: LD_VAR 0 7
82313: PUSH
82314: LD_INT 1
82316: ARRAY
82317: PPUSH
82318: LD_VAR 0 7
82322: PUSH
82323: LD_INT 2
82325: ARRAY
82326: PPUSH
82327: CALL_OW 428
82331: PUSH
82332: LD_INT 0
82334: EQUAL
82335: IFFALSE 82388
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
82337: LD_VAR 0 1
82341: PPUSH
82342: LD_VAR 0 7
82346: PUSH
82347: LD_INT 1
82349: ARRAY
82350: PPUSH
82351: LD_VAR 0 7
82355: PUSH
82356: LD_INT 2
82358: ARRAY
82359: PPUSH
82360: LD_VAR 0 3
82364: PPUSH
82365: CALL_OW 48
// result := IsPlaced ( unit ) ;
82369: LD_ADDR_VAR 0 4
82373: PUSH
82374: LD_VAR 0 1
82378: PPUSH
82379: CALL_OW 305
82383: ST_TO_ADDR
// exit ;
82384: POP
82385: POP
82386: GO 82392
// end ; end ;
82388: GO 82267
82390: POP
82391: POP
// end ;
82392: LD_VAR 0 4
82396: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82397: LD_INT 0
82399: PPUSH
82400: PPUSH
82401: PPUSH
// if not side or side > 8 then
82402: LD_VAR 0 1
82406: NOT
82407: PUSH
82408: LD_VAR 0 1
82412: PUSH
82413: LD_INT 8
82415: GREATER
82416: OR
82417: IFFALSE 82421
// exit ;
82419: GO 82608
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82421: LD_ADDR_VAR 0 4
82425: PUSH
82426: LD_INT 22
82428: PUSH
82429: LD_VAR 0 1
82433: PUSH
82434: EMPTY
82435: LIST
82436: LIST
82437: PUSH
82438: LD_INT 21
82440: PUSH
82441: LD_INT 3
82443: PUSH
82444: EMPTY
82445: LIST
82446: LIST
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PPUSH
82452: CALL_OW 69
82456: ST_TO_ADDR
// if not tmp then
82457: LD_VAR 0 4
82461: NOT
82462: IFFALSE 82466
// exit ;
82464: GO 82608
// enable_addtolog := true ;
82466: LD_ADDR_OWVAR 81
82470: PUSH
82471: LD_INT 1
82473: ST_TO_ADDR
// AddToLog ( [ ) ;
82474: LD_STRING [
82476: PPUSH
82477: CALL_OW 561
// for i in tmp do
82481: LD_ADDR_VAR 0 3
82485: PUSH
82486: LD_VAR 0 4
82490: PUSH
82491: FOR_IN
82492: IFFALSE 82599
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82494: LD_STRING [
82496: PUSH
82497: LD_VAR 0 3
82501: PPUSH
82502: CALL_OW 266
82506: STR
82507: PUSH
82508: LD_STRING , 
82510: STR
82511: PUSH
82512: LD_VAR 0 3
82516: PPUSH
82517: CALL_OW 250
82521: STR
82522: PUSH
82523: LD_STRING , 
82525: STR
82526: PUSH
82527: LD_VAR 0 3
82531: PPUSH
82532: CALL_OW 251
82536: STR
82537: PUSH
82538: LD_STRING , 
82540: STR
82541: PUSH
82542: LD_VAR 0 3
82546: PPUSH
82547: CALL_OW 254
82551: STR
82552: PUSH
82553: LD_STRING , 
82555: STR
82556: PUSH
82557: LD_VAR 0 3
82561: PPUSH
82562: LD_INT 1
82564: PPUSH
82565: CALL_OW 268
82569: STR
82570: PUSH
82571: LD_STRING , 
82573: STR
82574: PUSH
82575: LD_VAR 0 3
82579: PPUSH
82580: LD_INT 2
82582: PPUSH
82583: CALL_OW 268
82587: STR
82588: PUSH
82589: LD_STRING ],
82591: STR
82592: PPUSH
82593: CALL_OW 561
// end ;
82597: GO 82491
82599: POP
82600: POP
// AddToLog ( ]; ) ;
82601: LD_STRING ];
82603: PPUSH
82604: CALL_OW 561
// end ;
82608: LD_VAR 0 2
82612: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82613: LD_INT 0
82615: PPUSH
82616: PPUSH
82617: PPUSH
82618: PPUSH
82619: PPUSH
// if not area or not rate or not max then
82620: LD_VAR 0 1
82624: NOT
82625: PUSH
82626: LD_VAR 0 2
82630: NOT
82631: OR
82632: PUSH
82633: LD_VAR 0 4
82637: NOT
82638: OR
82639: IFFALSE 82643
// exit ;
82641: GO 82835
// while 1 do
82643: LD_INT 1
82645: IFFALSE 82835
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82647: LD_ADDR_VAR 0 9
82651: PUSH
82652: LD_VAR 0 1
82656: PPUSH
82657: LD_INT 1
82659: PPUSH
82660: CALL_OW 287
82664: PUSH
82665: LD_INT 10
82667: MUL
82668: ST_TO_ADDR
// r := rate / 10 ;
82669: LD_ADDR_VAR 0 7
82673: PUSH
82674: LD_VAR 0 2
82678: PUSH
82679: LD_INT 10
82681: DIVREAL
82682: ST_TO_ADDR
// time := 1 1$00 ;
82683: LD_ADDR_VAR 0 8
82687: PUSH
82688: LD_INT 2100
82690: ST_TO_ADDR
// if amount < min then
82691: LD_VAR 0 9
82695: PUSH
82696: LD_VAR 0 3
82700: LESS
82701: IFFALSE 82719
// r := r * 2 else
82703: LD_ADDR_VAR 0 7
82707: PUSH
82708: LD_VAR 0 7
82712: PUSH
82713: LD_INT 2
82715: MUL
82716: ST_TO_ADDR
82717: GO 82745
// if amount > max then
82719: LD_VAR 0 9
82723: PUSH
82724: LD_VAR 0 4
82728: GREATER
82729: IFFALSE 82745
// r := r / 2 ;
82731: LD_ADDR_VAR 0 7
82735: PUSH
82736: LD_VAR 0 7
82740: PUSH
82741: LD_INT 2
82743: DIVREAL
82744: ST_TO_ADDR
// time := time / r ;
82745: LD_ADDR_VAR 0 8
82749: PUSH
82750: LD_VAR 0 8
82754: PUSH
82755: LD_VAR 0 7
82759: DIVREAL
82760: ST_TO_ADDR
// if time < 0 then
82761: LD_VAR 0 8
82765: PUSH
82766: LD_INT 0
82768: LESS
82769: IFFALSE 82786
// time := time * - 1 ;
82771: LD_ADDR_VAR 0 8
82775: PUSH
82776: LD_VAR 0 8
82780: PUSH
82781: LD_INT 1
82783: NEG
82784: MUL
82785: ST_TO_ADDR
// wait ( time ) ;
82786: LD_VAR 0 8
82790: PPUSH
82791: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
82795: LD_INT 35
82797: PPUSH
82798: LD_INT 875
82800: PPUSH
82801: CALL_OW 12
82805: PPUSH
82806: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82810: LD_INT 1
82812: PPUSH
82813: LD_INT 5
82815: PPUSH
82816: CALL_OW 12
82820: PPUSH
82821: LD_VAR 0 1
82825: PPUSH
82826: LD_INT 1
82828: PPUSH
82829: CALL_OW 55
// end ;
82833: GO 82643
// end ;
82835: LD_VAR 0 5
82839: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82840: LD_INT 0
82842: PPUSH
82843: PPUSH
82844: PPUSH
82845: PPUSH
82846: PPUSH
82847: PPUSH
82848: PPUSH
82849: PPUSH
// if not turrets or not factories then
82850: LD_VAR 0 1
82854: NOT
82855: PUSH
82856: LD_VAR 0 2
82860: NOT
82861: OR
82862: IFFALSE 82866
// exit ;
82864: GO 83173
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82866: LD_ADDR_VAR 0 10
82870: PUSH
82871: LD_INT 5
82873: PUSH
82874: LD_INT 6
82876: PUSH
82877: EMPTY
82878: LIST
82879: LIST
82880: PUSH
82881: LD_INT 2
82883: PUSH
82884: LD_INT 4
82886: PUSH
82887: EMPTY
82888: LIST
82889: LIST
82890: PUSH
82891: LD_INT 3
82893: PUSH
82894: LD_INT 5
82896: PUSH
82897: EMPTY
82898: LIST
82899: LIST
82900: PUSH
82901: EMPTY
82902: LIST
82903: LIST
82904: LIST
82905: PUSH
82906: LD_INT 24
82908: PUSH
82909: LD_INT 25
82911: PUSH
82912: EMPTY
82913: LIST
82914: LIST
82915: PUSH
82916: LD_INT 23
82918: PUSH
82919: LD_INT 27
82921: PUSH
82922: EMPTY
82923: LIST
82924: LIST
82925: PUSH
82926: EMPTY
82927: LIST
82928: LIST
82929: PUSH
82930: LD_INT 42
82932: PUSH
82933: LD_INT 43
82935: PUSH
82936: EMPTY
82937: LIST
82938: LIST
82939: PUSH
82940: LD_INT 44
82942: PUSH
82943: LD_INT 46
82945: PUSH
82946: EMPTY
82947: LIST
82948: LIST
82949: PUSH
82950: LD_INT 45
82952: PUSH
82953: LD_INT 47
82955: PUSH
82956: EMPTY
82957: LIST
82958: LIST
82959: PUSH
82960: EMPTY
82961: LIST
82962: LIST
82963: LIST
82964: PUSH
82965: EMPTY
82966: LIST
82967: LIST
82968: LIST
82969: ST_TO_ADDR
// result := [ ] ;
82970: LD_ADDR_VAR 0 3
82974: PUSH
82975: EMPTY
82976: ST_TO_ADDR
// for i in turrets do
82977: LD_ADDR_VAR 0 4
82981: PUSH
82982: LD_VAR 0 1
82986: PUSH
82987: FOR_IN
82988: IFFALSE 83171
// begin nat := GetNation ( i ) ;
82990: LD_ADDR_VAR 0 7
82994: PUSH
82995: LD_VAR 0 4
82999: PPUSH
83000: CALL_OW 248
83004: ST_TO_ADDR
// weapon := 0 ;
83005: LD_ADDR_VAR 0 8
83009: PUSH
83010: LD_INT 0
83012: ST_TO_ADDR
// if not nat then
83013: LD_VAR 0 7
83017: NOT
83018: IFFALSE 83022
// continue ;
83020: GO 82987
// for j in list [ nat ] do
83022: LD_ADDR_VAR 0 5
83026: PUSH
83027: LD_VAR 0 10
83031: PUSH
83032: LD_VAR 0 7
83036: ARRAY
83037: PUSH
83038: FOR_IN
83039: IFFALSE 83080
// if GetBWeapon ( i ) = j [ 1 ] then
83041: LD_VAR 0 4
83045: PPUSH
83046: CALL_OW 269
83050: PUSH
83051: LD_VAR 0 5
83055: PUSH
83056: LD_INT 1
83058: ARRAY
83059: EQUAL
83060: IFFALSE 83078
// begin weapon := j [ 2 ] ;
83062: LD_ADDR_VAR 0 8
83066: PUSH
83067: LD_VAR 0 5
83071: PUSH
83072: LD_INT 2
83074: ARRAY
83075: ST_TO_ADDR
// break ;
83076: GO 83080
// end ;
83078: GO 83038
83080: POP
83081: POP
// if not weapon then
83082: LD_VAR 0 8
83086: NOT
83087: IFFALSE 83091
// continue ;
83089: GO 82987
// for k in factories do
83091: LD_ADDR_VAR 0 6
83095: PUSH
83096: LD_VAR 0 2
83100: PUSH
83101: FOR_IN
83102: IFFALSE 83167
// begin weapons := AvailableWeaponList ( k ) ;
83104: LD_ADDR_VAR 0 9
83108: PUSH
83109: LD_VAR 0 6
83113: PPUSH
83114: CALL_OW 478
83118: ST_TO_ADDR
// if not weapons then
83119: LD_VAR 0 9
83123: NOT
83124: IFFALSE 83128
// continue ;
83126: GO 83101
// if weapon in weapons then
83128: LD_VAR 0 8
83132: PUSH
83133: LD_VAR 0 9
83137: IN
83138: IFFALSE 83165
// begin result := [ i , weapon ] ;
83140: LD_ADDR_VAR 0 3
83144: PUSH
83145: LD_VAR 0 4
83149: PUSH
83150: LD_VAR 0 8
83154: PUSH
83155: EMPTY
83156: LIST
83157: LIST
83158: ST_TO_ADDR
// exit ;
83159: POP
83160: POP
83161: POP
83162: POP
83163: GO 83173
// end ; end ;
83165: GO 83101
83167: POP
83168: POP
// end ;
83169: GO 82987
83171: POP
83172: POP
// end ;
83173: LD_VAR 0 3
83177: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
83178: LD_INT 0
83180: PPUSH
// if not side or side > 8 then
83181: LD_VAR 0 3
83185: NOT
83186: PUSH
83187: LD_VAR 0 3
83191: PUSH
83192: LD_INT 8
83194: GREATER
83195: OR
83196: IFFALSE 83200
// exit ;
83198: GO 83259
// if not range then
83200: LD_VAR 0 4
83204: NOT
83205: IFFALSE 83216
// range := - 12 ;
83207: LD_ADDR_VAR 0 4
83211: PUSH
83212: LD_INT 12
83214: NEG
83215: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
83216: LD_VAR 0 1
83220: PPUSH
83221: LD_VAR 0 2
83225: PPUSH
83226: LD_VAR 0 3
83230: PPUSH
83231: LD_VAR 0 4
83235: PPUSH
83236: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
83240: LD_VAR 0 1
83244: PPUSH
83245: LD_VAR 0 2
83249: PPUSH
83250: LD_VAR 0 3
83254: PPUSH
83255: CALL_OW 331
// end ;
83259: LD_VAR 0 5
83263: RET
// export function Video ( mode ) ; begin
83264: LD_INT 0
83266: PPUSH
// ingame_video = mode ;
83267: LD_ADDR_OWVAR 52
83271: PUSH
83272: LD_VAR 0 1
83276: ST_TO_ADDR
// interface_hidden = mode ;
83277: LD_ADDR_OWVAR 54
83281: PUSH
83282: LD_VAR 0 1
83286: ST_TO_ADDR
// end ;
83287: LD_VAR 0 2
83291: RET
// export function Join ( array , element ) ; begin
83292: LD_INT 0
83294: PPUSH
// result := Replace ( array , array + 1 , element ) ;
83295: LD_ADDR_VAR 0 3
83299: PUSH
83300: LD_VAR 0 1
83304: PPUSH
83305: LD_VAR 0 1
83309: PUSH
83310: LD_INT 1
83312: PLUS
83313: PPUSH
83314: LD_VAR 0 2
83318: PPUSH
83319: CALL_OW 1
83323: ST_TO_ADDR
// end ;
83324: LD_VAR 0 3
83328: RET
// export function JoinUnion ( array , element ) ; begin
83329: LD_INT 0
83331: PPUSH
// result := array union element ;
83332: LD_ADDR_VAR 0 3
83336: PUSH
83337: LD_VAR 0 1
83341: PUSH
83342: LD_VAR 0 2
83346: UNION
83347: ST_TO_ADDR
// end ;
83348: LD_VAR 0 3
83352: RET
// export function GetBehemoths ( side ) ; begin
83353: LD_INT 0
83355: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
83356: LD_ADDR_VAR 0 2
83360: PUSH
83361: LD_INT 22
83363: PUSH
83364: LD_VAR 0 1
83368: PUSH
83369: EMPTY
83370: LIST
83371: LIST
83372: PUSH
83373: LD_INT 31
83375: PUSH
83376: LD_INT 25
83378: PUSH
83379: EMPTY
83380: LIST
83381: LIST
83382: PUSH
83383: EMPTY
83384: LIST
83385: LIST
83386: PPUSH
83387: CALL_OW 69
83391: ST_TO_ADDR
// end ;
83392: LD_VAR 0 2
83396: RET
// export function Shuffle ( array ) ; var i , index ; begin
83397: LD_INT 0
83399: PPUSH
83400: PPUSH
83401: PPUSH
// result := [ ] ;
83402: LD_ADDR_VAR 0 2
83406: PUSH
83407: EMPTY
83408: ST_TO_ADDR
// if not array then
83409: LD_VAR 0 1
83413: NOT
83414: IFFALSE 83418
// exit ;
83416: GO 83517
// Randomize ;
83418: CALL_OW 10
// for i = array downto 1 do
83422: LD_ADDR_VAR 0 3
83426: PUSH
83427: DOUBLE
83428: LD_VAR 0 1
83432: INC
83433: ST_TO_ADDR
83434: LD_INT 1
83436: PUSH
83437: FOR_DOWNTO
83438: IFFALSE 83515
// begin index := rand ( 1 , array ) ;
83440: LD_ADDR_VAR 0 4
83444: PUSH
83445: LD_INT 1
83447: PPUSH
83448: LD_VAR 0 1
83452: PPUSH
83453: CALL_OW 12
83457: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83458: LD_ADDR_VAR 0 2
83462: PUSH
83463: LD_VAR 0 2
83467: PPUSH
83468: LD_VAR 0 2
83472: PUSH
83473: LD_INT 1
83475: PLUS
83476: PPUSH
83477: LD_VAR 0 1
83481: PUSH
83482: LD_VAR 0 4
83486: ARRAY
83487: PPUSH
83488: CALL_OW 2
83492: ST_TO_ADDR
// array := Delete ( array , index ) ;
83493: LD_ADDR_VAR 0 1
83497: PUSH
83498: LD_VAR 0 1
83502: PPUSH
83503: LD_VAR 0 4
83507: PPUSH
83508: CALL_OW 3
83512: ST_TO_ADDR
// end ;
83513: GO 83437
83515: POP
83516: POP
// end ;
83517: LD_VAR 0 2
83521: RET
// export function GetBaseMaterials ( base ) ; begin
83522: LD_INT 0
83524: PPUSH
// result := [ 0 , 0 , 0 ] ;
83525: LD_ADDR_VAR 0 2
83529: PUSH
83530: LD_INT 0
83532: PUSH
83533: LD_INT 0
83535: PUSH
83536: LD_INT 0
83538: PUSH
83539: EMPTY
83540: LIST
83541: LIST
83542: LIST
83543: ST_TO_ADDR
// if not base then
83544: LD_VAR 0 1
83548: NOT
83549: IFFALSE 83553
// exit ;
83551: GO 83602
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83553: LD_ADDR_VAR 0 2
83557: PUSH
83558: LD_VAR 0 1
83562: PPUSH
83563: LD_INT 1
83565: PPUSH
83566: CALL_OW 275
83570: PUSH
83571: LD_VAR 0 1
83575: PPUSH
83576: LD_INT 2
83578: PPUSH
83579: CALL_OW 275
83583: PUSH
83584: LD_VAR 0 1
83588: PPUSH
83589: LD_INT 3
83591: PPUSH
83592: CALL_OW 275
83596: PUSH
83597: EMPTY
83598: LIST
83599: LIST
83600: LIST
83601: ST_TO_ADDR
// end ;
83602: LD_VAR 0 2
83606: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83607: LD_INT 0
83609: PPUSH
83610: PPUSH
// result := array ;
83611: LD_ADDR_VAR 0 3
83615: PUSH
83616: LD_VAR 0 1
83620: ST_TO_ADDR
// if size > 0 then
83621: LD_VAR 0 2
83625: PUSH
83626: LD_INT 0
83628: GREATER
83629: IFFALSE 83675
// for i := array downto size do
83631: LD_ADDR_VAR 0 4
83635: PUSH
83636: DOUBLE
83637: LD_VAR 0 1
83641: INC
83642: ST_TO_ADDR
83643: LD_VAR 0 2
83647: PUSH
83648: FOR_DOWNTO
83649: IFFALSE 83673
// result := Delete ( result , result ) ;
83651: LD_ADDR_VAR 0 3
83655: PUSH
83656: LD_VAR 0 3
83660: PPUSH
83661: LD_VAR 0 3
83665: PPUSH
83666: CALL_OW 3
83670: ST_TO_ADDR
83671: GO 83648
83673: POP
83674: POP
// end ;
83675: LD_VAR 0 3
83679: RET
// export function ComExit ( unit ) ; var tmp ; begin
83680: LD_INT 0
83682: PPUSH
83683: PPUSH
// if not IsInUnit ( unit ) then
83684: LD_VAR 0 1
83688: PPUSH
83689: CALL_OW 310
83693: NOT
83694: IFFALSE 83698
// exit ;
83696: GO 83758
// tmp := IsInUnit ( unit ) ;
83698: LD_ADDR_VAR 0 3
83702: PUSH
83703: LD_VAR 0 1
83707: PPUSH
83708: CALL_OW 310
83712: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83713: LD_VAR 0 3
83717: PPUSH
83718: CALL_OW 247
83722: PUSH
83723: LD_INT 2
83725: EQUAL
83726: IFFALSE 83739
// ComExitVehicle ( unit ) else
83728: LD_VAR 0 1
83732: PPUSH
83733: CALL_OW 121
83737: GO 83748
// ComExitBuilding ( unit ) ;
83739: LD_VAR 0 1
83743: PPUSH
83744: CALL_OW 122
// result := tmp ;
83748: LD_ADDR_VAR 0 2
83752: PUSH
83753: LD_VAR 0 3
83757: ST_TO_ADDR
// end ;
83758: LD_VAR 0 2
83762: RET
// export function ComExitAll ( units ) ; var i ; begin
83763: LD_INT 0
83765: PPUSH
83766: PPUSH
// if not units then
83767: LD_VAR 0 1
83771: NOT
83772: IFFALSE 83776
// exit ;
83774: GO 83802
// for i in units do
83776: LD_ADDR_VAR 0 3
83780: PUSH
83781: LD_VAR 0 1
83785: PUSH
83786: FOR_IN
83787: IFFALSE 83800
// ComExit ( i ) ;
83789: LD_VAR 0 3
83793: PPUSH
83794: CALL 83680 0 1
83798: GO 83786
83800: POP
83801: POP
// end ;
83802: LD_VAR 0 2
83806: RET
// export function ResetHc ; begin
83807: LD_INT 0
83809: PPUSH
// InitHc ;
83810: CALL_OW 19
// hc_importance := 0 ;
83814: LD_ADDR_OWVAR 32
83818: PUSH
83819: LD_INT 0
83821: ST_TO_ADDR
// end ;
83822: LD_VAR 0 1
83826: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83827: LD_INT 0
83829: PPUSH
83830: PPUSH
83831: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83832: LD_ADDR_VAR 0 6
83836: PUSH
83837: LD_VAR 0 1
83841: PUSH
83842: LD_VAR 0 3
83846: PLUS
83847: PUSH
83848: LD_INT 2
83850: DIV
83851: ST_TO_ADDR
// if _x < 0 then
83852: LD_VAR 0 6
83856: PUSH
83857: LD_INT 0
83859: LESS
83860: IFFALSE 83877
// _x := _x * - 1 ;
83862: LD_ADDR_VAR 0 6
83866: PUSH
83867: LD_VAR 0 6
83871: PUSH
83872: LD_INT 1
83874: NEG
83875: MUL
83876: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83877: LD_ADDR_VAR 0 7
83881: PUSH
83882: LD_VAR 0 2
83886: PUSH
83887: LD_VAR 0 4
83891: PLUS
83892: PUSH
83893: LD_INT 2
83895: DIV
83896: ST_TO_ADDR
// if _y < 0 then
83897: LD_VAR 0 7
83901: PUSH
83902: LD_INT 0
83904: LESS
83905: IFFALSE 83922
// _y := _y * - 1 ;
83907: LD_ADDR_VAR 0 7
83911: PUSH
83912: LD_VAR 0 7
83916: PUSH
83917: LD_INT 1
83919: NEG
83920: MUL
83921: ST_TO_ADDR
// result := [ _x , _y ] ;
83922: LD_ADDR_VAR 0 5
83926: PUSH
83927: LD_VAR 0 6
83931: PUSH
83932: LD_VAR 0 7
83936: PUSH
83937: EMPTY
83938: LIST
83939: LIST
83940: ST_TO_ADDR
// end ;
83941: LD_VAR 0 5
83945: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83946: LD_INT 0
83948: PPUSH
83949: PPUSH
83950: PPUSH
83951: PPUSH
// task := GetTaskList ( unit ) ;
83952: LD_ADDR_VAR 0 7
83956: PUSH
83957: LD_VAR 0 1
83961: PPUSH
83962: CALL_OW 437
83966: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83967: LD_VAR 0 7
83971: NOT
83972: PUSH
83973: LD_VAR 0 1
83977: PPUSH
83978: LD_VAR 0 2
83982: PPUSH
83983: CALL_OW 308
83987: NOT
83988: AND
83989: IFFALSE 83993
// exit ;
83991: GO 84111
// if IsInArea ( unit , area ) then
83993: LD_VAR 0 1
83997: PPUSH
83998: LD_VAR 0 2
84002: PPUSH
84003: CALL_OW 308
84007: IFFALSE 84025
// begin ComMoveToArea ( unit , goAway ) ;
84009: LD_VAR 0 1
84013: PPUSH
84014: LD_VAR 0 3
84018: PPUSH
84019: CALL_OW 113
// exit ;
84023: GO 84111
// end ; if task [ 1 ] [ 1 ] <> M then
84025: LD_VAR 0 7
84029: PUSH
84030: LD_INT 1
84032: ARRAY
84033: PUSH
84034: LD_INT 1
84036: ARRAY
84037: PUSH
84038: LD_STRING M
84040: NONEQUAL
84041: IFFALSE 84045
// exit ;
84043: GO 84111
// x := task [ 1 ] [ 2 ] ;
84045: LD_ADDR_VAR 0 5
84049: PUSH
84050: LD_VAR 0 7
84054: PUSH
84055: LD_INT 1
84057: ARRAY
84058: PUSH
84059: LD_INT 2
84061: ARRAY
84062: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
84063: LD_ADDR_VAR 0 6
84067: PUSH
84068: LD_VAR 0 7
84072: PUSH
84073: LD_INT 1
84075: ARRAY
84076: PUSH
84077: LD_INT 3
84079: ARRAY
84080: ST_TO_ADDR
// if InArea ( x , y , area ) then
84081: LD_VAR 0 5
84085: PPUSH
84086: LD_VAR 0 6
84090: PPUSH
84091: LD_VAR 0 2
84095: PPUSH
84096: CALL_OW 309
84100: IFFALSE 84111
// ComStop ( unit ) ;
84102: LD_VAR 0 1
84106: PPUSH
84107: CALL_OW 141
// end ;
84111: LD_VAR 0 4
84115: RET
// export function Abs ( value ) ; begin
84116: LD_INT 0
84118: PPUSH
// result := value ;
84119: LD_ADDR_VAR 0 2
84123: PUSH
84124: LD_VAR 0 1
84128: ST_TO_ADDR
// if value < 0 then
84129: LD_VAR 0 1
84133: PUSH
84134: LD_INT 0
84136: LESS
84137: IFFALSE 84154
// result := value * - 1 ;
84139: LD_ADDR_VAR 0 2
84143: PUSH
84144: LD_VAR 0 1
84148: PUSH
84149: LD_INT 1
84151: NEG
84152: MUL
84153: ST_TO_ADDR
// end ;
84154: LD_VAR 0 2
84158: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
84159: LD_INT 0
84161: PPUSH
84162: PPUSH
84163: PPUSH
84164: PPUSH
84165: PPUSH
84166: PPUSH
84167: PPUSH
84168: PPUSH
// if not unit or not building then
84169: LD_VAR 0 1
84173: NOT
84174: PUSH
84175: LD_VAR 0 2
84179: NOT
84180: OR
84181: IFFALSE 84185
// exit ;
84183: GO 84411
// x := GetX ( building ) ;
84185: LD_ADDR_VAR 0 4
84189: PUSH
84190: LD_VAR 0 2
84194: PPUSH
84195: CALL_OW 250
84199: ST_TO_ADDR
// y := GetY ( building ) ;
84200: LD_ADDR_VAR 0 6
84204: PUSH
84205: LD_VAR 0 2
84209: PPUSH
84210: CALL_OW 251
84214: ST_TO_ADDR
// d := GetDir ( building ) ;
84215: LD_ADDR_VAR 0 8
84219: PUSH
84220: LD_VAR 0 2
84224: PPUSH
84225: CALL_OW 254
84229: ST_TO_ADDR
// r := 4 ;
84230: LD_ADDR_VAR 0 9
84234: PUSH
84235: LD_INT 4
84237: ST_TO_ADDR
// for i := 1 to 5 do
84238: LD_ADDR_VAR 0 10
84242: PUSH
84243: DOUBLE
84244: LD_INT 1
84246: DEC
84247: ST_TO_ADDR
84248: LD_INT 5
84250: PUSH
84251: FOR_TO
84252: IFFALSE 84409
// begin _x := ShiftX ( x , d , r + i ) ;
84254: LD_ADDR_VAR 0 5
84258: PUSH
84259: LD_VAR 0 4
84263: PPUSH
84264: LD_VAR 0 8
84268: PPUSH
84269: LD_VAR 0 9
84273: PUSH
84274: LD_VAR 0 10
84278: PLUS
84279: PPUSH
84280: CALL_OW 272
84284: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
84285: LD_ADDR_VAR 0 7
84289: PUSH
84290: LD_VAR 0 6
84294: PPUSH
84295: LD_VAR 0 8
84299: PPUSH
84300: LD_VAR 0 9
84304: PUSH
84305: LD_VAR 0 10
84309: PLUS
84310: PPUSH
84311: CALL_OW 273
84315: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
84316: LD_VAR 0 5
84320: PPUSH
84321: LD_VAR 0 7
84325: PPUSH
84326: CALL_OW 488
84330: PUSH
84331: LD_VAR 0 5
84335: PPUSH
84336: LD_VAR 0 7
84340: PPUSH
84341: CALL_OW 428
84345: PPUSH
84346: CALL_OW 247
84350: PUSH
84351: LD_INT 3
84353: PUSH
84354: LD_INT 2
84356: PUSH
84357: EMPTY
84358: LIST
84359: LIST
84360: IN
84361: NOT
84362: AND
84363: IFFALSE 84407
// begin ComMoveXY ( unit , _x , _y ) ;
84365: LD_VAR 0 1
84369: PPUSH
84370: LD_VAR 0 5
84374: PPUSH
84375: LD_VAR 0 7
84379: PPUSH
84380: CALL_OW 111
// result := [ _x , _y ] ;
84384: LD_ADDR_VAR 0 3
84388: PUSH
84389: LD_VAR 0 5
84393: PUSH
84394: LD_VAR 0 7
84398: PUSH
84399: EMPTY
84400: LIST
84401: LIST
84402: ST_TO_ADDR
// exit ;
84403: POP
84404: POP
84405: GO 84411
// end ; end ;
84407: GO 84251
84409: POP
84410: POP
// end ;
84411: LD_VAR 0 3
84415: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84416: LD_INT 0
84418: PPUSH
84419: PPUSH
84420: PPUSH
// result := 0 ;
84421: LD_ADDR_VAR 0 3
84425: PUSH
84426: LD_INT 0
84428: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84429: LD_VAR 0 1
84433: PUSH
84434: LD_INT 0
84436: LESS
84437: PUSH
84438: LD_VAR 0 1
84442: PUSH
84443: LD_INT 8
84445: GREATER
84446: OR
84447: PUSH
84448: LD_VAR 0 2
84452: PUSH
84453: LD_INT 0
84455: LESS
84456: OR
84457: PUSH
84458: LD_VAR 0 2
84462: PUSH
84463: LD_INT 8
84465: GREATER
84466: OR
84467: IFFALSE 84471
// exit ;
84469: GO 84546
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84471: LD_ADDR_VAR 0 4
84475: PUSH
84476: LD_INT 22
84478: PUSH
84479: LD_VAR 0 2
84483: PUSH
84484: EMPTY
84485: LIST
84486: LIST
84487: PPUSH
84488: CALL_OW 69
84492: PUSH
84493: FOR_IN
84494: IFFALSE 84544
// begin un := UnitShoot ( i ) ;
84496: LD_ADDR_VAR 0 5
84500: PUSH
84501: LD_VAR 0 4
84505: PPUSH
84506: CALL_OW 504
84510: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84511: LD_VAR 0 5
84515: PPUSH
84516: CALL_OW 255
84520: PUSH
84521: LD_VAR 0 1
84525: EQUAL
84526: IFFALSE 84542
// begin result := un ;
84528: LD_ADDR_VAR 0 3
84532: PUSH
84533: LD_VAR 0 5
84537: ST_TO_ADDR
// exit ;
84538: POP
84539: POP
84540: GO 84546
// end ; end ;
84542: GO 84493
84544: POP
84545: POP
// end ;
84546: LD_VAR 0 3
84550: RET
// export function GetCargoBay ( units ) ; begin
84551: LD_INT 0
84553: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
84554: LD_ADDR_VAR 0 2
84558: PUSH
84559: LD_VAR 0 1
84563: PPUSH
84564: LD_INT 2
84566: PUSH
84567: LD_INT 34
84569: PUSH
84570: LD_INT 12
84572: PUSH
84573: EMPTY
84574: LIST
84575: LIST
84576: PUSH
84577: LD_INT 34
84579: PUSH
84580: LD_INT 51
84582: PUSH
84583: EMPTY
84584: LIST
84585: LIST
84586: PUSH
84587: LD_INT 34
84589: PUSH
84590: LD_INT 32
84592: PUSH
84593: EMPTY
84594: LIST
84595: LIST
84596: PUSH
84597: LD_INT 34
84599: PUSH
84600: LD_EXP 70
84604: PUSH
84605: EMPTY
84606: LIST
84607: LIST
84608: PUSH
84609: EMPTY
84610: LIST
84611: LIST
84612: LIST
84613: LIST
84614: LIST
84615: PPUSH
84616: CALL_OW 72
84620: ST_TO_ADDR
// end ; end_of_file
84621: LD_VAR 0 2
84625: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84626: LD_VAR 0 1
84630: PUSH
84631: LD_INT 200
84633: DOUBLE
84634: GREATEREQUAL
84635: IFFALSE 84643
84637: LD_INT 299
84639: DOUBLE
84640: LESSEQUAL
84641: IFTRUE 84645
84643: GO 84677
84645: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84646: LD_VAR 0 1
84650: PPUSH
84651: LD_VAR 0 2
84655: PPUSH
84656: LD_VAR 0 3
84660: PPUSH
84661: LD_VAR 0 4
84665: PPUSH
84666: LD_VAR 0 5
84670: PPUSH
84671: CALL 43087 0 5
84675: GO 84754
84677: LD_INT 300
84679: DOUBLE
84680: GREATEREQUAL
84681: IFFALSE 84689
84683: LD_INT 399
84685: DOUBLE
84686: LESSEQUAL
84687: IFTRUE 84691
84689: GO 84753
84691: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84692: LD_VAR 0 1
84696: PPUSH
84697: LD_VAR 0 2
84701: PPUSH
84702: LD_VAR 0 3
84706: PPUSH
84707: LD_VAR 0 4
84711: PPUSH
84712: LD_VAR 0 5
84716: PPUSH
84717: LD_VAR 0 6
84721: PPUSH
84722: LD_VAR 0 7
84726: PPUSH
84727: LD_VAR 0 8
84731: PPUSH
84732: LD_VAR 0 9
84736: PPUSH
84737: LD_VAR 0 10
84741: PPUSH
84742: LD_VAR 0 11
84746: PPUSH
84747: CALL 40975 0 11
84751: GO 84754
84753: POP
// end ;
84754: PPOPN 11
84756: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84757: LD_VAR 0 1
84761: PPUSH
84762: LD_VAR 0 2
84766: PPUSH
84767: LD_VAR 0 3
84771: PPUSH
84772: LD_VAR 0 4
84776: PPUSH
84777: LD_VAR 0 5
84781: PPUSH
84782: CALL 43069 0 5
// end ; end_of_file
84786: PPOPN 5
84788: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84789: LD_VAR 0 1
84793: PPUSH
84794: LD_VAR 0 2
84798: PPUSH
84799: LD_VAR 0 3
84803: PPUSH
84804: LD_VAR 0 4
84808: PPUSH
84809: LD_VAR 0 5
84813: PPUSH
84814: LD_VAR 0 6
84818: PPUSH
84819: CALL 29783 0 6
// end ;
84823: PPOPN 6
84825: END
