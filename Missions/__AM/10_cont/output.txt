// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 65
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 66
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 63
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 59
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 60
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 62
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// ruDepotConstructed := false ;
 254: LD_ADDR_EXP 57
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnRussians := false ;
 262: LD_ADDR_EXP 58
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// attackAvalaible = 1 ;
 270: LD_ADDR_EXP 64
 274: PUSH
 275: LD_INT 1
 277: ST_TO_ADDR
// mission_prefix := 10c_ ;
 278: LD_ADDR_EXP 54
 282: PUSH
 283: LD_STRING 10c_
 285: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 286: LD_ADDR_EXP 55
 290: PUSH
 291: LD_STRING 10_
 293: ST_TO_ADDR
// debugMode = 0 ;
 294: LD_ADDR_EXP 67
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// CreateNature ;
 302: CALL 26570 0 0
// PrepareDifficulty ;
 306: CALL 11239 0 0
// PrepareJMMTeam ;
 310: CALL 1358 0 0
// PrepareCathyTeam ;
 314: CALL 2505 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 318: LD_INT 24
 320: PPUSH
 321: LD_INT 1
 323: PUSH
 324: LD_OWVAR 67
 328: PLUS
 329: PPUSH
 330: CALL 21099 0 2
// if Difficulty > 1 then
 334: LD_OWVAR 67
 338: PUSH
 339: LD_INT 1
 341: GREATER
 342: IFFALSE 356
// PlaceMines ( MineField2 , Difficulty ) ;
 344: LD_INT 25
 346: PPUSH
 347: LD_OWVAR 67
 351: PPUSH
 352: CALL 21099 0 2
// if Difficulty > 2 then
 356: LD_OWVAR 67
 360: PUSH
 361: LD_INT 2
 363: GREATER
 364: IFFALSE 378
// PlaceMines ( MineField3 , Difficulty ) ;
 366: LD_INT 26
 368: PPUSH
 369: LD_OWVAR 67
 373: PPUSH
 374: CALL 21099 0 2
// PrepareArabianCommander ;
 378: CALL 3987 0 0
// PrepareArabian ;
 382: CALL 4039 0 0
// BuildArabianBase ;
 386: CALL 14054 0 0
// TameApemans ;
 390: CALL 19904 0 0
// end ;
 394: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 395: LD_EXP 67
 399: PUSH
 400: LD_INT 1
 402: EQUAL
 403: IFFALSE 709
 405: GO 407
 407: DISABLE
 408: LD_INT 0
 410: PPUSH
// begin enable ;
 411: ENABLE
// fogoff ( true ) ;
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 419: LD_ADDR_VAR 0 1
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 470
// SetLives ( i , 1000 ) ;
 456: LD_VAR 0 1
 460: PPUSH
 461: LD_INT 1000
 463: PPUSH
 464: CALL_OW 234
 468: GO 453
 470: POP
 471: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 472: LD_ADDR_VAR 0 1
 476: PUSH
 477: LD_INT 22
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 2
 489: PUSH
 490: LD_INT 30
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 30
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL_OW 69
 523: PUSH
 524: FOR_IN
 525: IFFALSE 549
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9999
 542: PPUSH
 543: CALL_OW 277
 547: GO 524
 549: POP
 550: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 551: LD_ADDR_VAR 0 1
 555: PUSH
 556: LD_INT 22
 558: PUSH
 559: LD_INT 1
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 30
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 30
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 69
 602: PUSH
 603: FOR_IN
 604: IFFALSE 628
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 606: LD_VAR 0 1
 610: PPUSH
 611: CALL_OW 274
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: LD_INT 9999
 621: PPUSH
 622: CALL_OW 277
 626: GO 603
 628: POP
 629: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 630: LD_ADDR_VAR 0 1
 634: PUSH
 635: LD_INT 22
 637: PUSH
 638: LD_INT 1
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 30
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 30
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PPUSH
 677: CALL_OW 69
 681: PUSH
 682: FOR_IN
 683: IFFALSE 707
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 685: LD_VAR 0 1
 689: PPUSH
 690: CALL_OW 274
 694: PPUSH
 695: LD_INT 3
 697: PPUSH
 698: LD_INT 9999
 700: PPUSH
 701: CALL_OW 277
 705: GO 682
 707: POP
 708: POP
// end ;
 709: PPOPN 1
 711: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 712: LD_INT 25
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: IFFALSE 739
 728: GO 730
 730: DISABLE
// snipersTrained := true ;
 731: LD_ADDR_EXP 62
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
 739: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: CALL_OW 81
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: PUSH
 755: LD_EXP 42
 759: AND
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 21
 773: PUSH
 774: LD_INT 3
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: LD_INT 0
 792: EQUAL
 793: AND
 794: IFFALSE 806
 796: GO 798
 798: DISABLE
// SetAchievement ( ACH_POWER ) ;
 799: LD_STRING ACH_POWER
 801: PPUSH
 802: CALL_OW 543
 806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 807: LD_INT 22
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: PUSH
 836: LD_INT 22
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 32
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: AND
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 30
 878: PUSH
 879: LD_INT 33
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PPUSH
 890: CALL_OW 69
 894: AND
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 30
 908: PUSH
 909: LD_INT 5
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 69
 924: AND
 925: PUSH
 926: LD_INT 22
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: LD_INT 30
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 69
 954: AND
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_INT 1
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 36
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PPUSH
 980: CALL_OW 69
 984: AND
 985: PUSH
 986: LD_INT 22
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 31
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: CALL_OW 69
1014: AND
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 1
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 30
1028: PUSH
1029: LD_INT 22
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PPUSH
1040: CALL_OW 69
1044: AND
1045: PUSH
1046: LD_INT 22
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_INT 20
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: AND
1075: PUSH
1076: LD_INT 22
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 19
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PPUSH
1100: CALL_OW 69
1104: AND
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 30
1118: PUSH
1119: LD_INT 16
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PPUSH
1130: CALL_OW 69
1134: AND
1135: PUSH
1136: LD_INT 22
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 30
1148: PUSH
1149: LD_INT 17
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 69
1164: AND
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 30
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: AND
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 30
1208: PUSH
1209: LD_INT 29
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL_OW 69
1224: AND
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 30
1238: PUSH
1239: LD_INT 30
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 69
1254: AND
1255: PUSH
1256: LD_INT 22
1258: PUSH
1259: LD_INT 1
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 30
1268: PUSH
1269: LD_INT 27
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PPUSH
1280: CALL_OW 69
1284: AND
1285: PUSH
1286: LD_INT 22
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 69
1314: AND
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 28
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: AND
1345: IFFALSE 1357
1347: GO 1349
1349: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1350: LD_STRING ACH_ARCH
1352: PPUSH
1353: CALL_OW 543
1357: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1358: LD_INT 0
1360: PPUSH
1361: PPUSH
1362: PPUSH
1363: PPUSH
1364: PPUSH
1365: PPUSH
// uc_side = 1 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 1
1373: ST_TO_ADDR
// uc_nation = 1 ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 1
1381: ST_TO_ADDR
// count = 0 ;
1382: LD_ADDR_VAR 0 6
1386: PUSH
1387: LD_INT 0
1389: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1390: LD_ADDR_EXP 1
1394: PUSH
1395: LD_STRING JMM
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 10_
1403: PPUSH
1404: CALL 46734 0 3
1408: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1409: LD_ADDR_EXP 20
1413: PUSH
1414: LD_EXP 20
1418: PUSH
1419: LD_EXP 1
1423: ADD
1424: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING Gary
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_STRING 10_
1438: PPUSH
1439: CALL 46734 0 3
1443: ST_TO_ADDR
// if Gary then
1444: LD_EXP 10
1448: IFFALSE 1466
// JMMSquad = JMMSquad ^ Gary ;
1450: LD_ADDR_EXP 20
1454: PUSH
1455: LD_EXP 20
1459: PUSH
1460: LD_EXP 10
1464: ADD
1465: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1466: LD_ADDR_EXP 5
1470: PUSH
1471: LD_STRING Cyrus
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_STRING 10_
1479: PPUSH
1480: CALL 46734 0 3
1484: ST_TO_ADDR
// if Cyrus then
1485: LD_EXP 5
1489: IFFALSE 1507
// JMMSquad = JMMSquad ^ Cyrus ;
1491: LD_ADDR_EXP 20
1495: PUSH
1496: LD_EXP 20
1500: PUSH
1501: LD_EXP 5
1505: ADD
1506: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1507: LD_ADDR_EXP 4
1511: PUSH
1512: LD_STRING Bobby
1514: PPUSH
1515: LD_INT 1
1517: PPUSH
1518: LD_STRING 10_
1520: PPUSH
1521: CALL 46734 0 3
1525: ST_TO_ADDR
// if Bobby then
1526: LD_EXP 4
1530: IFFALSE 1548
// JMMSquad = JMMSquad ^ Bobby ;
1532: LD_ADDR_EXP 20
1536: PUSH
1537: LD_EXP 20
1541: PUSH
1542: LD_EXP 4
1546: ADD
1547: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1548: LD_ADDR_EXP 6
1552: PUSH
1553: LD_STRING Lisa
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_STRING 10_
1561: PPUSH
1562: CALL 46734 0 3
1566: ST_TO_ADDR
// if Lisa then
1567: LD_EXP 6
1571: IFFALSE 1589
// JMMSquad = JMMSquad ^ Lisa ;
1573: LD_ADDR_EXP 20
1577: PUSH
1578: LD_EXP 20
1582: PUSH
1583: LD_EXP 6
1587: ADD
1588: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1589: LD_ADDR_EXP 2
1593: PUSH
1594: LD_STRING Brown
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_STRING 10_
1602: PPUSH
1603: CALL 46734 0 3
1607: ST_TO_ADDR
// if Brown then
1608: LD_EXP 2
1612: IFFALSE 1630
// JMMSquad = JMMSquad ^ Brown ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_EXP 20
1623: PUSH
1624: LD_EXP 2
1628: ADD
1629: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1630: LD_ADDR_EXP 3
1634: PUSH
1635: LD_STRING Donaldson
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: LD_STRING 10_
1643: PPUSH
1644: CALL 46734 0 3
1648: ST_TO_ADDR
// if Donaldson then
1649: LD_EXP 3
1653: IFFALSE 1671
// JMMSquad = JMMSquad ^ Donaldson ;
1655: LD_ADDR_EXP 20
1659: PUSH
1660: LD_EXP 20
1664: PUSH
1665: LD_EXP 3
1669: ADD
1670: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1671: LD_ADDR_EXP 7
1675: PUSH
1676: LD_STRING Frank
1678: PPUSH
1679: LD_INT 1
1681: PPUSH
1682: LD_STRING 10_
1684: PPUSH
1685: CALL 46734 0 3
1689: ST_TO_ADDR
// if Frank then
1690: LD_EXP 7
1694: IFFALSE 1712
// JMMSquad = JMMSquad ^ Frank ;
1696: LD_ADDR_EXP 20
1700: PUSH
1701: LD_EXP 20
1705: PUSH
1706: LD_EXP 7
1710: ADD
1711: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1712: LD_ADDR_EXP 9
1716: PUSH
1717: LD_STRING Houten
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_STRING 10_
1725: PPUSH
1726: CALL 46734 0 3
1730: ST_TO_ADDR
// if Houten then
1731: LD_EXP 9
1735: IFFALSE 1753
// JMMSquad = JMMSquad ^ Houten ;
1737: LD_ADDR_EXP 20
1741: PUSH
1742: LD_EXP 20
1746: PUSH
1747: LD_EXP 9
1751: ADD
1752: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1753: LD_ADDR_EXP 21
1757: PUSH
1758: LD_STRING OthersIn10
1760: PPUSH
1761: CALL_OW 31
1765: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1766: LD_ADDR_EXP 24
1770: PUSH
1771: LD_STRING Powell
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 46734 0 3
1784: ST_TO_ADDR
// for i in JMMSquad do
1785: LD_ADDR_VAR 0 2
1789: PUSH
1790: LD_EXP 20
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2076
// begin if count < 3 then
1798: LD_VAR 0 6
1802: PUSH
1803: LD_INT 3
1805: LESS
1806: IFFALSE 1923
// begin vc_engine = 1 ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control = 1 ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_weapon = 12 ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 12
1831: ST_TO_ADDR
// vc_chassis = 3 ;
1832: LD_ADDR_OWVAR 37
1836: PUSH
1837: LD_INT 3
1839: ST_TO_ADDR
// veh = CreateVehicle ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1850: LD_VAR 0 4
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 2
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 49
// if count mod 2 = 0 then
1877: LD_VAR 0 6
1881: PUSH
1882: LD_INT 2
1884: MOD
1885: PUSH
1886: LD_INT 0
1888: EQUAL
1889: IFFALSE 1908
// AddCargo ( veh , 1 , 100 ) else
1891: LD_VAR 0 4
1895: PPUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_INT 100
1901: PPUSH
1902: CALL_OW 291
1906: GO 1923
// AddCargo ( veh , 3 , 100 ) end ;
1908: LD_VAR 0 4
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: LD_INT 100
1918: PPUSH
1919: CALL_OW 291
// if count >= 3 then
1923: LD_VAR 0 6
1927: PUSH
1928: LD_INT 3
1930: GREATEREQUAL
1931: IFFALSE 2046
// begin vc_engine = 1 ;
1933: LD_ADDR_OWVAR 39
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// vc_control = 1 ;
1941: LD_ADDR_OWVAR 38
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1949: LD_ADDR_OWVAR 40
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: LD_INT 4
1959: PUSH
1960: LD_INT 5
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: CALL_OW 12
1978: ARRAY
1979: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1980: LD_ADDR_OWVAR 37
1984: PUSH
1985: LD_INT 2
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: MOD
2003: PUSH
2004: LD_INT 1
2006: PLUS
2007: ARRAY
2008: ST_TO_ADDR
// veh = CreateVehicle ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 45
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ; count = count + 1 ;
2046: LD_ADDR_VAR 0 6
2050: PUSH
2051: LD_VAR 0 6
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 4
2069: PPUSH
2070: CALL_OW 52
// end ;
2074: GO 1795
2076: POP
2077: POP
// for i in others10 do
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: LD_EXP 21
2087: PUSH
2088: FOR_IN
2089: IFFALSE 2236
// begin vc_engine = 1 ;
2091: LD_ADDR_OWVAR 39
2095: PUSH
2096: LD_INT 1
2098: ST_TO_ADDR
// vc_control = 1 ;
2099: LD_ADDR_OWVAR 38
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2107: LD_ADDR_OWVAR 40
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 4
2117: PUSH
2118: LD_INT 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 1
2128: PPUSH
2129: LD_INT 3
2131: PPUSH
2132: CALL_OW 12
2136: ARRAY
2137: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2138: LD_ADDR_OWVAR 37
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: PUSH
2153: LD_VAR 0 2
2157: PUSH
2158: LD_INT 2
2160: MOD
2161: PUSH
2162: LD_INT 1
2164: PLUS
2165: ARRAY
2166: ST_TO_ADDR
// veh = CreateVehicle ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: CALL_OW 45
2176: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2177: LD_VAR 0 4
2181: PPUSH
2182: LD_INT 1
2184: PPUSH
2185: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2189: LD_VAR 0 4
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2204: LD_ADDR_EXP 28
2208: PUSH
2209: LD_EXP 28
2213: PUSH
2214: LD_VAR 0 4
2218: ADD
2219: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 4
2229: PPUSH
2230: CALL_OW 52
// end ;
2234: GO 2088
2236: POP
2237: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2238: LD_INT 22
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 21
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PPUSH
2262: CALL_OW 69
2266: PPUSH
2267: LD_INT 1
2269: PPUSH
2270: CALL_OW 336
// end ;
2274: LD_VAR 0 1
2278: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2279: LD_INT 0
2281: PPUSH
2282: PPUSH
2283: PPUSH
2284: PPUSH
2285: PPUSH
// uc_side = 1 ;
2286: LD_ADDR_OWVAR 20
2290: PUSH
2291: LD_INT 1
2293: ST_TO_ADDR
// uc_nation = 1 ;
2294: LD_ADDR_OWVAR 21
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// for i := 1 to 10 do
2302: LD_ADDR_VAR 0 2
2306: PUSH
2307: DOUBLE
2308: LD_INT 1
2310: DEC
2311: ST_TO_ADDR
2312: LD_INT 10
2314: PUSH
2315: FOR_TO
2316: IFFALSE 2498
// begin vc_engine = 1 ;
2318: LD_ADDR_OWVAR 39
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// vc_control = 1 ;
2326: LD_ADDR_OWVAR 38
2330: PUSH
2331: LD_INT 1
2333: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2334: LD_ADDR_OWVAR 40
2338: PUSH
2339: LD_INT 3
2341: PUSH
2342: LD_INT 4
2344: PUSH
2345: LD_INT 5
2347: PUSH
2348: LD_INT 12
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: ST_TO_ADDR
// vc_chassis = 3 ;
2369: LD_ADDR_OWVAR 37
2373: PUSH
2374: LD_INT 3
2376: ST_TO_ADDR
// veh = CreateVehicle ;
2377: LD_ADDR_VAR 0 3
2381: PUSH
2382: CALL_OW 45
2386: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2387: LD_VAR 0 3
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2399: LD_VAR 0 3
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: LD_INT 0
2409: PPUSH
2410: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2414: LD_ADDR_EXP 28
2418: PUSH
2419: LD_EXP 28
2423: PUSH
2424: LD_VAR 0 3
2428: ADD
2429: ST_TO_ADDR
// if vc_weapon = 12 then
2430: LD_OWVAR 40
2434: PUSH
2435: LD_INT 12
2437: EQUAL
2438: IFFALSE 2496
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2440: LD_ADDR_VAR 0 4
2444: PUSH
2445: LD_INT 5
2447: PPUSH
2448: LD_INT 10
2450: PPUSH
2451: CALL_OW 12
2455: PUSH
2456: LD_INT 10
2458: MUL
2459: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2460: LD_VAR 0 3
2464: PPUSH
2465: LD_INT 1
2467: PUSH
2468: LD_INT 3
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 2
2480: PPUSH
2481: CALL_OW 12
2485: ARRAY
2486: PPUSH
2487: LD_VAR 0 4
2491: PPUSH
2492: CALL_OW 291
// end ; end ;
2496: GO 2315
2498: POP
2499: POP
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2505: LD_INT 0
2507: PPUSH
2508: PPUSH
2509: PPUSH
// uc_side = 4 ;
2510: LD_ADDR_OWVAR 20
2514: PUSH
2515: LD_INT 4
2517: ST_TO_ADDR
// uc_nation = 1 ;
2518: LD_ADDR_OWVAR 21
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2526: LD_ADDR_EXP 11
2530: PUSH
2531: LD_STRING Simms
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_STRING 
2539: PPUSH
2540: CALL 46734 0 3
2544: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2545: LD_ADDR_EXP 12
2549: PUSH
2550: LD_STRING Denis
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: LD_STRING 08_
2558: PPUSH
2559: CALL 46734 0 3
2563: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2564: LD_ADDR_EXP 13
2568: PUSH
2569: LD_STRING Joan
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: LD_STRING 08_
2577: PPUSH
2578: CALL 46734 0 3
2582: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2583: LD_STRING 08_Khatam
2585: PPUSH
2586: CALL_OW 28
2590: IFFALSE 2613
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2592: LD_ADDR_EXP 14
2596: PUSH
2597: LD_STRING Khatam
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_STRING 08_
2605: PPUSH
2606: CALL 46734 0 3
2610: ST_TO_ADDR
2611: GO 2641
// if TestCharacters ( 03_Khatam ) then
2613: LD_STRING 03_Khatam
2615: PPUSH
2616: CALL_OW 28
2620: IFFALSE 2641
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2622: LD_ADDR_EXP 14
2626: PUSH
2627: LD_STRING Khatam
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: LD_STRING 03_
2635: PPUSH
2636: CALL 46734 0 3
2640: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2641: LD_ADDR_EXP 15
2645: PUSH
2646: LD_STRING Gladstone
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: LD_STRING 08_
2654: PPUSH
2655: CALL 46734 0 3
2659: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2660: LD_ADDR_EXP 17
2664: PUSH
2665: LD_STRING DeltaDoctor
2667: PPUSH
2668: LD_INT 1
2670: PPUSH
2671: LD_STRING 
2673: PPUSH
2674: CALL 46734 0 3
2678: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2679: LD_ADDR_EXP 7
2683: PUSH
2684: LD_STRING Frank
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: LD_STRING 08_
2692: PPUSH
2693: CALL 46734 0 3
2697: ST_TO_ADDR
// if Frank then
2698: LD_EXP 7
2702: IFFALSE 2725
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2704: LD_ADDR_EXP 8
2708: PUSH
2709: LD_STRING Yamoko
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: LD_STRING 
2717: PPUSH
2718: CALL 46734 0 3
2722: ST_TO_ADDR
2723: GO 2744
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2725: LD_ADDR_EXP 8
2729: PUSH
2730: LD_STRING Kikuchi
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_STRING 08_
2738: PPUSH
2739: CALL 46734 0 3
2743: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2744: LD_ADDR_EXP 22
2748: PUSH
2749: LD_STRING 09_others
2751: PPUSH
2752: CALL_OW 31
2756: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2757: LD_ADDR_EXP 23
2761: PUSH
2762: LD_STRING 09_apes
2764: PPUSH
2765: CALL_OW 31
2769: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2770: LD_EXP 11
2774: PPUSH
2775: LD_INT 1
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2785: LD_EXP 12
2789: PPUSH
2790: LD_INT 1
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2800: LD_EXP 13
2804: PPUSH
2805: LD_INT 1
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2815: LD_EXP 14
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: LD_INT 0
2825: PPUSH
2826: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2830: LD_EXP 15
2834: PPUSH
2835: LD_INT 1
2837: PPUSH
2838: LD_INT 0
2840: PPUSH
2841: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2845: LD_EXP 17
2849: PPUSH
2850: LD_INT 1
2852: PPUSH
2853: LD_INT 0
2855: PPUSH
2856: CALL_OW 49
// if Kikuchi then
2860: LD_EXP 8
2864: IFFALSE 2881
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2866: LD_EXP 8
2870: PPUSH
2871: LD_INT 1
2873: PPUSH
2874: LD_INT 0
2876: PPUSH
2877: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2881: LD_EXP 11
2885: PUSH
2886: LD_EXP 14
2890: PUSH
2891: LD_EXP 12
2895: PUSH
2896: LD_EXP 15
2900: PUSH
2901: LD_EXP 17
2905: PUSH
2906: LD_EXP 13
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: PPUSH
2919: LD_INT 4
2921: PPUSH
2922: CALL_OW 336
// if others09 > 2 then
2926: LD_EXP 22
2930: PUSH
2931: LD_INT 2
2933: GREATER
2934: IFFALSE 3015
// begin for i := 1 to 3 do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: DOUBLE
2942: LD_INT 1
2944: DEC
2945: ST_TO_ADDR
2946: LD_INT 3
2948: PUSH
2949: FOR_TO
2950: IFFALSE 3011
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2952: LD_EXP 22
2956: PUSH
2957: LD_VAR 0 2
2961: ARRAY
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 0
2968: PPUSH
2969: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2973: LD_ADDR_EXP 22
2977: PUSH
2978: LD_EXP 22
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: CALL_OW 3
2990: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2991: LD_EXP 22
2995: PUSH
2996: LD_VAR 0 2
3000: ARRAY
3001: PPUSH
3002: LD_INT 2
3004: PPUSH
3005: CALL_OW 336
// end ;
3009: GO 2949
3011: POP
3012: POP
// end else
3013: GO 3075
// begin for i in others09 do
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_EXP 22
3024: PUSH
3025: FOR_IN
3026: IFFALSE 3073
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3028: LD_VAR 0 2
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 0
3038: PPUSH
3039: CALL_OW 49
// others09 = others09 diff i ;
3043: LD_ADDR_EXP 22
3047: PUSH
3048: LD_EXP 22
3052: PUSH
3053: LD_VAR 0 2
3057: DIFF
3058: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 2
3066: PPUSH
3067: CALL_OW 336
// end ;
3071: GO 3025
3073: POP
3074: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3075: LD_INT 22
3077: PUSH
3078: LD_INT 4
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 25
3087: PUSH
3088: LD_INT 2
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 69
3103: PUSH
3104: LD_INT 0
3106: EQUAL
3107: IFFALSE 3239
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3109: LD_ADDR_VAR 0 3
3113: PUSH
3114: LD_INT 22
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PUSH
3124: LD_INT 25
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 69
3142: PUSH
3143: LD_EXP 11
3147: PUSH
3148: LD_EXP 14
3152: PUSH
3153: LD_EXP 12
3157: PUSH
3158: LD_EXP 15
3162: PUSH
3163: LD_EXP 17
3167: PUSH
3168: LD_EXP 13
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: DIFF
3181: ST_TO_ADDR
// if not tmp then
3182: LD_VAR 0 3
3186: NOT
3187: IFFALSE 3223
// begin if Denis then
3189: LD_EXP 12
3193: IFFALSE 3209
// SetClass ( Denis , 2 ) else
3195: LD_EXP 12
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 336
3207: GO 3221
// SetClass ( DeltaDoctor , 2 ) ;
3209: LD_EXP 17
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: CALL_OW 336
// end else
3221: GO 3239
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3223: LD_VAR 0 3
3227: PUSH
3228: LD_INT 1
3230: ARRAY
3231: PPUSH
3232: LD_INT 2
3234: PPUSH
3235: CALL_OW 336
// end ; end ; for i in ape09 do
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_EXP 23
3248: PUSH
3249: FOR_IN
3250: IFFALSE 3269
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3252: LD_VAR 0 2
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 0
3262: PPUSH
3263: CALL_OW 49
3267: GO 3249
3269: POP
3270: POP
// uc_side = 4 ;
3271: LD_ADDR_OWVAR 20
3275: PUSH
3276: LD_INT 4
3278: ST_TO_ADDR
// hc_class := 1 ;
3279: LD_ADDR_OWVAR 28
3283: PUSH
3284: LD_INT 1
3286: ST_TO_ADDR
// hc_sex := sex_female ;
3287: LD_ADDR_OWVAR 27
3291: PUSH
3292: LD_INT 2
3294: ST_TO_ADDR
// hc_gallery :=  ;
3295: LD_ADDR_OWVAR 33
3299: PUSH
3300: LD_STRING 
3302: ST_TO_ADDR
// hc_name :=  ;
3303: LD_ADDR_OWVAR 26
3307: PUSH
3308: LD_STRING 
3310: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3311: LD_ADDR_OWVAR 31
3315: PUSH
3316: LD_INT 1
3318: PUSH
3319: LD_INT 7
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: ST_TO_ADDR
// AmScout = CreateHuman ;
3334: LD_ADDR_EXP 18
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// end ;
3344: LD_VAR 0 1
3348: RET
// export function PrepareCornell ; begin
3349: LD_INT 0
3351: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3352: LD_INT 4
3354: PPUSH
3355: LD_INT 4
3357: PPUSH
3358: CALL_OW 343
// uc_side = 4 ;
3362: LD_ADDR_OWVAR 20
3366: PUSH
3367: LD_INT 4
3369: ST_TO_ADDR
// uc_nation = 1 ;
3370: LD_ADDR_OWVAR 21
3374: PUSH
3375: LD_INT 1
3377: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3378: LD_ADDR_EXP 19
3382: PUSH
3383: LD_STRING Cornel
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_STRING 03_
3391: PPUSH
3392: CALL 46734 0 3
3396: ST_TO_ADDR
// if not Cornell then
3397: LD_EXP 19
3401: NOT
3402: IFFALSE 3406
// exit ;
3404: GO 3514
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3406: LD_EXP 19
3410: PPUSH
3411: LD_INT 8
3413: PPUSH
3414: LD_INT 0
3416: PPUSH
3417: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3421: LD_EXP 19
3425: PPUSH
3426: LD_INT 350
3428: PPUSH
3429: CALL_OW 234
// if IsInUnit ( JMM ) then
3433: LD_EXP 1
3437: PPUSH
3438: CALL_OW 310
3442: IFFALSE 3485
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3444: LD_EXP 19
3448: PPUSH
3449: LD_EXP 1
3453: PPUSH
3454: CALL_OW 310
3458: PPUSH
3459: CALL_OW 250
3463: PPUSH
3464: LD_EXP 1
3468: PPUSH
3469: CALL_OW 310
3473: PPUSH
3474: CALL_OW 251
3478: PPUSH
3479: CALL_OW 111
3483: GO 3514
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3485: LD_EXP 19
3489: PPUSH
3490: LD_EXP 1
3494: PPUSH
3495: CALL_OW 250
3499: PPUSH
3500: LD_EXP 1
3504: PPUSH
3505: CALL_OW 251
3509: PPUSH
3510: CALL_OW 111
// end ; end_of_file
3514: LD_VAR 0 1
3518: RET
// export function PrepareRussians ; var i , un ; begin
3519: LD_INT 0
3521: PPUSH
3522: PPUSH
3523: PPUSH
// uc_side = 3 ;
3524: LD_ADDR_OWVAR 20
3528: PUSH
3529: LD_INT 3
3531: ST_TO_ADDR
// uc_nation = 3 ;
3532: LD_ADDR_OWVAR 21
3536: PUSH
3537: LD_INT 3
3539: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3540: LD_ADDR_EXP 25
3544: PUSH
3545: LD_STRING Tsaritsyn
3547: PPUSH
3548: LD_INT 0
3550: PPUSH
3551: LD_STRING 
3553: PPUSH
3554: CALL 46734 0 3
3558: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3559: LD_EXP 25
3563: PPUSH
3564: LD_INT 3
3566: PPUSH
3567: LD_INT 0
3569: PPUSH
3570: CALL_OW 49
// for i = 1 to 14 do
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: DOUBLE
3580: LD_INT 1
3582: DEC
3583: ST_TO_ADDR
3584: LD_INT 14
3586: PUSH
3587: FOR_TO
3588: IFFALSE 3674
// begin uc_side = 3 ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_INT 3
3597: ST_TO_ADDR
// uc_nation = 3 ;
3598: LD_ADDR_OWVAR 21
3602: PUSH
3603: LD_INT 3
3605: ST_TO_ADDR
// hc_gallery =  ;
3606: LD_ADDR_OWVAR 33
3610: PUSH
3611: LD_STRING 
3613: ST_TO_ADDR
// hc_name =  ;
3614: LD_ADDR_OWVAR 26
3618: PUSH
3619: LD_STRING 
3621: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3622: LD_INT 0
3624: PPUSH
3625: LD_INT 1
3627: PPUSH
3628: LD_EXP 36
3632: PPUSH
3633: LD_EXP 37
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: CALL_OW 380
// un = CreateHuman ;
3647: LD_ADDR_VAR 0 3
3651: PUSH
3652: CALL_OW 44
3656: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3657: LD_VAR 0 3
3661: PPUSH
3662: LD_INT 3
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 49
// end ;
3672: GO 3587
3674: POP
3675: POP
// for i = 1 to 6 do
3676: LD_ADDR_VAR 0 2
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 6
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3776
// begin uc_side = 3 ;
3692: LD_ADDR_OWVAR 20
3696: PUSH
3697: LD_INT 3
3699: ST_TO_ADDR
// uc_nation = 3 ;
3700: LD_ADDR_OWVAR 21
3704: PUSH
3705: LD_INT 3
3707: ST_TO_ADDR
// hc_gallery =  ;
3708: LD_ADDR_OWVAR 33
3712: PUSH
3713: LD_STRING 
3715: ST_TO_ADDR
// hc_name =  ;
3716: LD_ADDR_OWVAR 26
3720: PUSH
3721: LD_STRING 
3723: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3724: LD_INT 0
3726: PPUSH
3727: LD_INT 2
3729: PPUSH
3730: LD_EXP 36
3734: PPUSH
3735: LD_EXP 37
3739: PPUSH
3740: CALL_OW 12
3744: PPUSH
3745: CALL_OW 380
// un = CreateHuman ;
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: CALL_OW 44
3758: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3759: LD_VAR 0 3
3763: PPUSH
3764: LD_INT 3
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 49
// end ;
3774: GO 3689
3776: POP
3777: POP
// for i = 1 to 6 do
3778: LD_ADDR_VAR 0 2
3782: PUSH
3783: DOUBLE
3784: LD_INT 1
3786: DEC
3787: ST_TO_ADDR
3788: LD_INT 6
3790: PUSH
3791: FOR_TO
3792: IFFALSE 3878
// begin uc_side = 3 ;
3794: LD_ADDR_OWVAR 20
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// uc_nation = 3 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 3
3809: ST_TO_ADDR
// hc_gallery =  ;
3810: LD_ADDR_OWVAR 33
3814: PUSH
3815: LD_STRING 
3817: ST_TO_ADDR
// hc_name =  ;
3818: LD_ADDR_OWVAR 26
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3826: LD_INT 0
3828: PPUSH
3829: LD_INT 3
3831: PPUSH
3832: LD_EXP 36
3836: PPUSH
3837: LD_EXP 37
3841: PPUSH
3842: CALL_OW 12
3846: PPUSH
3847: CALL_OW 380
// un = CreateHuman ;
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: CALL_OW 44
3860: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3861: LD_VAR 0 3
3865: PPUSH
3866: LD_INT 3
3868: PPUSH
3869: LD_INT 0
3871: PPUSH
3872: CALL_OW 49
// end ;
3876: GO 3791
3878: POP
3879: POP
// for i = 1 to 4 do
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: DOUBLE
3886: LD_INT 1
3888: DEC
3889: ST_TO_ADDR
3890: LD_INT 4
3892: PUSH
3893: FOR_TO
3894: IFFALSE 3980
// begin uc_side = 3 ;
3896: LD_ADDR_OWVAR 20
3900: PUSH
3901: LD_INT 3
3903: ST_TO_ADDR
// uc_nation = 3 ;
3904: LD_ADDR_OWVAR 21
3908: PUSH
3909: LD_INT 3
3911: ST_TO_ADDR
// hc_gallery =  ;
3912: LD_ADDR_OWVAR 33
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// hc_name =  ;
3920: LD_ADDR_OWVAR 26
3924: PUSH
3925: LD_STRING 
3927: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3928: LD_INT 0
3930: PPUSH
3931: LD_INT 4
3933: PPUSH
3934: LD_EXP 36
3938: PPUSH
3939: LD_EXP 37
3943: PPUSH
3944: CALL_OW 12
3948: PPUSH
3949: CALL_OW 380
// un = CreateHuman ;
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: CALL_OW 44
3962: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3963: LD_VAR 0 3
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: CALL_OW 49
// end ;
3978: GO 3893
3980: POP
3981: POP
// end ; end_of_file
3982: LD_VAR 0 1
3986: RET
// export function PrepareArabianCommander ; begin
3987: LD_INT 0
3989: PPUSH
// uc_side = 2 ;
3990: LD_ADDR_OWVAR 20
3994: PUSH
3995: LD_INT 2
3997: ST_TO_ADDR
// uc_nation = 2 ;
3998: LD_ADDR_OWVAR 21
4002: PUSH
4003: LD_INT 2
4005: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4006: LD_ADDR_EXP 26
4010: PUSH
4011: LD_STRING Dietrich
4013: PPUSH
4014: CALL_OW 25
4018: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4019: LD_EXP 26
4023: PPUSH
4024: LD_INT 4
4026: PPUSH
4027: LD_INT 0
4029: PPUSH
4030: CALL_OW 49
// end ;
4034: LD_VAR 0 1
4038: RET
// export function PrepareArabian ; var i , un , veh ; begin
4039: LD_INT 0
4041: PPUSH
4042: PPUSH
4043: PPUSH
4044: PPUSH
// uc_side := 2 ;
4045: LD_ADDR_OWVAR 20
4049: PUSH
4050: LD_INT 2
4052: ST_TO_ADDR
// uc_nation := 2 ;
4053: LD_ADDR_OWVAR 21
4057: PUSH
4058: LD_INT 2
4060: ST_TO_ADDR
// if not Ahmed then
4061: LD_EXP 27
4065: NOT
4066: IFFALSE 4134
// begin InitHc ;
4068: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_EXP 36
4082: PPUSH
4083: LD_EXP 37
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: PPUSH
4092: CALL_OW 12
4096: PPUSH
4097: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4101: LD_ADDR_OWVAR 26
4105: PUSH
4106: LD_STRING Ahmed Abbasid
4108: ST_TO_ADDR
// Ahmed := CreateHuman ;
4109: LD_ADDR_EXP 27
4113: PUSH
4114: CALL_OW 44
4118: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4119: LD_EXP 27
4123: PPUSH
4124: LD_INT 4
4126: PPUSH
4127: LD_INT 0
4129: PPUSH
4130: CALL_OW 49
// end ; for i = 1 to 4 do
4134: LD_ADDR_VAR 0 2
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_INT 4
4146: PUSH
4147: FOR_TO
4148: IFFALSE 4234
// begin uc_side = 2 ;
4150: LD_ADDR_OWVAR 20
4154: PUSH
4155: LD_INT 2
4157: ST_TO_ADDR
// uc_nation = 2 ;
4158: LD_ADDR_OWVAR 21
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
// hc_gallery =  ;
4166: LD_ADDR_OWVAR 33
4170: PUSH
4171: LD_STRING 
4173: ST_TO_ADDR
// hc_name =  ;
4174: LD_ADDR_OWVAR 26
4178: PUSH
4179: LD_STRING 
4181: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4182: LD_INT 0
4184: PPUSH
4185: LD_INT 2
4187: PPUSH
4188: LD_EXP 36
4192: PPUSH
4193: LD_EXP 37
4197: PPUSH
4198: CALL_OW 12
4202: PPUSH
4203: CALL_OW 380
// un = CreateHuman ;
4207: LD_ADDR_VAR 0 3
4211: PUSH
4212: CALL_OW 44
4216: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4217: LD_VAR 0 3
4221: PPUSH
4222: LD_INT 4
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 49
// end ;
4232: GO 4147
4234: POP
4235: POP
// for i = 1 to 5 do
4236: LD_ADDR_VAR 0 2
4240: PUSH
4241: DOUBLE
4242: LD_INT 1
4244: DEC
4245: ST_TO_ADDR
4246: LD_INT 5
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4336
// begin uc_side = 2 ;
4252: LD_ADDR_OWVAR 20
4256: PUSH
4257: LD_INT 2
4259: ST_TO_ADDR
// uc_nation = 2 ;
4260: LD_ADDR_OWVAR 21
4264: PUSH
4265: LD_INT 2
4267: ST_TO_ADDR
// hc_gallery =  ;
4268: LD_ADDR_OWVAR 33
4272: PUSH
4273: LD_STRING 
4275: ST_TO_ADDR
// hc_name =  ;
4276: LD_ADDR_OWVAR 26
4280: PUSH
4281: LD_STRING 
4283: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4284: LD_INT 0
4286: PPUSH
4287: LD_INT 1
4289: PPUSH
4290: LD_EXP 36
4294: PPUSH
4295: LD_EXP 37
4299: PPUSH
4300: CALL_OW 12
4304: PPUSH
4305: CALL_OW 380
// un = CreateHuman ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: CALL_OW 44
4318: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_INT 4
4326: PPUSH
4327: LD_INT 0
4329: PPUSH
4330: CALL_OW 49
// end ;
4334: GO 4249
4336: POP
4337: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
4338: LD_ADDR_VAR 0 2
4342: PUSH
4343: DOUBLE
4344: LD_INT 1
4346: DEC
4347: ST_TO_ADDR
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_OWVAR 67
4366: ARRAY
4367: PUSH
4368: FOR_TO
4369: IFFALSE 4455
// begin uc_side = 2 ;
4371: LD_ADDR_OWVAR 20
4375: PUSH
4376: LD_INT 2
4378: ST_TO_ADDR
// uc_nation = 2 ;
4379: LD_ADDR_OWVAR 21
4383: PUSH
4384: LD_INT 2
4386: ST_TO_ADDR
// hc_gallery =  ;
4387: LD_ADDR_OWVAR 33
4391: PUSH
4392: LD_STRING 
4394: ST_TO_ADDR
// hc_name =  ;
4395: LD_ADDR_OWVAR 26
4399: PUSH
4400: LD_STRING 
4402: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4403: LD_INT 0
4405: PPUSH
4406: LD_INT 4
4408: PPUSH
4409: LD_EXP 36
4413: PPUSH
4414: LD_EXP 37
4418: PPUSH
4419: CALL_OW 12
4423: PPUSH
4424: CALL_OW 380
// un = CreateHuman ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4438: LD_VAR 0 3
4442: PPUSH
4443: LD_INT 4
4445: PPUSH
4446: LD_INT 0
4448: PPUSH
4449: CALL_OW 49
// end ;
4453: GO 4368
4455: POP
4456: POP
// for i = 1 to 2 do
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: DOUBLE
4463: LD_INT 1
4465: DEC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4601
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4473: LD_ADDR_VAR 0 4
4477: PUSH
4478: LD_INT 22
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 21
4490: PUSH
4491: LD_INT 2
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 58
4500: PUSH
4501: EMPTY
4502: LIST
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: PPUSH
4509: CALL_OW 69
4513: ST_TO_ADDR
// uc_side = 2 ;
4514: LD_ADDR_OWVAR 20
4518: PUSH
4519: LD_INT 2
4521: ST_TO_ADDR
// uc_nation = 2 ;
4522: LD_ADDR_OWVAR 21
4526: PUSH
4527: LD_INT 2
4529: ST_TO_ADDR
// hc_gallery =  ;
4530: LD_ADDR_OWVAR 33
4534: PUSH
4535: LD_STRING 
4537: ST_TO_ADDR
// hc_name =  ;
4538: LD_ADDR_OWVAR 26
4542: PUSH
4543: LD_STRING 
4545: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 3
4551: PPUSH
4552: LD_EXP 36
4556: PPUSH
4557: LD_EXP 37
4561: PPUSH
4562: CALL_OW 12
4566: PPUSH
4567: CALL_OW 380
// un = CreateHuman ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: CALL_OW 44
4580: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4581: LD_VAR 0 3
4585: PPUSH
4586: LD_VAR 0 4
4590: PUSH
4591: LD_INT 1
4593: ARRAY
4594: PPUSH
4595: CALL_OW 52
// end ;
4599: GO 4470
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
4614: PPUSH
4615: PPUSH
// for i := 1 to 2 do
4616: LD_ADDR_VAR 0 2
4620: PUSH
4621: DOUBLE
4622: LD_INT 1
4624: DEC
4625: ST_TO_ADDR
4626: LD_INT 2
4628: PUSH
4629: FOR_TO
4630: IFFALSE 4756
// begin uc_side = 5 ;
4632: LD_ADDR_OWVAR 20
4636: PUSH
4637: LD_INT 5
4639: ST_TO_ADDR
// uc_nation = 2 ;
4640: LD_ADDR_OWVAR 21
4644: PUSH
4645: LD_INT 2
4647: ST_TO_ADDR
// vc_chassis := 31 ;
4648: LD_ADDR_OWVAR 37
4652: PUSH
4653: LD_INT 31
4655: ST_TO_ADDR
// vc_control := control_rider ;
4656: LD_ADDR_OWVAR 38
4660: PUSH
4661: LD_INT 4
4663: ST_TO_ADDR
// animal := CreateVehicle ;
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: CALL_OW 45
4673: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4674: LD_VAR 0 3
4678: PPUSH
4679: LD_INT 7
4681: PPUSH
4682: LD_INT 0
4684: PPUSH
4685: CALL_OW 49
// hc_gallery =  ;
4689: LD_ADDR_OWVAR 33
4693: PUSH
4694: LD_STRING 
4696: ST_TO_ADDR
// hc_name =  ;
4697: LD_ADDR_OWVAR 26
4701: PUSH
4702: LD_STRING 
4704: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4705: LD_INT 0
4707: PPUSH
4708: LD_INT 11
4710: PPUSH
4711: LD_EXP 36
4715: PPUSH
4716: LD_EXP 37
4720: PPUSH
4721: CALL_OW 12
4725: PPUSH
4726: CALL_OW 380
// un = CreateHuman ;
4730: LD_ADDR_VAR 0 4
4734: PUSH
4735: CALL_OW 44
4739: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4740: LD_VAR 0 4
4744: PPUSH
4745: LD_VAR 0 3
4749: PPUSH
4750: CALL_OW 52
// end ;
4754: GO 4629
4756: POP
4757: POP
// repeat wait ( 0 0$1 ) ;
4758: LD_INT 35
4760: PPUSH
4761: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4765: LD_ADDR_VAR 0 5
4769: PUSH
4770: LD_INT 22
4772: PUSH
4773: LD_INT 1
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PPUSH
4780: CALL_OW 69
4784: PPUSH
4785: LD_VAR 0 2
4789: PPUSH
4790: CALL_OW 74
4794: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4795: LD_ADDR_VAR 0 6
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 1
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 2
4812: PUSH
4813: LD_INT 59
4815: PUSH
4816: EMPTY
4817: LIST
4818: PUSH
4819: LD_INT 21
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 21
4831: PUSH
4832: LD_INT 2
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: PPUSH
4852: CALL_OW 69
4856: PPUSH
4857: LD_VAR 0 2
4861: PPUSH
4862: CALL_OW 74
4866: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 22
4874: PUSH
4875: LD_INT 5
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 25
4884: PUSH
4885: LD_INT 11
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PPUSH
4896: CALL_OW 69
4900: PUSH
4901: FOR_IN
4902: IFFALSE 4972
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4904: LD_VAR 0 2
4908: PPUSH
4909: LD_VAR 0 5
4913: PPUSH
4914: CALL_OW 296
4918: PUSH
4919: LD_INT 8
4921: PLUS
4922: PUSH
4923: LD_VAR 0 2
4927: PPUSH
4928: LD_VAR 0 6
4932: PPUSH
4933: CALL_OW 296
4937: LESS
4938: IFFALSE 4956
// ComAttackUnit ( i , target1 ) else
4940: LD_VAR 0 2
4944: PPUSH
4945: LD_VAR 0 5
4949: PPUSH
4950: CALL_OW 115
4954: GO 4970
// ComAttackUnit ( i , target2 ) ;
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_VAR 0 6
4965: PPUSH
4966: CALL_OW 115
// end ;
4970: GO 4901
4972: POP
4973: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4974: LD_INT 22
4976: PUSH
4977: LD_INT 5
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 25
4986: PUSH
4987: LD_INT 11
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PPUSH
4998: CALL_OW 69
5002: PUSH
5003: LD_INT 0
5005: EQUAL
5006: PUSH
5007: LD_INT 22
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: PUSH
5022: LD_INT 0
5024: EQUAL
5025: OR
5026: IFFALSE 4758
// end ; end_of_file
5028: LD_VAR 0 1
5032: RET
// every 1 do
5033: GO 5035
5035: DISABLE
// begin Video ( true ) ;
5036: LD_INT 1
5038: PPUSH
5039: CALL 82695 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5043: LD_INT 1
5045: PPUSH
5046: LD_INT 19
5048: PPUSH
5049: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5053: LD_EXP 11
5057: PPUSH
5058: CALL_OW 87
// wait ( 0 0$3 ) ;
5062: LD_INT 105
5064: PPUSH
5065: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5069: LD_EXP 1
5073: PPUSH
5074: CALL_OW 310
5078: PPUSH
5079: CALL_OW 85
// Wait ( 0 0$1 ) ;
5083: LD_INT 35
5085: PPUSH
5086: CALL_OW 67
// if IsOk ( Gary ) then
5090: LD_EXP 10
5094: PPUSH
5095: CALL_OW 302
5099: IFFALSE 5137
// begin Say ( Gary , D2-Gary-1 ) ;
5101: LD_EXP 10
5105: PPUSH
5106: LD_STRING D2-Gary-1
5108: PPUSH
5109: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D2-JMM-1
5120: PPUSH
5121: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5125: LD_EXP 10
5129: PPUSH
5130: LD_STRING D2-Gary-2
5132: PPUSH
5133: CALL_OW 88
// end ; Video ( false ) ;
5137: LD_INT 0
5139: PPUSH
5140: CALL 82695 0 1
// ChangeMissionObjectives ( M1 ) ;
5144: LD_STRING M1
5146: PPUSH
5147: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5151: LD_INT 38
5153: PPUSH
5154: LD_INT 1
5156: PPUSH
5157: LD_INT 100
5159: PPUSH
5160: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5164: LD_INT 47
5166: PPUSH
5167: LD_INT 1
5169: PPUSH
5170: LD_INT 50
5172: PPUSH
5173: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5177: LD_INT 47
5179: PPUSH
5180: LD_INT 3
5182: PPUSH
5183: LD_INT 50
5185: PPUSH
5186: CALL_OW 291
// SaveForQuickRestart ;
5190: CALL_OW 22
// end ;
5194: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5195: LD_EXP 1
5199: PPUSH
5200: LD_EXP 11
5204: PPUSH
5205: CALL_OW 296
5209: PUSH
5210: LD_INT 15
5212: LESS
5213: IFFALSE 5797
5215: GO 5217
5217: DISABLE
5218: LD_INT 0
5220: PPUSH
// begin wait ( 0 0$3 ) ;
5221: LD_INT 105
5223: PPUSH
5224: CALL_OW 67
// Video ( true ) ;
5228: LD_INT 1
5230: PPUSH
5231: CALL 82695 0 1
// ComExitVehicle ( JMM ) ;
5235: LD_EXP 1
5239: PPUSH
5240: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5244: LD_EXP 1
5248: PPUSH
5249: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5253: LD_EXP 1
5257: PPUSH
5258: LD_EXP 11
5262: PPUSH
5263: CALL_OW 179
// p := 15 ;
5267: LD_ADDR_VAR 0 1
5271: PUSH
5272: LD_INT 15
5274: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5275: LD_INT 35
5277: PPUSH
5278: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5282: LD_EXP 11
5286: PUSH
5287: LD_EXP 13
5291: PUSH
5292: LD_EXP 12
5296: PUSH
5297: LD_EXP 14
5301: PUSH
5302: LD_EXP 8
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PPUSH
5314: LD_EXP 1
5318: PPUSH
5319: CALL_OW 112
// p := p - 1 ;
5323: LD_ADDR_VAR 0 1
5327: PUSH
5328: LD_VAR 0 1
5332: PUSH
5333: LD_INT 1
5335: MINUS
5336: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5337: LD_EXP 1
5341: PPUSH
5342: LD_EXP 11
5346: PPUSH
5347: CALL_OW 296
5351: PUSH
5352: LD_INT 5
5354: LESS
5355: PUSH
5356: LD_VAR 0 1
5360: PUSH
5361: LD_INT 0
5363: LESSEQUAL
5364: OR
5365: IFFALSE 5275
// if not IsInUnit ( JMM ) then
5367: LD_EXP 1
5371: PPUSH
5372: CALL_OW 310
5376: NOT
5377: IFFALSE 5393
// ComTurnUnit ( JMM , Simms ) ;
5379: LD_EXP 1
5383: PPUSH
5384: LD_EXP 11
5388: PPUSH
5389: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5393: LD_EXP 11
5397: PUSH
5398: LD_EXP 13
5402: PUSH
5403: LD_EXP 12
5407: PUSH
5408: LD_EXP 14
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: LD_EXP 1
5423: PPUSH
5424: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5428: LD_EXP 1
5432: PUSH
5433: LD_EXP 11
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PPUSH
5442: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5446: LD_EXP 11
5450: PPUSH
5451: LD_STRING D2a-Sim-1
5453: PPUSH
5454: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5458: LD_EXP 1
5462: PPUSH
5463: LD_STRING D2a-JMM-1
5465: PPUSH
5466: CALL_OW 88
// if IsOk ( Joan ) then
5470: LD_EXP 13
5474: PPUSH
5475: CALL_OW 302
5479: IFFALSE 5543
// begin if not IsInUnit ( JMM ) then
5481: LD_EXP 1
5485: PPUSH
5486: CALL_OW 310
5490: NOT
5491: IFFALSE 5507
// ComTurnUnit ( JMM , Joan ) ;
5493: LD_EXP 1
5497: PPUSH
5498: LD_EXP 13
5502: PPUSH
5503: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5507: LD_EXP 13
5511: PPUSH
5512: LD_STRING D2b-Joan-1
5514: PPUSH
5515: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5519: LD_EXP 1
5523: PPUSH
5524: LD_STRING D2b-JMM-1
5526: PPUSH
5527: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5531: LD_EXP 13
5535: PPUSH
5536: LD_STRING D2b-Joan-2
5538: PPUSH
5539: CALL_OW 88
// end ; if IsOk ( Denis ) then
5543: LD_EXP 12
5547: PPUSH
5548: CALL_OW 302
5552: IFFALSE 5592
// begin if not IsInUnit ( JMM ) then
5554: LD_EXP 1
5558: PPUSH
5559: CALL_OW 310
5563: NOT
5564: IFFALSE 5580
// ComTurnUnit ( JMM , Denis ) ;
5566: LD_EXP 1
5570: PPUSH
5571: LD_EXP 12
5575: PPUSH
5576: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5580: LD_EXP 12
5584: PPUSH
5585: LD_STRING D2c-Den-1
5587: PPUSH
5588: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5592: LD_EXP 8
5596: PPUSH
5597: CALL_OW 302
5601: PUSH
5602: LD_STRING 08_Kikuchi
5604: PPUSH
5605: CALL_OW 28
5609: NOT
5610: AND
5611: IFFALSE 5692
// begin repeat wait ( 0 0$1 ) ;
5613: LD_INT 35
5615: PPUSH
5616: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5620: LD_EXP 8
5624: PPUSH
5625: LD_EXP 1
5629: PPUSH
5630: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5634: LD_EXP 1
5638: PPUSH
5639: LD_EXP 8
5643: PPUSH
5644: CALL_OW 296
5648: PUSH
5649: LD_INT 5
5651: LESS
5652: IFFALSE 5613
// if not IsInUnit ( JMM ) then
5654: LD_EXP 1
5658: PPUSH
5659: CALL_OW 310
5663: NOT
5664: IFFALSE 5680
// ComTurnUnit ( JMM , Kikuchi ) ;
5666: LD_EXP 1
5670: PPUSH
5671: LD_EXP 8
5675: PPUSH
5676: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5680: LD_EXP 8
5684: PPUSH
5685: LD_STRING D3b-Yam-1
5687: PPUSH
5688: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5692: LD_EXP 14
5696: PPUSH
5697: CALL_OW 302
5701: IFFALSE 5753
// begin if not IsInUnit ( JMM ) then
5703: LD_EXP 1
5707: PPUSH
5708: CALL_OW 310
5712: NOT
5713: IFFALSE 5729
// ComTurnUnit ( JMM , Khatam ) ;
5715: LD_EXP 1
5719: PPUSH
5720: LD_EXP 14
5724: PPUSH
5725: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5729: LD_EXP 1
5733: PPUSH
5734: LD_STRING D2c-JMM-1
5736: PPUSH
5737: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5741: LD_EXP 14
5745: PPUSH
5746: LD_STRING D2c-Khat-1
5748: PPUSH
5749: CALL_OW 88
// end ; Video ( false ) ;
5753: LD_INT 0
5755: PPUSH
5756: CALL 82695 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5760: LD_INT 22
5762: PUSH
5763: LD_INT 4
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PPUSH
5775: LD_INT 1
5777: PPUSH
5778: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5782: LD_STRING M1a
5784: PPUSH
5785: CALL_OW 337
// joinEpsilon = 1 ;
5789: LD_ADDR_EXP 29
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// end ;
5797: PPOPN 1
5799: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5800: LD_INT 38
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 289
5810: PUSH
5811: LD_INT 0
5813: EQUAL
5814: PUSH
5815: LD_INT 47
5817: PPUSH
5818: LD_INT 1
5820: PPUSH
5821: CALL_OW 289
5825: PUSH
5826: LD_INT 0
5828: EQUAL
5829: AND
5830: PUSH
5831: LD_INT 47
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: CALL_OW 289
5841: PUSH
5842: LD_INT 0
5844: EQUAL
5845: AND
5846: IFFALSE 5971
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
// begin p := 0 ;
5854: LD_ADDR_VAR 0 1
5858: PUSH
5859: LD_INT 0
5861: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5862: LD_INT 38
5864: PUSH
5865: LD_INT 47
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: LD_INT 56
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// p := p + 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_VAR 0 1
5898: PUSH
5899: LD_INT 1
5901: PLUS
5902: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5903: LD_INT 38
5905: PUSH
5906: LD_INT 47
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PPUSH
5913: LD_INT 56
5915: PPUSH
5916: LD_INT 0
5918: PPUSH
5919: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
5923: LD_INT 38
5925: PPUSH
5926: LD_INT 27
5928: PPUSH
5929: CALL_OW 308
5933: IFFALSE 5942
// RemoveUnit ( cargo1 ) ;
5935: LD_INT 38
5937: PPUSH
5938: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
5942: LD_INT 47
5944: PPUSH
5945: LD_INT 27
5947: PPUSH
5948: CALL_OW 308
5952: IFFALSE 5961
// RemoveUnit ( cargo2 ) ;
5954: LD_INT 47
5956: PPUSH
5957: CALL_OW 64
// until p > 30 ;
5961: LD_VAR 0 1
5965: PUSH
5966: LD_INT 30
5968: GREATER
5969: IFFALSE 5882
// end ;
5971: PPOPN 1
5973: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5974: LD_EXP 65
5978: PUSH
5979: LD_INT 1
5981: EQUAL
5982: IFFALSE 7114
5984: GO 5986
5986: DISABLE
5987: LD_INT 0
5989: PPUSH
5990: PPUSH
5991: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5992: LD_ADDR_VAR 0 1
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_INT 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 25
6009: PUSH
6010: LD_INT 4
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 26
6019: PUSH
6020: LD_INT 1
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PPUSH
6032: CALL_OW 69
6036: PUSH
6037: LD_EXP 1
6041: PUSH
6042: LD_EXP 2
6046: PUSH
6047: LD_EXP 3
6051: PUSH
6052: LD_EXP 4
6056: PUSH
6057: LD_EXP 5
6061: PUSH
6062: LD_EXP 6
6066: PUSH
6067: LD_EXP 7
6071: PUSH
6072: LD_EXP 8
6076: PUSH
6077: LD_EXP 9
6081: PUSH
6082: LD_EXP 10
6086: PUSH
6087: LD_EXP 11
6091: PUSH
6092: LD_EXP 12
6096: PUSH
6097: LD_EXP 13
6101: PUSH
6102: LD_EXP 14
6106: PUSH
6107: LD_EXP 15
6111: PUSH
6112: LD_EXP 16
6116: PUSH
6117: LD_EXP 17
6121: PUSH
6122: LD_EXP 18
6126: PUSH
6127: LD_EXP 19
6131: PUSH
6132: LD_EXP 24
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: DIFF
6159: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6160: LD_ADDR_VAR 0 2
6164: PUSH
6165: LD_INT 22
6167: PUSH
6168: LD_INT 1
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 26
6177: PUSH
6178: LD_INT 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 25
6190: PUSH
6191: LD_INT 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 25
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: PPUSH
6229: CALL_OW 69
6233: PUSH
6234: LD_EXP 1
6238: PUSH
6239: LD_EXP 2
6243: PUSH
6244: LD_EXP 3
6248: PUSH
6249: LD_EXP 4
6253: PUSH
6254: LD_EXP 5
6258: PUSH
6259: LD_EXP 6
6263: PUSH
6264: LD_EXP 7
6268: PUSH
6269: LD_EXP 8
6273: PUSH
6274: LD_EXP 9
6278: PUSH
6279: LD_EXP 10
6283: PUSH
6284: LD_EXP 11
6288: PUSH
6289: LD_EXP 12
6293: PUSH
6294: LD_EXP 13
6298: PUSH
6299: LD_EXP 14
6303: PUSH
6304: LD_EXP 15
6308: PUSH
6309: LD_EXP 16
6313: PUSH
6314: LD_EXP 17
6318: PUSH
6319: LD_EXP 18
6323: PUSH
6324: LD_EXP 19
6328: PUSH
6329: LD_EXP 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: DIFF
6356: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6357: LD_EXP 10
6361: PUSH
6362: LD_VAR 0 2
6366: OR
6367: PUSH
6368: LD_EXP 17
6372: PUSH
6373: LD_VAR 0 1
6377: OR
6378: AND
6379: IFFALSE 6598
// begin DialogueOn ;
6381: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6385: LD_EXP 17
6389: PPUSH
6390: CALL_OW 302
6394: IFFALSE 6410
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6396: LD_EXP 17
6400: PPUSH
6401: LD_STRING D3-Sci1-1
6403: PPUSH
6404: CALL_OW 88
6408: GO 6422
// Say ( tmp1 , D3-Sci1-1 ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_STRING D3-Sci1-1
6417: PPUSH
6418: CALL_OW 88
// if IsOk ( Gary ) then
6422: LD_EXP 10
6426: PPUSH
6427: CALL_OW 302
6431: IFFALSE 6447
// Say ( Gary , D3-Gary-1 ) else
6433: LD_EXP 10
6437: PPUSH
6438: LD_STRING D3-Gary-1
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( tmp2 , D3-Gary-1 ) ;
6447: LD_VAR 0 2
6451: PPUSH
6452: LD_STRING D3-Gary-1
6454: PPUSH
6455: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6459: LD_EXP 17
6463: PPUSH
6464: CALL_OW 302
6468: IFFALSE 6484
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6470: LD_EXP 17
6474: PPUSH
6475: LD_STRING D3-Sci1-2
6477: PPUSH
6478: CALL_OW 88
6482: GO 6496
// Say ( tmp1 , D3-Sci1-2 ) ;
6484: LD_VAR 0 1
6488: PPUSH
6489: LD_STRING D3-Sci1-2
6491: PPUSH
6492: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6496: LD_EXP 1
6500: PPUSH
6501: LD_STRING D3-JMM-2
6503: PPUSH
6504: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6508: LD_EXP 17
6512: PPUSH
6513: CALL_OW 302
6517: IFFALSE 6533
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6519: LD_EXP 17
6523: PPUSH
6524: LD_STRING D3-Sci1-3
6526: PPUSH
6527: CALL_OW 88
6531: GO 6545
// Say ( tmp1 , D3-Sci1-3 ) ;
6533: LD_VAR 0 1
6537: PPUSH
6538: LD_STRING D3-Sci1-3
6540: PPUSH
6541: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6545: LD_EXP 1
6549: PPUSH
6550: LD_STRING D3-JMM-3
6552: PPUSH
6553: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6557: LD_EXP 17
6561: PPUSH
6562: CALL_OW 302
6566: IFFALSE 6582
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6568: LD_EXP 17
6572: PPUSH
6573: LD_STRING D3-Sci1-4
6575: PPUSH
6576: CALL_OW 88
6580: GO 6594
// Say ( tmp1 , D3-Sci1-4 ) ;
6582: LD_VAR 0 1
6586: PPUSH
6587: LD_STRING D3-Sci1-4
6589: PPUSH
6590: CALL_OW 88
// DialogueOff ;
6594: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6598: LD_INT 12
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: LD_INT 1
6606: PPUSH
6607: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6611: LD_INT 32
6613: PPUSH
6614: LD_INT 1
6616: PPUSH
6617: LD_INT 1
6619: PPUSH
6620: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6624: LD_INT 12
6626: PPUSH
6627: LD_INT 1
6629: PPUSH
6630: LD_INT 1
6632: PPUSH
6633: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6637: LD_INT 33
6639: PPUSH
6640: LD_INT 1
6642: PPUSH
6643: LD_INT 1
6645: PPUSH
6646: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6650: LD_STRING M2
6652: PPUSH
6653: CALL_OW 337
// wait ( 3 3$0 ) ;
6657: LD_INT 6300
6659: PPUSH
6660: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6664: LD_INT 35
6666: PPUSH
6667: CALL_OW 67
// until not InBattle ( 1 ) ;
6671: LD_INT 1
6673: PPUSH
6674: CALL_OW 463
6678: NOT
6679: IFFALSE 6664
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6681: LD_EXP 11
6685: PPUSH
6686: CALL_OW 302
6690: PUSH
6691: LD_EXP 17
6695: PPUSH
6696: CALL_OW 302
6700: AND
6701: IFFALSE 6870
// begin DialogueOn ;
6703: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6707: LD_EXP 11
6711: PPUSH
6712: LD_STRING D3a-Sim-1
6714: PPUSH
6715: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6719: LD_EXP 17
6723: PPUSH
6724: LD_STRING D3a-Sci1-1
6726: PPUSH
6727: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6731: LD_EXP 11
6735: PPUSH
6736: LD_STRING D3a-Sim-2
6738: PPUSH
6739: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6743: LD_EXP 17
6747: PPUSH
6748: LD_STRING D3a-Sci1-2
6750: PPUSH
6751: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6755: LD_EXP 11
6759: PPUSH
6760: LD_STRING D3a-Sim-3
6762: PPUSH
6763: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6767: LD_EXP 17
6771: PPUSH
6772: LD_STRING D3a-Sci1-3
6774: PPUSH
6775: CALL_OW 88
// if IsOK ( Joan ) then
6779: LD_EXP 13
6783: PPUSH
6784: CALL_OW 302
6788: IFFALSE 6804
// Say ( Simms , D3a-Sim-4 ) else
6790: LD_EXP 11
6794: PPUSH
6795: LD_STRING D3a-Sim-4
6797: PPUSH
6798: CALL_OW 88
6802: GO 6816
// Say ( Simms , D3a-Sim-4a ) ;
6804: LD_EXP 11
6808: PPUSH
6809: LD_STRING D3a-Sim-4a
6811: PPUSH
6812: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6816: LD_EXP 17
6820: PPUSH
6821: LD_STRING D3a-Sci1-4
6823: PPUSH
6824: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6828: LD_EXP 11
6832: PPUSH
6833: LD_STRING D3a-Sim-5
6835: PPUSH
6836: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
6840: LD_EXP 17
6844: PPUSH
6845: LD_STRING D3a-Sci1-5
6847: PPUSH
6848: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6852: LD_EXP 11
6856: PPUSH
6857: LD_STRING D3a-Sim-6
6859: PPUSH
6860: CALL_OW 88
// DialogueOff ;
6864: CALL_OW 7
// end else
6868: GO 7114
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6870: LD_ADDR_VAR 0 3
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 1
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 25
6887: PUSH
6888: LD_INT 4
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 69
6903: PUSH
6904: LD_EXP 11
6908: PUSH
6909: LD_EXP 14
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: DIFF
6918: ST_TO_ADDR
// if tmp3 > 0 then
6919: LD_VAR 0 3
6923: PUSH
6924: LD_INT 0
6926: GREATER
6927: IFFALSE 7114
// begin DialogueOn ;
6929: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6933: LD_EXP 11
6937: PPUSH
6938: LD_STRING D3a-Sim-1
6940: PPUSH
6941: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6945: LD_VAR 0 3
6949: PUSH
6950: LD_INT 1
6952: ARRAY
6953: PPUSH
6954: LD_STRING D3a-Sci1-1
6956: PPUSH
6957: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6961: LD_EXP 11
6965: PPUSH
6966: LD_STRING D3a-Sim-2
6968: PPUSH
6969: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6973: LD_VAR 0 3
6977: PUSH
6978: LD_INT 1
6980: ARRAY
6981: PPUSH
6982: LD_STRING D3a-Sci1-2
6984: PPUSH
6985: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6989: LD_EXP 11
6993: PPUSH
6994: LD_STRING D3a-Sim-3
6996: PPUSH
6997: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7001: LD_VAR 0 3
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PPUSH
7010: LD_STRING D3a-Sci1-3
7012: PPUSH
7013: CALL_OW 88
// if IsOK ( Joan ) then
7017: LD_EXP 13
7021: PPUSH
7022: CALL_OW 302
7026: IFFALSE 7042
// Say ( Simms , D3a-Sim-4 ) else
7028: LD_EXP 11
7032: PPUSH
7033: LD_STRING D3a-Sim-4
7035: PPUSH
7036: CALL_OW 88
7040: GO 7054
// Say ( Simms , D3a-Sim-4a ) ;
7042: LD_EXP 11
7046: PPUSH
7047: LD_STRING D3a-Sim-4a
7049: PPUSH
7050: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7054: LD_VAR 0 3
7058: PUSH
7059: LD_INT 1
7061: ARRAY
7062: PPUSH
7063: LD_STRING D3a-Sci1-4
7065: PPUSH
7066: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7070: LD_EXP 11
7074: PPUSH
7075: LD_STRING D3a-Sim-5
7077: PPUSH
7078: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7082: LD_VAR 0 3
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PPUSH
7091: LD_STRING D3a-Sci1-5
7093: PPUSH
7094: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7098: LD_EXP 11
7102: PPUSH
7103: LD_STRING D3a-Sim-6
7105: PPUSH
7106: CALL_OW 88
// DialogueOff ;
7110: CALL_OW 7
// end ; end ; end ;
7114: PPOPN 3
7116: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
7117: LD_EXP 29
7121: PUSH
7122: LD_INT 1
7124: EQUAL
7125: IFFALSE 7453
7127: GO 7129
7129: DISABLE
7130: LD_INT 0
7132: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
7133: LD_EXP 18
7137: PPUSH
7138: LD_STRING D4-FSol1-1
7140: PPUSH
7141: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7145: LD_STRING M3
7147: PPUSH
7148: CALL_OW 337
// PrepareRussians ;
7152: CALL 3519 0 0
// spawnRussians := true ;
7156: LD_ADDR_EXP 58
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7164: LD_ADDR_VAR 0 1
7168: PUSH
7169: LD_INT 1
7171: PPUSH
7172: LD_INT 100
7174: PPUSH
7175: CALL_OW 12
7179: ST_TO_ADDR
// if difficulty = 1 then
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: EQUAL
7188: IFFALSE 7271
// begin if rnd > 0 and rnd < 51 then
7190: LD_VAR 0 1
7194: PUSH
7195: LD_INT 0
7197: GREATER
7198: PUSH
7199: LD_VAR 0 1
7203: PUSH
7204: LD_INT 51
7206: LESS
7207: AND
7208: IFFALSE 7217
// BuildRussianBase ( 2 ) ;
7210: LD_INT 2
7212: PPUSH
7213: CALL 11559 0 1
// if rnd > 50 and rnd < 81 then
7217: LD_VAR 0 1
7221: PUSH
7222: LD_INT 50
7224: GREATER
7225: PUSH
7226: LD_VAR 0 1
7230: PUSH
7231: LD_INT 81
7233: LESS
7234: AND
7235: IFFALSE 7244
// BuildRussianBase ( 1 ) ;
7237: LD_INT 1
7239: PPUSH
7240: CALL 11559 0 1
// if rnd > 80 and rnd < 101 then
7244: LD_VAR 0 1
7248: PUSH
7249: LD_INT 80
7251: GREATER
7252: PUSH
7253: LD_VAR 0 1
7257: PUSH
7258: LD_INT 101
7260: LESS
7261: AND
7262: IFFALSE 7271
// BuildRussianBase ( 3 ) ;
7264: LD_INT 3
7266: PPUSH
7267: CALL 11559 0 1
// end ; if difficulty = 2 then
7271: LD_OWVAR 67
7275: PUSH
7276: LD_INT 2
7278: EQUAL
7279: IFFALSE 7362
// begin if rnd > 0 and rnd < 61 then
7281: LD_VAR 0 1
7285: PUSH
7286: LD_INT 0
7288: GREATER
7289: PUSH
7290: LD_VAR 0 1
7294: PUSH
7295: LD_INT 61
7297: LESS
7298: AND
7299: IFFALSE 7308
// BuildRussianBase ( 2 ) ;
7301: LD_INT 2
7303: PPUSH
7304: CALL 11559 0 1
// if rnd > 60 and rnd < 81 then
7308: LD_VAR 0 1
7312: PUSH
7313: LD_INT 60
7315: GREATER
7316: PUSH
7317: LD_VAR 0 1
7321: PUSH
7322: LD_INT 81
7324: LESS
7325: AND
7326: IFFALSE 7335
// BuildRussianBase ( 1 ) ;
7328: LD_INT 1
7330: PPUSH
7331: CALL 11559 0 1
// if rnd > 80 and rnd < 101 then
7335: LD_VAR 0 1
7339: PUSH
7340: LD_INT 80
7342: GREATER
7343: PUSH
7344: LD_VAR 0 1
7348: PUSH
7349: LD_INT 101
7351: LESS
7352: AND
7353: IFFALSE 7362
// BuildRussianBase ( 3 ) ;
7355: LD_INT 3
7357: PPUSH
7358: CALL 11559 0 1
// end ; if difficulty = 3 then
7362: LD_OWVAR 67
7366: PUSH
7367: LD_INT 3
7369: EQUAL
7370: IFFALSE 7453
// begin if rnd > 0 and rnd < 71 then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_INT 0
7379: GREATER
7380: PUSH
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 71
7388: LESS
7389: AND
7390: IFFALSE 7399
// BuildRussianBase ( 3 ) ;
7392: LD_INT 3
7394: PPUSH
7395: CALL 11559 0 1
// if rnd > 70 and rnd < 81 then
7399: LD_VAR 0 1
7403: PUSH
7404: LD_INT 70
7406: GREATER
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 81
7415: LESS
7416: AND
7417: IFFALSE 7426
// BuildRussianBase ( 2 ) ;
7419: LD_INT 2
7421: PPUSH
7422: CALL 11559 0 1
// if rnd > 80 and rnd < 101 then
7426: LD_VAR 0 1
7430: PUSH
7431: LD_INT 80
7433: GREATER
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: LD_INT 101
7442: LESS
7443: AND
7444: IFFALSE 7453
// BuildRussianBase ( 1 ) ;
7446: LD_INT 1
7448: PPUSH
7449: CALL 11559 0 1
// end ; end ;
7453: PPOPN 1
7455: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7456: LD_INT 54
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: CALL_OW 321
7466: PUSH
7467: LD_INT 2
7469: EQUAL
7470: PUSH
7471: LD_INT 21
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 321
7481: PUSH
7482: LD_INT 2
7484: EQUAL
7485: OR
7486: PUSH
7487: LD_INT 22
7489: PPUSH
7490: LD_INT 1
7492: PPUSH
7493: CALL_OW 321
7497: PUSH
7498: LD_INT 2
7500: EQUAL
7501: OR
7502: IFFALSE 7804
7504: GO 7506
7506: DISABLE
7507: LD_INT 0
7509: PPUSH
7510: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7511: LD_EXP 17
7515: PPUSH
7516: CALL_OW 302
7520: IFFALSE 7534
// tmp := DeltaDoctor else
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: LD_EXP 17
7531: ST_TO_ADDR
7532: GO 7544
// tmp := Denis ;
7534: LD_ADDR_VAR 0 2
7538: PUSH
7539: LD_EXP 12
7543: ST_TO_ADDR
// if tmp then
7544: LD_VAR 0 2
7548: IFFALSE 7642
// begin DialogueOn ;
7550: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7554: LD_EXP 1
7558: PPUSH
7559: LD_STRING D6-JMM-1
7561: PPUSH
7562: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7566: LD_VAR 0 2
7570: PPUSH
7571: LD_STRING D6-Sci1-1
7573: PPUSH
7574: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7578: LD_EXP 1
7582: PPUSH
7583: LD_STRING D6-JMM-2
7585: PPUSH
7586: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7590: LD_VAR 0 2
7594: PPUSH
7595: LD_STRING D6-Sci1-2
7597: PPUSH
7598: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7602: LD_EXP 1
7606: PPUSH
7607: LD_STRING D6-JMM-3
7609: PPUSH
7610: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7614: LD_VAR 0 2
7618: PPUSH
7619: LD_STRING D6-Sci1-3
7621: PPUSH
7622: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7626: LD_EXP 1
7630: PPUSH
7631: LD_STRING D6-JMM-4
7633: PPUSH
7634: CALL_OW 88
// DialogueOff ;
7638: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7642: LD_INT 1050
7644: PPUSH
7645: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7649: LD_EXP 49
7653: PUSH
7654: LD_INT 0
7656: EQUAL
7657: PUSH
7658: LD_EXP 14
7662: PPUSH
7663: CALL_OW 302
7667: AND
7668: IFFALSE 7726
// begin DialogueOn ;
7670: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7674: LD_EXP 27
7678: PPUSH
7679: LD_STRING D5-Ar1-1
7681: PPUSH
7682: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7686: LD_EXP 26
7690: PPUSH
7691: LD_STRING D5-Diet-1
7693: PPUSH
7694: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7698: LD_EXP 27
7702: PPUSH
7703: LD_STRING D5-Ar1-2
7705: PPUSH
7706: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7710: LD_EXP 26
7714: PPUSH
7715: LD_STRING D5-Diet-2
7717: PPUSH
7718: CALL_OW 88
// DialogueOff ;
7722: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7726: LD_INT 35
7728: PPUSH
7729: CALL_OW 67
// until tick > 10 10$00 ;
7733: LD_OWVAR 1
7737: PUSH
7738: LD_INT 21000
7740: GREATER
7741: IFFALSE 7726
// wait ( 1 1$30 ) ;
7743: LD_INT 3150
7745: PPUSH
7746: CALL_OW 67
// if arabianTrait = 0 then
7750: LD_EXP 49
7754: PUSH
7755: LD_INT 0
7757: EQUAL
7758: IFFALSE 7804
// begin arabianTrait = 1 ;
7760: LD_ADDR_EXP 49
7764: PUSH
7765: LD_INT 1
7767: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7768: LD_INT 2
7770: PPUSH
7771: LD_INT 3
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: LD_INT 1
7779: PPUSH
7780: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7784: LD_INT 2
7786: PPUSH
7787: LD_INT 6
7789: PPUSH
7790: LD_INT 1
7792: PPUSH
7793: LD_INT 1
7795: PPUSH
7796: CALL_OW 80
// PrepareArabianTrait ;
7800: CALL 7807 0 0
// end ; end ;
7804: PPOPN 2
7806: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
7807: LD_INT 0
7809: PPUSH
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
7814: PPUSH
7815: PPUSH
7816: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
7817: LD_ADDR_VAR 0 6
7821: PUSH
7822: LD_INT 22
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 25
7837: PUSH
7838: LD_INT 4
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 25
7857: PUSH
7858: LD_INT 3
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7880: LD_ADDR_VAR 0 5
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_INT 2
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 21
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: LD_INT 25
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 25
7920: PUSH
7921: LD_INT 8
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 15
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 69
7953: PUSH
7954: LD_EXP 26
7958: PUSH
7959: EMPTY
7960: LIST
7961: DIFF
7962: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
7963: LD_ADDR_VAR 0 7
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 2
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 30
7980: PUSH
7981: LD_INT 5
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PPUSH
7992: CALL_OW 69
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8010: LD_VAR 0 5
8014: PPUSH
8015: CALL_OW 122
// wait ( 0 0$3 ) ;
8019: LD_INT 105
8021: PPUSH
8022: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8026: LD_VAR 0 6
8030: PPUSH
8031: LD_VAR 0 7
8035: PPUSH
8036: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8040: LD_VAR 0 6
8044: PPUSH
8045: LD_INT 1
8047: PUSH
8048: LD_INT 8
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 1
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 12
8065: ARRAY
8066: PPUSH
8067: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8071: LD_VAR 0 6
8075: PPUSH
8076: CALL_OW 182
// wait ( 0 0$1 ) ;
8080: LD_INT 35
8082: PPUSH
8083: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8087: LD_INT 76
8089: PPUSH
8090: LD_INT 19
8092: PPUSH
8093: CALL_OW 84
// DialogueOn ;
8097: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8101: LD_INT 22
8103: PUSH
8104: LD_INT 1
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 26
8113: PUSH
8114: LD_INT 1
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 2
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 25
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 25
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: PPUSH
8192: LD_STRING D8-Sol1-1
8194: PPUSH
8195: LD_STRING D8-Sol1-1
8197: PPUSH
8198: CALL 10901 0 3
// if IsOK ( DeltaDoctor ) then
8202: LD_EXP 17
8206: PPUSH
8207: CALL_OW 302
8211: IFFALSE 8227
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8213: LD_EXP 17
8217: PPUSH
8218: LD_STRING D8-Sci1-1
8220: PPUSH
8221: CALL_OW 88
8225: GO 8328
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8227: LD_INT 22
8229: PUSH
8230: LD_INT 1
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 26
8239: PUSH
8240: LD_INT 1
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: LD_INT 25
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 25
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 25
8272: PUSH
8273: LD_INT 3
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 25
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 5
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 69
8317: PPUSH
8318: LD_STRING D8-Sol1-1
8320: PPUSH
8321: LD_STRING D8-Sol1-1
8323: PPUSH
8324: CALL 10901 0 3
// Say ( JMM , D8-JMM-1 ) ;
8328: LD_EXP 1
8332: PPUSH
8333: LD_STRING D8-JMM-1
8335: PPUSH
8336: CALL_OW 88
// DialogueOff ;
8340: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8344: LD_INT 2
8346: PPUSH
8347: LD_INT 2
8349: PPUSH
8350: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8354: LD_INT 1
8356: PPUSH
8357: LD_INT 2
8359: PPUSH
8360: LD_INT 2
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8370: LD_INT 3
8372: PPUSH
8373: LD_INT 2
8375: PPUSH
8376: LD_INT 1
8378: PPUSH
8379: LD_INT 1
8381: PPUSH
8382: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8386: LD_STRING M4
8388: PPUSH
8389: CALL_OW 337
// wait ( 0 0$1 ) ;
8393: LD_INT 35
8395: PPUSH
8396: CALL_OW 67
// if IsLive ( Khatam ) then
8400: LD_EXP 14
8404: PPUSH
8405: CALL_OW 300
8409: IFFALSE 8423
// DoNotAttack ( 2 , Khatam ) ;
8411: LD_INT 2
8413: PPUSH
8414: LD_EXP 14
8418: PPUSH
8419: CALL_OW 471
// wait ( 0 0$1 ) ;
8423: LD_INT 35
8425: PPUSH
8426: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8430: LD_ADDR_VAR 0 8
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 1
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 21
8447: PUSH
8448: LD_INT 3
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PPUSH
8459: CALL_OW 69
8463: PPUSH
8464: LD_VAR 0 5
8468: PUSH
8469: LD_INT 1
8471: ARRAY
8472: PPUSH
8473: CALL_OW 74
8477: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8478: LD_VAR 0 5
8482: PPUSH
8483: LD_INT 25
8485: PUSH
8486: LD_INT 1
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 72
8497: PUSH
8498: LD_INT 1
8500: ARRAY
8501: PPUSH
8502: LD_VAR 0 8
8506: PPUSH
8507: CALL_OW 250
8511: PPUSH
8512: LD_VAR 0 8
8516: PPUSH
8517: CALL_OW 251
8521: PPUSH
8522: LD_VAR 0 8
8526: PPUSH
8527: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8531: LD_VAR 0 5
8535: PPUSH
8536: LD_INT 84
8538: PPUSH
8539: LD_INT 22
8541: PPUSH
8542: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8546: LD_VAR 0 5
8550: PPUSH
8551: LD_INT 82
8553: PPUSH
8554: LD_INT 5
8556: PPUSH
8557: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8561: LD_VAR 0 5
8565: PPUSH
8566: LD_INT 95
8568: PPUSH
8569: LD_INT 12
8571: PPUSH
8572: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_INT 102
8583: PPUSH
8584: LD_INT 11
8586: PPUSH
8587: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8591: LD_VAR 0 5
8595: PPUSH
8596: LD_INT 116
8598: PPUSH
8599: LD_INT 15
8601: PPUSH
8602: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8606: LD_VAR 0 5
8610: PPUSH
8611: LD_INT 140
8613: PPUSH
8614: LD_INT 25
8616: PPUSH
8617: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8621: LD_VAR 0 5
8625: PPUSH
8626: LD_INT 160
8628: PPUSH
8629: LD_INT 56
8631: PPUSH
8632: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: LD_INT 22
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 21
8653: PUSH
8654: LD_INT 1
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 2
8663: PUSH
8664: LD_INT 25
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 25
8676: PUSH
8677: LD_INT 8
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 25
8686: PUSH
8687: LD_INT 15
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 69
8709: PUSH
8710: LD_EXP 26
8714: PUSH
8715: EMPTY
8716: LIST
8717: DIFF
8718: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8719: LD_ADDR_VAR 0 6
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 21
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 2
8746: PUSH
8747: LD_INT 25
8749: PUSH
8750: LD_INT 2
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 25
8759: PUSH
8760: LD_INT 3
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 25
8769: PUSH
8770: LD_INT 4
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 25
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: LD_INT 25
8789: PUSH
8790: LD_INT 16
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: LIST
8809: PPUSH
8810: CALL_OW 69
8814: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
8815: LD_ADDR_VAR 0 6
8819: PUSH
8820: LD_VAR 0 6
8824: PUSH
8825: LD_EXP 26
8829: ADD
8830: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
8831: LD_VAR 0 5
8835: PPUSH
8836: LD_INT 189
8838: PPUSH
8839: LD_INT 79
8841: PPUSH
8842: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
8846: LD_VAR 0 5
8850: PPUSH
8851: LD_INT 25
8853: PUSH
8854: LD_INT 15
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PPUSH
8861: CALL_OW 72
8865: IFFALSE 8906
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
8867: LD_VAR 0 5
8871: PPUSH
8872: LD_INT 25
8874: PUSH
8875: LD_INT 15
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PPUSH
8882: CALL_OW 72
8886: PUSH
8887: LD_INT 1
8889: ARRAY
8890: PPUSH
8891: LD_INT 84
8893: PPUSH
8894: LD_INT 21
8896: PPUSH
8897: CALL_OW 428
8901: PPUSH
8902: CALL_OW 120
// wait ( 0 0$4 ) ;
8906: LD_INT 140
8908: PPUSH
8909: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
8913: LD_VAR 0 6
8917: PPUSH
8918: LD_INT 88
8920: PPUSH
8921: LD_INT 8
8923: PPUSH
8924: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
8928: LD_VAR 0 6
8932: PPUSH
8933: LD_INT 102
8935: PPUSH
8936: LD_INT 10
8938: PPUSH
8939: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
8943: LD_VAR 0 6
8947: PPUSH
8948: LD_INT 116
8950: PPUSH
8951: LD_INT 15
8953: PPUSH
8954: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
8958: LD_VAR 0 6
8962: PPUSH
8963: LD_INT 140
8965: PPUSH
8966: LD_INT 25
8968: PPUSH
8969: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
8973: LD_VAR 0 6
8977: PPUSH
8978: LD_INT 160
8980: PPUSH
8981: LD_INT 56
8983: PPUSH
8984: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
8988: LD_VAR 0 6
8992: PPUSH
8993: LD_INT 189
8995: PPUSH
8996: LD_INT 79
8998: PPUSH
8999: CALL_OW 171
// arabianAttackersAI = 1 ;
9003: LD_ADDR_EXP 46
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if IsOk ( Gary ) then
9011: LD_EXP 10
9015: PPUSH
9016: CALL_OW 302
9020: IFFALSE 9034
// Say ( Gary , D8a-Gary-1 ) ;
9022: LD_EXP 10
9026: PPUSH
9027: LD_STRING D8a-Gary-1
9029: PPUSH
9030: CALL_OW 88
// wait ( 0 0$5 ) ;
9034: LD_INT 175
9036: PPUSH
9037: CALL_OW 67
// if IsOK ( Khatam ) then
9041: LD_EXP 14
9045: PPUSH
9046: CALL_OW 302
9050: IFFALSE 9586
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9052: LD_ADDR_VAR 0 3
9056: PUSH
9057: LD_INT 22
9059: PUSH
9060: LD_INT 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 2
9069: PUSH
9070: LD_INT 25
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 25
9092: PUSH
9093: LD_INT 3
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 25
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 25
9112: PUSH
9113: LD_INT 5
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 25
9122: PUSH
9123: LD_INT 8
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 69
9147: PUSH
9148: LD_EXP 1
9152: PUSH
9153: LD_EXP 2
9157: PUSH
9158: LD_EXP 3
9162: PUSH
9163: LD_EXP 4
9167: PUSH
9168: LD_EXP 5
9172: PUSH
9173: LD_EXP 6
9177: PUSH
9178: LD_EXP 7
9182: PUSH
9183: LD_EXP 8
9187: PUSH
9188: LD_EXP 9
9192: PUSH
9193: LD_EXP 10
9197: PUSH
9198: LD_EXP 11
9202: PUSH
9203: LD_EXP 12
9207: PUSH
9208: LD_EXP 13
9212: PUSH
9213: LD_EXP 14
9217: PUSH
9218: LD_EXP 15
9222: PUSH
9223: LD_EXP 16
9227: PUSH
9228: LD_EXP 17
9232: PUSH
9233: LD_EXP 19
9237: PUSH
9238: LD_EXP 24
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: DIFF
9264: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9265: LD_EXP 14
9269: PPUSH
9270: LD_INT 8
9272: PPUSH
9273: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9277: LD_EXP 14
9281: PPUSH
9282: CALL_OW 122
// wait ( 0 0$1 ) ;
9286: LD_INT 35
9288: PPUSH
9289: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9293: LD_EXP 14
9297: PPUSH
9298: CALL_OW 121
// wait ( 0 0$1 ) ;
9302: LD_INT 35
9304: PPUSH
9305: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9309: LD_EXP 14
9313: PPUSH
9314: LD_INT 7
9316: PPUSH
9317: CALL_OW 113
// if not tmp then
9321: LD_VAR 0 3
9325: NOT
9326: IFFALSE 9330
// exit ;
9328: GO 9586
// DialogueOn ;
9330: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: CALL_OW 258
9347: PUSH
9348: LD_INT 1
9350: EQUAL
9351: IFFALSE 9371
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9353: LD_VAR 0 3
9357: PUSH
9358: LD_INT 1
9360: ARRAY
9361: PPUSH
9362: LD_STRING D8b-Sol1-1
9364: PPUSH
9365: CALL_OW 88
9369: GO 9387
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9371: LD_VAR 0 3
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: LD_STRING D8b-FSol1-1
9382: PPUSH
9383: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9387: LD_EXP 14
9391: PPUSH
9392: LD_STRING D8b-Khat-1
9394: PPUSH
9395: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9399: LD_VAR 0 3
9403: PUSH
9404: LD_INT 1
9406: ARRAY
9407: PPUSH
9408: CALL_OW 258
9412: PUSH
9413: LD_INT 1
9415: EQUAL
9416: IFFALSE 9436
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 1
9425: ARRAY
9426: PPUSH
9427: LD_STRING D8b-Sol1-2
9429: PPUSH
9430: CALL_OW 88
9434: GO 9452
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9436: LD_VAR 0 3
9440: PUSH
9441: LD_INT 1
9443: ARRAY
9444: PPUSH
9445: LD_STRING D8b-FSol1-2
9447: PPUSH
9448: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9452: LD_EXP 14
9456: PPUSH
9457: LD_STRING D8b-Khat-2
9459: PPUSH
9460: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9464: LD_VAR 0 3
9468: PUSH
9469: LD_INT 1
9471: ARRAY
9472: PPUSH
9473: CALL_OW 258
9477: PUSH
9478: LD_INT 1
9480: EQUAL
9481: IFFALSE 9501
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9483: LD_VAR 0 3
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_STRING D8b-Sol1-3
9494: PPUSH
9495: CALL_OW 88
9499: GO 9517
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9501: LD_VAR 0 3
9505: PUSH
9506: LD_INT 1
9508: ARRAY
9509: PPUSH
9510: LD_STRING D8b-FSol1-3
9512: PPUSH
9513: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9517: LD_EXP 14
9521: PPUSH
9522: LD_STRING D8b-Khat-3
9524: PPUSH
9525: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9529: LD_VAR 0 3
9533: PUSH
9534: LD_INT 1
9536: ARRAY
9537: PPUSH
9538: CALL_OW 258
9542: PUSH
9543: LD_INT 1
9545: EQUAL
9546: IFFALSE 9566
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9548: LD_VAR 0 3
9552: PUSH
9553: LD_INT 1
9555: ARRAY
9556: PPUSH
9557: LD_STRING D8b-Sol1-4
9559: PPUSH
9560: CALL_OW 88
9564: GO 9582
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PPUSH
9575: LD_STRING D8b-FSol1-4
9577: PPUSH
9578: CALL_OW 88
// DialogueOff ;
9582: CALL_OW 7
// end ; end ;
9586: LD_VAR 0 1
9590: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9591: LD_INT 7
9593: PPUSH
9594: LD_INT 22
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: PUSH
9609: LD_INT 0
9611: GREATER
9612: PUSH
9613: LD_EXP 14
9617: PPUSH
9618: LD_INT 7
9620: PPUSH
9621: CALL_OW 308
9625: OR
9626: IFFALSE 9833
9628: GO 9630
9630: DISABLE
9631: LD_INT 0
9633: PPUSH
// begin enable ;
9634: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9635: LD_ADDR_VAR 0 1
9639: PUSH
9640: LD_INT 7
9642: PPUSH
9643: LD_INT 22
9645: PUSH
9646: LD_INT 2
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: PUSH
9658: FOR_IN
9659: IFFALSE 9800
// begin if GetClass ( i ) = 4 then
9661: LD_VAR 0 1
9665: PPUSH
9666: CALL_OW 257
9670: PUSH
9671: LD_INT 4
9673: EQUAL
9674: IFFALSE 9686
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9676: LD_INT 1
9678: PPUSH
9679: LD_STRING 10_ScientistsEscape_1
9681: PPUSH
9682: CALL_OW 39
// if i = Dietrich then
9686: LD_VAR 0 1
9690: PUSH
9691: LD_EXP 26
9695: EQUAL
9696: IFFALSE 9706
// GensherStatus = 1 ;
9698: LD_ADDR_EXP 52
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9706: LD_VAR 0 1
9710: PPUSH
9711: CALL_OW 257
9715: PUSH
9716: LD_INT 1
9718: EQUAL
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 257
9729: PUSH
9730: LD_INT 2
9732: EQUAL
9733: OR
9734: PUSH
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL_OW 257
9744: PUSH
9745: LD_INT 3
9747: EQUAL
9748: OR
9749: PUSH
9750: LD_VAR 0 1
9754: PPUSH
9755: CALL_OW 257
9759: PUSH
9760: LD_INT 4
9762: EQUAL
9763: OR
9764: PUSH
9765: LD_VAR 0 1
9769: PPUSH
9770: CALL_OW 257
9774: PUSH
9775: LD_INT 8
9777: EQUAL
9778: OR
9779: IFFALSE 9789
// arabianEscape = 1 ;
9781: LD_ADDR_EXP 47
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// RemoveUnit ( i ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 64
// end ;
9798: GO 9658
9800: POP
9801: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9802: LD_EXP 14
9806: PPUSH
9807: LD_INT 7
9809: PPUSH
9810: CALL_OW 308
9814: IFFALSE 9833
// begin KhatamStatus = 1 ;
9816: LD_ADDR_EXP 53
9820: PUSH
9821: LD_INT 1
9823: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
9824: LD_EXP 14
9828: PPUSH
9829: CALL_OW 64
// end ; end ;
9833: PPOPN 1
9835: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
9836: LD_INT 22
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 21
9848: PUSH
9849: LD_INT 1
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PPUSH
9860: CALL_OW 69
9864: PUSH
9865: LD_INT 0
9867: EQUAL
9868: PUSH
9869: LD_INT 22
9871: PUSH
9872: LD_INT 4
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: PUSH
9898: LD_INT 0
9900: EQUAL
9901: AND
9902: IFFALSE 9915
9904: GO 9906
9906: DISABLE
// arabianDefeated = 1 ;
9907: LD_ADDR_EXP 48
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
9915: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
9916: LD_INT 54
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 321
9926: PUSH
9927: LD_INT 2
9929: EQUAL
9930: PUSH
9931: LD_INT 55
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: CALL_OW 321
9941: PUSH
9942: LD_INT 2
9944: EQUAL
9945: AND
9946: PUSH
9947: LD_INT 21
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 321
9957: PUSH
9958: LD_INT 2
9960: EQUAL
9961: AND
9962: PUSH
9963: LD_INT 22
9965: PPUSH
9966: LD_INT 1
9968: PPUSH
9969: CALL_OW 321
9973: PUSH
9974: LD_INT 2
9976: EQUAL
9977: AND
9978: PUSH
9979: LD_INT 12
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 321
9989: PUSH
9990: LD_INT 2
9992: EQUAL
9993: AND
9994: PUSH
9995: LD_INT 32
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 321
10005: PUSH
10006: LD_INT 2
10008: EQUAL
10009: AND
10010: PUSH
10011: LD_EXP 63
10015: PUSH
10016: LD_INT 0
10018: EQUAL
10019: AND
10020: PUSH
10021: LD_EXP 49
10025: PUSH
10026: LD_INT 0
10028: EQUAL
10029: AND
10030: PUSH
10031: LD_OWVAR 1
10035: PUSH
10036: LD_INT 31500
10038: GREATEREQUAL
10039: AND
10040: IFFALSE 10057
10042: GO 10044
10044: DISABLE
// begin arabianTrait = 1 ;
10045: LD_ADDR_EXP 49
10049: PUSH
10050: LD_INT 1
10052: ST_TO_ADDR
// PrepareArabianTrait ;
10053: CALL 7807 0 0
// end ;
10057: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10058: LD_EXP 29
10062: PUSH
10063: LD_STRING 02_mikhailStatus_1
10065: PPUSH
10066: LD_INT 0
10068: PPUSH
10069: CALL_OW 30
10073: PUSH
10074: LD_INT 1
10076: EQUAL
10077: AND
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 5
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PPUSH
10089: CALL_OW 69
10093: PUSH
10094: LD_INT 0
10096: EQUAL
10097: AND
10098: PUSH
10099: LD_INT 22
10101: PUSH
10102: LD_INT 2
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 21
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 69
10127: PUSH
10128: LD_INT 0
10130: EQUAL
10131: PUSH
10132: LD_EXP 49
10136: PUSH
10137: LD_INT 0
10139: EQUAL
10140: OR
10141: AND
10142: IFFALSE 10151
10144: GO 10146
10146: DISABLE
// PrepareCornell ;
10147: CALL 3349 0 0
10151: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10152: LD_INT 22
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 69
10166: PPUSH
10167: LD_EXP 19
10171: PPUSH
10172: CALL_OW 74
10176: PPUSH
10177: LD_EXP 19
10181: PPUSH
10182: CALL_OW 296
10186: PUSH
10187: LD_INT 9
10189: LESS
10190: IFFALSE 10411
10192: GO 10194
10194: DISABLE
// begin InGameOn ;
10195: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10199: LD_EXP 19
10203: PPUSH
10204: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10208: LD_EXP 19
10212: PPUSH
10213: LD_STRING D7-Corn-1
10215: PPUSH
10216: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10220: LD_INT 22
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 2
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 25
10245: PUSH
10246: LD_INT 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 25
10255: PUSH
10256: LD_INT 3
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 25
10265: PUSH
10266: LD_INT 4
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 69
10299: PPUSH
10300: LD_STRING D7-Sol1-1
10302: PPUSH
10303: LD_STRING D7-FSol1-1
10305: PPUSH
10306: CALL 10901 0 3
// CenterNowOnUnits ( Cornell ) ;
10310: LD_EXP 19
10314: PPUSH
10315: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10319: LD_EXP 19
10323: PPUSH
10324: LD_STRING D7-Corn-2
10326: PPUSH
10327: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10331: LD_EXP 1
10335: PPUSH
10336: LD_STRING D7-JMM-2
10338: PPUSH
10339: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10343: LD_EXP 19
10347: PPUSH
10348: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10352: LD_EXP 19
10356: PPUSH
10357: LD_STRING D7-Corn-3
10359: PPUSH
10360: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10364: LD_EXP 19
10368: PPUSH
10369: LD_INT 250
10371: PPUSH
10372: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10376: LD_EXP 19
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: CALL_OW 235
// wait ( 0 0$1 ) ;
10388: LD_INT 35
10390: PPUSH
10391: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10395: LD_EXP 1
10399: PPUSH
10400: LD_STRING D7-JMM-3
10402: PPUSH
10403: CALL_OW 88
// InGameOff ;
10407: CALL_OW 9
// end ;
10411: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10412: LD_EXP 19
10416: PPUSH
10417: CALL_OW 255
10421: PUSH
10422: LD_INT 1
10424: EQUAL
10425: PUSH
10426: LD_EXP 19
10430: PPUSH
10431: CALL_OW 256
10435: PUSH
10436: LD_INT 350
10438: GREATER
10439: AND
10440: IFFALSE 10633
10442: GO 10444
10444: DISABLE
// begin DialogueOn ;
10445: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10449: LD_EXP 1
10453: PPUSH
10454: LD_STRING D7a-JMM-1
10456: PPUSH
10457: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10461: LD_EXP 19
10465: PPUSH
10466: LD_STRING D7a-Corn-1
10468: PPUSH
10469: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10473: LD_EXP 1
10477: PPUSH
10478: LD_STRING D7a-JMM-2
10480: PPUSH
10481: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10485: LD_EXP 19
10489: PPUSH
10490: LD_STRING D7a-Corn-2
10492: PPUSH
10493: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10497: LD_EXP 1
10501: PPUSH
10502: LD_STRING D7a-JMM-3
10504: PPUSH
10505: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10509: LD_EXP 19
10513: PPUSH
10514: LD_STRING D7a-Corn-3
10516: PPUSH
10517: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10521: LD_EXP 1
10525: PPUSH
10526: LD_STRING D7a-JMM-4
10528: PPUSH
10529: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10533: LD_EXP 19
10537: PPUSH
10538: LD_STRING D7a-Corn-4
10540: PPUSH
10541: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10545: LD_EXP 1
10549: PPUSH
10550: LD_STRING D7a-JMM-5
10552: PPUSH
10553: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10557: LD_EXP 19
10561: PPUSH
10562: LD_STRING D7a-Corn-5
10564: PPUSH
10565: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10569: LD_EXP 1
10573: PPUSH
10574: LD_STRING D7a-JMM-6
10576: PPUSH
10577: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10581: LD_EXP 19
10585: PPUSH
10586: LD_STRING D7a-Corn-6
10588: PPUSH
10589: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10593: LD_EXP 1
10597: PPUSH
10598: LD_STRING D7a-JMM-7
10600: PPUSH
10601: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10605: LD_EXP 19
10609: PPUSH
10610: LD_STRING D7a-Corn-7
10612: PPUSH
10613: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10617: LD_EXP 1
10621: PPUSH
10622: LD_STRING D7a-JMM-8
10624: PPUSH
10625: CALL_OW 88
// DialogueOff ;
10629: CALL_OW 7
// end ;
10633: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10634: LD_EXP 61
10638: PUSH
10639: LD_EXP 1
10643: PPUSH
10644: CALL_OW 302
10648: PUSH
10649: LD_EXP 5
10653: PPUSH
10654: CALL_OW 302
10658: OR
10659: AND
10660: IFFALSE 10750
10662: GO 10664
10664: DISABLE
// begin Wait ( 0 0$2 ) ;
10665: LD_INT 70
10667: PPUSH
10668: CALL_OW 67
// DialogueOn ;
10672: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10676: LD_EXP 61
10680: PUSH
10681: LD_INT 1
10683: ARRAY
10684: PPUSH
10685: LD_EXP 61
10689: PUSH
10690: LD_INT 2
10692: ARRAY
10693: PPUSH
10694: CALL_OW 86
// if IsOk ( Cyrus ) then
10698: LD_EXP 5
10702: PPUSH
10703: CALL_OW 302
10707: IFFALSE 10723
// Say ( Cyrus , D10-Cyrus-1 ) else
10709: LD_EXP 5
10713: PPUSH
10714: LD_STRING D10-Cyrus-1
10716: PPUSH
10717: CALL_OW 88
10721: GO 10746
// if IsOk ( JMM ) then
10723: LD_EXP 1
10727: PPUSH
10728: CALL_OW 302
10732: IFFALSE 10746
// Say ( JMM , D10-JMM-1 ) ;
10734: LD_EXP 1
10738: PPUSH
10739: LD_STRING D10-JMM-1
10741: PPUSH
10742: CALL_OW 88
// DialogueOff ;
10746: CALL_OW 7
// end ;
10750: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10751: LD_INT 12
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 321
10761: PUSH
10762: LD_INT 2
10764: EQUAL
10765: IFFALSE 10777
10767: GO 10769
10769: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10770: LD_STRING M2b
10772: PPUSH
10773: CALL_OW 337
10777: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10778: LD_INT 32
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 321
10788: PUSH
10789: LD_INT 2
10791: EQUAL
10792: IFFALSE 10804
10794: GO 10796
10796: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10797: LD_STRING M2c
10799: PPUSH
10800: CALL_OW 337
10804: END
// every 0 0$1 trigger arabianDefeated = 1 do
10805: LD_EXP 48
10809: PUSH
10810: LD_INT 1
10812: EQUAL
10813: IFFALSE 10825
10815: GO 10817
10817: DISABLE
// ChangeMissionObjectives ( M4a ) ;
10818: LD_STRING M4a
10820: PPUSH
10821: CALL_OW 337
10825: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
10826: LD_INT 54
10828: PPUSH
10829: LD_INT 1
10831: PPUSH
10832: CALL_OW 321
10836: PUSH
10837: LD_INT 2
10839: EQUAL
10840: PUSH
10841: LD_INT 55
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 321
10851: PUSH
10852: LD_INT 2
10854: EQUAL
10855: AND
10856: PUSH
10857: LD_INT 21
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 321
10867: PUSH
10868: LD_INT 2
10870: EQUAL
10871: AND
10872: PUSH
10873: LD_INT 22
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 321
10883: PUSH
10884: LD_INT 2
10886: EQUAL
10887: AND
10888: IFFALSE 10900
10890: GO 10892
10892: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
10893: LD_STRING M2a
10895: PPUSH
10896: CALL_OW 337
10900: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
10901: LD_INT 0
10903: PPUSH
10904: PPUSH
10905: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
10906: LD_ADDR_VAR 0 1
10910: PUSH
10911: LD_VAR 0 1
10915: PUSH
10916: LD_EXP 1
10920: PUSH
10921: LD_EXP 2
10925: PUSH
10926: LD_EXP 3
10930: PUSH
10931: LD_EXP 4
10935: PUSH
10936: LD_EXP 5
10940: PUSH
10941: LD_EXP 6
10945: PUSH
10946: LD_EXP 7
10950: PUSH
10951: LD_EXP 8
10955: PUSH
10956: LD_EXP 9
10960: PUSH
10961: LD_EXP 10
10965: PUSH
10966: LD_EXP 11
10970: PUSH
10971: LD_EXP 12
10975: PUSH
10976: LD_EXP 13
10980: PUSH
10981: LD_EXP 14
10985: PUSH
10986: LD_EXP 15
10990: PUSH
10991: LD_EXP 16
10995: PUSH
10996: LD_EXP 17
11000: PUSH
11001: LD_EXP 18
11005: PUSH
11006: LD_EXP 19
11010: PUSH
11011: LD_EXP 24
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: DIFF
11038: ST_TO_ADDR
// if not characters then
11039: LD_VAR 0 1
11043: NOT
11044: IFFALSE 11048
// exit ;
11046: GO 11194
// rnd = rand ( 1 , characters ) ;
11048: LD_ADDR_VAR 0 6
11052: PUSH
11053: LD_INT 1
11055: PPUSH
11056: LD_VAR 0 1
11060: PPUSH
11061: CALL_OW 12
11065: ST_TO_ADDR
// for i = 1 to characters do
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: DOUBLE
11072: LD_INT 1
11074: DEC
11075: ST_TO_ADDR
11076: LD_VAR 0 1
11080: PUSH
11081: FOR_TO
11082: IFFALSE 11192
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11084: LD_VAR 0 5
11088: PUSH
11089: LD_VAR 0 6
11093: EQUAL
11094: PUSH
11095: LD_VAR 0 1
11099: PUSH
11100: LD_VAR 0 5
11104: ARRAY
11105: PPUSH
11106: CALL_OW 258
11110: PUSH
11111: LD_INT 1
11113: EQUAL
11114: AND
11115: IFFALSE 11137
// Say ( characters [ i ] , dialogMID ) ;
11117: LD_VAR 0 1
11121: PUSH
11122: LD_VAR 0 5
11126: ARRAY
11127: PPUSH
11128: LD_VAR 0 2
11132: PPUSH
11133: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11137: LD_VAR 0 5
11141: PUSH
11142: LD_VAR 0 6
11146: EQUAL
11147: PUSH
11148: LD_VAR 0 1
11152: PUSH
11153: LD_VAR 0 5
11157: ARRAY
11158: PPUSH
11159: CALL_OW 258
11163: PUSH
11164: LD_INT 2
11166: EQUAL
11167: AND
11168: IFFALSE 11190
// Say ( characters [ i ] , dialogFID ) ;
11170: LD_VAR 0 1
11174: PUSH
11175: LD_VAR 0 5
11179: ARRAY
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: CALL_OW 88
// end ;
11190: GO 11081
11192: POP
11193: POP
// end ;
11194: LD_VAR 0 4
11198: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11199: LD_INT 0
11201: PPUSH
11202: PPUSH
// for i in charactersList do
11203: LD_ADDR_VAR 0 4
11207: PUSH
11208: LD_VAR 0 1
11212: PUSH
11213: FOR_IN
11214: IFFALSE 11232
// SaveCharacters ( i , ident ) ;
11216: LD_VAR 0 4
11220: PPUSH
11221: LD_VAR 0 2
11225: PPUSH
11226: CALL_OW 38
11230: GO 11213
11232: POP
11233: POP
// end ;
11234: LD_VAR 0 3
11238: RET
// export function PrepareDifficulty ; begin
11239: LD_INT 0
11241: PPUSH
// if difficulty = 1 then
11242: LD_OWVAR 67
11246: PUSH
11247: LD_INT 1
11249: EQUAL
11250: IFFALSE 11294
// begin RuSolMinLevel = 3 ;
11252: LD_ADDR_EXP 36
11256: PUSH
11257: LD_INT 3
11259: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11260: LD_ADDR_EXP 37
11264: PUSH
11265: LD_INT 5
11267: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11268: LD_INT 51
11270: PPUSH
11271: LD_INT 6
11273: PPUSH
11274: LD_INT 2
11276: PPUSH
11277: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11281: LD_INT 51
11283: PPUSH
11284: LD_INT 5
11286: PPUSH
11287: LD_INT 2
11289: PPUSH
11290: CALL_OW 322
// end ; if difficulty = 2 then
11294: LD_OWVAR 67
11298: PUSH
11299: LD_INT 2
11301: EQUAL
11302: IFFALSE 11398
// begin RuSolMinLevel = 5 ;
11304: LD_ADDR_EXP 36
11308: PUSH
11309: LD_INT 5
11311: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11312: LD_ADDR_EXP 37
11316: PUSH
11317: LD_INT 7
11319: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11320: LD_INT 51
11322: PPUSH
11323: LD_INT 6
11325: PPUSH
11326: LD_INT 2
11328: PPUSH
11329: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11333: LD_INT 57
11335: PPUSH
11336: LD_INT 6
11338: PPUSH
11339: LD_INT 2
11341: PPUSH
11342: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11346: LD_INT 63
11348: PPUSH
11349: LD_INT 6
11351: PPUSH
11352: LD_INT 2
11354: PPUSH
11355: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11359: LD_INT 51
11361: PPUSH
11362: LD_INT 5
11364: PPUSH
11365: LD_INT 2
11367: PPUSH
11368: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11372: LD_INT 5
11374: PPUSH
11375: LD_INT 2
11377: PPUSH
11378: LD_INT 2
11380: PPUSH
11381: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11385: LD_INT 5
11387: PPUSH
11388: LD_INT 5
11390: PPUSH
11391: LD_INT 2
11393: PPUSH
11394: CALL_OW 322
// end ; if difficulty = 3 then
11398: LD_OWVAR 67
11402: PUSH
11403: LD_INT 3
11405: EQUAL
11406: IFFALSE 11554
// begin RuSolMinLevel = 6 ;
11408: LD_ADDR_EXP 36
11412: PUSH
11413: LD_INT 6
11415: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11416: LD_ADDR_EXP 37
11420: PUSH
11421: LD_INT 8
11423: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11424: LD_INT 51
11426: PPUSH
11427: LD_INT 6
11429: PPUSH
11430: LD_INT 2
11432: PPUSH
11433: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11437: LD_INT 57
11439: PPUSH
11440: LD_INT 6
11442: PPUSH
11443: LD_INT 2
11445: PPUSH
11446: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11450: LD_INT 52
11452: PPUSH
11453: LD_INT 6
11455: PPUSH
11456: LD_INT 2
11458: PPUSH
11459: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11463: LD_INT 58
11465: PPUSH
11466: LD_INT 6
11468: PPUSH
11469: LD_INT 2
11471: PPUSH
11472: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11476: LD_INT 63
11478: PPUSH
11479: LD_INT 6
11481: PPUSH
11482: LD_INT 2
11484: PPUSH
11485: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11489: LD_INT 64
11491: PPUSH
11492: LD_INT 6
11494: PPUSH
11495: LD_INT 2
11497: PPUSH
11498: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11502: LD_INT 51
11504: PPUSH
11505: LD_INT 5
11507: PPUSH
11508: LD_INT 2
11510: PPUSH
11511: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11515: LD_INT 52
11517: PPUSH
11518: LD_INT 5
11520: PPUSH
11521: LD_INT 2
11523: PPUSH
11524: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11528: LD_INT 66
11530: PPUSH
11531: LD_INT 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11541: LD_INT 66
11543: PPUSH
11544: LD_INT 5
11546: PPUSH
11547: LD_INT 2
11549: PPUSH
11550: CALL_OW 322
// end ; end ;
11554: LD_VAR 0 1
11558: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11559: LD_INT 0
11561: PPUSH
11562: PPUSH
11563: PPUSH
11564: PPUSH
11565: PPUSH
11566: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11567: LD_ADDR_VAR 0 7
11571: PUSH
11572: LD_INT 43
11574: PUSH
11575: LD_INT 68
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 43
11584: PUSH
11585: LD_INT 79
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 99
11594: PUSH
11595: LD_INT 114
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 103
11604: PUSH
11605: LD_INT 114
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 156
11614: PUSH
11615: LD_INT 92
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 152
11624: PUSH
11625: LD_INT 85
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: ST_TO_ADDR
// for i in sources do
11640: LD_ADDR_VAR 0 3
11644: PUSH
11645: LD_VAR 0 7
11649: PUSH
11650: FOR_IN
11651: IFFALSE 11680
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 1
11660: ARRAY
11661: PPUSH
11662: LD_VAR 0 3
11666: PUSH
11667: LD_INT 2
11669: ARRAY
11670: PPUSH
11671: LD_INT 3
11673: PPUSH
11674: CALL_OW 441
11678: GO 11650
11680: POP
11681: POP
// case position of 1 :
11682: LD_VAR 0 1
11686: PUSH
11687: LD_INT 1
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11706
11695: POP
// area := westConv ; 2 :
11696: LD_ADDR_VAR 0 6
11700: PUSH
11701: LD_INT 20
11703: ST_TO_ADDR
11704: GO 11745
11706: LD_INT 2
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11725
11714: POP
// area := midConv ; 3 :
11715: LD_ADDR_VAR 0 6
11719: PUSH
11720: LD_INT 21
11722: ST_TO_ADDR
11723: GO 11745
11725: LD_INT 3
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11733
11731: GO 11744
11733: POP
// area := eastConv ; end ;
11734: LD_ADDR_VAR 0 6
11738: PUSH
11739: LD_INT 22
11741: ST_TO_ADDR
11742: GO 11745
11744: POP
// area := AreaToList ( area , 0 ) ;
11745: LD_ADDR_VAR 0 6
11749: PUSH
11750: LD_VAR 0 6
11754: PPUSH
11755: LD_INT 0
11757: PPUSH
11758: CALL_OW 517
11762: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11763: LD_ADDR_VAR 0 3
11767: PUSH
11768: DOUBLE
11769: LD_INT 1
11771: DEC
11772: ST_TO_ADDR
11773: LD_VAR 0 6
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PUSH
11782: FOR_TO
11783: IFFALSE 11864
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11785: LD_VAR 0 6
11789: PUSH
11790: LD_INT 1
11792: ARRAY
11793: PUSH
11794: LD_VAR 0 3
11798: ARRAY
11799: PPUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 2
11807: ARRAY
11808: PUSH
11809: LD_VAR 0 3
11813: ARRAY
11814: PPUSH
11815: LD_INT 1
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
11825: LD_VAR 0 6
11829: PUSH
11830: LD_INT 1
11832: ARRAY
11833: PUSH
11834: LD_VAR 0 3
11838: ARRAY
11839: PPUSH
11840: LD_VAR 0 6
11844: PUSH
11845: LD_INT 2
11847: ARRAY
11848: PUSH
11849: LD_VAR 0 3
11853: ARRAY
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 331
// end ;
11862: GO 11782
11864: POP
11865: POP
// ruPossition = position ;
11866: LD_ADDR_EXP 41
11870: PUSH
11871: LD_VAR 0 1
11875: ST_TO_ADDR
// if position = 1 then
11876: LD_VAR 0 1
11880: PUSH
11881: LD_INT 1
11883: EQUAL
11884: IFFALSE 12632
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11886: LD_ADDR_VAR 0 4
11890: PUSH
11891: LD_INT 22
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 25
11903: PUSH
11904: LD_INT 2
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PPUSH
11915: CALL_OW 69
11919: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
11920: LD_ADDR_VAR 0 5
11924: PUSH
11925: LD_INT 0
11927: PUSH
11928: LD_INT 49
11930: PUSH
11931: LD_INT 74
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 4
11945: PUSH
11946: LD_INT 73
11948: PUSH
11949: LD_INT 88
11951: PUSH
11952: LD_INT 5
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 4
11963: PUSH
11964: LD_INT 56
11966: PUSH
11967: LD_INT 62
11969: PUSH
11970: LD_INT 3
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 29
11981: PUSH
11982: LD_INT 43
11984: PUSH
11985: LD_INT 68
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 30
11999: PUSH
12000: LD_INT 43
12002: PUSH
12003: LD_INT 79
12005: PUSH
12006: LD_INT 5
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 28
12017: PUSH
12018: LD_INT 60
12020: PUSH
12021: LD_INT 75
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 50
12038: PUSH
12039: LD_INT 87
12041: PUSH
12042: LD_INT 1
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 28
12053: PUSH
12054: LD_INT 45
12056: PUSH
12057: LD_INT 67
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 17
12071: PUSH
12072: LD_INT 47
12074: PUSH
12075: LD_INT 84
12077: PUSH
12078: LD_INT 2
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 18
12089: PUSH
12090: LD_INT 46
12092: PUSH
12093: LD_INT 87
12095: PUSH
12096: LD_INT 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 28
12107: PUSH
12108: LD_INT 41
12110: PUSH
12111: LD_INT 64
12113: PUSH
12114: LD_INT 5
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 32
12125: PUSH
12126: LD_INT 75
12128: PUSH
12129: LD_INT 76
12131: PUSH
12132: LD_INT 5
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 32
12143: PUSH
12144: LD_INT 77
12146: PUSH
12147: LD_INT 75
12149: PUSH
12150: LD_INT 5
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 32
12161: PUSH
12162: LD_INT 69
12164: PUSH
12165: LD_INT 68
12167: PUSH
12168: LD_INT 3
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 32
12179: PUSH
12180: LD_INT 59
12182: PUSH
12183: LD_INT 96
12185: PUSH
12186: LD_INT 5
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 32
12197: PUSH
12198: LD_INT 56
12200: PUSH
12201: LD_INT 96
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: PUSH
12213: LD_INT 32
12215: PUSH
12216: LD_INT 51
12218: PUSH
12219: LD_INT 61
12221: PUSH
12222: LD_INT 3
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 32
12233: PUSH
12234: LD_INT 42
12236: PUSH
12237: LD_INT 60
12239: PUSH
12240: LD_INT 3
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 32
12251: PUSH
12252: LD_INT 36
12254: PUSH
12255: LD_INT 58
12257: PUSH
12258: LD_INT 3
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 32
12269: PUSH
12270: LD_INT 39
12272: PUSH
12273: LD_INT 59
12275: PUSH
12276: LD_INT 3
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 32
12287: PUSH
12288: LD_INT 61
12290: PUSH
12291: LD_INT 64
12293: PUSH
12294: LD_INT 3
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 33
12305: PUSH
12306: LD_INT 63
12308: PUSH
12309: LD_INT 90
12311: PUSH
12312: LD_INT 5
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 33
12323: PUSH
12324: LD_INT 64
12326: PUSH
12327: LD_INT 88
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 33
12341: PUSH
12342: LD_INT 72
12344: PUSH
12345: LD_INT 82
12347: PUSH
12348: LD_INT 5
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 6
12359: PUSH
12360: LD_INT 42
12362: PUSH
12363: LD_INT 74
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 6
12377: PUSH
12378: LD_INT 56
12380: PUSH
12381: LD_INT 77
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 54
12398: PUSH
12399: LD_INT 91
12401: PUSH
12402: LD_INT 5
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 16
12413: PUSH
12414: LD_INT 50
12416: PUSH
12417: LD_INT 83
12419: PUSH
12420: LD_INT 3
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 24
12431: PUSH
12432: LD_INT 50
12434: PUSH
12435: LD_INT 90
12437: PUSH
12438: LD_INT 0
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_INT 22
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 3
12495: PUSH
12496: LD_INT 25
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12539
// AddComAgressiveMove ( i , 53 , 82 ) ;
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 53
12529: PPUSH
12530: LD_INT 82
12532: PPUSH
12533: CALL_OW 174
12537: GO 12519
12539: POP
12540: POP
// for i := 1 to buildingsTab do
12541: LD_ADDR_VAR 0 3
12545: PUSH
12546: DOUBLE
12547: LD_INT 1
12549: DEC
12550: ST_TO_ADDR
12551: LD_VAR 0 5
12555: PUSH
12556: FOR_TO
12557: IFFALSE 12630
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12559: LD_VAR 0 4
12563: PPUSH
12564: LD_VAR 0 5
12568: PUSH
12569: LD_VAR 0 3
12573: ARRAY
12574: PUSH
12575: LD_INT 1
12577: ARRAY
12578: PPUSH
12579: LD_VAR 0 5
12583: PUSH
12584: LD_VAR 0 3
12588: ARRAY
12589: PUSH
12590: LD_INT 2
12592: ARRAY
12593: PPUSH
12594: LD_VAR 0 5
12598: PUSH
12599: LD_VAR 0 3
12603: ARRAY
12604: PUSH
12605: LD_INT 3
12607: ARRAY
12608: PPUSH
12609: LD_VAR 0 5
12613: PUSH
12614: LD_VAR 0 3
12618: ARRAY
12619: PUSH
12620: LD_INT 4
12622: ARRAY
12623: PPUSH
12624: CALL_OW 205
12628: GO 12556
12630: POP
12631: POP
// end ; if position = 2 then
12632: LD_VAR 0 1
12636: PUSH
12637: LD_INT 2
12639: EQUAL
12640: IFFALSE 13255
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12642: LD_ADDR_VAR 0 4
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 25
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12676: LD_ADDR_VAR 0 5
12680: PUSH
12681: LD_INT 0
12683: PUSH
12684: LD_INT 104
12686: PUSH
12687: LD_INT 110
12689: PUSH
12690: LD_INT 5
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 4
12701: PUSH
12702: LD_INT 98
12704: PUSH
12705: LD_INT 90
12707: PUSH
12708: LD_INT 3
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 29
12719: PUSH
12720: LD_INT 103
12722: PUSH
12723: LD_INT 114
12725: PUSH
12726: LD_INT 2
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 30
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 114
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 28
12755: PUSH
12756: LD_INT 100
12758: PUSH
12759: LD_INT 112
12761: PUSH
12762: LD_INT 1
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 0
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 28
12791: PUSH
12792: LD_INT 97
12794: PUSH
12795: LD_INT 116
12797: PUSH
12798: LD_INT 5
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 17
12809: PUSH
12810: LD_INT 96
12812: PUSH
12813: LD_INT 101
12815: PUSH
12816: LD_INT 4
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 18
12827: PUSH
12828: LD_INT 88
12830: PUSH
12831: LD_INT 97
12833: PUSH
12834: LD_INT 2
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 28
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 92
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 32
12863: PUSH
12864: LD_INT 88
12866: PUSH
12867: LD_INT 89
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: LD_INT 32
12881: PUSH
12882: LD_INT 86
12884: PUSH
12885: LD_INT 90
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 32
12899: PUSH
12900: LD_INT 85
12902: PUSH
12903: LD_INT 99
12905: PUSH
12906: LD_INT 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 32
12917: PUSH
12918: LD_INT 85
12920: PUSH
12921: LD_INT 107
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 33
12935: PUSH
12936: LD_INT 105
12938: PUSH
12939: LD_INT 99
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 33
12953: PUSH
12954: LD_INT 102
12956: PUSH
12957: LD_INT 92
12959: PUSH
12960: LD_INT 3
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 33
12971: PUSH
12972: LD_INT 105
12974: PUSH
12975: LD_INT 92
12977: PUSH
12978: LD_INT 2
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 6
12989: PUSH
12990: LD_INT 92
12992: PUSH
12993: LD_INT 110
12995: PUSH
12996: LD_INT 0
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 6
13007: PUSH
13008: LD_INT 103
13010: PUSH
13011: LD_INT 103
13013: PUSH
13014: LD_INT 5
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 89
13028: PUSH
13029: LD_INT 101
13031: PUSH
13032: LD_INT 1
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 16
13043: PUSH
13044: LD_INT 95
13046: PUSH
13047: LD_INT 104
13049: PUSH
13050: LD_INT 4
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 24
13061: PUSH
13062: LD_INT 92
13064: PUSH
13065: LD_INT 105
13067: PUSH
13068: LD_INT 0
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 3
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 2
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 69
13141: PUSH
13142: FOR_IN
13143: IFFALSE 13162
// AddComAgressiveMove ( i , 96 , 99 ) ;
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 96
13152: PPUSH
13153: LD_INT 99
13155: PPUSH
13156: CALL_OW 174
13160: GO 13142
13162: POP
13163: POP
// for i := 1 to buildingsTab do
13164: LD_ADDR_VAR 0 3
13168: PUSH
13169: DOUBLE
13170: LD_INT 1
13172: DEC
13173: ST_TO_ADDR
13174: LD_VAR 0 5
13178: PUSH
13179: FOR_TO
13180: IFFALSE 13253
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13182: LD_VAR 0 4
13186: PPUSH
13187: LD_VAR 0 5
13191: PUSH
13192: LD_VAR 0 3
13196: ARRAY
13197: PUSH
13198: LD_INT 1
13200: ARRAY
13201: PPUSH
13202: LD_VAR 0 5
13206: PUSH
13207: LD_VAR 0 3
13211: ARRAY
13212: PUSH
13213: LD_INT 2
13215: ARRAY
13216: PPUSH
13217: LD_VAR 0 5
13221: PUSH
13222: LD_VAR 0 3
13226: ARRAY
13227: PUSH
13228: LD_INT 3
13230: ARRAY
13231: PPUSH
13232: LD_VAR 0 5
13236: PUSH
13237: LD_VAR 0 3
13241: ARRAY
13242: PUSH
13243: LD_INT 4
13245: ARRAY
13246: PPUSH
13247: CALL_OW 205
13251: GO 13179
13253: POP
13254: POP
// end ; if position = 3 then
13255: LD_VAR 0 1
13259: PUSH
13260: LD_INT 3
13262: EQUAL
13263: IFFALSE 14049
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13265: LD_ADDR_VAR 0 4
13269: PUSH
13270: LD_INT 22
13272: PUSH
13273: LD_INT 3
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 25
13282: PUSH
13283: LD_INT 2
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13299: LD_ADDR_VAR 0 5
13303: PUSH
13304: LD_INT 0
13306: PUSH
13307: LD_INT 151
13309: PUSH
13310: LD_INT 71
13312: PUSH
13313: LD_INT 4
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 4
13324: PUSH
13325: LD_INT 145
13327: PUSH
13328: LD_INT 53
13330: PUSH
13331: LD_INT 3
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 4
13342: PUSH
13343: LD_INT 172
13345: PUSH
13346: LD_INT 102
13348: PUSH
13349: LD_INT 5
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 29
13360: PUSH
13361: LD_INT 152
13363: PUSH
13364: LD_INT 85
13366: PUSH
13367: LD_INT 3
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 156
13381: PUSH
13382: LD_INT 92
13384: PUSH
13385: LD_INT 3
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 28
13396: PUSH
13397: LD_INT 151
13399: PUSH
13400: LD_INT 66
13402: PUSH
13403: LD_INT 4
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 2
13414: PUSH
13415: LD_INT 163
13417: PUSH
13418: LD_INT 95
13420: PUSH
13421: LD_INT 5
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 28
13432: PUSH
13433: LD_INT 149
13435: PUSH
13436: LD_INT 63
13438: PUSH
13439: LD_INT 4
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 17
13450: PUSH
13451: LD_INT 167
13453: PUSH
13454: LD_INT 99
13456: PUSH
13457: LD_INT 5
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 18
13468: PUSH
13469: LD_INT 163
13471: PUSH
13472: LD_INT 98
13474: PUSH
13475: LD_INT 0
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 28
13486: PUSH
13487: LD_INT 154
13489: PUSH
13490: LD_INT 70
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 32
13504: PUSH
13505: LD_INT 155
13507: PUSH
13508: LD_INT 62
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 32
13522: PUSH
13523: LD_INT 161
13525: PUSH
13526: LD_INT 69
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 32
13540: PUSH
13541: LD_INT 168
13543: PUSH
13544: LD_INT 78
13546: PUSH
13547: LD_INT 4
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 32
13558: PUSH
13559: LD_INT 163
13561: PUSH
13562: LD_INT 80
13564: PUSH
13565: LD_INT 5
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 32
13576: PUSH
13577: LD_INT 136
13579: PUSH
13580: LD_INT 73
13582: PUSH
13583: LD_INT 0
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 32
13594: PUSH
13595: LD_INT 157
13597: PUSH
13598: LD_INT 98
13600: PUSH
13601: LD_INT 0
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 32
13612: PUSH
13613: LD_INT 150
13615: PUSH
13616: LD_INT 87
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 33
13630: PUSH
13631: LD_INT 171
13633: PUSH
13634: LD_INT 97
13636: PUSH
13637: LD_INT 4
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 33
13648: PUSH
13649: LD_INT 168
13651: PUSH
13652: LD_INT 92
13654: PUSH
13655: LD_INT 4
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 33
13666: PUSH
13667: LD_INT 166
13669: PUSH
13670: LD_INT 80
13672: PUSH
13673: LD_INT 5
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 33
13684: PUSH
13685: LD_INT 141
13687: PUSH
13688: LD_INT 54
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 33
13702: PUSH
13703: LD_INT 133
13705: PUSH
13706: LD_INT 57
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 33
13720: PUSH
13721: LD_INT 132
13723: PUSH
13724: LD_INT 61
13726: PUSH
13727: LD_INT 2
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 33
13738: PUSH
13739: LD_INT 150
13741: PUSH
13742: LD_INT 82
13744: PUSH
13745: LD_INT 0
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 33
13756: PUSH
13757: LD_INT 132
13759: PUSH
13760: LD_INT 72
13762: PUSH
13763: LD_INT 0
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 6
13774: PUSH
13775: LD_INT 146
13777: PUSH
13778: LD_INT 64
13780: PUSH
13781: LD_INT 4
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 6
13792: PUSH
13793: LD_INT 159
13795: PUSH
13796: LD_INT 85
13798: PUSH
13799: LD_INT 4
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 21
13810: PUSH
13811: LD_INT 163
13813: PUSH
13814: LD_INT 91
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 16
13828: PUSH
13829: LD_INT 166
13831: PUSH
13832: LD_INT 95
13834: PUSH
13835: LD_INT 4
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 24
13846: PUSH
13847: LD_INT 159
13849: PUSH
13850: LD_INT 95
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_INT 22
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 3
13912: PUSH
13913: LD_INT 25
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 69
13935: PUSH
13936: FOR_IN
13937: IFFALSE 13956
// AddComAgressiveMove ( i , 141 , 65 ) ;
13939: LD_VAR 0 3
13943: PPUSH
13944: LD_INT 141
13946: PPUSH
13947: LD_INT 65
13949: PPUSH
13950: CALL_OW 174
13954: GO 13936
13956: POP
13957: POP
// for i := 1 to buildingsTab do
13958: LD_ADDR_VAR 0 3
13962: PUSH
13963: DOUBLE
13964: LD_INT 1
13966: DEC
13967: ST_TO_ADDR
13968: LD_VAR 0 5
13972: PUSH
13973: FOR_TO
13974: IFFALSE 14047
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13976: LD_VAR 0 4
13980: PPUSH
13981: LD_VAR 0 5
13985: PUSH
13986: LD_VAR 0 3
13990: ARRAY
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 5
14000: PUSH
14001: LD_VAR 0 3
14005: ARRAY
14006: PUSH
14007: LD_INT 2
14009: ARRAY
14010: PPUSH
14011: LD_VAR 0 5
14015: PUSH
14016: LD_VAR 0 3
14020: ARRAY
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PPUSH
14026: LD_VAR 0 5
14030: PUSH
14031: LD_VAR 0 3
14035: ARRAY
14036: PUSH
14037: LD_INT 4
14039: ARRAY
14040: PPUSH
14041: CALL_OW 205
14045: GO 13973
14047: POP
14048: POP
// end ; end ;
14049: LD_VAR 0 2
14053: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
14058: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14059: LD_ADDR_EXP 68
14063: PUSH
14064: LD_INT 0
14066: PUSH
14067: LD_INT 71
14069: PUSH
14070: LD_INT 15
14072: PUSH
14073: LD_INT 3
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 6
14084: PUSH
14085: LD_INT 77
14087: PUSH
14088: LD_INT 18
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 4
14102: PUSH
14103: LD_INT 77
14105: PUSH
14106: LD_INT 26
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 31
14120: PUSH
14121: LD_INT 72
14123: PUSH
14124: LD_INT 24
14126: PUSH
14127: LD_INT 0
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 31
14138: PUSH
14139: LD_INT 82
14141: PUSH
14142: LD_INT 28
14144: PUSH
14145: LD_INT 0
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 31
14156: PUSH
14157: LD_INT 84
14159: PUSH
14160: LD_INT 21
14162: PUSH
14163: LD_INT 3
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 31
14174: PUSH
14175: LD_INT 66
14177: PUSH
14178: LD_INT 14
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 27
14192: PUSH
14193: LD_INT 67
14195: PUSH
14196: LD_INT 18
14198: PUSH
14199: LD_INT 5
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 27
14210: PUSH
14211: LD_INT 69
14213: PUSH
14214: LD_INT 23
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14237: LD_ADDR_VAR 0 3
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 25
14254: PUSH
14255: LD_INT 2
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_EXP 68
14280: PUSH
14281: LD_INT 1
14283: ARRAY
14284: PUSH
14285: LD_INT 1
14287: ARRAY
14288: PPUSH
14289: LD_EXP 68
14293: PUSH
14294: LD_INT 1
14296: ARRAY
14297: PUSH
14298: LD_INT 2
14300: ARRAY
14301: PPUSH
14302: LD_EXP 68
14306: PUSH
14307: LD_INT 1
14309: ARRAY
14310: PUSH
14311: LD_INT 3
14313: ARRAY
14314: PPUSH
14315: LD_EXP 68
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PUSH
14324: LD_INT 4
14326: ARRAY
14327: PPUSH
14328: CALL_OW 205
// end ;
14332: LD_VAR 0 1
14336: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14337: LD_INT 0
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14345: LD_ADDR_VAR 0 7
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_VAR 0 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 25
14364: PUSH
14365: LD_INT 9
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14381: LD_ADDR_VAR 0 8
14385: PUSH
14386: LD_INT 22
14388: PUSH
14389: LD_VAR 0 2
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 3
14400: PUSH
14401: LD_INT 21
14403: PUSH
14404: LD_INT 3
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PPUSH
14419: CALL_OW 69
14423: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14424: LD_ADDR_VAR 0 5
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_INT 3
14434: PPUSH
14435: CALL_OW 12
14439: ST_TO_ADDR
// for i = 1 to list do
14440: LD_ADDR_VAR 0 6
14444: PUSH
14445: DOUBLE
14446: LD_INT 1
14448: DEC
14449: ST_TO_ADDR
14450: LD_VAR 0 7
14454: PUSH
14455: FOR_TO
14456: IFFALSE 15446
// for ta in filter do
14458: LD_ADDR_VAR 0 4
14462: PUSH
14463: LD_VAR 0 8
14467: PUSH
14468: FOR_IN
14469: IFFALSE 15442
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14471: LD_VAR 0 7
14475: PUSH
14476: LD_VAR 0 6
14480: ARRAY
14481: PPUSH
14482: LD_VAR 0 4
14486: PPUSH
14487: CALL_OW 296
14491: PUSH
14492: LD_INT 15
14494: LESSEQUAL
14495: IFFALSE 15440
// begin case c of 1 :
14497: LD_VAR 0 5
14501: PUSH
14502: LD_INT 1
14504: DOUBLE
14505: EQUAL
14506: IFTRUE 14510
14508: GO 14942
14510: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14511: LD_VAR 0 7
14515: PUSH
14516: LD_VAR 0 6
14520: ARRAY
14521: PPUSH
14522: LD_VAR 0 4
14526: PPUSH
14527: CALL_OW 250
14531: PPUSH
14532: LD_VAR 0 4
14536: PPUSH
14537: CALL_OW 251
14541: PPUSH
14542: CALL_OW 154
// if eventVar2 = 0 then
14546: LD_EXP 66
14550: PUSH
14551: LD_INT 0
14553: EQUAL
14554: IFFALSE 14940
// begin eventVar2 = 1 ;
14556: LD_ADDR_EXP 66
14560: PUSH
14561: LD_INT 1
14563: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14564: LD_INT 245
14566: PPUSH
14567: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14571: LD_VAR 0 4
14575: PPUSH
14576: CALL_OW 250
14580: PPUSH
14581: LD_VAR 0 4
14585: PPUSH
14586: CALL_OW 251
14590: PPUSH
14591: CALL_OW 84
// DialogueOn ;
14595: CALL_OW 6
// if IsOK ( Cyrus ) then
14599: LD_EXP 5
14603: PPUSH
14604: CALL_OW 302
14608: IFFALSE 14624
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14610: LD_EXP 5
14614: PPUSH
14615: LD_STRING D9a-Cyrus-1
14617: PPUSH
14618: CALL_OW 88
// end else
14622: GO 14746
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14624: LD_INT 22
14626: PUSH
14627: LD_INT 1
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 26
14636: PUSH
14637: LD_INT 1
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 2
14646: PUSH
14647: LD_INT 25
14649: PUSH
14650: LD_INT 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 25
14659: PUSH
14660: LD_INT 2
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 25
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 25
14679: PUSH
14680: LD_INT 4
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 25
14689: PUSH
14690: LD_INT 5
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 69
14714: PUSH
14715: LD_EXP 1
14719: PUSH
14720: LD_EXP 14
14724: PUSH
14725: LD_EXP 5
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: DIFF
14735: PPUSH
14736: LD_STRING D9a-Sol1-1
14738: PPUSH
14739: LD_STRING D9a-Sol1-1
14741: PPUSH
14742: CALL 10901 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14746: LD_INT 22
14748: PUSH
14749: LD_INT 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 26
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 2
14768: PUSH
14769: LD_INT 25
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 25
14781: PUSH
14782: LD_INT 2
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 25
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 25
14801: PUSH
14802: LD_INT 4
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 25
14811: PUSH
14812: LD_INT 5
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: PPUSH
14832: CALL_OW 69
14836: PUSH
14837: LD_EXP 1
14841: PUSH
14842: LD_EXP 14
14846: PUSH
14847: LD_EXP 5
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: DIFF
14857: PPUSH
14858: LD_STRING D9b-Sol1-1
14860: PPUSH
14861: LD_STRING D9b-Sol1-1
14863: PPUSH
14864: CALL 10901 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14868: LD_STRING 09_arInfo
14870: PPUSH
14871: LD_INT 0
14873: PPUSH
14874: CALL_OW 30
14878: PUSH
14879: LD_INT 1
14881: EQUAL
14882: IFFALSE 14896
// Say ( JMM , D9a-JMM-1 ) ;
14884: LD_EXP 1
14888: PPUSH
14889: LD_STRING D9a-JMM-1
14891: PPUSH
14892: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14896: LD_EXP 1
14900: PPUSH
14901: LD_STRING D9c-JMM-1
14903: PPUSH
14904: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14908: LD_INT 12
14910: PPUSH
14911: LD_INT 1
14913: PPUSH
14914: CALL_OW 321
14918: PUSH
14919: LD_INT 2
14921: EQUAL
14922: IFFALSE 14936
// Say ( JMM , D9c-JMM-1a ) ;
14924: LD_EXP 1
14928: PPUSH
14929: LD_STRING D9c-JMM-1a
14931: PPUSH
14932: CALL_OW 88
// DialogueOff ;
14936: CALL_OW 7
// end ; end ; 2 :
14940: GO 15440
14942: LD_INT 2
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 15408
14950: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
14951: LD_VAR 0 7
14955: PUSH
14956: LD_VAR 0 6
14960: ARRAY
14961: PPUSH
14962: LD_VAR 0 4
14966: PPUSH
14967: CALL_OW 250
14971: PUSH
14972: LD_INT 1
14974: NEG
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 12
14983: PLUS
14984: PPUSH
14985: LD_VAR 0 4
14989: PPUSH
14990: CALL_OW 251
14994: PUSH
14995: LD_INT 1
14997: NEG
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 12
15006: PLUS
15007: PPUSH
15008: CALL_OW 153
// if eventVar2 = 0 then
15012: LD_EXP 66
15016: PUSH
15017: LD_INT 0
15019: EQUAL
15020: IFFALSE 15406
// begin eventVar2 = 1 ;
15022: LD_ADDR_EXP 66
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15030: LD_INT 245
15032: PPUSH
15033: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15037: LD_VAR 0 4
15041: PPUSH
15042: CALL_OW 250
15046: PPUSH
15047: LD_VAR 0 4
15051: PPUSH
15052: CALL_OW 251
15056: PPUSH
15057: CALL_OW 84
// DialogueOn ;
15061: CALL_OW 6
// if IsOK ( Cyrus ) then
15065: LD_EXP 5
15069: PPUSH
15070: CALL_OW 302
15074: IFFALSE 15090
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15076: LD_EXP 5
15080: PPUSH
15081: LD_STRING D9a-Cyrus-1
15083: PPUSH
15084: CALL_OW 88
// end else
15088: GO 15212
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15090: LD_INT 22
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 26
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 2
15112: PUSH
15113: LD_INT 25
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 25
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 25
15135: PUSH
15136: LD_INT 3
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 25
15145: PUSH
15146: LD_INT 4
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 5
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: PUSH
15181: LD_EXP 1
15185: PUSH
15186: LD_EXP 14
15190: PUSH
15191: LD_EXP 5
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: DIFF
15201: PPUSH
15202: LD_STRING D9a-Sol1-1
15204: PPUSH
15205: LD_STRING D9a-Sol1-1
15207: PPUSH
15208: CALL 10901 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15212: LD_INT 22
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 26
15224: PUSH
15225: LD_INT 1
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: LD_INT 25
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 25
15247: PUSH
15248: LD_INT 2
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 25
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 25
15267: PUSH
15268: LD_INT 4
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 25
15277: PUSH
15278: LD_INT 5
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: LIST
15297: PPUSH
15298: CALL_OW 69
15302: PUSH
15303: LD_EXP 1
15307: PUSH
15308: LD_EXP 14
15312: PUSH
15313: LD_EXP 5
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: DIFF
15323: PPUSH
15324: LD_STRING D9b-Sol1-1
15326: PPUSH
15327: LD_STRING D9b-Sol1-1
15329: PPUSH
15330: CALL 10901 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15334: LD_STRING 09_arInfo
15336: PPUSH
15337: LD_INT 0
15339: PPUSH
15340: CALL_OW 30
15344: PUSH
15345: LD_INT 1
15347: EQUAL
15348: IFFALSE 15362
// Say ( JMM , D9a-JMM-1 ) ;
15350: LD_EXP 1
15354: PPUSH
15355: LD_STRING D9a-JMM-1
15357: PPUSH
15358: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15362: LD_EXP 1
15366: PPUSH
15367: LD_STRING D9c-JMM-1
15369: PPUSH
15370: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15374: LD_INT 12
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 321
15384: PUSH
15385: LD_INT 2
15387: EQUAL
15388: IFFALSE 15402
// Say ( JMM , D9c-JMM-1a ) ;
15390: LD_EXP 1
15394: PPUSH
15395: LD_STRING D9c-JMM-1a
15397: PPUSH
15398: CALL_OW 88
// DialogueOff ;
15402: CALL_OW 7
// end ; end ; 3 :
15406: GO 15440
15408: LD_INT 3
15410: DOUBLE
15411: EQUAL
15412: IFTRUE 15416
15414: GO 15439
15416: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15417: LD_VAR 0 7
15421: PUSH
15422: LD_VAR 0 6
15426: ARRAY
15427: PPUSH
15428: LD_VAR 0 4
15432: PPUSH
15433: CALL_OW 115
15437: GO 15440
15439: POP
// end ; end ;
15440: GO 14468
15442: POP
15443: POP
15444: GO 14455
15446: POP
15447: POP
// end ;
15448: LD_VAR 0 3
15452: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15453: LD_INT 0
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
// for i = 1 to 72 do
15459: LD_ADDR_VAR 0 5
15463: PUSH
15464: DOUBLE
15465: LD_INT 1
15467: DEC
15468: ST_TO_ADDR
15469: LD_INT 72
15471: PUSH
15472: FOR_TO
15473: IFFALSE 15531
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15475: LD_VAR 0 5
15479: PPUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 321
15489: PUSH
15490: LD_INT 1
15492: EQUAL
15493: PUSH
15494: LD_VAR 0 5
15498: PPUSH
15499: LD_VAR 0 3
15503: PPUSH
15504: CALL_OW 482
15508: PUSH
15509: LD_INT 1
15511: EQUAL
15512: AND
15513: IFFALSE 15529
// AddComResearch ( lab , i ) ;
15515: LD_VAR 0 2
15519: PPUSH
15520: LD_VAR 0 5
15524: PPUSH
15525: CALL_OW 184
15529: GO 15472
15531: POP
15532: POP
// end ;
15533: LD_VAR 0 4
15537: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15538: LD_INT 0
15540: PPUSH
15541: PPUSH
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15548: LD_ADDR_VAR 0 6
15552: PUSH
15553: LD_INT 22
15555: PUSH
15556: LD_VAR 0 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 56
15567: PUSH
15568: EMPTY
15569: LIST
15570: PUSH
15571: LD_INT 24
15573: PUSH
15574: LD_INT 700
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: LD_INT 60
15586: PUSH
15587: EMPTY
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 2
15596: PUSH
15597: LD_INT 25
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 25
15609: PUSH
15610: LD_INT 9
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 69
15633: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15634: LD_ADDR_VAR 0 7
15638: PUSH
15639: LD_INT 22
15641: PUSH
15642: LD_VAR 0 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 32
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 58
15663: PUSH
15664: EMPTY
15665: LIST
15666: PUSH
15667: LD_INT 24
15669: PUSH
15670: LD_INT 251
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 69
15687: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15688: LD_ADDR_VAR 0 9
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_VAR 0 1
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 2
15707: PUSH
15708: LD_INT 30
15710: PUSH
15711: LD_INT 4
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 30
15720: PUSH
15721: LD_INT 5
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 24
15735: PUSH
15736: LD_INT 251
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: PPUSH
15748: CALL_OW 69
15752: ST_TO_ADDR
// if barrackList > 0 then
15753: LD_VAR 0 9
15757: PUSH
15758: LD_INT 0
15760: GREATER
15761: IFFALSE 15896
// begin if turretList = 0 then
15763: LD_VAR 0 7
15767: PUSH
15768: LD_INT 0
15770: EQUAL
15771: IFFALSE 15820
// begin for i in soldiers_list do
15773: LD_ADDR_VAR 0 4
15777: PUSH
15778: LD_VAR 0 6
15782: PUSH
15783: FOR_IN
15784: IFFALSE 15816
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15786: LD_VAR 0 4
15790: PPUSH
15791: LD_VAR 0 9
15795: PUSH
15796: LD_INT 1
15798: PPUSH
15799: LD_VAR 0 9
15803: PPUSH
15804: CALL_OW 12
15808: ARRAY
15809: PPUSH
15810: CALL_OW 120
15814: GO 15783
15816: POP
15817: POP
// end else
15818: GO 15896
// begin for i in barrackList do
15820: LD_ADDR_VAR 0 4
15824: PUSH
15825: LD_VAR 0 9
15829: PUSH
15830: FOR_IN
15831: IFFALSE 15894
// begin insideUnits = UnitsInside ( i ) ;
15833: LD_ADDR_VAR 0 10
15837: PUSH
15838: LD_VAR 0 4
15842: PPUSH
15843: CALL_OW 313
15847: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
15848: LD_VAR 0 10
15852: PUSH
15853: LD_INT 1
15855: ARRAY
15856: PPUSH
15857: LD_VAR 0 7
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: PPUSH
15866: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
15870: LD_VAR 0 6
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: LD_VAR 0 7
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: PPUSH
15888: CALL_OW 120
// end ;
15892: GO 15830
15894: POP
15895: POP
// end ; end ; end ;
15896: LD_VAR 0 3
15900: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
15908: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
15909: LD_ADDR_VAR 0 6
15913: PUSH
15914: LD_VAR 0 2
15918: PPUSH
15919: CALL_OW 313
15923: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
15924: LD_ADDR_VAR 0 7
15928: PUSH
15929: LD_INT 22
15931: PUSH
15932: LD_VAR 0 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 25
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 24
15953: PUSH
15954: LD_INT 1000
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 3
15963: PUSH
15964: LD_INT 54
15966: PUSH
15967: EMPTY
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15985: LD_ADDR_VAR 0 4
15989: PUSH
15990: LD_INT 22
15992: PUSH
15993: LD_VAR 0 1
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 3
16014: PUSH
16015: LD_INT 24
16017: PUSH
16018: LD_INT 1000
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: PPUSH
16037: CALL_OW 69
16041: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16042: LD_VAR 0 4
16046: NOT
16047: PUSH
16048: LD_VAR 0 7
16052: NOT
16053: AND
16054: PUSH
16055: LD_EXP 42
16059: NOT
16060: AND
16061: IFFALSE 16065
// exit ;
16063: GO 16256
// if buildings_list > 0 and engineerOkInside then
16065: LD_VAR 0 4
16069: PUSH
16070: LD_INT 0
16072: GREATER
16073: PUSH
16074: LD_VAR 0 6
16078: AND
16079: IFFALSE 16133
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16081: LD_ADDR_VAR 0 5
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_VAR 0 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 25
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: PUSH
16117: FOR_IN
16118: IFFALSE 16131
// ComExitBuilding ( i ) ;
16120: LD_VAR 0 5
16124: PPUSH
16125: CALL_OW 122
16129: GO 16117
16131: POP
16132: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16133: LD_VAR 0 4
16137: PUSH
16138: LD_INT 0
16140: GREATER
16141: PUSH
16142: LD_VAR 0 7
16146: PUSH
16147: LD_INT 0
16149: GREATER
16150: AND
16151: IFFALSE 16205
// begin for i in engineerOkOutside do
16153: LD_ADDR_VAR 0 5
16157: PUSH
16158: LD_VAR 0 7
16162: PUSH
16163: FOR_IN
16164: IFFALSE 16203
// for j in buildings_list do
16166: LD_ADDR_VAR 0 8
16170: PUSH
16171: LD_VAR 0 4
16175: PUSH
16176: FOR_IN
16177: IFFALSE 16199
// ComRepairBuilding ( i , j [ 1 ] ) ;
16179: LD_VAR 0 5
16183: PPUSH
16184: LD_VAR 0 8
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: CALL_OW 130
16197: GO 16176
16199: POP
16200: POP
16201: GO 16163
16203: POP
16204: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16205: LD_VAR 0 4
16209: PUSH
16210: LD_INT 0
16212: EQUAL
16213: PUSH
16214: LD_VAR 0 7
16218: PUSH
16219: LD_INT 0
16221: GREATER
16222: AND
16223: IFFALSE 16256
// for i in engineerOkOutside do
16225: LD_ADDR_VAR 0 5
16229: PUSH
16230: LD_VAR 0 7
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16254
// ComEnterUnit ( i , building ) ;
16238: LD_VAR 0 5
16242: PPUSH
16243: LD_VAR 0 2
16247: PPUSH
16248: CALL_OW 120
16252: GO 16235
16254: POP
16255: POP
// end ;
16256: LD_VAR 0 3
16260: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16261: LD_INT 0
16263: PPUSH
16264: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16265: LD_INT 22
16267: PUSH
16268: LD_VAR 0 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 25
16279: PUSH
16280: LD_INT 2
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: PUSH
16296: LD_INT 0
16298: GREATER
16299: PUSH
16300: LD_INT 22
16302: PUSH
16303: LD_VAR 0 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 21
16314: PUSH
16315: LD_INT 3
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 3
16324: PUSH
16325: LD_INT 24
16327: PUSH
16328: LD_INT 1000
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: PUSH
16349: LD_INT 0
16351: EQUAL
16352: AND
16353: PUSH
16354: LD_VAR 0 2
16358: PUSH
16359: LD_INT 0
16361: GREATER
16362: AND
16363: IFFALSE 16462
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16365: LD_ADDR_VAR 0 4
16369: PUSH
16370: LD_INT 22
16372: PUSH
16373: LD_VAR 0 1
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 25
16384: PUSH
16385: LD_INT 2
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PPUSH
16396: CALL_OW 69
16400: PUSH
16401: FOR_IN
16402: IFFALSE 16460
// begin AddComExitBuilding ( i ) ;
16404: LD_VAR 0 4
16408: PPUSH
16409: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16413: LD_VAR 0 4
16417: PPUSH
16418: LD_VAR 0 2
16422: PUSH
16423: LD_INT 1
16425: ARRAY
16426: PPUSH
16427: LD_VAR 0 2
16431: PUSH
16432: LD_INT 2
16434: ARRAY
16435: PPUSH
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 3
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 2
16449: PUSH
16450: LD_INT 4
16452: ARRAY
16453: PPUSH
16454: CALL_OW 205
// end ;
16458: GO 16401
16460: POP
16461: POP
// end ; end ;
16462: LD_VAR 0 3
16466: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16478: LD_ADDR_VAR 0 6
16482: PUSH
16483: LD_INT 22
16485: PUSH
16486: LD_VAR 0 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 25
16497: PUSH
16498: LD_INT 4
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 24
16507: PUSH
16508: LD_INT 251
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16525: LD_ADDR_VAR 0 7
16529: PUSH
16530: LD_VAR 0 3
16534: PPUSH
16535: LD_INT 22
16537: PUSH
16538: LD_VAR 0 1
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 25
16549: PUSH
16550: LD_INT 4
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 50
16559: PUSH
16560: EMPTY
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: PPUSH
16568: CALL_OW 70
16572: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16573: LD_ADDR_VAR 0 10
16577: PUSH
16578: LD_VAR 0 3
16582: PPUSH
16583: LD_INT 22
16585: PUSH
16586: LD_VAR 0 1
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 21
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 3
16607: PUSH
16608: LD_INT 25
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 3
16624: PUSH
16625: LD_INT 24
16627: PUSH
16628: LD_INT 750
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 70
16649: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16650: LD_ADDR_VAR 0 11
16654: PUSH
16655: LD_VAR 0 2
16659: PPUSH
16660: LD_INT 22
16662: PUSH
16663: LD_VAR 0 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 3
16684: PUSH
16685: LD_INT 25
16687: PUSH
16688: LD_INT 3
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: LD_INT 24
16704: PUSH
16705: LD_INT 1000
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: PPUSH
16722: CALL_OW 70
16726: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16727: LD_VAR 0 10
16731: NOT
16732: PUSH
16733: LD_VAR 0 7
16737: NOT
16738: AND
16739: PUSH
16740: LD_VAR 0 11
16744: NOT
16745: AND
16746: IFFALSE 16750
// exit ;
16748: GO 17010
// if damageUnits > 0 and sci_list > 0 then
16750: LD_VAR 0 10
16754: PUSH
16755: LD_INT 0
16757: GREATER
16758: PUSH
16759: LD_VAR 0 6
16763: PUSH
16764: LD_INT 0
16766: GREATER
16767: AND
16768: IFFALSE 16801
// for i in damageUnits do
16770: LD_ADDR_VAR 0 8
16774: PUSH
16775: LD_VAR 0 10
16779: PUSH
16780: FOR_IN
16781: IFFALSE 16799
// ComMoveToArea ( i , healArea ) ;
16783: LD_VAR 0 8
16787: PPUSH
16788: LD_VAR 0 2
16792: PPUSH
16793: CALL_OW 113
16797: GO 16780
16799: POP
16800: POP
// if unitsToHeal > 0 and sci_list > 0 then
16801: LD_VAR 0 11
16805: PUSH
16806: LD_INT 0
16808: GREATER
16809: PUSH
16810: LD_VAR 0 6
16814: PUSH
16815: LD_INT 0
16817: GREATER
16818: AND
16819: IFFALSE 16878
// begin for i in sci_list do
16821: LD_ADDR_VAR 0 8
16825: PUSH
16826: LD_VAR 0 6
16830: PUSH
16831: FOR_IN
16832: IFFALSE 16876
// begin ComExitBuilding ( i ) ;
16834: LD_VAR 0 8
16838: PPUSH
16839: CALL_OW 122
// for j in unitsToHeal do
16843: LD_ADDR_VAR 0 9
16847: PUSH
16848: LD_VAR 0 11
16852: PUSH
16853: FOR_IN
16854: IFFALSE 16872
// AddComHeal ( i , j ) ;
16856: LD_VAR 0 8
16860: PPUSH
16861: LD_VAR 0 9
16865: PPUSH
16866: CALL_OW 188
16870: GO 16853
16872: POP
16873: POP
// end ;
16874: GO 16831
16876: POP
16877: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
16878: LD_VAR 0 10
16882: PUSH
16883: LD_INT 0
16885: EQUAL
16886: PUSH
16887: LD_VAR 0 11
16891: PUSH
16892: LD_INT 0
16894: EQUAL
16895: AND
16896: PUSH
16897: LD_VAR 0 7
16901: PUSH
16902: LD_INT 0
16904: GREATER
16905: AND
16906: IFFALSE 17010
// for i in sci_listOutside do
16908: LD_ADDR_VAR 0 8
16912: PUSH
16913: LD_VAR 0 7
16917: PUSH
16918: FOR_IN
16919: IFFALSE 17008
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
16921: LD_ADDR_VAR 0 12
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_VAR 0 1
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 21
16940: PUSH
16941: LD_INT 3
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 30
16950: PUSH
16951: LD_INT 8
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
16968: LD_ADDR_VAR 0 13
16972: PUSH
16973: LD_INT 1
16975: PPUSH
16976: LD_VAR 0 12
16980: PPUSH
16981: CALL_OW 12
16985: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
16986: LD_VAR 0 8
16990: PPUSH
16991: LD_VAR 0 12
16995: PUSH
16996: LD_VAR 0 13
17000: ARRAY
17001: PPUSH
17002: CALL_OW 120
// end ;
17006: GO 16918
17008: POP
17009: POP
// end ;
17010: LD_VAR 0 5
17014: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
17019: PPUSH
17020: PPUSH
17021: PPUSH
17022: PPUSH
17023: PPUSH
17024: PPUSH
17025: PPUSH
17026: PPUSH
17027: PPUSH
// amChassisTab = [ ] ;
17028: LD_ADDR_VAR 0 19
17032: PUSH
17033: EMPTY
17034: ST_TO_ADDR
// arChassisTab = [ ] ;
17035: LD_ADDR_VAR 0 18
17039: PUSH
17040: EMPTY
17041: ST_TO_ADDR
// ruChassisTab = [ ] ;
17042: LD_ADDR_VAR 0 17
17046: PUSH
17047: EMPTY
17048: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17049: LD_INT 35
17051: PPUSH
17052: CALL_OW 67
// if nation = 1 then
17056: LD_VAR 0 5
17060: PUSH
17061: LD_INT 1
17063: EQUAL
17064: IFFALSE 17569
// begin uc_side = side ;
17066: LD_ADDR_OWVAR 20
17070: PUSH
17071: LD_VAR 0 2
17075: ST_TO_ADDR
// uc_nation = nation ;
17076: LD_ADDR_OWVAR 21
17080: PUSH
17081: LD_VAR 0 5
17085: ST_TO_ADDR
// vc_engine = vehengine ;
17086: LD_ADDR_OWVAR 39
17090: PUSH
17091: LD_VAR 0 6
17095: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17096: LD_ADDR_OWVAR 38
17100: PUSH
17101: LD_VAR 0 7
17105: PUSH
17106: LD_INT 1
17108: PPUSH
17109: LD_VAR 0 7
17113: PPUSH
17114: CALL_OW 12
17118: ARRAY
17119: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17120: LD_ADDR_OWVAR 40
17124: PUSH
17125: LD_VAR 0 10
17129: PUSH
17130: LD_INT 1
17132: PPUSH
17133: LD_VAR 0 10
17137: PPUSH
17138: CALL_OW 12
17142: ARRAY
17143: ST_TO_ADDR
// for j = 1 to AMWeapon do
17144: LD_ADDR_VAR 0 14
17148: PUSH
17149: DOUBLE
17150: LD_INT 1
17152: DEC
17153: ST_TO_ADDR
17154: LD_VAR 0 10
17158: PUSH
17159: FOR_TO
17160: IFFALSE 17461
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17162: LD_VAR 0 10
17166: PUSH
17167: LD_VAR 0 14
17171: ARRAY
17172: PUSH
17173: LD_INT 2
17175: EQUAL
17176: PUSH
17177: LD_VAR 0 10
17181: PUSH
17182: LD_VAR 0 14
17186: ARRAY
17187: PUSH
17188: LD_INT 3
17190: EQUAL
17191: OR
17192: IFFALSE 17245
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17194: LD_ADDR_VAR 0 19
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: LD_INT 4
17210: PUSH
17211: LD_INT 5
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17221: LD_ADDR_OWVAR 37
17225: PUSH
17226: LD_VAR 0 19
17230: PUSH
17231: LD_INT 1
17233: PPUSH
17234: LD_VAR 0 19
17238: PPUSH
17239: CALL_OW 12
17243: ARRAY
17244: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17245: LD_VAR 0 10
17249: PUSH
17250: LD_VAR 0 14
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: EQUAL
17259: PUSH
17260: LD_VAR 0 10
17264: PUSH
17265: LD_VAR 0 14
17269: ARRAY
17270: PUSH
17271: LD_INT 5
17273: EQUAL
17274: OR
17275: PUSH
17276: LD_VAR 0 10
17280: PUSH
17281: LD_VAR 0 14
17285: ARRAY
17286: PUSH
17287: LD_INT 9
17289: EQUAL
17290: OR
17291: PUSH
17292: LD_VAR 0 10
17296: PUSH
17297: LD_VAR 0 14
17301: ARRAY
17302: PUSH
17303: LD_INT 11
17305: EQUAL
17306: OR
17307: PUSH
17308: LD_VAR 0 10
17312: PUSH
17313: LD_VAR 0 14
17317: ARRAY
17318: PUSH
17319: LD_INT 7
17321: EQUAL
17322: OR
17323: IFFALSE 17372
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17325: LD_ADDR_VAR 0 19
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: LD_INT 3
17335: PUSH
17336: LD_INT 4
17338: PUSH
17339: LD_INT 5
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17348: LD_ADDR_OWVAR 37
17352: PUSH
17353: LD_VAR 0 19
17357: PUSH
17358: LD_INT 1
17360: PPUSH
17361: LD_VAR 0 19
17365: PPUSH
17366: CALL_OW 12
17370: ARRAY
17371: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17372: LD_VAR 0 10
17376: PUSH
17377: LD_VAR 0 14
17381: ARRAY
17382: PUSH
17383: LD_INT 8
17385: EQUAL
17386: PUSH
17387: LD_VAR 0 10
17391: PUSH
17392: LD_VAR 0 14
17396: ARRAY
17397: PUSH
17398: LD_INT 6
17400: EQUAL
17401: OR
17402: PUSH
17403: LD_VAR 0 10
17407: PUSH
17408: LD_VAR 0 14
17412: ARRAY
17413: PUSH
17414: LD_INT 10
17416: EQUAL
17417: OR
17418: IFFALSE 17459
// begin amChassisTab = [ 4 , 5 ] ;
17420: LD_ADDR_VAR 0 19
17424: PUSH
17425: LD_INT 4
17427: PUSH
17428: LD_INT 5
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17435: LD_ADDR_OWVAR 37
17439: PUSH
17440: LD_VAR 0 19
17444: PUSH
17445: LD_INT 1
17447: PPUSH
17448: LD_VAR 0 19
17452: PPUSH
17453: CALL_OW 12
17457: ARRAY
17458: ST_TO_ADDR
// end ; end ;
17459: GO 17159
17461: POP
17462: POP
// veh = CreateVehicle ;
17463: LD_ADDR_VAR 0 16
17467: PUSH
17468: CALL_OW 45
17472: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17473: LD_VAR 0 16
17477: PPUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: LD_INT 0
17485: PPUSH
17486: CALL_OW 49
// if vc_control = 1 then
17490: LD_OWVAR 38
17494: PUSH
17495: LD_INT 1
17497: EQUAL
17498: IFFALSE 17555
// begin hc_gallery =  ;
17500: LD_ADDR_OWVAR 33
17504: PUSH
17505: LD_STRING 
17507: ST_TO_ADDR
// hc_name =  ;
17508: LD_ADDR_OWVAR 26
17512: PUSH
17513: LD_STRING 
17515: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17516: LD_INT 0
17518: PPUSH
17519: LD_INT 3
17521: PPUSH
17522: LD_VAR 0 4
17526: PPUSH
17527: CALL_OW 380
// un = CreateHuman ;
17531: LD_ADDR_VAR 0 15
17535: PUSH
17536: CALL_OW 44
17540: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17541: LD_VAR 0 15
17545: PPUSH
17546: LD_VAR 0 16
17550: PPUSH
17551: CALL_OW 52
// end ; i = i + 1 ;
17555: LD_ADDR_VAR 0 13
17559: PUSH
17560: LD_VAR 0 13
17564: PUSH
17565: LD_INT 1
17567: PLUS
17568: ST_TO_ADDR
// end ; if nation = 2 then
17569: LD_VAR 0 5
17573: PUSH
17574: LD_INT 2
17576: EQUAL
17577: IFFALSE 17999
// begin uc_side = side ;
17579: LD_ADDR_OWVAR 20
17583: PUSH
17584: LD_VAR 0 2
17588: ST_TO_ADDR
// uc_nation = nation ;
17589: LD_ADDR_OWVAR 21
17593: PUSH
17594: LD_VAR 0 5
17598: ST_TO_ADDR
// vc_engine = vehengine ;
17599: LD_ADDR_OWVAR 39
17603: PUSH
17604: LD_VAR 0 6
17608: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17609: LD_ADDR_OWVAR 38
17613: PUSH
17614: LD_VAR 0 7
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_VAR 0 7
17626: PPUSH
17627: CALL_OW 12
17631: ARRAY
17632: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17633: LD_ADDR_OWVAR 40
17637: PUSH
17638: LD_VAR 0 9
17642: PUSH
17643: LD_INT 1
17645: PPUSH
17646: LD_VAR 0 9
17650: PPUSH
17651: CALL_OW 12
17655: ARRAY
17656: ST_TO_ADDR
// for j = 1 to ARWeapons do
17657: LD_ADDR_VAR 0 14
17661: PUSH
17662: DOUBLE
17663: LD_INT 1
17665: DEC
17666: ST_TO_ADDR
17667: LD_VAR 0 9
17671: PUSH
17672: FOR_TO
17673: IFFALSE 17891
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17675: LD_VAR 0 9
17679: PUSH
17680: LD_VAR 0 14
17684: ARRAY
17685: PUSH
17686: LD_INT 24
17688: EQUAL
17689: PUSH
17690: LD_VAR 0 9
17694: PUSH
17695: LD_VAR 0 14
17699: ARRAY
17700: PUSH
17701: LD_INT 22
17703: EQUAL
17704: OR
17705: PUSH
17706: LD_VAR 0 9
17710: PUSH
17711: LD_VAR 0 14
17715: ARRAY
17716: PUSH
17717: LD_INT 23
17719: EQUAL
17720: OR
17721: PUSH
17722: LD_VAR 0 9
17726: PUSH
17727: LD_VAR 0 14
17731: ARRAY
17732: PUSH
17733: LD_INT 30
17735: EQUAL
17736: OR
17737: IFFALSE 17774
// begin arChassisTab = [ 14 ] ;
17739: LD_ADDR_VAR 0 18
17743: PUSH
17744: LD_INT 14
17746: PUSH
17747: EMPTY
17748: LIST
17749: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17750: LD_ADDR_OWVAR 37
17754: PUSH
17755: LD_VAR 0 18
17759: PUSH
17760: LD_INT 1
17762: PPUSH
17763: LD_VAR 0 18
17767: PPUSH
17768: CALL_OW 12
17772: ARRAY
17773: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17774: LD_VAR 0 9
17778: PUSH
17779: LD_VAR 0 14
17783: ARRAY
17784: PUSH
17785: LD_INT 29
17787: EQUAL
17788: PUSH
17789: LD_VAR 0 9
17793: PUSH
17794: LD_VAR 0 14
17798: ARRAY
17799: PUSH
17800: LD_INT 28
17802: EQUAL
17803: OR
17804: PUSH
17805: LD_VAR 0 9
17809: PUSH
17810: LD_VAR 0 14
17814: ARRAY
17815: PUSH
17816: LD_INT 27
17818: EQUAL
17819: OR
17820: PUSH
17821: LD_VAR 0 9
17825: PUSH
17826: LD_VAR 0 14
17830: ARRAY
17831: PUSH
17832: LD_INT 26
17834: EQUAL
17835: OR
17836: PUSH
17837: LD_VAR 0 9
17841: PUSH
17842: LD_VAR 0 14
17846: ARRAY
17847: PUSH
17848: LD_INT 25
17850: EQUAL
17851: OR
17852: IFFALSE 17889
// begin arChassisTab = [ 14 ] ;
17854: LD_ADDR_VAR 0 18
17858: PUSH
17859: LD_INT 14
17861: PUSH
17862: EMPTY
17863: LIST
17864: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17865: LD_ADDR_OWVAR 37
17869: PUSH
17870: LD_VAR 0 18
17874: PUSH
17875: LD_INT 1
17877: PPUSH
17878: LD_VAR 0 18
17882: PPUSH
17883: CALL_OW 12
17887: ARRAY
17888: ST_TO_ADDR
// end ; end ;
17889: GO 17672
17891: POP
17892: POP
// veh = CreateVehicle ;
17893: LD_ADDR_VAR 0 16
17897: PUSH
17898: CALL_OW 45
17902: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17903: LD_VAR 0 16
17907: PPUSH
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_INT 0
17915: PPUSH
17916: CALL_OW 49
// if vc_control = 1 then
17920: LD_OWVAR 38
17924: PUSH
17925: LD_INT 1
17927: EQUAL
17928: IFFALSE 17985
// begin hc_gallery =  ;
17930: LD_ADDR_OWVAR 33
17934: PUSH
17935: LD_STRING 
17937: ST_TO_ADDR
// hc_name =  ;
17938: LD_ADDR_OWVAR 26
17942: PUSH
17943: LD_STRING 
17945: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17946: LD_INT 0
17948: PPUSH
17949: LD_INT 3
17951: PPUSH
17952: LD_VAR 0 4
17956: PPUSH
17957: CALL_OW 380
// un = CreateHuman ;
17961: LD_ADDR_VAR 0 15
17965: PUSH
17966: CALL_OW 44
17970: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17971: LD_VAR 0 15
17975: PPUSH
17976: LD_VAR 0 16
17980: PPUSH
17981: CALL_OW 52
// end ; i = i + 1 ;
17985: LD_ADDR_VAR 0 13
17989: PUSH
17990: LD_VAR 0 13
17994: PUSH
17995: LD_INT 1
17997: PLUS
17998: ST_TO_ADDR
// end ; if nation = 3 then
17999: LD_VAR 0 5
18003: PUSH
18004: LD_INT 3
18006: EQUAL
18007: IFFALSE 18413
// begin uc_side = side ;
18009: LD_ADDR_OWVAR 20
18013: PUSH
18014: LD_VAR 0 2
18018: ST_TO_ADDR
// uc_nation = nation ;
18019: LD_ADDR_OWVAR 21
18023: PUSH
18024: LD_VAR 0 5
18028: ST_TO_ADDR
// vc_engine = vehengine ;
18029: LD_ADDR_OWVAR 39
18033: PUSH
18034: LD_VAR 0 6
18038: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18039: LD_ADDR_OWVAR 38
18043: PUSH
18044: LD_VAR 0 7
18048: PUSH
18049: LD_INT 1
18051: PPUSH
18052: LD_VAR 0 7
18056: PPUSH
18057: CALL_OW 12
18061: ARRAY
18062: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18063: LD_ADDR_OWVAR 40
18067: PUSH
18068: LD_VAR 0 8
18072: PUSH
18073: LD_INT 1
18075: PPUSH
18076: LD_VAR 0 8
18080: PPUSH
18081: CALL_OW 12
18085: ARRAY
18086: ST_TO_ADDR
// for j = 1 to RuWeapons do
18087: LD_ADDR_VAR 0 14
18091: PUSH
18092: DOUBLE
18093: LD_INT 1
18095: DEC
18096: ST_TO_ADDR
18097: LD_VAR 0 8
18101: PUSH
18102: FOR_TO
18103: IFFALSE 18305
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18105: LD_VAR 0 8
18109: PUSH
18110: LD_VAR 0 14
18114: ARRAY
18115: PUSH
18116: LD_INT 42
18118: EQUAL
18119: PUSH
18120: LD_VAR 0 8
18124: PUSH
18125: LD_VAR 0 14
18129: ARRAY
18130: PUSH
18131: LD_INT 43
18133: EQUAL
18134: OR
18135: PUSH
18136: LD_VAR 0 8
18140: PUSH
18141: LD_VAR 0 14
18145: ARRAY
18146: PUSH
18147: LD_INT 44
18149: EQUAL
18150: OR
18151: PUSH
18152: LD_VAR 0 8
18156: PUSH
18157: LD_VAR 0 14
18161: ARRAY
18162: PUSH
18163: LD_INT 45
18165: EQUAL
18166: OR
18167: PUSH
18168: LD_VAR 0 8
18172: PUSH
18173: LD_VAR 0 14
18177: ARRAY
18178: PUSH
18179: LD_INT 49
18181: EQUAL
18182: OR
18183: IFFALSE 18232
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18185: LD_ADDR_VAR 0 17
18189: PUSH
18190: LD_INT 21
18192: PUSH
18193: LD_INT 22
18195: PUSH
18196: LD_INT 23
18198: PUSH
18199: LD_INT 24
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18208: LD_ADDR_OWVAR 37
18212: PUSH
18213: LD_VAR 0 17
18217: PUSH
18218: LD_INT 1
18220: PPUSH
18221: LD_VAR 0 17
18225: PPUSH
18226: CALL_OW 12
18230: ARRAY
18231: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18232: LD_VAR 0 8
18236: PUSH
18237: LD_VAR 0 14
18241: ARRAY
18242: PUSH
18243: LD_INT 46
18245: EQUAL
18246: PUSH
18247: LD_VAR 0 8
18251: PUSH
18252: LD_VAR 0 14
18256: ARRAY
18257: PUSH
18258: LD_INT 47
18260: EQUAL
18261: OR
18262: IFFALSE 18303
// begin ruChassisTab = [ 23 , 24 ] ;
18264: LD_ADDR_VAR 0 17
18268: PUSH
18269: LD_INT 23
18271: PUSH
18272: LD_INT 24
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18279: LD_ADDR_OWVAR 37
18283: PUSH
18284: LD_VAR 0 17
18288: PUSH
18289: LD_INT 1
18291: PPUSH
18292: LD_VAR 0 17
18296: PPUSH
18297: CALL_OW 12
18301: ARRAY
18302: ST_TO_ADDR
// end ; end ;
18303: GO 18102
18305: POP
18306: POP
// veh = CreateVehicle ;
18307: LD_ADDR_VAR 0 16
18311: PUSH
18312: CALL_OW 45
18316: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18317: LD_VAR 0 16
18321: PPUSH
18322: LD_VAR 0 1
18326: PPUSH
18327: LD_INT 0
18329: PPUSH
18330: CALL_OW 49
// if vc_control = 1 then
18334: LD_OWVAR 38
18338: PUSH
18339: LD_INT 1
18341: EQUAL
18342: IFFALSE 18399
// begin hc_gallery =  ;
18344: LD_ADDR_OWVAR 33
18348: PUSH
18349: LD_STRING 
18351: ST_TO_ADDR
// hc_name =  ;
18352: LD_ADDR_OWVAR 26
18356: PUSH
18357: LD_STRING 
18359: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18360: LD_INT 0
18362: PPUSH
18363: LD_INT 3
18365: PPUSH
18366: LD_VAR 0 4
18370: PPUSH
18371: CALL_OW 380
// un = CreateHuman ;
18375: LD_ADDR_VAR 0 15
18379: PUSH
18380: CALL_OW 44
18384: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18385: LD_VAR 0 15
18389: PPUSH
18390: LD_VAR 0 16
18394: PPUSH
18395: CALL_OW 52
// end ; i = i + 1 ;
18399: LD_ADDR_VAR 0 13
18403: PUSH
18404: LD_VAR 0 13
18408: PUSH
18409: LD_INT 1
18411: PLUS
18412: ST_TO_ADDR
// end ; until i = vehCount ;
18413: LD_VAR 0 13
18417: PUSH
18418: LD_VAR 0 3
18422: EQUAL
18423: IFFALSE 17049
// repeat wait ( 0 0$1 ) ;
18425: LD_INT 35
18427: PPUSH
18428: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18432: LD_ADDR_VAR 0 20
18436: PUSH
18437: LD_INT 22
18439: PUSH
18440: LD_VAR 0 2
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 21
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 24
18461: PUSH
18462: LD_INT 650
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if vehicleOK_list > 0 then
18479: LD_VAR 0 20
18483: PUSH
18484: LD_INT 0
18486: GREATER
18487: IFFALSE 18678
// begin for i in vehicleOK_list do
18489: LD_ADDR_VAR 0 13
18493: PUSH
18494: LD_VAR 0 20
18498: PUSH
18499: FOR_IN
18500: IFFALSE 18676
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18502: LD_ADDR_VAR 0 21
18506: PUSH
18507: LD_INT 22
18509: PUSH
18510: LD_VAR 0 11
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PPUSH
18519: CALL_OW 69
18523: PPUSH
18524: LD_VAR 0 13
18528: PPUSH
18529: CALL_OW 74
18533: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18534: LD_ADDR_VAR 0 22
18538: PUSH
18539: LD_INT 22
18541: PUSH
18542: LD_VAR 0 11
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 59
18556: PUSH
18557: EMPTY
18558: LIST
18559: PUSH
18560: LD_INT 21
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 21
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: PPUSH
18593: CALL_OW 69
18597: PPUSH
18598: LD_VAR 0 13
18602: PPUSH
18603: CALL_OW 74
18607: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18608: LD_VAR 0 13
18612: PPUSH
18613: LD_VAR 0 21
18617: PPUSH
18618: CALL_OW 296
18622: PUSH
18623: LD_INT 8
18625: PLUS
18626: PUSH
18627: LD_VAR 0 13
18631: PPUSH
18632: LD_VAR 0 22
18636: PPUSH
18637: CALL_OW 296
18641: LESS
18642: IFFALSE 18660
// begin ComAttackUnit ( i , target1 ) ;
18644: LD_VAR 0 13
18648: PPUSH
18649: LD_VAR 0 21
18653: PPUSH
18654: CALL_OW 115
// end else
18658: GO 18674
// begin ComAttackUnit ( i , target2 ) ;
18660: LD_VAR 0 13
18664: PPUSH
18665: LD_VAR 0 22
18669: PPUSH
18670: CALL_OW 115
// end ; end ;
18674: GO 18499
18676: POP
18677: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18678: LD_INT 22
18680: PUSH
18681: LD_VAR 0 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 21
18692: PUSH
18693: LD_INT 2
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PPUSH
18704: CALL_OW 69
18708: PUSH
18709: LD_INT 0
18711: EQUAL
18712: IFFALSE 18425
// end ;
18714: LD_VAR 0 12
18718: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18719: LD_INT 0
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
18729: PPUSH
18730: PPUSH
18731: PPUSH
// for i = 1 to soldierCount do
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: DOUBLE
18738: LD_INT 1
18740: DEC
18741: ST_TO_ADDR
18742: LD_VAR 0 3
18746: PUSH
18747: FOR_TO
18748: IFFALSE 18830
// begin uc_side = side ;
18750: LD_ADDR_OWVAR 20
18754: PUSH
18755: LD_VAR 0 1
18759: ST_TO_ADDR
// uc_nation = nation ;
18760: LD_ADDR_OWVAR 21
18764: PUSH
18765: LD_VAR 0 2
18769: ST_TO_ADDR
// hc_name =  ;
18770: LD_ADDR_OWVAR 26
18774: PUSH
18775: LD_STRING 
18777: ST_TO_ADDR
// hc_gallery =  ;
18778: LD_ADDR_OWVAR 33
18782: PUSH
18783: LD_STRING 
18785: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18786: LD_INT 0
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: LD_VAR 0 8
18796: PPUSH
18797: CALL_OW 380
// un = CreateHuman ;
18801: LD_ADDR_VAR 0 15
18805: PUSH
18806: CALL_OW 44
18810: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18811: LD_VAR 0 15
18815: PPUSH
18816: LD_VAR 0 9
18820: PPUSH
18821: LD_INT 0
18823: PPUSH
18824: CALL_OW 49
// end ;
18828: GO 18747
18830: POP
18831: POP
// for i = 1 to sniperCount do
18832: LD_ADDR_VAR 0 13
18836: PUSH
18837: DOUBLE
18838: LD_INT 1
18840: DEC
18841: ST_TO_ADDR
18842: LD_VAR 0 4
18846: PUSH
18847: FOR_TO
18848: IFFALSE 18930
// begin uc_side = side ;
18850: LD_ADDR_OWVAR 20
18854: PUSH
18855: LD_VAR 0 1
18859: ST_TO_ADDR
// uc_nation = nation ;
18860: LD_ADDR_OWVAR 21
18864: PUSH
18865: LD_VAR 0 2
18869: ST_TO_ADDR
// hc_name =  ;
18870: LD_ADDR_OWVAR 26
18874: PUSH
18875: LD_STRING 
18877: ST_TO_ADDR
// hc_gallery =  ;
18878: LD_ADDR_OWVAR 33
18882: PUSH
18883: LD_STRING 
18885: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
18886: LD_INT 0
18888: PPUSH
18889: LD_INT 5
18891: PPUSH
18892: LD_VAR 0 8
18896: PPUSH
18897: CALL_OW 380
// un = CreateHuman ;
18901: LD_ADDR_VAR 0 15
18905: PUSH
18906: CALL_OW 44
18910: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18911: LD_VAR 0 15
18915: PPUSH
18916: LD_VAR 0 9
18920: PPUSH
18921: LD_INT 0
18923: PPUSH
18924: CALL_OW 49
// end ;
18928: GO 18847
18930: POP
18931: POP
// for i = 1 to bazookCount do
18932: LD_ADDR_VAR 0 13
18936: PUSH
18937: DOUBLE
18938: LD_INT 1
18940: DEC
18941: ST_TO_ADDR
18942: LD_VAR 0 5
18946: PUSH
18947: FOR_TO
18948: IFFALSE 19030
// begin uc_side = side ;
18950: LD_ADDR_OWVAR 20
18954: PUSH
18955: LD_VAR 0 1
18959: ST_TO_ADDR
// uc_nation = nation ;
18960: LD_ADDR_OWVAR 21
18964: PUSH
18965: LD_VAR 0 2
18969: ST_TO_ADDR
// hc_name =  ;
18970: LD_ADDR_OWVAR 26
18974: PUSH
18975: LD_STRING 
18977: ST_TO_ADDR
// hc_gallery =  ;
18978: LD_ADDR_OWVAR 33
18982: PUSH
18983: LD_STRING 
18985: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
18986: LD_INT 0
18988: PPUSH
18989: LD_INT 9
18991: PPUSH
18992: LD_VAR 0 8
18996: PPUSH
18997: CALL_OW 380
// un = CreateHuman ;
19001: LD_ADDR_VAR 0 15
19005: PUSH
19006: CALL_OW 44
19010: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19011: LD_VAR 0 15
19015: PPUSH
19016: LD_VAR 0 9
19020: PPUSH
19021: LD_INT 0
19023: PPUSH
19024: CALL_OW 49
// end ;
19028: GO 18947
19030: POP
19031: POP
// for i = 1 to mortalCount do
19032: LD_ADDR_VAR 0 13
19036: PUSH
19037: DOUBLE
19038: LD_INT 1
19040: DEC
19041: ST_TO_ADDR
19042: LD_VAR 0 6
19046: PUSH
19047: FOR_TO
19048: IFFALSE 19130
// begin uc_side = side ;
19050: LD_ADDR_OWVAR 20
19054: PUSH
19055: LD_VAR 0 1
19059: ST_TO_ADDR
// uc_nation = nation ;
19060: LD_ADDR_OWVAR 21
19064: PUSH
19065: LD_VAR 0 2
19069: ST_TO_ADDR
// hc_name =  ;
19070: LD_ADDR_OWVAR 26
19074: PUSH
19075: LD_STRING 
19077: ST_TO_ADDR
// hc_gallery =  ;
19078: LD_ADDR_OWVAR 33
19082: PUSH
19083: LD_STRING 
19085: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19086: LD_INT 0
19088: PPUSH
19089: LD_INT 8
19091: PPUSH
19092: LD_VAR 0 8
19096: PPUSH
19097: CALL_OW 380
// un = CreateHuman ;
19101: LD_ADDR_VAR 0 15
19105: PUSH
19106: CALL_OW 44
19110: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19111: LD_VAR 0 15
19115: PPUSH
19116: LD_VAR 0 9
19120: PPUSH
19121: LD_INT 0
19123: PPUSH
19124: CALL_OW 49
// end ;
19128: GO 19047
19130: POP
19131: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19132: LD_ADDR_VAR 0 18
19136: PUSH
19137: LD_INT 22
19139: PUSH
19140: LD_VAR 0 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 25
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 25
19164: PUSH
19165: LD_INT 5
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 25
19184: PUSH
19185: LD_INT 9
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 69
19207: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19208: LD_ADDR_VAR 0 17
19212: PUSH
19213: LD_INT 22
19215: PUSH
19216: LD_VAR 0 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 25
19227: PUSH
19228: LD_INT 4
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 69
19243: ST_TO_ADDR
// for i in medic_list do
19244: LD_ADDR_VAR 0 13
19248: PUSH
19249: LD_VAR 0 17
19253: PUSH
19254: FOR_IN
19255: IFFALSE 19273
// ComMoveToArea ( i , healArea ) ;
19257: LD_VAR 0 13
19261: PPUSH
19262: LD_VAR 0 10
19266: PPUSH
19267: CALL_OW 113
19271: GO 19254
19273: POP
19274: POP
// repeat wait ( 0 0$1 ) ;
19275: LD_INT 35
19277: PPUSH
19278: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19282: LD_ADDR_VAR 0 16
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_VAR 0 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 3
19304: PUSH
19305: LD_INT 24
19307: PUSH
19308: LD_INT 550
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 24
19321: PUSH
19322: LD_INT 250
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19343: LD_ADDR_VAR 0 18
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_VAR 0 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: LD_INT 25
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 25
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 25
19385: PUSH
19386: LD_INT 8
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 25
19395: PUSH
19396: LD_INT 9
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 24
19412: PUSH
19413: LD_INT 1000
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: PPUSH
19425: CALL_OW 69
19429: ST_TO_ADDR
// if medicCount > 0 then
19430: LD_VAR 0 7
19434: PUSH
19435: LD_INT 0
19437: GREATER
19438: IFFALSE 19512
// begin if damageUnit_list > 0 then
19440: LD_VAR 0 16
19444: PUSH
19445: LD_INT 0
19447: GREATER
19448: IFFALSE 19512
// begin for i in damageUnit_list do
19450: LD_ADDR_VAR 0 13
19454: PUSH
19455: LD_VAR 0 16
19459: PUSH
19460: FOR_IN
19461: IFFALSE 19510
// begin ComMoveToArea ( i , healArea ) ;
19463: LD_VAR 0 13
19467: PPUSH
19468: LD_VAR 0 10
19472: PPUSH
19473: CALL_OW 113
// for j in medic_list do
19477: LD_ADDR_VAR 0 14
19481: PUSH
19482: LD_VAR 0 17
19486: PUSH
19487: FOR_IN
19488: IFFALSE 19506
// AddComHeal ( j , i ) ;
19490: LD_VAR 0 14
19494: PPUSH
19495: LD_VAR 0 13
19499: PPUSH
19500: CALL_OW 188
19504: GO 19487
19506: POP
19507: POP
// end ;
19508: GO 19460
19510: POP
19511: POP
// end ; end ; for i in soldiersOK_list do
19512: LD_ADDR_VAR 0 13
19516: PUSH
19517: LD_VAR 0 18
19521: PUSH
19522: FOR_IN
19523: IFFALSE 19699
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19525: LD_ADDR_VAR 0 21
19529: PUSH
19530: LD_INT 22
19532: PUSH
19533: LD_VAR 0 11
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PPUSH
19542: CALL_OW 69
19546: PPUSH
19547: LD_VAR 0 13
19551: PPUSH
19552: CALL_OW 74
19556: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19557: LD_ADDR_VAR 0 22
19561: PUSH
19562: LD_INT 22
19564: PUSH
19565: LD_VAR 0 11
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 59
19579: PUSH
19580: EMPTY
19581: LIST
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 21
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: EMPTY
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PPUSH
19621: LD_VAR 0 13
19625: PPUSH
19626: CALL_OW 74
19630: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19631: LD_VAR 0 13
19635: PPUSH
19636: LD_VAR 0 21
19640: PPUSH
19641: CALL_OW 296
19645: PUSH
19646: LD_INT 8
19648: PLUS
19649: PUSH
19650: LD_VAR 0 13
19654: PPUSH
19655: LD_VAR 0 22
19659: PPUSH
19660: CALL_OW 296
19664: LESS
19665: IFFALSE 19683
// begin ComAttackUnit ( i , target1 ) ;
19667: LD_VAR 0 13
19671: PPUSH
19672: LD_VAR 0 21
19676: PPUSH
19677: CALL_OW 115
// end else
19681: GO 19697
// begin ComAttackUnit ( i , target2 ) ;
19683: LD_VAR 0 13
19687: PPUSH
19688: LD_VAR 0 22
19692: PPUSH
19693: CALL_OW 115
// end ; end ;
19697: GO 19522
19699: POP
19700: POP
// for i in soldiersOK_list do
19701: LD_ADDR_VAR 0 13
19705: PUSH
19706: LD_VAR 0 18
19710: PUSH
19711: FOR_IN
19712: IFFALSE 19888
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19714: LD_ADDR_VAR 0 21
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_VAR 0 11
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PPUSH
19736: LD_VAR 0 13
19740: PPUSH
19741: CALL_OW 74
19745: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19746: LD_ADDR_VAR 0 22
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_VAR 0 11
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 59
19768: PUSH
19769: EMPTY
19770: LIST
19771: PUSH
19772: LD_INT 21
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 21
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: PPUSH
19805: CALL_OW 69
19809: PPUSH
19810: LD_VAR 0 13
19814: PPUSH
19815: CALL_OW 74
19819: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19820: LD_VAR 0 13
19824: PPUSH
19825: LD_VAR 0 21
19829: PPUSH
19830: CALL_OW 296
19834: PUSH
19835: LD_INT 8
19837: PLUS
19838: PUSH
19839: LD_VAR 0 13
19843: PPUSH
19844: LD_VAR 0 22
19848: PPUSH
19849: CALL_OW 296
19853: LESS
19854: IFFALSE 19872
// begin ComAttackUnit ( i , target1 ) ;
19856: LD_VAR 0 13
19860: PPUSH
19861: LD_VAR 0 21
19865: PPUSH
19866: CALL_OW 115
// end else
19870: GO 19886
// begin ComAttackUnit ( i , target2 ) ;
19872: LD_VAR 0 13
19876: PPUSH
19877: LD_VAR 0 22
19881: PPUSH
19882: CALL_OW 115
// end ; end ;
19886: GO 19711
19888: POP
19889: POP
// until soldiersOK_list = [ ] ;
19890: LD_VAR 0 18
19894: PUSH
19895: EMPTY
19896: EQUAL
19897: IFFALSE 19275
// end ;
19899: LD_VAR 0 12
19903: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
19904: LD_INT 0
19906: PPUSH
19907: PPUSH
19908: PPUSH
19909: PPUSH
19910: PPUSH
19911: PPUSH
19912: PPUSH
// repeat wait ( 0 0$1 ) ;
19913: LD_INT 35
19915: PPUSH
19916: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
19920: LD_ADDR_VAR 0 7
19924: PUSH
19925: LD_INT 22
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 25
19937: PUSH
19938: LD_INT 4
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 3
19947: PUSH
19948: LD_INT 60
19950: PUSH
19951: EMPTY
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 69
19967: ST_TO_ADDR
// if not tmp then
19968: LD_VAR 0 7
19972: NOT
19973: IFFALSE 19977
// continue ;
19975: GO 19913
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19977: LD_ADDR_VAR 0 3
19981: PUSH
19982: LD_INT 5
19984: PPUSH
19985: LD_INT 22
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 25
19997: PUSH
19998: LD_INT 12
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PPUSH
20009: CALL_OW 70
20013: PUSH
20014: FOR_IN
20015: IFFALSE 20048
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20017: LD_VAR 0 7
20021: PPUSH
20022: LD_VAR 0 3
20026: PPUSH
20027: CALL_OW 250
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: CALL_OW 251
20041: PPUSH
20042: CALL_OW 131
20046: GO 20014
20048: POP
20049: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20050: LD_INT 22
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 25
20062: PUSH
20063: LD_INT 4
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PPUSH
20074: CALL_OW 69
20078: PUSH
20079: LD_INT 0
20081: EQUAL
20082: PUSH
20083: LD_INT 5
20085: PPUSH
20086: LD_INT 22
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 25
20098: PUSH
20099: LD_INT 12
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PPUSH
20110: CALL_OW 70
20114: PUSH
20115: LD_INT 2
20117: LESS
20118: OR
20119: PUSH
20120: LD_OWVAR 1
20124: PUSH
20125: LD_INT 7000
20127: GREATEREQUAL
20128: OR
20129: IFFALSE 19913
// repeat wait ( 0 0$1 ) ;
20131: LD_INT 35
20133: PPUSH
20134: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20138: LD_ADDR_VAR 0 5
20142: PUSH
20143: LD_INT 22
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 30
20155: PUSH
20156: LD_INT 5
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PPUSH
20167: CALL_OW 69
20171: ST_TO_ADDR
// until arm ;
20172: LD_VAR 0 5
20176: IFFALSE 20131
// wait ( 0 0$25 ) ;
20178: LD_INT 875
20180: PPUSH
20181: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20185: LD_ADDR_VAR 0 6
20189: PUSH
20190: LD_INT 22
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: LD_INT 30
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 30
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PPUSH
20232: CALL_OW 69
20236: ST_TO_ADDR
// j := 0 ;
20237: LD_ADDR_VAR 0 3
20241: PUSH
20242: LD_INT 0
20244: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20245: LD_ADDR_VAR 0 2
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 25
20262: PUSH
20263: LD_INT 12
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PPUSH
20274: CALL_OW 69
20278: PUSH
20279: FOR_IN
20280: IFFALSE 20367
// begin ComMoveXY ( i , 63 , 16 ) ;
20282: LD_VAR 0 2
20286: PPUSH
20287: LD_INT 63
20289: PPUSH
20290: LD_INT 16
20292: PPUSH
20293: CALL_OW 111
// j := j + 1 ;
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 1
20309: PLUS
20310: ST_TO_ADDR
// if j < 5 then
20311: LD_VAR 0 3
20315: PUSH
20316: LD_INT 5
20318: LESS
20319: IFFALSE 20337
// b := arm [ 1 ] else
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_VAR 0 5
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: ST_TO_ADDR
20335: GO 20351
// b := dep [ 1 ] ;
20337: LD_ADDR_VAR 0 4
20341: PUSH
20342: LD_VAR 0 6
20346: PUSH
20347: LD_INT 1
20349: ARRAY
20350: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20351: LD_VAR 0 2
20355: PPUSH
20356: LD_VAR 0 4
20360: PPUSH
20361: CALL_OW 180
// end ;
20365: GO 20279
20367: POP
20368: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20369: LD_ADDR_VAR 0 2
20373: PUSH
20374: LD_INT 22
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 25
20386: PUSH
20387: LD_INT 4
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL_OW 69
20402: PUSH
20403: FOR_IN
20404: IFFALSE 20450
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20406: LD_VAR 0 2
20410: PPUSH
20411: LD_INT 22
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 8
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PPUSH
20435: CALL_OW 69
20439: PUSH
20440: LD_INT 1
20442: ARRAY
20443: PPUSH
20444: CALL_OW 120
20448: GO 20403
20450: POP
20451: POP
// end ;
20452: LD_VAR 0 1
20456: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
20463: PPUSH
20464: PPUSH
20465: PPUSH
20466: PPUSH
20467: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20468: LD_INT 22
20470: PUSH
20471: LD_VAR 0 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 21
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PPUSH
20494: CALL_OW 69
20498: PUSH
20499: LD_VAR 0 3
20503: LESSEQUAL
20504: IFFALSE 20648
// for i = 1 to vehCount do
20506: LD_ADDR_VAR 0 10
20510: PUSH
20511: DOUBLE
20512: LD_INT 1
20514: DEC
20515: ST_TO_ADDR
20516: LD_VAR 0 3
20520: PUSH
20521: FOR_TO
20522: IFFALSE 20646
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20524: LD_ADDR_VAR 0 12
20528: PUSH
20529: LD_VAR 0 5
20533: PUSH
20534: LD_INT 1
20536: PPUSH
20537: LD_VAR 0 5
20541: PPUSH
20542: CALL_OW 12
20546: ARRAY
20547: ST_TO_ADDR
// if randWeapon = 46 then
20548: LD_VAR 0 12
20552: PUSH
20553: LD_INT 46
20555: EQUAL
20556: IFFALSE 20601
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20558: LD_VAR 0 2
20562: PPUSH
20563: LD_INT 24
20565: PPUSH
20566: LD_VAR 0 6
20570: PPUSH
20571: LD_VAR 0 7
20575: PUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_VAR 0 7
20583: PPUSH
20584: CALL_OW 12
20588: ARRAY
20589: PPUSH
20590: LD_VAR 0 12
20594: PPUSH
20595: CALL_OW 185
20599: GO 20644
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_VAR 0 8
20610: PPUSH
20611: LD_VAR 0 6
20615: PPUSH
20616: LD_VAR 0 7
20620: PUSH
20621: LD_INT 1
20623: PPUSH
20624: LD_VAR 0 7
20628: PPUSH
20629: CALL_OW 12
20633: ARRAY
20634: PPUSH
20635: LD_VAR 0 12
20639: PPUSH
20640: CALL_OW 185
// end ;
20644: GO 20521
20646: POP
20647: POP
// repeat wait ( 0 0$1 ) ;
20648: LD_INT 35
20650: PPUSH
20651: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20655: LD_INT 22
20657: PUSH
20658: LD_VAR 0 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 24
20679: PUSH
20680: LD_INT 250
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: PPUSH
20692: CALL_OW 69
20696: PUSH
20697: LD_VAR 0 3
20701: GREATEREQUAL
20702: IFFALSE 20648
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20704: LD_INT 22
20706: PUSH
20707: LD_VAR 0 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 24
20728: PUSH
20729: LD_INT 250
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 69
20745: PUSH
20746: LD_VAR 0 3
20750: GREATEREQUAL
20751: IFFALSE 21094
// begin repeat begin wait ( 0 0$1 ) ;
20753: LD_INT 35
20755: PPUSH
20756: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20760: LD_INT 22
20762: PUSH
20763: LD_VAR 0 1
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 21
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 24
20784: PUSH
20785: LD_INT 651
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: PPUSH
20797: CALL_OW 69
20801: PUSH
20802: LD_INT 0
20804: GREATER
20805: IFFALSE 21033
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20807: LD_ADDR_VAR 0 10
20811: PUSH
20812: LD_INT 22
20814: PUSH
20815: LD_VAR 0 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 21
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 24
20836: PUSH
20837: LD_INT 651
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL_OW 69
20853: PUSH
20854: FOR_IN
20855: IFFALSE 21031
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20857: LD_ADDR_VAR 0 16
20861: PUSH
20862: LD_INT 22
20864: PUSH
20865: LD_VAR 0 4
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PPUSH
20874: CALL_OW 69
20878: PPUSH
20879: LD_VAR 0 10
20883: PPUSH
20884: CALL_OW 74
20888: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20889: LD_ADDR_VAR 0 17
20893: PUSH
20894: LD_INT 22
20896: PUSH
20897: LD_VAR 0 4
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 59
20911: PUSH
20912: EMPTY
20913: LIST
20914: PUSH
20915: LD_INT 21
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: PPUSH
20948: CALL_OW 69
20952: PPUSH
20953: LD_VAR 0 10
20957: PPUSH
20958: CALL_OW 74
20962: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20963: LD_VAR 0 10
20967: PPUSH
20968: LD_VAR 0 16
20972: PPUSH
20973: CALL_OW 296
20977: PUSH
20978: LD_INT 8
20980: PLUS
20981: PUSH
20982: LD_VAR 0 10
20986: PPUSH
20987: LD_VAR 0 17
20991: PPUSH
20992: CALL_OW 296
20996: LESS
20997: IFFALSE 21015
// begin ComAttackUnit ( i , target1 ) ;
20999: LD_VAR 0 10
21003: PPUSH
21004: LD_VAR 0 16
21008: PPUSH
21009: CALL_OW 115
// end else
21013: GO 21029
// begin ComAttackUnit ( i , target2 ) ;
21015: LD_VAR 0 10
21019: PPUSH
21020: LD_VAR 0 17
21024: PPUSH
21025: CALL_OW 115
// end ; end ;
21029: GO 20854
21031: POP
21032: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21033: LD_INT 22
21035: PUSH
21036: LD_VAR 0 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 21
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PPUSH
21059: CALL_OW 69
21063: PUSH
21064: LD_INT 0
21066: EQUAL
21067: PUSH
21068: LD_INT 22
21070: PUSH
21071: LD_VAR 0 4
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: EMPTY
21081: LIST
21082: PPUSH
21083: CALL_OW 69
21087: PUSH
21088: LD_INT 0
21090: EQUAL
21091: OR
21092: IFFALSE 20753
// end ; end ;
21094: LD_VAR 0 9
21098: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21099: LD_INT 0
21101: PPUSH
21102: PPUSH
21103: PPUSH
21104: PPUSH
// r := 100 ;
21105: LD_ADDR_VAR 0 5
21109: PUSH
21110: LD_INT 100
21112: ST_TO_ADDR
// x := 0 ;
21113: LD_ADDR_VAR 0 6
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// while ( x < n ) do
21121: LD_VAR 0 6
21125: PUSH
21126: LD_VAR 0 2
21130: LESS
21131: IFFALSE 21418
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21133: LD_ADDR_VAR 0 4
21137: PUSH
21138: DOUBLE
21139: LD_INT 1
21141: DEC
21142: ST_TO_ADDR
21143: LD_VAR 0 1
21147: PPUSH
21148: LD_INT 0
21150: PPUSH
21151: CALL_OW 517
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PUSH
21160: FOR_TO
21161: IFFALSE 21414
// begin if r > 50 then
21163: LD_VAR 0 5
21167: PUSH
21168: LD_INT 50
21170: GREATER
21171: IFFALSE 21390
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_INT 0
21180: PPUSH
21181: CALL_OW 517
21185: PUSH
21186: LD_INT 1
21188: ARRAY
21189: PUSH
21190: LD_VAR 0 4
21194: ARRAY
21195: PPUSH
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_INT 0
21203: PPUSH
21204: CALL_OW 517
21208: PUSH
21209: LD_INT 2
21211: ARRAY
21212: PUSH
21213: LD_VAR 0 4
21217: ARRAY
21218: PPUSH
21219: CALL_OW 458
21223: NOT
21224: IFFALSE 21374
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21226: LD_VAR 0 1
21230: PPUSH
21231: LD_INT 0
21233: PPUSH
21234: CALL_OW 517
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PUSH
21243: LD_VAR 0 4
21247: ARRAY
21248: PPUSH
21249: LD_VAR 0 1
21253: PPUSH
21254: LD_INT 0
21256: PPUSH
21257: CALL_OW 517
21261: PUSH
21262: LD_INT 2
21264: ARRAY
21265: PUSH
21266: LD_VAR 0 4
21270: ARRAY
21271: PPUSH
21272: LD_INT 5
21274: PPUSH
21275: LD_INT 0
21277: PPUSH
21278: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21282: LD_ADDR_EXP 50
21286: PUSH
21287: LD_EXP 50
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: LD_VAR 0 1
21299: PPUSH
21300: LD_INT 0
21302: PPUSH
21303: CALL_OW 517
21307: PUSH
21308: LD_INT 1
21310: ARRAY
21311: PUSH
21312: LD_VAR 0 4
21316: ARRAY
21317: PUSH
21318: LD_VAR 0 1
21322: PPUSH
21323: LD_INT 0
21325: PPUSH
21326: CALL_OW 517
21330: PUSH
21331: LD_INT 2
21333: ARRAY
21334: PUSH
21335: LD_VAR 0 4
21339: ARRAY
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 2
21349: ST_TO_ADDR
// r := 0 ;
21350: LD_ADDR_VAR 0 5
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// x := x + 1 ;
21358: LD_ADDR_VAR 0 6
21362: PUSH
21363: LD_VAR 0 6
21367: PUSH
21368: LD_INT 1
21370: PLUS
21371: ST_TO_ADDR
// end else
21372: GO 21388
// r := r + 35 ;
21374: LD_ADDR_VAR 0 5
21378: PUSH
21379: LD_VAR 0 5
21383: PUSH
21384: LD_INT 35
21386: PLUS
21387: ST_TO_ADDR
// end else
21388: GO 21412
// r := r + rand ( 10 , 25 ) ;
21390: LD_ADDR_VAR 0 5
21394: PUSH
21395: LD_VAR 0 5
21399: PUSH
21400: LD_INT 10
21402: PPUSH
21403: LD_INT 25
21405: PPUSH
21406: CALL_OW 12
21410: PLUS
21411: ST_TO_ADDR
// end ;
21412: GO 21160
21414: POP
21415: POP
21416: GO 21121
// end ; end_of_file
21418: LD_VAR 0 3
21422: RET
// every 0 0$1 trigger russianAI = 1 do
21423: LD_EXP 39
21427: PUSH
21428: LD_INT 1
21430: EQUAL
21431: IFFALSE 21650
21433: GO 21435
21435: DISABLE
// begin enable ;
21436: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21437: LD_INT 3
21439: PPUSH
21440: LD_EXP 30
21444: PPUSH
21445: CALL 15901 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21449: LD_INT 3
21451: PPUSH
21452: LD_EXP 42
21456: PPUSH
21457: CALL 16261 0 2
// if ruPossition = 1 then
21461: LD_EXP 41
21465: PUSH
21466: LD_INT 1
21468: EQUAL
21469: IFFALSE 21524
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21471: LD_INT 3
21473: PPUSH
21474: LD_INT 13
21476: PPUSH
21477: LD_INT 10
21479: PPUSH
21480: LD_INT 22
21482: PUSH
21483: LD_INT 3
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 21
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: LD_INT 8
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: LIST
21514: PPUSH
21515: CALL_OW 69
21519: PPUSH
21520: CALL 16467 0 4
// if ruPossition = 2 then
21524: LD_EXP 41
21528: PUSH
21529: LD_INT 2
21531: EQUAL
21532: IFFALSE 21587
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21534: LD_INT 3
21536: PPUSH
21537: LD_INT 14
21539: PPUSH
21540: LD_INT 11
21542: PPUSH
21543: LD_INT 22
21545: PUSH
21546: LD_INT 3
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 3
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 30
21565: PUSH
21566: LD_INT 8
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: PPUSH
21578: CALL_OW 69
21582: PPUSH
21583: CALL 16467 0 4
// if ruPossition = 3 then
21587: LD_EXP 41
21591: PUSH
21592: LD_INT 3
21594: EQUAL
21595: IFFALSE 21650
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21597: LD_INT 3
21599: PPUSH
21600: LD_INT 15
21602: PPUSH
21603: LD_INT 12
21605: PPUSH
21606: LD_INT 22
21608: PUSH
21609: LD_INT 3
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 21
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 30
21628: PUSH
21629: LD_INT 8
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: PPUSH
21641: CALL_OW 69
21645: PPUSH
21646: CALL 16467 0 4
// end ;
21650: END
// every 0 0$1 do
21651: GO 21653
21653: DISABLE
// begin enable ;
21654: ENABLE
// if ruPossition = 1 then
21655: LD_EXP 41
21659: PUSH
21660: LD_INT 1
21662: EQUAL
21663: IFFALSE 21675
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21665: LD_INT 3
21667: PPUSH
21668: LD_INT 10
21670: PPUSH
21671: CALL 15538 0 2
// if ruPossition = 2 then
21675: LD_EXP 41
21679: PUSH
21680: LD_INT 2
21682: EQUAL
21683: IFFALSE 21695
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21685: LD_INT 3
21687: PPUSH
21688: LD_INT 11
21690: PPUSH
21691: CALL 15538 0 2
// if ruPossition = 3 then
21695: LD_EXP 41
21699: PUSH
21700: LD_INT 3
21702: EQUAL
21703: IFFALSE 21715
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21705: LD_INT 3
21707: PPUSH
21708: LD_INT 12
21710: PPUSH
21711: CALL 15538 0 2
// IntBazooka ( 3 , 1 ) ;
21715: LD_INT 3
21717: PPUSH
21718: LD_INT 1
21720: PPUSH
21721: CALL 14337 0 2
// IntBazooka ( 6 , 1 ) ;
21725: LD_INT 6
21727: PPUSH
21728: LD_INT 1
21730: PPUSH
21731: CALL 14337 0 2
// end ;
21735: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21736: LD_EXP 39
21740: PUSH
21741: LD_INT 1
21743: EQUAL
21744: PUSH
21745: LD_EXP 35
21749: PPUSH
21750: CALL_OW 302
21754: AND
21755: PUSH
21756: LD_EXP 35
21760: PPUSH
21761: CALL_OW 255
21765: PUSH
21766: LD_INT 3
21768: EQUAL
21769: AND
21770: PUSH
21771: LD_INT 22
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 21
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 33
21793: PUSH
21794: LD_INT 3
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: PPUSH
21806: CALL_OW 69
21810: PUSH
21811: LD_INT 0
21813: EQUAL
21814: AND
21815: IFFALSE 22023
21817: GO 21819
21819: DISABLE
// begin enable ;
21820: ENABLE
// if Difficulty = 1 then
21821: LD_OWVAR 67
21825: PUSH
21826: LD_INT 1
21828: EQUAL
21829: IFFALSE 21891
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21831: LD_INT 3
21833: PPUSH
21834: LD_EXP 35
21838: PPUSH
21839: LD_INT 5
21841: PPUSH
21842: LD_INT 8
21844: PPUSH
21845: CALL_OW 12
21849: PPUSH
21850: LD_INT 1
21852: PPUSH
21853: LD_INT 43
21855: PUSH
21856: LD_INT 44
21858: PUSH
21859: LD_INT 45
21861: PUSH
21862: LD_INT 46
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PPUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_INT 3
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: LD_INT 22
21886: PPUSH
21887: CALL 20457 0 8
// if Difficulty = 2 then
21891: LD_OWVAR 67
21895: PUSH
21896: LD_INT 2
21898: EQUAL
21899: IFFALSE 21957
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21901: LD_INT 3
21903: PPUSH
21904: LD_EXP 35
21908: PPUSH
21909: LD_INT 6
21911: PPUSH
21912: LD_INT 8
21914: PPUSH
21915: CALL_OW 12
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: LD_INT 44
21925: PUSH
21926: LD_INT 45
21928: PUSH
21929: LD_INT 46
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 3
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PPUSH
21950: LD_INT 22
21952: PPUSH
21953: CALL 20457 0 8
// if Difficulty = 3 then
21957: LD_OWVAR 67
21961: PUSH
21962: LD_INT 3
21964: EQUAL
21965: IFFALSE 22023
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21967: LD_INT 3
21969: PPUSH
21970: LD_EXP 35
21974: PPUSH
21975: LD_INT 7
21977: PPUSH
21978: LD_INT 8
21980: PPUSH
21981: CALL_OW 12
21985: PPUSH
21986: LD_INT 1
21988: PPUSH
21989: LD_INT 44
21991: PUSH
21992: LD_INT 45
21994: PUSH
21995: LD_INT 46
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 3
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PPUSH
22016: LD_INT 22
22018: PPUSH
22019: CALL 20457 0 8
// end ;
22023: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22024: LD_EXP 50
22028: PUSH
22029: LD_EXP 49
22033: AND
22034: IFFALSE 22155
22036: GO 22038
22038: DISABLE
22039: LD_INT 0
22041: PPUSH
// begin enable ;
22042: ENABLE
// for i in arabianMines do
22043: LD_ADDR_VAR 0 1
22047: PUSH
22048: LD_EXP 50
22052: PUSH
22053: FOR_IN
22054: IFFALSE 22153
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22056: LD_INT 22
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 92
22068: PUSH
22069: LD_VAR 0 1
22073: PUSH
22074: LD_INT 1
22076: ARRAY
22077: PUSH
22078: LD_VAR 0 1
22082: PUSH
22083: LD_INT 2
22085: ARRAY
22086: PUSH
22087: LD_INT 3
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PPUSH
22100: CALL_OW 69
22104: IFFALSE 22151
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22106: LD_VAR 0 1
22110: PUSH
22111: LD_INT 1
22113: ARRAY
22114: PPUSH
22115: LD_VAR 0 1
22119: PUSH
22120: LD_INT 2
22122: ARRAY
22123: PPUSH
22124: LD_INT 5
22126: PPUSH
22127: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22131: LD_ADDR_EXP 50
22135: PUSH
22136: LD_EXP 50
22140: PPUSH
22141: LD_VAR 0 1
22145: PPUSH
22146: CALL_OW 3
22150: ST_TO_ADDR
// end ; end ;
22151: GO 22053
22153: POP
22154: POP
// end ; end_of_file
22155: PPOPN 1
22157: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22158: LD_VAR 0 1
22162: PPUSH
22163: CALL_OW 255
22167: PUSH
22168: LD_INT 4
22170: EQUAL
22171: IFFALSE 22185
// SetBName ( building , epsilon ) ;
22173: LD_VAR 0 1
22177: PPUSH
22178: LD_STRING epsilon
22180: PPUSH
22181: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22185: LD_VAR 0 1
22189: PPUSH
22190: CALL_OW 255
22194: PUSH
22195: LD_INT 1
22197: EQUAL
22198: PUSH
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 266
22208: PUSH
22209: LD_INT 0
22211: EQUAL
22212: AND
22213: IFFALSE 22227
// SetBName ( building , epsilon ) ;
22215: LD_VAR 0 1
22219: PPUSH
22220: LD_STRING epsilon
22222: PPUSH
22223: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 255
22236: PUSH
22237: LD_INT 3
22239: EQUAL
22240: PUSH
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 266
22250: PUSH
22251: LD_INT 0
22253: EQUAL
22254: AND
22255: IFFALSE 22269
// SetBName ( building , chuikov ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_STRING chuikov
22264: PPUSH
22265: CALL_OW 500
// if GetSide ( building ) = 2 then
22269: LD_VAR 0 1
22273: PPUSH
22274: CALL_OW 255
22278: PUSH
22279: LD_INT 2
22281: EQUAL
22282: IFFALSE 22338
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22284: LD_VAR 0 1
22288: PPUSH
22289: CALL_OW 266
22293: PUSH
22294: LD_INT 6
22296: EQUAL
22297: PUSH
22298: LD_VAR 0 1
22302: PPUSH
22303: CALL_OW 266
22307: PUSH
22308: LD_INT 9
22310: EQUAL
22311: OR
22312: IFFALSE 22338
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_INT 10
22321: PPUSH
22322: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22326: LD_VAR 0 1
22330: PPUSH
22331: LD_INT 11
22333: PPUSH
22334: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 255
22347: PUSH
22348: LD_INT 3
22350: EQUAL
22351: IFFALSE 22385
// begin ruDepotConstructed := true ;
22353: LD_ADDR_EXP 57
22357: PUSH
22358: LD_INT 1
22360: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 266
22370: PUSH
22371: LD_INT 2
22373: EQUAL
22374: IFFALSE 22385
// AddComUpgrade ( building ) ;
22376: LD_VAR 0 1
22380: PPUSH
22381: CALL_OW 206
// end ; end ;
22385: PPOPN 2
22387: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22388: LD_INT 0
22390: PPUSH
22391: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_INT 22
22399: PUSH
22400: LD_INT 3
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 23
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 21
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: IN
22437: PUSH
22438: LD_EXP 61
22442: NOT
22443: AND
22444: IFFALSE 22475
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22446: LD_ADDR_EXP 61
22450: PUSH
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 250
22460: PUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL_OW 251
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: ST_TO_ADDR
// end ;
22475: PPOPN 3
22477: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22478: LD_VAR 0 2
22482: PPUSH
22483: CALL_OW 255
22487: PUSH
22488: LD_INT 3
22490: EQUAL
22491: PUSH
22492: LD_EXP 35
22496: PPUSH
22497: CALL_OW 255
22501: PUSH
22502: LD_INT 3
22504: EQUAL
22505: AND
22506: PUSH
22507: LD_EXP 35
22511: PPUSH
22512: CALL_OW 302
22516: AND
22517: IFFALSE 22533
// ComEnterUnit ( human , ruFab ) ;
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_EXP 35
22528: PPUSH
22529: CALL_OW 120
// end ;
22533: PPOPN 2
22535: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22536: LD_INT 0
22538: PPUSH
22539: PPUSH
22540: PPUSH
22541: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 255
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: PUSH
22556: LD_EXP 65
22560: PUSH
22561: LD_INT 0
22563: EQUAL
22564: AND
22565: IFFALSE 22767
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22567: LD_VAR 0 1
22571: PPUSH
22572: CALL_OW 266
22576: PUSH
22577: LD_INT 26
22579: EQUAL
22580: PUSH
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 266
22590: PUSH
22591: LD_INT 27
22593: EQUAL
22594: OR
22595: PUSH
22596: LD_VAR 0 1
22600: PPUSH
22601: CALL_OW 266
22605: PUSH
22606: LD_INT 28
22608: EQUAL
22609: OR
22610: IFFALSE 22767
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22612: LD_INT 22
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 30
22627: PUSH
22628: LD_INT 7
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 30
22637: PUSH
22638: LD_INT 8
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PPUSH
22654: CALL_OW 69
22658: PUSH
22659: LD_INT 0
22661: GREATER
22662: IFFALSE 22767
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22664: LD_ADDR_VAR 0 2
22668: PUSH
22669: LD_INT 22
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 30
22684: PUSH
22685: LD_INT 7
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 30
22694: PUSH
22695: LD_INT 8
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 69
22715: PUSH
22716: FOR_IN
22717: IFFALSE 22765
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22719: LD_VAR 0 2
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 268
22731: PUSH
22732: LD_INT 11
22734: EQUAL
22735: PUSH
22736: LD_VAR 0 2
22740: PPUSH
22741: LD_INT 2
22743: PPUSH
22744: CALL_OW 268
22748: PUSH
22749: LD_INT 11
22751: EQUAL
22752: OR
22753: IFFALSE 22763
// eventVar1 = 1 ;
22755: LD_ADDR_EXP 65
22759: PUSH
22760: LD_INT 1
22762: ST_TO_ADDR
22763: GO 22716
22765: POP
22766: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL_OW 255
22776: PUSH
22777: LD_INT 3
22779: EQUAL
22780: IFFALSE 23260
// begin if GetBType ( building ) = b_depot then
22782: LD_VAR 0 1
22786: PPUSH
22787: CALL_OW 266
22791: PUSH
22792: LD_INT 0
22794: EQUAL
22795: IFFALSE 22867
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22797: LD_VAR 0 1
22801: PPUSH
22802: CALL_OW 274
22806: PPUSH
22807: LD_INT 1
22809: PPUSH
22810: LD_INT 5000
22812: PPUSH
22813: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 274
22826: PPUSH
22827: LD_INT 2
22829: PPUSH
22830: LD_INT 300
22832: PPUSH
22833: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 274
22846: PPUSH
22847: LD_INT 3
22849: PPUSH
22850: LD_INT 100
22852: PPUSH
22853: CALL_OW 277
// ruDepot = building ;
22857: LD_ADDR_EXP 30
22861: PUSH
22862: LD_VAR 0 1
22866: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 0
22879: EQUAL
22880: PUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL_OW 266
22890: PUSH
22891: LD_INT 2
22893: EQUAL
22894: OR
22895: PUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL_OW 266
22905: PUSH
22906: LD_INT 4
22908: EQUAL
22909: OR
22910: IFFALSE 22921
// ComUpgrade ( building ) ;
22912: LD_VAR 0 1
22916: PPUSH
22917: CALL_OW 146
// if GetBType ( building ) = b_lab then
22921: LD_VAR 0 1
22925: PPUSH
22926: CALL_OW 266
22930: PUSH
22931: LD_INT 6
22933: EQUAL
22934: IFFALSE 23137
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
22936: LD_INT 22
22938: PUSH
22939: LD_INT 3
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 30
22948: PUSH
22949: LD_INT 8
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PPUSH
22960: CALL_OW 69
22964: PUSH
22965: LD_INT 0
22967: EQUAL
22968: IFFALSE 23006
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22970: LD_VAR 0 1
22974: PPUSH
22975: LD_INT 10
22977: PPUSH
22978: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
22982: LD_VAR 0 1
22986: PPUSH
22987: LD_INT 12
22989: PPUSH
22990: CALL_OW 207
// ruLab1 = building ;
22994: LD_ADDR_EXP 31
22998: PUSH
22999: LD_VAR 0 1
23003: ST_TO_ADDR
// end else
23004: GO 23040
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: LD_INT 11
23013: PPUSH
23014: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23018: LD_VAR 0 1
23022: PPUSH
23023: LD_INT 14
23025: PPUSH
23026: CALL_OW 207
// ruLab2 = building ;
23030: LD_ADDR_EXP 32
23034: PUSH
23035: LD_VAR 0 1
23039: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23040: LD_INT 3
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_INT 3
23050: PPUSH
23051: CALL 15453 0 3
// if ruDestroyedBuildings > 0 then
23055: LD_EXP 42
23059: PUSH
23060: LD_INT 0
23062: GREATER
23063: IFFALSE 23137
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23065: LD_ADDR_EXP 42
23069: PUSH
23070: LD_EXP 42
23074: PPUSH
23075: LD_INT 1
23077: PPUSH
23078: CALL_OW 3
23082: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23083: LD_ADDR_EXP 42
23087: PUSH
23088: LD_EXP 42
23092: PPUSH
23093: LD_INT 1
23095: PPUSH
23096: CALL_OW 3
23100: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23101: LD_ADDR_EXP 42
23105: PUSH
23106: LD_EXP 42
23110: PPUSH
23111: LD_INT 1
23113: PPUSH
23114: CALL_OW 3
23118: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23119: LD_ADDR_EXP 42
23123: PUSH
23124: LD_EXP 42
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 3
23136: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 266
23146: PUSH
23147: LD_INT 32
23149: EQUAL
23150: IFFALSE 23187
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23152: LD_VAR 0 1
23156: PPUSH
23157: LD_INT 44
23159: PUSH
23160: LD_INT 45
23162: PUSH
23163: LD_INT 46
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: PPUSH
23174: LD_INT 3
23176: PPUSH
23177: CALL_OW 12
23181: ARRAY
23182: PPUSH
23183: CALL_OW 208
// if GetBType ( building ) = b_turret then
23187: LD_VAR 0 1
23191: PPUSH
23192: CALL_OW 266
23196: PUSH
23197: LD_INT 33
23199: EQUAL
23200: IFFALSE 23237
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23202: LD_VAR 0 1
23206: PPUSH
23207: LD_INT 44
23209: PUSH
23210: LD_INT 45
23212: PUSH
23213: LD_INT 46
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 1
23223: PPUSH
23224: LD_INT 3
23226: PPUSH
23227: CALL_OW 12
23231: ARRAY
23232: PPUSH
23233: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23237: LD_VAR 0 1
23241: PPUSH
23242: CALL_OW 266
23246: PUSH
23247: LD_INT 24
23249: EQUAL
23250: IFFALSE 23260
// russianAI = 1 ;
23252: LD_ADDR_EXP 39
23256: PUSH
23257: LD_INT 1
23259: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23260: LD_VAR 0 1
23264: PPUSH
23265: CALL_OW 255
23269: PUSH
23270: LD_INT 2
23272: EQUAL
23273: IFFALSE 24152
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 266
23284: PUSH
23285: LD_EXP 68
23289: PUSH
23290: LD_INT 1
23292: ARRAY
23293: PUSH
23294: LD_INT 1
23296: ARRAY
23297: EQUAL
23298: IFFALSE 23425
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23300: LD_ADDR_EXP 68
23304: PUSH
23305: LD_EXP 68
23309: PPUSH
23310: LD_INT 1
23312: PPUSH
23313: CALL_OW 3
23317: ST_TO_ADDR
// if arBuildingsTab then
23318: LD_EXP 68
23322: IFFALSE 23425
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23324: LD_ADDR_VAR 0 3
23328: PUSH
23329: LD_INT 22
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 25
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 69
23357: ST_TO_ADDR
// if engineers then
23358: LD_VAR 0 3
23362: IFFALSE 23425
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_EXP 68
23373: PUSH
23374: LD_INT 1
23376: ARRAY
23377: PUSH
23378: LD_INT 1
23380: ARRAY
23381: PPUSH
23382: LD_EXP 68
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: PUSH
23391: LD_INT 2
23393: ARRAY
23394: PPUSH
23395: LD_EXP 68
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: PUSH
23404: LD_INT 3
23406: ARRAY
23407: PPUSH
23408: LD_EXP 68
23412: PUSH
23413: LD_INT 1
23415: ARRAY
23416: PUSH
23417: LD_INT 4
23419: ARRAY
23420: PPUSH
23421: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 266
23434: PUSH
23435: LD_INT 31
23437: EQUAL
23438: IFFALSE 23584
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: LD_INT 22
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: LD_INT 25
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 25
23470: PUSH
23471: LD_INT 8
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PPUSH
23487: CALL_OW 69
23491: PUSH
23492: LD_EXP 26
23496: DIFF
23497: ST_TO_ADDR
// if not sol then
23498: LD_VAR 0 4
23502: NOT
23503: IFFALSE 23507
// exit ;
23505: GO 24152
// for i in sol do
23507: LD_ADDR_VAR 0 2
23511: PUSH
23512: LD_VAR 0 4
23516: PUSH
23517: FOR_IN
23518: IFFALSE 23582
// if not GetTag ( i ) then
23520: LD_VAR 0 2
23524: PPUSH
23525: CALL_OW 110
23529: NOT
23530: IFFALSE 23580
// begin if IsInUnit ( i ) then
23532: LD_VAR 0 2
23536: PPUSH
23537: CALL_OW 310
23541: IFFALSE 23552
// ComExitBuilding ( i ) ;
23543: LD_VAR 0 2
23547: PPUSH
23548: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23552: LD_VAR 0 2
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL_OW 180
// SetTag ( i , 11 ) ;
23566: LD_VAR 0 2
23570: PPUSH
23571: LD_INT 11
23573: PPUSH
23574: CALL_OW 109
// break ;
23578: GO 23582
// end ;
23580: GO 23517
23582: POP
23583: POP
// end ; if GetBType ( building ) = b_depot then
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 266
23593: PUSH
23594: LD_INT 0
23596: EQUAL
23597: IFFALSE 23683
// begin arDepot = building ;
23599: LD_ADDR_EXP 43
23603: PUSH
23604: LD_VAR 0 1
23608: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23609: LD_INT 38
23611: PUSH
23612: LD_INT 47
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PPUSH
23619: LD_INT 71
23621: PPUSH
23622: LD_INT 19
23624: PPUSH
23625: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23629: LD_VAR 0 1
23633: PPUSH
23634: CALL_OW 274
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: LD_INT 500
23644: PPUSH
23645: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23649: LD_VAR 0 1
23653: PPUSH
23654: CALL_OW 274
23658: PPUSH
23659: LD_INT 3
23661: PPUSH
23662: LD_INT 30
23664: PPUSH
23665: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23669: LD_EXP 26
23673: PPUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23683: LD_VAR 0 1
23687: PPUSH
23688: CALL_OW 266
23692: PUSH
23693: LD_INT 6
23695: EQUAL
23696: PUSH
23697: LD_VAR 0 1
23701: PPUSH
23702: CALL_OW 266
23706: PUSH
23707: LD_INT 9
23709: EQUAL
23710: OR
23711: IFFALSE 23762
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 10
23720: PPUSH
23721: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23725: LD_VAR 0 1
23729: PPUSH
23730: LD_INT 11
23732: PPUSH
23733: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23737: LD_INT 2
23739: PPUSH
23740: LD_VAR 0 1
23744: PPUSH
23745: LD_INT 2
23747: PPUSH
23748: CALL 15453 0 3
// arLab = building ;
23752: LD_ADDR_EXP 44
23756: PUSH
23757: LD_VAR 0 1
23761: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 266
23771: PUSH
23772: LD_INT 2
23774: EQUAL
23775: PUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 266
23785: PUSH
23786: LD_INT 4
23788: EQUAL
23789: OR
23790: IFFALSE 23861
// begin ComUpgrade ( building ) ;
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23801: LD_VAR 0 1
23805: PPUSH
23806: CALL_OW 266
23810: PUSH
23811: LD_INT 4
23813: EQUAL
23814: IFFALSE 23861
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
23816: LD_INT 22
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 25
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PPUSH
23840: CALL_OW 69
23844: PUSH
23845: LD_EXP 26
23849: DIFF
23850: PPUSH
23851: LD_INT 75
23853: PPUSH
23854: LD_INT 21
23856: PPUSH
23857: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
23861: LD_VAR 0 1
23865: PPUSH
23866: CALL_OW 266
23870: PUSH
23871: LD_INT 27
23873: EQUAL
23874: IFFALSE 24152
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
23876: LD_INT 22
23878: PUSH
23879: LD_INT 2
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 30
23888: PUSH
23889: LD_INT 27
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PPUSH
23900: CALL_OW 69
23904: PUSH
23905: LD_INT 2
23907: EQUAL
23908: IFFALSE 24152
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
23910: LD_ADDR_VAR 0 2
23914: PUSH
23915: LD_INT 22
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 21
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 25
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: PPUSH
23950: CALL_OW 69
23954: PUSH
23955: LD_INT 1
23957: ARRAY
23958: ST_TO_ADDR
// if not i then
23959: LD_VAR 0 2
23963: NOT
23964: IFFALSE 23968
// exit ;
23966: GO 24152
// AddComMoveXY ( i , 92 , 34 ) ;
23968: LD_VAR 0 2
23972: PPUSH
23973: LD_INT 92
23975: PPUSH
23976: LD_INT 34
23978: PPUSH
23979: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23983: LD_VAR 0 2
23987: PPUSH
23988: LD_INT 35
23990: PPUSH
23991: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
23995: LD_VAR 0 2
23999: PPUSH
24000: LD_INT 101
24002: PPUSH
24003: LD_INT 20
24005: PPUSH
24006: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24010: LD_VAR 0 2
24014: PPUSH
24015: LD_INT 35
24017: PPUSH
24018: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24022: LD_VAR 0 2
24026: PPUSH
24027: LD_INT 115
24029: PPUSH
24030: LD_INT 30
24032: PPUSH
24033: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24037: LD_VAR 0 2
24041: PPUSH
24042: LD_INT 35
24044: PPUSH
24045: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24049: LD_VAR 0 2
24053: PPUSH
24054: LD_INT 82
24056: PPUSH
24057: LD_INT 57
24059: PPUSH
24060: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24064: LD_VAR 0 2
24068: PPUSH
24069: LD_INT 35
24071: PPUSH
24072: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24076: LD_VAR 0 2
24080: PPUSH
24081: LD_INT 36
24083: PPUSH
24084: LD_INT 28
24086: PPUSH
24087: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24091: LD_VAR 0 2
24095: PPUSH
24096: LD_INT 70
24098: PPUSH
24099: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24103: LD_INT 22
24105: PUSH
24106: LD_INT 2
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 21
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 25
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: PPUSH
24138: CALL_OW 69
24142: PPUSH
24143: LD_EXP 43
24147: PPUSH
24148: CALL_OW 180
// end ; end ; end ;
24152: PPOPN 5
24154: END
// on UpgradeComplete ( building ) do var i ;
24155: LD_INT 0
24157: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24158: LD_VAR 0 1
24162: PPUSH
24163: CALL_OW 255
24167: PUSH
24168: LD_INT 1
24170: EQUAL
24171: PUSH
24172: LD_EXP 65
24176: PUSH
24177: LD_INT 0
24179: EQUAL
24180: AND
24181: IFFALSE 24379
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 266
24192: PUSH
24193: LD_INT 7
24195: EQUAL
24196: PUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 266
24206: PUSH
24207: LD_INT 8
24209: EQUAL
24210: OR
24211: IFFALSE 24379
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24213: LD_INT 22
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: LD_INT 30
24228: PUSH
24229: LD_INT 26
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 30
24238: PUSH
24239: LD_INT 27
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 30
24248: PUSH
24249: LD_INT 28
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: PUSH
24271: LD_INT 0
24273: GREATER
24274: IFFALSE 24379
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24276: LD_ADDR_VAR 0 2
24280: PUSH
24281: LD_INT 22
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: LD_INT 30
24296: PUSH
24297: LD_INT 7
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 30
24306: PUSH
24307: LD_INT 8
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PPUSH
24323: CALL_OW 69
24327: PUSH
24328: FOR_IN
24329: IFFALSE 24377
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24331: LD_VAR 0 2
24335: PPUSH
24336: LD_INT 1
24338: PPUSH
24339: CALL_OW 268
24343: PUSH
24344: LD_INT 11
24346: EQUAL
24347: PUSH
24348: LD_VAR 0 2
24352: PPUSH
24353: LD_INT 2
24355: PPUSH
24356: CALL_OW 268
24360: PUSH
24361: LD_INT 11
24363: EQUAL
24364: OR
24365: IFFALSE 24375
// eventVar1 = 1 ;
24367: LD_ADDR_EXP 65
24371: PUSH
24372: LD_INT 1
24374: ST_TO_ADDR
24375: GO 24328
24377: POP
24378: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL_OW 255
24388: PUSH
24389: LD_INT 2
24391: EQUAL
24392: IFFALSE 24497
// begin if GetBType ( building ) = b_barracks then
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL_OW 266
24403: PUSH
24404: LD_INT 5
24406: EQUAL
24407: IFFALSE 24497
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24409: LD_ADDR_VAR 0 2
24413: PUSH
24414: LD_INT 22
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 25
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 3
24436: PUSH
24437: LD_INT 54
24439: PUSH
24440: EMPTY
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: PPUSH
24452: CALL_OW 69
24456: PUSH
24457: LD_EXP 26
24461: PUSH
24462: EMPTY
24463: LIST
24464: DIFF
24465: PUSH
24466: FOR_IN
24467: IFFALSE 24485
// ComEnterUnit ( i , building ) ;
24469: LD_VAR 0 2
24473: PPUSH
24474: LD_VAR 0 1
24478: PPUSH
24479: CALL_OW 120
24483: GO 24466
24485: POP
24486: POP
// arArm = building ;
24487: LD_ADDR_EXP 45
24491: PUSH
24492: LD_VAR 0 1
24496: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 255
24506: PUSH
24507: LD_INT 3
24509: EQUAL
24510: IFFALSE 24983
// begin if GetBType ( building ) = b_factory then
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 266
24521: PUSH
24522: LD_INT 3
24524: EQUAL
24525: IFFALSE 24592
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24527: LD_ADDR_VAR 0 2
24531: PUSH
24532: LD_INT 22
24534: PUSH
24535: LD_INT 3
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 25
24544: PUSH
24545: LD_INT 3
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PPUSH
24556: CALL_OW 69
24560: PUSH
24561: FOR_IN
24562: IFFALSE 24580
// ComEnterUnit ( i , building ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: LD_VAR 0 1
24573: PPUSH
24574: CALL_OW 120
24578: GO 24561
24580: POP
24581: POP
// ruFab = building ;
24582: LD_ADDR_EXP 35
24586: PUSH
24587: LD_VAR 0 1
24591: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24592: LD_INT 22
24594: PUSH
24595: LD_INT 3
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 21
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 30
24614: PUSH
24615: LD_INT 8
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: LIST
24626: PPUSH
24627: CALL_OW 69
24631: PUSH
24632: LD_INT 2
24634: EQUAL
24635: IFFALSE 24843
// begin for i = 1 to 2 do
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: DOUBLE
24643: LD_INT 1
24645: DEC
24646: ST_TO_ADDR
24647: LD_INT 2
24649: PUSH
24650: FOR_TO
24651: IFFALSE 24738
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24653: LD_INT 22
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 25
24665: PUSH
24666: LD_INT 4
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 69
24681: PUSH
24682: LD_VAR 0 2
24686: ARRAY
24687: PPUSH
24688: LD_INT 22
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 21
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 30
24710: PUSH
24711: LD_INT 8
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 69
24727: PUSH
24728: LD_INT 1
24730: ARRAY
24731: PPUSH
24732: CALL_OW 120
24736: GO 24650
24738: POP
24739: POP
// for i = 3 to 4 do
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: DOUBLE
24746: LD_INT 3
24748: DEC
24749: ST_TO_ADDR
24750: LD_INT 4
24752: PUSH
24753: FOR_TO
24754: IFFALSE 24841
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24756: LD_INT 22
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 25
24768: PUSH
24769: LD_INT 4
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PPUSH
24780: CALL_OW 69
24784: PUSH
24785: LD_VAR 0 2
24789: ARRAY
24790: PPUSH
24791: LD_INT 22
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 30
24813: PUSH
24814: LD_INT 8
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: PPUSH
24826: CALL_OW 69
24830: PUSH
24831: LD_INT 2
24833: ARRAY
24834: PPUSH
24835: CALL_OW 120
24839: GO 24753
24841: POP
24842: POP
// end ; if GetBType ( building ) = b_barracks then
24843: LD_VAR 0 1
24847: PPUSH
24848: CALL_OW 266
24852: PUSH
24853: LD_INT 5
24855: EQUAL
24856: IFFALSE 24983
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: LD_INT 22
24865: PUSH
24866: LD_INT 3
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 25
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: LD_INT 54
24888: PUSH
24889: EMPTY
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: PPUSH
24901: CALL_OW 69
24905: PUSH
24906: FOR_IN
24907: IFFALSE 24925
// ComEnterUnit ( i , building ) ;
24909: LD_VAR 0 2
24913: PPUSH
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 120
24923: GO 24906
24925: POP
24926: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
24927: LD_INT 22
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 30
24939: PUSH
24940: LD_INT 5
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PPUSH
24951: CALL_OW 69
24955: PUSH
24956: LD_INT 0
24958: EQUAL
24959: IFFALSE 24973
// ruArm1 = building else
24961: LD_ADDR_EXP 33
24965: PUSH
24966: LD_VAR 0 1
24970: ST_TO_ADDR
24971: GO 24983
// ruArm2 = building ;
24973: LD_ADDR_EXP 34
24977: PUSH
24978: LD_VAR 0 1
24982: ST_TO_ADDR
// end ; end ; end ;
24983: PPOPN 2
24985: END
// on EnterBuilding ( building , human ) do var rnd ;
24986: LD_INT 0
24988: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
24989: LD_VAR 0 2
24993: PPUSH
24994: CALL_OW 255
24998: PUSH
24999: LD_INT 2
25001: EQUAL
25002: PUSH
25003: LD_VAR 0 2
25007: PPUSH
25008: CALL_OW 257
25012: PUSH
25013: LD_INT 1
25015: EQUAL
25016: AND
25017: PUSH
25018: LD_VAR 0 1
25022: PUSH
25023: LD_EXP 45
25027: EQUAL
25028: AND
25029: IFFALSE 25076
// begin wait ( 0 0$1 ) ;
25031: LD_INT 35
25033: PPUSH
25034: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25038: LD_ADDR_VAR 0 3
25042: PUSH
25043: LD_INT 1
25045: PPUSH
25046: LD_INT 100
25048: PPUSH
25049: CALL_OW 12
25053: ST_TO_ADDR
// if rnd > 50 then
25054: LD_VAR 0 3
25058: PUSH
25059: LD_INT 50
25061: GREATER
25062: IFFALSE 25076
// SetClass ( human , class_mortar ) ;
25064: LD_VAR 0 2
25068: PPUSH
25069: LD_INT 8
25071: PPUSH
25072: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25076: LD_VAR 0 2
25080: PUSH
25081: LD_INT 22
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 25
25093: PUSH
25094: LD_INT 12
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PPUSH
25105: CALL_OW 69
25109: IN
25110: IFFALSE 25160
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL_OW 266
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: IN
25132: IFFALSE 25148
// SetClass ( human , class_apeman_engineer ) else
25134: LD_VAR 0 2
25138: PPUSH
25139: LD_INT 16
25141: PPUSH
25142: CALL_OW 336
25146: GO 25160
// SetClass ( human , class_apeman_soldier ) ;
25148: LD_VAR 0 2
25152: PPUSH
25153: LD_INT 15
25155: PPUSH
25156: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25160: LD_VAR 0 2
25164: PPUSH
25165: CALL_OW 255
25169: PUSH
25170: LD_INT 3
25172: EQUAL
25173: PUSH
25174: LD_VAR 0 2
25178: PPUSH
25179: CALL_OW 257
25183: PUSH
25184: LD_INT 1
25186: EQUAL
25187: AND
25188: PUSH
25189: LD_VAR 0 1
25193: PUSH
25194: LD_EXP 33
25198: EQUAL
25199: PUSH
25200: LD_VAR 0 1
25204: PUSH
25205: LD_EXP 34
25209: EQUAL
25210: OR
25211: PUSH
25212: EMPTY
25213: LIST
25214: AND
25215: IFFALSE 25236
// begin wait ( 0 0$1 ) ;
25217: LD_INT 35
25219: PPUSH
25220: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25224: LD_VAR 0 2
25228: PPUSH
25229: LD_INT 9
25231: PPUSH
25232: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25236: LD_VAR 0 2
25240: PPUSH
25241: CALL_OW 255
25245: PUSH
25246: LD_INT 3
25248: EQUAL
25249: PUSH
25250: LD_VAR 0 2
25254: PPUSH
25255: CALL_OW 257
25259: PUSH
25260: LD_INT 9
25262: EQUAL
25263: AND
25264: PUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 266
25274: PUSH
25275: LD_INT 32
25277: EQUAL
25278: AND
25279: IFFALSE 25300
// begin wait ( 0 0$1 ) ;
25281: LD_INT 35
25283: PPUSH
25284: CALL_OW 67
// SetClass ( human , 1 ) ;
25288: LD_VAR 0 2
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25300: LD_VAR 0 2
25304: PPUSH
25305: CALL_OW 255
25309: PUSH
25310: LD_INT 3
25312: EQUAL
25313: PUSH
25314: LD_VAR 0 2
25318: PPUSH
25319: CALL_OW 257
25323: PUSH
25324: LD_INT 3
25326: EQUAL
25327: AND
25328: PUSH
25329: LD_VAR 0 1
25333: PUSH
25334: LD_EXP 35
25338: EQUAL
25339: AND
25340: IFFALSE 25354
// SetLives ( human , 1000 ) ;
25342: LD_VAR 0 2
25346: PPUSH
25347: LD_INT 1000
25349: PPUSH
25350: CALL_OW 234
// end ;
25354: PPOPN 3
25356: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25357: LD_VAR 0 1
25361: PUSH
25362: LD_INT 1
25364: EQUAL
25365: PUSH
25366: LD_VAR 0 2
25370: PUSH
25371: LD_INT 2
25373: EQUAL
25374: AND
25375: PUSH
25376: LD_INT 1
25378: PPUSH
25379: LD_INT 2
25381: PPUSH
25382: CALL_OW 81
25386: PUSH
25387: LD_INT 1
25389: EQUAL
25390: AND
25391: IFFALSE 25412
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25393: LD_EXP 24
25397: PPUSH
25398: LD_STRING D6b-Pow-1
25400: PPUSH
25401: CALL_OW 94
// YouLost ( Powell ) ;
25405: LD_STRING Powell
25407: PPUSH
25408: CALL_OW 104
// end ; end ;
25412: PPOPN 2
25414: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25415: LD_INT 23
25417: PPUSH
25418: LD_INT 22
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 21
25430: PUSH
25431: LD_INT 3
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PPUSH
25442: CALL_OW 70
25446: PUSH
25447: LD_INT 23
25449: PPUSH
25450: LD_INT 22
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 21
25462: PUSH
25463: LD_INT 2
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PPUSH
25474: CALL_OW 70
25478: OR
25479: PUSH
25480: LD_INT 1
25482: PPUSH
25483: LD_INT 2
25485: PPUSH
25486: CALL_OW 81
25490: PUSH
25491: LD_INT 1
25493: EQUAL
25494: AND
25495: IFFALSE 25628
25497: GO 25499
25499: DISABLE
// begin enable ;
25500: ENABLE
// wait ( 0 0$10 ) ;
25501: LD_INT 350
25503: PPUSH
25504: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25508: LD_INT 23
25510: PPUSH
25511: LD_INT 22
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 21
25523: PUSH
25524: LD_INT 3
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PPUSH
25535: CALL_OW 70
25539: PUSH
25540: LD_INT 23
25542: PPUSH
25543: LD_INT 22
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 21
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PPUSH
25567: CALL_OW 70
25571: OR
25572: PUSH
25573: LD_INT 1
25575: PPUSH
25576: LD_INT 2
25578: PPUSH
25579: CALL_OW 81
25583: PUSH
25584: LD_INT 1
25586: EQUAL
25587: AND
25588: IFFALSE 25628
// begin disable ;
25590: DISABLE
// InGameOn ;
25591: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25595: LD_INT 73
25597: PPUSH
25598: LD_INT 18
25600: PPUSH
25601: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25605: LD_EXP 24
25609: PPUSH
25610: LD_STRING D6b-Pow-1
25612: PPUSH
25613: CALL_OW 94
// YouLost ( Powell ) ;
25617: LD_STRING Powell
25619: PPUSH
25620: CALL_OW 104
// InGameOff ;
25624: CALL_OW 9
// end ; end ;
25628: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25629: LD_VAR 0 1
25633: PUSH
25634: LD_EXP 1
25638: EQUAL
25639: IFFALSE 25648
// YouLost ( JMM ) ;
25641: LD_STRING JMM
25643: PPUSH
25644: CALL_OW 104
// if unit = Khatam then
25648: LD_VAR 0 1
25652: PUSH
25653: LD_EXP 14
25657: EQUAL
25658: IFFALSE 25668
// KhatamStatus = 0 ;
25660: LD_ADDR_EXP 53
25664: PUSH
25665: LD_INT 0
25667: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 255
25677: PUSH
25678: LD_INT 3
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL_OW 247
25691: PUSH
25692: LD_INT 3
25694: EQUAL
25695: AND
25696: IFFALSE 26388
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25698: LD_VAR 0 1
25702: PPUSH
25703: CALL_OW 266
25707: PUSH
25708: LD_INT 31
25710: EQUAL
25711: PUSH
25712: LD_VAR 0 1
25716: PPUSH
25717: CALL_OW 266
25721: PUSH
25722: LD_INT 32
25724: EQUAL
25725: OR
25726: PUSH
25727: LD_VAR 0 1
25731: PPUSH
25732: CALL_OW 266
25736: PUSH
25737: LD_INT 36
25739: EQUAL
25740: OR
25741: PUSH
25742: LD_VAR 0 1
25746: PPUSH
25747: CALL_OW 266
25751: PUSH
25752: LD_INT 0
25754: EQUAL
25755: OR
25756: PUSH
25757: LD_VAR 0 1
25761: PPUSH
25762: CALL_OW 266
25766: PUSH
25767: LD_INT 24
25769: EQUAL
25770: OR
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 266
25781: PUSH
25782: LD_INT 17
25784: EQUAL
25785: OR
25786: PUSH
25787: LD_VAR 0 1
25791: PPUSH
25792: CALL_OW 266
25796: PUSH
25797: LD_INT 25
25799: EQUAL
25800: OR
25801: PUSH
25802: LD_VAR 0 1
25806: PPUSH
25807: CALL_OW 266
25811: PUSH
25812: LD_INT 19
25814: EQUAL
25815: OR
25816: PUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 266
25826: PUSH
25827: LD_INT 20
25829: EQUAL
25830: OR
25831: PUSH
25832: LD_VAR 0 1
25836: PPUSH
25837: CALL_OW 266
25841: PUSH
25842: LD_INT 18
25844: EQUAL
25845: OR
25846: PUSH
25847: LD_VAR 0 1
25851: PPUSH
25852: CALL_OW 266
25856: PUSH
25857: LD_INT 21
25859: EQUAL
25860: OR
25861: PUSH
25862: LD_VAR 0 1
25866: PPUSH
25867: CALL_OW 266
25871: PUSH
25872: LD_INT 23
25874: EQUAL
25875: OR
25876: PUSH
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 266
25886: PUSH
25887: LD_INT 16
25889: EQUAL
25890: OR
25891: PUSH
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 266
25901: PUSH
25902: LD_INT 6
25904: EQUAL
25905: OR
25906: PUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 266
25916: PUSH
25917: LD_INT 29
25919: EQUAL
25920: OR
25921: PUSH
25922: LD_VAR 0 1
25926: PPUSH
25927: CALL_OW 266
25931: PUSH
25932: LD_INT 26
25934: EQUAL
25935: OR
25936: PUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 266
25946: PUSH
25947: LD_INT 30
25949: EQUAL
25950: OR
25951: PUSH
25952: LD_VAR 0 1
25956: PPUSH
25957: CALL_OW 266
25961: PUSH
25962: LD_INT 28
25964: EQUAL
25965: OR
25966: PUSH
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 266
25976: PUSH
25977: LD_INT 27
25979: EQUAL
25980: OR
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 266
25991: PUSH
25992: LD_INT 33
25994: EQUAL
25995: OR
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 266
26006: PUSH
26007: LD_INT 2
26009: EQUAL
26010: OR
26011: PUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 266
26021: PUSH
26022: LD_INT 4
26024: EQUAL
26025: OR
26026: IFFALSE 26112
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26028: LD_ADDR_EXP 42
26032: PUSH
26033: LD_EXP 42
26037: PUSH
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL_OW 266
26047: ADD
26048: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26049: LD_ADDR_EXP 42
26053: PUSH
26054: LD_EXP 42
26058: PUSH
26059: LD_VAR 0 1
26063: PPUSH
26064: CALL_OW 250
26068: ADD
26069: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26070: LD_ADDR_EXP 42
26074: PUSH
26075: LD_EXP 42
26079: PUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL_OW 251
26089: ADD
26090: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26091: LD_ADDR_EXP 42
26095: PUSH
26096: LD_EXP 42
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 254
26110: ADD
26111: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26112: LD_VAR 0 1
26116: PPUSH
26117: CALL_OW 266
26121: PUSH
26122: LD_INT 1
26124: EQUAL
26125: IFFALSE 26204
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26127: LD_ADDR_EXP 42
26131: PUSH
26132: LD_EXP 42
26136: PUSH
26137: LD_INT 0
26139: ADD
26140: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26141: LD_ADDR_EXP 42
26145: PUSH
26146: LD_EXP 42
26150: PUSH
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 250
26160: ADD
26161: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26162: LD_ADDR_EXP 42
26166: PUSH
26167: LD_EXP 42
26171: PUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL_OW 251
26181: ADD
26182: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26183: LD_ADDR_EXP 42
26187: PUSH
26188: LD_EXP 42
26192: PUSH
26193: LD_VAR 0 1
26197: PPUSH
26198: CALL_OW 254
26202: ADD
26203: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 266
26213: PUSH
26214: LD_INT 3
26216: EQUAL
26217: IFFALSE 26296
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26219: LD_ADDR_EXP 42
26223: PUSH
26224: LD_EXP 42
26228: PUSH
26229: LD_INT 2
26231: ADD
26232: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26233: LD_ADDR_EXP 42
26237: PUSH
26238: LD_EXP 42
26242: PUSH
26243: LD_VAR 0 1
26247: PPUSH
26248: CALL_OW 250
26252: ADD
26253: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26254: LD_ADDR_EXP 42
26258: PUSH
26259: LD_EXP 42
26263: PUSH
26264: LD_VAR 0 1
26268: PPUSH
26269: CALL_OW 251
26273: ADD
26274: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26275: LD_ADDR_EXP 42
26279: PUSH
26280: LD_EXP 42
26284: PUSH
26285: LD_VAR 0 1
26289: PPUSH
26290: CALL_OW 254
26294: ADD
26295: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 266
26305: PUSH
26306: LD_INT 5
26308: EQUAL
26309: IFFALSE 26388
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26311: LD_ADDR_EXP 42
26315: PUSH
26316: LD_EXP 42
26320: PUSH
26321: LD_INT 4
26323: ADD
26324: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26325: LD_ADDR_EXP 42
26329: PUSH
26330: LD_EXP 42
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 250
26344: ADD
26345: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26346: LD_ADDR_EXP 42
26350: PUSH
26351: LD_EXP 42
26355: PUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: CALL_OW 251
26365: ADD
26366: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26367: LD_ADDR_EXP 42
26371: PUSH
26372: LD_EXP 42
26376: PUSH
26377: LD_VAR 0 1
26381: PPUSH
26382: CALL_OW 254
26386: ADD
26387: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26388: LD_EXP 51
26392: PUSH
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL_OW 257
26402: PUSH
26403: LD_INT 3
26405: EQUAL
26406: AND
26407: PUSH
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 255
26417: PUSH
26418: LD_INT 3
26420: EQUAL
26421: AND
26422: PUSH
26423: LD_EXP 35
26427: PPUSH
26428: CALL_OW 302
26432: AND
26433: PUSH
26434: LD_EXP 35
26438: PPUSH
26439: CALL_OW 255
26443: PUSH
26444: LD_INT 3
26446: EQUAL
26447: AND
26448: IFFALSE 26532
// begin ruMech := ruMech - 1 ;
26450: LD_ADDR_EXP 51
26454: PUSH
26455: LD_EXP 51
26459: PUSH
26460: LD_INT 1
26462: MINUS
26463: ST_TO_ADDR
// uc_side = 3 ;
26464: LD_ADDR_OWVAR 20
26468: PUSH
26469: LD_INT 3
26471: ST_TO_ADDR
// uc_nation = 3 ;
26472: LD_ADDR_OWVAR 21
26476: PUSH
26477: LD_INT 3
26479: ST_TO_ADDR
// hc_gallery :=  ;
26480: LD_ADDR_OWVAR 33
26484: PUSH
26485: LD_STRING 
26487: ST_TO_ADDR
// hc_name :=  ;
26488: LD_ADDR_OWVAR 26
26492: PUSH
26493: LD_STRING 
26495: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26496: LD_INT 0
26498: PPUSH
26499: LD_EXP 36
26503: PPUSH
26504: LD_EXP 37
26508: PPUSH
26509: CALL_OW 12
26513: PPUSH
26514: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26518: CALL_OW 44
26522: PPUSH
26523: LD_EXP 35
26527: PPUSH
26528: CALL_OW 52
// end ; end ;
26532: PPOPN 1
26534: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26535: LD_ADDR_OWVAR 57
26539: PUSH
26540: LD_INT 0
26542: ST_TO_ADDR
// fastEnd = 1 ;
26543: LD_ADDR_EXP 63
26547: PUSH
26548: LD_INT 1
26550: ST_TO_ADDR
// FinishMission ;
26551: CALL 27711 0 0
// end ;
26555: PPOPN 1
26557: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26558: LD_VAR 0 1
26562: PPUSH
26563: CALL 42851 0 1
// end ; end_of_file
26567: PPOPN 1
26569: END
// export function CreateNature ; var i , un ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26575: LD_ADDR_VAR 0 2
26579: PUSH
26580: DOUBLE
26581: LD_INT 1
26583: DEC
26584: ST_TO_ADDR
26585: LD_OWVAR 67
26589: PUSH
26590: LD_INT 1
26592: PPUSH
26593: LD_INT 5
26595: PPUSH
26596: CALL_OW 12
26600: PLUS
26601: PUSH
26602: FOR_TO
26603: IFFALSE 26748
// begin hc_sex = sex_male ;
26605: LD_ADDR_OWVAR 27
26609: PUSH
26610: LD_INT 1
26612: ST_TO_ADDR
// uc_side = 0 ;
26613: LD_ADDR_OWVAR 20
26617: PUSH
26618: LD_INT 0
26620: ST_TO_ADDR
// uc_nation = nation_nature ;
26621: LD_ADDR_OWVAR 21
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// hc_class = class_apeman ;
26629: LD_ADDR_OWVAR 28
26633: PUSH
26634: LD_INT 12
26636: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26637: LD_ADDR_OWVAR 31
26641: PUSH
26642: LD_INT 2
26644: PPUSH
26645: LD_INT 7
26647: PPUSH
26648: CALL_OW 12
26652: PUSH
26653: LD_OWVAR 67
26657: PLUS
26658: PUSH
26659: LD_INT 2
26661: PPUSH
26662: LD_INT 10
26664: PPUSH
26665: CALL_OW 12
26669: PUSH
26670: LD_INT 2
26672: PPUSH
26673: LD_INT 10
26675: PPUSH
26676: CALL_OW 12
26680: PUSH
26681: LD_INT 2
26683: PPUSH
26684: LD_INT 10
26686: PPUSH
26687: CALL_OW 12
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26698: LD_ADDR_OWVAR 35
26702: PUSH
26703: LD_INT 5
26705: NEG
26706: PPUSH
26707: LD_INT 5
26709: PPUSH
26710: CALL_OW 12
26714: PUSH
26715: LD_OWVAR 67
26719: MUL
26720: ST_TO_ADDR
// un = CreateHuman ;
26721: LD_ADDR_VAR 0 3
26725: PUSH
26726: CALL_OW 44
26730: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26731: LD_VAR 0 3
26735: PPUSH
26736: LD_INT 5
26738: PPUSH
26739: LD_INT 0
26741: PPUSH
26742: CALL_OW 49
// end ;
26746: GO 26602
26748: POP
26749: POP
// for i = 1 to Difficulty + 2 do
26750: LD_ADDR_VAR 0 2
26754: PUSH
26755: DOUBLE
26756: LD_INT 1
26758: DEC
26759: ST_TO_ADDR
26760: LD_OWVAR 67
26764: PUSH
26765: LD_INT 2
26767: PLUS
26768: PUSH
26769: FOR_TO
26770: IFFALSE 26879
// begin hc_sex = sex_male ;
26772: LD_ADDR_OWVAR 27
26776: PUSH
26777: LD_INT 1
26779: ST_TO_ADDR
// uc_side = 0 ;
26780: LD_ADDR_OWVAR 20
26784: PUSH
26785: LD_INT 0
26787: ST_TO_ADDR
// uc_nation = nation_nature ;
26788: LD_ADDR_OWVAR 21
26792: PUSH
26793: LD_INT 0
26795: ST_TO_ADDR
// hc_class = class_tiger ;
26796: LD_ADDR_OWVAR 28
26800: PUSH
26801: LD_INT 14
26803: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26804: LD_ADDR_OWVAR 31
26808: PUSH
26809: LD_EXP 37
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26829: LD_ADDR_OWVAR 35
26833: PUSH
26834: LD_INT 5
26836: NEG
26837: PPUSH
26838: LD_INT 5
26840: PPUSH
26841: CALL_OW 12
26845: PUSH
26846: LD_OWVAR 67
26850: MUL
26851: ST_TO_ADDR
// un = CreateHuman ;
26852: LD_ADDR_VAR 0 3
26856: PUSH
26857: CALL_OW 44
26861: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26862: LD_VAR 0 3
26866: PPUSH
26867: LD_INT 6
26869: PPUSH
26870: LD_INT 0
26872: PPUSH
26873: CALL_OW 49
// end ;
26877: GO 26769
26879: POP
26880: POP
// for i = 1 to rand ( 3 , 4 ) do
26881: LD_ADDR_VAR 0 2
26885: PUSH
26886: DOUBLE
26887: LD_INT 1
26889: DEC
26890: ST_TO_ADDR
26891: LD_INT 3
26893: PPUSH
26894: LD_INT 4
26896: PPUSH
26897: CALL_OW 12
26901: PUSH
26902: FOR_TO
26903: IFFALSE 26997
// begin hc_sex = sex_male ;
26905: LD_ADDR_OWVAR 27
26909: PUSH
26910: LD_INT 1
26912: ST_TO_ADDR
// uc_side = 0 ;
26913: LD_ADDR_OWVAR 20
26917: PUSH
26918: LD_INT 0
26920: ST_TO_ADDR
// uc_nation = nation_nature ;
26921: LD_ADDR_OWVAR 21
26925: PUSH
26926: LD_INT 0
26928: ST_TO_ADDR
// hc_class = 18 ;
26929: LD_ADDR_OWVAR 28
26933: PUSH
26934: LD_INT 18
26936: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26937: LD_ADDR_OWVAR 31
26941: PUSH
26942: LD_EXP 37
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: ST_TO_ADDR
// hc_agressivity = 0 ;
26962: LD_ADDR_OWVAR 35
26966: PUSH
26967: LD_INT 0
26969: ST_TO_ADDR
// un = CreateHuman ;
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: CALL_OW 44
26979: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26980: LD_VAR 0 3
26984: PPUSH
26985: LD_INT 6
26987: PPUSH
26988: LD_INT 0
26990: PPUSH
26991: CALL_OW 49
// end ;
26995: GO 26902
26997: POP
26998: POP
// end ; end_of_file
26999: LD_VAR 0 1
27003: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27004: LD_EXP 46
27008: PUSH
27009: LD_INT 1
27011: EQUAL
27012: IFFALSE 27096
27014: GO 27016
27016: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27017: LD_INT 7
27019: PPUSH
27020: LD_INT 5
27022: PPUSH
27023: LD_INT 4
27025: PUSH
27026: LD_INT 5
27028: PUSH
27029: LD_INT 6
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: PUSH
27037: LD_OWVAR 67
27041: ARRAY
27042: PPUSH
27043: LD_EXP 36
27047: PPUSH
27048: LD_EXP 37
27052: PPUSH
27053: CALL_OW 12
27057: PPUSH
27058: LD_INT 2
27060: PPUSH
27061: LD_INT 1
27063: PPUSH
27064: LD_INT 1
27066: PPUSH
27067: EMPTY
27068: PPUSH
27069: LD_INT 25
27071: PUSH
27072: LD_INT 26
27074: PUSH
27075: LD_INT 27
27077: PUSH
27078: LD_INT 28
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: PPUSH
27087: EMPTY
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: CALL 17015 0 11
27096: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27097: LD_EXP 46
27101: PUSH
27102: LD_INT 1
27104: EQUAL
27105: IFFALSE 27193
27107: GO 27109
27109: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27110: LD_INT 5
27112: PPUSH
27113: LD_INT 2
27115: PPUSH
27116: LD_INT 5
27118: PUSH
27119: LD_INT 6
27121: PUSH
27122: LD_INT 8
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: LIST
27129: PUSH
27130: LD_OWVAR 67
27134: ARRAY
27135: PPUSH
27136: LD_INT 0
27138: PPUSH
27139: LD_INT 0
27141: PPUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 4
27147: PUSH
27148: LD_INT 5
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_OWVAR 67
27160: ARRAY
27161: PPUSH
27162: LD_INT 0
27164: PPUSH
27165: LD_EXP 36
27169: PPUSH
27170: LD_EXP 37
27174: PPUSH
27175: CALL_OW 12
27179: PPUSH
27180: LD_INT 7
27182: PPUSH
27183: LD_INT 9
27185: PPUSH
27186: LD_INT 1
27188: PPUSH
27189: CALL 18719 0 11
27193: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27194: LD_EXP 46
27198: PUSH
27199: LD_INT 1
27201: EQUAL
27202: IFFALSE 27211
27204: GO 27206
27206: DISABLE
// PrepareArabianSheik ;
27207: CALL 4608 0 0
27211: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27212: LD_EXP 29
27216: PUSH
27217: LD_EXP 64
27221: PUSH
27222: LD_INT 1
27224: EQUAL
27225: AND
27226: IFFALSE 27295
27228: GO 27230
27230: DISABLE
// begin enable ;
27231: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27232: LD_INT 6
27234: PPUSH
27235: LD_INT 3
27237: PPUSH
27238: LD_EXP 60
27242: PPUSH
27243: LD_INT 0
27245: PPUSH
27246: LD_OWVAR 67
27250: PPUSH
27251: LD_INT 0
27253: PPUSH
27254: LD_EXP 60
27258: PUSH
27259: LD_INT 3
27261: DIV
27262: PUSH
27263: LD_INT 1
27265: PLUS
27266: PPUSH
27267: LD_EXP 36
27271: PPUSH
27272: LD_EXP 37
27276: PPUSH
27277: CALL_OW 12
27281: PPUSH
27282: LD_INT 17
27284: PPUSH
27285: LD_INT 18
27287: PPUSH
27288: LD_INT 1
27290: PPUSH
27291: CALL 18719 0 11
// end ;
27295: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27296: LD_EXP 29
27300: PUSH
27301: LD_EXP 64
27305: PUSH
27306: LD_INT 1
27308: EQUAL
27309: AND
27310: IFFALSE 27387
27312: GO 27314
27314: DISABLE
// begin enable ;
27315: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27316: LD_INT 17
27318: PPUSH
27319: LD_INT 6
27321: PPUSH
27322: LD_EXP 59
27326: PPUSH
27327: LD_EXP 36
27331: PPUSH
27332: LD_EXP 37
27336: PPUSH
27337: CALL_OW 12
27341: PPUSH
27342: LD_INT 3
27344: PPUSH
27345: LD_INT 1
27347: PPUSH
27348: LD_INT 3
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PPUSH
27358: LD_INT 43
27360: PUSH
27361: LD_INT 44
27363: PUSH
27364: LD_INT 45
27366: PUSH
27367: LD_INT 46
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: PPUSH
27376: EMPTY
27377: PPUSH
27378: EMPTY
27379: PPUSH
27380: LD_INT 1
27382: PPUSH
27383: CALL 17015 0 11
// end ;
27387: END
// every 10 10$00 trigger joinEpsilon do
27388: LD_EXP 29
27392: IFFALSE 27446
27394: GO 27396
27396: DISABLE
// begin enable ;
27397: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27398: LD_ADDR_EXP 59
27402: PUSH
27403: LD_EXP 59
27407: PUSH
27408: LD_INT 1
27410: PPUSH
27411: LD_OWVAR 67
27415: PPUSH
27416: CALL_OW 12
27420: PLUS
27421: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27422: LD_ADDR_EXP 60
27426: PUSH
27427: LD_EXP 60
27431: PUSH
27432: LD_INT 1
27434: PPUSH
27435: LD_OWVAR 67
27439: PPUSH
27440: CALL_OW 12
27444: PLUS
27445: ST_TO_ADDR
// end ;
27446: END
// every 21 21$0 trigger attackAvalaible = 1 do
27447: LD_EXP 64
27451: PUSH
27452: LD_INT 1
27454: EQUAL
27455: IFFALSE 27468
27457: GO 27459
27459: DISABLE
// attackAvalaible = 0 ; end_of_file
27460: LD_ADDR_EXP 64
27464: PUSH
27465: LD_INT 0
27467: ST_TO_ADDR
27468: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27469: LD_INT 54
27471: PPUSH
27472: LD_INT 1
27474: PPUSH
27475: CALL_OW 321
27479: PUSH
27480: LD_INT 2
27482: EQUAL
27483: PUSH
27484: LD_INT 55
27486: PPUSH
27487: LD_INT 1
27489: PPUSH
27490: CALL_OW 321
27494: PUSH
27495: LD_INT 2
27497: EQUAL
27498: AND
27499: PUSH
27500: LD_INT 21
27502: PPUSH
27503: LD_INT 1
27505: PPUSH
27506: CALL_OW 321
27510: PUSH
27511: LD_INT 2
27513: EQUAL
27514: AND
27515: PUSH
27516: LD_INT 22
27518: PPUSH
27519: LD_INT 1
27521: PPUSH
27522: CALL_OW 321
27526: PUSH
27527: LD_INT 2
27529: EQUAL
27530: AND
27531: PUSH
27532: LD_INT 12
27534: PPUSH
27535: LD_INT 1
27537: PPUSH
27538: CALL_OW 321
27542: PUSH
27543: LD_INT 1
27545: EQUAL
27546: PUSH
27547: LD_INT 32
27549: PPUSH
27550: LD_INT 1
27552: PPUSH
27553: CALL_OW 321
27557: PUSH
27558: LD_INT 1
27560: EQUAL
27561: OR
27562: PUSH
27563: EMPTY
27564: LIST
27565: AND
27566: PUSH
27567: LD_EXP 48
27571: PUSH
27572: LD_INT 1
27574: EQUAL
27575: AND
27576: PUSH
27577: LD_INT 22
27579: PUSH
27580: LD_INT 3
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 21
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: PUSH
27606: LD_INT 0
27608: EQUAL
27609: AND
27610: IFFALSE 27666
27612: GO 27614
27614: DISABLE
// begin case query ( QEndMission ) of 1 :
27615: LD_STRING QEndMission
27617: PPUSH
27618: CALL_OW 97
27622: PUSH
27623: LD_INT 1
27625: DOUBLE
27626: EQUAL
27627: IFTRUE 27631
27629: GO 27642
27631: POP
// begin end_the_mission_allowed = true ;
27632: LD_ADDR_OWVAR 57
27636: PUSH
27637: LD_INT 1
27639: ST_TO_ADDR
// end ; 2 :
27640: GO 27666
27642: LD_INT 2
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27665
27650: POP
// begin fastEnd = 1 ;
27651: LD_ADDR_EXP 63
27655: PUSH
27656: LD_INT 1
27658: ST_TO_ADDR
// FinishMission ;
27659: CALL 27711 0 0
// end ; end ;
27663: GO 27666
27665: POP
// end ;
27666: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27667: LD_EXP 58
27671: PUSH
27672: LD_EXP 57
27676: NOT
27677: AND
27678: PUSH
27679: LD_INT 22
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PPUSH
27689: CALL_OW 69
27693: PUSH
27694: LD_INT 0
27696: EQUAL
27697: AND
27698: IFFALSE 27710
27700: GO 27702
27702: DISABLE
// SetAchievement ( ACH_TACT ) ;
27703: LD_STRING ACH_TACT
27705: PPUSH
27706: CALL_OW 543
27710: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
// if not snipersTrained then
27717: LD_EXP 62
27721: NOT
27722: IFFALSE 27731
// SetAchievement ( ACH_SNIPER ) ;
27724: LD_STRING ACH_SNIPER
27726: PPUSH
27727: CALL_OW 543
// m1 := false ;
27731: LD_ADDR_VAR 0 2
27735: PUSH
27736: LD_INT 0
27738: ST_TO_ADDR
// m2 := false ;
27739: LD_ADDR_VAR 0 3
27743: PUSH
27744: LD_INT 0
27746: ST_TO_ADDR
// m3 := false ;
27747: LD_ADDR_VAR 0 4
27751: PUSH
27752: LD_INT 0
27754: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27755: LD_EXP 53
27759: PPUSH
27760: LD_STRING 10_KhatamStatus_1
27762: PPUSH
27763: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27767: LD_EXP 52
27771: PPUSH
27772: LD_STRING 10_GensherEscape_1
27774: PPUSH
27775: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27779: LD_INT 12
27781: PPUSH
27782: LD_INT 1
27784: PPUSH
27785: CALL_OW 321
27789: PUSH
27790: LD_INT 2
27792: EQUAL
27793: IFFALSE 27815
// begin AddMedal ( sights , 1 ) ;
27795: LD_STRING sights
27797: PPUSH
27798: LD_INT 1
27800: PPUSH
27801: CALL_OW 101
// m1 := true ;
27805: LD_ADDR_VAR 0 2
27809: PUSH
27810: LD_INT 1
27812: ST_TO_ADDR
// end else
27813: GO 27826
// begin AddMedal ( sights , - 1 ) ;
27815: LD_STRING sights
27817: PPUSH
27818: LD_INT 1
27820: NEG
27821: PPUSH
27822: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
27826: LD_INT 32
27828: PPUSH
27829: LD_INT 1
27831: PPUSH
27832: CALL_OW 321
27836: PUSH
27837: LD_INT 2
27839: EQUAL
27840: IFFALSE 27862
// begin AddMedal ( computers , 1 ) ;
27842: LD_STRING computers
27844: PPUSH
27845: LD_INT 1
27847: PPUSH
27848: CALL_OW 101
// m2 := true ;
27852: LD_ADDR_VAR 0 3
27856: PUSH
27857: LD_INT 1
27859: ST_TO_ADDR
// end else
27860: GO 27873
// begin AddMedal ( computers , - 1 ) ;
27862: LD_STRING computers
27864: PPUSH
27865: LD_INT 1
27867: NEG
27868: PPUSH
27869: CALL_OW 101
// end ; if arabianEscape = 0 then
27873: LD_EXP 47
27877: PUSH
27878: LD_INT 0
27880: EQUAL
27881: IFFALSE 27913
// begin AddMedal ( renegades , 2 ) ;
27883: LD_STRING renegades
27885: PPUSH
27886: LD_INT 2
27888: PPUSH
27889: CALL_OW 101
// m3 := true ;
27893: LD_ADDR_VAR 0 4
27897: PUSH
27898: LD_INT 1
27900: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
27901: LD_INT 0
27903: PPUSH
27904: LD_STRING 10_ScientistsEscape_1
27906: PPUSH
27907: CALL_OW 39
// end else
27911: GO 27924
// begin AddMedal ( renegades , - 1 ) ;
27913: LD_STRING renegades
27915: PPUSH
27916: LD_INT 1
27918: NEG
27919: PPUSH
27920: CALL_OW 101
// end ; SaveEpsilonBase ;
27924: CALL 28710 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
27928: LD_VAR 0 2
27932: PUSH
27933: LD_VAR 0 3
27937: AND
27938: PUSH
27939: LD_VAR 0 4
27943: AND
27944: PUSH
27945: LD_OWVAR 67
27949: PUSH
27950: LD_INT 3
27952: EQUAL
27953: AND
27954: IFFALSE 27966
// SetAchievementEX ( ACH_AMER , 10 ) ;
27956: LD_STRING ACH_AMER
27958: PPUSH
27959: LD_INT 10
27961: PPUSH
27962: CALL_OW 564
// if tick <= 40 40$00 then
27966: LD_OWVAR 1
27970: PUSH
27971: LD_INT 84000
27973: LESSEQUAL
27974: IFFALSE 27990
// begin wait ( 3 ) ;
27976: LD_INT 3
27978: PPUSH
27979: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
27983: LD_STRING ACH_ASPEED_10
27985: PPUSH
27986: CALL_OW 543
// end ; GiveMedals ( Main ) ;
27990: LD_STRING Main
27992: PPUSH
27993: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
27997: LD_INT 22
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 23
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 21
28019: PUSH
28020: LD_INT 1
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: LD_INT 25
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 25
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 25
28052: PUSH
28053: LD_INT 3
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 25
28062: PUSH
28063: LD_INT 4
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 25
28072: PUSH
28073: LD_INT 5
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 25
28082: PUSH
28083: LD_INT 8
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: PPUSH
28105: CALL_OW 69
28109: PPUSH
28110: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28114: LD_EXP 1
28118: PPUSH
28119: LD_EXP 54
28123: PUSH
28124: LD_STRING JMM
28126: STR
28127: PPUSH
28128: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28132: LD_EXP 2
28136: PPUSH
28137: LD_EXP 54
28141: PUSH
28142: LD_STRING Brown
28144: STR
28145: PPUSH
28146: CALL 11199 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28150: LD_EXP 3
28154: PPUSH
28155: LD_EXP 54
28159: PUSH
28160: LD_STRING Donaldson
28162: STR
28163: PPUSH
28164: CALL 11199 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28168: LD_EXP 4
28172: PPUSH
28173: LD_EXP 54
28177: PUSH
28178: LD_STRING Bobby
28180: STR
28181: PPUSH
28182: CALL 11199 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28186: LD_EXP 5
28190: PPUSH
28191: LD_EXP 54
28195: PUSH
28196: LD_STRING Cyrus
28198: STR
28199: PPUSH
28200: CALL 11199 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28204: LD_EXP 6
28208: PPUSH
28209: LD_EXP 54
28213: PUSH
28214: LD_STRING Lisa
28216: STR
28217: PPUSH
28218: CALL 11199 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28222: LD_EXP 7
28226: PPUSH
28227: LD_EXP 54
28231: PUSH
28232: LD_STRING Frank
28234: STR
28235: PPUSH
28236: CALL 11199 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28240: LD_EXP 8
28244: PPUSH
28245: LD_EXP 54
28249: PUSH
28250: LD_STRING Kikuchi
28252: STR
28253: PPUSH
28254: CALL 11199 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28258: LD_EXP 9
28262: PPUSH
28263: LD_EXP 54
28267: PUSH
28268: LD_STRING Houten
28270: STR
28271: PPUSH
28272: CALL 11199 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28276: LD_EXP 10
28280: PPUSH
28281: LD_EXP 54
28285: PUSH
28286: LD_STRING Gary
28288: STR
28289: PPUSH
28290: CALL 11199 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28294: LD_EXP 19
28298: PPUSH
28299: LD_EXP 54
28303: PUSH
28304: LD_STRING Cornell
28306: STR
28307: PPUSH
28308: CALL 11199 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28312: LD_EXP 11
28316: PPUSH
28317: LD_EXP 54
28321: PUSH
28322: LD_STRING Simms
28324: STR
28325: PPUSH
28326: CALL 11199 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28330: LD_EXP 12
28334: PPUSH
28335: LD_EXP 54
28339: PUSH
28340: LD_STRING Denis
28342: STR
28343: PPUSH
28344: CALL 11199 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28348: LD_EXP 13
28352: PPUSH
28353: LD_EXP 54
28357: PUSH
28358: LD_STRING Joan
28360: STR
28361: PPUSH
28362: CALL 11199 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28366: LD_EXP 15
28370: PPUSH
28371: LD_EXP 54
28375: PUSH
28376: LD_STRING Gladstone
28378: STR
28379: PPUSH
28380: CALL 11199 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28384: LD_EXP 17
28388: PPUSH
28389: LD_EXP 54
28393: PUSH
28394: LD_STRING DeltaDoctor
28396: STR
28397: PPUSH
28398: CALL 11199 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28402: LD_EXP 22
28406: PPUSH
28407: LD_STRING 10c_lock
28409: PPUSH
28410: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28414: LD_INT 50
28416: PUSH
28417: EMPTY
28418: LIST
28419: PUSH
28420: LD_INT 22
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 21
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 25
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 25
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 25
28465: PUSH
28466: LD_INT 3
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 25
28475: PUSH
28476: LD_INT 4
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 25
28485: PUSH
28486: LD_INT 5
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 25
28495: PUSH
28496: LD_INT 8
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: PPUSH
28518: CALL_OW 69
28522: PUSH
28523: LD_EXP 1
28527: PUSH
28528: LD_EXP 2
28532: PUSH
28533: LD_EXP 3
28537: PUSH
28538: LD_EXP 4
28542: PUSH
28543: LD_EXP 5
28547: PUSH
28548: LD_EXP 6
28552: PUSH
28553: LD_EXP 7
28557: PUSH
28558: LD_EXP 15
28562: PUSH
28563: LD_EXP 8
28567: PUSH
28568: LD_EXP 12
28572: PUSH
28573: LD_EXP 13
28577: PUSH
28578: LD_EXP 9
28582: PUSH
28583: LD_EXP 11
28587: PUSH
28588: LD_EXP 10
28592: PUSH
28593: LD_EXP 17
28597: PUSH
28598: LD_EXP 19
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: DIFF
28621: PPUSH
28622: LD_STRING 10_other_survivors
28624: PPUSH
28625: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28629: LD_INT 50
28631: PUSH
28632: EMPTY
28633: LIST
28634: PUSH
28635: LD_INT 22
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 21
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 25
28660: PUSH
28661: LD_INT 16
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 25
28670: PUSH
28671: LD_INT 12
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: PPUSH
28694: LD_STRING 10_ape
28696: PPUSH
28697: CALL_OW 38
// YouWin ;
28701: CALL_OW 103
// end ;
28705: LD_VAR 0 1
28709: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28710: LD_INT 0
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
// epsilonBase = [ ] ;
28716: LD_ADDR_VAR 0 2
28720: PUSH
28721: EMPTY
28722: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28723: LD_ADDR_VAR 0 3
28727: PUSH
28728: LD_INT 22
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 21
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 50
28750: PUSH
28751: EMPTY
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: PPUSH
28759: CALL_OW 69
28763: ST_TO_ADDR
// for i in buildings do
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: LD_VAR 0 3
28773: PUSH
28774: FOR_IN
28775: IFFALSE 29227
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28777: LD_VAR 0 4
28781: PPUSH
28782: CALL_OW 266
28786: PUSH
28787: LD_INT 6
28789: PUSH
28790: LD_INT 7
28792: PUSH
28793: LD_INT 8
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: IN
28801: IFFALSE 28915
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28803: LD_ADDR_VAR 0 2
28807: PUSH
28808: LD_VAR 0 2
28812: PUSH
28813: LD_VAR 0 4
28817: PPUSH
28818: CALL_OW 266
28822: PUSH
28823: LD_VAR 0 4
28827: PPUSH
28828: CALL_OW 250
28832: PUSH
28833: LD_VAR 0 4
28837: PPUSH
28838: CALL_OW 251
28842: PUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: CALL_OW 254
28852: PUSH
28853: LD_VAR 0 4
28857: PPUSH
28858: CALL_OW 267
28862: PUSH
28863: LD_VAR 0 4
28867: PPUSH
28868: CALL_OW 248
28872: PUSH
28873: LD_VAR 0 4
28877: PPUSH
28878: LD_INT 1
28880: PPUSH
28881: CALL_OW 268
28885: PUSH
28886: LD_VAR 0 4
28890: PPUSH
28891: LD_INT 2
28893: PPUSH
28894: CALL_OW 268
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: ADD
28912: ST_TO_ADDR
28913: GO 29225
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
28915: LD_VAR 0 4
28919: PPUSH
28920: CALL_OW 266
28924: PUSH
28925: LD_INT 32
28927: EQUAL
28928: PUSH
28929: LD_VAR 0 4
28933: PPUSH
28934: CALL_OW 266
28938: PUSH
28939: LD_INT 33
28941: EQUAL
28942: OR
28943: IFFALSE 29040
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
28945: LD_ADDR_VAR 0 2
28949: PUSH
28950: LD_VAR 0 2
28954: PUSH
28955: LD_VAR 0 4
28959: PPUSH
28960: CALL_OW 266
28964: PUSH
28965: LD_VAR 0 4
28969: PPUSH
28970: CALL_OW 250
28974: PUSH
28975: LD_VAR 0 4
28979: PPUSH
28980: CALL_OW 251
28984: PUSH
28985: LD_VAR 0 4
28989: PPUSH
28990: CALL_OW 254
28994: PUSH
28995: LD_VAR 0 4
28999: PPUSH
29000: CALL_OW 267
29004: PUSH
29005: LD_VAR 0 4
29009: PPUSH
29010: CALL_OW 248
29014: PUSH
29015: LD_VAR 0 4
29019: PPUSH
29020: CALL_OW 269
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: ADD
29037: ST_TO_ADDR
29038: GO 29225
// if GetBType ( i ) = b_factory then
29040: LD_VAR 0 4
29044: PPUSH
29045: CALL_OW 266
29049: PUSH
29050: LD_INT 3
29052: EQUAL
29053: IFFALSE 29143
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_VAR 0 2
29064: PPUSH
29065: LD_INT 1
29067: PPUSH
29068: LD_VAR 0 4
29072: PPUSH
29073: CALL_OW 266
29077: PUSH
29078: LD_VAR 0 4
29082: PPUSH
29083: CALL_OW 250
29087: PUSH
29088: LD_VAR 0 4
29092: PPUSH
29093: CALL_OW 251
29097: PUSH
29098: LD_VAR 0 4
29102: PPUSH
29103: CALL_OW 254
29107: PUSH
29108: LD_VAR 0 4
29112: PPUSH
29113: CALL_OW 267
29117: PUSH
29118: LD_VAR 0 4
29122: PPUSH
29123: CALL_OW 248
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: PPUSH
29136: CALL_OW 2
29140: ST_TO_ADDR
29141: GO 29225
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29143: LD_ADDR_VAR 0 2
29147: PUSH
29148: LD_VAR 0 2
29152: PUSH
29153: LD_VAR 0 4
29157: PPUSH
29158: CALL_OW 266
29162: PUSH
29163: LD_VAR 0 4
29167: PPUSH
29168: CALL_OW 250
29172: PUSH
29173: LD_VAR 0 4
29177: PPUSH
29178: CALL_OW 251
29182: PUSH
29183: LD_VAR 0 4
29187: PPUSH
29188: CALL_OW 254
29192: PUSH
29193: LD_VAR 0 4
29197: PPUSH
29198: CALL_OW 267
29202: PUSH
29203: LD_VAR 0 4
29207: PPUSH
29208: CALL_OW 248
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: ADD
29224: ST_TO_ADDR
// end ;
29225: GO 28774
29227: POP
29228: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_STRING 10_EpsilonBase
29236: PPUSH
29237: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29241: LD_INT 19
29243: PPUSH
29244: LD_STRING 10_EpsilonEnv
29246: PPUSH
29247: CALL 29256 0 2
// end ;
29251: LD_VAR 0 1
29255: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29256: LD_INT 0
29258: PPUSH
// result := ListEnvironmentArea ( area ) ;
29259: LD_ADDR_VAR 0 3
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 353
29273: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29274: LD_VAR 0 3
29278: PPUSH
29279: LD_VAR 0 2
29283: PPUSH
29284: CALL_OW 39
// end ; end_of_file
29288: LD_VAR 0 3
29292: RET
// every 0 0$01 do var timer ;
29293: GO 29295
29295: DISABLE
29296: LD_INT 0
29298: PPUSH
// begin timer := 0 0$30 ;
29299: LD_ADDR_VAR 0 1
29303: PUSH
29304: LD_INT 1050
29306: ST_TO_ADDR
// repeat wait ( timer ) ;
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
29316: LD_EXP 56
29320: PUSH
29321: LD_INT 6
29323: GREATEREQUAL
29324: PUSH
29325: LD_EXP 56
29329: PUSH
29330: LD_INT 12
29332: LESS
29333: AND
29334: IFFALSE 29350
// timer := timer + 0 0$3 ;
29336: LD_ADDR_VAR 0 1
29340: PUSH
29341: LD_VAR 0 1
29345: PUSH
29346: LD_INT 105
29348: PLUS
29349: ST_TO_ADDR
// if cratesSpawned >= 12 then
29350: LD_EXP 56
29354: PUSH
29355: LD_INT 12
29357: GREATEREQUAL
29358: IFFALSE 29374
// timer := timer + 0 0$9 ;
29360: LD_ADDR_VAR 0 1
29364: PUSH
29365: LD_VAR 0 1
29369: PUSH
29370: LD_INT 315
29372: PLUS
29373: ST_TO_ADDR
// if timer > 3 3$00 then
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 6300
29381: GREATER
29382: IFFALSE 29392
// timer := 0 0$50 ;
29384: LD_ADDR_VAR 0 1
29388: PUSH
29389: LD_INT 1750
29391: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29392: LD_INT 1
29394: PPUSH
29395: LD_INT 5
29397: PPUSH
29398: CALL_OW 12
29402: PPUSH
29403: LD_INT 16
29405: PPUSH
29406: LD_INT 1
29408: PPUSH
29409: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29413: LD_ADDR_EXP 56
29417: PUSH
29418: LD_EXP 56
29422: PUSH
29423: LD_INT 1
29425: PLUS
29426: ST_TO_ADDR
// until false ;
29427: LD_INT 0
29429: IFFALSE 29307
// end ; end_of_file
29431: PPOPN 1
29433: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
29434: LD_INT 0
29436: PPUSH
// ar_miner := 81 ;
29437: LD_ADDR_EXP 76
29441: PUSH
29442: LD_INT 81
29444: ST_TO_ADDR
// ar_crane := 88 ;
29445: LD_ADDR_EXP 75
29449: PUSH
29450: LD_INT 88
29452: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29453: LD_ADDR_EXP 70
29457: PUSH
29458: LD_INT 89
29460: ST_TO_ADDR
// us_hack := 99 ;
29461: LD_ADDR_EXP 71
29465: PUSH
29466: LD_INT 99
29468: ST_TO_ADDR
// us_artillery := 97 ;
29469: LD_ADDR_EXP 72
29473: PUSH
29474: LD_INT 97
29476: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29477: LD_ADDR_EXP 73
29481: PUSH
29482: LD_INT 91
29484: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29485: LD_ADDR_EXP 74
29489: PUSH
29490: LD_INT 92
29492: ST_TO_ADDR
// ru_radar := 98 ;
29493: LD_ADDR_EXP 69
29497: PUSH
29498: LD_INT 98
29500: ST_TO_ADDR
// tech_Artillery := 80 ;
29501: LD_ADDR_EXP 77
29505: PUSH
29506: LD_INT 80
29508: ST_TO_ADDR
// tech_RadMat := 81 ;
29509: LD_ADDR_EXP 78
29513: PUSH
29514: LD_INT 81
29516: ST_TO_ADDR
// tech_BasicTools := 82 ;
29517: LD_ADDR_EXP 79
29521: PUSH
29522: LD_INT 82
29524: ST_TO_ADDR
// tech_Cargo := 83 ;
29525: LD_ADDR_EXP 80
29529: PUSH
29530: LD_INT 83
29532: ST_TO_ADDR
// tech_Track := 84 ;
29533: LD_ADDR_EXP 81
29537: PUSH
29538: LD_INT 84
29540: ST_TO_ADDR
// tech_Crane := 85 ;
29541: LD_ADDR_EXP 82
29545: PUSH
29546: LD_INT 85
29548: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29549: LD_ADDR_EXP 83
29553: PUSH
29554: LD_INT 86
29556: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29557: LD_ADDR_EXP 84
29561: PUSH
29562: LD_INT 87
29564: ST_TO_ADDR
// end ;
29565: LD_VAR 0 1
29569: RET
// every 1 do
29570: GO 29572
29572: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29573: CALL 29434 0 0
29577: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
29578: LD_VAR 0 2
29582: PUSH
29583: LD_INT 100
29585: EQUAL
29586: IFFALSE 30535
// begin if not StreamModeActive then
29588: LD_EXP 85
29592: NOT
29593: IFFALSE 29603
// StreamModeActive := true ;
29595: LD_ADDR_EXP 85
29599: PUSH
29600: LD_INT 1
29602: ST_TO_ADDR
// if p3 = 0 then
29603: LD_VAR 0 3
29607: PUSH
29608: LD_INT 0
29610: EQUAL
29611: IFFALSE 29617
// InitStreamMode ;
29613: CALL 30693 0 0
// if p3 = 1 then
29617: LD_VAR 0 3
29621: PUSH
29622: LD_INT 1
29624: EQUAL
29625: IFFALSE 29635
// sRocket := true ;
29627: LD_ADDR_EXP 90
29631: PUSH
29632: LD_INT 1
29634: ST_TO_ADDR
// if p3 = 2 then
29635: LD_VAR 0 3
29639: PUSH
29640: LD_INT 2
29642: EQUAL
29643: IFFALSE 29653
// sSpeed := true ;
29645: LD_ADDR_EXP 89
29649: PUSH
29650: LD_INT 1
29652: ST_TO_ADDR
// if p3 = 3 then
29653: LD_VAR 0 3
29657: PUSH
29658: LD_INT 3
29660: EQUAL
29661: IFFALSE 29671
// sEngine := true ;
29663: LD_ADDR_EXP 91
29667: PUSH
29668: LD_INT 1
29670: ST_TO_ADDR
// if p3 = 4 then
29671: LD_VAR 0 3
29675: PUSH
29676: LD_INT 4
29678: EQUAL
29679: IFFALSE 29689
// sSpec := true ;
29681: LD_ADDR_EXP 88
29685: PUSH
29686: LD_INT 1
29688: ST_TO_ADDR
// if p3 = 5 then
29689: LD_VAR 0 3
29693: PUSH
29694: LD_INT 5
29696: EQUAL
29697: IFFALSE 29707
// sLevel := true ;
29699: LD_ADDR_EXP 92
29703: PUSH
29704: LD_INT 1
29706: ST_TO_ADDR
// if p3 = 6 then
29707: LD_VAR 0 3
29711: PUSH
29712: LD_INT 6
29714: EQUAL
29715: IFFALSE 29725
// sArmoury := true ;
29717: LD_ADDR_EXP 93
29721: PUSH
29722: LD_INT 1
29724: ST_TO_ADDR
// if p3 = 7 then
29725: LD_VAR 0 3
29729: PUSH
29730: LD_INT 7
29732: EQUAL
29733: IFFALSE 29743
// sRadar := true ;
29735: LD_ADDR_EXP 94
29739: PUSH
29740: LD_INT 1
29742: ST_TO_ADDR
// if p3 = 8 then
29743: LD_VAR 0 3
29747: PUSH
29748: LD_INT 8
29750: EQUAL
29751: IFFALSE 29761
// sBunker := true ;
29753: LD_ADDR_EXP 95
29757: PUSH
29758: LD_INT 1
29760: ST_TO_ADDR
// if p3 = 9 then
29761: LD_VAR 0 3
29765: PUSH
29766: LD_INT 9
29768: EQUAL
29769: IFFALSE 29779
// sHack := true ;
29771: LD_ADDR_EXP 96
29775: PUSH
29776: LD_INT 1
29778: ST_TO_ADDR
// if p3 = 10 then
29779: LD_VAR 0 3
29783: PUSH
29784: LD_INT 10
29786: EQUAL
29787: IFFALSE 29797
// sFire := true ;
29789: LD_ADDR_EXP 97
29793: PUSH
29794: LD_INT 1
29796: ST_TO_ADDR
// if p3 = 11 then
29797: LD_VAR 0 3
29801: PUSH
29802: LD_INT 11
29804: EQUAL
29805: IFFALSE 29815
// sRefresh := true ;
29807: LD_ADDR_EXP 98
29811: PUSH
29812: LD_INT 1
29814: ST_TO_ADDR
// if p3 = 12 then
29815: LD_VAR 0 3
29819: PUSH
29820: LD_INT 12
29822: EQUAL
29823: IFFALSE 29833
// sExp := true ;
29825: LD_ADDR_EXP 99
29829: PUSH
29830: LD_INT 1
29832: ST_TO_ADDR
// if p3 = 13 then
29833: LD_VAR 0 3
29837: PUSH
29838: LD_INT 13
29840: EQUAL
29841: IFFALSE 29851
// sDepot := true ;
29843: LD_ADDR_EXP 100
29847: PUSH
29848: LD_INT 1
29850: ST_TO_ADDR
// if p3 = 14 then
29851: LD_VAR 0 3
29855: PUSH
29856: LD_INT 14
29858: EQUAL
29859: IFFALSE 29869
// sFlag := true ;
29861: LD_ADDR_EXP 101
29865: PUSH
29866: LD_INT 1
29868: ST_TO_ADDR
// if p3 = 15 then
29869: LD_VAR 0 3
29873: PUSH
29874: LD_INT 15
29876: EQUAL
29877: IFFALSE 29887
// sKamikadze := true ;
29879: LD_ADDR_EXP 109
29883: PUSH
29884: LD_INT 1
29886: ST_TO_ADDR
// if p3 = 16 then
29887: LD_VAR 0 3
29891: PUSH
29892: LD_INT 16
29894: EQUAL
29895: IFFALSE 29905
// sTroll := true ;
29897: LD_ADDR_EXP 110
29901: PUSH
29902: LD_INT 1
29904: ST_TO_ADDR
// if p3 = 17 then
29905: LD_VAR 0 3
29909: PUSH
29910: LD_INT 17
29912: EQUAL
29913: IFFALSE 29923
// sSlow := true ;
29915: LD_ADDR_EXP 111
29919: PUSH
29920: LD_INT 1
29922: ST_TO_ADDR
// if p3 = 18 then
29923: LD_VAR 0 3
29927: PUSH
29928: LD_INT 18
29930: EQUAL
29931: IFFALSE 29941
// sLack := true ;
29933: LD_ADDR_EXP 112
29937: PUSH
29938: LD_INT 1
29940: ST_TO_ADDR
// if p3 = 19 then
29941: LD_VAR 0 3
29945: PUSH
29946: LD_INT 19
29948: EQUAL
29949: IFFALSE 29959
// sTank := true ;
29951: LD_ADDR_EXP 114
29955: PUSH
29956: LD_INT 1
29958: ST_TO_ADDR
// if p3 = 20 then
29959: LD_VAR 0 3
29963: PUSH
29964: LD_INT 20
29966: EQUAL
29967: IFFALSE 29977
// sRemote := true ;
29969: LD_ADDR_EXP 115
29973: PUSH
29974: LD_INT 1
29976: ST_TO_ADDR
// if p3 = 21 then
29977: LD_VAR 0 3
29981: PUSH
29982: LD_INT 21
29984: EQUAL
29985: IFFALSE 29995
// sPowell := true ;
29987: LD_ADDR_EXP 116
29991: PUSH
29992: LD_INT 1
29994: ST_TO_ADDR
// if p3 = 22 then
29995: LD_VAR 0 3
29999: PUSH
30000: LD_INT 22
30002: EQUAL
30003: IFFALSE 30013
// sTeleport := true ;
30005: LD_ADDR_EXP 119
30009: PUSH
30010: LD_INT 1
30012: ST_TO_ADDR
// if p3 = 23 then
30013: LD_VAR 0 3
30017: PUSH
30018: LD_INT 23
30020: EQUAL
30021: IFFALSE 30031
// sOilTower := true ;
30023: LD_ADDR_EXP 121
30027: PUSH
30028: LD_INT 1
30030: ST_TO_ADDR
// if p3 = 24 then
30031: LD_VAR 0 3
30035: PUSH
30036: LD_INT 24
30038: EQUAL
30039: IFFALSE 30049
// sShovel := true ;
30041: LD_ADDR_EXP 122
30045: PUSH
30046: LD_INT 1
30048: ST_TO_ADDR
// if p3 = 25 then
30049: LD_VAR 0 3
30053: PUSH
30054: LD_INT 25
30056: EQUAL
30057: IFFALSE 30067
// sSheik := true ;
30059: LD_ADDR_EXP 123
30063: PUSH
30064: LD_INT 1
30066: ST_TO_ADDR
// if p3 = 26 then
30067: LD_VAR 0 3
30071: PUSH
30072: LD_INT 26
30074: EQUAL
30075: IFFALSE 30085
// sEarthquake := true ;
30077: LD_ADDR_EXP 125
30081: PUSH
30082: LD_INT 1
30084: ST_TO_ADDR
// if p3 = 27 then
30085: LD_VAR 0 3
30089: PUSH
30090: LD_INT 27
30092: EQUAL
30093: IFFALSE 30103
// sAI := true ;
30095: LD_ADDR_EXP 126
30099: PUSH
30100: LD_INT 1
30102: ST_TO_ADDR
// if p3 = 28 then
30103: LD_VAR 0 3
30107: PUSH
30108: LD_INT 28
30110: EQUAL
30111: IFFALSE 30121
// sCargo := true ;
30113: LD_ADDR_EXP 129
30117: PUSH
30118: LD_INT 1
30120: ST_TO_ADDR
// if p3 = 29 then
30121: LD_VAR 0 3
30125: PUSH
30126: LD_INT 29
30128: EQUAL
30129: IFFALSE 30139
// sDLaser := true ;
30131: LD_ADDR_EXP 130
30135: PUSH
30136: LD_INT 1
30138: ST_TO_ADDR
// if p3 = 30 then
30139: LD_VAR 0 3
30143: PUSH
30144: LD_INT 30
30146: EQUAL
30147: IFFALSE 30157
// sExchange := true ;
30149: LD_ADDR_EXP 131
30153: PUSH
30154: LD_INT 1
30156: ST_TO_ADDR
// if p3 = 31 then
30157: LD_VAR 0 3
30161: PUSH
30162: LD_INT 31
30164: EQUAL
30165: IFFALSE 30175
// sFac := true ;
30167: LD_ADDR_EXP 132
30171: PUSH
30172: LD_INT 1
30174: ST_TO_ADDR
// if p3 = 32 then
30175: LD_VAR 0 3
30179: PUSH
30180: LD_INT 32
30182: EQUAL
30183: IFFALSE 30193
// sPower := true ;
30185: LD_ADDR_EXP 133
30189: PUSH
30190: LD_INT 1
30192: ST_TO_ADDR
// if p3 = 33 then
30193: LD_VAR 0 3
30197: PUSH
30198: LD_INT 33
30200: EQUAL
30201: IFFALSE 30211
// sRandom := true ;
30203: LD_ADDR_EXP 134
30207: PUSH
30208: LD_INT 1
30210: ST_TO_ADDR
// if p3 = 34 then
30211: LD_VAR 0 3
30215: PUSH
30216: LD_INT 34
30218: EQUAL
30219: IFFALSE 30229
// sShield := true ;
30221: LD_ADDR_EXP 135
30225: PUSH
30226: LD_INT 1
30228: ST_TO_ADDR
// if p3 = 35 then
30229: LD_VAR 0 3
30233: PUSH
30234: LD_INT 35
30236: EQUAL
30237: IFFALSE 30247
// sTime := true ;
30239: LD_ADDR_EXP 136
30243: PUSH
30244: LD_INT 1
30246: ST_TO_ADDR
// if p3 = 36 then
30247: LD_VAR 0 3
30251: PUSH
30252: LD_INT 36
30254: EQUAL
30255: IFFALSE 30265
// sTools := true ;
30257: LD_ADDR_EXP 137
30261: PUSH
30262: LD_INT 1
30264: ST_TO_ADDR
// if p3 = 101 then
30265: LD_VAR 0 3
30269: PUSH
30270: LD_INT 101
30272: EQUAL
30273: IFFALSE 30283
// sSold := true ;
30275: LD_ADDR_EXP 102
30279: PUSH
30280: LD_INT 1
30282: ST_TO_ADDR
// if p3 = 102 then
30283: LD_VAR 0 3
30287: PUSH
30288: LD_INT 102
30290: EQUAL
30291: IFFALSE 30301
// sDiff := true ;
30293: LD_ADDR_EXP 103
30297: PUSH
30298: LD_INT 1
30300: ST_TO_ADDR
// if p3 = 103 then
30301: LD_VAR 0 3
30305: PUSH
30306: LD_INT 103
30308: EQUAL
30309: IFFALSE 30319
// sFog := true ;
30311: LD_ADDR_EXP 106
30315: PUSH
30316: LD_INT 1
30318: ST_TO_ADDR
// if p3 = 104 then
30319: LD_VAR 0 3
30323: PUSH
30324: LD_INT 104
30326: EQUAL
30327: IFFALSE 30337
// sReset := true ;
30329: LD_ADDR_EXP 107
30333: PUSH
30334: LD_INT 1
30336: ST_TO_ADDR
// if p3 = 105 then
30337: LD_VAR 0 3
30341: PUSH
30342: LD_INT 105
30344: EQUAL
30345: IFFALSE 30355
// sSun := true ;
30347: LD_ADDR_EXP 108
30351: PUSH
30352: LD_INT 1
30354: ST_TO_ADDR
// if p3 = 106 then
30355: LD_VAR 0 3
30359: PUSH
30360: LD_INT 106
30362: EQUAL
30363: IFFALSE 30373
// sTiger := true ;
30365: LD_ADDR_EXP 104
30369: PUSH
30370: LD_INT 1
30372: ST_TO_ADDR
// if p3 = 107 then
30373: LD_VAR 0 3
30377: PUSH
30378: LD_INT 107
30380: EQUAL
30381: IFFALSE 30391
// sBomb := true ;
30383: LD_ADDR_EXP 105
30387: PUSH
30388: LD_INT 1
30390: ST_TO_ADDR
// if p3 = 108 then
30391: LD_VAR 0 3
30395: PUSH
30396: LD_INT 108
30398: EQUAL
30399: IFFALSE 30409
// sWound := true ;
30401: LD_ADDR_EXP 113
30405: PUSH
30406: LD_INT 1
30408: ST_TO_ADDR
// if p3 = 109 then
30409: LD_VAR 0 3
30413: PUSH
30414: LD_INT 109
30416: EQUAL
30417: IFFALSE 30427
// sBetray := true ;
30419: LD_ADDR_EXP 117
30423: PUSH
30424: LD_INT 1
30426: ST_TO_ADDR
// if p3 = 110 then
30427: LD_VAR 0 3
30431: PUSH
30432: LD_INT 110
30434: EQUAL
30435: IFFALSE 30445
// sContamin := true ;
30437: LD_ADDR_EXP 118
30441: PUSH
30442: LD_INT 1
30444: ST_TO_ADDR
// if p3 = 111 then
30445: LD_VAR 0 3
30449: PUSH
30450: LD_INT 111
30452: EQUAL
30453: IFFALSE 30463
// sOil := true ;
30455: LD_ADDR_EXP 120
30459: PUSH
30460: LD_INT 1
30462: ST_TO_ADDR
// if p3 = 112 then
30463: LD_VAR 0 3
30467: PUSH
30468: LD_INT 112
30470: EQUAL
30471: IFFALSE 30481
// sStu := true ;
30473: LD_ADDR_EXP 124
30477: PUSH
30478: LD_INT 1
30480: ST_TO_ADDR
// if p3 = 113 then
30481: LD_VAR 0 3
30485: PUSH
30486: LD_INT 113
30488: EQUAL
30489: IFFALSE 30499
// sBazooka := true ;
30491: LD_ADDR_EXP 127
30495: PUSH
30496: LD_INT 1
30498: ST_TO_ADDR
// if p3 = 114 then
30499: LD_VAR 0 3
30503: PUSH
30504: LD_INT 114
30506: EQUAL
30507: IFFALSE 30517
// sMortar := true ;
30509: LD_ADDR_EXP 128
30513: PUSH
30514: LD_INT 1
30516: ST_TO_ADDR
// if p3 = 115 then
30517: LD_VAR 0 3
30521: PUSH
30522: LD_INT 115
30524: EQUAL
30525: IFFALSE 30535
// sRanger := true ;
30527: LD_ADDR_EXP 138
30531: PUSH
30532: LD_INT 1
30534: ST_TO_ADDR
// end ; if p2 = 101 then
30535: LD_VAR 0 2
30539: PUSH
30540: LD_INT 101
30542: EQUAL
30543: IFFALSE 30671
// begin case p3 of 1 :
30545: LD_VAR 0 3
30549: PUSH
30550: LD_INT 1
30552: DOUBLE
30553: EQUAL
30554: IFTRUE 30558
30556: GO 30565
30558: POP
// hHackUnlimitedResources ; 2 :
30559: CALL 41706 0 0
30563: GO 30671
30565: LD_INT 2
30567: DOUBLE
30568: EQUAL
30569: IFTRUE 30573
30571: GO 30580
30573: POP
// hHackSetLevel10 ; 3 :
30574: CALL 41839 0 0
30578: GO 30671
30580: LD_INT 3
30582: DOUBLE
30583: EQUAL
30584: IFTRUE 30588
30586: GO 30595
30588: POP
// hHackSetLevel10YourUnits ; 4 :
30589: CALL 41924 0 0
30593: GO 30671
30595: LD_INT 4
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30610
30603: POP
// hHackInvincible ; 5 :
30604: CALL 42372 0 0
30608: GO 30671
30610: LD_INT 5
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30625
30618: POP
// hHackInvisible ; 6 :
30619: CALL 42483 0 0
30623: GO 30671
30625: LD_INT 6
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30640
30633: POP
// hHackChangeYourSide ; 7 :
30634: CALL 42540 0 0
30638: GO 30671
30640: LD_INT 7
30642: DOUBLE
30643: EQUAL
30644: IFTRUE 30648
30646: GO 30655
30648: POP
// hHackChangeUnitSide ; 8 :
30649: CALL 42582 0 0
30653: GO 30671
30655: LD_INT 8
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30670
30663: POP
// hHackFog ; end ;
30664: CALL 42683 0 0
30668: GO 30671
30670: POP
// end ; end ;
30671: PPOPN 6
30673: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
30674: GO 30676
30676: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
30677: LD_STRING initStreamRollete();
30679: PPUSH
30680: CALL_OW 559
// InitStreamMode ;
30684: CALL 30693 0 0
// DefineStreamItems ( ) ;
30688: CALL 31133 0 0
// end ;
30692: END
// function InitStreamMode ; begin
30693: LD_INT 0
30695: PPUSH
// streamModeActive := false ;
30696: LD_ADDR_EXP 85
30700: PUSH
30701: LD_INT 0
30703: ST_TO_ADDR
// normalCounter := 36 ;
30704: LD_ADDR_EXP 86
30708: PUSH
30709: LD_INT 36
30711: ST_TO_ADDR
// hardcoreCounter := 16 ;
30712: LD_ADDR_EXP 87
30716: PUSH
30717: LD_INT 16
30719: ST_TO_ADDR
// sRocket := false ;
30720: LD_ADDR_EXP 90
30724: PUSH
30725: LD_INT 0
30727: ST_TO_ADDR
// sSpeed := false ;
30728: LD_ADDR_EXP 89
30732: PUSH
30733: LD_INT 0
30735: ST_TO_ADDR
// sEngine := false ;
30736: LD_ADDR_EXP 91
30740: PUSH
30741: LD_INT 0
30743: ST_TO_ADDR
// sSpec := false ;
30744: LD_ADDR_EXP 88
30748: PUSH
30749: LD_INT 0
30751: ST_TO_ADDR
// sLevel := false ;
30752: LD_ADDR_EXP 92
30756: PUSH
30757: LD_INT 0
30759: ST_TO_ADDR
// sArmoury := false ;
30760: LD_ADDR_EXP 93
30764: PUSH
30765: LD_INT 0
30767: ST_TO_ADDR
// sRadar := false ;
30768: LD_ADDR_EXP 94
30772: PUSH
30773: LD_INT 0
30775: ST_TO_ADDR
// sBunker := false ;
30776: LD_ADDR_EXP 95
30780: PUSH
30781: LD_INT 0
30783: ST_TO_ADDR
// sHack := false ;
30784: LD_ADDR_EXP 96
30788: PUSH
30789: LD_INT 0
30791: ST_TO_ADDR
// sFire := false ;
30792: LD_ADDR_EXP 97
30796: PUSH
30797: LD_INT 0
30799: ST_TO_ADDR
// sRefresh := false ;
30800: LD_ADDR_EXP 98
30804: PUSH
30805: LD_INT 0
30807: ST_TO_ADDR
// sExp := false ;
30808: LD_ADDR_EXP 99
30812: PUSH
30813: LD_INT 0
30815: ST_TO_ADDR
// sDepot := false ;
30816: LD_ADDR_EXP 100
30820: PUSH
30821: LD_INT 0
30823: ST_TO_ADDR
// sFlag := false ;
30824: LD_ADDR_EXP 101
30828: PUSH
30829: LD_INT 0
30831: ST_TO_ADDR
// sKamikadze := false ;
30832: LD_ADDR_EXP 109
30836: PUSH
30837: LD_INT 0
30839: ST_TO_ADDR
// sTroll := false ;
30840: LD_ADDR_EXP 110
30844: PUSH
30845: LD_INT 0
30847: ST_TO_ADDR
// sSlow := false ;
30848: LD_ADDR_EXP 111
30852: PUSH
30853: LD_INT 0
30855: ST_TO_ADDR
// sLack := false ;
30856: LD_ADDR_EXP 112
30860: PUSH
30861: LD_INT 0
30863: ST_TO_ADDR
// sTank := false ;
30864: LD_ADDR_EXP 114
30868: PUSH
30869: LD_INT 0
30871: ST_TO_ADDR
// sRemote := false ;
30872: LD_ADDR_EXP 115
30876: PUSH
30877: LD_INT 0
30879: ST_TO_ADDR
// sPowell := false ;
30880: LD_ADDR_EXP 116
30884: PUSH
30885: LD_INT 0
30887: ST_TO_ADDR
// sTeleport := false ;
30888: LD_ADDR_EXP 119
30892: PUSH
30893: LD_INT 0
30895: ST_TO_ADDR
// sOilTower := false ;
30896: LD_ADDR_EXP 121
30900: PUSH
30901: LD_INT 0
30903: ST_TO_ADDR
// sShovel := false ;
30904: LD_ADDR_EXP 122
30908: PUSH
30909: LD_INT 0
30911: ST_TO_ADDR
// sSheik := false ;
30912: LD_ADDR_EXP 123
30916: PUSH
30917: LD_INT 0
30919: ST_TO_ADDR
// sEarthquake := false ;
30920: LD_ADDR_EXP 125
30924: PUSH
30925: LD_INT 0
30927: ST_TO_ADDR
// sAI := false ;
30928: LD_ADDR_EXP 126
30932: PUSH
30933: LD_INT 0
30935: ST_TO_ADDR
// sCargo := false ;
30936: LD_ADDR_EXP 129
30940: PUSH
30941: LD_INT 0
30943: ST_TO_ADDR
// sDLaser := false ;
30944: LD_ADDR_EXP 130
30948: PUSH
30949: LD_INT 0
30951: ST_TO_ADDR
// sExchange := false ;
30952: LD_ADDR_EXP 131
30956: PUSH
30957: LD_INT 0
30959: ST_TO_ADDR
// sFac := false ;
30960: LD_ADDR_EXP 132
30964: PUSH
30965: LD_INT 0
30967: ST_TO_ADDR
// sPower := false ;
30968: LD_ADDR_EXP 133
30972: PUSH
30973: LD_INT 0
30975: ST_TO_ADDR
// sRandom := false ;
30976: LD_ADDR_EXP 134
30980: PUSH
30981: LD_INT 0
30983: ST_TO_ADDR
// sShield := false ;
30984: LD_ADDR_EXP 135
30988: PUSH
30989: LD_INT 0
30991: ST_TO_ADDR
// sTime := false ;
30992: LD_ADDR_EXP 136
30996: PUSH
30997: LD_INT 0
30999: ST_TO_ADDR
// sTools := false ;
31000: LD_ADDR_EXP 137
31004: PUSH
31005: LD_INT 0
31007: ST_TO_ADDR
// sSold := false ;
31008: LD_ADDR_EXP 102
31012: PUSH
31013: LD_INT 0
31015: ST_TO_ADDR
// sDiff := false ;
31016: LD_ADDR_EXP 103
31020: PUSH
31021: LD_INT 0
31023: ST_TO_ADDR
// sFog := false ;
31024: LD_ADDR_EXP 106
31028: PUSH
31029: LD_INT 0
31031: ST_TO_ADDR
// sReset := false ;
31032: LD_ADDR_EXP 107
31036: PUSH
31037: LD_INT 0
31039: ST_TO_ADDR
// sSun := false ;
31040: LD_ADDR_EXP 108
31044: PUSH
31045: LD_INT 0
31047: ST_TO_ADDR
// sTiger := false ;
31048: LD_ADDR_EXP 104
31052: PUSH
31053: LD_INT 0
31055: ST_TO_ADDR
// sBomb := false ;
31056: LD_ADDR_EXP 105
31060: PUSH
31061: LD_INT 0
31063: ST_TO_ADDR
// sWound := false ;
31064: LD_ADDR_EXP 113
31068: PUSH
31069: LD_INT 0
31071: ST_TO_ADDR
// sBetray := false ;
31072: LD_ADDR_EXP 117
31076: PUSH
31077: LD_INT 0
31079: ST_TO_ADDR
// sContamin := false ;
31080: LD_ADDR_EXP 118
31084: PUSH
31085: LD_INT 0
31087: ST_TO_ADDR
// sOil := false ;
31088: LD_ADDR_EXP 120
31092: PUSH
31093: LD_INT 0
31095: ST_TO_ADDR
// sStu := false ;
31096: LD_ADDR_EXP 124
31100: PUSH
31101: LD_INT 0
31103: ST_TO_ADDR
// sBazooka := false ;
31104: LD_ADDR_EXP 127
31108: PUSH
31109: LD_INT 0
31111: ST_TO_ADDR
// sMortar := false ;
31112: LD_ADDR_EXP 128
31116: PUSH
31117: LD_INT 0
31119: ST_TO_ADDR
// sRanger := false ;
31120: LD_ADDR_EXP 138
31124: PUSH
31125: LD_INT 0
31127: ST_TO_ADDR
// end ;
31128: LD_VAR 0 1
31132: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
31133: LD_INT 0
31135: PPUSH
31136: PPUSH
31137: PPUSH
31138: PPUSH
31139: PPUSH
// result := [ ] ;
31140: LD_ADDR_VAR 0 1
31144: PUSH
31145: EMPTY
31146: ST_TO_ADDR
// if campaign_id = 1 then
31147: LD_OWVAR 69
31151: PUSH
31152: LD_INT 1
31154: EQUAL
31155: IFFALSE 34093
// begin case mission_number of 1 :
31157: LD_OWVAR 70
31161: PUSH
31162: LD_INT 1
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31234
31170: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
31171: LD_ADDR_VAR 0 1
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 4
31181: PUSH
31182: LD_INT 11
31184: PUSH
31185: LD_INT 12
31187: PUSH
31188: LD_INT 15
31190: PUSH
31191: LD_INT 16
31193: PUSH
31194: LD_INT 22
31196: PUSH
31197: LD_INT 23
31199: PUSH
31200: LD_INT 26
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 101
31216: PUSH
31217: LD_INT 102
31219: PUSH
31220: LD_INT 106
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: ST_TO_ADDR
31232: GO 34091
31234: LD_INT 2
31236: DOUBLE
31237: EQUAL
31238: IFTRUE 31242
31240: GO 31314
31242: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
31243: LD_ADDR_VAR 0 1
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 4
31253: PUSH
31254: LD_INT 11
31256: PUSH
31257: LD_INT 12
31259: PUSH
31260: LD_INT 15
31262: PUSH
31263: LD_INT 16
31265: PUSH
31266: LD_INT 22
31268: PUSH
31269: LD_INT 23
31271: PUSH
31272: LD_INT 26
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 101
31288: PUSH
31289: LD_INT 102
31291: PUSH
31292: LD_INT 105
31294: PUSH
31295: LD_INT 106
31297: PUSH
31298: LD_INT 108
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: ST_TO_ADDR
31312: GO 34091
31314: LD_INT 3
31316: DOUBLE
31317: EQUAL
31318: IFTRUE 31322
31320: GO 31398
31322: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
31323: LD_ADDR_VAR 0 1
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 5
31336: PUSH
31337: LD_INT 11
31339: PUSH
31340: LD_INT 12
31342: PUSH
31343: LD_INT 15
31345: PUSH
31346: LD_INT 16
31348: PUSH
31349: LD_INT 22
31351: PUSH
31352: LD_INT 26
31354: PUSH
31355: LD_INT 36
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 101
31372: PUSH
31373: LD_INT 102
31375: PUSH
31376: LD_INT 105
31378: PUSH
31379: LD_INT 106
31381: PUSH
31382: LD_INT 108
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: ST_TO_ADDR
31396: GO 34091
31398: LD_INT 4
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31490
31406: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
31407: LD_ADDR_VAR 0 1
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: LD_INT 4
31417: PUSH
31418: LD_INT 5
31420: PUSH
31421: LD_INT 8
31423: PUSH
31424: LD_INT 11
31426: PUSH
31427: LD_INT 12
31429: PUSH
31430: LD_INT 15
31432: PUSH
31433: LD_INT 16
31435: PUSH
31436: LD_INT 22
31438: PUSH
31439: LD_INT 23
31441: PUSH
31442: LD_INT 26
31444: PUSH
31445: LD_INT 36
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 101
31464: PUSH
31465: LD_INT 102
31467: PUSH
31468: LD_INT 105
31470: PUSH
31471: LD_INT 106
31473: PUSH
31474: LD_INT 108
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: ST_TO_ADDR
31488: GO 34091
31490: LD_INT 5
31492: DOUBLE
31493: EQUAL
31494: IFTRUE 31498
31496: GO 31598
31498: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
31499: LD_ADDR_VAR 0 1
31503: PUSH
31504: LD_INT 2
31506: PUSH
31507: LD_INT 4
31509: PUSH
31510: LD_INT 5
31512: PUSH
31513: LD_INT 6
31515: PUSH
31516: LD_INT 8
31518: PUSH
31519: LD_INT 11
31521: PUSH
31522: LD_INT 12
31524: PUSH
31525: LD_INT 15
31527: PUSH
31528: LD_INT 16
31530: PUSH
31531: LD_INT 22
31533: PUSH
31534: LD_INT 23
31536: PUSH
31537: LD_INT 25
31539: PUSH
31540: LD_INT 26
31542: PUSH
31543: LD_INT 36
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 101
31564: PUSH
31565: LD_INT 102
31567: PUSH
31568: LD_INT 105
31570: PUSH
31571: LD_INT 106
31573: PUSH
31574: LD_INT 108
31576: PUSH
31577: LD_INT 109
31579: PUSH
31580: LD_INT 112
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: ST_TO_ADDR
31596: GO 34091
31598: LD_INT 6
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31726
31606: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
31607: LD_ADDR_VAR 0 1
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: LD_INT 4
31617: PUSH
31618: LD_INT 5
31620: PUSH
31621: LD_INT 6
31623: PUSH
31624: LD_INT 8
31626: PUSH
31627: LD_INT 11
31629: PUSH
31630: LD_INT 12
31632: PUSH
31633: LD_INT 15
31635: PUSH
31636: LD_INT 16
31638: PUSH
31639: LD_INT 20
31641: PUSH
31642: LD_INT 21
31644: PUSH
31645: LD_INT 22
31647: PUSH
31648: LD_INT 23
31650: PUSH
31651: LD_INT 25
31653: PUSH
31654: LD_INT 26
31656: PUSH
31657: LD_INT 30
31659: PUSH
31660: LD_INT 31
31662: PUSH
31663: LD_INT 32
31665: PUSH
31666: LD_INT 36
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 101
31692: PUSH
31693: LD_INT 102
31695: PUSH
31696: LD_INT 105
31698: PUSH
31699: LD_INT 106
31701: PUSH
31702: LD_INT 108
31704: PUSH
31705: LD_INT 109
31707: PUSH
31708: LD_INT 112
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: ST_TO_ADDR
31724: GO 34091
31726: LD_INT 7
31728: DOUBLE
31729: EQUAL
31730: IFTRUE 31734
31732: GO 31834
31734: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 4
31745: PUSH
31746: LD_INT 5
31748: PUSH
31749: LD_INT 7
31751: PUSH
31752: LD_INT 11
31754: PUSH
31755: LD_INT 12
31757: PUSH
31758: LD_INT 15
31760: PUSH
31761: LD_INT 16
31763: PUSH
31764: LD_INT 20
31766: PUSH
31767: LD_INT 21
31769: PUSH
31770: LD_INT 22
31772: PUSH
31773: LD_INT 23
31775: PUSH
31776: LD_INT 25
31778: PUSH
31779: LD_INT 26
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 101
31800: PUSH
31801: LD_INT 102
31803: PUSH
31804: LD_INT 103
31806: PUSH
31807: LD_INT 105
31809: PUSH
31810: LD_INT 106
31812: PUSH
31813: LD_INT 108
31815: PUSH
31816: LD_INT 112
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: ST_TO_ADDR
31832: GO 34091
31834: LD_INT 8
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31842
31840: GO 31970
31842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
31843: LD_ADDR_VAR 0 1
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: LD_INT 5
31856: PUSH
31857: LD_INT 6
31859: PUSH
31860: LD_INT 7
31862: PUSH
31863: LD_INT 8
31865: PUSH
31866: LD_INT 11
31868: PUSH
31869: LD_INT 12
31871: PUSH
31872: LD_INT 15
31874: PUSH
31875: LD_INT 16
31877: PUSH
31878: LD_INT 20
31880: PUSH
31881: LD_INT 21
31883: PUSH
31884: LD_INT 22
31886: PUSH
31887: LD_INT 23
31889: PUSH
31890: LD_INT 25
31892: PUSH
31893: LD_INT 26
31895: PUSH
31896: LD_INT 30
31898: PUSH
31899: LD_INT 31
31901: PUSH
31902: LD_INT 32
31904: PUSH
31905: LD_INT 36
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 101
31932: PUSH
31933: LD_INT 102
31935: PUSH
31936: LD_INT 103
31938: PUSH
31939: LD_INT 105
31941: PUSH
31942: LD_INT 106
31944: PUSH
31945: LD_INT 108
31947: PUSH
31948: LD_INT 109
31950: PUSH
31951: LD_INT 112
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: ST_TO_ADDR
31968: GO 34091
31970: LD_INT 9
31972: DOUBLE
31973: EQUAL
31974: IFTRUE 31978
31976: GO 32114
31978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
31979: LD_ADDR_VAR 0 1
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: LD_INT 5
31992: PUSH
31993: LD_INT 6
31995: PUSH
31996: LD_INT 7
31998: PUSH
31999: LD_INT 8
32001: PUSH
32002: LD_INT 11
32004: PUSH
32005: LD_INT 12
32007: PUSH
32008: LD_INT 15
32010: PUSH
32011: LD_INT 16
32013: PUSH
32014: LD_INT 20
32016: PUSH
32017: LD_INT 21
32019: PUSH
32020: LD_INT 22
32022: PUSH
32023: LD_INT 23
32025: PUSH
32026: LD_INT 25
32028: PUSH
32029: LD_INT 26
32031: PUSH
32032: LD_INT 28
32034: PUSH
32035: LD_INT 30
32037: PUSH
32038: LD_INT 31
32040: PUSH
32041: LD_INT 32
32043: PUSH
32044: LD_INT 36
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 101
32072: PUSH
32073: LD_INT 102
32075: PUSH
32076: LD_INT 103
32078: PUSH
32079: LD_INT 105
32081: PUSH
32082: LD_INT 106
32084: PUSH
32085: LD_INT 108
32087: PUSH
32088: LD_INT 109
32090: PUSH
32091: LD_INT 112
32093: PUSH
32094: LD_INT 114
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: ST_TO_ADDR
32112: GO 34091
32114: LD_INT 10
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32306
32122: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
32123: LD_ADDR_VAR 0 1
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 4
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: LD_INT 6
32139: PUSH
32140: LD_INT 7
32142: PUSH
32143: LD_INT 8
32145: PUSH
32146: LD_INT 9
32148: PUSH
32149: LD_INT 10
32151: PUSH
32152: LD_INT 11
32154: PUSH
32155: LD_INT 12
32157: PUSH
32158: LD_INT 13
32160: PUSH
32161: LD_INT 14
32163: PUSH
32164: LD_INT 15
32166: PUSH
32167: LD_INT 16
32169: PUSH
32170: LD_INT 17
32172: PUSH
32173: LD_INT 18
32175: PUSH
32176: LD_INT 19
32178: PUSH
32179: LD_INT 20
32181: PUSH
32182: LD_INT 21
32184: PUSH
32185: LD_INT 22
32187: PUSH
32188: LD_INT 23
32190: PUSH
32191: LD_INT 24
32193: PUSH
32194: LD_INT 25
32196: PUSH
32197: LD_INT 26
32199: PUSH
32200: LD_INT 28
32202: PUSH
32203: LD_INT 30
32205: PUSH
32206: LD_INT 31
32208: PUSH
32209: LD_INT 32
32211: PUSH
32212: LD_INT 36
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 101
32248: PUSH
32249: LD_INT 102
32251: PUSH
32252: LD_INT 103
32254: PUSH
32255: LD_INT 104
32257: PUSH
32258: LD_INT 105
32260: PUSH
32261: LD_INT 106
32263: PUSH
32264: LD_INT 107
32266: PUSH
32267: LD_INT 108
32269: PUSH
32270: LD_INT 109
32272: PUSH
32273: LD_INT 110
32275: PUSH
32276: LD_INT 111
32278: PUSH
32279: LD_INT 112
32281: PUSH
32282: LD_INT 114
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: ST_TO_ADDR
32304: GO 34091
32306: LD_INT 11
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32314
32312: GO 32506
32314: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
32315: LD_ADDR_VAR 0 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: LD_INT 5
32331: PUSH
32332: LD_INT 6
32334: PUSH
32335: LD_INT 7
32337: PUSH
32338: LD_INT 8
32340: PUSH
32341: LD_INT 9
32343: PUSH
32344: LD_INT 10
32346: PUSH
32347: LD_INT 11
32349: PUSH
32350: LD_INT 12
32352: PUSH
32353: LD_INT 13
32355: PUSH
32356: LD_INT 14
32358: PUSH
32359: LD_INT 15
32361: PUSH
32362: LD_INT 16
32364: PUSH
32365: LD_INT 17
32367: PUSH
32368: LD_INT 18
32370: PUSH
32371: LD_INT 19
32373: PUSH
32374: LD_INT 20
32376: PUSH
32377: LD_INT 21
32379: PUSH
32380: LD_INT 22
32382: PUSH
32383: LD_INT 23
32385: PUSH
32386: LD_INT 24
32388: PUSH
32389: LD_INT 25
32391: PUSH
32392: LD_INT 26
32394: PUSH
32395: LD_INT 28
32397: PUSH
32398: LD_INT 30
32400: PUSH
32401: LD_INT 31
32403: PUSH
32404: LD_INT 32
32406: PUSH
32407: LD_INT 34
32409: PUSH
32410: LD_INT 36
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 101
32448: PUSH
32449: LD_INT 102
32451: PUSH
32452: LD_INT 103
32454: PUSH
32455: LD_INT 104
32457: PUSH
32458: LD_INT 105
32460: PUSH
32461: LD_INT 106
32463: PUSH
32464: LD_INT 107
32466: PUSH
32467: LD_INT 108
32469: PUSH
32470: LD_INT 109
32472: PUSH
32473: LD_INT 110
32475: PUSH
32476: LD_INT 111
32478: PUSH
32479: LD_INT 112
32481: PUSH
32482: LD_INT 114
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: ST_TO_ADDR
32504: GO 34091
32506: LD_INT 12
32508: DOUBLE
32509: EQUAL
32510: IFTRUE 32514
32512: GO 32722
32514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
32515: LD_ADDR_VAR 0 1
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: LD_INT 4
32531: PUSH
32532: LD_INT 5
32534: PUSH
32535: LD_INT 6
32537: PUSH
32538: LD_INT 7
32540: PUSH
32541: LD_INT 8
32543: PUSH
32544: LD_INT 9
32546: PUSH
32547: LD_INT 10
32549: PUSH
32550: LD_INT 11
32552: PUSH
32553: LD_INT 12
32555: PUSH
32556: LD_INT 13
32558: PUSH
32559: LD_INT 14
32561: PUSH
32562: LD_INT 15
32564: PUSH
32565: LD_INT 16
32567: PUSH
32568: LD_INT 17
32570: PUSH
32571: LD_INT 18
32573: PUSH
32574: LD_INT 19
32576: PUSH
32577: LD_INT 20
32579: PUSH
32580: LD_INT 21
32582: PUSH
32583: LD_INT 22
32585: PUSH
32586: LD_INT 23
32588: PUSH
32589: LD_INT 24
32591: PUSH
32592: LD_INT 25
32594: PUSH
32595: LD_INT 26
32597: PUSH
32598: LD_INT 27
32600: PUSH
32601: LD_INT 28
32603: PUSH
32604: LD_INT 30
32606: PUSH
32607: LD_INT 31
32609: PUSH
32610: LD_INT 32
32612: PUSH
32613: LD_INT 33
32615: PUSH
32616: LD_INT 34
32618: PUSH
32619: LD_INT 36
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 101
32660: PUSH
32661: LD_INT 102
32663: PUSH
32664: LD_INT 103
32666: PUSH
32667: LD_INT 104
32669: PUSH
32670: LD_INT 105
32672: PUSH
32673: LD_INT 106
32675: PUSH
32676: LD_INT 107
32678: PUSH
32679: LD_INT 108
32681: PUSH
32682: LD_INT 109
32684: PUSH
32685: LD_INT 110
32687: PUSH
32688: LD_INT 111
32690: PUSH
32691: LD_INT 112
32693: PUSH
32694: LD_INT 113
32696: PUSH
32697: LD_INT 114
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: ST_TO_ADDR
32720: GO 34091
32722: LD_INT 13
32724: DOUBLE
32725: EQUAL
32726: IFTRUE 32730
32728: GO 32926
32730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
32731: LD_ADDR_VAR 0 1
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 3
32744: PUSH
32745: LD_INT 4
32747: PUSH
32748: LD_INT 5
32750: PUSH
32751: LD_INT 8
32753: PUSH
32754: LD_INT 9
32756: PUSH
32757: LD_INT 10
32759: PUSH
32760: LD_INT 11
32762: PUSH
32763: LD_INT 12
32765: PUSH
32766: LD_INT 14
32768: PUSH
32769: LD_INT 15
32771: PUSH
32772: LD_INT 16
32774: PUSH
32775: LD_INT 17
32777: PUSH
32778: LD_INT 18
32780: PUSH
32781: LD_INT 19
32783: PUSH
32784: LD_INT 20
32786: PUSH
32787: LD_INT 21
32789: PUSH
32790: LD_INT 22
32792: PUSH
32793: LD_INT 23
32795: PUSH
32796: LD_INT 24
32798: PUSH
32799: LD_INT 25
32801: PUSH
32802: LD_INT 26
32804: PUSH
32805: LD_INT 27
32807: PUSH
32808: LD_INT 28
32810: PUSH
32811: LD_INT 30
32813: PUSH
32814: LD_INT 31
32816: PUSH
32817: LD_INT 32
32819: PUSH
32820: LD_INT 33
32822: PUSH
32823: LD_INT 34
32825: PUSH
32826: LD_INT 36
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 101
32864: PUSH
32865: LD_INT 102
32867: PUSH
32868: LD_INT 103
32870: PUSH
32871: LD_INT 104
32873: PUSH
32874: LD_INT 105
32876: PUSH
32877: LD_INT 106
32879: PUSH
32880: LD_INT 107
32882: PUSH
32883: LD_INT 108
32885: PUSH
32886: LD_INT 109
32888: PUSH
32889: LD_INT 110
32891: PUSH
32892: LD_INT 111
32894: PUSH
32895: LD_INT 112
32897: PUSH
32898: LD_INT 113
32900: PUSH
32901: LD_INT 114
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: ST_TO_ADDR
32924: GO 34091
32926: LD_INT 14
32928: DOUBLE
32929: EQUAL
32930: IFTRUE 32934
32932: GO 33146
32934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
32935: LD_ADDR_VAR 0 1
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: LD_INT 6
32957: PUSH
32958: LD_INT 7
32960: PUSH
32961: LD_INT 8
32963: PUSH
32964: LD_INT 9
32966: PUSH
32967: LD_INT 10
32969: PUSH
32970: LD_INT 11
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 13
32978: PUSH
32979: LD_INT 14
32981: PUSH
32982: LD_INT 15
32984: PUSH
32985: LD_INT 16
32987: PUSH
32988: LD_INT 17
32990: PUSH
32991: LD_INT 18
32993: PUSH
32994: LD_INT 19
32996: PUSH
32997: LD_INT 20
32999: PUSH
33000: LD_INT 21
33002: PUSH
33003: LD_INT 22
33005: PUSH
33006: LD_INT 23
33008: PUSH
33009: LD_INT 24
33011: PUSH
33012: LD_INT 25
33014: PUSH
33015: LD_INT 26
33017: PUSH
33018: LD_INT 27
33020: PUSH
33021: LD_INT 28
33023: PUSH
33024: LD_INT 29
33026: PUSH
33027: LD_INT 30
33029: PUSH
33030: LD_INT 31
33032: PUSH
33033: LD_INT 32
33035: PUSH
33036: LD_INT 33
33038: PUSH
33039: LD_INT 34
33041: PUSH
33042: LD_INT 36
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 101
33084: PUSH
33085: LD_INT 102
33087: PUSH
33088: LD_INT 103
33090: PUSH
33091: LD_INT 104
33093: PUSH
33094: LD_INT 105
33096: PUSH
33097: LD_INT 106
33099: PUSH
33100: LD_INT 107
33102: PUSH
33103: LD_INT 108
33105: PUSH
33106: LD_INT 109
33108: PUSH
33109: LD_INT 110
33111: PUSH
33112: LD_INT 111
33114: PUSH
33115: LD_INT 112
33117: PUSH
33118: LD_INT 113
33120: PUSH
33121: LD_INT 114
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: ST_TO_ADDR
33144: GO 34091
33146: LD_INT 15
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33366
33154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
33155: LD_ADDR_VAR 0 1
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: LD_INT 4
33171: PUSH
33172: LD_INT 5
33174: PUSH
33175: LD_INT 6
33177: PUSH
33178: LD_INT 7
33180: PUSH
33181: LD_INT 8
33183: PUSH
33184: LD_INT 9
33186: PUSH
33187: LD_INT 10
33189: PUSH
33190: LD_INT 11
33192: PUSH
33193: LD_INT 12
33195: PUSH
33196: LD_INT 13
33198: PUSH
33199: LD_INT 14
33201: PUSH
33202: LD_INT 15
33204: PUSH
33205: LD_INT 16
33207: PUSH
33208: LD_INT 17
33210: PUSH
33211: LD_INT 18
33213: PUSH
33214: LD_INT 19
33216: PUSH
33217: LD_INT 20
33219: PUSH
33220: LD_INT 21
33222: PUSH
33223: LD_INT 22
33225: PUSH
33226: LD_INT 23
33228: PUSH
33229: LD_INT 24
33231: PUSH
33232: LD_INT 25
33234: PUSH
33235: LD_INT 26
33237: PUSH
33238: LD_INT 27
33240: PUSH
33241: LD_INT 28
33243: PUSH
33244: LD_INT 29
33246: PUSH
33247: LD_INT 30
33249: PUSH
33250: LD_INT 31
33252: PUSH
33253: LD_INT 32
33255: PUSH
33256: LD_INT 33
33258: PUSH
33259: LD_INT 34
33261: PUSH
33262: LD_INT 36
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 101
33304: PUSH
33305: LD_INT 102
33307: PUSH
33308: LD_INT 103
33310: PUSH
33311: LD_INT 104
33313: PUSH
33314: LD_INT 105
33316: PUSH
33317: LD_INT 106
33319: PUSH
33320: LD_INT 107
33322: PUSH
33323: LD_INT 108
33325: PUSH
33326: LD_INT 109
33328: PUSH
33329: LD_INT 110
33331: PUSH
33332: LD_INT 111
33334: PUSH
33335: LD_INT 112
33337: PUSH
33338: LD_INT 113
33340: PUSH
33341: LD_INT 114
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: ST_TO_ADDR
33364: GO 34091
33366: LD_INT 16
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33498
33374: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
33375: LD_ADDR_VAR 0 1
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: LD_INT 4
33385: PUSH
33386: LD_INT 5
33388: PUSH
33389: LD_INT 7
33391: PUSH
33392: LD_INT 11
33394: PUSH
33395: LD_INT 12
33397: PUSH
33398: LD_INT 15
33400: PUSH
33401: LD_INT 16
33403: PUSH
33404: LD_INT 20
33406: PUSH
33407: LD_INT 21
33409: PUSH
33410: LD_INT 22
33412: PUSH
33413: LD_INT 23
33415: PUSH
33416: LD_INT 25
33418: PUSH
33419: LD_INT 26
33421: PUSH
33422: LD_INT 30
33424: PUSH
33425: LD_INT 31
33427: PUSH
33428: LD_INT 32
33430: PUSH
33431: LD_INT 33
33433: PUSH
33434: LD_INT 34
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 101
33460: PUSH
33461: LD_INT 102
33463: PUSH
33464: LD_INT 103
33466: PUSH
33467: LD_INT 106
33469: PUSH
33470: LD_INT 108
33472: PUSH
33473: LD_INT 112
33475: PUSH
33476: LD_INT 113
33478: PUSH
33479: LD_INT 114
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: ST_TO_ADDR
33496: GO 34091
33498: LD_INT 17
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33506
33504: GO 33718
33506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
33507: LD_ADDR_VAR 0 1
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: LD_INT 5
33526: PUSH
33527: LD_INT 6
33529: PUSH
33530: LD_INT 7
33532: PUSH
33533: LD_INT 8
33535: PUSH
33536: LD_INT 9
33538: PUSH
33539: LD_INT 10
33541: PUSH
33542: LD_INT 11
33544: PUSH
33545: LD_INT 12
33547: PUSH
33548: LD_INT 13
33550: PUSH
33551: LD_INT 14
33553: PUSH
33554: LD_INT 15
33556: PUSH
33557: LD_INT 16
33559: PUSH
33560: LD_INT 17
33562: PUSH
33563: LD_INT 18
33565: PUSH
33566: LD_INT 19
33568: PUSH
33569: LD_INT 20
33571: PUSH
33572: LD_INT 21
33574: PUSH
33575: LD_INT 22
33577: PUSH
33578: LD_INT 23
33580: PUSH
33581: LD_INT 24
33583: PUSH
33584: LD_INT 25
33586: PUSH
33587: LD_INT 26
33589: PUSH
33590: LD_INT 27
33592: PUSH
33593: LD_INT 28
33595: PUSH
33596: LD_INT 29
33598: PUSH
33599: LD_INT 30
33601: PUSH
33602: LD_INT 31
33604: PUSH
33605: LD_INT 32
33607: PUSH
33608: LD_INT 33
33610: PUSH
33611: LD_INT 34
33613: PUSH
33614: LD_INT 36
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 101
33656: PUSH
33657: LD_INT 102
33659: PUSH
33660: LD_INT 103
33662: PUSH
33663: LD_INT 104
33665: PUSH
33666: LD_INT 105
33668: PUSH
33669: LD_INT 106
33671: PUSH
33672: LD_INT 107
33674: PUSH
33675: LD_INT 108
33677: PUSH
33678: LD_INT 109
33680: PUSH
33681: LD_INT 110
33683: PUSH
33684: LD_INT 111
33686: PUSH
33687: LD_INT 112
33689: PUSH
33690: LD_INT 113
33692: PUSH
33693: LD_INT 114
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: ST_TO_ADDR
33716: GO 34091
33718: LD_INT 18
33720: DOUBLE
33721: EQUAL
33722: IFTRUE 33726
33724: GO 33862
33726: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
33727: LD_ADDR_VAR 0 1
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: LD_INT 4
33737: PUSH
33738: LD_INT 5
33740: PUSH
33741: LD_INT 7
33743: PUSH
33744: LD_INT 11
33746: PUSH
33747: LD_INT 12
33749: PUSH
33750: LD_INT 15
33752: PUSH
33753: LD_INT 16
33755: PUSH
33756: LD_INT 20
33758: PUSH
33759: LD_INT 21
33761: PUSH
33762: LD_INT 22
33764: PUSH
33765: LD_INT 23
33767: PUSH
33768: LD_INT 25
33770: PUSH
33771: LD_INT 26
33773: PUSH
33774: LD_INT 30
33776: PUSH
33777: LD_INT 31
33779: PUSH
33780: LD_INT 32
33782: PUSH
33783: LD_INT 33
33785: PUSH
33786: LD_INT 34
33788: PUSH
33789: LD_INT 35
33791: PUSH
33792: LD_INT 36
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 101
33820: PUSH
33821: LD_INT 102
33823: PUSH
33824: LD_INT 103
33826: PUSH
33827: LD_INT 106
33829: PUSH
33830: LD_INT 108
33832: PUSH
33833: LD_INT 112
33835: PUSH
33836: LD_INT 113
33838: PUSH
33839: LD_INT 114
33841: PUSH
33842: LD_INT 115
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: ST_TO_ADDR
33860: GO 34091
33862: LD_INT 19
33864: DOUBLE
33865: EQUAL
33866: IFTRUE 33870
33868: GO 34090
33870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
33871: LD_ADDR_VAR 0 1
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 3
33884: PUSH
33885: LD_INT 4
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: LD_INT 6
33893: PUSH
33894: LD_INT 7
33896: PUSH
33897: LD_INT 8
33899: PUSH
33900: LD_INT 9
33902: PUSH
33903: LD_INT 10
33905: PUSH
33906: LD_INT 11
33908: PUSH
33909: LD_INT 12
33911: PUSH
33912: LD_INT 13
33914: PUSH
33915: LD_INT 14
33917: PUSH
33918: LD_INT 15
33920: PUSH
33921: LD_INT 16
33923: PUSH
33924: LD_INT 17
33926: PUSH
33927: LD_INT 18
33929: PUSH
33930: LD_INT 19
33932: PUSH
33933: LD_INT 20
33935: PUSH
33936: LD_INT 21
33938: PUSH
33939: LD_INT 22
33941: PUSH
33942: LD_INT 23
33944: PUSH
33945: LD_INT 24
33947: PUSH
33948: LD_INT 25
33950: PUSH
33951: LD_INT 26
33953: PUSH
33954: LD_INT 27
33956: PUSH
33957: LD_INT 28
33959: PUSH
33960: LD_INT 29
33962: PUSH
33963: LD_INT 30
33965: PUSH
33966: LD_INT 31
33968: PUSH
33969: LD_INT 32
33971: PUSH
33972: LD_INT 33
33974: PUSH
33975: LD_INT 34
33977: PUSH
33978: LD_INT 35
33980: PUSH
33981: LD_INT 36
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 101
34024: PUSH
34025: LD_INT 102
34027: PUSH
34028: LD_INT 103
34030: PUSH
34031: LD_INT 104
34033: PUSH
34034: LD_INT 105
34036: PUSH
34037: LD_INT 106
34039: PUSH
34040: LD_INT 107
34042: PUSH
34043: LD_INT 108
34045: PUSH
34046: LD_INT 109
34048: PUSH
34049: LD_INT 110
34051: PUSH
34052: LD_INT 111
34054: PUSH
34055: LD_INT 112
34057: PUSH
34058: LD_INT 113
34060: PUSH
34061: LD_INT 114
34063: PUSH
34064: LD_INT 115
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: ST_TO_ADDR
34088: GO 34091
34090: POP
// end else
34091: GO 34310
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
34093: LD_ADDR_VAR 0 1
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: LD_INT 4
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: LD_INT 6
34115: PUSH
34116: LD_INT 7
34118: PUSH
34119: LD_INT 8
34121: PUSH
34122: LD_INT 9
34124: PUSH
34125: LD_INT 10
34127: PUSH
34128: LD_INT 11
34130: PUSH
34131: LD_INT 12
34133: PUSH
34134: LD_INT 13
34136: PUSH
34137: LD_INT 14
34139: PUSH
34140: LD_INT 15
34142: PUSH
34143: LD_INT 16
34145: PUSH
34146: LD_INT 17
34148: PUSH
34149: LD_INT 18
34151: PUSH
34152: LD_INT 19
34154: PUSH
34155: LD_INT 20
34157: PUSH
34158: LD_INT 21
34160: PUSH
34161: LD_INT 22
34163: PUSH
34164: LD_INT 23
34166: PUSH
34167: LD_INT 24
34169: PUSH
34170: LD_INT 25
34172: PUSH
34173: LD_INT 26
34175: PUSH
34176: LD_INT 27
34178: PUSH
34179: LD_INT 28
34181: PUSH
34182: LD_INT 29
34184: PUSH
34185: LD_INT 30
34187: PUSH
34188: LD_INT 31
34190: PUSH
34191: LD_INT 32
34193: PUSH
34194: LD_INT 33
34196: PUSH
34197: LD_INT 34
34199: PUSH
34200: LD_INT 35
34202: PUSH
34203: LD_INT 36
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 101
34246: PUSH
34247: LD_INT 102
34249: PUSH
34250: LD_INT 103
34252: PUSH
34253: LD_INT 104
34255: PUSH
34256: LD_INT 105
34258: PUSH
34259: LD_INT 106
34261: PUSH
34262: LD_INT 107
34264: PUSH
34265: LD_INT 108
34267: PUSH
34268: LD_INT 109
34270: PUSH
34271: LD_INT 110
34273: PUSH
34274: LD_INT 111
34276: PUSH
34277: LD_INT 112
34279: PUSH
34280: LD_INT 113
34282: PUSH
34283: LD_INT 114
34285: PUSH
34286: LD_INT 115
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: ST_TO_ADDR
// if result then
34310: LD_VAR 0 1
34314: IFFALSE 34603
// begin normal :=  ;
34316: LD_ADDR_VAR 0 3
34320: PUSH
34321: LD_STRING 
34323: ST_TO_ADDR
// hardcore :=  ;
34324: LD_ADDR_VAR 0 4
34328: PUSH
34329: LD_STRING 
34331: ST_TO_ADDR
// for i = 1 to normalCounter do
34332: LD_ADDR_VAR 0 5
34336: PUSH
34337: DOUBLE
34338: LD_INT 1
34340: DEC
34341: ST_TO_ADDR
34342: LD_EXP 86
34346: PUSH
34347: FOR_TO
34348: IFFALSE 34449
// begin tmp := 0 ;
34350: LD_ADDR_VAR 0 2
34354: PUSH
34355: LD_STRING 0
34357: ST_TO_ADDR
// if result [ 1 ] then
34358: LD_VAR 0 1
34362: PUSH
34363: LD_INT 1
34365: ARRAY
34366: IFFALSE 34431
// if result [ 1 ] [ 1 ] = i then
34368: LD_VAR 0 1
34372: PUSH
34373: LD_INT 1
34375: ARRAY
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: PUSH
34381: LD_VAR 0 5
34385: EQUAL
34386: IFFALSE 34431
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
34388: LD_ADDR_VAR 0 1
34392: PUSH
34393: LD_VAR 0 1
34397: PPUSH
34398: LD_INT 1
34400: PPUSH
34401: LD_VAR 0 1
34405: PUSH
34406: LD_INT 1
34408: ARRAY
34409: PPUSH
34410: LD_INT 1
34412: PPUSH
34413: CALL_OW 3
34417: PPUSH
34418: CALL_OW 1
34422: ST_TO_ADDR
// tmp := 1 ;
34423: LD_ADDR_VAR 0 2
34427: PUSH
34428: LD_STRING 1
34430: ST_TO_ADDR
// end ; normal := normal & tmp ;
34431: LD_ADDR_VAR 0 3
34435: PUSH
34436: LD_VAR 0 3
34440: PUSH
34441: LD_VAR 0 2
34445: STR
34446: ST_TO_ADDR
// end ;
34447: GO 34347
34449: POP
34450: POP
// for i = 1 to hardcoreCounter do
34451: LD_ADDR_VAR 0 5
34455: PUSH
34456: DOUBLE
34457: LD_INT 1
34459: DEC
34460: ST_TO_ADDR
34461: LD_EXP 87
34465: PUSH
34466: FOR_TO
34467: IFFALSE 34572
// begin tmp := 0 ;
34469: LD_ADDR_VAR 0 2
34473: PUSH
34474: LD_STRING 0
34476: ST_TO_ADDR
// if result [ 2 ] then
34477: LD_VAR 0 1
34481: PUSH
34482: LD_INT 2
34484: ARRAY
34485: IFFALSE 34554
// if result [ 2 ] [ 1 ] = 100 + i then
34487: LD_VAR 0 1
34491: PUSH
34492: LD_INT 2
34494: ARRAY
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: PUSH
34500: LD_INT 100
34502: PUSH
34503: LD_VAR 0 5
34507: PLUS
34508: EQUAL
34509: IFFALSE 34554
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
34511: LD_ADDR_VAR 0 1
34515: PUSH
34516: LD_VAR 0 1
34520: PPUSH
34521: LD_INT 2
34523: PPUSH
34524: LD_VAR 0 1
34528: PUSH
34529: LD_INT 2
34531: ARRAY
34532: PPUSH
34533: LD_INT 1
34535: PPUSH
34536: CALL_OW 3
34540: PPUSH
34541: CALL_OW 1
34545: ST_TO_ADDR
// tmp := 1 ;
34546: LD_ADDR_VAR 0 2
34550: PUSH
34551: LD_STRING 1
34553: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
34554: LD_ADDR_VAR 0 4
34558: PUSH
34559: LD_VAR 0 4
34563: PUSH
34564: LD_VAR 0 2
34568: STR
34569: ST_TO_ADDR
// end ;
34570: GO 34466
34572: POP
34573: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
34574: LD_STRING getStreamItemsFromMission("
34576: PUSH
34577: LD_VAR 0 3
34581: STR
34582: PUSH
34583: LD_STRING ","
34585: STR
34586: PUSH
34587: LD_VAR 0 4
34591: STR
34592: PUSH
34593: LD_STRING ")
34595: STR
34596: PPUSH
34597: CALL_OW 559
// end else
34601: GO 34610
// ToLua ( getStreamItemsFromMission("","") ) ;
34603: LD_STRING getStreamItemsFromMission("","")
34605: PPUSH
34606: CALL_OW 559
// end ;
34610: LD_VAR 0 1
34614: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
34615: LD_EXP 85
34619: PUSH
34620: LD_EXP 90
34624: AND
34625: IFFALSE 34749
34627: GO 34629
34629: DISABLE
34630: LD_INT 0
34632: PPUSH
34633: PPUSH
// begin enable ;
34634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34635: LD_ADDR_VAR 0 2
34639: PUSH
34640: LD_INT 22
34642: PUSH
34643: LD_OWVAR 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 34
34657: PUSH
34658: LD_INT 7
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 34
34667: PUSH
34668: LD_INT 45
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 34
34677: PUSH
34678: LD_INT 28
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 34
34687: PUSH
34688: LD_INT 47
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PPUSH
34706: CALL_OW 69
34710: ST_TO_ADDR
// if not tmp then
34711: LD_VAR 0 2
34715: NOT
34716: IFFALSE 34720
// exit ;
34718: GO 34749
// for i in tmp do
34720: LD_ADDR_VAR 0 1
34724: PUSH
34725: LD_VAR 0 2
34729: PUSH
34730: FOR_IN
34731: IFFALSE 34747
// begin SetLives ( i , 0 ) ;
34733: LD_VAR 0 1
34737: PPUSH
34738: LD_INT 0
34740: PPUSH
34741: CALL_OW 234
// end ;
34745: GO 34730
34747: POP
34748: POP
// end ;
34749: PPOPN 2
34751: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34752: LD_EXP 85
34756: PUSH
34757: LD_EXP 91
34761: AND
34762: IFFALSE 34846
34764: GO 34766
34766: DISABLE
34767: LD_INT 0
34769: PPUSH
34770: PPUSH
// begin enable ;
34771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34772: LD_ADDR_VAR 0 2
34776: PUSH
34777: LD_INT 22
34779: PUSH
34780: LD_OWVAR 2
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 32
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PPUSH
34803: CALL_OW 69
34807: ST_TO_ADDR
// if not tmp then
34808: LD_VAR 0 2
34812: NOT
34813: IFFALSE 34817
// exit ;
34815: GO 34846
// for i in tmp do
34817: LD_ADDR_VAR 0 1
34821: PUSH
34822: LD_VAR 0 2
34826: PUSH
34827: FOR_IN
34828: IFFALSE 34844
// begin SetLives ( i , 0 ) ;
34830: LD_VAR 0 1
34834: PPUSH
34835: LD_INT 0
34837: PPUSH
34838: CALL_OW 234
// end ;
34842: GO 34827
34844: POP
34845: POP
// end ;
34846: PPOPN 2
34848: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34849: LD_EXP 85
34853: PUSH
34854: LD_EXP 88
34858: AND
34859: IFFALSE 34952
34861: GO 34863
34863: DISABLE
34864: LD_INT 0
34866: PPUSH
// begin enable ;
34867: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34868: LD_ADDR_VAR 0 1
34872: PUSH
34873: LD_INT 22
34875: PUSH
34876: LD_OWVAR 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 25
34890: PUSH
34891: LD_INT 5
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 25
34900: PUSH
34901: LD_INT 9
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 25
34910: PUSH
34911: LD_INT 8
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PPUSH
34928: CALL_OW 69
34932: PUSH
34933: FOR_IN
34934: IFFALSE 34950
// begin SetClass ( i , 1 ) ;
34936: LD_VAR 0 1
34940: PPUSH
34941: LD_INT 1
34943: PPUSH
34944: CALL_OW 336
// end ;
34948: GO 34933
34950: POP
34951: POP
// end ;
34952: PPOPN 1
34954: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
34955: LD_EXP 85
34959: PUSH
34960: LD_EXP 89
34964: AND
34965: PUSH
34966: LD_OWVAR 65
34970: PUSH
34971: LD_INT 7
34973: LESS
34974: AND
34975: IFFALSE 34989
34977: GO 34979
34979: DISABLE
// begin enable ;
34980: ENABLE
// game_speed := 7 ;
34981: LD_ADDR_OWVAR 65
34985: PUSH
34986: LD_INT 7
34988: ST_TO_ADDR
// end ;
34989: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
34990: LD_EXP 85
34994: PUSH
34995: LD_EXP 92
34999: AND
35000: IFFALSE 35202
35002: GO 35004
35004: DISABLE
35005: LD_INT 0
35007: PPUSH
35008: PPUSH
35009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_INT 81
35017: PUSH
35018: LD_OWVAR 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 21
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PPUSH
35041: CALL_OW 69
35045: ST_TO_ADDR
// if not tmp then
35046: LD_VAR 0 3
35050: NOT
35051: IFFALSE 35055
// exit ;
35053: GO 35202
// if tmp > 5 then
35055: LD_VAR 0 3
35059: PUSH
35060: LD_INT 5
35062: GREATER
35063: IFFALSE 35075
// k := 5 else
35065: LD_ADDR_VAR 0 2
35069: PUSH
35070: LD_INT 5
35072: ST_TO_ADDR
35073: GO 35085
// k := tmp ;
35075: LD_ADDR_VAR 0 2
35079: PUSH
35080: LD_VAR 0 3
35084: ST_TO_ADDR
// for i := 1 to k do
35085: LD_ADDR_VAR 0 1
35089: PUSH
35090: DOUBLE
35091: LD_INT 1
35093: DEC
35094: ST_TO_ADDR
35095: LD_VAR 0 2
35099: PUSH
35100: FOR_TO
35101: IFFALSE 35200
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
35103: LD_VAR 0 3
35107: PUSH
35108: LD_VAR 0 1
35112: ARRAY
35113: PPUSH
35114: LD_VAR 0 1
35118: PUSH
35119: LD_INT 4
35121: MOD
35122: PUSH
35123: LD_INT 1
35125: PLUS
35126: PPUSH
35127: CALL_OW 259
35131: PUSH
35132: LD_INT 10
35134: LESS
35135: IFFALSE 35198
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
35137: LD_VAR 0 3
35141: PUSH
35142: LD_VAR 0 1
35146: ARRAY
35147: PPUSH
35148: LD_VAR 0 1
35152: PUSH
35153: LD_INT 4
35155: MOD
35156: PUSH
35157: LD_INT 1
35159: PLUS
35160: PPUSH
35161: LD_VAR 0 3
35165: PUSH
35166: LD_VAR 0 1
35170: ARRAY
35171: PPUSH
35172: LD_VAR 0 1
35176: PUSH
35177: LD_INT 4
35179: MOD
35180: PUSH
35181: LD_INT 1
35183: PLUS
35184: PPUSH
35185: CALL_OW 259
35189: PUSH
35190: LD_INT 1
35192: PLUS
35193: PPUSH
35194: CALL_OW 237
35198: GO 35100
35200: POP
35201: POP
// end ;
35202: PPOPN 3
35204: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35205: LD_EXP 85
35209: PUSH
35210: LD_EXP 93
35214: AND
35215: IFFALSE 35235
35217: GO 35219
35219: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35220: LD_INT 4
35222: PPUSH
35223: LD_OWVAR 2
35227: PPUSH
35228: LD_INT 0
35230: PPUSH
35231: CALL_OW 324
35235: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35236: LD_EXP 85
35240: PUSH
35241: LD_EXP 122
35245: AND
35246: IFFALSE 35266
35248: GO 35250
35250: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35251: LD_INT 19
35253: PPUSH
35254: LD_OWVAR 2
35258: PPUSH
35259: LD_INT 0
35261: PPUSH
35262: CALL_OW 324
35266: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35267: LD_EXP 85
35271: PUSH
35272: LD_EXP 94
35276: AND
35277: IFFALSE 35379
35279: GO 35281
35281: DISABLE
35282: LD_INT 0
35284: PPUSH
35285: PPUSH
// begin enable ;
35286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35287: LD_ADDR_VAR 0 2
35291: PUSH
35292: LD_INT 22
35294: PUSH
35295: LD_OWVAR 2
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: LD_INT 34
35309: PUSH
35310: LD_INT 11
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 34
35319: PUSH
35320: LD_INT 30
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PPUSH
35336: CALL_OW 69
35340: ST_TO_ADDR
// if not tmp then
35341: LD_VAR 0 2
35345: NOT
35346: IFFALSE 35350
// exit ;
35348: GO 35379
// for i in tmp do
35350: LD_ADDR_VAR 0 1
35354: PUSH
35355: LD_VAR 0 2
35359: PUSH
35360: FOR_IN
35361: IFFALSE 35377
// begin SetLives ( i , 0 ) ;
35363: LD_VAR 0 1
35367: PPUSH
35368: LD_INT 0
35370: PPUSH
35371: CALL_OW 234
// end ;
35375: GO 35360
35377: POP
35378: POP
// end ;
35379: PPOPN 2
35381: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35382: LD_EXP 85
35386: PUSH
35387: LD_EXP 95
35391: AND
35392: IFFALSE 35412
35394: GO 35396
35396: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35397: LD_INT 32
35399: PPUSH
35400: LD_OWVAR 2
35404: PPUSH
35405: LD_INT 0
35407: PPUSH
35408: CALL_OW 324
35412: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35413: LD_EXP 85
35417: PUSH
35418: LD_EXP 96
35422: AND
35423: IFFALSE 35604
35425: GO 35427
35427: DISABLE
35428: LD_INT 0
35430: PPUSH
35431: PPUSH
35432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35433: LD_ADDR_VAR 0 2
35437: PUSH
35438: LD_INT 22
35440: PUSH
35441: LD_OWVAR 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 33
35452: PUSH
35453: LD_INT 3
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PPUSH
35464: CALL_OW 69
35468: ST_TO_ADDR
// if not tmp then
35469: LD_VAR 0 2
35473: NOT
35474: IFFALSE 35478
// exit ;
35476: GO 35604
// side := 0 ;
35478: LD_ADDR_VAR 0 3
35482: PUSH
35483: LD_INT 0
35485: ST_TO_ADDR
// for i := 1 to 8 do
35486: LD_ADDR_VAR 0 1
35490: PUSH
35491: DOUBLE
35492: LD_INT 1
35494: DEC
35495: ST_TO_ADDR
35496: LD_INT 8
35498: PUSH
35499: FOR_TO
35500: IFFALSE 35548
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
35502: LD_OWVAR 2
35506: PUSH
35507: LD_VAR 0 1
35511: NONEQUAL
35512: PUSH
35513: LD_OWVAR 2
35517: PPUSH
35518: LD_VAR 0 1
35522: PPUSH
35523: CALL_OW 81
35527: PUSH
35528: LD_INT 2
35530: EQUAL
35531: AND
35532: IFFALSE 35546
// begin side := i ;
35534: LD_ADDR_VAR 0 3
35538: PUSH
35539: LD_VAR 0 1
35543: ST_TO_ADDR
// break ;
35544: GO 35548
// end ;
35546: GO 35499
35548: POP
35549: POP
// if not side then
35550: LD_VAR 0 3
35554: NOT
35555: IFFALSE 35559
// exit ;
35557: GO 35604
// for i := 1 to tmp do
35559: LD_ADDR_VAR 0 1
35563: PUSH
35564: DOUBLE
35565: LD_INT 1
35567: DEC
35568: ST_TO_ADDR
35569: LD_VAR 0 2
35573: PUSH
35574: FOR_TO
35575: IFFALSE 35602
// if Prob ( 60 ) then
35577: LD_INT 60
35579: PPUSH
35580: CALL_OW 13
35584: IFFALSE 35600
// SetSide ( i , side ) ;
35586: LD_VAR 0 1
35590: PPUSH
35591: LD_VAR 0 3
35595: PPUSH
35596: CALL_OW 235
35600: GO 35574
35602: POP
35603: POP
// end ;
35604: PPOPN 3
35606: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
35607: LD_EXP 85
35611: PUSH
35612: LD_EXP 98
35616: AND
35617: IFFALSE 35736
35619: GO 35621
35621: DISABLE
35622: LD_INT 0
35624: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35625: LD_ADDR_VAR 0 1
35629: PUSH
35630: LD_INT 22
35632: PUSH
35633: LD_OWVAR 2
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 21
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: LD_INT 23
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: PPUSH
35674: CALL_OW 69
35678: PUSH
35679: FOR_IN
35680: IFFALSE 35734
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35682: LD_VAR 0 1
35686: PPUSH
35687: CALL_OW 257
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: LD_INT 4
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: IN
35710: IFFALSE 35732
// SetClass ( un , rand ( 1 , 4 ) ) ;
35712: LD_VAR 0 1
35716: PPUSH
35717: LD_INT 1
35719: PPUSH
35720: LD_INT 4
35722: PPUSH
35723: CALL_OW 12
35727: PPUSH
35728: CALL_OW 336
35732: GO 35679
35734: POP
35735: POP
// end ;
35736: PPOPN 1
35738: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35739: LD_EXP 85
35743: PUSH
35744: LD_EXP 97
35748: AND
35749: IFFALSE 35828
35751: GO 35753
35753: DISABLE
35754: LD_INT 0
35756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35757: LD_ADDR_VAR 0 1
35761: PUSH
35762: LD_INT 22
35764: PUSH
35765: LD_OWVAR 2
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 21
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PPUSH
35788: CALL_OW 69
35792: ST_TO_ADDR
// if not tmp then
35793: LD_VAR 0 1
35797: NOT
35798: IFFALSE 35802
// exit ;
35800: GO 35828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35802: LD_VAR 0 1
35806: PUSH
35807: LD_INT 1
35809: PPUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 12
35819: ARRAY
35820: PPUSH
35821: LD_INT 100
35823: PPUSH
35824: CALL_OW 234
// end ;
35828: PPOPN 1
35830: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35831: LD_EXP 85
35835: PUSH
35836: LD_EXP 99
35840: AND
35841: IFFALSE 35939
35843: GO 35845
35845: DISABLE
35846: LD_INT 0
35848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35849: LD_ADDR_VAR 0 1
35853: PUSH
35854: LD_INT 22
35856: PUSH
35857: LD_OWVAR 2
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 21
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PPUSH
35880: CALL_OW 69
35884: ST_TO_ADDR
// if not tmp then
35885: LD_VAR 0 1
35889: NOT
35890: IFFALSE 35894
// exit ;
35892: GO 35939
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35894: LD_VAR 0 1
35898: PUSH
35899: LD_INT 1
35901: PPUSH
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 12
35911: ARRAY
35912: PPUSH
35913: LD_INT 1
35915: PPUSH
35916: LD_INT 4
35918: PPUSH
35919: CALL_OW 12
35923: PPUSH
35924: LD_INT 3000
35926: PPUSH
35927: LD_INT 9000
35929: PPUSH
35930: CALL_OW 12
35934: PPUSH
35935: CALL_OW 492
// end ;
35939: PPOPN 1
35941: END
// every 0 0$1 trigger StreamModeActive and sDepot do
35942: LD_EXP 85
35946: PUSH
35947: LD_EXP 100
35951: AND
35952: IFFALSE 35972
35954: GO 35956
35956: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
35957: LD_INT 1
35959: PPUSH
35960: LD_OWVAR 2
35964: PPUSH
35965: LD_INT 0
35967: PPUSH
35968: CALL_OW 324
35972: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
35973: LD_EXP 85
35977: PUSH
35978: LD_EXP 101
35982: AND
35983: IFFALSE 36066
35985: GO 35987
35987: DISABLE
35988: LD_INT 0
35990: PPUSH
35991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35992: LD_ADDR_VAR 0 2
35996: PUSH
35997: LD_INT 22
35999: PUSH
36000: LD_OWVAR 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 21
36011: PUSH
36012: LD_INT 3
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PPUSH
36023: CALL_OW 69
36027: ST_TO_ADDR
// if not tmp then
36028: LD_VAR 0 2
36032: NOT
36033: IFFALSE 36037
// exit ;
36035: GO 36066
// for i in tmp do
36037: LD_ADDR_VAR 0 1
36041: PUSH
36042: LD_VAR 0 2
36046: PUSH
36047: FOR_IN
36048: IFFALSE 36064
// SetBLevel ( i , 10 ) ;
36050: LD_VAR 0 1
36054: PPUSH
36055: LD_INT 10
36057: PPUSH
36058: CALL_OW 241
36062: GO 36047
36064: POP
36065: POP
// end ;
36066: PPOPN 2
36068: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
36069: LD_EXP 85
36073: PUSH
36074: LD_EXP 102
36078: AND
36079: IFFALSE 36190
36081: GO 36083
36083: DISABLE
36084: LD_INT 0
36086: PPUSH
36087: PPUSH
36088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: LD_INT 22
36096: PUSH
36097: LD_OWVAR 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 25
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PPUSH
36120: CALL_OW 69
36124: ST_TO_ADDR
// if not tmp then
36125: LD_VAR 0 3
36129: NOT
36130: IFFALSE 36134
// exit ;
36132: GO 36190
// un := tmp [ rand ( 1 , tmp ) ] ;
36134: LD_ADDR_VAR 0 2
36138: PUSH
36139: LD_VAR 0 3
36143: PUSH
36144: LD_INT 1
36146: PPUSH
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 12
36156: ARRAY
36157: ST_TO_ADDR
// if Crawls ( un ) then
36158: LD_VAR 0 2
36162: PPUSH
36163: CALL_OW 318
36167: IFFALSE 36178
// ComWalk ( un ) ;
36169: LD_VAR 0 2
36173: PPUSH
36174: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36178: LD_VAR 0 2
36182: PPUSH
36183: LD_INT 5
36185: PPUSH
36186: CALL_OW 336
// end ;
36190: PPOPN 3
36192: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
36193: LD_EXP 85
36197: PUSH
36198: LD_EXP 103
36202: AND
36203: PUSH
36204: LD_OWVAR 67
36208: PUSH
36209: LD_INT 3
36211: LESS
36212: AND
36213: IFFALSE 36232
36215: GO 36217
36217: DISABLE
// Difficulty := Difficulty + 1 ;
36218: LD_ADDR_OWVAR 67
36222: PUSH
36223: LD_OWVAR 67
36227: PUSH
36228: LD_INT 1
36230: PLUS
36231: ST_TO_ADDR
36232: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36233: LD_EXP 85
36237: PUSH
36238: LD_EXP 104
36242: AND
36243: IFFALSE 36346
36245: GO 36247
36247: DISABLE
36248: LD_INT 0
36250: PPUSH
// begin for i := 1 to 5 do
36251: LD_ADDR_VAR 0 1
36255: PUSH
36256: DOUBLE
36257: LD_INT 1
36259: DEC
36260: ST_TO_ADDR
36261: LD_INT 5
36263: PUSH
36264: FOR_TO
36265: IFFALSE 36344
// begin uc_nation := nation_nature ;
36267: LD_ADDR_OWVAR 21
36271: PUSH
36272: LD_INT 0
36274: ST_TO_ADDR
// uc_side := 0 ;
36275: LD_ADDR_OWVAR 20
36279: PUSH
36280: LD_INT 0
36282: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36283: LD_ADDR_OWVAR 29
36287: PUSH
36288: LD_INT 12
36290: PUSH
36291: LD_INT 12
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: ST_TO_ADDR
// hc_agressivity := 20 ;
36298: LD_ADDR_OWVAR 35
36302: PUSH
36303: LD_INT 20
36305: ST_TO_ADDR
// hc_class := class_tiger ;
36306: LD_ADDR_OWVAR 28
36310: PUSH
36311: LD_INT 14
36313: ST_TO_ADDR
// hc_gallery :=  ;
36314: LD_ADDR_OWVAR 33
36318: PUSH
36319: LD_STRING 
36321: ST_TO_ADDR
// hc_name :=  ;
36322: LD_ADDR_OWVAR 26
36326: PUSH
36327: LD_STRING 
36329: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36330: CALL_OW 44
36334: PPUSH
36335: LD_INT 0
36337: PPUSH
36338: CALL_OW 51
// end ;
36342: GO 36264
36344: POP
36345: POP
// end ;
36346: PPOPN 1
36348: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36349: LD_EXP 85
36353: PUSH
36354: LD_EXP 105
36358: AND
36359: IFFALSE 36368
36361: GO 36363
36363: DISABLE
// StreamSibBomb ;
36364: CALL 36369 0 0
36368: END
// export function StreamSibBomb ; var i , x , y ; begin
36369: LD_INT 0
36371: PPUSH
36372: PPUSH
36373: PPUSH
36374: PPUSH
// result := false ;
36375: LD_ADDR_VAR 0 1
36379: PUSH
36380: LD_INT 0
36382: ST_TO_ADDR
// for i := 1 to 16 do
36383: LD_ADDR_VAR 0 2
36387: PUSH
36388: DOUBLE
36389: LD_INT 1
36391: DEC
36392: ST_TO_ADDR
36393: LD_INT 16
36395: PUSH
36396: FOR_TO
36397: IFFALSE 36596
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36399: LD_ADDR_VAR 0 3
36403: PUSH
36404: LD_INT 10
36406: PUSH
36407: LD_INT 20
36409: PUSH
36410: LD_INT 30
36412: PUSH
36413: LD_INT 40
36415: PUSH
36416: LD_INT 50
36418: PUSH
36419: LD_INT 60
36421: PUSH
36422: LD_INT 70
36424: PUSH
36425: LD_INT 80
36427: PUSH
36428: LD_INT 90
36430: PUSH
36431: LD_INT 100
36433: PUSH
36434: LD_INT 110
36436: PUSH
36437: LD_INT 120
36439: PUSH
36440: LD_INT 130
36442: PUSH
36443: LD_INT 140
36445: PUSH
36446: LD_INT 150
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: PPUSH
36469: LD_INT 15
36471: PPUSH
36472: CALL_OW 12
36476: ARRAY
36477: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: LD_INT 10
36485: PUSH
36486: LD_INT 20
36488: PUSH
36489: LD_INT 30
36491: PUSH
36492: LD_INT 40
36494: PUSH
36495: LD_INT 50
36497: PUSH
36498: LD_INT 60
36500: PUSH
36501: LD_INT 70
36503: PUSH
36504: LD_INT 80
36506: PUSH
36507: LD_INT 90
36509: PUSH
36510: LD_INT 100
36512: PUSH
36513: LD_INT 110
36515: PUSH
36516: LD_INT 120
36518: PUSH
36519: LD_INT 130
36521: PUSH
36522: LD_INT 140
36524: PUSH
36525: LD_INT 150
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: PPUSH
36548: LD_INT 15
36550: PPUSH
36551: CALL_OW 12
36555: ARRAY
36556: ST_TO_ADDR
// if ValidHex ( x , y ) then
36557: LD_VAR 0 3
36561: PPUSH
36562: LD_VAR 0 4
36566: PPUSH
36567: CALL_OW 488
36571: IFFALSE 36594
// begin result := [ x , y ] ;
36573: LD_ADDR_VAR 0 1
36577: PUSH
36578: LD_VAR 0 3
36582: PUSH
36583: LD_VAR 0 4
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// break ;
36592: GO 36596
// end ; end ;
36594: GO 36396
36596: POP
36597: POP
// if result then
36598: LD_VAR 0 1
36602: IFFALSE 36662
// begin ToLua ( playSibBomb() ) ;
36604: LD_STRING playSibBomb()
36606: PPUSH
36607: CALL_OW 559
// wait ( 0 0$14 ) ;
36611: LD_INT 490
36613: PPUSH
36614: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36618: LD_VAR 0 1
36622: PUSH
36623: LD_INT 1
36625: ARRAY
36626: PPUSH
36627: LD_VAR 0 1
36631: PUSH
36632: LD_INT 2
36634: ARRAY
36635: PPUSH
36636: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36640: LD_VAR 0 1
36644: PUSH
36645: LD_INT 1
36647: ARRAY
36648: PPUSH
36649: LD_VAR 0 1
36653: PUSH
36654: LD_INT 2
36656: ARRAY
36657: PPUSH
36658: CALL_OW 429
// end ; end ;
36662: LD_VAR 0 1
36666: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36667: LD_EXP 85
36671: PUSH
36672: LD_EXP 107
36676: AND
36677: IFFALSE 36689
36679: GO 36681
36681: DISABLE
// YouLost (  ) ;
36682: LD_STRING 
36684: PPUSH
36685: CALL_OW 104
36689: END
// every 0 0$1 trigger StreamModeActive and sFog do
36690: LD_EXP 85
36694: PUSH
36695: LD_EXP 106
36699: AND
36700: IFFALSE 36714
36702: GO 36704
36704: DISABLE
// FogOff ( your_side ) ;
36705: LD_OWVAR 2
36709: PPUSH
36710: CALL_OW 344
36714: END
// every 0 0$1 trigger StreamModeActive and sSun do
36715: LD_EXP 85
36719: PUSH
36720: LD_EXP 108
36724: AND
36725: IFFALSE 36753
36727: GO 36729
36729: DISABLE
// begin solar_recharge_percent := 0 ;
36730: LD_ADDR_OWVAR 79
36734: PUSH
36735: LD_INT 0
36737: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36738: LD_INT 10500
36740: PPUSH
36741: CALL_OW 67
// solar_recharge_percent := 100 ;
36745: LD_ADDR_OWVAR 79
36749: PUSH
36750: LD_INT 100
36752: ST_TO_ADDR
// end ;
36753: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36754: LD_EXP 85
36758: PUSH
36759: LD_EXP 109
36763: AND
36764: IFFALSE 37003
36766: GO 36768
36768: DISABLE
36769: LD_INT 0
36771: PPUSH
36772: PPUSH
36773: PPUSH
// begin tmp := [ ] ;
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: EMPTY
36780: ST_TO_ADDR
// for i := 1 to 6 do
36781: LD_ADDR_VAR 0 1
36785: PUSH
36786: DOUBLE
36787: LD_INT 1
36789: DEC
36790: ST_TO_ADDR
36791: LD_INT 6
36793: PUSH
36794: FOR_TO
36795: IFFALSE 36900
// begin uc_nation := nation_nature ;
36797: LD_ADDR_OWVAR 21
36801: PUSH
36802: LD_INT 0
36804: ST_TO_ADDR
// uc_side := 0 ;
36805: LD_ADDR_OWVAR 20
36809: PUSH
36810: LD_INT 0
36812: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36813: LD_ADDR_OWVAR 29
36817: PUSH
36818: LD_INT 12
36820: PUSH
36821: LD_INT 12
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: ST_TO_ADDR
// hc_agressivity := 20 ;
36828: LD_ADDR_OWVAR 35
36832: PUSH
36833: LD_INT 20
36835: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36836: LD_ADDR_OWVAR 28
36840: PUSH
36841: LD_INT 17
36843: ST_TO_ADDR
// hc_gallery :=  ;
36844: LD_ADDR_OWVAR 33
36848: PUSH
36849: LD_STRING 
36851: ST_TO_ADDR
// hc_name :=  ;
36852: LD_ADDR_OWVAR 26
36856: PUSH
36857: LD_STRING 
36859: ST_TO_ADDR
// un := CreateHuman ;
36860: LD_ADDR_VAR 0 2
36864: PUSH
36865: CALL_OW 44
36869: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36870: LD_VAR 0 2
36874: PPUSH
36875: LD_INT 1
36877: PPUSH
36878: CALL_OW 51
// tmp := tmp ^ un ;
36882: LD_ADDR_VAR 0 3
36886: PUSH
36887: LD_VAR 0 3
36891: PUSH
36892: LD_VAR 0 2
36896: ADD
36897: ST_TO_ADDR
// end ;
36898: GO 36794
36900: POP
36901: POP
// repeat wait ( 0 0$1 ) ;
36902: LD_INT 35
36904: PPUSH
36905: CALL_OW 67
// for un in tmp do
36909: LD_ADDR_VAR 0 2
36913: PUSH
36914: LD_VAR 0 3
36918: PUSH
36919: FOR_IN
36920: IFFALSE 36994
// begin if IsDead ( un ) then
36922: LD_VAR 0 2
36926: PPUSH
36927: CALL_OW 301
36931: IFFALSE 36951
// begin tmp := tmp diff un ;
36933: LD_ADDR_VAR 0 3
36937: PUSH
36938: LD_VAR 0 3
36942: PUSH
36943: LD_VAR 0 2
36947: DIFF
36948: ST_TO_ADDR
// continue ;
36949: GO 36919
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
36951: LD_VAR 0 2
36955: PPUSH
36956: LD_INT 3
36958: PUSH
36959: LD_INT 22
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PPUSH
36973: CALL_OW 69
36977: PPUSH
36978: LD_VAR 0 2
36982: PPUSH
36983: CALL_OW 74
36987: PPUSH
36988: CALL_OW 115
// end ;
36992: GO 36919
36994: POP
36995: POP
// until not tmp ;
36996: LD_VAR 0 3
37000: NOT
37001: IFFALSE 36902
// end ;
37003: PPOPN 3
37005: END
// every 0 0$1 trigger StreamModeActive and sTroll do
37006: LD_EXP 85
37010: PUSH
37011: LD_EXP 110
37015: AND
37016: IFFALSE 37070
37018: GO 37020
37020: DISABLE
// begin ToLua ( displayTroll(); ) ;
37021: LD_STRING displayTroll();
37023: PPUSH
37024: CALL_OW 559
// wait ( 3 3$00 ) ;
37028: LD_INT 6300
37030: PPUSH
37031: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37035: LD_STRING hideTroll();
37037: PPUSH
37038: CALL_OW 559
// wait ( 1 1$00 ) ;
37042: LD_INT 2100
37044: PPUSH
37045: CALL_OW 67
// ToLua ( displayTroll(); ) ;
37049: LD_STRING displayTroll();
37051: PPUSH
37052: CALL_OW 559
// wait ( 1 1$00 ) ;
37056: LD_INT 2100
37058: PPUSH
37059: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37063: LD_STRING hideTroll();
37065: PPUSH
37066: CALL_OW 559
// end ;
37070: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
37071: LD_EXP 85
37075: PUSH
37076: LD_EXP 111
37080: AND
37081: IFFALSE 37144
37083: GO 37085
37085: DISABLE
37086: LD_INT 0
37088: PPUSH
// begin p := 0 ;
37089: LD_ADDR_VAR 0 1
37093: PUSH
37094: LD_INT 0
37096: ST_TO_ADDR
// repeat game_speed := 1 ;
37097: LD_ADDR_OWVAR 65
37101: PUSH
37102: LD_INT 1
37104: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37105: LD_INT 35
37107: PPUSH
37108: CALL_OW 67
// p := p + 1 ;
37112: LD_ADDR_VAR 0 1
37116: PUSH
37117: LD_VAR 0 1
37121: PUSH
37122: LD_INT 1
37124: PLUS
37125: ST_TO_ADDR
// until p >= 60 ;
37126: LD_VAR 0 1
37130: PUSH
37131: LD_INT 60
37133: GREATEREQUAL
37134: IFFALSE 37097
// game_speed := 4 ;
37136: LD_ADDR_OWVAR 65
37140: PUSH
37141: LD_INT 4
37143: ST_TO_ADDR
// end ;
37144: PPOPN 1
37146: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37147: LD_EXP 85
37151: PUSH
37152: LD_EXP 112
37156: AND
37157: IFFALSE 37303
37159: GO 37161
37161: DISABLE
37162: LD_INT 0
37164: PPUSH
37165: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37166: LD_ADDR_VAR 0 1
37170: PUSH
37171: LD_INT 22
37173: PUSH
37174: LD_OWVAR 2
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 30
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 30
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: LIST
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PPUSH
37215: CALL_OW 69
37219: ST_TO_ADDR
// if not depot then
37220: LD_VAR 0 1
37224: NOT
37225: IFFALSE 37229
// exit ;
37227: GO 37303
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37229: LD_ADDR_VAR 0 2
37233: PUSH
37234: LD_VAR 0 1
37238: PUSH
37239: LD_INT 1
37241: PPUSH
37242: LD_VAR 0 1
37246: PPUSH
37247: CALL_OW 12
37251: ARRAY
37252: PPUSH
37253: CALL_OW 274
37257: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37258: LD_VAR 0 2
37262: PPUSH
37263: LD_INT 1
37265: PPUSH
37266: LD_INT 0
37268: PPUSH
37269: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37273: LD_VAR 0 2
37277: PPUSH
37278: LD_INT 2
37280: PPUSH
37281: LD_INT 0
37283: PPUSH
37284: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37288: LD_VAR 0 2
37292: PPUSH
37293: LD_INT 3
37295: PPUSH
37296: LD_INT 0
37298: PPUSH
37299: CALL_OW 277
// end ;
37303: PPOPN 2
37305: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37306: LD_EXP 85
37310: PUSH
37311: LD_EXP 113
37315: AND
37316: IFFALSE 37413
37318: GO 37320
37320: DISABLE
37321: LD_INT 0
37323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37324: LD_ADDR_VAR 0 1
37328: PUSH
37329: LD_INT 22
37331: PUSH
37332: LD_OWVAR 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 21
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 3
37353: PUSH
37354: LD_INT 23
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: LIST
37372: PPUSH
37373: CALL_OW 69
37377: ST_TO_ADDR
// if not tmp then
37378: LD_VAR 0 1
37382: NOT
37383: IFFALSE 37387
// exit ;
37385: GO 37413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37387: LD_VAR 0 1
37391: PUSH
37392: LD_INT 1
37394: PPUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 12
37404: ARRAY
37405: PPUSH
37406: LD_INT 200
37408: PPUSH
37409: CALL_OW 234
// end ;
37413: PPOPN 1
37415: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37416: LD_EXP 85
37420: PUSH
37421: LD_EXP 114
37425: AND
37426: IFFALSE 37505
37428: GO 37430
37430: DISABLE
37431: LD_INT 0
37433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37434: LD_ADDR_VAR 0 1
37438: PUSH
37439: LD_INT 22
37441: PUSH
37442: LD_OWVAR 2
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 21
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PPUSH
37465: CALL_OW 69
37469: ST_TO_ADDR
// if not tmp then
37470: LD_VAR 0 1
37474: NOT
37475: IFFALSE 37479
// exit ;
37477: GO 37505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
37479: LD_VAR 0 1
37483: PUSH
37484: LD_INT 1
37486: PPUSH
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL_OW 12
37496: ARRAY
37497: PPUSH
37498: LD_INT 60
37500: PPUSH
37501: CALL_OW 234
// end ;
37505: PPOPN 1
37507: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
37508: LD_EXP 85
37512: PUSH
37513: LD_EXP 115
37517: AND
37518: IFFALSE 37617
37520: GO 37522
37522: DISABLE
37523: LD_INT 0
37525: PPUSH
37526: PPUSH
// begin enable ;
37527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
37528: LD_ADDR_VAR 0 1
37532: PUSH
37533: LD_INT 22
37535: PUSH
37536: LD_OWVAR 2
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 61
37547: PUSH
37548: EMPTY
37549: LIST
37550: PUSH
37551: LD_INT 33
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: PPUSH
37566: CALL_OW 69
37570: ST_TO_ADDR
// if not tmp then
37571: LD_VAR 0 1
37575: NOT
37576: IFFALSE 37580
// exit ;
37578: GO 37617
// for i in tmp do
37580: LD_ADDR_VAR 0 2
37584: PUSH
37585: LD_VAR 0 1
37589: PUSH
37590: FOR_IN
37591: IFFALSE 37615
// if IsControledBy ( i ) then
37593: LD_VAR 0 2
37597: PPUSH
37598: CALL_OW 312
37602: IFFALSE 37613
// ComUnlink ( i ) ;
37604: LD_VAR 0 2
37608: PPUSH
37609: CALL_OW 136
37613: GO 37590
37615: POP
37616: POP
// end ;
37617: PPOPN 2
37619: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37620: LD_EXP 85
37624: PUSH
37625: LD_EXP 116
37629: AND
37630: IFFALSE 37770
37632: GO 37634
37634: DISABLE
37635: LD_INT 0
37637: PPUSH
37638: PPUSH
// begin ToLua ( displayPowell(); ) ;
37639: LD_STRING displayPowell();
37641: PPUSH
37642: CALL_OW 559
// uc_side := 0 ;
37646: LD_ADDR_OWVAR 20
37650: PUSH
37651: LD_INT 0
37653: ST_TO_ADDR
// uc_nation := 2 ;
37654: LD_ADDR_OWVAR 21
37658: PUSH
37659: LD_INT 2
37661: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37662: LD_ADDR_OWVAR 37
37666: PUSH
37667: LD_INT 14
37669: ST_TO_ADDR
// vc_engine := engine_siberite ;
37670: LD_ADDR_OWVAR 39
37674: PUSH
37675: LD_INT 3
37677: ST_TO_ADDR
// vc_control := control_apeman ;
37678: LD_ADDR_OWVAR 38
37682: PUSH
37683: LD_INT 5
37685: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37686: LD_ADDR_OWVAR 40
37690: PUSH
37691: LD_INT 29
37693: ST_TO_ADDR
// un := CreateVehicle ;
37694: LD_ADDR_VAR 0 2
37698: PUSH
37699: CALL_OW 45
37703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37704: LD_VAR 0 2
37708: PPUSH
37709: LD_INT 1
37711: PPUSH
37712: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37716: LD_INT 35
37718: PPUSH
37719: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37723: LD_VAR 0 2
37727: PPUSH
37728: LD_INT 22
37730: PUSH
37731: LD_OWVAR 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PPUSH
37740: CALL_OW 69
37744: PPUSH
37745: LD_VAR 0 2
37749: PPUSH
37750: CALL_OW 74
37754: PPUSH
37755: CALL_OW 115
// until IsDead ( un ) ;
37759: LD_VAR 0 2
37763: PPUSH
37764: CALL_OW 301
37768: IFFALSE 37716
// end ;
37770: PPOPN 2
37772: END
// every 0 0$1 trigger StreamModeActive and sStu do
37773: LD_EXP 85
37777: PUSH
37778: LD_EXP 124
37782: AND
37783: IFFALSE 37799
37785: GO 37787
37787: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37788: LD_STRING displayStucuk();
37790: PPUSH
37791: CALL_OW 559
// ResetFog ;
37795: CALL_OW 335
// end ;
37799: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37800: LD_EXP 85
37804: PUSH
37805: LD_EXP 117
37809: AND
37810: IFFALSE 37951
37812: GO 37814
37814: DISABLE
37815: LD_INT 0
37817: PPUSH
37818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37819: LD_ADDR_VAR 0 2
37823: PUSH
37824: LD_INT 22
37826: PUSH
37827: LD_OWVAR 2
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 21
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PPUSH
37850: CALL_OW 69
37854: ST_TO_ADDR
// if not tmp then
37855: LD_VAR 0 2
37859: NOT
37860: IFFALSE 37864
// exit ;
37862: GO 37951
// un := tmp [ rand ( 1 , tmp ) ] ;
37864: LD_ADDR_VAR 0 1
37868: PUSH
37869: LD_VAR 0 2
37873: PUSH
37874: LD_INT 1
37876: PPUSH
37877: LD_VAR 0 2
37881: PPUSH
37882: CALL_OW 12
37886: ARRAY
37887: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37888: LD_VAR 0 1
37892: PPUSH
37893: LD_INT 0
37895: PPUSH
37896: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37900: LD_VAR 0 1
37904: PPUSH
37905: LD_OWVAR 3
37909: PUSH
37910: LD_VAR 0 1
37914: DIFF
37915: PPUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 74
37925: PPUSH
37926: CALL_OW 115
// wait ( 0 0$20 ) ;
37930: LD_INT 700
37932: PPUSH
37933: CALL_OW 67
// SetSide ( un , your_side ) ;
37937: LD_VAR 0 1
37941: PPUSH
37942: LD_OWVAR 2
37946: PPUSH
37947: CALL_OW 235
// end ;
37951: PPOPN 2
37953: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
37954: LD_EXP 85
37958: PUSH
37959: LD_EXP 118
37963: AND
37964: IFFALSE 38070
37966: GO 37968
37968: DISABLE
37969: LD_INT 0
37971: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37972: LD_ADDR_VAR 0 1
37976: PUSH
37977: LD_INT 22
37979: PUSH
37980: LD_OWVAR 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 30
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 30
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 69
38025: ST_TO_ADDR
// if not depot then
38026: LD_VAR 0 1
38030: NOT
38031: IFFALSE 38035
// exit ;
38033: GO 38070
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
38035: LD_VAR 0 1
38039: PUSH
38040: LD_INT 1
38042: ARRAY
38043: PPUSH
38044: CALL_OW 250
38048: PPUSH
38049: LD_VAR 0 1
38053: PUSH
38054: LD_INT 1
38056: ARRAY
38057: PPUSH
38058: CALL_OW 251
38062: PPUSH
38063: LD_INT 70
38065: PPUSH
38066: CALL_OW 495
// end ;
38070: PPOPN 1
38072: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
38073: LD_EXP 85
38077: PUSH
38078: LD_EXP 119
38082: AND
38083: IFFALSE 38294
38085: GO 38087
38087: DISABLE
38088: LD_INT 0
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38095: LD_ADDR_VAR 0 5
38099: PUSH
38100: LD_INT 22
38102: PUSH
38103: LD_OWVAR 2
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 21
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PPUSH
38126: CALL_OW 69
38130: ST_TO_ADDR
// if not tmp then
38131: LD_VAR 0 5
38135: NOT
38136: IFFALSE 38140
// exit ;
38138: GO 38294
// for i in tmp do
38140: LD_ADDR_VAR 0 1
38144: PUSH
38145: LD_VAR 0 5
38149: PUSH
38150: FOR_IN
38151: IFFALSE 38292
// begin d := rand ( 0 , 5 ) ;
38153: LD_ADDR_VAR 0 4
38157: PUSH
38158: LD_INT 0
38160: PPUSH
38161: LD_INT 5
38163: PPUSH
38164: CALL_OW 12
38168: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38169: LD_ADDR_VAR 0 2
38173: PUSH
38174: LD_VAR 0 1
38178: PPUSH
38179: CALL_OW 250
38183: PPUSH
38184: LD_VAR 0 4
38188: PPUSH
38189: LD_INT 3
38191: PPUSH
38192: LD_INT 12
38194: PPUSH
38195: CALL_OW 12
38199: PPUSH
38200: CALL_OW 272
38204: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38205: LD_ADDR_VAR 0 3
38209: PUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 251
38219: PPUSH
38220: LD_VAR 0 4
38224: PPUSH
38225: LD_INT 3
38227: PPUSH
38228: LD_INT 12
38230: PPUSH
38231: CALL_OW 12
38235: PPUSH
38236: CALL_OW 273
38240: ST_TO_ADDR
// if ValidHex ( x , y ) then
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: CALL_OW 488
38255: IFFALSE 38290
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38257: LD_VAR 0 1
38261: PPUSH
38262: LD_VAR 0 2
38266: PPUSH
38267: LD_VAR 0 3
38271: PPUSH
38272: LD_INT 3
38274: PPUSH
38275: LD_INT 6
38277: PPUSH
38278: CALL_OW 12
38282: PPUSH
38283: LD_INT 1
38285: PPUSH
38286: CALL_OW 483
// end ;
38290: GO 38150
38292: POP
38293: POP
// end ;
38294: PPOPN 5
38296: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38297: LD_EXP 85
38301: PUSH
38302: LD_EXP 120
38306: AND
38307: IFFALSE 38401
38309: GO 38311
38311: DISABLE
38312: LD_INT 0
38314: PPUSH
38315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38316: LD_ADDR_VAR 0 2
38320: PUSH
38321: LD_INT 22
38323: PUSH
38324: LD_OWVAR 2
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 32
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 21
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: PPUSH
38358: CALL_OW 69
38362: ST_TO_ADDR
// if not tmp then
38363: LD_VAR 0 2
38367: NOT
38368: IFFALSE 38372
// exit ;
38370: GO 38401
// for i in tmp do
38372: LD_ADDR_VAR 0 1
38376: PUSH
38377: LD_VAR 0 2
38381: PUSH
38382: FOR_IN
38383: IFFALSE 38399
// SetFuel ( i , 0 ) ;
38385: LD_VAR 0 1
38389: PPUSH
38390: LD_INT 0
38392: PPUSH
38393: CALL_OW 240
38397: GO 38382
38399: POP
38400: POP
// end ;
38401: PPOPN 2
38403: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38404: LD_EXP 85
38408: PUSH
38409: LD_EXP 121
38413: AND
38414: IFFALSE 38480
38416: GO 38418
38418: DISABLE
38419: LD_INT 0
38421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38422: LD_ADDR_VAR 0 1
38426: PUSH
38427: LD_INT 22
38429: PUSH
38430: LD_OWVAR 2
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 30
38441: PUSH
38442: LD_INT 29
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PPUSH
38453: CALL_OW 69
38457: ST_TO_ADDR
// if not tmp then
38458: LD_VAR 0 1
38462: NOT
38463: IFFALSE 38467
// exit ;
38465: GO 38480
// DestroyUnit ( tmp [ 1 ] ) ;
38467: LD_VAR 0 1
38471: PUSH
38472: LD_INT 1
38474: ARRAY
38475: PPUSH
38476: CALL_OW 65
// end ;
38480: PPOPN 1
38482: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
38483: LD_EXP 85
38487: PUSH
38488: LD_EXP 123
38492: AND
38493: IFFALSE 38622
38495: GO 38497
38497: DISABLE
38498: LD_INT 0
38500: PPUSH
// begin uc_side := 0 ;
38501: LD_ADDR_OWVAR 20
38505: PUSH
38506: LD_INT 0
38508: ST_TO_ADDR
// uc_nation := nation_arabian ;
38509: LD_ADDR_OWVAR 21
38513: PUSH
38514: LD_INT 2
38516: ST_TO_ADDR
// hc_gallery :=  ;
38517: LD_ADDR_OWVAR 33
38521: PUSH
38522: LD_STRING 
38524: ST_TO_ADDR
// hc_name :=  ;
38525: LD_ADDR_OWVAR 26
38529: PUSH
38530: LD_STRING 
38532: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
38533: LD_INT 1
38535: PPUSH
38536: LD_INT 11
38538: PPUSH
38539: LD_INT 10
38541: PPUSH
38542: CALL_OW 380
// un := CreateHuman ;
38546: LD_ADDR_VAR 0 1
38550: PUSH
38551: CALL_OW 44
38555: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38556: LD_VAR 0 1
38560: PPUSH
38561: LD_INT 1
38563: PPUSH
38564: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38568: LD_INT 35
38570: PPUSH
38571: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38575: LD_VAR 0 1
38579: PPUSH
38580: LD_INT 22
38582: PUSH
38583: LD_OWVAR 2
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PPUSH
38592: CALL_OW 69
38596: PPUSH
38597: LD_VAR 0 1
38601: PPUSH
38602: CALL_OW 74
38606: PPUSH
38607: CALL_OW 115
// until IsDead ( un ) ;
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL_OW 301
38620: IFFALSE 38568
// end ;
38622: PPOPN 1
38624: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38625: LD_EXP 85
38629: PUSH
38630: LD_EXP 125
38634: AND
38635: IFFALSE 38647
38637: GO 38639
38639: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38640: LD_STRING earthquake(getX(game), 0, 32)
38642: PPUSH
38643: CALL_OW 559
38647: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38648: LD_EXP 85
38652: PUSH
38653: LD_EXP 126
38657: AND
38658: IFFALSE 38749
38660: GO 38662
38662: DISABLE
38663: LD_INT 0
38665: PPUSH
// begin enable ;
38666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38667: LD_ADDR_VAR 0 1
38671: PUSH
38672: LD_INT 22
38674: PUSH
38675: LD_OWVAR 2
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 21
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 33
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 69
38713: ST_TO_ADDR
// if not tmp then
38714: LD_VAR 0 1
38718: NOT
38719: IFFALSE 38723
// exit ;
38721: GO 38749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38723: LD_VAR 0 1
38727: PUSH
38728: LD_INT 1
38730: PPUSH
38731: LD_VAR 0 1
38735: PPUSH
38736: CALL_OW 12
38740: ARRAY
38741: PPUSH
38742: LD_INT 1
38744: PPUSH
38745: CALL_OW 234
// end ;
38749: PPOPN 1
38751: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38752: LD_EXP 85
38756: PUSH
38757: LD_EXP 127
38761: AND
38762: IFFALSE 38903
38764: GO 38766
38766: DISABLE
38767: LD_INT 0
38769: PPUSH
38770: PPUSH
38771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38772: LD_ADDR_VAR 0 3
38776: PUSH
38777: LD_INT 22
38779: PUSH
38780: LD_OWVAR 2
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 25
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PPUSH
38803: CALL_OW 69
38807: ST_TO_ADDR
// if not tmp then
38808: LD_VAR 0 3
38812: NOT
38813: IFFALSE 38817
// exit ;
38815: GO 38903
// un := tmp [ rand ( 1 , tmp ) ] ;
38817: LD_ADDR_VAR 0 2
38821: PUSH
38822: LD_VAR 0 3
38826: PUSH
38827: LD_INT 1
38829: PPUSH
38830: LD_VAR 0 3
38834: PPUSH
38835: CALL_OW 12
38839: ARRAY
38840: ST_TO_ADDR
// if Crawls ( un ) then
38841: LD_VAR 0 2
38845: PPUSH
38846: CALL_OW 318
38850: IFFALSE 38861
// ComWalk ( un ) ;
38852: LD_VAR 0 2
38856: PPUSH
38857: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38861: LD_VAR 0 2
38865: PPUSH
38866: LD_INT 9
38868: PPUSH
38869: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38873: LD_INT 28
38875: PPUSH
38876: LD_OWVAR 2
38880: PPUSH
38881: LD_INT 2
38883: PPUSH
38884: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38888: LD_INT 29
38890: PPUSH
38891: LD_OWVAR 2
38895: PPUSH
38896: LD_INT 2
38898: PPUSH
38899: CALL_OW 322
// end ;
38903: PPOPN 3
38905: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38906: LD_EXP 85
38910: PUSH
38911: LD_EXP 128
38915: AND
38916: IFFALSE 39027
38918: GO 38920
38920: DISABLE
38921: LD_INT 0
38923: PPUSH
38924: PPUSH
38925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38926: LD_ADDR_VAR 0 3
38930: PUSH
38931: LD_INT 22
38933: PUSH
38934: LD_OWVAR 2
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 25
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PPUSH
38957: CALL_OW 69
38961: ST_TO_ADDR
// if not tmp then
38962: LD_VAR 0 3
38966: NOT
38967: IFFALSE 38971
// exit ;
38969: GO 39027
// un := tmp [ rand ( 1 , tmp ) ] ;
38971: LD_ADDR_VAR 0 2
38975: PUSH
38976: LD_VAR 0 3
38980: PUSH
38981: LD_INT 1
38983: PPUSH
38984: LD_VAR 0 3
38988: PPUSH
38989: CALL_OW 12
38993: ARRAY
38994: ST_TO_ADDR
// if Crawls ( un ) then
38995: LD_VAR 0 2
38999: PPUSH
39000: CALL_OW 318
39004: IFFALSE 39015
// ComWalk ( un ) ;
39006: LD_VAR 0 2
39010: PPUSH
39011: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39015: LD_VAR 0 2
39019: PPUSH
39020: LD_INT 8
39022: PPUSH
39023: CALL_OW 336
// end ;
39027: PPOPN 3
39029: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
39030: LD_EXP 85
39034: PUSH
39035: LD_EXP 129
39039: AND
39040: IFFALSE 39184
39042: GO 39044
39044: DISABLE
39045: LD_INT 0
39047: PPUSH
39048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
39049: LD_ADDR_VAR 0 2
39053: PUSH
39054: LD_INT 22
39056: PUSH
39057: LD_OWVAR 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 21
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 34
39081: PUSH
39082: LD_INT 12
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 34
39091: PUSH
39092: LD_INT 51
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 34
39101: PUSH
39102: LD_INT 32
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: PPUSH
39120: CALL_OW 69
39124: ST_TO_ADDR
// if not tmp then
39125: LD_VAR 0 2
39129: NOT
39130: IFFALSE 39134
// exit ;
39132: GO 39184
// for i in tmp do
39134: LD_ADDR_VAR 0 1
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: FOR_IN
39145: IFFALSE 39182
// if GetCargo ( i , mat_artifact ) = 0 then
39147: LD_VAR 0 1
39151: PPUSH
39152: LD_INT 4
39154: PPUSH
39155: CALL_OW 289
39159: PUSH
39160: LD_INT 0
39162: EQUAL
39163: IFFALSE 39180
// SetCargo ( i , mat_siberit , 100 ) ;
39165: LD_VAR 0 1
39169: PPUSH
39170: LD_INT 3
39172: PPUSH
39173: LD_INT 100
39175: PPUSH
39176: CALL_OW 290
39180: GO 39144
39182: POP
39183: POP
// end ;
39184: PPOPN 2
39186: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39187: LD_EXP 85
39191: PUSH
39192: LD_EXP 130
39196: AND
39197: IFFALSE 39380
39199: GO 39201
39201: DISABLE
39202: LD_INT 0
39204: PPUSH
39205: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39206: LD_ADDR_VAR 0 2
39210: PUSH
39211: LD_INT 22
39213: PUSH
39214: LD_OWVAR 2
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PPUSH
39223: CALL_OW 69
39227: ST_TO_ADDR
// if not tmp then
39228: LD_VAR 0 2
39232: NOT
39233: IFFALSE 39237
// exit ;
39235: GO 39380
// for i := 1 to 2 do
39237: LD_ADDR_VAR 0 1
39241: PUSH
39242: DOUBLE
39243: LD_INT 1
39245: DEC
39246: ST_TO_ADDR
39247: LD_INT 2
39249: PUSH
39250: FOR_TO
39251: IFFALSE 39378
// begin uc_side := your_side ;
39253: LD_ADDR_OWVAR 20
39257: PUSH
39258: LD_OWVAR 2
39262: ST_TO_ADDR
// uc_nation := nation_american ;
39263: LD_ADDR_OWVAR 21
39267: PUSH
39268: LD_INT 1
39270: ST_TO_ADDR
// vc_chassis := us_morphling ;
39271: LD_ADDR_OWVAR 37
39275: PUSH
39276: LD_INT 5
39278: ST_TO_ADDR
// vc_engine := engine_siberite ;
39279: LD_ADDR_OWVAR 39
39283: PUSH
39284: LD_INT 3
39286: ST_TO_ADDR
// vc_control := control_computer ;
39287: LD_ADDR_OWVAR 38
39291: PUSH
39292: LD_INT 3
39294: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39295: LD_ADDR_OWVAR 40
39299: PUSH
39300: LD_INT 10
39302: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39303: LD_VAR 0 2
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PPUSH
39312: CALL_OW 310
39316: NOT
39317: IFFALSE 39364
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39319: CALL_OW 45
39323: PPUSH
39324: LD_VAR 0 2
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: PPUSH
39333: CALL_OW 250
39337: PPUSH
39338: LD_VAR 0 2
39342: PUSH
39343: LD_INT 1
39345: ARRAY
39346: PPUSH
39347: CALL_OW 251
39351: PPUSH
39352: LD_INT 12
39354: PPUSH
39355: LD_INT 1
39357: PPUSH
39358: CALL_OW 50
39362: GO 39376
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39364: CALL_OW 45
39368: PPUSH
39369: LD_INT 1
39371: PPUSH
39372: CALL_OW 51
// end ;
39376: GO 39250
39378: POP
39379: POP
// end ;
39380: PPOPN 2
39382: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39383: LD_EXP 85
39387: PUSH
39388: LD_EXP 131
39392: AND
39393: IFFALSE 39615
39395: GO 39397
39397: DISABLE
39398: LD_INT 0
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39406: LD_ADDR_VAR 0 6
39410: PUSH
39411: LD_INT 22
39413: PUSH
39414: LD_OWVAR 2
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 21
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 3
39435: PUSH
39436: LD_INT 23
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: PPUSH
39455: CALL_OW 69
39459: ST_TO_ADDR
// if not tmp then
39460: LD_VAR 0 6
39464: NOT
39465: IFFALSE 39469
// exit ;
39467: GO 39615
// s1 := rand ( 1 , 4 ) ;
39469: LD_ADDR_VAR 0 2
39473: PUSH
39474: LD_INT 1
39476: PPUSH
39477: LD_INT 4
39479: PPUSH
39480: CALL_OW 12
39484: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
39485: LD_ADDR_VAR 0 4
39489: PUSH
39490: LD_VAR 0 6
39494: PUSH
39495: LD_INT 1
39497: ARRAY
39498: PPUSH
39499: LD_VAR 0 2
39503: PPUSH
39504: CALL_OW 259
39508: ST_TO_ADDR
// if s1 = 1 then
39509: LD_VAR 0 2
39513: PUSH
39514: LD_INT 1
39516: EQUAL
39517: IFFALSE 39537
// s2 := rand ( 2 , 4 ) else
39519: LD_ADDR_VAR 0 3
39523: PUSH
39524: LD_INT 2
39526: PPUSH
39527: LD_INT 4
39529: PPUSH
39530: CALL_OW 12
39534: ST_TO_ADDR
39535: GO 39545
// s2 := 1 ;
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_INT 1
39544: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
39545: LD_ADDR_VAR 0 5
39549: PUSH
39550: LD_VAR 0 6
39554: PUSH
39555: LD_INT 1
39557: ARRAY
39558: PPUSH
39559: LD_VAR 0 3
39563: PPUSH
39564: CALL_OW 259
39568: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
39569: LD_VAR 0 6
39573: PUSH
39574: LD_INT 1
39576: ARRAY
39577: PPUSH
39578: LD_VAR 0 2
39582: PPUSH
39583: LD_VAR 0 5
39587: PPUSH
39588: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
39592: LD_VAR 0 6
39596: PUSH
39597: LD_INT 1
39599: ARRAY
39600: PPUSH
39601: LD_VAR 0 3
39605: PPUSH
39606: LD_VAR 0 4
39610: PPUSH
39611: CALL_OW 237
// end ;
39615: PPOPN 6
39617: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39618: LD_EXP 85
39622: PUSH
39623: LD_EXP 132
39627: AND
39628: IFFALSE 39707
39630: GO 39632
39632: DISABLE
39633: LD_INT 0
39635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39636: LD_ADDR_VAR 0 1
39640: PUSH
39641: LD_INT 22
39643: PUSH
39644: LD_OWVAR 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 30
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PPUSH
39667: CALL_OW 69
39671: ST_TO_ADDR
// if not tmp then
39672: LD_VAR 0 1
39676: NOT
39677: IFFALSE 39681
// exit ;
39679: GO 39707
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39681: LD_VAR 0 1
39685: PUSH
39686: LD_INT 1
39688: PPUSH
39689: LD_VAR 0 1
39693: PPUSH
39694: CALL_OW 12
39698: ARRAY
39699: PPUSH
39700: LD_INT 1
39702: PPUSH
39703: CALL_OW 234
// end ;
39707: PPOPN 1
39709: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39710: LD_EXP 85
39714: PUSH
39715: LD_EXP 133
39719: AND
39720: IFFALSE 39832
39722: GO 39724
39724: DISABLE
39725: LD_INT 0
39727: PPUSH
39728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39729: LD_ADDR_VAR 0 2
39733: PUSH
39734: LD_INT 22
39736: PUSH
39737: LD_OWVAR 2
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 30
39751: PUSH
39752: LD_INT 27
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 30
39761: PUSH
39762: LD_INT 26
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 30
39771: PUSH
39772: LD_INT 28
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PPUSH
39789: CALL_OW 69
39793: ST_TO_ADDR
// if not tmp then
39794: LD_VAR 0 2
39798: NOT
39799: IFFALSE 39803
// exit ;
39801: GO 39832
// for i in tmp do
39803: LD_ADDR_VAR 0 1
39807: PUSH
39808: LD_VAR 0 2
39812: PUSH
39813: FOR_IN
39814: IFFALSE 39830
// SetLives ( i , 1 ) ;
39816: LD_VAR 0 1
39820: PPUSH
39821: LD_INT 1
39823: PPUSH
39824: CALL_OW 234
39828: GO 39813
39830: POP
39831: POP
// end ;
39832: PPOPN 2
39834: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39835: LD_EXP 85
39839: PUSH
39840: LD_EXP 134
39844: AND
39845: IFFALSE 40119
39847: GO 39849
39849: DISABLE
39850: LD_INT 0
39852: PPUSH
39853: PPUSH
39854: PPUSH
// begin i := rand ( 1 , 7 ) ;
39855: LD_ADDR_VAR 0 1
39859: PUSH
39860: LD_INT 1
39862: PPUSH
39863: LD_INT 7
39865: PPUSH
39866: CALL_OW 12
39870: ST_TO_ADDR
// case i of 1 :
39871: LD_VAR 0 1
39875: PUSH
39876: LD_INT 1
39878: DOUBLE
39879: EQUAL
39880: IFTRUE 39884
39882: GO 39894
39884: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39885: LD_STRING earthquake(getX(game), 0, 32)
39887: PPUSH
39888: CALL_OW 559
39892: GO 40119
39894: LD_INT 2
39896: DOUBLE
39897: EQUAL
39898: IFTRUE 39902
39900: GO 39916
39902: POP
// begin ToLua ( displayStucuk(); ) ;
39903: LD_STRING displayStucuk();
39905: PPUSH
39906: CALL_OW 559
// ResetFog ;
39910: CALL_OW 335
// end ; 3 :
39914: GO 40119
39916: LD_INT 3
39918: DOUBLE
39919: EQUAL
39920: IFTRUE 39924
39922: GO 40028
39924: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39925: LD_ADDR_VAR 0 2
39929: PUSH
39930: LD_INT 22
39932: PUSH
39933: LD_OWVAR 2
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 25
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PPUSH
39956: CALL_OW 69
39960: ST_TO_ADDR
// if not tmp then
39961: LD_VAR 0 2
39965: NOT
39966: IFFALSE 39970
// exit ;
39968: GO 40119
// un := tmp [ rand ( 1 , tmp ) ] ;
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_VAR 0 2
39979: PUSH
39980: LD_INT 1
39982: PPUSH
39983: LD_VAR 0 2
39987: PPUSH
39988: CALL_OW 12
39992: ARRAY
39993: ST_TO_ADDR
// if Crawls ( un ) then
39994: LD_VAR 0 3
39998: PPUSH
39999: CALL_OW 318
40003: IFFALSE 40014
// ComWalk ( un ) ;
40005: LD_VAR 0 3
40009: PPUSH
40010: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40014: LD_VAR 0 3
40018: PPUSH
40019: LD_INT 8
40021: PPUSH
40022: CALL_OW 336
// end ; 4 :
40026: GO 40119
40028: LD_INT 4
40030: DOUBLE
40031: EQUAL
40032: IFTRUE 40036
40034: GO 40097
40036: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40037: LD_ADDR_VAR 0 2
40041: PUSH
40042: LD_INT 22
40044: PUSH
40045: LD_OWVAR 2
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 30
40056: PUSH
40057: LD_INT 29
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PPUSH
40068: CALL_OW 69
40072: ST_TO_ADDR
// if not tmp then
40073: LD_VAR 0 2
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40119
// DestroyUnit ( tmp [ 1 ] ) ;
40082: LD_VAR 0 2
40086: PUSH
40087: LD_INT 1
40089: ARRAY
40090: PPUSH
40091: CALL_OW 65
// end ; 5 .. 7 :
40095: GO 40119
40097: LD_INT 5
40099: DOUBLE
40100: GREATEREQUAL
40101: IFFALSE 40109
40103: LD_INT 7
40105: DOUBLE
40106: LESSEQUAL
40107: IFTRUE 40111
40109: GO 40118
40111: POP
// StreamSibBomb ; end ;
40112: CALL 36369 0 0
40116: GO 40119
40118: POP
// end ;
40119: PPOPN 3
40121: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
40122: LD_EXP 85
40126: PUSH
40127: LD_EXP 135
40131: AND
40132: IFFALSE 40288
40134: GO 40136
40136: DISABLE
40137: LD_INT 0
40139: PPUSH
40140: PPUSH
40141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
40142: LD_ADDR_VAR 0 2
40146: PUSH
40147: LD_INT 81
40149: PUSH
40150: LD_OWVAR 2
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 21
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 21
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PPUSH
40191: CALL_OW 69
40195: ST_TO_ADDR
// if not tmp then
40196: LD_VAR 0 2
40200: NOT
40201: IFFALSE 40205
// exit ;
40203: GO 40288
// p := 0 ;
40205: LD_ADDR_VAR 0 3
40209: PUSH
40210: LD_INT 0
40212: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40213: LD_INT 35
40215: PPUSH
40216: CALL_OW 67
// p := p + 1 ;
40220: LD_ADDR_VAR 0 3
40224: PUSH
40225: LD_VAR 0 3
40229: PUSH
40230: LD_INT 1
40232: PLUS
40233: ST_TO_ADDR
// for i in tmp do
40234: LD_ADDR_VAR 0 1
40238: PUSH
40239: LD_VAR 0 2
40243: PUSH
40244: FOR_IN
40245: IFFALSE 40276
// if GetLives ( i ) < 1000 then
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 256
40256: PUSH
40257: LD_INT 1000
40259: LESS
40260: IFFALSE 40274
// SetLives ( i , 1000 ) ;
40262: LD_VAR 0 1
40266: PPUSH
40267: LD_INT 1000
40269: PPUSH
40270: CALL_OW 234
40274: GO 40244
40276: POP
40277: POP
// until p > 20 ;
40278: LD_VAR 0 3
40282: PUSH
40283: LD_INT 20
40285: GREATER
40286: IFFALSE 40213
// end ;
40288: PPOPN 3
40290: END
// every 0 0$1 trigger StreamModeActive and sTime do
40291: LD_EXP 85
40295: PUSH
40296: LD_EXP 136
40300: AND
40301: IFFALSE 40336
40303: GO 40305
40305: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40306: LD_INT 28
40308: PPUSH
40309: LD_OWVAR 2
40313: PPUSH
40314: LD_INT 2
40316: PPUSH
40317: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40321: LD_INT 30
40323: PPUSH
40324: LD_OWVAR 2
40328: PPUSH
40329: LD_INT 2
40331: PPUSH
40332: CALL_OW 322
// end ;
40336: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40337: LD_EXP 85
40341: PUSH
40342: LD_EXP 137
40346: AND
40347: IFFALSE 40468
40349: GO 40351
40351: DISABLE
40352: LD_INT 0
40354: PPUSH
40355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40356: LD_ADDR_VAR 0 2
40360: PUSH
40361: LD_INT 22
40363: PUSH
40364: LD_OWVAR 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 21
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: LD_INT 23
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: PPUSH
40405: CALL_OW 69
40409: ST_TO_ADDR
// if not tmp then
40410: LD_VAR 0 2
40414: NOT
40415: IFFALSE 40419
// exit ;
40417: GO 40468
// for i in tmp do
40419: LD_ADDR_VAR 0 1
40423: PUSH
40424: LD_VAR 0 2
40428: PUSH
40429: FOR_IN
40430: IFFALSE 40466
// begin if Crawls ( i ) then
40432: LD_VAR 0 1
40436: PPUSH
40437: CALL_OW 318
40441: IFFALSE 40452
// ComWalk ( i ) ;
40443: LD_VAR 0 1
40447: PPUSH
40448: CALL_OW 138
// SetClass ( i , 2 ) ;
40452: LD_VAR 0 1
40456: PPUSH
40457: LD_INT 2
40459: PPUSH
40460: CALL_OW 336
// end ;
40464: GO 40429
40466: POP
40467: POP
// end ;
40468: PPOPN 2
40470: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
40471: LD_EXP 85
40475: PUSH
40476: LD_EXP 138
40480: AND
40481: IFFALSE 40762
40483: GO 40485
40485: DISABLE
40486: LD_INT 0
40488: PPUSH
40489: PPUSH
40490: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
40491: LD_OWVAR 2
40495: PPUSH
40496: LD_INT 9
40498: PPUSH
40499: LD_INT 1
40501: PPUSH
40502: LD_INT 1
40504: PPUSH
40505: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
40509: LD_INT 9
40511: PPUSH
40512: LD_OWVAR 2
40516: PPUSH
40517: CALL_OW 343
// uc_side := 9 ;
40521: LD_ADDR_OWVAR 20
40525: PUSH
40526: LD_INT 9
40528: ST_TO_ADDR
// uc_nation := 2 ;
40529: LD_ADDR_OWVAR 21
40533: PUSH
40534: LD_INT 2
40536: ST_TO_ADDR
// hc_name := Dark Warrior ;
40537: LD_ADDR_OWVAR 26
40541: PUSH
40542: LD_STRING Dark Warrior
40544: ST_TO_ADDR
// hc_gallery :=  ;
40545: LD_ADDR_OWVAR 33
40549: PUSH
40550: LD_STRING 
40552: ST_TO_ADDR
// hc_noskilllimit := true ;
40553: LD_ADDR_OWVAR 76
40557: PUSH
40558: LD_INT 1
40560: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
40561: LD_ADDR_OWVAR 31
40565: PUSH
40566: LD_INT 30
40568: PUSH
40569: LD_INT 30
40571: PUSH
40572: LD_INT 30
40574: PUSH
40575: LD_INT 30
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: ST_TO_ADDR
// un := CreateHuman ;
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: CALL_OW 44
40593: ST_TO_ADDR
// hc_noskilllimit := false ;
40594: LD_ADDR_OWVAR 76
40598: PUSH
40599: LD_INT 0
40601: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40602: LD_VAR 0 3
40606: PPUSH
40607: LD_INT 1
40609: PPUSH
40610: CALL_OW 51
// p := 0 ;
40614: LD_ADDR_VAR 0 2
40618: PUSH
40619: LD_INT 0
40621: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40622: LD_INT 35
40624: PPUSH
40625: CALL_OW 67
// p := p + 1 ;
40629: LD_ADDR_VAR 0 2
40633: PUSH
40634: LD_VAR 0 2
40638: PUSH
40639: LD_INT 1
40641: PLUS
40642: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40643: LD_VAR 0 3
40647: PPUSH
40648: CALL_OW 256
40652: PUSH
40653: LD_INT 1000
40655: LESS
40656: IFFALSE 40670
// SetLives ( un , 1000 ) ;
40658: LD_VAR 0 3
40662: PPUSH
40663: LD_INT 1000
40665: PPUSH
40666: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40670: LD_VAR 0 3
40674: PPUSH
40675: LD_INT 81
40677: PUSH
40678: LD_OWVAR 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 91
40689: PUSH
40690: LD_VAR 0 3
40694: PUSH
40695: LD_INT 30
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PPUSH
40707: CALL_OW 69
40711: PPUSH
40712: LD_VAR 0 3
40716: PPUSH
40717: CALL_OW 74
40721: PPUSH
40722: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
40726: LD_VAR 0 2
40730: PUSH
40731: LD_INT 60
40733: GREATER
40734: PUSH
40735: LD_VAR 0 3
40739: PPUSH
40740: CALL_OW 301
40744: OR
40745: IFFALSE 40622
// if un then
40747: LD_VAR 0 3
40751: IFFALSE 40762
// RemoveUnit ( un ) ;
40753: LD_VAR 0 3
40757: PPUSH
40758: CALL_OW 64
// end ;
40762: PPOPN 3
40764: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40765: LD_INT 0
40767: PPUSH
// case cmd of 301 :
40768: LD_VAR 0 1
40772: PUSH
40773: LD_INT 301
40775: DOUBLE
40776: EQUAL
40777: IFTRUE 40781
40779: GO 40813
40781: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
40782: LD_VAR 0 6
40786: PPUSH
40787: LD_VAR 0 7
40791: PPUSH
40792: LD_VAR 0 8
40796: PPUSH
40797: LD_VAR 0 4
40801: PPUSH
40802: LD_VAR 0 5
40806: PPUSH
40807: CALL 42014 0 5
40811: GO 40934
40813: LD_INT 302
40815: DOUBLE
40816: EQUAL
40817: IFTRUE 40821
40819: GO 40858
40821: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
40822: LD_VAR 0 6
40826: PPUSH
40827: LD_VAR 0 7
40831: PPUSH
40832: LD_VAR 0 8
40836: PPUSH
40837: LD_VAR 0 9
40841: PPUSH
40842: LD_VAR 0 4
40846: PPUSH
40847: LD_VAR 0 5
40851: PPUSH
40852: CALL 42105 0 6
40856: GO 40934
40858: LD_INT 303
40860: DOUBLE
40861: EQUAL
40862: IFTRUE 40866
40864: GO 40903
40866: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
40867: LD_VAR 0 6
40871: PPUSH
40872: LD_VAR 0 7
40876: PPUSH
40877: LD_VAR 0 8
40881: PPUSH
40882: LD_VAR 0 9
40886: PPUSH
40887: LD_VAR 0 4
40891: PPUSH
40892: LD_VAR 0 5
40896: PPUSH
40897: CALL 40939 0 6
40901: GO 40934
40903: LD_INT 304
40905: DOUBLE
40906: EQUAL
40907: IFTRUE 40911
40909: GO 40933
40911: POP
// hHackTeleport ( unit , x , y ) ; end ;
40912: LD_VAR 0 2
40916: PPUSH
40917: LD_VAR 0 4
40921: PPUSH
40922: LD_VAR 0 5
40926: PPUSH
40927: CALL 42698 0 3
40931: GO 40934
40933: POP
// end ;
40934: LD_VAR 0 12
40938: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
40939: LD_INT 0
40941: PPUSH
40942: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
40943: LD_VAR 0 1
40947: PUSH
40948: LD_INT 1
40950: LESS
40951: PUSH
40952: LD_VAR 0 1
40956: PUSH
40957: LD_INT 3
40959: GREATER
40960: OR
40961: PUSH
40962: LD_VAR 0 5
40966: PPUSH
40967: LD_VAR 0 6
40971: PPUSH
40972: CALL_OW 428
40976: OR
40977: IFFALSE 40981
// exit ;
40979: GO 41701
// uc_side := your_side ;
40981: LD_ADDR_OWVAR 20
40985: PUSH
40986: LD_OWVAR 2
40990: ST_TO_ADDR
// uc_nation := nation ;
40991: LD_ADDR_OWVAR 21
40995: PUSH
40996: LD_VAR 0 1
41000: ST_TO_ADDR
// bc_level = 1 ;
41001: LD_ADDR_OWVAR 43
41005: PUSH
41006: LD_INT 1
41008: ST_TO_ADDR
// case btype of 1 :
41009: LD_VAR 0 2
41013: PUSH
41014: LD_INT 1
41016: DOUBLE
41017: EQUAL
41018: IFTRUE 41022
41020: GO 41033
41022: POP
// bc_type := b_depot ; 2 :
41023: LD_ADDR_OWVAR 42
41027: PUSH
41028: LD_INT 0
41030: ST_TO_ADDR
41031: GO 41645
41033: LD_INT 2
41035: DOUBLE
41036: EQUAL
41037: IFTRUE 41041
41039: GO 41052
41041: POP
// bc_type := b_warehouse ; 3 :
41042: LD_ADDR_OWVAR 42
41046: PUSH
41047: LD_INT 1
41049: ST_TO_ADDR
41050: GO 41645
41052: LD_INT 3
41054: DOUBLE
41055: EQUAL
41056: IFTRUE 41060
41058: GO 41071
41060: POP
// bc_type := b_lab ; 4 .. 9 :
41061: LD_ADDR_OWVAR 42
41065: PUSH
41066: LD_INT 6
41068: ST_TO_ADDR
41069: GO 41645
41071: LD_INT 4
41073: DOUBLE
41074: GREATEREQUAL
41075: IFFALSE 41083
41077: LD_INT 9
41079: DOUBLE
41080: LESSEQUAL
41081: IFTRUE 41085
41083: GO 41137
41085: POP
// begin bc_type := b_lab_half ;
41086: LD_ADDR_OWVAR 42
41090: PUSH
41091: LD_INT 7
41093: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
41094: LD_ADDR_OWVAR 44
41098: PUSH
41099: LD_INT 10
41101: PUSH
41102: LD_INT 11
41104: PUSH
41105: LD_INT 12
41107: PUSH
41108: LD_INT 15
41110: PUSH
41111: LD_INT 14
41113: PUSH
41114: LD_INT 13
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: PUSH
41125: LD_VAR 0 2
41129: PUSH
41130: LD_INT 3
41132: MINUS
41133: ARRAY
41134: ST_TO_ADDR
// end ; 10 .. 13 :
41135: GO 41645
41137: LD_INT 10
41139: DOUBLE
41140: GREATEREQUAL
41141: IFFALSE 41149
41143: LD_INT 13
41145: DOUBLE
41146: LESSEQUAL
41147: IFTRUE 41151
41149: GO 41228
41151: POP
// begin bc_type := b_lab_full ;
41152: LD_ADDR_OWVAR 42
41156: PUSH
41157: LD_INT 8
41159: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
41160: LD_ADDR_OWVAR 44
41164: PUSH
41165: LD_INT 10
41167: PUSH
41168: LD_INT 12
41170: PUSH
41171: LD_INT 14
41173: PUSH
41174: LD_INT 13
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: PUSH
41183: LD_VAR 0 2
41187: PUSH
41188: LD_INT 9
41190: MINUS
41191: ARRAY
41192: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
41193: LD_ADDR_OWVAR 45
41197: PUSH
41198: LD_INT 11
41200: PUSH
41201: LD_INT 15
41203: PUSH
41204: LD_INT 12
41206: PUSH
41207: LD_INT 15
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: PUSH
41216: LD_VAR 0 2
41220: PUSH
41221: LD_INT 9
41223: MINUS
41224: ARRAY
41225: ST_TO_ADDR
// end ; 14 :
41226: GO 41645
41228: LD_INT 14
41230: DOUBLE
41231: EQUAL
41232: IFTRUE 41236
41234: GO 41247
41236: POP
// bc_type := b_workshop ; 15 :
41237: LD_ADDR_OWVAR 42
41241: PUSH
41242: LD_INT 2
41244: ST_TO_ADDR
41245: GO 41645
41247: LD_INT 15
41249: DOUBLE
41250: EQUAL
41251: IFTRUE 41255
41253: GO 41266
41255: POP
// bc_type := b_factory ; 16 :
41256: LD_ADDR_OWVAR 42
41260: PUSH
41261: LD_INT 3
41263: ST_TO_ADDR
41264: GO 41645
41266: LD_INT 16
41268: DOUBLE
41269: EQUAL
41270: IFTRUE 41274
41272: GO 41285
41274: POP
// bc_type := b_ext_gun ; 17 :
41275: LD_ADDR_OWVAR 42
41279: PUSH
41280: LD_INT 17
41282: ST_TO_ADDR
41283: GO 41645
41285: LD_INT 17
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41293
41291: GO 41321
41293: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
41294: LD_ADDR_OWVAR 42
41298: PUSH
41299: LD_INT 19
41301: PUSH
41302: LD_INT 23
41304: PUSH
41305: LD_INT 19
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: PUSH
41313: LD_VAR 0 1
41317: ARRAY
41318: ST_TO_ADDR
41319: GO 41645
41321: LD_INT 18
41323: DOUBLE
41324: EQUAL
41325: IFTRUE 41329
41327: GO 41340
41329: POP
// bc_type := b_ext_radar ; 19 :
41330: LD_ADDR_OWVAR 42
41334: PUSH
41335: LD_INT 20
41337: ST_TO_ADDR
41338: GO 41645
41340: LD_INT 19
41342: DOUBLE
41343: EQUAL
41344: IFTRUE 41348
41346: GO 41359
41348: POP
// bc_type := b_ext_radio ; 20 :
41349: LD_ADDR_OWVAR 42
41353: PUSH
41354: LD_INT 22
41356: ST_TO_ADDR
41357: GO 41645
41359: LD_INT 20
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41367
41365: GO 41378
41367: POP
// bc_type := b_ext_siberium ; 21 :
41368: LD_ADDR_OWVAR 42
41372: PUSH
41373: LD_INT 21
41375: ST_TO_ADDR
41376: GO 41645
41378: LD_INT 21
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41386
41384: GO 41397
41386: POP
// bc_type := b_ext_computer ; 22 :
41387: LD_ADDR_OWVAR 42
41391: PUSH
41392: LD_INT 24
41394: ST_TO_ADDR
41395: GO 41645
41397: LD_INT 22
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41405
41403: GO 41416
41405: POP
// bc_type := b_ext_track ; 23 :
41406: LD_ADDR_OWVAR 42
41410: PUSH
41411: LD_INT 16
41413: ST_TO_ADDR
41414: GO 41645
41416: LD_INT 23
41418: DOUBLE
41419: EQUAL
41420: IFTRUE 41424
41422: GO 41435
41424: POP
// bc_type := b_ext_laser ; 24 :
41425: LD_ADDR_OWVAR 42
41429: PUSH
41430: LD_INT 25
41432: ST_TO_ADDR
41433: GO 41645
41435: LD_INT 24
41437: DOUBLE
41438: EQUAL
41439: IFTRUE 41443
41441: GO 41454
41443: POP
// bc_type := b_control_tower ; 25 :
41444: LD_ADDR_OWVAR 42
41448: PUSH
41449: LD_INT 36
41451: ST_TO_ADDR
41452: GO 41645
41454: LD_INT 25
41456: DOUBLE
41457: EQUAL
41458: IFTRUE 41462
41460: GO 41473
41462: POP
// bc_type := b_breastwork ; 26 :
41463: LD_ADDR_OWVAR 42
41467: PUSH
41468: LD_INT 31
41470: ST_TO_ADDR
41471: GO 41645
41473: LD_INT 26
41475: DOUBLE
41476: EQUAL
41477: IFTRUE 41481
41479: GO 41492
41481: POP
// bc_type := b_bunker ; 27 :
41482: LD_ADDR_OWVAR 42
41486: PUSH
41487: LD_INT 32
41489: ST_TO_ADDR
41490: GO 41645
41492: LD_INT 27
41494: DOUBLE
41495: EQUAL
41496: IFTRUE 41500
41498: GO 41511
41500: POP
// bc_type := b_turret ; 28 :
41501: LD_ADDR_OWVAR 42
41505: PUSH
41506: LD_INT 33
41508: ST_TO_ADDR
41509: GO 41645
41511: LD_INT 28
41513: DOUBLE
41514: EQUAL
41515: IFTRUE 41519
41517: GO 41530
41519: POP
// bc_type := b_armoury ; 29 :
41520: LD_ADDR_OWVAR 42
41524: PUSH
41525: LD_INT 4
41527: ST_TO_ADDR
41528: GO 41645
41530: LD_INT 29
41532: DOUBLE
41533: EQUAL
41534: IFTRUE 41538
41536: GO 41549
41538: POP
// bc_type := b_barracks ; 30 :
41539: LD_ADDR_OWVAR 42
41543: PUSH
41544: LD_INT 5
41546: ST_TO_ADDR
41547: GO 41645
41549: LD_INT 30
41551: DOUBLE
41552: EQUAL
41553: IFTRUE 41557
41555: GO 41568
41557: POP
// bc_type := b_solar_power ; 31 :
41558: LD_ADDR_OWVAR 42
41562: PUSH
41563: LD_INT 27
41565: ST_TO_ADDR
41566: GO 41645
41568: LD_INT 31
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41576
41574: GO 41587
41576: POP
// bc_type := b_oil_power ; 32 :
41577: LD_ADDR_OWVAR 42
41581: PUSH
41582: LD_INT 26
41584: ST_TO_ADDR
41585: GO 41645
41587: LD_INT 32
41589: DOUBLE
41590: EQUAL
41591: IFTRUE 41595
41593: GO 41606
41595: POP
// bc_type := b_siberite_power ; 33 :
41596: LD_ADDR_OWVAR 42
41600: PUSH
41601: LD_INT 28
41603: ST_TO_ADDR
41604: GO 41645
41606: LD_INT 33
41608: DOUBLE
41609: EQUAL
41610: IFTRUE 41614
41612: GO 41625
41614: POP
// bc_type := b_oil_mine ; 34 :
41615: LD_ADDR_OWVAR 42
41619: PUSH
41620: LD_INT 29
41622: ST_TO_ADDR
41623: GO 41645
41625: LD_INT 34
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41644
41633: POP
// bc_type := b_siberite_mine ; end ;
41634: LD_ADDR_OWVAR 42
41638: PUSH
41639: LD_INT 30
41641: ST_TO_ADDR
41642: GO 41645
41644: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41645: LD_ADDR_VAR 0 8
41649: PUSH
41650: LD_VAR 0 5
41654: PPUSH
41655: LD_VAR 0 6
41659: PPUSH
41660: LD_VAR 0 3
41664: PPUSH
41665: CALL_OW 47
41669: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41670: LD_OWVAR 42
41674: PUSH
41675: LD_INT 32
41677: PUSH
41678: LD_INT 33
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: IN
41685: IFFALSE 41701
// PlaceWeaponTurret ( b , weapon ) ;
41687: LD_VAR 0 8
41691: PPUSH
41692: LD_VAR 0 4
41696: PPUSH
41697: CALL_OW 431
// end ;
41701: LD_VAR 0 7
41705: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41706: LD_INT 0
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41712: LD_ADDR_VAR 0 4
41716: PUSH
41717: LD_INT 22
41719: PUSH
41720: LD_OWVAR 2
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: LD_INT 30
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 30
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PPUSH
41761: CALL_OW 69
41765: ST_TO_ADDR
// if not tmp then
41766: LD_VAR 0 4
41770: NOT
41771: IFFALSE 41775
// exit ;
41773: GO 41834
// for i in tmp do
41775: LD_ADDR_VAR 0 2
41779: PUSH
41780: LD_VAR 0 4
41784: PUSH
41785: FOR_IN
41786: IFFALSE 41832
// for j = 1 to 3 do
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: DOUBLE
41794: LD_INT 1
41796: DEC
41797: ST_TO_ADDR
41798: LD_INT 3
41800: PUSH
41801: FOR_TO
41802: IFFALSE 41828
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
41804: LD_VAR 0 2
41808: PPUSH
41809: CALL_OW 274
41813: PPUSH
41814: LD_VAR 0 3
41818: PPUSH
41819: LD_INT 99999
41821: PPUSH
41822: CALL_OW 277
41826: GO 41801
41828: POP
41829: POP
41830: GO 41785
41832: POP
41833: POP
// end ;
41834: LD_VAR 0 1
41838: RET
// export function hHackSetLevel10 ; var i , j ; begin
41839: LD_INT 0
41841: PPUSH
41842: PPUSH
41843: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41844: LD_ADDR_VAR 0 2
41848: PUSH
41849: LD_INT 21
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PPUSH
41859: CALL_OW 69
41863: PUSH
41864: FOR_IN
41865: IFFALSE 41917
// if IsSelected ( i ) then
41867: LD_VAR 0 2
41871: PPUSH
41872: CALL_OW 306
41876: IFFALSE 41915
// begin for j := 1 to 4 do
41878: LD_ADDR_VAR 0 3
41882: PUSH
41883: DOUBLE
41884: LD_INT 1
41886: DEC
41887: ST_TO_ADDR
41888: LD_INT 4
41890: PUSH
41891: FOR_TO
41892: IFFALSE 41913
// SetSkill ( i , j , 10 ) ;
41894: LD_VAR 0 2
41898: PPUSH
41899: LD_VAR 0 3
41903: PPUSH
41904: LD_INT 10
41906: PPUSH
41907: CALL_OW 237
41911: GO 41891
41913: POP
41914: POP
// end ;
41915: GO 41864
41917: POP
41918: POP
// end ;
41919: LD_VAR 0 1
41923: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
41924: LD_INT 0
41926: PPUSH
41927: PPUSH
41928: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
41929: LD_ADDR_VAR 0 2
41933: PUSH
41934: LD_INT 22
41936: PUSH
41937: LD_OWVAR 2
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 21
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PPUSH
41960: CALL_OW 69
41964: PUSH
41965: FOR_IN
41966: IFFALSE 42007
// begin for j := 1 to 4 do
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: DOUBLE
41974: LD_INT 1
41976: DEC
41977: ST_TO_ADDR
41978: LD_INT 4
41980: PUSH
41981: FOR_TO
41982: IFFALSE 42003
// SetSkill ( i , j , 10 ) ;
41984: LD_VAR 0 2
41988: PPUSH
41989: LD_VAR 0 3
41993: PPUSH
41994: LD_INT 10
41996: PPUSH
41997: CALL_OW 237
42001: GO 41981
42003: POP
42004: POP
// end ;
42005: GO 41965
42007: POP
42008: POP
// end ;
42009: LD_VAR 0 1
42013: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
42014: LD_INT 0
42016: PPUSH
// uc_side := your_side ;
42017: LD_ADDR_OWVAR 20
42021: PUSH
42022: LD_OWVAR 2
42026: ST_TO_ADDR
// uc_nation := nation ;
42027: LD_ADDR_OWVAR 21
42031: PUSH
42032: LD_VAR 0 1
42036: ST_TO_ADDR
// InitHc ;
42037: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
42041: LD_INT 0
42043: PPUSH
42044: LD_VAR 0 2
42048: PPUSH
42049: LD_VAR 0 3
42053: PPUSH
42054: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
42058: LD_VAR 0 4
42062: PPUSH
42063: LD_VAR 0 5
42067: PPUSH
42068: CALL_OW 428
42072: PUSH
42073: LD_INT 0
42075: EQUAL
42076: IFFALSE 42100
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
42078: CALL_OW 44
42082: PPUSH
42083: LD_VAR 0 4
42087: PPUSH
42088: LD_VAR 0 5
42092: PPUSH
42093: LD_INT 1
42095: PPUSH
42096: CALL_OW 48
// end ;
42100: LD_VAR 0 6
42104: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
42105: LD_INT 0
42107: PPUSH
42108: PPUSH
// uc_side := your_side ;
42109: LD_ADDR_OWVAR 20
42113: PUSH
42114: LD_OWVAR 2
42118: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
42119: LD_VAR 0 1
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: LD_INT 4
42135: PUSH
42136: LD_INT 5
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: IN
42146: IFFALSE 42158
// uc_nation := nation_american else
42148: LD_ADDR_OWVAR 21
42152: PUSH
42153: LD_INT 1
42155: ST_TO_ADDR
42156: GO 42201
// if chassis in [ 11 , 12 , 13 , 14 ] then
42158: LD_VAR 0 1
42162: PUSH
42163: LD_INT 11
42165: PUSH
42166: LD_INT 12
42168: PUSH
42169: LD_INT 13
42171: PUSH
42172: LD_INT 14
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: IN
42181: IFFALSE 42193
// uc_nation := nation_arabian else
42183: LD_ADDR_OWVAR 21
42187: PUSH
42188: LD_INT 2
42190: ST_TO_ADDR
42191: GO 42201
// uc_nation := nation_russian ;
42193: LD_ADDR_OWVAR 21
42197: PUSH
42198: LD_INT 3
42200: ST_TO_ADDR
// vc_chassis := chassis ;
42201: LD_ADDR_OWVAR 37
42205: PUSH
42206: LD_VAR 0 1
42210: ST_TO_ADDR
// vc_engine := engine ;
42211: LD_ADDR_OWVAR 39
42215: PUSH
42216: LD_VAR 0 2
42220: ST_TO_ADDR
// vc_control := control ;
42221: LD_ADDR_OWVAR 38
42225: PUSH
42226: LD_VAR 0 3
42230: ST_TO_ADDR
// vc_weapon := weapon ;
42231: LD_ADDR_OWVAR 40
42235: PUSH
42236: LD_VAR 0 4
42240: ST_TO_ADDR
// un := CreateVehicle ;
42241: LD_ADDR_VAR 0 8
42245: PUSH
42246: CALL_OW 45
42250: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
42251: LD_VAR 0 8
42255: PPUSH
42256: LD_INT 0
42258: PPUSH
42259: LD_INT 5
42261: PPUSH
42262: CALL_OW 12
42266: PPUSH
42267: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
42271: LD_VAR 0 8
42275: PPUSH
42276: LD_VAR 0 5
42280: PPUSH
42281: LD_VAR 0 6
42285: PPUSH
42286: LD_INT 1
42288: PPUSH
42289: CALL_OW 48
// end ;
42293: LD_VAR 0 7
42297: RET
// export hInvincible ; every 1 do
42298: GO 42300
42300: DISABLE
// hInvincible := [ ] ;
42301: LD_ADDR_EXP 139
42305: PUSH
42306: EMPTY
42307: ST_TO_ADDR
42308: END
// every 10 do var i ;
42309: GO 42311
42311: DISABLE
42312: LD_INT 0
42314: PPUSH
// begin enable ;
42315: ENABLE
// if not hInvincible then
42316: LD_EXP 139
42320: NOT
42321: IFFALSE 42325
// exit ;
42323: GO 42369
// for i in hInvincible do
42325: LD_ADDR_VAR 0 1
42329: PUSH
42330: LD_EXP 139
42334: PUSH
42335: FOR_IN
42336: IFFALSE 42367
// if GetLives ( i ) < 1000 then
42338: LD_VAR 0 1
42342: PPUSH
42343: CALL_OW 256
42347: PUSH
42348: LD_INT 1000
42350: LESS
42351: IFFALSE 42365
// SetLives ( i , 1000 ) ;
42353: LD_VAR 0 1
42357: PPUSH
42358: LD_INT 1000
42360: PPUSH
42361: CALL_OW 234
42365: GO 42335
42367: POP
42368: POP
// end ;
42369: PPOPN 1
42371: END
// export function hHackInvincible ; var i ; begin
42372: LD_INT 0
42374: PPUSH
42375: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
42376: LD_ADDR_VAR 0 2
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 21
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 21
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: PPUSH
42409: CALL_OW 69
42413: PUSH
42414: FOR_IN
42415: IFFALSE 42476
// if IsSelected ( i ) then
42417: LD_VAR 0 2
42421: PPUSH
42422: CALL_OW 306
42426: IFFALSE 42474
// begin if i in hInvincible then
42428: LD_VAR 0 2
42432: PUSH
42433: LD_EXP 139
42437: IN
42438: IFFALSE 42458
// hInvincible := hInvincible diff i else
42440: LD_ADDR_EXP 139
42444: PUSH
42445: LD_EXP 139
42449: PUSH
42450: LD_VAR 0 2
42454: DIFF
42455: ST_TO_ADDR
42456: GO 42474
// hInvincible := hInvincible union i ;
42458: LD_ADDR_EXP 139
42462: PUSH
42463: LD_EXP 139
42467: PUSH
42468: LD_VAR 0 2
42472: UNION
42473: ST_TO_ADDR
// end ;
42474: GO 42414
42476: POP
42477: POP
// end ;
42478: LD_VAR 0 1
42482: RET
// export function hHackInvisible ; var i , j ; begin
42483: LD_INT 0
42485: PPUSH
42486: PPUSH
42487: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42488: LD_ADDR_VAR 0 2
42492: PUSH
42493: LD_INT 21
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PPUSH
42503: CALL_OW 69
42507: PUSH
42508: FOR_IN
42509: IFFALSE 42533
// if IsSelected ( i ) then
42511: LD_VAR 0 2
42515: PPUSH
42516: CALL_OW 306
42520: IFFALSE 42531
// ComForceInvisible ( i ) ;
42522: LD_VAR 0 2
42526: PPUSH
42527: CALL_OW 496
42531: GO 42508
42533: POP
42534: POP
// end ;
42535: LD_VAR 0 1
42539: RET
// export function hHackChangeYourSide ; begin
42540: LD_INT 0
42542: PPUSH
// if your_side = 8 then
42543: LD_OWVAR 2
42547: PUSH
42548: LD_INT 8
42550: EQUAL
42551: IFFALSE 42563
// your_side := 0 else
42553: LD_ADDR_OWVAR 2
42557: PUSH
42558: LD_INT 0
42560: ST_TO_ADDR
42561: GO 42577
// your_side := your_side + 1 ;
42563: LD_ADDR_OWVAR 2
42567: PUSH
42568: LD_OWVAR 2
42572: PUSH
42573: LD_INT 1
42575: PLUS
42576: ST_TO_ADDR
// end ;
42577: LD_VAR 0 1
42581: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42582: LD_INT 0
42584: PPUSH
42585: PPUSH
42586: PPUSH
// for i in all_units do
42587: LD_ADDR_VAR 0 2
42591: PUSH
42592: LD_OWVAR 3
42596: PUSH
42597: FOR_IN
42598: IFFALSE 42676
// if IsSelected ( i ) then
42600: LD_VAR 0 2
42604: PPUSH
42605: CALL_OW 306
42609: IFFALSE 42674
// begin j := GetSide ( i ) ;
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_VAR 0 2
42620: PPUSH
42621: CALL_OW 255
42625: ST_TO_ADDR
// if j = 8 then
42626: LD_VAR 0 3
42630: PUSH
42631: LD_INT 8
42633: EQUAL
42634: IFFALSE 42646
// j := 0 else
42636: LD_ADDR_VAR 0 3
42640: PUSH
42641: LD_INT 0
42643: ST_TO_ADDR
42644: GO 42660
// j := j + 1 ;
42646: LD_ADDR_VAR 0 3
42650: PUSH
42651: LD_VAR 0 3
42655: PUSH
42656: LD_INT 1
42658: PLUS
42659: ST_TO_ADDR
// SetSide ( i , j ) ;
42660: LD_VAR 0 2
42664: PPUSH
42665: LD_VAR 0 3
42669: PPUSH
42670: CALL_OW 235
// end ;
42674: GO 42597
42676: POP
42677: POP
// end ;
42678: LD_VAR 0 1
42682: RET
// export function hHackFog ; begin
42683: LD_INT 0
42685: PPUSH
// FogOff ( true ) ;
42686: LD_INT 1
42688: PPUSH
42689: CALL_OW 344
// end ;
42693: LD_VAR 0 1
42697: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42698: LD_INT 0
42700: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42701: LD_VAR 0 1
42705: PPUSH
42706: LD_VAR 0 2
42710: PPUSH
42711: LD_VAR 0 3
42715: PPUSH
42716: LD_INT 1
42718: PPUSH
42719: LD_INT 1
42721: PPUSH
42722: CALL_OW 483
// CenterOnXY ( x , y ) ;
42726: LD_VAR 0 2
42730: PPUSH
42731: LD_VAR 0 3
42735: PPUSH
42736: CALL_OW 84
// end ; end_of_file
42740: LD_VAR 0 4
42744: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42745: LD_INT 0
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42751: LD_VAR 0 1
42755: PPUSH
42756: CALL_OW 264
42760: PUSH
42761: LD_EXP 73
42765: EQUAL
42766: IFFALSE 42838
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
42768: LD_INT 68
42770: PPUSH
42771: LD_VAR 0 1
42775: PPUSH
42776: CALL_OW 255
42780: PPUSH
42781: CALL_OW 321
42785: PUSH
42786: LD_INT 2
42788: EQUAL
42789: IFFALSE 42801
// eff := 70 else
42791: LD_ADDR_VAR 0 4
42795: PUSH
42796: LD_INT 70
42798: ST_TO_ADDR
42799: GO 42809
// eff := 30 ;
42801: LD_ADDR_VAR 0 4
42805: PUSH
42806: LD_INT 30
42808: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
42809: LD_VAR 0 1
42813: PPUSH
42814: CALL_OW 250
42818: PPUSH
42819: LD_VAR 0 1
42823: PPUSH
42824: CALL_OW 251
42828: PPUSH
42829: LD_VAR 0 4
42833: PPUSH
42834: CALL_OW 495
// end ; end ;
42838: LD_VAR 0 2
42842: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
42843: LD_INT 0
42845: PPUSH
// end ;
42846: LD_VAR 0 4
42850: RET
// export function SOS_Command ( cmd ) ; begin
42851: LD_INT 0
42853: PPUSH
// end ;
42854: LD_VAR 0 2
42858: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
42859: LD_INT 0
42861: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
42862: LD_VAR 0 1
42866: PUSH
42867: LD_INT 250
42869: EQUAL
42870: PUSH
42871: LD_VAR 0 2
42875: PPUSH
42876: CALL_OW 264
42880: PUSH
42881: LD_EXP 76
42885: EQUAL
42886: AND
42887: IFFALSE 42908
// MinerPlaceMine ( unit , x , y ) ;
42889: LD_VAR 0 2
42893: PPUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: LD_VAR 0 5
42903: PPUSH
42904: CALL 45249 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
42908: LD_VAR 0 1
42912: PUSH
42913: LD_INT 251
42915: EQUAL
42916: PUSH
42917: LD_VAR 0 2
42921: PPUSH
42922: CALL_OW 264
42926: PUSH
42927: LD_EXP 76
42931: EQUAL
42932: AND
42933: IFFALSE 42954
// MinerDetonateMine ( unit , x , y ) ;
42935: LD_VAR 0 2
42939: PPUSH
42940: LD_VAR 0 4
42944: PPUSH
42945: LD_VAR 0 5
42949: PPUSH
42950: CALL 45526 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
42954: LD_VAR 0 1
42958: PUSH
42959: LD_INT 252
42961: EQUAL
42962: PUSH
42963: LD_VAR 0 2
42967: PPUSH
42968: CALL_OW 264
42972: PUSH
42973: LD_EXP 76
42977: EQUAL
42978: AND
42979: IFFALSE 43000
// MinerCreateMinefield ( unit , x , y ) ;
42981: LD_VAR 0 2
42985: PPUSH
42986: LD_VAR 0 4
42990: PPUSH
42991: LD_VAR 0 5
42995: PPUSH
42996: CALL 45943 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43000: LD_VAR 0 1
43004: PUSH
43005: LD_INT 253
43007: EQUAL
43008: PUSH
43009: LD_VAR 0 2
43013: PPUSH
43014: CALL_OW 257
43018: PUSH
43019: LD_INT 5
43021: EQUAL
43022: AND
43023: IFFALSE 43044
// ComBinocular ( unit , x , y ) ;
43025: LD_VAR 0 2
43029: PPUSH
43030: LD_VAR 0 4
43034: PPUSH
43035: LD_VAR 0 5
43039: PPUSH
43040: CALL 46314 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43044: LD_VAR 0 1
43048: PUSH
43049: LD_INT 254
43051: EQUAL
43052: PUSH
43053: LD_VAR 0 2
43057: PPUSH
43058: CALL_OW 264
43062: PUSH
43063: LD_EXP 71
43067: EQUAL
43068: AND
43069: PUSH
43070: LD_VAR 0 3
43074: PPUSH
43075: CALL_OW 263
43079: PUSH
43080: LD_INT 3
43082: EQUAL
43083: AND
43084: IFFALSE 43100
// HackDestroyVehicle ( unit , selectedUnit ) ;
43086: LD_VAR 0 2
43090: PPUSH
43091: LD_VAR 0 3
43095: PPUSH
43096: CALL 44609 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43100: LD_VAR 0 1
43104: PUSH
43105: LD_INT 255
43107: EQUAL
43108: PUSH
43109: LD_VAR 0 2
43113: PPUSH
43114: CALL_OW 264
43118: PUSH
43119: LD_INT 14
43121: PUSH
43122: LD_INT 53
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: IN
43129: AND
43130: PUSH
43131: LD_VAR 0 4
43135: PPUSH
43136: LD_VAR 0 5
43140: PPUSH
43141: CALL_OW 488
43145: AND
43146: IFFALSE 43170
// CutTreeXYR ( unit , x , y , 12 ) ;
43148: LD_VAR 0 2
43152: PPUSH
43153: LD_VAR 0 4
43157: PPUSH
43158: LD_VAR 0 5
43162: PPUSH
43163: LD_INT 12
43165: PPUSH
43166: CALL 43175 0 4
// end ;
43170: LD_VAR 0 6
43174: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43175: LD_INT 0
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
43186: LD_VAR 0 1
43190: NOT
43191: PUSH
43192: LD_VAR 0 2
43196: PPUSH
43197: LD_VAR 0 3
43201: PPUSH
43202: CALL_OW 488
43206: NOT
43207: OR
43208: PUSH
43209: LD_VAR 0 4
43213: NOT
43214: OR
43215: IFFALSE 43219
// exit ;
43217: GO 43559
// list := [ ] ;
43219: LD_ADDR_VAR 0 13
43223: PUSH
43224: EMPTY
43225: ST_TO_ADDR
// if x - r < 0 then
43226: LD_VAR 0 2
43230: PUSH
43231: LD_VAR 0 4
43235: MINUS
43236: PUSH
43237: LD_INT 0
43239: LESS
43240: IFFALSE 43252
// min_x := 0 else
43242: LD_ADDR_VAR 0 7
43246: PUSH
43247: LD_INT 0
43249: ST_TO_ADDR
43250: GO 43268
// min_x := x - r ;
43252: LD_ADDR_VAR 0 7
43256: PUSH
43257: LD_VAR 0 2
43261: PUSH
43262: LD_VAR 0 4
43266: MINUS
43267: ST_TO_ADDR
// if y - r < 0 then
43268: LD_VAR 0 3
43272: PUSH
43273: LD_VAR 0 4
43277: MINUS
43278: PUSH
43279: LD_INT 0
43281: LESS
43282: IFFALSE 43294
// min_y := 0 else
43284: LD_ADDR_VAR 0 8
43288: PUSH
43289: LD_INT 0
43291: ST_TO_ADDR
43292: GO 43310
// min_y := y - r ;
43294: LD_ADDR_VAR 0 8
43298: PUSH
43299: LD_VAR 0 3
43303: PUSH
43304: LD_VAR 0 4
43308: MINUS
43309: ST_TO_ADDR
// max_x := x + r ;
43310: LD_ADDR_VAR 0 9
43314: PUSH
43315: LD_VAR 0 2
43319: PUSH
43320: LD_VAR 0 4
43324: PLUS
43325: ST_TO_ADDR
// max_y := y + r ;
43326: LD_ADDR_VAR 0 10
43330: PUSH
43331: LD_VAR 0 3
43335: PUSH
43336: LD_VAR 0 4
43340: PLUS
43341: ST_TO_ADDR
// for _x = min_x to max_x do
43342: LD_ADDR_VAR 0 11
43346: PUSH
43347: DOUBLE
43348: LD_VAR 0 7
43352: DEC
43353: ST_TO_ADDR
43354: LD_VAR 0 9
43358: PUSH
43359: FOR_TO
43360: IFFALSE 43477
// for _y = min_y to max_y do
43362: LD_ADDR_VAR 0 12
43366: PUSH
43367: DOUBLE
43368: LD_VAR 0 8
43372: DEC
43373: ST_TO_ADDR
43374: LD_VAR 0 10
43378: PUSH
43379: FOR_TO
43380: IFFALSE 43473
// begin if not ValidHex ( _x , _y ) then
43382: LD_VAR 0 11
43386: PPUSH
43387: LD_VAR 0 12
43391: PPUSH
43392: CALL_OW 488
43396: NOT
43397: IFFALSE 43401
// continue ;
43399: GO 43379
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43401: LD_VAR 0 11
43405: PPUSH
43406: LD_VAR 0 12
43410: PPUSH
43411: CALL_OW 351
43415: PUSH
43416: LD_VAR 0 11
43420: PPUSH
43421: LD_VAR 0 12
43425: PPUSH
43426: CALL_OW 554
43430: AND
43431: IFFALSE 43471
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43433: LD_ADDR_VAR 0 13
43437: PUSH
43438: LD_VAR 0 13
43442: PPUSH
43443: LD_VAR 0 13
43447: PUSH
43448: LD_INT 1
43450: PLUS
43451: PPUSH
43452: LD_VAR 0 11
43456: PUSH
43457: LD_VAR 0 12
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PPUSH
43466: CALL_OW 2
43470: ST_TO_ADDR
// end ;
43471: GO 43379
43473: POP
43474: POP
43475: GO 43359
43477: POP
43478: POP
// if not list then
43479: LD_VAR 0 13
43483: NOT
43484: IFFALSE 43488
// exit ;
43486: GO 43559
// for i in list do
43488: LD_ADDR_VAR 0 6
43492: PUSH
43493: LD_VAR 0 13
43497: PUSH
43498: FOR_IN
43499: IFFALSE 43557
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43501: LD_VAR 0 1
43505: PPUSH
43506: LD_STRING M
43508: PUSH
43509: LD_VAR 0 6
43513: PUSH
43514: LD_INT 1
43516: ARRAY
43517: PUSH
43518: LD_VAR 0 6
43522: PUSH
43523: LD_INT 2
43525: ARRAY
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: PPUSH
43551: CALL_OW 447
43555: GO 43498
43557: POP
43558: POP
// end ;
43559: LD_VAR 0 5
43563: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43564: LD_EXP 140
43568: NOT
43569: IFFALSE 43619
43571: GO 43573
43573: DISABLE
// begin initHack := true ;
43574: LD_ADDR_EXP 140
43578: PUSH
43579: LD_INT 1
43581: ST_TO_ADDR
// hackTanks := [ ] ;
43582: LD_ADDR_EXP 141
43586: PUSH
43587: EMPTY
43588: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43589: LD_ADDR_EXP 142
43593: PUSH
43594: EMPTY
43595: ST_TO_ADDR
// hackLimit := 3 ;
43596: LD_ADDR_EXP 143
43600: PUSH
43601: LD_INT 3
43603: ST_TO_ADDR
// hackDist := 12 ;
43604: LD_ADDR_EXP 144
43608: PUSH
43609: LD_INT 12
43611: ST_TO_ADDR
// hackCounter := [ ] ;
43612: LD_ADDR_EXP 145
43616: PUSH
43617: EMPTY
43618: ST_TO_ADDR
// end ;
43619: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43620: LD_EXP 140
43624: PUSH
43625: LD_INT 34
43627: PUSH
43628: LD_EXP 71
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PPUSH
43637: CALL_OW 69
43641: AND
43642: IFFALSE 43897
43644: GO 43646
43646: DISABLE
43647: LD_INT 0
43649: PPUSH
43650: PPUSH
// begin enable ;
43651: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43652: LD_ADDR_VAR 0 1
43656: PUSH
43657: LD_INT 34
43659: PUSH
43660: LD_EXP 71
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PPUSH
43669: CALL_OW 69
43673: PUSH
43674: FOR_IN
43675: IFFALSE 43895
// begin if not i in hackTanks then
43677: LD_VAR 0 1
43681: PUSH
43682: LD_EXP 141
43686: IN
43687: NOT
43688: IFFALSE 43771
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43690: LD_ADDR_EXP 141
43694: PUSH
43695: LD_EXP 141
43699: PPUSH
43700: LD_EXP 141
43704: PUSH
43705: LD_INT 1
43707: PLUS
43708: PPUSH
43709: LD_VAR 0 1
43713: PPUSH
43714: CALL_OW 1
43718: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43719: LD_ADDR_EXP 142
43723: PUSH
43724: LD_EXP 142
43728: PPUSH
43729: LD_EXP 142
43733: PUSH
43734: LD_INT 1
43736: PLUS
43737: PPUSH
43738: EMPTY
43739: PPUSH
43740: CALL_OW 1
43744: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43745: LD_ADDR_EXP 145
43749: PUSH
43750: LD_EXP 145
43754: PPUSH
43755: LD_EXP 145
43759: PUSH
43760: LD_INT 1
43762: PLUS
43763: PPUSH
43764: EMPTY
43765: PPUSH
43766: CALL_OW 1
43770: ST_TO_ADDR
// end ; if not IsOk ( i ) then
43771: LD_VAR 0 1
43775: PPUSH
43776: CALL_OW 302
43780: NOT
43781: IFFALSE 43794
// begin HackUnlinkAll ( i ) ;
43783: LD_VAR 0 1
43787: PPUSH
43788: CALL 43900 0 1
// continue ;
43792: GO 43674
// end ; HackCheckCapturedStatus ( i ) ;
43794: LD_VAR 0 1
43798: PPUSH
43799: CALL 44343 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
43803: LD_ADDR_VAR 0 2
43807: PUSH
43808: LD_INT 81
43810: PUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 255
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 33
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 91
43837: PUSH
43838: LD_VAR 0 1
43842: PUSH
43843: LD_EXP 144
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 50
43855: PUSH
43856: EMPTY
43857: LIST
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: PPUSH
43865: CALL_OW 69
43869: ST_TO_ADDR
// if not tmp then
43870: LD_VAR 0 2
43874: NOT
43875: IFFALSE 43879
// continue ;
43877: GO 43674
// HackLink ( i , tmp ) ;
43879: LD_VAR 0 1
43883: PPUSH
43884: LD_VAR 0 2
43888: PPUSH
43889: CALL 44036 0 2
// end ;
43893: GO 43674
43895: POP
43896: POP
// end ;
43897: PPOPN 2
43899: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
// if not hack in hackTanks then
43905: LD_VAR 0 1
43909: PUSH
43910: LD_EXP 141
43914: IN
43915: NOT
43916: IFFALSE 43920
// exit ;
43918: GO 44031
// index := GetElementIndex ( hackTanks , hack ) ;
43920: LD_ADDR_VAR 0 4
43924: PUSH
43925: LD_EXP 141
43929: PPUSH
43930: LD_VAR 0 1
43934: PPUSH
43935: CALL 51465 0 2
43939: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
43940: LD_EXP 142
43944: PUSH
43945: LD_VAR 0 4
43949: ARRAY
43950: IFFALSE 44031
// begin for i in hackTanksCaptured [ index ] do
43952: LD_ADDR_VAR 0 3
43956: PUSH
43957: LD_EXP 142
43961: PUSH
43962: LD_VAR 0 4
43966: ARRAY
43967: PUSH
43968: FOR_IN
43969: IFFALSE 43995
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
43971: LD_VAR 0 3
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: PPUSH
43980: LD_VAR 0 3
43984: PUSH
43985: LD_INT 2
43987: ARRAY
43988: PPUSH
43989: CALL_OW 235
43993: GO 43968
43995: POP
43996: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
43997: LD_ADDR_EXP 142
44001: PUSH
44002: LD_EXP 142
44006: PPUSH
44007: LD_VAR 0 4
44011: PPUSH
44012: EMPTY
44013: PPUSH
44014: CALL_OW 1
44018: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44019: LD_VAR 0 1
44023: PPUSH
44024: LD_INT 0
44026: PPUSH
44027: CALL_OW 505
// end ; end ;
44031: LD_VAR 0 2
44035: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44036: LD_INT 0
44038: PPUSH
44039: PPUSH
44040: PPUSH
// if not hack in hackTanks or not vehicles then
44041: LD_VAR 0 1
44045: PUSH
44046: LD_EXP 141
44050: IN
44051: NOT
44052: PUSH
44053: LD_VAR 0 2
44057: NOT
44058: OR
44059: IFFALSE 44063
// exit ;
44061: GO 44338
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44063: LD_ADDR_VAR 0 2
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_VAR 0 2
44077: PPUSH
44078: LD_INT 1
44080: PPUSH
44081: LD_INT 1
44083: PPUSH
44084: CALL 52115 0 4
44088: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44089: LD_ADDR_VAR 0 5
44093: PUSH
44094: LD_EXP 141
44098: PPUSH
44099: LD_VAR 0 1
44103: PPUSH
44104: CALL 51465 0 2
44108: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44109: LD_EXP 142
44113: PUSH
44114: LD_VAR 0 5
44118: ARRAY
44119: PUSH
44120: LD_EXP 143
44124: LESS
44125: IFFALSE 44314
// begin for i := 1 to vehicles do
44127: LD_ADDR_VAR 0 4
44131: PUSH
44132: DOUBLE
44133: LD_INT 1
44135: DEC
44136: ST_TO_ADDR
44137: LD_VAR 0 2
44141: PUSH
44142: FOR_TO
44143: IFFALSE 44312
// begin if hackTanksCaptured [ index ] = hackLimit then
44145: LD_EXP 142
44149: PUSH
44150: LD_VAR 0 5
44154: ARRAY
44155: PUSH
44156: LD_EXP 143
44160: EQUAL
44161: IFFALSE 44165
// break ;
44163: GO 44312
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
44165: LD_ADDR_EXP 145
44169: PUSH
44170: LD_EXP 145
44174: PPUSH
44175: LD_VAR 0 5
44179: PPUSH
44180: LD_EXP 145
44184: PUSH
44185: LD_VAR 0 5
44189: ARRAY
44190: PUSH
44191: LD_INT 1
44193: PLUS
44194: PPUSH
44195: CALL_OW 1
44199: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44200: LD_ADDR_EXP 142
44204: PUSH
44205: LD_EXP 142
44209: PPUSH
44210: LD_VAR 0 5
44214: PUSH
44215: LD_EXP 142
44219: PUSH
44220: LD_VAR 0 5
44224: ARRAY
44225: PUSH
44226: LD_INT 1
44228: PLUS
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PPUSH
44234: LD_VAR 0 2
44238: PUSH
44239: LD_VAR 0 4
44243: ARRAY
44244: PUSH
44245: LD_VAR 0 2
44249: PUSH
44250: LD_VAR 0 4
44254: ARRAY
44255: PPUSH
44256: CALL_OW 255
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PPUSH
44265: CALL 51680 0 3
44269: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44270: LD_VAR 0 2
44274: PUSH
44275: LD_VAR 0 4
44279: ARRAY
44280: PPUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: CALL_OW 255
44290: PPUSH
44291: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44295: LD_VAR 0 2
44299: PUSH
44300: LD_VAR 0 4
44304: ARRAY
44305: PPUSH
44306: CALL_OW 141
// end ;
44310: GO 44142
44312: POP
44313: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44314: LD_VAR 0 1
44318: PPUSH
44319: LD_EXP 142
44323: PUSH
44324: LD_VAR 0 5
44328: ARRAY
44329: PUSH
44330: LD_INT 0
44332: PLUS
44333: PPUSH
44334: CALL_OW 505
// end ;
44338: LD_VAR 0 3
44342: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
44343: LD_INT 0
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
// if not hack in hackTanks then
44349: LD_VAR 0 1
44353: PUSH
44354: LD_EXP 141
44358: IN
44359: NOT
44360: IFFALSE 44364
// exit ;
44362: GO 44604
// index := GetElementIndex ( hackTanks , hack ) ;
44364: LD_ADDR_VAR 0 4
44368: PUSH
44369: LD_EXP 141
44373: PPUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL 51465 0 2
44383: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: DOUBLE
44390: LD_EXP 142
44394: PUSH
44395: LD_VAR 0 4
44399: ARRAY
44400: INC
44401: ST_TO_ADDR
44402: LD_INT 1
44404: PUSH
44405: FOR_DOWNTO
44406: IFFALSE 44578
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
44408: LD_ADDR_VAR 0 5
44412: PUSH
44413: LD_EXP 142
44417: PUSH
44418: LD_VAR 0 4
44422: ARRAY
44423: PUSH
44424: LD_VAR 0 3
44428: ARRAY
44429: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
44430: LD_VAR 0 5
44434: PUSH
44435: LD_INT 1
44437: ARRAY
44438: PPUSH
44439: CALL_OW 302
44443: NOT
44444: PUSH
44445: LD_VAR 0 5
44449: PUSH
44450: LD_INT 1
44452: ARRAY
44453: PPUSH
44454: CALL_OW 255
44458: PUSH
44459: LD_VAR 0 1
44463: PPUSH
44464: CALL_OW 255
44468: NONEQUAL
44469: OR
44470: IFFALSE 44576
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44472: LD_VAR 0 5
44476: PUSH
44477: LD_INT 1
44479: ARRAY
44480: PPUSH
44481: CALL_OW 305
44485: PUSH
44486: LD_VAR 0 5
44490: PUSH
44491: LD_INT 1
44493: ARRAY
44494: PPUSH
44495: CALL_OW 255
44499: PUSH
44500: LD_VAR 0 1
44504: PPUSH
44505: CALL_OW 255
44509: EQUAL
44510: AND
44511: IFFALSE 44535
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44513: LD_VAR 0 5
44517: PUSH
44518: LD_INT 1
44520: ARRAY
44521: PPUSH
44522: LD_VAR 0 5
44526: PUSH
44527: LD_INT 2
44529: ARRAY
44530: PPUSH
44531: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44535: LD_ADDR_EXP 142
44539: PUSH
44540: LD_EXP 142
44544: PPUSH
44545: LD_VAR 0 4
44549: PPUSH
44550: LD_EXP 142
44554: PUSH
44555: LD_VAR 0 4
44559: ARRAY
44560: PPUSH
44561: LD_VAR 0 3
44565: PPUSH
44566: CALL_OW 3
44570: PPUSH
44571: CALL_OW 1
44575: ST_TO_ADDR
// end ; end ;
44576: GO 44405
44578: POP
44579: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44580: LD_VAR 0 1
44584: PPUSH
44585: LD_EXP 142
44589: PUSH
44590: LD_VAR 0 4
44594: ARRAY
44595: PUSH
44596: LD_INT 0
44598: PLUS
44599: PPUSH
44600: CALL_OW 505
// end ;
44604: LD_VAR 0 2
44608: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44609: LD_INT 0
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
// if not hack in hackTanks then
44615: LD_VAR 0 1
44619: PUSH
44620: LD_EXP 141
44624: IN
44625: NOT
44626: IFFALSE 44630
// exit ;
44628: GO 44715
// index := GetElementIndex ( hackTanks , hack ) ;
44630: LD_ADDR_VAR 0 5
44634: PUSH
44635: LD_EXP 141
44639: PPUSH
44640: LD_VAR 0 1
44644: PPUSH
44645: CALL 51465 0 2
44649: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44650: LD_ADDR_VAR 0 4
44654: PUSH
44655: DOUBLE
44656: LD_INT 1
44658: DEC
44659: ST_TO_ADDR
44660: LD_EXP 142
44664: PUSH
44665: LD_VAR 0 5
44669: ARRAY
44670: PUSH
44671: FOR_TO
44672: IFFALSE 44713
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44674: LD_EXP 142
44678: PUSH
44679: LD_VAR 0 5
44683: ARRAY
44684: PUSH
44685: LD_VAR 0 4
44689: ARRAY
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: PUSH
44695: LD_VAR 0 2
44699: EQUAL
44700: IFFALSE 44711
// KillUnit ( vehicle ) ;
44702: LD_VAR 0 2
44706: PPUSH
44707: CALL_OW 66
44711: GO 44671
44713: POP
44714: POP
// end ;
44715: LD_VAR 0 3
44719: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44720: LD_EXP 146
44724: NOT
44725: IFFALSE 44760
44727: GO 44729
44729: DISABLE
// begin initMiner := true ;
44730: LD_ADDR_EXP 146
44734: PUSH
44735: LD_INT 1
44737: ST_TO_ADDR
// minersList := [ ] ;
44738: LD_ADDR_EXP 147
44742: PUSH
44743: EMPTY
44744: ST_TO_ADDR
// minerMinesList := [ ] ;
44745: LD_ADDR_EXP 148
44749: PUSH
44750: EMPTY
44751: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44752: LD_ADDR_EXP 149
44756: PUSH
44757: LD_INT 5
44759: ST_TO_ADDR
// end ;
44760: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
44761: LD_EXP 146
44765: PUSH
44766: LD_INT 34
44768: PUSH
44769: LD_EXP 76
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PPUSH
44778: CALL_OW 69
44782: AND
44783: IFFALSE 45246
44785: GO 44787
44787: DISABLE
44788: LD_INT 0
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
// begin enable ;
44794: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
44795: LD_ADDR_VAR 0 1
44799: PUSH
44800: LD_INT 34
44802: PUSH
44803: LD_EXP 76
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PPUSH
44812: CALL_OW 69
44816: PUSH
44817: FOR_IN
44818: IFFALSE 44890
// begin if not i in minersList then
44820: LD_VAR 0 1
44824: PUSH
44825: LD_EXP 147
44829: IN
44830: NOT
44831: IFFALSE 44888
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
44833: LD_ADDR_EXP 147
44837: PUSH
44838: LD_EXP 147
44842: PPUSH
44843: LD_EXP 147
44847: PUSH
44848: LD_INT 1
44850: PLUS
44851: PPUSH
44852: LD_VAR 0 1
44856: PPUSH
44857: CALL_OW 1
44861: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44862: LD_ADDR_EXP 148
44866: PUSH
44867: LD_EXP 148
44871: PPUSH
44872: LD_EXP 148
44876: PUSH
44877: LD_INT 1
44879: PLUS
44880: PPUSH
44881: EMPTY
44882: PPUSH
44883: CALL_OW 1
44887: ST_TO_ADDR
// end end ;
44888: GO 44817
44890: POP
44891: POP
// for i := minerMinesList downto 1 do
44892: LD_ADDR_VAR 0 1
44896: PUSH
44897: DOUBLE
44898: LD_EXP 148
44902: INC
44903: ST_TO_ADDR
44904: LD_INT 1
44906: PUSH
44907: FOR_DOWNTO
44908: IFFALSE 45244
// begin if IsLive ( minersList [ i ] ) then
44910: LD_EXP 147
44914: PUSH
44915: LD_VAR 0 1
44919: ARRAY
44920: PPUSH
44921: CALL_OW 300
44925: IFFALSE 44953
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
44927: LD_EXP 147
44931: PUSH
44932: LD_VAR 0 1
44936: ARRAY
44937: PPUSH
44938: LD_EXP 148
44942: PUSH
44943: LD_VAR 0 1
44947: ARRAY
44948: PPUSH
44949: CALL_OW 505
// if not minerMinesList [ i ] then
44953: LD_EXP 148
44957: PUSH
44958: LD_VAR 0 1
44962: ARRAY
44963: NOT
44964: IFFALSE 44968
// continue ;
44966: GO 44907
// for j := minerMinesList [ i ] downto 1 do
44968: LD_ADDR_VAR 0 2
44972: PUSH
44973: DOUBLE
44974: LD_EXP 148
44978: PUSH
44979: LD_VAR 0 1
44983: ARRAY
44984: INC
44985: ST_TO_ADDR
44986: LD_INT 1
44988: PUSH
44989: FOR_DOWNTO
44990: IFFALSE 45240
// begin side := GetSide ( minersList [ i ] ) ;
44992: LD_ADDR_VAR 0 3
44996: PUSH
44997: LD_EXP 147
45001: PUSH
45002: LD_VAR 0 1
45006: ARRAY
45007: PPUSH
45008: CALL_OW 255
45012: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45013: LD_ADDR_VAR 0 4
45017: PUSH
45018: LD_EXP 148
45022: PUSH
45023: LD_VAR 0 1
45027: ARRAY
45028: PUSH
45029: LD_VAR 0 2
45033: ARRAY
45034: PUSH
45035: LD_INT 1
45037: ARRAY
45038: PPUSH
45039: LD_EXP 148
45043: PUSH
45044: LD_VAR 0 1
45048: ARRAY
45049: PUSH
45050: LD_VAR 0 2
45054: ARRAY
45055: PUSH
45056: LD_INT 2
45058: ARRAY
45059: PPUSH
45060: CALL_OW 428
45064: ST_TO_ADDR
// if not tmp then
45065: LD_VAR 0 4
45069: NOT
45070: IFFALSE 45074
// continue ;
45072: GO 44989
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45074: LD_VAR 0 4
45078: PUSH
45079: LD_INT 81
45081: PUSH
45082: LD_VAR 0 3
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PPUSH
45091: CALL_OW 69
45095: IN
45096: PUSH
45097: LD_EXP 148
45101: PUSH
45102: LD_VAR 0 1
45106: ARRAY
45107: PUSH
45108: LD_VAR 0 2
45112: ARRAY
45113: PUSH
45114: LD_INT 1
45116: ARRAY
45117: PPUSH
45118: LD_EXP 148
45122: PUSH
45123: LD_VAR 0 1
45127: ARRAY
45128: PUSH
45129: LD_VAR 0 2
45133: ARRAY
45134: PUSH
45135: LD_INT 2
45137: ARRAY
45138: PPUSH
45139: CALL_OW 458
45143: AND
45144: IFFALSE 45238
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
45146: LD_EXP 148
45150: PUSH
45151: LD_VAR 0 1
45155: ARRAY
45156: PUSH
45157: LD_VAR 0 2
45161: ARRAY
45162: PUSH
45163: LD_INT 1
45165: ARRAY
45166: PPUSH
45167: LD_EXP 148
45171: PUSH
45172: LD_VAR 0 1
45176: ARRAY
45177: PUSH
45178: LD_VAR 0 2
45182: ARRAY
45183: PUSH
45184: LD_INT 2
45186: ARRAY
45187: PPUSH
45188: LD_VAR 0 3
45192: PPUSH
45193: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45197: LD_ADDR_EXP 148
45201: PUSH
45202: LD_EXP 148
45206: PPUSH
45207: LD_VAR 0 1
45211: PPUSH
45212: LD_EXP 148
45216: PUSH
45217: LD_VAR 0 1
45221: ARRAY
45222: PPUSH
45223: LD_VAR 0 2
45227: PPUSH
45228: CALL_OW 3
45232: PPUSH
45233: CALL_OW 1
45237: ST_TO_ADDR
// end ; end ;
45238: GO 44989
45240: POP
45241: POP
// end ;
45242: GO 44907
45244: POP
45245: POP
// end ;
45246: PPOPN 4
45248: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45249: LD_INT 0
45251: PPUSH
45252: PPUSH
// result := false ;
45253: LD_ADDR_VAR 0 4
45257: PUSH
45258: LD_INT 0
45260: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 264
45270: PUSH
45271: LD_EXP 76
45275: EQUAL
45276: NOT
45277: IFFALSE 45281
// exit ;
45279: GO 45521
// index := GetElementIndex ( minersList , unit ) ;
45281: LD_ADDR_VAR 0 5
45285: PUSH
45286: LD_EXP 147
45290: PPUSH
45291: LD_VAR 0 1
45295: PPUSH
45296: CALL 51465 0 2
45300: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45301: LD_EXP 148
45305: PUSH
45306: LD_VAR 0 5
45310: ARRAY
45311: PUSH
45312: LD_EXP 149
45316: GREATEREQUAL
45317: IFFALSE 45321
// exit ;
45319: GO 45521
// ComMoveXY ( unit , x , y ) ;
45321: LD_VAR 0 1
45325: PPUSH
45326: LD_VAR 0 2
45330: PPUSH
45331: LD_VAR 0 3
45335: PPUSH
45336: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45340: LD_INT 35
45342: PPUSH
45343: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
45347: LD_VAR 0 1
45351: PPUSH
45352: LD_VAR 0 2
45356: PPUSH
45357: LD_VAR 0 3
45361: PPUSH
45362: CALL 81529 0 3
45366: NOT
45367: PUSH
45368: LD_VAR 0 1
45372: PPUSH
45373: CALL_OW 314
45377: AND
45378: IFFALSE 45382
// exit ;
45380: GO 45521
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
45382: LD_VAR 0 2
45386: PPUSH
45387: LD_VAR 0 3
45391: PPUSH
45392: CALL_OW 428
45396: PUSH
45397: LD_VAR 0 1
45401: EQUAL
45402: PUSH
45403: LD_VAR 0 1
45407: PPUSH
45408: CALL_OW 314
45412: NOT
45413: AND
45414: IFFALSE 45340
// PlaySoundXY ( x , y , PlantMine ) ;
45416: LD_VAR 0 2
45420: PPUSH
45421: LD_VAR 0 3
45425: PPUSH
45426: LD_STRING PlantMine
45428: PPUSH
45429: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
45433: LD_VAR 0 2
45437: PPUSH
45438: LD_VAR 0 3
45442: PPUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 255
45452: PPUSH
45453: LD_INT 0
45455: PPUSH
45456: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
45460: LD_ADDR_EXP 148
45464: PUSH
45465: LD_EXP 148
45469: PPUSH
45470: LD_VAR 0 5
45474: PUSH
45475: LD_EXP 148
45479: PUSH
45480: LD_VAR 0 5
45484: ARRAY
45485: PUSH
45486: LD_INT 1
45488: PLUS
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PPUSH
45494: LD_VAR 0 2
45498: PUSH
45499: LD_VAR 0 3
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PPUSH
45508: CALL 51680 0 3
45512: ST_TO_ADDR
// result := true ;
45513: LD_ADDR_VAR 0 4
45517: PUSH
45518: LD_INT 1
45520: ST_TO_ADDR
// end ;
45521: LD_VAR 0 4
45525: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45526: LD_INT 0
45528: PPUSH
45529: PPUSH
45530: PPUSH
// if not unit in minersList then
45531: LD_VAR 0 1
45535: PUSH
45536: LD_EXP 147
45540: IN
45541: NOT
45542: IFFALSE 45546
// exit ;
45544: GO 45938
// index := GetElementIndex ( minersList , unit ) ;
45546: LD_ADDR_VAR 0 6
45550: PUSH
45551: LD_EXP 147
45555: PPUSH
45556: LD_VAR 0 1
45560: PPUSH
45561: CALL 51465 0 2
45565: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45566: LD_ADDR_VAR 0 5
45570: PUSH
45571: DOUBLE
45572: LD_EXP 148
45576: PUSH
45577: LD_VAR 0 6
45581: ARRAY
45582: INC
45583: ST_TO_ADDR
45584: LD_INT 1
45586: PUSH
45587: FOR_DOWNTO
45588: IFFALSE 45749
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45590: LD_EXP 148
45594: PUSH
45595: LD_VAR 0 6
45599: ARRAY
45600: PUSH
45601: LD_VAR 0 5
45605: ARRAY
45606: PUSH
45607: LD_INT 1
45609: ARRAY
45610: PUSH
45611: LD_VAR 0 2
45615: EQUAL
45616: PUSH
45617: LD_EXP 148
45621: PUSH
45622: LD_VAR 0 6
45626: ARRAY
45627: PUSH
45628: LD_VAR 0 5
45632: ARRAY
45633: PUSH
45634: LD_INT 2
45636: ARRAY
45637: PUSH
45638: LD_VAR 0 3
45642: EQUAL
45643: AND
45644: IFFALSE 45747
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45646: LD_EXP 148
45650: PUSH
45651: LD_VAR 0 6
45655: ARRAY
45656: PUSH
45657: LD_VAR 0 5
45661: ARRAY
45662: PUSH
45663: LD_INT 1
45665: ARRAY
45666: PPUSH
45667: LD_EXP 148
45671: PUSH
45672: LD_VAR 0 6
45676: ARRAY
45677: PUSH
45678: LD_VAR 0 5
45682: ARRAY
45683: PUSH
45684: LD_INT 2
45686: ARRAY
45687: PPUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: CALL_OW 255
45697: PPUSH
45698: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45702: LD_ADDR_EXP 148
45706: PUSH
45707: LD_EXP 148
45711: PPUSH
45712: LD_VAR 0 6
45716: PPUSH
45717: LD_EXP 148
45721: PUSH
45722: LD_VAR 0 6
45726: ARRAY
45727: PPUSH
45728: LD_VAR 0 5
45732: PPUSH
45733: CALL_OW 3
45737: PPUSH
45738: CALL_OW 1
45742: ST_TO_ADDR
// exit ;
45743: POP
45744: POP
45745: GO 45938
// end ; end ;
45747: GO 45587
45749: POP
45750: POP
// for i := minerMinesList [ index ] downto 1 do
45751: LD_ADDR_VAR 0 5
45755: PUSH
45756: DOUBLE
45757: LD_EXP 148
45761: PUSH
45762: LD_VAR 0 6
45766: ARRAY
45767: INC
45768: ST_TO_ADDR
45769: LD_INT 1
45771: PUSH
45772: FOR_DOWNTO
45773: IFFALSE 45936
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
45775: LD_EXP 148
45779: PUSH
45780: LD_VAR 0 6
45784: ARRAY
45785: PUSH
45786: LD_VAR 0 5
45790: ARRAY
45791: PUSH
45792: LD_INT 1
45794: ARRAY
45795: PPUSH
45796: LD_EXP 148
45800: PUSH
45801: LD_VAR 0 6
45805: ARRAY
45806: PUSH
45807: LD_VAR 0 5
45811: ARRAY
45812: PUSH
45813: LD_INT 2
45815: ARRAY
45816: PPUSH
45817: LD_VAR 0 2
45821: PPUSH
45822: LD_VAR 0 3
45826: PPUSH
45827: CALL_OW 298
45831: PUSH
45832: LD_INT 6
45834: LESS
45835: IFFALSE 45934
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45837: LD_EXP 148
45841: PUSH
45842: LD_VAR 0 6
45846: ARRAY
45847: PUSH
45848: LD_VAR 0 5
45852: ARRAY
45853: PUSH
45854: LD_INT 1
45856: ARRAY
45857: PPUSH
45858: LD_EXP 148
45862: PUSH
45863: LD_VAR 0 6
45867: ARRAY
45868: PUSH
45869: LD_VAR 0 5
45873: ARRAY
45874: PUSH
45875: LD_INT 2
45877: ARRAY
45878: PPUSH
45879: LD_VAR 0 1
45883: PPUSH
45884: CALL_OW 255
45888: PPUSH
45889: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45893: LD_ADDR_EXP 148
45897: PUSH
45898: LD_EXP 148
45902: PPUSH
45903: LD_VAR 0 6
45907: PPUSH
45908: LD_EXP 148
45912: PUSH
45913: LD_VAR 0 6
45917: ARRAY
45918: PPUSH
45919: LD_VAR 0 5
45923: PPUSH
45924: CALL_OW 3
45928: PPUSH
45929: CALL_OW 1
45933: ST_TO_ADDR
// end ; end ;
45934: GO 45772
45936: POP
45937: POP
// end ;
45938: LD_VAR 0 4
45942: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
45943: LD_INT 0
45945: PPUSH
45946: PPUSH
45947: PPUSH
45948: PPUSH
45949: PPUSH
45950: PPUSH
45951: PPUSH
45952: PPUSH
45953: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
45954: LD_VAR 0 1
45958: PPUSH
45959: CALL_OW 264
45963: PUSH
45964: LD_EXP 76
45968: EQUAL
45969: NOT
45970: PUSH
45971: LD_VAR 0 1
45975: PUSH
45976: LD_EXP 147
45980: IN
45981: NOT
45982: OR
45983: IFFALSE 45987
// exit ;
45985: GO 46309
// index := GetElementIndex ( minersList , unit ) ;
45987: LD_ADDR_VAR 0 6
45991: PUSH
45992: LD_EXP 147
45996: PPUSH
45997: LD_VAR 0 1
46001: PPUSH
46002: CALL 51465 0 2
46006: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46007: LD_ADDR_VAR 0 8
46011: PUSH
46012: LD_EXP 149
46016: PUSH
46017: LD_EXP 148
46021: PUSH
46022: LD_VAR 0 6
46026: ARRAY
46027: MINUS
46028: ST_TO_ADDR
// if not minesFreeAmount then
46029: LD_VAR 0 8
46033: NOT
46034: IFFALSE 46038
// exit ;
46036: GO 46309
// tmp := [ ] ;
46038: LD_ADDR_VAR 0 7
46042: PUSH
46043: EMPTY
46044: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46045: LD_ADDR_VAR 0 5
46049: PUSH
46050: DOUBLE
46051: LD_INT 1
46053: DEC
46054: ST_TO_ADDR
46055: LD_VAR 0 8
46059: PUSH
46060: FOR_TO
46061: IFFALSE 46256
// begin _d := rand ( 0 , 5 ) ;
46063: LD_ADDR_VAR 0 11
46067: PUSH
46068: LD_INT 0
46070: PPUSH
46071: LD_INT 5
46073: PPUSH
46074: CALL_OW 12
46078: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46079: LD_ADDR_VAR 0 12
46083: PUSH
46084: LD_INT 2
46086: PPUSH
46087: LD_INT 6
46089: PPUSH
46090: CALL_OW 12
46094: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46095: LD_ADDR_VAR 0 9
46099: PUSH
46100: LD_VAR 0 2
46104: PPUSH
46105: LD_VAR 0 11
46109: PPUSH
46110: LD_VAR 0 12
46114: PPUSH
46115: CALL_OW 272
46119: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46120: LD_ADDR_VAR 0 10
46124: PUSH
46125: LD_VAR 0 3
46129: PPUSH
46130: LD_VAR 0 11
46134: PPUSH
46135: LD_VAR 0 12
46139: PPUSH
46140: CALL_OW 273
46144: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
46145: LD_VAR 0 9
46149: PPUSH
46150: LD_VAR 0 10
46154: PPUSH
46155: CALL_OW 488
46159: PUSH
46160: LD_VAR 0 9
46164: PUSH
46165: LD_VAR 0 10
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_VAR 0 7
46178: IN
46179: NOT
46180: AND
46181: PUSH
46182: LD_VAR 0 9
46186: PPUSH
46187: LD_VAR 0 10
46191: PPUSH
46192: CALL_OW 458
46196: NOT
46197: AND
46198: IFFALSE 46240
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46200: LD_ADDR_VAR 0 7
46204: PUSH
46205: LD_VAR 0 7
46209: PPUSH
46210: LD_VAR 0 7
46214: PUSH
46215: LD_INT 1
46217: PLUS
46218: PPUSH
46219: LD_VAR 0 9
46223: PUSH
46224: LD_VAR 0 10
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PPUSH
46233: CALL_OW 1
46237: ST_TO_ADDR
46238: GO 46254
// i := i - 1 ;
46240: LD_ADDR_VAR 0 5
46244: PUSH
46245: LD_VAR 0 5
46249: PUSH
46250: LD_INT 1
46252: MINUS
46253: ST_TO_ADDR
// end ;
46254: GO 46060
46256: POP
46257: POP
// for i in tmp do
46258: LD_ADDR_VAR 0 5
46262: PUSH
46263: LD_VAR 0 7
46267: PUSH
46268: FOR_IN
46269: IFFALSE 46307
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46271: LD_VAR 0 1
46275: PPUSH
46276: LD_VAR 0 5
46280: PUSH
46281: LD_INT 1
46283: ARRAY
46284: PPUSH
46285: LD_VAR 0 5
46289: PUSH
46290: LD_INT 2
46292: ARRAY
46293: PPUSH
46294: CALL 45249 0 3
46298: NOT
46299: IFFALSE 46305
// exit ;
46301: POP
46302: POP
46303: GO 46309
46305: GO 46268
46307: POP
46308: POP
// end ;
46309: LD_VAR 0 4
46313: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46314: LD_INT 0
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
// if not GetClass ( unit ) = class_sniper then
46323: LD_VAR 0 1
46327: PPUSH
46328: CALL_OW 257
46332: PUSH
46333: LD_INT 5
46335: EQUAL
46336: NOT
46337: IFFALSE 46341
// exit ;
46339: GO 46729
// dist := 8 ;
46341: LD_ADDR_VAR 0 5
46345: PUSH
46346: LD_INT 8
46348: ST_TO_ADDR
// viewRange := 12 ;
46349: LD_ADDR_VAR 0 7
46353: PUSH
46354: LD_INT 12
46356: ST_TO_ADDR
// side := GetSide ( unit ) ;
46357: LD_ADDR_VAR 0 6
46361: PUSH
46362: LD_VAR 0 1
46366: PPUSH
46367: CALL_OW 255
46371: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
46372: LD_INT 61
46374: PPUSH
46375: LD_VAR 0 6
46379: PPUSH
46380: CALL_OW 321
46384: PUSH
46385: LD_INT 2
46387: EQUAL
46388: IFFALSE 46398
// viewRange := 16 ;
46390: LD_ADDR_VAR 0 7
46394: PUSH
46395: LD_INT 16
46397: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
46398: LD_VAR 0 1
46402: PPUSH
46403: LD_VAR 0 2
46407: PPUSH
46408: LD_VAR 0 3
46412: PPUSH
46413: CALL_OW 297
46417: PUSH
46418: LD_VAR 0 5
46422: GREATER
46423: IFFALSE 46502
// begin ComMoveXY ( unit , x , y ) ;
46425: LD_VAR 0 1
46429: PPUSH
46430: LD_VAR 0 2
46434: PPUSH
46435: LD_VAR 0 3
46439: PPUSH
46440: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46444: LD_INT 35
46446: PPUSH
46447: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
46451: LD_VAR 0 1
46455: PPUSH
46456: LD_VAR 0 2
46460: PPUSH
46461: LD_VAR 0 3
46465: PPUSH
46466: CALL 81529 0 3
46470: NOT
46471: IFFALSE 46475
// exit ;
46473: GO 46729
// until GetDistUnitXY ( unit , x , y ) < dist ;
46475: LD_VAR 0 1
46479: PPUSH
46480: LD_VAR 0 2
46484: PPUSH
46485: LD_VAR 0 3
46489: PPUSH
46490: CALL_OW 297
46494: PUSH
46495: LD_VAR 0 5
46499: LESS
46500: IFFALSE 46444
// end ; ComTurnXY ( unit , x , y ) ;
46502: LD_VAR 0 1
46506: PPUSH
46507: LD_VAR 0 2
46511: PPUSH
46512: LD_VAR 0 3
46516: PPUSH
46517: CALL_OW 118
// wait ( 5 ) ;
46521: LD_INT 5
46523: PPUSH
46524: CALL_OW 67
// _d := GetDir ( unit ) ;
46528: LD_ADDR_VAR 0 10
46532: PUSH
46533: LD_VAR 0 1
46537: PPUSH
46538: CALL_OW 254
46542: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46543: LD_ADDR_VAR 0 8
46547: PUSH
46548: LD_VAR 0 1
46552: PPUSH
46553: CALL_OW 250
46557: PPUSH
46558: LD_VAR 0 10
46562: PPUSH
46563: LD_VAR 0 5
46567: PPUSH
46568: CALL_OW 272
46572: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46573: LD_ADDR_VAR 0 9
46577: PUSH
46578: LD_VAR 0 1
46582: PPUSH
46583: CALL_OW 251
46587: PPUSH
46588: LD_VAR 0 10
46592: PPUSH
46593: LD_VAR 0 5
46597: PPUSH
46598: CALL_OW 273
46602: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46603: LD_VAR 0 8
46607: PPUSH
46608: LD_VAR 0 9
46612: PPUSH
46613: CALL_OW 488
46617: NOT
46618: IFFALSE 46622
// exit ;
46620: GO 46729
// ComAnimCustom ( unit , 1 ) ;
46622: LD_VAR 0 1
46626: PPUSH
46627: LD_INT 1
46629: PPUSH
46630: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46634: LD_VAR 0 8
46638: PPUSH
46639: LD_VAR 0 9
46643: PPUSH
46644: LD_VAR 0 6
46648: PPUSH
46649: LD_VAR 0 7
46653: PPUSH
46654: CALL_OW 330
// repeat wait ( 1 ) ;
46658: LD_INT 1
46660: PPUSH
46661: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46665: LD_VAR 0 1
46669: PPUSH
46670: CALL_OW 316
46674: PUSH
46675: LD_VAR 0 1
46679: PPUSH
46680: CALL_OW 314
46684: OR
46685: PUSH
46686: LD_VAR 0 1
46690: PPUSH
46691: CALL_OW 302
46695: NOT
46696: OR
46697: PUSH
46698: LD_VAR 0 1
46702: PPUSH
46703: CALL_OW 301
46707: OR
46708: IFFALSE 46658
// RemoveSeeing ( _x , _y , side ) ;
46710: LD_VAR 0 8
46714: PPUSH
46715: LD_VAR 0 9
46719: PPUSH
46720: LD_VAR 0 6
46724: PPUSH
46725: CALL_OW 331
// end ; end_of_file
46729: LD_VAR 0 4
46733: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46734: LD_INT 0
46736: PPUSH
46737: PPUSH
// if exist_mode then
46738: LD_VAR 0 2
46742: IFFALSE 46767
// unit := CreateCharacter ( prefix & ident ) else
46744: LD_ADDR_VAR 0 5
46748: PUSH
46749: LD_VAR 0 3
46753: PUSH
46754: LD_VAR 0 1
46758: STR
46759: PPUSH
46760: CALL_OW 34
46764: ST_TO_ADDR
46765: GO 46782
// unit := NewCharacter ( ident ) ;
46767: LD_ADDR_VAR 0 5
46771: PUSH
46772: LD_VAR 0 1
46776: PPUSH
46777: CALL_OW 25
46781: ST_TO_ADDR
// result := unit ;
46782: LD_ADDR_VAR 0 4
46786: PUSH
46787: LD_VAR 0 5
46791: ST_TO_ADDR
// end ;
46792: LD_VAR 0 4
46796: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
46797: LD_INT 0
46799: PPUSH
46800: PPUSH
// if not side or not nation then
46801: LD_VAR 0 1
46805: NOT
46806: PUSH
46807: LD_VAR 0 2
46811: NOT
46812: OR
46813: IFFALSE 46817
// exit ;
46815: GO 47581
// case nation of nation_american :
46817: LD_VAR 0 2
46821: PUSH
46822: LD_INT 1
46824: DOUBLE
46825: EQUAL
46826: IFTRUE 46830
46828: GO 47044
46830: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
46831: LD_ADDR_VAR 0 4
46835: PUSH
46836: LD_INT 35
46838: PUSH
46839: LD_INT 45
46841: PUSH
46842: LD_INT 46
46844: PUSH
46845: LD_INT 47
46847: PUSH
46848: LD_INT 82
46850: PUSH
46851: LD_INT 83
46853: PUSH
46854: LD_INT 84
46856: PUSH
46857: LD_INT 85
46859: PUSH
46860: LD_INT 86
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 6
46871: PUSH
46872: LD_INT 15
46874: PUSH
46875: LD_INT 16
46877: PUSH
46878: LD_INT 7
46880: PUSH
46881: LD_INT 12
46883: PUSH
46884: LD_INT 13
46886: PUSH
46887: LD_INT 10
46889: PUSH
46890: LD_INT 14
46892: PUSH
46893: LD_INT 20
46895: PUSH
46896: LD_INT 21
46898: PUSH
46899: LD_INT 22
46901: PUSH
46902: LD_INT 25
46904: PUSH
46905: LD_INT 32
46907: PUSH
46908: LD_INT 27
46910: PUSH
46911: LD_INT 36
46913: PUSH
46914: LD_INT 69
46916: PUSH
46917: LD_INT 39
46919: PUSH
46920: LD_INT 34
46922: PUSH
46923: LD_INT 40
46925: PUSH
46926: LD_INT 48
46928: PUSH
46929: LD_INT 49
46931: PUSH
46932: LD_INT 50
46934: PUSH
46935: LD_INT 51
46937: PUSH
46938: LD_INT 52
46940: PUSH
46941: LD_INT 53
46943: PUSH
46944: LD_INT 54
46946: PUSH
46947: LD_INT 55
46949: PUSH
46950: LD_INT 56
46952: PUSH
46953: LD_INT 57
46955: PUSH
46956: LD_INT 58
46958: PUSH
46959: LD_INT 59
46961: PUSH
46962: LD_INT 60
46964: PUSH
46965: LD_INT 61
46967: PUSH
46968: LD_INT 62
46970: PUSH
46971: LD_INT 80
46973: PUSH
46974: LD_INT 82
46976: PUSH
46977: LD_INT 83
46979: PUSH
46980: LD_INT 84
46982: PUSH
46983: LD_INT 85
46985: PUSH
46986: LD_INT 86
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
47042: GO 47505
47044: LD_INT 2
47046: DOUBLE
47047: EQUAL
47048: IFTRUE 47052
47050: GO 47274
47052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
47053: LD_ADDR_VAR 0 4
47057: PUSH
47058: LD_INT 35
47060: PUSH
47061: LD_INT 45
47063: PUSH
47064: LD_INT 46
47066: PUSH
47067: LD_INT 47
47069: PUSH
47070: LD_INT 82
47072: PUSH
47073: LD_INT 83
47075: PUSH
47076: LD_INT 84
47078: PUSH
47079: LD_INT 85
47081: PUSH
47082: LD_INT 87
47084: PUSH
47085: LD_INT 70
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 11
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: LD_INT 5
47102: PUSH
47103: LD_INT 6
47105: PUSH
47106: LD_INT 15
47108: PUSH
47109: LD_INT 18
47111: PUSH
47112: LD_INT 7
47114: PUSH
47115: LD_INT 17
47117: PUSH
47118: LD_INT 8
47120: PUSH
47121: LD_INT 20
47123: PUSH
47124: LD_INT 21
47126: PUSH
47127: LD_INT 22
47129: PUSH
47130: LD_INT 72
47132: PUSH
47133: LD_INT 26
47135: PUSH
47136: LD_INT 69
47138: PUSH
47139: LD_INT 39
47141: PUSH
47142: LD_INT 40
47144: PUSH
47145: LD_INT 41
47147: PUSH
47148: LD_INT 42
47150: PUSH
47151: LD_INT 43
47153: PUSH
47154: LD_INT 48
47156: PUSH
47157: LD_INT 49
47159: PUSH
47160: LD_INT 50
47162: PUSH
47163: LD_INT 51
47165: PUSH
47166: LD_INT 52
47168: PUSH
47169: LD_INT 53
47171: PUSH
47172: LD_INT 54
47174: PUSH
47175: LD_INT 55
47177: PUSH
47178: LD_INT 56
47180: PUSH
47181: LD_INT 60
47183: PUSH
47184: LD_INT 61
47186: PUSH
47187: LD_INT 62
47189: PUSH
47190: LD_INT 66
47192: PUSH
47193: LD_INT 67
47195: PUSH
47196: LD_INT 68
47198: PUSH
47199: LD_INT 81
47201: PUSH
47202: LD_INT 82
47204: PUSH
47205: LD_INT 83
47207: PUSH
47208: LD_INT 84
47210: PUSH
47211: LD_INT 85
47213: PUSH
47214: LD_INT 87
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
47272: GO 47505
47274: LD_INT 3
47276: DOUBLE
47277: EQUAL
47278: IFTRUE 47282
47280: GO 47504
47282: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
47283: LD_ADDR_VAR 0 4
47287: PUSH
47288: LD_INT 46
47290: PUSH
47291: LD_INT 47
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: LD_INT 82
47302: PUSH
47303: LD_INT 83
47305: PUSH
47306: LD_INT 84
47308: PUSH
47309: LD_INT 85
47311: PUSH
47312: LD_INT 86
47314: PUSH
47315: LD_INT 11
47317: PUSH
47318: LD_INT 9
47320: PUSH
47321: LD_INT 20
47323: PUSH
47324: LD_INT 19
47326: PUSH
47327: LD_INT 21
47329: PUSH
47330: LD_INT 24
47332: PUSH
47333: LD_INT 22
47335: PUSH
47336: LD_INT 25
47338: PUSH
47339: LD_INT 28
47341: PUSH
47342: LD_INT 29
47344: PUSH
47345: LD_INT 30
47347: PUSH
47348: LD_INT 31
47350: PUSH
47351: LD_INT 37
47353: PUSH
47354: LD_INT 38
47356: PUSH
47357: LD_INT 32
47359: PUSH
47360: LD_INT 27
47362: PUSH
47363: LD_INT 33
47365: PUSH
47366: LD_INT 69
47368: PUSH
47369: LD_INT 39
47371: PUSH
47372: LD_INT 34
47374: PUSH
47375: LD_INT 40
47377: PUSH
47378: LD_INT 71
47380: PUSH
47381: LD_INT 23
47383: PUSH
47384: LD_INT 44
47386: PUSH
47387: LD_INT 48
47389: PUSH
47390: LD_INT 49
47392: PUSH
47393: LD_INT 50
47395: PUSH
47396: LD_INT 51
47398: PUSH
47399: LD_INT 52
47401: PUSH
47402: LD_INT 53
47404: PUSH
47405: LD_INT 54
47407: PUSH
47408: LD_INT 55
47410: PUSH
47411: LD_INT 56
47413: PUSH
47414: LD_INT 57
47416: PUSH
47417: LD_INT 58
47419: PUSH
47420: LD_INT 59
47422: PUSH
47423: LD_INT 63
47425: PUSH
47426: LD_INT 64
47428: PUSH
47429: LD_INT 65
47431: PUSH
47432: LD_INT 82
47434: PUSH
47435: LD_INT 83
47437: PUSH
47438: LD_INT 84
47440: PUSH
47441: LD_INT 85
47443: PUSH
47444: LD_INT 86
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: ST_TO_ADDR
47502: GO 47505
47504: POP
// if state > - 1 and state < 3 then
47505: LD_VAR 0 3
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: GREATER
47514: PUSH
47515: LD_VAR 0 3
47519: PUSH
47520: LD_INT 3
47522: LESS
47523: AND
47524: IFFALSE 47581
// for i in result do
47526: LD_ADDR_VAR 0 5
47530: PUSH
47531: LD_VAR 0 4
47535: PUSH
47536: FOR_IN
47537: IFFALSE 47579
// if GetTech ( i , side ) <> state then
47539: LD_VAR 0 5
47543: PPUSH
47544: LD_VAR 0 1
47548: PPUSH
47549: CALL_OW 321
47553: PUSH
47554: LD_VAR 0 3
47558: NONEQUAL
47559: IFFALSE 47577
// result := result diff i ;
47561: LD_ADDR_VAR 0 4
47565: PUSH
47566: LD_VAR 0 4
47570: PUSH
47571: LD_VAR 0 5
47575: DIFF
47576: ST_TO_ADDR
47577: GO 47536
47579: POP
47580: POP
// end ;
47581: LD_VAR 0 4
47585: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47586: LD_INT 0
47588: PPUSH
47589: PPUSH
47590: PPUSH
// result := true ;
47591: LD_ADDR_VAR 0 3
47595: PUSH
47596: LD_INT 1
47598: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47599: LD_ADDR_VAR 0 5
47603: PUSH
47604: LD_VAR 0 2
47608: PPUSH
47609: CALL_OW 480
47613: ST_TO_ADDR
// if not tmp then
47614: LD_VAR 0 5
47618: NOT
47619: IFFALSE 47623
// exit ;
47621: GO 47672
// for i in tmp do
47623: LD_ADDR_VAR 0 4
47627: PUSH
47628: LD_VAR 0 5
47632: PUSH
47633: FOR_IN
47634: IFFALSE 47670
// if GetTech ( i , side ) <> state_researched then
47636: LD_VAR 0 4
47640: PPUSH
47641: LD_VAR 0 1
47645: PPUSH
47646: CALL_OW 321
47650: PUSH
47651: LD_INT 2
47653: NONEQUAL
47654: IFFALSE 47668
// begin result := false ;
47656: LD_ADDR_VAR 0 3
47660: PUSH
47661: LD_INT 0
47663: ST_TO_ADDR
// exit ;
47664: POP
47665: POP
47666: GO 47672
// end ;
47668: GO 47633
47670: POP
47671: POP
// end ;
47672: LD_VAR 0 3
47676: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47677: LD_INT 0
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
47684: PPUSH
47685: PPUSH
47686: PPUSH
47687: PPUSH
47688: PPUSH
47689: PPUSH
47690: PPUSH
47691: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47692: LD_VAR 0 1
47696: NOT
47697: PUSH
47698: LD_VAR 0 1
47702: PPUSH
47703: CALL_OW 257
47707: PUSH
47708: LD_INT 9
47710: NONEQUAL
47711: OR
47712: IFFALSE 47716
// exit ;
47714: GO 48289
// side := GetSide ( unit ) ;
47716: LD_ADDR_VAR 0 9
47720: PUSH
47721: LD_VAR 0 1
47725: PPUSH
47726: CALL_OW 255
47730: ST_TO_ADDR
// tech_space := tech_spacanom ;
47731: LD_ADDR_VAR 0 12
47735: PUSH
47736: LD_INT 29
47738: ST_TO_ADDR
// tech_time := tech_taurad ;
47739: LD_ADDR_VAR 0 13
47743: PUSH
47744: LD_INT 28
47746: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47747: LD_ADDR_VAR 0 11
47751: PUSH
47752: LD_VAR 0 1
47756: PPUSH
47757: CALL_OW 310
47761: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
47762: LD_VAR 0 11
47766: PPUSH
47767: CALL_OW 247
47771: PUSH
47772: LD_INT 2
47774: EQUAL
47775: IFFALSE 47779
// exit ;
47777: GO 48289
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47779: LD_ADDR_VAR 0 8
47783: PUSH
47784: LD_INT 81
47786: PUSH
47787: LD_VAR 0 9
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: LD_INT 21
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PPUSH
47817: CALL_OW 69
47821: ST_TO_ADDR
// if not tmp then
47822: LD_VAR 0 8
47826: NOT
47827: IFFALSE 47831
// exit ;
47829: GO 48289
// if in_unit then
47831: LD_VAR 0 11
47835: IFFALSE 47859
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
47837: LD_ADDR_VAR 0 10
47841: PUSH
47842: LD_VAR 0 8
47846: PPUSH
47847: LD_VAR 0 11
47851: PPUSH
47852: CALL_OW 74
47856: ST_TO_ADDR
47857: GO 47879
// enemy := NearestUnitToUnit ( tmp , unit ) ;
47859: LD_ADDR_VAR 0 10
47863: PUSH
47864: LD_VAR 0 8
47868: PPUSH
47869: LD_VAR 0 1
47873: PPUSH
47874: CALL_OW 74
47878: ST_TO_ADDR
// if not enemy then
47879: LD_VAR 0 10
47883: NOT
47884: IFFALSE 47888
// exit ;
47886: GO 48289
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
47888: LD_VAR 0 11
47892: PUSH
47893: LD_VAR 0 11
47897: PPUSH
47898: LD_VAR 0 10
47902: PPUSH
47903: CALL_OW 296
47907: PUSH
47908: LD_INT 13
47910: GREATER
47911: AND
47912: PUSH
47913: LD_VAR 0 1
47917: PPUSH
47918: LD_VAR 0 10
47922: PPUSH
47923: CALL_OW 296
47927: PUSH
47928: LD_INT 12
47930: GREATER
47931: OR
47932: IFFALSE 47936
// exit ;
47934: GO 48289
// missile := [ 1 ] ;
47936: LD_ADDR_VAR 0 14
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: ST_TO_ADDR
// if Researched ( side , tech_space ) then
47947: LD_VAR 0 9
47951: PPUSH
47952: LD_VAR 0 12
47956: PPUSH
47957: CALL_OW 325
47961: IFFALSE 47990
// missile := Insert ( missile , missile + 1 , 2 ) ;
47963: LD_ADDR_VAR 0 14
47967: PUSH
47968: LD_VAR 0 14
47972: PPUSH
47973: LD_VAR 0 14
47977: PUSH
47978: LD_INT 1
47980: PLUS
47981: PPUSH
47982: LD_INT 2
47984: PPUSH
47985: CALL_OW 2
47989: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
47990: LD_VAR 0 9
47994: PPUSH
47995: LD_VAR 0 13
47999: PPUSH
48000: CALL_OW 325
48004: PUSH
48005: LD_VAR 0 10
48009: PPUSH
48010: CALL_OW 255
48014: PPUSH
48015: LD_VAR 0 13
48019: PPUSH
48020: CALL_OW 325
48024: NOT
48025: AND
48026: IFFALSE 48055
// missile := Insert ( missile , missile + 1 , 3 ) ;
48028: LD_ADDR_VAR 0 14
48032: PUSH
48033: LD_VAR 0 14
48037: PPUSH
48038: LD_VAR 0 14
48042: PUSH
48043: LD_INT 1
48045: PLUS
48046: PPUSH
48047: LD_INT 3
48049: PPUSH
48050: CALL_OW 2
48054: ST_TO_ADDR
// if missile < 2 then
48055: LD_VAR 0 14
48059: PUSH
48060: LD_INT 2
48062: LESS
48063: IFFALSE 48067
// exit ;
48065: GO 48289
// x := GetX ( enemy ) ;
48067: LD_ADDR_VAR 0 4
48071: PUSH
48072: LD_VAR 0 10
48076: PPUSH
48077: CALL_OW 250
48081: ST_TO_ADDR
// y := GetY ( enemy ) ;
48082: LD_ADDR_VAR 0 5
48086: PUSH
48087: LD_VAR 0 10
48091: PPUSH
48092: CALL_OW 251
48096: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48097: LD_ADDR_VAR 0 6
48101: PUSH
48102: LD_VAR 0 4
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PPUSH
48111: LD_INT 1
48113: PPUSH
48114: CALL_OW 12
48118: PLUS
48119: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48120: LD_ADDR_VAR 0 7
48124: PUSH
48125: LD_VAR 0 5
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PPUSH
48134: LD_INT 1
48136: PPUSH
48137: CALL_OW 12
48141: PLUS
48142: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48143: LD_VAR 0 6
48147: PPUSH
48148: LD_VAR 0 7
48152: PPUSH
48153: CALL_OW 488
48157: NOT
48158: IFFALSE 48180
// begin _x := x ;
48160: LD_ADDR_VAR 0 6
48164: PUSH
48165: LD_VAR 0 4
48169: ST_TO_ADDR
// _y := y ;
48170: LD_ADDR_VAR 0 7
48174: PUSH
48175: LD_VAR 0 5
48179: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: LD_INT 1
48187: PPUSH
48188: LD_VAR 0 14
48192: PPUSH
48193: CALL_OW 12
48197: ST_TO_ADDR
// case i of 1 :
48198: LD_VAR 0 3
48202: PUSH
48203: LD_INT 1
48205: DOUBLE
48206: EQUAL
48207: IFTRUE 48211
48209: GO 48228
48211: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_VAR 0 10
48221: PPUSH
48222: CALL_OW 115
48226: GO 48289
48228: LD_INT 2
48230: DOUBLE
48231: EQUAL
48232: IFTRUE 48236
48234: GO 48258
48236: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48237: LD_VAR 0 1
48241: PPUSH
48242: LD_VAR 0 6
48246: PPUSH
48247: LD_VAR 0 7
48251: PPUSH
48252: CALL_OW 153
48256: GO 48289
48258: LD_INT 3
48260: DOUBLE
48261: EQUAL
48262: IFTRUE 48266
48264: GO 48288
48266: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48267: LD_VAR 0 1
48271: PPUSH
48272: LD_VAR 0 6
48276: PPUSH
48277: LD_VAR 0 7
48281: PPUSH
48282: CALL_OW 154
48286: GO 48289
48288: POP
// end ;
48289: LD_VAR 0 2
48293: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48294: LD_INT 0
48296: PPUSH
48297: PPUSH
48298: PPUSH
48299: PPUSH
48300: PPUSH
48301: PPUSH
// if not unit or not building then
48302: LD_VAR 0 1
48306: NOT
48307: PUSH
48308: LD_VAR 0 2
48312: NOT
48313: OR
48314: IFFALSE 48318
// exit ;
48316: GO 48476
// x := GetX ( building ) ;
48318: LD_ADDR_VAR 0 5
48322: PUSH
48323: LD_VAR 0 2
48327: PPUSH
48328: CALL_OW 250
48332: ST_TO_ADDR
// y := GetY ( building ) ;
48333: LD_ADDR_VAR 0 6
48337: PUSH
48338: LD_VAR 0 2
48342: PPUSH
48343: CALL_OW 251
48347: ST_TO_ADDR
// for i = 0 to 5 do
48348: LD_ADDR_VAR 0 4
48352: PUSH
48353: DOUBLE
48354: LD_INT 0
48356: DEC
48357: ST_TO_ADDR
48358: LD_INT 5
48360: PUSH
48361: FOR_TO
48362: IFFALSE 48474
// begin _x := ShiftX ( x , i , 3 ) ;
48364: LD_ADDR_VAR 0 7
48368: PUSH
48369: LD_VAR 0 5
48373: PPUSH
48374: LD_VAR 0 4
48378: PPUSH
48379: LD_INT 3
48381: PPUSH
48382: CALL_OW 272
48386: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48387: LD_ADDR_VAR 0 8
48391: PUSH
48392: LD_VAR 0 6
48396: PPUSH
48397: LD_VAR 0 4
48401: PPUSH
48402: LD_INT 3
48404: PPUSH
48405: CALL_OW 273
48409: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48410: LD_VAR 0 7
48414: PPUSH
48415: LD_VAR 0 8
48419: PPUSH
48420: CALL_OW 488
48424: NOT
48425: IFFALSE 48429
// continue ;
48427: GO 48361
// if HexInfo ( _x , _y ) = 0 then
48429: LD_VAR 0 7
48433: PPUSH
48434: LD_VAR 0 8
48438: PPUSH
48439: CALL_OW 428
48443: PUSH
48444: LD_INT 0
48446: EQUAL
48447: IFFALSE 48472
// begin ComMoveXY ( unit , _x , _y ) ;
48449: LD_VAR 0 1
48453: PPUSH
48454: LD_VAR 0 7
48458: PPUSH
48459: LD_VAR 0 8
48463: PPUSH
48464: CALL_OW 111
// exit ;
48468: POP
48469: POP
48470: GO 48476
// end ; end ;
48472: GO 48361
48474: POP
48475: POP
// end ;
48476: LD_VAR 0 3
48480: RET
// export function ScanBase ( side , base_area ) ; begin
48481: LD_INT 0
48483: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48484: LD_ADDR_VAR 0 3
48488: PUSH
48489: LD_VAR 0 2
48493: PPUSH
48494: LD_INT 81
48496: PUSH
48497: LD_VAR 0 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PPUSH
48506: CALL_OW 70
48510: ST_TO_ADDR
// end ;
48511: LD_VAR 0 3
48515: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48516: LD_INT 0
48518: PPUSH
48519: PPUSH
48520: PPUSH
48521: PPUSH
// result := false ;
48522: LD_ADDR_VAR 0 2
48526: PUSH
48527: LD_INT 0
48529: ST_TO_ADDR
// side := GetSide ( unit ) ;
48530: LD_ADDR_VAR 0 3
48534: PUSH
48535: LD_VAR 0 1
48539: PPUSH
48540: CALL_OW 255
48544: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48545: LD_ADDR_VAR 0 4
48549: PUSH
48550: LD_VAR 0 1
48554: PPUSH
48555: CALL_OW 248
48559: ST_TO_ADDR
// case nat of 1 :
48560: LD_VAR 0 4
48564: PUSH
48565: LD_INT 1
48567: DOUBLE
48568: EQUAL
48569: IFTRUE 48573
48571: GO 48584
48573: POP
// tech := tech_lassight ; 2 :
48574: LD_ADDR_VAR 0 5
48578: PUSH
48579: LD_INT 12
48581: ST_TO_ADDR
48582: GO 48623
48584: LD_INT 2
48586: DOUBLE
48587: EQUAL
48588: IFTRUE 48592
48590: GO 48603
48592: POP
// tech := tech_mortar ; 3 :
48593: LD_ADDR_VAR 0 5
48597: PUSH
48598: LD_INT 41
48600: ST_TO_ADDR
48601: GO 48623
48603: LD_INT 3
48605: DOUBLE
48606: EQUAL
48607: IFTRUE 48611
48609: GO 48622
48611: POP
// tech := tech_bazooka ; end ;
48612: LD_ADDR_VAR 0 5
48616: PUSH
48617: LD_INT 44
48619: ST_TO_ADDR
48620: GO 48623
48622: POP
// if Researched ( side , tech ) then
48623: LD_VAR 0 3
48627: PPUSH
48628: LD_VAR 0 5
48632: PPUSH
48633: CALL_OW 325
48637: IFFALSE 48664
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48639: LD_ADDR_VAR 0 2
48643: PUSH
48644: LD_INT 5
48646: PUSH
48647: LD_INT 8
48649: PUSH
48650: LD_INT 9
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: LIST
48657: PUSH
48658: LD_VAR 0 4
48662: ARRAY
48663: ST_TO_ADDR
// end ;
48664: LD_VAR 0 2
48668: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48669: LD_INT 0
48671: PPUSH
48672: PPUSH
48673: PPUSH
// if not mines then
48674: LD_VAR 0 2
48678: NOT
48679: IFFALSE 48683
// exit ;
48681: GO 48827
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48683: LD_ADDR_VAR 0 5
48687: PUSH
48688: LD_INT 81
48690: PUSH
48691: LD_VAR 0 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: LD_INT 21
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PPUSH
48721: CALL_OW 69
48725: ST_TO_ADDR
// for i in mines do
48726: LD_ADDR_VAR 0 4
48730: PUSH
48731: LD_VAR 0 2
48735: PUSH
48736: FOR_IN
48737: IFFALSE 48825
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48739: LD_VAR 0 4
48743: PUSH
48744: LD_INT 1
48746: ARRAY
48747: PPUSH
48748: LD_VAR 0 4
48752: PUSH
48753: LD_INT 2
48755: ARRAY
48756: PPUSH
48757: CALL_OW 458
48761: NOT
48762: IFFALSE 48766
// continue ;
48764: GO 48736
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48766: LD_VAR 0 4
48770: PUSH
48771: LD_INT 1
48773: ARRAY
48774: PPUSH
48775: LD_VAR 0 4
48779: PUSH
48780: LD_INT 2
48782: ARRAY
48783: PPUSH
48784: CALL_OW 428
48788: PUSH
48789: LD_VAR 0 5
48793: IN
48794: IFFALSE 48823
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48796: LD_VAR 0 4
48800: PUSH
48801: LD_INT 1
48803: ARRAY
48804: PPUSH
48805: LD_VAR 0 4
48809: PUSH
48810: LD_INT 2
48812: ARRAY
48813: PPUSH
48814: LD_VAR 0 1
48818: PPUSH
48819: CALL_OW 456
// end ;
48823: GO 48736
48825: POP
48826: POP
// end ;
48827: LD_VAR 0 3
48831: RET
// export function Count ( array ) ; var i ; begin
48832: LD_INT 0
48834: PPUSH
48835: PPUSH
// result := 0 ;
48836: LD_ADDR_VAR 0 2
48840: PUSH
48841: LD_INT 0
48843: ST_TO_ADDR
// for i in array do
48844: LD_ADDR_VAR 0 3
48848: PUSH
48849: LD_VAR 0 1
48853: PUSH
48854: FOR_IN
48855: IFFALSE 48879
// if i then
48857: LD_VAR 0 3
48861: IFFALSE 48877
// result := result + 1 ;
48863: LD_ADDR_VAR 0 2
48867: PUSH
48868: LD_VAR 0 2
48872: PUSH
48873: LD_INT 1
48875: PLUS
48876: ST_TO_ADDR
48877: GO 48854
48879: POP
48880: POP
// end ;
48881: LD_VAR 0 2
48885: RET
// export function IsEmpty ( building ) ; begin
48886: LD_INT 0
48888: PPUSH
// if not building then
48889: LD_VAR 0 1
48893: NOT
48894: IFFALSE 48898
// exit ;
48896: GO 48941
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48898: LD_ADDR_VAR 0 2
48902: PUSH
48903: LD_VAR 0 1
48907: PUSH
48908: LD_INT 22
48910: PUSH
48911: LD_VAR 0 1
48915: PPUSH
48916: CALL_OW 255
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 58
48927: PUSH
48928: EMPTY
48929: LIST
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PPUSH
48935: CALL_OW 69
48939: IN
48940: ST_TO_ADDR
// end ;
48941: LD_VAR 0 2
48945: RET
// export function IsNotFull ( building ) ; begin
48946: LD_INT 0
48948: PPUSH
// if not building then
48949: LD_VAR 0 1
48953: NOT
48954: IFFALSE 48958
// exit ;
48956: GO 48977
// result := UnitsInside ( building ) < 6 ;
48958: LD_ADDR_VAR 0 2
48962: PUSH
48963: LD_VAR 0 1
48967: PPUSH
48968: CALL_OW 313
48972: PUSH
48973: LD_INT 6
48975: LESS
48976: ST_TO_ADDR
// end ;
48977: LD_VAR 0 2
48981: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48982: LD_INT 0
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
// tmp := [ ] ;
48988: LD_ADDR_VAR 0 3
48992: PUSH
48993: EMPTY
48994: ST_TO_ADDR
// list := [ ] ;
48995: LD_ADDR_VAR 0 5
48999: PUSH
49000: EMPTY
49001: ST_TO_ADDR
// for i = 16 to 25 do
49002: LD_ADDR_VAR 0 4
49006: PUSH
49007: DOUBLE
49008: LD_INT 16
49010: DEC
49011: ST_TO_ADDR
49012: LD_INT 25
49014: PUSH
49015: FOR_TO
49016: IFFALSE 49089
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49018: LD_ADDR_VAR 0 3
49022: PUSH
49023: LD_VAR 0 3
49027: PUSH
49028: LD_INT 22
49030: PUSH
49031: LD_VAR 0 1
49035: PPUSH
49036: CALL_OW 255
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 91
49047: PUSH
49048: LD_VAR 0 1
49052: PUSH
49053: LD_INT 6
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 30
49063: PUSH
49064: LD_VAR 0 4
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: LIST
49077: PUSH
49078: EMPTY
49079: LIST
49080: PPUSH
49081: CALL_OW 69
49085: ADD
49086: ST_TO_ADDR
49087: GO 49015
49089: POP
49090: POP
// for i = 1 to tmp do
49091: LD_ADDR_VAR 0 4
49095: PUSH
49096: DOUBLE
49097: LD_INT 1
49099: DEC
49100: ST_TO_ADDR
49101: LD_VAR 0 3
49105: PUSH
49106: FOR_TO
49107: IFFALSE 49195
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
49109: LD_ADDR_VAR 0 5
49113: PUSH
49114: LD_VAR 0 5
49118: PUSH
49119: LD_VAR 0 3
49123: PUSH
49124: LD_VAR 0 4
49128: ARRAY
49129: PPUSH
49130: CALL_OW 266
49134: PUSH
49135: LD_VAR 0 3
49139: PUSH
49140: LD_VAR 0 4
49144: ARRAY
49145: PPUSH
49146: CALL_OW 250
49150: PUSH
49151: LD_VAR 0 3
49155: PUSH
49156: LD_VAR 0 4
49160: ARRAY
49161: PPUSH
49162: CALL_OW 251
49166: PUSH
49167: LD_VAR 0 3
49171: PUSH
49172: LD_VAR 0 4
49176: ARRAY
49177: PPUSH
49178: CALL_OW 254
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: ADD
49192: ST_TO_ADDR
49193: GO 49106
49195: POP
49196: POP
// result := list ;
49197: LD_ADDR_VAR 0 2
49201: PUSH
49202: LD_VAR 0 5
49206: ST_TO_ADDR
// end ;
49207: LD_VAR 0 2
49211: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
49212: LD_INT 0
49214: PPUSH
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
// if not factory then
49221: LD_VAR 0 1
49225: NOT
49226: IFFALSE 49230
// exit ;
49228: GO 49823
// if control = control_apeman then
49230: LD_VAR 0 4
49234: PUSH
49235: LD_INT 5
49237: EQUAL
49238: IFFALSE 49347
// begin tmp := UnitsInside ( factory ) ;
49240: LD_ADDR_VAR 0 8
49244: PUSH
49245: LD_VAR 0 1
49249: PPUSH
49250: CALL_OW 313
49254: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
49255: LD_VAR 0 8
49259: PPUSH
49260: LD_INT 25
49262: PUSH
49263: LD_INT 12
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PPUSH
49270: CALL_OW 72
49274: NOT
49275: IFFALSE 49285
// control := control_manual ;
49277: LD_ADDR_VAR 0 4
49281: PUSH
49282: LD_INT 1
49284: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
49285: LD_ADDR_VAR 0 8
49289: PUSH
49290: LD_VAR 0 1
49294: PPUSH
49295: CALL 48982 0 1
49299: ST_TO_ADDR
// if tmp then
49300: LD_VAR 0 8
49304: IFFALSE 49347
// begin for i in tmp do
49306: LD_ADDR_VAR 0 7
49310: PUSH
49311: LD_VAR 0 8
49315: PUSH
49316: FOR_IN
49317: IFFALSE 49345
// if i [ 1 ] = b_ext_radio then
49319: LD_VAR 0 7
49323: PUSH
49324: LD_INT 1
49326: ARRAY
49327: PUSH
49328: LD_INT 22
49330: EQUAL
49331: IFFALSE 49343
// begin control := control_remote ;
49333: LD_ADDR_VAR 0 4
49337: PUSH
49338: LD_INT 2
49340: ST_TO_ADDR
// break ;
49341: GO 49345
// end ;
49343: GO 49316
49345: POP
49346: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49347: LD_VAR 0 1
49351: PPUSH
49352: LD_VAR 0 2
49356: PPUSH
49357: LD_VAR 0 3
49361: PPUSH
49362: LD_VAR 0 4
49366: PPUSH
49367: LD_VAR 0 5
49371: PPUSH
49372: CALL_OW 448
49376: IFFALSE 49411
// begin result := [ chassis , engine , control , weapon ] ;
49378: LD_ADDR_VAR 0 6
49382: PUSH
49383: LD_VAR 0 2
49387: PUSH
49388: LD_VAR 0 3
49392: PUSH
49393: LD_VAR 0 4
49397: PUSH
49398: LD_VAR 0 5
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: ST_TO_ADDR
// exit ;
49409: GO 49823
// end ; _chassis := AvailableChassisList ( factory ) ;
49411: LD_ADDR_VAR 0 9
49415: PUSH
49416: LD_VAR 0 1
49420: PPUSH
49421: CALL_OW 475
49425: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
49426: LD_ADDR_VAR 0 11
49430: PUSH
49431: LD_VAR 0 1
49435: PPUSH
49436: CALL_OW 476
49440: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
49441: LD_ADDR_VAR 0 12
49445: PUSH
49446: LD_VAR 0 1
49450: PPUSH
49451: CALL_OW 477
49455: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
49456: LD_ADDR_VAR 0 10
49460: PUSH
49461: LD_VAR 0 1
49465: PPUSH
49466: CALL_OW 478
49470: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
49471: LD_VAR 0 9
49475: NOT
49476: PUSH
49477: LD_VAR 0 11
49481: NOT
49482: OR
49483: PUSH
49484: LD_VAR 0 12
49488: NOT
49489: OR
49490: PUSH
49491: LD_VAR 0 10
49495: NOT
49496: OR
49497: IFFALSE 49532
// begin result := [ chassis , engine , control , weapon ] ;
49499: LD_ADDR_VAR 0 6
49503: PUSH
49504: LD_VAR 0 2
49508: PUSH
49509: LD_VAR 0 3
49513: PUSH
49514: LD_VAR 0 4
49518: PUSH
49519: LD_VAR 0 5
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: ST_TO_ADDR
// exit ;
49530: GO 49823
// end ; if not chassis in _chassis then
49532: LD_VAR 0 2
49536: PUSH
49537: LD_VAR 0 9
49541: IN
49542: NOT
49543: IFFALSE 49569
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49545: LD_ADDR_VAR 0 2
49549: PUSH
49550: LD_VAR 0 9
49554: PUSH
49555: LD_INT 1
49557: PPUSH
49558: LD_VAR 0 9
49562: PPUSH
49563: CALL_OW 12
49567: ARRAY
49568: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49569: LD_VAR 0 2
49573: PPUSH
49574: LD_VAR 0 3
49578: PPUSH
49579: CALL 49828 0 2
49583: NOT
49584: IFFALSE 49643
// repeat engine := _engine [ 1 ] ;
49586: LD_ADDR_VAR 0 3
49590: PUSH
49591: LD_VAR 0 11
49595: PUSH
49596: LD_INT 1
49598: ARRAY
49599: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49600: LD_ADDR_VAR 0 11
49604: PUSH
49605: LD_VAR 0 11
49609: PPUSH
49610: LD_INT 1
49612: PPUSH
49613: CALL_OW 3
49617: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49618: LD_VAR 0 2
49622: PPUSH
49623: LD_VAR 0 3
49627: PPUSH
49628: CALL 49828 0 2
49632: PUSH
49633: LD_VAR 0 11
49637: PUSH
49638: EMPTY
49639: EQUAL
49640: OR
49641: IFFALSE 49586
// if not control in _control then
49643: LD_VAR 0 4
49647: PUSH
49648: LD_VAR 0 12
49652: IN
49653: NOT
49654: IFFALSE 49680
// control := _control [ rand ( 1 , _control ) ] ;
49656: LD_ADDR_VAR 0 4
49660: PUSH
49661: LD_VAR 0 12
49665: PUSH
49666: LD_INT 1
49668: PPUSH
49669: LD_VAR 0 12
49673: PPUSH
49674: CALL_OW 12
49678: ARRAY
49679: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49680: LD_VAR 0 2
49684: PPUSH
49685: LD_VAR 0 5
49689: PPUSH
49690: CALL 50048 0 2
49694: NOT
49695: IFFALSE 49754
// repeat weapon := _weapon [ 1 ] ;
49697: LD_ADDR_VAR 0 5
49701: PUSH
49702: LD_VAR 0 10
49706: PUSH
49707: LD_INT 1
49709: ARRAY
49710: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49711: LD_ADDR_VAR 0 10
49715: PUSH
49716: LD_VAR 0 10
49720: PPUSH
49721: LD_INT 1
49723: PPUSH
49724: CALL_OW 3
49728: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49729: LD_VAR 0 2
49733: PPUSH
49734: LD_VAR 0 5
49738: PPUSH
49739: CALL 50048 0 2
49743: PUSH
49744: LD_VAR 0 10
49748: PUSH
49749: EMPTY
49750: EQUAL
49751: OR
49752: IFFALSE 49697
// result := [ ] ;
49754: LD_ADDR_VAR 0 6
49758: PUSH
49759: EMPTY
49760: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49761: LD_VAR 0 1
49765: PPUSH
49766: LD_VAR 0 2
49770: PPUSH
49771: LD_VAR 0 3
49775: PPUSH
49776: LD_VAR 0 4
49780: PPUSH
49781: LD_VAR 0 5
49785: PPUSH
49786: CALL_OW 448
49790: IFFALSE 49823
// result := [ chassis , engine , control , weapon ] ;
49792: LD_ADDR_VAR 0 6
49796: PUSH
49797: LD_VAR 0 2
49801: PUSH
49802: LD_VAR 0 3
49806: PUSH
49807: LD_VAR 0 4
49811: PUSH
49812: LD_VAR 0 5
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// end ;
49823: LD_VAR 0 6
49827: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49828: LD_INT 0
49830: PPUSH
// if not chassis or not engine then
49831: LD_VAR 0 1
49835: NOT
49836: PUSH
49837: LD_VAR 0 2
49841: NOT
49842: OR
49843: IFFALSE 49847
// exit ;
49845: GO 50043
// case engine of engine_solar :
49847: LD_VAR 0 2
49851: PUSH
49852: LD_INT 2
49854: DOUBLE
49855: EQUAL
49856: IFTRUE 49860
49858: GO 49898
49860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49861: LD_ADDR_VAR 0 3
49865: PUSH
49866: LD_INT 11
49868: PUSH
49869: LD_INT 12
49871: PUSH
49872: LD_INT 13
49874: PUSH
49875: LD_INT 14
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: ST_TO_ADDR
49896: GO 50027
49898: LD_INT 1
49900: DOUBLE
49901: EQUAL
49902: IFTRUE 49906
49904: GO 49968
49906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49907: LD_ADDR_VAR 0 3
49911: PUSH
49912: LD_INT 11
49914: PUSH
49915: LD_INT 12
49917: PUSH
49918: LD_INT 13
49920: PUSH
49921: LD_INT 14
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: LD_INT 4
49935: PUSH
49936: LD_INT 5
49938: PUSH
49939: LD_INT 21
49941: PUSH
49942: LD_INT 23
49944: PUSH
49945: LD_INT 22
49947: PUSH
49948: LD_INT 24
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
49966: GO 50027
49968: LD_INT 3
49970: DOUBLE
49971: EQUAL
49972: IFTRUE 49976
49974: GO 50026
49976: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49977: LD_ADDR_VAR 0 3
49981: PUSH
49982: LD_INT 13
49984: PUSH
49985: LD_INT 14
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: LD_INT 4
49996: PUSH
49997: LD_INT 5
49999: PUSH
50000: LD_INT 21
50002: PUSH
50003: LD_INT 22
50005: PUSH
50006: LD_INT 23
50008: PUSH
50009: LD_INT 24
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
50024: GO 50027
50026: POP
// result := ( chassis in result ) ;
50027: LD_ADDR_VAR 0 3
50031: PUSH
50032: LD_VAR 0 1
50036: PUSH
50037: LD_VAR 0 3
50041: IN
50042: ST_TO_ADDR
// end ;
50043: LD_VAR 0 3
50047: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50048: LD_INT 0
50050: PPUSH
// if not chassis or not weapon then
50051: LD_VAR 0 1
50055: NOT
50056: PUSH
50057: LD_VAR 0 2
50061: NOT
50062: OR
50063: IFFALSE 50067
// exit ;
50065: GO 51093
// case weapon of us_machine_gun :
50067: LD_VAR 0 2
50071: PUSH
50072: LD_INT 2
50074: DOUBLE
50075: EQUAL
50076: IFTRUE 50080
50078: GO 50110
50080: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50081: LD_ADDR_VAR 0 3
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: LD_INT 4
50097: PUSH
50098: LD_INT 5
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
50108: GO 51077
50110: LD_INT 3
50112: DOUBLE
50113: EQUAL
50114: IFTRUE 50118
50116: GO 50148
50118: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
50119: LD_ADDR_VAR 0 3
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: LD_INT 4
50135: PUSH
50136: LD_INT 5
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: ST_TO_ADDR
50146: GO 51077
50148: LD_INT 11
50150: DOUBLE
50151: EQUAL
50152: IFTRUE 50156
50154: GO 50186
50156: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: LD_INT 4
50173: PUSH
50174: LD_INT 5
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
50184: GO 51077
50186: LD_INT 4
50188: DOUBLE
50189: EQUAL
50190: IFTRUE 50194
50192: GO 50220
50194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
50195: LD_ADDR_VAR 0 3
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 4
50208: PUSH
50209: LD_INT 5
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: ST_TO_ADDR
50218: GO 51077
50220: LD_INT 5
50222: DOUBLE
50223: EQUAL
50224: IFTRUE 50228
50226: GO 50254
50228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
50229: LD_ADDR_VAR 0 3
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 5
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: ST_TO_ADDR
50252: GO 51077
50254: LD_INT 9
50256: DOUBLE
50257: EQUAL
50258: IFTRUE 50262
50260: GO 50288
50262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
50263: LD_ADDR_VAR 0 3
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 4
50276: PUSH
50277: LD_INT 5
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: ST_TO_ADDR
50286: GO 51077
50288: LD_INT 7
50290: DOUBLE
50291: EQUAL
50292: IFTRUE 50296
50294: GO 50322
50296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
50297: LD_ADDR_VAR 0 3
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: LD_INT 4
50310: PUSH
50311: LD_INT 5
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: ST_TO_ADDR
50320: GO 51077
50322: LD_INT 12
50324: DOUBLE
50325: EQUAL
50326: IFTRUE 50330
50328: GO 50356
50330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
50331: LD_ADDR_VAR 0 3
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: LD_INT 4
50344: PUSH
50345: LD_INT 5
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
50354: GO 51077
50356: LD_INT 13
50358: DOUBLE
50359: EQUAL
50360: IFTRUE 50364
50362: GO 50390
50364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
50365: LD_ADDR_VAR 0 3
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: LD_INT 3
50375: PUSH
50376: LD_INT 4
50378: PUSH
50379: LD_INT 5
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: ST_TO_ADDR
50388: GO 51077
50390: LD_INT 14
50392: DOUBLE
50393: EQUAL
50394: IFTRUE 50398
50396: GO 50416
50398: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
50399: LD_ADDR_VAR 0 3
50403: PUSH
50404: LD_INT 4
50406: PUSH
50407: LD_INT 5
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: ST_TO_ADDR
50414: GO 51077
50416: LD_INT 6
50418: DOUBLE
50419: EQUAL
50420: IFTRUE 50424
50422: GO 50442
50424: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
50425: LD_ADDR_VAR 0 3
50429: PUSH
50430: LD_INT 4
50432: PUSH
50433: LD_INT 5
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: ST_TO_ADDR
50440: GO 51077
50442: LD_INT 10
50444: DOUBLE
50445: EQUAL
50446: IFTRUE 50450
50448: GO 50468
50450: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
50451: LD_ADDR_VAR 0 3
50455: PUSH
50456: LD_INT 4
50458: PUSH
50459: LD_INT 5
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: ST_TO_ADDR
50466: GO 51077
50468: LD_INT 22
50470: DOUBLE
50471: EQUAL
50472: IFTRUE 50476
50474: GO 50502
50476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
50477: LD_ADDR_VAR 0 3
50481: PUSH
50482: LD_INT 11
50484: PUSH
50485: LD_INT 12
50487: PUSH
50488: LD_INT 13
50490: PUSH
50491: LD_INT 14
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
50500: GO 51077
50502: LD_INT 23
50504: DOUBLE
50505: EQUAL
50506: IFTRUE 50510
50508: GO 50536
50510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50511: LD_ADDR_VAR 0 3
50515: PUSH
50516: LD_INT 11
50518: PUSH
50519: LD_INT 12
50521: PUSH
50522: LD_INT 13
50524: PUSH
50525: LD_INT 14
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: ST_TO_ADDR
50534: GO 51077
50536: LD_INT 24
50538: DOUBLE
50539: EQUAL
50540: IFTRUE 50544
50542: GO 50570
50544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50545: LD_ADDR_VAR 0 3
50549: PUSH
50550: LD_INT 11
50552: PUSH
50553: LD_INT 12
50555: PUSH
50556: LD_INT 13
50558: PUSH
50559: LD_INT 14
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
50568: GO 51077
50570: LD_INT 30
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 50604
50578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50579: LD_ADDR_VAR 0 3
50583: PUSH
50584: LD_INT 11
50586: PUSH
50587: LD_INT 12
50589: PUSH
50590: LD_INT 13
50592: PUSH
50593: LD_INT 14
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: ST_TO_ADDR
50602: GO 51077
50604: LD_INT 25
50606: DOUBLE
50607: EQUAL
50608: IFTRUE 50612
50610: GO 50630
50612: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50613: LD_ADDR_VAR 0 3
50617: PUSH
50618: LD_INT 13
50620: PUSH
50621: LD_INT 14
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: ST_TO_ADDR
50628: GO 51077
50630: LD_INT 27
50632: DOUBLE
50633: EQUAL
50634: IFTRUE 50638
50636: GO 50656
50638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50639: LD_ADDR_VAR 0 3
50643: PUSH
50644: LD_INT 13
50646: PUSH
50647: LD_INT 14
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: ST_TO_ADDR
50654: GO 51077
50656: LD_INT 28
50658: DOUBLE
50659: EQUAL
50660: IFTRUE 50664
50662: GO 50682
50664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50665: LD_ADDR_VAR 0 3
50669: PUSH
50670: LD_INT 13
50672: PUSH
50673: LD_INT 14
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: ST_TO_ADDR
50680: GO 51077
50682: LD_INT 29
50684: DOUBLE
50685: EQUAL
50686: IFTRUE 50690
50688: GO 50708
50690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50691: LD_ADDR_VAR 0 3
50695: PUSH
50696: LD_INT 13
50698: PUSH
50699: LD_INT 14
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: ST_TO_ADDR
50706: GO 51077
50708: LD_INT 31
50710: DOUBLE
50711: EQUAL
50712: IFTRUE 50716
50714: GO 50734
50716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50717: LD_ADDR_VAR 0 3
50721: PUSH
50722: LD_INT 13
50724: PUSH
50725: LD_INT 14
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: ST_TO_ADDR
50732: GO 51077
50734: LD_INT 26
50736: DOUBLE
50737: EQUAL
50738: IFTRUE 50742
50740: GO 50760
50742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50743: LD_ADDR_VAR 0 3
50747: PUSH
50748: LD_INT 13
50750: PUSH
50751: LD_INT 14
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: ST_TO_ADDR
50758: GO 51077
50760: LD_INT 42
50762: DOUBLE
50763: EQUAL
50764: IFTRUE 50768
50766: GO 50794
50768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50769: LD_ADDR_VAR 0 3
50773: PUSH
50774: LD_INT 21
50776: PUSH
50777: LD_INT 22
50779: PUSH
50780: LD_INT 23
50782: PUSH
50783: LD_INT 24
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
50792: GO 51077
50794: LD_INT 43
50796: DOUBLE
50797: EQUAL
50798: IFTRUE 50802
50800: GO 50828
50802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50803: LD_ADDR_VAR 0 3
50807: PUSH
50808: LD_INT 21
50810: PUSH
50811: LD_INT 22
50813: PUSH
50814: LD_INT 23
50816: PUSH
50817: LD_INT 24
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
50826: GO 51077
50828: LD_INT 44
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50836
50834: GO 50862
50836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50837: LD_ADDR_VAR 0 3
50841: PUSH
50842: LD_INT 21
50844: PUSH
50845: LD_INT 22
50847: PUSH
50848: LD_INT 23
50850: PUSH
50851: LD_INT 24
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
50860: GO 51077
50862: LD_INT 45
50864: DOUBLE
50865: EQUAL
50866: IFTRUE 50870
50868: GO 50896
50870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50871: LD_ADDR_VAR 0 3
50875: PUSH
50876: LD_INT 21
50878: PUSH
50879: LD_INT 22
50881: PUSH
50882: LD_INT 23
50884: PUSH
50885: LD_INT 24
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: ST_TO_ADDR
50894: GO 51077
50896: LD_INT 49
50898: DOUBLE
50899: EQUAL
50900: IFTRUE 50904
50902: GO 50930
50904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50905: LD_ADDR_VAR 0 3
50909: PUSH
50910: LD_INT 21
50912: PUSH
50913: LD_INT 22
50915: PUSH
50916: LD_INT 23
50918: PUSH
50919: LD_INT 24
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
50928: GO 51077
50930: LD_INT 51
50932: DOUBLE
50933: EQUAL
50934: IFTRUE 50938
50936: GO 50964
50938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: LD_INT 21
50946: PUSH
50947: LD_INT 22
50949: PUSH
50950: LD_INT 23
50952: PUSH
50953: LD_INT 24
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: ST_TO_ADDR
50962: GO 51077
50964: LD_INT 52
50966: DOUBLE
50967: EQUAL
50968: IFTRUE 50972
50970: GO 50998
50972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50973: LD_ADDR_VAR 0 3
50977: PUSH
50978: LD_INT 21
50980: PUSH
50981: LD_INT 22
50983: PUSH
50984: LD_INT 23
50986: PUSH
50987: LD_INT 24
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
50996: GO 51077
50998: LD_INT 53
51000: DOUBLE
51001: EQUAL
51002: IFTRUE 51006
51004: GO 51024
51006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51007: LD_ADDR_VAR 0 3
51011: PUSH
51012: LD_INT 23
51014: PUSH
51015: LD_INT 24
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: ST_TO_ADDR
51022: GO 51077
51024: LD_INT 46
51026: DOUBLE
51027: EQUAL
51028: IFTRUE 51032
51030: GO 51050
51032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51033: LD_ADDR_VAR 0 3
51037: PUSH
51038: LD_INT 23
51040: PUSH
51041: LD_INT 24
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: ST_TO_ADDR
51048: GO 51077
51050: LD_INT 47
51052: DOUBLE
51053: EQUAL
51054: IFTRUE 51058
51056: GO 51076
51058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51059: LD_ADDR_VAR 0 3
51063: PUSH
51064: LD_INT 23
51066: PUSH
51067: LD_INT 24
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: ST_TO_ADDR
51074: GO 51077
51076: POP
// result := ( chassis in result ) ;
51077: LD_ADDR_VAR 0 3
51081: PUSH
51082: LD_VAR 0 1
51086: PUSH
51087: LD_VAR 0 3
51091: IN
51092: ST_TO_ADDR
// end ;
51093: LD_VAR 0 3
51097: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
51098: LD_INT 0
51100: PPUSH
51101: PPUSH
51102: PPUSH
51103: PPUSH
51104: PPUSH
51105: PPUSH
51106: PPUSH
// result := array ;
51107: LD_ADDR_VAR 0 5
51111: PUSH
51112: LD_VAR 0 1
51116: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
51117: LD_VAR 0 1
51121: NOT
51122: PUSH
51123: LD_VAR 0 2
51127: NOT
51128: OR
51129: PUSH
51130: LD_VAR 0 3
51134: NOT
51135: OR
51136: PUSH
51137: LD_VAR 0 2
51141: PUSH
51142: LD_VAR 0 1
51146: GREATER
51147: OR
51148: PUSH
51149: LD_VAR 0 3
51153: PUSH
51154: LD_VAR 0 1
51158: GREATER
51159: OR
51160: IFFALSE 51164
// exit ;
51162: GO 51460
// if direction then
51164: LD_VAR 0 4
51168: IFFALSE 51232
// begin d := 1 ;
51170: LD_ADDR_VAR 0 9
51174: PUSH
51175: LD_INT 1
51177: ST_TO_ADDR
// if i_from > i_to then
51178: LD_VAR 0 2
51182: PUSH
51183: LD_VAR 0 3
51187: GREATER
51188: IFFALSE 51214
// length := ( array - i_from ) + i_to else
51190: LD_ADDR_VAR 0 11
51194: PUSH
51195: LD_VAR 0 1
51199: PUSH
51200: LD_VAR 0 2
51204: MINUS
51205: PUSH
51206: LD_VAR 0 3
51210: PLUS
51211: ST_TO_ADDR
51212: GO 51230
// length := i_to - i_from ;
51214: LD_ADDR_VAR 0 11
51218: PUSH
51219: LD_VAR 0 3
51223: PUSH
51224: LD_VAR 0 2
51228: MINUS
51229: ST_TO_ADDR
// end else
51230: GO 51293
// begin d := - 1 ;
51232: LD_ADDR_VAR 0 9
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: ST_TO_ADDR
// if i_from > i_to then
51241: LD_VAR 0 2
51245: PUSH
51246: LD_VAR 0 3
51250: GREATER
51251: IFFALSE 51271
// length := i_from - i_to else
51253: LD_ADDR_VAR 0 11
51257: PUSH
51258: LD_VAR 0 2
51262: PUSH
51263: LD_VAR 0 3
51267: MINUS
51268: ST_TO_ADDR
51269: GO 51293
// length := ( array - i_to ) + i_from ;
51271: LD_ADDR_VAR 0 11
51275: PUSH
51276: LD_VAR 0 1
51280: PUSH
51281: LD_VAR 0 3
51285: MINUS
51286: PUSH
51287: LD_VAR 0 2
51291: PLUS
51292: ST_TO_ADDR
// end ; if not length then
51293: LD_VAR 0 11
51297: NOT
51298: IFFALSE 51302
// exit ;
51300: GO 51460
// tmp := array ;
51302: LD_ADDR_VAR 0 10
51306: PUSH
51307: LD_VAR 0 1
51311: ST_TO_ADDR
// for i = 1 to length do
51312: LD_ADDR_VAR 0 6
51316: PUSH
51317: DOUBLE
51318: LD_INT 1
51320: DEC
51321: ST_TO_ADDR
51322: LD_VAR 0 11
51326: PUSH
51327: FOR_TO
51328: IFFALSE 51448
// begin for j = 1 to array do
51330: LD_ADDR_VAR 0 7
51334: PUSH
51335: DOUBLE
51336: LD_INT 1
51338: DEC
51339: ST_TO_ADDR
51340: LD_VAR 0 1
51344: PUSH
51345: FOR_TO
51346: IFFALSE 51434
// begin k := j + d ;
51348: LD_ADDR_VAR 0 8
51352: PUSH
51353: LD_VAR 0 7
51357: PUSH
51358: LD_VAR 0 9
51362: PLUS
51363: ST_TO_ADDR
// if k > array then
51364: LD_VAR 0 8
51368: PUSH
51369: LD_VAR 0 1
51373: GREATER
51374: IFFALSE 51384
// k := 1 ;
51376: LD_ADDR_VAR 0 8
51380: PUSH
51381: LD_INT 1
51383: ST_TO_ADDR
// if not k then
51384: LD_VAR 0 8
51388: NOT
51389: IFFALSE 51401
// k := array ;
51391: LD_ADDR_VAR 0 8
51395: PUSH
51396: LD_VAR 0 1
51400: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
51401: LD_ADDR_VAR 0 10
51405: PUSH
51406: LD_VAR 0 10
51410: PPUSH
51411: LD_VAR 0 8
51415: PPUSH
51416: LD_VAR 0 1
51420: PUSH
51421: LD_VAR 0 7
51425: ARRAY
51426: PPUSH
51427: CALL_OW 1
51431: ST_TO_ADDR
// end ;
51432: GO 51345
51434: POP
51435: POP
// array := tmp ;
51436: LD_ADDR_VAR 0 1
51440: PUSH
51441: LD_VAR 0 10
51445: ST_TO_ADDR
// end ;
51446: GO 51327
51448: POP
51449: POP
// result := array ;
51450: LD_ADDR_VAR 0 5
51454: PUSH
51455: LD_VAR 0 1
51459: ST_TO_ADDR
// end ;
51460: LD_VAR 0 5
51464: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51465: LD_INT 0
51467: PPUSH
51468: PPUSH
// result := 0 ;
51469: LD_ADDR_VAR 0 3
51473: PUSH
51474: LD_INT 0
51476: ST_TO_ADDR
// if not array or not value in array then
51477: LD_VAR 0 1
51481: NOT
51482: PUSH
51483: LD_VAR 0 2
51487: PUSH
51488: LD_VAR 0 1
51492: IN
51493: NOT
51494: OR
51495: IFFALSE 51499
// exit ;
51497: GO 51553
// for i = 1 to array do
51499: LD_ADDR_VAR 0 4
51503: PUSH
51504: DOUBLE
51505: LD_INT 1
51507: DEC
51508: ST_TO_ADDR
51509: LD_VAR 0 1
51513: PUSH
51514: FOR_TO
51515: IFFALSE 51551
// if value = array [ i ] then
51517: LD_VAR 0 2
51521: PUSH
51522: LD_VAR 0 1
51526: PUSH
51527: LD_VAR 0 4
51531: ARRAY
51532: EQUAL
51533: IFFALSE 51549
// begin result := i ;
51535: LD_ADDR_VAR 0 3
51539: PUSH
51540: LD_VAR 0 4
51544: ST_TO_ADDR
// exit ;
51545: POP
51546: POP
51547: GO 51553
// end ;
51549: GO 51514
51551: POP
51552: POP
// end ;
51553: LD_VAR 0 3
51557: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51558: LD_INT 0
51560: PPUSH
// vc_chassis := chassis ;
51561: LD_ADDR_OWVAR 37
51565: PUSH
51566: LD_VAR 0 1
51570: ST_TO_ADDR
// vc_engine := engine ;
51571: LD_ADDR_OWVAR 39
51575: PUSH
51576: LD_VAR 0 2
51580: ST_TO_ADDR
// vc_control := control ;
51581: LD_ADDR_OWVAR 38
51585: PUSH
51586: LD_VAR 0 3
51590: ST_TO_ADDR
// vc_weapon := weapon ;
51591: LD_ADDR_OWVAR 40
51595: PUSH
51596: LD_VAR 0 4
51600: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51601: LD_ADDR_OWVAR 41
51605: PUSH
51606: LD_VAR 0 5
51610: ST_TO_ADDR
// end ;
51611: LD_VAR 0 6
51615: RET
// export function WantPlant ( unit ) ; var task ; begin
51616: LD_INT 0
51618: PPUSH
51619: PPUSH
// result := false ;
51620: LD_ADDR_VAR 0 2
51624: PUSH
51625: LD_INT 0
51627: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_VAR 0 1
51637: PPUSH
51638: CALL_OW 437
51642: ST_TO_ADDR
// if task then
51643: LD_VAR 0 3
51647: IFFALSE 51675
// if task [ 1 ] [ 1 ] = p then
51649: LD_VAR 0 3
51653: PUSH
51654: LD_INT 1
51656: ARRAY
51657: PUSH
51658: LD_INT 1
51660: ARRAY
51661: PUSH
51662: LD_STRING p
51664: EQUAL
51665: IFFALSE 51675
// result := true ;
51667: LD_ADDR_VAR 0 2
51671: PUSH
51672: LD_INT 1
51674: ST_TO_ADDR
// end ;
51675: LD_VAR 0 2
51679: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51680: LD_INT 0
51682: PPUSH
51683: PPUSH
51684: PPUSH
51685: PPUSH
// if pos < 1 then
51686: LD_VAR 0 2
51690: PUSH
51691: LD_INT 1
51693: LESS
51694: IFFALSE 51698
// exit ;
51696: GO 52001
// if pos = 1 then
51698: LD_VAR 0 2
51702: PUSH
51703: LD_INT 1
51705: EQUAL
51706: IFFALSE 51739
// result := Replace ( arr , pos [ 1 ] , value ) else
51708: LD_ADDR_VAR 0 4
51712: PUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: LD_VAR 0 2
51722: PUSH
51723: LD_INT 1
51725: ARRAY
51726: PPUSH
51727: LD_VAR 0 3
51731: PPUSH
51732: CALL_OW 1
51736: ST_TO_ADDR
51737: GO 52001
// begin tmp := arr ;
51739: LD_ADDR_VAR 0 6
51743: PUSH
51744: LD_VAR 0 1
51748: ST_TO_ADDR
// s_arr := [ tmp ] ;
51749: LD_ADDR_VAR 0 7
51753: PUSH
51754: LD_VAR 0 6
51758: PUSH
51759: EMPTY
51760: LIST
51761: ST_TO_ADDR
// for i = 1 to pos - 1 do
51762: LD_ADDR_VAR 0 5
51766: PUSH
51767: DOUBLE
51768: LD_INT 1
51770: DEC
51771: ST_TO_ADDR
51772: LD_VAR 0 2
51776: PUSH
51777: LD_INT 1
51779: MINUS
51780: PUSH
51781: FOR_TO
51782: IFFALSE 51827
// begin tmp := tmp [ pos [ i ] ] ;
51784: LD_ADDR_VAR 0 6
51788: PUSH
51789: LD_VAR 0 6
51793: PUSH
51794: LD_VAR 0 2
51798: PUSH
51799: LD_VAR 0 5
51803: ARRAY
51804: ARRAY
51805: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51806: LD_ADDR_VAR 0 7
51810: PUSH
51811: LD_VAR 0 7
51815: PUSH
51816: LD_VAR 0 6
51820: PUSH
51821: EMPTY
51822: LIST
51823: ADD
51824: ST_TO_ADDR
// end ;
51825: GO 51781
51827: POP
51828: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51829: LD_ADDR_VAR 0 6
51833: PUSH
51834: LD_VAR 0 6
51838: PPUSH
51839: LD_VAR 0 2
51843: PUSH
51844: LD_VAR 0 2
51848: ARRAY
51849: PPUSH
51850: LD_VAR 0 3
51854: PPUSH
51855: CALL_OW 1
51859: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51860: LD_ADDR_VAR 0 7
51864: PUSH
51865: LD_VAR 0 7
51869: PPUSH
51870: LD_VAR 0 7
51874: PPUSH
51875: LD_VAR 0 6
51879: PPUSH
51880: CALL_OW 1
51884: ST_TO_ADDR
// for i = s_arr downto 2 do
51885: LD_ADDR_VAR 0 5
51889: PUSH
51890: DOUBLE
51891: LD_VAR 0 7
51895: INC
51896: ST_TO_ADDR
51897: LD_INT 2
51899: PUSH
51900: FOR_DOWNTO
51901: IFFALSE 51985
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51903: LD_ADDR_VAR 0 6
51907: PUSH
51908: LD_VAR 0 7
51912: PUSH
51913: LD_VAR 0 5
51917: PUSH
51918: LD_INT 1
51920: MINUS
51921: ARRAY
51922: PPUSH
51923: LD_VAR 0 2
51927: PUSH
51928: LD_VAR 0 5
51932: PUSH
51933: LD_INT 1
51935: MINUS
51936: ARRAY
51937: PPUSH
51938: LD_VAR 0 7
51942: PUSH
51943: LD_VAR 0 5
51947: ARRAY
51948: PPUSH
51949: CALL_OW 1
51953: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51954: LD_ADDR_VAR 0 7
51958: PUSH
51959: LD_VAR 0 7
51963: PPUSH
51964: LD_VAR 0 5
51968: PUSH
51969: LD_INT 1
51971: MINUS
51972: PPUSH
51973: LD_VAR 0 6
51977: PPUSH
51978: CALL_OW 1
51982: ST_TO_ADDR
// end ;
51983: GO 51900
51985: POP
51986: POP
// result := s_arr [ 1 ] ;
51987: LD_ADDR_VAR 0 4
51991: PUSH
51992: LD_VAR 0 7
51996: PUSH
51997: LD_INT 1
51999: ARRAY
52000: ST_TO_ADDR
// end ; end ;
52001: LD_VAR 0 4
52005: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52006: LD_INT 0
52008: PPUSH
52009: PPUSH
// if not list then
52010: LD_VAR 0 1
52014: NOT
52015: IFFALSE 52019
// exit ;
52017: GO 52110
// i := list [ pos1 ] ;
52019: LD_ADDR_VAR 0 5
52023: PUSH
52024: LD_VAR 0 1
52028: PUSH
52029: LD_VAR 0 2
52033: ARRAY
52034: ST_TO_ADDR
// if not i then
52035: LD_VAR 0 5
52039: NOT
52040: IFFALSE 52044
// exit ;
52042: GO 52110
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52044: LD_ADDR_VAR 0 1
52048: PUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: LD_VAR 0 2
52058: PPUSH
52059: LD_VAR 0 1
52063: PUSH
52064: LD_VAR 0 3
52068: ARRAY
52069: PPUSH
52070: CALL_OW 1
52074: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
52075: LD_ADDR_VAR 0 1
52079: PUSH
52080: LD_VAR 0 1
52084: PPUSH
52085: LD_VAR 0 3
52089: PPUSH
52090: LD_VAR 0 5
52094: PPUSH
52095: CALL_OW 1
52099: ST_TO_ADDR
// result := list ;
52100: LD_ADDR_VAR 0 4
52104: PUSH
52105: LD_VAR 0 1
52109: ST_TO_ADDR
// end ;
52110: LD_VAR 0 4
52114: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
52115: LD_INT 0
52117: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
52118: LD_ADDR_VAR 0 5
52122: PUSH
52123: LD_VAR 0 1
52127: PPUSH
52128: CALL_OW 250
52132: PPUSH
52133: LD_VAR 0 1
52137: PPUSH
52138: CALL_OW 251
52142: PPUSH
52143: LD_VAR 0 2
52147: PPUSH
52148: LD_VAR 0 3
52152: PPUSH
52153: LD_VAR 0 4
52157: PPUSH
52158: CALL 52168 0 5
52162: ST_TO_ADDR
// end ;
52163: LD_VAR 0 5
52167: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
52168: LD_INT 0
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
// if not list then
52174: LD_VAR 0 3
52178: NOT
52179: IFFALSE 52183
// exit ;
52181: GO 52571
// result := [ ] ;
52183: LD_ADDR_VAR 0 6
52187: PUSH
52188: EMPTY
52189: ST_TO_ADDR
// for i in list do
52190: LD_ADDR_VAR 0 7
52194: PUSH
52195: LD_VAR 0 3
52199: PUSH
52200: FOR_IN
52201: IFFALSE 52403
// begin tmp := GetDistUnitXY ( i , x , y ) ;
52203: LD_ADDR_VAR 0 9
52207: PUSH
52208: LD_VAR 0 7
52212: PPUSH
52213: LD_VAR 0 1
52217: PPUSH
52218: LD_VAR 0 2
52222: PPUSH
52223: CALL_OW 297
52227: ST_TO_ADDR
// if not result then
52228: LD_VAR 0 6
52232: NOT
52233: IFFALSE 52259
// result := [ [ i , tmp ] ] else
52235: LD_ADDR_VAR 0 6
52239: PUSH
52240: LD_VAR 0 7
52244: PUSH
52245: LD_VAR 0 9
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: ST_TO_ADDR
52257: GO 52401
// begin if result [ result ] [ 2 ] < tmp then
52259: LD_VAR 0 6
52263: PUSH
52264: LD_VAR 0 6
52268: ARRAY
52269: PUSH
52270: LD_INT 2
52272: ARRAY
52273: PUSH
52274: LD_VAR 0 9
52278: LESS
52279: IFFALSE 52321
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
52281: LD_ADDR_VAR 0 6
52285: PUSH
52286: LD_VAR 0 6
52290: PPUSH
52291: LD_VAR 0 6
52295: PUSH
52296: LD_INT 1
52298: PLUS
52299: PPUSH
52300: LD_VAR 0 7
52304: PUSH
52305: LD_VAR 0 9
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PPUSH
52314: CALL_OW 2
52318: ST_TO_ADDR
52319: GO 52401
// for j = 1 to result do
52321: LD_ADDR_VAR 0 8
52325: PUSH
52326: DOUBLE
52327: LD_INT 1
52329: DEC
52330: ST_TO_ADDR
52331: LD_VAR 0 6
52335: PUSH
52336: FOR_TO
52337: IFFALSE 52399
// begin if tmp < result [ j ] [ 2 ] then
52339: LD_VAR 0 9
52343: PUSH
52344: LD_VAR 0 6
52348: PUSH
52349: LD_VAR 0 8
52353: ARRAY
52354: PUSH
52355: LD_INT 2
52357: ARRAY
52358: LESS
52359: IFFALSE 52397
// begin result := Insert ( result , j , [ i , tmp ] ) ;
52361: LD_ADDR_VAR 0 6
52365: PUSH
52366: LD_VAR 0 6
52370: PPUSH
52371: LD_VAR 0 8
52375: PPUSH
52376: LD_VAR 0 7
52380: PUSH
52381: LD_VAR 0 9
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PPUSH
52390: CALL_OW 2
52394: ST_TO_ADDR
// break ;
52395: GO 52399
// end ; end ;
52397: GO 52336
52399: POP
52400: POP
// end ; end ;
52401: GO 52200
52403: POP
52404: POP
// if result and not asc then
52405: LD_VAR 0 6
52409: PUSH
52410: LD_VAR 0 4
52414: NOT
52415: AND
52416: IFFALSE 52491
// begin tmp := result ;
52418: LD_ADDR_VAR 0 9
52422: PUSH
52423: LD_VAR 0 6
52427: ST_TO_ADDR
// for i = tmp downto 1 do
52428: LD_ADDR_VAR 0 7
52432: PUSH
52433: DOUBLE
52434: LD_VAR 0 9
52438: INC
52439: ST_TO_ADDR
52440: LD_INT 1
52442: PUSH
52443: FOR_DOWNTO
52444: IFFALSE 52489
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52446: LD_ADDR_VAR 0 6
52450: PUSH
52451: LD_VAR 0 6
52455: PPUSH
52456: LD_VAR 0 9
52460: PUSH
52461: LD_VAR 0 7
52465: MINUS
52466: PUSH
52467: LD_INT 1
52469: PLUS
52470: PPUSH
52471: LD_VAR 0 9
52475: PUSH
52476: LD_VAR 0 7
52480: ARRAY
52481: PPUSH
52482: CALL_OW 1
52486: ST_TO_ADDR
52487: GO 52443
52489: POP
52490: POP
// end ; tmp := [ ] ;
52491: LD_ADDR_VAR 0 9
52495: PUSH
52496: EMPTY
52497: ST_TO_ADDR
// if mode then
52498: LD_VAR 0 5
52502: IFFALSE 52571
// begin for i = 1 to result do
52504: LD_ADDR_VAR 0 7
52508: PUSH
52509: DOUBLE
52510: LD_INT 1
52512: DEC
52513: ST_TO_ADDR
52514: LD_VAR 0 6
52518: PUSH
52519: FOR_TO
52520: IFFALSE 52559
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52522: LD_ADDR_VAR 0 9
52526: PUSH
52527: LD_VAR 0 9
52531: PPUSH
52532: LD_VAR 0 7
52536: PPUSH
52537: LD_VAR 0 6
52541: PUSH
52542: LD_VAR 0 7
52546: ARRAY
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: PPUSH
52552: CALL_OW 1
52556: ST_TO_ADDR
52557: GO 52519
52559: POP
52560: POP
// result := tmp ;
52561: LD_ADDR_VAR 0 6
52565: PUSH
52566: LD_VAR 0 9
52570: ST_TO_ADDR
// end ; end ;
52571: LD_VAR 0 6
52575: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52576: LD_INT 0
52578: PPUSH
52579: PPUSH
52580: PPUSH
52581: PPUSH
52582: PPUSH
52583: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52584: LD_ADDR_VAR 0 5
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// if not x or not y then
52606: LD_VAR 0 2
52610: NOT
52611: PUSH
52612: LD_VAR 0 3
52616: NOT
52617: OR
52618: IFFALSE 52622
// exit ;
52620: GO 54268
// if not range then
52622: LD_VAR 0 4
52626: NOT
52627: IFFALSE 52637
// range := 10 ;
52629: LD_ADDR_VAR 0 4
52633: PUSH
52634: LD_INT 10
52636: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52637: LD_ADDR_VAR 0 8
52641: PUSH
52642: LD_INT 81
52644: PUSH
52645: LD_VAR 0 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 92
52656: PUSH
52657: LD_VAR 0 2
52661: PUSH
52662: LD_VAR 0 3
52666: PUSH
52667: LD_VAR 0 4
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: LD_INT 21
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: PPUSH
52700: CALL_OW 69
52704: ST_TO_ADDR
// if not tmp then
52705: LD_VAR 0 8
52709: NOT
52710: IFFALSE 52714
// exit ;
52712: GO 54268
// for i in tmp do
52714: LD_ADDR_VAR 0 6
52718: PUSH
52719: LD_VAR 0 8
52723: PUSH
52724: FOR_IN
52725: IFFALSE 54243
// begin points := [ 0 , 0 , 0 ] ;
52727: LD_ADDR_VAR 0 9
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: ST_TO_ADDR
// bpoints := 1 ;
52746: LD_ADDR_VAR 0 10
52750: PUSH
52751: LD_INT 1
52753: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52754: LD_VAR 0 6
52758: PPUSH
52759: CALL_OW 247
52763: PUSH
52764: LD_INT 1
52766: DOUBLE
52767: EQUAL
52768: IFTRUE 52772
52770: GO 53350
52772: POP
// begin if GetClass ( i ) = 1 then
52773: LD_VAR 0 6
52777: PPUSH
52778: CALL_OW 257
52782: PUSH
52783: LD_INT 1
52785: EQUAL
52786: IFFALSE 52807
// points := [ 10 , 5 , 3 ] ;
52788: LD_ADDR_VAR 0 9
52792: PUSH
52793: LD_INT 10
52795: PUSH
52796: LD_INT 5
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52807: LD_VAR 0 6
52811: PPUSH
52812: CALL_OW 257
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: LD_INT 4
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: IN
52831: IFFALSE 52852
// points := [ 3 , 2 , 1 ] ;
52833: LD_ADDR_VAR 0 9
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52852: LD_VAR 0 6
52856: PPUSH
52857: CALL_OW 257
52861: PUSH
52862: LD_INT 5
52864: EQUAL
52865: IFFALSE 52886
// points := [ 130 , 5 , 2 ] ;
52867: LD_ADDR_VAR 0 9
52871: PUSH
52872: LD_INT 130
52874: PUSH
52875: LD_INT 5
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52886: LD_VAR 0 6
52890: PPUSH
52891: CALL_OW 257
52895: PUSH
52896: LD_INT 8
52898: EQUAL
52899: IFFALSE 52920
// points := [ 35 , 35 , 30 ] ;
52901: LD_ADDR_VAR 0 9
52905: PUSH
52906: LD_INT 35
52908: PUSH
52909: LD_INT 35
52911: PUSH
52912: LD_INT 30
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52920: LD_VAR 0 6
52924: PPUSH
52925: CALL_OW 257
52929: PUSH
52930: LD_INT 9
52932: EQUAL
52933: IFFALSE 52954
// points := [ 20 , 55 , 40 ] ;
52935: LD_ADDR_VAR 0 9
52939: PUSH
52940: LD_INT 20
52942: PUSH
52943: LD_INT 55
52945: PUSH
52946: LD_INT 40
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52954: LD_VAR 0 6
52958: PPUSH
52959: CALL_OW 257
52963: PUSH
52964: LD_INT 12
52966: PUSH
52967: LD_INT 16
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: IN
52974: IFFALSE 52995
// points := [ 5 , 3 , 2 ] ;
52976: LD_ADDR_VAR 0 9
52980: PUSH
52981: LD_INT 5
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52995: LD_VAR 0 6
52999: PPUSH
53000: CALL_OW 257
53004: PUSH
53005: LD_INT 17
53007: EQUAL
53008: IFFALSE 53029
// points := [ 100 , 50 , 75 ] ;
53010: LD_ADDR_VAR 0 9
53014: PUSH
53015: LD_INT 100
53017: PUSH
53018: LD_INT 50
53020: PUSH
53021: LD_INT 75
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: ST_TO_ADDR
// if GetClass ( i ) = 15 then
53029: LD_VAR 0 6
53033: PPUSH
53034: CALL_OW 257
53038: PUSH
53039: LD_INT 15
53041: EQUAL
53042: IFFALSE 53063
// points := [ 10 , 5 , 3 ] ;
53044: LD_ADDR_VAR 0 9
53048: PUSH
53049: LD_INT 10
53051: PUSH
53052: LD_INT 5
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// if GetClass ( i ) = 14 then
53063: LD_VAR 0 6
53067: PPUSH
53068: CALL_OW 257
53072: PUSH
53073: LD_INT 14
53075: EQUAL
53076: IFFALSE 53097
// points := [ 10 , 0 , 0 ] ;
53078: LD_ADDR_VAR 0 9
53082: PUSH
53083: LD_INT 10
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: ST_TO_ADDR
// if GetClass ( i ) = 11 then
53097: LD_VAR 0 6
53101: PPUSH
53102: CALL_OW 257
53106: PUSH
53107: LD_INT 11
53109: EQUAL
53110: IFFALSE 53131
// points := [ 30 , 10 , 5 ] ;
53112: LD_ADDR_VAR 0 9
53116: PUSH
53117: LD_INT 30
53119: PUSH
53120: LD_INT 10
53122: PUSH
53123: LD_INT 5
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: LIST
53130: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
53131: LD_VAR 0 1
53135: PPUSH
53136: LD_INT 5
53138: PPUSH
53139: CALL_OW 321
53143: PUSH
53144: LD_INT 2
53146: EQUAL
53147: IFFALSE 53164
// bpoints := bpoints * 1.8 ;
53149: LD_ADDR_VAR 0 10
53153: PUSH
53154: LD_VAR 0 10
53158: PUSH
53159: LD_REAL  1.80000000000000E+0000
53162: MUL
53163: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
53164: LD_VAR 0 6
53168: PPUSH
53169: CALL_OW 257
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 4
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: IN
53192: PUSH
53193: LD_VAR 0 1
53197: PPUSH
53198: LD_INT 51
53200: PPUSH
53201: CALL_OW 321
53205: PUSH
53206: LD_INT 2
53208: EQUAL
53209: AND
53210: IFFALSE 53227
// bpoints := bpoints * 1.2 ;
53212: LD_ADDR_VAR 0 10
53216: PUSH
53217: LD_VAR 0 10
53221: PUSH
53222: LD_REAL  1.20000000000000E+0000
53225: MUL
53226: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
53227: LD_VAR 0 6
53231: PPUSH
53232: CALL_OW 257
53236: PUSH
53237: LD_INT 5
53239: PUSH
53240: LD_INT 7
53242: PUSH
53243: LD_INT 9
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: IN
53251: PUSH
53252: LD_VAR 0 1
53256: PPUSH
53257: LD_INT 52
53259: PPUSH
53260: CALL_OW 321
53264: PUSH
53265: LD_INT 2
53267: EQUAL
53268: AND
53269: IFFALSE 53286
// bpoints := bpoints * 1.5 ;
53271: LD_ADDR_VAR 0 10
53275: PUSH
53276: LD_VAR 0 10
53280: PUSH
53281: LD_REAL  1.50000000000000E+0000
53284: MUL
53285: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
53286: LD_VAR 0 1
53290: PPUSH
53291: LD_INT 66
53293: PPUSH
53294: CALL_OW 321
53298: PUSH
53299: LD_INT 2
53301: EQUAL
53302: IFFALSE 53319
// bpoints := bpoints * 1.1 ;
53304: LD_ADDR_VAR 0 10
53308: PUSH
53309: LD_VAR 0 10
53313: PUSH
53314: LD_REAL  1.10000000000000E+0000
53317: MUL
53318: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
53319: LD_ADDR_VAR 0 10
53323: PUSH
53324: LD_VAR 0 10
53328: PUSH
53329: LD_VAR 0 6
53333: PPUSH
53334: LD_INT 1
53336: PPUSH
53337: CALL_OW 259
53341: PUSH
53342: LD_REAL  1.15000000000000E+0000
53345: MUL
53346: MUL
53347: ST_TO_ADDR
// end ; unit_vehicle :
53348: GO 54172
53350: LD_INT 2
53352: DOUBLE
53353: EQUAL
53354: IFTRUE 53358
53356: GO 54160
53358: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
53359: LD_VAR 0 6
53363: PPUSH
53364: CALL_OW 264
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 42
53374: PUSH
53375: LD_INT 24
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: IN
53383: IFFALSE 53404
// points := [ 25 , 5 , 3 ] ;
53385: LD_ADDR_VAR 0 9
53389: PUSH
53390: LD_INT 25
53392: PUSH
53393: LD_INT 5
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
53404: LD_VAR 0 6
53408: PPUSH
53409: CALL_OW 264
53413: PUSH
53414: LD_INT 4
53416: PUSH
53417: LD_INT 43
53419: PUSH
53420: LD_INT 25
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: IN
53428: IFFALSE 53449
// points := [ 40 , 15 , 5 ] ;
53430: LD_ADDR_VAR 0 9
53434: PUSH
53435: LD_INT 40
53437: PUSH
53438: LD_INT 15
53440: PUSH
53441: LD_INT 5
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53449: LD_VAR 0 6
53453: PPUSH
53454: CALL_OW 264
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: LD_INT 23
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: IN
53469: IFFALSE 53490
// points := [ 7 , 25 , 8 ] ;
53471: LD_ADDR_VAR 0 9
53475: PUSH
53476: LD_INT 7
53478: PUSH
53479: LD_INT 25
53481: PUSH
53482: LD_INT 8
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53490: LD_VAR 0 6
53494: PPUSH
53495: CALL_OW 264
53499: PUSH
53500: LD_INT 5
53502: PUSH
53503: LD_INT 27
53505: PUSH
53506: LD_INT 44
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: IN
53514: IFFALSE 53535
// points := [ 14 , 50 , 16 ] ;
53516: LD_ADDR_VAR 0 9
53520: PUSH
53521: LD_INT 14
53523: PUSH
53524: LD_INT 50
53526: PUSH
53527: LD_INT 16
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53535: LD_VAR 0 6
53539: PPUSH
53540: CALL_OW 264
53544: PUSH
53545: LD_INT 6
53547: PUSH
53548: LD_INT 46
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: IN
53555: IFFALSE 53576
// points := [ 32 , 120 , 70 ] ;
53557: LD_ADDR_VAR 0 9
53561: PUSH
53562: LD_INT 32
53564: PUSH
53565: LD_INT 120
53567: PUSH
53568: LD_INT 70
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
53576: LD_VAR 0 6
53580: PPUSH
53581: CALL_OW 264
53585: PUSH
53586: LD_INT 7
53588: PUSH
53589: LD_INT 28
53591: PUSH
53592: LD_INT 45
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: IN
53600: IFFALSE 53621
// points := [ 35 , 20 , 45 ] ;
53602: LD_ADDR_VAR 0 9
53606: PUSH
53607: LD_INT 35
53609: PUSH
53610: LD_INT 20
53612: PUSH
53613: LD_INT 45
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53621: LD_VAR 0 6
53625: PPUSH
53626: CALL_OW 264
53630: PUSH
53631: LD_INT 47
53633: PUSH
53634: EMPTY
53635: LIST
53636: IN
53637: IFFALSE 53658
// points := [ 67 , 45 , 75 ] ;
53639: LD_ADDR_VAR 0 9
53643: PUSH
53644: LD_INT 67
53646: PUSH
53647: LD_INT 45
53649: PUSH
53650: LD_INT 75
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53658: LD_VAR 0 6
53662: PPUSH
53663: CALL_OW 264
53667: PUSH
53668: LD_INT 26
53670: PUSH
53671: EMPTY
53672: LIST
53673: IN
53674: IFFALSE 53695
// points := [ 120 , 30 , 80 ] ;
53676: LD_ADDR_VAR 0 9
53680: PUSH
53681: LD_INT 120
53683: PUSH
53684: LD_INT 30
53686: PUSH
53687: LD_INT 80
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53695: LD_VAR 0 6
53699: PPUSH
53700: CALL_OW 264
53704: PUSH
53705: LD_INT 22
53707: PUSH
53708: EMPTY
53709: LIST
53710: IN
53711: IFFALSE 53732
// points := [ 40 , 1 , 1 ] ;
53713: LD_ADDR_VAR 0 9
53717: PUSH
53718: LD_INT 40
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53732: LD_VAR 0 6
53736: PPUSH
53737: CALL_OW 264
53741: PUSH
53742: LD_INT 29
53744: PUSH
53745: EMPTY
53746: LIST
53747: IN
53748: IFFALSE 53769
// points := [ 70 , 200 , 400 ] ;
53750: LD_ADDR_VAR 0 9
53754: PUSH
53755: LD_INT 70
53757: PUSH
53758: LD_INT 200
53760: PUSH
53761: LD_INT 400
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53769: LD_VAR 0 6
53773: PPUSH
53774: CALL_OW 264
53778: PUSH
53779: LD_INT 14
53781: PUSH
53782: LD_INT 53
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: IN
53789: IFFALSE 53810
// points := [ 40 , 10 , 20 ] ;
53791: LD_ADDR_VAR 0 9
53795: PUSH
53796: LD_INT 40
53798: PUSH
53799: LD_INT 10
53801: PUSH
53802: LD_INT 20
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53810: LD_VAR 0 6
53814: PPUSH
53815: CALL_OW 264
53819: PUSH
53820: LD_INT 9
53822: PUSH
53823: EMPTY
53824: LIST
53825: IN
53826: IFFALSE 53847
// points := [ 5 , 70 , 20 ] ;
53828: LD_ADDR_VAR 0 9
53832: PUSH
53833: LD_INT 5
53835: PUSH
53836: LD_INT 70
53838: PUSH
53839: LD_INT 20
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53847: LD_VAR 0 6
53851: PPUSH
53852: CALL_OW 264
53856: PUSH
53857: LD_INT 10
53859: PUSH
53860: EMPTY
53861: LIST
53862: IN
53863: IFFALSE 53884
// points := [ 35 , 110 , 70 ] ;
53865: LD_ADDR_VAR 0 9
53869: PUSH
53870: LD_INT 35
53872: PUSH
53873: LD_INT 110
53875: PUSH
53876: LD_INT 70
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53884: LD_VAR 0 6
53888: PPUSH
53889: CALL_OW 265
53893: PUSH
53894: LD_INT 25
53896: EQUAL
53897: IFFALSE 53918
// points := [ 80 , 65 , 100 ] ;
53899: LD_ADDR_VAR 0 9
53903: PUSH
53904: LD_INT 80
53906: PUSH
53907: LD_INT 65
53909: PUSH
53910: LD_INT 100
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53918: LD_VAR 0 6
53922: PPUSH
53923: CALL_OW 263
53927: PUSH
53928: LD_INT 1
53930: EQUAL
53931: IFFALSE 53966
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53933: LD_ADDR_VAR 0 10
53937: PUSH
53938: LD_VAR 0 10
53942: PUSH
53943: LD_VAR 0 6
53947: PPUSH
53948: CALL_OW 311
53952: PPUSH
53953: LD_INT 3
53955: PPUSH
53956: CALL_OW 259
53960: PUSH
53961: LD_INT 4
53963: MUL
53964: MUL
53965: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53966: LD_VAR 0 6
53970: PPUSH
53971: CALL_OW 263
53975: PUSH
53976: LD_INT 2
53978: EQUAL
53979: IFFALSE 54030
// begin j := IsControledBy ( i ) ;
53981: LD_ADDR_VAR 0 7
53985: PUSH
53986: LD_VAR 0 6
53990: PPUSH
53991: CALL_OW 312
53995: ST_TO_ADDR
// if j then
53996: LD_VAR 0 7
54000: IFFALSE 54030
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54002: LD_ADDR_VAR 0 10
54006: PUSH
54007: LD_VAR 0 10
54011: PUSH
54012: LD_VAR 0 7
54016: PPUSH
54017: LD_INT 3
54019: PPUSH
54020: CALL_OW 259
54024: PUSH
54025: LD_INT 3
54027: MUL
54028: MUL
54029: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
54030: LD_VAR 0 6
54034: PPUSH
54035: CALL_OW 264
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: LD_INT 6
54045: PUSH
54046: LD_INT 46
54048: PUSH
54049: LD_INT 44
54051: PUSH
54052: LD_INT 47
54054: PUSH
54055: LD_INT 45
54057: PUSH
54058: LD_INT 28
54060: PUSH
54061: LD_INT 7
54063: PUSH
54064: LD_INT 27
54066: PUSH
54067: LD_INT 29
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: IN
54082: PUSH
54083: LD_VAR 0 1
54087: PPUSH
54088: LD_INT 52
54090: PPUSH
54091: CALL_OW 321
54095: PUSH
54096: LD_INT 2
54098: EQUAL
54099: AND
54100: IFFALSE 54117
// bpoints := bpoints * 1.2 ;
54102: LD_ADDR_VAR 0 10
54106: PUSH
54107: LD_VAR 0 10
54111: PUSH
54112: LD_REAL  1.20000000000000E+0000
54115: MUL
54116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
54117: LD_VAR 0 6
54121: PPUSH
54122: CALL_OW 264
54126: PUSH
54127: LD_INT 6
54129: PUSH
54130: LD_INT 46
54132: PUSH
54133: LD_INT 47
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: IN
54141: IFFALSE 54158
// bpoints := bpoints * 1.2 ;
54143: LD_ADDR_VAR 0 10
54147: PUSH
54148: LD_VAR 0 10
54152: PUSH
54153: LD_REAL  1.20000000000000E+0000
54156: MUL
54157: ST_TO_ADDR
// end ; unit_building :
54158: GO 54172
54160: LD_INT 3
54162: DOUBLE
54163: EQUAL
54164: IFTRUE 54168
54166: GO 54171
54168: POP
// ; end ;
54169: GO 54172
54171: POP
// for j = 1 to 3 do
54172: LD_ADDR_VAR 0 7
54176: PUSH
54177: DOUBLE
54178: LD_INT 1
54180: DEC
54181: ST_TO_ADDR
54182: LD_INT 3
54184: PUSH
54185: FOR_TO
54186: IFFALSE 54239
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
54188: LD_ADDR_VAR 0 5
54192: PUSH
54193: LD_VAR 0 5
54197: PPUSH
54198: LD_VAR 0 7
54202: PPUSH
54203: LD_VAR 0 5
54207: PUSH
54208: LD_VAR 0 7
54212: ARRAY
54213: PUSH
54214: LD_VAR 0 9
54218: PUSH
54219: LD_VAR 0 7
54223: ARRAY
54224: PUSH
54225: LD_VAR 0 10
54229: MUL
54230: PLUS
54231: PPUSH
54232: CALL_OW 1
54236: ST_TO_ADDR
54237: GO 54185
54239: POP
54240: POP
// end ;
54241: GO 52724
54243: POP
54244: POP
// result := Replace ( result , 4 , tmp ) ;
54245: LD_ADDR_VAR 0 5
54249: PUSH
54250: LD_VAR 0 5
54254: PPUSH
54255: LD_INT 4
54257: PPUSH
54258: LD_VAR 0 8
54262: PPUSH
54263: CALL_OW 1
54267: ST_TO_ADDR
// end ;
54268: LD_VAR 0 5
54272: RET
// export function DangerAtRange ( unit , range ) ; begin
54273: LD_INT 0
54275: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
54276: LD_ADDR_VAR 0 3
54280: PUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: CALL_OW 255
54290: PPUSH
54291: LD_VAR 0 1
54295: PPUSH
54296: CALL_OW 250
54300: PPUSH
54301: LD_VAR 0 1
54305: PPUSH
54306: CALL_OW 251
54310: PPUSH
54311: LD_VAR 0 2
54315: PPUSH
54316: CALL 52576 0 4
54320: ST_TO_ADDR
// end ;
54321: LD_VAR 0 3
54325: RET
// export function DangerInArea ( side , area ) ; begin
54326: LD_INT 0
54328: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
54329: LD_ADDR_VAR 0 3
54333: PUSH
54334: LD_VAR 0 2
54338: PPUSH
54339: LD_INT 81
54341: PUSH
54342: LD_VAR 0 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PPUSH
54351: CALL_OW 70
54355: ST_TO_ADDR
// end ;
54356: LD_VAR 0 3
54360: RET
// export function IsExtension ( b ) ; begin
54361: LD_INT 0
54363: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
54364: LD_ADDR_VAR 0 2
54368: PUSH
54369: LD_VAR 0 1
54373: PUSH
54374: LD_INT 23
54376: PUSH
54377: LD_INT 20
54379: PUSH
54380: LD_INT 22
54382: PUSH
54383: LD_INT 17
54385: PUSH
54386: LD_INT 24
54388: PUSH
54389: LD_INT 21
54391: PUSH
54392: LD_INT 19
54394: PUSH
54395: LD_INT 16
54397: PUSH
54398: LD_INT 25
54400: PUSH
54401: LD_INT 18
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: IN
54416: ST_TO_ADDR
// end ;
54417: LD_VAR 0 2
54421: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
54422: LD_INT 0
54424: PPUSH
54425: PPUSH
54426: PPUSH
// result := [ ] ;
54427: LD_ADDR_VAR 0 3
54431: PUSH
54432: EMPTY
54433: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
54434: LD_ADDR_VAR 0 4
54438: PUSH
54439: LD_VAR 0 2
54443: PPUSH
54444: LD_INT 21
54446: PUSH
54447: LD_INT 3
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PPUSH
54454: CALL_OW 70
54458: ST_TO_ADDR
// if not tmp then
54459: LD_VAR 0 4
54463: NOT
54464: IFFALSE 54468
// exit ;
54466: GO 54526
// for i in tmp do
54468: LD_ADDR_VAR 0 5
54472: PUSH
54473: LD_VAR 0 4
54477: PUSH
54478: FOR_IN
54479: IFFALSE 54514
// if GetBase ( i ) <> base then
54481: LD_VAR 0 5
54485: PPUSH
54486: CALL_OW 274
54490: PUSH
54491: LD_VAR 0 1
54495: NONEQUAL
54496: IFFALSE 54512
// ComLinkToBase ( base , i ) ;
54498: LD_VAR 0 1
54502: PPUSH
54503: LD_VAR 0 5
54507: PPUSH
54508: CALL_OW 169
54512: GO 54478
54514: POP
54515: POP
// result := tmp ;
54516: LD_ADDR_VAR 0 3
54520: PUSH
54521: LD_VAR 0 4
54525: ST_TO_ADDR
// end ;
54526: LD_VAR 0 3
54530: RET
// export function ComComplete ( unit , b ) ; var i ; begin
54531: LD_INT 0
54533: PPUSH
54534: PPUSH
// if BuildingStatus ( b ) = bs_build then
54535: LD_VAR 0 2
54539: PPUSH
54540: CALL_OW 461
54544: PUSH
54545: LD_INT 1
54547: EQUAL
54548: IFFALSE 54608
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54550: LD_VAR 0 1
54554: PPUSH
54555: LD_STRING h
54557: PUSH
54558: LD_VAR 0 2
54562: PPUSH
54563: CALL_OW 250
54567: PUSH
54568: LD_VAR 0 2
54572: PPUSH
54573: CALL_OW 251
54577: PUSH
54578: LD_VAR 0 2
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: PPUSH
54604: CALL_OW 446
// end ;
54608: LD_VAR 0 3
54612: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54613: LD_INT 0
54615: PPUSH
54616: PPUSH
54617: PPUSH
54618: PPUSH
54619: PPUSH
54620: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
54621: LD_VAR 0 1
54625: NOT
54626: PUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 263
54636: PUSH
54637: LD_INT 2
54639: EQUAL
54640: NOT
54641: OR
54642: IFFALSE 54646
// exit ;
54644: GO 54962
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54646: LD_ADDR_VAR 0 6
54650: PUSH
54651: LD_INT 22
54653: PUSH
54654: LD_VAR 0 1
54658: PPUSH
54659: CALL_OW 255
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 30
54673: PUSH
54674: LD_INT 36
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 34
54683: PUSH
54684: LD_INT 31
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PPUSH
54700: CALL_OW 69
54704: ST_TO_ADDR
// if not tmp then
54705: LD_VAR 0 6
54709: NOT
54710: IFFALSE 54714
// exit ;
54712: GO 54962
// result := [ ] ;
54714: LD_ADDR_VAR 0 2
54718: PUSH
54719: EMPTY
54720: ST_TO_ADDR
// for i in tmp do
54721: LD_ADDR_VAR 0 3
54725: PUSH
54726: LD_VAR 0 6
54730: PUSH
54731: FOR_IN
54732: IFFALSE 54803
// begin t := UnitsInside ( i ) ;
54734: LD_ADDR_VAR 0 4
54738: PUSH
54739: LD_VAR 0 3
54743: PPUSH
54744: CALL_OW 313
54748: ST_TO_ADDR
// if t then
54749: LD_VAR 0 4
54753: IFFALSE 54801
// for j in t do
54755: LD_ADDR_VAR 0 7
54759: PUSH
54760: LD_VAR 0 4
54764: PUSH
54765: FOR_IN
54766: IFFALSE 54799
// result := Insert ( result , result + 1 , j ) ;
54768: LD_ADDR_VAR 0 2
54772: PUSH
54773: LD_VAR 0 2
54777: PPUSH
54778: LD_VAR 0 2
54782: PUSH
54783: LD_INT 1
54785: PLUS
54786: PPUSH
54787: LD_VAR 0 7
54791: PPUSH
54792: CALL_OW 2
54796: ST_TO_ADDR
54797: GO 54765
54799: POP
54800: POP
// end ;
54801: GO 54731
54803: POP
54804: POP
// if not result then
54805: LD_VAR 0 2
54809: NOT
54810: IFFALSE 54814
// exit ;
54812: GO 54962
// mech := result [ 1 ] ;
54814: LD_ADDR_VAR 0 5
54818: PUSH
54819: LD_VAR 0 2
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: ST_TO_ADDR
// if result > 1 then
54828: LD_VAR 0 2
54832: PUSH
54833: LD_INT 1
54835: GREATER
54836: IFFALSE 54948
// for i = 2 to result do
54838: LD_ADDR_VAR 0 3
54842: PUSH
54843: DOUBLE
54844: LD_INT 2
54846: DEC
54847: ST_TO_ADDR
54848: LD_VAR 0 2
54852: PUSH
54853: FOR_TO
54854: IFFALSE 54946
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54856: LD_ADDR_VAR 0 4
54860: PUSH
54861: LD_VAR 0 2
54865: PUSH
54866: LD_VAR 0 3
54870: ARRAY
54871: PPUSH
54872: LD_INT 3
54874: PPUSH
54875: CALL_OW 259
54879: PUSH
54880: LD_VAR 0 2
54884: PUSH
54885: LD_VAR 0 3
54889: ARRAY
54890: PPUSH
54891: CALL_OW 432
54895: MINUS
54896: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54897: LD_VAR 0 4
54901: PUSH
54902: LD_VAR 0 5
54906: PPUSH
54907: LD_INT 3
54909: PPUSH
54910: CALL_OW 259
54914: PUSH
54915: LD_VAR 0 5
54919: PPUSH
54920: CALL_OW 432
54924: MINUS
54925: GREATEREQUAL
54926: IFFALSE 54944
// mech := result [ i ] ;
54928: LD_ADDR_VAR 0 5
54932: PUSH
54933: LD_VAR 0 2
54937: PUSH
54938: LD_VAR 0 3
54942: ARRAY
54943: ST_TO_ADDR
// end ;
54944: GO 54853
54946: POP
54947: POP
// ComLinkTo ( vehicle , mech ) ;
54948: LD_VAR 0 1
54952: PPUSH
54953: LD_VAR 0 5
54957: PPUSH
54958: CALL_OW 135
// end ;
54962: LD_VAR 0 2
54966: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54967: LD_INT 0
54969: PPUSH
54970: PPUSH
54971: PPUSH
54972: PPUSH
54973: PPUSH
54974: PPUSH
54975: PPUSH
54976: PPUSH
54977: PPUSH
54978: PPUSH
54979: PPUSH
54980: PPUSH
54981: PPUSH
// result := [ ] ;
54982: LD_ADDR_VAR 0 7
54986: PUSH
54987: EMPTY
54988: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54989: LD_VAR 0 1
54993: PPUSH
54994: CALL_OW 266
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: IN
55009: NOT
55010: IFFALSE 55014
// exit ;
55012: GO 56645
// if name then
55014: LD_VAR 0 3
55018: IFFALSE 55034
// SetBName ( base_dep , name ) ;
55020: LD_VAR 0 1
55024: PPUSH
55025: LD_VAR 0 3
55029: PPUSH
55030: CALL_OW 500
// base := GetBase ( base_dep ) ;
55034: LD_ADDR_VAR 0 15
55038: PUSH
55039: LD_VAR 0 1
55043: PPUSH
55044: CALL_OW 274
55048: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
55049: LD_ADDR_VAR 0 16
55053: PUSH
55054: LD_VAR 0 1
55058: PPUSH
55059: CALL_OW 255
55063: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
55064: LD_ADDR_VAR 0 17
55068: PUSH
55069: LD_VAR 0 1
55073: PPUSH
55074: CALL_OW 248
55078: ST_TO_ADDR
// if sources then
55079: LD_VAR 0 5
55083: IFFALSE 55130
// for i = 1 to 3 do
55085: LD_ADDR_VAR 0 8
55089: PUSH
55090: DOUBLE
55091: LD_INT 1
55093: DEC
55094: ST_TO_ADDR
55095: LD_INT 3
55097: PUSH
55098: FOR_TO
55099: IFFALSE 55128
// AddResourceType ( base , i , sources [ i ] ) ;
55101: LD_VAR 0 15
55105: PPUSH
55106: LD_VAR 0 8
55110: PPUSH
55111: LD_VAR 0 5
55115: PUSH
55116: LD_VAR 0 8
55120: ARRAY
55121: PPUSH
55122: CALL_OW 276
55126: GO 55098
55128: POP
55129: POP
// buildings := GetBaseBuildings ( base , area ) ;
55130: LD_ADDR_VAR 0 18
55134: PUSH
55135: LD_VAR 0 15
55139: PPUSH
55140: LD_VAR 0 2
55144: PPUSH
55145: CALL 54422 0 2
55149: ST_TO_ADDR
// InitHc ;
55150: CALL_OW 19
// InitUc ;
55154: CALL_OW 18
// uc_side := side ;
55158: LD_ADDR_OWVAR 20
55162: PUSH
55163: LD_VAR 0 16
55167: ST_TO_ADDR
// uc_nation := nation ;
55168: LD_ADDR_OWVAR 21
55172: PUSH
55173: LD_VAR 0 17
55177: ST_TO_ADDR
// if buildings then
55178: LD_VAR 0 18
55182: IFFALSE 56504
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
55184: LD_ADDR_VAR 0 19
55188: PUSH
55189: LD_VAR 0 18
55193: PPUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 30
55199: PUSH
55200: LD_INT 29
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 30
55209: PUSH
55210: LD_INT 30
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: LIST
55221: PPUSH
55222: CALL_OW 72
55226: ST_TO_ADDR
// if tmp then
55227: LD_VAR 0 19
55231: IFFALSE 55279
// for i in tmp do
55233: LD_ADDR_VAR 0 8
55237: PUSH
55238: LD_VAR 0 19
55242: PUSH
55243: FOR_IN
55244: IFFALSE 55277
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
55246: LD_VAR 0 8
55250: PPUSH
55251: CALL_OW 250
55255: PPUSH
55256: LD_VAR 0 8
55260: PPUSH
55261: CALL_OW 251
55265: PPUSH
55266: LD_VAR 0 16
55270: PPUSH
55271: CALL_OW 441
55275: GO 55243
55277: POP
55278: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
55279: LD_VAR 0 18
55283: PPUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 30
55289: PUSH
55290: LD_INT 32
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 30
55299: PUSH
55300: LD_INT 33
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: PPUSH
55312: CALL_OW 72
55316: IFFALSE 55404
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
55318: LD_ADDR_VAR 0 8
55322: PUSH
55323: LD_VAR 0 18
55327: PPUSH
55328: LD_INT 2
55330: PUSH
55331: LD_INT 30
55333: PUSH
55334: LD_INT 32
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 30
55343: PUSH
55344: LD_INT 33
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: PPUSH
55356: CALL_OW 72
55360: PUSH
55361: FOR_IN
55362: IFFALSE 55402
// begin if not GetBWeapon ( i ) then
55364: LD_VAR 0 8
55368: PPUSH
55369: CALL_OW 269
55373: NOT
55374: IFFALSE 55400
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
55376: LD_VAR 0 8
55380: PPUSH
55381: LD_VAR 0 8
55385: PPUSH
55386: LD_VAR 0 2
55390: PPUSH
55391: CALL 56650 0 2
55395: PPUSH
55396: CALL_OW 431
// end ;
55400: GO 55361
55402: POP
55403: POP
// end ; for i = 1 to personel do
55404: LD_ADDR_VAR 0 8
55408: PUSH
55409: DOUBLE
55410: LD_INT 1
55412: DEC
55413: ST_TO_ADDR
55414: LD_VAR 0 6
55418: PUSH
55419: FOR_TO
55420: IFFALSE 56484
// begin if i > 4 then
55422: LD_VAR 0 8
55426: PUSH
55427: LD_INT 4
55429: GREATER
55430: IFFALSE 55434
// break ;
55432: GO 56484
// case i of 1 :
55434: LD_VAR 0 8
55438: PUSH
55439: LD_INT 1
55441: DOUBLE
55442: EQUAL
55443: IFTRUE 55447
55445: GO 55527
55447: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55448: LD_ADDR_VAR 0 12
55452: PUSH
55453: LD_VAR 0 18
55457: PPUSH
55458: LD_INT 22
55460: PUSH
55461: LD_VAR 0 16
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 58
55472: PUSH
55473: EMPTY
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 30
55481: PUSH
55482: LD_INT 32
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 30
55491: PUSH
55492: LD_INT 4
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 30
55501: PUSH
55502: LD_INT 5
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: PPUSH
55520: CALL_OW 72
55524: ST_TO_ADDR
55525: GO 55749
55527: LD_INT 2
55529: DOUBLE
55530: EQUAL
55531: IFTRUE 55535
55533: GO 55597
55535: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55536: LD_ADDR_VAR 0 12
55540: PUSH
55541: LD_VAR 0 18
55545: PPUSH
55546: LD_INT 22
55548: PUSH
55549: LD_VAR 0 16
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 30
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 30
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PPUSH
55590: CALL_OW 72
55594: ST_TO_ADDR
55595: GO 55749
55597: LD_INT 3
55599: DOUBLE
55600: EQUAL
55601: IFTRUE 55605
55603: GO 55667
55605: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55606: LD_ADDR_VAR 0 12
55610: PUSH
55611: LD_VAR 0 18
55615: PPUSH
55616: LD_INT 22
55618: PUSH
55619: LD_VAR 0 16
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: LD_INT 30
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 30
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PPUSH
55660: CALL_OW 72
55664: ST_TO_ADDR
55665: GO 55749
55667: LD_INT 4
55669: DOUBLE
55670: EQUAL
55671: IFTRUE 55675
55673: GO 55748
55675: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55676: LD_ADDR_VAR 0 12
55680: PUSH
55681: LD_VAR 0 18
55685: PPUSH
55686: LD_INT 22
55688: PUSH
55689: LD_VAR 0 16
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 30
55703: PUSH
55704: LD_INT 6
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 30
55713: PUSH
55714: LD_INT 7
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 30
55723: PUSH
55724: LD_INT 8
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PPUSH
55741: CALL_OW 72
55745: ST_TO_ADDR
55746: GO 55749
55748: POP
// if i = 1 then
55749: LD_VAR 0 8
55753: PUSH
55754: LD_INT 1
55756: EQUAL
55757: IFFALSE 55868
// begin tmp := [ ] ;
55759: LD_ADDR_VAR 0 19
55763: PUSH
55764: EMPTY
55765: ST_TO_ADDR
// for j in f do
55766: LD_ADDR_VAR 0 9
55770: PUSH
55771: LD_VAR 0 12
55775: PUSH
55776: FOR_IN
55777: IFFALSE 55850
// if GetBType ( j ) = b_bunker then
55779: LD_VAR 0 9
55783: PPUSH
55784: CALL_OW 266
55788: PUSH
55789: LD_INT 32
55791: EQUAL
55792: IFFALSE 55819
// tmp := Insert ( tmp , 1 , j ) else
55794: LD_ADDR_VAR 0 19
55798: PUSH
55799: LD_VAR 0 19
55803: PPUSH
55804: LD_INT 1
55806: PPUSH
55807: LD_VAR 0 9
55811: PPUSH
55812: CALL_OW 2
55816: ST_TO_ADDR
55817: GO 55848
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55819: LD_ADDR_VAR 0 19
55823: PUSH
55824: LD_VAR 0 19
55828: PPUSH
55829: LD_VAR 0 19
55833: PUSH
55834: LD_INT 1
55836: PLUS
55837: PPUSH
55838: LD_VAR 0 9
55842: PPUSH
55843: CALL_OW 2
55847: ST_TO_ADDR
55848: GO 55776
55850: POP
55851: POP
// if tmp then
55852: LD_VAR 0 19
55856: IFFALSE 55868
// f := tmp ;
55858: LD_ADDR_VAR 0 12
55862: PUSH
55863: LD_VAR 0 19
55867: ST_TO_ADDR
// end ; x := personel [ i ] ;
55868: LD_ADDR_VAR 0 13
55872: PUSH
55873: LD_VAR 0 6
55877: PUSH
55878: LD_VAR 0 8
55882: ARRAY
55883: ST_TO_ADDR
// if x = - 1 then
55884: LD_VAR 0 13
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: EQUAL
55893: IFFALSE 56102
// begin for j in f do
55895: LD_ADDR_VAR 0 9
55899: PUSH
55900: LD_VAR 0 12
55904: PUSH
55905: FOR_IN
55906: IFFALSE 56098
// repeat InitHc ;
55908: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55912: LD_VAR 0 9
55916: PPUSH
55917: CALL_OW 266
55921: PUSH
55922: LD_INT 5
55924: EQUAL
55925: IFFALSE 55995
// begin if UnitsInside ( j ) < 3 then
55927: LD_VAR 0 9
55931: PPUSH
55932: CALL_OW 313
55936: PUSH
55937: LD_INT 3
55939: LESS
55940: IFFALSE 55976
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55942: LD_INT 0
55944: PPUSH
55945: LD_INT 5
55947: PUSH
55948: LD_INT 8
55950: PUSH
55951: LD_INT 9
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: LIST
55958: PUSH
55959: LD_VAR 0 17
55963: ARRAY
55964: PPUSH
55965: LD_VAR 0 4
55969: PPUSH
55970: CALL_OW 380
55974: GO 55993
// PrepareHuman ( false , i , skill ) ;
55976: LD_INT 0
55978: PPUSH
55979: LD_VAR 0 8
55983: PPUSH
55984: LD_VAR 0 4
55988: PPUSH
55989: CALL_OW 380
// end else
55993: GO 56012
// PrepareHuman ( false , i , skill ) ;
55995: LD_INT 0
55997: PPUSH
55998: LD_VAR 0 8
56002: PPUSH
56003: LD_VAR 0 4
56007: PPUSH
56008: CALL_OW 380
// un := CreateHuman ;
56012: LD_ADDR_VAR 0 14
56016: PUSH
56017: CALL_OW 44
56021: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56022: LD_ADDR_VAR 0 7
56026: PUSH
56027: LD_VAR 0 7
56031: PPUSH
56032: LD_INT 1
56034: PPUSH
56035: LD_VAR 0 14
56039: PPUSH
56040: CALL_OW 2
56044: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
56045: LD_VAR 0 14
56049: PPUSH
56050: LD_VAR 0 9
56054: PPUSH
56055: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
56059: LD_VAR 0 9
56063: PPUSH
56064: CALL_OW 313
56068: PUSH
56069: LD_INT 6
56071: EQUAL
56072: PUSH
56073: LD_VAR 0 9
56077: PPUSH
56078: CALL_OW 266
56082: PUSH
56083: LD_INT 32
56085: PUSH
56086: LD_INT 31
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: IN
56093: OR
56094: IFFALSE 55908
56096: GO 55905
56098: POP
56099: POP
// end else
56100: GO 56482
// for j = 1 to x do
56102: LD_ADDR_VAR 0 9
56106: PUSH
56107: DOUBLE
56108: LD_INT 1
56110: DEC
56111: ST_TO_ADDR
56112: LD_VAR 0 13
56116: PUSH
56117: FOR_TO
56118: IFFALSE 56480
// begin InitHc ;
56120: CALL_OW 19
// if not f then
56124: LD_VAR 0 12
56128: NOT
56129: IFFALSE 56218
// begin PrepareHuman ( false , i , skill ) ;
56131: LD_INT 0
56133: PPUSH
56134: LD_VAR 0 8
56138: PPUSH
56139: LD_VAR 0 4
56143: PPUSH
56144: CALL_OW 380
// un := CreateHuman ;
56148: LD_ADDR_VAR 0 14
56152: PUSH
56153: CALL_OW 44
56157: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56158: LD_ADDR_VAR 0 7
56162: PUSH
56163: LD_VAR 0 7
56167: PPUSH
56168: LD_INT 1
56170: PPUSH
56171: LD_VAR 0 14
56175: PPUSH
56176: CALL_OW 2
56180: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56181: LD_VAR 0 14
56185: PPUSH
56186: LD_VAR 0 1
56190: PPUSH
56191: CALL_OW 250
56195: PPUSH
56196: LD_VAR 0 1
56200: PPUSH
56201: CALL_OW 251
56205: PPUSH
56206: LD_INT 10
56208: PPUSH
56209: LD_INT 0
56211: PPUSH
56212: CALL_OW 50
// continue ;
56216: GO 56117
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
56218: LD_VAR 0 12
56222: PUSH
56223: LD_INT 1
56225: ARRAY
56226: PPUSH
56227: CALL_OW 313
56231: PUSH
56232: LD_VAR 0 12
56236: PUSH
56237: LD_INT 1
56239: ARRAY
56240: PPUSH
56241: CALL_OW 266
56245: PUSH
56246: LD_INT 32
56248: PUSH
56249: LD_INT 31
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: IN
56256: AND
56257: PUSH
56258: LD_VAR 0 12
56262: PUSH
56263: LD_INT 1
56265: ARRAY
56266: PPUSH
56267: CALL_OW 313
56271: PUSH
56272: LD_INT 6
56274: EQUAL
56275: OR
56276: IFFALSE 56296
// f := Delete ( f , 1 ) ;
56278: LD_ADDR_VAR 0 12
56282: PUSH
56283: LD_VAR 0 12
56287: PPUSH
56288: LD_INT 1
56290: PPUSH
56291: CALL_OW 3
56295: ST_TO_ADDR
// if not f then
56296: LD_VAR 0 12
56300: NOT
56301: IFFALSE 56319
// begin x := x + 2 ;
56303: LD_ADDR_VAR 0 13
56307: PUSH
56308: LD_VAR 0 13
56312: PUSH
56313: LD_INT 2
56315: PLUS
56316: ST_TO_ADDR
// continue ;
56317: GO 56117
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
56319: LD_VAR 0 12
56323: PUSH
56324: LD_INT 1
56326: ARRAY
56327: PPUSH
56328: CALL_OW 266
56332: PUSH
56333: LD_INT 5
56335: EQUAL
56336: IFFALSE 56410
// begin if UnitsInside ( f [ 1 ] ) < 3 then
56338: LD_VAR 0 12
56342: PUSH
56343: LD_INT 1
56345: ARRAY
56346: PPUSH
56347: CALL_OW 313
56351: PUSH
56352: LD_INT 3
56354: LESS
56355: IFFALSE 56391
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56357: LD_INT 0
56359: PPUSH
56360: LD_INT 5
56362: PUSH
56363: LD_INT 8
56365: PUSH
56366: LD_INT 9
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: PUSH
56374: LD_VAR 0 17
56378: ARRAY
56379: PPUSH
56380: LD_VAR 0 4
56384: PPUSH
56385: CALL_OW 380
56389: GO 56408
// PrepareHuman ( false , i , skill ) ;
56391: LD_INT 0
56393: PPUSH
56394: LD_VAR 0 8
56398: PPUSH
56399: LD_VAR 0 4
56403: PPUSH
56404: CALL_OW 380
// end else
56408: GO 56427
// PrepareHuman ( false , i , skill ) ;
56410: LD_INT 0
56412: PPUSH
56413: LD_VAR 0 8
56417: PPUSH
56418: LD_VAR 0 4
56422: PPUSH
56423: CALL_OW 380
// un := CreateHuman ;
56427: LD_ADDR_VAR 0 14
56431: PUSH
56432: CALL_OW 44
56436: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56437: LD_ADDR_VAR 0 7
56441: PUSH
56442: LD_VAR 0 7
56446: PPUSH
56447: LD_INT 1
56449: PPUSH
56450: LD_VAR 0 14
56454: PPUSH
56455: CALL_OW 2
56459: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56460: LD_VAR 0 14
56464: PPUSH
56465: LD_VAR 0 12
56469: PUSH
56470: LD_INT 1
56472: ARRAY
56473: PPUSH
56474: CALL_OW 52
// end ;
56478: GO 56117
56480: POP
56481: POP
// end ;
56482: GO 55419
56484: POP
56485: POP
// result := result ^ buildings ;
56486: LD_ADDR_VAR 0 7
56490: PUSH
56491: LD_VAR 0 7
56495: PUSH
56496: LD_VAR 0 18
56500: ADD
56501: ST_TO_ADDR
// end else
56502: GO 56645
// begin for i = 1 to personel do
56504: LD_ADDR_VAR 0 8
56508: PUSH
56509: DOUBLE
56510: LD_INT 1
56512: DEC
56513: ST_TO_ADDR
56514: LD_VAR 0 6
56518: PUSH
56519: FOR_TO
56520: IFFALSE 56643
// begin if i > 4 then
56522: LD_VAR 0 8
56526: PUSH
56527: LD_INT 4
56529: GREATER
56530: IFFALSE 56534
// break ;
56532: GO 56643
// x := personel [ i ] ;
56534: LD_ADDR_VAR 0 13
56538: PUSH
56539: LD_VAR 0 6
56543: PUSH
56544: LD_VAR 0 8
56548: ARRAY
56549: ST_TO_ADDR
// if x = - 1 then
56550: LD_VAR 0 13
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: EQUAL
56559: IFFALSE 56563
// continue ;
56561: GO 56519
// PrepareHuman ( false , i , skill ) ;
56563: LD_INT 0
56565: PPUSH
56566: LD_VAR 0 8
56570: PPUSH
56571: LD_VAR 0 4
56575: PPUSH
56576: CALL_OW 380
// un := CreateHuman ;
56580: LD_ADDR_VAR 0 14
56584: PUSH
56585: CALL_OW 44
56589: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56590: LD_VAR 0 14
56594: PPUSH
56595: LD_VAR 0 1
56599: PPUSH
56600: CALL_OW 250
56604: PPUSH
56605: LD_VAR 0 1
56609: PPUSH
56610: CALL_OW 251
56614: PPUSH
56615: LD_INT 10
56617: PPUSH
56618: LD_INT 0
56620: PPUSH
56621: CALL_OW 50
// result := result ^ un ;
56625: LD_ADDR_VAR 0 7
56629: PUSH
56630: LD_VAR 0 7
56634: PUSH
56635: LD_VAR 0 14
56639: ADD
56640: ST_TO_ADDR
// end ;
56641: GO 56519
56643: POP
56644: POP
// end ; end ;
56645: LD_VAR 0 7
56649: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56650: LD_INT 0
56652: PPUSH
56653: PPUSH
56654: PPUSH
56655: PPUSH
56656: PPUSH
56657: PPUSH
56658: PPUSH
56659: PPUSH
56660: PPUSH
56661: PPUSH
56662: PPUSH
56663: PPUSH
56664: PPUSH
56665: PPUSH
56666: PPUSH
56667: PPUSH
// result := false ;
56668: LD_ADDR_VAR 0 3
56672: PUSH
56673: LD_INT 0
56675: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56676: LD_VAR 0 1
56680: NOT
56681: PUSH
56682: LD_VAR 0 1
56686: PPUSH
56687: CALL_OW 266
56691: PUSH
56692: LD_INT 32
56694: PUSH
56695: LD_INT 33
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: IN
56702: NOT
56703: OR
56704: IFFALSE 56708
// exit ;
56706: GO 57844
// nat := GetNation ( tower ) ;
56708: LD_ADDR_VAR 0 12
56712: PUSH
56713: LD_VAR 0 1
56717: PPUSH
56718: CALL_OW 248
56722: ST_TO_ADDR
// side := GetSide ( tower ) ;
56723: LD_ADDR_VAR 0 16
56727: PUSH
56728: LD_VAR 0 1
56732: PPUSH
56733: CALL_OW 255
56737: ST_TO_ADDR
// x := GetX ( tower ) ;
56738: LD_ADDR_VAR 0 10
56742: PUSH
56743: LD_VAR 0 1
56747: PPUSH
56748: CALL_OW 250
56752: ST_TO_ADDR
// y := GetY ( tower ) ;
56753: LD_ADDR_VAR 0 11
56757: PUSH
56758: LD_VAR 0 1
56762: PPUSH
56763: CALL_OW 251
56767: ST_TO_ADDR
// if not x or not y then
56768: LD_VAR 0 10
56772: NOT
56773: PUSH
56774: LD_VAR 0 11
56778: NOT
56779: OR
56780: IFFALSE 56784
// exit ;
56782: GO 57844
// weapon := 0 ;
56784: LD_ADDR_VAR 0 18
56788: PUSH
56789: LD_INT 0
56791: ST_TO_ADDR
// fac_list := [ ] ;
56792: LD_ADDR_VAR 0 17
56796: PUSH
56797: EMPTY
56798: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
56799: LD_ADDR_VAR 0 6
56803: PUSH
56804: LD_VAR 0 1
56808: PPUSH
56809: CALL_OW 274
56813: PPUSH
56814: LD_VAR 0 2
56818: PPUSH
56819: CALL 54422 0 2
56823: PPUSH
56824: LD_INT 30
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PPUSH
56834: CALL_OW 72
56838: ST_TO_ADDR
// if not factories then
56839: LD_VAR 0 6
56843: NOT
56844: IFFALSE 56848
// exit ;
56846: GO 57844
// for i in factories do
56848: LD_ADDR_VAR 0 8
56852: PUSH
56853: LD_VAR 0 6
56857: PUSH
56858: FOR_IN
56859: IFFALSE 56884
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56861: LD_ADDR_VAR 0 17
56865: PUSH
56866: LD_VAR 0 17
56870: PUSH
56871: LD_VAR 0 8
56875: PPUSH
56876: CALL_OW 478
56880: UNION
56881: ST_TO_ADDR
56882: GO 56858
56884: POP
56885: POP
// if not fac_list then
56886: LD_VAR 0 17
56890: NOT
56891: IFFALSE 56895
// exit ;
56893: GO 57844
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56895: LD_ADDR_VAR 0 5
56899: PUSH
56900: LD_INT 4
56902: PUSH
56903: LD_INT 5
56905: PUSH
56906: LD_INT 9
56908: PUSH
56909: LD_INT 10
56911: PUSH
56912: LD_INT 6
56914: PUSH
56915: LD_INT 7
56917: PUSH
56918: LD_INT 11
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 27
56932: PUSH
56933: LD_INT 28
56935: PUSH
56936: LD_INT 26
56938: PUSH
56939: LD_INT 30
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 43
56950: PUSH
56951: LD_INT 44
56953: PUSH
56954: LD_INT 46
56956: PUSH
56957: LD_INT 45
56959: PUSH
56960: LD_INT 47
56962: PUSH
56963: LD_INT 49
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: PUSH
56979: LD_VAR 0 12
56983: ARRAY
56984: ST_TO_ADDR
// for i in list do
56985: LD_ADDR_VAR 0 8
56989: PUSH
56990: LD_VAR 0 5
56994: PUSH
56995: FOR_IN
56996: IFFALSE 57029
// if not i in fac_list then
56998: LD_VAR 0 8
57002: PUSH
57003: LD_VAR 0 17
57007: IN
57008: NOT
57009: IFFALSE 57027
// list := list diff i ;
57011: LD_ADDR_VAR 0 5
57015: PUSH
57016: LD_VAR 0 5
57020: PUSH
57021: LD_VAR 0 8
57025: DIFF
57026: ST_TO_ADDR
57027: GO 56995
57029: POP
57030: POP
// if not list then
57031: LD_VAR 0 5
57035: NOT
57036: IFFALSE 57040
// exit ;
57038: GO 57844
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57040: LD_VAR 0 12
57044: PUSH
57045: LD_INT 3
57047: EQUAL
57048: PUSH
57049: LD_INT 49
57051: PUSH
57052: LD_VAR 0 5
57056: IN
57057: AND
57058: PUSH
57059: LD_INT 31
57061: PPUSH
57062: LD_VAR 0 16
57066: PPUSH
57067: CALL_OW 321
57071: PUSH
57072: LD_INT 2
57074: EQUAL
57075: AND
57076: IFFALSE 57136
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
57078: LD_INT 22
57080: PUSH
57081: LD_VAR 0 16
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 35
57092: PUSH
57093: LD_INT 49
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 91
57102: PUSH
57103: LD_VAR 0 1
57107: PUSH
57108: LD_INT 10
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: LIST
57120: PPUSH
57121: CALL_OW 69
57125: NOT
57126: IFFALSE 57136
// weapon := ru_time_lapser ;
57128: LD_ADDR_VAR 0 18
57132: PUSH
57133: LD_INT 49
57135: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
57136: LD_VAR 0 12
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: IN
57151: PUSH
57152: LD_INT 11
57154: PUSH
57155: LD_VAR 0 5
57159: IN
57160: PUSH
57161: LD_INT 30
57163: PUSH
57164: LD_VAR 0 5
57168: IN
57169: OR
57170: AND
57171: PUSH
57172: LD_INT 6
57174: PPUSH
57175: LD_VAR 0 16
57179: PPUSH
57180: CALL_OW 321
57184: PUSH
57185: LD_INT 2
57187: EQUAL
57188: AND
57189: IFFALSE 57354
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
57191: LD_INT 22
57193: PUSH
57194: LD_VAR 0 16
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: LD_INT 35
57208: PUSH
57209: LD_INT 11
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 35
57218: PUSH
57219: LD_INT 30
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 91
57233: PUSH
57234: LD_VAR 0 1
57238: PUSH
57239: LD_INT 18
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: PPUSH
57252: CALL_OW 69
57256: NOT
57257: PUSH
57258: LD_INT 22
57260: PUSH
57261: LD_VAR 0 16
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 30
57275: PUSH
57276: LD_INT 32
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 30
57285: PUSH
57286: LD_INT 33
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 91
57300: PUSH
57301: LD_VAR 0 1
57305: PUSH
57306: LD_INT 12
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: PPUSH
57322: CALL_OW 69
57326: PUSH
57327: LD_INT 2
57329: GREATER
57330: AND
57331: IFFALSE 57354
// weapon := [ us_radar , ar_radar ] [ nat ] ;
57333: LD_ADDR_VAR 0 18
57337: PUSH
57338: LD_INT 11
57340: PUSH
57341: LD_INT 30
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_VAR 0 12
57352: ARRAY
57353: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
57354: LD_VAR 0 18
57358: NOT
57359: PUSH
57360: LD_INT 40
57362: PPUSH
57363: LD_VAR 0 16
57367: PPUSH
57368: CALL_OW 321
57372: PUSH
57373: LD_INT 2
57375: EQUAL
57376: AND
57377: PUSH
57378: LD_INT 7
57380: PUSH
57381: LD_VAR 0 5
57385: IN
57386: PUSH
57387: LD_INT 28
57389: PUSH
57390: LD_VAR 0 5
57394: IN
57395: OR
57396: PUSH
57397: LD_INT 45
57399: PUSH
57400: LD_VAR 0 5
57404: IN
57405: OR
57406: AND
57407: IFFALSE 57661
// begin hex := GetHexInfo ( x , y ) ;
57409: LD_ADDR_VAR 0 4
57413: PUSH
57414: LD_VAR 0 10
57418: PPUSH
57419: LD_VAR 0 11
57423: PPUSH
57424: CALL_OW 546
57428: ST_TO_ADDR
// if hex [ 1 ] then
57429: LD_VAR 0 4
57433: PUSH
57434: LD_INT 1
57436: ARRAY
57437: IFFALSE 57441
// exit ;
57439: GO 57844
// height := hex [ 2 ] ;
57441: LD_ADDR_VAR 0 15
57445: PUSH
57446: LD_VAR 0 4
57450: PUSH
57451: LD_INT 2
57453: ARRAY
57454: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57455: LD_ADDR_VAR 0 14
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: LD_INT 5
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// for i in tmp do
57478: LD_ADDR_VAR 0 8
57482: PUSH
57483: LD_VAR 0 14
57487: PUSH
57488: FOR_IN
57489: IFFALSE 57659
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57491: LD_ADDR_VAR 0 9
57495: PUSH
57496: LD_VAR 0 10
57500: PPUSH
57501: LD_VAR 0 8
57505: PPUSH
57506: LD_INT 5
57508: PPUSH
57509: CALL_OW 272
57513: PUSH
57514: LD_VAR 0 11
57518: PPUSH
57519: LD_VAR 0 8
57523: PPUSH
57524: LD_INT 5
57526: PPUSH
57527: CALL_OW 273
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57536: LD_VAR 0 9
57540: PUSH
57541: LD_INT 1
57543: ARRAY
57544: PPUSH
57545: LD_VAR 0 9
57549: PUSH
57550: LD_INT 2
57552: ARRAY
57553: PPUSH
57554: CALL_OW 488
57558: IFFALSE 57657
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57560: LD_ADDR_VAR 0 4
57564: PUSH
57565: LD_VAR 0 9
57569: PUSH
57570: LD_INT 1
57572: ARRAY
57573: PPUSH
57574: LD_VAR 0 9
57578: PUSH
57579: LD_INT 2
57581: ARRAY
57582: PPUSH
57583: CALL_OW 546
57587: ST_TO_ADDR
// if hex [ 1 ] then
57588: LD_VAR 0 4
57592: PUSH
57593: LD_INT 1
57595: ARRAY
57596: IFFALSE 57600
// continue ;
57598: GO 57488
// h := hex [ 2 ] ;
57600: LD_ADDR_VAR 0 13
57604: PUSH
57605: LD_VAR 0 4
57609: PUSH
57610: LD_INT 2
57612: ARRAY
57613: ST_TO_ADDR
// if h + 7 < height then
57614: LD_VAR 0 13
57618: PUSH
57619: LD_INT 7
57621: PLUS
57622: PUSH
57623: LD_VAR 0 15
57627: LESS
57628: IFFALSE 57657
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57630: LD_ADDR_VAR 0 18
57634: PUSH
57635: LD_INT 7
57637: PUSH
57638: LD_INT 28
57640: PUSH
57641: LD_INT 45
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: LD_VAR 0 12
57653: ARRAY
57654: ST_TO_ADDR
// break ;
57655: GO 57659
// end ; end ; end ;
57657: GO 57488
57659: POP
57660: POP
// end ; if not weapon then
57661: LD_VAR 0 18
57665: NOT
57666: IFFALSE 57726
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57668: LD_ADDR_VAR 0 5
57672: PUSH
57673: LD_VAR 0 5
57677: PUSH
57678: LD_INT 11
57680: PUSH
57681: LD_INT 30
57683: PUSH
57684: LD_INT 49
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: LIST
57691: DIFF
57692: ST_TO_ADDR
// if not list then
57693: LD_VAR 0 5
57697: NOT
57698: IFFALSE 57702
// exit ;
57700: GO 57844
// weapon := list [ rand ( 1 , list ) ] ;
57702: LD_ADDR_VAR 0 18
57706: PUSH
57707: LD_VAR 0 5
57711: PUSH
57712: LD_INT 1
57714: PPUSH
57715: LD_VAR 0 5
57719: PPUSH
57720: CALL_OW 12
57724: ARRAY
57725: ST_TO_ADDR
// end ; if weapon then
57726: LD_VAR 0 18
57730: IFFALSE 57844
// begin tmp := CostOfWeapon ( weapon ) ;
57732: LD_ADDR_VAR 0 14
57736: PUSH
57737: LD_VAR 0 18
57741: PPUSH
57742: CALL_OW 451
57746: ST_TO_ADDR
// j := GetBase ( tower ) ;
57747: LD_ADDR_VAR 0 9
57751: PUSH
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 274
57761: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57762: LD_VAR 0 9
57766: PPUSH
57767: LD_INT 1
57769: PPUSH
57770: CALL_OW 275
57774: PUSH
57775: LD_VAR 0 14
57779: PUSH
57780: LD_INT 1
57782: ARRAY
57783: GREATEREQUAL
57784: PUSH
57785: LD_VAR 0 9
57789: PPUSH
57790: LD_INT 2
57792: PPUSH
57793: CALL_OW 275
57797: PUSH
57798: LD_VAR 0 14
57802: PUSH
57803: LD_INT 2
57805: ARRAY
57806: GREATEREQUAL
57807: AND
57808: PUSH
57809: LD_VAR 0 9
57813: PPUSH
57814: LD_INT 3
57816: PPUSH
57817: CALL_OW 275
57821: PUSH
57822: LD_VAR 0 14
57826: PUSH
57827: LD_INT 3
57829: ARRAY
57830: GREATEREQUAL
57831: AND
57832: IFFALSE 57844
// result := weapon ;
57834: LD_ADDR_VAR 0 3
57838: PUSH
57839: LD_VAR 0 18
57843: ST_TO_ADDR
// end ; end ;
57844: LD_VAR 0 3
57848: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57849: LD_INT 0
57851: PPUSH
57852: PPUSH
// result := true ;
57853: LD_ADDR_VAR 0 3
57857: PUSH
57858: LD_INT 1
57860: ST_TO_ADDR
// if array1 = array2 then
57861: LD_VAR 0 1
57865: PUSH
57866: LD_VAR 0 2
57870: EQUAL
57871: IFFALSE 57931
// begin for i = 1 to array1 do
57873: LD_ADDR_VAR 0 4
57877: PUSH
57878: DOUBLE
57879: LD_INT 1
57881: DEC
57882: ST_TO_ADDR
57883: LD_VAR 0 1
57887: PUSH
57888: FOR_TO
57889: IFFALSE 57927
// if array1 [ i ] <> array2 [ i ] then
57891: LD_VAR 0 1
57895: PUSH
57896: LD_VAR 0 4
57900: ARRAY
57901: PUSH
57902: LD_VAR 0 2
57906: PUSH
57907: LD_VAR 0 4
57911: ARRAY
57912: NONEQUAL
57913: IFFALSE 57925
// begin result := false ;
57915: LD_ADDR_VAR 0 3
57919: PUSH
57920: LD_INT 0
57922: ST_TO_ADDR
// break ;
57923: GO 57927
// end ;
57925: GO 57888
57927: POP
57928: POP
// end else
57929: GO 57939
// result := false ;
57931: LD_ADDR_VAR 0 3
57935: PUSH
57936: LD_INT 0
57938: ST_TO_ADDR
// end ;
57939: LD_VAR 0 3
57943: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57944: LD_INT 0
57946: PPUSH
57947: PPUSH
57948: PPUSH
// pom := GetBase ( fac ) ;
57949: LD_ADDR_VAR 0 5
57953: PUSH
57954: LD_VAR 0 1
57958: PPUSH
57959: CALL_OW 274
57963: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57964: LD_ADDR_VAR 0 4
57968: PUSH
57969: LD_VAR 0 2
57973: PUSH
57974: LD_INT 1
57976: ARRAY
57977: PPUSH
57978: LD_VAR 0 2
57982: PUSH
57983: LD_INT 2
57985: ARRAY
57986: PPUSH
57987: LD_VAR 0 2
57991: PUSH
57992: LD_INT 3
57994: ARRAY
57995: PPUSH
57996: LD_VAR 0 2
58000: PUSH
58001: LD_INT 4
58003: ARRAY
58004: PPUSH
58005: CALL_OW 449
58009: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58010: LD_ADDR_VAR 0 3
58014: PUSH
58015: LD_VAR 0 5
58019: PPUSH
58020: LD_INT 1
58022: PPUSH
58023: CALL_OW 275
58027: PUSH
58028: LD_VAR 0 4
58032: PUSH
58033: LD_INT 1
58035: ARRAY
58036: GREATEREQUAL
58037: PUSH
58038: LD_VAR 0 5
58042: PPUSH
58043: LD_INT 2
58045: PPUSH
58046: CALL_OW 275
58050: PUSH
58051: LD_VAR 0 4
58055: PUSH
58056: LD_INT 2
58058: ARRAY
58059: GREATEREQUAL
58060: AND
58061: PUSH
58062: LD_VAR 0 5
58066: PPUSH
58067: LD_INT 3
58069: PPUSH
58070: CALL_OW 275
58074: PUSH
58075: LD_VAR 0 4
58079: PUSH
58080: LD_INT 3
58082: ARRAY
58083: GREATEREQUAL
58084: AND
58085: ST_TO_ADDR
// end ;
58086: LD_VAR 0 3
58090: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
58091: LD_INT 0
58093: PPUSH
58094: PPUSH
58095: PPUSH
58096: PPUSH
// pom := GetBase ( building ) ;
58097: LD_ADDR_VAR 0 3
58101: PUSH
58102: LD_VAR 0 1
58106: PPUSH
58107: CALL_OW 274
58111: ST_TO_ADDR
// if not pom then
58112: LD_VAR 0 3
58116: NOT
58117: IFFALSE 58121
// exit ;
58119: GO 58291
// btype := GetBType ( building ) ;
58121: LD_ADDR_VAR 0 5
58125: PUSH
58126: LD_VAR 0 1
58130: PPUSH
58131: CALL_OW 266
58135: ST_TO_ADDR
// if btype = b_armoury then
58136: LD_VAR 0 5
58140: PUSH
58141: LD_INT 4
58143: EQUAL
58144: IFFALSE 58154
// btype := b_barracks ;
58146: LD_ADDR_VAR 0 5
58150: PUSH
58151: LD_INT 5
58153: ST_TO_ADDR
// if btype = b_depot then
58154: LD_VAR 0 5
58158: PUSH
58159: LD_INT 0
58161: EQUAL
58162: IFFALSE 58172
// btype := b_warehouse ;
58164: LD_ADDR_VAR 0 5
58168: PUSH
58169: LD_INT 1
58171: ST_TO_ADDR
// if btype = b_workshop then
58172: LD_VAR 0 5
58176: PUSH
58177: LD_INT 2
58179: EQUAL
58180: IFFALSE 58190
// btype := b_factory ;
58182: LD_ADDR_VAR 0 5
58186: PUSH
58187: LD_INT 3
58189: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58190: LD_ADDR_VAR 0 4
58194: PUSH
58195: LD_VAR 0 5
58199: PPUSH
58200: LD_VAR 0 1
58204: PPUSH
58205: CALL_OW 248
58209: PPUSH
58210: CALL_OW 450
58214: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58215: LD_ADDR_VAR 0 2
58219: PUSH
58220: LD_VAR 0 3
58224: PPUSH
58225: LD_INT 1
58227: PPUSH
58228: CALL_OW 275
58232: PUSH
58233: LD_VAR 0 4
58237: PUSH
58238: LD_INT 1
58240: ARRAY
58241: GREATEREQUAL
58242: PUSH
58243: LD_VAR 0 3
58247: PPUSH
58248: LD_INT 2
58250: PPUSH
58251: CALL_OW 275
58255: PUSH
58256: LD_VAR 0 4
58260: PUSH
58261: LD_INT 2
58263: ARRAY
58264: GREATEREQUAL
58265: AND
58266: PUSH
58267: LD_VAR 0 3
58271: PPUSH
58272: LD_INT 3
58274: PPUSH
58275: CALL_OW 275
58279: PUSH
58280: LD_VAR 0 4
58284: PUSH
58285: LD_INT 3
58287: ARRAY
58288: GREATEREQUAL
58289: AND
58290: ST_TO_ADDR
// end ;
58291: LD_VAR 0 2
58295: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
58296: LD_INT 0
58298: PPUSH
58299: PPUSH
58300: PPUSH
// pom := GetBase ( building ) ;
58301: LD_ADDR_VAR 0 4
58305: PUSH
58306: LD_VAR 0 1
58310: PPUSH
58311: CALL_OW 274
58315: ST_TO_ADDR
// if not pom then
58316: LD_VAR 0 4
58320: NOT
58321: IFFALSE 58325
// exit ;
58323: GO 58426
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58325: LD_ADDR_VAR 0 5
58329: PUSH
58330: LD_VAR 0 2
58334: PPUSH
58335: LD_VAR 0 1
58339: PPUSH
58340: CALL_OW 248
58344: PPUSH
58345: CALL_OW 450
58349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58350: LD_ADDR_VAR 0 3
58354: PUSH
58355: LD_VAR 0 4
58359: PPUSH
58360: LD_INT 1
58362: PPUSH
58363: CALL_OW 275
58367: PUSH
58368: LD_VAR 0 5
58372: PUSH
58373: LD_INT 1
58375: ARRAY
58376: GREATEREQUAL
58377: PUSH
58378: LD_VAR 0 4
58382: PPUSH
58383: LD_INT 2
58385: PPUSH
58386: CALL_OW 275
58390: PUSH
58391: LD_VAR 0 5
58395: PUSH
58396: LD_INT 2
58398: ARRAY
58399: GREATEREQUAL
58400: AND
58401: PUSH
58402: LD_VAR 0 4
58406: PPUSH
58407: LD_INT 3
58409: PPUSH
58410: CALL_OW 275
58414: PUSH
58415: LD_VAR 0 5
58419: PUSH
58420: LD_INT 3
58422: ARRAY
58423: GREATEREQUAL
58424: AND
58425: ST_TO_ADDR
// end ;
58426: LD_VAR 0 3
58430: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
58431: LD_INT 0
58433: PPUSH
58434: PPUSH
58435: PPUSH
58436: PPUSH
58437: PPUSH
58438: PPUSH
58439: PPUSH
58440: PPUSH
58441: PPUSH
58442: PPUSH
// result := false ;
58443: LD_ADDR_VAR 0 6
58447: PUSH
58448: LD_INT 0
58450: ST_TO_ADDR
// if not base or not btype or not x or not y then
58451: LD_VAR 0 1
58455: NOT
58456: PUSH
58457: LD_VAR 0 2
58461: NOT
58462: OR
58463: PUSH
58464: LD_VAR 0 3
58468: NOT
58469: OR
58470: PUSH
58471: LD_VAR 0 4
58475: NOT
58476: OR
58477: IFFALSE 58481
// exit ;
58479: GO 59090
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
58481: LD_ADDR_VAR 0 12
58485: PUSH
58486: LD_VAR 0 2
58490: PPUSH
58491: LD_VAR 0 3
58495: PPUSH
58496: LD_VAR 0 4
58500: PPUSH
58501: LD_VAR 0 5
58505: PPUSH
58506: LD_VAR 0 1
58510: PUSH
58511: LD_INT 1
58513: ARRAY
58514: PPUSH
58515: CALL_OW 248
58519: PPUSH
58520: LD_INT 0
58522: PPUSH
58523: CALL 59927 0 6
58527: ST_TO_ADDR
// if not hexes then
58528: LD_VAR 0 12
58532: NOT
58533: IFFALSE 58537
// exit ;
58535: GO 59090
// for i = 1 to hexes do
58537: LD_ADDR_VAR 0 7
58541: PUSH
58542: DOUBLE
58543: LD_INT 1
58545: DEC
58546: ST_TO_ADDR
58547: LD_VAR 0 12
58551: PUSH
58552: FOR_TO
58553: IFFALSE 59088
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58555: LD_ADDR_VAR 0 11
58559: PUSH
58560: LD_VAR 0 12
58564: PUSH
58565: LD_VAR 0 7
58569: ARRAY
58570: PUSH
58571: LD_INT 1
58573: ARRAY
58574: PPUSH
58575: LD_VAR 0 12
58579: PUSH
58580: LD_VAR 0 7
58584: ARRAY
58585: PUSH
58586: LD_INT 2
58588: ARRAY
58589: PPUSH
58590: CALL_OW 428
58594: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58595: LD_VAR 0 12
58599: PUSH
58600: LD_VAR 0 7
58604: ARRAY
58605: PUSH
58606: LD_INT 1
58608: ARRAY
58609: PPUSH
58610: LD_VAR 0 12
58614: PUSH
58615: LD_VAR 0 7
58619: ARRAY
58620: PUSH
58621: LD_INT 2
58623: ARRAY
58624: PPUSH
58625: CALL_OW 351
58629: PUSH
58630: LD_VAR 0 12
58634: PUSH
58635: LD_VAR 0 7
58639: ARRAY
58640: PUSH
58641: LD_INT 1
58643: ARRAY
58644: PPUSH
58645: LD_VAR 0 12
58649: PUSH
58650: LD_VAR 0 7
58654: ARRAY
58655: PUSH
58656: LD_INT 2
58658: ARRAY
58659: PPUSH
58660: CALL_OW 488
58664: NOT
58665: OR
58666: PUSH
58667: LD_VAR 0 11
58671: PPUSH
58672: CALL_OW 247
58676: PUSH
58677: LD_INT 3
58679: EQUAL
58680: OR
58681: IFFALSE 58687
// exit ;
58683: POP
58684: POP
58685: GO 59090
// if not tmp or not tmp in base then
58687: LD_VAR 0 11
58691: NOT
58692: PUSH
58693: LD_VAR 0 11
58697: PUSH
58698: LD_VAR 0 1
58702: IN
58703: NOT
58704: OR
58705: IFFALSE 58709
// continue ;
58707: GO 58552
// result := true ;
58709: LD_ADDR_VAR 0 6
58713: PUSH
58714: LD_INT 1
58716: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58717: LD_ADDR_VAR 0 15
58721: PUSH
58722: LD_VAR 0 1
58726: PPUSH
58727: LD_INT 22
58729: PUSH
58730: LD_VAR 0 11
58734: PPUSH
58735: CALL_OW 255
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: LD_INT 30
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 30
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PPUSH
58776: CALL_OW 72
58780: ST_TO_ADDR
// if dep then
58781: LD_VAR 0 15
58785: IFFALSE 58921
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58787: LD_ADDR_VAR 0 14
58791: PUSH
58792: LD_VAR 0 15
58796: PUSH
58797: LD_INT 1
58799: ARRAY
58800: PPUSH
58801: CALL_OW 250
58805: PPUSH
58806: LD_VAR 0 15
58810: PUSH
58811: LD_INT 1
58813: ARRAY
58814: PPUSH
58815: CALL_OW 254
58819: PPUSH
58820: LD_INT 5
58822: PPUSH
58823: CALL_OW 272
58827: PUSH
58828: LD_VAR 0 15
58832: PUSH
58833: LD_INT 1
58835: ARRAY
58836: PPUSH
58837: CALL_OW 251
58841: PPUSH
58842: LD_VAR 0 15
58846: PUSH
58847: LD_INT 1
58849: ARRAY
58850: PPUSH
58851: CALL_OW 254
58855: PPUSH
58856: LD_INT 5
58858: PPUSH
58859: CALL_OW 273
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58868: LD_VAR 0 14
58872: PUSH
58873: LD_INT 1
58875: ARRAY
58876: PPUSH
58877: LD_VAR 0 14
58881: PUSH
58882: LD_INT 2
58884: ARRAY
58885: PPUSH
58886: CALL_OW 488
58890: IFFALSE 58921
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58892: LD_VAR 0 11
58896: PPUSH
58897: LD_VAR 0 14
58901: PUSH
58902: LD_INT 1
58904: ARRAY
58905: PPUSH
58906: LD_VAR 0 14
58910: PUSH
58911: LD_INT 2
58913: ARRAY
58914: PPUSH
58915: CALL_OW 111
// continue ;
58919: GO 58552
// end ; end ; r := GetDir ( tmp ) ;
58921: LD_ADDR_VAR 0 13
58925: PUSH
58926: LD_VAR 0 11
58930: PPUSH
58931: CALL_OW 254
58935: ST_TO_ADDR
// if r = 5 then
58936: LD_VAR 0 13
58940: PUSH
58941: LD_INT 5
58943: EQUAL
58944: IFFALSE 58954
// r := 0 ;
58946: LD_ADDR_VAR 0 13
58950: PUSH
58951: LD_INT 0
58953: ST_TO_ADDR
// for j = r to 5 do
58954: LD_ADDR_VAR 0 8
58958: PUSH
58959: DOUBLE
58960: LD_VAR 0 13
58964: DEC
58965: ST_TO_ADDR
58966: LD_INT 5
58968: PUSH
58969: FOR_TO
58970: IFFALSE 59084
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58972: LD_ADDR_VAR 0 9
58976: PUSH
58977: LD_VAR 0 11
58981: PPUSH
58982: CALL_OW 250
58986: PPUSH
58987: LD_VAR 0 8
58991: PPUSH
58992: LD_INT 2
58994: PPUSH
58995: CALL_OW 272
58999: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
59000: LD_ADDR_VAR 0 10
59004: PUSH
59005: LD_VAR 0 11
59009: PPUSH
59010: CALL_OW 251
59014: PPUSH
59015: LD_VAR 0 8
59019: PPUSH
59020: LD_INT 2
59022: PPUSH
59023: CALL_OW 273
59027: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
59028: LD_VAR 0 9
59032: PPUSH
59033: LD_VAR 0 10
59037: PPUSH
59038: CALL_OW 488
59042: PUSH
59043: LD_VAR 0 9
59047: PPUSH
59048: LD_VAR 0 10
59052: PPUSH
59053: CALL_OW 428
59057: NOT
59058: AND
59059: IFFALSE 59082
// begin ComMoveXY ( tmp , _x , _y ) ;
59061: LD_VAR 0 11
59065: PPUSH
59066: LD_VAR 0 9
59070: PPUSH
59071: LD_VAR 0 10
59075: PPUSH
59076: CALL_OW 111
// break ;
59080: GO 59084
// end ; end ;
59082: GO 58969
59084: POP
59085: POP
// end ;
59086: GO 58552
59088: POP
59089: POP
// end ;
59090: LD_VAR 0 6
59094: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
59095: LD_INT 0
59097: PPUSH
59098: PPUSH
59099: PPUSH
59100: PPUSH
59101: PPUSH
59102: PPUSH
59103: PPUSH
59104: PPUSH
59105: PPUSH
59106: PPUSH
// result := false ;
59107: LD_ADDR_VAR 0 6
59111: PUSH
59112: LD_INT 0
59114: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59115: LD_VAR 0 1
59119: NOT
59120: PUSH
59121: LD_VAR 0 1
59125: PPUSH
59126: CALL_OW 266
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: IN
59141: NOT
59142: OR
59143: PUSH
59144: LD_VAR 0 2
59148: NOT
59149: OR
59150: PUSH
59151: LD_VAR 0 5
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 4
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: IN
59182: NOT
59183: OR
59184: PUSH
59185: LD_VAR 0 3
59189: PPUSH
59190: LD_VAR 0 4
59194: PPUSH
59195: CALL_OW 488
59199: NOT
59200: OR
59201: IFFALSE 59205
// exit ;
59203: GO 59922
// pom := GetBase ( depot ) ;
59205: LD_ADDR_VAR 0 10
59209: PUSH
59210: LD_VAR 0 1
59214: PPUSH
59215: CALL_OW 274
59219: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59220: LD_ADDR_VAR 0 11
59224: PUSH
59225: LD_VAR 0 2
59229: PPUSH
59230: LD_VAR 0 1
59234: PPUSH
59235: CALL_OW 248
59239: PPUSH
59240: CALL_OW 450
59244: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59245: LD_VAR 0 10
59249: PPUSH
59250: LD_INT 1
59252: PPUSH
59253: CALL_OW 275
59257: PUSH
59258: LD_VAR 0 11
59262: PUSH
59263: LD_INT 1
59265: ARRAY
59266: GREATEREQUAL
59267: PUSH
59268: LD_VAR 0 10
59272: PPUSH
59273: LD_INT 2
59275: PPUSH
59276: CALL_OW 275
59280: PUSH
59281: LD_VAR 0 11
59285: PUSH
59286: LD_INT 2
59288: ARRAY
59289: GREATEREQUAL
59290: AND
59291: PUSH
59292: LD_VAR 0 10
59296: PPUSH
59297: LD_INT 3
59299: PPUSH
59300: CALL_OW 275
59304: PUSH
59305: LD_VAR 0 11
59309: PUSH
59310: LD_INT 3
59312: ARRAY
59313: GREATEREQUAL
59314: AND
59315: NOT
59316: IFFALSE 59320
// exit ;
59318: GO 59922
// if GetBType ( depot ) = b_depot then
59320: LD_VAR 0 1
59324: PPUSH
59325: CALL_OW 266
59329: PUSH
59330: LD_INT 0
59332: EQUAL
59333: IFFALSE 59345
// dist := 28 else
59335: LD_ADDR_VAR 0 14
59339: PUSH
59340: LD_INT 28
59342: ST_TO_ADDR
59343: GO 59353
// dist := 36 ;
59345: LD_ADDR_VAR 0 14
59349: PUSH
59350: LD_INT 36
59352: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59353: LD_VAR 0 1
59357: PPUSH
59358: LD_VAR 0 3
59362: PPUSH
59363: LD_VAR 0 4
59367: PPUSH
59368: CALL_OW 297
59372: PUSH
59373: LD_VAR 0 14
59377: GREATER
59378: IFFALSE 59382
// exit ;
59380: GO 59922
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
59382: LD_ADDR_VAR 0 12
59386: PUSH
59387: LD_VAR 0 2
59391: PPUSH
59392: LD_VAR 0 3
59396: PPUSH
59397: LD_VAR 0 4
59401: PPUSH
59402: LD_VAR 0 5
59406: PPUSH
59407: LD_VAR 0 1
59411: PPUSH
59412: CALL_OW 248
59416: PPUSH
59417: LD_INT 0
59419: PPUSH
59420: CALL 59927 0 6
59424: ST_TO_ADDR
// if not hexes then
59425: LD_VAR 0 12
59429: NOT
59430: IFFALSE 59434
// exit ;
59432: GO 59922
// hex := GetHexInfo ( x , y ) ;
59434: LD_ADDR_VAR 0 15
59438: PUSH
59439: LD_VAR 0 3
59443: PPUSH
59444: LD_VAR 0 4
59448: PPUSH
59449: CALL_OW 546
59453: ST_TO_ADDR
// if hex [ 1 ] then
59454: LD_VAR 0 15
59458: PUSH
59459: LD_INT 1
59461: ARRAY
59462: IFFALSE 59466
// exit ;
59464: GO 59922
// height := hex [ 2 ] ;
59466: LD_ADDR_VAR 0 13
59470: PUSH
59471: LD_VAR 0 15
59475: PUSH
59476: LD_INT 2
59478: ARRAY
59479: ST_TO_ADDR
// for i = 1 to hexes do
59480: LD_ADDR_VAR 0 7
59484: PUSH
59485: DOUBLE
59486: LD_INT 1
59488: DEC
59489: ST_TO_ADDR
59490: LD_VAR 0 12
59494: PUSH
59495: FOR_TO
59496: IFFALSE 59826
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59498: LD_VAR 0 12
59502: PUSH
59503: LD_VAR 0 7
59507: ARRAY
59508: PUSH
59509: LD_INT 1
59511: ARRAY
59512: PPUSH
59513: LD_VAR 0 12
59517: PUSH
59518: LD_VAR 0 7
59522: ARRAY
59523: PUSH
59524: LD_INT 2
59526: ARRAY
59527: PPUSH
59528: CALL_OW 488
59532: NOT
59533: PUSH
59534: LD_VAR 0 12
59538: PUSH
59539: LD_VAR 0 7
59543: ARRAY
59544: PUSH
59545: LD_INT 1
59547: ARRAY
59548: PPUSH
59549: LD_VAR 0 12
59553: PUSH
59554: LD_VAR 0 7
59558: ARRAY
59559: PUSH
59560: LD_INT 2
59562: ARRAY
59563: PPUSH
59564: CALL_OW 428
59568: PUSH
59569: LD_INT 0
59571: GREATER
59572: OR
59573: PUSH
59574: LD_VAR 0 12
59578: PUSH
59579: LD_VAR 0 7
59583: ARRAY
59584: PUSH
59585: LD_INT 1
59587: ARRAY
59588: PPUSH
59589: LD_VAR 0 12
59593: PUSH
59594: LD_VAR 0 7
59598: ARRAY
59599: PUSH
59600: LD_INT 2
59602: ARRAY
59603: PPUSH
59604: CALL_OW 351
59608: OR
59609: IFFALSE 59615
// exit ;
59611: POP
59612: POP
59613: GO 59922
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59615: LD_ADDR_VAR 0 8
59619: PUSH
59620: LD_VAR 0 12
59624: PUSH
59625: LD_VAR 0 7
59629: ARRAY
59630: PUSH
59631: LD_INT 1
59633: ARRAY
59634: PPUSH
59635: LD_VAR 0 12
59639: PUSH
59640: LD_VAR 0 7
59644: ARRAY
59645: PUSH
59646: LD_INT 2
59648: ARRAY
59649: PPUSH
59650: CALL_OW 546
59654: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59655: LD_VAR 0 8
59659: PUSH
59660: LD_INT 1
59662: ARRAY
59663: PUSH
59664: LD_VAR 0 8
59668: PUSH
59669: LD_INT 2
59671: ARRAY
59672: PUSH
59673: LD_VAR 0 13
59677: PUSH
59678: LD_INT 2
59680: PLUS
59681: GREATER
59682: OR
59683: PUSH
59684: LD_VAR 0 8
59688: PUSH
59689: LD_INT 2
59691: ARRAY
59692: PUSH
59693: LD_VAR 0 13
59697: PUSH
59698: LD_INT 2
59700: MINUS
59701: LESS
59702: OR
59703: PUSH
59704: LD_VAR 0 8
59708: PUSH
59709: LD_INT 3
59711: ARRAY
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 8
59718: PUSH
59719: LD_INT 9
59721: PUSH
59722: LD_INT 10
59724: PUSH
59725: LD_INT 11
59727: PUSH
59728: LD_INT 12
59730: PUSH
59731: LD_INT 13
59733: PUSH
59734: LD_INT 16
59736: PUSH
59737: LD_INT 17
59739: PUSH
59740: LD_INT 18
59742: PUSH
59743: LD_INT 19
59745: PUSH
59746: LD_INT 20
59748: PUSH
59749: LD_INT 21
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: IN
59767: NOT
59768: OR
59769: PUSH
59770: LD_VAR 0 8
59774: PUSH
59775: LD_INT 5
59777: ARRAY
59778: NOT
59779: OR
59780: PUSH
59781: LD_VAR 0 8
59785: PUSH
59786: LD_INT 6
59788: ARRAY
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: LD_INT 7
59798: PUSH
59799: LD_INT 9
59801: PUSH
59802: LD_INT 10
59804: PUSH
59805: LD_INT 11
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: IN
59816: NOT
59817: OR
59818: IFFALSE 59824
// exit ;
59820: POP
59821: POP
59822: GO 59922
// end ;
59824: GO 59495
59826: POP
59827: POP
// side := GetSide ( depot ) ;
59828: LD_ADDR_VAR 0 9
59832: PUSH
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 255
59842: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59843: LD_VAR 0 9
59847: PPUSH
59848: LD_VAR 0 3
59852: PPUSH
59853: LD_VAR 0 4
59857: PPUSH
59858: LD_INT 20
59860: PPUSH
59861: CALL 52576 0 4
59865: PUSH
59866: LD_INT 4
59868: ARRAY
59869: IFFALSE 59873
// exit ;
59871: GO 59922
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
59873: LD_VAR 0 2
59877: PUSH
59878: LD_INT 29
59880: PUSH
59881: LD_INT 30
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: IN
59888: PUSH
59889: LD_VAR 0 3
59893: PPUSH
59894: LD_VAR 0 4
59898: PPUSH
59899: LD_VAR 0 9
59903: PPUSH
59904: CALL_OW 440
59908: NOT
59909: AND
59910: IFFALSE 59914
// exit ;
59912: GO 59922
// result := true ;
59914: LD_ADDR_VAR 0 6
59918: PUSH
59919: LD_INT 1
59921: ST_TO_ADDR
// end ;
59922: LD_VAR 0 6
59926: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
59927: LD_INT 0
59929: PPUSH
59930: PPUSH
59931: PPUSH
59932: PPUSH
59933: PPUSH
59934: PPUSH
59935: PPUSH
59936: PPUSH
59937: PPUSH
59938: PPUSH
59939: PPUSH
59940: PPUSH
59941: PPUSH
59942: PPUSH
59943: PPUSH
59944: PPUSH
59945: PPUSH
59946: PPUSH
59947: PPUSH
59948: PPUSH
59949: PPUSH
59950: PPUSH
59951: PPUSH
59952: PPUSH
59953: PPUSH
59954: PPUSH
59955: PPUSH
59956: PPUSH
59957: PPUSH
59958: PPUSH
59959: PPUSH
59960: PPUSH
59961: PPUSH
59962: PPUSH
59963: PPUSH
59964: PPUSH
59965: PPUSH
59966: PPUSH
59967: PPUSH
59968: PPUSH
59969: PPUSH
59970: PPUSH
59971: PPUSH
59972: PPUSH
59973: PPUSH
59974: PPUSH
59975: PPUSH
59976: PPUSH
59977: PPUSH
59978: PPUSH
59979: PPUSH
59980: PPUSH
59981: PPUSH
59982: PPUSH
59983: PPUSH
59984: PPUSH
59985: PPUSH
59986: PPUSH
// result = [ ] ;
59987: LD_ADDR_VAR 0 7
59991: PUSH
59992: EMPTY
59993: ST_TO_ADDR
// temp_list = [ ] ;
59994: LD_ADDR_VAR 0 9
59998: PUSH
59999: EMPTY
60000: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60001: LD_VAR 0 4
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: LD_INT 4
60020: PUSH
60021: LD_INT 5
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: IN
60032: NOT
60033: PUSH
60034: LD_VAR 0 1
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: IN
60049: PUSH
60050: LD_VAR 0 5
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: LIST
60068: IN
60069: NOT
60070: AND
60071: OR
60072: IFFALSE 60076
// exit ;
60074: GO 78467
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60076: LD_VAR 0 1
60080: PUSH
60081: LD_INT 6
60083: PUSH
60084: LD_INT 7
60086: PUSH
60087: LD_INT 8
60089: PUSH
60090: LD_INT 13
60092: PUSH
60093: LD_INT 12
60095: PUSH
60096: LD_INT 15
60098: PUSH
60099: LD_INT 11
60101: PUSH
60102: LD_INT 14
60104: PUSH
60105: LD_INT 10
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: IN
60119: IFFALSE 60129
// btype = b_lab ;
60121: LD_ADDR_VAR 0 1
60125: PUSH
60126: LD_INT 6
60128: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60129: LD_VAR 0 6
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: IN
60148: NOT
60149: PUSH
60150: LD_VAR 0 1
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: LD_INT 6
60169: PUSH
60170: LD_INT 36
60172: PUSH
60173: LD_INT 4
60175: PUSH
60176: LD_INT 5
60178: PUSH
60179: LD_INT 31
60181: PUSH
60182: LD_INT 32
60184: PUSH
60185: LD_INT 33
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: IN
60201: NOT
60202: PUSH
60203: LD_VAR 0 6
60207: PUSH
60208: LD_INT 1
60210: EQUAL
60211: AND
60212: OR
60213: PUSH
60214: LD_VAR 0 1
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: IN
60229: NOT
60230: PUSH
60231: LD_VAR 0 6
60235: PUSH
60236: LD_INT 2
60238: EQUAL
60239: AND
60240: OR
60241: IFFALSE 60251
// mode = 0 ;
60243: LD_ADDR_VAR 0 6
60247: PUSH
60248: LD_INT 0
60250: ST_TO_ADDR
// case mode of 0 :
60251: LD_VAR 0 6
60255: PUSH
60256: LD_INT 0
60258: DOUBLE
60259: EQUAL
60260: IFTRUE 60264
60262: GO 71717
60264: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60265: LD_ADDR_VAR 0 11
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60458: LD_ADDR_VAR 0 12
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 3
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60654: LD_ADDR_VAR 0 13
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: LD_INT 2
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: LD_INT 3
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: NEG
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60853: LD_ADDR_VAR 0 14
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61049: LD_ADDR_VAR 0 15
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61242: LD_ADDR_VAR 0 16
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 2
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 3
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61435: LD_ADDR_VAR 0 17
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61665: LD_ADDR_VAR 0 18
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 2
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61895: LD_ADDR_VAR 0 19
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 2
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 2
62094: NEG
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62125: LD_ADDR_VAR 0 20
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: LD_INT 2
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 2
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 2
62324: NEG
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62355: LD_ADDR_VAR 0 21
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: NEG
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 2
62554: NEG
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62585: LD_ADDR_VAR 0 22
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: NEG
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: NEG
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62815: LD_ADDR_VAR 0 23
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 2
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 3
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 2
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63095: LD_ADDR_VAR 0 24
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: LD_INT 1
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 2
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 3
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63371: LD_ADDR_VAR 0 25
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63645: LD_ADDR_VAR 0 26
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 2
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 3
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63921: LD_ADDR_VAR 0 27
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: LD_INT 2
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 3
64154: NEG
64155: PUSH
64156: LD_INT 1
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 3
64166: NEG
64167: PUSH
64168: LD_INT 2
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64201: LD_ADDR_VAR 0 28
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: LD_INT 2
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: NEG
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: LD_INT 3
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 3
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64483: LD_ADDR_VAR 0 29
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: LD_INT 1
64503: NEG
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 2
64661: NEG
64662: PUSH
64663: LD_INT 2
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: LD_INT 3
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 2
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: LD_INT 3
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64762: LD_ADDR_VAR 0 30
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 2
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: LD_INT 2
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: LD_INT 2
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: LD_INT 3
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 2
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: LD_INT 3
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 2
64994: NEG
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65040: LD_ADDR_VAR 0 31
65044: PUSH
65045: LD_INT 0
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 0
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: LD_INT 1
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: LD_INT 2
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 3
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 2
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 3
65283: NEG
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65318: LD_ADDR_VAR 0 32
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 2
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 2
65484: NEG
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 2
65495: NEG
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 3
65530: PUSH
65531: LD_INT 2
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 3
65561: NEG
65562: PUSH
65563: LD_INT 1
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65596: LD_ADDR_VAR 0 33
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: LD_INT 1
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: LD_INT 2
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: NEG
65787: PUSH
65788: LD_INT 3
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: LD_INT 3
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: NEG
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: NEG
65841: PUSH
65842: LD_INT 2
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65875: LD_ADDR_VAR 0 34
65879: PUSH
65880: LD_INT 0
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 0
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 1
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: LD_INT 2
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: LD_INT 1
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: NEG
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PUSH
66056: LD_INT 2
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 1
66066: NEG
66067: PUSH
66068: LD_INT 3
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 3
66089: PUSH
66090: LD_INT 2
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 3
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 3
66120: NEG
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66155: LD_ADDR_VAR 0 35
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66267: LD_ADDR_VAR 0 36
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: NEG
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: LD_INT 2
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66379: LD_ADDR_VAR 0 37
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: LD_INT 1
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: LD_INT 1
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66491: LD_ADDR_VAR 0 38
66495: PUSH
66496: LD_INT 0
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: LD_INT 1
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 1
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 2
66582: NEG
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66603: LD_ADDR_VAR 0 39
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 1
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: LD_INT 1
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: NEG
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 1
66684: NEG
66685: PUSH
66686: LD_INT 2
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 1
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66715: LD_ADDR_VAR 0 40
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: LD_INT 0
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66827: LD_ADDR_VAR 0 41
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 1
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 2
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: LD_INT 1
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: NEG
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 2
66993: NEG
66994: PUSH
66995: LD_INT 1
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: LD_INT 2
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 2
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 3
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: LD_INT 1
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: NEG
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 3
67112: NEG
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 3
67124: NEG
67125: PUSH
67126: LD_INT 2
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: NEG
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67177: LD_ADDR_VAR 0 42
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: LD_INT 1
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: LD_INT 1
67284: NEG
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 2
67302: PUSH
67303: LD_INT 2
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 1
67312: PUSH
67313: LD_INT 2
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 1
67332: NEG
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: NEG
67356: PUSH
67357: LD_INT 2
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 2
67367: NEG
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: LD_INT 3
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: LD_INT 2
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: LD_INT 3
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67527: LD_ADDR_VAR 0 43
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 1
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: LD_INT 1
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: NEG
67586: PUSH
67587: LD_INT 0
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: LD_INT 1
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: LD_INT 2
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: LD_INT 2
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: LD_INT 1
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 2
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 2
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: LD_INT 1
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: NEG
67705: PUSH
67706: LD_INT 1
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: NEG
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 0
67728: PUSH
67729: LD_INT 3
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: LD_INT 2
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 2
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 3
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 1
67781: PUSH
67782: LD_INT 3
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 1
67801: NEG
67802: PUSH
67803: LD_INT 2
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 3
67823: NEG
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 3
67834: NEG
67835: PUSH
67836: LD_INT 1
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67875: LD_ADDR_VAR 0 44
67879: PUSH
67880: LD_INT 0
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: NEG
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 1
67956: NEG
67957: PUSH
67958: LD_INT 2
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 2
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 2
68041: NEG
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: NEG
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: LD_INT 3
68069: NEG
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 3
68098: PUSH
68099: LD_INT 1
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: LD_INT 1
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 3
68149: NEG
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 3
68160: NEG
68161: PUSH
68162: LD_INT 1
68164: NEG
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 3
68172: NEG
68173: PUSH
68174: LD_INT 2
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 3
68184: NEG
68185: PUSH
68186: LD_INT 3
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68225: LD_ADDR_VAR 0 45
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 1
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: NEG
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: LD_INT 1
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: LD_INT 2
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 0
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 1
68380: NEG
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 2
68391: NEG
68392: PUSH
68393: LD_INT 1
68395: NEG
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: LD_INT 2
68407: NEG
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: LD_INT 3
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 1
68427: NEG
68428: PUSH
68429: LD_INT 3
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 3
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 1
68450: PUSH
68451: LD_INT 2
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 3
68461: PUSH
68462: LD_INT 2
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 3
68471: PUSH
68472: LD_INT 3
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 2
68481: PUSH
68482: LD_INT 3
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 0
68501: PUSH
68502: LD_INT 3
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 1
68511: NEG
68512: PUSH
68513: LD_INT 2
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 3
68522: NEG
68523: PUSH
68524: LD_INT 2
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68575: LD_ADDR_VAR 0 46
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: NEG
68657: PUSH
68658: LD_INT 2
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 2
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 2
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 1
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: LD_INT 2
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 2
68741: NEG
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 2
68752: NEG
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 1
68764: NEG
68765: PUSH
68766: LD_INT 3
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 0
68776: PUSH
68777: LD_INT 3
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 1
68787: PUSH
68788: LD_INT 2
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 2
68798: PUSH
68799: LD_INT 1
68801: NEG
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 3
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: LD_INT 1
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: LD_INT 3
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 0
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: LD_INT 1
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 3
68882: NEG
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68923: LD_ADDR_VAR 0 47
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: LD_INT 1
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: LD_INT 1
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 0
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 1
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 2
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69074: LD_ADDR_VAR 0 48
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: LD_INT 1
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 1
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: LD_INT 1
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: LD_INT 0
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: NEG
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 2
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 2
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69221: LD_ADDR_VAR 0 49
69225: PUSH
69226: LD_INT 0
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: LD_INT 1
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: LD_INT 1
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 1
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: LD_INT 1
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 2
69313: PUSH
69314: LD_INT 0
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 2
69323: PUSH
69324: LD_INT 1
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 2
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: LD_INT 2
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69365: LD_ADDR_VAR 0 50
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 0
69382: PUSH
69383: LD_INT 1
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 1
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: LD_INT 1
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 1
69434: NEG
69435: PUSH
69436: LD_INT 1
69438: NEG
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 2
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 2
69456: PUSH
69457: LD_INT 2
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: PUSH
69467: LD_INT 2
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: LD_INT 2
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 1
69486: NEG
69487: PUSH
69488: LD_INT 1
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69509: LD_ADDR_VAR 0 51
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: LD_INT 1
69529: NEG
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 1
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 1
69547: PUSH
69548: LD_INT 1
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 0
69557: PUSH
69558: LD_INT 1
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: NEG
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: LD_INT 1
69582: NEG
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 2
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: LD_INT 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 2
69621: NEG
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 2
69632: NEG
69633: PUSH
69634: LD_INT 1
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69656: LD_ADDR_VAR 0 52
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: LD_INT 0
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: LD_INT 1
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 1
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: LD_INT 1
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: LD_INT 1
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: LD_INT 1
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: LD_INT 2
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: LD_INT 1
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 2
69760: NEG
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 2
69771: NEG
69772: PUSH
69773: LD_INT 1
69775: NEG
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: LD_INT 2
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69807: LD_ADDR_VAR 0 53
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 0
69824: PUSH
69825: LD_INT 1
69827: NEG
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 1
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 1
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 1
69865: NEG
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 1
69876: NEG
69877: PUSH
69878: LD_INT 1
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 1
69888: NEG
69889: PUSH
69890: LD_INT 2
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 0
69900: PUSH
69901: LD_INT 2
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 2
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 2
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: LD_INT 2
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 0
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 2
69983: NEG
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 2
69994: NEG
69995: PUSH
69996: LD_INT 1
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 2
70006: NEG
70007: PUSH
70008: LD_INT 2
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70037: LD_ADDR_VAR 0 54
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 0
70054: PUSH
70055: LD_INT 1
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 1
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 1
70075: PUSH
70076: LD_INT 1
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: LD_INT 1
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 1
70095: NEG
70096: PUSH
70097: LD_INT 0
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: LD_INT 1
70110: NEG
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 1
70118: NEG
70119: PUSH
70120: LD_INT 2
70122: NEG
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 1
70141: PUSH
70142: LD_INT 1
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 2
70162: PUSH
70163: LD_INT 1
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 1
70182: PUSH
70183: LD_INT 2
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 0
70192: PUSH
70193: LD_INT 2
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 2
70213: NEG
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 2
70224: NEG
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 2
70236: NEG
70237: PUSH
70238: LD_INT 2
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70267: LD_ADDR_VAR 0 55
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: LD_INT 0
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: LD_INT 1
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 1
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 1
70305: PUSH
70306: LD_INT 1
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: LD_INT 1
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 1
70336: NEG
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 1
70348: NEG
70349: PUSH
70350: LD_INT 2
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: LD_INT 2
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 1
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 2
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 2
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 2
70402: PUSH
70403: LD_INT 2
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 1
70412: PUSH
70413: LD_INT 2
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: LD_INT 2
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 1
70432: NEG
70433: PUSH
70434: LD_INT 1
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 2
70454: NEG
70455: PUSH
70456: LD_INT 1
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 2
70466: NEG
70467: PUSH
70468: LD_INT 2
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70497: LD_ADDR_VAR 0 56
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 0
70514: PUSH
70515: LD_INT 1
70517: NEG
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 1
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: PUSH
70536: LD_INT 1
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: LD_INT 1
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 1
70566: NEG
70567: PUSH
70568: LD_INT 1
70570: NEG
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 1
70578: NEG
70579: PUSH
70580: LD_INT 2
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 2
70593: NEG
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 1
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 2
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: LD_INT 2
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 1
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: LD_INT 2
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 1
70662: NEG
70663: PUSH
70664: LD_INT 1
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 2
70673: NEG
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 2
70684: NEG
70685: PUSH
70686: LD_INT 1
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 2
70696: NEG
70697: PUSH
70698: LD_INT 2
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70727: LD_ADDR_VAR 0 57
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_INT 0
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: LD_INT 1
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: PUSH
70756: LD_INT 0
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: LD_INT 1
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: LD_INT 1
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 1
70785: NEG
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 1
70796: NEG
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 1
70808: NEG
70809: PUSH
70810: LD_INT 2
70812: NEG
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 0
70820: PUSH
70821: LD_INT 2
70823: NEG
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 1
70831: PUSH
70832: LD_INT 1
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 2
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 2
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 2
70862: PUSH
70863: LD_INT 2
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: LD_INT 2
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 0
70882: PUSH
70883: LD_INT 2
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 1
70892: NEG
70893: PUSH
70894: LD_INT 1
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: NEG
70904: PUSH
70905: LD_INT 0
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 2
70914: NEG
70915: PUSH
70916: LD_INT 1
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 2
70926: NEG
70927: PUSH
70928: LD_INT 2
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70957: LD_ADDR_VAR 0 58
70961: PUSH
70962: LD_INT 0
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: LD_INT 1
70977: NEG
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 1
70985: PUSH
70986: LD_INT 0
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 1
70995: PUSH
70996: LD_INT 1
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: LD_INT 1
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 1
71015: NEG
71016: PUSH
71017: LD_INT 0
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 1
71026: NEG
71027: PUSH
71028: LD_INT 1
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 1
71038: NEG
71039: PUSH
71040: LD_INT 2
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 0
71050: PUSH
71051: LD_INT 2
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: LD_INT 1
71064: NEG
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 2
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 2
71082: PUSH
71083: LD_INT 1
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: LD_INT 2
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 1
71102: PUSH
71103: LD_INT 2
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 0
71112: PUSH
71113: LD_INT 2
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 1
71122: NEG
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 2
71133: NEG
71134: PUSH
71135: LD_INT 0
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 2
71144: NEG
71145: PUSH
71146: LD_INT 1
71148: NEG
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 2
71156: NEG
71157: PUSH
71158: LD_INT 2
71160: NEG
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71187: LD_ADDR_VAR 0 59
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: LD_INT 1
71207: NEG
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 1
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: LD_INT 1
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 1
71245: NEG
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: LD_INT 1
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71275: LD_ADDR_VAR 0 60
71279: PUSH
71280: LD_INT 0
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 0
71292: PUSH
71293: LD_INT 1
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 1
71303: PUSH
71304: LD_INT 0
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 1
71313: PUSH
71314: LD_INT 1
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: LD_INT 1
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 1
71333: NEG
71334: PUSH
71335: LD_INT 0
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: LD_INT 1
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71363: LD_ADDR_VAR 0 61
71367: PUSH
71368: LD_INT 0
71370: PUSH
71371: LD_INT 0
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: LD_INT 1
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 1
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_INT 1
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 1
71421: NEG
71422: PUSH
71423: LD_INT 0
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: NEG
71433: PUSH
71434: LD_INT 1
71436: NEG
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71451: LD_ADDR_VAR 0 62
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 0
71468: PUSH
71469: LD_INT 1
71471: NEG
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 1
71479: PUSH
71480: LD_INT 0
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 1
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: LD_INT 1
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: LD_INT 0
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 1
71520: NEG
71521: PUSH
71522: LD_INT 1
71524: NEG
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71539: LD_ADDR_VAR 0 63
71543: PUSH
71544: LD_INT 0
71546: PUSH
71547: LD_INT 0
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 0
71556: PUSH
71557: LD_INT 1
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: LD_INT 0
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: LD_INT 1
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 0
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 1
71597: NEG
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 1
71608: NEG
71609: PUSH
71610: LD_INT 1
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71627: LD_ADDR_VAR 0 64
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: LD_INT 0
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: LD_INT 1
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: LD_INT 0
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 1
71665: PUSH
71666: LD_INT 1
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 0
71675: PUSH
71676: LD_INT 1
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 1
71685: NEG
71686: PUSH
71687: LD_INT 0
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 1
71696: NEG
71697: PUSH
71698: LD_INT 1
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: ST_TO_ADDR
// end ; 1 :
71715: GO 77612
71717: LD_INT 1
71719: DOUBLE
71720: EQUAL
71721: IFTRUE 71725
71723: GO 74348
71725: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71726: LD_ADDR_VAR 0 11
71730: PUSH
71731: LD_INT 1
71733: NEG
71734: PUSH
71735: LD_INT 3
71737: NEG
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 0
71745: PUSH
71746: LD_INT 3
71748: NEG
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 1
71756: PUSH
71757: LD_INT 2
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: LIST
71769: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71770: LD_ADDR_VAR 0 12
71774: PUSH
71775: LD_INT 2
71777: PUSH
71778: LD_INT 1
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 3
71788: PUSH
71789: LD_INT 0
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 3
71798: PUSH
71799: LD_INT 1
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: LIST
71810: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71811: LD_ADDR_VAR 0 13
71815: PUSH
71816: LD_INT 3
71818: PUSH
71819: LD_INT 2
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 3
71828: PUSH
71829: LD_INT 3
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 2
71838: PUSH
71839: LD_INT 3
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: LIST
71850: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71851: LD_ADDR_VAR 0 14
71855: PUSH
71856: LD_INT 1
71858: PUSH
71859: LD_INT 3
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 0
71868: PUSH
71869: LD_INT 3
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 1
71878: NEG
71879: PUSH
71880: LD_INT 2
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71892: LD_ADDR_VAR 0 15
71896: PUSH
71897: LD_INT 2
71899: NEG
71900: PUSH
71901: LD_INT 1
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 3
71910: NEG
71911: PUSH
71912: LD_INT 0
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 3
71921: NEG
71922: PUSH
71923: LD_INT 1
71925: NEG
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71936: LD_ADDR_VAR 0 16
71940: PUSH
71941: LD_INT 2
71943: NEG
71944: PUSH
71945: LD_INT 3
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 3
71955: NEG
71956: PUSH
71957: LD_INT 2
71959: NEG
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 3
71967: NEG
71968: PUSH
71969: LD_INT 3
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: LIST
71981: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71982: LD_ADDR_VAR 0 17
71986: PUSH
71987: LD_INT 1
71989: NEG
71990: PUSH
71991: LD_INT 3
71993: NEG
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 0
72001: PUSH
72002: LD_INT 3
72004: NEG
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 1
72012: PUSH
72013: LD_INT 2
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: LIST
72025: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72026: LD_ADDR_VAR 0 18
72030: PUSH
72031: LD_INT 2
72033: PUSH
72034: LD_INT 1
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 3
72044: PUSH
72045: LD_INT 0
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72067: LD_ADDR_VAR 0 19
72071: PUSH
72072: LD_INT 3
72074: PUSH
72075: LD_INT 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 3
72084: PUSH
72085: LD_INT 3
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 2
72094: PUSH
72095: LD_INT 3
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: LIST
72106: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72107: LD_ADDR_VAR 0 20
72111: PUSH
72112: LD_INT 1
72114: PUSH
72115: LD_INT 3
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 0
72124: PUSH
72125: LD_INT 3
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 1
72134: NEG
72135: PUSH
72136: LD_INT 2
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: LIST
72147: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72148: LD_ADDR_VAR 0 21
72152: PUSH
72153: LD_INT 2
72155: NEG
72156: PUSH
72157: LD_INT 1
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 3
72166: NEG
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 3
72177: NEG
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: LIST
72191: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72192: LD_ADDR_VAR 0 22
72196: PUSH
72197: LD_INT 2
72199: NEG
72200: PUSH
72201: LD_INT 3
72203: NEG
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 3
72211: NEG
72212: PUSH
72213: LD_INT 2
72215: NEG
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 3
72223: NEG
72224: PUSH
72225: LD_INT 3
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72238: LD_ADDR_VAR 0 23
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: LD_INT 3
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 1
72256: NEG
72257: PUSH
72258: LD_INT 4
72260: NEG
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 1
72268: PUSH
72269: LD_INT 3
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: LIST
72281: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72282: LD_ADDR_VAR 0 24
72286: PUSH
72287: LD_INT 3
72289: PUSH
72290: LD_INT 0
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: LD_INT 1
72302: NEG
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 4
72310: PUSH
72311: LD_INT 1
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: LIST
72322: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72323: LD_ADDR_VAR 0 25
72327: PUSH
72328: LD_INT 3
72330: PUSH
72331: LD_INT 3
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 4
72340: PUSH
72341: LD_INT 3
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 3
72350: PUSH
72351: LD_INT 4
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: LIST
72362: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72363: LD_ADDR_VAR 0 26
72367: PUSH
72368: LD_INT 0
72370: PUSH
72371: LD_INT 3
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 1
72380: PUSH
72381: LD_INT 4
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 1
72390: NEG
72391: PUSH
72392: LD_INT 3
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: LIST
72403: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72404: LD_ADDR_VAR 0 27
72408: PUSH
72409: LD_INT 3
72411: NEG
72412: PUSH
72413: LD_INT 0
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 3
72422: NEG
72423: PUSH
72424: LD_INT 1
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 4
72433: NEG
72434: PUSH
72435: LD_INT 1
72437: NEG
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: LIST
72447: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72448: LD_ADDR_VAR 0 28
72452: PUSH
72453: LD_INT 3
72455: NEG
72456: PUSH
72457: LD_INT 3
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 3
72467: NEG
72468: PUSH
72469: LD_INT 4
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 4
72479: NEG
72480: PUSH
72481: LD_INT 3
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: LIST
72493: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72494: LD_ADDR_VAR 0 29
72498: PUSH
72499: LD_INT 1
72501: NEG
72502: PUSH
72503: LD_INT 3
72505: NEG
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 0
72513: PUSH
72514: LD_INT 3
72516: NEG
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 1
72524: PUSH
72525: LD_INT 2
72527: NEG
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 1
72535: NEG
72536: PUSH
72537: LD_INT 4
72539: NEG
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 0
72547: PUSH
72548: LD_INT 4
72550: NEG
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 1
72558: PUSH
72559: LD_INT 3
72561: NEG
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 1
72569: NEG
72570: PUSH
72571: LD_INT 5
72573: NEG
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: LD_INT 5
72584: NEG
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 1
72592: PUSH
72593: LD_INT 4
72595: NEG
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 1
72603: NEG
72604: PUSH
72605: LD_INT 6
72607: NEG
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 0
72615: PUSH
72616: LD_INT 6
72618: NEG
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 1
72626: PUSH
72627: LD_INT 5
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72649: LD_ADDR_VAR 0 30
72653: PUSH
72654: LD_INT 2
72656: PUSH
72657: LD_INT 1
72659: NEG
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 3
72667: PUSH
72668: LD_INT 0
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 3
72677: PUSH
72678: LD_INT 1
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 3
72687: PUSH
72688: LD_INT 1
72690: NEG
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 4
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 4
72708: PUSH
72709: LD_INT 1
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: PUSH
72716: LD_INT 4
72718: PUSH
72719: LD_INT 1
72721: NEG
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 5
72729: PUSH
72730: LD_INT 0
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 5
72739: PUSH
72740: LD_INT 1
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 5
72749: PUSH
72750: LD_INT 1
72752: NEG
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 6
72760: PUSH
72761: LD_INT 0
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 6
72770: PUSH
72771: LD_INT 1
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
72792: LD_ADDR_VAR 0 31
72796: PUSH
72797: LD_INT 3
72799: PUSH
72800: LD_INT 2
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 3
72809: PUSH
72810: LD_INT 3
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 2
72819: PUSH
72820: LD_INT 3
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 4
72829: PUSH
72830: LD_INT 3
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 4
72839: PUSH
72840: LD_INT 4
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 3
72849: PUSH
72850: LD_INT 4
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 5
72859: PUSH
72860: LD_INT 4
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 5
72869: PUSH
72870: LD_INT 5
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 4
72879: PUSH
72880: LD_INT 5
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 6
72889: PUSH
72890: LD_INT 5
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 6
72899: PUSH
72900: LD_INT 6
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 5
72909: PUSH
72910: LD_INT 6
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
72931: LD_ADDR_VAR 0 32
72935: PUSH
72936: LD_INT 1
72938: PUSH
72939: LD_INT 3
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 0
72948: PUSH
72949: LD_INT 3
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 1
72958: NEG
72959: PUSH
72960: LD_INT 2
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 1
72969: PUSH
72970: LD_INT 4
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: LD_INT 4
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 1
72989: NEG
72990: PUSH
72991: LD_INT 3
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 1
73000: PUSH
73001: LD_INT 5
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: LD_INT 5
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 1
73020: NEG
73021: PUSH
73022: LD_INT 4
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 1
73031: PUSH
73032: LD_INT 6
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: LD_INT 6
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 1
73051: NEG
73052: PUSH
73053: LD_INT 5
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73074: LD_ADDR_VAR 0 33
73078: PUSH
73079: LD_INT 2
73081: NEG
73082: PUSH
73083: LD_INT 1
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 3
73092: NEG
73093: PUSH
73094: LD_INT 0
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 3
73103: NEG
73104: PUSH
73105: LD_INT 1
73107: NEG
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 3
73115: NEG
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 4
73126: NEG
73127: PUSH
73128: LD_INT 0
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 4
73137: NEG
73138: PUSH
73139: LD_INT 1
73141: NEG
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 4
73149: NEG
73150: PUSH
73151: LD_INT 1
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 5
73160: NEG
73161: PUSH
73162: LD_INT 0
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 5
73171: NEG
73172: PUSH
73173: LD_INT 1
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 5
73183: NEG
73184: PUSH
73185: LD_INT 1
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 6
73194: NEG
73195: PUSH
73196: LD_INT 0
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 6
73205: NEG
73206: PUSH
73207: LD_INT 1
73209: NEG
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73229: LD_ADDR_VAR 0 34
73233: PUSH
73234: LD_INT 2
73236: NEG
73237: PUSH
73238: LD_INT 3
73240: NEG
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 3
73248: NEG
73249: PUSH
73250: LD_INT 2
73252: NEG
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 3
73260: NEG
73261: PUSH
73262: LD_INT 3
73264: NEG
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 3
73272: NEG
73273: PUSH
73274: LD_INT 4
73276: NEG
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 4
73284: NEG
73285: PUSH
73286: LD_INT 3
73288: NEG
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 4
73296: NEG
73297: PUSH
73298: LD_INT 4
73300: NEG
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 4
73308: NEG
73309: PUSH
73310: LD_INT 5
73312: NEG
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PUSH
73318: LD_INT 5
73320: NEG
73321: PUSH
73322: LD_INT 4
73324: NEG
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 5
73332: NEG
73333: PUSH
73334: LD_INT 5
73336: NEG
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 5
73344: NEG
73345: PUSH
73346: LD_INT 6
73348: NEG
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 6
73356: NEG
73357: PUSH
73358: LD_INT 5
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 6
73368: NEG
73369: PUSH
73370: LD_INT 6
73372: NEG
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73392: LD_ADDR_VAR 0 41
73396: PUSH
73397: LD_INT 0
73399: PUSH
73400: LD_INT 2
73402: NEG
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 1
73410: NEG
73411: PUSH
73412: LD_INT 3
73414: NEG
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 1
73422: PUSH
73423: LD_INT 2
73425: NEG
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73436: LD_ADDR_VAR 0 42
73440: PUSH
73441: LD_INT 2
73443: PUSH
73444: LD_INT 0
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: LD_INT 1
73456: NEG
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 3
73464: PUSH
73465: LD_INT 1
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: LIST
73476: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73477: LD_ADDR_VAR 0 43
73481: PUSH
73482: LD_INT 2
73484: PUSH
73485: LD_INT 2
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 3
73494: PUSH
73495: LD_INT 2
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 2
73504: PUSH
73505: LD_INT 3
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: LIST
73516: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73517: LD_ADDR_VAR 0 44
73521: PUSH
73522: LD_INT 0
73524: PUSH
73525: LD_INT 2
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 1
73534: PUSH
73535: LD_INT 3
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 1
73544: NEG
73545: PUSH
73546: LD_INT 2
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: LIST
73557: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73558: LD_ADDR_VAR 0 45
73562: PUSH
73563: LD_INT 2
73565: NEG
73566: PUSH
73567: LD_INT 0
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 2
73576: NEG
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: LD_INT 3
73587: NEG
73588: PUSH
73589: LD_INT 1
73591: NEG
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: LIST
73601: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73602: LD_ADDR_VAR 0 46
73606: PUSH
73607: LD_INT 2
73609: NEG
73610: PUSH
73611: LD_INT 2
73613: NEG
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 2
73621: NEG
73622: PUSH
73623: LD_INT 3
73625: NEG
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 3
73633: NEG
73634: PUSH
73635: LD_INT 2
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: LIST
73647: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73648: LD_ADDR_VAR 0 47
73652: PUSH
73653: LD_INT 2
73655: NEG
73656: PUSH
73657: LD_INT 3
73659: NEG
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 1
73667: NEG
73668: PUSH
73669: LD_INT 3
73671: NEG
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73681: LD_ADDR_VAR 0 48
73685: PUSH
73686: LD_INT 1
73688: PUSH
73689: LD_INT 2
73691: NEG
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 2
73699: PUSH
73700: LD_INT 1
73702: NEG
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73712: LD_ADDR_VAR 0 49
73716: PUSH
73717: LD_INT 3
73719: PUSH
73720: LD_INT 1
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 3
73729: PUSH
73730: LD_INT 2
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73741: LD_ADDR_VAR 0 50
73745: PUSH
73746: LD_INT 2
73748: PUSH
73749: LD_INT 3
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 1
73758: PUSH
73759: LD_INT 3
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73770: LD_ADDR_VAR 0 51
73774: PUSH
73775: LD_INT 1
73777: NEG
73778: PUSH
73779: LD_INT 2
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 2
73788: NEG
73789: PUSH
73790: LD_INT 1
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73801: LD_ADDR_VAR 0 52
73805: PUSH
73806: LD_INT 3
73808: NEG
73809: PUSH
73810: LD_INT 1
73812: NEG
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 3
73820: NEG
73821: PUSH
73822: LD_INT 2
73824: NEG
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73834: LD_ADDR_VAR 0 53
73838: PUSH
73839: LD_INT 1
73841: NEG
73842: PUSH
73843: LD_INT 3
73845: NEG
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: LD_INT 0
73853: PUSH
73854: LD_INT 3
73856: NEG
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 1
73864: PUSH
73865: LD_INT 2
73867: NEG
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: LIST
73877: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73878: LD_ADDR_VAR 0 54
73882: PUSH
73883: LD_INT 2
73885: PUSH
73886: LD_INT 1
73888: NEG
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 3
73896: PUSH
73897: LD_INT 0
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: LD_INT 3
73906: PUSH
73907: LD_INT 1
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73919: LD_ADDR_VAR 0 55
73923: PUSH
73924: LD_INT 3
73926: PUSH
73927: LD_INT 2
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 3
73936: PUSH
73937: LD_INT 3
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 2
73946: PUSH
73947: LD_INT 3
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: LIST
73958: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73959: LD_ADDR_VAR 0 56
73963: PUSH
73964: LD_INT 1
73966: PUSH
73967: LD_INT 3
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 0
73976: PUSH
73977: LD_INT 3
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 1
73986: NEG
73987: PUSH
73988: LD_INT 2
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: LIST
73999: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74000: LD_ADDR_VAR 0 57
74004: PUSH
74005: LD_INT 2
74007: NEG
74008: PUSH
74009: LD_INT 1
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 3
74018: NEG
74019: PUSH
74020: LD_INT 0
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: PUSH
74027: LD_INT 3
74029: NEG
74030: PUSH
74031: LD_INT 1
74033: NEG
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: LIST
74043: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74044: LD_ADDR_VAR 0 58
74048: PUSH
74049: LD_INT 2
74051: NEG
74052: PUSH
74053: LD_INT 3
74055: NEG
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 3
74063: NEG
74064: PUSH
74065: LD_INT 2
74067: NEG
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 3
74075: NEG
74076: PUSH
74077: LD_INT 3
74079: NEG
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: LIST
74089: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74090: LD_ADDR_VAR 0 59
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: LD_INT 2
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: LD_INT 2
74112: NEG
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 1
74120: PUSH
74121: LD_INT 1
74123: NEG
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: LIST
74133: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74134: LD_ADDR_VAR 0 60
74138: PUSH
74139: LD_INT 1
74141: PUSH
74142: LD_INT 1
74144: NEG
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 2
74152: PUSH
74153: LD_INT 0
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 2
74162: PUSH
74163: LD_INT 1
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: LIST
74174: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74175: LD_ADDR_VAR 0 61
74179: PUSH
74180: LD_INT 2
74182: PUSH
74183: LD_INT 1
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 2
74192: PUSH
74193: LD_INT 2
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: PUSH
74200: LD_INT 1
74202: PUSH
74203: LD_INT 2
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: LIST
74214: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74215: LD_ADDR_VAR 0 62
74219: PUSH
74220: LD_INT 1
74222: PUSH
74223: LD_INT 2
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: PUSH
74230: LD_INT 0
74232: PUSH
74233: LD_INT 2
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 1
74242: NEG
74243: PUSH
74244: LD_INT 1
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: LIST
74255: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74256: LD_ADDR_VAR 0 63
74260: PUSH
74261: LD_INT 1
74263: NEG
74264: PUSH
74265: LD_INT 1
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PUSH
74272: LD_INT 2
74274: NEG
74275: PUSH
74276: LD_INT 0
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: PUSH
74283: LD_INT 2
74285: NEG
74286: PUSH
74287: LD_INT 1
74289: NEG
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: LIST
74299: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74300: LD_ADDR_VAR 0 64
74304: PUSH
74305: LD_INT 1
74307: NEG
74308: PUSH
74309: LD_INT 2
74311: NEG
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 2
74319: NEG
74320: PUSH
74321: LD_INT 1
74323: NEG
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 2
74331: NEG
74332: PUSH
74333: LD_INT 2
74335: NEG
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: LIST
74345: ST_TO_ADDR
// end ; 2 :
74346: GO 77612
74348: LD_INT 2
74350: DOUBLE
74351: EQUAL
74352: IFTRUE 74356
74354: GO 77611
74356: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74357: LD_ADDR_VAR 0 29
74361: PUSH
74362: LD_INT 4
74364: PUSH
74365: LD_INT 0
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 4
74374: PUSH
74375: LD_INT 1
74377: NEG
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PUSH
74383: LD_INT 5
74385: PUSH
74386: LD_INT 0
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 5
74395: PUSH
74396: LD_INT 1
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 4
74405: PUSH
74406: LD_INT 1
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 3
74415: PUSH
74416: LD_INT 0
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 3
74425: PUSH
74426: LD_INT 1
74428: NEG
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PUSH
74434: LD_INT 3
74436: PUSH
74437: LD_INT 2
74439: NEG
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 5
74447: PUSH
74448: LD_INT 2
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 3
74457: PUSH
74458: LD_INT 3
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 3
74467: PUSH
74468: LD_INT 2
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 4
74477: PUSH
74478: LD_INT 3
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 4
74487: PUSH
74488: LD_INT 4
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 3
74497: PUSH
74498: LD_INT 4
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: LD_INT 3
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: LD_INT 2
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 4
74527: PUSH
74528: LD_INT 2
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 2
74537: PUSH
74538: LD_INT 4
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 0
74547: PUSH
74548: LD_INT 4
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 0
74557: PUSH
74558: LD_INT 3
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: PUSH
74565: LD_INT 1
74567: PUSH
74568: LD_INT 4
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 1
74577: PUSH
74578: LD_INT 5
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 0
74587: PUSH
74588: LD_INT 5
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 1
74597: NEG
74598: PUSH
74599: LD_INT 4
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 1
74608: NEG
74609: PUSH
74610: LD_INT 3
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 2
74619: PUSH
74620: LD_INT 5
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 2
74629: NEG
74630: PUSH
74631: LD_INT 3
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: PUSH
74638: LD_INT 3
74640: NEG
74641: PUSH
74642: LD_INT 0
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: PUSH
74649: LD_INT 3
74651: NEG
74652: PUSH
74653: LD_INT 1
74655: NEG
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PUSH
74661: LD_INT 2
74663: NEG
74664: PUSH
74665: LD_INT 0
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 2
74674: NEG
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: PUSH
74683: LD_INT 3
74685: NEG
74686: PUSH
74687: LD_INT 1
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 4
74696: NEG
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 4
74707: NEG
74708: PUSH
74709: LD_INT 1
74711: NEG
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 4
74719: NEG
74720: PUSH
74721: LD_INT 2
74723: NEG
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PUSH
74729: LD_INT 2
74731: NEG
74732: PUSH
74733: LD_INT 2
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 4
74742: NEG
74743: PUSH
74744: LD_INT 4
74746: NEG
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: PUSH
74752: LD_INT 4
74754: NEG
74755: PUSH
74756: LD_INT 5
74758: NEG
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 3
74766: NEG
74767: PUSH
74768: LD_INT 4
74770: NEG
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: LD_INT 3
74778: NEG
74779: PUSH
74780: LD_INT 3
74782: NEG
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: PUSH
74788: LD_INT 4
74790: NEG
74791: PUSH
74792: LD_INT 3
74794: NEG
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: PUSH
74800: LD_INT 5
74802: NEG
74803: PUSH
74804: LD_INT 4
74806: NEG
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 5
74814: NEG
74815: PUSH
74816: LD_INT 5
74818: NEG
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PUSH
74824: LD_INT 3
74826: NEG
74827: PUSH
74828: LD_INT 5
74830: NEG
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 5
74838: NEG
74839: PUSH
74840: LD_INT 3
74842: NEG
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
74895: LD_ADDR_VAR 0 30
74899: PUSH
74900: LD_INT 4
74902: PUSH
74903: LD_INT 4
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: LD_INT 4
74912: PUSH
74913: LD_INT 3
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PUSH
74920: LD_INT 5
74922: PUSH
74923: LD_INT 4
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: PUSH
74930: LD_INT 5
74932: PUSH
74933: LD_INT 5
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 4
74942: PUSH
74943: LD_INT 5
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 3
74952: PUSH
74953: LD_INT 4
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 3
74962: PUSH
74963: LD_INT 3
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 5
74972: PUSH
74973: LD_INT 3
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 3
74982: PUSH
74983: LD_INT 5
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 0
74992: PUSH
74993: LD_INT 3
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: LD_INT 0
75002: PUSH
75003: LD_INT 2
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: LD_INT 1
75012: PUSH
75013: LD_INT 3
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: PUSH
75020: LD_INT 1
75022: PUSH
75023: LD_INT 4
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 0
75032: PUSH
75033: LD_INT 4
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 1
75042: NEG
75043: PUSH
75044: LD_INT 3
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 1
75053: NEG
75054: PUSH
75055: LD_INT 2
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 2
75064: PUSH
75065: LD_INT 4
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 2
75074: NEG
75075: PUSH
75076: LD_INT 2
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: LD_INT 4
75085: NEG
75086: PUSH
75087: LD_INT 0
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 4
75096: NEG
75097: PUSH
75098: LD_INT 1
75100: NEG
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PUSH
75106: LD_INT 3
75108: NEG
75109: PUSH
75110: LD_INT 0
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 3
75119: NEG
75120: PUSH
75121: LD_INT 1
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: LD_INT 4
75130: NEG
75131: PUSH
75132: LD_INT 1
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PUSH
75139: LD_INT 5
75141: NEG
75142: PUSH
75143: LD_INT 0
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 5
75152: NEG
75153: PUSH
75154: LD_INT 1
75156: NEG
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: PUSH
75162: LD_INT 5
75164: NEG
75165: PUSH
75166: LD_INT 2
75168: NEG
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 3
75176: NEG
75177: PUSH
75178: LD_INT 2
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 3
75187: NEG
75188: PUSH
75189: LD_INT 3
75191: NEG
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: LD_INT 3
75199: NEG
75200: PUSH
75201: LD_INT 4
75203: NEG
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: LD_INT 2
75211: NEG
75212: PUSH
75213: LD_INT 3
75215: NEG
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 2
75223: NEG
75224: PUSH
75225: LD_INT 2
75227: NEG
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 3
75235: NEG
75236: PUSH
75237: LD_INT 2
75239: NEG
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 4
75247: NEG
75248: PUSH
75249: LD_INT 3
75251: NEG
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PUSH
75257: LD_INT 4
75259: NEG
75260: PUSH
75261: LD_INT 4
75263: NEG
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: LD_INT 2
75271: NEG
75272: PUSH
75273: LD_INT 4
75275: NEG
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 4
75283: NEG
75284: PUSH
75285: LD_INT 2
75287: NEG
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 0
75295: PUSH
75296: LD_INT 4
75298: NEG
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: LD_INT 0
75306: PUSH
75307: LD_INT 5
75309: NEG
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 1
75317: PUSH
75318: LD_INT 4
75320: NEG
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 1
75328: PUSH
75329: LD_INT 3
75331: NEG
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 0
75339: PUSH
75340: LD_INT 3
75342: NEG
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 1
75350: NEG
75351: PUSH
75352: LD_INT 4
75354: NEG
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 1
75362: NEG
75363: PUSH
75364: LD_INT 5
75366: NEG
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 2
75374: PUSH
75375: LD_INT 3
75377: NEG
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PUSH
75383: LD_INT 2
75385: NEG
75386: PUSH
75387: LD_INT 5
75389: NEG
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75442: LD_ADDR_VAR 0 31
75446: PUSH
75447: LD_INT 0
75449: PUSH
75450: LD_INT 4
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: PUSH
75457: LD_INT 0
75459: PUSH
75460: LD_INT 3
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 1
75469: PUSH
75470: LD_INT 4
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PUSH
75477: LD_INT 1
75479: PUSH
75480: LD_INT 5
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 0
75489: PUSH
75490: LD_INT 5
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: LD_INT 1
75499: NEG
75500: PUSH
75501: LD_INT 4
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 1
75510: NEG
75511: PUSH
75512: LD_INT 3
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 2
75521: PUSH
75522: LD_INT 5
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 2
75531: NEG
75532: PUSH
75533: LD_INT 3
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 3
75542: NEG
75543: PUSH
75544: LD_INT 0
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: LD_INT 3
75553: NEG
75554: PUSH
75555: LD_INT 1
75557: NEG
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: LD_INT 2
75565: NEG
75566: PUSH
75567: LD_INT 0
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: LD_INT 2
75576: NEG
75577: PUSH
75578: LD_INT 1
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 3
75587: NEG
75588: PUSH
75589: LD_INT 1
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: LD_INT 4
75598: NEG
75599: PUSH
75600: LD_INT 0
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 4
75609: NEG
75610: PUSH
75611: LD_INT 1
75613: NEG
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 4
75621: NEG
75622: PUSH
75623: LD_INT 2
75625: NEG
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: LD_INT 2
75633: NEG
75634: PUSH
75635: LD_INT 2
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PUSH
75642: LD_INT 4
75644: NEG
75645: PUSH
75646: LD_INT 4
75648: NEG
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: PUSH
75654: LD_INT 4
75656: NEG
75657: PUSH
75658: LD_INT 5
75660: NEG
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 3
75668: NEG
75669: PUSH
75670: LD_INT 4
75672: NEG
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: PUSH
75678: LD_INT 3
75680: NEG
75681: PUSH
75682: LD_INT 3
75684: NEG
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 4
75692: NEG
75693: PUSH
75694: LD_INT 3
75696: NEG
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: PUSH
75702: LD_INT 5
75704: NEG
75705: PUSH
75706: LD_INT 4
75708: NEG
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 5
75716: NEG
75717: PUSH
75718: LD_INT 5
75720: NEG
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: LD_INT 3
75728: NEG
75729: PUSH
75730: LD_INT 5
75732: NEG
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 5
75740: NEG
75741: PUSH
75742: LD_INT 3
75744: NEG
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: LD_INT 0
75752: PUSH
75753: LD_INT 3
75755: NEG
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: LD_INT 4
75766: NEG
75767: PUSH
75768: EMPTY
75769: LIST
75770: LIST
75771: PUSH
75772: LD_INT 1
75774: PUSH
75775: LD_INT 3
75777: NEG
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 1
75785: PUSH
75786: LD_INT 2
75788: NEG
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 0
75796: PUSH
75797: LD_INT 2
75799: NEG
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 1
75807: NEG
75808: PUSH
75809: LD_INT 3
75811: NEG
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 1
75819: NEG
75820: PUSH
75821: LD_INT 4
75823: NEG
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 2
75831: PUSH
75832: LD_INT 2
75834: NEG
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: LD_INT 2
75842: NEG
75843: PUSH
75844: LD_INT 4
75846: NEG
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: PUSH
75852: LD_INT 4
75854: PUSH
75855: LD_INT 0
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 4
75864: PUSH
75865: LD_INT 1
75867: NEG
75868: PUSH
75869: EMPTY
75870: LIST
75871: LIST
75872: PUSH
75873: LD_INT 5
75875: PUSH
75876: LD_INT 0
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 5
75885: PUSH
75886: LD_INT 1
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: LD_INT 4
75895: PUSH
75896: LD_INT 1
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: LD_INT 3
75905: PUSH
75906: LD_INT 0
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 3
75915: PUSH
75916: LD_INT 1
75918: NEG
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 3
75926: PUSH
75927: LD_INT 2
75929: NEG
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 5
75937: PUSH
75938: LD_INT 2
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75992: LD_ADDR_VAR 0 32
75996: PUSH
75997: LD_INT 4
75999: NEG
76000: PUSH
76001: LD_INT 0
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 4
76010: NEG
76011: PUSH
76012: LD_INT 1
76014: NEG
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: PUSH
76020: LD_INT 3
76022: NEG
76023: PUSH
76024: LD_INT 0
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: PUSH
76031: LD_INT 3
76033: NEG
76034: PUSH
76035: LD_INT 1
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 4
76044: NEG
76045: PUSH
76046: LD_INT 1
76048: PUSH
76049: EMPTY
76050: LIST
76051: LIST
76052: PUSH
76053: LD_INT 5
76055: NEG
76056: PUSH
76057: LD_INT 0
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: PUSH
76064: LD_INT 5
76066: NEG
76067: PUSH
76068: LD_INT 1
76070: NEG
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: PUSH
76076: LD_INT 5
76078: NEG
76079: PUSH
76080: LD_INT 2
76082: NEG
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: PUSH
76088: LD_INT 3
76090: NEG
76091: PUSH
76092: LD_INT 2
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: LD_INT 3
76101: NEG
76102: PUSH
76103: LD_INT 3
76105: NEG
76106: PUSH
76107: EMPTY
76108: LIST
76109: LIST
76110: PUSH
76111: LD_INT 3
76113: NEG
76114: PUSH
76115: LD_INT 4
76117: NEG
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: PUSH
76123: LD_INT 2
76125: NEG
76126: PUSH
76127: LD_INT 3
76129: NEG
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PUSH
76135: LD_INT 2
76137: NEG
76138: PUSH
76139: LD_INT 2
76141: NEG
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 3
76149: NEG
76150: PUSH
76151: LD_INT 2
76153: NEG
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 4
76161: NEG
76162: PUSH
76163: LD_INT 3
76165: NEG
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: PUSH
76171: LD_INT 4
76173: NEG
76174: PUSH
76175: LD_INT 4
76177: NEG
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PUSH
76183: LD_INT 2
76185: NEG
76186: PUSH
76187: LD_INT 4
76189: NEG
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 4
76197: NEG
76198: PUSH
76199: LD_INT 2
76201: NEG
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 0
76209: PUSH
76210: LD_INT 4
76212: NEG
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_INT 0
76220: PUSH
76221: LD_INT 5
76223: NEG
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 1
76231: PUSH
76232: LD_INT 4
76234: NEG
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: LD_INT 1
76242: PUSH
76243: LD_INT 3
76245: NEG
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 0
76253: PUSH
76254: LD_INT 3
76256: NEG
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 1
76264: NEG
76265: PUSH
76266: LD_INT 4
76268: NEG
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: PUSH
76274: LD_INT 1
76276: NEG
76277: PUSH
76278: LD_INT 5
76280: NEG
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 2
76288: PUSH
76289: LD_INT 3
76291: NEG
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: LD_INT 2
76299: NEG
76300: PUSH
76301: LD_INT 5
76303: NEG
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PUSH
76309: LD_INT 3
76311: PUSH
76312: LD_INT 0
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 3
76321: PUSH
76322: LD_INT 1
76324: NEG
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 4
76332: PUSH
76333: LD_INT 0
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 4
76342: PUSH
76343: LD_INT 1
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: LD_INT 3
76352: PUSH
76353: LD_INT 1
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: LD_INT 2
76362: PUSH
76363: LD_INT 0
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: PUSH
76370: LD_INT 2
76372: PUSH
76373: LD_INT 1
76375: NEG
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: LD_INT 2
76383: PUSH
76384: LD_INT 2
76386: NEG
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 4
76394: PUSH
76395: LD_INT 2
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PUSH
76402: LD_INT 4
76404: PUSH
76405: LD_INT 4
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 4
76414: PUSH
76415: LD_INT 3
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PUSH
76422: LD_INT 5
76424: PUSH
76425: LD_INT 4
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PUSH
76432: LD_INT 5
76434: PUSH
76435: LD_INT 5
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: LD_INT 4
76444: PUSH
76445: LD_INT 5
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 3
76454: PUSH
76455: LD_INT 4
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: PUSH
76462: LD_INT 3
76464: PUSH
76465: LD_INT 3
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 5
76474: PUSH
76475: LD_INT 3
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 3
76484: PUSH
76485: LD_INT 5
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76539: LD_ADDR_VAR 0 33
76543: PUSH
76544: LD_INT 4
76546: NEG
76547: PUSH
76548: LD_INT 4
76550: NEG
76551: PUSH
76552: EMPTY
76553: LIST
76554: LIST
76555: PUSH
76556: LD_INT 4
76558: NEG
76559: PUSH
76560: LD_INT 5
76562: NEG
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: PUSH
76568: LD_INT 3
76570: NEG
76571: PUSH
76572: LD_INT 4
76574: NEG
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PUSH
76580: LD_INT 3
76582: NEG
76583: PUSH
76584: LD_INT 3
76586: NEG
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 4
76594: NEG
76595: PUSH
76596: LD_INT 3
76598: NEG
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 5
76606: NEG
76607: PUSH
76608: LD_INT 4
76610: NEG
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: LD_INT 5
76618: NEG
76619: PUSH
76620: LD_INT 5
76622: NEG
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: PUSH
76628: LD_INT 3
76630: NEG
76631: PUSH
76632: LD_INT 5
76634: NEG
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 5
76642: NEG
76643: PUSH
76644: LD_INT 3
76646: NEG
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: LD_INT 0
76654: PUSH
76655: LD_INT 3
76657: NEG
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: LD_INT 0
76665: PUSH
76666: LD_INT 4
76668: NEG
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 1
76676: PUSH
76677: LD_INT 3
76679: NEG
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 1
76687: PUSH
76688: LD_INT 2
76690: NEG
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 0
76698: PUSH
76699: LD_INT 2
76701: NEG
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: LD_INT 1
76709: NEG
76710: PUSH
76711: LD_INT 3
76713: NEG
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: PUSH
76719: LD_INT 1
76721: NEG
76722: PUSH
76723: LD_INT 4
76725: NEG
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PUSH
76731: LD_INT 2
76733: PUSH
76734: LD_INT 2
76736: NEG
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 2
76744: NEG
76745: PUSH
76746: LD_INT 4
76748: NEG
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: LD_INT 4
76756: PUSH
76757: LD_INT 0
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: PUSH
76764: LD_INT 4
76766: PUSH
76767: LD_INT 1
76769: NEG
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: LD_INT 5
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 5
76787: PUSH
76788: LD_INT 1
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: LD_INT 4
76797: PUSH
76798: LD_INT 1
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: PUSH
76805: LD_INT 3
76807: PUSH
76808: LD_INT 0
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: PUSH
76815: LD_INT 3
76817: PUSH
76818: LD_INT 1
76820: NEG
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: PUSH
76826: LD_INT 3
76828: PUSH
76829: LD_INT 2
76831: NEG
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 5
76839: PUSH
76840: LD_INT 2
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: LD_INT 3
76849: PUSH
76850: LD_INT 3
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 3
76859: PUSH
76860: LD_INT 2
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 4
76869: PUSH
76870: LD_INT 3
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 4
76879: PUSH
76880: LD_INT 4
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: LD_INT 3
76889: PUSH
76890: LD_INT 4
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 2
76899: PUSH
76900: LD_INT 3
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: LD_INT 2
76909: PUSH
76910: LD_INT 2
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 4
76919: PUSH
76920: LD_INT 2
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 2
76929: PUSH
76930: LD_INT 4
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 0
76939: PUSH
76940: LD_INT 4
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: PUSH
76947: LD_INT 0
76949: PUSH
76950: LD_INT 3
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_INT 1
76959: PUSH
76960: LD_INT 4
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: PUSH
76967: LD_INT 1
76969: PUSH
76970: LD_INT 5
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: LD_INT 0
76979: PUSH
76980: LD_INT 5
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 1
76989: NEG
76990: PUSH
76991: LD_INT 4
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 1
77000: NEG
77001: PUSH
77002: LD_INT 3
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: PUSH
77009: LD_INT 2
77011: PUSH
77012: LD_INT 5
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PUSH
77019: LD_INT 2
77021: NEG
77022: PUSH
77023: LD_INT 3
77025: PUSH
77026: EMPTY
77027: LIST
77028: LIST
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77077: LD_ADDR_VAR 0 34
77081: PUSH
77082: LD_INT 0
77084: PUSH
77085: LD_INT 4
77087: NEG
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PUSH
77093: LD_INT 0
77095: PUSH
77096: LD_INT 5
77098: NEG
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: PUSH
77104: LD_INT 1
77106: PUSH
77107: LD_INT 4
77109: NEG
77110: PUSH
77111: EMPTY
77112: LIST
77113: LIST
77114: PUSH
77115: LD_INT 1
77117: PUSH
77118: LD_INT 3
77120: NEG
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: PUSH
77126: LD_INT 0
77128: PUSH
77129: LD_INT 3
77131: NEG
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: PUSH
77137: LD_INT 1
77139: NEG
77140: PUSH
77141: LD_INT 4
77143: NEG
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 1
77151: NEG
77152: PUSH
77153: LD_INT 5
77155: NEG
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 2
77163: PUSH
77164: LD_INT 3
77166: NEG
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: PUSH
77172: LD_INT 2
77174: NEG
77175: PUSH
77176: LD_INT 5
77178: NEG
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: LD_INT 3
77186: PUSH
77187: LD_INT 0
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: LD_INT 3
77196: PUSH
77197: LD_INT 1
77199: NEG
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PUSH
77205: LD_INT 4
77207: PUSH
77208: LD_INT 0
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 4
77217: PUSH
77218: LD_INT 1
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: PUSH
77225: LD_INT 3
77227: PUSH
77228: LD_INT 1
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: PUSH
77235: LD_INT 2
77237: PUSH
77238: LD_INT 0
77240: PUSH
77241: EMPTY
77242: LIST
77243: LIST
77244: PUSH
77245: LD_INT 2
77247: PUSH
77248: LD_INT 1
77250: NEG
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: PUSH
77256: LD_INT 2
77258: PUSH
77259: LD_INT 2
77261: NEG
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 4
77269: PUSH
77270: LD_INT 2
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 4
77279: PUSH
77280: LD_INT 4
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 4
77289: PUSH
77290: LD_INT 3
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: LD_INT 5
77299: PUSH
77300: LD_INT 4
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 5
77309: PUSH
77310: LD_INT 5
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: LD_INT 4
77319: PUSH
77320: LD_INT 5
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: LD_INT 3
77329: PUSH
77330: LD_INT 4
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: PUSH
77337: LD_INT 3
77339: PUSH
77340: LD_INT 3
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 5
77349: PUSH
77350: LD_INT 3
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PUSH
77357: LD_INT 3
77359: PUSH
77360: LD_INT 5
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 0
77369: PUSH
77370: LD_INT 3
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: PUSH
77377: LD_INT 0
77379: PUSH
77380: LD_INT 2
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: LD_INT 1
77389: PUSH
77390: LD_INT 3
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 1
77399: PUSH
77400: LD_INT 4
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 0
77409: PUSH
77410: LD_INT 4
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: LD_INT 1
77419: NEG
77420: PUSH
77421: LD_INT 3
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PUSH
77428: LD_INT 1
77430: NEG
77431: PUSH
77432: LD_INT 2
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: PUSH
77439: LD_INT 2
77441: PUSH
77442: LD_INT 4
77444: PUSH
77445: EMPTY
77446: LIST
77447: LIST
77448: PUSH
77449: LD_INT 2
77451: NEG
77452: PUSH
77453: LD_INT 2
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: LD_INT 4
77462: NEG
77463: PUSH
77464: LD_INT 0
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: PUSH
77471: LD_INT 4
77473: NEG
77474: PUSH
77475: LD_INT 1
77477: NEG
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 3
77485: NEG
77486: PUSH
77487: LD_INT 0
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 3
77496: NEG
77497: PUSH
77498: LD_INT 1
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PUSH
77505: LD_INT 4
77507: NEG
77508: PUSH
77509: LD_INT 1
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: LD_INT 5
77518: NEG
77519: PUSH
77520: LD_INT 0
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: PUSH
77527: LD_INT 5
77529: NEG
77530: PUSH
77531: LD_INT 1
77533: NEG
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_INT 5
77541: NEG
77542: PUSH
77543: LD_INT 2
77545: NEG
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PUSH
77551: LD_INT 3
77553: NEG
77554: PUSH
77555: LD_INT 2
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: LIST
77570: LIST
77571: LIST
77572: LIST
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: LIST
77584: LIST
77585: LIST
77586: LIST
77587: LIST
77588: LIST
77589: LIST
77590: LIST
77591: LIST
77592: LIST
77593: LIST
77594: LIST
77595: LIST
77596: LIST
77597: LIST
77598: LIST
77599: LIST
77600: LIST
77601: LIST
77602: LIST
77603: LIST
77604: LIST
77605: LIST
77606: LIST
77607: LIST
77608: ST_TO_ADDR
// end ; end ;
77609: GO 77612
77611: POP
// case btype of b_depot , b_warehouse :
77612: LD_VAR 0 1
77616: PUSH
77617: LD_INT 0
77619: DOUBLE
77620: EQUAL
77621: IFTRUE 77631
77623: LD_INT 1
77625: DOUBLE
77626: EQUAL
77627: IFTRUE 77631
77629: GO 77832
77631: POP
// case nation of nation_american :
77632: LD_VAR 0 5
77636: PUSH
77637: LD_INT 1
77639: DOUBLE
77640: EQUAL
77641: IFTRUE 77645
77643: GO 77701
77645: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
77646: LD_ADDR_VAR 0 9
77650: PUSH
77651: LD_VAR 0 11
77655: PUSH
77656: LD_VAR 0 12
77660: PUSH
77661: LD_VAR 0 13
77665: PUSH
77666: LD_VAR 0 14
77670: PUSH
77671: LD_VAR 0 15
77675: PUSH
77676: LD_VAR 0 16
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: LIST
77685: LIST
77686: LIST
77687: LIST
77688: PUSH
77689: LD_VAR 0 4
77693: PUSH
77694: LD_INT 1
77696: PLUS
77697: ARRAY
77698: ST_TO_ADDR
77699: GO 77830
77701: LD_INT 2
77703: DOUBLE
77704: EQUAL
77705: IFTRUE 77709
77707: GO 77765
77709: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77710: LD_ADDR_VAR 0 9
77714: PUSH
77715: LD_VAR 0 17
77719: PUSH
77720: LD_VAR 0 18
77724: PUSH
77725: LD_VAR 0 19
77729: PUSH
77730: LD_VAR 0 20
77734: PUSH
77735: LD_VAR 0 21
77739: PUSH
77740: LD_VAR 0 22
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: LIST
77752: PUSH
77753: LD_VAR 0 4
77757: PUSH
77758: LD_INT 1
77760: PLUS
77761: ARRAY
77762: ST_TO_ADDR
77763: GO 77830
77765: LD_INT 3
77767: DOUBLE
77768: EQUAL
77769: IFTRUE 77773
77771: GO 77829
77773: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77774: LD_ADDR_VAR 0 9
77778: PUSH
77779: LD_VAR 0 23
77783: PUSH
77784: LD_VAR 0 24
77788: PUSH
77789: LD_VAR 0 25
77793: PUSH
77794: LD_VAR 0 26
77798: PUSH
77799: LD_VAR 0 27
77803: PUSH
77804: LD_VAR 0 28
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: LIST
77815: LIST
77816: PUSH
77817: LD_VAR 0 4
77821: PUSH
77822: LD_INT 1
77824: PLUS
77825: ARRAY
77826: ST_TO_ADDR
77827: GO 77830
77829: POP
77830: GO 78385
77832: LD_INT 2
77834: DOUBLE
77835: EQUAL
77836: IFTRUE 77846
77838: LD_INT 3
77840: DOUBLE
77841: EQUAL
77842: IFTRUE 77846
77844: GO 77902
77846: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
77847: LD_ADDR_VAR 0 9
77851: PUSH
77852: LD_VAR 0 29
77856: PUSH
77857: LD_VAR 0 30
77861: PUSH
77862: LD_VAR 0 31
77866: PUSH
77867: LD_VAR 0 32
77871: PUSH
77872: LD_VAR 0 33
77876: PUSH
77877: LD_VAR 0 34
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: PUSH
77890: LD_VAR 0 4
77894: PUSH
77895: LD_INT 1
77897: PLUS
77898: ARRAY
77899: ST_TO_ADDR
77900: GO 78385
77902: LD_INT 16
77904: DOUBLE
77905: EQUAL
77906: IFTRUE 77964
77908: LD_INT 17
77910: DOUBLE
77911: EQUAL
77912: IFTRUE 77964
77914: LD_INT 18
77916: DOUBLE
77917: EQUAL
77918: IFTRUE 77964
77920: LD_INT 19
77922: DOUBLE
77923: EQUAL
77924: IFTRUE 77964
77926: LD_INT 22
77928: DOUBLE
77929: EQUAL
77930: IFTRUE 77964
77932: LD_INT 20
77934: DOUBLE
77935: EQUAL
77936: IFTRUE 77964
77938: LD_INT 21
77940: DOUBLE
77941: EQUAL
77942: IFTRUE 77964
77944: LD_INT 23
77946: DOUBLE
77947: EQUAL
77948: IFTRUE 77964
77950: LD_INT 24
77952: DOUBLE
77953: EQUAL
77954: IFTRUE 77964
77956: LD_INT 25
77958: DOUBLE
77959: EQUAL
77960: IFTRUE 77964
77962: GO 78020
77964: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77965: LD_ADDR_VAR 0 9
77969: PUSH
77970: LD_VAR 0 35
77974: PUSH
77975: LD_VAR 0 36
77979: PUSH
77980: LD_VAR 0 37
77984: PUSH
77985: LD_VAR 0 38
77989: PUSH
77990: LD_VAR 0 39
77994: PUSH
77995: LD_VAR 0 40
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: LIST
78006: LIST
78007: PUSH
78008: LD_VAR 0 4
78012: PUSH
78013: LD_INT 1
78015: PLUS
78016: ARRAY
78017: ST_TO_ADDR
78018: GO 78385
78020: LD_INT 6
78022: DOUBLE
78023: EQUAL
78024: IFTRUE 78076
78026: LD_INT 7
78028: DOUBLE
78029: EQUAL
78030: IFTRUE 78076
78032: LD_INT 8
78034: DOUBLE
78035: EQUAL
78036: IFTRUE 78076
78038: LD_INT 13
78040: DOUBLE
78041: EQUAL
78042: IFTRUE 78076
78044: LD_INT 12
78046: DOUBLE
78047: EQUAL
78048: IFTRUE 78076
78050: LD_INT 15
78052: DOUBLE
78053: EQUAL
78054: IFTRUE 78076
78056: LD_INT 11
78058: DOUBLE
78059: EQUAL
78060: IFTRUE 78076
78062: LD_INT 14
78064: DOUBLE
78065: EQUAL
78066: IFTRUE 78076
78068: LD_INT 10
78070: DOUBLE
78071: EQUAL
78072: IFTRUE 78076
78074: GO 78132
78076: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
78077: LD_ADDR_VAR 0 9
78081: PUSH
78082: LD_VAR 0 41
78086: PUSH
78087: LD_VAR 0 42
78091: PUSH
78092: LD_VAR 0 43
78096: PUSH
78097: LD_VAR 0 44
78101: PUSH
78102: LD_VAR 0 45
78106: PUSH
78107: LD_VAR 0 46
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: PUSH
78120: LD_VAR 0 4
78124: PUSH
78125: LD_INT 1
78127: PLUS
78128: ARRAY
78129: ST_TO_ADDR
78130: GO 78385
78132: LD_INT 36
78134: DOUBLE
78135: EQUAL
78136: IFTRUE 78140
78138: GO 78196
78140: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78141: LD_ADDR_VAR 0 9
78145: PUSH
78146: LD_VAR 0 47
78150: PUSH
78151: LD_VAR 0 48
78155: PUSH
78156: LD_VAR 0 49
78160: PUSH
78161: LD_VAR 0 50
78165: PUSH
78166: LD_VAR 0 51
78170: PUSH
78171: LD_VAR 0 52
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: LIST
78180: LIST
78181: LIST
78182: LIST
78183: PUSH
78184: LD_VAR 0 4
78188: PUSH
78189: LD_INT 1
78191: PLUS
78192: ARRAY
78193: ST_TO_ADDR
78194: GO 78385
78196: LD_INT 4
78198: DOUBLE
78199: EQUAL
78200: IFTRUE 78222
78202: LD_INT 5
78204: DOUBLE
78205: EQUAL
78206: IFTRUE 78222
78208: LD_INT 34
78210: DOUBLE
78211: EQUAL
78212: IFTRUE 78222
78214: LD_INT 37
78216: DOUBLE
78217: EQUAL
78218: IFTRUE 78222
78220: GO 78278
78222: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78223: LD_ADDR_VAR 0 9
78227: PUSH
78228: LD_VAR 0 53
78232: PUSH
78233: LD_VAR 0 54
78237: PUSH
78238: LD_VAR 0 55
78242: PUSH
78243: LD_VAR 0 56
78247: PUSH
78248: LD_VAR 0 57
78252: PUSH
78253: LD_VAR 0 58
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: PUSH
78266: LD_VAR 0 4
78270: PUSH
78271: LD_INT 1
78273: PLUS
78274: ARRAY
78275: ST_TO_ADDR
78276: GO 78385
78278: LD_INT 31
78280: DOUBLE
78281: EQUAL
78282: IFTRUE 78328
78284: LD_INT 32
78286: DOUBLE
78287: EQUAL
78288: IFTRUE 78328
78290: LD_INT 33
78292: DOUBLE
78293: EQUAL
78294: IFTRUE 78328
78296: LD_INT 27
78298: DOUBLE
78299: EQUAL
78300: IFTRUE 78328
78302: LD_INT 26
78304: DOUBLE
78305: EQUAL
78306: IFTRUE 78328
78308: LD_INT 28
78310: DOUBLE
78311: EQUAL
78312: IFTRUE 78328
78314: LD_INT 29
78316: DOUBLE
78317: EQUAL
78318: IFTRUE 78328
78320: LD_INT 30
78322: DOUBLE
78323: EQUAL
78324: IFTRUE 78328
78326: GO 78384
78328: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
78329: LD_ADDR_VAR 0 9
78333: PUSH
78334: LD_VAR 0 59
78338: PUSH
78339: LD_VAR 0 60
78343: PUSH
78344: LD_VAR 0 61
78348: PUSH
78349: LD_VAR 0 62
78353: PUSH
78354: LD_VAR 0 63
78358: PUSH
78359: LD_VAR 0 64
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: LIST
78368: LIST
78369: LIST
78370: LIST
78371: PUSH
78372: LD_VAR 0 4
78376: PUSH
78377: LD_INT 1
78379: PLUS
78380: ARRAY
78381: ST_TO_ADDR
78382: GO 78385
78384: POP
// temp_list2 = [ ] ;
78385: LD_ADDR_VAR 0 10
78389: PUSH
78390: EMPTY
78391: ST_TO_ADDR
// for i in temp_list do
78392: LD_ADDR_VAR 0 8
78396: PUSH
78397: LD_VAR 0 9
78401: PUSH
78402: FOR_IN
78403: IFFALSE 78455
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78405: LD_ADDR_VAR 0 10
78409: PUSH
78410: LD_VAR 0 10
78414: PUSH
78415: LD_VAR 0 8
78419: PUSH
78420: LD_INT 1
78422: ARRAY
78423: PUSH
78424: LD_VAR 0 2
78428: PLUS
78429: PUSH
78430: LD_VAR 0 8
78434: PUSH
78435: LD_INT 2
78437: ARRAY
78438: PUSH
78439: LD_VAR 0 3
78443: PLUS
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: EMPTY
78450: LIST
78451: ADD
78452: ST_TO_ADDR
78453: GO 78402
78455: POP
78456: POP
// result = temp_list2 ;
78457: LD_ADDR_VAR 0 7
78461: PUSH
78462: LD_VAR 0 10
78466: ST_TO_ADDR
// end ;
78467: LD_VAR 0 7
78471: RET
// export function EnemyInRange ( unit , dist ) ; begin
78472: LD_INT 0
78474: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78475: LD_ADDR_VAR 0 3
78479: PUSH
78480: LD_VAR 0 1
78484: PPUSH
78485: CALL_OW 255
78489: PPUSH
78490: LD_VAR 0 1
78494: PPUSH
78495: CALL_OW 250
78499: PPUSH
78500: LD_VAR 0 1
78504: PPUSH
78505: CALL_OW 251
78509: PPUSH
78510: LD_VAR 0 2
78514: PPUSH
78515: CALL 52576 0 4
78519: PUSH
78520: LD_INT 4
78522: ARRAY
78523: ST_TO_ADDR
// end ;
78524: LD_VAR 0 3
78528: RET
// export function PlayerSeeMe ( unit ) ; begin
78529: LD_INT 0
78531: PPUSH
// result := See ( your_side , unit ) ;
78532: LD_ADDR_VAR 0 2
78536: PUSH
78537: LD_OWVAR 2
78541: PPUSH
78542: LD_VAR 0 1
78546: PPUSH
78547: CALL_OW 292
78551: ST_TO_ADDR
// end ;
78552: LD_VAR 0 2
78556: RET
// export function ReverseDir ( unit ) ; begin
78557: LD_INT 0
78559: PPUSH
// if not unit then
78560: LD_VAR 0 1
78564: NOT
78565: IFFALSE 78569
// exit ;
78567: GO 78592
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
78569: LD_ADDR_VAR 0 2
78573: PUSH
78574: LD_VAR 0 1
78578: PPUSH
78579: CALL_OW 254
78583: PUSH
78584: LD_INT 3
78586: PLUS
78587: PUSH
78588: LD_INT 6
78590: MOD
78591: ST_TO_ADDR
// end ;
78592: LD_VAR 0 2
78596: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78597: LD_INT 0
78599: PPUSH
78600: PPUSH
78601: PPUSH
78602: PPUSH
78603: PPUSH
// if not hexes then
78604: LD_VAR 0 2
78608: NOT
78609: IFFALSE 78613
// exit ;
78611: GO 78761
// dist := 9999 ;
78613: LD_ADDR_VAR 0 5
78617: PUSH
78618: LD_INT 9999
78620: ST_TO_ADDR
// for i = 1 to hexes do
78621: LD_ADDR_VAR 0 4
78625: PUSH
78626: DOUBLE
78627: LD_INT 1
78629: DEC
78630: ST_TO_ADDR
78631: LD_VAR 0 2
78635: PUSH
78636: FOR_TO
78637: IFFALSE 78749
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78639: LD_VAR 0 1
78643: PPUSH
78644: LD_VAR 0 2
78648: PUSH
78649: LD_VAR 0 4
78653: ARRAY
78654: PUSH
78655: LD_INT 1
78657: ARRAY
78658: PPUSH
78659: LD_VAR 0 2
78663: PUSH
78664: LD_VAR 0 4
78668: ARRAY
78669: PUSH
78670: LD_INT 2
78672: ARRAY
78673: PPUSH
78674: CALL_OW 297
78678: PUSH
78679: LD_VAR 0 5
78683: LESS
78684: IFFALSE 78747
// begin hex := hexes [ i ] ;
78686: LD_ADDR_VAR 0 7
78690: PUSH
78691: LD_VAR 0 2
78695: PUSH
78696: LD_VAR 0 4
78700: ARRAY
78701: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78702: LD_ADDR_VAR 0 5
78706: PUSH
78707: LD_VAR 0 1
78711: PPUSH
78712: LD_VAR 0 2
78716: PUSH
78717: LD_VAR 0 4
78721: ARRAY
78722: PUSH
78723: LD_INT 1
78725: ARRAY
78726: PPUSH
78727: LD_VAR 0 2
78731: PUSH
78732: LD_VAR 0 4
78736: ARRAY
78737: PUSH
78738: LD_INT 2
78740: ARRAY
78741: PPUSH
78742: CALL_OW 297
78746: ST_TO_ADDR
// end ; end ;
78747: GO 78636
78749: POP
78750: POP
// result := hex ;
78751: LD_ADDR_VAR 0 3
78755: PUSH
78756: LD_VAR 0 7
78760: ST_TO_ADDR
// end ;
78761: LD_VAR 0 3
78765: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78766: LD_INT 0
78768: PPUSH
78769: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78770: LD_VAR 0 1
78774: NOT
78775: PUSH
78776: LD_VAR 0 1
78780: PUSH
78781: LD_INT 21
78783: PUSH
78784: LD_INT 2
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: PUSH
78791: LD_INT 23
78793: PUSH
78794: LD_INT 2
78796: PUSH
78797: EMPTY
78798: LIST
78799: LIST
78800: PUSH
78801: EMPTY
78802: LIST
78803: LIST
78804: PPUSH
78805: CALL_OW 69
78809: IN
78810: NOT
78811: OR
78812: IFFALSE 78816
// exit ;
78814: GO 78863
// for i = 1 to 3 do
78816: LD_ADDR_VAR 0 3
78820: PUSH
78821: DOUBLE
78822: LD_INT 1
78824: DEC
78825: ST_TO_ADDR
78826: LD_INT 3
78828: PUSH
78829: FOR_TO
78830: IFFALSE 78861
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
78832: LD_VAR 0 1
78836: PPUSH
78837: CALL_OW 250
78841: PPUSH
78842: LD_VAR 0 1
78846: PPUSH
78847: CALL_OW 251
78851: PPUSH
78852: LD_INT 1
78854: PPUSH
78855: CALL_OW 453
78859: GO 78829
78861: POP
78862: POP
// end ;
78863: LD_VAR 0 2
78867: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
78868: LD_INT 0
78870: PPUSH
78871: PPUSH
78872: PPUSH
78873: PPUSH
78874: PPUSH
78875: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
78876: LD_VAR 0 1
78880: NOT
78881: PUSH
78882: LD_VAR 0 2
78886: NOT
78887: OR
78888: PUSH
78889: LD_VAR 0 1
78893: PPUSH
78894: CALL_OW 314
78898: OR
78899: IFFALSE 78903
// exit ;
78901: GO 79344
// x := GetX ( enemy_unit ) ;
78903: LD_ADDR_VAR 0 7
78907: PUSH
78908: LD_VAR 0 2
78912: PPUSH
78913: CALL_OW 250
78917: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
78918: LD_ADDR_VAR 0 8
78922: PUSH
78923: LD_VAR 0 2
78927: PPUSH
78928: CALL_OW 251
78932: ST_TO_ADDR
// if not x or not y then
78933: LD_VAR 0 7
78937: NOT
78938: PUSH
78939: LD_VAR 0 8
78943: NOT
78944: OR
78945: IFFALSE 78949
// exit ;
78947: GO 79344
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78949: LD_ADDR_VAR 0 6
78953: PUSH
78954: LD_VAR 0 7
78958: PPUSH
78959: LD_INT 0
78961: PPUSH
78962: LD_INT 4
78964: PPUSH
78965: CALL_OW 272
78969: PUSH
78970: LD_VAR 0 8
78974: PPUSH
78975: LD_INT 0
78977: PPUSH
78978: LD_INT 4
78980: PPUSH
78981: CALL_OW 273
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_VAR 0 7
78994: PPUSH
78995: LD_INT 1
78997: PPUSH
78998: LD_INT 4
79000: PPUSH
79001: CALL_OW 272
79005: PUSH
79006: LD_VAR 0 8
79010: PPUSH
79011: LD_INT 1
79013: PPUSH
79014: LD_INT 4
79016: PPUSH
79017: CALL_OW 273
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: PUSH
79026: LD_VAR 0 7
79030: PPUSH
79031: LD_INT 2
79033: PPUSH
79034: LD_INT 4
79036: PPUSH
79037: CALL_OW 272
79041: PUSH
79042: LD_VAR 0 8
79046: PPUSH
79047: LD_INT 2
79049: PPUSH
79050: LD_INT 4
79052: PPUSH
79053: CALL_OW 273
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_VAR 0 7
79066: PPUSH
79067: LD_INT 3
79069: PPUSH
79070: LD_INT 4
79072: PPUSH
79073: CALL_OW 272
79077: PUSH
79078: LD_VAR 0 8
79082: PPUSH
79083: LD_INT 3
79085: PPUSH
79086: LD_INT 4
79088: PPUSH
79089: CALL_OW 273
79093: PUSH
79094: EMPTY
79095: LIST
79096: LIST
79097: PUSH
79098: LD_VAR 0 7
79102: PPUSH
79103: LD_INT 4
79105: PPUSH
79106: LD_INT 4
79108: PPUSH
79109: CALL_OW 272
79113: PUSH
79114: LD_VAR 0 8
79118: PPUSH
79119: LD_INT 4
79121: PPUSH
79122: LD_INT 4
79124: PPUSH
79125: CALL_OW 273
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PUSH
79134: LD_VAR 0 7
79138: PPUSH
79139: LD_INT 5
79141: PPUSH
79142: LD_INT 4
79144: PPUSH
79145: CALL_OW 272
79149: PUSH
79150: LD_VAR 0 8
79154: PPUSH
79155: LD_INT 5
79157: PPUSH
79158: LD_INT 4
79160: PPUSH
79161: CALL_OW 273
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: LIST
79174: LIST
79175: LIST
79176: LIST
79177: ST_TO_ADDR
// for i = tmp downto 1 do
79178: LD_ADDR_VAR 0 4
79182: PUSH
79183: DOUBLE
79184: LD_VAR 0 6
79188: INC
79189: ST_TO_ADDR
79190: LD_INT 1
79192: PUSH
79193: FOR_DOWNTO
79194: IFFALSE 79295
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79196: LD_VAR 0 6
79200: PUSH
79201: LD_VAR 0 4
79205: ARRAY
79206: PUSH
79207: LD_INT 1
79209: ARRAY
79210: PPUSH
79211: LD_VAR 0 6
79215: PUSH
79216: LD_VAR 0 4
79220: ARRAY
79221: PUSH
79222: LD_INT 2
79224: ARRAY
79225: PPUSH
79226: CALL_OW 488
79230: NOT
79231: PUSH
79232: LD_VAR 0 6
79236: PUSH
79237: LD_VAR 0 4
79241: ARRAY
79242: PUSH
79243: LD_INT 1
79245: ARRAY
79246: PPUSH
79247: LD_VAR 0 6
79251: PUSH
79252: LD_VAR 0 4
79256: ARRAY
79257: PUSH
79258: LD_INT 2
79260: ARRAY
79261: PPUSH
79262: CALL_OW 428
79266: PUSH
79267: LD_INT 0
79269: NONEQUAL
79270: OR
79271: IFFALSE 79293
// tmp := Delete ( tmp , i ) ;
79273: LD_ADDR_VAR 0 6
79277: PUSH
79278: LD_VAR 0 6
79282: PPUSH
79283: LD_VAR 0 4
79287: PPUSH
79288: CALL_OW 3
79292: ST_TO_ADDR
79293: GO 79193
79295: POP
79296: POP
// j := GetClosestHex ( unit , tmp ) ;
79297: LD_ADDR_VAR 0 5
79301: PUSH
79302: LD_VAR 0 1
79306: PPUSH
79307: LD_VAR 0 6
79311: PPUSH
79312: CALL 78597 0 2
79316: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79317: LD_VAR 0 1
79321: PPUSH
79322: LD_VAR 0 5
79326: PUSH
79327: LD_INT 1
79329: ARRAY
79330: PPUSH
79331: LD_VAR 0 5
79335: PUSH
79336: LD_INT 2
79338: ARRAY
79339: PPUSH
79340: CALL_OW 111
// end ;
79344: LD_VAR 0 3
79348: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79349: LD_INT 0
79351: PPUSH
79352: PPUSH
79353: PPUSH
// uc_side = 0 ;
79354: LD_ADDR_OWVAR 20
79358: PUSH
79359: LD_INT 0
79361: ST_TO_ADDR
// uc_nation = 0 ;
79362: LD_ADDR_OWVAR 21
79366: PUSH
79367: LD_INT 0
79369: ST_TO_ADDR
// InitHc_All ( ) ;
79370: CALL_OW 584
// InitVc ;
79374: CALL_OW 20
// if mastodonts then
79378: LD_VAR 0 6
79382: IFFALSE 79449
// for i = 1 to mastodonts do
79384: LD_ADDR_VAR 0 11
79388: PUSH
79389: DOUBLE
79390: LD_INT 1
79392: DEC
79393: ST_TO_ADDR
79394: LD_VAR 0 6
79398: PUSH
79399: FOR_TO
79400: IFFALSE 79447
// begin vc_chassis := 31 ;
79402: LD_ADDR_OWVAR 37
79406: PUSH
79407: LD_INT 31
79409: ST_TO_ADDR
// vc_control := control_rider ;
79410: LD_ADDR_OWVAR 38
79414: PUSH
79415: LD_INT 4
79417: ST_TO_ADDR
// animal := CreateVehicle ;
79418: LD_ADDR_VAR 0 12
79422: PUSH
79423: CALL_OW 45
79427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79428: LD_VAR 0 12
79432: PPUSH
79433: LD_VAR 0 8
79437: PPUSH
79438: LD_INT 0
79440: PPUSH
79441: CALL 81637 0 3
// end ;
79445: GO 79399
79447: POP
79448: POP
// if horses then
79449: LD_VAR 0 5
79453: IFFALSE 79520
// for i = 1 to horses do
79455: LD_ADDR_VAR 0 11
79459: PUSH
79460: DOUBLE
79461: LD_INT 1
79463: DEC
79464: ST_TO_ADDR
79465: LD_VAR 0 5
79469: PUSH
79470: FOR_TO
79471: IFFALSE 79518
// begin hc_class := 21 ;
79473: LD_ADDR_OWVAR 28
79477: PUSH
79478: LD_INT 21
79480: ST_TO_ADDR
// hc_gallery :=  ;
79481: LD_ADDR_OWVAR 33
79485: PUSH
79486: LD_STRING 
79488: ST_TO_ADDR
// animal := CreateHuman ;
79489: LD_ADDR_VAR 0 12
79493: PUSH
79494: CALL_OW 44
79498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79499: LD_VAR 0 12
79503: PPUSH
79504: LD_VAR 0 8
79508: PPUSH
79509: LD_INT 0
79511: PPUSH
79512: CALL 81637 0 3
// end ;
79516: GO 79470
79518: POP
79519: POP
// if birds then
79520: LD_VAR 0 1
79524: IFFALSE 79591
// for i = 1 to birds do
79526: LD_ADDR_VAR 0 11
79530: PUSH
79531: DOUBLE
79532: LD_INT 1
79534: DEC
79535: ST_TO_ADDR
79536: LD_VAR 0 1
79540: PUSH
79541: FOR_TO
79542: IFFALSE 79589
// begin hc_class = 18 ;
79544: LD_ADDR_OWVAR 28
79548: PUSH
79549: LD_INT 18
79551: ST_TO_ADDR
// hc_gallery =  ;
79552: LD_ADDR_OWVAR 33
79556: PUSH
79557: LD_STRING 
79559: ST_TO_ADDR
// animal := CreateHuman ;
79560: LD_ADDR_VAR 0 12
79564: PUSH
79565: CALL_OW 44
79569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79570: LD_VAR 0 12
79574: PPUSH
79575: LD_VAR 0 8
79579: PPUSH
79580: LD_INT 0
79582: PPUSH
79583: CALL 81637 0 3
// end ;
79587: GO 79541
79589: POP
79590: POP
// if tigers then
79591: LD_VAR 0 2
79595: IFFALSE 79679
// for i = 1 to tigers do
79597: LD_ADDR_VAR 0 11
79601: PUSH
79602: DOUBLE
79603: LD_INT 1
79605: DEC
79606: ST_TO_ADDR
79607: LD_VAR 0 2
79611: PUSH
79612: FOR_TO
79613: IFFALSE 79677
// begin hc_class = class_tiger ;
79615: LD_ADDR_OWVAR 28
79619: PUSH
79620: LD_INT 14
79622: ST_TO_ADDR
// hc_gallery =  ;
79623: LD_ADDR_OWVAR 33
79627: PUSH
79628: LD_STRING 
79630: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79631: LD_ADDR_OWVAR 35
79635: PUSH
79636: LD_INT 7
79638: NEG
79639: PPUSH
79640: LD_INT 7
79642: PPUSH
79643: CALL_OW 12
79647: ST_TO_ADDR
// animal := CreateHuman ;
79648: LD_ADDR_VAR 0 12
79652: PUSH
79653: CALL_OW 44
79657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79658: LD_VAR 0 12
79662: PPUSH
79663: LD_VAR 0 8
79667: PPUSH
79668: LD_INT 0
79670: PPUSH
79671: CALL 81637 0 3
// end ;
79675: GO 79612
79677: POP
79678: POP
// if apemans then
79679: LD_VAR 0 3
79683: IFFALSE 79806
// for i = 1 to apemans do
79685: LD_ADDR_VAR 0 11
79689: PUSH
79690: DOUBLE
79691: LD_INT 1
79693: DEC
79694: ST_TO_ADDR
79695: LD_VAR 0 3
79699: PUSH
79700: FOR_TO
79701: IFFALSE 79804
// begin hc_class = class_apeman ;
79703: LD_ADDR_OWVAR 28
79707: PUSH
79708: LD_INT 12
79710: ST_TO_ADDR
// hc_gallery =  ;
79711: LD_ADDR_OWVAR 33
79715: PUSH
79716: LD_STRING 
79718: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
79719: LD_ADDR_OWVAR 35
79723: PUSH
79724: LD_INT 5
79726: NEG
79727: PPUSH
79728: LD_INT 5
79730: PPUSH
79731: CALL_OW 12
79735: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79736: LD_ADDR_OWVAR 31
79740: PUSH
79741: LD_INT 1
79743: PPUSH
79744: LD_INT 3
79746: PPUSH
79747: CALL_OW 12
79751: PUSH
79752: LD_INT 1
79754: PPUSH
79755: LD_INT 3
79757: PPUSH
79758: CALL_OW 12
79762: PUSH
79763: LD_INT 0
79765: PUSH
79766: LD_INT 0
79768: PUSH
79769: EMPTY
79770: LIST
79771: LIST
79772: LIST
79773: LIST
79774: ST_TO_ADDR
// animal := CreateHuman ;
79775: LD_ADDR_VAR 0 12
79779: PUSH
79780: CALL_OW 44
79784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79785: LD_VAR 0 12
79789: PPUSH
79790: LD_VAR 0 8
79794: PPUSH
79795: LD_INT 0
79797: PPUSH
79798: CALL 81637 0 3
// end ;
79802: GO 79700
79804: POP
79805: POP
// if enchidnas then
79806: LD_VAR 0 4
79810: IFFALSE 79877
// for i = 1 to enchidnas do
79812: LD_ADDR_VAR 0 11
79816: PUSH
79817: DOUBLE
79818: LD_INT 1
79820: DEC
79821: ST_TO_ADDR
79822: LD_VAR 0 4
79826: PUSH
79827: FOR_TO
79828: IFFALSE 79875
// begin hc_class = 13 ;
79830: LD_ADDR_OWVAR 28
79834: PUSH
79835: LD_INT 13
79837: ST_TO_ADDR
// hc_gallery =  ;
79838: LD_ADDR_OWVAR 33
79842: PUSH
79843: LD_STRING 
79845: ST_TO_ADDR
// animal := CreateHuman ;
79846: LD_ADDR_VAR 0 12
79850: PUSH
79851: CALL_OW 44
79855: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79856: LD_VAR 0 12
79860: PPUSH
79861: LD_VAR 0 8
79865: PPUSH
79866: LD_INT 0
79868: PPUSH
79869: CALL 81637 0 3
// end ;
79873: GO 79827
79875: POP
79876: POP
// if fishes then
79877: LD_VAR 0 7
79881: IFFALSE 79948
// for i = 1 to fishes do
79883: LD_ADDR_VAR 0 11
79887: PUSH
79888: DOUBLE
79889: LD_INT 1
79891: DEC
79892: ST_TO_ADDR
79893: LD_VAR 0 7
79897: PUSH
79898: FOR_TO
79899: IFFALSE 79946
// begin hc_class = 20 ;
79901: LD_ADDR_OWVAR 28
79905: PUSH
79906: LD_INT 20
79908: ST_TO_ADDR
// hc_gallery =  ;
79909: LD_ADDR_OWVAR 33
79913: PUSH
79914: LD_STRING 
79916: ST_TO_ADDR
// animal := CreateHuman ;
79917: LD_ADDR_VAR 0 12
79921: PUSH
79922: CALL_OW 44
79926: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
79927: LD_VAR 0 12
79931: PPUSH
79932: LD_VAR 0 9
79936: PPUSH
79937: LD_INT 0
79939: PPUSH
79940: CALL 81637 0 3
// end ;
79944: GO 79898
79946: POP
79947: POP
// end ;
79948: LD_VAR 0 10
79952: RET
// export function WantHeal ( sci , unit ) ; begin
79953: LD_INT 0
79955: PPUSH
// if GetTaskList ( sci ) > 0 then
79956: LD_VAR 0 1
79960: PPUSH
79961: CALL_OW 437
79965: PUSH
79966: LD_INT 0
79968: GREATER
79969: IFFALSE 80039
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
79971: LD_VAR 0 1
79975: PPUSH
79976: CALL_OW 437
79980: PUSH
79981: LD_INT 1
79983: ARRAY
79984: PUSH
79985: LD_INT 1
79987: ARRAY
79988: PUSH
79989: LD_STRING l
79991: EQUAL
79992: PUSH
79993: LD_VAR 0 1
79997: PPUSH
79998: CALL_OW 437
80002: PUSH
80003: LD_INT 1
80005: ARRAY
80006: PUSH
80007: LD_INT 4
80009: ARRAY
80010: PUSH
80011: LD_VAR 0 2
80015: EQUAL
80016: AND
80017: IFFALSE 80029
// result := true else
80019: LD_ADDR_VAR 0 3
80023: PUSH
80024: LD_INT 1
80026: ST_TO_ADDR
80027: GO 80037
// result := false ;
80029: LD_ADDR_VAR 0 3
80033: PUSH
80034: LD_INT 0
80036: ST_TO_ADDR
// end else
80037: GO 80047
// result := false ;
80039: LD_ADDR_VAR 0 3
80043: PUSH
80044: LD_INT 0
80046: ST_TO_ADDR
// end ;
80047: LD_VAR 0 3
80051: RET
// export function HealTarget ( sci ) ; begin
80052: LD_INT 0
80054: PPUSH
// if not sci then
80055: LD_VAR 0 1
80059: NOT
80060: IFFALSE 80064
// exit ;
80062: GO 80129
// result := 0 ;
80064: LD_ADDR_VAR 0 2
80068: PUSH
80069: LD_INT 0
80071: ST_TO_ADDR
// if GetTaskList ( sci ) then
80072: LD_VAR 0 1
80076: PPUSH
80077: CALL_OW 437
80081: IFFALSE 80129
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80083: LD_VAR 0 1
80087: PPUSH
80088: CALL_OW 437
80092: PUSH
80093: LD_INT 1
80095: ARRAY
80096: PUSH
80097: LD_INT 1
80099: ARRAY
80100: PUSH
80101: LD_STRING l
80103: EQUAL
80104: IFFALSE 80129
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80106: LD_ADDR_VAR 0 2
80110: PUSH
80111: LD_VAR 0 1
80115: PPUSH
80116: CALL_OW 437
80120: PUSH
80121: LD_INT 1
80123: ARRAY
80124: PUSH
80125: LD_INT 4
80127: ARRAY
80128: ST_TO_ADDR
// end ;
80129: LD_VAR 0 2
80133: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80134: LD_INT 0
80136: PPUSH
80137: PPUSH
80138: PPUSH
80139: PPUSH
// if not base_units then
80140: LD_VAR 0 1
80144: NOT
80145: IFFALSE 80149
// exit ;
80147: GO 80236
// result := false ;
80149: LD_ADDR_VAR 0 2
80153: PUSH
80154: LD_INT 0
80156: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80157: LD_ADDR_VAR 0 5
80161: PUSH
80162: LD_VAR 0 1
80166: PPUSH
80167: LD_INT 21
80169: PUSH
80170: LD_INT 3
80172: PUSH
80173: EMPTY
80174: LIST
80175: LIST
80176: PPUSH
80177: CALL_OW 72
80181: ST_TO_ADDR
// if not tmp then
80182: LD_VAR 0 5
80186: NOT
80187: IFFALSE 80191
// exit ;
80189: GO 80236
// for i in tmp do
80191: LD_ADDR_VAR 0 3
80195: PUSH
80196: LD_VAR 0 5
80200: PUSH
80201: FOR_IN
80202: IFFALSE 80234
// begin result := EnemyInRange ( i , 22 ) ;
80204: LD_ADDR_VAR 0 2
80208: PUSH
80209: LD_VAR 0 3
80213: PPUSH
80214: LD_INT 22
80216: PPUSH
80217: CALL 78472 0 2
80221: ST_TO_ADDR
// if result then
80222: LD_VAR 0 2
80226: IFFALSE 80232
// exit ;
80228: POP
80229: POP
80230: GO 80236
// end ;
80232: GO 80201
80234: POP
80235: POP
// end ;
80236: LD_VAR 0 2
80240: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
80241: LD_INT 0
80243: PPUSH
80244: PPUSH
// if not units then
80245: LD_VAR 0 1
80249: NOT
80250: IFFALSE 80254
// exit ;
80252: GO 80324
// result := [ ] ;
80254: LD_ADDR_VAR 0 3
80258: PUSH
80259: EMPTY
80260: ST_TO_ADDR
// for i in units do
80261: LD_ADDR_VAR 0 4
80265: PUSH
80266: LD_VAR 0 1
80270: PUSH
80271: FOR_IN
80272: IFFALSE 80322
// if GetTag ( i ) = tag then
80274: LD_VAR 0 4
80278: PPUSH
80279: CALL_OW 110
80283: PUSH
80284: LD_VAR 0 2
80288: EQUAL
80289: IFFALSE 80320
// result := Insert ( result , result + 1 , i ) ;
80291: LD_ADDR_VAR 0 3
80295: PUSH
80296: LD_VAR 0 3
80300: PPUSH
80301: LD_VAR 0 3
80305: PUSH
80306: LD_INT 1
80308: PLUS
80309: PPUSH
80310: LD_VAR 0 4
80314: PPUSH
80315: CALL_OW 2
80319: ST_TO_ADDR
80320: GO 80271
80322: POP
80323: POP
// end ;
80324: LD_VAR 0 3
80328: RET
// export function IsDriver ( un ) ; begin
80329: LD_INT 0
80331: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80332: LD_ADDR_VAR 0 2
80336: PUSH
80337: LD_VAR 0 1
80341: PUSH
80342: LD_INT 55
80344: PUSH
80345: EMPTY
80346: LIST
80347: PPUSH
80348: CALL_OW 69
80352: IN
80353: ST_TO_ADDR
// end ;
80354: LD_VAR 0 2
80358: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80359: LD_INT 0
80361: PPUSH
80362: PPUSH
// list := [ ] ;
80363: LD_ADDR_VAR 0 5
80367: PUSH
80368: EMPTY
80369: ST_TO_ADDR
// case d of 0 :
80370: LD_VAR 0 3
80374: PUSH
80375: LD_INT 0
80377: DOUBLE
80378: EQUAL
80379: IFTRUE 80383
80381: GO 80516
80383: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80384: LD_ADDR_VAR 0 5
80388: PUSH
80389: LD_VAR 0 1
80393: PUSH
80394: LD_INT 4
80396: MINUS
80397: PUSH
80398: LD_VAR 0 2
80402: PUSH
80403: LD_INT 4
80405: MINUS
80406: PUSH
80407: LD_INT 2
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: LIST
80414: PUSH
80415: LD_VAR 0 1
80419: PUSH
80420: LD_INT 3
80422: MINUS
80423: PUSH
80424: LD_VAR 0 2
80428: PUSH
80429: LD_INT 1
80431: PUSH
80432: EMPTY
80433: LIST
80434: LIST
80435: LIST
80436: PUSH
80437: LD_VAR 0 1
80441: PUSH
80442: LD_INT 4
80444: PLUS
80445: PUSH
80446: LD_VAR 0 2
80450: PUSH
80451: LD_INT 4
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: LIST
80458: PUSH
80459: LD_VAR 0 1
80463: PUSH
80464: LD_INT 3
80466: PLUS
80467: PUSH
80468: LD_VAR 0 2
80472: PUSH
80473: LD_INT 3
80475: PLUS
80476: PUSH
80477: LD_INT 5
80479: PUSH
80480: EMPTY
80481: LIST
80482: LIST
80483: LIST
80484: PUSH
80485: LD_VAR 0 1
80489: PUSH
80490: LD_VAR 0 2
80494: PUSH
80495: LD_INT 4
80497: PLUS
80498: PUSH
80499: LD_INT 0
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: LIST
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: ST_TO_ADDR
// end ; 1 :
80514: GO 81214
80516: LD_INT 1
80518: DOUBLE
80519: EQUAL
80520: IFTRUE 80524
80522: GO 80657
80524: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80525: LD_ADDR_VAR 0 5
80529: PUSH
80530: LD_VAR 0 1
80534: PUSH
80535: LD_VAR 0 2
80539: PUSH
80540: LD_INT 4
80542: MINUS
80543: PUSH
80544: LD_INT 3
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: LIST
80551: PUSH
80552: LD_VAR 0 1
80556: PUSH
80557: LD_INT 3
80559: MINUS
80560: PUSH
80561: LD_VAR 0 2
80565: PUSH
80566: LD_INT 3
80568: MINUS
80569: PUSH
80570: LD_INT 2
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: LIST
80577: PUSH
80578: LD_VAR 0 1
80582: PUSH
80583: LD_INT 4
80585: MINUS
80586: PUSH
80587: LD_VAR 0 2
80591: PUSH
80592: LD_INT 1
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: LIST
80599: PUSH
80600: LD_VAR 0 1
80604: PUSH
80605: LD_VAR 0 2
80609: PUSH
80610: LD_INT 3
80612: PLUS
80613: PUSH
80614: LD_INT 0
80616: PUSH
80617: EMPTY
80618: LIST
80619: LIST
80620: LIST
80621: PUSH
80622: LD_VAR 0 1
80626: PUSH
80627: LD_INT 4
80629: PLUS
80630: PUSH
80631: LD_VAR 0 2
80635: PUSH
80636: LD_INT 4
80638: PLUS
80639: PUSH
80640: LD_INT 5
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: LIST
80647: PUSH
80648: EMPTY
80649: LIST
80650: LIST
80651: LIST
80652: LIST
80653: LIST
80654: ST_TO_ADDR
// end ; 2 :
80655: GO 81214
80657: LD_INT 2
80659: DOUBLE
80660: EQUAL
80661: IFTRUE 80665
80663: GO 80794
80665: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80666: LD_ADDR_VAR 0 5
80670: PUSH
80671: LD_VAR 0 1
80675: PUSH
80676: LD_VAR 0 2
80680: PUSH
80681: LD_INT 3
80683: MINUS
80684: PUSH
80685: LD_INT 3
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: LIST
80692: PUSH
80693: LD_VAR 0 1
80697: PUSH
80698: LD_INT 4
80700: PLUS
80701: PUSH
80702: LD_VAR 0 2
80706: PUSH
80707: LD_INT 4
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: LIST
80714: PUSH
80715: LD_VAR 0 1
80719: PUSH
80720: LD_VAR 0 2
80724: PUSH
80725: LD_INT 4
80727: PLUS
80728: PUSH
80729: LD_INT 0
80731: PUSH
80732: EMPTY
80733: LIST
80734: LIST
80735: LIST
80736: PUSH
80737: LD_VAR 0 1
80741: PUSH
80742: LD_INT 3
80744: MINUS
80745: PUSH
80746: LD_VAR 0 2
80750: PUSH
80751: LD_INT 1
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: LIST
80758: PUSH
80759: LD_VAR 0 1
80763: PUSH
80764: LD_INT 4
80766: MINUS
80767: PUSH
80768: LD_VAR 0 2
80772: PUSH
80773: LD_INT 4
80775: MINUS
80776: PUSH
80777: LD_INT 2
80779: PUSH
80780: EMPTY
80781: LIST
80782: LIST
80783: LIST
80784: PUSH
80785: EMPTY
80786: LIST
80787: LIST
80788: LIST
80789: LIST
80790: LIST
80791: ST_TO_ADDR
// end ; 3 :
80792: GO 81214
80794: LD_INT 3
80796: DOUBLE
80797: EQUAL
80798: IFTRUE 80802
80800: GO 80935
80802: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
80803: LD_ADDR_VAR 0 5
80807: PUSH
80808: LD_VAR 0 1
80812: PUSH
80813: LD_INT 3
80815: PLUS
80816: PUSH
80817: LD_VAR 0 2
80821: PUSH
80822: LD_INT 4
80824: PUSH
80825: EMPTY
80826: LIST
80827: LIST
80828: LIST
80829: PUSH
80830: LD_VAR 0 1
80834: PUSH
80835: LD_INT 4
80837: PLUS
80838: PUSH
80839: LD_VAR 0 2
80843: PUSH
80844: LD_INT 4
80846: PLUS
80847: PUSH
80848: LD_INT 5
80850: PUSH
80851: EMPTY
80852: LIST
80853: LIST
80854: LIST
80855: PUSH
80856: LD_VAR 0 1
80860: PUSH
80861: LD_INT 4
80863: MINUS
80864: PUSH
80865: LD_VAR 0 2
80869: PUSH
80870: LD_INT 1
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: LIST
80877: PUSH
80878: LD_VAR 0 1
80882: PUSH
80883: LD_VAR 0 2
80887: PUSH
80888: LD_INT 4
80890: MINUS
80891: PUSH
80892: LD_INT 3
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: LIST
80899: PUSH
80900: LD_VAR 0 1
80904: PUSH
80905: LD_INT 3
80907: MINUS
80908: PUSH
80909: LD_VAR 0 2
80913: PUSH
80914: LD_INT 3
80916: MINUS
80917: PUSH
80918: LD_INT 2
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: LIST
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: LIST
80930: LIST
80931: LIST
80932: ST_TO_ADDR
// end ; 4 :
80933: GO 81214
80935: LD_INT 4
80937: DOUBLE
80938: EQUAL
80939: IFTRUE 80943
80941: GO 81076
80943: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
80944: LD_ADDR_VAR 0 5
80948: PUSH
80949: LD_VAR 0 1
80953: PUSH
80954: LD_VAR 0 2
80958: PUSH
80959: LD_INT 4
80961: PLUS
80962: PUSH
80963: LD_INT 0
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: LIST
80970: PUSH
80971: LD_VAR 0 1
80975: PUSH
80976: LD_INT 3
80978: PLUS
80979: PUSH
80980: LD_VAR 0 2
80984: PUSH
80985: LD_INT 3
80987: PLUS
80988: PUSH
80989: LD_INT 5
80991: PUSH
80992: EMPTY
80993: LIST
80994: LIST
80995: LIST
80996: PUSH
80997: LD_VAR 0 1
81001: PUSH
81002: LD_INT 4
81004: PLUS
81005: PUSH
81006: LD_VAR 0 2
81010: PUSH
81011: LD_INT 4
81013: PUSH
81014: EMPTY
81015: LIST
81016: LIST
81017: LIST
81018: PUSH
81019: LD_VAR 0 1
81023: PUSH
81024: LD_VAR 0 2
81028: PUSH
81029: LD_INT 3
81031: MINUS
81032: PUSH
81033: LD_INT 3
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: LIST
81040: PUSH
81041: LD_VAR 0 1
81045: PUSH
81046: LD_INT 4
81048: MINUS
81049: PUSH
81050: LD_VAR 0 2
81054: PUSH
81055: LD_INT 4
81057: MINUS
81058: PUSH
81059: LD_INT 2
81061: PUSH
81062: EMPTY
81063: LIST
81064: LIST
81065: LIST
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: LIST
81071: LIST
81072: LIST
81073: ST_TO_ADDR
// end ; 5 :
81074: GO 81214
81076: LD_INT 5
81078: DOUBLE
81079: EQUAL
81080: IFTRUE 81084
81082: GO 81213
81084: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81085: LD_ADDR_VAR 0 5
81089: PUSH
81090: LD_VAR 0 1
81094: PUSH
81095: LD_INT 4
81097: MINUS
81098: PUSH
81099: LD_VAR 0 2
81103: PUSH
81104: LD_INT 1
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: LIST
81111: PUSH
81112: LD_VAR 0 1
81116: PUSH
81117: LD_VAR 0 2
81121: PUSH
81122: LD_INT 4
81124: MINUS
81125: PUSH
81126: LD_INT 3
81128: PUSH
81129: EMPTY
81130: LIST
81131: LIST
81132: LIST
81133: PUSH
81134: LD_VAR 0 1
81138: PUSH
81139: LD_INT 4
81141: PLUS
81142: PUSH
81143: LD_VAR 0 2
81147: PUSH
81148: LD_INT 4
81150: PLUS
81151: PUSH
81152: LD_INT 5
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: LIST
81159: PUSH
81160: LD_VAR 0 1
81164: PUSH
81165: LD_INT 3
81167: PLUS
81168: PUSH
81169: LD_VAR 0 2
81173: PUSH
81174: LD_INT 4
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: LIST
81181: PUSH
81182: LD_VAR 0 1
81186: PUSH
81187: LD_VAR 0 2
81191: PUSH
81192: LD_INT 3
81194: PLUS
81195: PUSH
81196: LD_INT 0
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: LIST
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: LIST
81208: LIST
81209: LIST
81210: ST_TO_ADDR
// end ; end ;
81211: GO 81214
81213: POP
// result := list ;
81214: LD_ADDR_VAR 0 4
81218: PUSH
81219: LD_VAR 0 5
81223: ST_TO_ADDR
// end ;
81224: LD_VAR 0 4
81228: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81229: LD_INT 0
81231: PPUSH
81232: PPUSH
81233: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81234: LD_VAR 0 1
81238: NOT
81239: PUSH
81240: LD_VAR 0 2
81244: PUSH
81245: LD_INT 1
81247: PUSH
81248: LD_INT 2
81250: PUSH
81251: LD_INT 3
81253: PUSH
81254: LD_INT 4
81256: PUSH
81257: EMPTY
81258: LIST
81259: LIST
81260: LIST
81261: LIST
81262: IN
81263: NOT
81264: OR
81265: IFFALSE 81269
// exit ;
81267: GO 81361
// tmp := [ ] ;
81269: LD_ADDR_VAR 0 5
81273: PUSH
81274: EMPTY
81275: ST_TO_ADDR
// for i in units do
81276: LD_ADDR_VAR 0 4
81280: PUSH
81281: LD_VAR 0 1
81285: PUSH
81286: FOR_IN
81287: IFFALSE 81330
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81289: LD_ADDR_VAR 0 5
81293: PUSH
81294: LD_VAR 0 5
81298: PPUSH
81299: LD_VAR 0 5
81303: PUSH
81304: LD_INT 1
81306: PLUS
81307: PPUSH
81308: LD_VAR 0 4
81312: PPUSH
81313: LD_VAR 0 2
81317: PPUSH
81318: CALL_OW 259
81322: PPUSH
81323: CALL_OW 2
81327: ST_TO_ADDR
81328: GO 81286
81330: POP
81331: POP
// if not tmp then
81332: LD_VAR 0 5
81336: NOT
81337: IFFALSE 81341
// exit ;
81339: GO 81361
// result := SortListByListDesc ( units , tmp ) ;
81341: LD_ADDR_VAR 0 3
81345: PUSH
81346: LD_VAR 0 1
81350: PPUSH
81351: LD_VAR 0 5
81355: PPUSH
81356: CALL_OW 77
81360: ST_TO_ADDR
// end ;
81361: LD_VAR 0 3
81365: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81366: LD_INT 0
81368: PPUSH
81369: PPUSH
81370: PPUSH
// result := false ;
81371: LD_ADDR_VAR 0 3
81375: PUSH
81376: LD_INT 0
81378: ST_TO_ADDR
// x := GetX ( building ) ;
81379: LD_ADDR_VAR 0 4
81383: PUSH
81384: LD_VAR 0 2
81388: PPUSH
81389: CALL_OW 250
81393: ST_TO_ADDR
// y := GetY ( building ) ;
81394: LD_ADDR_VAR 0 5
81398: PUSH
81399: LD_VAR 0 2
81403: PPUSH
81404: CALL_OW 251
81408: ST_TO_ADDR
// if not building or not x or not y then
81409: LD_VAR 0 2
81413: NOT
81414: PUSH
81415: LD_VAR 0 4
81419: NOT
81420: OR
81421: PUSH
81422: LD_VAR 0 5
81426: NOT
81427: OR
81428: IFFALSE 81432
// exit ;
81430: GO 81524
// if GetTaskList ( unit ) then
81432: LD_VAR 0 1
81436: PPUSH
81437: CALL_OW 437
81441: IFFALSE 81524
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81443: LD_STRING e
81445: PUSH
81446: LD_VAR 0 1
81450: PPUSH
81451: CALL_OW 437
81455: PUSH
81456: LD_INT 1
81458: ARRAY
81459: PUSH
81460: LD_INT 1
81462: ARRAY
81463: EQUAL
81464: PUSH
81465: LD_VAR 0 4
81469: PUSH
81470: LD_VAR 0 1
81474: PPUSH
81475: CALL_OW 437
81479: PUSH
81480: LD_INT 1
81482: ARRAY
81483: PUSH
81484: LD_INT 2
81486: ARRAY
81487: EQUAL
81488: AND
81489: PUSH
81490: LD_VAR 0 5
81494: PUSH
81495: LD_VAR 0 1
81499: PPUSH
81500: CALL_OW 437
81504: PUSH
81505: LD_INT 1
81507: ARRAY
81508: PUSH
81509: LD_INT 3
81511: ARRAY
81512: EQUAL
81513: AND
81514: IFFALSE 81524
// result := true end ;
81516: LD_ADDR_VAR 0 3
81520: PUSH
81521: LD_INT 1
81523: ST_TO_ADDR
// end ;
81524: LD_VAR 0 3
81528: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81529: LD_INT 0
81531: PPUSH
// result := false ;
81532: LD_ADDR_VAR 0 4
81536: PUSH
81537: LD_INT 0
81539: ST_TO_ADDR
// if GetTaskList ( unit ) then
81540: LD_VAR 0 1
81544: PPUSH
81545: CALL_OW 437
81549: IFFALSE 81632
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81551: LD_STRING M
81553: PUSH
81554: LD_VAR 0 1
81558: PPUSH
81559: CALL_OW 437
81563: PUSH
81564: LD_INT 1
81566: ARRAY
81567: PUSH
81568: LD_INT 1
81570: ARRAY
81571: EQUAL
81572: PUSH
81573: LD_VAR 0 2
81577: PUSH
81578: LD_VAR 0 1
81582: PPUSH
81583: CALL_OW 437
81587: PUSH
81588: LD_INT 1
81590: ARRAY
81591: PUSH
81592: LD_INT 2
81594: ARRAY
81595: EQUAL
81596: AND
81597: PUSH
81598: LD_VAR 0 3
81602: PUSH
81603: LD_VAR 0 1
81607: PPUSH
81608: CALL_OW 437
81612: PUSH
81613: LD_INT 1
81615: ARRAY
81616: PUSH
81617: LD_INT 3
81619: ARRAY
81620: EQUAL
81621: AND
81622: IFFALSE 81632
// result := true ;
81624: LD_ADDR_VAR 0 4
81628: PUSH
81629: LD_INT 1
81631: ST_TO_ADDR
// end ; end ;
81632: LD_VAR 0 4
81636: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81637: LD_INT 0
81639: PPUSH
81640: PPUSH
81641: PPUSH
81642: PPUSH
// if not unit or not area then
81643: LD_VAR 0 1
81647: NOT
81648: PUSH
81649: LD_VAR 0 2
81653: NOT
81654: OR
81655: IFFALSE 81659
// exit ;
81657: GO 81823
// tmp := AreaToList ( area , i ) ;
81659: LD_ADDR_VAR 0 6
81663: PUSH
81664: LD_VAR 0 2
81668: PPUSH
81669: LD_VAR 0 5
81673: PPUSH
81674: CALL_OW 517
81678: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81679: LD_ADDR_VAR 0 5
81683: PUSH
81684: DOUBLE
81685: LD_INT 1
81687: DEC
81688: ST_TO_ADDR
81689: LD_VAR 0 6
81693: PUSH
81694: LD_INT 1
81696: ARRAY
81697: PUSH
81698: FOR_TO
81699: IFFALSE 81821
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81701: LD_ADDR_VAR 0 7
81705: PUSH
81706: LD_VAR 0 6
81710: PUSH
81711: LD_INT 1
81713: ARRAY
81714: PUSH
81715: LD_VAR 0 5
81719: ARRAY
81720: PUSH
81721: LD_VAR 0 6
81725: PUSH
81726: LD_INT 2
81728: ARRAY
81729: PUSH
81730: LD_VAR 0 5
81734: ARRAY
81735: PUSH
81736: EMPTY
81737: LIST
81738: LIST
81739: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
81740: LD_VAR 0 7
81744: PUSH
81745: LD_INT 1
81747: ARRAY
81748: PPUSH
81749: LD_VAR 0 7
81753: PUSH
81754: LD_INT 2
81756: ARRAY
81757: PPUSH
81758: CALL_OW 428
81762: PUSH
81763: LD_INT 0
81765: EQUAL
81766: IFFALSE 81819
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
81768: LD_VAR 0 1
81772: PPUSH
81773: LD_VAR 0 7
81777: PUSH
81778: LD_INT 1
81780: ARRAY
81781: PPUSH
81782: LD_VAR 0 7
81786: PUSH
81787: LD_INT 2
81789: ARRAY
81790: PPUSH
81791: LD_VAR 0 3
81795: PPUSH
81796: CALL_OW 48
// result := IsPlaced ( unit ) ;
81800: LD_ADDR_VAR 0 4
81804: PUSH
81805: LD_VAR 0 1
81809: PPUSH
81810: CALL_OW 305
81814: ST_TO_ADDR
// exit ;
81815: POP
81816: POP
81817: GO 81823
// end ; end ;
81819: GO 81698
81821: POP
81822: POP
// end ;
81823: LD_VAR 0 4
81827: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
81828: LD_INT 0
81830: PPUSH
81831: PPUSH
81832: PPUSH
// if not side or side > 8 then
81833: LD_VAR 0 1
81837: NOT
81838: PUSH
81839: LD_VAR 0 1
81843: PUSH
81844: LD_INT 8
81846: GREATER
81847: OR
81848: IFFALSE 81852
// exit ;
81850: GO 82039
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
81852: LD_ADDR_VAR 0 4
81856: PUSH
81857: LD_INT 22
81859: PUSH
81860: LD_VAR 0 1
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PUSH
81869: LD_INT 21
81871: PUSH
81872: LD_INT 3
81874: PUSH
81875: EMPTY
81876: LIST
81877: LIST
81878: PUSH
81879: EMPTY
81880: LIST
81881: LIST
81882: PPUSH
81883: CALL_OW 69
81887: ST_TO_ADDR
// if not tmp then
81888: LD_VAR 0 4
81892: NOT
81893: IFFALSE 81897
// exit ;
81895: GO 82039
// enable_addtolog := true ;
81897: LD_ADDR_OWVAR 81
81901: PUSH
81902: LD_INT 1
81904: ST_TO_ADDR
// AddToLog ( [ ) ;
81905: LD_STRING [
81907: PPUSH
81908: CALL_OW 561
// for i in tmp do
81912: LD_ADDR_VAR 0 3
81916: PUSH
81917: LD_VAR 0 4
81921: PUSH
81922: FOR_IN
81923: IFFALSE 82030
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
81925: LD_STRING [
81927: PUSH
81928: LD_VAR 0 3
81932: PPUSH
81933: CALL_OW 266
81937: STR
81938: PUSH
81939: LD_STRING , 
81941: STR
81942: PUSH
81943: LD_VAR 0 3
81947: PPUSH
81948: CALL_OW 250
81952: STR
81953: PUSH
81954: LD_STRING , 
81956: STR
81957: PUSH
81958: LD_VAR 0 3
81962: PPUSH
81963: CALL_OW 251
81967: STR
81968: PUSH
81969: LD_STRING , 
81971: STR
81972: PUSH
81973: LD_VAR 0 3
81977: PPUSH
81978: CALL_OW 254
81982: STR
81983: PUSH
81984: LD_STRING , 
81986: STR
81987: PUSH
81988: LD_VAR 0 3
81992: PPUSH
81993: LD_INT 1
81995: PPUSH
81996: CALL_OW 268
82000: STR
82001: PUSH
82002: LD_STRING , 
82004: STR
82005: PUSH
82006: LD_VAR 0 3
82010: PPUSH
82011: LD_INT 2
82013: PPUSH
82014: CALL_OW 268
82018: STR
82019: PUSH
82020: LD_STRING ],
82022: STR
82023: PPUSH
82024: CALL_OW 561
// end ;
82028: GO 81922
82030: POP
82031: POP
// AddToLog ( ]; ) ;
82032: LD_STRING ];
82034: PPUSH
82035: CALL_OW 561
// end ;
82039: LD_VAR 0 2
82043: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82044: LD_INT 0
82046: PPUSH
82047: PPUSH
82048: PPUSH
82049: PPUSH
82050: PPUSH
// if not area or not rate or not max then
82051: LD_VAR 0 1
82055: NOT
82056: PUSH
82057: LD_VAR 0 2
82061: NOT
82062: OR
82063: PUSH
82064: LD_VAR 0 4
82068: NOT
82069: OR
82070: IFFALSE 82074
// exit ;
82072: GO 82266
// while 1 do
82074: LD_INT 1
82076: IFFALSE 82266
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82078: LD_ADDR_VAR 0 9
82082: PUSH
82083: LD_VAR 0 1
82087: PPUSH
82088: LD_INT 1
82090: PPUSH
82091: CALL_OW 287
82095: PUSH
82096: LD_INT 10
82098: MUL
82099: ST_TO_ADDR
// r := rate / 10 ;
82100: LD_ADDR_VAR 0 7
82104: PUSH
82105: LD_VAR 0 2
82109: PUSH
82110: LD_INT 10
82112: DIVREAL
82113: ST_TO_ADDR
// time := 1 1$00 ;
82114: LD_ADDR_VAR 0 8
82118: PUSH
82119: LD_INT 2100
82121: ST_TO_ADDR
// if amount < min then
82122: LD_VAR 0 9
82126: PUSH
82127: LD_VAR 0 3
82131: LESS
82132: IFFALSE 82150
// r := r * 2 else
82134: LD_ADDR_VAR 0 7
82138: PUSH
82139: LD_VAR 0 7
82143: PUSH
82144: LD_INT 2
82146: MUL
82147: ST_TO_ADDR
82148: GO 82176
// if amount > max then
82150: LD_VAR 0 9
82154: PUSH
82155: LD_VAR 0 4
82159: GREATER
82160: IFFALSE 82176
// r := r / 2 ;
82162: LD_ADDR_VAR 0 7
82166: PUSH
82167: LD_VAR 0 7
82171: PUSH
82172: LD_INT 2
82174: DIVREAL
82175: ST_TO_ADDR
// time := time / r ;
82176: LD_ADDR_VAR 0 8
82180: PUSH
82181: LD_VAR 0 8
82185: PUSH
82186: LD_VAR 0 7
82190: DIVREAL
82191: ST_TO_ADDR
// if time < 0 then
82192: LD_VAR 0 8
82196: PUSH
82197: LD_INT 0
82199: LESS
82200: IFFALSE 82217
// time := time * - 1 ;
82202: LD_ADDR_VAR 0 8
82206: PUSH
82207: LD_VAR 0 8
82211: PUSH
82212: LD_INT 1
82214: NEG
82215: MUL
82216: ST_TO_ADDR
// wait ( time ) ;
82217: LD_VAR 0 8
82221: PPUSH
82222: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
82226: LD_INT 35
82228: PPUSH
82229: LD_INT 875
82231: PPUSH
82232: CALL_OW 12
82236: PPUSH
82237: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82241: LD_INT 1
82243: PPUSH
82244: LD_INT 5
82246: PPUSH
82247: CALL_OW 12
82251: PPUSH
82252: LD_VAR 0 1
82256: PPUSH
82257: LD_INT 1
82259: PPUSH
82260: CALL_OW 55
// end ;
82264: GO 82074
// end ;
82266: LD_VAR 0 5
82270: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82271: LD_INT 0
82273: PPUSH
82274: PPUSH
82275: PPUSH
82276: PPUSH
82277: PPUSH
82278: PPUSH
82279: PPUSH
82280: PPUSH
// if not turrets or not factories then
82281: LD_VAR 0 1
82285: NOT
82286: PUSH
82287: LD_VAR 0 2
82291: NOT
82292: OR
82293: IFFALSE 82297
// exit ;
82295: GO 82604
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82297: LD_ADDR_VAR 0 10
82301: PUSH
82302: LD_INT 5
82304: PUSH
82305: LD_INT 6
82307: PUSH
82308: EMPTY
82309: LIST
82310: LIST
82311: PUSH
82312: LD_INT 2
82314: PUSH
82315: LD_INT 4
82317: PUSH
82318: EMPTY
82319: LIST
82320: LIST
82321: PUSH
82322: LD_INT 3
82324: PUSH
82325: LD_INT 5
82327: PUSH
82328: EMPTY
82329: LIST
82330: LIST
82331: PUSH
82332: EMPTY
82333: LIST
82334: LIST
82335: LIST
82336: PUSH
82337: LD_INT 24
82339: PUSH
82340: LD_INT 25
82342: PUSH
82343: EMPTY
82344: LIST
82345: LIST
82346: PUSH
82347: LD_INT 23
82349: PUSH
82350: LD_INT 27
82352: PUSH
82353: EMPTY
82354: LIST
82355: LIST
82356: PUSH
82357: EMPTY
82358: LIST
82359: LIST
82360: PUSH
82361: LD_INT 42
82363: PUSH
82364: LD_INT 43
82366: PUSH
82367: EMPTY
82368: LIST
82369: LIST
82370: PUSH
82371: LD_INT 44
82373: PUSH
82374: LD_INT 46
82376: PUSH
82377: EMPTY
82378: LIST
82379: LIST
82380: PUSH
82381: LD_INT 45
82383: PUSH
82384: LD_INT 47
82386: PUSH
82387: EMPTY
82388: LIST
82389: LIST
82390: PUSH
82391: EMPTY
82392: LIST
82393: LIST
82394: LIST
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: LIST
82400: ST_TO_ADDR
// result := [ ] ;
82401: LD_ADDR_VAR 0 3
82405: PUSH
82406: EMPTY
82407: ST_TO_ADDR
// for i in turrets do
82408: LD_ADDR_VAR 0 4
82412: PUSH
82413: LD_VAR 0 1
82417: PUSH
82418: FOR_IN
82419: IFFALSE 82602
// begin nat := GetNation ( i ) ;
82421: LD_ADDR_VAR 0 7
82425: PUSH
82426: LD_VAR 0 4
82430: PPUSH
82431: CALL_OW 248
82435: ST_TO_ADDR
// weapon := 0 ;
82436: LD_ADDR_VAR 0 8
82440: PUSH
82441: LD_INT 0
82443: ST_TO_ADDR
// if not nat then
82444: LD_VAR 0 7
82448: NOT
82449: IFFALSE 82453
// continue ;
82451: GO 82418
// for j in list [ nat ] do
82453: LD_ADDR_VAR 0 5
82457: PUSH
82458: LD_VAR 0 10
82462: PUSH
82463: LD_VAR 0 7
82467: ARRAY
82468: PUSH
82469: FOR_IN
82470: IFFALSE 82511
// if GetBWeapon ( i ) = j [ 1 ] then
82472: LD_VAR 0 4
82476: PPUSH
82477: CALL_OW 269
82481: PUSH
82482: LD_VAR 0 5
82486: PUSH
82487: LD_INT 1
82489: ARRAY
82490: EQUAL
82491: IFFALSE 82509
// begin weapon := j [ 2 ] ;
82493: LD_ADDR_VAR 0 8
82497: PUSH
82498: LD_VAR 0 5
82502: PUSH
82503: LD_INT 2
82505: ARRAY
82506: ST_TO_ADDR
// break ;
82507: GO 82511
// end ;
82509: GO 82469
82511: POP
82512: POP
// if not weapon then
82513: LD_VAR 0 8
82517: NOT
82518: IFFALSE 82522
// continue ;
82520: GO 82418
// for k in factories do
82522: LD_ADDR_VAR 0 6
82526: PUSH
82527: LD_VAR 0 2
82531: PUSH
82532: FOR_IN
82533: IFFALSE 82598
// begin weapons := AvailableWeaponList ( k ) ;
82535: LD_ADDR_VAR 0 9
82539: PUSH
82540: LD_VAR 0 6
82544: PPUSH
82545: CALL_OW 478
82549: ST_TO_ADDR
// if not weapons then
82550: LD_VAR 0 9
82554: NOT
82555: IFFALSE 82559
// continue ;
82557: GO 82532
// if weapon in weapons then
82559: LD_VAR 0 8
82563: PUSH
82564: LD_VAR 0 9
82568: IN
82569: IFFALSE 82596
// begin result := [ i , weapon ] ;
82571: LD_ADDR_VAR 0 3
82575: PUSH
82576: LD_VAR 0 4
82580: PUSH
82581: LD_VAR 0 8
82585: PUSH
82586: EMPTY
82587: LIST
82588: LIST
82589: ST_TO_ADDR
// exit ;
82590: POP
82591: POP
82592: POP
82593: POP
82594: GO 82604
// end ; end ;
82596: GO 82532
82598: POP
82599: POP
// end ;
82600: GO 82418
82602: POP
82603: POP
// end ;
82604: LD_VAR 0 3
82608: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82609: LD_INT 0
82611: PPUSH
// if not side or side > 8 then
82612: LD_VAR 0 3
82616: NOT
82617: PUSH
82618: LD_VAR 0 3
82622: PUSH
82623: LD_INT 8
82625: GREATER
82626: OR
82627: IFFALSE 82631
// exit ;
82629: GO 82690
// if not range then
82631: LD_VAR 0 4
82635: NOT
82636: IFFALSE 82647
// range := - 12 ;
82638: LD_ADDR_VAR 0 4
82642: PUSH
82643: LD_INT 12
82645: NEG
82646: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82647: LD_VAR 0 1
82651: PPUSH
82652: LD_VAR 0 2
82656: PPUSH
82657: LD_VAR 0 3
82661: PPUSH
82662: LD_VAR 0 4
82666: PPUSH
82667: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82671: LD_VAR 0 1
82675: PPUSH
82676: LD_VAR 0 2
82680: PPUSH
82681: LD_VAR 0 3
82685: PPUSH
82686: CALL_OW 331
// end ;
82690: LD_VAR 0 5
82694: RET
// export function Video ( mode ) ; begin
82695: LD_INT 0
82697: PPUSH
// ingame_video = mode ;
82698: LD_ADDR_OWVAR 52
82702: PUSH
82703: LD_VAR 0 1
82707: ST_TO_ADDR
// interface_hidden = mode ;
82708: LD_ADDR_OWVAR 54
82712: PUSH
82713: LD_VAR 0 1
82717: ST_TO_ADDR
// end ;
82718: LD_VAR 0 2
82722: RET
// export function Join ( array , element ) ; begin
82723: LD_INT 0
82725: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82726: LD_ADDR_VAR 0 3
82730: PUSH
82731: LD_VAR 0 1
82735: PPUSH
82736: LD_VAR 0 1
82740: PUSH
82741: LD_INT 1
82743: PLUS
82744: PPUSH
82745: LD_VAR 0 2
82749: PPUSH
82750: CALL_OW 1
82754: ST_TO_ADDR
// end ;
82755: LD_VAR 0 3
82759: RET
// export function JoinUnion ( array , element ) ; begin
82760: LD_INT 0
82762: PPUSH
// result := array union element ;
82763: LD_ADDR_VAR 0 3
82767: PUSH
82768: LD_VAR 0 1
82772: PUSH
82773: LD_VAR 0 2
82777: UNION
82778: ST_TO_ADDR
// end ;
82779: LD_VAR 0 3
82783: RET
// export function GetBehemoths ( side ) ; begin
82784: LD_INT 0
82786: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
82787: LD_ADDR_VAR 0 2
82791: PUSH
82792: LD_INT 22
82794: PUSH
82795: LD_VAR 0 1
82799: PUSH
82800: EMPTY
82801: LIST
82802: LIST
82803: PUSH
82804: LD_INT 31
82806: PUSH
82807: LD_INT 25
82809: PUSH
82810: EMPTY
82811: LIST
82812: LIST
82813: PUSH
82814: EMPTY
82815: LIST
82816: LIST
82817: PPUSH
82818: CALL_OW 69
82822: ST_TO_ADDR
// end ;
82823: LD_VAR 0 2
82827: RET
// export function Shuffle ( array ) ; var i , index ; begin
82828: LD_INT 0
82830: PPUSH
82831: PPUSH
82832: PPUSH
// result := [ ] ;
82833: LD_ADDR_VAR 0 2
82837: PUSH
82838: EMPTY
82839: ST_TO_ADDR
// if not array then
82840: LD_VAR 0 1
82844: NOT
82845: IFFALSE 82849
// exit ;
82847: GO 82948
// Randomize ;
82849: CALL_OW 10
// for i = array downto 1 do
82853: LD_ADDR_VAR 0 3
82857: PUSH
82858: DOUBLE
82859: LD_VAR 0 1
82863: INC
82864: ST_TO_ADDR
82865: LD_INT 1
82867: PUSH
82868: FOR_DOWNTO
82869: IFFALSE 82946
// begin index := rand ( 1 , array ) ;
82871: LD_ADDR_VAR 0 4
82875: PUSH
82876: LD_INT 1
82878: PPUSH
82879: LD_VAR 0 1
82883: PPUSH
82884: CALL_OW 12
82888: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
82889: LD_ADDR_VAR 0 2
82893: PUSH
82894: LD_VAR 0 2
82898: PPUSH
82899: LD_VAR 0 2
82903: PUSH
82904: LD_INT 1
82906: PLUS
82907: PPUSH
82908: LD_VAR 0 1
82912: PUSH
82913: LD_VAR 0 4
82917: ARRAY
82918: PPUSH
82919: CALL_OW 2
82923: ST_TO_ADDR
// array := Delete ( array , index ) ;
82924: LD_ADDR_VAR 0 1
82928: PUSH
82929: LD_VAR 0 1
82933: PPUSH
82934: LD_VAR 0 4
82938: PPUSH
82939: CALL_OW 3
82943: ST_TO_ADDR
// end ;
82944: GO 82868
82946: POP
82947: POP
// end ;
82948: LD_VAR 0 2
82952: RET
// export function GetBaseMaterials ( base ) ; begin
82953: LD_INT 0
82955: PPUSH
// result := [ 0 , 0 , 0 ] ;
82956: LD_ADDR_VAR 0 2
82960: PUSH
82961: LD_INT 0
82963: PUSH
82964: LD_INT 0
82966: PUSH
82967: LD_INT 0
82969: PUSH
82970: EMPTY
82971: LIST
82972: LIST
82973: LIST
82974: ST_TO_ADDR
// if not base then
82975: LD_VAR 0 1
82979: NOT
82980: IFFALSE 82984
// exit ;
82982: GO 83033
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
82984: LD_ADDR_VAR 0 2
82988: PUSH
82989: LD_VAR 0 1
82993: PPUSH
82994: LD_INT 1
82996: PPUSH
82997: CALL_OW 275
83001: PUSH
83002: LD_VAR 0 1
83006: PPUSH
83007: LD_INT 2
83009: PPUSH
83010: CALL_OW 275
83014: PUSH
83015: LD_VAR 0 1
83019: PPUSH
83020: LD_INT 3
83022: PPUSH
83023: CALL_OW 275
83027: PUSH
83028: EMPTY
83029: LIST
83030: LIST
83031: LIST
83032: ST_TO_ADDR
// end ;
83033: LD_VAR 0 2
83037: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83038: LD_INT 0
83040: PPUSH
83041: PPUSH
// result := array ;
83042: LD_ADDR_VAR 0 3
83046: PUSH
83047: LD_VAR 0 1
83051: ST_TO_ADDR
// if size > 0 then
83052: LD_VAR 0 2
83056: PUSH
83057: LD_INT 0
83059: GREATER
83060: IFFALSE 83106
// for i := array downto size do
83062: LD_ADDR_VAR 0 4
83066: PUSH
83067: DOUBLE
83068: LD_VAR 0 1
83072: INC
83073: ST_TO_ADDR
83074: LD_VAR 0 2
83078: PUSH
83079: FOR_DOWNTO
83080: IFFALSE 83104
// result := Delete ( result , result ) ;
83082: LD_ADDR_VAR 0 3
83086: PUSH
83087: LD_VAR 0 3
83091: PPUSH
83092: LD_VAR 0 3
83096: PPUSH
83097: CALL_OW 3
83101: ST_TO_ADDR
83102: GO 83079
83104: POP
83105: POP
// end ;
83106: LD_VAR 0 3
83110: RET
// export function ComExit ( unit ) ; var tmp ; begin
83111: LD_INT 0
83113: PPUSH
83114: PPUSH
// if not IsInUnit ( unit ) then
83115: LD_VAR 0 1
83119: PPUSH
83120: CALL_OW 310
83124: NOT
83125: IFFALSE 83129
// exit ;
83127: GO 83189
// tmp := IsInUnit ( unit ) ;
83129: LD_ADDR_VAR 0 3
83133: PUSH
83134: LD_VAR 0 1
83138: PPUSH
83139: CALL_OW 310
83143: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83144: LD_VAR 0 3
83148: PPUSH
83149: CALL_OW 247
83153: PUSH
83154: LD_INT 2
83156: EQUAL
83157: IFFALSE 83170
// ComExitVehicle ( unit ) else
83159: LD_VAR 0 1
83163: PPUSH
83164: CALL_OW 121
83168: GO 83179
// ComExitBuilding ( unit ) ;
83170: LD_VAR 0 1
83174: PPUSH
83175: CALL_OW 122
// result := tmp ;
83179: LD_ADDR_VAR 0 2
83183: PUSH
83184: LD_VAR 0 3
83188: ST_TO_ADDR
// end ;
83189: LD_VAR 0 2
83193: RET
// export function ResetHc ; begin
83194: LD_INT 0
83196: PPUSH
// InitHc ;
83197: CALL_OW 19
// hc_importance := 0 ;
83201: LD_ADDR_OWVAR 32
83205: PUSH
83206: LD_INT 0
83208: ST_TO_ADDR
// end ;
83209: LD_VAR 0 1
83213: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83214: LD_INT 0
83216: PPUSH
83217: PPUSH
83218: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83219: LD_ADDR_VAR 0 6
83223: PUSH
83224: LD_VAR 0 1
83228: PUSH
83229: LD_VAR 0 3
83233: PLUS
83234: PUSH
83235: LD_INT 2
83237: DIV
83238: ST_TO_ADDR
// if _x < 0 then
83239: LD_VAR 0 6
83243: PUSH
83244: LD_INT 0
83246: LESS
83247: IFFALSE 83264
// _x := _x * - 1 ;
83249: LD_ADDR_VAR 0 6
83253: PUSH
83254: LD_VAR 0 6
83258: PUSH
83259: LD_INT 1
83261: NEG
83262: MUL
83263: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83264: LD_ADDR_VAR 0 7
83268: PUSH
83269: LD_VAR 0 2
83273: PUSH
83274: LD_VAR 0 4
83278: PLUS
83279: PUSH
83280: LD_INT 2
83282: DIV
83283: ST_TO_ADDR
// if _y < 0 then
83284: LD_VAR 0 7
83288: PUSH
83289: LD_INT 0
83291: LESS
83292: IFFALSE 83309
// _y := _y * - 1 ;
83294: LD_ADDR_VAR 0 7
83298: PUSH
83299: LD_VAR 0 7
83303: PUSH
83304: LD_INT 1
83306: NEG
83307: MUL
83308: ST_TO_ADDR
// result := [ _x , _y ] ;
83309: LD_ADDR_VAR 0 5
83313: PUSH
83314: LD_VAR 0 6
83318: PUSH
83319: LD_VAR 0 7
83323: PUSH
83324: EMPTY
83325: LIST
83326: LIST
83327: ST_TO_ADDR
// end ;
83328: LD_VAR 0 5
83332: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83333: LD_INT 0
83335: PPUSH
83336: PPUSH
83337: PPUSH
83338: PPUSH
// task := GetTaskList ( unit ) ;
83339: LD_ADDR_VAR 0 7
83343: PUSH
83344: LD_VAR 0 1
83348: PPUSH
83349: CALL_OW 437
83353: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83354: LD_VAR 0 7
83358: NOT
83359: PUSH
83360: LD_VAR 0 1
83364: PPUSH
83365: LD_VAR 0 2
83369: PPUSH
83370: CALL_OW 308
83374: NOT
83375: AND
83376: IFFALSE 83380
// exit ;
83378: GO 83498
// if IsInArea ( unit , area ) then
83380: LD_VAR 0 1
83384: PPUSH
83385: LD_VAR 0 2
83389: PPUSH
83390: CALL_OW 308
83394: IFFALSE 83412
// begin ComMoveToArea ( unit , goAway ) ;
83396: LD_VAR 0 1
83400: PPUSH
83401: LD_VAR 0 3
83405: PPUSH
83406: CALL_OW 113
// exit ;
83410: GO 83498
// end ; if task [ 1 ] [ 1 ] <> M then
83412: LD_VAR 0 7
83416: PUSH
83417: LD_INT 1
83419: ARRAY
83420: PUSH
83421: LD_INT 1
83423: ARRAY
83424: PUSH
83425: LD_STRING M
83427: NONEQUAL
83428: IFFALSE 83432
// exit ;
83430: GO 83498
// x := task [ 1 ] [ 2 ] ;
83432: LD_ADDR_VAR 0 5
83436: PUSH
83437: LD_VAR 0 7
83441: PUSH
83442: LD_INT 1
83444: ARRAY
83445: PUSH
83446: LD_INT 2
83448: ARRAY
83449: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83450: LD_ADDR_VAR 0 6
83454: PUSH
83455: LD_VAR 0 7
83459: PUSH
83460: LD_INT 1
83462: ARRAY
83463: PUSH
83464: LD_INT 3
83466: ARRAY
83467: ST_TO_ADDR
// if InArea ( x , y , area ) then
83468: LD_VAR 0 5
83472: PPUSH
83473: LD_VAR 0 6
83477: PPUSH
83478: LD_VAR 0 2
83482: PPUSH
83483: CALL_OW 309
83487: IFFALSE 83498
// ComStop ( unit ) ;
83489: LD_VAR 0 1
83493: PPUSH
83494: CALL_OW 141
// end ;
83498: LD_VAR 0 4
83502: RET
// export function Abs ( value ) ; begin
83503: LD_INT 0
83505: PPUSH
// result := value ;
83506: LD_ADDR_VAR 0 2
83510: PUSH
83511: LD_VAR 0 1
83515: ST_TO_ADDR
// if value < 0 then
83516: LD_VAR 0 1
83520: PUSH
83521: LD_INT 0
83523: LESS
83524: IFFALSE 83541
// result := value * - 1 ;
83526: LD_ADDR_VAR 0 2
83530: PUSH
83531: LD_VAR 0 1
83535: PUSH
83536: LD_INT 1
83538: NEG
83539: MUL
83540: ST_TO_ADDR
// end ; end_of_file
83541: LD_VAR 0 2
83545: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83546: LD_VAR 0 1
83550: PUSH
83551: LD_INT 200
83553: DOUBLE
83554: GREATEREQUAL
83555: IFFALSE 83563
83557: LD_INT 299
83559: DOUBLE
83560: LESSEQUAL
83561: IFTRUE 83565
83563: GO 83597
83565: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83566: LD_VAR 0 1
83570: PPUSH
83571: LD_VAR 0 2
83575: PPUSH
83576: LD_VAR 0 3
83580: PPUSH
83581: LD_VAR 0 4
83585: PPUSH
83586: LD_VAR 0 5
83590: PPUSH
83591: CALL 42859 0 5
83595: GO 83674
83597: LD_INT 300
83599: DOUBLE
83600: GREATEREQUAL
83601: IFFALSE 83609
83603: LD_INT 399
83605: DOUBLE
83606: LESSEQUAL
83607: IFTRUE 83611
83609: GO 83673
83611: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83612: LD_VAR 0 1
83616: PPUSH
83617: LD_VAR 0 2
83621: PPUSH
83622: LD_VAR 0 3
83626: PPUSH
83627: LD_VAR 0 4
83631: PPUSH
83632: LD_VAR 0 5
83636: PPUSH
83637: LD_VAR 0 6
83641: PPUSH
83642: LD_VAR 0 7
83646: PPUSH
83647: LD_VAR 0 8
83651: PPUSH
83652: LD_VAR 0 9
83656: PPUSH
83657: LD_VAR 0 10
83661: PPUSH
83662: LD_VAR 0 11
83666: PPUSH
83667: CALL 40765 0 11
83671: GO 83674
83673: POP
// end ;
83674: PPOPN 11
83676: END
