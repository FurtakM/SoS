// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 88 0 0
// PrepareAmerican ;
  19: CALL 112 0 0
// PrepareRussian ;
  23: CALL 128 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: NOP4
  73: PPUSH
  74: NOP4
  78: PPUSH
  79: CALL 54344 0 9
// Action ;
  83: NOP4
// end ;
  87: END
// export debug , mission_prefix ; function Init ; begin
  88: LD_INT 0
  90: PPUSH
// debug := true ;
  91: LD_ADDR_EXP 1
  95: PUSH
  96: LD_INT 1
  98: ST_TO_ADDR
// mission_prefix := 08c_ ;
  99: LD_ADDR_EXP 2
 103: PUSH
 104: LD_STRING 08c_
 106: ST_TO_ADDR
// end ; end_of_file
 107: LD_VAR 0 1
 111: RET
// export function PrepareAmerican ; begin
 112: LD_INT 0
 114: PPUSH
// end ; end_of_file
 115: LD_VAR 0 1
 119: RET
// export function PrepareArabian ; begin
 120: LD_INT 0
 122: PPUSH
// end ; end_of_file
 123: LD_VAR 0 1
 127: RET
// export function PrepareRussian ; begin
 128: LD_INT 0
 130: PPUSH
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file
 131: LD_VAR 0 1
 135: RET
// export globalGameSaveCounter ; every 0 0$1 do
 136: GO 138
 138: DISABLE
// begin enable ;
 139: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
 140: LD_STRING updateTimer(
 142: PUSH
 143: LD_OWVAR 1
 147: STR
 148: PUSH
 149: LD_STRING );
 151: STR
 152: PPUSH
 153: CALL_OW 559
// end ;
 157: END
// every 0 0$1 do
 158: GO 160
 160: DISABLE
// begin globalGameSaveCounter := 0 ;
 161: LD_ADDR_EXP 3
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 169: LD_STRING setGameSaveCounter(0)
 171: PPUSH
 172: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 176: LD_STRING initStreamRollete();
 178: PPUSH
 179: CALL_OW 559
// InitStreamMode ;
 183: CALL 1509 0 0
// DefineStreamItems ( false ) ;
 187: LD_INT 0
 189: PPUSH
 190: CALL 1973 0 1
// end ;
 194: END
// export function SOS_MapStart ( ) ; begin
 195: LD_INT 0
 197: PPUSH
// if streamModeActive then
 198: LD_EXP 4
 202: IFFALSE 211
// DefineStreamItems ( true ) ;
 204: LD_INT 1
 206: PPUSH
 207: CALL 1973 0 1
// UpdateLuaVariables ( ) ;
 211: CALL 228 0 0
// UpdateFactoryWaypoints ( ) ;
 215: CALL 14834 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 219: CALL 15091 0 0
// end ;
 223: LD_VAR 0 1
 227: RET
// function UpdateLuaVariables ( ) ; begin
 228: LD_INT 0
 230: PPUSH
// if globalGameSaveCounter then
 231: LD_EXP 3
 235: IFFALSE 269
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: LD_EXP 3
 246: PPUSH
 247: CALL 59015 0 1
 251: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 252: LD_STRING setGameSaveCounter(
 254: PUSH
 255: LD_EXP 3
 259: STR
 260: PUSH
 261: LD_STRING )
 263: STR
 264: PPUSH
 265: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 269: LD_STRING setGameDifficulty(
 271: PUSH
 272: LD_OWVAR 67
 276: STR
 277: PUSH
 278: LD_STRING )
 280: STR
 281: PPUSH
 282: CALL_OW 559
// end ;
 286: LD_VAR 0 1
 290: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 291: LD_INT 0
 293: PPUSH
// if p2 = stream_mode then
 294: LD_VAR 0 2
 298: PUSH
 299: LD_INT 100
 301: EQUAL
 302: IFFALSE 1305
// begin if not StreamModeActive then
 304: LD_EXP 4
 308: NOT
 309: IFFALSE 319
// StreamModeActive := true ;
 311: LD_ADDR_EXP 4
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// if p3 = 0 then
 319: LD_VAR 0 3
 323: PUSH
 324: LD_INT 0
 326: EQUAL
 327: IFFALSE 333
// InitStreamMode ;
 329: CALL 1509 0 0
// if p3 = 1 then
 333: LD_VAR 0 3
 337: PUSH
 338: LD_INT 1
 340: EQUAL
 341: IFFALSE 351
// sRocket := true ;
 343: LD_ADDR_EXP 9
 347: PUSH
 348: LD_INT 1
 350: ST_TO_ADDR
// if p3 = 2 then
 351: LD_VAR 0 3
 355: PUSH
 356: LD_INT 2
 358: EQUAL
 359: IFFALSE 369
// sSpeed := true ;
 361: LD_ADDR_EXP 8
 365: PUSH
 366: LD_INT 1
 368: ST_TO_ADDR
// if p3 = 3 then
 369: LD_VAR 0 3
 373: PUSH
 374: LD_INT 3
 376: EQUAL
 377: IFFALSE 387
// sEngine := true ;
 379: LD_ADDR_EXP 10
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// if p3 = 4 then
 387: LD_VAR 0 3
 391: PUSH
 392: LD_INT 4
 394: EQUAL
 395: IFFALSE 405
// sSpec := true ;
 397: LD_ADDR_EXP 7
 401: PUSH
 402: LD_INT 1
 404: ST_TO_ADDR
// if p3 = 5 then
 405: LD_VAR 0 3
 409: PUSH
 410: LD_INT 5
 412: EQUAL
 413: IFFALSE 423
// sLevel := true ;
 415: LD_ADDR_EXP 11
 419: PUSH
 420: LD_INT 1
 422: ST_TO_ADDR
// if p3 = 6 then
 423: LD_VAR 0 3
 427: PUSH
 428: LD_INT 6
 430: EQUAL
 431: IFFALSE 441
// sArmoury := true ;
 433: LD_ADDR_EXP 12
 437: PUSH
 438: LD_INT 1
 440: ST_TO_ADDR
// if p3 = 7 then
 441: LD_VAR 0 3
 445: PUSH
 446: LD_INT 7
 448: EQUAL
 449: IFFALSE 459
// sRadar := true ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_INT 1
 458: ST_TO_ADDR
// if p3 = 8 then
 459: LD_VAR 0 3
 463: PUSH
 464: LD_INT 8
 466: EQUAL
 467: IFFALSE 477
// sBunker := true ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: LD_INT 1
 476: ST_TO_ADDR
// if p3 = 9 then
 477: LD_VAR 0 3
 481: PUSH
 482: LD_INT 9
 484: EQUAL
 485: IFFALSE 495
// sHack := true ;
 487: LD_ADDR_EXP 15
 491: PUSH
 492: LD_INT 1
 494: ST_TO_ADDR
// if p3 = 10 then
 495: LD_VAR 0 3
 499: PUSH
 500: LD_INT 10
 502: EQUAL
 503: IFFALSE 513
// sFire := true ;
 505: LD_ADDR_EXP 16
 509: PUSH
 510: LD_INT 1
 512: ST_TO_ADDR
// if p3 = 11 then
 513: LD_VAR 0 3
 517: PUSH
 518: LD_INT 11
 520: EQUAL
 521: IFFALSE 531
// sRefresh := true ;
 523: LD_ADDR_EXP 17
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// if p3 = 12 then
 531: LD_VAR 0 3
 535: PUSH
 536: LD_INT 12
 538: EQUAL
 539: IFFALSE 549
// sExp := true ;
 541: LD_ADDR_EXP 18
 545: PUSH
 546: LD_INT 1
 548: ST_TO_ADDR
// if p3 = 13 then
 549: LD_VAR 0 3
 553: PUSH
 554: LD_INT 13
 556: EQUAL
 557: IFFALSE 567
// sDepot := true ;
 559: LD_ADDR_EXP 19
 563: PUSH
 564: LD_INT 1
 566: ST_TO_ADDR
// if p3 = 14 then
 567: LD_VAR 0 3
 571: PUSH
 572: LD_INT 14
 574: EQUAL
 575: IFFALSE 585
// sFlag := true ;
 577: LD_ADDR_EXP 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// if p3 = 15 then
 585: LD_VAR 0 3
 589: PUSH
 590: LD_INT 15
 592: EQUAL
 593: IFFALSE 603
// sKamikadze := true ;
 595: LD_ADDR_EXP 28
 599: PUSH
 600: LD_INT 1
 602: ST_TO_ADDR
// if p3 = 16 then
 603: LD_VAR 0 3
 607: PUSH
 608: LD_INT 16
 610: EQUAL
 611: IFFALSE 621
// sTroll := true ;
 613: LD_ADDR_EXP 29
 617: PUSH
 618: LD_INT 1
 620: ST_TO_ADDR
// if p3 = 17 then
 621: LD_VAR 0 3
 625: PUSH
 626: LD_INT 17
 628: EQUAL
 629: IFFALSE 639
// sSlow := true ;
 631: LD_ADDR_EXP 30
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// if p3 = 18 then
 639: LD_VAR 0 3
 643: PUSH
 644: LD_INT 18
 646: EQUAL
 647: IFFALSE 657
// sLack := true ;
 649: LD_ADDR_EXP 31
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// if p3 = 19 then
 657: LD_VAR 0 3
 661: PUSH
 662: LD_INT 19
 664: EQUAL
 665: IFFALSE 675
// sTank := true ;
 667: LD_ADDR_EXP 33
 671: PUSH
 672: LD_INT 1
 674: ST_TO_ADDR
// if p3 = 20 then
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 20
 682: EQUAL
 683: IFFALSE 693
// sRemote := true ;
 685: LD_ADDR_EXP 34
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// if p3 = 21 then
 693: LD_VAR 0 3
 697: PUSH
 698: LD_INT 21
 700: EQUAL
 701: IFFALSE 711
// sPowell := true ;
 703: LD_ADDR_EXP 35
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// if p3 = 22 then
 711: LD_VAR 0 3
 715: PUSH
 716: LD_INT 22
 718: EQUAL
 719: IFFALSE 729
// sTeleport := true ;
 721: LD_ADDR_EXP 38
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// if p3 = 23 then
 729: LD_VAR 0 3
 733: PUSH
 734: LD_INT 23
 736: EQUAL
 737: IFFALSE 747
// sOilTower := true ;
 739: LD_ADDR_EXP 40
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// if p3 = 24 then
 747: LD_VAR 0 3
 751: PUSH
 752: LD_INT 24
 754: EQUAL
 755: IFFALSE 765
// sShovel := true ;
 757: LD_ADDR_EXP 41
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// if p3 = 25 then
 765: LD_VAR 0 3
 769: PUSH
 770: LD_INT 25
 772: EQUAL
 773: IFFALSE 783
// sSheik := true ;
 775: LD_ADDR_EXP 42
 779: PUSH
 780: LD_INT 1
 782: ST_TO_ADDR
// if p3 = 26 then
 783: LD_VAR 0 3
 787: PUSH
 788: LD_INT 26
 790: EQUAL
 791: IFFALSE 801
// sEarthquake := true ;
 793: LD_ADDR_EXP 44
 797: PUSH
 798: LD_INT 1
 800: ST_TO_ADDR
// if p3 = 27 then
 801: LD_VAR 0 3
 805: PUSH
 806: LD_INT 27
 808: EQUAL
 809: IFFALSE 819
// sAI := true ;
 811: LD_ADDR_EXP 45
 815: PUSH
 816: LD_INT 1
 818: ST_TO_ADDR
// if p3 = 28 then
 819: LD_VAR 0 3
 823: PUSH
 824: LD_INT 28
 826: EQUAL
 827: IFFALSE 837
// sCargo := true ;
 829: LD_ADDR_EXP 48
 833: PUSH
 834: LD_INT 1
 836: ST_TO_ADDR
// if p3 = 29 then
 837: LD_VAR 0 3
 841: PUSH
 842: LD_INT 29
 844: EQUAL
 845: IFFALSE 855
// sDLaser := true ;
 847: LD_ADDR_EXP 49
 851: PUSH
 852: LD_INT 1
 854: ST_TO_ADDR
// if p3 = 30 then
 855: LD_VAR 0 3
 859: PUSH
 860: LD_INT 30
 862: EQUAL
 863: IFFALSE 873
// sExchange := true ;
 865: LD_ADDR_EXP 50
 869: PUSH
 870: LD_INT 1
 872: ST_TO_ADDR
// if p3 = 31 then
 873: LD_VAR 0 3
 877: PUSH
 878: LD_INT 31
 880: EQUAL
 881: IFFALSE 891
// sFac := true ;
 883: LD_ADDR_EXP 51
 887: PUSH
 888: LD_INT 1
 890: ST_TO_ADDR
// if p3 = 32 then
 891: LD_VAR 0 3
 895: PUSH
 896: LD_INT 32
 898: EQUAL
 899: IFFALSE 909
// sPower := true ;
 901: LD_ADDR_EXP 52
 905: PUSH
 906: LD_INT 1
 908: ST_TO_ADDR
// if p3 = 33 then
 909: LD_VAR 0 3
 913: PUSH
 914: LD_INT 33
 916: EQUAL
 917: IFFALSE 927
// sRandom := true ;
 919: LD_ADDR_EXP 53
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// if p3 = 34 then
 927: LD_VAR 0 3
 931: PUSH
 932: LD_INT 34
 934: EQUAL
 935: IFFALSE 945
// sShield := true ;
 937: LD_ADDR_EXP 54
 941: PUSH
 942: LD_INT 1
 944: ST_TO_ADDR
// if p3 = 35 then
 945: LD_VAR 0 3
 949: PUSH
 950: LD_INT 35
 952: EQUAL
 953: IFFALSE 963
// sTime := true ;
 955: LD_ADDR_EXP 55
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// if p3 = 36 then
 963: LD_VAR 0 3
 967: PUSH
 968: LD_INT 36
 970: EQUAL
 971: IFFALSE 981
// sTools := true ;
 973: LD_ADDR_EXP 56
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// if p3 = 101 then
 981: LD_VAR 0 3
 985: PUSH
 986: LD_INT 101
 988: EQUAL
 989: IFFALSE 999
// sSold := true ;
 991: LD_ADDR_EXP 21
 995: PUSH
 996: LD_INT 1
 998: ST_TO_ADDR
// if p3 = 102 then
 999: LD_VAR 0 3
1003: PUSH
1004: LD_INT 102
1006: EQUAL
1007: IFFALSE 1017
// sDiff := true ;
1009: LD_ADDR_EXP 22
1013: PUSH
1014: LD_INT 1
1016: ST_TO_ADDR
// if p3 = 103 then
1017: LD_VAR 0 3
1021: PUSH
1022: LD_INT 103
1024: EQUAL
1025: IFFALSE 1035
// sFog := true ;
1027: LD_ADDR_EXP 25
1031: PUSH
1032: LD_INT 1
1034: ST_TO_ADDR
// if p3 = 104 then
1035: LD_VAR 0 3
1039: PUSH
1040: LD_INT 104
1042: EQUAL
1043: IFFALSE 1053
// sReset := true ;
1045: LD_ADDR_EXP 26
1049: PUSH
1050: LD_INT 1
1052: ST_TO_ADDR
// if p3 = 105 then
1053: LD_VAR 0 3
1057: PUSH
1058: LD_INT 105
1060: EQUAL
1061: IFFALSE 1071
// sSun := true ;
1063: LD_ADDR_EXP 27
1067: PUSH
1068: LD_INT 1
1070: ST_TO_ADDR
// if p3 = 106 then
1071: LD_VAR 0 3
1075: PUSH
1076: LD_INT 106
1078: EQUAL
1079: IFFALSE 1089
// sTiger := true ;
1081: LD_ADDR_EXP 23
1085: PUSH
1086: LD_INT 1
1088: ST_TO_ADDR
// if p3 = 107 then
1089: LD_VAR 0 3
1093: PUSH
1094: LD_INT 107
1096: EQUAL
1097: IFFALSE 1107
// sBomb := true ;
1099: LD_ADDR_EXP 24
1103: PUSH
1104: LD_INT 1
1106: ST_TO_ADDR
// if p3 = 108 then
1107: LD_VAR 0 3
1111: PUSH
1112: LD_INT 108
1114: EQUAL
1115: IFFALSE 1125
// sWound := true ;
1117: LD_ADDR_EXP 32
1121: PUSH
1122: LD_INT 1
1124: ST_TO_ADDR
// if p3 = 109 then
1125: LD_VAR 0 3
1129: PUSH
1130: LD_INT 109
1132: EQUAL
1133: IFFALSE 1143
// sBetray := true ;
1135: LD_ADDR_EXP 36
1139: PUSH
1140: LD_INT 1
1142: ST_TO_ADDR
// if p3 = 110 then
1143: LD_VAR 0 3
1147: PUSH
1148: LD_INT 110
1150: EQUAL
1151: IFFALSE 1161
// sContamin := true ;
1153: LD_ADDR_EXP 37
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// if p3 = 111 then
1161: LD_VAR 0 3
1165: PUSH
1166: LD_INT 111
1168: EQUAL
1169: IFFALSE 1179
// sOil := true ;
1171: LD_ADDR_EXP 39
1175: PUSH
1176: LD_INT 1
1178: ST_TO_ADDR
// if p3 = 112 then
1179: LD_VAR 0 3
1183: PUSH
1184: LD_INT 112
1186: EQUAL
1187: IFFALSE 1197
// sStu := true ;
1189: LD_ADDR_EXP 43
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// if p3 = 113 then
1197: LD_VAR 0 3
1201: PUSH
1202: LD_INT 113
1204: EQUAL
1205: IFFALSE 1215
// sBazooka := true ;
1207: LD_ADDR_EXP 46
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
// if p3 = 114 then
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 114
1222: EQUAL
1223: IFFALSE 1233
// sMortar := true ;
1225: LD_ADDR_EXP 47
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// if p3 = 115 then
1233: LD_VAR 0 3
1237: PUSH
1238: LD_INT 115
1240: EQUAL
1241: IFFALSE 1251
// sRanger := true ;
1243: LD_ADDR_EXP 57
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// if p3 = 116 then
1251: LD_VAR 0 3
1255: PUSH
1256: LD_INT 116
1258: EQUAL
1259: IFFALSE 1269
// sComputer := true ;
1261: LD_ADDR_EXP 58
1265: PUSH
1266: LD_INT 1
1268: ST_TO_ADDR
// if p3 = 117 then
1269: LD_VAR 0 3
1273: PUSH
1274: LD_INT 117
1276: EQUAL
1277: IFFALSE 1287
// s30 := true ;
1279: LD_ADDR_EXP 59
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// if p3 = 118 then
1287: LD_VAR 0 3
1291: PUSH
1292: LD_INT 118
1294: EQUAL
1295: IFFALSE 1305
// s60 := true ;
1297: LD_ADDR_EXP 60
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// end ; if p2 = hack_mode then
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 101
1312: EQUAL
1313: IFFALSE 1441
// begin case p3 of 1 :
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: DOUBLE
1323: EQUAL
1324: IFTRUE 1328
1326: GO 1335
1328: POP
// hHackUnlimitedResources ; 2 :
1329: CALL 13580 0 0
1333: GO 1441
1335: LD_INT 2
1337: DOUBLE
1338: EQUAL
1339: IFTRUE 1343
1341: GO 1350
1343: POP
// hHackSetLevel10 ; 3 :
1344: CALL 13713 0 0
1348: GO 1441
1350: LD_INT 3
1352: DOUBLE
1353: EQUAL
1354: IFTRUE 1358
1356: GO 1365
1358: POP
// hHackSetLevel10YourUnits ; 4 :
1359: CALL 13798 0 0
1363: GO 1441
1365: LD_INT 4
1367: DOUBLE
1368: EQUAL
1369: IFTRUE 1373
1371: GO 1380
1373: POP
// hHackInvincible ; 5 :
1374: CALL 14246 0 0
1378: GO 1441
1380: LD_INT 5
1382: DOUBLE
1383: EQUAL
1384: IFTRUE 1388
1386: GO 1395
1388: POP
// hHackInvisible ; 6 :
1389: CALL 14357 0 0
1393: GO 1441
1395: LD_INT 6
1397: DOUBLE
1398: EQUAL
1399: IFTRUE 1403
1401: GO 1410
1403: POP
// hHackChangeYourSide ; 7 :
1404: CALL 14414 0 0
1408: GO 1441
1410: LD_INT 7
1412: DOUBLE
1413: EQUAL
1414: IFTRUE 1418
1416: GO 1425
1418: POP
// hHackChangeUnitSide ; 8 :
1419: CALL 14456 0 0
1423: GO 1441
1425: LD_INT 8
1427: DOUBLE
1428: EQUAL
1429: IFTRUE 1433
1431: GO 1440
1433: POP
// hHackFog ; end ;
1434: CALL 14557 0 0
1438: GO 1441
1440: POP
// end ; if p2 = game_save_mode then
1441: LD_VAR 0 2
1445: PUSH
1446: LD_INT 102
1448: EQUAL
1449: IFFALSE 1504
// begin if p3 = 1 then
1451: LD_VAR 0 3
1455: PUSH
1456: LD_INT 1
1458: EQUAL
1459: IFFALSE 1471
// globalGameSaveCounter := p4 ;
1461: LD_ADDR_EXP 3
1465: PUSH
1466: LD_VAR 0 4
1470: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1471: LD_VAR 0 3
1475: PUSH
1476: LD_INT 2
1478: EQUAL
1479: PUSH
1480: LD_EXP 3
1484: AND
1485: IFFALSE 1504
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1487: LD_STRING setGameSaveCounter(
1489: PUSH
1490: LD_EXP 3
1494: STR
1495: PUSH
1496: LD_STRING )
1498: STR
1499: PPUSH
1500: CALL_OW 559
// end ; end ;
1504: LD_VAR 0 7
1508: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1509: LD_INT 0
1511: PPUSH
// streamModeActive := false ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// normalCounter := 36 ;
1520: LD_ADDR_EXP 5
1524: PUSH
1525: LD_INT 36
1527: ST_TO_ADDR
// hardcoreCounter := 18 ;
1528: LD_ADDR_EXP 6
1532: PUSH
1533: LD_INT 18
1535: ST_TO_ADDR
// sRocket := false ;
1536: LD_ADDR_EXP 9
1540: PUSH
1541: LD_INT 0
1543: ST_TO_ADDR
// sSpeed := false ;
1544: LD_ADDR_EXP 8
1548: PUSH
1549: LD_INT 0
1551: ST_TO_ADDR
// sEngine := false ;
1552: LD_ADDR_EXP 10
1556: PUSH
1557: LD_INT 0
1559: ST_TO_ADDR
// sSpec := false ;
1560: LD_ADDR_EXP 7
1564: PUSH
1565: LD_INT 0
1567: ST_TO_ADDR
// sLevel := false ;
1568: LD_ADDR_EXP 11
1572: PUSH
1573: LD_INT 0
1575: ST_TO_ADDR
// sArmoury := false ;
1576: LD_ADDR_EXP 12
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// sRadar := false ;
1584: LD_ADDR_EXP 13
1588: PUSH
1589: LD_INT 0
1591: ST_TO_ADDR
// sBunker := false ;
1592: LD_ADDR_EXP 14
1596: PUSH
1597: LD_INT 0
1599: ST_TO_ADDR
// sHack := false ;
1600: LD_ADDR_EXP 15
1604: PUSH
1605: LD_INT 0
1607: ST_TO_ADDR
// sFire := false ;
1608: LD_ADDR_EXP 16
1612: PUSH
1613: LD_INT 0
1615: ST_TO_ADDR
// sRefresh := false ;
1616: LD_ADDR_EXP 17
1620: PUSH
1621: LD_INT 0
1623: ST_TO_ADDR
// sExp := false ;
1624: LD_ADDR_EXP 18
1628: PUSH
1629: LD_INT 0
1631: ST_TO_ADDR
// sDepot := false ;
1632: LD_ADDR_EXP 19
1636: PUSH
1637: LD_INT 0
1639: ST_TO_ADDR
// sFlag := false ;
1640: LD_ADDR_EXP 20
1644: PUSH
1645: LD_INT 0
1647: ST_TO_ADDR
// sKamikadze := false ;
1648: LD_ADDR_EXP 28
1652: PUSH
1653: LD_INT 0
1655: ST_TO_ADDR
// sTroll := false ;
1656: LD_ADDR_EXP 29
1660: PUSH
1661: LD_INT 0
1663: ST_TO_ADDR
// sSlow := false ;
1664: LD_ADDR_EXP 30
1668: PUSH
1669: LD_INT 0
1671: ST_TO_ADDR
// sLack := false ;
1672: LD_ADDR_EXP 31
1676: PUSH
1677: LD_INT 0
1679: ST_TO_ADDR
// sTank := false ;
1680: LD_ADDR_EXP 33
1684: PUSH
1685: LD_INT 0
1687: ST_TO_ADDR
// sRemote := false ;
1688: LD_ADDR_EXP 34
1692: PUSH
1693: LD_INT 0
1695: ST_TO_ADDR
// sPowell := false ;
1696: LD_ADDR_EXP 35
1700: PUSH
1701: LD_INT 0
1703: ST_TO_ADDR
// sTeleport := false ;
1704: LD_ADDR_EXP 38
1708: PUSH
1709: LD_INT 0
1711: ST_TO_ADDR
// sOilTower := false ;
1712: LD_ADDR_EXP 40
1716: PUSH
1717: LD_INT 0
1719: ST_TO_ADDR
// sShovel := false ;
1720: LD_ADDR_EXP 41
1724: PUSH
1725: LD_INT 0
1727: ST_TO_ADDR
// sSheik := false ;
1728: LD_ADDR_EXP 42
1732: PUSH
1733: LD_INT 0
1735: ST_TO_ADDR
// sEarthquake := false ;
1736: LD_ADDR_EXP 44
1740: PUSH
1741: LD_INT 0
1743: ST_TO_ADDR
// sAI := false ;
1744: LD_ADDR_EXP 45
1748: PUSH
1749: LD_INT 0
1751: ST_TO_ADDR
// sCargo := false ;
1752: LD_ADDR_EXP 48
1756: PUSH
1757: LD_INT 0
1759: ST_TO_ADDR
// sDLaser := false ;
1760: LD_ADDR_EXP 49
1764: PUSH
1765: LD_INT 0
1767: ST_TO_ADDR
// sExchange := false ;
1768: LD_ADDR_EXP 50
1772: PUSH
1773: LD_INT 0
1775: ST_TO_ADDR
// sFac := false ;
1776: LD_ADDR_EXP 51
1780: PUSH
1781: LD_INT 0
1783: ST_TO_ADDR
// sPower := false ;
1784: LD_ADDR_EXP 52
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// sRandom := false ;
1792: LD_ADDR_EXP 53
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// sShield := false ;
1800: LD_ADDR_EXP 54
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// sTime := false ;
1808: LD_ADDR_EXP 55
1812: PUSH
1813: LD_INT 0
1815: ST_TO_ADDR
// sTools := false ;
1816: LD_ADDR_EXP 56
1820: PUSH
1821: LD_INT 0
1823: ST_TO_ADDR
// sSold := false ;
1824: LD_ADDR_EXP 21
1828: PUSH
1829: LD_INT 0
1831: ST_TO_ADDR
// sDiff := false ;
1832: LD_ADDR_EXP 22
1836: PUSH
1837: LD_INT 0
1839: ST_TO_ADDR
// sFog := false ;
1840: LD_ADDR_EXP 25
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// sReset := false ;
1848: LD_ADDR_EXP 26
1852: PUSH
1853: LD_INT 0
1855: ST_TO_ADDR
// sSun := false ;
1856: LD_ADDR_EXP 27
1860: PUSH
1861: LD_INT 0
1863: ST_TO_ADDR
// sTiger := false ;
1864: LD_ADDR_EXP 23
1868: PUSH
1869: LD_INT 0
1871: ST_TO_ADDR
// sBomb := false ;
1872: LD_ADDR_EXP 24
1876: PUSH
1877: LD_INT 0
1879: ST_TO_ADDR
// sWound := false ;
1880: LD_ADDR_EXP 32
1884: PUSH
1885: LD_INT 0
1887: ST_TO_ADDR
// sBetray := false ;
1888: LD_ADDR_EXP 36
1892: PUSH
1893: LD_INT 0
1895: ST_TO_ADDR
// sContamin := false ;
1896: LD_ADDR_EXP 37
1900: PUSH
1901: LD_INT 0
1903: ST_TO_ADDR
// sOil := false ;
1904: LD_ADDR_EXP 39
1908: PUSH
1909: LD_INT 0
1911: ST_TO_ADDR
// sStu := false ;
1912: LD_ADDR_EXP 43
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// sBazooka := false ;
1920: LD_ADDR_EXP 46
1924: PUSH
1925: LD_INT 0
1927: ST_TO_ADDR
// sMortar := false ;
1928: LD_ADDR_EXP 47
1932: PUSH
1933: LD_INT 0
1935: ST_TO_ADDR
// sRanger := false ;
1936: LD_ADDR_EXP 57
1940: PUSH
1941: LD_INT 0
1943: ST_TO_ADDR
// sComputer := false ;
1944: LD_ADDR_EXP 58
1948: PUSH
1949: LD_INT 0
1951: ST_TO_ADDR
// s30 := false ;
1952: LD_ADDR_EXP 59
1956: PUSH
1957: LD_INT 0
1959: ST_TO_ADDR
// s60 := false ;
1960: LD_ADDR_EXP 60
1964: PUSH
1965: LD_INT 0
1967: ST_TO_ADDR
// end ;
1968: LD_VAR 0 1
1972: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
1981: PPUSH
// result := [ ] ;
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: EMPTY
1988: ST_TO_ADDR
// if campaign_id = 1 then
1989: LD_OWVAR 69
1993: PUSH
1994: LD_INT 1
1996: EQUAL
1997: IFFALSE 5163
// begin case mission_number of 1 :
1999: LD_OWVAR 70
2003: PUSH
2004: LD_INT 1
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2088
2012: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2013: LD_ADDR_VAR 0 2
2017: PUSH
2018: LD_INT 2
2020: PUSH
2021: LD_INT 4
2023: PUSH
2024: LD_INT 11
2026: PUSH
2027: LD_INT 12
2029: PUSH
2030: LD_INT 15
2032: PUSH
2033: LD_INT 16
2035: PUSH
2036: LD_INT 22
2038: PUSH
2039: LD_INT 23
2041: PUSH
2042: LD_INT 26
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 101
2058: PUSH
2059: LD_INT 102
2061: PUSH
2062: LD_INT 106
2064: PUSH
2065: LD_INT 116
2067: PUSH
2068: LD_INT 117
2070: PUSH
2071: LD_INT 118
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: ST_TO_ADDR
2086: GO 5161
2088: LD_INT 2
2090: DOUBLE
2091: EQUAL
2092: IFTRUE 2096
2094: GO 2180
2096: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2097: LD_ADDR_VAR 0 2
2101: PUSH
2102: LD_INT 2
2104: PUSH
2105: LD_INT 4
2107: PUSH
2108: LD_INT 11
2110: PUSH
2111: LD_INT 12
2113: PUSH
2114: LD_INT 15
2116: PUSH
2117: LD_INT 16
2119: PUSH
2120: LD_INT 22
2122: PUSH
2123: LD_INT 23
2125: PUSH
2126: LD_INT 26
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 101
2142: PUSH
2143: LD_INT 102
2145: PUSH
2146: LD_INT 105
2148: PUSH
2149: LD_INT 106
2151: PUSH
2152: LD_INT 108
2154: PUSH
2155: LD_INT 116
2157: PUSH
2158: LD_INT 117
2160: PUSH
2161: LD_INT 118
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: ST_TO_ADDR
2178: GO 5161
2180: LD_INT 3
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2276
2188: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: LD_INT 2
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 5
2202: PUSH
2203: LD_INT 11
2205: PUSH
2206: LD_INT 12
2208: PUSH
2209: LD_INT 15
2211: PUSH
2212: LD_INT 16
2214: PUSH
2215: LD_INT 22
2217: PUSH
2218: LD_INT 26
2220: PUSH
2221: LD_INT 36
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 101
2238: PUSH
2239: LD_INT 102
2241: PUSH
2242: LD_INT 105
2244: PUSH
2245: LD_INT 106
2247: PUSH
2248: LD_INT 108
2250: PUSH
2251: LD_INT 116
2253: PUSH
2254: LD_INT 117
2256: PUSH
2257: LD_INT 118
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: ST_TO_ADDR
2274: GO 5161
2276: LD_INT 4
2278: DOUBLE
2279: EQUAL
2280: IFTRUE 2284
2282: GO 2380
2284: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_INT 2
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 5
2298: PUSH
2299: LD_INT 8
2301: PUSH
2302: LD_INT 11
2304: PUSH
2305: LD_INT 12
2307: PUSH
2308: LD_INT 15
2310: PUSH
2311: LD_INT 16
2313: PUSH
2314: LD_INT 22
2316: PUSH
2317: LD_INT 23
2319: PUSH
2320: LD_INT 26
2322: PUSH
2323: LD_INT 36
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 101
2342: PUSH
2343: LD_INT 102
2345: PUSH
2346: LD_INT 105
2348: PUSH
2349: LD_INT 106
2351: PUSH
2352: LD_INT 108
2354: PUSH
2355: LD_INT 116
2357: PUSH
2358: LD_INT 117
2360: PUSH
2361: LD_INT 118
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: ST_TO_ADDR
2378: GO 5161
2380: LD_INT 5
2382: DOUBLE
2383: EQUAL
2384: IFTRUE 2388
2386: GO 2500
2388: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 2
2396: PUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 5
2402: PUSH
2403: LD_INT 6
2405: PUSH
2406: LD_INT 8
2408: PUSH
2409: LD_INT 11
2411: PUSH
2412: LD_INT 12
2414: PUSH
2415: LD_INT 15
2417: PUSH
2418: LD_INT 16
2420: PUSH
2421: LD_INT 22
2423: PUSH
2424: LD_INT 23
2426: PUSH
2427: LD_INT 25
2429: PUSH
2430: LD_INT 26
2432: PUSH
2433: LD_INT 36
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 101
2454: PUSH
2455: LD_INT 102
2457: PUSH
2458: LD_INT 105
2460: PUSH
2461: LD_INT 106
2463: PUSH
2464: LD_INT 108
2466: PUSH
2467: LD_INT 109
2469: PUSH
2470: LD_INT 112
2472: PUSH
2473: LD_INT 116
2475: PUSH
2476: LD_INT 117
2478: PUSH
2479: LD_INT 118
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: ST_TO_ADDR
2498: GO 5161
2500: LD_INT 6
2502: DOUBLE
2503: EQUAL
2504: IFTRUE 2508
2506: GO 2640
2508: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2509: LD_ADDR_VAR 0 2
2513: PUSH
2514: LD_INT 2
2516: PUSH
2517: LD_INT 4
2519: PUSH
2520: LD_INT 5
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 8
2528: PUSH
2529: LD_INT 11
2531: PUSH
2532: LD_INT 12
2534: PUSH
2535: LD_INT 15
2537: PUSH
2538: LD_INT 16
2540: PUSH
2541: LD_INT 20
2543: PUSH
2544: LD_INT 21
2546: PUSH
2547: LD_INT 22
2549: PUSH
2550: LD_INT 23
2552: PUSH
2553: LD_INT 25
2555: PUSH
2556: LD_INT 26
2558: PUSH
2559: LD_INT 30
2561: PUSH
2562: LD_INT 31
2564: PUSH
2565: LD_INT 32
2567: PUSH
2568: LD_INT 36
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 101
2594: PUSH
2595: LD_INT 102
2597: PUSH
2598: LD_INT 105
2600: PUSH
2601: LD_INT 106
2603: PUSH
2604: LD_INT 108
2606: PUSH
2607: LD_INT 109
2609: PUSH
2610: LD_INT 112
2612: PUSH
2613: LD_INT 116
2615: PUSH
2616: LD_INT 117
2618: PUSH
2619: LD_INT 118
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: ST_TO_ADDR
2638: GO 5161
2640: LD_INT 7
2642: DOUBLE
2643: EQUAL
2644: IFTRUE 2648
2646: GO 2760
2648: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: LD_INT 5
2662: PUSH
2663: LD_INT 7
2665: PUSH
2666: LD_INT 11
2668: PUSH
2669: LD_INT 12
2671: PUSH
2672: LD_INT 15
2674: PUSH
2675: LD_INT 16
2677: PUSH
2678: LD_INT 20
2680: PUSH
2681: LD_INT 21
2683: PUSH
2684: LD_INT 22
2686: PUSH
2687: LD_INT 23
2689: PUSH
2690: LD_INT 25
2692: PUSH
2693: LD_INT 26
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 101
2714: PUSH
2715: LD_INT 102
2717: PUSH
2718: LD_INT 103
2720: PUSH
2721: LD_INT 105
2723: PUSH
2724: LD_INT 106
2726: PUSH
2727: LD_INT 108
2729: PUSH
2730: LD_INT 112
2732: PUSH
2733: LD_INT 116
2735: PUSH
2736: LD_INT 117
2738: PUSH
2739: LD_INT 118
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: ST_TO_ADDR
2758: GO 5161
2760: LD_INT 8
2762: DOUBLE
2763: EQUAL
2764: IFTRUE 2768
2766: GO 2908
2768: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2769: LD_ADDR_VAR 0 2
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 4
2779: PUSH
2780: LD_INT 5
2782: PUSH
2783: LD_INT 6
2785: PUSH
2786: LD_INT 7
2788: PUSH
2789: LD_INT 8
2791: PUSH
2792: LD_INT 11
2794: PUSH
2795: LD_INT 12
2797: PUSH
2798: LD_INT 15
2800: PUSH
2801: LD_INT 16
2803: PUSH
2804: LD_INT 20
2806: PUSH
2807: LD_INT 21
2809: PUSH
2810: LD_INT 22
2812: PUSH
2813: LD_INT 23
2815: PUSH
2816: LD_INT 25
2818: PUSH
2819: LD_INT 26
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 31
2827: PUSH
2828: LD_INT 32
2830: PUSH
2831: LD_INT 36
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: PUSH
2856: LD_INT 101
2858: PUSH
2859: LD_INT 102
2861: PUSH
2862: LD_INT 103
2864: PUSH
2865: LD_INT 105
2867: PUSH
2868: LD_INT 106
2870: PUSH
2871: LD_INT 108
2873: PUSH
2874: LD_INT 109
2876: PUSH
2877: LD_INT 112
2879: PUSH
2880: LD_INT 116
2882: PUSH
2883: LD_INT 117
2885: PUSH
2886: LD_INT 118
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: ST_TO_ADDR
2906: GO 5161
2908: LD_INT 9
2910: DOUBLE
2911: EQUAL
2912: IFTRUE 2916
2914: GO 3064
2916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2917: LD_ADDR_VAR 0 2
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: LD_INT 4
2927: PUSH
2928: LD_INT 5
2930: PUSH
2931: LD_INT 6
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 8
2939: PUSH
2940: LD_INT 11
2942: PUSH
2943: LD_INT 12
2945: PUSH
2946: LD_INT 15
2948: PUSH
2949: LD_INT 16
2951: PUSH
2952: LD_INT 20
2954: PUSH
2955: LD_INT 21
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 23
2963: PUSH
2964: LD_INT 25
2966: PUSH
2967: LD_INT 26
2969: PUSH
2970: LD_INT 28
2972: PUSH
2973: LD_INT 30
2975: PUSH
2976: LD_INT 31
2978: PUSH
2979: LD_INT 32
2981: PUSH
2982: LD_INT 36
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 101
3010: PUSH
3011: LD_INT 102
3013: PUSH
3014: LD_INT 103
3016: PUSH
3017: LD_INT 105
3019: PUSH
3020: LD_INT 106
3022: PUSH
3023: LD_INT 108
3025: PUSH
3026: LD_INT 109
3028: PUSH
3029: LD_INT 112
3031: PUSH
3032: LD_INT 114
3034: PUSH
3035: LD_INT 116
3037: PUSH
3038: LD_INT 117
3040: PUSH
3041: LD_INT 118
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: ST_TO_ADDR
3062: GO 5161
3064: LD_INT 10
3066: DOUBLE
3067: EQUAL
3068: IFTRUE 3072
3070: GO 3268
3072: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: LD_INT 2
3080: PUSH
3081: LD_INT 4
3083: PUSH
3084: LD_INT 5
3086: PUSH
3087: LD_INT 6
3089: PUSH
3090: LD_INT 7
3092: PUSH
3093: LD_INT 8
3095: PUSH
3096: LD_INT 9
3098: PUSH
3099: LD_INT 10
3101: PUSH
3102: LD_INT 11
3104: PUSH
3105: LD_INT 12
3107: PUSH
3108: LD_INT 13
3110: PUSH
3111: LD_INT 14
3113: PUSH
3114: LD_INT 15
3116: PUSH
3117: LD_INT 16
3119: PUSH
3120: LD_INT 17
3122: PUSH
3123: LD_INT 18
3125: PUSH
3126: LD_INT 19
3128: PUSH
3129: LD_INT 20
3131: PUSH
3132: LD_INT 21
3134: PUSH
3135: LD_INT 22
3137: PUSH
3138: LD_INT 23
3140: PUSH
3141: LD_INT 24
3143: PUSH
3144: LD_INT 25
3146: PUSH
3147: LD_INT 26
3149: PUSH
3150: LD_INT 28
3152: PUSH
3153: LD_INT 30
3155: PUSH
3156: LD_INT 31
3158: PUSH
3159: LD_INT 32
3161: PUSH
3162: LD_INT 36
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 101
3198: PUSH
3199: LD_INT 102
3201: PUSH
3202: LD_INT 103
3204: PUSH
3205: LD_INT 104
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 106
3213: PUSH
3214: LD_INT 107
3216: PUSH
3217: LD_INT 108
3219: PUSH
3220: LD_INT 109
3222: PUSH
3223: LD_INT 110
3225: PUSH
3226: LD_INT 111
3228: PUSH
3229: LD_INT 112
3231: PUSH
3232: LD_INT 114
3234: PUSH
3235: LD_INT 116
3237: PUSH
3238: LD_INT 117
3240: PUSH
3241: LD_INT 118
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: ST_TO_ADDR
3266: GO 5161
3268: LD_INT 11
3270: DOUBLE
3271: EQUAL
3272: IFTRUE 3276
3274: GO 3480
3276: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 4
3290: PUSH
3291: LD_INT 5
3293: PUSH
3294: LD_INT 6
3296: PUSH
3297: LD_INT 7
3299: PUSH
3300: LD_INT 8
3302: PUSH
3303: LD_INT 9
3305: PUSH
3306: LD_INT 10
3308: PUSH
3309: LD_INT 11
3311: PUSH
3312: LD_INT 12
3314: PUSH
3315: LD_INT 13
3317: PUSH
3318: LD_INT 14
3320: PUSH
3321: LD_INT 15
3323: PUSH
3324: LD_INT 16
3326: PUSH
3327: LD_INT 17
3329: PUSH
3330: LD_INT 18
3332: PUSH
3333: LD_INT 19
3335: PUSH
3336: LD_INT 20
3338: PUSH
3339: LD_INT 21
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_INT 23
3347: PUSH
3348: LD_INT 24
3350: PUSH
3351: LD_INT 25
3353: PUSH
3354: LD_INT 26
3356: PUSH
3357: LD_INT 28
3359: PUSH
3360: LD_INT 30
3362: PUSH
3363: LD_INT 31
3365: PUSH
3366: LD_INT 32
3368: PUSH
3369: LD_INT 34
3371: PUSH
3372: LD_INT 36
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_INT 101
3410: PUSH
3411: LD_INT 102
3413: PUSH
3414: LD_INT 103
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 105
3422: PUSH
3423: LD_INT 106
3425: PUSH
3426: LD_INT 107
3428: PUSH
3429: LD_INT 108
3431: PUSH
3432: LD_INT 109
3434: PUSH
3435: LD_INT 110
3437: PUSH
3438: LD_INT 111
3440: PUSH
3441: LD_INT 112
3443: PUSH
3444: LD_INT 114
3446: PUSH
3447: LD_INT 116
3449: PUSH
3450: LD_INT 117
3452: PUSH
3453: LD_INT 118
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: ST_TO_ADDR
3478: GO 5161
3480: LD_INT 12
3482: DOUBLE
3483: EQUAL
3484: IFTRUE 3488
3486: GO 3708
3488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3489: LD_ADDR_VAR 0 2
3493: PUSH
3494: LD_INT 1
3496: PUSH
3497: LD_INT 2
3499: PUSH
3500: LD_INT 3
3502: PUSH
3503: LD_INT 4
3505: PUSH
3506: LD_INT 5
3508: PUSH
3509: LD_INT 6
3511: PUSH
3512: LD_INT 7
3514: PUSH
3515: LD_INT 8
3517: PUSH
3518: LD_INT 9
3520: PUSH
3521: LD_INT 10
3523: PUSH
3524: LD_INT 11
3526: PUSH
3527: LD_INT 12
3529: PUSH
3530: LD_INT 13
3532: PUSH
3533: LD_INT 14
3535: PUSH
3536: LD_INT 15
3538: PUSH
3539: LD_INT 16
3541: PUSH
3542: LD_INT 17
3544: PUSH
3545: LD_INT 18
3547: PUSH
3548: LD_INT 19
3550: PUSH
3551: LD_INT 20
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 22
3559: PUSH
3560: LD_INT 23
3562: PUSH
3563: LD_INT 24
3565: PUSH
3566: LD_INT 25
3568: PUSH
3569: LD_INT 26
3571: PUSH
3572: LD_INT 27
3574: PUSH
3575: LD_INT 28
3577: PUSH
3578: LD_INT 30
3580: PUSH
3581: LD_INT 31
3583: PUSH
3584: LD_INT 32
3586: PUSH
3587: LD_INT 33
3589: PUSH
3590: LD_INT 34
3592: PUSH
3593: LD_INT 36
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: PUSH
3632: LD_INT 101
3634: PUSH
3635: LD_INT 102
3637: PUSH
3638: LD_INT 103
3640: PUSH
3641: LD_INT 104
3643: PUSH
3644: LD_INT 105
3646: PUSH
3647: LD_INT 106
3649: PUSH
3650: LD_INT 107
3652: PUSH
3653: LD_INT 108
3655: PUSH
3656: LD_INT 109
3658: PUSH
3659: LD_INT 110
3661: PUSH
3662: LD_INT 111
3664: PUSH
3665: LD_INT 112
3667: PUSH
3668: LD_INT 113
3670: PUSH
3671: LD_INT 114
3673: PUSH
3674: LD_INT 116
3676: PUSH
3677: LD_INT 117
3679: PUSH
3680: LD_INT 118
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: ST_TO_ADDR
3706: GO 5161
3708: LD_INT 13
3710: DOUBLE
3711: EQUAL
3712: IFTRUE 3716
3714: GO 3924
3716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3717: LD_ADDR_VAR 0 2
3721: PUSH
3722: LD_INT 1
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 4
3733: PUSH
3734: LD_INT 5
3736: PUSH
3737: LD_INT 8
3739: PUSH
3740: LD_INT 9
3742: PUSH
3743: LD_INT 10
3745: PUSH
3746: LD_INT 11
3748: PUSH
3749: LD_INT 12
3751: PUSH
3752: LD_INT 14
3754: PUSH
3755: LD_INT 15
3757: PUSH
3758: LD_INT 16
3760: PUSH
3761: LD_INT 17
3763: PUSH
3764: LD_INT 18
3766: PUSH
3767: LD_INT 19
3769: PUSH
3770: LD_INT 20
3772: PUSH
3773: LD_INT 21
3775: PUSH
3776: LD_INT 22
3778: PUSH
3779: LD_INT 23
3781: PUSH
3782: LD_INT 24
3784: PUSH
3785: LD_INT 25
3787: PUSH
3788: LD_INT 26
3790: PUSH
3791: LD_INT 27
3793: PUSH
3794: LD_INT 28
3796: PUSH
3797: LD_INT 30
3799: PUSH
3800: LD_INT 31
3802: PUSH
3803: LD_INT 32
3805: PUSH
3806: LD_INT 33
3808: PUSH
3809: LD_INT 34
3811: PUSH
3812: LD_INT 36
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 101
3850: PUSH
3851: LD_INT 102
3853: PUSH
3854: LD_INT 103
3856: PUSH
3857: LD_INT 104
3859: PUSH
3860: LD_INT 105
3862: PUSH
3863: LD_INT 106
3865: PUSH
3866: LD_INT 107
3868: PUSH
3869: LD_INT 108
3871: PUSH
3872: LD_INT 109
3874: PUSH
3875: LD_INT 110
3877: PUSH
3878: LD_INT 111
3880: PUSH
3881: LD_INT 112
3883: PUSH
3884: LD_INT 113
3886: PUSH
3887: LD_INT 114
3889: PUSH
3890: LD_INT 116
3892: PUSH
3893: LD_INT 117
3895: PUSH
3896: LD_INT 118
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: ST_TO_ADDR
3922: GO 5161
3924: LD_INT 14
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3932
3930: GO 4156
3932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 2
3943: PUSH
3944: LD_INT 3
3946: PUSH
3947: LD_INT 4
3949: PUSH
3950: LD_INT 5
3952: PUSH
3953: LD_INT 6
3955: PUSH
3956: LD_INT 7
3958: PUSH
3959: LD_INT 8
3961: PUSH
3962: LD_INT 9
3964: PUSH
3965: LD_INT 10
3967: PUSH
3968: LD_INT 11
3970: PUSH
3971: LD_INT 12
3973: PUSH
3974: LD_INT 13
3976: PUSH
3977: LD_INT 14
3979: PUSH
3980: LD_INT 15
3982: PUSH
3983: LD_INT 16
3985: PUSH
3986: LD_INT 17
3988: PUSH
3989: LD_INT 18
3991: PUSH
3992: LD_INT 19
3994: PUSH
3995: LD_INT 20
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 22
4003: PUSH
4004: LD_INT 23
4006: PUSH
4007: LD_INT 24
4009: PUSH
4010: LD_INT 25
4012: PUSH
4013: LD_INT 26
4015: PUSH
4016: LD_INT 27
4018: PUSH
4019: LD_INT 28
4021: PUSH
4022: LD_INT 29
4024: PUSH
4025: LD_INT 30
4027: PUSH
4028: LD_INT 31
4030: PUSH
4031: LD_INT 32
4033: PUSH
4034: LD_INT 33
4036: PUSH
4037: LD_INT 34
4039: PUSH
4040: LD_INT 36
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_INT 101
4082: PUSH
4083: LD_INT 102
4085: PUSH
4086: LD_INT 103
4088: PUSH
4089: LD_INT 104
4091: PUSH
4092: LD_INT 105
4094: PUSH
4095: LD_INT 106
4097: PUSH
4098: LD_INT 107
4100: PUSH
4101: LD_INT 108
4103: PUSH
4104: LD_INT 109
4106: PUSH
4107: LD_INT 110
4109: PUSH
4110: LD_INT 111
4112: PUSH
4113: LD_INT 112
4115: PUSH
4116: LD_INT 113
4118: PUSH
4119: LD_INT 114
4121: PUSH
4122: LD_INT 116
4124: PUSH
4125: LD_INT 117
4127: PUSH
4128: LD_INT 118
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 5161
4156: LD_INT 15
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4388
4164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: LD_INT 1
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 3
4178: PUSH
4179: LD_INT 4
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: LD_INT 6
4187: PUSH
4188: LD_INT 7
4190: PUSH
4191: LD_INT 8
4193: PUSH
4194: LD_INT 9
4196: PUSH
4197: LD_INT 10
4199: PUSH
4200: LD_INT 11
4202: PUSH
4203: LD_INT 12
4205: PUSH
4206: LD_INT 13
4208: PUSH
4209: LD_INT 14
4211: PUSH
4212: LD_INT 15
4214: PUSH
4215: LD_INT 16
4217: PUSH
4218: LD_INT 17
4220: PUSH
4221: LD_INT 18
4223: PUSH
4224: LD_INT 19
4226: PUSH
4227: LD_INT 20
4229: PUSH
4230: LD_INT 21
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 23
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 25
4244: PUSH
4245: LD_INT 26
4247: PUSH
4248: LD_INT 27
4250: PUSH
4251: LD_INT 28
4253: PUSH
4254: LD_INT 29
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: LD_INT 32
4265: PUSH
4266: LD_INT 33
4268: PUSH
4269: LD_INT 34
4271: PUSH
4272: LD_INT 36
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 102
4317: PUSH
4318: LD_INT 103
4320: PUSH
4321: LD_INT 104
4323: PUSH
4324: LD_INT 105
4326: PUSH
4327: LD_INT 106
4329: PUSH
4330: LD_INT 107
4332: PUSH
4333: LD_INT 108
4335: PUSH
4336: LD_INT 109
4338: PUSH
4339: LD_INT 110
4341: PUSH
4342: LD_INT 111
4344: PUSH
4345: LD_INT 112
4347: PUSH
4348: LD_INT 113
4350: PUSH
4351: LD_INT 114
4353: PUSH
4354: LD_INT 116
4356: PUSH
4357: LD_INT 117
4359: PUSH
4360: LD_INT 118
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: ST_TO_ADDR
4386: GO 5161
4388: LD_INT 16
4390: DOUBLE
4391: EQUAL
4392: IFTRUE 4396
4394: GO 4532
4396: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4397: LD_ADDR_VAR 0 2
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 7
4413: PUSH
4414: LD_INT 11
4416: PUSH
4417: LD_INT 12
4419: PUSH
4420: LD_INT 15
4422: PUSH
4423: LD_INT 16
4425: PUSH
4426: LD_INT 20
4428: PUSH
4429: LD_INT 21
4431: PUSH
4432: LD_INT 22
4434: PUSH
4435: LD_INT 23
4437: PUSH
4438: LD_INT 25
4440: PUSH
4441: LD_INT 26
4443: PUSH
4444: LD_INT 30
4446: PUSH
4447: LD_INT 31
4449: PUSH
4450: LD_INT 32
4452: PUSH
4453: LD_INT 33
4455: PUSH
4456: LD_INT 34
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 101
4482: PUSH
4483: LD_INT 102
4485: PUSH
4486: LD_INT 103
4488: PUSH
4489: LD_INT 106
4491: PUSH
4492: LD_INT 108
4494: PUSH
4495: LD_INT 112
4497: PUSH
4498: LD_INT 113
4500: PUSH
4501: LD_INT 114
4503: PUSH
4504: LD_INT 116
4506: PUSH
4507: LD_INT 117
4509: PUSH
4510: LD_INT 118
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
4530: GO 5161
4532: LD_INT 17
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4764
4540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: LD_INT 4
4557: PUSH
4558: LD_INT 5
4560: PUSH
4561: LD_INT 6
4563: PUSH
4564: LD_INT 7
4566: PUSH
4567: LD_INT 8
4569: PUSH
4570: LD_INT 9
4572: PUSH
4573: LD_INT 10
4575: PUSH
4576: LD_INT 11
4578: PUSH
4579: LD_INT 12
4581: PUSH
4582: LD_INT 13
4584: PUSH
4585: LD_INT 14
4587: PUSH
4588: LD_INT 15
4590: PUSH
4591: LD_INT 16
4593: PUSH
4594: LD_INT 17
4596: PUSH
4597: LD_INT 18
4599: PUSH
4600: LD_INT 19
4602: PUSH
4603: LD_INT 20
4605: PUSH
4606: LD_INT 21
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 23
4614: PUSH
4615: LD_INT 24
4617: PUSH
4618: LD_INT 25
4620: PUSH
4621: LD_INT 26
4623: PUSH
4624: LD_INT 27
4626: PUSH
4627: LD_INT 28
4629: PUSH
4630: LD_INT 29
4632: PUSH
4633: LD_INT 30
4635: PUSH
4636: LD_INT 31
4638: PUSH
4639: LD_INT 32
4641: PUSH
4642: LD_INT 33
4644: PUSH
4645: LD_INT 34
4647: PUSH
4648: LD_INT 36
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 101
4690: PUSH
4691: LD_INT 102
4693: PUSH
4694: LD_INT 103
4696: PUSH
4697: LD_INT 104
4699: PUSH
4700: LD_INT 105
4702: PUSH
4703: LD_INT 106
4705: PUSH
4706: LD_INT 107
4708: PUSH
4709: LD_INT 108
4711: PUSH
4712: LD_INT 109
4714: PUSH
4715: LD_INT 110
4717: PUSH
4718: LD_INT 111
4720: PUSH
4721: LD_INT 112
4723: PUSH
4724: LD_INT 113
4726: PUSH
4727: LD_INT 114
4729: PUSH
4730: LD_INT 116
4732: PUSH
4733: LD_INT 117
4735: PUSH
4736: LD_INT 118
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: ST_TO_ADDR
4762: GO 5161
4764: LD_INT 18
4766: DOUBLE
4767: EQUAL
4768: IFTRUE 4772
4770: GO 4920
4772: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 4
4783: PUSH
4784: LD_INT 5
4786: PUSH
4787: LD_INT 7
4789: PUSH
4790: LD_INT 11
4792: PUSH
4793: LD_INT 12
4795: PUSH
4796: LD_INT 15
4798: PUSH
4799: LD_INT 16
4801: PUSH
4802: LD_INT 20
4804: PUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 22
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 26
4819: PUSH
4820: LD_INT 30
4822: PUSH
4823: LD_INT 31
4825: PUSH
4826: LD_INT 32
4828: PUSH
4829: LD_INT 33
4831: PUSH
4832: LD_INT 34
4834: PUSH
4835: LD_INT 35
4837: PUSH
4838: LD_INT 36
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 101
4866: PUSH
4867: LD_INT 102
4869: PUSH
4870: LD_INT 103
4872: PUSH
4873: LD_INT 106
4875: PUSH
4876: LD_INT 108
4878: PUSH
4879: LD_INT 112
4881: PUSH
4882: LD_INT 113
4884: PUSH
4885: LD_INT 114
4887: PUSH
4888: LD_INT 115
4890: PUSH
4891: LD_INT 116
4893: PUSH
4894: LD_INT 117
4896: PUSH
4897: LD_INT 118
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: ST_TO_ADDR
4918: GO 5161
4920: LD_INT 19
4922: DOUBLE
4923: EQUAL
4924: IFTRUE 4928
4926: GO 5160
4928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_INT 1
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 3
4942: PUSH
4943: LD_INT 4
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: LD_INT 6
4951: PUSH
4952: LD_INT 7
4954: PUSH
4955: LD_INT 8
4957: PUSH
4958: LD_INT 9
4960: PUSH
4961: LD_INT 10
4963: PUSH
4964: LD_INT 11
4966: PUSH
4967: LD_INT 12
4969: PUSH
4970: LD_INT 13
4972: PUSH
4973: LD_INT 14
4975: PUSH
4976: LD_INT 15
4978: PUSH
4979: LD_INT 16
4981: PUSH
4982: LD_INT 17
4984: PUSH
4985: LD_INT 18
4987: PUSH
4988: LD_INT 19
4990: PUSH
4991: LD_INT 20
4993: PUSH
4994: LD_INT 21
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 23
5002: PUSH
5003: LD_INT 24
5005: PUSH
5006: LD_INT 25
5008: PUSH
5009: LD_INT 26
5011: PUSH
5012: LD_INT 27
5014: PUSH
5015: LD_INT 28
5017: PUSH
5018: LD_INT 29
5020: PUSH
5021: LD_INT 30
5023: PUSH
5024: LD_INT 31
5026: PUSH
5027: LD_INT 32
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 34
5035: PUSH
5036: LD_INT 35
5038: PUSH
5039: LD_INT 36
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 101
5082: PUSH
5083: LD_INT 102
5085: PUSH
5086: LD_INT 103
5088: PUSH
5089: LD_INT 104
5091: PUSH
5092: LD_INT 105
5094: PUSH
5095: LD_INT 106
5097: PUSH
5098: LD_INT 107
5100: PUSH
5101: LD_INT 108
5103: PUSH
5104: LD_INT 109
5106: PUSH
5107: LD_INT 110
5109: PUSH
5110: LD_INT 111
5112: PUSH
5113: LD_INT 112
5115: PUSH
5116: LD_INT 113
5118: PUSH
5119: LD_INT 114
5121: PUSH
5122: LD_INT 115
5124: PUSH
5125: LD_INT 116
5127: PUSH
5128: LD_INT 117
5130: PUSH
5131: LD_INT 118
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: ST_TO_ADDR
5158: GO 5161
5160: POP
// end else
5161: GO 5392
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5163: LD_ADDR_VAR 0 2
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 4
5179: PUSH
5180: LD_INT 5
5182: PUSH
5183: LD_INT 6
5185: PUSH
5186: LD_INT 7
5188: PUSH
5189: LD_INT 8
5191: PUSH
5192: LD_INT 9
5194: PUSH
5195: LD_INT 10
5197: PUSH
5198: LD_INT 11
5200: PUSH
5201: LD_INT 12
5203: PUSH
5204: LD_INT 13
5206: PUSH
5207: LD_INT 14
5209: PUSH
5210: LD_INT 15
5212: PUSH
5213: LD_INT 16
5215: PUSH
5216: LD_INT 17
5218: PUSH
5219: LD_INT 18
5221: PUSH
5222: LD_INT 19
5224: PUSH
5225: LD_INT 20
5227: PUSH
5228: LD_INT 21
5230: PUSH
5231: LD_INT 22
5233: PUSH
5234: LD_INT 23
5236: PUSH
5237: LD_INT 24
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 26
5245: PUSH
5246: LD_INT 27
5248: PUSH
5249: LD_INT 28
5251: PUSH
5252: LD_INT 29
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 31
5260: PUSH
5261: LD_INT 32
5263: PUSH
5264: LD_INT 33
5266: PUSH
5267: LD_INT 34
5269: PUSH
5270: LD_INT 35
5272: PUSH
5273: LD_INT 36
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 101
5316: PUSH
5317: LD_INT 102
5319: PUSH
5320: LD_INT 103
5322: PUSH
5323: LD_INT 104
5325: PUSH
5326: LD_INT 105
5328: PUSH
5329: LD_INT 106
5331: PUSH
5332: LD_INT 107
5334: PUSH
5335: LD_INT 108
5337: PUSH
5338: LD_INT 109
5340: PUSH
5341: LD_INT 110
5343: PUSH
5344: LD_INT 111
5346: PUSH
5347: LD_INT 112
5349: PUSH
5350: LD_INT 113
5352: PUSH
5353: LD_INT 114
5355: PUSH
5356: LD_INT 115
5358: PUSH
5359: LD_INT 116
5361: PUSH
5362: LD_INT 117
5364: PUSH
5365: LD_INT 118
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: ST_TO_ADDR
// if result then
5392: LD_VAR 0 2
5396: IFFALSE 6182
// begin normal :=  ;
5398: LD_ADDR_VAR 0 5
5402: PUSH
5403: LD_STRING 
5405: ST_TO_ADDR
// hardcore :=  ;
5406: LD_ADDR_VAR 0 6
5410: PUSH
5411: LD_STRING 
5413: ST_TO_ADDR
// active :=  ;
5414: LD_ADDR_VAR 0 7
5418: PUSH
5419: LD_STRING 
5421: ST_TO_ADDR
// for i = 1 to normalCounter do
5422: LD_ADDR_VAR 0 8
5426: PUSH
5427: DOUBLE
5428: LD_INT 1
5430: DEC
5431: ST_TO_ADDR
5432: LD_EXP 5
5436: PUSH
5437: FOR_TO
5438: IFFALSE 5539
// begin tmp := 0 ;
5440: LD_ADDR_VAR 0 3
5444: PUSH
5445: LD_STRING 0
5447: ST_TO_ADDR
// if result [ 1 ] then
5448: LD_VAR 0 2
5452: PUSH
5453: LD_INT 1
5455: ARRAY
5456: IFFALSE 5521
// if result [ 1 ] [ 1 ] = i then
5458: LD_VAR 0 2
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 1
5469: ARRAY
5470: PUSH
5471: LD_VAR 0 8
5475: EQUAL
5476: IFFALSE 5521
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_VAR 0 2
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: LD_VAR 0 2
5495: PUSH
5496: LD_INT 1
5498: ARRAY
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// tmp := 1 ;
5513: LD_ADDR_VAR 0 3
5517: PUSH
5518: LD_STRING 1
5520: ST_TO_ADDR
// end ; normal := normal & tmp ;
5521: LD_ADDR_VAR 0 5
5525: PUSH
5526: LD_VAR 0 5
5530: PUSH
5531: LD_VAR 0 3
5535: STR
5536: ST_TO_ADDR
// end ;
5537: GO 5437
5539: POP
5540: POP
// for i = 1 to hardcoreCounter do
5541: LD_ADDR_VAR 0 8
5545: PUSH
5546: DOUBLE
5547: LD_INT 1
5549: DEC
5550: ST_TO_ADDR
5551: LD_EXP 6
5555: PUSH
5556: FOR_TO
5557: IFFALSE 5662
// begin tmp := 0 ;
5559: LD_ADDR_VAR 0 3
5563: PUSH
5564: LD_STRING 0
5566: ST_TO_ADDR
// if result [ 2 ] then
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: IFFALSE 5644
// if result [ 2 ] [ 1 ] = 100 + i then
5577: LD_VAR 0 2
5581: PUSH
5582: LD_INT 2
5584: ARRAY
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PUSH
5590: LD_INT 100
5592: PUSH
5593: LD_VAR 0 8
5597: PLUS
5598: EQUAL
5599: IFFALSE 5644
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: LD_INT 2
5613: PPUSH
5614: LD_VAR 0 2
5618: PUSH
5619: LD_INT 2
5621: ARRAY
5622: PPUSH
5623: LD_INT 1
5625: PPUSH
5626: CALL_OW 3
5630: PPUSH
5631: CALL_OW 1
5635: ST_TO_ADDR
// tmp := 1 ;
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: LD_STRING 1
5643: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: LD_VAR 0 6
5653: PUSH
5654: LD_VAR 0 3
5658: STR
5659: ST_TO_ADDR
// end ;
5660: GO 5556
5662: POP
5663: POP
// if isGameLoad then
5664: LD_VAR 0 1
5668: IFFALSE 6143
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5670: LD_ADDR_VAR 0 4
5674: PUSH
5675: LD_EXP 9
5679: PUSH
5680: LD_EXP 8
5684: PUSH
5685: LD_EXP 10
5689: PUSH
5690: LD_EXP 7
5694: PUSH
5695: LD_EXP 11
5699: PUSH
5700: LD_EXP 12
5704: PUSH
5705: LD_EXP 13
5709: PUSH
5710: LD_EXP 14
5714: PUSH
5715: LD_EXP 15
5719: PUSH
5720: LD_EXP 16
5724: PUSH
5725: LD_EXP 17
5729: PUSH
5730: LD_EXP 18
5734: PUSH
5735: LD_EXP 19
5739: PUSH
5740: LD_EXP 20
5744: PUSH
5745: LD_EXP 28
5749: PUSH
5750: LD_EXP 29
5754: PUSH
5755: LD_EXP 30
5759: PUSH
5760: LD_EXP 31
5764: PUSH
5765: LD_EXP 33
5769: PUSH
5770: LD_EXP 34
5774: PUSH
5775: LD_EXP 35
5779: PUSH
5780: LD_EXP 38
5784: PUSH
5785: LD_EXP 40
5789: PUSH
5790: LD_EXP 41
5794: PUSH
5795: LD_EXP 42
5799: PUSH
5800: LD_EXP 44
5804: PUSH
5805: LD_EXP 45
5809: PUSH
5810: LD_EXP 48
5814: PUSH
5815: LD_EXP 49
5819: PUSH
5820: LD_EXP 50
5824: PUSH
5825: LD_EXP 51
5829: PUSH
5830: LD_EXP 52
5834: PUSH
5835: LD_EXP 53
5839: PUSH
5840: LD_EXP 54
5844: PUSH
5845: LD_EXP 55
5849: PUSH
5850: LD_EXP 56
5854: PUSH
5855: LD_EXP 21
5859: PUSH
5860: LD_EXP 22
5864: PUSH
5865: LD_EXP 25
5869: PUSH
5870: LD_EXP 26
5874: PUSH
5875: LD_EXP 27
5879: PUSH
5880: LD_EXP 23
5884: PUSH
5885: LD_EXP 24
5889: PUSH
5890: LD_EXP 32
5894: PUSH
5895: LD_EXP 36
5899: PUSH
5900: LD_EXP 37
5904: PUSH
5905: LD_EXP 39
5909: PUSH
5910: LD_EXP 43
5914: PUSH
5915: LD_EXP 46
5919: PUSH
5920: LD_EXP 47
5924: PUSH
5925: LD_EXP 57
5929: PUSH
5930: LD_EXP 58
5934: PUSH
5935: LD_EXP 59
5939: PUSH
5940: LD_EXP 60
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: ST_TO_ADDR
// tmp :=  ;
6001: LD_ADDR_VAR 0 3
6005: PUSH
6006: LD_STRING 
6008: ST_TO_ADDR
// for i = 1 to normalCounter do
6009: LD_ADDR_VAR 0 8
6013: PUSH
6014: DOUBLE
6015: LD_INT 1
6017: DEC
6018: ST_TO_ADDR
6019: LD_EXP 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6061
// begin if flags [ i ] then
6027: LD_VAR 0 4
6031: PUSH
6032: LD_VAR 0 8
6036: ARRAY
6037: IFFALSE 6059
// tmp := tmp & i & ; ;
6039: LD_ADDR_VAR 0 3
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: LD_VAR 0 8
6053: STR
6054: PUSH
6055: LD_STRING ;
6057: STR
6058: ST_TO_ADDR
// end ;
6059: GO 6024
6061: POP
6062: POP
// for i = 1 to hardcoreCounter do
6063: LD_ADDR_VAR 0 8
6067: PUSH
6068: DOUBLE
6069: LD_INT 1
6071: DEC
6072: ST_TO_ADDR
6073: LD_EXP 6
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6125
// begin if flags [ normalCounter + i ] then
6081: LD_VAR 0 4
6085: PUSH
6086: LD_EXP 5
6090: PUSH
6091: LD_VAR 0 8
6095: PLUS
6096: ARRAY
6097: IFFALSE 6123
// tmp := tmp & ( 100 + i ) & ; ;
6099: LD_ADDR_VAR 0 3
6103: PUSH
6104: LD_VAR 0 3
6108: PUSH
6109: LD_INT 100
6111: PUSH
6112: LD_VAR 0 8
6116: PLUS
6117: STR
6118: PUSH
6119: LD_STRING ;
6121: STR
6122: ST_TO_ADDR
// end ;
6123: GO 6078
6125: POP
6126: POP
// if tmp then
6127: LD_VAR 0 3
6131: IFFALSE 6143
// active := tmp ;
6133: LD_ADDR_VAR 0 7
6137: PUSH
6138: LD_VAR 0 3
6142: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6143: LD_STRING getStreamItemsFromMission("
6145: PUSH
6146: LD_VAR 0 5
6150: STR
6151: PUSH
6152: LD_STRING ","
6154: STR
6155: PUSH
6156: LD_VAR 0 6
6160: STR
6161: PUSH
6162: LD_STRING ","
6164: STR
6165: PUSH
6166: LD_VAR 0 7
6170: STR
6171: PUSH
6172: LD_STRING ")
6174: STR
6175: PPUSH
6176: CALL_OW 559
// end else
6180: GO 6189
// ToLua ( getStreamItemsFromMission("","","") ) ;
6182: LD_STRING getStreamItemsFromMission("","","")
6184: PPUSH
6185: CALL_OW 559
// end ;
6189: LD_VAR 0 2
6193: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6194: LD_EXP 4
6198: PUSH
6199: LD_EXP 9
6203: AND
6204: IFFALSE 6328
6206: GO 6208
6208: DISABLE
6209: LD_INT 0
6211: PPUSH
6212: PPUSH
// begin enable ;
6213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_INT 22
6221: PUSH
6222: LD_OWVAR 2
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 2
6233: PUSH
6234: LD_INT 34
6236: PUSH
6237: LD_INT 7
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 34
6246: PUSH
6247: LD_INT 45
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 34
6256: PUSH
6257: LD_INT 28
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 34
6266: PUSH
6267: LD_INT 47
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// if not tmp then
6290: LD_VAR 0 2
6294: NOT
6295: IFFALSE 6299
// exit ;
6297: GO 6328
// for i in tmp do
6299: LD_ADDR_VAR 0 1
6303: PUSH
6304: LD_VAR 0 2
6308: PUSH
6309: FOR_IN
6310: IFFALSE 6326
// begin SetLives ( i , 0 ) ;
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_INT 0
6319: PPUSH
6320: CALL_OW 234
// end ;
6324: GO 6309
6326: POP
6327: POP
// end ;
6328: PPOPN 2
6330: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6331: LD_EXP 4
6335: PUSH
6336: LD_EXP 10
6340: AND
6341: IFFALSE 6425
6343: GO 6345
6345: DISABLE
6346: LD_INT 0
6348: PPUSH
6349: PPUSH
// begin enable ;
6350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6351: LD_ADDR_VAR 0 2
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_OWVAR 2
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 32
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 69
6386: ST_TO_ADDR
// if not tmp then
6387: LD_VAR 0 2
6391: NOT
6392: IFFALSE 6396
// exit ;
6394: GO 6425
// for i in tmp do
6396: LD_ADDR_VAR 0 1
6400: PUSH
6401: LD_VAR 0 2
6405: PUSH
6406: FOR_IN
6407: IFFALSE 6423
// begin SetLives ( i , 0 ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_INT 0
6416: PPUSH
6417: CALL_OW 234
// end ;
6421: GO 6406
6423: POP
6424: POP
// end ;
6425: PPOPN 2
6427: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6428: LD_EXP 4
6432: PUSH
6433: LD_EXP 7
6437: AND
6438: IFFALSE 6531
6440: GO 6442
6442: DISABLE
6443: LD_INT 0
6445: PPUSH
// begin enable ;
6446: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6447: LD_ADDR_VAR 0 1
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_OWVAR 2
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 5
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 9
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 8
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 69
6511: PUSH
6512: FOR_IN
6513: IFFALSE 6529
// begin SetClass ( i , 1 ) ;
6515: LD_VAR 0 1
6519: PPUSH
6520: LD_INT 1
6522: PPUSH
6523: CALL_OW 336
// end ;
6527: GO 6512
6529: POP
6530: POP
// end ;
6531: PPOPN 1
6533: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6534: LD_EXP 4
6538: PUSH
6539: LD_EXP 8
6543: AND
6544: PUSH
6545: LD_OWVAR 65
6549: PUSH
6550: LD_INT 7
6552: LESS
6553: AND
6554: IFFALSE 6568
6556: GO 6558
6558: DISABLE
// begin enable ;
6559: ENABLE
// game_speed := 7 ;
6560: LD_ADDR_OWVAR 65
6564: PUSH
6565: LD_INT 7
6567: ST_TO_ADDR
// end ;
6568: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6569: LD_EXP 4
6573: PUSH
6574: LD_EXP 11
6578: AND
6579: IFFALSE 6781
6581: GO 6583
6583: DISABLE
6584: LD_INT 0
6586: PPUSH
6587: PPUSH
6588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: LD_INT 81
6596: PUSH
6597: LD_OWVAR 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 21
6608: PUSH
6609: LD_INT 1
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: CALL_OW 69
6624: ST_TO_ADDR
// if not tmp then
6625: LD_VAR 0 3
6629: NOT
6630: IFFALSE 6634
// exit ;
6632: GO 6781
// if tmp > 5 then
6634: LD_VAR 0 3
6638: PUSH
6639: LD_INT 5
6641: GREATER
6642: IFFALSE 6654
// k := 5 else
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 5
6651: ST_TO_ADDR
6652: GO 6664
// k := tmp ;
6654: LD_ADDR_VAR 0 2
6658: PUSH
6659: LD_VAR 0 3
6663: ST_TO_ADDR
// for i := 1 to k do
6664: LD_ADDR_VAR 0 1
6668: PUSH
6669: DOUBLE
6670: LD_INT 1
6672: DEC
6673: ST_TO_ADDR
6674: LD_VAR 0 2
6678: PUSH
6679: FOR_TO
6680: IFFALSE 6779
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6682: LD_VAR 0 3
6686: PUSH
6687: LD_VAR 0 1
6691: ARRAY
6692: PPUSH
6693: LD_VAR 0 1
6697: PUSH
6698: LD_INT 4
6700: MOD
6701: PUSH
6702: LD_INT 1
6704: PLUS
6705: PPUSH
6706: CALL_OW 259
6710: PUSH
6711: LD_INT 10
6713: LESS
6714: IFFALSE 6777
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6716: LD_VAR 0 3
6720: PUSH
6721: LD_VAR 0 1
6725: ARRAY
6726: PPUSH
6727: LD_VAR 0 1
6731: PUSH
6732: LD_INT 4
6734: MOD
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: LD_VAR 0 3
6744: PUSH
6745: LD_VAR 0 1
6749: ARRAY
6750: PPUSH
6751: LD_VAR 0 1
6755: PUSH
6756: LD_INT 4
6758: MOD
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: PPUSH
6764: CALL_OW 259
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: PPUSH
6773: CALL_OW 237
6777: GO 6679
6779: POP
6780: POP
// end ;
6781: PPOPN 3
6783: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6784: LD_EXP 4
6788: PUSH
6789: LD_EXP 12
6793: AND
6794: IFFALSE 6814
6796: GO 6798
6798: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6799: LD_INT 4
6801: PPUSH
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 0
6809: PPUSH
6810: CALL_OW 324
6814: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6815: LD_EXP 4
6819: PUSH
6820: LD_EXP 41
6824: AND
6825: IFFALSE 6845
6827: GO 6829
6829: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6830: LD_INT 19
6832: PPUSH
6833: LD_OWVAR 2
6837: PPUSH
6838: LD_INT 0
6840: PPUSH
6841: CALL_OW 324
6845: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6846: LD_EXP 4
6850: PUSH
6851: LD_EXP 13
6855: AND
6856: IFFALSE 6958
6858: GO 6860
6860: DISABLE
6861: LD_INT 0
6863: PPUSH
6864: PPUSH
// begin enable ;
6865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_OWVAR 2
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: LD_INT 11
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 34
6898: PUSH
6899: LD_INT 30
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PPUSH
6915: CALL_OW 69
6919: ST_TO_ADDR
// if not tmp then
6920: LD_VAR 0 2
6924: NOT
6925: IFFALSE 6929
// exit ;
6927: GO 6958
// for i in tmp do
6929: LD_ADDR_VAR 0 1
6933: PUSH
6934: LD_VAR 0 2
6938: PUSH
6939: FOR_IN
6940: IFFALSE 6956
// begin SetLives ( i , 0 ) ;
6942: LD_VAR 0 1
6946: PPUSH
6947: LD_INT 0
6949: PPUSH
6950: CALL_OW 234
// end ;
6954: GO 6939
6956: POP
6957: POP
// end ;
6958: PPOPN 2
6960: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6961: LD_EXP 4
6965: PUSH
6966: LD_EXP 14
6970: AND
6971: IFFALSE 6991
6973: GO 6975
6975: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6976: LD_INT 32
6978: PPUSH
6979: LD_OWVAR 2
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: CALL_OW 324
6991: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6992: LD_EXP 4
6996: PUSH
6997: LD_EXP 15
7001: AND
7002: IFFALSE 7183
7004: GO 7006
7006: DISABLE
7007: LD_INT 0
7009: PPUSH
7010: PPUSH
7011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7012: LD_ADDR_VAR 0 2
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_OWVAR 2
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 33
7031: PUSH
7032: LD_INT 3
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: ST_TO_ADDR
// if not tmp then
7048: LD_VAR 0 2
7052: NOT
7053: IFFALSE 7057
// exit ;
7055: GO 7183
// side := 0 ;
7057: LD_ADDR_VAR 0 3
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// for i := 1 to 8 do
7065: LD_ADDR_VAR 0 1
7069: PUSH
7070: DOUBLE
7071: LD_INT 1
7073: DEC
7074: ST_TO_ADDR
7075: LD_INT 8
7077: PUSH
7078: FOR_TO
7079: IFFALSE 7127
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7081: LD_OWVAR 2
7085: PUSH
7086: LD_VAR 0 1
7090: NONEQUAL
7091: PUSH
7092: LD_OWVAR 2
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: CALL_OW 81
7106: PUSH
7107: LD_INT 2
7109: EQUAL
7110: AND
7111: IFFALSE 7125
// begin side := i ;
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_VAR 0 1
7122: ST_TO_ADDR
// break ;
7123: GO 7127
// end ;
7125: GO 7078
7127: POP
7128: POP
// if not side then
7129: LD_VAR 0 3
7133: NOT
7134: IFFALSE 7138
// exit ;
7136: GO 7183
// for i := 1 to tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 2
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7181
// if Prob ( 60 ) then
7156: LD_INT 60
7158: PPUSH
7159: CALL_OW 13
7163: IFFALSE 7179
// SetSide ( i , side ) ;
7165: LD_VAR 0 1
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: CALL_OW 235
7179: GO 7153
7181: POP
7182: POP
// end ;
7183: PPOPN 3
7185: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7186: LD_EXP 4
7190: PUSH
7191: LD_EXP 17
7195: AND
7196: IFFALSE 7315
7198: GO 7200
7200: DISABLE
7201: LD_INT 0
7203: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7204: LD_ADDR_VAR 0 1
7208: PUSH
7209: LD_INT 22
7211: PUSH
7212: LD_OWVAR 2
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 21
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 3
7233: PUSH
7234: LD_INT 23
7236: PUSH
7237: LD_INT 0
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: PPUSH
7253: CALL_OW 69
7257: PUSH
7258: FOR_IN
7259: IFFALSE 7313
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 257
7270: PUSH
7271: LD_INT 1
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: IN
7289: IFFALSE 7311
// SetClass ( un , rand ( 1 , 4 ) ) ;
7291: LD_VAR 0 1
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_INT 4
7301: PPUSH
7302: CALL_OW 12
7306: PPUSH
7307: CALL_OW 336
7311: GO 7258
7313: POP
7314: POP
// end ;
7315: PPOPN 1
7317: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7318: LD_EXP 4
7322: PUSH
7323: LD_EXP 16
7327: AND
7328: IFFALSE 7407
7330: GO 7332
7332: DISABLE
7333: LD_INT 0
7335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7336: LD_ADDR_VAR 0 1
7340: PUSH
7341: LD_INT 22
7343: PUSH
7344: LD_OWVAR 2
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 21
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: ST_TO_ADDR
// if not tmp then
7372: LD_VAR 0 1
7376: NOT
7377: IFFALSE 7381
// exit ;
7379: GO 7407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 1
7388: PPUSH
7389: LD_VAR 0 1
7393: PPUSH
7394: CALL_OW 12
7398: ARRAY
7399: PPUSH
7400: LD_INT 100
7402: PPUSH
7403: CALL_OW 234
// end ;
7407: PPOPN 1
7409: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7410: LD_EXP 4
7414: PUSH
7415: LD_EXP 18
7419: AND
7420: IFFALSE 7518
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7428: LD_ADDR_VAR 0 1
7432: PUSH
7433: LD_INT 22
7435: PUSH
7436: LD_OWVAR 2
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 21
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: ST_TO_ADDR
// if not tmp then
7464: LD_VAR 0 1
7468: NOT
7469: IFFALSE 7473
// exit ;
7471: GO 7518
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: PPUSH
7481: LD_VAR 0 1
7485: PPUSH
7486: CALL_OW 12
7490: ARRAY
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: LD_INT 4
7497: PPUSH
7498: CALL_OW 12
7502: PPUSH
7503: LD_INT 3000
7505: PPUSH
7506: LD_INT 9000
7508: PPUSH
7509: CALL_OW 12
7513: PPUSH
7514: CALL_OW 492
// end ;
7518: PPOPN 1
7520: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7521: LD_EXP 4
7525: PUSH
7526: LD_EXP 19
7530: AND
7531: IFFALSE 7551
7533: GO 7535
7535: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7536: LD_INT 1
7538: PPUSH
7539: LD_OWVAR 2
7543: PPUSH
7544: LD_INT 0
7546: PPUSH
7547: CALL_OW 324
7551: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7552: LD_EXP 4
7556: PUSH
7557: LD_EXP 20
7561: AND
7562: IFFALSE 7645
7564: GO 7566
7566: DISABLE
7567: LD_INT 0
7569: PPUSH
7570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7571: LD_ADDR_VAR 0 2
7575: PUSH
7576: LD_INT 22
7578: PUSH
7579: LD_OWVAR 2
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 69
7606: ST_TO_ADDR
// if not tmp then
7607: LD_VAR 0 2
7611: NOT
7612: IFFALSE 7616
// exit ;
7614: GO 7645
// for i in tmp do
7616: LD_ADDR_VAR 0 1
7620: PUSH
7621: LD_VAR 0 2
7625: PUSH
7626: FOR_IN
7627: IFFALSE 7643
// SetBLevel ( i , 10 ) ;
7629: LD_VAR 0 1
7633: PPUSH
7634: LD_INT 10
7636: PPUSH
7637: CALL_OW 241
7641: GO 7626
7643: POP
7644: POP
// end ;
7645: PPOPN 2
7647: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7648: LD_EXP 4
7652: PUSH
7653: LD_EXP 21
7657: AND
7658: IFFALSE 7769
7660: GO 7662
7662: DISABLE
7663: LD_INT 0
7665: PPUSH
7666: PPUSH
7667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7668: LD_ADDR_VAR 0 3
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_OWVAR 2
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: LD_INT 1
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 69
7703: ST_TO_ADDR
// if not tmp then
7704: LD_VAR 0 3
7708: NOT
7709: IFFALSE 7713
// exit ;
7711: GO 7769
// un := tmp [ rand ( 1 , tmp ) ] ;
7713: LD_ADDR_VAR 0 2
7717: PUSH
7718: LD_VAR 0 3
7722: PUSH
7723: LD_INT 1
7725: PPUSH
7726: LD_VAR 0 3
7730: PPUSH
7731: CALL_OW 12
7735: ARRAY
7736: ST_TO_ADDR
// if Crawls ( un ) then
7737: LD_VAR 0 2
7741: PPUSH
7742: CALL_OW 318
7746: IFFALSE 7757
// ComWalk ( un ) ;
7748: LD_VAR 0 2
7752: PPUSH
7753: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7757: LD_VAR 0 2
7761: PPUSH
7762: LD_INT 5
7764: PPUSH
7765: CALL_OW 336
// end ;
7769: PPOPN 3
7771: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7772: LD_EXP 4
7776: PUSH
7777: LD_EXP 22
7781: AND
7782: PUSH
7783: LD_OWVAR 67
7787: PUSH
7788: LD_INT 4
7790: LESS
7791: AND
7792: IFFALSE 7811
7794: GO 7796
7796: DISABLE
// begin Difficulty := Difficulty + 1 ;
7797: LD_ADDR_OWVAR 67
7801: PUSH
7802: LD_OWVAR 67
7806: PUSH
7807: LD_INT 1
7809: PLUS
7810: ST_TO_ADDR
// end ;
7811: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7812: LD_EXP 4
7816: PUSH
7817: LD_EXP 23
7821: AND
7822: IFFALSE 7925
7824: GO 7826
7826: DISABLE
7827: LD_INT 0
7829: PPUSH
// begin for i := 1 to 5 do
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: DOUBLE
7836: LD_INT 1
7838: DEC
7839: ST_TO_ADDR
7840: LD_INT 5
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7923
// begin uc_nation := nation_nature ;
7846: LD_ADDR_OWVAR 21
7850: PUSH
7851: LD_INT 0
7853: ST_TO_ADDR
// uc_side := 0 ;
7854: LD_ADDR_OWVAR 20
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7862: LD_ADDR_OWVAR 29
7866: PUSH
7867: LD_INT 12
7869: PUSH
7870: LD_INT 12
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: ST_TO_ADDR
// hc_agressivity := 20 ;
7877: LD_ADDR_OWVAR 35
7881: PUSH
7882: LD_INT 20
7884: ST_TO_ADDR
// hc_class := class_tiger ;
7885: LD_ADDR_OWVAR 28
7889: PUSH
7890: LD_INT 14
7892: ST_TO_ADDR
// hc_gallery :=  ;
7893: LD_ADDR_OWVAR 33
7897: PUSH
7898: LD_STRING 
7900: ST_TO_ADDR
// hc_name :=  ;
7901: LD_ADDR_OWVAR 26
7905: PUSH
7906: LD_STRING 
7908: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7909: CALL_OW 44
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 51
// end ;
7921: GO 7843
7923: POP
7924: POP
// end ;
7925: PPOPN 1
7927: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7928: LD_EXP 4
7932: PUSH
7933: LD_EXP 24
7937: AND
7938: IFFALSE 7947
7940: GO 7942
7942: DISABLE
// StreamSibBomb ;
7943: CALL 7948 0 0
7947: END
// export function StreamSibBomb ; var i , x , y ; begin
7948: LD_INT 0
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
// result := false ;
7954: LD_ADDR_VAR 0 1
7958: PUSH
7959: LD_INT 0
7961: ST_TO_ADDR
// for i := 1 to 16 do
7962: LD_ADDR_VAR 0 2
7966: PUSH
7967: DOUBLE
7968: LD_INT 1
7970: DEC
7971: ST_TO_ADDR
7972: LD_INT 16
7974: PUSH
7975: FOR_TO
7976: IFFALSE 8175
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: LD_INT 10
7985: PUSH
7986: LD_INT 20
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 40
7994: PUSH
7995: LD_INT 50
7997: PUSH
7998: LD_INT 60
8000: PUSH
8001: LD_INT 70
8003: PUSH
8004: LD_INT 80
8006: PUSH
8007: LD_INT 90
8009: PUSH
8010: LD_INT 100
8012: PUSH
8013: LD_INT 110
8015: PUSH
8016: LD_INT 120
8018: PUSH
8019: LD_INT 130
8021: PUSH
8022: LD_INT 140
8024: PUSH
8025: LD_INT 150
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 1
8047: PPUSH
8048: LD_INT 15
8050: PPUSH
8051: CALL_OW 12
8055: ARRAY
8056: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8057: LD_ADDR_VAR 0 4
8061: PUSH
8062: LD_INT 10
8064: PUSH
8065: LD_INT 20
8067: PUSH
8068: LD_INT 30
8070: PUSH
8071: LD_INT 40
8073: PUSH
8074: LD_INT 50
8076: PUSH
8077: LD_INT 60
8079: PUSH
8080: LD_INT 70
8082: PUSH
8083: LD_INT 80
8085: PUSH
8086: LD_INT 90
8088: PUSH
8089: LD_INT 100
8091: PUSH
8092: LD_INT 110
8094: PUSH
8095: LD_INT 120
8097: PUSH
8098: LD_INT 130
8100: PUSH
8101: LD_INT 140
8103: PUSH
8104: LD_INT 150
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 1
8126: PPUSH
8127: LD_INT 15
8129: PPUSH
8130: CALL_OW 12
8134: ARRAY
8135: ST_TO_ADDR
// if ValidHex ( x , y ) then
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 4
8145: PPUSH
8146: CALL_OW 488
8150: IFFALSE 8173
// begin result := [ x , y ] ;
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_VAR 0 3
8161: PUSH
8162: LD_VAR 0 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: ST_TO_ADDR
// break ;
8171: GO 8175
// end ; end ;
8173: GO 7975
8175: POP
8176: POP
// if result then
8177: LD_VAR 0 1
8181: IFFALSE 8241
// begin ToLua ( playSibBomb() ) ;
8183: LD_STRING playSibBomb()
8185: PPUSH
8186: CALL_OW 559
// wait ( 0 0$14 ) ;
8190: LD_INT 490
8192: PPUSH
8193: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8197: LD_VAR 0 1
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: PPUSH
8206: LD_VAR 0 1
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: PPUSH
8215: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8219: LD_VAR 0 1
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: PPUSH
8228: LD_VAR 0 1
8232: PUSH
8233: LD_INT 2
8235: ARRAY
8236: PPUSH
8237: CALL_OW 429
// end ; end ;
8241: LD_VAR 0 1
8245: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8246: LD_EXP 4
8250: PUSH
8251: LD_EXP 26
8255: AND
8256: IFFALSE 8268
8258: GO 8260
8260: DISABLE
// YouLost (  ) ;
8261: LD_STRING 
8263: PPUSH
8264: CALL_OW 104
8268: END
// every 0 0$1 trigger StreamModeActive and sFog do
8269: LD_EXP 4
8273: PUSH
8274: LD_EXP 25
8278: AND
8279: IFFALSE 8293
8281: GO 8283
8283: DISABLE
// FogOff ( your_side ) ;
8284: LD_OWVAR 2
8288: PPUSH
8289: CALL_OW 344
8293: END
// every 0 0$1 trigger StreamModeActive and sSun do
8294: LD_EXP 4
8298: PUSH
8299: LD_EXP 27
8303: AND
8304: IFFALSE 8332
8306: GO 8308
8308: DISABLE
// begin solar_recharge_percent := 0 ;
8309: LD_ADDR_OWVAR 79
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8317: LD_INT 10500
8319: PPUSH
8320: CALL_OW 67
// solar_recharge_percent := 100 ;
8324: LD_ADDR_OWVAR 79
8328: PUSH
8329: LD_INT 100
8331: ST_TO_ADDR
// end ;
8332: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8333: LD_EXP 4
8337: PUSH
8338: LD_EXP 28
8342: AND
8343: IFFALSE 8582
8345: GO 8347
8347: DISABLE
8348: LD_INT 0
8350: PPUSH
8351: PPUSH
8352: PPUSH
// begin tmp := [ ] ;
8353: LD_ADDR_VAR 0 3
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i := 1 to 6 do
8360: LD_ADDR_VAR 0 1
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_INT 6
8372: PUSH
8373: FOR_TO
8374: IFFALSE 8479
// begin uc_nation := nation_nature ;
8376: LD_ADDR_OWVAR 21
8380: PUSH
8381: LD_INT 0
8383: ST_TO_ADDR
// uc_side := 0 ;
8384: LD_ADDR_OWVAR 20
8388: PUSH
8389: LD_INT 0
8391: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8392: LD_ADDR_OWVAR 29
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: ST_TO_ADDR
// hc_agressivity := 20 ;
8407: LD_ADDR_OWVAR 35
8411: PUSH
8412: LD_INT 20
8414: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8415: LD_ADDR_OWVAR 28
8419: PUSH
8420: LD_INT 17
8422: ST_TO_ADDR
// hc_gallery :=  ;
8423: LD_ADDR_OWVAR 33
8427: PUSH
8428: LD_STRING 
8430: ST_TO_ADDR
// hc_name :=  ;
8431: LD_ADDR_OWVAR 26
8435: PUSH
8436: LD_STRING 
8438: ST_TO_ADDR
// un := CreateHuman ;
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: CALL_OW 44
8448: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8449: LD_VAR 0 2
8453: PPUSH
8454: LD_INT 1
8456: PPUSH
8457: CALL_OW 51
// tmp := tmp ^ un ;
8461: LD_ADDR_VAR 0 3
8465: PUSH
8466: LD_VAR 0 3
8470: PUSH
8471: LD_VAR 0 2
8475: ADD
8476: ST_TO_ADDR
// end ;
8477: GO 8373
8479: POP
8480: POP
// repeat wait ( 0 0$1 ) ;
8481: LD_INT 35
8483: PPUSH
8484: CALL_OW 67
// for un in tmp do
8488: LD_ADDR_VAR 0 2
8492: PUSH
8493: LD_VAR 0 3
8497: PUSH
8498: FOR_IN
8499: IFFALSE 8573
// begin if IsDead ( un ) then
8501: LD_VAR 0 2
8505: PPUSH
8506: CALL_OW 301
8510: IFFALSE 8530
// begin tmp := tmp diff un ;
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: LD_VAR 0 3
8521: PUSH
8522: LD_VAR 0 2
8526: DIFF
8527: ST_TO_ADDR
// continue ;
8528: GO 8498
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8530: LD_VAR 0 2
8534: PPUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 22
8540: PUSH
8541: LD_INT 0
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: PPUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 74
8566: PPUSH
8567: CALL_OW 115
// end ;
8571: GO 8498
8573: POP
8574: POP
// until not tmp ;
8575: LD_VAR 0 3
8579: NOT
8580: IFFALSE 8481
// end ;
8582: PPOPN 3
8584: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8585: LD_EXP 4
8589: PUSH
8590: LD_EXP 29
8594: AND
8595: IFFALSE 8649
8597: GO 8599
8599: DISABLE
// begin ToLua ( displayTroll(); ) ;
8600: LD_STRING displayTroll();
8602: PPUSH
8603: CALL_OW 559
// wait ( 3 3$00 ) ;
8607: LD_INT 6300
8609: PPUSH
8610: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8614: LD_STRING hideTroll();
8616: PPUSH
8617: CALL_OW 559
// wait ( 1 1$00 ) ;
8621: LD_INT 2100
8623: PPUSH
8624: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8628: LD_STRING displayTroll();
8630: PPUSH
8631: CALL_OW 559
// wait ( 1 1$00 ) ;
8635: LD_INT 2100
8637: PPUSH
8638: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8642: LD_STRING hideTroll();
8644: PPUSH
8645: CALL_OW 559
// end ;
8649: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8650: LD_EXP 4
8654: PUSH
8655: LD_EXP 30
8659: AND
8660: IFFALSE 8723
8662: GO 8664
8664: DISABLE
8665: LD_INT 0
8667: PPUSH
// begin p := 0 ;
8668: LD_ADDR_VAR 0 1
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// repeat game_speed := 1 ;
8676: LD_ADDR_OWVAR 65
8680: PUSH
8681: LD_INT 1
8683: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8684: LD_INT 35
8686: PPUSH
8687: CALL_OW 67
// p := p + 1 ;
8691: LD_ADDR_VAR 0 1
8695: PUSH
8696: LD_VAR 0 1
8700: PUSH
8701: LD_INT 1
8703: PLUS
8704: ST_TO_ADDR
// until p >= 60 ;
8705: LD_VAR 0 1
8709: PUSH
8710: LD_INT 60
8712: GREATEREQUAL
8713: IFFALSE 8676
// game_speed := 4 ;
8715: LD_ADDR_OWVAR 65
8719: PUSH
8720: LD_INT 4
8722: ST_TO_ADDR
// end ;
8723: PPOPN 1
8725: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8726: LD_EXP 4
8730: PUSH
8731: LD_EXP 31
8735: AND
8736: IFFALSE 8882
8738: GO 8740
8740: DISABLE
8741: LD_INT 0
8743: PPUSH
8744: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_OWVAR 2
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 2
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: LD_INT 0
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 30
8777: PUSH
8778: LD_INT 1
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PPUSH
8794: CALL_OW 69
8798: ST_TO_ADDR
// if not depot then
8799: LD_VAR 0 1
8803: NOT
8804: IFFALSE 8808
// exit ;
8806: GO 8882
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_VAR 0 1
8817: PUSH
8818: LD_INT 1
8820: PPUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 12
8830: ARRAY
8831: PPUSH
8832: CALL_OW 274
8836: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: LD_INT 0
8847: PPUSH
8848: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8852: LD_VAR 0 2
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: LD_INT 0
8862: PPUSH
8863: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8867: LD_VAR 0 2
8871: PPUSH
8872: LD_INT 3
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 277
// end ;
8882: PPOPN 2
8884: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8885: LD_EXP 4
8889: PUSH
8890: LD_EXP 32
8894: AND
8895: IFFALSE 8992
8897: GO 8899
8899: DISABLE
8900: LD_INT 0
8902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8903: LD_ADDR_VAR 0 1
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_OWVAR 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 0
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: ST_TO_ADDR
// if not tmp then
8957: LD_VAR 0 1
8961: NOT
8962: IFFALSE 8966
// exit ;
8964: GO 8992
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8966: LD_VAR 0 1
8970: PUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 12
8983: ARRAY
8984: PPUSH
8985: LD_INT 200
8987: PPUSH
8988: CALL_OW 234
// end ;
8992: PPOPN 1
8994: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8995: LD_EXP 4
8999: PUSH
9000: LD_EXP 33
9004: AND
9005: IFFALSE 9084
9007: GO 9009
9009: DISABLE
9010: LD_INT 0
9012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: ST_TO_ADDR
// if not tmp then
9049: LD_VAR 0 1
9053: NOT
9054: IFFALSE 9058
// exit ;
9056: GO 9084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9058: LD_VAR 0 1
9062: PUSH
9063: LD_INT 1
9065: PPUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 12
9075: ARRAY
9076: PPUSH
9077: LD_INT 60
9079: PPUSH
9080: CALL_OW 234
// end ;
9084: PPOPN 1
9086: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9087: LD_EXP 4
9091: PUSH
9092: LD_EXP 34
9096: AND
9097: IFFALSE 9196
9099: GO 9101
9101: DISABLE
9102: LD_INT 0
9104: PPUSH
9105: PPUSH
// begin enable ;
9106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9107: LD_ADDR_VAR 0 1
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_OWVAR 2
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 61
9126: PUSH
9127: EMPTY
9128: LIST
9129: PUSH
9130: LD_INT 33
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: PPUSH
9145: CALL_OW 69
9149: ST_TO_ADDR
// if not tmp then
9150: LD_VAR 0 1
9154: NOT
9155: IFFALSE 9159
// exit ;
9157: GO 9196
// for i in tmp do
9159: LD_ADDR_VAR 0 2
9163: PUSH
9164: LD_VAR 0 1
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9194
// if IsControledBy ( i ) then
9172: LD_VAR 0 2
9176: PPUSH
9177: CALL_OW 312
9181: IFFALSE 9192
// ComUnlink ( i ) ;
9183: LD_VAR 0 2
9187: PPUSH
9188: CALL_OW 136
9192: GO 9169
9194: POP
9195: POP
// end ;
9196: PPOPN 2
9198: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9199: LD_EXP 4
9203: PUSH
9204: LD_EXP 35
9208: AND
9209: IFFALSE 9349
9211: GO 9213
9213: DISABLE
9214: LD_INT 0
9216: PPUSH
9217: PPUSH
// begin ToLua ( displayPowell(); ) ;
9218: LD_STRING displayPowell();
9220: PPUSH
9221: CALL_OW 559
// uc_side := 0 ;
9225: LD_ADDR_OWVAR 20
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// uc_nation := 2 ;
9233: LD_ADDR_OWVAR 21
9237: PUSH
9238: LD_INT 2
9240: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9241: LD_ADDR_OWVAR 37
9245: PUSH
9246: LD_INT 14
9248: ST_TO_ADDR
// vc_engine := engine_siberite ;
9249: LD_ADDR_OWVAR 39
9253: PUSH
9254: LD_INT 3
9256: ST_TO_ADDR
// vc_control := control_apeman ;
9257: LD_ADDR_OWVAR 38
9261: PUSH
9262: LD_INT 5
9264: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9265: LD_ADDR_OWVAR 40
9269: PUSH
9270: LD_INT 29
9272: ST_TO_ADDR
// un := CreateVehicle ;
9273: LD_ADDR_VAR 0 2
9277: PUSH
9278: CALL_OW 45
9282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9283: LD_VAR 0 2
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9295: LD_INT 35
9297: PPUSH
9298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: LD_INT 22
9309: PUSH
9310: LD_OWVAR 2
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PPUSH
9319: CALL_OW 69
9323: PPUSH
9324: LD_VAR 0 2
9328: PPUSH
9329: CALL_OW 74
9333: PPUSH
9334: CALL_OW 115
// until IsDead ( un ) ;
9338: LD_VAR 0 2
9342: PPUSH
9343: CALL_OW 301
9347: IFFALSE 9295
// end ;
9349: PPOPN 2
9351: END
// every 0 0$1 trigger StreamModeActive and sStu do
9352: LD_EXP 4
9356: PUSH
9357: LD_EXP 43
9361: AND
9362: IFFALSE 9378
9364: GO 9366
9366: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9367: LD_STRING displayStucuk();
9369: PPUSH
9370: CALL_OW 559
// ResetFog ;
9374: CALL_OW 335
// end ;
9378: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9379: LD_EXP 4
9383: PUSH
9384: LD_EXP 36
9388: AND
9389: IFFALSE 9530
9391: GO 9393
9393: DISABLE
9394: LD_INT 0
9396: PPUSH
9397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9398: LD_ADDR_VAR 0 2
9402: PUSH
9403: LD_INT 22
9405: PUSH
9406: LD_OWVAR 2
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 21
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 69
9433: ST_TO_ADDR
// if not tmp then
9434: LD_VAR 0 2
9438: NOT
9439: IFFALSE 9443
// exit ;
9441: GO 9530
// un := tmp [ rand ( 1 , tmp ) ] ;
9443: LD_ADDR_VAR 0 1
9447: PUSH
9448: LD_VAR 0 2
9452: PUSH
9453: LD_INT 1
9455: PPUSH
9456: LD_VAR 0 2
9460: PPUSH
9461: CALL_OW 12
9465: ARRAY
9466: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9467: LD_VAR 0 1
9471: PPUSH
9472: LD_INT 0
9474: PPUSH
9475: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_OWVAR 3
9488: PUSH
9489: LD_VAR 0 1
9493: DIFF
9494: PPUSH
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 74
9504: PPUSH
9505: CALL_OW 115
// wait ( 0 0$20 ) ;
9509: LD_INT 700
9511: PPUSH
9512: CALL_OW 67
// SetSide ( un , your_side ) ;
9516: LD_VAR 0 1
9520: PPUSH
9521: LD_OWVAR 2
9525: PPUSH
9526: CALL_OW 235
// end ;
9530: PPOPN 2
9532: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9533: LD_EXP 4
9537: PUSH
9538: LD_EXP 37
9542: AND
9543: IFFALSE 9649
9545: GO 9547
9547: DISABLE
9548: LD_INT 0
9550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9551: LD_ADDR_VAR 0 1
9555: PUSH
9556: LD_INT 22
9558: PUSH
9559: LD_OWVAR 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 2
9570: PUSH
9571: LD_INT 30
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 30
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: ST_TO_ADDR
// if not depot then
9605: LD_VAR 0 1
9609: NOT
9610: IFFALSE 9614
// exit ;
9612: GO 9649
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9614: LD_VAR 0 1
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 250
9627: PPUSH
9628: LD_VAR 0 1
9632: PUSH
9633: LD_INT 1
9635: ARRAY
9636: PPUSH
9637: CALL_OW 251
9641: PPUSH
9642: LD_INT 70
9644: PPUSH
9645: CALL_OW 495
// end ;
9649: PPOPN 1
9651: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9652: LD_EXP 4
9656: PUSH
9657: LD_EXP 38
9661: AND
9662: IFFALSE 9873
9664: GO 9666
9666: DISABLE
9667: LD_INT 0
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9674: LD_ADDR_VAR 0 5
9678: PUSH
9679: LD_INT 22
9681: PUSH
9682: LD_OWVAR 2
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 21
9693: PUSH
9694: LD_INT 1
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// if not tmp then
9710: LD_VAR 0 5
9714: NOT
9715: IFFALSE 9719
// exit ;
9717: GO 9873
// for i in tmp do
9719: LD_ADDR_VAR 0 1
9723: PUSH
9724: LD_VAR 0 5
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9871
// begin d := rand ( 0 , 5 ) ;
9732: LD_ADDR_VAR 0 4
9736: PUSH
9737: LD_INT 0
9739: PPUSH
9740: LD_INT 5
9742: PPUSH
9743: CALL_OW 12
9747: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL_OW 250
9762: PPUSH
9763: LD_VAR 0 4
9767: PPUSH
9768: LD_INT 3
9770: PPUSH
9771: LD_INT 12
9773: PPUSH
9774: CALL_OW 12
9778: PPUSH
9779: CALL_OW 272
9783: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 251
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: LD_INT 3
9806: PPUSH
9807: LD_INT 12
9809: PPUSH
9810: CALL_OW 12
9814: PPUSH
9815: CALL_OW 273
9819: ST_TO_ADDR
// if ValidHex ( x , y ) then
9820: LD_VAR 0 2
9824: PPUSH
9825: LD_VAR 0 3
9829: PPUSH
9830: CALL_OW 488
9834: IFFALSE 9869
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9836: LD_VAR 0 1
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_INT 3
9853: PPUSH
9854: LD_INT 6
9856: PPUSH
9857: CALL_OW 12
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 483
// end ;
9869: GO 9729
9871: POP
9872: POP
// end ;
9873: PPOPN 5
9875: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9876: LD_EXP 4
9880: PUSH
9881: LD_EXP 39
9885: AND
9886: IFFALSE 9980
9888: GO 9890
9890: DISABLE
9891: LD_INT 0
9893: PPUSH
9894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9895: LD_ADDR_VAR 0 2
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_OWVAR 2
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 32
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 21
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// if not tmp then
9942: LD_VAR 0 2
9946: NOT
9947: IFFALSE 9951
// exit ;
9949: GO 9980
// for i in tmp do
9951: LD_ADDR_VAR 0 1
9955: PUSH
9956: LD_VAR 0 2
9960: PUSH
9961: FOR_IN
9962: IFFALSE 9978
// SetFuel ( i , 0 ) ;
9964: LD_VAR 0 1
9968: PPUSH
9969: LD_INT 0
9971: PPUSH
9972: CALL_OW 240
9976: GO 9961
9978: POP
9979: POP
// end ;
9980: PPOPN 2
9982: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9983: LD_EXP 4
9987: PUSH
9988: LD_EXP 40
9992: AND
9993: IFFALSE 10059
9995: GO 9997
9997: DISABLE
9998: LD_INT 0
10000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10001: LD_ADDR_VAR 0 1
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_OWVAR 2
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 30
10020: PUSH
10021: LD_INT 29
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PPUSH
10032: CALL_OW 69
10036: ST_TO_ADDR
// if not tmp then
10037: LD_VAR 0 1
10041: NOT
10042: IFFALSE 10046
// exit ;
10044: GO 10059
// DestroyUnit ( tmp [ 1 ] ) ;
10046: LD_VAR 0 1
10050: PUSH
10051: LD_INT 1
10053: ARRAY
10054: PPUSH
10055: CALL_OW 65
// end ;
10059: PPOPN 1
10061: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10062: LD_EXP 4
10066: PUSH
10067: LD_EXP 42
10071: AND
10072: IFFALSE 10201
10074: GO 10076
10076: DISABLE
10077: LD_INT 0
10079: PPUSH
// begin uc_side := 0 ;
10080: LD_ADDR_OWVAR 20
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// uc_nation := nation_arabian ;
10088: LD_ADDR_OWVAR 21
10092: PUSH
10093: LD_INT 2
10095: ST_TO_ADDR
// hc_gallery :=  ;
10096: LD_ADDR_OWVAR 33
10100: PUSH
10101: LD_STRING 
10103: ST_TO_ADDR
// hc_name :=  ;
10104: LD_ADDR_OWVAR 26
10108: PUSH
10109: LD_STRING 
10111: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10112: LD_INT 1
10114: PPUSH
10115: LD_INT 11
10117: PPUSH
10118: LD_INT 10
10120: PPUSH
10121: CALL_OW 380
// un := CreateHuman ;
10125: LD_ADDR_VAR 0 1
10129: PUSH
10130: CALL_OW 44
10134: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10135: LD_VAR 0 1
10139: PPUSH
10140: LD_INT 1
10142: PPUSH
10143: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10147: LD_INT 35
10149: PPUSH
10150: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 22
10161: PUSH
10162: LD_OWVAR 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: PPUSH
10176: LD_VAR 0 1
10180: PPUSH
10181: CALL_OW 74
10185: PPUSH
10186: CALL_OW 115
// until IsDead ( un ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: CALL_OW 301
10199: IFFALSE 10147
// end ;
10201: PPOPN 1
10203: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10204: LD_EXP 4
10208: PUSH
10209: LD_EXP 44
10213: AND
10214: IFFALSE 10226
10216: GO 10218
10218: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10219: LD_STRING earthquake(getX(game), 0, 32)
10221: PPUSH
10222: CALL_OW 559
10226: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10227: LD_EXP 4
10231: PUSH
10232: LD_EXP 45
10236: AND
10237: IFFALSE 10328
10239: GO 10241
10241: DISABLE
10242: LD_INT 0
10244: PPUSH
// begin enable ;
10245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10246: LD_ADDR_VAR 0 1
10250: PUSH
10251: LD_INT 22
10253: PUSH
10254: LD_OWVAR 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 33
10275: PUSH
10276: LD_INT 3
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: PPUSH
10288: CALL_OW 69
10292: ST_TO_ADDR
// if not tmp then
10293: LD_VAR 0 1
10297: NOT
10298: IFFALSE 10302
// exit ;
10300: GO 10328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10302: LD_VAR 0 1
10306: PUSH
10307: LD_INT 1
10309: PPUSH
10310: LD_VAR 0 1
10314: PPUSH
10315: CALL_OW 12
10319: ARRAY
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 234
// end ;
10328: PPOPN 1
10330: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10331: LD_EXP 4
10335: PUSH
10336: LD_EXP 46
10340: AND
10341: IFFALSE 10482
10343: GO 10345
10345: DISABLE
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
10350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10351: LD_ADDR_VAR 0 3
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_OWVAR 2
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 25
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 69
10386: ST_TO_ADDR
// if not tmp then
10387: LD_VAR 0 3
10391: NOT
10392: IFFALSE 10396
// exit ;
10394: GO 10482
// un := tmp [ rand ( 1 , tmp ) ] ;
10396: LD_ADDR_VAR 0 2
10400: PUSH
10401: LD_VAR 0 3
10405: PUSH
10406: LD_INT 1
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: CALL_OW 12
10418: ARRAY
10419: ST_TO_ADDR
// if Crawls ( un ) then
10420: LD_VAR 0 2
10424: PPUSH
10425: CALL_OW 318
10429: IFFALSE 10440
// ComWalk ( un ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10440: LD_VAR 0 2
10444: PPUSH
10445: LD_INT 9
10447: PPUSH
10448: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10452: LD_INT 28
10454: PPUSH
10455: LD_OWVAR 2
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10467: LD_INT 29
10469: PPUSH
10470: LD_OWVAR 2
10474: PPUSH
10475: LD_INT 2
10477: PPUSH
10478: CALL_OW 322
// end ;
10482: PPOPN 3
10484: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10485: LD_EXP 4
10489: PUSH
10490: LD_EXP 47
10494: AND
10495: IFFALSE 10606
10497: GO 10499
10499: DISABLE
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10505: LD_ADDR_VAR 0 3
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_OWVAR 2
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 25
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PPUSH
10536: CALL_OW 69
10540: ST_TO_ADDR
// if not tmp then
10541: LD_VAR 0 3
10545: NOT
10546: IFFALSE 10550
// exit ;
10548: GO 10606
// un := tmp [ rand ( 1 , tmp ) ] ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 3
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: CALL_OW 12
10572: ARRAY
10573: ST_TO_ADDR
// if Crawls ( un ) then
10574: LD_VAR 0 2
10578: PPUSH
10579: CALL_OW 318
10583: IFFALSE 10594
// ComWalk ( un ) ;
10585: LD_VAR 0 2
10589: PPUSH
10590: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10594: LD_VAR 0 2
10598: PPUSH
10599: LD_INT 8
10601: PPUSH
10602: CALL_OW 336
// end ;
10606: PPOPN 3
10608: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10609: LD_EXP 4
10613: PUSH
10614: LD_EXP 48
10618: AND
10619: IFFALSE 10763
10621: GO 10623
10623: DISABLE
10624: LD_INT 0
10626: PPUSH
10627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10628: LD_ADDR_VAR 0 2
10632: PUSH
10633: LD_INT 22
10635: PUSH
10636: LD_OWVAR 2
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 21
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: LD_INT 34
10660: PUSH
10661: LD_INT 12
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 34
10670: PUSH
10671: LD_INT 51
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 34
10680: PUSH
10681: LD_INT 32
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 69
10703: ST_TO_ADDR
// if not tmp then
10704: LD_VAR 0 2
10708: NOT
10709: IFFALSE 10713
// exit ;
10711: GO 10763
// for i in tmp do
10713: LD_ADDR_VAR 0 1
10717: PUSH
10718: LD_VAR 0 2
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10761
// if GetCargo ( i , mat_artifact ) = 0 then
10726: LD_VAR 0 1
10730: PPUSH
10731: LD_INT 4
10733: PPUSH
10734: CALL_OW 289
10738: PUSH
10739: LD_INT 0
10741: EQUAL
10742: IFFALSE 10759
// SetCargo ( i , mat_siberit , 100 ) ;
10744: LD_VAR 0 1
10748: PPUSH
10749: LD_INT 3
10751: PPUSH
10752: LD_INT 100
10754: PPUSH
10755: CALL_OW 290
10759: GO 10723
10761: POP
10762: POP
// end ;
10763: PPOPN 2
10765: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10766: LD_EXP 4
10770: PUSH
10771: LD_EXP 49
10775: AND
10776: IFFALSE 10959
10778: GO 10780
10780: DISABLE
10781: LD_INT 0
10783: PPUSH
10784: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10785: LD_ADDR_VAR 0 2
10789: PUSH
10790: LD_INT 22
10792: PUSH
10793: LD_OWVAR 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: ST_TO_ADDR
// if not tmp then
10807: LD_VAR 0 2
10811: NOT
10812: IFFALSE 10816
// exit ;
10814: GO 10959
// for i := 1 to 2 do
10816: LD_ADDR_VAR 0 1
10820: PUSH
10821: DOUBLE
10822: LD_INT 1
10824: DEC
10825: ST_TO_ADDR
10826: LD_INT 2
10828: PUSH
10829: FOR_TO
10830: IFFALSE 10957
// begin uc_side := your_side ;
10832: LD_ADDR_OWVAR 20
10836: PUSH
10837: LD_OWVAR 2
10841: ST_TO_ADDR
// uc_nation := nation_american ;
10842: LD_ADDR_OWVAR 21
10846: PUSH
10847: LD_INT 1
10849: ST_TO_ADDR
// vc_chassis := us_morphling ;
10850: LD_ADDR_OWVAR 37
10854: PUSH
10855: LD_INT 5
10857: ST_TO_ADDR
// vc_engine := engine_siberite ;
10858: LD_ADDR_OWVAR 39
10862: PUSH
10863: LD_INT 3
10865: ST_TO_ADDR
// vc_control := control_computer ;
10866: LD_ADDR_OWVAR 38
10870: PUSH
10871: LD_INT 3
10873: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10874: LD_ADDR_OWVAR 40
10878: PUSH
10879: LD_INT 10
10881: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10882: LD_VAR 0 2
10886: PUSH
10887: LD_INT 1
10889: ARRAY
10890: PPUSH
10891: CALL_OW 310
10895: NOT
10896: IFFALSE 10943
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10898: CALL_OW 45
10902: PPUSH
10903: LD_VAR 0 2
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: CALL_OW 250
10916: PPUSH
10917: LD_VAR 0 2
10921: PUSH
10922: LD_INT 1
10924: ARRAY
10925: PPUSH
10926: CALL_OW 251
10930: PPUSH
10931: LD_INT 12
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 50
10941: GO 10955
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10943: CALL_OW 45
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 51
// end ;
10955: GO 10829
10957: POP
10958: POP
// end ;
10959: PPOPN 2
10961: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10962: LD_EXP 4
10966: PUSH
10967: LD_EXP 50
10971: AND
10972: IFFALSE 11194
10974: GO 10976
10976: DISABLE
10977: LD_INT 0
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10985: LD_ADDR_VAR 0 6
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_OWVAR 2
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 1
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: LD_INT 23
11017: PUSH
11018: LD_INT 0
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: PPUSH
11034: CALL_OW 69
11038: ST_TO_ADDR
// if not tmp then
11039: LD_VAR 0 6
11043: NOT
11044: IFFALSE 11048
// exit ;
11046: GO 11194
// s1 := rand ( 1 , 4 ) ;
11048: LD_ADDR_VAR 0 2
11052: PUSH
11053: LD_INT 1
11055: PPUSH
11056: LD_INT 4
11058: PPUSH
11059: CALL_OW 12
11063: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11064: LD_ADDR_VAR 0 4
11068: PUSH
11069: LD_VAR 0 6
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: LD_VAR 0 2
11082: PPUSH
11083: CALL_OW 259
11087: ST_TO_ADDR
// if s1 = 1 then
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11116
// s2 := rand ( 2 , 4 ) else
11098: LD_ADDR_VAR 0 3
11102: PUSH
11103: LD_INT 2
11105: PPUSH
11106: LD_INT 4
11108: PPUSH
11109: CALL_OW 12
11113: ST_TO_ADDR
11114: GO 11124
// s2 := 1 ;
11116: LD_ADDR_VAR 0 3
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11124: LD_ADDR_VAR 0 5
11128: PUSH
11129: LD_VAR 0 6
11133: PUSH
11134: LD_INT 1
11136: ARRAY
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: CALL_OW 259
11147: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11148: LD_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_VAR 0 5
11166: PPUSH
11167: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11171: LD_VAR 0 6
11175: PUSH
11176: LD_INT 1
11178: ARRAY
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_VAR 0 4
11189: PPUSH
11190: CALL_OW 237
// end ;
11194: PPOPN 6
11196: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11197: LD_EXP 4
11201: PUSH
11202: LD_EXP 51
11206: AND
11207: IFFALSE 11286
11209: GO 11211
11211: DISABLE
11212: LD_INT 0
11214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11215: LD_ADDR_VAR 0 1
11219: PUSH
11220: LD_INT 22
11222: PUSH
11223: LD_OWVAR 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 30
11234: PUSH
11235: LD_INT 3
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PPUSH
11246: CALL_OW 69
11250: ST_TO_ADDR
// if not tmp then
11251: LD_VAR 0 1
11255: NOT
11256: IFFALSE 11260
// exit ;
11258: GO 11286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11260: LD_VAR 0 1
11264: PUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 12
11277: ARRAY
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: CALL_OW 234
// end ;
11286: PPOPN 1
11288: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11289: LD_EXP 4
11293: PUSH
11294: LD_EXP 52
11298: AND
11299: IFFALSE 11411
11301: GO 11303
11303: DISABLE
11304: LD_INT 0
11306: PPUSH
11307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11308: LD_ADDR_VAR 0 2
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_OWVAR 2
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 27
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 30
11340: PUSH
11341: LD_INT 26
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 30
11350: PUSH
11351: LD_INT 28
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PPUSH
11368: CALL_OW 69
11372: ST_TO_ADDR
// if not tmp then
11373: LD_VAR 0 2
11377: NOT
11378: IFFALSE 11382
// exit ;
11380: GO 11411
// for i in tmp do
11382: LD_ADDR_VAR 0 1
11386: PUSH
11387: LD_VAR 0 2
11391: PUSH
11392: FOR_IN
11393: IFFALSE 11409
// SetLives ( i , 1 ) ;
11395: LD_VAR 0 1
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: CALL_OW 234
11407: GO 11392
11409: POP
11410: POP
// end ;
11411: PPOPN 2
11413: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11414: LD_EXP 4
11418: PUSH
11419: LD_EXP 53
11423: AND
11424: IFFALSE 11711
11426: GO 11428
11428: DISABLE
11429: LD_INT 0
11431: PPUSH
11432: PPUSH
11433: PPUSH
// begin i := rand ( 1 , 7 ) ;
11434: LD_ADDR_VAR 0 1
11438: PUSH
11439: LD_INT 1
11441: PPUSH
11442: LD_INT 7
11444: PPUSH
11445: CALL_OW 12
11449: ST_TO_ADDR
// case i of 1 :
11450: LD_VAR 0 1
11454: PUSH
11455: LD_INT 1
11457: DOUBLE
11458: EQUAL
11459: IFTRUE 11463
11461: GO 11473
11463: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11464: LD_STRING earthquake(getX(game), 0, 32)
11466: PPUSH
11467: CALL_OW 559
11471: GO 11711
11473: LD_INT 2
11475: DOUBLE
11476: EQUAL
11477: IFTRUE 11481
11479: GO 11495
11481: POP
// begin ToLua ( displayStucuk(); ) ;
11482: LD_STRING displayStucuk();
11484: PPUSH
11485: CALL_OW 559
// ResetFog ;
11489: CALL_OW 335
// end ; 3 :
11493: GO 11711
11495: LD_INT 3
11497: DOUBLE
11498: EQUAL
11499: IFTRUE 11503
11501: GO 11607
11503: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_OWVAR 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 25
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PPUSH
11535: CALL_OW 69
11539: ST_TO_ADDR
// if not tmp then
11540: LD_VAR 0 2
11544: NOT
11545: IFFALSE 11549
// exit ;
11547: GO 11711
// un := tmp [ rand ( 1 , tmp ) ] ;
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_VAR 0 2
11558: PUSH
11559: LD_INT 1
11561: PPUSH
11562: LD_VAR 0 2
11566: PPUSH
11567: CALL_OW 12
11571: ARRAY
11572: ST_TO_ADDR
// if Crawls ( un ) then
11573: LD_VAR 0 3
11577: PPUSH
11578: CALL_OW 318
11582: IFFALSE 11593
// ComWalk ( un ) ;
11584: LD_VAR 0 3
11588: PPUSH
11589: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 8
11600: PPUSH
11601: CALL_OW 336
// end ; 4 :
11605: GO 11711
11607: LD_INT 4
11609: DOUBLE
11610: EQUAL
11611: IFTRUE 11615
11613: GO 11689
11615: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_OWVAR 2
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 30
11635: PUSH
11636: LD_INT 29
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// if not tmp then
11652: LD_VAR 0 2
11656: NOT
11657: IFFALSE 11661
// exit ;
11659: GO 11711
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11661: LD_VAR 0 2
11665: PUSH
11666: LD_INT 1
11668: ARRAY
11669: PPUSH
11670: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11674: LD_VAR 0 2
11678: PUSH
11679: LD_INT 1
11681: ARRAY
11682: PPUSH
11683: CALL_OW 65
// end ; 5 .. 7 :
11687: GO 11711
11689: LD_INT 5
11691: DOUBLE
11692: GREATEREQUAL
11693: IFFALSE 11701
11695: LD_INT 7
11697: DOUBLE
11698: LESSEQUAL
11699: IFTRUE 11703
11701: GO 11710
11703: POP
// StreamSibBomb ; end ;
11704: CALL 7948 0 0
11708: GO 11711
11710: POP
// end ;
11711: PPOPN 3
11713: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11714: LD_EXP 4
11718: PUSH
11719: LD_EXP 54
11723: AND
11724: IFFALSE 11880
11726: GO 11728
11728: DISABLE
11729: LD_INT 0
11731: PPUSH
11732: PPUSH
11733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 81
11741: PUSH
11742: LD_OWVAR 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 2
11753: PUSH
11754: LD_INT 21
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 21
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PPUSH
11783: CALL_OW 69
11787: ST_TO_ADDR
// if not tmp then
11788: LD_VAR 0 2
11792: NOT
11793: IFFALSE 11797
// exit ;
11795: GO 11880
// p := 0 ;
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11805: LD_INT 35
11807: PPUSH
11808: CALL_OW 67
// p := p + 1 ;
11812: LD_ADDR_VAR 0 3
11816: PUSH
11817: LD_VAR 0 3
11821: PUSH
11822: LD_INT 1
11824: PLUS
11825: ST_TO_ADDR
// for i in tmp do
11826: LD_ADDR_VAR 0 1
11830: PUSH
11831: LD_VAR 0 2
11835: PUSH
11836: FOR_IN
11837: IFFALSE 11868
// if GetLives ( i ) < 1000 then
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 256
11848: PUSH
11849: LD_INT 1000
11851: LESS
11852: IFFALSE 11866
// SetLives ( i , 1000 ) ;
11854: LD_VAR 0 1
11858: PPUSH
11859: LD_INT 1000
11861: PPUSH
11862: CALL_OW 234
11866: GO 11836
11868: POP
11869: POP
// until p > 20 ;
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 20
11877: GREATER
11878: IFFALSE 11805
// end ;
11880: PPOPN 3
11882: END
// every 0 0$1 trigger StreamModeActive and sTime do
11883: LD_EXP 4
11887: PUSH
11888: LD_EXP 55
11892: AND
11893: IFFALSE 11928
11895: GO 11897
11897: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11898: LD_INT 28
11900: PPUSH
11901: LD_OWVAR 2
11905: PPUSH
11906: LD_INT 2
11908: PPUSH
11909: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11913: LD_INT 30
11915: PPUSH
11916: LD_OWVAR 2
11920: PPUSH
11921: LD_INT 2
11923: PPUSH
11924: CALL_OW 322
// end ;
11928: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11929: LD_EXP 4
11933: PUSH
11934: LD_EXP 56
11938: AND
11939: IFFALSE 12060
11941: GO 11943
11943: DISABLE
11944: LD_INT 0
11946: PPUSH
11947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11948: LD_ADDR_VAR 0 2
11952: PUSH
11953: LD_INT 22
11955: PUSH
11956: LD_OWVAR 2
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 21
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 23
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: PPUSH
11997: CALL_OW 69
12001: ST_TO_ADDR
// if not tmp then
12002: LD_VAR 0 2
12006: NOT
12007: IFFALSE 12011
// exit ;
12009: GO 12060
// for i in tmp do
12011: LD_ADDR_VAR 0 1
12015: PUSH
12016: LD_VAR 0 2
12020: PUSH
12021: FOR_IN
12022: IFFALSE 12058
// begin if Crawls ( i ) then
12024: LD_VAR 0 1
12028: PPUSH
12029: CALL_OW 318
12033: IFFALSE 12044
// ComWalk ( i ) ;
12035: LD_VAR 0 1
12039: PPUSH
12040: CALL_OW 138
// SetClass ( i , 2 ) ;
12044: LD_VAR 0 1
12048: PPUSH
12049: LD_INT 2
12051: PPUSH
12052: CALL_OW 336
// end ;
12056: GO 12021
12058: POP
12059: POP
// end ;
12060: PPOPN 2
12062: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12063: LD_EXP 4
12067: PUSH
12068: LD_EXP 57
12072: AND
12073: IFFALSE 12361
12075: GO 12077
12077: DISABLE
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
12082: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12083: LD_OWVAR 2
12087: PPUSH
12088: LD_INT 9
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12101: LD_INT 9
12103: PPUSH
12104: LD_OWVAR 2
12108: PPUSH
12109: CALL_OW 343
// uc_side := 9 ;
12113: LD_ADDR_OWVAR 20
12117: PUSH
12118: LD_INT 9
12120: ST_TO_ADDR
// uc_nation := 2 ;
12121: LD_ADDR_OWVAR 21
12125: PUSH
12126: LD_INT 2
12128: ST_TO_ADDR
// hc_name := Dark Warrior ;
12129: LD_ADDR_OWVAR 26
12133: PUSH
12134: LD_STRING Dark Warrior
12136: ST_TO_ADDR
// hc_gallery :=  ;
12137: LD_ADDR_OWVAR 33
12141: PUSH
12142: LD_STRING 
12144: ST_TO_ADDR
// hc_noskilllimit := true ;
12145: LD_ADDR_OWVAR 76
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12153: LD_ADDR_OWVAR 31
12157: PUSH
12158: LD_INT 30
12160: PUSH
12161: LD_INT 30
12163: PUSH
12164: LD_INT 30
12166: PUSH
12167: LD_INT 30
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: ST_TO_ADDR
// un := CreateHuman ;
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: CALL_OW 44
12185: ST_TO_ADDR
// hc_noskilllimit := false ;
12186: LD_ADDR_OWVAR 76
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 51
// ToLua ( playRanger() ) ;
12206: LD_STRING playRanger()
12208: PPUSH
12209: CALL_OW 559
// p := 0 ;
12213: LD_ADDR_VAR 0 2
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12221: LD_INT 35
12223: PPUSH
12224: CALL_OW 67
// p := p + 1 ;
12228: LD_ADDR_VAR 0 2
12232: PUSH
12233: LD_VAR 0 2
12237: PUSH
12238: LD_INT 1
12240: PLUS
12241: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12242: LD_VAR 0 3
12246: PPUSH
12247: CALL_OW 256
12251: PUSH
12252: LD_INT 1000
12254: LESS
12255: IFFALSE 12269
// SetLives ( un , 1000 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1000
12264: PPUSH
12265: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 81
12276: PUSH
12277: LD_OWVAR 2
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 91
12288: PUSH
12289: LD_VAR 0 3
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: PPUSH
12311: LD_VAR 0 3
12315: PPUSH
12316: CALL_OW 74
12320: PPUSH
12321: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12325: LD_VAR 0 2
12329: PUSH
12330: LD_INT 80
12332: GREATER
12333: PUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: CALL_OW 301
12343: OR
12344: IFFALSE 12221
// if un then
12346: LD_VAR 0 3
12350: IFFALSE 12361
// RemoveUnit ( un ) ;
12352: LD_VAR 0 3
12356: PPUSH
12357: CALL_OW 64
// end ;
12361: PPOPN 3
12363: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12364: LD_EXP 58
12368: IFFALSE 12484
12370: GO 12372
12372: DISABLE
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12378: LD_ADDR_VAR 0 2
12382: PUSH
12383: LD_INT 81
12385: PUSH
12386: LD_OWVAR 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 21
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12414: LD_STRING playComputer()
12416: PPUSH
12417: CALL_OW 559
// if not tmp then
12421: LD_VAR 0 2
12425: NOT
12426: IFFALSE 12430
// exit ;
12428: GO 12484
// for i in tmp do
12430: LD_ADDR_VAR 0 1
12434: PUSH
12435: LD_VAR 0 2
12439: PUSH
12440: FOR_IN
12441: IFFALSE 12482
// for j := 1 to 4 do
12443: LD_ADDR_VAR 0 3
12447: PUSH
12448: DOUBLE
12449: LD_INT 1
12451: DEC
12452: ST_TO_ADDR
12453: LD_INT 4
12455: PUSH
12456: FOR_TO
12457: IFFALSE 12478
// SetSkill ( i , j , 10 ) ;
12459: LD_VAR 0 1
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 10
12471: PPUSH
12472: CALL_OW 237
12476: GO 12456
12478: POP
12479: POP
12480: GO 12440
12482: POP
12483: POP
// end ;
12484: PPOPN 3
12486: END
// every 0 0$1 trigger s30 do var i , tmp ;
12487: LD_EXP 59
12491: IFFALSE 12560
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
12499: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12500: LD_ADDR_VAR 0 2
12504: PUSH
12505: LD_INT 22
12507: PUSH
12508: LD_OWVAR 2
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 69
12521: ST_TO_ADDR
// if not tmp then
12522: LD_VAR 0 2
12526: NOT
12527: IFFALSE 12531
// exit ;
12529: GO 12560
// for i in tmp do
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_VAR 0 2
12540: PUSH
12541: FOR_IN
12542: IFFALSE 12558
// SetLives ( i , 300 ) ;
12544: LD_VAR 0 1
12548: PPUSH
12549: LD_INT 300
12551: PPUSH
12552: CALL_OW 234
12556: GO 12541
12558: POP
12559: POP
// end ;
12560: PPOPN 2
12562: END
// every 0 0$1 trigger s60 do var i , tmp ;
12563: LD_EXP 60
12567: IFFALSE 12636
12569: GO 12571
12571: DISABLE
12572: LD_INT 0
12574: PPUSH
12575: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12576: LD_ADDR_VAR 0 2
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_OWVAR 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: ST_TO_ADDR
// if not tmp then
12598: LD_VAR 0 2
12602: NOT
12603: IFFALSE 12607
// exit ;
12605: GO 12636
// for i in tmp do
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: LD_VAR 0 2
12616: PUSH
12617: FOR_IN
12618: IFFALSE 12634
// SetLives ( i , 600 ) ;
12620: LD_VAR 0 1
12624: PPUSH
12625: LD_INT 600
12627: PPUSH
12628: CALL_OW 234
12632: GO 12617
12634: POP
12635: POP
// end ;
12636: PPOPN 2
12638: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12639: LD_INT 0
12641: PPUSH
// case cmd of 301 :
12642: LD_VAR 0 1
12646: PUSH
12647: LD_INT 301
12649: DOUBLE
12650: EQUAL
12651: IFTRUE 12655
12653: GO 12687
12655: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12656: LD_VAR 0 6
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: LD_VAR 0 8
12670: PPUSH
12671: LD_VAR 0 4
12675: PPUSH
12676: LD_VAR 0 5
12680: PPUSH
12681: CALL 13888 0 5
12685: GO 12808
12687: LD_INT 302
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12732
12695: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12696: LD_VAR 0 6
12700: PPUSH
12701: LD_VAR 0 7
12705: PPUSH
12706: LD_VAR 0 8
12710: PPUSH
12711: LD_VAR 0 9
12715: PPUSH
12716: LD_VAR 0 4
12720: PPUSH
12721: LD_VAR 0 5
12725: PPUSH
12726: CALL 13979 0 6
12730: GO 12808
12732: LD_INT 303
12734: DOUBLE
12735: EQUAL
12736: IFTRUE 12740
12738: GO 12777
12740: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12741: LD_VAR 0 6
12745: PPUSH
12746: LD_VAR 0 7
12750: PPUSH
12751: LD_VAR 0 8
12755: PPUSH
12756: LD_VAR 0 9
12760: PPUSH
12761: LD_VAR 0 4
12765: PPUSH
12766: LD_VAR 0 5
12770: PPUSH
12771: CALL 12813 0 6
12775: GO 12808
12777: LD_INT 304
12779: DOUBLE
12780: EQUAL
12781: IFTRUE 12785
12783: GO 12807
12785: POP
// hHackTeleport ( unit , x , y ) ; end ;
12786: LD_VAR 0 2
12790: PPUSH
12791: LD_VAR 0 4
12795: PPUSH
12796: LD_VAR 0 5
12800: PPUSH
12801: CALL 14572 0 3
12805: GO 12808
12807: POP
// end ;
12808: LD_VAR 0 12
12812: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12813: LD_INT 0
12815: PPUSH
12816: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12817: LD_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: LESS
12825: PUSH
12826: LD_VAR 0 1
12830: PUSH
12831: LD_INT 3
12833: GREATER
12834: OR
12835: PUSH
12836: LD_VAR 0 5
12840: PPUSH
12841: LD_VAR 0 6
12845: PPUSH
12846: CALL_OW 428
12850: OR
12851: IFFALSE 12855
// exit ;
12853: GO 13575
// uc_side := your_side ;
12855: LD_ADDR_OWVAR 20
12859: PUSH
12860: LD_OWVAR 2
12864: ST_TO_ADDR
// uc_nation := nation ;
12865: LD_ADDR_OWVAR 21
12869: PUSH
12870: LD_VAR 0 1
12874: ST_TO_ADDR
// bc_level = 1 ;
12875: LD_ADDR_OWVAR 43
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// case btype of 1 :
12883: LD_VAR 0 2
12887: PUSH
12888: LD_INT 1
12890: DOUBLE
12891: EQUAL
12892: IFTRUE 12896
12894: GO 12907
12896: POP
// bc_type := b_depot ; 2 :
12897: LD_ADDR_OWVAR 42
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
12905: GO 13519
12907: LD_INT 2
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12926
12915: POP
// bc_type := b_warehouse ; 3 :
12916: LD_ADDR_OWVAR 42
12920: PUSH
12921: LD_INT 1
12923: ST_TO_ADDR
12924: GO 13519
12926: LD_INT 3
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12945
12934: POP
// bc_type := b_lab ; 4 .. 9 :
12935: LD_ADDR_OWVAR 42
12939: PUSH
12940: LD_INT 6
12942: ST_TO_ADDR
12943: GO 13519
12945: LD_INT 4
12947: DOUBLE
12948: GREATEREQUAL
12949: IFFALSE 12957
12951: LD_INT 9
12953: DOUBLE
12954: LESSEQUAL
12955: IFTRUE 12959
12957: GO 13011
12959: POP
// begin bc_type := b_lab_half ;
12960: LD_ADDR_OWVAR 42
12964: PUSH
12965: LD_INT 7
12967: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12968: LD_ADDR_OWVAR 44
12972: PUSH
12973: LD_INT 10
12975: PUSH
12976: LD_INT 11
12978: PUSH
12979: LD_INT 12
12981: PUSH
12982: LD_INT 15
12984: PUSH
12985: LD_INT 14
12987: PUSH
12988: LD_INT 13
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: PUSH
12999: LD_VAR 0 2
13003: PUSH
13004: LD_INT 3
13006: MINUS
13007: ARRAY
13008: ST_TO_ADDR
// end ; 10 .. 13 :
13009: GO 13519
13011: LD_INT 10
13013: DOUBLE
13014: GREATEREQUAL
13015: IFFALSE 13023
13017: LD_INT 13
13019: DOUBLE
13020: LESSEQUAL
13021: IFTRUE 13025
13023: GO 13102
13025: POP
// begin bc_type := b_lab_full ;
13026: LD_ADDR_OWVAR 42
13030: PUSH
13031: LD_INT 8
13033: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13034: LD_ADDR_OWVAR 44
13038: PUSH
13039: LD_INT 10
13041: PUSH
13042: LD_INT 12
13044: PUSH
13045: LD_INT 14
13047: PUSH
13048: LD_INT 13
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: PUSH
13057: LD_VAR 0 2
13061: PUSH
13062: LD_INT 9
13064: MINUS
13065: ARRAY
13066: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13067: LD_ADDR_OWVAR 45
13071: PUSH
13072: LD_INT 11
13074: PUSH
13075: LD_INT 15
13077: PUSH
13078: LD_INT 12
13080: PUSH
13081: LD_INT 15
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: PUSH
13090: LD_VAR 0 2
13094: PUSH
13095: LD_INT 9
13097: MINUS
13098: ARRAY
13099: ST_TO_ADDR
// end ; 14 :
13100: GO 13519
13102: LD_INT 14
13104: DOUBLE
13105: EQUAL
13106: IFTRUE 13110
13108: GO 13121
13110: POP
// bc_type := b_workshop ; 15 :
13111: LD_ADDR_OWVAR 42
13115: PUSH
13116: LD_INT 2
13118: ST_TO_ADDR
13119: GO 13519
13121: LD_INT 15
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13140
13129: POP
// bc_type := b_factory ; 16 :
13130: LD_ADDR_OWVAR 42
13134: PUSH
13135: LD_INT 3
13137: ST_TO_ADDR
13138: GO 13519
13140: LD_INT 16
13142: DOUBLE
13143: EQUAL
13144: IFTRUE 13148
13146: GO 13159
13148: POP
// bc_type := b_ext_gun ; 17 :
13149: LD_ADDR_OWVAR 42
13153: PUSH
13154: LD_INT 17
13156: ST_TO_ADDR
13157: GO 13519
13159: LD_INT 17
13161: DOUBLE
13162: EQUAL
13163: IFTRUE 13167
13165: GO 13195
13167: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13168: LD_ADDR_OWVAR 42
13172: PUSH
13173: LD_INT 19
13175: PUSH
13176: LD_INT 23
13178: PUSH
13179: LD_INT 19
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: LD_VAR 0 1
13191: ARRAY
13192: ST_TO_ADDR
13193: GO 13519
13195: LD_INT 18
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13214
13203: POP
// bc_type := b_ext_radar ; 19 :
13204: LD_ADDR_OWVAR 42
13208: PUSH
13209: LD_INT 20
13211: ST_TO_ADDR
13212: GO 13519
13214: LD_INT 19
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13233
13222: POP
// bc_type := b_ext_radio ; 20 :
13223: LD_ADDR_OWVAR 42
13227: PUSH
13228: LD_INT 22
13230: ST_TO_ADDR
13231: GO 13519
13233: LD_INT 20
13235: DOUBLE
13236: EQUAL
13237: IFTRUE 13241
13239: GO 13252
13241: POP
// bc_type := b_ext_siberium ; 21 :
13242: LD_ADDR_OWVAR 42
13246: PUSH
13247: LD_INT 21
13249: ST_TO_ADDR
13250: GO 13519
13252: LD_INT 21
13254: DOUBLE
13255: EQUAL
13256: IFTRUE 13260
13258: GO 13271
13260: POP
// bc_type := b_ext_computer ; 22 :
13261: LD_ADDR_OWVAR 42
13265: PUSH
13266: LD_INT 24
13268: ST_TO_ADDR
13269: GO 13519
13271: LD_INT 22
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13290
13279: POP
// bc_type := b_ext_track ; 23 :
13280: LD_ADDR_OWVAR 42
13284: PUSH
13285: LD_INT 16
13287: ST_TO_ADDR
13288: GO 13519
13290: LD_INT 23
13292: DOUBLE
13293: EQUAL
13294: IFTRUE 13298
13296: GO 13309
13298: POP
// bc_type := b_ext_laser ; 24 :
13299: LD_ADDR_OWVAR 42
13303: PUSH
13304: LD_INT 25
13306: ST_TO_ADDR
13307: GO 13519
13309: LD_INT 24
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13328
13317: POP
// bc_type := b_control_tower ; 25 :
13318: LD_ADDR_OWVAR 42
13322: PUSH
13323: LD_INT 36
13325: ST_TO_ADDR
13326: GO 13519
13328: LD_INT 25
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13347
13336: POP
// bc_type := b_breastwork ; 26 :
13337: LD_ADDR_OWVAR 42
13341: PUSH
13342: LD_INT 31
13344: ST_TO_ADDR
13345: GO 13519
13347: LD_INT 26
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13366
13355: POP
// bc_type := b_bunker ; 27 :
13356: LD_ADDR_OWVAR 42
13360: PUSH
13361: LD_INT 32
13363: ST_TO_ADDR
13364: GO 13519
13366: LD_INT 27
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13385
13374: POP
// bc_type := b_turret ; 28 :
13375: LD_ADDR_OWVAR 42
13379: PUSH
13380: LD_INT 33
13382: ST_TO_ADDR
13383: GO 13519
13385: LD_INT 28
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13404
13393: POP
// bc_type := b_armoury ; 29 :
13394: LD_ADDR_OWVAR 42
13398: PUSH
13399: LD_INT 4
13401: ST_TO_ADDR
13402: GO 13519
13404: LD_INT 29
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13423
13412: POP
// bc_type := b_barracks ; 30 :
13413: LD_ADDR_OWVAR 42
13417: PUSH
13418: LD_INT 5
13420: ST_TO_ADDR
13421: GO 13519
13423: LD_INT 30
13425: DOUBLE
13426: EQUAL
13427: IFTRUE 13431
13429: GO 13442
13431: POP
// bc_type := b_solar_power ; 31 :
13432: LD_ADDR_OWVAR 42
13436: PUSH
13437: LD_INT 27
13439: ST_TO_ADDR
13440: GO 13519
13442: LD_INT 31
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13461
13450: POP
// bc_type := b_oil_power ; 32 :
13451: LD_ADDR_OWVAR 42
13455: PUSH
13456: LD_INT 26
13458: ST_TO_ADDR
13459: GO 13519
13461: LD_INT 32
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13469
13467: GO 13480
13469: POP
// bc_type := b_siberite_power ; 33 :
13470: LD_ADDR_OWVAR 42
13474: PUSH
13475: LD_INT 28
13477: ST_TO_ADDR
13478: GO 13519
13480: LD_INT 33
13482: DOUBLE
13483: EQUAL
13484: IFTRUE 13488
13486: GO 13499
13488: POP
// bc_type := b_oil_mine ; 34 :
13489: LD_ADDR_OWVAR 42
13493: PUSH
13494: LD_INT 29
13496: ST_TO_ADDR
13497: GO 13519
13499: LD_INT 34
13501: DOUBLE
13502: EQUAL
13503: IFTRUE 13507
13505: GO 13518
13507: POP
// bc_type := b_siberite_mine ; end ;
13508: LD_ADDR_OWVAR 42
13512: PUSH
13513: LD_INT 30
13515: ST_TO_ADDR
13516: GO 13519
13518: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13519: LD_ADDR_VAR 0 8
13523: PUSH
13524: LD_VAR 0 5
13528: PPUSH
13529: LD_VAR 0 6
13533: PPUSH
13534: LD_VAR 0 3
13538: PPUSH
13539: CALL_OW 47
13543: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13544: LD_OWVAR 42
13548: PUSH
13549: LD_INT 32
13551: PUSH
13552: LD_INT 33
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: IN
13559: IFFALSE 13575
// PlaceWeaponTurret ( b , weapon ) ;
13561: LD_VAR 0 8
13565: PPUSH
13566: LD_VAR 0 4
13570: PPUSH
13571: CALL_OW 431
// end ;
13575: LD_VAR 0 7
13579: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13580: LD_INT 0
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13586: LD_ADDR_VAR 0 4
13590: PUSH
13591: LD_INT 22
13593: PUSH
13594: LD_OWVAR 2
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: LD_INT 30
13608: PUSH
13609: LD_INT 0
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 30
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: ST_TO_ADDR
// if not tmp then
13640: LD_VAR 0 4
13644: NOT
13645: IFFALSE 13649
// exit ;
13647: GO 13708
// for i in tmp do
13649: LD_ADDR_VAR 0 2
13653: PUSH
13654: LD_VAR 0 4
13658: PUSH
13659: FOR_IN
13660: IFFALSE 13706
// for j = 1 to 3 do
13662: LD_ADDR_VAR 0 3
13666: PUSH
13667: DOUBLE
13668: LD_INT 1
13670: DEC
13671: ST_TO_ADDR
13672: LD_INT 3
13674: PUSH
13675: FOR_TO
13676: IFFALSE 13702
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: CALL_OW 274
13687: PPUSH
13688: LD_VAR 0 3
13692: PPUSH
13693: LD_INT 99999
13695: PPUSH
13696: CALL_OW 277
13700: GO 13675
13702: POP
13703: POP
13704: GO 13659
13706: POP
13707: POP
// end ;
13708: LD_VAR 0 1
13712: RET
// export function hHackSetLevel10 ; var i , j ; begin
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
13717: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 1
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: PUSH
13738: FOR_IN
13739: IFFALSE 13791
// if IsSelected ( i ) then
13741: LD_VAR 0 2
13745: PPUSH
13746: CALL_OW 306
13750: IFFALSE 13789
// begin for j := 1 to 4 do
13752: LD_ADDR_VAR 0 3
13756: PUSH
13757: DOUBLE
13758: LD_INT 1
13760: DEC
13761: ST_TO_ADDR
13762: LD_INT 4
13764: PUSH
13765: FOR_TO
13766: IFFALSE 13787
// SetSkill ( i , j , 10 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_VAR 0 3
13777: PPUSH
13778: LD_INT 10
13780: PPUSH
13781: CALL_OW 237
13785: GO 13765
13787: POP
13788: POP
// end ;
13789: GO 13738
13791: POP
13792: POP
// end ;
13793: LD_VAR 0 1
13797: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13798: LD_INT 0
13800: PPUSH
13801: PPUSH
13802: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13803: LD_ADDR_VAR 0 2
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_OWVAR 2
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: PUSH
13839: FOR_IN
13840: IFFALSE 13881
// begin for j := 1 to 4 do
13842: LD_ADDR_VAR 0 3
13846: PUSH
13847: DOUBLE
13848: LD_INT 1
13850: DEC
13851: ST_TO_ADDR
13852: LD_INT 4
13854: PUSH
13855: FOR_TO
13856: IFFALSE 13877
// SetSkill ( i , j , 10 ) ;
13858: LD_VAR 0 2
13862: PPUSH
13863: LD_VAR 0 3
13867: PPUSH
13868: LD_INT 10
13870: PPUSH
13871: CALL_OW 237
13875: GO 13855
13877: POP
13878: POP
// end ;
13879: GO 13839
13881: POP
13882: POP
// end ;
13883: LD_VAR 0 1
13887: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13888: LD_INT 0
13890: PPUSH
// uc_side := your_side ;
13891: LD_ADDR_OWVAR 20
13895: PUSH
13896: LD_OWVAR 2
13900: ST_TO_ADDR
// uc_nation := nation ;
13901: LD_ADDR_OWVAR 21
13905: PUSH
13906: LD_VAR 0 1
13910: ST_TO_ADDR
// InitHc ;
13911: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13915: LD_INT 0
13917: PPUSH
13918: LD_VAR 0 2
13922: PPUSH
13923: LD_VAR 0 3
13927: PPUSH
13928: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13932: LD_VAR 0 4
13936: PPUSH
13937: LD_VAR 0 5
13941: PPUSH
13942: CALL_OW 428
13946: PUSH
13947: LD_INT 0
13949: EQUAL
13950: IFFALSE 13974
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13952: CALL_OW 44
13956: PPUSH
13957: LD_VAR 0 4
13961: PPUSH
13962: LD_VAR 0 5
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 48
// end ;
13974: LD_VAR 0 6
13978: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13979: LD_INT 0
13981: PPUSH
13982: PPUSH
// uc_side := your_side ;
13983: LD_ADDR_OWVAR 20
13987: PUSH
13988: LD_OWVAR 2
13992: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 1
14000: PUSH
14001: LD_INT 2
14003: PUSH
14004: LD_INT 3
14006: PUSH
14007: LD_INT 4
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: IN
14020: IFFALSE 14032
// uc_nation := nation_american else
14022: LD_ADDR_OWVAR 21
14026: PUSH
14027: LD_INT 1
14029: ST_TO_ADDR
14030: GO 14075
// if chassis in [ 11 , 12 , 13 , 14 ] then
14032: LD_VAR 0 1
14036: PUSH
14037: LD_INT 11
14039: PUSH
14040: LD_INT 12
14042: PUSH
14043: LD_INT 13
14045: PUSH
14046: LD_INT 14
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: IN
14055: IFFALSE 14067
// uc_nation := nation_arabian else
14057: LD_ADDR_OWVAR 21
14061: PUSH
14062: LD_INT 2
14064: ST_TO_ADDR
14065: GO 14075
// uc_nation := nation_russian ;
14067: LD_ADDR_OWVAR 21
14071: PUSH
14072: LD_INT 3
14074: ST_TO_ADDR
// vc_chassis := chassis ;
14075: LD_ADDR_OWVAR 37
14079: PUSH
14080: LD_VAR 0 1
14084: ST_TO_ADDR
// vc_engine := engine ;
14085: LD_ADDR_OWVAR 39
14089: PUSH
14090: LD_VAR 0 2
14094: ST_TO_ADDR
// vc_control := control ;
14095: LD_ADDR_OWVAR 38
14099: PUSH
14100: LD_VAR 0 3
14104: ST_TO_ADDR
// vc_weapon := weapon ;
14105: LD_ADDR_OWVAR 40
14109: PUSH
14110: LD_VAR 0 4
14114: ST_TO_ADDR
// un := CreateVehicle ;
14115: LD_ADDR_VAR 0 8
14119: PUSH
14120: CALL_OW 45
14124: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14125: LD_VAR 0 8
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: LD_INT 5
14135: PPUSH
14136: CALL_OW 12
14140: PPUSH
14141: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14145: LD_VAR 0 8
14149: PPUSH
14150: LD_VAR 0 5
14154: PPUSH
14155: LD_VAR 0 6
14159: PPUSH
14160: LD_INT 1
14162: PPUSH
14163: CALL_OW 48
// end ;
14167: LD_VAR 0 7
14171: RET
// export hInvincible ; every 1 do
14172: GO 14174
14174: DISABLE
// hInvincible := [ ] ;
14175: LD_ADDR_EXP 61
14179: PUSH
14180: EMPTY
14181: ST_TO_ADDR
14182: END
// every 10 do var i ;
14183: GO 14185
14185: DISABLE
14186: LD_INT 0
14188: PPUSH
// begin enable ;
14189: ENABLE
// if not hInvincible then
14190: LD_EXP 61
14194: NOT
14195: IFFALSE 14199
// exit ;
14197: GO 14243
// for i in hInvincible do
14199: LD_ADDR_VAR 0 1
14203: PUSH
14204: LD_EXP 61
14208: PUSH
14209: FOR_IN
14210: IFFALSE 14241
// if GetLives ( i ) < 1000 then
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 256
14221: PUSH
14222: LD_INT 1000
14224: LESS
14225: IFFALSE 14239
// SetLives ( i , 1000 ) ;
14227: LD_VAR 0 1
14231: PPUSH
14232: LD_INT 1000
14234: PPUSH
14235: CALL_OW 234
14239: GO 14209
14241: POP
14242: POP
// end ;
14243: PPOPN 1
14245: END
// export function hHackInvincible ; var i ; begin
14246: LD_INT 0
14248: PPUSH
14249: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14250: LD_ADDR_VAR 0 2
14254: PUSH
14255: LD_INT 2
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: PUSH
14288: FOR_IN
14289: IFFALSE 14350
// if IsSelected ( i ) then
14291: LD_VAR 0 2
14295: PPUSH
14296: CALL_OW 306
14300: IFFALSE 14348
// begin if i in hInvincible then
14302: LD_VAR 0 2
14306: PUSH
14307: LD_EXP 61
14311: IN
14312: IFFALSE 14332
// hInvincible := hInvincible diff i else
14314: LD_ADDR_EXP 61
14318: PUSH
14319: LD_EXP 61
14323: PUSH
14324: LD_VAR 0 2
14328: DIFF
14329: ST_TO_ADDR
14330: GO 14348
// hInvincible := hInvincible union i ;
14332: LD_ADDR_EXP 61
14336: PUSH
14337: LD_EXP 61
14341: PUSH
14342: LD_VAR 0 2
14346: UNION
14347: ST_TO_ADDR
// end ;
14348: GO 14288
14350: POP
14351: POP
// end ;
14352: LD_VAR 0 1
14356: RET
// export function hHackInvisible ; var i , j ; begin
14357: LD_INT 0
14359: PPUSH
14360: PPUSH
14361: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14362: LD_ADDR_VAR 0 2
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PPUSH
14377: CALL_OW 69
14381: PUSH
14382: FOR_IN
14383: IFFALSE 14407
// if IsSelected ( i ) then
14385: LD_VAR 0 2
14389: PPUSH
14390: CALL_OW 306
14394: IFFALSE 14405
// ComForceInvisible ( i ) ;
14396: LD_VAR 0 2
14400: PPUSH
14401: CALL_OW 496
14405: GO 14382
14407: POP
14408: POP
// end ;
14409: LD_VAR 0 1
14413: RET
// export function hHackChangeYourSide ; begin
14414: LD_INT 0
14416: PPUSH
// if your_side = 8 then
14417: LD_OWVAR 2
14421: PUSH
14422: LD_INT 8
14424: EQUAL
14425: IFFALSE 14437
// your_side := 0 else
14427: LD_ADDR_OWVAR 2
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
14435: GO 14451
// your_side := your_side + 1 ;
14437: LD_ADDR_OWVAR 2
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: LD_INT 1
14449: PLUS
14450: ST_TO_ADDR
// end ;
14451: LD_VAR 0 1
14455: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14456: LD_INT 0
14458: PPUSH
14459: PPUSH
14460: PPUSH
// for i in all_units do
14461: LD_ADDR_VAR 0 2
14465: PUSH
14466: LD_OWVAR 3
14470: PUSH
14471: FOR_IN
14472: IFFALSE 14550
// if IsSelected ( i ) then
14474: LD_VAR 0 2
14478: PPUSH
14479: CALL_OW 306
14483: IFFALSE 14548
// begin j := GetSide ( i ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_VAR 0 2
14494: PPUSH
14495: CALL_OW 255
14499: ST_TO_ADDR
// if j = 8 then
14500: LD_VAR 0 3
14504: PUSH
14505: LD_INT 8
14507: EQUAL
14508: IFFALSE 14520
// j := 0 else
14510: LD_ADDR_VAR 0 3
14514: PUSH
14515: LD_INT 0
14517: ST_TO_ADDR
14518: GO 14534
// j := j + 1 ;
14520: LD_ADDR_VAR 0 3
14524: PUSH
14525: LD_VAR 0 3
14529: PUSH
14530: LD_INT 1
14532: PLUS
14533: ST_TO_ADDR
// SetSide ( i , j ) ;
14534: LD_VAR 0 2
14538: PPUSH
14539: LD_VAR 0 3
14543: PPUSH
14544: CALL_OW 235
// end ;
14548: GO 14471
14550: POP
14551: POP
// end ;
14552: LD_VAR 0 1
14556: RET
// export function hHackFog ; begin
14557: LD_INT 0
14559: PPUSH
// FogOff ( true ) ;
14560: LD_INT 1
14562: PPUSH
14563: CALL_OW 344
// end ;
14567: LD_VAR 0 1
14571: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14572: LD_INT 0
14574: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14575: LD_VAR 0 1
14579: PPUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: LD_INT 1
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 483
// CenterOnXY ( x , y ) ;
14600: LD_VAR 0 2
14604: PPUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: CALL_OW 84
// end ;
14614: LD_VAR 0 4
14618: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14619: LD_INT 0
14621: PPUSH
14622: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14623: LD_VAR 0 1
14627: NOT
14628: PUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: CALL_OW 488
14643: NOT
14644: OR
14645: PUSH
14646: LD_VAR 0 1
14650: PPUSH
14651: CALL_OW 266
14655: PUSH
14656: LD_INT 3
14658: NONEQUAL
14659: PUSH
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 247
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: NOT
14674: AND
14675: OR
14676: IFFALSE 14680
// exit ;
14678: GO 14829
// if GetType ( factory ) = unit_human then
14680: LD_VAR 0 1
14684: PPUSH
14685: CALL_OW 247
14689: PUSH
14690: LD_INT 1
14692: EQUAL
14693: IFFALSE 14710
// factory := IsInUnit ( factory ) ;
14695: LD_ADDR_VAR 0 1
14699: PUSH
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 310
14709: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 266
14719: PUSH
14720: LD_INT 3
14722: NONEQUAL
14723: IFFALSE 14727
// exit ;
14725: GO 14829
// if HexInfo ( x , y ) = factory then
14727: LD_VAR 0 2
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: CALL_OW 428
14741: PUSH
14742: LD_VAR 0 1
14746: EQUAL
14747: IFFALSE 14774
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
14749: LD_ADDR_EXP 62
14753: PUSH
14754: LD_EXP 62
14758: PPUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: LD_INT 0
14766: PPUSH
14767: CALL_OW 1
14771: ST_TO_ADDR
14772: GO 14825
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
14774: LD_ADDR_EXP 62
14778: PUSH
14779: LD_EXP 62
14783: PPUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 255
14798: PUSH
14799: LD_VAR 0 1
14803: PUSH
14804: LD_VAR 0 2
14808: PUSH
14809: LD_VAR 0 3
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 1
14824: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14825: CALL 14834 0 0
// end ;
14829: LD_VAR 0 4
14833: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14834: LD_INT 0
14836: PPUSH
14837: PPUSH
14838: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14839: LD_STRING resetFactoryWaypoint();
14841: PPUSH
14842: CALL_OW 559
// if factoryWaypoints then
14846: LD_EXP 62
14850: IFFALSE 14976
// begin list := PrepareArray ( factoryWaypoints ) ;
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_EXP 62
14861: PPUSH
14862: CALL 61412 0 1
14866: ST_TO_ADDR
// for i := 1 to list do
14867: LD_ADDR_VAR 0 2
14871: PUSH
14872: DOUBLE
14873: LD_INT 1
14875: DEC
14876: ST_TO_ADDR
14877: LD_VAR 0 3
14881: PUSH
14882: FOR_TO
14883: IFFALSE 14974
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
14885: LD_STRING setFactoryWaypointXY(
14887: PUSH
14888: LD_VAR 0 3
14892: PUSH
14893: LD_VAR 0 2
14897: ARRAY
14898: PUSH
14899: LD_INT 1
14901: ARRAY
14902: STR
14903: PUSH
14904: LD_STRING ,
14906: STR
14907: PUSH
14908: LD_VAR 0 3
14912: PUSH
14913: LD_VAR 0 2
14917: ARRAY
14918: PUSH
14919: LD_INT 2
14921: ARRAY
14922: STR
14923: PUSH
14924: LD_STRING ,
14926: STR
14927: PUSH
14928: LD_VAR 0 3
14932: PUSH
14933: LD_VAR 0 2
14937: ARRAY
14938: PUSH
14939: LD_INT 3
14941: ARRAY
14942: STR
14943: PUSH
14944: LD_STRING ,
14946: STR
14947: PUSH
14948: LD_VAR 0 3
14952: PUSH
14953: LD_VAR 0 2
14957: ARRAY
14958: PUSH
14959: LD_INT 4
14961: ARRAY
14962: STR
14963: PUSH
14964: LD_STRING )
14966: STR
14967: PPUSH
14968: CALL_OW 559
14972: GO 14882
14974: POP
14975: POP
// end ; end ;
14976: LD_VAR 0 1
14980: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
14981: LD_INT 0
14983: PPUSH
// if HexInfo ( x , y ) = warehouse then
14984: LD_VAR 0 2
14988: PPUSH
14989: LD_VAR 0 3
14993: PPUSH
14994: CALL_OW 428
14998: PUSH
14999: LD_VAR 0 1
15003: EQUAL
15004: IFFALSE 15031
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15006: LD_ADDR_EXP 63
15010: PUSH
15011: LD_EXP 63
15015: PPUSH
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_INT 0
15023: PPUSH
15024: CALL_OW 1
15028: ST_TO_ADDR
15029: GO 15082
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15031: LD_ADDR_EXP 63
15035: PUSH
15036: LD_EXP 63
15040: PPUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: CALL_OW 255
15055: PUSH
15056: LD_VAR 0 1
15060: PUSH
15061: LD_VAR 0 2
15065: PUSH
15066: LD_VAR 0 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL_OW 1
15081: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15082: CALL 15091 0 0
// end ;
15086: LD_VAR 0 4
15090: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
15095: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15096: LD_STRING resetWarehouseGatheringPoints();
15098: PPUSH
15099: CALL_OW 559
// if warehouseGatheringPoints then
15103: LD_EXP 63
15107: IFFALSE 15233
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_EXP 63
15118: PPUSH
15119: CALL 61412 0 1
15123: ST_TO_ADDR
// for i := 1 to list do
15124: LD_ADDR_VAR 0 2
15128: PUSH
15129: DOUBLE
15130: LD_INT 1
15132: DEC
15133: ST_TO_ADDR
15134: LD_VAR 0 3
15138: PUSH
15139: FOR_TO
15140: IFFALSE 15231
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15142: LD_STRING setWarehouseGatheringPointXY(
15144: PUSH
15145: LD_VAR 0 3
15149: PUSH
15150: LD_VAR 0 2
15154: ARRAY
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: STR
15160: PUSH
15161: LD_STRING ,
15163: STR
15164: PUSH
15165: LD_VAR 0 3
15169: PUSH
15170: LD_VAR 0 2
15174: ARRAY
15175: PUSH
15176: LD_INT 2
15178: ARRAY
15179: STR
15180: PUSH
15181: LD_STRING ,
15183: STR
15184: PUSH
15185: LD_VAR 0 3
15189: PUSH
15190: LD_VAR 0 2
15194: ARRAY
15195: PUSH
15196: LD_INT 3
15198: ARRAY
15199: STR
15200: PUSH
15201: LD_STRING ,
15203: STR
15204: PUSH
15205: LD_VAR 0 3
15209: PUSH
15210: LD_VAR 0 2
15214: ARRAY
15215: PUSH
15216: LD_INT 4
15218: ARRAY
15219: STR
15220: PUSH
15221: LD_STRING )
15223: STR
15224: PPUSH
15225: CALL_OW 559
15229: GO 15139
15231: POP
15232: POP
// end ; end ;
15233: LD_VAR 0 1
15237: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15238: LD_EXP 63
15242: IFFALSE 15927
15244: GO 15246
15246: DISABLE
15247: LD_INT 0
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
// begin enable ;
15258: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15259: LD_ADDR_VAR 0 3
15263: PUSH
15264: LD_EXP 63
15268: PPUSH
15269: CALL 61412 0 1
15273: ST_TO_ADDR
// if not list then
15274: LD_VAR 0 3
15278: NOT
15279: IFFALSE 15283
// exit ;
15281: GO 15927
// for i := 1 to list do
15283: LD_ADDR_VAR 0 1
15287: PUSH
15288: DOUBLE
15289: LD_INT 1
15291: DEC
15292: ST_TO_ADDR
15293: LD_VAR 0 3
15297: PUSH
15298: FOR_TO
15299: IFFALSE 15925
// begin depot := list [ i ] [ 2 ] ;
15301: LD_ADDR_VAR 0 8
15305: PUSH
15306: LD_VAR 0 3
15310: PUSH
15311: LD_VAR 0 1
15315: ARRAY
15316: PUSH
15317: LD_INT 2
15319: ARRAY
15320: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15321: LD_ADDR_VAR 0 5
15325: PUSH
15326: LD_VAR 0 3
15330: PUSH
15331: LD_VAR 0 1
15335: ARRAY
15336: PUSH
15337: LD_INT 1
15339: ARRAY
15340: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15341: LD_VAR 0 8
15345: PPUSH
15346: CALL_OW 301
15350: PUSH
15351: LD_VAR 0 5
15355: PUSH
15356: LD_VAR 0 8
15360: PPUSH
15361: CALL_OW 255
15365: NONEQUAL
15366: OR
15367: IFFALSE 15396
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15369: LD_ADDR_EXP 63
15373: PUSH
15374: LD_EXP 63
15378: PPUSH
15379: LD_VAR 0 8
15383: PPUSH
15384: LD_INT 0
15386: PPUSH
15387: CALL_OW 1
15391: ST_TO_ADDR
// exit ;
15392: POP
15393: POP
15394: GO 15927
// end ; x := list [ i ] [ 3 ] ;
15396: LD_ADDR_VAR 0 6
15400: PUSH
15401: LD_VAR 0 3
15405: PUSH
15406: LD_VAR 0 1
15410: ARRAY
15411: PUSH
15412: LD_INT 3
15414: ARRAY
15415: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15416: LD_ADDR_VAR 0 7
15420: PUSH
15421: LD_VAR 0 3
15425: PUSH
15426: LD_VAR 0 1
15430: ARRAY
15431: PUSH
15432: LD_INT 4
15434: ARRAY
15435: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15436: LD_ADDR_VAR 0 9
15440: PUSH
15441: LD_VAR 0 6
15445: PPUSH
15446: LD_VAR 0 7
15450: PPUSH
15451: LD_INT 16
15453: PPUSH
15454: CALL 60000 0 3
15458: ST_TO_ADDR
// if not cratesNearbyPoint then
15459: LD_VAR 0 9
15463: NOT
15464: IFFALSE 15470
// exit ;
15466: POP
15467: POP
15468: GO 15927
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15470: LD_ADDR_VAR 0 4
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_VAR 0 5
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 60
15492: PUSH
15493: EMPTY
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 91
15502: PUSH
15503: LD_VAR 0 8
15507: PUSH
15508: LD_INT 6
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 25
15531: PUSH
15532: LD_INT 16
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 69
15554: PUSH
15555: LD_VAR 0 8
15559: PPUSH
15560: CALL_OW 313
15564: PPUSH
15565: LD_INT 3
15567: PUSH
15568: LD_INT 60
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 2
15580: PUSH
15581: LD_INT 25
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 25
15593: PUSH
15594: LD_INT 16
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 72
15614: UNION
15615: ST_TO_ADDR
// if tmp then
15616: LD_VAR 0 4
15620: IFFALSE 15700
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15622: LD_ADDR_VAR 0 4
15626: PUSH
15627: LD_VAR 0 4
15631: PPUSH
15632: LD_INT 3
15634: PPUSH
15635: CALL 57969 0 2
15639: ST_TO_ADDR
// for j in tmp do
15640: LD_ADDR_VAR 0 2
15644: PUSH
15645: LD_VAR 0 4
15649: PUSH
15650: FOR_IN
15651: IFFALSE 15694
// begin if IsInUnit ( j ) then
15653: LD_VAR 0 2
15657: PPUSH
15658: CALL_OW 310
15662: IFFALSE 15673
// ComExit ( j ) ;
15664: LD_VAR 0 2
15668: PPUSH
15669: CALL 58052 0 1
// AddComCollect ( j , x , y ) ;
15673: LD_VAR 0 2
15677: PPUSH
15678: LD_VAR 0 6
15682: PPUSH
15683: LD_VAR 0 7
15687: PPUSH
15688: CALL_OW 177
// end ;
15692: GO 15650
15694: POP
15695: POP
// exit ;
15696: POP
15697: POP
15698: GO 15927
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15700: LD_ADDR_VAR 0 4
15704: PUSH
15705: LD_INT 22
15707: PUSH
15708: LD_VAR 0 5
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 91
15719: PUSH
15720: LD_VAR 0 8
15724: PUSH
15725: LD_INT 8
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 2
15735: PUSH
15736: LD_INT 34
15738: PUSH
15739: LD_INT 12
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 34
15748: PUSH
15749: LD_INT 51
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 34
15758: PUSH
15759: LD_INT 32
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 34
15768: PUSH
15769: LD_INT 89
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 69
15792: ST_TO_ADDR
// if tmp then
15793: LD_VAR 0 4
15797: IFFALSE 15923
// begin for j in tmp do
15799: LD_ADDR_VAR 0 2
15803: PUSH
15804: LD_VAR 0 4
15808: PUSH
15809: FOR_IN
15810: IFFALSE 15921
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 262
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: PUSH
15826: LD_VAR 0 2
15830: PPUSH
15831: CALL_OW 261
15835: PUSH
15836: LD_INT 20
15838: GREATER
15839: OR
15840: PUSH
15841: LD_VAR 0 2
15845: PPUSH
15846: CALL_OW 314
15850: NOT
15851: AND
15852: PUSH
15853: LD_VAR 0 2
15857: PPUSH
15858: CALL_OW 263
15862: PUSH
15863: LD_INT 1
15865: NONEQUAL
15866: PUSH
15867: LD_VAR 0 2
15871: PPUSH
15872: CALL_OW 311
15876: OR
15877: AND
15878: IFFALSE 15919
// begin ComCollect ( j , x , y ) ;
15880: LD_VAR 0 2
15884: PPUSH
15885: LD_VAR 0 6
15889: PPUSH
15890: LD_VAR 0 7
15894: PPUSH
15895: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
15899: LD_VAR 0 2
15903: PPUSH
15904: LD_VAR 0 8
15908: PPUSH
15909: CALL_OW 172
// exit ;
15913: POP
15914: POP
15915: POP
15916: POP
15917: GO 15927
// end ;
15919: GO 15809
15921: POP
15922: POP
// end ; end ;
15923: GO 15298
15925: POP
15926: POP
// end ; end_of_file
15927: PPOPN 9
15929: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15930: LD_INT 0
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 264
15945: PUSH
15946: LD_INT 91
15948: EQUAL
15949: IFFALSE 16021
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15951: LD_INT 68
15953: PPUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 255
15963: PPUSH
15964: CALL_OW 321
15968: PUSH
15969: LD_INT 2
15971: EQUAL
15972: IFFALSE 15984
// eff := 70 else
15974: LD_ADDR_VAR 0 4
15978: PUSH
15979: LD_INT 70
15981: ST_TO_ADDR
15982: GO 15992
// eff := 30 ;
15984: LD_ADDR_VAR 0 4
15988: PUSH
15989: LD_INT 30
15991: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 250
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 251
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 495
// end ; end ;
16021: LD_VAR 0 2
16025: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16026: LD_INT 0
16028: PPUSH
// end ;
16029: LD_VAR 0 4
16033: RET
// export function SOS_Command ( cmd ) ; begin
16034: LD_INT 0
16036: PPUSH
// end ;
16037: LD_VAR 0 2
16041: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16042: LD_INT 0
16044: PPUSH
// end ;
16045: LD_VAR 0 6
16049: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
16050: LD_INT 0
16052: PPUSH
16053: PPUSH
// if not vehicle or not factory then
16054: LD_VAR 0 1
16058: NOT
16059: PUSH
16060: LD_VAR 0 2
16064: NOT
16065: OR
16066: IFFALSE 16070
// exit ;
16068: GO 16301
// if factoryWaypoints >= factory then
16070: LD_EXP 62
16074: PUSH
16075: LD_VAR 0 2
16079: GREATEREQUAL
16080: IFFALSE 16301
// if factoryWaypoints [ factory ] then
16082: LD_EXP 62
16086: PUSH
16087: LD_VAR 0 2
16091: ARRAY
16092: IFFALSE 16301
// begin if GetControl ( vehicle ) = control_manual then
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 263
16103: PUSH
16104: LD_INT 1
16106: EQUAL
16107: IFFALSE 16188
// begin driver := IsDrivenBy ( vehicle ) ;
16109: LD_ADDR_VAR 0 4
16113: PUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 311
16123: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16124: LD_VAR 0 4
16128: PPUSH
16129: LD_EXP 62
16133: PUSH
16134: LD_VAR 0 2
16138: ARRAY
16139: PUSH
16140: LD_INT 3
16142: ARRAY
16143: PPUSH
16144: LD_EXP 62
16148: PUSH
16149: LD_VAR 0 2
16153: ARRAY
16154: PUSH
16155: LD_INT 4
16157: ARRAY
16158: PPUSH
16159: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16163: LD_VAR 0 4
16167: PPUSH
16168: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16172: LD_VAR 0 4
16176: PPUSH
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 180
// end else
16186: GO 16301
// if GetControl ( vehicle ) = control_remote then
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL_OW 263
16197: PUSH
16198: LD_INT 2
16200: EQUAL
16201: IFFALSE 16262
// begin wait ( 0 0$2 ) ;
16203: LD_INT 70
16205: PPUSH
16206: CALL_OW 67
// if Connect ( vehicle ) then
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL 28293 0 1
16219: IFFALSE 16260
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16221: LD_VAR 0 1
16225: PPUSH
16226: LD_EXP 62
16230: PUSH
16231: LD_VAR 0 2
16235: ARRAY
16236: PUSH
16237: LD_INT 3
16239: ARRAY
16240: PPUSH
16241: LD_EXP 62
16245: PUSH
16246: LD_VAR 0 2
16250: ARRAY
16251: PUSH
16252: LD_INT 4
16254: ARRAY
16255: PPUSH
16256: CALL_OW 171
// end else
16260: GO 16301
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16262: LD_VAR 0 1
16266: PPUSH
16267: LD_EXP 62
16271: PUSH
16272: LD_VAR 0 2
16276: ARRAY
16277: PUSH
16278: LD_INT 3
16280: ARRAY
16281: PPUSH
16282: LD_EXP 62
16286: PUSH
16287: LD_VAR 0 2
16291: ARRAY
16292: PUSH
16293: LD_INT 4
16295: ARRAY
16296: PPUSH
16297: CALL_OW 171
// end ; end ;
16301: LD_VAR 0 3
16305: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16306: LD_INT 0
16308: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16309: LD_VAR 0 1
16313: PUSH
16314: LD_INT 250
16316: EQUAL
16317: PUSH
16318: LD_VAR 0 2
16322: PPUSH
16323: CALL_OW 264
16327: PUSH
16328: LD_INT 81
16330: EQUAL
16331: AND
16332: IFFALSE 16353
// MinerPlaceMine ( unit , x , y ) ;
16334: LD_VAR 0 2
16338: PPUSH
16339: LD_VAR 0 4
16343: PPUSH
16344: LD_VAR 0 5
16348: PPUSH
16349: CALL 18738 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16353: LD_VAR 0 1
16357: PUSH
16358: LD_INT 251
16360: EQUAL
16361: PUSH
16362: LD_VAR 0 2
16366: PPUSH
16367: CALL_OW 264
16371: PUSH
16372: LD_INT 81
16374: EQUAL
16375: AND
16376: IFFALSE 16397
// MinerDetonateMine ( unit , x , y ) ;
16378: LD_VAR 0 2
16382: PPUSH
16383: LD_VAR 0 4
16387: PPUSH
16388: LD_VAR 0 5
16392: PPUSH
16393: CALL 19013 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16397: LD_VAR 0 1
16401: PUSH
16402: LD_INT 252
16404: EQUAL
16405: PUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: CALL_OW 264
16415: PUSH
16416: LD_INT 81
16418: EQUAL
16419: AND
16420: IFFALSE 16441
// MinerCreateMinefield ( unit , x , y ) ;
16422: LD_VAR 0 2
16426: PPUSH
16427: LD_VAR 0 4
16431: PPUSH
16432: LD_VAR 0 5
16436: PPUSH
16437: CALL 19430 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16441: LD_VAR 0 1
16445: PUSH
16446: LD_INT 253
16448: EQUAL
16449: PUSH
16450: LD_VAR 0 2
16454: PPUSH
16455: CALL_OW 257
16459: PUSH
16460: LD_INT 5
16462: EQUAL
16463: AND
16464: IFFALSE 16485
// ComBinocular ( unit , x , y ) ;
16466: LD_VAR 0 2
16470: PPUSH
16471: LD_VAR 0 4
16475: PPUSH
16476: LD_VAR 0 5
16480: PPUSH
16481: CALL 19799 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16485: LD_VAR 0 1
16489: PUSH
16490: LD_INT 254
16492: EQUAL
16493: PUSH
16494: LD_VAR 0 2
16498: PPUSH
16499: CALL_OW 264
16503: PUSH
16504: LD_INT 99
16506: EQUAL
16507: AND
16508: PUSH
16509: LD_VAR 0 3
16513: PPUSH
16514: CALL_OW 263
16518: PUSH
16519: LD_INT 3
16521: EQUAL
16522: AND
16523: IFFALSE 16539
// HackDestroyVehicle ( unit , selectedUnit ) ;
16525: LD_VAR 0 2
16529: PPUSH
16530: LD_VAR 0 3
16534: PPUSH
16535: CALL 18102 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16539: LD_VAR 0 1
16543: PUSH
16544: LD_INT 255
16546: EQUAL
16547: PUSH
16548: LD_VAR 0 2
16552: PPUSH
16553: CALL_OW 264
16557: PUSH
16558: LD_INT 14
16560: PUSH
16561: LD_INT 53
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: IN
16568: AND
16569: PUSH
16570: LD_VAR 0 4
16574: PPUSH
16575: LD_VAR 0 5
16579: PPUSH
16580: CALL_OW 488
16584: AND
16585: IFFALSE 16609
// CutTreeXYR ( unit , x , y , 12 ) ;
16587: LD_VAR 0 2
16591: PPUSH
16592: LD_VAR 0 4
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: LD_INT 12
16604: PPUSH
16605: CALL 16672 0 4
// if cmd = 256 then
16609: LD_VAR 0 1
16613: PUSH
16614: LD_INT 256
16616: EQUAL
16617: IFFALSE 16638
// SetFactoryWaypoint ( unit , x , y ) ;
16619: LD_VAR 0 2
16623: PPUSH
16624: LD_VAR 0 4
16628: PPUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL 14619 0 3
// if cmd = 257 then
16638: LD_VAR 0 1
16642: PUSH
16643: LD_INT 257
16645: EQUAL
16646: IFFALSE 16667
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16648: LD_VAR 0 2
16652: PPUSH
16653: LD_VAR 0 4
16657: PPUSH
16658: LD_VAR 0 5
16662: PPUSH
16663: CALL 14981 0 3
// end ;
16667: LD_VAR 0 6
16671: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16683: LD_VAR 0 1
16687: NOT
16688: PUSH
16689: LD_VAR 0 2
16693: PPUSH
16694: LD_VAR 0 3
16698: PPUSH
16699: CALL_OW 488
16703: NOT
16704: OR
16705: PUSH
16706: LD_VAR 0 4
16710: NOT
16711: OR
16712: IFFALSE 16716
// exit ;
16714: GO 17056
// list := [ ] ;
16716: LD_ADDR_VAR 0 13
16720: PUSH
16721: EMPTY
16722: ST_TO_ADDR
// if x - r < 0 then
16723: LD_VAR 0 2
16727: PUSH
16728: LD_VAR 0 4
16732: MINUS
16733: PUSH
16734: LD_INT 0
16736: LESS
16737: IFFALSE 16749
// min_x := 0 else
16739: LD_ADDR_VAR 0 7
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
16747: GO 16765
// min_x := x - r ;
16749: LD_ADDR_VAR 0 7
16753: PUSH
16754: LD_VAR 0 2
16758: PUSH
16759: LD_VAR 0 4
16763: MINUS
16764: ST_TO_ADDR
// if y - r < 0 then
16765: LD_VAR 0 3
16769: PUSH
16770: LD_VAR 0 4
16774: MINUS
16775: PUSH
16776: LD_INT 0
16778: LESS
16779: IFFALSE 16791
// min_y := 0 else
16781: LD_ADDR_VAR 0 8
16785: PUSH
16786: LD_INT 0
16788: ST_TO_ADDR
16789: GO 16807
// min_y := y - r ;
16791: LD_ADDR_VAR 0 8
16795: PUSH
16796: LD_VAR 0 3
16800: PUSH
16801: LD_VAR 0 4
16805: MINUS
16806: ST_TO_ADDR
// max_x := x + r ;
16807: LD_ADDR_VAR 0 9
16811: PUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_VAR 0 4
16821: PLUS
16822: ST_TO_ADDR
// max_y := y + r ;
16823: LD_ADDR_VAR 0 10
16827: PUSH
16828: LD_VAR 0 3
16832: PUSH
16833: LD_VAR 0 4
16837: PLUS
16838: ST_TO_ADDR
// for _x = min_x to max_x do
16839: LD_ADDR_VAR 0 11
16843: PUSH
16844: DOUBLE
16845: LD_VAR 0 7
16849: DEC
16850: ST_TO_ADDR
16851: LD_VAR 0 9
16855: PUSH
16856: FOR_TO
16857: IFFALSE 16974
// for _y = min_y to max_y do
16859: LD_ADDR_VAR 0 12
16863: PUSH
16864: DOUBLE
16865: LD_VAR 0 8
16869: DEC
16870: ST_TO_ADDR
16871: LD_VAR 0 10
16875: PUSH
16876: FOR_TO
16877: IFFALSE 16970
// begin if not ValidHex ( _x , _y ) then
16879: LD_VAR 0 11
16883: PPUSH
16884: LD_VAR 0 12
16888: PPUSH
16889: CALL_OW 488
16893: NOT
16894: IFFALSE 16898
// continue ;
16896: GO 16876
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16898: LD_VAR 0 11
16902: PPUSH
16903: LD_VAR 0 12
16907: PPUSH
16908: CALL_OW 351
16912: PUSH
16913: LD_VAR 0 11
16917: PPUSH
16918: LD_VAR 0 12
16922: PPUSH
16923: CALL_OW 554
16927: AND
16928: IFFALSE 16968
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16930: LD_ADDR_VAR 0 13
16934: PUSH
16935: LD_VAR 0 13
16939: PPUSH
16940: LD_VAR 0 13
16944: PUSH
16945: LD_INT 1
16947: PLUS
16948: PPUSH
16949: LD_VAR 0 11
16953: PUSH
16954: LD_VAR 0 12
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PPUSH
16963: CALL_OW 2
16967: ST_TO_ADDR
// end ;
16968: GO 16876
16970: POP
16971: POP
16972: GO 16856
16974: POP
16975: POP
// if not list then
16976: LD_VAR 0 13
16980: NOT
16981: IFFALSE 16985
// exit ;
16983: GO 17056
// for i in list do
16985: LD_ADDR_VAR 0 6
16989: PUSH
16990: LD_VAR 0 13
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17054
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16998: LD_VAR 0 1
17002: PPUSH
17003: LD_STRING M
17005: PUSH
17006: LD_VAR 0 6
17010: PUSH
17011: LD_INT 1
17013: ARRAY
17014: PUSH
17015: LD_VAR 0 6
17019: PUSH
17020: LD_INT 2
17022: ARRAY
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: LD_INT 0
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: PPUSH
17048: CALL_OW 447
17052: GO 16995
17054: POP
17055: POP
// end ;
17056: LD_VAR 0 5
17060: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17061: LD_EXP 65
17065: NOT
17066: IFFALSE 17116
17068: GO 17070
17070: DISABLE
// begin initHack := true ;
17071: LD_ADDR_EXP 65
17075: PUSH
17076: LD_INT 1
17078: ST_TO_ADDR
// hackTanks := [ ] ;
17079: LD_ADDR_EXP 66
17083: PUSH
17084: EMPTY
17085: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17086: LD_ADDR_EXP 67
17090: PUSH
17091: EMPTY
17092: ST_TO_ADDR
// hackLimit := 3 ;
17093: LD_ADDR_EXP 68
17097: PUSH
17098: LD_INT 3
17100: ST_TO_ADDR
// hackDist := 12 ;
17101: LD_ADDR_EXP 69
17105: PUSH
17106: LD_INT 12
17108: ST_TO_ADDR
// hackCounter := [ ] ;
17109: LD_ADDR_EXP 70
17113: PUSH
17114: EMPTY
17115: ST_TO_ADDR
// end ;
17116: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17117: LD_EXP 65
17121: PUSH
17122: LD_INT 34
17124: PUSH
17125: LD_INT 99
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PPUSH
17132: CALL_OW 69
17136: AND
17137: IFFALSE 17390
17139: GO 17141
17141: DISABLE
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
// begin enable ;
17146: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_INT 34
17154: PUSH
17155: LD_INT 99
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PPUSH
17162: CALL_OW 69
17166: PUSH
17167: FOR_IN
17168: IFFALSE 17388
// begin if not i in hackTanks then
17170: LD_VAR 0 1
17174: PUSH
17175: LD_EXP 66
17179: IN
17180: NOT
17181: IFFALSE 17264
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17183: LD_ADDR_EXP 66
17187: PUSH
17188: LD_EXP 66
17192: PPUSH
17193: LD_EXP 66
17197: PUSH
17198: LD_INT 1
17200: PLUS
17201: PPUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 1
17211: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17212: LD_ADDR_EXP 67
17216: PUSH
17217: LD_EXP 67
17221: PPUSH
17222: LD_EXP 67
17226: PUSH
17227: LD_INT 1
17229: PLUS
17230: PPUSH
17231: EMPTY
17232: PPUSH
17233: CALL_OW 1
17237: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17238: LD_ADDR_EXP 70
17242: PUSH
17243: LD_EXP 70
17247: PPUSH
17248: LD_EXP 70
17252: PUSH
17253: LD_INT 1
17255: PLUS
17256: PPUSH
17257: EMPTY
17258: PPUSH
17259: CALL_OW 1
17263: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 302
17273: NOT
17274: IFFALSE 17287
// begin HackUnlinkAll ( i ) ;
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL 17393 0 1
// continue ;
17285: GO 17167
// end ; HackCheckCapturedStatus ( i ) ;
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL 17836 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17296: LD_ADDR_VAR 0 2
17300: PUSH
17301: LD_INT 81
17303: PUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 255
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 33
17320: PUSH
17321: LD_INT 3
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 91
17330: PUSH
17331: LD_VAR 0 1
17335: PUSH
17336: LD_EXP 69
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 50
17348: PUSH
17349: EMPTY
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: ST_TO_ADDR
// if not tmp then
17363: LD_VAR 0 2
17367: NOT
17368: IFFALSE 17372
// continue ;
17370: GO 17167
// HackLink ( i , tmp ) ;
17372: LD_VAR 0 1
17376: PPUSH
17377: LD_VAR 0 2
17381: PPUSH
17382: CALL 17529 0 2
// end ;
17386: GO 17167
17388: POP
17389: POP
// end ;
17390: PPOPN 2
17392: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17393: LD_INT 0
17395: PPUSH
17396: PPUSH
17397: PPUSH
// if not hack in hackTanks then
17398: LD_VAR 0 1
17402: PUSH
17403: LD_EXP 66
17407: IN
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17524
// index := GetElementIndex ( hackTanks , hack ) ;
17413: LD_ADDR_VAR 0 4
17417: PUSH
17418: LD_EXP 66
17422: PPUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL 25109 0 2
17432: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17433: LD_EXP 67
17437: PUSH
17438: LD_VAR 0 4
17442: ARRAY
17443: IFFALSE 17524
// begin for i in hackTanksCaptured [ index ] do
17445: LD_ADDR_VAR 0 3
17449: PUSH
17450: LD_EXP 67
17454: PUSH
17455: LD_VAR 0 4
17459: ARRAY
17460: PUSH
17461: FOR_IN
17462: IFFALSE 17488
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17464: LD_VAR 0 3
17468: PUSH
17469: LD_INT 1
17471: ARRAY
17472: PPUSH
17473: LD_VAR 0 3
17477: PUSH
17478: LD_INT 2
17480: ARRAY
17481: PPUSH
17482: CALL_OW 235
17486: GO 17461
17488: POP
17489: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17490: LD_ADDR_EXP 67
17494: PUSH
17495: LD_EXP 67
17499: PPUSH
17500: LD_VAR 0 4
17504: PPUSH
17505: EMPTY
17506: PPUSH
17507: CALL_OW 1
17511: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17512: LD_VAR 0 1
17516: PPUSH
17517: LD_INT 0
17519: PPUSH
17520: CALL_OW 505
// end ; end ;
17524: LD_VAR 0 2
17528: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17529: LD_INT 0
17531: PPUSH
17532: PPUSH
17533: PPUSH
// if not hack in hackTanks or not vehicles then
17534: LD_VAR 0 1
17538: PUSH
17539: LD_EXP 66
17543: IN
17544: NOT
17545: PUSH
17546: LD_VAR 0 2
17550: NOT
17551: OR
17552: IFFALSE 17556
// exit ;
17554: GO 17831
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17556: LD_ADDR_VAR 0 2
17560: PUSH
17561: LD_VAR 0 1
17565: PPUSH
17566: LD_VAR 0 2
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: CALL 25759 0 4
17581: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17582: LD_ADDR_VAR 0 5
17586: PUSH
17587: LD_EXP 66
17591: PPUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: CALL 25109 0 2
17601: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17602: LD_EXP 67
17606: PUSH
17607: LD_VAR 0 5
17611: ARRAY
17612: PUSH
17613: LD_EXP 68
17617: LESS
17618: IFFALSE 17807
// begin for i := 1 to vehicles do
17620: LD_ADDR_VAR 0 4
17624: PUSH
17625: DOUBLE
17626: LD_INT 1
17628: DEC
17629: ST_TO_ADDR
17630: LD_VAR 0 2
17634: PUSH
17635: FOR_TO
17636: IFFALSE 17805
// begin if hackTanksCaptured [ index ] = hackLimit then
17638: LD_EXP 67
17642: PUSH
17643: LD_VAR 0 5
17647: ARRAY
17648: PUSH
17649: LD_EXP 68
17653: EQUAL
17654: IFFALSE 17658
// break ;
17656: GO 17805
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17658: LD_ADDR_EXP 70
17662: PUSH
17663: LD_EXP 70
17667: PPUSH
17668: LD_VAR 0 5
17672: PPUSH
17673: LD_EXP 70
17677: PUSH
17678: LD_VAR 0 5
17682: ARRAY
17683: PUSH
17684: LD_INT 1
17686: PLUS
17687: PPUSH
17688: CALL_OW 1
17692: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17693: LD_ADDR_EXP 67
17697: PUSH
17698: LD_EXP 67
17702: PPUSH
17703: LD_VAR 0 5
17707: PUSH
17708: LD_EXP 67
17712: PUSH
17713: LD_VAR 0 5
17717: ARRAY
17718: PUSH
17719: LD_INT 1
17721: PLUS
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: LD_VAR 0 2
17731: PUSH
17732: LD_VAR 0 4
17736: ARRAY
17737: PUSH
17738: LD_VAR 0 2
17742: PUSH
17743: LD_VAR 0 4
17747: ARRAY
17748: PPUSH
17749: CALL_OW 255
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL 25324 0 3
17762: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17763: LD_VAR 0 2
17767: PUSH
17768: LD_VAR 0 4
17772: ARRAY
17773: PPUSH
17774: LD_VAR 0 1
17778: PPUSH
17779: CALL_OW 255
17783: PPUSH
17784: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17788: LD_VAR 0 2
17792: PUSH
17793: LD_VAR 0 4
17797: ARRAY
17798: PPUSH
17799: CALL_OW 141
// end ;
17803: GO 17635
17805: POP
17806: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_EXP 67
17816: PUSH
17817: LD_VAR 0 5
17821: ARRAY
17822: PUSH
17823: LD_INT 0
17825: PLUS
17826: PPUSH
17827: CALL_OW 505
// end ;
17831: LD_VAR 0 3
17835: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
// if not hack in hackTanks then
17842: LD_VAR 0 1
17846: PUSH
17847: LD_EXP 66
17851: IN
17852: NOT
17853: IFFALSE 17857
// exit ;
17855: GO 18097
// index := GetElementIndex ( hackTanks , hack ) ;
17857: LD_ADDR_VAR 0 4
17861: PUSH
17862: LD_EXP 66
17866: PPUSH
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL 25109 0 2
17876: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17877: LD_ADDR_VAR 0 3
17881: PUSH
17882: DOUBLE
17883: LD_EXP 67
17887: PUSH
17888: LD_VAR 0 4
17892: ARRAY
17893: INC
17894: ST_TO_ADDR
17895: LD_INT 1
17897: PUSH
17898: FOR_DOWNTO
17899: IFFALSE 18071
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17901: LD_ADDR_VAR 0 5
17905: PUSH
17906: LD_EXP 67
17910: PUSH
17911: LD_VAR 0 4
17915: ARRAY
17916: PUSH
17917: LD_VAR 0 3
17921: ARRAY
17922: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17923: LD_VAR 0 5
17927: PUSH
17928: LD_INT 1
17930: ARRAY
17931: PPUSH
17932: CALL_OW 302
17936: NOT
17937: PUSH
17938: LD_VAR 0 5
17942: PUSH
17943: LD_INT 1
17945: ARRAY
17946: PPUSH
17947: CALL_OW 255
17951: PUSH
17952: LD_VAR 0 1
17956: PPUSH
17957: CALL_OW 255
17961: NONEQUAL
17962: OR
17963: IFFALSE 18069
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17965: LD_VAR 0 5
17969: PUSH
17970: LD_INT 1
17972: ARRAY
17973: PPUSH
17974: CALL_OW 305
17978: PUSH
17979: LD_VAR 0 5
17983: PUSH
17984: LD_INT 1
17986: ARRAY
17987: PPUSH
17988: CALL_OW 255
17992: PUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 255
18002: EQUAL
18003: AND
18004: IFFALSE 18028
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18006: LD_VAR 0 5
18010: PUSH
18011: LD_INT 1
18013: ARRAY
18014: PPUSH
18015: LD_VAR 0 5
18019: PUSH
18020: LD_INT 2
18022: ARRAY
18023: PPUSH
18024: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18028: LD_ADDR_EXP 67
18032: PUSH
18033: LD_EXP 67
18037: PPUSH
18038: LD_VAR 0 4
18042: PPUSH
18043: LD_EXP 67
18047: PUSH
18048: LD_VAR 0 4
18052: ARRAY
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: CALL_OW 3
18063: PPUSH
18064: CALL_OW 1
18068: ST_TO_ADDR
// end ; end ;
18069: GO 17898
18071: POP
18072: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18073: LD_VAR 0 1
18077: PPUSH
18078: LD_EXP 67
18082: PUSH
18083: LD_VAR 0 4
18087: ARRAY
18088: PUSH
18089: LD_INT 0
18091: PLUS
18092: PPUSH
18093: CALL_OW 505
// end ;
18097: LD_VAR 0 2
18101: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18102: LD_INT 0
18104: PPUSH
18105: PPUSH
18106: PPUSH
18107: PPUSH
// if not hack in hackTanks then
18108: LD_VAR 0 1
18112: PUSH
18113: LD_EXP 66
18117: IN
18118: NOT
18119: IFFALSE 18123
// exit ;
18121: GO 18208
// index := GetElementIndex ( hackTanks , hack ) ;
18123: LD_ADDR_VAR 0 5
18127: PUSH
18128: LD_EXP 66
18132: PPUSH
18133: LD_VAR 0 1
18137: PPUSH
18138: CALL 25109 0 2
18142: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18143: LD_ADDR_VAR 0 4
18147: PUSH
18148: DOUBLE
18149: LD_INT 1
18151: DEC
18152: ST_TO_ADDR
18153: LD_EXP 67
18157: PUSH
18158: LD_VAR 0 5
18162: ARRAY
18163: PUSH
18164: FOR_TO
18165: IFFALSE 18206
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18167: LD_EXP 67
18171: PUSH
18172: LD_VAR 0 5
18176: ARRAY
18177: PUSH
18178: LD_VAR 0 4
18182: ARRAY
18183: PUSH
18184: LD_INT 1
18186: ARRAY
18187: PUSH
18188: LD_VAR 0 2
18192: EQUAL
18193: IFFALSE 18204
// KillUnit ( vehicle ) ;
18195: LD_VAR 0 2
18199: PPUSH
18200: CALL_OW 66
18204: GO 18164
18206: POP
18207: POP
// end ;
18208: LD_VAR 0 3
18212: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18213: LD_EXP 71
18217: NOT
18218: IFFALSE 18253
18220: GO 18222
18222: DISABLE
// begin initMiner := true ;
18223: LD_ADDR_EXP 71
18227: PUSH
18228: LD_INT 1
18230: ST_TO_ADDR
// minersList := [ ] ;
18231: LD_ADDR_EXP 72
18235: PUSH
18236: EMPTY
18237: ST_TO_ADDR
// minerMinesList := [ ] ;
18238: LD_ADDR_EXP 73
18242: PUSH
18243: EMPTY
18244: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18245: LD_ADDR_EXP 74
18249: PUSH
18250: LD_INT 5
18252: ST_TO_ADDR
// end ;
18253: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18254: LD_EXP 71
18258: PUSH
18259: LD_INT 34
18261: PUSH
18262: LD_INT 81
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: AND
18274: IFFALSE 18735
18276: GO 18278
18278: DISABLE
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
// begin enable ;
18285: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18286: LD_ADDR_VAR 0 1
18290: PUSH
18291: LD_INT 34
18293: PUSH
18294: LD_INT 81
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 69
18305: PUSH
18306: FOR_IN
18307: IFFALSE 18379
// begin if not i in minersList then
18309: LD_VAR 0 1
18313: PUSH
18314: LD_EXP 72
18318: IN
18319: NOT
18320: IFFALSE 18377
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18322: LD_ADDR_EXP 72
18326: PUSH
18327: LD_EXP 72
18331: PPUSH
18332: LD_EXP 72
18336: PUSH
18337: LD_INT 1
18339: PLUS
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 1
18350: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18351: LD_ADDR_EXP 73
18355: PUSH
18356: LD_EXP 73
18360: PPUSH
18361: LD_EXP 73
18365: PUSH
18366: LD_INT 1
18368: PLUS
18369: PPUSH
18370: EMPTY
18371: PPUSH
18372: CALL_OW 1
18376: ST_TO_ADDR
// end end ;
18377: GO 18306
18379: POP
18380: POP
// for i := minerMinesList downto 1 do
18381: LD_ADDR_VAR 0 1
18385: PUSH
18386: DOUBLE
18387: LD_EXP 73
18391: INC
18392: ST_TO_ADDR
18393: LD_INT 1
18395: PUSH
18396: FOR_DOWNTO
18397: IFFALSE 18733
// begin if IsLive ( minersList [ i ] ) then
18399: LD_EXP 72
18403: PUSH
18404: LD_VAR 0 1
18408: ARRAY
18409: PPUSH
18410: CALL_OW 300
18414: IFFALSE 18442
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18416: LD_EXP 72
18420: PUSH
18421: LD_VAR 0 1
18425: ARRAY
18426: PPUSH
18427: LD_EXP 73
18431: PUSH
18432: LD_VAR 0 1
18436: ARRAY
18437: PPUSH
18438: CALL_OW 505
// if not minerMinesList [ i ] then
18442: LD_EXP 73
18446: PUSH
18447: LD_VAR 0 1
18451: ARRAY
18452: NOT
18453: IFFALSE 18457
// continue ;
18455: GO 18396
// for j := minerMinesList [ i ] downto 1 do
18457: LD_ADDR_VAR 0 2
18461: PUSH
18462: DOUBLE
18463: LD_EXP 73
18467: PUSH
18468: LD_VAR 0 1
18472: ARRAY
18473: INC
18474: ST_TO_ADDR
18475: LD_INT 1
18477: PUSH
18478: FOR_DOWNTO
18479: IFFALSE 18729
// begin side := GetSide ( minersList [ i ] ) ;
18481: LD_ADDR_VAR 0 3
18485: PUSH
18486: LD_EXP 72
18490: PUSH
18491: LD_VAR 0 1
18495: ARRAY
18496: PPUSH
18497: CALL_OW 255
18501: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18502: LD_ADDR_VAR 0 4
18506: PUSH
18507: LD_EXP 73
18511: PUSH
18512: LD_VAR 0 1
18516: ARRAY
18517: PUSH
18518: LD_VAR 0 2
18522: ARRAY
18523: PUSH
18524: LD_INT 1
18526: ARRAY
18527: PPUSH
18528: LD_EXP 73
18532: PUSH
18533: LD_VAR 0 1
18537: ARRAY
18538: PUSH
18539: LD_VAR 0 2
18543: ARRAY
18544: PUSH
18545: LD_INT 2
18547: ARRAY
18548: PPUSH
18549: CALL_OW 428
18553: ST_TO_ADDR
// if not tmp then
18554: LD_VAR 0 4
18558: NOT
18559: IFFALSE 18563
// continue ;
18561: GO 18478
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18563: LD_VAR 0 4
18567: PUSH
18568: LD_INT 81
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PPUSH
18580: CALL_OW 69
18584: IN
18585: PUSH
18586: LD_EXP 73
18590: PUSH
18591: LD_VAR 0 1
18595: ARRAY
18596: PUSH
18597: LD_VAR 0 2
18601: ARRAY
18602: PUSH
18603: LD_INT 1
18605: ARRAY
18606: PPUSH
18607: LD_EXP 73
18611: PUSH
18612: LD_VAR 0 1
18616: ARRAY
18617: PUSH
18618: LD_VAR 0 2
18622: ARRAY
18623: PUSH
18624: LD_INT 2
18626: ARRAY
18627: PPUSH
18628: CALL_OW 458
18632: AND
18633: IFFALSE 18727
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18635: LD_EXP 73
18639: PUSH
18640: LD_VAR 0 1
18644: ARRAY
18645: PUSH
18646: LD_VAR 0 2
18650: ARRAY
18651: PUSH
18652: LD_INT 1
18654: ARRAY
18655: PPUSH
18656: LD_EXP 73
18660: PUSH
18661: LD_VAR 0 1
18665: ARRAY
18666: PUSH
18667: LD_VAR 0 2
18671: ARRAY
18672: PUSH
18673: LD_INT 2
18675: ARRAY
18676: PPUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18686: LD_ADDR_EXP 73
18690: PUSH
18691: LD_EXP 73
18695: PPUSH
18696: LD_VAR 0 1
18700: PPUSH
18701: LD_EXP 73
18705: PUSH
18706: LD_VAR 0 1
18710: ARRAY
18711: PPUSH
18712: LD_VAR 0 2
18716: PPUSH
18717: CALL_OW 3
18721: PPUSH
18722: CALL_OW 1
18726: ST_TO_ADDR
// end ; end ;
18727: GO 18478
18729: POP
18730: POP
// end ;
18731: GO 18396
18733: POP
18734: POP
// end ;
18735: PPOPN 4
18737: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
// result := false ;
18742: LD_ADDR_VAR 0 4
18746: PUSH
18747: LD_INT 0
18749: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18750: LD_VAR 0 1
18754: PPUSH
18755: CALL_OW 264
18759: PUSH
18760: LD_INT 81
18762: EQUAL
18763: NOT
18764: IFFALSE 18768
// exit ;
18766: GO 19008
// index := GetElementIndex ( minersList , unit ) ;
18768: LD_ADDR_VAR 0 5
18772: PUSH
18773: LD_EXP 72
18777: PPUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL 25109 0 2
18787: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18788: LD_EXP 73
18792: PUSH
18793: LD_VAR 0 5
18797: ARRAY
18798: PUSH
18799: LD_EXP 74
18803: GREATEREQUAL
18804: IFFALSE 18808
// exit ;
18806: GO 19008
// ComMoveXY ( unit , x , y ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18827: LD_INT 35
18829: PPUSH
18830: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18834: LD_VAR 0 1
18838: PPUSH
18839: LD_VAR 0 2
18843: PPUSH
18844: LD_VAR 0 3
18848: PPUSH
18849: CALL 56464 0 3
18853: NOT
18854: PUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 314
18864: AND
18865: IFFALSE 18869
// exit ;
18867: GO 19008
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18869: LD_VAR 0 2
18873: PPUSH
18874: LD_VAR 0 3
18878: PPUSH
18879: CALL_OW 428
18883: PUSH
18884: LD_VAR 0 1
18888: EQUAL
18889: PUSH
18890: LD_VAR 0 1
18894: PPUSH
18895: CALL_OW 314
18899: NOT
18900: AND
18901: IFFALSE 18827
// PlaySoundXY ( x , y , PlantMine ) ;
18903: LD_VAR 0 2
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: LD_STRING PlantMine
18915: PPUSH
18916: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_VAR 0 3
18929: PPUSH
18930: LD_VAR 0 1
18934: PPUSH
18935: CALL_OW 255
18939: PPUSH
18940: LD_INT 0
18942: PPUSH
18943: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18947: LD_ADDR_EXP 73
18951: PUSH
18952: LD_EXP 73
18956: PPUSH
18957: LD_VAR 0 5
18961: PUSH
18962: LD_EXP 73
18966: PUSH
18967: LD_VAR 0 5
18971: ARRAY
18972: PUSH
18973: LD_INT 1
18975: PLUS
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: LD_VAR 0 2
18985: PUSH
18986: LD_VAR 0 3
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PPUSH
18995: CALL 25324 0 3
18999: ST_TO_ADDR
// result := true ;
19000: LD_ADDR_VAR 0 4
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// end ;
19008: LD_VAR 0 4
19012: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19013: LD_INT 0
19015: PPUSH
19016: PPUSH
19017: PPUSH
// if not unit in minersList then
19018: LD_VAR 0 1
19022: PUSH
19023: LD_EXP 72
19027: IN
19028: NOT
19029: IFFALSE 19033
// exit ;
19031: GO 19425
// index := GetElementIndex ( minersList , unit ) ;
19033: LD_ADDR_VAR 0 6
19037: PUSH
19038: LD_EXP 72
19042: PPUSH
19043: LD_VAR 0 1
19047: PPUSH
19048: CALL 25109 0 2
19052: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19053: LD_ADDR_VAR 0 5
19057: PUSH
19058: DOUBLE
19059: LD_EXP 73
19063: PUSH
19064: LD_VAR 0 6
19068: ARRAY
19069: INC
19070: ST_TO_ADDR
19071: LD_INT 1
19073: PUSH
19074: FOR_DOWNTO
19075: IFFALSE 19236
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19077: LD_EXP 73
19081: PUSH
19082: LD_VAR 0 6
19086: ARRAY
19087: PUSH
19088: LD_VAR 0 5
19092: ARRAY
19093: PUSH
19094: LD_INT 1
19096: ARRAY
19097: PUSH
19098: LD_VAR 0 2
19102: EQUAL
19103: PUSH
19104: LD_EXP 73
19108: PUSH
19109: LD_VAR 0 6
19113: ARRAY
19114: PUSH
19115: LD_VAR 0 5
19119: ARRAY
19120: PUSH
19121: LD_INT 2
19123: ARRAY
19124: PUSH
19125: LD_VAR 0 3
19129: EQUAL
19130: AND
19131: IFFALSE 19234
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19133: LD_EXP 73
19137: PUSH
19138: LD_VAR 0 6
19142: ARRAY
19143: PUSH
19144: LD_VAR 0 5
19148: ARRAY
19149: PUSH
19150: LD_INT 1
19152: ARRAY
19153: PPUSH
19154: LD_EXP 73
19158: PUSH
19159: LD_VAR 0 6
19163: ARRAY
19164: PUSH
19165: LD_VAR 0 5
19169: ARRAY
19170: PUSH
19171: LD_INT 2
19173: ARRAY
19174: PPUSH
19175: LD_VAR 0 1
19179: PPUSH
19180: CALL_OW 255
19184: PPUSH
19185: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19189: LD_ADDR_EXP 73
19193: PUSH
19194: LD_EXP 73
19198: PPUSH
19199: LD_VAR 0 6
19203: PPUSH
19204: LD_EXP 73
19208: PUSH
19209: LD_VAR 0 6
19213: ARRAY
19214: PPUSH
19215: LD_VAR 0 5
19219: PPUSH
19220: CALL_OW 3
19224: PPUSH
19225: CALL_OW 1
19229: ST_TO_ADDR
// exit ;
19230: POP
19231: POP
19232: GO 19425
// end ; end ;
19234: GO 19074
19236: POP
19237: POP
// for i := minerMinesList [ index ] downto 1 do
19238: LD_ADDR_VAR 0 5
19242: PUSH
19243: DOUBLE
19244: LD_EXP 73
19248: PUSH
19249: LD_VAR 0 6
19253: ARRAY
19254: INC
19255: ST_TO_ADDR
19256: LD_INT 1
19258: PUSH
19259: FOR_DOWNTO
19260: IFFALSE 19423
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19262: LD_EXP 73
19266: PUSH
19267: LD_VAR 0 6
19271: ARRAY
19272: PUSH
19273: LD_VAR 0 5
19277: ARRAY
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: LD_EXP 73
19287: PUSH
19288: LD_VAR 0 6
19292: ARRAY
19293: PUSH
19294: LD_VAR 0 5
19298: ARRAY
19299: PUSH
19300: LD_INT 2
19302: ARRAY
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: CALL_OW 298
19318: PUSH
19319: LD_INT 6
19321: LESS
19322: IFFALSE 19421
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19324: LD_EXP 73
19328: PUSH
19329: LD_VAR 0 6
19333: ARRAY
19334: PUSH
19335: LD_VAR 0 5
19339: ARRAY
19340: PUSH
19341: LD_INT 1
19343: ARRAY
19344: PPUSH
19345: LD_EXP 73
19349: PUSH
19350: LD_VAR 0 6
19354: ARRAY
19355: PUSH
19356: LD_VAR 0 5
19360: ARRAY
19361: PUSH
19362: LD_INT 2
19364: ARRAY
19365: PPUSH
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL_OW 255
19375: PPUSH
19376: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19380: LD_ADDR_EXP 73
19384: PUSH
19385: LD_EXP 73
19389: PPUSH
19390: LD_VAR 0 6
19394: PPUSH
19395: LD_EXP 73
19399: PUSH
19400: LD_VAR 0 6
19404: ARRAY
19405: PPUSH
19406: LD_VAR 0 5
19410: PPUSH
19411: CALL_OW 3
19415: PPUSH
19416: CALL_OW 1
19420: ST_TO_ADDR
// end ; end ;
19421: GO 19259
19423: POP
19424: POP
// end ;
19425: LD_VAR 0 4
19429: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19430: LD_INT 0
19432: PPUSH
19433: PPUSH
19434: PPUSH
19435: PPUSH
19436: PPUSH
19437: PPUSH
19438: PPUSH
19439: PPUSH
19440: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19441: LD_VAR 0 1
19445: PPUSH
19446: CALL_OW 264
19450: PUSH
19451: LD_INT 81
19453: EQUAL
19454: NOT
19455: PUSH
19456: LD_VAR 0 1
19460: PUSH
19461: LD_EXP 72
19465: IN
19466: NOT
19467: OR
19468: IFFALSE 19472
// exit ;
19470: GO 19794
// index := GetElementIndex ( minersList , unit ) ;
19472: LD_ADDR_VAR 0 6
19476: PUSH
19477: LD_EXP 72
19481: PPUSH
19482: LD_VAR 0 1
19486: PPUSH
19487: CALL 25109 0 2
19491: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19492: LD_ADDR_VAR 0 8
19496: PUSH
19497: LD_EXP 74
19501: PUSH
19502: LD_EXP 73
19506: PUSH
19507: LD_VAR 0 6
19511: ARRAY
19512: MINUS
19513: ST_TO_ADDR
// if not minesFreeAmount then
19514: LD_VAR 0 8
19518: NOT
19519: IFFALSE 19523
// exit ;
19521: GO 19794
// tmp := [ ] ;
19523: LD_ADDR_VAR 0 7
19527: PUSH
19528: EMPTY
19529: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19530: LD_ADDR_VAR 0 5
19534: PUSH
19535: DOUBLE
19536: LD_INT 1
19538: DEC
19539: ST_TO_ADDR
19540: LD_VAR 0 8
19544: PUSH
19545: FOR_TO
19546: IFFALSE 19741
// begin _d := rand ( 0 , 5 ) ;
19548: LD_ADDR_VAR 0 11
19552: PUSH
19553: LD_INT 0
19555: PPUSH
19556: LD_INT 5
19558: PPUSH
19559: CALL_OW 12
19563: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19564: LD_ADDR_VAR 0 12
19568: PUSH
19569: LD_INT 2
19571: PPUSH
19572: LD_INT 6
19574: PPUSH
19575: CALL_OW 12
19579: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19580: LD_ADDR_VAR 0 9
19584: PUSH
19585: LD_VAR 0 2
19589: PPUSH
19590: LD_VAR 0 11
19594: PPUSH
19595: LD_VAR 0 12
19599: PPUSH
19600: CALL_OW 272
19604: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19605: LD_ADDR_VAR 0 10
19609: PUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_VAR 0 11
19619: PPUSH
19620: LD_VAR 0 12
19624: PPUSH
19625: CALL_OW 273
19629: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19630: LD_VAR 0 9
19634: PPUSH
19635: LD_VAR 0 10
19639: PPUSH
19640: CALL_OW 488
19644: PUSH
19645: LD_VAR 0 9
19649: PUSH
19650: LD_VAR 0 10
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_VAR 0 7
19663: IN
19664: NOT
19665: AND
19666: PUSH
19667: LD_VAR 0 9
19671: PPUSH
19672: LD_VAR 0 10
19676: PPUSH
19677: CALL_OW 458
19681: NOT
19682: AND
19683: IFFALSE 19725
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19685: LD_ADDR_VAR 0 7
19689: PUSH
19690: LD_VAR 0 7
19694: PPUSH
19695: LD_VAR 0 7
19699: PUSH
19700: LD_INT 1
19702: PLUS
19703: PPUSH
19704: LD_VAR 0 9
19708: PUSH
19709: LD_VAR 0 10
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 1
19722: ST_TO_ADDR
19723: GO 19739
// i := i - 1 ;
19725: LD_ADDR_VAR 0 5
19729: PUSH
19730: LD_VAR 0 5
19734: PUSH
19735: LD_INT 1
19737: MINUS
19738: ST_TO_ADDR
// end ;
19739: GO 19545
19741: POP
19742: POP
// for i in tmp do
19743: LD_ADDR_VAR 0 5
19747: PUSH
19748: LD_VAR 0 7
19752: PUSH
19753: FOR_IN
19754: IFFALSE 19792
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19756: LD_VAR 0 1
19760: PPUSH
19761: LD_VAR 0 5
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: LD_VAR 0 5
19774: PUSH
19775: LD_INT 2
19777: ARRAY
19778: PPUSH
19779: CALL 18738 0 3
19783: NOT
19784: IFFALSE 19790
// exit ;
19786: POP
19787: POP
19788: GO 19794
19790: GO 19753
19792: POP
19793: POP
// end ;
19794: LD_VAR 0 4
19798: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19799: LD_INT 0
19801: PPUSH
19802: PPUSH
19803: PPUSH
19804: PPUSH
19805: PPUSH
19806: PPUSH
19807: PPUSH
// if not GetClass ( unit ) = class_sniper then
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 257
19817: PUSH
19818: LD_INT 5
19820: EQUAL
19821: NOT
19822: IFFALSE 19826
// exit ;
19824: GO 20214
// dist := 8 ;
19826: LD_ADDR_VAR 0 5
19830: PUSH
19831: LD_INT 8
19833: ST_TO_ADDR
// viewRange := 12 ;
19834: LD_ADDR_VAR 0 7
19838: PUSH
19839: LD_INT 12
19841: ST_TO_ADDR
// side := GetSide ( unit ) ;
19842: LD_ADDR_VAR 0 6
19846: PUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 255
19856: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19857: LD_INT 61
19859: PPUSH
19860: LD_VAR 0 6
19864: PPUSH
19865: CALL_OW 321
19869: PUSH
19870: LD_INT 2
19872: EQUAL
19873: IFFALSE 19883
// viewRange := 16 ;
19875: LD_ADDR_VAR 0 7
19879: PUSH
19880: LD_INT 16
19882: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19883: LD_VAR 0 1
19887: PPUSH
19888: LD_VAR 0 2
19892: PPUSH
19893: LD_VAR 0 3
19897: PPUSH
19898: CALL_OW 297
19902: PUSH
19903: LD_VAR 0 5
19907: GREATER
19908: IFFALSE 19987
// begin ComMoveXY ( unit , x , y ) ;
19910: LD_VAR 0 1
19914: PPUSH
19915: LD_VAR 0 2
19919: PPUSH
19920: LD_VAR 0 3
19924: PPUSH
19925: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19929: LD_INT 35
19931: PPUSH
19932: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_VAR 0 2
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: CALL 56464 0 3
19955: NOT
19956: IFFALSE 19960
// exit ;
19958: GO 20214
// until GetDistUnitXY ( unit , x , y ) < dist ;
19960: LD_VAR 0 1
19964: PPUSH
19965: LD_VAR 0 2
19969: PPUSH
19970: LD_VAR 0 3
19974: PPUSH
19975: CALL_OW 297
19979: PUSH
19980: LD_VAR 0 5
19984: LESS
19985: IFFALSE 19929
// end ; ComTurnXY ( unit , x , y ) ;
19987: LD_VAR 0 1
19991: PPUSH
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 3
20001: PPUSH
20002: CALL_OW 118
// wait ( 5 ) ;
20006: LD_INT 5
20008: PPUSH
20009: CALL_OW 67
// _d := GetDir ( unit ) ;
20013: LD_ADDR_VAR 0 10
20017: PUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 254
20027: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20028: LD_ADDR_VAR 0 8
20032: PUSH
20033: LD_VAR 0 1
20037: PPUSH
20038: CALL_OW 250
20042: PPUSH
20043: LD_VAR 0 10
20047: PPUSH
20048: LD_VAR 0 5
20052: PPUSH
20053: CALL_OW 272
20057: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20058: LD_ADDR_VAR 0 9
20062: PUSH
20063: LD_VAR 0 1
20067: PPUSH
20068: CALL_OW 251
20072: PPUSH
20073: LD_VAR 0 10
20077: PPUSH
20078: LD_VAR 0 5
20082: PPUSH
20083: CALL_OW 273
20087: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20088: LD_VAR 0 8
20092: PPUSH
20093: LD_VAR 0 9
20097: PPUSH
20098: CALL_OW 488
20102: NOT
20103: IFFALSE 20107
// exit ;
20105: GO 20214
// ComAnimCustom ( unit , 1 ) ;
20107: LD_VAR 0 1
20111: PPUSH
20112: LD_INT 1
20114: PPUSH
20115: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20119: LD_VAR 0 8
20123: PPUSH
20124: LD_VAR 0 9
20128: PPUSH
20129: LD_VAR 0 6
20133: PPUSH
20134: LD_VAR 0 7
20138: PPUSH
20139: CALL_OW 330
// repeat wait ( 1 ) ;
20143: LD_INT 1
20145: PPUSH
20146: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20150: LD_VAR 0 1
20154: PPUSH
20155: CALL_OW 316
20159: PUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 314
20169: OR
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 302
20180: NOT
20181: OR
20182: PUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 301
20192: OR
20193: IFFALSE 20143
// RemoveSeeing ( _x , _y , side ) ;
20195: LD_VAR 0 8
20199: PPUSH
20200: LD_VAR 0 9
20204: PPUSH
20205: LD_VAR 0 6
20209: PPUSH
20210: CALL_OW 331
// end ; end_of_file
20214: LD_VAR 0 4
20218: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20219: LD_INT 0
20221: PPUSH
20222: PPUSH
// if exist_mode then
20223: LD_VAR 0 2
20227: IFFALSE 20252
// unit := CreateCharacter ( prefix & ident ) else
20229: LD_ADDR_VAR 0 5
20233: PUSH
20234: LD_VAR 0 3
20238: PUSH
20239: LD_VAR 0 1
20243: STR
20244: PPUSH
20245: CALL_OW 34
20249: ST_TO_ADDR
20250: GO 20267
// unit := NewCharacter ( ident ) ;
20252: LD_ADDR_VAR 0 5
20256: PUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 25
20266: ST_TO_ADDR
// result := unit ;
20267: LD_ADDR_VAR 0 4
20271: PUSH
20272: LD_VAR 0 5
20276: ST_TO_ADDR
// end ;
20277: LD_VAR 0 4
20281: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20282: LD_INT 0
20284: PPUSH
20285: PPUSH
// if not side or not nation then
20286: LD_VAR 0 1
20290: NOT
20291: PUSH
20292: LD_VAR 0 2
20296: NOT
20297: OR
20298: IFFALSE 20302
// exit ;
20300: GO 21070
// case nation of nation_american :
20302: LD_VAR 0 2
20306: PUSH
20307: LD_INT 1
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20529
20315: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20316: LD_ADDR_VAR 0 4
20320: PUSH
20321: LD_INT 35
20323: PUSH
20324: LD_INT 45
20326: PUSH
20327: LD_INT 46
20329: PUSH
20330: LD_INT 47
20332: PUSH
20333: LD_INT 82
20335: PUSH
20336: LD_INT 83
20338: PUSH
20339: LD_INT 84
20341: PUSH
20342: LD_INT 85
20344: PUSH
20345: LD_INT 86
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: LD_INT 6
20356: PUSH
20357: LD_INT 15
20359: PUSH
20360: LD_INT 16
20362: PUSH
20363: LD_INT 7
20365: PUSH
20366: LD_INT 12
20368: PUSH
20369: LD_INT 13
20371: PUSH
20372: LD_INT 10
20374: PUSH
20375: LD_INT 14
20377: PUSH
20378: LD_INT 20
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 22
20386: PUSH
20387: LD_INT 25
20389: PUSH
20390: LD_INT 32
20392: PUSH
20393: LD_INT 27
20395: PUSH
20396: LD_INT 36
20398: PUSH
20399: LD_INT 69
20401: PUSH
20402: LD_INT 39
20404: PUSH
20405: LD_INT 34
20407: PUSH
20408: LD_INT 40
20410: PUSH
20411: LD_INT 48
20413: PUSH
20414: LD_INT 49
20416: PUSH
20417: LD_INT 50
20419: PUSH
20420: LD_INT 51
20422: PUSH
20423: LD_INT 52
20425: PUSH
20426: LD_INT 53
20428: PUSH
20429: LD_INT 54
20431: PUSH
20432: LD_INT 55
20434: PUSH
20435: LD_INT 56
20437: PUSH
20438: LD_INT 57
20440: PUSH
20441: LD_INT 58
20443: PUSH
20444: LD_INT 59
20446: PUSH
20447: LD_INT 60
20449: PUSH
20450: LD_INT 61
20452: PUSH
20453: LD_INT 62
20455: PUSH
20456: LD_INT 80
20458: PUSH
20459: LD_INT 82
20461: PUSH
20462: LD_INT 83
20464: PUSH
20465: LD_INT 84
20467: PUSH
20468: LD_INT 85
20470: PUSH
20471: LD_INT 86
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: ST_TO_ADDR
20527: GO 20994
20529: LD_INT 2
20531: DOUBLE
20532: EQUAL
20533: IFTRUE 20537
20535: GO 20763
20537: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20538: LD_ADDR_VAR 0 4
20542: PUSH
20543: LD_INT 35
20545: PUSH
20546: LD_INT 45
20548: PUSH
20549: LD_INT 46
20551: PUSH
20552: LD_INT 47
20554: PUSH
20555: LD_INT 82
20557: PUSH
20558: LD_INT 83
20560: PUSH
20561: LD_INT 84
20563: PUSH
20564: LD_INT 85
20566: PUSH
20567: LD_INT 87
20569: PUSH
20570: LD_INT 70
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: LD_INT 11
20578: PUSH
20579: LD_INT 3
20581: PUSH
20582: LD_INT 4
20584: PUSH
20585: LD_INT 5
20587: PUSH
20588: LD_INT 6
20590: PUSH
20591: LD_INT 15
20593: PUSH
20594: LD_INT 18
20596: PUSH
20597: LD_INT 7
20599: PUSH
20600: LD_INT 17
20602: PUSH
20603: LD_INT 8
20605: PUSH
20606: LD_INT 20
20608: PUSH
20609: LD_INT 21
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 72
20617: PUSH
20618: LD_INT 26
20620: PUSH
20621: LD_INT 69
20623: PUSH
20624: LD_INT 39
20626: PUSH
20627: LD_INT 40
20629: PUSH
20630: LD_INT 41
20632: PUSH
20633: LD_INT 42
20635: PUSH
20636: LD_INT 43
20638: PUSH
20639: LD_INT 48
20641: PUSH
20642: LD_INT 49
20644: PUSH
20645: LD_INT 50
20647: PUSH
20648: LD_INT 51
20650: PUSH
20651: LD_INT 52
20653: PUSH
20654: LD_INT 53
20656: PUSH
20657: LD_INT 54
20659: PUSH
20660: LD_INT 55
20662: PUSH
20663: LD_INT 56
20665: PUSH
20666: LD_INT 60
20668: PUSH
20669: LD_INT 61
20671: PUSH
20672: LD_INT 62
20674: PUSH
20675: LD_INT 66
20677: PUSH
20678: LD_INT 67
20680: PUSH
20681: LD_INT 68
20683: PUSH
20684: LD_INT 81
20686: PUSH
20687: LD_INT 82
20689: PUSH
20690: LD_INT 83
20692: PUSH
20693: LD_INT 84
20695: PUSH
20696: LD_INT 85
20698: PUSH
20699: LD_INT 87
20701: PUSH
20702: LD_INT 88
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: ST_TO_ADDR
20761: GO 20994
20763: LD_INT 3
20765: DOUBLE
20766: EQUAL
20767: IFTRUE 20771
20769: GO 20993
20771: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20772: LD_ADDR_VAR 0 4
20776: PUSH
20777: LD_INT 46
20779: PUSH
20780: LD_INT 47
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 82
20791: PUSH
20792: LD_INT 83
20794: PUSH
20795: LD_INT 84
20797: PUSH
20798: LD_INT 85
20800: PUSH
20801: LD_INT 86
20803: PUSH
20804: LD_INT 11
20806: PUSH
20807: LD_INT 9
20809: PUSH
20810: LD_INT 20
20812: PUSH
20813: LD_INT 19
20815: PUSH
20816: LD_INT 21
20818: PUSH
20819: LD_INT 24
20821: PUSH
20822: LD_INT 22
20824: PUSH
20825: LD_INT 25
20827: PUSH
20828: LD_INT 28
20830: PUSH
20831: LD_INT 29
20833: PUSH
20834: LD_INT 30
20836: PUSH
20837: LD_INT 31
20839: PUSH
20840: LD_INT 37
20842: PUSH
20843: LD_INT 38
20845: PUSH
20846: LD_INT 32
20848: PUSH
20849: LD_INT 27
20851: PUSH
20852: LD_INT 33
20854: PUSH
20855: LD_INT 69
20857: PUSH
20858: LD_INT 39
20860: PUSH
20861: LD_INT 34
20863: PUSH
20864: LD_INT 40
20866: PUSH
20867: LD_INT 71
20869: PUSH
20870: LD_INT 23
20872: PUSH
20873: LD_INT 44
20875: PUSH
20876: LD_INT 48
20878: PUSH
20879: LD_INT 49
20881: PUSH
20882: LD_INT 50
20884: PUSH
20885: LD_INT 51
20887: PUSH
20888: LD_INT 52
20890: PUSH
20891: LD_INT 53
20893: PUSH
20894: LD_INT 54
20896: PUSH
20897: LD_INT 55
20899: PUSH
20900: LD_INT 56
20902: PUSH
20903: LD_INT 57
20905: PUSH
20906: LD_INT 58
20908: PUSH
20909: LD_INT 59
20911: PUSH
20912: LD_INT 63
20914: PUSH
20915: LD_INT 64
20917: PUSH
20918: LD_INT 65
20920: PUSH
20921: LD_INT 82
20923: PUSH
20924: LD_INT 83
20926: PUSH
20927: LD_INT 84
20929: PUSH
20930: LD_INT 85
20932: PUSH
20933: LD_INT 86
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: ST_TO_ADDR
20991: GO 20994
20993: POP
// if state > - 1 and state < 3 then
20994: LD_VAR 0 3
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: GREATER
21003: PUSH
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 3
21011: LESS
21012: AND
21013: IFFALSE 21070
// for i in result do
21015: LD_ADDR_VAR 0 5
21019: PUSH
21020: LD_VAR 0 4
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21068
// if GetTech ( i , side ) <> state then
21028: LD_VAR 0 5
21032: PPUSH
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL_OW 321
21042: PUSH
21043: LD_VAR 0 3
21047: NONEQUAL
21048: IFFALSE 21066
// result := result diff i ;
21050: LD_ADDR_VAR 0 4
21054: PUSH
21055: LD_VAR 0 4
21059: PUSH
21060: LD_VAR 0 5
21064: DIFF
21065: ST_TO_ADDR
21066: GO 21025
21068: POP
21069: POP
// end ;
21070: LD_VAR 0 4
21074: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21075: LD_INT 0
21077: PPUSH
21078: PPUSH
21079: PPUSH
// result := true ;
21080: LD_ADDR_VAR 0 3
21084: PUSH
21085: LD_INT 1
21087: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21088: LD_ADDR_VAR 0 5
21092: PUSH
21093: LD_VAR 0 2
21097: PPUSH
21098: CALL_OW 480
21102: ST_TO_ADDR
// if not tmp then
21103: LD_VAR 0 5
21107: NOT
21108: IFFALSE 21112
// exit ;
21110: GO 21161
// for i in tmp do
21112: LD_ADDR_VAR 0 4
21116: PUSH
21117: LD_VAR 0 5
21121: PUSH
21122: FOR_IN
21123: IFFALSE 21159
// if GetTech ( i , side ) <> state_researched then
21125: LD_VAR 0 4
21129: PPUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 321
21139: PUSH
21140: LD_INT 2
21142: NONEQUAL
21143: IFFALSE 21157
// begin result := false ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// exit ;
21153: POP
21154: POP
21155: GO 21161
// end ;
21157: GO 21122
21159: POP
21160: POP
// end ;
21161: LD_VAR 0 3
21165: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21166: LD_INT 0
21168: PPUSH
21169: PPUSH
21170: PPUSH
21171: PPUSH
21172: PPUSH
21173: PPUSH
21174: PPUSH
21175: PPUSH
21176: PPUSH
21177: PPUSH
21178: PPUSH
21179: PPUSH
21180: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21181: LD_VAR 0 1
21185: NOT
21186: PUSH
21187: LD_VAR 0 1
21191: PPUSH
21192: CALL_OW 257
21196: PUSH
21197: LD_INT 9
21199: NONEQUAL
21200: OR
21201: IFFALSE 21205
// exit ;
21203: GO 21778
// side := GetSide ( unit ) ;
21205: LD_ADDR_VAR 0 9
21209: PUSH
21210: LD_VAR 0 1
21214: PPUSH
21215: CALL_OW 255
21219: ST_TO_ADDR
// tech_space := tech_spacanom ;
21220: LD_ADDR_VAR 0 12
21224: PUSH
21225: LD_INT 29
21227: ST_TO_ADDR
// tech_time := tech_taurad ;
21228: LD_ADDR_VAR 0 13
21232: PUSH
21233: LD_INT 28
21235: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21236: LD_ADDR_VAR 0 11
21240: PUSH
21241: LD_VAR 0 1
21245: PPUSH
21246: CALL_OW 310
21250: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21251: LD_VAR 0 11
21255: PPUSH
21256: CALL_OW 247
21260: PUSH
21261: LD_INT 2
21263: EQUAL
21264: IFFALSE 21268
// exit ;
21266: GO 21778
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21268: LD_ADDR_VAR 0 8
21272: PUSH
21273: LD_INT 81
21275: PUSH
21276: LD_VAR 0 9
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 3
21287: PUSH
21288: LD_INT 21
21290: PUSH
21291: LD_INT 3
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PPUSH
21306: CALL_OW 69
21310: ST_TO_ADDR
// if not tmp then
21311: LD_VAR 0 8
21315: NOT
21316: IFFALSE 21320
// exit ;
21318: GO 21778
// if in_unit then
21320: LD_VAR 0 11
21324: IFFALSE 21348
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21326: LD_ADDR_VAR 0 10
21330: PUSH
21331: LD_VAR 0 8
21335: PPUSH
21336: LD_VAR 0 11
21340: PPUSH
21341: CALL_OW 74
21345: ST_TO_ADDR
21346: GO 21368
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21348: LD_ADDR_VAR 0 10
21352: PUSH
21353: LD_VAR 0 8
21357: PPUSH
21358: LD_VAR 0 1
21362: PPUSH
21363: CALL_OW 74
21367: ST_TO_ADDR
// if not enemy then
21368: LD_VAR 0 10
21372: NOT
21373: IFFALSE 21377
// exit ;
21375: GO 21778
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21377: LD_VAR 0 11
21381: PUSH
21382: LD_VAR 0 11
21386: PPUSH
21387: LD_VAR 0 10
21391: PPUSH
21392: CALL_OW 296
21396: PUSH
21397: LD_INT 13
21399: GREATER
21400: AND
21401: PUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: LD_VAR 0 10
21411: PPUSH
21412: CALL_OW 296
21416: PUSH
21417: LD_INT 12
21419: GREATER
21420: OR
21421: IFFALSE 21425
// exit ;
21423: GO 21778
// missile := [ 1 ] ;
21425: LD_ADDR_VAR 0 14
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: EMPTY
21434: LIST
21435: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21436: LD_VAR 0 9
21440: PPUSH
21441: LD_VAR 0 12
21445: PPUSH
21446: CALL_OW 325
21450: IFFALSE 21479
// missile := Replace ( missile , missile + 1 , 2 ) ;
21452: LD_ADDR_VAR 0 14
21456: PUSH
21457: LD_VAR 0 14
21461: PPUSH
21462: LD_VAR 0 14
21466: PUSH
21467: LD_INT 1
21469: PLUS
21470: PPUSH
21471: LD_INT 2
21473: PPUSH
21474: CALL_OW 1
21478: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21479: LD_VAR 0 9
21483: PPUSH
21484: LD_VAR 0 13
21488: PPUSH
21489: CALL_OW 325
21493: PUSH
21494: LD_VAR 0 10
21498: PPUSH
21499: CALL_OW 255
21503: PPUSH
21504: LD_VAR 0 13
21508: PPUSH
21509: CALL_OW 325
21513: NOT
21514: AND
21515: IFFALSE 21544
// missile := Replace ( missile , missile + 1 , 3 ) ;
21517: LD_ADDR_VAR 0 14
21521: PUSH
21522: LD_VAR 0 14
21526: PPUSH
21527: LD_VAR 0 14
21531: PUSH
21532: LD_INT 1
21534: PLUS
21535: PPUSH
21536: LD_INT 3
21538: PPUSH
21539: CALL_OW 1
21543: ST_TO_ADDR
// if missile < 2 then
21544: LD_VAR 0 14
21548: PUSH
21549: LD_INT 2
21551: LESS
21552: IFFALSE 21556
// exit ;
21554: GO 21778
// x := GetX ( enemy ) ;
21556: LD_ADDR_VAR 0 4
21560: PUSH
21561: LD_VAR 0 10
21565: PPUSH
21566: CALL_OW 250
21570: ST_TO_ADDR
// y := GetY ( enemy ) ;
21571: LD_ADDR_VAR 0 5
21575: PUSH
21576: LD_VAR 0 10
21580: PPUSH
21581: CALL_OW 251
21585: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21586: LD_ADDR_VAR 0 6
21590: PUSH
21591: LD_VAR 0 4
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PPUSH
21600: LD_INT 1
21602: PPUSH
21603: CALL_OW 12
21607: PLUS
21608: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21609: LD_ADDR_VAR 0 7
21613: PUSH
21614: LD_VAR 0 5
21618: PUSH
21619: LD_INT 1
21621: NEG
21622: PPUSH
21623: LD_INT 1
21625: PPUSH
21626: CALL_OW 12
21630: PLUS
21631: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21632: LD_VAR 0 6
21636: PPUSH
21637: LD_VAR 0 7
21641: PPUSH
21642: CALL_OW 488
21646: NOT
21647: IFFALSE 21669
// begin _x := x ;
21649: LD_ADDR_VAR 0 6
21653: PUSH
21654: LD_VAR 0 4
21658: ST_TO_ADDR
// _y := y ;
21659: LD_ADDR_VAR 0 7
21663: PUSH
21664: LD_VAR 0 5
21668: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_INT 1
21676: PPUSH
21677: LD_VAR 0 14
21681: PPUSH
21682: CALL_OW 12
21686: ST_TO_ADDR
// case i of 1 :
21687: LD_VAR 0 3
21691: PUSH
21692: LD_INT 1
21694: DOUBLE
21695: EQUAL
21696: IFTRUE 21700
21698: GO 21717
21700: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21701: LD_VAR 0 1
21705: PPUSH
21706: LD_VAR 0 10
21710: PPUSH
21711: CALL_OW 115
21715: GO 21778
21717: LD_INT 2
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21747
21725: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21726: LD_VAR 0 1
21730: PPUSH
21731: LD_VAR 0 6
21735: PPUSH
21736: LD_VAR 0 7
21740: PPUSH
21741: CALL_OW 153
21745: GO 21778
21747: LD_INT 3
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21777
21755: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21756: LD_VAR 0 1
21760: PPUSH
21761: LD_VAR 0 6
21765: PPUSH
21766: LD_VAR 0 7
21770: PPUSH
21771: CALL_OW 154
21775: GO 21778
21777: POP
// end ;
21778: LD_VAR 0 2
21782: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21783: LD_INT 0
21785: PPUSH
21786: PPUSH
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
// if not unit or not building then
21791: LD_VAR 0 1
21795: NOT
21796: PUSH
21797: LD_VAR 0 2
21801: NOT
21802: OR
21803: IFFALSE 21807
// exit ;
21805: GO 21965
// x := GetX ( building ) ;
21807: LD_ADDR_VAR 0 5
21811: PUSH
21812: LD_VAR 0 2
21816: PPUSH
21817: CALL_OW 250
21821: ST_TO_ADDR
// y := GetY ( building ) ;
21822: LD_ADDR_VAR 0 6
21826: PUSH
21827: LD_VAR 0 2
21831: PPUSH
21832: CALL_OW 251
21836: ST_TO_ADDR
// for i = 0 to 5 do
21837: LD_ADDR_VAR 0 4
21841: PUSH
21842: DOUBLE
21843: LD_INT 0
21845: DEC
21846: ST_TO_ADDR
21847: LD_INT 5
21849: PUSH
21850: FOR_TO
21851: IFFALSE 21963
// begin _x := ShiftX ( x , i , 3 ) ;
21853: LD_ADDR_VAR 0 7
21857: PUSH
21858: LD_VAR 0 5
21862: PPUSH
21863: LD_VAR 0 4
21867: PPUSH
21868: LD_INT 3
21870: PPUSH
21871: CALL_OW 272
21875: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21876: LD_ADDR_VAR 0 8
21880: PUSH
21881: LD_VAR 0 6
21885: PPUSH
21886: LD_VAR 0 4
21890: PPUSH
21891: LD_INT 3
21893: PPUSH
21894: CALL_OW 273
21898: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21899: LD_VAR 0 7
21903: PPUSH
21904: LD_VAR 0 8
21908: PPUSH
21909: CALL_OW 488
21913: NOT
21914: IFFALSE 21918
// continue ;
21916: GO 21850
// if HexInfo ( _x , _y ) = 0 then
21918: LD_VAR 0 7
21922: PPUSH
21923: LD_VAR 0 8
21927: PPUSH
21928: CALL_OW 428
21932: PUSH
21933: LD_INT 0
21935: EQUAL
21936: IFFALSE 21961
// begin ComMoveXY ( unit , _x , _y ) ;
21938: LD_VAR 0 1
21942: PPUSH
21943: LD_VAR 0 7
21947: PPUSH
21948: LD_VAR 0 8
21952: PPUSH
21953: CALL_OW 111
// exit ;
21957: POP
21958: POP
21959: GO 21965
// end ; end ;
21961: GO 21850
21963: POP
21964: POP
// end ;
21965: LD_VAR 0 3
21969: RET
// export function ScanBase ( side , base_area ) ; begin
21970: LD_INT 0
21972: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21973: LD_ADDR_VAR 0 3
21977: PUSH
21978: LD_VAR 0 2
21982: PPUSH
21983: LD_INT 81
21985: PUSH
21986: LD_VAR 0 1
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL_OW 70
21999: ST_TO_ADDR
// end ;
22000: LD_VAR 0 3
22004: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22005: LD_INT 0
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
// result := false ;
22011: LD_ADDR_VAR 0 2
22015: PUSH
22016: LD_INT 0
22018: ST_TO_ADDR
// side := GetSide ( unit ) ;
22019: LD_ADDR_VAR 0 3
22023: PUSH
22024: LD_VAR 0 1
22028: PPUSH
22029: CALL_OW 255
22033: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22034: LD_ADDR_VAR 0 4
22038: PUSH
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 248
22048: ST_TO_ADDR
// case nat of 1 :
22049: LD_VAR 0 4
22053: PUSH
22054: LD_INT 1
22056: DOUBLE
22057: EQUAL
22058: IFTRUE 22062
22060: GO 22073
22062: POP
// tech := tech_lassight ; 2 :
22063: LD_ADDR_VAR 0 5
22067: PUSH
22068: LD_INT 12
22070: ST_TO_ADDR
22071: GO 22112
22073: LD_INT 2
22075: DOUBLE
22076: EQUAL
22077: IFTRUE 22081
22079: GO 22092
22081: POP
// tech := tech_mortar ; 3 :
22082: LD_ADDR_VAR 0 5
22086: PUSH
22087: LD_INT 41
22089: ST_TO_ADDR
22090: GO 22112
22092: LD_INT 3
22094: DOUBLE
22095: EQUAL
22096: IFTRUE 22100
22098: GO 22111
22100: POP
// tech := tech_bazooka ; end ;
22101: LD_ADDR_VAR 0 5
22105: PUSH
22106: LD_INT 44
22108: ST_TO_ADDR
22109: GO 22112
22111: POP
// if Researched ( side , tech ) then
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_VAR 0 5
22121: PPUSH
22122: CALL_OW 325
22126: IFFALSE 22153
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22128: LD_ADDR_VAR 0 2
22132: PUSH
22133: LD_INT 5
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: LD_INT 9
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: PUSH
22147: LD_VAR 0 4
22151: ARRAY
22152: ST_TO_ADDR
// end ;
22153: LD_VAR 0 2
22157: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22158: LD_INT 0
22160: PPUSH
22161: PPUSH
22162: PPUSH
// if not mines then
22163: LD_VAR 0 2
22167: NOT
22168: IFFALSE 22172
// exit ;
22170: GO 22316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22172: LD_ADDR_VAR 0 5
22176: PUSH
22177: LD_INT 81
22179: PUSH
22180: LD_VAR 0 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 3
22191: PUSH
22192: LD_INT 21
22194: PUSH
22195: LD_INT 3
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PPUSH
22210: CALL_OW 69
22214: ST_TO_ADDR
// for i in mines do
22215: LD_ADDR_VAR 0 4
22219: PUSH
22220: LD_VAR 0 2
22224: PUSH
22225: FOR_IN
22226: IFFALSE 22314
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22228: LD_VAR 0 4
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: LD_VAR 0 4
22241: PUSH
22242: LD_INT 2
22244: ARRAY
22245: PPUSH
22246: CALL_OW 458
22250: NOT
22251: IFFALSE 22255
// continue ;
22253: GO 22225
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22255: LD_VAR 0 4
22259: PUSH
22260: LD_INT 1
22262: ARRAY
22263: PPUSH
22264: LD_VAR 0 4
22268: PUSH
22269: LD_INT 2
22271: ARRAY
22272: PPUSH
22273: CALL_OW 428
22277: PUSH
22278: LD_VAR 0 5
22282: IN
22283: IFFALSE 22312
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22285: LD_VAR 0 4
22289: PUSH
22290: LD_INT 1
22292: ARRAY
22293: PPUSH
22294: LD_VAR 0 4
22298: PUSH
22299: LD_INT 2
22301: ARRAY
22302: PPUSH
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 456
// end ;
22312: GO 22225
22314: POP
22315: POP
// end ;
22316: LD_VAR 0 3
22320: RET
// export function Count ( array ) ; begin
22321: LD_INT 0
22323: PPUSH
// result := array + 0 ;
22324: LD_ADDR_VAR 0 2
22328: PUSH
22329: LD_VAR 0 1
22333: PUSH
22334: LD_INT 0
22336: PLUS
22337: ST_TO_ADDR
// end ;
22338: LD_VAR 0 2
22342: RET
// export function IsEmpty ( building ) ; begin
22343: LD_INT 0
22345: PPUSH
// if not building then
22346: LD_VAR 0 1
22350: NOT
22351: IFFALSE 22355
// exit ;
22353: GO 22398
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22355: LD_ADDR_VAR 0 2
22359: PUSH
22360: LD_VAR 0 1
22364: PUSH
22365: LD_INT 22
22367: PUSH
22368: LD_VAR 0 1
22372: PPUSH
22373: CALL_OW 255
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 58
22384: PUSH
22385: EMPTY
22386: LIST
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: CALL_OW 69
22396: IN
22397: ST_TO_ADDR
// end ;
22398: LD_VAR 0 2
22402: RET
// export function IsNotFull ( building ) ; var places ; begin
22403: LD_INT 0
22405: PPUSH
22406: PPUSH
// if not building then
22407: LD_VAR 0 1
22411: NOT
22412: IFFALSE 22416
// exit ;
22414: GO 22587
// result := false ;
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 0
22423: ST_TO_ADDR
// places := 0 ;
22424: LD_ADDR_VAR 0 3
22428: PUSH
22429: LD_INT 0
22431: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 266
22441: PUSH
22442: LD_INT 0
22444: DOUBLE
22445: EQUAL
22446: IFTRUE 22504
22448: LD_INT 1
22450: DOUBLE
22451: EQUAL
22452: IFTRUE 22504
22454: LD_INT 6
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22504
22460: LD_INT 7
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22504
22466: LD_INT 8
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22504
22472: LD_INT 4
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22504
22478: LD_INT 5
22480: DOUBLE
22481: EQUAL
22482: IFTRUE 22504
22484: LD_INT 2
22486: DOUBLE
22487: EQUAL
22488: IFTRUE 22504
22490: LD_INT 3
22492: DOUBLE
22493: EQUAL
22494: IFTRUE 22504
22496: LD_INT 35
22498: DOUBLE
22499: EQUAL
22500: IFTRUE 22504
22502: GO 22515
22504: POP
// places := 6 ; b_bunker , b_breastwork :
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_INT 6
22512: ST_TO_ADDR
22513: GO 22560
22515: LD_INT 32
22517: DOUBLE
22518: EQUAL
22519: IFTRUE 22529
22521: LD_INT 31
22523: DOUBLE
22524: EQUAL
22525: IFTRUE 22529
22527: GO 22540
22529: POP
// places := 1 ; b_control_tower :
22530: LD_ADDR_VAR 0 3
22534: PUSH
22535: LD_INT 1
22537: ST_TO_ADDR
22538: GO 22560
22540: LD_INT 36
22542: DOUBLE
22543: EQUAL
22544: IFTRUE 22548
22546: GO 22559
22548: POP
// places := 3 ; end ;
22549: LD_ADDR_VAR 0 3
22553: PUSH
22554: LD_INT 3
22556: ST_TO_ADDR
22557: GO 22560
22559: POP
// if places then
22560: LD_VAR 0 3
22564: IFFALSE 22587
// result := UnitsInside ( building ) < places ;
22566: LD_ADDR_VAR 0 2
22570: PUSH
22571: LD_VAR 0 1
22575: PPUSH
22576: CALL_OW 313
22580: PUSH
22581: LD_VAR 0 3
22585: LESS
22586: ST_TO_ADDR
// end ;
22587: LD_VAR 0 2
22591: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
// tmp := [ ] ;
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: EMPTY
22604: ST_TO_ADDR
// list := [ ] ;
22605: LD_ADDR_VAR 0 5
22609: PUSH
22610: EMPTY
22611: ST_TO_ADDR
// for i = 16 to 25 do
22612: LD_ADDR_VAR 0 4
22616: PUSH
22617: DOUBLE
22618: LD_INT 16
22620: DEC
22621: ST_TO_ADDR
22622: LD_INT 25
22624: PUSH
22625: FOR_TO
22626: IFFALSE 22699
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22628: LD_ADDR_VAR 0 3
22632: PUSH
22633: LD_VAR 0 3
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_VAR 0 1
22645: PPUSH
22646: CALL_OW 255
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 91
22657: PUSH
22658: LD_VAR 0 1
22662: PUSH
22663: LD_INT 6
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 30
22673: PUSH
22674: LD_VAR 0 4
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: PUSH
22688: EMPTY
22689: LIST
22690: PPUSH
22691: CALL_OW 69
22695: ADD
22696: ST_TO_ADDR
22697: GO 22625
22699: POP
22700: POP
// for i = 1 to tmp do
22701: LD_ADDR_VAR 0 4
22705: PUSH
22706: DOUBLE
22707: LD_INT 1
22709: DEC
22710: ST_TO_ADDR
22711: LD_VAR 0 3
22715: PUSH
22716: FOR_TO
22717: IFFALSE 22805
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22719: LD_ADDR_VAR 0 5
22723: PUSH
22724: LD_VAR 0 5
22728: PUSH
22729: LD_VAR 0 3
22733: PUSH
22734: LD_VAR 0 4
22738: ARRAY
22739: PPUSH
22740: CALL_OW 266
22744: PUSH
22745: LD_VAR 0 3
22749: PUSH
22750: LD_VAR 0 4
22754: ARRAY
22755: PPUSH
22756: CALL_OW 250
22760: PUSH
22761: LD_VAR 0 3
22765: PUSH
22766: LD_VAR 0 4
22770: ARRAY
22771: PPUSH
22772: CALL_OW 251
22776: PUSH
22777: LD_VAR 0 3
22781: PUSH
22782: LD_VAR 0 4
22786: ARRAY
22787: PPUSH
22788: CALL_OW 254
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: ADD
22802: ST_TO_ADDR
22803: GO 22716
22805: POP
22806: POP
// result := list ;
22807: LD_ADDR_VAR 0 2
22811: PUSH
22812: LD_VAR 0 5
22816: ST_TO_ADDR
// end ;
22817: LD_VAR 0 2
22821: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22822: LD_INT 0
22824: PPUSH
22825: PPUSH
22826: PPUSH
22827: PPUSH
22828: PPUSH
22829: PPUSH
22830: PPUSH
// if not factory then
22831: LD_VAR 0 1
22835: NOT
22836: IFFALSE 22840
// exit ;
22838: GO 23433
// if control = control_apeman then
22840: LD_VAR 0 4
22844: PUSH
22845: LD_INT 5
22847: EQUAL
22848: IFFALSE 22957
// begin tmp := UnitsInside ( factory ) ;
22850: LD_ADDR_VAR 0 8
22854: PUSH
22855: LD_VAR 0 1
22859: PPUSH
22860: CALL_OW 313
22864: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22865: LD_VAR 0 8
22869: PPUSH
22870: LD_INT 25
22872: PUSH
22873: LD_INT 12
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PPUSH
22880: CALL_OW 72
22884: NOT
22885: IFFALSE 22895
// control := control_manual ;
22887: LD_ADDR_VAR 0 4
22891: PUSH
22892: LD_INT 1
22894: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22895: LD_ADDR_VAR 0 8
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL 22592 0 1
22909: ST_TO_ADDR
// if tmp then
22910: LD_VAR 0 8
22914: IFFALSE 22957
// begin for i in tmp do
22916: LD_ADDR_VAR 0 7
22920: PUSH
22921: LD_VAR 0 8
22925: PUSH
22926: FOR_IN
22927: IFFALSE 22955
// if i [ 1 ] = b_ext_radio then
22929: LD_VAR 0 7
22933: PUSH
22934: LD_INT 1
22936: ARRAY
22937: PUSH
22938: LD_INT 22
22940: EQUAL
22941: IFFALSE 22953
// begin control := control_remote ;
22943: LD_ADDR_VAR 0 4
22947: PUSH
22948: LD_INT 2
22950: ST_TO_ADDR
// break ;
22951: GO 22955
// end ;
22953: GO 22926
22955: POP
22956: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_VAR 0 2
22966: PPUSH
22967: LD_VAR 0 3
22971: PPUSH
22972: LD_VAR 0 4
22976: PPUSH
22977: LD_VAR 0 5
22981: PPUSH
22982: CALL_OW 448
22986: IFFALSE 23021
// begin result := [ chassis , engine , control , weapon ] ;
22988: LD_ADDR_VAR 0 6
22992: PUSH
22993: LD_VAR 0 2
22997: PUSH
22998: LD_VAR 0 3
23002: PUSH
23003: LD_VAR 0 4
23007: PUSH
23008: LD_VAR 0 5
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: ST_TO_ADDR
// exit ;
23019: GO 23433
// end ; _chassis := AvailableChassisList ( factory ) ;
23021: LD_ADDR_VAR 0 9
23025: PUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 475
23035: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23036: LD_ADDR_VAR 0 11
23040: PUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 476
23050: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23051: LD_ADDR_VAR 0 12
23055: PUSH
23056: LD_VAR 0 1
23060: PPUSH
23061: CALL_OW 477
23065: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23066: LD_ADDR_VAR 0 10
23070: PUSH
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 478
23080: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23081: LD_VAR 0 9
23085: NOT
23086: PUSH
23087: LD_VAR 0 11
23091: NOT
23092: OR
23093: PUSH
23094: LD_VAR 0 12
23098: NOT
23099: OR
23100: PUSH
23101: LD_VAR 0 10
23105: NOT
23106: OR
23107: IFFALSE 23142
// begin result := [ chassis , engine , control , weapon ] ;
23109: LD_ADDR_VAR 0 6
23113: PUSH
23114: LD_VAR 0 2
23118: PUSH
23119: LD_VAR 0 3
23123: PUSH
23124: LD_VAR 0 4
23128: PUSH
23129: LD_VAR 0 5
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: ST_TO_ADDR
// exit ;
23140: GO 23433
// end ; if not chassis in _chassis then
23142: LD_VAR 0 2
23146: PUSH
23147: LD_VAR 0 9
23151: IN
23152: NOT
23153: IFFALSE 23179
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_VAR 0 9
23164: PUSH
23165: LD_INT 1
23167: PPUSH
23168: LD_VAR 0 9
23172: PPUSH
23173: CALL_OW 12
23177: ARRAY
23178: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23179: LD_VAR 0 2
23183: PPUSH
23184: LD_VAR 0 3
23188: PPUSH
23189: CALL 23438 0 2
23193: NOT
23194: IFFALSE 23253
// repeat engine := _engine [ 1 ] ;
23196: LD_ADDR_VAR 0 3
23200: PUSH
23201: LD_VAR 0 11
23205: PUSH
23206: LD_INT 1
23208: ARRAY
23209: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23210: LD_ADDR_VAR 0 11
23214: PUSH
23215: LD_VAR 0 11
23219: PPUSH
23220: LD_INT 1
23222: PPUSH
23223: CALL_OW 3
23227: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23228: LD_VAR 0 2
23232: PPUSH
23233: LD_VAR 0 3
23237: PPUSH
23238: CALL 23438 0 2
23242: PUSH
23243: LD_VAR 0 11
23247: PUSH
23248: EMPTY
23249: EQUAL
23250: OR
23251: IFFALSE 23196
// if not control in _control then
23253: LD_VAR 0 4
23257: PUSH
23258: LD_VAR 0 12
23262: IN
23263: NOT
23264: IFFALSE 23290
// control := _control [ rand ( 1 , _control ) ] ;
23266: LD_ADDR_VAR 0 4
23270: PUSH
23271: LD_VAR 0 12
23275: PUSH
23276: LD_INT 1
23278: PPUSH
23279: LD_VAR 0 12
23283: PPUSH
23284: CALL_OW 12
23288: ARRAY
23289: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23290: LD_VAR 0 2
23294: PPUSH
23295: LD_VAR 0 5
23299: PPUSH
23300: CALL 23658 0 2
23304: NOT
23305: IFFALSE 23364
// repeat weapon := _weapon [ 1 ] ;
23307: LD_ADDR_VAR 0 5
23311: PUSH
23312: LD_VAR 0 10
23316: PUSH
23317: LD_INT 1
23319: ARRAY
23320: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23321: LD_ADDR_VAR 0 10
23325: PUSH
23326: LD_VAR 0 10
23330: PPUSH
23331: LD_INT 1
23333: PPUSH
23334: CALL_OW 3
23338: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 5
23348: PPUSH
23349: CALL 23658 0 2
23353: PUSH
23354: LD_VAR 0 10
23358: PUSH
23359: EMPTY
23360: EQUAL
23361: OR
23362: IFFALSE 23307
// result := [ ] ;
23364: LD_ADDR_VAR 0 6
23368: PUSH
23369: EMPTY
23370: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23371: LD_VAR 0 1
23375: PPUSH
23376: LD_VAR 0 2
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: LD_VAR 0 4
23390: PPUSH
23391: LD_VAR 0 5
23395: PPUSH
23396: CALL_OW 448
23400: IFFALSE 23433
// result := [ chassis , engine , control , weapon ] ;
23402: LD_ADDR_VAR 0 6
23406: PUSH
23407: LD_VAR 0 2
23411: PUSH
23412: LD_VAR 0 3
23416: PUSH
23417: LD_VAR 0 4
23421: PUSH
23422: LD_VAR 0 5
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: ST_TO_ADDR
// end ;
23433: LD_VAR 0 6
23437: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23438: LD_INT 0
23440: PPUSH
// if not chassis or not engine then
23441: LD_VAR 0 1
23445: NOT
23446: PUSH
23447: LD_VAR 0 2
23451: NOT
23452: OR
23453: IFFALSE 23457
// exit ;
23455: GO 23653
// case engine of engine_solar :
23457: LD_VAR 0 2
23461: PUSH
23462: LD_INT 2
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23508
23470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23471: LD_ADDR_VAR 0 3
23475: PUSH
23476: LD_INT 11
23478: PUSH
23479: LD_INT 12
23481: PUSH
23482: LD_INT 13
23484: PUSH
23485: LD_INT 14
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: ST_TO_ADDR
23506: GO 23637
23508: LD_INT 1
23510: DOUBLE
23511: EQUAL
23512: IFTRUE 23516
23514: GO 23578
23516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23517: LD_ADDR_VAR 0 3
23521: PUSH
23522: LD_INT 11
23524: PUSH
23525: LD_INT 12
23527: PUSH
23528: LD_INT 13
23530: PUSH
23531: LD_INT 14
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: LD_INT 4
23545: PUSH
23546: LD_INT 5
23548: PUSH
23549: LD_INT 21
23551: PUSH
23552: LD_INT 23
23554: PUSH
23555: LD_INT 22
23557: PUSH
23558: LD_INT 24
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: ST_TO_ADDR
23576: GO 23637
23578: LD_INT 3
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23636
23586: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23587: LD_ADDR_VAR 0 3
23591: PUSH
23592: LD_INT 13
23594: PUSH
23595: LD_INT 14
23597: PUSH
23598: LD_INT 2
23600: PUSH
23601: LD_INT 3
23603: PUSH
23604: LD_INT 4
23606: PUSH
23607: LD_INT 5
23609: PUSH
23610: LD_INT 21
23612: PUSH
23613: LD_INT 22
23615: PUSH
23616: LD_INT 23
23618: PUSH
23619: LD_INT 24
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: ST_TO_ADDR
23634: GO 23637
23636: POP
// result := ( chassis in result ) ;
23637: LD_ADDR_VAR 0 3
23641: PUSH
23642: LD_VAR 0 1
23646: PUSH
23647: LD_VAR 0 3
23651: IN
23652: ST_TO_ADDR
// end ;
23653: LD_VAR 0 3
23657: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23658: LD_INT 0
23660: PPUSH
// if not chassis or not weapon then
23661: LD_VAR 0 1
23665: NOT
23666: PUSH
23667: LD_VAR 0 2
23671: NOT
23672: OR
23673: IFFALSE 23677
// exit ;
23675: GO 24737
// case weapon of us_machine_gun :
23677: LD_VAR 0 2
23681: PUSH
23682: LD_INT 2
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23720
23690: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23691: LD_ADDR_VAR 0 3
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: LD_INT 4
23707: PUSH
23708: LD_INT 5
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: ST_TO_ADDR
23718: GO 24721
23720: LD_INT 3
23722: DOUBLE
23723: EQUAL
23724: IFTRUE 23728
23726: GO 23758
23728: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23729: LD_ADDR_VAR 0 3
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 3
23742: PUSH
23743: LD_INT 4
23745: PUSH
23746: LD_INT 5
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: ST_TO_ADDR
23756: GO 24721
23758: LD_INT 11
23760: DOUBLE
23761: EQUAL
23762: IFTRUE 23766
23764: GO 23796
23766: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23767: LD_ADDR_VAR 0 3
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 3
23780: PUSH
23781: LD_INT 4
23783: PUSH
23784: LD_INT 5
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: ST_TO_ADDR
23794: GO 24721
23796: LD_INT 4
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23830
23804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23805: LD_ADDR_VAR 0 3
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 3
23815: PUSH
23816: LD_INT 4
23818: PUSH
23819: LD_INT 5
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: ST_TO_ADDR
23828: GO 24721
23830: LD_INT 5
23832: DOUBLE
23833: EQUAL
23834: IFTRUE 23838
23836: GO 23864
23838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23839: LD_ADDR_VAR 0 3
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: LD_INT 3
23849: PUSH
23850: LD_INT 4
23852: PUSH
23853: LD_INT 5
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: ST_TO_ADDR
23862: GO 24721
23864: LD_INT 9
23866: DOUBLE
23867: EQUAL
23868: IFTRUE 23872
23870: GO 23898
23872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 3
23883: PUSH
23884: LD_INT 4
23886: PUSH
23887: LD_INT 5
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: ST_TO_ADDR
23896: GO 24721
23898: LD_INT 7
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 23932
23906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23907: LD_ADDR_VAR 0 3
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: LD_INT 3
23917: PUSH
23918: LD_INT 4
23920: PUSH
23921: LD_INT 5
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: ST_TO_ADDR
23930: GO 24721
23932: LD_INT 12
23934: DOUBLE
23935: EQUAL
23936: IFTRUE 23940
23938: GO 23966
23940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23941: LD_ADDR_VAR 0 3
23945: PUSH
23946: LD_INT 2
23948: PUSH
23949: LD_INT 3
23951: PUSH
23952: LD_INT 4
23954: PUSH
23955: LD_INT 5
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: ST_TO_ADDR
23964: GO 24721
23966: LD_INT 13
23968: DOUBLE
23969: EQUAL
23970: IFTRUE 23974
23972: GO 24000
23974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23975: LD_ADDR_VAR 0 3
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: LD_INT 4
23988: PUSH
23989: LD_INT 5
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: ST_TO_ADDR
23998: GO 24721
24000: LD_INT 14
24002: DOUBLE
24003: EQUAL
24004: IFTRUE 24008
24006: GO 24026
24008: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24009: LD_ADDR_VAR 0 3
24013: PUSH
24014: LD_INT 4
24016: PUSH
24017: LD_INT 5
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: ST_TO_ADDR
24024: GO 24721
24026: LD_INT 6
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24052
24034: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24035: LD_ADDR_VAR 0 3
24039: PUSH
24040: LD_INT 4
24042: PUSH
24043: LD_INT 5
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: ST_TO_ADDR
24050: GO 24721
24052: LD_INT 10
24054: DOUBLE
24055: EQUAL
24056: IFTRUE 24060
24058: GO 24078
24060: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24061: LD_ADDR_VAR 0 3
24065: PUSH
24066: LD_INT 4
24068: PUSH
24069: LD_INT 5
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: ST_TO_ADDR
24076: GO 24721
24078: LD_INT 22
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24112
24086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24087: LD_ADDR_VAR 0 3
24091: PUSH
24092: LD_INT 11
24094: PUSH
24095: LD_INT 12
24097: PUSH
24098: LD_INT 13
24100: PUSH
24101: LD_INT 14
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
24110: GO 24721
24112: LD_INT 23
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24146
24120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 13
24134: PUSH
24135: LD_INT 14
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: ST_TO_ADDR
24144: GO 24721
24146: LD_INT 24
24148: DOUBLE
24149: EQUAL
24150: IFTRUE 24154
24152: GO 24180
24154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: LD_INT 11
24162: PUSH
24163: LD_INT 12
24165: PUSH
24166: LD_INT 13
24168: PUSH
24169: LD_INT 14
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: ST_TO_ADDR
24178: GO 24721
24180: LD_INT 30
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24214
24188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24189: LD_ADDR_VAR 0 3
24193: PUSH
24194: LD_INT 11
24196: PUSH
24197: LD_INT 12
24199: PUSH
24200: LD_INT 13
24202: PUSH
24203: LD_INT 14
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: ST_TO_ADDR
24212: GO 24721
24214: LD_INT 25
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24240
24222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24223: LD_ADDR_VAR 0 3
24227: PUSH
24228: LD_INT 13
24230: PUSH
24231: LD_INT 14
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: ST_TO_ADDR
24238: GO 24721
24240: LD_INT 27
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24266
24248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_INT 13
24256: PUSH
24257: LD_INT 14
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: ST_TO_ADDR
24264: GO 24721
24266: LD_INT 92
24268: DOUBLE
24269: EQUAL
24270: IFTRUE 24274
24272: GO 24300
24274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24275: LD_ADDR_VAR 0 3
24279: PUSH
24280: LD_INT 11
24282: PUSH
24283: LD_INT 12
24285: PUSH
24286: LD_INT 13
24288: PUSH
24289: LD_INT 14
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: ST_TO_ADDR
24298: GO 24721
24300: LD_INT 28
24302: DOUBLE
24303: EQUAL
24304: IFTRUE 24308
24306: GO 24326
24308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24309: LD_ADDR_VAR 0 3
24313: PUSH
24314: LD_INT 13
24316: PUSH
24317: LD_INT 14
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: ST_TO_ADDR
24324: GO 24721
24326: LD_INT 29
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24352
24334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24335: LD_ADDR_VAR 0 3
24339: PUSH
24340: LD_INT 13
24342: PUSH
24343: LD_INT 14
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: ST_TO_ADDR
24350: GO 24721
24352: LD_INT 31
24354: DOUBLE
24355: EQUAL
24356: IFTRUE 24360
24358: GO 24378
24360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24361: LD_ADDR_VAR 0 3
24365: PUSH
24366: LD_INT 13
24368: PUSH
24369: LD_INT 14
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: ST_TO_ADDR
24376: GO 24721
24378: LD_INT 26
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24404
24386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24387: LD_ADDR_VAR 0 3
24391: PUSH
24392: LD_INT 13
24394: PUSH
24395: LD_INT 14
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: ST_TO_ADDR
24402: GO 24721
24404: LD_INT 42
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24412
24410: GO 24438
24412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24413: LD_ADDR_VAR 0 3
24417: PUSH
24418: LD_INT 21
24420: PUSH
24421: LD_INT 22
24423: PUSH
24424: LD_INT 23
24426: PUSH
24427: LD_INT 24
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: ST_TO_ADDR
24436: GO 24721
24438: LD_INT 43
24440: DOUBLE
24441: EQUAL
24442: IFTRUE 24446
24444: GO 24472
24446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24447: LD_ADDR_VAR 0 3
24451: PUSH
24452: LD_INT 21
24454: PUSH
24455: LD_INT 22
24457: PUSH
24458: LD_INT 23
24460: PUSH
24461: LD_INT 24
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: ST_TO_ADDR
24470: GO 24721
24472: LD_INT 44
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24506
24480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24481: LD_ADDR_VAR 0 3
24485: PUSH
24486: LD_INT 21
24488: PUSH
24489: LD_INT 22
24491: PUSH
24492: LD_INT 23
24494: PUSH
24495: LD_INT 24
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: ST_TO_ADDR
24504: GO 24721
24506: LD_INT 45
24508: DOUBLE
24509: EQUAL
24510: IFTRUE 24514
24512: GO 24540
24514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_INT 21
24522: PUSH
24523: LD_INT 22
24525: PUSH
24526: LD_INT 23
24528: PUSH
24529: LD_INT 24
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: ST_TO_ADDR
24538: GO 24721
24540: LD_INT 49
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24574
24548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24549: LD_ADDR_VAR 0 3
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 22
24559: PUSH
24560: LD_INT 23
24562: PUSH
24563: LD_INT 24
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: ST_TO_ADDR
24572: GO 24721
24574: LD_INT 51
24576: DOUBLE
24577: EQUAL
24578: IFTRUE 24582
24580: GO 24608
24582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 22
24593: PUSH
24594: LD_INT 23
24596: PUSH
24597: LD_INT 24
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
24606: GO 24721
24608: LD_INT 52
24610: DOUBLE
24611: EQUAL
24612: IFTRUE 24616
24614: GO 24642
24616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: LD_INT 21
24624: PUSH
24625: LD_INT 22
24627: PUSH
24628: LD_INT 23
24630: PUSH
24631: LD_INT 24
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: ST_TO_ADDR
24640: GO 24721
24642: LD_INT 53
24644: DOUBLE
24645: EQUAL
24646: IFTRUE 24650
24648: GO 24668
24650: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_INT 23
24658: PUSH
24659: LD_INT 24
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: ST_TO_ADDR
24666: GO 24721
24668: LD_INT 46
24670: DOUBLE
24671: EQUAL
24672: IFTRUE 24676
24674: GO 24694
24676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24677: LD_ADDR_VAR 0 3
24681: PUSH
24682: LD_INT 23
24684: PUSH
24685: LD_INT 24
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: ST_TO_ADDR
24692: GO 24721
24694: LD_INT 47
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24702
24700: GO 24720
24702: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: LD_INT 23
24710: PUSH
24711: LD_INT 24
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: ST_TO_ADDR
24718: GO 24721
24720: POP
// result := ( chassis in result ) ;
24721: LD_ADDR_VAR 0 3
24725: PUSH
24726: LD_VAR 0 1
24730: PUSH
24731: LD_VAR 0 3
24735: IN
24736: ST_TO_ADDR
// end ;
24737: LD_VAR 0 3
24741: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24742: LD_INT 0
24744: PPUSH
24745: PPUSH
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
// result := array ;
24751: LD_ADDR_VAR 0 5
24755: PUSH
24756: LD_VAR 0 1
24760: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24761: LD_VAR 0 1
24765: NOT
24766: PUSH
24767: LD_VAR 0 2
24771: NOT
24772: OR
24773: PUSH
24774: LD_VAR 0 3
24778: NOT
24779: OR
24780: PUSH
24781: LD_VAR 0 2
24785: PUSH
24786: LD_VAR 0 1
24790: GREATER
24791: OR
24792: PUSH
24793: LD_VAR 0 3
24797: PUSH
24798: LD_VAR 0 1
24802: GREATER
24803: OR
24804: IFFALSE 24808
// exit ;
24806: GO 25104
// if direction then
24808: LD_VAR 0 4
24812: IFFALSE 24876
// begin d := 1 ;
24814: LD_ADDR_VAR 0 9
24818: PUSH
24819: LD_INT 1
24821: ST_TO_ADDR
// if i_from > i_to then
24822: LD_VAR 0 2
24826: PUSH
24827: LD_VAR 0 3
24831: GREATER
24832: IFFALSE 24858
// length := ( array - i_from ) + i_to else
24834: LD_ADDR_VAR 0 11
24838: PUSH
24839: LD_VAR 0 1
24843: PUSH
24844: LD_VAR 0 2
24848: MINUS
24849: PUSH
24850: LD_VAR 0 3
24854: PLUS
24855: ST_TO_ADDR
24856: GO 24874
// length := i_to - i_from ;
24858: LD_ADDR_VAR 0 11
24862: PUSH
24863: LD_VAR 0 3
24867: PUSH
24868: LD_VAR 0 2
24872: MINUS
24873: ST_TO_ADDR
// end else
24874: GO 24937
// begin d := - 1 ;
24876: LD_ADDR_VAR 0 9
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: ST_TO_ADDR
// if i_from > i_to then
24885: LD_VAR 0 2
24889: PUSH
24890: LD_VAR 0 3
24894: GREATER
24895: IFFALSE 24915
// length := i_from - i_to else
24897: LD_ADDR_VAR 0 11
24901: PUSH
24902: LD_VAR 0 2
24906: PUSH
24907: LD_VAR 0 3
24911: MINUS
24912: ST_TO_ADDR
24913: GO 24937
// length := ( array - i_to ) + i_from ;
24915: LD_ADDR_VAR 0 11
24919: PUSH
24920: LD_VAR 0 1
24924: PUSH
24925: LD_VAR 0 3
24929: MINUS
24930: PUSH
24931: LD_VAR 0 2
24935: PLUS
24936: ST_TO_ADDR
// end ; if not length then
24937: LD_VAR 0 11
24941: NOT
24942: IFFALSE 24946
// exit ;
24944: GO 25104
// tmp := array ;
24946: LD_ADDR_VAR 0 10
24950: PUSH
24951: LD_VAR 0 1
24955: ST_TO_ADDR
// for i = 1 to length do
24956: LD_ADDR_VAR 0 6
24960: PUSH
24961: DOUBLE
24962: LD_INT 1
24964: DEC
24965: ST_TO_ADDR
24966: LD_VAR 0 11
24970: PUSH
24971: FOR_TO
24972: IFFALSE 25092
// begin for j = 1 to array do
24974: LD_ADDR_VAR 0 7
24978: PUSH
24979: DOUBLE
24980: LD_INT 1
24982: DEC
24983: ST_TO_ADDR
24984: LD_VAR 0 1
24988: PUSH
24989: FOR_TO
24990: IFFALSE 25078
// begin k := j + d ;
24992: LD_ADDR_VAR 0 8
24996: PUSH
24997: LD_VAR 0 7
25001: PUSH
25002: LD_VAR 0 9
25006: PLUS
25007: ST_TO_ADDR
// if k > array then
25008: LD_VAR 0 8
25012: PUSH
25013: LD_VAR 0 1
25017: GREATER
25018: IFFALSE 25028
// k := 1 ;
25020: LD_ADDR_VAR 0 8
25024: PUSH
25025: LD_INT 1
25027: ST_TO_ADDR
// if not k then
25028: LD_VAR 0 8
25032: NOT
25033: IFFALSE 25045
// k := array ;
25035: LD_ADDR_VAR 0 8
25039: PUSH
25040: LD_VAR 0 1
25044: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25045: LD_ADDR_VAR 0 10
25049: PUSH
25050: LD_VAR 0 10
25054: PPUSH
25055: LD_VAR 0 8
25059: PPUSH
25060: LD_VAR 0 1
25064: PUSH
25065: LD_VAR 0 7
25069: ARRAY
25070: PPUSH
25071: CALL_OW 1
25075: ST_TO_ADDR
// end ;
25076: GO 24989
25078: POP
25079: POP
// array := tmp ;
25080: LD_ADDR_VAR 0 1
25084: PUSH
25085: LD_VAR 0 10
25089: ST_TO_ADDR
// end ;
25090: GO 24971
25092: POP
25093: POP
// result := array ;
25094: LD_ADDR_VAR 0 5
25098: PUSH
25099: LD_VAR 0 1
25103: ST_TO_ADDR
// end ;
25104: LD_VAR 0 5
25108: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25109: LD_INT 0
25111: PPUSH
25112: PPUSH
// result := 0 ;
25113: LD_ADDR_VAR 0 3
25117: PUSH
25118: LD_INT 0
25120: ST_TO_ADDR
// if not array or not value in array then
25121: LD_VAR 0 1
25125: NOT
25126: PUSH
25127: LD_VAR 0 2
25131: PUSH
25132: LD_VAR 0 1
25136: IN
25137: NOT
25138: OR
25139: IFFALSE 25143
// exit ;
25141: GO 25197
// for i = 1 to array do
25143: LD_ADDR_VAR 0 4
25147: PUSH
25148: DOUBLE
25149: LD_INT 1
25151: DEC
25152: ST_TO_ADDR
25153: LD_VAR 0 1
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25195
// if value = array [ i ] then
25161: LD_VAR 0 2
25165: PUSH
25166: LD_VAR 0 1
25170: PUSH
25171: LD_VAR 0 4
25175: ARRAY
25176: EQUAL
25177: IFFALSE 25193
// begin result := i ;
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: LD_VAR 0 4
25188: ST_TO_ADDR
// exit ;
25189: POP
25190: POP
25191: GO 25197
// end ;
25193: GO 25158
25195: POP
25196: POP
// end ;
25197: LD_VAR 0 3
25201: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25202: LD_INT 0
25204: PPUSH
// vc_chassis := chassis ;
25205: LD_ADDR_OWVAR 37
25209: PUSH
25210: LD_VAR 0 1
25214: ST_TO_ADDR
// vc_engine := engine ;
25215: LD_ADDR_OWVAR 39
25219: PUSH
25220: LD_VAR 0 2
25224: ST_TO_ADDR
// vc_control := control ;
25225: LD_ADDR_OWVAR 38
25229: PUSH
25230: LD_VAR 0 3
25234: ST_TO_ADDR
// vc_weapon := weapon ;
25235: LD_ADDR_OWVAR 40
25239: PUSH
25240: LD_VAR 0 4
25244: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25245: LD_ADDR_OWVAR 41
25249: PUSH
25250: LD_VAR 0 5
25254: ST_TO_ADDR
// end ;
25255: LD_VAR 0 6
25259: RET
// export function WantPlant ( unit ) ; var task ; begin
25260: LD_INT 0
25262: PPUSH
25263: PPUSH
// result := false ;
25264: LD_ADDR_VAR 0 2
25268: PUSH
25269: LD_INT 0
25271: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_VAR 0 1
25281: PPUSH
25282: CALL_OW 437
25286: ST_TO_ADDR
// if task then
25287: LD_VAR 0 3
25291: IFFALSE 25319
// if task [ 1 ] [ 1 ] = p then
25293: LD_VAR 0 3
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: PUSH
25302: LD_INT 1
25304: ARRAY
25305: PUSH
25306: LD_STRING p
25308: EQUAL
25309: IFFALSE 25319
// result := true ;
25311: LD_ADDR_VAR 0 2
25315: PUSH
25316: LD_INT 1
25318: ST_TO_ADDR
// end ;
25319: LD_VAR 0 2
25323: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25324: LD_INT 0
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
// if pos < 1 then
25330: LD_VAR 0 2
25334: PUSH
25335: LD_INT 1
25337: LESS
25338: IFFALSE 25342
// exit ;
25340: GO 25645
// if pos = 1 then
25342: LD_VAR 0 2
25346: PUSH
25347: LD_INT 1
25349: EQUAL
25350: IFFALSE 25383
// result := Replace ( arr , pos [ 1 ] , value ) else
25352: LD_ADDR_VAR 0 4
25356: PUSH
25357: LD_VAR 0 1
25361: PPUSH
25362: LD_VAR 0 2
25366: PUSH
25367: LD_INT 1
25369: ARRAY
25370: PPUSH
25371: LD_VAR 0 3
25375: PPUSH
25376: CALL_OW 1
25380: ST_TO_ADDR
25381: GO 25645
// begin tmp := arr ;
25383: LD_ADDR_VAR 0 6
25387: PUSH
25388: LD_VAR 0 1
25392: ST_TO_ADDR
// s_arr := [ tmp ] ;
25393: LD_ADDR_VAR 0 7
25397: PUSH
25398: LD_VAR 0 6
25402: PUSH
25403: EMPTY
25404: LIST
25405: ST_TO_ADDR
// for i = 1 to pos - 1 do
25406: LD_ADDR_VAR 0 5
25410: PUSH
25411: DOUBLE
25412: LD_INT 1
25414: DEC
25415: ST_TO_ADDR
25416: LD_VAR 0 2
25420: PUSH
25421: LD_INT 1
25423: MINUS
25424: PUSH
25425: FOR_TO
25426: IFFALSE 25471
// begin tmp := tmp [ pos [ i ] ] ;
25428: LD_ADDR_VAR 0 6
25432: PUSH
25433: LD_VAR 0 6
25437: PUSH
25438: LD_VAR 0 2
25442: PUSH
25443: LD_VAR 0 5
25447: ARRAY
25448: ARRAY
25449: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25450: LD_ADDR_VAR 0 7
25454: PUSH
25455: LD_VAR 0 7
25459: PUSH
25460: LD_VAR 0 6
25464: PUSH
25465: EMPTY
25466: LIST
25467: ADD
25468: ST_TO_ADDR
// end ;
25469: GO 25425
25471: POP
25472: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25473: LD_ADDR_VAR 0 6
25477: PUSH
25478: LD_VAR 0 6
25482: PPUSH
25483: LD_VAR 0 2
25487: PUSH
25488: LD_VAR 0 2
25492: ARRAY
25493: PPUSH
25494: LD_VAR 0 3
25498: PPUSH
25499: CALL_OW 1
25503: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25504: LD_ADDR_VAR 0 7
25508: PUSH
25509: LD_VAR 0 7
25513: PPUSH
25514: LD_VAR 0 7
25518: PPUSH
25519: LD_VAR 0 6
25523: PPUSH
25524: CALL_OW 1
25528: ST_TO_ADDR
// for i = s_arr downto 2 do
25529: LD_ADDR_VAR 0 5
25533: PUSH
25534: DOUBLE
25535: LD_VAR 0 7
25539: INC
25540: ST_TO_ADDR
25541: LD_INT 2
25543: PUSH
25544: FOR_DOWNTO
25545: IFFALSE 25629
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25547: LD_ADDR_VAR 0 6
25551: PUSH
25552: LD_VAR 0 7
25556: PUSH
25557: LD_VAR 0 5
25561: PUSH
25562: LD_INT 1
25564: MINUS
25565: ARRAY
25566: PPUSH
25567: LD_VAR 0 2
25571: PUSH
25572: LD_VAR 0 5
25576: PUSH
25577: LD_INT 1
25579: MINUS
25580: ARRAY
25581: PPUSH
25582: LD_VAR 0 7
25586: PUSH
25587: LD_VAR 0 5
25591: ARRAY
25592: PPUSH
25593: CALL_OW 1
25597: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25598: LD_ADDR_VAR 0 7
25602: PUSH
25603: LD_VAR 0 7
25607: PPUSH
25608: LD_VAR 0 5
25612: PUSH
25613: LD_INT 1
25615: MINUS
25616: PPUSH
25617: LD_VAR 0 6
25621: PPUSH
25622: CALL_OW 1
25626: ST_TO_ADDR
// end ;
25627: GO 25544
25629: POP
25630: POP
// result := s_arr [ 1 ] ;
25631: LD_ADDR_VAR 0 4
25635: PUSH
25636: LD_VAR 0 7
25640: PUSH
25641: LD_INT 1
25643: ARRAY
25644: ST_TO_ADDR
// end ; end ;
25645: LD_VAR 0 4
25649: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25650: LD_INT 0
25652: PPUSH
25653: PPUSH
// if not list then
25654: LD_VAR 0 1
25658: NOT
25659: IFFALSE 25663
// exit ;
25661: GO 25754
// i := list [ pos1 ] ;
25663: LD_ADDR_VAR 0 5
25667: PUSH
25668: LD_VAR 0 1
25672: PUSH
25673: LD_VAR 0 2
25677: ARRAY
25678: ST_TO_ADDR
// if not i then
25679: LD_VAR 0 5
25683: NOT
25684: IFFALSE 25688
// exit ;
25686: GO 25754
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25688: LD_ADDR_VAR 0 1
25692: PUSH
25693: LD_VAR 0 1
25697: PPUSH
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_VAR 0 1
25707: PUSH
25708: LD_VAR 0 3
25712: ARRAY
25713: PPUSH
25714: CALL_OW 1
25718: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25719: LD_ADDR_VAR 0 1
25723: PUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: LD_VAR 0 3
25733: PPUSH
25734: LD_VAR 0 5
25738: PPUSH
25739: CALL_OW 1
25743: ST_TO_ADDR
// result := list ;
25744: LD_ADDR_VAR 0 4
25748: PUSH
25749: LD_VAR 0 1
25753: ST_TO_ADDR
// end ;
25754: LD_VAR 0 4
25758: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25759: LD_INT 0
25761: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25762: LD_ADDR_VAR 0 5
25766: PUSH
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL_OW 250
25776: PPUSH
25777: LD_VAR 0 1
25781: PPUSH
25782: CALL_OW 251
25786: PPUSH
25787: LD_VAR 0 2
25791: PPUSH
25792: LD_VAR 0 3
25796: PPUSH
25797: LD_VAR 0 4
25801: PPUSH
25802: CALL 25812 0 5
25806: ST_TO_ADDR
// end ;
25807: LD_VAR 0 5
25811: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25812: LD_INT 0
25814: PPUSH
25815: PPUSH
25816: PPUSH
25817: PPUSH
// if not list then
25818: LD_VAR 0 3
25822: NOT
25823: IFFALSE 25827
// exit ;
25825: GO 26215
// result := [ ] ;
25827: LD_ADDR_VAR 0 6
25831: PUSH
25832: EMPTY
25833: ST_TO_ADDR
// for i in list do
25834: LD_ADDR_VAR 0 7
25838: PUSH
25839: LD_VAR 0 3
25843: PUSH
25844: FOR_IN
25845: IFFALSE 26047
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25847: LD_ADDR_VAR 0 9
25851: PUSH
25852: LD_VAR 0 7
25856: PPUSH
25857: LD_VAR 0 1
25861: PPUSH
25862: LD_VAR 0 2
25866: PPUSH
25867: CALL_OW 297
25871: ST_TO_ADDR
// if not result then
25872: LD_VAR 0 6
25876: NOT
25877: IFFALSE 25903
// result := [ [ i , tmp ] ] else
25879: LD_ADDR_VAR 0 6
25883: PUSH
25884: LD_VAR 0 7
25888: PUSH
25889: LD_VAR 0 9
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: EMPTY
25899: LIST
25900: ST_TO_ADDR
25901: GO 26045
// begin if result [ result ] [ 2 ] < tmp then
25903: LD_VAR 0 6
25907: PUSH
25908: LD_VAR 0 6
25912: ARRAY
25913: PUSH
25914: LD_INT 2
25916: ARRAY
25917: PUSH
25918: LD_VAR 0 9
25922: LESS
25923: IFFALSE 25965
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25925: LD_ADDR_VAR 0 6
25929: PUSH
25930: LD_VAR 0 6
25934: PPUSH
25935: LD_VAR 0 6
25939: PUSH
25940: LD_INT 1
25942: PLUS
25943: PPUSH
25944: LD_VAR 0 7
25948: PUSH
25949: LD_VAR 0 9
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 2
25962: ST_TO_ADDR
25963: GO 26045
// for j = 1 to result do
25965: LD_ADDR_VAR 0 8
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_VAR 0 6
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26043
// begin if tmp < result [ j ] [ 2 ] then
25983: LD_VAR 0 9
25987: PUSH
25988: LD_VAR 0 6
25992: PUSH
25993: LD_VAR 0 8
25997: ARRAY
25998: PUSH
25999: LD_INT 2
26001: ARRAY
26002: LESS
26003: IFFALSE 26041
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26005: LD_ADDR_VAR 0 6
26009: PUSH
26010: LD_VAR 0 6
26014: PPUSH
26015: LD_VAR 0 8
26019: PPUSH
26020: LD_VAR 0 7
26024: PUSH
26025: LD_VAR 0 9
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 2
26038: ST_TO_ADDR
// break ;
26039: GO 26043
// end ; end ;
26041: GO 25980
26043: POP
26044: POP
// end ; end ;
26045: GO 25844
26047: POP
26048: POP
// if result and not asc then
26049: LD_VAR 0 6
26053: PUSH
26054: LD_VAR 0 4
26058: NOT
26059: AND
26060: IFFALSE 26135
// begin tmp := result ;
26062: LD_ADDR_VAR 0 9
26066: PUSH
26067: LD_VAR 0 6
26071: ST_TO_ADDR
// for i = tmp downto 1 do
26072: LD_ADDR_VAR 0 7
26076: PUSH
26077: DOUBLE
26078: LD_VAR 0 9
26082: INC
26083: ST_TO_ADDR
26084: LD_INT 1
26086: PUSH
26087: FOR_DOWNTO
26088: IFFALSE 26133
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26090: LD_ADDR_VAR 0 6
26094: PUSH
26095: LD_VAR 0 6
26099: PPUSH
26100: LD_VAR 0 9
26104: PUSH
26105: LD_VAR 0 7
26109: MINUS
26110: PUSH
26111: LD_INT 1
26113: PLUS
26114: PPUSH
26115: LD_VAR 0 9
26119: PUSH
26120: LD_VAR 0 7
26124: ARRAY
26125: PPUSH
26126: CALL_OW 1
26130: ST_TO_ADDR
26131: GO 26087
26133: POP
26134: POP
// end ; tmp := [ ] ;
26135: LD_ADDR_VAR 0 9
26139: PUSH
26140: EMPTY
26141: ST_TO_ADDR
// if mode then
26142: LD_VAR 0 5
26146: IFFALSE 26215
// begin for i = 1 to result do
26148: LD_ADDR_VAR 0 7
26152: PUSH
26153: DOUBLE
26154: LD_INT 1
26156: DEC
26157: ST_TO_ADDR
26158: LD_VAR 0 6
26162: PUSH
26163: FOR_TO
26164: IFFALSE 26203
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26166: LD_ADDR_VAR 0 9
26170: PUSH
26171: LD_VAR 0 9
26175: PPUSH
26176: LD_VAR 0 7
26180: PPUSH
26181: LD_VAR 0 6
26185: PUSH
26186: LD_VAR 0 7
26190: ARRAY
26191: PUSH
26192: LD_INT 1
26194: ARRAY
26195: PPUSH
26196: CALL_OW 1
26200: ST_TO_ADDR
26201: GO 26163
26203: POP
26204: POP
// result := tmp ;
26205: LD_ADDR_VAR 0 6
26209: PUSH
26210: LD_VAR 0 9
26214: ST_TO_ADDR
// end ; end ;
26215: LD_VAR 0 6
26219: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26220: LD_INT 0
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26228: LD_ADDR_VAR 0 5
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
// if not x or not y then
26250: LD_VAR 0 2
26254: NOT
26255: PUSH
26256: LD_VAR 0 3
26260: NOT
26261: OR
26262: IFFALSE 26266
// exit ;
26264: GO 27916
// if not range then
26266: LD_VAR 0 4
26270: NOT
26271: IFFALSE 26281
// range := 10 ;
26273: LD_ADDR_VAR 0 4
26277: PUSH
26278: LD_INT 10
26280: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26281: LD_ADDR_VAR 0 8
26285: PUSH
26286: LD_INT 81
26288: PUSH
26289: LD_VAR 0 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 92
26300: PUSH
26301: LD_VAR 0 2
26305: PUSH
26306: LD_VAR 0 3
26310: PUSH
26311: LD_VAR 0 4
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 3
26324: PUSH
26325: LD_INT 21
26327: PUSH
26328: LD_INT 3
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: PPUSH
26344: CALL_OW 69
26348: ST_TO_ADDR
// if not tmp then
26349: LD_VAR 0 8
26353: NOT
26354: IFFALSE 26358
// exit ;
26356: GO 27916
// for i in tmp do
26358: LD_ADDR_VAR 0 6
26362: PUSH
26363: LD_VAR 0 8
26367: PUSH
26368: FOR_IN
26369: IFFALSE 27891
// begin points := [ 0 , 0 , 0 ] ;
26371: LD_ADDR_VAR 0 9
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
// bpoints := 1 ;
26390: LD_ADDR_VAR 0 10
26394: PUSH
26395: LD_INT 1
26397: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26398: LD_VAR 0 6
26402: PPUSH
26403: CALL_OW 247
26407: PUSH
26408: LD_INT 1
26410: DOUBLE
26411: EQUAL
26412: IFTRUE 26416
26414: GO 26994
26416: POP
// begin if GetClass ( i ) = 1 then
26417: LD_VAR 0 6
26421: PPUSH
26422: CALL_OW 257
26426: PUSH
26427: LD_INT 1
26429: EQUAL
26430: IFFALSE 26451
// points := [ 10 , 5 , 3 ] ;
26432: LD_ADDR_VAR 0 9
26436: PUSH
26437: LD_INT 10
26439: PUSH
26440: LD_INT 5
26442: PUSH
26443: LD_INT 3
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: LIST
26450: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26451: LD_VAR 0 6
26455: PPUSH
26456: CALL_OW 257
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: LD_INT 3
26466: PUSH
26467: LD_INT 4
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: IN
26475: IFFALSE 26496
// points := [ 3 , 2 , 1 ] ;
26477: LD_ADDR_VAR 0 9
26481: PUSH
26482: LD_INT 3
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26496: LD_VAR 0 6
26500: PPUSH
26501: CALL_OW 257
26505: PUSH
26506: LD_INT 5
26508: EQUAL
26509: IFFALSE 26530
// points := [ 130 , 5 , 2 ] ;
26511: LD_ADDR_VAR 0 9
26515: PUSH
26516: LD_INT 130
26518: PUSH
26519: LD_INT 5
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26530: LD_VAR 0 6
26534: PPUSH
26535: CALL_OW 257
26539: PUSH
26540: LD_INT 8
26542: EQUAL
26543: IFFALSE 26564
// points := [ 35 , 35 , 30 ] ;
26545: LD_ADDR_VAR 0 9
26549: PUSH
26550: LD_INT 35
26552: PUSH
26553: LD_INT 35
26555: PUSH
26556: LD_INT 30
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26564: LD_VAR 0 6
26568: PPUSH
26569: CALL_OW 257
26573: PUSH
26574: LD_INT 9
26576: EQUAL
26577: IFFALSE 26598
// points := [ 20 , 55 , 40 ] ;
26579: LD_ADDR_VAR 0 9
26583: PUSH
26584: LD_INT 20
26586: PUSH
26587: LD_INT 55
26589: PUSH
26590: LD_INT 40
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26598: LD_VAR 0 6
26602: PPUSH
26603: CALL_OW 257
26607: PUSH
26608: LD_INT 12
26610: PUSH
26611: LD_INT 16
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: IN
26618: IFFALSE 26639
// points := [ 5 , 3 , 2 ] ;
26620: LD_ADDR_VAR 0 9
26624: PUSH
26625: LD_INT 5
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26639: LD_VAR 0 6
26643: PPUSH
26644: CALL_OW 257
26648: PUSH
26649: LD_INT 17
26651: EQUAL
26652: IFFALSE 26673
// points := [ 100 , 50 , 75 ] ;
26654: LD_ADDR_VAR 0 9
26658: PUSH
26659: LD_INT 100
26661: PUSH
26662: LD_INT 50
26664: PUSH
26665: LD_INT 75
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26673: LD_VAR 0 6
26677: PPUSH
26678: CALL_OW 257
26682: PUSH
26683: LD_INT 15
26685: EQUAL
26686: IFFALSE 26707
// points := [ 10 , 5 , 3 ] ;
26688: LD_ADDR_VAR 0 9
26692: PUSH
26693: LD_INT 10
26695: PUSH
26696: LD_INT 5
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26707: LD_VAR 0 6
26711: PPUSH
26712: CALL_OW 257
26716: PUSH
26717: LD_INT 14
26719: EQUAL
26720: IFFALSE 26741
// points := [ 10 , 0 , 0 ] ;
26722: LD_ADDR_VAR 0 9
26726: PUSH
26727: LD_INT 10
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26741: LD_VAR 0 6
26745: PPUSH
26746: CALL_OW 257
26750: PUSH
26751: LD_INT 11
26753: EQUAL
26754: IFFALSE 26775
// points := [ 30 , 10 , 5 ] ;
26756: LD_ADDR_VAR 0 9
26760: PUSH
26761: LD_INT 30
26763: PUSH
26764: LD_INT 10
26766: PUSH
26767: LD_INT 5
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26775: LD_VAR 0 1
26779: PPUSH
26780: LD_INT 5
26782: PPUSH
26783: CALL_OW 321
26787: PUSH
26788: LD_INT 2
26790: EQUAL
26791: IFFALSE 26808
// bpoints := bpoints * 1.8 ;
26793: LD_ADDR_VAR 0 10
26797: PUSH
26798: LD_VAR 0 10
26802: PUSH
26803: LD_REAL  1.80000000000000E+0000
26806: MUL
26807: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26808: LD_VAR 0 6
26812: PPUSH
26813: CALL_OW 257
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: LD_INT 4
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: IN
26836: PUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: LD_INT 51
26844: PPUSH
26845: CALL_OW 321
26849: PUSH
26850: LD_INT 2
26852: EQUAL
26853: AND
26854: IFFALSE 26871
// bpoints := bpoints * 1.2 ;
26856: LD_ADDR_VAR 0 10
26860: PUSH
26861: LD_VAR 0 10
26865: PUSH
26866: LD_REAL  1.20000000000000E+0000
26869: MUL
26870: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26871: LD_VAR 0 6
26875: PPUSH
26876: CALL_OW 257
26880: PUSH
26881: LD_INT 5
26883: PUSH
26884: LD_INT 7
26886: PUSH
26887: LD_INT 9
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: IN
26895: PUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: LD_INT 52
26903: PPUSH
26904: CALL_OW 321
26908: PUSH
26909: LD_INT 2
26911: EQUAL
26912: AND
26913: IFFALSE 26930
// bpoints := bpoints * 1.5 ;
26915: LD_ADDR_VAR 0 10
26919: PUSH
26920: LD_VAR 0 10
26924: PUSH
26925: LD_REAL  1.50000000000000E+0000
26928: MUL
26929: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26930: LD_VAR 0 1
26934: PPUSH
26935: LD_INT 66
26937: PPUSH
26938: CALL_OW 321
26942: PUSH
26943: LD_INT 2
26945: EQUAL
26946: IFFALSE 26963
// bpoints := bpoints * 1.1 ;
26948: LD_ADDR_VAR 0 10
26952: PUSH
26953: LD_VAR 0 10
26957: PUSH
26958: LD_REAL  1.10000000000000E+0000
26961: MUL
26962: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26963: LD_ADDR_VAR 0 10
26967: PUSH
26968: LD_VAR 0 10
26972: PUSH
26973: LD_VAR 0 6
26977: PPUSH
26978: LD_INT 1
26980: PPUSH
26981: CALL_OW 259
26985: PUSH
26986: LD_REAL  1.15000000000000E+0000
26989: MUL
26990: MUL
26991: ST_TO_ADDR
// end ; unit_vehicle :
26992: GO 27820
26994: LD_INT 2
26996: DOUBLE
26997: EQUAL
26998: IFTRUE 27002
27000: GO 27808
27002: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27003: LD_VAR 0 6
27007: PPUSH
27008: CALL_OW 264
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 42
27018: PUSH
27019: LD_INT 24
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: IN
27027: IFFALSE 27048
// points := [ 25 , 5 , 3 ] ;
27029: LD_ADDR_VAR 0 9
27033: PUSH
27034: LD_INT 25
27036: PUSH
27037: LD_INT 5
27039: PUSH
27040: LD_INT 3
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27048: LD_VAR 0 6
27052: PPUSH
27053: CALL_OW 264
27057: PUSH
27058: LD_INT 4
27060: PUSH
27061: LD_INT 43
27063: PUSH
27064: LD_INT 25
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: IN
27072: IFFALSE 27093
// points := [ 40 , 15 , 5 ] ;
27074: LD_ADDR_VAR 0 9
27078: PUSH
27079: LD_INT 40
27081: PUSH
27082: LD_INT 15
27084: PUSH
27085: LD_INT 5
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27093: LD_VAR 0 6
27097: PPUSH
27098: CALL_OW 264
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: LD_INT 23
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: IN
27113: IFFALSE 27134
// points := [ 7 , 25 , 8 ] ;
27115: LD_ADDR_VAR 0 9
27119: PUSH
27120: LD_INT 7
27122: PUSH
27123: LD_INT 25
27125: PUSH
27126: LD_INT 8
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: LIST
27133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27134: LD_VAR 0 6
27138: PPUSH
27139: CALL_OW 264
27143: PUSH
27144: LD_INT 5
27146: PUSH
27147: LD_INT 27
27149: PUSH
27150: LD_INT 44
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: IN
27158: IFFALSE 27179
// points := [ 14 , 50 , 16 ] ;
27160: LD_ADDR_VAR 0 9
27164: PUSH
27165: LD_INT 14
27167: PUSH
27168: LD_INT 50
27170: PUSH
27171: LD_INT 16
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27179: LD_VAR 0 6
27183: PPUSH
27184: CALL_OW 264
27188: PUSH
27189: LD_INT 6
27191: PUSH
27192: LD_INT 46
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: IN
27199: IFFALSE 27220
// points := [ 32 , 120 , 70 ] ;
27201: LD_ADDR_VAR 0 9
27205: PUSH
27206: LD_INT 32
27208: PUSH
27209: LD_INT 120
27211: PUSH
27212: LD_INT 70
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: LIST
27219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27220: LD_VAR 0 6
27224: PPUSH
27225: CALL_OW 264
27229: PUSH
27230: LD_INT 7
27232: PUSH
27233: LD_INT 28
27235: PUSH
27236: LD_INT 45
27238: PUSH
27239: LD_INT 92
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: IN
27248: IFFALSE 27269
// points := [ 35 , 20 , 45 ] ;
27250: LD_ADDR_VAR 0 9
27254: PUSH
27255: LD_INT 35
27257: PUSH
27258: LD_INT 20
27260: PUSH
27261: LD_INT 45
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27269: LD_VAR 0 6
27273: PPUSH
27274: CALL_OW 264
27278: PUSH
27279: LD_INT 47
27281: PUSH
27282: EMPTY
27283: LIST
27284: IN
27285: IFFALSE 27306
// points := [ 67 , 45 , 75 ] ;
27287: LD_ADDR_VAR 0 9
27291: PUSH
27292: LD_INT 67
27294: PUSH
27295: LD_INT 45
27297: PUSH
27298: LD_INT 75
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: LIST
27305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27306: LD_VAR 0 6
27310: PPUSH
27311: CALL_OW 264
27315: PUSH
27316: LD_INT 26
27318: PUSH
27319: EMPTY
27320: LIST
27321: IN
27322: IFFALSE 27343
// points := [ 120 , 30 , 80 ] ;
27324: LD_ADDR_VAR 0 9
27328: PUSH
27329: LD_INT 120
27331: PUSH
27332: LD_INT 30
27334: PUSH
27335: LD_INT 80
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27343: LD_VAR 0 6
27347: PPUSH
27348: CALL_OW 264
27352: PUSH
27353: LD_INT 22
27355: PUSH
27356: EMPTY
27357: LIST
27358: IN
27359: IFFALSE 27380
// points := [ 40 , 1 , 1 ] ;
27361: LD_ADDR_VAR 0 9
27365: PUSH
27366: LD_INT 40
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: LIST
27379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27380: LD_VAR 0 6
27384: PPUSH
27385: CALL_OW 264
27389: PUSH
27390: LD_INT 29
27392: PUSH
27393: EMPTY
27394: LIST
27395: IN
27396: IFFALSE 27417
// points := [ 70 , 200 , 400 ] ;
27398: LD_ADDR_VAR 0 9
27402: PUSH
27403: LD_INT 70
27405: PUSH
27406: LD_INT 200
27408: PUSH
27409: LD_INT 400
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27417: LD_VAR 0 6
27421: PPUSH
27422: CALL_OW 264
27426: PUSH
27427: LD_INT 14
27429: PUSH
27430: LD_INT 53
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: IN
27437: IFFALSE 27458
// points := [ 40 , 10 , 20 ] ;
27439: LD_ADDR_VAR 0 9
27443: PUSH
27444: LD_INT 40
27446: PUSH
27447: LD_INT 10
27449: PUSH
27450: LD_INT 20
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27458: LD_VAR 0 6
27462: PPUSH
27463: CALL_OW 264
27467: PUSH
27468: LD_INT 9
27470: PUSH
27471: EMPTY
27472: LIST
27473: IN
27474: IFFALSE 27495
// points := [ 5 , 70 , 20 ] ;
27476: LD_ADDR_VAR 0 9
27480: PUSH
27481: LD_INT 5
27483: PUSH
27484: LD_INT 70
27486: PUSH
27487: LD_INT 20
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27495: LD_VAR 0 6
27499: PPUSH
27500: CALL_OW 264
27504: PUSH
27505: LD_INT 10
27507: PUSH
27508: EMPTY
27509: LIST
27510: IN
27511: IFFALSE 27532
// points := [ 35 , 110 , 70 ] ;
27513: LD_ADDR_VAR 0 9
27517: PUSH
27518: LD_INT 35
27520: PUSH
27521: LD_INT 110
27523: PUSH
27524: LD_INT 70
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27532: LD_VAR 0 6
27536: PPUSH
27537: CALL_OW 265
27541: PUSH
27542: LD_INT 25
27544: EQUAL
27545: IFFALSE 27566
// points := [ 80 , 65 , 100 ] ;
27547: LD_ADDR_VAR 0 9
27551: PUSH
27552: LD_INT 80
27554: PUSH
27555: LD_INT 65
27557: PUSH
27558: LD_INT 100
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27566: LD_VAR 0 6
27570: PPUSH
27571: CALL_OW 263
27575: PUSH
27576: LD_INT 1
27578: EQUAL
27579: IFFALSE 27614
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27581: LD_ADDR_VAR 0 10
27585: PUSH
27586: LD_VAR 0 10
27590: PUSH
27591: LD_VAR 0 6
27595: PPUSH
27596: CALL_OW 311
27600: PPUSH
27601: LD_INT 3
27603: PPUSH
27604: CALL_OW 259
27608: PUSH
27609: LD_INT 4
27611: MUL
27612: MUL
27613: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27614: LD_VAR 0 6
27618: PPUSH
27619: CALL_OW 263
27623: PUSH
27624: LD_INT 2
27626: EQUAL
27627: IFFALSE 27678
// begin j := IsControledBy ( i ) ;
27629: LD_ADDR_VAR 0 7
27633: PUSH
27634: LD_VAR 0 6
27638: PPUSH
27639: CALL_OW 312
27643: ST_TO_ADDR
// if j then
27644: LD_VAR 0 7
27648: IFFALSE 27678
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27650: LD_ADDR_VAR 0 10
27654: PUSH
27655: LD_VAR 0 10
27659: PUSH
27660: LD_VAR 0 7
27664: PPUSH
27665: LD_INT 3
27667: PPUSH
27668: CALL_OW 259
27672: PUSH
27673: LD_INT 3
27675: MUL
27676: MUL
27677: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27678: LD_VAR 0 6
27682: PPUSH
27683: CALL_OW 264
27687: PUSH
27688: LD_INT 5
27690: PUSH
27691: LD_INT 6
27693: PUSH
27694: LD_INT 46
27696: PUSH
27697: LD_INT 44
27699: PUSH
27700: LD_INT 47
27702: PUSH
27703: LD_INT 45
27705: PUSH
27706: LD_INT 28
27708: PUSH
27709: LD_INT 7
27711: PUSH
27712: LD_INT 27
27714: PUSH
27715: LD_INT 29
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: IN
27730: PUSH
27731: LD_VAR 0 1
27735: PPUSH
27736: LD_INT 52
27738: PPUSH
27739: CALL_OW 321
27743: PUSH
27744: LD_INT 2
27746: EQUAL
27747: AND
27748: IFFALSE 27765
// bpoints := bpoints * 1.2 ;
27750: LD_ADDR_VAR 0 10
27754: PUSH
27755: LD_VAR 0 10
27759: PUSH
27760: LD_REAL  1.20000000000000E+0000
27763: MUL
27764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27765: LD_VAR 0 6
27769: PPUSH
27770: CALL_OW 264
27774: PUSH
27775: LD_INT 6
27777: PUSH
27778: LD_INT 46
27780: PUSH
27781: LD_INT 47
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: IN
27789: IFFALSE 27806
// bpoints := bpoints * 1.2 ;
27791: LD_ADDR_VAR 0 10
27795: PUSH
27796: LD_VAR 0 10
27800: PUSH
27801: LD_REAL  1.20000000000000E+0000
27804: MUL
27805: ST_TO_ADDR
// end ; unit_building :
27806: GO 27820
27808: LD_INT 3
27810: DOUBLE
27811: EQUAL
27812: IFTRUE 27816
27814: GO 27819
27816: POP
// ; end ;
27817: GO 27820
27819: POP
// for j = 1 to 3 do
27820: LD_ADDR_VAR 0 7
27824: PUSH
27825: DOUBLE
27826: LD_INT 1
27828: DEC
27829: ST_TO_ADDR
27830: LD_INT 3
27832: PUSH
27833: FOR_TO
27834: IFFALSE 27887
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27836: LD_ADDR_VAR 0 5
27840: PUSH
27841: LD_VAR 0 5
27845: PPUSH
27846: LD_VAR 0 7
27850: PPUSH
27851: LD_VAR 0 5
27855: PUSH
27856: LD_VAR 0 7
27860: ARRAY
27861: PUSH
27862: LD_VAR 0 9
27866: PUSH
27867: LD_VAR 0 7
27871: ARRAY
27872: PUSH
27873: LD_VAR 0 10
27877: MUL
27878: PLUS
27879: PPUSH
27880: CALL_OW 1
27884: ST_TO_ADDR
27885: GO 27833
27887: POP
27888: POP
// end ;
27889: GO 26368
27891: POP
27892: POP
// result := Replace ( result , 4 , tmp ) ;
27893: LD_ADDR_VAR 0 5
27897: PUSH
27898: LD_VAR 0 5
27902: PPUSH
27903: LD_INT 4
27905: PPUSH
27906: LD_VAR 0 8
27910: PPUSH
27911: CALL_OW 1
27915: ST_TO_ADDR
// end ;
27916: LD_VAR 0 5
27920: RET
// export function DangerAtRange ( unit , range ) ; begin
27921: LD_INT 0
27923: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27924: LD_ADDR_VAR 0 3
27928: PUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL_OW 255
27938: PPUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 250
27948: PPUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 251
27958: PPUSH
27959: LD_VAR 0 2
27963: PPUSH
27964: CALL 26220 0 4
27968: ST_TO_ADDR
// end ;
27969: LD_VAR 0 3
27973: RET
// export function DangerInArea ( side , area ) ; begin
27974: LD_INT 0
27976: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27977: LD_ADDR_VAR 0 3
27981: PUSH
27982: LD_VAR 0 2
27986: PPUSH
27987: LD_INT 81
27989: PUSH
27990: LD_VAR 0 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PPUSH
27999: CALL_OW 70
28003: ST_TO_ADDR
// end ;
28004: LD_VAR 0 3
28008: RET
// export function IsExtension ( b ) ; begin
28009: LD_INT 0
28011: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28012: LD_ADDR_VAR 0 2
28016: PUSH
28017: LD_VAR 0 1
28021: PUSH
28022: LD_INT 23
28024: PUSH
28025: LD_INT 20
28027: PUSH
28028: LD_INT 22
28030: PUSH
28031: LD_INT 17
28033: PUSH
28034: LD_INT 24
28036: PUSH
28037: LD_INT 21
28039: PUSH
28040: LD_INT 19
28042: PUSH
28043: LD_INT 16
28045: PUSH
28046: LD_INT 25
28048: PUSH
28049: LD_INT 18
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: IN
28064: ST_TO_ADDR
// end ;
28065: LD_VAR 0 2
28069: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28070: LD_INT 0
28072: PPUSH
28073: PPUSH
28074: PPUSH
// result := [ ] ;
28075: LD_ADDR_VAR 0 4
28079: PUSH
28080: EMPTY
28081: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28082: LD_ADDR_VAR 0 5
28086: PUSH
28087: LD_VAR 0 2
28091: PPUSH
28092: LD_INT 21
28094: PUSH
28095: LD_INT 3
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PPUSH
28102: CALL_OW 70
28106: ST_TO_ADDR
// if not tmp then
28107: LD_VAR 0 5
28111: NOT
28112: IFFALSE 28116
// exit ;
28114: GO 28180
// if checkLink then
28116: LD_VAR 0 3
28120: IFFALSE 28170
// begin for i in tmp do
28122: LD_ADDR_VAR 0 6
28126: PUSH
28127: LD_VAR 0 5
28131: PUSH
28132: FOR_IN
28133: IFFALSE 28168
// if GetBase ( i ) <> base then
28135: LD_VAR 0 6
28139: PPUSH
28140: CALL_OW 274
28144: PUSH
28145: LD_VAR 0 1
28149: NONEQUAL
28150: IFFALSE 28166
// ComLinkToBase ( base , i ) ;
28152: LD_VAR 0 1
28156: PPUSH
28157: LD_VAR 0 6
28161: PPUSH
28162: CALL_OW 169
28166: GO 28132
28168: POP
28169: POP
// end ; result := tmp ;
28170: LD_ADDR_VAR 0 4
28174: PUSH
28175: LD_VAR 0 5
28179: ST_TO_ADDR
// end ;
28180: LD_VAR 0 4
28184: RET
// export function ComComplete ( units , b ) ; var i ; begin
28185: LD_INT 0
28187: PPUSH
28188: PPUSH
// if not units then
28189: LD_VAR 0 1
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28288
// for i in units do
28198: LD_ADDR_VAR 0 4
28202: PUSH
28203: LD_VAR 0 1
28207: PUSH
28208: FOR_IN
28209: IFFALSE 28286
// if BuildingStatus ( b ) = bs_build then
28211: LD_VAR 0 2
28215: PPUSH
28216: CALL_OW 461
28220: PUSH
28221: LD_INT 1
28223: EQUAL
28224: IFFALSE 28284
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28226: LD_VAR 0 4
28230: PPUSH
28231: LD_STRING h
28233: PUSH
28234: LD_VAR 0 2
28238: PPUSH
28239: CALL_OW 250
28243: PUSH
28244: LD_VAR 0 2
28248: PPUSH
28249: CALL_OW 251
28253: PUSH
28254: LD_VAR 0 2
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: PPUSH
28280: CALL_OW 446
28284: GO 28208
28286: POP
28287: POP
// end ;
28288: LD_VAR 0 3
28292: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28293: LD_INT 0
28295: PPUSH
28296: PPUSH
28297: PPUSH
28298: PPUSH
28299: PPUSH
28300: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28301: LD_VAR 0 1
28305: NOT
28306: PUSH
28307: LD_VAR 0 1
28311: PPUSH
28312: CALL_OW 263
28316: PUSH
28317: LD_INT 2
28319: NONEQUAL
28320: OR
28321: IFFALSE 28325
// exit ;
28323: GO 28641
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28325: LD_ADDR_VAR 0 6
28329: PUSH
28330: LD_INT 22
28332: PUSH
28333: LD_VAR 0 1
28337: PPUSH
28338: CALL_OW 255
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: LD_INT 30
28352: PUSH
28353: LD_INT 36
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 34
28362: PUSH
28363: LD_INT 31
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 69
28383: ST_TO_ADDR
// if not tmp then
28384: LD_VAR 0 6
28388: NOT
28389: IFFALSE 28393
// exit ;
28391: GO 28641
// result := [ ] ;
28393: LD_ADDR_VAR 0 2
28397: PUSH
28398: EMPTY
28399: ST_TO_ADDR
// for i in tmp do
28400: LD_ADDR_VAR 0 3
28404: PUSH
28405: LD_VAR 0 6
28409: PUSH
28410: FOR_IN
28411: IFFALSE 28482
// begin t := UnitsInside ( i ) ;
28413: LD_ADDR_VAR 0 4
28417: PUSH
28418: LD_VAR 0 3
28422: PPUSH
28423: CALL_OW 313
28427: ST_TO_ADDR
// if t then
28428: LD_VAR 0 4
28432: IFFALSE 28480
// for j in t do
28434: LD_ADDR_VAR 0 7
28438: PUSH
28439: LD_VAR 0 4
28443: PUSH
28444: FOR_IN
28445: IFFALSE 28478
// result := Replace ( result , result + 1 , j ) ;
28447: LD_ADDR_VAR 0 2
28451: PUSH
28452: LD_VAR 0 2
28456: PPUSH
28457: LD_VAR 0 2
28461: PUSH
28462: LD_INT 1
28464: PLUS
28465: PPUSH
28466: LD_VAR 0 7
28470: PPUSH
28471: CALL_OW 1
28475: ST_TO_ADDR
28476: GO 28444
28478: POP
28479: POP
// end ;
28480: GO 28410
28482: POP
28483: POP
// if not result then
28484: LD_VAR 0 2
28488: NOT
28489: IFFALSE 28493
// exit ;
28491: GO 28641
// mech := result [ 1 ] ;
28493: LD_ADDR_VAR 0 5
28497: PUSH
28498: LD_VAR 0 2
28502: PUSH
28503: LD_INT 1
28505: ARRAY
28506: ST_TO_ADDR
// if result > 1 then
28507: LD_VAR 0 2
28511: PUSH
28512: LD_INT 1
28514: GREATER
28515: IFFALSE 28627
// begin for i = 2 to result do
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: DOUBLE
28523: LD_INT 2
28525: DEC
28526: ST_TO_ADDR
28527: LD_VAR 0 2
28531: PUSH
28532: FOR_TO
28533: IFFALSE 28625
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28535: LD_ADDR_VAR 0 4
28539: PUSH
28540: LD_VAR 0 2
28544: PUSH
28545: LD_VAR 0 3
28549: ARRAY
28550: PPUSH
28551: LD_INT 3
28553: PPUSH
28554: CALL_OW 259
28558: PUSH
28559: LD_VAR 0 2
28563: PUSH
28564: LD_VAR 0 3
28568: ARRAY
28569: PPUSH
28570: CALL_OW 432
28574: MINUS
28575: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28576: LD_VAR 0 4
28580: PUSH
28581: LD_VAR 0 5
28585: PPUSH
28586: LD_INT 3
28588: PPUSH
28589: CALL_OW 259
28593: PUSH
28594: LD_VAR 0 5
28598: PPUSH
28599: CALL_OW 432
28603: MINUS
28604: GREATEREQUAL
28605: IFFALSE 28623
// mech := result [ i ] ;
28607: LD_ADDR_VAR 0 5
28611: PUSH
28612: LD_VAR 0 2
28616: PUSH
28617: LD_VAR 0 3
28621: ARRAY
28622: ST_TO_ADDR
// end ;
28623: GO 28532
28625: POP
28626: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_VAR 0 5
28636: PPUSH
28637: CALL_OW 135
// end ;
28641: LD_VAR 0 2
28645: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28646: LD_INT 0
28648: PPUSH
28649: PPUSH
28650: PPUSH
28651: PPUSH
28652: PPUSH
28653: PPUSH
28654: PPUSH
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
28660: PPUSH
// result := [ ] ;
28661: LD_ADDR_VAR 0 7
28665: PUSH
28666: EMPTY
28667: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 266
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: IN
28688: NOT
28689: IFFALSE 28693
// exit ;
28691: GO 30327
// if name then
28693: LD_VAR 0 3
28697: IFFALSE 28713
// SetBName ( base_dep , name ) ;
28699: LD_VAR 0 1
28703: PPUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: CALL_OW 500
// base := GetBase ( base_dep ) ;
28713: LD_ADDR_VAR 0 15
28717: PUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 274
28727: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28728: LD_ADDR_VAR 0 16
28732: PUSH
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 255
28742: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28743: LD_ADDR_VAR 0 17
28747: PUSH
28748: LD_VAR 0 1
28752: PPUSH
28753: CALL_OW 248
28757: ST_TO_ADDR
// if sources then
28758: LD_VAR 0 5
28762: IFFALSE 28809
// for i = 1 to 3 do
28764: LD_ADDR_VAR 0 8
28768: PUSH
28769: DOUBLE
28770: LD_INT 1
28772: DEC
28773: ST_TO_ADDR
28774: LD_INT 3
28776: PUSH
28777: FOR_TO
28778: IFFALSE 28807
// AddResourceType ( base , i , sources [ i ] ) ;
28780: LD_VAR 0 15
28784: PPUSH
28785: LD_VAR 0 8
28789: PPUSH
28790: LD_VAR 0 5
28794: PUSH
28795: LD_VAR 0 8
28799: ARRAY
28800: PPUSH
28801: CALL_OW 276
28805: GO 28777
28807: POP
28808: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28809: LD_ADDR_VAR 0 18
28813: PUSH
28814: LD_VAR 0 15
28818: PPUSH
28819: LD_VAR 0 2
28823: PPUSH
28824: LD_INT 1
28826: PPUSH
28827: CALL 28070 0 3
28831: ST_TO_ADDR
// InitHc ;
28832: CALL_OW 19
// InitUc ;
28836: CALL_OW 18
// uc_side := side ;
28840: LD_ADDR_OWVAR 20
28844: PUSH
28845: LD_VAR 0 16
28849: ST_TO_ADDR
// uc_nation := nation ;
28850: LD_ADDR_OWVAR 21
28854: PUSH
28855: LD_VAR 0 17
28859: ST_TO_ADDR
// if buildings then
28860: LD_VAR 0 18
28864: IFFALSE 30186
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28866: LD_ADDR_VAR 0 19
28870: PUSH
28871: LD_VAR 0 18
28875: PPUSH
28876: LD_INT 2
28878: PUSH
28879: LD_INT 30
28881: PUSH
28882: LD_INT 29
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 30
28891: PUSH
28892: LD_INT 30
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: PPUSH
28904: CALL_OW 72
28908: ST_TO_ADDR
// if tmp then
28909: LD_VAR 0 19
28913: IFFALSE 28961
// for i in tmp do
28915: LD_ADDR_VAR 0 8
28919: PUSH
28920: LD_VAR 0 19
28924: PUSH
28925: FOR_IN
28926: IFFALSE 28959
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28928: LD_VAR 0 8
28932: PPUSH
28933: CALL_OW 250
28937: PPUSH
28938: LD_VAR 0 8
28942: PPUSH
28943: CALL_OW 251
28947: PPUSH
28948: LD_VAR 0 16
28952: PPUSH
28953: CALL_OW 441
28957: GO 28925
28959: POP
28960: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28961: LD_VAR 0 18
28965: PPUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 30
28971: PUSH
28972: LD_INT 32
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 30
28981: PUSH
28982: LD_INT 33
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 72
28998: IFFALSE 29086
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29000: LD_ADDR_VAR 0 8
29004: PUSH
29005: LD_VAR 0 18
29009: PPUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 30
29015: PUSH
29016: LD_INT 32
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 30
29025: PUSH
29026: LD_INT 33
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: PPUSH
29038: CALL_OW 72
29042: PUSH
29043: FOR_IN
29044: IFFALSE 29084
// begin if not GetBWeapon ( i ) then
29046: LD_VAR 0 8
29050: PPUSH
29051: CALL_OW 269
29055: NOT
29056: IFFALSE 29082
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29058: LD_VAR 0 8
29062: PPUSH
29063: LD_VAR 0 8
29067: PPUSH
29068: LD_VAR 0 2
29072: PPUSH
29073: CALL 30332 0 2
29077: PPUSH
29078: CALL_OW 431
// end ;
29082: GO 29043
29084: POP
29085: POP
// end ; for i = 1 to personel do
29086: LD_ADDR_VAR 0 8
29090: PUSH
29091: DOUBLE
29092: LD_INT 1
29094: DEC
29095: ST_TO_ADDR
29096: LD_VAR 0 6
29100: PUSH
29101: FOR_TO
29102: IFFALSE 30166
// begin if i > 4 then
29104: LD_VAR 0 8
29108: PUSH
29109: LD_INT 4
29111: GREATER
29112: IFFALSE 29116
// break ;
29114: GO 30166
// case i of 1 :
29116: LD_VAR 0 8
29120: PUSH
29121: LD_INT 1
29123: DOUBLE
29124: EQUAL
29125: IFTRUE 29129
29127: GO 29209
29129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29130: LD_ADDR_VAR 0 12
29134: PUSH
29135: LD_VAR 0 18
29139: PPUSH
29140: LD_INT 22
29142: PUSH
29143: LD_VAR 0 16
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 58
29154: PUSH
29155: EMPTY
29156: LIST
29157: PUSH
29158: LD_INT 2
29160: PUSH
29161: LD_INT 30
29163: PUSH
29164: LD_INT 32
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 30
29173: PUSH
29174: LD_INT 4
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 30
29183: PUSH
29184: LD_INT 5
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: PPUSH
29202: CALL_OW 72
29206: ST_TO_ADDR
29207: GO 29431
29209: LD_INT 2
29211: DOUBLE
29212: EQUAL
29213: IFTRUE 29217
29215: GO 29279
29217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29218: LD_ADDR_VAR 0 12
29222: PUSH
29223: LD_VAR 0 18
29227: PPUSH
29228: LD_INT 22
29230: PUSH
29231: LD_VAR 0 16
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 30
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 30
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 72
29276: ST_TO_ADDR
29277: GO 29431
29279: LD_INT 3
29281: DOUBLE
29282: EQUAL
29283: IFTRUE 29287
29285: GO 29349
29287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29288: LD_ADDR_VAR 0 12
29292: PUSH
29293: LD_VAR 0 18
29297: PPUSH
29298: LD_INT 22
29300: PUSH
29301: LD_VAR 0 16
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: LD_INT 30
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 30
29325: PUSH
29326: LD_INT 3
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PPUSH
29342: CALL_OW 72
29346: ST_TO_ADDR
29347: GO 29431
29349: LD_INT 4
29351: DOUBLE
29352: EQUAL
29353: IFTRUE 29357
29355: GO 29430
29357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29358: LD_ADDR_VAR 0 12
29362: PUSH
29363: LD_VAR 0 18
29367: PPUSH
29368: LD_INT 22
29370: PUSH
29371: LD_VAR 0 16
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: LD_INT 30
29385: PUSH
29386: LD_INT 6
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 30
29395: PUSH
29396: LD_INT 7
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 30
29405: PUSH
29406: LD_INT 8
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PPUSH
29423: CALL_OW 72
29427: ST_TO_ADDR
29428: GO 29431
29430: POP
// if i = 1 then
29431: LD_VAR 0 8
29435: PUSH
29436: LD_INT 1
29438: EQUAL
29439: IFFALSE 29550
// begin tmp := [ ] ;
29441: LD_ADDR_VAR 0 19
29445: PUSH
29446: EMPTY
29447: ST_TO_ADDR
// for j in f do
29448: LD_ADDR_VAR 0 9
29452: PUSH
29453: LD_VAR 0 12
29457: PUSH
29458: FOR_IN
29459: IFFALSE 29532
// if GetBType ( j ) = b_bunker then
29461: LD_VAR 0 9
29465: PPUSH
29466: CALL_OW 266
29470: PUSH
29471: LD_INT 32
29473: EQUAL
29474: IFFALSE 29501
// tmp := Insert ( tmp , 1 , j ) else
29476: LD_ADDR_VAR 0 19
29480: PUSH
29481: LD_VAR 0 19
29485: PPUSH
29486: LD_INT 1
29488: PPUSH
29489: LD_VAR 0 9
29493: PPUSH
29494: CALL_OW 2
29498: ST_TO_ADDR
29499: GO 29530
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29501: LD_ADDR_VAR 0 19
29505: PUSH
29506: LD_VAR 0 19
29510: PPUSH
29511: LD_VAR 0 19
29515: PUSH
29516: LD_INT 1
29518: PLUS
29519: PPUSH
29520: LD_VAR 0 9
29524: PPUSH
29525: CALL_OW 2
29529: ST_TO_ADDR
29530: GO 29458
29532: POP
29533: POP
// if tmp then
29534: LD_VAR 0 19
29538: IFFALSE 29550
// f := tmp ;
29540: LD_ADDR_VAR 0 12
29544: PUSH
29545: LD_VAR 0 19
29549: ST_TO_ADDR
// end ; x := personel [ i ] ;
29550: LD_ADDR_VAR 0 13
29554: PUSH
29555: LD_VAR 0 6
29559: PUSH
29560: LD_VAR 0 8
29564: ARRAY
29565: ST_TO_ADDR
// if x = - 1 then
29566: LD_VAR 0 13
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: EQUAL
29575: IFFALSE 29784
// begin for j in f do
29577: LD_ADDR_VAR 0 9
29581: PUSH
29582: LD_VAR 0 12
29586: PUSH
29587: FOR_IN
29588: IFFALSE 29780
// repeat InitHc ;
29590: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29594: LD_VAR 0 9
29598: PPUSH
29599: CALL_OW 266
29603: PUSH
29604: LD_INT 5
29606: EQUAL
29607: IFFALSE 29677
// begin if UnitsInside ( j ) < 3 then
29609: LD_VAR 0 9
29613: PPUSH
29614: CALL_OW 313
29618: PUSH
29619: LD_INT 3
29621: LESS
29622: IFFALSE 29658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29624: LD_INT 0
29626: PPUSH
29627: LD_INT 5
29629: PUSH
29630: LD_INT 8
29632: PUSH
29633: LD_INT 9
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: PUSH
29641: LD_VAR 0 17
29645: ARRAY
29646: PPUSH
29647: LD_VAR 0 4
29651: PPUSH
29652: CALL_OW 380
29656: GO 29675
// PrepareHuman ( false , i , skill ) ;
29658: LD_INT 0
29660: PPUSH
29661: LD_VAR 0 8
29665: PPUSH
29666: LD_VAR 0 4
29670: PPUSH
29671: CALL_OW 380
// end else
29675: GO 29694
// PrepareHuman ( false , i , skill ) ;
29677: LD_INT 0
29679: PPUSH
29680: LD_VAR 0 8
29684: PPUSH
29685: LD_VAR 0 4
29689: PPUSH
29690: CALL_OW 380
// un := CreateHuman ;
29694: LD_ADDR_VAR 0 14
29698: PUSH
29699: CALL_OW 44
29703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29704: LD_ADDR_VAR 0 7
29708: PUSH
29709: LD_VAR 0 7
29713: PPUSH
29714: LD_INT 1
29716: PPUSH
29717: LD_VAR 0 14
29721: PPUSH
29722: CALL_OW 2
29726: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29727: LD_VAR 0 14
29731: PPUSH
29732: LD_VAR 0 9
29736: PPUSH
29737: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29741: LD_VAR 0 9
29745: PPUSH
29746: CALL_OW 313
29750: PUSH
29751: LD_INT 6
29753: EQUAL
29754: PUSH
29755: LD_VAR 0 9
29759: PPUSH
29760: CALL_OW 266
29764: PUSH
29765: LD_INT 32
29767: PUSH
29768: LD_INT 31
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: IN
29775: OR
29776: IFFALSE 29590
29778: GO 29587
29780: POP
29781: POP
// end else
29782: GO 30164
// for j = 1 to x do
29784: LD_ADDR_VAR 0 9
29788: PUSH
29789: DOUBLE
29790: LD_INT 1
29792: DEC
29793: ST_TO_ADDR
29794: LD_VAR 0 13
29798: PUSH
29799: FOR_TO
29800: IFFALSE 30162
// begin InitHc ;
29802: CALL_OW 19
// if not f then
29806: LD_VAR 0 12
29810: NOT
29811: IFFALSE 29900
// begin PrepareHuman ( false , i , skill ) ;
29813: LD_INT 0
29815: PPUSH
29816: LD_VAR 0 8
29820: PPUSH
29821: LD_VAR 0 4
29825: PPUSH
29826: CALL_OW 380
// un := CreateHuman ;
29830: LD_ADDR_VAR 0 14
29834: PUSH
29835: CALL_OW 44
29839: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29840: LD_ADDR_VAR 0 7
29844: PUSH
29845: LD_VAR 0 7
29849: PPUSH
29850: LD_INT 1
29852: PPUSH
29853: LD_VAR 0 14
29857: PPUSH
29858: CALL_OW 2
29862: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29863: LD_VAR 0 14
29867: PPUSH
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 250
29877: PPUSH
29878: LD_VAR 0 1
29882: PPUSH
29883: CALL_OW 251
29887: PPUSH
29888: LD_INT 10
29890: PPUSH
29891: LD_INT 0
29893: PPUSH
29894: CALL_OW 50
// continue ;
29898: GO 29799
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29900: LD_VAR 0 12
29904: PUSH
29905: LD_INT 1
29907: ARRAY
29908: PPUSH
29909: CALL_OW 313
29913: PUSH
29914: LD_VAR 0 12
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PPUSH
29923: CALL_OW 266
29927: PUSH
29928: LD_INT 32
29930: PUSH
29931: LD_INT 31
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: IN
29938: AND
29939: PUSH
29940: LD_VAR 0 12
29944: PUSH
29945: LD_INT 1
29947: ARRAY
29948: PPUSH
29949: CALL_OW 313
29953: PUSH
29954: LD_INT 6
29956: EQUAL
29957: OR
29958: IFFALSE 29978
// f := Delete ( f , 1 ) ;
29960: LD_ADDR_VAR 0 12
29964: PUSH
29965: LD_VAR 0 12
29969: PPUSH
29970: LD_INT 1
29972: PPUSH
29973: CALL_OW 3
29977: ST_TO_ADDR
// if not f then
29978: LD_VAR 0 12
29982: NOT
29983: IFFALSE 30001
// begin x := x + 2 ;
29985: LD_ADDR_VAR 0 13
29989: PUSH
29990: LD_VAR 0 13
29994: PUSH
29995: LD_INT 2
29997: PLUS
29998: ST_TO_ADDR
// continue ;
29999: GO 29799
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30001: LD_VAR 0 12
30005: PUSH
30006: LD_INT 1
30008: ARRAY
30009: PPUSH
30010: CALL_OW 266
30014: PUSH
30015: LD_INT 5
30017: EQUAL
30018: IFFALSE 30092
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30020: LD_VAR 0 12
30024: PUSH
30025: LD_INT 1
30027: ARRAY
30028: PPUSH
30029: CALL_OW 313
30033: PUSH
30034: LD_INT 3
30036: LESS
30037: IFFALSE 30073
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30039: LD_INT 0
30041: PPUSH
30042: LD_INT 5
30044: PUSH
30045: LD_INT 8
30047: PUSH
30048: LD_INT 9
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: PUSH
30056: LD_VAR 0 17
30060: ARRAY
30061: PPUSH
30062: LD_VAR 0 4
30066: PPUSH
30067: CALL_OW 380
30071: GO 30090
// PrepareHuman ( false , i , skill ) ;
30073: LD_INT 0
30075: PPUSH
30076: LD_VAR 0 8
30080: PPUSH
30081: LD_VAR 0 4
30085: PPUSH
30086: CALL_OW 380
// end else
30090: GO 30109
// PrepareHuman ( false , i , skill ) ;
30092: LD_INT 0
30094: PPUSH
30095: LD_VAR 0 8
30099: PPUSH
30100: LD_VAR 0 4
30104: PPUSH
30105: CALL_OW 380
// un := CreateHuman ;
30109: LD_ADDR_VAR 0 14
30113: PUSH
30114: CALL_OW 44
30118: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30119: LD_ADDR_VAR 0 7
30123: PUSH
30124: LD_VAR 0 7
30128: PPUSH
30129: LD_INT 1
30131: PPUSH
30132: LD_VAR 0 14
30136: PPUSH
30137: CALL_OW 2
30141: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30142: LD_VAR 0 14
30146: PPUSH
30147: LD_VAR 0 12
30151: PUSH
30152: LD_INT 1
30154: ARRAY
30155: PPUSH
30156: CALL_OW 52
// end ;
30160: GO 29799
30162: POP
30163: POP
// end ;
30164: GO 29101
30166: POP
30167: POP
// result := result ^ buildings ;
30168: LD_ADDR_VAR 0 7
30172: PUSH
30173: LD_VAR 0 7
30177: PUSH
30178: LD_VAR 0 18
30182: ADD
30183: ST_TO_ADDR
// end else
30184: GO 30327
// begin for i = 1 to personel do
30186: LD_ADDR_VAR 0 8
30190: PUSH
30191: DOUBLE
30192: LD_INT 1
30194: DEC
30195: ST_TO_ADDR
30196: LD_VAR 0 6
30200: PUSH
30201: FOR_TO
30202: IFFALSE 30325
// begin if i > 4 then
30204: LD_VAR 0 8
30208: PUSH
30209: LD_INT 4
30211: GREATER
30212: IFFALSE 30216
// break ;
30214: GO 30325
// x := personel [ i ] ;
30216: LD_ADDR_VAR 0 13
30220: PUSH
30221: LD_VAR 0 6
30225: PUSH
30226: LD_VAR 0 8
30230: ARRAY
30231: ST_TO_ADDR
// if x = - 1 then
30232: LD_VAR 0 13
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: EQUAL
30241: IFFALSE 30245
// continue ;
30243: GO 30201
// PrepareHuman ( false , i , skill ) ;
30245: LD_INT 0
30247: PPUSH
30248: LD_VAR 0 8
30252: PPUSH
30253: LD_VAR 0 4
30257: PPUSH
30258: CALL_OW 380
// un := CreateHuman ;
30262: LD_ADDR_VAR 0 14
30266: PUSH
30267: CALL_OW 44
30271: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30272: LD_VAR 0 14
30276: PPUSH
30277: LD_VAR 0 1
30281: PPUSH
30282: CALL_OW 250
30286: PPUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL_OW 251
30296: PPUSH
30297: LD_INT 10
30299: PPUSH
30300: LD_INT 0
30302: PPUSH
30303: CALL_OW 50
// result := result ^ un ;
30307: LD_ADDR_VAR 0 7
30311: PUSH
30312: LD_VAR 0 7
30316: PUSH
30317: LD_VAR 0 14
30321: ADD
30322: ST_TO_ADDR
// end ;
30323: GO 30201
30325: POP
30326: POP
// end ; end ;
30327: LD_VAR 0 7
30331: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30332: LD_INT 0
30334: PPUSH
30335: PPUSH
30336: PPUSH
30337: PPUSH
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
// result := false ;
30350: LD_ADDR_VAR 0 3
30354: PUSH
30355: LD_INT 0
30357: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30358: LD_VAR 0 1
30362: NOT
30363: PUSH
30364: LD_VAR 0 1
30368: PPUSH
30369: CALL_OW 266
30373: PUSH
30374: LD_INT 32
30376: PUSH
30377: LD_INT 33
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: IN
30384: NOT
30385: OR
30386: IFFALSE 30390
// exit ;
30388: GO 31499
// nat := GetNation ( tower ) ;
30390: LD_ADDR_VAR 0 12
30394: PUSH
30395: LD_VAR 0 1
30399: PPUSH
30400: CALL_OW 248
30404: ST_TO_ADDR
// side := GetSide ( tower ) ;
30405: LD_ADDR_VAR 0 16
30409: PUSH
30410: LD_VAR 0 1
30414: PPUSH
30415: CALL_OW 255
30419: ST_TO_ADDR
// x := GetX ( tower ) ;
30420: LD_ADDR_VAR 0 10
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 250
30434: ST_TO_ADDR
// y := GetY ( tower ) ;
30435: LD_ADDR_VAR 0 11
30439: PUSH
30440: LD_VAR 0 1
30444: PPUSH
30445: CALL_OW 251
30449: ST_TO_ADDR
// if not x or not y then
30450: LD_VAR 0 10
30454: NOT
30455: PUSH
30456: LD_VAR 0 11
30460: NOT
30461: OR
30462: IFFALSE 30466
// exit ;
30464: GO 31499
// weapon := 0 ;
30466: LD_ADDR_VAR 0 18
30470: PUSH
30471: LD_INT 0
30473: ST_TO_ADDR
// fac_list := [ ] ;
30474: LD_ADDR_VAR 0 17
30478: PUSH
30479: EMPTY
30480: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30481: LD_ADDR_VAR 0 6
30485: PUSH
30486: LD_VAR 0 1
30490: PPUSH
30491: CALL_OW 274
30495: PPUSH
30496: LD_VAR 0 2
30500: PPUSH
30501: LD_INT 0
30503: PPUSH
30504: CALL 28070 0 3
30508: PPUSH
30509: LD_INT 30
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PPUSH
30519: CALL_OW 72
30523: ST_TO_ADDR
// if not factories then
30524: LD_VAR 0 6
30528: NOT
30529: IFFALSE 30533
// exit ;
30531: GO 31499
// for i in factories do
30533: LD_ADDR_VAR 0 8
30537: PUSH
30538: LD_VAR 0 6
30542: PUSH
30543: FOR_IN
30544: IFFALSE 30569
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30546: LD_ADDR_VAR 0 17
30550: PUSH
30551: LD_VAR 0 17
30555: PUSH
30556: LD_VAR 0 8
30560: PPUSH
30561: CALL_OW 478
30565: UNION
30566: ST_TO_ADDR
30567: GO 30543
30569: POP
30570: POP
// if not fac_list then
30571: LD_VAR 0 17
30575: NOT
30576: IFFALSE 30580
// exit ;
30578: GO 31499
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30580: LD_ADDR_VAR 0 5
30584: PUSH
30585: LD_INT 4
30587: PUSH
30588: LD_INT 5
30590: PUSH
30591: LD_INT 9
30593: PUSH
30594: LD_INT 10
30596: PUSH
30597: LD_INT 6
30599: PUSH
30600: LD_INT 7
30602: PUSH
30603: LD_INT 11
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 27
30617: PUSH
30618: LD_INT 28
30620: PUSH
30621: LD_INT 26
30623: PUSH
30624: LD_INT 30
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 43
30635: PUSH
30636: LD_INT 44
30638: PUSH
30639: LD_INT 46
30641: PUSH
30642: LD_INT 45
30644: PUSH
30645: LD_INT 47
30647: PUSH
30648: LD_INT 49
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: PUSH
30664: LD_VAR 0 12
30668: ARRAY
30669: ST_TO_ADDR
// list := list isect fac_list ;
30670: LD_ADDR_VAR 0 5
30674: PUSH
30675: LD_VAR 0 5
30679: PUSH
30680: LD_VAR 0 17
30684: ISECT
30685: ST_TO_ADDR
// if not list then
30686: LD_VAR 0 5
30690: NOT
30691: IFFALSE 30695
// exit ;
30693: GO 31499
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30695: LD_VAR 0 12
30699: PUSH
30700: LD_INT 3
30702: EQUAL
30703: PUSH
30704: LD_INT 49
30706: PUSH
30707: LD_VAR 0 5
30711: IN
30712: AND
30713: PUSH
30714: LD_INT 31
30716: PPUSH
30717: LD_VAR 0 16
30721: PPUSH
30722: CALL_OW 321
30726: PUSH
30727: LD_INT 2
30729: EQUAL
30730: AND
30731: IFFALSE 30791
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30733: LD_INT 22
30735: PUSH
30736: LD_VAR 0 16
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 35
30747: PUSH
30748: LD_INT 49
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 91
30757: PUSH
30758: LD_VAR 0 1
30762: PUSH
30763: LD_INT 10
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: PPUSH
30776: CALL_OW 69
30780: NOT
30781: IFFALSE 30791
// weapon := ru_time_lapser ;
30783: LD_ADDR_VAR 0 18
30787: PUSH
30788: LD_INT 49
30790: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30791: LD_VAR 0 12
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: IN
30806: PUSH
30807: LD_INT 11
30809: PUSH
30810: LD_VAR 0 5
30814: IN
30815: PUSH
30816: LD_INT 30
30818: PUSH
30819: LD_VAR 0 5
30823: IN
30824: OR
30825: AND
30826: PUSH
30827: LD_INT 6
30829: PPUSH
30830: LD_VAR 0 16
30834: PPUSH
30835: CALL_OW 321
30839: PUSH
30840: LD_INT 2
30842: EQUAL
30843: AND
30844: IFFALSE 31009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30846: LD_INT 22
30848: PUSH
30849: LD_VAR 0 16
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 35
30863: PUSH
30864: LD_INT 11
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 35
30873: PUSH
30874: LD_INT 30
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 91
30888: PUSH
30889: LD_VAR 0 1
30893: PUSH
30894: LD_INT 18
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: PPUSH
30907: CALL_OW 69
30911: NOT
30912: PUSH
30913: LD_INT 22
30915: PUSH
30916: LD_VAR 0 16
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: PUSH
30928: LD_INT 30
30930: PUSH
30931: LD_INT 32
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 30
30940: PUSH
30941: LD_INT 33
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 91
30955: PUSH
30956: LD_VAR 0 1
30960: PUSH
30961: LD_INT 12
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: PPUSH
30977: CALL_OW 69
30981: PUSH
30982: LD_INT 2
30984: GREATER
30985: AND
30986: IFFALSE 31009
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30988: LD_ADDR_VAR 0 18
30992: PUSH
30993: LD_INT 11
30995: PUSH
30996: LD_INT 30
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_VAR 0 12
31007: ARRAY
31008: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31009: LD_VAR 0 18
31013: NOT
31014: PUSH
31015: LD_INT 40
31017: PPUSH
31018: LD_VAR 0 16
31022: PPUSH
31023: CALL_OW 321
31027: PUSH
31028: LD_INT 2
31030: EQUAL
31031: AND
31032: PUSH
31033: LD_INT 7
31035: PUSH
31036: LD_VAR 0 5
31040: IN
31041: PUSH
31042: LD_INT 28
31044: PUSH
31045: LD_VAR 0 5
31049: IN
31050: OR
31051: PUSH
31052: LD_INT 45
31054: PUSH
31055: LD_VAR 0 5
31059: IN
31060: OR
31061: AND
31062: IFFALSE 31316
// begin hex := GetHexInfo ( x , y ) ;
31064: LD_ADDR_VAR 0 4
31068: PUSH
31069: LD_VAR 0 10
31073: PPUSH
31074: LD_VAR 0 11
31078: PPUSH
31079: CALL_OW 546
31083: ST_TO_ADDR
// if hex [ 1 ] then
31084: LD_VAR 0 4
31088: PUSH
31089: LD_INT 1
31091: ARRAY
31092: IFFALSE 31096
// exit ;
31094: GO 31499
// height := hex [ 2 ] ;
31096: LD_ADDR_VAR 0 15
31100: PUSH
31101: LD_VAR 0 4
31105: PUSH
31106: LD_INT 2
31108: ARRAY
31109: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31110: LD_ADDR_VAR 0 14
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: LD_INT 3
31123: PUSH
31124: LD_INT 5
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: ST_TO_ADDR
// for i in tmp do
31133: LD_ADDR_VAR 0 8
31137: PUSH
31138: LD_VAR 0 14
31142: PUSH
31143: FOR_IN
31144: IFFALSE 31314
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31146: LD_ADDR_VAR 0 9
31150: PUSH
31151: LD_VAR 0 10
31155: PPUSH
31156: LD_VAR 0 8
31160: PPUSH
31161: LD_INT 5
31163: PPUSH
31164: CALL_OW 272
31168: PUSH
31169: LD_VAR 0 11
31173: PPUSH
31174: LD_VAR 0 8
31178: PPUSH
31179: LD_INT 5
31181: PPUSH
31182: CALL_OW 273
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31191: LD_VAR 0 9
31195: PUSH
31196: LD_INT 1
31198: ARRAY
31199: PPUSH
31200: LD_VAR 0 9
31204: PUSH
31205: LD_INT 2
31207: ARRAY
31208: PPUSH
31209: CALL_OW 488
31213: IFFALSE 31312
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31215: LD_ADDR_VAR 0 4
31219: PUSH
31220: LD_VAR 0 9
31224: PUSH
31225: LD_INT 1
31227: ARRAY
31228: PPUSH
31229: LD_VAR 0 9
31233: PUSH
31234: LD_INT 2
31236: ARRAY
31237: PPUSH
31238: CALL_OW 546
31242: ST_TO_ADDR
// if hex [ 1 ] then
31243: LD_VAR 0 4
31247: PUSH
31248: LD_INT 1
31250: ARRAY
31251: IFFALSE 31255
// continue ;
31253: GO 31143
// h := hex [ 2 ] ;
31255: LD_ADDR_VAR 0 13
31259: PUSH
31260: LD_VAR 0 4
31264: PUSH
31265: LD_INT 2
31267: ARRAY
31268: ST_TO_ADDR
// if h + 7 < height then
31269: LD_VAR 0 13
31273: PUSH
31274: LD_INT 7
31276: PLUS
31277: PUSH
31278: LD_VAR 0 15
31282: LESS
31283: IFFALSE 31312
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31285: LD_ADDR_VAR 0 18
31289: PUSH
31290: LD_INT 7
31292: PUSH
31293: LD_INT 28
31295: PUSH
31296: LD_INT 45
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PUSH
31304: LD_VAR 0 12
31308: ARRAY
31309: ST_TO_ADDR
// break ;
31310: GO 31314
// end ; end ; end ;
31312: GO 31143
31314: POP
31315: POP
// end ; if not weapon then
31316: LD_VAR 0 18
31320: NOT
31321: IFFALSE 31381
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31323: LD_ADDR_VAR 0 5
31327: PUSH
31328: LD_VAR 0 5
31332: PUSH
31333: LD_INT 11
31335: PUSH
31336: LD_INT 30
31338: PUSH
31339: LD_INT 49
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: DIFF
31347: ST_TO_ADDR
// if not list then
31348: LD_VAR 0 5
31352: NOT
31353: IFFALSE 31357
// exit ;
31355: GO 31499
// weapon := list [ rand ( 1 , list ) ] ;
31357: LD_ADDR_VAR 0 18
31361: PUSH
31362: LD_VAR 0 5
31366: PUSH
31367: LD_INT 1
31369: PPUSH
31370: LD_VAR 0 5
31374: PPUSH
31375: CALL_OW 12
31379: ARRAY
31380: ST_TO_ADDR
// end ; if weapon then
31381: LD_VAR 0 18
31385: IFFALSE 31499
// begin tmp := CostOfWeapon ( weapon ) ;
31387: LD_ADDR_VAR 0 14
31391: PUSH
31392: LD_VAR 0 18
31396: PPUSH
31397: CALL_OW 451
31401: ST_TO_ADDR
// j := GetBase ( tower ) ;
31402: LD_ADDR_VAR 0 9
31406: PUSH
31407: LD_VAR 0 1
31411: PPUSH
31412: CALL_OW 274
31416: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31417: LD_VAR 0 9
31421: PPUSH
31422: LD_INT 1
31424: PPUSH
31425: CALL_OW 275
31429: PUSH
31430: LD_VAR 0 14
31434: PUSH
31435: LD_INT 1
31437: ARRAY
31438: GREATEREQUAL
31439: PUSH
31440: LD_VAR 0 9
31444: PPUSH
31445: LD_INT 2
31447: PPUSH
31448: CALL_OW 275
31452: PUSH
31453: LD_VAR 0 14
31457: PUSH
31458: LD_INT 2
31460: ARRAY
31461: GREATEREQUAL
31462: AND
31463: PUSH
31464: LD_VAR 0 9
31468: PPUSH
31469: LD_INT 3
31471: PPUSH
31472: CALL_OW 275
31476: PUSH
31477: LD_VAR 0 14
31481: PUSH
31482: LD_INT 3
31484: ARRAY
31485: GREATEREQUAL
31486: AND
31487: IFFALSE 31499
// result := weapon ;
31489: LD_ADDR_VAR 0 3
31493: PUSH
31494: LD_VAR 0 18
31498: ST_TO_ADDR
// end ; end ;
31499: LD_VAR 0 3
31503: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
// result := true ;
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: LD_INT 1
31515: ST_TO_ADDR
// if array1 = array2 then
31516: LD_VAR 0 1
31520: PUSH
31521: LD_VAR 0 2
31525: EQUAL
31526: IFFALSE 31586
// begin for i = 1 to array1 do
31528: LD_ADDR_VAR 0 4
31532: PUSH
31533: DOUBLE
31534: LD_INT 1
31536: DEC
31537: ST_TO_ADDR
31538: LD_VAR 0 1
31542: PUSH
31543: FOR_TO
31544: IFFALSE 31582
// if array1 [ i ] <> array2 [ i ] then
31546: LD_VAR 0 1
31550: PUSH
31551: LD_VAR 0 4
31555: ARRAY
31556: PUSH
31557: LD_VAR 0 2
31561: PUSH
31562: LD_VAR 0 4
31566: ARRAY
31567: NONEQUAL
31568: IFFALSE 31580
// begin result := false ;
31570: LD_ADDR_VAR 0 3
31574: PUSH
31575: LD_INT 0
31577: ST_TO_ADDR
// break ;
31578: GO 31582
// end ;
31580: GO 31543
31582: POP
31583: POP
// end else
31584: GO 31594
// result := false ;
31586: LD_ADDR_VAR 0 3
31590: PUSH
31591: LD_INT 0
31593: ST_TO_ADDR
// end ;
31594: LD_VAR 0 3
31598: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31599: LD_INT 0
31601: PPUSH
31602: PPUSH
// if not array1 or not array2 then
31603: LD_VAR 0 1
31607: NOT
31608: PUSH
31609: LD_VAR 0 2
31613: NOT
31614: OR
31615: IFFALSE 31619
// exit ;
31617: GO 31683
// result := true ;
31619: LD_ADDR_VAR 0 3
31623: PUSH
31624: LD_INT 1
31626: ST_TO_ADDR
// for i = 1 to array1 do
31627: LD_ADDR_VAR 0 4
31631: PUSH
31632: DOUBLE
31633: LD_INT 1
31635: DEC
31636: ST_TO_ADDR
31637: LD_VAR 0 1
31641: PUSH
31642: FOR_TO
31643: IFFALSE 31681
// if array1 [ i ] <> array2 [ i ] then
31645: LD_VAR 0 1
31649: PUSH
31650: LD_VAR 0 4
31654: ARRAY
31655: PUSH
31656: LD_VAR 0 2
31660: PUSH
31661: LD_VAR 0 4
31665: ARRAY
31666: NONEQUAL
31667: IFFALSE 31679
// begin result := false ;
31669: LD_ADDR_VAR 0 3
31673: PUSH
31674: LD_INT 0
31676: ST_TO_ADDR
// break ;
31677: GO 31681
// end ;
31679: GO 31642
31681: POP
31682: POP
// end ;
31683: LD_VAR 0 3
31687: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31688: LD_INT 0
31690: PPUSH
31691: PPUSH
31692: PPUSH
// pom := GetBase ( fac ) ;
31693: LD_ADDR_VAR 0 5
31697: PUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL_OW 274
31707: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31708: LD_ADDR_VAR 0 4
31712: PUSH
31713: LD_VAR 0 2
31717: PUSH
31718: LD_INT 1
31720: ARRAY
31721: PPUSH
31722: LD_VAR 0 2
31726: PUSH
31727: LD_INT 2
31729: ARRAY
31730: PPUSH
31731: LD_VAR 0 2
31735: PUSH
31736: LD_INT 3
31738: ARRAY
31739: PPUSH
31740: LD_VAR 0 2
31744: PUSH
31745: LD_INT 4
31747: ARRAY
31748: PPUSH
31749: CALL_OW 449
31753: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31754: LD_ADDR_VAR 0 3
31758: PUSH
31759: LD_VAR 0 5
31763: PPUSH
31764: LD_INT 1
31766: PPUSH
31767: CALL_OW 275
31771: PUSH
31772: LD_VAR 0 4
31776: PUSH
31777: LD_INT 1
31779: ARRAY
31780: GREATEREQUAL
31781: PUSH
31782: LD_VAR 0 5
31786: PPUSH
31787: LD_INT 2
31789: PPUSH
31790: CALL_OW 275
31794: PUSH
31795: LD_VAR 0 4
31799: PUSH
31800: LD_INT 2
31802: ARRAY
31803: GREATEREQUAL
31804: AND
31805: PUSH
31806: LD_VAR 0 5
31810: PPUSH
31811: LD_INT 3
31813: PPUSH
31814: CALL_OW 275
31818: PUSH
31819: LD_VAR 0 4
31823: PUSH
31824: LD_INT 3
31826: ARRAY
31827: GREATEREQUAL
31828: AND
31829: ST_TO_ADDR
// end ;
31830: LD_VAR 0 3
31834: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31835: LD_INT 0
31837: PPUSH
31838: PPUSH
31839: PPUSH
31840: PPUSH
// pom := GetBase ( building ) ;
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_VAR 0 1
31850: PPUSH
31851: CALL_OW 274
31855: ST_TO_ADDR
// if not pom then
31856: LD_VAR 0 3
31860: NOT
31861: IFFALSE 31865
// exit ;
31863: GO 32035
// btype := GetBType ( building ) ;
31865: LD_ADDR_VAR 0 5
31869: PUSH
31870: LD_VAR 0 1
31874: PPUSH
31875: CALL_OW 266
31879: ST_TO_ADDR
// if btype = b_armoury then
31880: LD_VAR 0 5
31884: PUSH
31885: LD_INT 4
31887: EQUAL
31888: IFFALSE 31898
// btype := b_barracks ;
31890: LD_ADDR_VAR 0 5
31894: PUSH
31895: LD_INT 5
31897: ST_TO_ADDR
// if btype = b_depot then
31898: LD_VAR 0 5
31902: PUSH
31903: LD_INT 0
31905: EQUAL
31906: IFFALSE 31916
// btype := b_warehouse ;
31908: LD_ADDR_VAR 0 5
31912: PUSH
31913: LD_INT 1
31915: ST_TO_ADDR
// if btype = b_workshop then
31916: LD_VAR 0 5
31920: PUSH
31921: LD_INT 2
31923: EQUAL
31924: IFFALSE 31934
// btype := b_factory ;
31926: LD_ADDR_VAR 0 5
31930: PUSH
31931: LD_INT 3
31933: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31934: LD_ADDR_VAR 0 4
31938: PUSH
31939: LD_VAR 0 5
31943: PPUSH
31944: LD_VAR 0 1
31948: PPUSH
31949: CALL_OW 248
31953: PPUSH
31954: CALL_OW 450
31958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31959: LD_ADDR_VAR 0 2
31963: PUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: LD_INT 1
31971: PPUSH
31972: CALL_OW 275
31976: PUSH
31977: LD_VAR 0 4
31981: PUSH
31982: LD_INT 1
31984: ARRAY
31985: GREATEREQUAL
31986: PUSH
31987: LD_VAR 0 3
31991: PPUSH
31992: LD_INT 2
31994: PPUSH
31995: CALL_OW 275
31999: PUSH
32000: LD_VAR 0 4
32004: PUSH
32005: LD_INT 2
32007: ARRAY
32008: GREATEREQUAL
32009: AND
32010: PUSH
32011: LD_VAR 0 3
32015: PPUSH
32016: LD_INT 3
32018: PPUSH
32019: CALL_OW 275
32023: PUSH
32024: LD_VAR 0 4
32028: PUSH
32029: LD_INT 3
32031: ARRAY
32032: GREATEREQUAL
32033: AND
32034: ST_TO_ADDR
// end ;
32035: LD_VAR 0 2
32039: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
32044: PPUSH
// pom := GetBase ( building ) ;
32045: LD_ADDR_VAR 0 4
32049: PUSH
32050: LD_VAR 0 1
32054: PPUSH
32055: CALL_OW 274
32059: ST_TO_ADDR
// if not pom then
32060: LD_VAR 0 4
32064: NOT
32065: IFFALSE 32069
// exit ;
32067: GO 32170
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32069: LD_ADDR_VAR 0 5
32073: PUSH
32074: LD_VAR 0 2
32078: PPUSH
32079: LD_VAR 0 1
32083: PPUSH
32084: CALL_OW 248
32088: PPUSH
32089: CALL_OW 450
32093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_VAR 0 4
32103: PPUSH
32104: LD_INT 1
32106: PPUSH
32107: CALL_OW 275
32111: PUSH
32112: LD_VAR 0 5
32116: PUSH
32117: LD_INT 1
32119: ARRAY
32120: GREATEREQUAL
32121: PUSH
32122: LD_VAR 0 4
32126: PPUSH
32127: LD_INT 2
32129: PPUSH
32130: CALL_OW 275
32134: PUSH
32135: LD_VAR 0 5
32139: PUSH
32140: LD_INT 2
32142: ARRAY
32143: GREATEREQUAL
32144: AND
32145: PUSH
32146: LD_VAR 0 4
32150: PPUSH
32151: LD_INT 3
32153: PPUSH
32154: CALL_OW 275
32158: PUSH
32159: LD_VAR 0 5
32163: PUSH
32164: LD_INT 3
32166: ARRAY
32167: GREATEREQUAL
32168: AND
32169: ST_TO_ADDR
// end ;
32170: LD_VAR 0 3
32174: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32175: LD_INT 0
32177: PPUSH
32178: PPUSH
32179: PPUSH
32180: PPUSH
32181: PPUSH
32182: PPUSH
32183: PPUSH
32184: PPUSH
32185: PPUSH
32186: PPUSH
32187: PPUSH
// result := false ;
32188: LD_ADDR_VAR 0 8
32192: PUSH
32193: LD_INT 0
32195: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32196: LD_VAR 0 5
32200: NOT
32201: PUSH
32202: LD_VAR 0 1
32206: NOT
32207: OR
32208: PUSH
32209: LD_VAR 0 2
32213: NOT
32214: OR
32215: PUSH
32216: LD_VAR 0 3
32220: NOT
32221: OR
32222: IFFALSE 32226
// exit ;
32224: GO 33040
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32226: LD_ADDR_VAR 0 14
32230: PUSH
32231: LD_VAR 0 1
32235: PPUSH
32236: LD_VAR 0 2
32240: PPUSH
32241: LD_VAR 0 3
32245: PPUSH
32246: LD_VAR 0 4
32250: PPUSH
32251: LD_VAR 0 5
32255: PUSH
32256: LD_INT 1
32258: ARRAY
32259: PPUSH
32260: CALL_OW 248
32264: PPUSH
32265: LD_INT 0
32267: PPUSH
32268: CALL 34273 0 6
32272: ST_TO_ADDR
// if not hexes then
32273: LD_VAR 0 14
32277: NOT
32278: IFFALSE 32282
// exit ;
32280: GO 33040
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32282: LD_ADDR_VAR 0 17
32286: PUSH
32287: LD_VAR 0 5
32291: PPUSH
32292: LD_INT 22
32294: PUSH
32295: LD_VAR 0 13
32299: PPUSH
32300: CALL_OW 255
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 30
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 30
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PPUSH
32341: CALL_OW 72
32345: ST_TO_ADDR
// for i = 1 to hexes do
32346: LD_ADDR_VAR 0 9
32350: PUSH
32351: DOUBLE
32352: LD_INT 1
32354: DEC
32355: ST_TO_ADDR
32356: LD_VAR 0 14
32360: PUSH
32361: FOR_TO
32362: IFFALSE 33038
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32364: LD_ADDR_VAR 0 13
32368: PUSH
32369: LD_VAR 0 14
32373: PUSH
32374: LD_VAR 0 9
32378: ARRAY
32379: PUSH
32380: LD_INT 1
32382: ARRAY
32383: PPUSH
32384: LD_VAR 0 14
32388: PUSH
32389: LD_VAR 0 9
32393: ARRAY
32394: PUSH
32395: LD_INT 2
32397: ARRAY
32398: PPUSH
32399: CALL_OW 428
32403: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32404: LD_VAR 0 14
32408: PUSH
32409: LD_VAR 0 9
32413: ARRAY
32414: PUSH
32415: LD_INT 1
32417: ARRAY
32418: PPUSH
32419: LD_VAR 0 14
32423: PUSH
32424: LD_VAR 0 9
32428: ARRAY
32429: PUSH
32430: LD_INT 2
32432: ARRAY
32433: PPUSH
32434: CALL_OW 351
32438: PUSH
32439: LD_VAR 0 14
32443: PUSH
32444: LD_VAR 0 9
32448: ARRAY
32449: PUSH
32450: LD_INT 1
32452: ARRAY
32453: PPUSH
32454: LD_VAR 0 14
32458: PUSH
32459: LD_VAR 0 9
32463: ARRAY
32464: PUSH
32465: LD_INT 2
32467: ARRAY
32468: PPUSH
32469: CALL_OW 488
32473: NOT
32474: OR
32475: PUSH
32476: LD_VAR 0 13
32480: PPUSH
32481: CALL_OW 247
32485: PUSH
32486: LD_INT 3
32488: EQUAL
32489: OR
32490: IFFALSE 32496
// exit ;
32492: POP
32493: POP
32494: GO 33040
// if not tmp then
32496: LD_VAR 0 13
32500: NOT
32501: IFFALSE 32505
// continue ;
32503: GO 32361
// result := true ;
32505: LD_ADDR_VAR 0 8
32509: PUSH
32510: LD_INT 1
32512: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32513: LD_VAR 0 6
32517: PUSH
32518: LD_VAR 0 13
32522: PPUSH
32523: CALL_OW 247
32527: PUSH
32528: LD_INT 2
32530: EQUAL
32531: AND
32532: PUSH
32533: LD_VAR 0 13
32537: PPUSH
32538: CALL_OW 263
32542: PUSH
32543: LD_INT 1
32545: EQUAL
32546: AND
32547: IFFALSE 32711
// begin if IsDrivenBy ( tmp ) then
32549: LD_VAR 0 13
32553: PPUSH
32554: CALL_OW 311
32558: IFFALSE 32562
// continue ;
32560: GO 32361
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32562: LD_VAR 0 6
32566: PPUSH
32567: LD_INT 3
32569: PUSH
32570: LD_INT 60
32572: PUSH
32573: EMPTY
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: LD_INT 55
32585: PUSH
32586: EMPTY
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PPUSH
32597: CALL_OW 72
32601: IFFALSE 32709
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32603: LD_ADDR_VAR 0 18
32607: PUSH
32608: LD_VAR 0 6
32612: PPUSH
32613: LD_INT 3
32615: PUSH
32616: LD_INT 60
32618: PUSH
32619: EMPTY
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: LD_INT 55
32631: PUSH
32632: EMPTY
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PPUSH
32643: CALL_OW 72
32647: PUSH
32648: LD_INT 1
32650: ARRAY
32651: ST_TO_ADDR
// if IsInUnit ( driver ) then
32652: LD_VAR 0 18
32656: PPUSH
32657: CALL_OW 310
32661: IFFALSE 32672
// ComExit ( driver ) ;
32663: LD_VAR 0 18
32667: PPUSH
32668: CALL 58052 0 1
// AddComEnterUnit ( driver , tmp ) ;
32672: LD_VAR 0 18
32676: PPUSH
32677: LD_VAR 0 13
32681: PPUSH
32682: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32686: LD_VAR 0 18
32690: PPUSH
32691: LD_VAR 0 7
32695: PPUSH
32696: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32700: LD_VAR 0 18
32704: PPUSH
32705: CALL_OW 181
// end ; continue ;
32709: GO 32361
// end ; if not cleaners or not tmp in cleaners then
32711: LD_VAR 0 6
32715: NOT
32716: PUSH
32717: LD_VAR 0 13
32721: PUSH
32722: LD_VAR 0 6
32726: IN
32727: NOT
32728: OR
32729: IFFALSE 33036
// begin if dep then
32731: LD_VAR 0 17
32735: IFFALSE 32871
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32737: LD_ADDR_VAR 0 16
32741: PUSH
32742: LD_VAR 0 17
32746: PUSH
32747: LD_INT 1
32749: ARRAY
32750: PPUSH
32751: CALL_OW 250
32755: PPUSH
32756: LD_VAR 0 17
32760: PUSH
32761: LD_INT 1
32763: ARRAY
32764: PPUSH
32765: CALL_OW 254
32769: PPUSH
32770: LD_INT 5
32772: PPUSH
32773: CALL_OW 272
32777: PUSH
32778: LD_VAR 0 17
32782: PUSH
32783: LD_INT 1
32785: ARRAY
32786: PPUSH
32787: CALL_OW 251
32791: PPUSH
32792: LD_VAR 0 17
32796: PUSH
32797: LD_INT 1
32799: ARRAY
32800: PPUSH
32801: CALL_OW 254
32805: PPUSH
32806: LD_INT 5
32808: PPUSH
32809: CALL_OW 273
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32818: LD_VAR 0 16
32822: PUSH
32823: LD_INT 1
32825: ARRAY
32826: PPUSH
32827: LD_VAR 0 16
32831: PUSH
32832: LD_INT 2
32834: ARRAY
32835: PPUSH
32836: CALL_OW 488
32840: IFFALSE 32871
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32842: LD_VAR 0 13
32846: PPUSH
32847: LD_VAR 0 16
32851: PUSH
32852: LD_INT 1
32854: ARRAY
32855: PPUSH
32856: LD_VAR 0 16
32860: PUSH
32861: LD_INT 2
32863: ARRAY
32864: PPUSH
32865: CALL_OW 111
// continue ;
32869: GO 32361
// end ; end ; r := GetDir ( tmp ) ;
32871: LD_ADDR_VAR 0 15
32875: PUSH
32876: LD_VAR 0 13
32880: PPUSH
32881: CALL_OW 254
32885: ST_TO_ADDR
// if r = 5 then
32886: LD_VAR 0 15
32890: PUSH
32891: LD_INT 5
32893: EQUAL
32894: IFFALSE 32904
// r := 0 ;
32896: LD_ADDR_VAR 0 15
32900: PUSH
32901: LD_INT 0
32903: ST_TO_ADDR
// for j = r to 5 do
32904: LD_ADDR_VAR 0 10
32908: PUSH
32909: DOUBLE
32910: LD_VAR 0 15
32914: DEC
32915: ST_TO_ADDR
32916: LD_INT 5
32918: PUSH
32919: FOR_TO
32920: IFFALSE 33034
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32922: LD_ADDR_VAR 0 11
32926: PUSH
32927: LD_VAR 0 13
32931: PPUSH
32932: CALL_OW 250
32936: PPUSH
32937: LD_VAR 0 10
32941: PPUSH
32942: LD_INT 2
32944: PPUSH
32945: CALL_OW 272
32949: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32950: LD_ADDR_VAR 0 12
32954: PUSH
32955: LD_VAR 0 13
32959: PPUSH
32960: CALL_OW 251
32964: PPUSH
32965: LD_VAR 0 10
32969: PPUSH
32970: LD_INT 2
32972: PPUSH
32973: CALL_OW 273
32977: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32978: LD_VAR 0 11
32982: PPUSH
32983: LD_VAR 0 12
32987: PPUSH
32988: CALL_OW 488
32992: PUSH
32993: LD_VAR 0 11
32997: PPUSH
32998: LD_VAR 0 12
33002: PPUSH
33003: CALL_OW 428
33007: NOT
33008: AND
33009: IFFALSE 33032
// begin ComMoveXY ( tmp , _x , _y ) ;
33011: LD_VAR 0 13
33015: PPUSH
33016: LD_VAR 0 11
33020: PPUSH
33021: LD_VAR 0 12
33025: PPUSH
33026: CALL_OW 111
// break ;
33030: GO 33034
// end ; end ;
33032: GO 32919
33034: POP
33035: POP
// end ; end ;
33036: GO 32361
33038: POP
33039: POP
// end ;
33040: LD_VAR 0 8
33044: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33045: LD_INT 0
33047: PPUSH
// result := true ;
33048: LD_ADDR_VAR 0 3
33052: PUSH
33053: LD_INT 1
33055: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33056: LD_VAR 0 2
33060: PUSH
33061: LD_INT 24
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33075
33067: LD_INT 33
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33100
33075: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: LD_INT 32
33083: PPUSH
33084: LD_VAR 0 1
33088: PPUSH
33089: CALL_OW 321
33093: PUSH
33094: LD_INT 2
33096: EQUAL
33097: ST_TO_ADDR
33098: GO 33416
33100: LD_INT 20
33102: DOUBLE
33103: EQUAL
33104: IFTRUE 33108
33106: GO 33133
33108: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_INT 6
33116: PPUSH
33117: LD_VAR 0 1
33121: PPUSH
33122: CALL_OW 321
33126: PUSH
33127: LD_INT 2
33129: EQUAL
33130: ST_TO_ADDR
33131: GO 33416
33133: LD_INT 22
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33147
33139: LD_INT 36
33141: DOUBLE
33142: EQUAL
33143: IFTRUE 33147
33145: GO 33172
33147: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33148: LD_ADDR_VAR 0 3
33152: PUSH
33153: LD_INT 15
33155: PPUSH
33156: LD_VAR 0 1
33160: PPUSH
33161: CALL_OW 321
33165: PUSH
33166: LD_INT 2
33168: EQUAL
33169: ST_TO_ADDR
33170: GO 33416
33172: LD_INT 30
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33205
33180: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_INT 20
33188: PPUSH
33189: LD_VAR 0 1
33193: PPUSH
33194: CALL_OW 321
33198: PUSH
33199: LD_INT 2
33201: EQUAL
33202: ST_TO_ADDR
33203: GO 33416
33205: LD_INT 28
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33219
33211: LD_INT 21
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33244
33219: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_INT 21
33227: PPUSH
33228: LD_VAR 0 1
33232: PPUSH
33233: CALL_OW 321
33237: PUSH
33238: LD_INT 2
33240: EQUAL
33241: ST_TO_ADDR
33242: GO 33416
33244: LD_INT 16
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33252
33250: GO 33277
33252: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_INT 84
33260: PPUSH
33261: LD_VAR 0 1
33265: PPUSH
33266: CALL_OW 321
33270: PUSH
33271: LD_INT 2
33273: EQUAL
33274: ST_TO_ADDR
33275: GO 33416
33277: LD_INT 19
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33291
33283: LD_INT 23
33285: DOUBLE
33286: EQUAL
33287: IFTRUE 33291
33289: GO 33316
33291: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33292: LD_ADDR_VAR 0 3
33296: PUSH
33297: LD_INT 83
33299: PPUSH
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 321
33309: PUSH
33310: LD_INT 2
33312: EQUAL
33313: ST_TO_ADDR
33314: GO 33416
33316: LD_INT 17
33318: DOUBLE
33319: EQUAL
33320: IFTRUE 33324
33322: GO 33349
33324: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33325: LD_ADDR_VAR 0 3
33329: PUSH
33330: LD_INT 39
33332: PPUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 321
33342: PUSH
33343: LD_INT 2
33345: EQUAL
33346: ST_TO_ADDR
33347: GO 33416
33349: LD_INT 18
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33382
33357: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 40
33365: PPUSH
33366: LD_VAR 0 1
33370: PPUSH
33371: CALL_OW 321
33375: PUSH
33376: LD_INT 2
33378: EQUAL
33379: ST_TO_ADDR
33380: GO 33416
33382: LD_INT 27
33384: DOUBLE
33385: EQUAL
33386: IFTRUE 33390
33388: GO 33415
33390: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_INT 35
33398: PPUSH
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL_OW 321
33408: PUSH
33409: LD_INT 2
33411: EQUAL
33412: ST_TO_ADDR
33413: GO 33416
33415: POP
// end ;
33416: LD_VAR 0 3
33420: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33421: LD_INT 0
33423: PPUSH
33424: PPUSH
33425: PPUSH
33426: PPUSH
33427: PPUSH
33428: PPUSH
33429: PPUSH
33430: PPUSH
33431: PPUSH
33432: PPUSH
33433: PPUSH
// result := false ;
33434: LD_ADDR_VAR 0 6
33438: PUSH
33439: LD_INT 0
33441: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33442: LD_VAR 0 1
33446: NOT
33447: PUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 266
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: IN
33468: NOT
33469: OR
33470: PUSH
33471: LD_VAR 0 2
33475: NOT
33476: OR
33477: PUSH
33478: LD_VAR 0 5
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 4
33497: PUSH
33498: LD_INT 5
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: IN
33509: NOT
33510: OR
33511: PUSH
33512: LD_VAR 0 3
33516: PPUSH
33517: LD_VAR 0 4
33521: PPUSH
33522: CALL_OW 488
33526: NOT
33527: OR
33528: IFFALSE 33532
// exit ;
33530: GO 34268
// side := GetSide ( depot ) ;
33532: LD_ADDR_VAR 0 9
33536: PUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 255
33546: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33547: LD_VAR 0 9
33551: PPUSH
33552: LD_VAR 0 2
33556: PPUSH
33557: CALL 33045 0 2
33561: NOT
33562: IFFALSE 33566
// exit ;
33564: GO 34268
// pom := GetBase ( depot ) ;
33566: LD_ADDR_VAR 0 10
33570: PUSH
33571: LD_VAR 0 1
33575: PPUSH
33576: CALL_OW 274
33580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33581: LD_ADDR_VAR 0 11
33585: PUSH
33586: LD_VAR 0 2
33590: PPUSH
33591: LD_VAR 0 1
33595: PPUSH
33596: CALL_OW 248
33600: PPUSH
33601: CALL_OW 450
33605: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33606: LD_VAR 0 10
33610: PPUSH
33611: LD_INT 1
33613: PPUSH
33614: CALL_OW 275
33618: PUSH
33619: LD_VAR 0 11
33623: PUSH
33624: LD_INT 1
33626: ARRAY
33627: GREATEREQUAL
33628: PUSH
33629: LD_VAR 0 10
33633: PPUSH
33634: LD_INT 2
33636: PPUSH
33637: CALL_OW 275
33641: PUSH
33642: LD_VAR 0 11
33646: PUSH
33647: LD_INT 2
33649: ARRAY
33650: GREATEREQUAL
33651: AND
33652: PUSH
33653: LD_VAR 0 10
33657: PPUSH
33658: LD_INT 3
33660: PPUSH
33661: CALL_OW 275
33665: PUSH
33666: LD_VAR 0 11
33670: PUSH
33671: LD_INT 3
33673: ARRAY
33674: GREATEREQUAL
33675: AND
33676: NOT
33677: IFFALSE 33681
// exit ;
33679: GO 34268
// if GetBType ( depot ) = b_depot then
33681: LD_VAR 0 1
33685: PPUSH
33686: CALL_OW 266
33690: PUSH
33691: LD_INT 0
33693: EQUAL
33694: IFFALSE 33706
// dist := 28 else
33696: LD_ADDR_VAR 0 14
33700: PUSH
33701: LD_INT 28
33703: ST_TO_ADDR
33704: GO 33714
// dist := 36 ;
33706: LD_ADDR_VAR 0 14
33710: PUSH
33711: LD_INT 36
33713: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33714: LD_VAR 0 1
33718: PPUSH
33719: LD_VAR 0 3
33723: PPUSH
33724: LD_VAR 0 4
33728: PPUSH
33729: CALL_OW 297
33733: PUSH
33734: LD_VAR 0 14
33738: GREATER
33739: IFFALSE 33743
// exit ;
33741: GO 34268
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33743: LD_ADDR_VAR 0 12
33747: PUSH
33748: LD_VAR 0 2
33752: PPUSH
33753: LD_VAR 0 3
33757: PPUSH
33758: LD_VAR 0 4
33762: PPUSH
33763: LD_VAR 0 5
33767: PPUSH
33768: LD_VAR 0 1
33772: PPUSH
33773: CALL_OW 248
33777: PPUSH
33778: LD_INT 0
33780: PPUSH
33781: CALL 34273 0 6
33785: ST_TO_ADDR
// if not hexes then
33786: LD_VAR 0 12
33790: NOT
33791: IFFALSE 33795
// exit ;
33793: GO 34268
// hex := GetHexInfo ( x , y ) ;
33795: LD_ADDR_VAR 0 15
33799: PUSH
33800: LD_VAR 0 3
33804: PPUSH
33805: LD_VAR 0 4
33809: PPUSH
33810: CALL_OW 546
33814: ST_TO_ADDR
// if hex [ 1 ] then
33815: LD_VAR 0 15
33819: PUSH
33820: LD_INT 1
33822: ARRAY
33823: IFFALSE 33827
// exit ;
33825: GO 34268
// height := hex [ 2 ] ;
33827: LD_ADDR_VAR 0 13
33831: PUSH
33832: LD_VAR 0 15
33836: PUSH
33837: LD_INT 2
33839: ARRAY
33840: ST_TO_ADDR
// for i = 1 to hexes do
33841: LD_ADDR_VAR 0 7
33845: PUSH
33846: DOUBLE
33847: LD_INT 1
33849: DEC
33850: ST_TO_ADDR
33851: LD_VAR 0 12
33855: PUSH
33856: FOR_TO
33857: IFFALSE 34187
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33859: LD_VAR 0 12
33863: PUSH
33864: LD_VAR 0 7
33868: ARRAY
33869: PUSH
33870: LD_INT 1
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 12
33878: PUSH
33879: LD_VAR 0 7
33883: ARRAY
33884: PUSH
33885: LD_INT 2
33887: ARRAY
33888: PPUSH
33889: CALL_OW 488
33893: NOT
33894: PUSH
33895: LD_VAR 0 12
33899: PUSH
33900: LD_VAR 0 7
33904: ARRAY
33905: PUSH
33906: LD_INT 1
33908: ARRAY
33909: PPUSH
33910: LD_VAR 0 12
33914: PUSH
33915: LD_VAR 0 7
33919: ARRAY
33920: PUSH
33921: LD_INT 2
33923: ARRAY
33924: PPUSH
33925: CALL_OW 428
33929: PUSH
33930: LD_INT 0
33932: GREATER
33933: OR
33934: PUSH
33935: LD_VAR 0 12
33939: PUSH
33940: LD_VAR 0 7
33944: ARRAY
33945: PUSH
33946: LD_INT 1
33948: ARRAY
33949: PPUSH
33950: LD_VAR 0 12
33954: PUSH
33955: LD_VAR 0 7
33959: ARRAY
33960: PUSH
33961: LD_INT 2
33963: ARRAY
33964: PPUSH
33965: CALL_OW 351
33969: OR
33970: IFFALSE 33976
// exit ;
33972: POP
33973: POP
33974: GO 34268
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33976: LD_ADDR_VAR 0 8
33980: PUSH
33981: LD_VAR 0 12
33985: PUSH
33986: LD_VAR 0 7
33990: ARRAY
33991: PUSH
33992: LD_INT 1
33994: ARRAY
33995: PPUSH
33996: LD_VAR 0 12
34000: PUSH
34001: LD_VAR 0 7
34005: ARRAY
34006: PUSH
34007: LD_INT 2
34009: ARRAY
34010: PPUSH
34011: CALL_OW 546
34015: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34016: LD_VAR 0 8
34020: PUSH
34021: LD_INT 1
34023: ARRAY
34024: PUSH
34025: LD_VAR 0 8
34029: PUSH
34030: LD_INT 2
34032: ARRAY
34033: PUSH
34034: LD_VAR 0 13
34038: PUSH
34039: LD_INT 2
34041: PLUS
34042: GREATER
34043: OR
34044: PUSH
34045: LD_VAR 0 8
34049: PUSH
34050: LD_INT 2
34052: ARRAY
34053: PUSH
34054: LD_VAR 0 13
34058: PUSH
34059: LD_INT 2
34061: MINUS
34062: LESS
34063: OR
34064: PUSH
34065: LD_VAR 0 8
34069: PUSH
34070: LD_INT 3
34072: ARRAY
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: LD_INT 8
34079: PUSH
34080: LD_INT 9
34082: PUSH
34083: LD_INT 10
34085: PUSH
34086: LD_INT 11
34088: PUSH
34089: LD_INT 12
34091: PUSH
34092: LD_INT 13
34094: PUSH
34095: LD_INT 16
34097: PUSH
34098: LD_INT 17
34100: PUSH
34101: LD_INT 18
34103: PUSH
34104: LD_INT 19
34106: PUSH
34107: LD_INT 20
34109: PUSH
34110: LD_INT 21
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: IN
34128: NOT
34129: OR
34130: PUSH
34131: LD_VAR 0 8
34135: PUSH
34136: LD_INT 5
34138: ARRAY
34139: NOT
34140: OR
34141: PUSH
34142: LD_VAR 0 8
34146: PUSH
34147: LD_INT 6
34149: ARRAY
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: LD_INT 7
34159: PUSH
34160: LD_INT 9
34162: PUSH
34163: LD_INT 10
34165: PUSH
34166: LD_INT 11
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: IN
34177: NOT
34178: OR
34179: IFFALSE 34185
// exit ;
34181: POP
34182: POP
34183: GO 34268
// end ;
34185: GO 33856
34187: POP
34188: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34189: LD_VAR 0 9
34193: PPUSH
34194: LD_VAR 0 3
34198: PPUSH
34199: LD_VAR 0 4
34203: PPUSH
34204: LD_INT 20
34206: PPUSH
34207: CALL 26220 0 4
34211: PUSH
34212: LD_INT 4
34214: ARRAY
34215: IFFALSE 34219
// exit ;
34217: GO 34268
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34219: LD_VAR 0 2
34223: PUSH
34224: LD_INT 29
34226: PUSH
34227: LD_INT 30
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: IN
34234: PUSH
34235: LD_VAR 0 3
34239: PPUSH
34240: LD_VAR 0 4
34244: PPUSH
34245: LD_VAR 0 9
34249: PPUSH
34250: CALL_OW 440
34254: NOT
34255: AND
34256: IFFALSE 34260
// exit ;
34258: GO 34268
// result := true ;
34260: LD_ADDR_VAR 0 6
34264: PUSH
34265: LD_INT 1
34267: ST_TO_ADDR
// end ;
34268: LD_VAR 0 6
34272: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34273: LD_INT 0
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
34289: PPUSH
34290: PPUSH
34291: PPUSH
34292: PPUSH
34293: PPUSH
34294: PPUSH
34295: PPUSH
34296: PPUSH
34297: PPUSH
34298: PPUSH
34299: PPUSH
34300: PPUSH
34301: PPUSH
34302: PPUSH
34303: PPUSH
34304: PPUSH
34305: PPUSH
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
// result = [ ] ;
34333: LD_ADDR_VAR 0 7
34337: PUSH
34338: EMPTY
34339: ST_TO_ADDR
// temp_list = [ ] ;
34340: LD_ADDR_VAR 0 9
34344: PUSH
34345: EMPTY
34346: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34347: LD_VAR 0 4
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 4
34366: PUSH
34367: LD_INT 5
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: IN
34378: NOT
34379: PUSH
34380: LD_VAR 0 1
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: IN
34395: PUSH
34396: LD_VAR 0 5
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: IN
34415: NOT
34416: AND
34417: OR
34418: IFFALSE 34422
// exit ;
34420: GO 52813
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34422: LD_VAR 0 1
34426: PUSH
34427: LD_INT 6
34429: PUSH
34430: LD_INT 7
34432: PUSH
34433: LD_INT 8
34435: PUSH
34436: LD_INT 13
34438: PUSH
34439: LD_INT 12
34441: PUSH
34442: LD_INT 15
34444: PUSH
34445: LD_INT 11
34447: PUSH
34448: LD_INT 14
34450: PUSH
34451: LD_INT 10
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: IN
34465: IFFALSE 34475
// btype = b_lab ;
34467: LD_ADDR_VAR 0 1
34471: PUSH
34472: LD_INT 6
34474: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34475: LD_VAR 0 6
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 2
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: IN
34494: NOT
34495: PUSH
34496: LD_VAR 0 1
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: LD_INT 2
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 6
34515: PUSH
34516: LD_INT 36
34518: PUSH
34519: LD_INT 4
34521: PUSH
34522: LD_INT 5
34524: PUSH
34525: LD_INT 31
34527: PUSH
34528: LD_INT 32
34530: PUSH
34531: LD_INT 33
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: IN
34547: NOT
34548: PUSH
34549: LD_VAR 0 6
34553: PUSH
34554: LD_INT 1
34556: EQUAL
34557: AND
34558: OR
34559: PUSH
34560: LD_VAR 0 1
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: IN
34575: NOT
34576: PUSH
34577: LD_VAR 0 6
34581: PUSH
34582: LD_INT 2
34584: EQUAL
34585: AND
34586: OR
34587: IFFALSE 34597
// mode = 0 ;
34589: LD_ADDR_VAR 0 6
34593: PUSH
34594: LD_INT 0
34596: ST_TO_ADDR
// case mode of 0 :
34597: LD_VAR 0 6
34601: PUSH
34602: LD_INT 0
34604: DOUBLE
34605: EQUAL
34606: IFTRUE 34610
34608: GO 46063
34610: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34611: LD_ADDR_VAR 0 11
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34804: LD_ADDR_VAR 0 12
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 2
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 3
34961: NEG
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 3
34972: NEG
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35000: LD_ADDR_VAR 0 13
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 3
35159: NEG
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 3
35171: NEG
35172: PUSH
35173: LD_INT 3
35175: NEG
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35199: LD_ADDR_VAR 0 14
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: LD_INT 3
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: LD_INT 3
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35395: LD_ADDR_VAR 0 15
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 3
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35588: LD_ADDR_VAR 0 16
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 2
35711: NEG
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: NEG
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 3
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 3
35745: PUSH
35746: LD_INT 3
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 3
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35781: LD_ADDR_VAR 0 17
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36011: LD_ADDR_VAR 0 18
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36241: LD_ADDR_VAR 0 19
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36471: LD_ADDR_VAR 0 20
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36701: LD_ADDR_VAR 0 21
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 2
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36931: LD_ADDR_VAR 0 22
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 2
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: LD_INT 2
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 2
37118: NEG
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: LD_INT 2
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37161: LD_ADDR_VAR 0 23
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 2
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: LD_INT 3
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: LD_INT 3
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37441: LD_ADDR_VAR 0 24
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 2
37617: NEG
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: LD_INT 2
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: LD_INT 2
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 2
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37717: LD_ADDR_VAR 0 25
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: LD_INT 2
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 3
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: LD_INT 3
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37991: LD_ADDR_VAR 0 26
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 2
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 3
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: LD_INT 3
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38267: LD_ADDR_VAR 0 27
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: NEG
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: NEG
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 3
38512: NEG
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38547: LD_ADDR_VAR 0 28
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: LD_INT 2
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 3
38782: NEG
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 3
38794: NEG
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38829: LD_ADDR_VAR 0 29
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 2
39019: NEG
39020: PUSH
39021: LD_INT 3
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 3
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 3
39073: NEG
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39108: LD_ADDR_VAR 0 30
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: LD_INT 3
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: NEG
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39386: LD_ADDR_VAR 0 31
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: LD_INT 3
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 3
39629: NEG
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39664: LD_ADDR_VAR 0 32
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: LD_INT 3
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 3
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: LD_INT 3
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 3
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39942: LD_ADDR_VAR 0 33
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: LD_INT 2
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: NEG
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 3
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40221: LD_ADDR_VAR 0 34
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: LD_INT 3
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 2
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 3
40466: NEG
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40501: LD_ADDR_VAR 0 35
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40613: LD_ADDR_VAR 0 36
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40725: LD_ADDR_VAR 0 37
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40837: LD_ADDR_VAR 0 38
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40949: LD_ADDR_VAR 0 39
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41061: LD_ADDR_VAR 0 40
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41173: LD_ADDR_VAR 0 41
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 3
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 3
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 3
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: LD_INT 3
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 3
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 3
41447: NEG
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 3
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 3
41482: NEG
41483: PUSH
41484: LD_INT 3
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41523: LD_ADDR_VAR 0 42
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 3
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 3
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 3
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 3
41769: PUSH
41770: LD_INT 3
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 3
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 3
41832: NEG
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41873: LD_ADDR_VAR 0 43
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 3
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 3
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 3
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42221: LD_ADDR_VAR 0 44
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 3
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: PUSH
42465: LD_INT 3
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 3
42495: NEG
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: NEG
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 3
42530: NEG
42531: PUSH
42532: LD_INT 3
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42571: LD_ADDR_VAR 0 45
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 3
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 3
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 3
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 3
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 3
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 3
42868: NEG
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: NEG
42881: PUSH
42882: LD_INT 3
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42921: LD_ADDR_VAR 0 46
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 3
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 3
43217: NEG
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 3
43228: NEG
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43269: LD_ADDR_VAR 0 47
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43420: LD_ADDR_VAR 0 48
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43567: LD_ADDR_VAR 0 49
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43711: LD_ADDR_VAR 0 50
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43855: LD_ADDR_VAR 0 51
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 0
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44002: LD_ADDR_VAR 0 52
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44153: LD_ADDR_VAR 0 53
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44383: LD_ADDR_VAR 0 54
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44613: LD_ADDR_VAR 0 55
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44843: LD_ADDR_VAR 0 56
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45073: LD_ADDR_VAR 0 57
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45303: LD_ADDR_VAR 0 58
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45533: LD_ADDR_VAR 0 59
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45621: LD_ADDR_VAR 0 60
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45709: LD_ADDR_VAR 0 61
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45797: LD_ADDR_VAR 0 62
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45885: LD_ADDR_VAR 0 63
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45973: LD_ADDR_VAR 0 64
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: ST_TO_ADDR
// end ; 1 :
46061: GO 51958
46063: LD_INT 1
46065: DOUBLE
46066: EQUAL
46067: IFTRUE 46071
46069: GO 48694
46071: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46072: LD_ADDR_VAR 0 11
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46116: LD_ADDR_VAR 0 12
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46157: LD_ADDR_VAR 0 13
46161: PUSH
46162: LD_INT 3
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 3
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46197: LD_ADDR_VAR 0 14
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: LIST
46237: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46238: LD_ADDR_VAR 0 15
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46282: LD_ADDR_VAR 0 16
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: NEG
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: LD_INT 3
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46328: LD_ADDR_VAR 0 17
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 3
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 3
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46372: LD_ADDR_VAR 0 18
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46413: LD_ADDR_VAR 0 19
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 3
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46453: LD_ADDR_VAR 0 20
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46494: LD_ADDR_VAR 0 21
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46538: LD_ADDR_VAR 0 22
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 3
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: LD_INT 3
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46584: LD_ADDR_VAR 0 23
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 4
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46628: LD_ADDR_VAR 0 24
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46669: LD_ADDR_VAR 0 25
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 4
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: LD_INT 4
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46709: LD_ADDR_VAR 0 26
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 4
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46750: LD_ADDR_VAR 0 27
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 4
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46794: LD_ADDR_VAR 0 28
46798: PUSH
46799: LD_INT 3
46801: NEG
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: LD_INT 4
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 4
46825: NEG
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46840: LD_ADDR_VAR 0 29
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 4
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 4
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 5
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 5
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 4
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 6
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 6
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: LD_INT 5
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46995: LD_ADDR_VAR 0 30
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 4
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 4
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 4
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 5
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 5
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 5
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 6
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 6
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47138: LD_ADDR_VAR 0 31
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 4
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 4
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 5
47205: PUSH
47206: LD_INT 4
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 5
47215: PUSH
47216: LD_INT 5
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 4
47225: PUSH
47226: LD_INT 5
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 6
47235: PUSH
47236: LD_INT 5
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 6
47245: PUSH
47246: LD_INT 6
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 5
47255: PUSH
47256: LD_INT 6
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47277: LD_ADDR_VAR 0 32
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 4
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 4
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 5
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 5
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 4
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 6
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 6
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 5
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47420: LD_ADDR_VAR 0 33
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 4
47472: NEG
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 4
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 4
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 5
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 5
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 5
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 6
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 6
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47575: LD_ADDR_VAR 0 34
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: LD_INT 3
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: LD_INT 3
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: LD_INT 4
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 4
47630: NEG
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 4
47642: NEG
47643: PUSH
47644: LD_INT 4
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 4
47654: NEG
47655: PUSH
47656: LD_INT 5
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 5
47666: NEG
47667: PUSH
47668: LD_INT 4
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 5
47678: NEG
47679: PUSH
47680: LD_INT 5
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 5
47690: NEG
47691: PUSH
47692: LD_INT 6
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 6
47702: NEG
47703: PUSH
47704: LD_INT 5
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 6
47714: NEG
47715: PUSH
47716: LD_INT 6
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47738: LD_ADDR_VAR 0 41
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: LIST
47781: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47782: LD_ADDR_VAR 0 42
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47823: LD_ADDR_VAR 0 43
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 3
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47863: LD_ADDR_VAR 0 44
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47904: LD_ADDR_VAR 0 45
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47948: LD_ADDR_VAR 0 46
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47994: LD_ADDR_VAR 0 47
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: LD_INT 3
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 3
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48027: LD_ADDR_VAR 0 48
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48058: LD_ADDR_VAR 0 49
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48087: LD_ADDR_VAR 0 50
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48116: LD_ADDR_VAR 0 51
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48147: LD_ADDR_VAR 0 52
48151: PUSH
48152: LD_INT 3
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 3
48166: NEG
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48180: LD_ADDR_VAR 0 53
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: LIST
48223: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48224: LD_ADDR_VAR 0 54
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48265: LD_ADDR_VAR 0 55
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 3
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48305: LD_ADDR_VAR 0 56
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48346: LD_ADDR_VAR 0 57
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: NEG
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48390: LD_ADDR_VAR 0 58
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: NEG
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48436: LD_ADDR_VAR 0 59
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48480: LD_ADDR_VAR 0 60
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48521: LD_ADDR_VAR 0 61
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: LIST
48560: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48561: LD_ADDR_VAR 0 62
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48602: LD_ADDR_VAR 0 63
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48646: LD_ADDR_VAR 0 64
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: ST_TO_ADDR
// end ; 2 :
48692: GO 51958
48694: LD_INT 2
48696: DOUBLE
48697: EQUAL
48698: IFTRUE 48702
48700: GO 51957
48702: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48703: LD_ADDR_VAR 0 29
48707: PUSH
48708: LD_INT 4
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 4
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 5
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 5
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 4
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 5
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 4
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 4
48833: PUSH
48834: LD_INT 4
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 3
48843: PUSH
48844: LD_INT 4
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 4
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 4
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 4
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 4
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 5
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 5
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 4
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 5
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 3
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 4
49042: NEG
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 4
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 4
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 4
49088: NEG
49089: PUSH
49090: LD_INT 4
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 4
49100: NEG
49101: PUSH
49102: LD_INT 5
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: LD_INT 4
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 4
49136: NEG
49137: PUSH
49138: LD_INT 3
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 5
49148: NEG
49149: PUSH
49150: LD_INT 4
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 5
49160: NEG
49161: PUSH
49162: LD_INT 5
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: LD_INT 5
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 5
49184: NEG
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49241: LD_ADDR_VAR 0 30
49245: PUSH
49246: LD_INT 4
49248: PUSH
49249: LD_INT 4
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 4
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 5
49268: PUSH
49269: LD_INT 4
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 5
49278: PUSH
49279: LD_INT 5
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 4
49288: PUSH
49289: LD_INT 5
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: LD_INT 4
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: LD_INT 3
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 5
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 5
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 3
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 4
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 4
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 4
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 4
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 4
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 3
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 4
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 5
49487: NEG
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 5
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 5
49510: NEG
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 3
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 3
49533: NEG
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: LD_INT 4
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 4
49593: NEG
49594: PUSH
49595: LD_INT 3
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 4
49605: NEG
49606: PUSH
49607: LD_INT 4
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: LD_INT 4
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 4
49629: NEG
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 4
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 5
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: LD_INT 4
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 3
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 4
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 5
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 5
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49788: LD_ADDR_VAR 0 31
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 4
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 4
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 5
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 5
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 4
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 5
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: NEG
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: NEG
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 4
49967: NEG
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 4
49990: NEG
49991: PUSH
49992: LD_INT 4
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 4
50002: NEG
50003: PUSH
50004: LD_INT 5
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: LD_INT 4
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 4
50038: NEG
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 5
50050: NEG
50051: PUSH
50052: LD_INT 4
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 5
50062: NEG
50063: PUSH
50064: LD_INT 5
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: LD_INT 5
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 5
50086: NEG
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 4
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 4
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: LD_INT 4
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 4
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 4
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 5
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 5
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 4
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 5
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50338: LD_ADDR_VAR 0 32
50342: PUSH
50343: LD_INT 4
50345: NEG
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: NEG
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 4
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 5
50401: NEG
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 5
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 5
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: LD_INT 4
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 4
50507: NEG
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 4
50519: NEG
50520: PUSH
50521: LD_INT 4
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: LD_INT 4
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 4
50543: NEG
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 4
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 5
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 4
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 4
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 5
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 5
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 4
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 4
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 4
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 4
50750: PUSH
50751: LD_INT 4
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 4
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 5
50770: PUSH
50771: LD_INT 4
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 5
50780: PUSH
50781: LD_INT 5
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 4
50790: PUSH
50791: LD_INT 5
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: PUSH
50801: LD_INT 4
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: PUSH
50811: LD_INT 3
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 5
50820: PUSH
50821: LD_INT 3
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: LD_INT 5
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50885: LD_ADDR_VAR 0 33
50889: PUSH
50890: LD_INT 4
50892: NEG
50893: PUSH
50894: LD_INT 4
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 4
50904: NEG
50905: PUSH
50906: LD_INT 5
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: LD_INT 4
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 5
50952: NEG
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 5
50964: NEG
50965: PUSH
50966: LD_INT 5
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 3
50976: NEG
50977: PUSH
50978: LD_INT 5
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 5
50988: NEG
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 3
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: LD_INT 4
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 4
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 4
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 5
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 5
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 4
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 5
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 3
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 4
51225: PUSH
51226: LD_INT 4
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 3
51235: PUSH
51236: LD_INT 4
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 4
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 4
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 4
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 5
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 4
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51423: LD_ADDR_VAR 0 34
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 4
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 5
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 4
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 5
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 5
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 3
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 4
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 4
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 4
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 4
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 4
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 5
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 5
51655: PUSH
51656: LD_INT 5
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 4
51665: PUSH
51666: LD_INT 5
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: LD_INT 3
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 5
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: LD_INT 5
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 3
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 4
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 4
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 4
51808: NEG
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 4
51819: NEG
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 4
51853: NEG
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 5
51864: NEG
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 5
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 5
51887: NEG
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// end ; end ;
51955: GO 51958
51957: POP
// case btype of b_depot , b_warehouse :
51958: LD_VAR 0 1
51962: PUSH
51963: LD_INT 0
51965: DOUBLE
51966: EQUAL
51967: IFTRUE 51977
51969: LD_INT 1
51971: DOUBLE
51972: EQUAL
51973: IFTRUE 51977
51975: GO 52178
51977: POP
// case nation of nation_american :
51978: LD_VAR 0 5
51982: PUSH
51983: LD_INT 1
51985: DOUBLE
51986: EQUAL
51987: IFTRUE 51991
51989: GO 52047
51991: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51992: LD_ADDR_VAR 0 9
51996: PUSH
51997: LD_VAR 0 11
52001: PUSH
52002: LD_VAR 0 12
52006: PUSH
52007: LD_VAR 0 13
52011: PUSH
52012: LD_VAR 0 14
52016: PUSH
52017: LD_VAR 0 15
52021: PUSH
52022: LD_VAR 0 16
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: PUSH
52035: LD_VAR 0 4
52039: PUSH
52040: LD_INT 1
52042: PLUS
52043: ARRAY
52044: ST_TO_ADDR
52045: GO 52176
52047: LD_INT 2
52049: DOUBLE
52050: EQUAL
52051: IFTRUE 52055
52053: GO 52111
52055: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52056: LD_ADDR_VAR 0 9
52060: PUSH
52061: LD_VAR 0 17
52065: PUSH
52066: LD_VAR 0 18
52070: PUSH
52071: LD_VAR 0 19
52075: PUSH
52076: LD_VAR 0 20
52080: PUSH
52081: LD_VAR 0 21
52085: PUSH
52086: LD_VAR 0 22
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: PUSH
52099: LD_VAR 0 4
52103: PUSH
52104: LD_INT 1
52106: PLUS
52107: ARRAY
52108: ST_TO_ADDR
52109: GO 52176
52111: LD_INT 3
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52119
52117: GO 52175
52119: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52120: LD_ADDR_VAR 0 9
52124: PUSH
52125: LD_VAR 0 23
52129: PUSH
52130: LD_VAR 0 24
52134: PUSH
52135: LD_VAR 0 25
52139: PUSH
52140: LD_VAR 0 26
52144: PUSH
52145: LD_VAR 0 27
52149: PUSH
52150: LD_VAR 0 28
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: PUSH
52163: LD_VAR 0 4
52167: PUSH
52168: LD_INT 1
52170: PLUS
52171: ARRAY
52172: ST_TO_ADDR
52173: GO 52176
52175: POP
52176: GO 52731
52178: LD_INT 2
52180: DOUBLE
52181: EQUAL
52182: IFTRUE 52192
52184: LD_INT 3
52186: DOUBLE
52187: EQUAL
52188: IFTRUE 52192
52190: GO 52248
52192: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52193: LD_ADDR_VAR 0 9
52197: PUSH
52198: LD_VAR 0 29
52202: PUSH
52203: LD_VAR 0 30
52207: PUSH
52208: LD_VAR 0 31
52212: PUSH
52213: LD_VAR 0 32
52217: PUSH
52218: LD_VAR 0 33
52222: PUSH
52223: LD_VAR 0 34
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: PUSH
52236: LD_VAR 0 4
52240: PUSH
52241: LD_INT 1
52243: PLUS
52244: ARRAY
52245: ST_TO_ADDR
52246: GO 52731
52248: LD_INT 16
52250: DOUBLE
52251: EQUAL
52252: IFTRUE 52310
52254: LD_INT 17
52256: DOUBLE
52257: EQUAL
52258: IFTRUE 52310
52260: LD_INT 18
52262: DOUBLE
52263: EQUAL
52264: IFTRUE 52310
52266: LD_INT 19
52268: DOUBLE
52269: EQUAL
52270: IFTRUE 52310
52272: LD_INT 22
52274: DOUBLE
52275: EQUAL
52276: IFTRUE 52310
52278: LD_INT 20
52280: DOUBLE
52281: EQUAL
52282: IFTRUE 52310
52284: LD_INT 21
52286: DOUBLE
52287: EQUAL
52288: IFTRUE 52310
52290: LD_INT 23
52292: DOUBLE
52293: EQUAL
52294: IFTRUE 52310
52296: LD_INT 24
52298: DOUBLE
52299: EQUAL
52300: IFTRUE 52310
52302: LD_INT 25
52304: DOUBLE
52305: EQUAL
52306: IFTRUE 52310
52308: GO 52366
52310: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52311: LD_ADDR_VAR 0 9
52315: PUSH
52316: LD_VAR 0 35
52320: PUSH
52321: LD_VAR 0 36
52325: PUSH
52326: LD_VAR 0 37
52330: PUSH
52331: LD_VAR 0 38
52335: PUSH
52336: LD_VAR 0 39
52340: PUSH
52341: LD_VAR 0 40
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: PUSH
52354: LD_VAR 0 4
52358: PUSH
52359: LD_INT 1
52361: PLUS
52362: ARRAY
52363: ST_TO_ADDR
52364: GO 52731
52366: LD_INT 6
52368: DOUBLE
52369: EQUAL
52370: IFTRUE 52422
52372: LD_INT 7
52374: DOUBLE
52375: EQUAL
52376: IFTRUE 52422
52378: LD_INT 8
52380: DOUBLE
52381: EQUAL
52382: IFTRUE 52422
52384: LD_INT 13
52386: DOUBLE
52387: EQUAL
52388: IFTRUE 52422
52390: LD_INT 12
52392: DOUBLE
52393: EQUAL
52394: IFTRUE 52422
52396: LD_INT 15
52398: DOUBLE
52399: EQUAL
52400: IFTRUE 52422
52402: LD_INT 11
52404: DOUBLE
52405: EQUAL
52406: IFTRUE 52422
52408: LD_INT 14
52410: DOUBLE
52411: EQUAL
52412: IFTRUE 52422
52414: LD_INT 10
52416: DOUBLE
52417: EQUAL
52418: IFTRUE 52422
52420: GO 52478
52422: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52423: LD_ADDR_VAR 0 9
52427: PUSH
52428: LD_VAR 0 41
52432: PUSH
52433: LD_VAR 0 42
52437: PUSH
52438: LD_VAR 0 43
52442: PUSH
52443: LD_VAR 0 44
52447: PUSH
52448: LD_VAR 0 45
52452: PUSH
52453: LD_VAR 0 46
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: PUSH
52466: LD_VAR 0 4
52470: PUSH
52471: LD_INT 1
52473: PLUS
52474: ARRAY
52475: ST_TO_ADDR
52476: GO 52731
52478: LD_INT 36
52480: DOUBLE
52481: EQUAL
52482: IFTRUE 52486
52484: GO 52542
52486: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52487: LD_ADDR_VAR 0 9
52491: PUSH
52492: LD_VAR 0 47
52496: PUSH
52497: LD_VAR 0 48
52501: PUSH
52502: LD_VAR 0 49
52506: PUSH
52507: LD_VAR 0 50
52511: PUSH
52512: LD_VAR 0 51
52516: PUSH
52517: LD_VAR 0 52
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: PUSH
52530: LD_VAR 0 4
52534: PUSH
52535: LD_INT 1
52537: PLUS
52538: ARRAY
52539: ST_TO_ADDR
52540: GO 52731
52542: LD_INT 4
52544: DOUBLE
52545: EQUAL
52546: IFTRUE 52568
52548: LD_INT 5
52550: DOUBLE
52551: EQUAL
52552: IFTRUE 52568
52554: LD_INT 34
52556: DOUBLE
52557: EQUAL
52558: IFTRUE 52568
52560: LD_INT 37
52562: DOUBLE
52563: EQUAL
52564: IFTRUE 52568
52566: GO 52624
52568: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52569: LD_ADDR_VAR 0 9
52573: PUSH
52574: LD_VAR 0 53
52578: PUSH
52579: LD_VAR 0 54
52583: PUSH
52584: LD_VAR 0 55
52588: PUSH
52589: LD_VAR 0 56
52593: PUSH
52594: LD_VAR 0 57
52598: PUSH
52599: LD_VAR 0 58
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: PUSH
52612: LD_VAR 0 4
52616: PUSH
52617: LD_INT 1
52619: PLUS
52620: ARRAY
52621: ST_TO_ADDR
52622: GO 52731
52624: LD_INT 31
52626: DOUBLE
52627: EQUAL
52628: IFTRUE 52674
52630: LD_INT 32
52632: DOUBLE
52633: EQUAL
52634: IFTRUE 52674
52636: LD_INT 33
52638: DOUBLE
52639: EQUAL
52640: IFTRUE 52674
52642: LD_INT 27
52644: DOUBLE
52645: EQUAL
52646: IFTRUE 52674
52648: LD_INT 26
52650: DOUBLE
52651: EQUAL
52652: IFTRUE 52674
52654: LD_INT 28
52656: DOUBLE
52657: EQUAL
52658: IFTRUE 52674
52660: LD_INT 29
52662: DOUBLE
52663: EQUAL
52664: IFTRUE 52674
52666: LD_INT 30
52668: DOUBLE
52669: EQUAL
52670: IFTRUE 52674
52672: GO 52730
52674: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52675: LD_ADDR_VAR 0 9
52679: PUSH
52680: LD_VAR 0 59
52684: PUSH
52685: LD_VAR 0 60
52689: PUSH
52690: LD_VAR 0 61
52694: PUSH
52695: LD_VAR 0 62
52699: PUSH
52700: LD_VAR 0 63
52704: PUSH
52705: LD_VAR 0 64
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: PUSH
52718: LD_VAR 0 4
52722: PUSH
52723: LD_INT 1
52725: PLUS
52726: ARRAY
52727: ST_TO_ADDR
52728: GO 52731
52730: POP
// temp_list2 = [ ] ;
52731: LD_ADDR_VAR 0 10
52735: PUSH
52736: EMPTY
52737: ST_TO_ADDR
// for i in temp_list do
52738: LD_ADDR_VAR 0 8
52742: PUSH
52743: LD_VAR 0 9
52747: PUSH
52748: FOR_IN
52749: IFFALSE 52801
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52751: LD_ADDR_VAR 0 10
52755: PUSH
52756: LD_VAR 0 10
52760: PUSH
52761: LD_VAR 0 8
52765: PUSH
52766: LD_INT 1
52768: ARRAY
52769: PUSH
52770: LD_VAR 0 2
52774: PLUS
52775: PUSH
52776: LD_VAR 0 8
52780: PUSH
52781: LD_INT 2
52783: ARRAY
52784: PUSH
52785: LD_VAR 0 3
52789: PLUS
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: ADD
52798: ST_TO_ADDR
52799: GO 52748
52801: POP
52802: POP
// result = temp_list2 ;
52803: LD_ADDR_VAR 0 7
52807: PUSH
52808: LD_VAR 0 10
52812: ST_TO_ADDR
// end ;
52813: LD_VAR 0 7
52817: RET
// export function EnemyInRange ( unit , dist ) ; begin
52818: LD_INT 0
52820: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52821: LD_ADDR_VAR 0 3
52825: PUSH
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL_OW 255
52835: PPUSH
52836: LD_VAR 0 1
52840: PPUSH
52841: CALL_OW 250
52845: PPUSH
52846: LD_VAR 0 1
52850: PPUSH
52851: CALL_OW 251
52855: PPUSH
52856: LD_VAR 0 2
52860: PPUSH
52861: CALL 26220 0 4
52865: PUSH
52866: LD_INT 4
52868: ARRAY
52869: ST_TO_ADDR
// end ;
52870: LD_VAR 0 3
52874: RET
// export function PlayerSeeMe ( unit ) ; begin
52875: LD_INT 0
52877: PPUSH
// result := See ( your_side , unit ) ;
52878: LD_ADDR_VAR 0 2
52882: PUSH
52883: LD_OWVAR 2
52887: PPUSH
52888: LD_VAR 0 1
52892: PPUSH
52893: CALL_OW 292
52897: ST_TO_ADDR
// end ;
52898: LD_VAR 0 2
52902: RET
// export function ReverseDir ( unit ) ; begin
52903: LD_INT 0
52905: PPUSH
// if not unit then
52906: LD_VAR 0 1
52910: NOT
52911: IFFALSE 52915
// exit ;
52913: GO 52938
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52915: LD_ADDR_VAR 0 2
52919: PUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: CALL_OW 254
52929: PUSH
52930: LD_INT 3
52932: PLUS
52933: PUSH
52934: LD_INT 6
52936: MOD
52937: ST_TO_ADDR
// end ;
52938: LD_VAR 0 2
52942: RET
// export function ReverseArray ( array ) ; var i ; begin
52943: LD_INT 0
52945: PPUSH
52946: PPUSH
// if not array then
52947: LD_VAR 0 1
52951: NOT
52952: IFFALSE 52956
// exit ;
52954: GO 53011
// result := [ ] ;
52956: LD_ADDR_VAR 0 2
52960: PUSH
52961: EMPTY
52962: ST_TO_ADDR
// for i := array downto 1 do
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: DOUBLE
52969: LD_VAR 0 1
52973: INC
52974: ST_TO_ADDR
52975: LD_INT 1
52977: PUSH
52978: FOR_DOWNTO
52979: IFFALSE 53009
// result := Join ( result , array [ i ] ) ;
52981: LD_ADDR_VAR 0 2
52985: PUSH
52986: LD_VAR 0 2
52990: PPUSH
52991: LD_VAR 0 1
52995: PUSH
52996: LD_VAR 0 3
53000: ARRAY
53001: PPUSH
53002: CALL 57654 0 2
53006: ST_TO_ADDR
53007: GO 52978
53009: POP
53010: POP
// end ;
53011: LD_VAR 0 2
53015: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53016: LD_INT 0
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
53023: PPUSH
// if not unit or not hexes then
53024: LD_VAR 0 1
53028: NOT
53029: PUSH
53030: LD_VAR 0 2
53034: NOT
53035: OR
53036: IFFALSE 53040
// exit ;
53038: GO 53163
// dist := 9999 ;
53040: LD_ADDR_VAR 0 5
53044: PUSH
53045: LD_INT 9999
53047: ST_TO_ADDR
// for i = 1 to hexes do
53048: LD_ADDR_VAR 0 4
53052: PUSH
53053: DOUBLE
53054: LD_INT 1
53056: DEC
53057: ST_TO_ADDR
53058: LD_VAR 0 2
53062: PUSH
53063: FOR_TO
53064: IFFALSE 53151
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53066: LD_ADDR_VAR 0 6
53070: PUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: LD_VAR 0 2
53080: PUSH
53081: LD_VAR 0 4
53085: ARRAY
53086: PUSH
53087: LD_INT 1
53089: ARRAY
53090: PPUSH
53091: LD_VAR 0 2
53095: PUSH
53096: LD_VAR 0 4
53100: ARRAY
53101: PUSH
53102: LD_INT 2
53104: ARRAY
53105: PPUSH
53106: CALL_OW 297
53110: ST_TO_ADDR
// if tdist < dist then
53111: LD_VAR 0 6
53115: PUSH
53116: LD_VAR 0 5
53120: LESS
53121: IFFALSE 53149
// begin hex := hexes [ i ] ;
53123: LD_ADDR_VAR 0 8
53127: PUSH
53128: LD_VAR 0 2
53132: PUSH
53133: LD_VAR 0 4
53137: ARRAY
53138: ST_TO_ADDR
// dist := tdist ;
53139: LD_ADDR_VAR 0 5
53143: PUSH
53144: LD_VAR 0 6
53148: ST_TO_ADDR
// end ; end ;
53149: GO 53063
53151: POP
53152: POP
// result := hex ;
53153: LD_ADDR_VAR 0 3
53157: PUSH
53158: LD_VAR 0 8
53162: ST_TO_ADDR
// end ;
53163: LD_VAR 0 3
53167: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53168: LD_INT 0
53170: PPUSH
53171: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53172: LD_VAR 0 1
53176: NOT
53177: PUSH
53178: LD_VAR 0 1
53182: PUSH
53183: LD_INT 21
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 23
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PPUSH
53207: CALL_OW 69
53211: IN
53212: NOT
53213: OR
53214: IFFALSE 53218
// exit ;
53216: GO 53265
// for i = 1 to 3 do
53218: LD_ADDR_VAR 0 3
53222: PUSH
53223: DOUBLE
53224: LD_INT 1
53226: DEC
53227: ST_TO_ADDR
53228: LD_INT 3
53230: PUSH
53231: FOR_TO
53232: IFFALSE 53263
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53234: LD_VAR 0 1
53238: PPUSH
53239: CALL_OW 250
53243: PPUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: CALL_OW 251
53253: PPUSH
53254: LD_INT 1
53256: PPUSH
53257: CALL_OW 453
53261: GO 53231
53263: POP
53264: POP
// end ;
53265: LD_VAR 0 2
53269: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53270: LD_INT 0
53272: PPUSH
53273: PPUSH
53274: PPUSH
53275: PPUSH
53276: PPUSH
53277: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53278: LD_VAR 0 1
53282: NOT
53283: PUSH
53284: LD_VAR 0 2
53288: NOT
53289: OR
53290: PUSH
53291: LD_VAR 0 1
53295: PPUSH
53296: CALL_OW 314
53300: OR
53301: IFFALSE 53305
// exit ;
53303: GO 53772
// if GetLives ( i ) < 250 then
53305: LD_VAR 0 4
53309: PPUSH
53310: CALL_OW 256
53314: PUSH
53315: LD_INT 250
53317: LESS
53318: IFFALSE 53331
// begin ComAutodestruct ( i ) ;
53320: LD_VAR 0 4
53324: PPUSH
53325: CALL 53168 0 1
// exit ;
53329: GO 53772
// end ; x := GetX ( enemy_unit ) ;
53331: LD_ADDR_VAR 0 7
53335: PUSH
53336: LD_VAR 0 2
53340: PPUSH
53341: CALL_OW 250
53345: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53346: LD_ADDR_VAR 0 8
53350: PUSH
53351: LD_VAR 0 2
53355: PPUSH
53356: CALL_OW 251
53360: ST_TO_ADDR
// if not x or not y then
53361: LD_VAR 0 7
53365: NOT
53366: PUSH
53367: LD_VAR 0 8
53371: NOT
53372: OR
53373: IFFALSE 53377
// exit ;
53375: GO 53772
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53377: LD_ADDR_VAR 0 6
53381: PUSH
53382: LD_VAR 0 7
53386: PPUSH
53387: LD_INT 0
53389: PPUSH
53390: LD_INT 4
53392: PPUSH
53393: CALL_OW 272
53397: PUSH
53398: LD_VAR 0 8
53402: PPUSH
53403: LD_INT 0
53405: PPUSH
53406: LD_INT 4
53408: PPUSH
53409: CALL_OW 273
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_VAR 0 7
53422: PPUSH
53423: LD_INT 1
53425: PPUSH
53426: LD_INT 4
53428: PPUSH
53429: CALL_OW 272
53433: PUSH
53434: LD_VAR 0 8
53438: PPUSH
53439: LD_INT 1
53441: PPUSH
53442: LD_INT 4
53444: PPUSH
53445: CALL_OW 273
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_VAR 0 7
53458: PPUSH
53459: LD_INT 2
53461: PPUSH
53462: LD_INT 4
53464: PPUSH
53465: CALL_OW 272
53469: PUSH
53470: LD_VAR 0 8
53474: PPUSH
53475: LD_INT 2
53477: PPUSH
53478: LD_INT 4
53480: PPUSH
53481: CALL_OW 273
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_VAR 0 7
53494: PPUSH
53495: LD_INT 3
53497: PPUSH
53498: LD_INT 4
53500: PPUSH
53501: CALL_OW 272
53505: PUSH
53506: LD_VAR 0 8
53510: PPUSH
53511: LD_INT 3
53513: PPUSH
53514: LD_INT 4
53516: PPUSH
53517: CALL_OW 273
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_VAR 0 7
53530: PPUSH
53531: LD_INT 4
53533: PPUSH
53534: LD_INT 4
53536: PPUSH
53537: CALL_OW 272
53541: PUSH
53542: LD_VAR 0 8
53546: PPUSH
53547: LD_INT 4
53549: PPUSH
53550: LD_INT 4
53552: PPUSH
53553: CALL_OW 273
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_VAR 0 7
53566: PPUSH
53567: LD_INT 5
53569: PPUSH
53570: LD_INT 4
53572: PPUSH
53573: CALL_OW 272
53577: PUSH
53578: LD_VAR 0 8
53582: PPUSH
53583: LD_INT 5
53585: PPUSH
53586: LD_INT 4
53588: PPUSH
53589: CALL_OW 273
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// for i = tmp downto 1 do
53606: LD_ADDR_VAR 0 4
53610: PUSH
53611: DOUBLE
53612: LD_VAR 0 6
53616: INC
53617: ST_TO_ADDR
53618: LD_INT 1
53620: PUSH
53621: FOR_DOWNTO
53622: IFFALSE 53723
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53624: LD_VAR 0 6
53628: PUSH
53629: LD_VAR 0 4
53633: ARRAY
53634: PUSH
53635: LD_INT 1
53637: ARRAY
53638: PPUSH
53639: LD_VAR 0 6
53643: PUSH
53644: LD_VAR 0 4
53648: ARRAY
53649: PUSH
53650: LD_INT 2
53652: ARRAY
53653: PPUSH
53654: CALL_OW 488
53658: NOT
53659: PUSH
53660: LD_VAR 0 6
53664: PUSH
53665: LD_VAR 0 4
53669: ARRAY
53670: PUSH
53671: LD_INT 1
53673: ARRAY
53674: PPUSH
53675: LD_VAR 0 6
53679: PUSH
53680: LD_VAR 0 4
53684: ARRAY
53685: PUSH
53686: LD_INT 2
53688: ARRAY
53689: PPUSH
53690: CALL_OW 428
53694: PUSH
53695: LD_INT 0
53697: NONEQUAL
53698: OR
53699: IFFALSE 53721
// tmp := Delete ( tmp , i ) ;
53701: LD_ADDR_VAR 0 6
53705: PUSH
53706: LD_VAR 0 6
53710: PPUSH
53711: LD_VAR 0 4
53715: PPUSH
53716: CALL_OW 3
53720: ST_TO_ADDR
53721: GO 53621
53723: POP
53724: POP
// j := GetClosestHex ( unit , tmp ) ;
53725: LD_ADDR_VAR 0 5
53729: PUSH
53730: LD_VAR 0 1
53734: PPUSH
53735: LD_VAR 0 6
53739: PPUSH
53740: CALL 53016 0 2
53744: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53745: LD_VAR 0 1
53749: PPUSH
53750: LD_VAR 0 5
53754: PUSH
53755: LD_INT 1
53757: ARRAY
53758: PPUSH
53759: LD_VAR 0 5
53763: PUSH
53764: LD_INT 2
53766: ARRAY
53767: PPUSH
53768: CALL_OW 111
// end ;
53772: LD_VAR 0 3
53776: RET
// export function PrepareApemanSoldier ( ) ; begin
53777: LD_INT 0
53779: PPUSH
// uc_nation := 0 ;
53780: LD_ADDR_OWVAR 21
53784: PUSH
53785: LD_INT 0
53787: ST_TO_ADDR
// hc_sex := sex_male ;
53788: LD_ADDR_OWVAR 27
53792: PUSH
53793: LD_INT 1
53795: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53796: LD_ADDR_OWVAR 28
53800: PUSH
53801: LD_INT 15
53803: ST_TO_ADDR
// hc_gallery :=  ;
53804: LD_ADDR_OWVAR 33
53808: PUSH
53809: LD_STRING 
53811: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53812: LD_ADDR_OWVAR 31
53816: PUSH
53817: LD_INT 0
53819: PPUSH
53820: LD_INT 3
53822: PPUSH
53823: CALL_OW 12
53827: PUSH
53828: LD_INT 0
53830: PPUSH
53831: LD_INT 3
53833: PPUSH
53834: CALL_OW 12
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// end ;
53851: LD_VAR 0 1
53855: RET
// export function PrepareApemanEngineer ( ) ; begin
53856: LD_INT 0
53858: PPUSH
// uc_nation := 0 ;
53859: LD_ADDR_OWVAR 21
53863: PUSH
53864: LD_INT 0
53866: ST_TO_ADDR
// hc_sex := sex_male ;
53867: LD_ADDR_OWVAR 27
53871: PUSH
53872: LD_INT 1
53874: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53875: LD_ADDR_OWVAR 28
53879: PUSH
53880: LD_INT 16
53882: ST_TO_ADDR
// hc_gallery :=  ;
53883: LD_ADDR_OWVAR 33
53887: PUSH
53888: LD_STRING 
53890: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53891: LD_ADDR_OWVAR 31
53895: PUSH
53896: LD_INT 0
53898: PPUSH
53899: LD_INT 3
53901: PPUSH
53902: CALL_OW 12
53906: PUSH
53907: LD_INT 0
53909: PPUSH
53910: LD_INT 3
53912: PPUSH
53913: CALL_OW 12
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: ST_TO_ADDR
// end ;
53930: LD_VAR 0 1
53934: RET
// export function PrepareApeman ( agressivity ) ; begin
53935: LD_INT 0
53937: PPUSH
// uc_side := 0 ;
53938: LD_ADDR_OWVAR 20
53942: PUSH
53943: LD_INT 0
53945: ST_TO_ADDR
// uc_nation := 0 ;
53946: LD_ADDR_OWVAR 21
53950: PUSH
53951: LD_INT 0
53953: ST_TO_ADDR
// hc_sex := sex_male ;
53954: LD_ADDR_OWVAR 27
53958: PUSH
53959: LD_INT 1
53961: ST_TO_ADDR
// hc_class := class_apeman ;
53962: LD_ADDR_OWVAR 28
53966: PUSH
53967: LD_INT 12
53969: ST_TO_ADDR
// hc_gallery :=  ;
53970: LD_ADDR_OWVAR 33
53974: PUSH
53975: LD_STRING 
53977: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53978: LD_ADDR_OWVAR 35
53982: PUSH
53983: LD_VAR 0 1
53987: NEG
53988: PPUSH
53989: LD_VAR 0 1
53993: PPUSH
53994: CALL_OW 12
53998: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53999: LD_ADDR_OWVAR 31
54003: PUSH
54004: LD_INT 0
54006: PPUSH
54007: LD_INT 3
54009: PPUSH
54010: CALL_OW 12
54014: PUSH
54015: LD_INT 0
54017: PPUSH
54018: LD_INT 3
54020: PPUSH
54021: CALL_OW 12
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// end ;
54038: LD_VAR 0 2
54042: RET
// export function PrepareTiger ( agressivity ) ; begin
54043: LD_INT 0
54045: PPUSH
// uc_side := 0 ;
54046: LD_ADDR_OWVAR 20
54050: PUSH
54051: LD_INT 0
54053: ST_TO_ADDR
// uc_nation := 0 ;
54054: LD_ADDR_OWVAR 21
54058: PUSH
54059: LD_INT 0
54061: ST_TO_ADDR
// hc_class := class_tiger ;
54062: LD_ADDR_OWVAR 28
54066: PUSH
54067: LD_INT 14
54069: ST_TO_ADDR
// hc_gallery :=  ;
54070: LD_ADDR_OWVAR 33
54074: PUSH
54075: LD_STRING 
54077: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54078: LD_ADDR_OWVAR 35
54082: PUSH
54083: LD_VAR 0 1
54087: NEG
54088: PPUSH
54089: LD_VAR 0 1
54093: PPUSH
54094: CALL_OW 12
54098: ST_TO_ADDR
// end ;
54099: LD_VAR 0 2
54103: RET
// export function PrepareEnchidna ( ) ; begin
54104: LD_INT 0
54106: PPUSH
// uc_side := 0 ;
54107: LD_ADDR_OWVAR 20
54111: PUSH
54112: LD_INT 0
54114: ST_TO_ADDR
// uc_nation := 0 ;
54115: LD_ADDR_OWVAR 21
54119: PUSH
54120: LD_INT 0
54122: ST_TO_ADDR
// hc_class := class_baggie ;
54123: LD_ADDR_OWVAR 28
54127: PUSH
54128: LD_INT 13
54130: ST_TO_ADDR
// hc_gallery :=  ;
54131: LD_ADDR_OWVAR 33
54135: PUSH
54136: LD_STRING 
54138: ST_TO_ADDR
// end ;
54139: LD_VAR 0 1
54143: RET
// export function PrepareFrog ( ) ; begin
54144: LD_INT 0
54146: PPUSH
// uc_side := 0 ;
54147: LD_ADDR_OWVAR 20
54151: PUSH
54152: LD_INT 0
54154: ST_TO_ADDR
// uc_nation := 0 ;
54155: LD_ADDR_OWVAR 21
54159: PUSH
54160: LD_INT 0
54162: ST_TO_ADDR
// hc_class := class_frog ;
54163: LD_ADDR_OWVAR 28
54167: PUSH
54168: LD_INT 19
54170: ST_TO_ADDR
// hc_gallery :=  ;
54171: LD_ADDR_OWVAR 33
54175: PUSH
54176: LD_STRING 
54178: ST_TO_ADDR
// end ;
54179: LD_VAR 0 1
54183: RET
// export function PrepareFish ( ) ; begin
54184: LD_INT 0
54186: PPUSH
// uc_side := 0 ;
54187: LD_ADDR_OWVAR 20
54191: PUSH
54192: LD_INT 0
54194: ST_TO_ADDR
// uc_nation := 0 ;
54195: LD_ADDR_OWVAR 21
54199: PUSH
54200: LD_INT 0
54202: ST_TO_ADDR
// hc_class := class_fish ;
54203: LD_ADDR_OWVAR 28
54207: PUSH
54208: LD_INT 20
54210: ST_TO_ADDR
// hc_gallery :=  ;
54211: LD_ADDR_OWVAR 33
54215: PUSH
54216: LD_STRING 
54218: ST_TO_ADDR
// end ;
54219: LD_VAR 0 1
54223: RET
// export function PrepareBird ( ) ; begin
54224: LD_INT 0
54226: PPUSH
// uc_side := 0 ;
54227: LD_ADDR_OWVAR 20
54231: PUSH
54232: LD_INT 0
54234: ST_TO_ADDR
// uc_nation := 0 ;
54235: LD_ADDR_OWVAR 21
54239: PUSH
54240: LD_INT 0
54242: ST_TO_ADDR
// hc_class := class_phororhacos ;
54243: LD_ADDR_OWVAR 28
54247: PUSH
54248: LD_INT 18
54250: ST_TO_ADDR
// hc_gallery :=  ;
54251: LD_ADDR_OWVAR 33
54255: PUSH
54256: LD_STRING 
54258: ST_TO_ADDR
// end ;
54259: LD_VAR 0 1
54263: RET
// export function PrepareHorse ( ) ; begin
54264: LD_INT 0
54266: PPUSH
// uc_side := 0 ;
54267: LD_ADDR_OWVAR 20
54271: PUSH
54272: LD_INT 0
54274: ST_TO_ADDR
// uc_nation := 0 ;
54275: LD_ADDR_OWVAR 21
54279: PUSH
54280: LD_INT 0
54282: ST_TO_ADDR
// hc_class := class_horse ;
54283: LD_ADDR_OWVAR 28
54287: PUSH
54288: LD_INT 21
54290: ST_TO_ADDR
// hc_gallery :=  ;
54291: LD_ADDR_OWVAR 33
54295: PUSH
54296: LD_STRING 
54298: ST_TO_ADDR
// end ;
54299: LD_VAR 0 1
54303: RET
// export function PrepareMastodont ( ) ; begin
54304: LD_INT 0
54306: PPUSH
// uc_side := 0 ;
54307: LD_ADDR_OWVAR 20
54311: PUSH
54312: LD_INT 0
54314: ST_TO_ADDR
// uc_nation := 0 ;
54315: LD_ADDR_OWVAR 21
54319: PUSH
54320: LD_INT 0
54322: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54323: LD_ADDR_OWVAR 37
54327: PUSH
54328: LD_INT 31
54330: ST_TO_ADDR
// vc_control := control_rider ;
54331: LD_ADDR_OWVAR 38
54335: PUSH
54336: LD_INT 4
54338: ST_TO_ADDR
// end ;
54339: LD_VAR 0 1
54343: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54344: LD_INT 0
54346: PPUSH
54347: PPUSH
54348: PPUSH
// uc_side = 0 ;
54349: LD_ADDR_OWVAR 20
54353: PUSH
54354: LD_INT 0
54356: ST_TO_ADDR
// uc_nation = 0 ;
54357: LD_ADDR_OWVAR 21
54361: PUSH
54362: LD_INT 0
54364: ST_TO_ADDR
// InitHc_All ( ) ;
54365: CALL_OW 584
// InitVc ;
54369: CALL_OW 20
// if mastodonts then
54373: LD_VAR 0 6
54377: IFFALSE 54444
// for i = 1 to mastodonts do
54379: LD_ADDR_VAR 0 11
54383: PUSH
54384: DOUBLE
54385: LD_INT 1
54387: DEC
54388: ST_TO_ADDR
54389: LD_VAR 0 6
54393: PUSH
54394: FOR_TO
54395: IFFALSE 54442
// begin vc_chassis := 31 ;
54397: LD_ADDR_OWVAR 37
54401: PUSH
54402: LD_INT 31
54404: ST_TO_ADDR
// vc_control := control_rider ;
54405: LD_ADDR_OWVAR 38
54409: PUSH
54410: LD_INT 4
54412: ST_TO_ADDR
// animal := CreateVehicle ;
54413: LD_ADDR_VAR 0 12
54417: PUSH
54418: CALL_OW 45
54422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54423: LD_VAR 0 12
54427: PPUSH
54428: LD_VAR 0 8
54432: PPUSH
54433: LD_INT 0
54435: PPUSH
54436: CALL 56572 0 3
// end ;
54440: GO 54394
54442: POP
54443: POP
// if horses then
54444: LD_VAR 0 5
54448: IFFALSE 54515
// for i = 1 to horses do
54450: LD_ADDR_VAR 0 11
54454: PUSH
54455: DOUBLE
54456: LD_INT 1
54458: DEC
54459: ST_TO_ADDR
54460: LD_VAR 0 5
54464: PUSH
54465: FOR_TO
54466: IFFALSE 54513
// begin hc_class := 21 ;
54468: LD_ADDR_OWVAR 28
54472: PUSH
54473: LD_INT 21
54475: ST_TO_ADDR
// hc_gallery :=  ;
54476: LD_ADDR_OWVAR 33
54480: PUSH
54481: LD_STRING 
54483: ST_TO_ADDR
// animal := CreateHuman ;
54484: LD_ADDR_VAR 0 12
54488: PUSH
54489: CALL_OW 44
54493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54494: LD_VAR 0 12
54498: PPUSH
54499: LD_VAR 0 8
54503: PPUSH
54504: LD_INT 0
54506: PPUSH
54507: CALL 56572 0 3
// end ;
54511: GO 54465
54513: POP
54514: POP
// if birds then
54515: LD_VAR 0 1
54519: IFFALSE 54586
// for i = 1 to birds do
54521: LD_ADDR_VAR 0 11
54525: PUSH
54526: DOUBLE
54527: LD_INT 1
54529: DEC
54530: ST_TO_ADDR
54531: LD_VAR 0 1
54535: PUSH
54536: FOR_TO
54537: IFFALSE 54584
// begin hc_class = 18 ;
54539: LD_ADDR_OWVAR 28
54543: PUSH
54544: LD_INT 18
54546: ST_TO_ADDR
// hc_gallery =  ;
54547: LD_ADDR_OWVAR 33
54551: PUSH
54552: LD_STRING 
54554: ST_TO_ADDR
// animal := CreateHuman ;
54555: LD_ADDR_VAR 0 12
54559: PUSH
54560: CALL_OW 44
54564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54565: LD_VAR 0 12
54569: PPUSH
54570: LD_VAR 0 8
54574: PPUSH
54575: LD_INT 0
54577: PPUSH
54578: CALL 56572 0 3
// end ;
54582: GO 54536
54584: POP
54585: POP
// if tigers then
54586: LD_VAR 0 2
54590: IFFALSE 54674
// for i = 1 to tigers do
54592: LD_ADDR_VAR 0 11
54596: PUSH
54597: DOUBLE
54598: LD_INT 1
54600: DEC
54601: ST_TO_ADDR
54602: LD_VAR 0 2
54606: PUSH
54607: FOR_TO
54608: IFFALSE 54672
// begin hc_class = class_tiger ;
54610: LD_ADDR_OWVAR 28
54614: PUSH
54615: LD_INT 14
54617: ST_TO_ADDR
// hc_gallery =  ;
54618: LD_ADDR_OWVAR 33
54622: PUSH
54623: LD_STRING 
54625: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54626: LD_ADDR_OWVAR 35
54630: PUSH
54631: LD_INT 7
54633: NEG
54634: PPUSH
54635: LD_INT 7
54637: PPUSH
54638: CALL_OW 12
54642: ST_TO_ADDR
// animal := CreateHuman ;
54643: LD_ADDR_VAR 0 12
54647: PUSH
54648: CALL_OW 44
54652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54653: LD_VAR 0 12
54657: PPUSH
54658: LD_VAR 0 8
54662: PPUSH
54663: LD_INT 0
54665: PPUSH
54666: CALL 56572 0 3
// end ;
54670: GO 54607
54672: POP
54673: POP
// if apemans then
54674: LD_VAR 0 3
54678: IFFALSE 54801
// for i = 1 to apemans do
54680: LD_ADDR_VAR 0 11
54684: PUSH
54685: DOUBLE
54686: LD_INT 1
54688: DEC
54689: ST_TO_ADDR
54690: LD_VAR 0 3
54694: PUSH
54695: FOR_TO
54696: IFFALSE 54799
// begin hc_class = class_apeman ;
54698: LD_ADDR_OWVAR 28
54702: PUSH
54703: LD_INT 12
54705: ST_TO_ADDR
// hc_gallery =  ;
54706: LD_ADDR_OWVAR 33
54710: PUSH
54711: LD_STRING 
54713: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54714: LD_ADDR_OWVAR 35
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PPUSH
54723: LD_INT 2
54725: PPUSH
54726: CALL_OW 12
54730: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54731: LD_ADDR_OWVAR 31
54735: PUSH
54736: LD_INT 1
54738: PPUSH
54739: LD_INT 3
54741: PPUSH
54742: CALL_OW 12
54746: PUSH
54747: LD_INT 1
54749: PPUSH
54750: LD_INT 3
54752: PPUSH
54753: CALL_OW 12
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// animal := CreateHuman ;
54770: LD_ADDR_VAR 0 12
54774: PUSH
54775: CALL_OW 44
54779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54780: LD_VAR 0 12
54784: PPUSH
54785: LD_VAR 0 8
54789: PPUSH
54790: LD_INT 0
54792: PPUSH
54793: CALL 56572 0 3
// end ;
54797: GO 54695
54799: POP
54800: POP
// if enchidnas then
54801: LD_VAR 0 4
54805: IFFALSE 54872
// for i = 1 to enchidnas do
54807: LD_ADDR_VAR 0 11
54811: PUSH
54812: DOUBLE
54813: LD_INT 1
54815: DEC
54816: ST_TO_ADDR
54817: LD_VAR 0 4
54821: PUSH
54822: FOR_TO
54823: IFFALSE 54870
// begin hc_class = 13 ;
54825: LD_ADDR_OWVAR 28
54829: PUSH
54830: LD_INT 13
54832: ST_TO_ADDR
// hc_gallery =  ;
54833: LD_ADDR_OWVAR 33
54837: PUSH
54838: LD_STRING 
54840: ST_TO_ADDR
// animal := CreateHuman ;
54841: LD_ADDR_VAR 0 12
54845: PUSH
54846: CALL_OW 44
54850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54851: LD_VAR 0 12
54855: PPUSH
54856: LD_VAR 0 8
54860: PPUSH
54861: LD_INT 0
54863: PPUSH
54864: CALL 56572 0 3
// end ;
54868: GO 54822
54870: POP
54871: POP
// if fishes then
54872: LD_VAR 0 7
54876: IFFALSE 54943
// for i = 1 to fishes do
54878: LD_ADDR_VAR 0 11
54882: PUSH
54883: DOUBLE
54884: LD_INT 1
54886: DEC
54887: ST_TO_ADDR
54888: LD_VAR 0 7
54892: PUSH
54893: FOR_TO
54894: IFFALSE 54941
// begin hc_class = 20 ;
54896: LD_ADDR_OWVAR 28
54900: PUSH
54901: LD_INT 20
54903: ST_TO_ADDR
// hc_gallery =  ;
54904: LD_ADDR_OWVAR 33
54908: PUSH
54909: LD_STRING 
54911: ST_TO_ADDR
// animal := CreateHuman ;
54912: LD_ADDR_VAR 0 12
54916: PUSH
54917: CALL_OW 44
54921: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54922: LD_VAR 0 12
54926: PPUSH
54927: LD_VAR 0 9
54931: PPUSH
54932: LD_INT 0
54934: PPUSH
54935: CALL 56572 0 3
// end ;
54939: GO 54893
54941: POP
54942: POP
// end ;
54943: LD_VAR 0 10
54947: RET
// export function WantHeal ( sci , unit ) ; begin
54948: LD_INT 0
54950: PPUSH
// if GetTaskList ( sci ) > 0 then
54951: LD_VAR 0 1
54955: PPUSH
54956: CALL_OW 437
54960: PUSH
54961: LD_INT 0
54963: GREATER
54964: IFFALSE 55034
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54966: LD_VAR 0 1
54970: PPUSH
54971: CALL_OW 437
54975: PUSH
54976: LD_INT 1
54978: ARRAY
54979: PUSH
54980: LD_INT 1
54982: ARRAY
54983: PUSH
54984: LD_STRING l
54986: EQUAL
54987: PUSH
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL_OW 437
54997: PUSH
54998: LD_INT 1
55000: ARRAY
55001: PUSH
55002: LD_INT 4
55004: ARRAY
55005: PUSH
55006: LD_VAR 0 2
55010: EQUAL
55011: AND
55012: IFFALSE 55024
// result := true else
55014: LD_ADDR_VAR 0 3
55018: PUSH
55019: LD_INT 1
55021: ST_TO_ADDR
55022: GO 55032
// result := false ;
55024: LD_ADDR_VAR 0 3
55028: PUSH
55029: LD_INT 0
55031: ST_TO_ADDR
// end else
55032: GO 55042
// result := false ;
55034: LD_ADDR_VAR 0 3
55038: PUSH
55039: LD_INT 0
55041: ST_TO_ADDR
// end ;
55042: LD_VAR 0 3
55046: RET
// export function HealTarget ( sci ) ; begin
55047: LD_INT 0
55049: PPUSH
// if not sci then
55050: LD_VAR 0 1
55054: NOT
55055: IFFALSE 55059
// exit ;
55057: GO 55124
// result := 0 ;
55059: LD_ADDR_VAR 0 2
55063: PUSH
55064: LD_INT 0
55066: ST_TO_ADDR
// if GetTaskList ( sci ) then
55067: LD_VAR 0 1
55071: PPUSH
55072: CALL_OW 437
55076: IFFALSE 55124
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55078: LD_VAR 0 1
55082: PPUSH
55083: CALL_OW 437
55087: PUSH
55088: LD_INT 1
55090: ARRAY
55091: PUSH
55092: LD_INT 1
55094: ARRAY
55095: PUSH
55096: LD_STRING l
55098: EQUAL
55099: IFFALSE 55124
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55101: LD_ADDR_VAR 0 2
55105: PUSH
55106: LD_VAR 0 1
55110: PPUSH
55111: CALL_OW 437
55115: PUSH
55116: LD_INT 1
55118: ARRAY
55119: PUSH
55120: LD_INT 4
55122: ARRAY
55123: ST_TO_ADDR
// end ;
55124: LD_VAR 0 2
55128: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
// if not base_units then
55135: LD_VAR 0 1
55139: NOT
55140: IFFALSE 55144
// exit ;
55142: GO 55231
// result := false ;
55144: LD_ADDR_VAR 0 2
55148: PUSH
55149: LD_INT 0
55151: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55152: LD_ADDR_VAR 0 5
55156: PUSH
55157: LD_VAR 0 1
55161: PPUSH
55162: LD_INT 21
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PPUSH
55172: CALL_OW 72
55176: ST_TO_ADDR
// if not tmp then
55177: LD_VAR 0 5
55181: NOT
55182: IFFALSE 55186
// exit ;
55184: GO 55231
// for i in tmp do
55186: LD_ADDR_VAR 0 3
55190: PUSH
55191: LD_VAR 0 5
55195: PUSH
55196: FOR_IN
55197: IFFALSE 55229
// begin result := EnemyInRange ( i , 22 ) ;
55199: LD_ADDR_VAR 0 2
55203: PUSH
55204: LD_VAR 0 3
55208: PPUSH
55209: LD_INT 22
55211: PPUSH
55212: CALL 52818 0 2
55216: ST_TO_ADDR
// if result then
55217: LD_VAR 0 2
55221: IFFALSE 55227
// exit ;
55223: POP
55224: POP
55225: GO 55231
// end ;
55227: GO 55196
55229: POP
55230: POP
// end ;
55231: LD_VAR 0 2
55235: RET
// export function FilterByTag ( units , tag ) ; begin
55236: LD_INT 0
55238: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55239: LD_ADDR_VAR 0 3
55243: PUSH
55244: LD_VAR 0 1
55248: PPUSH
55249: LD_INT 120
55251: PUSH
55252: LD_VAR 0 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PPUSH
55261: CALL_OW 72
55265: ST_TO_ADDR
// end ;
55266: LD_VAR 0 3
55270: RET
// export function IsDriver ( un ) ; begin
55271: LD_INT 0
55273: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55274: LD_ADDR_VAR 0 2
55278: PUSH
55279: LD_VAR 0 1
55283: PUSH
55284: LD_INT 55
55286: PUSH
55287: EMPTY
55288: LIST
55289: PPUSH
55290: CALL_OW 69
55294: IN
55295: ST_TO_ADDR
// end ;
55296: LD_VAR 0 2
55300: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55301: LD_INT 0
55303: PPUSH
55304: PPUSH
// list := [ ] ;
55305: LD_ADDR_VAR 0 5
55309: PUSH
55310: EMPTY
55311: ST_TO_ADDR
// case d of 0 :
55312: LD_VAR 0 3
55316: PUSH
55317: LD_INT 0
55319: DOUBLE
55320: EQUAL
55321: IFTRUE 55325
55323: GO 55458
55325: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55326: LD_ADDR_VAR 0 5
55330: PUSH
55331: LD_VAR 0 1
55335: PUSH
55336: LD_INT 4
55338: MINUS
55339: PUSH
55340: LD_VAR 0 2
55344: PUSH
55345: LD_INT 4
55347: MINUS
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: PUSH
55357: LD_VAR 0 1
55361: PUSH
55362: LD_INT 3
55364: MINUS
55365: PUSH
55366: LD_VAR 0 2
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: PUSH
55379: LD_VAR 0 1
55383: PUSH
55384: LD_INT 4
55386: PLUS
55387: PUSH
55388: LD_VAR 0 2
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: LIST
55400: PUSH
55401: LD_VAR 0 1
55405: PUSH
55406: LD_INT 3
55408: PLUS
55409: PUSH
55410: LD_VAR 0 2
55414: PUSH
55415: LD_INT 3
55417: PLUS
55418: PUSH
55419: LD_INT 5
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: LIST
55426: PUSH
55427: LD_VAR 0 1
55431: PUSH
55432: LD_VAR 0 2
55436: PUSH
55437: LD_INT 4
55439: PLUS
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// end ; 1 :
55456: GO 56156
55458: LD_INT 1
55460: DOUBLE
55461: EQUAL
55462: IFTRUE 55466
55464: GO 55599
55466: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55467: LD_ADDR_VAR 0 5
55471: PUSH
55472: LD_VAR 0 1
55476: PUSH
55477: LD_VAR 0 2
55481: PUSH
55482: LD_INT 4
55484: MINUS
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: PUSH
55494: LD_VAR 0 1
55498: PUSH
55499: LD_INT 3
55501: MINUS
55502: PUSH
55503: LD_VAR 0 2
55507: PUSH
55508: LD_INT 3
55510: MINUS
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: PUSH
55520: LD_VAR 0 1
55524: PUSH
55525: LD_INT 4
55527: MINUS
55528: PUSH
55529: LD_VAR 0 2
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: PUSH
55542: LD_VAR 0 1
55546: PUSH
55547: LD_VAR 0 2
55551: PUSH
55552: LD_INT 3
55554: PLUS
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: PUSH
55564: LD_VAR 0 1
55568: PUSH
55569: LD_INT 4
55571: PLUS
55572: PUSH
55573: LD_VAR 0 2
55577: PUSH
55578: LD_INT 4
55580: PLUS
55581: PUSH
55582: LD_INT 5
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// end ; 2 :
55597: GO 56156
55599: LD_INT 2
55601: DOUBLE
55602: EQUAL
55603: IFTRUE 55607
55605: GO 55736
55607: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55608: LD_ADDR_VAR 0 5
55612: PUSH
55613: LD_VAR 0 1
55617: PUSH
55618: LD_VAR 0 2
55622: PUSH
55623: LD_INT 3
55625: MINUS
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: PUSH
55635: LD_VAR 0 1
55639: PUSH
55640: LD_INT 4
55642: PLUS
55643: PUSH
55644: LD_VAR 0 2
55648: PUSH
55649: LD_INT 4
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: LIST
55656: PUSH
55657: LD_VAR 0 1
55661: PUSH
55662: LD_VAR 0 2
55666: PUSH
55667: LD_INT 4
55669: PLUS
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: PUSH
55679: LD_VAR 0 1
55683: PUSH
55684: LD_INT 3
55686: MINUS
55687: PUSH
55688: LD_VAR 0 2
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: PUSH
55701: LD_VAR 0 1
55705: PUSH
55706: LD_INT 4
55708: MINUS
55709: PUSH
55710: LD_VAR 0 2
55714: PUSH
55715: LD_INT 4
55717: MINUS
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: LIST
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// end ; 3 :
55734: GO 56156
55736: LD_INT 3
55738: DOUBLE
55739: EQUAL
55740: IFTRUE 55744
55742: GO 55877
55744: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55745: LD_ADDR_VAR 0 5
55749: PUSH
55750: LD_VAR 0 1
55754: PUSH
55755: LD_INT 3
55757: PLUS
55758: PUSH
55759: LD_VAR 0 2
55763: PUSH
55764: LD_INT 4
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: PUSH
55772: LD_VAR 0 1
55776: PUSH
55777: LD_INT 4
55779: PLUS
55780: PUSH
55781: LD_VAR 0 2
55785: PUSH
55786: LD_INT 4
55788: PLUS
55789: PUSH
55790: LD_INT 5
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: PUSH
55798: LD_VAR 0 1
55802: PUSH
55803: LD_INT 4
55805: MINUS
55806: PUSH
55807: LD_VAR 0 2
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: LIST
55819: PUSH
55820: LD_VAR 0 1
55824: PUSH
55825: LD_VAR 0 2
55829: PUSH
55830: LD_INT 4
55832: MINUS
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: PUSH
55842: LD_VAR 0 1
55846: PUSH
55847: LD_INT 3
55849: MINUS
55850: PUSH
55851: LD_VAR 0 2
55855: PUSH
55856: LD_INT 3
55858: MINUS
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// end ; 4 :
55875: GO 56156
55877: LD_INT 4
55879: DOUBLE
55880: EQUAL
55881: IFTRUE 55885
55883: GO 56018
55885: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55886: LD_ADDR_VAR 0 5
55890: PUSH
55891: LD_VAR 0 1
55895: PUSH
55896: LD_VAR 0 2
55900: PUSH
55901: LD_INT 4
55903: PLUS
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: PUSH
55913: LD_VAR 0 1
55917: PUSH
55918: LD_INT 3
55920: PLUS
55921: PUSH
55922: LD_VAR 0 2
55926: PUSH
55927: LD_INT 3
55929: PLUS
55930: PUSH
55931: LD_INT 5
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: PUSH
55939: LD_VAR 0 1
55943: PUSH
55944: LD_INT 4
55946: PLUS
55947: PUSH
55948: LD_VAR 0 2
55952: PUSH
55953: LD_INT 4
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: PUSH
55961: LD_VAR 0 1
55965: PUSH
55966: LD_VAR 0 2
55970: PUSH
55971: LD_INT 3
55973: MINUS
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: PUSH
55983: LD_VAR 0 1
55987: PUSH
55988: LD_INT 4
55990: MINUS
55991: PUSH
55992: LD_VAR 0 2
55996: PUSH
55997: LD_INT 4
55999: MINUS
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// end ; 5 :
56016: GO 56156
56018: LD_INT 5
56020: DOUBLE
56021: EQUAL
56022: IFTRUE 56026
56024: GO 56155
56026: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56027: LD_ADDR_VAR 0 5
56031: PUSH
56032: LD_VAR 0 1
56036: PUSH
56037: LD_INT 4
56039: MINUS
56040: PUSH
56041: LD_VAR 0 2
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: PUSH
56054: LD_VAR 0 1
56058: PUSH
56059: LD_VAR 0 2
56063: PUSH
56064: LD_INT 4
56066: MINUS
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: PUSH
56076: LD_VAR 0 1
56080: PUSH
56081: LD_INT 4
56083: PLUS
56084: PUSH
56085: LD_VAR 0 2
56089: PUSH
56090: LD_INT 4
56092: PLUS
56093: PUSH
56094: LD_INT 5
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: LIST
56101: PUSH
56102: LD_VAR 0 1
56106: PUSH
56107: LD_INT 3
56109: PLUS
56110: PUSH
56111: LD_VAR 0 2
56115: PUSH
56116: LD_INT 4
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: PUSH
56124: LD_VAR 0 1
56128: PUSH
56129: LD_VAR 0 2
56133: PUSH
56134: LD_INT 3
56136: PLUS
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// end ; end ;
56153: GO 56156
56155: POP
// result := list ;
56156: LD_ADDR_VAR 0 4
56160: PUSH
56161: LD_VAR 0 5
56165: ST_TO_ADDR
// end ;
56166: LD_VAR 0 4
56170: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56171: LD_INT 0
56173: PPUSH
56174: PPUSH
56175: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56176: LD_VAR 0 1
56180: NOT
56181: PUSH
56182: LD_VAR 0 2
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: LD_INT 4
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: IN
56205: NOT
56206: OR
56207: IFFALSE 56211
// exit ;
56209: GO 56294
// tmp := [ ] ;
56211: LD_ADDR_VAR 0 5
56215: PUSH
56216: EMPTY
56217: ST_TO_ADDR
// for i in units do
56218: LD_ADDR_VAR 0 4
56222: PUSH
56223: LD_VAR 0 1
56227: PUSH
56228: FOR_IN
56229: IFFALSE 56263
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56231: LD_ADDR_VAR 0 5
56235: PUSH
56236: LD_VAR 0 5
56240: PPUSH
56241: LD_VAR 0 4
56245: PPUSH
56246: LD_VAR 0 2
56250: PPUSH
56251: CALL_OW 259
56255: PPUSH
56256: CALL 57654 0 2
56260: ST_TO_ADDR
56261: GO 56228
56263: POP
56264: POP
// if not tmp then
56265: LD_VAR 0 5
56269: NOT
56270: IFFALSE 56274
// exit ;
56272: GO 56294
// result := SortListByListDesc ( units , tmp ) ;
56274: LD_ADDR_VAR 0 3
56278: PUSH
56279: LD_VAR 0 1
56283: PPUSH
56284: LD_VAR 0 5
56288: PPUSH
56289: CALL_OW 77
56293: ST_TO_ADDR
// end ;
56294: LD_VAR 0 3
56298: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56299: LD_INT 0
56301: PPUSH
56302: PPUSH
56303: PPUSH
// result := false ;
56304: LD_ADDR_VAR 0 3
56308: PUSH
56309: LD_INT 0
56311: ST_TO_ADDR
// if not building then
56312: LD_VAR 0 2
56316: NOT
56317: IFFALSE 56321
// exit ;
56319: GO 56459
// x := GetX ( building ) ;
56321: LD_ADDR_VAR 0 4
56325: PUSH
56326: LD_VAR 0 2
56330: PPUSH
56331: CALL_OW 250
56335: ST_TO_ADDR
// y := GetY ( building ) ;
56336: LD_ADDR_VAR 0 5
56340: PUSH
56341: LD_VAR 0 2
56345: PPUSH
56346: CALL_OW 251
56350: ST_TO_ADDR
// if not x or not y then
56351: LD_VAR 0 4
56355: NOT
56356: PUSH
56357: LD_VAR 0 5
56361: NOT
56362: OR
56363: IFFALSE 56367
// exit ;
56365: GO 56459
// if GetTaskList ( unit ) then
56367: LD_VAR 0 1
56371: PPUSH
56372: CALL_OW 437
56376: IFFALSE 56459
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56378: LD_STRING e
56380: PUSH
56381: LD_VAR 0 1
56385: PPUSH
56386: CALL_OW 437
56390: PUSH
56391: LD_INT 1
56393: ARRAY
56394: PUSH
56395: LD_INT 1
56397: ARRAY
56398: EQUAL
56399: PUSH
56400: LD_VAR 0 4
56404: PUSH
56405: LD_VAR 0 1
56409: PPUSH
56410: CALL_OW 437
56414: PUSH
56415: LD_INT 1
56417: ARRAY
56418: PUSH
56419: LD_INT 2
56421: ARRAY
56422: EQUAL
56423: AND
56424: PUSH
56425: LD_VAR 0 5
56429: PUSH
56430: LD_VAR 0 1
56434: PPUSH
56435: CALL_OW 437
56439: PUSH
56440: LD_INT 1
56442: ARRAY
56443: PUSH
56444: LD_INT 3
56446: ARRAY
56447: EQUAL
56448: AND
56449: IFFALSE 56459
// result := true end ;
56451: LD_ADDR_VAR 0 3
56455: PUSH
56456: LD_INT 1
56458: ST_TO_ADDR
// end ;
56459: LD_VAR 0 3
56463: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56464: LD_INT 0
56466: PPUSH
// result := false ;
56467: LD_ADDR_VAR 0 4
56471: PUSH
56472: LD_INT 0
56474: ST_TO_ADDR
// if GetTaskList ( unit ) then
56475: LD_VAR 0 1
56479: PPUSH
56480: CALL_OW 437
56484: IFFALSE 56567
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56486: LD_STRING M
56488: PUSH
56489: LD_VAR 0 1
56493: PPUSH
56494: CALL_OW 437
56498: PUSH
56499: LD_INT 1
56501: ARRAY
56502: PUSH
56503: LD_INT 1
56505: ARRAY
56506: EQUAL
56507: PUSH
56508: LD_VAR 0 2
56512: PUSH
56513: LD_VAR 0 1
56517: PPUSH
56518: CALL_OW 437
56522: PUSH
56523: LD_INT 1
56525: ARRAY
56526: PUSH
56527: LD_INT 2
56529: ARRAY
56530: EQUAL
56531: AND
56532: PUSH
56533: LD_VAR 0 3
56537: PUSH
56538: LD_VAR 0 1
56542: PPUSH
56543: CALL_OW 437
56547: PUSH
56548: LD_INT 1
56550: ARRAY
56551: PUSH
56552: LD_INT 3
56554: ARRAY
56555: EQUAL
56556: AND
56557: IFFALSE 56567
// result := true ;
56559: LD_ADDR_VAR 0 4
56563: PUSH
56564: LD_INT 1
56566: ST_TO_ADDR
// end ; end ;
56567: LD_VAR 0 4
56571: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56572: LD_INT 0
56574: PPUSH
56575: PPUSH
56576: PPUSH
56577: PPUSH
// if not unit or not area then
56578: LD_VAR 0 1
56582: NOT
56583: PUSH
56584: LD_VAR 0 2
56588: NOT
56589: OR
56590: IFFALSE 56594
// exit ;
56592: GO 56757
// tmp := AreaToList ( area , i ) ;
56594: LD_ADDR_VAR 0 6
56598: PUSH
56599: LD_VAR 0 2
56603: PPUSH
56604: LD_VAR 0 5
56608: PPUSH
56609: CALL_OW 517
56613: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56614: LD_ADDR_VAR 0 5
56618: PUSH
56619: DOUBLE
56620: LD_INT 1
56622: DEC
56623: ST_TO_ADDR
56624: LD_VAR 0 6
56628: PUSH
56629: LD_INT 1
56631: ARRAY
56632: PUSH
56633: FOR_TO
56634: IFFALSE 56755
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56636: LD_ADDR_VAR 0 7
56640: PUSH
56641: LD_VAR 0 6
56645: PUSH
56646: LD_INT 1
56648: ARRAY
56649: PUSH
56650: LD_VAR 0 5
56654: ARRAY
56655: PUSH
56656: LD_VAR 0 6
56660: PUSH
56661: LD_INT 2
56663: ARRAY
56664: PUSH
56665: LD_VAR 0 5
56669: ARRAY
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
56675: LD_INT 92
56677: PUSH
56678: LD_VAR 0 7
56682: PUSH
56683: LD_INT 1
56685: ARRAY
56686: PUSH
56687: LD_VAR 0 7
56691: PUSH
56692: LD_INT 2
56694: ARRAY
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: PPUSH
56705: CALL_OW 69
56709: PUSH
56710: LD_INT 0
56712: EQUAL
56713: IFFALSE 56753
// begin PlaceUnitArea ( unit , area , mode ) ;
56715: LD_VAR 0 1
56719: PPUSH
56720: LD_VAR 0 2
56724: PPUSH
56725: LD_VAR 0 3
56729: PPUSH
56730: CALL_OW 49
// result := IsPlaced ( unit ) ;
56734: LD_ADDR_VAR 0 4
56738: PUSH
56739: LD_VAR 0 1
56743: PPUSH
56744: CALL_OW 305
56748: ST_TO_ADDR
// exit ;
56749: POP
56750: POP
56751: GO 56757
// end ; end ;
56753: GO 56633
56755: POP
56756: POP
// end ;
56757: LD_VAR 0 4
56761: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56762: LD_INT 0
56764: PPUSH
56765: PPUSH
56766: PPUSH
// if not side or side > 8 then
56767: LD_VAR 0 1
56771: NOT
56772: PUSH
56773: LD_VAR 0 1
56777: PUSH
56778: LD_INT 8
56780: GREATER
56781: OR
56782: IFFALSE 56786
// exit ;
56784: GO 56973
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56786: LD_ADDR_VAR 0 4
56790: PUSH
56791: LD_INT 22
56793: PUSH
56794: LD_VAR 0 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 21
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PPUSH
56817: CALL_OW 69
56821: ST_TO_ADDR
// if not tmp then
56822: LD_VAR 0 4
56826: NOT
56827: IFFALSE 56831
// exit ;
56829: GO 56973
// enable_addtolog := true ;
56831: LD_ADDR_OWVAR 81
56835: PUSH
56836: LD_INT 1
56838: ST_TO_ADDR
// AddToLog ( [ ) ;
56839: LD_STRING [
56841: PPUSH
56842: CALL_OW 561
// for i in tmp do
56846: LD_ADDR_VAR 0 3
56850: PUSH
56851: LD_VAR 0 4
56855: PUSH
56856: FOR_IN
56857: IFFALSE 56964
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56859: LD_STRING [
56861: PUSH
56862: LD_VAR 0 3
56866: PPUSH
56867: CALL_OW 266
56871: STR
56872: PUSH
56873: LD_STRING , 
56875: STR
56876: PUSH
56877: LD_VAR 0 3
56881: PPUSH
56882: CALL_OW 250
56886: STR
56887: PUSH
56888: LD_STRING , 
56890: STR
56891: PUSH
56892: LD_VAR 0 3
56896: PPUSH
56897: CALL_OW 251
56901: STR
56902: PUSH
56903: LD_STRING , 
56905: STR
56906: PUSH
56907: LD_VAR 0 3
56911: PPUSH
56912: CALL_OW 254
56916: STR
56917: PUSH
56918: LD_STRING , 
56920: STR
56921: PUSH
56922: LD_VAR 0 3
56926: PPUSH
56927: LD_INT 1
56929: PPUSH
56930: CALL_OW 268
56934: STR
56935: PUSH
56936: LD_STRING , 
56938: STR
56939: PUSH
56940: LD_VAR 0 3
56944: PPUSH
56945: LD_INT 2
56947: PPUSH
56948: CALL_OW 268
56952: STR
56953: PUSH
56954: LD_STRING ],
56956: STR
56957: PPUSH
56958: CALL_OW 561
// end ;
56962: GO 56856
56964: POP
56965: POP
// AddToLog ( ]; ) ;
56966: LD_STRING ];
56968: PPUSH
56969: CALL_OW 561
// end ;
56973: LD_VAR 0 2
56977: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56978: LD_INT 0
56980: PPUSH
56981: PPUSH
56982: PPUSH
56983: PPUSH
56984: PPUSH
// if not area or not rate or not max then
56985: LD_VAR 0 1
56989: NOT
56990: PUSH
56991: LD_VAR 0 2
56995: NOT
56996: OR
56997: PUSH
56998: LD_VAR 0 4
57002: NOT
57003: OR
57004: IFFALSE 57008
// exit ;
57006: GO 57197
// while 1 do
57008: LD_INT 1
57010: IFFALSE 57197
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57012: LD_ADDR_VAR 0 9
57016: PUSH
57017: LD_VAR 0 1
57021: PPUSH
57022: LD_INT 1
57024: PPUSH
57025: CALL_OW 287
57029: PUSH
57030: LD_INT 10
57032: MUL
57033: ST_TO_ADDR
// r := rate / 10 ;
57034: LD_ADDR_VAR 0 7
57038: PUSH
57039: LD_VAR 0 2
57043: PUSH
57044: LD_INT 10
57046: DIVREAL
57047: ST_TO_ADDR
// time := 1 1$00 ;
57048: LD_ADDR_VAR 0 8
57052: PUSH
57053: LD_INT 2100
57055: ST_TO_ADDR
// if amount < min then
57056: LD_VAR 0 9
57060: PUSH
57061: LD_VAR 0 3
57065: LESS
57066: IFFALSE 57084
// r := r * 2 else
57068: LD_ADDR_VAR 0 7
57072: PUSH
57073: LD_VAR 0 7
57077: PUSH
57078: LD_INT 2
57080: MUL
57081: ST_TO_ADDR
57082: GO 57110
// if amount > max then
57084: LD_VAR 0 9
57088: PUSH
57089: LD_VAR 0 4
57093: GREATER
57094: IFFALSE 57110
// r := r / 2 ;
57096: LD_ADDR_VAR 0 7
57100: PUSH
57101: LD_VAR 0 7
57105: PUSH
57106: LD_INT 2
57108: DIVREAL
57109: ST_TO_ADDR
// time := time / r ;
57110: LD_ADDR_VAR 0 8
57114: PUSH
57115: LD_VAR 0 8
57119: PUSH
57120: LD_VAR 0 7
57124: DIVREAL
57125: ST_TO_ADDR
// if time < 0 then
57126: LD_VAR 0 8
57130: PUSH
57131: LD_INT 0
57133: LESS
57134: IFFALSE 57151
// time := time * - 1 ;
57136: LD_ADDR_VAR 0 8
57140: PUSH
57141: LD_VAR 0 8
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: MUL
57150: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57151: LD_VAR 0 8
57155: PUSH
57156: LD_INT 35
57158: PPUSH
57159: LD_INT 875
57161: PPUSH
57162: CALL_OW 12
57166: PLUS
57167: PPUSH
57168: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57172: LD_INT 1
57174: PPUSH
57175: LD_INT 5
57177: PPUSH
57178: CALL_OW 12
57182: PPUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: LD_INT 1
57190: PPUSH
57191: CALL_OW 55
// end ;
57195: GO 57008
// end ;
57197: LD_VAR 0 5
57201: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57202: LD_INT 0
57204: PPUSH
57205: PPUSH
57206: PPUSH
57207: PPUSH
57208: PPUSH
57209: PPUSH
57210: PPUSH
57211: PPUSH
// if not turrets or not factories then
57212: LD_VAR 0 1
57216: NOT
57217: PUSH
57218: LD_VAR 0 2
57222: NOT
57223: OR
57224: IFFALSE 57228
// exit ;
57226: GO 57535
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57228: LD_ADDR_VAR 0 10
57232: PUSH
57233: LD_INT 5
57235: PUSH
57236: LD_INT 6
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 5
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 24
57270: PUSH
57271: LD_INT 25
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 23
57280: PUSH
57281: LD_INT 27
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 42
57294: PUSH
57295: LD_INT 43
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 44
57304: PUSH
57305: LD_INT 46
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 45
57314: PUSH
57315: LD_INT 47
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// result := [ ] ;
57332: LD_ADDR_VAR 0 3
57336: PUSH
57337: EMPTY
57338: ST_TO_ADDR
// for i in turrets do
57339: LD_ADDR_VAR 0 4
57343: PUSH
57344: LD_VAR 0 1
57348: PUSH
57349: FOR_IN
57350: IFFALSE 57533
// begin nat := GetNation ( i ) ;
57352: LD_ADDR_VAR 0 7
57356: PUSH
57357: LD_VAR 0 4
57361: PPUSH
57362: CALL_OW 248
57366: ST_TO_ADDR
// weapon := 0 ;
57367: LD_ADDR_VAR 0 8
57371: PUSH
57372: LD_INT 0
57374: ST_TO_ADDR
// if not nat then
57375: LD_VAR 0 7
57379: NOT
57380: IFFALSE 57384
// continue ;
57382: GO 57349
// for j in list [ nat ] do
57384: LD_ADDR_VAR 0 5
57388: PUSH
57389: LD_VAR 0 10
57393: PUSH
57394: LD_VAR 0 7
57398: ARRAY
57399: PUSH
57400: FOR_IN
57401: IFFALSE 57442
// if GetBWeapon ( i ) = j [ 1 ] then
57403: LD_VAR 0 4
57407: PPUSH
57408: CALL_OW 269
57412: PUSH
57413: LD_VAR 0 5
57417: PUSH
57418: LD_INT 1
57420: ARRAY
57421: EQUAL
57422: IFFALSE 57440
// begin weapon := j [ 2 ] ;
57424: LD_ADDR_VAR 0 8
57428: PUSH
57429: LD_VAR 0 5
57433: PUSH
57434: LD_INT 2
57436: ARRAY
57437: ST_TO_ADDR
// break ;
57438: GO 57442
// end ;
57440: GO 57400
57442: POP
57443: POP
// if not weapon then
57444: LD_VAR 0 8
57448: NOT
57449: IFFALSE 57453
// continue ;
57451: GO 57349
// for k in factories do
57453: LD_ADDR_VAR 0 6
57457: PUSH
57458: LD_VAR 0 2
57462: PUSH
57463: FOR_IN
57464: IFFALSE 57529
// begin weapons := AvailableWeaponList ( k ) ;
57466: LD_ADDR_VAR 0 9
57470: PUSH
57471: LD_VAR 0 6
57475: PPUSH
57476: CALL_OW 478
57480: ST_TO_ADDR
// if not weapons then
57481: LD_VAR 0 9
57485: NOT
57486: IFFALSE 57490
// continue ;
57488: GO 57463
// if weapon in weapons then
57490: LD_VAR 0 8
57494: PUSH
57495: LD_VAR 0 9
57499: IN
57500: IFFALSE 57527
// begin result := [ i , weapon ] ;
57502: LD_ADDR_VAR 0 3
57506: PUSH
57507: LD_VAR 0 4
57511: PUSH
57512: LD_VAR 0 8
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: ST_TO_ADDR
// exit ;
57521: POP
57522: POP
57523: POP
57524: POP
57525: GO 57535
// end ; end ;
57527: GO 57463
57529: POP
57530: POP
// end ;
57531: GO 57349
57533: POP
57534: POP
// end ;
57535: LD_VAR 0 3
57539: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57540: LD_INT 0
57542: PPUSH
// if not side or side > 8 then
57543: LD_VAR 0 3
57547: NOT
57548: PUSH
57549: LD_VAR 0 3
57553: PUSH
57554: LD_INT 8
57556: GREATER
57557: OR
57558: IFFALSE 57562
// exit ;
57560: GO 57621
// if not range then
57562: LD_VAR 0 4
57566: NOT
57567: IFFALSE 57578
// range := - 12 ;
57569: LD_ADDR_VAR 0 4
57573: PUSH
57574: LD_INT 12
57576: NEG
57577: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57578: LD_VAR 0 1
57582: PPUSH
57583: LD_VAR 0 2
57587: PPUSH
57588: LD_VAR 0 3
57592: PPUSH
57593: LD_VAR 0 4
57597: PPUSH
57598: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57602: LD_VAR 0 1
57606: PPUSH
57607: LD_VAR 0 2
57611: PPUSH
57612: LD_VAR 0 3
57616: PPUSH
57617: CALL_OW 331
// end ;
57621: LD_VAR 0 5
57625: RET
// export function Video ( mode ) ; begin
57626: LD_INT 0
57628: PPUSH
// ingame_video = mode ;
57629: LD_ADDR_OWVAR 52
57633: PUSH
57634: LD_VAR 0 1
57638: ST_TO_ADDR
// interface_hidden = mode ;
57639: LD_ADDR_OWVAR 54
57643: PUSH
57644: LD_VAR 0 1
57648: ST_TO_ADDR
// end ;
57649: LD_VAR 0 2
57653: RET
// export function Join ( array , element ) ; begin
57654: LD_INT 0
57656: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57657: LD_ADDR_VAR 0 3
57661: PUSH
57662: LD_VAR 0 1
57666: PPUSH
57667: LD_VAR 0 1
57671: PUSH
57672: LD_INT 1
57674: PLUS
57675: PPUSH
57676: LD_VAR 0 2
57680: PPUSH
57681: CALL_OW 1
57685: ST_TO_ADDR
// end ;
57686: LD_VAR 0 3
57690: RET
// export function JoinUnion ( array , element ) ; begin
57691: LD_INT 0
57693: PPUSH
// result := array union element ;
57694: LD_ADDR_VAR 0 3
57698: PUSH
57699: LD_VAR 0 1
57703: PUSH
57704: LD_VAR 0 2
57708: UNION
57709: ST_TO_ADDR
// end ;
57710: LD_VAR 0 3
57714: RET
// export function GetBehemoths ( side ) ; begin
57715: LD_INT 0
57717: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57718: LD_ADDR_VAR 0 2
57722: PUSH
57723: LD_INT 22
57725: PUSH
57726: LD_VAR 0 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 31
57737: PUSH
57738: LD_INT 25
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PPUSH
57749: CALL_OW 69
57753: ST_TO_ADDR
// end ;
57754: LD_VAR 0 2
57758: RET
// export function Shuffle ( array ) ; var i , index ; begin
57759: LD_INT 0
57761: PPUSH
57762: PPUSH
57763: PPUSH
// result := [ ] ;
57764: LD_ADDR_VAR 0 2
57768: PUSH
57769: EMPTY
57770: ST_TO_ADDR
// if not array then
57771: LD_VAR 0 1
57775: NOT
57776: IFFALSE 57780
// exit ;
57778: GO 57879
// Randomize ;
57780: CALL_OW 10
// for i = array downto 1 do
57784: LD_ADDR_VAR 0 3
57788: PUSH
57789: DOUBLE
57790: LD_VAR 0 1
57794: INC
57795: ST_TO_ADDR
57796: LD_INT 1
57798: PUSH
57799: FOR_DOWNTO
57800: IFFALSE 57877
// begin index := rand ( 1 , array ) ;
57802: LD_ADDR_VAR 0 4
57806: PUSH
57807: LD_INT 1
57809: PPUSH
57810: LD_VAR 0 1
57814: PPUSH
57815: CALL_OW 12
57819: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57820: LD_ADDR_VAR 0 2
57824: PUSH
57825: LD_VAR 0 2
57829: PPUSH
57830: LD_VAR 0 2
57834: PUSH
57835: LD_INT 1
57837: PLUS
57838: PPUSH
57839: LD_VAR 0 1
57843: PUSH
57844: LD_VAR 0 4
57848: ARRAY
57849: PPUSH
57850: CALL_OW 2
57854: ST_TO_ADDR
// array := Delete ( array , index ) ;
57855: LD_ADDR_VAR 0 1
57859: PUSH
57860: LD_VAR 0 1
57864: PPUSH
57865: LD_VAR 0 4
57869: PPUSH
57870: CALL_OW 3
57874: ST_TO_ADDR
// end ;
57875: GO 57799
57877: POP
57878: POP
// end ;
57879: LD_VAR 0 2
57883: RET
// export function GetBaseMaterials ( base ) ; begin
57884: LD_INT 0
57886: PPUSH
// result := [ 0 , 0 , 0 ] ;
57887: LD_ADDR_VAR 0 2
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: ST_TO_ADDR
// if not base then
57906: LD_VAR 0 1
57910: NOT
57911: IFFALSE 57915
// exit ;
57913: GO 57964
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57915: LD_ADDR_VAR 0 2
57919: PUSH
57920: LD_VAR 0 1
57924: PPUSH
57925: LD_INT 1
57927: PPUSH
57928: CALL_OW 275
57932: PUSH
57933: LD_VAR 0 1
57937: PPUSH
57938: LD_INT 2
57940: PPUSH
57941: CALL_OW 275
57945: PUSH
57946: LD_VAR 0 1
57950: PPUSH
57951: LD_INT 3
57953: PPUSH
57954: CALL_OW 275
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// end ;
57964: LD_VAR 0 2
57968: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57969: LD_INT 0
57971: PPUSH
57972: PPUSH
// result := array ;
57973: LD_ADDR_VAR 0 3
57977: PUSH
57978: LD_VAR 0 1
57982: ST_TO_ADDR
// if size >= result then
57983: LD_VAR 0 2
57987: PUSH
57988: LD_VAR 0 3
57992: GREATEREQUAL
57993: IFFALSE 57997
// exit ;
57995: GO 58047
// if size then
57997: LD_VAR 0 2
58001: IFFALSE 58047
// for i := array downto size do
58003: LD_ADDR_VAR 0 4
58007: PUSH
58008: DOUBLE
58009: LD_VAR 0 1
58013: INC
58014: ST_TO_ADDR
58015: LD_VAR 0 2
58019: PUSH
58020: FOR_DOWNTO
58021: IFFALSE 58045
// result := Delete ( result , result ) ;
58023: LD_ADDR_VAR 0 3
58027: PUSH
58028: LD_VAR 0 3
58032: PPUSH
58033: LD_VAR 0 3
58037: PPUSH
58038: CALL_OW 3
58042: ST_TO_ADDR
58043: GO 58020
58045: POP
58046: POP
// end ;
58047: LD_VAR 0 3
58051: RET
// export function ComExit ( unit ) ; var tmp ; begin
58052: LD_INT 0
58054: PPUSH
58055: PPUSH
// if not IsInUnit ( unit ) then
58056: LD_VAR 0 1
58060: PPUSH
58061: CALL_OW 310
58065: NOT
58066: IFFALSE 58070
// exit ;
58068: GO 58130
// tmp := IsInUnit ( unit ) ;
58070: LD_ADDR_VAR 0 3
58074: PUSH
58075: LD_VAR 0 1
58079: PPUSH
58080: CALL_OW 310
58084: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58085: LD_VAR 0 3
58089: PPUSH
58090: CALL_OW 247
58094: PUSH
58095: LD_INT 2
58097: EQUAL
58098: IFFALSE 58111
// ComExitVehicle ( unit ) else
58100: LD_VAR 0 1
58104: PPUSH
58105: CALL_OW 121
58109: GO 58120
// ComExitBuilding ( unit ) ;
58111: LD_VAR 0 1
58115: PPUSH
58116: CALL_OW 122
// result := tmp ;
58120: LD_ADDR_VAR 0 2
58124: PUSH
58125: LD_VAR 0 3
58129: ST_TO_ADDR
// end ;
58130: LD_VAR 0 2
58134: RET
// export function ComExitAll ( units ) ; var i ; begin
58135: LD_INT 0
58137: PPUSH
58138: PPUSH
// if not units then
58139: LD_VAR 0 1
58143: NOT
58144: IFFALSE 58148
// exit ;
58146: GO 58174
// for i in units do
58148: LD_ADDR_VAR 0 3
58152: PUSH
58153: LD_VAR 0 1
58157: PUSH
58158: FOR_IN
58159: IFFALSE 58172
// ComExit ( i ) ;
58161: LD_VAR 0 3
58165: PPUSH
58166: CALL 58052 0 1
58170: GO 58158
58172: POP
58173: POP
// end ;
58174: LD_VAR 0 2
58178: RET
// export function ResetHc ; begin
58179: LD_INT 0
58181: PPUSH
// InitHc ;
58182: CALL_OW 19
// hc_importance := 0 ;
58186: LD_ADDR_OWVAR 32
58190: PUSH
58191: LD_INT 0
58193: ST_TO_ADDR
// end ;
58194: LD_VAR 0 1
58198: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58199: LD_INT 0
58201: PPUSH
58202: PPUSH
58203: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58204: LD_ADDR_VAR 0 6
58208: PUSH
58209: LD_VAR 0 1
58213: PUSH
58214: LD_VAR 0 3
58218: PLUS
58219: PUSH
58220: LD_INT 2
58222: DIV
58223: ST_TO_ADDR
// if _x < 0 then
58224: LD_VAR 0 6
58228: PUSH
58229: LD_INT 0
58231: LESS
58232: IFFALSE 58249
// _x := _x * - 1 ;
58234: LD_ADDR_VAR 0 6
58238: PUSH
58239: LD_VAR 0 6
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: MUL
58248: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58249: LD_ADDR_VAR 0 7
58253: PUSH
58254: LD_VAR 0 2
58258: PUSH
58259: LD_VAR 0 4
58263: PLUS
58264: PUSH
58265: LD_INT 2
58267: DIV
58268: ST_TO_ADDR
// if _y < 0 then
58269: LD_VAR 0 7
58273: PUSH
58274: LD_INT 0
58276: LESS
58277: IFFALSE 58294
// _y := _y * - 1 ;
58279: LD_ADDR_VAR 0 7
58283: PUSH
58284: LD_VAR 0 7
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: MUL
58293: ST_TO_ADDR
// result := [ _x , _y ] ;
58294: LD_ADDR_VAR 0 5
58298: PUSH
58299: LD_VAR 0 6
58303: PUSH
58304: LD_VAR 0 7
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: ST_TO_ADDR
// end ;
58313: LD_VAR 0 5
58317: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58318: LD_INT 0
58320: PPUSH
58321: PPUSH
58322: PPUSH
58323: PPUSH
// task := GetTaskList ( unit ) ;
58324: LD_ADDR_VAR 0 7
58328: PUSH
58329: LD_VAR 0 1
58333: PPUSH
58334: CALL_OW 437
58338: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58339: LD_VAR 0 7
58343: NOT
58344: PUSH
58345: LD_VAR 0 1
58349: PPUSH
58350: LD_VAR 0 2
58354: PPUSH
58355: CALL_OW 308
58359: NOT
58360: AND
58361: IFFALSE 58365
// exit ;
58363: GO 58483
// if IsInArea ( unit , area ) then
58365: LD_VAR 0 1
58369: PPUSH
58370: LD_VAR 0 2
58374: PPUSH
58375: CALL_OW 308
58379: IFFALSE 58397
// begin ComMoveToArea ( unit , goAway ) ;
58381: LD_VAR 0 1
58385: PPUSH
58386: LD_VAR 0 3
58390: PPUSH
58391: CALL_OW 113
// exit ;
58395: GO 58483
// end ; if task [ 1 ] [ 1 ] <> M then
58397: LD_VAR 0 7
58401: PUSH
58402: LD_INT 1
58404: ARRAY
58405: PUSH
58406: LD_INT 1
58408: ARRAY
58409: PUSH
58410: LD_STRING M
58412: NONEQUAL
58413: IFFALSE 58417
// exit ;
58415: GO 58483
// x := task [ 1 ] [ 2 ] ;
58417: LD_ADDR_VAR 0 5
58421: PUSH
58422: LD_VAR 0 7
58426: PUSH
58427: LD_INT 1
58429: ARRAY
58430: PUSH
58431: LD_INT 2
58433: ARRAY
58434: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58435: LD_ADDR_VAR 0 6
58439: PUSH
58440: LD_VAR 0 7
58444: PUSH
58445: LD_INT 1
58447: ARRAY
58448: PUSH
58449: LD_INT 3
58451: ARRAY
58452: ST_TO_ADDR
// if InArea ( x , y , area ) then
58453: LD_VAR 0 5
58457: PPUSH
58458: LD_VAR 0 6
58462: PPUSH
58463: LD_VAR 0 2
58467: PPUSH
58468: CALL_OW 309
58472: IFFALSE 58483
// ComStop ( unit ) ;
58474: LD_VAR 0 1
58478: PPUSH
58479: CALL_OW 141
// end ;
58483: LD_VAR 0 4
58487: RET
// export function Abs ( value ) ; begin
58488: LD_INT 0
58490: PPUSH
// result := value ;
58491: LD_ADDR_VAR 0 2
58495: PUSH
58496: LD_VAR 0 1
58500: ST_TO_ADDR
// if value < 0 then
58501: LD_VAR 0 1
58505: PUSH
58506: LD_INT 0
58508: LESS
58509: IFFALSE 58526
// result := value * - 1 ;
58511: LD_ADDR_VAR 0 2
58515: PUSH
58516: LD_VAR 0 1
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: MUL
58525: ST_TO_ADDR
// end ;
58526: LD_VAR 0 2
58530: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58531: LD_INT 0
58533: PPUSH
58534: PPUSH
58535: PPUSH
58536: PPUSH
58537: PPUSH
58538: PPUSH
58539: PPUSH
58540: PPUSH
// if not unit or not building then
58541: LD_VAR 0 1
58545: NOT
58546: PUSH
58547: LD_VAR 0 2
58551: NOT
58552: OR
58553: IFFALSE 58557
// exit ;
58555: GO 58783
// x := GetX ( building ) ;
58557: LD_ADDR_VAR 0 4
58561: PUSH
58562: LD_VAR 0 2
58566: PPUSH
58567: CALL_OW 250
58571: ST_TO_ADDR
// y := GetY ( building ) ;
58572: LD_ADDR_VAR 0 6
58576: PUSH
58577: LD_VAR 0 2
58581: PPUSH
58582: CALL_OW 251
58586: ST_TO_ADDR
// d := GetDir ( building ) ;
58587: LD_ADDR_VAR 0 8
58591: PUSH
58592: LD_VAR 0 2
58596: PPUSH
58597: CALL_OW 254
58601: ST_TO_ADDR
// r := 4 ;
58602: LD_ADDR_VAR 0 9
58606: PUSH
58607: LD_INT 4
58609: ST_TO_ADDR
// for i := 1 to 5 do
58610: LD_ADDR_VAR 0 10
58614: PUSH
58615: DOUBLE
58616: LD_INT 1
58618: DEC
58619: ST_TO_ADDR
58620: LD_INT 5
58622: PUSH
58623: FOR_TO
58624: IFFALSE 58781
// begin _x := ShiftX ( x , d , r + i ) ;
58626: LD_ADDR_VAR 0 5
58630: PUSH
58631: LD_VAR 0 4
58635: PPUSH
58636: LD_VAR 0 8
58640: PPUSH
58641: LD_VAR 0 9
58645: PUSH
58646: LD_VAR 0 10
58650: PLUS
58651: PPUSH
58652: CALL_OW 272
58656: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58657: LD_ADDR_VAR 0 7
58661: PUSH
58662: LD_VAR 0 6
58666: PPUSH
58667: LD_VAR 0 8
58671: PPUSH
58672: LD_VAR 0 9
58676: PUSH
58677: LD_VAR 0 10
58681: PLUS
58682: PPUSH
58683: CALL_OW 273
58687: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58688: LD_VAR 0 5
58692: PPUSH
58693: LD_VAR 0 7
58697: PPUSH
58698: CALL_OW 488
58702: PUSH
58703: LD_VAR 0 5
58707: PPUSH
58708: LD_VAR 0 7
58712: PPUSH
58713: CALL_OW 428
58717: PPUSH
58718: CALL_OW 247
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: IN
58733: NOT
58734: AND
58735: IFFALSE 58779
// begin ComMoveXY ( unit , _x , _y ) ;
58737: LD_VAR 0 1
58741: PPUSH
58742: LD_VAR 0 5
58746: PPUSH
58747: LD_VAR 0 7
58751: PPUSH
58752: CALL_OW 111
// result := [ _x , _y ] ;
58756: LD_ADDR_VAR 0 3
58760: PUSH
58761: LD_VAR 0 5
58765: PUSH
58766: LD_VAR 0 7
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: ST_TO_ADDR
// exit ;
58775: POP
58776: POP
58777: GO 58783
// end ; end ;
58779: GO 58623
58781: POP
58782: POP
// end ;
58783: LD_VAR 0 3
58787: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58788: LD_INT 0
58790: PPUSH
58791: PPUSH
58792: PPUSH
// result := 0 ;
58793: LD_ADDR_VAR 0 3
58797: PUSH
58798: LD_INT 0
58800: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58801: LD_VAR 0 1
58805: PUSH
58806: LD_INT 0
58808: LESS
58809: PUSH
58810: LD_VAR 0 1
58814: PUSH
58815: LD_INT 8
58817: GREATER
58818: OR
58819: PUSH
58820: LD_VAR 0 2
58824: PUSH
58825: LD_INT 0
58827: LESS
58828: OR
58829: PUSH
58830: LD_VAR 0 2
58834: PUSH
58835: LD_INT 8
58837: GREATER
58838: OR
58839: IFFALSE 58843
// exit ;
58841: GO 58918
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58843: LD_ADDR_VAR 0 4
58847: PUSH
58848: LD_INT 22
58850: PUSH
58851: LD_VAR 0 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PPUSH
58860: CALL_OW 69
58864: PUSH
58865: FOR_IN
58866: IFFALSE 58916
// begin un := UnitShoot ( i ) ;
58868: LD_ADDR_VAR 0 5
58872: PUSH
58873: LD_VAR 0 4
58877: PPUSH
58878: CALL_OW 504
58882: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58883: LD_VAR 0 5
58887: PPUSH
58888: CALL_OW 255
58892: PUSH
58893: LD_VAR 0 1
58897: EQUAL
58898: IFFALSE 58914
// begin result := un ;
58900: LD_ADDR_VAR 0 3
58904: PUSH
58905: LD_VAR 0 5
58909: ST_TO_ADDR
// exit ;
58910: POP
58911: POP
58912: GO 58918
// end ; end ;
58914: GO 58865
58916: POP
58917: POP
// end ;
58918: LD_VAR 0 3
58922: RET
// export function GetCargoBay ( units ) ; begin
58923: LD_INT 0
58925: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58926: LD_ADDR_VAR 0 2
58930: PUSH
58931: LD_VAR 0 1
58935: PPUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 34
58941: PUSH
58942: LD_INT 12
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 34
58951: PUSH
58952: LD_INT 51
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 34
58961: PUSH
58962: LD_INT 32
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 34
58971: PUSH
58972: LD_INT 89
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: PPUSH
58986: CALL_OW 72
58990: ST_TO_ADDR
// end ;
58991: LD_VAR 0 2
58995: RET
// export function Negate ( value ) ; begin
58996: LD_INT 0
58998: PPUSH
// result := not value ;
58999: LD_ADDR_VAR 0 2
59003: PUSH
59004: LD_VAR 0 1
59008: NOT
59009: ST_TO_ADDR
// end ;
59010: LD_VAR 0 2
59014: RET
// export function Inc ( value ) ; begin
59015: LD_INT 0
59017: PPUSH
// result := value + 1 ;
59018: LD_ADDR_VAR 0 2
59022: PUSH
59023: LD_VAR 0 1
59027: PUSH
59028: LD_INT 1
59030: PLUS
59031: ST_TO_ADDR
// end ;
59032: LD_VAR 0 2
59036: RET
// export function Dec ( value ) ; begin
59037: LD_INT 0
59039: PPUSH
// result := value - 1 ;
59040: LD_ADDR_VAR 0 2
59044: PUSH
59045: LD_VAR 0 1
59049: PUSH
59050: LD_INT 1
59052: MINUS
59053: ST_TO_ADDR
// end ;
59054: LD_VAR 0 2
59058: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59059: LD_INT 0
59061: PPUSH
59062: PPUSH
59063: PPUSH
59064: PPUSH
59065: PPUSH
59066: PPUSH
59067: PPUSH
59068: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59069: LD_VAR 0 1
59073: PPUSH
59074: LD_VAR 0 2
59078: PPUSH
59079: CALL_OW 488
59083: NOT
59084: PUSH
59085: LD_VAR 0 3
59089: PPUSH
59090: LD_VAR 0 4
59094: PPUSH
59095: CALL_OW 488
59099: NOT
59100: OR
59101: IFFALSE 59114
// begin result := - 1 ;
59103: LD_ADDR_VAR 0 5
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: ST_TO_ADDR
// exit ;
59112: GO 59349
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59114: LD_ADDR_VAR 0 12
59118: PUSH
59119: LD_VAR 0 1
59123: PPUSH
59124: LD_VAR 0 2
59128: PPUSH
59129: LD_VAR 0 3
59133: PPUSH
59134: LD_VAR 0 4
59138: PPUSH
59139: CALL 58199 0 4
59143: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59144: LD_ADDR_VAR 0 11
59148: PUSH
59149: LD_VAR 0 1
59153: PPUSH
59154: LD_VAR 0 2
59158: PPUSH
59159: LD_VAR 0 12
59163: PUSH
59164: LD_INT 1
59166: ARRAY
59167: PPUSH
59168: LD_VAR 0 12
59172: PUSH
59173: LD_INT 2
59175: ARRAY
59176: PPUSH
59177: CALL_OW 298
59181: ST_TO_ADDR
// distance := 9999 ;
59182: LD_ADDR_VAR 0 10
59186: PUSH
59187: LD_INT 9999
59189: ST_TO_ADDR
// for i := 0 to 5 do
59190: LD_ADDR_VAR 0 6
59194: PUSH
59195: DOUBLE
59196: LD_INT 0
59198: DEC
59199: ST_TO_ADDR
59200: LD_INT 5
59202: PUSH
59203: FOR_TO
59204: IFFALSE 59347
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59206: LD_ADDR_VAR 0 7
59210: PUSH
59211: LD_VAR 0 1
59215: PPUSH
59216: LD_VAR 0 6
59220: PPUSH
59221: LD_VAR 0 11
59225: PPUSH
59226: CALL_OW 272
59230: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59231: LD_ADDR_VAR 0 8
59235: PUSH
59236: LD_VAR 0 2
59240: PPUSH
59241: LD_VAR 0 6
59245: PPUSH
59246: LD_VAR 0 11
59250: PPUSH
59251: CALL_OW 273
59255: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59256: LD_VAR 0 7
59260: PPUSH
59261: LD_VAR 0 8
59265: PPUSH
59266: CALL_OW 488
59270: NOT
59271: IFFALSE 59275
// continue ;
59273: GO 59203
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59275: LD_ADDR_VAR 0 9
59279: PUSH
59280: LD_VAR 0 12
59284: PUSH
59285: LD_INT 1
59287: ARRAY
59288: PPUSH
59289: LD_VAR 0 12
59293: PUSH
59294: LD_INT 2
59296: ARRAY
59297: PPUSH
59298: LD_VAR 0 7
59302: PPUSH
59303: LD_VAR 0 8
59307: PPUSH
59308: CALL_OW 298
59312: ST_TO_ADDR
// if tmp < distance then
59313: LD_VAR 0 9
59317: PUSH
59318: LD_VAR 0 10
59322: LESS
59323: IFFALSE 59345
// begin result := i ;
59325: LD_ADDR_VAR 0 5
59329: PUSH
59330: LD_VAR 0 6
59334: ST_TO_ADDR
// distance := tmp ;
59335: LD_ADDR_VAR 0 10
59339: PUSH
59340: LD_VAR 0 9
59344: ST_TO_ADDR
// end ; end ;
59345: GO 59203
59347: POP
59348: POP
// end ;
59349: LD_VAR 0 5
59353: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59354: LD_INT 0
59356: PPUSH
59357: PPUSH
// if not driver or not IsInUnit ( driver ) then
59358: LD_VAR 0 1
59362: NOT
59363: PUSH
59364: LD_VAR 0 1
59368: PPUSH
59369: CALL_OW 310
59373: NOT
59374: OR
59375: IFFALSE 59379
// exit ;
59377: GO 59469
// vehicle := IsInUnit ( driver ) ;
59379: LD_ADDR_VAR 0 3
59383: PUSH
59384: LD_VAR 0 1
59388: PPUSH
59389: CALL_OW 310
59393: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59394: LD_VAR 0 1
59398: PPUSH
59399: LD_STRING \
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: PUSH
59429: LD_STRING E
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_VAR 0 3
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PPUSH
59465: CALL_OW 446
// end ;
59469: LD_VAR 0 2
59473: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59474: LD_INT 0
59476: PPUSH
59477: PPUSH
// if not driver or not IsInUnit ( driver ) then
59478: LD_VAR 0 1
59482: NOT
59483: PUSH
59484: LD_VAR 0 1
59488: PPUSH
59489: CALL_OW 310
59493: NOT
59494: OR
59495: IFFALSE 59499
// exit ;
59497: GO 59589
// vehicle := IsInUnit ( driver ) ;
59499: LD_ADDR_VAR 0 3
59503: PUSH
59504: LD_VAR 0 1
59508: PPUSH
59509: CALL_OW 310
59513: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59514: LD_VAR 0 1
59518: PPUSH
59519: LD_STRING \
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: PUSH
59549: LD_STRING E
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_VAR 0 3
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PPUSH
59585: CALL_OW 447
// end ;
59589: LD_VAR 0 2
59593: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59594: LD_INT 0
59596: PPUSH
59597: PPUSH
59598: PPUSH
// tmp := [ ] ;
59599: LD_ADDR_VAR 0 5
59603: PUSH
59604: EMPTY
59605: ST_TO_ADDR
// for i in units do
59606: LD_ADDR_VAR 0 4
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: FOR_IN
59617: IFFALSE 59655
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59619: LD_ADDR_VAR 0 5
59623: PUSH
59624: LD_VAR 0 5
59628: PPUSH
59629: LD_VAR 0 5
59633: PUSH
59634: LD_INT 1
59636: PLUS
59637: PPUSH
59638: LD_VAR 0 4
59642: PPUSH
59643: CALL_OW 256
59647: PPUSH
59648: CALL_OW 2
59652: ST_TO_ADDR
59653: GO 59616
59655: POP
59656: POP
// if not tmp then
59657: LD_VAR 0 5
59661: NOT
59662: IFFALSE 59666
// exit ;
59664: GO 59714
// if asc then
59666: LD_VAR 0 2
59670: IFFALSE 59694
// result := SortListByListAsc ( units , tmp ) else
59672: LD_ADDR_VAR 0 3
59676: PUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: LD_VAR 0 5
59686: PPUSH
59687: CALL_OW 76
59691: ST_TO_ADDR
59692: GO 59714
// result := SortListByListDesc ( units , tmp ) ;
59694: LD_ADDR_VAR 0 3
59698: PUSH
59699: LD_VAR 0 1
59703: PPUSH
59704: LD_VAR 0 5
59708: PPUSH
59709: CALL_OW 77
59713: ST_TO_ADDR
// end ;
59714: LD_VAR 0 3
59718: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59719: LD_INT 0
59721: PPUSH
59722: PPUSH
// task := GetTaskList ( mech ) ;
59723: LD_ADDR_VAR 0 4
59727: PUSH
59728: LD_VAR 0 1
59732: PPUSH
59733: CALL_OW 437
59737: ST_TO_ADDR
// if not task then
59738: LD_VAR 0 4
59742: NOT
59743: IFFALSE 59747
// exit ;
59745: GO 59789
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59747: LD_ADDR_VAR 0 3
59751: PUSH
59752: LD_VAR 0 4
59756: PUSH
59757: LD_INT 1
59759: ARRAY
59760: PUSH
59761: LD_INT 1
59763: ARRAY
59764: PUSH
59765: LD_STRING r
59767: EQUAL
59768: PUSH
59769: LD_VAR 0 4
59773: PUSH
59774: LD_INT 1
59776: ARRAY
59777: PUSH
59778: LD_INT 4
59780: ARRAY
59781: PUSH
59782: LD_VAR 0 2
59786: EQUAL
59787: AND
59788: ST_TO_ADDR
// end ;
59789: LD_VAR 0 3
59793: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59794: LD_INT 0
59796: PPUSH
// SetDir ( unit , d ) ;
59797: LD_VAR 0 1
59801: PPUSH
59802: LD_VAR 0 4
59806: PPUSH
59807: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59811: LD_VAR 0 1
59815: PPUSH
59816: LD_VAR 0 2
59820: PPUSH
59821: LD_VAR 0 3
59825: PPUSH
59826: LD_VAR 0 5
59830: PPUSH
59831: CALL_OW 48
// end ;
59835: LD_VAR 0 6
59839: RET
// export function ToNaturalNumber ( number ) ; begin
59840: LD_INT 0
59842: PPUSH
// result := number div 1 ;
59843: LD_ADDR_VAR 0 2
59847: PUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_INT 1
59855: DIV
59856: ST_TO_ADDR
// if number < 0 then
59857: LD_VAR 0 1
59861: PUSH
59862: LD_INT 0
59864: LESS
59865: IFFALSE 59875
// result := 0 ;
59867: LD_ADDR_VAR 0 2
59871: PUSH
59872: LD_INT 0
59874: ST_TO_ADDR
// end ;
59875: LD_VAR 0 2
59879: RET
// export function SortByClass ( units , class ) ; var un ; begin
59880: LD_INT 0
59882: PPUSH
59883: PPUSH
// if not units or not class then
59884: LD_VAR 0 1
59888: NOT
59889: PUSH
59890: LD_VAR 0 2
59894: NOT
59895: OR
59896: IFFALSE 59900
// exit ;
59898: GO 59995
// result := [ ] ;
59900: LD_ADDR_VAR 0 3
59904: PUSH
59905: EMPTY
59906: ST_TO_ADDR
// for un in units do
59907: LD_ADDR_VAR 0 4
59911: PUSH
59912: LD_VAR 0 1
59916: PUSH
59917: FOR_IN
59918: IFFALSE 59993
// if GetClass ( un ) = class then
59920: LD_VAR 0 4
59924: PPUSH
59925: CALL_OW 257
59929: PUSH
59930: LD_VAR 0 2
59934: EQUAL
59935: IFFALSE 59962
// result := Insert ( result , 1 , un ) else
59937: LD_ADDR_VAR 0 3
59941: PUSH
59942: LD_VAR 0 3
59946: PPUSH
59947: LD_INT 1
59949: PPUSH
59950: LD_VAR 0 4
59954: PPUSH
59955: CALL_OW 2
59959: ST_TO_ADDR
59960: GO 59991
// result := Replace ( result , result + 1 , un ) ;
59962: LD_ADDR_VAR 0 3
59966: PUSH
59967: LD_VAR 0 3
59971: PPUSH
59972: LD_VAR 0 3
59976: PUSH
59977: LD_INT 1
59979: PLUS
59980: PPUSH
59981: LD_VAR 0 4
59985: PPUSH
59986: CALL_OW 1
59990: ST_TO_ADDR
59991: GO 59917
59993: POP
59994: POP
// end ;
59995: LD_VAR 0 3
59999: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60000: LD_INT 0
60002: PPUSH
60003: PPUSH
60004: PPUSH
60005: PPUSH
60006: PPUSH
60007: PPUSH
60008: PPUSH
// result := [ ] ;
60009: LD_ADDR_VAR 0 4
60013: PUSH
60014: EMPTY
60015: ST_TO_ADDR
// if x - r < 0 then
60016: LD_VAR 0 1
60020: PUSH
60021: LD_VAR 0 3
60025: MINUS
60026: PUSH
60027: LD_INT 0
60029: LESS
60030: IFFALSE 60042
// min_x := 0 else
60032: LD_ADDR_VAR 0 8
60036: PUSH
60037: LD_INT 0
60039: ST_TO_ADDR
60040: GO 60058
// min_x := x - r ;
60042: LD_ADDR_VAR 0 8
60046: PUSH
60047: LD_VAR 0 1
60051: PUSH
60052: LD_VAR 0 3
60056: MINUS
60057: ST_TO_ADDR
// if y - r < 0 then
60058: LD_VAR 0 2
60062: PUSH
60063: LD_VAR 0 3
60067: MINUS
60068: PUSH
60069: LD_INT 0
60071: LESS
60072: IFFALSE 60084
// min_y := 0 else
60074: LD_ADDR_VAR 0 7
60078: PUSH
60079: LD_INT 0
60081: ST_TO_ADDR
60082: GO 60100
// min_y := y - r ;
60084: LD_ADDR_VAR 0 7
60088: PUSH
60089: LD_VAR 0 2
60093: PUSH
60094: LD_VAR 0 3
60098: MINUS
60099: ST_TO_ADDR
// max_x := x + r ;
60100: LD_ADDR_VAR 0 9
60104: PUSH
60105: LD_VAR 0 1
60109: PUSH
60110: LD_VAR 0 3
60114: PLUS
60115: ST_TO_ADDR
// max_y := y + r ;
60116: LD_ADDR_VAR 0 10
60120: PUSH
60121: LD_VAR 0 2
60125: PUSH
60126: LD_VAR 0 3
60130: PLUS
60131: ST_TO_ADDR
// for _x = min_x to max_x do
60132: LD_ADDR_VAR 0 5
60136: PUSH
60137: DOUBLE
60138: LD_VAR 0 8
60142: DEC
60143: ST_TO_ADDR
60144: LD_VAR 0 9
60148: PUSH
60149: FOR_TO
60150: IFFALSE 60251
// for _y = min_y to max_y do
60152: LD_ADDR_VAR 0 6
60156: PUSH
60157: DOUBLE
60158: LD_VAR 0 7
60162: DEC
60163: ST_TO_ADDR
60164: LD_VAR 0 10
60168: PUSH
60169: FOR_TO
60170: IFFALSE 60247
// begin if not ValidHex ( _x , _y ) then
60172: LD_VAR 0 5
60176: PPUSH
60177: LD_VAR 0 6
60181: PPUSH
60182: CALL_OW 488
60186: NOT
60187: IFFALSE 60191
// continue ;
60189: GO 60169
// if GetResourceTypeXY ( _x , _y ) then
60191: LD_VAR 0 5
60195: PPUSH
60196: LD_VAR 0 6
60200: PPUSH
60201: CALL_OW 283
60205: IFFALSE 60245
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60207: LD_ADDR_VAR 0 4
60211: PUSH
60212: LD_VAR 0 4
60216: PPUSH
60217: LD_VAR 0 4
60221: PUSH
60222: LD_INT 1
60224: PLUS
60225: PPUSH
60226: LD_VAR 0 5
60230: PUSH
60231: LD_VAR 0 6
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PPUSH
60240: CALL_OW 1
60244: ST_TO_ADDR
// end ;
60245: GO 60169
60247: POP
60248: POP
60249: GO 60149
60251: POP
60252: POP
// end ;
60253: LD_VAR 0 4
60257: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60258: LD_INT 0
60260: PPUSH
60261: PPUSH
60262: PPUSH
60263: PPUSH
60264: PPUSH
60265: PPUSH
60266: PPUSH
60267: PPUSH
// if not units then
60268: LD_VAR 0 1
60272: NOT
60273: IFFALSE 60277
// exit ;
60275: GO 60801
// result := UnitFilter ( units , [ f_ok ] ) ;
60277: LD_ADDR_VAR 0 3
60281: PUSH
60282: LD_VAR 0 1
60286: PPUSH
60287: LD_INT 50
60289: PUSH
60290: EMPTY
60291: LIST
60292: PPUSH
60293: CALL_OW 72
60297: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60298: LD_ADDR_VAR 0 8
60302: PUSH
60303: LD_VAR 0 1
60307: PUSH
60308: LD_INT 1
60310: ARRAY
60311: PPUSH
60312: CALL_OW 255
60316: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60317: LD_ADDR_VAR 0 10
60321: PUSH
60322: LD_INT 29
60324: PUSH
60325: LD_INT 91
60327: PUSH
60328: LD_INT 49
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: ST_TO_ADDR
// if not result then
60336: LD_VAR 0 3
60340: NOT
60341: IFFALSE 60345
// exit ;
60343: GO 60801
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60345: LD_ADDR_VAR 0 5
60349: PUSH
60350: LD_INT 81
60352: PUSH
60353: LD_VAR 0 8
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PPUSH
60362: CALL_OW 69
60366: ST_TO_ADDR
// for i in result do
60367: LD_ADDR_VAR 0 4
60371: PUSH
60372: LD_VAR 0 3
60376: PUSH
60377: FOR_IN
60378: IFFALSE 60799
// begin tag := GetTag ( i ) + 1 ;
60380: LD_ADDR_VAR 0 9
60384: PUSH
60385: LD_VAR 0 4
60389: PPUSH
60390: CALL_OW 110
60394: PUSH
60395: LD_INT 1
60397: PLUS
60398: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60399: LD_ADDR_VAR 0 7
60403: PUSH
60404: LD_VAR 0 4
60408: PPUSH
60409: CALL_OW 250
60413: PPUSH
60414: LD_VAR 0 4
60418: PPUSH
60419: CALL_OW 251
60423: PPUSH
60424: LD_INT 6
60426: PPUSH
60427: CALL 60000 0 3
60431: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60432: LD_VAR 0 4
60436: PPUSH
60437: CALL_OW 247
60441: PUSH
60442: LD_INT 2
60444: EQUAL
60445: PUSH
60446: LD_VAR 0 7
60450: AND
60451: PUSH
60452: LD_VAR 0 4
60456: PPUSH
60457: CALL_OW 264
60461: PUSH
60462: LD_VAR 0 10
60466: IN
60467: NOT
60468: AND
60469: IFFALSE 60508
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60471: LD_VAR 0 4
60475: PPUSH
60476: LD_VAR 0 7
60480: PUSH
60481: LD_INT 1
60483: ARRAY
60484: PUSH
60485: LD_INT 1
60487: ARRAY
60488: PPUSH
60489: LD_VAR 0 7
60493: PUSH
60494: LD_INT 1
60496: ARRAY
60497: PUSH
60498: LD_INT 2
60500: ARRAY
60501: PPUSH
60502: CALL_OW 116
60506: GO 60797
// if path > tag then
60508: LD_VAR 0 2
60512: PUSH
60513: LD_VAR 0 9
60517: GREATER
60518: IFFALSE 60726
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60520: LD_ADDR_VAR 0 6
60524: PUSH
60525: LD_VAR 0 5
60529: PPUSH
60530: LD_INT 91
60532: PUSH
60533: LD_VAR 0 4
60537: PUSH
60538: LD_INT 8
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: PPUSH
60546: CALL_OW 72
60550: ST_TO_ADDR
// if nearEnemy then
60551: LD_VAR 0 6
60555: IFFALSE 60624
// begin if GetWeapon ( i ) = ru_time_lapser then
60557: LD_VAR 0 4
60561: PPUSH
60562: CALL_OW 264
60566: PUSH
60567: LD_INT 49
60569: EQUAL
60570: IFFALSE 60598
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60572: LD_VAR 0 4
60576: PPUSH
60577: LD_VAR 0 6
60581: PPUSH
60582: LD_VAR 0 4
60586: PPUSH
60587: CALL_OW 74
60591: PPUSH
60592: CALL_OW 112
60596: GO 60622
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60598: LD_VAR 0 4
60602: PPUSH
60603: LD_VAR 0 6
60607: PPUSH
60608: LD_VAR 0 4
60612: PPUSH
60613: CALL_OW 74
60617: PPUSH
60618: CALL_OW 115
// end else
60622: GO 60724
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60624: LD_VAR 0 4
60628: PPUSH
60629: LD_VAR 0 2
60633: PUSH
60634: LD_VAR 0 9
60638: ARRAY
60639: PUSH
60640: LD_INT 1
60642: ARRAY
60643: PPUSH
60644: LD_VAR 0 2
60648: PUSH
60649: LD_VAR 0 9
60653: ARRAY
60654: PUSH
60655: LD_INT 2
60657: ARRAY
60658: PPUSH
60659: CALL_OW 297
60663: PUSH
60664: LD_INT 6
60666: GREATER
60667: IFFALSE 60710
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60669: LD_VAR 0 4
60673: PPUSH
60674: LD_VAR 0 2
60678: PUSH
60679: LD_VAR 0 9
60683: ARRAY
60684: PUSH
60685: LD_INT 1
60687: ARRAY
60688: PPUSH
60689: LD_VAR 0 2
60693: PUSH
60694: LD_VAR 0 9
60698: ARRAY
60699: PUSH
60700: LD_INT 2
60702: ARRAY
60703: PPUSH
60704: CALL_OW 114
60708: GO 60724
// SetTag ( i , tag ) ;
60710: LD_VAR 0 4
60714: PPUSH
60715: LD_VAR 0 9
60719: PPUSH
60720: CALL_OW 109
// end else
60724: GO 60797
// if enemy then
60726: LD_VAR 0 5
60730: IFFALSE 60797
// begin if GetWeapon ( i ) = ru_time_lapser then
60732: LD_VAR 0 4
60736: PPUSH
60737: CALL_OW 264
60741: PUSH
60742: LD_INT 49
60744: EQUAL
60745: IFFALSE 60773
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60747: LD_VAR 0 4
60751: PPUSH
60752: LD_VAR 0 5
60756: PPUSH
60757: LD_VAR 0 4
60761: PPUSH
60762: CALL_OW 74
60766: PPUSH
60767: CALL_OW 112
60771: GO 60797
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60773: LD_VAR 0 4
60777: PPUSH
60778: LD_VAR 0 5
60782: PPUSH
60783: LD_VAR 0 4
60787: PPUSH
60788: CALL_OW 74
60792: PPUSH
60793: CALL_OW 115
// end ; end ;
60797: GO 60377
60799: POP
60800: POP
// end ;
60801: LD_VAR 0 3
60805: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60806: LD_INT 0
60808: PPUSH
60809: PPUSH
60810: PPUSH
// if not unit or IsInUnit ( unit ) then
60811: LD_VAR 0 1
60815: NOT
60816: PUSH
60817: LD_VAR 0 1
60821: PPUSH
60822: CALL_OW 310
60826: OR
60827: IFFALSE 60831
// exit ;
60829: GO 60922
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60831: LD_ADDR_VAR 0 4
60835: PUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: CALL_OW 250
60845: PPUSH
60846: LD_VAR 0 2
60850: PPUSH
60851: LD_INT 1
60853: PPUSH
60854: CALL_OW 272
60858: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60859: LD_ADDR_VAR 0 5
60863: PUSH
60864: LD_VAR 0 1
60868: PPUSH
60869: CALL_OW 251
60873: PPUSH
60874: LD_VAR 0 2
60878: PPUSH
60879: LD_INT 1
60881: PPUSH
60882: CALL_OW 273
60886: ST_TO_ADDR
// if ValidHex ( x , y ) then
60887: LD_VAR 0 4
60891: PPUSH
60892: LD_VAR 0 5
60896: PPUSH
60897: CALL_OW 488
60901: IFFALSE 60922
// ComTurnXY ( unit , x , y ) ;
60903: LD_VAR 0 1
60907: PPUSH
60908: LD_VAR 0 4
60912: PPUSH
60913: LD_VAR 0 5
60917: PPUSH
60918: CALL_OW 118
// end ;
60922: LD_VAR 0 3
60926: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60927: LD_INT 0
60929: PPUSH
60930: PPUSH
// result := false ;
60931: LD_ADDR_VAR 0 3
60935: PUSH
60936: LD_INT 0
60938: ST_TO_ADDR
// if not units then
60939: LD_VAR 0 2
60943: NOT
60944: IFFALSE 60948
// exit ;
60946: GO 60993
// for i in units do
60948: LD_ADDR_VAR 0 4
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: FOR_IN
60959: IFFALSE 60991
// if See ( side , i ) then
60961: LD_VAR 0 1
60965: PPUSH
60966: LD_VAR 0 4
60970: PPUSH
60971: CALL_OW 292
60975: IFFALSE 60989
// begin result := true ;
60977: LD_ADDR_VAR 0 3
60981: PUSH
60982: LD_INT 1
60984: ST_TO_ADDR
// exit ;
60985: POP
60986: POP
60987: GO 60993
// end ;
60989: GO 60958
60991: POP
60992: POP
// end ;
60993: LD_VAR 0 3
60997: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60998: LD_INT 0
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
// if not unit or not points then
61004: LD_VAR 0 1
61008: NOT
61009: PUSH
61010: LD_VAR 0 2
61014: NOT
61015: OR
61016: IFFALSE 61020
// exit ;
61018: GO 61110
// dist := 99999 ;
61020: LD_ADDR_VAR 0 5
61024: PUSH
61025: LD_INT 99999
61027: ST_TO_ADDR
// for i in points do
61028: LD_ADDR_VAR 0 4
61032: PUSH
61033: LD_VAR 0 2
61037: PUSH
61038: FOR_IN
61039: IFFALSE 61108
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61041: LD_ADDR_VAR 0 6
61045: PUSH
61046: LD_VAR 0 1
61050: PPUSH
61051: LD_VAR 0 4
61055: PUSH
61056: LD_INT 1
61058: ARRAY
61059: PPUSH
61060: LD_VAR 0 4
61064: PUSH
61065: LD_INT 2
61067: ARRAY
61068: PPUSH
61069: CALL_OW 297
61073: ST_TO_ADDR
// if tmpDist < dist then
61074: LD_VAR 0 6
61078: PUSH
61079: LD_VAR 0 5
61083: LESS
61084: IFFALSE 61106
// begin result := i ;
61086: LD_ADDR_VAR 0 3
61090: PUSH
61091: LD_VAR 0 4
61095: ST_TO_ADDR
// dist := tmpDist ;
61096: LD_ADDR_VAR 0 5
61100: PUSH
61101: LD_VAR 0 6
61105: ST_TO_ADDR
// end ; end ;
61106: GO 61038
61108: POP
61109: POP
// end ;
61110: LD_VAR 0 3
61114: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61115: LD_INT 0
61117: PPUSH
// uc_side := side ;
61118: LD_ADDR_OWVAR 20
61122: PUSH
61123: LD_VAR 0 1
61127: ST_TO_ADDR
// uc_nation := 3 ;
61128: LD_ADDR_OWVAR 21
61132: PUSH
61133: LD_INT 3
61135: ST_TO_ADDR
// vc_chassis := 25 ;
61136: LD_ADDR_OWVAR 37
61140: PUSH
61141: LD_INT 25
61143: ST_TO_ADDR
// vc_engine := engine_siberite ;
61144: LD_ADDR_OWVAR 39
61148: PUSH
61149: LD_INT 3
61151: ST_TO_ADDR
// vc_control := control_computer ;
61152: LD_ADDR_OWVAR 38
61156: PUSH
61157: LD_INT 3
61159: ST_TO_ADDR
// vc_weapon := 59 ;
61160: LD_ADDR_OWVAR 40
61164: PUSH
61165: LD_INT 59
61167: ST_TO_ADDR
// result := CreateVehicle ;
61168: LD_ADDR_VAR 0 5
61172: PUSH
61173: CALL_OW 45
61177: ST_TO_ADDR
// SetDir ( result , d ) ;
61178: LD_VAR 0 5
61182: PPUSH
61183: LD_VAR 0 4
61187: PPUSH
61188: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61192: LD_VAR 0 5
61196: PPUSH
61197: LD_VAR 0 2
61201: PPUSH
61202: LD_VAR 0 3
61206: PPUSH
61207: LD_INT 0
61209: PPUSH
61210: CALL_OW 48
// end ;
61214: LD_VAR 0 5
61218: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61219: LD_INT 0
61221: PPUSH
61222: PPUSH
61223: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61224: LD_ADDR_VAR 0 2
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61247: LD_VAR 0 1
61251: NOT
61252: PUSH
61253: LD_VAR 0 1
61257: PPUSH
61258: CALL_OW 264
61262: PUSH
61263: LD_INT 12
61265: PUSH
61266: LD_INT 51
61268: PUSH
61269: LD_INT 32
61271: PUSH
61272: LD_INT 89
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: IN
61281: NOT
61282: OR
61283: IFFALSE 61287
// exit ;
61285: GO 61385
// for i := 1 to 3 do
61287: LD_ADDR_VAR 0 3
61291: PUSH
61292: DOUBLE
61293: LD_INT 1
61295: DEC
61296: ST_TO_ADDR
61297: LD_INT 3
61299: PUSH
61300: FOR_TO
61301: IFFALSE 61383
// begin tmp := GetCargo ( cargo , i ) ;
61303: LD_ADDR_VAR 0 4
61307: PUSH
61308: LD_VAR 0 1
61312: PPUSH
61313: LD_VAR 0 3
61317: PPUSH
61318: CALL_OW 289
61322: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61323: LD_ADDR_VAR 0 2
61327: PUSH
61328: LD_VAR 0 2
61332: PPUSH
61333: LD_VAR 0 3
61337: PPUSH
61338: LD_VAR 0 4
61342: PPUSH
61343: CALL_OW 1
61347: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61348: LD_ADDR_VAR 0 2
61352: PUSH
61353: LD_VAR 0 2
61357: PPUSH
61358: LD_INT 4
61360: PPUSH
61361: LD_VAR 0 2
61365: PUSH
61366: LD_INT 4
61368: ARRAY
61369: PUSH
61370: LD_VAR 0 4
61374: PLUS
61375: PPUSH
61376: CALL_OW 1
61380: ST_TO_ADDR
// end ;
61381: GO 61300
61383: POP
61384: POP
// end ;
61385: LD_VAR 0 2
61389: RET
// export function Length ( array ) ; begin
61390: LD_INT 0
61392: PPUSH
// result := array + 0 ;
61393: LD_ADDR_VAR 0 2
61397: PUSH
61398: LD_VAR 0 1
61402: PUSH
61403: LD_INT 0
61405: PLUS
61406: ST_TO_ADDR
// end ;
61407: LD_VAR 0 2
61411: RET
// export function PrepareArray ( array ) ; begin
61412: LD_INT 0
61414: PPUSH
// result := array diff 0 ;
61415: LD_ADDR_VAR 0 2
61419: PUSH
61420: LD_VAR 0 1
61424: PUSH
61425: LD_INT 0
61427: DIFF
61428: ST_TO_ADDR
// if not result [ 1 ] then
61429: LD_VAR 0 2
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: NOT
61438: IFFALSE 61458
// result := Delete ( result , 1 ) ;
61440: LD_ADDR_VAR 0 2
61444: PUSH
61445: LD_VAR 0 2
61449: PPUSH
61450: LD_INT 1
61452: PPUSH
61453: CALL_OW 3
61457: ST_TO_ADDR
// end ;
61458: LD_VAR 0 2
61462: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61463: LD_INT 0
61465: PPUSH
61466: PPUSH
61467: PPUSH
61468: PPUSH
// sibRocketRange := 25 ;
61469: LD_ADDR_VAR 0 6
61473: PUSH
61474: LD_INT 25
61476: ST_TO_ADDR
// result := false ;
61477: LD_ADDR_VAR 0 4
61481: PUSH
61482: LD_INT 0
61484: ST_TO_ADDR
// for i := 0 to 5 do
61485: LD_ADDR_VAR 0 5
61489: PUSH
61490: DOUBLE
61491: LD_INT 0
61493: DEC
61494: ST_TO_ADDR
61495: LD_INT 5
61497: PUSH
61498: FOR_TO
61499: IFFALSE 61566
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61501: LD_VAR 0 1
61505: PPUSH
61506: LD_VAR 0 5
61510: PPUSH
61511: LD_VAR 0 6
61515: PPUSH
61516: CALL_OW 272
61520: PPUSH
61521: LD_VAR 0 2
61525: PPUSH
61526: LD_VAR 0 5
61530: PPUSH
61531: LD_VAR 0 6
61535: PPUSH
61536: CALL_OW 273
61540: PPUSH
61541: LD_VAR 0 3
61545: PPUSH
61546: CALL_OW 309
61550: IFFALSE 61564
// begin result := true ;
61552: LD_ADDR_VAR 0 4
61556: PUSH
61557: LD_INT 1
61559: ST_TO_ADDR
// exit ;
61560: POP
61561: POP
61562: GO 61568
// end ;
61564: GO 61498
61566: POP
61567: POP
// end ;
61568: LD_VAR 0 4
61572: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61573: LD_INT 0
61575: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61576: LD_VAR 0 1
61580: PPUSH
61581: LD_VAR 0 2
61585: PPUSH
61586: LD_INT 0
61588: PPUSH
61589: LD_INT 0
61591: PPUSH
61592: LD_INT 1
61594: PPUSH
61595: LD_INT 0
61597: PPUSH
61598: CALL_OW 587
// end ;
61602: LD_VAR 0 3
61606: RET
// export function CenterOnNow ( unit ) ; begin
61607: LD_INT 0
61609: PPUSH
// result := IsInUnit ( unit ) ;
61610: LD_ADDR_VAR 0 2
61614: PUSH
61615: LD_VAR 0 1
61619: PPUSH
61620: CALL_OW 310
61624: ST_TO_ADDR
// if not result then
61625: LD_VAR 0 2
61629: NOT
61630: IFFALSE 61642
// result := unit ;
61632: LD_ADDR_VAR 0 2
61636: PUSH
61637: LD_VAR 0 1
61641: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
61642: LD_VAR 0 1
61646: PPUSH
61647: CALL_OW 87
// end ; end_of_file
61651: LD_VAR 0 2
61655: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61656: LD_VAR 0 1
61660: PUSH
61661: LD_INT 200
61663: DOUBLE
61664: GREATEREQUAL
61665: IFFALSE 61673
61667: LD_INT 299
61669: DOUBLE
61670: LESSEQUAL
61671: IFTRUE 61675
61673: GO 61707
61675: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61676: LD_VAR 0 1
61680: PPUSH
61681: LD_VAR 0 2
61685: PPUSH
61686: LD_VAR 0 3
61690: PPUSH
61691: LD_VAR 0 4
61695: PPUSH
61696: LD_VAR 0 5
61700: PPUSH
61701: CALL 16306 0 5
61705: GO 61784
61707: LD_INT 300
61709: DOUBLE
61710: GREATEREQUAL
61711: IFFALSE 61719
61713: LD_INT 399
61715: DOUBLE
61716: LESSEQUAL
61717: IFTRUE 61721
61719: GO 61783
61721: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61722: LD_VAR 0 1
61726: PPUSH
61727: LD_VAR 0 2
61731: PPUSH
61732: LD_VAR 0 3
61736: PPUSH
61737: LD_VAR 0 4
61741: PPUSH
61742: LD_VAR 0 5
61746: PPUSH
61747: LD_VAR 0 6
61751: PPUSH
61752: LD_VAR 0 7
61756: PPUSH
61757: LD_VAR 0 8
61761: PPUSH
61762: LD_VAR 0 9
61766: PPUSH
61767: LD_VAR 0 10
61771: PPUSH
61772: LD_VAR 0 11
61776: PPUSH
61777: CALL 12639 0 11
61781: GO 61784
61783: POP
// end ;
61784: PPOPN 11
61786: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61787: LD_VAR 0 1
61791: PPUSH
61792: LD_VAR 0 2
61796: PPUSH
61797: LD_VAR 0 3
61801: PPUSH
61802: LD_VAR 0 4
61806: PPUSH
61807: LD_VAR 0 5
61811: PPUSH
61812: CALL 16042 0 5
// end ; end_of_file
61816: PPOPN 5
61818: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61819: LD_VAR 0 1
61823: PPUSH
61824: LD_VAR 0 2
61828: PPUSH
61829: LD_VAR 0 3
61833: PPUSH
61834: LD_VAR 0 4
61838: PPUSH
61839: LD_VAR 0 5
61843: PPUSH
61844: LD_VAR 0 6
61848: PPUSH
61849: CALL 291 0 6
// end ;
61853: PPOPN 6
61855: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
61856: LD_INT 0
61858: PPUSH
// begin if not units then
61859: LD_VAR 0 1
61863: NOT
61864: IFFALSE 61868
// exit ;
61866: GO 61868
// end ;
61868: PPOPN 7
61870: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
61871: CALL 195 0 0
// end ;
61875: PPOPN 1
61877: END
