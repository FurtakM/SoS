// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 65
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 66
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 63
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 59
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 60
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 62
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// ruDepotConstructed := false ;
 254: LD_ADDR_EXP 57
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnRussians := false ;
 262: LD_ADDR_EXP 58
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// attackAvalaible = 1 ;
 270: LD_ADDR_EXP 64
 274: PUSH
 275: LD_INT 1
 277: ST_TO_ADDR
// mission_prefix := 10c_ ;
 278: LD_ADDR_EXP 54
 282: PUSH
 283: LD_STRING 10c_
 285: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 286: LD_ADDR_EXP 55
 290: PUSH
 291: LD_STRING 10_
 293: ST_TO_ADDR
// debugMode = 0 ;
 294: LD_ADDR_EXP 67
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// PrepareNature ;
 302: CALL 26589 0 0
// PrepareDifficulty ;
 306: CALL 11258 0 0
// PrepareJMMTeam ;
 310: CALL 1358 0 0
// PrepareCathyTeam ;
 314: CALL 2475 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 318: LD_INT 24
 320: PPUSH
 321: LD_INT 1
 323: PUSH
 324: LD_OWVAR 67
 328: PLUS
 329: PPUSH
 330: CALL 21118 0 2
// if Difficulty > 1 then
 334: LD_OWVAR 67
 338: PUSH
 339: LD_INT 1
 341: GREATER
 342: IFFALSE 356
// PlaceMines ( MineField2 , Difficulty ) ;
 344: LD_INT 25
 346: PPUSH
 347: LD_OWVAR 67
 351: PPUSH
 352: CALL 21118 0 2
// if Difficulty > 2 then
 356: LD_OWVAR 67
 360: PUSH
 361: LD_INT 2
 363: GREATER
 364: IFFALSE 378
// PlaceMines ( MineField3 , Difficulty ) ;
 366: LD_INT 26
 368: PPUSH
 369: LD_OWVAR 67
 373: PPUSH
 374: CALL 21118 0 2
// PrepareArabianCommander ;
 378: CALL 3921 0 0
// PrepareArabian ;
 382: CALL 3973 0 0
// BuildArabianBase ;
 386: CALL 14073 0 0
// TameApemans ;
 390: CALL 19923 0 0
// end ;
 394: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 395: LD_EXP 67
 399: PUSH
 400: LD_INT 1
 402: EQUAL
 403: IFFALSE 709
 405: GO 407
 407: DISABLE
 408: LD_INT 0
 410: PPUSH
// begin enable ;
 411: ENABLE
// fogoff ( true ) ;
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 419: LD_ADDR_VAR 0 1
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 470
// SetLives ( i , 1000 ) ;
 456: LD_VAR 0 1
 460: PPUSH
 461: LD_INT 1000
 463: PPUSH
 464: CALL_OW 234
 468: GO 453
 470: POP
 471: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 472: LD_ADDR_VAR 0 1
 476: PUSH
 477: LD_INT 22
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 2
 489: PUSH
 490: LD_INT 30
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 30
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL_OW 69
 523: PUSH
 524: FOR_IN
 525: IFFALSE 549
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9999
 542: PPUSH
 543: CALL_OW 277
 547: GO 524
 549: POP
 550: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 551: LD_ADDR_VAR 0 1
 555: PUSH
 556: LD_INT 22
 558: PUSH
 559: LD_INT 1
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 30
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 30
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 69
 602: PUSH
 603: FOR_IN
 604: IFFALSE 628
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 606: LD_VAR 0 1
 610: PPUSH
 611: CALL_OW 274
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: LD_INT 9999
 621: PPUSH
 622: CALL_OW 277
 626: GO 603
 628: POP
 629: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 630: LD_ADDR_VAR 0 1
 634: PUSH
 635: LD_INT 22
 637: PUSH
 638: LD_INT 1
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 30
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 30
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PPUSH
 677: CALL_OW 69
 681: PUSH
 682: FOR_IN
 683: IFFALSE 707
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 685: LD_VAR 0 1
 689: PPUSH
 690: CALL_OW 274
 694: PPUSH
 695: LD_INT 3
 697: PPUSH
 698: LD_INT 9999
 700: PPUSH
 701: CALL_OW 277
 705: GO 682
 707: POP
 708: POP
// end ;
 709: PPOPN 1
 711: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 712: LD_INT 25
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: IFFALSE 739
 728: GO 730
 730: DISABLE
// snipersTrained := true ;
 731: LD_ADDR_EXP 62
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
 739: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: CALL_OW 81
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: PUSH
 755: LD_EXP 42
 759: AND
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 21
 773: PUSH
 774: LD_INT 3
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: LD_INT 0
 792: EQUAL
 793: AND
 794: IFFALSE 806
 796: GO 798
 798: DISABLE
// SetAchievement ( ACH_POWER ) ;
 799: LD_STRING ACH_POWER
 801: PPUSH
 802: CALL_OW 543
 806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 807: LD_INT 22
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: PUSH
 836: LD_INT 22
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 32
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: AND
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 30
 878: PUSH
 879: LD_INT 33
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PPUSH
 890: CALL_OW 69
 894: AND
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 30
 908: PUSH
 909: LD_INT 5
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 69
 924: AND
 925: PUSH
 926: LD_INT 22
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: LD_INT 30
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 69
 954: AND
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_INT 1
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 36
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PPUSH
 980: CALL_OW 69
 984: AND
 985: PUSH
 986: LD_INT 22
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 31
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: CALL_OW 69
1014: AND
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 1
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 30
1028: PUSH
1029: LD_INT 22
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PPUSH
1040: CALL_OW 69
1044: AND
1045: PUSH
1046: LD_INT 22
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_INT 20
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: AND
1075: PUSH
1076: LD_INT 22
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 19
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PPUSH
1100: CALL_OW 69
1104: AND
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 30
1118: PUSH
1119: LD_INT 16
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PPUSH
1130: CALL_OW 69
1134: AND
1135: PUSH
1136: LD_INT 22
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 30
1148: PUSH
1149: LD_INT 17
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 69
1164: AND
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 30
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: AND
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 30
1208: PUSH
1209: LD_INT 29
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL_OW 69
1224: AND
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 30
1238: PUSH
1239: LD_INT 30
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 69
1254: AND
1255: PUSH
1256: LD_INT 22
1258: PUSH
1259: LD_INT 1
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 30
1268: PUSH
1269: LD_INT 27
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PPUSH
1280: CALL_OW 69
1284: AND
1285: PUSH
1286: LD_INT 22
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 69
1314: AND
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 28
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: AND
1345: IFFALSE 1357
1347: GO 1349
1349: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1350: LD_STRING ACH_ARCH
1352: PPUSH
1353: CALL_OW 543
1357: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1358: LD_INT 0
1360: PPUSH
1361: PPUSH
1362: PPUSH
1363: PPUSH
1364: PPUSH
1365: PPUSH
// uc_side = 1 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 1
1373: ST_TO_ADDR
// uc_nation = 1 ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 1
1381: ST_TO_ADDR
// count = 0 ;
1382: LD_ADDR_VAR 0 6
1386: PUSH
1387: LD_INT 0
1389: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
1390: LD_ADDR_EXP 1
1394: PUSH
1395: LD_STRING 10_JMM
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: CALL 10835 0 2
1405: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1406: LD_ADDR_EXP 20
1410: PUSH
1411: LD_EXP 20
1415: PUSH
1416: LD_EXP 1
1420: ADD
1421: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
1422: LD_ADDR_EXP 10
1426: PUSH
1427: LD_STRING 10_Gary
1429: PPUSH
1430: LD_INT 1
1432: PPUSH
1433: CALL 10835 0 2
1437: ST_TO_ADDR
// if Gary then
1438: LD_EXP 10
1442: IFFALSE 1460
// JMMSquad = JMMSquad ^ Gary ;
1444: LD_ADDR_EXP 20
1448: PUSH
1449: LD_EXP 20
1453: PUSH
1454: LD_EXP 10
1458: ADD
1459: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
1460: LD_ADDR_EXP 5
1464: PUSH
1465: LD_STRING 10_Cyrus
1467: PPUSH
1468: LD_INT 1
1470: PPUSH
1471: CALL 10835 0 2
1475: ST_TO_ADDR
// if Cyrus then
1476: LD_EXP 5
1480: IFFALSE 1498
// JMMSquad = JMMSquad ^ Cyrus ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_EXP 20
1491: PUSH
1492: LD_EXP 5
1496: ADD
1497: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
1498: LD_ADDR_EXP 4
1502: PUSH
1503: LD_STRING 10_Bobby
1505: PPUSH
1506: LD_INT 1
1508: PPUSH
1509: CALL 10835 0 2
1513: ST_TO_ADDR
// if Bobby then
1514: LD_EXP 4
1518: IFFALSE 1536
// JMMSquad = JMMSquad ^ Bobby ;
1520: LD_ADDR_EXP 20
1524: PUSH
1525: LD_EXP 20
1529: PUSH
1530: LD_EXP 4
1534: ADD
1535: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
1536: LD_ADDR_EXP 6
1540: PUSH
1541: LD_STRING 10_Lisa
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL 10835 0 2
1551: ST_TO_ADDR
// if Lisa then
1552: LD_EXP 6
1556: IFFALSE 1574
// JMMSquad = JMMSquad ^ Lisa ;
1558: LD_ADDR_EXP 20
1562: PUSH
1563: LD_EXP 20
1567: PUSH
1568: LD_EXP 6
1572: ADD
1573: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
1574: LD_ADDR_EXP 2
1578: PUSH
1579: LD_STRING 10_Brown
1581: PPUSH
1582: LD_INT 1
1584: PPUSH
1585: CALL 10835 0 2
1589: ST_TO_ADDR
// if Brown then
1590: LD_EXP 2
1594: IFFALSE 1612
// JMMSquad = JMMSquad ^ Brown ;
1596: LD_ADDR_EXP 20
1600: PUSH
1601: LD_EXP 20
1605: PUSH
1606: LD_EXP 2
1610: ADD
1611: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
1612: LD_ADDR_EXP 3
1616: PUSH
1617: LD_STRING 10_Donaldson
1619: PPUSH
1620: LD_INT 1
1622: PPUSH
1623: CALL 10835 0 2
1627: ST_TO_ADDR
// if Donaldson then
1628: LD_EXP 3
1632: IFFALSE 1650
// JMMSquad = JMMSquad ^ Donaldson ;
1634: LD_ADDR_EXP 20
1638: PUSH
1639: LD_EXP 20
1643: PUSH
1644: LD_EXP 3
1648: ADD
1649: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
1650: LD_ADDR_EXP 7
1654: PUSH
1655: LD_STRING 10_Frank
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL 10835 0 2
1665: ST_TO_ADDR
// if Frank then
1666: LD_EXP 7
1670: IFFALSE 1688
// JMMSquad = JMMSquad ^ Frank ;
1672: LD_ADDR_EXP 20
1676: PUSH
1677: LD_EXP 20
1681: PUSH
1682: LD_EXP 7
1686: ADD
1687: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1688: LD_ADDR_EXP 9
1692: PUSH
1693: LD_STRING 10_Houten
1695: PPUSH
1696: LD_INT 1
1698: PPUSH
1699: CALL 10835 0 2
1703: ST_TO_ADDR
// if Houten then
1704: LD_EXP 9
1708: IFFALSE 1726
// JMMSquad = JMMSquad ^ Houten ;
1710: LD_ADDR_EXP 20
1714: PUSH
1715: LD_EXP 20
1719: PUSH
1720: LD_EXP 9
1724: ADD
1725: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1726: LD_ADDR_EXP 21
1730: PUSH
1731: LD_STRING OthersIn10
1733: PPUSH
1734: CALL_OW 31
1738: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1739: LD_ADDR_EXP 24
1743: PUSH
1744: LD_STRING Powell
1746: PPUSH
1747: LD_INT 0
1749: PPUSH
1750: CALL 10835 0 2
1754: ST_TO_ADDR
// for i in JMMSquad do
1755: LD_ADDR_VAR 0 2
1759: PUSH
1760: LD_EXP 20
1764: PUSH
1765: FOR_IN
1766: IFFALSE 2046
// begin if count < 3 then
1768: LD_VAR 0 6
1772: PUSH
1773: LD_INT 3
1775: LESS
1776: IFFALSE 1893
// begin vc_engine = 1 ;
1778: LD_ADDR_OWVAR 39
1782: PUSH
1783: LD_INT 1
1785: ST_TO_ADDR
// vc_control = 1 ;
1786: LD_ADDR_OWVAR 38
1790: PUSH
1791: LD_INT 1
1793: ST_TO_ADDR
// vc_weapon = 12 ;
1794: LD_ADDR_OWVAR 40
1798: PUSH
1799: LD_INT 12
1801: ST_TO_ADDR
// vc_chassis = 3 ;
1802: LD_ADDR_OWVAR 37
1806: PUSH
1807: LD_INT 3
1809: ST_TO_ADDR
// veh = CreateVehicle ;
1810: LD_ADDR_VAR 0 4
1814: PUSH
1815: CALL_OW 45
1819: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1820: LD_VAR 0 4
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1832: LD_VAR 0 4
1836: PPUSH
1837: LD_INT 2
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 49
// if count mod 2 = 0 then
1847: LD_VAR 0 6
1851: PUSH
1852: LD_INT 2
1854: MOD
1855: PUSH
1856: LD_INT 0
1858: EQUAL
1859: IFFALSE 1878
// AddCargo ( veh , 1 , 100 ) else
1861: LD_VAR 0 4
1865: PPUSH
1866: LD_INT 1
1868: PPUSH
1869: LD_INT 100
1871: PPUSH
1872: CALL_OW 291
1876: GO 1893
// AddCargo ( veh , 3 , 100 ) end ;
1878: LD_VAR 0 4
1882: PPUSH
1883: LD_INT 3
1885: PPUSH
1886: LD_INT 100
1888: PPUSH
1889: CALL_OW 291
// if count >= 3 then
1893: LD_VAR 0 6
1897: PUSH
1898: LD_INT 3
1900: GREATEREQUAL
1901: IFFALSE 2016
// begin vc_engine = 1 ;
1903: LD_ADDR_OWVAR 39
1907: PUSH
1908: LD_INT 1
1910: ST_TO_ADDR
// vc_control = 1 ;
1911: LD_ADDR_OWVAR 38
1915: PUSH
1916: LD_INT 1
1918: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1919: LD_ADDR_OWVAR 40
1923: PUSH
1924: LD_INT 3
1926: PUSH
1927: LD_INT 4
1929: PUSH
1930: LD_INT 5
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 3
1943: PPUSH
1944: CALL_OW 12
1948: ARRAY
1949: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1950: LD_ADDR_OWVAR 37
1954: PUSH
1955: LD_INT 2
1957: PUSH
1958: LD_INT 3
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_VAR 0 2
1969: PUSH
1970: LD_INT 2
1972: MOD
1973: PUSH
1974: LD_INT 1
1976: PLUS
1977: ARRAY
1978: ST_TO_ADDR
// veh = CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 1
1996: PPUSH
1997: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2001: LD_VAR 0 4
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// end ; count = count + 1 ;
2016: LD_ADDR_VAR 0 6
2020: PUSH
2021: LD_VAR 0 6
2025: PUSH
2026: LD_INT 1
2028: PLUS
2029: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 4
2039: PPUSH
2040: CALL_OW 52
// end ;
2044: GO 1765
2046: POP
2047: POP
// for i in others10 do
2048: LD_ADDR_VAR 0 2
2052: PUSH
2053: LD_EXP 21
2057: PUSH
2058: FOR_IN
2059: IFFALSE 2206
// begin vc_engine = 1 ;
2061: LD_ADDR_OWVAR 39
2065: PUSH
2066: LD_INT 1
2068: ST_TO_ADDR
// vc_control = 1 ;
2069: LD_ADDR_OWVAR 38
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2077: LD_ADDR_OWVAR 40
2081: PUSH
2082: LD_INT 3
2084: PUSH
2085: LD_INT 4
2087: PUSH
2088: LD_INT 5
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 3
2101: PPUSH
2102: CALL_OW 12
2106: ARRAY
2107: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2108: LD_ADDR_OWVAR 37
2112: PUSH
2113: LD_INT 2
2115: PUSH
2116: LD_INT 3
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_INT 2
2130: MOD
2131: PUSH
2132: LD_INT 1
2134: PLUS
2135: ARRAY
2136: ST_TO_ADDR
// veh = CreateVehicle ;
2137: LD_ADDR_VAR 0 4
2141: PUSH
2142: CALL_OW 45
2146: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2159: LD_VAR 0 4
2163: PPUSH
2164: LD_INT 2
2166: PPUSH
2167: LD_INT 0
2169: PPUSH
2170: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2174: LD_ADDR_EXP 28
2178: PUSH
2179: LD_EXP 28
2183: PUSH
2184: LD_VAR 0 4
2188: ADD
2189: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2190: LD_VAR 0 2
2194: PPUSH
2195: LD_VAR 0 4
2199: PPUSH
2200: CALL_OW 52
// end ;
2204: GO 2058
2206: POP
2207: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2208: LD_INT 22
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PPUSH
2232: CALL_OW 69
2236: PPUSH
2237: LD_INT 1
2239: PPUSH
2240: CALL_OW 336
// end ;
2244: LD_VAR 0 1
2248: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2249: LD_INT 0
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
// uc_side = 1 ;
2256: LD_ADDR_OWVAR 20
2260: PUSH
2261: LD_INT 1
2263: ST_TO_ADDR
// uc_nation = 1 ;
2264: LD_ADDR_OWVAR 21
2268: PUSH
2269: LD_INT 1
2271: ST_TO_ADDR
// for i := 1 to 10 do
2272: LD_ADDR_VAR 0 2
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_INT 10
2284: PUSH
2285: FOR_TO
2286: IFFALSE 2468
// begin vc_engine = 1 ;
2288: LD_ADDR_OWVAR 39
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// vc_control = 1 ;
2296: LD_ADDR_OWVAR 38
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2304: LD_ADDR_OWVAR 40
2308: PUSH
2309: LD_INT 3
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: LD_INT 5
2317: PUSH
2318: LD_INT 12
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 1
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 12
2337: ARRAY
2338: ST_TO_ADDR
// vc_chassis = 3 ;
2339: LD_ADDR_OWVAR 37
2343: PUSH
2344: LD_INT 3
2346: ST_TO_ADDR
// veh = CreateVehicle ;
2347: LD_ADDR_VAR 0 3
2351: PUSH
2352: CALL_OW 45
2356: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2357: LD_VAR 0 3
2361: PPUSH
2362: LD_INT 1
2364: PPUSH
2365: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2369: LD_VAR 0 3
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2384: LD_ADDR_EXP 28
2388: PUSH
2389: LD_EXP 28
2393: PUSH
2394: LD_VAR 0 3
2398: ADD
2399: ST_TO_ADDR
// if vc_weapon = 12 then
2400: LD_OWVAR 40
2404: PUSH
2405: LD_INT 12
2407: EQUAL
2408: IFFALSE 2466
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2410: LD_ADDR_VAR 0 4
2414: PUSH
2415: LD_INT 5
2417: PPUSH
2418: LD_INT 10
2420: PPUSH
2421: CALL_OW 12
2425: PUSH
2426: LD_INT 10
2428: MUL
2429: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2430: LD_VAR 0 3
2434: PPUSH
2435: LD_INT 1
2437: PUSH
2438: LD_INT 3
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 2
2450: PPUSH
2451: CALL_OW 12
2455: ARRAY
2456: PPUSH
2457: LD_VAR 0 4
2461: PPUSH
2462: CALL_OW 291
// end ; end ;
2466: GO 2285
2468: POP
2469: POP
// end ;
2470: LD_VAR 0 1
2474: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2475: LD_INT 0
2477: PPUSH
2478: PPUSH
2479: PPUSH
// uc_side = 4 ;
2480: LD_ADDR_OWVAR 20
2484: PUSH
2485: LD_INT 4
2487: ST_TO_ADDR
// uc_nation = 1 ;
2488: LD_ADDR_OWVAR 21
2492: PUSH
2493: LD_INT 1
2495: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
2496: LD_ADDR_EXP 11
2500: PUSH
2501: LD_STRING Simms
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL 10835 0 2
2511: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
2512: LD_ADDR_EXP 12
2516: PUSH
2517: LD_STRING 08_Denis
2519: PPUSH
2520: LD_INT 1
2522: PPUSH
2523: CALL 10835 0 2
2527: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
2528: LD_ADDR_EXP 13
2532: PUSH
2533: LD_STRING 08_Joan
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL 10835 0 2
2543: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2544: LD_STRING 08_Khatam
2546: PPUSH
2547: CALL_OW 28
2551: IFFALSE 2571
// Khatam = PrepareUnit ( 08_Khatam , true ) else
2553: LD_ADDR_EXP 14
2557: PUSH
2558: LD_STRING 08_Khatam
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL 10835 0 2
2568: ST_TO_ADDR
2569: GO 2596
// if TestCharacters ( 03_Khatam ) then
2571: LD_STRING 03_Khatam
2573: PPUSH
2574: CALL_OW 28
2578: IFFALSE 2596
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
2580: LD_ADDR_EXP 14
2584: PUSH
2585: LD_STRING 03_Khatam
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: CALL 10835 0 2
2595: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
2596: LD_ADDR_EXP 15
2600: PUSH
2601: LD_STRING 08_Gladstone
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL 10835 0 2
2611: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
2612: LD_ADDR_EXP 17
2616: PUSH
2617: LD_STRING DeltaDoctor
2619: PPUSH
2620: LD_INT 1
2622: PPUSH
2623: CALL 10835 0 2
2627: ST_TO_ADDR
// Frank := PrepareUnit ( 08_Frank , true ) ;
2628: LD_ADDR_EXP 7
2632: PUSH
2633: LD_STRING 08_Frank
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL 10835 0 2
2643: ST_TO_ADDR
// if Frank then
2644: LD_EXP 7
2648: IFFALSE 2668
// Kikuchi = PrepareUnit ( Yamoko , true ) else
2650: LD_ADDR_EXP 8
2654: PUSH
2655: LD_STRING Yamoko
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: CALL 10835 0 2
2665: ST_TO_ADDR
2666: GO 2684
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
2668: LD_ADDR_EXP 8
2672: PUSH
2673: LD_STRING 08_Kikuchi
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: CALL 10835 0 2
2683: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2684: LD_ADDR_EXP 22
2688: PUSH
2689: LD_STRING 09_others
2691: PPUSH
2692: CALL_OW 31
2696: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2697: LD_ADDR_EXP 23
2701: PUSH
2702: LD_STRING 09_apes
2704: PPUSH
2705: CALL_OW 31
2709: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2710: LD_EXP 11
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: LD_INT 0
2720: PPUSH
2721: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2725: LD_EXP 12
2729: PPUSH
2730: LD_INT 1
2732: PPUSH
2733: LD_INT 0
2735: PPUSH
2736: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2740: LD_EXP 13
2744: PPUSH
2745: LD_INT 1
2747: PPUSH
2748: LD_INT 0
2750: PPUSH
2751: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2755: LD_EXP 14
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2770: LD_EXP 15
2774: PPUSH
2775: LD_INT 1
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2785: LD_EXP 17
2789: PPUSH
2790: LD_INT 1
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: CALL_OW 49
// if Kikuchi then
2800: LD_EXP 8
2804: IFFALSE 2821
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2806: LD_EXP 8
2810: PPUSH
2811: LD_INT 1
2813: PPUSH
2814: LD_INT 0
2816: PPUSH
2817: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2821: LD_EXP 11
2825: PUSH
2826: LD_EXP 14
2830: PUSH
2831: LD_EXP 12
2835: PUSH
2836: LD_EXP 15
2840: PUSH
2841: LD_EXP 17
2845: PUSH
2846: LD_EXP 13
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: PPUSH
2859: LD_INT 4
2861: PPUSH
2862: CALL_OW 336
// if others09 > 2 then
2866: LD_EXP 22
2870: PUSH
2871: LD_INT 2
2873: GREATER
2874: IFFALSE 2955
// begin for i := 1 to 3 do
2876: LD_ADDR_VAR 0 2
2880: PUSH
2881: DOUBLE
2882: LD_INT 1
2884: DEC
2885: ST_TO_ADDR
2886: LD_INT 3
2888: PUSH
2889: FOR_TO
2890: IFFALSE 2951
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2892: LD_EXP 22
2896: PUSH
2897: LD_VAR 0 2
2901: ARRAY
2902: PPUSH
2903: LD_INT 1
2905: PPUSH
2906: LD_INT 0
2908: PPUSH
2909: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2913: LD_ADDR_EXP 22
2917: PUSH
2918: LD_EXP 22
2922: PPUSH
2923: LD_INT 1
2925: PPUSH
2926: CALL_OW 3
2930: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2931: LD_EXP 22
2935: PUSH
2936: LD_VAR 0 2
2940: ARRAY
2941: PPUSH
2942: LD_INT 2
2944: PPUSH
2945: CALL_OW 336
// end ;
2949: GO 2889
2951: POP
2952: POP
// end else
2953: GO 3015
// begin for i in others09 do
2955: LD_ADDR_VAR 0 2
2959: PUSH
2960: LD_EXP 22
2964: PUSH
2965: FOR_IN
2966: IFFALSE 3013
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2968: LD_VAR 0 2
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 49
// others09 = others09 diff i ;
2983: LD_ADDR_EXP 22
2987: PUSH
2988: LD_EXP 22
2992: PUSH
2993: LD_VAR 0 2
2997: DIFF
2998: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2999: LD_VAR 0 2
3003: PPUSH
3004: LD_INT 2
3006: PPUSH
3007: CALL_OW 336
// end ;
3011: GO 2965
3013: POP
3014: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3015: LD_INT 22
3017: PUSH
3018: LD_INT 4
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: PUSH
3044: LD_INT 0
3046: EQUAL
3047: IFFALSE 3179
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_INT 22
3056: PUSH
3057: LD_INT 4
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 25
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PPUSH
3078: CALL_OW 69
3082: PUSH
3083: LD_EXP 11
3087: PUSH
3088: LD_EXP 14
3092: PUSH
3093: LD_EXP 12
3097: PUSH
3098: LD_EXP 15
3102: PUSH
3103: LD_EXP 17
3107: PUSH
3108: LD_EXP 13
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: DIFF
3121: ST_TO_ADDR
// if not tmp then
3122: LD_VAR 0 3
3126: NOT
3127: IFFALSE 3163
// begin if Denis then
3129: LD_EXP 12
3133: IFFALSE 3149
// SetClass ( Denis , 2 ) else
3135: LD_EXP 12
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: CALL_OW 336
3147: GO 3161
// SetClass ( DeltaDoctor , 2 ) ;
3149: LD_EXP 17
3153: PPUSH
3154: LD_INT 2
3156: PPUSH
3157: CALL_OW 336
// end else
3161: GO 3179
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3163: LD_VAR 0 3
3167: PUSH
3168: LD_INT 1
3170: ARRAY
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: CALL_OW 336
// end ; end ; for i in ape09 do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_EXP 23
3188: PUSH
3189: FOR_IN
3190: IFFALSE 3209
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 49
3207: GO 3189
3209: POP
3210: POP
// uc_side = 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// hc_class := 1 ;
3219: LD_ADDR_OWVAR 28
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// hc_sex := sex_female ;
3227: LD_ADDR_OWVAR 27
3231: PUSH
3232: LD_INT 2
3234: ST_TO_ADDR
// hc_gallery :=  ;
3235: LD_ADDR_OWVAR 33
3239: PUSH
3240: LD_STRING 
3242: ST_TO_ADDR
// hc_name :=  ;
3243: LD_ADDR_OWVAR 26
3247: PUSH
3248: LD_STRING 
3250: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3251: LD_ADDR_OWVAR 31
3255: PUSH
3256: LD_INT 1
3258: PUSH
3259: LD_INT 7
3261: PUSH
3262: LD_INT 1
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: ST_TO_ADDR
// AmScout = CreateHuman ;
3274: LD_ADDR_EXP 18
3278: PUSH
3279: CALL_OW 44
3283: ST_TO_ADDR
// end ;
3284: LD_VAR 0 1
3288: RET
// export function PrepareCornell ; begin
3289: LD_INT 0
3291: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3292: LD_INT 4
3294: PPUSH
3295: LD_INT 4
3297: PPUSH
3298: CALL_OW 343
// uc_side = 4 ;
3302: LD_ADDR_OWVAR 20
3306: PUSH
3307: LD_INT 4
3309: ST_TO_ADDR
// uc_nation = 1 ;
3310: LD_ADDR_OWVAR 21
3314: PUSH
3315: LD_INT 1
3317: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
3318: LD_ADDR_EXP 19
3322: PUSH
3323: LD_STRING 03_Cornel
3325: PPUSH
3326: LD_INT 1
3328: PPUSH
3329: CALL 10835 0 2
3333: ST_TO_ADDR
// if not Cornell then
3334: LD_EXP 19
3338: NOT
3339: IFFALSE 3343
// exit ;
3341: GO 3451
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3343: LD_EXP 19
3347: PPUSH
3348: LD_INT 8
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3358: LD_EXP 19
3362: PPUSH
3363: LD_INT 350
3365: PPUSH
3366: CALL_OW 234
// if IsInUnit ( JMM ) then
3370: LD_EXP 1
3374: PPUSH
3375: CALL_OW 310
3379: IFFALSE 3422
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3381: LD_EXP 19
3385: PPUSH
3386: LD_EXP 1
3390: PPUSH
3391: CALL_OW 310
3395: PPUSH
3396: CALL_OW 250
3400: PPUSH
3401: LD_EXP 1
3405: PPUSH
3406: CALL_OW 310
3410: PPUSH
3411: CALL_OW 251
3415: PPUSH
3416: CALL_OW 111
3420: GO 3451
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3422: LD_EXP 19
3426: PPUSH
3427: LD_EXP 1
3431: PPUSH
3432: CALL_OW 250
3436: PPUSH
3437: LD_EXP 1
3441: PPUSH
3442: CALL_OW 251
3446: PPUSH
3447: CALL_OW 111
// end ; end_of_file
3451: LD_VAR 0 1
3455: RET
// export function PrepareRussians ; var i , un ; begin
3456: LD_INT 0
3458: PPUSH
3459: PPUSH
3460: PPUSH
// uc_side = 3 ;
3461: LD_ADDR_OWVAR 20
3465: PUSH
3466: LD_INT 3
3468: ST_TO_ADDR
// uc_nation = 3 ;
3469: LD_ADDR_OWVAR 21
3473: PUSH
3474: LD_INT 3
3476: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
3477: LD_ADDR_EXP 25
3481: PUSH
3482: LD_STRING Tsaritsyn
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: CALL 10835 0 2
3492: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3493: LD_EXP 25
3497: PPUSH
3498: LD_INT 3
3500: PPUSH
3501: LD_INT 0
3503: PPUSH
3504: CALL_OW 49
// for i = 1 to 14 do
3508: LD_ADDR_VAR 0 2
3512: PUSH
3513: DOUBLE
3514: LD_INT 1
3516: DEC
3517: ST_TO_ADDR
3518: LD_INT 14
3520: PUSH
3521: FOR_TO
3522: IFFALSE 3608
// begin uc_side = 3 ;
3524: LD_ADDR_OWVAR 20
3528: PUSH
3529: LD_INT 3
3531: ST_TO_ADDR
// uc_nation = 3 ;
3532: LD_ADDR_OWVAR 21
3536: PUSH
3537: LD_INT 3
3539: ST_TO_ADDR
// hc_gallery =  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name =  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 1
3561: PPUSH
3562: LD_EXP 36
3566: PPUSH
3567: LD_EXP 37
3571: PPUSH
3572: CALL_OW 12
3576: PPUSH
3577: CALL_OW 380
// un = CreateHuman ;
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: CALL_OW 44
3590: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_INT 3
3598: PPUSH
3599: LD_INT 0
3601: PPUSH
3602: CALL_OW 49
// end ;
3606: GO 3521
3608: POP
3609: POP
// for i = 1 to 6 do
3610: LD_ADDR_VAR 0 2
3614: PUSH
3615: DOUBLE
3616: LD_INT 1
3618: DEC
3619: ST_TO_ADDR
3620: LD_INT 6
3622: PUSH
3623: FOR_TO
3624: IFFALSE 3710
// begin uc_side = 3 ;
3626: LD_ADDR_OWVAR 20
3630: PUSH
3631: LD_INT 3
3633: ST_TO_ADDR
// uc_nation = 3 ;
3634: LD_ADDR_OWVAR 21
3638: PUSH
3639: LD_INT 3
3641: ST_TO_ADDR
// hc_gallery =  ;
3642: LD_ADDR_OWVAR 33
3646: PUSH
3647: LD_STRING 
3649: ST_TO_ADDR
// hc_name =  ;
3650: LD_ADDR_OWVAR 26
3654: PUSH
3655: LD_STRING 
3657: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3658: LD_INT 0
3660: PPUSH
3661: LD_INT 2
3663: PPUSH
3664: LD_EXP 36
3668: PPUSH
3669: LD_EXP 37
3673: PPUSH
3674: CALL_OW 12
3678: PPUSH
3679: CALL_OW 380
// un = CreateHuman ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 44
3692: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_INT 3
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL_OW 49
// end ;
3708: GO 3623
3710: POP
3711: POP
// for i = 1 to 6 do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: DOUBLE
3718: LD_INT 1
3720: DEC
3721: ST_TO_ADDR
3722: LD_INT 6
3724: PUSH
3725: FOR_TO
3726: IFFALSE 3812
// begin uc_side = 3 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 3
3735: ST_TO_ADDR
// uc_nation = 3 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 3
3743: ST_TO_ADDR
// hc_gallery =  ;
3744: LD_ADDR_OWVAR 33
3748: PUSH
3749: LD_STRING 
3751: ST_TO_ADDR
// hc_name =  ;
3752: LD_ADDR_OWVAR 26
3756: PUSH
3757: LD_STRING 
3759: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3760: LD_INT 0
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: LD_EXP 36
3770: PPUSH
3771: LD_EXP 37
3775: PPUSH
3776: CALL_OW 12
3780: PPUSH
3781: CALL_OW 380
// un = CreateHuman ;
3785: LD_ADDR_VAR 0 3
3789: PUSH
3790: CALL_OW 44
3794: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 0
3805: PPUSH
3806: CALL_OW 49
// end ;
3810: GO 3725
3812: POP
3813: POP
// for i = 1 to 4 do
3814: LD_ADDR_VAR 0 2
3818: PUSH
3819: DOUBLE
3820: LD_INT 1
3822: DEC
3823: ST_TO_ADDR
3824: LD_INT 4
3826: PUSH
3827: FOR_TO
3828: IFFALSE 3914
// begin uc_side = 3 ;
3830: LD_ADDR_OWVAR 20
3834: PUSH
3835: LD_INT 3
3837: ST_TO_ADDR
// uc_nation = 3 ;
3838: LD_ADDR_OWVAR 21
3842: PUSH
3843: LD_INT 3
3845: ST_TO_ADDR
// hc_gallery =  ;
3846: LD_ADDR_OWVAR 33
3850: PUSH
3851: LD_STRING 
3853: ST_TO_ADDR
// hc_name =  ;
3854: LD_ADDR_OWVAR 26
3858: PUSH
3859: LD_STRING 
3861: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3862: LD_INT 0
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_EXP 36
3872: PPUSH
3873: LD_EXP 37
3877: PPUSH
3878: CALL_OW 12
3882: PPUSH
3883: CALL_OW 380
// un = CreateHuman ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: CALL_OW 44
3896: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3897: LD_VAR 0 3
3901: PPUSH
3902: LD_INT 3
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: CALL_OW 49
// end ;
3912: GO 3827
3914: POP
3915: POP
// end ; end_of_file
3916: LD_VAR 0 1
3920: RET
// export function PrepareArabianCommander ; begin
3921: LD_INT 0
3923: PPUSH
// uc_side = 2 ;
3924: LD_ADDR_OWVAR 20
3928: PUSH
3929: LD_INT 2
3931: ST_TO_ADDR
// uc_nation = 2 ;
3932: LD_ADDR_OWVAR 21
3936: PUSH
3937: LD_INT 2
3939: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3940: LD_ADDR_EXP 26
3944: PUSH
3945: LD_STRING Dietrich
3947: PPUSH
3948: CALL_OW 25
3952: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3953: LD_EXP 26
3957: PPUSH
3958: LD_INT 4
3960: PPUSH
3961: LD_INT 0
3963: PPUSH
3964: CALL_OW 49
// end ;
3968: LD_VAR 0 1
3972: RET
// export function PrepareArabian ; var i , un , veh ; begin
3973: LD_INT 0
3975: PPUSH
3976: PPUSH
3977: PPUSH
3978: PPUSH
// uc_side := 2 ;
3979: LD_ADDR_OWVAR 20
3983: PUSH
3984: LD_INT 2
3986: ST_TO_ADDR
// uc_nation := 2 ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_INT 2
3994: ST_TO_ADDR
// if not Ahmed then
3995: LD_EXP 27
3999: NOT
4000: IFFALSE 4068
// begin InitHc ;
4002: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4006: LD_INT 1
4008: PPUSH
4009: LD_INT 1
4011: PPUSH
4012: LD_EXP 36
4016: PPUSH
4017: LD_EXP 37
4021: PUSH
4022: LD_INT 1
4024: PLUS
4025: PPUSH
4026: CALL_OW 12
4030: PPUSH
4031: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4035: LD_ADDR_OWVAR 26
4039: PUSH
4040: LD_STRING Ahmed Abbasid
4042: ST_TO_ADDR
// Ahmed := CreateHuman ;
4043: LD_ADDR_EXP 27
4047: PUSH
4048: CALL_OW 44
4052: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4053: LD_EXP 27
4057: PPUSH
4058: LD_INT 4
4060: PPUSH
4061: LD_INT 0
4063: PPUSH
4064: CALL_OW 49
// end ; for i = 1 to 4 do
4068: LD_ADDR_VAR 0 2
4072: PUSH
4073: DOUBLE
4074: LD_INT 1
4076: DEC
4077: ST_TO_ADDR
4078: LD_INT 4
4080: PUSH
4081: FOR_TO
4082: IFFALSE 4168
// begin uc_side = 2 ;
4084: LD_ADDR_OWVAR 20
4088: PUSH
4089: LD_INT 2
4091: ST_TO_ADDR
// uc_nation = 2 ;
4092: LD_ADDR_OWVAR 21
4096: PUSH
4097: LD_INT 2
4099: ST_TO_ADDR
// hc_gallery =  ;
4100: LD_ADDR_OWVAR 33
4104: PUSH
4105: LD_STRING 
4107: ST_TO_ADDR
// hc_name =  ;
4108: LD_ADDR_OWVAR 26
4112: PUSH
4113: LD_STRING 
4115: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4116: LD_INT 0
4118: PPUSH
4119: LD_INT 2
4121: PPUSH
4122: LD_EXP 36
4126: PPUSH
4127: LD_EXP 37
4131: PPUSH
4132: CALL_OW 12
4136: PPUSH
4137: CALL_OW 380
// un = CreateHuman ;
4141: LD_ADDR_VAR 0 3
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4151: LD_VAR 0 3
4155: PPUSH
4156: LD_INT 4
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 49
// end ;
4166: GO 4081
4168: POP
4169: POP
// for i = 1 to 5 do
4170: LD_ADDR_VAR 0 2
4174: PUSH
4175: DOUBLE
4176: LD_INT 1
4178: DEC
4179: ST_TO_ADDR
4180: LD_INT 5
4182: PUSH
4183: FOR_TO
4184: IFFALSE 4270
// begin uc_side = 2 ;
4186: LD_ADDR_OWVAR 20
4190: PUSH
4191: LD_INT 2
4193: ST_TO_ADDR
// uc_nation = 2 ;
4194: LD_ADDR_OWVAR 21
4198: PUSH
4199: LD_INT 2
4201: ST_TO_ADDR
// hc_gallery =  ;
4202: LD_ADDR_OWVAR 33
4206: PUSH
4207: LD_STRING 
4209: ST_TO_ADDR
// hc_name =  ;
4210: LD_ADDR_OWVAR 26
4214: PUSH
4215: LD_STRING 
4217: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4218: LD_INT 0
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: LD_EXP 36
4228: PPUSH
4229: LD_EXP 37
4233: PPUSH
4234: CALL_OW 12
4238: PPUSH
4239: CALL_OW 380
// un = CreateHuman ;
4243: LD_ADDR_VAR 0 3
4247: PUSH
4248: CALL_OW 44
4252: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4253: LD_VAR 0 3
4257: PPUSH
4258: LD_INT 4
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 49
// end ;
4268: GO 4183
4270: POP
4271: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: DOUBLE
4278: LD_INT 1
4280: DEC
4281: ST_TO_ADDR
4282: LD_INT 3
4284: PUSH
4285: LD_INT 4
4287: PUSH
4288: LD_INT 4
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_OWVAR 67
4300: ARRAY
4301: PUSH
4302: FOR_TO
4303: IFFALSE 4389
// begin uc_side = 2 ;
4305: LD_ADDR_OWVAR 20
4309: PUSH
4310: LD_INT 2
4312: ST_TO_ADDR
// uc_nation = 2 ;
4313: LD_ADDR_OWVAR 21
4317: PUSH
4318: LD_INT 2
4320: ST_TO_ADDR
// hc_gallery =  ;
4321: LD_ADDR_OWVAR 33
4325: PUSH
4326: LD_STRING 
4328: ST_TO_ADDR
// hc_name =  ;
4329: LD_ADDR_OWVAR 26
4333: PUSH
4334: LD_STRING 
4336: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_INT 4
4342: PPUSH
4343: LD_EXP 36
4347: PPUSH
4348: LD_EXP 37
4352: PPUSH
4353: CALL_OW 12
4357: PPUSH
4358: CALL_OW 380
// un = CreateHuman ;
4362: LD_ADDR_VAR 0 3
4366: PUSH
4367: CALL_OW 44
4371: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4372: LD_VAR 0 3
4376: PPUSH
4377: LD_INT 4
4379: PPUSH
4380: LD_INT 0
4382: PPUSH
4383: CALL_OW 49
// end ;
4387: GO 4302
4389: POP
4390: POP
// for i = 1 to 2 do
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: DOUBLE
4397: LD_INT 1
4399: DEC
4400: ST_TO_ADDR
4401: LD_INT 2
4403: PUSH
4404: FOR_TO
4405: IFFALSE 4535
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4407: LD_ADDR_VAR 0 4
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 21
4424: PUSH
4425: LD_INT 2
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 58
4434: PUSH
4435: EMPTY
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 69
4447: ST_TO_ADDR
// uc_side = 2 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 2
4455: ST_TO_ADDR
// uc_nation = 2 ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 2
4463: ST_TO_ADDR
// hc_gallery =  ;
4464: LD_ADDR_OWVAR 33
4468: PUSH
4469: LD_STRING 
4471: ST_TO_ADDR
// hc_name =  ;
4472: LD_ADDR_OWVAR 26
4476: PUSH
4477: LD_STRING 
4479: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 3
4485: PPUSH
4486: LD_EXP 36
4490: PPUSH
4491: LD_EXP 37
4495: PPUSH
4496: CALL_OW 12
4500: PPUSH
4501: CALL_OW 380
// un = CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_VAR 0 4
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: CALL_OW 52
// end ;
4533: GO 4404
4535: POP
4536: POP
// end ;
4537: LD_VAR 0 1
4541: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4542: LD_INT 0
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
// for i := 1 to 2 do
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: DOUBLE
4556: LD_INT 1
4558: DEC
4559: ST_TO_ADDR
4560: LD_INT 2
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4690
// begin uc_side = 5 ;
4566: LD_ADDR_OWVAR 20
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// uc_nation = 2 ;
4574: LD_ADDR_OWVAR 21
4578: PUSH
4579: LD_INT 2
4581: ST_TO_ADDR
// vc_chassis := 31 ;
4582: LD_ADDR_OWVAR 37
4586: PUSH
4587: LD_INT 31
4589: ST_TO_ADDR
// vc_control := control_rider ;
4590: LD_ADDR_OWVAR 38
4594: PUSH
4595: LD_INT 4
4597: ST_TO_ADDR
// animal := CreateVehicle ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 45
4607: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4608: LD_VAR 0 3
4612: PPUSH
4613: LD_INT 7
4615: PPUSH
4616: LD_INT 0
4618: PPUSH
4619: CALL_OW 49
// hc_gallery =  ;
4623: LD_ADDR_OWVAR 33
4627: PUSH
4628: LD_STRING 
4630: ST_TO_ADDR
// hc_name =  ;
4631: LD_ADDR_OWVAR 26
4635: PUSH
4636: LD_STRING 
4638: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4639: LD_INT 0
4641: PPUSH
4642: LD_INT 11
4644: PPUSH
4645: LD_EXP 36
4649: PPUSH
4650: LD_EXP 37
4654: PPUSH
4655: CALL_OW 12
4659: PPUSH
4660: CALL_OW 380
// un = CreateHuman ;
4664: LD_ADDR_VAR 0 4
4668: PUSH
4669: CALL_OW 44
4673: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4674: LD_VAR 0 4
4678: PPUSH
4679: LD_VAR 0 3
4683: PPUSH
4684: CALL_OW 52
// end ;
4688: GO 4563
4690: POP
4691: POP
// repeat wait ( 0 0$1 ) ;
4692: LD_INT 35
4694: PPUSH
4695: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4699: LD_ADDR_VAR 0 5
4703: PUSH
4704: LD_INT 22
4706: PUSH
4707: LD_INT 1
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: PPUSH
4719: LD_VAR 0 2
4723: PPUSH
4724: CALL_OW 74
4728: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4729: LD_ADDR_VAR 0 6
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 1
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 2
4746: PUSH
4747: LD_INT 59
4749: PUSH
4750: EMPTY
4751: LIST
4752: PUSH
4753: LD_INT 21
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: EMPTY
4784: LIST
4785: PPUSH
4786: CALL_OW 69
4790: PPUSH
4791: LD_VAR 0 2
4795: PPUSH
4796: CALL_OW 74
4800: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: LD_INT 22
4808: PUSH
4809: LD_INT 5
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 25
4818: PUSH
4819: LD_INT 11
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PPUSH
4830: CALL_OW 69
4834: PUSH
4835: FOR_IN
4836: IFFALSE 4906
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4838: LD_VAR 0 2
4842: PPUSH
4843: LD_VAR 0 5
4847: PPUSH
4848: CALL_OW 296
4852: PUSH
4853: LD_INT 8
4855: PLUS
4856: PUSH
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_VAR 0 6
4866: PPUSH
4867: CALL_OW 296
4871: LESS
4872: IFFALSE 4890
// ComAttackUnit ( i , target1 ) else
4874: LD_VAR 0 2
4878: PPUSH
4879: LD_VAR 0 5
4883: PPUSH
4884: CALL_OW 115
4888: GO 4904
// ComAttackUnit ( i , target2 ) ;
4890: LD_VAR 0 2
4894: PPUSH
4895: LD_VAR 0 6
4899: PPUSH
4900: CALL_OW 115
// end ;
4904: GO 4835
4906: POP
4907: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4908: LD_INT 22
4910: PUSH
4911: LD_INT 5
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 25
4920: PUSH
4921: LD_INT 11
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PPUSH
4932: CALL_OW 69
4936: PUSH
4937: LD_INT 0
4939: EQUAL
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: PUSH
4956: LD_INT 0
4958: EQUAL
4959: OR
4960: IFFALSE 4692
// end ; end_of_file
4962: LD_VAR 0 1
4966: RET
// every 1 do
4967: GO 4969
4969: DISABLE
// begin Video ( true ) ;
4970: LD_INT 1
4972: PPUSH
4973: CALL 10892 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4977: LD_INT 1
4979: PPUSH
4980: LD_INT 19
4982: PPUSH
4983: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4987: LD_EXP 11
4991: PPUSH
4992: CALL_OW 87
// wait ( 0 0$3 ) ;
4996: LD_INT 105
4998: PPUSH
4999: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5003: LD_EXP 1
5007: PPUSH
5008: CALL_OW 310
5012: PPUSH
5013: CALL_OW 85
// Wait ( 0 0$1 ) ;
5017: LD_INT 35
5019: PPUSH
5020: CALL_OW 67
// if IsOk ( Gary ) then
5024: LD_EXP 10
5028: PPUSH
5029: CALL_OW 302
5033: IFFALSE 5071
// begin Say ( Gary , D2-Gary-1 ) ;
5035: LD_EXP 10
5039: PPUSH
5040: LD_STRING D2-Gary-1
5042: PPUSH
5043: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5047: LD_EXP 1
5051: PPUSH
5052: LD_STRING D2-JMM-1
5054: PPUSH
5055: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5059: LD_EXP 10
5063: PPUSH
5064: LD_STRING D2-Gary-2
5066: PPUSH
5067: CALL_OW 88
// end ; Video ( false ) ;
5071: LD_INT 0
5073: PPUSH
5074: CALL 10892 0 1
// ChangeMissionObjectives ( M1 ) ;
5078: LD_STRING M1
5080: PPUSH
5081: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5085: LD_INT 38
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: LD_INT 100
5093: PPUSH
5094: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5098: LD_INT 47
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 50
5106: PPUSH
5107: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5111: LD_INT 47
5113: PPUSH
5114: LD_INT 3
5116: PPUSH
5117: LD_INT 50
5119: PPUSH
5120: CALL_OW 291
// SaveForQuickRestart ;
5124: CALL_OW 22
// end ;
5128: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5129: LD_EXP 1
5133: PPUSH
5134: LD_EXP 11
5138: PPUSH
5139: CALL_OW 296
5143: PUSH
5144: LD_INT 15
5146: LESS
5147: IFFALSE 5731
5149: GO 5151
5151: DISABLE
5152: LD_INT 0
5154: PPUSH
// begin wait ( 0 0$3 ) ;
5155: LD_INT 105
5157: PPUSH
5158: CALL_OW 67
// Video ( true ) ;
5162: LD_INT 1
5164: PPUSH
5165: CALL 10892 0 1
// ComExitVehicle ( JMM ) ;
5169: LD_EXP 1
5173: PPUSH
5174: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5178: LD_EXP 1
5182: PPUSH
5183: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5187: LD_EXP 1
5191: PPUSH
5192: LD_EXP 11
5196: PPUSH
5197: CALL_OW 179
// p := 15 ;
5201: LD_ADDR_VAR 0 1
5205: PUSH
5206: LD_INT 15
5208: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5209: LD_INT 35
5211: PPUSH
5212: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5216: LD_EXP 11
5220: PUSH
5221: LD_EXP 13
5225: PUSH
5226: LD_EXP 12
5230: PUSH
5231: LD_EXP 14
5235: PUSH
5236: LD_EXP 8
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: PPUSH
5248: LD_EXP 1
5252: PPUSH
5253: CALL_OW 112
// p := p - 1 ;
5257: LD_ADDR_VAR 0 1
5261: PUSH
5262: LD_VAR 0 1
5266: PUSH
5267: LD_INT 1
5269: MINUS
5270: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_EXP 11
5280: PPUSH
5281: CALL_OW 296
5285: PUSH
5286: LD_INT 5
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PUSH
5295: LD_INT 0
5297: LESSEQUAL
5298: OR
5299: IFFALSE 5209
// if not IsInUnit ( JMM ) then
5301: LD_EXP 1
5305: PPUSH
5306: CALL_OW 310
5310: NOT
5311: IFFALSE 5327
// ComTurnUnit ( JMM , Simms ) ;
5313: LD_EXP 1
5317: PPUSH
5318: LD_EXP 11
5322: PPUSH
5323: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5327: LD_EXP 11
5331: PUSH
5332: LD_EXP 13
5336: PUSH
5337: LD_EXP 12
5341: PUSH
5342: LD_EXP 14
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: LD_EXP 1
5357: PPUSH
5358: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5362: LD_EXP 1
5366: PUSH
5367: LD_EXP 11
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PPUSH
5376: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5380: LD_EXP 11
5384: PPUSH
5385: LD_STRING D2a-Sim-1
5387: PPUSH
5388: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5392: LD_EXP 1
5396: PPUSH
5397: LD_STRING D2a-JMM-1
5399: PPUSH
5400: CALL_OW 88
// if IsOk ( Joan ) then
5404: LD_EXP 13
5408: PPUSH
5409: CALL_OW 302
5413: IFFALSE 5477
// begin if not IsInUnit ( JMM ) then
5415: LD_EXP 1
5419: PPUSH
5420: CALL_OW 310
5424: NOT
5425: IFFALSE 5441
// ComTurnUnit ( JMM , Joan ) ;
5427: LD_EXP 1
5431: PPUSH
5432: LD_EXP 13
5436: PPUSH
5437: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5441: LD_EXP 13
5445: PPUSH
5446: LD_STRING D2b-Joan-1
5448: PPUSH
5449: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5453: LD_EXP 1
5457: PPUSH
5458: LD_STRING D2b-JMM-1
5460: PPUSH
5461: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5465: LD_EXP 13
5469: PPUSH
5470: LD_STRING D2b-Joan-2
5472: PPUSH
5473: CALL_OW 88
// end ; if IsOk ( Denis ) then
5477: LD_EXP 12
5481: PPUSH
5482: CALL_OW 302
5486: IFFALSE 5526
// begin if not IsInUnit ( JMM ) then
5488: LD_EXP 1
5492: PPUSH
5493: CALL_OW 310
5497: NOT
5498: IFFALSE 5514
// ComTurnUnit ( JMM , Denis ) ;
5500: LD_EXP 1
5504: PPUSH
5505: LD_EXP 12
5509: PPUSH
5510: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5514: LD_EXP 12
5518: PPUSH
5519: LD_STRING D2c-Den-1
5521: PPUSH
5522: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5526: LD_EXP 8
5530: PPUSH
5531: CALL_OW 302
5535: PUSH
5536: LD_STRING 08_Kikuchi
5538: PPUSH
5539: CALL_OW 28
5543: NOT
5544: AND
5545: IFFALSE 5626
// begin repeat wait ( 0 0$1 ) ;
5547: LD_INT 35
5549: PPUSH
5550: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5554: LD_EXP 8
5558: PPUSH
5559: LD_EXP 1
5563: PPUSH
5564: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_EXP 8
5577: PPUSH
5578: CALL_OW 296
5582: PUSH
5583: LD_INT 5
5585: LESS
5586: IFFALSE 5547
// if not IsInUnit ( JMM ) then
5588: LD_EXP 1
5592: PPUSH
5593: CALL_OW 310
5597: NOT
5598: IFFALSE 5614
// ComTurnUnit ( JMM , Kikuchi ) ;
5600: LD_EXP 1
5604: PPUSH
5605: LD_EXP 8
5609: PPUSH
5610: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5614: LD_EXP 8
5618: PPUSH
5619: LD_STRING D3b-Yam-1
5621: PPUSH
5622: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5626: LD_EXP 14
5630: PPUSH
5631: CALL_OW 302
5635: IFFALSE 5687
// begin if not IsInUnit ( JMM ) then
5637: LD_EXP 1
5641: PPUSH
5642: CALL_OW 310
5646: NOT
5647: IFFALSE 5663
// ComTurnUnit ( JMM , Khatam ) ;
5649: LD_EXP 1
5653: PPUSH
5654: LD_EXP 14
5658: PPUSH
5659: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5663: LD_EXP 1
5667: PPUSH
5668: LD_STRING D2c-JMM-1
5670: PPUSH
5671: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5675: LD_EXP 14
5679: PPUSH
5680: LD_STRING D2c-Khat-1
5682: PPUSH
5683: CALL_OW 88
// end ; Video ( false ) ;
5687: LD_INT 0
5689: PPUSH
5690: CALL 10892 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5694: LD_INT 22
5696: PUSH
5697: LD_INT 4
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PPUSH
5709: LD_INT 1
5711: PPUSH
5712: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5716: LD_STRING M1a
5718: PPUSH
5719: CALL_OW 337
// joinEpsilon = 1 ;
5723: LD_ADDR_EXP 29
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// end ;
5731: PPOPN 1
5733: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5734: LD_INT 38
5736: PPUSH
5737: LD_INT 1
5739: PPUSH
5740: CALL_OW 289
5744: PUSH
5745: LD_INT 0
5747: EQUAL
5748: PUSH
5749: LD_INT 47
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 289
5759: PUSH
5760: LD_INT 0
5762: EQUAL
5763: AND
5764: PUSH
5765: LD_INT 47
5767: PPUSH
5768: LD_INT 2
5770: PPUSH
5771: CALL_OW 289
5775: PUSH
5776: LD_INT 0
5778: EQUAL
5779: AND
5780: IFFALSE 5905
5782: GO 5784
5784: DISABLE
5785: LD_INT 0
5787: PPUSH
// begin p := 0 ;
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 0
5795: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5796: LD_INT 38
5798: PUSH
5799: LD_INT 47
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: LD_INT 56
5808: PPUSH
5809: LD_INT 0
5811: PPUSH
5812: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5816: LD_INT 35
5818: PPUSH
5819: CALL_OW 67
// p := p + 1 ;
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: LD_VAR 0 1
5832: PUSH
5833: LD_INT 1
5835: PLUS
5836: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5837: LD_INT 38
5839: PUSH
5840: LD_INT 47
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PPUSH
5847: LD_INT 56
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
5857: LD_INT 38
5859: PPUSH
5860: LD_INT 27
5862: PPUSH
5863: CALL_OW 308
5867: IFFALSE 5876
// RemoveUnit ( cargo1 ) ;
5869: LD_INT 38
5871: PPUSH
5872: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
5876: LD_INT 47
5878: PPUSH
5879: LD_INT 27
5881: PPUSH
5882: CALL_OW 308
5886: IFFALSE 5895
// RemoveUnit ( cargo2 ) ;
5888: LD_INT 47
5890: PPUSH
5891: CALL_OW 64
// until p > 30 ;
5895: LD_VAR 0 1
5899: PUSH
5900: LD_INT 30
5902: GREATER
5903: IFFALSE 5816
// end ;
5905: PPOPN 1
5907: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5908: LD_EXP 65
5912: PUSH
5913: LD_INT 1
5915: EQUAL
5916: IFFALSE 7048
5918: GO 5920
5920: DISABLE
5921: LD_INT 0
5923: PPUSH
5924: PPUSH
5925: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5926: LD_ADDR_VAR 0 1
5930: PUSH
5931: LD_INT 22
5933: PUSH
5934: LD_INT 1
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 25
5943: PUSH
5944: LD_INT 4
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 26
5953: PUSH
5954: LD_INT 1
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: PPUSH
5966: CALL_OW 69
5970: PUSH
5971: LD_EXP 1
5975: PUSH
5976: LD_EXP 2
5980: PUSH
5981: LD_EXP 3
5985: PUSH
5986: LD_EXP 4
5990: PUSH
5991: LD_EXP 5
5995: PUSH
5996: LD_EXP 6
6000: PUSH
6001: LD_EXP 7
6005: PUSH
6006: LD_EXP 8
6010: PUSH
6011: LD_EXP 9
6015: PUSH
6016: LD_EXP 10
6020: PUSH
6021: LD_EXP 11
6025: PUSH
6026: LD_EXP 12
6030: PUSH
6031: LD_EXP 13
6035: PUSH
6036: LD_EXP 14
6040: PUSH
6041: LD_EXP 15
6045: PUSH
6046: LD_EXP 16
6050: PUSH
6051: LD_EXP 17
6055: PUSH
6056: LD_EXP 18
6060: PUSH
6061: LD_EXP 19
6065: PUSH
6066: LD_EXP 24
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: DIFF
6093: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6094: LD_ADDR_VAR 0 2
6098: PUSH
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 26
6111: PUSH
6112: LD_INT 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 25
6124: PUSH
6125: LD_INT 1
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 25
6134: PUSH
6135: LD_INT 2
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: PUSH
6142: LD_INT 25
6144: PUSH
6145: LD_INT 3
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL_OW 69
6167: PUSH
6168: LD_EXP 1
6172: PUSH
6173: LD_EXP 2
6177: PUSH
6178: LD_EXP 3
6182: PUSH
6183: LD_EXP 4
6187: PUSH
6188: LD_EXP 5
6192: PUSH
6193: LD_EXP 6
6197: PUSH
6198: LD_EXP 7
6202: PUSH
6203: LD_EXP 8
6207: PUSH
6208: LD_EXP 9
6212: PUSH
6213: LD_EXP 10
6217: PUSH
6218: LD_EXP 11
6222: PUSH
6223: LD_EXP 12
6227: PUSH
6228: LD_EXP 13
6232: PUSH
6233: LD_EXP 14
6237: PUSH
6238: LD_EXP 15
6242: PUSH
6243: LD_EXP 16
6247: PUSH
6248: LD_EXP 17
6252: PUSH
6253: LD_EXP 18
6257: PUSH
6258: LD_EXP 19
6262: PUSH
6263: LD_EXP 24
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: DIFF
6290: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6291: LD_EXP 10
6295: PUSH
6296: LD_VAR 0 2
6300: OR
6301: PUSH
6302: LD_EXP 17
6306: PUSH
6307: LD_VAR 0 1
6311: OR
6312: AND
6313: IFFALSE 6532
// begin DialogueOn ;
6315: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6319: LD_EXP 17
6323: PPUSH
6324: CALL_OW 302
6328: IFFALSE 6344
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6330: LD_EXP 17
6334: PPUSH
6335: LD_STRING D3-Sci1-1
6337: PPUSH
6338: CALL_OW 88
6342: GO 6356
// Say ( tmp1 , D3-Sci1-1 ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_STRING D3-Sci1-1
6351: PPUSH
6352: CALL_OW 88
// if IsOk ( Gary ) then
6356: LD_EXP 10
6360: PPUSH
6361: CALL_OW 302
6365: IFFALSE 6381
// Say ( Gary , D3-Gary-1 ) else
6367: LD_EXP 10
6371: PPUSH
6372: LD_STRING D3-Gary-1
6374: PPUSH
6375: CALL_OW 88
6379: GO 6393
// Say ( tmp2 , D3-Gary-1 ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_STRING D3-Gary-1
6388: PPUSH
6389: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6393: LD_EXP 17
6397: PPUSH
6398: CALL_OW 302
6402: IFFALSE 6418
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6404: LD_EXP 17
6408: PPUSH
6409: LD_STRING D3-Sci1-2
6411: PPUSH
6412: CALL_OW 88
6416: GO 6430
// Say ( tmp1 , D3-Sci1-2 ) ;
6418: LD_VAR 0 1
6422: PPUSH
6423: LD_STRING D3-Sci1-2
6425: PPUSH
6426: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6430: LD_EXP 1
6434: PPUSH
6435: LD_STRING D3-JMM-2
6437: PPUSH
6438: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6442: LD_EXP 17
6446: PPUSH
6447: CALL_OW 302
6451: IFFALSE 6467
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6453: LD_EXP 17
6457: PPUSH
6458: LD_STRING D3-Sci1-3
6460: PPUSH
6461: CALL_OW 88
6465: GO 6479
// Say ( tmp1 , D3-Sci1-3 ) ;
6467: LD_VAR 0 1
6471: PPUSH
6472: LD_STRING D3-Sci1-3
6474: PPUSH
6475: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6479: LD_EXP 1
6483: PPUSH
6484: LD_STRING D3-JMM-3
6486: PPUSH
6487: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6491: LD_EXP 17
6495: PPUSH
6496: CALL_OW 302
6500: IFFALSE 6516
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6502: LD_EXP 17
6506: PPUSH
6507: LD_STRING D3-Sci1-4
6509: PPUSH
6510: CALL_OW 88
6514: GO 6528
// Say ( tmp1 , D3-Sci1-4 ) ;
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_STRING D3-Sci1-4
6523: PPUSH
6524: CALL_OW 88
// DialogueOff ;
6528: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6532: LD_INT 12
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: LD_INT 1
6540: PPUSH
6541: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6545: LD_INT 32
6547: PPUSH
6548: LD_INT 1
6550: PPUSH
6551: LD_INT 1
6553: PPUSH
6554: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6558: LD_INT 12
6560: PPUSH
6561: LD_INT 1
6563: PPUSH
6564: LD_INT 1
6566: PPUSH
6567: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6571: LD_INT 33
6573: PPUSH
6574: LD_INT 1
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6584: LD_STRING M2
6586: PPUSH
6587: CALL_OW 337
// wait ( 3 3$0 ) ;
6591: LD_INT 6300
6593: PPUSH
6594: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6598: LD_INT 35
6600: PPUSH
6601: CALL_OW 67
// until not InBattle ( 1 ) ;
6605: LD_INT 1
6607: PPUSH
6608: CALL_OW 463
6612: NOT
6613: IFFALSE 6598
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6615: LD_EXP 11
6619: PPUSH
6620: CALL_OW 302
6624: PUSH
6625: LD_EXP 17
6629: PPUSH
6630: CALL_OW 302
6634: AND
6635: IFFALSE 6804
// begin DialogueOn ;
6637: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6641: LD_EXP 11
6645: PPUSH
6646: LD_STRING D3a-Sim-1
6648: PPUSH
6649: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6653: LD_EXP 17
6657: PPUSH
6658: LD_STRING D3a-Sci1-1
6660: PPUSH
6661: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6665: LD_EXP 11
6669: PPUSH
6670: LD_STRING D3a-Sim-2
6672: PPUSH
6673: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6677: LD_EXP 17
6681: PPUSH
6682: LD_STRING D3a-Sci1-2
6684: PPUSH
6685: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6689: LD_EXP 11
6693: PPUSH
6694: LD_STRING D3a-Sim-3
6696: PPUSH
6697: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6701: LD_EXP 17
6705: PPUSH
6706: LD_STRING D3a-Sci1-3
6708: PPUSH
6709: CALL_OW 88
// if IsOK ( Joan ) then
6713: LD_EXP 13
6717: PPUSH
6718: CALL_OW 302
6722: IFFALSE 6738
// Say ( Simms , D3a-Sim-4 ) else
6724: LD_EXP 11
6728: PPUSH
6729: LD_STRING D3a-Sim-4
6731: PPUSH
6732: CALL_OW 88
6736: GO 6750
// Say ( Simms , D3a-Sim-4a ) ;
6738: LD_EXP 11
6742: PPUSH
6743: LD_STRING D3a-Sim-4a
6745: PPUSH
6746: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6750: LD_EXP 17
6754: PPUSH
6755: LD_STRING D3a-Sci1-4
6757: PPUSH
6758: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6762: LD_EXP 11
6766: PPUSH
6767: LD_STRING D3a-Sim-5
6769: PPUSH
6770: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
6774: LD_EXP 17
6778: PPUSH
6779: LD_STRING D3a-Sci1-5
6781: PPUSH
6782: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6786: LD_EXP 11
6790: PPUSH
6791: LD_STRING D3a-Sim-6
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// end else
6802: GO 7048
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6804: LD_ADDR_VAR 0 3
6808: PUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 1
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 25
6821: PUSH
6822: LD_INT 4
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PUSH
6838: LD_EXP 11
6842: PUSH
6843: LD_EXP 14
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: DIFF
6852: ST_TO_ADDR
// if tmp3 > 0 then
6853: LD_VAR 0 3
6857: PUSH
6858: LD_INT 0
6860: GREATER
6861: IFFALSE 7048
// begin DialogueOn ;
6863: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6867: LD_EXP 11
6871: PPUSH
6872: LD_STRING D3a-Sim-1
6874: PPUSH
6875: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6879: LD_VAR 0 3
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_STRING D3a-Sci1-1
6890: PPUSH
6891: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6895: LD_EXP 11
6899: PPUSH
6900: LD_STRING D3a-Sim-2
6902: PPUSH
6903: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6907: LD_VAR 0 3
6911: PUSH
6912: LD_INT 1
6914: ARRAY
6915: PPUSH
6916: LD_STRING D3a-Sci1-2
6918: PPUSH
6919: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6923: LD_EXP 11
6927: PPUSH
6928: LD_STRING D3a-Sim-3
6930: PPUSH
6931: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6935: LD_VAR 0 3
6939: PUSH
6940: LD_INT 1
6942: ARRAY
6943: PPUSH
6944: LD_STRING D3a-Sci1-3
6946: PPUSH
6947: CALL_OW 88
// if IsOK ( Joan ) then
6951: LD_EXP 13
6955: PPUSH
6956: CALL_OW 302
6960: IFFALSE 6976
// Say ( Simms , D3a-Sim-4 ) else
6962: LD_EXP 11
6966: PPUSH
6967: LD_STRING D3a-Sim-4
6969: PPUSH
6970: CALL_OW 88
6974: GO 6988
// Say ( Simms , D3a-Sim-4a ) ;
6976: LD_EXP 11
6980: PPUSH
6981: LD_STRING D3a-Sim-4a
6983: PPUSH
6984: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6988: LD_VAR 0 3
6992: PUSH
6993: LD_INT 1
6995: ARRAY
6996: PPUSH
6997: LD_STRING D3a-Sci1-4
6999: PPUSH
7000: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7004: LD_EXP 11
7008: PPUSH
7009: LD_STRING D3a-Sim-5
7011: PPUSH
7012: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7016: LD_VAR 0 3
7020: PUSH
7021: LD_INT 1
7023: ARRAY
7024: PPUSH
7025: LD_STRING D3a-Sci1-5
7027: PPUSH
7028: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7032: LD_EXP 11
7036: PPUSH
7037: LD_STRING D3a-Sim-6
7039: PPUSH
7040: CALL_OW 88
// DialogueOff ;
7044: CALL_OW 7
// end ; end ; end ;
7048: PPOPN 3
7050: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
7051: LD_EXP 29
7055: PUSH
7056: LD_INT 1
7058: EQUAL
7059: IFFALSE 7387
7061: GO 7063
7063: DISABLE
7064: LD_INT 0
7066: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
7067: LD_EXP 18
7071: PPUSH
7072: LD_STRING D4-FSol1-1
7074: PPUSH
7075: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7079: LD_STRING M3
7081: PPUSH
7082: CALL_OW 337
// PrepareRussians ;
7086: CALL 3456 0 0
// spawnRussians := true ;
7090: LD_ADDR_EXP 58
7094: PUSH
7095: LD_INT 1
7097: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7098: LD_ADDR_VAR 0 1
7102: PUSH
7103: LD_INT 1
7105: PPUSH
7106: LD_INT 100
7108: PPUSH
7109: CALL_OW 12
7113: ST_TO_ADDR
// if difficulty = 1 then
7114: LD_OWVAR 67
7118: PUSH
7119: LD_INT 1
7121: EQUAL
7122: IFFALSE 7205
// begin if rnd > 0 and rnd < 51 then
7124: LD_VAR 0 1
7128: PUSH
7129: LD_INT 0
7131: GREATER
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: LD_INT 51
7140: LESS
7141: AND
7142: IFFALSE 7151
// BuildRussianBase ( 2 ) ;
7144: LD_INT 2
7146: PPUSH
7147: CALL 11578 0 1
// if rnd > 50 and rnd < 81 then
7151: LD_VAR 0 1
7155: PUSH
7156: LD_INT 50
7158: GREATER
7159: PUSH
7160: LD_VAR 0 1
7164: PUSH
7165: LD_INT 81
7167: LESS
7168: AND
7169: IFFALSE 7178
// BuildRussianBase ( 1 ) ;
7171: LD_INT 1
7173: PPUSH
7174: CALL 11578 0 1
// if rnd > 80 and rnd < 101 then
7178: LD_VAR 0 1
7182: PUSH
7183: LD_INT 80
7185: GREATER
7186: PUSH
7187: LD_VAR 0 1
7191: PUSH
7192: LD_INT 101
7194: LESS
7195: AND
7196: IFFALSE 7205
// BuildRussianBase ( 3 ) ;
7198: LD_INT 3
7200: PPUSH
7201: CALL 11578 0 1
// end ; if difficulty = 2 then
7205: LD_OWVAR 67
7209: PUSH
7210: LD_INT 2
7212: EQUAL
7213: IFFALSE 7296
// begin if rnd > 0 and rnd < 61 then
7215: LD_VAR 0 1
7219: PUSH
7220: LD_INT 0
7222: GREATER
7223: PUSH
7224: LD_VAR 0 1
7228: PUSH
7229: LD_INT 61
7231: LESS
7232: AND
7233: IFFALSE 7242
// BuildRussianBase ( 2 ) ;
7235: LD_INT 2
7237: PPUSH
7238: CALL 11578 0 1
// if rnd > 60 and rnd < 81 then
7242: LD_VAR 0 1
7246: PUSH
7247: LD_INT 60
7249: GREATER
7250: PUSH
7251: LD_VAR 0 1
7255: PUSH
7256: LD_INT 81
7258: LESS
7259: AND
7260: IFFALSE 7269
// BuildRussianBase ( 1 ) ;
7262: LD_INT 1
7264: PPUSH
7265: CALL 11578 0 1
// if rnd > 80 and rnd < 101 then
7269: LD_VAR 0 1
7273: PUSH
7274: LD_INT 80
7276: GREATER
7277: PUSH
7278: LD_VAR 0 1
7282: PUSH
7283: LD_INT 101
7285: LESS
7286: AND
7287: IFFALSE 7296
// BuildRussianBase ( 3 ) ;
7289: LD_INT 3
7291: PPUSH
7292: CALL 11578 0 1
// end ; if difficulty = 3 then
7296: LD_OWVAR 67
7300: PUSH
7301: LD_INT 3
7303: EQUAL
7304: IFFALSE 7387
// begin if rnd > 0 and rnd < 71 then
7306: LD_VAR 0 1
7310: PUSH
7311: LD_INT 0
7313: GREATER
7314: PUSH
7315: LD_VAR 0 1
7319: PUSH
7320: LD_INT 71
7322: LESS
7323: AND
7324: IFFALSE 7333
// BuildRussianBase ( 3 ) ;
7326: LD_INT 3
7328: PPUSH
7329: CALL 11578 0 1
// if rnd > 70 and rnd < 81 then
7333: LD_VAR 0 1
7337: PUSH
7338: LD_INT 70
7340: GREATER
7341: PUSH
7342: LD_VAR 0 1
7346: PUSH
7347: LD_INT 81
7349: LESS
7350: AND
7351: IFFALSE 7360
// BuildRussianBase ( 2 ) ;
7353: LD_INT 2
7355: PPUSH
7356: CALL 11578 0 1
// if rnd > 80 and rnd < 101 then
7360: LD_VAR 0 1
7364: PUSH
7365: LD_INT 80
7367: GREATER
7368: PUSH
7369: LD_VAR 0 1
7373: PUSH
7374: LD_INT 101
7376: LESS
7377: AND
7378: IFFALSE 7387
// BuildRussianBase ( 1 ) ;
7380: LD_INT 1
7382: PPUSH
7383: CALL 11578 0 1
// end ; end ;
7387: PPOPN 1
7389: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7390: LD_INT 54
7392: PPUSH
7393: LD_INT 1
7395: PPUSH
7396: CALL_OW 321
7400: PUSH
7401: LD_INT 2
7403: EQUAL
7404: PUSH
7405: LD_INT 21
7407: PPUSH
7408: LD_INT 1
7410: PPUSH
7411: CALL_OW 321
7415: PUSH
7416: LD_INT 2
7418: EQUAL
7419: OR
7420: PUSH
7421: LD_INT 22
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 321
7431: PUSH
7432: LD_INT 2
7434: EQUAL
7435: OR
7436: IFFALSE 7738
7438: GO 7440
7440: DISABLE
7441: LD_INT 0
7443: PPUSH
7444: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7445: LD_EXP 17
7449: PPUSH
7450: CALL_OW 302
7454: IFFALSE 7468
// tmp := DeltaDoctor else
7456: LD_ADDR_VAR 0 2
7460: PUSH
7461: LD_EXP 17
7465: ST_TO_ADDR
7466: GO 7478
// tmp := Denis ;
7468: LD_ADDR_VAR 0 2
7472: PUSH
7473: LD_EXP 12
7477: ST_TO_ADDR
// if tmp then
7478: LD_VAR 0 2
7482: IFFALSE 7576
// begin DialogueOn ;
7484: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7488: LD_EXP 1
7492: PPUSH
7493: LD_STRING D6-JMM-1
7495: PPUSH
7496: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7500: LD_VAR 0 2
7504: PPUSH
7505: LD_STRING D6-Sci1-1
7507: PPUSH
7508: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7512: LD_EXP 1
7516: PPUSH
7517: LD_STRING D6-JMM-2
7519: PPUSH
7520: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7524: LD_VAR 0 2
7528: PPUSH
7529: LD_STRING D6-Sci1-2
7531: PPUSH
7532: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7536: LD_EXP 1
7540: PPUSH
7541: LD_STRING D6-JMM-3
7543: PPUSH
7544: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7548: LD_VAR 0 2
7552: PPUSH
7553: LD_STRING D6-Sci1-3
7555: PPUSH
7556: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7560: LD_EXP 1
7564: PPUSH
7565: LD_STRING D6-JMM-4
7567: PPUSH
7568: CALL_OW 88
// DialogueOff ;
7572: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7576: LD_INT 1050
7578: PPUSH
7579: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7583: LD_EXP 49
7587: PUSH
7588: LD_INT 0
7590: EQUAL
7591: PUSH
7592: LD_EXP 14
7596: PPUSH
7597: CALL_OW 302
7601: AND
7602: IFFALSE 7660
// begin DialogueOn ;
7604: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7608: LD_EXP 27
7612: PPUSH
7613: LD_STRING D5-Ar1-1
7615: PPUSH
7616: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7620: LD_EXP 26
7624: PPUSH
7625: LD_STRING D5-Diet-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7632: LD_EXP 27
7636: PPUSH
7637: LD_STRING D5-Ar1-2
7639: PPUSH
7640: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7644: LD_EXP 26
7648: PPUSH
7649: LD_STRING D5-Diet-2
7651: PPUSH
7652: CALL_OW 88
// DialogueOff ;
7656: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7660: LD_INT 35
7662: PPUSH
7663: CALL_OW 67
// until tick > 10 10$00 ;
7667: LD_OWVAR 1
7671: PUSH
7672: LD_INT 21000
7674: GREATER
7675: IFFALSE 7660
// wait ( 1 1$30 ) ;
7677: LD_INT 3150
7679: PPUSH
7680: CALL_OW 67
// if arabianTrait = 0 then
7684: LD_EXP 49
7688: PUSH
7689: LD_INT 0
7691: EQUAL
7692: IFFALSE 7738
// begin arabianTrait = 1 ;
7694: LD_ADDR_EXP 49
7698: PUSH
7699: LD_INT 1
7701: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7702: LD_INT 2
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 1
7710: PPUSH
7711: LD_INT 1
7713: PPUSH
7714: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7718: LD_INT 2
7720: PPUSH
7721: LD_INT 6
7723: PPUSH
7724: LD_INT 1
7726: PPUSH
7727: LD_INT 1
7729: PPUSH
7730: CALL_OW 80
// PrepareArabianTrait ;
7734: CALL 7741 0 0
// end ; end ;
7738: PPOPN 2
7740: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
7741: LD_INT 0
7743: PPUSH
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
7749: PPUSH
7750: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
7751: LD_ADDR_VAR 0 6
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 2
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 2
7768: PUSH
7769: LD_INT 25
7771: PUSH
7772: LD_INT 4
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 25
7781: PUSH
7782: LD_INT 2
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 25
7791: PUSH
7792: LD_INT 3
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PPUSH
7809: CALL_OW 69
7813: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: LD_INT 22
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 21
7831: PUSH
7832: LD_INT 1
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 2
7841: PUSH
7842: LD_INT 25
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 8
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 25
7864: PUSH
7865: LD_INT 15
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: PPUSH
7883: CALL_OW 69
7887: PUSH
7888: LD_EXP 26
7892: PUSH
7893: EMPTY
7894: LIST
7895: DIFF
7896: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
7897: LD_ADDR_VAR 0 7
7901: PUSH
7902: LD_INT 22
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 30
7914: PUSH
7915: LD_INT 5
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 69
7930: PUSH
7931: LD_INT 1
7933: ARRAY
7934: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
7935: LD_VAR 0 6
7939: PPUSH
7940: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
7944: LD_VAR 0 5
7948: PPUSH
7949: CALL_OW 122
// wait ( 0 0$3 ) ;
7953: LD_INT 105
7955: PPUSH
7956: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
7960: LD_VAR 0 6
7964: PPUSH
7965: LD_VAR 0 7
7969: PPUSH
7970: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
7974: LD_VAR 0 6
7978: PPUSH
7979: LD_INT 1
7981: PUSH
7982: LD_INT 8
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 1
7991: PPUSH
7992: LD_INT 2
7994: PPUSH
7995: CALL_OW 12
7999: ARRAY
8000: PPUSH
8001: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8005: LD_VAR 0 6
8009: PPUSH
8010: CALL_OW 182
// wait ( 0 0$1 ) ;
8014: LD_INT 35
8016: PPUSH
8017: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8021: LD_INT 76
8023: PPUSH
8024: LD_INT 19
8026: PPUSH
8027: CALL_OW 84
// DialogueOn ;
8031: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8035: LD_INT 22
8037: PUSH
8038: LD_INT 1
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 26
8047: PUSH
8048: LD_INT 1
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 2
8057: PUSH
8058: LD_INT 25
8060: PUSH
8061: LD_INT 1
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 25
8070: PUSH
8071: LD_INT 2
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 25
8080: PUSH
8081: LD_INT 3
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 4
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 25
8100: PUSH
8101: LD_INT 5
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: PPUSH
8121: CALL_OW 69
8125: PPUSH
8126: LD_STRING D8-Sol1-1
8128: PPUSH
8129: LD_STRING D8-Sol1-1
8131: PPUSH
8132: CALL 10920 0 3
// if IsOK ( DeltaDoctor ) then
8136: LD_EXP 17
8140: PPUSH
8141: CALL_OW 302
8145: IFFALSE 8161
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8147: LD_EXP 17
8151: PPUSH
8152: LD_STRING D8-Sci1-1
8154: PPUSH
8155: CALL_OW 88
8159: GO 8262
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8161: LD_INT 22
8163: PUSH
8164: LD_INT 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 26
8173: PUSH
8174: LD_INT 1
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: LD_INT 25
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 25
8196: PUSH
8197: LD_INT 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 3
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 25
8216: PUSH
8217: LD_INT 4
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 25
8226: PUSH
8227: LD_INT 5
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: PPUSH
8247: CALL_OW 69
8251: PPUSH
8252: LD_STRING D8-Sol1-1
8254: PPUSH
8255: LD_STRING D8-Sol1-1
8257: PPUSH
8258: CALL 10920 0 3
// Say ( JMM , D8-JMM-1 ) ;
8262: LD_EXP 1
8266: PPUSH
8267: LD_STRING D8-JMM-1
8269: PPUSH
8270: CALL_OW 88
// DialogueOff ;
8274: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8278: LD_INT 2
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8288: LD_INT 1
8290: PPUSH
8291: LD_INT 2
8293: PPUSH
8294: LD_INT 2
8296: PPUSH
8297: LD_INT 1
8299: PPUSH
8300: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8304: LD_INT 3
8306: PPUSH
8307: LD_INT 2
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: LD_INT 1
8315: PPUSH
8316: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8320: LD_STRING M4
8322: PPUSH
8323: CALL_OW 337
// wait ( 0 0$1 ) ;
8327: LD_INT 35
8329: PPUSH
8330: CALL_OW 67
// if IsLive ( Khatam ) then
8334: LD_EXP 14
8338: PPUSH
8339: CALL_OW 300
8343: IFFALSE 8357
// DoNotAttack ( 2 , Khatam ) ;
8345: LD_INT 2
8347: PPUSH
8348: LD_EXP 14
8352: PPUSH
8353: CALL_OW 471
// wait ( 0 0$1 ) ;
8357: LD_INT 35
8359: PPUSH
8360: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8364: LD_ADDR_VAR 0 8
8368: PUSH
8369: LD_INT 22
8371: PUSH
8372: LD_INT 1
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 3
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PPUSH
8393: CALL_OW 69
8397: PPUSH
8398: LD_VAR 0 5
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PPUSH
8407: CALL_OW 74
8411: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8412: LD_VAR 0 5
8416: PPUSH
8417: LD_INT 25
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PPUSH
8427: CALL_OW 72
8431: PUSH
8432: LD_INT 1
8434: ARRAY
8435: PPUSH
8436: LD_VAR 0 8
8440: PPUSH
8441: CALL_OW 250
8445: PPUSH
8446: LD_VAR 0 8
8450: PPUSH
8451: CALL_OW 251
8455: PPUSH
8456: LD_VAR 0 8
8460: PPUSH
8461: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8465: LD_VAR 0 5
8469: PPUSH
8470: LD_INT 84
8472: PPUSH
8473: LD_INT 22
8475: PPUSH
8476: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8480: LD_VAR 0 5
8484: PPUSH
8485: LD_INT 82
8487: PPUSH
8488: LD_INT 5
8490: PPUSH
8491: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8495: LD_VAR 0 5
8499: PPUSH
8500: LD_INT 95
8502: PPUSH
8503: LD_INT 12
8505: PPUSH
8506: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8510: LD_VAR 0 5
8514: PPUSH
8515: LD_INT 102
8517: PPUSH
8518: LD_INT 11
8520: PPUSH
8521: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8525: LD_VAR 0 5
8529: PPUSH
8530: LD_INT 116
8532: PPUSH
8533: LD_INT 15
8535: PPUSH
8536: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8540: LD_VAR 0 5
8544: PPUSH
8545: LD_INT 140
8547: PPUSH
8548: LD_INT 25
8550: PPUSH
8551: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8555: LD_VAR 0 5
8559: PPUSH
8560: LD_INT 160
8562: PPUSH
8563: LD_INT 56
8565: PPUSH
8566: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8570: LD_ADDR_VAR 0 5
8574: PUSH
8575: LD_INT 22
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 2
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 25
8610: PUSH
8611: LD_INT 8
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 25
8620: PUSH
8621: LD_INT 15
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: PPUSH
8639: CALL_OW 69
8643: PUSH
8644: LD_EXP 26
8648: PUSH
8649: EMPTY
8650: LIST
8651: DIFF
8652: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8653: LD_ADDR_VAR 0 6
8657: PUSH
8658: LD_INT 22
8660: PUSH
8661: LD_INT 2
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 21
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 2
8680: PUSH
8681: LD_INT 25
8683: PUSH
8684: LD_INT 2
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: LD_INT 3
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 25
8703: PUSH
8704: LD_INT 4
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 25
8713: PUSH
8714: LD_INT 12
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 25
8723: PUSH
8724: LD_INT 16
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 69
8748: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
8749: LD_ADDR_VAR 0 6
8753: PUSH
8754: LD_VAR 0 6
8758: PUSH
8759: LD_EXP 26
8763: ADD
8764: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 189
8772: PPUSH
8773: LD_INT 79
8775: PPUSH
8776: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
8780: LD_VAR 0 5
8784: PPUSH
8785: LD_INT 25
8787: PUSH
8788: LD_INT 15
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PPUSH
8795: CALL_OW 72
8799: IFFALSE 8840
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
8801: LD_VAR 0 5
8805: PPUSH
8806: LD_INT 25
8808: PUSH
8809: LD_INT 15
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PPUSH
8816: CALL_OW 72
8820: PUSH
8821: LD_INT 1
8823: ARRAY
8824: PPUSH
8825: LD_INT 84
8827: PPUSH
8828: LD_INT 21
8830: PPUSH
8831: CALL_OW 428
8835: PPUSH
8836: CALL_OW 120
// wait ( 0 0$4 ) ;
8840: LD_INT 140
8842: PPUSH
8843: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
8847: LD_VAR 0 6
8851: PPUSH
8852: LD_INT 88
8854: PPUSH
8855: LD_INT 8
8857: PPUSH
8858: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
8862: LD_VAR 0 6
8866: PPUSH
8867: LD_INT 102
8869: PPUSH
8870: LD_INT 10
8872: PPUSH
8873: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
8877: LD_VAR 0 6
8881: PPUSH
8882: LD_INT 116
8884: PPUSH
8885: LD_INT 15
8887: PPUSH
8888: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
8892: LD_VAR 0 6
8896: PPUSH
8897: LD_INT 140
8899: PPUSH
8900: LD_INT 25
8902: PPUSH
8903: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
8907: LD_VAR 0 6
8911: PPUSH
8912: LD_INT 160
8914: PPUSH
8915: LD_INT 56
8917: PPUSH
8918: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
8922: LD_VAR 0 6
8926: PPUSH
8927: LD_INT 189
8929: PPUSH
8930: LD_INT 79
8932: PPUSH
8933: CALL_OW 171
// arabianAttackersAI = 1 ;
8937: LD_ADDR_EXP 46
8941: PUSH
8942: LD_INT 1
8944: ST_TO_ADDR
// if IsOk ( Gary ) then
8945: LD_EXP 10
8949: PPUSH
8950: CALL_OW 302
8954: IFFALSE 8968
// Say ( Gary , D8a-Gary-1 ) ;
8956: LD_EXP 10
8960: PPUSH
8961: LD_STRING D8a-Gary-1
8963: PPUSH
8964: CALL_OW 88
// wait ( 0 0$5 ) ;
8968: LD_INT 175
8970: PPUSH
8971: CALL_OW 67
// if IsOK ( Khatam ) then
8975: LD_EXP 14
8979: PPUSH
8980: CALL_OW 302
8984: IFFALSE 9520
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
8986: LD_ADDR_VAR 0 3
8990: PUSH
8991: LD_INT 22
8993: PUSH
8994: LD_INT 1
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 2
9003: PUSH
9004: LD_INT 25
9006: PUSH
9007: LD_INT 1
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 25
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 25
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 25
9036: PUSH
9037: LD_INT 4
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 25
9046: PUSH
9047: LD_INT 5
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 25
9056: PUSH
9057: LD_INT 8
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 69
9081: PUSH
9082: LD_EXP 1
9086: PUSH
9087: LD_EXP 2
9091: PUSH
9092: LD_EXP 3
9096: PUSH
9097: LD_EXP 4
9101: PUSH
9102: LD_EXP 5
9106: PUSH
9107: LD_EXP 6
9111: PUSH
9112: LD_EXP 7
9116: PUSH
9117: LD_EXP 8
9121: PUSH
9122: LD_EXP 9
9126: PUSH
9127: LD_EXP 10
9131: PUSH
9132: LD_EXP 11
9136: PUSH
9137: LD_EXP 12
9141: PUSH
9142: LD_EXP 13
9146: PUSH
9147: LD_EXP 14
9151: PUSH
9152: LD_EXP 15
9156: PUSH
9157: LD_EXP 16
9161: PUSH
9162: LD_EXP 17
9166: PUSH
9167: LD_EXP 19
9171: PUSH
9172: LD_EXP 24
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: DIFF
9198: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9199: LD_EXP 14
9203: PPUSH
9204: LD_INT 8
9206: PPUSH
9207: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9211: LD_EXP 14
9215: PPUSH
9216: CALL_OW 122
// wait ( 0 0$1 ) ;
9220: LD_INT 35
9222: PPUSH
9223: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9227: LD_EXP 14
9231: PPUSH
9232: CALL_OW 121
// wait ( 0 0$1 ) ;
9236: LD_INT 35
9238: PPUSH
9239: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9243: LD_EXP 14
9247: PPUSH
9248: LD_INT 7
9250: PPUSH
9251: CALL_OW 113
// if not tmp then
9255: LD_VAR 0 3
9259: NOT
9260: IFFALSE 9264
// exit ;
9262: GO 9520
// DialogueOn ;
9264: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9268: LD_VAR 0 3
9272: PUSH
9273: LD_INT 1
9275: ARRAY
9276: PPUSH
9277: CALL_OW 258
9281: PUSH
9282: LD_INT 1
9284: EQUAL
9285: IFFALSE 9305
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9287: LD_VAR 0 3
9291: PUSH
9292: LD_INT 1
9294: ARRAY
9295: PPUSH
9296: LD_STRING D8b-Sol1-1
9298: PPUSH
9299: CALL_OW 88
9303: GO 9321
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9305: LD_VAR 0 3
9309: PUSH
9310: LD_INT 1
9312: ARRAY
9313: PPUSH
9314: LD_STRING D8b-FSol1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9321: LD_EXP 14
9325: PPUSH
9326: LD_STRING D8b-Khat-1
9328: PPUSH
9329: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9333: LD_VAR 0 3
9337: PUSH
9338: LD_INT 1
9340: ARRAY
9341: PPUSH
9342: CALL_OW 258
9346: PUSH
9347: LD_INT 1
9349: EQUAL
9350: IFFALSE 9370
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: LD_STRING D8b-Sol1-2
9363: PPUSH
9364: CALL_OW 88
9368: GO 9386
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9370: LD_VAR 0 3
9374: PUSH
9375: LD_INT 1
9377: ARRAY
9378: PPUSH
9379: LD_STRING D8b-FSol1-2
9381: PPUSH
9382: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9386: LD_EXP 14
9390: PPUSH
9391: LD_STRING D8b-Khat-2
9393: PPUSH
9394: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9398: LD_VAR 0 3
9402: PUSH
9403: LD_INT 1
9405: ARRAY
9406: PPUSH
9407: CALL_OW 258
9411: PUSH
9412: LD_INT 1
9414: EQUAL
9415: IFFALSE 9435
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9417: LD_VAR 0 3
9421: PUSH
9422: LD_INT 1
9424: ARRAY
9425: PPUSH
9426: LD_STRING D8b-Sol1-3
9428: PPUSH
9429: CALL_OW 88
9433: GO 9451
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9435: LD_VAR 0 3
9439: PUSH
9440: LD_INT 1
9442: ARRAY
9443: PPUSH
9444: LD_STRING D8b-FSol1-3
9446: PPUSH
9447: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9451: LD_EXP 14
9455: PPUSH
9456: LD_STRING D8b-Khat-3
9458: PPUSH
9459: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9463: LD_VAR 0 3
9467: PUSH
9468: LD_INT 1
9470: ARRAY
9471: PPUSH
9472: CALL_OW 258
9476: PUSH
9477: LD_INT 1
9479: EQUAL
9480: IFFALSE 9500
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9482: LD_VAR 0 3
9486: PUSH
9487: LD_INT 1
9489: ARRAY
9490: PPUSH
9491: LD_STRING D8b-Sol1-4
9493: PPUSH
9494: CALL_OW 88
9498: GO 9516
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9500: LD_VAR 0 3
9504: PUSH
9505: LD_INT 1
9507: ARRAY
9508: PPUSH
9509: LD_STRING D8b-FSol1-4
9511: PPUSH
9512: CALL_OW 88
// DialogueOff ;
9516: CALL_OW 7
// end ; end ;
9520: LD_VAR 0 1
9524: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9525: LD_INT 7
9527: PPUSH
9528: LD_INT 22
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL_OW 70
9542: PUSH
9543: LD_INT 0
9545: GREATER
9546: PUSH
9547: LD_EXP 14
9551: PPUSH
9552: LD_INT 7
9554: PPUSH
9555: CALL_OW 308
9559: OR
9560: IFFALSE 9767
9562: GO 9564
9564: DISABLE
9565: LD_INT 0
9567: PPUSH
// begin enable ;
9568: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9569: LD_ADDR_VAR 0 1
9573: PUSH
9574: LD_INT 7
9576: PPUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PPUSH
9587: CALL_OW 70
9591: PUSH
9592: FOR_IN
9593: IFFALSE 9734
// begin if GetClass ( i ) = 4 then
9595: LD_VAR 0 1
9599: PPUSH
9600: CALL_OW 257
9604: PUSH
9605: LD_INT 4
9607: EQUAL
9608: IFFALSE 9620
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9610: LD_INT 1
9612: PPUSH
9613: LD_STRING 10_ScientistsEscape_1
9615: PPUSH
9616: CALL_OW 39
// if i = Dietrich then
9620: LD_VAR 0 1
9624: PUSH
9625: LD_EXP 26
9629: EQUAL
9630: IFFALSE 9640
// GensherStatus = 1 ;
9632: LD_ADDR_EXP 52
9636: PUSH
9637: LD_INT 1
9639: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9640: LD_VAR 0 1
9644: PPUSH
9645: CALL_OW 257
9649: PUSH
9650: LD_INT 1
9652: EQUAL
9653: PUSH
9654: LD_VAR 0 1
9658: PPUSH
9659: CALL_OW 257
9663: PUSH
9664: LD_INT 2
9666: EQUAL
9667: OR
9668: PUSH
9669: LD_VAR 0 1
9673: PPUSH
9674: CALL_OW 257
9678: PUSH
9679: LD_INT 3
9681: EQUAL
9682: OR
9683: PUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 257
9693: PUSH
9694: LD_INT 4
9696: EQUAL
9697: OR
9698: PUSH
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 257
9708: PUSH
9709: LD_INT 8
9711: EQUAL
9712: OR
9713: IFFALSE 9723
// arabianEscape = 1 ;
9715: LD_ADDR_EXP 47
9719: PUSH
9720: LD_INT 1
9722: ST_TO_ADDR
// RemoveUnit ( i ) ;
9723: LD_VAR 0 1
9727: PPUSH
9728: CALL_OW 64
// end ;
9732: GO 9592
9734: POP
9735: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9736: LD_EXP 14
9740: PPUSH
9741: LD_INT 7
9743: PPUSH
9744: CALL_OW 308
9748: IFFALSE 9767
// begin KhatamStatus = 1 ;
9750: LD_ADDR_EXP 53
9754: PUSH
9755: LD_INT 1
9757: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
9758: LD_EXP 14
9762: PPUSH
9763: CALL_OW 64
// end ; end ;
9767: PPOPN 1
9769: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
9770: LD_INT 22
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 21
9782: PUSH
9783: LD_INT 1
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 69
9798: PUSH
9799: LD_INT 0
9801: EQUAL
9802: PUSH
9803: LD_INT 22
9805: PUSH
9806: LD_INT 4
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 1
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PPUSH
9827: CALL_OW 69
9831: PUSH
9832: LD_INT 0
9834: EQUAL
9835: AND
9836: IFFALSE 9849
9838: GO 9840
9840: DISABLE
// arabianDefeated = 1 ;
9841: LD_ADDR_EXP 48
9845: PUSH
9846: LD_INT 1
9848: ST_TO_ADDR
9849: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
9850: LD_INT 54
9852: PPUSH
9853: LD_INT 1
9855: PPUSH
9856: CALL_OW 321
9860: PUSH
9861: LD_INT 2
9863: EQUAL
9864: PUSH
9865: LD_INT 55
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: CALL_OW 321
9875: PUSH
9876: LD_INT 2
9878: EQUAL
9879: AND
9880: PUSH
9881: LD_INT 21
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 321
9891: PUSH
9892: LD_INT 2
9894: EQUAL
9895: AND
9896: PUSH
9897: LD_INT 22
9899: PPUSH
9900: LD_INT 1
9902: PPUSH
9903: CALL_OW 321
9907: PUSH
9908: LD_INT 2
9910: EQUAL
9911: AND
9912: PUSH
9913: LD_INT 12
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 321
9923: PUSH
9924: LD_INT 2
9926: EQUAL
9927: AND
9928: PUSH
9929: LD_INT 32
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 321
9939: PUSH
9940: LD_INT 2
9942: EQUAL
9943: AND
9944: PUSH
9945: LD_EXP 63
9949: PUSH
9950: LD_INT 0
9952: EQUAL
9953: AND
9954: PUSH
9955: LD_EXP 49
9959: PUSH
9960: LD_INT 0
9962: EQUAL
9963: AND
9964: PUSH
9965: LD_OWVAR 1
9969: PUSH
9970: LD_INT 31500
9972: GREATEREQUAL
9973: AND
9974: IFFALSE 9991
9976: GO 9978
9978: DISABLE
// begin arabianTrait = 1 ;
9979: LD_ADDR_EXP 49
9983: PUSH
9984: LD_INT 1
9986: ST_TO_ADDR
// PrepareArabianTrait ;
9987: CALL 7741 0 0
// end ;
9991: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
9992: LD_EXP 29
9996: PUSH
9997: LD_STRING 02_mikhailStatus_1
9999: PPUSH
10000: LD_INT 0
10002: PPUSH
10003: CALL_OW 30
10007: PUSH
10008: LD_INT 1
10010: EQUAL
10011: AND
10012: PUSH
10013: LD_INT 22
10015: PUSH
10016: LD_INT 5
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 69
10027: PUSH
10028: LD_INT 0
10030: EQUAL
10031: AND
10032: PUSH
10033: LD_INT 22
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 21
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 69
10061: PUSH
10062: LD_INT 0
10064: EQUAL
10065: PUSH
10066: LD_EXP 49
10070: PUSH
10071: LD_INT 0
10073: EQUAL
10074: OR
10075: AND
10076: IFFALSE 10085
10078: GO 10080
10080: DISABLE
// PrepareCornell ;
10081: CALL 3289 0 0
10085: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10086: LD_INT 22
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 69
10100: PPUSH
10101: LD_EXP 19
10105: PPUSH
10106: CALL_OW 74
10110: PPUSH
10111: LD_EXP 19
10115: PPUSH
10116: CALL_OW 296
10120: PUSH
10121: LD_INT 9
10123: LESS
10124: IFFALSE 10345
10126: GO 10128
10128: DISABLE
// begin InGameOn ;
10129: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10133: LD_EXP 19
10137: PPUSH
10138: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10142: LD_EXP 19
10146: PPUSH
10147: LD_STRING D7-Corn-1
10149: PPUSH
10150: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10154: LD_INT 22
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 25
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PPUSH
10229: CALL_OW 69
10233: PPUSH
10234: LD_STRING D7-Sol1-1
10236: PPUSH
10237: LD_STRING D7-FSol1-1
10239: PPUSH
10240: CALL 10920 0 3
// CenterNowOnUnits ( Cornell ) ;
10244: LD_EXP 19
10248: PPUSH
10249: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10253: LD_EXP 19
10257: PPUSH
10258: LD_STRING D7-Corn-2
10260: PPUSH
10261: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10265: LD_EXP 1
10269: PPUSH
10270: LD_STRING D7-JMM-2
10272: PPUSH
10273: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10277: LD_EXP 19
10281: PPUSH
10282: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10286: LD_EXP 19
10290: PPUSH
10291: LD_STRING D7-Corn-3
10293: PPUSH
10294: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10298: LD_EXP 19
10302: PPUSH
10303: LD_INT 250
10305: PPUSH
10306: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10310: LD_EXP 19
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 235
// wait ( 0 0$1 ) ;
10322: LD_INT 35
10324: PPUSH
10325: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10329: LD_EXP 1
10333: PPUSH
10334: LD_STRING D7-JMM-3
10336: PPUSH
10337: CALL_OW 88
// InGameOff ;
10341: CALL_OW 9
// end ;
10345: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10346: LD_EXP 19
10350: PPUSH
10351: CALL_OW 255
10355: PUSH
10356: LD_INT 1
10358: EQUAL
10359: PUSH
10360: LD_EXP 19
10364: PPUSH
10365: CALL_OW 256
10369: PUSH
10370: LD_INT 350
10372: GREATER
10373: AND
10374: IFFALSE 10567
10376: GO 10378
10378: DISABLE
// begin DialogueOn ;
10379: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10383: LD_EXP 1
10387: PPUSH
10388: LD_STRING D7a-JMM-1
10390: PPUSH
10391: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10395: LD_EXP 19
10399: PPUSH
10400: LD_STRING D7a-Corn-1
10402: PPUSH
10403: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10407: LD_EXP 1
10411: PPUSH
10412: LD_STRING D7a-JMM-2
10414: PPUSH
10415: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10419: LD_EXP 19
10423: PPUSH
10424: LD_STRING D7a-Corn-2
10426: PPUSH
10427: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10431: LD_EXP 1
10435: PPUSH
10436: LD_STRING D7a-JMM-3
10438: PPUSH
10439: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10443: LD_EXP 19
10447: PPUSH
10448: LD_STRING D7a-Corn-3
10450: PPUSH
10451: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10455: LD_EXP 1
10459: PPUSH
10460: LD_STRING D7a-JMM-4
10462: PPUSH
10463: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10467: LD_EXP 19
10471: PPUSH
10472: LD_STRING D7a-Corn-4
10474: PPUSH
10475: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10479: LD_EXP 1
10483: PPUSH
10484: LD_STRING D7a-JMM-5
10486: PPUSH
10487: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10491: LD_EXP 19
10495: PPUSH
10496: LD_STRING D7a-Corn-5
10498: PPUSH
10499: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10503: LD_EXP 1
10507: PPUSH
10508: LD_STRING D7a-JMM-6
10510: PPUSH
10511: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10515: LD_EXP 19
10519: PPUSH
10520: LD_STRING D7a-Corn-6
10522: PPUSH
10523: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10527: LD_EXP 1
10531: PPUSH
10532: LD_STRING D7a-JMM-7
10534: PPUSH
10535: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10539: LD_EXP 19
10543: PPUSH
10544: LD_STRING D7a-Corn-7
10546: PPUSH
10547: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10551: LD_EXP 1
10555: PPUSH
10556: LD_STRING D7a-JMM-8
10558: PPUSH
10559: CALL_OW 88
// DialogueOff ;
10563: CALL_OW 7
// end ;
10567: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10568: LD_EXP 61
10572: PUSH
10573: LD_EXP 1
10577: PPUSH
10578: CALL_OW 302
10582: PUSH
10583: LD_EXP 5
10587: PPUSH
10588: CALL_OW 302
10592: OR
10593: AND
10594: IFFALSE 10684
10596: GO 10598
10598: DISABLE
// begin Wait ( 0 0$2 ) ;
10599: LD_INT 70
10601: PPUSH
10602: CALL_OW 67
// DialogueOn ;
10606: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10610: LD_EXP 61
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PPUSH
10619: LD_EXP 61
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PPUSH
10628: CALL_OW 86
// if IsOk ( Cyrus ) then
10632: LD_EXP 5
10636: PPUSH
10637: CALL_OW 302
10641: IFFALSE 10657
// Say ( Cyrus , D10-Cyrus-1 ) else
10643: LD_EXP 5
10647: PPUSH
10648: LD_STRING D10-Cyrus-1
10650: PPUSH
10651: CALL_OW 88
10655: GO 10680
// if IsOk ( JMM ) then
10657: LD_EXP 1
10661: PPUSH
10662: CALL_OW 302
10666: IFFALSE 10680
// Say ( JMM , D10-JMM-1 ) ;
10668: LD_EXP 1
10672: PPUSH
10673: LD_STRING D10-JMM-1
10675: PPUSH
10676: CALL_OW 88
// DialogueOff ;
10680: CALL_OW 7
// end ;
10684: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10685: LD_INT 12
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 321
10695: PUSH
10696: LD_INT 2
10698: EQUAL
10699: IFFALSE 10711
10701: GO 10703
10703: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10704: LD_STRING M2b
10706: PPUSH
10707: CALL_OW 337
10711: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10712: LD_INT 32
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 321
10722: PUSH
10723: LD_INT 2
10725: EQUAL
10726: IFFALSE 10738
10728: GO 10730
10730: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10731: LD_STRING M2c
10733: PPUSH
10734: CALL_OW 337
10738: END
// every 0 0$1 trigger arabianDefeated = 1 do
10739: LD_EXP 48
10743: PUSH
10744: LD_INT 1
10746: EQUAL
10747: IFFALSE 10759
10749: GO 10751
10751: DISABLE
// ChangeMissionObjectives ( M4a ) ;
10752: LD_STRING M4a
10754: PPUSH
10755: CALL_OW 337
10759: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
10760: LD_INT 54
10762: PPUSH
10763: LD_INT 1
10765: PPUSH
10766: CALL_OW 321
10770: PUSH
10771: LD_INT 2
10773: EQUAL
10774: PUSH
10775: LD_INT 55
10777: PPUSH
10778: LD_INT 1
10780: PPUSH
10781: CALL_OW 321
10785: PUSH
10786: LD_INT 2
10788: EQUAL
10789: AND
10790: PUSH
10791: LD_INT 21
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 321
10801: PUSH
10802: LD_INT 2
10804: EQUAL
10805: AND
10806: PUSH
10807: LD_INT 22
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 321
10817: PUSH
10818: LD_INT 2
10820: EQUAL
10821: AND
10822: IFFALSE 10834
10824: GO 10826
10826: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
10827: LD_STRING M2a
10829: PPUSH
10830: CALL_OW 337
10834: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
10835: LD_INT 0
10837: PPUSH
10838: PPUSH
// if exist_mode then
10839: LD_VAR 0 2
10843: IFFALSE 10862
// unit := CreateCharacter ( ident ) else
10845: LD_ADDR_VAR 0 4
10849: PUSH
10850: LD_VAR 0 1
10854: PPUSH
10855: CALL_OW 34
10859: ST_TO_ADDR
10860: GO 10877
// unit := NewCharacter ( ident ) ;
10862: LD_ADDR_VAR 0 4
10866: PUSH
10867: LD_VAR 0 1
10871: PPUSH
10872: CALL_OW 25
10876: ST_TO_ADDR
// result := unit ;
10877: LD_ADDR_VAR 0 3
10881: PUSH
10882: LD_VAR 0 4
10886: ST_TO_ADDR
// end ;
10887: LD_VAR 0 3
10891: RET
// export function Video ( mode ) ; begin
10892: LD_INT 0
10894: PPUSH
// ingame_video = mode ;
10895: LD_ADDR_OWVAR 52
10899: PUSH
10900: LD_VAR 0 1
10904: ST_TO_ADDR
// interface_hidden = mode ;
10905: LD_ADDR_OWVAR 54
10909: PUSH
10910: LD_VAR 0 1
10914: ST_TO_ADDR
// end ;
10915: LD_VAR 0 2
10919: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
10920: LD_INT 0
10922: PPUSH
10923: PPUSH
10924: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
10925: LD_ADDR_VAR 0 1
10929: PUSH
10930: LD_VAR 0 1
10934: PUSH
10935: LD_EXP 1
10939: PUSH
10940: LD_EXP 2
10944: PUSH
10945: LD_EXP 3
10949: PUSH
10950: LD_EXP 4
10954: PUSH
10955: LD_EXP 5
10959: PUSH
10960: LD_EXP 6
10964: PUSH
10965: LD_EXP 7
10969: PUSH
10970: LD_EXP 8
10974: PUSH
10975: LD_EXP 9
10979: PUSH
10980: LD_EXP 10
10984: PUSH
10985: LD_EXP 11
10989: PUSH
10990: LD_EXP 12
10994: PUSH
10995: LD_EXP 13
10999: PUSH
11000: LD_EXP 14
11004: PUSH
11005: LD_EXP 15
11009: PUSH
11010: LD_EXP 16
11014: PUSH
11015: LD_EXP 17
11019: PUSH
11020: LD_EXP 18
11024: PUSH
11025: LD_EXP 19
11029: PUSH
11030: LD_EXP 24
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: DIFF
11057: ST_TO_ADDR
// if not characters then
11058: LD_VAR 0 1
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11213
// rnd = rand ( 1 , characters ) ;
11067: LD_ADDR_VAR 0 6
11071: PUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 12
11084: ST_TO_ADDR
// for i = 1 to characters do
11085: LD_ADDR_VAR 0 5
11089: PUSH
11090: DOUBLE
11091: LD_INT 1
11093: DEC
11094: ST_TO_ADDR
11095: LD_VAR 0 1
11099: PUSH
11100: FOR_TO
11101: IFFALSE 11211
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11103: LD_VAR 0 5
11107: PUSH
11108: LD_VAR 0 6
11112: EQUAL
11113: PUSH
11114: LD_VAR 0 1
11118: PUSH
11119: LD_VAR 0 5
11123: ARRAY
11124: PPUSH
11125: CALL_OW 258
11129: PUSH
11130: LD_INT 1
11132: EQUAL
11133: AND
11134: IFFALSE 11156
// Say ( characters [ i ] , dialogMID ) ;
11136: LD_VAR 0 1
11140: PUSH
11141: LD_VAR 0 5
11145: ARRAY
11146: PPUSH
11147: LD_VAR 0 2
11151: PPUSH
11152: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11156: LD_VAR 0 5
11160: PUSH
11161: LD_VAR 0 6
11165: EQUAL
11166: PUSH
11167: LD_VAR 0 1
11171: PUSH
11172: LD_VAR 0 5
11176: ARRAY
11177: PPUSH
11178: CALL_OW 258
11182: PUSH
11183: LD_INT 2
11185: EQUAL
11186: AND
11187: IFFALSE 11209
// Say ( characters [ i ] , dialogFID ) ;
11189: LD_VAR 0 1
11193: PUSH
11194: LD_VAR 0 5
11198: ARRAY
11199: PPUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: CALL_OW 88
// end ;
11209: GO 11100
11211: POP
11212: POP
// end ;
11213: LD_VAR 0 4
11217: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11218: LD_INT 0
11220: PPUSH
11221: PPUSH
// for i in charactersList do
11222: LD_ADDR_VAR 0 4
11226: PUSH
11227: LD_VAR 0 1
11231: PUSH
11232: FOR_IN
11233: IFFALSE 11251
// SaveCharacters ( i , ident ) ;
11235: LD_VAR 0 4
11239: PPUSH
11240: LD_VAR 0 2
11244: PPUSH
11245: CALL_OW 38
11249: GO 11232
11251: POP
11252: POP
// end ;
11253: LD_VAR 0 3
11257: RET
// export function PrepareDifficulty ; begin
11258: LD_INT 0
11260: PPUSH
// if difficulty = 1 then
11261: LD_OWVAR 67
11265: PUSH
11266: LD_INT 1
11268: EQUAL
11269: IFFALSE 11313
// begin RuSolMinLevel = 3 ;
11271: LD_ADDR_EXP 36
11275: PUSH
11276: LD_INT 3
11278: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11279: LD_ADDR_EXP 37
11283: PUSH
11284: LD_INT 5
11286: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11287: LD_INT 51
11289: PPUSH
11290: LD_INT 6
11292: PPUSH
11293: LD_INT 2
11295: PPUSH
11296: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11300: LD_INT 51
11302: PPUSH
11303: LD_INT 5
11305: PPUSH
11306: LD_INT 2
11308: PPUSH
11309: CALL_OW 322
// end ; if difficulty = 2 then
11313: LD_OWVAR 67
11317: PUSH
11318: LD_INT 2
11320: EQUAL
11321: IFFALSE 11417
// begin RuSolMinLevel = 5 ;
11323: LD_ADDR_EXP 36
11327: PUSH
11328: LD_INT 5
11330: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11331: LD_ADDR_EXP 37
11335: PUSH
11336: LD_INT 7
11338: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11339: LD_INT 51
11341: PPUSH
11342: LD_INT 6
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11352: LD_INT 57
11354: PPUSH
11355: LD_INT 6
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11365: LD_INT 63
11367: PPUSH
11368: LD_INT 6
11370: PPUSH
11371: LD_INT 2
11373: PPUSH
11374: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11378: LD_INT 51
11380: PPUSH
11381: LD_INT 5
11383: PPUSH
11384: LD_INT 2
11386: PPUSH
11387: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11391: LD_INT 5
11393: PPUSH
11394: LD_INT 2
11396: PPUSH
11397: LD_INT 2
11399: PPUSH
11400: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11404: LD_INT 5
11406: PPUSH
11407: LD_INT 5
11409: PPUSH
11410: LD_INT 2
11412: PPUSH
11413: CALL_OW 322
// end ; if difficulty = 3 then
11417: LD_OWVAR 67
11421: PUSH
11422: LD_INT 3
11424: EQUAL
11425: IFFALSE 11573
// begin RuSolMinLevel = 6 ;
11427: LD_ADDR_EXP 36
11431: PUSH
11432: LD_INT 6
11434: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11435: LD_ADDR_EXP 37
11439: PUSH
11440: LD_INT 8
11442: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11443: LD_INT 51
11445: PPUSH
11446: LD_INT 6
11448: PPUSH
11449: LD_INT 2
11451: PPUSH
11452: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11456: LD_INT 57
11458: PPUSH
11459: LD_INT 6
11461: PPUSH
11462: LD_INT 2
11464: PPUSH
11465: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11469: LD_INT 52
11471: PPUSH
11472: LD_INT 6
11474: PPUSH
11475: LD_INT 2
11477: PPUSH
11478: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11482: LD_INT 58
11484: PPUSH
11485: LD_INT 6
11487: PPUSH
11488: LD_INT 2
11490: PPUSH
11491: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11495: LD_INT 63
11497: PPUSH
11498: LD_INT 6
11500: PPUSH
11501: LD_INT 2
11503: PPUSH
11504: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11508: LD_INT 64
11510: PPUSH
11511: LD_INT 6
11513: PPUSH
11514: LD_INT 2
11516: PPUSH
11517: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11521: LD_INT 51
11523: PPUSH
11524: LD_INT 5
11526: PPUSH
11527: LD_INT 2
11529: PPUSH
11530: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11534: LD_INT 52
11536: PPUSH
11537: LD_INT 5
11539: PPUSH
11540: LD_INT 2
11542: PPUSH
11543: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11547: LD_INT 66
11549: PPUSH
11550: LD_INT 2
11552: PPUSH
11553: LD_INT 2
11555: PPUSH
11556: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11560: LD_INT 66
11562: PPUSH
11563: LD_INT 5
11565: PPUSH
11566: LD_INT 2
11568: PPUSH
11569: CALL_OW 322
// end ; end ;
11573: LD_VAR 0 1
11577: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11578: LD_INT 0
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11586: LD_ADDR_VAR 0 7
11590: PUSH
11591: LD_INT 43
11593: PUSH
11594: LD_INT 68
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 43
11603: PUSH
11604: LD_INT 79
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 99
11613: PUSH
11614: LD_INT 114
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 103
11623: PUSH
11624: LD_INT 114
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 156
11633: PUSH
11634: LD_INT 92
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 152
11643: PUSH
11644: LD_INT 85
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: ST_TO_ADDR
// for i in sources do
11659: LD_ADDR_VAR 0 3
11663: PUSH
11664: LD_VAR 0 7
11668: PUSH
11669: FOR_IN
11670: IFFALSE 11699
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11672: LD_VAR 0 3
11676: PUSH
11677: LD_INT 1
11679: ARRAY
11680: PPUSH
11681: LD_VAR 0 3
11685: PUSH
11686: LD_INT 2
11688: ARRAY
11689: PPUSH
11690: LD_INT 3
11692: PPUSH
11693: CALL_OW 441
11697: GO 11669
11699: POP
11700: POP
// case position of 1 :
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 1
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11725
11714: POP
// area := westConv ; 2 :
11715: LD_ADDR_VAR 0 6
11719: PUSH
11720: LD_INT 20
11722: ST_TO_ADDR
11723: GO 11764
11725: LD_INT 2
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11733
11731: GO 11744
11733: POP
// area := midConv ; 3 :
11734: LD_ADDR_VAR 0 6
11738: PUSH
11739: LD_INT 21
11741: ST_TO_ADDR
11742: GO 11764
11744: LD_INT 3
11746: DOUBLE
11747: EQUAL
11748: IFTRUE 11752
11750: GO 11763
11752: POP
// area := eastConv ; end ;
11753: LD_ADDR_VAR 0 6
11757: PUSH
11758: LD_INT 22
11760: ST_TO_ADDR
11761: GO 11764
11763: POP
// area := AreaToList ( area , 0 ) ;
11764: LD_ADDR_VAR 0 6
11768: PUSH
11769: LD_VAR 0 6
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL_OW 517
11781: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11782: LD_ADDR_VAR 0 3
11786: PUSH
11787: DOUBLE
11788: LD_INT 1
11790: DEC
11791: ST_TO_ADDR
11792: LD_VAR 0 6
11796: PUSH
11797: LD_INT 1
11799: ARRAY
11800: PUSH
11801: FOR_TO
11802: IFFALSE 11883
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11804: LD_VAR 0 6
11808: PUSH
11809: LD_INT 1
11811: ARRAY
11812: PUSH
11813: LD_VAR 0 3
11817: ARRAY
11818: PPUSH
11819: LD_VAR 0 6
11823: PUSH
11824: LD_INT 2
11826: ARRAY
11827: PUSH
11828: LD_VAR 0 3
11832: ARRAY
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: LD_INT 1
11839: PPUSH
11840: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
11844: LD_VAR 0 6
11848: PUSH
11849: LD_INT 1
11851: ARRAY
11852: PUSH
11853: LD_VAR 0 3
11857: ARRAY
11858: PPUSH
11859: LD_VAR 0 6
11863: PUSH
11864: LD_INT 2
11866: ARRAY
11867: PUSH
11868: LD_VAR 0 3
11872: ARRAY
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL_OW 331
// end ;
11881: GO 11801
11883: POP
11884: POP
// ruPossition = position ;
11885: LD_ADDR_EXP 41
11889: PUSH
11890: LD_VAR 0 1
11894: ST_TO_ADDR
// if position = 1 then
11895: LD_VAR 0 1
11899: PUSH
11900: LD_INT 1
11902: EQUAL
11903: IFFALSE 12651
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11905: LD_ADDR_VAR 0 4
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: LD_INT 3
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 25
11922: PUSH
11923: LD_INT 2
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 69
11938: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
11939: LD_ADDR_VAR 0 5
11943: PUSH
11944: LD_INT 0
11946: PUSH
11947: LD_INT 49
11949: PUSH
11950: LD_INT 74
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: LD_INT 73
11967: PUSH
11968: LD_INT 88
11970: PUSH
11971: LD_INT 5
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 4
11982: PUSH
11983: LD_INT 56
11985: PUSH
11986: LD_INT 62
11988: PUSH
11989: LD_INT 3
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 29
12000: PUSH
12001: LD_INT 43
12003: PUSH
12004: LD_INT 68
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 30
12018: PUSH
12019: LD_INT 43
12021: PUSH
12022: LD_INT 79
12024: PUSH
12025: LD_INT 5
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 28
12036: PUSH
12037: LD_INT 60
12039: PUSH
12040: LD_INT 75
12042: PUSH
12043: LD_INT 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: LD_INT 50
12057: PUSH
12058: LD_INT 87
12060: PUSH
12061: LD_INT 1
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 28
12072: PUSH
12073: LD_INT 45
12075: PUSH
12076: LD_INT 67
12078: PUSH
12079: LD_INT 2
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 17
12090: PUSH
12091: LD_INT 47
12093: PUSH
12094: LD_INT 84
12096: PUSH
12097: LD_INT 2
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 18
12108: PUSH
12109: LD_INT 46
12111: PUSH
12112: LD_INT 87
12114: PUSH
12115: LD_INT 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 28
12126: PUSH
12127: LD_INT 41
12129: PUSH
12130: LD_INT 64
12132: PUSH
12133: LD_INT 5
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 32
12144: PUSH
12145: LD_INT 75
12147: PUSH
12148: LD_INT 76
12150: PUSH
12151: LD_INT 5
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 32
12162: PUSH
12163: LD_INT 77
12165: PUSH
12166: LD_INT 75
12168: PUSH
12169: LD_INT 5
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 32
12180: PUSH
12181: LD_INT 69
12183: PUSH
12184: LD_INT 68
12186: PUSH
12187: LD_INT 3
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 32
12198: PUSH
12199: LD_INT 59
12201: PUSH
12202: LD_INT 96
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 32
12216: PUSH
12217: LD_INT 56
12219: PUSH
12220: LD_INT 96
12222: PUSH
12223: LD_INT 0
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 32
12234: PUSH
12235: LD_INT 51
12237: PUSH
12238: LD_INT 61
12240: PUSH
12241: LD_INT 3
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 32
12252: PUSH
12253: LD_INT 42
12255: PUSH
12256: LD_INT 60
12258: PUSH
12259: LD_INT 3
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 32
12270: PUSH
12271: LD_INT 36
12273: PUSH
12274: LD_INT 58
12276: PUSH
12277: LD_INT 3
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 32
12288: PUSH
12289: LD_INT 39
12291: PUSH
12292: LD_INT 59
12294: PUSH
12295: LD_INT 3
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 32
12306: PUSH
12307: LD_INT 61
12309: PUSH
12310: LD_INT 64
12312: PUSH
12313: LD_INT 3
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 33
12324: PUSH
12325: LD_INT 63
12327: PUSH
12328: LD_INT 90
12330: PUSH
12331: LD_INT 5
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 33
12342: PUSH
12343: LD_INT 64
12345: PUSH
12346: LD_INT 88
12348: PUSH
12349: LD_INT 5
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 33
12360: PUSH
12361: LD_INT 72
12363: PUSH
12364: LD_INT 82
12366: PUSH
12367: LD_INT 5
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 6
12378: PUSH
12379: LD_INT 42
12381: PUSH
12382: LD_INT 74
12384: PUSH
12385: LD_INT 1
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 6
12396: PUSH
12397: LD_INT 56
12399: PUSH
12400: LD_INT 77
12402: PUSH
12403: LD_INT 2
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 54
12417: PUSH
12418: LD_INT 91
12420: PUSH
12421: LD_INT 5
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 16
12432: PUSH
12433: LD_INT 50
12435: PUSH
12436: LD_INT 83
12438: PUSH
12439: LD_INT 3
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 24
12450: PUSH
12451: LD_INT 50
12453: PUSH
12454: LD_INT 90
12456: PUSH
12457: LD_INT 0
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12497: LD_ADDR_VAR 0 3
12501: PUSH
12502: LD_INT 22
12504: PUSH
12505: LD_INT 3
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: LD_INT 25
12517: PUSH
12518: LD_INT 2
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PPUSH
12533: CALL_OW 69
12537: PUSH
12538: FOR_IN
12539: IFFALSE 12558
// AddComAgressiveMove ( i , 53 , 82 ) ;
12541: LD_VAR 0 3
12545: PPUSH
12546: LD_INT 53
12548: PPUSH
12549: LD_INT 82
12551: PPUSH
12552: CALL_OW 174
12556: GO 12538
12558: POP
12559: POP
// for i := 1 to buildingsTab do
12560: LD_ADDR_VAR 0 3
12564: PUSH
12565: DOUBLE
12566: LD_INT 1
12568: DEC
12569: ST_TO_ADDR
12570: LD_VAR 0 5
12574: PUSH
12575: FOR_TO
12576: IFFALSE 12649
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12578: LD_VAR 0 4
12582: PPUSH
12583: LD_VAR 0 5
12587: PUSH
12588: LD_VAR 0 3
12592: ARRAY
12593: PUSH
12594: LD_INT 1
12596: ARRAY
12597: PPUSH
12598: LD_VAR 0 5
12602: PUSH
12603: LD_VAR 0 3
12607: ARRAY
12608: PUSH
12609: LD_INT 2
12611: ARRAY
12612: PPUSH
12613: LD_VAR 0 5
12617: PUSH
12618: LD_VAR 0 3
12622: ARRAY
12623: PUSH
12624: LD_INT 3
12626: ARRAY
12627: PPUSH
12628: LD_VAR 0 5
12632: PUSH
12633: LD_VAR 0 3
12637: ARRAY
12638: PUSH
12639: LD_INT 4
12641: ARRAY
12642: PPUSH
12643: CALL_OW 205
12647: GO 12575
12649: POP
12650: POP
// end ; if position = 2 then
12651: LD_VAR 0 1
12655: PUSH
12656: LD_INT 2
12658: EQUAL
12659: IFFALSE 13274
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 3
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 25
12678: PUSH
12679: LD_INT 2
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12695: LD_ADDR_VAR 0 5
12699: PUSH
12700: LD_INT 0
12702: PUSH
12703: LD_INT 104
12705: PUSH
12706: LD_INT 110
12708: PUSH
12709: LD_INT 5
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 4
12720: PUSH
12721: LD_INT 98
12723: PUSH
12724: LD_INT 90
12726: PUSH
12727: LD_INT 3
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 29
12738: PUSH
12739: LD_INT 103
12741: PUSH
12742: LD_INT 114
12744: PUSH
12745: LD_INT 2
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 30
12756: PUSH
12757: LD_INT 99
12759: PUSH
12760: LD_INT 114
12762: PUSH
12763: LD_INT 3
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 28
12774: PUSH
12775: LD_INT 100
12777: PUSH
12778: LD_INT 112
12780: PUSH
12781: LD_INT 1
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 2
12792: PUSH
12793: LD_INT 92
12795: PUSH
12796: LD_INT 101
12798: PUSH
12799: LD_INT 0
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 28
12810: PUSH
12811: LD_INT 97
12813: PUSH
12814: LD_INT 116
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 17
12828: PUSH
12829: LD_INT 96
12831: PUSH
12832: LD_INT 101
12834: PUSH
12835: LD_INT 4
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 18
12846: PUSH
12847: LD_INT 88
12849: PUSH
12850: LD_INT 97
12852: PUSH
12853: LD_INT 2
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 28
12864: PUSH
12865: LD_INT 106
12867: PUSH
12868: LD_INT 92
12870: PUSH
12871: LD_INT 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 32
12882: PUSH
12883: LD_INT 88
12885: PUSH
12886: LD_INT 89
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 32
12900: PUSH
12901: LD_INT 86
12903: PUSH
12904: LD_INT 90
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 32
12918: PUSH
12919: LD_INT 85
12921: PUSH
12922: LD_INT 99
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 32
12936: PUSH
12937: LD_INT 85
12939: PUSH
12940: LD_INT 107
12942: PUSH
12943: LD_INT 1
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 33
12954: PUSH
12955: LD_INT 105
12957: PUSH
12958: LD_INT 99
12960: PUSH
12961: LD_INT 1
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 33
12972: PUSH
12973: LD_INT 102
12975: PUSH
12976: LD_INT 92
12978: PUSH
12979: LD_INT 3
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 33
12990: PUSH
12991: LD_INT 105
12993: PUSH
12994: LD_INT 92
12996: PUSH
12997: LD_INT 2
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 6
13008: PUSH
13009: LD_INT 92
13011: PUSH
13012: LD_INT 110
13014: PUSH
13015: LD_INT 0
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 6
13026: PUSH
13027: LD_INT 103
13029: PUSH
13030: LD_INT 103
13032: PUSH
13033: LD_INT 5
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 89
13047: PUSH
13048: LD_INT 101
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 16
13062: PUSH
13063: LD_INT 95
13065: PUSH
13066: LD_INT 104
13068: PUSH
13069: LD_INT 4
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 24
13080: PUSH
13081: LD_INT 92
13083: PUSH
13084: LD_INT 105
13086: PUSH
13087: LD_INT 0
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13120: LD_ADDR_VAR 0 3
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 3
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 3
13137: PUSH
13138: LD_INT 25
13140: PUSH
13141: LD_INT 2
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PPUSH
13156: CALL_OW 69
13160: PUSH
13161: FOR_IN
13162: IFFALSE 13181
// AddComAgressiveMove ( i , 96 , 99 ) ;
13164: LD_VAR 0 3
13168: PPUSH
13169: LD_INT 96
13171: PPUSH
13172: LD_INT 99
13174: PPUSH
13175: CALL_OW 174
13179: GO 13161
13181: POP
13182: POP
// for i := 1 to buildingsTab do
13183: LD_ADDR_VAR 0 3
13187: PUSH
13188: DOUBLE
13189: LD_INT 1
13191: DEC
13192: ST_TO_ADDR
13193: LD_VAR 0 5
13197: PUSH
13198: FOR_TO
13199: IFFALSE 13272
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13201: LD_VAR 0 4
13205: PPUSH
13206: LD_VAR 0 5
13210: PUSH
13211: LD_VAR 0 3
13215: ARRAY
13216: PUSH
13217: LD_INT 1
13219: ARRAY
13220: PPUSH
13221: LD_VAR 0 5
13225: PUSH
13226: LD_VAR 0 3
13230: ARRAY
13231: PUSH
13232: LD_INT 2
13234: ARRAY
13235: PPUSH
13236: LD_VAR 0 5
13240: PUSH
13241: LD_VAR 0 3
13245: ARRAY
13246: PUSH
13247: LD_INT 3
13249: ARRAY
13250: PPUSH
13251: LD_VAR 0 5
13255: PUSH
13256: LD_VAR 0 3
13260: ARRAY
13261: PUSH
13262: LD_INT 4
13264: ARRAY
13265: PPUSH
13266: CALL_OW 205
13270: GO 13198
13272: POP
13273: POP
// end ; if position = 3 then
13274: LD_VAR 0 1
13278: PUSH
13279: LD_INT 3
13281: EQUAL
13282: IFFALSE 14068
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13284: LD_ADDR_VAR 0 4
13288: PUSH
13289: LD_INT 22
13291: PUSH
13292: LD_INT 3
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: LD_INT 25
13301: PUSH
13302: LD_INT 2
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PPUSH
13313: CALL_OW 69
13317: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13318: LD_ADDR_VAR 0 5
13322: PUSH
13323: LD_INT 0
13325: PUSH
13326: LD_INT 151
13328: PUSH
13329: LD_INT 71
13331: PUSH
13332: LD_INT 4
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 4
13343: PUSH
13344: LD_INT 145
13346: PUSH
13347: LD_INT 53
13349: PUSH
13350: LD_INT 3
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 4
13361: PUSH
13362: LD_INT 172
13364: PUSH
13365: LD_INT 102
13367: PUSH
13368: LD_INT 5
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 29
13379: PUSH
13380: LD_INT 152
13382: PUSH
13383: LD_INT 85
13385: PUSH
13386: LD_INT 3
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 156
13400: PUSH
13401: LD_INT 92
13403: PUSH
13404: LD_INT 3
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 28
13415: PUSH
13416: LD_INT 151
13418: PUSH
13419: LD_INT 66
13421: PUSH
13422: LD_INT 4
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 2
13433: PUSH
13434: LD_INT 163
13436: PUSH
13437: LD_INT 95
13439: PUSH
13440: LD_INT 5
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 28
13451: PUSH
13452: LD_INT 149
13454: PUSH
13455: LD_INT 63
13457: PUSH
13458: LD_INT 4
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 17
13469: PUSH
13470: LD_INT 167
13472: PUSH
13473: LD_INT 99
13475: PUSH
13476: LD_INT 5
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 18
13487: PUSH
13488: LD_INT 163
13490: PUSH
13491: LD_INT 98
13493: PUSH
13494: LD_INT 0
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 28
13505: PUSH
13506: LD_INT 154
13508: PUSH
13509: LD_INT 70
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 32
13523: PUSH
13524: LD_INT 155
13526: PUSH
13527: LD_INT 62
13529: PUSH
13530: LD_INT 4
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 32
13541: PUSH
13542: LD_INT 161
13544: PUSH
13545: LD_INT 69
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 32
13559: PUSH
13560: LD_INT 168
13562: PUSH
13563: LD_INT 78
13565: PUSH
13566: LD_INT 4
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 32
13577: PUSH
13578: LD_INT 163
13580: PUSH
13581: LD_INT 80
13583: PUSH
13584: LD_INT 5
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 32
13595: PUSH
13596: LD_INT 136
13598: PUSH
13599: LD_INT 73
13601: PUSH
13602: LD_INT 0
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 32
13613: PUSH
13614: LD_INT 157
13616: PUSH
13617: LD_INT 98
13619: PUSH
13620: LD_INT 0
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 32
13631: PUSH
13632: LD_INT 150
13634: PUSH
13635: LD_INT 87
13637: PUSH
13638: LD_INT 1
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 33
13649: PUSH
13650: LD_INT 171
13652: PUSH
13653: LD_INT 97
13655: PUSH
13656: LD_INT 4
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 33
13667: PUSH
13668: LD_INT 168
13670: PUSH
13671: LD_INT 92
13673: PUSH
13674: LD_INT 4
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 33
13685: PUSH
13686: LD_INT 166
13688: PUSH
13689: LD_INT 80
13691: PUSH
13692: LD_INT 5
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 33
13703: PUSH
13704: LD_INT 141
13706: PUSH
13707: LD_INT 54
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 33
13721: PUSH
13722: LD_INT 133
13724: PUSH
13725: LD_INT 57
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 33
13739: PUSH
13740: LD_INT 132
13742: PUSH
13743: LD_INT 61
13745: PUSH
13746: LD_INT 2
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 33
13757: PUSH
13758: LD_INT 150
13760: PUSH
13761: LD_INT 82
13763: PUSH
13764: LD_INT 0
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 33
13775: PUSH
13776: LD_INT 132
13778: PUSH
13779: LD_INT 72
13781: PUSH
13782: LD_INT 0
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 6
13793: PUSH
13794: LD_INT 146
13796: PUSH
13797: LD_INT 64
13799: PUSH
13800: LD_INT 4
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 6
13811: PUSH
13812: LD_INT 159
13814: PUSH
13815: LD_INT 85
13817: PUSH
13818: LD_INT 4
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 21
13829: PUSH
13830: LD_INT 163
13832: PUSH
13833: LD_INT 91
13835: PUSH
13836: LD_INT 3
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 16
13847: PUSH
13848: LD_INT 166
13850: PUSH
13851: LD_INT 95
13853: PUSH
13854: LD_INT 4
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 24
13865: PUSH
13866: LD_INT 159
13868: PUSH
13869: LD_INT 95
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13914: LD_ADDR_VAR 0 3
13918: PUSH
13919: LD_INT 22
13921: PUSH
13922: LD_INT 3
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 3
13931: PUSH
13932: LD_INT 25
13934: PUSH
13935: LD_INT 2
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 69
13954: PUSH
13955: FOR_IN
13956: IFFALSE 13975
// AddComAgressiveMove ( i , 141 , 65 ) ;
13958: LD_VAR 0 3
13962: PPUSH
13963: LD_INT 141
13965: PPUSH
13966: LD_INT 65
13968: PPUSH
13969: CALL_OW 174
13973: GO 13955
13975: POP
13976: POP
// for i := 1 to buildingsTab do
13977: LD_ADDR_VAR 0 3
13981: PUSH
13982: DOUBLE
13983: LD_INT 1
13985: DEC
13986: ST_TO_ADDR
13987: LD_VAR 0 5
13991: PUSH
13992: FOR_TO
13993: IFFALSE 14066
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13995: LD_VAR 0 4
13999: PPUSH
14000: LD_VAR 0 5
14004: PUSH
14005: LD_VAR 0 3
14009: ARRAY
14010: PUSH
14011: LD_INT 1
14013: ARRAY
14014: PPUSH
14015: LD_VAR 0 5
14019: PUSH
14020: LD_VAR 0 3
14024: ARRAY
14025: PUSH
14026: LD_INT 2
14028: ARRAY
14029: PPUSH
14030: LD_VAR 0 5
14034: PUSH
14035: LD_VAR 0 3
14039: ARRAY
14040: PUSH
14041: LD_INT 3
14043: ARRAY
14044: PPUSH
14045: LD_VAR 0 5
14049: PUSH
14050: LD_VAR 0 3
14054: ARRAY
14055: PUSH
14056: LD_INT 4
14058: ARRAY
14059: PPUSH
14060: CALL_OW 205
14064: GO 13992
14066: POP
14067: POP
// end ; end ;
14068: LD_VAR 0 2
14072: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14073: LD_INT 0
14075: PPUSH
14076: PPUSH
14077: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14078: LD_ADDR_EXP 68
14082: PUSH
14083: LD_INT 0
14085: PUSH
14086: LD_INT 71
14088: PUSH
14089: LD_INT 15
14091: PUSH
14092: LD_INT 3
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 6
14103: PUSH
14104: LD_INT 77
14106: PUSH
14107: LD_INT 18
14109: PUSH
14110: LD_INT 3
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 4
14121: PUSH
14122: LD_INT 77
14124: PUSH
14125: LD_INT 26
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 31
14139: PUSH
14140: LD_INT 72
14142: PUSH
14143: LD_INT 24
14145: PUSH
14146: LD_INT 0
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 31
14157: PUSH
14158: LD_INT 82
14160: PUSH
14161: LD_INT 28
14163: PUSH
14164: LD_INT 0
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 31
14175: PUSH
14176: LD_INT 84
14178: PUSH
14179: LD_INT 21
14181: PUSH
14182: LD_INT 3
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: LD_INT 31
14193: PUSH
14194: LD_INT 66
14196: PUSH
14197: LD_INT 14
14199: PUSH
14200: LD_INT 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 27
14211: PUSH
14212: LD_INT 67
14214: PUSH
14215: LD_INT 18
14217: PUSH
14218: LD_INT 5
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 27
14229: PUSH
14230: LD_INT 69
14232: PUSH
14233: LD_INT 23
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14256: LD_ADDR_VAR 0 3
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_INT 2
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 25
14273: PUSH
14274: LD_INT 2
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14290: LD_VAR 0 3
14294: PPUSH
14295: LD_EXP 68
14299: PUSH
14300: LD_INT 1
14302: ARRAY
14303: PUSH
14304: LD_INT 1
14306: ARRAY
14307: PPUSH
14308: LD_EXP 68
14312: PUSH
14313: LD_INT 1
14315: ARRAY
14316: PUSH
14317: LD_INT 2
14319: ARRAY
14320: PPUSH
14321: LD_EXP 68
14325: PUSH
14326: LD_INT 1
14328: ARRAY
14329: PUSH
14330: LD_INT 3
14332: ARRAY
14333: PPUSH
14334: LD_EXP 68
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: PUSH
14343: LD_INT 4
14345: ARRAY
14346: PPUSH
14347: CALL_OW 205
// end ;
14351: LD_VAR 0 1
14355: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14356: LD_INT 0
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14364: LD_ADDR_VAR 0 7
14368: PUSH
14369: LD_INT 22
14371: PUSH
14372: LD_VAR 0 1
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 25
14383: PUSH
14384: LD_INT 9
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 69
14399: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14400: LD_ADDR_VAR 0 8
14404: PUSH
14405: LD_INT 22
14407: PUSH
14408: LD_VAR 0 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 3
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 3
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PPUSH
14438: CALL_OW 69
14442: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14443: LD_ADDR_VAR 0 5
14447: PUSH
14448: LD_INT 1
14450: PPUSH
14451: LD_INT 3
14453: PPUSH
14454: CALL_OW 12
14458: ST_TO_ADDR
// for i = 1 to list do
14459: LD_ADDR_VAR 0 6
14463: PUSH
14464: DOUBLE
14465: LD_INT 1
14467: DEC
14468: ST_TO_ADDR
14469: LD_VAR 0 7
14473: PUSH
14474: FOR_TO
14475: IFFALSE 15465
// for ta in filter do
14477: LD_ADDR_VAR 0 4
14481: PUSH
14482: LD_VAR 0 8
14486: PUSH
14487: FOR_IN
14488: IFFALSE 15461
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14490: LD_VAR 0 7
14494: PUSH
14495: LD_VAR 0 6
14499: ARRAY
14500: PPUSH
14501: LD_VAR 0 4
14505: PPUSH
14506: CALL_OW 296
14510: PUSH
14511: LD_INT 15
14513: LESSEQUAL
14514: IFFALSE 15459
// begin case c of 1 :
14516: LD_VAR 0 5
14520: PUSH
14521: LD_INT 1
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14961
14529: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14530: LD_VAR 0 7
14534: PUSH
14535: LD_VAR 0 6
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 4
14545: PPUSH
14546: CALL_OW 250
14550: PPUSH
14551: LD_VAR 0 4
14555: PPUSH
14556: CALL_OW 251
14560: PPUSH
14561: CALL_OW 154
// if eventVar2 = 0 then
14565: LD_EXP 66
14569: PUSH
14570: LD_INT 0
14572: EQUAL
14573: IFFALSE 14959
// begin eventVar2 = 1 ;
14575: LD_ADDR_EXP 66
14579: PUSH
14580: LD_INT 1
14582: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14583: LD_INT 245
14585: PPUSH
14586: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14590: LD_VAR 0 4
14594: PPUSH
14595: CALL_OW 250
14599: PPUSH
14600: LD_VAR 0 4
14604: PPUSH
14605: CALL_OW 251
14609: PPUSH
14610: CALL_OW 84
// DialogueOn ;
14614: CALL_OW 6
// if IsOK ( Cyrus ) then
14618: LD_EXP 5
14622: PPUSH
14623: CALL_OW 302
14627: IFFALSE 14643
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14629: LD_EXP 5
14633: PPUSH
14634: LD_STRING D9a-Cyrus-1
14636: PPUSH
14637: CALL_OW 88
// end else
14641: GO 14765
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14643: LD_INT 22
14645: PUSH
14646: LD_INT 1
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 26
14655: PUSH
14656: LD_INT 1
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 2
14665: PUSH
14666: LD_INT 25
14668: PUSH
14669: LD_INT 1
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 25
14678: PUSH
14679: LD_INT 2
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 25
14688: PUSH
14689: LD_INT 3
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 25
14698: PUSH
14699: LD_INT 4
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 25
14708: PUSH
14709: LD_INT 5
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: PUSH
14734: LD_EXP 1
14738: PUSH
14739: LD_EXP 14
14743: PUSH
14744: LD_EXP 5
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: DIFF
14754: PPUSH
14755: LD_STRING D9a-Sol1-1
14757: PPUSH
14758: LD_STRING D9a-Sol1-1
14760: PPUSH
14761: CALL 10920 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14765: LD_INT 22
14767: PUSH
14768: LD_INT 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 26
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: LD_INT 25
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 25
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 25
14810: PUSH
14811: LD_INT 3
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 25
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 25
14830: PUSH
14831: LD_INT 5
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: PPUSH
14851: CALL_OW 69
14855: PUSH
14856: LD_EXP 1
14860: PUSH
14861: LD_EXP 14
14865: PUSH
14866: LD_EXP 5
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: LIST
14875: DIFF
14876: PPUSH
14877: LD_STRING D9b-Sol1-1
14879: PPUSH
14880: LD_STRING D9b-Sol1-1
14882: PPUSH
14883: CALL 10920 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14887: LD_STRING 09_arInfo
14889: PPUSH
14890: LD_INT 0
14892: PPUSH
14893: CALL_OW 30
14897: PUSH
14898: LD_INT 1
14900: EQUAL
14901: IFFALSE 14915
// Say ( JMM , D9a-JMM-1 ) ;
14903: LD_EXP 1
14907: PPUSH
14908: LD_STRING D9a-JMM-1
14910: PPUSH
14911: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14915: LD_EXP 1
14919: PPUSH
14920: LD_STRING D9c-JMM-1
14922: PPUSH
14923: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14927: LD_INT 12
14929: PPUSH
14930: LD_INT 1
14932: PPUSH
14933: CALL_OW 321
14937: PUSH
14938: LD_INT 2
14940: EQUAL
14941: IFFALSE 14955
// Say ( JMM , D9c-JMM-1a ) ;
14943: LD_EXP 1
14947: PPUSH
14948: LD_STRING D9c-JMM-1a
14950: PPUSH
14951: CALL_OW 88
// DialogueOff ;
14955: CALL_OW 7
// end ; end ; 2 :
14959: GO 15459
14961: LD_INT 2
14963: DOUBLE
14964: EQUAL
14965: IFTRUE 14969
14967: GO 15427
14969: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
14970: LD_VAR 0 7
14974: PUSH
14975: LD_VAR 0 6
14979: ARRAY
14980: PPUSH
14981: LD_VAR 0 4
14985: PPUSH
14986: CALL_OW 250
14990: PUSH
14991: LD_INT 1
14993: NEG
14994: PPUSH
14995: LD_INT 1
14997: PPUSH
14998: CALL_OW 12
15002: PLUS
15003: PPUSH
15004: LD_VAR 0 4
15008: PPUSH
15009: CALL_OW 251
15013: PUSH
15014: LD_INT 1
15016: NEG
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL_OW 12
15025: PLUS
15026: PPUSH
15027: CALL_OW 153
// if eventVar2 = 0 then
15031: LD_EXP 66
15035: PUSH
15036: LD_INT 0
15038: EQUAL
15039: IFFALSE 15425
// begin eventVar2 = 1 ;
15041: LD_ADDR_EXP 66
15045: PUSH
15046: LD_INT 1
15048: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15049: LD_INT 245
15051: PPUSH
15052: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15056: LD_VAR 0 4
15060: PPUSH
15061: CALL_OW 250
15065: PPUSH
15066: LD_VAR 0 4
15070: PPUSH
15071: CALL_OW 251
15075: PPUSH
15076: CALL_OW 84
// DialogueOn ;
15080: CALL_OW 6
// if IsOK ( Cyrus ) then
15084: LD_EXP 5
15088: PPUSH
15089: CALL_OW 302
15093: IFFALSE 15109
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15095: LD_EXP 5
15099: PPUSH
15100: LD_STRING D9a-Cyrus-1
15102: PPUSH
15103: CALL_OW 88
// end else
15107: GO 15231
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15109: LD_INT 22
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 26
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 2
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 25
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 25
15154: PUSH
15155: LD_INT 3
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 25
15164: PUSH
15165: LD_INT 4
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 25
15174: PUSH
15175: LD_INT 5
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 69
15199: PUSH
15200: LD_EXP 1
15204: PUSH
15205: LD_EXP 14
15209: PUSH
15210: LD_EXP 5
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: DIFF
15220: PPUSH
15221: LD_STRING D9a-Sol1-1
15223: PPUSH
15224: LD_STRING D9a-Sol1-1
15226: PPUSH
15227: CALL 10920 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15231: LD_INT 22
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 26
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 2
15253: PUSH
15254: LD_INT 25
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 25
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 25
15276: PUSH
15277: LD_INT 3
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 25
15286: PUSH
15287: LD_INT 4
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 25
15296: PUSH
15297: LD_INT 5
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 69
15321: PUSH
15322: LD_EXP 1
15326: PUSH
15327: LD_EXP 14
15331: PUSH
15332: LD_EXP 5
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: DIFF
15342: PPUSH
15343: LD_STRING D9b-Sol1-1
15345: PPUSH
15346: LD_STRING D9b-Sol1-1
15348: PPUSH
15349: CALL 10920 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15353: LD_STRING 09_arInfo
15355: PPUSH
15356: LD_INT 0
15358: PPUSH
15359: CALL_OW 30
15363: PUSH
15364: LD_INT 1
15366: EQUAL
15367: IFFALSE 15381
// Say ( JMM , D9a-JMM-1 ) ;
15369: LD_EXP 1
15373: PPUSH
15374: LD_STRING D9a-JMM-1
15376: PPUSH
15377: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15381: LD_EXP 1
15385: PPUSH
15386: LD_STRING D9c-JMM-1
15388: PPUSH
15389: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15393: LD_INT 12
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: CALL_OW 321
15403: PUSH
15404: LD_INT 2
15406: EQUAL
15407: IFFALSE 15421
// Say ( JMM , D9c-JMM-1a ) ;
15409: LD_EXP 1
15413: PPUSH
15414: LD_STRING D9c-JMM-1a
15416: PPUSH
15417: CALL_OW 88
// DialogueOff ;
15421: CALL_OW 7
// end ; end ; 3 :
15425: GO 15459
15427: LD_INT 3
15429: DOUBLE
15430: EQUAL
15431: IFTRUE 15435
15433: GO 15458
15435: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15436: LD_VAR 0 7
15440: PUSH
15441: LD_VAR 0 6
15445: ARRAY
15446: PPUSH
15447: LD_VAR 0 4
15451: PPUSH
15452: CALL_OW 115
15456: GO 15459
15458: POP
// end ; end ;
15459: GO 14487
15461: POP
15462: POP
15463: GO 14474
15465: POP
15466: POP
// end ;
15467: LD_VAR 0 3
15471: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15472: LD_INT 0
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
// for i = 1 to 72 do
15478: LD_ADDR_VAR 0 5
15482: PUSH
15483: DOUBLE
15484: LD_INT 1
15486: DEC
15487: ST_TO_ADDR
15488: LD_INT 72
15490: PUSH
15491: FOR_TO
15492: IFFALSE 15550
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15494: LD_VAR 0 5
15498: PPUSH
15499: LD_VAR 0 1
15503: PPUSH
15504: CALL_OW 321
15508: PUSH
15509: LD_INT 1
15511: EQUAL
15512: PUSH
15513: LD_VAR 0 5
15517: PPUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: CALL_OW 482
15527: PUSH
15528: LD_INT 1
15530: EQUAL
15531: AND
15532: IFFALSE 15548
// AddComResearch ( lab , i ) ;
15534: LD_VAR 0 2
15538: PPUSH
15539: LD_VAR 0 5
15543: PPUSH
15544: CALL_OW 184
15548: GO 15491
15550: POP
15551: POP
// end ;
15552: LD_VAR 0 4
15556: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15557: LD_INT 0
15559: PPUSH
15560: PPUSH
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15567: LD_ADDR_VAR 0 6
15571: PUSH
15572: LD_INT 22
15574: PUSH
15575: LD_VAR 0 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 56
15586: PUSH
15587: EMPTY
15588: LIST
15589: PUSH
15590: LD_INT 24
15592: PUSH
15593: LD_INT 700
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 3
15602: PUSH
15603: LD_INT 60
15605: PUSH
15606: EMPTY
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 2
15615: PUSH
15616: LD_INT 25
15618: PUSH
15619: LD_INT 1
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 25
15628: PUSH
15629: LD_INT 9
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: LIST
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: PPUSH
15648: CALL_OW 69
15652: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15653: LD_ADDR_VAR 0 7
15657: PUSH
15658: LD_INT 22
15660: PUSH
15661: LD_VAR 0 1
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 30
15672: PUSH
15673: LD_INT 32
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 58
15682: PUSH
15683: EMPTY
15684: LIST
15685: PUSH
15686: LD_INT 24
15688: PUSH
15689: LD_INT 251
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 69
15706: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15707: LD_ADDR_VAR 0 9
15711: PUSH
15712: LD_INT 22
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: LD_INT 30
15729: PUSH
15730: LD_INT 4
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 30
15739: PUSH
15740: LD_INT 5
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 24
15754: PUSH
15755: LD_INT 251
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// if barrackList > 0 then
15772: LD_VAR 0 9
15776: PUSH
15777: LD_INT 0
15779: GREATER
15780: IFFALSE 15915
// begin if turretList = 0 then
15782: LD_VAR 0 7
15786: PUSH
15787: LD_INT 0
15789: EQUAL
15790: IFFALSE 15839
// begin for i in soldiers_list do
15792: LD_ADDR_VAR 0 4
15796: PUSH
15797: LD_VAR 0 6
15801: PUSH
15802: FOR_IN
15803: IFFALSE 15835
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15805: LD_VAR 0 4
15809: PPUSH
15810: LD_VAR 0 9
15814: PUSH
15815: LD_INT 1
15817: PPUSH
15818: LD_VAR 0 9
15822: PPUSH
15823: CALL_OW 12
15827: ARRAY
15828: PPUSH
15829: CALL_OW 120
15833: GO 15802
15835: POP
15836: POP
// end else
15837: GO 15915
// begin for i in barrackList do
15839: LD_ADDR_VAR 0 4
15843: PUSH
15844: LD_VAR 0 9
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15913
// begin insideUnits = UnitsInside ( i ) ;
15852: LD_ADDR_VAR 0 10
15856: PUSH
15857: LD_VAR 0 4
15861: PPUSH
15862: CALL_OW 313
15866: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
15867: LD_VAR 0 10
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: LD_VAR 0 7
15880: PUSH
15881: LD_INT 1
15883: ARRAY
15884: PPUSH
15885: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
15889: LD_VAR 0 6
15893: PUSH
15894: LD_INT 1
15896: ARRAY
15897: PPUSH
15898: LD_VAR 0 7
15902: PUSH
15903: LD_INT 1
15905: ARRAY
15906: PPUSH
15907: CALL_OW 120
// end ;
15911: GO 15849
15913: POP
15914: POP
// end ; end ; end ;
15915: LD_VAR 0 3
15919: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
15920: LD_INT 0
15922: PPUSH
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
15927: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
15928: LD_ADDR_VAR 0 6
15932: PUSH
15933: LD_VAR 0 2
15937: PPUSH
15938: CALL_OW 313
15942: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
15943: LD_ADDR_VAR 0 7
15947: PUSH
15948: LD_INT 22
15950: PUSH
15951: LD_VAR 0 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 25
15962: PUSH
15963: LD_INT 2
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 24
15972: PUSH
15973: LD_INT 1000
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 3
15982: PUSH
15983: LD_INT 54
15985: PUSH
15986: EMPTY
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PPUSH
15999: CALL_OW 69
16003: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16004: LD_ADDR_VAR 0 4
16008: PUSH
16009: LD_INT 22
16011: PUSH
16012: LD_VAR 0 1
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 21
16023: PUSH
16024: LD_INT 3
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 3
16033: PUSH
16034: LD_INT 24
16036: PUSH
16037: LD_INT 1000
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: PPUSH
16056: CALL_OW 69
16060: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16061: LD_VAR 0 4
16065: NOT
16066: PUSH
16067: LD_VAR 0 7
16071: NOT
16072: AND
16073: PUSH
16074: LD_EXP 42
16078: NOT
16079: AND
16080: IFFALSE 16084
// exit ;
16082: GO 16275
// if buildings_list > 0 and engineerOkInside then
16084: LD_VAR 0 4
16088: PUSH
16089: LD_INT 0
16091: GREATER
16092: PUSH
16093: LD_VAR 0 6
16097: AND
16098: IFFALSE 16152
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16100: LD_ADDR_VAR 0 5
16104: PUSH
16105: LD_INT 22
16107: PUSH
16108: LD_VAR 0 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 25
16119: PUSH
16120: LD_INT 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PPUSH
16131: CALL_OW 69
16135: PUSH
16136: FOR_IN
16137: IFFALSE 16150
// ComExitBuilding ( i ) ;
16139: LD_VAR 0 5
16143: PPUSH
16144: CALL_OW 122
16148: GO 16136
16150: POP
16151: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16152: LD_VAR 0 4
16156: PUSH
16157: LD_INT 0
16159: GREATER
16160: PUSH
16161: LD_VAR 0 7
16165: PUSH
16166: LD_INT 0
16168: GREATER
16169: AND
16170: IFFALSE 16224
// begin for i in engineerOkOutside do
16172: LD_ADDR_VAR 0 5
16176: PUSH
16177: LD_VAR 0 7
16181: PUSH
16182: FOR_IN
16183: IFFALSE 16222
// for j in buildings_list do
16185: LD_ADDR_VAR 0 8
16189: PUSH
16190: LD_VAR 0 4
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16218
// ComRepairBuilding ( i , j [ 1 ] ) ;
16198: LD_VAR 0 5
16202: PPUSH
16203: LD_VAR 0 8
16207: PUSH
16208: LD_INT 1
16210: ARRAY
16211: PPUSH
16212: CALL_OW 130
16216: GO 16195
16218: POP
16219: POP
16220: GO 16182
16222: POP
16223: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16224: LD_VAR 0 4
16228: PUSH
16229: LD_INT 0
16231: EQUAL
16232: PUSH
16233: LD_VAR 0 7
16237: PUSH
16238: LD_INT 0
16240: GREATER
16241: AND
16242: IFFALSE 16275
// for i in engineerOkOutside do
16244: LD_ADDR_VAR 0 5
16248: PUSH
16249: LD_VAR 0 7
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16273
// ComEnterUnit ( i , building ) ;
16257: LD_VAR 0 5
16261: PPUSH
16262: LD_VAR 0 2
16266: PPUSH
16267: CALL_OW 120
16271: GO 16254
16273: POP
16274: POP
// end ;
16275: LD_VAR 0 3
16279: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16284: LD_INT 22
16286: PUSH
16287: LD_VAR 0 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 25
16298: PUSH
16299: LD_INT 2
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: PUSH
16315: LD_INT 0
16317: GREATER
16318: PUSH
16319: LD_INT 22
16321: PUSH
16322: LD_VAR 0 1
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 21
16333: PUSH
16334: LD_INT 3
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: LD_INT 24
16346: PUSH
16347: LD_INT 1000
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: PPUSH
16363: CALL_OW 69
16367: PUSH
16368: LD_INT 0
16370: EQUAL
16371: AND
16372: PUSH
16373: LD_VAR 0 2
16377: PUSH
16378: LD_INT 0
16380: GREATER
16381: AND
16382: IFFALSE 16481
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: LD_INT 22
16391: PUSH
16392: LD_VAR 0 1
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 25
16403: PUSH
16404: LD_INT 2
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PPUSH
16415: CALL_OW 69
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16479
// begin AddComExitBuilding ( i ) ;
16423: LD_VAR 0 4
16427: PPUSH
16428: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16432: LD_VAR 0 4
16436: PPUSH
16437: LD_VAR 0 2
16441: PUSH
16442: LD_INT 1
16444: ARRAY
16445: PPUSH
16446: LD_VAR 0 2
16450: PUSH
16451: LD_INT 2
16453: ARRAY
16454: PPUSH
16455: LD_VAR 0 2
16459: PUSH
16460: LD_INT 3
16462: ARRAY
16463: PPUSH
16464: LD_VAR 0 2
16468: PUSH
16469: LD_INT 4
16471: ARRAY
16472: PPUSH
16473: CALL_OW 205
// end ;
16477: GO 16420
16479: POP
16480: POP
// end ; end ;
16481: LD_VAR 0 3
16485: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16486: LD_INT 0
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16497: LD_ADDR_VAR 0 6
16501: PUSH
16502: LD_INT 22
16504: PUSH
16505: LD_VAR 0 1
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 25
16516: PUSH
16517: LD_INT 4
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 24
16526: PUSH
16527: LD_INT 251
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16544: LD_ADDR_VAR 0 7
16548: PUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 22
16556: PUSH
16557: LD_VAR 0 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 25
16568: PUSH
16569: LD_INT 4
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 50
16578: PUSH
16579: EMPTY
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: PPUSH
16587: CALL_OW 70
16591: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16592: LD_ADDR_VAR 0 10
16596: PUSH
16597: LD_VAR 0 3
16601: PPUSH
16602: LD_INT 22
16604: PUSH
16605: LD_VAR 0 1
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 21
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 3
16626: PUSH
16627: LD_INT 25
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 3
16643: PUSH
16644: LD_INT 24
16646: PUSH
16647: LD_INT 750
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: PPUSH
16664: CALL_OW 70
16668: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16669: LD_ADDR_VAR 0 11
16673: PUSH
16674: LD_VAR 0 2
16678: PPUSH
16679: LD_INT 22
16681: PUSH
16682: LD_VAR 0 1
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 21
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 3
16703: PUSH
16704: LD_INT 25
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 3
16720: PUSH
16721: LD_INT 24
16723: PUSH
16724: LD_INT 1000
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 70
16745: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16746: LD_VAR 0 10
16750: NOT
16751: PUSH
16752: LD_VAR 0 7
16756: NOT
16757: AND
16758: PUSH
16759: LD_VAR 0 11
16763: NOT
16764: AND
16765: IFFALSE 16769
// exit ;
16767: GO 17029
// if damageUnits > 0 and sci_list > 0 then
16769: LD_VAR 0 10
16773: PUSH
16774: LD_INT 0
16776: GREATER
16777: PUSH
16778: LD_VAR 0 6
16782: PUSH
16783: LD_INT 0
16785: GREATER
16786: AND
16787: IFFALSE 16820
// for i in damageUnits do
16789: LD_ADDR_VAR 0 8
16793: PUSH
16794: LD_VAR 0 10
16798: PUSH
16799: FOR_IN
16800: IFFALSE 16818
// ComMoveToArea ( i , healArea ) ;
16802: LD_VAR 0 8
16806: PPUSH
16807: LD_VAR 0 2
16811: PPUSH
16812: CALL_OW 113
16816: GO 16799
16818: POP
16819: POP
// if unitsToHeal > 0 and sci_list > 0 then
16820: LD_VAR 0 11
16824: PUSH
16825: LD_INT 0
16827: GREATER
16828: PUSH
16829: LD_VAR 0 6
16833: PUSH
16834: LD_INT 0
16836: GREATER
16837: AND
16838: IFFALSE 16897
// begin for i in sci_list do
16840: LD_ADDR_VAR 0 8
16844: PUSH
16845: LD_VAR 0 6
16849: PUSH
16850: FOR_IN
16851: IFFALSE 16895
// begin ComExitBuilding ( i ) ;
16853: LD_VAR 0 8
16857: PPUSH
16858: CALL_OW 122
// for j in unitsToHeal do
16862: LD_ADDR_VAR 0 9
16866: PUSH
16867: LD_VAR 0 11
16871: PUSH
16872: FOR_IN
16873: IFFALSE 16891
// AddComHeal ( i , j ) ;
16875: LD_VAR 0 8
16879: PPUSH
16880: LD_VAR 0 9
16884: PPUSH
16885: CALL_OW 188
16889: GO 16872
16891: POP
16892: POP
// end ;
16893: GO 16850
16895: POP
16896: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
16897: LD_VAR 0 10
16901: PUSH
16902: LD_INT 0
16904: EQUAL
16905: PUSH
16906: LD_VAR 0 11
16910: PUSH
16911: LD_INT 0
16913: EQUAL
16914: AND
16915: PUSH
16916: LD_VAR 0 7
16920: PUSH
16921: LD_INT 0
16923: GREATER
16924: AND
16925: IFFALSE 17029
// for i in sci_listOutside do
16927: LD_ADDR_VAR 0 8
16931: PUSH
16932: LD_VAR 0 7
16936: PUSH
16937: FOR_IN
16938: IFFALSE 17027
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
16940: LD_ADDR_VAR 0 12
16944: PUSH
16945: LD_INT 22
16947: PUSH
16948: LD_VAR 0 1
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 21
16959: PUSH
16960: LD_INT 3
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 30
16969: PUSH
16970: LD_INT 8
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: PPUSH
16982: CALL_OW 69
16986: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
16987: LD_ADDR_VAR 0 13
16991: PUSH
16992: LD_INT 1
16994: PPUSH
16995: LD_VAR 0 12
16999: PPUSH
17000: CALL_OW 12
17004: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17005: LD_VAR 0 8
17009: PPUSH
17010: LD_VAR 0 12
17014: PUSH
17015: LD_VAR 0 13
17019: ARRAY
17020: PPUSH
17021: CALL_OW 120
// end ;
17025: GO 16937
17027: POP
17028: POP
// end ;
17029: LD_VAR 0 5
17033: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17034: LD_INT 0
17036: PPUSH
17037: PPUSH
17038: PPUSH
17039: PPUSH
17040: PPUSH
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
// amChassisTab = [ ] ;
17047: LD_ADDR_VAR 0 19
17051: PUSH
17052: EMPTY
17053: ST_TO_ADDR
// arChassisTab = [ ] ;
17054: LD_ADDR_VAR 0 18
17058: PUSH
17059: EMPTY
17060: ST_TO_ADDR
// ruChassisTab = [ ] ;
17061: LD_ADDR_VAR 0 17
17065: PUSH
17066: EMPTY
17067: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17068: LD_INT 35
17070: PPUSH
17071: CALL_OW 67
// if nation = 1 then
17075: LD_VAR 0 5
17079: PUSH
17080: LD_INT 1
17082: EQUAL
17083: IFFALSE 17588
// begin uc_side = side ;
17085: LD_ADDR_OWVAR 20
17089: PUSH
17090: LD_VAR 0 2
17094: ST_TO_ADDR
// uc_nation = nation ;
17095: LD_ADDR_OWVAR 21
17099: PUSH
17100: LD_VAR 0 5
17104: ST_TO_ADDR
// vc_engine = vehengine ;
17105: LD_ADDR_OWVAR 39
17109: PUSH
17110: LD_VAR 0 6
17114: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17115: LD_ADDR_OWVAR 38
17119: PUSH
17120: LD_VAR 0 7
17124: PUSH
17125: LD_INT 1
17127: PPUSH
17128: LD_VAR 0 7
17132: PPUSH
17133: CALL_OW 12
17137: ARRAY
17138: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17139: LD_ADDR_OWVAR 40
17143: PUSH
17144: LD_VAR 0 10
17148: PUSH
17149: LD_INT 1
17151: PPUSH
17152: LD_VAR 0 10
17156: PPUSH
17157: CALL_OW 12
17161: ARRAY
17162: ST_TO_ADDR
// for j = 1 to AMWeapon do
17163: LD_ADDR_VAR 0 14
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_VAR 0 10
17177: PUSH
17178: FOR_TO
17179: IFFALSE 17480
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17181: LD_VAR 0 10
17185: PUSH
17186: LD_VAR 0 14
17190: ARRAY
17191: PUSH
17192: LD_INT 2
17194: EQUAL
17195: PUSH
17196: LD_VAR 0 10
17200: PUSH
17201: LD_VAR 0 14
17205: ARRAY
17206: PUSH
17207: LD_INT 3
17209: EQUAL
17210: OR
17211: IFFALSE 17264
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17213: LD_ADDR_VAR 0 19
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: LD_INT 2
17223: PUSH
17224: LD_INT 3
17226: PUSH
17227: LD_INT 4
17229: PUSH
17230: LD_INT 5
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17240: LD_ADDR_OWVAR 37
17244: PUSH
17245: LD_VAR 0 19
17249: PUSH
17250: LD_INT 1
17252: PPUSH
17253: LD_VAR 0 19
17257: PPUSH
17258: CALL_OW 12
17262: ARRAY
17263: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17264: LD_VAR 0 10
17268: PUSH
17269: LD_VAR 0 14
17273: ARRAY
17274: PUSH
17275: LD_INT 4
17277: EQUAL
17278: PUSH
17279: LD_VAR 0 10
17283: PUSH
17284: LD_VAR 0 14
17288: ARRAY
17289: PUSH
17290: LD_INT 5
17292: EQUAL
17293: OR
17294: PUSH
17295: LD_VAR 0 10
17299: PUSH
17300: LD_VAR 0 14
17304: ARRAY
17305: PUSH
17306: LD_INT 9
17308: EQUAL
17309: OR
17310: PUSH
17311: LD_VAR 0 10
17315: PUSH
17316: LD_VAR 0 14
17320: ARRAY
17321: PUSH
17322: LD_INT 11
17324: EQUAL
17325: OR
17326: PUSH
17327: LD_VAR 0 10
17331: PUSH
17332: LD_VAR 0 14
17336: ARRAY
17337: PUSH
17338: LD_INT 7
17340: EQUAL
17341: OR
17342: IFFALSE 17391
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17344: LD_ADDR_VAR 0 19
17348: PUSH
17349: LD_INT 2
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 4
17357: PUSH
17358: LD_INT 5
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17367: LD_ADDR_OWVAR 37
17371: PUSH
17372: LD_VAR 0 19
17376: PUSH
17377: LD_INT 1
17379: PPUSH
17380: LD_VAR 0 19
17384: PPUSH
17385: CALL_OW 12
17389: ARRAY
17390: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17391: LD_VAR 0 10
17395: PUSH
17396: LD_VAR 0 14
17400: ARRAY
17401: PUSH
17402: LD_INT 8
17404: EQUAL
17405: PUSH
17406: LD_VAR 0 10
17410: PUSH
17411: LD_VAR 0 14
17415: ARRAY
17416: PUSH
17417: LD_INT 6
17419: EQUAL
17420: OR
17421: PUSH
17422: LD_VAR 0 10
17426: PUSH
17427: LD_VAR 0 14
17431: ARRAY
17432: PUSH
17433: LD_INT 10
17435: EQUAL
17436: OR
17437: IFFALSE 17478
// begin amChassisTab = [ 4 , 5 ] ;
17439: LD_ADDR_VAR 0 19
17443: PUSH
17444: LD_INT 4
17446: PUSH
17447: LD_INT 5
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17454: LD_ADDR_OWVAR 37
17458: PUSH
17459: LD_VAR 0 19
17463: PUSH
17464: LD_INT 1
17466: PPUSH
17467: LD_VAR 0 19
17471: PPUSH
17472: CALL_OW 12
17476: ARRAY
17477: ST_TO_ADDR
// end ; end ;
17478: GO 17178
17480: POP
17481: POP
// veh = CreateVehicle ;
17482: LD_ADDR_VAR 0 16
17486: PUSH
17487: CALL_OW 45
17491: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17492: LD_VAR 0 16
17496: PPUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: LD_INT 0
17504: PPUSH
17505: CALL_OW 49
// if vc_control = 1 then
17509: LD_OWVAR 38
17513: PUSH
17514: LD_INT 1
17516: EQUAL
17517: IFFALSE 17574
// begin hc_gallery =  ;
17519: LD_ADDR_OWVAR 33
17523: PUSH
17524: LD_STRING 
17526: ST_TO_ADDR
// hc_name =  ;
17527: LD_ADDR_OWVAR 26
17531: PUSH
17532: LD_STRING 
17534: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17535: LD_INT 0
17537: PPUSH
17538: LD_INT 3
17540: PPUSH
17541: LD_VAR 0 4
17545: PPUSH
17546: CALL_OW 380
// un = CreateHuman ;
17550: LD_ADDR_VAR 0 15
17554: PUSH
17555: CALL_OW 44
17559: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17560: LD_VAR 0 15
17564: PPUSH
17565: LD_VAR 0 16
17569: PPUSH
17570: CALL_OW 52
// end ; i = i + 1 ;
17574: LD_ADDR_VAR 0 13
17578: PUSH
17579: LD_VAR 0 13
17583: PUSH
17584: LD_INT 1
17586: PLUS
17587: ST_TO_ADDR
// end ; if nation = 2 then
17588: LD_VAR 0 5
17592: PUSH
17593: LD_INT 2
17595: EQUAL
17596: IFFALSE 18018
// begin uc_side = side ;
17598: LD_ADDR_OWVAR 20
17602: PUSH
17603: LD_VAR 0 2
17607: ST_TO_ADDR
// uc_nation = nation ;
17608: LD_ADDR_OWVAR 21
17612: PUSH
17613: LD_VAR 0 5
17617: ST_TO_ADDR
// vc_engine = vehengine ;
17618: LD_ADDR_OWVAR 39
17622: PUSH
17623: LD_VAR 0 6
17627: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17628: LD_ADDR_OWVAR 38
17632: PUSH
17633: LD_VAR 0 7
17637: PUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_VAR 0 7
17645: PPUSH
17646: CALL_OW 12
17650: ARRAY
17651: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17652: LD_ADDR_OWVAR 40
17656: PUSH
17657: LD_VAR 0 9
17661: PUSH
17662: LD_INT 1
17664: PPUSH
17665: LD_VAR 0 9
17669: PPUSH
17670: CALL_OW 12
17674: ARRAY
17675: ST_TO_ADDR
// for j = 1 to ARWeapons do
17676: LD_ADDR_VAR 0 14
17680: PUSH
17681: DOUBLE
17682: LD_INT 1
17684: DEC
17685: ST_TO_ADDR
17686: LD_VAR 0 9
17690: PUSH
17691: FOR_TO
17692: IFFALSE 17910
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17694: LD_VAR 0 9
17698: PUSH
17699: LD_VAR 0 14
17703: ARRAY
17704: PUSH
17705: LD_INT 24
17707: EQUAL
17708: PUSH
17709: LD_VAR 0 9
17713: PUSH
17714: LD_VAR 0 14
17718: ARRAY
17719: PUSH
17720: LD_INT 22
17722: EQUAL
17723: OR
17724: PUSH
17725: LD_VAR 0 9
17729: PUSH
17730: LD_VAR 0 14
17734: ARRAY
17735: PUSH
17736: LD_INT 23
17738: EQUAL
17739: OR
17740: PUSH
17741: LD_VAR 0 9
17745: PUSH
17746: LD_VAR 0 14
17750: ARRAY
17751: PUSH
17752: LD_INT 30
17754: EQUAL
17755: OR
17756: IFFALSE 17793
// begin arChassisTab = [ 14 ] ;
17758: LD_ADDR_VAR 0 18
17762: PUSH
17763: LD_INT 14
17765: PUSH
17766: EMPTY
17767: LIST
17768: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17769: LD_ADDR_OWVAR 37
17773: PUSH
17774: LD_VAR 0 18
17778: PUSH
17779: LD_INT 1
17781: PPUSH
17782: LD_VAR 0 18
17786: PPUSH
17787: CALL_OW 12
17791: ARRAY
17792: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17793: LD_VAR 0 9
17797: PUSH
17798: LD_VAR 0 14
17802: ARRAY
17803: PUSH
17804: LD_INT 29
17806: EQUAL
17807: PUSH
17808: LD_VAR 0 9
17812: PUSH
17813: LD_VAR 0 14
17817: ARRAY
17818: PUSH
17819: LD_INT 28
17821: EQUAL
17822: OR
17823: PUSH
17824: LD_VAR 0 9
17828: PUSH
17829: LD_VAR 0 14
17833: ARRAY
17834: PUSH
17835: LD_INT 27
17837: EQUAL
17838: OR
17839: PUSH
17840: LD_VAR 0 9
17844: PUSH
17845: LD_VAR 0 14
17849: ARRAY
17850: PUSH
17851: LD_INT 26
17853: EQUAL
17854: OR
17855: PUSH
17856: LD_VAR 0 9
17860: PUSH
17861: LD_VAR 0 14
17865: ARRAY
17866: PUSH
17867: LD_INT 25
17869: EQUAL
17870: OR
17871: IFFALSE 17908
// begin arChassisTab = [ 14 ] ;
17873: LD_ADDR_VAR 0 18
17877: PUSH
17878: LD_INT 14
17880: PUSH
17881: EMPTY
17882: LIST
17883: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17884: LD_ADDR_OWVAR 37
17888: PUSH
17889: LD_VAR 0 18
17893: PUSH
17894: LD_INT 1
17896: PPUSH
17897: LD_VAR 0 18
17901: PPUSH
17902: CALL_OW 12
17906: ARRAY
17907: ST_TO_ADDR
// end ; end ;
17908: GO 17691
17910: POP
17911: POP
// veh = CreateVehicle ;
17912: LD_ADDR_VAR 0 16
17916: PUSH
17917: CALL_OW 45
17921: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17922: LD_VAR 0 16
17926: PPUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: LD_INT 0
17934: PPUSH
17935: CALL_OW 49
// if vc_control = 1 then
17939: LD_OWVAR 38
17943: PUSH
17944: LD_INT 1
17946: EQUAL
17947: IFFALSE 18004
// begin hc_gallery =  ;
17949: LD_ADDR_OWVAR 33
17953: PUSH
17954: LD_STRING 
17956: ST_TO_ADDR
// hc_name =  ;
17957: LD_ADDR_OWVAR 26
17961: PUSH
17962: LD_STRING 
17964: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17965: LD_INT 0
17967: PPUSH
17968: LD_INT 3
17970: PPUSH
17971: LD_VAR 0 4
17975: PPUSH
17976: CALL_OW 380
// un = CreateHuman ;
17980: LD_ADDR_VAR 0 15
17984: PUSH
17985: CALL_OW 44
17989: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17990: LD_VAR 0 15
17994: PPUSH
17995: LD_VAR 0 16
17999: PPUSH
18000: CALL_OW 52
// end ; i = i + 1 ;
18004: LD_ADDR_VAR 0 13
18008: PUSH
18009: LD_VAR 0 13
18013: PUSH
18014: LD_INT 1
18016: PLUS
18017: ST_TO_ADDR
// end ; if nation = 3 then
18018: LD_VAR 0 5
18022: PUSH
18023: LD_INT 3
18025: EQUAL
18026: IFFALSE 18432
// begin uc_side = side ;
18028: LD_ADDR_OWVAR 20
18032: PUSH
18033: LD_VAR 0 2
18037: ST_TO_ADDR
// uc_nation = nation ;
18038: LD_ADDR_OWVAR 21
18042: PUSH
18043: LD_VAR 0 5
18047: ST_TO_ADDR
// vc_engine = vehengine ;
18048: LD_ADDR_OWVAR 39
18052: PUSH
18053: LD_VAR 0 6
18057: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18058: LD_ADDR_OWVAR 38
18062: PUSH
18063: LD_VAR 0 7
18067: PUSH
18068: LD_INT 1
18070: PPUSH
18071: LD_VAR 0 7
18075: PPUSH
18076: CALL_OW 12
18080: ARRAY
18081: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18082: LD_ADDR_OWVAR 40
18086: PUSH
18087: LD_VAR 0 8
18091: PUSH
18092: LD_INT 1
18094: PPUSH
18095: LD_VAR 0 8
18099: PPUSH
18100: CALL_OW 12
18104: ARRAY
18105: ST_TO_ADDR
// for j = 1 to RuWeapons do
18106: LD_ADDR_VAR 0 14
18110: PUSH
18111: DOUBLE
18112: LD_INT 1
18114: DEC
18115: ST_TO_ADDR
18116: LD_VAR 0 8
18120: PUSH
18121: FOR_TO
18122: IFFALSE 18324
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18124: LD_VAR 0 8
18128: PUSH
18129: LD_VAR 0 14
18133: ARRAY
18134: PUSH
18135: LD_INT 42
18137: EQUAL
18138: PUSH
18139: LD_VAR 0 8
18143: PUSH
18144: LD_VAR 0 14
18148: ARRAY
18149: PUSH
18150: LD_INT 43
18152: EQUAL
18153: OR
18154: PUSH
18155: LD_VAR 0 8
18159: PUSH
18160: LD_VAR 0 14
18164: ARRAY
18165: PUSH
18166: LD_INT 44
18168: EQUAL
18169: OR
18170: PUSH
18171: LD_VAR 0 8
18175: PUSH
18176: LD_VAR 0 14
18180: ARRAY
18181: PUSH
18182: LD_INT 45
18184: EQUAL
18185: OR
18186: PUSH
18187: LD_VAR 0 8
18191: PUSH
18192: LD_VAR 0 14
18196: ARRAY
18197: PUSH
18198: LD_INT 49
18200: EQUAL
18201: OR
18202: IFFALSE 18251
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18204: LD_ADDR_VAR 0 17
18208: PUSH
18209: LD_INT 21
18211: PUSH
18212: LD_INT 22
18214: PUSH
18215: LD_INT 23
18217: PUSH
18218: LD_INT 24
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18227: LD_ADDR_OWVAR 37
18231: PUSH
18232: LD_VAR 0 17
18236: PUSH
18237: LD_INT 1
18239: PPUSH
18240: LD_VAR 0 17
18244: PPUSH
18245: CALL_OW 12
18249: ARRAY
18250: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18251: LD_VAR 0 8
18255: PUSH
18256: LD_VAR 0 14
18260: ARRAY
18261: PUSH
18262: LD_INT 46
18264: EQUAL
18265: PUSH
18266: LD_VAR 0 8
18270: PUSH
18271: LD_VAR 0 14
18275: ARRAY
18276: PUSH
18277: LD_INT 47
18279: EQUAL
18280: OR
18281: IFFALSE 18322
// begin ruChassisTab = [ 23 , 24 ] ;
18283: LD_ADDR_VAR 0 17
18287: PUSH
18288: LD_INT 23
18290: PUSH
18291: LD_INT 24
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18298: LD_ADDR_OWVAR 37
18302: PUSH
18303: LD_VAR 0 17
18307: PUSH
18308: LD_INT 1
18310: PPUSH
18311: LD_VAR 0 17
18315: PPUSH
18316: CALL_OW 12
18320: ARRAY
18321: ST_TO_ADDR
// end ; end ;
18322: GO 18121
18324: POP
18325: POP
// veh = CreateVehicle ;
18326: LD_ADDR_VAR 0 16
18330: PUSH
18331: CALL_OW 45
18335: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18336: LD_VAR 0 16
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: LD_INT 0
18348: PPUSH
18349: CALL_OW 49
// if vc_control = 1 then
18353: LD_OWVAR 38
18357: PUSH
18358: LD_INT 1
18360: EQUAL
18361: IFFALSE 18418
// begin hc_gallery =  ;
18363: LD_ADDR_OWVAR 33
18367: PUSH
18368: LD_STRING 
18370: ST_TO_ADDR
// hc_name =  ;
18371: LD_ADDR_OWVAR 26
18375: PUSH
18376: LD_STRING 
18378: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18379: LD_INT 0
18381: PPUSH
18382: LD_INT 3
18384: PPUSH
18385: LD_VAR 0 4
18389: PPUSH
18390: CALL_OW 380
// un = CreateHuman ;
18394: LD_ADDR_VAR 0 15
18398: PUSH
18399: CALL_OW 44
18403: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18404: LD_VAR 0 15
18408: PPUSH
18409: LD_VAR 0 16
18413: PPUSH
18414: CALL_OW 52
// end ; i = i + 1 ;
18418: LD_ADDR_VAR 0 13
18422: PUSH
18423: LD_VAR 0 13
18427: PUSH
18428: LD_INT 1
18430: PLUS
18431: ST_TO_ADDR
// end ; until i = vehCount ;
18432: LD_VAR 0 13
18436: PUSH
18437: LD_VAR 0 3
18441: EQUAL
18442: IFFALSE 17068
// repeat wait ( 0 0$1 ) ;
18444: LD_INT 35
18446: PPUSH
18447: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18451: LD_ADDR_VAR 0 20
18455: PUSH
18456: LD_INT 22
18458: PUSH
18459: LD_VAR 0 2
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 21
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 24
18480: PUSH
18481: LD_INT 650
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 69
18497: ST_TO_ADDR
// if vehicleOK_list > 0 then
18498: LD_VAR 0 20
18502: PUSH
18503: LD_INT 0
18505: GREATER
18506: IFFALSE 18697
// begin for i in vehicleOK_list do
18508: LD_ADDR_VAR 0 13
18512: PUSH
18513: LD_VAR 0 20
18517: PUSH
18518: FOR_IN
18519: IFFALSE 18695
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18521: LD_ADDR_VAR 0 21
18525: PUSH
18526: LD_INT 22
18528: PUSH
18529: LD_VAR 0 11
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PPUSH
18538: CALL_OW 69
18542: PPUSH
18543: LD_VAR 0 13
18547: PPUSH
18548: CALL_OW 74
18552: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18553: LD_ADDR_VAR 0 22
18557: PUSH
18558: LD_INT 22
18560: PUSH
18561: LD_VAR 0 11
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 59
18575: PUSH
18576: EMPTY
18577: LIST
18578: PUSH
18579: LD_INT 21
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 21
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: PPUSH
18612: CALL_OW 69
18616: PPUSH
18617: LD_VAR 0 13
18621: PPUSH
18622: CALL_OW 74
18626: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18627: LD_VAR 0 13
18631: PPUSH
18632: LD_VAR 0 21
18636: PPUSH
18637: CALL_OW 296
18641: PUSH
18642: LD_INT 8
18644: PLUS
18645: PUSH
18646: LD_VAR 0 13
18650: PPUSH
18651: LD_VAR 0 22
18655: PPUSH
18656: CALL_OW 296
18660: LESS
18661: IFFALSE 18679
// begin ComAttackUnit ( i , target1 ) ;
18663: LD_VAR 0 13
18667: PPUSH
18668: LD_VAR 0 21
18672: PPUSH
18673: CALL_OW 115
// end else
18677: GO 18693
// begin ComAttackUnit ( i , target2 ) ;
18679: LD_VAR 0 13
18683: PPUSH
18684: LD_VAR 0 22
18688: PPUSH
18689: CALL_OW 115
// end ; end ;
18693: GO 18518
18695: POP
18696: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18697: LD_INT 22
18699: PUSH
18700: LD_VAR 0 2
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 21
18711: PUSH
18712: LD_INT 2
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: PUSH
18728: LD_INT 0
18730: EQUAL
18731: IFFALSE 18444
// end ;
18733: LD_VAR 0 12
18737: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
18742: PPUSH
18743: PPUSH
18744: PPUSH
18745: PPUSH
18746: PPUSH
18747: PPUSH
18748: PPUSH
18749: PPUSH
18750: PPUSH
// for i = 1 to soldierCount do
18751: LD_ADDR_VAR 0 13
18755: PUSH
18756: DOUBLE
18757: LD_INT 1
18759: DEC
18760: ST_TO_ADDR
18761: LD_VAR 0 3
18765: PUSH
18766: FOR_TO
18767: IFFALSE 18849
// begin uc_side = side ;
18769: LD_ADDR_OWVAR 20
18773: PUSH
18774: LD_VAR 0 1
18778: ST_TO_ADDR
// uc_nation = nation ;
18779: LD_ADDR_OWVAR 21
18783: PUSH
18784: LD_VAR 0 2
18788: ST_TO_ADDR
// hc_name =  ;
18789: LD_ADDR_OWVAR 26
18793: PUSH
18794: LD_STRING 
18796: ST_TO_ADDR
// hc_gallery =  ;
18797: LD_ADDR_OWVAR 33
18801: PUSH
18802: LD_STRING 
18804: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18805: LD_INT 0
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: LD_VAR 0 8
18815: PPUSH
18816: CALL_OW 380
// un = CreateHuman ;
18820: LD_ADDR_VAR 0 15
18824: PUSH
18825: CALL_OW 44
18829: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18830: LD_VAR 0 15
18834: PPUSH
18835: LD_VAR 0 9
18839: PPUSH
18840: LD_INT 0
18842: PPUSH
18843: CALL_OW 49
// end ;
18847: GO 18766
18849: POP
18850: POP
// for i = 1 to sniperCount do
18851: LD_ADDR_VAR 0 13
18855: PUSH
18856: DOUBLE
18857: LD_INT 1
18859: DEC
18860: ST_TO_ADDR
18861: LD_VAR 0 4
18865: PUSH
18866: FOR_TO
18867: IFFALSE 18949
// begin uc_side = side ;
18869: LD_ADDR_OWVAR 20
18873: PUSH
18874: LD_VAR 0 1
18878: ST_TO_ADDR
// uc_nation = nation ;
18879: LD_ADDR_OWVAR 21
18883: PUSH
18884: LD_VAR 0 2
18888: ST_TO_ADDR
// hc_name =  ;
18889: LD_ADDR_OWVAR 26
18893: PUSH
18894: LD_STRING 
18896: ST_TO_ADDR
// hc_gallery =  ;
18897: LD_ADDR_OWVAR 33
18901: PUSH
18902: LD_STRING 
18904: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
18905: LD_INT 0
18907: PPUSH
18908: LD_INT 5
18910: PPUSH
18911: LD_VAR 0 8
18915: PPUSH
18916: CALL_OW 380
// un = CreateHuman ;
18920: LD_ADDR_VAR 0 15
18924: PUSH
18925: CALL_OW 44
18929: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18930: LD_VAR 0 15
18934: PPUSH
18935: LD_VAR 0 9
18939: PPUSH
18940: LD_INT 0
18942: PPUSH
18943: CALL_OW 49
// end ;
18947: GO 18866
18949: POP
18950: POP
// for i = 1 to bazookCount do
18951: LD_ADDR_VAR 0 13
18955: PUSH
18956: DOUBLE
18957: LD_INT 1
18959: DEC
18960: ST_TO_ADDR
18961: LD_VAR 0 5
18965: PUSH
18966: FOR_TO
18967: IFFALSE 19049
// begin uc_side = side ;
18969: LD_ADDR_OWVAR 20
18973: PUSH
18974: LD_VAR 0 1
18978: ST_TO_ADDR
// uc_nation = nation ;
18979: LD_ADDR_OWVAR 21
18983: PUSH
18984: LD_VAR 0 2
18988: ST_TO_ADDR
// hc_name =  ;
18989: LD_ADDR_OWVAR 26
18993: PUSH
18994: LD_STRING 
18996: ST_TO_ADDR
// hc_gallery =  ;
18997: LD_ADDR_OWVAR 33
19001: PUSH
19002: LD_STRING 
19004: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19005: LD_INT 0
19007: PPUSH
19008: LD_INT 9
19010: PPUSH
19011: LD_VAR 0 8
19015: PPUSH
19016: CALL_OW 380
// un = CreateHuman ;
19020: LD_ADDR_VAR 0 15
19024: PUSH
19025: CALL_OW 44
19029: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19030: LD_VAR 0 15
19034: PPUSH
19035: LD_VAR 0 9
19039: PPUSH
19040: LD_INT 0
19042: PPUSH
19043: CALL_OW 49
// end ;
19047: GO 18966
19049: POP
19050: POP
// for i = 1 to mortalCount do
19051: LD_ADDR_VAR 0 13
19055: PUSH
19056: DOUBLE
19057: LD_INT 1
19059: DEC
19060: ST_TO_ADDR
19061: LD_VAR 0 6
19065: PUSH
19066: FOR_TO
19067: IFFALSE 19149
// begin uc_side = side ;
19069: LD_ADDR_OWVAR 20
19073: PUSH
19074: LD_VAR 0 1
19078: ST_TO_ADDR
// uc_nation = nation ;
19079: LD_ADDR_OWVAR 21
19083: PUSH
19084: LD_VAR 0 2
19088: ST_TO_ADDR
// hc_name =  ;
19089: LD_ADDR_OWVAR 26
19093: PUSH
19094: LD_STRING 
19096: ST_TO_ADDR
// hc_gallery =  ;
19097: LD_ADDR_OWVAR 33
19101: PUSH
19102: LD_STRING 
19104: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19105: LD_INT 0
19107: PPUSH
19108: LD_INT 8
19110: PPUSH
19111: LD_VAR 0 8
19115: PPUSH
19116: CALL_OW 380
// un = CreateHuman ;
19120: LD_ADDR_VAR 0 15
19124: PUSH
19125: CALL_OW 44
19129: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19130: LD_VAR 0 15
19134: PPUSH
19135: LD_VAR 0 9
19139: PPUSH
19140: LD_INT 0
19142: PPUSH
19143: CALL_OW 49
// end ;
19147: GO 19066
19149: POP
19150: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19151: LD_ADDR_VAR 0 18
19155: PUSH
19156: LD_INT 22
19158: PUSH
19159: LD_VAR 0 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: LD_INT 25
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 25
19183: PUSH
19184: LD_INT 5
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 25
19193: PUSH
19194: LD_INT 8
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 25
19203: PUSH
19204: LD_INT 9
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PPUSH
19222: CALL_OW 69
19226: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19227: LD_ADDR_VAR 0 17
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_VAR 0 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 25
19246: PUSH
19247: LD_INT 4
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PPUSH
19258: CALL_OW 69
19262: ST_TO_ADDR
// for i in medic_list do
19263: LD_ADDR_VAR 0 13
19267: PUSH
19268: LD_VAR 0 17
19272: PUSH
19273: FOR_IN
19274: IFFALSE 19292
// ComMoveToArea ( i , healArea ) ;
19276: LD_VAR 0 13
19280: PPUSH
19281: LD_VAR 0 10
19285: PPUSH
19286: CALL_OW 113
19290: GO 19273
19292: POP
19293: POP
// repeat wait ( 0 0$1 ) ;
19294: LD_INT 35
19296: PPUSH
19297: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19301: LD_ADDR_VAR 0 16
19305: PUSH
19306: LD_INT 22
19308: PUSH
19309: LD_VAR 0 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: LD_INT 24
19326: PUSH
19327: LD_INT 550
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 24
19340: PUSH
19341: LD_INT 250
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: CALL_OW 69
19361: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19362: LD_ADDR_VAR 0 18
19366: PUSH
19367: LD_INT 22
19369: PUSH
19370: LD_VAR 0 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: LD_INT 25
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 5
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 8
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 9
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 24
19431: PUSH
19432: LD_INT 1000
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL_OW 69
19448: ST_TO_ADDR
// if medicCount > 0 then
19449: LD_VAR 0 7
19453: PUSH
19454: LD_INT 0
19456: GREATER
19457: IFFALSE 19531
// begin if damageUnit_list > 0 then
19459: LD_VAR 0 16
19463: PUSH
19464: LD_INT 0
19466: GREATER
19467: IFFALSE 19531
// begin for i in damageUnit_list do
19469: LD_ADDR_VAR 0 13
19473: PUSH
19474: LD_VAR 0 16
19478: PUSH
19479: FOR_IN
19480: IFFALSE 19529
// begin ComMoveToArea ( i , healArea ) ;
19482: LD_VAR 0 13
19486: PPUSH
19487: LD_VAR 0 10
19491: PPUSH
19492: CALL_OW 113
// for j in medic_list do
19496: LD_ADDR_VAR 0 14
19500: PUSH
19501: LD_VAR 0 17
19505: PUSH
19506: FOR_IN
19507: IFFALSE 19525
// AddComHeal ( j , i ) ;
19509: LD_VAR 0 14
19513: PPUSH
19514: LD_VAR 0 13
19518: PPUSH
19519: CALL_OW 188
19523: GO 19506
19525: POP
19526: POP
// end ;
19527: GO 19479
19529: POP
19530: POP
// end ; end ; for i in soldiersOK_list do
19531: LD_ADDR_VAR 0 13
19535: PUSH
19536: LD_VAR 0 18
19540: PUSH
19541: FOR_IN
19542: IFFALSE 19718
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19544: LD_ADDR_VAR 0 21
19548: PUSH
19549: LD_INT 22
19551: PUSH
19552: LD_VAR 0 11
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PPUSH
19561: CALL_OW 69
19565: PPUSH
19566: LD_VAR 0 13
19570: PPUSH
19571: CALL_OW 74
19575: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19576: LD_ADDR_VAR 0 22
19580: PUSH
19581: LD_INT 22
19583: PUSH
19584: LD_VAR 0 11
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_INT 59
19598: PUSH
19599: EMPTY
19600: LIST
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: EMPTY
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: PPUSH
19640: LD_VAR 0 13
19644: PPUSH
19645: CALL_OW 74
19649: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19650: LD_VAR 0 13
19654: PPUSH
19655: LD_VAR 0 21
19659: PPUSH
19660: CALL_OW 296
19664: PUSH
19665: LD_INT 8
19667: PLUS
19668: PUSH
19669: LD_VAR 0 13
19673: PPUSH
19674: LD_VAR 0 22
19678: PPUSH
19679: CALL_OW 296
19683: LESS
19684: IFFALSE 19702
// begin ComAttackUnit ( i , target1 ) ;
19686: LD_VAR 0 13
19690: PPUSH
19691: LD_VAR 0 21
19695: PPUSH
19696: CALL_OW 115
// end else
19700: GO 19716
// begin ComAttackUnit ( i , target2 ) ;
19702: LD_VAR 0 13
19706: PPUSH
19707: LD_VAR 0 22
19711: PPUSH
19712: CALL_OW 115
// end ; end ;
19716: GO 19541
19718: POP
19719: POP
// for i in soldiersOK_list do
19720: LD_ADDR_VAR 0 13
19724: PUSH
19725: LD_VAR 0 18
19729: PUSH
19730: FOR_IN
19731: IFFALSE 19907
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19733: LD_ADDR_VAR 0 21
19737: PUSH
19738: LD_INT 22
19740: PUSH
19741: LD_VAR 0 11
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PPUSH
19750: CALL_OW 69
19754: PPUSH
19755: LD_VAR 0 13
19759: PPUSH
19760: CALL_OW 74
19764: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19765: LD_ADDR_VAR 0 22
19769: PUSH
19770: LD_INT 22
19772: PUSH
19773: LD_VAR 0 11
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 59
19787: PUSH
19788: EMPTY
19789: LIST
19790: PUSH
19791: LD_INT 21
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 21
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: EMPTY
19822: LIST
19823: PPUSH
19824: CALL_OW 69
19828: PPUSH
19829: LD_VAR 0 13
19833: PPUSH
19834: CALL_OW 74
19838: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19839: LD_VAR 0 13
19843: PPUSH
19844: LD_VAR 0 21
19848: PPUSH
19849: CALL_OW 296
19853: PUSH
19854: LD_INT 8
19856: PLUS
19857: PUSH
19858: LD_VAR 0 13
19862: PPUSH
19863: LD_VAR 0 22
19867: PPUSH
19868: CALL_OW 296
19872: LESS
19873: IFFALSE 19891
// begin ComAttackUnit ( i , target1 ) ;
19875: LD_VAR 0 13
19879: PPUSH
19880: LD_VAR 0 21
19884: PPUSH
19885: CALL_OW 115
// end else
19889: GO 19905
// begin ComAttackUnit ( i , target2 ) ;
19891: LD_VAR 0 13
19895: PPUSH
19896: LD_VAR 0 22
19900: PPUSH
19901: CALL_OW 115
// end ; end ;
19905: GO 19730
19907: POP
19908: POP
// until soldiersOK_list = [ ] ;
19909: LD_VAR 0 18
19913: PUSH
19914: EMPTY
19915: EQUAL
19916: IFFALSE 19294
// end ;
19918: LD_VAR 0 12
19922: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
19923: LD_INT 0
19925: PPUSH
19926: PPUSH
19927: PPUSH
19928: PPUSH
19929: PPUSH
19930: PPUSH
19931: PPUSH
// repeat wait ( 0 0$1 ) ;
19932: LD_INT 35
19934: PPUSH
19935: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
19939: LD_ADDR_VAR 0 7
19943: PUSH
19944: LD_INT 22
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 25
19956: PUSH
19957: LD_INT 4
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 3
19966: PUSH
19967: LD_INT 60
19969: PUSH
19970: EMPTY
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: LIST
19981: PPUSH
19982: CALL_OW 69
19986: ST_TO_ADDR
// if not tmp then
19987: LD_VAR 0 7
19991: NOT
19992: IFFALSE 19996
// continue ;
19994: GO 19932
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19996: LD_ADDR_VAR 0 3
20000: PUSH
20001: LD_INT 5
20003: PPUSH
20004: LD_INT 22
20006: PUSH
20007: LD_INT 0
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 25
20016: PUSH
20017: LD_INT 12
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PPUSH
20028: CALL_OW 70
20032: PUSH
20033: FOR_IN
20034: IFFALSE 20067
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20036: LD_VAR 0 7
20040: PPUSH
20041: LD_VAR 0 3
20045: PPUSH
20046: CALL_OW 250
20050: PPUSH
20051: LD_VAR 0 3
20055: PPUSH
20056: CALL_OW 251
20060: PPUSH
20061: CALL_OW 131
20065: GO 20033
20067: POP
20068: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20069: LD_INT 22
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 25
20081: PUSH
20082: LD_INT 4
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PPUSH
20093: CALL_OW 69
20097: PUSH
20098: LD_INT 0
20100: EQUAL
20101: PUSH
20102: LD_INT 5
20104: PPUSH
20105: LD_INT 22
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 25
20117: PUSH
20118: LD_INT 12
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PPUSH
20129: CALL_OW 70
20133: PUSH
20134: LD_INT 2
20136: LESS
20137: OR
20138: PUSH
20139: LD_OWVAR 1
20143: PUSH
20144: LD_INT 7000
20146: GREATEREQUAL
20147: OR
20148: IFFALSE 19932
// repeat wait ( 0 0$1 ) ;
20150: LD_INT 35
20152: PPUSH
20153: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20157: LD_ADDR_VAR 0 5
20161: PUSH
20162: LD_INT 22
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 30
20174: PUSH
20175: LD_INT 5
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PPUSH
20186: CALL_OW 69
20190: ST_TO_ADDR
// until arm ;
20191: LD_VAR 0 5
20195: IFFALSE 20150
// wait ( 0 0$25 ) ;
20197: LD_INT 875
20199: PPUSH
20200: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20204: LD_ADDR_VAR 0 6
20208: PUSH
20209: LD_INT 22
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 2
20221: PUSH
20222: LD_INT 30
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 30
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PPUSH
20251: CALL_OW 69
20255: ST_TO_ADDR
// j := 0 ;
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20264: LD_ADDR_VAR 0 2
20268: PUSH
20269: LD_INT 22
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 25
20281: PUSH
20282: LD_INT 12
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 69
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20386
// begin ComMoveXY ( i , 63 , 16 ) ;
20301: LD_VAR 0 2
20305: PPUSH
20306: LD_INT 63
20308: PPUSH
20309: LD_INT 16
20311: PPUSH
20312: CALL_OW 111
// j := j + 1 ;
20316: LD_ADDR_VAR 0 3
20320: PUSH
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 1
20328: PLUS
20329: ST_TO_ADDR
// if j < 5 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 5
20337: LESS
20338: IFFALSE 20356
// b := arm [ 1 ] else
20340: LD_ADDR_VAR 0 4
20344: PUSH
20345: LD_VAR 0 5
20349: PUSH
20350: LD_INT 1
20352: ARRAY
20353: ST_TO_ADDR
20354: GO 20370
// b := dep [ 1 ] ;
20356: LD_ADDR_VAR 0 4
20360: PUSH
20361: LD_VAR 0 6
20365: PUSH
20366: LD_INT 1
20368: ARRAY
20369: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20370: LD_VAR 0 2
20374: PPUSH
20375: LD_VAR 0 4
20379: PPUSH
20380: CALL_OW 180
// end ;
20384: GO 20298
20386: POP
20387: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20388: LD_ADDR_VAR 0 2
20392: PUSH
20393: LD_INT 22
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 25
20405: PUSH
20406: LD_INT 4
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PPUSH
20417: CALL_OW 69
20421: PUSH
20422: FOR_IN
20423: IFFALSE 20469
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20425: LD_VAR 0 2
20429: PPUSH
20430: LD_INT 22
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 8
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PPUSH
20454: CALL_OW 69
20458: PUSH
20459: LD_INT 1
20461: ARRAY
20462: PPUSH
20463: CALL_OW 120
20467: GO 20422
20469: POP
20470: POP
// end ;
20471: LD_VAR 0 1
20475: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20476: LD_INT 0
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
20482: PPUSH
20483: PPUSH
20484: PPUSH
20485: PPUSH
20486: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20487: LD_INT 22
20489: PUSH
20490: LD_VAR 0 1
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 21
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PPUSH
20513: CALL_OW 69
20517: PUSH
20518: LD_VAR 0 3
20522: LESSEQUAL
20523: IFFALSE 20667
// for i = 1 to vehCount do
20525: LD_ADDR_VAR 0 10
20529: PUSH
20530: DOUBLE
20531: LD_INT 1
20533: DEC
20534: ST_TO_ADDR
20535: LD_VAR 0 3
20539: PUSH
20540: FOR_TO
20541: IFFALSE 20665
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20543: LD_ADDR_VAR 0 12
20547: PUSH
20548: LD_VAR 0 5
20552: PUSH
20553: LD_INT 1
20555: PPUSH
20556: LD_VAR 0 5
20560: PPUSH
20561: CALL_OW 12
20565: ARRAY
20566: ST_TO_ADDR
// if randWeapon = 46 then
20567: LD_VAR 0 12
20571: PUSH
20572: LD_INT 46
20574: EQUAL
20575: IFFALSE 20620
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20577: LD_VAR 0 2
20581: PPUSH
20582: LD_INT 24
20584: PPUSH
20585: LD_VAR 0 6
20589: PPUSH
20590: LD_VAR 0 7
20594: PUSH
20595: LD_INT 1
20597: PPUSH
20598: LD_VAR 0 7
20602: PPUSH
20603: CALL_OW 12
20607: ARRAY
20608: PPUSH
20609: LD_VAR 0 12
20613: PPUSH
20614: CALL_OW 185
20618: GO 20663
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20620: LD_VAR 0 2
20624: PPUSH
20625: LD_VAR 0 8
20629: PPUSH
20630: LD_VAR 0 6
20634: PPUSH
20635: LD_VAR 0 7
20639: PUSH
20640: LD_INT 1
20642: PPUSH
20643: LD_VAR 0 7
20647: PPUSH
20648: CALL_OW 12
20652: ARRAY
20653: PPUSH
20654: LD_VAR 0 12
20658: PPUSH
20659: CALL_OW 185
// end ;
20663: GO 20540
20665: POP
20666: POP
// repeat wait ( 0 0$1 ) ;
20667: LD_INT 35
20669: PPUSH
20670: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20674: LD_INT 22
20676: PUSH
20677: LD_VAR 0 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 21
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 24
20698: PUSH
20699: LD_INT 250
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: PPUSH
20711: CALL_OW 69
20715: PUSH
20716: LD_VAR 0 3
20720: GREATEREQUAL
20721: IFFALSE 20667
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20723: LD_INT 22
20725: PUSH
20726: LD_VAR 0 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 21
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 24
20747: PUSH
20748: LD_INT 250
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: LIST
20759: PPUSH
20760: CALL_OW 69
20764: PUSH
20765: LD_VAR 0 3
20769: GREATEREQUAL
20770: IFFALSE 21113
// begin repeat begin wait ( 0 0$1 ) ;
20772: LD_INT 35
20774: PPUSH
20775: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20779: LD_INT 22
20781: PUSH
20782: LD_VAR 0 1
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 21
20793: PUSH
20794: LD_INT 2
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 24
20803: PUSH
20804: LD_INT 651
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: PPUSH
20816: CALL_OW 69
20820: PUSH
20821: LD_INT 0
20823: GREATER
20824: IFFALSE 21052
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20826: LD_ADDR_VAR 0 10
20830: PUSH
20831: LD_INT 22
20833: PUSH
20834: LD_VAR 0 1
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 21
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 24
20855: PUSH
20856: LD_INT 651
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: PPUSH
20868: CALL_OW 69
20872: PUSH
20873: FOR_IN
20874: IFFALSE 21050
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20876: LD_ADDR_VAR 0 16
20880: PUSH
20881: LD_INT 22
20883: PUSH
20884: LD_VAR 0 4
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PPUSH
20893: CALL_OW 69
20897: PPUSH
20898: LD_VAR 0 10
20902: PPUSH
20903: CALL_OW 74
20907: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20908: LD_ADDR_VAR 0 17
20912: PUSH
20913: LD_INT 22
20915: PUSH
20916: LD_VAR 0 4
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: LD_INT 59
20930: PUSH
20931: EMPTY
20932: LIST
20933: PUSH
20934: LD_INT 21
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 21
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: EMPTY
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: PPUSH
20972: LD_VAR 0 10
20976: PPUSH
20977: CALL_OW 74
20981: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20982: LD_VAR 0 10
20986: PPUSH
20987: LD_VAR 0 16
20991: PPUSH
20992: CALL_OW 296
20996: PUSH
20997: LD_INT 8
20999: PLUS
21000: PUSH
21001: LD_VAR 0 10
21005: PPUSH
21006: LD_VAR 0 17
21010: PPUSH
21011: CALL_OW 296
21015: LESS
21016: IFFALSE 21034
// begin ComAttackUnit ( i , target1 ) ;
21018: LD_VAR 0 10
21022: PPUSH
21023: LD_VAR 0 16
21027: PPUSH
21028: CALL_OW 115
// end else
21032: GO 21048
// begin ComAttackUnit ( i , target2 ) ;
21034: LD_VAR 0 10
21038: PPUSH
21039: LD_VAR 0 17
21043: PPUSH
21044: CALL_OW 115
// end ; end ;
21048: GO 20873
21050: POP
21051: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21052: LD_INT 22
21054: PUSH
21055: LD_VAR 0 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 21
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PPUSH
21078: CALL_OW 69
21082: PUSH
21083: LD_INT 0
21085: EQUAL
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_VAR 0 4
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: PPUSH
21102: CALL_OW 69
21106: PUSH
21107: LD_INT 0
21109: EQUAL
21110: OR
21111: IFFALSE 20772
// end ; end ;
21113: LD_VAR 0 9
21117: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
21122: PPUSH
21123: PPUSH
// r := 100 ;
21124: LD_ADDR_VAR 0 5
21128: PUSH
21129: LD_INT 100
21131: ST_TO_ADDR
// x := 0 ;
21132: LD_ADDR_VAR 0 6
21136: PUSH
21137: LD_INT 0
21139: ST_TO_ADDR
// while ( x < n ) do
21140: LD_VAR 0 6
21144: PUSH
21145: LD_VAR 0 2
21149: LESS
21150: IFFALSE 21437
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21152: LD_ADDR_VAR 0 4
21156: PUSH
21157: DOUBLE
21158: LD_INT 1
21160: DEC
21161: ST_TO_ADDR
21162: LD_VAR 0 1
21166: PPUSH
21167: LD_INT 0
21169: PPUSH
21170: CALL_OW 517
21174: PUSH
21175: LD_INT 1
21177: ARRAY
21178: PUSH
21179: FOR_TO
21180: IFFALSE 21433
// begin if r > 50 then
21182: LD_VAR 0 5
21186: PUSH
21187: LD_INT 50
21189: GREATER
21190: IFFALSE 21409
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21192: LD_VAR 0 1
21196: PPUSH
21197: LD_INT 0
21199: PPUSH
21200: CALL_OW 517
21204: PUSH
21205: LD_INT 1
21207: ARRAY
21208: PUSH
21209: LD_VAR 0 4
21213: ARRAY
21214: PPUSH
21215: LD_VAR 0 1
21219: PPUSH
21220: LD_INT 0
21222: PPUSH
21223: CALL_OW 517
21227: PUSH
21228: LD_INT 2
21230: ARRAY
21231: PUSH
21232: LD_VAR 0 4
21236: ARRAY
21237: PPUSH
21238: CALL_OW 458
21242: NOT
21243: IFFALSE 21393
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21245: LD_VAR 0 1
21249: PPUSH
21250: LD_INT 0
21252: PPUSH
21253: CALL_OW 517
21257: PUSH
21258: LD_INT 1
21260: ARRAY
21261: PUSH
21262: LD_VAR 0 4
21266: ARRAY
21267: PPUSH
21268: LD_VAR 0 1
21272: PPUSH
21273: LD_INT 0
21275: PPUSH
21276: CALL_OW 517
21280: PUSH
21281: LD_INT 2
21283: ARRAY
21284: PUSH
21285: LD_VAR 0 4
21289: ARRAY
21290: PPUSH
21291: LD_INT 5
21293: PPUSH
21294: LD_INT 0
21296: PPUSH
21297: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21301: LD_ADDR_EXP 50
21305: PUSH
21306: LD_EXP 50
21310: PPUSH
21311: LD_INT 1
21313: PPUSH
21314: LD_VAR 0 1
21318: PPUSH
21319: LD_INT 0
21321: PPUSH
21322: CALL_OW 517
21326: PUSH
21327: LD_INT 1
21329: ARRAY
21330: PUSH
21331: LD_VAR 0 4
21335: ARRAY
21336: PUSH
21337: LD_VAR 0 1
21341: PPUSH
21342: LD_INT 0
21344: PPUSH
21345: CALL_OW 517
21349: PUSH
21350: LD_INT 2
21352: ARRAY
21353: PUSH
21354: LD_VAR 0 4
21358: ARRAY
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PPUSH
21364: CALL_OW 2
21368: ST_TO_ADDR
// r := 0 ;
21369: LD_ADDR_VAR 0 5
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// x := x + 1 ;
21377: LD_ADDR_VAR 0 6
21381: PUSH
21382: LD_VAR 0 6
21386: PUSH
21387: LD_INT 1
21389: PLUS
21390: ST_TO_ADDR
// end else
21391: GO 21407
// r := r + 35 ;
21393: LD_ADDR_VAR 0 5
21397: PUSH
21398: LD_VAR 0 5
21402: PUSH
21403: LD_INT 35
21405: PLUS
21406: ST_TO_ADDR
// end else
21407: GO 21431
// r := r + rand ( 10 , 25 ) ;
21409: LD_ADDR_VAR 0 5
21413: PUSH
21414: LD_VAR 0 5
21418: PUSH
21419: LD_INT 10
21421: PPUSH
21422: LD_INT 25
21424: PPUSH
21425: CALL_OW 12
21429: PLUS
21430: ST_TO_ADDR
// end ;
21431: GO 21179
21433: POP
21434: POP
21435: GO 21140
// end ; end_of_file
21437: LD_VAR 0 3
21441: RET
// every 0 0$1 trigger russianAI = 1 do
21442: LD_EXP 39
21446: PUSH
21447: LD_INT 1
21449: EQUAL
21450: IFFALSE 21669
21452: GO 21454
21454: DISABLE
// begin enable ;
21455: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21456: LD_INT 3
21458: PPUSH
21459: LD_EXP 30
21463: PPUSH
21464: CALL 15920 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21468: LD_INT 3
21470: PPUSH
21471: LD_EXP 42
21475: PPUSH
21476: CALL 16280 0 2
// if ruPossition = 1 then
21480: LD_EXP 41
21484: PUSH
21485: LD_INT 1
21487: EQUAL
21488: IFFALSE 21543
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21490: LD_INT 3
21492: PPUSH
21493: LD_INT 13
21495: PPUSH
21496: LD_INT 10
21498: PPUSH
21499: LD_INT 22
21501: PUSH
21502: LD_INT 3
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 21
21511: PUSH
21512: LD_INT 3
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 30
21521: PUSH
21522: LD_INT 8
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: PPUSH
21534: CALL_OW 69
21538: PPUSH
21539: CALL 16486 0 4
// if ruPossition = 2 then
21543: LD_EXP 41
21547: PUSH
21548: LD_INT 2
21550: EQUAL
21551: IFFALSE 21606
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21553: LD_INT 3
21555: PPUSH
21556: LD_INT 14
21558: PPUSH
21559: LD_INT 11
21561: PPUSH
21562: LD_INT 22
21564: PUSH
21565: LD_INT 3
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 21
21574: PUSH
21575: LD_INT 3
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 8
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: LIST
21596: PPUSH
21597: CALL_OW 69
21601: PPUSH
21602: CALL 16486 0 4
// if ruPossition = 3 then
21606: LD_EXP 41
21610: PUSH
21611: LD_INT 3
21613: EQUAL
21614: IFFALSE 21669
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21616: LD_INT 3
21618: PPUSH
21619: LD_INT 15
21621: PPUSH
21622: LD_INT 12
21624: PPUSH
21625: LD_INT 22
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 21
21637: PUSH
21638: LD_INT 3
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 30
21647: PUSH
21648: LD_INT 8
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 69
21664: PPUSH
21665: CALL 16486 0 4
// end ;
21669: END
// every 0 0$1 do
21670: GO 21672
21672: DISABLE
// begin enable ;
21673: ENABLE
// if ruPossition = 1 then
21674: LD_EXP 41
21678: PUSH
21679: LD_INT 1
21681: EQUAL
21682: IFFALSE 21694
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21684: LD_INT 3
21686: PPUSH
21687: LD_INT 10
21689: PPUSH
21690: CALL 15557 0 2
// if ruPossition = 2 then
21694: LD_EXP 41
21698: PUSH
21699: LD_INT 2
21701: EQUAL
21702: IFFALSE 21714
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21704: LD_INT 3
21706: PPUSH
21707: LD_INT 11
21709: PPUSH
21710: CALL 15557 0 2
// if ruPossition = 3 then
21714: LD_EXP 41
21718: PUSH
21719: LD_INT 3
21721: EQUAL
21722: IFFALSE 21734
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21724: LD_INT 3
21726: PPUSH
21727: LD_INT 12
21729: PPUSH
21730: CALL 15557 0 2
// IntBazooka ( 3 , 1 ) ;
21734: LD_INT 3
21736: PPUSH
21737: LD_INT 1
21739: PPUSH
21740: CALL 14356 0 2
// IntBazooka ( 6 , 1 ) ;
21744: LD_INT 6
21746: PPUSH
21747: LD_INT 1
21749: PPUSH
21750: CALL 14356 0 2
// end ;
21754: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21755: LD_EXP 39
21759: PUSH
21760: LD_INT 1
21762: EQUAL
21763: PUSH
21764: LD_EXP 35
21768: PPUSH
21769: CALL_OW 302
21773: AND
21774: PUSH
21775: LD_EXP 35
21779: PPUSH
21780: CALL_OW 255
21784: PUSH
21785: LD_INT 3
21787: EQUAL
21788: AND
21789: PUSH
21790: LD_INT 22
21792: PUSH
21793: LD_INT 3
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 21
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 33
21812: PUSH
21813: LD_INT 3
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: PPUSH
21825: CALL_OW 69
21829: PUSH
21830: LD_INT 0
21832: EQUAL
21833: AND
21834: IFFALSE 22042
21836: GO 21838
21838: DISABLE
// begin enable ;
21839: ENABLE
// if Difficulty = 1 then
21840: LD_OWVAR 67
21844: PUSH
21845: LD_INT 1
21847: EQUAL
21848: IFFALSE 21910
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21850: LD_INT 3
21852: PPUSH
21853: LD_EXP 35
21857: PPUSH
21858: LD_INT 5
21860: PPUSH
21861: LD_INT 8
21863: PPUSH
21864: CALL_OW 12
21868: PPUSH
21869: LD_INT 1
21871: PPUSH
21872: LD_INT 43
21874: PUSH
21875: LD_INT 44
21877: PUSH
21878: LD_INT 45
21880: PUSH
21881: LD_INT 46
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: LD_INT 3
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PPUSH
21903: LD_INT 22
21905: PPUSH
21906: CALL 20476 0 8
// if Difficulty = 2 then
21910: LD_OWVAR 67
21914: PUSH
21915: LD_INT 2
21917: EQUAL
21918: IFFALSE 21976
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21920: LD_INT 3
21922: PPUSH
21923: LD_EXP 35
21927: PPUSH
21928: LD_INT 6
21930: PPUSH
21931: LD_INT 8
21933: PPUSH
21934: CALL_OW 12
21938: PPUSH
21939: LD_INT 1
21941: PPUSH
21942: LD_INT 44
21944: PUSH
21945: LD_INT 45
21947: PUSH
21948: LD_INT 46
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: PPUSH
21956: LD_INT 1
21958: PPUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 3
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PPUSH
21969: LD_INT 22
21971: PPUSH
21972: CALL 20476 0 8
// if Difficulty = 3 then
21976: LD_OWVAR 67
21980: PUSH
21981: LD_INT 3
21983: EQUAL
21984: IFFALSE 22042
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21986: LD_INT 3
21988: PPUSH
21989: LD_EXP 35
21993: PPUSH
21994: LD_INT 7
21996: PPUSH
21997: LD_INT 8
21999: PPUSH
22000: CALL_OW 12
22004: PPUSH
22005: LD_INT 1
22007: PPUSH
22008: LD_INT 44
22010: PUSH
22011: LD_INT 45
22013: PUSH
22014: LD_INT 46
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: PPUSH
22022: LD_INT 1
22024: PPUSH
22025: LD_INT 3
22027: PUSH
22028: LD_INT 3
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PPUSH
22035: LD_INT 22
22037: PPUSH
22038: CALL 20476 0 8
// end ;
22042: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22043: LD_EXP 50
22047: PUSH
22048: LD_EXP 49
22052: AND
22053: IFFALSE 22174
22055: GO 22057
22057: DISABLE
22058: LD_INT 0
22060: PPUSH
// begin enable ;
22061: ENABLE
// for i in arabianMines do
22062: LD_ADDR_VAR 0 1
22066: PUSH
22067: LD_EXP 50
22071: PUSH
22072: FOR_IN
22073: IFFALSE 22172
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22075: LD_INT 22
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 92
22087: PUSH
22088: LD_VAR 0 1
22092: PUSH
22093: LD_INT 1
22095: ARRAY
22096: PUSH
22097: LD_VAR 0 1
22101: PUSH
22102: LD_INT 2
22104: ARRAY
22105: PUSH
22106: LD_INT 3
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PPUSH
22119: CALL_OW 69
22123: IFFALSE 22170
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22125: LD_VAR 0 1
22129: PUSH
22130: LD_INT 1
22132: ARRAY
22133: PPUSH
22134: LD_VAR 0 1
22138: PUSH
22139: LD_INT 2
22141: ARRAY
22142: PPUSH
22143: LD_INT 5
22145: PPUSH
22146: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22150: LD_ADDR_EXP 50
22154: PUSH
22155: LD_EXP 50
22159: PPUSH
22160: LD_VAR 0 1
22164: PPUSH
22165: CALL_OW 3
22169: ST_TO_ADDR
// end ; end ;
22170: GO 22072
22172: POP
22173: POP
// end ; end_of_file
22174: PPOPN 1
22176: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22177: LD_VAR 0 1
22181: PPUSH
22182: CALL_OW 255
22186: PUSH
22187: LD_INT 4
22189: EQUAL
22190: IFFALSE 22204
// SetBName ( building , epsilon ) ;
22192: LD_VAR 0 1
22196: PPUSH
22197: LD_STRING epsilon
22199: PPUSH
22200: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22204: LD_VAR 0 1
22208: PPUSH
22209: CALL_OW 255
22213: PUSH
22214: LD_INT 1
22216: EQUAL
22217: PUSH
22218: LD_VAR 0 1
22222: PPUSH
22223: CALL_OW 266
22227: PUSH
22228: LD_INT 0
22230: EQUAL
22231: AND
22232: IFFALSE 22246
// SetBName ( building , epsilon ) ;
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_STRING epsilon
22241: PPUSH
22242: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22246: LD_VAR 0 1
22250: PPUSH
22251: CALL_OW 255
22255: PUSH
22256: LD_INT 3
22258: EQUAL
22259: PUSH
22260: LD_VAR 0 1
22264: PPUSH
22265: CALL_OW 266
22269: PUSH
22270: LD_INT 0
22272: EQUAL
22273: AND
22274: IFFALSE 22288
// SetBName ( building , chuikov ) ;
22276: LD_VAR 0 1
22280: PPUSH
22281: LD_STRING chuikov
22283: PPUSH
22284: CALL_OW 500
// if GetSide ( building ) = 2 then
22288: LD_VAR 0 1
22292: PPUSH
22293: CALL_OW 255
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: IFFALSE 22357
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 266
22312: PUSH
22313: LD_INT 6
22315: EQUAL
22316: PUSH
22317: LD_VAR 0 1
22321: PPUSH
22322: CALL_OW 266
22326: PUSH
22327: LD_INT 9
22329: EQUAL
22330: OR
22331: IFFALSE 22357
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22333: LD_VAR 0 1
22337: PPUSH
22338: LD_INT 10
22340: PPUSH
22341: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22345: LD_VAR 0 1
22349: PPUSH
22350: LD_INT 11
22352: PPUSH
22353: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 255
22366: PUSH
22367: LD_INT 3
22369: EQUAL
22370: IFFALSE 22404
// begin ruDepotConstructed := true ;
22372: LD_ADDR_EXP 57
22376: PUSH
22377: LD_INT 1
22379: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22380: LD_VAR 0 1
22384: PPUSH
22385: CALL_OW 266
22389: PUSH
22390: LD_INT 2
22392: EQUAL
22393: IFFALSE 22404
// AddComUpgrade ( building ) ;
22395: LD_VAR 0 1
22399: PPUSH
22400: CALL_OW 206
// end ; end ;
22404: PPOPN 2
22406: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22407: LD_INT 0
22409: PPUSH
22410: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22411: LD_VAR 0 1
22415: PUSH
22416: LD_INT 22
22418: PUSH
22419: LD_INT 3
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 23
22428: PUSH
22429: LD_INT 3
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 21
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: PPUSH
22451: CALL_OW 69
22455: IN
22456: PUSH
22457: LD_EXP 61
22461: NOT
22462: AND
22463: IFFALSE 22494
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22465: LD_ADDR_EXP 61
22469: PUSH
22470: LD_VAR 0 1
22474: PPUSH
22475: CALL_OW 250
22479: PUSH
22480: LD_VAR 0 1
22484: PPUSH
22485: CALL_OW 251
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: ST_TO_ADDR
// end ;
22494: PPOPN 3
22496: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22497: LD_VAR 0 2
22501: PPUSH
22502: CALL_OW 255
22506: PUSH
22507: LD_INT 3
22509: EQUAL
22510: PUSH
22511: LD_EXP 35
22515: PPUSH
22516: CALL_OW 255
22520: PUSH
22521: LD_INT 3
22523: EQUAL
22524: AND
22525: PUSH
22526: LD_EXP 35
22530: PPUSH
22531: CALL_OW 302
22535: AND
22536: IFFALSE 22552
// ComEnterUnit ( human , ruFab ) ;
22538: LD_VAR 0 2
22542: PPUSH
22543: LD_EXP 35
22547: PPUSH
22548: CALL_OW 120
// end ;
22552: PPOPN 2
22554: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22555: LD_INT 0
22557: PPUSH
22558: PPUSH
22559: PPUSH
22560: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22561: LD_VAR 0 1
22565: PPUSH
22566: CALL_OW 255
22570: PUSH
22571: LD_INT 1
22573: EQUAL
22574: PUSH
22575: LD_EXP 65
22579: PUSH
22580: LD_INT 0
22582: EQUAL
22583: AND
22584: IFFALSE 22786
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22586: LD_VAR 0 1
22590: PPUSH
22591: CALL_OW 266
22595: PUSH
22596: LD_INT 26
22598: EQUAL
22599: PUSH
22600: LD_VAR 0 1
22604: PPUSH
22605: CALL_OW 266
22609: PUSH
22610: LD_INT 27
22612: EQUAL
22613: OR
22614: PUSH
22615: LD_VAR 0 1
22619: PPUSH
22620: CALL_OW 266
22624: PUSH
22625: LD_INT 28
22627: EQUAL
22628: OR
22629: IFFALSE 22786
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22631: LD_INT 22
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 30
22646: PUSH
22647: LD_INT 7
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 30
22656: PUSH
22657: LD_INT 8
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PPUSH
22673: CALL_OW 69
22677: PUSH
22678: LD_INT 0
22680: GREATER
22681: IFFALSE 22786
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22683: LD_ADDR_VAR 0 2
22687: PUSH
22688: LD_INT 22
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 30
22703: PUSH
22704: LD_INT 7
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 30
22713: PUSH
22714: LD_INT 8
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PPUSH
22730: CALL_OW 69
22734: PUSH
22735: FOR_IN
22736: IFFALSE 22784
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22738: LD_VAR 0 2
22742: PPUSH
22743: LD_INT 1
22745: PPUSH
22746: CALL_OW 268
22750: PUSH
22751: LD_INT 11
22753: EQUAL
22754: PUSH
22755: LD_VAR 0 2
22759: PPUSH
22760: LD_INT 2
22762: PPUSH
22763: CALL_OW 268
22767: PUSH
22768: LD_INT 11
22770: EQUAL
22771: OR
22772: IFFALSE 22782
// eventVar1 = 1 ;
22774: LD_ADDR_EXP 65
22778: PUSH
22779: LD_INT 1
22781: ST_TO_ADDR
22782: GO 22735
22784: POP
22785: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 255
22795: PUSH
22796: LD_INT 3
22798: EQUAL
22799: IFFALSE 23279
// begin if GetBType ( building ) = b_depot then
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 266
22810: PUSH
22811: LD_INT 0
22813: EQUAL
22814: IFFALSE 22886
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22816: LD_VAR 0 1
22820: PPUSH
22821: CALL_OW 274
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: LD_INT 5000
22831: PPUSH
22832: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
22836: LD_VAR 0 1
22840: PPUSH
22841: CALL_OW 274
22845: PPUSH
22846: LD_INT 2
22848: PPUSH
22849: LD_INT 300
22851: PPUSH
22852: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 274
22865: PPUSH
22866: LD_INT 3
22868: PPUSH
22869: LD_INT 100
22871: PPUSH
22872: CALL_OW 277
// ruDepot = building ;
22876: LD_ADDR_EXP 30
22880: PUSH
22881: LD_VAR 0 1
22885: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22886: LD_VAR 0 1
22890: PPUSH
22891: CALL_OW 266
22895: PUSH
22896: LD_INT 0
22898: EQUAL
22899: PUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 266
22909: PUSH
22910: LD_INT 2
22912: EQUAL
22913: OR
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 266
22924: PUSH
22925: LD_INT 4
22927: EQUAL
22928: OR
22929: IFFALSE 22940
// ComUpgrade ( building ) ;
22931: LD_VAR 0 1
22935: PPUSH
22936: CALL_OW 146
// if GetBType ( building ) = b_lab then
22940: LD_VAR 0 1
22944: PPUSH
22945: CALL_OW 266
22949: PUSH
22950: LD_INT 6
22952: EQUAL
22953: IFFALSE 23156
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
22955: LD_INT 22
22957: PUSH
22958: LD_INT 3
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 30
22967: PUSH
22968: LD_INT 8
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PPUSH
22979: CALL_OW 69
22983: PUSH
22984: LD_INT 0
22986: EQUAL
22987: IFFALSE 23025
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22989: LD_VAR 0 1
22993: PPUSH
22994: LD_INT 10
22996: PPUSH
22997: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: LD_INT 12
23008: PPUSH
23009: CALL_OW 207
// ruLab1 = building ;
23013: LD_ADDR_EXP 31
23017: PUSH
23018: LD_VAR 0 1
23022: ST_TO_ADDR
// end else
23023: GO 23059
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23025: LD_VAR 0 1
23029: PPUSH
23030: LD_INT 11
23032: PPUSH
23033: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_INT 14
23044: PPUSH
23045: CALL_OW 207
// ruLab2 = building ;
23049: LD_ADDR_EXP 32
23053: PUSH
23054: LD_VAR 0 1
23058: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23059: LD_INT 3
23061: PPUSH
23062: LD_VAR 0 1
23066: PPUSH
23067: LD_INT 3
23069: PPUSH
23070: CALL 15472 0 3
// if ruDestroyedBuildings > 0 then
23074: LD_EXP 42
23078: PUSH
23079: LD_INT 0
23081: GREATER
23082: IFFALSE 23156
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23084: LD_ADDR_EXP 42
23088: PUSH
23089: LD_EXP 42
23093: PPUSH
23094: LD_INT 1
23096: PPUSH
23097: CALL_OW 3
23101: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23102: LD_ADDR_EXP 42
23106: PUSH
23107: LD_EXP 42
23111: PPUSH
23112: LD_INT 1
23114: PPUSH
23115: CALL_OW 3
23119: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23120: LD_ADDR_EXP 42
23124: PUSH
23125: LD_EXP 42
23129: PPUSH
23130: LD_INT 1
23132: PPUSH
23133: CALL_OW 3
23137: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23138: LD_ADDR_EXP 42
23142: PUSH
23143: LD_EXP 42
23147: PPUSH
23148: LD_INT 1
23150: PPUSH
23151: CALL_OW 3
23155: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23156: LD_VAR 0 1
23160: PPUSH
23161: CALL_OW 266
23165: PUSH
23166: LD_INT 32
23168: EQUAL
23169: IFFALSE 23206
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_INT 44
23178: PUSH
23179: LD_INT 45
23181: PUSH
23182: LD_INT 46
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 1
23192: PPUSH
23193: LD_INT 3
23195: PPUSH
23196: CALL_OW 12
23200: ARRAY
23201: PPUSH
23202: CALL_OW 208
// if GetBType ( building ) = b_turret then
23206: LD_VAR 0 1
23210: PPUSH
23211: CALL_OW 266
23215: PUSH
23216: LD_INT 33
23218: EQUAL
23219: IFFALSE 23256
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23221: LD_VAR 0 1
23225: PPUSH
23226: LD_INT 44
23228: PUSH
23229: LD_INT 45
23231: PUSH
23232: LD_INT 46
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: PPUSH
23243: LD_INT 3
23245: PPUSH
23246: CALL_OW 12
23250: ARRAY
23251: PPUSH
23252: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23256: LD_VAR 0 1
23260: PPUSH
23261: CALL_OW 266
23265: PUSH
23266: LD_INT 24
23268: EQUAL
23269: IFFALSE 23279
// russianAI = 1 ;
23271: LD_ADDR_EXP 39
23275: PUSH
23276: LD_INT 1
23278: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23279: LD_VAR 0 1
23283: PPUSH
23284: CALL_OW 255
23288: PUSH
23289: LD_INT 2
23291: EQUAL
23292: IFFALSE 24171
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23294: LD_VAR 0 1
23298: PPUSH
23299: CALL_OW 266
23303: PUSH
23304: LD_EXP 68
23308: PUSH
23309: LD_INT 1
23311: ARRAY
23312: PUSH
23313: LD_INT 1
23315: ARRAY
23316: EQUAL
23317: IFFALSE 23444
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23319: LD_ADDR_EXP 68
23323: PUSH
23324: LD_EXP 68
23328: PPUSH
23329: LD_INT 1
23331: PPUSH
23332: CALL_OW 3
23336: ST_TO_ADDR
// if arBuildingsTab then
23337: LD_EXP 68
23341: IFFALSE 23444
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23343: LD_ADDR_VAR 0 3
23347: PUSH
23348: LD_INT 22
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 25
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PPUSH
23372: CALL_OW 69
23376: ST_TO_ADDR
// if engineers then
23377: LD_VAR 0 3
23381: IFFALSE 23444
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23383: LD_VAR 0 3
23387: PPUSH
23388: LD_EXP 68
23392: PUSH
23393: LD_INT 1
23395: ARRAY
23396: PUSH
23397: LD_INT 1
23399: ARRAY
23400: PPUSH
23401: LD_EXP 68
23405: PUSH
23406: LD_INT 1
23408: ARRAY
23409: PUSH
23410: LD_INT 2
23412: ARRAY
23413: PPUSH
23414: LD_EXP 68
23418: PUSH
23419: LD_INT 1
23421: ARRAY
23422: PUSH
23423: LD_INT 3
23425: ARRAY
23426: PPUSH
23427: LD_EXP 68
23431: PUSH
23432: LD_INT 1
23434: ARRAY
23435: PUSH
23436: LD_INT 4
23438: ARRAY
23439: PPUSH
23440: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23444: LD_VAR 0 1
23448: PPUSH
23449: CALL_OW 266
23453: PUSH
23454: LD_INT 31
23456: EQUAL
23457: IFFALSE 23603
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23459: LD_ADDR_VAR 0 4
23463: PUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: LD_INT 25
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 25
23489: PUSH
23490: LD_INT 8
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PPUSH
23506: CALL_OW 69
23510: PUSH
23511: LD_EXP 26
23515: DIFF
23516: ST_TO_ADDR
// if not sol then
23517: LD_VAR 0 4
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 24171
// for i in sol do
23526: LD_ADDR_VAR 0 2
23530: PUSH
23531: LD_VAR 0 4
23535: PUSH
23536: FOR_IN
23537: IFFALSE 23601
// if not GetTag ( i ) then
23539: LD_VAR 0 2
23543: PPUSH
23544: CALL_OW 110
23548: NOT
23549: IFFALSE 23599
// begin if IsInUnit ( i ) then
23551: LD_VAR 0 2
23555: PPUSH
23556: CALL_OW 310
23560: IFFALSE 23571
// ComExitBuilding ( i ) ;
23562: LD_VAR 0 2
23566: PPUSH
23567: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23571: LD_VAR 0 2
23575: PPUSH
23576: LD_VAR 0 1
23580: PPUSH
23581: CALL_OW 180
// SetTag ( i , 11 ) ;
23585: LD_VAR 0 2
23589: PPUSH
23590: LD_INT 11
23592: PPUSH
23593: CALL_OW 109
// break ;
23597: GO 23601
// end ;
23599: GO 23536
23601: POP
23602: POP
// end ; if GetBType ( building ) = b_depot then
23603: LD_VAR 0 1
23607: PPUSH
23608: CALL_OW 266
23612: PUSH
23613: LD_INT 0
23615: EQUAL
23616: IFFALSE 23702
// begin arDepot = building ;
23618: LD_ADDR_EXP 43
23622: PUSH
23623: LD_VAR 0 1
23627: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23628: LD_INT 38
23630: PUSH
23631: LD_INT 47
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PPUSH
23638: LD_INT 71
23640: PPUSH
23641: LD_INT 19
23643: PPUSH
23644: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23648: LD_VAR 0 1
23652: PPUSH
23653: CALL_OW 274
23657: PPUSH
23658: LD_INT 1
23660: PPUSH
23661: LD_INT 500
23663: PPUSH
23664: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23668: LD_VAR 0 1
23672: PPUSH
23673: CALL_OW 274
23677: PPUSH
23678: LD_INT 3
23680: PPUSH
23681: LD_INT 30
23683: PPUSH
23684: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23688: LD_EXP 26
23692: PPUSH
23693: LD_VAR 0 1
23697: PPUSH
23698: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 266
23711: PUSH
23712: LD_INT 6
23714: EQUAL
23715: PUSH
23716: LD_VAR 0 1
23720: PPUSH
23721: CALL_OW 266
23725: PUSH
23726: LD_INT 9
23728: EQUAL
23729: OR
23730: IFFALSE 23781
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23732: LD_VAR 0 1
23736: PPUSH
23737: LD_INT 10
23739: PPUSH
23740: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23744: LD_VAR 0 1
23748: PPUSH
23749: LD_INT 11
23751: PPUSH
23752: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23756: LD_INT 2
23758: PPUSH
23759: LD_VAR 0 1
23763: PPUSH
23764: LD_INT 2
23766: PPUSH
23767: CALL 15472 0 3
// arLab = building ;
23771: LD_ADDR_EXP 44
23775: PUSH
23776: LD_VAR 0 1
23780: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 266
23790: PUSH
23791: LD_INT 2
23793: EQUAL
23794: PUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 266
23804: PUSH
23805: LD_INT 4
23807: EQUAL
23808: OR
23809: IFFALSE 23880
// begin ComUpgrade ( building ) ;
23811: LD_VAR 0 1
23815: PPUSH
23816: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23820: LD_VAR 0 1
23824: PPUSH
23825: CALL_OW 266
23829: PUSH
23830: LD_INT 4
23832: EQUAL
23833: IFFALSE 23880
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
23835: LD_INT 22
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 25
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 69
23863: PUSH
23864: LD_EXP 26
23868: DIFF
23869: PPUSH
23870: LD_INT 75
23872: PPUSH
23873: LD_INT 21
23875: PPUSH
23876: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
23880: LD_VAR 0 1
23884: PPUSH
23885: CALL_OW 266
23889: PUSH
23890: LD_INT 27
23892: EQUAL
23893: IFFALSE 24171
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
23895: LD_INT 22
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 30
23907: PUSH
23908: LD_INT 27
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PPUSH
23919: CALL_OW 69
23923: PUSH
23924: LD_INT 2
23926: EQUAL
23927: IFFALSE 24171
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
23929: LD_ADDR_VAR 0 2
23933: PUSH
23934: LD_INT 22
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 21
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 2
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: PPUSH
23969: CALL_OW 69
23973: PUSH
23974: LD_INT 1
23976: ARRAY
23977: ST_TO_ADDR
// if not i then
23978: LD_VAR 0 2
23982: NOT
23983: IFFALSE 23987
// exit ;
23985: GO 24171
// AddComMoveXY ( i , 92 , 34 ) ;
23987: LD_VAR 0 2
23991: PPUSH
23992: LD_INT 92
23994: PPUSH
23995: LD_INT 34
23997: PPUSH
23998: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24002: LD_VAR 0 2
24006: PPUSH
24007: LD_INT 35
24009: PPUSH
24010: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24014: LD_VAR 0 2
24018: PPUSH
24019: LD_INT 101
24021: PPUSH
24022: LD_INT 20
24024: PPUSH
24025: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24029: LD_VAR 0 2
24033: PPUSH
24034: LD_INT 35
24036: PPUSH
24037: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24041: LD_VAR 0 2
24045: PPUSH
24046: LD_INT 115
24048: PPUSH
24049: LD_INT 30
24051: PPUSH
24052: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24056: LD_VAR 0 2
24060: PPUSH
24061: LD_INT 35
24063: PPUSH
24064: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24068: LD_VAR 0 2
24072: PPUSH
24073: LD_INT 82
24075: PPUSH
24076: LD_INT 57
24078: PPUSH
24079: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24083: LD_VAR 0 2
24087: PPUSH
24088: LD_INT 35
24090: PPUSH
24091: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24095: LD_VAR 0 2
24099: PPUSH
24100: LD_INT 36
24102: PPUSH
24103: LD_INT 28
24105: PPUSH
24106: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24110: LD_VAR 0 2
24114: PPUSH
24115: LD_INT 70
24117: PPUSH
24118: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24122: LD_INT 22
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 21
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 25
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: PPUSH
24157: CALL_OW 69
24161: PPUSH
24162: LD_EXP 43
24166: PPUSH
24167: CALL_OW 180
// end ; end ; end ;
24171: PPOPN 5
24173: END
// on UpgradeComplete ( building ) do var i ;
24174: LD_INT 0
24176: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24177: LD_VAR 0 1
24181: PPUSH
24182: CALL_OW 255
24186: PUSH
24187: LD_INT 1
24189: EQUAL
24190: PUSH
24191: LD_EXP 65
24195: PUSH
24196: LD_INT 0
24198: EQUAL
24199: AND
24200: IFFALSE 24398
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24202: LD_VAR 0 1
24206: PPUSH
24207: CALL_OW 266
24211: PUSH
24212: LD_INT 7
24214: EQUAL
24215: PUSH
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL_OW 266
24225: PUSH
24226: LD_INT 8
24228: EQUAL
24229: OR
24230: IFFALSE 24398
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24232: LD_INT 22
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: LD_INT 30
24247: PUSH
24248: LD_INT 26
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 30
24257: PUSH
24258: LD_INT 27
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 30
24267: PUSH
24268: LD_INT 28
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 69
24289: PUSH
24290: LD_INT 0
24292: GREATER
24293: IFFALSE 24398
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24295: LD_ADDR_VAR 0 2
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: LD_INT 30
24315: PUSH
24316: LD_INT 7
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 30
24325: PUSH
24326: LD_INT 8
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PPUSH
24342: CALL_OW 69
24346: PUSH
24347: FOR_IN
24348: IFFALSE 24396
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24350: LD_VAR 0 2
24354: PPUSH
24355: LD_INT 1
24357: PPUSH
24358: CALL_OW 268
24362: PUSH
24363: LD_INT 11
24365: EQUAL
24366: PUSH
24367: LD_VAR 0 2
24371: PPUSH
24372: LD_INT 2
24374: PPUSH
24375: CALL_OW 268
24379: PUSH
24380: LD_INT 11
24382: EQUAL
24383: OR
24384: IFFALSE 24394
// eventVar1 = 1 ;
24386: LD_ADDR_EXP 65
24390: PUSH
24391: LD_INT 1
24393: ST_TO_ADDR
24394: GO 24347
24396: POP
24397: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL_OW 255
24407: PUSH
24408: LD_INT 2
24410: EQUAL
24411: IFFALSE 24516
// begin if GetBType ( building ) = b_barracks then
24413: LD_VAR 0 1
24417: PPUSH
24418: CALL_OW 266
24422: PUSH
24423: LD_INT 5
24425: EQUAL
24426: IFFALSE 24516
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 25
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 3
24455: PUSH
24456: LD_INT 54
24458: PUSH
24459: EMPTY
24460: LIST
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: PPUSH
24471: CALL_OW 69
24475: PUSH
24476: LD_EXP 26
24480: PUSH
24481: EMPTY
24482: LIST
24483: DIFF
24484: PUSH
24485: FOR_IN
24486: IFFALSE 24504
// ComEnterUnit ( i , building ) ;
24488: LD_VAR 0 2
24492: PPUSH
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 120
24502: GO 24485
24504: POP
24505: POP
// arArm = building ;
24506: LD_ADDR_EXP 45
24510: PUSH
24511: LD_VAR 0 1
24515: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 255
24525: PUSH
24526: LD_INT 3
24528: EQUAL
24529: IFFALSE 25002
// begin if GetBType ( building ) = b_factory then
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL_OW 266
24540: PUSH
24541: LD_INT 3
24543: EQUAL
24544: IFFALSE 24611
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24546: LD_ADDR_VAR 0 2
24550: PUSH
24551: LD_INT 22
24553: PUSH
24554: LD_INT 3
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 25
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PPUSH
24575: CALL_OW 69
24579: PUSH
24580: FOR_IN
24581: IFFALSE 24599
// ComEnterUnit ( i , building ) ;
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 120
24597: GO 24580
24599: POP
24600: POP
// ruFab = building ;
24601: LD_ADDR_EXP 35
24605: PUSH
24606: LD_VAR 0 1
24610: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24611: LD_INT 22
24613: PUSH
24614: LD_INT 3
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 3
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 30
24633: PUSH
24634: LD_INT 8
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 69
24650: PUSH
24651: LD_INT 2
24653: EQUAL
24654: IFFALSE 24862
// begin for i = 1 to 2 do
24656: LD_ADDR_VAR 0 2
24660: PUSH
24661: DOUBLE
24662: LD_INT 1
24664: DEC
24665: ST_TO_ADDR
24666: LD_INT 2
24668: PUSH
24669: FOR_TO
24670: IFFALSE 24757
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24672: LD_INT 22
24674: PUSH
24675: LD_INT 3
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 25
24684: PUSH
24685: LD_INT 4
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PPUSH
24696: CALL_OW 69
24700: PUSH
24701: LD_VAR 0 2
24705: ARRAY
24706: PPUSH
24707: LD_INT 22
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 21
24719: PUSH
24720: LD_INT 3
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 30
24729: PUSH
24730: LD_INT 8
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: PPUSH
24742: CALL_OW 69
24746: PUSH
24747: LD_INT 1
24749: ARRAY
24750: PPUSH
24751: CALL_OW 120
24755: GO 24669
24757: POP
24758: POP
// for i = 3 to 4 do
24759: LD_ADDR_VAR 0 2
24763: PUSH
24764: DOUBLE
24765: LD_INT 3
24767: DEC
24768: ST_TO_ADDR
24769: LD_INT 4
24771: PUSH
24772: FOR_TO
24773: IFFALSE 24860
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24775: LD_INT 22
24777: PUSH
24778: LD_INT 3
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 25
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL_OW 69
24803: PUSH
24804: LD_VAR 0 2
24808: ARRAY
24809: PPUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 8
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: PPUSH
24845: CALL_OW 69
24849: PUSH
24850: LD_INT 2
24852: ARRAY
24853: PPUSH
24854: CALL_OW 120
24858: GO 24772
24860: POP
24861: POP
// end ; if GetBType ( building ) = b_barracks then
24862: LD_VAR 0 1
24866: PPUSH
24867: CALL_OW 266
24871: PUSH
24872: LD_INT 5
24874: EQUAL
24875: IFFALSE 25002
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
24877: LD_ADDR_VAR 0 2
24881: PUSH
24882: LD_INT 22
24884: PUSH
24885: LD_INT 3
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 25
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 3
24904: PUSH
24905: LD_INT 54
24907: PUSH
24908: EMPTY
24909: LIST
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: PPUSH
24920: CALL_OW 69
24924: PUSH
24925: FOR_IN
24926: IFFALSE 24944
// ComEnterUnit ( i , building ) ;
24928: LD_VAR 0 2
24932: PPUSH
24933: LD_VAR 0 1
24937: PPUSH
24938: CALL_OW 120
24942: GO 24925
24944: POP
24945: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
24946: LD_INT 22
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 30
24958: PUSH
24959: LD_INT 5
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PPUSH
24970: CALL_OW 69
24974: PUSH
24975: LD_INT 0
24977: EQUAL
24978: IFFALSE 24992
// ruArm1 = building else
24980: LD_ADDR_EXP 33
24984: PUSH
24985: LD_VAR 0 1
24989: ST_TO_ADDR
24990: GO 25002
// ruArm2 = building ;
24992: LD_ADDR_EXP 34
24996: PUSH
24997: LD_VAR 0 1
25001: ST_TO_ADDR
// end ; end ; end ;
25002: PPOPN 2
25004: END
// on EnterBuilding ( building , human ) do var rnd ;
25005: LD_INT 0
25007: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25008: LD_VAR 0 2
25012: PPUSH
25013: CALL_OW 255
25017: PUSH
25018: LD_INT 2
25020: EQUAL
25021: PUSH
25022: LD_VAR 0 2
25026: PPUSH
25027: CALL_OW 257
25031: PUSH
25032: LD_INT 1
25034: EQUAL
25035: AND
25036: PUSH
25037: LD_VAR 0 1
25041: PUSH
25042: LD_EXP 45
25046: EQUAL
25047: AND
25048: IFFALSE 25095
// begin wait ( 0 0$1 ) ;
25050: LD_INT 35
25052: PPUSH
25053: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25057: LD_ADDR_VAR 0 3
25061: PUSH
25062: LD_INT 1
25064: PPUSH
25065: LD_INT 100
25067: PPUSH
25068: CALL_OW 12
25072: ST_TO_ADDR
// if rnd > 50 then
25073: LD_VAR 0 3
25077: PUSH
25078: LD_INT 50
25080: GREATER
25081: IFFALSE 25095
// SetClass ( human , class_mortar ) ;
25083: LD_VAR 0 2
25087: PPUSH
25088: LD_INT 8
25090: PPUSH
25091: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25095: LD_VAR 0 2
25099: PUSH
25100: LD_INT 22
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 25
25112: PUSH
25113: LD_INT 12
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PPUSH
25124: CALL_OW 69
25128: IN
25129: IFFALSE 25179
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25131: LD_VAR 0 1
25135: PPUSH
25136: CALL_OW 266
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: IN
25151: IFFALSE 25167
// SetClass ( human , class_apeman_engineer ) else
25153: LD_VAR 0 2
25157: PPUSH
25158: LD_INT 16
25160: PPUSH
25161: CALL_OW 336
25165: GO 25179
// SetClass ( human , class_apeman_soldier ) ;
25167: LD_VAR 0 2
25171: PPUSH
25172: LD_INT 15
25174: PPUSH
25175: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25179: LD_VAR 0 2
25183: PPUSH
25184: CALL_OW 255
25188: PUSH
25189: LD_INT 3
25191: EQUAL
25192: PUSH
25193: LD_VAR 0 2
25197: PPUSH
25198: CALL_OW 257
25202: PUSH
25203: LD_INT 1
25205: EQUAL
25206: AND
25207: PUSH
25208: LD_VAR 0 1
25212: PUSH
25213: LD_EXP 33
25217: EQUAL
25218: PUSH
25219: LD_VAR 0 1
25223: PUSH
25224: LD_EXP 34
25228: EQUAL
25229: OR
25230: PUSH
25231: EMPTY
25232: LIST
25233: AND
25234: IFFALSE 25255
// begin wait ( 0 0$1 ) ;
25236: LD_INT 35
25238: PPUSH
25239: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25243: LD_VAR 0 2
25247: PPUSH
25248: LD_INT 9
25250: PPUSH
25251: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25255: LD_VAR 0 2
25259: PPUSH
25260: CALL_OW 255
25264: PUSH
25265: LD_INT 3
25267: EQUAL
25268: PUSH
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 257
25278: PUSH
25279: LD_INT 9
25281: EQUAL
25282: AND
25283: PUSH
25284: LD_VAR 0 1
25288: PPUSH
25289: CALL_OW 266
25293: PUSH
25294: LD_INT 32
25296: EQUAL
25297: AND
25298: IFFALSE 25319
// begin wait ( 0 0$1 ) ;
25300: LD_INT 35
25302: PPUSH
25303: CALL_OW 67
// SetClass ( human , 1 ) ;
25307: LD_VAR 0 2
25311: PPUSH
25312: LD_INT 1
25314: PPUSH
25315: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25319: LD_VAR 0 2
25323: PPUSH
25324: CALL_OW 255
25328: PUSH
25329: LD_INT 3
25331: EQUAL
25332: PUSH
25333: LD_VAR 0 2
25337: PPUSH
25338: CALL_OW 257
25342: PUSH
25343: LD_INT 3
25345: EQUAL
25346: AND
25347: PUSH
25348: LD_VAR 0 1
25352: PUSH
25353: LD_EXP 35
25357: EQUAL
25358: AND
25359: IFFALSE 25373
// SetLives ( human , 1000 ) ;
25361: LD_VAR 0 2
25365: PPUSH
25366: LD_INT 1000
25368: PPUSH
25369: CALL_OW 234
// end ;
25373: PPOPN 3
25375: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25376: LD_VAR 0 1
25380: PUSH
25381: LD_INT 1
25383: EQUAL
25384: PUSH
25385: LD_VAR 0 2
25389: PUSH
25390: LD_INT 2
25392: EQUAL
25393: AND
25394: PUSH
25395: LD_INT 1
25397: PPUSH
25398: LD_INT 2
25400: PPUSH
25401: CALL_OW 81
25405: PUSH
25406: LD_INT 1
25408: EQUAL
25409: AND
25410: IFFALSE 25431
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25412: LD_EXP 24
25416: PPUSH
25417: LD_STRING D6b-Pow-1
25419: PPUSH
25420: CALL_OW 94
// YouLost ( Powell ) ;
25424: LD_STRING Powell
25426: PPUSH
25427: CALL_OW 104
// end ; end ;
25431: PPOPN 2
25433: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25434: LD_INT 23
25436: PPUSH
25437: LD_INT 22
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 21
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PPUSH
25461: CALL_OW 70
25465: PUSH
25466: LD_INT 23
25468: PPUSH
25469: LD_INT 22
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 21
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PPUSH
25493: CALL_OW 70
25497: OR
25498: PUSH
25499: LD_INT 1
25501: PPUSH
25502: LD_INT 2
25504: PPUSH
25505: CALL_OW 81
25509: PUSH
25510: LD_INT 1
25512: EQUAL
25513: AND
25514: IFFALSE 25647
25516: GO 25518
25518: DISABLE
// begin enable ;
25519: ENABLE
// wait ( 0 0$10 ) ;
25520: LD_INT 350
25522: PPUSH
25523: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25527: LD_INT 23
25529: PPUSH
25530: LD_INT 22
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 3
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PPUSH
25554: CALL_OW 70
25558: PUSH
25559: LD_INT 23
25561: PPUSH
25562: LD_INT 22
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 21
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PPUSH
25586: CALL_OW 70
25590: OR
25591: PUSH
25592: LD_INT 1
25594: PPUSH
25595: LD_INT 2
25597: PPUSH
25598: CALL_OW 81
25602: PUSH
25603: LD_INT 1
25605: EQUAL
25606: AND
25607: IFFALSE 25647
// begin disable ;
25609: DISABLE
// InGameOn ;
25610: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25614: LD_INT 73
25616: PPUSH
25617: LD_INT 18
25619: PPUSH
25620: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25624: LD_EXP 24
25628: PPUSH
25629: LD_STRING D6b-Pow-1
25631: PPUSH
25632: CALL_OW 94
// YouLost ( Powell ) ;
25636: LD_STRING Powell
25638: PPUSH
25639: CALL_OW 104
// InGameOff ;
25643: CALL_OW 9
// end ; end ;
25647: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25648: LD_VAR 0 1
25652: PUSH
25653: LD_EXP 1
25657: EQUAL
25658: IFFALSE 25667
// YouLost ( JMM ) ;
25660: LD_STRING JMM
25662: PPUSH
25663: CALL_OW 104
// if unit = Khatam then
25667: LD_VAR 0 1
25671: PUSH
25672: LD_EXP 14
25676: EQUAL
25677: IFFALSE 25687
// KhatamStatus = 0 ;
25679: LD_ADDR_EXP 53
25683: PUSH
25684: LD_INT 0
25686: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 255
25696: PUSH
25697: LD_INT 3
25699: EQUAL
25700: PUSH
25701: LD_VAR 0 1
25705: PPUSH
25706: CALL_OW 247
25710: PUSH
25711: LD_INT 3
25713: EQUAL
25714: AND
25715: IFFALSE 26407
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25717: LD_VAR 0 1
25721: PPUSH
25722: CALL_OW 266
25726: PUSH
25727: LD_INT 31
25729: EQUAL
25730: PUSH
25731: LD_VAR 0 1
25735: PPUSH
25736: CALL_OW 266
25740: PUSH
25741: LD_INT 32
25743: EQUAL
25744: OR
25745: PUSH
25746: LD_VAR 0 1
25750: PPUSH
25751: CALL_OW 266
25755: PUSH
25756: LD_INT 36
25758: EQUAL
25759: OR
25760: PUSH
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 266
25770: PUSH
25771: LD_INT 0
25773: EQUAL
25774: OR
25775: PUSH
25776: LD_VAR 0 1
25780: PPUSH
25781: CALL_OW 266
25785: PUSH
25786: LD_INT 24
25788: EQUAL
25789: OR
25790: PUSH
25791: LD_VAR 0 1
25795: PPUSH
25796: CALL_OW 266
25800: PUSH
25801: LD_INT 17
25803: EQUAL
25804: OR
25805: PUSH
25806: LD_VAR 0 1
25810: PPUSH
25811: CALL_OW 266
25815: PUSH
25816: LD_INT 25
25818: EQUAL
25819: OR
25820: PUSH
25821: LD_VAR 0 1
25825: PPUSH
25826: CALL_OW 266
25830: PUSH
25831: LD_INT 19
25833: EQUAL
25834: OR
25835: PUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL_OW 266
25845: PUSH
25846: LD_INT 20
25848: EQUAL
25849: OR
25850: PUSH
25851: LD_VAR 0 1
25855: PPUSH
25856: CALL_OW 266
25860: PUSH
25861: LD_INT 18
25863: EQUAL
25864: OR
25865: PUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: CALL_OW 266
25875: PUSH
25876: LD_INT 21
25878: EQUAL
25879: OR
25880: PUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: CALL_OW 266
25890: PUSH
25891: LD_INT 23
25893: EQUAL
25894: OR
25895: PUSH
25896: LD_VAR 0 1
25900: PPUSH
25901: CALL_OW 266
25905: PUSH
25906: LD_INT 16
25908: EQUAL
25909: OR
25910: PUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL_OW 266
25920: PUSH
25921: LD_INT 6
25923: EQUAL
25924: OR
25925: PUSH
25926: LD_VAR 0 1
25930: PPUSH
25931: CALL_OW 266
25935: PUSH
25936: LD_INT 29
25938: EQUAL
25939: OR
25940: PUSH
25941: LD_VAR 0 1
25945: PPUSH
25946: CALL_OW 266
25950: PUSH
25951: LD_INT 26
25953: EQUAL
25954: OR
25955: PUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 266
25965: PUSH
25966: LD_INT 30
25968: EQUAL
25969: OR
25970: PUSH
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 266
25980: PUSH
25981: LD_INT 28
25983: EQUAL
25984: OR
25985: PUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 266
25995: PUSH
25996: LD_INT 27
25998: EQUAL
25999: OR
26000: PUSH
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 266
26010: PUSH
26011: LD_INT 33
26013: EQUAL
26014: OR
26015: PUSH
26016: LD_VAR 0 1
26020: PPUSH
26021: CALL_OW 266
26025: PUSH
26026: LD_INT 2
26028: EQUAL
26029: OR
26030: PUSH
26031: LD_VAR 0 1
26035: PPUSH
26036: CALL_OW 266
26040: PUSH
26041: LD_INT 4
26043: EQUAL
26044: OR
26045: IFFALSE 26131
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26047: LD_ADDR_EXP 42
26051: PUSH
26052: LD_EXP 42
26056: PUSH
26057: LD_VAR 0 1
26061: PPUSH
26062: CALL_OW 266
26066: ADD
26067: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26068: LD_ADDR_EXP 42
26072: PUSH
26073: LD_EXP 42
26077: PUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: CALL_OW 250
26087: ADD
26088: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26089: LD_ADDR_EXP 42
26093: PUSH
26094: LD_EXP 42
26098: PUSH
26099: LD_VAR 0 1
26103: PPUSH
26104: CALL_OW 251
26108: ADD
26109: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26110: LD_ADDR_EXP 42
26114: PUSH
26115: LD_EXP 42
26119: PUSH
26120: LD_VAR 0 1
26124: PPUSH
26125: CALL_OW 254
26129: ADD
26130: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26131: LD_VAR 0 1
26135: PPUSH
26136: CALL_OW 266
26140: PUSH
26141: LD_INT 1
26143: EQUAL
26144: IFFALSE 26223
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26146: LD_ADDR_EXP 42
26150: PUSH
26151: LD_EXP 42
26155: PUSH
26156: LD_INT 0
26158: ADD
26159: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26160: LD_ADDR_EXP 42
26164: PUSH
26165: LD_EXP 42
26169: PUSH
26170: LD_VAR 0 1
26174: PPUSH
26175: CALL_OW 250
26179: ADD
26180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26181: LD_ADDR_EXP 42
26185: PUSH
26186: LD_EXP 42
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 251
26200: ADD
26201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26202: LD_ADDR_EXP 42
26206: PUSH
26207: LD_EXP 42
26211: PUSH
26212: LD_VAR 0 1
26216: PPUSH
26217: CALL_OW 254
26221: ADD
26222: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 266
26232: PUSH
26233: LD_INT 3
26235: EQUAL
26236: IFFALSE 26315
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26238: LD_ADDR_EXP 42
26242: PUSH
26243: LD_EXP 42
26247: PUSH
26248: LD_INT 2
26250: ADD
26251: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26252: LD_ADDR_EXP 42
26256: PUSH
26257: LD_EXP 42
26261: PUSH
26262: LD_VAR 0 1
26266: PPUSH
26267: CALL_OW 250
26271: ADD
26272: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26273: LD_ADDR_EXP 42
26277: PUSH
26278: LD_EXP 42
26282: PUSH
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 251
26292: ADD
26293: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26294: LD_ADDR_EXP 42
26298: PUSH
26299: LD_EXP 42
26303: PUSH
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL_OW 254
26313: ADD
26314: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26315: LD_VAR 0 1
26319: PPUSH
26320: CALL_OW 266
26324: PUSH
26325: LD_INT 5
26327: EQUAL
26328: IFFALSE 26407
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26330: LD_ADDR_EXP 42
26334: PUSH
26335: LD_EXP 42
26339: PUSH
26340: LD_INT 4
26342: ADD
26343: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26344: LD_ADDR_EXP 42
26348: PUSH
26349: LD_EXP 42
26353: PUSH
26354: LD_VAR 0 1
26358: PPUSH
26359: CALL_OW 250
26363: ADD
26364: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26365: LD_ADDR_EXP 42
26369: PUSH
26370: LD_EXP 42
26374: PUSH
26375: LD_VAR 0 1
26379: PPUSH
26380: CALL_OW 251
26384: ADD
26385: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26386: LD_ADDR_EXP 42
26390: PUSH
26391: LD_EXP 42
26395: PUSH
26396: LD_VAR 0 1
26400: PPUSH
26401: CALL_OW 254
26405: ADD
26406: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26407: LD_EXP 51
26411: PUSH
26412: LD_VAR 0 1
26416: PPUSH
26417: CALL_OW 257
26421: PUSH
26422: LD_INT 3
26424: EQUAL
26425: AND
26426: PUSH
26427: LD_VAR 0 1
26431: PPUSH
26432: CALL_OW 255
26436: PUSH
26437: LD_INT 3
26439: EQUAL
26440: AND
26441: PUSH
26442: LD_EXP 35
26446: PPUSH
26447: CALL_OW 302
26451: AND
26452: PUSH
26453: LD_EXP 35
26457: PPUSH
26458: CALL_OW 255
26462: PUSH
26463: LD_INT 3
26465: EQUAL
26466: AND
26467: IFFALSE 26551
// begin ruMech := ruMech - 1 ;
26469: LD_ADDR_EXP 51
26473: PUSH
26474: LD_EXP 51
26478: PUSH
26479: LD_INT 1
26481: MINUS
26482: ST_TO_ADDR
// uc_side = 3 ;
26483: LD_ADDR_OWVAR 20
26487: PUSH
26488: LD_INT 3
26490: ST_TO_ADDR
// uc_nation = 3 ;
26491: LD_ADDR_OWVAR 21
26495: PUSH
26496: LD_INT 3
26498: ST_TO_ADDR
// hc_gallery :=  ;
26499: LD_ADDR_OWVAR 33
26503: PUSH
26504: LD_STRING 
26506: ST_TO_ADDR
// hc_name :=  ;
26507: LD_ADDR_OWVAR 26
26511: PUSH
26512: LD_STRING 
26514: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26515: LD_INT 0
26517: PPUSH
26518: LD_EXP 36
26522: PPUSH
26523: LD_EXP 37
26527: PPUSH
26528: CALL_OW 12
26532: PPUSH
26533: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26537: CALL_OW 44
26541: PPUSH
26542: LD_EXP 35
26546: PPUSH
26547: CALL_OW 52
// end ; end ;
26551: PPOPN 1
26553: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26554: LD_ADDR_OWVAR 57
26558: PUSH
26559: LD_INT 0
26561: ST_TO_ADDR
// fastEnd = 1 ;
26562: LD_ADDR_EXP 63
26566: PUSH
26567: LD_INT 1
26569: ST_TO_ADDR
// FinishMission ;
26570: CALL 27730 0 0
// end ;
26574: PPOPN 1
26576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26577: LD_VAR 0 1
26581: PPUSH
26582: CALL 40726 0 1
// end ; end_of_file
26586: PPOPN 1
26588: END
// export function PrepareNature ; var i , un ; begin
26589: LD_INT 0
26591: PPUSH
26592: PPUSH
26593: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26594: LD_ADDR_VAR 0 2
26598: PUSH
26599: DOUBLE
26600: LD_INT 1
26602: DEC
26603: ST_TO_ADDR
26604: LD_OWVAR 67
26608: PUSH
26609: LD_INT 1
26611: PPUSH
26612: LD_INT 5
26614: PPUSH
26615: CALL_OW 12
26619: PLUS
26620: PUSH
26621: FOR_TO
26622: IFFALSE 26767
// begin hc_sex = sex_male ;
26624: LD_ADDR_OWVAR 27
26628: PUSH
26629: LD_INT 1
26631: ST_TO_ADDR
// uc_side = 0 ;
26632: LD_ADDR_OWVAR 20
26636: PUSH
26637: LD_INT 0
26639: ST_TO_ADDR
// uc_nation = nation_nature ;
26640: LD_ADDR_OWVAR 21
26644: PUSH
26645: LD_INT 0
26647: ST_TO_ADDR
// hc_class = class_apeman ;
26648: LD_ADDR_OWVAR 28
26652: PUSH
26653: LD_INT 12
26655: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26656: LD_ADDR_OWVAR 31
26660: PUSH
26661: LD_INT 2
26663: PPUSH
26664: LD_INT 7
26666: PPUSH
26667: CALL_OW 12
26671: PUSH
26672: LD_OWVAR 67
26676: PLUS
26677: PUSH
26678: LD_INT 2
26680: PPUSH
26681: LD_INT 10
26683: PPUSH
26684: CALL_OW 12
26688: PUSH
26689: LD_INT 2
26691: PPUSH
26692: LD_INT 10
26694: PPUSH
26695: CALL_OW 12
26699: PUSH
26700: LD_INT 2
26702: PPUSH
26703: LD_INT 10
26705: PPUSH
26706: CALL_OW 12
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26717: LD_ADDR_OWVAR 35
26721: PUSH
26722: LD_INT 5
26724: NEG
26725: PPUSH
26726: LD_INT 5
26728: PPUSH
26729: CALL_OW 12
26733: PUSH
26734: LD_OWVAR 67
26738: MUL
26739: ST_TO_ADDR
// un = CreateHuman ;
26740: LD_ADDR_VAR 0 3
26744: PUSH
26745: CALL_OW 44
26749: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26750: LD_VAR 0 3
26754: PPUSH
26755: LD_INT 5
26757: PPUSH
26758: LD_INT 0
26760: PPUSH
26761: CALL_OW 49
// end ;
26765: GO 26621
26767: POP
26768: POP
// for i = 1 to Difficulty + 2 do
26769: LD_ADDR_VAR 0 2
26773: PUSH
26774: DOUBLE
26775: LD_INT 1
26777: DEC
26778: ST_TO_ADDR
26779: LD_OWVAR 67
26783: PUSH
26784: LD_INT 2
26786: PLUS
26787: PUSH
26788: FOR_TO
26789: IFFALSE 26898
// begin hc_sex = sex_male ;
26791: LD_ADDR_OWVAR 27
26795: PUSH
26796: LD_INT 1
26798: ST_TO_ADDR
// uc_side = 0 ;
26799: LD_ADDR_OWVAR 20
26803: PUSH
26804: LD_INT 0
26806: ST_TO_ADDR
// uc_nation = nation_nature ;
26807: LD_ADDR_OWVAR 21
26811: PUSH
26812: LD_INT 0
26814: ST_TO_ADDR
// hc_class = class_tiger ;
26815: LD_ADDR_OWVAR 28
26819: PUSH
26820: LD_INT 14
26822: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26823: LD_ADDR_OWVAR 31
26827: PUSH
26828: LD_EXP 37
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26848: LD_ADDR_OWVAR 35
26852: PUSH
26853: LD_INT 5
26855: NEG
26856: PPUSH
26857: LD_INT 5
26859: PPUSH
26860: CALL_OW 12
26864: PUSH
26865: LD_OWVAR 67
26869: MUL
26870: ST_TO_ADDR
// un = CreateHuman ;
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: CALL_OW 44
26880: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26881: LD_VAR 0 3
26885: PPUSH
26886: LD_INT 6
26888: PPUSH
26889: LD_INT 0
26891: PPUSH
26892: CALL_OW 49
// end ;
26896: GO 26788
26898: POP
26899: POP
// for i = 1 to rand ( 3 , 4 ) do
26900: LD_ADDR_VAR 0 2
26904: PUSH
26905: DOUBLE
26906: LD_INT 1
26908: DEC
26909: ST_TO_ADDR
26910: LD_INT 3
26912: PPUSH
26913: LD_INT 4
26915: PPUSH
26916: CALL_OW 12
26920: PUSH
26921: FOR_TO
26922: IFFALSE 27016
// begin hc_sex = sex_male ;
26924: LD_ADDR_OWVAR 27
26928: PUSH
26929: LD_INT 1
26931: ST_TO_ADDR
// uc_side = 0 ;
26932: LD_ADDR_OWVAR 20
26936: PUSH
26937: LD_INT 0
26939: ST_TO_ADDR
// uc_nation = nation_nature ;
26940: LD_ADDR_OWVAR 21
26944: PUSH
26945: LD_INT 0
26947: ST_TO_ADDR
// hc_class = 18 ;
26948: LD_ADDR_OWVAR 28
26952: PUSH
26953: LD_INT 18
26955: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26956: LD_ADDR_OWVAR 31
26960: PUSH
26961: LD_EXP 37
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: ST_TO_ADDR
// hc_agressivity = 0 ;
26981: LD_ADDR_OWVAR 35
26985: PUSH
26986: LD_INT 0
26988: ST_TO_ADDR
// un = CreateHuman ;
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: CALL_OW 44
26998: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26999: LD_VAR 0 3
27003: PPUSH
27004: LD_INT 6
27006: PPUSH
27007: LD_INT 0
27009: PPUSH
27010: CALL_OW 49
// end ;
27014: GO 26921
27016: POP
27017: POP
// end ; end_of_file
27018: LD_VAR 0 1
27022: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27023: LD_EXP 46
27027: PUSH
27028: LD_INT 1
27030: EQUAL
27031: IFFALSE 27115
27033: GO 27035
27035: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27036: LD_INT 7
27038: PPUSH
27039: LD_INT 5
27041: PPUSH
27042: LD_INT 4
27044: PUSH
27045: LD_INT 5
27047: PUSH
27048: LD_INT 6
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: PUSH
27056: LD_OWVAR 67
27060: ARRAY
27061: PPUSH
27062: LD_EXP 36
27066: PPUSH
27067: LD_EXP 37
27071: PPUSH
27072: CALL_OW 12
27076: PPUSH
27077: LD_INT 2
27079: PPUSH
27080: LD_INT 1
27082: PPUSH
27083: LD_INT 1
27085: PPUSH
27086: EMPTY
27087: PPUSH
27088: LD_INT 25
27090: PUSH
27091: LD_INT 26
27093: PUSH
27094: LD_INT 27
27096: PUSH
27097: LD_INT 28
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: PPUSH
27106: EMPTY
27107: PPUSH
27108: LD_INT 1
27110: PPUSH
27111: CALL 17034 0 11
27115: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27116: LD_EXP 46
27120: PUSH
27121: LD_INT 1
27123: EQUAL
27124: IFFALSE 27212
27126: GO 27128
27128: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27129: LD_INT 5
27131: PPUSH
27132: LD_INT 2
27134: PPUSH
27135: LD_INT 5
27137: PUSH
27138: LD_INT 6
27140: PUSH
27141: LD_INT 8
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: PUSH
27149: LD_OWVAR 67
27153: ARRAY
27154: PPUSH
27155: LD_INT 0
27157: PPUSH
27158: LD_INT 0
27160: PPUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 4
27166: PUSH
27167: LD_INT 5
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: PUSH
27175: LD_OWVAR 67
27179: ARRAY
27180: PPUSH
27181: LD_INT 0
27183: PPUSH
27184: LD_EXP 36
27188: PPUSH
27189: LD_EXP 37
27193: PPUSH
27194: CALL_OW 12
27198: PPUSH
27199: LD_INT 7
27201: PPUSH
27202: LD_INT 9
27204: PPUSH
27205: LD_INT 1
27207: PPUSH
27208: CALL 18738 0 11
27212: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27213: LD_EXP 46
27217: PUSH
27218: LD_INT 1
27220: EQUAL
27221: IFFALSE 27230
27223: GO 27225
27225: DISABLE
// PrepareArabianSheik ;
27226: CALL 4542 0 0
27230: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27231: LD_EXP 29
27235: PUSH
27236: LD_EXP 64
27240: PUSH
27241: LD_INT 1
27243: EQUAL
27244: AND
27245: IFFALSE 27314
27247: GO 27249
27249: DISABLE
// begin enable ;
27250: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27251: LD_INT 6
27253: PPUSH
27254: LD_INT 3
27256: PPUSH
27257: LD_EXP 60
27261: PPUSH
27262: LD_INT 0
27264: PPUSH
27265: LD_OWVAR 67
27269: PPUSH
27270: LD_INT 0
27272: PPUSH
27273: LD_EXP 60
27277: PUSH
27278: LD_INT 3
27280: DIV
27281: PUSH
27282: LD_INT 1
27284: PLUS
27285: PPUSH
27286: LD_EXP 36
27290: PPUSH
27291: LD_EXP 37
27295: PPUSH
27296: CALL_OW 12
27300: PPUSH
27301: LD_INT 17
27303: PPUSH
27304: LD_INT 18
27306: PPUSH
27307: LD_INT 1
27309: PPUSH
27310: CALL 18738 0 11
// end ;
27314: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27315: LD_EXP 29
27319: PUSH
27320: LD_EXP 64
27324: PUSH
27325: LD_INT 1
27327: EQUAL
27328: AND
27329: IFFALSE 27406
27331: GO 27333
27333: DISABLE
// begin enable ;
27334: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27335: LD_INT 17
27337: PPUSH
27338: LD_INT 6
27340: PPUSH
27341: LD_EXP 59
27345: PPUSH
27346: LD_EXP 36
27350: PPUSH
27351: LD_EXP 37
27355: PPUSH
27356: CALL_OW 12
27360: PPUSH
27361: LD_INT 3
27363: PPUSH
27364: LD_INT 1
27366: PPUSH
27367: LD_INT 3
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PPUSH
27377: LD_INT 43
27379: PUSH
27380: LD_INT 44
27382: PUSH
27383: LD_INT 45
27385: PUSH
27386: LD_INT 46
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: PPUSH
27395: EMPTY
27396: PPUSH
27397: EMPTY
27398: PPUSH
27399: LD_INT 1
27401: PPUSH
27402: CALL 17034 0 11
// end ;
27406: END
// every 10 10$00 trigger joinEpsilon do
27407: LD_EXP 29
27411: IFFALSE 27465
27413: GO 27415
27415: DISABLE
// begin enable ;
27416: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27417: LD_ADDR_EXP 59
27421: PUSH
27422: LD_EXP 59
27426: PUSH
27427: LD_INT 1
27429: PPUSH
27430: LD_OWVAR 67
27434: PPUSH
27435: CALL_OW 12
27439: PLUS
27440: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27441: LD_ADDR_EXP 60
27445: PUSH
27446: LD_EXP 60
27450: PUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_OWVAR 67
27458: PPUSH
27459: CALL_OW 12
27463: PLUS
27464: ST_TO_ADDR
// end ;
27465: END
// every 21 21$0 trigger attackAvalaible = 1 do
27466: LD_EXP 64
27470: PUSH
27471: LD_INT 1
27473: EQUAL
27474: IFFALSE 27487
27476: GO 27478
27478: DISABLE
// attackAvalaible = 0 ; end_of_file
27479: LD_ADDR_EXP 64
27483: PUSH
27484: LD_INT 0
27486: ST_TO_ADDR
27487: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27488: LD_INT 54
27490: PPUSH
27491: LD_INT 1
27493: PPUSH
27494: CALL_OW 321
27498: PUSH
27499: LD_INT 2
27501: EQUAL
27502: PUSH
27503: LD_INT 55
27505: PPUSH
27506: LD_INT 1
27508: PPUSH
27509: CALL_OW 321
27513: PUSH
27514: LD_INT 2
27516: EQUAL
27517: AND
27518: PUSH
27519: LD_INT 21
27521: PPUSH
27522: LD_INT 1
27524: PPUSH
27525: CALL_OW 321
27529: PUSH
27530: LD_INT 2
27532: EQUAL
27533: AND
27534: PUSH
27535: LD_INT 22
27537: PPUSH
27538: LD_INT 1
27540: PPUSH
27541: CALL_OW 321
27545: PUSH
27546: LD_INT 2
27548: EQUAL
27549: AND
27550: PUSH
27551: LD_INT 12
27553: PPUSH
27554: LD_INT 1
27556: PPUSH
27557: CALL_OW 321
27561: PUSH
27562: LD_INT 1
27564: EQUAL
27565: PUSH
27566: LD_INT 32
27568: PPUSH
27569: LD_INT 1
27571: PPUSH
27572: CALL_OW 321
27576: PUSH
27577: LD_INT 1
27579: EQUAL
27580: OR
27581: PUSH
27582: EMPTY
27583: LIST
27584: AND
27585: PUSH
27586: LD_EXP 48
27590: PUSH
27591: LD_INT 1
27593: EQUAL
27594: AND
27595: PUSH
27596: LD_INT 22
27598: PUSH
27599: LD_INT 3
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 21
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PPUSH
27620: CALL_OW 69
27624: PUSH
27625: LD_INT 0
27627: EQUAL
27628: AND
27629: IFFALSE 27685
27631: GO 27633
27633: DISABLE
// begin case query ( QEndMission ) of 1 :
27634: LD_STRING QEndMission
27636: PPUSH
27637: CALL_OW 97
27641: PUSH
27642: LD_INT 1
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27650
27648: GO 27661
27650: POP
// begin end_the_mission_allowed = true ;
27651: LD_ADDR_OWVAR 57
27655: PUSH
27656: LD_INT 1
27658: ST_TO_ADDR
// end ; 2 :
27659: GO 27685
27661: LD_INT 2
27663: DOUBLE
27664: EQUAL
27665: IFTRUE 27669
27667: GO 27684
27669: POP
// begin fastEnd = 1 ;
27670: LD_ADDR_EXP 63
27674: PUSH
27675: LD_INT 1
27677: ST_TO_ADDR
// FinishMission ;
27678: CALL 27730 0 0
// end ; end ;
27682: GO 27685
27684: POP
// end ;
27685: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27686: LD_EXP 58
27690: PUSH
27691: LD_EXP 57
27695: NOT
27696: AND
27697: PUSH
27698: LD_INT 22
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PPUSH
27708: CALL_OW 69
27712: PUSH
27713: LD_INT 0
27715: EQUAL
27716: AND
27717: IFFALSE 27729
27719: GO 27721
27721: DISABLE
// SetAchievement ( ACH_TACT ) ;
27722: LD_STRING ACH_TACT
27724: PPUSH
27725: CALL_OW 543
27729: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27730: LD_INT 0
27732: PPUSH
27733: PPUSH
27734: PPUSH
27735: PPUSH
// if not snipersTrained then
27736: LD_EXP 62
27740: NOT
27741: IFFALSE 27750
// SetAchievement ( ACH_SNIPER ) ;
27743: LD_STRING ACH_SNIPER
27745: PPUSH
27746: CALL_OW 543
// m1 := false ;
27750: LD_ADDR_VAR 0 2
27754: PUSH
27755: LD_INT 0
27757: ST_TO_ADDR
// m2 := false ;
27758: LD_ADDR_VAR 0 3
27762: PUSH
27763: LD_INT 0
27765: ST_TO_ADDR
// m3 := false ;
27766: LD_ADDR_VAR 0 4
27770: PUSH
27771: LD_INT 0
27773: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27774: LD_EXP 53
27778: PPUSH
27779: LD_STRING 10_KhatamStatus_1
27781: PPUSH
27782: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27786: LD_EXP 52
27790: PPUSH
27791: LD_STRING 10_GensherEscape_1
27793: PPUSH
27794: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27798: LD_INT 12
27800: PPUSH
27801: LD_INT 1
27803: PPUSH
27804: CALL_OW 321
27808: PUSH
27809: LD_INT 2
27811: EQUAL
27812: IFFALSE 27834
// begin AddMedal ( sights , 1 ) ;
27814: LD_STRING sights
27816: PPUSH
27817: LD_INT 1
27819: PPUSH
27820: CALL_OW 101
// m1 := true ;
27824: LD_ADDR_VAR 0 2
27828: PUSH
27829: LD_INT 1
27831: ST_TO_ADDR
// end else
27832: GO 27845
// begin AddMedal ( sights , - 1 ) ;
27834: LD_STRING sights
27836: PPUSH
27837: LD_INT 1
27839: NEG
27840: PPUSH
27841: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
27845: LD_INT 32
27847: PPUSH
27848: LD_INT 1
27850: PPUSH
27851: CALL_OW 321
27855: PUSH
27856: LD_INT 2
27858: EQUAL
27859: IFFALSE 27881
// begin AddMedal ( computers , 1 ) ;
27861: LD_STRING computers
27863: PPUSH
27864: LD_INT 1
27866: PPUSH
27867: CALL_OW 101
// m2 := true ;
27871: LD_ADDR_VAR 0 3
27875: PUSH
27876: LD_INT 1
27878: ST_TO_ADDR
// end else
27879: GO 27892
// begin AddMedal ( computers , - 1 ) ;
27881: LD_STRING computers
27883: PPUSH
27884: LD_INT 1
27886: NEG
27887: PPUSH
27888: CALL_OW 101
// end ; if arabianEscape = 0 then
27892: LD_EXP 47
27896: PUSH
27897: LD_INT 0
27899: EQUAL
27900: IFFALSE 27932
// begin AddMedal ( renegades , 2 ) ;
27902: LD_STRING renegades
27904: PPUSH
27905: LD_INT 2
27907: PPUSH
27908: CALL_OW 101
// m3 := true ;
27912: LD_ADDR_VAR 0 4
27916: PUSH
27917: LD_INT 1
27919: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
27920: LD_INT 0
27922: PPUSH
27923: LD_STRING 10_ScientistsEscape_1
27925: PPUSH
27926: CALL_OW 39
// end else
27930: GO 27943
// begin AddMedal ( renegades , - 1 ) ;
27932: LD_STRING renegades
27934: PPUSH
27935: LD_INT 1
27937: NEG
27938: PPUSH
27939: CALL_OW 101
// end ; SaveEpsilonBase ;
27943: CALL 28729 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
27947: LD_VAR 0 2
27951: PUSH
27952: LD_VAR 0 3
27956: AND
27957: PUSH
27958: LD_VAR 0 4
27962: AND
27963: PUSH
27964: LD_OWVAR 67
27968: PUSH
27969: LD_INT 3
27971: EQUAL
27972: AND
27973: IFFALSE 27985
// SetAchievementEX ( ACH_AMER , 10 ) ;
27975: LD_STRING ACH_AMER
27977: PPUSH
27978: LD_INT 10
27980: PPUSH
27981: CALL_OW 564
// if tick <= 40 40$00 then
27985: LD_OWVAR 1
27989: PUSH
27990: LD_INT 84000
27992: LESSEQUAL
27993: IFFALSE 28009
// begin wait ( 3 ) ;
27995: LD_INT 3
27997: PPUSH
27998: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28002: LD_STRING ACH_ASPEED_10
28004: PPUSH
28005: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28009: LD_STRING Main
28011: PPUSH
28012: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28016: LD_INT 22
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 23
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 21
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 25
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 25
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 25
28071: PUSH
28072: LD_INT 3
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 25
28081: PUSH
28082: LD_INT 4
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 25
28091: PUSH
28092: LD_INT 5
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 25
28101: PUSH
28102: LD_INT 8
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: PPUSH
28124: CALL_OW 69
28128: PPUSH
28129: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28133: LD_EXP 1
28137: PPUSH
28138: LD_EXP 54
28142: PUSH
28143: LD_STRING JMM
28145: STR
28146: PPUSH
28147: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28151: LD_EXP 2
28155: PPUSH
28156: LD_EXP 54
28160: PUSH
28161: LD_STRING Brown
28163: STR
28164: PPUSH
28165: CALL 11218 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28169: LD_EXP 3
28173: PPUSH
28174: LD_EXP 54
28178: PUSH
28179: LD_STRING Donaldson
28181: STR
28182: PPUSH
28183: CALL 11218 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28187: LD_EXP 4
28191: PPUSH
28192: LD_EXP 54
28196: PUSH
28197: LD_STRING Bobby
28199: STR
28200: PPUSH
28201: CALL 11218 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28205: LD_EXP 5
28209: PPUSH
28210: LD_EXP 54
28214: PUSH
28215: LD_STRING Cyrus
28217: STR
28218: PPUSH
28219: CALL 11218 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28223: LD_EXP 6
28227: PPUSH
28228: LD_EXP 54
28232: PUSH
28233: LD_STRING Lisa
28235: STR
28236: PPUSH
28237: CALL 11218 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28241: LD_EXP 7
28245: PPUSH
28246: LD_EXP 54
28250: PUSH
28251: LD_STRING Frank
28253: STR
28254: PPUSH
28255: CALL 11218 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28259: LD_EXP 8
28263: PPUSH
28264: LD_EXP 54
28268: PUSH
28269: LD_STRING Kikuchi
28271: STR
28272: PPUSH
28273: CALL 11218 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28277: LD_EXP 9
28281: PPUSH
28282: LD_EXP 54
28286: PUSH
28287: LD_STRING Houten
28289: STR
28290: PPUSH
28291: CALL 11218 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28295: LD_EXP 10
28299: PPUSH
28300: LD_EXP 54
28304: PUSH
28305: LD_STRING Gary
28307: STR
28308: PPUSH
28309: CALL 11218 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28313: LD_EXP 19
28317: PPUSH
28318: LD_EXP 54
28322: PUSH
28323: LD_STRING Cornell
28325: STR
28326: PPUSH
28327: CALL 11218 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28331: LD_EXP 11
28335: PPUSH
28336: LD_EXP 54
28340: PUSH
28341: LD_STRING Simms
28343: STR
28344: PPUSH
28345: CALL 11218 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28349: LD_EXP 12
28353: PPUSH
28354: LD_EXP 54
28358: PUSH
28359: LD_STRING Denis
28361: STR
28362: PPUSH
28363: CALL 11218 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28367: LD_EXP 13
28371: PPUSH
28372: LD_EXP 54
28376: PUSH
28377: LD_STRING Joan
28379: STR
28380: PPUSH
28381: CALL 11218 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28385: LD_EXP 15
28389: PPUSH
28390: LD_EXP 54
28394: PUSH
28395: LD_STRING Gladstone
28397: STR
28398: PPUSH
28399: CALL 11218 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28403: LD_EXP 17
28407: PPUSH
28408: LD_EXP 54
28412: PUSH
28413: LD_STRING DeltaDoctor
28415: STR
28416: PPUSH
28417: CALL 11218 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28421: LD_EXP 22
28425: PPUSH
28426: LD_STRING 10c_lock
28428: PPUSH
28429: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28433: LD_INT 50
28435: PUSH
28436: EMPTY
28437: LIST
28438: PUSH
28439: LD_INT 22
28441: PUSH
28442: LD_INT 1
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 21
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 25
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 25
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 25
28484: PUSH
28485: LD_INT 3
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 25
28494: PUSH
28495: LD_INT 4
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 25
28504: PUSH
28505: LD_INT 5
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 25
28514: PUSH
28515: LD_INT 8
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: PPUSH
28537: CALL_OW 69
28541: PUSH
28542: LD_EXP 1
28546: PUSH
28547: LD_EXP 2
28551: PUSH
28552: LD_EXP 3
28556: PUSH
28557: LD_EXP 4
28561: PUSH
28562: LD_EXP 5
28566: PUSH
28567: LD_EXP 6
28571: PUSH
28572: LD_EXP 7
28576: PUSH
28577: LD_EXP 15
28581: PUSH
28582: LD_EXP 8
28586: PUSH
28587: LD_EXP 12
28591: PUSH
28592: LD_EXP 13
28596: PUSH
28597: LD_EXP 9
28601: PUSH
28602: LD_EXP 11
28606: PUSH
28607: LD_EXP 10
28611: PUSH
28612: LD_EXP 17
28616: PUSH
28617: LD_EXP 19
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: DIFF
28640: PPUSH
28641: LD_STRING 10_other_survivors
28643: PPUSH
28644: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28648: LD_INT 50
28650: PUSH
28651: EMPTY
28652: LIST
28653: PUSH
28654: LD_INT 22
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 21
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: LD_INT 25
28679: PUSH
28680: LD_INT 16
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 25
28689: PUSH
28690: LD_INT 12
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: PPUSH
28708: CALL_OW 69
28712: PPUSH
28713: LD_STRING 10_ape
28715: PPUSH
28716: CALL_OW 38
// YouWin ;
28720: CALL_OW 103
// end ;
28724: LD_VAR 0 1
28728: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
28733: PPUSH
28734: PPUSH
// epsilonBase = [ ] ;
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: EMPTY
28741: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: LD_INT 22
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 21
28759: PUSH
28760: LD_INT 3
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 50
28769: PUSH
28770: EMPTY
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 69
28782: ST_TO_ADDR
// for i in buildings do
28783: LD_ADDR_VAR 0 4
28787: PUSH
28788: LD_VAR 0 3
28792: PUSH
28793: FOR_IN
28794: IFFALSE 29246
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28796: LD_VAR 0 4
28800: PPUSH
28801: CALL_OW 266
28805: PUSH
28806: LD_INT 6
28808: PUSH
28809: LD_INT 7
28811: PUSH
28812: LD_INT 8
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: IN
28820: IFFALSE 28934
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28822: LD_ADDR_VAR 0 2
28826: PUSH
28827: LD_VAR 0 2
28831: PUSH
28832: LD_VAR 0 4
28836: PPUSH
28837: CALL_OW 266
28841: PUSH
28842: LD_VAR 0 4
28846: PPUSH
28847: CALL_OW 250
28851: PUSH
28852: LD_VAR 0 4
28856: PPUSH
28857: CALL_OW 251
28861: PUSH
28862: LD_VAR 0 4
28866: PPUSH
28867: CALL_OW 254
28871: PUSH
28872: LD_VAR 0 4
28876: PPUSH
28877: CALL_OW 267
28881: PUSH
28882: LD_VAR 0 4
28886: PPUSH
28887: CALL_OW 248
28891: PUSH
28892: LD_VAR 0 4
28896: PPUSH
28897: LD_INT 1
28899: PPUSH
28900: CALL_OW 268
28904: PUSH
28905: LD_VAR 0 4
28909: PPUSH
28910: LD_INT 2
28912: PPUSH
28913: CALL_OW 268
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: ADD
28931: ST_TO_ADDR
28932: GO 29244
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
28934: LD_VAR 0 4
28938: PPUSH
28939: CALL_OW 266
28943: PUSH
28944: LD_INT 32
28946: EQUAL
28947: PUSH
28948: LD_VAR 0 4
28952: PPUSH
28953: CALL_OW 266
28957: PUSH
28958: LD_INT 33
28960: EQUAL
28961: OR
28962: IFFALSE 29059
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
28964: LD_ADDR_VAR 0 2
28968: PUSH
28969: LD_VAR 0 2
28973: PUSH
28974: LD_VAR 0 4
28978: PPUSH
28979: CALL_OW 266
28983: PUSH
28984: LD_VAR 0 4
28988: PPUSH
28989: CALL_OW 250
28993: PUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 251
29003: PUSH
29004: LD_VAR 0 4
29008: PPUSH
29009: CALL_OW 254
29013: PUSH
29014: LD_VAR 0 4
29018: PPUSH
29019: CALL_OW 267
29023: PUSH
29024: LD_VAR 0 4
29028: PPUSH
29029: CALL_OW 248
29033: PUSH
29034: LD_VAR 0 4
29038: PPUSH
29039: CALL_OW 269
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: ADD
29056: ST_TO_ADDR
29057: GO 29244
// if GetBType ( i ) = b_factory then
29059: LD_VAR 0 4
29063: PPUSH
29064: CALL_OW 266
29068: PUSH
29069: LD_INT 3
29071: EQUAL
29072: IFFALSE 29162
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29074: LD_ADDR_VAR 0 2
29078: PUSH
29079: LD_VAR 0 2
29083: PPUSH
29084: LD_INT 1
29086: PPUSH
29087: LD_VAR 0 4
29091: PPUSH
29092: CALL_OW 266
29096: PUSH
29097: LD_VAR 0 4
29101: PPUSH
29102: CALL_OW 250
29106: PUSH
29107: LD_VAR 0 4
29111: PPUSH
29112: CALL_OW 251
29116: PUSH
29117: LD_VAR 0 4
29121: PPUSH
29122: CALL_OW 254
29126: PUSH
29127: LD_VAR 0 4
29131: PPUSH
29132: CALL_OW 267
29136: PUSH
29137: LD_VAR 0 4
29141: PPUSH
29142: CALL_OW 248
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: PPUSH
29155: CALL_OW 2
29159: ST_TO_ADDR
29160: GO 29244
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29162: LD_ADDR_VAR 0 2
29166: PUSH
29167: LD_VAR 0 2
29171: PUSH
29172: LD_VAR 0 4
29176: PPUSH
29177: CALL_OW 266
29181: PUSH
29182: LD_VAR 0 4
29186: PPUSH
29187: CALL_OW 250
29191: PUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 251
29201: PUSH
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 254
29211: PUSH
29212: LD_VAR 0 4
29216: PPUSH
29217: CALL_OW 267
29221: PUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: CALL_OW 248
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: ADD
29243: ST_TO_ADDR
// end ;
29244: GO 28793
29246: POP
29247: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29248: LD_VAR 0 2
29252: PPUSH
29253: LD_STRING 10_EpsilonBase
29255: PPUSH
29256: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29260: LD_INT 19
29262: PPUSH
29263: LD_STRING 10_EpsilonEnv
29265: PPUSH
29266: CALL 29275 0 2
// end ;
29270: LD_VAR 0 1
29274: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29275: LD_INT 0
29277: PPUSH
// result := ListEnvironmentArea ( area ) ;
29278: LD_ADDR_VAR 0 3
29282: PUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 353
29292: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29293: LD_VAR 0 3
29297: PPUSH
29298: LD_VAR 0 2
29302: PPUSH
29303: CALL_OW 39
// end ; end_of_file
29307: LD_VAR 0 3
29311: RET
// every 0 0$01 do var timer ;
29312: GO 29314
29314: DISABLE
29315: LD_INT 0
29317: PPUSH
// begin timer := 0 0$30 ;
29318: LD_ADDR_VAR 0 1
29322: PUSH
29323: LD_INT 1050
29325: ST_TO_ADDR
// repeat wait ( timer ) ;
29326: LD_VAR 0 1
29330: PPUSH
29331: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
29335: LD_EXP 56
29339: PUSH
29340: LD_INT 6
29342: GREATEREQUAL
29343: PUSH
29344: LD_EXP 56
29348: PUSH
29349: LD_INT 12
29351: LESS
29352: AND
29353: IFFALSE 29369
// timer := timer + 0 0$3 ;
29355: LD_ADDR_VAR 0 1
29359: PUSH
29360: LD_VAR 0 1
29364: PUSH
29365: LD_INT 105
29367: PLUS
29368: ST_TO_ADDR
// if cratesSpawned >= 12 then
29369: LD_EXP 56
29373: PUSH
29374: LD_INT 12
29376: GREATEREQUAL
29377: IFFALSE 29393
// timer := timer + 0 0$9 ;
29379: LD_ADDR_VAR 0 1
29383: PUSH
29384: LD_VAR 0 1
29388: PUSH
29389: LD_INT 315
29391: PLUS
29392: ST_TO_ADDR
// if timer > 3 3$00 then
29393: LD_VAR 0 1
29397: PUSH
29398: LD_INT 6300
29400: GREATER
29401: IFFALSE 29411
// timer := 0 0$50 ;
29403: LD_ADDR_VAR 0 1
29407: PUSH
29408: LD_INT 1750
29410: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29411: LD_INT 1
29413: PPUSH
29414: LD_INT 5
29416: PPUSH
29417: CALL_OW 12
29421: PPUSH
29422: LD_INT 16
29424: PPUSH
29425: LD_INT 1
29427: PPUSH
29428: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29432: LD_ADDR_EXP 56
29436: PUSH
29437: LD_EXP 56
29441: PUSH
29442: LD_INT 1
29444: PLUS
29445: ST_TO_ADDR
// until false ;
29446: LD_INT 0
29448: IFFALSE 29326
// end ; end_of_file
29450: PPOPN 1
29452: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
29453: GO 29455
29455: DISABLE
// begin ru_radar := 98 ;
29456: LD_ADDR_EXP 69
29460: PUSH
29461: LD_INT 98
29463: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29464: LD_ADDR_EXP 70
29468: PUSH
29469: LD_INT 89
29471: ST_TO_ADDR
// us_hack := 99 ;
29472: LD_ADDR_EXP 71
29476: PUSH
29477: LD_INT 99
29479: ST_TO_ADDR
// us_artillery := 97 ;
29480: LD_ADDR_EXP 72
29484: PUSH
29485: LD_INT 97
29487: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29488: LD_ADDR_EXP 73
29492: PUSH
29493: LD_INT 91
29495: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29496: LD_ADDR_EXP 74
29500: PUSH
29501: LD_INT 92
29503: ST_TO_ADDR
// tech_Artillery := 80 ;
29504: LD_ADDR_EXP 75
29508: PUSH
29509: LD_INT 80
29511: ST_TO_ADDR
// tech_RadMat := 81 ;
29512: LD_ADDR_EXP 76
29516: PUSH
29517: LD_INT 81
29519: ST_TO_ADDR
// tech_BasicTools := 82 ;
29520: LD_ADDR_EXP 77
29524: PUSH
29525: LD_INT 82
29527: ST_TO_ADDR
// tech_Cargo := 83 ;
29528: LD_ADDR_EXP 78
29532: PUSH
29533: LD_INT 83
29535: ST_TO_ADDR
// tech_Track := 84 ;
29536: LD_ADDR_EXP 79
29540: PUSH
29541: LD_INT 84
29543: ST_TO_ADDR
// tech_Crane := 85 ;
29544: LD_ADDR_EXP 80
29548: PUSH
29549: LD_INT 85
29551: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29552: LD_ADDR_EXP 81
29556: PUSH
29557: LD_INT 86
29559: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29560: LD_ADDR_EXP 82
29564: PUSH
29565: LD_INT 87
29567: ST_TO_ADDR
// end ; end_of_file end_of_file
29568: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
29569: GO 29571
29571: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29572: LD_STRING initStreamRollete();
29574: PPUSH
29575: CALL_OW 559
// InitStreamMode ;
29579: CALL 29588 0 0
// DefineStreamItems ( ) ;
29583: CALL 30028 0 0
// end ;
29587: END
// function InitStreamMode ; begin
29588: LD_INT 0
29590: PPUSH
// streamModeActive := false ;
29591: LD_ADDR_EXP 83
29595: PUSH
29596: LD_INT 0
29598: ST_TO_ADDR
// normalCounter := 36 ;
29599: LD_ADDR_EXP 84
29603: PUSH
29604: LD_INT 36
29606: ST_TO_ADDR
// hardcoreCounter := 16 ;
29607: LD_ADDR_EXP 85
29611: PUSH
29612: LD_INT 16
29614: ST_TO_ADDR
// sRocket := false ;
29615: LD_ADDR_EXP 88
29619: PUSH
29620: LD_INT 0
29622: ST_TO_ADDR
// sSpeed := false ;
29623: LD_ADDR_EXP 87
29627: PUSH
29628: LD_INT 0
29630: ST_TO_ADDR
// sEngine := false ;
29631: LD_ADDR_EXP 89
29635: PUSH
29636: LD_INT 0
29638: ST_TO_ADDR
// sSpec := false ;
29639: LD_ADDR_EXP 86
29643: PUSH
29644: LD_INT 0
29646: ST_TO_ADDR
// sLevel := false ;
29647: LD_ADDR_EXP 90
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// sArmoury := false ;
29655: LD_ADDR_EXP 91
29659: PUSH
29660: LD_INT 0
29662: ST_TO_ADDR
// sRadar := false ;
29663: LD_ADDR_EXP 92
29667: PUSH
29668: LD_INT 0
29670: ST_TO_ADDR
// sBunker := false ;
29671: LD_ADDR_EXP 93
29675: PUSH
29676: LD_INT 0
29678: ST_TO_ADDR
// sHack := false ;
29679: LD_ADDR_EXP 94
29683: PUSH
29684: LD_INT 0
29686: ST_TO_ADDR
// sFire := false ;
29687: LD_ADDR_EXP 95
29691: PUSH
29692: LD_INT 0
29694: ST_TO_ADDR
// sRefresh := false ;
29695: LD_ADDR_EXP 96
29699: PUSH
29700: LD_INT 0
29702: ST_TO_ADDR
// sExp := false ;
29703: LD_ADDR_EXP 97
29707: PUSH
29708: LD_INT 0
29710: ST_TO_ADDR
// sDepot := false ;
29711: LD_ADDR_EXP 98
29715: PUSH
29716: LD_INT 0
29718: ST_TO_ADDR
// sFlag := false ;
29719: LD_ADDR_EXP 99
29723: PUSH
29724: LD_INT 0
29726: ST_TO_ADDR
// sKamikadze := false ;
29727: LD_ADDR_EXP 107
29731: PUSH
29732: LD_INT 0
29734: ST_TO_ADDR
// sTroll := false ;
29735: LD_ADDR_EXP 108
29739: PUSH
29740: LD_INT 0
29742: ST_TO_ADDR
// sSlow := false ;
29743: LD_ADDR_EXP 109
29747: PUSH
29748: LD_INT 0
29750: ST_TO_ADDR
// sLack := false ;
29751: LD_ADDR_EXP 110
29755: PUSH
29756: LD_INT 0
29758: ST_TO_ADDR
// sTank := false ;
29759: LD_ADDR_EXP 112
29763: PUSH
29764: LD_INT 0
29766: ST_TO_ADDR
// sRemote := false ;
29767: LD_ADDR_EXP 113
29771: PUSH
29772: LD_INT 0
29774: ST_TO_ADDR
// sPowell := false ;
29775: LD_ADDR_EXP 114
29779: PUSH
29780: LD_INT 0
29782: ST_TO_ADDR
// sTeleport := false ;
29783: LD_ADDR_EXP 117
29787: PUSH
29788: LD_INT 0
29790: ST_TO_ADDR
// sOilTower := false ;
29791: LD_ADDR_EXP 119
29795: PUSH
29796: LD_INT 0
29798: ST_TO_ADDR
// sShovel := false ;
29799: LD_ADDR_EXP 120
29803: PUSH
29804: LD_INT 0
29806: ST_TO_ADDR
// sSheik := false ;
29807: LD_ADDR_EXP 121
29811: PUSH
29812: LD_INT 0
29814: ST_TO_ADDR
// sEarthquake := false ;
29815: LD_ADDR_EXP 123
29819: PUSH
29820: LD_INT 0
29822: ST_TO_ADDR
// sAI := false ;
29823: LD_ADDR_EXP 124
29827: PUSH
29828: LD_INT 0
29830: ST_TO_ADDR
// sCargo := false ;
29831: LD_ADDR_EXP 127
29835: PUSH
29836: LD_INT 0
29838: ST_TO_ADDR
// sDLaser := false ;
29839: LD_ADDR_EXP 128
29843: PUSH
29844: LD_INT 0
29846: ST_TO_ADDR
// sExchange := false ;
29847: LD_ADDR_EXP 129
29851: PUSH
29852: LD_INT 0
29854: ST_TO_ADDR
// sFac := false ;
29855: LD_ADDR_EXP 130
29859: PUSH
29860: LD_INT 0
29862: ST_TO_ADDR
// sPower := false ;
29863: LD_ADDR_EXP 131
29867: PUSH
29868: LD_INT 0
29870: ST_TO_ADDR
// sRandom := false ;
29871: LD_ADDR_EXP 132
29875: PUSH
29876: LD_INT 0
29878: ST_TO_ADDR
// sShield := false ;
29879: LD_ADDR_EXP 133
29883: PUSH
29884: LD_INT 0
29886: ST_TO_ADDR
// sTime := false ;
29887: LD_ADDR_EXP 134
29891: PUSH
29892: LD_INT 0
29894: ST_TO_ADDR
// sTools := false ;
29895: LD_ADDR_EXP 135
29899: PUSH
29900: LD_INT 0
29902: ST_TO_ADDR
// sSold := false ;
29903: LD_ADDR_EXP 100
29907: PUSH
29908: LD_INT 0
29910: ST_TO_ADDR
// sDiff := false ;
29911: LD_ADDR_EXP 101
29915: PUSH
29916: LD_INT 0
29918: ST_TO_ADDR
// sFog := false ;
29919: LD_ADDR_EXP 104
29923: PUSH
29924: LD_INT 0
29926: ST_TO_ADDR
// sReset := false ;
29927: LD_ADDR_EXP 105
29931: PUSH
29932: LD_INT 0
29934: ST_TO_ADDR
// sSun := false ;
29935: LD_ADDR_EXP 106
29939: PUSH
29940: LD_INT 0
29942: ST_TO_ADDR
// sTiger := false ;
29943: LD_ADDR_EXP 102
29947: PUSH
29948: LD_INT 0
29950: ST_TO_ADDR
// sBomb := false ;
29951: LD_ADDR_EXP 103
29955: PUSH
29956: LD_INT 0
29958: ST_TO_ADDR
// sWound := false ;
29959: LD_ADDR_EXP 111
29963: PUSH
29964: LD_INT 0
29966: ST_TO_ADDR
// sBetray := false ;
29967: LD_ADDR_EXP 115
29971: PUSH
29972: LD_INT 0
29974: ST_TO_ADDR
// sContamin := false ;
29975: LD_ADDR_EXP 116
29979: PUSH
29980: LD_INT 0
29982: ST_TO_ADDR
// sOil := false ;
29983: LD_ADDR_EXP 118
29987: PUSH
29988: LD_INT 0
29990: ST_TO_ADDR
// sStu := false ;
29991: LD_ADDR_EXP 122
29995: PUSH
29996: LD_INT 0
29998: ST_TO_ADDR
// sBazooka := false ;
29999: LD_ADDR_EXP 125
30003: PUSH
30004: LD_INT 0
30006: ST_TO_ADDR
// sMortar := false ;
30007: LD_ADDR_EXP 126
30011: PUSH
30012: LD_INT 0
30014: ST_TO_ADDR
// sRanger := false ;
30015: LD_ADDR_EXP 136
30019: PUSH
30020: LD_INT 0
30022: ST_TO_ADDR
// end ;
30023: LD_VAR 0 1
30027: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
// result := [ ] ;
30035: LD_ADDR_VAR 0 1
30039: PUSH
30040: EMPTY
30041: ST_TO_ADDR
// if campaign_id = 1 then
30042: LD_OWVAR 69
30046: PUSH
30047: LD_INT 1
30049: EQUAL
30050: IFFALSE 32988
// begin case mission_number of 1 :
30052: LD_OWVAR 70
30056: PUSH
30057: LD_INT 1
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30129
30065: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
30066: LD_ADDR_VAR 0 1
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: LD_INT 4
30076: PUSH
30077: LD_INT 11
30079: PUSH
30080: LD_INT 12
30082: PUSH
30083: LD_INT 15
30085: PUSH
30086: LD_INT 16
30088: PUSH
30089: LD_INT 22
30091: PUSH
30092: LD_INT 23
30094: PUSH
30095: LD_INT 26
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 101
30111: PUSH
30112: LD_INT 102
30114: PUSH
30115: LD_INT 106
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: ST_TO_ADDR
30127: GO 32986
30129: LD_INT 2
30131: DOUBLE
30132: EQUAL
30133: IFTRUE 30137
30135: GO 30209
30137: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
30138: LD_ADDR_VAR 0 1
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: LD_INT 4
30148: PUSH
30149: LD_INT 11
30151: PUSH
30152: LD_INT 12
30154: PUSH
30155: LD_INT 15
30157: PUSH
30158: LD_INT 16
30160: PUSH
30161: LD_INT 22
30163: PUSH
30164: LD_INT 23
30166: PUSH
30167: LD_INT 26
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 101
30183: PUSH
30184: LD_INT 102
30186: PUSH
30187: LD_INT 105
30189: PUSH
30190: LD_INT 106
30192: PUSH
30193: LD_INT 108
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: ST_TO_ADDR
30207: GO 32986
30209: LD_INT 3
30211: DOUBLE
30212: EQUAL
30213: IFTRUE 30217
30215: GO 30293
30217: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
30218: LD_ADDR_VAR 0 1
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: LD_INT 4
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: LD_INT 11
30234: PUSH
30235: LD_INT 12
30237: PUSH
30238: LD_INT 15
30240: PUSH
30241: LD_INT 16
30243: PUSH
30244: LD_INT 22
30246: PUSH
30247: LD_INT 26
30249: PUSH
30250: LD_INT 36
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 101
30267: PUSH
30268: LD_INT 102
30270: PUSH
30271: LD_INT 105
30273: PUSH
30274: LD_INT 106
30276: PUSH
30277: LD_INT 108
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: ST_TO_ADDR
30291: GO 32986
30293: LD_INT 4
30295: DOUBLE
30296: EQUAL
30297: IFTRUE 30301
30299: GO 30385
30301: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
30302: LD_ADDR_VAR 0 1
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: LD_INT 4
30312: PUSH
30313: LD_INT 5
30315: PUSH
30316: LD_INT 8
30318: PUSH
30319: LD_INT 11
30321: PUSH
30322: LD_INT 12
30324: PUSH
30325: LD_INT 15
30327: PUSH
30328: LD_INT 16
30330: PUSH
30331: LD_INT 22
30333: PUSH
30334: LD_INT 23
30336: PUSH
30337: LD_INT 26
30339: PUSH
30340: LD_INT 36
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 101
30359: PUSH
30360: LD_INT 102
30362: PUSH
30363: LD_INT 105
30365: PUSH
30366: LD_INT 106
30368: PUSH
30369: LD_INT 108
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: ST_TO_ADDR
30383: GO 32986
30385: LD_INT 5
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 30493
30393: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
30394: LD_ADDR_VAR 0 1
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 4
30404: PUSH
30405: LD_INT 5
30407: PUSH
30408: LD_INT 6
30410: PUSH
30411: LD_INT 8
30413: PUSH
30414: LD_INT 11
30416: PUSH
30417: LD_INT 12
30419: PUSH
30420: LD_INT 15
30422: PUSH
30423: LD_INT 16
30425: PUSH
30426: LD_INT 22
30428: PUSH
30429: LD_INT 23
30431: PUSH
30432: LD_INT 25
30434: PUSH
30435: LD_INT 26
30437: PUSH
30438: LD_INT 36
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 101
30459: PUSH
30460: LD_INT 102
30462: PUSH
30463: LD_INT 105
30465: PUSH
30466: LD_INT 106
30468: PUSH
30469: LD_INT 108
30471: PUSH
30472: LD_INT 109
30474: PUSH
30475: LD_INT 112
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: ST_TO_ADDR
30491: GO 32986
30493: LD_INT 6
30495: DOUBLE
30496: EQUAL
30497: IFTRUE 30501
30499: GO 30621
30501: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
30502: LD_ADDR_VAR 0 1
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 4
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: LD_INT 6
30518: PUSH
30519: LD_INT 8
30521: PUSH
30522: LD_INT 11
30524: PUSH
30525: LD_INT 12
30527: PUSH
30528: LD_INT 15
30530: PUSH
30531: LD_INT 16
30533: PUSH
30534: LD_INT 20
30536: PUSH
30537: LD_INT 21
30539: PUSH
30540: LD_INT 22
30542: PUSH
30543: LD_INT 23
30545: PUSH
30546: LD_INT 25
30548: PUSH
30549: LD_INT 26
30551: PUSH
30552: LD_INT 30
30554: PUSH
30555: LD_INT 31
30557: PUSH
30558: LD_INT 32
30560: PUSH
30561: LD_INT 36
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 101
30587: PUSH
30588: LD_INT 102
30590: PUSH
30591: LD_INT 105
30593: PUSH
30594: LD_INT 106
30596: PUSH
30597: LD_INT 108
30599: PUSH
30600: LD_INT 109
30602: PUSH
30603: LD_INT 112
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: ST_TO_ADDR
30619: GO 32986
30621: LD_INT 7
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30729
30629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
30630: LD_ADDR_VAR 0 1
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: LD_INT 5
30643: PUSH
30644: LD_INT 7
30646: PUSH
30647: LD_INT 11
30649: PUSH
30650: LD_INT 12
30652: PUSH
30653: LD_INT 15
30655: PUSH
30656: LD_INT 16
30658: PUSH
30659: LD_INT 20
30661: PUSH
30662: LD_INT 21
30664: PUSH
30665: LD_INT 22
30667: PUSH
30668: LD_INT 23
30670: PUSH
30671: LD_INT 25
30673: PUSH
30674: LD_INT 26
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 101
30695: PUSH
30696: LD_INT 102
30698: PUSH
30699: LD_INT 103
30701: PUSH
30702: LD_INT 105
30704: PUSH
30705: LD_INT 106
30707: PUSH
30708: LD_INT 108
30710: PUSH
30711: LD_INT 112
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: ST_TO_ADDR
30727: GO 32986
30729: LD_INT 8
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30865
30737: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
30738: LD_ADDR_VAR 0 1
30742: PUSH
30743: LD_INT 2
30745: PUSH
30746: LD_INT 4
30748: PUSH
30749: LD_INT 5
30751: PUSH
30752: LD_INT 6
30754: PUSH
30755: LD_INT 7
30757: PUSH
30758: LD_INT 8
30760: PUSH
30761: LD_INT 11
30763: PUSH
30764: LD_INT 12
30766: PUSH
30767: LD_INT 15
30769: PUSH
30770: LD_INT 16
30772: PUSH
30773: LD_INT 20
30775: PUSH
30776: LD_INT 21
30778: PUSH
30779: LD_INT 22
30781: PUSH
30782: LD_INT 23
30784: PUSH
30785: LD_INT 25
30787: PUSH
30788: LD_INT 26
30790: PUSH
30791: LD_INT 30
30793: PUSH
30794: LD_INT 31
30796: PUSH
30797: LD_INT 32
30799: PUSH
30800: LD_INT 36
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 101
30827: PUSH
30828: LD_INT 102
30830: PUSH
30831: LD_INT 103
30833: PUSH
30834: LD_INT 105
30836: PUSH
30837: LD_INT 106
30839: PUSH
30840: LD_INT 108
30842: PUSH
30843: LD_INT 109
30845: PUSH
30846: LD_INT 112
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: ST_TO_ADDR
30863: GO 32986
30865: LD_INT 9
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 31009
30873: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
30874: LD_ADDR_VAR 0 1
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 4
30884: PUSH
30885: LD_INT 5
30887: PUSH
30888: LD_INT 6
30890: PUSH
30891: LD_INT 7
30893: PUSH
30894: LD_INT 8
30896: PUSH
30897: LD_INT 11
30899: PUSH
30900: LD_INT 12
30902: PUSH
30903: LD_INT 15
30905: PUSH
30906: LD_INT 16
30908: PUSH
30909: LD_INT 20
30911: PUSH
30912: LD_INT 21
30914: PUSH
30915: LD_INT 22
30917: PUSH
30918: LD_INT 23
30920: PUSH
30921: LD_INT 25
30923: PUSH
30924: LD_INT 26
30926: PUSH
30927: LD_INT 28
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 31
30935: PUSH
30936: LD_INT 32
30938: PUSH
30939: LD_INT 36
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 101
30967: PUSH
30968: LD_INT 102
30970: PUSH
30971: LD_INT 103
30973: PUSH
30974: LD_INT 105
30976: PUSH
30977: LD_INT 106
30979: PUSH
30980: LD_INT 108
30982: PUSH
30983: LD_INT 109
30985: PUSH
30986: LD_INT 112
30988: PUSH
30989: LD_INT 114
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: ST_TO_ADDR
31007: GO 32986
31009: LD_INT 10
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31201
31017: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
31018: LD_ADDR_VAR 0 1
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 4
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: LD_INT 6
31034: PUSH
31035: LD_INT 7
31037: PUSH
31038: LD_INT 8
31040: PUSH
31041: LD_INT 9
31043: PUSH
31044: LD_INT 10
31046: PUSH
31047: LD_INT 11
31049: PUSH
31050: LD_INT 12
31052: PUSH
31053: LD_INT 13
31055: PUSH
31056: LD_INT 14
31058: PUSH
31059: LD_INT 15
31061: PUSH
31062: LD_INT 16
31064: PUSH
31065: LD_INT 17
31067: PUSH
31068: LD_INT 18
31070: PUSH
31071: LD_INT 19
31073: PUSH
31074: LD_INT 20
31076: PUSH
31077: LD_INT 21
31079: PUSH
31080: LD_INT 22
31082: PUSH
31083: LD_INT 23
31085: PUSH
31086: LD_INT 24
31088: PUSH
31089: LD_INT 25
31091: PUSH
31092: LD_INT 26
31094: PUSH
31095: LD_INT 28
31097: PUSH
31098: LD_INT 30
31100: PUSH
31101: LD_INT 31
31103: PUSH
31104: LD_INT 32
31106: PUSH
31107: LD_INT 36
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 101
31143: PUSH
31144: LD_INT 102
31146: PUSH
31147: LD_INT 103
31149: PUSH
31150: LD_INT 104
31152: PUSH
31153: LD_INT 105
31155: PUSH
31156: LD_INT 106
31158: PUSH
31159: LD_INT 107
31161: PUSH
31162: LD_INT 108
31164: PUSH
31165: LD_INT 109
31167: PUSH
31168: LD_INT 110
31170: PUSH
31171: LD_INT 111
31173: PUSH
31174: LD_INT 112
31176: PUSH
31177: LD_INT 114
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: ST_TO_ADDR
31199: GO 32986
31201: LD_INT 11
31203: DOUBLE
31204: EQUAL
31205: IFTRUE 31209
31207: GO 31401
31209: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
31210: LD_ADDR_VAR 0 1
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 4
31223: PUSH
31224: LD_INT 5
31226: PUSH
31227: LD_INT 6
31229: PUSH
31230: LD_INT 7
31232: PUSH
31233: LD_INT 8
31235: PUSH
31236: LD_INT 9
31238: PUSH
31239: LD_INT 10
31241: PUSH
31242: LD_INT 11
31244: PUSH
31245: LD_INT 12
31247: PUSH
31248: LD_INT 13
31250: PUSH
31251: LD_INT 14
31253: PUSH
31254: LD_INT 15
31256: PUSH
31257: LD_INT 16
31259: PUSH
31260: LD_INT 17
31262: PUSH
31263: LD_INT 18
31265: PUSH
31266: LD_INT 19
31268: PUSH
31269: LD_INT 20
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 22
31277: PUSH
31278: LD_INT 23
31280: PUSH
31281: LD_INT 24
31283: PUSH
31284: LD_INT 25
31286: PUSH
31287: LD_INT 26
31289: PUSH
31290: LD_INT 28
31292: PUSH
31293: LD_INT 30
31295: PUSH
31296: LD_INT 31
31298: PUSH
31299: LD_INT 32
31301: PUSH
31302: LD_INT 34
31304: PUSH
31305: LD_INT 36
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 101
31343: PUSH
31344: LD_INT 102
31346: PUSH
31347: LD_INT 103
31349: PUSH
31350: LD_INT 104
31352: PUSH
31353: LD_INT 105
31355: PUSH
31356: LD_INT 106
31358: PUSH
31359: LD_INT 107
31361: PUSH
31362: LD_INT 108
31364: PUSH
31365: LD_INT 109
31367: PUSH
31368: LD_INT 110
31370: PUSH
31371: LD_INT 111
31373: PUSH
31374: LD_INT 112
31376: PUSH
31377: LD_INT 114
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: ST_TO_ADDR
31399: GO 32986
31401: LD_INT 12
31403: DOUBLE
31404: EQUAL
31405: IFTRUE 31409
31407: GO 31617
31409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
31410: LD_ADDR_VAR 0 1
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: LD_INT 3
31423: PUSH
31424: LD_INT 4
31426: PUSH
31427: LD_INT 5
31429: PUSH
31430: LD_INT 6
31432: PUSH
31433: LD_INT 7
31435: PUSH
31436: LD_INT 8
31438: PUSH
31439: LD_INT 9
31441: PUSH
31442: LD_INT 10
31444: PUSH
31445: LD_INT 11
31447: PUSH
31448: LD_INT 12
31450: PUSH
31451: LD_INT 13
31453: PUSH
31454: LD_INT 14
31456: PUSH
31457: LD_INT 15
31459: PUSH
31460: LD_INT 16
31462: PUSH
31463: LD_INT 17
31465: PUSH
31466: LD_INT 18
31468: PUSH
31469: LD_INT 19
31471: PUSH
31472: LD_INT 20
31474: PUSH
31475: LD_INT 21
31477: PUSH
31478: LD_INT 22
31480: PUSH
31481: LD_INT 23
31483: PUSH
31484: LD_INT 24
31486: PUSH
31487: LD_INT 25
31489: PUSH
31490: LD_INT 26
31492: PUSH
31493: LD_INT 27
31495: PUSH
31496: LD_INT 28
31498: PUSH
31499: LD_INT 30
31501: PUSH
31502: LD_INT 31
31504: PUSH
31505: LD_INT 32
31507: PUSH
31508: LD_INT 33
31510: PUSH
31511: LD_INT 34
31513: PUSH
31514: LD_INT 36
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 101
31555: PUSH
31556: LD_INT 102
31558: PUSH
31559: LD_INT 103
31561: PUSH
31562: LD_INT 104
31564: PUSH
31565: LD_INT 105
31567: PUSH
31568: LD_INT 106
31570: PUSH
31571: LD_INT 107
31573: PUSH
31574: LD_INT 108
31576: PUSH
31577: LD_INT 109
31579: PUSH
31580: LD_INT 110
31582: PUSH
31583: LD_INT 111
31585: PUSH
31586: LD_INT 112
31588: PUSH
31589: LD_INT 113
31591: PUSH
31592: LD_INT 114
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: ST_TO_ADDR
31615: GO 32986
31617: LD_INT 13
31619: DOUBLE
31620: EQUAL
31621: IFTRUE 31625
31623: GO 31821
31625: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
31626: LD_ADDR_VAR 0 1
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: LD_INT 4
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: LD_INT 8
31648: PUSH
31649: LD_INT 9
31651: PUSH
31652: LD_INT 10
31654: PUSH
31655: LD_INT 11
31657: PUSH
31658: LD_INT 12
31660: PUSH
31661: LD_INT 14
31663: PUSH
31664: LD_INT 15
31666: PUSH
31667: LD_INT 16
31669: PUSH
31670: LD_INT 17
31672: PUSH
31673: LD_INT 18
31675: PUSH
31676: LD_INT 19
31678: PUSH
31679: LD_INT 20
31681: PUSH
31682: LD_INT 21
31684: PUSH
31685: LD_INT 22
31687: PUSH
31688: LD_INT 23
31690: PUSH
31691: LD_INT 24
31693: PUSH
31694: LD_INT 25
31696: PUSH
31697: LD_INT 26
31699: PUSH
31700: LD_INT 27
31702: PUSH
31703: LD_INT 28
31705: PUSH
31706: LD_INT 30
31708: PUSH
31709: LD_INT 31
31711: PUSH
31712: LD_INT 32
31714: PUSH
31715: LD_INT 33
31717: PUSH
31718: LD_INT 34
31720: PUSH
31721: LD_INT 36
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 101
31759: PUSH
31760: LD_INT 102
31762: PUSH
31763: LD_INT 103
31765: PUSH
31766: LD_INT 104
31768: PUSH
31769: LD_INT 105
31771: PUSH
31772: LD_INT 106
31774: PUSH
31775: LD_INT 107
31777: PUSH
31778: LD_INT 108
31780: PUSH
31781: LD_INT 109
31783: PUSH
31784: LD_INT 110
31786: PUSH
31787: LD_INT 111
31789: PUSH
31790: LD_INT 112
31792: PUSH
31793: LD_INT 113
31795: PUSH
31796: LD_INT 114
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: ST_TO_ADDR
31819: GO 32986
31821: LD_INT 14
31823: DOUBLE
31824: EQUAL
31825: IFTRUE 31829
31827: GO 32041
31829: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
31830: LD_ADDR_VAR 0 1
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 3
31843: PUSH
31844: LD_INT 4
31846: PUSH
31847: LD_INT 5
31849: PUSH
31850: LD_INT 6
31852: PUSH
31853: LD_INT 7
31855: PUSH
31856: LD_INT 8
31858: PUSH
31859: LD_INT 9
31861: PUSH
31862: LD_INT 10
31864: PUSH
31865: LD_INT 11
31867: PUSH
31868: LD_INT 12
31870: PUSH
31871: LD_INT 13
31873: PUSH
31874: LD_INT 14
31876: PUSH
31877: LD_INT 15
31879: PUSH
31880: LD_INT 16
31882: PUSH
31883: LD_INT 17
31885: PUSH
31886: LD_INT 18
31888: PUSH
31889: LD_INT 19
31891: PUSH
31892: LD_INT 20
31894: PUSH
31895: LD_INT 21
31897: PUSH
31898: LD_INT 22
31900: PUSH
31901: LD_INT 23
31903: PUSH
31904: LD_INT 24
31906: PUSH
31907: LD_INT 25
31909: PUSH
31910: LD_INT 26
31912: PUSH
31913: LD_INT 27
31915: PUSH
31916: LD_INT 28
31918: PUSH
31919: LD_INT 29
31921: PUSH
31922: LD_INT 30
31924: PUSH
31925: LD_INT 31
31927: PUSH
31928: LD_INT 32
31930: PUSH
31931: LD_INT 33
31933: PUSH
31934: LD_INT 34
31936: PUSH
31937: LD_INT 36
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 101
31979: PUSH
31980: LD_INT 102
31982: PUSH
31983: LD_INT 103
31985: PUSH
31986: LD_INT 104
31988: PUSH
31989: LD_INT 105
31991: PUSH
31992: LD_INT 106
31994: PUSH
31995: LD_INT 107
31997: PUSH
31998: LD_INT 108
32000: PUSH
32001: LD_INT 109
32003: PUSH
32004: LD_INT 110
32006: PUSH
32007: LD_INT 111
32009: PUSH
32010: LD_INT 112
32012: PUSH
32013: LD_INT 113
32015: PUSH
32016: LD_INT 114
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: ST_TO_ADDR
32039: GO 32986
32041: LD_INT 15
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32261
32049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
32050: LD_ADDR_VAR 0 1
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: LD_INT 4
32066: PUSH
32067: LD_INT 5
32069: PUSH
32070: LD_INT 6
32072: PUSH
32073: LD_INT 7
32075: PUSH
32076: LD_INT 8
32078: PUSH
32079: LD_INT 9
32081: PUSH
32082: LD_INT 10
32084: PUSH
32085: LD_INT 11
32087: PUSH
32088: LD_INT 12
32090: PUSH
32091: LD_INT 13
32093: PUSH
32094: LD_INT 14
32096: PUSH
32097: LD_INT 15
32099: PUSH
32100: LD_INT 16
32102: PUSH
32103: LD_INT 17
32105: PUSH
32106: LD_INT 18
32108: PUSH
32109: LD_INT 19
32111: PUSH
32112: LD_INT 20
32114: PUSH
32115: LD_INT 21
32117: PUSH
32118: LD_INT 22
32120: PUSH
32121: LD_INT 23
32123: PUSH
32124: LD_INT 24
32126: PUSH
32127: LD_INT 25
32129: PUSH
32130: LD_INT 26
32132: PUSH
32133: LD_INT 27
32135: PUSH
32136: LD_INT 28
32138: PUSH
32139: LD_INT 29
32141: PUSH
32142: LD_INT 30
32144: PUSH
32145: LD_INT 31
32147: PUSH
32148: LD_INT 32
32150: PUSH
32151: LD_INT 33
32153: PUSH
32154: LD_INT 34
32156: PUSH
32157: LD_INT 36
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 101
32199: PUSH
32200: LD_INT 102
32202: PUSH
32203: LD_INT 103
32205: PUSH
32206: LD_INT 104
32208: PUSH
32209: LD_INT 105
32211: PUSH
32212: LD_INT 106
32214: PUSH
32215: LD_INT 107
32217: PUSH
32218: LD_INT 108
32220: PUSH
32221: LD_INT 109
32223: PUSH
32224: LD_INT 110
32226: PUSH
32227: LD_INT 111
32229: PUSH
32230: LD_INT 112
32232: PUSH
32233: LD_INT 113
32235: PUSH
32236: LD_INT 114
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: ST_TO_ADDR
32259: GO 32986
32261: LD_INT 16
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32269
32267: GO 32393
32269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
32270: LD_ADDR_VAR 0 1
32274: PUSH
32275: LD_INT 2
32277: PUSH
32278: LD_INT 4
32280: PUSH
32281: LD_INT 5
32283: PUSH
32284: LD_INT 7
32286: PUSH
32287: LD_INT 11
32289: PUSH
32290: LD_INT 12
32292: PUSH
32293: LD_INT 15
32295: PUSH
32296: LD_INT 16
32298: PUSH
32299: LD_INT 20
32301: PUSH
32302: LD_INT 21
32304: PUSH
32305: LD_INT 22
32307: PUSH
32308: LD_INT 23
32310: PUSH
32311: LD_INT 25
32313: PUSH
32314: LD_INT 26
32316: PUSH
32317: LD_INT 30
32319: PUSH
32320: LD_INT 31
32322: PUSH
32323: LD_INT 32
32325: PUSH
32326: LD_INT 33
32328: PUSH
32329: LD_INT 34
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 101
32355: PUSH
32356: LD_INT 102
32358: PUSH
32359: LD_INT 103
32361: PUSH
32362: LD_INT 106
32364: PUSH
32365: LD_INT 108
32367: PUSH
32368: LD_INT 112
32370: PUSH
32371: LD_INT 113
32373: PUSH
32374: LD_INT 114
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 32986
32393: LD_INT 17
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32613
32401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
32402: LD_ADDR_VAR 0 1
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: LD_INT 6
32424: PUSH
32425: LD_INT 7
32427: PUSH
32428: LD_INT 8
32430: PUSH
32431: LD_INT 9
32433: PUSH
32434: LD_INT 10
32436: PUSH
32437: LD_INT 11
32439: PUSH
32440: LD_INT 12
32442: PUSH
32443: LD_INT 13
32445: PUSH
32446: LD_INT 14
32448: PUSH
32449: LD_INT 15
32451: PUSH
32452: LD_INT 16
32454: PUSH
32455: LD_INT 17
32457: PUSH
32458: LD_INT 18
32460: PUSH
32461: LD_INT 19
32463: PUSH
32464: LD_INT 20
32466: PUSH
32467: LD_INT 21
32469: PUSH
32470: LD_INT 22
32472: PUSH
32473: LD_INT 23
32475: PUSH
32476: LD_INT 24
32478: PUSH
32479: LD_INT 25
32481: PUSH
32482: LD_INT 26
32484: PUSH
32485: LD_INT 27
32487: PUSH
32488: LD_INT 28
32490: PUSH
32491: LD_INT 29
32493: PUSH
32494: LD_INT 30
32496: PUSH
32497: LD_INT 31
32499: PUSH
32500: LD_INT 32
32502: PUSH
32503: LD_INT 33
32505: PUSH
32506: LD_INT 34
32508: PUSH
32509: LD_INT 36
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 101
32551: PUSH
32552: LD_INT 102
32554: PUSH
32555: LD_INT 103
32557: PUSH
32558: LD_INT 104
32560: PUSH
32561: LD_INT 105
32563: PUSH
32564: LD_INT 106
32566: PUSH
32567: LD_INT 107
32569: PUSH
32570: LD_INT 108
32572: PUSH
32573: LD_INT 109
32575: PUSH
32576: LD_INT 110
32578: PUSH
32579: LD_INT 111
32581: PUSH
32582: LD_INT 112
32584: PUSH
32585: LD_INT 113
32587: PUSH
32588: LD_INT 114
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: ST_TO_ADDR
32611: GO 32986
32613: LD_INT 18
32615: DOUBLE
32616: EQUAL
32617: IFTRUE 32621
32619: GO 32757
32621: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
32622: LD_ADDR_VAR 0 1
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: LD_INT 5
32635: PUSH
32636: LD_INT 7
32638: PUSH
32639: LD_INT 11
32641: PUSH
32642: LD_INT 12
32644: PUSH
32645: LD_INT 15
32647: PUSH
32648: LD_INT 16
32650: PUSH
32651: LD_INT 20
32653: PUSH
32654: LD_INT 21
32656: PUSH
32657: LD_INT 22
32659: PUSH
32660: LD_INT 23
32662: PUSH
32663: LD_INT 25
32665: PUSH
32666: LD_INT 26
32668: PUSH
32669: LD_INT 30
32671: PUSH
32672: LD_INT 31
32674: PUSH
32675: LD_INT 32
32677: PUSH
32678: LD_INT 33
32680: PUSH
32681: LD_INT 34
32683: PUSH
32684: LD_INT 35
32686: PUSH
32687: LD_INT 36
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 101
32715: PUSH
32716: LD_INT 102
32718: PUSH
32719: LD_INT 103
32721: PUSH
32722: LD_INT 106
32724: PUSH
32725: LD_INT 108
32727: PUSH
32728: LD_INT 112
32730: PUSH
32731: LD_INT 113
32733: PUSH
32734: LD_INT 114
32736: PUSH
32737: LD_INT 115
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: ST_TO_ADDR
32755: GO 32986
32757: LD_INT 19
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32985
32765: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
32766: LD_ADDR_VAR 0 1
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 4
32782: PUSH
32783: LD_INT 5
32785: PUSH
32786: LD_INT 6
32788: PUSH
32789: LD_INT 7
32791: PUSH
32792: LD_INT 8
32794: PUSH
32795: LD_INT 9
32797: PUSH
32798: LD_INT 10
32800: PUSH
32801: LD_INT 11
32803: PUSH
32804: LD_INT 12
32806: PUSH
32807: LD_INT 13
32809: PUSH
32810: LD_INT 14
32812: PUSH
32813: LD_INT 15
32815: PUSH
32816: LD_INT 16
32818: PUSH
32819: LD_INT 17
32821: PUSH
32822: LD_INT 18
32824: PUSH
32825: LD_INT 19
32827: PUSH
32828: LD_INT 20
32830: PUSH
32831: LD_INT 21
32833: PUSH
32834: LD_INT 22
32836: PUSH
32837: LD_INT 23
32839: PUSH
32840: LD_INT 24
32842: PUSH
32843: LD_INT 25
32845: PUSH
32846: LD_INT 26
32848: PUSH
32849: LD_INT 27
32851: PUSH
32852: LD_INT 28
32854: PUSH
32855: LD_INT 29
32857: PUSH
32858: LD_INT 30
32860: PUSH
32861: LD_INT 31
32863: PUSH
32864: LD_INT 32
32866: PUSH
32867: LD_INT 33
32869: PUSH
32870: LD_INT 34
32872: PUSH
32873: LD_INT 35
32875: PUSH
32876: LD_INT 36
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 101
32919: PUSH
32920: LD_INT 102
32922: PUSH
32923: LD_INT 103
32925: PUSH
32926: LD_INT 104
32928: PUSH
32929: LD_INT 105
32931: PUSH
32932: LD_INT 106
32934: PUSH
32935: LD_INT 107
32937: PUSH
32938: LD_INT 108
32940: PUSH
32941: LD_INT 109
32943: PUSH
32944: LD_INT 110
32946: PUSH
32947: LD_INT 111
32949: PUSH
32950: LD_INT 112
32952: PUSH
32953: LD_INT 113
32955: PUSH
32956: LD_INT 114
32958: PUSH
32959: LD_INT 115
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: ST_TO_ADDR
32983: GO 32986
32985: POP
// end else
32986: GO 33205
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
32988: LD_ADDR_VAR 0 1
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 4
33004: PUSH
33005: LD_INT 5
33007: PUSH
33008: LD_INT 6
33010: PUSH
33011: LD_INT 7
33013: PUSH
33014: LD_INT 8
33016: PUSH
33017: LD_INT 9
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 12
33028: PUSH
33029: LD_INT 13
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: LD_INT 15
33037: PUSH
33038: LD_INT 16
33040: PUSH
33041: LD_INT 17
33043: PUSH
33044: LD_INT 18
33046: PUSH
33047: LD_INT 19
33049: PUSH
33050: LD_INT 20
33052: PUSH
33053: LD_INT 21
33055: PUSH
33056: LD_INT 22
33058: PUSH
33059: LD_INT 23
33061: PUSH
33062: LD_INT 24
33064: PUSH
33065: LD_INT 25
33067: PUSH
33068: LD_INT 26
33070: PUSH
33071: LD_INT 27
33073: PUSH
33074: LD_INT 28
33076: PUSH
33077: LD_INT 29
33079: PUSH
33080: LD_INT 30
33082: PUSH
33083: LD_INT 31
33085: PUSH
33086: LD_INT 32
33088: PUSH
33089: LD_INT 33
33091: PUSH
33092: LD_INT 34
33094: PUSH
33095: LD_INT 35
33097: PUSH
33098: LD_INT 36
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 101
33141: PUSH
33142: LD_INT 102
33144: PUSH
33145: LD_INT 103
33147: PUSH
33148: LD_INT 104
33150: PUSH
33151: LD_INT 105
33153: PUSH
33154: LD_INT 106
33156: PUSH
33157: LD_INT 107
33159: PUSH
33160: LD_INT 108
33162: PUSH
33163: LD_INT 109
33165: PUSH
33166: LD_INT 110
33168: PUSH
33169: LD_INT 111
33171: PUSH
33172: LD_INT 112
33174: PUSH
33175: LD_INT 113
33177: PUSH
33178: LD_INT 114
33180: PUSH
33181: LD_INT 115
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: ST_TO_ADDR
// if result then
33205: LD_VAR 0 1
33209: IFFALSE 33498
// begin normal :=  ;
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_STRING 
33218: ST_TO_ADDR
// hardcore :=  ;
33219: LD_ADDR_VAR 0 4
33223: PUSH
33224: LD_STRING 
33226: ST_TO_ADDR
// for i = 1 to normalCounter do
33227: LD_ADDR_VAR 0 5
33231: PUSH
33232: DOUBLE
33233: LD_INT 1
33235: DEC
33236: ST_TO_ADDR
33237: LD_EXP 84
33241: PUSH
33242: FOR_TO
33243: IFFALSE 33344
// begin tmp := 0 ;
33245: LD_ADDR_VAR 0 2
33249: PUSH
33250: LD_STRING 0
33252: ST_TO_ADDR
// if result [ 1 ] then
33253: LD_VAR 0 1
33257: PUSH
33258: LD_INT 1
33260: ARRAY
33261: IFFALSE 33326
// if result [ 1 ] [ 1 ] = i then
33263: LD_VAR 0 1
33267: PUSH
33268: LD_INT 1
33270: ARRAY
33271: PUSH
33272: LD_INT 1
33274: ARRAY
33275: PUSH
33276: LD_VAR 0 5
33280: EQUAL
33281: IFFALSE 33326
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33283: LD_ADDR_VAR 0 1
33287: PUSH
33288: LD_VAR 0 1
33292: PPUSH
33293: LD_INT 1
33295: PPUSH
33296: LD_VAR 0 1
33300: PUSH
33301: LD_INT 1
33303: ARRAY
33304: PPUSH
33305: LD_INT 1
33307: PPUSH
33308: CALL_OW 3
33312: PPUSH
33313: CALL_OW 1
33317: ST_TO_ADDR
// tmp := 1 ;
33318: LD_ADDR_VAR 0 2
33322: PUSH
33323: LD_STRING 1
33325: ST_TO_ADDR
// end ; normal := normal & tmp ;
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_VAR 0 3
33335: PUSH
33336: LD_VAR 0 2
33340: STR
33341: ST_TO_ADDR
// end ;
33342: GO 33242
33344: POP
33345: POP
// for i = 1 to hardcoreCounter do
33346: LD_ADDR_VAR 0 5
33350: PUSH
33351: DOUBLE
33352: LD_INT 1
33354: DEC
33355: ST_TO_ADDR
33356: LD_EXP 85
33360: PUSH
33361: FOR_TO
33362: IFFALSE 33467
// begin tmp := 0 ;
33364: LD_ADDR_VAR 0 2
33368: PUSH
33369: LD_STRING 0
33371: ST_TO_ADDR
// if result [ 2 ] then
33372: LD_VAR 0 1
33376: PUSH
33377: LD_INT 2
33379: ARRAY
33380: IFFALSE 33449
// if result [ 2 ] [ 1 ] = 100 + i then
33382: LD_VAR 0 1
33386: PUSH
33387: LD_INT 2
33389: ARRAY
33390: PUSH
33391: LD_INT 1
33393: ARRAY
33394: PUSH
33395: LD_INT 100
33397: PUSH
33398: LD_VAR 0 5
33402: PLUS
33403: EQUAL
33404: IFFALSE 33449
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33406: LD_ADDR_VAR 0 1
33410: PUSH
33411: LD_VAR 0 1
33415: PPUSH
33416: LD_INT 2
33418: PPUSH
33419: LD_VAR 0 1
33423: PUSH
33424: LD_INT 2
33426: ARRAY
33427: PPUSH
33428: LD_INT 1
33430: PPUSH
33431: CALL_OW 3
33435: PPUSH
33436: CALL_OW 1
33440: ST_TO_ADDR
// tmp := 1 ;
33441: LD_ADDR_VAR 0 2
33445: PUSH
33446: LD_STRING 1
33448: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33449: LD_ADDR_VAR 0 4
33453: PUSH
33454: LD_VAR 0 4
33458: PUSH
33459: LD_VAR 0 2
33463: STR
33464: ST_TO_ADDR
// end ;
33465: GO 33361
33467: POP
33468: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
33469: LD_STRING getStreamItemsFromMission("
33471: PUSH
33472: LD_VAR 0 3
33476: STR
33477: PUSH
33478: LD_STRING ","
33480: STR
33481: PUSH
33482: LD_VAR 0 4
33486: STR
33487: PUSH
33488: LD_STRING ")
33490: STR
33491: PPUSH
33492: CALL_OW 559
// end else
33496: GO 33505
// ToLua ( getStreamItemsFromMission("","") ) ;
33498: LD_STRING getStreamItemsFromMission("","")
33500: PPUSH
33501: CALL_OW 559
// end ;
33505: LD_VAR 0 1
33509: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
33510: LD_VAR 0 2
33514: PUSH
33515: LD_INT 100
33517: EQUAL
33518: IFFALSE 34467
// begin if not StreamModeActive then
33520: LD_EXP 83
33524: NOT
33525: IFFALSE 33535
// StreamModeActive := true ;
33527: LD_ADDR_EXP 83
33531: PUSH
33532: LD_INT 1
33534: ST_TO_ADDR
// if p3 = 0 then
33535: LD_VAR 0 3
33539: PUSH
33540: LD_INT 0
33542: EQUAL
33543: IFFALSE 33549
// InitStreamMode ;
33545: CALL 29588 0 0
// if p3 = 1 then
33549: LD_VAR 0 3
33553: PUSH
33554: LD_INT 1
33556: EQUAL
33557: IFFALSE 33567
// sRocket := true ;
33559: LD_ADDR_EXP 88
33563: PUSH
33564: LD_INT 1
33566: ST_TO_ADDR
// if p3 = 2 then
33567: LD_VAR 0 3
33571: PUSH
33572: LD_INT 2
33574: EQUAL
33575: IFFALSE 33585
// sSpeed := true ;
33577: LD_ADDR_EXP 87
33581: PUSH
33582: LD_INT 1
33584: ST_TO_ADDR
// if p3 = 3 then
33585: LD_VAR 0 3
33589: PUSH
33590: LD_INT 3
33592: EQUAL
33593: IFFALSE 33603
// sEngine := true ;
33595: LD_ADDR_EXP 89
33599: PUSH
33600: LD_INT 1
33602: ST_TO_ADDR
// if p3 = 4 then
33603: LD_VAR 0 3
33607: PUSH
33608: LD_INT 4
33610: EQUAL
33611: IFFALSE 33621
// sSpec := true ;
33613: LD_ADDR_EXP 86
33617: PUSH
33618: LD_INT 1
33620: ST_TO_ADDR
// if p3 = 5 then
33621: LD_VAR 0 3
33625: PUSH
33626: LD_INT 5
33628: EQUAL
33629: IFFALSE 33639
// sLevel := true ;
33631: LD_ADDR_EXP 90
33635: PUSH
33636: LD_INT 1
33638: ST_TO_ADDR
// if p3 = 6 then
33639: LD_VAR 0 3
33643: PUSH
33644: LD_INT 6
33646: EQUAL
33647: IFFALSE 33657
// sArmoury := true ;
33649: LD_ADDR_EXP 91
33653: PUSH
33654: LD_INT 1
33656: ST_TO_ADDR
// if p3 = 7 then
33657: LD_VAR 0 3
33661: PUSH
33662: LD_INT 7
33664: EQUAL
33665: IFFALSE 33675
// sRadar := true ;
33667: LD_ADDR_EXP 92
33671: PUSH
33672: LD_INT 1
33674: ST_TO_ADDR
// if p3 = 8 then
33675: LD_VAR 0 3
33679: PUSH
33680: LD_INT 8
33682: EQUAL
33683: IFFALSE 33693
// sBunker := true ;
33685: LD_ADDR_EXP 93
33689: PUSH
33690: LD_INT 1
33692: ST_TO_ADDR
// if p3 = 9 then
33693: LD_VAR 0 3
33697: PUSH
33698: LD_INT 9
33700: EQUAL
33701: IFFALSE 33711
// sHack := true ;
33703: LD_ADDR_EXP 94
33707: PUSH
33708: LD_INT 1
33710: ST_TO_ADDR
// if p3 = 10 then
33711: LD_VAR 0 3
33715: PUSH
33716: LD_INT 10
33718: EQUAL
33719: IFFALSE 33729
// sFire := true ;
33721: LD_ADDR_EXP 95
33725: PUSH
33726: LD_INT 1
33728: ST_TO_ADDR
// if p3 = 11 then
33729: LD_VAR 0 3
33733: PUSH
33734: LD_INT 11
33736: EQUAL
33737: IFFALSE 33747
// sRefresh := true ;
33739: LD_ADDR_EXP 96
33743: PUSH
33744: LD_INT 1
33746: ST_TO_ADDR
// if p3 = 12 then
33747: LD_VAR 0 3
33751: PUSH
33752: LD_INT 12
33754: EQUAL
33755: IFFALSE 33765
// sExp := true ;
33757: LD_ADDR_EXP 97
33761: PUSH
33762: LD_INT 1
33764: ST_TO_ADDR
// if p3 = 13 then
33765: LD_VAR 0 3
33769: PUSH
33770: LD_INT 13
33772: EQUAL
33773: IFFALSE 33783
// sDepot := true ;
33775: LD_ADDR_EXP 98
33779: PUSH
33780: LD_INT 1
33782: ST_TO_ADDR
// if p3 = 14 then
33783: LD_VAR 0 3
33787: PUSH
33788: LD_INT 14
33790: EQUAL
33791: IFFALSE 33801
// sFlag := true ;
33793: LD_ADDR_EXP 99
33797: PUSH
33798: LD_INT 1
33800: ST_TO_ADDR
// if p3 = 15 then
33801: LD_VAR 0 3
33805: PUSH
33806: LD_INT 15
33808: EQUAL
33809: IFFALSE 33819
// sKamikadze := true ;
33811: LD_ADDR_EXP 107
33815: PUSH
33816: LD_INT 1
33818: ST_TO_ADDR
// if p3 = 16 then
33819: LD_VAR 0 3
33823: PUSH
33824: LD_INT 16
33826: EQUAL
33827: IFFALSE 33837
// sTroll := true ;
33829: LD_ADDR_EXP 108
33833: PUSH
33834: LD_INT 1
33836: ST_TO_ADDR
// if p3 = 17 then
33837: LD_VAR 0 3
33841: PUSH
33842: LD_INT 17
33844: EQUAL
33845: IFFALSE 33855
// sSlow := true ;
33847: LD_ADDR_EXP 109
33851: PUSH
33852: LD_INT 1
33854: ST_TO_ADDR
// if p3 = 18 then
33855: LD_VAR 0 3
33859: PUSH
33860: LD_INT 18
33862: EQUAL
33863: IFFALSE 33873
// sLack := true ;
33865: LD_ADDR_EXP 110
33869: PUSH
33870: LD_INT 1
33872: ST_TO_ADDR
// if p3 = 19 then
33873: LD_VAR 0 3
33877: PUSH
33878: LD_INT 19
33880: EQUAL
33881: IFFALSE 33891
// sTank := true ;
33883: LD_ADDR_EXP 112
33887: PUSH
33888: LD_INT 1
33890: ST_TO_ADDR
// if p3 = 20 then
33891: LD_VAR 0 3
33895: PUSH
33896: LD_INT 20
33898: EQUAL
33899: IFFALSE 33909
// sRemote := true ;
33901: LD_ADDR_EXP 113
33905: PUSH
33906: LD_INT 1
33908: ST_TO_ADDR
// if p3 = 21 then
33909: LD_VAR 0 3
33913: PUSH
33914: LD_INT 21
33916: EQUAL
33917: IFFALSE 33927
// sPowell := true ;
33919: LD_ADDR_EXP 114
33923: PUSH
33924: LD_INT 1
33926: ST_TO_ADDR
// if p3 = 22 then
33927: LD_VAR 0 3
33931: PUSH
33932: LD_INT 22
33934: EQUAL
33935: IFFALSE 33945
// sTeleport := true ;
33937: LD_ADDR_EXP 117
33941: PUSH
33942: LD_INT 1
33944: ST_TO_ADDR
// if p3 = 23 then
33945: LD_VAR 0 3
33949: PUSH
33950: LD_INT 23
33952: EQUAL
33953: IFFALSE 33963
// sOilTower := true ;
33955: LD_ADDR_EXP 119
33959: PUSH
33960: LD_INT 1
33962: ST_TO_ADDR
// if p3 = 24 then
33963: LD_VAR 0 3
33967: PUSH
33968: LD_INT 24
33970: EQUAL
33971: IFFALSE 33981
// sShovel := true ;
33973: LD_ADDR_EXP 120
33977: PUSH
33978: LD_INT 1
33980: ST_TO_ADDR
// if p3 = 25 then
33981: LD_VAR 0 3
33985: PUSH
33986: LD_INT 25
33988: EQUAL
33989: IFFALSE 33999
// sSheik := true ;
33991: LD_ADDR_EXP 121
33995: PUSH
33996: LD_INT 1
33998: ST_TO_ADDR
// if p3 = 26 then
33999: LD_VAR 0 3
34003: PUSH
34004: LD_INT 26
34006: EQUAL
34007: IFFALSE 34017
// sEarthquake := true ;
34009: LD_ADDR_EXP 123
34013: PUSH
34014: LD_INT 1
34016: ST_TO_ADDR
// if p3 = 27 then
34017: LD_VAR 0 3
34021: PUSH
34022: LD_INT 27
34024: EQUAL
34025: IFFALSE 34035
// sAI := true ;
34027: LD_ADDR_EXP 124
34031: PUSH
34032: LD_INT 1
34034: ST_TO_ADDR
// if p3 = 28 then
34035: LD_VAR 0 3
34039: PUSH
34040: LD_INT 28
34042: EQUAL
34043: IFFALSE 34053
// sCargo := true ;
34045: LD_ADDR_EXP 127
34049: PUSH
34050: LD_INT 1
34052: ST_TO_ADDR
// if p3 = 29 then
34053: LD_VAR 0 3
34057: PUSH
34058: LD_INT 29
34060: EQUAL
34061: IFFALSE 34071
// sDLaser := true ;
34063: LD_ADDR_EXP 128
34067: PUSH
34068: LD_INT 1
34070: ST_TO_ADDR
// if p3 = 30 then
34071: LD_VAR 0 3
34075: PUSH
34076: LD_INT 30
34078: EQUAL
34079: IFFALSE 34089
// sExchange := true ;
34081: LD_ADDR_EXP 129
34085: PUSH
34086: LD_INT 1
34088: ST_TO_ADDR
// if p3 = 31 then
34089: LD_VAR 0 3
34093: PUSH
34094: LD_INT 31
34096: EQUAL
34097: IFFALSE 34107
// sFac := true ;
34099: LD_ADDR_EXP 130
34103: PUSH
34104: LD_INT 1
34106: ST_TO_ADDR
// if p3 = 32 then
34107: LD_VAR 0 3
34111: PUSH
34112: LD_INT 32
34114: EQUAL
34115: IFFALSE 34125
// sPower := true ;
34117: LD_ADDR_EXP 131
34121: PUSH
34122: LD_INT 1
34124: ST_TO_ADDR
// if p3 = 33 then
34125: LD_VAR 0 3
34129: PUSH
34130: LD_INT 33
34132: EQUAL
34133: IFFALSE 34143
// sRandom := true ;
34135: LD_ADDR_EXP 132
34139: PUSH
34140: LD_INT 1
34142: ST_TO_ADDR
// if p3 = 34 then
34143: LD_VAR 0 3
34147: PUSH
34148: LD_INT 34
34150: EQUAL
34151: IFFALSE 34161
// sShield := true ;
34153: LD_ADDR_EXP 133
34157: PUSH
34158: LD_INT 1
34160: ST_TO_ADDR
// if p3 = 35 then
34161: LD_VAR 0 3
34165: PUSH
34166: LD_INT 35
34168: EQUAL
34169: IFFALSE 34179
// sTime := true ;
34171: LD_ADDR_EXP 134
34175: PUSH
34176: LD_INT 1
34178: ST_TO_ADDR
// if p3 = 36 then
34179: LD_VAR 0 3
34183: PUSH
34184: LD_INT 36
34186: EQUAL
34187: IFFALSE 34197
// sTools := true ;
34189: LD_ADDR_EXP 135
34193: PUSH
34194: LD_INT 1
34196: ST_TO_ADDR
// if p3 = 101 then
34197: LD_VAR 0 3
34201: PUSH
34202: LD_INT 101
34204: EQUAL
34205: IFFALSE 34215
// sSold := true ;
34207: LD_ADDR_EXP 100
34211: PUSH
34212: LD_INT 1
34214: ST_TO_ADDR
// if p3 = 102 then
34215: LD_VAR 0 3
34219: PUSH
34220: LD_INT 102
34222: EQUAL
34223: IFFALSE 34233
// sDiff := true ;
34225: LD_ADDR_EXP 101
34229: PUSH
34230: LD_INT 1
34232: ST_TO_ADDR
// if p3 = 103 then
34233: LD_VAR 0 3
34237: PUSH
34238: LD_INT 103
34240: EQUAL
34241: IFFALSE 34251
// sFog := true ;
34243: LD_ADDR_EXP 104
34247: PUSH
34248: LD_INT 1
34250: ST_TO_ADDR
// if p3 = 104 then
34251: LD_VAR 0 3
34255: PUSH
34256: LD_INT 104
34258: EQUAL
34259: IFFALSE 34269
// sReset := true ;
34261: LD_ADDR_EXP 105
34265: PUSH
34266: LD_INT 1
34268: ST_TO_ADDR
// if p3 = 105 then
34269: LD_VAR 0 3
34273: PUSH
34274: LD_INT 105
34276: EQUAL
34277: IFFALSE 34287
// sSun := true ;
34279: LD_ADDR_EXP 106
34283: PUSH
34284: LD_INT 1
34286: ST_TO_ADDR
// if p3 = 106 then
34287: LD_VAR 0 3
34291: PUSH
34292: LD_INT 106
34294: EQUAL
34295: IFFALSE 34305
// sTiger := true ;
34297: LD_ADDR_EXP 102
34301: PUSH
34302: LD_INT 1
34304: ST_TO_ADDR
// if p3 = 107 then
34305: LD_VAR 0 3
34309: PUSH
34310: LD_INT 107
34312: EQUAL
34313: IFFALSE 34323
// sBomb := true ;
34315: LD_ADDR_EXP 103
34319: PUSH
34320: LD_INT 1
34322: ST_TO_ADDR
// if p3 = 108 then
34323: LD_VAR 0 3
34327: PUSH
34328: LD_INT 108
34330: EQUAL
34331: IFFALSE 34341
// sWound := true ;
34333: LD_ADDR_EXP 111
34337: PUSH
34338: LD_INT 1
34340: ST_TO_ADDR
// if p3 = 109 then
34341: LD_VAR 0 3
34345: PUSH
34346: LD_INT 109
34348: EQUAL
34349: IFFALSE 34359
// sBetray := true ;
34351: LD_ADDR_EXP 115
34355: PUSH
34356: LD_INT 1
34358: ST_TO_ADDR
// if p3 = 110 then
34359: LD_VAR 0 3
34363: PUSH
34364: LD_INT 110
34366: EQUAL
34367: IFFALSE 34377
// sContamin := true ;
34369: LD_ADDR_EXP 116
34373: PUSH
34374: LD_INT 1
34376: ST_TO_ADDR
// if p3 = 111 then
34377: LD_VAR 0 3
34381: PUSH
34382: LD_INT 111
34384: EQUAL
34385: IFFALSE 34395
// sOil := true ;
34387: LD_ADDR_EXP 118
34391: PUSH
34392: LD_INT 1
34394: ST_TO_ADDR
// if p3 = 112 then
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 112
34402: EQUAL
34403: IFFALSE 34413
// sStu := true ;
34405: LD_ADDR_EXP 122
34409: PUSH
34410: LD_INT 1
34412: ST_TO_ADDR
// if p3 = 113 then
34413: LD_VAR 0 3
34417: PUSH
34418: LD_INT 113
34420: EQUAL
34421: IFFALSE 34431
// sBazooka := true ;
34423: LD_ADDR_EXP 125
34427: PUSH
34428: LD_INT 1
34430: ST_TO_ADDR
// if p3 = 114 then
34431: LD_VAR 0 3
34435: PUSH
34436: LD_INT 114
34438: EQUAL
34439: IFFALSE 34449
// sMortar := true ;
34441: LD_ADDR_EXP 126
34445: PUSH
34446: LD_INT 1
34448: ST_TO_ADDR
// if p3 = 115 then
34449: LD_VAR 0 3
34453: PUSH
34454: LD_INT 115
34456: EQUAL
34457: IFFALSE 34467
// sRanger := true ;
34459: LD_ADDR_EXP 136
34463: PUSH
34464: LD_INT 1
34466: ST_TO_ADDR
// end ; end ;
34467: PPOPN 6
34469: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
34470: LD_EXP 83
34474: PUSH
34475: LD_EXP 88
34479: AND
34480: IFFALSE 34604
34482: GO 34484
34484: DISABLE
34485: LD_INT 0
34487: PPUSH
34488: PPUSH
// begin enable ;
34489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34490: LD_ADDR_VAR 0 2
34494: PUSH
34495: LD_INT 22
34497: PUSH
34498: LD_OWVAR 2
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 2
34509: PUSH
34510: LD_INT 34
34512: PUSH
34513: LD_INT 7
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 34
34522: PUSH
34523: LD_INT 45
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 34
34532: PUSH
34533: LD_INT 28
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 34
34542: PUSH
34543: LD_INT 47
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PPUSH
34561: CALL_OW 69
34565: ST_TO_ADDR
// if not tmp then
34566: LD_VAR 0 2
34570: NOT
34571: IFFALSE 34575
// exit ;
34573: GO 34604
// for i in tmp do
34575: LD_ADDR_VAR 0 1
34579: PUSH
34580: LD_VAR 0 2
34584: PUSH
34585: FOR_IN
34586: IFFALSE 34602
// begin SetLives ( i , 0 ) ;
34588: LD_VAR 0 1
34592: PPUSH
34593: LD_INT 0
34595: PPUSH
34596: CALL_OW 234
// end ;
34600: GO 34585
34602: POP
34603: POP
// end ;
34604: PPOPN 2
34606: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34607: LD_EXP 83
34611: PUSH
34612: LD_EXP 89
34616: AND
34617: IFFALSE 34701
34619: GO 34621
34621: DISABLE
34622: LD_INT 0
34624: PPUSH
34625: PPUSH
// begin enable ;
34626: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34627: LD_ADDR_VAR 0 2
34631: PUSH
34632: LD_INT 22
34634: PUSH
34635: LD_OWVAR 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 32
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 69
34662: ST_TO_ADDR
// if not tmp then
34663: LD_VAR 0 2
34667: NOT
34668: IFFALSE 34672
// exit ;
34670: GO 34701
// for i in tmp do
34672: LD_ADDR_VAR 0 1
34676: PUSH
34677: LD_VAR 0 2
34681: PUSH
34682: FOR_IN
34683: IFFALSE 34699
// begin SetLives ( i , 0 ) ;
34685: LD_VAR 0 1
34689: PPUSH
34690: LD_INT 0
34692: PPUSH
34693: CALL_OW 234
// end ;
34697: GO 34682
34699: POP
34700: POP
// end ;
34701: PPOPN 2
34703: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34704: LD_EXP 83
34708: PUSH
34709: LD_EXP 86
34713: AND
34714: IFFALSE 34807
34716: GO 34718
34718: DISABLE
34719: LD_INT 0
34721: PPUSH
// begin enable ;
34722: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34723: LD_ADDR_VAR 0 1
34727: PUSH
34728: LD_INT 22
34730: PUSH
34731: LD_OWVAR 2
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: LD_INT 25
34745: PUSH
34746: LD_INT 5
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 25
34755: PUSH
34756: LD_INT 9
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 25
34765: PUSH
34766: LD_INT 8
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PPUSH
34783: CALL_OW 69
34787: PUSH
34788: FOR_IN
34789: IFFALSE 34805
// begin SetClass ( i , 1 ) ;
34791: LD_VAR 0 1
34795: PPUSH
34796: LD_INT 1
34798: PPUSH
34799: CALL_OW 336
// end ;
34803: GO 34788
34805: POP
34806: POP
// end ;
34807: PPOPN 1
34809: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
34810: LD_EXP 83
34814: PUSH
34815: LD_EXP 87
34819: AND
34820: PUSH
34821: LD_OWVAR 65
34825: PUSH
34826: LD_INT 7
34828: LESS
34829: AND
34830: IFFALSE 34844
34832: GO 34834
34834: DISABLE
// begin enable ;
34835: ENABLE
// game_speed := 7 ;
34836: LD_ADDR_OWVAR 65
34840: PUSH
34841: LD_INT 7
34843: ST_TO_ADDR
// end ;
34844: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
34845: LD_EXP 83
34849: PUSH
34850: LD_EXP 90
34854: AND
34855: IFFALSE 35057
34857: GO 34859
34859: DISABLE
34860: LD_INT 0
34862: PPUSH
34863: PPUSH
34864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34865: LD_ADDR_VAR 0 3
34869: PUSH
34870: LD_INT 81
34872: PUSH
34873: LD_OWVAR 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 21
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PPUSH
34896: CALL_OW 69
34900: ST_TO_ADDR
// if not tmp then
34901: LD_VAR 0 3
34905: NOT
34906: IFFALSE 34910
// exit ;
34908: GO 35057
// if tmp > 5 then
34910: LD_VAR 0 3
34914: PUSH
34915: LD_INT 5
34917: GREATER
34918: IFFALSE 34930
// k := 5 else
34920: LD_ADDR_VAR 0 2
34924: PUSH
34925: LD_INT 5
34927: ST_TO_ADDR
34928: GO 34940
// k := tmp ;
34930: LD_ADDR_VAR 0 2
34934: PUSH
34935: LD_VAR 0 3
34939: ST_TO_ADDR
// for i := 1 to k do
34940: LD_ADDR_VAR 0 1
34944: PUSH
34945: DOUBLE
34946: LD_INT 1
34948: DEC
34949: ST_TO_ADDR
34950: LD_VAR 0 2
34954: PUSH
34955: FOR_TO
34956: IFFALSE 35055
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
34958: LD_VAR 0 3
34962: PUSH
34963: LD_VAR 0 1
34967: ARRAY
34968: PPUSH
34969: LD_VAR 0 1
34973: PUSH
34974: LD_INT 4
34976: MOD
34977: PUSH
34978: LD_INT 1
34980: PLUS
34981: PPUSH
34982: CALL_OW 259
34986: PUSH
34987: LD_INT 10
34989: LESS
34990: IFFALSE 35053
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
34992: LD_VAR 0 3
34996: PUSH
34997: LD_VAR 0 1
35001: ARRAY
35002: PPUSH
35003: LD_VAR 0 1
35007: PUSH
35008: LD_INT 4
35010: MOD
35011: PUSH
35012: LD_INT 1
35014: PLUS
35015: PPUSH
35016: LD_VAR 0 3
35020: PUSH
35021: LD_VAR 0 1
35025: ARRAY
35026: PPUSH
35027: LD_VAR 0 1
35031: PUSH
35032: LD_INT 4
35034: MOD
35035: PUSH
35036: LD_INT 1
35038: PLUS
35039: PPUSH
35040: CALL_OW 259
35044: PUSH
35045: LD_INT 1
35047: PLUS
35048: PPUSH
35049: CALL_OW 237
35053: GO 34955
35055: POP
35056: POP
// end ;
35057: PPOPN 3
35059: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35060: LD_EXP 83
35064: PUSH
35065: LD_EXP 91
35069: AND
35070: IFFALSE 35090
35072: GO 35074
35074: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35075: LD_INT 4
35077: PPUSH
35078: LD_OWVAR 2
35082: PPUSH
35083: LD_INT 0
35085: PPUSH
35086: CALL_OW 324
35090: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35091: LD_EXP 83
35095: PUSH
35096: LD_EXP 120
35100: AND
35101: IFFALSE 35121
35103: GO 35105
35105: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35106: LD_INT 19
35108: PPUSH
35109: LD_OWVAR 2
35113: PPUSH
35114: LD_INT 0
35116: PPUSH
35117: CALL_OW 324
35121: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35122: LD_EXP 83
35126: PUSH
35127: LD_EXP 92
35131: AND
35132: IFFALSE 35234
35134: GO 35136
35136: DISABLE
35137: LD_INT 0
35139: PPUSH
35140: PPUSH
// begin enable ;
35141: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35142: LD_ADDR_VAR 0 2
35146: PUSH
35147: LD_INT 22
35149: PUSH
35150: LD_OWVAR 2
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: LD_INT 34
35164: PUSH
35165: LD_INT 11
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 34
35174: PUSH
35175: LD_INT 30
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PPUSH
35191: CALL_OW 69
35195: ST_TO_ADDR
// if not tmp then
35196: LD_VAR 0 2
35200: NOT
35201: IFFALSE 35205
// exit ;
35203: GO 35234
// for i in tmp do
35205: LD_ADDR_VAR 0 1
35209: PUSH
35210: LD_VAR 0 2
35214: PUSH
35215: FOR_IN
35216: IFFALSE 35232
// begin SetLives ( i , 0 ) ;
35218: LD_VAR 0 1
35222: PPUSH
35223: LD_INT 0
35225: PPUSH
35226: CALL_OW 234
// end ;
35230: GO 35215
35232: POP
35233: POP
// end ;
35234: PPOPN 2
35236: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35237: LD_EXP 83
35241: PUSH
35242: LD_EXP 93
35246: AND
35247: IFFALSE 35267
35249: GO 35251
35251: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35252: LD_INT 32
35254: PPUSH
35255: LD_OWVAR 2
35259: PPUSH
35260: LD_INT 0
35262: PPUSH
35263: CALL_OW 324
35267: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35268: LD_EXP 83
35272: PUSH
35273: LD_EXP 94
35277: AND
35278: IFFALSE 35459
35280: GO 35282
35282: DISABLE
35283: LD_INT 0
35285: PPUSH
35286: PPUSH
35287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35288: LD_ADDR_VAR 0 2
35292: PUSH
35293: LD_INT 22
35295: PUSH
35296: LD_OWVAR 2
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 33
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PPUSH
35319: CALL_OW 69
35323: ST_TO_ADDR
// if not tmp then
35324: LD_VAR 0 2
35328: NOT
35329: IFFALSE 35333
// exit ;
35331: GO 35459
// side := 0 ;
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_INT 0
35340: ST_TO_ADDR
// for i := 1 to 8 do
35341: LD_ADDR_VAR 0 1
35345: PUSH
35346: DOUBLE
35347: LD_INT 1
35349: DEC
35350: ST_TO_ADDR
35351: LD_INT 8
35353: PUSH
35354: FOR_TO
35355: IFFALSE 35403
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
35357: LD_OWVAR 2
35361: PUSH
35362: LD_VAR 0 1
35366: NONEQUAL
35367: PUSH
35368: LD_OWVAR 2
35372: PPUSH
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 81
35382: PUSH
35383: LD_INT 2
35385: EQUAL
35386: AND
35387: IFFALSE 35401
// begin side := i ;
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_VAR 0 1
35398: ST_TO_ADDR
// break ;
35399: GO 35403
// end ;
35401: GO 35354
35403: POP
35404: POP
// if not side then
35405: LD_VAR 0 3
35409: NOT
35410: IFFALSE 35414
// exit ;
35412: GO 35459
// for i := 1 to tmp do
35414: LD_ADDR_VAR 0 1
35418: PUSH
35419: DOUBLE
35420: LD_INT 1
35422: DEC
35423: ST_TO_ADDR
35424: LD_VAR 0 2
35428: PUSH
35429: FOR_TO
35430: IFFALSE 35457
// if Prob ( 60 ) then
35432: LD_INT 60
35434: PPUSH
35435: CALL_OW 13
35439: IFFALSE 35455
// SetSide ( i , side ) ;
35441: LD_VAR 0 1
35445: PPUSH
35446: LD_VAR 0 3
35450: PPUSH
35451: CALL_OW 235
35455: GO 35429
35457: POP
35458: POP
// end ;
35459: PPOPN 3
35461: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
35462: LD_EXP 83
35466: PUSH
35467: LD_EXP 96
35471: AND
35472: IFFALSE 35591
35474: GO 35476
35476: DISABLE
35477: LD_INT 0
35479: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35480: LD_ADDR_VAR 0 1
35484: PUSH
35485: LD_INT 22
35487: PUSH
35488: LD_OWVAR 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 21
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: LD_INT 23
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: PPUSH
35529: CALL_OW 69
35533: PUSH
35534: FOR_IN
35535: IFFALSE 35589
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 257
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 3
35555: PUSH
35556: LD_INT 4
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: IN
35565: IFFALSE 35587
// SetClass ( un , rand ( 1 , 4 ) ) ;
35567: LD_VAR 0 1
35571: PPUSH
35572: LD_INT 1
35574: PPUSH
35575: LD_INT 4
35577: PPUSH
35578: CALL_OW 12
35582: PPUSH
35583: CALL_OW 336
35587: GO 35534
35589: POP
35590: POP
// end ;
35591: PPOPN 1
35593: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35594: LD_EXP 83
35598: PUSH
35599: LD_EXP 95
35603: AND
35604: IFFALSE 35683
35606: GO 35608
35608: DISABLE
35609: LD_INT 0
35611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35612: LD_ADDR_VAR 0 1
35616: PUSH
35617: LD_INT 22
35619: PUSH
35620: LD_OWVAR 2
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 21
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PPUSH
35643: CALL_OW 69
35647: ST_TO_ADDR
// if not tmp then
35648: LD_VAR 0 1
35652: NOT
35653: IFFALSE 35657
// exit ;
35655: GO 35683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35657: LD_VAR 0 1
35661: PUSH
35662: LD_INT 1
35664: PPUSH
35665: LD_VAR 0 1
35669: PPUSH
35670: CALL_OW 12
35674: ARRAY
35675: PPUSH
35676: LD_INT 100
35678: PPUSH
35679: CALL_OW 234
// end ;
35683: PPOPN 1
35685: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35686: LD_EXP 83
35690: PUSH
35691: LD_EXP 97
35695: AND
35696: IFFALSE 35794
35698: GO 35700
35700: DISABLE
35701: LD_INT 0
35703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35704: LD_ADDR_VAR 0 1
35708: PUSH
35709: LD_INT 22
35711: PUSH
35712: LD_OWVAR 2
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 21
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PPUSH
35735: CALL_OW 69
35739: ST_TO_ADDR
// if not tmp then
35740: LD_VAR 0 1
35744: NOT
35745: IFFALSE 35749
// exit ;
35747: GO 35794
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35749: LD_VAR 0 1
35753: PUSH
35754: LD_INT 1
35756: PPUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 12
35766: ARRAY
35767: PPUSH
35768: LD_INT 1
35770: PPUSH
35771: LD_INT 4
35773: PPUSH
35774: CALL_OW 12
35778: PPUSH
35779: LD_INT 3000
35781: PPUSH
35782: LD_INT 9000
35784: PPUSH
35785: CALL_OW 12
35789: PPUSH
35790: CALL_OW 492
// end ;
35794: PPOPN 1
35796: END
// every 0 0$1 trigger StreamModeActive and sDepot do
35797: LD_EXP 83
35801: PUSH
35802: LD_EXP 98
35806: AND
35807: IFFALSE 35827
35809: GO 35811
35811: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
35812: LD_INT 1
35814: PPUSH
35815: LD_OWVAR 2
35819: PPUSH
35820: LD_INT 0
35822: PPUSH
35823: CALL_OW 324
35827: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
35828: LD_EXP 83
35832: PUSH
35833: LD_EXP 99
35837: AND
35838: IFFALSE 35921
35840: GO 35842
35842: DISABLE
35843: LD_INT 0
35845: PPUSH
35846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35847: LD_ADDR_VAR 0 2
35851: PUSH
35852: LD_INT 22
35854: PUSH
35855: LD_OWVAR 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 21
35866: PUSH
35867: LD_INT 3
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 69
35882: ST_TO_ADDR
// if not tmp then
35883: LD_VAR 0 2
35887: NOT
35888: IFFALSE 35892
// exit ;
35890: GO 35921
// for i in tmp do
35892: LD_ADDR_VAR 0 1
35896: PUSH
35897: LD_VAR 0 2
35901: PUSH
35902: FOR_IN
35903: IFFALSE 35919
// SetBLevel ( i , 10 ) ;
35905: LD_VAR 0 1
35909: PPUSH
35910: LD_INT 10
35912: PPUSH
35913: CALL_OW 241
35917: GO 35902
35919: POP
35920: POP
// end ;
35921: PPOPN 2
35923: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
35924: LD_EXP 83
35928: PUSH
35929: LD_EXP 100
35933: AND
35934: IFFALSE 36045
35936: GO 35938
35938: DISABLE
35939: LD_INT 0
35941: PPUSH
35942: PPUSH
35943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35944: LD_ADDR_VAR 0 3
35948: PUSH
35949: LD_INT 22
35951: PUSH
35952: LD_OWVAR 2
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 25
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PPUSH
35975: CALL_OW 69
35979: ST_TO_ADDR
// if not tmp then
35980: LD_VAR 0 3
35984: NOT
35985: IFFALSE 35989
// exit ;
35987: GO 36045
// un := tmp [ rand ( 1 , tmp ) ] ;
35989: LD_ADDR_VAR 0 2
35993: PUSH
35994: LD_VAR 0 3
35998: PUSH
35999: LD_INT 1
36001: PPUSH
36002: LD_VAR 0 3
36006: PPUSH
36007: CALL_OW 12
36011: ARRAY
36012: ST_TO_ADDR
// if Crawls ( un ) then
36013: LD_VAR 0 2
36017: PPUSH
36018: CALL_OW 318
36022: IFFALSE 36033
// ComWalk ( un ) ;
36024: LD_VAR 0 2
36028: PPUSH
36029: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36033: LD_VAR 0 2
36037: PPUSH
36038: LD_INT 5
36040: PPUSH
36041: CALL_OW 336
// end ;
36045: PPOPN 3
36047: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
36048: LD_EXP 83
36052: PUSH
36053: LD_EXP 101
36057: AND
36058: PUSH
36059: LD_OWVAR 67
36063: PUSH
36064: LD_INT 3
36066: LESS
36067: AND
36068: IFFALSE 36087
36070: GO 36072
36072: DISABLE
// Difficulty := Difficulty + 1 ;
36073: LD_ADDR_OWVAR 67
36077: PUSH
36078: LD_OWVAR 67
36082: PUSH
36083: LD_INT 1
36085: PLUS
36086: ST_TO_ADDR
36087: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36088: LD_EXP 83
36092: PUSH
36093: LD_EXP 102
36097: AND
36098: IFFALSE 36201
36100: GO 36102
36102: DISABLE
36103: LD_INT 0
36105: PPUSH
// begin for i := 1 to 5 do
36106: LD_ADDR_VAR 0 1
36110: PUSH
36111: DOUBLE
36112: LD_INT 1
36114: DEC
36115: ST_TO_ADDR
36116: LD_INT 5
36118: PUSH
36119: FOR_TO
36120: IFFALSE 36199
// begin uc_nation := nation_nature ;
36122: LD_ADDR_OWVAR 21
36126: PUSH
36127: LD_INT 0
36129: ST_TO_ADDR
// uc_side := 0 ;
36130: LD_ADDR_OWVAR 20
36134: PUSH
36135: LD_INT 0
36137: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36138: LD_ADDR_OWVAR 29
36142: PUSH
36143: LD_INT 12
36145: PUSH
36146: LD_INT 12
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// hc_agressivity := 20 ;
36153: LD_ADDR_OWVAR 35
36157: PUSH
36158: LD_INT 20
36160: ST_TO_ADDR
// hc_class := class_tiger ;
36161: LD_ADDR_OWVAR 28
36165: PUSH
36166: LD_INT 14
36168: ST_TO_ADDR
// hc_gallery :=  ;
36169: LD_ADDR_OWVAR 33
36173: PUSH
36174: LD_STRING 
36176: ST_TO_ADDR
// hc_name :=  ;
36177: LD_ADDR_OWVAR 26
36181: PUSH
36182: LD_STRING 
36184: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36185: CALL_OW 44
36189: PPUSH
36190: LD_INT 0
36192: PPUSH
36193: CALL_OW 51
// end ;
36197: GO 36119
36199: POP
36200: POP
// end ;
36201: PPOPN 1
36203: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36204: LD_EXP 83
36208: PUSH
36209: LD_EXP 103
36213: AND
36214: IFFALSE 36223
36216: GO 36218
36218: DISABLE
// StreamSibBomb ;
36219: CALL 36224 0 0
36223: END
// export function StreamSibBomb ; var i , x , y ; begin
36224: LD_INT 0
36226: PPUSH
36227: PPUSH
36228: PPUSH
36229: PPUSH
// result := false ;
36230: LD_ADDR_VAR 0 1
36234: PUSH
36235: LD_INT 0
36237: ST_TO_ADDR
// for i := 1 to 16 do
36238: LD_ADDR_VAR 0 2
36242: PUSH
36243: DOUBLE
36244: LD_INT 1
36246: DEC
36247: ST_TO_ADDR
36248: LD_INT 16
36250: PUSH
36251: FOR_TO
36252: IFFALSE 36451
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36254: LD_ADDR_VAR 0 3
36258: PUSH
36259: LD_INT 10
36261: PUSH
36262: LD_INT 20
36264: PUSH
36265: LD_INT 30
36267: PUSH
36268: LD_INT 40
36270: PUSH
36271: LD_INT 50
36273: PUSH
36274: LD_INT 60
36276: PUSH
36277: LD_INT 70
36279: PUSH
36280: LD_INT 80
36282: PUSH
36283: LD_INT 90
36285: PUSH
36286: LD_INT 100
36288: PUSH
36289: LD_INT 110
36291: PUSH
36292: LD_INT 120
36294: PUSH
36295: LD_INT 130
36297: PUSH
36298: LD_INT 140
36300: PUSH
36301: LD_INT 150
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PPUSH
36324: LD_INT 15
36326: PPUSH
36327: CALL_OW 12
36331: ARRAY
36332: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36333: LD_ADDR_VAR 0 4
36337: PUSH
36338: LD_INT 10
36340: PUSH
36341: LD_INT 20
36343: PUSH
36344: LD_INT 30
36346: PUSH
36347: LD_INT 40
36349: PUSH
36350: LD_INT 50
36352: PUSH
36353: LD_INT 60
36355: PUSH
36356: LD_INT 70
36358: PUSH
36359: LD_INT 80
36361: PUSH
36362: LD_INT 90
36364: PUSH
36365: LD_INT 100
36367: PUSH
36368: LD_INT 110
36370: PUSH
36371: LD_INT 120
36373: PUSH
36374: LD_INT 130
36376: PUSH
36377: LD_INT 140
36379: PUSH
36380: LD_INT 150
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PPUSH
36403: LD_INT 15
36405: PPUSH
36406: CALL_OW 12
36410: ARRAY
36411: ST_TO_ADDR
// if ValidHex ( x , y ) then
36412: LD_VAR 0 3
36416: PPUSH
36417: LD_VAR 0 4
36421: PPUSH
36422: CALL_OW 488
36426: IFFALSE 36449
// begin result := [ x , y ] ;
36428: LD_ADDR_VAR 0 1
36432: PUSH
36433: LD_VAR 0 3
36437: PUSH
36438: LD_VAR 0 4
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: ST_TO_ADDR
// break ;
36447: GO 36451
// end ; end ;
36449: GO 36251
36451: POP
36452: POP
// if result then
36453: LD_VAR 0 1
36457: IFFALSE 36517
// begin ToLua ( playSibBomb() ) ;
36459: LD_STRING playSibBomb()
36461: PPUSH
36462: CALL_OW 559
// wait ( 0 0$14 ) ;
36466: LD_INT 490
36468: PPUSH
36469: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36473: LD_VAR 0 1
36477: PUSH
36478: LD_INT 1
36480: ARRAY
36481: PPUSH
36482: LD_VAR 0 1
36486: PUSH
36487: LD_INT 2
36489: ARRAY
36490: PPUSH
36491: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36495: LD_VAR 0 1
36499: PUSH
36500: LD_INT 1
36502: ARRAY
36503: PPUSH
36504: LD_VAR 0 1
36508: PUSH
36509: LD_INT 2
36511: ARRAY
36512: PPUSH
36513: CALL_OW 429
// end ; end ;
36517: LD_VAR 0 1
36521: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36522: LD_EXP 83
36526: PUSH
36527: LD_EXP 105
36531: AND
36532: IFFALSE 36544
36534: GO 36536
36536: DISABLE
// YouLost (  ) ;
36537: LD_STRING 
36539: PPUSH
36540: CALL_OW 104
36544: END
// every 0 0$1 trigger StreamModeActive and sFog do
36545: LD_EXP 83
36549: PUSH
36550: LD_EXP 104
36554: AND
36555: IFFALSE 36569
36557: GO 36559
36559: DISABLE
// FogOff ( your_side ) ;
36560: LD_OWVAR 2
36564: PPUSH
36565: CALL_OW 344
36569: END
// every 0 0$1 trigger StreamModeActive and sSun do
36570: LD_EXP 83
36574: PUSH
36575: LD_EXP 106
36579: AND
36580: IFFALSE 36608
36582: GO 36584
36584: DISABLE
// begin solar_recharge_percent := 0 ;
36585: LD_ADDR_OWVAR 79
36589: PUSH
36590: LD_INT 0
36592: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36593: LD_INT 10500
36595: PPUSH
36596: CALL_OW 67
// solar_recharge_percent := 100 ;
36600: LD_ADDR_OWVAR 79
36604: PUSH
36605: LD_INT 100
36607: ST_TO_ADDR
// end ;
36608: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36609: LD_EXP 83
36613: PUSH
36614: LD_EXP 107
36618: AND
36619: IFFALSE 36858
36621: GO 36623
36623: DISABLE
36624: LD_INT 0
36626: PPUSH
36627: PPUSH
36628: PPUSH
// begin tmp := [ ] ;
36629: LD_ADDR_VAR 0 3
36633: PUSH
36634: EMPTY
36635: ST_TO_ADDR
// for i := 1 to 6 do
36636: LD_ADDR_VAR 0 1
36640: PUSH
36641: DOUBLE
36642: LD_INT 1
36644: DEC
36645: ST_TO_ADDR
36646: LD_INT 6
36648: PUSH
36649: FOR_TO
36650: IFFALSE 36755
// begin uc_nation := nation_nature ;
36652: LD_ADDR_OWVAR 21
36656: PUSH
36657: LD_INT 0
36659: ST_TO_ADDR
// uc_side := 0 ;
36660: LD_ADDR_OWVAR 20
36664: PUSH
36665: LD_INT 0
36667: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36668: LD_ADDR_OWVAR 29
36672: PUSH
36673: LD_INT 12
36675: PUSH
36676: LD_INT 12
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// hc_agressivity := 20 ;
36683: LD_ADDR_OWVAR 35
36687: PUSH
36688: LD_INT 20
36690: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36691: LD_ADDR_OWVAR 28
36695: PUSH
36696: LD_INT 17
36698: ST_TO_ADDR
// hc_gallery :=  ;
36699: LD_ADDR_OWVAR 33
36703: PUSH
36704: LD_STRING 
36706: ST_TO_ADDR
// hc_name :=  ;
36707: LD_ADDR_OWVAR 26
36711: PUSH
36712: LD_STRING 
36714: ST_TO_ADDR
// un := CreateHuman ;
36715: LD_ADDR_VAR 0 2
36719: PUSH
36720: CALL_OW 44
36724: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36725: LD_VAR 0 2
36729: PPUSH
36730: LD_INT 1
36732: PPUSH
36733: CALL_OW 51
// tmp := tmp ^ un ;
36737: LD_ADDR_VAR 0 3
36741: PUSH
36742: LD_VAR 0 3
36746: PUSH
36747: LD_VAR 0 2
36751: ADD
36752: ST_TO_ADDR
// end ;
36753: GO 36649
36755: POP
36756: POP
// repeat wait ( 0 0$1 ) ;
36757: LD_INT 35
36759: PPUSH
36760: CALL_OW 67
// for un in tmp do
36764: LD_ADDR_VAR 0 2
36768: PUSH
36769: LD_VAR 0 3
36773: PUSH
36774: FOR_IN
36775: IFFALSE 36849
// begin if IsDead ( un ) then
36777: LD_VAR 0 2
36781: PPUSH
36782: CALL_OW 301
36786: IFFALSE 36806
// begin tmp := tmp diff un ;
36788: LD_ADDR_VAR 0 3
36792: PUSH
36793: LD_VAR 0 3
36797: PUSH
36798: LD_VAR 0 2
36802: DIFF
36803: ST_TO_ADDR
// continue ;
36804: GO 36774
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
36806: LD_VAR 0 2
36810: PPUSH
36811: LD_INT 3
36813: PUSH
36814: LD_INT 22
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PPUSH
36828: CALL_OW 69
36832: PPUSH
36833: LD_VAR 0 2
36837: PPUSH
36838: CALL_OW 74
36842: PPUSH
36843: CALL_OW 115
// end ;
36847: GO 36774
36849: POP
36850: POP
// until not tmp ;
36851: LD_VAR 0 3
36855: NOT
36856: IFFALSE 36757
// end ;
36858: PPOPN 3
36860: END
// every 0 0$1 trigger StreamModeActive and sTroll do
36861: LD_EXP 83
36865: PUSH
36866: LD_EXP 108
36870: AND
36871: IFFALSE 36925
36873: GO 36875
36875: DISABLE
// begin ToLua ( displayTroll(); ) ;
36876: LD_STRING displayTroll();
36878: PPUSH
36879: CALL_OW 559
// wait ( 3 3$00 ) ;
36883: LD_INT 6300
36885: PPUSH
36886: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36890: LD_STRING hideTroll();
36892: PPUSH
36893: CALL_OW 559
// wait ( 1 1$00 ) ;
36897: LD_INT 2100
36899: PPUSH
36900: CALL_OW 67
// ToLua ( displayTroll(); ) ;
36904: LD_STRING displayTroll();
36906: PPUSH
36907: CALL_OW 559
// wait ( 1 1$00 ) ;
36911: LD_INT 2100
36913: PPUSH
36914: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36918: LD_STRING hideTroll();
36920: PPUSH
36921: CALL_OW 559
// end ;
36925: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
36926: LD_EXP 83
36930: PUSH
36931: LD_EXP 109
36935: AND
36936: IFFALSE 36999
36938: GO 36940
36940: DISABLE
36941: LD_INT 0
36943: PPUSH
// begin p := 0 ;
36944: LD_ADDR_VAR 0 1
36948: PUSH
36949: LD_INT 0
36951: ST_TO_ADDR
// repeat game_speed := 1 ;
36952: LD_ADDR_OWVAR 65
36956: PUSH
36957: LD_INT 1
36959: ST_TO_ADDR
// wait ( 0 0$1 ) ;
36960: LD_INT 35
36962: PPUSH
36963: CALL_OW 67
// p := p + 1 ;
36967: LD_ADDR_VAR 0 1
36971: PUSH
36972: LD_VAR 0 1
36976: PUSH
36977: LD_INT 1
36979: PLUS
36980: ST_TO_ADDR
// until p >= 60 ;
36981: LD_VAR 0 1
36985: PUSH
36986: LD_INT 60
36988: GREATEREQUAL
36989: IFFALSE 36952
// game_speed := 4 ;
36991: LD_ADDR_OWVAR 65
36995: PUSH
36996: LD_INT 4
36998: ST_TO_ADDR
// end ;
36999: PPOPN 1
37001: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37002: LD_EXP 83
37006: PUSH
37007: LD_EXP 110
37011: AND
37012: IFFALSE 37158
37014: GO 37016
37016: DISABLE
37017: LD_INT 0
37019: PPUSH
37020: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37021: LD_ADDR_VAR 0 1
37025: PUSH
37026: LD_INT 22
37028: PUSH
37029: LD_OWVAR 2
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: LD_INT 30
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 30
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PPUSH
37070: CALL_OW 69
37074: ST_TO_ADDR
// if not depot then
37075: LD_VAR 0 1
37079: NOT
37080: IFFALSE 37084
// exit ;
37082: GO 37158
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37084: LD_ADDR_VAR 0 2
37088: PUSH
37089: LD_VAR 0 1
37093: PUSH
37094: LD_INT 1
37096: PPUSH
37097: LD_VAR 0 1
37101: PPUSH
37102: CALL_OW 12
37106: ARRAY
37107: PPUSH
37108: CALL_OW 274
37112: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37113: LD_VAR 0 2
37117: PPUSH
37118: LD_INT 1
37120: PPUSH
37121: LD_INT 0
37123: PPUSH
37124: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37128: LD_VAR 0 2
37132: PPUSH
37133: LD_INT 2
37135: PPUSH
37136: LD_INT 0
37138: PPUSH
37139: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_INT 3
37150: PPUSH
37151: LD_INT 0
37153: PPUSH
37154: CALL_OW 277
// end ;
37158: PPOPN 2
37160: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37161: LD_EXP 83
37165: PUSH
37166: LD_EXP 111
37170: AND
37171: IFFALSE 37268
37173: GO 37175
37175: DISABLE
37176: LD_INT 0
37178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37179: LD_ADDR_VAR 0 1
37183: PUSH
37184: LD_INT 22
37186: PUSH
37187: LD_OWVAR 2
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 21
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: LD_INT 23
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: PPUSH
37228: CALL_OW 69
37232: ST_TO_ADDR
// if not tmp then
37233: LD_VAR 0 1
37237: NOT
37238: IFFALSE 37242
// exit ;
37240: GO 37268
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37242: LD_VAR 0 1
37246: PUSH
37247: LD_INT 1
37249: PPUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: CALL_OW 12
37259: ARRAY
37260: PPUSH
37261: LD_INT 200
37263: PPUSH
37264: CALL_OW 234
// end ;
37268: PPOPN 1
37270: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37271: LD_EXP 83
37275: PUSH
37276: LD_EXP 112
37280: AND
37281: IFFALSE 37360
37283: GO 37285
37285: DISABLE
37286: LD_INT 0
37288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37289: LD_ADDR_VAR 0 1
37293: PUSH
37294: LD_INT 22
37296: PUSH
37297: LD_OWVAR 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 21
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PPUSH
37320: CALL_OW 69
37324: ST_TO_ADDR
// if not tmp then
37325: LD_VAR 0 1
37329: NOT
37330: IFFALSE 37334
// exit ;
37332: GO 37360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
37334: LD_VAR 0 1
37338: PUSH
37339: LD_INT 1
37341: PPUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 12
37351: ARRAY
37352: PPUSH
37353: LD_INT 60
37355: PPUSH
37356: CALL_OW 234
// end ;
37360: PPOPN 1
37362: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
37363: LD_EXP 83
37367: PUSH
37368: LD_EXP 113
37372: AND
37373: IFFALSE 37472
37375: GO 37377
37377: DISABLE
37378: LD_INT 0
37380: PPUSH
37381: PPUSH
// begin enable ;
37382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
37383: LD_ADDR_VAR 0 1
37387: PUSH
37388: LD_INT 22
37390: PUSH
37391: LD_OWVAR 2
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 61
37402: PUSH
37403: EMPTY
37404: LIST
37405: PUSH
37406: LD_INT 33
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PPUSH
37421: CALL_OW 69
37425: ST_TO_ADDR
// if not tmp then
37426: LD_VAR 0 1
37430: NOT
37431: IFFALSE 37435
// exit ;
37433: GO 37472
// for i in tmp do
37435: LD_ADDR_VAR 0 2
37439: PUSH
37440: LD_VAR 0 1
37444: PUSH
37445: FOR_IN
37446: IFFALSE 37470
// if IsControledBy ( i ) then
37448: LD_VAR 0 2
37452: PPUSH
37453: CALL_OW 312
37457: IFFALSE 37468
// ComUnlink ( i ) ;
37459: LD_VAR 0 2
37463: PPUSH
37464: CALL_OW 136
37468: GO 37445
37470: POP
37471: POP
// end ;
37472: PPOPN 2
37474: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37475: LD_EXP 83
37479: PUSH
37480: LD_EXP 114
37484: AND
37485: IFFALSE 37625
37487: GO 37489
37489: DISABLE
37490: LD_INT 0
37492: PPUSH
37493: PPUSH
// begin ToLua ( displayPowell(); ) ;
37494: LD_STRING displayPowell();
37496: PPUSH
37497: CALL_OW 559
// uc_side := 0 ;
37501: LD_ADDR_OWVAR 20
37505: PUSH
37506: LD_INT 0
37508: ST_TO_ADDR
// uc_nation := 2 ;
37509: LD_ADDR_OWVAR 21
37513: PUSH
37514: LD_INT 2
37516: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37517: LD_ADDR_OWVAR 37
37521: PUSH
37522: LD_INT 14
37524: ST_TO_ADDR
// vc_engine := engine_siberite ;
37525: LD_ADDR_OWVAR 39
37529: PUSH
37530: LD_INT 3
37532: ST_TO_ADDR
// vc_control := control_apeman ;
37533: LD_ADDR_OWVAR 38
37537: PUSH
37538: LD_INT 5
37540: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37541: LD_ADDR_OWVAR 40
37545: PUSH
37546: LD_INT 29
37548: ST_TO_ADDR
// un := CreateVehicle ;
37549: LD_ADDR_VAR 0 2
37553: PUSH
37554: CALL_OW 45
37558: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37559: LD_VAR 0 2
37563: PPUSH
37564: LD_INT 1
37566: PPUSH
37567: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37571: LD_INT 35
37573: PPUSH
37574: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37578: LD_VAR 0 2
37582: PPUSH
37583: LD_INT 22
37585: PUSH
37586: LD_OWVAR 2
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PPUSH
37595: CALL_OW 69
37599: PPUSH
37600: LD_VAR 0 2
37604: PPUSH
37605: CALL_OW 74
37609: PPUSH
37610: CALL_OW 115
// until IsDead ( un ) ;
37614: LD_VAR 0 2
37618: PPUSH
37619: CALL_OW 301
37623: IFFALSE 37571
// end ;
37625: PPOPN 2
37627: END
// every 0 0$1 trigger StreamModeActive and sStu do
37628: LD_EXP 83
37632: PUSH
37633: LD_EXP 122
37637: AND
37638: IFFALSE 37654
37640: GO 37642
37642: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37643: LD_STRING displayStucuk();
37645: PPUSH
37646: CALL_OW 559
// ResetFog ;
37650: CALL_OW 335
// end ;
37654: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37655: LD_EXP 83
37659: PUSH
37660: LD_EXP 115
37664: AND
37665: IFFALSE 37806
37667: GO 37669
37669: DISABLE
37670: LD_INT 0
37672: PPUSH
37673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37674: LD_ADDR_VAR 0 2
37678: PUSH
37679: LD_INT 22
37681: PUSH
37682: LD_OWVAR 2
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 21
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PPUSH
37705: CALL_OW 69
37709: ST_TO_ADDR
// if not tmp then
37710: LD_VAR 0 2
37714: NOT
37715: IFFALSE 37719
// exit ;
37717: GO 37806
// un := tmp [ rand ( 1 , tmp ) ] ;
37719: LD_ADDR_VAR 0 1
37723: PUSH
37724: LD_VAR 0 2
37728: PUSH
37729: LD_INT 1
37731: PPUSH
37732: LD_VAR 0 2
37736: PPUSH
37737: CALL_OW 12
37741: ARRAY
37742: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37743: LD_VAR 0 1
37747: PPUSH
37748: LD_INT 0
37750: PPUSH
37751: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37755: LD_VAR 0 1
37759: PPUSH
37760: LD_OWVAR 3
37764: PUSH
37765: LD_VAR 0 1
37769: DIFF
37770: PPUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL_OW 74
37780: PPUSH
37781: CALL_OW 115
// wait ( 0 0$20 ) ;
37785: LD_INT 700
37787: PPUSH
37788: CALL_OW 67
// SetSide ( un , your_side ) ;
37792: LD_VAR 0 1
37796: PPUSH
37797: LD_OWVAR 2
37801: PPUSH
37802: CALL_OW 235
// end ;
37806: PPOPN 2
37808: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
37809: LD_EXP 83
37813: PUSH
37814: LD_EXP 116
37818: AND
37819: IFFALSE 37925
37821: GO 37823
37823: DISABLE
37824: LD_INT 0
37826: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37827: LD_ADDR_VAR 0 1
37831: PUSH
37832: LD_INT 22
37834: PUSH
37835: LD_OWVAR 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 30
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 30
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PPUSH
37876: CALL_OW 69
37880: ST_TO_ADDR
// if not depot then
37881: LD_VAR 0 1
37885: NOT
37886: IFFALSE 37890
// exit ;
37888: GO 37925
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
37890: LD_VAR 0 1
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: PPUSH
37899: CALL_OW 250
37903: PPUSH
37904: LD_VAR 0 1
37908: PUSH
37909: LD_INT 1
37911: ARRAY
37912: PPUSH
37913: CALL_OW 251
37917: PPUSH
37918: LD_INT 70
37920: PPUSH
37921: CALL_OW 495
// end ;
37925: PPOPN 1
37927: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
37928: LD_EXP 83
37932: PUSH
37933: LD_EXP 117
37937: AND
37938: IFFALSE 38149
37940: GO 37942
37942: DISABLE
37943: LD_INT 0
37945: PPUSH
37946: PPUSH
37947: PPUSH
37948: PPUSH
37949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37950: LD_ADDR_VAR 0 5
37954: PUSH
37955: LD_INT 22
37957: PUSH
37958: LD_OWVAR 2
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 21
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PPUSH
37981: CALL_OW 69
37985: ST_TO_ADDR
// if not tmp then
37986: LD_VAR 0 5
37990: NOT
37991: IFFALSE 37995
// exit ;
37993: GO 38149
// for i in tmp do
37995: LD_ADDR_VAR 0 1
37999: PUSH
38000: LD_VAR 0 5
38004: PUSH
38005: FOR_IN
38006: IFFALSE 38147
// begin d := rand ( 0 , 5 ) ;
38008: LD_ADDR_VAR 0 4
38012: PUSH
38013: LD_INT 0
38015: PPUSH
38016: LD_INT 5
38018: PPUSH
38019: CALL_OW 12
38023: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38024: LD_ADDR_VAR 0 2
38028: PUSH
38029: LD_VAR 0 1
38033: PPUSH
38034: CALL_OW 250
38038: PPUSH
38039: LD_VAR 0 4
38043: PPUSH
38044: LD_INT 3
38046: PPUSH
38047: LD_INT 12
38049: PPUSH
38050: CALL_OW 12
38054: PPUSH
38055: CALL_OW 272
38059: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38060: LD_ADDR_VAR 0 3
38064: PUSH
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL_OW 251
38074: PPUSH
38075: LD_VAR 0 4
38079: PPUSH
38080: LD_INT 3
38082: PPUSH
38083: LD_INT 12
38085: PPUSH
38086: CALL_OW 12
38090: PPUSH
38091: CALL_OW 273
38095: ST_TO_ADDR
// if ValidHex ( x , y ) then
38096: LD_VAR 0 2
38100: PPUSH
38101: LD_VAR 0 3
38105: PPUSH
38106: CALL_OW 488
38110: IFFALSE 38145
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38112: LD_VAR 0 1
38116: PPUSH
38117: LD_VAR 0 2
38121: PPUSH
38122: LD_VAR 0 3
38126: PPUSH
38127: LD_INT 3
38129: PPUSH
38130: LD_INT 6
38132: PPUSH
38133: CALL_OW 12
38137: PPUSH
38138: LD_INT 1
38140: PPUSH
38141: CALL_OW 483
// end ;
38145: GO 38005
38147: POP
38148: POP
// end ;
38149: PPOPN 5
38151: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38152: LD_EXP 83
38156: PUSH
38157: LD_EXP 118
38161: AND
38162: IFFALSE 38256
38164: GO 38166
38166: DISABLE
38167: LD_INT 0
38169: PPUSH
38170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38171: LD_ADDR_VAR 0 2
38175: PUSH
38176: LD_INT 22
38178: PUSH
38179: LD_OWVAR 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 32
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 21
38200: PUSH
38201: LD_INT 2
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: PPUSH
38213: CALL_OW 69
38217: ST_TO_ADDR
// if not tmp then
38218: LD_VAR 0 2
38222: NOT
38223: IFFALSE 38227
// exit ;
38225: GO 38256
// for i in tmp do
38227: LD_ADDR_VAR 0 1
38231: PUSH
38232: LD_VAR 0 2
38236: PUSH
38237: FOR_IN
38238: IFFALSE 38254
// SetFuel ( i , 0 ) ;
38240: LD_VAR 0 1
38244: PPUSH
38245: LD_INT 0
38247: PPUSH
38248: CALL_OW 240
38252: GO 38237
38254: POP
38255: POP
// end ;
38256: PPOPN 2
38258: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38259: LD_EXP 83
38263: PUSH
38264: LD_EXP 119
38268: AND
38269: IFFALSE 38335
38271: GO 38273
38273: DISABLE
38274: LD_INT 0
38276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38277: LD_ADDR_VAR 0 1
38281: PUSH
38282: LD_INT 22
38284: PUSH
38285: LD_OWVAR 2
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 30
38296: PUSH
38297: LD_INT 29
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PPUSH
38308: CALL_OW 69
38312: ST_TO_ADDR
// if not tmp then
38313: LD_VAR 0 1
38317: NOT
38318: IFFALSE 38322
// exit ;
38320: GO 38335
// DestroyUnit ( tmp [ 1 ] ) ;
38322: LD_VAR 0 1
38326: PUSH
38327: LD_INT 1
38329: ARRAY
38330: PPUSH
38331: CALL_OW 65
// end ;
38335: PPOPN 1
38337: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
38338: LD_EXP 83
38342: PUSH
38343: LD_EXP 121
38347: AND
38348: IFFALSE 38477
38350: GO 38352
38352: DISABLE
38353: LD_INT 0
38355: PPUSH
// begin uc_side := 0 ;
38356: LD_ADDR_OWVAR 20
38360: PUSH
38361: LD_INT 0
38363: ST_TO_ADDR
// uc_nation := nation_arabian ;
38364: LD_ADDR_OWVAR 21
38368: PUSH
38369: LD_INT 2
38371: ST_TO_ADDR
// hc_gallery :=  ;
38372: LD_ADDR_OWVAR 33
38376: PUSH
38377: LD_STRING 
38379: ST_TO_ADDR
// hc_name :=  ;
38380: LD_ADDR_OWVAR 26
38384: PUSH
38385: LD_STRING 
38387: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
38388: LD_INT 1
38390: PPUSH
38391: LD_INT 11
38393: PPUSH
38394: LD_INT 10
38396: PPUSH
38397: CALL_OW 380
// un := CreateHuman ;
38401: LD_ADDR_VAR 0 1
38405: PUSH
38406: CALL_OW 44
38410: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38411: LD_VAR 0 1
38415: PPUSH
38416: LD_INT 1
38418: PPUSH
38419: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38423: LD_INT 35
38425: PPUSH
38426: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38430: LD_VAR 0 1
38434: PPUSH
38435: LD_INT 22
38437: PUSH
38438: LD_OWVAR 2
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PPUSH
38447: CALL_OW 69
38451: PPUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 74
38461: PPUSH
38462: CALL_OW 115
// until IsDead ( un ) ;
38466: LD_VAR 0 1
38470: PPUSH
38471: CALL_OW 301
38475: IFFALSE 38423
// end ;
38477: PPOPN 1
38479: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38480: LD_EXP 83
38484: PUSH
38485: LD_EXP 123
38489: AND
38490: IFFALSE 38502
38492: GO 38494
38494: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38495: LD_STRING earthquake(getX(game), 0, 32)
38497: PPUSH
38498: CALL_OW 559
38502: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38503: LD_EXP 83
38507: PUSH
38508: LD_EXP 124
38512: AND
38513: IFFALSE 38604
38515: GO 38517
38517: DISABLE
38518: LD_INT 0
38520: PPUSH
// begin enable ;
38521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38522: LD_ADDR_VAR 0 1
38526: PUSH
38527: LD_INT 22
38529: PUSH
38530: LD_OWVAR 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 21
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 33
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: PPUSH
38564: CALL_OW 69
38568: ST_TO_ADDR
// if not tmp then
38569: LD_VAR 0 1
38573: NOT
38574: IFFALSE 38578
// exit ;
38576: GO 38604
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38578: LD_VAR 0 1
38582: PUSH
38583: LD_INT 1
38585: PPUSH
38586: LD_VAR 0 1
38590: PPUSH
38591: CALL_OW 12
38595: ARRAY
38596: PPUSH
38597: LD_INT 1
38599: PPUSH
38600: CALL_OW 234
// end ;
38604: PPOPN 1
38606: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38607: LD_EXP 83
38611: PUSH
38612: LD_EXP 125
38616: AND
38617: IFFALSE 38758
38619: GO 38621
38621: DISABLE
38622: LD_INT 0
38624: PPUSH
38625: PPUSH
38626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38627: LD_ADDR_VAR 0 3
38631: PUSH
38632: LD_INT 22
38634: PUSH
38635: LD_OWVAR 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 25
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PPUSH
38658: CALL_OW 69
38662: ST_TO_ADDR
// if not tmp then
38663: LD_VAR 0 3
38667: NOT
38668: IFFALSE 38672
// exit ;
38670: GO 38758
// un := tmp [ rand ( 1 , tmp ) ] ;
38672: LD_ADDR_VAR 0 2
38676: PUSH
38677: LD_VAR 0 3
38681: PUSH
38682: LD_INT 1
38684: PPUSH
38685: LD_VAR 0 3
38689: PPUSH
38690: CALL_OW 12
38694: ARRAY
38695: ST_TO_ADDR
// if Crawls ( un ) then
38696: LD_VAR 0 2
38700: PPUSH
38701: CALL_OW 318
38705: IFFALSE 38716
// ComWalk ( un ) ;
38707: LD_VAR 0 2
38711: PPUSH
38712: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38716: LD_VAR 0 2
38720: PPUSH
38721: LD_INT 9
38723: PPUSH
38724: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38728: LD_INT 28
38730: PPUSH
38731: LD_OWVAR 2
38735: PPUSH
38736: LD_INT 2
38738: PPUSH
38739: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38743: LD_INT 29
38745: PPUSH
38746: LD_OWVAR 2
38750: PPUSH
38751: LD_INT 2
38753: PPUSH
38754: CALL_OW 322
// end ;
38758: PPOPN 3
38760: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38761: LD_EXP 83
38765: PUSH
38766: LD_EXP 126
38770: AND
38771: IFFALSE 38882
38773: GO 38775
38775: DISABLE
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
38780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38781: LD_ADDR_VAR 0 3
38785: PUSH
38786: LD_INT 22
38788: PUSH
38789: LD_OWVAR 2
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 25
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PPUSH
38812: CALL_OW 69
38816: ST_TO_ADDR
// if not tmp then
38817: LD_VAR 0 3
38821: NOT
38822: IFFALSE 38826
// exit ;
38824: GO 38882
// un := tmp [ rand ( 1 , tmp ) ] ;
38826: LD_ADDR_VAR 0 2
38830: PUSH
38831: LD_VAR 0 3
38835: PUSH
38836: LD_INT 1
38838: PPUSH
38839: LD_VAR 0 3
38843: PPUSH
38844: CALL_OW 12
38848: ARRAY
38849: ST_TO_ADDR
// if Crawls ( un ) then
38850: LD_VAR 0 2
38854: PPUSH
38855: CALL_OW 318
38859: IFFALSE 38870
// ComWalk ( un ) ;
38861: LD_VAR 0 2
38865: PPUSH
38866: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38870: LD_VAR 0 2
38874: PPUSH
38875: LD_INT 8
38877: PPUSH
38878: CALL_OW 336
// end ;
38882: PPOPN 3
38884: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
38885: LD_EXP 83
38889: PUSH
38890: LD_EXP 127
38894: AND
38895: IFFALSE 39039
38897: GO 38899
38899: DISABLE
38900: LD_INT 0
38902: PPUSH
38903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
38904: LD_ADDR_VAR 0 2
38908: PUSH
38909: LD_INT 22
38911: PUSH
38912: LD_OWVAR 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 21
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 34
38936: PUSH
38937: LD_INT 12
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 34
38946: PUSH
38947: LD_INT 51
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 34
38956: PUSH
38957: LD_INT 32
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: PPUSH
38975: CALL_OW 69
38979: ST_TO_ADDR
// if not tmp then
38980: LD_VAR 0 2
38984: NOT
38985: IFFALSE 38989
// exit ;
38987: GO 39039
// for i in tmp do
38989: LD_ADDR_VAR 0 1
38993: PUSH
38994: LD_VAR 0 2
38998: PUSH
38999: FOR_IN
39000: IFFALSE 39037
// if GetCargo ( i , mat_artifact ) = 0 then
39002: LD_VAR 0 1
39006: PPUSH
39007: LD_INT 4
39009: PPUSH
39010: CALL_OW 289
39014: PUSH
39015: LD_INT 0
39017: EQUAL
39018: IFFALSE 39035
// SetCargo ( i , mat_siberit , 100 ) ;
39020: LD_VAR 0 1
39024: PPUSH
39025: LD_INT 3
39027: PPUSH
39028: LD_INT 100
39030: PPUSH
39031: CALL_OW 290
39035: GO 38999
39037: POP
39038: POP
// end ;
39039: PPOPN 2
39041: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39042: LD_EXP 83
39046: PUSH
39047: LD_EXP 128
39051: AND
39052: IFFALSE 39235
39054: GO 39056
39056: DISABLE
39057: LD_INT 0
39059: PPUSH
39060: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39061: LD_ADDR_VAR 0 2
39065: PUSH
39066: LD_INT 22
39068: PUSH
39069: LD_OWVAR 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PPUSH
39078: CALL_OW 69
39082: ST_TO_ADDR
// if not tmp then
39083: LD_VAR 0 2
39087: NOT
39088: IFFALSE 39092
// exit ;
39090: GO 39235
// for i := 1 to 2 do
39092: LD_ADDR_VAR 0 1
39096: PUSH
39097: DOUBLE
39098: LD_INT 1
39100: DEC
39101: ST_TO_ADDR
39102: LD_INT 2
39104: PUSH
39105: FOR_TO
39106: IFFALSE 39233
// begin uc_side := your_side ;
39108: LD_ADDR_OWVAR 20
39112: PUSH
39113: LD_OWVAR 2
39117: ST_TO_ADDR
// uc_nation := nation_american ;
39118: LD_ADDR_OWVAR 21
39122: PUSH
39123: LD_INT 1
39125: ST_TO_ADDR
// vc_chassis := us_morphling ;
39126: LD_ADDR_OWVAR 37
39130: PUSH
39131: LD_INT 5
39133: ST_TO_ADDR
// vc_engine := engine_siberite ;
39134: LD_ADDR_OWVAR 39
39138: PUSH
39139: LD_INT 3
39141: ST_TO_ADDR
// vc_control := control_computer ;
39142: LD_ADDR_OWVAR 38
39146: PUSH
39147: LD_INT 3
39149: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39150: LD_ADDR_OWVAR 40
39154: PUSH
39155: LD_INT 10
39157: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39158: LD_VAR 0 2
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: PPUSH
39167: CALL_OW 310
39171: NOT
39172: IFFALSE 39219
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39174: CALL_OW 45
39178: PPUSH
39179: LD_VAR 0 2
39183: PUSH
39184: LD_INT 1
39186: ARRAY
39187: PPUSH
39188: CALL_OW 250
39192: PPUSH
39193: LD_VAR 0 2
39197: PUSH
39198: LD_INT 1
39200: ARRAY
39201: PPUSH
39202: CALL_OW 251
39206: PPUSH
39207: LD_INT 12
39209: PPUSH
39210: LD_INT 1
39212: PPUSH
39213: CALL_OW 50
39217: GO 39231
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39219: CALL_OW 45
39223: PPUSH
39224: LD_INT 1
39226: PPUSH
39227: CALL_OW 51
// end ;
39231: GO 39105
39233: POP
39234: POP
// end ;
39235: PPOPN 2
39237: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39238: LD_EXP 83
39242: PUSH
39243: LD_EXP 129
39247: AND
39248: IFFALSE 39470
39250: GO 39252
39252: DISABLE
39253: LD_INT 0
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39261: LD_ADDR_VAR 0 6
39265: PUSH
39266: LD_INT 22
39268: PUSH
39269: LD_OWVAR 2
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 21
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: LD_INT 23
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: PPUSH
39310: CALL_OW 69
39314: ST_TO_ADDR
// if not tmp then
39315: LD_VAR 0 6
39319: NOT
39320: IFFALSE 39324
// exit ;
39322: GO 39470
// s1 := rand ( 1 , 4 ) ;
39324: LD_ADDR_VAR 0 2
39328: PUSH
39329: LD_INT 1
39331: PPUSH
39332: LD_INT 4
39334: PPUSH
39335: CALL_OW 12
39339: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
39340: LD_ADDR_VAR 0 4
39344: PUSH
39345: LD_VAR 0 6
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: LD_VAR 0 2
39358: PPUSH
39359: CALL_OW 259
39363: ST_TO_ADDR
// if s1 = 1 then
39364: LD_VAR 0 2
39368: PUSH
39369: LD_INT 1
39371: EQUAL
39372: IFFALSE 39392
// s2 := rand ( 2 , 4 ) else
39374: LD_ADDR_VAR 0 3
39378: PUSH
39379: LD_INT 2
39381: PPUSH
39382: LD_INT 4
39384: PPUSH
39385: CALL_OW 12
39389: ST_TO_ADDR
39390: GO 39400
// s2 := 1 ;
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_INT 1
39399: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
39400: LD_ADDR_VAR 0 5
39404: PUSH
39405: LD_VAR 0 6
39409: PUSH
39410: LD_INT 1
39412: ARRAY
39413: PPUSH
39414: LD_VAR 0 3
39418: PPUSH
39419: CALL_OW 259
39423: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
39424: LD_VAR 0 6
39428: PUSH
39429: LD_INT 1
39431: ARRAY
39432: PPUSH
39433: LD_VAR 0 2
39437: PPUSH
39438: LD_VAR 0 5
39442: PPUSH
39443: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
39447: LD_VAR 0 6
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PPUSH
39456: LD_VAR 0 3
39460: PPUSH
39461: LD_VAR 0 4
39465: PPUSH
39466: CALL_OW 237
// end ;
39470: PPOPN 6
39472: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39473: LD_EXP 83
39477: PUSH
39478: LD_EXP 130
39482: AND
39483: IFFALSE 39562
39485: GO 39487
39487: DISABLE
39488: LD_INT 0
39490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39491: LD_ADDR_VAR 0 1
39495: PUSH
39496: LD_INT 22
39498: PUSH
39499: LD_OWVAR 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 30
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PPUSH
39522: CALL_OW 69
39526: ST_TO_ADDR
// if not tmp then
39527: LD_VAR 0 1
39531: NOT
39532: IFFALSE 39536
// exit ;
39534: GO 39562
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39536: LD_VAR 0 1
39540: PUSH
39541: LD_INT 1
39543: PPUSH
39544: LD_VAR 0 1
39548: PPUSH
39549: CALL_OW 12
39553: ARRAY
39554: PPUSH
39555: LD_INT 1
39557: PPUSH
39558: CALL_OW 234
// end ;
39562: PPOPN 1
39564: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39565: LD_EXP 83
39569: PUSH
39570: LD_EXP 131
39574: AND
39575: IFFALSE 39687
39577: GO 39579
39579: DISABLE
39580: LD_INT 0
39582: PPUSH
39583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39584: LD_ADDR_VAR 0 2
39588: PUSH
39589: LD_INT 22
39591: PUSH
39592: LD_OWVAR 2
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: LD_INT 30
39606: PUSH
39607: LD_INT 27
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 30
39616: PUSH
39617: LD_INT 26
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 30
39626: PUSH
39627: LD_INT 28
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PPUSH
39644: CALL_OW 69
39648: ST_TO_ADDR
// if not tmp then
39649: LD_VAR 0 2
39653: NOT
39654: IFFALSE 39658
// exit ;
39656: GO 39687
// for i in tmp do
39658: LD_ADDR_VAR 0 1
39662: PUSH
39663: LD_VAR 0 2
39667: PUSH
39668: FOR_IN
39669: IFFALSE 39685
// SetLives ( i , 1 ) ;
39671: LD_VAR 0 1
39675: PPUSH
39676: LD_INT 1
39678: PPUSH
39679: CALL_OW 234
39683: GO 39668
39685: POP
39686: POP
// end ;
39687: PPOPN 2
39689: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39690: LD_EXP 83
39694: PUSH
39695: LD_EXP 132
39699: AND
39700: IFFALSE 39974
39702: GO 39704
39704: DISABLE
39705: LD_INT 0
39707: PPUSH
39708: PPUSH
39709: PPUSH
// begin i := rand ( 1 , 7 ) ;
39710: LD_ADDR_VAR 0 1
39714: PUSH
39715: LD_INT 1
39717: PPUSH
39718: LD_INT 7
39720: PPUSH
39721: CALL_OW 12
39725: ST_TO_ADDR
// case i of 1 :
39726: LD_VAR 0 1
39730: PUSH
39731: LD_INT 1
39733: DOUBLE
39734: EQUAL
39735: IFTRUE 39739
39737: GO 39749
39739: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39740: LD_STRING earthquake(getX(game), 0, 32)
39742: PPUSH
39743: CALL_OW 559
39747: GO 39974
39749: LD_INT 2
39751: DOUBLE
39752: EQUAL
39753: IFTRUE 39757
39755: GO 39771
39757: POP
// begin ToLua ( displayStucuk(); ) ;
39758: LD_STRING displayStucuk();
39760: PPUSH
39761: CALL_OW 559
// ResetFog ;
39765: CALL_OW 335
// end ; 3 :
39769: GO 39974
39771: LD_INT 3
39773: DOUBLE
39774: EQUAL
39775: IFTRUE 39779
39777: GO 39883
39779: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39780: LD_ADDR_VAR 0 2
39784: PUSH
39785: LD_INT 22
39787: PUSH
39788: LD_OWVAR 2
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 25
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PPUSH
39811: CALL_OW 69
39815: ST_TO_ADDR
// if not tmp then
39816: LD_VAR 0 2
39820: NOT
39821: IFFALSE 39825
// exit ;
39823: GO 39974
// un := tmp [ rand ( 1 , tmp ) ] ;
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_VAR 0 2
39834: PUSH
39835: LD_INT 1
39837: PPUSH
39838: LD_VAR 0 2
39842: PPUSH
39843: CALL_OW 12
39847: ARRAY
39848: ST_TO_ADDR
// if Crawls ( un ) then
39849: LD_VAR 0 3
39853: PPUSH
39854: CALL_OW 318
39858: IFFALSE 39869
// ComWalk ( un ) ;
39860: LD_VAR 0 3
39864: PPUSH
39865: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39869: LD_VAR 0 3
39873: PPUSH
39874: LD_INT 8
39876: PPUSH
39877: CALL_OW 336
// end ; 4 :
39881: GO 39974
39883: LD_INT 4
39885: DOUBLE
39886: EQUAL
39887: IFTRUE 39891
39889: GO 39952
39891: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39892: LD_ADDR_VAR 0 2
39896: PUSH
39897: LD_INT 22
39899: PUSH
39900: LD_OWVAR 2
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 30
39911: PUSH
39912: LD_INT 29
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PPUSH
39923: CALL_OW 69
39927: ST_TO_ADDR
// if not tmp then
39928: LD_VAR 0 2
39932: NOT
39933: IFFALSE 39937
// exit ;
39935: GO 39974
// DestroyUnit ( tmp [ 1 ] ) ;
39937: LD_VAR 0 2
39941: PUSH
39942: LD_INT 1
39944: ARRAY
39945: PPUSH
39946: CALL_OW 65
// end ; 5 .. 7 :
39950: GO 39974
39952: LD_INT 5
39954: DOUBLE
39955: GREATEREQUAL
39956: IFFALSE 39964
39958: LD_INT 7
39960: DOUBLE
39961: LESSEQUAL
39962: IFTRUE 39966
39964: GO 39973
39966: POP
// StreamSibBomb ; end ;
39967: CALL 36224 0 0
39971: GO 39974
39973: POP
// end ;
39974: PPOPN 3
39976: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
39977: LD_EXP 83
39981: PUSH
39982: LD_EXP 133
39986: AND
39987: IFFALSE 40143
39989: GO 39991
39991: DISABLE
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
39996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
39997: LD_ADDR_VAR 0 2
40001: PUSH
40002: LD_INT 81
40004: PUSH
40005: LD_OWVAR 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 21
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 21
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PPUSH
40046: CALL_OW 69
40050: ST_TO_ADDR
// if not tmp then
40051: LD_VAR 0 2
40055: NOT
40056: IFFALSE 40060
// exit ;
40058: GO 40143
// p := 0 ;
40060: LD_ADDR_VAR 0 3
40064: PUSH
40065: LD_INT 0
40067: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40068: LD_INT 35
40070: PPUSH
40071: CALL_OW 67
// p := p + 1 ;
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: LD_VAR 0 3
40084: PUSH
40085: LD_INT 1
40087: PLUS
40088: ST_TO_ADDR
// for i in tmp do
40089: LD_ADDR_VAR 0 1
40093: PUSH
40094: LD_VAR 0 2
40098: PUSH
40099: FOR_IN
40100: IFFALSE 40131
// if GetLives ( i ) < 1000 then
40102: LD_VAR 0 1
40106: PPUSH
40107: CALL_OW 256
40111: PUSH
40112: LD_INT 1000
40114: LESS
40115: IFFALSE 40129
// SetLives ( i , 1000 ) ;
40117: LD_VAR 0 1
40121: PPUSH
40122: LD_INT 1000
40124: PPUSH
40125: CALL_OW 234
40129: GO 40099
40131: POP
40132: POP
// until p > 20 ;
40133: LD_VAR 0 3
40137: PUSH
40138: LD_INT 20
40140: GREATER
40141: IFFALSE 40068
// end ;
40143: PPOPN 3
40145: END
// every 0 0$1 trigger StreamModeActive and sTime do
40146: LD_EXP 83
40150: PUSH
40151: LD_EXP 134
40155: AND
40156: IFFALSE 40191
40158: GO 40160
40160: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40161: LD_INT 28
40163: PPUSH
40164: LD_OWVAR 2
40168: PPUSH
40169: LD_INT 2
40171: PPUSH
40172: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40176: LD_INT 30
40178: PPUSH
40179: LD_OWVAR 2
40183: PPUSH
40184: LD_INT 2
40186: PPUSH
40187: CALL_OW 322
// end ;
40191: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40192: LD_EXP 83
40196: PUSH
40197: LD_EXP 135
40201: AND
40202: IFFALSE 40323
40204: GO 40206
40206: DISABLE
40207: LD_INT 0
40209: PPUSH
40210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40211: LD_ADDR_VAR 0 2
40215: PUSH
40216: LD_INT 22
40218: PUSH
40219: LD_OWVAR 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 21
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 3
40240: PUSH
40241: LD_INT 23
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: PPUSH
40260: CALL_OW 69
40264: ST_TO_ADDR
// if not tmp then
40265: LD_VAR 0 2
40269: NOT
40270: IFFALSE 40274
// exit ;
40272: GO 40323
// for i in tmp do
40274: LD_ADDR_VAR 0 1
40278: PUSH
40279: LD_VAR 0 2
40283: PUSH
40284: FOR_IN
40285: IFFALSE 40321
// begin if Crawls ( i ) then
40287: LD_VAR 0 1
40291: PPUSH
40292: CALL_OW 318
40296: IFFALSE 40307
// ComWalk ( i ) ;
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 138
// SetClass ( i , 2 ) ;
40307: LD_VAR 0 1
40311: PPUSH
40312: LD_INT 2
40314: PPUSH
40315: CALL_OW 336
// end ;
40319: GO 40284
40321: POP
40322: POP
// end ;
40323: PPOPN 2
40325: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
40326: LD_EXP 83
40330: PUSH
40331: LD_EXP 136
40335: AND
40336: IFFALSE 40617
40338: GO 40340
40340: DISABLE
40341: LD_INT 0
40343: PPUSH
40344: PPUSH
40345: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
40346: LD_OWVAR 2
40350: PPUSH
40351: LD_INT 9
40353: PPUSH
40354: LD_INT 1
40356: PPUSH
40357: LD_INT 1
40359: PPUSH
40360: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
40364: LD_INT 9
40366: PPUSH
40367: LD_OWVAR 2
40371: PPUSH
40372: CALL_OW 343
// uc_side := 9 ;
40376: LD_ADDR_OWVAR 20
40380: PUSH
40381: LD_INT 9
40383: ST_TO_ADDR
// uc_nation := 2 ;
40384: LD_ADDR_OWVAR 21
40388: PUSH
40389: LD_INT 2
40391: ST_TO_ADDR
// hc_name := Dark Warrior ;
40392: LD_ADDR_OWVAR 26
40396: PUSH
40397: LD_STRING Dark Warrior
40399: ST_TO_ADDR
// hc_gallery :=  ;
40400: LD_ADDR_OWVAR 33
40404: PUSH
40405: LD_STRING 
40407: ST_TO_ADDR
// hc_noskilllimit := true ;
40408: LD_ADDR_OWVAR 76
40412: PUSH
40413: LD_INT 1
40415: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
40416: LD_ADDR_OWVAR 31
40420: PUSH
40421: LD_INT 30
40423: PUSH
40424: LD_INT 30
40426: PUSH
40427: LD_INT 30
40429: PUSH
40430: LD_INT 30
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
// un := CreateHuman ;
40439: LD_ADDR_VAR 0 3
40443: PUSH
40444: CALL_OW 44
40448: ST_TO_ADDR
// hc_noskilllimit := false ;
40449: LD_ADDR_OWVAR 76
40453: PUSH
40454: LD_INT 0
40456: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40457: LD_VAR 0 3
40461: PPUSH
40462: LD_INT 1
40464: PPUSH
40465: CALL_OW 51
// p := 0 ;
40469: LD_ADDR_VAR 0 2
40473: PUSH
40474: LD_INT 0
40476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40477: LD_INT 35
40479: PPUSH
40480: CALL_OW 67
// p := p + 1 ;
40484: LD_ADDR_VAR 0 2
40488: PUSH
40489: LD_VAR 0 2
40493: PUSH
40494: LD_INT 1
40496: PLUS
40497: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40498: LD_VAR 0 3
40502: PPUSH
40503: CALL_OW 256
40507: PUSH
40508: LD_INT 1000
40510: LESS
40511: IFFALSE 40525
// SetLives ( un , 1000 ) ;
40513: LD_VAR 0 3
40517: PPUSH
40518: LD_INT 1000
40520: PPUSH
40521: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40525: LD_VAR 0 3
40529: PPUSH
40530: LD_INT 81
40532: PUSH
40533: LD_OWVAR 2
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 91
40544: PUSH
40545: LD_VAR 0 3
40549: PUSH
40550: LD_INT 30
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PPUSH
40562: CALL_OW 69
40566: PPUSH
40567: LD_VAR 0 3
40571: PPUSH
40572: CALL_OW 74
40576: PPUSH
40577: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
40581: LD_VAR 0 2
40585: PUSH
40586: LD_INT 60
40588: GREATER
40589: PUSH
40590: LD_VAR 0 3
40594: PPUSH
40595: CALL_OW 301
40599: OR
40600: IFFALSE 40477
// if un then
40602: LD_VAR 0 3
40606: IFFALSE 40617
// RemoveUnit ( un ) ;
40608: LD_VAR 0 3
40612: PPUSH
40613: CALL_OW 64
// end ; end_of_file
40617: PPOPN 3
40619: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40620: LD_INT 0
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 264
40635: PUSH
40636: LD_EXP 73
40640: EQUAL
40641: IFFALSE 40713
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40643: LD_INT 68
40645: PPUSH
40646: LD_VAR 0 1
40650: PPUSH
40651: CALL_OW 255
40655: PPUSH
40656: CALL_OW 321
40660: PUSH
40661: LD_INT 2
40663: EQUAL
40664: IFFALSE 40676
// eff := 70 else
40666: LD_ADDR_VAR 0 4
40670: PUSH
40671: LD_INT 70
40673: ST_TO_ADDR
40674: GO 40684
// eff := 30 ;
40676: LD_ADDR_VAR 0 4
40680: PUSH
40681: LD_INT 30
40683: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 250
40693: PPUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 251
40703: PPUSH
40704: LD_VAR 0 4
40708: PPUSH
40709: CALL_OW 495
// end ; end ;
40713: LD_VAR 0 2
40717: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40718: LD_INT 0
40720: PPUSH
// end ;
40721: LD_VAR 0 4
40725: RET
// export function SOS_Command ( cmd ) ; begin
40726: LD_INT 0
40728: PPUSH
// end ;
40729: LD_VAR 0 2
40733: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40734: LD_VAR 0 1
40738: PUSH
40739: LD_INT 255
40741: EQUAL
40742: PUSH
40743: LD_VAR 0 2
40747: PPUSH
40748: CALL_OW 264
40752: PUSH
40753: LD_INT 14
40755: PUSH
40756: LD_INT 53
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: IN
40763: AND
40764: PUSH
40765: LD_VAR 0 4
40769: PPUSH
40770: LD_VAR 0 5
40774: PPUSH
40775: CALL_OW 488
40779: AND
40780: IFFALSE 40804
// CutTreeXYR ( unit , x , y , 12 ) ;
40782: LD_VAR 0 2
40786: PPUSH
40787: LD_VAR 0 4
40791: PPUSH
40792: LD_VAR 0 5
40796: PPUSH
40797: LD_INT 12
40799: PPUSH
40800: CALL 40807 0 4
// end ;
40804: PPOPN 5
40806: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40807: LD_INT 0
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40818: LD_VAR 0 1
40822: NOT
40823: PUSH
40824: LD_VAR 0 2
40828: PPUSH
40829: LD_VAR 0 3
40833: PPUSH
40834: CALL_OW 488
40838: NOT
40839: OR
40840: PUSH
40841: LD_VAR 0 4
40845: NOT
40846: OR
40847: IFFALSE 40851
// exit ;
40849: GO 41191
// list := [ ] ;
40851: LD_ADDR_VAR 0 13
40855: PUSH
40856: EMPTY
40857: ST_TO_ADDR
// if x - r < 0 then
40858: LD_VAR 0 2
40862: PUSH
40863: LD_VAR 0 4
40867: MINUS
40868: PUSH
40869: LD_INT 0
40871: LESS
40872: IFFALSE 40884
// min_x := 0 else
40874: LD_ADDR_VAR 0 7
40878: PUSH
40879: LD_INT 0
40881: ST_TO_ADDR
40882: GO 40900
// min_x := x - r ;
40884: LD_ADDR_VAR 0 7
40888: PUSH
40889: LD_VAR 0 2
40893: PUSH
40894: LD_VAR 0 4
40898: MINUS
40899: ST_TO_ADDR
// if y - r < 0 then
40900: LD_VAR 0 3
40904: PUSH
40905: LD_VAR 0 4
40909: MINUS
40910: PUSH
40911: LD_INT 0
40913: LESS
40914: IFFALSE 40926
// min_y := 0 else
40916: LD_ADDR_VAR 0 8
40920: PUSH
40921: LD_INT 0
40923: ST_TO_ADDR
40924: GO 40942
// min_y := y - r ;
40926: LD_ADDR_VAR 0 8
40930: PUSH
40931: LD_VAR 0 3
40935: PUSH
40936: LD_VAR 0 4
40940: MINUS
40941: ST_TO_ADDR
// max_x := x + r ;
40942: LD_ADDR_VAR 0 9
40946: PUSH
40947: LD_VAR 0 2
40951: PUSH
40952: LD_VAR 0 4
40956: PLUS
40957: ST_TO_ADDR
// max_y := y + r ;
40958: LD_ADDR_VAR 0 10
40962: PUSH
40963: LD_VAR 0 3
40967: PUSH
40968: LD_VAR 0 4
40972: PLUS
40973: ST_TO_ADDR
// for _x = min_x to max_x do
40974: LD_ADDR_VAR 0 11
40978: PUSH
40979: DOUBLE
40980: LD_VAR 0 7
40984: DEC
40985: ST_TO_ADDR
40986: LD_VAR 0 9
40990: PUSH
40991: FOR_TO
40992: IFFALSE 41109
// for _y = min_y to max_y do
40994: LD_ADDR_VAR 0 12
40998: PUSH
40999: DOUBLE
41000: LD_VAR 0 8
41004: DEC
41005: ST_TO_ADDR
41006: LD_VAR 0 10
41010: PUSH
41011: FOR_TO
41012: IFFALSE 41105
// begin if not ValidHex ( _x , _y ) then
41014: LD_VAR 0 11
41018: PPUSH
41019: LD_VAR 0 12
41023: PPUSH
41024: CALL_OW 488
41028: NOT
41029: IFFALSE 41033
// continue ;
41031: GO 41011
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
41033: LD_VAR 0 11
41037: PPUSH
41038: LD_VAR 0 12
41042: PPUSH
41043: CALL_OW 351
41047: PUSH
41048: LD_VAR 0 11
41052: PPUSH
41053: LD_VAR 0 12
41057: PPUSH
41058: CALL_OW 554
41062: AND
41063: IFFALSE 41103
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41065: LD_ADDR_VAR 0 13
41069: PUSH
41070: LD_VAR 0 13
41074: PPUSH
41075: LD_VAR 0 13
41079: PUSH
41080: LD_INT 1
41082: PLUS
41083: PPUSH
41084: LD_VAR 0 11
41088: PUSH
41089: LD_VAR 0 12
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PPUSH
41098: CALL_OW 2
41102: ST_TO_ADDR
// end ;
41103: GO 41011
41105: POP
41106: POP
41107: GO 40991
41109: POP
41110: POP
// if not list then
41111: LD_VAR 0 13
41115: NOT
41116: IFFALSE 41120
// exit ;
41118: GO 41191
// for i in list do
41120: LD_ADDR_VAR 0 6
41124: PUSH
41125: LD_VAR 0 13
41129: PUSH
41130: FOR_IN
41131: IFFALSE 41189
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41133: LD_VAR 0 1
41137: PPUSH
41138: LD_STRING M
41140: PUSH
41141: LD_VAR 0 6
41145: PUSH
41146: LD_INT 1
41148: ARRAY
41149: PUSH
41150: LD_VAR 0 6
41154: PUSH
41155: LD_INT 2
41157: ARRAY
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: PUSH
41180: EMPTY
41181: LIST
41182: PPUSH
41183: CALL_OW 447
41187: GO 41130
41189: POP
41190: POP
// end ;
41191: LD_VAR 0 5
41195: RET
