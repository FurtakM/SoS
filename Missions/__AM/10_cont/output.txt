// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10c_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10c_
 229: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 10_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24704 0 0
// PrepareDifficulty ;
 250: CALL 10037 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19635 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19635 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19635 0 2
// PrepareArabianCommander ;
 354: CALL 3198 0 0
// PrepareArabian ;
 358: CALL 3250 0 0
// BuildArabianBase ;
 362: CALL 12736 0 0
// TameApemans ;
 366: CALL 18600 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9631 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9631 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9631 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9631 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9631 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9631 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9631 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9631 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9631 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9631 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9631 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9631 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9631 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9631 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9631 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9631 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9631 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9631 0 2
1944: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1945: LD_ADDR_EXP 22
1949: PUSH
1950: LD_STRING 09_others
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1958: LD_ADDR_EXP 23
1962: PUSH
1963: LD_STRING 09_apes
1965: PPUSH
1966: CALL_OW 31
1970: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1971: LD_EXP 11
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1986: LD_EXP 12
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2001: LD_EXP 13
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2016: LD_EXP 14
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2031: LD_EXP 15
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2061: LD_EXP 8
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2076: LD_EXP 11
2080: PUSH
2081: LD_EXP 14
2085: PUSH
2086: LD_EXP 12
2090: PUSH
2091: LD_EXP 15
2095: PUSH
2096: LD_EXP 17
2100: PUSH
2101: LD_EXP 13
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: LD_INT 4
2116: PPUSH
2117: CALL_OW 336
// if others09 > 2 then
2121: LD_EXP 22
2125: PUSH
2126: LD_INT 2
2128: GREATER
2129: IFFALSE 2210
// begin for i := 1 to 3 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 3
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2206
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2147: LD_EXP 22
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2168: LD_ADDR_EXP 22
2172: PUSH
2173: LD_EXP 22
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: CALL_OW 3
2185: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2186: LD_EXP 22
2190: PUSH
2191: LD_VAR 0 2
2195: ARRAY
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: CALL_OW 336
// end ;
2204: GO 2144
2206: POP
2207: POP
// end else
2208: GO 2270
// begin for i in others09 do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_EXP 22
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2268
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 49
// others09 = others09 diff i ;
2238: LD_ADDR_EXP 22
2242: PUSH
2243: LD_EXP 22
2247: PUSH
2248: LD_VAR 0 2
2252: DIFF
2253: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_INT 2
2261: PPUSH
2262: CALL_OW 336
// end ;
2266: GO 2220
2268: POP
2269: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2270: LD_INT 22
2272: PUSH
2273: LD_INT 4
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 25
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 69
2298: PUSH
2299: LD_INT 0
2301: EQUAL
2302: IFFALSE 2420
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2304: LD_ADDR_VAR 0 3
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 2
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 11
2342: PUSH
2343: LD_EXP 14
2347: PUSH
2348: LD_EXP 12
2352: PUSH
2353: LD_EXP 15
2357: PUSH
2358: LD_EXP 17
2362: PUSH
2363: LD_EXP 13
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: DIFF
2376: ST_TO_ADDR
// if not tmp then
2377: LD_VAR 0 3
2381: NOT
2382: IFFALSE 2404
// begin if Denis then
2384: LD_EXP 12
2388: IFFALSE 2402
// SetClass ( Denis , 2 ) ;
2390: LD_EXP 12
2394: PPUSH
2395: LD_INT 2
2397: PPUSH
2398: CALL_OW 336
// exit ;
2402: GO 2570
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 1
2411: ARRAY
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: CALL_OW 336
// end ; for i in ape09 do
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 23
2429: PUSH
2430: FOR_IN
2431: IFFALSE 2450
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 49
2448: GO 2430
2450: POP
2451: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2452: LD_INT 22
2454: PUSH
2455: LD_INT 4
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: PPUSH
2481: LD_INT 0
2483: PPUSH
2484: LD_INT 101
2486: PPUSH
2487: LD_INT 30
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: CALL_OW 205
// uc_side = 1 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 1
2504: ST_TO_ADDR
// hc_class := 1 ;
2505: LD_ADDR_OWVAR 28
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
// hc_sex := sex_female ;
2513: LD_ADDR_OWVAR 27
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// hc_gallery :=  ;
2521: LD_ADDR_OWVAR 33
2525: PUSH
2526: LD_STRING 
2528: ST_TO_ADDR
// hc_name :=  ;
2529: LD_ADDR_OWVAR 26
2533: PUSH
2534: LD_STRING 
2536: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2537: LD_ADDR_OWVAR 31
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: LD_INT 1
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: ST_TO_ADDR
// AmScout = CreateHuman ;
2560: LD_ADDR_EXP 18
2564: PUSH
2565: CALL_OW 44
2569: ST_TO_ADDR
// end ;
2570: LD_VAR 0 1
2574: RET
// export function PrepareCornell ; begin
2575: LD_INT 0
2577: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2578: LD_INT 4
2580: PPUSH
2581: LD_INT 4
2583: PPUSH
2584: CALL_OW 343
// uc_side = 4 ;
2588: LD_ADDR_OWVAR 20
2592: PUSH
2593: LD_INT 4
2595: ST_TO_ADDR
// uc_nation = 1 ;
2596: LD_ADDR_OWVAR 21
2600: PUSH
2601: LD_INT 1
2603: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2604: LD_ADDR_EXP 19
2608: PUSH
2609: LD_STRING 03_Cornel
2611: PPUSH
2612: LD_INT 1
2614: PPUSH
2615: CALL 9631 0 2
2619: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2620: LD_EXP 19
2624: PPUSH
2625: LD_INT 8
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2635: LD_EXP 19
2639: PPUSH
2640: LD_INT 350
2642: PPUSH
2643: CALL_OW 234
// if IsInUnit ( JMM ) then
2647: LD_EXP 1
2651: PPUSH
2652: CALL_OW 310
2656: IFFALSE 2699
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2658: LD_EXP 19
2662: PPUSH
2663: LD_EXP 1
2667: PPUSH
2668: CALL_OW 310
2672: PPUSH
2673: CALL_OW 250
2677: PPUSH
2678: LD_EXP 1
2682: PPUSH
2683: CALL_OW 310
2687: PPUSH
2688: CALL_OW 251
2692: PPUSH
2693: CALL_OW 111
2697: GO 2728
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2699: LD_EXP 19
2703: PPUSH
2704: LD_EXP 1
2708: PPUSH
2709: CALL_OW 250
2713: PPUSH
2714: LD_EXP 1
2718: PPUSH
2719: CALL_OW 251
2723: PPUSH
2724: CALL_OW 111
// end ; end_of_file
2728: LD_VAR 0 1
2732: RET
// export function PrepareRussians ; var i , un ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
// uc_side = 3 ;
2738: LD_ADDR_OWVAR 20
2742: PUSH
2743: LD_INT 3
2745: ST_TO_ADDR
// uc_nation = 3 ;
2746: LD_ADDR_OWVAR 21
2750: PUSH
2751: LD_INT 3
2753: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2754: LD_ADDR_EXP 25
2758: PUSH
2759: LD_STRING Tsaritsyn
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL 9631 0 2
2769: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2770: LD_EXP 25
2774: PPUSH
2775: LD_INT 3
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// for i = 1 to 14 do
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: DOUBLE
2791: LD_INT 1
2793: DEC
2794: ST_TO_ADDR
2795: LD_INT 14
2797: PUSH
2798: FOR_TO
2799: IFFALSE 2885
// begin uc_side = 3 ;
2801: LD_ADDR_OWVAR 20
2805: PUSH
2806: LD_INT 3
2808: ST_TO_ADDR
// uc_nation = 3 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// hc_gallery =  ;
2817: LD_ADDR_OWVAR 33
2821: PUSH
2822: LD_STRING 
2824: ST_TO_ADDR
// hc_name =  ;
2825: LD_ADDR_OWVAR 26
2829: PUSH
2830: LD_STRING 
2832: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2833: LD_INT 0
2835: PPUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_EXP 36
2843: PPUSH
2844: LD_EXP 37
2848: PPUSH
2849: CALL_OW 12
2853: PPUSH
2854: CALL_OW 380
// un = CreateHuman ;
2858: LD_ADDR_VAR 0 3
2862: PUSH
2863: CALL_OW 44
2867: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2868: LD_VAR 0 3
2872: PPUSH
2873: LD_INT 3
2875: PPUSH
2876: LD_INT 0
2878: PPUSH
2879: CALL_OW 49
// end ;
2883: GO 2798
2885: POP
2886: POP
// for i = 1 to 6 do
2887: LD_ADDR_VAR 0 2
2891: PUSH
2892: DOUBLE
2893: LD_INT 1
2895: DEC
2896: ST_TO_ADDR
2897: LD_INT 6
2899: PUSH
2900: FOR_TO
2901: IFFALSE 2987
// begin uc_side = 3 ;
2903: LD_ADDR_OWVAR 20
2907: PUSH
2908: LD_INT 3
2910: ST_TO_ADDR
// uc_nation = 3 ;
2911: LD_ADDR_OWVAR 21
2915: PUSH
2916: LD_INT 3
2918: ST_TO_ADDR
// hc_gallery =  ;
2919: LD_ADDR_OWVAR 33
2923: PUSH
2924: LD_STRING 
2926: ST_TO_ADDR
// hc_name =  ;
2927: LD_ADDR_OWVAR 26
2931: PUSH
2932: LD_STRING 
2934: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2935: LD_INT 0
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: LD_EXP 36
2945: PPUSH
2946: LD_EXP 37
2950: PPUSH
2951: CALL_OW 12
2955: PPUSH
2956: CALL_OW 380
// un = CreateHuman ;
2960: LD_ADDR_VAR 0 3
2964: PUSH
2965: CALL_OW 44
2969: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2970: LD_VAR 0 3
2974: PPUSH
2975: LD_INT 3
2977: PPUSH
2978: LD_INT 0
2980: PPUSH
2981: CALL_OW 49
// end ;
2985: GO 2900
2987: POP
2988: POP
// for i = 1 to 6 do
2989: LD_ADDR_VAR 0 2
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 6
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3089
// begin uc_side = 3 ;
3005: LD_ADDR_OWVAR 20
3009: PUSH
3010: LD_INT 3
3012: ST_TO_ADDR
// uc_nation = 3 ;
3013: LD_ADDR_OWVAR 21
3017: PUSH
3018: LD_INT 3
3020: ST_TO_ADDR
// hc_gallery =  ;
3021: LD_ADDR_OWVAR 33
3025: PUSH
3026: LD_STRING 
3028: ST_TO_ADDR
// hc_name =  ;
3029: LD_ADDR_OWVAR 26
3033: PUSH
3034: LD_STRING 
3036: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3037: LD_INT 0
3039: PPUSH
3040: LD_INT 3
3042: PPUSH
3043: LD_EXP 36
3047: PPUSH
3048: LD_EXP 37
3052: PPUSH
3053: CALL_OW 12
3057: PPUSH
3058: CALL_OW 380
// un = CreateHuman ;
3062: LD_ADDR_VAR 0 3
3066: PUSH
3067: CALL_OW 44
3071: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3072: LD_VAR 0 3
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: LD_INT 0
3082: PPUSH
3083: CALL_OW 49
// end ;
3087: GO 3002
3089: POP
3090: POP
// for i = 1 to 4 do
3091: LD_ADDR_VAR 0 2
3095: PUSH
3096: DOUBLE
3097: LD_INT 1
3099: DEC
3100: ST_TO_ADDR
3101: LD_INT 4
3103: PUSH
3104: FOR_TO
3105: IFFALSE 3191
// begin uc_side = 3 ;
3107: LD_ADDR_OWVAR 20
3111: PUSH
3112: LD_INT 3
3114: ST_TO_ADDR
// uc_nation = 3 ;
3115: LD_ADDR_OWVAR 21
3119: PUSH
3120: LD_INT 3
3122: ST_TO_ADDR
// hc_gallery =  ;
3123: LD_ADDR_OWVAR 33
3127: PUSH
3128: LD_STRING 
3130: ST_TO_ADDR
// hc_name =  ;
3131: LD_ADDR_OWVAR 26
3135: PUSH
3136: LD_STRING 
3138: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3139: LD_INT 0
3141: PPUSH
3142: LD_INT 4
3144: PPUSH
3145: LD_EXP 36
3149: PPUSH
3150: LD_EXP 37
3154: PPUSH
3155: CALL_OW 12
3159: PPUSH
3160: CALL_OW 380
// un = CreateHuman ;
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 49
// end ;
3189: GO 3104
3191: POP
3192: POP
// end ; end_of_file
3193: LD_VAR 0 1
3197: RET
// export function PrepareArabianCommander ; begin
3198: LD_INT 0
3200: PPUSH
// uc_side = 2 ;
3201: LD_ADDR_OWVAR 20
3205: PUSH
3206: LD_INT 2
3208: ST_TO_ADDR
// uc_nation = 2 ;
3209: LD_ADDR_OWVAR 21
3213: PUSH
3214: LD_INT 2
3216: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3217: LD_ADDR_EXP 26
3221: PUSH
3222: LD_STRING Dietrich
3224: PPUSH
3225: CALL_OW 25
3229: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3230: LD_EXP 26
3234: PPUSH
3235: LD_INT 4
3237: PPUSH
3238: LD_INT 0
3240: PPUSH
3241: CALL_OW 49
// end ;
3245: LD_VAR 0 1
3249: RET
// export function PrepareArabian ; var i , un , veh ; begin
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
3255: PPUSH
// uc_side := 2 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 2
3263: ST_TO_ADDR
// uc_nation := 2 ;
3264: LD_ADDR_OWVAR 21
3268: PUSH
3269: LD_INT 2
3271: ST_TO_ADDR
// if not Ahmed then
3272: LD_EXP 27
3276: NOT
3277: IFFALSE 3345
// begin InitHc ;
3279: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3283: LD_INT 1
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_EXP 36
3293: PPUSH
3294: LD_EXP 37
3298: PUSH
3299: LD_INT 1
3301: PLUS
3302: PPUSH
3303: CALL_OW 12
3307: PPUSH
3308: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3312: LD_ADDR_OWVAR 26
3316: PUSH
3317: LD_STRING Ahmed Abbasid
3319: ST_TO_ADDR
// Ahmed := CreateHuman ;
3320: LD_ADDR_EXP 27
3324: PUSH
3325: CALL_OW 44
3329: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3330: LD_EXP 27
3334: PPUSH
3335: LD_INT 4
3337: PPUSH
3338: LD_INT 0
3340: PPUSH
3341: CALL_OW 49
// end ; for i = 1 to 3 do
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: DOUBLE
3351: LD_INT 1
3353: DEC
3354: ST_TO_ADDR
3355: LD_INT 3
3357: PUSH
3358: FOR_TO
3359: IFFALSE 3445
// begin uc_side = 2 ;
3361: LD_ADDR_OWVAR 20
3365: PUSH
3366: LD_INT 2
3368: ST_TO_ADDR
// uc_nation = 2 ;
3369: LD_ADDR_OWVAR 21
3373: PUSH
3374: LD_INT 2
3376: ST_TO_ADDR
// hc_gallery =  ;
3377: LD_ADDR_OWVAR 33
3381: PUSH
3382: LD_STRING 
3384: ST_TO_ADDR
// hc_name =  ;
3385: LD_ADDR_OWVAR 26
3389: PUSH
3390: LD_STRING 
3392: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: LD_EXP 36
3403: PPUSH
3404: LD_EXP 37
3408: PPUSH
3409: CALL_OW 12
3413: PPUSH
3414: CALL_OW 380
// un = CreateHuman ;
3418: LD_ADDR_VAR 0 3
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: LD_INT 4
3435: PPUSH
3436: LD_INT 0
3438: PPUSH
3439: CALL_OW 49
// end ;
3443: GO 3358
3445: POP
3446: POP
// for i = 1 to 6 do
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: DOUBLE
3453: LD_INT 1
3455: DEC
3456: ST_TO_ADDR
3457: LD_INT 6
3459: PUSH
3460: FOR_TO
3461: IFFALSE 3547
// begin uc_side = 2 ;
3463: LD_ADDR_OWVAR 20
3467: PUSH
3468: LD_INT 2
3470: ST_TO_ADDR
// uc_nation = 2 ;
3471: LD_ADDR_OWVAR 21
3475: PUSH
3476: LD_INT 2
3478: ST_TO_ADDR
// hc_gallery =  ;
3479: LD_ADDR_OWVAR 33
3483: PUSH
3484: LD_STRING 
3486: ST_TO_ADDR
// hc_name =  ;
3487: LD_ADDR_OWVAR 26
3491: PUSH
3492: LD_STRING 
3494: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3495: LD_INT 0
3497: PPUSH
3498: LD_INT 2
3500: PPUSH
3501: LD_EXP 36
3505: PPUSH
3506: LD_EXP 37
3510: PPUSH
3511: CALL_OW 12
3515: PPUSH
3516: CALL_OW 380
// un = CreateHuman ;
3520: LD_ADDR_VAR 0 3
3524: PUSH
3525: CALL_OW 44
3529: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3530: LD_VAR 0 3
3534: PPUSH
3535: LD_INT 4
3537: PPUSH
3538: LD_INT 0
3540: PPUSH
3541: CALL_OW 49
// end ;
3545: GO 3460
3547: POP
3548: POP
// for i = 1 to 6 do
3549: LD_ADDR_VAR 0 2
3553: PUSH
3554: DOUBLE
3555: LD_INT 1
3557: DEC
3558: ST_TO_ADDR
3559: LD_INT 6
3561: PUSH
3562: FOR_TO
3563: IFFALSE 3649
// begin uc_side = 2 ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_INT 2
3572: ST_TO_ADDR
// uc_nation = 2 ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// hc_gallery =  ;
3581: LD_ADDR_OWVAR 33
3585: PUSH
3586: LD_STRING 
3588: ST_TO_ADDR
// hc_name =  ;
3589: LD_ADDR_OWVAR 26
3593: PUSH
3594: LD_STRING 
3596: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3597: LD_INT 0
3599: PPUSH
3600: LD_INT 1
3602: PPUSH
3603: LD_EXP 36
3607: PPUSH
3608: LD_EXP 37
3612: PPUSH
3613: CALL_OW 12
3617: PPUSH
3618: CALL_OW 380
// un = CreateHuman ;
3622: LD_ADDR_VAR 0 3
3626: PUSH
3627: CALL_OW 44
3631: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3632: LD_VAR 0 3
3636: PPUSH
3637: LD_INT 4
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 49
// end ;
3647: GO 3562
3649: POP
3650: POP
// for i = 1 to 4 do
3651: LD_ADDR_VAR 0 2
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 4
3663: PUSH
3664: FOR_TO
3665: IFFALSE 3751
// begin uc_side = 2 ;
3667: LD_ADDR_OWVAR 20
3671: PUSH
3672: LD_INT 2
3674: ST_TO_ADDR
// uc_nation = 2 ;
3675: LD_ADDR_OWVAR 21
3679: PUSH
3680: LD_INT 2
3682: ST_TO_ADDR
// hc_gallery =  ;
3683: LD_ADDR_OWVAR 33
3687: PUSH
3688: LD_STRING 
3690: ST_TO_ADDR
// hc_name =  ;
3691: LD_ADDR_OWVAR 26
3695: PUSH
3696: LD_STRING 
3698: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3699: LD_INT 0
3701: PPUSH
3702: LD_INT 4
3704: PPUSH
3705: LD_EXP 36
3709: PPUSH
3710: LD_EXP 37
3714: PPUSH
3715: CALL_OW 12
3719: PPUSH
3720: CALL_OW 380
// un = CreateHuman ;
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: CALL_OW 44
3733: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3734: LD_VAR 0 3
3738: PPUSH
3739: LD_INT 4
3741: PPUSH
3742: LD_INT 0
3744: PPUSH
3745: CALL_OW 49
// end ;
3749: GO 3664
3751: POP
3752: POP
// for i = 1 to 2 do
3753: LD_ADDR_VAR 0 2
3757: PUSH
3758: DOUBLE
3759: LD_INT 1
3761: DEC
3762: ST_TO_ADDR
3763: LD_INT 2
3765: PUSH
3766: FOR_TO
3767: IFFALSE 3897
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3769: LD_ADDR_VAR 0 4
3773: PUSH
3774: LD_INT 22
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 21
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 58
3796: PUSH
3797: EMPTY
3798: LIST
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: PPUSH
3805: CALL_OW 69
3809: ST_TO_ADDR
// uc_side = 2 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 2
3817: ST_TO_ADDR
// uc_nation = 2 ;
3818: LD_ADDR_OWVAR 21
3822: PUSH
3823: LD_INT 2
3825: ST_TO_ADDR
// hc_gallery =  ;
3826: LD_ADDR_OWVAR 33
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// hc_name =  ;
3834: LD_ADDR_OWVAR 26
3838: PUSH
3839: LD_STRING 
3841: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3842: LD_INT 0
3844: PPUSH
3845: LD_INT 3
3847: PPUSH
3848: LD_EXP 36
3852: PPUSH
3853: LD_EXP 37
3857: PPUSH
3858: CALL_OW 12
3862: PPUSH
3863: CALL_OW 380
// un = CreateHuman ;
3867: LD_ADDR_VAR 0 3
3871: PUSH
3872: CALL_OW 44
3876: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3877: LD_VAR 0 3
3881: PPUSH
3882: LD_VAR 0 4
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PPUSH
3891: CALL_OW 52
// end ;
3895: GO 3766
3897: POP
3898: POP
// end ;
3899: LD_VAR 0 1
3903: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3904: LD_INT 0
3906: PPUSH
3907: PPUSH
3908: PPUSH
3909: PPUSH
3910: PPUSH
3911: PPUSH
// for i := 1 to 2 do
3912: LD_ADDR_VAR 0 2
3916: PUSH
3917: DOUBLE
3918: LD_INT 1
3920: DEC
3921: ST_TO_ADDR
3922: LD_INT 2
3924: PUSH
3925: FOR_TO
3926: IFFALSE 4052
// begin uc_side = 5 ;
3928: LD_ADDR_OWVAR 20
3932: PUSH
3933: LD_INT 5
3935: ST_TO_ADDR
// uc_nation = 2 ;
3936: LD_ADDR_OWVAR 21
3940: PUSH
3941: LD_INT 2
3943: ST_TO_ADDR
// vc_chassis := 31 ;
3944: LD_ADDR_OWVAR 37
3948: PUSH
3949: LD_INT 31
3951: ST_TO_ADDR
// vc_control := control_rider ;
3952: LD_ADDR_OWVAR 38
3956: PUSH
3957: LD_INT 4
3959: ST_TO_ADDR
// animal := CreateVehicle ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: CALL_OW 45
3969: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3970: LD_VAR 0 3
3974: PPUSH
3975: LD_INT 7
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 49
// hc_gallery =  ;
3985: LD_ADDR_OWVAR 33
3989: PUSH
3990: LD_STRING 
3992: ST_TO_ADDR
// hc_name =  ;
3993: LD_ADDR_OWVAR 26
3997: PUSH
3998: LD_STRING 
4000: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4001: LD_INT 0
4003: PPUSH
4004: LD_INT 11
4006: PPUSH
4007: LD_EXP 36
4011: PPUSH
4012: LD_EXP 37
4016: PPUSH
4017: CALL_OW 12
4021: PPUSH
4022: CALL_OW 380
// un = CreateHuman ;
4026: LD_ADDR_VAR 0 4
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: CALL_OW 52
// end ;
4050: GO 3925
4052: POP
4053: POP
// repeat wait ( 0 0$1 ) ;
4054: LD_INT 35
4056: PPUSH
4057: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4061: LD_ADDR_VAR 0 5
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 1
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PPUSH
4076: CALL_OW 69
4080: PPUSH
4081: LD_VAR 0 2
4085: PPUSH
4086: CALL_OW 74
4090: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4091: LD_ADDR_VAR 0 6
4095: PUSH
4096: LD_INT 22
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 2
4108: PUSH
4109: LD_INT 59
4111: PUSH
4112: EMPTY
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 21
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: PPUSH
4148: CALL_OW 69
4152: PPUSH
4153: LD_VAR 0 2
4157: PPUSH
4158: CALL_OW 74
4162: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4163: LD_ADDR_VAR 0 2
4167: PUSH
4168: LD_INT 22
4170: PUSH
4171: LD_INT 5
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 25
4180: PUSH
4181: LD_INT 11
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PPUSH
4192: CALL_OW 69
4196: PUSH
4197: FOR_IN
4198: IFFALSE 4268
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4200: LD_VAR 0 2
4204: PPUSH
4205: LD_VAR 0 5
4209: PPUSH
4210: CALL_OW 296
4214: PUSH
4215: LD_INT 8
4217: PLUS
4218: PUSH
4219: LD_VAR 0 2
4223: PPUSH
4224: LD_VAR 0 6
4228: PPUSH
4229: CALL_OW 296
4233: LESS
4234: IFFALSE 4252
// ComAttackUnit ( i , target1 ) else
4236: LD_VAR 0 2
4240: PPUSH
4241: LD_VAR 0 5
4245: PPUSH
4246: CALL_OW 115
4250: GO 4266
// ComAttackUnit ( i , target2 ) ;
4252: LD_VAR 0 2
4256: PPUSH
4257: LD_VAR 0 6
4261: PPUSH
4262: CALL_OW 115
// end ;
4266: GO 4197
4268: POP
4269: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4270: LD_INT 22
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: PUSH
4280: LD_INT 25
4282: PUSH
4283: LD_INT 11
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PPUSH
4294: CALL_OW 69
4298: PUSH
4299: LD_INT 0
4301: EQUAL
4302: PUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 1
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 69
4317: PUSH
4318: LD_INT 0
4320: EQUAL
4321: OR
4322: IFFALSE 4054
// end ; end_of_file
4324: LD_VAR 0 1
4328: RET
// every 1 do
4329: GO 4331
4331: DISABLE
// begin InGameOn ;
4332: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4336: LD_INT 1
4338: PPUSH
4339: LD_INT 19
4341: PPUSH
4342: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4346: LD_EXP 11
4350: PPUSH
4351: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4355: LD_INT 22
4357: PUSH
4358: LD_INT 4
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 2
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: IFFALSE 4431
// begin repeat wait ( 0 0$1 ) ;
4385: LD_INT 35
4387: PPUSH
4388: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4392: LD_INT 22
4394: PUSH
4395: LD_INT 4
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 30
4404: PUSH
4405: LD_INT 0
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PPUSH
4416: CALL_OW 69
4420: IFFALSE 4385
// Wait ( 0 0$1 ) ;
4422: LD_INT 35
4424: PPUSH
4425: CALL_OW 67
// end else
4429: GO 4438
// Wait ( 0 0$3 ) ;
4431: LD_INT 105
4433: PPUSH
4434: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4438: LD_EXP 1
4442: PPUSH
4443: CALL_OW 310
4447: PPUSH
4448: CALL_OW 85
// Wait ( 0 0$1 ) ;
4452: LD_INT 35
4454: PPUSH
4455: CALL_OW 67
// if IsOk ( Gary ) then
4459: LD_EXP 10
4463: PPUSH
4464: CALL_OW 302
4468: IFFALSE 4506
// begin Say ( Gary , D2-Gary-1 ) ;
4470: LD_EXP 10
4474: PPUSH
4475: LD_STRING D2-Gary-1
4477: PPUSH
4478: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4482: LD_EXP 1
4486: PPUSH
4487: LD_STRING D2-JMM-1
4489: PPUSH
4490: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4494: LD_EXP 10
4498: PPUSH
4499: LD_STRING D2-Gary-2
4501: PPUSH
4502: CALL_OW 88
// end ; InGameOff ;
4506: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4510: LD_STRING M1
4512: PPUSH
4513: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4517: LD_INT 38
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: LD_INT 100
4525: PPUSH
4526: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4530: LD_INT 47
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 50
4538: PPUSH
4539: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4543: LD_INT 47
4545: PPUSH
4546: LD_INT 3
4548: PPUSH
4549: LD_INT 50
4551: PPUSH
4552: CALL_OW 291
// SaveForQuickRestart ;
4556: CALL_OW 22
// end ;
4560: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4561: LD_EXP 1
4565: PPUSH
4566: LD_EXP 11
4570: PPUSH
4571: CALL_OW 296
4575: PUSH
4576: LD_INT 15
4578: LESS
4579: IFFALSE 5045
4581: GO 4583
4583: DISABLE
// begin InGameOn ;
4584: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4588: LD_EXP 1
4592: PPUSH
4593: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4597: LD_EXP 1
4601: PPUSH
4602: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4606: LD_EXP 1
4610: PPUSH
4611: LD_EXP 11
4615: PPUSH
4616: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4620: LD_INT 35
4622: PPUSH
4623: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4627: LD_EXP 11
4631: PUSH
4632: LD_EXP 13
4636: PUSH
4637: LD_EXP 12
4641: PUSH
4642: LD_EXP 14
4646: PUSH
4647: LD_EXP 8
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: PPUSH
4659: LD_EXP 1
4663: PPUSH
4664: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4668: LD_EXP 1
4672: PPUSH
4673: LD_EXP 11
4677: PPUSH
4678: CALL_OW 296
4682: PUSH
4683: LD_INT 5
4685: LESS
4686: IFFALSE 4620
// ComTurnUnit ( JMM , Simms ) ;
4688: LD_EXP 1
4692: PPUSH
4693: LD_EXP 11
4697: PPUSH
4698: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4702: LD_EXP 11
4706: PUSH
4707: LD_EXP 13
4711: PUSH
4712: LD_EXP 12
4716: PUSH
4717: LD_EXP 14
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: PPUSH
4728: LD_EXP 1
4732: PPUSH
4733: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4737: LD_EXP 1
4741: PUSH
4742: LD_EXP 11
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PPUSH
4751: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4755: LD_EXP 11
4759: PPUSH
4760: LD_STRING D2a-Sim-1
4762: PPUSH
4763: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4767: LD_EXP 1
4771: PPUSH
4772: LD_STRING D2a-JMM-1
4774: PPUSH
4775: CALL_OW 88
// if IsOk ( Joan ) then
4779: LD_EXP 13
4783: PPUSH
4784: CALL_OW 302
4788: IFFALSE 4840
// begin ComTurnUnit ( JMM , Joan ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 13
4799: PPUSH
4800: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4804: LD_EXP 13
4808: PPUSH
4809: LD_STRING D2b-Joan-1
4811: PPUSH
4812: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4816: LD_EXP 1
4820: PPUSH
4821: LD_STRING D2b-JMM-1
4823: PPUSH
4824: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4828: LD_EXP 13
4832: PPUSH
4833: LD_STRING D2b-Joan-2
4835: PPUSH
4836: CALL_OW 88
// end ; if IsOk ( Denis ) then
4840: LD_EXP 12
4844: PPUSH
4845: CALL_OW 302
4849: IFFALSE 4877
// begin ComTurnUnit ( JMM , Denis ) ;
4851: LD_EXP 1
4855: PPUSH
4856: LD_EXP 12
4860: PPUSH
4861: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4865: LD_EXP 12
4869: PPUSH
4870: LD_STRING D2c-Den-1
4872: PPUSH
4873: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4877: LD_EXP 8
4881: PPUSH
4882: CALL_OW 302
4886: IFFALSE 4955
// begin repeat wait ( 0 0$1 ) ;
4888: LD_INT 35
4890: PPUSH
4891: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4895: LD_EXP 8
4899: PPUSH
4900: LD_EXP 1
4904: PPUSH
4905: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4909: LD_EXP 1
4913: PPUSH
4914: LD_EXP 8
4918: PPUSH
4919: CALL_OW 296
4923: PUSH
4924: LD_INT 5
4926: LESS
4927: IFFALSE 4888
// ComTurnUnit ( JMM , Kikuchi ) ;
4929: LD_EXP 1
4933: PPUSH
4934: LD_EXP 8
4938: PPUSH
4939: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4943: LD_EXP 8
4947: PPUSH
4948: LD_STRING D3b-Yam-1
4950: PPUSH
4951: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4955: LD_EXP 14
4959: PPUSH
4960: CALL_OW 302
4964: IFFALSE 5004
// begin ComTurnUnit ( JMM , Khatam ) ;
4966: LD_EXP 1
4970: PPUSH
4971: LD_EXP 14
4975: PPUSH
4976: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4980: LD_EXP 1
4984: PPUSH
4985: LD_STRING D2c-JMM-1
4987: PPUSH
4988: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4992: LD_EXP 14
4996: PPUSH
4997: LD_STRING D2c-Khat-1
4999: PPUSH
5000: CALL_OW 88
// end ; InGameOff ;
5004: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5008: LD_INT 22
5010: PUSH
5011: LD_INT 4
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: PPUSH
5023: LD_INT 1
5025: PPUSH
5026: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5030: LD_STRING M1a
5032: PPUSH
5033: CALL_OW 337
// joinEpsilon = 1 ;
5037: LD_ADDR_EXP 29
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// end ;
5045: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
5046: LD_INT 38
5048: PPUSH
5049: LD_INT 1
5051: PPUSH
5052: CALL_OW 289
5056: PUSH
5057: LD_INT 0
5059: EQUAL
5060: PUSH
5061: LD_INT 47
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 289
5071: PUSH
5072: LD_INT 0
5074: EQUAL
5075: AND
5076: PUSH
5077: LD_INT 47
5079: PPUSH
5080: LD_INT 2
5082: PPUSH
5083: CALL_OW 289
5087: PUSH
5088: LD_INT 0
5090: EQUAL
5091: AND
5092: IFFALSE 5117
5094: GO 5096
5096: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5097: LD_INT 38
5099: PUSH
5100: LD_INT 47
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: LD_INT 62
5109: PPUSH
5110: LD_INT 6
5112: PPUSH
5113: CALL_OW 111
5117: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5118: LD_EXP 61
5122: PUSH
5123: LD_INT 1
5125: EQUAL
5126: IFFALSE 6258
5128: GO 5130
5130: DISABLE
5131: LD_INT 0
5133: PPUSH
5134: PPUSH
5135: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5136: LD_ADDR_VAR 0 1
5140: PUSH
5141: LD_INT 22
5143: PUSH
5144: LD_INT 1
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 25
5153: PUSH
5154: LD_INT 4
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 26
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: LIST
5175: PPUSH
5176: CALL_OW 69
5180: PUSH
5181: LD_EXP 1
5185: PUSH
5186: LD_EXP 2
5190: PUSH
5191: LD_EXP 3
5195: PUSH
5196: LD_EXP 4
5200: PUSH
5201: LD_EXP 5
5205: PUSH
5206: LD_EXP 6
5210: PUSH
5211: LD_EXP 7
5215: PUSH
5216: LD_EXP 8
5220: PUSH
5221: LD_EXP 9
5225: PUSH
5226: LD_EXP 10
5230: PUSH
5231: LD_EXP 11
5235: PUSH
5236: LD_EXP 12
5240: PUSH
5241: LD_EXP 13
5245: PUSH
5246: LD_EXP 14
5250: PUSH
5251: LD_EXP 15
5255: PUSH
5256: LD_EXP 16
5260: PUSH
5261: LD_EXP 17
5265: PUSH
5266: LD_EXP 18
5270: PUSH
5271: LD_EXP 19
5275: PUSH
5276: LD_EXP 24
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: DIFF
5303: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: LD_INT 22
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 26
5321: PUSH
5322: LD_INT 1
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: PUSH
5329: LD_INT 2
5331: PUSH
5332: LD_INT 25
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 25
5344: PUSH
5345: LD_INT 2
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 25
5354: PUSH
5355: LD_INT 3
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: PPUSH
5373: CALL_OW 69
5377: PUSH
5378: LD_EXP 1
5382: PUSH
5383: LD_EXP 2
5387: PUSH
5388: LD_EXP 3
5392: PUSH
5393: LD_EXP 4
5397: PUSH
5398: LD_EXP 5
5402: PUSH
5403: LD_EXP 6
5407: PUSH
5408: LD_EXP 7
5412: PUSH
5413: LD_EXP 8
5417: PUSH
5418: LD_EXP 9
5422: PUSH
5423: LD_EXP 10
5427: PUSH
5428: LD_EXP 11
5432: PUSH
5433: LD_EXP 12
5437: PUSH
5438: LD_EXP 13
5442: PUSH
5443: LD_EXP 14
5447: PUSH
5448: LD_EXP 15
5452: PUSH
5453: LD_EXP 16
5457: PUSH
5458: LD_EXP 17
5462: PUSH
5463: LD_EXP 18
5467: PUSH
5468: LD_EXP 19
5472: PUSH
5473: LD_EXP 24
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: DIFF
5500: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5501: LD_EXP 10
5505: PUSH
5506: LD_VAR 0 2
5510: OR
5511: PUSH
5512: LD_EXP 17
5516: PUSH
5517: LD_VAR 0 1
5521: OR
5522: AND
5523: IFFALSE 5742
// begin DialogueOn ;
5525: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5529: LD_EXP 17
5533: PPUSH
5534: CALL_OW 302
5538: IFFALSE 5554
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5540: LD_EXP 17
5544: PPUSH
5545: LD_STRING D3-Sci1-1
5547: PPUSH
5548: CALL_OW 88
5552: GO 5566
// Say ( tmp1 , D3-Sci1-1 ) ;
5554: LD_VAR 0 1
5558: PPUSH
5559: LD_STRING D3-Sci1-1
5561: PPUSH
5562: CALL_OW 88
// if IsOk ( Gary ) then
5566: LD_EXP 10
5570: PPUSH
5571: CALL_OW 302
5575: IFFALSE 5591
// Say ( Gary , D3-Gary-1 ) else
5577: LD_EXP 10
5581: PPUSH
5582: LD_STRING D3-Gary-1
5584: PPUSH
5585: CALL_OW 88
5589: GO 5603
// Say ( tmp2 , D3-Gary-1 ) ;
5591: LD_VAR 0 2
5595: PPUSH
5596: LD_STRING D3-Gary-1
5598: PPUSH
5599: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5603: LD_EXP 17
5607: PPUSH
5608: CALL_OW 302
5612: IFFALSE 5628
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5614: LD_EXP 17
5618: PPUSH
5619: LD_STRING D3-Sci1-2
5621: PPUSH
5622: CALL_OW 88
5626: GO 5640
// Say ( tmp1 , D3-Sci1-2 ) ;
5628: LD_VAR 0 1
5632: PPUSH
5633: LD_STRING D3-Sci1-2
5635: PPUSH
5636: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5640: LD_EXP 1
5644: PPUSH
5645: LD_STRING D3-JMM-2
5647: PPUSH
5648: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5652: LD_EXP 17
5656: PPUSH
5657: CALL_OW 302
5661: IFFALSE 5677
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5663: LD_EXP 17
5667: PPUSH
5668: LD_STRING D3-Sci1-3
5670: PPUSH
5671: CALL_OW 88
5675: GO 5689
// Say ( tmp1 , D3-Sci1-3 ) ;
5677: LD_VAR 0 1
5681: PPUSH
5682: LD_STRING D3-Sci1-3
5684: PPUSH
5685: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5689: LD_EXP 1
5693: PPUSH
5694: LD_STRING D3-JMM-3
5696: PPUSH
5697: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5701: LD_EXP 17
5705: PPUSH
5706: CALL_OW 302
5710: IFFALSE 5726
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5712: LD_EXP 17
5716: PPUSH
5717: LD_STRING D3-Sci1-4
5719: PPUSH
5720: CALL_OW 88
5724: GO 5738
// Say ( tmp1 , D3-Sci1-4 ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_STRING D3-Sci1-4
5733: PPUSH
5734: CALL_OW 88
// DialogueOff ;
5738: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5742: LD_INT 12
5744: PPUSH
5745: LD_INT 1
5747: PPUSH
5748: LD_INT 1
5750: PPUSH
5751: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5755: LD_INT 32
5757: PPUSH
5758: LD_INT 1
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5768: LD_INT 12
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5781: LD_INT 33
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: LD_INT 1
5789: PPUSH
5790: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5794: LD_STRING M2
5796: PPUSH
5797: CALL_OW 337
// wait ( 3 3$0 ) ;
5801: LD_INT 6300
5803: PPUSH
5804: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5808: LD_INT 35
5810: PPUSH
5811: CALL_OW 67
// until not InBattle ( 1 ) ;
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 463
5822: NOT
5823: IFFALSE 5808
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5825: LD_EXP 11
5829: PPUSH
5830: CALL_OW 302
5834: PUSH
5835: LD_EXP 17
5839: PPUSH
5840: CALL_OW 302
5844: AND
5845: IFFALSE 6014
// begin DialogueOn ;
5847: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5851: LD_EXP 11
5855: PPUSH
5856: LD_STRING D3a-Sim-1
5858: PPUSH
5859: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5863: LD_EXP 17
5867: PPUSH
5868: LD_STRING D3a-Sci1-1
5870: PPUSH
5871: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5875: LD_EXP 11
5879: PPUSH
5880: LD_STRING D3a-Sim-2
5882: PPUSH
5883: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5887: LD_EXP 17
5891: PPUSH
5892: LD_STRING D3a-Sci1-2
5894: PPUSH
5895: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5899: LD_EXP 11
5903: PPUSH
5904: LD_STRING D3a-Sim-3
5906: PPUSH
5907: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5911: LD_EXP 17
5915: PPUSH
5916: LD_STRING D3a-Sci1-3
5918: PPUSH
5919: CALL_OW 88
// if IsOK ( Joan ) then
5923: LD_EXP 13
5927: PPUSH
5928: CALL_OW 302
5932: IFFALSE 5948
// Say ( Simms , D3a-Sim-4 ) else
5934: LD_EXP 11
5938: PPUSH
5939: LD_STRING D3a-Sim-4
5941: PPUSH
5942: CALL_OW 88
5946: GO 5960
// Say ( Simms , D3a-Sim-4a ) ;
5948: LD_EXP 11
5952: PPUSH
5953: LD_STRING D3a-Sim-4a
5955: PPUSH
5956: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5960: LD_EXP 17
5964: PPUSH
5965: LD_STRING D3a-Sci1-4
5967: PPUSH
5968: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5972: LD_EXP 11
5976: PPUSH
5977: LD_STRING D3a-Sim-5
5979: PPUSH
5980: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5984: LD_EXP 17
5988: PPUSH
5989: LD_STRING D3a-Sci1-5
5991: PPUSH
5992: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5996: LD_EXP 11
6000: PPUSH
6001: LD_STRING D3a-Sim-6
6003: PPUSH
6004: CALL_OW 88
// DialogueOff ;
6008: CALL_OW 7
// end else
6012: GO 6258
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6014: LD_ADDR_VAR 0 3
6018: PUSH
6019: LD_INT 22
6021: PUSH
6022: LD_INT 1
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 69
6047: PUSH
6048: LD_EXP 11
6052: PUSH
6053: LD_EXP 14
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: DIFF
6062: ST_TO_ADDR
// if tmp3 > 0 then
6063: LD_VAR 0 3
6067: PUSH
6068: LD_INT 0
6070: GREATER
6071: IFFALSE 6258
// begin DialogueOn ;
6073: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6077: LD_EXP 11
6081: PPUSH
6082: LD_STRING D3a-Sim-1
6084: PPUSH
6085: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_STRING D3a-Sci1-1
6100: PPUSH
6101: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6105: LD_EXP 11
6109: PPUSH
6110: LD_STRING D3a-Sim-2
6112: PPUSH
6113: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6117: LD_VAR 0 3
6121: PUSH
6122: LD_INT 1
6124: ARRAY
6125: PPUSH
6126: LD_STRING D3a-Sci1-2
6128: PPUSH
6129: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6133: LD_EXP 11
6137: PPUSH
6138: LD_STRING D3a-Sim-3
6140: PPUSH
6141: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6145: LD_VAR 0 3
6149: PUSH
6150: LD_INT 1
6152: ARRAY
6153: PPUSH
6154: LD_STRING D3a-Sci1-3
6156: PPUSH
6157: CALL_OW 88
// if IsOK ( Joan ) then
6161: LD_EXP 13
6165: PPUSH
6166: CALL_OW 302
6170: IFFALSE 6186
// Say ( Simms , D3a-Sim-4 ) else
6172: LD_EXP 11
6176: PPUSH
6177: LD_STRING D3a-Sim-4
6179: PPUSH
6180: CALL_OW 88
6184: GO 6198
// Say ( Simms , D3a-Sim-4a ) ;
6186: LD_EXP 11
6190: PPUSH
6191: LD_STRING D3a-Sim-4a
6193: PPUSH
6194: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6198: LD_VAR 0 3
6202: PUSH
6203: LD_INT 1
6205: ARRAY
6206: PPUSH
6207: LD_STRING D3a-Sci1-4
6209: PPUSH
6210: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6214: LD_EXP 11
6218: PPUSH
6219: LD_STRING D3a-Sim-5
6221: PPUSH
6222: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6226: LD_VAR 0 3
6230: PUSH
6231: LD_INT 1
6233: ARRAY
6234: PPUSH
6235: LD_STRING D3a-Sci1-5
6237: PPUSH
6238: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6242: LD_EXP 11
6246: PPUSH
6247: LD_STRING D3a-Sim-6
6249: PPUSH
6250: CALL_OW 88
// DialogueOff ;
6254: CALL_OW 7
// end ; end ; end ;
6258: PPOPN 3
6260: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6261: LD_EXP 29
6265: PUSH
6266: LD_INT 1
6268: EQUAL
6269: IFFALSE 6589
6271: GO 6273
6273: DISABLE
6274: LD_INT 0
6276: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6277: LD_EXP 18
6281: PPUSH
6282: LD_STRING D4-FSol1-1
6284: PPUSH
6285: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6289: LD_STRING M3
6291: PPUSH
6292: CALL_OW 337
// PrepareRussians ;
6296: CALL 2733 0 0
// rnd = Rand ( 1 , 100 ) ;
6300: LD_ADDR_VAR 0 1
6304: PUSH
6305: LD_INT 1
6307: PPUSH
6308: LD_INT 100
6310: PPUSH
6311: CALL_OW 12
6315: ST_TO_ADDR
// if difficulty = 1 then
6316: LD_OWVAR 67
6320: PUSH
6321: LD_INT 1
6323: EQUAL
6324: IFFALSE 6407
// begin if rnd > 0 and rnd < 51 then
6326: LD_VAR 0 1
6330: PUSH
6331: LD_INT 0
6333: GREATER
6334: PUSH
6335: LD_VAR 0 1
6339: PUSH
6340: LD_INT 51
6342: LESS
6343: AND
6344: IFFALSE 6353
// BuildRussianBase ( 2 ) ;
6346: LD_INT 2
6348: PPUSH
6349: CALL 10357 0 1
// if rnd > 50 and rnd < 81 then
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 50
6360: GREATER
6361: PUSH
6362: LD_VAR 0 1
6366: PUSH
6367: LD_INT 81
6369: LESS
6370: AND
6371: IFFALSE 6380
// BuildRussianBase ( 1 ) ;
6373: LD_INT 1
6375: PPUSH
6376: CALL 10357 0 1
// if rnd > 80 and rnd < 101 then
6380: LD_VAR 0 1
6384: PUSH
6385: LD_INT 80
6387: GREATER
6388: PUSH
6389: LD_VAR 0 1
6393: PUSH
6394: LD_INT 101
6396: LESS
6397: AND
6398: IFFALSE 6407
// BuildRussianBase ( 3 ) ;
6400: LD_INT 3
6402: PPUSH
6403: CALL 10357 0 1
// end ; if difficulty = 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: EQUAL
6415: IFFALSE 6498
// begin if rnd > 0 and rnd < 61 then
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 0
6424: GREATER
6425: PUSH
6426: LD_VAR 0 1
6430: PUSH
6431: LD_INT 61
6433: LESS
6434: AND
6435: IFFALSE 6444
// BuildRussianBase ( 2 ) ;
6437: LD_INT 2
6439: PPUSH
6440: CALL 10357 0 1
// if rnd > 60 and rnd < 81 then
6444: LD_VAR 0 1
6448: PUSH
6449: LD_INT 60
6451: GREATER
6452: PUSH
6453: LD_VAR 0 1
6457: PUSH
6458: LD_INT 81
6460: LESS
6461: AND
6462: IFFALSE 6471
// BuildRussianBase ( 1 ) ;
6464: LD_INT 1
6466: PPUSH
6467: CALL 10357 0 1
// if rnd > 80 and rnd < 101 then
6471: LD_VAR 0 1
6475: PUSH
6476: LD_INT 80
6478: GREATER
6479: PUSH
6480: LD_VAR 0 1
6484: PUSH
6485: LD_INT 101
6487: LESS
6488: AND
6489: IFFALSE 6498
// BuildRussianBase ( 3 ) ;
6491: LD_INT 3
6493: PPUSH
6494: CALL 10357 0 1
// end ; if difficulty = 3 then
6498: LD_OWVAR 67
6502: PUSH
6503: LD_INT 3
6505: EQUAL
6506: IFFALSE 6589
// begin if rnd > 0 and rnd < 71 then
6508: LD_VAR 0 1
6512: PUSH
6513: LD_INT 0
6515: GREATER
6516: PUSH
6517: LD_VAR 0 1
6521: PUSH
6522: LD_INT 71
6524: LESS
6525: AND
6526: IFFALSE 6535
// BuildRussianBase ( 3 ) ;
6528: LD_INT 3
6530: PPUSH
6531: CALL 10357 0 1
// if rnd > 70 and rnd < 81 then
6535: LD_VAR 0 1
6539: PUSH
6540: LD_INT 70
6542: GREATER
6543: PUSH
6544: LD_VAR 0 1
6548: PUSH
6549: LD_INT 81
6551: LESS
6552: AND
6553: IFFALSE 6562
// BuildRussianBase ( 2 ) ;
6555: LD_INT 2
6557: PPUSH
6558: CALL 10357 0 1
// if rnd > 80 and rnd < 101 then
6562: LD_VAR 0 1
6566: PUSH
6567: LD_INT 80
6569: GREATER
6570: PUSH
6571: LD_VAR 0 1
6575: PUSH
6576: LD_INT 101
6578: LESS
6579: AND
6580: IFFALSE 6589
// BuildRussianBase ( 1 ) ;
6582: LD_INT 1
6584: PPUSH
6585: CALL 10357 0 1
// end ; end ;
6589: PPOPN 1
6591: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6592: LD_INT 54
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: CALL_OW 321
6602: PUSH
6603: LD_INT 2
6605: EQUAL
6606: PUSH
6607: LD_INT 21
6609: PPUSH
6610: LD_INT 1
6612: PPUSH
6613: CALL_OW 321
6617: PUSH
6618: LD_INT 2
6620: EQUAL
6621: OR
6622: PUSH
6623: LD_INT 22
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 321
6633: PUSH
6634: LD_INT 2
6636: EQUAL
6637: OR
6638: IFFALSE 6950
6640: GO 6642
6642: DISABLE
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6647: LD_EXP 17
6651: PPUSH
6652: CALL_OW 302
6656: IFFALSE 6670
// tmp := DeltaDoctor else
6658: LD_ADDR_VAR 0 2
6662: PUSH
6663: LD_EXP 17
6667: ST_TO_ADDR
6668: GO 6680
// tmp := Denis ;
6670: LD_ADDR_VAR 0 2
6674: PUSH
6675: LD_EXP 12
6679: ST_TO_ADDR
// if tmp then
6680: LD_VAR 0 2
6684: IFFALSE 6778
// begin DialogueOn ;
6686: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6690: LD_EXP 1
6694: PPUSH
6695: LD_STRING D6-JMM-1
6697: PPUSH
6698: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6702: LD_VAR 0 2
6706: PPUSH
6707: LD_STRING D6-Sci1-1
6709: PPUSH
6710: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6714: LD_EXP 1
6718: PPUSH
6719: LD_STRING D6-JMM-2
6721: PPUSH
6722: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6726: LD_VAR 0 2
6730: PPUSH
6731: LD_STRING D6-Sci1-2
6733: PPUSH
6734: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6738: LD_EXP 1
6742: PPUSH
6743: LD_STRING D6-JMM-3
6745: PPUSH
6746: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6750: LD_VAR 0 2
6754: PPUSH
6755: LD_STRING D6-Sci1-3
6757: PPUSH
6758: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6762: LD_EXP 1
6766: PPUSH
6767: LD_STRING D6-JMM-4
6769: PPUSH
6770: CALL_OW 88
// DialogueOff ;
6774: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6778: LD_INT 1050
6780: PPUSH
6781: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6785: LD_EXP 49
6789: PUSH
6790: LD_INT 0
6792: EQUAL
6793: PUSH
6794: LD_EXP 14
6798: PPUSH
6799: CALL_OW 302
6803: AND
6804: IFFALSE 6862
// begin DialogueOn ;
6806: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6810: LD_EXP 27
6814: PPUSH
6815: LD_STRING D5-Ar1-1
6817: PPUSH
6818: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6822: LD_EXP 26
6826: PPUSH
6827: LD_STRING D5-Diet-1
6829: PPUSH
6830: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6834: LD_EXP 27
6838: PPUSH
6839: LD_STRING D5-Ar1-2
6841: PPUSH
6842: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6846: LD_EXP 26
6850: PPUSH
6851: LD_STRING D5-Diet-2
6853: PPUSH
6854: CALL_OW 88
// DialogueOff ;
6858: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6862: LD_INT 2100
6864: PUSH
6865: LD_INT 3150
6867: PUSH
6868: LD_INT 4200
6870: PUSH
6871: LD_INT 5250
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_INT 4
6885: PPUSH
6886: CALL_OW 12
6890: ARRAY
6891: PPUSH
6892: CALL_OW 67
// if arabianTrait = 0 then
6896: LD_EXP 49
6900: PUSH
6901: LD_INT 0
6903: EQUAL
6904: IFFALSE 6950
// begin arabianTrait = 1 ;
6906: LD_ADDR_EXP 49
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6914: LD_INT 2
6916: PPUSH
6917: LD_INT 3
6919: PPUSH
6920: LD_INT 1
6922: PPUSH
6923: LD_INT 1
6925: PPUSH
6926: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6930: LD_INT 2
6932: PPUSH
6933: LD_INT 6
6935: PPUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 1
6941: PPUSH
6942: CALL_OW 80
// PrepareArabianTrait ;
6946: CALL 6953 0 0
// end ; end ;
6950: PPOPN 2
6952: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6953: LD_INT 0
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6959: LD_ADDR_VAR 0 2
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 2
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 4
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 69
6992: PUSH
6993: FOR_IN
6994: IFFALSE 7007
// ComExitBuilding ( i ) ;
6996: LD_VAR 0 2
7000: PPUSH
7001: CALL_OW 122
7005: GO 6993
7007: POP
7008: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 2
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 25
7026: PUSH
7027: LD_INT 3
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PPUSH
7038: CALL_OW 69
7042: PUSH
7043: FOR_IN
7044: IFFALSE 7057
// ComExitVehicle ( i ) ;
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 121
7055: GO 7043
7057: POP
7058: POP
// SetClass ( Dietrich , 8 ) ;
7059: LD_EXP 26
7063: PPUSH
7064: LD_INT 8
7066: PPUSH
7067: CALL_OW 336
// wait ( 0 0$3 ) ;
7071: LD_INT 105
7073: PPUSH
7074: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7078: LD_INT 76
7080: PPUSH
7081: LD_INT 19
7083: PPUSH
7084: CALL_OW 84
// DialogueOn ;
7088: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7092: LD_INT 22
7094: PUSH
7095: LD_INT 1
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 2
7114: PUSH
7115: LD_INT 25
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 25
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 25
7137: PUSH
7138: LD_INT 3
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 25
7147: PUSH
7148: LD_INT 4
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: LD_INT 25
7157: PUSH
7158: LD_INT 5
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: PPUSH
7178: CALL_OW 69
7182: PPUSH
7183: LD_STRING D8-Sol1-1
7185: PPUSH
7186: LD_STRING D8-Sol1-1
7188: PPUSH
7189: CALL 9688 0 3
// if IsOK ( DeltaDoctor ) then
7193: LD_EXP 17
7197: PPUSH
7198: CALL_OW 302
7202: IFFALSE 7218
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7204: LD_EXP 17
7208: PPUSH
7209: LD_STRING D8-Sci1-1
7211: PPUSH
7212: CALL_OW 88
7216: GO 7319
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7218: LD_INT 22
7220: PUSH
7221: LD_INT 1
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_INT 26
7230: PUSH
7231: LD_INT 1
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 2
7240: PUSH
7241: LD_INT 25
7243: PUSH
7244: LD_INT 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 25
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 25
7263: PUSH
7264: LD_INT 3
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 25
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 25
7283: PUSH
7284: LD_INT 5
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: PPUSH
7309: LD_STRING D8-Sol1-1
7311: PPUSH
7312: LD_STRING D8-Sol1-1
7314: PPUSH
7315: CALL 9688 0 3
// Say ( JMM , D8-JMM-1 ) ;
7319: LD_EXP 1
7323: PPUSH
7324: LD_STRING D8-JMM-1
7326: PPUSH
7327: CALL_OW 88
// DialogueOff ;
7331: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7335: LD_INT 2
7337: PPUSH
7338: LD_INT 2
7340: PPUSH
7341: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7345: LD_INT 1
7347: PPUSH
7348: LD_INT 2
7350: PPUSH
7351: LD_INT 2
7353: PPUSH
7354: LD_INT 1
7356: PPUSH
7357: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7361: LD_INT 3
7363: PPUSH
7364: LD_INT 2
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: LD_INT 1
7372: PPUSH
7373: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
7377: LD_STRING M4
7379: PPUSH
7380: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7384: LD_ADDR_VAR 0 2
7388: PUSH
7389: LD_INT 22
7391: PUSH
7392: LD_INT 2
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 21
7401: PUSH
7402: LD_INT 1
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 2
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 25
7424: PUSH
7425: LD_INT 8
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 25
7434: PUSH
7435: LD_INT 15
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: PPUSH
7453: CALL_OW 69
7457: PUSH
7458: FOR_IN
7459: IFFALSE 7599
// begin ComExitBuilding ( i ) ;
7461: LD_VAR 0 2
7465: PPUSH
7466: CALL_OW 122
// wait ( 0 0$1 ) ;
7470: LD_INT 35
7472: PPUSH
7473: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7477: LD_VAR 0 2
7481: PPUSH
7482: LD_INT 77
7484: PPUSH
7485: LD_INT 10
7487: PPUSH
7488: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7492: LD_VAR 0 2
7496: PPUSH
7497: LD_INT 82
7499: PPUSH
7500: LD_INT 5
7502: PPUSH
7503: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7507: LD_VAR 0 2
7511: PPUSH
7512: LD_INT 95
7514: PPUSH
7515: LD_INT 12
7517: PPUSH
7518: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7522: LD_VAR 0 2
7526: PPUSH
7527: LD_INT 102
7529: PPUSH
7530: LD_INT 11
7532: PPUSH
7533: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7537: LD_VAR 0 2
7541: PPUSH
7542: LD_INT 116
7544: PPUSH
7545: LD_INT 15
7547: PPUSH
7548: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7552: LD_VAR 0 2
7556: PPUSH
7557: LD_INT 140
7559: PPUSH
7560: LD_INT 25
7562: PPUSH
7563: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7567: LD_VAR 0 2
7571: PPUSH
7572: LD_INT 160
7574: PPUSH
7575: LD_INT 56
7577: PPUSH
7578: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7582: LD_VAR 0 2
7586: PPUSH
7587: LD_INT 189
7589: PPUSH
7590: LD_INT 79
7592: PPUSH
7593: CALL_OW 174
// end ;
7597: GO 7458
7599: POP
7600: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: LD_INT 22
7608: PUSH
7609: LD_INT 2
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 21
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: LD_INT 25
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 25
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 25
7651: PUSH
7652: LD_INT 4
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 25
7661: PUSH
7662: LD_INT 16
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 69
7685: PUSH
7686: FOR_IN
7687: IFFALSE 7827
// begin ComExitBuilding ( i ) ;
7689: LD_VAR 0 2
7693: PPUSH
7694: CALL_OW 122
// wait ( 0 0$1 ) ;
7698: LD_INT 35
7700: PPUSH
7701: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7705: LD_VAR 0 2
7709: PPUSH
7710: LD_INT 77
7712: PPUSH
7713: LD_INT 10
7715: PPUSH
7716: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7720: LD_VAR 0 2
7724: PPUSH
7725: LD_INT 82
7727: PPUSH
7728: LD_INT 5
7730: PPUSH
7731: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7735: LD_VAR 0 2
7739: PPUSH
7740: LD_INT 95
7742: PPUSH
7743: LD_INT 12
7745: PPUSH
7746: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7750: LD_VAR 0 2
7754: PPUSH
7755: LD_INT 102
7757: PPUSH
7758: LD_INT 11
7760: PPUSH
7761: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7765: LD_VAR 0 2
7769: PPUSH
7770: LD_INT 116
7772: PPUSH
7773: LD_INT 15
7775: PPUSH
7776: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7780: LD_VAR 0 2
7784: PPUSH
7785: LD_INT 140
7787: PPUSH
7788: LD_INT 25
7790: PPUSH
7791: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7795: LD_VAR 0 2
7799: PPUSH
7800: LD_INT 160
7802: PPUSH
7803: LD_INT 56
7805: PPUSH
7806: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7810: LD_VAR 0 2
7814: PPUSH
7815: LD_INT 189
7817: PPUSH
7818: LD_INT 79
7820: PPUSH
7821: CALL_OW 171
// end ;
7825: GO 7686
7827: POP
7828: POP
// arabianAttackersAI = 1 ;
7829: LD_ADDR_EXP 46
7833: PUSH
7834: LD_INT 1
7836: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7837: LD_INT 350
7839: PPUSH
7840: CALL_OW 67
// if IsOk ( Gary ) then
7844: LD_EXP 10
7848: PPUSH
7849: CALL_OW 302
7853: IFFALSE 7867
// Say ( Gary , D8a-Gary-1 ) ;
7855: LD_EXP 10
7859: PPUSH
7860: LD_STRING D8a-Gary-1
7862: PPUSH
7863: CALL_OW 88
// wait ( 0 0$5 ) ;
7867: LD_INT 175
7869: PPUSH
7870: CALL_OW 67
// if IsOK ( Khatam ) then
7874: LD_EXP 14
7878: PPUSH
7879: CALL_OW 302
7883: IFFALSE 8419
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 2
7902: PUSH
7903: LD_INT 25
7905: PUSH
7906: LD_INT 1
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 25
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 3
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 4
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 5
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 25
7955: PUSH
7956: LD_INT 8
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PPUSH
7976: CALL_OW 69
7980: PUSH
7981: LD_EXP 1
7985: PUSH
7986: LD_EXP 2
7990: PUSH
7991: LD_EXP 3
7995: PUSH
7996: LD_EXP 4
8000: PUSH
8001: LD_EXP 5
8005: PUSH
8006: LD_EXP 6
8010: PUSH
8011: LD_EXP 7
8015: PUSH
8016: LD_EXP 8
8020: PUSH
8021: LD_EXP 9
8025: PUSH
8026: LD_EXP 10
8030: PUSH
8031: LD_EXP 11
8035: PUSH
8036: LD_EXP 12
8040: PUSH
8041: LD_EXP 13
8045: PUSH
8046: LD_EXP 14
8050: PUSH
8051: LD_EXP 15
8055: PUSH
8056: LD_EXP 16
8060: PUSH
8061: LD_EXP 17
8065: PUSH
8066: LD_EXP 19
8070: PUSH
8071: LD_EXP 24
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: DIFF
8097: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8098: LD_EXP 14
8102: PPUSH
8103: LD_INT 8
8105: PPUSH
8106: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8110: LD_EXP 14
8114: PPUSH
8115: CALL_OW 122
// wait ( 0 0$1 ) ;
8119: LD_INT 35
8121: PPUSH
8122: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8126: LD_EXP 14
8130: PPUSH
8131: CALL_OW 121
// wait ( 0 0$1 ) ;
8135: LD_INT 35
8137: PPUSH
8138: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8142: LD_EXP 14
8146: PPUSH
8147: LD_INT 7
8149: PPUSH
8150: CALL_OW 113
// if not tmp then
8154: LD_VAR 0 3
8158: NOT
8159: IFFALSE 8163
// exit ;
8161: GO 8419
// DialogueOn ;
8163: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 1
8174: ARRAY
8175: PPUSH
8176: CALL_OW 258
8180: PUSH
8181: LD_INT 1
8183: EQUAL
8184: IFFALSE 8204
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8186: LD_VAR 0 3
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: LD_STRING D8b-Sol1-1
8197: PPUSH
8198: CALL_OW 88
8202: GO 8220
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8204: LD_VAR 0 3
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: PPUSH
8213: LD_STRING D8b-FSol1-1
8215: PPUSH
8216: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8220: LD_EXP 14
8224: PPUSH
8225: LD_STRING D8b-Khat-1
8227: PPUSH
8228: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8232: LD_VAR 0 3
8236: PUSH
8237: LD_INT 1
8239: ARRAY
8240: PPUSH
8241: CALL_OW 258
8245: PUSH
8246: LD_INT 1
8248: EQUAL
8249: IFFALSE 8269
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8251: LD_VAR 0 3
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: LD_STRING D8b-Sol1-2
8262: PPUSH
8263: CALL_OW 88
8267: GO 8285
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 1
8276: ARRAY
8277: PPUSH
8278: LD_STRING D8b-FSol1-2
8280: PPUSH
8281: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8285: LD_EXP 14
8289: PPUSH
8290: LD_STRING D8b-Khat-2
8292: PPUSH
8293: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8297: LD_VAR 0 3
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: CALL_OW 258
8310: PUSH
8311: LD_INT 1
8313: EQUAL
8314: IFFALSE 8334
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8316: LD_VAR 0 3
8320: PUSH
8321: LD_INT 1
8323: ARRAY
8324: PPUSH
8325: LD_STRING D8b-Sol1-3
8327: PPUSH
8328: CALL_OW 88
8332: GO 8350
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8334: LD_VAR 0 3
8338: PUSH
8339: LD_INT 1
8341: ARRAY
8342: PPUSH
8343: LD_STRING D8b-FSol1-3
8345: PPUSH
8346: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8350: LD_EXP 14
8354: PPUSH
8355: LD_STRING D8b-Khat-3
8357: PPUSH
8358: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8362: LD_VAR 0 3
8366: PUSH
8367: LD_INT 1
8369: ARRAY
8370: PPUSH
8371: CALL_OW 258
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8399
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8381: LD_VAR 0 3
8385: PUSH
8386: LD_INT 1
8388: ARRAY
8389: PPUSH
8390: LD_STRING D8b-Sol1-4
8392: PPUSH
8393: CALL_OW 88
8397: GO 8415
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8399: LD_VAR 0 3
8403: PUSH
8404: LD_INT 1
8406: ARRAY
8407: PPUSH
8408: LD_STRING D8b-FSol1-4
8410: PPUSH
8411: CALL_OW 88
// DialogueOff ;
8415: CALL_OW 7
// end ; end ;
8419: LD_VAR 0 1
8423: RET
// every 0 0$1 do var i ;
8424: GO 8426
8426: DISABLE
8427: LD_INT 0
8429: PPUSH
// begin enable ;
8430: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8431: LD_ADDR_VAR 0 1
8435: PUSH
8436: LD_INT 7
8438: PPUSH
8439: LD_INT 22
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PPUSH
8449: CALL_OW 70
8453: PUSH
8454: FOR_IN
8455: IFFALSE 8521
// begin if GetClass ( i ) = 4 then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 257
8466: PUSH
8467: LD_INT 4
8469: EQUAL
8470: IFFALSE 8482
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8472: LD_INT 1
8474: PPUSH
8475: LD_STRING 10_ScientistsEscape_1
8477: PPUSH
8478: CALL_OW 39
// if i = Dietrich then
8482: LD_VAR 0 1
8486: PUSH
8487: LD_EXP 26
8491: EQUAL
8492: IFFALSE 8502
// GensherStatus = 1 ;
8494: LD_ADDR_EXP 51
8498: PUSH
8499: LD_INT 1
8501: ST_TO_ADDR
// arabianEscape = 1 ;
8502: LD_ADDR_EXP 47
8506: PUSH
8507: LD_INT 1
8509: ST_TO_ADDR
// RemoveUnit ( i ) ;
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 64
// end ;
8519: GO 8454
8521: POP
8522: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8523: LD_EXP 14
8527: PPUSH
8528: LD_INT 7
8530: PPUSH
8531: CALL_OW 308
8535: IFFALSE 8554
// begin KhatamStatus = 1 ;
8537: LD_ADDR_EXP 52
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8545: LD_EXP 14
8549: PPUSH
8550: CALL_OW 64
// end ; end ;
8554: PPOPN 1
8556: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8557: LD_EXP 14
8561: PPUSH
8562: CALL_OW 301
8566: IFFALSE 8579
8568: GO 8570
8570: DISABLE
// KhatamStatus = 0 ;
8571: LD_ADDR_EXP 52
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
8579: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8580: LD_INT 22
8582: PUSH
8583: LD_INT 2
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 21
8592: PUSH
8593: LD_INT 1
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PPUSH
8604: CALL_OW 69
8608: PUSH
8609: LD_INT 0
8611: EQUAL
8612: PUSH
8613: LD_INT 22
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 21
8625: PUSH
8626: LD_INT 1
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 69
8641: PUSH
8642: LD_INT 0
8644: EQUAL
8645: AND
8646: IFFALSE 8659
8648: GO 8650
8650: DISABLE
// arabianDefeated = 1 ;
8651: LD_ADDR_EXP 48
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
8659: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8660: LD_INT 54
8662: PPUSH
8663: LD_INT 1
8665: PPUSH
8666: CALL_OW 321
8670: PUSH
8671: LD_INT 2
8673: EQUAL
8674: PUSH
8675: LD_INT 55
8677: PPUSH
8678: LD_INT 1
8680: PPUSH
8681: CALL_OW 321
8685: PUSH
8686: LD_INT 2
8688: EQUAL
8689: AND
8690: PUSH
8691: LD_INT 21
8693: PPUSH
8694: LD_INT 1
8696: PPUSH
8697: CALL_OW 321
8701: PUSH
8702: LD_INT 2
8704: EQUAL
8705: AND
8706: PUSH
8707: LD_INT 22
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: CALL_OW 321
8717: PUSH
8718: LD_INT 2
8720: EQUAL
8721: AND
8722: PUSH
8723: LD_INT 12
8725: PPUSH
8726: LD_INT 1
8728: PPUSH
8729: CALL_OW 321
8733: PUSH
8734: LD_INT 2
8736: EQUAL
8737: AND
8738: PUSH
8739: LD_INT 32
8741: PPUSH
8742: LD_INT 1
8744: PPUSH
8745: CALL_OW 321
8749: PUSH
8750: LD_INT 2
8752: EQUAL
8753: AND
8754: PUSH
8755: LD_EXP 59
8759: PUSH
8760: LD_INT 0
8762: EQUAL
8763: AND
8764: PUSH
8765: LD_EXP 49
8769: PUSH
8770: LD_INT 0
8772: EQUAL
8773: AND
8774: PUSH
8775: LD_OWVAR 1
8779: PUSH
8780: LD_INT 31500
8782: GREATEREQUAL
8783: AND
8784: IFFALSE 8801
8786: GO 8788
8788: DISABLE
// begin arabianTrait = 1 ;
8789: LD_ADDR_EXP 49
8793: PUSH
8794: LD_INT 1
8796: ST_TO_ADDR
// PrepareArabianTrait ;
8797: CALL 6953 0 0
// end ;
8801: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8802: LD_EXP 29
8806: PUSH
8807: LD_STRING 02_mikhailStatus_1
8809: PPUSH
8810: LD_INT 0
8812: PPUSH
8813: CALL_OW 30
8817: PUSH
8818: LD_INT 1
8820: EQUAL
8821: AND
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PPUSH
8833: CALL_OW 69
8837: PUSH
8838: LD_INT 0
8840: EQUAL
8841: AND
8842: PUSH
8843: LD_INT 22
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 69
8857: PUSH
8858: LD_INT 0
8860: EQUAL
8861: PUSH
8862: LD_EXP 49
8866: PUSH
8867: LD_INT 0
8869: EQUAL
8870: OR
8871: AND
8872: IFFALSE 8881
8874: GO 8876
8876: DISABLE
// PrepareCornell ;
8877: CALL 2575 0 0
8881: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8882: LD_INT 22
8884: PUSH
8885: LD_INT 1
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: PPUSH
8897: LD_EXP 19
8901: PPUSH
8902: CALL_OW 74
8906: PPUSH
8907: LD_EXP 19
8911: PPUSH
8912: CALL_OW 296
8916: PUSH
8917: LD_INT 9
8919: LESS
8920: IFFALSE 9141
8922: GO 8924
8924: DISABLE
// begin InGameOn ;
8925: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8929: LD_EXP 19
8933: PPUSH
8934: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8938: LD_EXP 19
8942: PPUSH
8943: LD_STRING D7-Corn-1
8945: PPUSH
8946: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8950: LD_INT 22
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 2
8962: PUSH
8963: LD_INT 25
8965: PUSH
8966: LD_INT 1
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: LD_INT 25
8975: PUSH
8976: LD_INT 2
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 25
8985: PUSH
8986: LD_INT 3
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 25
8995: PUSH
8996: LD_INT 4
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 25
9005: PUSH
9006: LD_INT 5
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 69
9029: PPUSH
9030: LD_STRING D7-Sol1-1
9032: PPUSH
9033: LD_STRING D7-FSol1-1
9035: PPUSH
9036: CALL 9688 0 3
// CenterNowOnUnits ( Cornell ) ;
9040: LD_EXP 19
9044: PPUSH
9045: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9049: LD_EXP 19
9053: PPUSH
9054: LD_STRING D7-Corn-2
9056: PPUSH
9057: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9061: LD_EXP 1
9065: PPUSH
9066: LD_STRING D7-JMM-2
9068: PPUSH
9069: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9073: LD_EXP 19
9077: PPUSH
9078: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9082: LD_EXP 19
9086: PPUSH
9087: LD_STRING D7-Corn-3
9089: PPUSH
9090: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9094: LD_EXP 19
9098: PPUSH
9099: LD_INT 250
9101: PPUSH
9102: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9106: LD_EXP 19
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 235
// wait ( 0 0$1 ) ;
9118: LD_INT 35
9120: PPUSH
9121: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9125: LD_EXP 1
9129: PPUSH
9130: LD_STRING D7-JMM-3
9132: PPUSH
9133: CALL_OW 88
// InGameOff ;
9137: CALL_OW 9
// end ;
9141: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9142: LD_EXP 19
9146: PPUSH
9147: CALL_OW 255
9151: PUSH
9152: LD_INT 1
9154: EQUAL
9155: PUSH
9156: LD_EXP 19
9160: PPUSH
9161: CALL_OW 256
9165: PUSH
9166: LD_INT 251
9168: GREATER
9169: AND
9170: IFFALSE 9363
9172: GO 9174
9174: DISABLE
// begin DialogueOn ;
9175: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9179: LD_EXP 1
9183: PPUSH
9184: LD_STRING D7a-JMM-1
9186: PPUSH
9187: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9191: LD_EXP 19
9195: PPUSH
9196: LD_STRING D7a-Corn-1
9198: PPUSH
9199: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9203: LD_EXP 1
9207: PPUSH
9208: LD_STRING D7a-JMM-2
9210: PPUSH
9211: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9215: LD_EXP 19
9219: PPUSH
9220: LD_STRING D7a-Corn-2
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9227: LD_EXP 1
9231: PPUSH
9232: LD_STRING D7a-JMM-3
9234: PPUSH
9235: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9239: LD_EXP 19
9243: PPUSH
9244: LD_STRING D7a-Corn-3
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9251: LD_EXP 1
9255: PPUSH
9256: LD_STRING D7a-JMM-4
9258: PPUSH
9259: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9263: LD_EXP 19
9267: PPUSH
9268: LD_STRING D7a-Corn-4
9270: PPUSH
9271: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9275: LD_EXP 1
9279: PPUSH
9280: LD_STRING D7a-JMM-5
9282: PPUSH
9283: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9287: LD_EXP 19
9291: PPUSH
9292: LD_STRING D7a-Corn-5
9294: PPUSH
9295: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9299: LD_EXP 1
9303: PPUSH
9304: LD_STRING D7a-JMM-6
9306: PPUSH
9307: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9311: LD_EXP 19
9315: PPUSH
9316: LD_STRING D7a-Corn-6
9318: PPUSH
9319: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9323: LD_EXP 1
9327: PPUSH
9328: LD_STRING D7a-JMM-7
9330: PPUSH
9331: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9335: LD_EXP 19
9339: PPUSH
9340: LD_STRING D7a-Corn-7
9342: PPUSH
9343: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9347: LD_EXP 1
9351: PPUSH
9352: LD_STRING D7a-JMM-8
9354: PPUSH
9355: CALL_OW 88
// DialogueOff ;
9359: CALL_OW 7
// end ;
9363: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9364: LD_EXP 58
9368: PUSH
9369: LD_EXP 1
9373: PPUSH
9374: CALL_OW 302
9378: PUSH
9379: LD_EXP 5
9383: PPUSH
9384: CALL_OW 302
9388: OR
9389: AND
9390: IFFALSE 9480
9392: GO 9394
9394: DISABLE
// begin Wait ( 0 0$2 ) ;
9395: LD_INT 70
9397: PPUSH
9398: CALL_OW 67
// DialogueOn ;
9402: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9406: LD_EXP 58
9410: PUSH
9411: LD_INT 1
9413: ARRAY
9414: PPUSH
9415: LD_EXP 58
9419: PUSH
9420: LD_INT 2
9422: ARRAY
9423: PPUSH
9424: CALL_OW 86
// if IsOk ( Cyrus ) then
9428: LD_EXP 5
9432: PPUSH
9433: CALL_OW 302
9437: IFFALSE 9453
// Say ( Cyrus , D10-Cyrus-1 ) else
9439: LD_EXP 5
9443: PPUSH
9444: LD_STRING D10-Cyrus-1
9446: PPUSH
9447: CALL_OW 88
9451: GO 9476
// if IsOk ( JMM ) then
9453: LD_EXP 1
9457: PPUSH
9458: CALL_OW 302
9462: IFFALSE 9476
// Say ( JMM , D10-JMM-1 ) ;
9464: LD_EXP 1
9468: PPUSH
9469: LD_STRING D10-JMM-1
9471: PPUSH
9472: CALL_OW 88
// DialogueOff ;
9476: CALL_OW 7
// end ;
9480: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9481: LD_INT 12
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: CALL_OW 321
9491: PUSH
9492: LD_INT 2
9494: EQUAL
9495: IFFALSE 9507
9497: GO 9499
9499: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9500: LD_STRING M2b
9502: PPUSH
9503: CALL_OW 337
9507: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9508: LD_INT 32
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 321
9518: PUSH
9519: LD_INT 2
9521: EQUAL
9522: IFFALSE 9534
9524: GO 9526
9526: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9527: LD_STRING M2c
9529: PPUSH
9530: CALL_OW 337
9534: END
// every 0 0$1 trigger arabianDefeated = 1 do
9535: LD_EXP 48
9539: PUSH
9540: LD_INT 1
9542: EQUAL
9543: IFFALSE 9555
9545: GO 9547
9547: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9548: LD_STRING M4a
9550: PPUSH
9551: CALL_OW 337
9555: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9556: LD_INT 54
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 321
9566: PUSH
9567: LD_INT 2
9569: EQUAL
9570: PUSH
9571: LD_INT 55
9573: PPUSH
9574: LD_INT 1
9576: PPUSH
9577: CALL_OW 321
9581: PUSH
9582: LD_INT 2
9584: EQUAL
9585: AND
9586: PUSH
9587: LD_INT 21
9589: PPUSH
9590: LD_INT 1
9592: PPUSH
9593: CALL_OW 321
9597: PUSH
9598: LD_INT 2
9600: EQUAL
9601: AND
9602: PUSH
9603: LD_INT 22
9605: PPUSH
9606: LD_INT 1
9608: PPUSH
9609: CALL_OW 321
9613: PUSH
9614: LD_INT 2
9616: EQUAL
9617: AND
9618: IFFALSE 9630
9620: GO 9622
9622: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9623: LD_STRING M2a
9625: PPUSH
9626: CALL_OW 337
9630: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9631: LD_INT 0
9633: PPUSH
9634: PPUSH
// if exist_mode then
9635: LD_VAR 0 2
9639: IFFALSE 9658
// unit := CreateCharacter ( ident ) else
9641: LD_ADDR_VAR 0 4
9645: PUSH
9646: LD_VAR 0 1
9650: PPUSH
9651: CALL_OW 34
9655: ST_TO_ADDR
9656: GO 9673
// unit := NewCharacter ( ident ) ;
9658: LD_ADDR_VAR 0 4
9662: PUSH
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 25
9672: ST_TO_ADDR
// result := unit ;
9673: LD_ADDR_VAR 0 3
9677: PUSH
9678: LD_VAR 0 4
9682: ST_TO_ADDR
// end ;
9683: LD_VAR 0 3
9687: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9688: LD_INT 0
9690: PPUSH
9691: PPUSH
9692: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9693: LD_ADDR_VAR 0 1
9697: PUSH
9698: LD_VAR 0 1
9702: PUSH
9703: LD_EXP 1
9707: PUSH
9708: LD_EXP 2
9712: PUSH
9713: LD_EXP 3
9717: PUSH
9718: LD_EXP 4
9722: PUSH
9723: LD_EXP 5
9727: PUSH
9728: LD_EXP 6
9732: PUSH
9733: LD_EXP 7
9737: PUSH
9738: LD_EXP 8
9742: PUSH
9743: LD_EXP 9
9747: PUSH
9748: LD_EXP 10
9752: PUSH
9753: LD_EXP 11
9757: PUSH
9758: LD_EXP 12
9762: PUSH
9763: LD_EXP 13
9767: PUSH
9768: LD_EXP 14
9772: PUSH
9773: LD_EXP 15
9777: PUSH
9778: LD_EXP 16
9782: PUSH
9783: LD_EXP 17
9787: PUSH
9788: LD_EXP 18
9792: PUSH
9793: LD_EXP 19
9797: PUSH
9798: LD_EXP 24
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: DIFF
9825: ST_TO_ADDR
// if not characters then
9826: LD_VAR 0 1
9830: NOT
9831: IFFALSE 9835
// exit ;
9833: GO 9981
// rnd = rand ( 1 , characters ) ;
9835: LD_ADDR_VAR 0 6
9839: PUSH
9840: LD_INT 1
9842: PPUSH
9843: LD_VAR 0 1
9847: PPUSH
9848: CALL_OW 12
9852: ST_TO_ADDR
// for i = 1 to characters do
9853: LD_ADDR_VAR 0 5
9857: PUSH
9858: DOUBLE
9859: LD_INT 1
9861: DEC
9862: ST_TO_ADDR
9863: LD_VAR 0 1
9867: PUSH
9868: FOR_TO
9869: IFFALSE 9979
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9871: LD_VAR 0 5
9875: PUSH
9876: LD_VAR 0 6
9880: EQUAL
9881: PUSH
9882: LD_VAR 0 1
9886: PUSH
9887: LD_VAR 0 5
9891: ARRAY
9892: PPUSH
9893: CALL_OW 258
9897: PUSH
9898: LD_INT 1
9900: EQUAL
9901: AND
9902: IFFALSE 9924
// Say ( characters [ i ] , dialogMID ) ;
9904: LD_VAR 0 1
9908: PUSH
9909: LD_VAR 0 5
9913: ARRAY
9914: PPUSH
9915: LD_VAR 0 2
9919: PPUSH
9920: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9924: LD_VAR 0 5
9928: PUSH
9929: LD_VAR 0 6
9933: EQUAL
9934: PUSH
9935: LD_VAR 0 1
9939: PUSH
9940: LD_VAR 0 5
9944: ARRAY
9945: PPUSH
9946: CALL_OW 258
9950: PUSH
9951: LD_INT 2
9953: EQUAL
9954: AND
9955: IFFALSE 9977
// Say ( characters [ i ] , dialogFID ) ;
9957: LD_VAR 0 1
9961: PUSH
9962: LD_VAR 0 5
9966: ARRAY
9967: PPUSH
9968: LD_VAR 0 3
9972: PPUSH
9973: CALL_OW 88
// end ;
9977: GO 9868
9979: POP
9980: POP
// end ;
9981: LD_VAR 0 4
9985: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9986: LD_INT 0
9988: PPUSH
9989: PPUSH
// for i in charactersList do
9990: LD_ADDR_VAR 0 4
9994: PUSH
9995: LD_VAR 0 1
9999: PUSH
10000: FOR_IN
10001: IFFALSE 10030
// begin if IsOk ( i ) then
10003: LD_VAR 0 4
10007: PPUSH
10008: CALL_OW 302
10012: IFFALSE 10028
// SaveCharacters ( i , ident ) ;
10014: LD_VAR 0 4
10018: PPUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: CALL_OW 38
// end ;
10028: GO 10000
10030: POP
10031: POP
// end ;
10032: LD_VAR 0 3
10036: RET
// export function PrepareDifficulty ; begin
10037: LD_INT 0
10039: PPUSH
// if difficulty = 1 then
10040: LD_OWVAR 67
10044: PUSH
10045: LD_INT 1
10047: EQUAL
10048: IFFALSE 10092
// begin RuSolMinLevel = 4 ;
10050: LD_ADDR_EXP 36
10054: PUSH
10055: LD_INT 4
10057: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10058: LD_ADDR_EXP 37
10062: PUSH
10063: LD_INT 7
10065: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10066: LD_INT 51
10068: PPUSH
10069: LD_INT 6
10071: PPUSH
10072: LD_INT 2
10074: PPUSH
10075: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10079: LD_INT 51
10081: PPUSH
10082: LD_INT 5
10084: PPUSH
10085: LD_INT 2
10087: PPUSH
10088: CALL_OW 322
// end ; if difficulty = 2 then
10092: LD_OWVAR 67
10096: PUSH
10097: LD_INT 2
10099: EQUAL
10100: IFFALSE 10196
// begin RuSolMinLevel = 5 ;
10102: LD_ADDR_EXP 36
10106: PUSH
10107: LD_INT 5
10109: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10110: LD_ADDR_EXP 37
10114: PUSH
10115: LD_INT 7
10117: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10118: LD_INT 51
10120: PPUSH
10121: LD_INT 6
10123: PPUSH
10124: LD_INT 2
10126: PPUSH
10127: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10131: LD_INT 57
10133: PPUSH
10134: LD_INT 6
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10144: LD_INT 63
10146: PPUSH
10147: LD_INT 6
10149: PPUSH
10150: LD_INT 2
10152: PPUSH
10153: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10157: LD_INT 51
10159: PPUSH
10160: LD_INT 5
10162: PPUSH
10163: LD_INT 2
10165: PPUSH
10166: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10170: LD_INT 5
10172: PPUSH
10173: LD_INT 2
10175: PPUSH
10176: LD_INT 2
10178: PPUSH
10179: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10183: LD_INT 5
10185: PPUSH
10186: LD_INT 5
10188: PPUSH
10189: LD_INT 2
10191: PPUSH
10192: CALL_OW 322
// end ; if difficulty = 3 then
10196: LD_OWVAR 67
10200: PUSH
10201: LD_INT 3
10203: EQUAL
10204: IFFALSE 10352
// begin RuSolMinLevel = 6 ;
10206: LD_ADDR_EXP 36
10210: PUSH
10211: LD_INT 6
10213: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10214: LD_ADDR_EXP 37
10218: PUSH
10219: LD_INT 8
10221: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10222: LD_INT 51
10224: PPUSH
10225: LD_INT 6
10227: PPUSH
10228: LD_INT 2
10230: PPUSH
10231: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10235: LD_INT 57
10237: PPUSH
10238: LD_INT 6
10240: PPUSH
10241: LD_INT 2
10243: PPUSH
10244: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10248: LD_INT 52
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: LD_INT 2
10256: PPUSH
10257: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10261: LD_INT 58
10263: PPUSH
10264: LD_INT 6
10266: PPUSH
10267: LD_INT 2
10269: PPUSH
10270: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10274: LD_INT 63
10276: PPUSH
10277: LD_INT 6
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10287: LD_INT 64
10289: PPUSH
10290: LD_INT 6
10292: PPUSH
10293: LD_INT 2
10295: PPUSH
10296: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10300: LD_INT 51
10302: PPUSH
10303: LD_INT 5
10305: PPUSH
10306: LD_INT 2
10308: PPUSH
10309: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10313: LD_INT 52
10315: PPUSH
10316: LD_INT 5
10318: PPUSH
10319: LD_INT 2
10321: PPUSH
10322: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10326: LD_INT 66
10328: PPUSH
10329: LD_INT 2
10331: PPUSH
10332: LD_INT 2
10334: PPUSH
10335: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10339: LD_INT 66
10341: PPUSH
10342: LD_INT 5
10344: PPUSH
10345: LD_INT 2
10347: PPUSH
10348: CALL_OW 322
// end ; end ;
10352: LD_VAR 0 1
10356: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10357: LD_INT 0
10359: PPUSH
10360: PPUSH
10361: PPUSH
10362: PPUSH
10363: PPUSH
// case position of 1 :
10364: LD_VAR 0 1
10368: PUSH
10369: LD_INT 1
10371: DOUBLE
10372: EQUAL
10373: IFTRUE 10377
10375: GO 10388
10377: POP
// area := westConv ; 2 :
10378: LD_ADDR_VAR 0 6
10382: PUSH
10383: LD_INT 20
10385: ST_TO_ADDR
10386: GO 10427
10388: LD_INT 2
10390: DOUBLE
10391: EQUAL
10392: IFTRUE 10396
10394: GO 10407
10396: POP
// area := midConv ; 3 :
10397: LD_ADDR_VAR 0 6
10401: PUSH
10402: LD_INT 21
10404: ST_TO_ADDR
10405: GO 10427
10407: LD_INT 3
10409: DOUBLE
10410: EQUAL
10411: IFTRUE 10415
10413: GO 10426
10415: POP
// area := eastConv ; end ;
10416: LD_ADDR_VAR 0 6
10420: PUSH
10421: LD_INT 22
10423: ST_TO_ADDR
10424: GO 10427
10426: POP
// area := AreaToList ( area , 0 ) ;
10427: LD_ADDR_VAR 0 6
10431: PUSH
10432: LD_VAR 0 6
10436: PPUSH
10437: LD_INT 0
10439: PPUSH
10440: CALL_OW 517
10444: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10445: LD_ADDR_VAR 0 3
10449: PUSH
10450: DOUBLE
10451: LD_INT 1
10453: DEC
10454: ST_TO_ADDR
10455: LD_VAR 0 6
10459: PUSH
10460: LD_INT 1
10462: ARRAY
10463: PUSH
10464: FOR_TO
10465: IFFALSE 10546
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10467: LD_VAR 0 6
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PUSH
10476: LD_VAR 0 3
10480: ARRAY
10481: PPUSH
10482: LD_VAR 0 6
10486: PUSH
10487: LD_INT 2
10489: ARRAY
10490: PUSH
10491: LD_VAR 0 3
10495: ARRAY
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10507: LD_VAR 0 6
10511: PUSH
10512: LD_INT 1
10514: ARRAY
10515: PUSH
10516: LD_VAR 0 3
10520: ARRAY
10521: PPUSH
10522: LD_VAR 0 6
10526: PUSH
10527: LD_INT 2
10529: ARRAY
10530: PUSH
10531: LD_VAR 0 3
10535: ARRAY
10536: PPUSH
10537: LD_INT 1
10539: PPUSH
10540: CALL_OW 331
// end ;
10544: GO 10464
10546: POP
10547: POP
// ruPossition = position ;
10548: LD_ADDR_EXP 41
10552: PUSH
10553: LD_VAR 0 1
10557: ST_TO_ADDR
// if position = 1 then
10558: LD_VAR 0 1
10562: PUSH
10563: LD_INT 1
10565: EQUAL
10566: IFFALSE 11314
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10568: LD_ADDR_VAR 0 4
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_INT 3
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: LD_INT 2
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10602: LD_ADDR_VAR 0 5
10606: PUSH
10607: LD_INT 0
10609: PUSH
10610: LD_INT 49
10612: PUSH
10613: LD_INT 74
10615: PUSH
10616: LD_INT 3
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 4
10627: PUSH
10628: LD_INT 73
10630: PUSH
10631: LD_INT 88
10633: PUSH
10634: LD_INT 5
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: LD_INT 56
10648: PUSH
10649: LD_INT 62
10651: PUSH
10652: LD_INT 3
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 29
10663: PUSH
10664: LD_INT 43
10666: PUSH
10667: LD_INT 68
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 30
10681: PUSH
10682: LD_INT 43
10684: PUSH
10685: LD_INT 79
10687: PUSH
10688: LD_INT 5
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 28
10699: PUSH
10700: LD_INT 60
10702: PUSH
10703: LD_INT 75
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: LD_INT 50
10720: PUSH
10721: LD_INT 87
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 28
10735: PUSH
10736: LD_INT 45
10738: PUSH
10739: LD_INT 67
10741: PUSH
10742: LD_INT 2
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 17
10753: PUSH
10754: LD_INT 47
10756: PUSH
10757: LD_INT 84
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 18
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: LD_INT 87
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 28
10789: PUSH
10790: LD_INT 41
10792: PUSH
10793: LD_INT 64
10795: PUSH
10796: LD_INT 5
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 32
10807: PUSH
10808: LD_INT 75
10810: PUSH
10811: LD_INT 76
10813: PUSH
10814: LD_INT 5
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 32
10825: PUSH
10826: LD_INT 77
10828: PUSH
10829: LD_INT 75
10831: PUSH
10832: LD_INT 5
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 32
10843: PUSH
10844: LD_INT 69
10846: PUSH
10847: LD_INT 68
10849: PUSH
10850: LD_INT 3
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 32
10861: PUSH
10862: LD_INT 59
10864: PUSH
10865: LD_INT 96
10867: PUSH
10868: LD_INT 5
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 32
10879: PUSH
10880: LD_INT 56
10882: PUSH
10883: LD_INT 96
10885: PUSH
10886: LD_INT 0
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 32
10897: PUSH
10898: LD_INT 51
10900: PUSH
10901: LD_INT 61
10903: PUSH
10904: LD_INT 3
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 32
10915: PUSH
10916: LD_INT 42
10918: PUSH
10919: LD_INT 60
10921: PUSH
10922: LD_INT 3
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 32
10933: PUSH
10934: LD_INT 36
10936: PUSH
10937: LD_INT 58
10939: PUSH
10940: LD_INT 3
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 32
10951: PUSH
10952: LD_INT 39
10954: PUSH
10955: LD_INT 59
10957: PUSH
10958: LD_INT 3
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 32
10969: PUSH
10970: LD_INT 61
10972: PUSH
10973: LD_INT 64
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 33
10987: PUSH
10988: LD_INT 63
10990: PUSH
10991: LD_INT 90
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 33
11005: PUSH
11006: LD_INT 64
11008: PUSH
11009: LD_INT 88
11011: PUSH
11012: LD_INT 5
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 33
11023: PUSH
11024: LD_INT 72
11026: PUSH
11027: LD_INT 82
11029: PUSH
11030: LD_INT 5
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 6
11041: PUSH
11042: LD_INT 42
11044: PUSH
11045: LD_INT 74
11047: PUSH
11048: LD_INT 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 6
11059: PUSH
11060: LD_INT 56
11062: PUSH
11063: LD_INT 77
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 21
11077: PUSH
11078: LD_INT 54
11080: PUSH
11081: LD_INT 91
11083: PUSH
11084: LD_INT 5
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 16
11095: PUSH
11096: LD_INT 50
11098: PUSH
11099: LD_INT 83
11101: PUSH
11102: LD_INT 3
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 24
11113: PUSH
11114: LD_INT 50
11116: PUSH
11117: LD_INT 90
11119: PUSH
11120: LD_INT 0
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_INT 22
11167: PUSH
11168: LD_INT 3
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 3
11177: PUSH
11178: LD_INT 25
11180: PUSH
11181: LD_INT 2
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PPUSH
11196: CALL_OW 69
11200: PUSH
11201: FOR_IN
11202: IFFALSE 11221
// AddComAgressiveMove ( i , 53 , 82 ) ;
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 53
11211: PPUSH
11212: LD_INT 82
11214: PPUSH
11215: CALL_OW 174
11219: GO 11201
11221: POP
11222: POP
// for i := 1 to buildingsTab do
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: DOUBLE
11229: LD_INT 1
11231: DEC
11232: ST_TO_ADDR
11233: LD_VAR 0 5
11237: PUSH
11238: FOR_TO
11239: IFFALSE 11312
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11241: LD_VAR 0 4
11245: PPUSH
11246: LD_VAR 0 5
11250: PUSH
11251: LD_VAR 0 3
11255: ARRAY
11256: PUSH
11257: LD_INT 1
11259: ARRAY
11260: PPUSH
11261: LD_VAR 0 5
11265: PUSH
11266: LD_VAR 0 3
11270: ARRAY
11271: PUSH
11272: LD_INT 2
11274: ARRAY
11275: PPUSH
11276: LD_VAR 0 5
11280: PUSH
11281: LD_VAR 0 3
11285: ARRAY
11286: PUSH
11287: LD_INT 3
11289: ARRAY
11290: PPUSH
11291: LD_VAR 0 5
11295: PUSH
11296: LD_VAR 0 3
11300: ARRAY
11301: PUSH
11302: LD_INT 4
11304: ARRAY
11305: PPUSH
11306: CALL_OW 205
11310: GO 11238
11312: POP
11313: POP
// end ; if position = 2 then
11314: LD_VAR 0 1
11318: PUSH
11319: LD_INT 2
11321: EQUAL
11322: IFFALSE 11937
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11324: LD_ADDR_VAR 0 4
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 25
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 69
11357: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11358: LD_ADDR_VAR 0 5
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 104
11368: PUSH
11369: LD_INT 110
11371: PUSH
11372: LD_INT 5
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 98
11386: PUSH
11387: LD_INT 90
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 29
11401: PUSH
11402: LD_INT 103
11404: PUSH
11405: LD_INT 114
11407: PUSH
11408: LD_INT 2
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 30
11419: PUSH
11420: LD_INT 99
11422: PUSH
11423: LD_INT 114
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 28
11437: PUSH
11438: LD_INT 100
11440: PUSH
11441: LD_INT 112
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: LD_INT 92
11458: PUSH
11459: LD_INT 101
11461: PUSH
11462: LD_INT 0
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 28
11473: PUSH
11474: LD_INT 97
11476: PUSH
11477: LD_INT 116
11479: PUSH
11480: LD_INT 5
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 17
11491: PUSH
11492: LD_INT 96
11494: PUSH
11495: LD_INT 101
11497: PUSH
11498: LD_INT 4
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 18
11509: PUSH
11510: LD_INT 88
11512: PUSH
11513: LD_INT 97
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 28
11527: PUSH
11528: LD_INT 106
11530: PUSH
11531: LD_INT 92
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 32
11545: PUSH
11546: LD_INT 88
11548: PUSH
11549: LD_INT 89
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 32
11563: PUSH
11564: LD_INT 86
11566: PUSH
11567: LD_INT 90
11569: PUSH
11570: LD_INT 2
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 32
11581: PUSH
11582: LD_INT 85
11584: PUSH
11585: LD_INT 99
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 32
11599: PUSH
11600: LD_INT 85
11602: PUSH
11603: LD_INT 107
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 33
11617: PUSH
11618: LD_INT 105
11620: PUSH
11621: LD_INT 99
11623: PUSH
11624: LD_INT 1
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 102
11638: PUSH
11639: LD_INT 92
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 105
11656: PUSH
11657: LD_INT 92
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 6
11671: PUSH
11672: LD_INT 92
11674: PUSH
11675: LD_INT 110
11677: PUSH
11678: LD_INT 0
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 6
11689: PUSH
11690: LD_INT 103
11692: PUSH
11693: LD_INT 103
11695: PUSH
11696: LD_INT 5
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 21
11707: PUSH
11708: LD_INT 89
11710: PUSH
11711: LD_INT 101
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 16
11725: PUSH
11726: LD_INT 95
11728: PUSH
11729: LD_INT 104
11731: PUSH
11732: LD_INT 4
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 24
11743: PUSH
11744: LD_INT 92
11746: PUSH
11747: LD_INT 105
11749: PUSH
11750: LD_INT 0
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11783: LD_ADDR_VAR 0 3
11787: PUSH
11788: LD_INT 22
11790: PUSH
11791: LD_INT 3
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 3
11800: PUSH
11801: LD_INT 25
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PPUSH
11819: CALL_OW 69
11823: PUSH
11824: FOR_IN
11825: IFFALSE 11844
// AddComAgressiveMove ( i , 96 , 99 ) ;
11827: LD_VAR 0 3
11831: PPUSH
11832: LD_INT 96
11834: PPUSH
11835: LD_INT 99
11837: PPUSH
11838: CALL_OW 174
11842: GO 11824
11844: POP
11845: POP
// for i := 1 to buildingsTab do
11846: LD_ADDR_VAR 0 3
11850: PUSH
11851: DOUBLE
11852: LD_INT 1
11854: DEC
11855: ST_TO_ADDR
11856: LD_VAR 0 5
11860: PUSH
11861: FOR_TO
11862: IFFALSE 11935
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11864: LD_VAR 0 4
11868: PPUSH
11869: LD_VAR 0 5
11873: PUSH
11874: LD_VAR 0 3
11878: ARRAY
11879: PUSH
11880: LD_INT 1
11882: ARRAY
11883: PPUSH
11884: LD_VAR 0 5
11888: PUSH
11889: LD_VAR 0 3
11893: ARRAY
11894: PUSH
11895: LD_INT 2
11897: ARRAY
11898: PPUSH
11899: LD_VAR 0 5
11903: PUSH
11904: LD_VAR 0 3
11908: ARRAY
11909: PUSH
11910: LD_INT 3
11912: ARRAY
11913: PPUSH
11914: LD_VAR 0 5
11918: PUSH
11919: LD_VAR 0 3
11923: ARRAY
11924: PUSH
11925: LD_INT 4
11927: ARRAY
11928: PPUSH
11929: CALL_OW 205
11933: GO 11861
11935: POP
11936: POP
// end ; if position = 3 then
11937: LD_VAR 0 1
11941: PUSH
11942: LD_INT 3
11944: EQUAL
11945: IFFALSE 12731
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11947: LD_ADDR_VAR 0 4
11951: PUSH
11952: LD_INT 22
11954: PUSH
11955: LD_INT 3
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 25
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PPUSH
11976: CALL_OW 69
11980: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11981: LD_ADDR_VAR 0 5
11985: PUSH
11986: LD_INT 0
11988: PUSH
11989: LD_INT 151
11991: PUSH
11992: LD_INT 71
11994: PUSH
11995: LD_INT 4
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 4
12006: PUSH
12007: LD_INT 145
12009: PUSH
12010: LD_INT 53
12012: PUSH
12013: LD_INT 3
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 4
12024: PUSH
12025: LD_INT 172
12027: PUSH
12028: LD_INT 102
12030: PUSH
12031: LD_INT 5
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 29
12042: PUSH
12043: LD_INT 152
12045: PUSH
12046: LD_INT 85
12048: PUSH
12049: LD_INT 3
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 156
12063: PUSH
12064: LD_INT 92
12066: PUSH
12067: LD_INT 3
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 28
12078: PUSH
12079: LD_INT 151
12081: PUSH
12082: LD_INT 66
12084: PUSH
12085: LD_INT 4
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: LD_INT 163
12099: PUSH
12100: LD_INT 95
12102: PUSH
12103: LD_INT 5
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 28
12114: PUSH
12115: LD_INT 149
12117: PUSH
12118: LD_INT 63
12120: PUSH
12121: LD_INT 4
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 17
12132: PUSH
12133: LD_INT 167
12135: PUSH
12136: LD_INT 99
12138: PUSH
12139: LD_INT 5
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 18
12150: PUSH
12151: LD_INT 163
12153: PUSH
12154: LD_INT 98
12156: PUSH
12157: LD_INT 0
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 154
12171: PUSH
12172: LD_INT 70
12174: PUSH
12175: LD_INT 4
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 32
12186: PUSH
12187: LD_INT 155
12189: PUSH
12190: LD_INT 62
12192: PUSH
12193: LD_INT 4
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 32
12204: PUSH
12205: LD_INT 161
12207: PUSH
12208: LD_INT 69
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 32
12222: PUSH
12223: LD_INT 168
12225: PUSH
12226: LD_INT 78
12228: PUSH
12229: LD_INT 4
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 32
12240: PUSH
12241: LD_INT 163
12243: PUSH
12244: LD_INT 80
12246: PUSH
12247: LD_INT 5
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 32
12258: PUSH
12259: LD_INT 136
12261: PUSH
12262: LD_INT 73
12264: PUSH
12265: LD_INT 0
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 32
12276: PUSH
12277: LD_INT 157
12279: PUSH
12280: LD_INT 98
12282: PUSH
12283: LD_INT 0
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 32
12294: PUSH
12295: LD_INT 150
12297: PUSH
12298: LD_INT 87
12300: PUSH
12301: LD_INT 1
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 33
12312: PUSH
12313: LD_INT 171
12315: PUSH
12316: LD_INT 97
12318: PUSH
12319: LD_INT 4
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 33
12330: PUSH
12331: LD_INT 168
12333: PUSH
12334: LD_INT 92
12336: PUSH
12337: LD_INT 4
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 33
12348: PUSH
12349: LD_INT 166
12351: PUSH
12352: LD_INT 80
12354: PUSH
12355: LD_INT 5
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 33
12366: PUSH
12367: LD_INT 141
12369: PUSH
12370: LD_INT 54
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 33
12384: PUSH
12385: LD_INT 133
12387: PUSH
12388: LD_INT 57
12390: PUSH
12391: LD_INT 2
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 33
12402: PUSH
12403: LD_INT 132
12405: PUSH
12406: LD_INT 61
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 33
12420: PUSH
12421: LD_INT 150
12423: PUSH
12424: LD_INT 82
12426: PUSH
12427: LD_INT 0
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 33
12438: PUSH
12439: LD_INT 132
12441: PUSH
12442: LD_INT 72
12444: PUSH
12445: LD_INT 0
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 6
12456: PUSH
12457: LD_INT 146
12459: PUSH
12460: LD_INT 64
12462: PUSH
12463: LD_INT 4
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 6
12474: PUSH
12475: LD_INT 159
12477: PUSH
12478: LD_INT 85
12480: PUSH
12481: LD_INT 4
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 21
12492: PUSH
12493: LD_INT 163
12495: PUSH
12496: LD_INT 91
12498: PUSH
12499: LD_INT 3
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 16
12510: PUSH
12511: LD_INT 166
12513: PUSH
12514: LD_INT 95
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 24
12528: PUSH
12529: LD_INT 159
12531: PUSH
12532: LD_INT 95
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12577: LD_ADDR_VAR 0 3
12581: PUSH
12582: LD_INT 22
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: LD_INT 25
12597: PUSH
12598: LD_INT 2
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PUSH
12618: FOR_IN
12619: IFFALSE 12638
// AddComAgressiveMove ( i , 141 , 65 ) ;
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 141
12628: PPUSH
12629: LD_INT 65
12631: PPUSH
12632: CALL_OW 174
12636: GO 12618
12638: POP
12639: POP
// for i := 1 to buildingsTab do
12640: LD_ADDR_VAR 0 3
12644: PUSH
12645: DOUBLE
12646: LD_INT 1
12648: DEC
12649: ST_TO_ADDR
12650: LD_VAR 0 5
12654: PUSH
12655: FOR_TO
12656: IFFALSE 12729
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12658: LD_VAR 0 4
12662: PPUSH
12663: LD_VAR 0 5
12667: PUSH
12668: LD_VAR 0 3
12672: ARRAY
12673: PUSH
12674: LD_INT 1
12676: ARRAY
12677: PPUSH
12678: LD_VAR 0 5
12682: PUSH
12683: LD_VAR 0 3
12687: ARRAY
12688: PUSH
12689: LD_INT 2
12691: ARRAY
12692: PPUSH
12693: LD_VAR 0 5
12697: PUSH
12698: LD_VAR 0 3
12702: ARRAY
12703: PUSH
12704: LD_INT 3
12706: ARRAY
12707: PPUSH
12708: LD_VAR 0 5
12712: PUSH
12713: LD_VAR 0 3
12717: ARRAY
12718: PUSH
12719: LD_INT 4
12721: ARRAY
12722: PPUSH
12723: CALL_OW 205
12727: GO 12655
12729: POP
12730: POP
// end ; end ;
12731: LD_VAR 0 2
12735: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12736: LD_INT 0
12738: PPUSH
12739: PPUSH
12740: PPUSH
12741: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12742: LD_ADDR_VAR 0 3
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_INT 2
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 25
12759: PUSH
12760: LD_INT 2
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12776: LD_VAR 0 3
12780: PPUSH
12781: LD_INT 0
12783: PPUSH
12784: LD_INT 71
12786: PPUSH
12787: LD_INT 15
12789: PPUSH
12790: LD_INT 3
12792: PPUSH
12793: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12797: LD_ADDR_VAR 0 4
12801: PUSH
12802: LD_INT 6
12804: PUSH
12805: LD_INT 77
12807: PUSH
12808: LD_INT 18
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 4
12822: PUSH
12823: LD_INT 77
12825: PUSH
12826: LD_INT 26
12828: PUSH
12829: LD_INT 0
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 31
12840: PUSH
12841: LD_INT 82
12843: PUSH
12844: LD_INT 28
12846: PUSH
12847: LD_INT 0
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 31
12858: PUSH
12859: LD_INT 84
12861: PUSH
12862: LD_INT 21
12864: PUSH
12865: LD_INT 3
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 31
12876: PUSH
12877: LD_INT 66
12879: PUSH
12880: LD_INT 14
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 27
12894: PUSH
12895: LD_INT 67
12897: PUSH
12898: LD_INT 18
12900: PUSH
12901: LD_INT 5
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 27
12912: PUSH
12913: LD_INT 69
12915: PUSH
12916: LD_INT 23
12918: PUSH
12919: LD_INT 2
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: ST_TO_ADDR
// for i := 1 to buildingsTab do
12937: LD_ADDR_VAR 0 2
12941: PUSH
12942: DOUBLE
12943: LD_INT 1
12945: DEC
12946: ST_TO_ADDR
12947: LD_VAR 0 4
12951: PUSH
12952: FOR_TO
12953: IFFALSE 13026
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_VAR 0 4
12964: PUSH
12965: LD_VAR 0 2
12969: ARRAY
12970: PUSH
12971: LD_INT 1
12973: ARRAY
12974: PPUSH
12975: LD_VAR 0 4
12979: PUSH
12980: LD_VAR 0 2
12984: ARRAY
12985: PUSH
12986: LD_INT 2
12988: ARRAY
12989: PPUSH
12990: LD_VAR 0 4
12994: PUSH
12995: LD_VAR 0 2
12999: ARRAY
13000: PUSH
13001: LD_INT 3
13003: ARRAY
13004: PPUSH
13005: LD_VAR 0 4
13009: PUSH
13010: LD_VAR 0 2
13014: ARRAY
13015: PUSH
13016: LD_INT 4
13018: ARRAY
13019: PPUSH
13020: CALL_OW 205
13024: GO 12952
13026: POP
13027: POP
// end ;
13028: LD_VAR 0 1
13032: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13033: LD_INT 0
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13041: LD_ADDR_VAR 0 7
13045: PUSH
13046: LD_INT 22
13048: PUSH
13049: LD_VAR 0 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 9
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 69
13076: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13077: LD_ADDR_VAR 0 8
13081: PUSH
13082: LD_INT 22
13084: PUSH
13085: LD_VAR 0 2
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 3
13096: PUSH
13097: LD_INT 21
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PPUSH
13115: CALL_OW 69
13119: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13120: LD_ADDR_VAR 0 5
13124: PUSH
13125: LD_INT 1
13127: PPUSH
13128: LD_INT 3
13130: PPUSH
13131: CALL_OW 12
13135: ST_TO_ADDR
// for i = 1 to list do
13136: LD_ADDR_VAR 0 6
13140: PUSH
13141: DOUBLE
13142: LD_INT 1
13144: DEC
13145: ST_TO_ADDR
13146: LD_VAR 0 7
13150: PUSH
13151: FOR_TO
13152: IFFALSE 14142
// for ta in filter do
13154: LD_ADDR_VAR 0 4
13158: PUSH
13159: LD_VAR 0 8
13163: PUSH
13164: FOR_IN
13165: IFFALSE 14138
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13167: LD_VAR 0 7
13171: PUSH
13172: LD_VAR 0 6
13176: ARRAY
13177: PPUSH
13178: LD_VAR 0 4
13182: PPUSH
13183: CALL_OW 296
13187: PUSH
13188: LD_INT 15
13190: LESSEQUAL
13191: IFFALSE 14136
// begin case c of 1 :
13193: LD_VAR 0 5
13197: PUSH
13198: LD_INT 1
13200: DOUBLE
13201: EQUAL
13202: IFTRUE 13206
13204: GO 13638
13206: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13207: LD_VAR 0 7
13211: PUSH
13212: LD_VAR 0 6
13216: ARRAY
13217: PPUSH
13218: LD_VAR 0 4
13222: PPUSH
13223: CALL_OW 250
13227: PPUSH
13228: LD_VAR 0 4
13232: PPUSH
13233: CALL_OW 251
13237: PPUSH
13238: CALL_OW 154
// if eventVar2 = 0 then
13242: LD_EXP 62
13246: PUSH
13247: LD_INT 0
13249: EQUAL
13250: IFFALSE 13636
// begin eventVar2 = 1 ;
13252: LD_ADDR_EXP 62
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13260: LD_INT 245
13262: PPUSH
13263: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13267: LD_VAR 0 4
13271: PPUSH
13272: CALL_OW 250
13276: PPUSH
13277: LD_VAR 0 4
13281: PPUSH
13282: CALL_OW 251
13286: PPUSH
13287: CALL_OW 84
// DialogueOn ;
13291: CALL_OW 6
// if IsOK ( Cyrus ) then
13295: LD_EXP 5
13299: PPUSH
13300: CALL_OW 302
13304: IFFALSE 13320
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13306: LD_EXP 5
13310: PPUSH
13311: LD_STRING D9a-Cyrus-1
13313: PPUSH
13314: CALL_OW 88
// end else
13318: GO 13442
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13320: LD_INT 22
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 26
13332: PUSH
13333: LD_INT 1
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 1
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 25
13355: PUSH
13356: LD_INT 2
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 25
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 25
13375: PUSH
13376: LD_INT 4
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 25
13385: PUSH
13386: LD_INT 5
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: PUSH
13411: LD_EXP 1
13415: PUSH
13416: LD_EXP 14
13420: PUSH
13421: LD_EXP 5
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: DIFF
13431: PPUSH
13432: LD_STRING D9a-Sol1-1
13434: PPUSH
13435: LD_STRING D9a-Sol1-1
13437: PPUSH
13438: CALL 9688 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13442: LD_INT 22
13444: PUSH
13445: LD_INT 1
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 26
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 2
13464: PUSH
13465: LD_INT 25
13467: PUSH
13468: LD_INT 1
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 25
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 25
13487: PUSH
13488: LD_INT 3
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 25
13497: PUSH
13498: LD_INT 4
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 25
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: PPUSH
13528: CALL_OW 69
13532: PUSH
13533: LD_EXP 1
13537: PUSH
13538: LD_EXP 14
13542: PUSH
13543: LD_EXP 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: DIFF
13553: PPUSH
13554: LD_STRING D9b-Sol1-1
13556: PPUSH
13557: LD_STRING D9b-Sol1-1
13559: PPUSH
13560: CALL 9688 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13564: LD_STRING 09_arInfo
13566: PPUSH
13567: LD_INT 0
13569: PPUSH
13570: CALL_OW 30
13574: PUSH
13575: LD_INT 1
13577: EQUAL
13578: IFFALSE 13592
// Say ( JMM , D9a-JMM-1 ) ;
13580: LD_EXP 1
13584: PPUSH
13585: LD_STRING D9a-JMM-1
13587: PPUSH
13588: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13592: LD_EXP 1
13596: PPUSH
13597: LD_STRING D9c-JMM-1
13599: PPUSH
13600: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13604: LD_INT 12
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: CALL_OW 321
13614: PUSH
13615: LD_INT 2
13617: EQUAL
13618: IFFALSE 13632
// Say ( JMM , D9c-JMM-1a ) ;
13620: LD_EXP 1
13624: PPUSH
13625: LD_STRING D9c-JMM-1a
13627: PPUSH
13628: CALL_OW 88
// DialogueOff ;
13632: CALL_OW 7
// end ; end ; 2 :
13636: GO 14136
13638: LD_INT 2
13640: DOUBLE
13641: EQUAL
13642: IFTRUE 13646
13644: GO 14104
13646: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13647: LD_VAR 0 7
13651: PUSH
13652: LD_VAR 0 6
13656: ARRAY
13657: PPUSH
13658: LD_VAR 0 4
13662: PPUSH
13663: CALL_OW 250
13667: PUSH
13668: LD_INT 1
13670: NEG
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 12
13679: PLUS
13680: PPUSH
13681: LD_VAR 0 4
13685: PPUSH
13686: CALL_OW 251
13690: PUSH
13691: LD_INT 1
13693: NEG
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: CALL_OW 12
13702: PLUS
13703: PPUSH
13704: CALL_OW 153
// if eventVar2 = 0 then
13708: LD_EXP 62
13712: PUSH
13713: LD_INT 0
13715: EQUAL
13716: IFFALSE 14102
// begin eventVar2 = 1 ;
13718: LD_ADDR_EXP 62
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13726: LD_INT 245
13728: PPUSH
13729: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13733: LD_VAR 0 4
13737: PPUSH
13738: CALL_OW 250
13742: PPUSH
13743: LD_VAR 0 4
13747: PPUSH
13748: CALL_OW 251
13752: PPUSH
13753: CALL_OW 84
// DialogueOn ;
13757: CALL_OW 6
// if IsOK ( Cyrus ) then
13761: LD_EXP 5
13765: PPUSH
13766: CALL_OW 302
13770: IFFALSE 13786
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13772: LD_EXP 5
13776: PPUSH
13777: LD_STRING D9a-Cyrus-1
13779: PPUSH
13780: CALL_OW 88
// end else
13784: GO 13908
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13786: LD_INT 22
13788: PUSH
13789: LD_INT 1
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 26
13798: PUSH
13799: LD_INT 1
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: LD_INT 25
13811: PUSH
13812: LD_INT 1
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 25
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 25
13831: PUSH
13832: LD_INT 3
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 25
13841: PUSH
13842: LD_INT 4
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 5
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: PUSH
13877: LD_EXP 1
13881: PUSH
13882: LD_EXP 14
13886: PUSH
13887: LD_EXP 5
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: DIFF
13897: PPUSH
13898: LD_STRING D9a-Sol1-1
13900: PPUSH
13901: LD_STRING D9a-Sol1-1
13903: PPUSH
13904: CALL 9688 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13908: LD_INT 22
13910: PUSH
13911: LD_INT 1
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 26
13920: PUSH
13921: LD_INT 1
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 2
13930: PUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 1
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 25
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 25
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 25
13963: PUSH
13964: LD_INT 4
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 25
13973: PUSH
13974: LD_INT 5
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: PPUSH
13994: CALL_OW 69
13998: PUSH
13999: LD_EXP 1
14003: PUSH
14004: LD_EXP 14
14008: PUSH
14009: LD_EXP 5
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: DIFF
14019: PPUSH
14020: LD_STRING D9b-Sol1-1
14022: PPUSH
14023: LD_STRING D9b-Sol1-1
14025: PPUSH
14026: CALL 9688 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14030: LD_STRING 09_arInfo
14032: PPUSH
14033: LD_INT 0
14035: PPUSH
14036: CALL_OW 30
14040: PUSH
14041: LD_INT 1
14043: EQUAL
14044: IFFALSE 14058
// Say ( JMM , D9a-JMM-1 ) ;
14046: LD_EXP 1
14050: PPUSH
14051: LD_STRING D9a-JMM-1
14053: PPUSH
14054: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14058: LD_EXP 1
14062: PPUSH
14063: LD_STRING D9c-JMM-1
14065: PPUSH
14066: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14070: LD_INT 12
14072: PPUSH
14073: LD_INT 1
14075: PPUSH
14076: CALL_OW 321
14080: PUSH
14081: LD_INT 2
14083: EQUAL
14084: IFFALSE 14098
// Say ( JMM , D9c-JMM-1a ) ;
14086: LD_EXP 1
14090: PPUSH
14091: LD_STRING D9c-JMM-1a
14093: PPUSH
14094: CALL_OW 88
// DialogueOff ;
14098: CALL_OW 7
// end ; end ; 3 :
14102: GO 14136
14104: LD_INT 3
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14135
14112: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14113: LD_VAR 0 7
14117: PUSH
14118: LD_VAR 0 6
14122: ARRAY
14123: PPUSH
14124: LD_VAR 0 4
14128: PPUSH
14129: CALL_OW 115
14133: GO 14136
14135: POP
// end ; end ;
14136: GO 13164
14138: POP
14139: POP
14140: GO 13151
14142: POP
14143: POP
// end ;
14144: LD_VAR 0 3
14148: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14149: LD_INT 0
14151: PPUSH
14152: PPUSH
14153: PPUSH
14154: PPUSH
// for i = 1 to 72 do
14155: LD_ADDR_VAR 0 5
14159: PUSH
14160: DOUBLE
14161: LD_INT 1
14163: DEC
14164: ST_TO_ADDR
14165: LD_INT 72
14167: PUSH
14168: FOR_TO
14169: IFFALSE 14227
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14171: LD_VAR 0 5
14175: PPUSH
14176: LD_VAR 0 1
14180: PPUSH
14181: CALL_OW 321
14185: PUSH
14186: LD_INT 1
14188: EQUAL
14189: PUSH
14190: LD_VAR 0 5
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: CALL_OW 482
14204: PUSH
14205: LD_INT 1
14207: EQUAL
14208: AND
14209: IFFALSE 14225
// AddComResearch ( lab , i ) ;
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_VAR 0 5
14220: PPUSH
14221: CALL_OW 184
14225: GO 14168
14227: POP
14228: POP
// end ;
14229: LD_VAR 0 4
14233: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14234: LD_INT 0
14236: PPUSH
14237: PPUSH
14238: PPUSH
14239: PPUSH
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14244: LD_ADDR_VAR 0 6
14248: PUSH
14249: LD_INT 22
14251: PUSH
14252: LD_VAR 0 1
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 56
14263: PUSH
14264: EMPTY
14265: LIST
14266: PUSH
14267: LD_INT 24
14269: PUSH
14270: LD_INT 700
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 3
14279: PUSH
14280: LD_INT 60
14282: PUSH
14283: EMPTY
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 2
14292: PUSH
14293: LD_INT 25
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 25
14305: PUSH
14306: LD_INT 9
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14330: LD_ADDR_VAR 0 7
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_VAR 0 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 32
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 58
14359: PUSH
14360: EMPTY
14361: LIST
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 251
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 69
14383: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14384: LD_ADDR_VAR 0 9
14388: PUSH
14389: LD_INT 22
14391: PUSH
14392: LD_VAR 0 1
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 30
14406: PUSH
14407: LD_INT 4
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 30
14416: PUSH
14417: LD_INT 5
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: LD_INT 251
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: PPUSH
14444: CALL_OW 69
14448: ST_TO_ADDR
// if barrackList > 0 then
14449: LD_VAR 0 9
14453: PUSH
14454: LD_INT 0
14456: GREATER
14457: IFFALSE 14592
// begin if turretList = 0 then
14459: LD_VAR 0 7
14463: PUSH
14464: LD_INT 0
14466: EQUAL
14467: IFFALSE 14516
// begin for i in soldiers_list do
14469: LD_ADDR_VAR 0 4
14473: PUSH
14474: LD_VAR 0 6
14478: PUSH
14479: FOR_IN
14480: IFFALSE 14512
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14482: LD_VAR 0 4
14486: PPUSH
14487: LD_VAR 0 9
14491: PUSH
14492: LD_INT 1
14494: PPUSH
14495: LD_VAR 0 9
14499: PPUSH
14500: CALL_OW 12
14504: ARRAY
14505: PPUSH
14506: CALL_OW 120
14510: GO 14479
14512: POP
14513: POP
// end else
14514: GO 14592
// begin for i in barrackList do
14516: LD_ADDR_VAR 0 4
14520: PUSH
14521: LD_VAR 0 9
14525: PUSH
14526: FOR_IN
14527: IFFALSE 14590
// begin insideUnits = UnitsInside ( i ) ;
14529: LD_ADDR_VAR 0 10
14533: PUSH
14534: LD_VAR 0 4
14538: PPUSH
14539: CALL_OW 313
14543: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14544: LD_VAR 0 10
14548: PUSH
14549: LD_INT 1
14551: ARRAY
14552: PPUSH
14553: LD_VAR 0 7
14557: PUSH
14558: LD_INT 1
14560: ARRAY
14561: PPUSH
14562: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14566: LD_VAR 0 6
14570: PUSH
14571: LD_INT 1
14573: ARRAY
14574: PPUSH
14575: LD_VAR 0 7
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PPUSH
14584: CALL_OW 120
// end ;
14588: GO 14526
14590: POP
14591: POP
// end ; end ; end ;
14592: LD_VAR 0 3
14596: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14597: LD_INT 0
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14605: LD_ADDR_VAR 0 6
14609: PUSH
14610: LD_VAR 0 2
14614: PPUSH
14615: CALL_OW 313
14619: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14620: LD_ADDR_VAR 0 7
14624: PUSH
14625: LD_INT 22
14627: PUSH
14628: LD_VAR 0 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 25
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 24
14649: PUSH
14650: LD_INT 1000
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 3
14659: PUSH
14660: LD_INT 54
14662: PUSH
14663: EMPTY
14664: LIST
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 69
14680: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14681: LD_ADDR_VAR 0 4
14685: PUSH
14686: LD_INT 22
14688: PUSH
14689: LD_VAR 0 1
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 21
14700: PUSH
14701: LD_INT 3
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 3
14710: PUSH
14711: LD_INT 24
14713: PUSH
14714: LD_INT 1000
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: PPUSH
14733: CALL_OW 69
14737: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14738: LD_VAR 0 4
14742: NOT
14743: PUSH
14744: LD_VAR 0 7
14748: NOT
14749: AND
14750: PUSH
14751: LD_EXP 42
14755: NOT
14756: AND
14757: IFFALSE 14761
// exit ;
14759: GO 14952
// if buildings_list > 0 and engineerOkInside then
14761: LD_VAR 0 4
14765: PUSH
14766: LD_INT 0
14768: GREATER
14769: PUSH
14770: LD_VAR 0 6
14774: AND
14775: IFFALSE 14829
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14777: LD_ADDR_VAR 0 5
14781: PUSH
14782: LD_INT 22
14784: PUSH
14785: LD_VAR 0 1
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 25
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PPUSH
14808: CALL_OW 69
14812: PUSH
14813: FOR_IN
14814: IFFALSE 14827
// ComExitBuilding ( i ) ;
14816: LD_VAR 0 5
14820: PPUSH
14821: CALL_OW 122
14825: GO 14813
14827: POP
14828: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14829: LD_VAR 0 4
14833: PUSH
14834: LD_INT 0
14836: GREATER
14837: PUSH
14838: LD_VAR 0 7
14842: PUSH
14843: LD_INT 0
14845: GREATER
14846: AND
14847: IFFALSE 14901
// begin for i in engineerOkOutside do
14849: LD_ADDR_VAR 0 5
14853: PUSH
14854: LD_VAR 0 7
14858: PUSH
14859: FOR_IN
14860: IFFALSE 14899
// for j in buildings_list do
14862: LD_ADDR_VAR 0 8
14866: PUSH
14867: LD_VAR 0 4
14871: PUSH
14872: FOR_IN
14873: IFFALSE 14895
// ComRepairBuilding ( i , j [ 1 ] ) ;
14875: LD_VAR 0 5
14879: PPUSH
14880: LD_VAR 0 8
14884: PUSH
14885: LD_INT 1
14887: ARRAY
14888: PPUSH
14889: CALL_OW 130
14893: GO 14872
14895: POP
14896: POP
14897: GO 14859
14899: POP
14900: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14901: LD_VAR 0 4
14905: PUSH
14906: LD_INT 0
14908: EQUAL
14909: PUSH
14910: LD_VAR 0 7
14914: PUSH
14915: LD_INT 0
14917: GREATER
14918: AND
14919: IFFALSE 14952
// for i in engineerOkOutside do
14921: LD_ADDR_VAR 0 5
14925: PUSH
14926: LD_VAR 0 7
14930: PUSH
14931: FOR_IN
14932: IFFALSE 14950
// ComEnterUnit ( i , building ) ;
14934: LD_VAR 0 5
14938: PPUSH
14939: LD_VAR 0 2
14943: PPUSH
14944: CALL_OW 120
14948: GO 14931
14950: POP
14951: POP
// end ;
14952: LD_VAR 0 3
14956: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14957: LD_INT 0
14959: PPUSH
14960: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14961: LD_INT 22
14963: PUSH
14964: LD_VAR 0 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 25
14975: PUSH
14976: LD_INT 2
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: PUSH
14992: LD_INT 0
14994: GREATER
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_VAR 0 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 21
15010: PUSH
15011: LD_INT 3
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 3
15020: PUSH
15021: LD_INT 24
15023: PUSH
15024: LD_INT 1000
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: PUSH
15045: LD_INT 0
15047: EQUAL
15048: AND
15049: PUSH
15050: LD_VAR 0 2
15054: PUSH
15055: LD_INT 0
15057: GREATER
15058: AND
15059: IFFALSE 15158
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15061: LD_ADDR_VAR 0 4
15065: PUSH
15066: LD_INT 22
15068: PUSH
15069: LD_VAR 0 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 25
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 69
15096: PUSH
15097: FOR_IN
15098: IFFALSE 15156
// begin AddComExitBuilding ( i ) ;
15100: LD_VAR 0 4
15104: PPUSH
15105: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15109: LD_VAR 0 4
15113: PPUSH
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 2
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 2
15136: PUSH
15137: LD_INT 3
15139: ARRAY
15140: PPUSH
15141: LD_VAR 0 2
15145: PUSH
15146: LD_INT 4
15148: ARRAY
15149: PPUSH
15150: CALL_OW 205
// end ;
15154: GO 15097
15156: POP
15157: POP
// end ; end ;
15158: LD_VAR 0 3
15162: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15163: LD_INT 0
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
15173: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15174: LD_ADDR_VAR 0 6
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_VAR 0 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 25
15193: PUSH
15194: LD_INT 4
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 24
15203: PUSH
15204: LD_INT 251
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 69
15220: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15221: LD_ADDR_VAR 0 7
15225: PUSH
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 22
15233: PUSH
15234: LD_VAR 0 1
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 25
15245: PUSH
15246: LD_INT 4
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 50
15255: PUSH
15256: EMPTY
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PPUSH
15264: CALL_OW 70
15268: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15269: LD_ADDR_VAR 0 10
15273: PUSH
15274: LD_VAR 0 3
15278: PPUSH
15279: LD_INT 22
15281: PUSH
15282: LD_VAR 0 1
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 21
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: LD_INT 25
15306: PUSH
15307: LD_INT 3
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 3
15320: PUSH
15321: LD_INT 24
15323: PUSH
15324: LD_INT 750
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 70
15345: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15346: LD_ADDR_VAR 0 11
15350: PUSH
15351: LD_VAR 0 2
15355: PPUSH
15356: LD_INT 22
15358: PUSH
15359: LD_VAR 0 1
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 21
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: LD_INT 25
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 3
15397: PUSH
15398: LD_INT 24
15400: PUSH
15401: LD_INT 1000
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: PPUSH
15418: CALL_OW 70
15422: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15423: LD_VAR 0 10
15427: NOT
15428: PUSH
15429: LD_VAR 0 7
15433: NOT
15434: AND
15435: PUSH
15436: LD_VAR 0 11
15440: NOT
15441: AND
15442: IFFALSE 15446
// exit ;
15444: GO 15706
// if damageUnits > 0 and sci_list > 0 then
15446: LD_VAR 0 10
15450: PUSH
15451: LD_INT 0
15453: GREATER
15454: PUSH
15455: LD_VAR 0 6
15459: PUSH
15460: LD_INT 0
15462: GREATER
15463: AND
15464: IFFALSE 15497
// for i in damageUnits do
15466: LD_ADDR_VAR 0 8
15470: PUSH
15471: LD_VAR 0 10
15475: PUSH
15476: FOR_IN
15477: IFFALSE 15495
// ComMoveToArea ( i , healArea ) ;
15479: LD_VAR 0 8
15483: PPUSH
15484: LD_VAR 0 2
15488: PPUSH
15489: CALL_OW 113
15493: GO 15476
15495: POP
15496: POP
// if unitsToHeal > 0 and sci_list > 0 then
15497: LD_VAR 0 11
15501: PUSH
15502: LD_INT 0
15504: GREATER
15505: PUSH
15506: LD_VAR 0 6
15510: PUSH
15511: LD_INT 0
15513: GREATER
15514: AND
15515: IFFALSE 15574
// begin for i in sci_list do
15517: LD_ADDR_VAR 0 8
15521: PUSH
15522: LD_VAR 0 6
15526: PUSH
15527: FOR_IN
15528: IFFALSE 15572
// begin ComExitBuilding ( i ) ;
15530: LD_VAR 0 8
15534: PPUSH
15535: CALL_OW 122
// for j in unitsToHeal do
15539: LD_ADDR_VAR 0 9
15543: PUSH
15544: LD_VAR 0 11
15548: PUSH
15549: FOR_IN
15550: IFFALSE 15568
// AddComHeal ( i , j ) ;
15552: LD_VAR 0 8
15556: PPUSH
15557: LD_VAR 0 9
15561: PPUSH
15562: CALL_OW 188
15566: GO 15549
15568: POP
15569: POP
// end ;
15570: GO 15527
15572: POP
15573: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15574: LD_VAR 0 10
15578: PUSH
15579: LD_INT 0
15581: EQUAL
15582: PUSH
15583: LD_VAR 0 11
15587: PUSH
15588: LD_INT 0
15590: EQUAL
15591: AND
15592: PUSH
15593: LD_VAR 0 7
15597: PUSH
15598: LD_INT 0
15600: GREATER
15601: AND
15602: IFFALSE 15706
// for i in sci_listOutside do
15604: LD_ADDR_VAR 0 8
15608: PUSH
15609: LD_VAR 0 7
15613: PUSH
15614: FOR_IN
15615: IFFALSE 15704
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15617: LD_ADDR_VAR 0 12
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_VAR 0 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 21
15636: PUSH
15637: LD_INT 3
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 30
15646: PUSH
15647: LD_INT 8
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: LIST
15658: PPUSH
15659: CALL_OW 69
15663: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15664: LD_ADDR_VAR 0 13
15668: PUSH
15669: LD_INT 1
15671: PPUSH
15672: LD_VAR 0 12
15676: PPUSH
15677: CALL_OW 12
15681: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15682: LD_VAR 0 8
15686: PPUSH
15687: LD_VAR 0 12
15691: PUSH
15692: LD_VAR 0 13
15696: ARRAY
15697: PPUSH
15698: CALL_OW 120
// end ;
15702: GO 15614
15704: POP
15705: POP
// end ;
15706: LD_VAR 0 5
15710: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15711: LD_INT 0
15713: PPUSH
15714: PPUSH
15715: PPUSH
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
// amChassisTab = [ ] ;
15724: LD_ADDR_VAR 0 19
15728: PUSH
15729: EMPTY
15730: ST_TO_ADDR
// arChassisTab = [ ] ;
15731: LD_ADDR_VAR 0 18
15735: PUSH
15736: EMPTY
15737: ST_TO_ADDR
// ruChassisTab = [ ] ;
15738: LD_ADDR_VAR 0 17
15742: PUSH
15743: EMPTY
15744: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15745: LD_INT 35
15747: PPUSH
15748: CALL_OW 67
// if nation = 1 then
15752: LD_VAR 0 5
15756: PUSH
15757: LD_INT 1
15759: EQUAL
15760: IFFALSE 16265
// begin uc_side = side ;
15762: LD_ADDR_OWVAR 20
15766: PUSH
15767: LD_VAR 0 2
15771: ST_TO_ADDR
// uc_nation = nation ;
15772: LD_ADDR_OWVAR 21
15776: PUSH
15777: LD_VAR 0 5
15781: ST_TO_ADDR
// vc_engine = vehengine ;
15782: LD_ADDR_OWVAR 39
15786: PUSH
15787: LD_VAR 0 6
15791: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15792: LD_ADDR_OWVAR 38
15796: PUSH
15797: LD_VAR 0 7
15801: PUSH
15802: LD_INT 1
15804: PPUSH
15805: LD_VAR 0 7
15809: PPUSH
15810: CALL_OW 12
15814: ARRAY
15815: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15816: LD_ADDR_OWVAR 40
15820: PUSH
15821: LD_VAR 0 10
15825: PUSH
15826: LD_INT 1
15828: PPUSH
15829: LD_VAR 0 10
15833: PPUSH
15834: CALL_OW 12
15838: ARRAY
15839: ST_TO_ADDR
// for j = 1 to AMWeapon do
15840: LD_ADDR_VAR 0 14
15844: PUSH
15845: DOUBLE
15846: LD_INT 1
15848: DEC
15849: ST_TO_ADDR
15850: LD_VAR 0 10
15854: PUSH
15855: FOR_TO
15856: IFFALSE 16157
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15858: LD_VAR 0 10
15862: PUSH
15863: LD_VAR 0 14
15867: ARRAY
15868: PUSH
15869: LD_INT 2
15871: EQUAL
15872: PUSH
15873: LD_VAR 0 10
15877: PUSH
15878: LD_VAR 0 14
15882: ARRAY
15883: PUSH
15884: LD_INT 3
15886: EQUAL
15887: OR
15888: IFFALSE 15941
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15890: LD_ADDR_VAR 0 19
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: LD_INT 5
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15917: LD_ADDR_OWVAR 37
15921: PUSH
15922: LD_VAR 0 19
15926: PUSH
15927: LD_INT 1
15929: PPUSH
15930: LD_VAR 0 19
15934: PPUSH
15935: CALL_OW 12
15939: ARRAY
15940: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15941: LD_VAR 0 10
15945: PUSH
15946: LD_VAR 0 14
15950: ARRAY
15951: PUSH
15952: LD_INT 4
15954: EQUAL
15955: PUSH
15956: LD_VAR 0 10
15960: PUSH
15961: LD_VAR 0 14
15965: ARRAY
15966: PUSH
15967: LD_INT 5
15969: EQUAL
15970: OR
15971: PUSH
15972: LD_VAR 0 10
15976: PUSH
15977: LD_VAR 0 14
15981: ARRAY
15982: PUSH
15983: LD_INT 9
15985: EQUAL
15986: OR
15987: PUSH
15988: LD_VAR 0 10
15992: PUSH
15993: LD_VAR 0 14
15997: ARRAY
15998: PUSH
15999: LD_INT 11
16001: EQUAL
16002: OR
16003: PUSH
16004: LD_VAR 0 10
16008: PUSH
16009: LD_VAR 0 14
16013: ARRAY
16014: PUSH
16015: LD_INT 7
16017: EQUAL
16018: OR
16019: IFFALSE 16068
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16021: LD_ADDR_VAR 0 19
16025: PUSH
16026: LD_INT 2
16028: PUSH
16029: LD_INT 3
16031: PUSH
16032: LD_INT 4
16034: PUSH
16035: LD_INT 5
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16044: LD_ADDR_OWVAR 37
16048: PUSH
16049: LD_VAR 0 19
16053: PUSH
16054: LD_INT 1
16056: PPUSH
16057: LD_VAR 0 19
16061: PPUSH
16062: CALL_OW 12
16066: ARRAY
16067: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16068: LD_VAR 0 10
16072: PUSH
16073: LD_VAR 0 14
16077: ARRAY
16078: PUSH
16079: LD_INT 8
16081: EQUAL
16082: PUSH
16083: LD_VAR 0 10
16087: PUSH
16088: LD_VAR 0 14
16092: ARRAY
16093: PUSH
16094: LD_INT 6
16096: EQUAL
16097: OR
16098: PUSH
16099: LD_VAR 0 10
16103: PUSH
16104: LD_VAR 0 14
16108: ARRAY
16109: PUSH
16110: LD_INT 10
16112: EQUAL
16113: OR
16114: IFFALSE 16155
// begin amChassisTab = [ 4 , 5 ] ;
16116: LD_ADDR_VAR 0 19
16120: PUSH
16121: LD_INT 4
16123: PUSH
16124: LD_INT 5
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16131: LD_ADDR_OWVAR 37
16135: PUSH
16136: LD_VAR 0 19
16140: PUSH
16141: LD_INT 1
16143: PPUSH
16144: LD_VAR 0 19
16148: PPUSH
16149: CALL_OW 12
16153: ARRAY
16154: ST_TO_ADDR
// end ; end ;
16155: GO 15855
16157: POP
16158: POP
// veh = CreateVehicle ;
16159: LD_ADDR_VAR 0 16
16163: PUSH
16164: CALL_OW 45
16168: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16169: LD_VAR 0 16
16173: PPUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: LD_INT 0
16181: PPUSH
16182: CALL_OW 49
// if vc_control = 1 then
16186: LD_OWVAR 38
16190: PUSH
16191: LD_INT 1
16193: EQUAL
16194: IFFALSE 16251
// begin hc_gallery =  ;
16196: LD_ADDR_OWVAR 33
16200: PUSH
16201: LD_STRING 
16203: ST_TO_ADDR
// hc_name =  ;
16204: LD_ADDR_OWVAR 26
16208: PUSH
16209: LD_STRING 
16211: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16212: LD_INT 0
16214: PPUSH
16215: LD_INT 3
16217: PPUSH
16218: LD_VAR 0 4
16222: PPUSH
16223: CALL_OW 380
// un = CreateHuman ;
16227: LD_ADDR_VAR 0 15
16231: PUSH
16232: CALL_OW 44
16236: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16237: LD_VAR 0 15
16241: PPUSH
16242: LD_VAR 0 16
16246: PPUSH
16247: CALL_OW 52
// end ; i = i + 1 ;
16251: LD_ADDR_VAR 0 13
16255: PUSH
16256: LD_VAR 0 13
16260: PUSH
16261: LD_INT 1
16263: PLUS
16264: ST_TO_ADDR
// end ; if nation = 2 then
16265: LD_VAR 0 5
16269: PUSH
16270: LD_INT 2
16272: EQUAL
16273: IFFALSE 16695
// begin uc_side = side ;
16275: LD_ADDR_OWVAR 20
16279: PUSH
16280: LD_VAR 0 2
16284: ST_TO_ADDR
// uc_nation = nation ;
16285: LD_ADDR_OWVAR 21
16289: PUSH
16290: LD_VAR 0 5
16294: ST_TO_ADDR
// vc_engine = vehengine ;
16295: LD_ADDR_OWVAR 39
16299: PUSH
16300: LD_VAR 0 6
16304: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16305: LD_ADDR_OWVAR 38
16309: PUSH
16310: LD_VAR 0 7
16314: PUSH
16315: LD_INT 1
16317: PPUSH
16318: LD_VAR 0 7
16322: PPUSH
16323: CALL_OW 12
16327: ARRAY
16328: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16329: LD_ADDR_OWVAR 40
16333: PUSH
16334: LD_VAR 0 9
16338: PUSH
16339: LD_INT 1
16341: PPUSH
16342: LD_VAR 0 9
16346: PPUSH
16347: CALL_OW 12
16351: ARRAY
16352: ST_TO_ADDR
// for j = 1 to ARWeapons do
16353: LD_ADDR_VAR 0 14
16357: PUSH
16358: DOUBLE
16359: LD_INT 1
16361: DEC
16362: ST_TO_ADDR
16363: LD_VAR 0 9
16367: PUSH
16368: FOR_TO
16369: IFFALSE 16587
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16371: LD_VAR 0 9
16375: PUSH
16376: LD_VAR 0 14
16380: ARRAY
16381: PUSH
16382: LD_INT 24
16384: EQUAL
16385: PUSH
16386: LD_VAR 0 9
16390: PUSH
16391: LD_VAR 0 14
16395: ARRAY
16396: PUSH
16397: LD_INT 22
16399: EQUAL
16400: OR
16401: PUSH
16402: LD_VAR 0 9
16406: PUSH
16407: LD_VAR 0 14
16411: ARRAY
16412: PUSH
16413: LD_INT 23
16415: EQUAL
16416: OR
16417: PUSH
16418: LD_VAR 0 9
16422: PUSH
16423: LD_VAR 0 14
16427: ARRAY
16428: PUSH
16429: LD_INT 30
16431: EQUAL
16432: OR
16433: IFFALSE 16470
// begin arChassisTab = [ 14 ] ;
16435: LD_ADDR_VAR 0 18
16439: PUSH
16440: LD_INT 14
16442: PUSH
16443: EMPTY
16444: LIST
16445: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16446: LD_ADDR_OWVAR 37
16450: PUSH
16451: LD_VAR 0 18
16455: PUSH
16456: LD_INT 1
16458: PPUSH
16459: LD_VAR 0 18
16463: PPUSH
16464: CALL_OW 12
16468: ARRAY
16469: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16470: LD_VAR 0 9
16474: PUSH
16475: LD_VAR 0 14
16479: ARRAY
16480: PUSH
16481: LD_INT 29
16483: EQUAL
16484: PUSH
16485: LD_VAR 0 9
16489: PUSH
16490: LD_VAR 0 14
16494: ARRAY
16495: PUSH
16496: LD_INT 28
16498: EQUAL
16499: OR
16500: PUSH
16501: LD_VAR 0 9
16505: PUSH
16506: LD_VAR 0 14
16510: ARRAY
16511: PUSH
16512: LD_INT 27
16514: EQUAL
16515: OR
16516: PUSH
16517: LD_VAR 0 9
16521: PUSH
16522: LD_VAR 0 14
16526: ARRAY
16527: PUSH
16528: LD_INT 26
16530: EQUAL
16531: OR
16532: PUSH
16533: LD_VAR 0 9
16537: PUSH
16538: LD_VAR 0 14
16542: ARRAY
16543: PUSH
16544: LD_INT 25
16546: EQUAL
16547: OR
16548: IFFALSE 16585
// begin arChassisTab = [ 14 ] ;
16550: LD_ADDR_VAR 0 18
16554: PUSH
16555: LD_INT 14
16557: PUSH
16558: EMPTY
16559: LIST
16560: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16561: LD_ADDR_OWVAR 37
16565: PUSH
16566: LD_VAR 0 18
16570: PUSH
16571: LD_INT 1
16573: PPUSH
16574: LD_VAR 0 18
16578: PPUSH
16579: CALL_OW 12
16583: ARRAY
16584: ST_TO_ADDR
// end ; end ;
16585: GO 16368
16587: POP
16588: POP
// veh = CreateVehicle ;
16589: LD_ADDR_VAR 0 16
16593: PUSH
16594: CALL_OW 45
16598: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16599: LD_VAR 0 16
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_INT 0
16611: PPUSH
16612: CALL_OW 49
// if vc_control = 1 then
16616: LD_OWVAR 38
16620: PUSH
16621: LD_INT 1
16623: EQUAL
16624: IFFALSE 16681
// begin hc_gallery =  ;
16626: LD_ADDR_OWVAR 33
16630: PUSH
16631: LD_STRING 
16633: ST_TO_ADDR
// hc_name =  ;
16634: LD_ADDR_OWVAR 26
16638: PUSH
16639: LD_STRING 
16641: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16642: LD_INT 0
16644: PPUSH
16645: LD_INT 3
16647: PPUSH
16648: LD_VAR 0 4
16652: PPUSH
16653: CALL_OW 380
// un = CreateHuman ;
16657: LD_ADDR_VAR 0 15
16661: PUSH
16662: CALL_OW 44
16666: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16667: LD_VAR 0 15
16671: PPUSH
16672: LD_VAR 0 16
16676: PPUSH
16677: CALL_OW 52
// end ; i = i + 1 ;
16681: LD_ADDR_VAR 0 13
16685: PUSH
16686: LD_VAR 0 13
16690: PUSH
16691: LD_INT 1
16693: PLUS
16694: ST_TO_ADDR
// end ; if nation = 3 then
16695: LD_VAR 0 5
16699: PUSH
16700: LD_INT 3
16702: EQUAL
16703: IFFALSE 17109
// begin uc_side = side ;
16705: LD_ADDR_OWVAR 20
16709: PUSH
16710: LD_VAR 0 2
16714: ST_TO_ADDR
// uc_nation = nation ;
16715: LD_ADDR_OWVAR 21
16719: PUSH
16720: LD_VAR 0 5
16724: ST_TO_ADDR
// vc_engine = vehengine ;
16725: LD_ADDR_OWVAR 39
16729: PUSH
16730: LD_VAR 0 6
16734: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16735: LD_ADDR_OWVAR 38
16739: PUSH
16740: LD_VAR 0 7
16744: PUSH
16745: LD_INT 1
16747: PPUSH
16748: LD_VAR 0 7
16752: PPUSH
16753: CALL_OW 12
16757: ARRAY
16758: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16759: LD_ADDR_OWVAR 40
16763: PUSH
16764: LD_VAR 0 8
16768: PUSH
16769: LD_INT 1
16771: PPUSH
16772: LD_VAR 0 8
16776: PPUSH
16777: CALL_OW 12
16781: ARRAY
16782: ST_TO_ADDR
// for j = 1 to RuWeapons do
16783: LD_ADDR_VAR 0 14
16787: PUSH
16788: DOUBLE
16789: LD_INT 1
16791: DEC
16792: ST_TO_ADDR
16793: LD_VAR 0 8
16797: PUSH
16798: FOR_TO
16799: IFFALSE 17001
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16801: LD_VAR 0 8
16805: PUSH
16806: LD_VAR 0 14
16810: ARRAY
16811: PUSH
16812: LD_INT 42
16814: EQUAL
16815: PUSH
16816: LD_VAR 0 8
16820: PUSH
16821: LD_VAR 0 14
16825: ARRAY
16826: PUSH
16827: LD_INT 43
16829: EQUAL
16830: OR
16831: PUSH
16832: LD_VAR 0 8
16836: PUSH
16837: LD_VAR 0 14
16841: ARRAY
16842: PUSH
16843: LD_INT 44
16845: EQUAL
16846: OR
16847: PUSH
16848: LD_VAR 0 8
16852: PUSH
16853: LD_VAR 0 14
16857: ARRAY
16858: PUSH
16859: LD_INT 45
16861: EQUAL
16862: OR
16863: PUSH
16864: LD_VAR 0 8
16868: PUSH
16869: LD_VAR 0 14
16873: ARRAY
16874: PUSH
16875: LD_INT 49
16877: EQUAL
16878: OR
16879: IFFALSE 16928
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16881: LD_ADDR_VAR 0 17
16885: PUSH
16886: LD_INT 21
16888: PUSH
16889: LD_INT 22
16891: PUSH
16892: LD_INT 23
16894: PUSH
16895: LD_INT 24
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16904: LD_ADDR_OWVAR 37
16908: PUSH
16909: LD_VAR 0 17
16913: PUSH
16914: LD_INT 1
16916: PPUSH
16917: LD_VAR 0 17
16921: PPUSH
16922: CALL_OW 12
16926: ARRAY
16927: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16928: LD_VAR 0 8
16932: PUSH
16933: LD_VAR 0 14
16937: ARRAY
16938: PUSH
16939: LD_INT 46
16941: EQUAL
16942: PUSH
16943: LD_VAR 0 8
16947: PUSH
16948: LD_VAR 0 14
16952: ARRAY
16953: PUSH
16954: LD_INT 47
16956: EQUAL
16957: OR
16958: IFFALSE 16999
// begin ruChassisTab = [ 23 , 24 ] ;
16960: LD_ADDR_VAR 0 17
16964: PUSH
16965: LD_INT 23
16967: PUSH
16968: LD_INT 24
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16975: LD_ADDR_OWVAR 37
16979: PUSH
16980: LD_VAR 0 17
16984: PUSH
16985: LD_INT 1
16987: PPUSH
16988: LD_VAR 0 17
16992: PPUSH
16993: CALL_OW 12
16997: ARRAY
16998: ST_TO_ADDR
// end ; end ;
16999: GO 16798
17001: POP
17002: POP
// veh = CreateVehicle ;
17003: LD_ADDR_VAR 0 16
17007: PUSH
17008: CALL_OW 45
17012: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17013: LD_VAR 0 16
17017: PPUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: LD_INT 0
17025: PPUSH
17026: CALL_OW 49
// if vc_control = 1 then
17030: LD_OWVAR 38
17034: PUSH
17035: LD_INT 1
17037: EQUAL
17038: IFFALSE 17095
// begin hc_gallery =  ;
17040: LD_ADDR_OWVAR 33
17044: PUSH
17045: LD_STRING 
17047: ST_TO_ADDR
// hc_name =  ;
17048: LD_ADDR_OWVAR 26
17052: PUSH
17053: LD_STRING 
17055: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17056: LD_INT 0
17058: PPUSH
17059: LD_INT 3
17061: PPUSH
17062: LD_VAR 0 4
17066: PPUSH
17067: CALL_OW 380
// un = CreateHuman ;
17071: LD_ADDR_VAR 0 15
17075: PUSH
17076: CALL_OW 44
17080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17081: LD_VAR 0 15
17085: PPUSH
17086: LD_VAR 0 16
17090: PPUSH
17091: CALL_OW 52
// end ; i = i + 1 ;
17095: LD_ADDR_VAR 0 13
17099: PUSH
17100: LD_VAR 0 13
17104: PUSH
17105: LD_INT 1
17107: PLUS
17108: ST_TO_ADDR
// end ; until i = vehCount ;
17109: LD_VAR 0 13
17113: PUSH
17114: LD_VAR 0 3
17118: EQUAL
17119: IFFALSE 15745
// repeat wait ( 0 0$1 ) ;
17121: LD_INT 35
17123: PPUSH
17124: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17128: LD_ADDR_VAR 0 20
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_VAR 0 2
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 21
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 24
17157: PUSH
17158: LD_INT 650
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: PPUSH
17170: CALL_OW 69
17174: ST_TO_ADDR
// if vehicleOK_list > 0 then
17175: LD_VAR 0 20
17179: PUSH
17180: LD_INT 0
17182: GREATER
17183: IFFALSE 17374
// begin for i in vehicleOK_list do
17185: LD_ADDR_VAR 0 13
17189: PUSH
17190: LD_VAR 0 20
17194: PUSH
17195: FOR_IN
17196: IFFALSE 17372
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17198: LD_ADDR_VAR 0 21
17202: PUSH
17203: LD_INT 22
17205: PUSH
17206: LD_VAR 0 11
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: PPUSH
17220: LD_VAR 0 13
17224: PPUSH
17225: CALL_OW 74
17229: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17230: LD_ADDR_VAR 0 22
17234: PUSH
17235: LD_INT 22
17237: PUSH
17238: LD_VAR 0 11
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 59
17252: PUSH
17253: EMPTY
17254: LIST
17255: PUSH
17256: LD_INT 21
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 21
17268: PUSH
17269: LD_INT 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: PPUSH
17294: LD_VAR 0 13
17298: PPUSH
17299: CALL_OW 74
17303: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17304: LD_VAR 0 13
17308: PPUSH
17309: LD_VAR 0 21
17313: PPUSH
17314: CALL_OW 296
17318: PUSH
17319: LD_INT 8
17321: PLUS
17322: PUSH
17323: LD_VAR 0 13
17327: PPUSH
17328: LD_VAR 0 22
17332: PPUSH
17333: CALL_OW 296
17337: LESS
17338: IFFALSE 17356
// begin ComAttackUnit ( i , target1 ) ;
17340: LD_VAR 0 13
17344: PPUSH
17345: LD_VAR 0 21
17349: PPUSH
17350: CALL_OW 115
// end else
17354: GO 17370
// begin ComAttackUnit ( i , target2 ) ;
17356: LD_VAR 0 13
17360: PPUSH
17361: LD_VAR 0 22
17365: PPUSH
17366: CALL_OW 115
// end ; end ;
17370: GO 17195
17372: POP
17373: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17374: LD_INT 22
17376: PUSH
17377: LD_VAR 0 2
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 21
17388: PUSH
17389: LD_INT 2
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: PUSH
17405: LD_INT 0
17407: EQUAL
17408: IFFALSE 17121
// end ;
17410: LD_VAR 0 12
17414: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17415: LD_INT 0
17417: PPUSH
17418: PPUSH
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
// for i = 1 to soldierCount do
17428: LD_ADDR_VAR 0 13
17432: PUSH
17433: DOUBLE
17434: LD_INT 1
17436: DEC
17437: ST_TO_ADDR
17438: LD_VAR 0 3
17442: PUSH
17443: FOR_TO
17444: IFFALSE 17526
// begin uc_side = side ;
17446: LD_ADDR_OWVAR 20
17450: PUSH
17451: LD_VAR 0 1
17455: ST_TO_ADDR
// uc_nation = nation ;
17456: LD_ADDR_OWVAR 21
17460: PUSH
17461: LD_VAR 0 2
17465: ST_TO_ADDR
// hc_name =  ;
17466: LD_ADDR_OWVAR 26
17470: PUSH
17471: LD_STRING 
17473: ST_TO_ADDR
// hc_gallery =  ;
17474: LD_ADDR_OWVAR 33
17478: PUSH
17479: LD_STRING 
17481: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17482: LD_INT 0
17484: PPUSH
17485: LD_INT 1
17487: PPUSH
17488: LD_VAR 0 8
17492: PPUSH
17493: CALL_OW 380
// un = CreateHuman ;
17497: LD_ADDR_VAR 0 15
17501: PUSH
17502: CALL_OW 44
17506: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17507: LD_VAR 0 15
17511: PPUSH
17512: LD_VAR 0 9
17516: PPUSH
17517: LD_INT 0
17519: PPUSH
17520: CALL_OW 49
// end ;
17524: GO 17443
17526: POP
17527: POP
// for i = 1 to sniperCount do
17528: LD_ADDR_VAR 0 13
17532: PUSH
17533: DOUBLE
17534: LD_INT 1
17536: DEC
17537: ST_TO_ADDR
17538: LD_VAR 0 4
17542: PUSH
17543: FOR_TO
17544: IFFALSE 17626
// begin uc_side = side ;
17546: LD_ADDR_OWVAR 20
17550: PUSH
17551: LD_VAR 0 1
17555: ST_TO_ADDR
// uc_nation = nation ;
17556: LD_ADDR_OWVAR 21
17560: PUSH
17561: LD_VAR 0 2
17565: ST_TO_ADDR
// hc_name =  ;
17566: LD_ADDR_OWVAR 26
17570: PUSH
17571: LD_STRING 
17573: ST_TO_ADDR
// hc_gallery =  ;
17574: LD_ADDR_OWVAR 33
17578: PUSH
17579: LD_STRING 
17581: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17582: LD_INT 0
17584: PPUSH
17585: LD_INT 5
17587: PPUSH
17588: LD_VAR 0 8
17592: PPUSH
17593: CALL_OW 380
// un = CreateHuman ;
17597: LD_ADDR_VAR 0 15
17601: PUSH
17602: CALL_OW 44
17606: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17607: LD_VAR 0 15
17611: PPUSH
17612: LD_VAR 0 9
17616: PPUSH
17617: LD_INT 0
17619: PPUSH
17620: CALL_OW 49
// end ;
17624: GO 17543
17626: POP
17627: POP
// for i = 1 to bazookCount do
17628: LD_ADDR_VAR 0 13
17632: PUSH
17633: DOUBLE
17634: LD_INT 1
17636: DEC
17637: ST_TO_ADDR
17638: LD_VAR 0 5
17642: PUSH
17643: FOR_TO
17644: IFFALSE 17726
// begin uc_side = side ;
17646: LD_ADDR_OWVAR 20
17650: PUSH
17651: LD_VAR 0 1
17655: ST_TO_ADDR
// uc_nation = nation ;
17656: LD_ADDR_OWVAR 21
17660: PUSH
17661: LD_VAR 0 2
17665: ST_TO_ADDR
// hc_name =  ;
17666: LD_ADDR_OWVAR 26
17670: PUSH
17671: LD_STRING 
17673: ST_TO_ADDR
// hc_gallery =  ;
17674: LD_ADDR_OWVAR 33
17678: PUSH
17679: LD_STRING 
17681: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17682: LD_INT 0
17684: PPUSH
17685: LD_INT 9
17687: PPUSH
17688: LD_VAR 0 8
17692: PPUSH
17693: CALL_OW 380
// un = CreateHuman ;
17697: LD_ADDR_VAR 0 15
17701: PUSH
17702: CALL_OW 44
17706: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17707: LD_VAR 0 15
17711: PPUSH
17712: LD_VAR 0 9
17716: PPUSH
17717: LD_INT 0
17719: PPUSH
17720: CALL_OW 49
// end ;
17724: GO 17643
17726: POP
17727: POP
// for i = 1 to mortalCount do
17728: LD_ADDR_VAR 0 13
17732: PUSH
17733: DOUBLE
17734: LD_INT 1
17736: DEC
17737: ST_TO_ADDR
17738: LD_VAR 0 6
17742: PUSH
17743: FOR_TO
17744: IFFALSE 17826
// begin uc_side = side ;
17746: LD_ADDR_OWVAR 20
17750: PUSH
17751: LD_VAR 0 1
17755: ST_TO_ADDR
// uc_nation = nation ;
17756: LD_ADDR_OWVAR 21
17760: PUSH
17761: LD_VAR 0 2
17765: ST_TO_ADDR
// hc_name =  ;
17766: LD_ADDR_OWVAR 26
17770: PUSH
17771: LD_STRING 
17773: ST_TO_ADDR
// hc_gallery =  ;
17774: LD_ADDR_OWVAR 33
17778: PUSH
17779: LD_STRING 
17781: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17782: LD_INT 0
17784: PPUSH
17785: LD_INT 8
17787: PPUSH
17788: LD_VAR 0 8
17792: PPUSH
17793: CALL_OW 380
// un = CreateHuman ;
17797: LD_ADDR_VAR 0 15
17801: PUSH
17802: CALL_OW 44
17806: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17807: LD_VAR 0 15
17811: PPUSH
17812: LD_VAR 0 9
17816: PPUSH
17817: LD_INT 0
17819: PPUSH
17820: CALL_OW 49
// end ;
17824: GO 17743
17826: POP
17827: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17828: LD_ADDR_VAR 0 18
17832: PUSH
17833: LD_INT 22
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 25
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 25
17860: PUSH
17861: LD_INT 5
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 25
17870: PUSH
17871: LD_INT 8
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 25
17880: PUSH
17881: LD_INT 9
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PPUSH
17899: CALL_OW 69
17903: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17904: LD_ADDR_VAR 0 17
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_VAR 0 1
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 25
17923: PUSH
17924: LD_INT 4
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 69
17939: ST_TO_ADDR
// for i in medic_list do
17940: LD_ADDR_VAR 0 13
17944: PUSH
17945: LD_VAR 0 17
17949: PUSH
17950: FOR_IN
17951: IFFALSE 17969
// ComMoveToArea ( i , healArea ) ;
17953: LD_VAR 0 13
17957: PPUSH
17958: LD_VAR 0 10
17962: PPUSH
17963: CALL_OW 113
17967: GO 17950
17969: POP
17970: POP
// repeat wait ( 0 0$1 ) ;
17971: LD_INT 35
17973: PPUSH
17974: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17978: LD_ADDR_VAR 0 16
17982: PUSH
17983: LD_INT 22
17985: PUSH
17986: LD_VAR 0 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: LD_INT 24
18003: PUSH
18004: LD_INT 550
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 24
18017: PUSH
18018: LD_INT 250
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18039: LD_ADDR_VAR 0 18
18043: PUSH
18044: LD_INT 22
18046: PUSH
18047: LD_VAR 0 1
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 2
18058: PUSH
18059: LD_INT 25
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 25
18071: PUSH
18072: LD_INT 5
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 25
18081: PUSH
18082: LD_INT 8
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 25
18091: PUSH
18092: LD_INT 9
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 24
18108: PUSH
18109: LD_INT 1000
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: PPUSH
18121: CALL_OW 69
18125: ST_TO_ADDR
// if medicCount > 0 then
18126: LD_VAR 0 7
18130: PUSH
18131: LD_INT 0
18133: GREATER
18134: IFFALSE 18208
// begin if damageUnit_list > 0 then
18136: LD_VAR 0 16
18140: PUSH
18141: LD_INT 0
18143: GREATER
18144: IFFALSE 18208
// begin for i in damageUnit_list do
18146: LD_ADDR_VAR 0 13
18150: PUSH
18151: LD_VAR 0 16
18155: PUSH
18156: FOR_IN
18157: IFFALSE 18206
// begin ComMoveToArea ( i , healArea ) ;
18159: LD_VAR 0 13
18163: PPUSH
18164: LD_VAR 0 10
18168: PPUSH
18169: CALL_OW 113
// for j in medic_list do
18173: LD_ADDR_VAR 0 14
18177: PUSH
18178: LD_VAR 0 17
18182: PUSH
18183: FOR_IN
18184: IFFALSE 18202
// AddComHeal ( j , i ) ;
18186: LD_VAR 0 14
18190: PPUSH
18191: LD_VAR 0 13
18195: PPUSH
18196: CALL_OW 188
18200: GO 18183
18202: POP
18203: POP
// end ;
18204: GO 18156
18206: POP
18207: POP
// end ; end ; for i in soldiersOK_list do
18208: LD_ADDR_VAR 0 13
18212: PUSH
18213: LD_VAR 0 18
18217: PUSH
18218: FOR_IN
18219: IFFALSE 18395
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18221: LD_ADDR_VAR 0 21
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_VAR 0 11
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PPUSH
18238: CALL_OW 69
18242: PPUSH
18243: LD_VAR 0 13
18247: PPUSH
18248: CALL_OW 74
18252: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18253: LD_ADDR_VAR 0 22
18257: PUSH
18258: LD_INT 22
18260: PUSH
18261: LD_VAR 0 11
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: LD_INT 59
18275: PUSH
18276: EMPTY
18277: LIST
18278: PUSH
18279: LD_INT 21
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 21
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: PPUSH
18317: LD_VAR 0 13
18321: PPUSH
18322: CALL_OW 74
18326: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18327: LD_VAR 0 13
18331: PPUSH
18332: LD_VAR 0 21
18336: PPUSH
18337: CALL_OW 296
18341: PUSH
18342: LD_INT 8
18344: PLUS
18345: PUSH
18346: LD_VAR 0 13
18350: PPUSH
18351: LD_VAR 0 22
18355: PPUSH
18356: CALL_OW 296
18360: LESS
18361: IFFALSE 18379
// begin ComAttackUnit ( i , target1 ) ;
18363: LD_VAR 0 13
18367: PPUSH
18368: LD_VAR 0 21
18372: PPUSH
18373: CALL_OW 115
// end else
18377: GO 18393
// begin ComAttackUnit ( i , target2 ) ;
18379: LD_VAR 0 13
18383: PPUSH
18384: LD_VAR 0 22
18388: PPUSH
18389: CALL_OW 115
// end ; end ;
18393: GO 18218
18395: POP
18396: POP
// for i in soldiersOK_list do
18397: LD_ADDR_VAR 0 13
18401: PUSH
18402: LD_VAR 0 18
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18584
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18410: LD_ADDR_VAR 0 21
18414: PUSH
18415: LD_INT 22
18417: PUSH
18418: LD_VAR 0 11
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 69
18431: PPUSH
18432: LD_VAR 0 13
18436: PPUSH
18437: CALL_OW 74
18441: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18442: LD_ADDR_VAR 0 22
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_VAR 0 11
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: LD_INT 59
18464: PUSH
18465: EMPTY
18466: LIST
18467: PUSH
18468: LD_INT 21
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: PPUSH
18501: CALL_OW 69
18505: PPUSH
18506: LD_VAR 0 13
18510: PPUSH
18511: CALL_OW 74
18515: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18516: LD_VAR 0 13
18520: PPUSH
18521: LD_VAR 0 21
18525: PPUSH
18526: CALL_OW 296
18530: PUSH
18531: LD_INT 8
18533: PLUS
18534: PUSH
18535: LD_VAR 0 13
18539: PPUSH
18540: LD_VAR 0 22
18544: PPUSH
18545: CALL_OW 296
18549: LESS
18550: IFFALSE 18568
// begin ComAttackUnit ( i , target1 ) ;
18552: LD_VAR 0 13
18556: PPUSH
18557: LD_VAR 0 21
18561: PPUSH
18562: CALL_OW 115
// end else
18566: GO 18582
// begin ComAttackUnit ( i , target2 ) ;
18568: LD_VAR 0 13
18572: PPUSH
18573: LD_VAR 0 22
18577: PPUSH
18578: CALL_OW 115
// end ; end ;
18582: GO 18407
18584: POP
18585: POP
// until soldiersOK_list = [ ] ;
18586: LD_VAR 0 18
18590: PUSH
18591: EMPTY
18592: EQUAL
18593: IFFALSE 17971
// end ;
18595: LD_VAR 0 12
18599: RET
// export function TameApemans ; var i , j ; begin
18600: LD_INT 0
18602: PPUSH
18603: PPUSH
18604: PPUSH
// repeat wait ( 0 0$1 ) ;
18605: LD_INT 35
18607: PPUSH
18608: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18612: LD_ADDR_VAR 0 2
18616: PUSH
18617: LD_INT 22
18619: PUSH
18620: LD_INT 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 25
18629: PUSH
18630: LD_INT 4
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PPUSH
18641: CALL_OW 69
18645: PUSH
18646: FOR_IN
18647: IFFALSE 18724
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18649: LD_ADDR_VAR 0 3
18653: PUSH
18654: LD_INT 5
18656: PPUSH
18657: LD_INT 22
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 25
18669: PUSH
18670: LD_INT 12
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PPUSH
18681: CALL_OW 70
18685: PUSH
18686: FOR_IN
18687: IFFALSE 18720
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18689: LD_VAR 0 2
18693: PPUSH
18694: LD_VAR 0 3
18698: PPUSH
18699: CALL_OW 250
18703: PPUSH
18704: LD_VAR 0 3
18708: PPUSH
18709: CALL_OW 251
18713: PPUSH
18714: CALL_OW 191
// end ;
18718: GO 18686
18720: POP
18721: POP
// end ;
18722: GO 18646
18724: POP
18725: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18726: LD_INT 22
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 25
18738: PUSH
18739: LD_INT 4
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PPUSH
18750: CALL_OW 69
18754: PUSH
18755: LD_INT 0
18757: EQUAL
18758: PUSH
18759: LD_INT 5
18761: PPUSH
18762: LD_INT 22
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 25
18774: PUSH
18775: LD_INT 12
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PPUSH
18786: CALL_OW 70
18790: PUSH
18791: LD_INT 0
18793: EQUAL
18794: OR
18795: IFFALSE 18605
// wait ( 0 0$30 ) ;
18797: LD_INT 1050
18799: PPUSH
18800: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18804: LD_ADDR_VAR 0 2
18808: PUSH
18809: LD_INT 22
18811: PUSH
18812: LD_INT 2
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 25
18821: PUSH
18822: LD_INT 12
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PPUSH
18833: CALL_OW 69
18837: PUSH
18838: FOR_IN
18839: IFFALSE 18903
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18841: LD_VAR 0 2
18845: PPUSH
18846: LD_EXP 43
18850: PPUSH
18851: CALL_OW 250
18855: PPUSH
18856: LD_EXP 43
18860: PPUSH
18861: CALL_OW 251
18865: PPUSH
18866: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18870: LD_VAR 0 2
18874: PPUSH
18875: LD_INT 16
18877: PUSH
18878: LD_INT 15
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: PPUSH
18888: LD_INT 2
18890: PPUSH
18891: CALL_OW 12
18895: ARRAY
18896: PPUSH
18897: CALL_OW 336
// end ;
18901: GO 18838
18903: POP
18904: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_INT 22
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 25
18922: PUSH
18923: LD_INT 4
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PPUSH
18934: CALL_OW 69
18938: PUSH
18939: FOR_IN
18940: IFFALSE 18986
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18942: LD_VAR 0 2
18946: PPUSH
18947: LD_INT 22
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 30
18959: PUSH
18960: LD_INT 8
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PPUSH
18971: CALL_OW 69
18975: PUSH
18976: LD_INT 1
18978: ARRAY
18979: PPUSH
18980: CALL_OW 120
18984: GO 18939
18986: POP
18987: POP
// end ;
18988: LD_VAR 0 1
18992: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18993: LD_INT 0
18995: PPUSH
18996: PPUSH
18997: PPUSH
18998: PPUSH
18999: PPUSH
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19004: LD_INT 22
19006: PUSH
19007: LD_VAR 0 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 21
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PPUSH
19030: CALL_OW 69
19034: PUSH
19035: LD_VAR 0 3
19039: LESSEQUAL
19040: IFFALSE 19184
// for i = 1 to vehCount do
19042: LD_ADDR_VAR 0 10
19046: PUSH
19047: DOUBLE
19048: LD_INT 1
19050: DEC
19051: ST_TO_ADDR
19052: LD_VAR 0 3
19056: PUSH
19057: FOR_TO
19058: IFFALSE 19182
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19060: LD_ADDR_VAR 0 12
19064: PUSH
19065: LD_VAR 0 5
19069: PUSH
19070: LD_INT 1
19072: PPUSH
19073: LD_VAR 0 5
19077: PPUSH
19078: CALL_OW 12
19082: ARRAY
19083: ST_TO_ADDR
// if randWeapon = 46 then
19084: LD_VAR 0 12
19088: PUSH
19089: LD_INT 46
19091: EQUAL
19092: IFFALSE 19137
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19094: LD_VAR 0 2
19098: PPUSH
19099: LD_INT 24
19101: PPUSH
19102: LD_VAR 0 6
19106: PPUSH
19107: LD_VAR 0 7
19111: PUSH
19112: LD_INT 1
19114: PPUSH
19115: LD_VAR 0 7
19119: PPUSH
19120: CALL_OW 12
19124: ARRAY
19125: PPUSH
19126: LD_VAR 0 12
19130: PPUSH
19131: CALL_OW 185
19135: GO 19180
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19137: LD_VAR 0 2
19141: PPUSH
19142: LD_VAR 0 8
19146: PPUSH
19147: LD_VAR 0 6
19151: PPUSH
19152: LD_VAR 0 7
19156: PUSH
19157: LD_INT 1
19159: PPUSH
19160: LD_VAR 0 7
19164: PPUSH
19165: CALL_OW 12
19169: ARRAY
19170: PPUSH
19171: LD_VAR 0 12
19175: PPUSH
19176: CALL_OW 185
// end ;
19180: GO 19057
19182: POP
19183: POP
// repeat wait ( 0 0$1 ) ;
19184: LD_INT 35
19186: PPUSH
19187: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19191: LD_INT 22
19193: PUSH
19194: LD_VAR 0 1
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 21
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 24
19215: PUSH
19216: LD_INT 250
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: PPUSH
19228: CALL_OW 69
19232: PUSH
19233: LD_VAR 0 3
19237: GREATEREQUAL
19238: IFFALSE 19184
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19240: LD_INT 22
19242: PUSH
19243: LD_VAR 0 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 21
19254: PUSH
19255: LD_INT 2
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 24
19264: PUSH
19265: LD_INT 250
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: PUSH
19282: LD_VAR 0 3
19286: GREATEREQUAL
19287: IFFALSE 19630
// begin repeat begin wait ( 0 0$1 ) ;
19289: LD_INT 35
19291: PPUSH
19292: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19296: LD_INT 22
19298: PUSH
19299: LD_VAR 0 1
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 21
19310: PUSH
19311: LD_INT 2
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 24
19320: PUSH
19321: LD_INT 651
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: PPUSH
19333: CALL_OW 69
19337: PUSH
19338: LD_INT 0
19340: GREATER
19341: IFFALSE 19569
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19343: LD_ADDR_VAR 0 10
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_VAR 0 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 2
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 24
19372: PUSH
19373: LD_INT 651
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PPUSH
19385: CALL_OW 69
19389: PUSH
19390: FOR_IN
19391: IFFALSE 19567
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19393: LD_ADDR_VAR 0 16
19397: PUSH
19398: LD_INT 22
19400: PUSH
19401: LD_VAR 0 4
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PPUSH
19410: CALL_OW 69
19414: PPUSH
19415: LD_VAR 0 10
19419: PPUSH
19420: CALL_OW 74
19424: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19425: LD_ADDR_VAR 0 17
19429: PUSH
19430: LD_INT 22
19432: PUSH
19433: LD_VAR 0 4
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 2
19444: PUSH
19445: LD_INT 59
19447: PUSH
19448: EMPTY
19449: LIST
19450: PUSH
19451: LD_INT 21
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 21
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: PPUSH
19489: LD_VAR 0 10
19493: PPUSH
19494: CALL_OW 74
19498: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19499: LD_VAR 0 10
19503: PPUSH
19504: LD_VAR 0 16
19508: PPUSH
19509: CALL_OW 296
19513: PUSH
19514: LD_INT 8
19516: PLUS
19517: PUSH
19518: LD_VAR 0 10
19522: PPUSH
19523: LD_VAR 0 17
19527: PPUSH
19528: CALL_OW 296
19532: LESS
19533: IFFALSE 19551
// begin ComAttackUnit ( i , target1 ) ;
19535: LD_VAR 0 10
19539: PPUSH
19540: LD_VAR 0 16
19544: PPUSH
19545: CALL_OW 115
// end else
19549: GO 19565
// begin ComAttackUnit ( i , target2 ) ;
19551: LD_VAR 0 10
19555: PPUSH
19556: LD_VAR 0 17
19560: PPUSH
19561: CALL_OW 115
// end ; end ;
19565: GO 19390
19567: POP
19568: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19569: LD_INT 22
19571: PUSH
19572: LD_VAR 0 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 21
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PPUSH
19595: CALL_OW 69
19599: PUSH
19600: LD_INT 0
19602: EQUAL
19603: PUSH
19604: LD_INT 22
19606: PUSH
19607: LD_VAR 0 4
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: PPUSH
19619: CALL_OW 69
19623: PUSH
19624: LD_INT 0
19626: EQUAL
19627: OR
19628: IFFALSE 19289
// end ; end ;
19630: LD_VAR 0 9
19634: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19635: LD_INT 0
19637: PPUSH
19638: PPUSH
19639: PPUSH
19640: PPUSH
// r := 100 ;
19641: LD_ADDR_VAR 0 5
19645: PUSH
19646: LD_INT 100
19648: ST_TO_ADDR
// x := 0 ;
19649: LD_ADDR_VAR 0 6
19653: PUSH
19654: LD_INT 0
19656: ST_TO_ADDR
// while ( x < n ) do
19657: LD_VAR 0 6
19661: PUSH
19662: LD_VAR 0 2
19666: LESS
19667: IFFALSE 19954
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19669: LD_ADDR_VAR 0 4
19673: PUSH
19674: DOUBLE
19675: LD_INT 1
19677: DEC
19678: ST_TO_ADDR
19679: LD_VAR 0 1
19683: PPUSH
19684: LD_INT 0
19686: PPUSH
19687: CALL_OW 517
19691: PUSH
19692: LD_INT 1
19694: ARRAY
19695: PUSH
19696: FOR_TO
19697: IFFALSE 19950
// begin if r > 50 then
19699: LD_VAR 0 5
19703: PUSH
19704: LD_INT 50
19706: GREATER
19707: IFFALSE 19926
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19709: LD_VAR 0 1
19713: PPUSH
19714: LD_INT 0
19716: PPUSH
19717: CALL_OW 517
19721: PUSH
19722: LD_INT 1
19724: ARRAY
19725: PUSH
19726: LD_VAR 0 4
19730: ARRAY
19731: PPUSH
19732: LD_VAR 0 1
19736: PPUSH
19737: LD_INT 0
19739: PPUSH
19740: CALL_OW 517
19744: PUSH
19745: LD_INT 2
19747: ARRAY
19748: PUSH
19749: LD_VAR 0 4
19753: ARRAY
19754: PPUSH
19755: CALL_OW 458
19759: NOT
19760: IFFALSE 19910
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_INT 0
19769: PPUSH
19770: CALL_OW 517
19774: PUSH
19775: LD_INT 1
19777: ARRAY
19778: PUSH
19779: LD_VAR 0 4
19783: ARRAY
19784: PPUSH
19785: LD_VAR 0 1
19789: PPUSH
19790: LD_INT 0
19792: PPUSH
19793: CALL_OW 517
19797: PUSH
19798: LD_INT 2
19800: ARRAY
19801: PUSH
19802: LD_VAR 0 4
19806: ARRAY
19807: PPUSH
19808: LD_INT 5
19810: PPUSH
19811: LD_INT 0
19813: PPUSH
19814: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19818: LD_ADDR_EXP 50
19822: PUSH
19823: LD_EXP 50
19827: PPUSH
19828: LD_INT 1
19830: PPUSH
19831: LD_VAR 0 1
19835: PPUSH
19836: LD_INT 0
19838: PPUSH
19839: CALL_OW 517
19843: PUSH
19844: LD_INT 1
19846: ARRAY
19847: PUSH
19848: LD_VAR 0 4
19852: ARRAY
19853: PUSH
19854: LD_VAR 0 1
19858: PPUSH
19859: LD_INT 0
19861: PPUSH
19862: CALL_OW 517
19866: PUSH
19867: LD_INT 2
19869: ARRAY
19870: PUSH
19871: LD_VAR 0 4
19875: ARRAY
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PPUSH
19881: CALL_OW 2
19885: ST_TO_ADDR
// r := 0 ;
19886: LD_ADDR_VAR 0 5
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
// x := x + 1 ;
19894: LD_ADDR_VAR 0 6
19898: PUSH
19899: LD_VAR 0 6
19903: PUSH
19904: LD_INT 1
19906: PLUS
19907: ST_TO_ADDR
// end else
19908: GO 19924
// r := r + 35 ;
19910: LD_ADDR_VAR 0 5
19914: PUSH
19915: LD_VAR 0 5
19919: PUSH
19920: LD_INT 35
19922: PLUS
19923: ST_TO_ADDR
// end else
19924: GO 19948
// r := r + rand ( 10 , 25 ) ;
19926: LD_ADDR_VAR 0 5
19930: PUSH
19931: LD_VAR 0 5
19935: PUSH
19936: LD_INT 10
19938: PPUSH
19939: LD_INT 25
19941: PPUSH
19942: CALL_OW 12
19946: PLUS
19947: ST_TO_ADDR
// end ;
19948: GO 19696
19950: POP
19951: POP
19952: GO 19657
// end ; end_of_file
19954: LD_VAR 0 3
19958: RET
// every 0 0$1 trigger russianAI = 1 do
19959: LD_EXP 39
19963: PUSH
19964: LD_INT 1
19966: EQUAL
19967: IFFALSE 20186
19969: GO 19971
19971: DISABLE
// begin enable ;
19972: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19973: LD_INT 3
19975: PPUSH
19976: LD_EXP 30
19980: PPUSH
19981: CALL 14597 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19985: LD_INT 3
19987: PPUSH
19988: LD_EXP 42
19992: PPUSH
19993: CALL 14957 0 2
// if ruPossition = 1 then
19997: LD_EXP 41
20001: PUSH
20002: LD_INT 1
20004: EQUAL
20005: IFFALSE 20060
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20007: LD_INT 3
20009: PPUSH
20010: LD_INT 13
20012: PPUSH
20013: LD_INT 10
20015: PPUSH
20016: LD_INT 22
20018: PUSH
20019: LD_INT 3
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 21
20028: PUSH
20029: LD_INT 3
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 30
20038: PUSH
20039: LD_INT 8
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: LIST
20050: PPUSH
20051: CALL_OW 69
20055: PPUSH
20056: CALL 15163 0 4
// if ruPossition = 2 then
20060: LD_EXP 41
20064: PUSH
20065: LD_INT 2
20067: EQUAL
20068: IFFALSE 20123
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20070: LD_INT 3
20072: PPUSH
20073: LD_INT 14
20075: PPUSH
20076: LD_INT 11
20078: PPUSH
20079: LD_INT 22
20081: PUSH
20082: LD_INT 3
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 21
20091: PUSH
20092: LD_INT 3
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 30
20101: PUSH
20102: LD_INT 8
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: PPUSH
20114: CALL_OW 69
20118: PPUSH
20119: CALL 15163 0 4
// if ruPossition = 3 then
20123: LD_EXP 41
20127: PUSH
20128: LD_INT 3
20130: EQUAL
20131: IFFALSE 20186
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20133: LD_INT 3
20135: PPUSH
20136: LD_INT 15
20138: PPUSH
20139: LD_INT 12
20141: PPUSH
20142: LD_INT 22
20144: PUSH
20145: LD_INT 3
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 3
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 30
20164: PUSH
20165: LD_INT 8
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: PPUSH
20177: CALL_OW 69
20181: PPUSH
20182: CALL 15163 0 4
// end ;
20186: END
// every 0 0$1 do
20187: GO 20189
20189: DISABLE
// begin enable ;
20190: ENABLE
// if ruPossition = 1 then
20191: LD_EXP 41
20195: PUSH
20196: LD_INT 1
20198: EQUAL
20199: IFFALSE 20211
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20201: LD_INT 3
20203: PPUSH
20204: LD_INT 10
20206: PPUSH
20207: CALL 14234 0 2
// if ruPossition = 2 then
20211: LD_EXP 41
20215: PUSH
20216: LD_INT 2
20218: EQUAL
20219: IFFALSE 20231
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20221: LD_INT 3
20223: PPUSH
20224: LD_INT 11
20226: PPUSH
20227: CALL 14234 0 2
// if ruPossition = 3 then
20231: LD_EXP 41
20235: PUSH
20236: LD_INT 3
20238: EQUAL
20239: IFFALSE 20251
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20241: LD_INT 3
20243: PPUSH
20244: LD_INT 12
20246: PPUSH
20247: CALL 14234 0 2
// IntBazooka ( 3 , 1 ) ;
20251: LD_INT 3
20253: PPUSH
20254: LD_INT 1
20256: PPUSH
20257: CALL 13033 0 2
// IntBazooka ( 6 , 1 ) ;
20261: LD_INT 6
20263: PPUSH
20264: LD_INT 1
20266: PPUSH
20267: CALL 13033 0 2
// end ;
20271: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20272: LD_EXP 39
20276: PUSH
20277: LD_INT 1
20279: EQUAL
20280: PUSH
20281: LD_EXP 35
20285: PPUSH
20286: CALL_OW 302
20290: AND
20291: PUSH
20292: LD_EXP 35
20296: PPUSH
20297: CALL_OW 255
20301: PUSH
20302: LD_INT 3
20304: EQUAL
20305: AND
20306: PUSH
20307: LD_INT 22
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 21
20319: PUSH
20320: LD_INT 2
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 33
20329: PUSH
20330: LD_INT 3
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: PPUSH
20342: CALL_OW 69
20346: PUSH
20347: LD_INT 0
20349: EQUAL
20350: AND
20351: IFFALSE 20559
20353: GO 20355
20355: DISABLE
// begin enable ;
20356: ENABLE
// if Difficulty = 1 then
20357: LD_OWVAR 67
20361: PUSH
20362: LD_INT 1
20364: EQUAL
20365: IFFALSE 20427
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20367: LD_INT 3
20369: PPUSH
20370: LD_EXP 35
20374: PPUSH
20375: LD_INT 5
20377: PPUSH
20378: LD_INT 8
20380: PPUSH
20381: CALL_OW 12
20385: PPUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_INT 43
20391: PUSH
20392: LD_INT 44
20394: PUSH
20395: LD_INT 45
20397: PUSH
20398: LD_INT 46
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: PPUSH
20407: LD_INT 1
20409: PPUSH
20410: LD_INT 1
20412: PUSH
20413: LD_INT 3
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PPUSH
20420: LD_INT 22
20422: PPUSH
20423: CALL 18993 0 8
// if Difficulty = 2 then
20427: LD_OWVAR 67
20431: PUSH
20432: LD_INT 2
20434: EQUAL
20435: IFFALSE 20493
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20437: LD_INT 3
20439: PPUSH
20440: LD_EXP 35
20444: PPUSH
20445: LD_INT 6
20447: PPUSH
20448: LD_INT 8
20450: PPUSH
20451: CALL_OW 12
20455: PPUSH
20456: LD_INT 1
20458: PPUSH
20459: LD_INT 44
20461: PUSH
20462: LD_INT 45
20464: PUSH
20465: LD_INT 46
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: PPUSH
20473: LD_INT 1
20475: PPUSH
20476: LD_INT 1
20478: PUSH
20479: LD_INT 3
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PPUSH
20486: LD_INT 22
20488: PPUSH
20489: CALL 18993 0 8
// if Difficulty = 3 then
20493: LD_OWVAR 67
20497: PUSH
20498: LD_INT 3
20500: EQUAL
20501: IFFALSE 20559
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20503: LD_INT 3
20505: PPUSH
20506: LD_EXP 35
20510: PPUSH
20511: LD_INT 7
20513: PPUSH
20514: LD_INT 8
20516: PPUSH
20517: CALL_OW 12
20521: PPUSH
20522: LD_INT 1
20524: PPUSH
20525: LD_INT 44
20527: PUSH
20528: LD_INT 45
20530: PUSH
20531: LD_INT 46
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: PPUSH
20539: LD_INT 1
20541: PPUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 3
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PPUSH
20552: LD_INT 22
20554: PPUSH
20555: CALL 18993 0 8
// end ;
20559: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20560: LD_EXP 50
20564: PUSH
20565: LD_EXP 49
20569: AND
20570: IFFALSE 20691
20572: GO 20574
20574: DISABLE
20575: LD_INT 0
20577: PPUSH
// begin enable ;
20578: ENABLE
// for i in arabianMines do
20579: LD_ADDR_VAR 0 1
20583: PUSH
20584: LD_EXP 50
20588: PUSH
20589: FOR_IN
20590: IFFALSE 20689
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20592: LD_INT 22
20594: PUSH
20595: LD_INT 1
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 92
20604: PUSH
20605: LD_VAR 0 1
20609: PUSH
20610: LD_INT 1
20612: ARRAY
20613: PUSH
20614: LD_VAR 0 1
20618: PUSH
20619: LD_INT 2
20621: ARRAY
20622: PUSH
20623: LD_INT 3
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PPUSH
20636: CALL_OW 69
20640: IFFALSE 20687
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20642: LD_VAR 0 1
20646: PUSH
20647: LD_INT 1
20649: ARRAY
20650: PPUSH
20651: LD_VAR 0 1
20655: PUSH
20656: LD_INT 2
20658: ARRAY
20659: PPUSH
20660: LD_INT 5
20662: PPUSH
20663: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20667: LD_ADDR_EXP 50
20671: PUSH
20672: LD_EXP 50
20676: PPUSH
20677: LD_VAR 0 1
20681: PPUSH
20682: CALL_OW 3
20686: ST_TO_ADDR
// end ; end ;
20687: GO 20589
20689: POP
20690: POP
// end ; end_of_file
20691: PPOPN 1
20693: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 255
20703: PUSH
20704: LD_INT 4
20706: EQUAL
20707: IFFALSE 20721
// SetBName ( building , epsilon ) ;
20709: LD_VAR 0 1
20713: PPUSH
20714: LD_STRING epsilon
20716: PPUSH
20717: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 255
20730: PUSH
20731: LD_INT 1
20733: EQUAL
20734: PUSH
20735: LD_VAR 0 1
20739: PPUSH
20740: CALL_OW 266
20744: PUSH
20745: LD_INT 0
20747: EQUAL
20748: AND
20749: IFFALSE 20763
// SetBName ( building , epsilon ) ;
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_STRING epsilon
20758: PPUSH
20759: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 255
20772: PUSH
20773: LD_INT 3
20775: EQUAL
20776: PUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 266
20786: PUSH
20787: LD_INT 0
20789: EQUAL
20790: AND
20791: IFFALSE 20805
// SetBName ( building , chuikov ) ;
20793: LD_VAR 0 1
20797: PPUSH
20798: LD_STRING chuikov
20800: PPUSH
20801: CALL_OW 500
// if GetSide ( building ) = 2 then
20805: LD_VAR 0 1
20809: PPUSH
20810: CALL_OW 255
20814: PUSH
20815: LD_INT 2
20817: EQUAL
20818: IFFALSE 20874
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20820: LD_VAR 0 1
20824: PPUSH
20825: CALL_OW 266
20829: PUSH
20830: LD_INT 6
20832: EQUAL
20833: PUSH
20834: LD_VAR 0 1
20838: PPUSH
20839: CALL_OW 266
20843: PUSH
20844: LD_INT 9
20846: EQUAL
20847: OR
20848: IFFALSE 20874
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20850: LD_VAR 0 1
20854: PPUSH
20855: LD_INT 10
20857: PPUSH
20858: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20862: LD_VAR 0 1
20866: PPUSH
20867: LD_INT 11
20869: PPUSH
20870: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 255
20883: PUSH
20884: LD_INT 3
20886: EQUAL
20887: IFFALSE 20913
// begin if GetBType ( building ) = 2 then
20889: LD_VAR 0 1
20893: PPUSH
20894: CALL_OW 266
20898: PUSH
20899: LD_INT 2
20901: EQUAL
20902: IFFALSE 20913
// AddComUpgrade ( building ) ;
20904: LD_VAR 0 1
20908: PPUSH
20909: CALL_OW 206
// end ; end ;
20913: PPOPN 2
20915: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20916: LD_INT 0
20918: PPUSH
20919: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20920: LD_VAR 0 1
20924: PUSH
20925: LD_INT 22
20927: PUSH
20928: LD_INT 3
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 23
20937: PUSH
20938: LD_INT 3
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 21
20947: PUSH
20948: LD_INT 2
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: PPUSH
20960: CALL_OW 69
20964: IN
20965: PUSH
20966: LD_EXP 58
20970: NOT
20971: AND
20972: IFFALSE 21003
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20974: LD_ADDR_EXP 58
20978: PUSH
20979: LD_VAR 0 1
20983: PPUSH
20984: CALL_OW 250
20988: PUSH
20989: LD_VAR 0 1
20993: PPUSH
20994: CALL_OW 251
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: ST_TO_ADDR
// end ;
21003: PPOPN 3
21005: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21006: LD_VAR 0 2
21010: PPUSH
21011: CALL_OW 255
21015: PUSH
21016: LD_INT 3
21018: EQUAL
21019: PUSH
21020: LD_EXP 35
21024: PPUSH
21025: CALL_OW 255
21029: PUSH
21030: LD_INT 3
21032: EQUAL
21033: AND
21034: PUSH
21035: LD_EXP 35
21039: PPUSH
21040: CALL_OW 302
21044: AND
21045: IFFALSE 21061
// ComEnterUnit ( human , ruFab ) ;
21047: LD_VAR 0 2
21051: PPUSH
21052: LD_EXP 35
21056: PPUSH
21057: CALL_OW 120
// end ;
21061: PPOPN 2
21063: END
// on BuildingComplete ( building ) do var i ;
21064: LD_INT 0
21066: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21067: LD_VAR 0 1
21071: PPUSH
21072: CALL_OW 255
21076: PUSH
21077: LD_INT 1
21079: EQUAL
21080: PUSH
21081: LD_EXP 61
21085: PUSH
21086: LD_INT 0
21088: EQUAL
21089: AND
21090: IFFALSE 21292
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 266
21101: PUSH
21102: LD_INT 26
21104: EQUAL
21105: PUSH
21106: LD_VAR 0 1
21110: PPUSH
21111: CALL_OW 266
21115: PUSH
21116: LD_INT 27
21118: EQUAL
21119: OR
21120: PUSH
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 266
21130: PUSH
21131: LD_INT 28
21133: EQUAL
21134: OR
21135: IFFALSE 21292
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21137: LD_INT 22
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: PUSH
21150: LD_INT 30
21152: PUSH
21153: LD_INT 7
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 30
21162: PUSH
21163: LD_INT 8
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PPUSH
21179: CALL_OW 69
21183: PUSH
21184: LD_INT 0
21186: GREATER
21187: IFFALSE 21292
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21189: LD_ADDR_VAR 0 2
21193: PUSH
21194: LD_INT 22
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 2
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 7
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 30
21219: PUSH
21220: LD_INT 8
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PPUSH
21236: CALL_OW 69
21240: PUSH
21241: FOR_IN
21242: IFFALSE 21290
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21244: LD_VAR 0 2
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL_OW 268
21256: PUSH
21257: LD_INT 11
21259: EQUAL
21260: PUSH
21261: LD_VAR 0 2
21265: PPUSH
21266: LD_INT 2
21268: PPUSH
21269: CALL_OW 268
21273: PUSH
21274: LD_INT 11
21276: EQUAL
21277: OR
21278: IFFALSE 21288
// eventVar1 = 1 ;
21280: LD_ADDR_EXP 61
21284: PUSH
21285: LD_INT 1
21287: ST_TO_ADDR
21288: GO 21241
21290: POP
21291: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 255
21301: PUSH
21302: LD_INT 3
21304: EQUAL
21305: IFFALSE 21785
// begin if GetBType ( building ) = b_depot then
21307: LD_VAR 0 1
21311: PPUSH
21312: CALL_OW 266
21316: PUSH
21317: LD_INT 0
21319: EQUAL
21320: IFFALSE 21392
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 274
21331: PPUSH
21332: LD_INT 1
21334: PPUSH
21335: LD_INT 5000
21337: PPUSH
21338: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 274
21351: PPUSH
21352: LD_INT 2
21354: PPUSH
21355: LD_INT 5000
21357: PPUSH
21358: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 274
21371: PPUSH
21372: LD_INT 3
21374: PPUSH
21375: LD_INT 5000
21377: PPUSH
21378: CALL_OW 277
// ruDepot = building ;
21382: LD_ADDR_EXP 30
21386: PUSH
21387: LD_VAR 0 1
21391: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21392: LD_VAR 0 1
21396: PPUSH
21397: CALL_OW 266
21401: PUSH
21402: LD_INT 0
21404: EQUAL
21405: PUSH
21406: LD_VAR 0 1
21410: PPUSH
21411: CALL_OW 266
21415: PUSH
21416: LD_INT 2
21418: EQUAL
21419: OR
21420: PUSH
21421: LD_VAR 0 1
21425: PPUSH
21426: CALL_OW 266
21430: PUSH
21431: LD_INT 4
21433: EQUAL
21434: OR
21435: IFFALSE 21446
// ComUpgrade ( building ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 146
// if GetBType ( building ) = b_lab then
21446: LD_VAR 0 1
21450: PPUSH
21451: CALL_OW 266
21455: PUSH
21456: LD_INT 6
21458: EQUAL
21459: IFFALSE 21662
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21461: LD_INT 22
21463: PUSH
21464: LD_INT 3
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 30
21473: PUSH
21474: LD_INT 8
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PPUSH
21485: CALL_OW 69
21489: PUSH
21490: LD_INT 0
21492: EQUAL
21493: IFFALSE 21531
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21495: LD_VAR 0 1
21499: PPUSH
21500: LD_INT 10
21502: PPUSH
21503: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21507: LD_VAR 0 1
21511: PPUSH
21512: LD_INT 12
21514: PPUSH
21515: CALL_OW 207
// ruLab1 = building ;
21519: LD_ADDR_EXP 31
21523: PUSH
21524: LD_VAR 0 1
21528: ST_TO_ADDR
// end else
21529: GO 21565
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21531: LD_VAR 0 1
21535: PPUSH
21536: LD_INT 11
21538: PPUSH
21539: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21543: LD_VAR 0 1
21547: PPUSH
21548: LD_INT 14
21550: PPUSH
21551: CALL_OW 207
// ruLab2 = building ;
21555: LD_ADDR_EXP 32
21559: PUSH
21560: LD_VAR 0 1
21564: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21565: LD_INT 3
21567: PPUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: LD_INT 3
21575: PPUSH
21576: CALL 14149 0 3
// if ruDestroyedBuildings > 0 then
21580: LD_EXP 42
21584: PUSH
21585: LD_INT 0
21587: GREATER
21588: IFFALSE 21662
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21590: LD_ADDR_EXP 42
21594: PUSH
21595: LD_EXP 42
21599: PPUSH
21600: LD_INT 1
21602: PPUSH
21603: CALL_OW 3
21607: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21608: LD_ADDR_EXP 42
21612: PUSH
21613: LD_EXP 42
21617: PPUSH
21618: LD_INT 1
21620: PPUSH
21621: CALL_OW 3
21625: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21626: LD_ADDR_EXP 42
21630: PUSH
21631: LD_EXP 42
21635: PPUSH
21636: LD_INT 1
21638: PPUSH
21639: CALL_OW 3
21643: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21644: LD_ADDR_EXP 42
21648: PUSH
21649: LD_EXP 42
21653: PPUSH
21654: LD_INT 1
21656: PPUSH
21657: CALL_OW 3
21661: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21662: LD_VAR 0 1
21666: PPUSH
21667: CALL_OW 266
21671: PUSH
21672: LD_INT 32
21674: EQUAL
21675: IFFALSE 21712
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21677: LD_VAR 0 1
21681: PPUSH
21682: LD_INT 44
21684: PUSH
21685: LD_INT 45
21687: PUSH
21688: LD_INT 46
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PPUSH
21699: LD_INT 3
21701: PPUSH
21702: CALL_OW 12
21706: ARRAY
21707: PPUSH
21708: CALL_OW 208
// if GetBType ( building ) = b_turret then
21712: LD_VAR 0 1
21716: PPUSH
21717: CALL_OW 266
21721: PUSH
21722: LD_INT 33
21724: EQUAL
21725: IFFALSE 21762
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21727: LD_VAR 0 1
21731: PPUSH
21732: LD_INT 44
21734: PUSH
21735: LD_INT 45
21737: PUSH
21738: LD_INT 46
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: PPUSH
21749: LD_INT 3
21751: PPUSH
21752: CALL_OW 12
21756: ARRAY
21757: PPUSH
21758: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21762: LD_VAR 0 1
21766: PPUSH
21767: CALL_OW 266
21771: PUSH
21772: LD_INT 24
21774: EQUAL
21775: IFFALSE 21785
// russianAI = 1 ;
21777: LD_ADDR_EXP 39
21781: PUSH
21782: LD_INT 1
21784: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21785: LD_VAR 0 1
21789: PPUSH
21790: CALL_OW 255
21794: PUSH
21795: LD_INT 2
21797: EQUAL
21798: IFFALSE 22524
// begin if GetBType ( building ) = b_depot then
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 266
21809: PUSH
21810: LD_INT 0
21812: EQUAL
21813: IFFALSE 21899
// begin arDepot = building ;
21815: LD_ADDR_EXP 43
21819: PUSH
21820: LD_VAR 0 1
21824: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21825: LD_INT 38
21827: PUSH
21828: LD_INT 47
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PPUSH
21835: LD_INT 71
21837: PPUSH
21838: LD_INT 19
21840: PPUSH
21841: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21845: LD_VAR 0 1
21849: PPUSH
21850: CALL_OW 274
21854: PPUSH
21855: LD_INT 1
21857: PPUSH
21858: LD_INT 500
21860: PPUSH
21861: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 274
21874: PPUSH
21875: LD_INT 3
21877: PPUSH
21878: LD_INT 30
21880: PPUSH
21881: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21885: LD_EXP 26
21889: PPUSH
21890: LD_EXP 43
21894: PPUSH
21895: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21899: LD_VAR 0 1
21903: PPUSH
21904: CALL_OW 266
21908: PUSH
21909: LD_INT 6
21911: EQUAL
21912: PUSH
21913: LD_VAR 0 1
21917: PPUSH
21918: CALL_OW 266
21922: PUSH
21923: LD_INT 9
21925: EQUAL
21926: OR
21927: IFFALSE 21978
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21929: LD_VAR 0 1
21933: PPUSH
21934: LD_INT 10
21936: PPUSH
21937: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21941: LD_VAR 0 1
21945: PPUSH
21946: LD_INT 11
21948: PPUSH
21949: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21953: LD_INT 2
21955: PPUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: LD_INT 2
21963: PPUSH
21964: CALL 14149 0 3
// arLab = building ;
21968: LD_ADDR_EXP 44
21972: PUSH
21973: LD_VAR 0 1
21977: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 266
21987: PUSH
21988: LD_INT 2
21990: EQUAL
21991: PUSH
21992: LD_VAR 0 1
21996: PPUSH
21997: CALL_OW 266
22001: PUSH
22002: LD_INT 4
22004: EQUAL
22005: OR
22006: IFFALSE 22017
// ComUpgrade ( building ) ;
22008: LD_VAR 0 1
22012: PPUSH
22013: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL_OW 266
22026: PUSH
22027: LD_INT 27
22029: EQUAL
22030: IFFALSE 22524
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22032: LD_INT 22
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 30
22044: PUSH
22045: LD_INT 27
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PPUSH
22056: CALL_OW 69
22060: PUSH
22061: LD_INT 2
22063: EQUAL
22064: IFFALSE 22524
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22066: LD_ADDR_VAR 0 2
22070: PUSH
22071: LD_INT 22
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 21
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 25
22093: PUSH
22094: LD_INT 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: LIST
22105: PPUSH
22106: CALL_OW 69
22110: PUSH
22111: LD_INT 1
22113: ARRAY
22114: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22115: LD_VAR 0 2
22119: PPUSH
22120: LD_INT 92
22122: PPUSH
22123: LD_INT 34
22125: PPUSH
22126: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22130: LD_VAR 0 2
22134: PPUSH
22135: LD_INT 82
22137: PPUSH
22138: LD_INT 57
22140: PPUSH
22141: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22145: LD_VAR 0 2
22149: PPUSH
22150: LD_INT 36
22152: PPUSH
22153: LD_INT 28
22155: PPUSH
22156: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22160: LD_INT 22
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 21
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 25
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: PPUSH
22195: CALL_OW 69
22199: PPUSH
22200: LD_EXP 43
22204: PPUSH
22205: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22209: LD_INT 22
22211: PUSH
22212: LD_INT 2
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 25
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 3
22231: PUSH
22232: LD_INT 54
22234: PUSH
22235: EMPTY
22236: LIST
22237: PUSH
22238: LD_INT 3
22240: PUSH
22241: LD_INT 60
22243: PUSH
22244: EMPTY
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: PPUSH
22261: CALL_OW 69
22265: PUSH
22266: LD_INT 1
22268: ARRAY
22269: PPUSH
22270: LD_INT 22
22272: PUSH
22273: LD_INT 2
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 30
22282: PUSH
22283: LD_INT 31
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 58
22292: PUSH
22293: EMPTY
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: PPUSH
22301: CALL_OW 69
22305: PUSH
22306: LD_INT 1
22308: ARRAY
22309: PPUSH
22310: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22314: LD_INT 22
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 25
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 3
22336: PUSH
22337: LD_INT 54
22339: PUSH
22340: EMPTY
22341: LIST
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: LD_INT 60
22348: PUSH
22349: EMPTY
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: PPUSH
22366: CALL_OW 69
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: PPUSH
22375: LD_INT 22
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 30
22387: PUSH
22388: LD_INT 31
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 58
22397: PUSH
22398: EMPTY
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: PUSH
22411: LD_INT 2
22413: ARRAY
22414: PPUSH
22415: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22419: LD_INT 22
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 25
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 3
22441: PUSH
22442: LD_INT 54
22444: PUSH
22445: EMPTY
22446: LIST
22447: PUSH
22448: LD_INT 3
22450: PUSH
22451: LD_INT 60
22453: PUSH
22454: EMPTY
22455: LIST
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: PPUSH
22471: CALL_OW 69
22475: PUSH
22476: LD_INT 3
22478: ARRAY
22479: PPUSH
22480: LD_INT 22
22482: PUSH
22483: LD_INT 2
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 30
22492: PUSH
22493: LD_INT 31
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 58
22502: PUSH
22503: EMPTY
22504: LIST
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: PPUSH
22511: CALL_OW 69
22515: PUSH
22516: LD_INT 3
22518: ARRAY
22519: PPUSH
22520: CALL_OW 120
// end ; end ; end ;
22524: PPOPN 2
22526: END
// on UpgradeComplete ( building ) do var i ;
22527: LD_INT 0
22529: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22530: LD_VAR 0 1
22534: PPUSH
22535: CALL_OW 255
22539: PUSH
22540: LD_INT 1
22542: EQUAL
22543: PUSH
22544: LD_EXP 61
22548: PUSH
22549: LD_INT 0
22551: EQUAL
22552: AND
22553: IFFALSE 22751
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22555: LD_VAR 0 1
22559: PPUSH
22560: CALL_OW 266
22564: PUSH
22565: LD_INT 7
22567: EQUAL
22568: PUSH
22569: LD_VAR 0 1
22573: PPUSH
22574: CALL_OW 266
22578: PUSH
22579: LD_INT 8
22581: EQUAL
22582: OR
22583: IFFALSE 22751
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22585: LD_INT 22
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 30
22600: PUSH
22601: LD_INT 26
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 30
22610: PUSH
22611: LD_INT 27
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 30
22620: PUSH
22621: LD_INT 28
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PPUSH
22638: CALL_OW 69
22642: PUSH
22643: LD_INT 0
22645: GREATER
22646: IFFALSE 22751
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22648: LD_ADDR_VAR 0 2
22652: PUSH
22653: LD_INT 22
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 2
22665: PUSH
22666: LD_INT 30
22668: PUSH
22669: LD_INT 7
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 30
22678: PUSH
22679: LD_INT 8
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PPUSH
22695: CALL_OW 69
22699: PUSH
22700: FOR_IN
22701: IFFALSE 22749
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22703: LD_VAR 0 2
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 268
22715: PUSH
22716: LD_INT 11
22718: EQUAL
22719: PUSH
22720: LD_VAR 0 2
22724: PPUSH
22725: LD_INT 2
22727: PPUSH
22728: CALL_OW 268
22732: PUSH
22733: LD_INT 11
22735: EQUAL
22736: OR
22737: IFFALSE 22747
// eventVar1 = 1 ;
22739: LD_ADDR_EXP 61
22743: PUSH
22744: LD_INT 1
22746: ST_TO_ADDR
22747: GO 22700
22749: POP
22750: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 255
22760: PUSH
22761: LD_INT 2
22763: EQUAL
22764: IFFALSE 22869
// begin if GetBType ( building ) = b_barracks then
22766: LD_VAR 0 1
22770: PPUSH
22771: CALL_OW 266
22775: PUSH
22776: LD_INT 5
22778: EQUAL
22779: IFFALSE 22869
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22781: LD_ADDR_VAR 0 2
22785: PUSH
22786: LD_INT 22
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 25
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 3
22808: PUSH
22809: LD_INT 54
22811: PUSH
22812: EMPTY
22813: LIST
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 69
22828: PUSH
22829: LD_EXP 26
22833: PUSH
22834: EMPTY
22835: LIST
22836: DIFF
22837: PUSH
22838: FOR_IN
22839: IFFALSE 22857
// ComEnterUnit ( i , building ) ;
22841: LD_VAR 0 2
22845: PPUSH
22846: LD_VAR 0 1
22850: PPUSH
22851: CALL_OW 120
22855: GO 22838
22857: POP
22858: POP
// arArm = building ;
22859: LD_ADDR_EXP 45
22863: PUSH
22864: LD_VAR 0 1
22868: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 255
22878: PUSH
22879: LD_INT 3
22881: EQUAL
22882: IFFALSE 23355
// begin if GetBType ( building ) = b_factory then
22884: LD_VAR 0 1
22888: PPUSH
22889: CALL_OW 266
22893: PUSH
22894: LD_INT 3
22896: EQUAL
22897: IFFALSE 22964
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 25
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 69
22932: PUSH
22933: FOR_IN
22934: IFFALSE 22952
// ComEnterUnit ( i , building ) ;
22936: LD_VAR 0 2
22940: PPUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: CALL_OW 120
22950: GO 22933
22952: POP
22953: POP
// ruFab = building ;
22954: LD_ADDR_EXP 35
22958: PUSH
22959: LD_VAR 0 1
22963: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22964: LD_INT 22
22966: PUSH
22967: LD_INT 3
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 21
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 30
22986: PUSH
22987: LD_INT 8
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: PPUSH
22999: CALL_OW 69
23003: PUSH
23004: LD_INT 2
23006: EQUAL
23007: IFFALSE 23215
// begin for i = 1 to 2 do
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: DOUBLE
23015: LD_INT 1
23017: DEC
23018: ST_TO_ADDR
23019: LD_INT 2
23021: PUSH
23022: FOR_TO
23023: IFFALSE 23110
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23025: LD_INT 22
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 4
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PPUSH
23049: CALL_OW 69
23053: PUSH
23054: LD_VAR 0 2
23058: ARRAY
23059: PPUSH
23060: LD_INT 22
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 21
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 30
23082: PUSH
23083: LD_INT 8
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: PPUSH
23095: CALL_OW 69
23099: PUSH
23100: LD_INT 1
23102: ARRAY
23103: PPUSH
23104: CALL_OW 120
23108: GO 23022
23110: POP
23111: POP
// for i = 3 to 4 do
23112: LD_ADDR_VAR 0 2
23116: PUSH
23117: DOUBLE
23118: LD_INT 3
23120: DEC
23121: ST_TO_ADDR
23122: LD_INT 4
23124: PUSH
23125: FOR_TO
23126: IFFALSE 23213
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23128: LD_INT 22
23130: PUSH
23131: LD_INT 3
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 25
23140: PUSH
23141: LD_INT 4
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PPUSH
23152: CALL_OW 69
23156: PUSH
23157: LD_VAR 0 2
23161: ARRAY
23162: PPUSH
23163: LD_INT 22
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 21
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 8
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: PUSH
23203: LD_INT 2
23205: ARRAY
23206: PPUSH
23207: CALL_OW 120
23211: GO 23125
23213: POP
23214: POP
// end ; if GetBType ( building ) = b_barracks then
23215: LD_VAR 0 1
23219: PPUSH
23220: CALL_OW 266
23224: PUSH
23225: LD_INT 5
23227: EQUAL
23228: IFFALSE 23355
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23230: LD_ADDR_VAR 0 2
23234: PUSH
23235: LD_INT 22
23237: PUSH
23238: LD_INT 3
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 25
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 3
23257: PUSH
23258: LD_INT 54
23260: PUSH
23261: EMPTY
23262: LIST
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: LIST
23272: PPUSH
23273: CALL_OW 69
23277: PUSH
23278: FOR_IN
23279: IFFALSE 23297
// ComEnterUnit ( i , building ) ;
23281: LD_VAR 0 2
23285: PPUSH
23286: LD_VAR 0 1
23290: PPUSH
23291: CALL_OW 120
23295: GO 23278
23297: POP
23298: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23299: LD_INT 22
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 30
23311: PUSH
23312: LD_INT 5
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: PUSH
23328: LD_INT 0
23330: EQUAL
23331: IFFALSE 23345
// ruArm1 = building else
23333: LD_ADDR_EXP 33
23337: PUSH
23338: LD_VAR 0 1
23342: ST_TO_ADDR
23343: GO 23355
// ruArm2 = building ;
23345: LD_ADDR_EXP 34
23349: PUSH
23350: LD_VAR 0 1
23354: ST_TO_ADDR
// end ; end ; end ;
23355: PPOPN 2
23357: END
// on EnterBuilding ( building , human ) do var rnd ;
23358: LD_INT 0
23360: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23361: LD_VAR 0 2
23365: PPUSH
23366: CALL_OW 255
23370: PUSH
23371: LD_INT 2
23373: EQUAL
23374: PUSH
23375: LD_VAR 0 2
23379: PPUSH
23380: CALL_OW 257
23384: PUSH
23385: LD_INT 1
23387: EQUAL
23388: AND
23389: PUSH
23390: LD_VAR 0 1
23394: PUSH
23395: LD_EXP 45
23399: EQUAL
23400: AND
23401: IFFALSE 23448
// begin wait ( 0 0$1 ) ;
23403: LD_INT 35
23405: PPUSH
23406: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23410: LD_ADDR_VAR 0 3
23414: PUSH
23415: LD_INT 1
23417: PPUSH
23418: LD_INT 100
23420: PPUSH
23421: CALL_OW 12
23425: ST_TO_ADDR
// if rnd > 50 then
23426: LD_VAR 0 3
23430: PUSH
23431: LD_INT 50
23433: GREATER
23434: IFFALSE 23448
// SetClass ( human , class_mortar ) ;
23436: LD_VAR 0 2
23440: PPUSH
23441: LD_INT 8
23443: PPUSH
23444: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23448: LD_VAR 0 2
23452: PPUSH
23453: CALL_OW 255
23457: PUSH
23458: LD_INT 3
23460: EQUAL
23461: PUSH
23462: LD_VAR 0 2
23466: PPUSH
23467: CALL_OW 257
23471: PUSH
23472: LD_INT 1
23474: EQUAL
23475: AND
23476: PUSH
23477: LD_VAR 0 1
23481: PUSH
23482: LD_EXP 33
23486: EQUAL
23487: PUSH
23488: LD_VAR 0 1
23492: PUSH
23493: LD_EXP 34
23497: EQUAL
23498: OR
23499: PUSH
23500: EMPTY
23501: LIST
23502: AND
23503: IFFALSE 23524
// begin wait ( 0 0$1 ) ;
23505: LD_INT 35
23507: PPUSH
23508: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23512: LD_VAR 0 2
23516: PPUSH
23517: LD_INT 9
23519: PPUSH
23520: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23524: LD_VAR 0 2
23528: PPUSH
23529: CALL_OW 255
23533: PUSH
23534: LD_INT 3
23536: EQUAL
23537: PUSH
23538: LD_VAR 0 2
23542: PPUSH
23543: CALL_OW 257
23547: PUSH
23548: LD_INT 9
23550: EQUAL
23551: AND
23552: PUSH
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 266
23562: PUSH
23563: LD_INT 32
23565: EQUAL
23566: AND
23567: IFFALSE 23588
// begin wait ( 0 0$1 ) ;
23569: LD_INT 35
23571: PPUSH
23572: CALL_OW 67
// SetClass ( human , 1 ) ;
23576: LD_VAR 0 2
23580: PPUSH
23581: LD_INT 1
23583: PPUSH
23584: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23588: LD_VAR 0 2
23592: PPUSH
23593: CALL_OW 255
23597: PUSH
23598: LD_INT 3
23600: EQUAL
23601: PUSH
23602: LD_VAR 0 2
23606: PPUSH
23607: CALL_OW 257
23611: PUSH
23612: LD_INT 3
23614: EQUAL
23615: AND
23616: PUSH
23617: LD_VAR 0 1
23621: PUSH
23622: LD_EXP 35
23626: EQUAL
23627: AND
23628: IFFALSE 23642
// SetLives ( human , 1000 ) ;
23630: LD_VAR 0 2
23634: PPUSH
23635: LD_INT 1000
23637: PPUSH
23638: CALL_OW 234
// end ;
23642: PPOPN 3
23644: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23645: LD_VAR 0 1
23649: PUSH
23650: LD_INT 1
23652: EQUAL
23653: PUSH
23654: LD_VAR 0 2
23658: PUSH
23659: LD_INT 2
23661: EQUAL
23662: AND
23663: PUSH
23664: LD_INT 1
23666: PPUSH
23667: LD_INT 2
23669: PPUSH
23670: CALL_OW 81
23674: PUSH
23675: LD_INT 1
23677: EQUAL
23678: AND
23679: IFFALSE 23700
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23681: LD_EXP 24
23685: PPUSH
23686: LD_STRING D6b-Pow-1
23688: PPUSH
23689: CALL_OW 94
// YouLost ( Powell ) ;
23693: LD_STRING Powell
23695: PPUSH
23696: CALL_OW 104
// end ; end ;
23700: PPOPN 2
23702: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23703: LD_INT 23
23705: PPUSH
23706: LD_INT 22
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 21
23718: PUSH
23719: LD_INT 3
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PPUSH
23730: CALL_OW 70
23734: PUSH
23735: LD_INT 23
23737: PPUSH
23738: LD_INT 22
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 21
23750: PUSH
23751: LD_INT 2
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 58
23760: PUSH
23761: EMPTY
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 70
23773: OR
23774: PUSH
23775: LD_INT 1
23777: PPUSH
23778: LD_INT 2
23780: PPUSH
23781: CALL_OW 81
23785: PUSH
23786: LD_INT 1
23788: EQUAL
23789: AND
23790: IFFALSE 23814
23792: GO 23794
23794: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23795: LD_EXP 24
23799: PPUSH
23800: LD_STRING D6b-Pow-1
23802: PPUSH
23803: CALL_OW 94
// YouLost ( Powell ) ;
23807: LD_STRING Powell
23809: PPUSH
23810: CALL_OW 104
// end ;
23814: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23815: LD_VAR 0 1
23819: PUSH
23820: LD_EXP 1
23824: EQUAL
23825: IFFALSE 23834
// YouLost ( JMM ) ;
23827: LD_STRING JMM
23829: PPUSH
23830: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23834: LD_VAR 0 1
23838: PPUSH
23839: CALL_OW 255
23843: PUSH
23844: LD_INT 3
23846: EQUAL
23847: PUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 247
23857: PUSH
23858: LD_INT 3
23860: EQUAL
23861: AND
23862: IFFALSE 24554
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23864: LD_VAR 0 1
23868: PPUSH
23869: CALL_OW 266
23873: PUSH
23874: LD_INT 31
23876: EQUAL
23877: PUSH
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 266
23887: PUSH
23888: LD_INT 32
23890: EQUAL
23891: OR
23892: PUSH
23893: LD_VAR 0 1
23897: PPUSH
23898: CALL_OW 266
23902: PUSH
23903: LD_INT 36
23905: EQUAL
23906: OR
23907: PUSH
23908: LD_VAR 0 1
23912: PPUSH
23913: CALL_OW 266
23917: PUSH
23918: LD_INT 0
23920: EQUAL
23921: OR
23922: PUSH
23923: LD_VAR 0 1
23927: PPUSH
23928: CALL_OW 266
23932: PUSH
23933: LD_INT 24
23935: EQUAL
23936: OR
23937: PUSH
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 266
23947: PUSH
23948: LD_INT 17
23950: EQUAL
23951: OR
23952: PUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 266
23962: PUSH
23963: LD_INT 25
23965: EQUAL
23966: OR
23967: PUSH
23968: LD_VAR 0 1
23972: PPUSH
23973: CALL_OW 266
23977: PUSH
23978: LD_INT 19
23980: EQUAL
23981: OR
23982: PUSH
23983: LD_VAR 0 1
23987: PPUSH
23988: CALL_OW 266
23992: PUSH
23993: LD_INT 20
23995: EQUAL
23996: OR
23997: PUSH
23998: LD_VAR 0 1
24002: PPUSH
24003: CALL_OW 266
24007: PUSH
24008: LD_INT 18
24010: EQUAL
24011: OR
24012: PUSH
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 266
24022: PUSH
24023: LD_INT 21
24025: EQUAL
24026: OR
24027: PUSH
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 266
24037: PUSH
24038: LD_INT 23
24040: EQUAL
24041: OR
24042: PUSH
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 266
24052: PUSH
24053: LD_INT 16
24055: EQUAL
24056: OR
24057: PUSH
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 266
24067: PUSH
24068: LD_INT 6
24070: EQUAL
24071: OR
24072: PUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 266
24082: PUSH
24083: LD_INT 29
24085: EQUAL
24086: OR
24087: PUSH
24088: LD_VAR 0 1
24092: PPUSH
24093: CALL_OW 266
24097: PUSH
24098: LD_INT 26
24100: EQUAL
24101: OR
24102: PUSH
24103: LD_VAR 0 1
24107: PPUSH
24108: CALL_OW 266
24112: PUSH
24113: LD_INT 30
24115: EQUAL
24116: OR
24117: PUSH
24118: LD_VAR 0 1
24122: PPUSH
24123: CALL_OW 266
24127: PUSH
24128: LD_INT 28
24130: EQUAL
24131: OR
24132: PUSH
24133: LD_VAR 0 1
24137: PPUSH
24138: CALL_OW 266
24142: PUSH
24143: LD_INT 27
24145: EQUAL
24146: OR
24147: PUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 266
24157: PUSH
24158: LD_INT 33
24160: EQUAL
24161: OR
24162: PUSH
24163: LD_VAR 0 1
24167: PPUSH
24168: CALL_OW 266
24172: PUSH
24173: LD_INT 2
24175: EQUAL
24176: OR
24177: PUSH
24178: LD_VAR 0 1
24182: PPUSH
24183: CALL_OW 266
24187: PUSH
24188: LD_INT 4
24190: EQUAL
24191: OR
24192: IFFALSE 24278
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24194: LD_ADDR_EXP 42
24198: PUSH
24199: LD_EXP 42
24203: PUSH
24204: LD_VAR 0 1
24208: PPUSH
24209: CALL_OW 266
24213: ADD
24214: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24215: LD_ADDR_EXP 42
24219: PUSH
24220: LD_EXP 42
24224: PUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: CALL_OW 250
24234: ADD
24235: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24236: LD_ADDR_EXP 42
24240: PUSH
24241: LD_EXP 42
24245: PUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: CALL_OW 251
24255: ADD
24256: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24257: LD_ADDR_EXP 42
24261: PUSH
24262: LD_EXP 42
24266: PUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: CALL_OW 254
24276: ADD
24277: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24278: LD_VAR 0 1
24282: PPUSH
24283: CALL_OW 266
24287: PUSH
24288: LD_INT 1
24290: EQUAL
24291: IFFALSE 24370
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24293: LD_ADDR_EXP 42
24297: PUSH
24298: LD_EXP 42
24302: PUSH
24303: LD_INT 0
24305: ADD
24306: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24307: LD_ADDR_EXP 42
24311: PUSH
24312: LD_EXP 42
24316: PUSH
24317: LD_VAR 0 1
24321: PPUSH
24322: CALL_OW 250
24326: ADD
24327: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24328: LD_ADDR_EXP 42
24332: PUSH
24333: LD_EXP 42
24337: PUSH
24338: LD_VAR 0 1
24342: PPUSH
24343: CALL_OW 251
24347: ADD
24348: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24349: LD_ADDR_EXP 42
24353: PUSH
24354: LD_EXP 42
24358: PUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 254
24368: ADD
24369: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 266
24379: PUSH
24380: LD_INT 3
24382: EQUAL
24383: IFFALSE 24462
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24385: LD_ADDR_EXP 42
24389: PUSH
24390: LD_EXP 42
24394: PUSH
24395: LD_INT 2
24397: ADD
24398: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24399: LD_ADDR_EXP 42
24403: PUSH
24404: LD_EXP 42
24408: PUSH
24409: LD_VAR 0 1
24413: PPUSH
24414: CALL_OW 250
24418: ADD
24419: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24420: LD_ADDR_EXP 42
24424: PUSH
24425: LD_EXP 42
24429: PUSH
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 251
24439: ADD
24440: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24441: LD_ADDR_EXP 42
24445: PUSH
24446: LD_EXP 42
24450: PUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 254
24460: ADD
24461: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL_OW 266
24471: PUSH
24472: LD_INT 5
24474: EQUAL
24475: IFFALSE 24554
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24477: LD_ADDR_EXP 42
24481: PUSH
24482: LD_EXP 42
24486: PUSH
24487: LD_INT 4
24489: ADD
24490: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24491: LD_ADDR_EXP 42
24495: PUSH
24496: LD_EXP 42
24500: PUSH
24501: LD_VAR 0 1
24505: PPUSH
24506: CALL_OW 250
24510: ADD
24511: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24512: LD_ADDR_EXP 42
24516: PUSH
24517: LD_EXP 42
24521: PUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 251
24531: ADD
24532: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24533: LD_ADDR_EXP 42
24537: PUSH
24538: LD_EXP 42
24542: PUSH
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 254
24552: ADD
24553: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24554: LD_VAR 0 1
24558: PPUSH
24559: CALL_OW 257
24563: PUSH
24564: LD_INT 3
24566: EQUAL
24567: PUSH
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 255
24577: PUSH
24578: LD_INT 3
24580: EQUAL
24581: AND
24582: PUSH
24583: LD_EXP 35
24587: PPUSH
24588: CALL_OW 302
24592: AND
24593: PUSH
24594: LD_EXP 35
24598: PPUSH
24599: CALL_OW 255
24603: PUSH
24604: LD_INT 3
24606: EQUAL
24607: AND
24608: IFFALSE 24678
// begin uc_side = 3 ;
24610: LD_ADDR_OWVAR 20
24614: PUSH
24615: LD_INT 3
24617: ST_TO_ADDR
// uc_nation = 3 ;
24618: LD_ADDR_OWVAR 21
24622: PUSH
24623: LD_INT 3
24625: ST_TO_ADDR
// hc_gallery :=  ;
24626: LD_ADDR_OWVAR 33
24630: PUSH
24631: LD_STRING 
24633: ST_TO_ADDR
// hc_name :=  ;
24634: LD_ADDR_OWVAR 26
24638: PUSH
24639: LD_STRING 
24641: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24642: LD_INT 0
24644: PPUSH
24645: LD_EXP 36
24649: PPUSH
24650: LD_EXP 37
24654: PPUSH
24655: CALL_OW 12
24659: PPUSH
24660: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24664: CALL_OW 44
24668: PPUSH
24669: LD_EXP 35
24673: PPUSH
24674: CALL_OW 52
// end ; end ;
24678: PPOPN 1
24680: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24681: LD_ADDR_OWVAR 57
24685: PUSH
24686: LD_INT 0
24688: ST_TO_ADDR
// fastEnd = 1 ;
24689: LD_ADDR_EXP 59
24693: PUSH
24694: LD_INT 1
24696: ST_TO_ADDR
// FinishMission ;
24697: CALL 25959 0 0
// end ; end_of_file
24701: PPOPN 1
24703: END
// export function PrepareNature ; var i , un ; begin
24704: LD_INT 0
24706: PPUSH
24707: PPUSH
24708: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24709: LD_ADDR_VAR 0 2
24713: PUSH
24714: DOUBLE
24715: LD_INT 1
24717: DEC
24718: ST_TO_ADDR
24719: LD_OWVAR 67
24723: PUSH
24724: LD_INT 1
24726: PPUSH
24727: LD_INT 5
24729: PPUSH
24730: CALL_OW 12
24734: PLUS
24735: PUSH
24736: FOR_TO
24737: IFFALSE 24882
// begin hc_sex = sex_male ;
24739: LD_ADDR_OWVAR 27
24743: PUSH
24744: LD_INT 1
24746: ST_TO_ADDR
// uc_side = 0 ;
24747: LD_ADDR_OWVAR 20
24751: PUSH
24752: LD_INT 0
24754: ST_TO_ADDR
// uc_nation = nation_nature ;
24755: LD_ADDR_OWVAR 21
24759: PUSH
24760: LD_INT 0
24762: ST_TO_ADDR
// hc_class = class_apeman ;
24763: LD_ADDR_OWVAR 28
24767: PUSH
24768: LD_INT 12
24770: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24771: LD_ADDR_OWVAR 31
24775: PUSH
24776: LD_INT 2
24778: PPUSH
24779: LD_INT 7
24781: PPUSH
24782: CALL_OW 12
24786: PUSH
24787: LD_OWVAR 67
24791: PLUS
24792: PUSH
24793: LD_INT 2
24795: PPUSH
24796: LD_INT 10
24798: PPUSH
24799: CALL_OW 12
24803: PUSH
24804: LD_INT 2
24806: PPUSH
24807: LD_INT 10
24809: PPUSH
24810: CALL_OW 12
24814: PUSH
24815: LD_INT 2
24817: PPUSH
24818: LD_INT 10
24820: PPUSH
24821: CALL_OW 12
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24832: LD_ADDR_OWVAR 35
24836: PUSH
24837: LD_INT 5
24839: NEG
24840: PPUSH
24841: LD_INT 5
24843: PPUSH
24844: CALL_OW 12
24848: PUSH
24849: LD_OWVAR 67
24853: MUL
24854: ST_TO_ADDR
// un = CreateHuman ;
24855: LD_ADDR_VAR 0 3
24859: PUSH
24860: CALL_OW 44
24864: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24865: LD_VAR 0 3
24869: PPUSH
24870: LD_INT 5
24872: PPUSH
24873: LD_INT 0
24875: PPUSH
24876: CALL_OW 49
// end ;
24880: GO 24736
24882: POP
24883: POP
// for i = 1 to Difficulty + 2 do
24884: LD_ADDR_VAR 0 2
24888: PUSH
24889: DOUBLE
24890: LD_INT 1
24892: DEC
24893: ST_TO_ADDR
24894: LD_OWVAR 67
24898: PUSH
24899: LD_INT 2
24901: PLUS
24902: PUSH
24903: FOR_TO
24904: IFFALSE 25013
// begin hc_sex = sex_male ;
24906: LD_ADDR_OWVAR 27
24910: PUSH
24911: LD_INT 1
24913: ST_TO_ADDR
// uc_side = 0 ;
24914: LD_ADDR_OWVAR 20
24918: PUSH
24919: LD_INT 0
24921: ST_TO_ADDR
// uc_nation = nation_nature ;
24922: LD_ADDR_OWVAR 21
24926: PUSH
24927: LD_INT 0
24929: ST_TO_ADDR
// hc_class = class_tiger ;
24930: LD_ADDR_OWVAR 28
24934: PUSH
24935: LD_INT 14
24937: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24938: LD_ADDR_OWVAR 31
24942: PUSH
24943: LD_EXP 37
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24963: LD_ADDR_OWVAR 35
24967: PUSH
24968: LD_INT 5
24970: NEG
24971: PPUSH
24972: LD_INT 5
24974: PPUSH
24975: CALL_OW 12
24979: PUSH
24980: LD_OWVAR 67
24984: MUL
24985: ST_TO_ADDR
// un = CreateHuman ;
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: CALL_OW 44
24995: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24996: LD_VAR 0 3
25000: PPUSH
25001: LD_INT 6
25003: PPUSH
25004: LD_INT 0
25006: PPUSH
25007: CALL_OW 49
// end ;
25011: GO 24903
25013: POP
25014: POP
// for i = 1 to rand ( 3 , 4 ) do
25015: LD_ADDR_VAR 0 2
25019: PUSH
25020: DOUBLE
25021: LD_INT 1
25023: DEC
25024: ST_TO_ADDR
25025: LD_INT 3
25027: PPUSH
25028: LD_INT 4
25030: PPUSH
25031: CALL_OW 12
25035: PUSH
25036: FOR_TO
25037: IFFALSE 25131
// begin hc_sex = sex_male ;
25039: LD_ADDR_OWVAR 27
25043: PUSH
25044: LD_INT 1
25046: ST_TO_ADDR
// uc_side = 0 ;
25047: LD_ADDR_OWVAR 20
25051: PUSH
25052: LD_INT 0
25054: ST_TO_ADDR
// uc_nation = nation_nature ;
25055: LD_ADDR_OWVAR 21
25059: PUSH
25060: LD_INT 0
25062: ST_TO_ADDR
// hc_class = 18 ;
25063: LD_ADDR_OWVAR 28
25067: PUSH
25068: LD_INT 18
25070: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25071: LD_ADDR_OWVAR 31
25075: PUSH
25076: LD_EXP 37
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: ST_TO_ADDR
// hc_agressivity = 0 ;
25096: LD_ADDR_OWVAR 35
25100: PUSH
25101: LD_INT 0
25103: ST_TO_ADDR
// un = CreateHuman ;
25104: LD_ADDR_VAR 0 3
25108: PUSH
25109: CALL_OW 44
25113: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25114: LD_VAR 0 3
25118: PPUSH
25119: LD_INT 6
25121: PPUSH
25122: LD_INT 0
25124: PPUSH
25125: CALL_OW 49
// end ;
25129: GO 25036
25131: POP
25132: POP
// end ; end_of_file
25133: LD_VAR 0 1
25137: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25138: LD_EXP 46
25142: PUSH
25143: LD_INT 1
25145: EQUAL
25146: IFFALSE 25230
25148: GO 25150
25150: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25151: LD_INT 7
25153: PPUSH
25154: LD_INT 5
25156: PPUSH
25157: LD_INT 4
25159: PUSH
25160: LD_INT 5
25162: PUSH
25163: LD_INT 6
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: PUSH
25171: LD_OWVAR 67
25175: ARRAY
25176: PPUSH
25177: LD_EXP 36
25181: PPUSH
25182: LD_EXP 37
25186: PPUSH
25187: CALL_OW 12
25191: PPUSH
25192: LD_INT 2
25194: PPUSH
25195: LD_INT 1
25197: PPUSH
25198: LD_INT 1
25200: PPUSH
25201: EMPTY
25202: PPUSH
25203: LD_INT 25
25205: PUSH
25206: LD_INT 26
25208: PUSH
25209: LD_INT 27
25211: PUSH
25212: LD_INT 28
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: PPUSH
25221: EMPTY
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: CALL 15711 0 11
25230: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25231: LD_EXP 46
25235: PUSH
25236: LD_INT 1
25238: EQUAL
25239: IFFALSE 25327
25241: GO 25243
25243: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25244: LD_INT 5
25246: PPUSH
25247: LD_INT 2
25249: PPUSH
25250: LD_INT 7
25252: PUSH
25253: LD_INT 8
25255: PUSH
25256: LD_INT 10
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: PUSH
25264: LD_OWVAR 67
25268: ARRAY
25269: PPUSH
25270: LD_INT 0
25272: PPUSH
25273: LD_INT 0
25275: PPUSH
25276: LD_INT 2
25278: PUSH
25279: LD_INT 4
25281: PUSH
25282: LD_INT 5
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: PUSH
25290: LD_OWVAR 67
25294: ARRAY
25295: PPUSH
25296: LD_INT 0
25298: PPUSH
25299: LD_EXP 36
25303: PPUSH
25304: LD_EXP 37
25308: PPUSH
25309: CALL_OW 12
25313: PPUSH
25314: LD_INT 7
25316: PPUSH
25317: LD_INT 9
25319: PPUSH
25320: LD_INT 1
25322: PPUSH
25323: CALL 17415 0 11
25327: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25328: LD_EXP 46
25332: PUSH
25333: LD_INT 1
25335: EQUAL
25336: IFFALSE 25345
25338: GO 25340
25340: DISABLE
// PrepareArabianSheik ;
25341: CALL 3904 0 0
25345: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25346: LD_EXP 29
25350: PUSH
25351: LD_EXP 60
25355: PUSH
25356: LD_INT 1
25358: EQUAL
25359: AND
25360: IFFALSE 25429
25362: GO 25364
25364: DISABLE
// begin enable ;
25365: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25366: LD_INT 6
25368: PPUSH
25369: LD_INT 3
25371: PPUSH
25372: LD_EXP 57
25376: PPUSH
25377: LD_INT 0
25379: PPUSH
25380: LD_OWVAR 67
25384: PPUSH
25385: LD_INT 0
25387: PPUSH
25388: LD_EXP 57
25392: PUSH
25393: LD_INT 3
25395: DIV
25396: PUSH
25397: LD_INT 1
25399: PLUS
25400: PPUSH
25401: LD_EXP 36
25405: PPUSH
25406: LD_EXP 37
25410: PPUSH
25411: CALL_OW 12
25415: PPUSH
25416: LD_INT 17
25418: PPUSH
25419: LD_INT 18
25421: PPUSH
25422: LD_INT 1
25424: PPUSH
25425: CALL 17415 0 11
// end ;
25429: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25430: LD_EXP 29
25434: PUSH
25435: LD_EXP 60
25439: PUSH
25440: LD_INT 1
25442: EQUAL
25443: AND
25444: IFFALSE 25521
25446: GO 25448
25448: DISABLE
// begin enable ;
25449: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25450: LD_INT 17
25452: PPUSH
25453: LD_INT 6
25455: PPUSH
25456: LD_EXP 56
25460: PPUSH
25461: LD_EXP 36
25465: PPUSH
25466: LD_EXP 37
25470: PPUSH
25471: CALL_OW 12
25475: PPUSH
25476: LD_INT 3
25478: PPUSH
25479: LD_INT 1
25481: PPUSH
25482: LD_INT 1
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PPUSH
25492: LD_INT 43
25494: PUSH
25495: LD_INT 44
25497: PUSH
25498: LD_INT 45
25500: PUSH
25501: LD_INT 46
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: PPUSH
25510: EMPTY
25511: PPUSH
25512: EMPTY
25513: PPUSH
25514: LD_INT 1
25516: PPUSH
25517: CALL 15711 0 11
// end ;
25521: END
// every 10 10$00 trigger joinEpsilon do
25522: LD_EXP 29
25526: IFFALSE 25580
25528: GO 25530
25530: DISABLE
// begin enable ;
25531: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25532: LD_ADDR_EXP 56
25536: PUSH
25537: LD_EXP 56
25541: PUSH
25542: LD_INT 1
25544: PPUSH
25545: LD_OWVAR 67
25549: PPUSH
25550: CALL_OW 12
25554: PLUS
25555: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25556: LD_ADDR_EXP 57
25560: PUSH
25561: LD_EXP 57
25565: PUSH
25566: LD_INT 1
25568: PPUSH
25569: LD_OWVAR 67
25573: PPUSH
25574: CALL_OW 12
25578: PLUS
25579: ST_TO_ADDR
// end ;
25580: END
// every 21 21$0 trigger attackAvalaible = 1 do
25581: LD_EXP 60
25585: PUSH
25586: LD_INT 1
25588: EQUAL
25589: IFFALSE 25602
25591: GO 25593
25593: DISABLE
// attackAvalaible = 0 ; end_of_file
25594: LD_ADDR_EXP 60
25598: PUSH
25599: LD_INT 0
25601: ST_TO_ADDR
25602: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25603: LD_INT 54
25605: PPUSH
25606: LD_INT 1
25608: PPUSH
25609: CALL_OW 321
25613: PUSH
25614: LD_INT 2
25616: EQUAL
25617: PUSH
25618: LD_INT 55
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: CALL_OW 321
25628: PUSH
25629: LD_INT 2
25631: EQUAL
25632: AND
25633: PUSH
25634: LD_INT 21
25636: PPUSH
25637: LD_INT 1
25639: PPUSH
25640: CALL_OW 321
25644: PUSH
25645: LD_INT 2
25647: EQUAL
25648: AND
25649: PUSH
25650: LD_INT 22
25652: PPUSH
25653: LD_INT 1
25655: PPUSH
25656: CALL_OW 321
25660: PUSH
25661: LD_INT 2
25663: EQUAL
25664: AND
25665: PUSH
25666: LD_INT 12
25668: PPUSH
25669: LD_INT 1
25671: PPUSH
25672: CALL_OW 321
25676: PUSH
25677: LD_INT 1
25679: EQUAL
25680: PUSH
25681: LD_INT 32
25683: PPUSH
25684: LD_INT 1
25686: PPUSH
25687: CALL_OW 321
25691: PUSH
25692: LD_INT 1
25694: EQUAL
25695: OR
25696: PUSH
25697: EMPTY
25698: LIST
25699: AND
25700: PUSH
25701: LD_EXP 48
25705: PUSH
25706: LD_INT 1
25708: EQUAL
25709: AND
25710: PUSH
25711: LD_INT 22
25713: PUSH
25714: LD_INT 3
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 21
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PPUSH
25735: CALL_OW 69
25739: PUSH
25740: LD_INT 0
25742: EQUAL
25743: AND
25744: IFFALSE 25800
25746: GO 25748
25748: DISABLE
// begin case query ( QEndMission ) of 1 :
25749: LD_STRING QEndMission
25751: PPUSH
25752: CALL_OW 97
25756: PUSH
25757: LD_INT 1
25759: DOUBLE
25760: EQUAL
25761: IFTRUE 25765
25763: GO 25776
25765: POP
// begin end_the_mission_allowed = true ;
25766: LD_ADDR_OWVAR 57
25770: PUSH
25771: LD_INT 1
25773: ST_TO_ADDR
// end ; 2 :
25774: GO 25800
25776: LD_INT 2
25778: DOUBLE
25779: EQUAL
25780: IFTRUE 25784
25782: GO 25799
25784: POP
// begin fastEnd = 1 ;
25785: LD_ADDR_EXP 59
25789: PUSH
25790: LD_INT 1
25792: ST_TO_ADDR
// FinishMission ;
25793: CALL 25959 0 0
// end ; end ;
25797: GO 25800
25799: POP
// end ;
25800: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25801: LD_INT 54
25803: PPUSH
25804: LD_INT 1
25806: PPUSH
25807: CALL_OW 321
25811: PUSH
25812: LD_INT 2
25814: EQUAL
25815: PUSH
25816: LD_INT 55
25818: PPUSH
25819: LD_INT 1
25821: PPUSH
25822: CALL_OW 321
25826: PUSH
25827: LD_INT 2
25829: EQUAL
25830: AND
25831: PUSH
25832: LD_INT 21
25834: PPUSH
25835: LD_INT 1
25837: PPUSH
25838: CALL_OW 321
25842: PUSH
25843: LD_INT 2
25845: EQUAL
25846: AND
25847: PUSH
25848: LD_INT 22
25850: PPUSH
25851: LD_INT 1
25853: PPUSH
25854: CALL_OW 321
25858: PUSH
25859: LD_INT 2
25861: EQUAL
25862: AND
25863: PUSH
25864: LD_INT 12
25866: PPUSH
25867: LD_INT 1
25869: PPUSH
25870: CALL_OW 321
25874: PUSH
25875: LD_INT 2
25877: EQUAL
25878: AND
25879: PUSH
25880: LD_INT 32
25882: PPUSH
25883: LD_INT 1
25885: PPUSH
25886: CALL_OW 321
25890: PUSH
25891: LD_INT 2
25893: EQUAL
25894: AND
25895: PUSH
25896: LD_EXP 59
25900: PUSH
25901: LD_INT 0
25903: EQUAL
25904: AND
25905: PUSH
25906: LD_EXP 48
25910: PUSH
25911: LD_INT 1
25913: EQUAL
25914: AND
25915: PUSH
25916: LD_INT 22
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 21
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 69
25944: PUSH
25945: LD_INT 0
25947: EQUAL
25948: AND
25949: IFFALSE 25958
25951: GO 25953
25953: DISABLE
// FinishMission ;
25954: CALL 25959 0 0
25958: END
// export function FinishMission ; begin
25959: LD_INT 0
25961: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25962: LD_EXP 52
25966: PPUSH
25967: LD_STRING 10_KhatamStatus_1
25969: PPUSH
25970: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25974: LD_EXP 51
25978: PPUSH
25979: LD_STRING 10_GensherEscape_1
25981: PPUSH
25982: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25986: LD_INT 12
25988: PPUSH
25989: LD_INT 1
25991: PPUSH
25992: CALL_OW 321
25996: PUSH
25997: LD_INT 2
25999: EQUAL
26000: IFFALSE 26014
// begin AddMedal ( sights , 1 ) ;
26002: LD_STRING sights
26004: PPUSH
26005: LD_INT 1
26007: PPUSH
26008: CALL_OW 101
// end else
26012: GO 26025
// begin AddMedal ( sights , - 1 ) ;
26014: LD_STRING sights
26016: PPUSH
26017: LD_INT 1
26019: NEG
26020: PPUSH
26021: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26025: LD_INT 32
26027: PPUSH
26028: LD_INT 1
26030: PPUSH
26031: CALL_OW 321
26035: PUSH
26036: LD_INT 2
26038: EQUAL
26039: IFFALSE 26053
// begin AddMedal ( computers , 1 ) ;
26041: LD_STRING computers
26043: PPUSH
26044: LD_INT 1
26046: PPUSH
26047: CALL_OW 101
// end else
26051: GO 26064
// begin AddMedal ( computers , - 1 ) ;
26053: LD_STRING computers
26055: PPUSH
26056: LD_INT 1
26058: NEG
26059: PPUSH
26060: CALL_OW 101
// end ; if arabianEscape = 0 then
26064: LD_EXP 47
26068: PUSH
26069: LD_INT 0
26071: EQUAL
26072: IFFALSE 26096
// begin AddMedal ( renegades , 2 ) ;
26074: LD_STRING renegades
26076: PPUSH
26077: LD_INT 2
26079: PPUSH
26080: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26084: LD_INT 0
26086: PPUSH
26087: LD_STRING 10_ScientistsEscape_1
26089: PPUSH
26090: CALL_OW 39
// end else
26094: GO 26107
// begin AddMedal ( renegades , - 1 ) ;
26096: LD_STRING renegades
26098: PPUSH
26099: LD_INT 1
26101: NEG
26102: PPUSH
26103: CALL_OW 101
// end ; SaveEpsilonBase ;
26107: CALL 26838 0 0
// Query ( kaj ) ;
26111: LD_STRING kaj
26113: PPUSH
26114: CALL_OW 97
// GiveMedals ( Main ) ;
26118: LD_STRING Main
26120: PPUSH
26121: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26125: LD_INT 22
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 23
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 21
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 2
26157: PUSH
26158: LD_INT 25
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 25
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 25
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 25
26190: PUSH
26191: LD_INT 4
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 25
26200: PUSH
26201: LD_INT 5
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 25
26210: PUSH
26211: LD_INT 8
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: PPUSH
26233: CALL_OW 69
26237: PPUSH
26238: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26242: LD_EXP 1
26246: PPUSH
26247: LD_EXP 53
26251: PUSH
26252: LD_STRING JMM
26254: STR
26255: PPUSH
26256: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26260: LD_EXP 2
26264: PPUSH
26265: LD_EXP 53
26269: PUSH
26270: LD_STRING Brown
26272: STR
26273: PPUSH
26274: CALL 9986 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26278: LD_EXP 3
26282: PPUSH
26283: LD_EXP 53
26287: PUSH
26288: LD_STRING Donaldson
26290: STR
26291: PPUSH
26292: CALL 9986 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26296: LD_EXP 4
26300: PPUSH
26301: LD_EXP 53
26305: PUSH
26306: LD_STRING Bobby
26308: STR
26309: PPUSH
26310: CALL 9986 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26314: LD_EXP 5
26318: PPUSH
26319: LD_EXP 53
26323: PUSH
26324: LD_STRING Cyrus
26326: STR
26327: PPUSH
26328: CALL 9986 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26332: LD_EXP 6
26336: PPUSH
26337: LD_EXP 53
26341: PUSH
26342: LD_STRING Lisa
26344: STR
26345: PPUSH
26346: CALL 9986 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26350: LD_EXP 7
26354: PPUSH
26355: LD_EXP 53
26359: PUSH
26360: LD_STRING Frank
26362: STR
26363: PPUSH
26364: CALL 9986 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26368: LD_EXP 8
26372: PPUSH
26373: LD_EXP 53
26377: PUSH
26378: LD_STRING Kikuchi
26380: STR
26381: PPUSH
26382: CALL 9986 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26386: LD_EXP 9
26390: PPUSH
26391: LD_EXP 53
26395: PUSH
26396: LD_STRING Houten
26398: STR
26399: PPUSH
26400: CALL 9986 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26404: LD_EXP 10
26408: PPUSH
26409: LD_EXP 53
26413: PUSH
26414: LD_STRING Gary
26416: STR
26417: PPUSH
26418: CALL 9986 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26422: LD_EXP 19
26426: PPUSH
26427: LD_EXP 53
26431: PUSH
26432: LD_STRING Cornell
26434: STR
26435: PPUSH
26436: CALL 9986 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26440: LD_EXP 11
26444: PPUSH
26445: LD_EXP 53
26449: PUSH
26450: LD_STRING Simms
26452: STR
26453: PPUSH
26454: CALL 9986 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26458: LD_EXP 12
26462: PPUSH
26463: LD_EXP 53
26467: PUSH
26468: LD_STRING Denis
26470: STR
26471: PPUSH
26472: CALL 9986 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26476: LD_EXP 13
26480: PPUSH
26481: LD_EXP 53
26485: PUSH
26486: LD_STRING Joan
26488: STR
26489: PPUSH
26490: CALL 9986 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26494: LD_EXP 15
26498: PPUSH
26499: LD_EXP 53
26503: PUSH
26504: LD_STRING Gladstone
26506: STR
26507: PPUSH
26508: CALL 9986 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26512: LD_EXP 17
26516: PPUSH
26517: LD_EXP 53
26521: PUSH
26522: LD_STRING DeltaDoctor
26524: STR
26525: PPUSH
26526: CALL 9986 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26530: LD_EXP 22
26534: PPUSH
26535: LD_STRING 10c_lock
26537: PPUSH
26538: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26542: LD_INT 50
26544: PUSH
26545: EMPTY
26546: LIST
26547: PUSH
26548: LD_INT 22
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 21
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 2
26570: PUSH
26571: LD_INT 25
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 25
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 25
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 25
26603: PUSH
26604: LD_INT 4
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 25
26613: PUSH
26614: LD_INT 5
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 25
26623: PUSH
26624: LD_INT 8
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: PPUSH
26646: CALL_OW 69
26650: PUSH
26651: LD_EXP 1
26655: PUSH
26656: LD_EXP 2
26660: PUSH
26661: LD_EXP 3
26665: PUSH
26666: LD_EXP 4
26670: PUSH
26671: LD_EXP 5
26675: PUSH
26676: LD_EXP 6
26680: PUSH
26681: LD_EXP 7
26685: PUSH
26686: LD_EXP 15
26690: PUSH
26691: LD_EXP 8
26695: PUSH
26696: LD_EXP 12
26700: PUSH
26701: LD_EXP 13
26705: PUSH
26706: LD_EXP 9
26710: PUSH
26711: LD_EXP 11
26715: PUSH
26716: LD_EXP 10
26720: PUSH
26721: LD_EXP 17
26725: PUSH
26726: LD_EXP 19
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: DIFF
26749: PPUSH
26750: LD_STRING 10_other_survivors
26752: PPUSH
26753: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26757: LD_INT 50
26759: PUSH
26760: EMPTY
26761: LIST
26762: PUSH
26763: LD_INT 22
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 25
26788: PUSH
26789: LD_INT 16
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 25
26798: PUSH
26799: LD_INT 12
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: PPUSH
26822: LD_STRING 10_ape
26824: PPUSH
26825: CALL_OW 38
// YouWin ;
26829: CALL_OW 103
// end ;
26833: LD_VAR 0 1
26837: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26838: LD_INT 0
26840: PPUSH
26841: PPUSH
26842: PPUSH
26843: PPUSH
// epsilonBase = [ ] ;
26844: LD_ADDR_VAR 0 2
26848: PUSH
26849: EMPTY
26850: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26851: LD_ADDR_VAR 0 3
26855: PUSH
26856: LD_INT 22
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 21
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 50
26878: PUSH
26879: EMPTY
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: PPUSH
26887: CALL_OW 69
26891: ST_TO_ADDR
// for i in buildings do
26892: LD_ADDR_VAR 0 4
26896: PUSH
26897: LD_VAR 0 3
26901: PUSH
26902: FOR_IN
26903: IFFALSE 27340
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26905: LD_VAR 0 4
26909: PPUSH
26910: CALL_OW 266
26914: PUSH
26915: LD_INT 6
26917: PUSH
26918: LD_INT 7
26920: PUSH
26921: LD_INT 8
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: IN
26929: IFFALSE 27043
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_VAR 0 2
26940: PUSH
26941: LD_VAR 0 4
26945: PPUSH
26946: CALL_OW 266
26950: PUSH
26951: LD_VAR 0 4
26955: PPUSH
26956: CALL_OW 250
26960: PUSH
26961: LD_VAR 0 4
26965: PPUSH
26966: CALL_OW 251
26970: PUSH
26971: LD_VAR 0 4
26975: PPUSH
26976: CALL_OW 254
26980: PUSH
26981: LD_VAR 0 4
26985: PPUSH
26986: CALL_OW 267
26990: PUSH
26991: LD_VAR 0 4
26995: PPUSH
26996: CALL_OW 248
27000: PUSH
27001: LD_VAR 0 4
27005: PPUSH
27006: LD_INT 1
27008: PPUSH
27009: CALL_OW 268
27013: PUSH
27014: LD_VAR 0 4
27018: PPUSH
27019: LD_INT 2
27021: PPUSH
27022: CALL_OW 268
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: ADD
27040: ST_TO_ADDR
27041: GO 27338
// if GetBType ( i ) = b_bunker then
27043: LD_VAR 0 4
27047: PPUSH
27048: CALL_OW 266
27052: PUSH
27053: LD_INT 32
27055: EQUAL
27056: IFFALSE 27153
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: LD_VAR 0 2
27067: PUSH
27068: LD_VAR 0 4
27072: PPUSH
27073: CALL_OW 266
27077: PUSH
27078: LD_VAR 0 4
27082: PPUSH
27083: CALL_OW 250
27087: PUSH
27088: LD_VAR 0 4
27092: PPUSH
27093: CALL_OW 251
27097: PUSH
27098: LD_VAR 0 4
27102: PPUSH
27103: CALL_OW 254
27107: PUSH
27108: LD_VAR 0 4
27112: PPUSH
27113: CALL_OW 267
27117: PUSH
27118: LD_VAR 0 4
27122: PPUSH
27123: CALL_OW 248
27127: PUSH
27128: LD_VAR 0 4
27132: PPUSH
27133: CALL_OW 269
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: PUSH
27147: EMPTY
27148: LIST
27149: ADD
27150: ST_TO_ADDR
27151: GO 27338
// if GetBType ( i ) = b_factory then
27153: LD_VAR 0 4
27157: PPUSH
27158: CALL_OW 266
27162: PUSH
27163: LD_INT 3
27165: EQUAL
27166: IFFALSE 27256
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27168: LD_ADDR_VAR 0 2
27172: PUSH
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_INT 1
27180: PPUSH
27181: LD_VAR 0 4
27185: PPUSH
27186: CALL_OW 266
27190: PUSH
27191: LD_VAR 0 4
27195: PPUSH
27196: CALL_OW 250
27200: PUSH
27201: LD_VAR 0 4
27205: PPUSH
27206: CALL_OW 251
27210: PUSH
27211: LD_VAR 0 4
27215: PPUSH
27216: CALL_OW 254
27220: PUSH
27221: LD_VAR 0 4
27225: PPUSH
27226: CALL_OW 267
27230: PUSH
27231: LD_VAR 0 4
27235: PPUSH
27236: CALL_OW 248
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: PPUSH
27249: CALL_OW 2
27253: ST_TO_ADDR
27254: GO 27338
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27256: LD_ADDR_VAR 0 2
27260: PUSH
27261: LD_VAR 0 2
27265: PUSH
27266: LD_VAR 0 4
27270: PPUSH
27271: CALL_OW 266
27275: PUSH
27276: LD_VAR 0 4
27280: PPUSH
27281: CALL_OW 250
27285: PUSH
27286: LD_VAR 0 4
27290: PPUSH
27291: CALL_OW 251
27295: PUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: CALL_OW 254
27305: PUSH
27306: LD_VAR 0 4
27310: PPUSH
27311: CALL_OW 267
27315: PUSH
27316: LD_VAR 0 4
27320: PPUSH
27321: CALL_OW 248
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: ADD
27337: ST_TO_ADDR
// end ;
27338: GO 26902
27340: POP
27341: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27342: LD_VAR 0 2
27346: PPUSH
27347: LD_STRING 10_EpsilonBase
27349: PPUSH
27350: CALL_OW 39
// end ; end_of_file
27354: LD_VAR 0 1
27358: RET
// every 0 0$30 do
27359: GO 27361
27361: DISABLE
// begin enable ;
27362: ENABLE
// if cratesSpawned < 6 then
27363: LD_EXP 55
27367: PUSH
27368: LD_INT 6
27370: LESS
27371: IFFALSE 27408
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27373: LD_INT 3
27375: PPUSH
27376: LD_INT 5
27378: PPUSH
27379: CALL_OW 12
27383: PPUSH
27384: LD_INT 16
27386: PPUSH
27387: LD_INT 1
27389: PPUSH
27390: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27394: LD_ADDR_EXP 55
27398: PUSH
27399: LD_EXP 55
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27408: LD_EXP 55
27412: PUSH
27413: LD_INT 6
27415: GREATEREQUAL
27416: PUSH
27417: LD_EXP 55
27421: PUSH
27422: LD_INT 12
27424: LESS
27425: AND
27426: IFFALSE 27470
// begin wait ( 0 0$30 ) ;
27428: LD_INT 1050
27430: PPUSH
27431: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27435: LD_INT 3
27437: PPUSH
27438: LD_INT 5
27440: PPUSH
27441: CALL_OW 12
27445: PPUSH
27446: LD_INT 16
27448: PPUSH
27449: LD_INT 1
27451: PPUSH
27452: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27456: LD_ADDR_EXP 55
27460: PUSH
27461: LD_EXP 55
27465: PUSH
27466: LD_INT 1
27468: PLUS
27469: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27470: LD_EXP 55
27474: PUSH
27475: LD_INT 12
27477: GREATEREQUAL
27478: IFFALSE 27522
// begin wait ( 1 1$30 ) ;
27480: LD_INT 3150
27482: PPUSH
27483: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27487: LD_INT 3
27489: PPUSH
27490: LD_INT 5
27492: PPUSH
27493: CALL_OW 12
27497: PPUSH
27498: LD_INT 16
27500: PPUSH
27501: LD_INT 1
27503: PPUSH
27504: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27508: LD_ADDR_EXP 55
27512: PUSH
27513: LD_EXP 55
27517: PUSH
27518: LD_INT 1
27520: PLUS
27521: ST_TO_ADDR
// end ; end ;
27522: END
