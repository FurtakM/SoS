// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 29
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 21
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 30
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 39
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 40
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 41
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 42
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 43
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 51
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 48
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 47
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 50
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 62
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 52
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 66
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 67
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 64
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 54
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 53
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 57
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 60
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 61
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 63
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 58
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 59
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 65
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 55
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 56
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 68
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87471 0 1
// CreateNature ;
 321: CALL 27240 0 0
// PrepareDifficulty ;
 325: CALL 11758 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21618 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21618 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21618 0 2
// PrepareArabianCommander ;
 397: CALL 4216 0 0
// PrepareArabian ;
 401: CALL 4268 0 0
// BuildArabianBase ;
 405: CALL 14573 0 0
// TameApemans ;
 409: CALL 20423 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 68
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 63
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 59
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 50050 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 21
1418: PUSH
1419: LD_EXP 21
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 50050 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 21
1459: PUSH
1460: LD_EXP 21
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 50050 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 21
1500: PUSH
1501: LD_EXP 21
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 50050 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 21
1541: PUSH
1542: LD_EXP 21
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 50050 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 21
1582: PUSH
1583: LD_EXP 21
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 50050 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 21
1623: PUSH
1624: LD_EXP 21
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 50050 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 21
1664: PUSH
1665: LD_EXP 21
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 50050 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 21
1705: PUSH
1706: LD_EXP 21
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 50050 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 21
1746: PUSH
1747: LD_EXP 21
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 22
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 25
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 50050 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 21
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 22
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 29
2249: PUSH
2250: LD_EXP 29
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 22
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 22
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 22
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 29
2512: PUSH
2513: LD_EXP 29
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , false ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 30
2630: IFFALSE 2651
// Truman := PrepareUnit ( Truman , false ,  ) ;
2632: LD_ADDR_EXP 20
2636: PUSH
2637: LD_STRING Truman
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: CALL 50050 0 3
2650: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2651: LD_ADDR_EXP 11
2655: PUSH
2656: LD_STRING Simms
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: LD_STRING 
2664: PPUSH
2665: CALL 50050 0 3
2669: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2670: LD_ADDR_EXP 12
2674: PUSH
2675: LD_STRING Denis
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_STRING 08_
2683: PPUSH
2684: CALL 50050 0 3
2688: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2689: LD_ADDR_EXP 13
2693: PUSH
2694: LD_STRING Joan
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_STRING 08_
2702: PPUSH
2703: CALL 50050 0 3
2707: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2708: LD_STRING 08_Khatam
2710: PPUSH
2711: CALL_OW 28
2715: IFFALSE 2738
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2717: LD_ADDR_EXP 14
2721: PUSH
2722: LD_STRING Khatam
2724: PPUSH
2725: LD_INT 1
2727: PPUSH
2728: LD_STRING 08_
2730: PPUSH
2731: CALL 50050 0 3
2735: ST_TO_ADDR
2736: GO 2766
// if TestCharacters ( 03_Khatam ) then
2738: LD_STRING 03_Khatam
2740: PPUSH
2741: CALL_OW 28
2745: IFFALSE 2766
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2747: LD_ADDR_EXP 14
2751: PUSH
2752: LD_STRING Khatam
2754: PPUSH
2755: LD_INT 1
2757: PPUSH
2758: LD_STRING 03_
2760: PPUSH
2761: CALL 50050 0 3
2765: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2766: LD_ADDR_EXP 15
2770: PUSH
2771: LD_STRING Gladstone
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 08_
2779: PPUSH
2780: CALL 50050 0 3
2784: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2785: LD_ADDR_EXP 17
2789: PUSH
2790: LD_STRING DeltaDoctor
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_STRING 
2798: PPUSH
2799: CALL 50050 0 3
2803: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2804: LD_ADDR_EXP 7
2808: PUSH
2809: LD_STRING Frank
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_STRING 08_
2817: PPUSH
2818: CALL 50050 0 3
2822: ST_TO_ADDR
// if Frank then
2823: LD_EXP 7
2827: IFFALSE 2850
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2829: LD_ADDR_EXP 8
2833: PUSH
2834: LD_STRING Yamoko
2836: PPUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_STRING 
2842: PPUSH
2843: CALL 50050 0 3
2847: ST_TO_ADDR
2848: GO 2869
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2850: LD_ADDR_EXP 8
2854: PUSH
2855: LD_STRING Kikuchi
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_STRING 08_
2863: PPUSH
2864: CALL 50050 0 3
2868: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2869: LD_ADDR_EXP 23
2873: PUSH
2874: LD_STRING 09_others
2876: PPUSH
2877: CALL_OW 31
2881: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2882: LD_ADDR_EXP 24
2886: PUSH
2887: LD_STRING 09_apes
2889: PPUSH
2890: CALL_OW 31
2894: ST_TO_ADDR
// if Truman then
2895: LD_EXP 20
2899: IFFALSE 2916
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2901: LD_EXP 20
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2916: LD_EXP 11
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2931: LD_EXP 12
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2946: LD_EXP 13
2950: PPUSH
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2961: LD_EXP 14
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2976: LD_EXP 15
2980: PPUSH
2981: LD_INT 1
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2991: LD_EXP 17
2995: PPUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 49
// if Kikuchi then
3006: LD_EXP 8
3010: IFFALSE 3027
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3012: LD_EXP 8
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3027: LD_EXP 11
3031: PUSH
3032: LD_EXP 14
3036: PUSH
3037: LD_EXP 12
3041: PUSH
3042: LD_EXP 15
3046: PUSH
3047: LD_EXP 17
3051: PUSH
3052: LD_EXP 13
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: PPUSH
3065: LD_INT 4
3067: PPUSH
3068: CALL_OW 336
// if others09 > 2 then
3072: LD_EXP 23
3076: PUSH
3077: LD_INT 2
3079: GREATER
3080: IFFALSE 3161
// begin for i := 1 to 3 do
3082: LD_ADDR_VAR 0 2
3086: PUSH
3087: DOUBLE
3088: LD_INT 1
3090: DEC
3091: ST_TO_ADDR
3092: LD_INT 3
3094: PUSH
3095: FOR_TO
3096: IFFALSE 3157
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3098: LD_EXP 23
3102: PUSH
3103: LD_VAR 0 2
3107: ARRAY
3108: PPUSH
3109: LD_INT 1
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3119: LD_ADDR_EXP 23
3123: PUSH
3124: LD_EXP 23
3128: PPUSH
3129: LD_INT 1
3131: PPUSH
3132: CALL_OW 3
3136: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3137: LD_EXP 23
3141: PUSH
3142: LD_VAR 0 2
3146: ARRAY
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: CALL_OW 336
// end ;
3155: GO 3095
3157: POP
3158: POP
// end else
3159: GO 3221
// begin for i in others09 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_EXP 23
3170: PUSH
3171: FOR_IN
3172: IFFALSE 3219
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3174: LD_VAR 0 2
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 49
// others09 = others09 diff i ;
3189: LD_ADDR_EXP 23
3193: PUSH
3194: LD_EXP 23
3198: PUSH
3199: LD_VAR 0 2
3203: DIFF
3204: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3205: LD_VAR 0 2
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: CALL_OW 336
// end ;
3217: GO 3171
3219: POP
3220: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3221: LD_INT 22
3223: PUSH
3224: LD_INT 4
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 25
3233: PUSH
3234: LD_INT 2
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PPUSH
3245: CALL_OW 69
3249: PUSH
3250: LD_INT 0
3252: EQUAL
3253: IFFALSE 3385
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 22
3262: PUSH
3263: LD_INT 4
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 25
3272: PUSH
3273: LD_INT 2
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PPUSH
3284: CALL_OW 69
3288: PUSH
3289: LD_EXP 11
3293: PUSH
3294: LD_EXP 14
3298: PUSH
3299: LD_EXP 12
3303: PUSH
3304: LD_EXP 15
3308: PUSH
3309: LD_EXP 17
3313: PUSH
3314: LD_EXP 13
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: DIFF
3327: ST_TO_ADDR
// if not tmp then
3328: LD_VAR 0 3
3332: NOT
3333: IFFALSE 3369
// begin if Denis then
3335: LD_EXP 12
3339: IFFALSE 3355
// SetClass ( Denis , 2 ) else
3341: LD_EXP 12
3345: PPUSH
3346: LD_INT 2
3348: PPUSH
3349: CALL_OW 336
3353: GO 3367
// SetClass ( DeltaDoctor , 2 ) ;
3355: LD_EXP 17
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 336
// end else
3367: GO 3385
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 336
// end ; end ; for i in ape09 do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_EXP 24
3394: PUSH
3395: FOR_IN
3396: IFFALSE 3415
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 49
3413: GO 3395
3415: POP
3416: POP
// uc_side = 4 ;
3417: LD_ADDR_OWVAR 20
3421: PUSH
3422: LD_INT 4
3424: ST_TO_ADDR
// hc_class := 1 ;
3425: LD_ADDR_OWVAR 28
3429: PUSH
3430: LD_INT 1
3432: ST_TO_ADDR
// hc_sex := sex_female ;
3433: LD_ADDR_OWVAR 27
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// hc_gallery :=  ;
3441: LD_ADDR_OWVAR 33
3445: PUSH
3446: LD_STRING 
3448: ST_TO_ADDR
// hc_name :=  ;
3449: LD_ADDR_OWVAR 26
3453: PUSH
3454: LD_STRING 
3456: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3457: LD_ADDR_OWVAR 31
3461: PUSH
3462: LD_INT 1
3464: PUSH
3465: LD_INT 7
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: LD_INT 0
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// AmScout = CreateHuman ;
3480: LD_ADDR_EXP 18
3484: PUSH
3485: CALL_OW 44
3489: ST_TO_ADDR
// end ;
3490: LD_VAR 0 1
3494: RET
// export function PrepareCornell ; begin
3495: LD_INT 0
3497: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 4
3503: PPUSH
3504: CALL_OW 343
// uc_side = 4 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 4
3515: ST_TO_ADDR
// uc_nation = 1 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3524: LD_ADDR_EXP 19
3528: PUSH
3529: LD_STRING Cornel
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_STRING 03_
3537: PPUSH
3538: CALL 50050 0 3
3542: ST_TO_ADDR
// if not Cornell then
3543: LD_EXP 19
3547: NOT
3548: IFFALSE 3552
// exit ;
3550: GO 3660
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3552: LD_EXP 19
3556: PPUSH
3557: LD_INT 8
3559: PPUSH
3560: LD_INT 0
3562: PPUSH
3563: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3567: LD_EXP 19
3571: PPUSH
3572: LD_INT 350
3574: PPUSH
3575: CALL_OW 234
// if IsInUnit ( JMM ) then
3579: LD_EXP 1
3583: PPUSH
3584: CALL_OW 310
3588: IFFALSE 3631
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3590: LD_EXP 19
3594: PPUSH
3595: LD_EXP 1
3599: PPUSH
3600: CALL_OW 310
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 1
3614: PPUSH
3615: CALL_OW 310
3619: PPUSH
3620: CALL_OW 251
3624: PPUSH
3625: CALL_OW 111
3629: GO 3660
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3631: LD_EXP 19
3635: PPUSH
3636: LD_EXP 1
3640: PPUSH
3641: CALL_OW 250
3645: PPUSH
3646: LD_EXP 1
3650: PPUSH
3651: CALL_OW 251
3655: PPUSH
3656: CALL_OW 111
// end ;
3660: LD_VAR 0 1
3664: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3665: LD_EXP 20
3669: PPUSH
3670: LD_INT 17
3672: PPUSH
3673: LD_INT 31
3675: PPUSH
3676: CALL_OW 307
3680: IFFALSE 3694
3682: GO 3684
3684: DISABLE
// RemoveUnit ( Truman ) ;
3685: LD_EXP 20
3689: PPUSH
3690: CALL_OW 64
3694: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3695: LD_EXP 30
3699: PUSH
3700: LD_INT 1
3702: EQUAL
3703: PUSH
3704: LD_EXP 20
3708: PPUSH
3709: CALL_OW 302
3713: AND
3714: PUSH
3715: LD_EXP 20
3719: PPUSH
3720: CALL_OW 314
3724: NOT
3725: AND
3726: IFFALSE 3747
3728: GO 3730
3730: DISABLE
// begin enable ;
3731: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3732: LD_EXP 20
3736: PPUSH
3737: LD_INT 17
3739: PPUSH
3740: LD_INT 31
3742: PPUSH
3743: CALL_OW 111
// end ; end_of_file
3747: END
// export function PrepareRussians ; var i , un ; begin
3748: LD_INT 0
3750: PPUSH
3751: PPUSH
3752: PPUSH
// uc_side = 3 ;
3753: LD_ADDR_OWVAR 20
3757: PUSH
3758: LD_INT 3
3760: ST_TO_ADDR
// uc_nation = 3 ;
3761: LD_ADDR_OWVAR 21
3765: PUSH
3766: LD_INT 3
3768: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3769: LD_ADDR_EXP 26
3773: PUSH
3774: LD_STRING Tsaritsyn
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: LD_STRING 
3782: PPUSH
3783: CALL 50050 0 3
3787: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3788: LD_EXP 26
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 49
// for i = 1 to 14 do
3803: LD_ADDR_VAR 0 2
3807: PUSH
3808: DOUBLE
3809: LD_INT 1
3811: DEC
3812: ST_TO_ADDR
3813: LD_INT 14
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3903
// begin uc_side = 3 ;
3819: LD_ADDR_OWVAR 20
3823: PUSH
3824: LD_INT 3
3826: ST_TO_ADDR
// uc_nation = 3 ;
3827: LD_ADDR_OWVAR 21
3831: PUSH
3832: LD_INT 3
3834: ST_TO_ADDR
// hc_gallery =  ;
3835: LD_ADDR_OWVAR 33
3839: PUSH
3840: LD_STRING 
3842: ST_TO_ADDR
// hc_name =  ;
3843: LD_ADDR_OWVAR 26
3847: PUSH
3848: LD_STRING 
3850: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3851: LD_INT 0
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_EXP 37
3861: PPUSH
3862: LD_EXP 38
3866: PPUSH
3867: CALL_OW 12
3871: PPUSH
3872: CALL_OW 380
// un = CreateHuman ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: CALL_OW 44
3885: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3886: LD_VAR 0 3
3890: PPUSH
3891: LD_INT 3
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 49
// end ;
3901: GO 3816
3903: POP
3904: POP
// for i = 1 to 6 do
3905: LD_ADDR_VAR 0 2
3909: PUSH
3910: DOUBLE
3911: LD_INT 1
3913: DEC
3914: ST_TO_ADDR
3915: LD_INT 6
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4005
// begin uc_side = 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation = 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// hc_gallery =  ;
3937: LD_ADDR_OWVAR 33
3941: PUSH
3942: LD_STRING 
3944: ST_TO_ADDR
// hc_name =  ;
3945: LD_ADDR_OWVAR 26
3949: PUSH
3950: LD_STRING 
3952: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 2
3958: PPUSH
3959: LD_EXP 37
3963: PPUSH
3964: LD_EXP 38
3968: PPUSH
3969: CALL_OW 12
3973: PPUSH
3974: CALL_OW 380
// un = CreateHuman ;
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: CALL_OW 44
3987: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3988: LD_VAR 0 3
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 0
3998: PPUSH
3999: CALL_OW 49
// end ;
4003: GO 3918
4005: POP
4006: POP
// for i = 1 to 6 do
4007: LD_ADDR_VAR 0 2
4011: PUSH
4012: DOUBLE
4013: LD_INT 1
4015: DEC
4016: ST_TO_ADDR
4017: LD_INT 6
4019: PUSH
4020: FOR_TO
4021: IFFALSE 4107
// begin uc_side = 3 ;
4023: LD_ADDR_OWVAR 20
4027: PUSH
4028: LD_INT 3
4030: ST_TO_ADDR
// uc_nation = 3 ;
4031: LD_ADDR_OWVAR 21
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
// hc_gallery =  ;
4039: LD_ADDR_OWVAR 33
4043: PUSH
4044: LD_STRING 
4046: ST_TO_ADDR
// hc_name =  ;
4047: LD_ADDR_OWVAR 26
4051: PUSH
4052: LD_STRING 
4054: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4055: LD_INT 0
4057: PPUSH
4058: LD_INT 3
4060: PPUSH
4061: LD_EXP 37
4065: PPUSH
4066: LD_EXP 38
4070: PPUSH
4071: CALL_OW 12
4075: PPUSH
4076: CALL_OW 380
// un = CreateHuman ;
4080: LD_ADDR_VAR 0 3
4084: PUSH
4085: CALL_OW 44
4089: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4090: LD_VAR 0 3
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 0
4100: PPUSH
4101: CALL_OW 49
// end ;
4105: GO 4020
4107: POP
4108: POP
// for i = 1 to 4 do
4109: LD_ADDR_VAR 0 2
4113: PUSH
4114: DOUBLE
4115: LD_INT 1
4117: DEC
4118: ST_TO_ADDR
4119: LD_INT 4
4121: PUSH
4122: FOR_TO
4123: IFFALSE 4209
// begin uc_side = 3 ;
4125: LD_ADDR_OWVAR 20
4129: PUSH
4130: LD_INT 3
4132: ST_TO_ADDR
// uc_nation = 3 ;
4133: LD_ADDR_OWVAR 21
4137: PUSH
4138: LD_INT 3
4140: ST_TO_ADDR
// hc_gallery =  ;
4141: LD_ADDR_OWVAR 33
4145: PUSH
4146: LD_STRING 
4148: ST_TO_ADDR
// hc_name =  ;
4149: LD_ADDR_OWVAR 26
4153: PUSH
4154: LD_STRING 
4156: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4157: LD_INT 0
4159: PPUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_EXP 37
4167: PPUSH
4168: LD_EXP 38
4172: PPUSH
4173: CALL_OW 12
4177: PPUSH
4178: CALL_OW 380
// un = CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 49
// end ;
4207: GO 4122
4209: POP
4210: POP
// end ; end_of_file
4211: LD_VAR 0 1
4215: RET
// export function PrepareArabianCommander ; begin
4216: LD_INT 0
4218: PPUSH
// uc_side = 2 ;
4219: LD_ADDR_OWVAR 20
4223: PUSH
4224: LD_INT 2
4226: ST_TO_ADDR
// uc_nation = 2 ;
4227: LD_ADDR_OWVAR 21
4231: PUSH
4232: LD_INT 2
4234: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4235: LD_ADDR_EXP 27
4239: PUSH
4240: LD_STRING Dietrich
4242: PPUSH
4243: CALL_OW 25
4247: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4248: LD_EXP 27
4252: PPUSH
4253: LD_INT 4
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 49
// end ;
4263: LD_VAR 0 1
4267: RET
// export function PrepareArabian ; var i , un , veh ; begin
4268: LD_INT 0
4270: PPUSH
4271: PPUSH
4272: PPUSH
4273: PPUSH
// uc_side := 2 ;
4274: LD_ADDR_OWVAR 20
4278: PUSH
4279: LD_INT 2
4281: ST_TO_ADDR
// uc_nation := 2 ;
4282: LD_ADDR_OWVAR 21
4286: PUSH
4287: LD_INT 2
4289: ST_TO_ADDR
// if not Ahmed then
4290: LD_EXP 28
4294: NOT
4295: IFFALSE 4363
// begin InitHc ;
4297: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 1
4306: PPUSH
4307: LD_EXP 37
4311: PPUSH
4312: LD_EXP 38
4316: PUSH
4317: LD_INT 1
4319: PLUS
4320: PPUSH
4321: CALL_OW 12
4325: PPUSH
4326: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4330: LD_ADDR_OWVAR 26
4334: PUSH
4335: LD_STRING Ahmed Abbasid
4337: ST_TO_ADDR
// Ahmed := CreateHuman ;
4338: LD_ADDR_EXP 28
4342: PUSH
4343: CALL_OW 44
4347: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4348: LD_EXP 28
4352: PPUSH
4353: LD_INT 4
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 49
// end ; for i = 1 to 4 do
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: DOUBLE
4369: LD_INT 1
4371: DEC
4372: ST_TO_ADDR
4373: LD_INT 4
4375: PUSH
4376: FOR_TO
4377: IFFALSE 4463
// begin uc_side = 2 ;
4379: LD_ADDR_OWVAR 20
4383: PUSH
4384: LD_INT 2
4386: ST_TO_ADDR
// uc_nation = 2 ;
4387: LD_ADDR_OWVAR 21
4391: PUSH
4392: LD_INT 2
4394: ST_TO_ADDR
// hc_gallery =  ;
4395: LD_ADDR_OWVAR 33
4399: PUSH
4400: LD_STRING 
4402: ST_TO_ADDR
// hc_name =  ;
4403: LD_ADDR_OWVAR 26
4407: PUSH
4408: LD_STRING 
4410: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4411: LD_INT 0
4413: PPUSH
4414: LD_INT 2
4416: PPUSH
4417: LD_EXP 37
4421: PPUSH
4422: LD_EXP 38
4426: PPUSH
4427: CALL_OW 12
4431: PPUSH
4432: CALL_OW 380
// un = CreateHuman ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: CALL_OW 44
4445: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_INT 4
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 49
// end ;
4461: GO 4376
4463: POP
4464: POP
// for i = 1 to 5 do
4465: LD_ADDR_VAR 0 2
4469: PUSH
4470: DOUBLE
4471: LD_INT 1
4473: DEC
4474: ST_TO_ADDR
4475: LD_INT 5
4477: PUSH
4478: FOR_TO
4479: IFFALSE 4565
// begin uc_side = 2 ;
4481: LD_ADDR_OWVAR 20
4485: PUSH
4486: LD_INT 2
4488: ST_TO_ADDR
// uc_nation = 2 ;
4489: LD_ADDR_OWVAR 21
4493: PUSH
4494: LD_INT 2
4496: ST_TO_ADDR
// hc_gallery =  ;
4497: LD_ADDR_OWVAR 33
4501: PUSH
4502: LD_STRING 
4504: ST_TO_ADDR
// hc_name =  ;
4505: LD_ADDR_OWVAR 26
4509: PUSH
4510: LD_STRING 
4512: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4513: LD_INT 0
4515: PPUSH
4516: LD_INT 1
4518: PPUSH
4519: LD_EXP 37
4523: PPUSH
4524: LD_EXP 38
4528: PPUSH
4529: CALL_OW 12
4533: PPUSH
4534: CALL_OW 380
// un = CreateHuman ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: CALL_OW 44
4547: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4548: LD_VAR 0 3
4552: PPUSH
4553: LD_INT 4
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 49
// end ;
4563: GO 4478
4565: POP
4566: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: DOUBLE
4573: LD_INT 1
4575: DEC
4576: ST_TO_ADDR
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: LD_INT 4
4585: PUSH
4586: LD_INT 4
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_OWVAR 67
4599: ARRAY
4600: PUSH
4601: FOR_TO
4602: IFFALSE 4688
// begin uc_side = 2 ;
4604: LD_ADDR_OWVAR 20
4608: PUSH
4609: LD_INT 2
4611: ST_TO_ADDR
// uc_nation = 2 ;
4612: LD_ADDR_OWVAR 21
4616: PUSH
4617: LD_INT 2
4619: ST_TO_ADDR
// hc_gallery =  ;
4620: LD_ADDR_OWVAR 33
4624: PUSH
4625: LD_STRING 
4627: ST_TO_ADDR
// hc_name =  ;
4628: LD_ADDR_OWVAR 26
4632: PUSH
4633: LD_STRING 
4635: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4636: LD_INT 0
4638: PPUSH
4639: LD_INT 4
4641: PPUSH
4642: LD_EXP 37
4646: PPUSH
4647: LD_EXP 38
4651: PPUSH
4652: CALL_OW 12
4656: PPUSH
4657: CALL_OW 380
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 4
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4601
4688: POP
4689: POP
// for i = 1 to 2 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_INT 2
4702: PUSH
4703: FOR_TO
4704: IFFALSE 4834
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4706: LD_ADDR_VAR 0 4
4710: PUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 2
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: LD_INT 21
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 58
4733: PUSH
4734: EMPTY
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: LIST
4741: PPUSH
4742: CALL_OW 69
4746: ST_TO_ADDR
// uc_side = 2 ;
4747: LD_ADDR_OWVAR 20
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// uc_nation = 2 ;
4755: LD_ADDR_OWVAR 21
4759: PUSH
4760: LD_INT 2
4762: ST_TO_ADDR
// hc_gallery =  ;
4763: LD_ADDR_OWVAR 33
4767: PUSH
4768: LD_STRING 
4770: ST_TO_ADDR
// hc_name =  ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING 
4778: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4779: LD_INT 0
4781: PPUSH
4782: LD_INT 3
4784: PPUSH
4785: LD_EXP 37
4789: PPUSH
4790: LD_EXP 38
4794: PPUSH
4795: CALL_OW 12
4799: PPUSH
4800: CALL_OW 380
// un = CreateHuman ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: CALL_OW 44
4813: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_VAR 0 4
4823: PUSH
4824: LD_INT 1
4826: ARRAY
4827: PPUSH
4828: CALL_OW 52
// end ;
4832: GO 4703
4834: POP
4835: POP
// end ;
4836: LD_VAR 0 1
4840: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4841: LD_INT 0
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
// for i := 1 to 2 do
4849: LD_ADDR_VAR 0 2
4853: PUSH
4854: DOUBLE
4855: LD_INT 1
4857: DEC
4858: ST_TO_ADDR
4859: LD_INT 2
4861: PUSH
4862: FOR_TO
4863: IFFALSE 4989
// begin uc_side = 5 ;
4865: LD_ADDR_OWVAR 20
4869: PUSH
4870: LD_INT 5
4872: ST_TO_ADDR
// uc_nation = 2 ;
4873: LD_ADDR_OWVAR 21
4877: PUSH
4878: LD_INT 2
4880: ST_TO_ADDR
// vc_chassis := 31 ;
4881: LD_ADDR_OWVAR 37
4885: PUSH
4886: LD_INT 31
4888: ST_TO_ADDR
// vc_control := control_rider ;
4889: LD_ADDR_OWVAR 38
4893: PUSH
4894: LD_INT 4
4896: ST_TO_ADDR
// animal := CreateVehicle ;
4897: LD_ADDR_VAR 0 3
4901: PUSH
4902: CALL_OW 45
4906: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4907: LD_VAR 0 3
4911: PPUSH
4912: LD_INT 7
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL_OW 49
// hc_gallery =  ;
4922: LD_ADDR_OWVAR 33
4926: PUSH
4927: LD_STRING 
4929: ST_TO_ADDR
// hc_name =  ;
4930: LD_ADDR_OWVAR 26
4934: PUSH
4935: LD_STRING 
4937: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4938: LD_INT 0
4940: PPUSH
4941: LD_INT 11
4943: PPUSH
4944: LD_EXP 37
4948: PPUSH
4949: LD_EXP 38
4953: PPUSH
4954: CALL_OW 12
4958: PPUSH
4959: CALL_OW 380
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 4
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4973: LD_VAR 0 4
4977: PPUSH
4978: LD_VAR 0 3
4982: PPUSH
4983: CALL_OW 52
// end ;
4987: GO 4862
4989: POP
4990: POP
// repeat wait ( 0 0$1 ) ;
4991: LD_INT 35
4993: PPUSH
4994: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4998: LD_ADDR_VAR 0 5
5002: PUSH
5003: LD_INT 22
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 69
5017: PPUSH
5018: LD_VAR 0 2
5022: PPUSH
5023: CALL_OW 74
5027: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5028: LD_ADDR_VAR 0 6
5032: PUSH
5033: LD_INT 22
5035: PUSH
5036: LD_INT 1
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 2
5045: PUSH
5046: LD_INT 59
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: LD_INT 21
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: PPUSH
5085: CALL_OW 69
5089: PPUSH
5090: LD_VAR 0 2
5094: PPUSH
5095: CALL_OW 74
5099: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5100: LD_ADDR_VAR 0 2
5104: PUSH
5105: LD_INT 22
5107: PUSH
5108: LD_INT 5
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: LD_INT 25
5117: PUSH
5118: LD_INT 11
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PPUSH
5129: CALL_OW 69
5133: PUSH
5134: FOR_IN
5135: IFFALSE 5205
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5137: LD_VAR 0 2
5141: PPUSH
5142: LD_VAR 0 5
5146: PPUSH
5147: CALL_OW 296
5151: PUSH
5152: LD_INT 8
5154: PLUS
5155: PUSH
5156: LD_VAR 0 2
5160: PPUSH
5161: LD_VAR 0 6
5165: PPUSH
5166: CALL_OW 296
5170: LESS
5171: IFFALSE 5189
// ComAttackUnit ( i , target1 ) else
5173: LD_VAR 0 2
5177: PPUSH
5178: LD_VAR 0 5
5182: PPUSH
5183: CALL_OW 115
5187: GO 5203
// ComAttackUnit ( i , target2 ) ;
5189: LD_VAR 0 2
5193: PPUSH
5194: LD_VAR 0 6
5198: PPUSH
5199: CALL_OW 115
// end ;
5203: GO 5134
5205: POP
5206: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5207: LD_INT 22
5209: PUSH
5210: LD_INT 5
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: LD_INT 25
5219: PUSH
5220: LD_INT 11
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: PUSH
5236: LD_INT 0
5238: EQUAL
5239: PUSH
5240: LD_INT 22
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PPUSH
5250: CALL_OW 69
5254: PUSH
5255: LD_INT 0
5257: EQUAL
5258: OR
5259: IFFALSE 4991
// end ; end_of_file
5261: LD_VAR 0 1
5265: RET
// every 0 0$1 do
5266: GO 5268
5268: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_INT 19
5274: PPUSH
5275: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5279: LD_EXP 11
5283: PPUSH
5284: CALL_OW 87
// wait ( 0 0$3 ) ;
5288: LD_INT 105
5290: PPUSH
5291: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5295: LD_EXP 1
5299: PPUSH
5300: CALL_OW 310
5304: PPUSH
5305: CALL_OW 85
// Wait ( 0 0$1 ) ;
5309: LD_INT 35
5311: PPUSH
5312: CALL_OW 67
// if IsOk ( Gary ) then
5316: LD_EXP 10
5320: PPUSH
5321: CALL_OW 302
5325: IFFALSE 5363
// begin Say ( Gary , D2-Gary-1 ) ;
5327: LD_EXP 10
5331: PPUSH
5332: LD_STRING D2-Gary-1
5334: PPUSH
5335: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5339: LD_EXP 1
5343: PPUSH
5344: LD_STRING D2-JMM-1
5346: PPUSH
5347: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5351: LD_EXP 10
5355: PPUSH
5356: LD_STRING D2-Gary-2
5358: PPUSH
5359: CALL_OW 88
// end ; Video ( false ) ;
5363: LD_INT 0
5365: PPUSH
5366: CALL 87471 0 1
// ChangeMissionObjectives ( M1 ) ;
5370: LD_STRING M1
5372: PPUSH
5373: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5377: LD_INT 38
5379: PPUSH
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 100
5385: PPUSH
5386: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5390: LD_INT 47
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: LD_INT 50
5398: PPUSH
5399: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5403: LD_INT 47
5405: PPUSH
5406: LD_INT 3
5408: PPUSH
5409: LD_INT 50
5411: PPUSH
5412: CALL_OW 291
// SaveForQuickRestart ;
5416: CALL_OW 22
// end ;
5420: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5421: LD_EXP 1
5425: PPUSH
5426: LD_EXP 11
5430: PPUSH
5431: CALL_OW 296
5435: PUSH
5436: LD_INT 15
5438: LESS
5439: IFFALSE 6267
5441: GO 5443
5443: DISABLE
5444: LD_INT 0
5446: PPUSH
// begin wait ( 0 0$3 ) ;
5447: LD_INT 105
5449: PPUSH
5450: CALL_OW 67
// Video ( true ) ;
5454: LD_INT 1
5456: PPUSH
5457: CALL 87471 0 1
// ComExitVehicle ( JMM ) ;
5461: LD_EXP 1
5465: PPUSH
5466: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5470: LD_EXP 1
5474: PPUSH
5475: CALL_OW 87
// if Truman then
5479: LD_EXP 20
5483: IFFALSE 5620
// begin ComMoveUnit ( Truman , JMM ) ;
5485: LD_EXP 20
5489: PPUSH
5490: LD_EXP 1
5494: PPUSH
5495: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5499: LD_INT 35
5501: PPUSH
5502: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5506: LD_EXP 20
5510: PPUSH
5511: LD_EXP 1
5515: PPUSH
5516: CALL_OW 296
5520: PUSH
5521: LD_INT 6
5523: LESS
5524: IFFALSE 5499
// ComTurnUnit ( Truman , JMM ) ;
5526: LD_EXP 20
5530: PPUSH
5531: LD_EXP 1
5535: PPUSH
5536: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5540: LD_EXP 1
5544: PPUSH
5545: LD_EXP 20
5549: PPUSH
5550: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5554: LD_EXP 20
5558: PPUSH
5559: LD_STRING D2-Tru-1
5561: PPUSH
5562: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5566: LD_EXP 1
5570: PPUSH
5571: LD_STRING D2-JMM-Tru-1
5573: PPUSH
5574: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5578: LD_EXP 20
5582: PPUSH
5583: LD_STRING D2-Tru-2
5585: PPUSH
5586: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5590: LD_EXP 20
5594: PPUSH
5595: LD_INT 79
5597: PPUSH
5598: LD_INT 41
5600: PPUSH
5601: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5605: LD_EXP 20
5609: PPUSH
5610: LD_INT 17
5612: PPUSH
5613: LD_INT 31
5615: PPUSH
5616: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5620: LD_EXP 1
5624: PPUSH
5625: LD_EXP 11
5629: PPUSH
5630: CALL_OW 179
// p := 15 ;
5634: LD_ADDR_VAR 0 1
5638: PUSH
5639: LD_INT 15
5641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5642: LD_INT 35
5644: PPUSH
5645: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5649: LD_EXP 11
5653: PUSH
5654: LD_EXP 13
5658: PUSH
5659: LD_EXP 12
5663: PUSH
5664: LD_EXP 14
5668: PUSH
5669: LD_EXP 8
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: PPUSH
5681: LD_EXP 1
5685: PPUSH
5686: CALL_OW 112
// p := p - 1 ;
5690: LD_ADDR_VAR 0 1
5694: PUSH
5695: LD_VAR 0 1
5699: PUSH
5700: LD_INT 1
5702: MINUS
5703: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_EXP 11
5713: PPUSH
5714: CALL_OW 296
5718: PUSH
5719: LD_INT 5
5721: LESS
5722: PUSH
5723: LD_VAR 0 1
5727: PUSH
5728: LD_INT 0
5730: LESSEQUAL
5731: OR
5732: IFFALSE 5642
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5734: LD_EXP 11
5738: PUSH
5739: LD_EXP 13
5743: PUSH
5744: LD_EXP 12
5748: PUSH
5749: LD_EXP 14
5753: PUSH
5754: LD_EXP 8
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: LD_EXP 1
5770: PPUSH
5771: CALL_OW 119
// if not IsInUnit ( JMM ) then
5775: LD_EXP 1
5779: PPUSH
5780: CALL_OW 310
5784: NOT
5785: IFFALSE 5801
// ComTurnUnit ( JMM , Simms ) ;
5787: LD_EXP 1
5791: PPUSH
5792: LD_EXP 11
5796: PPUSH
5797: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5801: LD_EXP 11
5805: PUSH
5806: LD_EXP 13
5810: PUSH
5811: LD_EXP 12
5815: PUSH
5816: LD_EXP 14
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: PPUSH
5827: LD_EXP 1
5831: PPUSH
5832: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5836: LD_EXP 1
5840: PUSH
5841: LD_EXP 11
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5854: LD_EXP 11
5858: PPUSH
5859: LD_STRING D2a-Sim-1
5861: PPUSH
5862: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D2a-JMM-1
5873: PPUSH
5874: CALL_OW 88
// if IsOk ( Joan ) then
5878: LD_EXP 13
5882: PPUSH
5883: CALL_OW 302
5887: IFFALSE 5965
// begin if not IsInUnit ( JMM ) then
5889: LD_EXP 1
5893: PPUSH
5894: CALL_OW 310
5898: NOT
5899: IFFALSE 5915
// ComTurnUnit ( JMM , Joan ) ;
5901: LD_EXP 1
5905: PPUSH
5906: LD_EXP 13
5910: PPUSH
5911: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5915: LD_EXP 13
5919: PPUSH
5920: LD_EXP 1
5924: PPUSH
5925: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5929: LD_EXP 13
5933: PPUSH
5934: LD_STRING D2b-Joan-1
5936: PPUSH
5937: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5941: LD_EXP 1
5945: PPUSH
5946: LD_STRING D2b-JMM-1
5948: PPUSH
5949: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5953: LD_EXP 13
5957: PPUSH
5958: LD_STRING D2b-Joan-2
5960: PPUSH
5961: CALL_OW 88
// end ; if IsOk ( Denis ) then
5965: LD_EXP 12
5969: PPUSH
5970: CALL_OW 302
5974: IFFALSE 6028
// begin if not IsInUnit ( JMM ) then
5976: LD_EXP 1
5980: PPUSH
5981: CALL_OW 310
5985: NOT
5986: IFFALSE 6002
// ComTurnUnit ( JMM , Denis ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_EXP 12
5997: PPUSH
5998: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6002: LD_EXP 12
6006: PPUSH
6007: LD_EXP 1
6011: PPUSH
6012: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6016: LD_EXP 12
6020: PPUSH
6021: LD_STRING D2c-Den-1
6023: PPUSH
6024: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6028: LD_EXP 8
6032: PPUSH
6033: CALL_OW 302
6037: PUSH
6038: LD_STRING 08_Kikuchi
6040: PPUSH
6041: CALL_OW 28
6045: NOT
6046: AND
6047: IFFALSE 6142
// begin repeat wait ( 0 0$1 ) ;
6049: LD_INT 35
6051: PPUSH
6052: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6056: LD_EXP 8
6060: PPUSH
6061: LD_EXP 1
6065: PPUSH
6066: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6070: LD_EXP 1
6074: PPUSH
6075: LD_EXP 8
6079: PPUSH
6080: CALL_OW 296
6084: PUSH
6085: LD_INT 5
6087: LESS
6088: IFFALSE 6049
// ComTurnUnit ( Kikuchi , JMM ) ;
6090: LD_EXP 8
6094: PPUSH
6095: LD_EXP 1
6099: PPUSH
6100: CALL_OW 119
// if not IsInUnit ( JMM ) then
6104: LD_EXP 1
6108: PPUSH
6109: CALL_OW 310
6113: NOT
6114: IFFALSE 6130
// ComTurnUnit ( JMM , Kikuchi ) ;
6116: LD_EXP 1
6120: PPUSH
6121: LD_EXP 8
6125: PPUSH
6126: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6130: LD_EXP 8
6134: PPUSH
6135: LD_STRING D3b-Yam-1
6137: PPUSH
6138: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6142: LD_EXP 14
6146: PPUSH
6147: CALL_OW 302
6151: IFFALSE 6217
// begin if not IsInUnit ( JMM ) then
6153: LD_EXP 1
6157: PPUSH
6158: CALL_OW 310
6162: NOT
6163: IFFALSE 6179
// ComTurnUnit ( JMM , Khatam ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_EXP 14
6174: PPUSH
6175: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6179: LD_EXP 14
6183: PPUSH
6184: LD_EXP 1
6188: PPUSH
6189: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6193: LD_EXP 1
6197: PPUSH
6198: LD_STRING D2c-JMM-1
6200: PPUSH
6201: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6205: LD_EXP 14
6209: PPUSH
6210: LD_STRING D2c-Khat-1
6212: PPUSH
6213: CALL_OW 88
// end ; Video ( false ) ;
6217: LD_INT 0
6219: PPUSH
6220: CALL 87471 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6224: LD_INT 22
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PUSH
6239: LD_EXP 20
6243: DIFF
6244: PPUSH
6245: LD_INT 1
6247: PPUSH
6248: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6252: LD_STRING M1a
6254: PPUSH
6255: CALL_OW 337
// joinEpsilon := 1 ;
6259: LD_ADDR_EXP 30
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// end ;
6267: PPOPN 1
6269: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6270: LD_INT 38
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 289
6280: PUSH
6281: LD_INT 0
6283: EQUAL
6284: PUSH
6285: LD_INT 47
6287: PPUSH
6288: LD_INT 1
6290: PPUSH
6291: CALL_OW 289
6295: PUSH
6296: LD_INT 0
6298: EQUAL
6299: AND
6300: PUSH
6301: LD_INT 47
6303: PPUSH
6304: LD_INT 2
6306: PPUSH
6307: CALL_OW 289
6311: PUSH
6312: LD_INT 0
6314: EQUAL
6315: AND
6316: IFFALSE 6441
6318: GO 6320
6320: DISABLE
6321: LD_INT 0
6323: PPUSH
// begin p := 0 ;
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6332: LD_INT 38
6334: PUSH
6335: LD_INT 47
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PPUSH
6342: LD_INT 56
6344: PPUSH
6345: LD_INT 0
6347: PPUSH
6348: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6352: LD_INT 35
6354: PPUSH
6355: CALL_OW 67
// p := p + 1 ;
6359: LD_ADDR_VAR 0 1
6363: PUSH
6364: LD_VAR 0 1
6368: PUSH
6369: LD_INT 1
6371: PLUS
6372: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6373: LD_INT 38
6375: PUSH
6376: LD_INT 47
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PPUSH
6383: LD_INT 56
6385: PPUSH
6386: LD_INT 0
6388: PPUSH
6389: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6393: LD_INT 38
6395: PPUSH
6396: LD_INT 27
6398: PPUSH
6399: CALL_OW 308
6403: IFFALSE 6412
// RemoveUnit ( cargo1 ) ;
6405: LD_INT 38
6407: PPUSH
6408: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6412: LD_INT 47
6414: PPUSH
6415: LD_INT 27
6417: PPUSH
6418: CALL_OW 308
6422: IFFALSE 6431
// RemoveUnit ( cargo2 ) ;
6424: LD_INT 47
6426: PPUSH
6427: CALL_OW 64
// until p > 30 ;
6431: LD_VAR 0 1
6435: PUSH
6436: LD_INT 30
6438: GREATER
6439: IFFALSE 6352
// end ;
6441: PPOPN 1
6443: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6444: LD_EXP 66
6448: PUSH
6449: LD_INT 1
6451: EQUAL
6452: IFFALSE 7626
6454: GO 6456
6456: DISABLE
6457: LD_INT 0
6459: PPUSH
6460: PPUSH
6461: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6462: LD_ADDR_VAR 0 1
6466: PUSH
6467: LD_INT 22
6469: PUSH
6470: LD_INT 1
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 4
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 26
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PPUSH
6502: CALL_OW 69
6506: PUSH
6507: LD_EXP 1
6511: PUSH
6512: LD_EXP 2
6516: PUSH
6517: LD_EXP 3
6521: PUSH
6522: LD_EXP 4
6526: PUSH
6527: LD_EXP 5
6531: PUSH
6532: LD_EXP 6
6536: PUSH
6537: LD_EXP 7
6541: PUSH
6542: LD_EXP 8
6546: PUSH
6547: LD_EXP 9
6551: PUSH
6552: LD_EXP 10
6556: PUSH
6557: LD_EXP 11
6561: PUSH
6562: LD_EXP 12
6566: PUSH
6567: LD_EXP 13
6571: PUSH
6572: LD_EXP 14
6576: PUSH
6577: LD_EXP 15
6581: PUSH
6582: LD_EXP 16
6586: PUSH
6587: LD_EXP 17
6591: PUSH
6592: LD_EXP 18
6596: PUSH
6597: LD_EXP 19
6601: PUSH
6602: LD_EXP 25
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: DIFF
6629: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6630: LD_ADDR_VAR 0 2
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 26
6647: PUSH
6648: LD_INT 1
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 25
6660: PUSH
6661: LD_INT 1
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 25
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 25
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 69
6703: PUSH
6704: LD_EXP 1
6708: PUSH
6709: LD_EXP 2
6713: PUSH
6714: LD_EXP 3
6718: PUSH
6719: LD_EXP 4
6723: PUSH
6724: LD_EXP 5
6728: PUSH
6729: LD_EXP 6
6733: PUSH
6734: LD_EXP 7
6738: PUSH
6739: LD_EXP 8
6743: PUSH
6744: LD_EXP 9
6748: PUSH
6749: LD_EXP 10
6753: PUSH
6754: LD_EXP 11
6758: PUSH
6759: LD_EXP 12
6763: PUSH
6764: LD_EXP 13
6768: PUSH
6769: LD_EXP 14
6773: PUSH
6774: LD_EXP 15
6778: PUSH
6779: LD_EXP 16
6783: PUSH
6784: LD_EXP 17
6788: PUSH
6789: LD_EXP 18
6793: PUSH
6794: LD_EXP 19
6798: PUSH
6799: LD_EXP 25
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: DIFF
6826: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6827: LD_EXP 10
6831: PUSH
6832: LD_VAR 0 2
6836: OR
6837: PUSH
6838: LD_EXP 17
6842: PUSH
6843: LD_VAR 0 1
6847: OR
6848: AND
6849: IFFALSE 7068
// begin DialogueOn ;
6851: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6855: LD_EXP 17
6859: PPUSH
6860: CALL_OW 302
6864: IFFALSE 6880
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6866: LD_EXP 17
6870: PPUSH
6871: LD_STRING D3-Sci1-1
6873: PPUSH
6874: CALL_OW 88
6878: GO 6892
// Say ( tmp1 , D3-Sci1-1 ) ;
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_STRING D3-Sci1-1
6887: PPUSH
6888: CALL_OW 88
// if IsOk ( Gary ) then
6892: LD_EXP 10
6896: PPUSH
6897: CALL_OW 302
6901: IFFALSE 6917
// Say ( Gary , D3-Gary-1 ) else
6903: LD_EXP 10
6907: PPUSH
6908: LD_STRING D3-Gary-1
6910: PPUSH
6911: CALL_OW 88
6915: GO 6929
// Say ( tmp2 , D3-Gary-1 ) ;
6917: LD_VAR 0 2
6921: PPUSH
6922: LD_STRING D3-Gary-1
6924: PPUSH
6925: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6929: LD_EXP 17
6933: PPUSH
6934: CALL_OW 302
6938: IFFALSE 6954
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6940: LD_EXP 17
6944: PPUSH
6945: LD_STRING D3-Sci1-2
6947: PPUSH
6948: CALL_OW 88
6952: GO 6966
// Say ( tmp1 , D3-Sci1-2 ) ;
6954: LD_VAR 0 1
6958: PPUSH
6959: LD_STRING D3-Sci1-2
6961: PPUSH
6962: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6966: LD_EXP 1
6970: PPUSH
6971: LD_STRING D3-JMM-2
6973: PPUSH
6974: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6978: LD_EXP 17
6982: PPUSH
6983: CALL_OW 302
6987: IFFALSE 7003
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6989: LD_EXP 17
6993: PPUSH
6994: LD_STRING D3-Sci1-3
6996: PPUSH
6997: CALL_OW 88
7001: GO 7015
// Say ( tmp1 , D3-Sci1-3 ) ;
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_STRING D3-Sci1-3
7010: PPUSH
7011: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7015: LD_EXP 1
7019: PPUSH
7020: LD_STRING D3-JMM-3
7022: PPUSH
7023: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7027: LD_EXP 17
7031: PPUSH
7032: CALL_OW 302
7036: IFFALSE 7052
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7038: LD_EXP 17
7042: PPUSH
7043: LD_STRING D3-Sci1-4
7045: PPUSH
7046: CALL_OW 88
7050: GO 7064
// Say ( tmp1 , D3-Sci1-4 ) ;
7052: LD_VAR 0 1
7056: PPUSH
7057: LD_STRING D3-Sci1-4
7059: PPUSH
7060: CALL_OW 88
// DialogueOff ;
7064: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7068: LD_INT 12
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: LD_INT 1
7076: PPUSH
7077: CALL_OW 322
// SetTech ( tech_rocket , 1 , state_enabled ) ;
7081: LD_INT 40
7083: PPUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_INT 1
7089: PPUSH
7090: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7094: LD_INT 32
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_INT 1
7102: PPUSH
7103: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7107: LD_INT 12
7109: PPUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_INT 1
7115: PPUSH
7116: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7120: LD_INT 33
7122: PPUSH
7123: LD_INT 1
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7133: LD_STRING M2
7135: PPUSH
7136: CALL_OW 337
// wait ( 3 3$0 ) ;
7140: LD_INT 6300
7142: PPUSH
7143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7147: LD_INT 35
7149: PPUSH
7150: CALL_OW 67
// until not InBattle ( 1 ) ;
7154: LD_INT 1
7156: PPUSH
7157: CALL_OW 463
7161: NOT
7162: IFFALSE 7147
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7164: LD_EXP 11
7168: PPUSH
7169: CALL_OW 302
7173: PUSH
7174: LD_EXP 17
7178: PPUSH
7179: CALL_OW 302
7183: AND
7184: IFFALSE 7353
// begin DialogueOn ;
7186: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7190: LD_EXP 11
7194: PPUSH
7195: LD_STRING D3a-Sim-1
7197: PPUSH
7198: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7202: LD_EXP 17
7206: PPUSH
7207: LD_STRING D3a-Sci1-1
7209: PPUSH
7210: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7214: LD_EXP 11
7218: PPUSH
7219: LD_STRING D3a-Sim-2
7221: PPUSH
7222: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7226: LD_EXP 17
7230: PPUSH
7231: LD_STRING D3a-Sci1-2
7233: PPUSH
7234: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7238: LD_EXP 11
7242: PPUSH
7243: LD_STRING D3a-Sim-3
7245: PPUSH
7246: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7250: LD_EXP 17
7254: PPUSH
7255: LD_STRING D3a-Sci1-3
7257: PPUSH
7258: CALL_OW 88
// if IsOK ( Joan ) then
7262: LD_EXP 13
7266: PPUSH
7267: CALL_OW 302
7271: IFFALSE 7287
// Say ( Simms , D3a-Sim-4 ) else
7273: LD_EXP 11
7277: PPUSH
7278: LD_STRING D3a-Sim-4
7280: PPUSH
7281: CALL_OW 88
7285: GO 7299
// Say ( Simms , D3a-Sim-4a ) ;
7287: LD_EXP 11
7291: PPUSH
7292: LD_STRING D3a-Sim-4a
7294: PPUSH
7295: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7299: LD_EXP 17
7303: PPUSH
7304: LD_STRING D3a-Sci1-4
7306: PPUSH
7307: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7311: LD_EXP 11
7315: PPUSH
7316: LD_STRING D3a-Sim-5
7318: PPUSH
7319: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7323: LD_EXP 17
7327: PPUSH
7328: LD_STRING D3a-Sci1-5
7330: PPUSH
7331: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7335: LD_EXP 11
7339: PPUSH
7340: LD_STRING D3a-Sim-6
7342: PPUSH
7343: CALL_OW 88
// DialogueOff ;
7347: CALL_OW 7
// end else
7351: GO 7626
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7353: LD_ADDR_VAR 0 3
7357: PUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 26
7370: PUSH
7371: LD_INT 1
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 25
7380: PUSH
7381: LD_INT 4
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 69
7397: PUSH
7398: LD_EXP 1
7402: PUSH
7403: LD_EXP 7
7407: PUSH
7408: LD_EXP 6
7412: PUSH
7413: LD_EXP 11
7417: PUSH
7418: LD_EXP 14
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: DIFF
7430: ST_TO_ADDR
// if tmp3 > 0 then
7431: LD_VAR 0 3
7435: PUSH
7436: LD_INT 0
7438: GREATER
7439: IFFALSE 7626
// begin DialogueOn ;
7441: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7445: LD_EXP 11
7449: PPUSH
7450: LD_STRING D3a-Sim-1
7452: PPUSH
7453: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 1
7464: ARRAY
7465: PPUSH
7466: LD_STRING D3a-Sci1-1
7468: PPUSH
7469: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7473: LD_EXP 11
7477: PPUSH
7478: LD_STRING D3a-Sim-2
7480: PPUSH
7481: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 1
7492: ARRAY
7493: PPUSH
7494: LD_STRING D3a-Sci1-2
7496: PPUSH
7497: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7501: LD_EXP 11
7505: PPUSH
7506: LD_STRING D3a-Sim-3
7508: PPUSH
7509: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7513: LD_VAR 0 3
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: PPUSH
7522: LD_STRING D3a-Sci1-3
7524: PPUSH
7525: CALL_OW 88
// if IsOK ( Joan ) then
7529: LD_EXP 13
7533: PPUSH
7534: CALL_OW 302
7538: IFFALSE 7554
// Say ( Simms , D3a-Sim-4 ) else
7540: LD_EXP 11
7544: PPUSH
7545: LD_STRING D3a-Sim-4
7547: PPUSH
7548: CALL_OW 88
7552: GO 7566
// Say ( Simms , D3a-Sim-4a ) ;
7554: LD_EXP 11
7558: PPUSH
7559: LD_STRING D3a-Sim-4a
7561: PPUSH
7562: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7566: LD_VAR 0 3
7570: PUSH
7571: LD_INT 1
7573: ARRAY
7574: PPUSH
7575: LD_STRING D3a-Sci1-4
7577: PPUSH
7578: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7582: LD_EXP 11
7586: PPUSH
7587: LD_STRING D3a-Sim-5
7589: PPUSH
7590: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7594: LD_VAR 0 3
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PPUSH
7603: LD_STRING D3a-Sci1-5
7605: PPUSH
7606: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7610: LD_EXP 11
7614: PPUSH
7615: LD_STRING D3a-Sim-6
7617: PPUSH
7618: CALL_OW 88
// DialogueOff ;
7622: CALL_OW 7
// end ; end ; end ;
7626: PPOPN 3
7628: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7629: LD_EXP 30
7633: PUSH
7634: LD_INT 1
7636: EQUAL
7637: IFFALSE 7972
7639: GO 7641
7641: DISABLE
7642: LD_INT 0
7644: PPUSH
// begin wait ( 2 2$00 ) ;
7645: LD_INT 4200
7647: PPUSH
7648: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7652: LD_EXP 18
7656: PPUSH
7657: LD_STRING D4-FSol1-1
7659: PPUSH
7660: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7664: LD_STRING M3
7666: PPUSH
7667: CALL_OW 337
// PrepareRussians ;
7671: CALL 3748 0 0
// spawnRussians := true ;
7675: LD_ADDR_EXP 59
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7683: LD_ADDR_VAR 0 1
7687: PUSH
7688: LD_INT 1
7690: PPUSH
7691: LD_INT 100
7693: PPUSH
7694: CALL_OW 12
7698: ST_TO_ADDR
// if difficulty = 1 then
7699: LD_OWVAR 67
7703: PUSH
7704: LD_INT 1
7706: EQUAL
7707: IFFALSE 7790
// begin if rnd > 0 and rnd < 51 then
7709: LD_VAR 0 1
7713: PUSH
7714: LD_INT 0
7716: GREATER
7717: PUSH
7718: LD_VAR 0 1
7722: PUSH
7723: LD_INT 51
7725: LESS
7726: AND
7727: IFFALSE 7736
// BuildRussianBase ( 2 ) ;
7729: LD_INT 2
7731: PPUSH
7732: CALL 12078 0 1
// if rnd > 50 and rnd < 81 then
7736: LD_VAR 0 1
7740: PUSH
7741: LD_INT 50
7743: GREATER
7744: PUSH
7745: LD_VAR 0 1
7749: PUSH
7750: LD_INT 81
7752: LESS
7753: AND
7754: IFFALSE 7763
// BuildRussianBase ( 1 ) ;
7756: LD_INT 1
7758: PPUSH
7759: CALL 12078 0 1
// if rnd > 80 and rnd < 101 then
7763: LD_VAR 0 1
7767: PUSH
7768: LD_INT 80
7770: GREATER
7771: PUSH
7772: LD_VAR 0 1
7776: PUSH
7777: LD_INT 101
7779: LESS
7780: AND
7781: IFFALSE 7790
// BuildRussianBase ( 3 ) ;
7783: LD_INT 3
7785: PPUSH
7786: CALL 12078 0 1
// end ; if difficulty = 2 then
7790: LD_OWVAR 67
7794: PUSH
7795: LD_INT 2
7797: EQUAL
7798: IFFALSE 7881
// begin if rnd > 0 and rnd < 61 then
7800: LD_VAR 0 1
7804: PUSH
7805: LD_INT 0
7807: GREATER
7808: PUSH
7809: LD_VAR 0 1
7813: PUSH
7814: LD_INT 61
7816: LESS
7817: AND
7818: IFFALSE 7827
// BuildRussianBase ( 2 ) ;
7820: LD_INT 2
7822: PPUSH
7823: CALL 12078 0 1
// if rnd > 60 and rnd < 81 then
7827: LD_VAR 0 1
7831: PUSH
7832: LD_INT 60
7834: GREATER
7835: PUSH
7836: LD_VAR 0 1
7840: PUSH
7841: LD_INT 81
7843: LESS
7844: AND
7845: IFFALSE 7854
// BuildRussianBase ( 1 ) ;
7847: LD_INT 1
7849: PPUSH
7850: CALL 12078 0 1
// if rnd > 80 and rnd < 101 then
7854: LD_VAR 0 1
7858: PUSH
7859: LD_INT 80
7861: GREATER
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: LD_INT 101
7870: LESS
7871: AND
7872: IFFALSE 7881
// BuildRussianBase ( 3 ) ;
7874: LD_INT 3
7876: PPUSH
7877: CALL 12078 0 1
// end ; if difficulty >= 3 then
7881: LD_OWVAR 67
7885: PUSH
7886: LD_INT 3
7888: GREATEREQUAL
7889: IFFALSE 7972
// begin if rnd > 0 and rnd < 71 then
7891: LD_VAR 0 1
7895: PUSH
7896: LD_INT 0
7898: GREATER
7899: PUSH
7900: LD_VAR 0 1
7904: PUSH
7905: LD_INT 71
7907: LESS
7908: AND
7909: IFFALSE 7918
// BuildRussianBase ( 3 ) ;
7911: LD_INT 3
7913: PPUSH
7914: CALL 12078 0 1
// if rnd > 70 and rnd < 81 then
7918: LD_VAR 0 1
7922: PUSH
7923: LD_INT 70
7925: GREATER
7926: PUSH
7927: LD_VAR 0 1
7931: PUSH
7932: LD_INT 81
7934: LESS
7935: AND
7936: IFFALSE 7945
// BuildRussianBase ( 2 ) ;
7938: LD_INT 2
7940: PPUSH
7941: CALL 12078 0 1
// if rnd > 80 and rnd < 101 then
7945: LD_VAR 0 1
7949: PUSH
7950: LD_INT 80
7952: GREATER
7953: PUSH
7954: LD_VAR 0 1
7958: PUSH
7959: LD_INT 101
7961: LESS
7962: AND
7963: IFFALSE 7972
// BuildRussianBase ( 1 ) ;
7965: LD_INT 1
7967: PPUSH
7968: CALL 12078 0 1
// end ; end ;
7972: PPOPN 1
7974: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7975: LD_INT 54
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 321
7985: PUSH
7986: LD_INT 2
7988: EQUAL
7989: PUSH
7990: LD_INT 21
7992: PPUSH
7993: LD_INT 1
7995: PPUSH
7996: CALL_OW 321
8000: PUSH
8001: LD_INT 2
8003: EQUAL
8004: OR
8005: PUSH
8006: LD_INT 22
8008: PPUSH
8009: LD_INT 1
8011: PPUSH
8012: CALL_OW 321
8016: PUSH
8017: LD_INT 2
8019: EQUAL
8020: OR
8021: IFFALSE 8323
8023: GO 8025
8025: DISABLE
8026: LD_INT 0
8028: PPUSH
8029: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8030: LD_EXP 17
8034: PPUSH
8035: CALL_OW 302
8039: IFFALSE 8053
// tmp := DeltaDoctor else
8041: LD_ADDR_VAR 0 2
8045: PUSH
8046: LD_EXP 17
8050: ST_TO_ADDR
8051: GO 8063
// tmp := Denis ;
8053: LD_ADDR_VAR 0 2
8057: PUSH
8058: LD_EXP 12
8062: ST_TO_ADDR
// if tmp then
8063: LD_VAR 0 2
8067: IFFALSE 8161
// begin DialogueOn ;
8069: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8073: LD_EXP 1
8077: PPUSH
8078: LD_STRING D6-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8085: LD_VAR 0 2
8089: PPUSH
8090: LD_STRING D6-Sci1-1
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8097: LD_EXP 1
8101: PPUSH
8102: LD_STRING D6-JMM-2
8104: PPUSH
8105: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_STRING D6-Sci1-2
8116: PPUSH
8117: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8121: LD_EXP 1
8125: PPUSH
8126: LD_STRING D6-JMM-3
8128: PPUSH
8129: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8133: LD_VAR 0 2
8137: PPUSH
8138: LD_STRING D6-Sci1-3
8140: PPUSH
8141: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8145: LD_EXP 1
8149: PPUSH
8150: LD_STRING D6-JMM-4
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8161: LD_INT 1050
8163: PPUSH
8164: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8168: LD_EXP 50
8172: PUSH
8173: LD_INT 0
8175: EQUAL
8176: PUSH
8177: LD_EXP 14
8181: PPUSH
8182: CALL_OW 302
8186: AND
8187: IFFALSE 8245
// begin DialogueOn ;
8189: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8193: LD_EXP 28
8197: PPUSH
8198: LD_STRING D5-Ar1-1
8200: PPUSH
8201: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8205: LD_EXP 27
8209: PPUSH
8210: LD_STRING D5-Diet-1
8212: PPUSH
8213: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8217: LD_EXP 28
8221: PPUSH
8222: LD_STRING D5-Ar1-2
8224: PPUSH
8225: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8229: LD_EXP 27
8233: PPUSH
8234: LD_STRING D5-Diet-2
8236: PPUSH
8237: CALL_OW 88
// DialogueOff ;
8241: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8245: LD_INT 35
8247: PPUSH
8248: CALL_OW 67
// until tick > 10 10$00 ;
8252: LD_OWVAR 1
8256: PUSH
8257: LD_INT 21000
8259: GREATER
8260: IFFALSE 8245
// wait ( 1 1$30 ) ;
8262: LD_INT 3150
8264: PPUSH
8265: CALL_OW 67
// if arabianTrait = 0 then
8269: LD_EXP 50
8273: PUSH
8274: LD_INT 0
8276: EQUAL
8277: IFFALSE 8323
// begin arabianTrait = 1 ;
8279: LD_ADDR_EXP 50
8283: PUSH
8284: LD_INT 1
8286: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8287: LD_INT 2
8289: PPUSH
8290: LD_INT 3
8292: PPUSH
8293: LD_INT 1
8295: PPUSH
8296: LD_INT 1
8298: PPUSH
8299: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8303: LD_INT 2
8305: PPUSH
8306: LD_INT 6
8308: PPUSH
8309: LD_INT 1
8311: PPUSH
8312: LD_INT 1
8314: PPUSH
8315: CALL_OW 80
// PrepareArabianTrait ;
8319: CALL 8326 0 0
// end ; end ;
8323: PPOPN 2
8325: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
8331: PPUSH
8332: PPUSH
8333: PPUSH
8334: PPUSH
8335: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8336: LD_ADDR_VAR 0 6
8340: PUSH
8341: LD_INT 22
8343: PUSH
8344: LD_INT 2
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 25
8356: PUSH
8357: LD_INT 4
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 25
8366: PUSH
8367: LD_INT 2
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 25
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PPUSH
8394: CALL_OW 69
8398: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 1
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 2
8426: PUSH
8427: LD_INT 25
8429: PUSH
8430: LD_INT 1
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: LD_INT 25
8439: PUSH
8440: LD_INT 8
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 25
8449: PUSH
8450: LD_INT 15
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: PPUSH
8468: CALL_OW 69
8472: PUSH
8473: LD_EXP 27
8477: PUSH
8478: EMPTY
8479: LIST
8480: DIFF
8481: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8482: LD_ADDR_VAR 0 7
8486: PUSH
8487: LD_INT 22
8489: PUSH
8490: LD_INT 2
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 30
8499: PUSH
8500: LD_INT 5
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PPUSH
8511: CALL_OW 69
8515: PUSH
8516: LD_INT 1
8518: ARRAY
8519: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8520: LD_VAR 0 6
8524: PPUSH
8525: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8529: LD_VAR 0 5
8533: PPUSH
8534: CALL_OW 122
// wait ( 0 0$3 ) ;
8538: LD_INT 105
8540: PPUSH
8541: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8545: LD_VAR 0 6
8549: PPUSH
8550: LD_VAR 0 7
8554: PPUSH
8555: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8559: LD_VAR 0 6
8563: PPUSH
8564: LD_INT 1
8566: PUSH
8567: LD_INT 8
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_INT 2
8579: PPUSH
8580: CALL_OW 12
8584: ARRAY
8585: PPUSH
8586: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8590: LD_VAR 0 6
8594: PPUSH
8595: CALL_OW 182
// wait ( 0 0$1 ) ;
8599: LD_INT 35
8601: PPUSH
8602: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8606: LD_INT 76
8608: PPUSH
8609: LD_INT 19
8611: PPUSH
8612: CALL_OW 84
// DialogueOn ;
8616: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8620: LD_INT 22
8622: PUSH
8623: LD_INT 1
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 26
8632: PUSH
8633: LD_INT 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 25
8645: PUSH
8646: LD_INT 1
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 25
8665: PUSH
8666: LD_INT 3
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 4
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: PPUSH
8711: LD_STRING D8-Sol1-1
8713: PPUSH
8714: LD_STRING D8-Sol1-1
8716: PPUSH
8717: CALL 11420 0 3
// if IsOK ( DeltaDoctor ) then
8721: LD_EXP 17
8725: PPUSH
8726: CALL_OW 302
8730: IFFALSE 8746
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8732: LD_EXP 17
8736: PPUSH
8737: LD_STRING D8-Sci1-1
8739: PPUSH
8740: CALL_OW 88
8744: GO 8847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8746: LD_INT 22
8748: PUSH
8749: LD_INT 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 26
8758: PUSH
8759: LD_INT 1
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 2
8768: PUSH
8769: LD_INT 25
8771: PUSH
8772: LD_INT 1
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 25
8781: PUSH
8782: LD_INT 2
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 25
8791: PUSH
8792: LD_INT 3
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 25
8801: PUSH
8802: LD_INT 4
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 25
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: PPUSH
8832: CALL_OW 69
8836: PPUSH
8837: LD_STRING D8-Sol1-1
8839: PPUSH
8840: LD_STRING D8-Sol1-1
8842: PPUSH
8843: CALL 11420 0 3
// Say ( JMM , D8-JMM-1 ) ;
8847: LD_EXP 1
8851: PPUSH
8852: LD_STRING D8-JMM-1
8854: PPUSH
8855: CALL_OW 88
// DialogueOff ;
8859: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8863: LD_INT 2
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8873: LD_INT 1
8875: PPUSH
8876: LD_INT 2
8878: PPUSH
8879: LD_INT 2
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8889: LD_INT 3
8891: PPUSH
8892: LD_INT 2
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_INT 1
8900: PPUSH
8901: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8905: LD_STRING M4
8907: PPUSH
8908: CALL_OW 337
// wait ( 0 0$1 ) ;
8912: LD_INT 35
8914: PPUSH
8915: CALL_OW 67
// if IsLive ( Khatam ) then
8919: LD_EXP 14
8923: PPUSH
8924: CALL_OW 300
8928: IFFALSE 8942
// DoNotAttack ( 2 , Khatam ) ;
8930: LD_INT 2
8932: PPUSH
8933: LD_EXP 14
8937: PPUSH
8938: CALL_OW 471
// wait ( 0 0$1 ) ;
8942: LD_INT 35
8944: PPUSH
8945: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8949: LD_ADDR_VAR 0 8
8953: PUSH
8954: LD_INT 22
8956: PUSH
8957: LD_INT 1
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 21
8966: PUSH
8967: LD_INT 3
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PPUSH
8978: CALL_OW 69
8982: PPUSH
8983: LD_VAR 0 5
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PPUSH
8992: CALL_OW 74
8996: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8997: LD_VAR 0 5
9001: PPUSH
9002: LD_INT 25
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 72
9016: PUSH
9017: LD_INT 1
9019: ARRAY
9020: PPUSH
9021: LD_VAR 0 8
9025: PPUSH
9026: CALL_OW 250
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: CALL_OW 251
9040: PPUSH
9041: LD_VAR 0 8
9045: PPUSH
9046: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9050: LD_VAR 0 5
9054: PPUSH
9055: LD_INT 84
9057: PPUSH
9058: LD_INT 22
9060: PPUSH
9061: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9065: LD_VAR 0 5
9069: PPUSH
9070: LD_INT 82
9072: PPUSH
9073: LD_INT 5
9075: PPUSH
9076: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9080: LD_VAR 0 5
9084: PPUSH
9085: LD_INT 95
9087: PPUSH
9088: LD_INT 12
9090: PPUSH
9091: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9095: LD_VAR 0 5
9099: PPUSH
9100: LD_INT 102
9102: PPUSH
9103: LD_INT 11
9105: PPUSH
9106: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9110: LD_VAR 0 5
9114: PPUSH
9115: LD_INT 116
9117: PPUSH
9118: LD_INT 15
9120: PPUSH
9121: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9125: LD_VAR 0 5
9129: PPUSH
9130: LD_INT 140
9132: PPUSH
9133: LD_INT 25
9135: PPUSH
9136: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9140: LD_VAR 0 5
9144: PPUSH
9145: LD_INT 160
9147: PPUSH
9148: LD_INT 56
9150: PPUSH
9151: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9155: LD_ADDR_VAR 0 5
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 2
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 21
9172: PUSH
9173: LD_INT 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 2
9182: PUSH
9183: LD_INT 25
9185: PUSH
9186: LD_INT 1
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 25
9195: PUSH
9196: LD_INT 8
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 25
9205: PUSH
9206: LD_INT 15
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 69
9228: PUSH
9229: LD_EXP 27
9233: PUSH
9234: EMPTY
9235: LIST
9236: DIFF
9237: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9238: LD_ADDR_VAR 0 6
9242: PUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 1
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 2
9265: PUSH
9266: LD_INT 25
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 25
9278: PUSH
9279: LD_INT 3
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 25
9288: PUSH
9289: LD_INT 4
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 25
9298: PUSH
9299: LD_INT 12
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 25
9308: PUSH
9309: LD_INT 16
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: PPUSH
9329: CALL_OW 69
9333: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9334: LD_ADDR_VAR 0 6
9338: PUSH
9339: LD_VAR 0 6
9343: PUSH
9344: LD_EXP 27
9348: ADD
9349: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9350: LD_VAR 0 5
9354: PPUSH
9355: LD_INT 189
9357: PPUSH
9358: LD_INT 79
9360: PPUSH
9361: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9365: LD_VAR 0 5
9369: PPUSH
9370: LD_INT 25
9372: PUSH
9373: LD_INT 15
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PPUSH
9380: CALL_OW 72
9384: IFFALSE 9425
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9386: LD_VAR 0 5
9390: PPUSH
9391: LD_INT 25
9393: PUSH
9394: LD_INT 15
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 72
9405: PUSH
9406: LD_INT 1
9408: ARRAY
9409: PPUSH
9410: LD_INT 84
9412: PPUSH
9413: LD_INT 21
9415: PPUSH
9416: CALL_OW 428
9420: PPUSH
9421: CALL_OW 120
// wait ( 0 0$4 ) ;
9425: LD_INT 140
9427: PPUSH
9428: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9432: LD_VAR 0 6
9436: PPUSH
9437: LD_INT 88
9439: PPUSH
9440: LD_INT 8
9442: PPUSH
9443: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9447: LD_VAR 0 6
9451: PPUSH
9452: LD_INT 102
9454: PPUSH
9455: LD_INT 10
9457: PPUSH
9458: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9462: LD_VAR 0 6
9466: PPUSH
9467: LD_INT 116
9469: PPUSH
9470: LD_INT 15
9472: PPUSH
9473: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9477: LD_VAR 0 6
9481: PPUSH
9482: LD_INT 140
9484: PPUSH
9485: LD_INT 25
9487: PPUSH
9488: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9492: LD_VAR 0 6
9496: PPUSH
9497: LD_INT 160
9499: PPUSH
9500: LD_INT 56
9502: PPUSH
9503: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9507: LD_VAR 0 6
9511: PPUSH
9512: LD_INT 189
9514: PPUSH
9515: LD_INT 79
9517: PPUSH
9518: CALL_OW 171
// arabianAttackersAI = 1 ;
9522: LD_ADDR_EXP 47
9526: PUSH
9527: LD_INT 1
9529: ST_TO_ADDR
// if IsOk ( Gary ) then
9530: LD_EXP 10
9534: PPUSH
9535: CALL_OW 302
9539: IFFALSE 9553
// Say ( Gary , D8a-Gary-1 ) ;
9541: LD_EXP 10
9545: PPUSH
9546: LD_STRING D8a-Gary-1
9548: PPUSH
9549: CALL_OW 88
// wait ( 0 0$5 ) ;
9553: LD_INT 175
9555: PPUSH
9556: CALL_OW 67
// if IsOK ( Khatam ) then
9560: LD_EXP 14
9564: PPUSH
9565: CALL_OW 302
9569: IFFALSE 10105
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9571: LD_ADDR_VAR 0 3
9575: PUSH
9576: LD_INT 22
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: LD_INT 25
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 4
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 69
9666: PUSH
9667: LD_EXP 1
9671: PUSH
9672: LD_EXP 2
9676: PUSH
9677: LD_EXP 3
9681: PUSH
9682: LD_EXP 4
9686: PUSH
9687: LD_EXP 5
9691: PUSH
9692: LD_EXP 6
9696: PUSH
9697: LD_EXP 7
9701: PUSH
9702: LD_EXP 8
9706: PUSH
9707: LD_EXP 9
9711: PUSH
9712: LD_EXP 10
9716: PUSH
9717: LD_EXP 11
9721: PUSH
9722: LD_EXP 12
9726: PUSH
9727: LD_EXP 13
9731: PUSH
9732: LD_EXP 14
9736: PUSH
9737: LD_EXP 15
9741: PUSH
9742: LD_EXP 16
9746: PUSH
9747: LD_EXP 17
9751: PUSH
9752: LD_EXP 19
9756: PUSH
9757: LD_EXP 25
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: DIFF
9783: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9784: LD_EXP 14
9788: PPUSH
9789: LD_INT 8
9791: PPUSH
9792: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9796: LD_EXP 14
9800: PPUSH
9801: CALL_OW 122
// wait ( 0 0$1 ) ;
9805: LD_INT 35
9807: PPUSH
9808: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9812: LD_EXP 14
9816: PPUSH
9817: CALL_OW 121
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9828: LD_EXP 14
9832: PPUSH
9833: LD_INT 7
9835: PPUSH
9836: CALL_OW 113
// if not tmp then
9840: LD_VAR 0 3
9844: NOT
9845: IFFALSE 9849
// exit ;
9847: GO 10105
// DialogueOn ;
9849: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9853: LD_VAR 0 3
9857: PUSH
9858: LD_INT 1
9860: ARRAY
9861: PPUSH
9862: CALL_OW 258
9866: PUSH
9867: LD_INT 1
9869: EQUAL
9870: IFFALSE 9890
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9872: LD_VAR 0 3
9876: PUSH
9877: LD_INT 1
9879: ARRAY
9880: PPUSH
9881: LD_STRING D8b-Sol1-1
9883: PPUSH
9884: CALL_OW 88
9888: GO 9906
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9890: LD_VAR 0 3
9894: PUSH
9895: LD_INT 1
9897: ARRAY
9898: PPUSH
9899: LD_STRING D8b-FSol1-1
9901: PPUSH
9902: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9906: LD_EXP 14
9910: PPUSH
9911: LD_STRING D8b-Khat-1
9913: PPUSH
9914: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 1
9925: ARRAY
9926: PPUSH
9927: CALL_OW 258
9931: PUSH
9932: LD_INT 1
9934: EQUAL
9935: IFFALSE 9955
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9937: LD_VAR 0 3
9941: PUSH
9942: LD_INT 1
9944: ARRAY
9945: PPUSH
9946: LD_STRING D8b-Sol1-2
9948: PPUSH
9949: CALL_OW 88
9953: GO 9971
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9955: LD_VAR 0 3
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PPUSH
9964: LD_STRING D8b-FSol1-2
9966: PPUSH
9967: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9971: LD_EXP 14
9975: PPUSH
9976: LD_STRING D8b-Khat-2
9978: PPUSH
9979: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9983: LD_VAR 0 3
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PPUSH
9992: CALL_OW 258
9996: PUSH
9997: LD_INT 1
9999: EQUAL
10000: IFFALSE 10020
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
10002: LD_VAR 0 3
10006: PUSH
10007: LD_INT 1
10009: ARRAY
10010: PPUSH
10011: LD_STRING D8b-Sol1-3
10013: PPUSH
10014: CALL_OW 88
10018: GO 10036
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10020: LD_VAR 0 3
10024: PUSH
10025: LD_INT 1
10027: ARRAY
10028: PPUSH
10029: LD_STRING D8b-FSol1-3
10031: PPUSH
10032: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10036: LD_EXP 14
10040: PPUSH
10041: LD_STRING D8b-Khat-3
10043: PPUSH
10044: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10048: LD_VAR 0 3
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 258
10061: PUSH
10062: LD_INT 1
10064: EQUAL
10065: IFFALSE 10085
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10067: LD_VAR 0 3
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PPUSH
10076: LD_STRING D8b-Sol1-4
10078: PPUSH
10079: CALL_OW 88
10083: GO 10101
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10085: LD_VAR 0 3
10089: PUSH
10090: LD_INT 1
10092: ARRAY
10093: PPUSH
10094: LD_STRING D8b-FSol1-4
10096: PPUSH
10097: CALL_OW 88
// DialogueOff ;
10101: CALL_OW 7
// end ; end ;
10105: LD_VAR 0 1
10109: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10110: LD_INT 7
10112: PPUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 70
10127: PUSH
10128: LD_INT 0
10130: GREATER
10131: PUSH
10132: LD_EXP 14
10136: PPUSH
10137: LD_INT 7
10139: PPUSH
10140: CALL_OW 308
10144: OR
10145: IFFALSE 10352
10147: GO 10149
10149: DISABLE
10150: LD_INT 0
10152: PPUSH
// begin enable ;
10153: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10154: LD_ADDR_VAR 0 1
10158: PUSH
10159: LD_INT 7
10161: PPUSH
10162: LD_INT 22
10164: PUSH
10165: LD_INT 2
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PPUSH
10172: CALL_OW 70
10176: PUSH
10177: FOR_IN
10178: IFFALSE 10319
// begin if GetClass ( i ) = 4 then
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL_OW 257
10189: PUSH
10190: LD_INT 4
10192: EQUAL
10193: IFFALSE 10205
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10195: LD_INT 1
10197: PPUSH
10198: LD_STRING 10_ScientistsEscape_1
10200: PPUSH
10201: CALL_OW 39
// if i = Dietrich then
10205: LD_VAR 0 1
10209: PUSH
10210: LD_EXP 27
10214: EQUAL
10215: IFFALSE 10225
// GensherStatus = 1 ;
10217: LD_ADDR_EXP 53
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10225: LD_VAR 0 1
10229: PPUSH
10230: CALL_OW 257
10234: PUSH
10235: LD_INT 1
10237: EQUAL
10238: PUSH
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL_OW 257
10248: PUSH
10249: LD_INT 2
10251: EQUAL
10252: OR
10253: PUSH
10254: LD_VAR 0 1
10258: PPUSH
10259: CALL_OW 257
10263: PUSH
10264: LD_INT 3
10266: EQUAL
10267: OR
10268: PUSH
10269: LD_VAR 0 1
10273: PPUSH
10274: CALL_OW 257
10278: PUSH
10279: LD_INT 4
10281: EQUAL
10282: OR
10283: PUSH
10284: LD_VAR 0 1
10288: PPUSH
10289: CALL_OW 257
10293: PUSH
10294: LD_INT 8
10296: EQUAL
10297: OR
10298: IFFALSE 10308
// arabianEscape = 1 ;
10300: LD_ADDR_EXP 48
10304: PUSH
10305: LD_INT 1
10307: ST_TO_ADDR
// RemoveUnit ( i ) ;
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 64
// end ;
10317: GO 10177
10319: POP
10320: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10321: LD_EXP 14
10325: PPUSH
10326: LD_INT 7
10328: PPUSH
10329: CALL_OW 308
10333: IFFALSE 10352
// begin KhatamStatus = 1 ;
10335: LD_ADDR_EXP 54
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10343: LD_EXP 14
10347: PPUSH
10348: CALL_OW 64
// end ; end ;
10352: PPOPN 1
10354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10355: LD_INT 22
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 21
10367: PUSH
10368: LD_INT 1
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: PUSH
10384: LD_INT 0
10386: EQUAL
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 4
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: LD_INT 0
10419: EQUAL
10420: AND
10421: IFFALSE 10434
10423: GO 10425
10425: DISABLE
// arabianDefeated = 1 ;
10426: LD_ADDR_EXP 49
10430: PUSH
10431: LD_INT 1
10433: ST_TO_ADDR
10434: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10435: LD_INT 54
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 321
10445: PUSH
10446: LD_INT 2
10448: EQUAL
10449: PUSH
10450: LD_INT 55
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 321
10460: PUSH
10461: LD_INT 2
10463: EQUAL
10464: AND
10465: PUSH
10466: LD_INT 21
10468: PPUSH
10469: LD_INT 1
10471: PPUSH
10472: CALL_OW 321
10476: PUSH
10477: LD_INT 2
10479: EQUAL
10480: AND
10481: PUSH
10482: LD_INT 22
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: CALL_OW 321
10492: PUSH
10493: LD_INT 2
10495: EQUAL
10496: AND
10497: PUSH
10498: LD_INT 12
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 321
10508: PUSH
10509: LD_INT 2
10511: EQUAL
10512: AND
10513: PUSH
10514: LD_INT 32
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 321
10524: PUSH
10525: LD_INT 2
10527: EQUAL
10528: AND
10529: PUSH
10530: LD_EXP 64
10534: PUSH
10535: LD_INT 0
10537: EQUAL
10538: AND
10539: PUSH
10540: LD_EXP 50
10544: PUSH
10545: LD_INT 0
10547: EQUAL
10548: AND
10549: PUSH
10550: LD_OWVAR 1
10554: PUSH
10555: LD_INT 31500
10557: GREATEREQUAL
10558: AND
10559: IFFALSE 10576
10561: GO 10563
10563: DISABLE
// begin arabianTrait = 1 ;
10564: LD_ADDR_EXP 50
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// PrepareArabianTrait ;
10572: CALL 8326 0 0
// end ;
10576: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10577: LD_EXP 30
10581: PUSH
10582: LD_STRING 02_mikhailStatus_1
10584: PPUSH
10585: LD_INT 0
10587: PPUSH
10588: CALL_OW 30
10592: PUSH
10593: LD_INT 1
10595: EQUAL
10596: AND
10597: PUSH
10598: LD_INT 22
10600: PUSH
10601: LD_INT 5
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PPUSH
10608: CALL_OW 69
10612: PUSH
10613: LD_INT 0
10615: EQUAL
10616: AND
10617: PUSH
10618: LD_INT 22
10620: PUSH
10621: LD_INT 2
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 21
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: PUSH
10647: LD_INT 0
10649: EQUAL
10650: PUSH
10651: LD_EXP 50
10655: PUSH
10656: LD_INT 0
10658: EQUAL
10659: OR
10660: AND
10661: IFFALSE 10670
10663: GO 10665
10665: DISABLE
// PrepareCornell ;
10666: CALL 3495 0 0
10670: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10671: LD_INT 22
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PPUSH
10681: CALL_OW 69
10685: PPUSH
10686: LD_EXP 19
10690: PPUSH
10691: CALL_OW 74
10695: PPUSH
10696: LD_EXP 19
10700: PPUSH
10701: CALL_OW 296
10705: PUSH
10706: LD_INT 9
10708: LESS
10709: IFFALSE 10930
10711: GO 10713
10713: DISABLE
// begin InGameOn ;
10714: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10718: LD_EXP 19
10722: PPUSH
10723: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10727: LD_EXP 19
10731: PPUSH
10732: LD_STRING D7-Corn-1
10734: PPUSH
10735: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10739: LD_INT 22
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 2
10751: PUSH
10752: LD_INT 25
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 2
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 25
10774: PUSH
10775: LD_INT 3
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 4
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 5
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: PPUSH
10819: LD_STRING D7-Sol1-1
10821: PPUSH
10822: LD_STRING D7-FSol1-1
10824: PPUSH
10825: CALL 11420 0 3
// CenterNowOnUnits ( Cornell ) ;
10829: LD_EXP 19
10833: PPUSH
10834: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10838: LD_EXP 19
10842: PPUSH
10843: LD_STRING D7-Corn-2
10845: PPUSH
10846: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10850: LD_EXP 1
10854: PPUSH
10855: LD_STRING D7-JMM-2
10857: PPUSH
10858: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10862: LD_EXP 19
10866: PPUSH
10867: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10871: LD_EXP 19
10875: PPUSH
10876: LD_STRING D7-Corn-3
10878: PPUSH
10879: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10883: LD_EXP 19
10887: PPUSH
10888: LD_INT 250
10890: PPUSH
10891: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10895: LD_EXP 19
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 235
// wait ( 0 0$1 ) ;
10907: LD_INT 35
10909: PPUSH
10910: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10914: LD_EXP 1
10918: PPUSH
10919: LD_STRING D7-JMM-3
10921: PPUSH
10922: CALL_OW 88
// InGameOff ;
10926: CALL_OW 9
// end ;
10930: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10931: LD_EXP 19
10935: PPUSH
10936: CALL_OW 255
10940: PUSH
10941: LD_INT 1
10943: EQUAL
10944: PUSH
10945: LD_EXP 19
10949: PPUSH
10950: CALL_OW 256
10954: PUSH
10955: LD_INT 350
10957: GREATER
10958: AND
10959: IFFALSE 11152
10961: GO 10963
10963: DISABLE
// begin DialogueOn ;
10964: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10968: LD_EXP 1
10972: PPUSH
10973: LD_STRING D7a-JMM-1
10975: PPUSH
10976: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10980: LD_EXP 19
10984: PPUSH
10985: LD_STRING D7a-Corn-1
10987: PPUSH
10988: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10992: LD_EXP 1
10996: PPUSH
10997: LD_STRING D7a-JMM-2
10999: PPUSH
11000: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
11004: LD_EXP 19
11008: PPUSH
11009: LD_STRING D7a-Corn-2
11011: PPUSH
11012: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11016: LD_EXP 1
11020: PPUSH
11021: LD_STRING D7a-JMM-3
11023: PPUSH
11024: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11028: LD_EXP 19
11032: PPUSH
11033: LD_STRING D7a-Corn-3
11035: PPUSH
11036: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11040: LD_EXP 1
11044: PPUSH
11045: LD_STRING D7a-JMM-4
11047: PPUSH
11048: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11052: LD_EXP 19
11056: PPUSH
11057: LD_STRING D7a-Corn-4
11059: PPUSH
11060: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11064: LD_EXP 1
11068: PPUSH
11069: LD_STRING D7a-JMM-5
11071: PPUSH
11072: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11076: LD_EXP 19
11080: PPUSH
11081: LD_STRING D7a-Corn-5
11083: PPUSH
11084: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11088: LD_EXP 1
11092: PPUSH
11093: LD_STRING D7a-JMM-6
11095: PPUSH
11096: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11100: LD_EXP 19
11104: PPUSH
11105: LD_STRING D7a-Corn-6
11107: PPUSH
11108: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11112: LD_EXP 1
11116: PPUSH
11117: LD_STRING D7a-JMM-7
11119: PPUSH
11120: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11124: LD_EXP 19
11128: PPUSH
11129: LD_STRING D7a-Corn-7
11131: PPUSH
11132: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11136: LD_EXP 1
11140: PPUSH
11141: LD_STRING D7a-JMM-8
11143: PPUSH
11144: CALL_OW 88
// DialogueOff ;
11148: CALL_OW 7
// end ;
11152: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11153: LD_EXP 62
11157: PUSH
11158: LD_EXP 1
11162: PPUSH
11163: CALL_OW 302
11167: PUSH
11168: LD_EXP 5
11172: PPUSH
11173: CALL_OW 302
11177: OR
11178: AND
11179: IFFALSE 11269
11181: GO 11183
11183: DISABLE
// begin Wait ( 0 0$2 ) ;
11184: LD_INT 70
11186: PPUSH
11187: CALL_OW 67
// DialogueOn ;
11191: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11195: LD_EXP 62
11199: PUSH
11200: LD_INT 1
11202: ARRAY
11203: PPUSH
11204: LD_EXP 62
11208: PUSH
11209: LD_INT 2
11211: ARRAY
11212: PPUSH
11213: CALL_OW 86
// if IsOk ( Cyrus ) then
11217: LD_EXP 5
11221: PPUSH
11222: CALL_OW 302
11226: IFFALSE 11242
// Say ( Cyrus , D10-Cyrus-1 ) else
11228: LD_EXP 5
11232: PPUSH
11233: LD_STRING D10-Cyrus-1
11235: PPUSH
11236: CALL_OW 88
11240: GO 11265
// if IsOk ( JMM ) then
11242: LD_EXP 1
11246: PPUSH
11247: CALL_OW 302
11251: IFFALSE 11265
// Say ( JMM , D10-JMM-1 ) ;
11253: LD_EXP 1
11257: PPUSH
11258: LD_STRING D10-JMM-1
11260: PPUSH
11261: CALL_OW 88
// DialogueOff ;
11265: CALL_OW 7
// end ;
11269: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11270: LD_INT 12
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 321
11280: PUSH
11281: LD_INT 2
11283: EQUAL
11284: IFFALSE 11296
11286: GO 11288
11288: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11289: LD_STRING M2b
11291: PPUSH
11292: CALL_OW 337
11296: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11297: LD_INT 32
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: CALL_OW 321
11307: PUSH
11308: LD_INT 2
11310: EQUAL
11311: IFFALSE 11323
11313: GO 11315
11315: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11316: LD_STRING M2c
11318: PPUSH
11319: CALL_OW 337
11323: END
// every 0 0$1 trigger arabianDefeated = 1 do
11324: LD_EXP 49
11328: PUSH
11329: LD_INT 1
11331: EQUAL
11332: IFFALSE 11344
11334: GO 11336
11336: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11337: LD_STRING M4a
11339: PPUSH
11340: CALL_OW 337
11344: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11345: LD_INT 54
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 321
11355: PUSH
11356: LD_INT 2
11358: EQUAL
11359: PUSH
11360: LD_INT 55
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 321
11370: PUSH
11371: LD_INT 2
11373: EQUAL
11374: AND
11375: PUSH
11376: LD_INT 21
11378: PPUSH
11379: LD_INT 1
11381: PPUSH
11382: CALL_OW 321
11386: PUSH
11387: LD_INT 2
11389: EQUAL
11390: AND
11391: PUSH
11392: LD_INT 22
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 321
11402: PUSH
11403: LD_INT 2
11405: EQUAL
11406: AND
11407: IFFALSE 11419
11409: GO 11411
11411: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11412: LD_STRING M2a
11414: PPUSH
11415: CALL_OW 337
11419: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11420: LD_INT 0
11422: PPUSH
11423: PPUSH
11424: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11425: LD_ADDR_VAR 0 1
11429: PUSH
11430: LD_VAR 0 1
11434: PUSH
11435: LD_EXP 1
11439: PUSH
11440: LD_EXP 2
11444: PUSH
11445: LD_EXP 3
11449: PUSH
11450: LD_EXP 4
11454: PUSH
11455: LD_EXP 5
11459: PUSH
11460: LD_EXP 6
11464: PUSH
11465: LD_EXP 7
11469: PUSH
11470: LD_EXP 8
11474: PUSH
11475: LD_EXP 9
11479: PUSH
11480: LD_EXP 10
11484: PUSH
11485: LD_EXP 11
11489: PUSH
11490: LD_EXP 12
11494: PUSH
11495: LD_EXP 13
11499: PUSH
11500: LD_EXP 14
11504: PUSH
11505: LD_EXP 15
11509: PUSH
11510: LD_EXP 16
11514: PUSH
11515: LD_EXP 17
11519: PUSH
11520: LD_EXP 18
11524: PUSH
11525: LD_EXP 19
11529: PUSH
11530: LD_EXP 25
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: DIFF
11557: ST_TO_ADDR
// if not characters then
11558: LD_VAR 0 1
11562: NOT
11563: IFFALSE 11567
// exit ;
11565: GO 11713
// rnd = rand ( 1 , characters ) ;
11567: LD_ADDR_VAR 0 6
11571: PUSH
11572: LD_INT 1
11574: PPUSH
11575: LD_VAR 0 1
11579: PPUSH
11580: CALL_OW 12
11584: ST_TO_ADDR
// for i = 1 to characters do
11585: LD_ADDR_VAR 0 5
11589: PUSH
11590: DOUBLE
11591: LD_INT 1
11593: DEC
11594: ST_TO_ADDR
11595: LD_VAR 0 1
11599: PUSH
11600: FOR_TO
11601: IFFALSE 11711
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11603: LD_VAR 0 5
11607: PUSH
11608: LD_VAR 0 6
11612: EQUAL
11613: PUSH
11614: LD_VAR 0 1
11618: PUSH
11619: LD_VAR 0 5
11623: ARRAY
11624: PPUSH
11625: CALL_OW 258
11629: PUSH
11630: LD_INT 1
11632: EQUAL
11633: AND
11634: IFFALSE 11656
// Say ( characters [ i ] , dialogMID ) ;
11636: LD_VAR 0 1
11640: PUSH
11641: LD_VAR 0 5
11645: ARRAY
11646: PPUSH
11647: LD_VAR 0 2
11651: PPUSH
11652: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11656: LD_VAR 0 5
11660: PUSH
11661: LD_VAR 0 6
11665: EQUAL
11666: PUSH
11667: LD_VAR 0 1
11671: PUSH
11672: LD_VAR 0 5
11676: ARRAY
11677: PPUSH
11678: CALL_OW 258
11682: PUSH
11683: LD_INT 2
11685: EQUAL
11686: AND
11687: IFFALSE 11709
// Say ( characters [ i ] , dialogFID ) ;
11689: LD_VAR 0 1
11693: PUSH
11694: LD_VAR 0 5
11698: ARRAY
11699: PPUSH
11700: LD_VAR 0 3
11704: PPUSH
11705: CALL_OW 88
// end ;
11709: GO 11600
11711: POP
11712: POP
// end ;
11713: LD_VAR 0 4
11717: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11718: LD_INT 0
11720: PPUSH
11721: PPUSH
// for i in charactersList do
11722: LD_ADDR_VAR 0 4
11726: PUSH
11727: LD_VAR 0 1
11731: PUSH
11732: FOR_IN
11733: IFFALSE 11751
// SaveCharacters ( i , ident ) ;
11735: LD_VAR 0 4
11739: PPUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: CALL_OW 38
11749: GO 11732
11751: POP
11752: POP
// end ;
11753: LD_VAR 0 3
11757: RET
// export function PrepareDifficulty ; begin
11758: LD_INT 0
11760: PPUSH
// if difficulty = 1 then
11761: LD_OWVAR 67
11765: PUSH
11766: LD_INT 1
11768: EQUAL
11769: IFFALSE 11813
// begin RuSolMinLevel = 3 ;
11771: LD_ADDR_EXP 37
11775: PUSH
11776: LD_INT 3
11778: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11779: LD_ADDR_EXP 38
11783: PUSH
11784: LD_INT 5
11786: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11787: LD_INT 51
11789: PPUSH
11790: LD_INT 6
11792: PPUSH
11793: LD_INT 2
11795: PPUSH
11796: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11800: LD_INT 51
11802: PPUSH
11803: LD_INT 5
11805: PPUSH
11806: LD_INT 2
11808: PPUSH
11809: CALL_OW 322
// end ; if difficulty = 2 then
11813: LD_OWVAR 67
11817: PUSH
11818: LD_INT 2
11820: EQUAL
11821: IFFALSE 11917
// begin RuSolMinLevel = 5 ;
11823: LD_ADDR_EXP 37
11827: PUSH
11828: LD_INT 5
11830: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11831: LD_ADDR_EXP 38
11835: PUSH
11836: LD_INT 7
11838: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11839: LD_INT 51
11841: PPUSH
11842: LD_INT 6
11844: PPUSH
11845: LD_INT 2
11847: PPUSH
11848: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11852: LD_INT 57
11854: PPUSH
11855: LD_INT 6
11857: PPUSH
11858: LD_INT 2
11860: PPUSH
11861: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11865: LD_INT 63
11867: PPUSH
11868: LD_INT 6
11870: PPUSH
11871: LD_INT 2
11873: PPUSH
11874: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11878: LD_INT 51
11880: PPUSH
11881: LD_INT 5
11883: PPUSH
11884: LD_INT 2
11886: PPUSH
11887: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11891: LD_INT 5
11893: PPUSH
11894: LD_INT 2
11896: PPUSH
11897: LD_INT 2
11899: PPUSH
11900: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11904: LD_INT 5
11906: PPUSH
11907: LD_INT 5
11909: PPUSH
11910: LD_INT 2
11912: PPUSH
11913: CALL_OW 322
// end ; if difficulty >= 3 then
11917: LD_OWVAR 67
11921: PUSH
11922: LD_INT 3
11924: GREATEREQUAL
11925: IFFALSE 12073
// begin RuSolMinLevel = 6 ;
11927: LD_ADDR_EXP 37
11931: PUSH
11932: LD_INT 6
11934: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11935: LD_ADDR_EXP 38
11939: PUSH
11940: LD_INT 8
11942: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11943: LD_INT 51
11945: PPUSH
11946: LD_INT 6
11948: PPUSH
11949: LD_INT 2
11951: PPUSH
11952: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11956: LD_INT 57
11958: PPUSH
11959: LD_INT 6
11961: PPUSH
11962: LD_INT 2
11964: PPUSH
11965: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11969: LD_INT 52
11971: PPUSH
11972: LD_INT 6
11974: PPUSH
11975: LD_INT 2
11977: PPUSH
11978: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11982: LD_INT 58
11984: PPUSH
11985: LD_INT 6
11987: PPUSH
11988: LD_INT 2
11990: PPUSH
11991: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11995: LD_INT 63
11997: PPUSH
11998: LD_INT 6
12000: PPUSH
12001: LD_INT 2
12003: PPUSH
12004: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
12008: LD_INT 64
12010: PPUSH
12011: LD_INT 6
12013: PPUSH
12014: LD_INT 2
12016: PPUSH
12017: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12021: LD_INT 51
12023: PPUSH
12024: LD_INT 5
12026: PPUSH
12027: LD_INT 2
12029: PPUSH
12030: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12034: LD_INT 52
12036: PPUSH
12037: LD_INT 5
12039: PPUSH
12040: LD_INT 2
12042: PPUSH
12043: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12047: LD_INT 66
12049: PPUSH
12050: LD_INT 2
12052: PPUSH
12053: LD_INT 2
12055: PPUSH
12056: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12060: LD_INT 66
12062: PPUSH
12063: LD_INT 5
12065: PPUSH
12066: LD_INT 2
12068: PPUSH
12069: CALL_OW 322
// end ; end ;
12073: LD_VAR 0 1
12077: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12086: LD_ADDR_VAR 0 7
12090: PUSH
12091: LD_INT 43
12093: PUSH
12094: LD_INT 68
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 43
12103: PUSH
12104: LD_INT 79
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 99
12113: PUSH
12114: LD_INT 114
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 103
12123: PUSH
12124: LD_INT 114
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 156
12133: PUSH
12134: LD_INT 92
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 152
12143: PUSH
12144: LD_INT 85
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: ST_TO_ADDR
// for i in sources do
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: LD_VAR 0 7
12168: PUSH
12169: FOR_IN
12170: IFFALSE 12199
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12172: LD_VAR 0 3
12176: PUSH
12177: LD_INT 1
12179: ARRAY
12180: PPUSH
12181: LD_VAR 0 3
12185: PUSH
12186: LD_INT 2
12188: ARRAY
12189: PPUSH
12190: LD_INT 3
12192: PPUSH
12193: CALL_OW 441
12197: GO 12169
12199: POP
12200: POP
// case position of 1 :
12201: LD_VAR 0 1
12205: PUSH
12206: LD_INT 1
12208: DOUBLE
12209: EQUAL
12210: IFTRUE 12214
12212: GO 12225
12214: POP
// area := westConv ; 2 :
12215: LD_ADDR_VAR 0 6
12219: PUSH
12220: LD_INT 20
12222: ST_TO_ADDR
12223: GO 12264
12225: LD_INT 2
12227: DOUBLE
12228: EQUAL
12229: IFTRUE 12233
12231: GO 12244
12233: POP
// area := midConv ; 3 :
12234: LD_ADDR_VAR 0 6
12238: PUSH
12239: LD_INT 21
12241: ST_TO_ADDR
12242: GO 12264
12244: LD_INT 3
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12263
12252: POP
// area := eastConv ; end ;
12253: LD_ADDR_VAR 0 6
12257: PUSH
12258: LD_INT 22
12260: ST_TO_ADDR
12261: GO 12264
12263: POP
// area := AreaToList ( area , 0 ) ;
12264: LD_ADDR_VAR 0 6
12268: PUSH
12269: LD_VAR 0 6
12273: PPUSH
12274: LD_INT 0
12276: PPUSH
12277: CALL_OW 517
12281: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12282: LD_ADDR_VAR 0 3
12286: PUSH
12287: DOUBLE
12288: LD_INT 1
12290: DEC
12291: ST_TO_ADDR
12292: LD_VAR 0 6
12296: PUSH
12297: LD_INT 1
12299: ARRAY
12300: PUSH
12301: FOR_TO
12302: IFFALSE 12383
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12304: LD_VAR 0 6
12308: PUSH
12309: LD_INT 1
12311: ARRAY
12312: PUSH
12313: LD_VAR 0 3
12317: ARRAY
12318: PPUSH
12319: LD_VAR 0 6
12323: PUSH
12324: LD_INT 2
12326: ARRAY
12327: PUSH
12328: LD_VAR 0 3
12332: ARRAY
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12344: LD_VAR 0 6
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PUSH
12353: LD_VAR 0 3
12357: ARRAY
12358: PPUSH
12359: LD_VAR 0 6
12363: PUSH
12364: LD_INT 2
12366: ARRAY
12367: PUSH
12368: LD_VAR 0 3
12372: ARRAY
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 331
// end ;
12381: GO 12301
12383: POP
12384: POP
// ruPossition = position ;
12385: LD_ADDR_EXP 42
12389: PUSH
12390: LD_VAR 0 1
12394: ST_TO_ADDR
// if position = 1 then
12395: LD_VAR 0 1
12399: PUSH
12400: LD_INT 1
12402: EQUAL
12403: IFFALSE 13151
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12405: LD_ADDR_VAR 0 4
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 3
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 25
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 69
12438: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12439: LD_ADDR_VAR 0 5
12443: PUSH
12444: LD_INT 0
12446: PUSH
12447: LD_INT 49
12449: PUSH
12450: LD_INT 74
12452: PUSH
12453: LD_INT 3
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 4
12464: PUSH
12465: LD_INT 73
12467: PUSH
12468: LD_INT 88
12470: PUSH
12471: LD_INT 5
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 4
12482: PUSH
12483: LD_INT 56
12485: PUSH
12486: LD_INT 62
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 29
12500: PUSH
12501: LD_INT 43
12503: PUSH
12504: LD_INT 68
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 30
12518: PUSH
12519: LD_INT 43
12521: PUSH
12522: LD_INT 79
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 28
12536: PUSH
12537: LD_INT 60
12539: PUSH
12540: LD_INT 75
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 2
12554: PUSH
12555: LD_INT 50
12557: PUSH
12558: LD_INT 87
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 28
12572: PUSH
12573: LD_INT 45
12575: PUSH
12576: LD_INT 67
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 17
12590: PUSH
12591: LD_INT 47
12593: PUSH
12594: LD_INT 84
12596: PUSH
12597: LD_INT 2
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 18
12608: PUSH
12609: LD_INT 46
12611: PUSH
12612: LD_INT 87
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 28
12626: PUSH
12627: LD_INT 41
12629: PUSH
12630: LD_INT 64
12632: PUSH
12633: LD_INT 5
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 32
12644: PUSH
12645: LD_INT 75
12647: PUSH
12648: LD_INT 76
12650: PUSH
12651: LD_INT 5
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 32
12662: PUSH
12663: LD_INT 77
12665: PUSH
12666: LD_INT 75
12668: PUSH
12669: LD_INT 5
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 32
12680: PUSH
12681: LD_INT 69
12683: PUSH
12684: LD_INT 68
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 32
12698: PUSH
12699: LD_INT 59
12701: PUSH
12702: LD_INT 96
12704: PUSH
12705: LD_INT 5
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 32
12716: PUSH
12717: LD_INT 56
12719: PUSH
12720: LD_INT 96
12722: PUSH
12723: LD_INT 0
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 32
12734: PUSH
12735: LD_INT 51
12737: PUSH
12738: LD_INT 61
12740: PUSH
12741: LD_INT 3
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 32
12752: PUSH
12753: LD_INT 42
12755: PUSH
12756: LD_INT 60
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 32
12770: PUSH
12771: LD_INT 36
12773: PUSH
12774: LD_INT 58
12776: PUSH
12777: LD_INT 3
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 32
12788: PUSH
12789: LD_INT 39
12791: PUSH
12792: LD_INT 59
12794: PUSH
12795: LD_INT 3
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 32
12806: PUSH
12807: LD_INT 61
12809: PUSH
12810: LD_INT 64
12812: PUSH
12813: LD_INT 3
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 33
12824: PUSH
12825: LD_INT 63
12827: PUSH
12828: LD_INT 90
12830: PUSH
12831: LD_INT 5
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 33
12842: PUSH
12843: LD_INT 64
12845: PUSH
12846: LD_INT 88
12848: PUSH
12849: LD_INT 5
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 33
12860: PUSH
12861: LD_INT 72
12863: PUSH
12864: LD_INT 82
12866: PUSH
12867: LD_INT 5
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 6
12878: PUSH
12879: LD_INT 42
12881: PUSH
12882: LD_INT 74
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 6
12896: PUSH
12897: LD_INT 56
12899: PUSH
12900: LD_INT 77
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 21
12914: PUSH
12915: LD_INT 54
12917: PUSH
12918: LD_INT 91
12920: PUSH
12921: LD_INT 5
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 16
12932: PUSH
12933: LD_INT 50
12935: PUSH
12936: LD_INT 83
12938: PUSH
12939: LD_INT 3
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 24
12950: PUSH
12951: LD_INT 50
12953: PUSH
12954: LD_INT 90
12956: PUSH
12957: LD_INT 0
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12997: LD_ADDR_VAR 0 3
13001: PUSH
13002: LD_INT 22
13004: PUSH
13005: LD_INT 3
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 3
13014: PUSH
13015: LD_INT 25
13017: PUSH
13018: LD_INT 2
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PPUSH
13033: CALL_OW 69
13037: PUSH
13038: FOR_IN
13039: IFFALSE 13058
// AddComAgressiveMove ( i , 53 , 82 ) ;
13041: LD_VAR 0 3
13045: PPUSH
13046: LD_INT 53
13048: PPUSH
13049: LD_INT 82
13051: PPUSH
13052: CALL_OW 174
13056: GO 13038
13058: POP
13059: POP
// for i := 1 to buildingsTab do
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: DOUBLE
13066: LD_INT 1
13068: DEC
13069: ST_TO_ADDR
13070: LD_VAR 0 5
13074: PUSH
13075: FOR_TO
13076: IFFALSE 13149
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13078: LD_VAR 0 4
13082: PPUSH
13083: LD_VAR 0 5
13087: PUSH
13088: LD_VAR 0 3
13092: ARRAY
13093: PUSH
13094: LD_INT 1
13096: ARRAY
13097: PPUSH
13098: LD_VAR 0 5
13102: PUSH
13103: LD_VAR 0 3
13107: ARRAY
13108: PUSH
13109: LD_INT 2
13111: ARRAY
13112: PPUSH
13113: LD_VAR 0 5
13117: PUSH
13118: LD_VAR 0 3
13122: ARRAY
13123: PUSH
13124: LD_INT 3
13126: ARRAY
13127: PPUSH
13128: LD_VAR 0 5
13132: PUSH
13133: LD_VAR 0 3
13137: ARRAY
13138: PUSH
13139: LD_INT 4
13141: ARRAY
13142: PPUSH
13143: CALL_OW 205
13147: GO 13075
13149: POP
13150: POP
// end ; if position = 2 then
13151: LD_VAR 0 1
13155: PUSH
13156: LD_INT 2
13158: EQUAL
13159: IFFALSE 13774
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13161: LD_ADDR_VAR 0 4
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 25
13178: PUSH
13179: LD_INT 2
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 69
13194: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13195: LD_ADDR_VAR 0 5
13199: PUSH
13200: LD_INT 0
13202: PUSH
13203: LD_INT 104
13205: PUSH
13206: LD_INT 110
13208: PUSH
13209: LD_INT 5
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 4
13220: PUSH
13221: LD_INT 98
13223: PUSH
13224: LD_INT 90
13226: PUSH
13227: LD_INT 3
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 29
13238: PUSH
13239: LD_INT 103
13241: PUSH
13242: LD_INT 114
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 30
13256: PUSH
13257: LD_INT 99
13259: PUSH
13260: LD_INT 114
13262: PUSH
13263: LD_INT 3
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 28
13274: PUSH
13275: LD_INT 100
13277: PUSH
13278: LD_INT 112
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 2
13292: PUSH
13293: LD_INT 92
13295: PUSH
13296: LD_INT 101
13298: PUSH
13299: LD_INT 0
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 28
13310: PUSH
13311: LD_INT 97
13313: PUSH
13314: LD_INT 116
13316: PUSH
13317: LD_INT 5
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 17
13328: PUSH
13329: LD_INT 96
13331: PUSH
13332: LD_INT 101
13334: PUSH
13335: LD_INT 4
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 18
13346: PUSH
13347: LD_INT 88
13349: PUSH
13350: LD_INT 97
13352: PUSH
13353: LD_INT 2
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 28
13364: PUSH
13365: LD_INT 106
13367: PUSH
13368: LD_INT 92
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 32
13382: PUSH
13383: LD_INT 88
13385: PUSH
13386: LD_INT 89
13388: PUSH
13389: LD_INT 2
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 32
13400: PUSH
13401: LD_INT 86
13403: PUSH
13404: LD_INT 90
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 32
13418: PUSH
13419: LD_INT 85
13421: PUSH
13422: LD_INT 99
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 32
13436: PUSH
13437: LD_INT 85
13439: PUSH
13440: LD_INT 107
13442: PUSH
13443: LD_INT 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 33
13454: PUSH
13455: LD_INT 105
13457: PUSH
13458: LD_INT 99
13460: PUSH
13461: LD_INT 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 33
13472: PUSH
13473: LD_INT 102
13475: PUSH
13476: LD_INT 92
13478: PUSH
13479: LD_INT 3
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 33
13490: PUSH
13491: LD_INT 105
13493: PUSH
13494: LD_INT 92
13496: PUSH
13497: LD_INT 2
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 6
13508: PUSH
13509: LD_INT 92
13511: PUSH
13512: LD_INT 110
13514: PUSH
13515: LD_INT 0
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 6
13526: PUSH
13527: LD_INT 103
13529: PUSH
13530: LD_INT 103
13532: PUSH
13533: LD_INT 5
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 21
13544: PUSH
13545: LD_INT 89
13547: PUSH
13548: LD_INT 101
13550: PUSH
13551: LD_INT 1
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 16
13562: PUSH
13563: LD_INT 95
13565: PUSH
13566: LD_INT 104
13568: PUSH
13569: LD_INT 4
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 24
13580: PUSH
13581: LD_INT 92
13583: PUSH
13584: LD_INT 105
13586: PUSH
13587: LD_INT 0
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13620: LD_ADDR_VAR 0 3
13624: PUSH
13625: LD_INT 22
13627: PUSH
13628: LD_INT 3
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: LD_INT 25
13640: PUSH
13641: LD_INT 2
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PPUSH
13656: CALL_OW 69
13660: PUSH
13661: FOR_IN
13662: IFFALSE 13681
// AddComAgressiveMove ( i , 96 , 99 ) ;
13664: LD_VAR 0 3
13668: PPUSH
13669: LD_INT 96
13671: PPUSH
13672: LD_INT 99
13674: PPUSH
13675: CALL_OW 174
13679: GO 13661
13681: POP
13682: POP
// for i := 1 to buildingsTab do
13683: LD_ADDR_VAR 0 3
13687: PUSH
13688: DOUBLE
13689: LD_INT 1
13691: DEC
13692: ST_TO_ADDR
13693: LD_VAR 0 5
13697: PUSH
13698: FOR_TO
13699: IFFALSE 13772
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13701: LD_VAR 0 4
13705: PPUSH
13706: LD_VAR 0 5
13710: PUSH
13711: LD_VAR 0 3
13715: ARRAY
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: PPUSH
13721: LD_VAR 0 5
13725: PUSH
13726: LD_VAR 0 3
13730: ARRAY
13731: PUSH
13732: LD_INT 2
13734: ARRAY
13735: PPUSH
13736: LD_VAR 0 5
13740: PUSH
13741: LD_VAR 0 3
13745: ARRAY
13746: PUSH
13747: LD_INT 3
13749: ARRAY
13750: PPUSH
13751: LD_VAR 0 5
13755: PUSH
13756: LD_VAR 0 3
13760: ARRAY
13761: PUSH
13762: LD_INT 4
13764: ARRAY
13765: PPUSH
13766: CALL_OW 205
13770: GO 13698
13772: POP
13773: POP
// end ; if position = 3 then
13774: LD_VAR 0 1
13778: PUSH
13779: LD_INT 3
13781: EQUAL
13782: IFFALSE 14568
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13784: LD_ADDR_VAR 0 4
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_INT 3
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 25
13801: PUSH
13802: LD_INT 2
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13818: LD_ADDR_VAR 0 5
13822: PUSH
13823: LD_INT 0
13825: PUSH
13826: LD_INT 151
13828: PUSH
13829: LD_INT 71
13831: PUSH
13832: LD_INT 4
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 4
13843: PUSH
13844: LD_INT 145
13846: PUSH
13847: LD_INT 53
13849: PUSH
13850: LD_INT 3
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 4
13861: PUSH
13862: LD_INT 172
13864: PUSH
13865: LD_INT 102
13867: PUSH
13868: LD_INT 5
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 29
13879: PUSH
13880: LD_INT 152
13882: PUSH
13883: LD_INT 85
13885: PUSH
13886: LD_INT 3
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 30
13897: PUSH
13898: LD_INT 156
13900: PUSH
13901: LD_INT 92
13903: PUSH
13904: LD_INT 3
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 28
13915: PUSH
13916: LD_INT 151
13918: PUSH
13919: LD_INT 66
13921: PUSH
13922: LD_INT 4
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: LD_INT 163
13936: PUSH
13937: LD_INT 95
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 28
13951: PUSH
13952: LD_INT 149
13954: PUSH
13955: LD_INT 63
13957: PUSH
13958: LD_INT 4
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 17
13969: PUSH
13970: LD_INT 167
13972: PUSH
13973: LD_INT 99
13975: PUSH
13976: LD_INT 5
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 18
13987: PUSH
13988: LD_INT 163
13990: PUSH
13991: LD_INT 98
13993: PUSH
13994: LD_INT 0
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 28
14005: PUSH
14006: LD_INT 154
14008: PUSH
14009: LD_INT 70
14011: PUSH
14012: LD_INT 4
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 32
14023: PUSH
14024: LD_INT 155
14026: PUSH
14027: LD_INT 62
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 32
14041: PUSH
14042: LD_INT 161
14044: PUSH
14045: LD_INT 69
14047: PUSH
14048: LD_INT 4
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 32
14059: PUSH
14060: LD_INT 168
14062: PUSH
14063: LD_INT 78
14065: PUSH
14066: LD_INT 4
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 32
14077: PUSH
14078: LD_INT 163
14080: PUSH
14081: LD_INT 80
14083: PUSH
14084: LD_INT 5
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 32
14095: PUSH
14096: LD_INT 136
14098: PUSH
14099: LD_INT 73
14101: PUSH
14102: LD_INT 0
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 157
14116: PUSH
14117: LD_INT 98
14119: PUSH
14120: LD_INT 0
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 32
14131: PUSH
14132: LD_INT 150
14134: PUSH
14135: LD_INT 87
14137: PUSH
14138: LD_INT 1
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 33
14149: PUSH
14150: LD_INT 171
14152: PUSH
14153: LD_INT 97
14155: PUSH
14156: LD_INT 4
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: PUSH
14165: LD_INT 33
14167: PUSH
14168: LD_INT 168
14170: PUSH
14171: LD_INT 92
14173: PUSH
14174: LD_INT 4
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 33
14185: PUSH
14186: LD_INT 166
14188: PUSH
14189: LD_INT 80
14191: PUSH
14192: LD_INT 5
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 33
14203: PUSH
14204: LD_INT 141
14206: PUSH
14207: LD_INT 54
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 33
14221: PUSH
14222: LD_INT 133
14224: PUSH
14225: LD_INT 57
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 33
14239: PUSH
14240: LD_INT 132
14242: PUSH
14243: LD_INT 61
14245: PUSH
14246: LD_INT 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 33
14257: PUSH
14258: LD_INT 150
14260: PUSH
14261: LD_INT 82
14263: PUSH
14264: LD_INT 0
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 33
14275: PUSH
14276: LD_INT 132
14278: PUSH
14279: LD_INT 72
14281: PUSH
14282: LD_INT 0
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 6
14293: PUSH
14294: LD_INT 146
14296: PUSH
14297: LD_INT 64
14299: PUSH
14300: LD_INT 4
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 6
14311: PUSH
14312: LD_INT 159
14314: PUSH
14315: LD_INT 85
14317: PUSH
14318: LD_INT 4
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 163
14332: PUSH
14333: LD_INT 91
14335: PUSH
14336: LD_INT 3
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 16
14347: PUSH
14348: LD_INT 166
14350: PUSH
14351: LD_INT 95
14353: PUSH
14354: LD_INT 4
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 159
14368: PUSH
14369: LD_INT 95
14371: PUSH
14372: LD_INT 1
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 3
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 3
14431: PUSH
14432: LD_INT 25
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: PUSH
14455: FOR_IN
14456: IFFALSE 14475
// AddComAgressiveMove ( i , 141 , 65 ) ;
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 141
14465: PPUSH
14466: LD_INT 65
14468: PPUSH
14469: CALL_OW 174
14473: GO 14455
14475: POP
14476: POP
// for i := 1 to buildingsTab do
14477: LD_ADDR_VAR 0 3
14481: PUSH
14482: DOUBLE
14483: LD_INT 1
14485: DEC
14486: ST_TO_ADDR
14487: LD_VAR 0 5
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14566
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14495: LD_VAR 0 4
14499: PPUSH
14500: LD_VAR 0 5
14504: PUSH
14505: LD_VAR 0 3
14509: ARRAY
14510: PUSH
14511: LD_INT 1
14513: ARRAY
14514: PPUSH
14515: LD_VAR 0 5
14519: PUSH
14520: LD_VAR 0 3
14524: ARRAY
14525: PUSH
14526: LD_INT 2
14528: ARRAY
14529: PPUSH
14530: LD_VAR 0 5
14534: PUSH
14535: LD_VAR 0 3
14539: ARRAY
14540: PUSH
14541: LD_INT 3
14543: ARRAY
14544: PPUSH
14545: LD_VAR 0 5
14549: PUSH
14550: LD_VAR 0 3
14554: ARRAY
14555: PUSH
14556: LD_INT 4
14558: ARRAY
14559: PPUSH
14560: CALL_OW 205
14564: GO 14492
14566: POP
14567: POP
// end ; end ;
14568: LD_VAR 0 2
14572: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14573: LD_INT 0
14575: PPUSH
14576: PPUSH
14577: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14578: LD_ADDR_EXP 69
14582: PUSH
14583: LD_INT 0
14585: PUSH
14586: LD_INT 71
14588: PUSH
14589: LD_INT 15
14591: PUSH
14592: LD_INT 3
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 6
14603: PUSH
14604: LD_INT 77
14606: PUSH
14607: LD_INT 18
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 4
14621: PUSH
14622: LD_INT 77
14624: PUSH
14625: LD_INT 26
14627: PUSH
14628: LD_INT 0
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 31
14639: PUSH
14640: LD_INT 72
14642: PUSH
14643: LD_INT 24
14645: PUSH
14646: LD_INT 0
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 31
14657: PUSH
14658: LD_INT 82
14660: PUSH
14661: LD_INT 28
14663: PUSH
14664: LD_INT 0
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 31
14675: PUSH
14676: LD_INT 84
14678: PUSH
14679: LD_INT 21
14681: PUSH
14682: LD_INT 3
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 31
14693: PUSH
14694: LD_INT 66
14696: PUSH
14697: LD_INT 14
14699: PUSH
14700: LD_INT 2
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 27
14711: PUSH
14712: LD_INT 67
14714: PUSH
14715: LD_INT 18
14717: PUSH
14718: LD_INT 5
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 27
14729: PUSH
14730: LD_INT 69
14732: PUSH
14733: LD_INT 23
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14756: LD_ADDR_VAR 0 3
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_INT 2
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 25
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 69
14789: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14790: LD_VAR 0 3
14794: PPUSH
14795: LD_EXP 69
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: LD_EXP 69
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PUSH
14817: LD_INT 2
14819: ARRAY
14820: PPUSH
14821: LD_EXP 69
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PUSH
14830: LD_INT 3
14832: ARRAY
14833: PPUSH
14834: LD_EXP 69
14838: PUSH
14839: LD_INT 1
14841: ARRAY
14842: PUSH
14843: LD_INT 4
14845: ARRAY
14846: PPUSH
14847: CALL_OW 205
// end ;
14851: LD_VAR 0 1
14855: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14856: LD_INT 0
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14864: LD_ADDR_VAR 0 7
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_VAR 0 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 25
14883: PUSH
14884: LD_INT 9
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PPUSH
14895: CALL_OW 69
14899: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14900: LD_ADDR_VAR 0 8
14904: PUSH
14905: LD_INT 22
14907: PUSH
14908: LD_VAR 0 2
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: LD_INT 21
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PPUSH
14938: CALL_OW 69
14942: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14943: LD_ADDR_VAR 0 5
14947: PUSH
14948: LD_INT 1
14950: PPUSH
14951: LD_INT 3
14953: PPUSH
14954: CALL_OW 12
14958: ST_TO_ADDR
// for i = 1 to list do
14959: LD_ADDR_VAR 0 6
14963: PUSH
14964: DOUBLE
14965: LD_INT 1
14967: DEC
14968: ST_TO_ADDR
14969: LD_VAR 0 7
14973: PUSH
14974: FOR_TO
14975: IFFALSE 15965
// for ta in filter do
14977: LD_ADDR_VAR 0 4
14981: PUSH
14982: LD_VAR 0 8
14986: PUSH
14987: FOR_IN
14988: IFFALSE 15961
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14990: LD_VAR 0 7
14994: PUSH
14995: LD_VAR 0 6
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 4
15005: PPUSH
15006: CALL_OW 296
15010: PUSH
15011: LD_INT 15
15013: LESSEQUAL
15014: IFFALSE 15959
// begin case c of 1 :
15016: LD_VAR 0 5
15020: PUSH
15021: LD_INT 1
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15461
15029: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15030: LD_VAR 0 7
15034: PUSH
15035: LD_VAR 0 6
15039: ARRAY
15040: PPUSH
15041: LD_VAR 0 4
15045: PPUSH
15046: CALL_OW 250
15050: PPUSH
15051: LD_VAR 0 4
15055: PPUSH
15056: CALL_OW 251
15060: PPUSH
15061: CALL_OW 154
// if eventVar2 = 0 then
15065: LD_EXP 67
15069: PUSH
15070: LD_INT 0
15072: EQUAL
15073: IFFALSE 15459
// begin eventVar2 = 1 ;
15075: LD_ADDR_EXP 67
15079: PUSH
15080: LD_INT 1
15082: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15083: LD_INT 245
15085: PPUSH
15086: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15090: LD_VAR 0 4
15094: PPUSH
15095: CALL_OW 250
15099: PPUSH
15100: LD_VAR 0 4
15104: PPUSH
15105: CALL_OW 251
15109: PPUSH
15110: CALL_OW 84
// DialogueOn ;
15114: CALL_OW 6
// if IsOK ( Cyrus ) then
15118: LD_EXP 5
15122: PPUSH
15123: CALL_OW 302
15127: IFFALSE 15143
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15129: LD_EXP 5
15133: PPUSH
15134: LD_STRING D9a-Cyrus-1
15136: PPUSH
15137: CALL_OW 88
// end else
15141: GO 15265
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15143: LD_INT 22
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 26
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: LD_INT 25
15168: PUSH
15169: LD_INT 1
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 25
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 25
15188: PUSH
15189: LD_INT 3
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 25
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 25
15208: PUSH
15209: LD_INT 5
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 69
15233: PUSH
15234: LD_EXP 1
15238: PUSH
15239: LD_EXP 14
15243: PUSH
15244: LD_EXP 5
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: LIST
15253: DIFF
15254: PPUSH
15255: LD_STRING D9a-Sol1-1
15257: PPUSH
15258: LD_STRING D9a-Sol1-1
15260: PPUSH
15261: CALL 11420 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15265: LD_INT 22
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 26
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 2
15287: PUSH
15288: LD_INT 25
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 25
15310: PUSH
15311: LD_INT 3
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 25
15320: PUSH
15321: LD_INT 4
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 25
15330: PUSH
15331: LD_INT 5
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: PPUSH
15351: CALL_OW 69
15355: PUSH
15356: LD_EXP 1
15360: PUSH
15361: LD_EXP 14
15365: PUSH
15366: LD_EXP 5
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: DIFF
15376: PPUSH
15377: LD_STRING D9b-Sol1-1
15379: PPUSH
15380: LD_STRING D9b-Sol1-1
15382: PPUSH
15383: CALL 11420 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15387: LD_STRING 09_arInfo
15389: PPUSH
15390: LD_INT 0
15392: PPUSH
15393: CALL_OW 30
15397: PUSH
15398: LD_INT 1
15400: EQUAL
15401: IFFALSE 15415
// Say ( JMM , D9a-JMM-1 ) ;
15403: LD_EXP 1
15407: PPUSH
15408: LD_STRING D9a-JMM-1
15410: PPUSH
15411: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15415: LD_EXP 1
15419: PPUSH
15420: LD_STRING D9c-JMM-1
15422: PPUSH
15423: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15427: LD_INT 12
15429: PPUSH
15430: LD_INT 1
15432: PPUSH
15433: CALL_OW 321
15437: PUSH
15438: LD_INT 2
15440: EQUAL
15441: IFFALSE 15455
// Say ( JMM , D9c-JMM-1a ) ;
15443: LD_EXP 1
15447: PPUSH
15448: LD_STRING D9c-JMM-1a
15450: PPUSH
15451: CALL_OW 88
// DialogueOff ;
15455: CALL_OW 7
// end ; end ; 2 :
15459: GO 15959
15461: LD_INT 2
15463: DOUBLE
15464: EQUAL
15465: IFTRUE 15469
15467: GO 15927
15469: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15470: LD_VAR 0 7
15474: PUSH
15475: LD_VAR 0 6
15479: ARRAY
15480: PPUSH
15481: LD_VAR 0 4
15485: PPUSH
15486: CALL_OW 250
15490: PUSH
15491: LD_INT 1
15493: NEG
15494: PPUSH
15495: LD_INT 1
15497: PPUSH
15498: CALL_OW 12
15502: PLUS
15503: PPUSH
15504: LD_VAR 0 4
15508: PPUSH
15509: CALL_OW 251
15513: PUSH
15514: LD_INT 1
15516: NEG
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: CALL_OW 12
15525: PLUS
15526: PPUSH
15527: CALL_OW 153
// if eventVar2 = 0 then
15531: LD_EXP 67
15535: PUSH
15536: LD_INT 0
15538: EQUAL
15539: IFFALSE 15925
// begin eventVar2 = 1 ;
15541: LD_ADDR_EXP 67
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15549: LD_INT 245
15551: PPUSH
15552: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15556: LD_VAR 0 4
15560: PPUSH
15561: CALL_OW 250
15565: PPUSH
15566: LD_VAR 0 4
15570: PPUSH
15571: CALL_OW 251
15575: PPUSH
15576: CALL_OW 84
// DialogueOn ;
15580: CALL_OW 6
// if IsOK ( Cyrus ) then
15584: LD_EXP 5
15588: PPUSH
15589: CALL_OW 302
15593: IFFALSE 15609
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15595: LD_EXP 5
15599: PPUSH
15600: LD_STRING D9a-Cyrus-1
15602: PPUSH
15603: CALL_OW 88
// end else
15607: GO 15731
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15609: LD_INT 22
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 26
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: LD_INT 25
15634: PUSH
15635: LD_INT 1
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 25
15644: PUSH
15645: LD_INT 2
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 25
15654: PUSH
15655: LD_INT 3
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 25
15664: PUSH
15665: LD_INT 4
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 25
15674: PUSH
15675: LD_INT 5
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 69
15699: PUSH
15700: LD_EXP 1
15704: PUSH
15705: LD_EXP 14
15709: PUSH
15710: LD_EXP 5
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: DIFF
15720: PPUSH
15721: LD_STRING D9a-Sol1-1
15723: PPUSH
15724: LD_STRING D9a-Sol1-1
15726: PPUSH
15727: CALL 11420 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15731: LD_INT 22
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 26
15743: PUSH
15744: LD_INT 1
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 2
15753: PUSH
15754: LD_INT 25
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 25
15766: PUSH
15767: LD_INT 2
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 25
15776: PUSH
15777: LD_INT 3
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 25
15786: PUSH
15787: LD_INT 4
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 25
15796: PUSH
15797: LD_INT 5
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: PPUSH
15817: CALL_OW 69
15821: PUSH
15822: LD_EXP 1
15826: PUSH
15827: LD_EXP 14
15831: PUSH
15832: LD_EXP 5
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: DIFF
15842: PPUSH
15843: LD_STRING D9b-Sol1-1
15845: PPUSH
15846: LD_STRING D9b-Sol1-1
15848: PPUSH
15849: CALL 11420 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15853: LD_STRING 09_arInfo
15855: PPUSH
15856: LD_INT 0
15858: PPUSH
15859: CALL_OW 30
15863: PUSH
15864: LD_INT 1
15866: EQUAL
15867: IFFALSE 15881
// Say ( JMM , D9a-JMM-1 ) ;
15869: LD_EXP 1
15873: PPUSH
15874: LD_STRING D9a-JMM-1
15876: PPUSH
15877: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15881: LD_EXP 1
15885: PPUSH
15886: LD_STRING D9c-JMM-1
15888: PPUSH
15889: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15893: LD_INT 12
15895: PPUSH
15896: LD_INT 1
15898: PPUSH
15899: CALL_OW 321
15903: PUSH
15904: LD_INT 2
15906: EQUAL
15907: IFFALSE 15921
// Say ( JMM , D9c-JMM-1a ) ;
15909: LD_EXP 1
15913: PPUSH
15914: LD_STRING D9c-JMM-1a
15916: PPUSH
15917: CALL_OW 88
// DialogueOff ;
15921: CALL_OW 7
// end ; end ; 3 :
15925: GO 15959
15927: LD_INT 3
15929: DOUBLE
15930: EQUAL
15931: IFTRUE 15935
15933: GO 15958
15935: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15936: LD_VAR 0 7
15940: PUSH
15941: LD_VAR 0 6
15945: ARRAY
15946: PPUSH
15947: LD_VAR 0 4
15951: PPUSH
15952: CALL_OW 115
15956: GO 15959
15958: POP
// end ; end ;
15959: GO 14987
15961: POP
15962: POP
15963: GO 14974
15965: POP
15966: POP
// end ;
15967: LD_VAR 0 3
15971: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15972: LD_INT 0
15974: PPUSH
15975: PPUSH
15976: PPUSH
15977: PPUSH
// for i = 1 to 72 do
15978: LD_ADDR_VAR 0 5
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_INT 72
15990: PUSH
15991: FOR_TO
15992: IFFALSE 16050
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15994: LD_VAR 0 5
15998: PPUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 321
16008: PUSH
16009: LD_INT 1
16011: EQUAL
16012: PUSH
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: CALL_OW 482
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: AND
16032: IFFALSE 16048
// AddComResearch ( lab , i ) ;
16034: LD_VAR 0 2
16038: PPUSH
16039: LD_VAR 0 5
16043: PPUSH
16044: CALL_OW 184
16048: GO 15991
16050: POP
16051: POP
// end ;
16052: LD_VAR 0 4
16056: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16057: LD_INT 0
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16067: LD_ADDR_VAR 0 6
16071: PUSH
16072: LD_INT 22
16074: PUSH
16075: LD_VAR 0 1
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 56
16086: PUSH
16087: EMPTY
16088: LIST
16089: PUSH
16090: LD_INT 24
16092: PUSH
16093: LD_INT 700
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 3
16102: PUSH
16103: LD_INT 60
16105: PUSH
16106: EMPTY
16107: LIST
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 2
16115: PUSH
16116: LD_INT 25
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 25
16128: PUSH
16129: LD_INT 9
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16153: LD_ADDR_VAR 0 7
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_VAR 0 1
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 30
16172: PUSH
16173: LD_INT 32
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 58
16182: PUSH
16183: EMPTY
16184: LIST
16185: PUSH
16186: LD_INT 24
16188: PUSH
16189: LD_INT 251
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 69
16206: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16207: LD_ADDR_VAR 0 9
16211: PUSH
16212: LD_INT 22
16214: PUSH
16215: LD_VAR 0 1
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 2
16226: PUSH
16227: LD_INT 30
16229: PUSH
16230: LD_INT 4
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 30
16239: PUSH
16240: LD_INT 5
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 24
16254: PUSH
16255: LD_INT 251
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL_OW 69
16271: ST_TO_ADDR
// if barrackList > 0 then
16272: LD_VAR 0 9
16276: PUSH
16277: LD_INT 0
16279: GREATER
16280: IFFALSE 16415
// begin if turretList = 0 then
16282: LD_VAR 0 7
16286: PUSH
16287: LD_INT 0
16289: EQUAL
16290: IFFALSE 16339
// begin for i in soldiers_list do
16292: LD_ADDR_VAR 0 4
16296: PUSH
16297: LD_VAR 0 6
16301: PUSH
16302: FOR_IN
16303: IFFALSE 16335
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16305: LD_VAR 0 4
16309: PPUSH
16310: LD_VAR 0 9
16314: PUSH
16315: LD_INT 1
16317: PPUSH
16318: LD_VAR 0 9
16322: PPUSH
16323: CALL_OW 12
16327: ARRAY
16328: PPUSH
16329: CALL_OW 120
16333: GO 16302
16335: POP
16336: POP
// end else
16337: GO 16415
// begin for i in barrackList do
16339: LD_ADDR_VAR 0 4
16343: PUSH
16344: LD_VAR 0 9
16348: PUSH
16349: FOR_IN
16350: IFFALSE 16413
// begin insideUnits = UnitsInside ( i ) ;
16352: LD_ADDR_VAR 0 10
16356: PUSH
16357: LD_VAR 0 4
16361: PPUSH
16362: CALL_OW 313
16366: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16367: LD_VAR 0 10
16371: PUSH
16372: LD_INT 1
16374: ARRAY
16375: PPUSH
16376: LD_VAR 0 7
16380: PUSH
16381: LD_INT 1
16383: ARRAY
16384: PPUSH
16385: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16389: LD_VAR 0 6
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_VAR 0 7
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: PPUSH
16407: CALL_OW 120
// end ;
16411: GO 16349
16413: POP
16414: POP
// end ; end ; end ;
16415: LD_VAR 0 3
16419: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16420: LD_INT 0
16422: PPUSH
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16428: LD_ADDR_VAR 0 6
16432: PUSH
16433: LD_VAR 0 2
16437: PPUSH
16438: CALL_OW 313
16442: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16443: LD_ADDR_VAR 0 7
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_VAR 0 1
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 25
16462: PUSH
16463: LD_INT 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 24
16472: PUSH
16473: LD_INT 1000
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 3
16482: PUSH
16483: LD_INT 54
16485: PUSH
16486: EMPTY
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: PPUSH
16499: CALL_OW 69
16503: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16504: LD_ADDR_VAR 0 4
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_VAR 0 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 3
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 3
16533: PUSH
16534: LD_INT 24
16536: PUSH
16537: LD_INT 1000
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16561: LD_VAR 0 4
16565: NOT
16566: PUSH
16567: LD_VAR 0 7
16571: NOT
16572: AND
16573: PUSH
16574: LD_EXP 43
16578: NOT
16579: AND
16580: IFFALSE 16584
// exit ;
16582: GO 16775
// if buildings_list > 0 and engineerOkInside then
16584: LD_VAR 0 4
16588: PUSH
16589: LD_INT 0
16591: GREATER
16592: PUSH
16593: LD_VAR 0 6
16597: AND
16598: IFFALSE 16652
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16600: LD_ADDR_VAR 0 5
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_VAR 0 1
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 25
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PPUSH
16631: CALL_OW 69
16635: PUSH
16636: FOR_IN
16637: IFFALSE 16650
// ComExitBuilding ( i ) ;
16639: LD_VAR 0 5
16643: PPUSH
16644: CALL_OW 122
16648: GO 16636
16650: POP
16651: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16652: LD_VAR 0 4
16656: PUSH
16657: LD_INT 0
16659: GREATER
16660: PUSH
16661: LD_VAR 0 7
16665: PUSH
16666: LD_INT 0
16668: GREATER
16669: AND
16670: IFFALSE 16724
// begin for i in engineerOkOutside do
16672: LD_ADDR_VAR 0 5
16676: PUSH
16677: LD_VAR 0 7
16681: PUSH
16682: FOR_IN
16683: IFFALSE 16722
// for j in buildings_list do
16685: LD_ADDR_VAR 0 8
16689: PUSH
16690: LD_VAR 0 4
16694: PUSH
16695: FOR_IN
16696: IFFALSE 16718
// ComRepairBuilding ( i , j [ 1 ] ) ;
16698: LD_VAR 0 5
16702: PPUSH
16703: LD_VAR 0 8
16707: PUSH
16708: LD_INT 1
16710: ARRAY
16711: PPUSH
16712: CALL_OW 130
16716: GO 16695
16718: POP
16719: POP
16720: GO 16682
16722: POP
16723: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16724: LD_VAR 0 4
16728: PUSH
16729: LD_INT 0
16731: EQUAL
16732: PUSH
16733: LD_VAR 0 7
16737: PUSH
16738: LD_INT 0
16740: GREATER
16741: AND
16742: IFFALSE 16775
// for i in engineerOkOutside do
16744: LD_ADDR_VAR 0 5
16748: PUSH
16749: LD_VAR 0 7
16753: PUSH
16754: FOR_IN
16755: IFFALSE 16773
// ComEnterUnit ( i , building ) ;
16757: LD_VAR 0 5
16761: PPUSH
16762: LD_VAR 0 2
16766: PPUSH
16767: CALL_OW 120
16771: GO 16754
16773: POP
16774: POP
// end ;
16775: LD_VAR 0 3
16779: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16780: LD_INT 0
16782: PPUSH
16783: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16784: LD_INT 22
16786: PUSH
16787: LD_VAR 0 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PPUSH
16810: CALL_OW 69
16814: PUSH
16815: LD_INT 0
16817: GREATER
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_VAR 0 1
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 21
16833: PUSH
16834: LD_INT 3
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 3
16843: PUSH
16844: LD_INT 24
16846: PUSH
16847: LD_INT 1000
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: PUSH
16868: LD_INT 0
16870: EQUAL
16871: AND
16872: PUSH
16873: LD_VAR 0 2
16877: PUSH
16878: LD_INT 0
16880: GREATER
16881: AND
16882: IFFALSE 16981
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16884: LD_ADDR_VAR 0 4
16888: PUSH
16889: LD_INT 22
16891: PUSH
16892: LD_VAR 0 1
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 25
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: PUSH
16920: FOR_IN
16921: IFFALSE 16979
// begin AddComExitBuilding ( i ) ;
16923: LD_VAR 0 4
16927: PPUSH
16928: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16932: LD_VAR 0 4
16936: PPUSH
16937: LD_VAR 0 2
16941: PUSH
16942: LD_INT 1
16944: ARRAY
16945: PPUSH
16946: LD_VAR 0 2
16950: PUSH
16951: LD_INT 2
16953: ARRAY
16954: PPUSH
16955: LD_VAR 0 2
16959: PUSH
16960: LD_INT 3
16962: ARRAY
16963: PPUSH
16964: LD_VAR 0 2
16968: PUSH
16969: LD_INT 4
16971: ARRAY
16972: PPUSH
16973: CALL_OW 205
// end ;
16977: GO 16920
16979: POP
16980: POP
// end ; end ;
16981: LD_VAR 0 3
16985: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
16990: PPUSH
16991: PPUSH
16992: PPUSH
16993: PPUSH
16994: PPUSH
16995: PPUSH
16996: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16997: LD_ADDR_VAR 0 6
17001: PUSH
17002: LD_INT 22
17004: PUSH
17005: LD_VAR 0 1
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 25
17016: PUSH
17017: LD_INT 4
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 24
17026: PUSH
17027: LD_INT 251
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17044: LD_ADDR_VAR 0 7
17048: PUSH
17049: LD_VAR 0 3
17053: PPUSH
17054: LD_INT 22
17056: PUSH
17057: LD_VAR 0 1
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 25
17068: PUSH
17069: LD_INT 4
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 50
17078: PUSH
17079: EMPTY
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: PPUSH
17087: CALL_OW 70
17091: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17092: LD_ADDR_VAR 0 10
17096: PUSH
17097: LD_VAR 0 3
17101: PPUSH
17102: LD_INT 22
17104: PUSH
17105: LD_VAR 0 1
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 21
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 3
17126: PUSH
17127: LD_INT 25
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 3
17143: PUSH
17144: LD_INT 24
17146: PUSH
17147: LD_INT 750
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: PPUSH
17164: CALL_OW 70
17168: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17169: LD_ADDR_VAR 0 11
17173: PUSH
17174: LD_VAR 0 2
17178: PPUSH
17179: LD_INT 22
17181: PUSH
17182: LD_VAR 0 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 21
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 3
17203: PUSH
17204: LD_INT 25
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 3
17220: PUSH
17221: LD_INT 24
17223: PUSH
17224: LD_INT 1000
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 70
17245: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17246: LD_VAR 0 10
17250: NOT
17251: PUSH
17252: LD_VAR 0 7
17256: NOT
17257: AND
17258: PUSH
17259: LD_VAR 0 11
17263: NOT
17264: AND
17265: IFFALSE 17269
// exit ;
17267: GO 17529
// if damageUnits > 0 and sci_list > 0 then
17269: LD_VAR 0 10
17273: PUSH
17274: LD_INT 0
17276: GREATER
17277: PUSH
17278: LD_VAR 0 6
17282: PUSH
17283: LD_INT 0
17285: GREATER
17286: AND
17287: IFFALSE 17320
// for i in damageUnits do
17289: LD_ADDR_VAR 0 8
17293: PUSH
17294: LD_VAR 0 10
17298: PUSH
17299: FOR_IN
17300: IFFALSE 17318
// ComMoveToArea ( i , healArea ) ;
17302: LD_VAR 0 8
17306: PPUSH
17307: LD_VAR 0 2
17311: PPUSH
17312: CALL_OW 113
17316: GO 17299
17318: POP
17319: POP
// if unitsToHeal > 0 and sci_list > 0 then
17320: LD_VAR 0 11
17324: PUSH
17325: LD_INT 0
17327: GREATER
17328: PUSH
17329: LD_VAR 0 6
17333: PUSH
17334: LD_INT 0
17336: GREATER
17337: AND
17338: IFFALSE 17397
// begin for i in sci_list do
17340: LD_ADDR_VAR 0 8
17344: PUSH
17345: LD_VAR 0 6
17349: PUSH
17350: FOR_IN
17351: IFFALSE 17395
// begin ComExitBuilding ( i ) ;
17353: LD_VAR 0 8
17357: PPUSH
17358: CALL_OW 122
// for j in unitsToHeal do
17362: LD_ADDR_VAR 0 9
17366: PUSH
17367: LD_VAR 0 11
17371: PUSH
17372: FOR_IN
17373: IFFALSE 17391
// AddComHeal ( i , j ) ;
17375: LD_VAR 0 8
17379: PPUSH
17380: LD_VAR 0 9
17384: PPUSH
17385: CALL_OW 188
17389: GO 17372
17391: POP
17392: POP
// end ;
17393: GO 17350
17395: POP
17396: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17397: LD_VAR 0 10
17401: PUSH
17402: LD_INT 0
17404: EQUAL
17405: PUSH
17406: LD_VAR 0 11
17410: PUSH
17411: LD_INT 0
17413: EQUAL
17414: AND
17415: PUSH
17416: LD_VAR 0 7
17420: PUSH
17421: LD_INT 0
17423: GREATER
17424: AND
17425: IFFALSE 17529
// for i in sci_listOutside do
17427: LD_ADDR_VAR 0 8
17431: PUSH
17432: LD_VAR 0 7
17436: PUSH
17437: FOR_IN
17438: IFFALSE 17527
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17440: LD_ADDR_VAR 0 12
17444: PUSH
17445: LD_INT 22
17447: PUSH
17448: LD_VAR 0 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 21
17459: PUSH
17460: LD_INT 3
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 30
17469: PUSH
17470: LD_INT 8
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: LIST
17481: PPUSH
17482: CALL_OW 69
17486: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17487: LD_ADDR_VAR 0 13
17491: PUSH
17492: LD_INT 1
17494: PPUSH
17495: LD_VAR 0 12
17499: PPUSH
17500: CALL_OW 12
17504: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17505: LD_VAR 0 8
17509: PPUSH
17510: LD_VAR 0 12
17514: PUSH
17515: LD_VAR 0 13
17519: ARRAY
17520: PPUSH
17521: CALL_OW 120
// end ;
17525: GO 17437
17527: POP
17528: POP
// end ;
17529: LD_VAR 0 5
17533: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17534: LD_INT 0
17536: PPUSH
17537: PPUSH
17538: PPUSH
17539: PPUSH
17540: PPUSH
17541: PPUSH
17542: PPUSH
17543: PPUSH
17544: PPUSH
17545: PPUSH
17546: PPUSH
// amChassisTab = [ ] ;
17547: LD_ADDR_VAR 0 19
17551: PUSH
17552: EMPTY
17553: ST_TO_ADDR
// arChassisTab = [ ] ;
17554: LD_ADDR_VAR 0 18
17558: PUSH
17559: EMPTY
17560: ST_TO_ADDR
// ruChassisTab = [ ] ;
17561: LD_ADDR_VAR 0 17
17565: PUSH
17566: EMPTY
17567: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17568: LD_INT 35
17570: PPUSH
17571: CALL_OW 67
// if nation = 1 then
17575: LD_VAR 0 5
17579: PUSH
17580: LD_INT 1
17582: EQUAL
17583: IFFALSE 18088
// begin uc_side = side ;
17585: LD_ADDR_OWVAR 20
17589: PUSH
17590: LD_VAR 0 2
17594: ST_TO_ADDR
// uc_nation = nation ;
17595: LD_ADDR_OWVAR 21
17599: PUSH
17600: LD_VAR 0 5
17604: ST_TO_ADDR
// vc_engine = vehengine ;
17605: LD_ADDR_OWVAR 39
17609: PUSH
17610: LD_VAR 0 6
17614: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17615: LD_ADDR_OWVAR 38
17619: PUSH
17620: LD_VAR 0 7
17624: PUSH
17625: LD_INT 1
17627: PPUSH
17628: LD_VAR 0 7
17632: PPUSH
17633: CALL_OW 12
17637: ARRAY
17638: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17639: LD_ADDR_OWVAR 40
17643: PUSH
17644: LD_VAR 0 10
17648: PUSH
17649: LD_INT 1
17651: PPUSH
17652: LD_VAR 0 10
17656: PPUSH
17657: CALL_OW 12
17661: ARRAY
17662: ST_TO_ADDR
// for j = 1 to AMWeapon do
17663: LD_ADDR_VAR 0 14
17667: PUSH
17668: DOUBLE
17669: LD_INT 1
17671: DEC
17672: ST_TO_ADDR
17673: LD_VAR 0 10
17677: PUSH
17678: FOR_TO
17679: IFFALSE 17980
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17681: LD_VAR 0 10
17685: PUSH
17686: LD_VAR 0 14
17690: ARRAY
17691: PUSH
17692: LD_INT 2
17694: EQUAL
17695: PUSH
17696: LD_VAR 0 10
17700: PUSH
17701: LD_VAR 0 14
17705: ARRAY
17706: PUSH
17707: LD_INT 3
17709: EQUAL
17710: OR
17711: IFFALSE 17764
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17713: LD_ADDR_VAR 0 19
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: LD_INT 3
17726: PUSH
17727: LD_INT 4
17729: PUSH
17730: LD_INT 5
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17740: LD_ADDR_OWVAR 37
17744: PUSH
17745: LD_VAR 0 19
17749: PUSH
17750: LD_INT 1
17752: PPUSH
17753: LD_VAR 0 19
17757: PPUSH
17758: CALL_OW 12
17762: ARRAY
17763: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17764: LD_VAR 0 10
17768: PUSH
17769: LD_VAR 0 14
17773: ARRAY
17774: PUSH
17775: LD_INT 4
17777: EQUAL
17778: PUSH
17779: LD_VAR 0 10
17783: PUSH
17784: LD_VAR 0 14
17788: ARRAY
17789: PUSH
17790: LD_INT 5
17792: EQUAL
17793: OR
17794: PUSH
17795: LD_VAR 0 10
17799: PUSH
17800: LD_VAR 0 14
17804: ARRAY
17805: PUSH
17806: LD_INT 9
17808: EQUAL
17809: OR
17810: PUSH
17811: LD_VAR 0 10
17815: PUSH
17816: LD_VAR 0 14
17820: ARRAY
17821: PUSH
17822: LD_INT 11
17824: EQUAL
17825: OR
17826: PUSH
17827: LD_VAR 0 10
17831: PUSH
17832: LD_VAR 0 14
17836: ARRAY
17837: PUSH
17838: LD_INT 7
17840: EQUAL
17841: OR
17842: IFFALSE 17891
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17844: LD_ADDR_VAR 0 19
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: LD_INT 3
17854: PUSH
17855: LD_INT 4
17857: PUSH
17858: LD_INT 5
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17867: LD_ADDR_OWVAR 37
17871: PUSH
17872: LD_VAR 0 19
17876: PUSH
17877: LD_INT 1
17879: PPUSH
17880: LD_VAR 0 19
17884: PPUSH
17885: CALL_OW 12
17889: ARRAY
17890: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17891: LD_VAR 0 10
17895: PUSH
17896: LD_VAR 0 14
17900: ARRAY
17901: PUSH
17902: LD_INT 8
17904: EQUAL
17905: PUSH
17906: LD_VAR 0 10
17910: PUSH
17911: LD_VAR 0 14
17915: ARRAY
17916: PUSH
17917: LD_INT 6
17919: EQUAL
17920: OR
17921: PUSH
17922: LD_VAR 0 10
17926: PUSH
17927: LD_VAR 0 14
17931: ARRAY
17932: PUSH
17933: LD_INT 10
17935: EQUAL
17936: OR
17937: IFFALSE 17978
// begin amChassisTab = [ 4 , 5 ] ;
17939: LD_ADDR_VAR 0 19
17943: PUSH
17944: LD_INT 4
17946: PUSH
17947: LD_INT 5
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17954: LD_ADDR_OWVAR 37
17958: PUSH
17959: LD_VAR 0 19
17963: PUSH
17964: LD_INT 1
17966: PPUSH
17967: LD_VAR 0 19
17971: PPUSH
17972: CALL_OW 12
17976: ARRAY
17977: ST_TO_ADDR
// end ; end ;
17978: GO 17678
17980: POP
17981: POP
// veh = CreateVehicle ;
17982: LD_ADDR_VAR 0 16
17986: PUSH
17987: CALL_OW 45
17991: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17992: LD_VAR 0 16
17996: PPUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: LD_INT 0
18004: PPUSH
18005: CALL_OW 49
// if vc_control = 1 then
18009: LD_OWVAR 38
18013: PUSH
18014: LD_INT 1
18016: EQUAL
18017: IFFALSE 18074
// begin hc_gallery =  ;
18019: LD_ADDR_OWVAR 33
18023: PUSH
18024: LD_STRING 
18026: ST_TO_ADDR
// hc_name =  ;
18027: LD_ADDR_OWVAR 26
18031: PUSH
18032: LD_STRING 
18034: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18035: LD_INT 0
18037: PPUSH
18038: LD_INT 3
18040: PPUSH
18041: LD_VAR 0 4
18045: PPUSH
18046: CALL_OW 380
// un = CreateHuman ;
18050: LD_ADDR_VAR 0 15
18054: PUSH
18055: CALL_OW 44
18059: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18060: LD_VAR 0 15
18064: PPUSH
18065: LD_VAR 0 16
18069: PPUSH
18070: CALL_OW 52
// end ; i = i + 1 ;
18074: LD_ADDR_VAR 0 13
18078: PUSH
18079: LD_VAR 0 13
18083: PUSH
18084: LD_INT 1
18086: PLUS
18087: ST_TO_ADDR
// end ; if nation = 2 then
18088: LD_VAR 0 5
18092: PUSH
18093: LD_INT 2
18095: EQUAL
18096: IFFALSE 18518
// begin uc_side = side ;
18098: LD_ADDR_OWVAR 20
18102: PUSH
18103: LD_VAR 0 2
18107: ST_TO_ADDR
// uc_nation = nation ;
18108: LD_ADDR_OWVAR 21
18112: PUSH
18113: LD_VAR 0 5
18117: ST_TO_ADDR
// vc_engine = vehengine ;
18118: LD_ADDR_OWVAR 39
18122: PUSH
18123: LD_VAR 0 6
18127: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18128: LD_ADDR_OWVAR 38
18132: PUSH
18133: LD_VAR 0 7
18137: PUSH
18138: LD_INT 1
18140: PPUSH
18141: LD_VAR 0 7
18145: PPUSH
18146: CALL_OW 12
18150: ARRAY
18151: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18152: LD_ADDR_OWVAR 40
18156: PUSH
18157: LD_VAR 0 9
18161: PUSH
18162: LD_INT 1
18164: PPUSH
18165: LD_VAR 0 9
18169: PPUSH
18170: CALL_OW 12
18174: ARRAY
18175: ST_TO_ADDR
// for j = 1 to ARWeapons do
18176: LD_ADDR_VAR 0 14
18180: PUSH
18181: DOUBLE
18182: LD_INT 1
18184: DEC
18185: ST_TO_ADDR
18186: LD_VAR 0 9
18190: PUSH
18191: FOR_TO
18192: IFFALSE 18410
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18194: LD_VAR 0 9
18198: PUSH
18199: LD_VAR 0 14
18203: ARRAY
18204: PUSH
18205: LD_INT 24
18207: EQUAL
18208: PUSH
18209: LD_VAR 0 9
18213: PUSH
18214: LD_VAR 0 14
18218: ARRAY
18219: PUSH
18220: LD_INT 22
18222: EQUAL
18223: OR
18224: PUSH
18225: LD_VAR 0 9
18229: PUSH
18230: LD_VAR 0 14
18234: ARRAY
18235: PUSH
18236: LD_INT 23
18238: EQUAL
18239: OR
18240: PUSH
18241: LD_VAR 0 9
18245: PUSH
18246: LD_VAR 0 14
18250: ARRAY
18251: PUSH
18252: LD_INT 30
18254: EQUAL
18255: OR
18256: IFFALSE 18293
// begin arChassisTab = [ 14 ] ;
18258: LD_ADDR_VAR 0 18
18262: PUSH
18263: LD_INT 14
18265: PUSH
18266: EMPTY
18267: LIST
18268: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18269: LD_ADDR_OWVAR 37
18273: PUSH
18274: LD_VAR 0 18
18278: PUSH
18279: LD_INT 1
18281: PPUSH
18282: LD_VAR 0 18
18286: PPUSH
18287: CALL_OW 12
18291: ARRAY
18292: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18293: LD_VAR 0 9
18297: PUSH
18298: LD_VAR 0 14
18302: ARRAY
18303: PUSH
18304: LD_INT 29
18306: EQUAL
18307: PUSH
18308: LD_VAR 0 9
18312: PUSH
18313: LD_VAR 0 14
18317: ARRAY
18318: PUSH
18319: LD_INT 28
18321: EQUAL
18322: OR
18323: PUSH
18324: LD_VAR 0 9
18328: PUSH
18329: LD_VAR 0 14
18333: ARRAY
18334: PUSH
18335: LD_INT 27
18337: EQUAL
18338: OR
18339: PUSH
18340: LD_VAR 0 9
18344: PUSH
18345: LD_VAR 0 14
18349: ARRAY
18350: PUSH
18351: LD_INT 26
18353: EQUAL
18354: OR
18355: PUSH
18356: LD_VAR 0 9
18360: PUSH
18361: LD_VAR 0 14
18365: ARRAY
18366: PUSH
18367: LD_INT 25
18369: EQUAL
18370: OR
18371: IFFALSE 18408
// begin arChassisTab = [ 14 ] ;
18373: LD_ADDR_VAR 0 18
18377: PUSH
18378: LD_INT 14
18380: PUSH
18381: EMPTY
18382: LIST
18383: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18384: LD_ADDR_OWVAR 37
18388: PUSH
18389: LD_VAR 0 18
18393: PUSH
18394: LD_INT 1
18396: PPUSH
18397: LD_VAR 0 18
18401: PPUSH
18402: CALL_OW 12
18406: ARRAY
18407: ST_TO_ADDR
// end ; end ;
18408: GO 18191
18410: POP
18411: POP
// veh = CreateVehicle ;
18412: LD_ADDR_VAR 0 16
18416: PUSH
18417: CALL_OW 45
18421: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18422: LD_VAR 0 16
18426: PPUSH
18427: LD_VAR 0 1
18431: PPUSH
18432: LD_INT 0
18434: PPUSH
18435: CALL_OW 49
// if vc_control = 1 then
18439: LD_OWVAR 38
18443: PUSH
18444: LD_INT 1
18446: EQUAL
18447: IFFALSE 18504
// begin hc_gallery =  ;
18449: LD_ADDR_OWVAR 33
18453: PUSH
18454: LD_STRING 
18456: ST_TO_ADDR
// hc_name =  ;
18457: LD_ADDR_OWVAR 26
18461: PUSH
18462: LD_STRING 
18464: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18465: LD_INT 0
18467: PPUSH
18468: LD_INT 3
18470: PPUSH
18471: LD_VAR 0 4
18475: PPUSH
18476: CALL_OW 380
// un = CreateHuman ;
18480: LD_ADDR_VAR 0 15
18484: PUSH
18485: CALL_OW 44
18489: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18490: LD_VAR 0 15
18494: PPUSH
18495: LD_VAR 0 16
18499: PPUSH
18500: CALL_OW 52
// end ; i = i + 1 ;
18504: LD_ADDR_VAR 0 13
18508: PUSH
18509: LD_VAR 0 13
18513: PUSH
18514: LD_INT 1
18516: PLUS
18517: ST_TO_ADDR
// end ; if nation = 3 then
18518: LD_VAR 0 5
18522: PUSH
18523: LD_INT 3
18525: EQUAL
18526: IFFALSE 18932
// begin uc_side = side ;
18528: LD_ADDR_OWVAR 20
18532: PUSH
18533: LD_VAR 0 2
18537: ST_TO_ADDR
// uc_nation = nation ;
18538: LD_ADDR_OWVAR 21
18542: PUSH
18543: LD_VAR 0 5
18547: ST_TO_ADDR
// vc_engine = vehengine ;
18548: LD_ADDR_OWVAR 39
18552: PUSH
18553: LD_VAR 0 6
18557: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18558: LD_ADDR_OWVAR 38
18562: PUSH
18563: LD_VAR 0 7
18567: PUSH
18568: LD_INT 1
18570: PPUSH
18571: LD_VAR 0 7
18575: PPUSH
18576: CALL_OW 12
18580: ARRAY
18581: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18582: LD_ADDR_OWVAR 40
18586: PUSH
18587: LD_VAR 0 8
18591: PUSH
18592: LD_INT 1
18594: PPUSH
18595: LD_VAR 0 8
18599: PPUSH
18600: CALL_OW 12
18604: ARRAY
18605: ST_TO_ADDR
// for j = 1 to RuWeapons do
18606: LD_ADDR_VAR 0 14
18610: PUSH
18611: DOUBLE
18612: LD_INT 1
18614: DEC
18615: ST_TO_ADDR
18616: LD_VAR 0 8
18620: PUSH
18621: FOR_TO
18622: IFFALSE 18824
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18624: LD_VAR 0 8
18628: PUSH
18629: LD_VAR 0 14
18633: ARRAY
18634: PUSH
18635: LD_INT 42
18637: EQUAL
18638: PUSH
18639: LD_VAR 0 8
18643: PUSH
18644: LD_VAR 0 14
18648: ARRAY
18649: PUSH
18650: LD_INT 43
18652: EQUAL
18653: OR
18654: PUSH
18655: LD_VAR 0 8
18659: PUSH
18660: LD_VAR 0 14
18664: ARRAY
18665: PUSH
18666: LD_INT 44
18668: EQUAL
18669: OR
18670: PUSH
18671: LD_VAR 0 8
18675: PUSH
18676: LD_VAR 0 14
18680: ARRAY
18681: PUSH
18682: LD_INT 45
18684: EQUAL
18685: OR
18686: PUSH
18687: LD_VAR 0 8
18691: PUSH
18692: LD_VAR 0 14
18696: ARRAY
18697: PUSH
18698: LD_INT 49
18700: EQUAL
18701: OR
18702: IFFALSE 18751
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18704: LD_ADDR_VAR 0 17
18708: PUSH
18709: LD_INT 21
18711: PUSH
18712: LD_INT 22
18714: PUSH
18715: LD_INT 23
18717: PUSH
18718: LD_INT 24
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18727: LD_ADDR_OWVAR 37
18731: PUSH
18732: LD_VAR 0 17
18736: PUSH
18737: LD_INT 1
18739: PPUSH
18740: LD_VAR 0 17
18744: PPUSH
18745: CALL_OW 12
18749: ARRAY
18750: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18751: LD_VAR 0 8
18755: PUSH
18756: LD_VAR 0 14
18760: ARRAY
18761: PUSH
18762: LD_INT 46
18764: EQUAL
18765: PUSH
18766: LD_VAR 0 8
18770: PUSH
18771: LD_VAR 0 14
18775: ARRAY
18776: PUSH
18777: LD_INT 47
18779: EQUAL
18780: OR
18781: IFFALSE 18822
// begin ruChassisTab = [ 23 , 24 ] ;
18783: LD_ADDR_VAR 0 17
18787: PUSH
18788: LD_INT 23
18790: PUSH
18791: LD_INT 24
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18798: LD_ADDR_OWVAR 37
18802: PUSH
18803: LD_VAR 0 17
18807: PUSH
18808: LD_INT 1
18810: PPUSH
18811: LD_VAR 0 17
18815: PPUSH
18816: CALL_OW 12
18820: ARRAY
18821: ST_TO_ADDR
// end ; end ;
18822: GO 18621
18824: POP
18825: POP
// veh = CreateVehicle ;
18826: LD_ADDR_VAR 0 16
18830: PUSH
18831: CALL_OW 45
18835: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18836: LD_VAR 0 16
18840: PPUSH
18841: LD_VAR 0 1
18845: PPUSH
18846: LD_INT 0
18848: PPUSH
18849: CALL_OW 49
// if vc_control = 1 then
18853: LD_OWVAR 38
18857: PUSH
18858: LD_INT 1
18860: EQUAL
18861: IFFALSE 18918
// begin hc_gallery =  ;
18863: LD_ADDR_OWVAR 33
18867: PUSH
18868: LD_STRING 
18870: ST_TO_ADDR
// hc_name =  ;
18871: LD_ADDR_OWVAR 26
18875: PUSH
18876: LD_STRING 
18878: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18879: LD_INT 0
18881: PPUSH
18882: LD_INT 3
18884: PPUSH
18885: LD_VAR 0 4
18889: PPUSH
18890: CALL_OW 380
// un = CreateHuman ;
18894: LD_ADDR_VAR 0 15
18898: PUSH
18899: CALL_OW 44
18903: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18904: LD_VAR 0 15
18908: PPUSH
18909: LD_VAR 0 16
18913: PPUSH
18914: CALL_OW 52
// end ; i = i + 1 ;
18918: LD_ADDR_VAR 0 13
18922: PUSH
18923: LD_VAR 0 13
18927: PUSH
18928: LD_INT 1
18930: PLUS
18931: ST_TO_ADDR
// end ; until i = vehCount ;
18932: LD_VAR 0 13
18936: PUSH
18937: LD_VAR 0 3
18941: EQUAL
18942: IFFALSE 17568
// repeat wait ( 0 0$1 ) ;
18944: LD_INT 35
18946: PPUSH
18947: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18951: LD_ADDR_VAR 0 20
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_VAR 0 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 21
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 24
18980: PUSH
18981: LD_INT 650
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: ST_TO_ADDR
// if vehicleOK_list > 0 then
18998: LD_VAR 0 20
19002: PUSH
19003: LD_INT 0
19005: GREATER
19006: IFFALSE 19197
// begin for i in vehicleOK_list do
19008: LD_ADDR_VAR 0 13
19012: PUSH
19013: LD_VAR 0 20
19017: PUSH
19018: FOR_IN
19019: IFFALSE 19195
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19021: LD_ADDR_VAR 0 21
19025: PUSH
19026: LD_INT 22
19028: PUSH
19029: LD_VAR 0 11
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: PPUSH
19043: LD_VAR 0 13
19047: PPUSH
19048: CALL_OW 74
19052: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19053: LD_ADDR_VAR 0 22
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_VAR 0 11
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: LD_INT 59
19075: PUSH
19076: EMPTY
19077: LIST
19078: PUSH
19079: LD_INT 21
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 21
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: PPUSH
19112: CALL_OW 69
19116: PPUSH
19117: LD_VAR 0 13
19121: PPUSH
19122: CALL_OW 74
19126: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19127: LD_VAR 0 13
19131: PPUSH
19132: LD_VAR 0 21
19136: PPUSH
19137: CALL_OW 296
19141: PUSH
19142: LD_INT 8
19144: PLUS
19145: PUSH
19146: LD_VAR 0 13
19150: PPUSH
19151: LD_VAR 0 22
19155: PPUSH
19156: CALL_OW 296
19160: LESS
19161: IFFALSE 19179
// begin ComAttackUnit ( i , target1 ) ;
19163: LD_VAR 0 13
19167: PPUSH
19168: LD_VAR 0 21
19172: PPUSH
19173: CALL_OW 115
// end else
19177: GO 19193
// begin ComAttackUnit ( i , target2 ) ;
19179: LD_VAR 0 13
19183: PPUSH
19184: LD_VAR 0 22
19188: PPUSH
19189: CALL_OW 115
// end ; end ;
19193: GO 19018
19195: POP
19196: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19197: LD_INT 22
19199: PUSH
19200: LD_VAR 0 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 21
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PPUSH
19223: CALL_OW 69
19227: PUSH
19228: LD_INT 0
19230: EQUAL
19231: IFFALSE 18944
// end ;
19233: LD_VAR 0 12
19237: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19238: LD_INT 0
19240: PPUSH
19241: PPUSH
19242: PPUSH
19243: PPUSH
19244: PPUSH
19245: PPUSH
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
19250: PPUSH
// for i = 1 to soldierCount do
19251: LD_ADDR_VAR 0 13
19255: PUSH
19256: DOUBLE
19257: LD_INT 1
19259: DEC
19260: ST_TO_ADDR
19261: LD_VAR 0 3
19265: PUSH
19266: FOR_TO
19267: IFFALSE 19349
// begin uc_side = side ;
19269: LD_ADDR_OWVAR 20
19273: PUSH
19274: LD_VAR 0 1
19278: ST_TO_ADDR
// uc_nation = nation ;
19279: LD_ADDR_OWVAR 21
19283: PUSH
19284: LD_VAR 0 2
19288: ST_TO_ADDR
// hc_name =  ;
19289: LD_ADDR_OWVAR 26
19293: PUSH
19294: LD_STRING 
19296: ST_TO_ADDR
// hc_gallery =  ;
19297: LD_ADDR_OWVAR 33
19301: PUSH
19302: LD_STRING 
19304: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19305: LD_INT 0
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: LD_VAR 0 8
19315: PPUSH
19316: CALL_OW 380
// un = CreateHuman ;
19320: LD_ADDR_VAR 0 15
19324: PUSH
19325: CALL_OW 44
19329: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19330: LD_VAR 0 15
19334: PPUSH
19335: LD_VAR 0 9
19339: PPUSH
19340: LD_INT 0
19342: PPUSH
19343: CALL_OW 49
// end ;
19347: GO 19266
19349: POP
19350: POP
// for i = 1 to sniperCount do
19351: LD_ADDR_VAR 0 13
19355: PUSH
19356: DOUBLE
19357: LD_INT 1
19359: DEC
19360: ST_TO_ADDR
19361: LD_VAR 0 4
19365: PUSH
19366: FOR_TO
19367: IFFALSE 19449
// begin uc_side = side ;
19369: LD_ADDR_OWVAR 20
19373: PUSH
19374: LD_VAR 0 1
19378: ST_TO_ADDR
// uc_nation = nation ;
19379: LD_ADDR_OWVAR 21
19383: PUSH
19384: LD_VAR 0 2
19388: ST_TO_ADDR
// hc_name =  ;
19389: LD_ADDR_OWVAR 26
19393: PUSH
19394: LD_STRING 
19396: ST_TO_ADDR
// hc_gallery =  ;
19397: LD_ADDR_OWVAR 33
19401: PUSH
19402: LD_STRING 
19404: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19405: LD_INT 0
19407: PPUSH
19408: LD_INT 5
19410: PPUSH
19411: LD_VAR 0 8
19415: PPUSH
19416: CALL_OW 380
// un = CreateHuman ;
19420: LD_ADDR_VAR 0 15
19424: PUSH
19425: CALL_OW 44
19429: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19430: LD_VAR 0 15
19434: PPUSH
19435: LD_VAR 0 9
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 49
// end ;
19447: GO 19366
19449: POP
19450: POP
// for i = 1 to bazookCount do
19451: LD_ADDR_VAR 0 13
19455: PUSH
19456: DOUBLE
19457: LD_INT 1
19459: DEC
19460: ST_TO_ADDR
19461: LD_VAR 0 5
19465: PUSH
19466: FOR_TO
19467: IFFALSE 19549
// begin uc_side = side ;
19469: LD_ADDR_OWVAR 20
19473: PUSH
19474: LD_VAR 0 1
19478: ST_TO_ADDR
// uc_nation = nation ;
19479: LD_ADDR_OWVAR 21
19483: PUSH
19484: LD_VAR 0 2
19488: ST_TO_ADDR
// hc_name =  ;
19489: LD_ADDR_OWVAR 26
19493: PUSH
19494: LD_STRING 
19496: ST_TO_ADDR
// hc_gallery =  ;
19497: LD_ADDR_OWVAR 33
19501: PUSH
19502: LD_STRING 
19504: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19505: LD_INT 0
19507: PPUSH
19508: LD_INT 9
19510: PPUSH
19511: LD_VAR 0 8
19515: PPUSH
19516: CALL_OW 380
// un = CreateHuman ;
19520: LD_ADDR_VAR 0 15
19524: PUSH
19525: CALL_OW 44
19529: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19530: LD_VAR 0 15
19534: PPUSH
19535: LD_VAR 0 9
19539: PPUSH
19540: LD_INT 0
19542: PPUSH
19543: CALL_OW 49
// end ;
19547: GO 19466
19549: POP
19550: POP
// for i = 1 to mortalCount do
19551: LD_ADDR_VAR 0 13
19555: PUSH
19556: DOUBLE
19557: LD_INT 1
19559: DEC
19560: ST_TO_ADDR
19561: LD_VAR 0 6
19565: PUSH
19566: FOR_TO
19567: IFFALSE 19649
// begin uc_side = side ;
19569: LD_ADDR_OWVAR 20
19573: PUSH
19574: LD_VAR 0 1
19578: ST_TO_ADDR
// uc_nation = nation ;
19579: LD_ADDR_OWVAR 21
19583: PUSH
19584: LD_VAR 0 2
19588: ST_TO_ADDR
// hc_name =  ;
19589: LD_ADDR_OWVAR 26
19593: PUSH
19594: LD_STRING 
19596: ST_TO_ADDR
// hc_gallery =  ;
19597: LD_ADDR_OWVAR 33
19601: PUSH
19602: LD_STRING 
19604: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19605: LD_INT 0
19607: PPUSH
19608: LD_INT 8
19610: PPUSH
19611: LD_VAR 0 8
19615: PPUSH
19616: CALL_OW 380
// un = CreateHuman ;
19620: LD_ADDR_VAR 0 15
19624: PUSH
19625: CALL_OW 44
19629: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19630: LD_VAR 0 15
19634: PPUSH
19635: LD_VAR 0 9
19639: PPUSH
19640: LD_INT 0
19642: PPUSH
19643: CALL_OW 49
// end ;
19647: GO 19566
19649: POP
19650: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19651: LD_ADDR_VAR 0 18
19655: PUSH
19656: LD_INT 22
19658: PUSH
19659: LD_VAR 0 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: LD_INT 25
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 25
19683: PUSH
19684: LD_INT 5
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 25
19693: PUSH
19694: LD_INT 8
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 25
19703: PUSH
19704: LD_INT 9
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PPUSH
19722: CALL_OW 69
19726: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19727: LD_ADDR_VAR 0 17
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_VAR 0 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 25
19746: PUSH
19747: LD_INT 4
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PPUSH
19758: CALL_OW 69
19762: ST_TO_ADDR
// for i in medic_list do
19763: LD_ADDR_VAR 0 13
19767: PUSH
19768: LD_VAR 0 17
19772: PUSH
19773: FOR_IN
19774: IFFALSE 19792
// ComMoveToArea ( i , healArea ) ;
19776: LD_VAR 0 13
19780: PPUSH
19781: LD_VAR 0 10
19785: PPUSH
19786: CALL_OW 113
19790: GO 19773
19792: POP
19793: POP
// repeat wait ( 0 0$1 ) ;
19794: LD_INT 35
19796: PPUSH
19797: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19801: LD_ADDR_VAR 0 16
19805: PUSH
19806: LD_INT 22
19808: PUSH
19809: LD_VAR 0 1
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 3
19823: PUSH
19824: LD_INT 24
19826: PUSH
19827: LD_INT 550
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 24
19840: PUSH
19841: LD_INT 250
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PPUSH
19857: CALL_OW 69
19861: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19862: LD_ADDR_VAR 0 18
19866: PUSH
19867: LD_INT 22
19869: PUSH
19870: LD_VAR 0 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: LD_INT 25
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 25
19894: PUSH
19895: LD_INT 5
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 25
19904: PUSH
19905: LD_INT 8
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 25
19914: PUSH
19915: LD_INT 9
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 24
19931: PUSH
19932: LD_INT 1000
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: PPUSH
19944: CALL_OW 69
19948: ST_TO_ADDR
// if medicCount > 0 then
19949: LD_VAR 0 7
19953: PUSH
19954: LD_INT 0
19956: GREATER
19957: IFFALSE 20031
// begin if damageUnit_list > 0 then
19959: LD_VAR 0 16
19963: PUSH
19964: LD_INT 0
19966: GREATER
19967: IFFALSE 20031
// begin for i in damageUnit_list do
19969: LD_ADDR_VAR 0 13
19973: PUSH
19974: LD_VAR 0 16
19978: PUSH
19979: FOR_IN
19980: IFFALSE 20029
// begin ComMoveToArea ( i , healArea ) ;
19982: LD_VAR 0 13
19986: PPUSH
19987: LD_VAR 0 10
19991: PPUSH
19992: CALL_OW 113
// for j in medic_list do
19996: LD_ADDR_VAR 0 14
20000: PUSH
20001: LD_VAR 0 17
20005: PUSH
20006: FOR_IN
20007: IFFALSE 20025
// AddComHeal ( j , i ) ;
20009: LD_VAR 0 14
20013: PPUSH
20014: LD_VAR 0 13
20018: PPUSH
20019: CALL_OW 188
20023: GO 20006
20025: POP
20026: POP
// end ;
20027: GO 19979
20029: POP
20030: POP
// end ; end ; for i in soldiersOK_list do
20031: LD_ADDR_VAR 0 13
20035: PUSH
20036: LD_VAR 0 18
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20218
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20044: LD_ADDR_VAR 0 21
20048: PUSH
20049: LD_INT 22
20051: PUSH
20052: LD_VAR 0 11
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PPUSH
20061: CALL_OW 69
20065: PPUSH
20066: LD_VAR 0 13
20070: PPUSH
20071: CALL_OW 74
20075: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20076: LD_ADDR_VAR 0 22
20080: PUSH
20081: LD_INT 22
20083: PUSH
20084: LD_VAR 0 11
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: LD_INT 59
20098: PUSH
20099: EMPTY
20100: LIST
20101: PUSH
20102: LD_INT 21
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: EMPTY
20133: LIST
20134: PPUSH
20135: CALL_OW 69
20139: PPUSH
20140: LD_VAR 0 13
20144: PPUSH
20145: CALL_OW 74
20149: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20150: LD_VAR 0 13
20154: PPUSH
20155: LD_VAR 0 21
20159: PPUSH
20160: CALL_OW 296
20164: PUSH
20165: LD_INT 8
20167: PLUS
20168: PUSH
20169: LD_VAR 0 13
20173: PPUSH
20174: LD_VAR 0 22
20178: PPUSH
20179: CALL_OW 296
20183: LESS
20184: IFFALSE 20202
// begin ComAttackUnit ( i , target1 ) ;
20186: LD_VAR 0 13
20190: PPUSH
20191: LD_VAR 0 21
20195: PPUSH
20196: CALL_OW 115
// end else
20200: GO 20216
// begin ComAttackUnit ( i , target2 ) ;
20202: LD_VAR 0 13
20206: PPUSH
20207: LD_VAR 0 22
20211: PPUSH
20212: CALL_OW 115
// end ; end ;
20216: GO 20041
20218: POP
20219: POP
// for i in soldiersOK_list do
20220: LD_ADDR_VAR 0 13
20224: PUSH
20225: LD_VAR 0 18
20229: PUSH
20230: FOR_IN
20231: IFFALSE 20407
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20233: LD_ADDR_VAR 0 21
20237: PUSH
20238: LD_INT 22
20240: PUSH
20241: LD_VAR 0 11
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PPUSH
20250: CALL_OW 69
20254: PPUSH
20255: LD_VAR 0 13
20259: PPUSH
20260: CALL_OW 74
20264: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20265: LD_ADDR_VAR 0 22
20269: PUSH
20270: LD_INT 22
20272: PUSH
20273: LD_VAR 0 11
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: LD_INT 59
20287: PUSH
20288: EMPTY
20289: LIST
20290: PUSH
20291: LD_INT 21
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 21
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: EMPTY
20322: LIST
20323: PPUSH
20324: CALL_OW 69
20328: PPUSH
20329: LD_VAR 0 13
20333: PPUSH
20334: CALL_OW 74
20338: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20339: LD_VAR 0 13
20343: PPUSH
20344: LD_VAR 0 21
20348: PPUSH
20349: CALL_OW 296
20353: PUSH
20354: LD_INT 8
20356: PLUS
20357: PUSH
20358: LD_VAR 0 13
20362: PPUSH
20363: LD_VAR 0 22
20367: PPUSH
20368: CALL_OW 296
20372: LESS
20373: IFFALSE 20391
// begin ComAttackUnit ( i , target1 ) ;
20375: LD_VAR 0 13
20379: PPUSH
20380: LD_VAR 0 21
20384: PPUSH
20385: CALL_OW 115
// end else
20389: GO 20405
// begin ComAttackUnit ( i , target2 ) ;
20391: LD_VAR 0 13
20395: PPUSH
20396: LD_VAR 0 22
20400: PPUSH
20401: CALL_OW 115
// end ; end ;
20405: GO 20230
20407: POP
20408: POP
// until soldiersOK_list = [ ] ;
20409: LD_VAR 0 18
20413: PUSH
20414: EMPTY
20415: EQUAL
20416: IFFALSE 19794
// end ;
20418: LD_VAR 0 12
20422: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20423: LD_INT 0
20425: PPUSH
20426: PPUSH
20427: PPUSH
20428: PPUSH
20429: PPUSH
20430: PPUSH
20431: PPUSH
// repeat wait ( 0 0$1 ) ;
20432: LD_INT 35
20434: PPUSH
20435: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20439: LD_ADDR_VAR 0 7
20443: PUSH
20444: LD_INT 22
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 25
20456: PUSH
20457: LD_INT 4
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: LD_INT 60
20469: PUSH
20470: EMPTY
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: PPUSH
20482: CALL_OW 69
20486: ST_TO_ADDR
// if not tmp then
20487: LD_VAR 0 7
20491: NOT
20492: IFFALSE 20496
// continue ;
20494: GO 20432
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20496: LD_ADDR_VAR 0 3
20500: PUSH
20501: LD_INT 5
20503: PPUSH
20504: LD_INT 22
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 25
20516: PUSH
20517: LD_INT 12
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PPUSH
20528: CALL_OW 70
20532: PUSH
20533: FOR_IN
20534: IFFALSE 20567
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20536: LD_VAR 0 7
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: CALL_OW 250
20550: PPUSH
20551: LD_VAR 0 3
20555: PPUSH
20556: CALL_OW 251
20560: PPUSH
20561: CALL_OW 131
20565: GO 20533
20567: POP
20568: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20569: LD_INT 22
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 25
20581: PUSH
20582: LD_INT 4
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: PUSH
20598: LD_INT 0
20600: EQUAL
20601: PUSH
20602: LD_INT 5
20604: PPUSH
20605: LD_INT 22
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 25
20617: PUSH
20618: LD_INT 12
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PPUSH
20629: CALL_OW 70
20633: PUSH
20634: LD_INT 2
20636: LESS
20637: OR
20638: PUSH
20639: LD_OWVAR 1
20643: PUSH
20644: LD_INT 7000
20646: GREATEREQUAL
20647: OR
20648: IFFALSE 20432
// repeat wait ( 0 0$1 ) ;
20650: LD_INT 35
20652: PPUSH
20653: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20657: LD_ADDR_VAR 0 5
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 30
20674: PUSH
20675: LD_INT 5
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PPUSH
20686: CALL_OW 69
20690: ST_TO_ADDR
// until arm ;
20691: LD_VAR 0 5
20695: IFFALSE 20650
// wait ( 0 0$25 ) ;
20697: LD_INT 875
20699: PPUSH
20700: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20704: LD_ADDR_VAR 0 6
20708: PUSH
20709: LD_INT 22
20711: PUSH
20712: LD_INT 2
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 30
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PPUSH
20751: CALL_OW 69
20755: ST_TO_ADDR
// j := 0 ;
20756: LD_ADDR_VAR 0 3
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20764: LD_ADDR_VAR 0 2
20768: PUSH
20769: LD_INT 22
20771: PUSH
20772: LD_INT 2
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 25
20781: PUSH
20782: LD_INT 12
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PPUSH
20793: CALL_OW 69
20797: PUSH
20798: FOR_IN
20799: IFFALSE 20886
// begin ComMoveXY ( i , 63 , 16 ) ;
20801: LD_VAR 0 2
20805: PPUSH
20806: LD_INT 63
20808: PPUSH
20809: LD_INT 16
20811: PPUSH
20812: CALL_OW 111
// j := j + 1 ;
20816: LD_ADDR_VAR 0 3
20820: PUSH
20821: LD_VAR 0 3
20825: PUSH
20826: LD_INT 1
20828: PLUS
20829: ST_TO_ADDR
// if j < 5 then
20830: LD_VAR 0 3
20834: PUSH
20835: LD_INT 5
20837: LESS
20838: IFFALSE 20856
// b := arm [ 1 ] else
20840: LD_ADDR_VAR 0 4
20844: PUSH
20845: LD_VAR 0 5
20849: PUSH
20850: LD_INT 1
20852: ARRAY
20853: ST_TO_ADDR
20854: GO 20870
// b := dep [ 1 ] ;
20856: LD_ADDR_VAR 0 4
20860: PUSH
20861: LD_VAR 0 6
20865: PUSH
20866: LD_INT 1
20868: ARRAY
20869: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20870: LD_VAR 0 2
20874: PPUSH
20875: LD_VAR 0 4
20879: PPUSH
20880: CALL_OW 180
// end ;
20884: GO 20798
20886: POP
20887: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20888: LD_ADDR_VAR 0 2
20892: PUSH
20893: LD_INT 22
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 25
20905: PUSH
20906: LD_INT 4
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PPUSH
20917: CALL_OW 69
20921: PUSH
20922: FOR_IN
20923: IFFALSE 20969
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20925: LD_VAR 0 2
20929: PPUSH
20930: LD_INT 22
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 8
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PPUSH
20954: CALL_OW 69
20958: PUSH
20959: LD_INT 1
20961: ARRAY
20962: PPUSH
20963: CALL_OW 120
20967: GO 20922
20969: POP
20970: POP
// end ;
20971: LD_VAR 0 1
20975: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20976: LD_INT 0
20978: PPUSH
20979: PPUSH
20980: PPUSH
20981: PPUSH
20982: PPUSH
20983: PPUSH
20984: PPUSH
20985: PPUSH
20986: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20987: LD_INT 22
20989: PUSH
20990: LD_VAR 0 1
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 21
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 69
21017: PUSH
21018: LD_VAR 0 3
21022: LESSEQUAL
21023: IFFALSE 21167
// for i = 1 to vehCount do
21025: LD_ADDR_VAR 0 10
21029: PUSH
21030: DOUBLE
21031: LD_INT 1
21033: DEC
21034: ST_TO_ADDR
21035: LD_VAR 0 3
21039: PUSH
21040: FOR_TO
21041: IFFALSE 21165
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21043: LD_ADDR_VAR 0 12
21047: PUSH
21048: LD_VAR 0 5
21052: PUSH
21053: LD_INT 1
21055: PPUSH
21056: LD_VAR 0 5
21060: PPUSH
21061: CALL_OW 12
21065: ARRAY
21066: ST_TO_ADDR
// if randWeapon = 46 then
21067: LD_VAR 0 12
21071: PUSH
21072: LD_INT 46
21074: EQUAL
21075: IFFALSE 21120
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21077: LD_VAR 0 2
21081: PPUSH
21082: LD_INT 24
21084: PPUSH
21085: LD_VAR 0 6
21089: PPUSH
21090: LD_VAR 0 7
21094: PUSH
21095: LD_INT 1
21097: PPUSH
21098: LD_VAR 0 7
21102: PPUSH
21103: CALL_OW 12
21107: ARRAY
21108: PPUSH
21109: LD_VAR 0 12
21113: PPUSH
21114: CALL_OW 185
21118: GO 21163
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21120: LD_VAR 0 2
21124: PPUSH
21125: LD_VAR 0 8
21129: PPUSH
21130: LD_VAR 0 6
21134: PPUSH
21135: LD_VAR 0 7
21139: PUSH
21140: LD_INT 1
21142: PPUSH
21143: LD_VAR 0 7
21147: PPUSH
21148: CALL_OW 12
21152: ARRAY
21153: PPUSH
21154: LD_VAR 0 12
21158: PPUSH
21159: CALL_OW 185
// end ;
21163: GO 21040
21165: POP
21166: POP
// repeat wait ( 0 0$1 ) ;
21167: LD_INT 35
21169: PPUSH
21170: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21174: LD_INT 22
21176: PUSH
21177: LD_VAR 0 1
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 21
21188: PUSH
21189: LD_INT 2
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 24
21198: PUSH
21199: LD_INT 250
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: PPUSH
21211: CALL_OW 69
21215: PUSH
21216: LD_VAR 0 3
21220: GREATEREQUAL
21221: IFFALSE 21167
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21223: LD_INT 22
21225: PUSH
21226: LD_VAR 0 1
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 21
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 24
21247: PUSH
21248: LD_INT 250
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: LIST
21259: PPUSH
21260: CALL_OW 69
21264: PUSH
21265: LD_VAR 0 3
21269: GREATEREQUAL
21270: IFFALSE 21613
// begin repeat begin wait ( 0 0$1 ) ;
21272: LD_INT 35
21274: PPUSH
21275: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21279: LD_INT 22
21281: PUSH
21282: LD_VAR 0 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 21
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 24
21303: PUSH
21304: LD_INT 651
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL_OW 69
21320: PUSH
21321: LD_INT 0
21323: GREATER
21324: IFFALSE 21552
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21326: LD_ADDR_VAR 0 10
21330: PUSH
21331: LD_INT 22
21333: PUSH
21334: LD_VAR 0 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 21
21345: PUSH
21346: LD_INT 2
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 24
21355: PUSH
21356: LD_INT 651
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: PPUSH
21368: CALL_OW 69
21372: PUSH
21373: FOR_IN
21374: IFFALSE 21550
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21376: LD_ADDR_VAR 0 16
21380: PUSH
21381: LD_INT 22
21383: PUSH
21384: LD_VAR 0 4
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PPUSH
21393: CALL_OW 69
21397: PPUSH
21398: LD_VAR 0 10
21402: PPUSH
21403: CALL_OW 74
21407: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21408: LD_ADDR_VAR 0 17
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_VAR 0 4
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 59
21430: PUSH
21431: EMPTY
21432: LIST
21433: PUSH
21434: LD_INT 21
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: PPUSH
21467: CALL_OW 69
21471: PPUSH
21472: LD_VAR 0 10
21476: PPUSH
21477: CALL_OW 74
21481: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21482: LD_VAR 0 10
21486: PPUSH
21487: LD_VAR 0 16
21491: PPUSH
21492: CALL_OW 296
21496: PUSH
21497: LD_INT 8
21499: PLUS
21500: PUSH
21501: LD_VAR 0 10
21505: PPUSH
21506: LD_VAR 0 17
21510: PPUSH
21511: CALL_OW 296
21515: LESS
21516: IFFALSE 21534
// begin ComAttackUnit ( i , target1 ) ;
21518: LD_VAR 0 10
21522: PPUSH
21523: LD_VAR 0 16
21527: PPUSH
21528: CALL_OW 115
// end else
21532: GO 21548
// begin ComAttackUnit ( i , target2 ) ;
21534: LD_VAR 0 10
21538: PPUSH
21539: LD_VAR 0 17
21543: PPUSH
21544: CALL_OW 115
// end ; end ;
21548: GO 21373
21550: POP
21551: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21552: LD_INT 22
21554: PUSH
21555: LD_VAR 0 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PPUSH
21578: CALL_OW 69
21582: PUSH
21583: LD_INT 0
21585: EQUAL
21586: PUSH
21587: LD_INT 22
21589: PUSH
21590: LD_VAR 0 4
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: PPUSH
21602: CALL_OW 69
21606: PUSH
21607: LD_INT 0
21609: EQUAL
21610: OR
21611: IFFALSE 21272
// end ; end ;
21613: LD_VAR 0 9
21617: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21618: LD_INT 0
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
// r := 100 ;
21624: LD_ADDR_VAR 0 5
21628: PUSH
21629: LD_INT 100
21631: ST_TO_ADDR
// x := 0 ;
21632: LD_ADDR_VAR 0 6
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// while ( x < n ) do
21640: LD_VAR 0 6
21644: PUSH
21645: LD_VAR 0 2
21649: LESS
21650: IFFALSE 21937
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21652: LD_ADDR_VAR 0 4
21656: PUSH
21657: DOUBLE
21658: LD_INT 1
21660: DEC
21661: ST_TO_ADDR
21662: LD_VAR 0 1
21666: PPUSH
21667: LD_INT 0
21669: PPUSH
21670: CALL_OW 517
21674: PUSH
21675: LD_INT 1
21677: ARRAY
21678: PUSH
21679: FOR_TO
21680: IFFALSE 21933
// begin if r > 50 then
21682: LD_VAR 0 5
21686: PUSH
21687: LD_INT 50
21689: GREATER
21690: IFFALSE 21909
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21692: LD_VAR 0 1
21696: PPUSH
21697: LD_INT 0
21699: PPUSH
21700: CALL_OW 517
21704: PUSH
21705: LD_INT 1
21707: ARRAY
21708: PUSH
21709: LD_VAR 0 4
21713: ARRAY
21714: PPUSH
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_INT 0
21722: PPUSH
21723: CALL_OW 517
21727: PUSH
21728: LD_INT 2
21730: ARRAY
21731: PUSH
21732: LD_VAR 0 4
21736: ARRAY
21737: PPUSH
21738: CALL_OW 458
21742: NOT
21743: IFFALSE 21893
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21745: LD_VAR 0 1
21749: PPUSH
21750: LD_INT 0
21752: PPUSH
21753: CALL_OW 517
21757: PUSH
21758: LD_INT 1
21760: ARRAY
21761: PUSH
21762: LD_VAR 0 4
21766: ARRAY
21767: PPUSH
21768: LD_VAR 0 1
21772: PPUSH
21773: LD_INT 0
21775: PPUSH
21776: CALL_OW 517
21780: PUSH
21781: LD_INT 2
21783: ARRAY
21784: PUSH
21785: LD_VAR 0 4
21789: ARRAY
21790: PPUSH
21791: LD_INT 5
21793: PPUSH
21794: LD_INT 0
21796: PPUSH
21797: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21801: LD_ADDR_EXP 51
21805: PUSH
21806: LD_EXP 51
21810: PPUSH
21811: LD_INT 1
21813: PPUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: LD_INT 0
21821: PPUSH
21822: CALL_OW 517
21826: PUSH
21827: LD_INT 1
21829: ARRAY
21830: PUSH
21831: LD_VAR 0 4
21835: ARRAY
21836: PUSH
21837: LD_VAR 0 1
21841: PPUSH
21842: LD_INT 0
21844: PPUSH
21845: CALL_OW 517
21849: PUSH
21850: LD_INT 2
21852: ARRAY
21853: PUSH
21854: LD_VAR 0 4
21858: ARRAY
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PPUSH
21864: CALL_OW 2
21868: ST_TO_ADDR
// r := 0 ;
21869: LD_ADDR_VAR 0 5
21873: PUSH
21874: LD_INT 0
21876: ST_TO_ADDR
// x := x + 1 ;
21877: LD_ADDR_VAR 0 6
21881: PUSH
21882: LD_VAR 0 6
21886: PUSH
21887: LD_INT 1
21889: PLUS
21890: ST_TO_ADDR
// end else
21891: GO 21907
// r := r + 35 ;
21893: LD_ADDR_VAR 0 5
21897: PUSH
21898: LD_VAR 0 5
21902: PUSH
21903: LD_INT 35
21905: PLUS
21906: ST_TO_ADDR
// end else
21907: GO 21931
// r := r + rand ( 10 , 25 ) ;
21909: LD_ADDR_VAR 0 5
21913: PUSH
21914: LD_VAR 0 5
21918: PUSH
21919: LD_INT 10
21921: PPUSH
21922: LD_INT 25
21924: PPUSH
21925: CALL_OW 12
21929: PLUS
21930: ST_TO_ADDR
// end ;
21931: GO 21679
21933: POP
21934: POP
21935: GO 21640
// end ; end_of_file
21937: LD_VAR 0 3
21941: RET
// every 0 0$1 trigger russianAI = 1 do
21942: LD_EXP 40
21946: PUSH
21947: LD_INT 1
21949: EQUAL
21950: IFFALSE 22169
21952: GO 21954
21954: DISABLE
// begin enable ;
21955: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21956: LD_INT 3
21958: PPUSH
21959: LD_EXP 31
21963: PPUSH
21964: CALL 16420 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21968: LD_INT 3
21970: PPUSH
21971: LD_EXP 43
21975: PPUSH
21976: CALL 16780 0 2
// if ruPossition = 1 then
21980: LD_EXP 42
21984: PUSH
21985: LD_INT 1
21987: EQUAL
21988: IFFALSE 22043
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21990: LD_INT 3
21992: PPUSH
21993: LD_INT 13
21995: PPUSH
21996: LD_INT 10
21998: PPUSH
21999: LD_INT 22
22001: PUSH
22002: LD_INT 3
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 21
22011: PUSH
22012: LD_INT 3
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 30
22021: PUSH
22022: LD_INT 8
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: PPUSH
22039: CALL 16986 0 4
// if ruPossition = 2 then
22043: LD_EXP 42
22047: PUSH
22048: LD_INT 2
22050: EQUAL
22051: IFFALSE 22106
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22053: LD_INT 3
22055: PPUSH
22056: LD_INT 14
22058: PPUSH
22059: LD_INT 11
22061: PPUSH
22062: LD_INT 22
22064: PUSH
22065: LD_INT 3
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 21
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 30
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: PPUSH
22097: CALL_OW 69
22101: PPUSH
22102: CALL 16986 0 4
// if ruPossition = 3 then
22106: LD_EXP 42
22110: PUSH
22111: LD_INT 3
22113: EQUAL
22114: IFFALSE 22169
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22116: LD_INT 3
22118: PPUSH
22119: LD_INT 15
22121: PPUSH
22122: LD_INT 12
22124: PPUSH
22125: LD_INT 22
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 21
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 8
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 69
22164: PPUSH
22165: CALL 16986 0 4
// end ;
22169: END
// every 0 0$1 do
22170: GO 22172
22172: DISABLE
// begin enable ;
22173: ENABLE
// if ruPossition = 1 then
22174: LD_EXP 42
22178: PUSH
22179: LD_INT 1
22181: EQUAL
22182: IFFALSE 22194
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22184: LD_INT 3
22186: PPUSH
22187: LD_INT 10
22189: PPUSH
22190: CALL 16057 0 2
// if ruPossition = 2 then
22194: LD_EXP 42
22198: PUSH
22199: LD_INT 2
22201: EQUAL
22202: IFFALSE 22214
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22204: LD_INT 3
22206: PPUSH
22207: LD_INT 11
22209: PPUSH
22210: CALL 16057 0 2
// if ruPossition = 3 then
22214: LD_EXP 42
22218: PUSH
22219: LD_INT 3
22221: EQUAL
22222: IFFALSE 22234
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22224: LD_INT 3
22226: PPUSH
22227: LD_INT 12
22229: PPUSH
22230: CALL 16057 0 2
// IntBazooka ( 3 , 1 ) ;
22234: LD_INT 3
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL 14856 0 2
// IntBazooka ( 6 , 1 ) ;
22244: LD_INT 6
22246: PPUSH
22247: LD_INT 1
22249: PPUSH
22250: CALL 14856 0 2
// end ;
22254: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22255: LD_EXP 40
22259: PUSH
22260: LD_INT 1
22262: EQUAL
22263: PUSH
22264: LD_EXP 36
22268: PPUSH
22269: CALL_OW 302
22273: AND
22274: PUSH
22275: LD_EXP 36
22279: PPUSH
22280: CALL_OW 255
22284: PUSH
22285: LD_INT 3
22287: EQUAL
22288: AND
22289: PUSH
22290: LD_INT 22
22292: PUSH
22293: LD_INT 3
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 21
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 33
22312: PUSH
22313: LD_INT 3
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: PPUSH
22325: CALL_OW 69
22329: PUSH
22330: LD_INT 0
22332: EQUAL
22333: AND
22334: IFFALSE 22542
22336: GO 22338
22338: DISABLE
// begin enable ;
22339: ENABLE
// if Difficulty = 1 then
22340: LD_OWVAR 67
22344: PUSH
22345: LD_INT 1
22347: EQUAL
22348: IFFALSE 22410
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22350: LD_INT 3
22352: PPUSH
22353: LD_EXP 36
22357: PPUSH
22358: LD_INT 5
22360: PPUSH
22361: LD_INT 8
22363: PPUSH
22364: CALL_OW 12
22368: PPUSH
22369: LD_INT 1
22371: PPUSH
22372: LD_INT 43
22374: PUSH
22375: LD_INT 44
22377: PUSH
22378: LD_INT 45
22380: PUSH
22381: LD_INT 46
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PPUSH
22390: LD_INT 1
22392: PPUSH
22393: LD_INT 3
22395: PUSH
22396: LD_INT 3
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PPUSH
22403: LD_INT 22
22405: PPUSH
22406: CALL 20976 0 8
// if Difficulty = 2 then
22410: LD_OWVAR 67
22414: PUSH
22415: LD_INT 2
22417: EQUAL
22418: IFFALSE 22476
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22420: LD_INT 3
22422: PPUSH
22423: LD_EXP 36
22427: PPUSH
22428: LD_INT 6
22430: PPUSH
22431: LD_INT 8
22433: PPUSH
22434: CALL_OW 12
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: LD_INT 44
22444: PUSH
22445: LD_INT 45
22447: PUSH
22448: LD_INT 46
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: PPUSH
22456: LD_INT 1
22458: PPUSH
22459: LD_INT 3
22461: PUSH
22462: LD_INT 3
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PPUSH
22469: LD_INT 22
22471: PPUSH
22472: CALL 20976 0 8
// if Difficulty >= 3 then
22476: LD_OWVAR 67
22480: PUSH
22481: LD_INT 3
22483: GREATEREQUAL
22484: IFFALSE 22542
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22486: LD_INT 3
22488: PPUSH
22489: LD_EXP 36
22493: PPUSH
22494: LD_INT 7
22496: PPUSH
22497: LD_INT 8
22499: PPUSH
22500: CALL_OW 12
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: LD_INT 44
22510: PUSH
22511: LD_INT 45
22513: PUSH
22514: LD_INT 46
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: LIST
22521: PPUSH
22522: LD_INT 1
22524: PPUSH
22525: LD_INT 3
22527: PUSH
22528: LD_INT 3
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PPUSH
22535: LD_INT 22
22537: PPUSH
22538: CALL 20976 0 8
// end ;
22542: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22543: LD_EXP 51
22547: PUSH
22548: LD_EXP 50
22552: AND
22553: IFFALSE 22674
22555: GO 22557
22557: DISABLE
22558: LD_INT 0
22560: PPUSH
// begin enable ;
22561: ENABLE
// for i in arabianMines do
22562: LD_ADDR_VAR 0 1
22566: PUSH
22567: LD_EXP 51
22571: PUSH
22572: FOR_IN
22573: IFFALSE 22672
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22575: LD_INT 22
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 92
22587: PUSH
22588: LD_VAR 0 1
22592: PUSH
22593: LD_INT 1
22595: ARRAY
22596: PUSH
22597: LD_VAR 0 1
22601: PUSH
22602: LD_INT 2
22604: ARRAY
22605: PUSH
22606: LD_INT 3
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PPUSH
22619: CALL_OW 69
22623: IFFALSE 22670
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22625: LD_VAR 0 1
22629: PUSH
22630: LD_INT 1
22632: ARRAY
22633: PPUSH
22634: LD_VAR 0 1
22638: PUSH
22639: LD_INT 2
22641: ARRAY
22642: PPUSH
22643: LD_INT 5
22645: PPUSH
22646: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22650: LD_ADDR_EXP 51
22654: PUSH
22655: LD_EXP 51
22659: PPUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 3
22669: ST_TO_ADDR
// end ; end ;
22670: GO 22572
22672: POP
22673: POP
// end ; end_of_file
22674: PPOPN 1
22676: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL_OW 255
22686: PUSH
22687: LD_INT 4
22689: EQUAL
22690: IFFALSE 22704
// SetBName ( building , epsilon ) ;
22692: LD_VAR 0 1
22696: PPUSH
22697: LD_STRING epsilon
22699: PPUSH
22700: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 255
22713: PUSH
22714: LD_INT 1
22716: EQUAL
22717: PUSH
22718: LD_VAR 0 1
22722: PPUSH
22723: CALL_OW 266
22727: PUSH
22728: LD_INT 0
22730: EQUAL
22731: AND
22732: IFFALSE 22746
// SetBName ( building , epsilon ) ;
22734: LD_VAR 0 1
22738: PPUSH
22739: LD_STRING epsilon
22741: PPUSH
22742: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22746: LD_VAR 0 1
22750: PPUSH
22751: CALL_OW 255
22755: PUSH
22756: LD_INT 3
22758: EQUAL
22759: PUSH
22760: LD_VAR 0 1
22764: PPUSH
22765: CALL_OW 266
22769: PUSH
22770: LD_INT 0
22772: EQUAL
22773: AND
22774: IFFALSE 22788
// SetBName ( building , chuikov ) ;
22776: LD_VAR 0 1
22780: PPUSH
22781: LD_STRING chuikov
22783: PPUSH
22784: CALL_OW 500
// if GetSide ( building ) = 2 then
22788: LD_VAR 0 1
22792: PPUSH
22793: CALL_OW 255
22797: PUSH
22798: LD_INT 2
22800: EQUAL
22801: IFFALSE 22857
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 266
22812: PUSH
22813: LD_INT 6
22815: EQUAL
22816: PUSH
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 266
22826: PUSH
22827: LD_INT 9
22829: EQUAL
22830: OR
22831: IFFALSE 22857
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22833: LD_VAR 0 1
22837: PPUSH
22838: LD_INT 10
22840: PPUSH
22841: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22845: LD_VAR 0 1
22849: PPUSH
22850: LD_INT 11
22852: PPUSH
22853: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22857: LD_VAR 0 1
22861: PPUSH
22862: CALL_OW 255
22866: PUSH
22867: LD_INT 3
22869: EQUAL
22870: IFFALSE 22904
// begin ruDepotConstructed := true ;
22872: LD_ADDR_EXP 58
22876: PUSH
22877: LD_INT 1
22879: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL_OW 266
22889: PUSH
22890: LD_INT 2
22892: EQUAL
22893: IFFALSE 22904
// AddComUpgrade ( building ) ;
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 206
// end ; end ;
22904: PPOPN 2
22906: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22907: LD_INT 0
22909: PPUSH
22910: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22911: LD_VAR 0 1
22915: PUSH
22916: LD_INT 22
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 23
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: PPUSH
22951: CALL_OW 69
22955: IN
22956: PUSH
22957: LD_EXP 62
22961: NOT
22962: AND
22963: IFFALSE 22994
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22965: LD_ADDR_EXP 62
22969: PUSH
22970: LD_VAR 0 1
22974: PPUSH
22975: CALL_OW 250
22979: PUSH
22980: LD_VAR 0 1
22984: PPUSH
22985: CALL_OW 251
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: ST_TO_ADDR
// end ;
22994: PPOPN 3
22996: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22997: LD_VAR 0 2
23001: PPUSH
23002: CALL_OW 255
23006: PUSH
23007: LD_INT 3
23009: EQUAL
23010: PUSH
23011: LD_EXP 36
23015: PPUSH
23016: CALL_OW 255
23020: PUSH
23021: LD_INT 3
23023: EQUAL
23024: AND
23025: PUSH
23026: LD_EXP 36
23030: PPUSH
23031: CALL_OW 302
23035: AND
23036: IFFALSE 23052
// ComEnterUnit ( human , ruFab ) ;
23038: LD_VAR 0 2
23042: PPUSH
23043: LD_EXP 36
23047: PPUSH
23048: CALL_OW 120
// end ;
23052: PPOPN 2
23054: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23055: LD_INT 0
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23061: LD_VAR 0 1
23065: PPUSH
23066: CALL_OW 255
23070: PUSH
23071: LD_INT 1
23073: EQUAL
23074: PUSH
23075: LD_EXP 66
23079: PUSH
23080: LD_INT 0
23082: EQUAL
23083: AND
23084: IFFALSE 23286
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23086: LD_VAR 0 1
23090: PPUSH
23091: CALL_OW 266
23095: PUSH
23096: LD_INT 26
23098: EQUAL
23099: PUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL_OW 266
23109: PUSH
23110: LD_INT 27
23112: EQUAL
23113: OR
23114: PUSH
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 266
23124: PUSH
23125: LD_INT 28
23127: EQUAL
23128: OR
23129: IFFALSE 23286
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23131: LD_INT 22
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: LD_INT 30
23146: PUSH
23147: LD_INT 7
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 30
23156: PUSH
23157: LD_INT 8
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: PUSH
23178: LD_INT 0
23180: GREATER
23181: IFFALSE 23286
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23183: LD_ADDR_VAR 0 2
23187: PUSH
23188: LD_INT 22
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: LD_INT 30
23203: PUSH
23204: LD_INT 7
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 30
23213: PUSH
23214: LD_INT 8
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PPUSH
23230: CALL_OW 69
23234: PUSH
23235: FOR_IN
23236: IFFALSE 23284
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23238: LD_VAR 0 2
23242: PPUSH
23243: LD_INT 1
23245: PPUSH
23246: CALL_OW 268
23250: PUSH
23251: LD_INT 11
23253: EQUAL
23254: PUSH
23255: LD_VAR 0 2
23259: PPUSH
23260: LD_INT 2
23262: PPUSH
23263: CALL_OW 268
23267: PUSH
23268: LD_INT 11
23270: EQUAL
23271: OR
23272: IFFALSE 23282
// eventVar1 = 1 ;
23274: LD_ADDR_EXP 66
23278: PUSH
23279: LD_INT 1
23281: ST_TO_ADDR
23282: GO 23235
23284: POP
23285: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23286: LD_VAR 0 1
23290: PPUSH
23291: CALL_OW 255
23295: PUSH
23296: LD_INT 3
23298: EQUAL
23299: IFFALSE 23779
// begin if GetBType ( building ) = b_depot then
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL_OW 266
23310: PUSH
23311: LD_INT 0
23313: EQUAL
23314: IFFALSE 23386
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23316: LD_VAR 0 1
23320: PPUSH
23321: CALL_OW 274
23325: PPUSH
23326: LD_INT 1
23328: PPUSH
23329: LD_INT 5000
23331: PPUSH
23332: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL_OW 274
23345: PPUSH
23346: LD_INT 2
23348: PPUSH
23349: LD_INT 300
23351: PPUSH
23352: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 274
23365: PPUSH
23366: LD_INT 3
23368: PPUSH
23369: LD_INT 100
23371: PPUSH
23372: CALL_OW 277
// ruDepot = building ;
23376: LD_ADDR_EXP 31
23380: PUSH
23381: LD_VAR 0 1
23385: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 266
23395: PUSH
23396: LD_INT 0
23398: EQUAL
23399: PUSH
23400: LD_VAR 0 1
23404: PPUSH
23405: CALL_OW 266
23409: PUSH
23410: LD_INT 2
23412: EQUAL
23413: OR
23414: PUSH
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 266
23424: PUSH
23425: LD_INT 4
23427: EQUAL
23428: OR
23429: IFFALSE 23440
// ComUpgrade ( building ) ;
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL_OW 146
// if GetBType ( building ) = b_lab then
23440: LD_VAR 0 1
23444: PPUSH
23445: CALL_OW 266
23449: PUSH
23450: LD_INT 6
23452: EQUAL
23453: IFFALSE 23656
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23455: LD_INT 22
23457: PUSH
23458: LD_INT 3
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 30
23467: PUSH
23468: LD_INT 8
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PPUSH
23479: CALL_OW 69
23483: PUSH
23484: LD_INT 0
23486: EQUAL
23487: IFFALSE 23525
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23489: LD_VAR 0 1
23493: PPUSH
23494: LD_INT 10
23496: PPUSH
23497: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23501: LD_VAR 0 1
23505: PPUSH
23506: LD_INT 12
23508: PPUSH
23509: CALL_OW 207
// ruLab1 = building ;
23513: LD_ADDR_EXP 32
23517: PUSH
23518: LD_VAR 0 1
23522: ST_TO_ADDR
// end else
23523: GO 23559
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23525: LD_VAR 0 1
23529: PPUSH
23530: LD_INT 11
23532: PPUSH
23533: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23537: LD_VAR 0 1
23541: PPUSH
23542: LD_INT 14
23544: PPUSH
23545: CALL_OW 207
// ruLab2 = building ;
23549: LD_ADDR_EXP 33
23553: PUSH
23554: LD_VAR 0 1
23558: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23559: LD_INT 3
23561: PPUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: LD_INT 3
23569: PPUSH
23570: CALL 15972 0 3
// if ruDestroyedBuildings > 0 then
23574: LD_EXP 43
23578: PUSH
23579: LD_INT 0
23581: GREATER
23582: IFFALSE 23656
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23584: LD_ADDR_EXP 43
23588: PUSH
23589: LD_EXP 43
23593: PPUSH
23594: LD_INT 1
23596: PPUSH
23597: CALL_OW 3
23601: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23602: LD_ADDR_EXP 43
23606: PUSH
23607: LD_EXP 43
23611: PPUSH
23612: LD_INT 1
23614: PPUSH
23615: CALL_OW 3
23619: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23620: LD_ADDR_EXP 43
23624: PUSH
23625: LD_EXP 43
23629: PPUSH
23630: LD_INT 1
23632: PPUSH
23633: CALL_OW 3
23637: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23638: LD_ADDR_EXP 43
23642: PUSH
23643: LD_EXP 43
23647: PPUSH
23648: LD_INT 1
23650: PPUSH
23651: CALL_OW 3
23655: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23656: LD_VAR 0 1
23660: PPUSH
23661: CALL_OW 266
23665: PUSH
23666: LD_INT 32
23668: EQUAL
23669: IFFALSE 23706
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23671: LD_VAR 0 1
23675: PPUSH
23676: LD_INT 44
23678: PUSH
23679: LD_INT 45
23681: PUSH
23682: LD_INT 46
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: PPUSH
23693: LD_INT 3
23695: PPUSH
23696: CALL_OW 12
23700: ARRAY
23701: PPUSH
23702: CALL_OW 208
// if GetBType ( building ) = b_turret then
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 266
23715: PUSH
23716: LD_INT 33
23718: EQUAL
23719: IFFALSE 23756
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23721: LD_VAR 0 1
23725: PPUSH
23726: LD_INT 44
23728: PUSH
23729: LD_INT 45
23731: PUSH
23732: LD_INT 46
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PPUSH
23743: LD_INT 3
23745: PPUSH
23746: CALL_OW 12
23750: ARRAY
23751: PPUSH
23752: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 266
23765: PUSH
23766: LD_INT 24
23768: EQUAL
23769: IFFALSE 23779
// russianAI = 1 ;
23771: LD_ADDR_EXP 40
23775: PUSH
23776: LD_INT 1
23778: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 255
23788: PUSH
23789: LD_INT 2
23791: EQUAL
23792: IFFALSE 24671
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 266
23803: PUSH
23804: LD_EXP 69
23808: PUSH
23809: LD_INT 1
23811: ARRAY
23812: PUSH
23813: LD_INT 1
23815: ARRAY
23816: EQUAL
23817: IFFALSE 23944
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23819: LD_ADDR_EXP 69
23823: PUSH
23824: LD_EXP 69
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: CALL_OW 3
23836: ST_TO_ADDR
// if arBuildingsTab then
23837: LD_EXP 69
23841: IFFALSE 23944
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 22
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 25
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PPUSH
23872: CALL_OW 69
23876: ST_TO_ADDR
// if engineers then
23877: LD_VAR 0 3
23881: IFFALSE 23944
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23883: LD_VAR 0 3
23887: PPUSH
23888: LD_EXP 69
23892: PUSH
23893: LD_INT 1
23895: ARRAY
23896: PUSH
23897: LD_INT 1
23899: ARRAY
23900: PPUSH
23901: LD_EXP 69
23905: PUSH
23906: LD_INT 1
23908: ARRAY
23909: PUSH
23910: LD_INT 2
23912: ARRAY
23913: PPUSH
23914: LD_EXP 69
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: PUSH
23923: LD_INT 3
23925: ARRAY
23926: PPUSH
23927: LD_EXP 69
23931: PUSH
23932: LD_INT 1
23934: ARRAY
23935: PUSH
23936: LD_INT 4
23938: ARRAY
23939: PPUSH
23940: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL_OW 266
23953: PUSH
23954: LD_INT 31
23956: EQUAL
23957: IFFALSE 24103
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23959: LD_ADDR_VAR 0 4
23963: PUSH
23964: LD_INT 22
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 25
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 25
23989: PUSH
23990: LD_INT 8
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PPUSH
24006: CALL_OW 69
24010: PUSH
24011: LD_EXP 27
24015: DIFF
24016: ST_TO_ADDR
// if not sol then
24017: LD_VAR 0 4
24021: NOT
24022: IFFALSE 24026
// exit ;
24024: GO 24671
// for i in sol do
24026: LD_ADDR_VAR 0 2
24030: PUSH
24031: LD_VAR 0 4
24035: PUSH
24036: FOR_IN
24037: IFFALSE 24101
// if not GetTag ( i ) then
24039: LD_VAR 0 2
24043: PPUSH
24044: CALL_OW 110
24048: NOT
24049: IFFALSE 24099
// begin if IsInUnit ( i ) then
24051: LD_VAR 0 2
24055: PPUSH
24056: CALL_OW 310
24060: IFFALSE 24071
// ComExitBuilding ( i ) ;
24062: LD_VAR 0 2
24066: PPUSH
24067: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24071: LD_VAR 0 2
24075: PPUSH
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL_OW 180
// SetTag ( i , 11 ) ;
24085: LD_VAR 0 2
24089: PPUSH
24090: LD_INT 11
24092: PPUSH
24093: CALL_OW 109
// break ;
24097: GO 24101
// end ;
24099: GO 24036
24101: POP
24102: POP
// end ; if GetBType ( building ) = b_depot then
24103: LD_VAR 0 1
24107: PPUSH
24108: CALL_OW 266
24112: PUSH
24113: LD_INT 0
24115: EQUAL
24116: IFFALSE 24202
// begin arDepot = building ;
24118: LD_ADDR_EXP 44
24122: PUSH
24123: LD_VAR 0 1
24127: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24128: LD_INT 38
24130: PUSH
24131: LD_INT 47
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PPUSH
24138: LD_INT 71
24140: PPUSH
24141: LD_INT 19
24143: PPUSH
24144: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 274
24157: PPUSH
24158: LD_INT 1
24160: PPUSH
24161: LD_INT 500
24163: PPUSH
24164: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24168: LD_VAR 0 1
24172: PPUSH
24173: CALL_OW 274
24177: PPUSH
24178: LD_INT 3
24180: PPUSH
24181: LD_INT 30
24183: PPUSH
24184: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24188: LD_EXP 27
24192: PPUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24202: LD_VAR 0 1
24206: PPUSH
24207: CALL_OW 266
24211: PUSH
24212: LD_INT 6
24214: EQUAL
24215: PUSH
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL_OW 266
24225: PUSH
24226: LD_INT 9
24228: EQUAL
24229: OR
24230: IFFALSE 24281
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: LD_INT 10
24239: PPUSH
24240: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24244: LD_VAR 0 1
24248: PPUSH
24249: LD_INT 11
24251: PPUSH
24252: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24256: LD_INT 2
24258: PPUSH
24259: LD_VAR 0 1
24263: PPUSH
24264: LD_INT 2
24266: PPUSH
24267: CALL 15972 0 3
// arLab = building ;
24271: LD_ADDR_EXP 45
24275: PUSH
24276: LD_VAR 0 1
24280: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24281: LD_VAR 0 1
24285: PPUSH
24286: CALL_OW 266
24290: PUSH
24291: LD_INT 2
24293: EQUAL
24294: PUSH
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL_OW 266
24304: PUSH
24305: LD_INT 4
24307: EQUAL
24308: OR
24309: IFFALSE 24380
// begin ComUpgrade ( building ) ;
24311: LD_VAR 0 1
24315: PPUSH
24316: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL_OW 266
24329: PUSH
24330: LD_INT 4
24332: EQUAL
24333: IFFALSE 24380
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24335: LD_INT 22
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 25
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PPUSH
24359: CALL_OW 69
24363: PUSH
24364: LD_EXP 27
24368: DIFF
24369: PPUSH
24370: LD_INT 75
24372: PPUSH
24373: LD_INT 21
24375: PPUSH
24376: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 266
24389: PUSH
24390: LD_INT 27
24392: EQUAL
24393: IFFALSE 24671
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24395: LD_INT 22
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 30
24407: PUSH
24408: LD_INT 27
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PPUSH
24419: CALL_OW 69
24423: PUSH
24424: LD_INT 2
24426: EQUAL
24427: IFFALSE 24671
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24429: LD_ADDR_VAR 0 2
24433: PUSH
24434: LD_INT 22
24436: PUSH
24437: LD_INT 2
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 21
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 25
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: PUSH
24474: LD_INT 1
24476: ARRAY
24477: ST_TO_ADDR
// if not i then
24478: LD_VAR 0 2
24482: NOT
24483: IFFALSE 24487
// exit ;
24485: GO 24671
// AddComMoveXY ( i , 92 , 34 ) ;
24487: LD_VAR 0 2
24491: PPUSH
24492: LD_INT 92
24494: PPUSH
24495: LD_INT 34
24497: PPUSH
24498: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24502: LD_VAR 0 2
24506: PPUSH
24507: LD_INT 35
24509: PPUSH
24510: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24514: LD_VAR 0 2
24518: PPUSH
24519: LD_INT 101
24521: PPUSH
24522: LD_INT 20
24524: PPUSH
24525: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24529: LD_VAR 0 2
24533: PPUSH
24534: LD_INT 35
24536: PPUSH
24537: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24541: LD_VAR 0 2
24545: PPUSH
24546: LD_INT 115
24548: PPUSH
24549: LD_INT 30
24551: PPUSH
24552: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_INT 35
24563: PPUSH
24564: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24568: LD_VAR 0 2
24572: PPUSH
24573: LD_INT 82
24575: PPUSH
24576: LD_INT 57
24578: PPUSH
24579: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_INT 35
24590: PPUSH
24591: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24595: LD_VAR 0 2
24599: PPUSH
24600: LD_INT 36
24602: PPUSH
24603: LD_INT 28
24605: PPUSH
24606: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24610: LD_VAR 0 2
24614: PPUSH
24615: LD_INT 70
24617: PPUSH
24618: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24622: LD_INT 22
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 21
24634: PUSH
24635: LD_INT 1
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 25
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: LIST
24656: PPUSH
24657: CALL_OW 69
24661: PPUSH
24662: LD_EXP 44
24666: PPUSH
24667: CALL_OW 180
// end ; end ; end ;
24671: PPOPN 5
24673: END
// on UpgradeComplete ( building ) do var i ;
24674: LD_INT 0
24676: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 255
24686: PUSH
24687: LD_INT 1
24689: EQUAL
24690: PUSH
24691: LD_EXP 66
24695: PUSH
24696: LD_INT 0
24698: EQUAL
24699: AND
24700: IFFALSE 24898
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24702: LD_VAR 0 1
24706: PPUSH
24707: CALL_OW 266
24711: PUSH
24712: LD_INT 7
24714: EQUAL
24715: PUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 266
24725: PUSH
24726: LD_INT 8
24728: EQUAL
24729: OR
24730: IFFALSE 24898
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24732: LD_INT 22
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: LD_INT 30
24747: PUSH
24748: LD_INT 26
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 30
24757: PUSH
24758: LD_INT 27
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 30
24767: PUSH
24768: LD_INT 28
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PPUSH
24785: CALL_OW 69
24789: PUSH
24790: LD_INT 0
24792: GREATER
24793: IFFALSE 24898
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24795: LD_ADDR_VAR 0 2
24799: PUSH
24800: LD_INT 22
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 30
24815: PUSH
24816: LD_INT 7
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 30
24825: PUSH
24826: LD_INT 8
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PPUSH
24842: CALL_OW 69
24846: PUSH
24847: FOR_IN
24848: IFFALSE 24896
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24850: LD_VAR 0 2
24854: PPUSH
24855: LD_INT 1
24857: PPUSH
24858: CALL_OW 268
24862: PUSH
24863: LD_INT 11
24865: EQUAL
24866: PUSH
24867: LD_VAR 0 2
24871: PPUSH
24872: LD_INT 2
24874: PPUSH
24875: CALL_OW 268
24879: PUSH
24880: LD_INT 11
24882: EQUAL
24883: OR
24884: IFFALSE 24894
// eventVar1 = 1 ;
24886: LD_ADDR_EXP 66
24890: PUSH
24891: LD_INT 1
24893: ST_TO_ADDR
24894: GO 24847
24896: POP
24897: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 255
24907: PUSH
24908: LD_INT 2
24910: EQUAL
24911: IFFALSE 25016
// begin if GetBType ( building ) = b_barracks then
24913: LD_VAR 0 1
24917: PPUSH
24918: CALL_OW 266
24922: PUSH
24923: LD_INT 5
24925: EQUAL
24926: IFFALSE 25016
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24928: LD_ADDR_VAR 0 2
24932: PUSH
24933: LD_INT 22
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 25
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 3
24955: PUSH
24956: LD_INT 54
24958: PUSH
24959: EMPTY
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: PPUSH
24971: CALL_OW 69
24975: PUSH
24976: LD_EXP 27
24980: PUSH
24981: EMPTY
24982: LIST
24983: DIFF
24984: PUSH
24985: FOR_IN
24986: IFFALSE 25004
// ComEnterUnit ( i , building ) ;
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_VAR 0 1
24997: PPUSH
24998: CALL_OW 120
25002: GO 24985
25004: POP
25005: POP
// arArm = building ;
25006: LD_ADDR_EXP 46
25010: PUSH
25011: LD_VAR 0 1
25015: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL_OW 255
25025: PUSH
25026: LD_INT 3
25028: EQUAL
25029: IFFALSE 25502
// begin if GetBType ( building ) = b_factory then
25031: LD_VAR 0 1
25035: PPUSH
25036: CALL_OW 266
25040: PUSH
25041: LD_INT 3
25043: EQUAL
25044: IFFALSE 25111
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25046: LD_ADDR_VAR 0 2
25050: PUSH
25051: LD_INT 22
25053: PUSH
25054: LD_INT 3
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 25
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PPUSH
25075: CALL_OW 69
25079: PUSH
25080: FOR_IN
25081: IFFALSE 25099
// ComEnterUnit ( i , building ) ;
25083: LD_VAR 0 2
25087: PPUSH
25088: LD_VAR 0 1
25092: PPUSH
25093: CALL_OW 120
25097: GO 25080
25099: POP
25100: POP
// ruFab = building ;
25101: LD_ADDR_EXP 36
25105: PUSH
25106: LD_VAR 0 1
25110: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25111: LD_INT 22
25113: PUSH
25114: LD_INT 3
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 21
25123: PUSH
25124: LD_INT 3
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 30
25133: PUSH
25134: LD_INT 8
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: LIST
25145: PPUSH
25146: CALL_OW 69
25150: PUSH
25151: LD_INT 2
25153: EQUAL
25154: IFFALSE 25362
// begin for i = 1 to 2 do
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: DOUBLE
25162: LD_INT 1
25164: DEC
25165: ST_TO_ADDR
25166: LD_INT 2
25168: PUSH
25169: FOR_TO
25170: IFFALSE 25257
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25172: LD_INT 22
25174: PUSH
25175: LD_INT 3
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 25
25184: PUSH
25185: LD_INT 4
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: PUSH
25201: LD_VAR 0 2
25205: ARRAY
25206: PPUSH
25207: LD_INT 22
25209: PUSH
25210: LD_INT 3
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 21
25219: PUSH
25220: LD_INT 3
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 30
25229: PUSH
25230: LD_INT 8
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: PUSH
25247: LD_INT 1
25249: ARRAY
25250: PPUSH
25251: CALL_OW 120
25255: GO 25169
25257: POP
25258: POP
// for i = 3 to 4 do
25259: LD_ADDR_VAR 0 2
25263: PUSH
25264: DOUBLE
25265: LD_INT 3
25267: DEC
25268: ST_TO_ADDR
25269: LD_INT 4
25271: PUSH
25272: FOR_TO
25273: IFFALSE 25360
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25275: LD_INT 22
25277: PUSH
25278: LD_INT 3
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 25
25287: PUSH
25288: LD_INT 4
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PPUSH
25299: CALL_OW 69
25303: PUSH
25304: LD_VAR 0 2
25308: ARRAY
25309: PPUSH
25310: LD_INT 22
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 21
25322: PUSH
25323: LD_INT 3
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 30
25332: PUSH
25333: LD_INT 8
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: PPUSH
25345: CALL_OW 69
25349: PUSH
25350: LD_INT 2
25352: ARRAY
25353: PPUSH
25354: CALL_OW 120
25358: GO 25272
25360: POP
25361: POP
// end ; if GetBType ( building ) = b_barracks then
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 266
25371: PUSH
25372: LD_INT 5
25374: EQUAL
25375: IFFALSE 25502
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25377: LD_ADDR_VAR 0 2
25381: PUSH
25382: LD_INT 22
25384: PUSH
25385: LD_INT 3
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 25
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 3
25404: PUSH
25405: LD_INT 54
25407: PUSH
25408: EMPTY
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: PPUSH
25420: CALL_OW 69
25424: PUSH
25425: FOR_IN
25426: IFFALSE 25444
// ComEnterUnit ( i , building ) ;
25428: LD_VAR 0 2
25432: PPUSH
25433: LD_VAR 0 1
25437: PPUSH
25438: CALL_OW 120
25442: GO 25425
25444: POP
25445: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25446: LD_INT 22
25448: PUSH
25449: LD_INT 3
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 30
25458: PUSH
25459: LD_INT 5
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PPUSH
25470: CALL_OW 69
25474: PUSH
25475: LD_INT 0
25477: EQUAL
25478: IFFALSE 25492
// ruArm1 = building else
25480: LD_ADDR_EXP 34
25484: PUSH
25485: LD_VAR 0 1
25489: ST_TO_ADDR
25490: GO 25502
// ruArm2 = building ;
25492: LD_ADDR_EXP 35
25496: PUSH
25497: LD_VAR 0 1
25501: ST_TO_ADDR
// end ; end ; end ;
25502: PPOPN 2
25504: END
// on EnterBuilding ( building , human ) do var rnd ;
25505: LD_INT 0
25507: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25508: LD_VAR 0 2
25512: PPUSH
25513: CALL_OW 255
25517: PUSH
25518: LD_INT 2
25520: EQUAL
25521: PUSH
25522: LD_VAR 0 2
25526: PPUSH
25527: CALL_OW 257
25531: PUSH
25532: LD_INT 1
25534: EQUAL
25535: AND
25536: PUSH
25537: LD_VAR 0 1
25541: PUSH
25542: LD_EXP 46
25546: EQUAL
25547: AND
25548: IFFALSE 25595
// begin wait ( 0 0$1 ) ;
25550: LD_INT 35
25552: PPUSH
25553: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_INT 1
25564: PPUSH
25565: LD_INT 100
25567: PPUSH
25568: CALL_OW 12
25572: ST_TO_ADDR
// if rnd > 50 then
25573: LD_VAR 0 3
25577: PUSH
25578: LD_INT 50
25580: GREATER
25581: IFFALSE 25595
// SetClass ( human , class_mortar ) ;
25583: LD_VAR 0 2
25587: PPUSH
25588: LD_INT 8
25590: PPUSH
25591: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25595: LD_VAR 0 2
25599: PUSH
25600: LD_INT 22
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 25
25612: PUSH
25613: LD_INT 12
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PPUSH
25624: CALL_OW 69
25628: IN
25629: IFFALSE 25679
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25631: LD_VAR 0 1
25635: PPUSH
25636: CALL_OW 266
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: IN
25651: IFFALSE 25667
// SetClass ( human , class_apeman_engineer ) else
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 16
25660: PPUSH
25661: CALL_OW 336
25665: GO 25679
// SetClass ( human , class_apeman_soldier ) ;
25667: LD_VAR 0 2
25671: PPUSH
25672: LD_INT 15
25674: PPUSH
25675: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25679: LD_VAR 0 2
25683: PPUSH
25684: CALL_OW 255
25688: PUSH
25689: LD_INT 3
25691: EQUAL
25692: PUSH
25693: LD_VAR 0 2
25697: PPUSH
25698: CALL_OW 257
25702: PUSH
25703: LD_INT 1
25705: EQUAL
25706: AND
25707: PUSH
25708: LD_VAR 0 1
25712: PUSH
25713: LD_EXP 34
25717: EQUAL
25718: PUSH
25719: LD_VAR 0 1
25723: PUSH
25724: LD_EXP 35
25728: EQUAL
25729: OR
25730: PUSH
25731: EMPTY
25732: LIST
25733: AND
25734: IFFALSE 25755
// begin wait ( 0 0$1 ) ;
25736: LD_INT 35
25738: PPUSH
25739: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25743: LD_VAR 0 2
25747: PPUSH
25748: LD_INT 9
25750: PPUSH
25751: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25755: LD_VAR 0 2
25759: PPUSH
25760: CALL_OW 255
25764: PUSH
25765: LD_INT 3
25767: EQUAL
25768: PUSH
25769: LD_VAR 0 2
25773: PPUSH
25774: CALL_OW 257
25778: PUSH
25779: LD_INT 9
25781: EQUAL
25782: AND
25783: PUSH
25784: LD_VAR 0 1
25788: PPUSH
25789: CALL_OW 266
25793: PUSH
25794: LD_INT 32
25796: EQUAL
25797: AND
25798: IFFALSE 25819
// begin wait ( 0 0$1 ) ;
25800: LD_INT 35
25802: PPUSH
25803: CALL_OW 67
// SetClass ( human , 1 ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 255
25828: PUSH
25829: LD_INT 3
25831: EQUAL
25832: PUSH
25833: LD_VAR 0 2
25837: PPUSH
25838: CALL_OW 257
25842: PUSH
25843: LD_INT 3
25845: EQUAL
25846: AND
25847: PUSH
25848: LD_VAR 0 1
25852: PUSH
25853: LD_EXP 36
25857: EQUAL
25858: AND
25859: IFFALSE 25873
// SetLives ( human , 1000 ) ;
25861: LD_VAR 0 2
25865: PPUSH
25866: LD_INT 1000
25868: PPUSH
25869: CALL_OW 234
// end ;
25873: PPOPN 3
25875: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25876: LD_VAR 0 1
25880: PUSH
25881: LD_INT 1
25883: EQUAL
25884: PUSH
25885: LD_VAR 0 2
25889: PUSH
25890: LD_INT 2
25892: EQUAL
25893: AND
25894: PUSH
25895: LD_INT 1
25897: PPUSH
25898: LD_INT 2
25900: PPUSH
25901: CALL_OW 81
25905: PUSH
25906: LD_INT 1
25908: EQUAL
25909: AND
25910: IFFALSE 25931
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25912: LD_EXP 25
25916: PPUSH
25917: LD_STRING D6b-Pow-1
25919: PPUSH
25920: CALL_OW 94
// YouLost ( Powell ) ;
25924: LD_STRING Powell
25926: PPUSH
25927: CALL_OW 104
// end ; end ;
25931: PPOPN 2
25933: END
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25934: LD_INT 23
25936: PPUSH
25937: LD_INT 22
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 21
25949: PUSH
25950: LD_INT 3
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PPUSH
25961: CALL_OW 70
25965: PUSH
25966: LD_INT 23
25968: PPUSH
25969: LD_INT 22
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 21
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 70
25997: OR
25998: PUSH
25999: LD_INT 1
26001: PPUSH
26002: LD_INT 2
26004: PPUSH
26005: CALL_OW 81
26009: PUSH
26010: LD_INT 1
26012: EQUAL
26013: AND
26014: IFFALSE 26253
26016: GO 26018
26018: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26019: LD_INT 23
26021: PPUSH
26022: LD_INT 22
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 3
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PPUSH
26046: CALL_OW 70
26050: PUSH
26051: LD_INT 23
26053: PPUSH
26054: LD_INT 22
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 21
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PPUSH
26078: CALL_OW 70
26082: OR
26083: PUSH
26084: LD_INT 1
26086: PPUSH
26087: LD_INT 2
26089: PPUSH
26090: CALL_OW 81
26094: PUSH
26095: LD_INT 1
26097: EQUAL
26098: AND
26099: IFFALSE 26108
// Query ( QAttack ) ;
26101: LD_STRING QAttack
26103: PPUSH
26104: CALL_OW 97
// wait ( 0 0$20 ) ;
26108: LD_INT 700
26110: PPUSH
26111: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26115: LD_INT 350
26117: PPUSH
26118: CALL_OW 67
// if arabianTrait = 1 then
26122: LD_EXP 50
26126: PUSH
26127: LD_INT 1
26129: EQUAL
26130: IFFALSE 26134
// exit ;
26132: GO 26253
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26134: LD_INT 23
26136: PPUSH
26137: LD_INT 22
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 21
26149: PUSH
26150: LD_INT 3
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PPUSH
26161: CALL_OW 70
26165: PUSH
26166: LD_INT 23
26168: PPUSH
26169: LD_INT 22
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 21
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PPUSH
26193: CALL_OW 70
26197: OR
26198: PUSH
26199: LD_INT 1
26201: PPUSH
26202: LD_INT 2
26204: PPUSH
26205: CALL_OW 81
26209: PUSH
26210: LD_INT 1
26212: EQUAL
26213: AND
26214: IFFALSE 26115
// InGameOn ;
26216: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26220: LD_INT 73
26222: PPUSH
26223: LD_INT 18
26225: PPUSH
26226: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26230: LD_EXP 25
26234: PPUSH
26235: LD_STRING D6b-Pow-1
26237: PPUSH
26238: CALL_OW 94
// YouLost ( Powell ) ;
26242: LD_STRING Powell
26244: PPUSH
26245: CALL_OW 104
// InGameOff ;
26249: CALL_OW 9
// end ;
26253: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26254: LD_VAR 0 1
26258: PPUSH
26259: CALL 45761 0 1
// if unit = Truman then
26263: LD_VAR 0 1
26267: PUSH
26268: LD_EXP 20
26272: EQUAL
26273: IFFALSE 26282
// YouLost ( Powell ) ;
26275: LD_STRING Powell
26277: PPUSH
26278: CALL_OW 104
// if unit = JMM then
26282: LD_VAR 0 1
26286: PUSH
26287: LD_EXP 1
26291: EQUAL
26292: IFFALSE 26301
// YouLost ( JMM ) ;
26294: LD_STRING JMM
26296: PPUSH
26297: CALL_OW 104
// if unit = Khatam then
26301: LD_VAR 0 1
26305: PUSH
26306: LD_EXP 14
26310: EQUAL
26311: IFFALSE 26321
// KhatamStatus = 0 ;
26313: LD_ADDR_EXP 54
26317: PUSH
26318: LD_INT 0
26320: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 255
26330: PUSH
26331: LD_INT 3
26333: EQUAL
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 247
26344: PUSH
26345: LD_INT 3
26347: EQUAL
26348: AND
26349: IFFALSE 27041
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26351: LD_VAR 0 1
26355: PPUSH
26356: CALL_OW 266
26360: PUSH
26361: LD_INT 31
26363: EQUAL
26364: PUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 266
26374: PUSH
26375: LD_INT 32
26377: EQUAL
26378: OR
26379: PUSH
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 266
26389: PUSH
26390: LD_INT 36
26392: EQUAL
26393: OR
26394: PUSH
26395: LD_VAR 0 1
26399: PPUSH
26400: CALL_OW 266
26404: PUSH
26405: LD_INT 0
26407: EQUAL
26408: OR
26409: PUSH
26410: LD_VAR 0 1
26414: PPUSH
26415: CALL_OW 266
26419: PUSH
26420: LD_INT 24
26422: EQUAL
26423: OR
26424: PUSH
26425: LD_VAR 0 1
26429: PPUSH
26430: CALL_OW 266
26434: PUSH
26435: LD_INT 17
26437: EQUAL
26438: OR
26439: PUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 266
26449: PUSH
26450: LD_INT 25
26452: EQUAL
26453: OR
26454: PUSH
26455: LD_VAR 0 1
26459: PPUSH
26460: CALL_OW 266
26464: PUSH
26465: LD_INT 19
26467: EQUAL
26468: OR
26469: PUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: CALL_OW 266
26479: PUSH
26480: LD_INT 20
26482: EQUAL
26483: OR
26484: PUSH
26485: LD_VAR 0 1
26489: PPUSH
26490: CALL_OW 266
26494: PUSH
26495: LD_INT 18
26497: EQUAL
26498: OR
26499: PUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 266
26509: PUSH
26510: LD_INT 21
26512: EQUAL
26513: OR
26514: PUSH
26515: LD_VAR 0 1
26519: PPUSH
26520: CALL_OW 266
26524: PUSH
26525: LD_INT 23
26527: EQUAL
26528: OR
26529: PUSH
26530: LD_VAR 0 1
26534: PPUSH
26535: CALL_OW 266
26539: PUSH
26540: LD_INT 16
26542: EQUAL
26543: OR
26544: PUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 266
26554: PUSH
26555: LD_INT 6
26557: EQUAL
26558: OR
26559: PUSH
26560: LD_VAR 0 1
26564: PPUSH
26565: CALL_OW 266
26569: PUSH
26570: LD_INT 29
26572: EQUAL
26573: OR
26574: PUSH
26575: LD_VAR 0 1
26579: PPUSH
26580: CALL_OW 266
26584: PUSH
26585: LD_INT 26
26587: EQUAL
26588: OR
26589: PUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: CALL_OW 266
26599: PUSH
26600: LD_INT 30
26602: EQUAL
26603: OR
26604: PUSH
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 266
26614: PUSH
26615: LD_INT 28
26617: EQUAL
26618: OR
26619: PUSH
26620: LD_VAR 0 1
26624: PPUSH
26625: CALL_OW 266
26629: PUSH
26630: LD_INT 27
26632: EQUAL
26633: OR
26634: PUSH
26635: LD_VAR 0 1
26639: PPUSH
26640: CALL_OW 266
26644: PUSH
26645: LD_INT 33
26647: EQUAL
26648: OR
26649: PUSH
26650: LD_VAR 0 1
26654: PPUSH
26655: CALL_OW 266
26659: PUSH
26660: LD_INT 2
26662: EQUAL
26663: OR
26664: PUSH
26665: LD_VAR 0 1
26669: PPUSH
26670: CALL_OW 266
26674: PUSH
26675: LD_INT 4
26677: EQUAL
26678: OR
26679: IFFALSE 26765
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26681: LD_ADDR_EXP 43
26685: PUSH
26686: LD_EXP 43
26690: PUSH
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL_OW 266
26700: ADD
26701: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26702: LD_ADDR_EXP 43
26706: PUSH
26707: LD_EXP 43
26711: PUSH
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 250
26721: ADD
26722: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26723: LD_ADDR_EXP 43
26727: PUSH
26728: LD_EXP 43
26732: PUSH
26733: LD_VAR 0 1
26737: PPUSH
26738: CALL_OW 251
26742: ADD
26743: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26744: LD_ADDR_EXP 43
26748: PUSH
26749: LD_EXP 43
26753: PUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 254
26763: ADD
26764: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 266
26774: PUSH
26775: LD_INT 1
26777: EQUAL
26778: IFFALSE 26857
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26780: LD_ADDR_EXP 43
26784: PUSH
26785: LD_EXP 43
26789: PUSH
26790: LD_INT 0
26792: ADD
26793: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26794: LD_ADDR_EXP 43
26798: PUSH
26799: LD_EXP 43
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 250
26813: ADD
26814: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26815: LD_ADDR_EXP 43
26819: PUSH
26820: LD_EXP 43
26824: PUSH
26825: LD_VAR 0 1
26829: PPUSH
26830: CALL_OW 251
26834: ADD
26835: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26836: LD_ADDR_EXP 43
26840: PUSH
26841: LD_EXP 43
26845: PUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 254
26855: ADD
26856: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 266
26866: PUSH
26867: LD_INT 3
26869: EQUAL
26870: IFFALSE 26949
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26872: LD_ADDR_EXP 43
26876: PUSH
26877: LD_EXP 43
26881: PUSH
26882: LD_INT 2
26884: ADD
26885: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26886: LD_ADDR_EXP 43
26890: PUSH
26891: LD_EXP 43
26895: PUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 250
26905: ADD
26906: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26907: LD_ADDR_EXP 43
26911: PUSH
26912: LD_EXP 43
26916: PUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: CALL_OW 251
26926: ADD
26927: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26928: LD_ADDR_EXP 43
26932: PUSH
26933: LD_EXP 43
26937: PUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 254
26947: ADD
26948: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 266
26958: PUSH
26959: LD_INT 5
26961: EQUAL
26962: IFFALSE 27041
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26964: LD_ADDR_EXP 43
26968: PUSH
26969: LD_EXP 43
26973: PUSH
26974: LD_INT 4
26976: ADD
26977: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26978: LD_ADDR_EXP 43
26982: PUSH
26983: LD_EXP 43
26987: PUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 250
26997: ADD
26998: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26999: LD_ADDR_EXP 43
27003: PUSH
27004: LD_EXP 43
27008: PUSH
27009: LD_VAR 0 1
27013: PPUSH
27014: CALL_OW 251
27018: ADD
27019: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
27020: LD_ADDR_EXP 43
27024: PUSH
27025: LD_EXP 43
27029: PUSH
27030: LD_VAR 0 1
27034: PPUSH
27035: CALL_OW 254
27039: ADD
27040: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
27041: LD_EXP 52
27045: PUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 257
27055: PUSH
27056: LD_INT 3
27058: EQUAL
27059: AND
27060: PUSH
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 255
27070: PUSH
27071: LD_INT 3
27073: EQUAL
27074: AND
27075: PUSH
27076: LD_EXP 36
27080: PPUSH
27081: CALL_OW 302
27085: AND
27086: PUSH
27087: LD_EXP 36
27091: PPUSH
27092: CALL_OW 255
27096: PUSH
27097: LD_INT 3
27099: EQUAL
27100: AND
27101: IFFALSE 27185
// begin ruMech := ruMech - 1 ;
27103: LD_ADDR_EXP 52
27107: PUSH
27108: LD_EXP 52
27112: PUSH
27113: LD_INT 1
27115: MINUS
27116: ST_TO_ADDR
// uc_side = 3 ;
27117: LD_ADDR_OWVAR 20
27121: PUSH
27122: LD_INT 3
27124: ST_TO_ADDR
// uc_nation = 3 ;
27125: LD_ADDR_OWVAR 21
27129: PUSH
27130: LD_INT 3
27132: ST_TO_ADDR
// hc_gallery :=  ;
27133: LD_ADDR_OWVAR 33
27137: PUSH
27138: LD_STRING 
27140: ST_TO_ADDR
// hc_name :=  ;
27141: LD_ADDR_OWVAR 26
27145: PUSH
27146: LD_STRING 
27148: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27149: LD_INT 0
27151: PPUSH
27152: LD_EXP 37
27156: PPUSH
27157: LD_EXP 38
27161: PPUSH
27162: CALL_OW 12
27166: PPUSH
27167: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27171: CALL_OW 44
27175: PPUSH
27176: LD_EXP 36
27180: PPUSH
27181: CALL_OW 52
// end ; end ;
27185: PPOPN 1
27187: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27188: LD_VAR 0 1
27192: PPUSH
27193: LD_VAR 0 2
27197: PPUSH
27198: CALL 45881 0 2
// end ;
27202: PPOPN 2
27204: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27205: LD_ADDR_OWVAR 57
27209: PUSH
27210: LD_INT 0
27212: ST_TO_ADDR
// fastEnd = 1 ;
27213: LD_ADDR_EXP 64
27217: PUSH
27218: LD_INT 1
27220: ST_TO_ADDR
// FinishMission ;
27221: CALL 28389 0 0
// end ;
27225: PPOPN 1
27227: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27228: LD_VAR 0 1
27232: PPUSH
27233: CALL 45865 0 1
// end ; end_of_file
27237: PPOPN 1
27239: END
// export function CreateNature ; var i , un ; begin
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27245: LD_ADDR_VAR 0 2
27249: PUSH
27250: DOUBLE
27251: LD_INT 1
27253: DEC
27254: ST_TO_ADDR
27255: LD_OWVAR 67
27259: PUSH
27260: LD_INT 1
27262: PPUSH
27263: LD_INT 5
27265: PPUSH
27266: CALL_OW 12
27270: PLUS
27271: PUSH
27272: FOR_TO
27273: IFFALSE 27418
// begin hc_sex = sex_male ;
27275: LD_ADDR_OWVAR 27
27279: PUSH
27280: LD_INT 1
27282: ST_TO_ADDR
// uc_side = 0 ;
27283: LD_ADDR_OWVAR 20
27287: PUSH
27288: LD_INT 0
27290: ST_TO_ADDR
// uc_nation = nation_nature ;
27291: LD_ADDR_OWVAR 21
27295: PUSH
27296: LD_INT 0
27298: ST_TO_ADDR
// hc_class = class_apeman ;
27299: LD_ADDR_OWVAR 28
27303: PUSH
27304: LD_INT 12
27306: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27307: LD_ADDR_OWVAR 31
27311: PUSH
27312: LD_INT 2
27314: PPUSH
27315: LD_INT 7
27317: PPUSH
27318: CALL_OW 12
27322: PUSH
27323: LD_OWVAR 67
27327: PLUS
27328: PUSH
27329: LD_INT 2
27331: PPUSH
27332: LD_INT 10
27334: PPUSH
27335: CALL_OW 12
27339: PUSH
27340: LD_INT 2
27342: PPUSH
27343: LD_INT 10
27345: PPUSH
27346: CALL_OW 12
27350: PUSH
27351: LD_INT 2
27353: PPUSH
27354: LD_INT 10
27356: PPUSH
27357: CALL_OW 12
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27368: LD_ADDR_OWVAR 35
27372: PUSH
27373: LD_INT 5
27375: NEG
27376: PPUSH
27377: LD_INT 5
27379: PPUSH
27380: CALL_OW 12
27384: PUSH
27385: LD_OWVAR 67
27389: MUL
27390: ST_TO_ADDR
// un = CreateHuman ;
27391: LD_ADDR_VAR 0 3
27395: PUSH
27396: CALL_OW 44
27400: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27401: LD_VAR 0 3
27405: PPUSH
27406: LD_INT 5
27408: PPUSH
27409: LD_INT 0
27411: PPUSH
27412: CALL_OW 49
// end ;
27416: GO 27272
27418: POP
27419: POP
// for i = 1 to Difficulty + 2 do
27420: LD_ADDR_VAR 0 2
27424: PUSH
27425: DOUBLE
27426: LD_INT 1
27428: DEC
27429: ST_TO_ADDR
27430: LD_OWVAR 67
27434: PUSH
27435: LD_INT 2
27437: PLUS
27438: PUSH
27439: FOR_TO
27440: IFFALSE 27549
// begin hc_sex = sex_male ;
27442: LD_ADDR_OWVAR 27
27446: PUSH
27447: LD_INT 1
27449: ST_TO_ADDR
// uc_side = 0 ;
27450: LD_ADDR_OWVAR 20
27454: PUSH
27455: LD_INT 0
27457: ST_TO_ADDR
// uc_nation = nation_nature ;
27458: LD_ADDR_OWVAR 21
27462: PUSH
27463: LD_INT 0
27465: ST_TO_ADDR
// hc_class = class_tiger ;
27466: LD_ADDR_OWVAR 28
27470: PUSH
27471: LD_INT 14
27473: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27474: LD_ADDR_OWVAR 31
27478: PUSH
27479: LD_EXP 38
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27499: LD_ADDR_OWVAR 35
27503: PUSH
27504: LD_INT 5
27506: NEG
27507: PPUSH
27508: LD_INT 5
27510: PPUSH
27511: CALL_OW 12
27515: PUSH
27516: LD_OWVAR 67
27520: MUL
27521: ST_TO_ADDR
// un = CreateHuman ;
27522: LD_ADDR_VAR 0 3
27526: PUSH
27527: CALL_OW 44
27531: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27532: LD_VAR 0 3
27536: PPUSH
27537: LD_INT 6
27539: PPUSH
27540: LD_INT 0
27542: PPUSH
27543: CALL_OW 49
// end ;
27547: GO 27439
27549: POP
27550: POP
// for i = 1 to rand ( 3 , 4 ) do
27551: LD_ADDR_VAR 0 2
27555: PUSH
27556: DOUBLE
27557: LD_INT 1
27559: DEC
27560: ST_TO_ADDR
27561: LD_INT 3
27563: PPUSH
27564: LD_INT 4
27566: PPUSH
27567: CALL_OW 12
27571: PUSH
27572: FOR_TO
27573: IFFALSE 27667
// begin hc_sex = sex_male ;
27575: LD_ADDR_OWVAR 27
27579: PUSH
27580: LD_INT 1
27582: ST_TO_ADDR
// uc_side = 0 ;
27583: LD_ADDR_OWVAR 20
27587: PUSH
27588: LD_INT 0
27590: ST_TO_ADDR
// uc_nation = nation_nature ;
27591: LD_ADDR_OWVAR 21
27595: PUSH
27596: LD_INT 0
27598: ST_TO_ADDR
// hc_class = 18 ;
27599: LD_ADDR_OWVAR 28
27603: PUSH
27604: LD_INT 18
27606: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27607: LD_ADDR_OWVAR 31
27611: PUSH
27612: LD_EXP 38
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: ST_TO_ADDR
// hc_agressivity = 0 ;
27632: LD_ADDR_OWVAR 35
27636: PUSH
27637: LD_INT 0
27639: ST_TO_ADDR
// un = CreateHuman ;
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: CALL_OW 44
27649: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27650: LD_VAR 0 3
27654: PPUSH
27655: LD_INT 6
27657: PPUSH
27658: LD_INT 0
27660: PPUSH
27661: CALL_OW 49
// end ;
27665: GO 27572
27667: POP
27668: POP
// end ; end_of_file
27669: LD_VAR 0 1
27673: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27674: LD_EXP 47
27678: PUSH
27679: LD_INT 1
27681: EQUAL
27682: IFFALSE 27770
27684: GO 27686
27686: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27687: LD_INT 7
27689: PPUSH
27690: LD_INT 5
27692: PPUSH
27693: LD_INT 4
27695: PUSH
27696: LD_INT 5
27698: PUSH
27699: LD_INT 6
27701: PUSH
27702: LD_INT 6
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: PUSH
27711: LD_OWVAR 67
27715: ARRAY
27716: PPUSH
27717: LD_EXP 37
27721: PPUSH
27722: LD_EXP 38
27726: PPUSH
27727: CALL_OW 12
27731: PPUSH
27732: LD_INT 2
27734: PPUSH
27735: LD_INT 1
27737: PPUSH
27738: LD_INT 1
27740: PPUSH
27741: EMPTY
27742: PPUSH
27743: LD_INT 25
27745: PUSH
27746: LD_INT 26
27748: PUSH
27749: LD_INT 27
27751: PUSH
27752: LD_INT 28
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: PPUSH
27761: EMPTY
27762: PPUSH
27763: LD_INT 1
27765: PPUSH
27766: CALL 17534 0 11
27770: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27771: LD_EXP 47
27775: PUSH
27776: LD_INT 1
27778: EQUAL
27779: IFFALSE 27871
27781: GO 27783
27783: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27784: LD_INT 5
27786: PPUSH
27787: LD_INT 2
27789: PPUSH
27790: LD_INT 5
27792: PUSH
27793: LD_INT 6
27795: PUSH
27796: LD_INT 8
27798: PUSH
27799: LD_INT 9
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: PUSH
27808: LD_OWVAR 67
27812: ARRAY
27813: PPUSH
27814: LD_INT 0
27816: PPUSH
27817: LD_INT 0
27819: PPUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 4
27825: PUSH
27826: LD_INT 5
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: PUSH
27834: LD_OWVAR 67
27838: ARRAY
27839: PPUSH
27840: LD_INT 0
27842: PPUSH
27843: LD_EXP 37
27847: PPUSH
27848: LD_EXP 38
27852: PPUSH
27853: CALL_OW 12
27857: PPUSH
27858: LD_INT 7
27860: PPUSH
27861: LD_INT 9
27863: PPUSH
27864: LD_INT 1
27866: PPUSH
27867: CALL 19238 0 11
27871: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27872: LD_EXP 47
27876: PUSH
27877: LD_INT 1
27879: EQUAL
27880: IFFALSE 27889
27882: GO 27884
27884: DISABLE
// PrepareArabianSheik ;
27885: CALL 4841 0 0
27889: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27890: LD_EXP 30
27894: PUSH
27895: LD_EXP 65
27899: PUSH
27900: LD_INT 1
27902: EQUAL
27903: AND
27904: IFFALSE 27973
27906: GO 27908
27908: DISABLE
// begin enable ;
27909: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27910: LD_INT 6
27912: PPUSH
27913: LD_INT 3
27915: PPUSH
27916: LD_EXP 61
27920: PPUSH
27921: LD_INT 0
27923: PPUSH
27924: LD_OWVAR 67
27928: PPUSH
27929: LD_INT 0
27931: PPUSH
27932: LD_EXP 61
27936: PUSH
27937: LD_INT 3
27939: DIV
27940: PUSH
27941: LD_INT 1
27943: PLUS
27944: PPUSH
27945: LD_EXP 37
27949: PPUSH
27950: LD_EXP 38
27954: PPUSH
27955: CALL_OW 12
27959: PPUSH
27960: LD_INT 17
27962: PPUSH
27963: LD_INT 18
27965: PPUSH
27966: LD_INT 1
27968: PPUSH
27969: CALL 19238 0 11
// end ;
27973: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27974: LD_EXP 30
27978: PUSH
27979: LD_EXP 65
27983: PUSH
27984: LD_INT 1
27986: EQUAL
27987: AND
27988: IFFALSE 28065
27990: GO 27992
27992: DISABLE
// begin enable ;
27993: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27994: LD_INT 17
27996: PPUSH
27997: LD_INT 6
27999: PPUSH
28000: LD_EXP 60
28004: PPUSH
28005: LD_EXP 37
28009: PPUSH
28010: LD_EXP 38
28014: PPUSH
28015: CALL_OW 12
28019: PPUSH
28020: LD_INT 3
28022: PPUSH
28023: LD_INT 1
28025: PPUSH
28026: LD_INT 3
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PPUSH
28036: LD_INT 43
28038: PUSH
28039: LD_INT 44
28041: PUSH
28042: LD_INT 45
28044: PUSH
28045: LD_INT 46
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: PPUSH
28054: EMPTY
28055: PPUSH
28056: EMPTY
28057: PPUSH
28058: LD_INT 1
28060: PPUSH
28061: CALL 17534 0 11
// end ;
28065: END
// every 10 10$00 trigger joinEpsilon do
28066: LD_EXP 30
28070: IFFALSE 28124
28072: GO 28074
28074: DISABLE
// begin enable ;
28075: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
28076: LD_ADDR_EXP 60
28080: PUSH
28081: LD_EXP 60
28085: PUSH
28086: LD_INT 1
28088: PPUSH
28089: LD_OWVAR 67
28093: PPUSH
28094: CALL_OW 12
28098: PLUS
28099: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
28100: LD_ADDR_EXP 61
28104: PUSH
28105: LD_EXP 61
28109: PUSH
28110: LD_INT 1
28112: PPUSH
28113: LD_OWVAR 67
28117: PPUSH
28118: CALL_OW 12
28122: PLUS
28123: ST_TO_ADDR
// end ;
28124: END
// every 21 21$0 trigger attackAvalaible = 1 do
28125: LD_EXP 65
28129: PUSH
28130: LD_INT 1
28132: EQUAL
28133: IFFALSE 28146
28135: GO 28137
28137: DISABLE
// attackAvalaible = 0 ; end_of_file
28138: LD_ADDR_EXP 65
28142: PUSH
28143: LD_INT 0
28145: ST_TO_ADDR
28146: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28147: LD_INT 54
28149: PPUSH
28150: LD_INT 1
28152: PPUSH
28153: CALL_OW 321
28157: PUSH
28158: LD_INT 2
28160: EQUAL
28161: PUSH
28162: LD_INT 55
28164: PPUSH
28165: LD_INT 1
28167: PPUSH
28168: CALL_OW 321
28172: PUSH
28173: LD_INT 2
28175: EQUAL
28176: AND
28177: PUSH
28178: LD_INT 21
28180: PPUSH
28181: LD_INT 1
28183: PPUSH
28184: CALL_OW 321
28188: PUSH
28189: LD_INT 2
28191: EQUAL
28192: AND
28193: PUSH
28194: LD_INT 22
28196: PPUSH
28197: LD_INT 1
28199: PPUSH
28200: CALL_OW 321
28204: PUSH
28205: LD_INT 2
28207: EQUAL
28208: AND
28209: PUSH
28210: LD_INT 12
28212: PPUSH
28213: LD_INT 1
28215: PPUSH
28216: CALL_OW 321
28220: PUSH
28221: LD_INT 1
28223: EQUAL
28224: PUSH
28225: LD_INT 32
28227: PPUSH
28228: LD_INT 1
28230: PPUSH
28231: CALL_OW 321
28235: PUSH
28236: LD_INT 1
28238: EQUAL
28239: OR
28240: PUSH
28241: EMPTY
28242: LIST
28243: AND
28244: PUSH
28245: LD_EXP 49
28249: PUSH
28250: LD_INT 1
28252: EQUAL
28253: AND
28254: PUSH
28255: LD_INT 22
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 21
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 69
28283: PUSH
28284: LD_INT 0
28286: EQUAL
28287: AND
28288: IFFALSE 28344
28290: GO 28292
28292: DISABLE
// begin case query ( QEndMission ) of 1 :
28293: LD_STRING QEndMission
28295: PPUSH
28296: CALL_OW 97
28300: PUSH
28301: LD_INT 1
28303: DOUBLE
28304: EQUAL
28305: IFTRUE 28309
28307: GO 28320
28309: POP
// begin end_the_mission_allowed = true ;
28310: LD_ADDR_OWVAR 57
28314: PUSH
28315: LD_INT 1
28317: ST_TO_ADDR
// end ; 2 :
28318: GO 28344
28320: LD_INT 2
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28343
28328: POP
// begin fastEnd = 1 ;
28329: LD_ADDR_EXP 64
28333: PUSH
28334: LD_INT 1
28336: ST_TO_ADDR
// FinishMission ;
28337: CALL 28389 0 0
// end ; end ;
28341: GO 28344
28343: POP
// end ;
28344: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28345: LD_EXP 59
28349: PUSH
28350: LD_EXP 58
28354: NOT
28355: AND
28356: PUSH
28357: LD_INT 22
28359: PUSH
28360: LD_INT 3
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PPUSH
28367: CALL_OW 69
28371: PUSH
28372: LD_INT 0
28374: EQUAL
28375: AND
28376: IFFALSE 28388
28378: GO 28380
28380: DISABLE
// SetAchievement ( ACH_TACT ) ;
28381: LD_STRING ACH_TACT
28383: PPUSH
28384: CALL_OW 543
28388: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28389: LD_INT 0
28391: PPUSH
28392: PPUSH
28393: PPUSH
28394: PPUSH
// if not snipersTrained then
28395: LD_EXP 63
28399: NOT
28400: IFFALSE 28409
// SetAchievement ( ACH_SNIPER ) ;
28402: LD_STRING ACH_SNIPER
28404: PPUSH
28405: CALL_OW 543
// m1 := false ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_INT 0
28416: ST_TO_ADDR
// m2 := false ;
28417: LD_ADDR_VAR 0 3
28421: PUSH
28422: LD_INT 0
28424: ST_TO_ADDR
// m3 := false ;
28425: LD_ADDR_VAR 0 4
28429: PUSH
28430: LD_INT 0
28432: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28433: LD_EXP 54
28437: PPUSH
28438: LD_STRING 10_KhatamStatus_1
28440: PPUSH
28441: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28445: LD_EXP 53
28449: PPUSH
28450: LD_STRING 10_GensherEscape_1
28452: PPUSH
28453: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28457: LD_INT 12
28459: PPUSH
28460: LD_INT 1
28462: PPUSH
28463: CALL_OW 321
28467: PUSH
28468: LD_INT 2
28470: EQUAL
28471: IFFALSE 28493
// begin AddMedal ( sights , 1 ) ;
28473: LD_STRING sights
28475: PPUSH
28476: LD_INT 1
28478: PPUSH
28479: CALL_OW 101
// m1 := true ;
28483: LD_ADDR_VAR 0 2
28487: PUSH
28488: LD_INT 1
28490: ST_TO_ADDR
// end else
28491: GO 28504
// begin AddMedal ( sights , - 1 ) ;
28493: LD_STRING sights
28495: PPUSH
28496: LD_INT 1
28498: NEG
28499: PPUSH
28500: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28504: LD_INT 32
28506: PPUSH
28507: LD_INT 1
28509: PPUSH
28510: CALL_OW 321
28514: PUSH
28515: LD_INT 2
28517: EQUAL
28518: IFFALSE 28540
// begin AddMedal ( computers , 1 ) ;
28520: LD_STRING computers
28522: PPUSH
28523: LD_INT 1
28525: PPUSH
28526: CALL_OW 101
// m2 := true ;
28530: LD_ADDR_VAR 0 3
28534: PUSH
28535: LD_INT 1
28537: ST_TO_ADDR
// end else
28538: GO 28551
// begin AddMedal ( computers , - 1 ) ;
28540: LD_STRING computers
28542: PPUSH
28543: LD_INT 1
28545: NEG
28546: PPUSH
28547: CALL_OW 101
// end ; if arabianEscape = 0 then
28551: LD_EXP 48
28555: PUSH
28556: LD_INT 0
28558: EQUAL
28559: IFFALSE 28591
// begin AddMedal ( renegades , 2 ) ;
28561: LD_STRING renegades
28563: PPUSH
28564: LD_INT 2
28566: PPUSH
28567: CALL_OW 101
// m3 := true ;
28571: LD_ADDR_VAR 0 4
28575: PUSH
28576: LD_INT 1
28578: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28579: LD_INT 0
28581: PPUSH
28582: LD_STRING 10_ScientistsEscape_1
28584: PPUSH
28585: CALL_OW 39
// end else
28589: GO 28602
// begin AddMedal ( renegades , - 1 ) ;
28591: LD_STRING renegades
28593: PPUSH
28594: LD_INT 1
28596: NEG
28597: PPUSH
28598: CALL_OW 101
// end ; SaveEpsilonBase ;
28602: CALL 29388 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28606: LD_VAR 0 2
28610: PUSH
28611: LD_VAR 0 3
28615: AND
28616: PUSH
28617: LD_VAR 0 4
28621: AND
28622: PUSH
28623: LD_OWVAR 67
28627: PUSH
28628: LD_INT 3
28630: GREATEREQUAL
28631: AND
28632: IFFALSE 28644
// SetAchievementEX ( ACH_AMER , 10 ) ;
28634: LD_STRING ACH_AMER
28636: PPUSH
28637: LD_INT 10
28639: PPUSH
28640: CALL_OW 564
// if tick <= 40 40$00 then
28644: LD_OWVAR 1
28648: PUSH
28649: LD_INT 84000
28651: LESSEQUAL
28652: IFFALSE 28668
// begin wait ( 3 ) ;
28654: LD_INT 3
28656: PPUSH
28657: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28661: LD_STRING ACH_ASPEED_10
28663: PPUSH
28664: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28668: LD_STRING Main
28670: PPUSH
28671: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28675: LD_INT 22
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 23
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 21
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 25
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 25
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 25
28730: PUSH
28731: LD_INT 3
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 25
28740: PUSH
28741: LD_INT 4
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 25
28750: PUSH
28751: LD_INT 5
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 25
28760: PUSH
28761: LD_INT 8
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: PPUSH
28783: CALL_OW 69
28787: PPUSH
28788: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28792: LD_EXP 1
28796: PPUSH
28797: LD_EXP 55
28801: PUSH
28802: LD_STRING JMM
28804: STR
28805: PPUSH
28806: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28810: LD_EXP 2
28814: PPUSH
28815: LD_EXP 55
28819: PUSH
28820: LD_STRING Brown
28822: STR
28823: PPUSH
28824: CALL 11718 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28828: LD_EXP 3
28832: PPUSH
28833: LD_EXP 55
28837: PUSH
28838: LD_STRING Donaldson
28840: STR
28841: PPUSH
28842: CALL 11718 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28846: LD_EXP 4
28850: PPUSH
28851: LD_EXP 55
28855: PUSH
28856: LD_STRING Bobby
28858: STR
28859: PPUSH
28860: CALL 11718 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28864: LD_EXP 5
28868: PPUSH
28869: LD_EXP 55
28873: PUSH
28874: LD_STRING Cyrus
28876: STR
28877: PPUSH
28878: CALL 11718 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28882: LD_EXP 6
28886: PPUSH
28887: LD_EXP 55
28891: PUSH
28892: LD_STRING Lisa
28894: STR
28895: PPUSH
28896: CALL 11718 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28900: LD_EXP 7
28904: PPUSH
28905: LD_EXP 55
28909: PUSH
28910: LD_STRING Frank
28912: STR
28913: PPUSH
28914: CALL 11718 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28918: LD_EXP 8
28922: PPUSH
28923: LD_EXP 55
28927: PUSH
28928: LD_STRING Kikuchi
28930: STR
28931: PPUSH
28932: CALL 11718 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28936: LD_EXP 9
28940: PPUSH
28941: LD_EXP 55
28945: PUSH
28946: LD_STRING Houten
28948: STR
28949: PPUSH
28950: CALL 11718 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28954: LD_EXP 10
28958: PPUSH
28959: LD_EXP 55
28963: PUSH
28964: LD_STRING Gary
28966: STR
28967: PPUSH
28968: CALL 11718 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28972: LD_EXP 19
28976: PPUSH
28977: LD_EXP 55
28981: PUSH
28982: LD_STRING Cornell
28984: STR
28985: PPUSH
28986: CALL 11718 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28990: LD_EXP 11
28994: PPUSH
28995: LD_EXP 55
28999: PUSH
29000: LD_STRING Simms
29002: STR
29003: PPUSH
29004: CALL 11718 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
29008: LD_EXP 12
29012: PPUSH
29013: LD_EXP 55
29017: PUSH
29018: LD_STRING Denis
29020: STR
29021: PPUSH
29022: CALL 11718 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
29026: LD_EXP 13
29030: PPUSH
29031: LD_EXP 55
29035: PUSH
29036: LD_STRING Joan
29038: STR
29039: PPUSH
29040: CALL 11718 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
29044: LD_EXP 15
29048: PPUSH
29049: LD_EXP 55
29053: PUSH
29054: LD_STRING Gladstone
29056: STR
29057: PPUSH
29058: CALL 11718 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
29062: LD_EXP 17
29066: PPUSH
29067: LD_EXP 55
29071: PUSH
29072: LD_STRING DeltaDoctor
29074: STR
29075: PPUSH
29076: CALL 11718 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
29080: LD_EXP 23
29084: PPUSH
29085: LD_STRING 10c_lock
29087: PPUSH
29088: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
29092: LD_INT 50
29094: PUSH
29095: EMPTY
29096: LIST
29097: PUSH
29098: LD_INT 22
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 21
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: LD_INT 25
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 25
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 25
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 25
29153: PUSH
29154: LD_INT 4
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 25
29163: PUSH
29164: LD_INT 5
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 25
29173: PUSH
29174: LD_INT 8
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: PPUSH
29196: CALL_OW 69
29200: PUSH
29201: LD_EXP 1
29205: PUSH
29206: LD_EXP 2
29210: PUSH
29211: LD_EXP 3
29215: PUSH
29216: LD_EXP 4
29220: PUSH
29221: LD_EXP 5
29225: PUSH
29226: LD_EXP 6
29230: PUSH
29231: LD_EXP 7
29235: PUSH
29236: LD_EXP 15
29240: PUSH
29241: LD_EXP 8
29245: PUSH
29246: LD_EXP 12
29250: PUSH
29251: LD_EXP 13
29255: PUSH
29256: LD_EXP 9
29260: PUSH
29261: LD_EXP 11
29265: PUSH
29266: LD_EXP 10
29270: PUSH
29271: LD_EXP 17
29275: PUSH
29276: LD_EXP 19
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: DIFF
29299: PPUSH
29300: LD_STRING 10_other_survivors
29302: PPUSH
29303: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29307: LD_INT 50
29309: PUSH
29310: EMPTY
29311: LIST
29312: PUSH
29313: LD_INT 22
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 21
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 25
29338: PUSH
29339: LD_INT 16
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 25
29348: PUSH
29349: LD_INT 12
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 69
29371: PPUSH
29372: LD_STRING 10_ape
29374: PPUSH
29375: CALL_OW 38
// YouWin ;
29379: CALL_OW 103
// end ;
29383: LD_VAR 0 1
29387: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29388: LD_INT 0
29390: PPUSH
29391: PPUSH
29392: PPUSH
29393: PPUSH
// epsilonBase = [ ] ;
29394: LD_ADDR_VAR 0 2
29398: PUSH
29399: EMPTY
29400: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29401: LD_ADDR_VAR 0 3
29405: PUSH
29406: LD_INT 22
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 21
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 50
29428: PUSH
29429: EMPTY
29430: LIST
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: LIST
29436: PPUSH
29437: CALL_OW 69
29441: ST_TO_ADDR
// for i in buildings do
29442: LD_ADDR_VAR 0 4
29446: PUSH
29447: LD_VAR 0 3
29451: PUSH
29452: FOR_IN
29453: IFFALSE 29905
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29455: LD_VAR 0 4
29459: PPUSH
29460: CALL_OW 266
29464: PUSH
29465: LD_INT 6
29467: PUSH
29468: LD_INT 7
29470: PUSH
29471: LD_INT 8
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: IN
29479: IFFALSE 29593
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29481: LD_ADDR_VAR 0 2
29485: PUSH
29486: LD_VAR 0 2
29490: PUSH
29491: LD_VAR 0 4
29495: PPUSH
29496: CALL_OW 266
29500: PUSH
29501: LD_VAR 0 4
29505: PPUSH
29506: CALL_OW 250
29510: PUSH
29511: LD_VAR 0 4
29515: PPUSH
29516: CALL_OW 251
29520: PUSH
29521: LD_VAR 0 4
29525: PPUSH
29526: CALL_OW 254
29530: PUSH
29531: LD_VAR 0 4
29535: PPUSH
29536: CALL_OW 267
29540: PUSH
29541: LD_VAR 0 4
29545: PPUSH
29546: CALL_OW 248
29550: PUSH
29551: LD_VAR 0 4
29555: PPUSH
29556: LD_INT 1
29558: PPUSH
29559: CALL_OW 268
29563: PUSH
29564: LD_VAR 0 4
29568: PPUSH
29569: LD_INT 2
29571: PPUSH
29572: CALL_OW 268
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: ADD
29590: ST_TO_ADDR
29591: GO 29903
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29593: LD_VAR 0 4
29597: PPUSH
29598: CALL_OW 266
29602: PUSH
29603: LD_INT 32
29605: EQUAL
29606: PUSH
29607: LD_VAR 0 4
29611: PPUSH
29612: CALL_OW 266
29616: PUSH
29617: LD_INT 33
29619: EQUAL
29620: OR
29621: IFFALSE 29718
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29623: LD_ADDR_VAR 0 2
29627: PUSH
29628: LD_VAR 0 2
29632: PUSH
29633: LD_VAR 0 4
29637: PPUSH
29638: CALL_OW 266
29642: PUSH
29643: LD_VAR 0 4
29647: PPUSH
29648: CALL_OW 250
29652: PUSH
29653: LD_VAR 0 4
29657: PPUSH
29658: CALL_OW 251
29662: PUSH
29663: LD_VAR 0 4
29667: PPUSH
29668: CALL_OW 254
29672: PUSH
29673: LD_VAR 0 4
29677: PPUSH
29678: CALL_OW 267
29682: PUSH
29683: LD_VAR 0 4
29687: PPUSH
29688: CALL_OW 248
29692: PUSH
29693: LD_VAR 0 4
29697: PPUSH
29698: CALL_OW 269
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: ADD
29715: ST_TO_ADDR
29716: GO 29903
// if GetBType ( i ) = b_factory then
29718: LD_VAR 0 4
29722: PPUSH
29723: CALL_OW 266
29727: PUSH
29728: LD_INT 3
29730: EQUAL
29731: IFFALSE 29821
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29733: LD_ADDR_VAR 0 2
29737: PUSH
29738: LD_VAR 0 2
29742: PPUSH
29743: LD_INT 1
29745: PPUSH
29746: LD_VAR 0 4
29750: PPUSH
29751: CALL_OW 266
29755: PUSH
29756: LD_VAR 0 4
29760: PPUSH
29761: CALL_OW 250
29765: PUSH
29766: LD_VAR 0 4
29770: PPUSH
29771: CALL_OW 251
29775: PUSH
29776: LD_VAR 0 4
29780: PPUSH
29781: CALL_OW 254
29785: PUSH
29786: LD_VAR 0 4
29790: PPUSH
29791: CALL_OW 267
29795: PUSH
29796: LD_VAR 0 4
29800: PPUSH
29801: CALL_OW 248
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: PPUSH
29814: CALL_OW 2
29818: ST_TO_ADDR
29819: GO 29903
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29821: LD_ADDR_VAR 0 2
29825: PUSH
29826: LD_VAR 0 2
29830: PUSH
29831: LD_VAR 0 4
29835: PPUSH
29836: CALL_OW 266
29840: PUSH
29841: LD_VAR 0 4
29845: PPUSH
29846: CALL_OW 250
29850: PUSH
29851: LD_VAR 0 4
29855: PPUSH
29856: CALL_OW 251
29860: PUSH
29861: LD_VAR 0 4
29865: PPUSH
29866: CALL_OW 254
29870: PUSH
29871: LD_VAR 0 4
29875: PPUSH
29876: CALL_OW 267
29880: PUSH
29881: LD_VAR 0 4
29885: PPUSH
29886: CALL_OW 248
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: PUSH
29899: EMPTY
29900: LIST
29901: ADD
29902: ST_TO_ADDR
// end ;
29903: GO 29452
29905: POP
29906: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29907: LD_VAR 0 2
29911: PPUSH
29912: LD_STRING 10_EpsilonBase
29914: PPUSH
29915: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29919: LD_INT 19
29921: PPUSH
29922: LD_STRING 10_EpsilonEnv
29924: PPUSH
29925: CALL 29934 0 2
// end ;
29929: LD_VAR 0 1
29933: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29934: LD_INT 0
29936: PPUSH
// result := ListEnvironmentArea ( area ) ;
29937: LD_ADDR_VAR 0 3
29941: PUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 353
29951: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29952: LD_VAR 0 3
29956: PPUSH
29957: LD_VAR 0 2
29961: PPUSH
29962: CALL_OW 39
// end ; end_of_file
29966: LD_VAR 0 3
29970: RET
// every 0 0$01 do var timer ;
29971: GO 29973
29973: DISABLE
29974: LD_INT 0
29976: PPUSH
// begin timer := 0 0$20 ;
29977: LD_ADDR_VAR 0 1
29981: PUSH
29982: LD_INT 700
29984: ST_TO_ADDR
// repeat wait ( timer ) ;
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29994: LD_EXP 57
29998: PUSH
29999: LD_INT 6
30001: GREATEREQUAL
30002: PUSH
30003: LD_EXP 57
30007: PUSH
30008: LD_INT 14
30010: LESS
30011: AND
30012: IFFALSE 30028
// timer := timer + 0 0$3 ;
30014: LD_ADDR_VAR 0 1
30018: PUSH
30019: LD_VAR 0 1
30023: PUSH
30024: LD_INT 105
30026: PLUS
30027: ST_TO_ADDR
// if cratesSpawned >= 14 then
30028: LD_EXP 57
30032: PUSH
30033: LD_INT 14
30035: GREATEREQUAL
30036: IFFALSE 30052
// timer := timer + 0 0$6 ;
30038: LD_ADDR_VAR 0 1
30042: PUSH
30043: LD_VAR 0 1
30047: PUSH
30048: LD_INT 210
30050: PLUS
30051: ST_TO_ADDR
// if timer > 2 2$00 then
30052: LD_VAR 0 1
30056: PUSH
30057: LD_INT 4200
30059: GREATER
30060: IFFALSE 30070
// timer := 0 0$45 ;
30062: LD_ADDR_VAR 0 1
30066: PUSH
30067: LD_INT 1575
30069: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
30070: LD_INT 1
30072: PPUSH
30073: LD_INT 5
30075: PPUSH
30076: CALL_OW 12
30080: PPUSH
30081: LD_INT 16
30083: PPUSH
30084: LD_INT 1
30086: PPUSH
30087: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
30091: LD_ADDR_EXP 57
30095: PUSH
30096: LD_EXP 57
30100: PUSH
30101: LD_INT 1
30103: PLUS
30104: ST_TO_ADDR
// until false ;
30105: LD_INT 0
30107: IFFALSE 29985
// end ; end_of_file end_of_file
30109: PPOPN 1
30111: END
// every 0 0$1 do
30112: GO 30114
30114: DISABLE
// begin enable ;
30115: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30116: LD_STRING updateTimer(
30118: PUSH
30119: LD_OWVAR 1
30123: STR
30124: PUSH
30125: LD_STRING );
30127: STR
30128: PPUSH
30129: CALL_OW 559
// end ;
30133: END
// export function SOS_MapStart ( ) ; begin
30134: LD_INT 0
30136: PPUSH
// if streamModeActive then
30137: LD_EXP 70
30141: IFFALSE 30150
// DefineStreamItems ( true ) ;
30143: LD_INT 1
30145: PPUSH
30146: CALL 31804 0 1
// UpdateFactoryWaypoints ( ) ;
30150: CALL 44665 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30154: CALL 44922 0 0
// end ;
30158: LD_VAR 0 1
30162: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30163: LD_INT 0
30165: PPUSH
// if p2 = hack_mode then
30166: LD_VAR 0 2
30170: PUSH
30171: LD_INT 100
30173: EQUAL
30174: IFFALSE 31177
// begin if not StreamModeActive then
30176: LD_EXP 70
30180: NOT
30181: IFFALSE 30191
// StreamModeActive := true ;
30183: LD_ADDR_EXP 70
30187: PUSH
30188: LD_INT 1
30190: ST_TO_ADDR
// if p3 = 0 then
30191: LD_VAR 0 3
30195: PUSH
30196: LD_INT 0
30198: EQUAL
30199: IFFALSE 30205
// InitStreamMode ;
30201: CALL 31340 0 0
// if p3 = 1 then
30205: LD_VAR 0 3
30209: PUSH
30210: LD_INT 1
30212: EQUAL
30213: IFFALSE 30223
// sRocket := true ;
30215: LD_ADDR_EXP 75
30219: PUSH
30220: LD_INT 1
30222: ST_TO_ADDR
// if p3 = 2 then
30223: LD_VAR 0 3
30227: PUSH
30228: LD_INT 2
30230: EQUAL
30231: IFFALSE 30241
// sSpeed := true ;
30233: LD_ADDR_EXP 74
30237: PUSH
30238: LD_INT 1
30240: ST_TO_ADDR
// if p3 = 3 then
30241: LD_VAR 0 3
30245: PUSH
30246: LD_INT 3
30248: EQUAL
30249: IFFALSE 30259
// sEngine := true ;
30251: LD_ADDR_EXP 76
30255: PUSH
30256: LD_INT 1
30258: ST_TO_ADDR
// if p3 = 4 then
30259: LD_VAR 0 3
30263: PUSH
30264: LD_INT 4
30266: EQUAL
30267: IFFALSE 30277
// sSpec := true ;
30269: LD_ADDR_EXP 73
30273: PUSH
30274: LD_INT 1
30276: ST_TO_ADDR
// if p3 = 5 then
30277: LD_VAR 0 3
30281: PUSH
30282: LD_INT 5
30284: EQUAL
30285: IFFALSE 30295
// sLevel := true ;
30287: LD_ADDR_EXP 77
30291: PUSH
30292: LD_INT 1
30294: ST_TO_ADDR
// if p3 = 6 then
30295: LD_VAR 0 3
30299: PUSH
30300: LD_INT 6
30302: EQUAL
30303: IFFALSE 30313
// sArmoury := true ;
30305: LD_ADDR_EXP 78
30309: PUSH
30310: LD_INT 1
30312: ST_TO_ADDR
// if p3 = 7 then
30313: LD_VAR 0 3
30317: PUSH
30318: LD_INT 7
30320: EQUAL
30321: IFFALSE 30331
// sRadar := true ;
30323: LD_ADDR_EXP 79
30327: PUSH
30328: LD_INT 1
30330: ST_TO_ADDR
// if p3 = 8 then
30331: LD_VAR 0 3
30335: PUSH
30336: LD_INT 8
30338: EQUAL
30339: IFFALSE 30349
// sBunker := true ;
30341: LD_ADDR_EXP 80
30345: PUSH
30346: LD_INT 1
30348: ST_TO_ADDR
// if p3 = 9 then
30349: LD_VAR 0 3
30353: PUSH
30354: LD_INT 9
30356: EQUAL
30357: IFFALSE 30367
// sHack := true ;
30359: LD_ADDR_EXP 81
30363: PUSH
30364: LD_INT 1
30366: ST_TO_ADDR
// if p3 = 10 then
30367: LD_VAR 0 3
30371: PUSH
30372: LD_INT 10
30374: EQUAL
30375: IFFALSE 30385
// sFire := true ;
30377: LD_ADDR_EXP 82
30381: PUSH
30382: LD_INT 1
30384: ST_TO_ADDR
// if p3 = 11 then
30385: LD_VAR 0 3
30389: PUSH
30390: LD_INT 11
30392: EQUAL
30393: IFFALSE 30403
// sRefresh := true ;
30395: LD_ADDR_EXP 83
30399: PUSH
30400: LD_INT 1
30402: ST_TO_ADDR
// if p3 = 12 then
30403: LD_VAR 0 3
30407: PUSH
30408: LD_INT 12
30410: EQUAL
30411: IFFALSE 30421
// sExp := true ;
30413: LD_ADDR_EXP 84
30417: PUSH
30418: LD_INT 1
30420: ST_TO_ADDR
// if p3 = 13 then
30421: LD_VAR 0 3
30425: PUSH
30426: LD_INT 13
30428: EQUAL
30429: IFFALSE 30439
// sDepot := true ;
30431: LD_ADDR_EXP 85
30435: PUSH
30436: LD_INT 1
30438: ST_TO_ADDR
// if p3 = 14 then
30439: LD_VAR 0 3
30443: PUSH
30444: LD_INT 14
30446: EQUAL
30447: IFFALSE 30457
// sFlag := true ;
30449: LD_ADDR_EXP 86
30453: PUSH
30454: LD_INT 1
30456: ST_TO_ADDR
// if p3 = 15 then
30457: LD_VAR 0 3
30461: PUSH
30462: LD_INT 15
30464: EQUAL
30465: IFFALSE 30475
// sKamikadze := true ;
30467: LD_ADDR_EXP 94
30471: PUSH
30472: LD_INT 1
30474: ST_TO_ADDR
// if p3 = 16 then
30475: LD_VAR 0 3
30479: PUSH
30480: LD_INT 16
30482: EQUAL
30483: IFFALSE 30493
// sTroll := true ;
30485: LD_ADDR_EXP 95
30489: PUSH
30490: LD_INT 1
30492: ST_TO_ADDR
// if p3 = 17 then
30493: LD_VAR 0 3
30497: PUSH
30498: LD_INT 17
30500: EQUAL
30501: IFFALSE 30511
// sSlow := true ;
30503: LD_ADDR_EXP 96
30507: PUSH
30508: LD_INT 1
30510: ST_TO_ADDR
// if p3 = 18 then
30511: LD_VAR 0 3
30515: PUSH
30516: LD_INT 18
30518: EQUAL
30519: IFFALSE 30529
// sLack := true ;
30521: LD_ADDR_EXP 97
30525: PUSH
30526: LD_INT 1
30528: ST_TO_ADDR
// if p3 = 19 then
30529: LD_VAR 0 3
30533: PUSH
30534: LD_INT 19
30536: EQUAL
30537: IFFALSE 30547
// sTank := true ;
30539: LD_ADDR_EXP 99
30543: PUSH
30544: LD_INT 1
30546: ST_TO_ADDR
// if p3 = 20 then
30547: LD_VAR 0 3
30551: PUSH
30552: LD_INT 20
30554: EQUAL
30555: IFFALSE 30565
// sRemote := true ;
30557: LD_ADDR_EXP 100
30561: PUSH
30562: LD_INT 1
30564: ST_TO_ADDR
// if p3 = 21 then
30565: LD_VAR 0 3
30569: PUSH
30570: LD_INT 21
30572: EQUAL
30573: IFFALSE 30583
// sPowell := true ;
30575: LD_ADDR_EXP 101
30579: PUSH
30580: LD_INT 1
30582: ST_TO_ADDR
// if p3 = 22 then
30583: LD_VAR 0 3
30587: PUSH
30588: LD_INT 22
30590: EQUAL
30591: IFFALSE 30601
// sTeleport := true ;
30593: LD_ADDR_EXP 104
30597: PUSH
30598: LD_INT 1
30600: ST_TO_ADDR
// if p3 = 23 then
30601: LD_VAR 0 3
30605: PUSH
30606: LD_INT 23
30608: EQUAL
30609: IFFALSE 30619
// sOilTower := true ;
30611: LD_ADDR_EXP 106
30615: PUSH
30616: LD_INT 1
30618: ST_TO_ADDR
// if p3 = 24 then
30619: LD_VAR 0 3
30623: PUSH
30624: LD_INT 24
30626: EQUAL
30627: IFFALSE 30637
// sShovel := true ;
30629: LD_ADDR_EXP 107
30633: PUSH
30634: LD_INT 1
30636: ST_TO_ADDR
// if p3 = 25 then
30637: LD_VAR 0 3
30641: PUSH
30642: LD_INT 25
30644: EQUAL
30645: IFFALSE 30655
// sSheik := true ;
30647: LD_ADDR_EXP 108
30651: PUSH
30652: LD_INT 1
30654: ST_TO_ADDR
// if p3 = 26 then
30655: LD_VAR 0 3
30659: PUSH
30660: LD_INT 26
30662: EQUAL
30663: IFFALSE 30673
// sEarthquake := true ;
30665: LD_ADDR_EXP 110
30669: PUSH
30670: LD_INT 1
30672: ST_TO_ADDR
// if p3 = 27 then
30673: LD_VAR 0 3
30677: PUSH
30678: LD_INT 27
30680: EQUAL
30681: IFFALSE 30691
// sAI := true ;
30683: LD_ADDR_EXP 111
30687: PUSH
30688: LD_INT 1
30690: ST_TO_ADDR
// if p3 = 28 then
30691: LD_VAR 0 3
30695: PUSH
30696: LD_INT 28
30698: EQUAL
30699: IFFALSE 30709
// sCargo := true ;
30701: LD_ADDR_EXP 114
30705: PUSH
30706: LD_INT 1
30708: ST_TO_ADDR
// if p3 = 29 then
30709: LD_VAR 0 3
30713: PUSH
30714: LD_INT 29
30716: EQUAL
30717: IFFALSE 30727
// sDLaser := true ;
30719: LD_ADDR_EXP 115
30723: PUSH
30724: LD_INT 1
30726: ST_TO_ADDR
// if p3 = 30 then
30727: LD_VAR 0 3
30731: PUSH
30732: LD_INT 30
30734: EQUAL
30735: IFFALSE 30745
// sExchange := true ;
30737: LD_ADDR_EXP 116
30741: PUSH
30742: LD_INT 1
30744: ST_TO_ADDR
// if p3 = 31 then
30745: LD_VAR 0 3
30749: PUSH
30750: LD_INT 31
30752: EQUAL
30753: IFFALSE 30763
// sFac := true ;
30755: LD_ADDR_EXP 117
30759: PUSH
30760: LD_INT 1
30762: ST_TO_ADDR
// if p3 = 32 then
30763: LD_VAR 0 3
30767: PUSH
30768: LD_INT 32
30770: EQUAL
30771: IFFALSE 30781
// sPower := true ;
30773: LD_ADDR_EXP 118
30777: PUSH
30778: LD_INT 1
30780: ST_TO_ADDR
// if p3 = 33 then
30781: LD_VAR 0 3
30785: PUSH
30786: LD_INT 33
30788: EQUAL
30789: IFFALSE 30799
// sRandom := true ;
30791: LD_ADDR_EXP 119
30795: PUSH
30796: LD_INT 1
30798: ST_TO_ADDR
// if p3 = 34 then
30799: LD_VAR 0 3
30803: PUSH
30804: LD_INT 34
30806: EQUAL
30807: IFFALSE 30817
// sShield := true ;
30809: LD_ADDR_EXP 120
30813: PUSH
30814: LD_INT 1
30816: ST_TO_ADDR
// if p3 = 35 then
30817: LD_VAR 0 3
30821: PUSH
30822: LD_INT 35
30824: EQUAL
30825: IFFALSE 30835
// sTime := true ;
30827: LD_ADDR_EXP 121
30831: PUSH
30832: LD_INT 1
30834: ST_TO_ADDR
// if p3 = 36 then
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 36
30842: EQUAL
30843: IFFALSE 30853
// sTools := true ;
30845: LD_ADDR_EXP 122
30849: PUSH
30850: LD_INT 1
30852: ST_TO_ADDR
// if p3 = 101 then
30853: LD_VAR 0 3
30857: PUSH
30858: LD_INT 101
30860: EQUAL
30861: IFFALSE 30871
// sSold := true ;
30863: LD_ADDR_EXP 87
30867: PUSH
30868: LD_INT 1
30870: ST_TO_ADDR
// if p3 = 102 then
30871: LD_VAR 0 3
30875: PUSH
30876: LD_INT 102
30878: EQUAL
30879: IFFALSE 30889
// sDiff := true ;
30881: LD_ADDR_EXP 88
30885: PUSH
30886: LD_INT 1
30888: ST_TO_ADDR
// if p3 = 103 then
30889: LD_VAR 0 3
30893: PUSH
30894: LD_INT 103
30896: EQUAL
30897: IFFALSE 30907
// sFog := true ;
30899: LD_ADDR_EXP 91
30903: PUSH
30904: LD_INT 1
30906: ST_TO_ADDR
// if p3 = 104 then
30907: LD_VAR 0 3
30911: PUSH
30912: LD_INT 104
30914: EQUAL
30915: IFFALSE 30925
// sReset := true ;
30917: LD_ADDR_EXP 92
30921: PUSH
30922: LD_INT 1
30924: ST_TO_ADDR
// if p3 = 105 then
30925: LD_VAR 0 3
30929: PUSH
30930: LD_INT 105
30932: EQUAL
30933: IFFALSE 30943
// sSun := true ;
30935: LD_ADDR_EXP 93
30939: PUSH
30940: LD_INT 1
30942: ST_TO_ADDR
// if p3 = 106 then
30943: LD_VAR 0 3
30947: PUSH
30948: LD_INT 106
30950: EQUAL
30951: IFFALSE 30961
// sTiger := true ;
30953: LD_ADDR_EXP 89
30957: PUSH
30958: LD_INT 1
30960: ST_TO_ADDR
// if p3 = 107 then
30961: LD_VAR 0 3
30965: PUSH
30966: LD_INT 107
30968: EQUAL
30969: IFFALSE 30979
// sBomb := true ;
30971: LD_ADDR_EXP 90
30975: PUSH
30976: LD_INT 1
30978: ST_TO_ADDR
// if p3 = 108 then
30979: LD_VAR 0 3
30983: PUSH
30984: LD_INT 108
30986: EQUAL
30987: IFFALSE 30997
// sWound := true ;
30989: LD_ADDR_EXP 98
30993: PUSH
30994: LD_INT 1
30996: ST_TO_ADDR
// if p3 = 109 then
30997: LD_VAR 0 3
31001: PUSH
31002: LD_INT 109
31004: EQUAL
31005: IFFALSE 31015
// sBetray := true ;
31007: LD_ADDR_EXP 102
31011: PUSH
31012: LD_INT 1
31014: ST_TO_ADDR
// if p3 = 110 then
31015: LD_VAR 0 3
31019: PUSH
31020: LD_INT 110
31022: EQUAL
31023: IFFALSE 31033
// sContamin := true ;
31025: LD_ADDR_EXP 103
31029: PUSH
31030: LD_INT 1
31032: ST_TO_ADDR
// if p3 = 111 then
31033: LD_VAR 0 3
31037: PUSH
31038: LD_INT 111
31040: EQUAL
31041: IFFALSE 31051
// sOil := true ;
31043: LD_ADDR_EXP 105
31047: PUSH
31048: LD_INT 1
31050: ST_TO_ADDR
// if p3 = 112 then
31051: LD_VAR 0 3
31055: PUSH
31056: LD_INT 112
31058: EQUAL
31059: IFFALSE 31069
// sStu := true ;
31061: LD_ADDR_EXP 109
31065: PUSH
31066: LD_INT 1
31068: ST_TO_ADDR
// if p3 = 113 then
31069: LD_VAR 0 3
31073: PUSH
31074: LD_INT 113
31076: EQUAL
31077: IFFALSE 31087
// sBazooka := true ;
31079: LD_ADDR_EXP 112
31083: PUSH
31084: LD_INT 1
31086: ST_TO_ADDR
// if p3 = 114 then
31087: LD_VAR 0 3
31091: PUSH
31092: LD_INT 114
31094: EQUAL
31095: IFFALSE 31105
// sMortar := true ;
31097: LD_ADDR_EXP 113
31101: PUSH
31102: LD_INT 1
31104: ST_TO_ADDR
// if p3 = 115 then
31105: LD_VAR 0 3
31109: PUSH
31110: LD_INT 115
31112: EQUAL
31113: IFFALSE 31123
// sRanger := true ;
31115: LD_ADDR_EXP 123
31119: PUSH
31120: LD_INT 1
31122: ST_TO_ADDR
// if p3 = 116 then
31123: LD_VAR 0 3
31127: PUSH
31128: LD_INT 116
31130: EQUAL
31131: IFFALSE 31141
// sComputer := true ;
31133: LD_ADDR_EXP 124
31137: PUSH
31138: LD_INT 1
31140: ST_TO_ADDR
// if p3 = 117 then
31141: LD_VAR 0 3
31145: PUSH
31146: LD_INT 117
31148: EQUAL
31149: IFFALSE 31159
// s30 := true ;
31151: LD_ADDR_EXP 125
31155: PUSH
31156: LD_INT 1
31158: ST_TO_ADDR
// if p3 = 118 then
31159: LD_VAR 0 3
31163: PUSH
31164: LD_INT 118
31166: EQUAL
31167: IFFALSE 31177
// s60 := true ;
31169: LD_ADDR_EXP 126
31173: PUSH
31174: LD_INT 1
31176: ST_TO_ADDR
// end ; if p2 = stream_mode then
31177: LD_VAR 0 2
31181: PUSH
31182: LD_INT 101
31184: EQUAL
31185: IFFALSE 31313
// begin case p3 of 1 :
31187: LD_VAR 0 3
31191: PUSH
31192: LD_INT 1
31194: DOUBLE
31195: EQUAL
31196: IFTRUE 31200
31198: GO 31207
31200: POP
// hHackUnlimitedResources ; 2 :
31201: CALL 43411 0 0
31205: GO 31313
31207: LD_INT 2
31209: DOUBLE
31210: EQUAL
31211: IFTRUE 31215
31213: GO 31222
31215: POP
// hHackSetLevel10 ; 3 :
31216: CALL 43544 0 0
31220: GO 31313
31222: LD_INT 3
31224: DOUBLE
31225: EQUAL
31226: IFTRUE 31230
31228: GO 31237
31230: POP
// hHackSetLevel10YourUnits ; 4 :
31231: CALL 43629 0 0
31235: GO 31313
31237: LD_INT 4
31239: DOUBLE
31240: EQUAL
31241: IFTRUE 31245
31243: GO 31252
31245: POP
// hHackInvincible ; 5 :
31246: CALL 44077 0 0
31250: GO 31313
31252: LD_INT 5
31254: DOUBLE
31255: EQUAL
31256: IFTRUE 31260
31258: GO 31267
31260: POP
// hHackInvisible ; 6 :
31261: CALL 44188 0 0
31265: GO 31313
31267: LD_INT 6
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31282
31275: POP
// hHackChangeYourSide ; 7 :
31276: CALL 44245 0 0
31280: GO 31313
31282: LD_INT 7
31284: DOUBLE
31285: EQUAL
31286: IFTRUE 31290
31288: GO 31297
31290: POP
// hHackChangeUnitSide ; 8 :
31291: CALL 44287 0 0
31295: GO 31313
31297: LD_INT 8
31299: DOUBLE
31300: EQUAL
31301: IFTRUE 31305
31303: GO 31312
31305: POP
// hHackFog ; end ;
31306: CALL 44388 0 0
31310: GO 31313
31312: POP
// end ; end ;
31313: LD_VAR 0 7
31317: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31318: GO 31320
31320: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31321: LD_STRING initStreamRollete();
31323: PPUSH
31324: CALL_OW 559
// InitStreamMode ;
31328: CALL 31340 0 0
// DefineStreamItems ( false ) ;
31332: LD_INT 0
31334: PPUSH
31335: CALL 31804 0 1
// end ;
31339: END
// function InitStreamMode ; begin
31340: LD_INT 0
31342: PPUSH
// streamModeActive := false ;
31343: LD_ADDR_EXP 70
31347: PUSH
31348: LD_INT 0
31350: ST_TO_ADDR
// normalCounter := 36 ;
31351: LD_ADDR_EXP 71
31355: PUSH
31356: LD_INT 36
31358: ST_TO_ADDR
// hardcoreCounter := 18 ;
31359: LD_ADDR_EXP 72
31363: PUSH
31364: LD_INT 18
31366: ST_TO_ADDR
// sRocket := false ;
31367: LD_ADDR_EXP 75
31371: PUSH
31372: LD_INT 0
31374: ST_TO_ADDR
// sSpeed := false ;
31375: LD_ADDR_EXP 74
31379: PUSH
31380: LD_INT 0
31382: ST_TO_ADDR
// sEngine := false ;
31383: LD_ADDR_EXP 76
31387: PUSH
31388: LD_INT 0
31390: ST_TO_ADDR
// sSpec := false ;
31391: LD_ADDR_EXP 73
31395: PUSH
31396: LD_INT 0
31398: ST_TO_ADDR
// sLevel := false ;
31399: LD_ADDR_EXP 77
31403: PUSH
31404: LD_INT 0
31406: ST_TO_ADDR
// sArmoury := false ;
31407: LD_ADDR_EXP 78
31411: PUSH
31412: LD_INT 0
31414: ST_TO_ADDR
// sRadar := false ;
31415: LD_ADDR_EXP 79
31419: PUSH
31420: LD_INT 0
31422: ST_TO_ADDR
// sBunker := false ;
31423: LD_ADDR_EXP 80
31427: PUSH
31428: LD_INT 0
31430: ST_TO_ADDR
// sHack := false ;
31431: LD_ADDR_EXP 81
31435: PUSH
31436: LD_INT 0
31438: ST_TO_ADDR
// sFire := false ;
31439: LD_ADDR_EXP 82
31443: PUSH
31444: LD_INT 0
31446: ST_TO_ADDR
// sRefresh := false ;
31447: LD_ADDR_EXP 83
31451: PUSH
31452: LD_INT 0
31454: ST_TO_ADDR
// sExp := false ;
31455: LD_ADDR_EXP 84
31459: PUSH
31460: LD_INT 0
31462: ST_TO_ADDR
// sDepot := false ;
31463: LD_ADDR_EXP 85
31467: PUSH
31468: LD_INT 0
31470: ST_TO_ADDR
// sFlag := false ;
31471: LD_ADDR_EXP 86
31475: PUSH
31476: LD_INT 0
31478: ST_TO_ADDR
// sKamikadze := false ;
31479: LD_ADDR_EXP 94
31483: PUSH
31484: LD_INT 0
31486: ST_TO_ADDR
// sTroll := false ;
31487: LD_ADDR_EXP 95
31491: PUSH
31492: LD_INT 0
31494: ST_TO_ADDR
// sSlow := false ;
31495: LD_ADDR_EXP 96
31499: PUSH
31500: LD_INT 0
31502: ST_TO_ADDR
// sLack := false ;
31503: LD_ADDR_EXP 97
31507: PUSH
31508: LD_INT 0
31510: ST_TO_ADDR
// sTank := false ;
31511: LD_ADDR_EXP 99
31515: PUSH
31516: LD_INT 0
31518: ST_TO_ADDR
// sRemote := false ;
31519: LD_ADDR_EXP 100
31523: PUSH
31524: LD_INT 0
31526: ST_TO_ADDR
// sPowell := false ;
31527: LD_ADDR_EXP 101
31531: PUSH
31532: LD_INT 0
31534: ST_TO_ADDR
// sTeleport := false ;
31535: LD_ADDR_EXP 104
31539: PUSH
31540: LD_INT 0
31542: ST_TO_ADDR
// sOilTower := false ;
31543: LD_ADDR_EXP 106
31547: PUSH
31548: LD_INT 0
31550: ST_TO_ADDR
// sShovel := false ;
31551: LD_ADDR_EXP 107
31555: PUSH
31556: LD_INT 0
31558: ST_TO_ADDR
// sSheik := false ;
31559: LD_ADDR_EXP 108
31563: PUSH
31564: LD_INT 0
31566: ST_TO_ADDR
// sEarthquake := false ;
31567: LD_ADDR_EXP 110
31571: PUSH
31572: LD_INT 0
31574: ST_TO_ADDR
// sAI := false ;
31575: LD_ADDR_EXP 111
31579: PUSH
31580: LD_INT 0
31582: ST_TO_ADDR
// sCargo := false ;
31583: LD_ADDR_EXP 114
31587: PUSH
31588: LD_INT 0
31590: ST_TO_ADDR
// sDLaser := false ;
31591: LD_ADDR_EXP 115
31595: PUSH
31596: LD_INT 0
31598: ST_TO_ADDR
// sExchange := false ;
31599: LD_ADDR_EXP 116
31603: PUSH
31604: LD_INT 0
31606: ST_TO_ADDR
// sFac := false ;
31607: LD_ADDR_EXP 117
31611: PUSH
31612: LD_INT 0
31614: ST_TO_ADDR
// sPower := false ;
31615: LD_ADDR_EXP 118
31619: PUSH
31620: LD_INT 0
31622: ST_TO_ADDR
// sRandom := false ;
31623: LD_ADDR_EXP 119
31627: PUSH
31628: LD_INT 0
31630: ST_TO_ADDR
// sShield := false ;
31631: LD_ADDR_EXP 120
31635: PUSH
31636: LD_INT 0
31638: ST_TO_ADDR
// sTime := false ;
31639: LD_ADDR_EXP 121
31643: PUSH
31644: LD_INT 0
31646: ST_TO_ADDR
// sTools := false ;
31647: LD_ADDR_EXP 122
31651: PUSH
31652: LD_INT 0
31654: ST_TO_ADDR
// sSold := false ;
31655: LD_ADDR_EXP 87
31659: PUSH
31660: LD_INT 0
31662: ST_TO_ADDR
// sDiff := false ;
31663: LD_ADDR_EXP 88
31667: PUSH
31668: LD_INT 0
31670: ST_TO_ADDR
// sFog := false ;
31671: LD_ADDR_EXP 91
31675: PUSH
31676: LD_INT 0
31678: ST_TO_ADDR
// sReset := false ;
31679: LD_ADDR_EXP 92
31683: PUSH
31684: LD_INT 0
31686: ST_TO_ADDR
// sSun := false ;
31687: LD_ADDR_EXP 93
31691: PUSH
31692: LD_INT 0
31694: ST_TO_ADDR
// sTiger := false ;
31695: LD_ADDR_EXP 89
31699: PUSH
31700: LD_INT 0
31702: ST_TO_ADDR
// sBomb := false ;
31703: LD_ADDR_EXP 90
31707: PUSH
31708: LD_INT 0
31710: ST_TO_ADDR
// sWound := false ;
31711: LD_ADDR_EXP 98
31715: PUSH
31716: LD_INT 0
31718: ST_TO_ADDR
// sBetray := false ;
31719: LD_ADDR_EXP 102
31723: PUSH
31724: LD_INT 0
31726: ST_TO_ADDR
// sContamin := false ;
31727: LD_ADDR_EXP 103
31731: PUSH
31732: LD_INT 0
31734: ST_TO_ADDR
// sOil := false ;
31735: LD_ADDR_EXP 105
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
// sStu := false ;
31743: LD_ADDR_EXP 109
31747: PUSH
31748: LD_INT 0
31750: ST_TO_ADDR
// sBazooka := false ;
31751: LD_ADDR_EXP 112
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// sMortar := false ;
31759: LD_ADDR_EXP 113
31763: PUSH
31764: LD_INT 0
31766: ST_TO_ADDR
// sRanger := false ;
31767: LD_ADDR_EXP 123
31771: PUSH
31772: LD_INT 0
31774: ST_TO_ADDR
// sComputer := false ;
31775: LD_ADDR_EXP 124
31779: PUSH
31780: LD_INT 0
31782: ST_TO_ADDR
// s30 := false ;
31783: LD_ADDR_EXP 125
31787: PUSH
31788: LD_INT 0
31790: ST_TO_ADDR
// s60 := false ;
31791: LD_ADDR_EXP 126
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// end ;
31799: LD_VAR 0 1
31803: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31804: LD_INT 0
31806: PPUSH
31807: PPUSH
31808: PPUSH
31809: PPUSH
31810: PPUSH
31811: PPUSH
31812: PPUSH
// result := [ ] ;
31813: LD_ADDR_VAR 0 2
31817: PUSH
31818: EMPTY
31819: ST_TO_ADDR
// if campaign_id = 1 then
31820: LD_OWVAR 69
31824: PUSH
31825: LD_INT 1
31827: EQUAL
31828: IFFALSE 34994
// begin case mission_number of 1 :
31830: LD_OWVAR 70
31834: PUSH
31835: LD_INT 1
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 31919
31843: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31844: LD_ADDR_VAR 0 2
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 4
31854: PUSH
31855: LD_INT 11
31857: PUSH
31858: LD_INT 12
31860: PUSH
31861: LD_INT 15
31863: PUSH
31864: LD_INT 16
31866: PUSH
31867: LD_INT 22
31869: PUSH
31870: LD_INT 23
31872: PUSH
31873: LD_INT 26
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 101
31889: PUSH
31890: LD_INT 102
31892: PUSH
31893: LD_INT 106
31895: PUSH
31896: LD_INT 116
31898: PUSH
31899: LD_INT 117
31901: PUSH
31902: LD_INT 118
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: ST_TO_ADDR
31917: GO 34992
31919: LD_INT 2
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31927
31925: GO 32011
31927: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31928: LD_ADDR_VAR 0 2
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 4
31938: PUSH
31939: LD_INT 11
31941: PUSH
31942: LD_INT 12
31944: PUSH
31945: LD_INT 15
31947: PUSH
31948: LD_INT 16
31950: PUSH
31951: LD_INT 22
31953: PUSH
31954: LD_INT 23
31956: PUSH
31957: LD_INT 26
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 101
31973: PUSH
31974: LD_INT 102
31976: PUSH
31977: LD_INT 105
31979: PUSH
31980: LD_INT 106
31982: PUSH
31983: LD_INT 108
31985: PUSH
31986: LD_INT 116
31988: PUSH
31989: LD_INT 117
31991: PUSH
31992: LD_INT 118
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: ST_TO_ADDR
32009: GO 34992
32011: LD_INT 3
32013: DOUBLE
32014: EQUAL
32015: IFTRUE 32019
32017: GO 32107
32019: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32020: LD_ADDR_VAR 0 2
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 4
32030: PUSH
32031: LD_INT 5
32033: PUSH
32034: LD_INT 11
32036: PUSH
32037: LD_INT 12
32039: PUSH
32040: LD_INT 15
32042: PUSH
32043: LD_INT 16
32045: PUSH
32046: LD_INT 22
32048: PUSH
32049: LD_INT 26
32051: PUSH
32052: LD_INT 36
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 101
32069: PUSH
32070: LD_INT 102
32072: PUSH
32073: LD_INT 105
32075: PUSH
32076: LD_INT 106
32078: PUSH
32079: LD_INT 108
32081: PUSH
32082: LD_INT 116
32084: PUSH
32085: LD_INT 117
32087: PUSH
32088: LD_INT 118
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: ST_TO_ADDR
32105: GO 34992
32107: LD_INT 4
32109: DOUBLE
32110: EQUAL
32111: IFTRUE 32115
32113: GO 32211
32115: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32116: LD_ADDR_VAR 0 2
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: LD_INT 4
32126: PUSH
32127: LD_INT 5
32129: PUSH
32130: LD_INT 8
32132: PUSH
32133: LD_INT 11
32135: PUSH
32136: LD_INT 12
32138: PUSH
32139: LD_INT 15
32141: PUSH
32142: LD_INT 16
32144: PUSH
32145: LD_INT 22
32147: PUSH
32148: LD_INT 23
32150: PUSH
32151: LD_INT 26
32153: PUSH
32154: LD_INT 36
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 101
32173: PUSH
32174: LD_INT 102
32176: PUSH
32177: LD_INT 105
32179: PUSH
32180: LD_INT 106
32182: PUSH
32183: LD_INT 108
32185: PUSH
32186: LD_INT 116
32188: PUSH
32189: LD_INT 117
32191: PUSH
32192: LD_INT 118
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: ST_TO_ADDR
32209: GO 34992
32211: LD_INT 5
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32331
32219: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32220: LD_ADDR_VAR 0 2
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: LD_INT 4
32230: PUSH
32231: LD_INT 5
32233: PUSH
32234: LD_INT 6
32236: PUSH
32237: LD_INT 8
32239: PUSH
32240: LD_INT 11
32242: PUSH
32243: LD_INT 12
32245: PUSH
32246: LD_INT 15
32248: PUSH
32249: LD_INT 16
32251: PUSH
32252: LD_INT 22
32254: PUSH
32255: LD_INT 23
32257: PUSH
32258: LD_INT 25
32260: PUSH
32261: LD_INT 26
32263: PUSH
32264: LD_INT 36
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 101
32285: PUSH
32286: LD_INT 102
32288: PUSH
32289: LD_INT 105
32291: PUSH
32292: LD_INT 106
32294: PUSH
32295: LD_INT 108
32297: PUSH
32298: LD_INT 109
32300: PUSH
32301: LD_INT 112
32303: PUSH
32304: LD_INT 116
32306: PUSH
32307: LD_INT 117
32309: PUSH
32310: LD_INT 118
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: ST_TO_ADDR
32329: GO 34992
32331: LD_INT 6
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32339
32337: GO 32471
32339: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32340: LD_ADDR_VAR 0 2
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 5
32353: PUSH
32354: LD_INT 6
32356: PUSH
32357: LD_INT 8
32359: PUSH
32360: LD_INT 11
32362: PUSH
32363: LD_INT 12
32365: PUSH
32366: LD_INT 15
32368: PUSH
32369: LD_INT 16
32371: PUSH
32372: LD_INT 20
32374: PUSH
32375: LD_INT 21
32377: PUSH
32378: LD_INT 22
32380: PUSH
32381: LD_INT 23
32383: PUSH
32384: LD_INT 25
32386: PUSH
32387: LD_INT 26
32389: PUSH
32390: LD_INT 30
32392: PUSH
32393: LD_INT 31
32395: PUSH
32396: LD_INT 32
32398: PUSH
32399: LD_INT 36
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 101
32425: PUSH
32426: LD_INT 102
32428: PUSH
32429: LD_INT 105
32431: PUSH
32432: LD_INT 106
32434: PUSH
32435: LD_INT 108
32437: PUSH
32438: LD_INT 109
32440: PUSH
32441: LD_INT 112
32443: PUSH
32444: LD_INT 116
32446: PUSH
32447: LD_INT 117
32449: PUSH
32450: LD_INT 118
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: ST_TO_ADDR
32469: GO 34992
32471: LD_INT 7
32473: DOUBLE
32474: EQUAL
32475: IFTRUE 32479
32477: GO 32591
32479: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32480: LD_ADDR_VAR 0 2
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 4
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: LD_INT 7
32496: PUSH
32497: LD_INT 11
32499: PUSH
32500: LD_INT 12
32502: PUSH
32503: LD_INT 15
32505: PUSH
32506: LD_INT 16
32508: PUSH
32509: LD_INT 20
32511: PUSH
32512: LD_INT 21
32514: PUSH
32515: LD_INT 22
32517: PUSH
32518: LD_INT 23
32520: PUSH
32521: LD_INT 25
32523: PUSH
32524: LD_INT 26
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 101
32545: PUSH
32546: LD_INT 102
32548: PUSH
32549: LD_INT 103
32551: PUSH
32552: LD_INT 105
32554: PUSH
32555: LD_INT 106
32557: PUSH
32558: LD_INT 108
32560: PUSH
32561: LD_INT 112
32563: PUSH
32564: LD_INT 116
32566: PUSH
32567: LD_INT 117
32569: PUSH
32570: LD_INT 118
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: ST_TO_ADDR
32589: GO 34992
32591: LD_INT 8
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32599
32597: GO 32739
32599: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32600: LD_ADDR_VAR 0 2
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 4
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: LD_INT 6
32616: PUSH
32617: LD_INT 7
32619: PUSH
32620: LD_INT 8
32622: PUSH
32623: LD_INT 11
32625: PUSH
32626: LD_INT 12
32628: PUSH
32629: LD_INT 15
32631: PUSH
32632: LD_INT 16
32634: PUSH
32635: LD_INT 20
32637: PUSH
32638: LD_INT 21
32640: PUSH
32641: LD_INT 22
32643: PUSH
32644: LD_INT 23
32646: PUSH
32647: LD_INT 25
32649: PUSH
32650: LD_INT 26
32652: PUSH
32653: LD_INT 30
32655: PUSH
32656: LD_INT 31
32658: PUSH
32659: LD_INT 32
32661: PUSH
32662: LD_INT 36
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 101
32689: PUSH
32690: LD_INT 102
32692: PUSH
32693: LD_INT 103
32695: PUSH
32696: LD_INT 105
32698: PUSH
32699: LD_INT 106
32701: PUSH
32702: LD_INT 108
32704: PUSH
32705: LD_INT 109
32707: PUSH
32708: LD_INT 112
32710: PUSH
32711: LD_INT 116
32713: PUSH
32714: LD_INT 117
32716: PUSH
32717: LD_INT 118
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: ST_TO_ADDR
32737: GO 34992
32739: LD_INT 9
32741: DOUBLE
32742: EQUAL
32743: IFTRUE 32747
32745: GO 32895
32747: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32748: LD_ADDR_VAR 0 2
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 4
32758: PUSH
32759: LD_INT 5
32761: PUSH
32762: LD_INT 6
32764: PUSH
32765: LD_INT 7
32767: PUSH
32768: LD_INT 8
32770: PUSH
32771: LD_INT 11
32773: PUSH
32774: LD_INT 12
32776: PUSH
32777: LD_INT 15
32779: PUSH
32780: LD_INT 16
32782: PUSH
32783: LD_INT 20
32785: PUSH
32786: LD_INT 21
32788: PUSH
32789: LD_INT 22
32791: PUSH
32792: LD_INT 23
32794: PUSH
32795: LD_INT 25
32797: PUSH
32798: LD_INT 26
32800: PUSH
32801: LD_INT 28
32803: PUSH
32804: LD_INT 30
32806: PUSH
32807: LD_INT 31
32809: PUSH
32810: LD_INT 32
32812: PUSH
32813: LD_INT 36
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 101
32841: PUSH
32842: LD_INT 102
32844: PUSH
32845: LD_INT 103
32847: PUSH
32848: LD_INT 105
32850: PUSH
32851: LD_INT 106
32853: PUSH
32854: LD_INT 108
32856: PUSH
32857: LD_INT 109
32859: PUSH
32860: LD_INT 112
32862: PUSH
32863: LD_INT 114
32865: PUSH
32866: LD_INT 116
32868: PUSH
32869: LD_INT 117
32871: PUSH
32872: LD_INT 118
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: ST_TO_ADDR
32893: GO 34992
32895: LD_INT 10
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 33099
32903: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32904: LD_ADDR_VAR 0 2
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: LD_INT 4
32914: PUSH
32915: LD_INT 5
32917: PUSH
32918: LD_INT 6
32920: PUSH
32921: LD_INT 7
32923: PUSH
32924: LD_INT 8
32926: PUSH
32927: LD_INT 9
32929: PUSH
32930: LD_INT 10
32932: PUSH
32933: LD_INT 11
32935: PUSH
32936: LD_INT 12
32938: PUSH
32939: LD_INT 13
32941: PUSH
32942: LD_INT 14
32944: PUSH
32945: LD_INT 15
32947: PUSH
32948: LD_INT 16
32950: PUSH
32951: LD_INT 17
32953: PUSH
32954: LD_INT 18
32956: PUSH
32957: LD_INT 19
32959: PUSH
32960: LD_INT 20
32962: PUSH
32963: LD_INT 21
32965: PUSH
32966: LD_INT 22
32968: PUSH
32969: LD_INT 23
32971: PUSH
32972: LD_INT 24
32974: PUSH
32975: LD_INT 25
32977: PUSH
32978: LD_INT 26
32980: PUSH
32981: LD_INT 28
32983: PUSH
32984: LD_INT 30
32986: PUSH
32987: LD_INT 31
32989: PUSH
32990: LD_INT 32
32992: PUSH
32993: LD_INT 36
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 101
33029: PUSH
33030: LD_INT 102
33032: PUSH
33033: LD_INT 103
33035: PUSH
33036: LD_INT 104
33038: PUSH
33039: LD_INT 105
33041: PUSH
33042: LD_INT 106
33044: PUSH
33045: LD_INT 107
33047: PUSH
33048: LD_INT 108
33050: PUSH
33051: LD_INT 109
33053: PUSH
33054: LD_INT 110
33056: PUSH
33057: LD_INT 111
33059: PUSH
33060: LD_INT 112
33062: PUSH
33063: LD_INT 114
33065: PUSH
33066: LD_INT 116
33068: PUSH
33069: LD_INT 117
33071: PUSH
33072: LD_INT 118
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: ST_TO_ADDR
33097: GO 34992
33099: LD_INT 11
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33311
33107: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33108: LD_ADDR_VAR 0 2
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: LD_INT 4
33121: PUSH
33122: LD_INT 5
33124: PUSH
33125: LD_INT 6
33127: PUSH
33128: LD_INT 7
33130: PUSH
33131: LD_INT 8
33133: PUSH
33134: LD_INT 9
33136: PUSH
33137: LD_INT 10
33139: PUSH
33140: LD_INT 11
33142: PUSH
33143: LD_INT 12
33145: PUSH
33146: LD_INT 13
33148: PUSH
33149: LD_INT 14
33151: PUSH
33152: LD_INT 15
33154: PUSH
33155: LD_INT 16
33157: PUSH
33158: LD_INT 17
33160: PUSH
33161: LD_INT 18
33163: PUSH
33164: LD_INT 19
33166: PUSH
33167: LD_INT 20
33169: PUSH
33170: LD_INT 21
33172: PUSH
33173: LD_INT 22
33175: PUSH
33176: LD_INT 23
33178: PUSH
33179: LD_INT 24
33181: PUSH
33182: LD_INT 25
33184: PUSH
33185: LD_INT 26
33187: PUSH
33188: LD_INT 28
33190: PUSH
33191: LD_INT 30
33193: PUSH
33194: LD_INT 31
33196: PUSH
33197: LD_INT 32
33199: PUSH
33200: LD_INT 34
33202: PUSH
33203: LD_INT 36
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 101
33241: PUSH
33242: LD_INT 102
33244: PUSH
33245: LD_INT 103
33247: PUSH
33248: LD_INT 104
33250: PUSH
33251: LD_INT 105
33253: PUSH
33254: LD_INT 106
33256: PUSH
33257: LD_INT 107
33259: PUSH
33260: LD_INT 108
33262: PUSH
33263: LD_INT 109
33265: PUSH
33266: LD_INT 110
33268: PUSH
33269: LD_INT 111
33271: PUSH
33272: LD_INT 112
33274: PUSH
33275: LD_INT 114
33277: PUSH
33278: LD_INT 116
33280: PUSH
33281: LD_INT 117
33283: PUSH
33284: LD_INT 118
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: ST_TO_ADDR
33309: GO 34992
33311: LD_INT 12
33313: DOUBLE
33314: EQUAL
33315: IFTRUE 33319
33317: GO 33539
33319: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33320: LD_ADDR_VAR 0 2
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: LD_INT 3
33333: PUSH
33334: LD_INT 4
33336: PUSH
33337: LD_INT 5
33339: PUSH
33340: LD_INT 6
33342: PUSH
33343: LD_INT 7
33345: PUSH
33346: LD_INT 8
33348: PUSH
33349: LD_INT 9
33351: PUSH
33352: LD_INT 10
33354: PUSH
33355: LD_INT 11
33357: PUSH
33358: LD_INT 12
33360: PUSH
33361: LD_INT 13
33363: PUSH
33364: LD_INT 14
33366: PUSH
33367: LD_INT 15
33369: PUSH
33370: LD_INT 16
33372: PUSH
33373: LD_INT 17
33375: PUSH
33376: LD_INT 18
33378: PUSH
33379: LD_INT 19
33381: PUSH
33382: LD_INT 20
33384: PUSH
33385: LD_INT 21
33387: PUSH
33388: LD_INT 22
33390: PUSH
33391: LD_INT 23
33393: PUSH
33394: LD_INT 24
33396: PUSH
33397: LD_INT 25
33399: PUSH
33400: LD_INT 26
33402: PUSH
33403: LD_INT 27
33405: PUSH
33406: LD_INT 28
33408: PUSH
33409: LD_INT 30
33411: PUSH
33412: LD_INT 31
33414: PUSH
33415: LD_INT 32
33417: PUSH
33418: LD_INT 33
33420: PUSH
33421: LD_INT 34
33423: PUSH
33424: LD_INT 36
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 101
33465: PUSH
33466: LD_INT 102
33468: PUSH
33469: LD_INT 103
33471: PUSH
33472: LD_INT 104
33474: PUSH
33475: LD_INT 105
33477: PUSH
33478: LD_INT 106
33480: PUSH
33481: LD_INT 107
33483: PUSH
33484: LD_INT 108
33486: PUSH
33487: LD_INT 109
33489: PUSH
33490: LD_INT 110
33492: PUSH
33493: LD_INT 111
33495: PUSH
33496: LD_INT 112
33498: PUSH
33499: LD_INT 113
33501: PUSH
33502: LD_INT 114
33504: PUSH
33505: LD_INT 116
33507: PUSH
33508: LD_INT 117
33510: PUSH
33511: LD_INT 118
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: ST_TO_ADDR
33537: GO 34992
33539: LD_INT 13
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33755
33547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33548: LD_ADDR_VAR 0 2
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 2
33558: PUSH
33559: LD_INT 3
33561: PUSH
33562: LD_INT 4
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: LD_INT 8
33570: PUSH
33571: LD_INT 9
33573: PUSH
33574: LD_INT 10
33576: PUSH
33577: LD_INT 11
33579: PUSH
33580: LD_INT 12
33582: PUSH
33583: LD_INT 14
33585: PUSH
33586: LD_INT 15
33588: PUSH
33589: LD_INT 16
33591: PUSH
33592: LD_INT 17
33594: PUSH
33595: LD_INT 18
33597: PUSH
33598: LD_INT 19
33600: PUSH
33601: LD_INT 20
33603: PUSH
33604: LD_INT 21
33606: PUSH
33607: LD_INT 22
33609: PUSH
33610: LD_INT 23
33612: PUSH
33613: LD_INT 24
33615: PUSH
33616: LD_INT 25
33618: PUSH
33619: LD_INT 26
33621: PUSH
33622: LD_INT 27
33624: PUSH
33625: LD_INT 28
33627: PUSH
33628: LD_INT 30
33630: PUSH
33631: LD_INT 31
33633: PUSH
33634: LD_INT 32
33636: PUSH
33637: LD_INT 33
33639: PUSH
33640: LD_INT 34
33642: PUSH
33643: LD_INT 36
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 101
33681: PUSH
33682: LD_INT 102
33684: PUSH
33685: LD_INT 103
33687: PUSH
33688: LD_INT 104
33690: PUSH
33691: LD_INT 105
33693: PUSH
33694: LD_INT 106
33696: PUSH
33697: LD_INT 107
33699: PUSH
33700: LD_INT 108
33702: PUSH
33703: LD_INT 109
33705: PUSH
33706: LD_INT 110
33708: PUSH
33709: LD_INT 111
33711: PUSH
33712: LD_INT 112
33714: PUSH
33715: LD_INT 113
33717: PUSH
33718: LD_INT 114
33720: PUSH
33721: LD_INT 116
33723: PUSH
33724: LD_INT 117
33726: PUSH
33727: LD_INT 118
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: ST_TO_ADDR
33753: GO 34992
33755: LD_INT 14
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33763
33761: GO 33987
33763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33764: LD_ADDR_VAR 0 2
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 4
33780: PUSH
33781: LD_INT 5
33783: PUSH
33784: LD_INT 6
33786: PUSH
33787: LD_INT 7
33789: PUSH
33790: LD_INT 8
33792: PUSH
33793: LD_INT 9
33795: PUSH
33796: LD_INT 10
33798: PUSH
33799: LD_INT 11
33801: PUSH
33802: LD_INT 12
33804: PUSH
33805: LD_INT 13
33807: PUSH
33808: LD_INT 14
33810: PUSH
33811: LD_INT 15
33813: PUSH
33814: LD_INT 16
33816: PUSH
33817: LD_INT 17
33819: PUSH
33820: LD_INT 18
33822: PUSH
33823: LD_INT 19
33825: PUSH
33826: LD_INT 20
33828: PUSH
33829: LD_INT 21
33831: PUSH
33832: LD_INT 22
33834: PUSH
33835: LD_INT 23
33837: PUSH
33838: LD_INT 24
33840: PUSH
33841: LD_INT 25
33843: PUSH
33844: LD_INT 26
33846: PUSH
33847: LD_INT 27
33849: PUSH
33850: LD_INT 28
33852: PUSH
33853: LD_INT 29
33855: PUSH
33856: LD_INT 30
33858: PUSH
33859: LD_INT 31
33861: PUSH
33862: LD_INT 32
33864: PUSH
33865: LD_INT 33
33867: PUSH
33868: LD_INT 34
33870: PUSH
33871: LD_INT 36
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 101
33913: PUSH
33914: LD_INT 102
33916: PUSH
33917: LD_INT 103
33919: PUSH
33920: LD_INT 104
33922: PUSH
33923: LD_INT 105
33925: PUSH
33926: LD_INT 106
33928: PUSH
33929: LD_INT 107
33931: PUSH
33932: LD_INT 108
33934: PUSH
33935: LD_INT 109
33937: PUSH
33938: LD_INT 110
33940: PUSH
33941: LD_INT 111
33943: PUSH
33944: LD_INT 112
33946: PUSH
33947: LD_INT 113
33949: PUSH
33950: LD_INT 114
33952: PUSH
33953: LD_INT 116
33955: PUSH
33956: LD_INT 117
33958: PUSH
33959: LD_INT 118
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: ST_TO_ADDR
33985: GO 34992
33987: LD_INT 15
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 33995
33993: GO 34219
33995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
33996: LD_ADDR_VAR 0 2
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 3
34009: PUSH
34010: LD_INT 4
34012: PUSH
34013: LD_INT 5
34015: PUSH
34016: LD_INT 6
34018: PUSH
34019: LD_INT 7
34021: PUSH
34022: LD_INT 8
34024: PUSH
34025: LD_INT 9
34027: PUSH
34028: LD_INT 10
34030: PUSH
34031: LD_INT 11
34033: PUSH
34034: LD_INT 12
34036: PUSH
34037: LD_INT 13
34039: PUSH
34040: LD_INT 14
34042: PUSH
34043: LD_INT 15
34045: PUSH
34046: LD_INT 16
34048: PUSH
34049: LD_INT 17
34051: PUSH
34052: LD_INT 18
34054: PUSH
34055: LD_INT 19
34057: PUSH
34058: LD_INT 20
34060: PUSH
34061: LD_INT 21
34063: PUSH
34064: LD_INT 22
34066: PUSH
34067: LD_INT 23
34069: PUSH
34070: LD_INT 24
34072: PUSH
34073: LD_INT 25
34075: PUSH
34076: LD_INT 26
34078: PUSH
34079: LD_INT 27
34081: PUSH
34082: LD_INT 28
34084: PUSH
34085: LD_INT 29
34087: PUSH
34088: LD_INT 30
34090: PUSH
34091: LD_INT 31
34093: PUSH
34094: LD_INT 32
34096: PUSH
34097: LD_INT 33
34099: PUSH
34100: LD_INT 34
34102: PUSH
34103: LD_INT 36
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 101
34145: PUSH
34146: LD_INT 102
34148: PUSH
34149: LD_INT 103
34151: PUSH
34152: LD_INT 104
34154: PUSH
34155: LD_INT 105
34157: PUSH
34158: LD_INT 106
34160: PUSH
34161: LD_INT 107
34163: PUSH
34164: LD_INT 108
34166: PUSH
34167: LD_INT 109
34169: PUSH
34170: LD_INT 110
34172: PUSH
34173: LD_INT 111
34175: PUSH
34176: LD_INT 112
34178: PUSH
34179: LD_INT 113
34181: PUSH
34182: LD_INT 114
34184: PUSH
34185: LD_INT 116
34187: PUSH
34188: LD_INT 117
34190: PUSH
34191: LD_INT 118
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: ST_TO_ADDR
34217: GO 34992
34219: LD_INT 16
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34363
34227: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34228: LD_ADDR_VAR 0 2
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: LD_INT 4
34238: PUSH
34239: LD_INT 5
34241: PUSH
34242: LD_INT 7
34244: PUSH
34245: LD_INT 11
34247: PUSH
34248: LD_INT 12
34250: PUSH
34251: LD_INT 15
34253: PUSH
34254: LD_INT 16
34256: PUSH
34257: LD_INT 20
34259: PUSH
34260: LD_INT 21
34262: PUSH
34263: LD_INT 22
34265: PUSH
34266: LD_INT 23
34268: PUSH
34269: LD_INT 25
34271: PUSH
34272: LD_INT 26
34274: PUSH
34275: LD_INT 30
34277: PUSH
34278: LD_INT 31
34280: PUSH
34281: LD_INT 32
34283: PUSH
34284: LD_INT 33
34286: PUSH
34287: LD_INT 34
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 101
34313: PUSH
34314: LD_INT 102
34316: PUSH
34317: LD_INT 103
34319: PUSH
34320: LD_INT 106
34322: PUSH
34323: LD_INT 108
34325: PUSH
34326: LD_INT 112
34328: PUSH
34329: LD_INT 113
34331: PUSH
34332: LD_INT 114
34334: PUSH
34335: LD_INT 116
34337: PUSH
34338: LD_INT 117
34340: PUSH
34341: LD_INT 118
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: ST_TO_ADDR
34361: GO 34992
34363: LD_INT 17
34365: DOUBLE
34366: EQUAL
34367: IFTRUE 34371
34369: GO 34595
34371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34372: LD_ADDR_VAR 0 2
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 3
34385: PUSH
34386: LD_INT 4
34388: PUSH
34389: LD_INT 5
34391: PUSH
34392: LD_INT 6
34394: PUSH
34395: LD_INT 7
34397: PUSH
34398: LD_INT 8
34400: PUSH
34401: LD_INT 9
34403: PUSH
34404: LD_INT 10
34406: PUSH
34407: LD_INT 11
34409: PUSH
34410: LD_INT 12
34412: PUSH
34413: LD_INT 13
34415: PUSH
34416: LD_INT 14
34418: PUSH
34419: LD_INT 15
34421: PUSH
34422: LD_INT 16
34424: PUSH
34425: LD_INT 17
34427: PUSH
34428: LD_INT 18
34430: PUSH
34431: LD_INT 19
34433: PUSH
34434: LD_INT 20
34436: PUSH
34437: LD_INT 21
34439: PUSH
34440: LD_INT 22
34442: PUSH
34443: LD_INT 23
34445: PUSH
34446: LD_INT 24
34448: PUSH
34449: LD_INT 25
34451: PUSH
34452: LD_INT 26
34454: PUSH
34455: LD_INT 27
34457: PUSH
34458: LD_INT 28
34460: PUSH
34461: LD_INT 29
34463: PUSH
34464: LD_INT 30
34466: PUSH
34467: LD_INT 31
34469: PUSH
34470: LD_INT 32
34472: PUSH
34473: LD_INT 33
34475: PUSH
34476: LD_INT 34
34478: PUSH
34479: LD_INT 36
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 101
34521: PUSH
34522: LD_INT 102
34524: PUSH
34525: LD_INT 103
34527: PUSH
34528: LD_INT 104
34530: PUSH
34531: LD_INT 105
34533: PUSH
34534: LD_INT 106
34536: PUSH
34537: LD_INT 107
34539: PUSH
34540: LD_INT 108
34542: PUSH
34543: LD_INT 109
34545: PUSH
34546: LD_INT 110
34548: PUSH
34549: LD_INT 111
34551: PUSH
34552: LD_INT 112
34554: PUSH
34555: LD_INT 113
34557: PUSH
34558: LD_INT 114
34560: PUSH
34561: LD_INT 116
34563: PUSH
34564: LD_INT 117
34566: PUSH
34567: LD_INT 118
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: ST_TO_ADDR
34593: GO 34992
34595: LD_INT 18
34597: DOUBLE
34598: EQUAL
34599: IFTRUE 34603
34601: GO 34751
34603: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34604: LD_ADDR_VAR 0 2
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: LD_INT 5
34617: PUSH
34618: LD_INT 7
34620: PUSH
34621: LD_INT 11
34623: PUSH
34624: LD_INT 12
34626: PUSH
34627: LD_INT 15
34629: PUSH
34630: LD_INT 16
34632: PUSH
34633: LD_INT 20
34635: PUSH
34636: LD_INT 21
34638: PUSH
34639: LD_INT 22
34641: PUSH
34642: LD_INT 23
34644: PUSH
34645: LD_INT 25
34647: PUSH
34648: LD_INT 26
34650: PUSH
34651: LD_INT 30
34653: PUSH
34654: LD_INT 31
34656: PUSH
34657: LD_INT 32
34659: PUSH
34660: LD_INT 33
34662: PUSH
34663: LD_INT 34
34665: PUSH
34666: LD_INT 35
34668: PUSH
34669: LD_INT 36
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 101
34697: PUSH
34698: LD_INT 102
34700: PUSH
34701: LD_INT 103
34703: PUSH
34704: LD_INT 106
34706: PUSH
34707: LD_INT 108
34709: PUSH
34710: LD_INT 112
34712: PUSH
34713: LD_INT 113
34715: PUSH
34716: LD_INT 114
34718: PUSH
34719: LD_INT 115
34721: PUSH
34722: LD_INT 116
34724: PUSH
34725: LD_INT 117
34727: PUSH
34728: LD_INT 118
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: ST_TO_ADDR
34749: GO 34992
34751: LD_INT 19
34753: DOUBLE
34754: EQUAL
34755: IFTRUE 34759
34757: GO 34991
34759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34760: LD_ADDR_VAR 0 2
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: LD_INT 4
34776: PUSH
34777: LD_INT 5
34779: PUSH
34780: LD_INT 6
34782: PUSH
34783: LD_INT 7
34785: PUSH
34786: LD_INT 8
34788: PUSH
34789: LD_INT 9
34791: PUSH
34792: LD_INT 10
34794: PUSH
34795: LD_INT 11
34797: PUSH
34798: LD_INT 12
34800: PUSH
34801: LD_INT 13
34803: PUSH
34804: LD_INT 14
34806: PUSH
34807: LD_INT 15
34809: PUSH
34810: LD_INT 16
34812: PUSH
34813: LD_INT 17
34815: PUSH
34816: LD_INT 18
34818: PUSH
34819: LD_INT 19
34821: PUSH
34822: LD_INT 20
34824: PUSH
34825: LD_INT 21
34827: PUSH
34828: LD_INT 22
34830: PUSH
34831: LD_INT 23
34833: PUSH
34834: LD_INT 24
34836: PUSH
34837: LD_INT 25
34839: PUSH
34840: LD_INT 26
34842: PUSH
34843: LD_INT 27
34845: PUSH
34846: LD_INT 28
34848: PUSH
34849: LD_INT 29
34851: PUSH
34852: LD_INT 30
34854: PUSH
34855: LD_INT 31
34857: PUSH
34858: LD_INT 32
34860: PUSH
34861: LD_INT 33
34863: PUSH
34864: LD_INT 34
34866: PUSH
34867: LD_INT 35
34869: PUSH
34870: LD_INT 36
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 101
34913: PUSH
34914: LD_INT 102
34916: PUSH
34917: LD_INT 103
34919: PUSH
34920: LD_INT 104
34922: PUSH
34923: LD_INT 105
34925: PUSH
34926: LD_INT 106
34928: PUSH
34929: LD_INT 107
34931: PUSH
34932: LD_INT 108
34934: PUSH
34935: LD_INT 109
34937: PUSH
34938: LD_INT 110
34940: PUSH
34941: LD_INT 111
34943: PUSH
34944: LD_INT 112
34946: PUSH
34947: LD_INT 113
34949: PUSH
34950: LD_INT 114
34952: PUSH
34953: LD_INT 115
34955: PUSH
34956: LD_INT 116
34958: PUSH
34959: LD_INT 117
34961: PUSH
34962: LD_INT 118
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: ST_TO_ADDR
34989: GO 34992
34991: POP
// end else
34992: GO 35223
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
34994: LD_ADDR_VAR 0 2
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: LD_INT 4
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: LD_INT 6
35016: PUSH
35017: LD_INT 7
35019: PUSH
35020: LD_INT 8
35022: PUSH
35023: LD_INT 9
35025: PUSH
35026: LD_INT 10
35028: PUSH
35029: LD_INT 11
35031: PUSH
35032: LD_INT 12
35034: PUSH
35035: LD_INT 13
35037: PUSH
35038: LD_INT 14
35040: PUSH
35041: LD_INT 15
35043: PUSH
35044: LD_INT 16
35046: PUSH
35047: LD_INT 17
35049: PUSH
35050: LD_INT 18
35052: PUSH
35053: LD_INT 19
35055: PUSH
35056: LD_INT 20
35058: PUSH
35059: LD_INT 21
35061: PUSH
35062: LD_INT 22
35064: PUSH
35065: LD_INT 23
35067: PUSH
35068: LD_INT 24
35070: PUSH
35071: LD_INT 25
35073: PUSH
35074: LD_INT 26
35076: PUSH
35077: LD_INT 27
35079: PUSH
35080: LD_INT 28
35082: PUSH
35083: LD_INT 29
35085: PUSH
35086: LD_INT 30
35088: PUSH
35089: LD_INT 31
35091: PUSH
35092: LD_INT 32
35094: PUSH
35095: LD_INT 33
35097: PUSH
35098: LD_INT 34
35100: PUSH
35101: LD_INT 35
35103: PUSH
35104: LD_INT 36
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 101
35147: PUSH
35148: LD_INT 102
35150: PUSH
35151: LD_INT 103
35153: PUSH
35154: LD_INT 104
35156: PUSH
35157: LD_INT 105
35159: PUSH
35160: LD_INT 106
35162: PUSH
35163: LD_INT 107
35165: PUSH
35166: LD_INT 108
35168: PUSH
35169: LD_INT 109
35171: PUSH
35172: LD_INT 110
35174: PUSH
35175: LD_INT 111
35177: PUSH
35178: LD_INT 112
35180: PUSH
35181: LD_INT 113
35183: PUSH
35184: LD_INT 114
35186: PUSH
35187: LD_INT 115
35189: PUSH
35190: LD_INT 116
35192: PUSH
35193: LD_INT 117
35195: PUSH
35196: LD_INT 118
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: ST_TO_ADDR
// if result then
35223: LD_VAR 0 2
35227: IFFALSE 36013
// begin normal :=  ;
35229: LD_ADDR_VAR 0 5
35233: PUSH
35234: LD_STRING 
35236: ST_TO_ADDR
// hardcore :=  ;
35237: LD_ADDR_VAR 0 6
35241: PUSH
35242: LD_STRING 
35244: ST_TO_ADDR
// active :=  ;
35245: LD_ADDR_VAR 0 7
35249: PUSH
35250: LD_STRING 
35252: ST_TO_ADDR
// for i = 1 to normalCounter do
35253: LD_ADDR_VAR 0 8
35257: PUSH
35258: DOUBLE
35259: LD_INT 1
35261: DEC
35262: ST_TO_ADDR
35263: LD_EXP 71
35267: PUSH
35268: FOR_TO
35269: IFFALSE 35370
// begin tmp := 0 ;
35271: LD_ADDR_VAR 0 3
35275: PUSH
35276: LD_STRING 0
35278: ST_TO_ADDR
// if result [ 1 ] then
35279: LD_VAR 0 2
35283: PUSH
35284: LD_INT 1
35286: ARRAY
35287: IFFALSE 35352
// if result [ 1 ] [ 1 ] = i then
35289: LD_VAR 0 2
35293: PUSH
35294: LD_INT 1
35296: ARRAY
35297: PUSH
35298: LD_INT 1
35300: ARRAY
35301: PUSH
35302: LD_VAR 0 8
35306: EQUAL
35307: IFFALSE 35352
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35309: LD_ADDR_VAR 0 2
35313: PUSH
35314: LD_VAR 0 2
35318: PPUSH
35319: LD_INT 1
35321: PPUSH
35322: LD_VAR 0 2
35326: PUSH
35327: LD_INT 1
35329: ARRAY
35330: PPUSH
35331: LD_INT 1
35333: PPUSH
35334: CALL_OW 3
35338: PPUSH
35339: CALL_OW 1
35343: ST_TO_ADDR
// tmp := 1 ;
35344: LD_ADDR_VAR 0 3
35348: PUSH
35349: LD_STRING 1
35351: ST_TO_ADDR
// end ; normal := normal & tmp ;
35352: LD_ADDR_VAR 0 5
35356: PUSH
35357: LD_VAR 0 5
35361: PUSH
35362: LD_VAR 0 3
35366: STR
35367: ST_TO_ADDR
// end ;
35368: GO 35268
35370: POP
35371: POP
// for i = 1 to hardcoreCounter do
35372: LD_ADDR_VAR 0 8
35376: PUSH
35377: DOUBLE
35378: LD_INT 1
35380: DEC
35381: ST_TO_ADDR
35382: LD_EXP 72
35386: PUSH
35387: FOR_TO
35388: IFFALSE 35493
// begin tmp := 0 ;
35390: LD_ADDR_VAR 0 3
35394: PUSH
35395: LD_STRING 0
35397: ST_TO_ADDR
// if result [ 2 ] then
35398: LD_VAR 0 2
35402: PUSH
35403: LD_INT 2
35405: ARRAY
35406: IFFALSE 35475
// if result [ 2 ] [ 1 ] = 100 + i then
35408: LD_VAR 0 2
35412: PUSH
35413: LD_INT 2
35415: ARRAY
35416: PUSH
35417: LD_INT 1
35419: ARRAY
35420: PUSH
35421: LD_INT 100
35423: PUSH
35424: LD_VAR 0 8
35428: PLUS
35429: EQUAL
35430: IFFALSE 35475
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35432: LD_ADDR_VAR 0 2
35436: PUSH
35437: LD_VAR 0 2
35441: PPUSH
35442: LD_INT 2
35444: PPUSH
35445: LD_VAR 0 2
35449: PUSH
35450: LD_INT 2
35452: ARRAY
35453: PPUSH
35454: LD_INT 1
35456: PPUSH
35457: CALL_OW 3
35461: PPUSH
35462: CALL_OW 1
35466: ST_TO_ADDR
// tmp := 1 ;
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_STRING 1
35474: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35475: LD_ADDR_VAR 0 6
35479: PUSH
35480: LD_VAR 0 6
35484: PUSH
35485: LD_VAR 0 3
35489: STR
35490: ST_TO_ADDR
// end ;
35491: GO 35387
35493: POP
35494: POP
// if isGameLoad then
35495: LD_VAR 0 1
35499: IFFALSE 35974
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35501: LD_ADDR_VAR 0 4
35505: PUSH
35506: LD_EXP 75
35510: PUSH
35511: LD_EXP 74
35515: PUSH
35516: LD_EXP 76
35520: PUSH
35521: LD_EXP 73
35525: PUSH
35526: LD_EXP 77
35530: PUSH
35531: LD_EXP 78
35535: PUSH
35536: LD_EXP 79
35540: PUSH
35541: LD_EXP 80
35545: PUSH
35546: LD_EXP 81
35550: PUSH
35551: LD_EXP 82
35555: PUSH
35556: LD_EXP 83
35560: PUSH
35561: LD_EXP 84
35565: PUSH
35566: LD_EXP 85
35570: PUSH
35571: LD_EXP 86
35575: PUSH
35576: LD_EXP 94
35580: PUSH
35581: LD_EXP 95
35585: PUSH
35586: LD_EXP 96
35590: PUSH
35591: LD_EXP 97
35595: PUSH
35596: LD_EXP 99
35600: PUSH
35601: LD_EXP 100
35605: PUSH
35606: LD_EXP 101
35610: PUSH
35611: LD_EXP 104
35615: PUSH
35616: LD_EXP 106
35620: PUSH
35621: LD_EXP 107
35625: PUSH
35626: LD_EXP 108
35630: PUSH
35631: LD_EXP 110
35635: PUSH
35636: LD_EXP 111
35640: PUSH
35641: LD_EXP 114
35645: PUSH
35646: LD_EXP 115
35650: PUSH
35651: LD_EXP 116
35655: PUSH
35656: LD_EXP 117
35660: PUSH
35661: LD_EXP 118
35665: PUSH
35666: LD_EXP 119
35670: PUSH
35671: LD_EXP 120
35675: PUSH
35676: LD_EXP 121
35680: PUSH
35681: LD_EXP 122
35685: PUSH
35686: LD_EXP 87
35690: PUSH
35691: LD_EXP 88
35695: PUSH
35696: LD_EXP 91
35700: PUSH
35701: LD_EXP 92
35705: PUSH
35706: LD_EXP 93
35710: PUSH
35711: LD_EXP 89
35715: PUSH
35716: LD_EXP 90
35720: PUSH
35721: LD_EXP 98
35725: PUSH
35726: LD_EXP 102
35730: PUSH
35731: LD_EXP 103
35735: PUSH
35736: LD_EXP 105
35740: PUSH
35741: LD_EXP 109
35745: PUSH
35746: LD_EXP 112
35750: PUSH
35751: LD_EXP 113
35755: PUSH
35756: LD_EXP 123
35760: PUSH
35761: LD_EXP 124
35765: PUSH
35766: LD_EXP 125
35770: PUSH
35771: LD_EXP 126
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
// tmp :=  ;
35832: LD_ADDR_VAR 0 3
35836: PUSH
35837: LD_STRING 
35839: ST_TO_ADDR
// for i = 1 to normalCounter do
35840: LD_ADDR_VAR 0 8
35844: PUSH
35845: DOUBLE
35846: LD_INT 1
35848: DEC
35849: ST_TO_ADDR
35850: LD_EXP 71
35854: PUSH
35855: FOR_TO
35856: IFFALSE 35892
// begin if flags [ i ] then
35858: LD_VAR 0 4
35862: PUSH
35863: LD_VAR 0 8
35867: ARRAY
35868: IFFALSE 35890
// tmp := tmp & i & ; ;
35870: LD_ADDR_VAR 0 3
35874: PUSH
35875: LD_VAR 0 3
35879: PUSH
35880: LD_VAR 0 8
35884: STR
35885: PUSH
35886: LD_STRING ;
35888: STR
35889: ST_TO_ADDR
// end ;
35890: GO 35855
35892: POP
35893: POP
// for i = 1 to hardcoreCounter do
35894: LD_ADDR_VAR 0 8
35898: PUSH
35899: DOUBLE
35900: LD_INT 1
35902: DEC
35903: ST_TO_ADDR
35904: LD_EXP 72
35908: PUSH
35909: FOR_TO
35910: IFFALSE 35956
// begin if flags [ normalCounter + i ] then
35912: LD_VAR 0 4
35916: PUSH
35917: LD_EXP 71
35921: PUSH
35922: LD_VAR 0 8
35926: PLUS
35927: ARRAY
35928: IFFALSE 35954
// tmp := tmp & ( 100 + i ) & ; ;
35930: LD_ADDR_VAR 0 3
35934: PUSH
35935: LD_VAR 0 3
35939: PUSH
35940: LD_INT 100
35942: PUSH
35943: LD_VAR 0 8
35947: PLUS
35948: STR
35949: PUSH
35950: LD_STRING ;
35952: STR
35953: ST_TO_ADDR
// end ;
35954: GO 35909
35956: POP
35957: POP
// if tmp then
35958: LD_VAR 0 3
35962: IFFALSE 35974
// active := tmp ;
35964: LD_ADDR_VAR 0 7
35968: PUSH
35969: LD_VAR 0 3
35973: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
35974: LD_STRING getStreamItemsFromMission("
35976: PUSH
35977: LD_VAR 0 5
35981: STR
35982: PUSH
35983: LD_STRING ","
35985: STR
35986: PUSH
35987: LD_VAR 0 6
35991: STR
35992: PUSH
35993: LD_STRING ","
35995: STR
35996: PUSH
35997: LD_VAR 0 7
36001: STR
36002: PUSH
36003: LD_STRING ")
36005: STR
36006: PPUSH
36007: CALL_OW 559
// end else
36011: GO 36020
// ToLua ( getStreamItemsFromMission("","","") ) ;
36013: LD_STRING getStreamItemsFromMission("","","")
36015: PPUSH
36016: CALL_OW 559
// end ;
36020: LD_VAR 0 2
36024: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36025: LD_EXP 70
36029: PUSH
36030: LD_EXP 75
36034: AND
36035: IFFALSE 36159
36037: GO 36039
36039: DISABLE
36040: LD_INT 0
36042: PPUSH
36043: PPUSH
// begin enable ;
36044: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36045: LD_ADDR_VAR 0 2
36049: PUSH
36050: LD_INT 22
36052: PUSH
36053: LD_OWVAR 2
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: LD_INT 34
36067: PUSH
36068: LD_INT 7
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 34
36077: PUSH
36078: LD_INT 45
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 34
36087: PUSH
36088: LD_INT 28
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 34
36097: PUSH
36098: LD_INT 47
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PPUSH
36116: CALL_OW 69
36120: ST_TO_ADDR
// if not tmp then
36121: LD_VAR 0 2
36125: NOT
36126: IFFALSE 36130
// exit ;
36128: GO 36159
// for i in tmp do
36130: LD_ADDR_VAR 0 1
36134: PUSH
36135: LD_VAR 0 2
36139: PUSH
36140: FOR_IN
36141: IFFALSE 36157
// begin SetLives ( i , 0 ) ;
36143: LD_VAR 0 1
36147: PPUSH
36148: LD_INT 0
36150: PPUSH
36151: CALL_OW 234
// end ;
36155: GO 36140
36157: POP
36158: POP
// end ;
36159: PPOPN 2
36161: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36162: LD_EXP 70
36166: PUSH
36167: LD_EXP 76
36171: AND
36172: IFFALSE 36256
36174: GO 36176
36176: DISABLE
36177: LD_INT 0
36179: PPUSH
36180: PPUSH
// begin enable ;
36181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36182: LD_ADDR_VAR 0 2
36186: PUSH
36187: LD_INT 22
36189: PUSH
36190: LD_OWVAR 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 32
36201: PUSH
36202: LD_INT 3
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PPUSH
36213: CALL_OW 69
36217: ST_TO_ADDR
// if not tmp then
36218: LD_VAR 0 2
36222: NOT
36223: IFFALSE 36227
// exit ;
36225: GO 36256
// for i in tmp do
36227: LD_ADDR_VAR 0 1
36231: PUSH
36232: LD_VAR 0 2
36236: PUSH
36237: FOR_IN
36238: IFFALSE 36254
// begin SetLives ( i , 0 ) ;
36240: LD_VAR 0 1
36244: PPUSH
36245: LD_INT 0
36247: PPUSH
36248: CALL_OW 234
// end ;
36252: GO 36237
36254: POP
36255: POP
// end ;
36256: PPOPN 2
36258: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36259: LD_EXP 70
36263: PUSH
36264: LD_EXP 73
36268: AND
36269: IFFALSE 36362
36271: GO 36273
36273: DISABLE
36274: LD_INT 0
36276: PPUSH
// begin enable ;
36277: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36278: LD_ADDR_VAR 0 1
36282: PUSH
36283: LD_INT 22
36285: PUSH
36286: LD_OWVAR 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 25
36300: PUSH
36301: LD_INT 5
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 25
36310: PUSH
36311: LD_INT 9
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 25
36320: PUSH
36321: LD_INT 8
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PPUSH
36338: CALL_OW 69
36342: PUSH
36343: FOR_IN
36344: IFFALSE 36360
// begin SetClass ( i , 1 ) ;
36346: LD_VAR 0 1
36350: PPUSH
36351: LD_INT 1
36353: PPUSH
36354: CALL_OW 336
// end ;
36358: GO 36343
36360: POP
36361: POP
// end ;
36362: PPOPN 1
36364: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36365: LD_EXP 70
36369: PUSH
36370: LD_EXP 74
36374: AND
36375: PUSH
36376: LD_OWVAR 65
36380: PUSH
36381: LD_INT 7
36383: LESS
36384: AND
36385: IFFALSE 36399
36387: GO 36389
36389: DISABLE
// begin enable ;
36390: ENABLE
// game_speed := 7 ;
36391: LD_ADDR_OWVAR 65
36395: PUSH
36396: LD_INT 7
36398: ST_TO_ADDR
// end ;
36399: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36400: LD_EXP 70
36404: PUSH
36405: LD_EXP 77
36409: AND
36410: IFFALSE 36612
36412: GO 36414
36414: DISABLE
36415: LD_INT 0
36417: PPUSH
36418: PPUSH
36419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36420: LD_ADDR_VAR 0 3
36424: PUSH
36425: LD_INT 81
36427: PUSH
36428: LD_OWVAR 2
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 21
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PPUSH
36451: CALL_OW 69
36455: ST_TO_ADDR
// if not tmp then
36456: LD_VAR 0 3
36460: NOT
36461: IFFALSE 36465
// exit ;
36463: GO 36612
// if tmp > 5 then
36465: LD_VAR 0 3
36469: PUSH
36470: LD_INT 5
36472: GREATER
36473: IFFALSE 36485
// k := 5 else
36475: LD_ADDR_VAR 0 2
36479: PUSH
36480: LD_INT 5
36482: ST_TO_ADDR
36483: GO 36495
// k := tmp ;
36485: LD_ADDR_VAR 0 2
36489: PUSH
36490: LD_VAR 0 3
36494: ST_TO_ADDR
// for i := 1 to k do
36495: LD_ADDR_VAR 0 1
36499: PUSH
36500: DOUBLE
36501: LD_INT 1
36503: DEC
36504: ST_TO_ADDR
36505: LD_VAR 0 2
36509: PUSH
36510: FOR_TO
36511: IFFALSE 36610
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36513: LD_VAR 0 3
36517: PUSH
36518: LD_VAR 0 1
36522: ARRAY
36523: PPUSH
36524: LD_VAR 0 1
36528: PUSH
36529: LD_INT 4
36531: MOD
36532: PUSH
36533: LD_INT 1
36535: PLUS
36536: PPUSH
36537: CALL_OW 259
36541: PUSH
36542: LD_INT 10
36544: LESS
36545: IFFALSE 36608
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36547: LD_VAR 0 3
36551: PUSH
36552: LD_VAR 0 1
36556: ARRAY
36557: PPUSH
36558: LD_VAR 0 1
36562: PUSH
36563: LD_INT 4
36565: MOD
36566: PUSH
36567: LD_INT 1
36569: PLUS
36570: PPUSH
36571: LD_VAR 0 3
36575: PUSH
36576: LD_VAR 0 1
36580: ARRAY
36581: PPUSH
36582: LD_VAR 0 1
36586: PUSH
36587: LD_INT 4
36589: MOD
36590: PUSH
36591: LD_INT 1
36593: PLUS
36594: PPUSH
36595: CALL_OW 259
36599: PUSH
36600: LD_INT 1
36602: PLUS
36603: PPUSH
36604: CALL_OW 237
36608: GO 36510
36610: POP
36611: POP
// end ;
36612: PPOPN 3
36614: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36615: LD_EXP 70
36619: PUSH
36620: LD_EXP 78
36624: AND
36625: IFFALSE 36645
36627: GO 36629
36629: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36630: LD_INT 4
36632: PPUSH
36633: LD_OWVAR 2
36637: PPUSH
36638: LD_INT 0
36640: PPUSH
36641: CALL_OW 324
36645: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36646: LD_EXP 70
36650: PUSH
36651: LD_EXP 107
36655: AND
36656: IFFALSE 36676
36658: GO 36660
36660: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36661: LD_INT 19
36663: PPUSH
36664: LD_OWVAR 2
36668: PPUSH
36669: LD_INT 0
36671: PPUSH
36672: CALL_OW 324
36676: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36677: LD_EXP 70
36681: PUSH
36682: LD_EXP 79
36686: AND
36687: IFFALSE 36789
36689: GO 36691
36691: DISABLE
36692: LD_INT 0
36694: PPUSH
36695: PPUSH
// begin enable ;
36696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36697: LD_ADDR_VAR 0 2
36701: PUSH
36702: LD_INT 22
36704: PUSH
36705: LD_OWVAR 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: LD_INT 34
36719: PUSH
36720: LD_INT 11
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 34
36729: PUSH
36730: LD_INT 30
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PPUSH
36746: CALL_OW 69
36750: ST_TO_ADDR
// if not tmp then
36751: LD_VAR 0 2
36755: NOT
36756: IFFALSE 36760
// exit ;
36758: GO 36789
// for i in tmp do
36760: LD_ADDR_VAR 0 1
36764: PUSH
36765: LD_VAR 0 2
36769: PUSH
36770: FOR_IN
36771: IFFALSE 36787
// begin SetLives ( i , 0 ) ;
36773: LD_VAR 0 1
36777: PPUSH
36778: LD_INT 0
36780: PPUSH
36781: CALL_OW 234
// end ;
36785: GO 36770
36787: POP
36788: POP
// end ;
36789: PPOPN 2
36791: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36792: LD_EXP 70
36796: PUSH
36797: LD_EXP 80
36801: AND
36802: IFFALSE 36822
36804: GO 36806
36806: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36807: LD_INT 32
36809: PPUSH
36810: LD_OWVAR 2
36814: PPUSH
36815: LD_INT 0
36817: PPUSH
36818: CALL_OW 324
36822: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36823: LD_EXP 70
36827: PUSH
36828: LD_EXP 81
36832: AND
36833: IFFALSE 37014
36835: GO 36837
36837: DISABLE
36838: LD_INT 0
36840: PPUSH
36841: PPUSH
36842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36843: LD_ADDR_VAR 0 2
36847: PUSH
36848: LD_INT 22
36850: PUSH
36851: LD_OWVAR 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 33
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PPUSH
36874: CALL_OW 69
36878: ST_TO_ADDR
// if not tmp then
36879: LD_VAR 0 2
36883: NOT
36884: IFFALSE 36888
// exit ;
36886: GO 37014
// side := 0 ;
36888: LD_ADDR_VAR 0 3
36892: PUSH
36893: LD_INT 0
36895: ST_TO_ADDR
// for i := 1 to 8 do
36896: LD_ADDR_VAR 0 1
36900: PUSH
36901: DOUBLE
36902: LD_INT 1
36904: DEC
36905: ST_TO_ADDR
36906: LD_INT 8
36908: PUSH
36909: FOR_TO
36910: IFFALSE 36958
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36912: LD_OWVAR 2
36916: PUSH
36917: LD_VAR 0 1
36921: NONEQUAL
36922: PUSH
36923: LD_OWVAR 2
36927: PPUSH
36928: LD_VAR 0 1
36932: PPUSH
36933: CALL_OW 81
36937: PUSH
36938: LD_INT 2
36940: EQUAL
36941: AND
36942: IFFALSE 36956
// begin side := i ;
36944: LD_ADDR_VAR 0 3
36948: PUSH
36949: LD_VAR 0 1
36953: ST_TO_ADDR
// break ;
36954: GO 36958
// end ;
36956: GO 36909
36958: POP
36959: POP
// if not side then
36960: LD_VAR 0 3
36964: NOT
36965: IFFALSE 36969
// exit ;
36967: GO 37014
// for i := 1 to tmp do
36969: LD_ADDR_VAR 0 1
36973: PUSH
36974: DOUBLE
36975: LD_INT 1
36977: DEC
36978: ST_TO_ADDR
36979: LD_VAR 0 2
36983: PUSH
36984: FOR_TO
36985: IFFALSE 37012
// if Prob ( 60 ) then
36987: LD_INT 60
36989: PPUSH
36990: CALL_OW 13
36994: IFFALSE 37010
// SetSide ( i , side ) ;
36996: LD_VAR 0 1
37000: PPUSH
37001: LD_VAR 0 3
37005: PPUSH
37006: CALL_OW 235
37010: GO 36984
37012: POP
37013: POP
// end ;
37014: PPOPN 3
37016: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37017: LD_EXP 70
37021: PUSH
37022: LD_EXP 83
37026: AND
37027: IFFALSE 37146
37029: GO 37031
37031: DISABLE
37032: LD_INT 0
37034: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37035: LD_ADDR_VAR 0 1
37039: PUSH
37040: LD_INT 22
37042: PUSH
37043: LD_OWVAR 2
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 21
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 3
37064: PUSH
37065: LD_INT 23
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: PPUSH
37084: CALL_OW 69
37088: PUSH
37089: FOR_IN
37090: IFFALSE 37144
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37092: LD_VAR 0 1
37096: PPUSH
37097: CALL_OW 257
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: LD_INT 3
37110: PUSH
37111: LD_INT 4
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: IN
37120: IFFALSE 37142
// SetClass ( un , rand ( 1 , 4 ) ) ;
37122: LD_VAR 0 1
37126: PPUSH
37127: LD_INT 1
37129: PPUSH
37130: LD_INT 4
37132: PPUSH
37133: CALL_OW 12
37137: PPUSH
37138: CALL_OW 336
37142: GO 37089
37144: POP
37145: POP
// end ;
37146: PPOPN 1
37148: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37149: LD_EXP 70
37153: PUSH
37154: LD_EXP 82
37158: AND
37159: IFFALSE 37238
37161: GO 37163
37163: DISABLE
37164: LD_INT 0
37166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37167: LD_ADDR_VAR 0 1
37171: PUSH
37172: LD_INT 22
37174: PUSH
37175: LD_OWVAR 2
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 21
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PPUSH
37198: CALL_OW 69
37202: ST_TO_ADDR
// if not tmp then
37203: LD_VAR 0 1
37207: NOT
37208: IFFALSE 37212
// exit ;
37210: GO 37238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37212: LD_VAR 0 1
37216: PUSH
37217: LD_INT 1
37219: PPUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 12
37229: ARRAY
37230: PPUSH
37231: LD_INT 100
37233: PPUSH
37234: CALL_OW 234
// end ;
37238: PPOPN 1
37240: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37241: LD_EXP 70
37245: PUSH
37246: LD_EXP 84
37250: AND
37251: IFFALSE 37349
37253: GO 37255
37255: DISABLE
37256: LD_INT 0
37258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37259: LD_ADDR_VAR 0 1
37263: PUSH
37264: LD_INT 22
37266: PUSH
37267: LD_OWVAR 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 21
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 69
37294: ST_TO_ADDR
// if not tmp then
37295: LD_VAR 0 1
37299: NOT
37300: IFFALSE 37304
// exit ;
37302: GO 37349
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37304: LD_VAR 0 1
37308: PUSH
37309: LD_INT 1
37311: PPUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 12
37321: ARRAY
37322: PPUSH
37323: LD_INT 1
37325: PPUSH
37326: LD_INT 4
37328: PPUSH
37329: CALL_OW 12
37333: PPUSH
37334: LD_INT 3000
37336: PPUSH
37337: LD_INT 9000
37339: PPUSH
37340: CALL_OW 12
37344: PPUSH
37345: CALL_OW 492
// end ;
37349: PPOPN 1
37351: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37352: LD_EXP 70
37356: PUSH
37357: LD_EXP 85
37361: AND
37362: IFFALSE 37382
37364: GO 37366
37366: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37367: LD_INT 1
37369: PPUSH
37370: LD_OWVAR 2
37374: PPUSH
37375: LD_INT 0
37377: PPUSH
37378: CALL_OW 324
37382: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37383: LD_EXP 70
37387: PUSH
37388: LD_EXP 86
37392: AND
37393: IFFALSE 37476
37395: GO 37397
37397: DISABLE
37398: LD_INT 0
37400: PPUSH
37401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37402: LD_ADDR_VAR 0 2
37406: PUSH
37407: LD_INT 22
37409: PUSH
37410: LD_OWVAR 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 21
37421: PUSH
37422: LD_INT 3
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PPUSH
37433: CALL_OW 69
37437: ST_TO_ADDR
// if not tmp then
37438: LD_VAR 0 2
37442: NOT
37443: IFFALSE 37447
// exit ;
37445: GO 37476
// for i in tmp do
37447: LD_ADDR_VAR 0 1
37451: PUSH
37452: LD_VAR 0 2
37456: PUSH
37457: FOR_IN
37458: IFFALSE 37474
// SetBLevel ( i , 10 ) ;
37460: LD_VAR 0 1
37464: PPUSH
37465: LD_INT 10
37467: PPUSH
37468: CALL_OW 241
37472: GO 37457
37474: POP
37475: POP
// end ;
37476: PPOPN 2
37478: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37479: LD_EXP 70
37483: PUSH
37484: LD_EXP 87
37488: AND
37489: IFFALSE 37600
37491: GO 37493
37493: DISABLE
37494: LD_INT 0
37496: PPUSH
37497: PPUSH
37498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37499: LD_ADDR_VAR 0 3
37503: PUSH
37504: LD_INT 22
37506: PUSH
37507: LD_OWVAR 2
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 25
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PPUSH
37530: CALL_OW 69
37534: ST_TO_ADDR
// if not tmp then
37535: LD_VAR 0 3
37539: NOT
37540: IFFALSE 37544
// exit ;
37542: GO 37600
// un := tmp [ rand ( 1 , tmp ) ] ;
37544: LD_ADDR_VAR 0 2
37548: PUSH
37549: LD_VAR 0 3
37553: PUSH
37554: LD_INT 1
37556: PPUSH
37557: LD_VAR 0 3
37561: PPUSH
37562: CALL_OW 12
37566: ARRAY
37567: ST_TO_ADDR
// if Crawls ( un ) then
37568: LD_VAR 0 2
37572: PPUSH
37573: CALL_OW 318
37577: IFFALSE 37588
// ComWalk ( un ) ;
37579: LD_VAR 0 2
37583: PPUSH
37584: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37588: LD_VAR 0 2
37592: PPUSH
37593: LD_INT 5
37595: PPUSH
37596: CALL_OW 336
// end ;
37600: PPOPN 3
37602: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37603: LD_EXP 70
37607: PUSH
37608: LD_EXP 88
37612: AND
37613: PUSH
37614: LD_OWVAR 67
37618: PUSH
37619: LD_INT 4
37621: LESS
37622: AND
37623: IFFALSE 37642
37625: GO 37627
37627: DISABLE
// begin Difficulty := Difficulty + 1 ;
37628: LD_ADDR_OWVAR 67
37632: PUSH
37633: LD_OWVAR 67
37637: PUSH
37638: LD_INT 1
37640: PLUS
37641: ST_TO_ADDR
// end ;
37642: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37643: LD_EXP 70
37647: PUSH
37648: LD_EXP 89
37652: AND
37653: IFFALSE 37756
37655: GO 37657
37657: DISABLE
37658: LD_INT 0
37660: PPUSH
// begin for i := 1 to 5 do
37661: LD_ADDR_VAR 0 1
37665: PUSH
37666: DOUBLE
37667: LD_INT 1
37669: DEC
37670: ST_TO_ADDR
37671: LD_INT 5
37673: PUSH
37674: FOR_TO
37675: IFFALSE 37754
// begin uc_nation := nation_nature ;
37677: LD_ADDR_OWVAR 21
37681: PUSH
37682: LD_INT 0
37684: ST_TO_ADDR
// uc_side := 0 ;
37685: LD_ADDR_OWVAR 20
37689: PUSH
37690: LD_INT 0
37692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37693: LD_ADDR_OWVAR 29
37697: PUSH
37698: LD_INT 12
37700: PUSH
37701: LD_INT 12
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// hc_agressivity := 20 ;
37708: LD_ADDR_OWVAR 35
37712: PUSH
37713: LD_INT 20
37715: ST_TO_ADDR
// hc_class := class_tiger ;
37716: LD_ADDR_OWVAR 28
37720: PUSH
37721: LD_INT 14
37723: ST_TO_ADDR
// hc_gallery :=  ;
37724: LD_ADDR_OWVAR 33
37728: PUSH
37729: LD_STRING 
37731: ST_TO_ADDR
// hc_name :=  ;
37732: LD_ADDR_OWVAR 26
37736: PUSH
37737: LD_STRING 
37739: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37740: CALL_OW 44
37744: PPUSH
37745: LD_INT 0
37747: PPUSH
37748: CALL_OW 51
// end ;
37752: GO 37674
37754: POP
37755: POP
// end ;
37756: PPOPN 1
37758: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37759: LD_EXP 70
37763: PUSH
37764: LD_EXP 90
37768: AND
37769: IFFALSE 37778
37771: GO 37773
37773: DISABLE
// StreamSibBomb ;
37774: CALL 37779 0 0
37778: END
// export function StreamSibBomb ; var i , x , y ; begin
37779: LD_INT 0
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
// result := false ;
37785: LD_ADDR_VAR 0 1
37789: PUSH
37790: LD_INT 0
37792: ST_TO_ADDR
// for i := 1 to 16 do
37793: LD_ADDR_VAR 0 2
37797: PUSH
37798: DOUBLE
37799: LD_INT 1
37801: DEC
37802: ST_TO_ADDR
37803: LD_INT 16
37805: PUSH
37806: FOR_TO
37807: IFFALSE 38006
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37809: LD_ADDR_VAR 0 3
37813: PUSH
37814: LD_INT 10
37816: PUSH
37817: LD_INT 20
37819: PUSH
37820: LD_INT 30
37822: PUSH
37823: LD_INT 40
37825: PUSH
37826: LD_INT 50
37828: PUSH
37829: LD_INT 60
37831: PUSH
37832: LD_INT 70
37834: PUSH
37835: LD_INT 80
37837: PUSH
37838: LD_INT 90
37840: PUSH
37841: LD_INT 100
37843: PUSH
37844: LD_INT 110
37846: PUSH
37847: LD_INT 120
37849: PUSH
37850: LD_INT 130
37852: PUSH
37853: LD_INT 140
37855: PUSH
37856: LD_INT 150
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PPUSH
37879: LD_INT 15
37881: PPUSH
37882: CALL_OW 12
37886: ARRAY
37887: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37888: LD_ADDR_VAR 0 4
37892: PUSH
37893: LD_INT 10
37895: PUSH
37896: LD_INT 20
37898: PUSH
37899: LD_INT 30
37901: PUSH
37902: LD_INT 40
37904: PUSH
37905: LD_INT 50
37907: PUSH
37908: LD_INT 60
37910: PUSH
37911: LD_INT 70
37913: PUSH
37914: LD_INT 80
37916: PUSH
37917: LD_INT 90
37919: PUSH
37920: LD_INT 100
37922: PUSH
37923: LD_INT 110
37925: PUSH
37926: LD_INT 120
37928: PUSH
37929: LD_INT 130
37931: PUSH
37932: LD_INT 140
37934: PUSH
37935: LD_INT 150
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PPUSH
37958: LD_INT 15
37960: PPUSH
37961: CALL_OW 12
37965: ARRAY
37966: ST_TO_ADDR
// if ValidHex ( x , y ) then
37967: LD_VAR 0 3
37971: PPUSH
37972: LD_VAR 0 4
37976: PPUSH
37977: CALL_OW 488
37981: IFFALSE 38004
// begin result := [ x , y ] ;
37983: LD_ADDR_VAR 0 1
37987: PUSH
37988: LD_VAR 0 3
37992: PUSH
37993: LD_VAR 0 4
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: ST_TO_ADDR
// break ;
38002: GO 38006
// end ; end ;
38004: GO 37806
38006: POP
38007: POP
// if result then
38008: LD_VAR 0 1
38012: IFFALSE 38072
// begin ToLua ( playSibBomb() ) ;
38014: LD_STRING playSibBomb()
38016: PPUSH
38017: CALL_OW 559
// wait ( 0 0$14 ) ;
38021: LD_INT 490
38023: PPUSH
38024: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38028: LD_VAR 0 1
38032: PUSH
38033: LD_INT 1
38035: ARRAY
38036: PPUSH
38037: LD_VAR 0 1
38041: PUSH
38042: LD_INT 2
38044: ARRAY
38045: PPUSH
38046: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38050: LD_VAR 0 1
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 1
38063: PUSH
38064: LD_INT 2
38066: ARRAY
38067: PPUSH
38068: CALL_OW 429
// end ; end ;
38072: LD_VAR 0 1
38076: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38077: LD_EXP 70
38081: PUSH
38082: LD_EXP 92
38086: AND
38087: IFFALSE 38099
38089: GO 38091
38091: DISABLE
// YouLost (  ) ;
38092: LD_STRING 
38094: PPUSH
38095: CALL_OW 104
38099: END
// every 0 0$1 trigger StreamModeActive and sFog do
38100: LD_EXP 70
38104: PUSH
38105: LD_EXP 91
38109: AND
38110: IFFALSE 38124
38112: GO 38114
38114: DISABLE
// FogOff ( your_side ) ;
38115: LD_OWVAR 2
38119: PPUSH
38120: CALL_OW 344
38124: END
// every 0 0$1 trigger StreamModeActive and sSun do
38125: LD_EXP 70
38129: PUSH
38130: LD_EXP 93
38134: AND
38135: IFFALSE 38163
38137: GO 38139
38139: DISABLE
// begin solar_recharge_percent := 0 ;
38140: LD_ADDR_OWVAR 79
38144: PUSH
38145: LD_INT 0
38147: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38148: LD_INT 10500
38150: PPUSH
38151: CALL_OW 67
// solar_recharge_percent := 100 ;
38155: LD_ADDR_OWVAR 79
38159: PUSH
38160: LD_INT 100
38162: ST_TO_ADDR
// end ;
38163: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38164: LD_EXP 70
38168: PUSH
38169: LD_EXP 94
38173: AND
38174: IFFALSE 38413
38176: GO 38178
38178: DISABLE
38179: LD_INT 0
38181: PPUSH
38182: PPUSH
38183: PPUSH
// begin tmp := [ ] ;
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: EMPTY
38190: ST_TO_ADDR
// for i := 1 to 6 do
38191: LD_ADDR_VAR 0 1
38195: PUSH
38196: DOUBLE
38197: LD_INT 1
38199: DEC
38200: ST_TO_ADDR
38201: LD_INT 6
38203: PUSH
38204: FOR_TO
38205: IFFALSE 38310
// begin uc_nation := nation_nature ;
38207: LD_ADDR_OWVAR 21
38211: PUSH
38212: LD_INT 0
38214: ST_TO_ADDR
// uc_side := 0 ;
38215: LD_ADDR_OWVAR 20
38219: PUSH
38220: LD_INT 0
38222: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38223: LD_ADDR_OWVAR 29
38227: PUSH
38228: LD_INT 12
38230: PUSH
38231: LD_INT 12
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: ST_TO_ADDR
// hc_agressivity := 20 ;
38238: LD_ADDR_OWVAR 35
38242: PUSH
38243: LD_INT 20
38245: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38246: LD_ADDR_OWVAR 28
38250: PUSH
38251: LD_INT 17
38253: ST_TO_ADDR
// hc_gallery :=  ;
38254: LD_ADDR_OWVAR 33
38258: PUSH
38259: LD_STRING 
38261: ST_TO_ADDR
// hc_name :=  ;
38262: LD_ADDR_OWVAR 26
38266: PUSH
38267: LD_STRING 
38269: ST_TO_ADDR
// un := CreateHuman ;
38270: LD_ADDR_VAR 0 2
38274: PUSH
38275: CALL_OW 44
38279: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38280: LD_VAR 0 2
38284: PPUSH
38285: LD_INT 1
38287: PPUSH
38288: CALL_OW 51
// tmp := tmp ^ un ;
38292: LD_ADDR_VAR 0 3
38296: PUSH
38297: LD_VAR 0 3
38301: PUSH
38302: LD_VAR 0 2
38306: ADD
38307: ST_TO_ADDR
// end ;
38308: GO 38204
38310: POP
38311: POP
// repeat wait ( 0 0$1 ) ;
38312: LD_INT 35
38314: PPUSH
38315: CALL_OW 67
// for un in tmp do
38319: LD_ADDR_VAR 0 2
38323: PUSH
38324: LD_VAR 0 3
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38404
// begin if IsDead ( un ) then
38332: LD_VAR 0 2
38336: PPUSH
38337: CALL_OW 301
38341: IFFALSE 38361
// begin tmp := tmp diff un ;
38343: LD_ADDR_VAR 0 3
38347: PUSH
38348: LD_VAR 0 3
38352: PUSH
38353: LD_VAR 0 2
38357: DIFF
38358: ST_TO_ADDR
// continue ;
38359: GO 38329
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38361: LD_VAR 0 2
38365: PPUSH
38366: LD_INT 3
38368: PUSH
38369: LD_INT 22
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PPUSH
38383: CALL_OW 69
38387: PPUSH
38388: LD_VAR 0 2
38392: PPUSH
38393: CALL_OW 74
38397: PPUSH
38398: CALL_OW 115
// end ;
38402: GO 38329
38404: POP
38405: POP
// until not tmp ;
38406: LD_VAR 0 3
38410: NOT
38411: IFFALSE 38312
// end ;
38413: PPOPN 3
38415: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38416: LD_EXP 70
38420: PUSH
38421: LD_EXP 95
38425: AND
38426: IFFALSE 38480
38428: GO 38430
38430: DISABLE
// begin ToLua ( displayTroll(); ) ;
38431: LD_STRING displayTroll();
38433: PPUSH
38434: CALL_OW 559
// wait ( 3 3$00 ) ;
38438: LD_INT 6300
38440: PPUSH
38441: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38445: LD_STRING hideTroll();
38447: PPUSH
38448: CALL_OW 559
// wait ( 1 1$00 ) ;
38452: LD_INT 2100
38454: PPUSH
38455: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38459: LD_STRING displayTroll();
38461: PPUSH
38462: CALL_OW 559
// wait ( 1 1$00 ) ;
38466: LD_INT 2100
38468: PPUSH
38469: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38473: LD_STRING hideTroll();
38475: PPUSH
38476: CALL_OW 559
// end ;
38480: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38481: LD_EXP 70
38485: PUSH
38486: LD_EXP 96
38490: AND
38491: IFFALSE 38554
38493: GO 38495
38495: DISABLE
38496: LD_INT 0
38498: PPUSH
// begin p := 0 ;
38499: LD_ADDR_VAR 0 1
38503: PUSH
38504: LD_INT 0
38506: ST_TO_ADDR
// repeat game_speed := 1 ;
38507: LD_ADDR_OWVAR 65
38511: PUSH
38512: LD_INT 1
38514: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38515: LD_INT 35
38517: PPUSH
38518: CALL_OW 67
// p := p + 1 ;
38522: LD_ADDR_VAR 0 1
38526: PUSH
38527: LD_VAR 0 1
38531: PUSH
38532: LD_INT 1
38534: PLUS
38535: ST_TO_ADDR
// until p >= 60 ;
38536: LD_VAR 0 1
38540: PUSH
38541: LD_INT 60
38543: GREATEREQUAL
38544: IFFALSE 38507
// game_speed := 4 ;
38546: LD_ADDR_OWVAR 65
38550: PUSH
38551: LD_INT 4
38553: ST_TO_ADDR
// end ;
38554: PPOPN 1
38556: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38557: LD_EXP 70
38561: PUSH
38562: LD_EXP 97
38566: AND
38567: IFFALSE 38713
38569: GO 38571
38571: DISABLE
38572: LD_INT 0
38574: PPUSH
38575: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38576: LD_ADDR_VAR 0 1
38580: PUSH
38581: LD_INT 22
38583: PUSH
38584: LD_OWVAR 2
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: LD_INT 30
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 30
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PPUSH
38625: CALL_OW 69
38629: ST_TO_ADDR
// if not depot then
38630: LD_VAR 0 1
38634: NOT
38635: IFFALSE 38639
// exit ;
38637: GO 38713
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38639: LD_ADDR_VAR 0 2
38643: PUSH
38644: LD_VAR 0 1
38648: PUSH
38649: LD_INT 1
38651: PPUSH
38652: LD_VAR 0 1
38656: PPUSH
38657: CALL_OW 12
38661: ARRAY
38662: PPUSH
38663: CALL_OW 274
38667: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38668: LD_VAR 0 2
38672: PPUSH
38673: LD_INT 1
38675: PPUSH
38676: LD_INT 0
38678: PPUSH
38679: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38683: LD_VAR 0 2
38687: PPUSH
38688: LD_INT 2
38690: PPUSH
38691: LD_INT 0
38693: PPUSH
38694: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38698: LD_VAR 0 2
38702: PPUSH
38703: LD_INT 3
38705: PPUSH
38706: LD_INT 0
38708: PPUSH
38709: CALL_OW 277
// end ;
38713: PPOPN 2
38715: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38716: LD_EXP 70
38720: PUSH
38721: LD_EXP 98
38725: AND
38726: IFFALSE 38823
38728: GO 38730
38730: DISABLE
38731: LD_INT 0
38733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38734: LD_ADDR_VAR 0 1
38738: PUSH
38739: LD_INT 22
38741: PUSH
38742: LD_OWVAR 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 21
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 3
38763: PUSH
38764: LD_INT 23
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: PPUSH
38783: CALL_OW 69
38787: ST_TO_ADDR
// if not tmp then
38788: LD_VAR 0 1
38792: NOT
38793: IFFALSE 38797
// exit ;
38795: GO 38823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38797: LD_VAR 0 1
38801: PUSH
38802: LD_INT 1
38804: PPUSH
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 12
38814: ARRAY
38815: PPUSH
38816: LD_INT 200
38818: PPUSH
38819: CALL_OW 234
// end ;
38823: PPOPN 1
38825: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38826: LD_EXP 70
38830: PUSH
38831: LD_EXP 99
38835: AND
38836: IFFALSE 38915
38838: GO 38840
38840: DISABLE
38841: LD_INT 0
38843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38844: LD_ADDR_VAR 0 1
38848: PUSH
38849: LD_INT 22
38851: PUSH
38852: LD_OWVAR 2
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 21
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PPUSH
38875: CALL_OW 69
38879: ST_TO_ADDR
// if not tmp then
38880: LD_VAR 0 1
38884: NOT
38885: IFFALSE 38889
// exit ;
38887: GO 38915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38889: LD_VAR 0 1
38893: PUSH
38894: LD_INT 1
38896: PPUSH
38897: LD_VAR 0 1
38901: PPUSH
38902: CALL_OW 12
38906: ARRAY
38907: PPUSH
38908: LD_INT 60
38910: PPUSH
38911: CALL_OW 234
// end ;
38915: PPOPN 1
38917: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38918: LD_EXP 70
38922: PUSH
38923: LD_EXP 100
38927: AND
38928: IFFALSE 39027
38930: GO 38932
38932: DISABLE
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
// begin enable ;
38937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38938: LD_ADDR_VAR 0 1
38942: PUSH
38943: LD_INT 22
38945: PUSH
38946: LD_OWVAR 2
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 61
38957: PUSH
38958: EMPTY
38959: LIST
38960: PUSH
38961: LD_INT 33
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PPUSH
38976: CALL_OW 69
38980: ST_TO_ADDR
// if not tmp then
38981: LD_VAR 0 1
38985: NOT
38986: IFFALSE 38990
// exit ;
38988: GO 39027
// for i in tmp do
38990: LD_ADDR_VAR 0 2
38994: PUSH
38995: LD_VAR 0 1
38999: PUSH
39000: FOR_IN
39001: IFFALSE 39025
// if IsControledBy ( i ) then
39003: LD_VAR 0 2
39007: PPUSH
39008: CALL_OW 312
39012: IFFALSE 39023
// ComUnlink ( i ) ;
39014: LD_VAR 0 2
39018: PPUSH
39019: CALL_OW 136
39023: GO 39000
39025: POP
39026: POP
// end ;
39027: PPOPN 2
39029: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39030: LD_EXP 70
39034: PUSH
39035: LD_EXP 101
39039: AND
39040: IFFALSE 39180
39042: GO 39044
39044: DISABLE
39045: LD_INT 0
39047: PPUSH
39048: PPUSH
// begin ToLua ( displayPowell(); ) ;
39049: LD_STRING displayPowell();
39051: PPUSH
39052: CALL_OW 559
// uc_side := 0 ;
39056: LD_ADDR_OWVAR 20
39060: PUSH
39061: LD_INT 0
39063: ST_TO_ADDR
// uc_nation := 2 ;
39064: LD_ADDR_OWVAR 21
39068: PUSH
39069: LD_INT 2
39071: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39072: LD_ADDR_OWVAR 37
39076: PUSH
39077: LD_INT 14
39079: ST_TO_ADDR
// vc_engine := engine_siberite ;
39080: LD_ADDR_OWVAR 39
39084: PUSH
39085: LD_INT 3
39087: ST_TO_ADDR
// vc_control := control_apeman ;
39088: LD_ADDR_OWVAR 38
39092: PUSH
39093: LD_INT 5
39095: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39096: LD_ADDR_OWVAR 40
39100: PUSH
39101: LD_INT 29
39103: ST_TO_ADDR
// un := CreateVehicle ;
39104: LD_ADDR_VAR 0 2
39108: PUSH
39109: CALL_OW 45
39113: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39114: LD_VAR 0 2
39118: PPUSH
39119: LD_INT 1
39121: PPUSH
39122: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39126: LD_INT 35
39128: PPUSH
39129: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39133: LD_VAR 0 2
39137: PPUSH
39138: LD_INT 22
39140: PUSH
39141: LD_OWVAR 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PPUSH
39150: CALL_OW 69
39154: PPUSH
39155: LD_VAR 0 2
39159: PPUSH
39160: CALL_OW 74
39164: PPUSH
39165: CALL_OW 115
// until IsDead ( un ) ;
39169: LD_VAR 0 2
39173: PPUSH
39174: CALL_OW 301
39178: IFFALSE 39126
// end ;
39180: PPOPN 2
39182: END
// every 0 0$1 trigger StreamModeActive and sStu do
39183: LD_EXP 70
39187: PUSH
39188: LD_EXP 109
39192: AND
39193: IFFALSE 39209
39195: GO 39197
39197: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39198: LD_STRING displayStucuk();
39200: PPUSH
39201: CALL_OW 559
// ResetFog ;
39205: CALL_OW 335
// end ;
39209: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39210: LD_EXP 70
39214: PUSH
39215: LD_EXP 102
39219: AND
39220: IFFALSE 39361
39222: GO 39224
39224: DISABLE
39225: LD_INT 0
39227: PPUSH
39228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39229: LD_ADDR_VAR 0 2
39233: PUSH
39234: LD_INT 22
39236: PUSH
39237: LD_OWVAR 2
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 21
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PPUSH
39260: CALL_OW 69
39264: ST_TO_ADDR
// if not tmp then
39265: LD_VAR 0 2
39269: NOT
39270: IFFALSE 39274
// exit ;
39272: GO 39361
// un := tmp [ rand ( 1 , tmp ) ] ;
39274: LD_ADDR_VAR 0 1
39278: PUSH
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 1
39286: PPUSH
39287: LD_VAR 0 2
39291: PPUSH
39292: CALL_OW 12
39296: ARRAY
39297: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39298: LD_VAR 0 1
39302: PPUSH
39303: LD_INT 0
39305: PPUSH
39306: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39310: LD_VAR 0 1
39314: PPUSH
39315: LD_OWVAR 3
39319: PUSH
39320: LD_VAR 0 1
39324: DIFF
39325: PPUSH
39326: LD_VAR 0 1
39330: PPUSH
39331: CALL_OW 74
39335: PPUSH
39336: CALL_OW 115
// wait ( 0 0$20 ) ;
39340: LD_INT 700
39342: PPUSH
39343: CALL_OW 67
// SetSide ( un , your_side ) ;
39347: LD_VAR 0 1
39351: PPUSH
39352: LD_OWVAR 2
39356: PPUSH
39357: CALL_OW 235
// end ;
39361: PPOPN 2
39363: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39364: LD_EXP 70
39368: PUSH
39369: LD_EXP 103
39373: AND
39374: IFFALSE 39480
39376: GO 39378
39378: DISABLE
39379: LD_INT 0
39381: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39382: LD_ADDR_VAR 0 1
39386: PUSH
39387: LD_INT 22
39389: PUSH
39390: LD_OWVAR 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: LD_INT 30
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 30
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PPUSH
39431: CALL_OW 69
39435: ST_TO_ADDR
// if not depot then
39436: LD_VAR 0 1
39440: NOT
39441: IFFALSE 39445
// exit ;
39443: GO 39480
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39445: LD_VAR 0 1
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: CALL_OW 250
39458: PPUSH
39459: LD_VAR 0 1
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: CALL_OW 251
39472: PPUSH
39473: LD_INT 70
39475: PPUSH
39476: CALL_OW 495
// end ;
39480: PPOPN 1
39482: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39483: LD_EXP 70
39487: PUSH
39488: LD_EXP 104
39492: AND
39493: IFFALSE 39704
39495: GO 39497
39497: DISABLE
39498: LD_INT 0
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39505: LD_ADDR_VAR 0 5
39509: PUSH
39510: LD_INT 22
39512: PUSH
39513: LD_OWVAR 2
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 21
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PPUSH
39536: CALL_OW 69
39540: ST_TO_ADDR
// if not tmp then
39541: LD_VAR 0 5
39545: NOT
39546: IFFALSE 39550
// exit ;
39548: GO 39704
// for i in tmp do
39550: LD_ADDR_VAR 0 1
39554: PUSH
39555: LD_VAR 0 5
39559: PUSH
39560: FOR_IN
39561: IFFALSE 39702
// begin d := rand ( 0 , 5 ) ;
39563: LD_ADDR_VAR 0 4
39567: PUSH
39568: LD_INT 0
39570: PPUSH
39571: LD_INT 5
39573: PPUSH
39574: CALL_OW 12
39578: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39579: LD_ADDR_VAR 0 2
39583: PUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: CALL_OW 250
39593: PPUSH
39594: LD_VAR 0 4
39598: PPUSH
39599: LD_INT 3
39601: PPUSH
39602: LD_INT 12
39604: PPUSH
39605: CALL_OW 12
39609: PPUSH
39610: CALL_OW 272
39614: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39615: LD_ADDR_VAR 0 3
39619: PUSH
39620: LD_VAR 0 1
39624: PPUSH
39625: CALL_OW 251
39629: PPUSH
39630: LD_VAR 0 4
39634: PPUSH
39635: LD_INT 3
39637: PPUSH
39638: LD_INT 12
39640: PPUSH
39641: CALL_OW 12
39645: PPUSH
39646: CALL_OW 273
39650: ST_TO_ADDR
// if ValidHex ( x , y ) then
39651: LD_VAR 0 2
39655: PPUSH
39656: LD_VAR 0 3
39660: PPUSH
39661: CALL_OW 488
39665: IFFALSE 39700
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39667: LD_VAR 0 1
39671: PPUSH
39672: LD_VAR 0 2
39676: PPUSH
39677: LD_VAR 0 3
39681: PPUSH
39682: LD_INT 3
39684: PPUSH
39685: LD_INT 6
39687: PPUSH
39688: CALL_OW 12
39692: PPUSH
39693: LD_INT 1
39695: PPUSH
39696: CALL_OW 483
// end ;
39700: GO 39560
39702: POP
39703: POP
// end ;
39704: PPOPN 5
39706: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39707: LD_EXP 70
39711: PUSH
39712: LD_EXP 105
39716: AND
39717: IFFALSE 39811
39719: GO 39721
39721: DISABLE
39722: LD_INT 0
39724: PPUSH
39725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39726: LD_ADDR_VAR 0 2
39730: PUSH
39731: LD_INT 22
39733: PUSH
39734: LD_OWVAR 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 32
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 21
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: LIST
39767: PPUSH
39768: CALL_OW 69
39772: ST_TO_ADDR
// if not tmp then
39773: LD_VAR 0 2
39777: NOT
39778: IFFALSE 39782
// exit ;
39780: GO 39811
// for i in tmp do
39782: LD_ADDR_VAR 0 1
39786: PUSH
39787: LD_VAR 0 2
39791: PUSH
39792: FOR_IN
39793: IFFALSE 39809
// SetFuel ( i , 0 ) ;
39795: LD_VAR 0 1
39799: PPUSH
39800: LD_INT 0
39802: PPUSH
39803: CALL_OW 240
39807: GO 39792
39809: POP
39810: POP
// end ;
39811: PPOPN 2
39813: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39814: LD_EXP 70
39818: PUSH
39819: LD_EXP 106
39823: AND
39824: IFFALSE 39890
39826: GO 39828
39828: DISABLE
39829: LD_INT 0
39831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39832: LD_ADDR_VAR 0 1
39836: PUSH
39837: LD_INT 22
39839: PUSH
39840: LD_OWVAR 2
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 30
39851: PUSH
39852: LD_INT 29
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PPUSH
39863: CALL_OW 69
39867: ST_TO_ADDR
// if not tmp then
39868: LD_VAR 0 1
39872: NOT
39873: IFFALSE 39877
// exit ;
39875: GO 39890
// DestroyUnit ( tmp [ 1 ] ) ;
39877: LD_VAR 0 1
39881: PUSH
39882: LD_INT 1
39884: ARRAY
39885: PPUSH
39886: CALL_OW 65
// end ;
39890: PPOPN 1
39892: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39893: LD_EXP 70
39897: PUSH
39898: LD_EXP 108
39902: AND
39903: IFFALSE 40032
39905: GO 39907
39907: DISABLE
39908: LD_INT 0
39910: PPUSH
// begin uc_side := 0 ;
39911: LD_ADDR_OWVAR 20
39915: PUSH
39916: LD_INT 0
39918: ST_TO_ADDR
// uc_nation := nation_arabian ;
39919: LD_ADDR_OWVAR 21
39923: PUSH
39924: LD_INT 2
39926: ST_TO_ADDR
// hc_gallery :=  ;
39927: LD_ADDR_OWVAR 33
39931: PUSH
39932: LD_STRING 
39934: ST_TO_ADDR
// hc_name :=  ;
39935: LD_ADDR_OWVAR 26
39939: PUSH
39940: LD_STRING 
39942: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39943: LD_INT 1
39945: PPUSH
39946: LD_INT 11
39948: PPUSH
39949: LD_INT 10
39951: PPUSH
39952: CALL_OW 380
// un := CreateHuman ;
39956: LD_ADDR_VAR 0 1
39960: PUSH
39961: CALL_OW 44
39965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39966: LD_VAR 0 1
39970: PPUSH
39971: LD_INT 1
39973: PPUSH
39974: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39978: LD_INT 35
39980: PPUSH
39981: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39985: LD_VAR 0 1
39989: PPUSH
39990: LD_INT 22
39992: PUSH
39993: LD_OWVAR 2
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PPUSH
40002: CALL_OW 69
40006: PPUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 74
40016: PPUSH
40017: CALL_OW 115
// until IsDead ( un ) ;
40021: LD_VAR 0 1
40025: PPUSH
40026: CALL_OW 301
40030: IFFALSE 39978
// end ;
40032: PPOPN 1
40034: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40035: LD_EXP 70
40039: PUSH
40040: LD_EXP 110
40044: AND
40045: IFFALSE 40057
40047: GO 40049
40049: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40050: LD_STRING earthquake(getX(game), 0, 32)
40052: PPUSH
40053: CALL_OW 559
40057: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40058: LD_EXP 70
40062: PUSH
40063: LD_EXP 111
40067: AND
40068: IFFALSE 40159
40070: GO 40072
40072: DISABLE
40073: LD_INT 0
40075: PPUSH
// begin enable ;
40076: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40077: LD_ADDR_VAR 0 1
40081: PUSH
40082: LD_INT 22
40084: PUSH
40085: LD_OWVAR 2
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 21
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 33
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: PPUSH
40119: CALL_OW 69
40123: ST_TO_ADDR
// if not tmp then
40124: LD_VAR 0 1
40128: NOT
40129: IFFALSE 40133
// exit ;
40131: GO 40159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40133: LD_VAR 0 1
40137: PUSH
40138: LD_INT 1
40140: PPUSH
40141: LD_VAR 0 1
40145: PPUSH
40146: CALL_OW 12
40150: ARRAY
40151: PPUSH
40152: LD_INT 1
40154: PPUSH
40155: CALL_OW 234
// end ;
40159: PPOPN 1
40161: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40162: LD_EXP 70
40166: PUSH
40167: LD_EXP 112
40171: AND
40172: IFFALSE 40313
40174: GO 40176
40176: DISABLE
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
40181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40182: LD_ADDR_VAR 0 3
40186: PUSH
40187: LD_INT 22
40189: PUSH
40190: LD_OWVAR 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 25
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PPUSH
40213: CALL_OW 69
40217: ST_TO_ADDR
// if not tmp then
40218: LD_VAR 0 3
40222: NOT
40223: IFFALSE 40227
// exit ;
40225: GO 40313
// un := tmp [ rand ( 1 , tmp ) ] ;
40227: LD_ADDR_VAR 0 2
40231: PUSH
40232: LD_VAR 0 3
40236: PUSH
40237: LD_INT 1
40239: PPUSH
40240: LD_VAR 0 3
40244: PPUSH
40245: CALL_OW 12
40249: ARRAY
40250: ST_TO_ADDR
// if Crawls ( un ) then
40251: LD_VAR 0 2
40255: PPUSH
40256: CALL_OW 318
40260: IFFALSE 40271
// ComWalk ( un ) ;
40262: LD_VAR 0 2
40266: PPUSH
40267: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40271: LD_VAR 0 2
40275: PPUSH
40276: LD_INT 9
40278: PPUSH
40279: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40283: LD_INT 28
40285: PPUSH
40286: LD_OWVAR 2
40290: PPUSH
40291: LD_INT 2
40293: PPUSH
40294: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40298: LD_INT 29
40300: PPUSH
40301: LD_OWVAR 2
40305: PPUSH
40306: LD_INT 2
40308: PPUSH
40309: CALL_OW 322
// end ;
40313: PPOPN 3
40315: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40316: LD_EXP 70
40320: PUSH
40321: LD_EXP 113
40325: AND
40326: IFFALSE 40437
40328: GO 40330
40330: DISABLE
40331: LD_INT 0
40333: PPUSH
40334: PPUSH
40335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40336: LD_ADDR_VAR 0 3
40340: PUSH
40341: LD_INT 22
40343: PUSH
40344: LD_OWVAR 2
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 25
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PPUSH
40367: CALL_OW 69
40371: ST_TO_ADDR
// if not tmp then
40372: LD_VAR 0 3
40376: NOT
40377: IFFALSE 40381
// exit ;
40379: GO 40437
// un := tmp [ rand ( 1 , tmp ) ] ;
40381: LD_ADDR_VAR 0 2
40385: PUSH
40386: LD_VAR 0 3
40390: PUSH
40391: LD_INT 1
40393: PPUSH
40394: LD_VAR 0 3
40398: PPUSH
40399: CALL_OW 12
40403: ARRAY
40404: ST_TO_ADDR
// if Crawls ( un ) then
40405: LD_VAR 0 2
40409: PPUSH
40410: CALL_OW 318
40414: IFFALSE 40425
// ComWalk ( un ) ;
40416: LD_VAR 0 2
40420: PPUSH
40421: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40425: LD_VAR 0 2
40429: PPUSH
40430: LD_INT 8
40432: PPUSH
40433: CALL_OW 336
// end ;
40437: PPOPN 3
40439: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40440: LD_EXP 70
40444: PUSH
40445: LD_EXP 114
40449: AND
40450: IFFALSE 40594
40452: GO 40454
40454: DISABLE
40455: LD_INT 0
40457: PPUSH
40458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40459: LD_ADDR_VAR 0 2
40463: PUSH
40464: LD_INT 22
40466: PUSH
40467: LD_OWVAR 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 21
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 34
40491: PUSH
40492: LD_INT 12
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 34
40501: PUSH
40502: LD_INT 51
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 34
40511: PUSH
40512: LD_INT 32
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: PPUSH
40530: CALL_OW 69
40534: ST_TO_ADDR
// if not tmp then
40535: LD_VAR 0 2
40539: NOT
40540: IFFALSE 40544
// exit ;
40542: GO 40594
// for i in tmp do
40544: LD_ADDR_VAR 0 1
40548: PUSH
40549: LD_VAR 0 2
40553: PUSH
40554: FOR_IN
40555: IFFALSE 40592
// if GetCargo ( i , mat_artifact ) = 0 then
40557: LD_VAR 0 1
40561: PPUSH
40562: LD_INT 4
40564: PPUSH
40565: CALL_OW 289
40569: PUSH
40570: LD_INT 0
40572: EQUAL
40573: IFFALSE 40590
// SetCargo ( i , mat_siberit , 100 ) ;
40575: LD_VAR 0 1
40579: PPUSH
40580: LD_INT 3
40582: PPUSH
40583: LD_INT 100
40585: PPUSH
40586: CALL_OW 290
40590: GO 40554
40592: POP
40593: POP
// end ;
40594: PPOPN 2
40596: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40597: LD_EXP 70
40601: PUSH
40602: LD_EXP 115
40606: AND
40607: IFFALSE 40790
40609: GO 40611
40611: DISABLE
40612: LD_INT 0
40614: PPUSH
40615: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40616: LD_ADDR_VAR 0 2
40620: PUSH
40621: LD_INT 22
40623: PUSH
40624: LD_OWVAR 2
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PPUSH
40633: CALL_OW 69
40637: ST_TO_ADDR
// if not tmp then
40638: LD_VAR 0 2
40642: NOT
40643: IFFALSE 40647
// exit ;
40645: GO 40790
// for i := 1 to 2 do
40647: LD_ADDR_VAR 0 1
40651: PUSH
40652: DOUBLE
40653: LD_INT 1
40655: DEC
40656: ST_TO_ADDR
40657: LD_INT 2
40659: PUSH
40660: FOR_TO
40661: IFFALSE 40788
// begin uc_side := your_side ;
40663: LD_ADDR_OWVAR 20
40667: PUSH
40668: LD_OWVAR 2
40672: ST_TO_ADDR
// uc_nation := nation_american ;
40673: LD_ADDR_OWVAR 21
40677: PUSH
40678: LD_INT 1
40680: ST_TO_ADDR
// vc_chassis := us_morphling ;
40681: LD_ADDR_OWVAR 37
40685: PUSH
40686: LD_INT 5
40688: ST_TO_ADDR
// vc_engine := engine_siberite ;
40689: LD_ADDR_OWVAR 39
40693: PUSH
40694: LD_INT 3
40696: ST_TO_ADDR
// vc_control := control_computer ;
40697: LD_ADDR_OWVAR 38
40701: PUSH
40702: LD_INT 3
40704: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40705: LD_ADDR_OWVAR 40
40709: PUSH
40710: LD_INT 10
40712: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40713: LD_VAR 0 2
40717: PUSH
40718: LD_INT 1
40720: ARRAY
40721: PPUSH
40722: CALL_OW 310
40726: NOT
40727: IFFALSE 40774
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40729: CALL_OW 45
40733: PPUSH
40734: LD_VAR 0 2
40738: PUSH
40739: LD_INT 1
40741: ARRAY
40742: PPUSH
40743: CALL_OW 250
40747: PPUSH
40748: LD_VAR 0 2
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: PPUSH
40757: CALL_OW 251
40761: PPUSH
40762: LD_INT 12
40764: PPUSH
40765: LD_INT 1
40767: PPUSH
40768: CALL_OW 50
40772: GO 40786
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40774: CALL_OW 45
40778: PPUSH
40779: LD_INT 1
40781: PPUSH
40782: CALL_OW 51
// end ;
40786: GO 40660
40788: POP
40789: POP
// end ;
40790: PPOPN 2
40792: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40793: LD_EXP 70
40797: PUSH
40798: LD_EXP 116
40802: AND
40803: IFFALSE 41025
40805: GO 40807
40807: DISABLE
40808: LD_INT 0
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40816: LD_ADDR_VAR 0 6
40820: PUSH
40821: LD_INT 22
40823: PUSH
40824: LD_OWVAR 2
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 21
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: LD_INT 23
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: LIST
40864: PPUSH
40865: CALL_OW 69
40869: ST_TO_ADDR
// if not tmp then
40870: LD_VAR 0 6
40874: NOT
40875: IFFALSE 40879
// exit ;
40877: GO 41025
// s1 := rand ( 1 , 4 ) ;
40879: LD_ADDR_VAR 0 2
40883: PUSH
40884: LD_INT 1
40886: PPUSH
40887: LD_INT 4
40889: PPUSH
40890: CALL_OW 12
40894: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40895: LD_ADDR_VAR 0 4
40899: PUSH
40900: LD_VAR 0 6
40904: PUSH
40905: LD_INT 1
40907: ARRAY
40908: PPUSH
40909: LD_VAR 0 2
40913: PPUSH
40914: CALL_OW 259
40918: ST_TO_ADDR
// if s1 = 1 then
40919: LD_VAR 0 2
40923: PUSH
40924: LD_INT 1
40926: EQUAL
40927: IFFALSE 40947
// s2 := rand ( 2 , 4 ) else
40929: LD_ADDR_VAR 0 3
40933: PUSH
40934: LD_INT 2
40936: PPUSH
40937: LD_INT 4
40939: PPUSH
40940: CALL_OW 12
40944: ST_TO_ADDR
40945: GO 40955
// s2 := 1 ;
40947: LD_ADDR_VAR 0 3
40951: PUSH
40952: LD_INT 1
40954: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40955: LD_ADDR_VAR 0 5
40959: PUSH
40960: LD_VAR 0 6
40964: PUSH
40965: LD_INT 1
40967: ARRAY
40968: PPUSH
40969: LD_VAR 0 3
40973: PPUSH
40974: CALL_OW 259
40978: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
40979: LD_VAR 0 6
40983: PUSH
40984: LD_INT 1
40986: ARRAY
40987: PPUSH
40988: LD_VAR 0 2
40992: PPUSH
40993: LD_VAR 0 5
40997: PPUSH
40998: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41002: LD_VAR 0 6
41006: PUSH
41007: LD_INT 1
41009: ARRAY
41010: PPUSH
41011: LD_VAR 0 3
41015: PPUSH
41016: LD_VAR 0 4
41020: PPUSH
41021: CALL_OW 237
// end ;
41025: PPOPN 6
41027: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41028: LD_EXP 70
41032: PUSH
41033: LD_EXP 117
41037: AND
41038: IFFALSE 41117
41040: GO 41042
41042: DISABLE
41043: LD_INT 0
41045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41046: LD_ADDR_VAR 0 1
41050: PUSH
41051: LD_INT 22
41053: PUSH
41054: LD_OWVAR 2
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 30
41065: PUSH
41066: LD_INT 3
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PPUSH
41077: CALL_OW 69
41081: ST_TO_ADDR
// if not tmp then
41082: LD_VAR 0 1
41086: NOT
41087: IFFALSE 41091
// exit ;
41089: GO 41117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41091: LD_VAR 0 1
41095: PUSH
41096: LD_INT 1
41098: PPUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 12
41108: ARRAY
41109: PPUSH
41110: LD_INT 1
41112: PPUSH
41113: CALL_OW 234
// end ;
41117: PPOPN 1
41119: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41120: LD_EXP 70
41124: PUSH
41125: LD_EXP 118
41129: AND
41130: IFFALSE 41242
41132: GO 41134
41134: DISABLE
41135: LD_INT 0
41137: PPUSH
41138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41139: LD_ADDR_VAR 0 2
41143: PUSH
41144: LD_INT 22
41146: PUSH
41147: LD_OWVAR 2
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 30
41161: PUSH
41162: LD_INT 27
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_INT 26
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 30
41181: PUSH
41182: LD_INT 28
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PPUSH
41199: CALL_OW 69
41203: ST_TO_ADDR
// if not tmp then
41204: LD_VAR 0 2
41208: NOT
41209: IFFALSE 41213
// exit ;
41211: GO 41242
// for i in tmp do
41213: LD_ADDR_VAR 0 1
41217: PUSH
41218: LD_VAR 0 2
41222: PUSH
41223: FOR_IN
41224: IFFALSE 41240
// SetLives ( i , 1 ) ;
41226: LD_VAR 0 1
41230: PPUSH
41231: LD_INT 1
41233: PPUSH
41234: CALL_OW 234
41238: GO 41223
41240: POP
41241: POP
// end ;
41242: PPOPN 2
41244: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41245: LD_EXP 70
41249: PUSH
41250: LD_EXP 119
41254: AND
41255: IFFALSE 41542
41257: GO 41259
41259: DISABLE
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
41264: PPUSH
// begin i := rand ( 1 , 7 ) ;
41265: LD_ADDR_VAR 0 1
41269: PUSH
41270: LD_INT 1
41272: PPUSH
41273: LD_INT 7
41275: PPUSH
41276: CALL_OW 12
41280: ST_TO_ADDR
// case i of 1 :
41281: LD_VAR 0 1
41285: PUSH
41286: LD_INT 1
41288: DOUBLE
41289: EQUAL
41290: IFTRUE 41294
41292: GO 41304
41294: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41295: LD_STRING earthquake(getX(game), 0, 32)
41297: PPUSH
41298: CALL_OW 559
41302: GO 41542
41304: LD_INT 2
41306: DOUBLE
41307: EQUAL
41308: IFTRUE 41312
41310: GO 41326
41312: POP
// begin ToLua ( displayStucuk(); ) ;
41313: LD_STRING displayStucuk();
41315: PPUSH
41316: CALL_OW 559
// ResetFog ;
41320: CALL_OW 335
// end ; 3 :
41324: GO 41542
41326: LD_INT 3
41328: DOUBLE
41329: EQUAL
41330: IFTRUE 41334
41332: GO 41438
41334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41335: LD_ADDR_VAR 0 2
41339: PUSH
41340: LD_INT 22
41342: PUSH
41343: LD_OWVAR 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 25
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PPUSH
41366: CALL_OW 69
41370: ST_TO_ADDR
// if not tmp then
41371: LD_VAR 0 2
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 41542
// un := tmp [ rand ( 1 , tmp ) ] ;
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_VAR 0 2
41389: PUSH
41390: LD_INT 1
41392: PPUSH
41393: LD_VAR 0 2
41397: PPUSH
41398: CALL_OW 12
41402: ARRAY
41403: ST_TO_ADDR
// if Crawls ( un ) then
41404: LD_VAR 0 3
41408: PPUSH
41409: CALL_OW 318
41413: IFFALSE 41424
// ComWalk ( un ) ;
41415: LD_VAR 0 3
41419: PPUSH
41420: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41424: LD_VAR 0 3
41428: PPUSH
41429: LD_INT 8
41431: PPUSH
41432: CALL_OW 336
// end ; 4 :
41436: GO 41542
41438: LD_INT 4
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41446
41444: GO 41520
41446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41447: LD_ADDR_VAR 0 2
41451: PUSH
41452: LD_INT 22
41454: PUSH
41455: LD_OWVAR 2
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 30
41466: PUSH
41467: LD_INT 29
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PPUSH
41478: CALL_OW 69
41482: ST_TO_ADDR
// if not tmp then
41483: LD_VAR 0 2
41487: NOT
41488: IFFALSE 41492
// exit ;
41490: GO 41542
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41492: LD_VAR 0 2
41496: PUSH
41497: LD_INT 1
41499: ARRAY
41500: PPUSH
41501: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41505: LD_VAR 0 2
41509: PUSH
41510: LD_INT 1
41512: ARRAY
41513: PPUSH
41514: CALL_OW 65
// end ; 5 .. 7 :
41518: GO 41542
41520: LD_INT 5
41522: DOUBLE
41523: GREATEREQUAL
41524: IFFALSE 41532
41526: LD_INT 7
41528: DOUBLE
41529: LESSEQUAL
41530: IFTRUE 41534
41532: GO 41541
41534: POP
// StreamSibBomb ; end ;
41535: CALL 37779 0 0
41539: GO 41542
41541: POP
// end ;
41542: PPOPN 3
41544: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41545: LD_EXP 70
41549: PUSH
41550: LD_EXP 120
41554: AND
41555: IFFALSE 41711
41557: GO 41559
41559: DISABLE
41560: LD_INT 0
41562: PPUSH
41563: PPUSH
41564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41565: LD_ADDR_VAR 0 2
41569: PUSH
41570: LD_INT 81
41572: PUSH
41573: LD_OWVAR 2
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 21
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 21
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PPUSH
41614: CALL_OW 69
41618: ST_TO_ADDR
// if not tmp then
41619: LD_VAR 0 2
41623: NOT
41624: IFFALSE 41628
// exit ;
41626: GO 41711
// p := 0 ;
41628: LD_ADDR_VAR 0 3
41632: PUSH
41633: LD_INT 0
41635: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41636: LD_INT 35
41638: PPUSH
41639: CALL_OW 67
// p := p + 1 ;
41643: LD_ADDR_VAR 0 3
41647: PUSH
41648: LD_VAR 0 3
41652: PUSH
41653: LD_INT 1
41655: PLUS
41656: ST_TO_ADDR
// for i in tmp do
41657: LD_ADDR_VAR 0 1
41661: PUSH
41662: LD_VAR 0 2
41666: PUSH
41667: FOR_IN
41668: IFFALSE 41699
// if GetLives ( i ) < 1000 then
41670: LD_VAR 0 1
41674: PPUSH
41675: CALL_OW 256
41679: PUSH
41680: LD_INT 1000
41682: LESS
41683: IFFALSE 41697
// SetLives ( i , 1000 ) ;
41685: LD_VAR 0 1
41689: PPUSH
41690: LD_INT 1000
41692: PPUSH
41693: CALL_OW 234
41697: GO 41667
41699: POP
41700: POP
// until p > 20 ;
41701: LD_VAR 0 3
41705: PUSH
41706: LD_INT 20
41708: GREATER
41709: IFFALSE 41636
// end ;
41711: PPOPN 3
41713: END
// every 0 0$1 trigger StreamModeActive and sTime do
41714: LD_EXP 70
41718: PUSH
41719: LD_EXP 121
41723: AND
41724: IFFALSE 41759
41726: GO 41728
41728: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41729: LD_INT 28
41731: PPUSH
41732: LD_OWVAR 2
41736: PPUSH
41737: LD_INT 2
41739: PPUSH
41740: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41744: LD_INT 30
41746: PPUSH
41747: LD_OWVAR 2
41751: PPUSH
41752: LD_INT 2
41754: PPUSH
41755: CALL_OW 322
// end ;
41759: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41760: LD_EXP 70
41764: PUSH
41765: LD_EXP 122
41769: AND
41770: IFFALSE 41891
41772: GO 41774
41774: DISABLE
41775: LD_INT 0
41777: PPUSH
41778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41779: LD_ADDR_VAR 0 2
41783: PUSH
41784: LD_INT 22
41786: PUSH
41787: LD_OWVAR 2
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 21
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 3
41808: PUSH
41809: LD_INT 23
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: PPUSH
41828: CALL_OW 69
41832: ST_TO_ADDR
// if not tmp then
41833: LD_VAR 0 2
41837: NOT
41838: IFFALSE 41842
// exit ;
41840: GO 41891
// for i in tmp do
41842: LD_ADDR_VAR 0 1
41846: PUSH
41847: LD_VAR 0 2
41851: PUSH
41852: FOR_IN
41853: IFFALSE 41889
// begin if Crawls ( i ) then
41855: LD_VAR 0 1
41859: PPUSH
41860: CALL_OW 318
41864: IFFALSE 41875
// ComWalk ( i ) ;
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 138
// SetClass ( i , 2 ) ;
41875: LD_VAR 0 1
41879: PPUSH
41880: LD_INT 2
41882: PPUSH
41883: CALL_OW 336
// end ;
41887: GO 41852
41889: POP
41890: POP
// end ;
41891: PPOPN 2
41893: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41894: LD_EXP 70
41898: PUSH
41899: LD_EXP 123
41903: AND
41904: IFFALSE 42192
41906: GO 41908
41908: DISABLE
41909: LD_INT 0
41911: PPUSH
41912: PPUSH
41913: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41914: LD_OWVAR 2
41918: PPUSH
41919: LD_INT 9
41921: PPUSH
41922: LD_INT 1
41924: PPUSH
41925: LD_INT 1
41927: PPUSH
41928: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41932: LD_INT 9
41934: PPUSH
41935: LD_OWVAR 2
41939: PPUSH
41940: CALL_OW 343
// uc_side := 9 ;
41944: LD_ADDR_OWVAR 20
41948: PUSH
41949: LD_INT 9
41951: ST_TO_ADDR
// uc_nation := 2 ;
41952: LD_ADDR_OWVAR 21
41956: PUSH
41957: LD_INT 2
41959: ST_TO_ADDR
// hc_name := Dark Warrior ;
41960: LD_ADDR_OWVAR 26
41964: PUSH
41965: LD_STRING Dark Warrior
41967: ST_TO_ADDR
// hc_gallery :=  ;
41968: LD_ADDR_OWVAR 33
41972: PUSH
41973: LD_STRING 
41975: ST_TO_ADDR
// hc_noskilllimit := true ;
41976: LD_ADDR_OWVAR 76
41980: PUSH
41981: LD_INT 1
41983: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
41984: LD_ADDR_OWVAR 31
41988: PUSH
41989: LD_INT 30
41991: PUSH
41992: LD_INT 30
41994: PUSH
41995: LD_INT 30
41997: PUSH
41998: LD_INT 30
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: ST_TO_ADDR
// un := CreateHuman ;
42007: LD_ADDR_VAR 0 3
42011: PUSH
42012: CALL_OW 44
42016: ST_TO_ADDR
// hc_noskilllimit := false ;
42017: LD_ADDR_OWVAR 76
42021: PUSH
42022: LD_INT 0
42024: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42025: LD_VAR 0 3
42029: PPUSH
42030: LD_INT 1
42032: PPUSH
42033: CALL_OW 51
// ToLua ( playRanger() ) ;
42037: LD_STRING playRanger()
42039: PPUSH
42040: CALL_OW 559
// p := 0 ;
42044: LD_ADDR_VAR 0 2
42048: PUSH
42049: LD_INT 0
42051: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42052: LD_INT 35
42054: PPUSH
42055: CALL_OW 67
// p := p + 1 ;
42059: LD_ADDR_VAR 0 2
42063: PUSH
42064: LD_VAR 0 2
42068: PUSH
42069: LD_INT 1
42071: PLUS
42072: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42073: LD_VAR 0 3
42077: PPUSH
42078: CALL_OW 256
42082: PUSH
42083: LD_INT 1000
42085: LESS
42086: IFFALSE 42100
// SetLives ( un , 1000 ) ;
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_INT 1000
42095: PPUSH
42096: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42100: LD_VAR 0 3
42104: PPUSH
42105: LD_INT 81
42107: PUSH
42108: LD_OWVAR 2
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 91
42119: PUSH
42120: LD_VAR 0 3
42124: PUSH
42125: LD_INT 30
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PPUSH
42137: CALL_OW 69
42141: PPUSH
42142: LD_VAR 0 3
42146: PPUSH
42147: CALL_OW 74
42151: PPUSH
42152: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42156: LD_VAR 0 2
42160: PUSH
42161: LD_INT 80
42163: GREATER
42164: PUSH
42165: LD_VAR 0 3
42169: PPUSH
42170: CALL_OW 301
42174: OR
42175: IFFALSE 42052
// if un then
42177: LD_VAR 0 3
42181: IFFALSE 42192
// RemoveUnit ( un ) ;
42183: LD_VAR 0 3
42187: PPUSH
42188: CALL_OW 64
// end ;
42192: PPOPN 3
42194: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42195: LD_EXP 124
42199: IFFALSE 42315
42201: GO 42203
42203: DISABLE
42204: LD_INT 0
42206: PPUSH
42207: PPUSH
42208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42209: LD_ADDR_VAR 0 2
42213: PUSH
42214: LD_INT 81
42216: PUSH
42217: LD_OWVAR 2
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 21
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PPUSH
42240: CALL_OW 69
42244: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42245: LD_STRING playComputer()
42247: PPUSH
42248: CALL_OW 559
// if not tmp then
42252: LD_VAR 0 2
42256: NOT
42257: IFFALSE 42261
// exit ;
42259: GO 42315
// for i in tmp do
42261: LD_ADDR_VAR 0 1
42265: PUSH
42266: LD_VAR 0 2
42270: PUSH
42271: FOR_IN
42272: IFFALSE 42313
// for j := 1 to 4 do
42274: LD_ADDR_VAR 0 3
42278: PUSH
42279: DOUBLE
42280: LD_INT 1
42282: DEC
42283: ST_TO_ADDR
42284: LD_INT 4
42286: PUSH
42287: FOR_TO
42288: IFFALSE 42309
// SetSkill ( i , j , 10 ) ;
42290: LD_VAR 0 1
42294: PPUSH
42295: LD_VAR 0 3
42299: PPUSH
42300: LD_INT 10
42302: PPUSH
42303: CALL_OW 237
42307: GO 42287
42309: POP
42310: POP
42311: GO 42271
42313: POP
42314: POP
// end ;
42315: PPOPN 3
42317: END
// every 0 0$1 trigger s30 do var i , tmp ;
42318: LD_EXP 125
42322: IFFALSE 42391
42324: GO 42326
42326: DISABLE
42327: LD_INT 0
42329: PPUSH
42330: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42331: LD_ADDR_VAR 0 2
42335: PUSH
42336: LD_INT 22
42338: PUSH
42339: LD_OWVAR 2
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PPUSH
42348: CALL_OW 69
42352: ST_TO_ADDR
// if not tmp then
42353: LD_VAR 0 2
42357: NOT
42358: IFFALSE 42362
// exit ;
42360: GO 42391
// for i in tmp do
42362: LD_ADDR_VAR 0 1
42366: PUSH
42367: LD_VAR 0 2
42371: PUSH
42372: FOR_IN
42373: IFFALSE 42389
// SetLives ( i , 300 ) ;
42375: LD_VAR 0 1
42379: PPUSH
42380: LD_INT 300
42382: PPUSH
42383: CALL_OW 234
42387: GO 42372
42389: POP
42390: POP
// end ;
42391: PPOPN 2
42393: END
// every 0 0$1 trigger s60 do var i , tmp ;
42394: LD_EXP 126
42398: IFFALSE 42467
42400: GO 42402
42402: DISABLE
42403: LD_INT 0
42405: PPUSH
42406: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42407: LD_ADDR_VAR 0 2
42411: PUSH
42412: LD_INT 22
42414: PUSH
42415: LD_OWVAR 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PPUSH
42424: CALL_OW 69
42428: ST_TO_ADDR
// if not tmp then
42429: LD_VAR 0 2
42433: NOT
42434: IFFALSE 42438
// exit ;
42436: GO 42467
// for i in tmp do
42438: LD_ADDR_VAR 0 1
42442: PUSH
42443: LD_VAR 0 2
42447: PUSH
42448: FOR_IN
42449: IFFALSE 42465
// SetLives ( i , 600 ) ;
42451: LD_VAR 0 1
42455: PPUSH
42456: LD_INT 600
42458: PPUSH
42459: CALL_OW 234
42463: GO 42448
42465: POP
42466: POP
// end ;
42467: PPOPN 2
42469: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42470: LD_INT 0
42472: PPUSH
// case cmd of 301 :
42473: LD_VAR 0 1
42477: PUSH
42478: LD_INT 301
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42518
42486: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42487: LD_VAR 0 6
42491: PPUSH
42492: LD_VAR 0 7
42496: PPUSH
42497: LD_VAR 0 8
42501: PPUSH
42502: LD_VAR 0 4
42506: PPUSH
42507: LD_VAR 0 5
42511: PPUSH
42512: CALL 43719 0 5
42516: GO 42639
42518: LD_INT 302
42520: DOUBLE
42521: EQUAL
42522: IFTRUE 42526
42524: GO 42563
42526: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42527: LD_VAR 0 6
42531: PPUSH
42532: LD_VAR 0 7
42536: PPUSH
42537: LD_VAR 0 8
42541: PPUSH
42542: LD_VAR 0 9
42546: PPUSH
42547: LD_VAR 0 4
42551: PPUSH
42552: LD_VAR 0 5
42556: PPUSH
42557: CALL 43810 0 6
42561: GO 42639
42563: LD_INT 303
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42608
42571: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42572: LD_VAR 0 6
42576: PPUSH
42577: LD_VAR 0 7
42581: PPUSH
42582: LD_VAR 0 8
42586: PPUSH
42587: LD_VAR 0 9
42591: PPUSH
42592: LD_VAR 0 4
42596: PPUSH
42597: LD_VAR 0 5
42601: PPUSH
42602: CALL 42644 0 6
42606: GO 42639
42608: LD_INT 304
42610: DOUBLE
42611: EQUAL
42612: IFTRUE 42616
42614: GO 42638
42616: POP
// hHackTeleport ( unit , x , y ) ; end ;
42617: LD_VAR 0 2
42621: PPUSH
42622: LD_VAR 0 4
42626: PPUSH
42627: LD_VAR 0 5
42631: PPUSH
42632: CALL 44403 0 3
42636: GO 42639
42638: POP
// end ;
42639: LD_VAR 0 12
42643: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42644: LD_INT 0
42646: PPUSH
42647: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42648: LD_VAR 0 1
42652: PUSH
42653: LD_INT 1
42655: LESS
42656: PUSH
42657: LD_VAR 0 1
42661: PUSH
42662: LD_INT 3
42664: GREATER
42665: OR
42666: PUSH
42667: LD_VAR 0 5
42671: PPUSH
42672: LD_VAR 0 6
42676: PPUSH
42677: CALL_OW 428
42681: OR
42682: IFFALSE 42686
// exit ;
42684: GO 43406
// uc_side := your_side ;
42686: LD_ADDR_OWVAR 20
42690: PUSH
42691: LD_OWVAR 2
42695: ST_TO_ADDR
// uc_nation := nation ;
42696: LD_ADDR_OWVAR 21
42700: PUSH
42701: LD_VAR 0 1
42705: ST_TO_ADDR
// bc_level = 1 ;
42706: LD_ADDR_OWVAR 43
42710: PUSH
42711: LD_INT 1
42713: ST_TO_ADDR
// case btype of 1 :
42714: LD_VAR 0 2
42718: PUSH
42719: LD_INT 1
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42738
42727: POP
// bc_type := b_depot ; 2 :
42728: LD_ADDR_OWVAR 42
42732: PUSH
42733: LD_INT 0
42735: ST_TO_ADDR
42736: GO 43350
42738: LD_INT 2
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 42757
42746: POP
// bc_type := b_warehouse ; 3 :
42747: LD_ADDR_OWVAR 42
42751: PUSH
42752: LD_INT 1
42754: ST_TO_ADDR
42755: GO 43350
42757: LD_INT 3
42759: DOUBLE
42760: EQUAL
42761: IFTRUE 42765
42763: GO 42776
42765: POP
// bc_type := b_lab ; 4 .. 9 :
42766: LD_ADDR_OWVAR 42
42770: PUSH
42771: LD_INT 6
42773: ST_TO_ADDR
42774: GO 43350
42776: LD_INT 4
42778: DOUBLE
42779: GREATEREQUAL
42780: IFFALSE 42788
42782: LD_INT 9
42784: DOUBLE
42785: LESSEQUAL
42786: IFTRUE 42790
42788: GO 42842
42790: POP
// begin bc_type := b_lab_half ;
42791: LD_ADDR_OWVAR 42
42795: PUSH
42796: LD_INT 7
42798: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42799: LD_ADDR_OWVAR 44
42803: PUSH
42804: LD_INT 10
42806: PUSH
42807: LD_INT 11
42809: PUSH
42810: LD_INT 12
42812: PUSH
42813: LD_INT 15
42815: PUSH
42816: LD_INT 14
42818: PUSH
42819: LD_INT 13
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: PUSH
42830: LD_VAR 0 2
42834: PUSH
42835: LD_INT 3
42837: MINUS
42838: ARRAY
42839: ST_TO_ADDR
// end ; 10 .. 13 :
42840: GO 43350
42842: LD_INT 10
42844: DOUBLE
42845: GREATEREQUAL
42846: IFFALSE 42854
42848: LD_INT 13
42850: DOUBLE
42851: LESSEQUAL
42852: IFTRUE 42856
42854: GO 42933
42856: POP
// begin bc_type := b_lab_full ;
42857: LD_ADDR_OWVAR 42
42861: PUSH
42862: LD_INT 8
42864: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42865: LD_ADDR_OWVAR 44
42869: PUSH
42870: LD_INT 10
42872: PUSH
42873: LD_INT 12
42875: PUSH
42876: LD_INT 14
42878: PUSH
42879: LD_INT 13
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: PUSH
42888: LD_VAR 0 2
42892: PUSH
42893: LD_INT 9
42895: MINUS
42896: ARRAY
42897: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42898: LD_ADDR_OWVAR 45
42902: PUSH
42903: LD_INT 11
42905: PUSH
42906: LD_INT 15
42908: PUSH
42909: LD_INT 12
42911: PUSH
42912: LD_INT 15
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: PUSH
42921: LD_VAR 0 2
42925: PUSH
42926: LD_INT 9
42928: MINUS
42929: ARRAY
42930: ST_TO_ADDR
// end ; 14 :
42931: GO 43350
42933: LD_INT 14
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42941
42939: GO 42952
42941: POP
// bc_type := b_workshop ; 15 :
42942: LD_ADDR_OWVAR 42
42946: PUSH
42947: LD_INT 2
42949: ST_TO_ADDR
42950: GO 43350
42952: LD_INT 15
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42971
42960: POP
// bc_type := b_factory ; 16 :
42961: LD_ADDR_OWVAR 42
42965: PUSH
42966: LD_INT 3
42968: ST_TO_ADDR
42969: GO 43350
42971: LD_INT 16
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 42979
42977: GO 42990
42979: POP
// bc_type := b_ext_gun ; 17 :
42980: LD_ADDR_OWVAR 42
42984: PUSH
42985: LD_INT 17
42987: ST_TO_ADDR
42988: GO 43350
42990: LD_INT 17
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 42998
42996: GO 43026
42998: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
42999: LD_ADDR_OWVAR 42
43003: PUSH
43004: LD_INT 19
43006: PUSH
43007: LD_INT 23
43009: PUSH
43010: LD_INT 19
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: PUSH
43018: LD_VAR 0 1
43022: ARRAY
43023: ST_TO_ADDR
43024: GO 43350
43026: LD_INT 18
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43034
43032: GO 43045
43034: POP
// bc_type := b_ext_radar ; 19 :
43035: LD_ADDR_OWVAR 42
43039: PUSH
43040: LD_INT 20
43042: ST_TO_ADDR
43043: GO 43350
43045: LD_INT 19
43047: DOUBLE
43048: EQUAL
43049: IFTRUE 43053
43051: GO 43064
43053: POP
// bc_type := b_ext_radio ; 20 :
43054: LD_ADDR_OWVAR 42
43058: PUSH
43059: LD_INT 22
43061: ST_TO_ADDR
43062: GO 43350
43064: LD_INT 20
43066: DOUBLE
43067: EQUAL
43068: IFTRUE 43072
43070: GO 43083
43072: POP
// bc_type := b_ext_siberium ; 21 :
43073: LD_ADDR_OWVAR 42
43077: PUSH
43078: LD_INT 21
43080: ST_TO_ADDR
43081: GO 43350
43083: LD_INT 21
43085: DOUBLE
43086: EQUAL
43087: IFTRUE 43091
43089: GO 43102
43091: POP
// bc_type := b_ext_computer ; 22 :
43092: LD_ADDR_OWVAR 42
43096: PUSH
43097: LD_INT 24
43099: ST_TO_ADDR
43100: GO 43350
43102: LD_INT 22
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43121
43110: POP
// bc_type := b_ext_track ; 23 :
43111: LD_ADDR_OWVAR 42
43115: PUSH
43116: LD_INT 16
43118: ST_TO_ADDR
43119: GO 43350
43121: LD_INT 23
43123: DOUBLE
43124: EQUAL
43125: IFTRUE 43129
43127: GO 43140
43129: POP
// bc_type := b_ext_laser ; 24 :
43130: LD_ADDR_OWVAR 42
43134: PUSH
43135: LD_INT 25
43137: ST_TO_ADDR
43138: GO 43350
43140: LD_INT 24
43142: DOUBLE
43143: EQUAL
43144: IFTRUE 43148
43146: GO 43159
43148: POP
// bc_type := b_control_tower ; 25 :
43149: LD_ADDR_OWVAR 42
43153: PUSH
43154: LD_INT 36
43156: ST_TO_ADDR
43157: GO 43350
43159: LD_INT 25
43161: DOUBLE
43162: EQUAL
43163: IFTRUE 43167
43165: GO 43178
43167: POP
// bc_type := b_breastwork ; 26 :
43168: LD_ADDR_OWVAR 42
43172: PUSH
43173: LD_INT 31
43175: ST_TO_ADDR
43176: GO 43350
43178: LD_INT 26
43180: DOUBLE
43181: EQUAL
43182: IFTRUE 43186
43184: GO 43197
43186: POP
// bc_type := b_bunker ; 27 :
43187: LD_ADDR_OWVAR 42
43191: PUSH
43192: LD_INT 32
43194: ST_TO_ADDR
43195: GO 43350
43197: LD_INT 27
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43216
43205: POP
// bc_type := b_turret ; 28 :
43206: LD_ADDR_OWVAR 42
43210: PUSH
43211: LD_INT 33
43213: ST_TO_ADDR
43214: GO 43350
43216: LD_INT 28
43218: DOUBLE
43219: EQUAL
43220: IFTRUE 43224
43222: GO 43235
43224: POP
// bc_type := b_armoury ; 29 :
43225: LD_ADDR_OWVAR 42
43229: PUSH
43230: LD_INT 4
43232: ST_TO_ADDR
43233: GO 43350
43235: LD_INT 29
43237: DOUBLE
43238: EQUAL
43239: IFTRUE 43243
43241: GO 43254
43243: POP
// bc_type := b_barracks ; 30 :
43244: LD_ADDR_OWVAR 42
43248: PUSH
43249: LD_INT 5
43251: ST_TO_ADDR
43252: GO 43350
43254: LD_INT 30
43256: DOUBLE
43257: EQUAL
43258: IFTRUE 43262
43260: GO 43273
43262: POP
// bc_type := b_solar_power ; 31 :
43263: LD_ADDR_OWVAR 42
43267: PUSH
43268: LD_INT 27
43270: ST_TO_ADDR
43271: GO 43350
43273: LD_INT 31
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43292
43281: POP
// bc_type := b_oil_power ; 32 :
43282: LD_ADDR_OWVAR 42
43286: PUSH
43287: LD_INT 26
43289: ST_TO_ADDR
43290: GO 43350
43292: LD_INT 32
43294: DOUBLE
43295: EQUAL
43296: IFTRUE 43300
43298: GO 43311
43300: POP
// bc_type := b_siberite_power ; 33 :
43301: LD_ADDR_OWVAR 42
43305: PUSH
43306: LD_INT 28
43308: ST_TO_ADDR
43309: GO 43350
43311: LD_INT 33
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 43330
43319: POP
// bc_type := b_oil_mine ; 34 :
43320: LD_ADDR_OWVAR 42
43324: PUSH
43325: LD_INT 29
43327: ST_TO_ADDR
43328: GO 43350
43330: LD_INT 34
43332: DOUBLE
43333: EQUAL
43334: IFTRUE 43338
43336: GO 43349
43338: POP
// bc_type := b_siberite_mine ; end ;
43339: LD_ADDR_OWVAR 42
43343: PUSH
43344: LD_INT 30
43346: ST_TO_ADDR
43347: GO 43350
43349: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43350: LD_ADDR_VAR 0 8
43354: PUSH
43355: LD_VAR 0 5
43359: PPUSH
43360: LD_VAR 0 6
43364: PPUSH
43365: LD_VAR 0 3
43369: PPUSH
43370: CALL_OW 47
43374: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43375: LD_OWVAR 42
43379: PUSH
43380: LD_INT 32
43382: PUSH
43383: LD_INT 33
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: IN
43390: IFFALSE 43406
// PlaceWeaponTurret ( b , weapon ) ;
43392: LD_VAR 0 8
43396: PPUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: CALL_OW 431
// end ;
43406: LD_VAR 0 7
43410: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43411: LD_INT 0
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43417: LD_ADDR_VAR 0 4
43421: PUSH
43422: LD_INT 22
43424: PUSH
43425: LD_OWVAR 2
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 30
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 30
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PPUSH
43466: CALL_OW 69
43470: ST_TO_ADDR
// if not tmp then
43471: LD_VAR 0 4
43475: NOT
43476: IFFALSE 43480
// exit ;
43478: GO 43539
// for i in tmp do
43480: LD_ADDR_VAR 0 2
43484: PUSH
43485: LD_VAR 0 4
43489: PUSH
43490: FOR_IN
43491: IFFALSE 43537
// for j = 1 to 3 do
43493: LD_ADDR_VAR 0 3
43497: PUSH
43498: DOUBLE
43499: LD_INT 1
43501: DEC
43502: ST_TO_ADDR
43503: LD_INT 3
43505: PUSH
43506: FOR_TO
43507: IFFALSE 43533
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43509: LD_VAR 0 2
43513: PPUSH
43514: CALL_OW 274
43518: PPUSH
43519: LD_VAR 0 3
43523: PPUSH
43524: LD_INT 99999
43526: PPUSH
43527: CALL_OW 277
43531: GO 43506
43533: POP
43534: POP
43535: GO 43490
43537: POP
43538: POP
// end ;
43539: LD_VAR 0 1
43543: RET
// export function hHackSetLevel10 ; var i , j ; begin
43544: LD_INT 0
43546: PPUSH
43547: PPUSH
43548: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43549: LD_ADDR_VAR 0 2
43553: PUSH
43554: LD_INT 21
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PPUSH
43564: CALL_OW 69
43568: PUSH
43569: FOR_IN
43570: IFFALSE 43622
// if IsSelected ( i ) then
43572: LD_VAR 0 2
43576: PPUSH
43577: CALL_OW 306
43581: IFFALSE 43620
// begin for j := 1 to 4 do
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: DOUBLE
43589: LD_INT 1
43591: DEC
43592: ST_TO_ADDR
43593: LD_INT 4
43595: PUSH
43596: FOR_TO
43597: IFFALSE 43618
// SetSkill ( i , j , 10 ) ;
43599: LD_VAR 0 2
43603: PPUSH
43604: LD_VAR 0 3
43608: PPUSH
43609: LD_INT 10
43611: PPUSH
43612: CALL_OW 237
43616: GO 43596
43618: POP
43619: POP
// end ;
43620: GO 43569
43622: POP
43623: POP
// end ;
43624: LD_VAR 0 1
43628: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43629: LD_INT 0
43631: PPUSH
43632: PPUSH
43633: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43634: LD_ADDR_VAR 0 2
43638: PUSH
43639: LD_INT 22
43641: PUSH
43642: LD_OWVAR 2
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 21
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PPUSH
43665: CALL_OW 69
43669: PUSH
43670: FOR_IN
43671: IFFALSE 43712
// begin for j := 1 to 4 do
43673: LD_ADDR_VAR 0 3
43677: PUSH
43678: DOUBLE
43679: LD_INT 1
43681: DEC
43682: ST_TO_ADDR
43683: LD_INT 4
43685: PUSH
43686: FOR_TO
43687: IFFALSE 43708
// SetSkill ( i , j , 10 ) ;
43689: LD_VAR 0 2
43693: PPUSH
43694: LD_VAR 0 3
43698: PPUSH
43699: LD_INT 10
43701: PPUSH
43702: CALL_OW 237
43706: GO 43686
43708: POP
43709: POP
// end ;
43710: GO 43670
43712: POP
43713: POP
// end ;
43714: LD_VAR 0 1
43718: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43719: LD_INT 0
43721: PPUSH
// uc_side := your_side ;
43722: LD_ADDR_OWVAR 20
43726: PUSH
43727: LD_OWVAR 2
43731: ST_TO_ADDR
// uc_nation := nation ;
43732: LD_ADDR_OWVAR 21
43736: PUSH
43737: LD_VAR 0 1
43741: ST_TO_ADDR
// InitHc ;
43742: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43746: LD_INT 0
43748: PPUSH
43749: LD_VAR 0 2
43753: PPUSH
43754: LD_VAR 0 3
43758: PPUSH
43759: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43763: LD_VAR 0 4
43767: PPUSH
43768: LD_VAR 0 5
43772: PPUSH
43773: CALL_OW 428
43777: PUSH
43778: LD_INT 0
43780: EQUAL
43781: IFFALSE 43805
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43783: CALL_OW 44
43787: PPUSH
43788: LD_VAR 0 4
43792: PPUSH
43793: LD_VAR 0 5
43797: PPUSH
43798: LD_INT 1
43800: PPUSH
43801: CALL_OW 48
// end ;
43805: LD_VAR 0 6
43809: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43810: LD_INT 0
43812: PPUSH
43813: PPUSH
// uc_side := your_side ;
43814: LD_ADDR_OWVAR 20
43818: PUSH
43819: LD_OWVAR 2
43823: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43824: LD_VAR 0 1
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: LD_INT 4
43840: PUSH
43841: LD_INT 5
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: IN
43851: IFFALSE 43863
// uc_nation := nation_american else
43853: LD_ADDR_OWVAR 21
43857: PUSH
43858: LD_INT 1
43860: ST_TO_ADDR
43861: GO 43906
// if chassis in [ 11 , 12 , 13 , 14 ] then
43863: LD_VAR 0 1
43867: PUSH
43868: LD_INT 11
43870: PUSH
43871: LD_INT 12
43873: PUSH
43874: LD_INT 13
43876: PUSH
43877: LD_INT 14
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: IN
43886: IFFALSE 43898
// uc_nation := nation_arabian else
43888: LD_ADDR_OWVAR 21
43892: PUSH
43893: LD_INT 2
43895: ST_TO_ADDR
43896: GO 43906
// uc_nation := nation_russian ;
43898: LD_ADDR_OWVAR 21
43902: PUSH
43903: LD_INT 3
43905: ST_TO_ADDR
// vc_chassis := chassis ;
43906: LD_ADDR_OWVAR 37
43910: PUSH
43911: LD_VAR 0 1
43915: ST_TO_ADDR
// vc_engine := engine ;
43916: LD_ADDR_OWVAR 39
43920: PUSH
43921: LD_VAR 0 2
43925: ST_TO_ADDR
// vc_control := control ;
43926: LD_ADDR_OWVAR 38
43930: PUSH
43931: LD_VAR 0 3
43935: ST_TO_ADDR
// vc_weapon := weapon ;
43936: LD_ADDR_OWVAR 40
43940: PUSH
43941: LD_VAR 0 4
43945: ST_TO_ADDR
// un := CreateVehicle ;
43946: LD_ADDR_VAR 0 8
43950: PUSH
43951: CALL_OW 45
43955: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43956: LD_VAR 0 8
43960: PPUSH
43961: LD_INT 0
43963: PPUSH
43964: LD_INT 5
43966: PPUSH
43967: CALL_OW 12
43971: PPUSH
43972: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
43976: LD_VAR 0 8
43980: PPUSH
43981: LD_VAR 0 5
43985: PPUSH
43986: LD_VAR 0 6
43990: PPUSH
43991: LD_INT 1
43993: PPUSH
43994: CALL_OW 48
// end ;
43998: LD_VAR 0 7
44002: RET
// export hInvincible ; every 1 do
44003: GO 44005
44005: DISABLE
// hInvincible := [ ] ;
44006: LD_ADDR_EXP 127
44010: PUSH
44011: EMPTY
44012: ST_TO_ADDR
44013: END
// every 10 do var i ;
44014: GO 44016
44016: DISABLE
44017: LD_INT 0
44019: PPUSH
// begin enable ;
44020: ENABLE
// if not hInvincible then
44021: LD_EXP 127
44025: NOT
44026: IFFALSE 44030
// exit ;
44028: GO 44074
// for i in hInvincible do
44030: LD_ADDR_VAR 0 1
44034: PUSH
44035: LD_EXP 127
44039: PUSH
44040: FOR_IN
44041: IFFALSE 44072
// if GetLives ( i ) < 1000 then
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 256
44052: PUSH
44053: LD_INT 1000
44055: LESS
44056: IFFALSE 44070
// SetLives ( i , 1000 ) ;
44058: LD_VAR 0 1
44062: PPUSH
44063: LD_INT 1000
44065: PPUSH
44066: CALL_OW 234
44070: GO 44040
44072: POP
44073: POP
// end ;
44074: PPOPN 1
44076: END
// export function hHackInvincible ; var i ; begin
44077: LD_INT 0
44079: PPUSH
44080: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44081: LD_ADDR_VAR 0 2
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 21
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 21
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: PPUSH
44114: CALL_OW 69
44118: PUSH
44119: FOR_IN
44120: IFFALSE 44181
// if IsSelected ( i ) then
44122: LD_VAR 0 2
44126: PPUSH
44127: CALL_OW 306
44131: IFFALSE 44179
// begin if i in hInvincible then
44133: LD_VAR 0 2
44137: PUSH
44138: LD_EXP 127
44142: IN
44143: IFFALSE 44163
// hInvincible := hInvincible diff i else
44145: LD_ADDR_EXP 127
44149: PUSH
44150: LD_EXP 127
44154: PUSH
44155: LD_VAR 0 2
44159: DIFF
44160: ST_TO_ADDR
44161: GO 44179
// hInvincible := hInvincible union i ;
44163: LD_ADDR_EXP 127
44167: PUSH
44168: LD_EXP 127
44172: PUSH
44173: LD_VAR 0 2
44177: UNION
44178: ST_TO_ADDR
// end ;
44179: GO 44119
44181: POP
44182: POP
// end ;
44183: LD_VAR 0 1
44187: RET
// export function hHackInvisible ; var i , j ; begin
44188: LD_INT 0
44190: PPUSH
44191: PPUSH
44192: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44193: LD_ADDR_VAR 0 2
44197: PUSH
44198: LD_INT 21
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PPUSH
44208: CALL_OW 69
44212: PUSH
44213: FOR_IN
44214: IFFALSE 44238
// if IsSelected ( i ) then
44216: LD_VAR 0 2
44220: PPUSH
44221: CALL_OW 306
44225: IFFALSE 44236
// ComForceInvisible ( i ) ;
44227: LD_VAR 0 2
44231: PPUSH
44232: CALL_OW 496
44236: GO 44213
44238: POP
44239: POP
// end ;
44240: LD_VAR 0 1
44244: RET
// export function hHackChangeYourSide ; begin
44245: LD_INT 0
44247: PPUSH
// if your_side = 8 then
44248: LD_OWVAR 2
44252: PUSH
44253: LD_INT 8
44255: EQUAL
44256: IFFALSE 44268
// your_side := 0 else
44258: LD_ADDR_OWVAR 2
44262: PUSH
44263: LD_INT 0
44265: ST_TO_ADDR
44266: GO 44282
// your_side := your_side + 1 ;
44268: LD_ADDR_OWVAR 2
44272: PUSH
44273: LD_OWVAR 2
44277: PUSH
44278: LD_INT 1
44280: PLUS
44281: ST_TO_ADDR
// end ;
44282: LD_VAR 0 1
44286: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44287: LD_INT 0
44289: PPUSH
44290: PPUSH
44291: PPUSH
// for i in all_units do
44292: LD_ADDR_VAR 0 2
44296: PUSH
44297: LD_OWVAR 3
44301: PUSH
44302: FOR_IN
44303: IFFALSE 44381
// if IsSelected ( i ) then
44305: LD_VAR 0 2
44309: PPUSH
44310: CALL_OW 306
44314: IFFALSE 44379
// begin j := GetSide ( i ) ;
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_VAR 0 2
44325: PPUSH
44326: CALL_OW 255
44330: ST_TO_ADDR
// if j = 8 then
44331: LD_VAR 0 3
44335: PUSH
44336: LD_INT 8
44338: EQUAL
44339: IFFALSE 44351
// j := 0 else
44341: LD_ADDR_VAR 0 3
44345: PUSH
44346: LD_INT 0
44348: ST_TO_ADDR
44349: GO 44365
// j := j + 1 ;
44351: LD_ADDR_VAR 0 3
44355: PUSH
44356: LD_VAR 0 3
44360: PUSH
44361: LD_INT 1
44363: PLUS
44364: ST_TO_ADDR
// SetSide ( i , j ) ;
44365: LD_VAR 0 2
44369: PPUSH
44370: LD_VAR 0 3
44374: PPUSH
44375: CALL_OW 235
// end ;
44379: GO 44302
44381: POP
44382: POP
// end ;
44383: LD_VAR 0 1
44387: RET
// export function hHackFog ; begin
44388: LD_INT 0
44390: PPUSH
// FogOff ( true ) ;
44391: LD_INT 1
44393: PPUSH
44394: CALL_OW 344
// end ;
44398: LD_VAR 0 1
44402: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44403: LD_INT 0
44405: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44406: LD_VAR 0 1
44410: PPUSH
44411: LD_VAR 0 2
44415: PPUSH
44416: LD_VAR 0 3
44420: PPUSH
44421: LD_INT 1
44423: PPUSH
44424: LD_INT 1
44426: PPUSH
44427: CALL_OW 483
// CenterOnXY ( x , y ) ;
44431: LD_VAR 0 2
44435: PPUSH
44436: LD_VAR 0 3
44440: PPUSH
44441: CALL_OW 84
// end ;
44445: LD_VAR 0 4
44449: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44450: LD_INT 0
44452: PPUSH
44453: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44454: LD_VAR 0 1
44458: NOT
44459: PUSH
44460: LD_VAR 0 2
44464: PPUSH
44465: LD_VAR 0 3
44469: PPUSH
44470: CALL_OW 488
44474: NOT
44475: OR
44476: PUSH
44477: LD_VAR 0 1
44481: PPUSH
44482: CALL_OW 266
44486: PUSH
44487: LD_INT 3
44489: NONEQUAL
44490: PUSH
44491: LD_VAR 0 1
44495: PPUSH
44496: CALL_OW 247
44500: PUSH
44501: LD_INT 1
44503: EQUAL
44504: NOT
44505: AND
44506: OR
44507: IFFALSE 44511
// exit ;
44509: GO 44660
// if GetType ( factory ) = unit_human then
44511: LD_VAR 0 1
44515: PPUSH
44516: CALL_OW 247
44520: PUSH
44521: LD_INT 1
44523: EQUAL
44524: IFFALSE 44541
// factory := IsInUnit ( factory ) ;
44526: LD_ADDR_VAR 0 1
44530: PUSH
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 310
44540: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44541: LD_VAR 0 1
44545: PPUSH
44546: CALL_OW 266
44550: PUSH
44551: LD_INT 3
44553: NONEQUAL
44554: IFFALSE 44558
// exit ;
44556: GO 44660
// if HexInfo ( x , y ) = factory then
44558: LD_VAR 0 2
44562: PPUSH
44563: LD_VAR 0 3
44567: PPUSH
44568: CALL_OW 428
44572: PUSH
44573: LD_VAR 0 1
44577: EQUAL
44578: IFFALSE 44605
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44580: LD_ADDR_EXP 128
44584: PUSH
44585: LD_EXP 128
44589: PPUSH
44590: LD_VAR 0 1
44594: PPUSH
44595: LD_INT 0
44597: PPUSH
44598: CALL_OW 1
44602: ST_TO_ADDR
44603: GO 44656
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44605: LD_ADDR_EXP 128
44609: PUSH
44610: LD_EXP 128
44614: PPUSH
44615: LD_VAR 0 1
44619: PPUSH
44620: LD_VAR 0 1
44624: PPUSH
44625: CALL_OW 255
44629: PUSH
44630: LD_VAR 0 1
44634: PUSH
44635: LD_VAR 0 2
44639: PUSH
44640: LD_VAR 0 3
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: PPUSH
44651: CALL_OW 1
44655: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44656: CALL 44665 0 0
// end ;
44660: LD_VAR 0 4
44664: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44665: LD_INT 0
44667: PPUSH
44668: PPUSH
44669: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44670: LD_STRING resetFactoryWaypoint();
44672: PPUSH
44673: CALL_OW 559
// if factoryWaypoints then
44677: LD_EXP 128
44681: IFFALSE 44807
// begin list := PrepareArray ( factoryWaypoints ) ;
44683: LD_ADDR_VAR 0 3
44687: PUSH
44688: LD_EXP 128
44692: PPUSH
44693: CALL 91257 0 1
44697: ST_TO_ADDR
// for i := 1 to list do
44698: LD_ADDR_VAR 0 2
44702: PUSH
44703: DOUBLE
44704: LD_INT 1
44706: DEC
44707: ST_TO_ADDR
44708: LD_VAR 0 3
44712: PUSH
44713: FOR_TO
44714: IFFALSE 44805
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44716: LD_STRING setFactoryWaypointXY(
44718: PUSH
44719: LD_VAR 0 3
44723: PUSH
44724: LD_VAR 0 2
44728: ARRAY
44729: PUSH
44730: LD_INT 1
44732: ARRAY
44733: STR
44734: PUSH
44735: LD_STRING ,
44737: STR
44738: PUSH
44739: LD_VAR 0 3
44743: PUSH
44744: LD_VAR 0 2
44748: ARRAY
44749: PUSH
44750: LD_INT 2
44752: ARRAY
44753: STR
44754: PUSH
44755: LD_STRING ,
44757: STR
44758: PUSH
44759: LD_VAR 0 3
44763: PUSH
44764: LD_VAR 0 2
44768: ARRAY
44769: PUSH
44770: LD_INT 3
44772: ARRAY
44773: STR
44774: PUSH
44775: LD_STRING ,
44777: STR
44778: PUSH
44779: LD_VAR 0 3
44783: PUSH
44784: LD_VAR 0 2
44788: ARRAY
44789: PUSH
44790: LD_INT 4
44792: ARRAY
44793: STR
44794: PUSH
44795: LD_STRING )
44797: STR
44798: PPUSH
44799: CALL_OW 559
44803: GO 44713
44805: POP
44806: POP
// end ; end ;
44807: LD_VAR 0 1
44811: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
44812: LD_INT 0
44814: PPUSH
// if HexInfo ( x , y ) = warehouse then
44815: LD_VAR 0 2
44819: PPUSH
44820: LD_VAR 0 3
44824: PPUSH
44825: CALL_OW 428
44829: PUSH
44830: LD_VAR 0 1
44834: EQUAL
44835: IFFALSE 44862
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
44837: LD_ADDR_EXP 129
44841: PUSH
44842: LD_EXP 129
44846: PPUSH
44847: LD_VAR 0 1
44851: PPUSH
44852: LD_INT 0
44854: PPUSH
44855: CALL_OW 1
44859: ST_TO_ADDR
44860: GO 44913
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
44862: LD_ADDR_EXP 129
44866: PUSH
44867: LD_EXP 129
44871: PPUSH
44872: LD_VAR 0 1
44876: PPUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: CALL_OW 255
44886: PUSH
44887: LD_VAR 0 1
44891: PUSH
44892: LD_VAR 0 2
44896: PUSH
44897: LD_VAR 0 3
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: PPUSH
44908: CALL_OW 1
44912: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
44913: CALL 44922 0 0
// end ;
44917: LD_VAR 0 4
44921: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
44922: LD_INT 0
44924: PPUSH
44925: PPUSH
44926: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
44927: LD_STRING resetWarehouseGatheringPoints();
44929: PPUSH
44930: CALL_OW 559
// if warehouseGatheringPoints then
44934: LD_EXP 129
44938: IFFALSE 45064
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
44940: LD_ADDR_VAR 0 3
44944: PUSH
44945: LD_EXP 129
44949: PPUSH
44950: CALL 91257 0 1
44954: ST_TO_ADDR
// for i := 1 to list do
44955: LD_ADDR_VAR 0 2
44959: PUSH
44960: DOUBLE
44961: LD_INT 1
44963: DEC
44964: ST_TO_ADDR
44965: LD_VAR 0 3
44969: PUSH
44970: FOR_TO
44971: IFFALSE 45062
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44973: LD_STRING setWarehouseGatheringPointXY(
44975: PUSH
44976: LD_VAR 0 3
44980: PUSH
44981: LD_VAR 0 2
44985: ARRAY
44986: PUSH
44987: LD_INT 1
44989: ARRAY
44990: STR
44991: PUSH
44992: LD_STRING ,
44994: STR
44995: PUSH
44996: LD_VAR 0 3
45000: PUSH
45001: LD_VAR 0 2
45005: ARRAY
45006: PUSH
45007: LD_INT 2
45009: ARRAY
45010: STR
45011: PUSH
45012: LD_STRING ,
45014: STR
45015: PUSH
45016: LD_VAR 0 3
45020: PUSH
45021: LD_VAR 0 2
45025: ARRAY
45026: PUSH
45027: LD_INT 3
45029: ARRAY
45030: STR
45031: PUSH
45032: LD_STRING ,
45034: STR
45035: PUSH
45036: LD_VAR 0 3
45040: PUSH
45041: LD_VAR 0 2
45045: ARRAY
45046: PUSH
45047: LD_INT 4
45049: ARRAY
45050: STR
45051: PUSH
45052: LD_STRING )
45054: STR
45055: PPUSH
45056: CALL_OW 559
45060: GO 44970
45062: POP
45063: POP
// end ; end ;
45064: LD_VAR 0 1
45068: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
45069: LD_EXP 129
45073: IFFALSE 45758
45075: GO 45077
45077: DISABLE
45078: LD_INT 0
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
// begin enable ;
45089: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_EXP 129
45099: PPUSH
45100: CALL 91257 0 1
45104: ST_TO_ADDR
// if not list then
45105: LD_VAR 0 3
45109: NOT
45110: IFFALSE 45114
// exit ;
45112: GO 45758
// for i := 1 to list do
45114: LD_ADDR_VAR 0 1
45118: PUSH
45119: DOUBLE
45120: LD_INT 1
45122: DEC
45123: ST_TO_ADDR
45124: LD_VAR 0 3
45128: PUSH
45129: FOR_TO
45130: IFFALSE 45756
// begin depot := list [ i ] [ 2 ] ;
45132: LD_ADDR_VAR 0 8
45136: PUSH
45137: LD_VAR 0 3
45141: PUSH
45142: LD_VAR 0 1
45146: ARRAY
45147: PUSH
45148: LD_INT 2
45150: ARRAY
45151: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45152: LD_ADDR_VAR 0 5
45156: PUSH
45157: LD_VAR 0 3
45161: PUSH
45162: LD_VAR 0 1
45166: ARRAY
45167: PUSH
45168: LD_INT 1
45170: ARRAY
45171: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45172: LD_VAR 0 8
45176: PPUSH
45177: CALL_OW 301
45181: PUSH
45182: LD_VAR 0 5
45186: PUSH
45187: LD_VAR 0 8
45191: PPUSH
45192: CALL_OW 255
45196: NONEQUAL
45197: OR
45198: IFFALSE 45227
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45200: LD_ADDR_EXP 129
45204: PUSH
45205: LD_EXP 129
45209: PPUSH
45210: LD_VAR 0 8
45214: PPUSH
45215: LD_INT 0
45217: PPUSH
45218: CALL_OW 1
45222: ST_TO_ADDR
// exit ;
45223: POP
45224: POP
45225: GO 45758
// end ; x := list [ i ] [ 3 ] ;
45227: LD_ADDR_VAR 0 6
45231: PUSH
45232: LD_VAR 0 3
45236: PUSH
45237: LD_VAR 0 1
45241: ARRAY
45242: PUSH
45243: LD_INT 3
45245: ARRAY
45246: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45247: LD_ADDR_VAR 0 7
45251: PUSH
45252: LD_VAR 0 3
45256: PUSH
45257: LD_VAR 0 1
45261: ARRAY
45262: PUSH
45263: LD_INT 4
45265: ARRAY
45266: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45267: LD_ADDR_VAR 0 9
45271: PUSH
45272: LD_VAR 0 6
45276: PPUSH
45277: LD_VAR 0 7
45281: PPUSH
45282: LD_INT 16
45284: PPUSH
45285: CALL 89845 0 3
45289: ST_TO_ADDR
// if not cratesNearbyPoint then
45290: LD_VAR 0 9
45294: NOT
45295: IFFALSE 45301
// exit ;
45297: POP
45298: POP
45299: GO 45758
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45301: LD_ADDR_VAR 0 4
45305: PUSH
45306: LD_INT 22
45308: PUSH
45309: LD_VAR 0 5
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: LD_INT 60
45323: PUSH
45324: EMPTY
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 91
45333: PUSH
45334: LD_VAR 0 8
45338: PUSH
45339: LD_INT 6
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 25
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 25
45362: PUSH
45363: LD_INT 16
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: PPUSH
45381: CALL_OW 69
45385: PUSH
45386: LD_VAR 0 8
45390: PPUSH
45391: CALL_OW 313
45395: PPUSH
45396: LD_INT 3
45398: PUSH
45399: LD_INT 60
45401: PUSH
45402: EMPTY
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 25
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 25
45424: PUSH
45425: LD_INT 16
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PPUSH
45441: CALL_OW 72
45445: UNION
45446: ST_TO_ADDR
// if tmp then
45447: LD_VAR 0 4
45451: IFFALSE 45531
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45453: LD_ADDR_VAR 0 4
45457: PUSH
45458: LD_VAR 0 4
45462: PPUSH
45463: LD_INT 3
45465: PPUSH
45466: CALL 87814 0 2
45470: ST_TO_ADDR
// for j in tmp do
45471: LD_ADDR_VAR 0 2
45475: PUSH
45476: LD_VAR 0 4
45480: PUSH
45481: FOR_IN
45482: IFFALSE 45525
// begin if IsInUnit ( j ) then
45484: LD_VAR 0 2
45488: PPUSH
45489: CALL_OW 310
45493: IFFALSE 45504
// ComExit ( j ) ;
45495: LD_VAR 0 2
45499: PPUSH
45500: CALL 87897 0 1
// AddComCollect ( j , x , y ) ;
45504: LD_VAR 0 2
45508: PPUSH
45509: LD_VAR 0 6
45513: PPUSH
45514: LD_VAR 0 7
45518: PPUSH
45519: CALL_OW 177
// end ;
45523: GO 45481
45525: POP
45526: POP
// exit ;
45527: POP
45528: POP
45529: GO 45758
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45531: LD_ADDR_VAR 0 4
45535: PUSH
45536: LD_INT 22
45538: PUSH
45539: LD_VAR 0 5
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 91
45550: PUSH
45551: LD_VAR 0 8
45555: PUSH
45556: LD_INT 8
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 34
45569: PUSH
45570: LD_INT 12
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 34
45579: PUSH
45580: LD_INT 51
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 34
45589: PUSH
45590: LD_INT 32
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 34
45599: PUSH
45600: LD_INT 89
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: PPUSH
45619: CALL_OW 69
45623: ST_TO_ADDR
// if tmp then
45624: LD_VAR 0 4
45628: IFFALSE 45754
// begin for j in tmp do
45630: LD_ADDR_VAR 0 2
45634: PUSH
45635: LD_VAR 0 4
45639: PUSH
45640: FOR_IN
45641: IFFALSE 45752
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45643: LD_VAR 0 2
45647: PPUSH
45648: CALL_OW 262
45652: PUSH
45653: LD_INT 3
45655: EQUAL
45656: PUSH
45657: LD_VAR 0 2
45661: PPUSH
45662: CALL_OW 261
45666: PUSH
45667: LD_INT 20
45669: GREATER
45670: OR
45671: PUSH
45672: LD_VAR 0 2
45676: PPUSH
45677: CALL_OW 314
45681: NOT
45682: AND
45683: PUSH
45684: LD_VAR 0 2
45688: PPUSH
45689: CALL_OW 263
45693: PUSH
45694: LD_INT 1
45696: NONEQUAL
45697: PUSH
45698: LD_VAR 0 2
45702: PPUSH
45703: CALL_OW 311
45707: OR
45708: AND
45709: IFFALSE 45750
// begin ComCollect ( j , x , y ) ;
45711: LD_VAR 0 2
45715: PPUSH
45716: LD_VAR 0 6
45720: PPUSH
45721: LD_VAR 0 7
45725: PPUSH
45726: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45730: LD_VAR 0 2
45734: PPUSH
45735: LD_VAR 0 8
45739: PPUSH
45740: CALL_OW 172
// exit ;
45744: POP
45745: POP
45746: POP
45747: POP
45748: GO 45758
// end ;
45750: GO 45640
45752: POP
45753: POP
// end ; end ;
45754: GO 45129
45756: POP
45757: POP
// end ; end_of_file
45758: PPOPN 9
45760: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
45761: LD_INT 0
45763: PPUSH
45764: PPUSH
45765: PPUSH
45766: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
45767: LD_VAR 0 1
45771: PPUSH
45772: CALL_OW 264
45776: PUSH
45777: LD_INT 91
45779: EQUAL
45780: IFFALSE 45852
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45782: LD_INT 68
45784: PPUSH
45785: LD_VAR 0 1
45789: PPUSH
45790: CALL_OW 255
45794: PPUSH
45795: CALL_OW 321
45799: PUSH
45800: LD_INT 2
45802: EQUAL
45803: IFFALSE 45815
// eff := 70 else
45805: LD_ADDR_VAR 0 4
45809: PUSH
45810: LD_INT 70
45812: ST_TO_ADDR
45813: GO 45823
// eff := 30 ;
45815: LD_ADDR_VAR 0 4
45819: PUSH
45820: LD_INT 30
45822: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45823: LD_VAR 0 1
45827: PPUSH
45828: CALL_OW 250
45832: PPUSH
45833: LD_VAR 0 1
45837: PPUSH
45838: CALL_OW 251
45842: PPUSH
45843: LD_VAR 0 4
45847: PPUSH
45848: CALL_OW 495
// end ; end ;
45852: LD_VAR 0 2
45856: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
45857: LD_INT 0
45859: PPUSH
// end ;
45860: LD_VAR 0 4
45864: RET
// export function SOS_Command ( cmd ) ; begin
45865: LD_INT 0
45867: PPUSH
// end ;
45868: LD_VAR 0 2
45872: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
45873: LD_INT 0
45875: PPUSH
// end ;
45876: LD_VAR 0 6
45880: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
45881: LD_INT 0
45883: PPUSH
45884: PPUSH
// if not vehicle or not factory then
45885: LD_VAR 0 1
45889: NOT
45890: PUSH
45891: LD_VAR 0 2
45895: NOT
45896: OR
45897: IFFALSE 45901
// exit ;
45899: GO 46132
// if factoryWaypoints >= factory then
45901: LD_EXP 128
45905: PUSH
45906: LD_VAR 0 2
45910: GREATEREQUAL
45911: IFFALSE 46132
// if factoryWaypoints [ factory ] then
45913: LD_EXP 128
45917: PUSH
45918: LD_VAR 0 2
45922: ARRAY
45923: IFFALSE 46132
// begin if GetControl ( vehicle ) = control_manual then
45925: LD_VAR 0 1
45929: PPUSH
45930: CALL_OW 263
45934: PUSH
45935: LD_INT 1
45937: EQUAL
45938: IFFALSE 46019
// begin driver := IsDrivenBy ( vehicle ) ;
45940: LD_ADDR_VAR 0 4
45944: PUSH
45945: LD_VAR 0 1
45949: PPUSH
45950: CALL_OW 311
45954: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45955: LD_VAR 0 4
45959: PPUSH
45960: LD_EXP 128
45964: PUSH
45965: LD_VAR 0 2
45969: ARRAY
45970: PUSH
45971: LD_INT 3
45973: ARRAY
45974: PPUSH
45975: LD_EXP 128
45979: PUSH
45980: LD_VAR 0 2
45984: ARRAY
45985: PUSH
45986: LD_INT 4
45988: ARRAY
45989: PPUSH
45990: CALL_OW 171
// AddComExitVehicle ( driver ) ;
45994: LD_VAR 0 4
45998: PPUSH
45999: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
46003: LD_VAR 0 4
46007: PPUSH
46008: LD_VAR 0 2
46012: PPUSH
46013: CALL_OW 180
// end else
46017: GO 46132
// if GetControl ( vehicle ) = control_remote then
46019: LD_VAR 0 1
46023: PPUSH
46024: CALL_OW 263
46028: PUSH
46029: LD_INT 2
46031: EQUAL
46032: IFFALSE 46093
// begin wait ( 0 0$2 ) ;
46034: LD_INT 70
46036: PPUSH
46037: CALL_OW 67
// if Connect ( vehicle ) then
46041: LD_VAR 0 1
46045: PPUSH
46046: CALL 58156 0 1
46050: IFFALSE 46091
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46052: LD_VAR 0 1
46056: PPUSH
46057: LD_EXP 128
46061: PUSH
46062: LD_VAR 0 2
46066: ARRAY
46067: PUSH
46068: LD_INT 3
46070: ARRAY
46071: PPUSH
46072: LD_EXP 128
46076: PUSH
46077: LD_VAR 0 2
46081: ARRAY
46082: PUSH
46083: LD_INT 4
46085: ARRAY
46086: PPUSH
46087: CALL_OW 171
// end else
46091: GO 46132
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46093: LD_VAR 0 1
46097: PPUSH
46098: LD_EXP 128
46102: PUSH
46103: LD_VAR 0 2
46107: ARRAY
46108: PUSH
46109: LD_INT 3
46111: ARRAY
46112: PPUSH
46113: LD_EXP 128
46117: PUSH
46118: LD_VAR 0 2
46122: ARRAY
46123: PUSH
46124: LD_INT 4
46126: ARRAY
46127: PPUSH
46128: CALL_OW 171
// end ; end ;
46132: LD_VAR 0 3
46136: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46137: LD_INT 0
46139: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46140: LD_VAR 0 1
46144: PUSH
46145: LD_INT 250
46147: EQUAL
46148: PUSH
46149: LD_VAR 0 2
46153: PPUSH
46154: CALL_OW 264
46158: PUSH
46159: LD_INT 81
46161: EQUAL
46162: AND
46163: IFFALSE 46184
// MinerPlaceMine ( unit , x , y ) ;
46165: LD_VAR 0 2
46169: PPUSH
46170: LD_VAR 0 4
46174: PPUSH
46175: LD_VAR 0 5
46179: PPUSH
46180: CALL 48569 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46184: LD_VAR 0 1
46188: PUSH
46189: LD_INT 251
46191: EQUAL
46192: PUSH
46193: LD_VAR 0 2
46197: PPUSH
46198: CALL_OW 264
46202: PUSH
46203: LD_INT 81
46205: EQUAL
46206: AND
46207: IFFALSE 46228
// MinerDetonateMine ( unit , x , y ) ;
46209: LD_VAR 0 2
46213: PPUSH
46214: LD_VAR 0 4
46218: PPUSH
46219: LD_VAR 0 5
46223: PPUSH
46224: CALL 48844 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46228: LD_VAR 0 1
46232: PUSH
46233: LD_INT 252
46235: EQUAL
46236: PUSH
46237: LD_VAR 0 2
46241: PPUSH
46242: CALL_OW 264
46246: PUSH
46247: LD_INT 81
46249: EQUAL
46250: AND
46251: IFFALSE 46272
// MinerCreateMinefield ( unit , x , y ) ;
46253: LD_VAR 0 2
46257: PPUSH
46258: LD_VAR 0 4
46262: PPUSH
46263: LD_VAR 0 5
46267: PPUSH
46268: CALL 49261 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46272: LD_VAR 0 1
46276: PUSH
46277: LD_INT 253
46279: EQUAL
46280: PUSH
46281: LD_VAR 0 2
46285: PPUSH
46286: CALL_OW 257
46290: PUSH
46291: LD_INT 5
46293: EQUAL
46294: AND
46295: IFFALSE 46316
// ComBinocular ( unit , x , y ) ;
46297: LD_VAR 0 2
46301: PPUSH
46302: LD_VAR 0 4
46306: PPUSH
46307: LD_VAR 0 5
46311: PPUSH
46312: CALL 49630 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46316: LD_VAR 0 1
46320: PUSH
46321: LD_INT 254
46323: EQUAL
46324: PUSH
46325: LD_VAR 0 2
46329: PPUSH
46330: CALL_OW 264
46334: PUSH
46335: LD_INT 99
46337: EQUAL
46338: AND
46339: PUSH
46340: LD_VAR 0 3
46344: PPUSH
46345: CALL_OW 263
46349: PUSH
46350: LD_INT 3
46352: EQUAL
46353: AND
46354: IFFALSE 46370
// HackDestroyVehicle ( unit , selectedUnit ) ;
46356: LD_VAR 0 2
46360: PPUSH
46361: LD_VAR 0 3
46365: PPUSH
46366: CALL 47933 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46370: LD_VAR 0 1
46374: PUSH
46375: LD_INT 255
46377: EQUAL
46378: PUSH
46379: LD_VAR 0 2
46383: PPUSH
46384: CALL_OW 264
46388: PUSH
46389: LD_INT 14
46391: PUSH
46392: LD_INT 53
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: IN
46399: AND
46400: PUSH
46401: LD_VAR 0 4
46405: PPUSH
46406: LD_VAR 0 5
46410: PPUSH
46411: CALL_OW 488
46415: AND
46416: IFFALSE 46440
// CutTreeXYR ( unit , x , y , 12 ) ;
46418: LD_VAR 0 2
46422: PPUSH
46423: LD_VAR 0 4
46427: PPUSH
46428: LD_VAR 0 5
46432: PPUSH
46433: LD_INT 12
46435: PPUSH
46436: CALL 46503 0 4
// if cmd = 256 then
46440: LD_VAR 0 1
46444: PUSH
46445: LD_INT 256
46447: EQUAL
46448: IFFALSE 46469
// SetFactoryWaypoint ( unit , x , y ) ;
46450: LD_VAR 0 2
46454: PPUSH
46455: LD_VAR 0 4
46459: PPUSH
46460: LD_VAR 0 5
46464: PPUSH
46465: CALL 44450 0 3
// if cmd = 257 then
46469: LD_VAR 0 1
46473: PUSH
46474: LD_INT 257
46476: EQUAL
46477: IFFALSE 46498
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46479: LD_VAR 0 2
46483: PPUSH
46484: LD_VAR 0 4
46488: PPUSH
46489: LD_VAR 0 5
46493: PPUSH
46494: CALL 44812 0 3
// end ;
46498: LD_VAR 0 6
46502: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46503: LD_INT 0
46505: PPUSH
46506: PPUSH
46507: PPUSH
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
46512: PPUSH
46513: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46514: LD_VAR 0 1
46518: NOT
46519: PUSH
46520: LD_VAR 0 2
46524: PPUSH
46525: LD_VAR 0 3
46529: PPUSH
46530: CALL_OW 488
46534: NOT
46535: OR
46536: PUSH
46537: LD_VAR 0 4
46541: NOT
46542: OR
46543: IFFALSE 46547
// exit ;
46545: GO 46887
// list := [ ] ;
46547: LD_ADDR_VAR 0 13
46551: PUSH
46552: EMPTY
46553: ST_TO_ADDR
// if x - r < 0 then
46554: LD_VAR 0 2
46558: PUSH
46559: LD_VAR 0 4
46563: MINUS
46564: PUSH
46565: LD_INT 0
46567: LESS
46568: IFFALSE 46580
// min_x := 0 else
46570: LD_ADDR_VAR 0 7
46574: PUSH
46575: LD_INT 0
46577: ST_TO_ADDR
46578: GO 46596
// min_x := x - r ;
46580: LD_ADDR_VAR 0 7
46584: PUSH
46585: LD_VAR 0 2
46589: PUSH
46590: LD_VAR 0 4
46594: MINUS
46595: ST_TO_ADDR
// if y - r < 0 then
46596: LD_VAR 0 3
46600: PUSH
46601: LD_VAR 0 4
46605: MINUS
46606: PUSH
46607: LD_INT 0
46609: LESS
46610: IFFALSE 46622
// min_y := 0 else
46612: LD_ADDR_VAR 0 8
46616: PUSH
46617: LD_INT 0
46619: ST_TO_ADDR
46620: GO 46638
// min_y := y - r ;
46622: LD_ADDR_VAR 0 8
46626: PUSH
46627: LD_VAR 0 3
46631: PUSH
46632: LD_VAR 0 4
46636: MINUS
46637: ST_TO_ADDR
// max_x := x + r ;
46638: LD_ADDR_VAR 0 9
46642: PUSH
46643: LD_VAR 0 2
46647: PUSH
46648: LD_VAR 0 4
46652: PLUS
46653: ST_TO_ADDR
// max_y := y + r ;
46654: LD_ADDR_VAR 0 10
46658: PUSH
46659: LD_VAR 0 3
46663: PUSH
46664: LD_VAR 0 4
46668: PLUS
46669: ST_TO_ADDR
// for _x = min_x to max_x do
46670: LD_ADDR_VAR 0 11
46674: PUSH
46675: DOUBLE
46676: LD_VAR 0 7
46680: DEC
46681: ST_TO_ADDR
46682: LD_VAR 0 9
46686: PUSH
46687: FOR_TO
46688: IFFALSE 46805
// for _y = min_y to max_y do
46690: LD_ADDR_VAR 0 12
46694: PUSH
46695: DOUBLE
46696: LD_VAR 0 8
46700: DEC
46701: ST_TO_ADDR
46702: LD_VAR 0 10
46706: PUSH
46707: FOR_TO
46708: IFFALSE 46801
// begin if not ValidHex ( _x , _y ) then
46710: LD_VAR 0 11
46714: PPUSH
46715: LD_VAR 0 12
46719: PPUSH
46720: CALL_OW 488
46724: NOT
46725: IFFALSE 46729
// continue ;
46727: GO 46707
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46729: LD_VAR 0 11
46733: PPUSH
46734: LD_VAR 0 12
46738: PPUSH
46739: CALL_OW 351
46743: PUSH
46744: LD_VAR 0 11
46748: PPUSH
46749: LD_VAR 0 12
46753: PPUSH
46754: CALL_OW 554
46758: AND
46759: IFFALSE 46799
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46761: LD_ADDR_VAR 0 13
46765: PUSH
46766: LD_VAR 0 13
46770: PPUSH
46771: LD_VAR 0 13
46775: PUSH
46776: LD_INT 1
46778: PLUS
46779: PPUSH
46780: LD_VAR 0 11
46784: PUSH
46785: LD_VAR 0 12
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PPUSH
46794: CALL_OW 2
46798: ST_TO_ADDR
// end ;
46799: GO 46707
46801: POP
46802: POP
46803: GO 46687
46805: POP
46806: POP
// if not list then
46807: LD_VAR 0 13
46811: NOT
46812: IFFALSE 46816
// exit ;
46814: GO 46887
// for i in list do
46816: LD_ADDR_VAR 0 6
46820: PUSH
46821: LD_VAR 0 13
46825: PUSH
46826: FOR_IN
46827: IFFALSE 46885
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46829: LD_VAR 0 1
46833: PPUSH
46834: LD_STRING M
46836: PUSH
46837: LD_VAR 0 6
46841: PUSH
46842: LD_INT 1
46844: ARRAY
46845: PUSH
46846: LD_VAR 0 6
46850: PUSH
46851: LD_INT 2
46853: ARRAY
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: PUSH
46876: EMPTY
46877: LIST
46878: PPUSH
46879: CALL_OW 447
46883: GO 46826
46885: POP
46886: POP
// end ;
46887: LD_VAR 0 5
46891: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46892: LD_EXP 131
46896: NOT
46897: IFFALSE 46947
46899: GO 46901
46901: DISABLE
// begin initHack := true ;
46902: LD_ADDR_EXP 131
46906: PUSH
46907: LD_INT 1
46909: ST_TO_ADDR
// hackTanks := [ ] ;
46910: LD_ADDR_EXP 132
46914: PUSH
46915: EMPTY
46916: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46917: LD_ADDR_EXP 133
46921: PUSH
46922: EMPTY
46923: ST_TO_ADDR
// hackLimit := 3 ;
46924: LD_ADDR_EXP 134
46928: PUSH
46929: LD_INT 3
46931: ST_TO_ADDR
// hackDist := 12 ;
46932: LD_ADDR_EXP 135
46936: PUSH
46937: LD_INT 12
46939: ST_TO_ADDR
// hackCounter := [ ] ;
46940: LD_ADDR_EXP 136
46944: PUSH
46945: EMPTY
46946: ST_TO_ADDR
// end ;
46947: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46948: LD_EXP 131
46952: PUSH
46953: LD_INT 34
46955: PUSH
46956: LD_INT 99
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PPUSH
46963: CALL_OW 69
46967: AND
46968: IFFALSE 47221
46970: GO 46972
46972: DISABLE
46973: LD_INT 0
46975: PPUSH
46976: PPUSH
// begin enable ;
46977: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46978: LD_ADDR_VAR 0 1
46982: PUSH
46983: LD_INT 34
46985: PUSH
46986: LD_INT 99
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PPUSH
46993: CALL_OW 69
46997: PUSH
46998: FOR_IN
46999: IFFALSE 47219
// begin if not i in hackTanks then
47001: LD_VAR 0 1
47005: PUSH
47006: LD_EXP 132
47010: IN
47011: NOT
47012: IFFALSE 47095
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47014: LD_ADDR_EXP 132
47018: PUSH
47019: LD_EXP 132
47023: PPUSH
47024: LD_EXP 132
47028: PUSH
47029: LD_INT 1
47031: PLUS
47032: PPUSH
47033: LD_VAR 0 1
47037: PPUSH
47038: CALL_OW 1
47042: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47043: LD_ADDR_EXP 133
47047: PUSH
47048: LD_EXP 133
47052: PPUSH
47053: LD_EXP 133
47057: PUSH
47058: LD_INT 1
47060: PLUS
47061: PPUSH
47062: EMPTY
47063: PPUSH
47064: CALL_OW 1
47068: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47069: LD_ADDR_EXP 136
47073: PUSH
47074: LD_EXP 136
47078: PPUSH
47079: LD_EXP 136
47083: PUSH
47084: LD_INT 1
47086: PLUS
47087: PPUSH
47088: EMPTY
47089: PPUSH
47090: CALL_OW 1
47094: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47095: LD_VAR 0 1
47099: PPUSH
47100: CALL_OW 302
47104: NOT
47105: IFFALSE 47118
// begin HackUnlinkAll ( i ) ;
47107: LD_VAR 0 1
47111: PPUSH
47112: CALL 47224 0 1
// continue ;
47116: GO 46998
// end ; HackCheckCapturedStatus ( i ) ;
47118: LD_VAR 0 1
47122: PPUSH
47123: CALL 47667 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47127: LD_ADDR_VAR 0 2
47131: PUSH
47132: LD_INT 81
47134: PUSH
47135: LD_VAR 0 1
47139: PPUSH
47140: CALL_OW 255
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 33
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 91
47161: PUSH
47162: LD_VAR 0 1
47166: PUSH
47167: LD_EXP 135
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 50
47179: PUSH
47180: EMPTY
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: PPUSH
47189: CALL_OW 69
47193: ST_TO_ADDR
// if not tmp then
47194: LD_VAR 0 2
47198: NOT
47199: IFFALSE 47203
// continue ;
47201: GO 46998
// HackLink ( i , tmp ) ;
47203: LD_VAR 0 1
47207: PPUSH
47208: LD_VAR 0 2
47212: PPUSH
47213: CALL 47360 0 2
// end ;
47217: GO 46998
47219: POP
47220: POP
// end ;
47221: PPOPN 2
47223: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47224: LD_INT 0
47226: PPUSH
47227: PPUSH
47228: PPUSH
// if not hack in hackTanks then
47229: LD_VAR 0 1
47233: PUSH
47234: LD_EXP 132
47238: IN
47239: NOT
47240: IFFALSE 47244
// exit ;
47242: GO 47355
// index := GetElementIndex ( hackTanks , hack ) ;
47244: LD_ADDR_VAR 0 4
47248: PUSH
47249: LD_EXP 132
47253: PPUSH
47254: LD_VAR 0 1
47258: PPUSH
47259: CALL 54972 0 2
47263: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47264: LD_EXP 133
47268: PUSH
47269: LD_VAR 0 4
47273: ARRAY
47274: IFFALSE 47355
// begin for i in hackTanksCaptured [ index ] do
47276: LD_ADDR_VAR 0 3
47280: PUSH
47281: LD_EXP 133
47285: PUSH
47286: LD_VAR 0 4
47290: ARRAY
47291: PUSH
47292: FOR_IN
47293: IFFALSE 47319
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47295: LD_VAR 0 3
47299: PUSH
47300: LD_INT 1
47302: ARRAY
47303: PPUSH
47304: LD_VAR 0 3
47308: PUSH
47309: LD_INT 2
47311: ARRAY
47312: PPUSH
47313: CALL_OW 235
47317: GO 47292
47319: POP
47320: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47321: LD_ADDR_EXP 133
47325: PUSH
47326: LD_EXP 133
47330: PPUSH
47331: LD_VAR 0 4
47335: PPUSH
47336: EMPTY
47337: PPUSH
47338: CALL_OW 1
47342: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47343: LD_VAR 0 1
47347: PPUSH
47348: LD_INT 0
47350: PPUSH
47351: CALL_OW 505
// end ; end ;
47355: LD_VAR 0 2
47359: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47360: LD_INT 0
47362: PPUSH
47363: PPUSH
47364: PPUSH
// if not hack in hackTanks or not vehicles then
47365: LD_VAR 0 1
47369: PUSH
47370: LD_EXP 132
47374: IN
47375: NOT
47376: PUSH
47377: LD_VAR 0 2
47381: NOT
47382: OR
47383: IFFALSE 47387
// exit ;
47385: GO 47662
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47387: LD_ADDR_VAR 0 2
47391: PUSH
47392: LD_VAR 0 1
47396: PPUSH
47397: LD_VAR 0 2
47401: PPUSH
47402: LD_INT 1
47404: PPUSH
47405: LD_INT 1
47407: PPUSH
47408: CALL 55622 0 4
47412: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47413: LD_ADDR_VAR 0 5
47417: PUSH
47418: LD_EXP 132
47422: PPUSH
47423: LD_VAR 0 1
47427: PPUSH
47428: CALL 54972 0 2
47432: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47433: LD_EXP 133
47437: PUSH
47438: LD_VAR 0 5
47442: ARRAY
47443: PUSH
47444: LD_EXP 134
47448: LESS
47449: IFFALSE 47638
// begin for i := 1 to vehicles do
47451: LD_ADDR_VAR 0 4
47455: PUSH
47456: DOUBLE
47457: LD_INT 1
47459: DEC
47460: ST_TO_ADDR
47461: LD_VAR 0 2
47465: PUSH
47466: FOR_TO
47467: IFFALSE 47636
// begin if hackTanksCaptured [ index ] = hackLimit then
47469: LD_EXP 133
47473: PUSH
47474: LD_VAR 0 5
47478: ARRAY
47479: PUSH
47480: LD_EXP 134
47484: EQUAL
47485: IFFALSE 47489
// break ;
47487: GO 47636
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47489: LD_ADDR_EXP 136
47493: PUSH
47494: LD_EXP 136
47498: PPUSH
47499: LD_VAR 0 5
47503: PPUSH
47504: LD_EXP 136
47508: PUSH
47509: LD_VAR 0 5
47513: ARRAY
47514: PUSH
47515: LD_INT 1
47517: PLUS
47518: PPUSH
47519: CALL_OW 1
47523: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47524: LD_ADDR_EXP 133
47528: PUSH
47529: LD_EXP 133
47533: PPUSH
47534: LD_VAR 0 5
47538: PUSH
47539: LD_EXP 133
47543: PUSH
47544: LD_VAR 0 5
47548: ARRAY
47549: PUSH
47550: LD_INT 1
47552: PLUS
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PPUSH
47558: LD_VAR 0 2
47562: PUSH
47563: LD_VAR 0 4
47567: ARRAY
47568: PUSH
47569: LD_VAR 0 2
47573: PUSH
47574: LD_VAR 0 4
47578: ARRAY
47579: PPUSH
47580: CALL_OW 255
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PPUSH
47589: CALL 55187 0 3
47593: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47594: LD_VAR 0 2
47598: PUSH
47599: LD_VAR 0 4
47603: ARRAY
47604: PPUSH
47605: LD_VAR 0 1
47609: PPUSH
47610: CALL_OW 255
47614: PPUSH
47615: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47619: LD_VAR 0 2
47623: PUSH
47624: LD_VAR 0 4
47628: ARRAY
47629: PPUSH
47630: CALL_OW 141
// end ;
47634: GO 47466
47636: POP
47637: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47638: LD_VAR 0 1
47642: PPUSH
47643: LD_EXP 133
47647: PUSH
47648: LD_VAR 0 5
47652: ARRAY
47653: PUSH
47654: LD_INT 0
47656: PLUS
47657: PPUSH
47658: CALL_OW 505
// end ;
47662: LD_VAR 0 3
47666: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47667: LD_INT 0
47669: PPUSH
47670: PPUSH
47671: PPUSH
47672: PPUSH
// if not hack in hackTanks then
47673: LD_VAR 0 1
47677: PUSH
47678: LD_EXP 132
47682: IN
47683: NOT
47684: IFFALSE 47688
// exit ;
47686: GO 47928
// index := GetElementIndex ( hackTanks , hack ) ;
47688: LD_ADDR_VAR 0 4
47692: PUSH
47693: LD_EXP 132
47697: PPUSH
47698: LD_VAR 0 1
47702: PPUSH
47703: CALL 54972 0 2
47707: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47708: LD_ADDR_VAR 0 3
47712: PUSH
47713: DOUBLE
47714: LD_EXP 133
47718: PUSH
47719: LD_VAR 0 4
47723: ARRAY
47724: INC
47725: ST_TO_ADDR
47726: LD_INT 1
47728: PUSH
47729: FOR_DOWNTO
47730: IFFALSE 47902
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47732: LD_ADDR_VAR 0 5
47736: PUSH
47737: LD_EXP 133
47741: PUSH
47742: LD_VAR 0 4
47746: ARRAY
47747: PUSH
47748: LD_VAR 0 3
47752: ARRAY
47753: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47754: LD_VAR 0 5
47758: PUSH
47759: LD_INT 1
47761: ARRAY
47762: PPUSH
47763: CALL_OW 302
47767: NOT
47768: PUSH
47769: LD_VAR 0 5
47773: PUSH
47774: LD_INT 1
47776: ARRAY
47777: PPUSH
47778: CALL_OW 255
47782: PUSH
47783: LD_VAR 0 1
47787: PPUSH
47788: CALL_OW 255
47792: NONEQUAL
47793: OR
47794: IFFALSE 47900
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47796: LD_VAR 0 5
47800: PUSH
47801: LD_INT 1
47803: ARRAY
47804: PPUSH
47805: CALL_OW 305
47809: PUSH
47810: LD_VAR 0 5
47814: PUSH
47815: LD_INT 1
47817: ARRAY
47818: PPUSH
47819: CALL_OW 255
47823: PUSH
47824: LD_VAR 0 1
47828: PPUSH
47829: CALL_OW 255
47833: EQUAL
47834: AND
47835: IFFALSE 47859
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47837: LD_VAR 0 5
47841: PUSH
47842: LD_INT 1
47844: ARRAY
47845: PPUSH
47846: LD_VAR 0 5
47850: PUSH
47851: LD_INT 2
47853: ARRAY
47854: PPUSH
47855: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47859: LD_ADDR_EXP 133
47863: PUSH
47864: LD_EXP 133
47868: PPUSH
47869: LD_VAR 0 4
47873: PPUSH
47874: LD_EXP 133
47878: PUSH
47879: LD_VAR 0 4
47883: ARRAY
47884: PPUSH
47885: LD_VAR 0 3
47889: PPUSH
47890: CALL_OW 3
47894: PPUSH
47895: CALL_OW 1
47899: ST_TO_ADDR
// end ; end ;
47900: GO 47729
47902: POP
47903: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47904: LD_VAR 0 1
47908: PPUSH
47909: LD_EXP 133
47913: PUSH
47914: LD_VAR 0 4
47918: ARRAY
47919: PUSH
47920: LD_INT 0
47922: PLUS
47923: PPUSH
47924: CALL_OW 505
// end ;
47928: LD_VAR 0 2
47932: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47933: LD_INT 0
47935: PPUSH
47936: PPUSH
47937: PPUSH
47938: PPUSH
// if not hack in hackTanks then
47939: LD_VAR 0 1
47943: PUSH
47944: LD_EXP 132
47948: IN
47949: NOT
47950: IFFALSE 47954
// exit ;
47952: GO 48039
// index := GetElementIndex ( hackTanks , hack ) ;
47954: LD_ADDR_VAR 0 5
47958: PUSH
47959: LD_EXP 132
47963: PPUSH
47964: LD_VAR 0 1
47968: PPUSH
47969: CALL 54972 0 2
47973: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47974: LD_ADDR_VAR 0 4
47978: PUSH
47979: DOUBLE
47980: LD_INT 1
47982: DEC
47983: ST_TO_ADDR
47984: LD_EXP 133
47988: PUSH
47989: LD_VAR 0 5
47993: ARRAY
47994: PUSH
47995: FOR_TO
47996: IFFALSE 48037
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47998: LD_EXP 133
48002: PUSH
48003: LD_VAR 0 5
48007: ARRAY
48008: PUSH
48009: LD_VAR 0 4
48013: ARRAY
48014: PUSH
48015: LD_INT 1
48017: ARRAY
48018: PUSH
48019: LD_VAR 0 2
48023: EQUAL
48024: IFFALSE 48035
// KillUnit ( vehicle ) ;
48026: LD_VAR 0 2
48030: PPUSH
48031: CALL_OW 66
48035: GO 47995
48037: POP
48038: POP
// end ;
48039: LD_VAR 0 3
48043: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48044: LD_EXP 137
48048: NOT
48049: IFFALSE 48084
48051: GO 48053
48053: DISABLE
// begin initMiner := true ;
48054: LD_ADDR_EXP 137
48058: PUSH
48059: LD_INT 1
48061: ST_TO_ADDR
// minersList := [ ] ;
48062: LD_ADDR_EXP 138
48066: PUSH
48067: EMPTY
48068: ST_TO_ADDR
// minerMinesList := [ ] ;
48069: LD_ADDR_EXP 139
48073: PUSH
48074: EMPTY
48075: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48076: LD_ADDR_EXP 140
48080: PUSH
48081: LD_INT 5
48083: ST_TO_ADDR
// end ;
48084: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48085: LD_EXP 137
48089: PUSH
48090: LD_INT 34
48092: PUSH
48093: LD_INT 81
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PPUSH
48100: CALL_OW 69
48104: AND
48105: IFFALSE 48566
48107: GO 48109
48109: DISABLE
48110: LD_INT 0
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
// begin enable ;
48116: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48117: LD_ADDR_VAR 0 1
48121: PUSH
48122: LD_INT 34
48124: PUSH
48125: LD_INT 81
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PPUSH
48132: CALL_OW 69
48136: PUSH
48137: FOR_IN
48138: IFFALSE 48210
// begin if not i in minersList then
48140: LD_VAR 0 1
48144: PUSH
48145: LD_EXP 138
48149: IN
48150: NOT
48151: IFFALSE 48208
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48153: LD_ADDR_EXP 138
48157: PUSH
48158: LD_EXP 138
48162: PPUSH
48163: LD_EXP 138
48167: PUSH
48168: LD_INT 1
48170: PLUS
48171: PPUSH
48172: LD_VAR 0 1
48176: PPUSH
48177: CALL_OW 1
48181: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48182: LD_ADDR_EXP 139
48186: PUSH
48187: LD_EXP 139
48191: PPUSH
48192: LD_EXP 139
48196: PUSH
48197: LD_INT 1
48199: PLUS
48200: PPUSH
48201: EMPTY
48202: PPUSH
48203: CALL_OW 1
48207: ST_TO_ADDR
// end end ;
48208: GO 48137
48210: POP
48211: POP
// for i := minerMinesList downto 1 do
48212: LD_ADDR_VAR 0 1
48216: PUSH
48217: DOUBLE
48218: LD_EXP 139
48222: INC
48223: ST_TO_ADDR
48224: LD_INT 1
48226: PUSH
48227: FOR_DOWNTO
48228: IFFALSE 48564
// begin if IsLive ( minersList [ i ] ) then
48230: LD_EXP 138
48234: PUSH
48235: LD_VAR 0 1
48239: ARRAY
48240: PPUSH
48241: CALL_OW 300
48245: IFFALSE 48273
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48247: LD_EXP 138
48251: PUSH
48252: LD_VAR 0 1
48256: ARRAY
48257: PPUSH
48258: LD_EXP 139
48262: PUSH
48263: LD_VAR 0 1
48267: ARRAY
48268: PPUSH
48269: CALL_OW 505
// if not minerMinesList [ i ] then
48273: LD_EXP 139
48277: PUSH
48278: LD_VAR 0 1
48282: ARRAY
48283: NOT
48284: IFFALSE 48288
// continue ;
48286: GO 48227
// for j := minerMinesList [ i ] downto 1 do
48288: LD_ADDR_VAR 0 2
48292: PUSH
48293: DOUBLE
48294: LD_EXP 139
48298: PUSH
48299: LD_VAR 0 1
48303: ARRAY
48304: INC
48305: ST_TO_ADDR
48306: LD_INT 1
48308: PUSH
48309: FOR_DOWNTO
48310: IFFALSE 48560
// begin side := GetSide ( minersList [ i ] ) ;
48312: LD_ADDR_VAR 0 3
48316: PUSH
48317: LD_EXP 138
48321: PUSH
48322: LD_VAR 0 1
48326: ARRAY
48327: PPUSH
48328: CALL_OW 255
48332: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48333: LD_ADDR_VAR 0 4
48337: PUSH
48338: LD_EXP 139
48342: PUSH
48343: LD_VAR 0 1
48347: ARRAY
48348: PUSH
48349: LD_VAR 0 2
48353: ARRAY
48354: PUSH
48355: LD_INT 1
48357: ARRAY
48358: PPUSH
48359: LD_EXP 139
48363: PUSH
48364: LD_VAR 0 1
48368: ARRAY
48369: PUSH
48370: LD_VAR 0 2
48374: ARRAY
48375: PUSH
48376: LD_INT 2
48378: ARRAY
48379: PPUSH
48380: CALL_OW 428
48384: ST_TO_ADDR
// if not tmp then
48385: LD_VAR 0 4
48389: NOT
48390: IFFALSE 48394
// continue ;
48392: GO 48309
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48394: LD_VAR 0 4
48398: PUSH
48399: LD_INT 81
48401: PUSH
48402: LD_VAR 0 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PPUSH
48411: CALL_OW 69
48415: IN
48416: PUSH
48417: LD_EXP 139
48421: PUSH
48422: LD_VAR 0 1
48426: ARRAY
48427: PUSH
48428: LD_VAR 0 2
48432: ARRAY
48433: PUSH
48434: LD_INT 1
48436: ARRAY
48437: PPUSH
48438: LD_EXP 139
48442: PUSH
48443: LD_VAR 0 1
48447: ARRAY
48448: PUSH
48449: LD_VAR 0 2
48453: ARRAY
48454: PUSH
48455: LD_INT 2
48457: ARRAY
48458: PPUSH
48459: CALL_OW 458
48463: AND
48464: IFFALSE 48558
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48466: LD_EXP 139
48470: PUSH
48471: LD_VAR 0 1
48475: ARRAY
48476: PUSH
48477: LD_VAR 0 2
48481: ARRAY
48482: PUSH
48483: LD_INT 1
48485: ARRAY
48486: PPUSH
48487: LD_EXP 139
48491: PUSH
48492: LD_VAR 0 1
48496: ARRAY
48497: PUSH
48498: LD_VAR 0 2
48502: ARRAY
48503: PUSH
48504: LD_INT 2
48506: ARRAY
48507: PPUSH
48508: LD_VAR 0 3
48512: PPUSH
48513: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48517: LD_ADDR_EXP 139
48521: PUSH
48522: LD_EXP 139
48526: PPUSH
48527: LD_VAR 0 1
48531: PPUSH
48532: LD_EXP 139
48536: PUSH
48537: LD_VAR 0 1
48541: ARRAY
48542: PPUSH
48543: LD_VAR 0 2
48547: PPUSH
48548: CALL_OW 3
48552: PPUSH
48553: CALL_OW 1
48557: ST_TO_ADDR
// end ; end ;
48558: GO 48309
48560: POP
48561: POP
// end ;
48562: GO 48227
48564: POP
48565: POP
// end ;
48566: PPOPN 4
48568: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48569: LD_INT 0
48571: PPUSH
48572: PPUSH
// result := false ;
48573: LD_ADDR_VAR 0 4
48577: PUSH
48578: LD_INT 0
48580: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48581: LD_VAR 0 1
48585: PPUSH
48586: CALL_OW 264
48590: PUSH
48591: LD_INT 81
48593: EQUAL
48594: NOT
48595: IFFALSE 48599
// exit ;
48597: GO 48839
// index := GetElementIndex ( minersList , unit ) ;
48599: LD_ADDR_VAR 0 5
48603: PUSH
48604: LD_EXP 138
48608: PPUSH
48609: LD_VAR 0 1
48613: PPUSH
48614: CALL 54972 0 2
48618: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48619: LD_EXP 139
48623: PUSH
48624: LD_VAR 0 5
48628: ARRAY
48629: PUSH
48630: LD_EXP 140
48634: GREATEREQUAL
48635: IFFALSE 48639
// exit ;
48637: GO 48839
// ComMoveXY ( unit , x , y ) ;
48639: LD_VAR 0 1
48643: PPUSH
48644: LD_VAR 0 2
48648: PPUSH
48649: LD_VAR 0 3
48653: PPUSH
48654: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48658: LD_INT 35
48660: PPUSH
48661: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48665: LD_VAR 0 1
48669: PPUSH
48670: LD_VAR 0 2
48674: PPUSH
48675: LD_VAR 0 3
48679: PPUSH
48680: CALL 86308 0 3
48684: NOT
48685: PUSH
48686: LD_VAR 0 1
48690: PPUSH
48691: CALL_OW 314
48695: AND
48696: IFFALSE 48700
// exit ;
48698: GO 48839
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48700: LD_VAR 0 2
48704: PPUSH
48705: LD_VAR 0 3
48709: PPUSH
48710: CALL_OW 428
48714: PUSH
48715: LD_VAR 0 1
48719: EQUAL
48720: PUSH
48721: LD_VAR 0 1
48725: PPUSH
48726: CALL_OW 314
48730: NOT
48731: AND
48732: IFFALSE 48658
// PlaySoundXY ( x , y , PlantMine ) ;
48734: LD_VAR 0 2
48738: PPUSH
48739: LD_VAR 0 3
48743: PPUSH
48744: LD_STRING PlantMine
48746: PPUSH
48747: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48751: LD_VAR 0 2
48755: PPUSH
48756: LD_VAR 0 3
48760: PPUSH
48761: LD_VAR 0 1
48765: PPUSH
48766: CALL_OW 255
48770: PPUSH
48771: LD_INT 0
48773: PPUSH
48774: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48778: LD_ADDR_EXP 139
48782: PUSH
48783: LD_EXP 139
48787: PPUSH
48788: LD_VAR 0 5
48792: PUSH
48793: LD_EXP 139
48797: PUSH
48798: LD_VAR 0 5
48802: ARRAY
48803: PUSH
48804: LD_INT 1
48806: PLUS
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PPUSH
48812: LD_VAR 0 2
48816: PUSH
48817: LD_VAR 0 3
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PPUSH
48826: CALL 55187 0 3
48830: ST_TO_ADDR
// result := true ;
48831: LD_ADDR_VAR 0 4
48835: PUSH
48836: LD_INT 1
48838: ST_TO_ADDR
// end ;
48839: LD_VAR 0 4
48843: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48844: LD_INT 0
48846: PPUSH
48847: PPUSH
48848: PPUSH
// if not unit in minersList then
48849: LD_VAR 0 1
48853: PUSH
48854: LD_EXP 138
48858: IN
48859: NOT
48860: IFFALSE 48864
// exit ;
48862: GO 49256
// index := GetElementIndex ( minersList , unit ) ;
48864: LD_ADDR_VAR 0 6
48868: PUSH
48869: LD_EXP 138
48873: PPUSH
48874: LD_VAR 0 1
48878: PPUSH
48879: CALL 54972 0 2
48883: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48884: LD_ADDR_VAR 0 5
48888: PUSH
48889: DOUBLE
48890: LD_EXP 139
48894: PUSH
48895: LD_VAR 0 6
48899: ARRAY
48900: INC
48901: ST_TO_ADDR
48902: LD_INT 1
48904: PUSH
48905: FOR_DOWNTO
48906: IFFALSE 49067
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48908: LD_EXP 139
48912: PUSH
48913: LD_VAR 0 6
48917: ARRAY
48918: PUSH
48919: LD_VAR 0 5
48923: ARRAY
48924: PUSH
48925: LD_INT 1
48927: ARRAY
48928: PUSH
48929: LD_VAR 0 2
48933: EQUAL
48934: PUSH
48935: LD_EXP 139
48939: PUSH
48940: LD_VAR 0 6
48944: ARRAY
48945: PUSH
48946: LD_VAR 0 5
48950: ARRAY
48951: PUSH
48952: LD_INT 2
48954: ARRAY
48955: PUSH
48956: LD_VAR 0 3
48960: EQUAL
48961: AND
48962: IFFALSE 49065
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48964: LD_EXP 139
48968: PUSH
48969: LD_VAR 0 6
48973: ARRAY
48974: PUSH
48975: LD_VAR 0 5
48979: ARRAY
48980: PUSH
48981: LD_INT 1
48983: ARRAY
48984: PPUSH
48985: LD_EXP 139
48989: PUSH
48990: LD_VAR 0 6
48994: ARRAY
48995: PUSH
48996: LD_VAR 0 5
49000: ARRAY
49001: PUSH
49002: LD_INT 2
49004: ARRAY
49005: PPUSH
49006: LD_VAR 0 1
49010: PPUSH
49011: CALL_OW 255
49015: PPUSH
49016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49020: LD_ADDR_EXP 139
49024: PUSH
49025: LD_EXP 139
49029: PPUSH
49030: LD_VAR 0 6
49034: PPUSH
49035: LD_EXP 139
49039: PUSH
49040: LD_VAR 0 6
49044: ARRAY
49045: PPUSH
49046: LD_VAR 0 5
49050: PPUSH
49051: CALL_OW 3
49055: PPUSH
49056: CALL_OW 1
49060: ST_TO_ADDR
// exit ;
49061: POP
49062: POP
49063: GO 49256
// end ; end ;
49065: GO 48905
49067: POP
49068: POP
// for i := minerMinesList [ index ] downto 1 do
49069: LD_ADDR_VAR 0 5
49073: PUSH
49074: DOUBLE
49075: LD_EXP 139
49079: PUSH
49080: LD_VAR 0 6
49084: ARRAY
49085: INC
49086: ST_TO_ADDR
49087: LD_INT 1
49089: PUSH
49090: FOR_DOWNTO
49091: IFFALSE 49254
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49093: LD_EXP 139
49097: PUSH
49098: LD_VAR 0 6
49102: ARRAY
49103: PUSH
49104: LD_VAR 0 5
49108: ARRAY
49109: PUSH
49110: LD_INT 1
49112: ARRAY
49113: PPUSH
49114: LD_EXP 139
49118: PUSH
49119: LD_VAR 0 6
49123: ARRAY
49124: PUSH
49125: LD_VAR 0 5
49129: ARRAY
49130: PUSH
49131: LD_INT 2
49133: ARRAY
49134: PPUSH
49135: LD_VAR 0 2
49139: PPUSH
49140: LD_VAR 0 3
49144: PPUSH
49145: CALL_OW 298
49149: PUSH
49150: LD_INT 6
49152: LESS
49153: IFFALSE 49252
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49155: LD_EXP 139
49159: PUSH
49160: LD_VAR 0 6
49164: ARRAY
49165: PUSH
49166: LD_VAR 0 5
49170: ARRAY
49171: PUSH
49172: LD_INT 1
49174: ARRAY
49175: PPUSH
49176: LD_EXP 139
49180: PUSH
49181: LD_VAR 0 6
49185: ARRAY
49186: PUSH
49187: LD_VAR 0 5
49191: ARRAY
49192: PUSH
49193: LD_INT 2
49195: ARRAY
49196: PPUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: CALL_OW 255
49206: PPUSH
49207: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49211: LD_ADDR_EXP 139
49215: PUSH
49216: LD_EXP 139
49220: PPUSH
49221: LD_VAR 0 6
49225: PPUSH
49226: LD_EXP 139
49230: PUSH
49231: LD_VAR 0 6
49235: ARRAY
49236: PPUSH
49237: LD_VAR 0 5
49241: PPUSH
49242: CALL_OW 3
49246: PPUSH
49247: CALL_OW 1
49251: ST_TO_ADDR
// end ; end ;
49252: GO 49090
49254: POP
49255: POP
// end ;
49256: LD_VAR 0 4
49260: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49261: LD_INT 0
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49272: LD_VAR 0 1
49276: PPUSH
49277: CALL_OW 264
49281: PUSH
49282: LD_INT 81
49284: EQUAL
49285: NOT
49286: PUSH
49287: LD_VAR 0 1
49291: PUSH
49292: LD_EXP 138
49296: IN
49297: NOT
49298: OR
49299: IFFALSE 49303
// exit ;
49301: GO 49625
// index := GetElementIndex ( minersList , unit ) ;
49303: LD_ADDR_VAR 0 6
49307: PUSH
49308: LD_EXP 138
49312: PPUSH
49313: LD_VAR 0 1
49317: PPUSH
49318: CALL 54972 0 2
49322: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49323: LD_ADDR_VAR 0 8
49327: PUSH
49328: LD_EXP 140
49332: PUSH
49333: LD_EXP 139
49337: PUSH
49338: LD_VAR 0 6
49342: ARRAY
49343: MINUS
49344: ST_TO_ADDR
// if not minesFreeAmount then
49345: LD_VAR 0 8
49349: NOT
49350: IFFALSE 49354
// exit ;
49352: GO 49625
// tmp := [ ] ;
49354: LD_ADDR_VAR 0 7
49358: PUSH
49359: EMPTY
49360: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49361: LD_ADDR_VAR 0 5
49365: PUSH
49366: DOUBLE
49367: LD_INT 1
49369: DEC
49370: ST_TO_ADDR
49371: LD_VAR 0 8
49375: PUSH
49376: FOR_TO
49377: IFFALSE 49572
// begin _d := rand ( 0 , 5 ) ;
49379: LD_ADDR_VAR 0 11
49383: PUSH
49384: LD_INT 0
49386: PPUSH
49387: LD_INT 5
49389: PPUSH
49390: CALL_OW 12
49394: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49395: LD_ADDR_VAR 0 12
49399: PUSH
49400: LD_INT 2
49402: PPUSH
49403: LD_INT 6
49405: PPUSH
49406: CALL_OW 12
49410: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49411: LD_ADDR_VAR 0 9
49415: PUSH
49416: LD_VAR 0 2
49420: PPUSH
49421: LD_VAR 0 11
49425: PPUSH
49426: LD_VAR 0 12
49430: PPUSH
49431: CALL_OW 272
49435: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49436: LD_ADDR_VAR 0 10
49440: PUSH
49441: LD_VAR 0 3
49445: PPUSH
49446: LD_VAR 0 11
49450: PPUSH
49451: LD_VAR 0 12
49455: PPUSH
49456: CALL_OW 273
49460: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49461: LD_VAR 0 9
49465: PPUSH
49466: LD_VAR 0 10
49470: PPUSH
49471: CALL_OW 488
49475: PUSH
49476: LD_VAR 0 9
49480: PUSH
49481: LD_VAR 0 10
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_VAR 0 7
49494: IN
49495: NOT
49496: AND
49497: PUSH
49498: LD_VAR 0 9
49502: PPUSH
49503: LD_VAR 0 10
49507: PPUSH
49508: CALL_OW 458
49512: NOT
49513: AND
49514: IFFALSE 49556
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49516: LD_ADDR_VAR 0 7
49520: PUSH
49521: LD_VAR 0 7
49525: PPUSH
49526: LD_VAR 0 7
49530: PUSH
49531: LD_INT 1
49533: PLUS
49534: PPUSH
49535: LD_VAR 0 9
49539: PUSH
49540: LD_VAR 0 10
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PPUSH
49549: CALL_OW 1
49553: ST_TO_ADDR
49554: GO 49570
// i := i - 1 ;
49556: LD_ADDR_VAR 0 5
49560: PUSH
49561: LD_VAR 0 5
49565: PUSH
49566: LD_INT 1
49568: MINUS
49569: ST_TO_ADDR
// end ;
49570: GO 49376
49572: POP
49573: POP
// for i in tmp do
49574: LD_ADDR_VAR 0 5
49578: PUSH
49579: LD_VAR 0 7
49583: PUSH
49584: FOR_IN
49585: IFFALSE 49623
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49587: LD_VAR 0 1
49591: PPUSH
49592: LD_VAR 0 5
49596: PUSH
49597: LD_INT 1
49599: ARRAY
49600: PPUSH
49601: LD_VAR 0 5
49605: PUSH
49606: LD_INT 2
49608: ARRAY
49609: PPUSH
49610: CALL 48569 0 3
49614: NOT
49615: IFFALSE 49621
// exit ;
49617: POP
49618: POP
49619: GO 49625
49621: GO 49584
49623: POP
49624: POP
// end ;
49625: LD_VAR 0 4
49629: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49630: LD_INT 0
49632: PPUSH
49633: PPUSH
49634: PPUSH
49635: PPUSH
49636: PPUSH
49637: PPUSH
49638: PPUSH
// if not GetClass ( unit ) = class_sniper then
49639: LD_VAR 0 1
49643: PPUSH
49644: CALL_OW 257
49648: PUSH
49649: LD_INT 5
49651: EQUAL
49652: NOT
49653: IFFALSE 49657
// exit ;
49655: GO 50045
// dist := 8 ;
49657: LD_ADDR_VAR 0 5
49661: PUSH
49662: LD_INT 8
49664: ST_TO_ADDR
// viewRange := 12 ;
49665: LD_ADDR_VAR 0 7
49669: PUSH
49670: LD_INT 12
49672: ST_TO_ADDR
// side := GetSide ( unit ) ;
49673: LD_ADDR_VAR 0 6
49677: PUSH
49678: LD_VAR 0 1
49682: PPUSH
49683: CALL_OW 255
49687: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49688: LD_INT 61
49690: PPUSH
49691: LD_VAR 0 6
49695: PPUSH
49696: CALL_OW 321
49700: PUSH
49701: LD_INT 2
49703: EQUAL
49704: IFFALSE 49714
// viewRange := 16 ;
49706: LD_ADDR_VAR 0 7
49710: PUSH
49711: LD_INT 16
49713: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49714: LD_VAR 0 1
49718: PPUSH
49719: LD_VAR 0 2
49723: PPUSH
49724: LD_VAR 0 3
49728: PPUSH
49729: CALL_OW 297
49733: PUSH
49734: LD_VAR 0 5
49738: GREATER
49739: IFFALSE 49818
// begin ComMoveXY ( unit , x , y ) ;
49741: LD_VAR 0 1
49745: PPUSH
49746: LD_VAR 0 2
49750: PPUSH
49751: LD_VAR 0 3
49755: PPUSH
49756: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49760: LD_INT 35
49762: PPUSH
49763: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49767: LD_VAR 0 1
49771: PPUSH
49772: LD_VAR 0 2
49776: PPUSH
49777: LD_VAR 0 3
49781: PPUSH
49782: CALL 86308 0 3
49786: NOT
49787: IFFALSE 49791
// exit ;
49789: GO 50045
// until GetDistUnitXY ( unit , x , y ) < dist ;
49791: LD_VAR 0 1
49795: PPUSH
49796: LD_VAR 0 2
49800: PPUSH
49801: LD_VAR 0 3
49805: PPUSH
49806: CALL_OW 297
49810: PUSH
49811: LD_VAR 0 5
49815: LESS
49816: IFFALSE 49760
// end ; ComTurnXY ( unit , x , y ) ;
49818: LD_VAR 0 1
49822: PPUSH
49823: LD_VAR 0 2
49827: PPUSH
49828: LD_VAR 0 3
49832: PPUSH
49833: CALL_OW 118
// wait ( 5 ) ;
49837: LD_INT 5
49839: PPUSH
49840: CALL_OW 67
// _d := GetDir ( unit ) ;
49844: LD_ADDR_VAR 0 10
49848: PUSH
49849: LD_VAR 0 1
49853: PPUSH
49854: CALL_OW 254
49858: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
49859: LD_ADDR_VAR 0 8
49863: PUSH
49864: LD_VAR 0 1
49868: PPUSH
49869: CALL_OW 250
49873: PPUSH
49874: LD_VAR 0 10
49878: PPUSH
49879: LD_VAR 0 5
49883: PPUSH
49884: CALL_OW 272
49888: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
49889: LD_ADDR_VAR 0 9
49893: PUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: CALL_OW 251
49903: PPUSH
49904: LD_VAR 0 10
49908: PPUSH
49909: LD_VAR 0 5
49913: PPUSH
49914: CALL_OW 273
49918: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49919: LD_VAR 0 8
49923: PPUSH
49924: LD_VAR 0 9
49928: PPUSH
49929: CALL_OW 488
49933: NOT
49934: IFFALSE 49938
// exit ;
49936: GO 50045
// ComAnimCustom ( unit , 1 ) ;
49938: LD_VAR 0 1
49942: PPUSH
49943: LD_INT 1
49945: PPUSH
49946: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49950: LD_VAR 0 8
49954: PPUSH
49955: LD_VAR 0 9
49959: PPUSH
49960: LD_VAR 0 6
49964: PPUSH
49965: LD_VAR 0 7
49969: PPUSH
49970: CALL_OW 330
// repeat wait ( 1 ) ;
49974: LD_INT 1
49976: PPUSH
49977: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
49981: LD_VAR 0 1
49985: PPUSH
49986: CALL_OW 316
49990: PUSH
49991: LD_VAR 0 1
49995: PPUSH
49996: CALL_OW 314
50000: OR
50001: PUSH
50002: LD_VAR 0 1
50006: PPUSH
50007: CALL_OW 302
50011: NOT
50012: OR
50013: PUSH
50014: LD_VAR 0 1
50018: PPUSH
50019: CALL_OW 301
50023: OR
50024: IFFALSE 49974
// RemoveSeeing ( _x , _y , side ) ;
50026: LD_VAR 0 8
50030: PPUSH
50031: LD_VAR 0 9
50035: PPUSH
50036: LD_VAR 0 6
50040: PPUSH
50041: CALL_OW 331
// end ; end_of_file
50045: LD_VAR 0 4
50049: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50050: LD_INT 0
50052: PPUSH
50053: PPUSH
// if exist_mode then
50054: LD_VAR 0 2
50058: IFFALSE 50083
// unit := CreateCharacter ( prefix & ident ) else
50060: LD_ADDR_VAR 0 5
50064: PUSH
50065: LD_VAR 0 3
50069: PUSH
50070: LD_VAR 0 1
50074: STR
50075: PPUSH
50076: CALL_OW 34
50080: ST_TO_ADDR
50081: GO 50098
// unit := NewCharacter ( ident ) ;
50083: LD_ADDR_VAR 0 5
50087: PUSH
50088: LD_VAR 0 1
50092: PPUSH
50093: CALL_OW 25
50097: ST_TO_ADDR
// result := unit ;
50098: LD_ADDR_VAR 0 4
50102: PUSH
50103: LD_VAR 0 5
50107: ST_TO_ADDR
// end ;
50108: LD_VAR 0 4
50112: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50113: LD_INT 0
50115: PPUSH
50116: PPUSH
// if not side or not nation then
50117: LD_VAR 0 1
50121: NOT
50122: PUSH
50123: LD_VAR 0 2
50127: NOT
50128: OR
50129: IFFALSE 50133
// exit ;
50131: GO 50901
// case nation of nation_american :
50133: LD_VAR 0 2
50137: PUSH
50138: LD_INT 1
50140: DOUBLE
50141: EQUAL
50142: IFTRUE 50146
50144: GO 50360
50146: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50147: LD_ADDR_VAR 0 4
50151: PUSH
50152: LD_INT 35
50154: PUSH
50155: LD_INT 45
50157: PUSH
50158: LD_INT 46
50160: PUSH
50161: LD_INT 47
50163: PUSH
50164: LD_INT 82
50166: PUSH
50167: LD_INT 83
50169: PUSH
50170: LD_INT 84
50172: PUSH
50173: LD_INT 85
50175: PUSH
50176: LD_INT 86
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 6
50187: PUSH
50188: LD_INT 15
50190: PUSH
50191: LD_INT 16
50193: PUSH
50194: LD_INT 7
50196: PUSH
50197: LD_INT 12
50199: PUSH
50200: LD_INT 13
50202: PUSH
50203: LD_INT 10
50205: PUSH
50206: LD_INT 14
50208: PUSH
50209: LD_INT 20
50211: PUSH
50212: LD_INT 21
50214: PUSH
50215: LD_INT 22
50217: PUSH
50218: LD_INT 25
50220: PUSH
50221: LD_INT 32
50223: PUSH
50224: LD_INT 27
50226: PUSH
50227: LD_INT 36
50229: PUSH
50230: LD_INT 69
50232: PUSH
50233: LD_INT 39
50235: PUSH
50236: LD_INT 34
50238: PUSH
50239: LD_INT 40
50241: PUSH
50242: LD_INT 48
50244: PUSH
50245: LD_INT 49
50247: PUSH
50248: LD_INT 50
50250: PUSH
50251: LD_INT 51
50253: PUSH
50254: LD_INT 52
50256: PUSH
50257: LD_INT 53
50259: PUSH
50260: LD_INT 54
50262: PUSH
50263: LD_INT 55
50265: PUSH
50266: LD_INT 56
50268: PUSH
50269: LD_INT 57
50271: PUSH
50272: LD_INT 58
50274: PUSH
50275: LD_INT 59
50277: PUSH
50278: LD_INT 60
50280: PUSH
50281: LD_INT 61
50283: PUSH
50284: LD_INT 62
50286: PUSH
50287: LD_INT 80
50289: PUSH
50290: LD_INT 82
50292: PUSH
50293: LD_INT 83
50295: PUSH
50296: LD_INT 84
50298: PUSH
50299: LD_INT 85
50301: PUSH
50302: LD_INT 86
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: ST_TO_ADDR
50358: GO 50825
50360: LD_INT 2
50362: DOUBLE
50363: EQUAL
50364: IFTRUE 50368
50366: GO 50594
50368: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50369: LD_ADDR_VAR 0 4
50373: PUSH
50374: LD_INT 35
50376: PUSH
50377: LD_INT 45
50379: PUSH
50380: LD_INT 46
50382: PUSH
50383: LD_INT 47
50385: PUSH
50386: LD_INT 82
50388: PUSH
50389: LD_INT 83
50391: PUSH
50392: LD_INT 84
50394: PUSH
50395: LD_INT 85
50397: PUSH
50398: LD_INT 87
50400: PUSH
50401: LD_INT 70
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 11
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 4
50415: PUSH
50416: LD_INT 5
50418: PUSH
50419: LD_INT 6
50421: PUSH
50422: LD_INT 15
50424: PUSH
50425: LD_INT 18
50427: PUSH
50428: LD_INT 7
50430: PUSH
50431: LD_INT 17
50433: PUSH
50434: LD_INT 8
50436: PUSH
50437: LD_INT 20
50439: PUSH
50440: LD_INT 21
50442: PUSH
50443: LD_INT 22
50445: PUSH
50446: LD_INT 72
50448: PUSH
50449: LD_INT 26
50451: PUSH
50452: LD_INT 69
50454: PUSH
50455: LD_INT 39
50457: PUSH
50458: LD_INT 40
50460: PUSH
50461: LD_INT 41
50463: PUSH
50464: LD_INT 42
50466: PUSH
50467: LD_INT 43
50469: PUSH
50470: LD_INT 48
50472: PUSH
50473: LD_INT 49
50475: PUSH
50476: LD_INT 50
50478: PUSH
50479: LD_INT 51
50481: PUSH
50482: LD_INT 52
50484: PUSH
50485: LD_INT 53
50487: PUSH
50488: LD_INT 54
50490: PUSH
50491: LD_INT 55
50493: PUSH
50494: LD_INT 56
50496: PUSH
50497: LD_INT 60
50499: PUSH
50500: LD_INT 61
50502: PUSH
50503: LD_INT 62
50505: PUSH
50506: LD_INT 66
50508: PUSH
50509: LD_INT 67
50511: PUSH
50512: LD_INT 68
50514: PUSH
50515: LD_INT 81
50517: PUSH
50518: LD_INT 82
50520: PUSH
50521: LD_INT 83
50523: PUSH
50524: LD_INT 84
50526: PUSH
50527: LD_INT 85
50529: PUSH
50530: LD_INT 87
50532: PUSH
50533: LD_INT 88
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
50592: GO 50825
50594: LD_INT 3
50596: DOUBLE
50597: EQUAL
50598: IFTRUE 50602
50600: GO 50824
50602: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50603: LD_ADDR_VAR 0 4
50607: PUSH
50608: LD_INT 46
50610: PUSH
50611: LD_INT 47
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 82
50622: PUSH
50623: LD_INT 83
50625: PUSH
50626: LD_INT 84
50628: PUSH
50629: LD_INT 85
50631: PUSH
50632: LD_INT 86
50634: PUSH
50635: LD_INT 11
50637: PUSH
50638: LD_INT 9
50640: PUSH
50641: LD_INT 20
50643: PUSH
50644: LD_INT 19
50646: PUSH
50647: LD_INT 21
50649: PUSH
50650: LD_INT 24
50652: PUSH
50653: LD_INT 22
50655: PUSH
50656: LD_INT 25
50658: PUSH
50659: LD_INT 28
50661: PUSH
50662: LD_INT 29
50664: PUSH
50665: LD_INT 30
50667: PUSH
50668: LD_INT 31
50670: PUSH
50671: LD_INT 37
50673: PUSH
50674: LD_INT 38
50676: PUSH
50677: LD_INT 32
50679: PUSH
50680: LD_INT 27
50682: PUSH
50683: LD_INT 33
50685: PUSH
50686: LD_INT 69
50688: PUSH
50689: LD_INT 39
50691: PUSH
50692: LD_INT 34
50694: PUSH
50695: LD_INT 40
50697: PUSH
50698: LD_INT 71
50700: PUSH
50701: LD_INT 23
50703: PUSH
50704: LD_INT 44
50706: PUSH
50707: LD_INT 48
50709: PUSH
50710: LD_INT 49
50712: PUSH
50713: LD_INT 50
50715: PUSH
50716: LD_INT 51
50718: PUSH
50719: LD_INT 52
50721: PUSH
50722: LD_INT 53
50724: PUSH
50725: LD_INT 54
50727: PUSH
50728: LD_INT 55
50730: PUSH
50731: LD_INT 56
50733: PUSH
50734: LD_INT 57
50736: PUSH
50737: LD_INT 58
50739: PUSH
50740: LD_INT 59
50742: PUSH
50743: LD_INT 63
50745: PUSH
50746: LD_INT 64
50748: PUSH
50749: LD_INT 65
50751: PUSH
50752: LD_INT 82
50754: PUSH
50755: LD_INT 83
50757: PUSH
50758: LD_INT 84
50760: PUSH
50761: LD_INT 85
50763: PUSH
50764: LD_INT 86
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: ST_TO_ADDR
50822: GO 50825
50824: POP
// if state > - 1 and state < 3 then
50825: LD_VAR 0 3
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: GREATER
50834: PUSH
50835: LD_VAR 0 3
50839: PUSH
50840: LD_INT 3
50842: LESS
50843: AND
50844: IFFALSE 50901
// for i in result do
50846: LD_ADDR_VAR 0 5
50850: PUSH
50851: LD_VAR 0 4
50855: PUSH
50856: FOR_IN
50857: IFFALSE 50899
// if GetTech ( i , side ) <> state then
50859: LD_VAR 0 5
50863: PPUSH
50864: LD_VAR 0 1
50868: PPUSH
50869: CALL_OW 321
50873: PUSH
50874: LD_VAR 0 3
50878: NONEQUAL
50879: IFFALSE 50897
// result := result diff i ;
50881: LD_ADDR_VAR 0 4
50885: PUSH
50886: LD_VAR 0 4
50890: PUSH
50891: LD_VAR 0 5
50895: DIFF
50896: ST_TO_ADDR
50897: GO 50856
50899: POP
50900: POP
// end ;
50901: LD_VAR 0 4
50905: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
50906: LD_INT 0
50908: PPUSH
50909: PPUSH
50910: PPUSH
// result := true ;
50911: LD_ADDR_VAR 0 3
50915: PUSH
50916: LD_INT 1
50918: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
50919: LD_ADDR_VAR 0 5
50923: PUSH
50924: LD_VAR 0 2
50928: PPUSH
50929: CALL_OW 480
50933: ST_TO_ADDR
// if not tmp then
50934: LD_VAR 0 5
50938: NOT
50939: IFFALSE 50943
// exit ;
50941: GO 50992
// for i in tmp do
50943: LD_ADDR_VAR 0 4
50947: PUSH
50948: LD_VAR 0 5
50952: PUSH
50953: FOR_IN
50954: IFFALSE 50990
// if GetTech ( i , side ) <> state_researched then
50956: LD_VAR 0 4
50960: PPUSH
50961: LD_VAR 0 1
50965: PPUSH
50966: CALL_OW 321
50970: PUSH
50971: LD_INT 2
50973: NONEQUAL
50974: IFFALSE 50988
// begin result := false ;
50976: LD_ADDR_VAR 0 3
50980: PUSH
50981: LD_INT 0
50983: ST_TO_ADDR
// exit ;
50984: POP
50985: POP
50986: GO 50992
// end ;
50988: GO 50953
50990: POP
50991: POP
// end ;
50992: LD_VAR 0 3
50996: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
50997: LD_INT 0
50999: PPUSH
51000: PPUSH
51001: PPUSH
51002: PPUSH
51003: PPUSH
51004: PPUSH
51005: PPUSH
51006: PPUSH
51007: PPUSH
51008: PPUSH
51009: PPUSH
51010: PPUSH
51011: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51012: LD_VAR 0 1
51016: NOT
51017: PUSH
51018: LD_VAR 0 1
51022: PPUSH
51023: CALL_OW 257
51027: PUSH
51028: LD_INT 9
51030: NONEQUAL
51031: OR
51032: IFFALSE 51036
// exit ;
51034: GO 51609
// side := GetSide ( unit ) ;
51036: LD_ADDR_VAR 0 9
51040: PUSH
51041: LD_VAR 0 1
51045: PPUSH
51046: CALL_OW 255
51050: ST_TO_ADDR
// tech_space := tech_spacanom ;
51051: LD_ADDR_VAR 0 12
51055: PUSH
51056: LD_INT 29
51058: ST_TO_ADDR
// tech_time := tech_taurad ;
51059: LD_ADDR_VAR 0 13
51063: PUSH
51064: LD_INT 28
51066: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51067: LD_ADDR_VAR 0 11
51071: PUSH
51072: LD_VAR 0 1
51076: PPUSH
51077: CALL_OW 310
51081: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51082: LD_VAR 0 11
51086: PPUSH
51087: CALL_OW 247
51091: PUSH
51092: LD_INT 2
51094: EQUAL
51095: IFFALSE 51099
// exit ;
51097: GO 51609
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51099: LD_ADDR_VAR 0 8
51103: PUSH
51104: LD_INT 81
51106: PUSH
51107: LD_VAR 0 9
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 21
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PPUSH
51137: CALL_OW 69
51141: ST_TO_ADDR
// if not tmp then
51142: LD_VAR 0 8
51146: NOT
51147: IFFALSE 51151
// exit ;
51149: GO 51609
// if in_unit then
51151: LD_VAR 0 11
51155: IFFALSE 51179
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51157: LD_ADDR_VAR 0 10
51161: PUSH
51162: LD_VAR 0 8
51166: PPUSH
51167: LD_VAR 0 11
51171: PPUSH
51172: CALL_OW 74
51176: ST_TO_ADDR
51177: GO 51199
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51179: LD_ADDR_VAR 0 10
51183: PUSH
51184: LD_VAR 0 8
51188: PPUSH
51189: LD_VAR 0 1
51193: PPUSH
51194: CALL_OW 74
51198: ST_TO_ADDR
// if not enemy then
51199: LD_VAR 0 10
51203: NOT
51204: IFFALSE 51208
// exit ;
51206: GO 51609
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51208: LD_VAR 0 11
51212: PUSH
51213: LD_VAR 0 11
51217: PPUSH
51218: LD_VAR 0 10
51222: PPUSH
51223: CALL_OW 296
51227: PUSH
51228: LD_INT 13
51230: GREATER
51231: AND
51232: PUSH
51233: LD_VAR 0 1
51237: PPUSH
51238: LD_VAR 0 10
51242: PPUSH
51243: CALL_OW 296
51247: PUSH
51248: LD_INT 12
51250: GREATER
51251: OR
51252: IFFALSE 51256
// exit ;
51254: GO 51609
// missile := [ 1 ] ;
51256: LD_ADDR_VAR 0 14
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51267: LD_VAR 0 9
51271: PPUSH
51272: LD_VAR 0 12
51276: PPUSH
51277: CALL_OW 325
51281: IFFALSE 51310
// missile := Replace ( missile , missile + 1 , 2 ) ;
51283: LD_ADDR_VAR 0 14
51287: PUSH
51288: LD_VAR 0 14
51292: PPUSH
51293: LD_VAR 0 14
51297: PUSH
51298: LD_INT 1
51300: PLUS
51301: PPUSH
51302: LD_INT 2
51304: PPUSH
51305: CALL_OW 1
51309: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51310: LD_VAR 0 9
51314: PPUSH
51315: LD_VAR 0 13
51319: PPUSH
51320: CALL_OW 325
51324: PUSH
51325: LD_VAR 0 10
51329: PPUSH
51330: CALL_OW 255
51334: PPUSH
51335: LD_VAR 0 13
51339: PPUSH
51340: CALL_OW 325
51344: NOT
51345: AND
51346: IFFALSE 51375
// missile := Replace ( missile , missile + 1 , 3 ) ;
51348: LD_ADDR_VAR 0 14
51352: PUSH
51353: LD_VAR 0 14
51357: PPUSH
51358: LD_VAR 0 14
51362: PUSH
51363: LD_INT 1
51365: PLUS
51366: PPUSH
51367: LD_INT 3
51369: PPUSH
51370: CALL_OW 1
51374: ST_TO_ADDR
// if missile < 2 then
51375: LD_VAR 0 14
51379: PUSH
51380: LD_INT 2
51382: LESS
51383: IFFALSE 51387
// exit ;
51385: GO 51609
// x := GetX ( enemy ) ;
51387: LD_ADDR_VAR 0 4
51391: PUSH
51392: LD_VAR 0 10
51396: PPUSH
51397: CALL_OW 250
51401: ST_TO_ADDR
// y := GetY ( enemy ) ;
51402: LD_ADDR_VAR 0 5
51406: PUSH
51407: LD_VAR 0 10
51411: PPUSH
51412: CALL_OW 251
51416: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51417: LD_ADDR_VAR 0 6
51421: PUSH
51422: LD_VAR 0 4
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PPUSH
51431: LD_INT 1
51433: PPUSH
51434: CALL_OW 12
51438: PLUS
51439: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51440: LD_ADDR_VAR 0 7
51444: PUSH
51445: LD_VAR 0 5
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PPUSH
51454: LD_INT 1
51456: PPUSH
51457: CALL_OW 12
51461: PLUS
51462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51463: LD_VAR 0 6
51467: PPUSH
51468: LD_VAR 0 7
51472: PPUSH
51473: CALL_OW 488
51477: NOT
51478: IFFALSE 51500
// begin _x := x ;
51480: LD_ADDR_VAR 0 6
51484: PUSH
51485: LD_VAR 0 4
51489: ST_TO_ADDR
// _y := y ;
51490: LD_ADDR_VAR 0 7
51494: PUSH
51495: LD_VAR 0 5
51499: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51500: LD_ADDR_VAR 0 3
51504: PUSH
51505: LD_INT 1
51507: PPUSH
51508: LD_VAR 0 14
51512: PPUSH
51513: CALL_OW 12
51517: ST_TO_ADDR
// case i of 1 :
51518: LD_VAR 0 3
51522: PUSH
51523: LD_INT 1
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51531
51529: GO 51548
51531: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51532: LD_VAR 0 1
51536: PPUSH
51537: LD_VAR 0 10
51541: PPUSH
51542: CALL_OW 115
51546: GO 51609
51548: LD_INT 2
51550: DOUBLE
51551: EQUAL
51552: IFTRUE 51556
51554: GO 51578
51556: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51557: LD_VAR 0 1
51561: PPUSH
51562: LD_VAR 0 6
51566: PPUSH
51567: LD_VAR 0 7
51571: PPUSH
51572: CALL_OW 153
51576: GO 51609
51578: LD_INT 3
51580: DOUBLE
51581: EQUAL
51582: IFTRUE 51586
51584: GO 51608
51586: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51587: LD_VAR 0 1
51591: PPUSH
51592: LD_VAR 0 6
51596: PPUSH
51597: LD_VAR 0 7
51601: PPUSH
51602: CALL_OW 154
51606: GO 51609
51608: POP
// end ;
51609: LD_VAR 0 2
51613: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51614: LD_INT 0
51616: PPUSH
51617: PPUSH
51618: PPUSH
51619: PPUSH
51620: PPUSH
51621: PPUSH
// if not unit or not building then
51622: LD_VAR 0 1
51626: NOT
51627: PUSH
51628: LD_VAR 0 2
51632: NOT
51633: OR
51634: IFFALSE 51638
// exit ;
51636: GO 51796
// x := GetX ( building ) ;
51638: LD_ADDR_VAR 0 5
51642: PUSH
51643: LD_VAR 0 2
51647: PPUSH
51648: CALL_OW 250
51652: ST_TO_ADDR
// y := GetY ( building ) ;
51653: LD_ADDR_VAR 0 6
51657: PUSH
51658: LD_VAR 0 2
51662: PPUSH
51663: CALL_OW 251
51667: ST_TO_ADDR
// for i = 0 to 5 do
51668: LD_ADDR_VAR 0 4
51672: PUSH
51673: DOUBLE
51674: LD_INT 0
51676: DEC
51677: ST_TO_ADDR
51678: LD_INT 5
51680: PUSH
51681: FOR_TO
51682: IFFALSE 51794
// begin _x := ShiftX ( x , i , 3 ) ;
51684: LD_ADDR_VAR 0 7
51688: PUSH
51689: LD_VAR 0 5
51693: PPUSH
51694: LD_VAR 0 4
51698: PPUSH
51699: LD_INT 3
51701: PPUSH
51702: CALL_OW 272
51706: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51707: LD_ADDR_VAR 0 8
51711: PUSH
51712: LD_VAR 0 6
51716: PPUSH
51717: LD_VAR 0 4
51721: PPUSH
51722: LD_INT 3
51724: PPUSH
51725: CALL_OW 273
51729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51730: LD_VAR 0 7
51734: PPUSH
51735: LD_VAR 0 8
51739: PPUSH
51740: CALL_OW 488
51744: NOT
51745: IFFALSE 51749
// continue ;
51747: GO 51681
// if HexInfo ( _x , _y ) = 0 then
51749: LD_VAR 0 7
51753: PPUSH
51754: LD_VAR 0 8
51758: PPUSH
51759: CALL_OW 428
51763: PUSH
51764: LD_INT 0
51766: EQUAL
51767: IFFALSE 51792
// begin ComMoveXY ( unit , _x , _y ) ;
51769: LD_VAR 0 1
51773: PPUSH
51774: LD_VAR 0 7
51778: PPUSH
51779: LD_VAR 0 8
51783: PPUSH
51784: CALL_OW 111
// exit ;
51788: POP
51789: POP
51790: GO 51796
// end ; end ;
51792: GO 51681
51794: POP
51795: POP
// end ;
51796: LD_VAR 0 3
51800: RET
// export function ScanBase ( side , base_area ) ; begin
51801: LD_INT 0
51803: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
51804: LD_ADDR_VAR 0 3
51808: PUSH
51809: LD_VAR 0 2
51813: PPUSH
51814: LD_INT 81
51816: PUSH
51817: LD_VAR 0 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PPUSH
51826: CALL_OW 70
51830: ST_TO_ADDR
// end ;
51831: LD_VAR 0 3
51835: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51836: LD_INT 0
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
// result := false ;
51842: LD_ADDR_VAR 0 2
51846: PUSH
51847: LD_INT 0
51849: ST_TO_ADDR
// side := GetSide ( unit ) ;
51850: LD_ADDR_VAR 0 3
51854: PUSH
51855: LD_VAR 0 1
51859: PPUSH
51860: CALL_OW 255
51864: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51865: LD_ADDR_VAR 0 4
51869: PUSH
51870: LD_VAR 0 1
51874: PPUSH
51875: CALL_OW 248
51879: ST_TO_ADDR
// case nat of 1 :
51880: LD_VAR 0 4
51884: PUSH
51885: LD_INT 1
51887: DOUBLE
51888: EQUAL
51889: IFTRUE 51893
51891: GO 51904
51893: POP
// tech := tech_lassight ; 2 :
51894: LD_ADDR_VAR 0 5
51898: PUSH
51899: LD_INT 12
51901: ST_TO_ADDR
51902: GO 51943
51904: LD_INT 2
51906: DOUBLE
51907: EQUAL
51908: IFTRUE 51912
51910: GO 51923
51912: POP
// tech := tech_mortar ; 3 :
51913: LD_ADDR_VAR 0 5
51917: PUSH
51918: LD_INT 41
51920: ST_TO_ADDR
51921: GO 51943
51923: LD_INT 3
51925: DOUBLE
51926: EQUAL
51927: IFTRUE 51931
51929: GO 51942
51931: POP
// tech := tech_bazooka ; end ;
51932: LD_ADDR_VAR 0 5
51936: PUSH
51937: LD_INT 44
51939: ST_TO_ADDR
51940: GO 51943
51942: POP
// if Researched ( side , tech ) then
51943: LD_VAR 0 3
51947: PPUSH
51948: LD_VAR 0 5
51952: PPUSH
51953: CALL_OW 325
51957: IFFALSE 51984
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51959: LD_ADDR_VAR 0 2
51963: PUSH
51964: LD_INT 5
51966: PUSH
51967: LD_INT 8
51969: PUSH
51970: LD_INT 9
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: PUSH
51978: LD_VAR 0 4
51982: ARRAY
51983: ST_TO_ADDR
// end ;
51984: LD_VAR 0 2
51988: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51989: LD_INT 0
51991: PPUSH
51992: PPUSH
51993: PPUSH
// if not mines then
51994: LD_VAR 0 2
51998: NOT
51999: IFFALSE 52003
// exit ;
52001: GO 52147
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52003: LD_ADDR_VAR 0 5
52007: PUSH
52008: LD_INT 81
52010: PUSH
52011: LD_VAR 0 1
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: LD_INT 21
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PPUSH
52041: CALL_OW 69
52045: ST_TO_ADDR
// for i in mines do
52046: LD_ADDR_VAR 0 4
52050: PUSH
52051: LD_VAR 0 2
52055: PUSH
52056: FOR_IN
52057: IFFALSE 52145
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52059: LD_VAR 0 4
52063: PUSH
52064: LD_INT 1
52066: ARRAY
52067: PPUSH
52068: LD_VAR 0 4
52072: PUSH
52073: LD_INT 2
52075: ARRAY
52076: PPUSH
52077: CALL_OW 458
52081: NOT
52082: IFFALSE 52086
// continue ;
52084: GO 52056
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52086: LD_VAR 0 4
52090: PUSH
52091: LD_INT 1
52093: ARRAY
52094: PPUSH
52095: LD_VAR 0 4
52099: PUSH
52100: LD_INT 2
52102: ARRAY
52103: PPUSH
52104: CALL_OW 428
52108: PUSH
52109: LD_VAR 0 5
52113: IN
52114: IFFALSE 52143
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52116: LD_VAR 0 4
52120: PUSH
52121: LD_INT 1
52123: ARRAY
52124: PPUSH
52125: LD_VAR 0 4
52129: PUSH
52130: LD_INT 2
52132: ARRAY
52133: PPUSH
52134: LD_VAR 0 1
52138: PPUSH
52139: CALL_OW 456
// end ;
52143: GO 52056
52145: POP
52146: POP
// end ;
52147: LD_VAR 0 3
52151: RET
// export function Count ( array ) ; var i ; begin
52152: LD_INT 0
52154: PPUSH
52155: PPUSH
// result := 0 ;
52156: LD_ADDR_VAR 0 2
52160: PUSH
52161: LD_INT 0
52163: ST_TO_ADDR
// for i in array do
52164: LD_ADDR_VAR 0 3
52168: PUSH
52169: LD_VAR 0 1
52173: PUSH
52174: FOR_IN
52175: IFFALSE 52199
// if i then
52177: LD_VAR 0 3
52181: IFFALSE 52197
// result := result + 1 ;
52183: LD_ADDR_VAR 0 2
52187: PUSH
52188: LD_VAR 0 2
52192: PUSH
52193: LD_INT 1
52195: PLUS
52196: ST_TO_ADDR
52197: GO 52174
52199: POP
52200: POP
// end ;
52201: LD_VAR 0 2
52205: RET
// export function IsEmpty ( building ) ; begin
52206: LD_INT 0
52208: PPUSH
// if not building then
52209: LD_VAR 0 1
52213: NOT
52214: IFFALSE 52218
// exit ;
52216: GO 52261
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52218: LD_ADDR_VAR 0 2
52222: PUSH
52223: LD_VAR 0 1
52227: PUSH
52228: LD_INT 22
52230: PUSH
52231: LD_VAR 0 1
52235: PPUSH
52236: CALL_OW 255
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 58
52247: PUSH
52248: EMPTY
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PPUSH
52255: CALL_OW 69
52259: IN
52260: ST_TO_ADDR
// end ;
52261: LD_VAR 0 2
52265: RET
// export function IsNotFull ( building ) ; var places ; begin
52266: LD_INT 0
52268: PPUSH
52269: PPUSH
// if not building then
52270: LD_VAR 0 1
52274: NOT
52275: IFFALSE 52279
// exit ;
52277: GO 52450
// result := false ;
52279: LD_ADDR_VAR 0 2
52283: PUSH
52284: LD_INT 0
52286: ST_TO_ADDR
// places := 0 ;
52287: LD_ADDR_VAR 0 3
52291: PUSH
52292: LD_INT 0
52294: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52295: LD_VAR 0 1
52299: PPUSH
52300: CALL_OW 266
52304: PUSH
52305: LD_INT 0
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52367
52311: LD_INT 1
52313: DOUBLE
52314: EQUAL
52315: IFTRUE 52367
52317: LD_INT 6
52319: DOUBLE
52320: EQUAL
52321: IFTRUE 52367
52323: LD_INT 7
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52367
52329: LD_INT 8
52331: DOUBLE
52332: EQUAL
52333: IFTRUE 52367
52335: LD_INT 4
52337: DOUBLE
52338: EQUAL
52339: IFTRUE 52367
52341: LD_INT 5
52343: DOUBLE
52344: EQUAL
52345: IFTRUE 52367
52347: LD_INT 2
52349: DOUBLE
52350: EQUAL
52351: IFTRUE 52367
52353: LD_INT 3
52355: DOUBLE
52356: EQUAL
52357: IFTRUE 52367
52359: LD_INT 35
52361: DOUBLE
52362: EQUAL
52363: IFTRUE 52367
52365: GO 52378
52367: POP
// places := 6 ; b_bunker , b_breastwork :
52368: LD_ADDR_VAR 0 3
52372: PUSH
52373: LD_INT 6
52375: ST_TO_ADDR
52376: GO 52423
52378: LD_INT 32
52380: DOUBLE
52381: EQUAL
52382: IFTRUE 52392
52384: LD_INT 31
52386: DOUBLE
52387: EQUAL
52388: IFTRUE 52392
52390: GO 52403
52392: POP
// places := 1 ; b_control_tower :
52393: LD_ADDR_VAR 0 3
52397: PUSH
52398: LD_INT 1
52400: ST_TO_ADDR
52401: GO 52423
52403: LD_INT 36
52405: DOUBLE
52406: EQUAL
52407: IFTRUE 52411
52409: GO 52422
52411: POP
// places := 3 ; end ;
52412: LD_ADDR_VAR 0 3
52416: PUSH
52417: LD_INT 3
52419: ST_TO_ADDR
52420: GO 52423
52422: POP
// if places then
52423: LD_VAR 0 3
52427: IFFALSE 52450
// result := UnitsInside ( building ) < places ;
52429: LD_ADDR_VAR 0 2
52433: PUSH
52434: LD_VAR 0 1
52438: PPUSH
52439: CALL_OW 313
52443: PUSH
52444: LD_VAR 0 3
52448: LESS
52449: ST_TO_ADDR
// end ;
52450: LD_VAR 0 2
52454: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52455: LD_INT 0
52457: PPUSH
52458: PPUSH
52459: PPUSH
52460: PPUSH
// tmp := [ ] ;
52461: LD_ADDR_VAR 0 3
52465: PUSH
52466: EMPTY
52467: ST_TO_ADDR
// list := [ ] ;
52468: LD_ADDR_VAR 0 5
52472: PUSH
52473: EMPTY
52474: ST_TO_ADDR
// for i = 16 to 25 do
52475: LD_ADDR_VAR 0 4
52479: PUSH
52480: DOUBLE
52481: LD_INT 16
52483: DEC
52484: ST_TO_ADDR
52485: LD_INT 25
52487: PUSH
52488: FOR_TO
52489: IFFALSE 52562
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52491: LD_ADDR_VAR 0 3
52495: PUSH
52496: LD_VAR 0 3
52500: PUSH
52501: LD_INT 22
52503: PUSH
52504: LD_VAR 0 1
52508: PPUSH
52509: CALL_OW 255
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 91
52520: PUSH
52521: LD_VAR 0 1
52525: PUSH
52526: LD_INT 6
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 30
52536: PUSH
52537: LD_VAR 0 4
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: PUSH
52551: EMPTY
52552: LIST
52553: PPUSH
52554: CALL_OW 69
52558: ADD
52559: ST_TO_ADDR
52560: GO 52488
52562: POP
52563: POP
// for i = 1 to tmp do
52564: LD_ADDR_VAR 0 4
52568: PUSH
52569: DOUBLE
52570: LD_INT 1
52572: DEC
52573: ST_TO_ADDR
52574: LD_VAR 0 3
52578: PUSH
52579: FOR_TO
52580: IFFALSE 52668
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52582: LD_ADDR_VAR 0 5
52586: PUSH
52587: LD_VAR 0 5
52591: PUSH
52592: LD_VAR 0 3
52596: PUSH
52597: LD_VAR 0 4
52601: ARRAY
52602: PPUSH
52603: CALL_OW 266
52607: PUSH
52608: LD_VAR 0 3
52612: PUSH
52613: LD_VAR 0 4
52617: ARRAY
52618: PPUSH
52619: CALL_OW 250
52623: PUSH
52624: LD_VAR 0 3
52628: PUSH
52629: LD_VAR 0 4
52633: ARRAY
52634: PPUSH
52635: CALL_OW 251
52639: PUSH
52640: LD_VAR 0 3
52644: PUSH
52645: LD_VAR 0 4
52649: ARRAY
52650: PPUSH
52651: CALL_OW 254
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: PUSH
52662: EMPTY
52663: LIST
52664: ADD
52665: ST_TO_ADDR
52666: GO 52579
52668: POP
52669: POP
// result := list ;
52670: LD_ADDR_VAR 0 2
52674: PUSH
52675: LD_VAR 0 5
52679: ST_TO_ADDR
// end ;
52680: LD_VAR 0 2
52684: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52685: LD_INT 0
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
// if not factory then
52694: LD_VAR 0 1
52698: NOT
52699: IFFALSE 52703
// exit ;
52701: GO 53296
// if control = control_apeman then
52703: LD_VAR 0 4
52707: PUSH
52708: LD_INT 5
52710: EQUAL
52711: IFFALSE 52820
// begin tmp := UnitsInside ( factory ) ;
52713: LD_ADDR_VAR 0 8
52717: PUSH
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 313
52727: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52728: LD_VAR 0 8
52732: PPUSH
52733: LD_INT 25
52735: PUSH
52736: LD_INT 12
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PPUSH
52743: CALL_OW 72
52747: NOT
52748: IFFALSE 52758
// control := control_manual ;
52750: LD_ADDR_VAR 0 4
52754: PUSH
52755: LD_INT 1
52757: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52758: LD_ADDR_VAR 0 8
52762: PUSH
52763: LD_VAR 0 1
52767: PPUSH
52768: CALL 52455 0 1
52772: ST_TO_ADDR
// if tmp then
52773: LD_VAR 0 8
52777: IFFALSE 52820
// begin for i in tmp do
52779: LD_ADDR_VAR 0 7
52783: PUSH
52784: LD_VAR 0 8
52788: PUSH
52789: FOR_IN
52790: IFFALSE 52818
// if i [ 1 ] = b_ext_radio then
52792: LD_VAR 0 7
52796: PUSH
52797: LD_INT 1
52799: ARRAY
52800: PUSH
52801: LD_INT 22
52803: EQUAL
52804: IFFALSE 52816
// begin control := control_remote ;
52806: LD_ADDR_VAR 0 4
52810: PUSH
52811: LD_INT 2
52813: ST_TO_ADDR
// break ;
52814: GO 52818
// end ;
52816: GO 52789
52818: POP
52819: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52820: LD_VAR 0 1
52824: PPUSH
52825: LD_VAR 0 2
52829: PPUSH
52830: LD_VAR 0 3
52834: PPUSH
52835: LD_VAR 0 4
52839: PPUSH
52840: LD_VAR 0 5
52844: PPUSH
52845: CALL_OW 448
52849: IFFALSE 52884
// begin result := [ chassis , engine , control , weapon ] ;
52851: LD_ADDR_VAR 0 6
52855: PUSH
52856: LD_VAR 0 2
52860: PUSH
52861: LD_VAR 0 3
52865: PUSH
52866: LD_VAR 0 4
52870: PUSH
52871: LD_VAR 0 5
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// exit ;
52882: GO 53296
// end ; _chassis := AvailableChassisList ( factory ) ;
52884: LD_ADDR_VAR 0 9
52888: PUSH
52889: LD_VAR 0 1
52893: PPUSH
52894: CALL_OW 475
52898: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52899: LD_ADDR_VAR 0 11
52903: PUSH
52904: LD_VAR 0 1
52908: PPUSH
52909: CALL_OW 476
52913: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52914: LD_ADDR_VAR 0 12
52918: PUSH
52919: LD_VAR 0 1
52923: PPUSH
52924: CALL_OW 477
52928: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52929: LD_ADDR_VAR 0 10
52933: PUSH
52934: LD_VAR 0 1
52938: PPUSH
52939: CALL_OW 478
52943: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52944: LD_VAR 0 9
52948: NOT
52949: PUSH
52950: LD_VAR 0 11
52954: NOT
52955: OR
52956: PUSH
52957: LD_VAR 0 12
52961: NOT
52962: OR
52963: PUSH
52964: LD_VAR 0 10
52968: NOT
52969: OR
52970: IFFALSE 53005
// begin result := [ chassis , engine , control , weapon ] ;
52972: LD_ADDR_VAR 0 6
52976: PUSH
52977: LD_VAR 0 2
52981: PUSH
52982: LD_VAR 0 3
52986: PUSH
52987: LD_VAR 0 4
52991: PUSH
52992: LD_VAR 0 5
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// exit ;
53003: GO 53296
// end ; if not chassis in _chassis then
53005: LD_VAR 0 2
53009: PUSH
53010: LD_VAR 0 9
53014: IN
53015: NOT
53016: IFFALSE 53042
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53018: LD_ADDR_VAR 0 2
53022: PUSH
53023: LD_VAR 0 9
53027: PUSH
53028: LD_INT 1
53030: PPUSH
53031: LD_VAR 0 9
53035: PPUSH
53036: CALL_OW 12
53040: ARRAY
53041: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53042: LD_VAR 0 2
53046: PPUSH
53047: LD_VAR 0 3
53051: PPUSH
53052: CALL 53301 0 2
53056: NOT
53057: IFFALSE 53116
// repeat engine := _engine [ 1 ] ;
53059: LD_ADDR_VAR 0 3
53063: PUSH
53064: LD_VAR 0 11
53068: PUSH
53069: LD_INT 1
53071: ARRAY
53072: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53073: LD_ADDR_VAR 0 11
53077: PUSH
53078: LD_VAR 0 11
53082: PPUSH
53083: LD_INT 1
53085: PPUSH
53086: CALL_OW 3
53090: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53091: LD_VAR 0 2
53095: PPUSH
53096: LD_VAR 0 3
53100: PPUSH
53101: CALL 53301 0 2
53105: PUSH
53106: LD_VAR 0 11
53110: PUSH
53111: EMPTY
53112: EQUAL
53113: OR
53114: IFFALSE 53059
// if not control in _control then
53116: LD_VAR 0 4
53120: PUSH
53121: LD_VAR 0 12
53125: IN
53126: NOT
53127: IFFALSE 53153
// control := _control [ rand ( 1 , _control ) ] ;
53129: LD_ADDR_VAR 0 4
53133: PUSH
53134: LD_VAR 0 12
53138: PUSH
53139: LD_INT 1
53141: PPUSH
53142: LD_VAR 0 12
53146: PPUSH
53147: CALL_OW 12
53151: ARRAY
53152: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53153: LD_VAR 0 2
53157: PPUSH
53158: LD_VAR 0 5
53162: PPUSH
53163: CALL 53521 0 2
53167: NOT
53168: IFFALSE 53227
// repeat weapon := _weapon [ 1 ] ;
53170: LD_ADDR_VAR 0 5
53174: PUSH
53175: LD_VAR 0 10
53179: PUSH
53180: LD_INT 1
53182: ARRAY
53183: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53184: LD_ADDR_VAR 0 10
53188: PUSH
53189: LD_VAR 0 10
53193: PPUSH
53194: LD_INT 1
53196: PPUSH
53197: CALL_OW 3
53201: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53202: LD_VAR 0 2
53206: PPUSH
53207: LD_VAR 0 5
53211: PPUSH
53212: CALL 53521 0 2
53216: PUSH
53217: LD_VAR 0 10
53221: PUSH
53222: EMPTY
53223: EQUAL
53224: OR
53225: IFFALSE 53170
// result := [ ] ;
53227: LD_ADDR_VAR 0 6
53231: PUSH
53232: EMPTY
53233: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53234: LD_VAR 0 1
53238: PPUSH
53239: LD_VAR 0 2
53243: PPUSH
53244: LD_VAR 0 3
53248: PPUSH
53249: LD_VAR 0 4
53253: PPUSH
53254: LD_VAR 0 5
53258: PPUSH
53259: CALL_OW 448
53263: IFFALSE 53296
// result := [ chassis , engine , control , weapon ] ;
53265: LD_ADDR_VAR 0 6
53269: PUSH
53270: LD_VAR 0 2
53274: PUSH
53275: LD_VAR 0 3
53279: PUSH
53280: LD_VAR 0 4
53284: PUSH
53285: LD_VAR 0 5
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// end ;
53296: LD_VAR 0 6
53300: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53301: LD_INT 0
53303: PPUSH
// if not chassis or not engine then
53304: LD_VAR 0 1
53308: NOT
53309: PUSH
53310: LD_VAR 0 2
53314: NOT
53315: OR
53316: IFFALSE 53320
// exit ;
53318: GO 53516
// case engine of engine_solar :
53320: LD_VAR 0 2
53324: PUSH
53325: LD_INT 2
53327: DOUBLE
53328: EQUAL
53329: IFTRUE 53333
53331: GO 53371
53333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53334: LD_ADDR_VAR 0 3
53338: PUSH
53339: LD_INT 11
53341: PUSH
53342: LD_INT 12
53344: PUSH
53345: LD_INT 13
53347: PUSH
53348: LD_INT 14
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
53369: GO 53500
53371: LD_INT 1
53373: DOUBLE
53374: EQUAL
53375: IFTRUE 53379
53377: GO 53441
53379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53380: LD_ADDR_VAR 0 3
53384: PUSH
53385: LD_INT 11
53387: PUSH
53388: LD_INT 12
53390: PUSH
53391: LD_INT 13
53393: PUSH
53394: LD_INT 14
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 4
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: LD_INT 21
53414: PUSH
53415: LD_INT 23
53417: PUSH
53418: LD_INT 22
53420: PUSH
53421: LD_INT 24
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
53439: GO 53500
53441: LD_INT 3
53443: DOUBLE
53444: EQUAL
53445: IFTRUE 53449
53447: GO 53499
53449: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53450: LD_ADDR_VAR 0 3
53454: PUSH
53455: LD_INT 13
53457: PUSH
53458: LD_INT 14
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: LD_INT 4
53469: PUSH
53470: LD_INT 5
53472: PUSH
53473: LD_INT 21
53475: PUSH
53476: LD_INT 22
53478: PUSH
53479: LD_INT 23
53481: PUSH
53482: LD_INT 24
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: ST_TO_ADDR
53497: GO 53500
53499: POP
// result := ( chassis in result ) ;
53500: LD_ADDR_VAR 0 3
53504: PUSH
53505: LD_VAR 0 1
53509: PUSH
53510: LD_VAR 0 3
53514: IN
53515: ST_TO_ADDR
// end ;
53516: LD_VAR 0 3
53520: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53521: LD_INT 0
53523: PPUSH
// if not chassis or not weapon then
53524: LD_VAR 0 1
53528: NOT
53529: PUSH
53530: LD_VAR 0 2
53534: NOT
53535: OR
53536: IFFALSE 53540
// exit ;
53538: GO 54600
// case weapon of us_machine_gun :
53540: LD_VAR 0 2
53544: PUSH
53545: LD_INT 2
53547: DOUBLE
53548: EQUAL
53549: IFTRUE 53553
53551: GO 53583
53553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53554: LD_ADDR_VAR 0 3
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: LD_INT 4
53570: PUSH
53571: LD_INT 5
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
53581: GO 54584
53583: LD_INT 3
53585: DOUBLE
53586: EQUAL
53587: IFTRUE 53591
53589: GO 53621
53591: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53592: LD_ADDR_VAR 0 3
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: LD_INT 4
53608: PUSH
53609: LD_INT 5
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: ST_TO_ADDR
53619: GO 54584
53621: LD_INT 11
53623: DOUBLE
53624: EQUAL
53625: IFTRUE 53629
53627: GO 53659
53629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53630: LD_ADDR_VAR 0 3
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: LD_INT 4
53646: PUSH
53647: LD_INT 5
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: ST_TO_ADDR
53657: GO 54584
53659: LD_INT 4
53661: DOUBLE
53662: EQUAL
53663: IFTRUE 53667
53665: GO 53693
53667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53668: LD_ADDR_VAR 0 3
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: ST_TO_ADDR
53691: GO 54584
53693: LD_INT 5
53695: DOUBLE
53696: EQUAL
53697: IFTRUE 53701
53699: GO 53727
53701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53702: LD_ADDR_VAR 0 3
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 4
53715: PUSH
53716: LD_INT 5
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: ST_TO_ADDR
53725: GO 54584
53727: LD_INT 9
53729: DOUBLE
53730: EQUAL
53731: IFTRUE 53735
53733: GO 53761
53735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53736: LD_ADDR_VAR 0 3
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 3
53746: PUSH
53747: LD_INT 4
53749: PUSH
53750: LD_INT 5
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: ST_TO_ADDR
53759: GO 54584
53761: LD_INT 7
53763: DOUBLE
53764: EQUAL
53765: IFTRUE 53769
53767: GO 53795
53769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53770: LD_ADDR_VAR 0 3
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: LD_INT 4
53783: PUSH
53784: LD_INT 5
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
53793: GO 54584
53795: LD_INT 12
53797: DOUBLE
53798: EQUAL
53799: IFTRUE 53803
53801: GO 53829
53803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53804: LD_ADDR_VAR 0 3
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: LD_INT 4
53817: PUSH
53818: LD_INT 5
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: ST_TO_ADDR
53827: GO 54584
53829: LD_INT 13
53831: DOUBLE
53832: EQUAL
53833: IFTRUE 53837
53835: GO 53863
53837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53838: LD_ADDR_VAR 0 3
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: LD_INT 4
53851: PUSH
53852: LD_INT 5
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
53861: GO 54584
53863: LD_INT 14
53865: DOUBLE
53866: EQUAL
53867: IFTRUE 53871
53869: GO 53889
53871: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53872: LD_ADDR_VAR 0 3
53876: PUSH
53877: LD_INT 4
53879: PUSH
53880: LD_INT 5
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: ST_TO_ADDR
53887: GO 54584
53889: LD_INT 6
53891: DOUBLE
53892: EQUAL
53893: IFTRUE 53897
53895: GO 53915
53897: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53898: LD_ADDR_VAR 0 3
53902: PUSH
53903: LD_INT 4
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: ST_TO_ADDR
53913: GO 54584
53915: LD_INT 10
53917: DOUBLE
53918: EQUAL
53919: IFTRUE 53923
53921: GO 53941
53923: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53924: LD_ADDR_VAR 0 3
53928: PUSH
53929: LD_INT 4
53931: PUSH
53932: LD_INT 5
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: ST_TO_ADDR
53939: GO 54584
53941: LD_INT 22
53943: DOUBLE
53944: EQUAL
53945: IFTRUE 53949
53947: GO 53975
53949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53950: LD_ADDR_VAR 0 3
53954: PUSH
53955: LD_INT 11
53957: PUSH
53958: LD_INT 12
53960: PUSH
53961: LD_INT 13
53963: PUSH
53964: LD_INT 14
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: ST_TO_ADDR
53973: GO 54584
53975: LD_INT 23
53977: DOUBLE
53978: EQUAL
53979: IFTRUE 53983
53981: GO 54009
53983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53984: LD_ADDR_VAR 0 3
53988: PUSH
53989: LD_INT 11
53991: PUSH
53992: LD_INT 12
53994: PUSH
53995: LD_INT 13
53997: PUSH
53998: LD_INT 14
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
54007: GO 54584
54009: LD_INT 24
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54017
54015: GO 54043
54017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54018: LD_ADDR_VAR 0 3
54022: PUSH
54023: LD_INT 11
54025: PUSH
54026: LD_INT 12
54028: PUSH
54029: LD_INT 13
54031: PUSH
54032: LD_INT 14
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
54041: GO 54584
54043: LD_INT 30
54045: DOUBLE
54046: EQUAL
54047: IFTRUE 54051
54049: GO 54077
54051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54052: LD_ADDR_VAR 0 3
54056: PUSH
54057: LD_INT 11
54059: PUSH
54060: LD_INT 12
54062: PUSH
54063: LD_INT 13
54065: PUSH
54066: LD_INT 14
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
54075: GO 54584
54077: LD_INT 25
54079: DOUBLE
54080: EQUAL
54081: IFTRUE 54085
54083: GO 54103
54085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54086: LD_ADDR_VAR 0 3
54090: PUSH
54091: LD_INT 13
54093: PUSH
54094: LD_INT 14
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: ST_TO_ADDR
54101: GO 54584
54103: LD_INT 27
54105: DOUBLE
54106: EQUAL
54107: IFTRUE 54111
54109: GO 54129
54111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
54112: LD_ADDR_VAR 0 3
54116: PUSH
54117: LD_INT 13
54119: PUSH
54120: LD_INT 14
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: ST_TO_ADDR
54127: GO 54584
54129: LD_INT 92
54131: DOUBLE
54132: EQUAL
54133: IFTRUE 54137
54135: GO 54163
54137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54138: LD_ADDR_VAR 0 3
54142: PUSH
54143: LD_INT 11
54145: PUSH
54146: LD_INT 12
54148: PUSH
54149: LD_INT 13
54151: PUSH
54152: LD_INT 14
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
54161: GO 54584
54163: LD_INT 28
54165: DOUBLE
54166: EQUAL
54167: IFTRUE 54171
54169: GO 54189
54171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54172: LD_ADDR_VAR 0 3
54176: PUSH
54177: LD_INT 13
54179: PUSH
54180: LD_INT 14
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: ST_TO_ADDR
54187: GO 54584
54189: LD_INT 29
54191: DOUBLE
54192: EQUAL
54193: IFTRUE 54197
54195: GO 54215
54197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54198: LD_ADDR_VAR 0 3
54202: PUSH
54203: LD_INT 13
54205: PUSH
54206: LD_INT 14
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: ST_TO_ADDR
54213: GO 54584
54215: LD_INT 31
54217: DOUBLE
54218: EQUAL
54219: IFTRUE 54223
54221: GO 54241
54223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54224: LD_ADDR_VAR 0 3
54228: PUSH
54229: LD_INT 13
54231: PUSH
54232: LD_INT 14
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: ST_TO_ADDR
54239: GO 54584
54241: LD_INT 26
54243: DOUBLE
54244: EQUAL
54245: IFTRUE 54249
54247: GO 54267
54249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54250: LD_ADDR_VAR 0 3
54254: PUSH
54255: LD_INT 13
54257: PUSH
54258: LD_INT 14
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: ST_TO_ADDR
54265: GO 54584
54267: LD_INT 42
54269: DOUBLE
54270: EQUAL
54271: IFTRUE 54275
54273: GO 54301
54275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54276: LD_ADDR_VAR 0 3
54280: PUSH
54281: LD_INT 21
54283: PUSH
54284: LD_INT 22
54286: PUSH
54287: LD_INT 23
54289: PUSH
54290: LD_INT 24
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
54299: GO 54584
54301: LD_INT 43
54303: DOUBLE
54304: EQUAL
54305: IFTRUE 54309
54307: GO 54335
54309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54310: LD_ADDR_VAR 0 3
54314: PUSH
54315: LD_INT 21
54317: PUSH
54318: LD_INT 22
54320: PUSH
54321: LD_INT 23
54323: PUSH
54324: LD_INT 24
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: ST_TO_ADDR
54333: GO 54584
54335: LD_INT 44
54337: DOUBLE
54338: EQUAL
54339: IFTRUE 54343
54341: GO 54369
54343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54344: LD_ADDR_VAR 0 3
54348: PUSH
54349: LD_INT 21
54351: PUSH
54352: LD_INT 22
54354: PUSH
54355: LD_INT 23
54357: PUSH
54358: LD_INT 24
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
54367: GO 54584
54369: LD_INT 45
54371: DOUBLE
54372: EQUAL
54373: IFTRUE 54377
54375: GO 54403
54377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54378: LD_ADDR_VAR 0 3
54382: PUSH
54383: LD_INT 21
54385: PUSH
54386: LD_INT 22
54388: PUSH
54389: LD_INT 23
54391: PUSH
54392: LD_INT 24
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: ST_TO_ADDR
54401: GO 54584
54403: LD_INT 49
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54411
54409: GO 54437
54411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54412: LD_ADDR_VAR 0 3
54416: PUSH
54417: LD_INT 21
54419: PUSH
54420: LD_INT 22
54422: PUSH
54423: LD_INT 23
54425: PUSH
54426: LD_INT 24
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
54435: GO 54584
54437: LD_INT 51
54439: DOUBLE
54440: EQUAL
54441: IFTRUE 54445
54443: GO 54471
54445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54446: LD_ADDR_VAR 0 3
54450: PUSH
54451: LD_INT 21
54453: PUSH
54454: LD_INT 22
54456: PUSH
54457: LD_INT 23
54459: PUSH
54460: LD_INT 24
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: ST_TO_ADDR
54469: GO 54584
54471: LD_INT 52
54473: DOUBLE
54474: EQUAL
54475: IFTRUE 54479
54477: GO 54505
54479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54480: LD_ADDR_VAR 0 3
54484: PUSH
54485: LD_INT 21
54487: PUSH
54488: LD_INT 22
54490: PUSH
54491: LD_INT 23
54493: PUSH
54494: LD_INT 24
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: ST_TO_ADDR
54503: GO 54584
54505: LD_INT 53
54507: DOUBLE
54508: EQUAL
54509: IFTRUE 54513
54511: GO 54531
54513: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54514: LD_ADDR_VAR 0 3
54518: PUSH
54519: LD_INT 23
54521: PUSH
54522: LD_INT 24
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: ST_TO_ADDR
54529: GO 54584
54531: LD_INT 46
54533: DOUBLE
54534: EQUAL
54535: IFTRUE 54539
54537: GO 54557
54539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54540: LD_ADDR_VAR 0 3
54544: PUSH
54545: LD_INT 23
54547: PUSH
54548: LD_INT 24
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: ST_TO_ADDR
54555: GO 54584
54557: LD_INT 47
54559: DOUBLE
54560: EQUAL
54561: IFTRUE 54565
54563: GO 54583
54565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54566: LD_ADDR_VAR 0 3
54570: PUSH
54571: LD_INT 23
54573: PUSH
54574: LD_INT 24
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: ST_TO_ADDR
54581: GO 54584
54583: POP
// result := ( chassis in result ) ;
54584: LD_ADDR_VAR 0 3
54588: PUSH
54589: LD_VAR 0 1
54593: PUSH
54594: LD_VAR 0 3
54598: IN
54599: ST_TO_ADDR
// end ;
54600: LD_VAR 0 3
54604: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54605: LD_INT 0
54607: PPUSH
54608: PPUSH
54609: PPUSH
54610: PPUSH
54611: PPUSH
54612: PPUSH
54613: PPUSH
// result := array ;
54614: LD_ADDR_VAR 0 5
54618: PUSH
54619: LD_VAR 0 1
54623: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54624: LD_VAR 0 1
54628: NOT
54629: PUSH
54630: LD_VAR 0 2
54634: NOT
54635: OR
54636: PUSH
54637: LD_VAR 0 3
54641: NOT
54642: OR
54643: PUSH
54644: LD_VAR 0 2
54648: PUSH
54649: LD_VAR 0 1
54653: GREATER
54654: OR
54655: PUSH
54656: LD_VAR 0 3
54660: PUSH
54661: LD_VAR 0 1
54665: GREATER
54666: OR
54667: IFFALSE 54671
// exit ;
54669: GO 54967
// if direction then
54671: LD_VAR 0 4
54675: IFFALSE 54739
// begin d := 1 ;
54677: LD_ADDR_VAR 0 9
54681: PUSH
54682: LD_INT 1
54684: ST_TO_ADDR
// if i_from > i_to then
54685: LD_VAR 0 2
54689: PUSH
54690: LD_VAR 0 3
54694: GREATER
54695: IFFALSE 54721
// length := ( array - i_from ) + i_to else
54697: LD_ADDR_VAR 0 11
54701: PUSH
54702: LD_VAR 0 1
54706: PUSH
54707: LD_VAR 0 2
54711: MINUS
54712: PUSH
54713: LD_VAR 0 3
54717: PLUS
54718: ST_TO_ADDR
54719: GO 54737
// length := i_to - i_from ;
54721: LD_ADDR_VAR 0 11
54725: PUSH
54726: LD_VAR 0 3
54730: PUSH
54731: LD_VAR 0 2
54735: MINUS
54736: ST_TO_ADDR
// end else
54737: GO 54800
// begin d := - 1 ;
54739: LD_ADDR_VAR 0 9
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: ST_TO_ADDR
// if i_from > i_to then
54748: LD_VAR 0 2
54752: PUSH
54753: LD_VAR 0 3
54757: GREATER
54758: IFFALSE 54778
// length := i_from - i_to else
54760: LD_ADDR_VAR 0 11
54764: PUSH
54765: LD_VAR 0 2
54769: PUSH
54770: LD_VAR 0 3
54774: MINUS
54775: ST_TO_ADDR
54776: GO 54800
// length := ( array - i_to ) + i_from ;
54778: LD_ADDR_VAR 0 11
54782: PUSH
54783: LD_VAR 0 1
54787: PUSH
54788: LD_VAR 0 3
54792: MINUS
54793: PUSH
54794: LD_VAR 0 2
54798: PLUS
54799: ST_TO_ADDR
// end ; if not length then
54800: LD_VAR 0 11
54804: NOT
54805: IFFALSE 54809
// exit ;
54807: GO 54967
// tmp := array ;
54809: LD_ADDR_VAR 0 10
54813: PUSH
54814: LD_VAR 0 1
54818: ST_TO_ADDR
// for i = 1 to length do
54819: LD_ADDR_VAR 0 6
54823: PUSH
54824: DOUBLE
54825: LD_INT 1
54827: DEC
54828: ST_TO_ADDR
54829: LD_VAR 0 11
54833: PUSH
54834: FOR_TO
54835: IFFALSE 54955
// begin for j = 1 to array do
54837: LD_ADDR_VAR 0 7
54841: PUSH
54842: DOUBLE
54843: LD_INT 1
54845: DEC
54846: ST_TO_ADDR
54847: LD_VAR 0 1
54851: PUSH
54852: FOR_TO
54853: IFFALSE 54941
// begin k := j + d ;
54855: LD_ADDR_VAR 0 8
54859: PUSH
54860: LD_VAR 0 7
54864: PUSH
54865: LD_VAR 0 9
54869: PLUS
54870: ST_TO_ADDR
// if k > array then
54871: LD_VAR 0 8
54875: PUSH
54876: LD_VAR 0 1
54880: GREATER
54881: IFFALSE 54891
// k := 1 ;
54883: LD_ADDR_VAR 0 8
54887: PUSH
54888: LD_INT 1
54890: ST_TO_ADDR
// if not k then
54891: LD_VAR 0 8
54895: NOT
54896: IFFALSE 54908
// k := array ;
54898: LD_ADDR_VAR 0 8
54902: PUSH
54903: LD_VAR 0 1
54907: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54908: LD_ADDR_VAR 0 10
54912: PUSH
54913: LD_VAR 0 10
54917: PPUSH
54918: LD_VAR 0 8
54922: PPUSH
54923: LD_VAR 0 1
54927: PUSH
54928: LD_VAR 0 7
54932: ARRAY
54933: PPUSH
54934: CALL_OW 1
54938: ST_TO_ADDR
// end ;
54939: GO 54852
54941: POP
54942: POP
// array := tmp ;
54943: LD_ADDR_VAR 0 1
54947: PUSH
54948: LD_VAR 0 10
54952: ST_TO_ADDR
// end ;
54953: GO 54834
54955: POP
54956: POP
// result := array ;
54957: LD_ADDR_VAR 0 5
54961: PUSH
54962: LD_VAR 0 1
54966: ST_TO_ADDR
// end ;
54967: LD_VAR 0 5
54971: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54972: LD_INT 0
54974: PPUSH
54975: PPUSH
// result := 0 ;
54976: LD_ADDR_VAR 0 3
54980: PUSH
54981: LD_INT 0
54983: ST_TO_ADDR
// if not array or not value in array then
54984: LD_VAR 0 1
54988: NOT
54989: PUSH
54990: LD_VAR 0 2
54994: PUSH
54995: LD_VAR 0 1
54999: IN
55000: NOT
55001: OR
55002: IFFALSE 55006
// exit ;
55004: GO 55060
// for i = 1 to array do
55006: LD_ADDR_VAR 0 4
55010: PUSH
55011: DOUBLE
55012: LD_INT 1
55014: DEC
55015: ST_TO_ADDR
55016: LD_VAR 0 1
55020: PUSH
55021: FOR_TO
55022: IFFALSE 55058
// if value = array [ i ] then
55024: LD_VAR 0 2
55028: PUSH
55029: LD_VAR 0 1
55033: PUSH
55034: LD_VAR 0 4
55038: ARRAY
55039: EQUAL
55040: IFFALSE 55056
// begin result := i ;
55042: LD_ADDR_VAR 0 3
55046: PUSH
55047: LD_VAR 0 4
55051: ST_TO_ADDR
// exit ;
55052: POP
55053: POP
55054: GO 55060
// end ;
55056: GO 55021
55058: POP
55059: POP
// end ;
55060: LD_VAR 0 3
55064: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55065: LD_INT 0
55067: PPUSH
// vc_chassis := chassis ;
55068: LD_ADDR_OWVAR 37
55072: PUSH
55073: LD_VAR 0 1
55077: ST_TO_ADDR
// vc_engine := engine ;
55078: LD_ADDR_OWVAR 39
55082: PUSH
55083: LD_VAR 0 2
55087: ST_TO_ADDR
// vc_control := control ;
55088: LD_ADDR_OWVAR 38
55092: PUSH
55093: LD_VAR 0 3
55097: ST_TO_ADDR
// vc_weapon := weapon ;
55098: LD_ADDR_OWVAR 40
55102: PUSH
55103: LD_VAR 0 4
55107: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55108: LD_ADDR_OWVAR 41
55112: PUSH
55113: LD_VAR 0 5
55117: ST_TO_ADDR
// end ;
55118: LD_VAR 0 6
55122: RET
// export function WantPlant ( unit ) ; var task ; begin
55123: LD_INT 0
55125: PPUSH
55126: PPUSH
// result := false ;
55127: LD_ADDR_VAR 0 2
55131: PUSH
55132: LD_INT 0
55134: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55135: LD_ADDR_VAR 0 3
55139: PUSH
55140: LD_VAR 0 1
55144: PPUSH
55145: CALL_OW 437
55149: ST_TO_ADDR
// if task then
55150: LD_VAR 0 3
55154: IFFALSE 55182
// if task [ 1 ] [ 1 ] = p then
55156: LD_VAR 0 3
55160: PUSH
55161: LD_INT 1
55163: ARRAY
55164: PUSH
55165: LD_INT 1
55167: ARRAY
55168: PUSH
55169: LD_STRING p
55171: EQUAL
55172: IFFALSE 55182
// result := true ;
55174: LD_ADDR_VAR 0 2
55178: PUSH
55179: LD_INT 1
55181: ST_TO_ADDR
// end ;
55182: LD_VAR 0 2
55186: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55187: LD_INT 0
55189: PPUSH
55190: PPUSH
55191: PPUSH
55192: PPUSH
// if pos < 1 then
55193: LD_VAR 0 2
55197: PUSH
55198: LD_INT 1
55200: LESS
55201: IFFALSE 55205
// exit ;
55203: GO 55508
// if pos = 1 then
55205: LD_VAR 0 2
55209: PUSH
55210: LD_INT 1
55212: EQUAL
55213: IFFALSE 55246
// result := Replace ( arr , pos [ 1 ] , value ) else
55215: LD_ADDR_VAR 0 4
55219: PUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: LD_VAR 0 2
55229: PUSH
55230: LD_INT 1
55232: ARRAY
55233: PPUSH
55234: LD_VAR 0 3
55238: PPUSH
55239: CALL_OW 1
55243: ST_TO_ADDR
55244: GO 55508
// begin tmp := arr ;
55246: LD_ADDR_VAR 0 6
55250: PUSH
55251: LD_VAR 0 1
55255: ST_TO_ADDR
// s_arr := [ tmp ] ;
55256: LD_ADDR_VAR 0 7
55260: PUSH
55261: LD_VAR 0 6
55265: PUSH
55266: EMPTY
55267: LIST
55268: ST_TO_ADDR
// for i = 1 to pos - 1 do
55269: LD_ADDR_VAR 0 5
55273: PUSH
55274: DOUBLE
55275: LD_INT 1
55277: DEC
55278: ST_TO_ADDR
55279: LD_VAR 0 2
55283: PUSH
55284: LD_INT 1
55286: MINUS
55287: PUSH
55288: FOR_TO
55289: IFFALSE 55334
// begin tmp := tmp [ pos [ i ] ] ;
55291: LD_ADDR_VAR 0 6
55295: PUSH
55296: LD_VAR 0 6
55300: PUSH
55301: LD_VAR 0 2
55305: PUSH
55306: LD_VAR 0 5
55310: ARRAY
55311: ARRAY
55312: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55313: LD_ADDR_VAR 0 7
55317: PUSH
55318: LD_VAR 0 7
55322: PUSH
55323: LD_VAR 0 6
55327: PUSH
55328: EMPTY
55329: LIST
55330: ADD
55331: ST_TO_ADDR
// end ;
55332: GO 55288
55334: POP
55335: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55336: LD_ADDR_VAR 0 6
55340: PUSH
55341: LD_VAR 0 6
55345: PPUSH
55346: LD_VAR 0 2
55350: PUSH
55351: LD_VAR 0 2
55355: ARRAY
55356: PPUSH
55357: LD_VAR 0 3
55361: PPUSH
55362: CALL_OW 1
55366: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55367: LD_ADDR_VAR 0 7
55371: PUSH
55372: LD_VAR 0 7
55376: PPUSH
55377: LD_VAR 0 7
55381: PPUSH
55382: LD_VAR 0 6
55386: PPUSH
55387: CALL_OW 1
55391: ST_TO_ADDR
// for i = s_arr downto 2 do
55392: LD_ADDR_VAR 0 5
55396: PUSH
55397: DOUBLE
55398: LD_VAR 0 7
55402: INC
55403: ST_TO_ADDR
55404: LD_INT 2
55406: PUSH
55407: FOR_DOWNTO
55408: IFFALSE 55492
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55410: LD_ADDR_VAR 0 6
55414: PUSH
55415: LD_VAR 0 7
55419: PUSH
55420: LD_VAR 0 5
55424: PUSH
55425: LD_INT 1
55427: MINUS
55428: ARRAY
55429: PPUSH
55430: LD_VAR 0 2
55434: PUSH
55435: LD_VAR 0 5
55439: PUSH
55440: LD_INT 1
55442: MINUS
55443: ARRAY
55444: PPUSH
55445: LD_VAR 0 7
55449: PUSH
55450: LD_VAR 0 5
55454: ARRAY
55455: PPUSH
55456: CALL_OW 1
55460: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55461: LD_ADDR_VAR 0 7
55465: PUSH
55466: LD_VAR 0 7
55470: PPUSH
55471: LD_VAR 0 5
55475: PUSH
55476: LD_INT 1
55478: MINUS
55479: PPUSH
55480: LD_VAR 0 6
55484: PPUSH
55485: CALL_OW 1
55489: ST_TO_ADDR
// end ;
55490: GO 55407
55492: POP
55493: POP
// result := s_arr [ 1 ] ;
55494: LD_ADDR_VAR 0 4
55498: PUSH
55499: LD_VAR 0 7
55503: PUSH
55504: LD_INT 1
55506: ARRAY
55507: ST_TO_ADDR
// end ; end ;
55508: LD_VAR 0 4
55512: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55513: LD_INT 0
55515: PPUSH
55516: PPUSH
// if not list then
55517: LD_VAR 0 1
55521: NOT
55522: IFFALSE 55526
// exit ;
55524: GO 55617
// i := list [ pos1 ] ;
55526: LD_ADDR_VAR 0 5
55530: PUSH
55531: LD_VAR 0 1
55535: PUSH
55536: LD_VAR 0 2
55540: ARRAY
55541: ST_TO_ADDR
// if not i then
55542: LD_VAR 0 5
55546: NOT
55547: IFFALSE 55551
// exit ;
55549: GO 55617
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55551: LD_ADDR_VAR 0 1
55555: PUSH
55556: LD_VAR 0 1
55560: PPUSH
55561: LD_VAR 0 2
55565: PPUSH
55566: LD_VAR 0 1
55570: PUSH
55571: LD_VAR 0 3
55575: ARRAY
55576: PPUSH
55577: CALL_OW 1
55581: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55582: LD_ADDR_VAR 0 1
55586: PUSH
55587: LD_VAR 0 1
55591: PPUSH
55592: LD_VAR 0 3
55596: PPUSH
55597: LD_VAR 0 5
55601: PPUSH
55602: CALL_OW 1
55606: ST_TO_ADDR
// result := list ;
55607: LD_ADDR_VAR 0 4
55611: PUSH
55612: LD_VAR 0 1
55616: ST_TO_ADDR
// end ;
55617: LD_VAR 0 4
55621: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55622: LD_INT 0
55624: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55625: LD_ADDR_VAR 0 5
55629: PUSH
55630: LD_VAR 0 1
55634: PPUSH
55635: CALL_OW 250
55639: PPUSH
55640: LD_VAR 0 1
55644: PPUSH
55645: CALL_OW 251
55649: PPUSH
55650: LD_VAR 0 2
55654: PPUSH
55655: LD_VAR 0 3
55659: PPUSH
55660: LD_VAR 0 4
55664: PPUSH
55665: CALL 55675 0 5
55669: ST_TO_ADDR
// end ;
55670: LD_VAR 0 5
55674: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55675: LD_INT 0
55677: PPUSH
55678: PPUSH
55679: PPUSH
55680: PPUSH
// if not list then
55681: LD_VAR 0 3
55685: NOT
55686: IFFALSE 55690
// exit ;
55688: GO 56078
// result := [ ] ;
55690: LD_ADDR_VAR 0 6
55694: PUSH
55695: EMPTY
55696: ST_TO_ADDR
// for i in list do
55697: LD_ADDR_VAR 0 7
55701: PUSH
55702: LD_VAR 0 3
55706: PUSH
55707: FOR_IN
55708: IFFALSE 55910
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55710: LD_ADDR_VAR 0 9
55714: PUSH
55715: LD_VAR 0 7
55719: PPUSH
55720: LD_VAR 0 1
55724: PPUSH
55725: LD_VAR 0 2
55729: PPUSH
55730: CALL_OW 297
55734: ST_TO_ADDR
// if not result then
55735: LD_VAR 0 6
55739: NOT
55740: IFFALSE 55766
// result := [ [ i , tmp ] ] else
55742: LD_ADDR_VAR 0 6
55746: PUSH
55747: LD_VAR 0 7
55751: PUSH
55752: LD_VAR 0 9
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: ST_TO_ADDR
55764: GO 55908
// begin if result [ result ] [ 2 ] < tmp then
55766: LD_VAR 0 6
55770: PUSH
55771: LD_VAR 0 6
55775: ARRAY
55776: PUSH
55777: LD_INT 2
55779: ARRAY
55780: PUSH
55781: LD_VAR 0 9
55785: LESS
55786: IFFALSE 55828
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55788: LD_ADDR_VAR 0 6
55792: PUSH
55793: LD_VAR 0 6
55797: PPUSH
55798: LD_VAR 0 6
55802: PUSH
55803: LD_INT 1
55805: PLUS
55806: PPUSH
55807: LD_VAR 0 7
55811: PUSH
55812: LD_VAR 0 9
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PPUSH
55821: CALL_OW 2
55825: ST_TO_ADDR
55826: GO 55908
// for j = 1 to result do
55828: LD_ADDR_VAR 0 8
55832: PUSH
55833: DOUBLE
55834: LD_INT 1
55836: DEC
55837: ST_TO_ADDR
55838: LD_VAR 0 6
55842: PUSH
55843: FOR_TO
55844: IFFALSE 55906
// begin if tmp < result [ j ] [ 2 ] then
55846: LD_VAR 0 9
55850: PUSH
55851: LD_VAR 0 6
55855: PUSH
55856: LD_VAR 0 8
55860: ARRAY
55861: PUSH
55862: LD_INT 2
55864: ARRAY
55865: LESS
55866: IFFALSE 55904
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55868: LD_ADDR_VAR 0 6
55872: PUSH
55873: LD_VAR 0 6
55877: PPUSH
55878: LD_VAR 0 8
55882: PPUSH
55883: LD_VAR 0 7
55887: PUSH
55888: LD_VAR 0 9
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PPUSH
55897: CALL_OW 2
55901: ST_TO_ADDR
// break ;
55902: GO 55906
// end ; end ;
55904: GO 55843
55906: POP
55907: POP
// end ; end ;
55908: GO 55707
55910: POP
55911: POP
// if result and not asc then
55912: LD_VAR 0 6
55916: PUSH
55917: LD_VAR 0 4
55921: NOT
55922: AND
55923: IFFALSE 55998
// begin tmp := result ;
55925: LD_ADDR_VAR 0 9
55929: PUSH
55930: LD_VAR 0 6
55934: ST_TO_ADDR
// for i = tmp downto 1 do
55935: LD_ADDR_VAR 0 7
55939: PUSH
55940: DOUBLE
55941: LD_VAR 0 9
55945: INC
55946: ST_TO_ADDR
55947: LD_INT 1
55949: PUSH
55950: FOR_DOWNTO
55951: IFFALSE 55996
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55953: LD_ADDR_VAR 0 6
55957: PUSH
55958: LD_VAR 0 6
55962: PPUSH
55963: LD_VAR 0 9
55967: PUSH
55968: LD_VAR 0 7
55972: MINUS
55973: PUSH
55974: LD_INT 1
55976: PLUS
55977: PPUSH
55978: LD_VAR 0 9
55982: PUSH
55983: LD_VAR 0 7
55987: ARRAY
55988: PPUSH
55989: CALL_OW 1
55993: ST_TO_ADDR
55994: GO 55950
55996: POP
55997: POP
// end ; tmp := [ ] ;
55998: LD_ADDR_VAR 0 9
56002: PUSH
56003: EMPTY
56004: ST_TO_ADDR
// if mode then
56005: LD_VAR 0 5
56009: IFFALSE 56078
// begin for i = 1 to result do
56011: LD_ADDR_VAR 0 7
56015: PUSH
56016: DOUBLE
56017: LD_INT 1
56019: DEC
56020: ST_TO_ADDR
56021: LD_VAR 0 6
56025: PUSH
56026: FOR_TO
56027: IFFALSE 56066
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56029: LD_ADDR_VAR 0 9
56033: PUSH
56034: LD_VAR 0 9
56038: PPUSH
56039: LD_VAR 0 7
56043: PPUSH
56044: LD_VAR 0 6
56048: PUSH
56049: LD_VAR 0 7
56053: ARRAY
56054: PUSH
56055: LD_INT 1
56057: ARRAY
56058: PPUSH
56059: CALL_OW 1
56063: ST_TO_ADDR
56064: GO 56026
56066: POP
56067: POP
// result := tmp ;
56068: LD_ADDR_VAR 0 6
56072: PUSH
56073: LD_VAR 0 9
56077: ST_TO_ADDR
// end ; end ;
56078: LD_VAR 0 6
56082: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56083: LD_INT 0
56085: PPUSH
56086: PPUSH
56087: PPUSH
56088: PPUSH
56089: PPUSH
56090: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56091: LD_ADDR_VAR 0 5
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: ST_TO_ADDR
// if not x or not y then
56113: LD_VAR 0 2
56117: NOT
56118: PUSH
56119: LD_VAR 0 3
56123: NOT
56124: OR
56125: IFFALSE 56129
// exit ;
56127: GO 57779
// if not range then
56129: LD_VAR 0 4
56133: NOT
56134: IFFALSE 56144
// range := 10 ;
56136: LD_ADDR_VAR 0 4
56140: PUSH
56141: LD_INT 10
56143: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56144: LD_ADDR_VAR 0 8
56148: PUSH
56149: LD_INT 81
56151: PUSH
56152: LD_VAR 0 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 92
56163: PUSH
56164: LD_VAR 0 2
56168: PUSH
56169: LD_VAR 0 3
56173: PUSH
56174: LD_VAR 0 4
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 21
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: PPUSH
56207: CALL_OW 69
56211: ST_TO_ADDR
// if not tmp then
56212: LD_VAR 0 8
56216: NOT
56217: IFFALSE 56221
// exit ;
56219: GO 57779
// for i in tmp do
56221: LD_ADDR_VAR 0 6
56225: PUSH
56226: LD_VAR 0 8
56230: PUSH
56231: FOR_IN
56232: IFFALSE 57754
// begin points := [ 0 , 0 , 0 ] ;
56234: LD_ADDR_VAR 0 9
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: ST_TO_ADDR
// bpoints := 1 ;
56253: LD_ADDR_VAR 0 10
56257: PUSH
56258: LD_INT 1
56260: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56261: LD_VAR 0 6
56265: PPUSH
56266: CALL_OW 247
56270: PUSH
56271: LD_INT 1
56273: DOUBLE
56274: EQUAL
56275: IFTRUE 56279
56277: GO 56857
56279: POP
// begin if GetClass ( i ) = 1 then
56280: LD_VAR 0 6
56284: PPUSH
56285: CALL_OW 257
56289: PUSH
56290: LD_INT 1
56292: EQUAL
56293: IFFALSE 56314
// points := [ 10 , 5 , 3 ] ;
56295: LD_ADDR_VAR 0 9
56299: PUSH
56300: LD_INT 10
56302: PUSH
56303: LD_INT 5
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56314: LD_VAR 0 6
56318: PPUSH
56319: CALL_OW 257
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: IN
56338: IFFALSE 56359
// points := [ 3 , 2 , 1 ] ;
56340: LD_ADDR_VAR 0 9
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56359: LD_VAR 0 6
56363: PPUSH
56364: CALL_OW 257
56368: PUSH
56369: LD_INT 5
56371: EQUAL
56372: IFFALSE 56393
// points := [ 130 , 5 , 2 ] ;
56374: LD_ADDR_VAR 0 9
56378: PUSH
56379: LD_INT 130
56381: PUSH
56382: LD_INT 5
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56393: LD_VAR 0 6
56397: PPUSH
56398: CALL_OW 257
56402: PUSH
56403: LD_INT 8
56405: EQUAL
56406: IFFALSE 56427
// points := [ 35 , 35 , 30 ] ;
56408: LD_ADDR_VAR 0 9
56412: PUSH
56413: LD_INT 35
56415: PUSH
56416: LD_INT 35
56418: PUSH
56419: LD_INT 30
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56427: LD_VAR 0 6
56431: PPUSH
56432: CALL_OW 257
56436: PUSH
56437: LD_INT 9
56439: EQUAL
56440: IFFALSE 56461
// points := [ 20 , 55 , 40 ] ;
56442: LD_ADDR_VAR 0 9
56446: PUSH
56447: LD_INT 20
56449: PUSH
56450: LD_INT 55
56452: PUSH
56453: LD_INT 40
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56461: LD_VAR 0 6
56465: PPUSH
56466: CALL_OW 257
56470: PUSH
56471: LD_INT 12
56473: PUSH
56474: LD_INT 16
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: IN
56481: IFFALSE 56502
// points := [ 5 , 3 , 2 ] ;
56483: LD_ADDR_VAR 0 9
56487: PUSH
56488: LD_INT 5
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56502: LD_VAR 0 6
56506: PPUSH
56507: CALL_OW 257
56511: PUSH
56512: LD_INT 17
56514: EQUAL
56515: IFFALSE 56536
// points := [ 100 , 50 , 75 ] ;
56517: LD_ADDR_VAR 0 9
56521: PUSH
56522: LD_INT 100
56524: PUSH
56525: LD_INT 50
56527: PUSH
56528: LD_INT 75
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56536: LD_VAR 0 6
56540: PPUSH
56541: CALL_OW 257
56545: PUSH
56546: LD_INT 15
56548: EQUAL
56549: IFFALSE 56570
// points := [ 10 , 5 , 3 ] ;
56551: LD_ADDR_VAR 0 9
56555: PUSH
56556: LD_INT 10
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56570: LD_VAR 0 6
56574: PPUSH
56575: CALL_OW 257
56579: PUSH
56580: LD_INT 14
56582: EQUAL
56583: IFFALSE 56604
// points := [ 10 , 0 , 0 ] ;
56585: LD_ADDR_VAR 0 9
56589: PUSH
56590: LD_INT 10
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: LIST
56603: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56604: LD_VAR 0 6
56608: PPUSH
56609: CALL_OW 257
56613: PUSH
56614: LD_INT 11
56616: EQUAL
56617: IFFALSE 56638
// points := [ 30 , 10 , 5 ] ;
56619: LD_ADDR_VAR 0 9
56623: PUSH
56624: LD_INT 30
56626: PUSH
56627: LD_INT 10
56629: PUSH
56630: LD_INT 5
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56638: LD_VAR 0 1
56642: PPUSH
56643: LD_INT 5
56645: PPUSH
56646: CALL_OW 321
56650: PUSH
56651: LD_INT 2
56653: EQUAL
56654: IFFALSE 56671
// bpoints := bpoints * 1.8 ;
56656: LD_ADDR_VAR 0 10
56660: PUSH
56661: LD_VAR 0 10
56665: PUSH
56666: LD_REAL  1.80000000000000E+0000
56669: MUL
56670: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56671: LD_VAR 0 6
56675: PPUSH
56676: CALL_OW 257
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: IN
56699: PUSH
56700: LD_VAR 0 1
56704: PPUSH
56705: LD_INT 51
56707: PPUSH
56708: CALL_OW 321
56712: PUSH
56713: LD_INT 2
56715: EQUAL
56716: AND
56717: IFFALSE 56734
// bpoints := bpoints * 1.2 ;
56719: LD_ADDR_VAR 0 10
56723: PUSH
56724: LD_VAR 0 10
56728: PUSH
56729: LD_REAL  1.20000000000000E+0000
56732: MUL
56733: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56734: LD_VAR 0 6
56738: PPUSH
56739: CALL_OW 257
56743: PUSH
56744: LD_INT 5
56746: PUSH
56747: LD_INT 7
56749: PUSH
56750: LD_INT 9
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: IN
56758: PUSH
56759: LD_VAR 0 1
56763: PPUSH
56764: LD_INT 52
56766: PPUSH
56767: CALL_OW 321
56771: PUSH
56772: LD_INT 2
56774: EQUAL
56775: AND
56776: IFFALSE 56793
// bpoints := bpoints * 1.5 ;
56778: LD_ADDR_VAR 0 10
56782: PUSH
56783: LD_VAR 0 10
56787: PUSH
56788: LD_REAL  1.50000000000000E+0000
56791: MUL
56792: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56793: LD_VAR 0 1
56797: PPUSH
56798: LD_INT 66
56800: PPUSH
56801: CALL_OW 321
56805: PUSH
56806: LD_INT 2
56808: EQUAL
56809: IFFALSE 56826
// bpoints := bpoints * 1.1 ;
56811: LD_ADDR_VAR 0 10
56815: PUSH
56816: LD_VAR 0 10
56820: PUSH
56821: LD_REAL  1.10000000000000E+0000
56824: MUL
56825: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56826: LD_ADDR_VAR 0 10
56830: PUSH
56831: LD_VAR 0 10
56835: PUSH
56836: LD_VAR 0 6
56840: PPUSH
56841: LD_INT 1
56843: PPUSH
56844: CALL_OW 259
56848: PUSH
56849: LD_REAL  1.15000000000000E+0000
56852: MUL
56853: MUL
56854: ST_TO_ADDR
// end ; unit_vehicle :
56855: GO 57683
56857: LD_INT 2
56859: DOUBLE
56860: EQUAL
56861: IFTRUE 56865
56863: GO 57671
56865: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56866: LD_VAR 0 6
56870: PPUSH
56871: CALL_OW 264
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 42
56881: PUSH
56882: LD_INT 24
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: IN
56890: IFFALSE 56911
// points := [ 25 , 5 , 3 ] ;
56892: LD_ADDR_VAR 0 9
56896: PUSH
56897: LD_INT 25
56899: PUSH
56900: LD_INT 5
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56911: LD_VAR 0 6
56915: PPUSH
56916: CALL_OW 264
56920: PUSH
56921: LD_INT 4
56923: PUSH
56924: LD_INT 43
56926: PUSH
56927: LD_INT 25
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: IN
56935: IFFALSE 56956
// points := [ 40 , 15 , 5 ] ;
56937: LD_ADDR_VAR 0 9
56941: PUSH
56942: LD_INT 40
56944: PUSH
56945: LD_INT 15
56947: PUSH
56948: LD_INT 5
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56956: LD_VAR 0 6
56960: PPUSH
56961: CALL_OW 264
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: LD_INT 23
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: IN
56976: IFFALSE 56997
// points := [ 7 , 25 , 8 ] ;
56978: LD_ADDR_VAR 0 9
56982: PUSH
56983: LD_INT 7
56985: PUSH
56986: LD_INT 25
56988: PUSH
56989: LD_INT 8
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56997: LD_VAR 0 6
57001: PPUSH
57002: CALL_OW 264
57006: PUSH
57007: LD_INT 5
57009: PUSH
57010: LD_INT 27
57012: PUSH
57013: LD_INT 44
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: IN
57021: IFFALSE 57042
// points := [ 14 , 50 , 16 ] ;
57023: LD_ADDR_VAR 0 9
57027: PUSH
57028: LD_INT 14
57030: PUSH
57031: LD_INT 50
57033: PUSH
57034: LD_INT 16
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57042: LD_VAR 0 6
57046: PPUSH
57047: CALL_OW 264
57051: PUSH
57052: LD_INT 6
57054: PUSH
57055: LD_INT 46
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: IN
57062: IFFALSE 57083
// points := [ 32 , 120 , 70 ] ;
57064: LD_ADDR_VAR 0 9
57068: PUSH
57069: LD_INT 32
57071: PUSH
57072: LD_INT 120
57074: PUSH
57075: LD_INT 70
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
57083: LD_VAR 0 6
57087: PPUSH
57088: CALL_OW 264
57092: PUSH
57093: LD_INT 7
57095: PUSH
57096: LD_INT 28
57098: PUSH
57099: LD_INT 45
57101: PUSH
57102: LD_INT 92
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: IN
57111: IFFALSE 57132
// points := [ 35 , 20 , 45 ] ;
57113: LD_ADDR_VAR 0 9
57117: PUSH
57118: LD_INT 35
57120: PUSH
57121: LD_INT 20
57123: PUSH
57124: LD_INT 45
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: LIST
57131: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57132: LD_VAR 0 6
57136: PPUSH
57137: CALL_OW 264
57141: PUSH
57142: LD_INT 47
57144: PUSH
57145: EMPTY
57146: LIST
57147: IN
57148: IFFALSE 57169
// points := [ 67 , 45 , 75 ] ;
57150: LD_ADDR_VAR 0 9
57154: PUSH
57155: LD_INT 67
57157: PUSH
57158: LD_INT 45
57160: PUSH
57161: LD_INT 75
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57169: LD_VAR 0 6
57173: PPUSH
57174: CALL_OW 264
57178: PUSH
57179: LD_INT 26
57181: PUSH
57182: EMPTY
57183: LIST
57184: IN
57185: IFFALSE 57206
// points := [ 120 , 30 , 80 ] ;
57187: LD_ADDR_VAR 0 9
57191: PUSH
57192: LD_INT 120
57194: PUSH
57195: LD_INT 30
57197: PUSH
57198: LD_INT 80
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57206: LD_VAR 0 6
57210: PPUSH
57211: CALL_OW 264
57215: PUSH
57216: LD_INT 22
57218: PUSH
57219: EMPTY
57220: LIST
57221: IN
57222: IFFALSE 57243
// points := [ 40 , 1 , 1 ] ;
57224: LD_ADDR_VAR 0 9
57228: PUSH
57229: LD_INT 40
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57243: LD_VAR 0 6
57247: PPUSH
57248: CALL_OW 264
57252: PUSH
57253: LD_INT 29
57255: PUSH
57256: EMPTY
57257: LIST
57258: IN
57259: IFFALSE 57280
// points := [ 70 , 200 , 400 ] ;
57261: LD_ADDR_VAR 0 9
57265: PUSH
57266: LD_INT 70
57268: PUSH
57269: LD_INT 200
57271: PUSH
57272: LD_INT 400
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57280: LD_VAR 0 6
57284: PPUSH
57285: CALL_OW 264
57289: PUSH
57290: LD_INT 14
57292: PUSH
57293: LD_INT 53
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: IN
57300: IFFALSE 57321
// points := [ 40 , 10 , 20 ] ;
57302: LD_ADDR_VAR 0 9
57306: PUSH
57307: LD_INT 40
57309: PUSH
57310: LD_INT 10
57312: PUSH
57313: LD_INT 20
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57321: LD_VAR 0 6
57325: PPUSH
57326: CALL_OW 264
57330: PUSH
57331: LD_INT 9
57333: PUSH
57334: EMPTY
57335: LIST
57336: IN
57337: IFFALSE 57358
// points := [ 5 , 70 , 20 ] ;
57339: LD_ADDR_VAR 0 9
57343: PUSH
57344: LD_INT 5
57346: PUSH
57347: LD_INT 70
57349: PUSH
57350: LD_INT 20
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57358: LD_VAR 0 6
57362: PPUSH
57363: CALL_OW 264
57367: PUSH
57368: LD_INT 10
57370: PUSH
57371: EMPTY
57372: LIST
57373: IN
57374: IFFALSE 57395
// points := [ 35 , 110 , 70 ] ;
57376: LD_ADDR_VAR 0 9
57380: PUSH
57381: LD_INT 35
57383: PUSH
57384: LD_INT 110
57386: PUSH
57387: LD_INT 70
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57395: LD_VAR 0 6
57399: PPUSH
57400: CALL_OW 265
57404: PUSH
57405: LD_INT 25
57407: EQUAL
57408: IFFALSE 57429
// points := [ 80 , 65 , 100 ] ;
57410: LD_ADDR_VAR 0 9
57414: PUSH
57415: LD_INT 80
57417: PUSH
57418: LD_INT 65
57420: PUSH
57421: LD_INT 100
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57429: LD_VAR 0 6
57433: PPUSH
57434: CALL_OW 263
57438: PUSH
57439: LD_INT 1
57441: EQUAL
57442: IFFALSE 57477
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57444: LD_ADDR_VAR 0 10
57448: PUSH
57449: LD_VAR 0 10
57453: PUSH
57454: LD_VAR 0 6
57458: PPUSH
57459: CALL_OW 311
57463: PPUSH
57464: LD_INT 3
57466: PPUSH
57467: CALL_OW 259
57471: PUSH
57472: LD_INT 4
57474: MUL
57475: MUL
57476: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57477: LD_VAR 0 6
57481: PPUSH
57482: CALL_OW 263
57486: PUSH
57487: LD_INT 2
57489: EQUAL
57490: IFFALSE 57541
// begin j := IsControledBy ( i ) ;
57492: LD_ADDR_VAR 0 7
57496: PUSH
57497: LD_VAR 0 6
57501: PPUSH
57502: CALL_OW 312
57506: ST_TO_ADDR
// if j then
57507: LD_VAR 0 7
57511: IFFALSE 57541
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57513: LD_ADDR_VAR 0 10
57517: PUSH
57518: LD_VAR 0 10
57522: PUSH
57523: LD_VAR 0 7
57527: PPUSH
57528: LD_INT 3
57530: PPUSH
57531: CALL_OW 259
57535: PUSH
57536: LD_INT 3
57538: MUL
57539: MUL
57540: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57541: LD_VAR 0 6
57545: PPUSH
57546: CALL_OW 264
57550: PUSH
57551: LD_INT 5
57553: PUSH
57554: LD_INT 6
57556: PUSH
57557: LD_INT 46
57559: PUSH
57560: LD_INT 44
57562: PUSH
57563: LD_INT 47
57565: PUSH
57566: LD_INT 45
57568: PUSH
57569: LD_INT 28
57571: PUSH
57572: LD_INT 7
57574: PUSH
57575: LD_INT 27
57577: PUSH
57578: LD_INT 29
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: IN
57593: PUSH
57594: LD_VAR 0 1
57598: PPUSH
57599: LD_INT 52
57601: PPUSH
57602: CALL_OW 321
57606: PUSH
57607: LD_INT 2
57609: EQUAL
57610: AND
57611: IFFALSE 57628
// bpoints := bpoints * 1.2 ;
57613: LD_ADDR_VAR 0 10
57617: PUSH
57618: LD_VAR 0 10
57622: PUSH
57623: LD_REAL  1.20000000000000E+0000
57626: MUL
57627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57628: LD_VAR 0 6
57632: PPUSH
57633: CALL_OW 264
57637: PUSH
57638: LD_INT 6
57640: PUSH
57641: LD_INT 46
57643: PUSH
57644: LD_INT 47
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: IN
57652: IFFALSE 57669
// bpoints := bpoints * 1.2 ;
57654: LD_ADDR_VAR 0 10
57658: PUSH
57659: LD_VAR 0 10
57663: PUSH
57664: LD_REAL  1.20000000000000E+0000
57667: MUL
57668: ST_TO_ADDR
// end ; unit_building :
57669: GO 57683
57671: LD_INT 3
57673: DOUBLE
57674: EQUAL
57675: IFTRUE 57679
57677: GO 57682
57679: POP
// ; end ;
57680: GO 57683
57682: POP
// for j = 1 to 3 do
57683: LD_ADDR_VAR 0 7
57687: PUSH
57688: DOUBLE
57689: LD_INT 1
57691: DEC
57692: ST_TO_ADDR
57693: LD_INT 3
57695: PUSH
57696: FOR_TO
57697: IFFALSE 57750
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57699: LD_ADDR_VAR 0 5
57703: PUSH
57704: LD_VAR 0 5
57708: PPUSH
57709: LD_VAR 0 7
57713: PPUSH
57714: LD_VAR 0 5
57718: PUSH
57719: LD_VAR 0 7
57723: ARRAY
57724: PUSH
57725: LD_VAR 0 9
57729: PUSH
57730: LD_VAR 0 7
57734: ARRAY
57735: PUSH
57736: LD_VAR 0 10
57740: MUL
57741: PLUS
57742: PPUSH
57743: CALL_OW 1
57747: ST_TO_ADDR
57748: GO 57696
57750: POP
57751: POP
// end ;
57752: GO 56231
57754: POP
57755: POP
// result := Replace ( result , 4 , tmp ) ;
57756: LD_ADDR_VAR 0 5
57760: PUSH
57761: LD_VAR 0 5
57765: PPUSH
57766: LD_INT 4
57768: PPUSH
57769: LD_VAR 0 8
57773: PPUSH
57774: CALL_OW 1
57778: ST_TO_ADDR
// end ;
57779: LD_VAR 0 5
57783: RET
// export function DangerAtRange ( unit , range ) ; begin
57784: LD_INT 0
57786: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57787: LD_ADDR_VAR 0 3
57791: PUSH
57792: LD_VAR 0 1
57796: PPUSH
57797: CALL_OW 255
57801: PPUSH
57802: LD_VAR 0 1
57806: PPUSH
57807: CALL_OW 250
57811: PPUSH
57812: LD_VAR 0 1
57816: PPUSH
57817: CALL_OW 251
57821: PPUSH
57822: LD_VAR 0 2
57826: PPUSH
57827: CALL 56083 0 4
57831: ST_TO_ADDR
// end ;
57832: LD_VAR 0 3
57836: RET
// export function DangerInArea ( side , area ) ; begin
57837: LD_INT 0
57839: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57840: LD_ADDR_VAR 0 3
57844: PUSH
57845: LD_VAR 0 2
57849: PPUSH
57850: LD_INT 81
57852: PUSH
57853: LD_VAR 0 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PPUSH
57862: CALL_OW 70
57866: ST_TO_ADDR
// end ;
57867: LD_VAR 0 3
57871: RET
// export function IsExtension ( b ) ; begin
57872: LD_INT 0
57874: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57875: LD_ADDR_VAR 0 2
57879: PUSH
57880: LD_VAR 0 1
57884: PUSH
57885: LD_INT 23
57887: PUSH
57888: LD_INT 20
57890: PUSH
57891: LD_INT 22
57893: PUSH
57894: LD_INT 17
57896: PUSH
57897: LD_INT 24
57899: PUSH
57900: LD_INT 21
57902: PUSH
57903: LD_INT 19
57905: PUSH
57906: LD_INT 16
57908: PUSH
57909: LD_INT 25
57911: PUSH
57912: LD_INT 18
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: IN
57927: ST_TO_ADDR
// end ;
57928: LD_VAR 0 2
57932: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
57933: LD_INT 0
57935: PPUSH
57936: PPUSH
57937: PPUSH
// result := [ ] ;
57938: LD_ADDR_VAR 0 4
57942: PUSH
57943: EMPTY
57944: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57945: LD_ADDR_VAR 0 5
57949: PUSH
57950: LD_VAR 0 2
57954: PPUSH
57955: LD_INT 21
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PPUSH
57965: CALL_OW 70
57969: ST_TO_ADDR
// if not tmp then
57970: LD_VAR 0 5
57974: NOT
57975: IFFALSE 57979
// exit ;
57977: GO 58043
// if checkLink then
57979: LD_VAR 0 3
57983: IFFALSE 58033
// begin for i in tmp do
57985: LD_ADDR_VAR 0 6
57989: PUSH
57990: LD_VAR 0 5
57994: PUSH
57995: FOR_IN
57996: IFFALSE 58031
// if GetBase ( i ) <> base then
57998: LD_VAR 0 6
58002: PPUSH
58003: CALL_OW 274
58007: PUSH
58008: LD_VAR 0 1
58012: NONEQUAL
58013: IFFALSE 58029
// ComLinkToBase ( base , i ) ;
58015: LD_VAR 0 1
58019: PPUSH
58020: LD_VAR 0 6
58024: PPUSH
58025: CALL_OW 169
58029: GO 57995
58031: POP
58032: POP
// end ; result := tmp ;
58033: LD_ADDR_VAR 0 4
58037: PUSH
58038: LD_VAR 0 5
58042: ST_TO_ADDR
// end ;
58043: LD_VAR 0 4
58047: RET
// export function ComComplete ( units , b ) ; var i ; begin
58048: LD_INT 0
58050: PPUSH
58051: PPUSH
// if not units then
58052: LD_VAR 0 1
58056: NOT
58057: IFFALSE 58061
// exit ;
58059: GO 58151
// for i in units do
58061: LD_ADDR_VAR 0 4
58065: PUSH
58066: LD_VAR 0 1
58070: PUSH
58071: FOR_IN
58072: IFFALSE 58149
// if BuildingStatus ( b ) = bs_build then
58074: LD_VAR 0 2
58078: PPUSH
58079: CALL_OW 461
58083: PUSH
58084: LD_INT 1
58086: EQUAL
58087: IFFALSE 58147
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58089: LD_VAR 0 4
58093: PPUSH
58094: LD_STRING h
58096: PUSH
58097: LD_VAR 0 2
58101: PPUSH
58102: CALL_OW 250
58106: PUSH
58107: LD_VAR 0 2
58111: PPUSH
58112: CALL_OW 251
58116: PUSH
58117: LD_VAR 0 2
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: PPUSH
58143: CALL_OW 446
58147: GO 58071
58149: POP
58150: POP
// end ;
58151: LD_VAR 0 3
58155: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58156: LD_INT 0
58158: PPUSH
58159: PPUSH
58160: PPUSH
58161: PPUSH
58162: PPUSH
58163: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58164: LD_VAR 0 1
58168: NOT
58169: PUSH
58170: LD_VAR 0 1
58174: PPUSH
58175: CALL_OW 263
58179: PUSH
58180: LD_INT 2
58182: NONEQUAL
58183: OR
58184: IFFALSE 58188
// exit ;
58186: GO 58504
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58188: LD_ADDR_VAR 0 6
58192: PUSH
58193: LD_INT 22
58195: PUSH
58196: LD_VAR 0 1
58200: PPUSH
58201: CALL_OW 255
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 30
58215: PUSH
58216: LD_INT 36
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 34
58225: PUSH
58226: LD_INT 31
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PPUSH
58242: CALL_OW 69
58246: ST_TO_ADDR
// if not tmp then
58247: LD_VAR 0 6
58251: NOT
58252: IFFALSE 58256
// exit ;
58254: GO 58504
// result := [ ] ;
58256: LD_ADDR_VAR 0 2
58260: PUSH
58261: EMPTY
58262: ST_TO_ADDR
// for i in tmp do
58263: LD_ADDR_VAR 0 3
58267: PUSH
58268: LD_VAR 0 6
58272: PUSH
58273: FOR_IN
58274: IFFALSE 58345
// begin t := UnitsInside ( i ) ;
58276: LD_ADDR_VAR 0 4
58280: PUSH
58281: LD_VAR 0 3
58285: PPUSH
58286: CALL_OW 313
58290: ST_TO_ADDR
// if t then
58291: LD_VAR 0 4
58295: IFFALSE 58343
// for j in t do
58297: LD_ADDR_VAR 0 7
58301: PUSH
58302: LD_VAR 0 4
58306: PUSH
58307: FOR_IN
58308: IFFALSE 58341
// result := Replace ( result , result + 1 , j ) ;
58310: LD_ADDR_VAR 0 2
58314: PUSH
58315: LD_VAR 0 2
58319: PPUSH
58320: LD_VAR 0 2
58324: PUSH
58325: LD_INT 1
58327: PLUS
58328: PPUSH
58329: LD_VAR 0 7
58333: PPUSH
58334: CALL_OW 1
58338: ST_TO_ADDR
58339: GO 58307
58341: POP
58342: POP
// end ;
58343: GO 58273
58345: POP
58346: POP
// if not result then
58347: LD_VAR 0 2
58351: NOT
58352: IFFALSE 58356
// exit ;
58354: GO 58504
// mech := result [ 1 ] ;
58356: LD_ADDR_VAR 0 5
58360: PUSH
58361: LD_VAR 0 2
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: ST_TO_ADDR
// if result > 1 then
58370: LD_VAR 0 2
58374: PUSH
58375: LD_INT 1
58377: GREATER
58378: IFFALSE 58490
// begin for i = 2 to result do
58380: LD_ADDR_VAR 0 3
58384: PUSH
58385: DOUBLE
58386: LD_INT 2
58388: DEC
58389: ST_TO_ADDR
58390: LD_VAR 0 2
58394: PUSH
58395: FOR_TO
58396: IFFALSE 58488
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58398: LD_ADDR_VAR 0 4
58402: PUSH
58403: LD_VAR 0 2
58407: PUSH
58408: LD_VAR 0 3
58412: ARRAY
58413: PPUSH
58414: LD_INT 3
58416: PPUSH
58417: CALL_OW 259
58421: PUSH
58422: LD_VAR 0 2
58426: PUSH
58427: LD_VAR 0 3
58431: ARRAY
58432: PPUSH
58433: CALL_OW 432
58437: MINUS
58438: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58439: LD_VAR 0 4
58443: PUSH
58444: LD_VAR 0 5
58448: PPUSH
58449: LD_INT 3
58451: PPUSH
58452: CALL_OW 259
58456: PUSH
58457: LD_VAR 0 5
58461: PPUSH
58462: CALL_OW 432
58466: MINUS
58467: GREATEREQUAL
58468: IFFALSE 58486
// mech := result [ i ] ;
58470: LD_ADDR_VAR 0 5
58474: PUSH
58475: LD_VAR 0 2
58479: PUSH
58480: LD_VAR 0 3
58484: ARRAY
58485: ST_TO_ADDR
// end ;
58486: GO 58395
58488: POP
58489: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58490: LD_VAR 0 1
58494: PPUSH
58495: LD_VAR 0 5
58499: PPUSH
58500: CALL_OW 135
// end ;
58504: LD_VAR 0 2
58508: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58509: LD_INT 0
58511: PPUSH
58512: PPUSH
58513: PPUSH
58514: PPUSH
58515: PPUSH
58516: PPUSH
58517: PPUSH
58518: PPUSH
58519: PPUSH
58520: PPUSH
58521: PPUSH
58522: PPUSH
58523: PPUSH
// result := [ ] ;
58524: LD_ADDR_VAR 0 7
58528: PUSH
58529: EMPTY
58530: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58531: LD_VAR 0 1
58535: PPUSH
58536: CALL_OW 266
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: IN
58551: NOT
58552: IFFALSE 58556
// exit ;
58554: GO 60190
// if name then
58556: LD_VAR 0 3
58560: IFFALSE 58576
// SetBName ( base_dep , name ) ;
58562: LD_VAR 0 1
58566: PPUSH
58567: LD_VAR 0 3
58571: PPUSH
58572: CALL_OW 500
// base := GetBase ( base_dep ) ;
58576: LD_ADDR_VAR 0 15
58580: PUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: CALL_OW 274
58590: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58591: LD_ADDR_VAR 0 16
58595: PUSH
58596: LD_VAR 0 1
58600: PPUSH
58601: CALL_OW 255
58605: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58606: LD_ADDR_VAR 0 17
58610: PUSH
58611: LD_VAR 0 1
58615: PPUSH
58616: CALL_OW 248
58620: ST_TO_ADDR
// if sources then
58621: LD_VAR 0 5
58625: IFFALSE 58672
// for i = 1 to 3 do
58627: LD_ADDR_VAR 0 8
58631: PUSH
58632: DOUBLE
58633: LD_INT 1
58635: DEC
58636: ST_TO_ADDR
58637: LD_INT 3
58639: PUSH
58640: FOR_TO
58641: IFFALSE 58670
// AddResourceType ( base , i , sources [ i ] ) ;
58643: LD_VAR 0 15
58647: PPUSH
58648: LD_VAR 0 8
58652: PPUSH
58653: LD_VAR 0 5
58657: PUSH
58658: LD_VAR 0 8
58662: ARRAY
58663: PPUSH
58664: CALL_OW 276
58668: GO 58640
58670: POP
58671: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58672: LD_ADDR_VAR 0 18
58676: PUSH
58677: LD_VAR 0 15
58681: PPUSH
58682: LD_VAR 0 2
58686: PPUSH
58687: LD_INT 1
58689: PPUSH
58690: CALL 57933 0 3
58694: ST_TO_ADDR
// InitHc ;
58695: CALL_OW 19
// InitUc ;
58699: CALL_OW 18
// uc_side := side ;
58703: LD_ADDR_OWVAR 20
58707: PUSH
58708: LD_VAR 0 16
58712: ST_TO_ADDR
// uc_nation := nation ;
58713: LD_ADDR_OWVAR 21
58717: PUSH
58718: LD_VAR 0 17
58722: ST_TO_ADDR
// if buildings then
58723: LD_VAR 0 18
58727: IFFALSE 60049
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58729: LD_ADDR_VAR 0 19
58733: PUSH
58734: LD_VAR 0 18
58738: PPUSH
58739: LD_INT 2
58741: PUSH
58742: LD_INT 30
58744: PUSH
58745: LD_INT 29
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 30
58754: PUSH
58755: LD_INT 30
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: PPUSH
58767: CALL_OW 72
58771: ST_TO_ADDR
// if tmp then
58772: LD_VAR 0 19
58776: IFFALSE 58824
// for i in tmp do
58778: LD_ADDR_VAR 0 8
58782: PUSH
58783: LD_VAR 0 19
58787: PUSH
58788: FOR_IN
58789: IFFALSE 58822
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58791: LD_VAR 0 8
58795: PPUSH
58796: CALL_OW 250
58800: PPUSH
58801: LD_VAR 0 8
58805: PPUSH
58806: CALL_OW 251
58810: PPUSH
58811: LD_VAR 0 16
58815: PPUSH
58816: CALL_OW 441
58820: GO 58788
58822: POP
58823: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58824: LD_VAR 0 18
58828: PPUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 30
58834: PUSH
58835: LD_INT 32
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 30
58844: PUSH
58845: LD_INT 33
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: PPUSH
58857: CALL_OW 72
58861: IFFALSE 58949
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58863: LD_ADDR_VAR 0 8
58867: PUSH
58868: LD_VAR 0 18
58872: PPUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 30
58878: PUSH
58879: LD_INT 32
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 30
58888: PUSH
58889: LD_INT 33
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: LIST
58900: PPUSH
58901: CALL_OW 72
58905: PUSH
58906: FOR_IN
58907: IFFALSE 58947
// begin if not GetBWeapon ( i ) then
58909: LD_VAR 0 8
58913: PPUSH
58914: CALL_OW 269
58918: NOT
58919: IFFALSE 58945
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58921: LD_VAR 0 8
58925: PPUSH
58926: LD_VAR 0 8
58930: PPUSH
58931: LD_VAR 0 2
58935: PPUSH
58936: CALL 60195 0 2
58940: PPUSH
58941: CALL_OW 431
// end ;
58945: GO 58906
58947: POP
58948: POP
// end ; for i = 1 to personel do
58949: LD_ADDR_VAR 0 8
58953: PUSH
58954: DOUBLE
58955: LD_INT 1
58957: DEC
58958: ST_TO_ADDR
58959: LD_VAR 0 6
58963: PUSH
58964: FOR_TO
58965: IFFALSE 60029
// begin if i > 4 then
58967: LD_VAR 0 8
58971: PUSH
58972: LD_INT 4
58974: GREATER
58975: IFFALSE 58979
// break ;
58977: GO 60029
// case i of 1 :
58979: LD_VAR 0 8
58983: PUSH
58984: LD_INT 1
58986: DOUBLE
58987: EQUAL
58988: IFTRUE 58992
58990: GO 59072
58992: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58993: LD_ADDR_VAR 0 12
58997: PUSH
58998: LD_VAR 0 18
59002: PPUSH
59003: LD_INT 22
59005: PUSH
59006: LD_VAR 0 16
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 58
59017: PUSH
59018: EMPTY
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 30
59026: PUSH
59027: LD_INT 32
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 30
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 30
59046: PUSH
59047: LD_INT 5
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: LIST
59064: PPUSH
59065: CALL_OW 72
59069: ST_TO_ADDR
59070: GO 59294
59072: LD_INT 2
59074: DOUBLE
59075: EQUAL
59076: IFTRUE 59080
59078: GO 59142
59080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59081: LD_ADDR_VAR 0 12
59085: PUSH
59086: LD_VAR 0 18
59090: PPUSH
59091: LD_INT 22
59093: PUSH
59094: LD_VAR 0 16
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 30
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 30
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PPUSH
59135: CALL_OW 72
59139: ST_TO_ADDR
59140: GO 59294
59142: LD_INT 3
59144: DOUBLE
59145: EQUAL
59146: IFTRUE 59150
59148: GO 59212
59150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59151: LD_ADDR_VAR 0 12
59155: PUSH
59156: LD_VAR 0 18
59160: PPUSH
59161: LD_INT 22
59163: PUSH
59164: LD_VAR 0 16
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: LD_INT 30
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 30
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: LIST
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PPUSH
59205: CALL_OW 72
59209: ST_TO_ADDR
59210: GO 59294
59212: LD_INT 4
59214: DOUBLE
59215: EQUAL
59216: IFTRUE 59220
59218: GO 59293
59220: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59221: LD_ADDR_VAR 0 12
59225: PUSH
59226: LD_VAR 0 18
59230: PPUSH
59231: LD_INT 22
59233: PUSH
59234: LD_VAR 0 16
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: LD_INT 30
59248: PUSH
59249: LD_INT 6
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 30
59258: PUSH
59259: LD_INT 7
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 30
59268: PUSH
59269: LD_INT 8
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PPUSH
59286: CALL_OW 72
59290: ST_TO_ADDR
59291: GO 59294
59293: POP
// if i = 1 then
59294: LD_VAR 0 8
59298: PUSH
59299: LD_INT 1
59301: EQUAL
59302: IFFALSE 59413
// begin tmp := [ ] ;
59304: LD_ADDR_VAR 0 19
59308: PUSH
59309: EMPTY
59310: ST_TO_ADDR
// for j in f do
59311: LD_ADDR_VAR 0 9
59315: PUSH
59316: LD_VAR 0 12
59320: PUSH
59321: FOR_IN
59322: IFFALSE 59395
// if GetBType ( j ) = b_bunker then
59324: LD_VAR 0 9
59328: PPUSH
59329: CALL_OW 266
59333: PUSH
59334: LD_INT 32
59336: EQUAL
59337: IFFALSE 59364
// tmp := Insert ( tmp , 1 , j ) else
59339: LD_ADDR_VAR 0 19
59343: PUSH
59344: LD_VAR 0 19
59348: PPUSH
59349: LD_INT 1
59351: PPUSH
59352: LD_VAR 0 9
59356: PPUSH
59357: CALL_OW 2
59361: ST_TO_ADDR
59362: GO 59393
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59364: LD_ADDR_VAR 0 19
59368: PUSH
59369: LD_VAR 0 19
59373: PPUSH
59374: LD_VAR 0 19
59378: PUSH
59379: LD_INT 1
59381: PLUS
59382: PPUSH
59383: LD_VAR 0 9
59387: PPUSH
59388: CALL_OW 2
59392: ST_TO_ADDR
59393: GO 59321
59395: POP
59396: POP
// if tmp then
59397: LD_VAR 0 19
59401: IFFALSE 59413
// f := tmp ;
59403: LD_ADDR_VAR 0 12
59407: PUSH
59408: LD_VAR 0 19
59412: ST_TO_ADDR
// end ; x := personel [ i ] ;
59413: LD_ADDR_VAR 0 13
59417: PUSH
59418: LD_VAR 0 6
59422: PUSH
59423: LD_VAR 0 8
59427: ARRAY
59428: ST_TO_ADDR
// if x = - 1 then
59429: LD_VAR 0 13
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: EQUAL
59438: IFFALSE 59647
// begin for j in f do
59440: LD_ADDR_VAR 0 9
59444: PUSH
59445: LD_VAR 0 12
59449: PUSH
59450: FOR_IN
59451: IFFALSE 59643
// repeat InitHc ;
59453: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59457: LD_VAR 0 9
59461: PPUSH
59462: CALL_OW 266
59466: PUSH
59467: LD_INT 5
59469: EQUAL
59470: IFFALSE 59540
// begin if UnitsInside ( j ) < 3 then
59472: LD_VAR 0 9
59476: PPUSH
59477: CALL_OW 313
59481: PUSH
59482: LD_INT 3
59484: LESS
59485: IFFALSE 59521
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59487: LD_INT 0
59489: PPUSH
59490: LD_INT 5
59492: PUSH
59493: LD_INT 8
59495: PUSH
59496: LD_INT 9
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: PUSH
59504: LD_VAR 0 17
59508: ARRAY
59509: PPUSH
59510: LD_VAR 0 4
59514: PPUSH
59515: CALL_OW 380
59519: GO 59538
// PrepareHuman ( false , i , skill ) ;
59521: LD_INT 0
59523: PPUSH
59524: LD_VAR 0 8
59528: PPUSH
59529: LD_VAR 0 4
59533: PPUSH
59534: CALL_OW 380
// end else
59538: GO 59557
// PrepareHuman ( false , i , skill ) ;
59540: LD_INT 0
59542: PPUSH
59543: LD_VAR 0 8
59547: PPUSH
59548: LD_VAR 0 4
59552: PPUSH
59553: CALL_OW 380
// un := CreateHuman ;
59557: LD_ADDR_VAR 0 14
59561: PUSH
59562: CALL_OW 44
59566: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59567: LD_ADDR_VAR 0 7
59571: PUSH
59572: LD_VAR 0 7
59576: PPUSH
59577: LD_INT 1
59579: PPUSH
59580: LD_VAR 0 14
59584: PPUSH
59585: CALL_OW 2
59589: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59590: LD_VAR 0 14
59594: PPUSH
59595: LD_VAR 0 9
59599: PPUSH
59600: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59604: LD_VAR 0 9
59608: PPUSH
59609: CALL_OW 313
59613: PUSH
59614: LD_INT 6
59616: EQUAL
59617: PUSH
59618: LD_VAR 0 9
59622: PPUSH
59623: CALL_OW 266
59627: PUSH
59628: LD_INT 32
59630: PUSH
59631: LD_INT 31
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: IN
59638: OR
59639: IFFALSE 59453
59641: GO 59450
59643: POP
59644: POP
// end else
59645: GO 60027
// for j = 1 to x do
59647: LD_ADDR_VAR 0 9
59651: PUSH
59652: DOUBLE
59653: LD_INT 1
59655: DEC
59656: ST_TO_ADDR
59657: LD_VAR 0 13
59661: PUSH
59662: FOR_TO
59663: IFFALSE 60025
// begin InitHc ;
59665: CALL_OW 19
// if not f then
59669: LD_VAR 0 12
59673: NOT
59674: IFFALSE 59763
// begin PrepareHuman ( false , i , skill ) ;
59676: LD_INT 0
59678: PPUSH
59679: LD_VAR 0 8
59683: PPUSH
59684: LD_VAR 0 4
59688: PPUSH
59689: CALL_OW 380
// un := CreateHuman ;
59693: LD_ADDR_VAR 0 14
59697: PUSH
59698: CALL_OW 44
59702: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59703: LD_ADDR_VAR 0 7
59707: PUSH
59708: LD_VAR 0 7
59712: PPUSH
59713: LD_INT 1
59715: PPUSH
59716: LD_VAR 0 14
59720: PPUSH
59721: CALL_OW 2
59725: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59726: LD_VAR 0 14
59730: PPUSH
59731: LD_VAR 0 1
59735: PPUSH
59736: CALL_OW 250
59740: PPUSH
59741: LD_VAR 0 1
59745: PPUSH
59746: CALL_OW 251
59750: PPUSH
59751: LD_INT 10
59753: PPUSH
59754: LD_INT 0
59756: PPUSH
59757: CALL_OW 50
// continue ;
59761: GO 59662
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59763: LD_VAR 0 12
59767: PUSH
59768: LD_INT 1
59770: ARRAY
59771: PPUSH
59772: CALL_OW 313
59776: PUSH
59777: LD_VAR 0 12
59781: PUSH
59782: LD_INT 1
59784: ARRAY
59785: PPUSH
59786: CALL_OW 266
59790: PUSH
59791: LD_INT 32
59793: PUSH
59794: LD_INT 31
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: IN
59801: AND
59802: PUSH
59803: LD_VAR 0 12
59807: PUSH
59808: LD_INT 1
59810: ARRAY
59811: PPUSH
59812: CALL_OW 313
59816: PUSH
59817: LD_INT 6
59819: EQUAL
59820: OR
59821: IFFALSE 59841
// f := Delete ( f , 1 ) ;
59823: LD_ADDR_VAR 0 12
59827: PUSH
59828: LD_VAR 0 12
59832: PPUSH
59833: LD_INT 1
59835: PPUSH
59836: CALL_OW 3
59840: ST_TO_ADDR
// if not f then
59841: LD_VAR 0 12
59845: NOT
59846: IFFALSE 59864
// begin x := x + 2 ;
59848: LD_ADDR_VAR 0 13
59852: PUSH
59853: LD_VAR 0 13
59857: PUSH
59858: LD_INT 2
59860: PLUS
59861: ST_TO_ADDR
// continue ;
59862: GO 59662
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59864: LD_VAR 0 12
59868: PUSH
59869: LD_INT 1
59871: ARRAY
59872: PPUSH
59873: CALL_OW 266
59877: PUSH
59878: LD_INT 5
59880: EQUAL
59881: IFFALSE 59955
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59883: LD_VAR 0 12
59887: PUSH
59888: LD_INT 1
59890: ARRAY
59891: PPUSH
59892: CALL_OW 313
59896: PUSH
59897: LD_INT 3
59899: LESS
59900: IFFALSE 59936
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59902: LD_INT 0
59904: PPUSH
59905: LD_INT 5
59907: PUSH
59908: LD_INT 8
59910: PUSH
59911: LD_INT 9
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: LIST
59918: PUSH
59919: LD_VAR 0 17
59923: ARRAY
59924: PPUSH
59925: LD_VAR 0 4
59929: PPUSH
59930: CALL_OW 380
59934: GO 59953
// PrepareHuman ( false , i , skill ) ;
59936: LD_INT 0
59938: PPUSH
59939: LD_VAR 0 8
59943: PPUSH
59944: LD_VAR 0 4
59948: PPUSH
59949: CALL_OW 380
// end else
59953: GO 59972
// PrepareHuman ( false , i , skill ) ;
59955: LD_INT 0
59957: PPUSH
59958: LD_VAR 0 8
59962: PPUSH
59963: LD_VAR 0 4
59967: PPUSH
59968: CALL_OW 380
// un := CreateHuman ;
59972: LD_ADDR_VAR 0 14
59976: PUSH
59977: CALL_OW 44
59981: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59982: LD_ADDR_VAR 0 7
59986: PUSH
59987: LD_VAR 0 7
59991: PPUSH
59992: LD_INT 1
59994: PPUSH
59995: LD_VAR 0 14
59999: PPUSH
60000: CALL_OW 2
60004: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60005: LD_VAR 0 14
60009: PPUSH
60010: LD_VAR 0 12
60014: PUSH
60015: LD_INT 1
60017: ARRAY
60018: PPUSH
60019: CALL_OW 52
// end ;
60023: GO 59662
60025: POP
60026: POP
// end ;
60027: GO 58964
60029: POP
60030: POP
// result := result ^ buildings ;
60031: LD_ADDR_VAR 0 7
60035: PUSH
60036: LD_VAR 0 7
60040: PUSH
60041: LD_VAR 0 18
60045: ADD
60046: ST_TO_ADDR
// end else
60047: GO 60190
// begin for i = 1 to personel do
60049: LD_ADDR_VAR 0 8
60053: PUSH
60054: DOUBLE
60055: LD_INT 1
60057: DEC
60058: ST_TO_ADDR
60059: LD_VAR 0 6
60063: PUSH
60064: FOR_TO
60065: IFFALSE 60188
// begin if i > 4 then
60067: LD_VAR 0 8
60071: PUSH
60072: LD_INT 4
60074: GREATER
60075: IFFALSE 60079
// break ;
60077: GO 60188
// x := personel [ i ] ;
60079: LD_ADDR_VAR 0 13
60083: PUSH
60084: LD_VAR 0 6
60088: PUSH
60089: LD_VAR 0 8
60093: ARRAY
60094: ST_TO_ADDR
// if x = - 1 then
60095: LD_VAR 0 13
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: EQUAL
60104: IFFALSE 60108
// continue ;
60106: GO 60064
// PrepareHuman ( false , i , skill ) ;
60108: LD_INT 0
60110: PPUSH
60111: LD_VAR 0 8
60115: PPUSH
60116: LD_VAR 0 4
60120: PPUSH
60121: CALL_OW 380
// un := CreateHuman ;
60125: LD_ADDR_VAR 0 14
60129: PUSH
60130: CALL_OW 44
60134: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60135: LD_VAR 0 14
60139: PPUSH
60140: LD_VAR 0 1
60144: PPUSH
60145: CALL_OW 250
60149: PPUSH
60150: LD_VAR 0 1
60154: PPUSH
60155: CALL_OW 251
60159: PPUSH
60160: LD_INT 10
60162: PPUSH
60163: LD_INT 0
60165: PPUSH
60166: CALL_OW 50
// result := result ^ un ;
60170: LD_ADDR_VAR 0 7
60174: PUSH
60175: LD_VAR 0 7
60179: PUSH
60180: LD_VAR 0 14
60184: ADD
60185: ST_TO_ADDR
// end ;
60186: GO 60064
60188: POP
60189: POP
// end ; end ;
60190: LD_VAR 0 7
60194: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
60205: PPUSH
60206: PPUSH
60207: PPUSH
60208: PPUSH
60209: PPUSH
60210: PPUSH
60211: PPUSH
60212: PPUSH
// result := false ;
60213: LD_ADDR_VAR 0 3
60217: PUSH
60218: LD_INT 0
60220: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60221: LD_VAR 0 1
60225: NOT
60226: PUSH
60227: LD_VAR 0 1
60231: PPUSH
60232: CALL_OW 266
60236: PUSH
60237: LD_INT 32
60239: PUSH
60240: LD_INT 33
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: IN
60247: NOT
60248: OR
60249: IFFALSE 60253
// exit ;
60251: GO 61362
// nat := GetNation ( tower ) ;
60253: LD_ADDR_VAR 0 12
60257: PUSH
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL_OW 248
60267: ST_TO_ADDR
// side := GetSide ( tower ) ;
60268: LD_ADDR_VAR 0 16
60272: PUSH
60273: LD_VAR 0 1
60277: PPUSH
60278: CALL_OW 255
60282: ST_TO_ADDR
// x := GetX ( tower ) ;
60283: LD_ADDR_VAR 0 10
60287: PUSH
60288: LD_VAR 0 1
60292: PPUSH
60293: CALL_OW 250
60297: ST_TO_ADDR
// y := GetY ( tower ) ;
60298: LD_ADDR_VAR 0 11
60302: PUSH
60303: LD_VAR 0 1
60307: PPUSH
60308: CALL_OW 251
60312: ST_TO_ADDR
// if not x or not y then
60313: LD_VAR 0 10
60317: NOT
60318: PUSH
60319: LD_VAR 0 11
60323: NOT
60324: OR
60325: IFFALSE 60329
// exit ;
60327: GO 61362
// weapon := 0 ;
60329: LD_ADDR_VAR 0 18
60333: PUSH
60334: LD_INT 0
60336: ST_TO_ADDR
// fac_list := [ ] ;
60337: LD_ADDR_VAR 0 17
60341: PUSH
60342: EMPTY
60343: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60344: LD_ADDR_VAR 0 6
60348: PUSH
60349: LD_VAR 0 1
60353: PPUSH
60354: CALL_OW 274
60358: PPUSH
60359: LD_VAR 0 2
60363: PPUSH
60364: LD_INT 0
60366: PPUSH
60367: CALL 57933 0 3
60371: PPUSH
60372: LD_INT 30
60374: PUSH
60375: LD_INT 3
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PPUSH
60382: CALL_OW 72
60386: ST_TO_ADDR
// if not factories then
60387: LD_VAR 0 6
60391: NOT
60392: IFFALSE 60396
// exit ;
60394: GO 61362
// for i in factories do
60396: LD_ADDR_VAR 0 8
60400: PUSH
60401: LD_VAR 0 6
60405: PUSH
60406: FOR_IN
60407: IFFALSE 60432
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60409: LD_ADDR_VAR 0 17
60413: PUSH
60414: LD_VAR 0 17
60418: PUSH
60419: LD_VAR 0 8
60423: PPUSH
60424: CALL_OW 478
60428: UNION
60429: ST_TO_ADDR
60430: GO 60406
60432: POP
60433: POP
// if not fac_list then
60434: LD_VAR 0 17
60438: NOT
60439: IFFALSE 60443
// exit ;
60441: GO 61362
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60443: LD_ADDR_VAR 0 5
60447: PUSH
60448: LD_INT 4
60450: PUSH
60451: LD_INT 5
60453: PUSH
60454: LD_INT 9
60456: PUSH
60457: LD_INT 10
60459: PUSH
60460: LD_INT 6
60462: PUSH
60463: LD_INT 7
60465: PUSH
60466: LD_INT 11
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 27
60480: PUSH
60481: LD_INT 28
60483: PUSH
60484: LD_INT 26
60486: PUSH
60487: LD_INT 30
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 43
60498: PUSH
60499: LD_INT 44
60501: PUSH
60502: LD_INT 46
60504: PUSH
60505: LD_INT 45
60507: PUSH
60508: LD_INT 47
60510: PUSH
60511: LD_INT 49
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: PUSH
60527: LD_VAR 0 12
60531: ARRAY
60532: ST_TO_ADDR
// list := list isect fac_list ;
60533: LD_ADDR_VAR 0 5
60537: PUSH
60538: LD_VAR 0 5
60542: PUSH
60543: LD_VAR 0 17
60547: ISECT
60548: ST_TO_ADDR
// if not list then
60549: LD_VAR 0 5
60553: NOT
60554: IFFALSE 60558
// exit ;
60556: GO 61362
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60558: LD_VAR 0 12
60562: PUSH
60563: LD_INT 3
60565: EQUAL
60566: PUSH
60567: LD_INT 49
60569: PUSH
60570: LD_VAR 0 5
60574: IN
60575: AND
60576: PUSH
60577: LD_INT 31
60579: PPUSH
60580: LD_VAR 0 16
60584: PPUSH
60585: CALL_OW 321
60589: PUSH
60590: LD_INT 2
60592: EQUAL
60593: AND
60594: IFFALSE 60654
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60596: LD_INT 22
60598: PUSH
60599: LD_VAR 0 16
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 35
60610: PUSH
60611: LD_INT 49
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 91
60620: PUSH
60621: LD_VAR 0 1
60625: PUSH
60626: LD_INT 10
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: PPUSH
60639: CALL_OW 69
60643: NOT
60644: IFFALSE 60654
// weapon := ru_time_lapser ;
60646: LD_ADDR_VAR 0 18
60650: PUSH
60651: LD_INT 49
60653: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60654: LD_VAR 0 12
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: IN
60669: PUSH
60670: LD_INT 11
60672: PUSH
60673: LD_VAR 0 5
60677: IN
60678: PUSH
60679: LD_INT 30
60681: PUSH
60682: LD_VAR 0 5
60686: IN
60687: OR
60688: AND
60689: PUSH
60690: LD_INT 6
60692: PPUSH
60693: LD_VAR 0 16
60697: PPUSH
60698: CALL_OW 321
60702: PUSH
60703: LD_INT 2
60705: EQUAL
60706: AND
60707: IFFALSE 60872
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60709: LD_INT 22
60711: PUSH
60712: LD_VAR 0 16
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 35
60726: PUSH
60727: LD_INT 11
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 35
60736: PUSH
60737: LD_INT 30
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 91
60751: PUSH
60752: LD_VAR 0 1
60756: PUSH
60757: LD_INT 18
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: PPUSH
60770: CALL_OW 69
60774: NOT
60775: PUSH
60776: LD_INT 22
60778: PUSH
60779: LD_VAR 0 16
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 30
60793: PUSH
60794: LD_INT 32
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 30
60803: PUSH
60804: LD_INT 33
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 91
60818: PUSH
60819: LD_VAR 0 1
60823: PUSH
60824: LD_INT 12
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: PUSH
60837: EMPTY
60838: LIST
60839: PPUSH
60840: CALL_OW 69
60844: PUSH
60845: LD_INT 2
60847: GREATER
60848: AND
60849: IFFALSE 60872
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60851: LD_ADDR_VAR 0 18
60855: PUSH
60856: LD_INT 11
60858: PUSH
60859: LD_INT 30
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_VAR 0 12
60870: ARRAY
60871: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60872: LD_VAR 0 18
60876: NOT
60877: PUSH
60878: LD_INT 40
60880: PPUSH
60881: LD_VAR 0 16
60885: PPUSH
60886: CALL_OW 321
60890: PUSH
60891: LD_INT 2
60893: EQUAL
60894: AND
60895: PUSH
60896: LD_INT 7
60898: PUSH
60899: LD_VAR 0 5
60903: IN
60904: PUSH
60905: LD_INT 28
60907: PUSH
60908: LD_VAR 0 5
60912: IN
60913: OR
60914: PUSH
60915: LD_INT 45
60917: PUSH
60918: LD_VAR 0 5
60922: IN
60923: OR
60924: AND
60925: IFFALSE 61179
// begin hex := GetHexInfo ( x , y ) ;
60927: LD_ADDR_VAR 0 4
60931: PUSH
60932: LD_VAR 0 10
60936: PPUSH
60937: LD_VAR 0 11
60941: PPUSH
60942: CALL_OW 546
60946: ST_TO_ADDR
// if hex [ 1 ] then
60947: LD_VAR 0 4
60951: PUSH
60952: LD_INT 1
60954: ARRAY
60955: IFFALSE 60959
// exit ;
60957: GO 61362
// height := hex [ 2 ] ;
60959: LD_ADDR_VAR 0 15
60963: PUSH
60964: LD_VAR 0 4
60968: PUSH
60969: LD_INT 2
60971: ARRAY
60972: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60973: LD_ADDR_VAR 0 14
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 5
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: ST_TO_ADDR
// for i in tmp do
60996: LD_ADDR_VAR 0 8
61000: PUSH
61001: LD_VAR 0 14
61005: PUSH
61006: FOR_IN
61007: IFFALSE 61177
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61009: LD_ADDR_VAR 0 9
61013: PUSH
61014: LD_VAR 0 10
61018: PPUSH
61019: LD_VAR 0 8
61023: PPUSH
61024: LD_INT 5
61026: PPUSH
61027: CALL_OW 272
61031: PUSH
61032: LD_VAR 0 11
61036: PPUSH
61037: LD_VAR 0 8
61041: PPUSH
61042: LD_INT 5
61044: PPUSH
61045: CALL_OW 273
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61054: LD_VAR 0 9
61058: PUSH
61059: LD_INT 1
61061: ARRAY
61062: PPUSH
61063: LD_VAR 0 9
61067: PUSH
61068: LD_INT 2
61070: ARRAY
61071: PPUSH
61072: CALL_OW 488
61076: IFFALSE 61175
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61078: LD_ADDR_VAR 0 4
61082: PUSH
61083: LD_VAR 0 9
61087: PUSH
61088: LD_INT 1
61090: ARRAY
61091: PPUSH
61092: LD_VAR 0 9
61096: PUSH
61097: LD_INT 2
61099: ARRAY
61100: PPUSH
61101: CALL_OW 546
61105: ST_TO_ADDR
// if hex [ 1 ] then
61106: LD_VAR 0 4
61110: PUSH
61111: LD_INT 1
61113: ARRAY
61114: IFFALSE 61118
// continue ;
61116: GO 61006
// h := hex [ 2 ] ;
61118: LD_ADDR_VAR 0 13
61122: PUSH
61123: LD_VAR 0 4
61127: PUSH
61128: LD_INT 2
61130: ARRAY
61131: ST_TO_ADDR
// if h + 7 < height then
61132: LD_VAR 0 13
61136: PUSH
61137: LD_INT 7
61139: PLUS
61140: PUSH
61141: LD_VAR 0 15
61145: LESS
61146: IFFALSE 61175
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61148: LD_ADDR_VAR 0 18
61152: PUSH
61153: LD_INT 7
61155: PUSH
61156: LD_INT 28
61158: PUSH
61159: LD_INT 45
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: PUSH
61167: LD_VAR 0 12
61171: ARRAY
61172: ST_TO_ADDR
// break ;
61173: GO 61177
// end ; end ; end ;
61175: GO 61006
61177: POP
61178: POP
// end ; if not weapon then
61179: LD_VAR 0 18
61183: NOT
61184: IFFALSE 61244
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61186: LD_ADDR_VAR 0 5
61190: PUSH
61191: LD_VAR 0 5
61195: PUSH
61196: LD_INT 11
61198: PUSH
61199: LD_INT 30
61201: PUSH
61202: LD_INT 49
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: DIFF
61210: ST_TO_ADDR
// if not list then
61211: LD_VAR 0 5
61215: NOT
61216: IFFALSE 61220
// exit ;
61218: GO 61362
// weapon := list [ rand ( 1 , list ) ] ;
61220: LD_ADDR_VAR 0 18
61224: PUSH
61225: LD_VAR 0 5
61229: PUSH
61230: LD_INT 1
61232: PPUSH
61233: LD_VAR 0 5
61237: PPUSH
61238: CALL_OW 12
61242: ARRAY
61243: ST_TO_ADDR
// end ; if weapon then
61244: LD_VAR 0 18
61248: IFFALSE 61362
// begin tmp := CostOfWeapon ( weapon ) ;
61250: LD_ADDR_VAR 0 14
61254: PUSH
61255: LD_VAR 0 18
61259: PPUSH
61260: CALL_OW 451
61264: ST_TO_ADDR
// j := GetBase ( tower ) ;
61265: LD_ADDR_VAR 0 9
61269: PUSH
61270: LD_VAR 0 1
61274: PPUSH
61275: CALL_OW 274
61279: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61280: LD_VAR 0 9
61284: PPUSH
61285: LD_INT 1
61287: PPUSH
61288: CALL_OW 275
61292: PUSH
61293: LD_VAR 0 14
61297: PUSH
61298: LD_INT 1
61300: ARRAY
61301: GREATEREQUAL
61302: PUSH
61303: LD_VAR 0 9
61307: PPUSH
61308: LD_INT 2
61310: PPUSH
61311: CALL_OW 275
61315: PUSH
61316: LD_VAR 0 14
61320: PUSH
61321: LD_INT 2
61323: ARRAY
61324: GREATEREQUAL
61325: AND
61326: PUSH
61327: LD_VAR 0 9
61331: PPUSH
61332: LD_INT 3
61334: PPUSH
61335: CALL_OW 275
61339: PUSH
61340: LD_VAR 0 14
61344: PUSH
61345: LD_INT 3
61347: ARRAY
61348: GREATEREQUAL
61349: AND
61350: IFFALSE 61362
// result := weapon ;
61352: LD_ADDR_VAR 0 3
61356: PUSH
61357: LD_VAR 0 18
61361: ST_TO_ADDR
// end ; end ;
61362: LD_VAR 0 3
61366: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61367: LD_INT 0
61369: PPUSH
61370: PPUSH
// result := true ;
61371: LD_ADDR_VAR 0 3
61375: PUSH
61376: LD_INT 1
61378: ST_TO_ADDR
// if array1 = array2 then
61379: LD_VAR 0 1
61383: PUSH
61384: LD_VAR 0 2
61388: EQUAL
61389: IFFALSE 61449
// begin for i = 1 to array1 do
61391: LD_ADDR_VAR 0 4
61395: PUSH
61396: DOUBLE
61397: LD_INT 1
61399: DEC
61400: ST_TO_ADDR
61401: LD_VAR 0 1
61405: PUSH
61406: FOR_TO
61407: IFFALSE 61445
// if array1 [ i ] <> array2 [ i ] then
61409: LD_VAR 0 1
61413: PUSH
61414: LD_VAR 0 4
61418: ARRAY
61419: PUSH
61420: LD_VAR 0 2
61424: PUSH
61425: LD_VAR 0 4
61429: ARRAY
61430: NONEQUAL
61431: IFFALSE 61443
// begin result := false ;
61433: LD_ADDR_VAR 0 3
61437: PUSH
61438: LD_INT 0
61440: ST_TO_ADDR
// break ;
61441: GO 61445
// end ;
61443: GO 61406
61445: POP
61446: POP
// end else
61447: GO 61457
// result := false ;
61449: LD_ADDR_VAR 0 3
61453: PUSH
61454: LD_INT 0
61456: ST_TO_ADDR
// end ;
61457: LD_VAR 0 3
61461: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61462: LD_INT 0
61464: PPUSH
61465: PPUSH
// if not array1 or not array2 then
61466: LD_VAR 0 1
61470: NOT
61471: PUSH
61472: LD_VAR 0 2
61476: NOT
61477: OR
61478: IFFALSE 61482
// exit ;
61480: GO 61546
// result := true ;
61482: LD_ADDR_VAR 0 3
61486: PUSH
61487: LD_INT 1
61489: ST_TO_ADDR
// for i = 1 to array1 do
61490: LD_ADDR_VAR 0 4
61494: PUSH
61495: DOUBLE
61496: LD_INT 1
61498: DEC
61499: ST_TO_ADDR
61500: LD_VAR 0 1
61504: PUSH
61505: FOR_TO
61506: IFFALSE 61544
// if array1 [ i ] <> array2 [ i ] then
61508: LD_VAR 0 1
61512: PUSH
61513: LD_VAR 0 4
61517: ARRAY
61518: PUSH
61519: LD_VAR 0 2
61523: PUSH
61524: LD_VAR 0 4
61528: ARRAY
61529: NONEQUAL
61530: IFFALSE 61542
// begin result := false ;
61532: LD_ADDR_VAR 0 3
61536: PUSH
61537: LD_INT 0
61539: ST_TO_ADDR
// break ;
61540: GO 61544
// end ;
61542: GO 61505
61544: POP
61545: POP
// end ;
61546: LD_VAR 0 3
61550: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61551: LD_INT 0
61553: PPUSH
61554: PPUSH
61555: PPUSH
// pom := GetBase ( fac ) ;
61556: LD_ADDR_VAR 0 5
61560: PUSH
61561: LD_VAR 0 1
61565: PPUSH
61566: CALL_OW 274
61570: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61571: LD_ADDR_VAR 0 4
61575: PUSH
61576: LD_VAR 0 2
61580: PUSH
61581: LD_INT 1
61583: ARRAY
61584: PPUSH
61585: LD_VAR 0 2
61589: PUSH
61590: LD_INT 2
61592: ARRAY
61593: PPUSH
61594: LD_VAR 0 2
61598: PUSH
61599: LD_INT 3
61601: ARRAY
61602: PPUSH
61603: LD_VAR 0 2
61607: PUSH
61608: LD_INT 4
61610: ARRAY
61611: PPUSH
61612: CALL_OW 449
61616: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61617: LD_ADDR_VAR 0 3
61621: PUSH
61622: LD_VAR 0 5
61626: PPUSH
61627: LD_INT 1
61629: PPUSH
61630: CALL_OW 275
61634: PUSH
61635: LD_VAR 0 4
61639: PUSH
61640: LD_INT 1
61642: ARRAY
61643: GREATEREQUAL
61644: PUSH
61645: LD_VAR 0 5
61649: PPUSH
61650: LD_INT 2
61652: PPUSH
61653: CALL_OW 275
61657: PUSH
61658: LD_VAR 0 4
61662: PUSH
61663: LD_INT 2
61665: ARRAY
61666: GREATEREQUAL
61667: AND
61668: PUSH
61669: LD_VAR 0 5
61673: PPUSH
61674: LD_INT 3
61676: PPUSH
61677: CALL_OW 275
61681: PUSH
61682: LD_VAR 0 4
61686: PUSH
61687: LD_INT 3
61689: ARRAY
61690: GREATEREQUAL
61691: AND
61692: ST_TO_ADDR
// end ;
61693: LD_VAR 0 3
61697: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61698: LD_INT 0
61700: PPUSH
61701: PPUSH
61702: PPUSH
61703: PPUSH
// pom := GetBase ( building ) ;
61704: LD_ADDR_VAR 0 3
61708: PUSH
61709: LD_VAR 0 1
61713: PPUSH
61714: CALL_OW 274
61718: ST_TO_ADDR
// if not pom then
61719: LD_VAR 0 3
61723: NOT
61724: IFFALSE 61728
// exit ;
61726: GO 61898
// btype := GetBType ( building ) ;
61728: LD_ADDR_VAR 0 5
61732: PUSH
61733: LD_VAR 0 1
61737: PPUSH
61738: CALL_OW 266
61742: ST_TO_ADDR
// if btype = b_armoury then
61743: LD_VAR 0 5
61747: PUSH
61748: LD_INT 4
61750: EQUAL
61751: IFFALSE 61761
// btype := b_barracks ;
61753: LD_ADDR_VAR 0 5
61757: PUSH
61758: LD_INT 5
61760: ST_TO_ADDR
// if btype = b_depot then
61761: LD_VAR 0 5
61765: PUSH
61766: LD_INT 0
61768: EQUAL
61769: IFFALSE 61779
// btype := b_warehouse ;
61771: LD_ADDR_VAR 0 5
61775: PUSH
61776: LD_INT 1
61778: ST_TO_ADDR
// if btype = b_workshop then
61779: LD_VAR 0 5
61783: PUSH
61784: LD_INT 2
61786: EQUAL
61787: IFFALSE 61797
// btype := b_factory ;
61789: LD_ADDR_VAR 0 5
61793: PUSH
61794: LD_INT 3
61796: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61797: LD_ADDR_VAR 0 4
61801: PUSH
61802: LD_VAR 0 5
61806: PPUSH
61807: LD_VAR 0 1
61811: PPUSH
61812: CALL_OW 248
61816: PPUSH
61817: CALL_OW 450
61821: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61822: LD_ADDR_VAR 0 2
61826: PUSH
61827: LD_VAR 0 3
61831: PPUSH
61832: LD_INT 1
61834: PPUSH
61835: CALL_OW 275
61839: PUSH
61840: LD_VAR 0 4
61844: PUSH
61845: LD_INT 1
61847: ARRAY
61848: GREATEREQUAL
61849: PUSH
61850: LD_VAR 0 3
61854: PPUSH
61855: LD_INT 2
61857: PPUSH
61858: CALL_OW 275
61862: PUSH
61863: LD_VAR 0 4
61867: PUSH
61868: LD_INT 2
61870: ARRAY
61871: GREATEREQUAL
61872: AND
61873: PUSH
61874: LD_VAR 0 3
61878: PPUSH
61879: LD_INT 3
61881: PPUSH
61882: CALL_OW 275
61886: PUSH
61887: LD_VAR 0 4
61891: PUSH
61892: LD_INT 3
61894: ARRAY
61895: GREATEREQUAL
61896: AND
61897: ST_TO_ADDR
// end ;
61898: LD_VAR 0 2
61902: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61903: LD_INT 0
61905: PPUSH
61906: PPUSH
61907: PPUSH
// pom := GetBase ( building ) ;
61908: LD_ADDR_VAR 0 4
61912: PUSH
61913: LD_VAR 0 1
61917: PPUSH
61918: CALL_OW 274
61922: ST_TO_ADDR
// if not pom then
61923: LD_VAR 0 4
61927: NOT
61928: IFFALSE 61932
// exit ;
61930: GO 62033
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61932: LD_ADDR_VAR 0 5
61936: PUSH
61937: LD_VAR 0 2
61941: PPUSH
61942: LD_VAR 0 1
61946: PPUSH
61947: CALL_OW 248
61951: PPUSH
61952: CALL_OW 450
61956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61957: LD_ADDR_VAR 0 3
61961: PUSH
61962: LD_VAR 0 4
61966: PPUSH
61967: LD_INT 1
61969: PPUSH
61970: CALL_OW 275
61974: PUSH
61975: LD_VAR 0 5
61979: PUSH
61980: LD_INT 1
61982: ARRAY
61983: GREATEREQUAL
61984: PUSH
61985: LD_VAR 0 4
61989: PPUSH
61990: LD_INT 2
61992: PPUSH
61993: CALL_OW 275
61997: PUSH
61998: LD_VAR 0 5
62002: PUSH
62003: LD_INT 2
62005: ARRAY
62006: GREATEREQUAL
62007: AND
62008: PUSH
62009: LD_VAR 0 4
62013: PPUSH
62014: LD_INT 3
62016: PPUSH
62017: CALL_OW 275
62021: PUSH
62022: LD_VAR 0 5
62026: PUSH
62027: LD_INT 3
62029: ARRAY
62030: GREATEREQUAL
62031: AND
62032: ST_TO_ADDR
// end ;
62033: LD_VAR 0 3
62037: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
62038: LD_INT 0
62040: PPUSH
62041: PPUSH
62042: PPUSH
62043: PPUSH
62044: PPUSH
62045: PPUSH
62046: PPUSH
62047: PPUSH
62048: PPUSH
62049: PPUSH
62050: PPUSH
// result := false ;
62051: LD_ADDR_VAR 0 8
62055: PUSH
62056: LD_INT 0
62058: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
62059: LD_VAR 0 5
62063: NOT
62064: PUSH
62065: LD_VAR 0 1
62069: NOT
62070: OR
62071: PUSH
62072: LD_VAR 0 2
62076: NOT
62077: OR
62078: PUSH
62079: LD_VAR 0 3
62083: NOT
62084: OR
62085: IFFALSE 62089
// exit ;
62087: GO 62903
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
62089: LD_ADDR_VAR 0 14
62093: PUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: LD_VAR 0 2
62103: PPUSH
62104: LD_VAR 0 3
62108: PPUSH
62109: LD_VAR 0 4
62113: PPUSH
62114: LD_VAR 0 5
62118: PUSH
62119: LD_INT 1
62121: ARRAY
62122: PPUSH
62123: CALL_OW 248
62127: PPUSH
62128: LD_INT 0
62130: PPUSH
62131: CALL 64136 0 6
62135: ST_TO_ADDR
// if not hexes then
62136: LD_VAR 0 14
62140: NOT
62141: IFFALSE 62145
// exit ;
62143: GO 62903
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62145: LD_ADDR_VAR 0 17
62149: PUSH
62150: LD_VAR 0 5
62154: PPUSH
62155: LD_INT 22
62157: PUSH
62158: LD_VAR 0 13
62162: PPUSH
62163: CALL_OW 255
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: LD_INT 30
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 30
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PPUSH
62204: CALL_OW 72
62208: ST_TO_ADDR
// for i = 1 to hexes do
62209: LD_ADDR_VAR 0 9
62213: PUSH
62214: DOUBLE
62215: LD_INT 1
62217: DEC
62218: ST_TO_ADDR
62219: LD_VAR 0 14
62223: PUSH
62224: FOR_TO
62225: IFFALSE 62901
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62227: LD_ADDR_VAR 0 13
62231: PUSH
62232: LD_VAR 0 14
62236: PUSH
62237: LD_VAR 0 9
62241: ARRAY
62242: PUSH
62243: LD_INT 1
62245: ARRAY
62246: PPUSH
62247: LD_VAR 0 14
62251: PUSH
62252: LD_VAR 0 9
62256: ARRAY
62257: PUSH
62258: LD_INT 2
62260: ARRAY
62261: PPUSH
62262: CALL_OW 428
62266: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62267: LD_VAR 0 14
62271: PUSH
62272: LD_VAR 0 9
62276: ARRAY
62277: PUSH
62278: LD_INT 1
62280: ARRAY
62281: PPUSH
62282: LD_VAR 0 14
62286: PUSH
62287: LD_VAR 0 9
62291: ARRAY
62292: PUSH
62293: LD_INT 2
62295: ARRAY
62296: PPUSH
62297: CALL_OW 351
62301: PUSH
62302: LD_VAR 0 14
62306: PUSH
62307: LD_VAR 0 9
62311: ARRAY
62312: PUSH
62313: LD_INT 1
62315: ARRAY
62316: PPUSH
62317: LD_VAR 0 14
62321: PUSH
62322: LD_VAR 0 9
62326: ARRAY
62327: PUSH
62328: LD_INT 2
62330: ARRAY
62331: PPUSH
62332: CALL_OW 488
62336: NOT
62337: OR
62338: PUSH
62339: LD_VAR 0 13
62343: PPUSH
62344: CALL_OW 247
62348: PUSH
62349: LD_INT 3
62351: EQUAL
62352: OR
62353: IFFALSE 62359
// exit ;
62355: POP
62356: POP
62357: GO 62903
// if not tmp then
62359: LD_VAR 0 13
62363: NOT
62364: IFFALSE 62368
// continue ;
62366: GO 62224
// result := true ;
62368: LD_ADDR_VAR 0 8
62372: PUSH
62373: LD_INT 1
62375: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62376: LD_VAR 0 6
62380: PUSH
62381: LD_VAR 0 13
62385: PPUSH
62386: CALL_OW 247
62390: PUSH
62391: LD_INT 2
62393: EQUAL
62394: AND
62395: PUSH
62396: LD_VAR 0 13
62400: PPUSH
62401: CALL_OW 263
62405: PUSH
62406: LD_INT 1
62408: EQUAL
62409: AND
62410: IFFALSE 62574
// begin if IsDrivenBy ( tmp ) then
62412: LD_VAR 0 13
62416: PPUSH
62417: CALL_OW 311
62421: IFFALSE 62425
// continue ;
62423: GO 62224
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62425: LD_VAR 0 6
62429: PPUSH
62430: LD_INT 3
62432: PUSH
62433: LD_INT 60
62435: PUSH
62436: EMPTY
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: PUSH
62446: LD_INT 55
62448: PUSH
62449: EMPTY
62450: LIST
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PPUSH
62460: CALL_OW 72
62464: IFFALSE 62572
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62466: LD_ADDR_VAR 0 18
62470: PUSH
62471: LD_VAR 0 6
62475: PPUSH
62476: LD_INT 3
62478: PUSH
62479: LD_INT 60
62481: PUSH
62482: EMPTY
62483: LIST
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 3
62491: PUSH
62492: LD_INT 55
62494: PUSH
62495: EMPTY
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PPUSH
62506: CALL_OW 72
62510: PUSH
62511: LD_INT 1
62513: ARRAY
62514: ST_TO_ADDR
// if IsInUnit ( driver ) then
62515: LD_VAR 0 18
62519: PPUSH
62520: CALL_OW 310
62524: IFFALSE 62535
// ComExit ( driver ) ;
62526: LD_VAR 0 18
62530: PPUSH
62531: CALL 87897 0 1
// AddComEnterUnit ( driver , tmp ) ;
62535: LD_VAR 0 18
62539: PPUSH
62540: LD_VAR 0 13
62544: PPUSH
62545: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62549: LD_VAR 0 18
62553: PPUSH
62554: LD_VAR 0 7
62558: PPUSH
62559: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62563: LD_VAR 0 18
62567: PPUSH
62568: CALL_OW 181
// end ; continue ;
62572: GO 62224
// end ; if not cleaners or not tmp in cleaners then
62574: LD_VAR 0 6
62578: NOT
62579: PUSH
62580: LD_VAR 0 13
62584: PUSH
62585: LD_VAR 0 6
62589: IN
62590: NOT
62591: OR
62592: IFFALSE 62899
// begin if dep then
62594: LD_VAR 0 17
62598: IFFALSE 62734
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62600: LD_ADDR_VAR 0 16
62604: PUSH
62605: LD_VAR 0 17
62609: PUSH
62610: LD_INT 1
62612: ARRAY
62613: PPUSH
62614: CALL_OW 250
62618: PPUSH
62619: LD_VAR 0 17
62623: PUSH
62624: LD_INT 1
62626: ARRAY
62627: PPUSH
62628: CALL_OW 254
62632: PPUSH
62633: LD_INT 5
62635: PPUSH
62636: CALL_OW 272
62640: PUSH
62641: LD_VAR 0 17
62645: PUSH
62646: LD_INT 1
62648: ARRAY
62649: PPUSH
62650: CALL_OW 251
62654: PPUSH
62655: LD_VAR 0 17
62659: PUSH
62660: LD_INT 1
62662: ARRAY
62663: PPUSH
62664: CALL_OW 254
62668: PPUSH
62669: LD_INT 5
62671: PPUSH
62672: CALL_OW 273
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62681: LD_VAR 0 16
62685: PUSH
62686: LD_INT 1
62688: ARRAY
62689: PPUSH
62690: LD_VAR 0 16
62694: PUSH
62695: LD_INT 2
62697: ARRAY
62698: PPUSH
62699: CALL_OW 488
62703: IFFALSE 62734
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62705: LD_VAR 0 13
62709: PPUSH
62710: LD_VAR 0 16
62714: PUSH
62715: LD_INT 1
62717: ARRAY
62718: PPUSH
62719: LD_VAR 0 16
62723: PUSH
62724: LD_INT 2
62726: ARRAY
62727: PPUSH
62728: CALL_OW 111
// continue ;
62732: GO 62224
// end ; end ; r := GetDir ( tmp ) ;
62734: LD_ADDR_VAR 0 15
62738: PUSH
62739: LD_VAR 0 13
62743: PPUSH
62744: CALL_OW 254
62748: ST_TO_ADDR
// if r = 5 then
62749: LD_VAR 0 15
62753: PUSH
62754: LD_INT 5
62756: EQUAL
62757: IFFALSE 62767
// r := 0 ;
62759: LD_ADDR_VAR 0 15
62763: PUSH
62764: LD_INT 0
62766: ST_TO_ADDR
// for j = r to 5 do
62767: LD_ADDR_VAR 0 10
62771: PUSH
62772: DOUBLE
62773: LD_VAR 0 15
62777: DEC
62778: ST_TO_ADDR
62779: LD_INT 5
62781: PUSH
62782: FOR_TO
62783: IFFALSE 62897
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62785: LD_ADDR_VAR 0 11
62789: PUSH
62790: LD_VAR 0 13
62794: PPUSH
62795: CALL_OW 250
62799: PPUSH
62800: LD_VAR 0 10
62804: PPUSH
62805: LD_INT 2
62807: PPUSH
62808: CALL_OW 272
62812: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62813: LD_ADDR_VAR 0 12
62817: PUSH
62818: LD_VAR 0 13
62822: PPUSH
62823: CALL_OW 251
62827: PPUSH
62828: LD_VAR 0 10
62832: PPUSH
62833: LD_INT 2
62835: PPUSH
62836: CALL_OW 273
62840: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62841: LD_VAR 0 11
62845: PPUSH
62846: LD_VAR 0 12
62850: PPUSH
62851: CALL_OW 488
62855: PUSH
62856: LD_VAR 0 11
62860: PPUSH
62861: LD_VAR 0 12
62865: PPUSH
62866: CALL_OW 428
62870: NOT
62871: AND
62872: IFFALSE 62895
// begin ComMoveXY ( tmp , _x , _y ) ;
62874: LD_VAR 0 13
62878: PPUSH
62879: LD_VAR 0 11
62883: PPUSH
62884: LD_VAR 0 12
62888: PPUSH
62889: CALL_OW 111
// break ;
62893: GO 62897
// end ; end ;
62895: GO 62782
62897: POP
62898: POP
// end ; end ;
62899: GO 62224
62901: POP
62902: POP
// end ;
62903: LD_VAR 0 8
62907: RET
// export function BuildingTechInvented ( side , btype ) ; begin
62908: LD_INT 0
62910: PPUSH
// result := true ;
62911: LD_ADDR_VAR 0 3
62915: PUSH
62916: LD_INT 1
62918: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
62919: LD_VAR 0 2
62923: PUSH
62924: LD_INT 24
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62938
62930: LD_INT 33
62932: DOUBLE
62933: EQUAL
62934: IFTRUE 62938
62936: GO 62963
62938: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
62939: LD_ADDR_VAR 0 3
62943: PUSH
62944: LD_INT 32
62946: PPUSH
62947: LD_VAR 0 1
62951: PPUSH
62952: CALL_OW 321
62956: PUSH
62957: LD_INT 2
62959: EQUAL
62960: ST_TO_ADDR
62961: GO 63279
62963: LD_INT 20
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62971
62969: GO 62996
62971: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
62972: LD_ADDR_VAR 0 3
62976: PUSH
62977: LD_INT 6
62979: PPUSH
62980: LD_VAR 0 1
62984: PPUSH
62985: CALL_OW 321
62989: PUSH
62990: LD_INT 2
62992: EQUAL
62993: ST_TO_ADDR
62994: GO 63279
62996: LD_INT 22
62998: DOUBLE
62999: EQUAL
63000: IFTRUE 63010
63002: LD_INT 36
63004: DOUBLE
63005: EQUAL
63006: IFTRUE 63010
63008: GO 63035
63010: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
63011: LD_ADDR_VAR 0 3
63015: PUSH
63016: LD_INT 15
63018: PPUSH
63019: LD_VAR 0 1
63023: PPUSH
63024: CALL_OW 321
63028: PUSH
63029: LD_INT 2
63031: EQUAL
63032: ST_TO_ADDR
63033: GO 63279
63035: LD_INT 30
63037: DOUBLE
63038: EQUAL
63039: IFTRUE 63043
63041: GO 63068
63043: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
63044: LD_ADDR_VAR 0 3
63048: PUSH
63049: LD_INT 20
63051: PPUSH
63052: LD_VAR 0 1
63056: PPUSH
63057: CALL_OW 321
63061: PUSH
63062: LD_INT 2
63064: EQUAL
63065: ST_TO_ADDR
63066: GO 63279
63068: LD_INT 28
63070: DOUBLE
63071: EQUAL
63072: IFTRUE 63082
63074: LD_INT 21
63076: DOUBLE
63077: EQUAL
63078: IFTRUE 63082
63080: GO 63107
63082: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
63083: LD_ADDR_VAR 0 3
63087: PUSH
63088: LD_INT 21
63090: PPUSH
63091: LD_VAR 0 1
63095: PPUSH
63096: CALL_OW 321
63100: PUSH
63101: LD_INT 2
63103: EQUAL
63104: ST_TO_ADDR
63105: GO 63279
63107: LD_INT 16
63109: DOUBLE
63110: EQUAL
63111: IFTRUE 63115
63113: GO 63140
63115: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
63116: LD_ADDR_VAR 0 3
63120: PUSH
63121: LD_INT 84
63123: PPUSH
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 321
63133: PUSH
63134: LD_INT 2
63136: EQUAL
63137: ST_TO_ADDR
63138: GO 63279
63140: LD_INT 19
63142: DOUBLE
63143: EQUAL
63144: IFTRUE 63154
63146: LD_INT 23
63148: DOUBLE
63149: EQUAL
63150: IFTRUE 63154
63152: GO 63179
63154: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63155: LD_ADDR_VAR 0 3
63159: PUSH
63160: LD_INT 83
63162: PPUSH
63163: LD_VAR 0 1
63167: PPUSH
63168: CALL_OW 321
63172: PUSH
63173: LD_INT 2
63175: EQUAL
63176: ST_TO_ADDR
63177: GO 63279
63179: LD_INT 17
63181: DOUBLE
63182: EQUAL
63183: IFTRUE 63187
63185: GO 63212
63187: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63188: LD_ADDR_VAR 0 3
63192: PUSH
63193: LD_INT 39
63195: PPUSH
63196: LD_VAR 0 1
63200: PPUSH
63201: CALL_OW 321
63205: PUSH
63206: LD_INT 2
63208: EQUAL
63209: ST_TO_ADDR
63210: GO 63279
63212: LD_INT 18
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63220
63218: GO 63245
63220: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63221: LD_ADDR_VAR 0 3
63225: PUSH
63226: LD_INT 40
63228: PPUSH
63229: LD_VAR 0 1
63233: PPUSH
63234: CALL_OW 321
63238: PUSH
63239: LD_INT 2
63241: EQUAL
63242: ST_TO_ADDR
63243: GO 63279
63245: LD_INT 27
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63253
63251: GO 63278
63253: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63254: LD_ADDR_VAR 0 3
63258: PUSH
63259: LD_INT 35
63261: PPUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: CALL_OW 321
63271: PUSH
63272: LD_INT 2
63274: EQUAL
63275: ST_TO_ADDR
63276: GO 63279
63278: POP
// end ;
63279: LD_VAR 0 3
63283: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63284: LD_INT 0
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
63290: PPUSH
63291: PPUSH
63292: PPUSH
63293: PPUSH
63294: PPUSH
63295: PPUSH
63296: PPUSH
// result := false ;
63297: LD_ADDR_VAR 0 6
63301: PUSH
63302: LD_INT 0
63304: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63305: LD_VAR 0 1
63309: NOT
63310: PUSH
63311: LD_VAR 0 1
63315: PPUSH
63316: CALL_OW 266
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: IN
63331: NOT
63332: OR
63333: PUSH
63334: LD_VAR 0 2
63338: NOT
63339: OR
63340: PUSH
63341: LD_VAR 0 5
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 2
63354: PUSH
63355: LD_INT 3
63357: PUSH
63358: LD_INT 4
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: IN
63372: NOT
63373: OR
63374: PUSH
63375: LD_VAR 0 3
63379: PPUSH
63380: LD_VAR 0 4
63384: PPUSH
63385: CALL_OW 488
63389: NOT
63390: OR
63391: IFFALSE 63395
// exit ;
63393: GO 64131
// side := GetSide ( depot ) ;
63395: LD_ADDR_VAR 0 9
63399: PUSH
63400: LD_VAR 0 1
63404: PPUSH
63405: CALL_OW 255
63409: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63410: LD_VAR 0 9
63414: PPUSH
63415: LD_VAR 0 2
63419: PPUSH
63420: CALL 62908 0 2
63424: NOT
63425: IFFALSE 63429
// exit ;
63427: GO 64131
// pom := GetBase ( depot ) ;
63429: LD_ADDR_VAR 0 10
63433: PUSH
63434: LD_VAR 0 1
63438: PPUSH
63439: CALL_OW 274
63443: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63444: LD_ADDR_VAR 0 11
63448: PUSH
63449: LD_VAR 0 2
63453: PPUSH
63454: LD_VAR 0 1
63458: PPUSH
63459: CALL_OW 248
63463: PPUSH
63464: CALL_OW 450
63468: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63469: LD_VAR 0 10
63473: PPUSH
63474: LD_INT 1
63476: PPUSH
63477: CALL_OW 275
63481: PUSH
63482: LD_VAR 0 11
63486: PUSH
63487: LD_INT 1
63489: ARRAY
63490: GREATEREQUAL
63491: PUSH
63492: LD_VAR 0 10
63496: PPUSH
63497: LD_INT 2
63499: PPUSH
63500: CALL_OW 275
63504: PUSH
63505: LD_VAR 0 11
63509: PUSH
63510: LD_INT 2
63512: ARRAY
63513: GREATEREQUAL
63514: AND
63515: PUSH
63516: LD_VAR 0 10
63520: PPUSH
63521: LD_INT 3
63523: PPUSH
63524: CALL_OW 275
63528: PUSH
63529: LD_VAR 0 11
63533: PUSH
63534: LD_INT 3
63536: ARRAY
63537: GREATEREQUAL
63538: AND
63539: NOT
63540: IFFALSE 63544
// exit ;
63542: GO 64131
// if GetBType ( depot ) = b_depot then
63544: LD_VAR 0 1
63548: PPUSH
63549: CALL_OW 266
63553: PUSH
63554: LD_INT 0
63556: EQUAL
63557: IFFALSE 63569
// dist := 28 else
63559: LD_ADDR_VAR 0 14
63563: PUSH
63564: LD_INT 28
63566: ST_TO_ADDR
63567: GO 63577
// dist := 36 ;
63569: LD_ADDR_VAR 0 14
63573: PUSH
63574: LD_INT 36
63576: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63577: LD_VAR 0 1
63581: PPUSH
63582: LD_VAR 0 3
63586: PPUSH
63587: LD_VAR 0 4
63591: PPUSH
63592: CALL_OW 297
63596: PUSH
63597: LD_VAR 0 14
63601: GREATER
63602: IFFALSE 63606
// exit ;
63604: GO 64131
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63606: LD_ADDR_VAR 0 12
63610: PUSH
63611: LD_VAR 0 2
63615: PPUSH
63616: LD_VAR 0 3
63620: PPUSH
63621: LD_VAR 0 4
63625: PPUSH
63626: LD_VAR 0 5
63630: PPUSH
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 248
63640: PPUSH
63641: LD_INT 0
63643: PPUSH
63644: CALL 64136 0 6
63648: ST_TO_ADDR
// if not hexes then
63649: LD_VAR 0 12
63653: NOT
63654: IFFALSE 63658
// exit ;
63656: GO 64131
// hex := GetHexInfo ( x , y ) ;
63658: LD_ADDR_VAR 0 15
63662: PUSH
63663: LD_VAR 0 3
63667: PPUSH
63668: LD_VAR 0 4
63672: PPUSH
63673: CALL_OW 546
63677: ST_TO_ADDR
// if hex [ 1 ] then
63678: LD_VAR 0 15
63682: PUSH
63683: LD_INT 1
63685: ARRAY
63686: IFFALSE 63690
// exit ;
63688: GO 64131
// height := hex [ 2 ] ;
63690: LD_ADDR_VAR 0 13
63694: PUSH
63695: LD_VAR 0 15
63699: PUSH
63700: LD_INT 2
63702: ARRAY
63703: ST_TO_ADDR
// for i = 1 to hexes do
63704: LD_ADDR_VAR 0 7
63708: PUSH
63709: DOUBLE
63710: LD_INT 1
63712: DEC
63713: ST_TO_ADDR
63714: LD_VAR 0 12
63718: PUSH
63719: FOR_TO
63720: IFFALSE 64050
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63722: LD_VAR 0 12
63726: PUSH
63727: LD_VAR 0 7
63731: ARRAY
63732: PUSH
63733: LD_INT 1
63735: ARRAY
63736: PPUSH
63737: LD_VAR 0 12
63741: PUSH
63742: LD_VAR 0 7
63746: ARRAY
63747: PUSH
63748: LD_INT 2
63750: ARRAY
63751: PPUSH
63752: CALL_OW 488
63756: NOT
63757: PUSH
63758: LD_VAR 0 12
63762: PUSH
63763: LD_VAR 0 7
63767: ARRAY
63768: PUSH
63769: LD_INT 1
63771: ARRAY
63772: PPUSH
63773: LD_VAR 0 12
63777: PUSH
63778: LD_VAR 0 7
63782: ARRAY
63783: PUSH
63784: LD_INT 2
63786: ARRAY
63787: PPUSH
63788: CALL_OW 428
63792: PUSH
63793: LD_INT 0
63795: GREATER
63796: OR
63797: PUSH
63798: LD_VAR 0 12
63802: PUSH
63803: LD_VAR 0 7
63807: ARRAY
63808: PUSH
63809: LD_INT 1
63811: ARRAY
63812: PPUSH
63813: LD_VAR 0 12
63817: PUSH
63818: LD_VAR 0 7
63822: ARRAY
63823: PUSH
63824: LD_INT 2
63826: ARRAY
63827: PPUSH
63828: CALL_OW 351
63832: OR
63833: IFFALSE 63839
// exit ;
63835: POP
63836: POP
63837: GO 64131
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63839: LD_ADDR_VAR 0 8
63843: PUSH
63844: LD_VAR 0 12
63848: PUSH
63849: LD_VAR 0 7
63853: ARRAY
63854: PUSH
63855: LD_INT 1
63857: ARRAY
63858: PPUSH
63859: LD_VAR 0 12
63863: PUSH
63864: LD_VAR 0 7
63868: ARRAY
63869: PUSH
63870: LD_INT 2
63872: ARRAY
63873: PPUSH
63874: CALL_OW 546
63878: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63879: LD_VAR 0 8
63883: PUSH
63884: LD_INT 1
63886: ARRAY
63887: PUSH
63888: LD_VAR 0 8
63892: PUSH
63893: LD_INT 2
63895: ARRAY
63896: PUSH
63897: LD_VAR 0 13
63901: PUSH
63902: LD_INT 2
63904: PLUS
63905: GREATER
63906: OR
63907: PUSH
63908: LD_VAR 0 8
63912: PUSH
63913: LD_INT 2
63915: ARRAY
63916: PUSH
63917: LD_VAR 0 13
63921: PUSH
63922: LD_INT 2
63924: MINUS
63925: LESS
63926: OR
63927: PUSH
63928: LD_VAR 0 8
63932: PUSH
63933: LD_INT 3
63935: ARRAY
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: LD_INT 8
63942: PUSH
63943: LD_INT 9
63945: PUSH
63946: LD_INT 10
63948: PUSH
63949: LD_INT 11
63951: PUSH
63952: LD_INT 12
63954: PUSH
63955: LD_INT 13
63957: PUSH
63958: LD_INT 16
63960: PUSH
63961: LD_INT 17
63963: PUSH
63964: LD_INT 18
63966: PUSH
63967: LD_INT 19
63969: PUSH
63970: LD_INT 20
63972: PUSH
63973: LD_INT 21
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: IN
63991: NOT
63992: OR
63993: PUSH
63994: LD_VAR 0 8
63998: PUSH
63999: LD_INT 5
64001: ARRAY
64002: NOT
64003: OR
64004: PUSH
64005: LD_VAR 0 8
64009: PUSH
64010: LD_INT 6
64012: ARRAY
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: LD_INT 2
64019: PUSH
64020: LD_INT 7
64022: PUSH
64023: LD_INT 9
64025: PUSH
64026: LD_INT 10
64028: PUSH
64029: LD_INT 11
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: IN
64040: NOT
64041: OR
64042: IFFALSE 64048
// exit ;
64044: POP
64045: POP
64046: GO 64131
// end ;
64048: GO 63719
64050: POP
64051: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64052: LD_VAR 0 9
64056: PPUSH
64057: LD_VAR 0 3
64061: PPUSH
64062: LD_VAR 0 4
64066: PPUSH
64067: LD_INT 20
64069: PPUSH
64070: CALL 56083 0 4
64074: PUSH
64075: LD_INT 4
64077: ARRAY
64078: IFFALSE 64082
// exit ;
64080: GO 64131
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
64082: LD_VAR 0 2
64086: PUSH
64087: LD_INT 29
64089: PUSH
64090: LD_INT 30
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: IN
64097: PUSH
64098: LD_VAR 0 3
64102: PPUSH
64103: LD_VAR 0 4
64107: PPUSH
64108: LD_VAR 0 9
64112: PPUSH
64113: CALL_OW 440
64117: NOT
64118: AND
64119: IFFALSE 64123
// exit ;
64121: GO 64131
// result := true ;
64123: LD_ADDR_VAR 0 6
64127: PUSH
64128: LD_INT 1
64130: ST_TO_ADDR
// end ;
64131: LD_VAR 0 6
64135: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64136: LD_INT 0
64138: PPUSH
64139: PPUSH
64140: PPUSH
64141: PPUSH
64142: PPUSH
64143: PPUSH
64144: PPUSH
64145: PPUSH
64146: PPUSH
64147: PPUSH
64148: PPUSH
64149: PPUSH
64150: PPUSH
64151: PPUSH
64152: PPUSH
64153: PPUSH
64154: PPUSH
64155: PPUSH
64156: PPUSH
64157: PPUSH
64158: PPUSH
64159: PPUSH
64160: PPUSH
64161: PPUSH
64162: PPUSH
64163: PPUSH
64164: PPUSH
64165: PPUSH
64166: PPUSH
64167: PPUSH
64168: PPUSH
64169: PPUSH
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
64174: PPUSH
64175: PPUSH
64176: PPUSH
64177: PPUSH
64178: PPUSH
64179: PPUSH
64180: PPUSH
64181: PPUSH
64182: PPUSH
64183: PPUSH
64184: PPUSH
64185: PPUSH
64186: PPUSH
64187: PPUSH
64188: PPUSH
64189: PPUSH
64190: PPUSH
64191: PPUSH
64192: PPUSH
64193: PPUSH
64194: PPUSH
64195: PPUSH
// result = [ ] ;
64196: LD_ADDR_VAR 0 7
64200: PUSH
64201: EMPTY
64202: ST_TO_ADDR
// temp_list = [ ] ;
64203: LD_ADDR_VAR 0 9
64207: PUSH
64208: EMPTY
64209: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64210: LD_VAR 0 4
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 2
64223: PUSH
64224: LD_INT 3
64226: PUSH
64227: LD_INT 4
64229: PUSH
64230: LD_INT 5
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: IN
64241: NOT
64242: PUSH
64243: LD_VAR 0 1
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: IN
64258: PUSH
64259: LD_VAR 0 5
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: LIST
64277: IN
64278: NOT
64279: AND
64280: OR
64281: IFFALSE 64285
// exit ;
64283: GO 82676
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64285: LD_VAR 0 1
64289: PUSH
64290: LD_INT 6
64292: PUSH
64293: LD_INT 7
64295: PUSH
64296: LD_INT 8
64298: PUSH
64299: LD_INT 13
64301: PUSH
64302: LD_INT 12
64304: PUSH
64305: LD_INT 15
64307: PUSH
64308: LD_INT 11
64310: PUSH
64311: LD_INT 14
64313: PUSH
64314: LD_INT 10
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: IN
64328: IFFALSE 64338
// btype = b_lab ;
64330: LD_ADDR_VAR 0 1
64334: PUSH
64335: LD_INT 6
64337: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64338: LD_VAR 0 6
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: IN
64357: NOT
64358: PUSH
64359: LD_VAR 0 1
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 3
64375: PUSH
64376: LD_INT 6
64378: PUSH
64379: LD_INT 36
64381: PUSH
64382: LD_INT 4
64384: PUSH
64385: LD_INT 5
64387: PUSH
64388: LD_INT 31
64390: PUSH
64391: LD_INT 32
64393: PUSH
64394: LD_INT 33
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: IN
64410: NOT
64411: PUSH
64412: LD_VAR 0 6
64416: PUSH
64417: LD_INT 1
64419: EQUAL
64420: AND
64421: OR
64422: PUSH
64423: LD_VAR 0 1
64427: PUSH
64428: LD_INT 2
64430: PUSH
64431: LD_INT 3
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: IN
64438: NOT
64439: PUSH
64440: LD_VAR 0 6
64444: PUSH
64445: LD_INT 2
64447: EQUAL
64448: AND
64449: OR
64450: IFFALSE 64460
// mode = 0 ;
64452: LD_ADDR_VAR 0 6
64456: PUSH
64457: LD_INT 0
64459: ST_TO_ADDR
// case mode of 0 :
64460: LD_VAR 0 6
64464: PUSH
64465: LD_INT 0
64467: DOUBLE
64468: EQUAL
64469: IFTRUE 64473
64471: GO 75926
64473: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64474: LD_ADDR_VAR 0 11
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: LD_INT 1
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64667: LD_ADDR_VAR 0 12
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 2
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 2
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: NEG
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 3
64835: NEG
64836: PUSH
64837: LD_INT 1
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64863: LD_ADDR_VAR 0 13
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 1
64932: NEG
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: LD_INT 2
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 2
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: NEG
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 2
64998: NEG
64999: PUSH
65000: LD_INT 2
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 2
65010: NEG
65011: PUSH
65012: LD_INT 3
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 3
65022: NEG
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 3
65034: NEG
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65062: LD_ADDR_VAR 0 14
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: LD_INT 3
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: LD_INT 2
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65258: LD_ADDR_VAR 0 15
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 2
65381: NEG
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 3
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65451: LD_ADDR_VAR 0 16
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: LD_INT 2
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 2
65574: NEG
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: LD_INT 2
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 3
65598: PUSH
65599: LD_INT 2
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 3
65608: PUSH
65609: LD_INT 3
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: LD_INT 3
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65644: LD_ADDR_VAR 0 17
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 0
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: LD_INT 1
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 2
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: LD_INT 1
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 2
65820: NEG
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: LD_INT 2
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65874: LD_ADDR_VAR 0 18
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 2
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 2
66061: NEG
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: LD_INT 2
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66104: LD_ADDR_VAR 0 19
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: LD_INT 1
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 2
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 2
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 2
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 2
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 0
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: NEG
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 2
66280: NEG
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 2
66291: NEG
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66334: LD_ADDR_VAR 0 20
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 1
66403: NEG
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: LD_INT 2
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: LD_INT 2
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 2
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 2
66510: NEG
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 2
66521: NEG
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 2
66533: NEG
66534: PUSH
66535: LD_INT 2
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66564: LD_ADDR_VAR 0 21
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 1
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: LD_INT 2
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: LD_INT 2
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: LD_INT 2
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 2
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 2
66740: NEG
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 2
66763: NEG
66764: PUSH
66765: LD_INT 2
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66794: LD_ADDR_VAR 0 22
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: LD_INT 1
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 2
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 2
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 2
66993: NEG
66994: PUSH
66995: LD_INT 2
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67024: LD_ADDR_VAR 0 23
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 1
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: NEG
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: LD_INT 2
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 2
67139: PUSH
67140: LD_INT 0
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 2
67159: PUSH
67160: LD_INT 2
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: LD_INT 2
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: NEG
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 2
67211: NEG
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 2
67223: NEG
67224: PUSH
67225: LD_INT 2
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 2
67235: NEG
67236: PUSH
67237: LD_INT 3
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: NEG
67248: PUSH
67249: LD_INT 3
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 2
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67304: LD_ADDR_VAR 0 24
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: LD_INT 1
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: LD_INT 1
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 1
67362: NEG
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 0
67397: PUSH
67398: LD_INT 2
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 2
67429: PUSH
67430: LD_INT 1
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 2
67439: PUSH
67440: LD_INT 2
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: LD_INT 2
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: LD_INT 1
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 2
67480: NEG
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: LD_INT 1
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 2
67503: NEG
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 3
67537: PUSH
67538: LD_INT 1
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 3
67547: PUSH
67548: LD_INT 2
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67580: LD_ADDR_VAR 0 25
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: LD_INT 1
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: LD_INT 1
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: LD_INT 1
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 1
67661: NEG
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 1
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: LD_INT 2
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: NEG
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 2
67779: NEG
67780: PUSH
67781: LD_INT 2
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 3
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: LD_INT 3
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67854: LD_ADDR_VAR 0 26
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: LD_INT 0
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: LD_INT 1
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 1
67912: NEG
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 1
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: LD_INT 2
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 2
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: LD_INT 1
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: LD_INT 0
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 2
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: LD_INT 2
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 2
68041: NEG
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: NEG
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: LD_INT 3
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 1
68075: PUSH
68076: LD_INT 3
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 1
68085: NEG
68086: PUSH
68087: LD_INT 2
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68130: LD_ADDR_VAR 0 27
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: LD_INT 1
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 1
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 2
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: LD_INT 2
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 2
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 1
68295: NEG
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: NEG
68318: PUSH
68319: LD_INT 1
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 2
68329: NEG
68330: PUSH
68331: LD_INT 2
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 2
68352: NEG
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 3
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 3
68375: NEG
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68410: LD_ADDR_VAR 0 28
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 1
68448: PUSH
68449: LD_INT 1
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 0
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 1
68468: NEG
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: NEG
68480: PUSH
68481: LD_INT 1
68483: NEG
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: LD_INT 2
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: LD_INT 2
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 2
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 2
68535: PUSH
68536: LD_INT 1
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 2
68545: PUSH
68546: LD_INT 2
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: LD_INT 2
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: LD_INT 2
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 2
68586: NEG
68587: PUSH
68588: LD_INT 0
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 2
68597: NEG
68598: PUSH
68599: LD_INT 1
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 2
68609: NEG
68610: PUSH
68611: LD_INT 2
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 2
68621: NEG
68622: PUSH
68623: LD_INT 3
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: LD_INT 3
68637: NEG
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 3
68657: NEG
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68692: LD_ADDR_VAR 0 29
68696: PUSH
68697: LD_INT 0
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 1
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 1
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: LD_INT 1
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 1
68761: NEG
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 1
68773: NEG
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: LD_INT 2
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 1
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 2
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 1
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: LD_INT 2
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: NEG
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 2
68858: NEG
68859: PUSH
68860: LD_INT 1
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 2
68870: NEG
68871: PUSH
68872: LD_INT 2
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 2
68882: NEG
68883: PUSH
68884: LD_INT 3
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: LD_INT 1
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 1
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: LD_INT 2
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 3
68936: NEG
68937: PUSH
68938: LD_INT 2
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68971: LD_ADDR_VAR 0 30
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: LD_INT 1
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 1
69040: NEG
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 1
69052: NEG
69053: PUSH
69054: LD_INT 2
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: LD_INT 2
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 1
69075: PUSH
69076: LD_INT 1
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 2
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 2
69106: PUSH
69107: LD_INT 2
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 1
69126: NEG
69127: PUSH
69128: LD_INT 1
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: NEG
69138: PUSH
69139: LD_INT 0
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 2
69148: NEG
69149: PUSH
69150: LD_INT 1
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 1
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 3
69183: PUSH
69184: LD_INT 2
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: LD_INT 3
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 2
69203: NEG
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 3
69214: NEG
69215: PUSH
69216: LD_INT 1
69218: NEG
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69249: LD_ADDR_VAR 0 31
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: LD_INT 0
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 1
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 1
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 0
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: LD_INT 1
69322: NEG
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 1
69330: NEG
69331: PUSH
69332: LD_INT 2
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: LD_INT 1
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 2
69353: PUSH
69354: LD_INT 0
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 2
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 1
69383: PUSH
69384: LD_INT 2
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: LD_INT 1
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 2
69414: NEG
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: NEG
69427: PUSH
69428: LD_INT 2
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 2
69438: NEG
69439: PUSH
69440: LD_INT 3
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 2
69450: PUSH
69451: LD_INT 1
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 3
69461: PUSH
69462: LD_INT 1
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: LD_INT 3
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: PUSH
69483: LD_INT 2
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 3
69492: NEG
69493: PUSH
69494: LD_INT 2
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69527: LD_ADDR_VAR 0 32
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: LD_INT 1
69547: NEG
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 1
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: LD_INT 1
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: LD_INT 1
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 1
69585: NEG
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: NEG
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 1
69608: NEG
69609: PUSH
69610: LD_INT 2
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: LD_INT 2
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 1
69631: PUSH
69632: LD_INT 1
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 2
69642: PUSH
69643: LD_INT 1
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: LD_INT 2
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: LD_INT 2
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: LD_INT 2
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: NEG
69683: PUSH
69684: LD_INT 1
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 2
69693: NEG
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 2
69704: NEG
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 1
69716: NEG
69717: PUSH
69718: LD_INT 3
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 1
69728: PUSH
69729: LD_INT 2
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 3
69739: PUSH
69740: LD_INT 2
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 2
69749: PUSH
69750: LD_INT 3
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 3
69770: NEG
69771: PUSH
69772: LD_INT 1
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69805: LD_ADDR_VAR 0 33
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 0
69822: PUSH
69823: LD_INT 1
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 1
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 1
69843: PUSH
69844: LD_INT 1
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 1
69863: NEG
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 1
69874: NEG
69875: PUSH
69876: LD_INT 1
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: LD_INT 2
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 1
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 1
69929: PUSH
69930: LD_INT 2
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 0
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 2
69971: NEG
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 2
69983: NEG
69984: PUSH
69985: LD_INT 2
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 2
69995: NEG
69996: PUSH
69997: LD_INT 3
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 3
70018: PUSH
70019: LD_INT 1
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 1
70028: PUSH
70029: LD_INT 3
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 1
70038: NEG
70039: PUSH
70040: LD_INT 2
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 3
70049: NEG
70050: PUSH
70051: LD_INT 2
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70084: LD_ADDR_VAR 0 34
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: LD_INT 1
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: NEG
70154: PUSH
70155: LD_INT 1
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 1
70165: NEG
70166: PUSH
70167: LD_INT 2
70169: NEG
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 0
70177: PUSH
70178: LD_INT 2
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 1
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 2
70199: PUSH
70200: LD_INT 1
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: LD_INT 2
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 1
70219: PUSH
70220: LD_INT 2
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 1
70229: NEG
70230: PUSH
70231: LD_INT 1
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 2
70240: NEG
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 2
70251: NEG
70252: PUSH
70253: LD_INT 1
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: NEG
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 1
70275: NEG
70276: PUSH
70277: LD_INT 3
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 1
70287: PUSH
70288: LD_INT 2
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: LD_INT 2
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: LD_INT 3
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 2
70318: NEG
70319: PUSH
70320: LD_INT 1
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 3
70329: NEG
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70364: LD_ADDR_VAR 0 35
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: LD_INT 1
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_INT 1
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: NEG
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 1
70433: NEG
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 2
70445: PUSH
70446: LD_INT 1
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70476: LD_ADDR_VAR 0 36
70480: PUSH
70481: LD_INT 0
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 1
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 1
70514: PUSH
70515: LD_INT 1
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: LD_INT 1
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 1
70545: NEG
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: NEG
70558: PUSH
70559: LD_INT 2
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70588: LD_ADDR_VAR 0 37
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 1
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 1
70626: PUSH
70627: LD_INT 1
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: LD_INT 1
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 1
70646: NEG
70647: PUSH
70648: LD_INT 0
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: LD_INT 1
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 1
70680: NEG
70681: PUSH
70682: LD_INT 1
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70700: LD_ADDR_VAR 0 38
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 1
70728: PUSH
70729: LD_INT 0
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 1
70738: PUSH
70739: LD_INT 1
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: LD_INT 1
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 1
70758: NEG
70759: PUSH
70760: LD_INT 0
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 1
70769: NEG
70770: PUSH
70771: LD_INT 1
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 2
70781: PUSH
70782: LD_INT 1
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: NEG
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70812: LD_ADDR_VAR 0 39
70816: PUSH
70817: LD_INT 0
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 0
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 1
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 1
70850: PUSH
70851: LD_INT 1
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: LD_INT 1
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 1
70870: NEG
70871: PUSH
70872: LD_INT 0
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 1
70881: NEG
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 1
70893: NEG
70894: PUSH
70895: LD_INT 2
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 1
70905: PUSH
70906: LD_INT 2
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70924: LD_ADDR_VAR 0 40
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 1
70962: PUSH
70963: LD_INT 1
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 0
70972: PUSH
70973: LD_INT 1
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 1
70982: NEG
70983: PUSH
70984: LD_INT 0
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 1
70993: NEG
70994: PUSH
70995: LD_INT 1
70997: NEG
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: LD_INT 1
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71036: LD_ADDR_VAR 0 41
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 0
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 1
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: LD_INT 1
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: LD_INT 1
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 1
71094: NEG
71095: PUSH
71096: LD_INT 0
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 1
71105: NEG
71106: PUSH
71107: LD_INT 1
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 1
71117: NEG
71118: PUSH
71119: LD_INT 2
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 1
71129: PUSH
71130: LD_INT 1
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 2
71140: PUSH
71141: LD_INT 0
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 2
71150: PUSH
71151: LD_INT 1
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 2
71160: PUSH
71161: LD_INT 2
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: LD_INT 2
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 1
71180: NEG
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 2
71191: NEG
71192: PUSH
71193: LD_INT 0
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 2
71202: NEG
71203: PUSH
71204: LD_INT 1
71206: NEG
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 2
71214: NEG
71215: PUSH
71216: LD_INT 2
71218: NEG
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 2
71226: NEG
71227: PUSH
71228: LD_INT 3
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 3
71249: PUSH
71250: LD_INT 0
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: LD_INT 1
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 3
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 3
71279: PUSH
71280: LD_INT 3
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: PUSH
71290: LD_INT 3
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 2
71299: NEG
71300: PUSH
71301: LD_INT 1
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 3
71310: NEG
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 3
71321: NEG
71322: PUSH
71323: LD_INT 1
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 3
71333: NEG
71334: PUSH
71335: LD_INT 2
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 3
71345: NEG
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71386: LD_ADDR_VAR 0 42
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: LD_INT 0
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: LD_INT 1
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 1
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: LD_INT 1
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 0
71434: PUSH
71435: LD_INT 1
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 1
71444: NEG
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 1
71455: NEG
71456: PUSH
71457: LD_INT 1
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 1
71467: NEG
71468: PUSH
71469: LD_INT 2
71471: NEG
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 0
71479: PUSH
71480: LD_INT 2
71482: NEG
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 1
71490: PUSH
71491: LD_INT 1
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 2
71501: PUSH
71502: LD_INT 1
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 2
71511: PUSH
71512: LD_INT 2
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 1
71521: PUSH
71522: LD_INT 2
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 0
71531: PUSH
71532: LD_INT 2
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 1
71541: NEG
71542: PUSH
71543: LD_INT 1
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 2
71552: NEG
71553: PUSH
71554: LD_INT 1
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 2
71564: NEG
71565: PUSH
71566: LD_INT 2
71568: NEG
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 2
71576: NEG
71577: PUSH
71578: LD_INT 3
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 1
71588: NEG
71589: PUSH
71590: LD_INT 3
71592: NEG
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 0
71600: PUSH
71601: LD_INT 3
71603: NEG
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 1
71611: PUSH
71612: LD_INT 2
71614: NEG
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 3
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 3
71632: PUSH
71633: LD_INT 3
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 2
71642: PUSH
71643: LD_INT 3
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: LD_INT 3
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 0
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 1
71672: NEG
71673: PUSH
71674: LD_INT 2
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 3
71683: NEG
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 3
71695: NEG
71696: PUSH
71697: LD_INT 3
71699: NEG
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71736: LD_ADDR_VAR 0 43
71740: PUSH
71741: LD_INT 0
71743: PUSH
71744: LD_INT 0
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: LD_INT 1
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 1
71764: PUSH
71765: LD_INT 0
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 1
71774: PUSH
71775: LD_INT 1
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 0
71784: PUSH
71785: LD_INT 1
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 1
71794: NEG
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 1
71805: NEG
71806: PUSH
71807: LD_INT 1
71809: NEG
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 1
71817: NEG
71818: PUSH
71819: LD_INT 2
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 0
71829: PUSH
71830: LD_INT 2
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 1
71840: PUSH
71841: LD_INT 1
71843: NEG
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 2
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 2
71861: PUSH
71862: LD_INT 1
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 1
71871: PUSH
71872: LD_INT 2
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: LD_INT 2
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 1
71891: NEG
71892: PUSH
71893: LD_INT 1
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 2
71902: NEG
71903: PUSH
71904: LD_INT 0
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 2
71913: NEG
71914: PUSH
71915: LD_INT 1
71917: NEG
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 1
71925: NEG
71926: PUSH
71927: LD_INT 3
71929: NEG
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 0
71937: PUSH
71938: LD_INT 3
71940: NEG
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 1
71948: PUSH
71949: LD_INT 2
71951: NEG
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 2
71959: PUSH
71960: LD_INT 1
71962: NEG
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 3
71970: PUSH
71971: LD_INT 0
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 3
71980: PUSH
71981: LD_INT 1
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 1
71990: PUSH
71991: LD_INT 3
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: LD_INT 3
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 1
72010: NEG
72011: PUSH
72012: LD_INT 2
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 2
72021: NEG
72022: PUSH
72023: LD_INT 1
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 3
72032: NEG
72033: PUSH
72034: LD_INT 0
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 3
72043: NEG
72044: PUSH
72045: LD_INT 1
72047: NEG
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72084: LD_ADDR_VAR 0 44
72088: PUSH
72089: LD_INT 0
72091: PUSH
72092: LD_INT 0
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: LD_INT 1
72104: NEG
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 1
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 1
72122: PUSH
72123: LD_INT 1
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: LD_INT 1
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 1
72142: NEG
72143: PUSH
72144: LD_INT 0
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 1
72153: NEG
72154: PUSH
72155: LD_INT 1
72157: NEG
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 1
72165: NEG
72166: PUSH
72167: LD_INT 2
72169: NEG
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 1
72177: PUSH
72178: LD_INT 1
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 2
72188: PUSH
72189: LD_INT 0
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 2
72198: PUSH
72199: LD_INT 1
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 2
72208: PUSH
72209: LD_INT 2
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 1
72218: PUSH
72219: LD_INT 2
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 1
72228: NEG
72229: PUSH
72230: LD_INT 1
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 2
72239: NEG
72240: PUSH
72241: LD_INT 0
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 2
72250: NEG
72251: PUSH
72252: LD_INT 1
72254: NEG
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 2
72262: NEG
72263: PUSH
72264: LD_INT 2
72266: NEG
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 2
72274: NEG
72275: PUSH
72276: LD_INT 3
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 2
72286: PUSH
72287: LD_INT 1
72289: NEG
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 3
72297: PUSH
72298: LD_INT 0
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 3
72307: PUSH
72308: LD_INT 1
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 3
72317: PUSH
72318: LD_INT 2
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 3
72327: PUSH
72328: LD_INT 3
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: LD_INT 3
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 2
72347: NEG
72348: PUSH
72349: LD_INT 1
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 3
72358: NEG
72359: PUSH
72360: LD_INT 0
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 3
72369: NEG
72370: PUSH
72371: LD_INT 1
72373: NEG
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 3
72381: NEG
72382: PUSH
72383: LD_INT 2
72385: NEG
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 3
72393: NEG
72394: PUSH
72395: LD_INT 3
72397: NEG
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72434: LD_ADDR_VAR 0 45
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 0
72451: PUSH
72452: LD_INT 1
72454: NEG
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 1
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 1
72472: PUSH
72473: LD_INT 1
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 0
72482: PUSH
72483: LD_INT 1
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 1
72492: NEG
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 1
72503: NEG
72504: PUSH
72505: LD_INT 1
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 1
72515: NEG
72516: PUSH
72517: LD_INT 2
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 0
72527: PUSH
72528: LD_INT 2
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 1
72538: PUSH
72539: LD_INT 1
72541: NEG
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 2
72549: PUSH
72550: LD_INT 1
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 2
72559: PUSH
72560: LD_INT 2
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 1
72569: PUSH
72570: LD_INT 2
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 0
72579: PUSH
72580: LD_INT 2
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 1
72589: NEG
72590: PUSH
72591: LD_INT 1
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 2
72600: NEG
72601: PUSH
72602: LD_INT 1
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 2
72612: NEG
72613: PUSH
72614: LD_INT 2
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 2
72624: NEG
72625: PUSH
72626: LD_INT 3
72628: NEG
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 1
72636: NEG
72637: PUSH
72638: LD_INT 3
72640: NEG
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: LD_INT 3
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 1
72659: PUSH
72660: LD_INT 2
72662: NEG
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 3
72670: PUSH
72671: LD_INT 2
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: LD_INT 3
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: LD_INT 3
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: LD_INT 1
72700: PUSH
72701: LD_INT 3
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 0
72710: PUSH
72711: LD_INT 3
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 1
72720: NEG
72721: PUSH
72722: LD_INT 2
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 3
72731: NEG
72732: PUSH
72733: LD_INT 2
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 3
72743: NEG
72744: PUSH
72745: LD_INT 3
72747: NEG
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72784: LD_ADDR_VAR 0 46
72788: PUSH
72789: LD_INT 0
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 0
72801: PUSH
72802: LD_INT 1
72804: NEG
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 1
72812: PUSH
72813: LD_INT 0
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 1
72822: PUSH
72823: LD_INT 1
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 0
72832: PUSH
72833: LD_INT 1
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 1
72842: NEG
72843: PUSH
72844: LD_INT 0
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 1
72853: NEG
72854: PUSH
72855: LD_INT 1
72857: NEG
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 1
72865: NEG
72866: PUSH
72867: LD_INT 2
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 0
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 1
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 2
72899: PUSH
72900: LD_INT 0
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 2
72909: PUSH
72910: LD_INT 1
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 1
72919: PUSH
72920: LD_INT 2
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: LD_INT 2
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 2
72950: NEG
72951: PUSH
72952: LD_INT 0
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 2
72961: NEG
72962: PUSH
72963: LD_INT 1
72965: NEG
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 1
72973: NEG
72974: PUSH
72975: LD_INT 3
72977: NEG
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 0
72985: PUSH
72986: LD_INT 3
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 1
72996: PUSH
72997: LD_INT 2
72999: NEG
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 2
73007: PUSH
73008: LD_INT 1
73010: NEG
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 3
73018: PUSH
73019: LD_INT 0
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 3
73028: PUSH
73029: LD_INT 1
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 1
73038: PUSH
73039: LD_INT 3
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 0
73048: PUSH
73049: LD_INT 3
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: PUSH
73056: LD_INT 1
73058: NEG
73059: PUSH
73060: LD_INT 2
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 2
73069: NEG
73070: PUSH
73071: LD_INT 1
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 3
73080: NEG
73081: PUSH
73082: LD_INT 0
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 3
73091: NEG
73092: PUSH
73093: LD_INT 1
73095: NEG
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73132: LD_ADDR_VAR 0 47
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: LD_INT 0
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 0
73149: PUSH
73150: LD_INT 1
73152: NEG
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 1
73160: PUSH
73161: LD_INT 0
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 1
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 0
73180: PUSH
73181: LD_INT 1
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 1
73190: NEG
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 1
73201: NEG
73202: PUSH
73203: LD_INT 1
73205: NEG
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 1
73213: NEG
73214: PUSH
73215: LD_INT 2
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 0
73225: PUSH
73226: LD_INT 2
73228: NEG
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 1
73236: PUSH
73237: LD_INT 1
73239: NEG
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 2
73247: NEG
73248: PUSH
73249: LD_INT 1
73251: NEG
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 2
73259: NEG
73260: PUSH
73261: LD_INT 2
73263: NEG
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73283: LD_ADDR_VAR 0 48
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 0
73300: PUSH
73301: LD_INT 1
73303: NEG
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 1
73311: PUSH
73312: LD_INT 0
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 1
73321: PUSH
73322: LD_INT 1
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_INT 0
73331: PUSH
73332: LD_INT 1
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 1
73341: NEG
73342: PUSH
73343: LD_INT 0
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 1
73352: NEG
73353: PUSH
73354: LD_INT 1
73356: NEG
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 1
73364: NEG
73365: PUSH
73366: LD_INT 2
73368: NEG
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 0
73376: PUSH
73377: LD_INT 2
73379: NEG
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 1
73387: PUSH
73388: LD_INT 1
73390: NEG
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 2
73398: PUSH
73399: LD_INT 0
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 2
73408: PUSH
73409: LD_INT 1
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73430: LD_ADDR_VAR 0 49
73434: PUSH
73435: LD_INT 0
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 0
73447: PUSH
73448: LD_INT 1
73450: NEG
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 1
73458: PUSH
73459: LD_INT 0
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 1
73468: PUSH
73469: LD_INT 1
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 0
73478: PUSH
73479: LD_INT 1
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 1
73488: NEG
73489: PUSH
73490: LD_INT 0
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 1
73499: NEG
73500: PUSH
73501: LD_INT 1
73503: NEG
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 1
73511: PUSH
73512: LD_INT 1
73514: NEG
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 2
73522: PUSH
73523: LD_INT 0
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_INT 2
73532: PUSH
73533: LD_INT 1
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 2
73542: PUSH
73543: LD_INT 2
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 1
73552: PUSH
73553: LD_INT 2
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73574: LD_ADDR_VAR 0 50
73578: PUSH
73579: LD_INT 0
73581: PUSH
73582: LD_INT 0
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 0
73591: PUSH
73592: LD_INT 1
73594: NEG
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 1
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 1
73612: PUSH
73613: LD_INT 1
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: LD_INT 1
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: PUSH
73630: LD_INT 1
73632: NEG
73633: PUSH
73634: LD_INT 0
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 1
73643: NEG
73644: PUSH
73645: LD_INT 1
73647: NEG
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 2
73655: PUSH
73656: LD_INT 1
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PUSH
73663: LD_INT 2
73665: PUSH
73666: LD_INT 2
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 1
73675: PUSH
73676: LD_INT 2
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 0
73685: PUSH
73686: LD_INT 2
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 1
73695: NEG
73696: PUSH
73697: LD_INT 1
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73718: LD_ADDR_VAR 0 51
73722: PUSH
73723: LD_INT 0
73725: PUSH
73726: LD_INT 0
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 0
73735: PUSH
73736: LD_INT 1
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 1
73746: PUSH
73747: LD_INT 0
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 1
73756: PUSH
73757: LD_INT 1
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: LD_INT 1
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 1
73776: NEG
73777: PUSH
73778: LD_INT 0
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 1
73787: NEG
73788: PUSH
73789: LD_INT 1
73791: NEG
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 1
73799: PUSH
73800: LD_INT 2
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 0
73809: PUSH
73810: LD_INT 2
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 1
73819: NEG
73820: PUSH
73821: LD_INT 1
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: LD_INT 2
73830: NEG
73831: PUSH
73832: LD_INT 0
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 2
73841: NEG
73842: PUSH
73843: LD_INT 1
73845: NEG
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73865: LD_ADDR_VAR 0 52
73869: PUSH
73870: LD_INT 0
73872: PUSH
73873: LD_INT 0
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 0
73882: PUSH
73883: LD_INT 1
73885: NEG
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PUSH
73891: LD_INT 1
73893: PUSH
73894: LD_INT 0
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 1
73903: PUSH
73904: LD_INT 1
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 0
73913: PUSH
73914: LD_INT 1
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 1
73923: NEG
73924: PUSH
73925: LD_INT 0
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 1
73934: NEG
73935: PUSH
73936: LD_INT 1
73938: NEG
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 1
73946: NEG
73947: PUSH
73948: LD_INT 2
73950: NEG
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 1
73958: NEG
73959: PUSH
73960: LD_INT 1
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: LD_INT 2
73969: NEG
73970: PUSH
73971: LD_INT 0
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 2
73980: NEG
73981: PUSH
73982: LD_INT 1
73984: NEG
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 2
73992: NEG
73993: PUSH
73994: LD_INT 2
73996: NEG
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74016: LD_ADDR_VAR 0 53
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: LD_INT 0
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 0
74033: PUSH
74034: LD_INT 1
74036: NEG
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 1
74044: PUSH
74045: LD_INT 0
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PUSH
74052: LD_INT 1
74054: PUSH
74055: LD_INT 1
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 0
74064: PUSH
74065: LD_INT 1
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 1
74074: NEG
74075: PUSH
74076: LD_INT 0
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 1
74085: NEG
74086: PUSH
74087: LD_INT 1
74089: NEG
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: LD_INT 2
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: LD_INT 2
74112: NEG
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 1
74120: PUSH
74121: LD_INT 1
74123: NEG
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 2
74131: PUSH
74132: LD_INT 0
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 2
74141: PUSH
74142: LD_INT 1
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 2
74151: PUSH
74152: LD_INT 2
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 1
74161: PUSH
74162: LD_INT 2
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 0
74171: PUSH
74172: LD_INT 2
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 1
74181: NEG
74182: PUSH
74183: LD_INT 1
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 2
74192: NEG
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 2
74203: NEG
74204: PUSH
74205: LD_INT 1
74207: NEG
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 2
74215: NEG
74216: PUSH
74217: LD_INT 2
74219: NEG
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74246: LD_ADDR_VAR 0 54
74250: PUSH
74251: LD_INT 0
74253: PUSH
74254: LD_INT 0
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: PUSH
74261: LD_INT 0
74263: PUSH
74264: LD_INT 1
74266: NEG
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PUSH
74272: LD_INT 1
74274: PUSH
74275: LD_INT 0
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PUSH
74282: LD_INT 1
74284: PUSH
74285: LD_INT 1
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 0
74294: PUSH
74295: LD_INT 1
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 1
74304: NEG
74305: PUSH
74306: LD_INT 0
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 1
74315: NEG
74316: PUSH
74317: LD_INT 1
74319: NEG
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 1
74327: NEG
74328: PUSH
74329: LD_INT 2
74331: NEG
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 0
74339: PUSH
74340: LD_INT 2
74342: NEG
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 1
74350: PUSH
74351: LD_INT 1
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 2
74361: PUSH
74362: LD_INT 0
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 2
74371: PUSH
74372: LD_INT 1
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 2
74381: PUSH
74382: LD_INT 2
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 1
74391: PUSH
74392: LD_INT 2
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 0
74401: PUSH
74402: LD_INT 2
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: PUSH
74409: LD_INT 1
74411: NEG
74412: PUSH
74413: LD_INT 1
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 2
74422: NEG
74423: PUSH
74424: LD_INT 0
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 2
74433: NEG
74434: PUSH
74435: LD_INT 1
74437: NEG
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: LD_INT 2
74445: NEG
74446: PUSH
74447: LD_INT 2
74449: NEG
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74476: LD_ADDR_VAR 0 55
74480: PUSH
74481: LD_INT 0
74483: PUSH
74484: LD_INT 0
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PUSH
74491: LD_INT 0
74493: PUSH
74494: LD_INT 1
74496: NEG
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 1
74504: PUSH
74505: LD_INT 0
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 1
74514: PUSH
74515: LD_INT 1
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 0
74524: PUSH
74525: LD_INT 1
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: LD_INT 1
74534: NEG
74535: PUSH
74536: LD_INT 0
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PUSH
74543: LD_INT 1
74545: NEG
74546: PUSH
74547: LD_INT 1
74549: NEG
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 1
74557: NEG
74558: PUSH
74559: LD_INT 2
74561: NEG
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 0
74569: PUSH
74570: LD_INT 2
74572: NEG
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 1
74580: PUSH
74581: LD_INT 1
74583: NEG
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 2
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 2
74601: PUSH
74602: LD_INT 1
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 2
74611: PUSH
74612: LD_INT 2
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 1
74621: PUSH
74622: LD_INT 2
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 0
74631: PUSH
74632: LD_INT 2
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 1
74641: NEG
74642: PUSH
74643: LD_INT 1
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 2
74652: NEG
74653: PUSH
74654: LD_INT 0
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PUSH
74661: LD_INT 2
74663: NEG
74664: PUSH
74665: LD_INT 1
74667: NEG
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: PUSH
74673: LD_INT 2
74675: NEG
74676: PUSH
74677: LD_INT 2
74679: NEG
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74706: LD_ADDR_VAR 0 56
74710: PUSH
74711: LD_INT 0
74713: PUSH
74714: LD_INT 0
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: LD_INT 1
74726: NEG
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 1
74734: PUSH
74735: LD_INT 0
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: PUSH
74742: LD_INT 1
74744: PUSH
74745: LD_INT 1
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: PUSH
74752: LD_INT 0
74754: PUSH
74755: LD_INT 1
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PUSH
74762: LD_INT 1
74764: NEG
74765: PUSH
74766: LD_INT 0
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: PUSH
74773: LD_INT 1
74775: NEG
74776: PUSH
74777: LD_INT 1
74779: NEG
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_INT 1
74787: NEG
74788: PUSH
74789: LD_INT 2
74791: NEG
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PUSH
74797: LD_INT 0
74799: PUSH
74800: LD_INT 2
74802: NEG
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PUSH
74808: LD_INT 1
74810: PUSH
74811: LD_INT 1
74813: NEG
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 2
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PUSH
74829: LD_INT 2
74831: PUSH
74832: LD_INT 1
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: PUSH
74839: LD_INT 2
74841: PUSH
74842: LD_INT 2
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 1
74851: PUSH
74852: LD_INT 2
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 0
74861: PUSH
74862: LD_INT 2
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 1
74871: NEG
74872: PUSH
74873: LD_INT 1
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_INT 2
74882: NEG
74883: PUSH
74884: LD_INT 0
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: LD_INT 2
74893: NEG
74894: PUSH
74895: LD_INT 1
74897: NEG
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 2
74905: NEG
74906: PUSH
74907: LD_INT 2
74909: NEG
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74936: LD_ADDR_VAR 0 57
74940: PUSH
74941: LD_INT 0
74943: PUSH
74944: LD_INT 0
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_INT 0
74953: PUSH
74954: LD_INT 1
74956: NEG
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: LD_INT 0
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PUSH
74972: LD_INT 1
74974: PUSH
74975: LD_INT 1
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: LD_INT 1
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 1
74994: NEG
74995: PUSH
74996: LD_INT 0
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_INT 1
75005: NEG
75006: PUSH
75007: LD_INT 1
75009: NEG
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: LD_INT 1
75017: NEG
75018: PUSH
75019: LD_INT 2
75021: NEG
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PUSH
75027: LD_INT 0
75029: PUSH
75030: LD_INT 2
75032: NEG
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 1
75040: PUSH
75041: LD_INT 1
75043: NEG
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 2
75051: PUSH
75052: LD_INT 0
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: LD_INT 2
75061: PUSH
75062: LD_INT 1
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: PUSH
75069: LD_INT 2
75071: PUSH
75072: LD_INT 2
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 1
75081: PUSH
75082: LD_INT 2
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 0
75091: PUSH
75092: LD_INT 2
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 1
75101: NEG
75102: PUSH
75103: LD_INT 1
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 2
75112: NEG
75113: PUSH
75114: LD_INT 0
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 2
75123: NEG
75124: PUSH
75125: LD_INT 1
75127: NEG
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: LD_INT 2
75135: NEG
75136: PUSH
75137: LD_INT 2
75139: NEG
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: LIST
75157: LIST
75158: LIST
75159: LIST
75160: LIST
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75166: LD_ADDR_VAR 0 58
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: LD_INT 0
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 0
75183: PUSH
75184: LD_INT 1
75186: NEG
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 1
75194: PUSH
75195: LD_INT 0
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 1
75204: PUSH
75205: LD_INT 1
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_INT 0
75214: PUSH
75215: LD_INT 1
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 1
75224: NEG
75225: PUSH
75226: LD_INT 0
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 1
75235: NEG
75236: PUSH
75237: LD_INT 1
75239: NEG
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 1
75247: NEG
75248: PUSH
75249: LD_INT 2
75251: NEG
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PUSH
75257: LD_INT 0
75259: PUSH
75260: LD_INT 2
75262: NEG
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: PUSH
75268: LD_INT 1
75270: PUSH
75271: LD_INT 1
75273: NEG
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: PUSH
75279: LD_INT 2
75281: PUSH
75282: LD_INT 0
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 2
75291: PUSH
75292: LD_INT 1
75294: PUSH
75295: EMPTY
75296: LIST
75297: LIST
75298: PUSH
75299: LD_INT 2
75301: PUSH
75302: LD_INT 2
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 1
75311: PUSH
75312: LD_INT 2
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 0
75321: PUSH
75322: LD_INT 2
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: LD_INT 1
75331: NEG
75332: PUSH
75333: LD_INT 1
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 2
75342: NEG
75343: PUSH
75344: LD_INT 0
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: PUSH
75351: LD_INT 2
75353: NEG
75354: PUSH
75355: LD_INT 1
75357: NEG
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 2
75365: NEG
75366: PUSH
75367: LD_INT 2
75369: NEG
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75396: LD_ADDR_VAR 0 59
75400: PUSH
75401: LD_INT 0
75403: PUSH
75404: LD_INT 0
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 0
75413: PUSH
75414: LD_INT 1
75416: NEG
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: PUSH
75422: LD_INT 1
75424: PUSH
75425: LD_INT 0
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: LD_INT 1
75434: PUSH
75435: LD_INT 1
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PUSH
75442: LD_INT 0
75444: PUSH
75445: LD_INT 1
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_INT 1
75454: NEG
75455: PUSH
75456: LD_INT 0
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: LD_INT 1
75465: NEG
75466: PUSH
75467: LD_INT 1
75469: NEG
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75484: LD_ADDR_VAR 0 60
75488: PUSH
75489: LD_INT 0
75491: PUSH
75492: LD_INT 0
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: LD_INT 0
75501: PUSH
75502: LD_INT 1
75504: NEG
75505: PUSH
75506: EMPTY
75507: LIST
75508: LIST
75509: PUSH
75510: LD_INT 1
75512: PUSH
75513: LD_INT 0
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: PUSH
75520: LD_INT 1
75522: PUSH
75523: LD_INT 1
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: PUSH
75530: LD_INT 0
75532: PUSH
75533: LD_INT 1
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 1
75542: NEG
75543: PUSH
75544: LD_INT 0
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: LD_INT 1
75553: NEG
75554: PUSH
75555: LD_INT 1
75557: NEG
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75572: LD_ADDR_VAR 0 61
75576: PUSH
75577: LD_INT 0
75579: PUSH
75580: LD_INT 0
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PUSH
75587: LD_INT 0
75589: PUSH
75590: LD_INT 1
75592: NEG
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: PUSH
75598: LD_INT 1
75600: PUSH
75601: LD_INT 0
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: PUSH
75608: LD_INT 1
75610: PUSH
75611: LD_INT 1
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: LD_INT 0
75620: PUSH
75621: LD_INT 1
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 1
75630: NEG
75631: PUSH
75632: LD_INT 0
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 1
75641: NEG
75642: PUSH
75643: LD_INT 1
75645: NEG
75646: PUSH
75647: EMPTY
75648: LIST
75649: LIST
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75660: LD_ADDR_VAR 0 62
75664: PUSH
75665: LD_INT 0
75667: PUSH
75668: LD_INT 0
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: LD_INT 0
75677: PUSH
75678: LD_INT 1
75680: NEG
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: LD_INT 1
75688: PUSH
75689: LD_INT 0
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: LD_INT 1
75698: PUSH
75699: LD_INT 1
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 0
75708: PUSH
75709: LD_INT 1
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PUSH
75716: LD_INT 1
75718: NEG
75719: PUSH
75720: LD_INT 0
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: LD_INT 1
75729: NEG
75730: PUSH
75731: LD_INT 1
75733: NEG
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75748: LD_ADDR_VAR 0 63
75752: PUSH
75753: LD_INT 0
75755: PUSH
75756: LD_INT 0
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 0
75765: PUSH
75766: LD_INT 1
75768: NEG
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: PUSH
75774: LD_INT 1
75776: PUSH
75777: LD_INT 0
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 1
75786: PUSH
75787: LD_INT 1
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 0
75796: PUSH
75797: LD_INT 1
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 1
75806: NEG
75807: PUSH
75808: LD_INT 0
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 1
75817: NEG
75818: PUSH
75819: LD_INT 1
75821: NEG
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75836: LD_ADDR_VAR 0 64
75840: PUSH
75841: LD_INT 0
75843: PUSH
75844: LD_INT 0
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 0
75853: PUSH
75854: LD_INT 1
75856: NEG
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: LD_INT 1
75864: PUSH
75865: LD_INT 0
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: PUSH
75872: LD_INT 1
75874: PUSH
75875: LD_INT 1
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 0
75884: PUSH
75885: LD_INT 1
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: LD_INT 1
75894: NEG
75895: PUSH
75896: LD_INT 0
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: LD_INT 1
75905: NEG
75906: PUSH
75907: LD_INT 1
75909: NEG
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: ST_TO_ADDR
// end ; 1 :
75924: GO 81821
75926: LD_INT 1
75928: DOUBLE
75929: EQUAL
75930: IFTRUE 75934
75932: GO 78557
75934: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75935: LD_ADDR_VAR 0 11
75939: PUSH
75940: LD_INT 1
75942: NEG
75943: PUSH
75944: LD_INT 3
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 0
75954: PUSH
75955: LD_INT 3
75957: NEG
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 1
75965: PUSH
75966: LD_INT 2
75968: NEG
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: LIST
75978: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75979: LD_ADDR_VAR 0 12
75983: PUSH
75984: LD_INT 2
75986: PUSH
75987: LD_INT 1
75989: NEG
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: LD_INT 3
75997: PUSH
75998: LD_INT 0
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_INT 3
76007: PUSH
76008: LD_INT 1
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: LIST
76019: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76020: LD_ADDR_VAR 0 13
76024: PUSH
76025: LD_INT 3
76027: PUSH
76028: LD_INT 2
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: PUSH
76035: LD_INT 3
76037: PUSH
76038: LD_INT 3
76040: PUSH
76041: EMPTY
76042: LIST
76043: LIST
76044: PUSH
76045: LD_INT 2
76047: PUSH
76048: LD_INT 3
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: LIST
76059: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76060: LD_ADDR_VAR 0 14
76064: PUSH
76065: LD_INT 1
76067: PUSH
76068: LD_INT 3
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 0
76077: PUSH
76078: LD_INT 3
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 1
76087: NEG
76088: PUSH
76089: LD_INT 2
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: LIST
76100: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76101: LD_ADDR_VAR 0 15
76105: PUSH
76106: LD_INT 2
76108: NEG
76109: PUSH
76110: LD_INT 1
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: PUSH
76117: LD_INT 3
76119: NEG
76120: PUSH
76121: LD_INT 0
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PUSH
76128: LD_INT 3
76130: NEG
76131: PUSH
76132: LD_INT 1
76134: NEG
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: LIST
76144: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76145: LD_ADDR_VAR 0 16
76149: PUSH
76150: LD_INT 2
76152: NEG
76153: PUSH
76154: LD_INT 3
76156: NEG
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: PUSH
76162: LD_INT 3
76164: NEG
76165: PUSH
76166: LD_INT 2
76168: NEG
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 3
76176: NEG
76177: PUSH
76178: LD_INT 3
76180: NEG
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76191: LD_ADDR_VAR 0 17
76195: PUSH
76196: LD_INT 1
76198: NEG
76199: PUSH
76200: LD_INT 3
76202: NEG
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PUSH
76208: LD_INT 0
76210: PUSH
76211: LD_INT 3
76213: NEG
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 1
76221: PUSH
76222: LD_INT 2
76224: NEG
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: LIST
76234: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76235: LD_ADDR_VAR 0 18
76239: PUSH
76240: LD_INT 2
76242: PUSH
76243: LD_INT 1
76245: NEG
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 3
76253: PUSH
76254: LD_INT 0
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 3
76263: PUSH
76264: LD_INT 1
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: LIST
76275: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76276: LD_ADDR_VAR 0 19
76280: PUSH
76281: LD_INT 3
76283: PUSH
76284: LD_INT 2
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 3
76293: PUSH
76294: LD_INT 3
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 2
76303: PUSH
76304: LD_INT 3
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: LIST
76315: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76316: LD_ADDR_VAR 0 20
76320: PUSH
76321: LD_INT 1
76323: PUSH
76324: LD_INT 3
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 0
76333: PUSH
76334: LD_INT 3
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 1
76343: NEG
76344: PUSH
76345: LD_INT 2
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: LIST
76356: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76357: LD_ADDR_VAR 0 21
76361: PUSH
76362: LD_INT 2
76364: NEG
76365: PUSH
76366: LD_INT 1
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 3
76375: NEG
76376: PUSH
76377: LD_INT 0
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: LD_INT 3
76386: NEG
76387: PUSH
76388: LD_INT 1
76390: NEG
76391: PUSH
76392: EMPTY
76393: LIST
76394: LIST
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76401: LD_ADDR_VAR 0 22
76405: PUSH
76406: LD_INT 2
76408: NEG
76409: PUSH
76410: LD_INT 3
76412: NEG
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: LD_INT 3
76420: NEG
76421: PUSH
76422: LD_INT 2
76424: NEG
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 3
76432: NEG
76433: PUSH
76434: LD_INT 3
76436: NEG
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: LIST
76446: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76447: LD_ADDR_VAR 0 23
76451: PUSH
76452: LD_INT 0
76454: PUSH
76455: LD_INT 3
76457: NEG
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: PUSH
76463: LD_INT 1
76465: NEG
76466: PUSH
76467: LD_INT 4
76469: NEG
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: PUSH
76475: LD_INT 1
76477: PUSH
76478: LD_INT 3
76480: NEG
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: LIST
76490: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76491: LD_ADDR_VAR 0 24
76495: PUSH
76496: LD_INT 3
76498: PUSH
76499: LD_INT 0
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 3
76508: PUSH
76509: LD_INT 1
76511: NEG
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: PUSH
76517: LD_INT 4
76519: PUSH
76520: LD_INT 1
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: LIST
76531: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76532: LD_ADDR_VAR 0 25
76536: PUSH
76537: LD_INT 3
76539: PUSH
76540: LD_INT 3
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: PUSH
76547: LD_INT 4
76549: PUSH
76550: LD_INT 3
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 3
76559: PUSH
76560: LD_INT 4
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: LIST
76571: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76572: LD_ADDR_VAR 0 26
76576: PUSH
76577: LD_INT 0
76579: PUSH
76580: LD_INT 3
76582: PUSH
76583: EMPTY
76584: LIST
76585: LIST
76586: PUSH
76587: LD_INT 1
76589: PUSH
76590: LD_INT 4
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: PUSH
76597: LD_INT 1
76599: NEG
76600: PUSH
76601: LD_INT 3
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: LIST
76612: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76613: LD_ADDR_VAR 0 27
76617: PUSH
76618: LD_INT 3
76620: NEG
76621: PUSH
76622: LD_INT 0
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PUSH
76629: LD_INT 3
76631: NEG
76632: PUSH
76633: LD_INT 1
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 4
76642: NEG
76643: PUSH
76644: LD_INT 1
76646: NEG
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: LIST
76656: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76657: LD_ADDR_VAR 0 28
76661: PUSH
76662: LD_INT 3
76664: NEG
76665: PUSH
76666: LD_INT 3
76668: NEG
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 3
76676: NEG
76677: PUSH
76678: LD_INT 4
76680: NEG
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 4
76688: NEG
76689: PUSH
76690: LD_INT 3
76692: NEG
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: LIST
76702: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76703: LD_ADDR_VAR 0 29
76707: PUSH
76708: LD_INT 1
76710: NEG
76711: PUSH
76712: LD_INT 3
76714: NEG
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: LD_INT 3
76725: NEG
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: LD_INT 2
76736: NEG
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 1
76744: NEG
76745: PUSH
76746: LD_INT 4
76748: NEG
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: LD_INT 0
76756: PUSH
76757: LD_INT 4
76759: NEG
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 1
76767: PUSH
76768: LD_INT 3
76770: NEG
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 5
76782: NEG
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 0
76790: PUSH
76791: LD_INT 5
76793: NEG
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 1
76801: PUSH
76802: LD_INT 4
76804: NEG
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 1
76812: NEG
76813: PUSH
76814: LD_INT 6
76816: NEG
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_INT 0
76824: PUSH
76825: LD_INT 6
76827: NEG
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 1
76835: PUSH
76836: LD_INT 5
76838: NEG
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76858: LD_ADDR_VAR 0 30
76862: PUSH
76863: LD_INT 2
76865: PUSH
76866: LD_INT 1
76868: NEG
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 3
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 3
76886: PUSH
76887: LD_INT 1
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 3
76896: PUSH
76897: LD_INT 1
76899: NEG
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 4
76907: PUSH
76908: LD_INT 0
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PUSH
76915: LD_INT 4
76917: PUSH
76918: LD_INT 1
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: PUSH
76925: LD_INT 4
76927: PUSH
76928: LD_INT 1
76930: NEG
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: LD_INT 5
76938: PUSH
76939: LD_INT 0
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PUSH
76946: LD_INT 5
76948: PUSH
76949: LD_INT 1
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: PUSH
76956: LD_INT 5
76958: PUSH
76959: LD_INT 1
76961: NEG
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: PUSH
76967: LD_INT 6
76969: PUSH
76970: LD_INT 0
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: LD_INT 6
76979: PUSH
76980: LD_INT 1
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
77001: LD_ADDR_VAR 0 31
77005: PUSH
77006: LD_INT 3
77008: PUSH
77009: LD_INT 2
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PUSH
77016: LD_INT 3
77018: PUSH
77019: LD_INT 3
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: PUSH
77026: LD_INT 2
77028: PUSH
77029: LD_INT 3
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PUSH
77036: LD_INT 4
77038: PUSH
77039: LD_INT 3
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: PUSH
77046: LD_INT 4
77048: PUSH
77049: LD_INT 4
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: PUSH
77056: LD_INT 3
77058: PUSH
77059: LD_INT 4
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PUSH
77066: LD_INT 5
77068: PUSH
77069: LD_INT 4
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PUSH
77076: LD_INT 5
77078: PUSH
77079: LD_INT 5
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: PUSH
77086: LD_INT 4
77088: PUSH
77089: LD_INT 5
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: PUSH
77096: LD_INT 6
77098: PUSH
77099: LD_INT 5
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 6
77108: PUSH
77109: LD_INT 6
77111: PUSH
77112: EMPTY
77113: LIST
77114: LIST
77115: PUSH
77116: LD_INT 5
77118: PUSH
77119: LD_INT 6
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: LIST
77130: LIST
77131: LIST
77132: LIST
77133: LIST
77134: LIST
77135: LIST
77136: LIST
77137: LIST
77138: LIST
77139: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77140: LD_ADDR_VAR 0 32
77144: PUSH
77145: LD_INT 1
77147: PUSH
77148: LD_INT 3
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 0
77157: PUSH
77158: LD_INT 3
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: LD_INT 1
77167: NEG
77168: PUSH
77169: LD_INT 2
77171: PUSH
77172: EMPTY
77173: LIST
77174: LIST
77175: PUSH
77176: LD_INT 1
77178: PUSH
77179: LD_INT 4
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PUSH
77186: LD_INT 0
77188: PUSH
77189: LD_INT 4
77191: PUSH
77192: EMPTY
77193: LIST
77194: LIST
77195: PUSH
77196: LD_INT 1
77198: NEG
77199: PUSH
77200: LD_INT 3
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: PUSH
77207: LD_INT 1
77209: PUSH
77210: LD_INT 5
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PUSH
77217: LD_INT 0
77219: PUSH
77220: LD_INT 5
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 1
77229: NEG
77230: PUSH
77231: LD_INT 4
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PUSH
77238: LD_INT 1
77240: PUSH
77241: LD_INT 6
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 0
77250: PUSH
77251: LD_INT 6
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: PUSH
77258: LD_INT 1
77260: NEG
77261: PUSH
77262: LD_INT 5
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: LIST
77281: LIST
77282: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77283: LD_ADDR_VAR 0 33
77287: PUSH
77288: LD_INT 2
77290: NEG
77291: PUSH
77292: LD_INT 1
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 3
77301: NEG
77302: PUSH
77303: LD_INT 0
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: PUSH
77310: LD_INT 3
77312: NEG
77313: PUSH
77314: LD_INT 1
77316: NEG
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 3
77324: NEG
77325: PUSH
77326: LD_INT 1
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: LD_INT 4
77335: NEG
77336: PUSH
77337: LD_INT 0
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 4
77346: NEG
77347: PUSH
77348: LD_INT 1
77350: NEG
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: PUSH
77356: LD_INT 4
77358: NEG
77359: PUSH
77360: LD_INT 1
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 5
77369: NEG
77370: PUSH
77371: LD_INT 0
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 5
77380: NEG
77381: PUSH
77382: LD_INT 1
77384: NEG
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 5
77392: NEG
77393: PUSH
77394: LD_INT 1
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 6
77403: NEG
77404: PUSH
77405: LD_INT 0
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PUSH
77412: LD_INT 6
77414: NEG
77415: PUSH
77416: LD_INT 1
77418: NEG
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: LIST
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77438: LD_ADDR_VAR 0 34
77442: PUSH
77443: LD_INT 2
77445: NEG
77446: PUSH
77447: LD_INT 3
77449: NEG
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: LD_INT 3
77457: NEG
77458: PUSH
77459: LD_INT 2
77461: NEG
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PUSH
77467: LD_INT 3
77469: NEG
77470: PUSH
77471: LD_INT 3
77473: NEG
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: PUSH
77479: LD_INT 3
77481: NEG
77482: PUSH
77483: LD_INT 4
77485: NEG
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PUSH
77491: LD_INT 4
77493: NEG
77494: PUSH
77495: LD_INT 3
77497: NEG
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_INT 4
77505: NEG
77506: PUSH
77507: LD_INT 4
77509: NEG
77510: PUSH
77511: EMPTY
77512: LIST
77513: LIST
77514: PUSH
77515: LD_INT 4
77517: NEG
77518: PUSH
77519: LD_INT 5
77521: NEG
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: PUSH
77527: LD_INT 5
77529: NEG
77530: PUSH
77531: LD_INT 4
77533: NEG
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: PUSH
77539: LD_INT 5
77541: NEG
77542: PUSH
77543: LD_INT 5
77545: NEG
77546: PUSH
77547: EMPTY
77548: LIST
77549: LIST
77550: PUSH
77551: LD_INT 5
77553: NEG
77554: PUSH
77555: LD_INT 6
77557: NEG
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 6
77565: NEG
77566: PUSH
77567: LD_INT 5
77569: NEG
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_INT 6
77577: NEG
77578: PUSH
77579: LD_INT 6
77581: NEG
77582: PUSH
77583: EMPTY
77584: LIST
77585: LIST
77586: PUSH
77587: EMPTY
77588: LIST
77589: LIST
77590: LIST
77591: LIST
77592: LIST
77593: LIST
77594: LIST
77595: LIST
77596: LIST
77597: LIST
77598: LIST
77599: LIST
77600: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77601: LD_ADDR_VAR 0 41
77605: PUSH
77606: LD_INT 0
77608: PUSH
77609: LD_INT 2
77611: NEG
77612: PUSH
77613: EMPTY
77614: LIST
77615: LIST
77616: PUSH
77617: LD_INT 1
77619: NEG
77620: PUSH
77621: LD_INT 3
77623: NEG
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PUSH
77629: LD_INT 1
77631: PUSH
77632: LD_INT 2
77634: NEG
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: LIST
77644: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77645: LD_ADDR_VAR 0 42
77649: PUSH
77650: LD_INT 2
77652: PUSH
77653: LD_INT 0
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 2
77662: PUSH
77663: LD_INT 1
77665: NEG
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: PUSH
77671: LD_INT 3
77673: PUSH
77674: LD_INT 1
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: LIST
77685: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77686: LD_ADDR_VAR 0 43
77690: PUSH
77691: LD_INT 2
77693: PUSH
77694: LD_INT 2
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 3
77703: PUSH
77704: LD_INT 2
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 2
77713: PUSH
77714: LD_INT 3
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: LIST
77725: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77726: LD_ADDR_VAR 0 44
77730: PUSH
77731: LD_INT 0
77733: PUSH
77734: LD_INT 2
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 1
77743: PUSH
77744: LD_INT 3
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 1
77753: NEG
77754: PUSH
77755: LD_INT 2
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: LIST
77766: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77767: LD_ADDR_VAR 0 45
77771: PUSH
77772: LD_INT 2
77774: NEG
77775: PUSH
77776: LD_INT 0
77778: PUSH
77779: EMPTY
77780: LIST
77781: LIST
77782: PUSH
77783: LD_INT 2
77785: NEG
77786: PUSH
77787: LD_INT 1
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 3
77796: NEG
77797: PUSH
77798: LD_INT 1
77800: NEG
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: LIST
77810: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77811: LD_ADDR_VAR 0 46
77815: PUSH
77816: LD_INT 2
77818: NEG
77819: PUSH
77820: LD_INT 2
77822: NEG
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: PUSH
77828: LD_INT 2
77830: NEG
77831: PUSH
77832: LD_INT 3
77834: NEG
77835: PUSH
77836: EMPTY
77837: LIST
77838: LIST
77839: PUSH
77840: LD_INT 3
77842: NEG
77843: PUSH
77844: LD_INT 2
77846: NEG
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PUSH
77852: EMPTY
77853: LIST
77854: LIST
77855: LIST
77856: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77857: LD_ADDR_VAR 0 47
77861: PUSH
77862: LD_INT 2
77864: NEG
77865: PUSH
77866: LD_INT 3
77868: NEG
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 1
77876: NEG
77877: PUSH
77878: LD_INT 3
77880: NEG
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77890: LD_ADDR_VAR 0 48
77894: PUSH
77895: LD_INT 1
77897: PUSH
77898: LD_INT 2
77900: NEG
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 2
77908: PUSH
77909: LD_INT 1
77911: NEG
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77921: LD_ADDR_VAR 0 49
77925: PUSH
77926: LD_INT 3
77928: PUSH
77929: LD_INT 1
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 3
77938: PUSH
77939: LD_INT 2
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
77950: LD_ADDR_VAR 0 50
77954: PUSH
77955: LD_INT 2
77957: PUSH
77958: LD_INT 3
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: PUSH
77965: LD_INT 1
77967: PUSH
77968: LD_INT 3
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: PUSH
77975: EMPTY
77976: LIST
77977: LIST
77978: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
77979: LD_ADDR_VAR 0 51
77983: PUSH
77984: LD_INT 1
77986: NEG
77987: PUSH
77988: LD_INT 2
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: PUSH
77995: LD_INT 2
77997: NEG
77998: PUSH
77999: LD_INT 1
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78010: LD_ADDR_VAR 0 52
78014: PUSH
78015: LD_INT 3
78017: NEG
78018: PUSH
78019: LD_INT 1
78021: NEG
78022: PUSH
78023: EMPTY
78024: LIST
78025: LIST
78026: PUSH
78027: LD_INT 3
78029: NEG
78030: PUSH
78031: LD_INT 2
78033: NEG
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: EMPTY
78040: LIST
78041: LIST
78042: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78043: LD_ADDR_VAR 0 53
78047: PUSH
78048: LD_INT 1
78050: NEG
78051: PUSH
78052: LD_INT 3
78054: NEG
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PUSH
78060: LD_INT 0
78062: PUSH
78063: LD_INT 3
78065: NEG
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: LD_INT 1
78073: PUSH
78074: LD_INT 2
78076: NEG
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: LIST
78086: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78087: LD_ADDR_VAR 0 54
78091: PUSH
78092: LD_INT 2
78094: PUSH
78095: LD_INT 1
78097: NEG
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: PUSH
78103: LD_INT 3
78105: PUSH
78106: LD_INT 0
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: PUSH
78113: LD_INT 3
78115: PUSH
78116: LD_INT 1
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: LIST
78127: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78128: LD_ADDR_VAR 0 55
78132: PUSH
78133: LD_INT 3
78135: PUSH
78136: LD_INT 2
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: LD_INT 3
78145: PUSH
78146: LD_INT 3
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 2
78155: PUSH
78156: LD_INT 3
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: LIST
78167: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78168: LD_ADDR_VAR 0 56
78172: PUSH
78173: LD_INT 1
78175: PUSH
78176: LD_INT 3
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: PUSH
78183: LD_INT 0
78185: PUSH
78186: LD_INT 3
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PUSH
78193: LD_INT 1
78195: NEG
78196: PUSH
78197: LD_INT 2
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: LIST
78208: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78209: LD_ADDR_VAR 0 57
78213: PUSH
78214: LD_INT 2
78216: NEG
78217: PUSH
78218: LD_INT 1
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PUSH
78225: LD_INT 3
78227: NEG
78228: PUSH
78229: LD_INT 0
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: PUSH
78236: LD_INT 3
78238: NEG
78239: PUSH
78240: LD_INT 1
78242: NEG
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: LIST
78252: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78253: LD_ADDR_VAR 0 58
78257: PUSH
78258: LD_INT 2
78260: NEG
78261: PUSH
78262: LD_INT 3
78264: NEG
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: PUSH
78270: LD_INT 3
78272: NEG
78273: PUSH
78274: LD_INT 2
78276: NEG
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 3
78284: NEG
78285: PUSH
78286: LD_INT 3
78288: NEG
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: LIST
78298: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78299: LD_ADDR_VAR 0 59
78303: PUSH
78304: LD_INT 1
78306: NEG
78307: PUSH
78308: LD_INT 2
78310: NEG
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 0
78318: PUSH
78319: LD_INT 2
78321: NEG
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 1
78329: PUSH
78330: LD_INT 1
78332: NEG
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: LIST
78342: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78343: LD_ADDR_VAR 0 60
78347: PUSH
78348: LD_INT 1
78350: PUSH
78351: LD_INT 1
78353: NEG
78354: PUSH
78355: EMPTY
78356: LIST
78357: LIST
78358: PUSH
78359: LD_INT 2
78361: PUSH
78362: LD_INT 0
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PUSH
78369: LD_INT 2
78371: PUSH
78372: LD_INT 1
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: LIST
78383: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78384: LD_ADDR_VAR 0 61
78388: PUSH
78389: LD_INT 2
78391: PUSH
78392: LD_INT 1
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 2
78401: PUSH
78402: LD_INT 2
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 1
78411: PUSH
78412: LD_INT 2
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: LIST
78423: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78424: LD_ADDR_VAR 0 62
78428: PUSH
78429: LD_INT 1
78431: PUSH
78432: LD_INT 2
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: LD_INT 0
78441: PUSH
78442: LD_INT 2
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: LD_INT 1
78451: NEG
78452: PUSH
78453: LD_INT 1
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: LIST
78464: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78465: LD_ADDR_VAR 0 63
78469: PUSH
78470: LD_INT 1
78472: NEG
78473: PUSH
78474: LD_INT 1
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: PUSH
78481: LD_INT 2
78483: NEG
78484: PUSH
78485: LD_INT 0
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 2
78494: NEG
78495: PUSH
78496: LD_INT 1
78498: NEG
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: LIST
78508: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78509: LD_ADDR_VAR 0 64
78513: PUSH
78514: LD_INT 1
78516: NEG
78517: PUSH
78518: LD_INT 2
78520: NEG
78521: PUSH
78522: EMPTY
78523: LIST
78524: LIST
78525: PUSH
78526: LD_INT 2
78528: NEG
78529: PUSH
78530: LD_INT 1
78532: NEG
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 2
78540: NEG
78541: PUSH
78542: LD_INT 2
78544: NEG
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: LIST
78554: ST_TO_ADDR
// end ; 2 :
78555: GO 81821
78557: LD_INT 2
78559: DOUBLE
78560: EQUAL
78561: IFTRUE 78565
78563: GO 81820
78565: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78566: LD_ADDR_VAR 0 29
78570: PUSH
78571: LD_INT 4
78573: PUSH
78574: LD_INT 0
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_INT 4
78583: PUSH
78584: LD_INT 1
78586: NEG
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: LD_INT 5
78594: PUSH
78595: LD_INT 0
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: LD_INT 5
78604: PUSH
78605: LD_INT 1
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 4
78614: PUSH
78615: LD_INT 1
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: PUSH
78622: LD_INT 3
78624: PUSH
78625: LD_INT 0
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 3
78634: PUSH
78635: LD_INT 1
78637: NEG
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: PUSH
78643: LD_INT 3
78645: PUSH
78646: LD_INT 2
78648: NEG
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: PUSH
78654: LD_INT 5
78656: PUSH
78657: LD_INT 2
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: PUSH
78664: LD_INT 3
78666: PUSH
78667: LD_INT 3
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: PUSH
78674: LD_INT 3
78676: PUSH
78677: LD_INT 2
78679: PUSH
78680: EMPTY
78681: LIST
78682: LIST
78683: PUSH
78684: LD_INT 4
78686: PUSH
78687: LD_INT 3
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: PUSH
78694: LD_INT 4
78696: PUSH
78697: LD_INT 4
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: LD_INT 3
78706: PUSH
78707: LD_INT 4
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PUSH
78714: LD_INT 2
78716: PUSH
78717: LD_INT 3
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: PUSH
78724: LD_INT 2
78726: PUSH
78727: LD_INT 2
78729: PUSH
78730: EMPTY
78731: LIST
78732: LIST
78733: PUSH
78734: LD_INT 4
78736: PUSH
78737: LD_INT 2
78739: PUSH
78740: EMPTY
78741: LIST
78742: LIST
78743: PUSH
78744: LD_INT 2
78746: PUSH
78747: LD_INT 4
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: PUSH
78754: LD_INT 0
78756: PUSH
78757: LD_INT 4
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 0
78766: PUSH
78767: LD_INT 3
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: LD_INT 1
78776: PUSH
78777: LD_INT 4
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: LD_INT 1
78786: PUSH
78787: LD_INT 5
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: PUSH
78794: LD_INT 0
78796: PUSH
78797: LD_INT 5
78799: PUSH
78800: EMPTY
78801: LIST
78802: LIST
78803: PUSH
78804: LD_INT 1
78806: NEG
78807: PUSH
78808: LD_INT 4
78810: PUSH
78811: EMPTY
78812: LIST
78813: LIST
78814: PUSH
78815: LD_INT 1
78817: NEG
78818: PUSH
78819: LD_INT 3
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: PUSH
78826: LD_INT 2
78828: PUSH
78829: LD_INT 5
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: PUSH
78836: LD_INT 2
78838: NEG
78839: PUSH
78840: LD_INT 3
78842: PUSH
78843: EMPTY
78844: LIST
78845: LIST
78846: PUSH
78847: LD_INT 3
78849: NEG
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PUSH
78858: LD_INT 3
78860: NEG
78861: PUSH
78862: LD_INT 1
78864: NEG
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PUSH
78870: LD_INT 2
78872: NEG
78873: PUSH
78874: LD_INT 0
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: PUSH
78881: LD_INT 2
78883: NEG
78884: PUSH
78885: LD_INT 1
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 3
78894: NEG
78895: PUSH
78896: LD_INT 1
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: PUSH
78903: LD_INT 4
78905: NEG
78906: PUSH
78907: LD_INT 0
78909: PUSH
78910: EMPTY
78911: LIST
78912: LIST
78913: PUSH
78914: LD_INT 4
78916: NEG
78917: PUSH
78918: LD_INT 1
78920: NEG
78921: PUSH
78922: EMPTY
78923: LIST
78924: LIST
78925: PUSH
78926: LD_INT 4
78928: NEG
78929: PUSH
78930: LD_INT 2
78932: NEG
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 2
78940: NEG
78941: PUSH
78942: LD_INT 2
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PUSH
78949: LD_INT 4
78951: NEG
78952: PUSH
78953: LD_INT 4
78955: NEG
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: PUSH
78961: LD_INT 4
78963: NEG
78964: PUSH
78965: LD_INT 5
78967: NEG
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: PUSH
78973: LD_INT 3
78975: NEG
78976: PUSH
78977: LD_INT 4
78979: NEG
78980: PUSH
78981: EMPTY
78982: LIST
78983: LIST
78984: PUSH
78985: LD_INT 3
78987: NEG
78988: PUSH
78989: LD_INT 3
78991: NEG
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: PUSH
78997: LD_INT 4
78999: NEG
79000: PUSH
79001: LD_INT 3
79003: NEG
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PUSH
79009: LD_INT 5
79011: NEG
79012: PUSH
79013: LD_INT 4
79015: NEG
79016: PUSH
79017: EMPTY
79018: LIST
79019: LIST
79020: PUSH
79021: LD_INT 5
79023: NEG
79024: PUSH
79025: LD_INT 5
79027: NEG
79028: PUSH
79029: EMPTY
79030: LIST
79031: LIST
79032: PUSH
79033: LD_INT 3
79035: NEG
79036: PUSH
79037: LD_INT 5
79039: NEG
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: PUSH
79045: LD_INT 5
79047: NEG
79048: PUSH
79049: LD_INT 3
79051: NEG
79052: PUSH
79053: EMPTY
79054: LIST
79055: LIST
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: LIST
79096: LIST
79097: LIST
79098: LIST
79099: LIST
79100: LIST
79101: LIST
79102: LIST
79103: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
79104: LD_ADDR_VAR 0 30
79108: PUSH
79109: LD_INT 4
79111: PUSH
79112: LD_INT 4
79114: PUSH
79115: EMPTY
79116: LIST
79117: LIST
79118: PUSH
79119: LD_INT 4
79121: PUSH
79122: LD_INT 3
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PUSH
79129: LD_INT 5
79131: PUSH
79132: LD_INT 4
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: PUSH
79139: LD_INT 5
79141: PUSH
79142: LD_INT 5
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: PUSH
79149: LD_INT 4
79151: PUSH
79152: LD_INT 5
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: PUSH
79159: LD_INT 3
79161: PUSH
79162: LD_INT 4
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: PUSH
79169: LD_INT 3
79171: PUSH
79172: LD_INT 3
79174: PUSH
79175: EMPTY
79176: LIST
79177: LIST
79178: PUSH
79179: LD_INT 5
79181: PUSH
79182: LD_INT 3
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: PUSH
79189: LD_INT 3
79191: PUSH
79192: LD_INT 5
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PUSH
79199: LD_INT 0
79201: PUSH
79202: LD_INT 3
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: PUSH
79209: LD_INT 0
79211: PUSH
79212: LD_INT 2
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: LD_INT 1
79221: PUSH
79222: LD_INT 3
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: LD_INT 1
79231: PUSH
79232: LD_INT 4
79234: PUSH
79235: EMPTY
79236: LIST
79237: LIST
79238: PUSH
79239: LD_INT 0
79241: PUSH
79242: LD_INT 4
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: PUSH
79249: LD_INT 1
79251: NEG
79252: PUSH
79253: LD_INT 3
79255: PUSH
79256: EMPTY
79257: LIST
79258: LIST
79259: PUSH
79260: LD_INT 1
79262: NEG
79263: PUSH
79264: LD_INT 2
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: PUSH
79271: LD_INT 2
79273: PUSH
79274: LD_INT 4
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 2
79283: NEG
79284: PUSH
79285: LD_INT 2
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: PUSH
79292: LD_INT 4
79294: NEG
79295: PUSH
79296: LD_INT 0
79298: PUSH
79299: EMPTY
79300: LIST
79301: LIST
79302: PUSH
79303: LD_INT 4
79305: NEG
79306: PUSH
79307: LD_INT 1
79309: NEG
79310: PUSH
79311: EMPTY
79312: LIST
79313: LIST
79314: PUSH
79315: LD_INT 3
79317: NEG
79318: PUSH
79319: LD_INT 0
79321: PUSH
79322: EMPTY
79323: LIST
79324: LIST
79325: PUSH
79326: LD_INT 3
79328: NEG
79329: PUSH
79330: LD_INT 1
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: PUSH
79337: LD_INT 4
79339: NEG
79340: PUSH
79341: LD_INT 1
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: PUSH
79348: LD_INT 5
79350: NEG
79351: PUSH
79352: LD_INT 0
79354: PUSH
79355: EMPTY
79356: LIST
79357: LIST
79358: PUSH
79359: LD_INT 5
79361: NEG
79362: PUSH
79363: LD_INT 1
79365: NEG
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: LD_INT 5
79373: NEG
79374: PUSH
79375: LD_INT 2
79377: NEG
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: PUSH
79383: LD_INT 3
79385: NEG
79386: PUSH
79387: LD_INT 2
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PUSH
79394: LD_INT 3
79396: NEG
79397: PUSH
79398: LD_INT 3
79400: NEG
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: PUSH
79406: LD_INT 3
79408: NEG
79409: PUSH
79410: LD_INT 4
79412: NEG
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: LD_INT 2
79420: NEG
79421: PUSH
79422: LD_INT 3
79424: NEG
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: PUSH
79430: LD_INT 2
79432: NEG
79433: PUSH
79434: LD_INT 2
79436: NEG
79437: PUSH
79438: EMPTY
79439: LIST
79440: LIST
79441: PUSH
79442: LD_INT 3
79444: NEG
79445: PUSH
79446: LD_INT 2
79448: NEG
79449: PUSH
79450: EMPTY
79451: LIST
79452: LIST
79453: PUSH
79454: LD_INT 4
79456: NEG
79457: PUSH
79458: LD_INT 3
79460: NEG
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: PUSH
79466: LD_INT 4
79468: NEG
79469: PUSH
79470: LD_INT 4
79472: NEG
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: PUSH
79478: LD_INT 2
79480: NEG
79481: PUSH
79482: LD_INT 4
79484: NEG
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: LD_INT 4
79492: NEG
79493: PUSH
79494: LD_INT 2
79496: NEG
79497: PUSH
79498: EMPTY
79499: LIST
79500: LIST
79501: PUSH
79502: LD_INT 0
79504: PUSH
79505: LD_INT 4
79507: NEG
79508: PUSH
79509: EMPTY
79510: LIST
79511: LIST
79512: PUSH
79513: LD_INT 0
79515: PUSH
79516: LD_INT 5
79518: NEG
79519: PUSH
79520: EMPTY
79521: LIST
79522: LIST
79523: PUSH
79524: LD_INT 1
79526: PUSH
79527: LD_INT 4
79529: NEG
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PUSH
79535: LD_INT 1
79537: PUSH
79538: LD_INT 3
79540: NEG
79541: PUSH
79542: EMPTY
79543: LIST
79544: LIST
79545: PUSH
79546: LD_INT 0
79548: PUSH
79549: LD_INT 3
79551: NEG
79552: PUSH
79553: EMPTY
79554: LIST
79555: LIST
79556: PUSH
79557: LD_INT 1
79559: NEG
79560: PUSH
79561: LD_INT 4
79563: NEG
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: PUSH
79569: LD_INT 1
79571: NEG
79572: PUSH
79573: LD_INT 5
79575: NEG
79576: PUSH
79577: EMPTY
79578: LIST
79579: LIST
79580: PUSH
79581: LD_INT 2
79583: PUSH
79584: LD_INT 3
79586: NEG
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: PUSH
79592: LD_INT 2
79594: NEG
79595: PUSH
79596: LD_INT 5
79598: NEG
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: LIST
79608: LIST
79609: LIST
79610: LIST
79611: LIST
79612: LIST
79613: LIST
79614: LIST
79615: LIST
79616: LIST
79617: LIST
79618: LIST
79619: LIST
79620: LIST
79621: LIST
79622: LIST
79623: LIST
79624: LIST
79625: LIST
79626: LIST
79627: LIST
79628: LIST
79629: LIST
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: LIST
79635: LIST
79636: LIST
79637: LIST
79638: LIST
79639: LIST
79640: LIST
79641: LIST
79642: LIST
79643: LIST
79644: LIST
79645: LIST
79646: LIST
79647: LIST
79648: LIST
79649: LIST
79650: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79651: LD_ADDR_VAR 0 31
79655: PUSH
79656: LD_INT 0
79658: PUSH
79659: LD_INT 4
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PUSH
79666: LD_INT 0
79668: PUSH
79669: LD_INT 3
79671: PUSH
79672: EMPTY
79673: LIST
79674: LIST
79675: PUSH
79676: LD_INT 1
79678: PUSH
79679: LD_INT 4
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: PUSH
79686: LD_INT 1
79688: PUSH
79689: LD_INT 5
79691: PUSH
79692: EMPTY
79693: LIST
79694: LIST
79695: PUSH
79696: LD_INT 0
79698: PUSH
79699: LD_INT 5
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: PUSH
79706: LD_INT 1
79708: NEG
79709: PUSH
79710: LD_INT 4
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: PUSH
79717: LD_INT 1
79719: NEG
79720: PUSH
79721: LD_INT 3
79723: PUSH
79724: EMPTY
79725: LIST
79726: LIST
79727: PUSH
79728: LD_INT 2
79730: PUSH
79731: LD_INT 5
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 2
79740: NEG
79741: PUSH
79742: LD_INT 3
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 3
79751: NEG
79752: PUSH
79753: LD_INT 0
79755: PUSH
79756: EMPTY
79757: LIST
79758: LIST
79759: PUSH
79760: LD_INT 3
79762: NEG
79763: PUSH
79764: LD_INT 1
79766: NEG
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: PUSH
79772: LD_INT 2
79774: NEG
79775: PUSH
79776: LD_INT 0
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: PUSH
79783: LD_INT 2
79785: NEG
79786: PUSH
79787: LD_INT 1
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 3
79796: NEG
79797: PUSH
79798: LD_INT 1
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: PUSH
79805: LD_INT 4
79807: NEG
79808: PUSH
79809: LD_INT 0
79811: PUSH
79812: EMPTY
79813: LIST
79814: LIST
79815: PUSH
79816: LD_INT 4
79818: NEG
79819: PUSH
79820: LD_INT 1
79822: NEG
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: PUSH
79828: LD_INT 4
79830: NEG
79831: PUSH
79832: LD_INT 2
79834: NEG
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: LD_INT 2
79842: NEG
79843: PUSH
79844: LD_INT 2
79846: PUSH
79847: EMPTY
79848: LIST
79849: LIST
79850: PUSH
79851: LD_INT 4
79853: NEG
79854: PUSH
79855: LD_INT 4
79857: NEG
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: PUSH
79863: LD_INT 4
79865: NEG
79866: PUSH
79867: LD_INT 5
79869: NEG
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 3
79877: NEG
79878: PUSH
79879: LD_INT 4
79881: NEG
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: PUSH
79887: LD_INT 3
79889: NEG
79890: PUSH
79891: LD_INT 3
79893: NEG
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: PUSH
79899: LD_INT 4
79901: NEG
79902: PUSH
79903: LD_INT 3
79905: NEG
79906: PUSH
79907: EMPTY
79908: LIST
79909: LIST
79910: PUSH
79911: LD_INT 5
79913: NEG
79914: PUSH
79915: LD_INT 4
79917: NEG
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: PUSH
79923: LD_INT 5
79925: NEG
79926: PUSH
79927: LD_INT 5
79929: NEG
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PUSH
79935: LD_INT 3
79937: NEG
79938: PUSH
79939: LD_INT 5
79941: NEG
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: PUSH
79947: LD_INT 5
79949: NEG
79950: PUSH
79951: LD_INT 3
79953: NEG
79954: PUSH
79955: EMPTY
79956: LIST
79957: LIST
79958: PUSH
79959: LD_INT 0
79961: PUSH
79962: LD_INT 3
79964: NEG
79965: PUSH
79966: EMPTY
79967: LIST
79968: LIST
79969: PUSH
79970: LD_INT 0
79972: PUSH
79973: LD_INT 4
79975: NEG
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PUSH
79981: LD_INT 1
79983: PUSH
79984: LD_INT 3
79986: NEG
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: PUSH
79992: LD_INT 1
79994: PUSH
79995: LD_INT 2
79997: NEG
79998: PUSH
79999: EMPTY
80000: LIST
80001: LIST
80002: PUSH
80003: LD_INT 0
80005: PUSH
80006: LD_INT 2
80008: NEG
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: PUSH
80014: LD_INT 1
80016: NEG
80017: PUSH
80018: LD_INT 3
80020: NEG
80021: PUSH
80022: EMPTY
80023: LIST
80024: LIST
80025: PUSH
80026: LD_INT 1
80028: NEG
80029: PUSH
80030: LD_INT 4
80032: NEG
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: PUSH
80038: LD_INT 2
80040: PUSH
80041: LD_INT 2
80043: NEG
80044: PUSH
80045: EMPTY
80046: LIST
80047: LIST
80048: PUSH
80049: LD_INT 2
80051: NEG
80052: PUSH
80053: LD_INT 4
80055: NEG
80056: PUSH
80057: EMPTY
80058: LIST
80059: LIST
80060: PUSH
80061: LD_INT 4
80063: PUSH
80064: LD_INT 0
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: PUSH
80071: LD_INT 4
80073: PUSH
80074: LD_INT 1
80076: NEG
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: PUSH
80082: LD_INT 5
80084: PUSH
80085: LD_INT 0
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PUSH
80092: LD_INT 5
80094: PUSH
80095: LD_INT 1
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: PUSH
80102: LD_INT 4
80104: PUSH
80105: LD_INT 1
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: PUSH
80112: LD_INT 3
80114: PUSH
80115: LD_INT 0
80117: PUSH
80118: EMPTY
80119: LIST
80120: LIST
80121: PUSH
80122: LD_INT 3
80124: PUSH
80125: LD_INT 1
80127: NEG
80128: PUSH
80129: EMPTY
80130: LIST
80131: LIST
80132: PUSH
80133: LD_INT 3
80135: PUSH
80136: LD_INT 2
80138: NEG
80139: PUSH
80140: EMPTY
80141: LIST
80142: LIST
80143: PUSH
80144: LD_INT 5
80146: PUSH
80147: LD_INT 2
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: EMPTY
80155: LIST
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: LIST
80185: LIST
80186: LIST
80187: LIST
80188: LIST
80189: LIST
80190: LIST
80191: LIST
80192: LIST
80193: LIST
80194: LIST
80195: LIST
80196: LIST
80197: LIST
80198: LIST
80199: LIST
80200: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80201: LD_ADDR_VAR 0 32
80205: PUSH
80206: LD_INT 4
80208: NEG
80209: PUSH
80210: LD_INT 0
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: LD_INT 4
80219: NEG
80220: PUSH
80221: LD_INT 1
80223: NEG
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PUSH
80229: LD_INT 3
80231: NEG
80232: PUSH
80233: LD_INT 0
80235: PUSH
80236: EMPTY
80237: LIST
80238: LIST
80239: PUSH
80240: LD_INT 3
80242: NEG
80243: PUSH
80244: LD_INT 1
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PUSH
80251: LD_INT 4
80253: NEG
80254: PUSH
80255: LD_INT 1
80257: PUSH
80258: EMPTY
80259: LIST
80260: LIST
80261: PUSH
80262: LD_INT 5
80264: NEG
80265: PUSH
80266: LD_INT 0
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PUSH
80273: LD_INT 5
80275: NEG
80276: PUSH
80277: LD_INT 1
80279: NEG
80280: PUSH
80281: EMPTY
80282: LIST
80283: LIST
80284: PUSH
80285: LD_INT 5
80287: NEG
80288: PUSH
80289: LD_INT 2
80291: NEG
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: LD_INT 3
80299: NEG
80300: PUSH
80301: LD_INT 2
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 3
80310: NEG
80311: PUSH
80312: LD_INT 3
80314: NEG
80315: PUSH
80316: EMPTY
80317: LIST
80318: LIST
80319: PUSH
80320: LD_INT 3
80322: NEG
80323: PUSH
80324: LD_INT 4
80326: NEG
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: PUSH
80332: LD_INT 2
80334: NEG
80335: PUSH
80336: LD_INT 3
80338: NEG
80339: PUSH
80340: EMPTY
80341: LIST
80342: LIST
80343: PUSH
80344: LD_INT 2
80346: NEG
80347: PUSH
80348: LD_INT 2
80350: NEG
80351: PUSH
80352: EMPTY
80353: LIST
80354: LIST
80355: PUSH
80356: LD_INT 3
80358: NEG
80359: PUSH
80360: LD_INT 2
80362: NEG
80363: PUSH
80364: EMPTY
80365: LIST
80366: LIST
80367: PUSH
80368: LD_INT 4
80370: NEG
80371: PUSH
80372: LD_INT 3
80374: NEG
80375: PUSH
80376: EMPTY
80377: LIST
80378: LIST
80379: PUSH
80380: LD_INT 4
80382: NEG
80383: PUSH
80384: LD_INT 4
80386: NEG
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 2
80394: NEG
80395: PUSH
80396: LD_INT 4
80398: NEG
80399: PUSH
80400: EMPTY
80401: LIST
80402: LIST
80403: PUSH
80404: LD_INT 4
80406: NEG
80407: PUSH
80408: LD_INT 2
80410: NEG
80411: PUSH
80412: EMPTY
80413: LIST
80414: LIST
80415: PUSH
80416: LD_INT 0
80418: PUSH
80419: LD_INT 4
80421: NEG
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: PUSH
80427: LD_INT 0
80429: PUSH
80430: LD_INT 5
80432: NEG
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: PUSH
80438: LD_INT 1
80440: PUSH
80441: LD_INT 4
80443: NEG
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: PUSH
80449: LD_INT 1
80451: PUSH
80452: LD_INT 3
80454: NEG
80455: PUSH
80456: EMPTY
80457: LIST
80458: LIST
80459: PUSH
80460: LD_INT 0
80462: PUSH
80463: LD_INT 3
80465: NEG
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: LD_INT 1
80473: NEG
80474: PUSH
80475: LD_INT 4
80477: NEG
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: PUSH
80483: LD_INT 1
80485: NEG
80486: PUSH
80487: LD_INT 5
80489: NEG
80490: PUSH
80491: EMPTY
80492: LIST
80493: LIST
80494: PUSH
80495: LD_INT 2
80497: PUSH
80498: LD_INT 3
80500: NEG
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: PUSH
80506: LD_INT 2
80508: NEG
80509: PUSH
80510: LD_INT 5
80512: NEG
80513: PUSH
80514: EMPTY
80515: LIST
80516: LIST
80517: PUSH
80518: LD_INT 3
80520: PUSH
80521: LD_INT 0
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: PUSH
80528: LD_INT 3
80530: PUSH
80531: LD_INT 1
80533: NEG
80534: PUSH
80535: EMPTY
80536: LIST
80537: LIST
80538: PUSH
80539: LD_INT 4
80541: PUSH
80542: LD_INT 0
80544: PUSH
80545: EMPTY
80546: LIST
80547: LIST
80548: PUSH
80549: LD_INT 4
80551: PUSH
80552: LD_INT 1
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: PUSH
80559: LD_INT 3
80561: PUSH
80562: LD_INT 1
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: LD_INT 2
80571: PUSH
80572: LD_INT 0
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: PUSH
80579: LD_INT 2
80581: PUSH
80582: LD_INT 1
80584: NEG
80585: PUSH
80586: EMPTY
80587: LIST
80588: LIST
80589: PUSH
80590: LD_INT 2
80592: PUSH
80593: LD_INT 2
80595: NEG
80596: PUSH
80597: EMPTY
80598: LIST
80599: LIST
80600: PUSH
80601: LD_INT 4
80603: PUSH
80604: LD_INT 2
80606: PUSH
80607: EMPTY
80608: LIST
80609: LIST
80610: PUSH
80611: LD_INT 4
80613: PUSH
80614: LD_INT 4
80616: PUSH
80617: EMPTY
80618: LIST
80619: LIST
80620: PUSH
80621: LD_INT 4
80623: PUSH
80624: LD_INT 3
80626: PUSH
80627: EMPTY
80628: LIST
80629: LIST
80630: PUSH
80631: LD_INT 5
80633: PUSH
80634: LD_INT 4
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: PUSH
80641: LD_INT 5
80643: PUSH
80644: LD_INT 5
80646: PUSH
80647: EMPTY
80648: LIST
80649: LIST
80650: PUSH
80651: LD_INT 4
80653: PUSH
80654: LD_INT 5
80656: PUSH
80657: EMPTY
80658: LIST
80659: LIST
80660: PUSH
80661: LD_INT 3
80663: PUSH
80664: LD_INT 4
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: PUSH
80671: LD_INT 3
80673: PUSH
80674: LD_INT 3
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PUSH
80681: LD_INT 5
80683: PUSH
80684: LD_INT 3
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: PUSH
80691: LD_INT 3
80693: PUSH
80694: LD_INT 5
80696: PUSH
80697: EMPTY
80698: LIST
80699: LIST
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: LIST
80705: LIST
80706: LIST
80707: LIST
80708: LIST
80709: LIST
80710: LIST
80711: LIST
80712: LIST
80713: LIST
80714: LIST
80715: LIST
80716: LIST
80717: LIST
80718: LIST
80719: LIST
80720: LIST
80721: LIST
80722: LIST
80723: LIST
80724: LIST
80725: LIST
80726: LIST
80727: LIST
80728: LIST
80729: LIST
80730: LIST
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: LIST
80736: LIST
80737: LIST
80738: LIST
80739: LIST
80740: LIST
80741: LIST
80742: LIST
80743: LIST
80744: LIST
80745: LIST
80746: LIST
80747: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80748: LD_ADDR_VAR 0 33
80752: PUSH
80753: LD_INT 4
80755: NEG
80756: PUSH
80757: LD_INT 4
80759: NEG
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: PUSH
80765: LD_INT 4
80767: NEG
80768: PUSH
80769: LD_INT 5
80771: NEG
80772: PUSH
80773: EMPTY
80774: LIST
80775: LIST
80776: PUSH
80777: LD_INT 3
80779: NEG
80780: PUSH
80781: LD_INT 4
80783: NEG
80784: PUSH
80785: EMPTY
80786: LIST
80787: LIST
80788: PUSH
80789: LD_INT 3
80791: NEG
80792: PUSH
80793: LD_INT 3
80795: NEG
80796: PUSH
80797: EMPTY
80798: LIST
80799: LIST
80800: PUSH
80801: LD_INT 4
80803: NEG
80804: PUSH
80805: LD_INT 3
80807: NEG
80808: PUSH
80809: EMPTY
80810: LIST
80811: LIST
80812: PUSH
80813: LD_INT 5
80815: NEG
80816: PUSH
80817: LD_INT 4
80819: NEG
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: PUSH
80825: LD_INT 5
80827: NEG
80828: PUSH
80829: LD_INT 5
80831: NEG
80832: PUSH
80833: EMPTY
80834: LIST
80835: LIST
80836: PUSH
80837: LD_INT 3
80839: NEG
80840: PUSH
80841: LD_INT 5
80843: NEG
80844: PUSH
80845: EMPTY
80846: LIST
80847: LIST
80848: PUSH
80849: LD_INT 5
80851: NEG
80852: PUSH
80853: LD_INT 3
80855: NEG
80856: PUSH
80857: EMPTY
80858: LIST
80859: LIST
80860: PUSH
80861: LD_INT 0
80863: PUSH
80864: LD_INT 3
80866: NEG
80867: PUSH
80868: EMPTY
80869: LIST
80870: LIST
80871: PUSH
80872: LD_INT 0
80874: PUSH
80875: LD_INT 4
80877: NEG
80878: PUSH
80879: EMPTY
80880: LIST
80881: LIST
80882: PUSH
80883: LD_INT 1
80885: PUSH
80886: LD_INT 3
80888: NEG
80889: PUSH
80890: EMPTY
80891: LIST
80892: LIST
80893: PUSH
80894: LD_INT 1
80896: PUSH
80897: LD_INT 2
80899: NEG
80900: PUSH
80901: EMPTY
80902: LIST
80903: LIST
80904: PUSH
80905: LD_INT 0
80907: PUSH
80908: LD_INT 2
80910: NEG
80911: PUSH
80912: EMPTY
80913: LIST
80914: LIST
80915: PUSH
80916: LD_INT 1
80918: NEG
80919: PUSH
80920: LD_INT 3
80922: NEG
80923: PUSH
80924: EMPTY
80925: LIST
80926: LIST
80927: PUSH
80928: LD_INT 1
80930: NEG
80931: PUSH
80932: LD_INT 4
80934: NEG
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PUSH
80940: LD_INT 2
80942: PUSH
80943: LD_INT 2
80945: NEG
80946: PUSH
80947: EMPTY
80948: LIST
80949: LIST
80950: PUSH
80951: LD_INT 2
80953: NEG
80954: PUSH
80955: LD_INT 4
80957: NEG
80958: PUSH
80959: EMPTY
80960: LIST
80961: LIST
80962: PUSH
80963: LD_INT 4
80965: PUSH
80966: LD_INT 0
80968: PUSH
80969: EMPTY
80970: LIST
80971: LIST
80972: PUSH
80973: LD_INT 4
80975: PUSH
80976: LD_INT 1
80978: NEG
80979: PUSH
80980: EMPTY
80981: LIST
80982: LIST
80983: PUSH
80984: LD_INT 5
80986: PUSH
80987: LD_INT 0
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: PUSH
80994: LD_INT 5
80996: PUSH
80997: LD_INT 1
80999: PUSH
81000: EMPTY
81001: LIST
81002: LIST
81003: PUSH
81004: LD_INT 4
81006: PUSH
81007: LD_INT 1
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_INT 3
81016: PUSH
81017: LD_INT 0
81019: PUSH
81020: EMPTY
81021: LIST
81022: LIST
81023: PUSH
81024: LD_INT 3
81026: PUSH
81027: LD_INT 1
81029: NEG
81030: PUSH
81031: EMPTY
81032: LIST
81033: LIST
81034: PUSH
81035: LD_INT 3
81037: PUSH
81038: LD_INT 2
81040: NEG
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PUSH
81046: LD_INT 5
81048: PUSH
81049: LD_INT 2
81051: PUSH
81052: EMPTY
81053: LIST
81054: LIST
81055: PUSH
81056: LD_INT 3
81058: PUSH
81059: LD_INT 3
81061: PUSH
81062: EMPTY
81063: LIST
81064: LIST
81065: PUSH
81066: LD_INT 3
81068: PUSH
81069: LD_INT 2
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: PUSH
81076: LD_INT 4
81078: PUSH
81079: LD_INT 3
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: PUSH
81086: LD_INT 4
81088: PUSH
81089: LD_INT 4
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: PUSH
81096: LD_INT 3
81098: PUSH
81099: LD_INT 4
81101: PUSH
81102: EMPTY
81103: LIST
81104: LIST
81105: PUSH
81106: LD_INT 2
81108: PUSH
81109: LD_INT 3
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PUSH
81116: LD_INT 2
81118: PUSH
81119: LD_INT 2
81121: PUSH
81122: EMPTY
81123: LIST
81124: LIST
81125: PUSH
81126: LD_INT 4
81128: PUSH
81129: LD_INT 2
81131: PUSH
81132: EMPTY
81133: LIST
81134: LIST
81135: PUSH
81136: LD_INT 2
81138: PUSH
81139: LD_INT 4
81141: PUSH
81142: EMPTY
81143: LIST
81144: LIST
81145: PUSH
81146: LD_INT 0
81148: PUSH
81149: LD_INT 4
81151: PUSH
81152: EMPTY
81153: LIST
81154: LIST
81155: PUSH
81156: LD_INT 0
81158: PUSH
81159: LD_INT 3
81161: PUSH
81162: EMPTY
81163: LIST
81164: LIST
81165: PUSH
81166: LD_INT 1
81168: PUSH
81169: LD_INT 4
81171: PUSH
81172: EMPTY
81173: LIST
81174: LIST
81175: PUSH
81176: LD_INT 1
81178: PUSH
81179: LD_INT 5
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: PUSH
81186: LD_INT 0
81188: PUSH
81189: LD_INT 5
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: PUSH
81196: LD_INT 1
81198: NEG
81199: PUSH
81200: LD_INT 4
81202: PUSH
81203: EMPTY
81204: LIST
81205: LIST
81206: PUSH
81207: LD_INT 1
81209: NEG
81210: PUSH
81211: LD_INT 3
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: PUSH
81218: LD_INT 2
81220: PUSH
81221: LD_INT 5
81223: PUSH
81224: EMPTY
81225: LIST
81226: LIST
81227: PUSH
81228: LD_INT 2
81230: NEG
81231: PUSH
81232: LD_INT 3
81234: PUSH
81235: EMPTY
81236: LIST
81237: LIST
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: LIST
81243: LIST
81244: LIST
81245: LIST
81246: LIST
81247: LIST
81248: LIST
81249: LIST
81250: LIST
81251: LIST
81252: LIST
81253: LIST
81254: LIST
81255: LIST
81256: LIST
81257: LIST
81258: LIST
81259: LIST
81260: LIST
81261: LIST
81262: LIST
81263: LIST
81264: LIST
81265: LIST
81266: LIST
81267: LIST
81268: LIST
81269: LIST
81270: LIST
81271: LIST
81272: LIST
81273: LIST
81274: LIST
81275: LIST
81276: LIST
81277: LIST
81278: LIST
81279: LIST
81280: LIST
81281: LIST
81282: LIST
81283: LIST
81284: LIST
81285: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81286: LD_ADDR_VAR 0 34
81290: PUSH
81291: LD_INT 0
81293: PUSH
81294: LD_INT 4
81296: NEG
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: LD_INT 5
81307: NEG
81308: PUSH
81309: EMPTY
81310: LIST
81311: LIST
81312: PUSH
81313: LD_INT 1
81315: PUSH
81316: LD_INT 4
81318: NEG
81319: PUSH
81320: EMPTY
81321: LIST
81322: LIST
81323: PUSH
81324: LD_INT 1
81326: PUSH
81327: LD_INT 3
81329: NEG
81330: PUSH
81331: EMPTY
81332: LIST
81333: LIST
81334: PUSH
81335: LD_INT 0
81337: PUSH
81338: LD_INT 3
81340: NEG
81341: PUSH
81342: EMPTY
81343: LIST
81344: LIST
81345: PUSH
81346: LD_INT 1
81348: NEG
81349: PUSH
81350: LD_INT 4
81352: NEG
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: PUSH
81358: LD_INT 1
81360: NEG
81361: PUSH
81362: LD_INT 5
81364: NEG
81365: PUSH
81366: EMPTY
81367: LIST
81368: LIST
81369: PUSH
81370: LD_INT 2
81372: PUSH
81373: LD_INT 3
81375: NEG
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: PUSH
81381: LD_INT 2
81383: NEG
81384: PUSH
81385: LD_INT 5
81387: NEG
81388: PUSH
81389: EMPTY
81390: LIST
81391: LIST
81392: PUSH
81393: LD_INT 3
81395: PUSH
81396: LD_INT 0
81398: PUSH
81399: EMPTY
81400: LIST
81401: LIST
81402: PUSH
81403: LD_INT 3
81405: PUSH
81406: LD_INT 1
81408: NEG
81409: PUSH
81410: EMPTY
81411: LIST
81412: LIST
81413: PUSH
81414: LD_INT 4
81416: PUSH
81417: LD_INT 0
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: PUSH
81424: LD_INT 4
81426: PUSH
81427: LD_INT 1
81429: PUSH
81430: EMPTY
81431: LIST
81432: LIST
81433: PUSH
81434: LD_INT 3
81436: PUSH
81437: LD_INT 1
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: LD_INT 2
81446: PUSH
81447: LD_INT 0
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: PUSH
81454: LD_INT 2
81456: PUSH
81457: LD_INT 1
81459: NEG
81460: PUSH
81461: EMPTY
81462: LIST
81463: LIST
81464: PUSH
81465: LD_INT 2
81467: PUSH
81468: LD_INT 2
81470: NEG
81471: PUSH
81472: EMPTY
81473: LIST
81474: LIST
81475: PUSH
81476: LD_INT 4
81478: PUSH
81479: LD_INT 2
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: PUSH
81486: LD_INT 4
81488: PUSH
81489: LD_INT 4
81491: PUSH
81492: EMPTY
81493: LIST
81494: LIST
81495: PUSH
81496: LD_INT 4
81498: PUSH
81499: LD_INT 3
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: PUSH
81506: LD_INT 5
81508: PUSH
81509: LD_INT 4
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: PUSH
81516: LD_INT 5
81518: PUSH
81519: LD_INT 5
81521: PUSH
81522: EMPTY
81523: LIST
81524: LIST
81525: PUSH
81526: LD_INT 4
81528: PUSH
81529: LD_INT 5
81531: PUSH
81532: EMPTY
81533: LIST
81534: LIST
81535: PUSH
81536: LD_INT 3
81538: PUSH
81539: LD_INT 4
81541: PUSH
81542: EMPTY
81543: LIST
81544: LIST
81545: PUSH
81546: LD_INT 3
81548: PUSH
81549: LD_INT 3
81551: PUSH
81552: EMPTY
81553: LIST
81554: LIST
81555: PUSH
81556: LD_INT 5
81558: PUSH
81559: LD_INT 3
81561: PUSH
81562: EMPTY
81563: LIST
81564: LIST
81565: PUSH
81566: LD_INT 3
81568: PUSH
81569: LD_INT 5
81571: PUSH
81572: EMPTY
81573: LIST
81574: LIST
81575: PUSH
81576: LD_INT 0
81578: PUSH
81579: LD_INT 3
81581: PUSH
81582: EMPTY
81583: LIST
81584: LIST
81585: PUSH
81586: LD_INT 0
81588: PUSH
81589: LD_INT 2
81591: PUSH
81592: EMPTY
81593: LIST
81594: LIST
81595: PUSH
81596: LD_INT 1
81598: PUSH
81599: LD_INT 3
81601: PUSH
81602: EMPTY
81603: LIST
81604: LIST
81605: PUSH
81606: LD_INT 1
81608: PUSH
81609: LD_INT 4
81611: PUSH
81612: EMPTY
81613: LIST
81614: LIST
81615: PUSH
81616: LD_INT 0
81618: PUSH
81619: LD_INT 4
81621: PUSH
81622: EMPTY
81623: LIST
81624: LIST
81625: PUSH
81626: LD_INT 1
81628: NEG
81629: PUSH
81630: LD_INT 3
81632: PUSH
81633: EMPTY
81634: LIST
81635: LIST
81636: PUSH
81637: LD_INT 1
81639: NEG
81640: PUSH
81641: LD_INT 2
81643: PUSH
81644: EMPTY
81645: LIST
81646: LIST
81647: PUSH
81648: LD_INT 2
81650: PUSH
81651: LD_INT 4
81653: PUSH
81654: EMPTY
81655: LIST
81656: LIST
81657: PUSH
81658: LD_INT 2
81660: NEG
81661: PUSH
81662: LD_INT 2
81664: PUSH
81665: EMPTY
81666: LIST
81667: LIST
81668: PUSH
81669: LD_INT 4
81671: NEG
81672: PUSH
81673: LD_INT 0
81675: PUSH
81676: EMPTY
81677: LIST
81678: LIST
81679: PUSH
81680: LD_INT 4
81682: NEG
81683: PUSH
81684: LD_INT 1
81686: NEG
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: PUSH
81692: LD_INT 3
81694: NEG
81695: PUSH
81696: LD_INT 0
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: PUSH
81703: LD_INT 3
81705: NEG
81706: PUSH
81707: LD_INT 1
81709: PUSH
81710: EMPTY
81711: LIST
81712: LIST
81713: PUSH
81714: LD_INT 4
81716: NEG
81717: PUSH
81718: LD_INT 1
81720: PUSH
81721: EMPTY
81722: LIST
81723: LIST
81724: PUSH
81725: LD_INT 5
81727: NEG
81728: PUSH
81729: LD_INT 0
81731: PUSH
81732: EMPTY
81733: LIST
81734: LIST
81735: PUSH
81736: LD_INT 5
81738: NEG
81739: PUSH
81740: LD_INT 1
81742: NEG
81743: PUSH
81744: EMPTY
81745: LIST
81746: LIST
81747: PUSH
81748: LD_INT 5
81750: NEG
81751: PUSH
81752: LD_INT 2
81754: NEG
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: PUSH
81760: LD_INT 3
81762: NEG
81763: PUSH
81764: LD_INT 2
81766: PUSH
81767: EMPTY
81768: LIST
81769: LIST
81770: PUSH
81771: EMPTY
81772: LIST
81773: LIST
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: LIST
81779: LIST
81780: LIST
81781: LIST
81782: LIST
81783: LIST
81784: LIST
81785: LIST
81786: LIST
81787: LIST
81788: LIST
81789: LIST
81790: LIST
81791: LIST
81792: LIST
81793: LIST
81794: LIST
81795: LIST
81796: LIST
81797: LIST
81798: LIST
81799: LIST
81800: LIST
81801: LIST
81802: LIST
81803: LIST
81804: LIST
81805: LIST
81806: LIST
81807: LIST
81808: LIST
81809: LIST
81810: LIST
81811: LIST
81812: LIST
81813: LIST
81814: LIST
81815: LIST
81816: LIST
81817: ST_TO_ADDR
// end ; end ;
81818: GO 81821
81820: POP
// case btype of b_depot , b_warehouse :
81821: LD_VAR 0 1
81825: PUSH
81826: LD_INT 0
81828: DOUBLE
81829: EQUAL
81830: IFTRUE 81840
81832: LD_INT 1
81834: DOUBLE
81835: EQUAL
81836: IFTRUE 81840
81838: GO 82041
81840: POP
// case nation of nation_american :
81841: LD_VAR 0 5
81845: PUSH
81846: LD_INT 1
81848: DOUBLE
81849: EQUAL
81850: IFTRUE 81854
81852: GO 81910
81854: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
81855: LD_ADDR_VAR 0 9
81859: PUSH
81860: LD_VAR 0 11
81864: PUSH
81865: LD_VAR 0 12
81869: PUSH
81870: LD_VAR 0 13
81874: PUSH
81875: LD_VAR 0 14
81879: PUSH
81880: LD_VAR 0 15
81884: PUSH
81885: LD_VAR 0 16
81889: PUSH
81890: EMPTY
81891: LIST
81892: LIST
81893: LIST
81894: LIST
81895: LIST
81896: LIST
81897: PUSH
81898: LD_VAR 0 4
81902: PUSH
81903: LD_INT 1
81905: PLUS
81906: ARRAY
81907: ST_TO_ADDR
81908: GO 82039
81910: LD_INT 2
81912: DOUBLE
81913: EQUAL
81914: IFTRUE 81918
81916: GO 81974
81918: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
81919: LD_ADDR_VAR 0 9
81923: PUSH
81924: LD_VAR 0 17
81928: PUSH
81929: LD_VAR 0 18
81933: PUSH
81934: LD_VAR 0 19
81938: PUSH
81939: LD_VAR 0 20
81943: PUSH
81944: LD_VAR 0 21
81948: PUSH
81949: LD_VAR 0 22
81953: PUSH
81954: EMPTY
81955: LIST
81956: LIST
81957: LIST
81958: LIST
81959: LIST
81960: LIST
81961: PUSH
81962: LD_VAR 0 4
81966: PUSH
81967: LD_INT 1
81969: PLUS
81970: ARRAY
81971: ST_TO_ADDR
81972: GO 82039
81974: LD_INT 3
81976: DOUBLE
81977: EQUAL
81978: IFTRUE 81982
81980: GO 82038
81982: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
81983: LD_ADDR_VAR 0 9
81987: PUSH
81988: LD_VAR 0 23
81992: PUSH
81993: LD_VAR 0 24
81997: PUSH
81998: LD_VAR 0 25
82002: PUSH
82003: LD_VAR 0 26
82007: PUSH
82008: LD_VAR 0 27
82012: PUSH
82013: LD_VAR 0 28
82017: PUSH
82018: EMPTY
82019: LIST
82020: LIST
82021: LIST
82022: LIST
82023: LIST
82024: LIST
82025: PUSH
82026: LD_VAR 0 4
82030: PUSH
82031: LD_INT 1
82033: PLUS
82034: ARRAY
82035: ST_TO_ADDR
82036: GO 82039
82038: POP
82039: GO 82594
82041: LD_INT 2
82043: DOUBLE
82044: EQUAL
82045: IFTRUE 82055
82047: LD_INT 3
82049: DOUBLE
82050: EQUAL
82051: IFTRUE 82055
82053: GO 82111
82055: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
82056: LD_ADDR_VAR 0 9
82060: PUSH
82061: LD_VAR 0 29
82065: PUSH
82066: LD_VAR 0 30
82070: PUSH
82071: LD_VAR 0 31
82075: PUSH
82076: LD_VAR 0 32
82080: PUSH
82081: LD_VAR 0 33
82085: PUSH
82086: LD_VAR 0 34
82090: PUSH
82091: EMPTY
82092: LIST
82093: LIST
82094: LIST
82095: LIST
82096: LIST
82097: LIST
82098: PUSH
82099: LD_VAR 0 4
82103: PUSH
82104: LD_INT 1
82106: PLUS
82107: ARRAY
82108: ST_TO_ADDR
82109: GO 82594
82111: LD_INT 16
82113: DOUBLE
82114: EQUAL
82115: IFTRUE 82173
82117: LD_INT 17
82119: DOUBLE
82120: EQUAL
82121: IFTRUE 82173
82123: LD_INT 18
82125: DOUBLE
82126: EQUAL
82127: IFTRUE 82173
82129: LD_INT 19
82131: DOUBLE
82132: EQUAL
82133: IFTRUE 82173
82135: LD_INT 22
82137: DOUBLE
82138: EQUAL
82139: IFTRUE 82173
82141: LD_INT 20
82143: DOUBLE
82144: EQUAL
82145: IFTRUE 82173
82147: LD_INT 21
82149: DOUBLE
82150: EQUAL
82151: IFTRUE 82173
82153: LD_INT 23
82155: DOUBLE
82156: EQUAL
82157: IFTRUE 82173
82159: LD_INT 24
82161: DOUBLE
82162: EQUAL
82163: IFTRUE 82173
82165: LD_INT 25
82167: DOUBLE
82168: EQUAL
82169: IFTRUE 82173
82171: GO 82229
82173: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82174: LD_ADDR_VAR 0 9
82178: PUSH
82179: LD_VAR 0 35
82183: PUSH
82184: LD_VAR 0 36
82188: PUSH
82189: LD_VAR 0 37
82193: PUSH
82194: LD_VAR 0 38
82198: PUSH
82199: LD_VAR 0 39
82203: PUSH
82204: LD_VAR 0 40
82208: PUSH
82209: EMPTY
82210: LIST
82211: LIST
82212: LIST
82213: LIST
82214: LIST
82215: LIST
82216: PUSH
82217: LD_VAR 0 4
82221: PUSH
82222: LD_INT 1
82224: PLUS
82225: ARRAY
82226: ST_TO_ADDR
82227: GO 82594
82229: LD_INT 6
82231: DOUBLE
82232: EQUAL
82233: IFTRUE 82285
82235: LD_INT 7
82237: DOUBLE
82238: EQUAL
82239: IFTRUE 82285
82241: LD_INT 8
82243: DOUBLE
82244: EQUAL
82245: IFTRUE 82285
82247: LD_INT 13
82249: DOUBLE
82250: EQUAL
82251: IFTRUE 82285
82253: LD_INT 12
82255: DOUBLE
82256: EQUAL
82257: IFTRUE 82285
82259: LD_INT 15
82261: DOUBLE
82262: EQUAL
82263: IFTRUE 82285
82265: LD_INT 11
82267: DOUBLE
82268: EQUAL
82269: IFTRUE 82285
82271: LD_INT 14
82273: DOUBLE
82274: EQUAL
82275: IFTRUE 82285
82277: LD_INT 10
82279: DOUBLE
82280: EQUAL
82281: IFTRUE 82285
82283: GO 82341
82285: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82286: LD_ADDR_VAR 0 9
82290: PUSH
82291: LD_VAR 0 41
82295: PUSH
82296: LD_VAR 0 42
82300: PUSH
82301: LD_VAR 0 43
82305: PUSH
82306: LD_VAR 0 44
82310: PUSH
82311: LD_VAR 0 45
82315: PUSH
82316: LD_VAR 0 46
82320: PUSH
82321: EMPTY
82322: LIST
82323: LIST
82324: LIST
82325: LIST
82326: LIST
82327: LIST
82328: PUSH
82329: LD_VAR 0 4
82333: PUSH
82334: LD_INT 1
82336: PLUS
82337: ARRAY
82338: ST_TO_ADDR
82339: GO 82594
82341: LD_INT 36
82343: DOUBLE
82344: EQUAL
82345: IFTRUE 82349
82347: GO 82405
82349: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82350: LD_ADDR_VAR 0 9
82354: PUSH
82355: LD_VAR 0 47
82359: PUSH
82360: LD_VAR 0 48
82364: PUSH
82365: LD_VAR 0 49
82369: PUSH
82370: LD_VAR 0 50
82374: PUSH
82375: LD_VAR 0 51
82379: PUSH
82380: LD_VAR 0 52
82384: PUSH
82385: EMPTY
82386: LIST
82387: LIST
82388: LIST
82389: LIST
82390: LIST
82391: LIST
82392: PUSH
82393: LD_VAR 0 4
82397: PUSH
82398: LD_INT 1
82400: PLUS
82401: ARRAY
82402: ST_TO_ADDR
82403: GO 82594
82405: LD_INT 4
82407: DOUBLE
82408: EQUAL
82409: IFTRUE 82431
82411: LD_INT 5
82413: DOUBLE
82414: EQUAL
82415: IFTRUE 82431
82417: LD_INT 34
82419: DOUBLE
82420: EQUAL
82421: IFTRUE 82431
82423: LD_INT 37
82425: DOUBLE
82426: EQUAL
82427: IFTRUE 82431
82429: GO 82487
82431: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82432: LD_ADDR_VAR 0 9
82436: PUSH
82437: LD_VAR 0 53
82441: PUSH
82442: LD_VAR 0 54
82446: PUSH
82447: LD_VAR 0 55
82451: PUSH
82452: LD_VAR 0 56
82456: PUSH
82457: LD_VAR 0 57
82461: PUSH
82462: LD_VAR 0 58
82466: PUSH
82467: EMPTY
82468: LIST
82469: LIST
82470: LIST
82471: LIST
82472: LIST
82473: LIST
82474: PUSH
82475: LD_VAR 0 4
82479: PUSH
82480: LD_INT 1
82482: PLUS
82483: ARRAY
82484: ST_TO_ADDR
82485: GO 82594
82487: LD_INT 31
82489: DOUBLE
82490: EQUAL
82491: IFTRUE 82537
82493: LD_INT 32
82495: DOUBLE
82496: EQUAL
82497: IFTRUE 82537
82499: LD_INT 33
82501: DOUBLE
82502: EQUAL
82503: IFTRUE 82537
82505: LD_INT 27
82507: DOUBLE
82508: EQUAL
82509: IFTRUE 82537
82511: LD_INT 26
82513: DOUBLE
82514: EQUAL
82515: IFTRUE 82537
82517: LD_INT 28
82519: DOUBLE
82520: EQUAL
82521: IFTRUE 82537
82523: LD_INT 29
82525: DOUBLE
82526: EQUAL
82527: IFTRUE 82537
82529: LD_INT 30
82531: DOUBLE
82532: EQUAL
82533: IFTRUE 82537
82535: GO 82593
82537: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82538: LD_ADDR_VAR 0 9
82542: PUSH
82543: LD_VAR 0 59
82547: PUSH
82548: LD_VAR 0 60
82552: PUSH
82553: LD_VAR 0 61
82557: PUSH
82558: LD_VAR 0 62
82562: PUSH
82563: LD_VAR 0 63
82567: PUSH
82568: LD_VAR 0 64
82572: PUSH
82573: EMPTY
82574: LIST
82575: LIST
82576: LIST
82577: LIST
82578: LIST
82579: LIST
82580: PUSH
82581: LD_VAR 0 4
82585: PUSH
82586: LD_INT 1
82588: PLUS
82589: ARRAY
82590: ST_TO_ADDR
82591: GO 82594
82593: POP
// temp_list2 = [ ] ;
82594: LD_ADDR_VAR 0 10
82598: PUSH
82599: EMPTY
82600: ST_TO_ADDR
// for i in temp_list do
82601: LD_ADDR_VAR 0 8
82605: PUSH
82606: LD_VAR 0 9
82610: PUSH
82611: FOR_IN
82612: IFFALSE 82664
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82614: LD_ADDR_VAR 0 10
82618: PUSH
82619: LD_VAR 0 10
82623: PUSH
82624: LD_VAR 0 8
82628: PUSH
82629: LD_INT 1
82631: ARRAY
82632: PUSH
82633: LD_VAR 0 2
82637: PLUS
82638: PUSH
82639: LD_VAR 0 8
82643: PUSH
82644: LD_INT 2
82646: ARRAY
82647: PUSH
82648: LD_VAR 0 3
82652: PLUS
82653: PUSH
82654: EMPTY
82655: LIST
82656: LIST
82657: PUSH
82658: EMPTY
82659: LIST
82660: ADD
82661: ST_TO_ADDR
82662: GO 82611
82664: POP
82665: POP
// result = temp_list2 ;
82666: LD_ADDR_VAR 0 7
82670: PUSH
82671: LD_VAR 0 10
82675: ST_TO_ADDR
// end ;
82676: LD_VAR 0 7
82680: RET
// export function EnemyInRange ( unit , dist ) ; begin
82681: LD_INT 0
82683: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82684: LD_ADDR_VAR 0 3
82688: PUSH
82689: LD_VAR 0 1
82693: PPUSH
82694: CALL_OW 255
82698: PPUSH
82699: LD_VAR 0 1
82703: PPUSH
82704: CALL_OW 250
82708: PPUSH
82709: LD_VAR 0 1
82713: PPUSH
82714: CALL_OW 251
82718: PPUSH
82719: LD_VAR 0 2
82723: PPUSH
82724: CALL 56083 0 4
82728: PUSH
82729: LD_INT 4
82731: ARRAY
82732: ST_TO_ADDR
// end ;
82733: LD_VAR 0 3
82737: RET
// export function PlayerSeeMe ( unit ) ; begin
82738: LD_INT 0
82740: PPUSH
// result := See ( your_side , unit ) ;
82741: LD_ADDR_VAR 0 2
82745: PUSH
82746: LD_OWVAR 2
82750: PPUSH
82751: LD_VAR 0 1
82755: PPUSH
82756: CALL_OW 292
82760: ST_TO_ADDR
// end ;
82761: LD_VAR 0 2
82765: RET
// export function ReverseDir ( unit ) ; begin
82766: LD_INT 0
82768: PPUSH
// if not unit then
82769: LD_VAR 0 1
82773: NOT
82774: IFFALSE 82778
// exit ;
82776: GO 82801
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82778: LD_ADDR_VAR 0 2
82782: PUSH
82783: LD_VAR 0 1
82787: PPUSH
82788: CALL_OW 254
82792: PUSH
82793: LD_INT 3
82795: PLUS
82796: PUSH
82797: LD_INT 6
82799: MOD
82800: ST_TO_ADDR
// end ;
82801: LD_VAR 0 2
82805: RET
// export function ReverseArray ( array ) ; var i ; begin
82806: LD_INT 0
82808: PPUSH
82809: PPUSH
// if not array then
82810: LD_VAR 0 1
82814: NOT
82815: IFFALSE 82819
// exit ;
82817: GO 82874
// result := [ ] ;
82819: LD_ADDR_VAR 0 2
82823: PUSH
82824: EMPTY
82825: ST_TO_ADDR
// for i := array downto 1 do
82826: LD_ADDR_VAR 0 3
82830: PUSH
82831: DOUBLE
82832: LD_VAR 0 1
82836: INC
82837: ST_TO_ADDR
82838: LD_INT 1
82840: PUSH
82841: FOR_DOWNTO
82842: IFFALSE 82872
// result := Join ( result , array [ i ] ) ;
82844: LD_ADDR_VAR 0 2
82848: PUSH
82849: LD_VAR 0 2
82853: PPUSH
82854: LD_VAR 0 1
82858: PUSH
82859: LD_VAR 0 3
82863: ARRAY
82864: PPUSH
82865: CALL 87499 0 2
82869: ST_TO_ADDR
82870: GO 82841
82872: POP
82873: POP
// end ;
82874: LD_VAR 0 2
82878: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
82879: LD_INT 0
82881: PPUSH
82882: PPUSH
82883: PPUSH
82884: PPUSH
82885: PPUSH
82886: PPUSH
// if not unit or not hexes then
82887: LD_VAR 0 1
82891: NOT
82892: PUSH
82893: LD_VAR 0 2
82897: NOT
82898: OR
82899: IFFALSE 82903
// exit ;
82901: GO 83026
// dist := 9999 ;
82903: LD_ADDR_VAR 0 5
82907: PUSH
82908: LD_INT 9999
82910: ST_TO_ADDR
// for i = 1 to hexes do
82911: LD_ADDR_VAR 0 4
82915: PUSH
82916: DOUBLE
82917: LD_INT 1
82919: DEC
82920: ST_TO_ADDR
82921: LD_VAR 0 2
82925: PUSH
82926: FOR_TO
82927: IFFALSE 83014
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82929: LD_ADDR_VAR 0 6
82933: PUSH
82934: LD_VAR 0 1
82938: PPUSH
82939: LD_VAR 0 2
82943: PUSH
82944: LD_VAR 0 4
82948: ARRAY
82949: PUSH
82950: LD_INT 1
82952: ARRAY
82953: PPUSH
82954: LD_VAR 0 2
82958: PUSH
82959: LD_VAR 0 4
82963: ARRAY
82964: PUSH
82965: LD_INT 2
82967: ARRAY
82968: PPUSH
82969: CALL_OW 297
82973: ST_TO_ADDR
// if tdist < dist then
82974: LD_VAR 0 6
82978: PUSH
82979: LD_VAR 0 5
82983: LESS
82984: IFFALSE 83012
// begin hex := hexes [ i ] ;
82986: LD_ADDR_VAR 0 8
82990: PUSH
82991: LD_VAR 0 2
82995: PUSH
82996: LD_VAR 0 4
83000: ARRAY
83001: ST_TO_ADDR
// dist := tdist ;
83002: LD_ADDR_VAR 0 5
83006: PUSH
83007: LD_VAR 0 6
83011: ST_TO_ADDR
// end ; end ;
83012: GO 82926
83014: POP
83015: POP
// result := hex ;
83016: LD_ADDR_VAR 0 3
83020: PUSH
83021: LD_VAR 0 8
83025: ST_TO_ADDR
// end ;
83026: LD_VAR 0 3
83030: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
83031: LD_INT 0
83033: PPUSH
83034: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83035: LD_VAR 0 1
83039: NOT
83040: PUSH
83041: LD_VAR 0 1
83045: PUSH
83046: LD_INT 21
83048: PUSH
83049: LD_INT 2
83051: PUSH
83052: EMPTY
83053: LIST
83054: LIST
83055: PUSH
83056: LD_INT 23
83058: PUSH
83059: LD_INT 2
83061: PUSH
83062: EMPTY
83063: LIST
83064: LIST
83065: PUSH
83066: EMPTY
83067: LIST
83068: LIST
83069: PPUSH
83070: CALL_OW 69
83074: IN
83075: NOT
83076: OR
83077: IFFALSE 83081
// exit ;
83079: GO 83128
// for i = 1 to 3 do
83081: LD_ADDR_VAR 0 3
83085: PUSH
83086: DOUBLE
83087: LD_INT 1
83089: DEC
83090: ST_TO_ADDR
83091: LD_INT 3
83093: PUSH
83094: FOR_TO
83095: IFFALSE 83126
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
83097: LD_VAR 0 1
83101: PPUSH
83102: CALL_OW 250
83106: PPUSH
83107: LD_VAR 0 1
83111: PPUSH
83112: CALL_OW 251
83116: PPUSH
83117: LD_INT 1
83119: PPUSH
83120: CALL_OW 453
83124: GO 83094
83126: POP
83127: POP
// end ;
83128: LD_VAR 0 2
83132: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83133: LD_INT 0
83135: PPUSH
83136: PPUSH
83137: PPUSH
83138: PPUSH
83139: PPUSH
83140: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83141: LD_VAR 0 1
83145: NOT
83146: PUSH
83147: LD_VAR 0 2
83151: NOT
83152: OR
83153: PUSH
83154: LD_VAR 0 1
83158: PPUSH
83159: CALL_OW 314
83163: OR
83164: IFFALSE 83168
// exit ;
83166: GO 83609
// x := GetX ( enemy_unit ) ;
83168: LD_ADDR_VAR 0 7
83172: PUSH
83173: LD_VAR 0 2
83177: PPUSH
83178: CALL_OW 250
83182: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83183: LD_ADDR_VAR 0 8
83187: PUSH
83188: LD_VAR 0 2
83192: PPUSH
83193: CALL_OW 251
83197: ST_TO_ADDR
// if not x or not y then
83198: LD_VAR 0 7
83202: NOT
83203: PUSH
83204: LD_VAR 0 8
83208: NOT
83209: OR
83210: IFFALSE 83214
// exit ;
83212: GO 83609
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83214: LD_ADDR_VAR 0 6
83218: PUSH
83219: LD_VAR 0 7
83223: PPUSH
83224: LD_INT 0
83226: PPUSH
83227: LD_INT 4
83229: PPUSH
83230: CALL_OW 272
83234: PUSH
83235: LD_VAR 0 8
83239: PPUSH
83240: LD_INT 0
83242: PPUSH
83243: LD_INT 4
83245: PPUSH
83246: CALL_OW 273
83250: PUSH
83251: EMPTY
83252: LIST
83253: LIST
83254: PUSH
83255: LD_VAR 0 7
83259: PPUSH
83260: LD_INT 1
83262: PPUSH
83263: LD_INT 4
83265: PPUSH
83266: CALL_OW 272
83270: PUSH
83271: LD_VAR 0 8
83275: PPUSH
83276: LD_INT 1
83278: PPUSH
83279: LD_INT 4
83281: PPUSH
83282: CALL_OW 273
83286: PUSH
83287: EMPTY
83288: LIST
83289: LIST
83290: PUSH
83291: LD_VAR 0 7
83295: PPUSH
83296: LD_INT 2
83298: PPUSH
83299: LD_INT 4
83301: PPUSH
83302: CALL_OW 272
83306: PUSH
83307: LD_VAR 0 8
83311: PPUSH
83312: LD_INT 2
83314: PPUSH
83315: LD_INT 4
83317: PPUSH
83318: CALL_OW 273
83322: PUSH
83323: EMPTY
83324: LIST
83325: LIST
83326: PUSH
83327: LD_VAR 0 7
83331: PPUSH
83332: LD_INT 3
83334: PPUSH
83335: LD_INT 4
83337: PPUSH
83338: CALL_OW 272
83342: PUSH
83343: LD_VAR 0 8
83347: PPUSH
83348: LD_INT 3
83350: PPUSH
83351: LD_INT 4
83353: PPUSH
83354: CALL_OW 273
83358: PUSH
83359: EMPTY
83360: LIST
83361: LIST
83362: PUSH
83363: LD_VAR 0 7
83367: PPUSH
83368: LD_INT 4
83370: PPUSH
83371: LD_INT 4
83373: PPUSH
83374: CALL_OW 272
83378: PUSH
83379: LD_VAR 0 8
83383: PPUSH
83384: LD_INT 4
83386: PPUSH
83387: LD_INT 4
83389: PPUSH
83390: CALL_OW 273
83394: PUSH
83395: EMPTY
83396: LIST
83397: LIST
83398: PUSH
83399: LD_VAR 0 7
83403: PPUSH
83404: LD_INT 5
83406: PPUSH
83407: LD_INT 4
83409: PPUSH
83410: CALL_OW 272
83414: PUSH
83415: LD_VAR 0 8
83419: PPUSH
83420: LD_INT 5
83422: PPUSH
83423: LD_INT 4
83425: PPUSH
83426: CALL_OW 273
83430: PUSH
83431: EMPTY
83432: LIST
83433: LIST
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: LIST
83439: LIST
83440: LIST
83441: LIST
83442: ST_TO_ADDR
// for i = tmp downto 1 do
83443: LD_ADDR_VAR 0 4
83447: PUSH
83448: DOUBLE
83449: LD_VAR 0 6
83453: INC
83454: ST_TO_ADDR
83455: LD_INT 1
83457: PUSH
83458: FOR_DOWNTO
83459: IFFALSE 83560
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83461: LD_VAR 0 6
83465: PUSH
83466: LD_VAR 0 4
83470: ARRAY
83471: PUSH
83472: LD_INT 1
83474: ARRAY
83475: PPUSH
83476: LD_VAR 0 6
83480: PUSH
83481: LD_VAR 0 4
83485: ARRAY
83486: PUSH
83487: LD_INT 2
83489: ARRAY
83490: PPUSH
83491: CALL_OW 488
83495: NOT
83496: PUSH
83497: LD_VAR 0 6
83501: PUSH
83502: LD_VAR 0 4
83506: ARRAY
83507: PUSH
83508: LD_INT 1
83510: ARRAY
83511: PPUSH
83512: LD_VAR 0 6
83516: PUSH
83517: LD_VAR 0 4
83521: ARRAY
83522: PUSH
83523: LD_INT 2
83525: ARRAY
83526: PPUSH
83527: CALL_OW 428
83531: PUSH
83532: LD_INT 0
83534: NONEQUAL
83535: OR
83536: IFFALSE 83558
// tmp := Delete ( tmp , i ) ;
83538: LD_ADDR_VAR 0 6
83542: PUSH
83543: LD_VAR 0 6
83547: PPUSH
83548: LD_VAR 0 4
83552: PPUSH
83553: CALL_OW 3
83557: ST_TO_ADDR
83558: GO 83458
83560: POP
83561: POP
// j := GetClosestHex ( unit , tmp ) ;
83562: LD_ADDR_VAR 0 5
83566: PUSH
83567: LD_VAR 0 1
83571: PPUSH
83572: LD_VAR 0 6
83576: PPUSH
83577: CALL 82879 0 2
83581: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83582: LD_VAR 0 1
83586: PPUSH
83587: LD_VAR 0 5
83591: PUSH
83592: LD_INT 1
83594: ARRAY
83595: PPUSH
83596: LD_VAR 0 5
83600: PUSH
83601: LD_INT 2
83603: ARRAY
83604: PPUSH
83605: CALL_OW 111
// end ;
83609: LD_VAR 0 3
83613: RET
// export function PrepareApemanSoldier ( ) ; begin
83614: LD_INT 0
83616: PPUSH
// uc_nation := 0 ;
83617: LD_ADDR_OWVAR 21
83621: PUSH
83622: LD_INT 0
83624: ST_TO_ADDR
// hc_sex := sex_male ;
83625: LD_ADDR_OWVAR 27
83629: PUSH
83630: LD_INT 1
83632: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83633: LD_ADDR_OWVAR 28
83637: PUSH
83638: LD_INT 15
83640: ST_TO_ADDR
// hc_gallery :=  ;
83641: LD_ADDR_OWVAR 33
83645: PUSH
83646: LD_STRING 
83648: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83649: LD_ADDR_OWVAR 31
83653: PUSH
83654: LD_INT 0
83656: PPUSH
83657: LD_INT 3
83659: PPUSH
83660: CALL_OW 12
83664: PUSH
83665: LD_INT 0
83667: PPUSH
83668: LD_INT 3
83670: PPUSH
83671: CALL_OW 12
83675: PUSH
83676: LD_INT 0
83678: PUSH
83679: LD_INT 0
83681: PUSH
83682: EMPTY
83683: LIST
83684: LIST
83685: LIST
83686: LIST
83687: ST_TO_ADDR
// end ;
83688: LD_VAR 0 1
83692: RET
// export function PrepareApemanEngineer ( ) ; begin
83693: LD_INT 0
83695: PPUSH
// uc_nation := 0 ;
83696: LD_ADDR_OWVAR 21
83700: PUSH
83701: LD_INT 0
83703: ST_TO_ADDR
// hc_sex := sex_male ;
83704: LD_ADDR_OWVAR 27
83708: PUSH
83709: LD_INT 1
83711: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83712: LD_ADDR_OWVAR 28
83716: PUSH
83717: LD_INT 16
83719: ST_TO_ADDR
// hc_gallery :=  ;
83720: LD_ADDR_OWVAR 33
83724: PUSH
83725: LD_STRING 
83727: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83728: LD_ADDR_OWVAR 31
83732: PUSH
83733: LD_INT 0
83735: PPUSH
83736: LD_INT 3
83738: PPUSH
83739: CALL_OW 12
83743: PUSH
83744: LD_INT 0
83746: PPUSH
83747: LD_INT 3
83749: PPUSH
83750: CALL_OW 12
83754: PUSH
83755: LD_INT 0
83757: PUSH
83758: LD_INT 0
83760: PUSH
83761: EMPTY
83762: LIST
83763: LIST
83764: LIST
83765: LIST
83766: ST_TO_ADDR
// end ;
83767: LD_VAR 0 1
83771: RET
// export function PrepareApeman ( agressivity ) ; begin
83772: LD_INT 0
83774: PPUSH
// uc_side := 0 ;
83775: LD_ADDR_OWVAR 20
83779: PUSH
83780: LD_INT 0
83782: ST_TO_ADDR
// uc_nation := 0 ;
83783: LD_ADDR_OWVAR 21
83787: PUSH
83788: LD_INT 0
83790: ST_TO_ADDR
// hc_sex := sex_male ;
83791: LD_ADDR_OWVAR 27
83795: PUSH
83796: LD_INT 1
83798: ST_TO_ADDR
// hc_class := class_apeman ;
83799: LD_ADDR_OWVAR 28
83803: PUSH
83804: LD_INT 12
83806: ST_TO_ADDR
// hc_gallery :=  ;
83807: LD_ADDR_OWVAR 33
83811: PUSH
83812: LD_STRING 
83814: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83815: LD_ADDR_OWVAR 35
83819: PUSH
83820: LD_VAR 0 1
83824: NEG
83825: PPUSH
83826: LD_VAR 0 1
83830: PPUSH
83831: CALL_OW 12
83835: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83836: LD_ADDR_OWVAR 31
83840: PUSH
83841: LD_INT 0
83843: PPUSH
83844: LD_INT 3
83846: PPUSH
83847: CALL_OW 12
83851: PUSH
83852: LD_INT 0
83854: PPUSH
83855: LD_INT 3
83857: PPUSH
83858: CALL_OW 12
83862: PUSH
83863: LD_INT 0
83865: PUSH
83866: LD_INT 0
83868: PUSH
83869: EMPTY
83870: LIST
83871: LIST
83872: LIST
83873: LIST
83874: ST_TO_ADDR
// end ;
83875: LD_VAR 0 2
83879: RET
// export function PrepareTiger ( agressivity ) ; begin
83880: LD_INT 0
83882: PPUSH
// uc_side := 0 ;
83883: LD_ADDR_OWVAR 20
83887: PUSH
83888: LD_INT 0
83890: ST_TO_ADDR
// uc_nation := 0 ;
83891: LD_ADDR_OWVAR 21
83895: PUSH
83896: LD_INT 0
83898: ST_TO_ADDR
// hc_class := class_tiger ;
83899: LD_ADDR_OWVAR 28
83903: PUSH
83904: LD_INT 14
83906: ST_TO_ADDR
// hc_gallery :=  ;
83907: LD_ADDR_OWVAR 33
83911: PUSH
83912: LD_STRING 
83914: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83915: LD_ADDR_OWVAR 35
83919: PUSH
83920: LD_VAR 0 1
83924: NEG
83925: PPUSH
83926: LD_VAR 0 1
83930: PPUSH
83931: CALL_OW 12
83935: ST_TO_ADDR
// end ;
83936: LD_VAR 0 2
83940: RET
// export function PrepareEnchidna ( ) ; begin
83941: LD_INT 0
83943: PPUSH
// uc_side := 0 ;
83944: LD_ADDR_OWVAR 20
83948: PUSH
83949: LD_INT 0
83951: ST_TO_ADDR
// uc_nation := 0 ;
83952: LD_ADDR_OWVAR 21
83956: PUSH
83957: LD_INT 0
83959: ST_TO_ADDR
// hc_class := class_baggie ;
83960: LD_ADDR_OWVAR 28
83964: PUSH
83965: LD_INT 13
83967: ST_TO_ADDR
// hc_gallery :=  ;
83968: LD_ADDR_OWVAR 33
83972: PUSH
83973: LD_STRING 
83975: ST_TO_ADDR
// end ;
83976: LD_VAR 0 1
83980: RET
// export function PrepareFrog ( ) ; begin
83981: LD_INT 0
83983: PPUSH
// uc_side := 0 ;
83984: LD_ADDR_OWVAR 20
83988: PUSH
83989: LD_INT 0
83991: ST_TO_ADDR
// uc_nation := 0 ;
83992: LD_ADDR_OWVAR 21
83996: PUSH
83997: LD_INT 0
83999: ST_TO_ADDR
// hc_class := class_frog ;
84000: LD_ADDR_OWVAR 28
84004: PUSH
84005: LD_INT 19
84007: ST_TO_ADDR
// hc_gallery :=  ;
84008: LD_ADDR_OWVAR 33
84012: PUSH
84013: LD_STRING 
84015: ST_TO_ADDR
// end ;
84016: LD_VAR 0 1
84020: RET
// export function PrepareFish ( ) ; begin
84021: LD_INT 0
84023: PPUSH
// uc_side := 0 ;
84024: LD_ADDR_OWVAR 20
84028: PUSH
84029: LD_INT 0
84031: ST_TO_ADDR
// uc_nation := 0 ;
84032: LD_ADDR_OWVAR 21
84036: PUSH
84037: LD_INT 0
84039: ST_TO_ADDR
// hc_class := class_fish ;
84040: LD_ADDR_OWVAR 28
84044: PUSH
84045: LD_INT 20
84047: ST_TO_ADDR
// hc_gallery :=  ;
84048: LD_ADDR_OWVAR 33
84052: PUSH
84053: LD_STRING 
84055: ST_TO_ADDR
// end ;
84056: LD_VAR 0 1
84060: RET
// export function PrepareBird ( ) ; begin
84061: LD_INT 0
84063: PPUSH
// uc_side := 0 ;
84064: LD_ADDR_OWVAR 20
84068: PUSH
84069: LD_INT 0
84071: ST_TO_ADDR
// uc_nation := 0 ;
84072: LD_ADDR_OWVAR 21
84076: PUSH
84077: LD_INT 0
84079: ST_TO_ADDR
// hc_class := class_phororhacos ;
84080: LD_ADDR_OWVAR 28
84084: PUSH
84085: LD_INT 18
84087: ST_TO_ADDR
// hc_gallery :=  ;
84088: LD_ADDR_OWVAR 33
84092: PUSH
84093: LD_STRING 
84095: ST_TO_ADDR
// end ;
84096: LD_VAR 0 1
84100: RET
// export function PrepareHorse ( ) ; begin
84101: LD_INT 0
84103: PPUSH
// uc_side := 0 ;
84104: LD_ADDR_OWVAR 20
84108: PUSH
84109: LD_INT 0
84111: ST_TO_ADDR
// uc_nation := 0 ;
84112: LD_ADDR_OWVAR 21
84116: PUSH
84117: LD_INT 0
84119: ST_TO_ADDR
// hc_class := class_horse ;
84120: LD_ADDR_OWVAR 28
84124: PUSH
84125: LD_INT 21
84127: ST_TO_ADDR
// hc_gallery :=  ;
84128: LD_ADDR_OWVAR 33
84132: PUSH
84133: LD_STRING 
84135: ST_TO_ADDR
// end ;
84136: LD_VAR 0 1
84140: RET
// export function PrepareMastodont ( ) ; begin
84141: LD_INT 0
84143: PPUSH
// uc_side := 0 ;
84144: LD_ADDR_OWVAR 20
84148: PUSH
84149: LD_INT 0
84151: ST_TO_ADDR
// uc_nation := 0 ;
84152: LD_ADDR_OWVAR 21
84156: PUSH
84157: LD_INT 0
84159: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84160: LD_ADDR_OWVAR 37
84164: PUSH
84165: LD_INT 31
84167: ST_TO_ADDR
// vc_control := control_rider ;
84168: LD_ADDR_OWVAR 38
84172: PUSH
84173: LD_INT 4
84175: ST_TO_ADDR
// end ;
84176: LD_VAR 0 1
84180: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84181: LD_INT 0
84183: PPUSH
84184: PPUSH
84185: PPUSH
// uc_side = 0 ;
84186: LD_ADDR_OWVAR 20
84190: PUSH
84191: LD_INT 0
84193: ST_TO_ADDR
// uc_nation = 0 ;
84194: LD_ADDR_OWVAR 21
84198: PUSH
84199: LD_INT 0
84201: ST_TO_ADDR
// InitHc_All ( ) ;
84202: CALL_OW 584
// InitVc ;
84206: CALL_OW 20
// if mastodonts then
84210: LD_VAR 0 6
84214: IFFALSE 84281
// for i = 1 to mastodonts do
84216: LD_ADDR_VAR 0 11
84220: PUSH
84221: DOUBLE
84222: LD_INT 1
84224: DEC
84225: ST_TO_ADDR
84226: LD_VAR 0 6
84230: PUSH
84231: FOR_TO
84232: IFFALSE 84279
// begin vc_chassis := 31 ;
84234: LD_ADDR_OWVAR 37
84238: PUSH
84239: LD_INT 31
84241: ST_TO_ADDR
// vc_control := control_rider ;
84242: LD_ADDR_OWVAR 38
84246: PUSH
84247: LD_INT 4
84249: ST_TO_ADDR
// animal := CreateVehicle ;
84250: LD_ADDR_VAR 0 12
84254: PUSH
84255: CALL_OW 45
84259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84260: LD_VAR 0 12
84264: PPUSH
84265: LD_VAR 0 8
84269: PPUSH
84270: LD_INT 0
84272: PPUSH
84273: CALL 86416 0 3
// end ;
84277: GO 84231
84279: POP
84280: POP
// if horses then
84281: LD_VAR 0 5
84285: IFFALSE 84352
// for i = 1 to horses do
84287: LD_ADDR_VAR 0 11
84291: PUSH
84292: DOUBLE
84293: LD_INT 1
84295: DEC
84296: ST_TO_ADDR
84297: LD_VAR 0 5
84301: PUSH
84302: FOR_TO
84303: IFFALSE 84350
// begin hc_class := 21 ;
84305: LD_ADDR_OWVAR 28
84309: PUSH
84310: LD_INT 21
84312: ST_TO_ADDR
// hc_gallery :=  ;
84313: LD_ADDR_OWVAR 33
84317: PUSH
84318: LD_STRING 
84320: ST_TO_ADDR
// animal := CreateHuman ;
84321: LD_ADDR_VAR 0 12
84325: PUSH
84326: CALL_OW 44
84330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84331: LD_VAR 0 12
84335: PPUSH
84336: LD_VAR 0 8
84340: PPUSH
84341: LD_INT 0
84343: PPUSH
84344: CALL 86416 0 3
// end ;
84348: GO 84302
84350: POP
84351: POP
// if birds then
84352: LD_VAR 0 1
84356: IFFALSE 84423
// for i = 1 to birds do
84358: LD_ADDR_VAR 0 11
84362: PUSH
84363: DOUBLE
84364: LD_INT 1
84366: DEC
84367: ST_TO_ADDR
84368: LD_VAR 0 1
84372: PUSH
84373: FOR_TO
84374: IFFALSE 84421
// begin hc_class = 18 ;
84376: LD_ADDR_OWVAR 28
84380: PUSH
84381: LD_INT 18
84383: ST_TO_ADDR
// hc_gallery =  ;
84384: LD_ADDR_OWVAR 33
84388: PUSH
84389: LD_STRING 
84391: ST_TO_ADDR
// animal := CreateHuman ;
84392: LD_ADDR_VAR 0 12
84396: PUSH
84397: CALL_OW 44
84401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84402: LD_VAR 0 12
84406: PPUSH
84407: LD_VAR 0 8
84411: PPUSH
84412: LD_INT 0
84414: PPUSH
84415: CALL 86416 0 3
// end ;
84419: GO 84373
84421: POP
84422: POP
// if tigers then
84423: LD_VAR 0 2
84427: IFFALSE 84511
// for i = 1 to tigers do
84429: LD_ADDR_VAR 0 11
84433: PUSH
84434: DOUBLE
84435: LD_INT 1
84437: DEC
84438: ST_TO_ADDR
84439: LD_VAR 0 2
84443: PUSH
84444: FOR_TO
84445: IFFALSE 84509
// begin hc_class = class_tiger ;
84447: LD_ADDR_OWVAR 28
84451: PUSH
84452: LD_INT 14
84454: ST_TO_ADDR
// hc_gallery =  ;
84455: LD_ADDR_OWVAR 33
84459: PUSH
84460: LD_STRING 
84462: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84463: LD_ADDR_OWVAR 35
84467: PUSH
84468: LD_INT 7
84470: NEG
84471: PPUSH
84472: LD_INT 7
84474: PPUSH
84475: CALL_OW 12
84479: ST_TO_ADDR
// animal := CreateHuman ;
84480: LD_ADDR_VAR 0 12
84484: PUSH
84485: CALL_OW 44
84489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84490: LD_VAR 0 12
84494: PPUSH
84495: LD_VAR 0 8
84499: PPUSH
84500: LD_INT 0
84502: PPUSH
84503: CALL 86416 0 3
// end ;
84507: GO 84444
84509: POP
84510: POP
// if apemans then
84511: LD_VAR 0 3
84515: IFFALSE 84638
// for i = 1 to apemans do
84517: LD_ADDR_VAR 0 11
84521: PUSH
84522: DOUBLE
84523: LD_INT 1
84525: DEC
84526: ST_TO_ADDR
84527: LD_VAR 0 3
84531: PUSH
84532: FOR_TO
84533: IFFALSE 84636
// begin hc_class = class_apeman ;
84535: LD_ADDR_OWVAR 28
84539: PUSH
84540: LD_INT 12
84542: ST_TO_ADDR
// hc_gallery =  ;
84543: LD_ADDR_OWVAR 33
84547: PUSH
84548: LD_STRING 
84550: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84551: LD_ADDR_OWVAR 35
84555: PUSH
84556: LD_INT 2
84558: NEG
84559: PPUSH
84560: LD_INT 2
84562: PPUSH
84563: CALL_OW 12
84567: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84568: LD_ADDR_OWVAR 31
84572: PUSH
84573: LD_INT 1
84575: PPUSH
84576: LD_INT 3
84578: PPUSH
84579: CALL_OW 12
84583: PUSH
84584: LD_INT 1
84586: PPUSH
84587: LD_INT 3
84589: PPUSH
84590: CALL_OW 12
84594: PUSH
84595: LD_INT 0
84597: PUSH
84598: LD_INT 0
84600: PUSH
84601: EMPTY
84602: LIST
84603: LIST
84604: LIST
84605: LIST
84606: ST_TO_ADDR
// animal := CreateHuman ;
84607: LD_ADDR_VAR 0 12
84611: PUSH
84612: CALL_OW 44
84616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84617: LD_VAR 0 12
84621: PPUSH
84622: LD_VAR 0 8
84626: PPUSH
84627: LD_INT 0
84629: PPUSH
84630: CALL 86416 0 3
// end ;
84634: GO 84532
84636: POP
84637: POP
// if enchidnas then
84638: LD_VAR 0 4
84642: IFFALSE 84709
// for i = 1 to enchidnas do
84644: LD_ADDR_VAR 0 11
84648: PUSH
84649: DOUBLE
84650: LD_INT 1
84652: DEC
84653: ST_TO_ADDR
84654: LD_VAR 0 4
84658: PUSH
84659: FOR_TO
84660: IFFALSE 84707
// begin hc_class = 13 ;
84662: LD_ADDR_OWVAR 28
84666: PUSH
84667: LD_INT 13
84669: ST_TO_ADDR
// hc_gallery =  ;
84670: LD_ADDR_OWVAR 33
84674: PUSH
84675: LD_STRING 
84677: ST_TO_ADDR
// animal := CreateHuman ;
84678: LD_ADDR_VAR 0 12
84682: PUSH
84683: CALL_OW 44
84687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84688: LD_VAR 0 12
84692: PPUSH
84693: LD_VAR 0 8
84697: PPUSH
84698: LD_INT 0
84700: PPUSH
84701: CALL 86416 0 3
// end ;
84705: GO 84659
84707: POP
84708: POP
// if fishes then
84709: LD_VAR 0 7
84713: IFFALSE 84780
// for i = 1 to fishes do
84715: LD_ADDR_VAR 0 11
84719: PUSH
84720: DOUBLE
84721: LD_INT 1
84723: DEC
84724: ST_TO_ADDR
84725: LD_VAR 0 7
84729: PUSH
84730: FOR_TO
84731: IFFALSE 84778
// begin hc_class = 20 ;
84733: LD_ADDR_OWVAR 28
84737: PUSH
84738: LD_INT 20
84740: ST_TO_ADDR
// hc_gallery =  ;
84741: LD_ADDR_OWVAR 33
84745: PUSH
84746: LD_STRING 
84748: ST_TO_ADDR
// animal := CreateHuman ;
84749: LD_ADDR_VAR 0 12
84753: PUSH
84754: CALL_OW 44
84758: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
84759: LD_VAR 0 12
84763: PPUSH
84764: LD_VAR 0 9
84768: PPUSH
84769: LD_INT 0
84771: PPUSH
84772: CALL 86416 0 3
// end ;
84776: GO 84730
84778: POP
84779: POP
// end ;
84780: LD_VAR 0 10
84784: RET
// export function WantHeal ( sci , unit ) ; begin
84785: LD_INT 0
84787: PPUSH
// if GetTaskList ( sci ) > 0 then
84788: LD_VAR 0 1
84792: PPUSH
84793: CALL_OW 437
84797: PUSH
84798: LD_INT 0
84800: GREATER
84801: IFFALSE 84871
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
84803: LD_VAR 0 1
84807: PPUSH
84808: CALL_OW 437
84812: PUSH
84813: LD_INT 1
84815: ARRAY
84816: PUSH
84817: LD_INT 1
84819: ARRAY
84820: PUSH
84821: LD_STRING l
84823: EQUAL
84824: PUSH
84825: LD_VAR 0 1
84829: PPUSH
84830: CALL_OW 437
84834: PUSH
84835: LD_INT 1
84837: ARRAY
84838: PUSH
84839: LD_INT 4
84841: ARRAY
84842: PUSH
84843: LD_VAR 0 2
84847: EQUAL
84848: AND
84849: IFFALSE 84861
// result := true else
84851: LD_ADDR_VAR 0 3
84855: PUSH
84856: LD_INT 1
84858: ST_TO_ADDR
84859: GO 84869
// result := false ;
84861: LD_ADDR_VAR 0 3
84865: PUSH
84866: LD_INT 0
84868: ST_TO_ADDR
// end else
84869: GO 84879
// result := false ;
84871: LD_ADDR_VAR 0 3
84875: PUSH
84876: LD_INT 0
84878: ST_TO_ADDR
// end ;
84879: LD_VAR 0 3
84883: RET
// export function HealTarget ( sci ) ; begin
84884: LD_INT 0
84886: PPUSH
// if not sci then
84887: LD_VAR 0 1
84891: NOT
84892: IFFALSE 84896
// exit ;
84894: GO 84961
// result := 0 ;
84896: LD_ADDR_VAR 0 2
84900: PUSH
84901: LD_INT 0
84903: ST_TO_ADDR
// if GetTaskList ( sci ) then
84904: LD_VAR 0 1
84908: PPUSH
84909: CALL_OW 437
84913: IFFALSE 84961
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
84915: LD_VAR 0 1
84919: PPUSH
84920: CALL_OW 437
84924: PUSH
84925: LD_INT 1
84927: ARRAY
84928: PUSH
84929: LD_INT 1
84931: ARRAY
84932: PUSH
84933: LD_STRING l
84935: EQUAL
84936: IFFALSE 84961
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
84938: LD_ADDR_VAR 0 2
84942: PUSH
84943: LD_VAR 0 1
84947: PPUSH
84948: CALL_OW 437
84952: PUSH
84953: LD_INT 1
84955: ARRAY
84956: PUSH
84957: LD_INT 4
84959: ARRAY
84960: ST_TO_ADDR
// end ;
84961: LD_VAR 0 2
84965: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84966: LD_INT 0
84968: PPUSH
84969: PPUSH
84970: PPUSH
84971: PPUSH
// if not base_units then
84972: LD_VAR 0 1
84976: NOT
84977: IFFALSE 84981
// exit ;
84979: GO 85068
// result := false ;
84981: LD_ADDR_VAR 0 2
84985: PUSH
84986: LD_INT 0
84988: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84989: LD_ADDR_VAR 0 5
84993: PUSH
84994: LD_VAR 0 1
84998: PPUSH
84999: LD_INT 21
85001: PUSH
85002: LD_INT 3
85004: PUSH
85005: EMPTY
85006: LIST
85007: LIST
85008: PPUSH
85009: CALL_OW 72
85013: ST_TO_ADDR
// if not tmp then
85014: LD_VAR 0 5
85018: NOT
85019: IFFALSE 85023
// exit ;
85021: GO 85068
// for i in tmp do
85023: LD_ADDR_VAR 0 3
85027: PUSH
85028: LD_VAR 0 5
85032: PUSH
85033: FOR_IN
85034: IFFALSE 85066
// begin result := EnemyInRange ( i , 22 ) ;
85036: LD_ADDR_VAR 0 2
85040: PUSH
85041: LD_VAR 0 3
85045: PPUSH
85046: LD_INT 22
85048: PPUSH
85049: CALL 82681 0 2
85053: ST_TO_ADDR
// if result then
85054: LD_VAR 0 2
85058: IFFALSE 85064
// exit ;
85060: POP
85061: POP
85062: GO 85068
// end ;
85064: GO 85033
85066: POP
85067: POP
// end ;
85068: LD_VAR 0 2
85072: RET
// export function FilterByTag ( units , tag ) ; begin
85073: LD_INT 0
85075: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
85076: LD_ADDR_VAR 0 3
85080: PUSH
85081: LD_VAR 0 1
85085: PPUSH
85086: LD_INT 120
85088: PUSH
85089: LD_VAR 0 2
85093: PUSH
85094: EMPTY
85095: LIST
85096: LIST
85097: PPUSH
85098: CALL_OW 72
85102: ST_TO_ADDR
// end ;
85103: LD_VAR 0 3
85107: RET
// export function IsDriver ( un ) ; begin
85108: LD_INT 0
85110: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85111: LD_ADDR_VAR 0 2
85115: PUSH
85116: LD_VAR 0 1
85120: PUSH
85121: LD_INT 55
85123: PUSH
85124: EMPTY
85125: LIST
85126: PPUSH
85127: CALL_OW 69
85131: IN
85132: ST_TO_ADDR
// end ;
85133: LD_VAR 0 2
85137: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85138: LD_INT 0
85140: PPUSH
85141: PPUSH
// list := [ ] ;
85142: LD_ADDR_VAR 0 5
85146: PUSH
85147: EMPTY
85148: ST_TO_ADDR
// case d of 0 :
85149: LD_VAR 0 3
85153: PUSH
85154: LD_INT 0
85156: DOUBLE
85157: EQUAL
85158: IFTRUE 85162
85160: GO 85295
85162: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85163: LD_ADDR_VAR 0 5
85167: PUSH
85168: LD_VAR 0 1
85172: PUSH
85173: LD_INT 4
85175: MINUS
85176: PUSH
85177: LD_VAR 0 2
85181: PUSH
85182: LD_INT 4
85184: MINUS
85185: PUSH
85186: LD_INT 2
85188: PUSH
85189: EMPTY
85190: LIST
85191: LIST
85192: LIST
85193: PUSH
85194: LD_VAR 0 1
85198: PUSH
85199: LD_INT 3
85201: MINUS
85202: PUSH
85203: LD_VAR 0 2
85207: PUSH
85208: LD_INT 1
85210: PUSH
85211: EMPTY
85212: LIST
85213: LIST
85214: LIST
85215: PUSH
85216: LD_VAR 0 1
85220: PUSH
85221: LD_INT 4
85223: PLUS
85224: PUSH
85225: LD_VAR 0 2
85229: PUSH
85230: LD_INT 4
85232: PUSH
85233: EMPTY
85234: LIST
85235: LIST
85236: LIST
85237: PUSH
85238: LD_VAR 0 1
85242: PUSH
85243: LD_INT 3
85245: PLUS
85246: PUSH
85247: LD_VAR 0 2
85251: PUSH
85252: LD_INT 3
85254: PLUS
85255: PUSH
85256: LD_INT 5
85258: PUSH
85259: EMPTY
85260: LIST
85261: LIST
85262: LIST
85263: PUSH
85264: LD_VAR 0 1
85268: PUSH
85269: LD_VAR 0 2
85273: PUSH
85274: LD_INT 4
85276: PLUS
85277: PUSH
85278: LD_INT 0
85280: PUSH
85281: EMPTY
85282: LIST
85283: LIST
85284: LIST
85285: PUSH
85286: EMPTY
85287: LIST
85288: LIST
85289: LIST
85290: LIST
85291: LIST
85292: ST_TO_ADDR
// end ; 1 :
85293: GO 85993
85295: LD_INT 1
85297: DOUBLE
85298: EQUAL
85299: IFTRUE 85303
85301: GO 85436
85303: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85304: LD_ADDR_VAR 0 5
85308: PUSH
85309: LD_VAR 0 1
85313: PUSH
85314: LD_VAR 0 2
85318: PUSH
85319: LD_INT 4
85321: MINUS
85322: PUSH
85323: LD_INT 3
85325: PUSH
85326: EMPTY
85327: LIST
85328: LIST
85329: LIST
85330: PUSH
85331: LD_VAR 0 1
85335: PUSH
85336: LD_INT 3
85338: MINUS
85339: PUSH
85340: LD_VAR 0 2
85344: PUSH
85345: LD_INT 3
85347: MINUS
85348: PUSH
85349: LD_INT 2
85351: PUSH
85352: EMPTY
85353: LIST
85354: LIST
85355: LIST
85356: PUSH
85357: LD_VAR 0 1
85361: PUSH
85362: LD_INT 4
85364: MINUS
85365: PUSH
85366: LD_VAR 0 2
85370: PUSH
85371: LD_INT 1
85373: PUSH
85374: EMPTY
85375: LIST
85376: LIST
85377: LIST
85378: PUSH
85379: LD_VAR 0 1
85383: PUSH
85384: LD_VAR 0 2
85388: PUSH
85389: LD_INT 3
85391: PLUS
85392: PUSH
85393: LD_INT 0
85395: PUSH
85396: EMPTY
85397: LIST
85398: LIST
85399: LIST
85400: PUSH
85401: LD_VAR 0 1
85405: PUSH
85406: LD_INT 4
85408: PLUS
85409: PUSH
85410: LD_VAR 0 2
85414: PUSH
85415: LD_INT 4
85417: PLUS
85418: PUSH
85419: LD_INT 5
85421: PUSH
85422: EMPTY
85423: LIST
85424: LIST
85425: LIST
85426: PUSH
85427: EMPTY
85428: LIST
85429: LIST
85430: LIST
85431: LIST
85432: LIST
85433: ST_TO_ADDR
// end ; 2 :
85434: GO 85993
85436: LD_INT 2
85438: DOUBLE
85439: EQUAL
85440: IFTRUE 85444
85442: GO 85573
85444: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85445: LD_ADDR_VAR 0 5
85449: PUSH
85450: LD_VAR 0 1
85454: PUSH
85455: LD_VAR 0 2
85459: PUSH
85460: LD_INT 3
85462: MINUS
85463: PUSH
85464: LD_INT 3
85466: PUSH
85467: EMPTY
85468: LIST
85469: LIST
85470: LIST
85471: PUSH
85472: LD_VAR 0 1
85476: PUSH
85477: LD_INT 4
85479: PLUS
85480: PUSH
85481: LD_VAR 0 2
85485: PUSH
85486: LD_INT 4
85488: PUSH
85489: EMPTY
85490: LIST
85491: LIST
85492: LIST
85493: PUSH
85494: LD_VAR 0 1
85498: PUSH
85499: LD_VAR 0 2
85503: PUSH
85504: LD_INT 4
85506: PLUS
85507: PUSH
85508: LD_INT 0
85510: PUSH
85511: EMPTY
85512: LIST
85513: LIST
85514: LIST
85515: PUSH
85516: LD_VAR 0 1
85520: PUSH
85521: LD_INT 3
85523: MINUS
85524: PUSH
85525: LD_VAR 0 2
85529: PUSH
85530: LD_INT 1
85532: PUSH
85533: EMPTY
85534: LIST
85535: LIST
85536: LIST
85537: PUSH
85538: LD_VAR 0 1
85542: PUSH
85543: LD_INT 4
85545: MINUS
85546: PUSH
85547: LD_VAR 0 2
85551: PUSH
85552: LD_INT 4
85554: MINUS
85555: PUSH
85556: LD_INT 2
85558: PUSH
85559: EMPTY
85560: LIST
85561: LIST
85562: LIST
85563: PUSH
85564: EMPTY
85565: LIST
85566: LIST
85567: LIST
85568: LIST
85569: LIST
85570: ST_TO_ADDR
// end ; 3 :
85571: GO 85993
85573: LD_INT 3
85575: DOUBLE
85576: EQUAL
85577: IFTRUE 85581
85579: GO 85714
85581: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85582: LD_ADDR_VAR 0 5
85586: PUSH
85587: LD_VAR 0 1
85591: PUSH
85592: LD_INT 3
85594: PLUS
85595: PUSH
85596: LD_VAR 0 2
85600: PUSH
85601: LD_INT 4
85603: PUSH
85604: EMPTY
85605: LIST
85606: LIST
85607: LIST
85608: PUSH
85609: LD_VAR 0 1
85613: PUSH
85614: LD_INT 4
85616: PLUS
85617: PUSH
85618: LD_VAR 0 2
85622: PUSH
85623: LD_INT 4
85625: PLUS
85626: PUSH
85627: LD_INT 5
85629: PUSH
85630: EMPTY
85631: LIST
85632: LIST
85633: LIST
85634: PUSH
85635: LD_VAR 0 1
85639: PUSH
85640: LD_INT 4
85642: MINUS
85643: PUSH
85644: LD_VAR 0 2
85648: PUSH
85649: LD_INT 1
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: LIST
85656: PUSH
85657: LD_VAR 0 1
85661: PUSH
85662: LD_VAR 0 2
85666: PUSH
85667: LD_INT 4
85669: MINUS
85670: PUSH
85671: LD_INT 3
85673: PUSH
85674: EMPTY
85675: LIST
85676: LIST
85677: LIST
85678: PUSH
85679: LD_VAR 0 1
85683: PUSH
85684: LD_INT 3
85686: MINUS
85687: PUSH
85688: LD_VAR 0 2
85692: PUSH
85693: LD_INT 3
85695: MINUS
85696: PUSH
85697: LD_INT 2
85699: PUSH
85700: EMPTY
85701: LIST
85702: LIST
85703: LIST
85704: PUSH
85705: EMPTY
85706: LIST
85707: LIST
85708: LIST
85709: LIST
85710: LIST
85711: ST_TO_ADDR
// end ; 4 :
85712: GO 85993
85714: LD_INT 4
85716: DOUBLE
85717: EQUAL
85718: IFTRUE 85722
85720: GO 85855
85722: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85723: LD_ADDR_VAR 0 5
85727: PUSH
85728: LD_VAR 0 1
85732: PUSH
85733: LD_VAR 0 2
85737: PUSH
85738: LD_INT 4
85740: PLUS
85741: PUSH
85742: LD_INT 0
85744: PUSH
85745: EMPTY
85746: LIST
85747: LIST
85748: LIST
85749: PUSH
85750: LD_VAR 0 1
85754: PUSH
85755: LD_INT 3
85757: PLUS
85758: PUSH
85759: LD_VAR 0 2
85763: PUSH
85764: LD_INT 3
85766: PLUS
85767: PUSH
85768: LD_INT 5
85770: PUSH
85771: EMPTY
85772: LIST
85773: LIST
85774: LIST
85775: PUSH
85776: LD_VAR 0 1
85780: PUSH
85781: LD_INT 4
85783: PLUS
85784: PUSH
85785: LD_VAR 0 2
85789: PUSH
85790: LD_INT 4
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: LIST
85797: PUSH
85798: LD_VAR 0 1
85802: PUSH
85803: LD_VAR 0 2
85807: PUSH
85808: LD_INT 3
85810: MINUS
85811: PUSH
85812: LD_INT 3
85814: PUSH
85815: EMPTY
85816: LIST
85817: LIST
85818: LIST
85819: PUSH
85820: LD_VAR 0 1
85824: PUSH
85825: LD_INT 4
85827: MINUS
85828: PUSH
85829: LD_VAR 0 2
85833: PUSH
85834: LD_INT 4
85836: MINUS
85837: PUSH
85838: LD_INT 2
85840: PUSH
85841: EMPTY
85842: LIST
85843: LIST
85844: LIST
85845: PUSH
85846: EMPTY
85847: LIST
85848: LIST
85849: LIST
85850: LIST
85851: LIST
85852: ST_TO_ADDR
// end ; 5 :
85853: GO 85993
85855: LD_INT 5
85857: DOUBLE
85858: EQUAL
85859: IFTRUE 85863
85861: GO 85992
85863: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85864: LD_ADDR_VAR 0 5
85868: PUSH
85869: LD_VAR 0 1
85873: PUSH
85874: LD_INT 4
85876: MINUS
85877: PUSH
85878: LD_VAR 0 2
85882: PUSH
85883: LD_INT 1
85885: PUSH
85886: EMPTY
85887: LIST
85888: LIST
85889: LIST
85890: PUSH
85891: LD_VAR 0 1
85895: PUSH
85896: LD_VAR 0 2
85900: PUSH
85901: LD_INT 4
85903: MINUS
85904: PUSH
85905: LD_INT 3
85907: PUSH
85908: EMPTY
85909: LIST
85910: LIST
85911: LIST
85912: PUSH
85913: LD_VAR 0 1
85917: PUSH
85918: LD_INT 4
85920: PLUS
85921: PUSH
85922: LD_VAR 0 2
85926: PUSH
85927: LD_INT 4
85929: PLUS
85930: PUSH
85931: LD_INT 5
85933: PUSH
85934: EMPTY
85935: LIST
85936: LIST
85937: LIST
85938: PUSH
85939: LD_VAR 0 1
85943: PUSH
85944: LD_INT 3
85946: PLUS
85947: PUSH
85948: LD_VAR 0 2
85952: PUSH
85953: LD_INT 4
85955: PUSH
85956: EMPTY
85957: LIST
85958: LIST
85959: LIST
85960: PUSH
85961: LD_VAR 0 1
85965: PUSH
85966: LD_VAR 0 2
85970: PUSH
85971: LD_INT 3
85973: PLUS
85974: PUSH
85975: LD_INT 0
85977: PUSH
85978: EMPTY
85979: LIST
85980: LIST
85981: LIST
85982: PUSH
85983: EMPTY
85984: LIST
85985: LIST
85986: LIST
85987: LIST
85988: LIST
85989: ST_TO_ADDR
// end ; end ;
85990: GO 85993
85992: POP
// result := list ;
85993: LD_ADDR_VAR 0 4
85997: PUSH
85998: LD_VAR 0 5
86002: ST_TO_ADDR
// end ;
86003: LD_VAR 0 4
86007: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86008: LD_INT 0
86010: PPUSH
86011: PPUSH
86012: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86013: LD_VAR 0 1
86017: NOT
86018: PUSH
86019: LD_VAR 0 2
86023: PUSH
86024: LD_INT 1
86026: PUSH
86027: LD_INT 2
86029: PUSH
86030: LD_INT 3
86032: PUSH
86033: LD_INT 4
86035: PUSH
86036: EMPTY
86037: LIST
86038: LIST
86039: LIST
86040: LIST
86041: IN
86042: NOT
86043: OR
86044: IFFALSE 86048
// exit ;
86046: GO 86140
// tmp := [ ] ;
86048: LD_ADDR_VAR 0 5
86052: PUSH
86053: EMPTY
86054: ST_TO_ADDR
// for i in units do
86055: LD_ADDR_VAR 0 4
86059: PUSH
86060: LD_VAR 0 1
86064: PUSH
86065: FOR_IN
86066: IFFALSE 86109
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
86068: LD_ADDR_VAR 0 5
86072: PUSH
86073: LD_VAR 0 5
86077: PPUSH
86078: LD_VAR 0 5
86082: PUSH
86083: LD_INT 1
86085: PLUS
86086: PPUSH
86087: LD_VAR 0 4
86091: PPUSH
86092: LD_VAR 0 2
86096: PPUSH
86097: CALL_OW 259
86101: PPUSH
86102: CALL_OW 2
86106: ST_TO_ADDR
86107: GO 86065
86109: POP
86110: POP
// if not tmp then
86111: LD_VAR 0 5
86115: NOT
86116: IFFALSE 86120
// exit ;
86118: GO 86140
// result := SortListByListDesc ( units , tmp ) ;
86120: LD_ADDR_VAR 0 3
86124: PUSH
86125: LD_VAR 0 1
86129: PPUSH
86130: LD_VAR 0 5
86134: PPUSH
86135: CALL_OW 77
86139: ST_TO_ADDR
// end ;
86140: LD_VAR 0 3
86144: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86145: LD_INT 0
86147: PPUSH
86148: PPUSH
86149: PPUSH
// result := false ;
86150: LD_ADDR_VAR 0 3
86154: PUSH
86155: LD_INT 0
86157: ST_TO_ADDR
// x := GetX ( building ) ;
86158: LD_ADDR_VAR 0 4
86162: PUSH
86163: LD_VAR 0 2
86167: PPUSH
86168: CALL_OW 250
86172: ST_TO_ADDR
// y := GetY ( building ) ;
86173: LD_ADDR_VAR 0 5
86177: PUSH
86178: LD_VAR 0 2
86182: PPUSH
86183: CALL_OW 251
86187: ST_TO_ADDR
// if not building or not x or not y then
86188: LD_VAR 0 2
86192: NOT
86193: PUSH
86194: LD_VAR 0 4
86198: NOT
86199: OR
86200: PUSH
86201: LD_VAR 0 5
86205: NOT
86206: OR
86207: IFFALSE 86211
// exit ;
86209: GO 86303
// if GetTaskList ( unit ) then
86211: LD_VAR 0 1
86215: PPUSH
86216: CALL_OW 437
86220: IFFALSE 86303
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86222: LD_STRING e
86224: PUSH
86225: LD_VAR 0 1
86229: PPUSH
86230: CALL_OW 437
86234: PUSH
86235: LD_INT 1
86237: ARRAY
86238: PUSH
86239: LD_INT 1
86241: ARRAY
86242: EQUAL
86243: PUSH
86244: LD_VAR 0 4
86248: PUSH
86249: LD_VAR 0 1
86253: PPUSH
86254: CALL_OW 437
86258: PUSH
86259: LD_INT 1
86261: ARRAY
86262: PUSH
86263: LD_INT 2
86265: ARRAY
86266: EQUAL
86267: AND
86268: PUSH
86269: LD_VAR 0 5
86273: PUSH
86274: LD_VAR 0 1
86278: PPUSH
86279: CALL_OW 437
86283: PUSH
86284: LD_INT 1
86286: ARRAY
86287: PUSH
86288: LD_INT 3
86290: ARRAY
86291: EQUAL
86292: AND
86293: IFFALSE 86303
// result := true end ;
86295: LD_ADDR_VAR 0 3
86299: PUSH
86300: LD_INT 1
86302: ST_TO_ADDR
// end ;
86303: LD_VAR 0 3
86307: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86308: LD_INT 0
86310: PPUSH
// result := false ;
86311: LD_ADDR_VAR 0 4
86315: PUSH
86316: LD_INT 0
86318: ST_TO_ADDR
// if GetTaskList ( unit ) then
86319: LD_VAR 0 1
86323: PPUSH
86324: CALL_OW 437
86328: IFFALSE 86411
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86330: LD_STRING M
86332: PUSH
86333: LD_VAR 0 1
86337: PPUSH
86338: CALL_OW 437
86342: PUSH
86343: LD_INT 1
86345: ARRAY
86346: PUSH
86347: LD_INT 1
86349: ARRAY
86350: EQUAL
86351: PUSH
86352: LD_VAR 0 2
86356: PUSH
86357: LD_VAR 0 1
86361: PPUSH
86362: CALL_OW 437
86366: PUSH
86367: LD_INT 1
86369: ARRAY
86370: PUSH
86371: LD_INT 2
86373: ARRAY
86374: EQUAL
86375: AND
86376: PUSH
86377: LD_VAR 0 3
86381: PUSH
86382: LD_VAR 0 1
86386: PPUSH
86387: CALL_OW 437
86391: PUSH
86392: LD_INT 1
86394: ARRAY
86395: PUSH
86396: LD_INT 3
86398: ARRAY
86399: EQUAL
86400: AND
86401: IFFALSE 86411
// result := true ;
86403: LD_ADDR_VAR 0 4
86407: PUSH
86408: LD_INT 1
86410: ST_TO_ADDR
// end ; end ;
86411: LD_VAR 0 4
86415: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86416: LD_INT 0
86418: PPUSH
86419: PPUSH
86420: PPUSH
86421: PPUSH
// if not unit or not area then
86422: LD_VAR 0 1
86426: NOT
86427: PUSH
86428: LD_VAR 0 2
86432: NOT
86433: OR
86434: IFFALSE 86438
// exit ;
86436: GO 86602
// tmp := AreaToList ( area , i ) ;
86438: LD_ADDR_VAR 0 6
86442: PUSH
86443: LD_VAR 0 2
86447: PPUSH
86448: LD_VAR 0 5
86452: PPUSH
86453: CALL_OW 517
86457: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86458: LD_ADDR_VAR 0 5
86462: PUSH
86463: DOUBLE
86464: LD_INT 1
86466: DEC
86467: ST_TO_ADDR
86468: LD_VAR 0 6
86472: PUSH
86473: LD_INT 1
86475: ARRAY
86476: PUSH
86477: FOR_TO
86478: IFFALSE 86600
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86480: LD_ADDR_VAR 0 7
86484: PUSH
86485: LD_VAR 0 6
86489: PUSH
86490: LD_INT 1
86492: ARRAY
86493: PUSH
86494: LD_VAR 0 5
86498: ARRAY
86499: PUSH
86500: LD_VAR 0 6
86504: PUSH
86505: LD_INT 2
86507: ARRAY
86508: PUSH
86509: LD_VAR 0 5
86513: ARRAY
86514: PUSH
86515: EMPTY
86516: LIST
86517: LIST
86518: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86519: LD_VAR 0 7
86523: PUSH
86524: LD_INT 1
86526: ARRAY
86527: PPUSH
86528: LD_VAR 0 7
86532: PUSH
86533: LD_INT 2
86535: ARRAY
86536: PPUSH
86537: CALL_OW 428
86541: PUSH
86542: LD_INT 0
86544: EQUAL
86545: IFFALSE 86598
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86547: LD_VAR 0 1
86551: PPUSH
86552: LD_VAR 0 7
86556: PUSH
86557: LD_INT 1
86559: ARRAY
86560: PPUSH
86561: LD_VAR 0 7
86565: PUSH
86566: LD_INT 2
86568: ARRAY
86569: PPUSH
86570: LD_VAR 0 3
86574: PPUSH
86575: CALL_OW 48
// result := IsPlaced ( unit ) ;
86579: LD_ADDR_VAR 0 4
86583: PUSH
86584: LD_VAR 0 1
86588: PPUSH
86589: CALL_OW 305
86593: ST_TO_ADDR
// exit ;
86594: POP
86595: POP
86596: GO 86602
// end ; end ;
86598: GO 86477
86600: POP
86601: POP
// end ;
86602: LD_VAR 0 4
86606: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86607: LD_INT 0
86609: PPUSH
86610: PPUSH
86611: PPUSH
// if not side or side > 8 then
86612: LD_VAR 0 1
86616: NOT
86617: PUSH
86618: LD_VAR 0 1
86622: PUSH
86623: LD_INT 8
86625: GREATER
86626: OR
86627: IFFALSE 86631
// exit ;
86629: GO 86818
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86631: LD_ADDR_VAR 0 4
86635: PUSH
86636: LD_INT 22
86638: PUSH
86639: LD_VAR 0 1
86643: PUSH
86644: EMPTY
86645: LIST
86646: LIST
86647: PUSH
86648: LD_INT 21
86650: PUSH
86651: LD_INT 3
86653: PUSH
86654: EMPTY
86655: LIST
86656: LIST
86657: PUSH
86658: EMPTY
86659: LIST
86660: LIST
86661: PPUSH
86662: CALL_OW 69
86666: ST_TO_ADDR
// if not tmp then
86667: LD_VAR 0 4
86671: NOT
86672: IFFALSE 86676
// exit ;
86674: GO 86818
// enable_addtolog := true ;
86676: LD_ADDR_OWVAR 81
86680: PUSH
86681: LD_INT 1
86683: ST_TO_ADDR
// AddToLog ( [ ) ;
86684: LD_STRING [
86686: PPUSH
86687: CALL_OW 561
// for i in tmp do
86691: LD_ADDR_VAR 0 3
86695: PUSH
86696: LD_VAR 0 4
86700: PUSH
86701: FOR_IN
86702: IFFALSE 86809
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86704: LD_STRING [
86706: PUSH
86707: LD_VAR 0 3
86711: PPUSH
86712: CALL_OW 266
86716: STR
86717: PUSH
86718: LD_STRING , 
86720: STR
86721: PUSH
86722: LD_VAR 0 3
86726: PPUSH
86727: CALL_OW 250
86731: STR
86732: PUSH
86733: LD_STRING , 
86735: STR
86736: PUSH
86737: LD_VAR 0 3
86741: PPUSH
86742: CALL_OW 251
86746: STR
86747: PUSH
86748: LD_STRING , 
86750: STR
86751: PUSH
86752: LD_VAR 0 3
86756: PPUSH
86757: CALL_OW 254
86761: STR
86762: PUSH
86763: LD_STRING , 
86765: STR
86766: PUSH
86767: LD_VAR 0 3
86771: PPUSH
86772: LD_INT 1
86774: PPUSH
86775: CALL_OW 268
86779: STR
86780: PUSH
86781: LD_STRING , 
86783: STR
86784: PUSH
86785: LD_VAR 0 3
86789: PPUSH
86790: LD_INT 2
86792: PPUSH
86793: CALL_OW 268
86797: STR
86798: PUSH
86799: LD_STRING ],
86801: STR
86802: PPUSH
86803: CALL_OW 561
// end ;
86807: GO 86701
86809: POP
86810: POP
// AddToLog ( ]; ) ;
86811: LD_STRING ];
86813: PPUSH
86814: CALL_OW 561
// end ;
86818: LD_VAR 0 2
86822: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86823: LD_INT 0
86825: PPUSH
86826: PPUSH
86827: PPUSH
86828: PPUSH
86829: PPUSH
// if not area or not rate or not max then
86830: LD_VAR 0 1
86834: NOT
86835: PUSH
86836: LD_VAR 0 2
86840: NOT
86841: OR
86842: PUSH
86843: LD_VAR 0 4
86847: NOT
86848: OR
86849: IFFALSE 86853
// exit ;
86851: GO 87042
// while 1 do
86853: LD_INT 1
86855: IFFALSE 87042
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86857: LD_ADDR_VAR 0 9
86861: PUSH
86862: LD_VAR 0 1
86866: PPUSH
86867: LD_INT 1
86869: PPUSH
86870: CALL_OW 287
86874: PUSH
86875: LD_INT 10
86877: MUL
86878: ST_TO_ADDR
// r := rate / 10 ;
86879: LD_ADDR_VAR 0 7
86883: PUSH
86884: LD_VAR 0 2
86888: PUSH
86889: LD_INT 10
86891: DIVREAL
86892: ST_TO_ADDR
// time := 1 1$00 ;
86893: LD_ADDR_VAR 0 8
86897: PUSH
86898: LD_INT 2100
86900: ST_TO_ADDR
// if amount < min then
86901: LD_VAR 0 9
86905: PUSH
86906: LD_VAR 0 3
86910: LESS
86911: IFFALSE 86929
// r := r * 2 else
86913: LD_ADDR_VAR 0 7
86917: PUSH
86918: LD_VAR 0 7
86922: PUSH
86923: LD_INT 2
86925: MUL
86926: ST_TO_ADDR
86927: GO 86955
// if amount > max then
86929: LD_VAR 0 9
86933: PUSH
86934: LD_VAR 0 4
86938: GREATER
86939: IFFALSE 86955
// r := r / 2 ;
86941: LD_ADDR_VAR 0 7
86945: PUSH
86946: LD_VAR 0 7
86950: PUSH
86951: LD_INT 2
86953: DIVREAL
86954: ST_TO_ADDR
// time := time / r ;
86955: LD_ADDR_VAR 0 8
86959: PUSH
86960: LD_VAR 0 8
86964: PUSH
86965: LD_VAR 0 7
86969: DIVREAL
86970: ST_TO_ADDR
// if time < 0 then
86971: LD_VAR 0 8
86975: PUSH
86976: LD_INT 0
86978: LESS
86979: IFFALSE 86996
// time := time * - 1 ;
86981: LD_ADDR_VAR 0 8
86985: PUSH
86986: LD_VAR 0 8
86990: PUSH
86991: LD_INT 1
86993: NEG
86994: MUL
86995: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
86996: LD_VAR 0 8
87000: PUSH
87001: LD_INT 35
87003: PPUSH
87004: LD_INT 875
87006: PPUSH
87007: CALL_OW 12
87011: PLUS
87012: PPUSH
87013: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87017: LD_INT 1
87019: PPUSH
87020: LD_INT 5
87022: PPUSH
87023: CALL_OW 12
87027: PPUSH
87028: LD_VAR 0 1
87032: PPUSH
87033: LD_INT 1
87035: PPUSH
87036: CALL_OW 55
// end ;
87040: GO 86853
// end ;
87042: LD_VAR 0 5
87046: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87047: LD_INT 0
87049: PPUSH
87050: PPUSH
87051: PPUSH
87052: PPUSH
87053: PPUSH
87054: PPUSH
87055: PPUSH
87056: PPUSH
// if not turrets or not factories then
87057: LD_VAR 0 1
87061: NOT
87062: PUSH
87063: LD_VAR 0 2
87067: NOT
87068: OR
87069: IFFALSE 87073
// exit ;
87071: GO 87380
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87073: LD_ADDR_VAR 0 10
87077: PUSH
87078: LD_INT 5
87080: PUSH
87081: LD_INT 6
87083: PUSH
87084: EMPTY
87085: LIST
87086: LIST
87087: PUSH
87088: LD_INT 2
87090: PUSH
87091: LD_INT 4
87093: PUSH
87094: EMPTY
87095: LIST
87096: LIST
87097: PUSH
87098: LD_INT 3
87100: PUSH
87101: LD_INT 5
87103: PUSH
87104: EMPTY
87105: LIST
87106: LIST
87107: PUSH
87108: EMPTY
87109: LIST
87110: LIST
87111: LIST
87112: PUSH
87113: LD_INT 24
87115: PUSH
87116: LD_INT 25
87118: PUSH
87119: EMPTY
87120: LIST
87121: LIST
87122: PUSH
87123: LD_INT 23
87125: PUSH
87126: LD_INT 27
87128: PUSH
87129: EMPTY
87130: LIST
87131: LIST
87132: PUSH
87133: EMPTY
87134: LIST
87135: LIST
87136: PUSH
87137: LD_INT 42
87139: PUSH
87140: LD_INT 43
87142: PUSH
87143: EMPTY
87144: LIST
87145: LIST
87146: PUSH
87147: LD_INT 44
87149: PUSH
87150: LD_INT 46
87152: PUSH
87153: EMPTY
87154: LIST
87155: LIST
87156: PUSH
87157: LD_INT 45
87159: PUSH
87160: LD_INT 47
87162: PUSH
87163: EMPTY
87164: LIST
87165: LIST
87166: PUSH
87167: EMPTY
87168: LIST
87169: LIST
87170: LIST
87171: PUSH
87172: EMPTY
87173: LIST
87174: LIST
87175: LIST
87176: ST_TO_ADDR
// result := [ ] ;
87177: LD_ADDR_VAR 0 3
87181: PUSH
87182: EMPTY
87183: ST_TO_ADDR
// for i in turrets do
87184: LD_ADDR_VAR 0 4
87188: PUSH
87189: LD_VAR 0 1
87193: PUSH
87194: FOR_IN
87195: IFFALSE 87378
// begin nat := GetNation ( i ) ;
87197: LD_ADDR_VAR 0 7
87201: PUSH
87202: LD_VAR 0 4
87206: PPUSH
87207: CALL_OW 248
87211: ST_TO_ADDR
// weapon := 0 ;
87212: LD_ADDR_VAR 0 8
87216: PUSH
87217: LD_INT 0
87219: ST_TO_ADDR
// if not nat then
87220: LD_VAR 0 7
87224: NOT
87225: IFFALSE 87229
// continue ;
87227: GO 87194
// for j in list [ nat ] do
87229: LD_ADDR_VAR 0 5
87233: PUSH
87234: LD_VAR 0 10
87238: PUSH
87239: LD_VAR 0 7
87243: ARRAY
87244: PUSH
87245: FOR_IN
87246: IFFALSE 87287
// if GetBWeapon ( i ) = j [ 1 ] then
87248: LD_VAR 0 4
87252: PPUSH
87253: CALL_OW 269
87257: PUSH
87258: LD_VAR 0 5
87262: PUSH
87263: LD_INT 1
87265: ARRAY
87266: EQUAL
87267: IFFALSE 87285
// begin weapon := j [ 2 ] ;
87269: LD_ADDR_VAR 0 8
87273: PUSH
87274: LD_VAR 0 5
87278: PUSH
87279: LD_INT 2
87281: ARRAY
87282: ST_TO_ADDR
// break ;
87283: GO 87287
// end ;
87285: GO 87245
87287: POP
87288: POP
// if not weapon then
87289: LD_VAR 0 8
87293: NOT
87294: IFFALSE 87298
// continue ;
87296: GO 87194
// for k in factories do
87298: LD_ADDR_VAR 0 6
87302: PUSH
87303: LD_VAR 0 2
87307: PUSH
87308: FOR_IN
87309: IFFALSE 87374
// begin weapons := AvailableWeaponList ( k ) ;
87311: LD_ADDR_VAR 0 9
87315: PUSH
87316: LD_VAR 0 6
87320: PPUSH
87321: CALL_OW 478
87325: ST_TO_ADDR
// if not weapons then
87326: LD_VAR 0 9
87330: NOT
87331: IFFALSE 87335
// continue ;
87333: GO 87308
// if weapon in weapons then
87335: LD_VAR 0 8
87339: PUSH
87340: LD_VAR 0 9
87344: IN
87345: IFFALSE 87372
// begin result := [ i , weapon ] ;
87347: LD_ADDR_VAR 0 3
87351: PUSH
87352: LD_VAR 0 4
87356: PUSH
87357: LD_VAR 0 8
87361: PUSH
87362: EMPTY
87363: LIST
87364: LIST
87365: ST_TO_ADDR
// exit ;
87366: POP
87367: POP
87368: POP
87369: POP
87370: GO 87380
// end ; end ;
87372: GO 87308
87374: POP
87375: POP
// end ;
87376: GO 87194
87378: POP
87379: POP
// end ;
87380: LD_VAR 0 3
87384: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87385: LD_INT 0
87387: PPUSH
// if not side or side > 8 then
87388: LD_VAR 0 3
87392: NOT
87393: PUSH
87394: LD_VAR 0 3
87398: PUSH
87399: LD_INT 8
87401: GREATER
87402: OR
87403: IFFALSE 87407
// exit ;
87405: GO 87466
// if not range then
87407: LD_VAR 0 4
87411: NOT
87412: IFFALSE 87423
// range := - 12 ;
87414: LD_ADDR_VAR 0 4
87418: PUSH
87419: LD_INT 12
87421: NEG
87422: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87423: LD_VAR 0 1
87427: PPUSH
87428: LD_VAR 0 2
87432: PPUSH
87433: LD_VAR 0 3
87437: PPUSH
87438: LD_VAR 0 4
87442: PPUSH
87443: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87447: LD_VAR 0 1
87451: PPUSH
87452: LD_VAR 0 2
87456: PPUSH
87457: LD_VAR 0 3
87461: PPUSH
87462: CALL_OW 331
// end ;
87466: LD_VAR 0 5
87470: RET
// export function Video ( mode ) ; begin
87471: LD_INT 0
87473: PPUSH
// ingame_video = mode ;
87474: LD_ADDR_OWVAR 52
87478: PUSH
87479: LD_VAR 0 1
87483: ST_TO_ADDR
// interface_hidden = mode ;
87484: LD_ADDR_OWVAR 54
87488: PUSH
87489: LD_VAR 0 1
87493: ST_TO_ADDR
// end ;
87494: LD_VAR 0 2
87498: RET
// export function Join ( array , element ) ; begin
87499: LD_INT 0
87501: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87502: LD_ADDR_VAR 0 3
87506: PUSH
87507: LD_VAR 0 1
87511: PPUSH
87512: LD_VAR 0 1
87516: PUSH
87517: LD_INT 1
87519: PLUS
87520: PPUSH
87521: LD_VAR 0 2
87525: PPUSH
87526: CALL_OW 1
87530: ST_TO_ADDR
// end ;
87531: LD_VAR 0 3
87535: RET
// export function JoinUnion ( array , element ) ; begin
87536: LD_INT 0
87538: PPUSH
// result := array union element ;
87539: LD_ADDR_VAR 0 3
87543: PUSH
87544: LD_VAR 0 1
87548: PUSH
87549: LD_VAR 0 2
87553: UNION
87554: ST_TO_ADDR
// end ;
87555: LD_VAR 0 3
87559: RET
// export function GetBehemoths ( side ) ; begin
87560: LD_INT 0
87562: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87563: LD_ADDR_VAR 0 2
87567: PUSH
87568: LD_INT 22
87570: PUSH
87571: LD_VAR 0 1
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: PUSH
87580: LD_INT 31
87582: PUSH
87583: LD_INT 25
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PUSH
87590: EMPTY
87591: LIST
87592: LIST
87593: PPUSH
87594: CALL_OW 69
87598: ST_TO_ADDR
// end ;
87599: LD_VAR 0 2
87603: RET
// export function Shuffle ( array ) ; var i , index ; begin
87604: LD_INT 0
87606: PPUSH
87607: PPUSH
87608: PPUSH
// result := [ ] ;
87609: LD_ADDR_VAR 0 2
87613: PUSH
87614: EMPTY
87615: ST_TO_ADDR
// if not array then
87616: LD_VAR 0 1
87620: NOT
87621: IFFALSE 87625
// exit ;
87623: GO 87724
// Randomize ;
87625: CALL_OW 10
// for i = array downto 1 do
87629: LD_ADDR_VAR 0 3
87633: PUSH
87634: DOUBLE
87635: LD_VAR 0 1
87639: INC
87640: ST_TO_ADDR
87641: LD_INT 1
87643: PUSH
87644: FOR_DOWNTO
87645: IFFALSE 87722
// begin index := rand ( 1 , array ) ;
87647: LD_ADDR_VAR 0 4
87651: PUSH
87652: LD_INT 1
87654: PPUSH
87655: LD_VAR 0 1
87659: PPUSH
87660: CALL_OW 12
87664: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87665: LD_ADDR_VAR 0 2
87669: PUSH
87670: LD_VAR 0 2
87674: PPUSH
87675: LD_VAR 0 2
87679: PUSH
87680: LD_INT 1
87682: PLUS
87683: PPUSH
87684: LD_VAR 0 1
87688: PUSH
87689: LD_VAR 0 4
87693: ARRAY
87694: PPUSH
87695: CALL_OW 2
87699: ST_TO_ADDR
// array := Delete ( array , index ) ;
87700: LD_ADDR_VAR 0 1
87704: PUSH
87705: LD_VAR 0 1
87709: PPUSH
87710: LD_VAR 0 4
87714: PPUSH
87715: CALL_OW 3
87719: ST_TO_ADDR
// end ;
87720: GO 87644
87722: POP
87723: POP
// end ;
87724: LD_VAR 0 2
87728: RET
// export function GetBaseMaterials ( base ) ; begin
87729: LD_INT 0
87731: PPUSH
// result := [ 0 , 0 , 0 ] ;
87732: LD_ADDR_VAR 0 2
87736: PUSH
87737: LD_INT 0
87739: PUSH
87740: LD_INT 0
87742: PUSH
87743: LD_INT 0
87745: PUSH
87746: EMPTY
87747: LIST
87748: LIST
87749: LIST
87750: ST_TO_ADDR
// if not base then
87751: LD_VAR 0 1
87755: NOT
87756: IFFALSE 87760
// exit ;
87758: GO 87809
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
87760: LD_ADDR_VAR 0 2
87764: PUSH
87765: LD_VAR 0 1
87769: PPUSH
87770: LD_INT 1
87772: PPUSH
87773: CALL_OW 275
87777: PUSH
87778: LD_VAR 0 1
87782: PPUSH
87783: LD_INT 2
87785: PPUSH
87786: CALL_OW 275
87790: PUSH
87791: LD_VAR 0 1
87795: PPUSH
87796: LD_INT 3
87798: PPUSH
87799: CALL_OW 275
87803: PUSH
87804: EMPTY
87805: LIST
87806: LIST
87807: LIST
87808: ST_TO_ADDR
// end ;
87809: LD_VAR 0 2
87813: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
87814: LD_INT 0
87816: PPUSH
87817: PPUSH
// result := array ;
87818: LD_ADDR_VAR 0 3
87822: PUSH
87823: LD_VAR 0 1
87827: ST_TO_ADDR
// if size >= result then
87828: LD_VAR 0 2
87832: PUSH
87833: LD_VAR 0 3
87837: GREATEREQUAL
87838: IFFALSE 87842
// exit ;
87840: GO 87892
// if size then
87842: LD_VAR 0 2
87846: IFFALSE 87892
// for i := array downto size do
87848: LD_ADDR_VAR 0 4
87852: PUSH
87853: DOUBLE
87854: LD_VAR 0 1
87858: INC
87859: ST_TO_ADDR
87860: LD_VAR 0 2
87864: PUSH
87865: FOR_DOWNTO
87866: IFFALSE 87890
// result := Delete ( result , result ) ;
87868: LD_ADDR_VAR 0 3
87872: PUSH
87873: LD_VAR 0 3
87877: PPUSH
87878: LD_VAR 0 3
87882: PPUSH
87883: CALL_OW 3
87887: ST_TO_ADDR
87888: GO 87865
87890: POP
87891: POP
// end ;
87892: LD_VAR 0 3
87896: RET
// export function ComExit ( unit ) ; var tmp ; begin
87897: LD_INT 0
87899: PPUSH
87900: PPUSH
// if not IsInUnit ( unit ) then
87901: LD_VAR 0 1
87905: PPUSH
87906: CALL_OW 310
87910: NOT
87911: IFFALSE 87915
// exit ;
87913: GO 87975
// tmp := IsInUnit ( unit ) ;
87915: LD_ADDR_VAR 0 3
87919: PUSH
87920: LD_VAR 0 1
87924: PPUSH
87925: CALL_OW 310
87929: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
87930: LD_VAR 0 3
87934: PPUSH
87935: CALL_OW 247
87939: PUSH
87940: LD_INT 2
87942: EQUAL
87943: IFFALSE 87956
// ComExitVehicle ( unit ) else
87945: LD_VAR 0 1
87949: PPUSH
87950: CALL_OW 121
87954: GO 87965
// ComExitBuilding ( unit ) ;
87956: LD_VAR 0 1
87960: PPUSH
87961: CALL_OW 122
// result := tmp ;
87965: LD_ADDR_VAR 0 2
87969: PUSH
87970: LD_VAR 0 3
87974: ST_TO_ADDR
// end ;
87975: LD_VAR 0 2
87979: RET
// export function ComExitAll ( units ) ; var i ; begin
87980: LD_INT 0
87982: PPUSH
87983: PPUSH
// if not units then
87984: LD_VAR 0 1
87988: NOT
87989: IFFALSE 87993
// exit ;
87991: GO 88019
// for i in units do
87993: LD_ADDR_VAR 0 3
87997: PUSH
87998: LD_VAR 0 1
88002: PUSH
88003: FOR_IN
88004: IFFALSE 88017
// ComExit ( i ) ;
88006: LD_VAR 0 3
88010: PPUSH
88011: CALL 87897 0 1
88015: GO 88003
88017: POP
88018: POP
// end ;
88019: LD_VAR 0 2
88023: RET
// export function ResetHc ; begin
88024: LD_INT 0
88026: PPUSH
// InitHc ;
88027: CALL_OW 19
// hc_importance := 0 ;
88031: LD_ADDR_OWVAR 32
88035: PUSH
88036: LD_INT 0
88038: ST_TO_ADDR
// end ;
88039: LD_VAR 0 1
88043: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
88044: LD_INT 0
88046: PPUSH
88047: PPUSH
88048: PPUSH
// _x := ( x1 + x2 ) div 2 ;
88049: LD_ADDR_VAR 0 6
88053: PUSH
88054: LD_VAR 0 1
88058: PUSH
88059: LD_VAR 0 3
88063: PLUS
88064: PUSH
88065: LD_INT 2
88067: DIV
88068: ST_TO_ADDR
// if _x < 0 then
88069: LD_VAR 0 6
88073: PUSH
88074: LD_INT 0
88076: LESS
88077: IFFALSE 88094
// _x := _x * - 1 ;
88079: LD_ADDR_VAR 0 6
88083: PUSH
88084: LD_VAR 0 6
88088: PUSH
88089: LD_INT 1
88091: NEG
88092: MUL
88093: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
88094: LD_ADDR_VAR 0 7
88098: PUSH
88099: LD_VAR 0 2
88103: PUSH
88104: LD_VAR 0 4
88108: PLUS
88109: PUSH
88110: LD_INT 2
88112: DIV
88113: ST_TO_ADDR
// if _y < 0 then
88114: LD_VAR 0 7
88118: PUSH
88119: LD_INT 0
88121: LESS
88122: IFFALSE 88139
// _y := _y * - 1 ;
88124: LD_ADDR_VAR 0 7
88128: PUSH
88129: LD_VAR 0 7
88133: PUSH
88134: LD_INT 1
88136: NEG
88137: MUL
88138: ST_TO_ADDR
// result := [ _x , _y ] ;
88139: LD_ADDR_VAR 0 5
88143: PUSH
88144: LD_VAR 0 6
88148: PUSH
88149: LD_VAR 0 7
88153: PUSH
88154: EMPTY
88155: LIST
88156: LIST
88157: ST_TO_ADDR
// end ;
88158: LD_VAR 0 5
88162: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88163: LD_INT 0
88165: PPUSH
88166: PPUSH
88167: PPUSH
88168: PPUSH
// task := GetTaskList ( unit ) ;
88169: LD_ADDR_VAR 0 7
88173: PUSH
88174: LD_VAR 0 1
88178: PPUSH
88179: CALL_OW 437
88183: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88184: LD_VAR 0 7
88188: NOT
88189: PUSH
88190: LD_VAR 0 1
88194: PPUSH
88195: LD_VAR 0 2
88199: PPUSH
88200: CALL_OW 308
88204: NOT
88205: AND
88206: IFFALSE 88210
// exit ;
88208: GO 88328
// if IsInArea ( unit , area ) then
88210: LD_VAR 0 1
88214: PPUSH
88215: LD_VAR 0 2
88219: PPUSH
88220: CALL_OW 308
88224: IFFALSE 88242
// begin ComMoveToArea ( unit , goAway ) ;
88226: LD_VAR 0 1
88230: PPUSH
88231: LD_VAR 0 3
88235: PPUSH
88236: CALL_OW 113
// exit ;
88240: GO 88328
// end ; if task [ 1 ] [ 1 ] <> M then
88242: LD_VAR 0 7
88246: PUSH
88247: LD_INT 1
88249: ARRAY
88250: PUSH
88251: LD_INT 1
88253: ARRAY
88254: PUSH
88255: LD_STRING M
88257: NONEQUAL
88258: IFFALSE 88262
// exit ;
88260: GO 88328
// x := task [ 1 ] [ 2 ] ;
88262: LD_ADDR_VAR 0 5
88266: PUSH
88267: LD_VAR 0 7
88271: PUSH
88272: LD_INT 1
88274: ARRAY
88275: PUSH
88276: LD_INT 2
88278: ARRAY
88279: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88280: LD_ADDR_VAR 0 6
88284: PUSH
88285: LD_VAR 0 7
88289: PUSH
88290: LD_INT 1
88292: ARRAY
88293: PUSH
88294: LD_INT 3
88296: ARRAY
88297: ST_TO_ADDR
// if InArea ( x , y , area ) then
88298: LD_VAR 0 5
88302: PPUSH
88303: LD_VAR 0 6
88307: PPUSH
88308: LD_VAR 0 2
88312: PPUSH
88313: CALL_OW 309
88317: IFFALSE 88328
// ComStop ( unit ) ;
88319: LD_VAR 0 1
88323: PPUSH
88324: CALL_OW 141
// end ;
88328: LD_VAR 0 4
88332: RET
// export function Abs ( value ) ; begin
88333: LD_INT 0
88335: PPUSH
// result := value ;
88336: LD_ADDR_VAR 0 2
88340: PUSH
88341: LD_VAR 0 1
88345: ST_TO_ADDR
// if value < 0 then
88346: LD_VAR 0 1
88350: PUSH
88351: LD_INT 0
88353: LESS
88354: IFFALSE 88371
// result := value * - 1 ;
88356: LD_ADDR_VAR 0 2
88360: PUSH
88361: LD_VAR 0 1
88365: PUSH
88366: LD_INT 1
88368: NEG
88369: MUL
88370: ST_TO_ADDR
// end ;
88371: LD_VAR 0 2
88375: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88376: LD_INT 0
88378: PPUSH
88379: PPUSH
88380: PPUSH
88381: PPUSH
88382: PPUSH
88383: PPUSH
88384: PPUSH
88385: PPUSH
// if not unit or not building then
88386: LD_VAR 0 1
88390: NOT
88391: PUSH
88392: LD_VAR 0 2
88396: NOT
88397: OR
88398: IFFALSE 88402
// exit ;
88400: GO 88628
// x := GetX ( building ) ;
88402: LD_ADDR_VAR 0 4
88406: PUSH
88407: LD_VAR 0 2
88411: PPUSH
88412: CALL_OW 250
88416: ST_TO_ADDR
// y := GetY ( building ) ;
88417: LD_ADDR_VAR 0 6
88421: PUSH
88422: LD_VAR 0 2
88426: PPUSH
88427: CALL_OW 251
88431: ST_TO_ADDR
// d := GetDir ( building ) ;
88432: LD_ADDR_VAR 0 8
88436: PUSH
88437: LD_VAR 0 2
88441: PPUSH
88442: CALL_OW 254
88446: ST_TO_ADDR
// r := 4 ;
88447: LD_ADDR_VAR 0 9
88451: PUSH
88452: LD_INT 4
88454: ST_TO_ADDR
// for i := 1 to 5 do
88455: LD_ADDR_VAR 0 10
88459: PUSH
88460: DOUBLE
88461: LD_INT 1
88463: DEC
88464: ST_TO_ADDR
88465: LD_INT 5
88467: PUSH
88468: FOR_TO
88469: IFFALSE 88626
// begin _x := ShiftX ( x , d , r + i ) ;
88471: LD_ADDR_VAR 0 5
88475: PUSH
88476: LD_VAR 0 4
88480: PPUSH
88481: LD_VAR 0 8
88485: PPUSH
88486: LD_VAR 0 9
88490: PUSH
88491: LD_VAR 0 10
88495: PLUS
88496: PPUSH
88497: CALL_OW 272
88501: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88502: LD_ADDR_VAR 0 7
88506: PUSH
88507: LD_VAR 0 6
88511: PPUSH
88512: LD_VAR 0 8
88516: PPUSH
88517: LD_VAR 0 9
88521: PUSH
88522: LD_VAR 0 10
88526: PLUS
88527: PPUSH
88528: CALL_OW 273
88532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88533: LD_VAR 0 5
88537: PPUSH
88538: LD_VAR 0 7
88542: PPUSH
88543: CALL_OW 488
88547: PUSH
88548: LD_VAR 0 5
88552: PPUSH
88553: LD_VAR 0 7
88557: PPUSH
88558: CALL_OW 428
88562: PPUSH
88563: CALL_OW 247
88567: PUSH
88568: LD_INT 3
88570: PUSH
88571: LD_INT 2
88573: PUSH
88574: EMPTY
88575: LIST
88576: LIST
88577: IN
88578: NOT
88579: AND
88580: IFFALSE 88624
// begin ComMoveXY ( unit , _x , _y ) ;
88582: LD_VAR 0 1
88586: PPUSH
88587: LD_VAR 0 5
88591: PPUSH
88592: LD_VAR 0 7
88596: PPUSH
88597: CALL_OW 111
// result := [ _x , _y ] ;
88601: LD_ADDR_VAR 0 3
88605: PUSH
88606: LD_VAR 0 5
88610: PUSH
88611: LD_VAR 0 7
88615: PUSH
88616: EMPTY
88617: LIST
88618: LIST
88619: ST_TO_ADDR
// exit ;
88620: POP
88621: POP
88622: GO 88628
// end ; end ;
88624: GO 88468
88626: POP
88627: POP
// end ;
88628: LD_VAR 0 3
88632: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88633: LD_INT 0
88635: PPUSH
88636: PPUSH
88637: PPUSH
// result := 0 ;
88638: LD_ADDR_VAR 0 3
88642: PUSH
88643: LD_INT 0
88645: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88646: LD_VAR 0 1
88650: PUSH
88651: LD_INT 0
88653: LESS
88654: PUSH
88655: LD_VAR 0 1
88659: PUSH
88660: LD_INT 8
88662: GREATER
88663: OR
88664: PUSH
88665: LD_VAR 0 2
88669: PUSH
88670: LD_INT 0
88672: LESS
88673: OR
88674: PUSH
88675: LD_VAR 0 2
88679: PUSH
88680: LD_INT 8
88682: GREATER
88683: OR
88684: IFFALSE 88688
// exit ;
88686: GO 88763
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88688: LD_ADDR_VAR 0 4
88692: PUSH
88693: LD_INT 22
88695: PUSH
88696: LD_VAR 0 2
88700: PUSH
88701: EMPTY
88702: LIST
88703: LIST
88704: PPUSH
88705: CALL_OW 69
88709: PUSH
88710: FOR_IN
88711: IFFALSE 88761
// begin un := UnitShoot ( i ) ;
88713: LD_ADDR_VAR 0 5
88717: PUSH
88718: LD_VAR 0 4
88722: PPUSH
88723: CALL_OW 504
88727: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88728: LD_VAR 0 5
88732: PPUSH
88733: CALL_OW 255
88737: PUSH
88738: LD_VAR 0 1
88742: EQUAL
88743: IFFALSE 88759
// begin result := un ;
88745: LD_ADDR_VAR 0 3
88749: PUSH
88750: LD_VAR 0 5
88754: ST_TO_ADDR
// exit ;
88755: POP
88756: POP
88757: GO 88763
// end ; end ;
88759: GO 88710
88761: POP
88762: POP
// end ;
88763: LD_VAR 0 3
88767: RET
// export function GetCargoBay ( units ) ; begin
88768: LD_INT 0
88770: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
88771: LD_ADDR_VAR 0 2
88775: PUSH
88776: LD_VAR 0 1
88780: PPUSH
88781: LD_INT 2
88783: PUSH
88784: LD_INT 34
88786: PUSH
88787: LD_INT 12
88789: PUSH
88790: EMPTY
88791: LIST
88792: LIST
88793: PUSH
88794: LD_INT 34
88796: PUSH
88797: LD_INT 51
88799: PUSH
88800: EMPTY
88801: LIST
88802: LIST
88803: PUSH
88804: LD_INT 34
88806: PUSH
88807: LD_INT 32
88809: PUSH
88810: EMPTY
88811: LIST
88812: LIST
88813: PUSH
88814: LD_INT 34
88816: PUSH
88817: LD_INT 89
88819: PUSH
88820: EMPTY
88821: LIST
88822: LIST
88823: PUSH
88824: EMPTY
88825: LIST
88826: LIST
88827: LIST
88828: LIST
88829: LIST
88830: PPUSH
88831: CALL_OW 72
88835: ST_TO_ADDR
// end ;
88836: LD_VAR 0 2
88840: RET
// export function Negate ( value ) ; begin
88841: LD_INT 0
88843: PPUSH
// result := not value ;
88844: LD_ADDR_VAR 0 2
88848: PUSH
88849: LD_VAR 0 1
88853: NOT
88854: ST_TO_ADDR
// end ;
88855: LD_VAR 0 2
88859: RET
// export function Inc ( value ) ; begin
88860: LD_INT 0
88862: PPUSH
// result := value + 1 ;
88863: LD_ADDR_VAR 0 2
88867: PUSH
88868: LD_VAR 0 1
88872: PUSH
88873: LD_INT 1
88875: PLUS
88876: ST_TO_ADDR
// end ;
88877: LD_VAR 0 2
88881: RET
// export function Dec ( value ) ; begin
88882: LD_INT 0
88884: PPUSH
// result := value - 1 ;
88885: LD_ADDR_VAR 0 2
88889: PUSH
88890: LD_VAR 0 1
88894: PUSH
88895: LD_INT 1
88897: MINUS
88898: ST_TO_ADDR
// end ;
88899: LD_VAR 0 2
88903: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
88904: LD_INT 0
88906: PPUSH
88907: PPUSH
88908: PPUSH
88909: PPUSH
88910: PPUSH
88911: PPUSH
88912: PPUSH
88913: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
88914: LD_VAR 0 1
88918: PPUSH
88919: LD_VAR 0 2
88923: PPUSH
88924: CALL_OW 488
88928: NOT
88929: PUSH
88930: LD_VAR 0 3
88934: PPUSH
88935: LD_VAR 0 4
88939: PPUSH
88940: CALL_OW 488
88944: NOT
88945: OR
88946: IFFALSE 88959
// begin result := - 1 ;
88948: LD_ADDR_VAR 0 5
88952: PUSH
88953: LD_INT 1
88955: NEG
88956: ST_TO_ADDR
// exit ;
88957: GO 89194
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
88959: LD_ADDR_VAR 0 12
88963: PUSH
88964: LD_VAR 0 1
88968: PPUSH
88969: LD_VAR 0 2
88973: PPUSH
88974: LD_VAR 0 3
88978: PPUSH
88979: LD_VAR 0 4
88983: PPUSH
88984: CALL 88044 0 4
88988: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
88989: LD_ADDR_VAR 0 11
88993: PUSH
88994: LD_VAR 0 1
88998: PPUSH
88999: LD_VAR 0 2
89003: PPUSH
89004: LD_VAR 0 12
89008: PUSH
89009: LD_INT 1
89011: ARRAY
89012: PPUSH
89013: LD_VAR 0 12
89017: PUSH
89018: LD_INT 2
89020: ARRAY
89021: PPUSH
89022: CALL_OW 298
89026: ST_TO_ADDR
// distance := 9999 ;
89027: LD_ADDR_VAR 0 10
89031: PUSH
89032: LD_INT 9999
89034: ST_TO_ADDR
// for i := 0 to 5 do
89035: LD_ADDR_VAR 0 6
89039: PUSH
89040: DOUBLE
89041: LD_INT 0
89043: DEC
89044: ST_TO_ADDR
89045: LD_INT 5
89047: PUSH
89048: FOR_TO
89049: IFFALSE 89192
// begin _x := ShiftX ( x1 , i , centerDist ) ;
89051: LD_ADDR_VAR 0 7
89055: PUSH
89056: LD_VAR 0 1
89060: PPUSH
89061: LD_VAR 0 6
89065: PPUSH
89066: LD_VAR 0 11
89070: PPUSH
89071: CALL_OW 272
89075: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
89076: LD_ADDR_VAR 0 8
89080: PUSH
89081: LD_VAR 0 2
89085: PPUSH
89086: LD_VAR 0 6
89090: PPUSH
89091: LD_VAR 0 11
89095: PPUSH
89096: CALL_OW 273
89100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89101: LD_VAR 0 7
89105: PPUSH
89106: LD_VAR 0 8
89110: PPUSH
89111: CALL_OW 488
89115: NOT
89116: IFFALSE 89120
// continue ;
89118: GO 89048
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89120: LD_ADDR_VAR 0 9
89124: PUSH
89125: LD_VAR 0 12
89129: PUSH
89130: LD_INT 1
89132: ARRAY
89133: PPUSH
89134: LD_VAR 0 12
89138: PUSH
89139: LD_INT 2
89141: ARRAY
89142: PPUSH
89143: LD_VAR 0 7
89147: PPUSH
89148: LD_VAR 0 8
89152: PPUSH
89153: CALL_OW 298
89157: ST_TO_ADDR
// if tmp < distance then
89158: LD_VAR 0 9
89162: PUSH
89163: LD_VAR 0 10
89167: LESS
89168: IFFALSE 89190
// begin result := i ;
89170: LD_ADDR_VAR 0 5
89174: PUSH
89175: LD_VAR 0 6
89179: ST_TO_ADDR
// distance := tmp ;
89180: LD_ADDR_VAR 0 10
89184: PUSH
89185: LD_VAR 0 9
89189: ST_TO_ADDR
// end ; end ;
89190: GO 89048
89192: POP
89193: POP
// end ;
89194: LD_VAR 0 5
89198: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89199: LD_INT 0
89201: PPUSH
89202: PPUSH
// if not driver or not IsInUnit ( driver ) then
89203: LD_VAR 0 1
89207: NOT
89208: PUSH
89209: LD_VAR 0 1
89213: PPUSH
89214: CALL_OW 310
89218: NOT
89219: OR
89220: IFFALSE 89224
// exit ;
89222: GO 89314
// vehicle := IsInUnit ( driver ) ;
89224: LD_ADDR_VAR 0 3
89228: PUSH
89229: LD_VAR 0 1
89233: PPUSH
89234: CALL_OW 310
89238: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89239: LD_VAR 0 1
89243: PPUSH
89244: LD_STRING \
89246: PUSH
89247: LD_INT 0
89249: PUSH
89250: LD_INT 0
89252: PUSH
89253: LD_INT 0
89255: PUSH
89256: LD_INT 0
89258: PUSH
89259: LD_INT 0
89261: PUSH
89262: LD_INT 0
89264: PUSH
89265: EMPTY
89266: LIST
89267: LIST
89268: LIST
89269: LIST
89270: LIST
89271: LIST
89272: LIST
89273: PUSH
89274: LD_STRING E
89276: PUSH
89277: LD_INT 0
89279: PUSH
89280: LD_INT 0
89282: PUSH
89283: LD_VAR 0 3
89287: PUSH
89288: LD_INT 0
89290: PUSH
89291: LD_INT 0
89293: PUSH
89294: LD_INT 0
89296: PUSH
89297: EMPTY
89298: LIST
89299: LIST
89300: LIST
89301: LIST
89302: LIST
89303: LIST
89304: LIST
89305: PUSH
89306: EMPTY
89307: LIST
89308: LIST
89309: PPUSH
89310: CALL_OW 446
// end ;
89314: LD_VAR 0 2
89318: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89319: LD_INT 0
89321: PPUSH
89322: PPUSH
// if not driver or not IsInUnit ( driver ) then
89323: LD_VAR 0 1
89327: NOT
89328: PUSH
89329: LD_VAR 0 1
89333: PPUSH
89334: CALL_OW 310
89338: NOT
89339: OR
89340: IFFALSE 89344
// exit ;
89342: GO 89434
// vehicle := IsInUnit ( driver ) ;
89344: LD_ADDR_VAR 0 3
89348: PUSH
89349: LD_VAR 0 1
89353: PPUSH
89354: CALL_OW 310
89358: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89359: LD_VAR 0 1
89363: PPUSH
89364: LD_STRING \
89366: PUSH
89367: LD_INT 0
89369: PUSH
89370: LD_INT 0
89372: PUSH
89373: LD_INT 0
89375: PUSH
89376: LD_INT 0
89378: PUSH
89379: LD_INT 0
89381: PUSH
89382: LD_INT 0
89384: PUSH
89385: EMPTY
89386: LIST
89387: LIST
89388: LIST
89389: LIST
89390: LIST
89391: LIST
89392: LIST
89393: PUSH
89394: LD_STRING E
89396: PUSH
89397: LD_INT 0
89399: PUSH
89400: LD_INT 0
89402: PUSH
89403: LD_VAR 0 3
89407: PUSH
89408: LD_INT 0
89410: PUSH
89411: LD_INT 0
89413: PUSH
89414: LD_INT 0
89416: PUSH
89417: EMPTY
89418: LIST
89419: LIST
89420: LIST
89421: LIST
89422: LIST
89423: LIST
89424: LIST
89425: PUSH
89426: EMPTY
89427: LIST
89428: LIST
89429: PPUSH
89430: CALL_OW 447
// end ;
89434: LD_VAR 0 2
89438: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89439: LD_INT 0
89441: PPUSH
89442: PPUSH
89443: PPUSH
// tmp := [ ] ;
89444: LD_ADDR_VAR 0 5
89448: PUSH
89449: EMPTY
89450: ST_TO_ADDR
// for i in units do
89451: LD_ADDR_VAR 0 4
89455: PUSH
89456: LD_VAR 0 1
89460: PUSH
89461: FOR_IN
89462: IFFALSE 89500
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89464: LD_ADDR_VAR 0 5
89468: PUSH
89469: LD_VAR 0 5
89473: PPUSH
89474: LD_VAR 0 5
89478: PUSH
89479: LD_INT 1
89481: PLUS
89482: PPUSH
89483: LD_VAR 0 4
89487: PPUSH
89488: CALL_OW 256
89492: PPUSH
89493: CALL_OW 2
89497: ST_TO_ADDR
89498: GO 89461
89500: POP
89501: POP
// if not tmp then
89502: LD_VAR 0 5
89506: NOT
89507: IFFALSE 89511
// exit ;
89509: GO 89559
// if asc then
89511: LD_VAR 0 2
89515: IFFALSE 89539
// result := SortListByListAsc ( units , tmp ) else
89517: LD_ADDR_VAR 0 3
89521: PUSH
89522: LD_VAR 0 1
89526: PPUSH
89527: LD_VAR 0 5
89531: PPUSH
89532: CALL_OW 76
89536: ST_TO_ADDR
89537: GO 89559
// result := SortListByListDesc ( units , tmp ) ;
89539: LD_ADDR_VAR 0 3
89543: PUSH
89544: LD_VAR 0 1
89548: PPUSH
89549: LD_VAR 0 5
89553: PPUSH
89554: CALL_OW 77
89558: ST_TO_ADDR
// end ;
89559: LD_VAR 0 3
89563: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89564: LD_INT 0
89566: PPUSH
89567: PPUSH
// task := GetTaskList ( mech ) ;
89568: LD_ADDR_VAR 0 4
89572: PUSH
89573: LD_VAR 0 1
89577: PPUSH
89578: CALL_OW 437
89582: ST_TO_ADDR
// if not task then
89583: LD_VAR 0 4
89587: NOT
89588: IFFALSE 89592
// exit ;
89590: GO 89634
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89592: LD_ADDR_VAR 0 3
89596: PUSH
89597: LD_VAR 0 4
89601: PUSH
89602: LD_INT 1
89604: ARRAY
89605: PUSH
89606: LD_INT 1
89608: ARRAY
89609: PUSH
89610: LD_STRING r
89612: EQUAL
89613: PUSH
89614: LD_VAR 0 4
89618: PUSH
89619: LD_INT 1
89621: ARRAY
89622: PUSH
89623: LD_INT 4
89625: ARRAY
89626: PUSH
89627: LD_VAR 0 2
89631: EQUAL
89632: AND
89633: ST_TO_ADDR
// end ;
89634: LD_VAR 0 3
89638: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89639: LD_INT 0
89641: PPUSH
// SetDir ( unit , d ) ;
89642: LD_VAR 0 1
89646: PPUSH
89647: LD_VAR 0 4
89651: PPUSH
89652: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89656: LD_VAR 0 1
89660: PPUSH
89661: LD_VAR 0 2
89665: PPUSH
89666: LD_VAR 0 3
89670: PPUSH
89671: LD_VAR 0 5
89675: PPUSH
89676: CALL_OW 48
// end ;
89680: LD_VAR 0 6
89684: RET
// export function ToNaturalNumber ( number ) ; begin
89685: LD_INT 0
89687: PPUSH
// result := number div 1 ;
89688: LD_ADDR_VAR 0 2
89692: PUSH
89693: LD_VAR 0 1
89697: PUSH
89698: LD_INT 1
89700: DIV
89701: ST_TO_ADDR
// if number < 0 then
89702: LD_VAR 0 1
89706: PUSH
89707: LD_INT 0
89709: LESS
89710: IFFALSE 89720
// result := 0 ;
89712: LD_ADDR_VAR 0 2
89716: PUSH
89717: LD_INT 0
89719: ST_TO_ADDR
// end ;
89720: LD_VAR 0 2
89724: RET
// export function SortByClass ( units , class ) ; var un ; begin
89725: LD_INT 0
89727: PPUSH
89728: PPUSH
// if not units or not class then
89729: LD_VAR 0 1
89733: NOT
89734: PUSH
89735: LD_VAR 0 2
89739: NOT
89740: OR
89741: IFFALSE 89745
// exit ;
89743: GO 89840
// result := [ ] ;
89745: LD_ADDR_VAR 0 3
89749: PUSH
89750: EMPTY
89751: ST_TO_ADDR
// for un in units do
89752: LD_ADDR_VAR 0 4
89756: PUSH
89757: LD_VAR 0 1
89761: PUSH
89762: FOR_IN
89763: IFFALSE 89838
// if GetClass ( un ) = class then
89765: LD_VAR 0 4
89769: PPUSH
89770: CALL_OW 257
89774: PUSH
89775: LD_VAR 0 2
89779: EQUAL
89780: IFFALSE 89807
// result := Insert ( result , 1 , un ) else
89782: LD_ADDR_VAR 0 3
89786: PUSH
89787: LD_VAR 0 3
89791: PPUSH
89792: LD_INT 1
89794: PPUSH
89795: LD_VAR 0 4
89799: PPUSH
89800: CALL_OW 2
89804: ST_TO_ADDR
89805: GO 89836
// result := Replace ( result , result + 1 , un ) ;
89807: LD_ADDR_VAR 0 3
89811: PUSH
89812: LD_VAR 0 3
89816: PPUSH
89817: LD_VAR 0 3
89821: PUSH
89822: LD_INT 1
89824: PLUS
89825: PPUSH
89826: LD_VAR 0 4
89830: PPUSH
89831: CALL_OW 1
89835: ST_TO_ADDR
89836: GO 89762
89838: POP
89839: POP
// end ;
89840: LD_VAR 0 3
89844: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
89845: LD_INT 0
89847: PPUSH
89848: PPUSH
89849: PPUSH
89850: PPUSH
89851: PPUSH
89852: PPUSH
89853: PPUSH
// result := [ ] ;
89854: LD_ADDR_VAR 0 4
89858: PUSH
89859: EMPTY
89860: ST_TO_ADDR
// if x - r < 0 then
89861: LD_VAR 0 1
89865: PUSH
89866: LD_VAR 0 3
89870: MINUS
89871: PUSH
89872: LD_INT 0
89874: LESS
89875: IFFALSE 89887
// min_x := 0 else
89877: LD_ADDR_VAR 0 8
89881: PUSH
89882: LD_INT 0
89884: ST_TO_ADDR
89885: GO 89903
// min_x := x - r ;
89887: LD_ADDR_VAR 0 8
89891: PUSH
89892: LD_VAR 0 1
89896: PUSH
89897: LD_VAR 0 3
89901: MINUS
89902: ST_TO_ADDR
// if y - r < 0 then
89903: LD_VAR 0 2
89907: PUSH
89908: LD_VAR 0 3
89912: MINUS
89913: PUSH
89914: LD_INT 0
89916: LESS
89917: IFFALSE 89929
// min_y := 0 else
89919: LD_ADDR_VAR 0 7
89923: PUSH
89924: LD_INT 0
89926: ST_TO_ADDR
89927: GO 89945
// min_y := y - r ;
89929: LD_ADDR_VAR 0 7
89933: PUSH
89934: LD_VAR 0 2
89938: PUSH
89939: LD_VAR 0 3
89943: MINUS
89944: ST_TO_ADDR
// max_x := x + r ;
89945: LD_ADDR_VAR 0 9
89949: PUSH
89950: LD_VAR 0 1
89954: PUSH
89955: LD_VAR 0 3
89959: PLUS
89960: ST_TO_ADDR
// max_y := y + r ;
89961: LD_ADDR_VAR 0 10
89965: PUSH
89966: LD_VAR 0 2
89970: PUSH
89971: LD_VAR 0 3
89975: PLUS
89976: ST_TO_ADDR
// for _x = min_x to max_x do
89977: LD_ADDR_VAR 0 5
89981: PUSH
89982: DOUBLE
89983: LD_VAR 0 8
89987: DEC
89988: ST_TO_ADDR
89989: LD_VAR 0 9
89993: PUSH
89994: FOR_TO
89995: IFFALSE 90096
// for _y = min_y to max_y do
89997: LD_ADDR_VAR 0 6
90001: PUSH
90002: DOUBLE
90003: LD_VAR 0 7
90007: DEC
90008: ST_TO_ADDR
90009: LD_VAR 0 10
90013: PUSH
90014: FOR_TO
90015: IFFALSE 90092
// begin if not ValidHex ( _x , _y ) then
90017: LD_VAR 0 5
90021: PPUSH
90022: LD_VAR 0 6
90026: PPUSH
90027: CALL_OW 488
90031: NOT
90032: IFFALSE 90036
// continue ;
90034: GO 90014
// if GetResourceTypeXY ( _x , _y ) then
90036: LD_VAR 0 5
90040: PPUSH
90041: LD_VAR 0 6
90045: PPUSH
90046: CALL_OW 283
90050: IFFALSE 90090
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
90052: LD_ADDR_VAR 0 4
90056: PUSH
90057: LD_VAR 0 4
90061: PPUSH
90062: LD_VAR 0 4
90066: PUSH
90067: LD_INT 1
90069: PLUS
90070: PPUSH
90071: LD_VAR 0 5
90075: PUSH
90076: LD_VAR 0 6
90080: PUSH
90081: EMPTY
90082: LIST
90083: LIST
90084: PPUSH
90085: CALL_OW 1
90089: ST_TO_ADDR
// end ;
90090: GO 90014
90092: POP
90093: POP
90094: GO 89994
90096: POP
90097: POP
// end ;
90098: LD_VAR 0 4
90102: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
90103: LD_INT 0
90105: PPUSH
90106: PPUSH
90107: PPUSH
90108: PPUSH
90109: PPUSH
90110: PPUSH
90111: PPUSH
90112: PPUSH
// if not units then
90113: LD_VAR 0 1
90117: NOT
90118: IFFALSE 90122
// exit ;
90120: GO 90646
// result := UnitFilter ( units , [ f_ok ] ) ;
90122: LD_ADDR_VAR 0 3
90126: PUSH
90127: LD_VAR 0 1
90131: PPUSH
90132: LD_INT 50
90134: PUSH
90135: EMPTY
90136: LIST
90137: PPUSH
90138: CALL_OW 72
90142: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90143: LD_ADDR_VAR 0 8
90147: PUSH
90148: LD_VAR 0 1
90152: PUSH
90153: LD_INT 1
90155: ARRAY
90156: PPUSH
90157: CALL_OW 255
90161: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90162: LD_ADDR_VAR 0 10
90166: PUSH
90167: LD_INT 29
90169: PUSH
90170: LD_INT 91
90172: PUSH
90173: LD_INT 49
90175: PUSH
90176: EMPTY
90177: LIST
90178: LIST
90179: LIST
90180: ST_TO_ADDR
// if not result then
90181: LD_VAR 0 3
90185: NOT
90186: IFFALSE 90190
// exit ;
90188: GO 90646
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90190: LD_ADDR_VAR 0 5
90194: PUSH
90195: LD_INT 81
90197: PUSH
90198: LD_VAR 0 8
90202: PUSH
90203: EMPTY
90204: LIST
90205: LIST
90206: PPUSH
90207: CALL_OW 69
90211: ST_TO_ADDR
// for i in result do
90212: LD_ADDR_VAR 0 4
90216: PUSH
90217: LD_VAR 0 3
90221: PUSH
90222: FOR_IN
90223: IFFALSE 90644
// begin tag := GetTag ( i ) + 1 ;
90225: LD_ADDR_VAR 0 9
90229: PUSH
90230: LD_VAR 0 4
90234: PPUSH
90235: CALL_OW 110
90239: PUSH
90240: LD_INT 1
90242: PLUS
90243: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90244: LD_ADDR_VAR 0 7
90248: PUSH
90249: LD_VAR 0 4
90253: PPUSH
90254: CALL_OW 250
90258: PPUSH
90259: LD_VAR 0 4
90263: PPUSH
90264: CALL_OW 251
90268: PPUSH
90269: LD_INT 6
90271: PPUSH
90272: CALL 89845 0 3
90276: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90277: LD_VAR 0 4
90281: PPUSH
90282: CALL_OW 247
90286: PUSH
90287: LD_INT 2
90289: EQUAL
90290: PUSH
90291: LD_VAR 0 7
90295: AND
90296: PUSH
90297: LD_VAR 0 4
90301: PPUSH
90302: CALL_OW 264
90306: PUSH
90307: LD_VAR 0 10
90311: IN
90312: NOT
90313: AND
90314: IFFALSE 90353
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90316: LD_VAR 0 4
90320: PPUSH
90321: LD_VAR 0 7
90325: PUSH
90326: LD_INT 1
90328: ARRAY
90329: PUSH
90330: LD_INT 1
90332: ARRAY
90333: PPUSH
90334: LD_VAR 0 7
90338: PUSH
90339: LD_INT 1
90341: ARRAY
90342: PUSH
90343: LD_INT 2
90345: ARRAY
90346: PPUSH
90347: CALL_OW 116
90351: GO 90642
// if path > tag then
90353: LD_VAR 0 2
90357: PUSH
90358: LD_VAR 0 9
90362: GREATER
90363: IFFALSE 90571
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90365: LD_ADDR_VAR 0 6
90369: PUSH
90370: LD_VAR 0 5
90374: PPUSH
90375: LD_INT 91
90377: PUSH
90378: LD_VAR 0 4
90382: PUSH
90383: LD_INT 8
90385: PUSH
90386: EMPTY
90387: LIST
90388: LIST
90389: LIST
90390: PPUSH
90391: CALL_OW 72
90395: ST_TO_ADDR
// if nearEnemy then
90396: LD_VAR 0 6
90400: IFFALSE 90469
// begin if GetWeapon ( i ) = ru_time_lapser then
90402: LD_VAR 0 4
90406: PPUSH
90407: CALL_OW 264
90411: PUSH
90412: LD_INT 49
90414: EQUAL
90415: IFFALSE 90443
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90417: LD_VAR 0 4
90421: PPUSH
90422: LD_VAR 0 6
90426: PPUSH
90427: LD_VAR 0 4
90431: PPUSH
90432: CALL_OW 74
90436: PPUSH
90437: CALL_OW 112
90441: GO 90467
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90443: LD_VAR 0 4
90447: PPUSH
90448: LD_VAR 0 6
90452: PPUSH
90453: LD_VAR 0 4
90457: PPUSH
90458: CALL_OW 74
90462: PPUSH
90463: CALL_OW 115
// end else
90467: GO 90569
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90469: LD_VAR 0 4
90473: PPUSH
90474: LD_VAR 0 2
90478: PUSH
90479: LD_VAR 0 9
90483: ARRAY
90484: PUSH
90485: LD_INT 1
90487: ARRAY
90488: PPUSH
90489: LD_VAR 0 2
90493: PUSH
90494: LD_VAR 0 9
90498: ARRAY
90499: PUSH
90500: LD_INT 2
90502: ARRAY
90503: PPUSH
90504: CALL_OW 297
90508: PUSH
90509: LD_INT 6
90511: GREATER
90512: IFFALSE 90555
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90514: LD_VAR 0 4
90518: PPUSH
90519: LD_VAR 0 2
90523: PUSH
90524: LD_VAR 0 9
90528: ARRAY
90529: PUSH
90530: LD_INT 1
90532: ARRAY
90533: PPUSH
90534: LD_VAR 0 2
90538: PUSH
90539: LD_VAR 0 9
90543: ARRAY
90544: PUSH
90545: LD_INT 2
90547: ARRAY
90548: PPUSH
90549: CALL_OW 114
90553: GO 90569
// SetTag ( i , tag ) ;
90555: LD_VAR 0 4
90559: PPUSH
90560: LD_VAR 0 9
90564: PPUSH
90565: CALL_OW 109
// end else
90569: GO 90642
// if enemy then
90571: LD_VAR 0 5
90575: IFFALSE 90642
// begin if GetWeapon ( i ) = ru_time_lapser then
90577: LD_VAR 0 4
90581: PPUSH
90582: CALL_OW 264
90586: PUSH
90587: LD_INT 49
90589: EQUAL
90590: IFFALSE 90618
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90592: LD_VAR 0 4
90596: PPUSH
90597: LD_VAR 0 5
90601: PPUSH
90602: LD_VAR 0 4
90606: PPUSH
90607: CALL_OW 74
90611: PPUSH
90612: CALL_OW 112
90616: GO 90642
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90618: LD_VAR 0 4
90622: PPUSH
90623: LD_VAR 0 5
90627: PPUSH
90628: LD_VAR 0 4
90632: PPUSH
90633: CALL_OW 74
90637: PPUSH
90638: CALL_OW 115
// end ; end ;
90642: GO 90222
90644: POP
90645: POP
// end ;
90646: LD_VAR 0 3
90650: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90651: LD_INT 0
90653: PPUSH
90654: PPUSH
90655: PPUSH
// if not unit or IsInUnit ( unit ) then
90656: LD_VAR 0 1
90660: NOT
90661: PUSH
90662: LD_VAR 0 1
90666: PPUSH
90667: CALL_OW 310
90671: OR
90672: IFFALSE 90676
// exit ;
90674: GO 90767
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90676: LD_ADDR_VAR 0 4
90680: PUSH
90681: LD_VAR 0 1
90685: PPUSH
90686: CALL_OW 250
90690: PPUSH
90691: LD_VAR 0 2
90695: PPUSH
90696: LD_INT 1
90698: PPUSH
90699: CALL_OW 272
90703: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90704: LD_ADDR_VAR 0 5
90708: PUSH
90709: LD_VAR 0 1
90713: PPUSH
90714: CALL_OW 251
90718: PPUSH
90719: LD_VAR 0 2
90723: PPUSH
90724: LD_INT 1
90726: PPUSH
90727: CALL_OW 273
90731: ST_TO_ADDR
// if ValidHex ( x , y ) then
90732: LD_VAR 0 4
90736: PPUSH
90737: LD_VAR 0 5
90741: PPUSH
90742: CALL_OW 488
90746: IFFALSE 90767
// ComTurnXY ( unit , x , y ) ;
90748: LD_VAR 0 1
90752: PPUSH
90753: LD_VAR 0 4
90757: PPUSH
90758: LD_VAR 0 5
90762: PPUSH
90763: CALL_OW 118
// end ;
90767: LD_VAR 0 3
90771: RET
// export function SeeUnits ( side , units ) ; var i ; begin
90772: LD_INT 0
90774: PPUSH
90775: PPUSH
// result := false ;
90776: LD_ADDR_VAR 0 3
90780: PUSH
90781: LD_INT 0
90783: ST_TO_ADDR
// if not units then
90784: LD_VAR 0 2
90788: NOT
90789: IFFALSE 90793
// exit ;
90791: GO 90838
// for i in units do
90793: LD_ADDR_VAR 0 4
90797: PUSH
90798: LD_VAR 0 2
90802: PUSH
90803: FOR_IN
90804: IFFALSE 90836
// if See ( side , i ) then
90806: LD_VAR 0 1
90810: PPUSH
90811: LD_VAR 0 4
90815: PPUSH
90816: CALL_OW 292
90820: IFFALSE 90834
// begin result := true ;
90822: LD_ADDR_VAR 0 3
90826: PUSH
90827: LD_INT 1
90829: ST_TO_ADDR
// exit ;
90830: POP
90831: POP
90832: GO 90838
// end ;
90834: GO 90803
90836: POP
90837: POP
// end ;
90838: LD_VAR 0 3
90842: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
90843: LD_INT 0
90845: PPUSH
90846: PPUSH
90847: PPUSH
90848: PPUSH
// if not unit or not points then
90849: LD_VAR 0 1
90853: NOT
90854: PUSH
90855: LD_VAR 0 2
90859: NOT
90860: OR
90861: IFFALSE 90865
// exit ;
90863: GO 90955
// dist := 99999 ;
90865: LD_ADDR_VAR 0 5
90869: PUSH
90870: LD_INT 99999
90872: ST_TO_ADDR
// for i in points do
90873: LD_ADDR_VAR 0 4
90877: PUSH
90878: LD_VAR 0 2
90882: PUSH
90883: FOR_IN
90884: IFFALSE 90953
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
90886: LD_ADDR_VAR 0 6
90890: PUSH
90891: LD_VAR 0 1
90895: PPUSH
90896: LD_VAR 0 4
90900: PUSH
90901: LD_INT 1
90903: ARRAY
90904: PPUSH
90905: LD_VAR 0 4
90909: PUSH
90910: LD_INT 2
90912: ARRAY
90913: PPUSH
90914: CALL_OW 297
90918: ST_TO_ADDR
// if tmpDist < dist then
90919: LD_VAR 0 6
90923: PUSH
90924: LD_VAR 0 5
90928: LESS
90929: IFFALSE 90951
// begin result := i ;
90931: LD_ADDR_VAR 0 3
90935: PUSH
90936: LD_VAR 0 4
90940: ST_TO_ADDR
// dist := tmpDist ;
90941: LD_ADDR_VAR 0 5
90945: PUSH
90946: LD_VAR 0 6
90950: ST_TO_ADDR
// end ; end ;
90951: GO 90883
90953: POP
90954: POP
// end ;
90955: LD_VAR 0 3
90959: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
90960: LD_INT 0
90962: PPUSH
// uc_side := side ;
90963: LD_ADDR_OWVAR 20
90967: PUSH
90968: LD_VAR 0 1
90972: ST_TO_ADDR
// uc_nation := 3 ;
90973: LD_ADDR_OWVAR 21
90977: PUSH
90978: LD_INT 3
90980: ST_TO_ADDR
// vc_chassis := 25 ;
90981: LD_ADDR_OWVAR 37
90985: PUSH
90986: LD_INT 25
90988: ST_TO_ADDR
// vc_engine := engine_siberite ;
90989: LD_ADDR_OWVAR 39
90993: PUSH
90994: LD_INT 3
90996: ST_TO_ADDR
// vc_control := control_computer ;
90997: LD_ADDR_OWVAR 38
91001: PUSH
91002: LD_INT 3
91004: ST_TO_ADDR
// vc_weapon := 59 ;
91005: LD_ADDR_OWVAR 40
91009: PUSH
91010: LD_INT 59
91012: ST_TO_ADDR
// result := CreateVehicle ;
91013: LD_ADDR_VAR 0 5
91017: PUSH
91018: CALL_OW 45
91022: ST_TO_ADDR
// SetDir ( result , d ) ;
91023: LD_VAR 0 5
91027: PPUSH
91028: LD_VAR 0 4
91032: PPUSH
91033: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
91037: LD_VAR 0 5
91041: PPUSH
91042: LD_VAR 0 2
91046: PPUSH
91047: LD_VAR 0 3
91051: PPUSH
91052: LD_INT 0
91054: PPUSH
91055: CALL_OW 48
// end ;
91059: LD_VAR 0 5
91063: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
91064: LD_INT 0
91066: PPUSH
91067: PPUSH
91068: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
91069: LD_ADDR_VAR 0 2
91073: PUSH
91074: LD_INT 0
91076: PUSH
91077: LD_INT 0
91079: PUSH
91080: LD_INT 0
91082: PUSH
91083: LD_INT 0
91085: PUSH
91086: EMPTY
91087: LIST
91088: LIST
91089: LIST
91090: LIST
91091: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
91092: LD_VAR 0 1
91096: NOT
91097: PUSH
91098: LD_VAR 0 1
91102: PPUSH
91103: CALL_OW 264
91107: PUSH
91108: LD_INT 12
91110: PUSH
91111: LD_INT 51
91113: PUSH
91114: LD_INT 32
91116: PUSH
91117: LD_INT 89
91119: PUSH
91120: EMPTY
91121: LIST
91122: LIST
91123: LIST
91124: LIST
91125: IN
91126: NOT
91127: OR
91128: IFFALSE 91132
// exit ;
91130: GO 91230
// for i := 1 to 3 do
91132: LD_ADDR_VAR 0 3
91136: PUSH
91137: DOUBLE
91138: LD_INT 1
91140: DEC
91141: ST_TO_ADDR
91142: LD_INT 3
91144: PUSH
91145: FOR_TO
91146: IFFALSE 91228
// begin tmp := GetCargo ( cargo , i ) ;
91148: LD_ADDR_VAR 0 4
91152: PUSH
91153: LD_VAR 0 1
91157: PPUSH
91158: LD_VAR 0 3
91162: PPUSH
91163: CALL_OW 289
91167: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91168: LD_ADDR_VAR 0 2
91172: PUSH
91173: LD_VAR 0 2
91177: PPUSH
91178: LD_VAR 0 3
91182: PPUSH
91183: LD_VAR 0 4
91187: PPUSH
91188: CALL_OW 1
91192: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91193: LD_ADDR_VAR 0 2
91197: PUSH
91198: LD_VAR 0 2
91202: PPUSH
91203: LD_INT 4
91205: PPUSH
91206: LD_VAR 0 2
91210: PUSH
91211: LD_INT 4
91213: ARRAY
91214: PUSH
91215: LD_VAR 0 4
91219: PLUS
91220: PPUSH
91221: CALL_OW 1
91225: ST_TO_ADDR
// end ;
91226: GO 91145
91228: POP
91229: POP
// end ;
91230: LD_VAR 0 2
91234: RET
// export function Length ( array ) ; begin
91235: LD_INT 0
91237: PPUSH
// result := array + 0 ;
91238: LD_ADDR_VAR 0 2
91242: PUSH
91243: LD_VAR 0 1
91247: PUSH
91248: LD_INT 0
91250: PLUS
91251: ST_TO_ADDR
// end ;
91252: LD_VAR 0 2
91256: RET
// export function PrepareArray ( array ) ; begin
91257: LD_INT 0
91259: PPUSH
// result := array diff 0 ;
91260: LD_ADDR_VAR 0 2
91264: PUSH
91265: LD_VAR 0 1
91269: PUSH
91270: LD_INT 0
91272: DIFF
91273: ST_TO_ADDR
// if not result [ 1 ] then
91274: LD_VAR 0 2
91278: PUSH
91279: LD_INT 1
91281: ARRAY
91282: NOT
91283: IFFALSE 91303
// result := Delete ( result , 1 ) ;
91285: LD_ADDR_VAR 0 2
91289: PUSH
91290: LD_VAR 0 2
91294: PPUSH
91295: LD_INT 1
91297: PPUSH
91298: CALL_OW 3
91302: ST_TO_ADDR
// end ;
91303: LD_VAR 0 2
91307: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
91308: LD_INT 0
91310: PPUSH
91311: PPUSH
91312: PPUSH
91313: PPUSH
// sibRocketRange := 25 ;
91314: LD_ADDR_VAR 0 6
91318: PUSH
91319: LD_INT 25
91321: ST_TO_ADDR
// result := false ;
91322: LD_ADDR_VAR 0 4
91326: PUSH
91327: LD_INT 0
91329: ST_TO_ADDR
// for i := 0 to 5 do
91330: LD_ADDR_VAR 0 5
91334: PUSH
91335: DOUBLE
91336: LD_INT 0
91338: DEC
91339: ST_TO_ADDR
91340: LD_INT 5
91342: PUSH
91343: FOR_TO
91344: IFFALSE 91411
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
91346: LD_VAR 0 1
91350: PPUSH
91351: LD_VAR 0 5
91355: PPUSH
91356: LD_VAR 0 6
91360: PPUSH
91361: CALL_OW 272
91365: PPUSH
91366: LD_VAR 0 2
91370: PPUSH
91371: LD_VAR 0 5
91375: PPUSH
91376: LD_VAR 0 6
91380: PPUSH
91381: CALL_OW 273
91385: PPUSH
91386: LD_VAR 0 3
91390: PPUSH
91391: CALL_OW 309
91395: IFFALSE 91409
// begin result := true ;
91397: LD_ADDR_VAR 0 4
91401: PUSH
91402: LD_INT 1
91404: ST_TO_ADDR
// exit ;
91405: POP
91406: POP
91407: GO 91413
// end ;
91409: GO 91343
91411: POP
91412: POP
// end ; end_of_file
91413: LD_VAR 0 4
91417: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91418: LD_VAR 0 1
91422: PUSH
91423: LD_INT 200
91425: DOUBLE
91426: GREATEREQUAL
91427: IFFALSE 91435
91429: LD_INT 299
91431: DOUBLE
91432: LESSEQUAL
91433: IFTRUE 91437
91435: GO 91469
91437: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91438: LD_VAR 0 1
91442: PPUSH
91443: LD_VAR 0 2
91447: PPUSH
91448: LD_VAR 0 3
91452: PPUSH
91453: LD_VAR 0 4
91457: PPUSH
91458: LD_VAR 0 5
91462: PPUSH
91463: CALL 46137 0 5
91467: GO 91546
91469: LD_INT 300
91471: DOUBLE
91472: GREATEREQUAL
91473: IFFALSE 91481
91475: LD_INT 399
91477: DOUBLE
91478: LESSEQUAL
91479: IFTRUE 91483
91481: GO 91545
91483: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91484: LD_VAR 0 1
91488: PPUSH
91489: LD_VAR 0 2
91493: PPUSH
91494: LD_VAR 0 3
91498: PPUSH
91499: LD_VAR 0 4
91503: PPUSH
91504: LD_VAR 0 5
91508: PPUSH
91509: LD_VAR 0 6
91513: PPUSH
91514: LD_VAR 0 7
91518: PPUSH
91519: LD_VAR 0 8
91523: PPUSH
91524: LD_VAR 0 9
91528: PPUSH
91529: LD_VAR 0 10
91533: PPUSH
91534: LD_VAR 0 11
91538: PPUSH
91539: CALL 42470 0 11
91543: GO 91546
91545: POP
// end ;
91546: PPOPN 11
91548: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91549: LD_VAR 0 1
91553: PPUSH
91554: LD_VAR 0 2
91558: PPUSH
91559: LD_VAR 0 3
91563: PPUSH
91564: LD_VAR 0 4
91568: PPUSH
91569: LD_VAR 0 5
91573: PPUSH
91574: CALL 45873 0 5
// end ; end_of_file
91578: PPOPN 5
91580: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91581: LD_VAR 0 1
91585: PPUSH
91586: LD_VAR 0 2
91590: PPUSH
91591: LD_VAR 0 3
91595: PPUSH
91596: LD_VAR 0 4
91600: PPUSH
91601: LD_VAR 0 5
91605: PPUSH
91606: LD_VAR 0 6
91610: PPUSH
91611: CALL 30163 0 6
// end ;
91615: PPOPN 6
91617: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91618: LD_INT 0
91620: PPUSH
// begin if not units then
91621: LD_VAR 0 1
91625: NOT
91626: IFFALSE 91630
// exit ;
91628: GO 91630
// end ;
91630: PPOPN 7
91632: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91633: CALL 30134 0 0
// end ;
91637: PPOPN 1
91639: END
