// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 30
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 22
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 31
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 40
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 41
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 42
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 43
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 44
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 52
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 49
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 50
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 63
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 67
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 68
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 65
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 55
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 54
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 58
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 61
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 62
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 64
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 59
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 60
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 66
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 56
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 57
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 69
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87746 0 1
// CreateNature ;
 321: CALL 27303 0 0
// PrepareDifficulty ;
 325: CALL 11808 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21681 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21681 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21681 0 2
// PrepareArabianCommander ;
 397: CALL 4250 0 0
// PrepareArabian ;
 401: CALL 4302 0 0
// BuildArabianBase ;
 405: CALL 14623 0 0
// TameApemans ;
 409: CALL 20486 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 69
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 64
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 60
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 50306 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 22
1418: PUSH
1419: LD_EXP 22
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 50306 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 22
1459: PUSH
1460: LD_EXP 22
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 50306 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 22
1500: PUSH
1501: LD_EXP 22
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 50306 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 22
1541: PUSH
1542: LD_EXP 22
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 50306 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 22
1582: PUSH
1583: LD_EXP 22
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 50306 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 22
1623: PUSH
1624: LD_EXP 22
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 50306 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 22
1664: PUSH
1665: LD_EXP 22
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 50306 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 22
1705: PUSH
1706: LD_EXP 22
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 50306 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 22
1746: PUSH
1747: LD_EXP 22
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 23
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 26
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 50306 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 22
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 23
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 30
2249: PUSH
2250: LD_EXP 30
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 23
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 23
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 23
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 30
2512: PUSH
2513: LD_EXP 30
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , false ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 30
2630: IFFALSE 2651
// Truman := PrepareUnit ( Truman , false ,  ) ;
2632: LD_ADDR_EXP 21
2636: PUSH
2637: LD_STRING Truman
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: CALL 50306 0 3
2650: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2651: LD_ADDR_EXP 11
2655: PUSH
2656: LD_STRING Simms
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: LD_STRING 
2664: PPUSH
2665: CALL 50306 0 3
2669: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2670: LD_ADDR_EXP 12
2674: PUSH
2675: LD_STRING Denis
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_STRING 08_
2683: PPUSH
2684: CALL 50306 0 3
2688: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2689: LD_ADDR_EXP 13
2693: PUSH
2694: LD_STRING Joan
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_STRING 08_
2702: PPUSH
2703: CALL 50306 0 3
2707: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , true , 08_ ) ;
2708: LD_ADDR_EXP 19
2712: PUSH
2713: LD_STRING Mike
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: LD_STRING 08_
2721: PPUSH
2722: CALL 50306 0 3
2726: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2727: LD_STRING 08_Khatam
2729: PPUSH
2730: CALL_OW 28
2734: IFFALSE 2757
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2736: LD_ADDR_EXP 14
2740: PUSH
2741: LD_STRING Khatam
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_STRING 08_
2749: PPUSH
2750: CALL 50306 0 3
2754: ST_TO_ADDR
2755: GO 2785
// if TestCharacters ( 03_Khatam ) then
2757: LD_STRING 03_Khatam
2759: PPUSH
2760: CALL_OW 28
2764: IFFALSE 2785
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2766: LD_ADDR_EXP 14
2770: PUSH
2771: LD_STRING Khatam
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 03_
2779: PPUSH
2780: CALL 50306 0 3
2784: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2785: LD_ADDR_EXP 15
2789: PUSH
2790: LD_STRING Gladstone
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_STRING 08_
2798: PPUSH
2799: CALL 50306 0 3
2803: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2804: LD_ADDR_EXP 17
2808: PUSH
2809: LD_STRING DeltaDoctor
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_STRING 
2817: PPUSH
2818: CALL 50306 0 3
2822: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2823: LD_ADDR_EXP 7
2827: PUSH
2828: LD_STRING Frank
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_STRING 08_
2836: PPUSH
2837: CALL 50306 0 3
2841: ST_TO_ADDR
// if Frank then
2842: LD_EXP 7
2846: IFFALSE 2869
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2848: LD_ADDR_EXP 8
2852: PUSH
2853: LD_STRING Yamoko
2855: PPUSH
2856: LD_INT 0
2858: PPUSH
2859: LD_STRING 
2861: PPUSH
2862: CALL 50306 0 3
2866: ST_TO_ADDR
2867: GO 2888
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2869: LD_ADDR_EXP 8
2873: PUSH
2874: LD_STRING Kikuchi
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_STRING 08_
2882: PPUSH
2883: CALL 50306 0 3
2887: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2888: LD_ADDR_EXP 24
2892: PUSH
2893: LD_STRING 09_others
2895: PPUSH
2896: CALL_OW 31
2900: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2901: LD_ADDR_EXP 25
2905: PUSH
2906: LD_STRING 09_apes
2908: PPUSH
2909: CALL_OW 31
2913: ST_TO_ADDR
// if Truman then
2914: LD_EXP 21
2918: IFFALSE 2935
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2920: LD_EXP 21
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 49
// PlaceUnitArea ( Mike , CathyTeamSpawn , false ) ;
2935: LD_EXP 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2950: LD_EXP 11
2954: PPUSH
2955: LD_INT 1
2957: PPUSH
2958: LD_INT 0
2960: PPUSH
2961: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2965: LD_EXP 12
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2980: LD_EXP 13
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2995: LD_EXP 14
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
3010: LD_EXP 15
3014: PPUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 0
3020: PPUSH
3021: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
3025: LD_EXP 17
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// if Kikuchi then
3040: LD_EXP 8
3044: IFFALSE 3061
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3046: LD_EXP 8
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3061: LD_EXP 11
3065: PUSH
3066: LD_EXP 14
3070: PUSH
3071: LD_EXP 12
3075: PUSH
3076: LD_EXP 15
3080: PUSH
3081: LD_EXP 17
3085: PUSH
3086: LD_EXP 13
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: LD_INT 4
3101: PPUSH
3102: CALL_OW 336
// if others09 > 2 then
3106: LD_EXP 24
3110: PUSH
3111: LD_INT 2
3113: GREATER
3114: IFFALSE 3195
// begin for i := 1 to 3 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: DOUBLE
3122: LD_INT 1
3124: DEC
3125: ST_TO_ADDR
3126: LD_INT 3
3128: PUSH
3129: FOR_TO
3130: IFFALSE 3191
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3132: LD_EXP 24
3136: PUSH
3137: LD_VAR 0 2
3141: ARRAY
3142: PPUSH
3143: LD_INT 1
3145: PPUSH
3146: LD_INT 0
3148: PPUSH
3149: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3153: LD_ADDR_EXP 24
3157: PUSH
3158: LD_EXP 24
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 3
3170: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3171: LD_EXP 24
3175: PUSH
3176: LD_VAR 0 2
3180: ARRAY
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: CALL_OW 336
// end ;
3189: GO 3129
3191: POP
3192: POP
// end else
3193: GO 3255
// begin for i in others09 do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_EXP 24
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3253
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 49
// others09 = others09 diff i ;
3223: LD_ADDR_EXP 24
3227: PUSH
3228: LD_EXP 24
3232: PUSH
3233: LD_VAR 0 2
3237: DIFF
3238: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_INT 2
3246: PPUSH
3247: CALL_OW 336
// end ;
3251: GO 3205
3253: POP
3254: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3255: LD_INT 22
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 25
3267: PUSH
3268: LD_INT 2
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: PUSH
3284: LD_INT 0
3286: EQUAL
3287: IFFALSE 3419
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 22
3296: PUSH
3297: LD_INT 4
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 25
3306: PUSH
3307: LD_INT 2
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PUSH
3323: LD_EXP 11
3327: PUSH
3328: LD_EXP 14
3332: PUSH
3333: LD_EXP 12
3337: PUSH
3338: LD_EXP 15
3342: PUSH
3343: LD_EXP 17
3347: PUSH
3348: LD_EXP 13
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: DIFF
3361: ST_TO_ADDR
// if not tmp then
3362: LD_VAR 0 3
3366: NOT
3367: IFFALSE 3403
// begin if Denis then
3369: LD_EXP 12
3373: IFFALSE 3389
// SetClass ( Denis , 2 ) else
3375: LD_EXP 12
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
3387: GO 3401
// SetClass ( DeltaDoctor , 2 ) ;
3389: LD_EXP 17
3393: PPUSH
3394: LD_INT 2
3396: PPUSH
3397: CALL_OW 336
// end else
3401: GO 3419
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3403: LD_VAR 0 3
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: PPUSH
3412: LD_INT 2
3414: PPUSH
3415: CALL_OW 336
// end ; end ; for i in ape09 do
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: LD_EXP 25
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3449
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3432: LD_VAR 0 2
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
3447: GO 3429
3449: POP
3450: POP
// uc_side = 4 ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_INT 4
3458: ST_TO_ADDR
// hc_class := 1 ;
3459: LD_ADDR_OWVAR 28
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// hc_sex := sex_female ;
3467: LD_ADDR_OWVAR 27
3471: PUSH
3472: LD_INT 2
3474: ST_TO_ADDR
// hc_gallery :=  ;
3475: LD_ADDR_OWVAR 33
3479: PUSH
3480: LD_STRING 
3482: ST_TO_ADDR
// hc_name :=  ;
3483: LD_ADDR_OWVAR 26
3487: PUSH
3488: LD_STRING 
3490: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3491: LD_ADDR_OWVAR 31
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: LD_INT 7
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// AmScout = CreateHuman ;
3514: LD_ADDR_EXP 18
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// end ;
3524: LD_VAR 0 1
3528: RET
// export function PrepareCornell ; begin
3529: LD_INT 0
3531: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 4
3537: PPUSH
3538: CALL_OW 343
// uc_side = 4 ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_INT 4
3549: ST_TO_ADDR
// uc_nation = 1 ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3558: LD_ADDR_EXP 20
3562: PUSH
3563: LD_STRING Cornel
3565: PPUSH
3566: LD_INT 1
3568: PPUSH
3569: LD_STRING 03_
3571: PPUSH
3572: CALL 50306 0 3
3576: ST_TO_ADDR
// if not Cornell then
3577: LD_EXP 20
3581: NOT
3582: IFFALSE 3586
// exit ;
3584: GO 3694
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3586: LD_EXP 20
3590: PPUSH
3591: LD_INT 8
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3601: LD_EXP 20
3605: PPUSH
3606: LD_INT 350
3608: PPUSH
3609: CALL_OW 234
// if IsInUnit ( JMM ) then
3613: LD_EXP 1
3617: PPUSH
3618: CALL_OW 310
3622: IFFALSE 3665
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3624: LD_EXP 20
3628: PPUSH
3629: LD_EXP 1
3633: PPUSH
3634: CALL_OW 310
3638: PPUSH
3639: CALL_OW 250
3643: PPUSH
3644: LD_EXP 1
3648: PPUSH
3649: CALL_OW 310
3653: PPUSH
3654: CALL_OW 251
3658: PPUSH
3659: CALL_OW 111
3663: GO 3694
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3665: LD_EXP 20
3669: PPUSH
3670: LD_EXP 1
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 1
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// end ;
3694: LD_VAR 0 1
3698: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3699: LD_EXP 21
3703: PPUSH
3704: LD_INT 17
3706: PPUSH
3707: LD_INT 31
3709: PPUSH
3710: CALL_OW 307
3714: IFFALSE 3728
3716: GO 3718
3718: DISABLE
// RemoveUnit ( Truman ) ;
3719: LD_EXP 21
3723: PPUSH
3724: CALL_OW 64
3728: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3729: LD_EXP 31
3733: PUSH
3734: LD_INT 1
3736: EQUAL
3737: PUSH
3738: LD_EXP 21
3742: PPUSH
3743: CALL_OW 302
3747: AND
3748: PUSH
3749: LD_EXP 21
3753: PPUSH
3754: CALL_OW 314
3758: NOT
3759: AND
3760: IFFALSE 3781
3762: GO 3764
3764: DISABLE
// begin enable ;
3765: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3766: LD_EXP 21
3770: PPUSH
3771: LD_INT 17
3773: PPUSH
3774: LD_INT 31
3776: PPUSH
3777: CALL_OW 111
// end ; end_of_file
3781: END
// export function PrepareRussians ; var i , un ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// uc_side = 3 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 3
3794: ST_TO_ADDR
// uc_nation = 3 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 3
3802: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3803: LD_ADDR_EXP 27
3807: PUSH
3808: LD_STRING Tsaritsyn
3810: PPUSH
3811: LD_INT 0
3813: PPUSH
3814: LD_STRING 
3816: PPUSH
3817: CALL 50306 0 3
3821: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3822: LD_EXP 27
3826: PPUSH
3827: LD_INT 3
3829: PPUSH
3830: LD_INT 0
3832: PPUSH
3833: CALL_OW 49
// for i = 1 to 9 do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: DOUBLE
3843: LD_INT 1
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 9
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3937
// begin uc_side = 3 ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_INT 3
3860: ST_TO_ADDR
// uc_nation = 3 ;
3861: LD_ADDR_OWVAR 21
3865: PUSH
3866: LD_INT 3
3868: ST_TO_ADDR
// hc_gallery =  ;
3869: LD_ADDR_OWVAR 33
3873: PUSH
3874: LD_STRING 
3876: ST_TO_ADDR
// hc_name =  ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING 
3884: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_EXP 38
3895: PPUSH
3896: LD_EXP 39
3900: PPUSH
3901: CALL_OW 12
3905: PPUSH
3906: CALL_OW 380
// un = CreateHuman ;
3910: LD_ADDR_VAR 0 3
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 49
// end ;
3935: GO 3850
3937: POP
3938: POP
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4039
// begin uc_side = 3 ;
3955: LD_ADDR_OWVAR 20
3959: PUSH
3960: LD_INT 3
3962: ST_TO_ADDR
// uc_nation = 3 ;
3963: LD_ADDR_OWVAR 21
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// hc_gallery =  ;
3971: LD_ADDR_OWVAR 33
3975: PUSH
3976: LD_STRING 
3978: ST_TO_ADDR
// hc_name =  ;
3979: LD_ADDR_OWVAR 26
3983: PUSH
3984: LD_STRING 
3986: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 2
3992: PPUSH
3993: LD_EXP 38
3997: PPUSH
3998: LD_EXP 39
4002: PPUSH
4003: CALL_OW 12
4007: PPUSH
4008: CALL_OW 380
// un = CreateHuman ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: CALL_OW 44
4021: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 49
// end ;
4037: GO 3952
4039: POP
4040: POP
// for i = 1 to 6 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 6
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4141
// begin uc_side = 3 ;
4057: LD_ADDR_OWVAR 20
4061: PUSH
4062: LD_INT 3
4064: ST_TO_ADDR
// uc_nation = 3 ;
4065: LD_ADDR_OWVAR 21
4069: PUSH
4070: LD_INT 3
4072: ST_TO_ADDR
// hc_gallery =  ;
4073: LD_ADDR_OWVAR 33
4077: PUSH
4078: LD_STRING 
4080: ST_TO_ADDR
// hc_name =  ;
4081: LD_ADDR_OWVAR 26
4085: PUSH
4086: LD_STRING 
4088: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 3
4094: PPUSH
4095: LD_EXP 38
4099: PPUSH
4100: LD_EXP 39
4104: PPUSH
4105: CALL_OW 12
4109: PPUSH
4110: CALL_OW 380
// un = CreateHuman ;
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: CALL_OW 44
4123: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 49
// end ;
4139: GO 4054
4141: POP
4142: POP
// for i = 1 to 4 do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: DOUBLE
4149: LD_INT 1
4151: DEC
4152: ST_TO_ADDR
4153: LD_INT 4
4155: PUSH
4156: FOR_TO
4157: IFFALSE 4243
// begin uc_side = 3 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 3
4166: ST_TO_ADDR
// uc_nation = 3 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 3
4174: ST_TO_ADDR
// hc_gallery =  ;
4175: LD_ADDR_OWVAR 33
4179: PUSH
4180: LD_STRING 
4182: ST_TO_ADDR
// hc_name =  ;
4183: LD_ADDR_OWVAR 26
4187: PUSH
4188: LD_STRING 
4190: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 4
4196: PPUSH
4197: LD_EXP 38
4201: PPUSH
4202: LD_EXP 39
4206: PPUSH
4207: CALL_OW 12
4211: PPUSH
4212: CALL_OW 380
// un = CreateHuman ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: CALL_OW 44
4225: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4156
4243: POP
4244: POP
// end ; end_of_file
4245: LD_VAR 0 1
4249: RET
// export function PrepareArabianCommander ; begin
4250: LD_INT 0
4252: PPUSH
// uc_side = 2 ;
4253: LD_ADDR_OWVAR 20
4257: PUSH
4258: LD_INT 2
4260: ST_TO_ADDR
// uc_nation = 2 ;
4261: LD_ADDR_OWVAR 21
4265: PUSH
4266: LD_INT 2
4268: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4269: LD_ADDR_EXP 28
4273: PUSH
4274: LD_STRING Dietrich
4276: PPUSH
4277: CALL_OW 25
4281: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4282: LD_EXP 28
4286: PPUSH
4287: LD_INT 4
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 49
// end ;
4297: LD_VAR 0 1
4301: RET
// export function PrepareArabian ; var i , un , veh ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// uc_side := 2 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 2
4315: ST_TO_ADDR
// uc_nation := 2 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 2
4323: ST_TO_ADDR
// if not Ahmed then
4324: LD_EXP 29
4328: NOT
4329: IFFALSE 4397
// begin InitHc ;
4331: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4335: LD_INT 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: LD_EXP 38
4345: PPUSH
4346: LD_EXP 39
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Ahmed Abbasid
4371: ST_TO_ADDR
// Ahmed := CreateHuman ;
4372: LD_ADDR_EXP 29
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4382: LD_EXP 29
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// end ; for i = 1 to 4 do
4397: LD_ADDR_VAR 0 2
4401: PUSH
4402: DOUBLE
4403: LD_INT 1
4405: DEC
4406: ST_TO_ADDR
4407: LD_INT 4
4409: PUSH
4410: FOR_TO
4411: IFFALSE 4497
// begin uc_side = 2 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// uc_nation = 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery =  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_name =  ;
4437: LD_ADDR_OWVAR 26
4441: PUSH
4442: LD_STRING 
4444: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 2
4450: PPUSH
4451: LD_EXP 38
4455: PPUSH
4456: LD_EXP 39
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 380
// un = CreateHuman ;
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: CALL_OW 44
4479: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4480: LD_VAR 0 3
4484: PPUSH
4485: LD_INT 4
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 49
// end ;
4495: GO 4410
4497: POP
4498: POP
// for i = 1 to 5 do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: DOUBLE
4505: LD_INT 1
4507: DEC
4508: ST_TO_ADDR
4509: LD_INT 5
4511: PUSH
4512: FOR_TO
4513: IFFALSE 4599
// begin uc_side = 2 ;
4515: LD_ADDR_OWVAR 20
4519: PUSH
4520: LD_INT 2
4522: ST_TO_ADDR
// uc_nation = 2 ;
4523: LD_ADDR_OWVAR 21
4527: PUSH
4528: LD_INT 2
4530: ST_TO_ADDR
// hc_gallery =  ;
4531: LD_ADDR_OWVAR 33
4535: PUSH
4536: LD_STRING 
4538: ST_TO_ADDR
// hc_name =  ;
4539: LD_ADDR_OWVAR 26
4543: PUSH
4544: LD_STRING 
4546: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4547: LD_INT 0
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_EXP 38
4557: PPUSH
4558: LD_EXP 39
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: CALL_OW 380
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 4
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4512
4599: POP
4600: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4601: LD_ADDR_VAR 0 2
4605: PUSH
4606: DOUBLE
4607: LD_INT 1
4609: DEC
4610: ST_TO_ADDR
4611: LD_INT 3
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: PUSH
4629: LD_OWVAR 67
4633: ARRAY
4634: PUSH
4635: FOR_TO
4636: IFFALSE 4722
// begin uc_side = 2 ;
4638: LD_ADDR_OWVAR 20
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// uc_nation = 2 ;
4646: LD_ADDR_OWVAR 21
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// hc_gallery =  ;
4654: LD_ADDR_OWVAR 33
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// hc_name =  ;
4662: LD_ADDR_OWVAR 26
4666: PUSH
4667: LD_STRING 
4669: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4670: LD_INT 0
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: LD_EXP 38
4680: PPUSH
4681: LD_EXP 39
4685: PPUSH
4686: CALL_OW 12
4690: PPUSH
4691: CALL_OW 380
// un = CreateHuman ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: CALL_OW 44
4704: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4705: LD_VAR 0 3
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL_OW 49
// end ;
4720: GO 4635
4722: POP
4723: POP
// for i = 1 to 2 do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_INT 2
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4868
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4740: LD_ADDR_VAR 0 4
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 58
4767: PUSH
4768: EMPTY
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: ST_TO_ADDR
// uc_side = 2 ;
4781: LD_ADDR_OWVAR 20
4785: PUSH
4786: LD_INT 2
4788: ST_TO_ADDR
// uc_nation = 2 ;
4789: LD_ADDR_OWVAR 21
4793: PUSH
4794: LD_INT 2
4796: ST_TO_ADDR
// hc_gallery =  ;
4797: LD_ADDR_OWVAR 33
4801: PUSH
4802: LD_STRING 
4804: ST_TO_ADDR
// hc_name =  ;
4805: LD_ADDR_OWVAR 26
4809: PUSH
4810: LD_STRING 
4812: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4813: LD_INT 0
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_EXP 38
4823: PPUSH
4824: LD_EXP 39
4828: PPUSH
4829: CALL_OW 12
4833: PPUSH
4834: CALL_OW 380
// un = CreateHuman ;
4838: LD_ADDR_VAR 0 3
4842: PUSH
4843: CALL_OW 44
4847: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4848: LD_VAR 0 3
4852: PPUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: CALL_OW 52
// end ;
4866: GO 4737
4868: POP
4869: POP
// end ;
4870: LD_VAR 0 1
4874: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4875: LD_INT 0
4877: PPUSH
4878: PPUSH
4879: PPUSH
4880: PPUSH
4881: PPUSH
4882: PPUSH
// for i := 1 to 2 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 2
4895: PUSH
4896: FOR_TO
4897: IFFALSE 5023
// begin uc_side = 5 ;
4899: LD_ADDR_OWVAR 20
4903: PUSH
4904: LD_INT 5
4906: ST_TO_ADDR
// uc_nation = 2 ;
4907: LD_ADDR_OWVAR 21
4911: PUSH
4912: LD_INT 2
4914: ST_TO_ADDR
// vc_chassis := 31 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 31
4922: ST_TO_ADDR
// vc_control := control_rider ;
4923: LD_ADDR_OWVAR 38
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// animal := CreateVehicle ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: CALL_OW 45
4940: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_INT 7
4948: PPUSH
4949: LD_INT 0
4951: PPUSH
4952: CALL_OW 49
// hc_gallery =  ;
4956: LD_ADDR_OWVAR 33
4960: PUSH
4961: LD_STRING 
4963: ST_TO_ADDR
// hc_name =  ;
4964: LD_ADDR_OWVAR 26
4968: PUSH
4969: LD_STRING 
4971: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4972: LD_INT 0
4974: PPUSH
4975: LD_INT 11
4977: PPUSH
4978: LD_EXP 38
4982: PPUSH
4983: LD_EXP 39
4987: PPUSH
4988: CALL_OW 12
4992: PPUSH
4993: CALL_OW 380
// un = CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
5007: LD_VAR 0 4
5011: PPUSH
5012: LD_VAR 0 3
5016: PPUSH
5017: CALL_OW 52
// end ;
5021: GO 4896
5023: POP
5024: POP
// repeat wait ( 0 0$1 ) ;
5025: LD_INT 35
5027: PPUSH
5028: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5032: LD_ADDR_VAR 0 5
5036: PUSH
5037: LD_INT 22
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 69
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL_OW 74
5061: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5062: LD_ADDR_VAR 0 6
5066: PUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 59
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: LD_INT 21
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: PPUSH
5119: CALL_OW 69
5123: PPUSH
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 74
5133: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 5
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 25
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 69
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5239
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5171: LD_VAR 0 2
5175: PPUSH
5176: LD_VAR 0 5
5180: PPUSH
5181: CALL_OW 296
5185: PUSH
5186: LD_INT 8
5188: PLUS
5189: PUSH
5190: LD_VAR 0 2
5194: PPUSH
5195: LD_VAR 0 6
5199: PPUSH
5200: CALL_OW 296
5204: LESS
5205: IFFALSE 5223
// ComAttackUnit ( i , target1 ) else
5207: LD_VAR 0 2
5211: PPUSH
5212: LD_VAR 0 5
5216: PPUSH
5217: CALL_OW 115
5221: GO 5237
// ComAttackUnit ( i , target2 ) ;
5223: LD_VAR 0 2
5227: PPUSH
5228: LD_VAR 0 6
5232: PPUSH
5233: CALL_OW 115
// end ;
5237: GO 5168
5239: POP
5240: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 ;
5241: LD_INT 22
5243: PUSH
5244: LD_INT 5
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 25
5253: PUSH
5254: LD_INT 11
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: PUSH
5270: LD_INT 0
5272: EQUAL
5273: IFFALSE 5025
// end ; end_of_file
5275: LD_VAR 0 1
5279: RET
// every 0 0$1 do
5280: GO 5282
5282: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5283: LD_INT 1
5285: PPUSH
5286: LD_INT 19
5288: PPUSH
5289: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5293: LD_EXP 11
5297: PPUSH
5298: CALL_OW 87
// wait ( 0 0$3 ) ;
5302: LD_INT 105
5304: PPUSH
5305: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5309: LD_EXP 1
5313: PPUSH
5314: CALL_OW 310
5318: PPUSH
5319: CALL_OW 85
// Wait ( 0 0$1 ) ;
5323: LD_INT 35
5325: PPUSH
5326: CALL_OW 67
// if IsOk ( Gary ) then
5330: LD_EXP 10
5334: PPUSH
5335: CALL_OW 302
5339: IFFALSE 5377
// begin Say ( Gary , D2-Gary-1 ) ;
5341: LD_EXP 10
5345: PPUSH
5346: LD_STRING D2-Gary-1
5348: PPUSH
5349: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5353: LD_EXP 1
5357: PPUSH
5358: LD_STRING D2-JMM-1
5360: PPUSH
5361: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5365: LD_EXP 10
5369: PPUSH
5370: LD_STRING D2-Gary-2
5372: PPUSH
5373: CALL_OW 88
// end ; Video ( false ) ;
5377: LD_INT 0
5379: PPUSH
5380: CALL 87746 0 1
// ChangeMissionObjectives ( M1 ) ;
5384: LD_STRING M1
5386: PPUSH
5387: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5391: LD_INT 38
5393: PPUSH
5394: LD_INT 1
5396: PPUSH
5397: LD_INT 100
5399: PPUSH
5400: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5404: LD_INT 47
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_INT 50
5412: PPUSH
5413: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5417: LD_INT 47
5419: PPUSH
5420: LD_INT 3
5422: PPUSH
5423: LD_INT 50
5425: PPUSH
5426: CALL_OW 291
// SaveForQuickRestart ;
5430: CALL_OW 22
// end ;
5434: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5435: LD_EXP 1
5439: PPUSH
5440: LD_EXP 11
5444: PPUSH
5445: CALL_OW 296
5449: PUSH
5450: LD_INT 15
5452: LESS
5453: IFFALSE 6281
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
// begin wait ( 0 0$3 ) ;
5461: LD_INT 105
5463: PPUSH
5464: CALL_OW 67
// Video ( true ) ;
5468: LD_INT 1
5470: PPUSH
5471: CALL 87746 0 1
// ComExitVehicle ( JMM ) ;
5475: LD_EXP 1
5479: PPUSH
5480: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5484: LD_EXP 1
5488: PPUSH
5489: CALL_OW 87
// if Truman then
5493: LD_EXP 21
5497: IFFALSE 5634
// begin ComMoveUnit ( Truman , JMM ) ;
5499: LD_EXP 21
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5513: LD_INT 35
5515: PPUSH
5516: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5520: LD_EXP 21
5524: PPUSH
5525: LD_EXP 1
5529: PPUSH
5530: CALL_OW 296
5534: PUSH
5535: LD_INT 6
5537: LESS
5538: IFFALSE 5513
// ComTurnUnit ( Truman , JMM ) ;
5540: LD_EXP 21
5544: PPUSH
5545: LD_EXP 1
5549: PPUSH
5550: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5554: LD_EXP 1
5558: PPUSH
5559: LD_EXP 21
5563: PPUSH
5564: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5568: LD_EXP 21
5572: PPUSH
5573: LD_STRING D2-Tru-1
5575: PPUSH
5576: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5580: LD_EXP 1
5584: PPUSH
5585: LD_STRING D2-JMM-Tru-1
5587: PPUSH
5588: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5592: LD_EXP 21
5596: PPUSH
5597: LD_STRING D2-Tru-2
5599: PPUSH
5600: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5604: LD_EXP 21
5608: PPUSH
5609: LD_INT 79
5611: PPUSH
5612: LD_INT 41
5614: PPUSH
5615: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5619: LD_EXP 21
5623: PPUSH
5624: LD_INT 17
5626: PPUSH
5627: LD_INT 31
5629: PPUSH
5630: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5634: LD_EXP 1
5638: PPUSH
5639: LD_EXP 11
5643: PPUSH
5644: CALL_OW 179
// p := 15 ;
5648: LD_ADDR_VAR 0 1
5652: PUSH
5653: LD_INT 15
5655: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5656: LD_INT 35
5658: PPUSH
5659: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5663: LD_EXP 11
5667: PUSH
5668: LD_EXP 13
5672: PUSH
5673: LD_EXP 12
5677: PUSH
5678: LD_EXP 14
5682: PUSH
5683: LD_EXP 8
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: LD_EXP 1
5699: PPUSH
5700: CALL_OW 112
// p := p - 1 ;
5704: LD_ADDR_VAR 0 1
5708: PUSH
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: MINUS
5717: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5718: LD_EXP 1
5722: PPUSH
5723: LD_EXP 11
5727: PPUSH
5728: CALL_OW 296
5732: PUSH
5733: LD_INT 5
5735: LESS
5736: PUSH
5737: LD_VAR 0 1
5741: PUSH
5742: LD_INT 0
5744: LESSEQUAL
5745: OR
5746: IFFALSE 5656
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5748: LD_EXP 11
5752: PUSH
5753: LD_EXP 13
5757: PUSH
5758: LD_EXP 12
5762: PUSH
5763: LD_EXP 14
5767: PUSH
5768: LD_EXP 8
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PPUSH
5780: LD_EXP 1
5784: PPUSH
5785: CALL_OW 119
// if not IsInUnit ( JMM ) then
5789: LD_EXP 1
5793: PPUSH
5794: CALL_OW 310
5798: NOT
5799: IFFALSE 5815
// ComTurnUnit ( JMM , Simms ) ;
5801: LD_EXP 1
5805: PPUSH
5806: LD_EXP 11
5810: PPUSH
5811: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5815: LD_EXP 11
5819: PUSH
5820: LD_EXP 13
5824: PUSH
5825: LD_EXP 12
5829: PUSH
5830: LD_EXP 14
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: PPUSH
5841: LD_EXP 1
5845: PPUSH
5846: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5850: LD_EXP 1
5854: PUSH
5855: LD_EXP 11
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5868: LD_EXP 11
5872: PPUSH
5873: LD_STRING D2a-Sim-1
5875: PPUSH
5876: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5880: LD_EXP 1
5884: PPUSH
5885: LD_STRING D2a-JMM-1
5887: PPUSH
5888: CALL_OW 88
// if IsOk ( Joan ) then
5892: LD_EXP 13
5896: PPUSH
5897: CALL_OW 302
5901: IFFALSE 5979
// begin if not IsInUnit ( JMM ) then
5903: LD_EXP 1
5907: PPUSH
5908: CALL_OW 310
5912: NOT
5913: IFFALSE 5929
// ComTurnUnit ( JMM , Joan ) ;
5915: LD_EXP 1
5919: PPUSH
5920: LD_EXP 13
5924: PPUSH
5925: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5929: LD_EXP 13
5933: PPUSH
5934: LD_EXP 1
5938: PPUSH
5939: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5943: LD_EXP 13
5947: PPUSH
5948: LD_STRING D2b-Joan-1
5950: PPUSH
5951: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5955: LD_EXP 1
5959: PPUSH
5960: LD_STRING D2b-JMM-1
5962: PPUSH
5963: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5967: LD_EXP 13
5971: PPUSH
5972: LD_STRING D2b-Joan-2
5974: PPUSH
5975: CALL_OW 88
// end ; if IsOk ( Denis ) then
5979: LD_EXP 12
5983: PPUSH
5984: CALL_OW 302
5988: IFFALSE 6042
// begin if not IsInUnit ( JMM ) then
5990: LD_EXP 1
5994: PPUSH
5995: CALL_OW 310
5999: NOT
6000: IFFALSE 6016
// ComTurnUnit ( JMM , Denis ) ;
6002: LD_EXP 1
6006: PPUSH
6007: LD_EXP 12
6011: PPUSH
6012: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6016: LD_EXP 12
6020: PPUSH
6021: LD_EXP 1
6025: PPUSH
6026: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6030: LD_EXP 12
6034: PPUSH
6035: LD_STRING D2c-Den-1
6037: PPUSH
6038: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6042: LD_EXP 8
6046: PPUSH
6047: CALL_OW 302
6051: PUSH
6052: LD_STRING 08_Kikuchi
6054: PPUSH
6055: CALL_OW 28
6059: NOT
6060: AND
6061: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6063: LD_INT 35
6065: PPUSH
6066: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6070: LD_EXP 8
6074: PPUSH
6075: LD_EXP 1
6079: PPUSH
6080: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6084: LD_EXP 1
6088: PPUSH
6089: LD_EXP 8
6093: PPUSH
6094: CALL_OW 296
6098: PUSH
6099: LD_INT 5
6101: LESS
6102: IFFALSE 6063
// ComTurnUnit ( Kikuchi , JMM ) ;
6104: LD_EXP 8
6108: PPUSH
6109: LD_EXP 1
6113: PPUSH
6114: CALL_OW 119
// if not IsInUnit ( JMM ) then
6118: LD_EXP 1
6122: PPUSH
6123: CALL_OW 310
6127: NOT
6128: IFFALSE 6144
// ComTurnUnit ( JMM , Kikuchi ) ;
6130: LD_EXP 1
6134: PPUSH
6135: LD_EXP 8
6139: PPUSH
6140: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6144: LD_EXP 8
6148: PPUSH
6149: LD_STRING D3b-Yam-1
6151: PPUSH
6152: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6156: LD_EXP 14
6160: PPUSH
6161: CALL_OW 302
6165: IFFALSE 6231
// begin if not IsInUnit ( JMM ) then
6167: LD_EXP 1
6171: PPUSH
6172: CALL_OW 310
6176: NOT
6177: IFFALSE 6193
// ComTurnUnit ( JMM , Khatam ) ;
6179: LD_EXP 1
6183: PPUSH
6184: LD_EXP 14
6188: PPUSH
6189: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6193: LD_EXP 14
6197: PPUSH
6198: LD_EXP 1
6202: PPUSH
6203: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6207: LD_EXP 1
6211: PPUSH
6212: LD_STRING D2c-JMM-1
6214: PPUSH
6215: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6219: LD_EXP 14
6223: PPUSH
6224: LD_STRING D2c-Khat-1
6226: PPUSH
6227: CALL_OW 88
// end ; Video ( false ) ;
6231: LD_INT 0
6233: PPUSH
6234: CALL 87746 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PUSH
6253: LD_EXP 21
6257: DIFF
6258: PPUSH
6259: LD_INT 1
6261: PPUSH
6262: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6266: LD_STRING M1a
6268: PPUSH
6269: CALL_OW 337
// joinEpsilon := 1 ;
6273: LD_ADDR_EXP 31
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// end ;
6281: PPOPN 1
6283: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6284: LD_INT 38
6286: PPUSH
6287: LD_INT 1
6289: PPUSH
6290: CALL_OW 289
6294: PUSH
6295: LD_INT 0
6297: EQUAL
6298: PUSH
6299: LD_INT 47
6301: PPUSH
6302: LD_INT 1
6304: PPUSH
6305: CALL_OW 289
6309: PUSH
6310: LD_INT 0
6312: EQUAL
6313: AND
6314: PUSH
6315: LD_INT 47
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 289
6325: PUSH
6326: LD_INT 0
6328: EQUAL
6329: AND
6330: IFFALSE 6455
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
// begin p := 0 ;
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6346: LD_INT 38
6348: PUSH
6349: LD_INT 47
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: LD_INT 56
6358: PPUSH
6359: LD_INT 0
6361: PPUSH
6362: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6366: LD_INT 35
6368: PPUSH
6369: CALL_OW 67
// p := p + 1 ;
6373: LD_ADDR_VAR 0 1
6377: PUSH
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: PLUS
6386: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6387: LD_INT 38
6389: PUSH
6390: LD_INT 47
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PPUSH
6397: LD_INT 56
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6407: LD_INT 38
6409: PPUSH
6410: LD_INT 27
6412: PPUSH
6413: CALL_OW 308
6417: IFFALSE 6426
// RemoveUnit ( cargo1 ) ;
6419: LD_INT 38
6421: PPUSH
6422: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6426: LD_INT 47
6428: PPUSH
6429: LD_INT 27
6431: PPUSH
6432: CALL_OW 308
6436: IFFALSE 6445
// RemoveUnit ( cargo2 ) ;
6438: LD_INT 47
6440: PPUSH
6441: CALL_OW 64
// until p > 30 ;
6445: LD_VAR 0 1
6449: PUSH
6450: LD_INT 30
6452: GREATER
6453: IFFALSE 6366
// end ;
6455: PPOPN 1
6457: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6458: LD_EXP 67
6462: PUSH
6463: LD_INT 1
6465: EQUAL
6466: IFFALSE 7640
6468: GO 6470
6470: DISABLE
6471: LD_INT 0
6473: PPUSH
6474: PPUSH
6475: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_INT 22
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 26
6503: PUSH
6504: LD_INT 1
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: PPUSH
6516: CALL_OW 69
6520: PUSH
6521: LD_EXP 1
6525: PUSH
6526: LD_EXP 2
6530: PUSH
6531: LD_EXP 3
6535: PUSH
6536: LD_EXP 4
6540: PUSH
6541: LD_EXP 5
6545: PUSH
6546: LD_EXP 6
6550: PUSH
6551: LD_EXP 7
6555: PUSH
6556: LD_EXP 8
6560: PUSH
6561: LD_EXP 9
6565: PUSH
6566: LD_EXP 10
6570: PUSH
6571: LD_EXP 11
6575: PUSH
6576: LD_EXP 12
6580: PUSH
6581: LD_EXP 13
6585: PUSH
6586: LD_EXP 14
6590: PUSH
6591: LD_EXP 15
6595: PUSH
6596: LD_EXP 16
6600: PUSH
6601: LD_EXP 17
6605: PUSH
6606: LD_EXP 18
6610: PUSH
6611: LD_EXP 20
6615: PUSH
6616: LD_EXP 26
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: DIFF
6643: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 26
6661: PUSH
6662: LD_INT 1
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: LD_INT 25
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 25
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 25
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: LD_EXP 2
6727: PUSH
6728: LD_EXP 3
6732: PUSH
6733: LD_EXP 4
6737: PUSH
6738: LD_EXP 5
6742: PUSH
6743: LD_EXP 6
6747: PUSH
6748: LD_EXP 7
6752: PUSH
6753: LD_EXP 8
6757: PUSH
6758: LD_EXP 9
6762: PUSH
6763: LD_EXP 10
6767: PUSH
6768: LD_EXP 11
6772: PUSH
6773: LD_EXP 12
6777: PUSH
6778: LD_EXP 13
6782: PUSH
6783: LD_EXP 14
6787: PUSH
6788: LD_EXP 15
6792: PUSH
6793: LD_EXP 16
6797: PUSH
6798: LD_EXP 17
6802: PUSH
6803: LD_EXP 18
6807: PUSH
6808: LD_EXP 20
6812: PUSH
6813: LD_EXP 26
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: DIFF
6840: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6841: LD_EXP 10
6845: PUSH
6846: LD_VAR 0 2
6850: OR
6851: PUSH
6852: LD_EXP 17
6856: PUSH
6857: LD_VAR 0 1
6861: OR
6862: AND
6863: IFFALSE 7082
// begin DialogueOn ;
6865: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6869: LD_EXP 17
6873: PPUSH
6874: CALL_OW 302
6878: IFFALSE 6894
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6880: LD_EXP 17
6884: PPUSH
6885: LD_STRING D3-Sci1-1
6887: PPUSH
6888: CALL_OW 88
6892: GO 6906
// Say ( tmp1 , D3-Sci1-1 ) ;
6894: LD_VAR 0 1
6898: PPUSH
6899: LD_STRING D3-Sci1-1
6901: PPUSH
6902: CALL_OW 88
// if IsOk ( Gary ) then
6906: LD_EXP 10
6910: PPUSH
6911: CALL_OW 302
6915: IFFALSE 6931
// Say ( Gary , D3-Gary-1 ) else
6917: LD_EXP 10
6921: PPUSH
6922: LD_STRING D3-Gary-1
6924: PPUSH
6925: CALL_OW 88
6929: GO 6943
// Say ( tmp2 , D3-Gary-1 ) ;
6931: LD_VAR 0 2
6935: PPUSH
6936: LD_STRING D3-Gary-1
6938: PPUSH
6939: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6943: LD_EXP 17
6947: PPUSH
6948: CALL_OW 302
6952: IFFALSE 6968
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6954: LD_EXP 17
6958: PPUSH
6959: LD_STRING D3-Sci1-2
6961: PPUSH
6962: CALL_OW 88
6966: GO 6980
// Say ( tmp1 , D3-Sci1-2 ) ;
6968: LD_VAR 0 1
6972: PPUSH
6973: LD_STRING D3-Sci1-2
6975: PPUSH
6976: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6980: LD_EXP 1
6984: PPUSH
6985: LD_STRING D3-JMM-2
6987: PPUSH
6988: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6992: LD_EXP 17
6996: PPUSH
6997: CALL_OW 302
7001: IFFALSE 7017
// Say ( DeltaDoctor , D3-Sci1-3 ) else
7003: LD_EXP 17
7007: PPUSH
7008: LD_STRING D3-Sci1-3
7010: PPUSH
7011: CALL_OW 88
7015: GO 7029
// Say ( tmp1 , D3-Sci1-3 ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_STRING D3-Sci1-3
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3-JMM-3
7036: PPUSH
7037: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7041: LD_EXP 17
7045: PPUSH
7046: CALL_OW 302
7050: IFFALSE 7066
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7052: LD_EXP 17
7056: PPUSH
7057: LD_STRING D3-Sci1-4
7059: PPUSH
7060: CALL_OW 88
7064: GO 7078
// Say ( tmp1 , D3-Sci1-4 ) ;
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_STRING D3-Sci1-4
7073: PPUSH
7074: CALL_OW 88
// DialogueOff ;
7078: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7082: LD_INT 12
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: LD_INT 1
7090: PPUSH
7091: CALL_OW 322
// SetTech ( tech_rocket , 1 , state_enabled ) ;
7095: LD_INT 40
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: LD_INT 1
7103: PPUSH
7104: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7108: LD_INT 32
7110: PPUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7121: LD_INT 12
7123: PPUSH
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 1
7129: PPUSH
7130: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7134: LD_INT 33
7136: PPUSH
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7147: LD_STRING M2
7149: PPUSH
7150: CALL_OW 337
// wait ( 3 3$0 ) ;
7154: LD_INT 6300
7156: PPUSH
7157: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7161: LD_INT 35
7163: PPUSH
7164: CALL_OW 67
// until not InBattle ( 1 ) ;
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 463
7175: NOT
7176: IFFALSE 7161
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7178: LD_EXP 11
7182: PPUSH
7183: CALL_OW 302
7187: PUSH
7188: LD_EXP 17
7192: PPUSH
7193: CALL_OW 302
7197: AND
7198: IFFALSE 7367
// begin DialogueOn ;
7200: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D3a-Sim-1
7211: PPUSH
7212: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7216: LD_EXP 17
7220: PPUSH
7221: LD_STRING D3a-Sci1-1
7223: PPUSH
7224: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D3a-Sim-2
7235: PPUSH
7236: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7240: LD_EXP 17
7244: PPUSH
7245: LD_STRING D3a-Sci1-2
7247: PPUSH
7248: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7252: LD_EXP 11
7256: PPUSH
7257: LD_STRING D3a-Sim-3
7259: PPUSH
7260: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7264: LD_EXP 17
7268: PPUSH
7269: LD_STRING D3a-Sci1-3
7271: PPUSH
7272: CALL_OW 88
// if IsOK ( Joan ) then
7276: LD_EXP 13
7280: PPUSH
7281: CALL_OW 302
7285: IFFALSE 7301
// Say ( Simms , D3a-Sim-4 ) else
7287: LD_EXP 11
7291: PPUSH
7292: LD_STRING D3a-Sim-4
7294: PPUSH
7295: CALL_OW 88
7299: GO 7313
// Say ( Simms , D3a-Sim-4a ) ;
7301: LD_EXP 11
7305: PPUSH
7306: LD_STRING D3a-Sim-4a
7308: PPUSH
7309: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7313: LD_EXP 17
7317: PPUSH
7318: LD_STRING D3a-Sci1-4
7320: PPUSH
7321: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7325: LD_EXP 11
7329: PPUSH
7330: LD_STRING D3a-Sim-5
7332: PPUSH
7333: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7337: LD_EXP 17
7341: PPUSH
7342: LD_STRING D3a-Sci1-5
7344: PPUSH
7345: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7349: LD_EXP 11
7353: PPUSH
7354: LD_STRING D3a-Sim-6
7356: PPUSH
7357: CALL_OW 88
// DialogueOff ;
7361: CALL_OW 7
// end else
7365: GO 7640
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7367: LD_ADDR_VAR 0 3
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 26
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: PPUSH
7407: CALL_OW 69
7411: PUSH
7412: LD_EXP 1
7416: PUSH
7417: LD_EXP 7
7421: PUSH
7422: LD_EXP 6
7426: PUSH
7427: LD_EXP 11
7431: PUSH
7432: LD_EXP 14
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: DIFF
7444: ST_TO_ADDR
// if tmp3 > 0 then
7445: LD_VAR 0 3
7449: PUSH
7450: LD_INT 0
7452: GREATER
7453: IFFALSE 7640
// begin DialogueOn ;
7455: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7459: LD_EXP 11
7463: PPUSH
7464: LD_STRING D3a-Sim-1
7466: PPUSH
7467: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 1
7478: ARRAY
7479: PPUSH
7480: LD_STRING D3a-Sci1-1
7482: PPUSH
7483: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7487: LD_EXP 11
7491: PPUSH
7492: LD_STRING D3a-Sim-2
7494: PPUSH
7495: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7499: LD_VAR 0 3
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: PPUSH
7508: LD_STRING D3a-Sci1-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7515: LD_EXP 11
7519: PPUSH
7520: LD_STRING D3a-Sim-3
7522: PPUSH
7523: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_STRING D3a-Sci1-3
7538: PPUSH
7539: CALL_OW 88
// if IsOK ( Joan ) then
7543: LD_EXP 13
7547: PPUSH
7548: CALL_OW 302
7552: IFFALSE 7568
// Say ( Simms , D3a-Sim-4 ) else
7554: LD_EXP 11
7558: PPUSH
7559: LD_STRING D3a-Sim-4
7561: PPUSH
7562: CALL_OW 88
7566: GO 7580
// Say ( Simms , D3a-Sim-4a ) ;
7568: LD_EXP 11
7572: PPUSH
7573: LD_STRING D3a-Sim-4a
7575: PPUSH
7576: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7580: LD_VAR 0 3
7584: PUSH
7585: LD_INT 1
7587: ARRAY
7588: PPUSH
7589: LD_STRING D3a-Sci1-4
7591: PPUSH
7592: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7596: LD_EXP 11
7600: PPUSH
7601: LD_STRING D3a-Sim-5
7603: PPUSH
7604: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7608: LD_VAR 0 3
7612: PUSH
7613: LD_INT 1
7615: ARRAY
7616: PPUSH
7617: LD_STRING D3a-Sci1-5
7619: PPUSH
7620: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7624: LD_EXP 11
7628: PPUSH
7629: LD_STRING D3a-Sim-6
7631: PPUSH
7632: CALL_OW 88
// DialogueOff ;
7636: CALL_OW 7
// end ; end ; end ;
7640: PPOPN 3
7642: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7643: LD_EXP 31
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: IFFALSE 7986
7653: GO 7655
7655: DISABLE
7656: LD_INT 0
7658: PPUSH
// begin wait ( 2 2$00 ) ;
7659: LD_INT 4200
7661: PPUSH
7662: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7666: LD_EXP 18
7670: PPUSH
7671: LD_STRING D4-FSol1-1
7673: PPUSH
7674: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7678: LD_STRING M3
7680: PPUSH
7681: CALL_OW 337
// PrepareRussians ;
7685: CALL 3782 0 0
// spawnRussians := true ;
7689: LD_ADDR_EXP 60
7693: PUSH
7694: LD_INT 1
7696: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7697: LD_ADDR_VAR 0 1
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_INT 100
7707: PPUSH
7708: CALL_OW 12
7712: ST_TO_ADDR
// if difficulty = 1 then
7713: LD_OWVAR 67
7717: PUSH
7718: LD_INT 1
7720: EQUAL
7721: IFFALSE 7804
// begin if rnd > 0 and rnd < 51 then
7723: LD_VAR 0 1
7727: PUSH
7728: LD_INT 0
7730: GREATER
7731: PUSH
7732: LD_VAR 0 1
7736: PUSH
7737: LD_INT 51
7739: LESS
7740: AND
7741: IFFALSE 7750
// BuildRussianBase ( 2 ) ;
7743: LD_INT 2
7745: PPUSH
7746: CALL 12128 0 1
// if rnd > 50 and rnd < 81 then
7750: LD_VAR 0 1
7754: PUSH
7755: LD_INT 50
7757: GREATER
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: LD_INT 81
7766: LESS
7767: AND
7768: IFFALSE 7777
// BuildRussianBase ( 1 ) ;
7770: LD_INT 1
7772: PPUSH
7773: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7777: LD_VAR 0 1
7781: PUSH
7782: LD_INT 80
7784: GREATER
7785: PUSH
7786: LD_VAR 0 1
7790: PUSH
7791: LD_INT 101
7793: LESS
7794: AND
7795: IFFALSE 7804
// BuildRussianBase ( 3 ) ;
7797: LD_INT 3
7799: PPUSH
7800: CALL 12128 0 1
// end ; if difficulty = 2 then
7804: LD_OWVAR 67
7808: PUSH
7809: LD_INT 2
7811: EQUAL
7812: IFFALSE 7895
// begin if rnd > 0 and rnd < 61 then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_INT 0
7821: GREATER
7822: PUSH
7823: LD_VAR 0 1
7827: PUSH
7828: LD_INT 61
7830: LESS
7831: AND
7832: IFFALSE 7841
// BuildRussianBase ( 2 ) ;
7834: LD_INT 2
7836: PPUSH
7837: CALL 12128 0 1
// if rnd > 60 and rnd < 81 then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 60
7848: GREATER
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: LD_INT 81
7857: LESS
7858: AND
7859: IFFALSE 7868
// BuildRussianBase ( 1 ) ;
7861: LD_INT 1
7863: PPUSH
7864: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7868: LD_VAR 0 1
7872: PUSH
7873: LD_INT 80
7875: GREATER
7876: PUSH
7877: LD_VAR 0 1
7881: PUSH
7882: LD_INT 101
7884: LESS
7885: AND
7886: IFFALSE 7895
// BuildRussianBase ( 3 ) ;
7888: LD_INT 3
7890: PPUSH
7891: CALL 12128 0 1
// end ; if difficulty >= 3 then
7895: LD_OWVAR 67
7899: PUSH
7900: LD_INT 3
7902: GREATEREQUAL
7903: IFFALSE 7986
// begin if rnd > 0 and rnd < 71 then
7905: LD_VAR 0 1
7909: PUSH
7910: LD_INT 0
7912: GREATER
7913: PUSH
7914: LD_VAR 0 1
7918: PUSH
7919: LD_INT 71
7921: LESS
7922: AND
7923: IFFALSE 7932
// BuildRussianBase ( 3 ) ;
7925: LD_INT 3
7927: PPUSH
7928: CALL 12128 0 1
// if rnd > 70 and rnd < 81 then
7932: LD_VAR 0 1
7936: PUSH
7937: LD_INT 70
7939: GREATER
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 81
7948: LESS
7949: AND
7950: IFFALSE 7959
// BuildRussianBase ( 2 ) ;
7952: LD_INT 2
7954: PPUSH
7955: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7959: LD_VAR 0 1
7963: PUSH
7964: LD_INT 80
7966: GREATER
7967: PUSH
7968: LD_VAR 0 1
7972: PUSH
7973: LD_INT 101
7975: LESS
7976: AND
7977: IFFALSE 7986
// BuildRussianBase ( 1 ) ;
7979: LD_INT 1
7981: PPUSH
7982: CALL 12128 0 1
// end ; end ;
7986: PPOPN 1
7988: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7989: LD_INT 54
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: CALL_OW 321
7999: PUSH
8000: LD_INT 2
8002: EQUAL
8003: PUSH
8004: LD_INT 21
8006: PPUSH
8007: LD_INT 1
8009: PPUSH
8010: CALL_OW 321
8014: PUSH
8015: LD_INT 2
8017: EQUAL
8018: OR
8019: PUSH
8020: LD_INT 22
8022: PPUSH
8023: LD_INT 1
8025: PPUSH
8026: CALL_OW 321
8030: PUSH
8031: LD_INT 2
8033: EQUAL
8034: OR
8035: IFFALSE 8337
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8044: LD_EXP 17
8048: PPUSH
8049: CALL_OW 302
8053: IFFALSE 8067
// tmp := DeltaDoctor else
8055: LD_ADDR_VAR 0 2
8059: PUSH
8060: LD_EXP 17
8064: ST_TO_ADDR
8065: GO 8077
// tmp := Denis ;
8067: LD_ADDR_VAR 0 2
8071: PUSH
8072: LD_EXP 12
8076: ST_TO_ADDR
// if tmp then
8077: LD_VAR 0 2
8081: IFFALSE 8175
// begin DialogueOn ;
8083: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8087: LD_EXP 1
8091: PPUSH
8092: LD_STRING D6-JMM-1
8094: PPUSH
8095: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8099: LD_VAR 0 2
8103: PPUSH
8104: LD_STRING D6-Sci1-1
8106: PPUSH
8107: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8111: LD_EXP 1
8115: PPUSH
8116: LD_STRING D6-JMM-2
8118: PPUSH
8119: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8123: LD_VAR 0 2
8127: PPUSH
8128: LD_STRING D6-Sci1-2
8130: PPUSH
8131: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8135: LD_EXP 1
8139: PPUSH
8140: LD_STRING D6-JMM-3
8142: PPUSH
8143: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_STRING D6-Sci1-3
8154: PPUSH
8155: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8159: LD_EXP 1
8163: PPUSH
8164: LD_STRING D6-JMM-4
8166: PPUSH
8167: CALL_OW 88
// DialogueOff ;
8171: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8175: LD_INT 1050
8177: PPUSH
8178: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8182: LD_EXP 51
8186: PUSH
8187: LD_INT 0
8189: EQUAL
8190: PUSH
8191: LD_EXP 14
8195: PPUSH
8196: CALL_OW 302
8200: AND
8201: IFFALSE 8259
// begin DialogueOn ;
8203: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8207: LD_EXP 29
8211: PPUSH
8212: LD_STRING D5-Ar1-1
8214: PPUSH
8215: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8219: LD_EXP 28
8223: PPUSH
8224: LD_STRING D5-Diet-1
8226: PPUSH
8227: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8231: LD_EXP 29
8235: PPUSH
8236: LD_STRING D5-Ar1-2
8238: PPUSH
8239: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8243: LD_EXP 28
8247: PPUSH
8248: LD_STRING D5-Diet-2
8250: PPUSH
8251: CALL_OW 88
// DialogueOff ;
8255: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8259: LD_INT 35
8261: PPUSH
8262: CALL_OW 67
// until tick > 10 10$00 ;
8266: LD_OWVAR 1
8270: PUSH
8271: LD_INT 21000
8273: GREATER
8274: IFFALSE 8259
// wait ( 1 1$30 ) ;
8276: LD_INT 3150
8278: PPUSH
8279: CALL_OW 67
// if arabianTrait = 0 then
8283: LD_EXP 51
8287: PUSH
8288: LD_INT 0
8290: EQUAL
8291: IFFALSE 8337
// begin arabianTrait = 1 ;
8293: LD_ADDR_EXP 51
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 3
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8317: LD_INT 2
8319: PPUSH
8320: LD_INT 6
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 80
// PrepareArabianTrait ;
8333: CALL 8340 0 0
// end ; end ;
8337: PPOPN 2
8339: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8340: LD_INT 0
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8350: LD_ADDR_VAR 0 6
8354: PUSH
8355: LD_INT 22
8357: PUSH
8358: LD_INT 2
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 4
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 2
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 25
8390: PUSH
8391: LD_INT 3
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 22
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 1
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 25
8453: PUSH
8454: LD_INT 8
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 15
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_EXP 28
8491: PUSH
8492: EMPTY
8493: LIST
8494: DIFF
8495: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8496: LD_ADDR_VAR 0 7
8500: PUSH
8501: LD_INT 22
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 30
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: CALL_OW 122
// wait ( 0 0$3 ) ;
8552: LD_INT 105
8554: PPUSH
8555: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8559: LD_VAR 0 6
8563: PPUSH
8564: LD_VAR 0 7
8568: PPUSH
8569: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8573: LD_VAR 0 6
8577: PPUSH
8578: LD_INT 1
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 1
8590: PPUSH
8591: LD_INT 2
8593: PPUSH
8594: CALL_OW 12
8598: ARRAY
8599: PPUSH
8600: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8604: LD_VAR 0 6
8608: PPUSH
8609: CALL_OW 182
// wait ( 0 0$1 ) ;
8613: LD_INT 35
8615: PPUSH
8616: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8620: LD_INT 76
8622: PPUSH
8623: LD_INT 19
8625: PPUSH
8626: CALL_OW 84
// DialogueOn ;
8630: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8634: LD_INT 22
8636: PUSH
8637: LD_INT 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 2
8656: PUSH
8657: LD_INT 25
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 25
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 25
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 4
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 5
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: PPUSH
8725: LD_STRING D8-Sol1-1
8727: PPUSH
8728: LD_STRING D8-Sol1-1
8730: PPUSH
8731: CALL 11470 0 3
// if IsOK ( DeltaDoctor ) then
8735: LD_EXP 17
8739: PPUSH
8740: CALL_OW 302
8744: IFFALSE 8760
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8746: LD_EXP 17
8750: PPUSH
8751: LD_STRING D8-Sci1-1
8753: PPUSH
8754: CALL_OW 88
8758: GO 8861
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8760: LD_INT 22
8762: PUSH
8763: LD_INT 1
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: LD_INT 26
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 25
8805: PUSH
8806: LD_INT 3
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 25
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 25
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: PPUSH
8851: LD_STRING D8-Sol1-1
8853: PPUSH
8854: LD_STRING D8-Sol1-1
8856: PPUSH
8857: CALL 11470 0 3
// Say ( JMM , D8-JMM-1 ) ;
8861: LD_EXP 1
8865: PPUSH
8866: LD_STRING D8-JMM-1
8868: PPUSH
8869: CALL_OW 88
// DialogueOff ;
8873: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8877: LD_INT 2
8879: PPUSH
8880: LD_INT 2
8882: PPUSH
8883: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 2
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8903: LD_INT 3
8905: PPUSH
8906: LD_INT 2
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8919: LD_STRING M4
8921: PPUSH
8922: CALL_OW 337
// wait ( 0 0$1 ) ;
8926: LD_INT 35
8928: PPUSH
8929: CALL_OW 67
// if IsLive ( Khatam ) then
8933: LD_EXP 14
8937: PPUSH
8938: CALL_OW 300
8942: IFFALSE 8956
// DoNotAttack ( 2 , Khatam ) ;
8944: LD_INT 2
8946: PPUSH
8947: LD_EXP 14
8951: PPUSH
8952: CALL_OW 471
// wait ( 0 0$1 ) ;
8956: LD_INT 35
8958: PPUSH
8959: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 21
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: PPUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: CALL_OW 74
9010: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
9011: LD_VAR 0 5
9015: PPUSH
9016: LD_INT 25
9018: PUSH
9019: LD_INT 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 72
9030: PUSH
9031: LD_INT 1
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 8
9039: PPUSH
9040: CALL_OW 250
9044: PPUSH
9045: LD_VAR 0 8
9049: PPUSH
9050: CALL_OW 251
9054: PPUSH
9055: LD_VAR 0 8
9059: PPUSH
9060: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9064: LD_VAR 0 5
9068: PPUSH
9069: LD_INT 84
9071: PPUSH
9072: LD_INT 22
9074: PPUSH
9075: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9079: LD_VAR 0 5
9083: PPUSH
9084: LD_INT 82
9086: PPUSH
9087: LD_INT 5
9089: PPUSH
9090: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9094: LD_VAR 0 5
9098: PPUSH
9099: LD_INT 95
9101: PPUSH
9102: LD_INT 12
9104: PPUSH
9105: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9109: LD_VAR 0 5
9113: PPUSH
9114: LD_INT 102
9116: PPUSH
9117: LD_INT 11
9119: PPUSH
9120: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9124: LD_VAR 0 5
9128: PPUSH
9129: LD_INT 116
9131: PPUSH
9132: LD_INT 15
9134: PPUSH
9135: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9139: LD_VAR 0 5
9143: PPUSH
9144: LD_INT 140
9146: PPUSH
9147: LD_INT 25
9149: PPUSH
9150: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9154: LD_VAR 0 5
9158: PPUSH
9159: LD_INT 160
9161: PPUSH
9162: LD_INT 56
9164: PPUSH
9165: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_INT 22
9176: PUSH
9177: LD_INT 2
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 21
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 25
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 25
9209: PUSH
9210: LD_INT 8
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 25
9219: PUSH
9220: LD_INT 15
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: PUSH
9243: LD_EXP 28
9247: PUSH
9248: EMPTY
9249: LIST
9250: DIFF
9251: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9252: LD_ADDR_VAR 0 6
9256: PUSH
9257: LD_INT 22
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 2
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 2
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 4
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 25
9312: PUSH
9313: LD_INT 12
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 25
9322: PUSH
9323: LD_INT 16
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 69
9347: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9348: LD_ADDR_VAR 0 6
9352: PUSH
9353: LD_VAR 0 6
9357: PUSH
9358: LD_EXP 28
9362: ADD
9363: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9364: LD_VAR 0 5
9368: PPUSH
9369: LD_INT 189
9371: PPUSH
9372: LD_INT 79
9374: PPUSH
9375: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9379: LD_VAR 0 5
9383: PPUSH
9384: LD_INT 25
9386: PUSH
9387: LD_INT 15
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: IFFALSE 9439
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9400: LD_VAR 0 5
9404: PPUSH
9405: LD_INT 25
9407: PUSH
9408: LD_INT 15
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PPUSH
9415: CALL_OW 72
9419: PUSH
9420: LD_INT 1
9422: ARRAY
9423: PPUSH
9424: LD_INT 84
9426: PPUSH
9427: LD_INT 21
9429: PPUSH
9430: CALL_OW 428
9434: PPUSH
9435: CALL_OW 120
// wait ( 0 0$4 ) ;
9439: LD_INT 140
9441: PPUSH
9442: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9446: LD_VAR 0 6
9450: PPUSH
9451: LD_INT 88
9453: PPUSH
9454: LD_INT 8
9456: PPUSH
9457: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9461: LD_VAR 0 6
9465: PPUSH
9466: LD_INT 102
9468: PPUSH
9469: LD_INT 10
9471: PPUSH
9472: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9476: LD_VAR 0 6
9480: PPUSH
9481: LD_INT 116
9483: PPUSH
9484: LD_INT 15
9486: PPUSH
9487: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9491: LD_VAR 0 6
9495: PPUSH
9496: LD_INT 140
9498: PPUSH
9499: LD_INT 25
9501: PPUSH
9502: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_INT 160
9513: PPUSH
9514: LD_INT 56
9516: PPUSH
9517: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9521: LD_VAR 0 6
9525: PPUSH
9526: LD_INT 189
9528: PPUSH
9529: LD_INT 79
9531: PPUSH
9532: CALL_OW 171
// arabianAttackersAI = 1 ;
9536: LD_ADDR_EXP 48
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// if IsOk ( Gary ) then
9544: LD_EXP 10
9548: PPUSH
9549: CALL_OW 302
9553: IFFALSE 9567
// Say ( Gary , D8a-Gary-1 ) ;
9555: LD_EXP 10
9559: PPUSH
9560: LD_STRING D8a-Gary-1
9562: PPUSH
9563: CALL_OW 88
// wait ( 0 0$5 ) ;
9567: LD_INT 175
9569: PPUSH
9570: CALL_OW 67
// if IsOK ( Khatam ) then
9574: LD_EXP 14
9578: PPUSH
9579: CALL_OW 302
9583: IFFALSE 10119
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9585: LD_ADDR_VAR 0 3
9589: PUSH
9590: LD_INT 22
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 1
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 25
9615: PUSH
9616: LD_INT 2
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 25
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: LD_INT 8
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PPUSH
9676: CALL_OW 69
9680: PUSH
9681: LD_EXP 1
9685: PUSH
9686: LD_EXP 2
9690: PUSH
9691: LD_EXP 3
9695: PUSH
9696: LD_EXP 4
9700: PUSH
9701: LD_EXP 5
9705: PUSH
9706: LD_EXP 6
9710: PUSH
9711: LD_EXP 7
9715: PUSH
9716: LD_EXP 8
9720: PUSH
9721: LD_EXP 9
9725: PUSH
9726: LD_EXP 10
9730: PUSH
9731: LD_EXP 11
9735: PUSH
9736: LD_EXP 12
9740: PUSH
9741: LD_EXP 13
9745: PUSH
9746: LD_EXP 14
9750: PUSH
9751: LD_EXP 15
9755: PUSH
9756: LD_EXP 16
9760: PUSH
9761: LD_EXP 17
9765: PUSH
9766: LD_EXP 20
9770: PUSH
9771: LD_EXP 26
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: DIFF
9797: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9798: LD_EXP 14
9802: PPUSH
9803: LD_INT 8
9805: PPUSH
9806: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9810: LD_EXP 14
9814: PPUSH
9815: CALL_OW 122
// wait ( 0 0$1 ) ;
9819: LD_INT 35
9821: PPUSH
9822: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9826: LD_EXP 14
9830: PPUSH
9831: CALL_OW 121
// wait ( 0 0$1 ) ;
9835: LD_INT 35
9837: PPUSH
9838: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9842: LD_EXP 14
9846: PPUSH
9847: LD_INT 7
9849: PPUSH
9850: CALL_OW 113
// if not tmp then
9854: LD_VAR 0 3
9858: NOT
9859: IFFALSE 9863
// exit ;
9861: GO 10119
// DialogueOn ;
9863: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9867: LD_VAR 0 3
9871: PUSH
9872: LD_INT 1
9874: ARRAY
9875: PPUSH
9876: CALL_OW 258
9880: PUSH
9881: LD_INT 1
9883: EQUAL
9884: IFFALSE 9904
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9886: LD_VAR 0 3
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: LD_STRING D8b-Sol1-1
9897: PPUSH
9898: CALL_OW 88
9902: GO 9920
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: ARRAY
9912: PPUSH
9913: LD_STRING D8b-FSol1-1
9915: PPUSH
9916: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9920: LD_EXP 14
9924: PPUSH
9925: LD_STRING D8b-Khat-1
9927: PPUSH
9928: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: PPUSH
9941: CALL_OW 258
9945: PUSH
9946: LD_INT 1
9948: EQUAL
9949: IFFALSE 9969
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PPUSH
9960: LD_STRING D8b-Sol1-2
9962: PPUSH
9963: CALL_OW 88
9967: GO 9985
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9969: LD_VAR 0 3
9973: PUSH
9974: LD_INT 1
9976: ARRAY
9977: PPUSH
9978: LD_STRING D8b-FSol1-2
9980: PPUSH
9981: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9985: LD_EXP 14
9989: PPUSH
9990: LD_STRING D8b-Khat-2
9992: PPUSH
9993: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: CALL_OW 258
10010: PUSH
10011: LD_INT 1
10013: EQUAL
10014: IFFALSE 10034
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_STRING D8b-Sol1-3
10027: PPUSH
10028: CALL_OW 88
10032: GO 10050
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: LD_STRING D8b-FSol1-3
10045: PPUSH
10046: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10050: LD_EXP 14
10054: PPUSH
10055: LD_STRING D8b-Khat-3
10057: PPUSH
10058: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 1
10069: ARRAY
10070: PPUSH
10071: CALL_OW 258
10075: PUSH
10076: LD_INT 1
10078: EQUAL
10079: IFFALSE 10099
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_STRING D8b-Sol1-4
10092: PPUSH
10093: CALL_OW 88
10097: GO 10115
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 1
10106: ARRAY
10107: PPUSH
10108: LD_STRING D8b-FSol1-4
10110: PPUSH
10111: CALL_OW 88
// DialogueOff ;
10115: CALL_OW 7
// end ; end ;
10119: LD_VAR 0 1
10123: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10124: LD_INT 7
10126: PPUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 70
10141: PUSH
10142: LD_INT 0
10144: GREATER
10145: PUSH
10146: LD_EXP 14
10150: PPUSH
10151: LD_INT 7
10153: PPUSH
10154: CALL_OW 308
10158: OR
10159: IFFALSE 10366
10161: GO 10163
10163: DISABLE
10164: LD_INT 0
10166: PPUSH
// begin enable ;
10167: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10168: LD_ADDR_VAR 0 1
10172: PUSH
10173: LD_INT 7
10175: PPUSH
10176: LD_INT 22
10178: PUSH
10179: LD_INT 2
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PPUSH
10186: CALL_OW 70
10190: PUSH
10191: FOR_IN
10192: IFFALSE 10333
// begin if GetClass ( i ) = 4 then
10194: LD_VAR 0 1
10198: PPUSH
10199: CALL_OW 257
10203: PUSH
10204: LD_INT 4
10206: EQUAL
10207: IFFALSE 10219
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10209: LD_INT 1
10211: PPUSH
10212: LD_STRING 10_ScientistsEscape_1
10214: PPUSH
10215: CALL_OW 39
// if i = Dietrich then
10219: LD_VAR 0 1
10223: PUSH
10224: LD_EXP 28
10228: EQUAL
10229: IFFALSE 10239
// GensherStatus = 1 ;
10231: LD_ADDR_EXP 54
10235: PUSH
10236: LD_INT 1
10238: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL_OW 257
10248: PUSH
10249: LD_INT 1
10251: EQUAL
10252: PUSH
10253: LD_VAR 0 1
10257: PPUSH
10258: CALL_OW 257
10262: PUSH
10263: LD_INT 2
10265: EQUAL
10266: OR
10267: PUSH
10268: LD_VAR 0 1
10272: PPUSH
10273: CALL_OW 257
10277: PUSH
10278: LD_INT 3
10280: EQUAL
10281: OR
10282: PUSH
10283: LD_VAR 0 1
10287: PPUSH
10288: CALL_OW 257
10292: PUSH
10293: LD_INT 4
10295: EQUAL
10296: OR
10297: PUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 257
10307: PUSH
10308: LD_INT 8
10310: EQUAL
10311: OR
10312: IFFALSE 10322
// arabianEscape = 1 ;
10314: LD_ADDR_EXP 49
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// RemoveUnit ( i ) ;
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL_OW 64
// end ;
10331: GO 10191
10333: POP
10334: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10335: LD_EXP 14
10339: PPUSH
10340: LD_INT 7
10342: PPUSH
10343: CALL_OW 308
10347: IFFALSE 10366
// begin KhatamStatus = 1 ;
10349: LD_ADDR_EXP 55
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10357: LD_EXP 14
10361: PPUSH
10362: CALL_OW 64
// end ; end ;
10366: PPOPN 1
10368: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 1
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: LD_INT 0
10400: EQUAL
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 0
10433: EQUAL
10434: AND
10435: IFFALSE 10448
10437: GO 10439
10439: DISABLE
// arabianDefeated = 1 ;
10440: LD_ADDR_EXP 50
10444: PUSH
10445: LD_INT 1
10447: ST_TO_ADDR
10448: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10449: LD_INT 54
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 321
10459: PUSH
10460: LD_INT 2
10462: EQUAL
10463: PUSH
10464: LD_INT 55
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 321
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: PUSH
10480: LD_INT 21
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 321
10490: PUSH
10491: LD_INT 2
10493: EQUAL
10494: AND
10495: PUSH
10496: LD_INT 22
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 321
10506: PUSH
10507: LD_INT 2
10509: EQUAL
10510: AND
10511: PUSH
10512: LD_INT 12
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 321
10522: PUSH
10523: LD_INT 2
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_INT 32
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 321
10538: PUSH
10539: LD_INT 2
10541: EQUAL
10542: AND
10543: PUSH
10544: LD_EXP 65
10548: PUSH
10549: LD_INT 0
10551: EQUAL
10552: AND
10553: PUSH
10554: LD_EXP 51
10558: PUSH
10559: LD_INT 0
10561: EQUAL
10562: AND
10563: PUSH
10564: LD_OWVAR 1
10568: PUSH
10569: LD_INT 31500
10571: GREATEREQUAL
10572: AND
10573: IFFALSE 10590
10575: GO 10577
10577: DISABLE
// begin arabianTrait = 1 ;
10578: LD_ADDR_EXP 51
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// PrepareArabianTrait ;
10586: CALL 8340 0 0
// end ;
10590: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 5 ] ) > 3 do
10591: LD_INT 22
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: PUSH
10606: LD_INT 3
10608: GREATER
10609: IFFALSE 10626
10611: GO 10613
10613: DISABLE
// SayRadio ( AmScout , D4-FSol1-3 ) ;
10614: LD_EXP 18
10618: PPUSH
10619: LD_STRING D4-FSol1-3
10621: PPUSH
10622: CALL_OW 94
10626: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10627: LD_EXP 31
10631: PUSH
10632: LD_STRING 02_mikhailStatus_1
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 30
10642: PUSH
10643: LD_INT 1
10645: EQUAL
10646: AND
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 5
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 69
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: AND
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: PUSH
10701: LD_EXP 51
10705: PUSH
10706: LD_INT 0
10708: EQUAL
10709: OR
10710: AND
10711: IFFALSE 10720
10713: GO 10715
10715: DISABLE
// PrepareCornell ;
10716: CALL 3529 0 0
10720: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10721: LD_INT 22
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PPUSH
10736: LD_EXP 20
10740: PPUSH
10741: CALL_OW 74
10745: PPUSH
10746: LD_EXP 20
10750: PPUSH
10751: CALL_OW 296
10755: PUSH
10756: LD_INT 9
10758: LESS
10759: IFFALSE 10980
10761: GO 10763
10763: DISABLE
// begin InGameOn ;
10764: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10768: LD_EXP 20
10772: PPUSH
10773: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10777: LD_EXP 20
10781: PPUSH
10782: LD_STRING D7-Corn-1
10784: PPUSH
10785: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10789: LD_INT 22
10791: PUSH
10792: LD_INT 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 2
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 3
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 25
10834: PUSH
10835: LD_INT 4
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 25
10844: PUSH
10845: LD_INT 5
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: PPUSH
10869: LD_STRING D7-Sol1-1
10871: PPUSH
10872: LD_STRING D7-FSol1-1
10874: PPUSH
10875: CALL 11470 0 3
// CenterNowOnUnits ( Cornell ) ;
10879: LD_EXP 20
10883: PPUSH
10884: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10888: LD_EXP 20
10892: PPUSH
10893: LD_STRING D7-Corn-2
10895: PPUSH
10896: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10900: LD_EXP 1
10904: PPUSH
10905: LD_STRING D7-JMM-2
10907: PPUSH
10908: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10912: LD_EXP 20
10916: PPUSH
10917: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10921: LD_EXP 20
10925: PPUSH
10926: LD_STRING D7-Corn-3
10928: PPUSH
10929: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10933: LD_EXP 20
10937: PPUSH
10938: LD_INT 250
10940: PPUSH
10941: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10945: LD_EXP 20
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 235
// wait ( 0 0$1 ) ;
10957: LD_INT 35
10959: PPUSH
10960: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10964: LD_EXP 1
10968: PPUSH
10969: LD_STRING D7-JMM-3
10971: PPUSH
10972: CALL_OW 88
// InGameOff ;
10976: CALL_OW 9
// end ;
10980: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10981: LD_EXP 20
10985: PPUSH
10986: CALL_OW 255
10990: PUSH
10991: LD_INT 1
10993: EQUAL
10994: PUSH
10995: LD_EXP 20
10999: PPUSH
11000: CALL_OW 256
11004: PUSH
11005: LD_INT 350
11007: GREATER
11008: AND
11009: IFFALSE 11202
11011: GO 11013
11013: DISABLE
// begin DialogueOn ;
11014: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
11018: LD_EXP 1
11022: PPUSH
11023: LD_STRING D7a-JMM-1
11025: PPUSH
11026: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
11030: LD_EXP 20
11034: PPUSH
11035: LD_STRING D7a-Corn-1
11037: PPUSH
11038: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
11042: LD_EXP 1
11046: PPUSH
11047: LD_STRING D7a-JMM-2
11049: PPUSH
11050: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
11054: LD_EXP 20
11058: PPUSH
11059: LD_STRING D7a-Corn-2
11061: PPUSH
11062: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11066: LD_EXP 1
11070: PPUSH
11071: LD_STRING D7a-JMM-3
11073: PPUSH
11074: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11078: LD_EXP 20
11082: PPUSH
11083: LD_STRING D7a-Corn-3
11085: PPUSH
11086: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11090: LD_EXP 1
11094: PPUSH
11095: LD_STRING D7a-JMM-4
11097: PPUSH
11098: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11102: LD_EXP 20
11106: PPUSH
11107: LD_STRING D7a-Corn-4
11109: PPUSH
11110: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11114: LD_EXP 1
11118: PPUSH
11119: LD_STRING D7a-JMM-5
11121: PPUSH
11122: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11126: LD_EXP 20
11130: PPUSH
11131: LD_STRING D7a-Corn-5
11133: PPUSH
11134: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_STRING D7a-JMM-6
11145: PPUSH
11146: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11150: LD_EXP 20
11154: PPUSH
11155: LD_STRING D7a-Corn-6
11157: PPUSH
11158: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11162: LD_EXP 1
11166: PPUSH
11167: LD_STRING D7a-JMM-7
11169: PPUSH
11170: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11174: LD_EXP 20
11178: PPUSH
11179: LD_STRING D7a-Corn-7
11181: PPUSH
11182: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11186: LD_EXP 1
11190: PPUSH
11191: LD_STRING D7a-JMM-8
11193: PPUSH
11194: CALL_OW 88
// DialogueOff ;
11198: CALL_OW 7
// end ;
11202: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11203: LD_EXP 63
11207: PUSH
11208: LD_EXP 1
11212: PPUSH
11213: CALL_OW 302
11217: PUSH
11218: LD_EXP 5
11222: PPUSH
11223: CALL_OW 302
11227: OR
11228: AND
11229: IFFALSE 11319
11231: GO 11233
11233: DISABLE
// begin Wait ( 0 0$2 ) ;
11234: LD_INT 70
11236: PPUSH
11237: CALL_OW 67
// DialogueOn ;
11241: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11245: LD_EXP 63
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_EXP 63
11258: PUSH
11259: LD_INT 2
11261: ARRAY
11262: PPUSH
11263: CALL_OW 86
// if IsOk ( Cyrus ) then
11267: LD_EXP 5
11271: PPUSH
11272: CALL_OW 302
11276: IFFALSE 11292
// Say ( Cyrus , D10-Cyrus-1 ) else
11278: LD_EXP 5
11282: PPUSH
11283: LD_STRING D10-Cyrus-1
11285: PPUSH
11286: CALL_OW 88
11290: GO 11315
// if IsOk ( JMM ) then
11292: LD_EXP 1
11296: PPUSH
11297: CALL_OW 302
11301: IFFALSE 11315
// Say ( JMM , D10-JMM-1 ) ;
11303: LD_EXP 1
11307: PPUSH
11308: LD_STRING D10-JMM-1
11310: PPUSH
11311: CALL_OW 88
// DialogueOff ;
11315: CALL_OW 7
// end ;
11319: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11320: LD_INT 12
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 321
11330: PUSH
11331: LD_INT 2
11333: EQUAL
11334: IFFALSE 11346
11336: GO 11338
11338: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11339: LD_STRING M2b
11341: PPUSH
11342: CALL_OW 337
11346: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11347: LD_INT 32
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 321
11357: PUSH
11358: LD_INT 2
11360: EQUAL
11361: IFFALSE 11373
11363: GO 11365
11365: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11366: LD_STRING M2c
11368: PPUSH
11369: CALL_OW 337
11373: END
// every 0 0$1 trigger arabianDefeated = 1 do
11374: LD_EXP 50
11378: PUSH
11379: LD_INT 1
11381: EQUAL
11382: IFFALSE 11394
11384: GO 11386
11386: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11387: LD_STRING M4a
11389: PPUSH
11390: CALL_OW 337
11394: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11395: LD_INT 54
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 321
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: PUSH
11410: LD_INT 55
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 321
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: AND
11425: PUSH
11426: LD_INT 21
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 321
11436: PUSH
11437: LD_INT 2
11439: EQUAL
11440: AND
11441: PUSH
11442: LD_INT 22
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 321
11452: PUSH
11453: LD_INT 2
11455: EQUAL
11456: AND
11457: IFFALSE 11469
11459: GO 11461
11461: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11462: LD_STRING M2a
11464: PPUSH
11465: CALL_OW 337
11469: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11470: LD_INT 0
11472: PPUSH
11473: PPUSH
11474: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 1
11484: PUSH
11485: LD_EXP 1
11489: PUSH
11490: LD_EXP 2
11494: PUSH
11495: LD_EXP 3
11499: PUSH
11500: LD_EXP 4
11504: PUSH
11505: LD_EXP 5
11509: PUSH
11510: LD_EXP 6
11514: PUSH
11515: LD_EXP 7
11519: PUSH
11520: LD_EXP 8
11524: PUSH
11525: LD_EXP 9
11529: PUSH
11530: LD_EXP 10
11534: PUSH
11535: LD_EXP 11
11539: PUSH
11540: LD_EXP 12
11544: PUSH
11545: LD_EXP 13
11549: PUSH
11550: LD_EXP 14
11554: PUSH
11555: LD_EXP 15
11559: PUSH
11560: LD_EXP 16
11564: PUSH
11565: LD_EXP 17
11569: PUSH
11570: LD_EXP 18
11574: PUSH
11575: LD_EXP 20
11579: PUSH
11580: LD_EXP 26
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: DIFF
11607: ST_TO_ADDR
// if not characters then
11608: LD_VAR 0 1
11612: NOT
11613: IFFALSE 11617
// exit ;
11615: GO 11763
// rnd = rand ( 1 , characters ) ;
11617: LD_ADDR_VAR 0 6
11621: PUSH
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 12
11634: ST_TO_ADDR
// for i = 1 to characters do
11635: LD_ADDR_VAR 0 5
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_VAR 0 1
11649: PUSH
11650: FOR_TO
11651: IFFALSE 11761
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11653: LD_VAR 0 5
11657: PUSH
11658: LD_VAR 0 6
11662: EQUAL
11663: PUSH
11664: LD_VAR 0 1
11668: PUSH
11669: LD_VAR 0 5
11673: ARRAY
11674: PPUSH
11675: CALL_OW 258
11679: PUSH
11680: LD_INT 1
11682: EQUAL
11683: AND
11684: IFFALSE 11706
// Say ( characters [ i ] , dialogMID ) ;
11686: LD_VAR 0 1
11690: PUSH
11691: LD_VAR 0 5
11695: ARRAY
11696: PPUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11706: LD_VAR 0 5
11710: PUSH
11711: LD_VAR 0 6
11715: EQUAL
11716: PUSH
11717: LD_VAR 0 1
11721: PUSH
11722: LD_VAR 0 5
11726: ARRAY
11727: PPUSH
11728: CALL_OW 258
11732: PUSH
11733: LD_INT 2
11735: EQUAL
11736: AND
11737: IFFALSE 11759
// Say ( characters [ i ] , dialogFID ) ;
11739: LD_VAR 0 1
11743: PUSH
11744: LD_VAR 0 5
11748: ARRAY
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: CALL_OW 88
// end ;
11759: GO 11650
11761: POP
11762: POP
// end ;
11763: LD_VAR 0 4
11767: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
// for i in charactersList do
11772: LD_ADDR_VAR 0 4
11776: PUSH
11777: LD_VAR 0 1
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11801
// SaveCharacters ( i , ident ) ;
11785: LD_VAR 0 4
11789: PPUSH
11790: LD_VAR 0 2
11794: PPUSH
11795: CALL_OW 38
11799: GO 11782
11801: POP
11802: POP
// end ;
11803: LD_VAR 0 3
11807: RET
// export function PrepareDifficulty ; begin
11808: LD_INT 0
11810: PPUSH
// if difficulty = 1 then
11811: LD_OWVAR 67
11815: PUSH
11816: LD_INT 1
11818: EQUAL
11819: IFFALSE 11863
// begin RuSolMinLevel = 3 ;
11821: LD_ADDR_EXP 38
11825: PUSH
11826: LD_INT 3
11828: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11829: LD_ADDR_EXP 39
11833: PUSH
11834: LD_INT 5
11836: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11837: LD_INT 51
11839: PPUSH
11840: LD_INT 6
11842: PPUSH
11843: LD_INT 2
11845: PPUSH
11846: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11850: LD_INT 51
11852: PPUSH
11853: LD_INT 5
11855: PPUSH
11856: LD_INT 2
11858: PPUSH
11859: CALL_OW 322
// end ; if difficulty = 2 then
11863: LD_OWVAR 67
11867: PUSH
11868: LD_INT 2
11870: EQUAL
11871: IFFALSE 11967
// begin RuSolMinLevel = 5 ;
11873: LD_ADDR_EXP 38
11877: PUSH
11878: LD_INT 5
11880: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11881: LD_ADDR_EXP 39
11885: PUSH
11886: LD_INT 7
11888: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11889: LD_INT 51
11891: PPUSH
11892: LD_INT 6
11894: PPUSH
11895: LD_INT 2
11897: PPUSH
11898: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11902: LD_INT 57
11904: PPUSH
11905: LD_INT 6
11907: PPUSH
11908: LD_INT 2
11910: PPUSH
11911: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11915: LD_INT 63
11917: PPUSH
11918: LD_INT 6
11920: PPUSH
11921: LD_INT 2
11923: PPUSH
11924: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11928: LD_INT 51
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: LD_INT 2
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11941: LD_INT 5
11943: PPUSH
11944: LD_INT 2
11946: PPUSH
11947: LD_INT 2
11949: PPUSH
11950: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_INT 5
11959: PPUSH
11960: LD_INT 2
11962: PPUSH
11963: CALL_OW 322
// end ; if difficulty >= 3 then
11967: LD_OWVAR 67
11971: PUSH
11972: LD_INT 3
11974: GREATEREQUAL
11975: IFFALSE 12123
// begin RuSolMinLevel = 6 ;
11977: LD_ADDR_EXP 38
11981: PUSH
11982: LD_INT 6
11984: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11985: LD_ADDR_EXP 39
11989: PUSH
11990: LD_INT 8
11992: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11993: LD_INT 51
11995: PPUSH
11996: LD_INT 6
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
12006: LD_INT 57
12008: PPUSH
12009: LD_INT 6
12011: PPUSH
12012: LD_INT 2
12014: PPUSH
12015: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
12019: LD_INT 52
12021: PPUSH
12022: LD_INT 6
12024: PPUSH
12025: LD_INT 2
12027: PPUSH
12028: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
12032: LD_INT 58
12034: PPUSH
12035: LD_INT 6
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
12045: LD_INT 63
12047: PPUSH
12048: LD_INT 6
12050: PPUSH
12051: LD_INT 2
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
12058: LD_INT 64
12060: PPUSH
12061: LD_INT 6
12063: PPUSH
12064: LD_INT 2
12066: PPUSH
12067: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12071: LD_INT 51
12073: PPUSH
12074: LD_INT 5
12076: PPUSH
12077: LD_INT 2
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12084: LD_INT 52
12086: PPUSH
12087: LD_INT 5
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12097: LD_INT 66
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: LD_INT 2
12105: PPUSH
12106: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12110: LD_INT 66
12112: PPUSH
12113: LD_INT 5
12115: PPUSH
12116: LD_INT 2
12118: PPUSH
12119: CALL_OW 322
// end ; end ;
12123: LD_VAR 0 1
12127: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12128: LD_INT 0
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12136: LD_ADDR_VAR 0 7
12140: PUSH
12141: LD_INT 43
12143: PUSH
12144: LD_INT 68
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 43
12153: PUSH
12154: LD_INT 79
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 99
12163: PUSH
12164: LD_INT 114
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 103
12173: PUSH
12174: LD_INT 114
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 156
12183: PUSH
12184: LD_INT 92
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 152
12193: PUSH
12194: LD_INT 85
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// for i in sources do
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12249
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PPUSH
12231: LD_VAR 0 3
12235: PUSH
12236: LD_INT 2
12238: ARRAY
12239: PPUSH
12240: LD_INT 3
12242: PPUSH
12243: CALL_OW 441
12247: GO 12219
12249: POP
12250: POP
// case position of 1 :
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 1
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12275
12264: POP
// area := westConv ; 2 :
12265: LD_ADDR_VAR 0 6
12269: PUSH
12270: LD_INT 20
12272: ST_TO_ADDR
12273: GO 12314
12275: LD_INT 2
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12294
12283: POP
// area := midConv ; 3 :
12284: LD_ADDR_VAR 0 6
12288: PUSH
12289: LD_INT 21
12291: ST_TO_ADDR
12292: GO 12314
12294: LD_INT 3
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12313
12302: POP
// area := eastConv ; end ;
12303: LD_ADDR_VAR 0 6
12307: PUSH
12308: LD_INT 22
12310: ST_TO_ADDR
12311: GO 12314
12313: POP
// area := AreaToList ( area , 0 ) ;
12314: LD_ADDR_VAR 0 6
12318: PUSH
12319: LD_VAR 0 6
12323: PPUSH
12324: LD_INT 0
12326: PPUSH
12327: CALL_OW 517
12331: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12332: LD_ADDR_VAR 0 3
12336: PUSH
12337: DOUBLE
12338: LD_INT 1
12340: DEC
12341: ST_TO_ADDR
12342: LD_VAR 0 6
12346: PUSH
12347: LD_INT 1
12349: ARRAY
12350: PUSH
12351: FOR_TO
12352: IFFALSE 12433
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12354: LD_VAR 0 6
12358: PUSH
12359: LD_INT 1
12361: ARRAY
12362: PUSH
12363: LD_VAR 0 3
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 6
12373: PUSH
12374: LD_INT 2
12376: ARRAY
12377: PUSH
12378: LD_VAR 0 3
12382: ARRAY
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12394: LD_VAR 0 6
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PUSH
12403: LD_VAR 0 3
12407: ARRAY
12408: PPUSH
12409: LD_VAR 0 6
12413: PUSH
12414: LD_INT 2
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 3
12422: ARRAY
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 331
// end ;
12431: GO 12351
12433: POP
12434: POP
// ruPossition = position ;
12435: LD_ADDR_EXP 43
12439: PUSH
12440: LD_VAR 0 1
12444: ST_TO_ADDR
// if position = 1 then
12445: LD_VAR 0 1
12449: PUSH
12450: LD_INT 1
12452: EQUAL
12453: IFFALSE 13201
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12455: LD_ADDR_VAR 0 4
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_INT 3
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PPUSH
12484: CALL_OW 69
12488: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: LD_INT 0
12496: PUSH
12497: LD_INT 49
12499: PUSH
12500: LD_INT 74
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 4
12514: PUSH
12515: LD_INT 73
12517: PUSH
12518: LD_INT 88
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 56
12535: PUSH
12536: LD_INT 62
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 29
12550: PUSH
12551: LD_INT 43
12553: PUSH
12554: LD_INT 68
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 30
12568: PUSH
12569: LD_INT 43
12571: PUSH
12572: LD_INT 79
12574: PUSH
12575: LD_INT 5
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 28
12586: PUSH
12587: LD_INT 60
12589: PUSH
12590: LD_INT 75
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 2
12604: PUSH
12605: LD_INT 50
12607: PUSH
12608: LD_INT 87
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 28
12622: PUSH
12623: LD_INT 45
12625: PUSH
12626: LD_INT 67
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 17
12640: PUSH
12641: LD_INT 47
12643: PUSH
12644: LD_INT 84
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 18
12658: PUSH
12659: LD_INT 46
12661: PUSH
12662: LD_INT 87
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 28
12676: PUSH
12677: LD_INT 41
12679: PUSH
12680: LD_INT 64
12682: PUSH
12683: LD_INT 5
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 32
12694: PUSH
12695: LD_INT 75
12697: PUSH
12698: LD_INT 76
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 32
12712: PUSH
12713: LD_INT 77
12715: PUSH
12716: LD_INT 75
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 32
12730: PUSH
12731: LD_INT 69
12733: PUSH
12734: LD_INT 68
12736: PUSH
12737: LD_INT 3
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 59
12751: PUSH
12752: LD_INT 96
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 32
12766: PUSH
12767: LD_INT 56
12769: PUSH
12770: LD_INT 96
12772: PUSH
12773: LD_INT 0
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 51
12787: PUSH
12788: LD_INT 61
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 32
12802: PUSH
12803: LD_INT 42
12805: PUSH
12806: LD_INT 60
12808: PUSH
12809: LD_INT 3
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 32
12820: PUSH
12821: LD_INT 36
12823: PUSH
12824: LD_INT 58
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 32
12838: PUSH
12839: LD_INT 39
12841: PUSH
12842: LD_INT 59
12844: PUSH
12845: LD_INT 3
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 32
12856: PUSH
12857: LD_INT 61
12859: PUSH
12860: LD_INT 64
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 33
12874: PUSH
12875: LD_INT 63
12877: PUSH
12878: LD_INT 90
12880: PUSH
12881: LD_INT 5
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 33
12892: PUSH
12893: LD_INT 64
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 72
12913: PUSH
12914: LD_INT 82
12916: PUSH
12917: LD_INT 5
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 6
12928: PUSH
12929: LD_INT 42
12931: PUSH
12932: LD_INT 74
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 6
12946: PUSH
12947: LD_INT 56
12949: PUSH
12950: LD_INT 77
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 54
12967: PUSH
12968: LD_INT 91
12970: PUSH
12971: LD_INT 5
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 16
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 83
12988: PUSH
12989: LD_INT 3
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 24
13000: PUSH
13001: LD_INT 50
13003: PUSH
13004: LD_INT 90
13006: PUSH
13007: LD_INT 0
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 3
13064: PUSH
13065: LD_INT 25
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: PUSH
13088: FOR_IN
13089: IFFALSE 13108
// AddComAgressiveMove ( i , 53 , 82 ) ;
13091: LD_VAR 0 3
13095: PPUSH
13096: LD_INT 53
13098: PPUSH
13099: LD_INT 82
13101: PPUSH
13102: CALL_OW 174
13106: GO 13088
13108: POP
13109: POP
// for i := 1 to buildingsTab do
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_VAR 0 5
13124: PUSH
13125: FOR_TO
13126: IFFALSE 13199
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13128: LD_VAR 0 4
13132: PPUSH
13133: LD_VAR 0 5
13137: PUSH
13138: LD_VAR 0 3
13142: ARRAY
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 5
13152: PUSH
13153: LD_VAR 0 3
13157: ARRAY
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 5
13167: PUSH
13168: LD_VAR 0 3
13172: ARRAY
13173: PUSH
13174: LD_INT 3
13176: ARRAY
13177: PPUSH
13178: LD_VAR 0 5
13182: PUSH
13183: LD_VAR 0 3
13187: ARRAY
13188: PUSH
13189: LD_INT 4
13191: ARRAY
13192: PPUSH
13193: CALL_OW 205
13197: GO 13125
13199: POP
13200: POP
// end ; if position = 2 then
13201: LD_VAR 0 1
13205: PUSH
13206: LD_INT 2
13208: EQUAL
13209: IFFALSE 13824
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13211: LD_ADDR_VAR 0 4
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 3
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 25
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13245: LD_ADDR_VAR 0 5
13249: PUSH
13250: LD_INT 0
13252: PUSH
13253: LD_INT 104
13255: PUSH
13256: LD_INT 110
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: LD_INT 98
13273: PUSH
13274: LD_INT 90
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 29
13288: PUSH
13289: LD_INT 103
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 30
13306: PUSH
13307: LD_INT 99
13309: PUSH
13310: LD_INT 114
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 28
13324: PUSH
13325: LD_INT 100
13327: PUSH
13328: LD_INT 112
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 92
13345: PUSH
13346: LD_INT 101
13348: PUSH
13349: LD_INT 0
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 28
13360: PUSH
13361: LD_INT 97
13363: PUSH
13364: LD_INT 116
13366: PUSH
13367: LD_INT 5
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 17
13378: PUSH
13379: LD_INT 96
13381: PUSH
13382: LD_INT 101
13384: PUSH
13385: LD_INT 4
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 18
13396: PUSH
13397: LD_INT 88
13399: PUSH
13400: LD_INT 97
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 28
13414: PUSH
13415: LD_INT 106
13417: PUSH
13418: LD_INT 92
13420: PUSH
13421: LD_INT 2
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 88
13435: PUSH
13436: LD_INT 89
13438: PUSH
13439: LD_INT 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 32
13450: PUSH
13451: LD_INT 86
13453: PUSH
13454: LD_INT 90
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 32
13468: PUSH
13469: LD_INT 85
13471: PUSH
13472: LD_INT 99
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 32
13486: PUSH
13487: LD_INT 85
13489: PUSH
13490: LD_INT 107
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 33
13504: PUSH
13505: LD_INT 105
13507: PUSH
13508: LD_INT 99
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 33
13522: PUSH
13523: LD_INT 102
13525: PUSH
13526: LD_INT 92
13528: PUSH
13529: LD_INT 3
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 33
13540: PUSH
13541: LD_INT 105
13543: PUSH
13544: LD_INT 92
13546: PUSH
13547: LD_INT 2
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 6
13558: PUSH
13559: LD_INT 92
13561: PUSH
13562: LD_INT 110
13564: PUSH
13565: LD_INT 0
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 6
13576: PUSH
13577: LD_INT 103
13579: PUSH
13580: LD_INT 103
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: LD_INT 89
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 16
13612: PUSH
13613: LD_INT 95
13615: PUSH
13616: LD_INT 104
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 24
13630: PUSH
13631: LD_INT 92
13633: PUSH
13634: LD_INT 105
13636: PUSH
13637: LD_INT 0
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 3
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PUSH
13711: FOR_IN
13712: IFFALSE 13731
// AddComAgressiveMove ( i , 96 , 99 ) ;
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 96
13721: PPUSH
13722: LD_INT 99
13724: PPUSH
13725: CALL_OW 174
13729: GO 13711
13731: POP
13732: POP
// for i := 1 to buildingsTab do
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: DOUBLE
13739: LD_INT 1
13741: DEC
13742: ST_TO_ADDR
13743: LD_VAR 0 5
13747: PUSH
13748: FOR_TO
13749: IFFALSE 13822
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13751: LD_VAR 0 4
13755: PPUSH
13756: LD_VAR 0 5
13760: PUSH
13761: LD_VAR 0 3
13765: ARRAY
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_VAR 0 5
13775: PUSH
13776: LD_VAR 0 3
13780: ARRAY
13781: PUSH
13782: LD_INT 2
13784: ARRAY
13785: PPUSH
13786: LD_VAR 0 5
13790: PUSH
13791: LD_VAR 0 3
13795: ARRAY
13796: PUSH
13797: LD_INT 3
13799: ARRAY
13800: PPUSH
13801: LD_VAR 0 5
13805: PUSH
13806: LD_VAR 0 3
13810: ARRAY
13811: PUSH
13812: LD_INT 4
13814: ARRAY
13815: PPUSH
13816: CALL_OW 205
13820: GO 13748
13822: POP
13823: POP
// end ; if position = 3 then
13824: LD_VAR 0 1
13828: PUSH
13829: LD_INT 3
13831: EQUAL
13832: IFFALSE 14618
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13834: LD_ADDR_VAR 0 4
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_INT 3
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 2
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13868: LD_ADDR_VAR 0 5
13872: PUSH
13873: LD_INT 0
13875: PUSH
13876: LD_INT 151
13878: PUSH
13879: LD_INT 71
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: LD_INT 145
13896: PUSH
13897: LD_INT 53
13899: PUSH
13900: LD_INT 3
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: LD_INT 172
13914: PUSH
13915: LD_INT 102
13917: PUSH
13918: LD_INT 5
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 29
13929: PUSH
13930: LD_INT 152
13932: PUSH
13933: LD_INT 85
13935: PUSH
13936: LD_INT 3
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 30
13947: PUSH
13948: LD_INT 156
13950: PUSH
13951: LD_INT 92
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 28
13965: PUSH
13966: LD_INT 151
13968: PUSH
13969: LD_INT 66
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 163
13986: PUSH
13987: LD_INT 95
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 28
14001: PUSH
14002: LD_INT 149
14004: PUSH
14005: LD_INT 63
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 17
14019: PUSH
14020: LD_INT 167
14022: PUSH
14023: LD_INT 99
14025: PUSH
14026: LD_INT 5
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 18
14037: PUSH
14038: LD_INT 163
14040: PUSH
14041: LD_INT 98
14043: PUSH
14044: LD_INT 0
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 28
14055: PUSH
14056: LD_INT 154
14058: PUSH
14059: LD_INT 70
14061: PUSH
14062: LD_INT 4
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 32
14073: PUSH
14074: LD_INT 155
14076: PUSH
14077: LD_INT 62
14079: PUSH
14080: LD_INT 4
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 32
14091: PUSH
14092: LD_INT 161
14094: PUSH
14095: LD_INT 69
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 32
14109: PUSH
14110: LD_INT 168
14112: PUSH
14113: LD_INT 78
14115: PUSH
14116: LD_INT 4
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 32
14127: PUSH
14128: LD_INT 163
14130: PUSH
14131: LD_INT 80
14133: PUSH
14134: LD_INT 5
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 32
14145: PUSH
14146: LD_INT 136
14148: PUSH
14149: LD_INT 73
14151: PUSH
14152: LD_INT 0
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 32
14163: PUSH
14164: LD_INT 157
14166: PUSH
14167: LD_INT 98
14169: PUSH
14170: LD_INT 0
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 32
14181: PUSH
14182: LD_INT 150
14184: PUSH
14185: LD_INT 87
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 33
14199: PUSH
14200: LD_INT 171
14202: PUSH
14203: LD_INT 97
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 33
14217: PUSH
14218: LD_INT 168
14220: PUSH
14221: LD_INT 92
14223: PUSH
14224: LD_INT 4
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 33
14235: PUSH
14236: LD_INT 166
14238: PUSH
14239: LD_INT 80
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 33
14253: PUSH
14254: LD_INT 141
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 33
14271: PUSH
14272: LD_INT 133
14274: PUSH
14275: LD_INT 57
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 132
14292: PUSH
14293: LD_INT 61
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 33
14307: PUSH
14308: LD_INT 150
14310: PUSH
14311: LD_INT 82
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 33
14325: PUSH
14326: LD_INT 132
14328: PUSH
14329: LD_INT 72
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 6
14343: PUSH
14344: LD_INT 146
14346: PUSH
14347: LD_INT 64
14349: PUSH
14350: LD_INT 4
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 6
14361: PUSH
14362: LD_INT 159
14364: PUSH
14365: LD_INT 85
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 163
14382: PUSH
14383: LD_INT 91
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 16
14397: PUSH
14398: LD_INT 166
14400: PUSH
14401: LD_INT 95
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 24
14415: PUSH
14416: LD_INT 159
14418: PUSH
14419: LD_INT 95
14421: PUSH
14422: LD_INT 1
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 3
14481: PUSH
14482: LD_INT 25
14484: PUSH
14485: LD_INT 2
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PUSH
14505: FOR_IN
14506: IFFALSE 14525
// AddComAgressiveMove ( i , 141 , 65 ) ;
14508: LD_VAR 0 3
14512: PPUSH
14513: LD_INT 141
14515: PPUSH
14516: LD_INT 65
14518: PPUSH
14519: CALL_OW 174
14523: GO 14505
14525: POP
14526: POP
// for i := 1 to buildingsTab do
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_VAR 0 5
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14616
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14545: LD_VAR 0 4
14549: PPUSH
14550: LD_VAR 0 5
14554: PUSH
14555: LD_VAR 0 3
14559: ARRAY
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: LD_VAR 0 5
14569: PUSH
14570: LD_VAR 0 3
14574: ARRAY
14575: PUSH
14576: LD_INT 2
14578: ARRAY
14579: PPUSH
14580: LD_VAR 0 5
14584: PUSH
14585: LD_VAR 0 3
14589: ARRAY
14590: PUSH
14591: LD_INT 3
14593: ARRAY
14594: PPUSH
14595: LD_VAR 0 5
14599: PUSH
14600: LD_VAR 0 3
14604: ARRAY
14605: PUSH
14606: LD_INT 4
14608: ARRAY
14609: PPUSH
14610: CALL_OW 205
14614: GO 14542
14616: POP
14617: POP
// end ; end ;
14618: LD_VAR 0 2
14622: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14628: LD_ADDR_EXP 70
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: LD_INT 71
14638: PUSH
14639: LD_INT 15
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 6
14653: PUSH
14654: LD_INT 77
14656: PUSH
14657: LD_INT 18
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 4
14671: PUSH
14672: LD_INT 77
14674: PUSH
14675: LD_INT 26
14677: PUSH
14678: LD_INT 0
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 31
14689: PUSH
14690: LD_INT 72
14692: PUSH
14693: LD_INT 24
14695: PUSH
14696: LD_INT 0
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 31
14707: PUSH
14708: LD_INT 82
14710: PUSH
14711: LD_INT 28
14713: PUSH
14714: LD_INT 0
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 31
14725: PUSH
14726: LD_INT 84
14728: PUSH
14729: LD_INT 21
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 31
14743: PUSH
14744: LD_INT 66
14746: PUSH
14747: LD_INT 14
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 27
14761: PUSH
14762: LD_INT 67
14764: PUSH
14765: LD_INT 18
14767: PUSH
14768: LD_INT 5
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 27
14779: PUSH
14780: LD_INT 69
14782: PUSH
14783: LD_INT 23
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14806: LD_ADDR_VAR 0 3
14810: PUSH
14811: LD_INT 22
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 25
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14840: LD_VAR 0 3
14844: PPUSH
14845: LD_EXP 70
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: PPUSH
14858: LD_EXP 70
14862: PUSH
14863: LD_INT 1
14865: ARRAY
14866: PUSH
14867: LD_INT 2
14869: ARRAY
14870: PPUSH
14871: LD_EXP 70
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PUSH
14880: LD_INT 3
14882: ARRAY
14883: PPUSH
14884: LD_EXP 70
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PUSH
14893: LD_INT 4
14895: ARRAY
14896: PPUSH
14897: CALL_OW 205
// end ;
14901: LD_VAR 0 1
14905: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
14910: PPUSH
14911: PPUSH
14912: PPUSH
14913: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_VAR 0 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 25
14933: PUSH
14934: LD_INT 9
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14950: LD_ADDR_VAR 0 8
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_INT 1
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: CALL_OW 12
15008: ST_TO_ADDR
// for i = 1 to list do
15009: LD_ADDR_VAR 0 6
15013: PUSH
15014: DOUBLE
15015: LD_INT 1
15017: DEC
15018: ST_TO_ADDR
15019: LD_VAR 0 7
15023: PUSH
15024: FOR_TO
15025: IFFALSE 16015
// for ta in filter do
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: LD_VAR 0 8
15036: PUSH
15037: FOR_IN
15038: IFFALSE 16011
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15040: LD_VAR 0 7
15044: PUSH
15045: LD_VAR 0 6
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 4
15055: PPUSH
15056: CALL_OW 296
15060: PUSH
15061: LD_INT 15
15063: LESSEQUAL
15064: IFFALSE 16009
// begin case c of 1 :
15066: LD_VAR 0 5
15070: PUSH
15071: LD_INT 1
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15511
15079: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15080: LD_VAR 0 7
15084: PUSH
15085: LD_VAR 0 6
15089: ARRAY
15090: PPUSH
15091: LD_VAR 0 4
15095: PPUSH
15096: CALL_OW 250
15100: PPUSH
15101: LD_VAR 0 4
15105: PPUSH
15106: CALL_OW 251
15110: PPUSH
15111: CALL_OW 154
// if eventVar2 = 0 then
15115: LD_EXP 68
15119: PUSH
15120: LD_INT 0
15122: EQUAL
15123: IFFALSE 15509
// begin eventVar2 = 1 ;
15125: LD_ADDR_EXP 68
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15133: LD_INT 245
15135: PPUSH
15136: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15140: LD_VAR 0 4
15144: PPUSH
15145: CALL_OW 250
15149: PPUSH
15150: LD_VAR 0 4
15154: PPUSH
15155: CALL_OW 251
15159: PPUSH
15160: CALL_OW 84
// DialogueOn ;
15164: CALL_OW 6
// if IsOK ( Cyrus ) then
15168: LD_EXP 5
15172: PPUSH
15173: CALL_OW 302
15177: IFFALSE 15193
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15179: LD_EXP 5
15183: PPUSH
15184: LD_STRING D9a-Cyrus-1
15186: PPUSH
15187: CALL_OW 88
// end else
15191: GO 15315
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15193: LD_INT 22
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 26
15205: PUSH
15206: LD_INT 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: LD_INT 25
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 25
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 4
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 5
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 69
15283: PUSH
15284: LD_EXP 1
15288: PUSH
15289: LD_EXP 14
15293: PUSH
15294: LD_EXP 5
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: DIFF
15304: PPUSH
15305: LD_STRING D9a-Sol1-1
15307: PPUSH
15308: LD_STRING D9a-Sol1-1
15310: PPUSH
15311: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15315: LD_INT 22
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 26
15327: PUSH
15328: LD_INT 1
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: LD_INT 25
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 25
15360: PUSH
15361: LD_INT 3
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 4
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 5
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_EXP 1
15410: PUSH
15411: LD_EXP 14
15415: PUSH
15416: LD_EXP 5
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: DIFF
15426: PPUSH
15427: LD_STRING D9b-Sol1-1
15429: PPUSH
15430: LD_STRING D9b-Sol1-1
15432: PPUSH
15433: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15437: LD_STRING 09_arInfo
15439: PPUSH
15440: LD_INT 0
15442: PPUSH
15443: CALL_OW 30
15447: PUSH
15448: LD_INT 1
15450: EQUAL
15451: IFFALSE 15465
// Say ( JMM , D9a-JMM-1 ) ;
15453: LD_EXP 1
15457: PPUSH
15458: LD_STRING D9a-JMM-1
15460: PPUSH
15461: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15465: LD_EXP 1
15469: PPUSH
15470: LD_STRING D9c-JMM-1
15472: PPUSH
15473: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15477: LD_INT 12
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 321
15487: PUSH
15488: LD_INT 2
15490: EQUAL
15491: IFFALSE 15505
// Say ( JMM , D9c-JMM-1a ) ;
15493: LD_EXP 1
15497: PPUSH
15498: LD_STRING D9c-JMM-1a
15500: PPUSH
15501: CALL_OW 88
// DialogueOff ;
15505: CALL_OW 7
// end ; end ; 2 :
15509: GO 16009
15511: LD_INT 2
15513: DOUBLE
15514: EQUAL
15515: IFTRUE 15519
15517: GO 15977
15519: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15520: LD_VAR 0 7
15524: PUSH
15525: LD_VAR 0 6
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 4
15535: PPUSH
15536: CALL_OW 250
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: CALL_OW 12
15552: PLUS
15553: PPUSH
15554: LD_VAR 0 4
15558: PPUSH
15559: CALL_OW 251
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 12
15575: PLUS
15576: PPUSH
15577: CALL_OW 153
// if eventVar2 = 0 then
15581: LD_EXP 68
15585: PUSH
15586: LD_INT 0
15588: EQUAL
15589: IFFALSE 15975
// begin eventVar2 = 1 ;
15591: LD_ADDR_EXP 68
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15599: LD_INT 245
15601: PPUSH
15602: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15606: LD_VAR 0 4
15610: PPUSH
15611: CALL_OW 250
15615: PPUSH
15616: LD_VAR 0 4
15620: PPUSH
15621: CALL_OW 251
15625: PPUSH
15626: CALL_OW 84
// DialogueOn ;
15630: CALL_OW 6
// if IsOK ( Cyrus ) then
15634: LD_EXP 5
15638: PPUSH
15639: CALL_OW 302
15643: IFFALSE 15659
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15645: LD_EXP 5
15649: PPUSH
15650: LD_STRING D9a-Cyrus-1
15652: PPUSH
15653: CALL_OW 88
// end else
15657: GO 15781
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15659: LD_INT 22
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 25
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 25
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 25
15704: PUSH
15705: LD_INT 3
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 25
15714: PUSH
15715: LD_INT 4
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 5
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: LD_EXP 1
15754: PUSH
15755: LD_EXP 14
15759: PUSH
15760: LD_EXP 5
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: DIFF
15770: PPUSH
15771: LD_STRING D9a-Sol1-1
15773: PPUSH
15774: LD_STRING D9a-Sol1-1
15776: PPUSH
15777: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15781: LD_INT 22
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 26
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: LD_INT 25
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 25
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 25
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 4
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 25
15846: PUSH
15847: LD_INT 5
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 69
15871: PUSH
15872: LD_EXP 1
15876: PUSH
15877: LD_EXP 14
15881: PUSH
15882: LD_EXP 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: DIFF
15892: PPUSH
15893: LD_STRING D9b-Sol1-1
15895: PPUSH
15896: LD_STRING D9b-Sol1-1
15898: PPUSH
15899: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15903: LD_STRING 09_arInfo
15905: PPUSH
15906: LD_INT 0
15908: PPUSH
15909: CALL_OW 30
15913: PUSH
15914: LD_INT 1
15916: EQUAL
15917: IFFALSE 15931
// Say ( JMM , D9a-JMM-1 ) ;
15919: LD_EXP 1
15923: PPUSH
15924: LD_STRING D9a-JMM-1
15926: PPUSH
15927: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15931: LD_EXP 1
15935: PPUSH
15936: LD_STRING D9c-JMM-1
15938: PPUSH
15939: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15943: LD_INT 12
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 321
15953: PUSH
15954: LD_INT 2
15956: EQUAL
15957: IFFALSE 15971
// Say ( JMM , D9c-JMM-1a ) ;
15959: LD_EXP 1
15963: PPUSH
15964: LD_STRING D9c-JMM-1a
15966: PPUSH
15967: CALL_OW 88
// DialogueOff ;
15971: CALL_OW 7
// end ; end ; 3 :
15975: GO 16009
15977: LD_INT 3
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15985
15983: GO 16008
15985: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15986: LD_VAR 0 7
15990: PUSH
15991: LD_VAR 0 6
15995: ARRAY
15996: PPUSH
15997: LD_VAR 0 4
16001: PPUSH
16002: CALL_OW 115
16006: GO 16009
16008: POP
// end ; end ;
16009: GO 15037
16011: POP
16012: POP
16013: GO 15024
16015: POP
16016: POP
// end ;
16017: LD_VAR 0 3
16021: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
16022: LD_INT 0
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
// for i = 1 to 72 do
16028: LD_ADDR_VAR 0 5
16032: PUSH
16033: DOUBLE
16034: LD_INT 1
16036: DEC
16037: ST_TO_ADDR
16038: LD_INT 72
16040: PUSH
16041: FOR_TO
16042: IFFALSE 16100
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
16044: LD_VAR 0 5
16048: PPUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 321
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: PUSH
16063: LD_VAR 0 5
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: CALL_OW 482
16077: PUSH
16078: LD_INT 1
16080: EQUAL
16081: AND
16082: IFFALSE 16098
// AddComResearch ( lab , i ) ;
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 5
16093: PPUSH
16094: CALL_OW 184
16098: GO 16041
16100: POP
16101: POP
// end ;
16102: LD_VAR 0 4
16106: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16117: LD_ADDR_VAR 0 6
16121: PUSH
16122: LD_INT 22
16124: PUSH
16125: LD_VAR 0 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 56
16136: PUSH
16137: EMPTY
16138: LIST
16139: PUSH
16140: LD_INT 24
16142: PUSH
16143: LD_INT 700
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 60
16155: PUSH
16156: EMPTY
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 25
16168: PUSH
16169: LD_INT 1
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 25
16178: PUSH
16179: LD_INT 9
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16203: LD_ADDR_VAR 0 7
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_VAR 0 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 58
16232: PUSH
16233: EMPTY
16234: LIST
16235: PUSH
16236: LD_INT 24
16238: PUSH
16239: LD_INT 251
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_full ] ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16257: LD_ADDR_VAR 0 9
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_VAR 0 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 3
16276: PUSH
16277: LD_INT 62
16279: PUSH
16280: EMPTY
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: LD_INT 30
16292: PUSH
16293: LD_INT 4
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 30
16302: PUSH
16303: LD_INT 5
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 24
16317: PUSH
16318: LD_INT 251
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: PPUSH
16331: CALL_OW 69
16335: ST_TO_ADDR
// if not barrackList then
16336: LD_VAR 0 9
16340: NOT
16341: IFFALSE 16345
// exit ;
16343: GO 16478
// if turretList = 0 then
16345: LD_VAR 0 7
16349: PUSH
16350: LD_INT 0
16352: EQUAL
16353: IFFALSE 16402
// begin for i in soldiers_list do
16355: LD_ADDR_VAR 0 4
16359: PUSH
16360: LD_VAR 0 6
16364: PUSH
16365: FOR_IN
16366: IFFALSE 16398
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16368: LD_VAR 0 4
16372: PPUSH
16373: LD_VAR 0 9
16377: PUSH
16378: LD_INT 1
16380: PPUSH
16381: LD_VAR 0 9
16385: PPUSH
16386: CALL_OW 12
16390: ARRAY
16391: PPUSH
16392: CALL_OW 120
16396: GO 16365
16398: POP
16399: POP
// end else
16400: GO 16478
// begin for i in barrackList do
16402: LD_ADDR_VAR 0 4
16406: PUSH
16407: LD_VAR 0 9
16411: PUSH
16412: FOR_IN
16413: IFFALSE 16476
// begin insideUnits = UnitsInside ( i ) ;
16415: LD_ADDR_VAR 0 10
16419: PUSH
16420: LD_VAR 0 4
16424: PPUSH
16425: CALL_OW 313
16429: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16430: LD_VAR 0 10
16434: PUSH
16435: LD_INT 1
16437: ARRAY
16438: PPUSH
16439: LD_VAR 0 7
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: PPUSH
16448: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16452: LD_VAR 0 6
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: PPUSH
16461: LD_VAR 0 7
16465: PUSH
16466: LD_INT 1
16468: ARRAY
16469: PPUSH
16470: CALL_OW 120
// end ;
16474: GO 16412
16476: POP
16477: POP
// end ; end ;
16478: LD_VAR 0 3
16482: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16483: LD_INT 0
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16491: LD_ADDR_VAR 0 6
16495: PUSH
16496: LD_VAR 0 2
16500: PPUSH
16501: CALL_OW 313
16505: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16506: LD_ADDR_VAR 0 7
16510: PUSH
16511: LD_INT 22
16513: PUSH
16514: LD_VAR 0 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 25
16525: PUSH
16526: LD_INT 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 24
16535: PUSH
16536: LD_INT 1000
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: LD_INT 54
16548: PUSH
16549: EMPTY
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: PPUSH
16562: CALL_OW 69
16566: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16567: LD_ADDR_VAR 0 4
16571: PUSH
16572: LD_INT 22
16574: PUSH
16575: LD_VAR 0 1
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 21
16586: PUSH
16587: LD_INT 3
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 3
16596: PUSH
16597: LD_INT 24
16599: PUSH
16600: LD_INT 1000
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: PUSH
16616: EMPTY
16617: LIST
16618: PPUSH
16619: CALL_OW 69
16623: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16624: LD_VAR 0 4
16628: NOT
16629: PUSH
16630: LD_VAR 0 7
16634: NOT
16635: AND
16636: PUSH
16637: LD_EXP 44
16641: NOT
16642: AND
16643: IFFALSE 16647
// exit ;
16645: GO 16838
// if buildings_list > 0 and engineerOkInside then
16647: LD_VAR 0 4
16651: PUSH
16652: LD_INT 0
16654: GREATER
16655: PUSH
16656: LD_VAR 0 6
16660: AND
16661: IFFALSE 16715
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16663: LD_ADDR_VAR 0 5
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_VAR 0 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 25
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PPUSH
16694: CALL_OW 69
16698: PUSH
16699: FOR_IN
16700: IFFALSE 16713
// ComExitBuilding ( i ) ;
16702: LD_VAR 0 5
16706: PPUSH
16707: CALL_OW 122
16711: GO 16699
16713: POP
16714: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16715: LD_VAR 0 4
16719: PUSH
16720: LD_INT 0
16722: GREATER
16723: PUSH
16724: LD_VAR 0 7
16728: PUSH
16729: LD_INT 0
16731: GREATER
16732: AND
16733: IFFALSE 16787
// begin for i in engineerOkOutside do
16735: LD_ADDR_VAR 0 5
16739: PUSH
16740: LD_VAR 0 7
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16785
// for j in buildings_list do
16748: LD_ADDR_VAR 0 8
16752: PUSH
16753: LD_VAR 0 4
16757: PUSH
16758: FOR_IN
16759: IFFALSE 16781
// ComRepairBuilding ( i , j [ 1 ] ) ;
16761: LD_VAR 0 5
16765: PPUSH
16766: LD_VAR 0 8
16770: PUSH
16771: LD_INT 1
16773: ARRAY
16774: PPUSH
16775: CALL_OW 130
16779: GO 16758
16781: POP
16782: POP
16783: GO 16745
16785: POP
16786: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16787: LD_VAR 0 4
16791: PUSH
16792: LD_INT 0
16794: EQUAL
16795: PUSH
16796: LD_VAR 0 7
16800: PUSH
16801: LD_INT 0
16803: GREATER
16804: AND
16805: IFFALSE 16838
// for i in engineerOkOutside do
16807: LD_ADDR_VAR 0 5
16811: PUSH
16812: LD_VAR 0 7
16816: PUSH
16817: FOR_IN
16818: IFFALSE 16836
// ComEnterUnit ( i , building ) ;
16820: LD_VAR 0 5
16824: PPUSH
16825: LD_VAR 0 2
16829: PPUSH
16830: CALL_OW 120
16834: GO 16817
16836: POP
16837: POP
// end ;
16838: LD_VAR 0 3
16842: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16843: LD_INT 0
16845: PPUSH
16846: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16847: LD_INT 22
16849: PUSH
16850: LD_VAR 0 1
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 25
16861: PUSH
16862: LD_INT 2
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PPUSH
16873: CALL_OW 69
16877: PUSH
16878: LD_INT 0
16880: GREATER
16881: PUSH
16882: LD_INT 22
16884: PUSH
16885: LD_VAR 0 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 21
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 3
16906: PUSH
16907: LD_INT 24
16909: PUSH
16910: LD_INT 1000
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: PUSH
16931: LD_INT 0
16933: EQUAL
16934: AND
16935: PUSH
16936: LD_VAR 0 2
16940: PUSH
16941: LD_INT 0
16943: GREATER
16944: AND
16945: IFFALSE 17044
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16947: LD_ADDR_VAR 0 4
16951: PUSH
16952: LD_INT 22
16954: PUSH
16955: LD_VAR 0 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 25
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PPUSH
16978: CALL_OW 69
16982: PUSH
16983: FOR_IN
16984: IFFALSE 17042
// begin AddComExitBuilding ( i ) ;
16986: LD_VAR 0 4
16990: PPUSH
16991: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16995: LD_VAR 0 4
16999: PPUSH
17000: LD_VAR 0 2
17004: PUSH
17005: LD_INT 1
17007: ARRAY
17008: PPUSH
17009: LD_VAR 0 2
17013: PUSH
17014: LD_INT 2
17016: ARRAY
17017: PPUSH
17018: LD_VAR 0 2
17022: PUSH
17023: LD_INT 3
17025: ARRAY
17026: PPUSH
17027: LD_VAR 0 2
17031: PUSH
17032: LD_INT 4
17034: ARRAY
17035: PPUSH
17036: CALL_OW 205
// end ;
17040: GO 16983
17042: POP
17043: POP
// end ; end ;
17044: LD_VAR 0 3
17048: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
17049: LD_INT 0
17051: PPUSH
17052: PPUSH
17053: PPUSH
17054: PPUSH
17055: PPUSH
17056: PPUSH
17057: PPUSH
17058: PPUSH
17059: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
17060: LD_ADDR_VAR 0 6
17064: PUSH
17065: LD_INT 22
17067: PUSH
17068: LD_VAR 0 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 25
17079: PUSH
17080: LD_INT 4
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 24
17089: PUSH
17090: LD_INT 251
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: PPUSH
17102: CALL_OW 69
17106: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17107: LD_ADDR_VAR 0 7
17111: PUSH
17112: LD_VAR 0 3
17116: PPUSH
17117: LD_INT 22
17119: PUSH
17120: LD_VAR 0 1
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 25
17131: PUSH
17132: LD_INT 4
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 50
17141: PUSH
17142: EMPTY
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 70
17154: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17155: LD_ADDR_VAR 0 10
17159: PUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 22
17167: PUSH
17168: LD_VAR 0 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 21
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 3
17189: PUSH
17190: LD_INT 25
17192: PUSH
17193: LD_INT 3
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 3
17206: PUSH
17207: LD_INT 24
17209: PUSH
17210: LD_INT 750
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: PPUSH
17227: CALL_OW 70
17231: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17232: LD_ADDR_VAR 0 11
17236: PUSH
17237: LD_VAR 0 2
17241: PPUSH
17242: LD_INT 22
17244: PUSH
17245: LD_VAR 0 1
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 3
17266: PUSH
17267: LD_INT 25
17269: PUSH
17270: LD_INT 3
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 3
17283: PUSH
17284: LD_INT 24
17286: PUSH
17287: LD_INT 1000
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: PPUSH
17304: CALL_OW 70
17308: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17309: LD_VAR 0 10
17313: NOT
17314: PUSH
17315: LD_VAR 0 7
17319: NOT
17320: AND
17321: PUSH
17322: LD_VAR 0 11
17326: NOT
17327: AND
17328: IFFALSE 17332
// exit ;
17330: GO 17592
// if damageUnits > 0 and sci_list > 0 then
17332: LD_VAR 0 10
17336: PUSH
17337: LD_INT 0
17339: GREATER
17340: PUSH
17341: LD_VAR 0 6
17345: PUSH
17346: LD_INT 0
17348: GREATER
17349: AND
17350: IFFALSE 17383
// for i in damageUnits do
17352: LD_ADDR_VAR 0 8
17356: PUSH
17357: LD_VAR 0 10
17361: PUSH
17362: FOR_IN
17363: IFFALSE 17381
// ComMoveToArea ( i , healArea ) ;
17365: LD_VAR 0 8
17369: PPUSH
17370: LD_VAR 0 2
17374: PPUSH
17375: CALL_OW 113
17379: GO 17362
17381: POP
17382: POP
// if unitsToHeal > 0 and sci_list > 0 then
17383: LD_VAR 0 11
17387: PUSH
17388: LD_INT 0
17390: GREATER
17391: PUSH
17392: LD_VAR 0 6
17396: PUSH
17397: LD_INT 0
17399: GREATER
17400: AND
17401: IFFALSE 17460
// begin for i in sci_list do
17403: LD_ADDR_VAR 0 8
17407: PUSH
17408: LD_VAR 0 6
17412: PUSH
17413: FOR_IN
17414: IFFALSE 17458
// begin ComExitBuilding ( i ) ;
17416: LD_VAR 0 8
17420: PPUSH
17421: CALL_OW 122
// for j in unitsToHeal do
17425: LD_ADDR_VAR 0 9
17429: PUSH
17430: LD_VAR 0 11
17434: PUSH
17435: FOR_IN
17436: IFFALSE 17454
// AddComHeal ( i , j ) ;
17438: LD_VAR 0 8
17442: PPUSH
17443: LD_VAR 0 9
17447: PPUSH
17448: CALL_OW 188
17452: GO 17435
17454: POP
17455: POP
// end ;
17456: GO 17413
17458: POP
17459: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17460: LD_VAR 0 10
17464: PUSH
17465: LD_INT 0
17467: EQUAL
17468: PUSH
17469: LD_VAR 0 11
17473: PUSH
17474: LD_INT 0
17476: EQUAL
17477: AND
17478: PUSH
17479: LD_VAR 0 7
17483: PUSH
17484: LD_INT 0
17486: GREATER
17487: AND
17488: IFFALSE 17592
// for i in sci_listOutside do
17490: LD_ADDR_VAR 0 8
17494: PUSH
17495: LD_VAR 0 7
17499: PUSH
17500: FOR_IN
17501: IFFALSE 17590
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17503: LD_ADDR_VAR 0 12
17507: PUSH
17508: LD_INT 22
17510: PUSH
17511: LD_VAR 0 1
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 21
17522: PUSH
17523: LD_INT 3
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 30
17532: PUSH
17533: LD_INT 8
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17550: LD_ADDR_VAR 0 13
17554: PUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_VAR 0 12
17562: PPUSH
17563: CALL_OW 12
17567: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17568: LD_VAR 0 8
17572: PPUSH
17573: LD_VAR 0 12
17577: PUSH
17578: LD_VAR 0 13
17582: ARRAY
17583: PPUSH
17584: CALL_OW 120
// end ;
17588: GO 17500
17590: POP
17591: POP
// end ;
17592: LD_VAR 0 5
17596: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17597: LD_INT 0
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
// amChassisTab = [ ] ;
17610: LD_ADDR_VAR 0 19
17614: PUSH
17615: EMPTY
17616: ST_TO_ADDR
// arChassisTab = [ ] ;
17617: LD_ADDR_VAR 0 18
17621: PUSH
17622: EMPTY
17623: ST_TO_ADDR
// ruChassisTab = [ ] ;
17624: LD_ADDR_VAR 0 17
17628: PUSH
17629: EMPTY
17630: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17631: LD_INT 35
17633: PPUSH
17634: CALL_OW 67
// if nation = 1 then
17638: LD_VAR 0 5
17642: PUSH
17643: LD_INT 1
17645: EQUAL
17646: IFFALSE 18151
// begin uc_side = side ;
17648: LD_ADDR_OWVAR 20
17652: PUSH
17653: LD_VAR 0 2
17657: ST_TO_ADDR
// uc_nation = nation ;
17658: LD_ADDR_OWVAR 21
17662: PUSH
17663: LD_VAR 0 5
17667: ST_TO_ADDR
// vc_engine = vehengine ;
17668: LD_ADDR_OWVAR 39
17672: PUSH
17673: LD_VAR 0 6
17677: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17678: LD_ADDR_OWVAR 38
17682: PUSH
17683: LD_VAR 0 7
17687: PUSH
17688: LD_INT 1
17690: PPUSH
17691: LD_VAR 0 7
17695: PPUSH
17696: CALL_OW 12
17700: ARRAY
17701: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17702: LD_ADDR_OWVAR 40
17706: PUSH
17707: LD_VAR 0 10
17711: PUSH
17712: LD_INT 1
17714: PPUSH
17715: LD_VAR 0 10
17719: PPUSH
17720: CALL_OW 12
17724: ARRAY
17725: ST_TO_ADDR
// for j = 1 to AMWeapon do
17726: LD_ADDR_VAR 0 14
17730: PUSH
17731: DOUBLE
17732: LD_INT 1
17734: DEC
17735: ST_TO_ADDR
17736: LD_VAR 0 10
17740: PUSH
17741: FOR_TO
17742: IFFALSE 18043
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17744: LD_VAR 0 10
17748: PUSH
17749: LD_VAR 0 14
17753: ARRAY
17754: PUSH
17755: LD_INT 2
17757: EQUAL
17758: PUSH
17759: LD_VAR 0 10
17763: PUSH
17764: LD_VAR 0 14
17768: ARRAY
17769: PUSH
17770: LD_INT 3
17772: EQUAL
17773: OR
17774: IFFALSE 17827
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17776: LD_ADDR_VAR 0 19
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: LD_INT 4
17792: PUSH
17793: LD_INT 5
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17803: LD_ADDR_OWVAR 37
17807: PUSH
17808: LD_VAR 0 19
17812: PUSH
17813: LD_INT 1
17815: PPUSH
17816: LD_VAR 0 19
17820: PPUSH
17821: CALL_OW 12
17825: ARRAY
17826: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17827: LD_VAR 0 10
17831: PUSH
17832: LD_VAR 0 14
17836: ARRAY
17837: PUSH
17838: LD_INT 4
17840: EQUAL
17841: PUSH
17842: LD_VAR 0 10
17846: PUSH
17847: LD_VAR 0 14
17851: ARRAY
17852: PUSH
17853: LD_INT 5
17855: EQUAL
17856: OR
17857: PUSH
17858: LD_VAR 0 10
17862: PUSH
17863: LD_VAR 0 14
17867: ARRAY
17868: PUSH
17869: LD_INT 9
17871: EQUAL
17872: OR
17873: PUSH
17874: LD_VAR 0 10
17878: PUSH
17879: LD_VAR 0 14
17883: ARRAY
17884: PUSH
17885: LD_INT 11
17887: EQUAL
17888: OR
17889: PUSH
17890: LD_VAR 0 10
17894: PUSH
17895: LD_VAR 0 14
17899: ARRAY
17900: PUSH
17901: LD_INT 7
17903: EQUAL
17904: OR
17905: IFFALSE 17954
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17907: LD_ADDR_VAR 0 19
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 3
17917: PUSH
17918: LD_INT 4
17920: PUSH
17921: LD_INT 5
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17930: LD_ADDR_OWVAR 37
17934: PUSH
17935: LD_VAR 0 19
17939: PUSH
17940: LD_INT 1
17942: PPUSH
17943: LD_VAR 0 19
17947: PPUSH
17948: CALL_OW 12
17952: ARRAY
17953: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17954: LD_VAR 0 10
17958: PUSH
17959: LD_VAR 0 14
17963: ARRAY
17964: PUSH
17965: LD_INT 8
17967: EQUAL
17968: PUSH
17969: LD_VAR 0 10
17973: PUSH
17974: LD_VAR 0 14
17978: ARRAY
17979: PUSH
17980: LD_INT 6
17982: EQUAL
17983: OR
17984: PUSH
17985: LD_VAR 0 10
17989: PUSH
17990: LD_VAR 0 14
17994: ARRAY
17995: PUSH
17996: LD_INT 10
17998: EQUAL
17999: OR
18000: IFFALSE 18041
// begin amChassisTab = [ 4 , 5 ] ;
18002: LD_ADDR_VAR 0 19
18006: PUSH
18007: LD_INT 4
18009: PUSH
18010: LD_INT 5
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
18017: LD_ADDR_OWVAR 37
18021: PUSH
18022: LD_VAR 0 19
18026: PUSH
18027: LD_INT 1
18029: PPUSH
18030: LD_VAR 0 19
18034: PPUSH
18035: CALL_OW 12
18039: ARRAY
18040: ST_TO_ADDR
// end ; end ;
18041: GO 17741
18043: POP
18044: POP
// veh = CreateVehicle ;
18045: LD_ADDR_VAR 0 16
18049: PUSH
18050: CALL_OW 45
18054: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18055: LD_VAR 0 16
18059: PPUSH
18060: LD_VAR 0 1
18064: PPUSH
18065: LD_INT 0
18067: PPUSH
18068: CALL_OW 49
// if vc_control = 1 then
18072: LD_OWVAR 38
18076: PUSH
18077: LD_INT 1
18079: EQUAL
18080: IFFALSE 18137
// begin hc_gallery =  ;
18082: LD_ADDR_OWVAR 33
18086: PUSH
18087: LD_STRING 
18089: ST_TO_ADDR
// hc_name =  ;
18090: LD_ADDR_OWVAR 26
18094: PUSH
18095: LD_STRING 
18097: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18098: LD_INT 0
18100: PPUSH
18101: LD_INT 3
18103: PPUSH
18104: LD_VAR 0 4
18108: PPUSH
18109: CALL_OW 380
// un = CreateHuman ;
18113: LD_ADDR_VAR 0 15
18117: PUSH
18118: CALL_OW 44
18122: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18123: LD_VAR 0 15
18127: PPUSH
18128: LD_VAR 0 16
18132: PPUSH
18133: CALL_OW 52
// end ; i = i + 1 ;
18137: LD_ADDR_VAR 0 13
18141: PUSH
18142: LD_VAR 0 13
18146: PUSH
18147: LD_INT 1
18149: PLUS
18150: ST_TO_ADDR
// end ; if nation = 2 then
18151: LD_VAR 0 5
18155: PUSH
18156: LD_INT 2
18158: EQUAL
18159: IFFALSE 18581
// begin uc_side = side ;
18161: LD_ADDR_OWVAR 20
18165: PUSH
18166: LD_VAR 0 2
18170: ST_TO_ADDR
// uc_nation = nation ;
18171: LD_ADDR_OWVAR 21
18175: PUSH
18176: LD_VAR 0 5
18180: ST_TO_ADDR
// vc_engine = vehengine ;
18181: LD_ADDR_OWVAR 39
18185: PUSH
18186: LD_VAR 0 6
18190: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18191: LD_ADDR_OWVAR 38
18195: PUSH
18196: LD_VAR 0 7
18200: PUSH
18201: LD_INT 1
18203: PPUSH
18204: LD_VAR 0 7
18208: PPUSH
18209: CALL_OW 12
18213: ARRAY
18214: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18215: LD_ADDR_OWVAR 40
18219: PUSH
18220: LD_VAR 0 9
18224: PUSH
18225: LD_INT 1
18227: PPUSH
18228: LD_VAR 0 9
18232: PPUSH
18233: CALL_OW 12
18237: ARRAY
18238: ST_TO_ADDR
// for j = 1 to ARWeapons do
18239: LD_ADDR_VAR 0 14
18243: PUSH
18244: DOUBLE
18245: LD_INT 1
18247: DEC
18248: ST_TO_ADDR
18249: LD_VAR 0 9
18253: PUSH
18254: FOR_TO
18255: IFFALSE 18473
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18257: LD_VAR 0 9
18261: PUSH
18262: LD_VAR 0 14
18266: ARRAY
18267: PUSH
18268: LD_INT 24
18270: EQUAL
18271: PUSH
18272: LD_VAR 0 9
18276: PUSH
18277: LD_VAR 0 14
18281: ARRAY
18282: PUSH
18283: LD_INT 22
18285: EQUAL
18286: OR
18287: PUSH
18288: LD_VAR 0 9
18292: PUSH
18293: LD_VAR 0 14
18297: ARRAY
18298: PUSH
18299: LD_INT 23
18301: EQUAL
18302: OR
18303: PUSH
18304: LD_VAR 0 9
18308: PUSH
18309: LD_VAR 0 14
18313: ARRAY
18314: PUSH
18315: LD_INT 30
18317: EQUAL
18318: OR
18319: IFFALSE 18356
// begin arChassisTab = [ 14 ] ;
18321: LD_ADDR_VAR 0 18
18325: PUSH
18326: LD_INT 14
18328: PUSH
18329: EMPTY
18330: LIST
18331: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18332: LD_ADDR_OWVAR 37
18336: PUSH
18337: LD_VAR 0 18
18341: PUSH
18342: LD_INT 1
18344: PPUSH
18345: LD_VAR 0 18
18349: PPUSH
18350: CALL_OW 12
18354: ARRAY
18355: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18356: LD_VAR 0 9
18360: PUSH
18361: LD_VAR 0 14
18365: ARRAY
18366: PUSH
18367: LD_INT 29
18369: EQUAL
18370: PUSH
18371: LD_VAR 0 9
18375: PUSH
18376: LD_VAR 0 14
18380: ARRAY
18381: PUSH
18382: LD_INT 28
18384: EQUAL
18385: OR
18386: PUSH
18387: LD_VAR 0 9
18391: PUSH
18392: LD_VAR 0 14
18396: ARRAY
18397: PUSH
18398: LD_INT 27
18400: EQUAL
18401: OR
18402: PUSH
18403: LD_VAR 0 9
18407: PUSH
18408: LD_VAR 0 14
18412: ARRAY
18413: PUSH
18414: LD_INT 26
18416: EQUAL
18417: OR
18418: PUSH
18419: LD_VAR 0 9
18423: PUSH
18424: LD_VAR 0 14
18428: ARRAY
18429: PUSH
18430: LD_INT 25
18432: EQUAL
18433: OR
18434: IFFALSE 18471
// begin arChassisTab = [ 14 ] ;
18436: LD_ADDR_VAR 0 18
18440: PUSH
18441: LD_INT 14
18443: PUSH
18444: EMPTY
18445: LIST
18446: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18447: LD_ADDR_OWVAR 37
18451: PUSH
18452: LD_VAR 0 18
18456: PUSH
18457: LD_INT 1
18459: PPUSH
18460: LD_VAR 0 18
18464: PPUSH
18465: CALL_OW 12
18469: ARRAY
18470: ST_TO_ADDR
// end ; end ;
18471: GO 18254
18473: POP
18474: POP
// veh = CreateVehicle ;
18475: LD_ADDR_VAR 0 16
18479: PUSH
18480: CALL_OW 45
18484: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18485: LD_VAR 0 16
18489: PPUSH
18490: LD_VAR 0 1
18494: PPUSH
18495: LD_INT 0
18497: PPUSH
18498: CALL_OW 49
// if vc_control = 1 then
18502: LD_OWVAR 38
18506: PUSH
18507: LD_INT 1
18509: EQUAL
18510: IFFALSE 18567
// begin hc_gallery =  ;
18512: LD_ADDR_OWVAR 33
18516: PUSH
18517: LD_STRING 
18519: ST_TO_ADDR
// hc_name =  ;
18520: LD_ADDR_OWVAR 26
18524: PUSH
18525: LD_STRING 
18527: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18528: LD_INT 0
18530: PPUSH
18531: LD_INT 3
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 380
// un = CreateHuman ;
18543: LD_ADDR_VAR 0 15
18547: PUSH
18548: CALL_OW 44
18552: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18553: LD_VAR 0 15
18557: PPUSH
18558: LD_VAR 0 16
18562: PPUSH
18563: CALL_OW 52
// end ; i = i + 1 ;
18567: LD_ADDR_VAR 0 13
18571: PUSH
18572: LD_VAR 0 13
18576: PUSH
18577: LD_INT 1
18579: PLUS
18580: ST_TO_ADDR
// end ; if nation = 3 then
18581: LD_VAR 0 5
18585: PUSH
18586: LD_INT 3
18588: EQUAL
18589: IFFALSE 18995
// begin uc_side = side ;
18591: LD_ADDR_OWVAR 20
18595: PUSH
18596: LD_VAR 0 2
18600: ST_TO_ADDR
// uc_nation = nation ;
18601: LD_ADDR_OWVAR 21
18605: PUSH
18606: LD_VAR 0 5
18610: ST_TO_ADDR
// vc_engine = vehengine ;
18611: LD_ADDR_OWVAR 39
18615: PUSH
18616: LD_VAR 0 6
18620: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18621: LD_ADDR_OWVAR 38
18625: PUSH
18626: LD_VAR 0 7
18630: PUSH
18631: LD_INT 1
18633: PPUSH
18634: LD_VAR 0 7
18638: PPUSH
18639: CALL_OW 12
18643: ARRAY
18644: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18645: LD_ADDR_OWVAR 40
18649: PUSH
18650: LD_VAR 0 8
18654: PUSH
18655: LD_INT 1
18657: PPUSH
18658: LD_VAR 0 8
18662: PPUSH
18663: CALL_OW 12
18667: ARRAY
18668: ST_TO_ADDR
// for j = 1 to RuWeapons do
18669: LD_ADDR_VAR 0 14
18673: PUSH
18674: DOUBLE
18675: LD_INT 1
18677: DEC
18678: ST_TO_ADDR
18679: LD_VAR 0 8
18683: PUSH
18684: FOR_TO
18685: IFFALSE 18887
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18687: LD_VAR 0 8
18691: PUSH
18692: LD_VAR 0 14
18696: ARRAY
18697: PUSH
18698: LD_INT 42
18700: EQUAL
18701: PUSH
18702: LD_VAR 0 8
18706: PUSH
18707: LD_VAR 0 14
18711: ARRAY
18712: PUSH
18713: LD_INT 43
18715: EQUAL
18716: OR
18717: PUSH
18718: LD_VAR 0 8
18722: PUSH
18723: LD_VAR 0 14
18727: ARRAY
18728: PUSH
18729: LD_INT 44
18731: EQUAL
18732: OR
18733: PUSH
18734: LD_VAR 0 8
18738: PUSH
18739: LD_VAR 0 14
18743: ARRAY
18744: PUSH
18745: LD_INT 45
18747: EQUAL
18748: OR
18749: PUSH
18750: LD_VAR 0 8
18754: PUSH
18755: LD_VAR 0 14
18759: ARRAY
18760: PUSH
18761: LD_INT 49
18763: EQUAL
18764: OR
18765: IFFALSE 18814
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18767: LD_ADDR_VAR 0 17
18771: PUSH
18772: LD_INT 21
18774: PUSH
18775: LD_INT 22
18777: PUSH
18778: LD_INT 23
18780: PUSH
18781: LD_INT 24
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18790: LD_ADDR_OWVAR 37
18794: PUSH
18795: LD_VAR 0 17
18799: PUSH
18800: LD_INT 1
18802: PPUSH
18803: LD_VAR 0 17
18807: PPUSH
18808: CALL_OW 12
18812: ARRAY
18813: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18814: LD_VAR 0 8
18818: PUSH
18819: LD_VAR 0 14
18823: ARRAY
18824: PUSH
18825: LD_INT 46
18827: EQUAL
18828: PUSH
18829: LD_VAR 0 8
18833: PUSH
18834: LD_VAR 0 14
18838: ARRAY
18839: PUSH
18840: LD_INT 47
18842: EQUAL
18843: OR
18844: IFFALSE 18885
// begin ruChassisTab = [ 23 , 24 ] ;
18846: LD_ADDR_VAR 0 17
18850: PUSH
18851: LD_INT 23
18853: PUSH
18854: LD_INT 24
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18861: LD_ADDR_OWVAR 37
18865: PUSH
18866: LD_VAR 0 17
18870: PUSH
18871: LD_INT 1
18873: PPUSH
18874: LD_VAR 0 17
18878: PPUSH
18879: CALL_OW 12
18883: ARRAY
18884: ST_TO_ADDR
// end ; end ;
18885: GO 18684
18887: POP
18888: POP
// veh = CreateVehicle ;
18889: LD_ADDR_VAR 0 16
18893: PUSH
18894: CALL_OW 45
18898: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18899: LD_VAR 0 16
18903: PPUSH
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_INT 0
18911: PPUSH
18912: CALL_OW 49
// if vc_control = 1 then
18916: LD_OWVAR 38
18920: PUSH
18921: LD_INT 1
18923: EQUAL
18924: IFFALSE 18981
// begin hc_gallery =  ;
18926: LD_ADDR_OWVAR 33
18930: PUSH
18931: LD_STRING 
18933: ST_TO_ADDR
// hc_name =  ;
18934: LD_ADDR_OWVAR 26
18938: PUSH
18939: LD_STRING 
18941: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18942: LD_INT 0
18944: PPUSH
18945: LD_INT 3
18947: PPUSH
18948: LD_VAR 0 4
18952: PPUSH
18953: CALL_OW 380
// un = CreateHuman ;
18957: LD_ADDR_VAR 0 15
18961: PUSH
18962: CALL_OW 44
18966: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18967: LD_VAR 0 15
18971: PPUSH
18972: LD_VAR 0 16
18976: PPUSH
18977: CALL_OW 52
// end ; i = i + 1 ;
18981: LD_ADDR_VAR 0 13
18985: PUSH
18986: LD_VAR 0 13
18990: PUSH
18991: LD_INT 1
18993: PLUS
18994: ST_TO_ADDR
// end ; until i = vehCount ;
18995: LD_VAR 0 13
18999: PUSH
19000: LD_VAR 0 3
19004: EQUAL
19005: IFFALSE 17631
// repeat wait ( 0 0$1 ) ;
19007: LD_INT 35
19009: PPUSH
19010: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
19014: LD_ADDR_VAR 0 20
19018: PUSH
19019: LD_INT 22
19021: PUSH
19022: LD_VAR 0 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 21
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 24
19043: PUSH
19044: LD_INT 650
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: PPUSH
19056: CALL_OW 69
19060: ST_TO_ADDR
// if vehicleOK_list > 0 then
19061: LD_VAR 0 20
19065: PUSH
19066: LD_INT 0
19068: GREATER
19069: IFFALSE 19260
// begin for i in vehicleOK_list do
19071: LD_ADDR_VAR 0 13
19075: PUSH
19076: LD_VAR 0 20
19080: PUSH
19081: FOR_IN
19082: IFFALSE 19258
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19084: LD_ADDR_VAR 0 21
19088: PUSH
19089: LD_INT 22
19091: PUSH
19092: LD_VAR 0 11
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: PPUSH
19106: LD_VAR 0 13
19110: PPUSH
19111: CALL_OW 74
19115: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19116: LD_ADDR_VAR 0 22
19120: PUSH
19121: LD_INT 22
19123: PUSH
19124: LD_VAR 0 11
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 59
19138: PUSH
19139: EMPTY
19140: LIST
19141: PUSH
19142: LD_INT 21
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 21
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: PPUSH
19175: CALL_OW 69
19179: PPUSH
19180: LD_VAR 0 13
19184: PPUSH
19185: CALL_OW 74
19189: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19190: LD_VAR 0 13
19194: PPUSH
19195: LD_VAR 0 21
19199: PPUSH
19200: CALL_OW 296
19204: PUSH
19205: LD_INT 8
19207: PLUS
19208: PUSH
19209: LD_VAR 0 13
19213: PPUSH
19214: LD_VAR 0 22
19218: PPUSH
19219: CALL_OW 296
19223: LESS
19224: IFFALSE 19242
// begin ComAttackUnit ( i , target1 ) ;
19226: LD_VAR 0 13
19230: PPUSH
19231: LD_VAR 0 21
19235: PPUSH
19236: CALL_OW 115
// end else
19240: GO 19256
// begin ComAttackUnit ( i , target2 ) ;
19242: LD_VAR 0 13
19246: PPUSH
19247: LD_VAR 0 22
19251: PPUSH
19252: CALL_OW 115
// end ; end ;
19256: GO 19081
19258: POP
19259: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19260: LD_INT 22
19262: PUSH
19263: LD_VAR 0 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: PUSH
19291: LD_INT 0
19293: EQUAL
19294: IFFALSE 19007
// end ;
19296: LD_VAR 0 12
19300: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19301: LD_INT 0
19303: PPUSH
19304: PPUSH
19305: PPUSH
19306: PPUSH
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
19311: PPUSH
19312: PPUSH
19313: PPUSH
// for i = 1 to soldierCount do
19314: LD_ADDR_VAR 0 13
19318: PUSH
19319: DOUBLE
19320: LD_INT 1
19322: DEC
19323: ST_TO_ADDR
19324: LD_VAR 0 3
19328: PUSH
19329: FOR_TO
19330: IFFALSE 19412
// begin uc_side = side ;
19332: LD_ADDR_OWVAR 20
19336: PUSH
19337: LD_VAR 0 1
19341: ST_TO_ADDR
// uc_nation = nation ;
19342: LD_ADDR_OWVAR 21
19346: PUSH
19347: LD_VAR 0 2
19351: ST_TO_ADDR
// hc_name =  ;
19352: LD_ADDR_OWVAR 26
19356: PUSH
19357: LD_STRING 
19359: ST_TO_ADDR
// hc_gallery =  ;
19360: LD_ADDR_OWVAR 33
19364: PUSH
19365: LD_STRING 
19367: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19368: LD_INT 0
19370: PPUSH
19371: LD_INT 1
19373: PPUSH
19374: LD_VAR 0 8
19378: PPUSH
19379: CALL_OW 380
// un = CreateHuman ;
19383: LD_ADDR_VAR 0 15
19387: PUSH
19388: CALL_OW 44
19392: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19393: LD_VAR 0 15
19397: PPUSH
19398: LD_VAR 0 9
19402: PPUSH
19403: LD_INT 0
19405: PPUSH
19406: CALL_OW 49
// end ;
19410: GO 19329
19412: POP
19413: POP
// for i = 1 to sniperCount do
19414: LD_ADDR_VAR 0 13
19418: PUSH
19419: DOUBLE
19420: LD_INT 1
19422: DEC
19423: ST_TO_ADDR
19424: LD_VAR 0 4
19428: PUSH
19429: FOR_TO
19430: IFFALSE 19512
// begin uc_side = side ;
19432: LD_ADDR_OWVAR 20
19436: PUSH
19437: LD_VAR 0 1
19441: ST_TO_ADDR
// uc_nation = nation ;
19442: LD_ADDR_OWVAR 21
19446: PUSH
19447: LD_VAR 0 2
19451: ST_TO_ADDR
// hc_name =  ;
19452: LD_ADDR_OWVAR 26
19456: PUSH
19457: LD_STRING 
19459: ST_TO_ADDR
// hc_gallery =  ;
19460: LD_ADDR_OWVAR 33
19464: PUSH
19465: LD_STRING 
19467: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19468: LD_INT 0
19470: PPUSH
19471: LD_INT 5
19473: PPUSH
19474: LD_VAR 0 8
19478: PPUSH
19479: CALL_OW 380
// un = CreateHuman ;
19483: LD_ADDR_VAR 0 15
19487: PUSH
19488: CALL_OW 44
19492: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19493: LD_VAR 0 15
19497: PPUSH
19498: LD_VAR 0 9
19502: PPUSH
19503: LD_INT 0
19505: PPUSH
19506: CALL_OW 49
// end ;
19510: GO 19429
19512: POP
19513: POP
// for i = 1 to bazookCount do
19514: LD_ADDR_VAR 0 13
19518: PUSH
19519: DOUBLE
19520: LD_INT 1
19522: DEC
19523: ST_TO_ADDR
19524: LD_VAR 0 5
19528: PUSH
19529: FOR_TO
19530: IFFALSE 19612
// begin uc_side = side ;
19532: LD_ADDR_OWVAR 20
19536: PUSH
19537: LD_VAR 0 1
19541: ST_TO_ADDR
// uc_nation = nation ;
19542: LD_ADDR_OWVAR 21
19546: PUSH
19547: LD_VAR 0 2
19551: ST_TO_ADDR
// hc_name =  ;
19552: LD_ADDR_OWVAR 26
19556: PUSH
19557: LD_STRING 
19559: ST_TO_ADDR
// hc_gallery =  ;
19560: LD_ADDR_OWVAR 33
19564: PUSH
19565: LD_STRING 
19567: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19568: LD_INT 0
19570: PPUSH
19571: LD_INT 9
19573: PPUSH
19574: LD_VAR 0 8
19578: PPUSH
19579: CALL_OW 380
// un = CreateHuman ;
19583: LD_ADDR_VAR 0 15
19587: PUSH
19588: CALL_OW 44
19592: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19593: LD_VAR 0 15
19597: PPUSH
19598: LD_VAR 0 9
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: CALL_OW 49
// end ;
19610: GO 19529
19612: POP
19613: POP
// for i = 1 to mortalCount do
19614: LD_ADDR_VAR 0 13
19618: PUSH
19619: DOUBLE
19620: LD_INT 1
19622: DEC
19623: ST_TO_ADDR
19624: LD_VAR 0 6
19628: PUSH
19629: FOR_TO
19630: IFFALSE 19712
// begin uc_side = side ;
19632: LD_ADDR_OWVAR 20
19636: PUSH
19637: LD_VAR 0 1
19641: ST_TO_ADDR
// uc_nation = nation ;
19642: LD_ADDR_OWVAR 21
19646: PUSH
19647: LD_VAR 0 2
19651: ST_TO_ADDR
// hc_name =  ;
19652: LD_ADDR_OWVAR 26
19656: PUSH
19657: LD_STRING 
19659: ST_TO_ADDR
// hc_gallery =  ;
19660: LD_ADDR_OWVAR 33
19664: PUSH
19665: LD_STRING 
19667: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19668: LD_INT 0
19670: PPUSH
19671: LD_INT 8
19673: PPUSH
19674: LD_VAR 0 8
19678: PPUSH
19679: CALL_OW 380
// un = CreateHuman ;
19683: LD_ADDR_VAR 0 15
19687: PUSH
19688: CALL_OW 44
19692: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19693: LD_VAR 0 15
19697: PPUSH
19698: LD_VAR 0 9
19702: PPUSH
19703: LD_INT 0
19705: PPUSH
19706: CALL_OW 49
// end ;
19710: GO 19629
19712: POP
19713: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19714: LD_ADDR_VAR 0 18
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_VAR 0 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: PUSH
19734: LD_INT 25
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 25
19746: PUSH
19747: LD_INT 5
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 25
19756: PUSH
19757: LD_INT 8
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 25
19766: PUSH
19767: LD_INT 9
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19790: LD_ADDR_VAR 0 17
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_VAR 0 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 25
19809: PUSH
19810: LD_INT 4
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PPUSH
19821: CALL_OW 69
19825: ST_TO_ADDR
// for i in medic_list do
19826: LD_ADDR_VAR 0 13
19830: PUSH
19831: LD_VAR 0 17
19835: PUSH
19836: FOR_IN
19837: IFFALSE 19855
// ComMoveToArea ( i , healArea ) ;
19839: LD_VAR 0 13
19843: PPUSH
19844: LD_VAR 0 10
19848: PPUSH
19849: CALL_OW 113
19853: GO 19836
19855: POP
19856: POP
// repeat wait ( 0 0$1 ) ;
19857: LD_INT 35
19859: PPUSH
19860: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19864: LD_ADDR_VAR 0 16
19868: PUSH
19869: LD_INT 22
19871: PUSH
19872: LD_VAR 0 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: LD_INT 3
19886: PUSH
19887: LD_INT 24
19889: PUSH
19890: LD_INT 550
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 24
19903: PUSH
19904: LD_INT 250
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PPUSH
19920: CALL_OW 69
19924: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19925: LD_ADDR_VAR 0 18
19929: PUSH
19930: LD_INT 22
19932: PUSH
19933: LD_VAR 0 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 2
19944: PUSH
19945: LD_INT 25
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 25
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 25
19967: PUSH
19968: LD_INT 8
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 25
19977: PUSH
19978: LD_INT 9
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 24
19994: PUSH
19995: LD_INT 1000
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: PPUSH
20007: CALL_OW 69
20011: ST_TO_ADDR
// if medicCount > 0 then
20012: LD_VAR 0 7
20016: PUSH
20017: LD_INT 0
20019: GREATER
20020: IFFALSE 20094
// begin if damageUnit_list > 0 then
20022: LD_VAR 0 16
20026: PUSH
20027: LD_INT 0
20029: GREATER
20030: IFFALSE 20094
// begin for i in damageUnit_list do
20032: LD_ADDR_VAR 0 13
20036: PUSH
20037: LD_VAR 0 16
20041: PUSH
20042: FOR_IN
20043: IFFALSE 20092
// begin ComMoveToArea ( i , healArea ) ;
20045: LD_VAR 0 13
20049: PPUSH
20050: LD_VAR 0 10
20054: PPUSH
20055: CALL_OW 113
// for j in medic_list do
20059: LD_ADDR_VAR 0 14
20063: PUSH
20064: LD_VAR 0 17
20068: PUSH
20069: FOR_IN
20070: IFFALSE 20088
// AddComHeal ( j , i ) ;
20072: LD_VAR 0 14
20076: PPUSH
20077: LD_VAR 0 13
20081: PPUSH
20082: CALL_OW 188
20086: GO 20069
20088: POP
20089: POP
// end ;
20090: GO 20042
20092: POP
20093: POP
// end ; end ; for i in soldiersOK_list do
20094: LD_ADDR_VAR 0 13
20098: PUSH
20099: LD_VAR 0 18
20103: PUSH
20104: FOR_IN
20105: IFFALSE 20281
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20107: LD_ADDR_VAR 0 21
20111: PUSH
20112: LD_INT 22
20114: PUSH
20115: LD_VAR 0 11
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PPUSH
20124: CALL_OW 69
20128: PPUSH
20129: LD_VAR 0 13
20133: PPUSH
20134: CALL_OW 74
20138: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20139: LD_ADDR_VAR 0 22
20143: PUSH
20144: LD_INT 22
20146: PUSH
20147: LD_VAR 0 11
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 59
20161: PUSH
20162: EMPTY
20163: LIST
20164: PUSH
20165: LD_INT 21
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 21
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: PPUSH
20198: CALL_OW 69
20202: PPUSH
20203: LD_VAR 0 13
20207: PPUSH
20208: CALL_OW 74
20212: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20213: LD_VAR 0 13
20217: PPUSH
20218: LD_VAR 0 21
20222: PPUSH
20223: CALL_OW 296
20227: PUSH
20228: LD_INT 8
20230: PLUS
20231: PUSH
20232: LD_VAR 0 13
20236: PPUSH
20237: LD_VAR 0 22
20241: PPUSH
20242: CALL_OW 296
20246: LESS
20247: IFFALSE 20265
// begin ComAttackUnit ( i , target1 ) ;
20249: LD_VAR 0 13
20253: PPUSH
20254: LD_VAR 0 21
20258: PPUSH
20259: CALL_OW 115
// end else
20263: GO 20279
// begin ComAttackUnit ( i , target2 ) ;
20265: LD_VAR 0 13
20269: PPUSH
20270: LD_VAR 0 22
20274: PPUSH
20275: CALL_OW 115
// end ; end ;
20279: GO 20104
20281: POP
20282: POP
// for i in soldiersOK_list do
20283: LD_ADDR_VAR 0 13
20287: PUSH
20288: LD_VAR 0 18
20292: PUSH
20293: FOR_IN
20294: IFFALSE 20470
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20296: LD_ADDR_VAR 0 21
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_VAR 0 11
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: PPUSH
20318: LD_VAR 0 13
20322: PPUSH
20323: CALL_OW 74
20327: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20328: LD_ADDR_VAR 0 22
20332: PUSH
20333: LD_INT 22
20335: PUSH
20336: LD_VAR 0 11
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 59
20350: PUSH
20351: EMPTY
20352: LIST
20353: PUSH
20354: LD_INT 21
20356: PUSH
20357: LD_INT 1
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 21
20366: PUSH
20367: LD_INT 2
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: PPUSH
20387: CALL_OW 69
20391: PPUSH
20392: LD_VAR 0 13
20396: PPUSH
20397: CALL_OW 74
20401: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20402: LD_VAR 0 13
20406: PPUSH
20407: LD_VAR 0 21
20411: PPUSH
20412: CALL_OW 296
20416: PUSH
20417: LD_INT 8
20419: PLUS
20420: PUSH
20421: LD_VAR 0 13
20425: PPUSH
20426: LD_VAR 0 22
20430: PPUSH
20431: CALL_OW 296
20435: LESS
20436: IFFALSE 20454
// begin ComAttackUnit ( i , target1 ) ;
20438: LD_VAR 0 13
20442: PPUSH
20443: LD_VAR 0 21
20447: PPUSH
20448: CALL_OW 115
// end else
20452: GO 20468
// begin ComAttackUnit ( i , target2 ) ;
20454: LD_VAR 0 13
20458: PPUSH
20459: LD_VAR 0 22
20463: PPUSH
20464: CALL_OW 115
// end ; end ;
20468: GO 20293
20470: POP
20471: POP
// until soldiersOK_list = [ ] ;
20472: LD_VAR 0 18
20476: PUSH
20477: EMPTY
20478: EQUAL
20479: IFFALSE 19857
// end ;
20481: LD_VAR 0 12
20485: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20486: LD_INT 0
20488: PPUSH
20489: PPUSH
20490: PPUSH
20491: PPUSH
20492: PPUSH
20493: PPUSH
20494: PPUSH
// repeat wait ( 0 0$1 ) ;
20495: LD_INT 35
20497: PPUSH
20498: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20502: LD_ADDR_VAR 0 7
20506: PUSH
20507: LD_INT 22
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 25
20519: PUSH
20520: LD_INT 4
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 3
20529: PUSH
20530: LD_INT 60
20532: PUSH
20533: EMPTY
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 69
20549: ST_TO_ADDR
// if not tmp then
20550: LD_VAR 0 7
20554: NOT
20555: IFFALSE 20559
// continue ;
20557: GO 20495
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20559: LD_ADDR_VAR 0 3
20563: PUSH
20564: LD_INT 5
20566: PPUSH
20567: LD_INT 22
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 25
20579: PUSH
20580: LD_INT 12
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PPUSH
20591: CALL_OW 70
20595: PUSH
20596: FOR_IN
20597: IFFALSE 20630
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20599: LD_VAR 0 7
20603: PPUSH
20604: LD_VAR 0 3
20608: PPUSH
20609: CALL_OW 250
20613: PPUSH
20614: LD_VAR 0 3
20618: PPUSH
20619: CALL_OW 251
20623: PPUSH
20624: CALL_OW 131
20628: GO 20596
20630: POP
20631: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20632: LD_INT 22
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 25
20644: PUSH
20645: LD_INT 4
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PPUSH
20656: CALL_OW 69
20660: PUSH
20661: LD_INT 0
20663: EQUAL
20664: PUSH
20665: LD_INT 5
20667: PPUSH
20668: LD_INT 22
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 25
20680: PUSH
20681: LD_INT 12
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PPUSH
20692: CALL_OW 70
20696: PUSH
20697: LD_INT 2
20699: LESS
20700: OR
20701: PUSH
20702: LD_OWVAR 1
20706: PUSH
20707: LD_INT 7000
20709: GREATEREQUAL
20710: OR
20711: IFFALSE 20495
// repeat wait ( 0 0$1 ) ;
20713: LD_INT 35
20715: PPUSH
20716: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20720: LD_ADDR_VAR 0 5
20724: PUSH
20725: LD_INT 22
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 30
20737: PUSH
20738: LD_INT 5
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PPUSH
20749: CALL_OW 69
20753: ST_TO_ADDR
// until arm ;
20754: LD_VAR 0 5
20758: IFFALSE 20713
// wait ( 0 0$25 ) ;
20760: LD_INT 875
20762: PPUSH
20763: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20767: LD_ADDR_VAR 0 6
20771: PUSH
20772: LD_INT 22
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: LD_INT 30
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 30
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 69
20818: ST_TO_ADDR
// j := 0 ;
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20827: LD_ADDR_VAR 0 2
20831: PUSH
20832: LD_INT 22
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 25
20844: PUSH
20845: LD_INT 12
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PPUSH
20856: CALL_OW 69
20860: PUSH
20861: FOR_IN
20862: IFFALSE 20949
// begin ComMoveXY ( i , 63 , 16 ) ;
20864: LD_VAR 0 2
20868: PPUSH
20869: LD_INT 63
20871: PPUSH
20872: LD_INT 16
20874: PPUSH
20875: CALL_OW 111
// j := j + 1 ;
20879: LD_ADDR_VAR 0 3
20883: PUSH
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 1
20891: PLUS
20892: ST_TO_ADDR
// if j < 5 then
20893: LD_VAR 0 3
20897: PUSH
20898: LD_INT 5
20900: LESS
20901: IFFALSE 20919
// b := arm [ 1 ] else
20903: LD_ADDR_VAR 0 4
20907: PUSH
20908: LD_VAR 0 5
20912: PUSH
20913: LD_INT 1
20915: ARRAY
20916: ST_TO_ADDR
20917: GO 20933
// b := dep [ 1 ] ;
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: LD_VAR 0 6
20928: PUSH
20929: LD_INT 1
20931: ARRAY
20932: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20933: LD_VAR 0 2
20937: PPUSH
20938: LD_VAR 0 4
20942: PPUSH
20943: CALL_OW 180
// end ;
20947: GO 20861
20949: POP
20950: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20951: LD_ADDR_VAR 0 2
20955: PUSH
20956: LD_INT 22
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 25
20968: PUSH
20969: LD_INT 4
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 69
20984: PUSH
20985: FOR_IN
20986: IFFALSE 21032
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20988: LD_VAR 0 2
20992: PPUSH
20993: LD_INT 22
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 30
21005: PUSH
21006: LD_INT 8
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PPUSH
21017: CALL_OW 69
21021: PUSH
21022: LD_INT 1
21024: ARRAY
21025: PPUSH
21026: CALL_OW 120
21030: GO 20985
21032: POP
21033: POP
// end ;
21034: LD_VAR 0 1
21038: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
21039: LD_INT 0
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
21050: LD_INT 22
21052: PUSH
21053: LD_VAR 0 1
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 21
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 69
21080: PUSH
21081: LD_VAR 0 3
21085: LESSEQUAL
21086: IFFALSE 21230
// for i = 1 to vehCount do
21088: LD_ADDR_VAR 0 10
21092: PUSH
21093: DOUBLE
21094: LD_INT 1
21096: DEC
21097: ST_TO_ADDR
21098: LD_VAR 0 3
21102: PUSH
21103: FOR_TO
21104: IFFALSE 21228
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21106: LD_ADDR_VAR 0 12
21110: PUSH
21111: LD_VAR 0 5
21115: PUSH
21116: LD_INT 1
21118: PPUSH
21119: LD_VAR 0 5
21123: PPUSH
21124: CALL_OW 12
21128: ARRAY
21129: ST_TO_ADDR
// if randWeapon = 46 then
21130: LD_VAR 0 12
21134: PUSH
21135: LD_INT 46
21137: EQUAL
21138: IFFALSE 21183
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21140: LD_VAR 0 2
21144: PPUSH
21145: LD_INT 24
21147: PPUSH
21148: LD_VAR 0 6
21152: PPUSH
21153: LD_VAR 0 7
21157: PUSH
21158: LD_INT 1
21160: PPUSH
21161: LD_VAR 0 7
21165: PPUSH
21166: CALL_OW 12
21170: ARRAY
21171: PPUSH
21172: LD_VAR 0 12
21176: PPUSH
21177: CALL_OW 185
21181: GO 21226
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21183: LD_VAR 0 2
21187: PPUSH
21188: LD_VAR 0 8
21192: PPUSH
21193: LD_VAR 0 6
21197: PPUSH
21198: LD_VAR 0 7
21202: PUSH
21203: LD_INT 1
21205: PPUSH
21206: LD_VAR 0 7
21210: PPUSH
21211: CALL_OW 12
21215: ARRAY
21216: PPUSH
21217: LD_VAR 0 12
21221: PPUSH
21222: CALL_OW 185
// end ;
21226: GO 21103
21228: POP
21229: POP
// repeat wait ( 0 0$1 ) ;
21230: LD_INT 35
21232: PPUSH
21233: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21237: LD_INT 22
21239: PUSH
21240: LD_VAR 0 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 21
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 24
21261: PUSH
21262: LD_INT 250
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: PPUSH
21274: CALL_OW 69
21278: PUSH
21279: LD_VAR 0 3
21283: GREATEREQUAL
21284: IFFALSE 21230
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21286: LD_INT 22
21288: PUSH
21289: LD_VAR 0 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 21
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 24
21310: PUSH
21311: LD_INT 250
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: PPUSH
21323: CALL_OW 69
21327: PUSH
21328: LD_VAR 0 3
21332: GREATEREQUAL
21333: IFFALSE 21676
// begin repeat begin wait ( 0 0$1 ) ;
21335: LD_INT 35
21337: PPUSH
21338: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21342: LD_INT 22
21344: PUSH
21345: LD_VAR 0 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 21
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 24
21366: PUSH
21367: LD_INT 651
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: PPUSH
21379: CALL_OW 69
21383: PUSH
21384: LD_INT 0
21386: GREATER
21387: IFFALSE 21615
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21389: LD_ADDR_VAR 0 10
21393: PUSH
21394: LD_INT 22
21396: PUSH
21397: LD_VAR 0 1
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 21
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 24
21418: PUSH
21419: LD_INT 651
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: PPUSH
21431: CALL_OW 69
21435: PUSH
21436: FOR_IN
21437: IFFALSE 21613
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21439: LD_ADDR_VAR 0 16
21443: PUSH
21444: LD_INT 22
21446: PUSH
21447: LD_VAR 0 4
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: PPUSH
21461: LD_VAR 0 10
21465: PPUSH
21466: CALL_OW 74
21470: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21471: LD_ADDR_VAR 0 17
21475: PUSH
21476: LD_INT 22
21478: PUSH
21479: LD_VAR 0 4
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 59
21493: PUSH
21494: EMPTY
21495: LIST
21496: PUSH
21497: LD_INT 21
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: PPUSH
21530: CALL_OW 69
21534: PPUSH
21535: LD_VAR 0 10
21539: PPUSH
21540: CALL_OW 74
21544: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21545: LD_VAR 0 10
21549: PPUSH
21550: LD_VAR 0 16
21554: PPUSH
21555: CALL_OW 296
21559: PUSH
21560: LD_INT 8
21562: PLUS
21563: PUSH
21564: LD_VAR 0 10
21568: PPUSH
21569: LD_VAR 0 17
21573: PPUSH
21574: CALL_OW 296
21578: LESS
21579: IFFALSE 21597
// begin ComAttackUnit ( i , target1 ) ;
21581: LD_VAR 0 10
21585: PPUSH
21586: LD_VAR 0 16
21590: PPUSH
21591: CALL_OW 115
// end else
21595: GO 21611
// begin ComAttackUnit ( i , target2 ) ;
21597: LD_VAR 0 10
21601: PPUSH
21602: LD_VAR 0 17
21606: PPUSH
21607: CALL_OW 115
// end ; end ;
21611: GO 21436
21613: POP
21614: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21615: LD_INT 22
21617: PUSH
21618: LD_VAR 0 1
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 21
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PPUSH
21641: CALL_OW 69
21645: PUSH
21646: LD_INT 0
21648: EQUAL
21649: PUSH
21650: LD_INT 22
21652: PUSH
21653: LD_VAR 0 4
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: PUSH
21670: LD_INT 0
21672: EQUAL
21673: OR
21674: IFFALSE 21335
// end ; end ;
21676: LD_VAR 0 9
21680: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21681: LD_INT 0
21683: PPUSH
21684: PPUSH
21685: PPUSH
21686: PPUSH
// r := 100 ;
21687: LD_ADDR_VAR 0 5
21691: PUSH
21692: LD_INT 100
21694: ST_TO_ADDR
// x := 0 ;
21695: LD_ADDR_VAR 0 6
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// while ( x < n ) do
21703: LD_VAR 0 6
21707: PUSH
21708: LD_VAR 0 2
21712: LESS
21713: IFFALSE 22000
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21715: LD_ADDR_VAR 0 4
21719: PUSH
21720: DOUBLE
21721: LD_INT 1
21723: DEC
21724: ST_TO_ADDR
21725: LD_VAR 0 1
21729: PPUSH
21730: LD_INT 0
21732: PPUSH
21733: CALL_OW 517
21737: PUSH
21738: LD_INT 1
21740: ARRAY
21741: PUSH
21742: FOR_TO
21743: IFFALSE 21996
// begin if r > 50 then
21745: LD_VAR 0 5
21749: PUSH
21750: LD_INT 50
21752: GREATER
21753: IFFALSE 21972
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21755: LD_VAR 0 1
21759: PPUSH
21760: LD_INT 0
21762: PPUSH
21763: CALL_OW 517
21767: PUSH
21768: LD_INT 1
21770: ARRAY
21771: PUSH
21772: LD_VAR 0 4
21776: ARRAY
21777: PPUSH
21778: LD_VAR 0 1
21782: PPUSH
21783: LD_INT 0
21785: PPUSH
21786: CALL_OW 517
21790: PUSH
21791: LD_INT 2
21793: ARRAY
21794: PUSH
21795: LD_VAR 0 4
21799: ARRAY
21800: PPUSH
21801: CALL_OW 458
21805: NOT
21806: IFFALSE 21956
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 0
21815: PPUSH
21816: CALL_OW 517
21820: PUSH
21821: LD_INT 1
21823: ARRAY
21824: PUSH
21825: LD_VAR 0 4
21829: ARRAY
21830: PPUSH
21831: LD_VAR 0 1
21835: PPUSH
21836: LD_INT 0
21838: PPUSH
21839: CALL_OW 517
21843: PUSH
21844: LD_INT 2
21846: ARRAY
21847: PUSH
21848: LD_VAR 0 4
21852: ARRAY
21853: PPUSH
21854: LD_INT 5
21856: PPUSH
21857: LD_INT 0
21859: PPUSH
21860: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21864: LD_ADDR_EXP 52
21868: PUSH
21869: LD_EXP 52
21873: PPUSH
21874: LD_INT 1
21876: PPUSH
21877: LD_VAR 0 1
21881: PPUSH
21882: LD_INT 0
21884: PPUSH
21885: CALL_OW 517
21889: PUSH
21890: LD_INT 1
21892: ARRAY
21893: PUSH
21894: LD_VAR 0 4
21898: ARRAY
21899: PUSH
21900: LD_VAR 0 1
21904: PPUSH
21905: LD_INT 0
21907: PPUSH
21908: CALL_OW 517
21912: PUSH
21913: LD_INT 2
21915: ARRAY
21916: PUSH
21917: LD_VAR 0 4
21921: ARRAY
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PPUSH
21927: CALL_OW 2
21931: ST_TO_ADDR
// r := 0 ;
21932: LD_ADDR_VAR 0 5
21936: PUSH
21937: LD_INT 0
21939: ST_TO_ADDR
// x := x + 1 ;
21940: LD_ADDR_VAR 0 6
21944: PUSH
21945: LD_VAR 0 6
21949: PUSH
21950: LD_INT 1
21952: PLUS
21953: ST_TO_ADDR
// end else
21954: GO 21970
// r := r + 35 ;
21956: LD_ADDR_VAR 0 5
21960: PUSH
21961: LD_VAR 0 5
21965: PUSH
21966: LD_INT 35
21968: PLUS
21969: ST_TO_ADDR
// end else
21970: GO 21994
// r := r + rand ( 10 , 25 ) ;
21972: LD_ADDR_VAR 0 5
21976: PUSH
21977: LD_VAR 0 5
21981: PUSH
21982: LD_INT 10
21984: PPUSH
21985: LD_INT 25
21987: PPUSH
21988: CALL_OW 12
21992: PLUS
21993: ST_TO_ADDR
// end ;
21994: GO 21742
21996: POP
21997: POP
21998: GO 21703
// end ; end_of_file
22000: LD_VAR 0 3
22004: RET
// every 0 0$1 trigger russianAI = 1 do
22005: LD_EXP 41
22009: PUSH
22010: LD_INT 1
22012: EQUAL
22013: IFFALSE 22232
22015: GO 22017
22017: DISABLE
// begin enable ;
22018: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
22019: LD_INT 3
22021: PPUSH
22022: LD_EXP 32
22026: PPUSH
22027: CALL 16483 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
22031: LD_INT 3
22033: PPUSH
22034: LD_EXP 44
22038: PPUSH
22039: CALL 16843 0 2
// if ruPossition = 1 then
22043: LD_EXP 43
22047: PUSH
22048: LD_INT 1
22050: EQUAL
22051: IFFALSE 22106
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22053: LD_INT 3
22055: PPUSH
22056: LD_INT 13
22058: PPUSH
22059: LD_INT 10
22061: PPUSH
22062: LD_INT 22
22064: PUSH
22065: LD_INT 3
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 21
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 30
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: PPUSH
22097: CALL_OW 69
22101: PPUSH
22102: CALL 17049 0 4
// if ruPossition = 2 then
22106: LD_EXP 43
22110: PUSH
22111: LD_INT 2
22113: EQUAL
22114: IFFALSE 22169
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22116: LD_INT 3
22118: PPUSH
22119: LD_INT 14
22121: PPUSH
22122: LD_INT 11
22124: PPUSH
22125: LD_INT 22
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 21
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 8
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 69
22164: PPUSH
22165: CALL 17049 0 4
// if ruPossition = 3 then
22169: LD_EXP 43
22173: PUSH
22174: LD_INT 3
22176: EQUAL
22177: IFFALSE 22232
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22179: LD_INT 3
22181: PPUSH
22182: LD_INT 15
22184: PPUSH
22185: LD_INT 12
22187: PPUSH
22188: LD_INT 22
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 21
22200: PUSH
22201: LD_INT 3
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 8
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: PPUSH
22223: CALL_OW 69
22227: PPUSH
22228: CALL 17049 0 4
// end ;
22232: END
// every 0 0$1 do
22233: GO 22235
22235: DISABLE
// begin enable ;
22236: ENABLE
// if ruPossition = 1 then
22237: LD_EXP 43
22241: PUSH
22242: LD_INT 1
22244: EQUAL
22245: IFFALSE 22257
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22247: LD_INT 3
22249: PPUSH
22250: LD_INT 10
22252: PPUSH
22253: CALL 16107 0 2
// if ruPossition = 2 then
22257: LD_EXP 43
22261: PUSH
22262: LD_INT 2
22264: EQUAL
22265: IFFALSE 22277
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22267: LD_INT 3
22269: PPUSH
22270: LD_INT 11
22272: PPUSH
22273: CALL 16107 0 2
// if ruPossition = 3 then
22277: LD_EXP 43
22281: PUSH
22282: LD_INT 3
22284: EQUAL
22285: IFFALSE 22297
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22287: LD_INT 3
22289: PPUSH
22290: LD_INT 12
22292: PPUSH
22293: CALL 16107 0 2
// IntBazooka ( 3 , 1 ) ;
22297: LD_INT 3
22299: PPUSH
22300: LD_INT 1
22302: PPUSH
22303: CALL 14906 0 2
// IntBazooka ( 6 , 1 ) ;
22307: LD_INT 6
22309: PPUSH
22310: LD_INT 1
22312: PPUSH
22313: CALL 14906 0 2
// end ;
22317: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22318: LD_EXP 41
22322: PUSH
22323: LD_INT 1
22325: EQUAL
22326: PUSH
22327: LD_EXP 37
22331: PPUSH
22332: CALL_OW 302
22336: AND
22337: PUSH
22338: LD_EXP 37
22342: PPUSH
22343: CALL_OW 255
22347: PUSH
22348: LD_INT 3
22350: EQUAL
22351: AND
22352: PUSH
22353: LD_INT 22
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 21
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 33
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: PPUSH
22388: CALL_OW 69
22392: PUSH
22393: LD_INT 0
22395: EQUAL
22396: AND
22397: IFFALSE 22605
22399: GO 22401
22401: DISABLE
// begin enable ;
22402: ENABLE
// if Difficulty = 1 then
22403: LD_OWVAR 67
22407: PUSH
22408: LD_INT 1
22410: EQUAL
22411: IFFALSE 22473
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22413: LD_INT 3
22415: PPUSH
22416: LD_EXP 37
22420: PPUSH
22421: LD_INT 5
22423: PPUSH
22424: LD_INT 8
22426: PPUSH
22427: CALL_OW 12
22431: PPUSH
22432: LD_INT 1
22434: PPUSH
22435: LD_INT 43
22437: PUSH
22438: LD_INT 44
22440: PUSH
22441: LD_INT 45
22443: PUSH
22444: LD_INT 46
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: PPUSH
22453: LD_INT 1
22455: PPUSH
22456: LD_INT 3
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PPUSH
22466: LD_INT 22
22468: PPUSH
22469: CALL 21039 0 8
// if Difficulty = 2 then
22473: LD_OWVAR 67
22477: PUSH
22478: LD_INT 2
22480: EQUAL
22481: IFFALSE 22539
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22483: LD_INT 3
22485: PPUSH
22486: LD_EXP 37
22490: PPUSH
22491: LD_INT 6
22493: PPUSH
22494: LD_INT 8
22496: PPUSH
22497: CALL_OW 12
22501: PPUSH
22502: LD_INT 1
22504: PPUSH
22505: LD_INT 44
22507: PUSH
22508: LD_INT 45
22510: PUSH
22511: LD_INT 46
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: PPUSH
22519: LD_INT 1
22521: PPUSH
22522: LD_INT 3
22524: PUSH
22525: LD_INT 3
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PPUSH
22532: LD_INT 22
22534: PPUSH
22535: CALL 21039 0 8
// if Difficulty >= 3 then
22539: LD_OWVAR 67
22543: PUSH
22544: LD_INT 3
22546: GREATEREQUAL
22547: IFFALSE 22605
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22549: LD_INT 3
22551: PPUSH
22552: LD_EXP 37
22556: PPUSH
22557: LD_INT 7
22559: PPUSH
22560: LD_INT 8
22562: PPUSH
22563: CALL_OW 12
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: LD_INT 44
22573: PUSH
22574: LD_INT 45
22576: PUSH
22577: LD_INT 46
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: LIST
22584: PPUSH
22585: LD_INT 1
22587: PPUSH
22588: LD_INT 3
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PPUSH
22598: LD_INT 22
22600: PPUSH
22601: CALL 21039 0 8
// end ;
22605: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22606: LD_EXP 52
22610: PUSH
22611: LD_EXP 51
22615: AND
22616: IFFALSE 22737
22618: GO 22620
22620: DISABLE
22621: LD_INT 0
22623: PPUSH
// begin enable ;
22624: ENABLE
// for i in arabianMines do
22625: LD_ADDR_VAR 0 1
22629: PUSH
22630: LD_EXP 52
22634: PUSH
22635: FOR_IN
22636: IFFALSE 22735
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22638: LD_INT 22
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 92
22650: PUSH
22651: LD_VAR 0 1
22655: PUSH
22656: LD_INT 1
22658: ARRAY
22659: PUSH
22660: LD_VAR 0 1
22664: PUSH
22665: LD_INT 2
22667: ARRAY
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PPUSH
22682: CALL_OW 69
22686: IFFALSE 22733
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22688: LD_VAR 0 1
22692: PUSH
22693: LD_INT 1
22695: ARRAY
22696: PPUSH
22697: LD_VAR 0 1
22701: PUSH
22702: LD_INT 2
22704: ARRAY
22705: PPUSH
22706: LD_INT 5
22708: PPUSH
22709: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22713: LD_ADDR_EXP 52
22717: PUSH
22718: LD_EXP 52
22722: PPUSH
22723: LD_VAR 0 1
22727: PPUSH
22728: CALL_OW 3
22732: ST_TO_ADDR
// end ; end ;
22733: GO 22635
22735: POP
22736: POP
// end ; end_of_file
22737: PPOPN 1
22739: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22740: LD_VAR 0 1
22744: PPUSH
22745: CALL_OW 255
22749: PUSH
22750: LD_INT 4
22752: EQUAL
22753: IFFALSE 22767
// SetBName ( building , epsilon ) ;
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_STRING epsilon
22762: PPUSH
22763: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22767: LD_VAR 0 1
22771: PPUSH
22772: CALL_OW 255
22776: PUSH
22777: LD_INT 1
22779: EQUAL
22780: PUSH
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 266
22790: PUSH
22791: LD_INT 0
22793: EQUAL
22794: AND
22795: IFFALSE 22809
// SetBName ( building , epsilon ) ;
22797: LD_VAR 0 1
22801: PPUSH
22802: LD_STRING epsilon
22804: PPUSH
22805: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22809: LD_VAR 0 1
22813: PPUSH
22814: CALL_OW 255
22818: PUSH
22819: LD_INT 3
22821: EQUAL
22822: PUSH
22823: LD_VAR 0 1
22827: PPUSH
22828: CALL_OW 266
22832: PUSH
22833: LD_INT 0
22835: EQUAL
22836: AND
22837: IFFALSE 22851
// SetBName ( building , chuikov ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_STRING chuikov
22846: PPUSH
22847: CALL_OW 500
// if GetSide ( building ) = 2 then
22851: LD_VAR 0 1
22855: PPUSH
22856: CALL_OW 255
22860: PUSH
22861: LD_INT 2
22863: EQUAL
22864: IFFALSE 22920
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22866: LD_VAR 0 1
22870: PPUSH
22871: CALL_OW 266
22875: PUSH
22876: LD_INT 6
22878: EQUAL
22879: PUSH
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL_OW 266
22889: PUSH
22890: LD_INT 9
22892: EQUAL
22893: OR
22894: IFFALSE 22920
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22896: LD_VAR 0 1
22900: PPUSH
22901: LD_INT 10
22903: PPUSH
22904: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22908: LD_VAR 0 1
22912: PPUSH
22913: LD_INT 11
22915: PPUSH
22916: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 255
22929: PUSH
22930: LD_INT 3
22932: EQUAL
22933: IFFALSE 22967
// begin ruDepotConstructed := true ;
22935: LD_ADDR_EXP 59
22939: PUSH
22940: LD_INT 1
22942: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22943: LD_VAR 0 1
22947: PPUSH
22948: CALL_OW 266
22952: PUSH
22953: LD_INT 2
22955: EQUAL
22956: IFFALSE 22967
// AddComUpgrade ( building ) ;
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 206
// end ; end ;
22967: PPOPN 2
22969: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22974: LD_VAR 0 1
22978: PUSH
22979: LD_INT 22
22981: PUSH
22982: LD_INT 3
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 23
22991: PUSH
22992: LD_INT 3
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 21
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: PPUSH
23014: CALL_OW 69
23018: IN
23019: PUSH
23020: LD_EXP 63
23024: NOT
23025: AND
23026: IFFALSE 23057
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
23028: LD_ADDR_EXP 63
23032: PUSH
23033: LD_VAR 0 1
23037: PPUSH
23038: CALL_OW 250
23042: PUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: CALL_OW 251
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: ST_TO_ADDR
// end ;
23057: PPOPN 3
23059: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
23060: LD_VAR 0 2
23064: PPUSH
23065: CALL_OW 255
23069: PUSH
23070: LD_INT 3
23072: EQUAL
23073: PUSH
23074: LD_EXP 37
23078: PPUSH
23079: CALL_OW 255
23083: PUSH
23084: LD_INT 3
23086: EQUAL
23087: AND
23088: PUSH
23089: LD_EXP 37
23093: PPUSH
23094: CALL_OW 302
23098: AND
23099: IFFALSE 23115
// ComEnterUnit ( human , ruFab ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_EXP 37
23110: PPUSH
23111: CALL_OW 120
// end ;
23115: PPOPN 2
23117: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23124: LD_VAR 0 1
23128: PPUSH
23129: CALL_OW 255
23133: PUSH
23134: LD_INT 1
23136: EQUAL
23137: PUSH
23138: LD_EXP 67
23142: PUSH
23143: LD_INT 0
23145: EQUAL
23146: AND
23147: IFFALSE 23349
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23149: LD_VAR 0 1
23153: PPUSH
23154: CALL_OW 266
23158: PUSH
23159: LD_INT 26
23161: EQUAL
23162: PUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 266
23172: PUSH
23173: LD_INT 27
23175: EQUAL
23176: OR
23177: PUSH
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 266
23187: PUSH
23188: LD_INT 28
23190: EQUAL
23191: OR
23192: IFFALSE 23349
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23194: LD_INT 22
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 30
23209: PUSH
23210: LD_INT 7
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 30
23219: PUSH
23220: LD_INT 8
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PPUSH
23236: CALL_OW 69
23240: PUSH
23241: LD_INT 0
23243: GREATER
23244: IFFALSE 23349
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23246: LD_ADDR_VAR 0 2
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 30
23266: PUSH
23267: LD_INT 7
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 30
23276: PUSH
23277: LD_INT 8
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 69
23297: PUSH
23298: FOR_IN
23299: IFFALSE 23347
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23301: LD_VAR 0 2
23305: PPUSH
23306: LD_INT 1
23308: PPUSH
23309: CALL_OW 268
23313: PUSH
23314: LD_INT 11
23316: EQUAL
23317: PUSH
23318: LD_VAR 0 2
23322: PPUSH
23323: LD_INT 2
23325: PPUSH
23326: CALL_OW 268
23330: PUSH
23331: LD_INT 11
23333: EQUAL
23334: OR
23335: IFFALSE 23345
// eventVar1 = 1 ;
23337: LD_ADDR_EXP 67
23341: PUSH
23342: LD_INT 1
23344: ST_TO_ADDR
23345: GO 23298
23347: POP
23348: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23349: LD_VAR 0 1
23353: PPUSH
23354: CALL_OW 255
23358: PUSH
23359: LD_INT 3
23361: EQUAL
23362: IFFALSE 23842
// begin if GetBType ( building ) = b_depot then
23364: LD_VAR 0 1
23368: PPUSH
23369: CALL_OW 266
23373: PUSH
23374: LD_INT 0
23376: EQUAL
23377: IFFALSE 23449
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 274
23388: PPUSH
23389: LD_INT 1
23391: PPUSH
23392: LD_INT 5000
23394: PPUSH
23395: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23399: LD_VAR 0 1
23403: PPUSH
23404: CALL_OW 274
23408: PPUSH
23409: LD_INT 2
23411: PPUSH
23412: LD_INT 300
23414: PPUSH
23415: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL_OW 274
23428: PPUSH
23429: LD_INT 3
23431: PPUSH
23432: LD_INT 100
23434: PPUSH
23435: CALL_OW 277
// ruDepot = building ;
23439: LD_ADDR_EXP 32
23443: PUSH
23444: LD_VAR 0 1
23448: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 266
23458: PUSH
23459: LD_INT 0
23461: EQUAL
23462: PUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 266
23472: PUSH
23473: LD_INT 2
23475: EQUAL
23476: OR
23477: PUSH
23478: LD_VAR 0 1
23482: PPUSH
23483: CALL_OW 266
23487: PUSH
23488: LD_INT 4
23490: EQUAL
23491: OR
23492: IFFALSE 23503
// ComUpgrade ( building ) ;
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL_OW 146
// if GetBType ( building ) = b_lab then
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 266
23512: PUSH
23513: LD_INT 6
23515: EQUAL
23516: IFFALSE 23719
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23518: LD_INT 22
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 30
23530: PUSH
23531: LD_INT 8
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PPUSH
23542: CALL_OW 69
23546: PUSH
23547: LD_INT 0
23549: EQUAL
23550: IFFALSE 23588
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23552: LD_VAR 0 1
23556: PPUSH
23557: LD_INT 10
23559: PPUSH
23560: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23564: LD_VAR 0 1
23568: PPUSH
23569: LD_INT 12
23571: PPUSH
23572: CALL_OW 207
// ruLab1 = building ;
23576: LD_ADDR_EXP 33
23580: PUSH
23581: LD_VAR 0 1
23585: ST_TO_ADDR
// end else
23586: GO 23622
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23588: LD_VAR 0 1
23592: PPUSH
23593: LD_INT 11
23595: PPUSH
23596: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23600: LD_VAR 0 1
23604: PPUSH
23605: LD_INT 14
23607: PPUSH
23608: CALL_OW 207
// ruLab2 = building ;
23612: LD_ADDR_EXP 34
23616: PUSH
23617: LD_VAR 0 1
23621: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23622: LD_INT 3
23624: PPUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: LD_INT 3
23632: PPUSH
23633: CALL 16022 0 3
// if ruDestroyedBuildings > 0 then
23637: LD_EXP 44
23641: PUSH
23642: LD_INT 0
23644: GREATER
23645: IFFALSE 23719
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23647: LD_ADDR_EXP 44
23651: PUSH
23652: LD_EXP 44
23656: PPUSH
23657: LD_INT 1
23659: PPUSH
23660: CALL_OW 3
23664: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23665: LD_ADDR_EXP 44
23669: PUSH
23670: LD_EXP 44
23674: PPUSH
23675: LD_INT 1
23677: PPUSH
23678: CALL_OW 3
23682: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23683: LD_ADDR_EXP 44
23687: PUSH
23688: LD_EXP 44
23692: PPUSH
23693: LD_INT 1
23695: PPUSH
23696: CALL_OW 3
23700: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23701: LD_ADDR_EXP 44
23705: PUSH
23706: LD_EXP 44
23710: PPUSH
23711: LD_INT 1
23713: PPUSH
23714: CALL_OW 3
23718: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23719: LD_VAR 0 1
23723: PPUSH
23724: CALL_OW 266
23728: PUSH
23729: LD_INT 32
23731: EQUAL
23732: IFFALSE 23769
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23734: LD_VAR 0 1
23738: PPUSH
23739: LD_INT 44
23741: PUSH
23742: LD_INT 45
23744: PUSH
23745: LD_INT 46
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: PPUSH
23756: LD_INT 3
23758: PPUSH
23759: CALL_OW 12
23763: ARRAY
23764: PPUSH
23765: CALL_OW 208
// if GetBType ( building ) = b_turret then
23769: LD_VAR 0 1
23773: PPUSH
23774: CALL_OW 266
23778: PUSH
23779: LD_INT 33
23781: EQUAL
23782: IFFALSE 23819
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23784: LD_VAR 0 1
23788: PPUSH
23789: LD_INT 44
23791: PUSH
23792: LD_INT 45
23794: PUSH
23795: LD_INT 46
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: PPUSH
23806: LD_INT 3
23808: PPUSH
23809: CALL_OW 12
23813: ARRAY
23814: PPUSH
23815: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL_OW 266
23828: PUSH
23829: LD_INT 24
23831: EQUAL
23832: IFFALSE 23842
// russianAI = 1 ;
23834: LD_ADDR_EXP 41
23838: PUSH
23839: LD_INT 1
23841: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 255
23851: PUSH
23852: LD_INT 2
23854: EQUAL
23855: IFFALSE 24734
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23857: LD_VAR 0 1
23861: PPUSH
23862: CALL_OW 266
23866: PUSH
23867: LD_EXP 70
23871: PUSH
23872: LD_INT 1
23874: ARRAY
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: EQUAL
23880: IFFALSE 24007
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23882: LD_ADDR_EXP 70
23886: PUSH
23887: LD_EXP 70
23891: PPUSH
23892: LD_INT 1
23894: PPUSH
23895: CALL_OW 3
23899: ST_TO_ADDR
// if arBuildingsTab then
23900: LD_EXP 70
23904: IFFALSE 24007
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_INT 22
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 25
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PPUSH
23935: CALL_OW 69
23939: ST_TO_ADDR
// if engineers then
23940: LD_VAR 0 3
23944: IFFALSE 24007
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23946: LD_VAR 0 3
23950: PPUSH
23951: LD_EXP 70
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: PPUSH
23964: LD_EXP 70
23968: PUSH
23969: LD_INT 1
23971: ARRAY
23972: PUSH
23973: LD_INT 2
23975: ARRAY
23976: PPUSH
23977: LD_EXP 70
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PUSH
23986: LD_INT 3
23988: ARRAY
23989: PPUSH
23990: LD_EXP 70
23994: PUSH
23995: LD_INT 1
23997: ARRAY
23998: PUSH
23999: LD_INT 4
24001: ARRAY
24002: PPUSH
24003: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
24007: LD_VAR 0 1
24011: PPUSH
24012: CALL_OW 266
24016: PUSH
24017: LD_INT 31
24019: EQUAL
24020: IFFALSE 24166
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
24022: LD_ADDR_VAR 0 4
24026: PUSH
24027: LD_INT 22
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 25
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 25
24052: PUSH
24053: LD_INT 8
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 69
24073: PUSH
24074: LD_EXP 28
24078: DIFF
24079: ST_TO_ADDR
// if not sol then
24080: LD_VAR 0 4
24084: NOT
24085: IFFALSE 24089
// exit ;
24087: GO 24734
// for i in sol do
24089: LD_ADDR_VAR 0 2
24093: PUSH
24094: LD_VAR 0 4
24098: PUSH
24099: FOR_IN
24100: IFFALSE 24164
// if not GetTag ( i ) then
24102: LD_VAR 0 2
24106: PPUSH
24107: CALL_OW 110
24111: NOT
24112: IFFALSE 24162
// begin if IsInUnit ( i ) then
24114: LD_VAR 0 2
24118: PPUSH
24119: CALL_OW 310
24123: IFFALSE 24134
// ComExitBuilding ( i ) ;
24125: LD_VAR 0 2
24129: PPUSH
24130: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24134: LD_VAR 0 2
24138: PPUSH
24139: LD_VAR 0 1
24143: PPUSH
24144: CALL_OW 180
// SetTag ( i , 11 ) ;
24148: LD_VAR 0 2
24152: PPUSH
24153: LD_INT 11
24155: PPUSH
24156: CALL_OW 109
// break ;
24160: GO 24164
// end ;
24162: GO 24099
24164: POP
24165: POP
// end ; if GetBType ( building ) = b_depot then
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL_OW 266
24175: PUSH
24176: LD_INT 0
24178: EQUAL
24179: IFFALSE 24265
// begin arDepot = building ;
24181: LD_ADDR_EXP 45
24185: PUSH
24186: LD_VAR 0 1
24190: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24191: LD_INT 38
24193: PUSH
24194: LD_INT 47
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PPUSH
24201: LD_INT 71
24203: PPUSH
24204: LD_INT 19
24206: PPUSH
24207: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24211: LD_VAR 0 1
24215: PPUSH
24216: CALL_OW 274
24220: PPUSH
24221: LD_INT 1
24223: PPUSH
24224: LD_INT 500
24226: PPUSH
24227: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24231: LD_VAR 0 1
24235: PPUSH
24236: CALL_OW 274
24240: PPUSH
24241: LD_INT 3
24243: PPUSH
24244: LD_INT 30
24246: PPUSH
24247: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24251: LD_EXP 28
24255: PPUSH
24256: LD_VAR 0 1
24260: PPUSH
24261: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL_OW 266
24274: PUSH
24275: LD_INT 6
24277: EQUAL
24278: PUSH
24279: LD_VAR 0 1
24283: PPUSH
24284: CALL_OW 266
24288: PUSH
24289: LD_INT 9
24291: EQUAL
24292: OR
24293: IFFALSE 24344
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24295: LD_VAR 0 1
24299: PPUSH
24300: LD_INT 10
24302: PPUSH
24303: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24307: LD_VAR 0 1
24311: PPUSH
24312: LD_INT 11
24314: PPUSH
24315: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24319: LD_INT 2
24321: PPUSH
24322: LD_VAR 0 1
24326: PPUSH
24327: LD_INT 2
24329: PPUSH
24330: CALL 16022 0 3
// arLab = building ;
24334: LD_ADDR_EXP 46
24338: PUSH
24339: LD_VAR 0 1
24343: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 266
24353: PUSH
24354: LD_INT 2
24356: EQUAL
24357: PUSH
24358: LD_VAR 0 1
24362: PPUSH
24363: CALL_OW 266
24367: PUSH
24368: LD_INT 4
24370: EQUAL
24371: OR
24372: IFFALSE 24443
// begin ComUpgrade ( building ) ;
24374: LD_VAR 0 1
24378: PPUSH
24379: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24383: LD_VAR 0 1
24387: PPUSH
24388: CALL_OW 266
24392: PUSH
24393: LD_INT 4
24395: EQUAL
24396: IFFALSE 24443
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24398: LD_INT 22
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 25
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PPUSH
24422: CALL_OW 69
24426: PUSH
24427: LD_EXP 28
24431: DIFF
24432: PPUSH
24433: LD_INT 75
24435: PPUSH
24436: LD_INT 21
24438: PPUSH
24439: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 266
24452: PUSH
24453: LD_INT 27
24455: EQUAL
24456: IFFALSE 24734
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24458: LD_INT 22
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 30
24470: PUSH
24471: LD_INT 27
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PPUSH
24482: CALL_OW 69
24486: PUSH
24487: LD_INT 2
24489: EQUAL
24490: IFFALSE 24734
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24492: LD_ADDR_VAR 0 2
24496: PUSH
24497: LD_INT 22
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 21
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 25
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: PUSH
24537: LD_INT 1
24539: ARRAY
24540: ST_TO_ADDR
// if not i then
24541: LD_VAR 0 2
24545: NOT
24546: IFFALSE 24550
// exit ;
24548: GO 24734
// AddComMoveXY ( i , 92 , 34 ) ;
24550: LD_VAR 0 2
24554: PPUSH
24555: LD_INT 92
24557: PPUSH
24558: LD_INT 34
24560: PPUSH
24561: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24565: LD_VAR 0 2
24569: PPUSH
24570: LD_INT 35
24572: PPUSH
24573: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24577: LD_VAR 0 2
24581: PPUSH
24582: LD_INT 101
24584: PPUSH
24585: LD_INT 20
24587: PPUSH
24588: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24592: LD_VAR 0 2
24596: PPUSH
24597: LD_INT 35
24599: PPUSH
24600: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24604: LD_VAR 0 2
24608: PPUSH
24609: LD_INT 115
24611: PPUSH
24612: LD_INT 30
24614: PPUSH
24615: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24619: LD_VAR 0 2
24623: PPUSH
24624: LD_INT 35
24626: PPUSH
24627: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 82
24638: PPUSH
24639: LD_INT 57
24641: PPUSH
24642: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24646: LD_VAR 0 2
24650: PPUSH
24651: LD_INT 35
24653: PPUSH
24654: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24658: LD_VAR 0 2
24662: PPUSH
24663: LD_INT 36
24665: PPUSH
24666: LD_INT 28
24668: PPUSH
24669: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24673: LD_VAR 0 2
24677: PPUSH
24678: LD_INT 70
24680: PPUSH
24681: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24685: LD_INT 22
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 21
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 25
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: PPUSH
24720: CALL_OW 69
24724: PPUSH
24725: LD_EXP 45
24729: PPUSH
24730: CALL_OW 180
// end ; end ; end ;
24734: PPOPN 5
24736: END
// on UpgradeComplete ( building ) do var i ;
24737: LD_INT 0
24739: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24740: LD_VAR 0 1
24744: PPUSH
24745: CALL_OW 255
24749: PUSH
24750: LD_INT 1
24752: EQUAL
24753: PUSH
24754: LD_EXP 67
24758: PUSH
24759: LD_INT 0
24761: EQUAL
24762: AND
24763: IFFALSE 24961
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 266
24774: PUSH
24775: LD_INT 7
24777: EQUAL
24778: PUSH
24779: LD_VAR 0 1
24783: PPUSH
24784: CALL_OW 266
24788: PUSH
24789: LD_INT 8
24791: EQUAL
24792: OR
24793: IFFALSE 24961
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24795: LD_INT 22
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 2
24807: PUSH
24808: LD_INT 30
24810: PUSH
24811: LD_INT 26
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 30
24820: PUSH
24821: LD_INT 27
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 30
24830: PUSH
24831: LD_INT 28
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PPUSH
24848: CALL_OW 69
24852: PUSH
24853: LD_INT 0
24855: GREATER
24856: IFFALSE 24961
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: LD_INT 22
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: LD_INT 30
24878: PUSH
24879: LD_INT 7
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 30
24888: PUSH
24889: LD_INT 8
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PPUSH
24905: CALL_OW 69
24909: PUSH
24910: FOR_IN
24911: IFFALSE 24959
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_INT 1
24920: PPUSH
24921: CALL_OW 268
24925: PUSH
24926: LD_INT 11
24928: EQUAL
24929: PUSH
24930: LD_VAR 0 2
24934: PPUSH
24935: LD_INT 2
24937: PPUSH
24938: CALL_OW 268
24942: PUSH
24943: LD_INT 11
24945: EQUAL
24946: OR
24947: IFFALSE 24957
// eventVar1 = 1 ;
24949: LD_ADDR_EXP 67
24953: PUSH
24954: LD_INT 1
24956: ST_TO_ADDR
24957: GO 24910
24959: POP
24960: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24961: LD_VAR 0 1
24965: PPUSH
24966: CALL_OW 255
24970: PUSH
24971: LD_INT 2
24973: EQUAL
24974: IFFALSE 25079
// begin if GetBType ( building ) = b_barracks then
24976: LD_VAR 0 1
24980: PPUSH
24981: CALL_OW 266
24985: PUSH
24986: LD_INT 5
24988: EQUAL
24989: IFFALSE 25079
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24991: LD_ADDR_VAR 0 2
24995: PUSH
24996: LD_INT 22
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 25
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: LD_INT 54
25021: PUSH
25022: EMPTY
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: PPUSH
25034: CALL_OW 69
25038: PUSH
25039: LD_EXP 28
25043: PUSH
25044: EMPTY
25045: LIST
25046: DIFF
25047: PUSH
25048: FOR_IN
25049: IFFALSE 25067
// ComEnterUnit ( i , building ) ;
25051: LD_VAR 0 2
25055: PPUSH
25056: LD_VAR 0 1
25060: PPUSH
25061: CALL_OW 120
25065: GO 25048
25067: POP
25068: POP
// arArm = building ;
25069: LD_ADDR_EXP 47
25073: PUSH
25074: LD_VAR 0 1
25078: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25079: LD_VAR 0 1
25083: PPUSH
25084: CALL_OW 255
25088: PUSH
25089: LD_INT 3
25091: EQUAL
25092: IFFALSE 25565
// begin if GetBType ( building ) = b_factory then
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 266
25103: PUSH
25104: LD_INT 3
25106: EQUAL
25107: IFFALSE 25174
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25109: LD_ADDR_VAR 0 2
25113: PUSH
25114: LD_INT 22
25116: PUSH
25117: LD_INT 3
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 25
25126: PUSH
25127: LD_INT 3
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: PUSH
25143: FOR_IN
25144: IFFALSE 25162
// ComEnterUnit ( i , building ) ;
25146: LD_VAR 0 2
25150: PPUSH
25151: LD_VAR 0 1
25155: PPUSH
25156: CALL_OW 120
25160: GO 25143
25162: POP
25163: POP
// ruFab = building ;
25164: LD_ADDR_EXP 37
25168: PUSH
25169: LD_VAR 0 1
25173: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 21
25186: PUSH
25187: LD_INT 3
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 30
25196: PUSH
25197: LD_INT 8
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: PUSH
25214: LD_INT 2
25216: EQUAL
25217: IFFALSE 25425
// begin for i = 1 to 2 do
25219: LD_ADDR_VAR 0 2
25223: PUSH
25224: DOUBLE
25225: LD_INT 1
25227: DEC
25228: ST_TO_ADDR
25229: LD_INT 2
25231: PUSH
25232: FOR_TO
25233: IFFALSE 25320
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25235: LD_INT 22
25237: PUSH
25238: LD_INT 3
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 25
25247: PUSH
25248: LD_INT 4
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PUSH
25264: LD_VAR 0 2
25268: ARRAY
25269: PPUSH
25270: LD_INT 22
25272: PUSH
25273: LD_INT 3
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 21
25282: PUSH
25283: LD_INT 3
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 30
25292: PUSH
25293: LD_INT 8
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: PPUSH
25305: CALL_OW 69
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: PPUSH
25314: CALL_OW 120
25318: GO 25232
25320: POP
25321: POP
// for i = 3 to 4 do
25322: LD_ADDR_VAR 0 2
25326: PUSH
25327: DOUBLE
25328: LD_INT 3
25330: DEC
25331: ST_TO_ADDR
25332: LD_INT 4
25334: PUSH
25335: FOR_TO
25336: IFFALSE 25423
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25338: LD_INT 22
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 25
25350: PUSH
25351: LD_INT 4
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PPUSH
25362: CALL_OW 69
25366: PUSH
25367: LD_VAR 0 2
25371: ARRAY
25372: PPUSH
25373: LD_INT 22
25375: PUSH
25376: LD_INT 3
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 21
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 30
25395: PUSH
25396: LD_INT 8
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: LIST
25407: PPUSH
25408: CALL_OW 69
25412: PUSH
25413: LD_INT 2
25415: ARRAY
25416: PPUSH
25417: CALL_OW 120
25421: GO 25335
25423: POP
25424: POP
// end ; if GetBType ( building ) = b_barracks then
25425: LD_VAR 0 1
25429: PPUSH
25430: CALL_OW 266
25434: PUSH
25435: LD_INT 5
25437: EQUAL
25438: IFFALSE 25565
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25440: LD_ADDR_VAR 0 2
25444: PUSH
25445: LD_INT 22
25447: PUSH
25448: LD_INT 3
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 25
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 3
25467: PUSH
25468: LD_INT 54
25470: PUSH
25471: EMPTY
25472: LIST
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: PPUSH
25483: CALL_OW 69
25487: PUSH
25488: FOR_IN
25489: IFFALSE 25507
// ComEnterUnit ( i , building ) ;
25491: LD_VAR 0 2
25495: PPUSH
25496: LD_VAR 0 1
25500: PPUSH
25501: CALL_OW 120
25505: GO 25488
25507: POP
25508: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25509: LD_INT 22
25511: PUSH
25512: LD_INT 3
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 30
25521: PUSH
25522: LD_INT 5
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 69
25537: PUSH
25538: LD_INT 0
25540: EQUAL
25541: IFFALSE 25555
// ruArm1 = building else
25543: LD_ADDR_EXP 35
25547: PUSH
25548: LD_VAR 0 1
25552: ST_TO_ADDR
25553: GO 25565
// ruArm2 = building ;
25555: LD_ADDR_EXP 36
25559: PUSH
25560: LD_VAR 0 1
25564: ST_TO_ADDR
// end ; end ; end ;
25565: PPOPN 2
25567: END
// on EnterBuilding ( building , human ) do var rnd ;
25568: LD_INT 0
25570: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25571: LD_VAR 0 2
25575: PPUSH
25576: CALL_OW 255
25580: PUSH
25581: LD_INT 2
25583: EQUAL
25584: PUSH
25585: LD_VAR 0 2
25589: PPUSH
25590: CALL_OW 257
25594: PUSH
25595: LD_INT 1
25597: EQUAL
25598: AND
25599: PUSH
25600: LD_VAR 0 1
25604: PUSH
25605: LD_EXP 47
25609: EQUAL
25610: AND
25611: IFFALSE 25658
// begin wait ( 0 0$1 ) ;
25613: LD_INT 35
25615: PPUSH
25616: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_INT 1
25627: PPUSH
25628: LD_INT 100
25630: PPUSH
25631: CALL_OW 12
25635: ST_TO_ADDR
// if rnd > 50 then
25636: LD_VAR 0 3
25640: PUSH
25641: LD_INT 50
25643: GREATER
25644: IFFALSE 25658
// SetClass ( human , class_mortar ) ;
25646: LD_VAR 0 2
25650: PPUSH
25651: LD_INT 8
25653: PPUSH
25654: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25658: LD_VAR 0 2
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 25
25675: PUSH
25676: LD_INT 12
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PPUSH
25687: CALL_OW 69
25691: IN
25692: IFFALSE 25742
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL_OW 266
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: IN
25714: IFFALSE 25730
// SetClass ( human , class_apeman_engineer ) else
25716: LD_VAR 0 2
25720: PPUSH
25721: LD_INT 16
25723: PPUSH
25724: CALL_OW 336
25728: GO 25742
// SetClass ( human , class_apeman_soldier ) ;
25730: LD_VAR 0 2
25734: PPUSH
25735: LD_INT 15
25737: PPUSH
25738: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25742: LD_VAR 0 2
25746: PPUSH
25747: CALL_OW 255
25751: PUSH
25752: LD_INT 3
25754: EQUAL
25755: PUSH
25756: LD_VAR 0 2
25760: PPUSH
25761: CALL_OW 257
25765: PUSH
25766: LD_INT 1
25768: EQUAL
25769: AND
25770: PUSH
25771: LD_VAR 0 1
25775: PUSH
25776: LD_EXP 35
25780: EQUAL
25781: PUSH
25782: LD_VAR 0 1
25786: PUSH
25787: LD_EXP 36
25791: EQUAL
25792: OR
25793: PUSH
25794: EMPTY
25795: LIST
25796: AND
25797: IFFALSE 25818
// begin wait ( 0 0$1 ) ;
25799: LD_INT 35
25801: PPUSH
25802: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25806: LD_VAR 0 2
25810: PPUSH
25811: LD_INT 9
25813: PPUSH
25814: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25818: LD_VAR 0 2
25822: PPUSH
25823: CALL_OW 255
25827: PUSH
25828: LD_INT 3
25830: EQUAL
25831: PUSH
25832: LD_VAR 0 2
25836: PPUSH
25837: CALL_OW 257
25841: PUSH
25842: LD_INT 9
25844: EQUAL
25845: AND
25846: PUSH
25847: LD_VAR 0 1
25851: PPUSH
25852: CALL_OW 266
25856: PUSH
25857: LD_INT 32
25859: EQUAL
25860: AND
25861: IFFALSE 25882
// begin wait ( 0 0$1 ) ;
25863: LD_INT 35
25865: PPUSH
25866: CALL_OW 67
// SetClass ( human , 1 ) ;
25870: LD_VAR 0 2
25874: PPUSH
25875: LD_INT 1
25877: PPUSH
25878: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25882: LD_VAR 0 2
25886: PPUSH
25887: CALL_OW 255
25891: PUSH
25892: LD_INT 3
25894: EQUAL
25895: PUSH
25896: LD_VAR 0 2
25900: PPUSH
25901: CALL_OW 257
25905: PUSH
25906: LD_INT 3
25908: EQUAL
25909: AND
25910: PUSH
25911: LD_VAR 0 1
25915: PUSH
25916: LD_EXP 37
25920: EQUAL
25921: AND
25922: IFFALSE 25936
// SetLives ( human , 1000 ) ;
25924: LD_VAR 0 2
25928: PPUSH
25929: LD_INT 1000
25931: PPUSH
25932: CALL_OW 234
// end ;
25936: PPOPN 3
25938: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25939: LD_VAR 0 1
25943: PUSH
25944: LD_INT 1
25946: EQUAL
25947: PUSH
25948: LD_VAR 0 2
25952: PUSH
25953: LD_INT 2
25955: EQUAL
25956: AND
25957: PUSH
25958: LD_INT 1
25960: PPUSH
25961: LD_INT 2
25963: PPUSH
25964: CALL_OW 81
25968: PUSH
25969: LD_INT 1
25971: EQUAL
25972: AND
25973: IFFALSE 25994
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25975: LD_EXP 26
25979: PPUSH
25980: LD_STRING D6b-Pow-1
25982: PPUSH
25983: CALL_OW 94
// YouLost ( Powell ) ;
25987: LD_STRING Powell
25989: PPUSH
25990: CALL_OW 104
// end ; end ;
25994: PPOPN 2
25996: END
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25997: LD_INT 23
25999: PPUSH
26000: LD_INT 22
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 21
26012: PUSH
26013: LD_INT 3
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 70
26028: PUSH
26029: LD_INT 23
26031: PPUSH
26032: LD_INT 22
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 21
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PPUSH
26056: CALL_OW 70
26060: OR
26061: PUSH
26062: LD_INT 1
26064: PPUSH
26065: LD_INT 2
26067: PPUSH
26068: CALL_OW 81
26072: PUSH
26073: LD_INT 1
26075: EQUAL
26076: AND
26077: IFFALSE 26316
26079: GO 26081
26081: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26082: LD_INT 23
26084: PPUSH
26085: LD_INT 22
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 21
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PPUSH
26109: CALL_OW 70
26113: PUSH
26114: LD_INT 23
26116: PPUSH
26117: LD_INT 22
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 21
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PPUSH
26141: CALL_OW 70
26145: OR
26146: PUSH
26147: LD_INT 1
26149: PPUSH
26150: LD_INT 2
26152: PPUSH
26153: CALL_OW 81
26157: PUSH
26158: LD_INT 1
26160: EQUAL
26161: AND
26162: IFFALSE 26171
// Query ( QAttack ) ;
26164: LD_STRING QAttack
26166: PPUSH
26167: CALL_OW 97
// wait ( 0 0$20 ) ;
26171: LD_INT 700
26173: PPUSH
26174: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26178: LD_INT 350
26180: PPUSH
26181: CALL_OW 67
// if arabianTrait = 1 then
26185: LD_EXP 51
26189: PUSH
26190: LD_INT 1
26192: EQUAL
26193: IFFALSE 26197
// exit ;
26195: GO 26316
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26197: LD_INT 23
26199: PPUSH
26200: LD_INT 22
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 21
26212: PUSH
26213: LD_INT 3
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PPUSH
26224: CALL_OW 70
26228: PUSH
26229: LD_INT 23
26231: PPUSH
26232: LD_INT 22
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 21
26244: PUSH
26245: LD_INT 2
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PPUSH
26256: CALL_OW 70
26260: OR
26261: PUSH
26262: LD_INT 1
26264: PPUSH
26265: LD_INT 2
26267: PPUSH
26268: CALL_OW 81
26272: PUSH
26273: LD_INT 1
26275: EQUAL
26276: AND
26277: IFFALSE 26178
// InGameOn ;
26279: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26283: LD_INT 73
26285: PPUSH
26286: LD_INT 18
26288: PPUSH
26289: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26293: LD_EXP 26
26297: PPUSH
26298: LD_STRING D6b-Pow-1
26300: PPUSH
26301: CALL_OW 94
// YouLost ( Powell ) ;
26305: LD_STRING Powell
26307: PPUSH
26308: CALL_OW 104
// InGameOff ;
26312: CALL_OW 9
// end ;
26316: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL 46017 0 1
// if unit = Truman then
26326: LD_VAR 0 1
26330: PUSH
26331: LD_EXP 21
26335: EQUAL
26336: IFFALSE 26345
// YouLost ( Powell ) ;
26338: LD_STRING Powell
26340: PPUSH
26341: CALL_OW 104
// if unit = JMM then
26345: LD_VAR 0 1
26349: PUSH
26350: LD_EXP 1
26354: EQUAL
26355: IFFALSE 26364
// YouLost ( JMM ) ;
26357: LD_STRING JMM
26359: PPUSH
26360: CALL_OW 104
// if unit = Khatam then
26364: LD_VAR 0 1
26368: PUSH
26369: LD_EXP 14
26373: EQUAL
26374: IFFALSE 26384
// KhatamStatus = 0 ;
26376: LD_ADDR_EXP 55
26380: PUSH
26381: LD_INT 0
26383: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26384: LD_VAR 0 1
26388: PPUSH
26389: CALL_OW 255
26393: PUSH
26394: LD_INT 3
26396: EQUAL
26397: PUSH
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 247
26407: PUSH
26408: LD_INT 3
26410: EQUAL
26411: AND
26412: IFFALSE 27104
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26414: LD_VAR 0 1
26418: PPUSH
26419: CALL_OW 266
26423: PUSH
26424: LD_INT 31
26426: EQUAL
26427: PUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 266
26437: PUSH
26438: LD_INT 32
26440: EQUAL
26441: OR
26442: PUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL_OW 266
26452: PUSH
26453: LD_INT 36
26455: EQUAL
26456: OR
26457: PUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 266
26467: PUSH
26468: LD_INT 0
26470: EQUAL
26471: OR
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 266
26482: PUSH
26483: LD_INT 24
26485: EQUAL
26486: OR
26487: PUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL_OW 266
26497: PUSH
26498: LD_INT 17
26500: EQUAL
26501: OR
26502: PUSH
26503: LD_VAR 0 1
26507: PPUSH
26508: CALL_OW 266
26512: PUSH
26513: LD_INT 25
26515: EQUAL
26516: OR
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 266
26527: PUSH
26528: LD_INT 19
26530: EQUAL
26531: OR
26532: PUSH
26533: LD_VAR 0 1
26537: PPUSH
26538: CALL_OW 266
26542: PUSH
26543: LD_INT 20
26545: EQUAL
26546: OR
26547: PUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 266
26557: PUSH
26558: LD_INT 18
26560: EQUAL
26561: OR
26562: PUSH
26563: LD_VAR 0 1
26567: PPUSH
26568: CALL_OW 266
26572: PUSH
26573: LD_INT 21
26575: EQUAL
26576: OR
26577: PUSH
26578: LD_VAR 0 1
26582: PPUSH
26583: CALL_OW 266
26587: PUSH
26588: LD_INT 23
26590: EQUAL
26591: OR
26592: PUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 266
26602: PUSH
26603: LD_INT 16
26605: EQUAL
26606: OR
26607: PUSH
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL_OW 266
26617: PUSH
26618: LD_INT 6
26620: EQUAL
26621: OR
26622: PUSH
26623: LD_VAR 0 1
26627: PPUSH
26628: CALL_OW 266
26632: PUSH
26633: LD_INT 29
26635: EQUAL
26636: OR
26637: PUSH
26638: LD_VAR 0 1
26642: PPUSH
26643: CALL_OW 266
26647: PUSH
26648: LD_INT 26
26650: EQUAL
26651: OR
26652: PUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 266
26662: PUSH
26663: LD_INT 30
26665: EQUAL
26666: OR
26667: PUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL_OW 266
26677: PUSH
26678: LD_INT 28
26680: EQUAL
26681: OR
26682: PUSH
26683: LD_VAR 0 1
26687: PPUSH
26688: CALL_OW 266
26692: PUSH
26693: LD_INT 27
26695: EQUAL
26696: OR
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 266
26707: PUSH
26708: LD_INT 33
26710: EQUAL
26711: OR
26712: PUSH
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 266
26722: PUSH
26723: LD_INT 2
26725: EQUAL
26726: OR
26727: PUSH
26728: LD_VAR 0 1
26732: PPUSH
26733: CALL_OW 266
26737: PUSH
26738: LD_INT 4
26740: EQUAL
26741: OR
26742: IFFALSE 26828
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26744: LD_ADDR_EXP 44
26748: PUSH
26749: LD_EXP 44
26753: PUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 266
26763: ADD
26764: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26765: LD_ADDR_EXP 44
26769: PUSH
26770: LD_EXP 44
26774: PUSH
26775: LD_VAR 0 1
26779: PPUSH
26780: CALL_OW 250
26784: ADD
26785: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26786: LD_ADDR_EXP 44
26790: PUSH
26791: LD_EXP 44
26795: PUSH
26796: LD_VAR 0 1
26800: PPUSH
26801: CALL_OW 251
26805: ADD
26806: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26807: LD_ADDR_EXP 44
26811: PUSH
26812: LD_EXP 44
26816: PUSH
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 254
26826: ADD
26827: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 266
26837: PUSH
26838: LD_INT 1
26840: EQUAL
26841: IFFALSE 26920
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26843: LD_ADDR_EXP 44
26847: PUSH
26848: LD_EXP 44
26852: PUSH
26853: LD_INT 0
26855: ADD
26856: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26857: LD_ADDR_EXP 44
26861: PUSH
26862: LD_EXP 44
26866: PUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 250
26876: ADD
26877: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26878: LD_ADDR_EXP 44
26882: PUSH
26883: LD_EXP 44
26887: PUSH
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 251
26897: ADD
26898: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26899: LD_ADDR_EXP 44
26903: PUSH
26904: LD_EXP 44
26908: PUSH
26909: LD_VAR 0 1
26913: PPUSH
26914: CALL_OW 254
26918: ADD
26919: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 266
26929: PUSH
26930: LD_INT 3
26932: EQUAL
26933: IFFALSE 27012
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26935: LD_ADDR_EXP 44
26939: PUSH
26940: LD_EXP 44
26944: PUSH
26945: LD_INT 2
26947: ADD
26948: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26949: LD_ADDR_EXP 44
26953: PUSH
26954: LD_EXP 44
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL_OW 250
26968: ADD
26969: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26970: LD_ADDR_EXP 44
26974: PUSH
26975: LD_EXP 44
26979: PUSH
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 251
26989: ADD
26990: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26991: LD_ADDR_EXP 44
26995: PUSH
26996: LD_EXP 44
27000: PUSH
27001: LD_VAR 0 1
27005: PPUSH
27006: CALL_OW 254
27010: ADD
27011: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 266
27021: PUSH
27022: LD_INT 5
27024: EQUAL
27025: IFFALSE 27104
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
27027: LD_ADDR_EXP 44
27031: PUSH
27032: LD_EXP 44
27036: PUSH
27037: LD_INT 4
27039: ADD
27040: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
27041: LD_ADDR_EXP 44
27045: PUSH
27046: LD_EXP 44
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 250
27060: ADD
27061: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
27062: LD_ADDR_EXP 44
27066: PUSH
27067: LD_EXP 44
27071: PUSH
27072: LD_VAR 0 1
27076: PPUSH
27077: CALL_OW 251
27081: ADD
27082: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
27083: LD_ADDR_EXP 44
27087: PUSH
27088: LD_EXP 44
27092: PUSH
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL_OW 254
27102: ADD
27103: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
27104: LD_EXP 53
27108: PUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 257
27118: PUSH
27119: LD_INT 3
27121: EQUAL
27122: AND
27123: PUSH
27124: LD_VAR 0 1
27128: PPUSH
27129: CALL_OW 255
27133: PUSH
27134: LD_INT 3
27136: EQUAL
27137: AND
27138: PUSH
27139: LD_EXP 37
27143: PPUSH
27144: CALL_OW 302
27148: AND
27149: PUSH
27150: LD_EXP 37
27154: PPUSH
27155: CALL_OW 255
27159: PUSH
27160: LD_INT 3
27162: EQUAL
27163: AND
27164: IFFALSE 27248
// begin ruMech := ruMech - 1 ;
27166: LD_ADDR_EXP 53
27170: PUSH
27171: LD_EXP 53
27175: PUSH
27176: LD_INT 1
27178: MINUS
27179: ST_TO_ADDR
// uc_side = 3 ;
27180: LD_ADDR_OWVAR 20
27184: PUSH
27185: LD_INT 3
27187: ST_TO_ADDR
// uc_nation = 3 ;
27188: LD_ADDR_OWVAR 21
27192: PUSH
27193: LD_INT 3
27195: ST_TO_ADDR
// hc_gallery :=  ;
27196: LD_ADDR_OWVAR 33
27200: PUSH
27201: LD_STRING 
27203: ST_TO_ADDR
// hc_name :=  ;
27204: LD_ADDR_OWVAR 26
27208: PUSH
27209: LD_STRING 
27211: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27212: LD_INT 0
27214: PPUSH
27215: LD_EXP 38
27219: PPUSH
27220: LD_EXP 39
27224: PPUSH
27225: CALL_OW 12
27229: PPUSH
27230: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27234: CALL_OW 44
27238: PPUSH
27239: LD_EXP 37
27243: PPUSH
27244: CALL_OW 52
// end ; end ;
27248: PPOPN 1
27250: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27251: LD_VAR 0 1
27255: PPUSH
27256: LD_VAR 0 2
27260: PPUSH
27261: CALL 46137 0 2
// end ;
27265: PPOPN 2
27267: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27268: LD_ADDR_OWVAR 57
27272: PUSH
27273: LD_INT 0
27275: ST_TO_ADDR
// fastEnd = 1 ;
27276: LD_ADDR_EXP 65
27280: PUSH
27281: LD_INT 1
27283: ST_TO_ADDR
// FinishMission ;
27284: CALL 28471 0 0
// end ;
27288: PPOPN 1
27290: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL 46121 0 1
// end ; end_of_file
27300: PPOPN 1
27302: END
// export function CreateNature ; var i , un ; begin
27303: LD_INT 0
27305: PPUSH
27306: PPUSH
27307: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27308: LD_ADDR_VAR 0 2
27312: PUSH
27313: DOUBLE
27314: LD_INT 1
27316: DEC
27317: ST_TO_ADDR
27318: LD_OWVAR 67
27322: PUSH
27323: LD_INT 1
27325: PPUSH
27326: LD_INT 5
27328: PPUSH
27329: CALL_OW 12
27333: PLUS
27334: PUSH
27335: FOR_TO
27336: IFFALSE 27481
// begin hc_sex = sex_male ;
27338: LD_ADDR_OWVAR 27
27342: PUSH
27343: LD_INT 1
27345: ST_TO_ADDR
// uc_side = 0 ;
27346: LD_ADDR_OWVAR 20
27350: PUSH
27351: LD_INT 0
27353: ST_TO_ADDR
// uc_nation = nation_nature ;
27354: LD_ADDR_OWVAR 21
27358: PUSH
27359: LD_INT 0
27361: ST_TO_ADDR
// hc_class = class_apeman ;
27362: LD_ADDR_OWVAR 28
27366: PUSH
27367: LD_INT 12
27369: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27370: LD_ADDR_OWVAR 31
27374: PUSH
27375: LD_INT 2
27377: PPUSH
27378: LD_INT 7
27380: PPUSH
27381: CALL_OW 12
27385: PUSH
27386: LD_OWVAR 67
27390: PLUS
27391: PUSH
27392: LD_INT 2
27394: PPUSH
27395: LD_INT 10
27397: PPUSH
27398: CALL_OW 12
27402: PUSH
27403: LD_INT 2
27405: PPUSH
27406: LD_INT 10
27408: PPUSH
27409: CALL_OW 12
27413: PUSH
27414: LD_INT 2
27416: PPUSH
27417: LD_INT 10
27419: PPUSH
27420: CALL_OW 12
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27431: LD_ADDR_OWVAR 35
27435: PUSH
27436: LD_INT 5
27438: NEG
27439: PPUSH
27440: LD_INT 5
27442: PPUSH
27443: CALL_OW 12
27447: PUSH
27448: LD_OWVAR 67
27452: MUL
27453: ST_TO_ADDR
// un = CreateHuman ;
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: CALL_OW 44
27463: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27464: LD_VAR 0 3
27468: PPUSH
27469: LD_INT 5
27471: PPUSH
27472: LD_INT 0
27474: PPUSH
27475: CALL_OW 49
// end ;
27479: GO 27335
27481: POP
27482: POP
// for i = 1 to Difficulty + 2 do
27483: LD_ADDR_VAR 0 2
27487: PUSH
27488: DOUBLE
27489: LD_INT 1
27491: DEC
27492: ST_TO_ADDR
27493: LD_OWVAR 67
27497: PUSH
27498: LD_INT 2
27500: PLUS
27501: PUSH
27502: FOR_TO
27503: IFFALSE 27612
// begin hc_sex = sex_male ;
27505: LD_ADDR_OWVAR 27
27509: PUSH
27510: LD_INT 1
27512: ST_TO_ADDR
// uc_side = 0 ;
27513: LD_ADDR_OWVAR 20
27517: PUSH
27518: LD_INT 0
27520: ST_TO_ADDR
// uc_nation = nation_nature ;
27521: LD_ADDR_OWVAR 21
27525: PUSH
27526: LD_INT 0
27528: ST_TO_ADDR
// hc_class = class_tiger ;
27529: LD_ADDR_OWVAR 28
27533: PUSH
27534: LD_INT 14
27536: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27537: LD_ADDR_OWVAR 31
27541: PUSH
27542: LD_EXP 39
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27562: LD_ADDR_OWVAR 35
27566: PUSH
27567: LD_INT 5
27569: NEG
27570: PPUSH
27571: LD_INT 5
27573: PPUSH
27574: CALL_OW 12
27578: PUSH
27579: LD_OWVAR 67
27583: MUL
27584: ST_TO_ADDR
// un = CreateHuman ;
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: CALL_OW 44
27594: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27595: LD_VAR 0 3
27599: PPUSH
27600: LD_INT 6
27602: PPUSH
27603: LD_INT 0
27605: PPUSH
27606: CALL_OW 49
// end ;
27610: GO 27502
27612: POP
27613: POP
// for i = 1 to rand ( 3 , 4 ) do
27614: LD_ADDR_VAR 0 2
27618: PUSH
27619: DOUBLE
27620: LD_INT 1
27622: DEC
27623: ST_TO_ADDR
27624: LD_INT 3
27626: PPUSH
27627: LD_INT 4
27629: PPUSH
27630: CALL_OW 12
27634: PUSH
27635: FOR_TO
27636: IFFALSE 27730
// begin hc_sex = sex_male ;
27638: LD_ADDR_OWVAR 27
27642: PUSH
27643: LD_INT 1
27645: ST_TO_ADDR
// uc_side = 0 ;
27646: LD_ADDR_OWVAR 20
27650: PUSH
27651: LD_INT 0
27653: ST_TO_ADDR
// uc_nation = nation_nature ;
27654: LD_ADDR_OWVAR 21
27658: PUSH
27659: LD_INT 0
27661: ST_TO_ADDR
// hc_class = 18 ;
27662: LD_ADDR_OWVAR 28
27666: PUSH
27667: LD_INT 18
27669: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27670: LD_ADDR_OWVAR 31
27674: PUSH
27675: LD_EXP 39
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: ST_TO_ADDR
// hc_agressivity = 0 ;
27695: LD_ADDR_OWVAR 35
27699: PUSH
27700: LD_INT 0
27702: ST_TO_ADDR
// un = CreateHuman ;
27703: LD_ADDR_VAR 0 3
27707: PUSH
27708: CALL_OW 44
27712: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27713: LD_VAR 0 3
27717: PPUSH
27718: LD_INT 6
27720: PPUSH
27721: LD_INT 0
27723: PPUSH
27724: CALL_OW 49
// end ;
27728: GO 27635
27730: POP
27731: POP
// end ; end_of_file
27732: LD_VAR 0 1
27736: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27737: LD_EXP 48
27741: PUSH
27742: LD_INT 1
27744: EQUAL
27745: IFFALSE 27840
27747: GO 27749
27749: DISABLE
// begin wait ( 0 0$10 ) ;
27750: LD_INT 350
27752: PPUSH
27753: CALL_OW 67
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27757: LD_INT 7
27759: PPUSH
27760: LD_INT 5
27762: PPUSH
27763: LD_INT 4
27765: PUSH
27766: LD_INT 5
27768: PUSH
27769: LD_INT 6
27771: PUSH
27772: LD_INT 8
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: PUSH
27781: LD_OWVAR 67
27785: ARRAY
27786: PPUSH
27787: LD_EXP 38
27791: PPUSH
27792: LD_EXP 39
27796: PPUSH
27797: CALL_OW 12
27801: PPUSH
27802: LD_INT 2
27804: PPUSH
27805: LD_INT 1
27807: PPUSH
27808: LD_INT 1
27810: PPUSH
27811: EMPTY
27812: PPUSH
27813: LD_INT 25
27815: PUSH
27816: LD_INT 26
27818: PUSH
27819: LD_INT 27
27821: PUSH
27822: LD_INT 28
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: PPUSH
27831: EMPTY
27832: PPUSH
27833: LD_INT 1
27835: PPUSH
27836: CALL 17597 0 11
// end ;
27840: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27841: LD_EXP 48
27845: PUSH
27846: LD_INT 1
27848: EQUAL
27849: IFFALSE 27941
27851: GO 27853
27853: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27854: LD_INT 5
27856: PPUSH
27857: LD_INT 2
27859: PPUSH
27860: LD_INT 5
27862: PUSH
27863: LD_INT 6
27865: PUSH
27866: LD_INT 8
27868: PUSH
27869: LD_INT 9
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: PUSH
27878: LD_OWVAR 67
27882: ARRAY
27883: PPUSH
27884: LD_INT 0
27886: PPUSH
27887: LD_INT 0
27889: PPUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 4
27895: PUSH
27896: LD_INT 5
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: PUSH
27904: LD_OWVAR 67
27908: ARRAY
27909: PPUSH
27910: LD_INT 0
27912: PPUSH
27913: LD_EXP 38
27917: PPUSH
27918: LD_EXP 39
27922: PPUSH
27923: CALL_OW 12
27927: PPUSH
27928: LD_INT 7
27930: PPUSH
27931: LD_INT 9
27933: PPUSH
27934: LD_INT 1
27936: PPUSH
27937: CALL 19301 0 11
27941: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27942: LD_EXP 48
27946: PUSH
27947: LD_INT 1
27949: EQUAL
27950: IFFALSE 27959
27952: GO 27954
27954: DISABLE
// PrepareArabianSheik ;
27955: CALL 4875 0 0
27959: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27960: LD_EXP 31
27964: PUSH
27965: LD_EXP 66
27969: PUSH
27970: LD_INT 1
27972: EQUAL
27973: AND
27974: IFFALSE 28043
27976: GO 27978
27978: DISABLE
// begin enable ;
27979: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27980: LD_INT 6
27982: PPUSH
27983: LD_INT 3
27985: PPUSH
27986: LD_EXP 62
27990: PPUSH
27991: LD_INT 0
27993: PPUSH
27994: LD_OWVAR 67
27998: PPUSH
27999: LD_INT 0
28001: PPUSH
28002: LD_EXP 62
28006: PUSH
28007: LD_INT 3
28009: DIV
28010: PUSH
28011: LD_INT 1
28013: PLUS
28014: PPUSH
28015: LD_EXP 38
28019: PPUSH
28020: LD_EXP 39
28024: PPUSH
28025: CALL_OW 12
28029: PPUSH
28030: LD_INT 17
28032: PPUSH
28033: LD_INT 18
28035: PPUSH
28036: LD_INT 1
28038: PPUSH
28039: CALL 19301 0 11
// end ;
28043: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
28044: LD_EXP 31
28048: PUSH
28049: LD_EXP 66
28053: PUSH
28054: LD_INT 1
28056: EQUAL
28057: AND
28058: IFFALSE 28147
28060: GO 28062
28062: DISABLE
// begin enable ;
28063: ENABLE
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28064: LD_EXP 18
28068: PPUSH
28069: LD_STRING D4-FSol1-2
28071: PPUSH
28072: CALL_OW 94
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
28076: LD_INT 17
28078: PPUSH
28079: LD_INT 6
28081: PPUSH
28082: LD_EXP 61
28086: PPUSH
28087: LD_EXP 38
28091: PPUSH
28092: LD_EXP 39
28096: PPUSH
28097: CALL_OW 12
28101: PPUSH
28102: LD_INT 3
28104: PPUSH
28105: LD_INT 1
28107: PPUSH
28108: LD_INT 3
28110: PUSH
28111: LD_INT 3
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PPUSH
28118: LD_INT 43
28120: PUSH
28121: LD_INT 44
28123: PUSH
28124: LD_INT 45
28126: PUSH
28127: LD_INT 46
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: PPUSH
28136: EMPTY
28137: PPUSH
28138: EMPTY
28139: PPUSH
28140: LD_INT 1
28142: PPUSH
28143: CALL 17597 0 11
// end ;
28147: END
// every 10 10$00 trigger joinEpsilon do
28148: LD_EXP 31
28152: IFFALSE 28206
28154: GO 28156
28156: DISABLE
// begin enable ;
28157: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
28158: LD_ADDR_EXP 61
28162: PUSH
28163: LD_EXP 61
28167: PUSH
28168: LD_INT 1
28170: PPUSH
28171: LD_OWVAR 67
28175: PPUSH
28176: CALL_OW 12
28180: PLUS
28181: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
28182: LD_ADDR_EXP 62
28186: PUSH
28187: LD_EXP 62
28191: PUSH
28192: LD_INT 1
28194: PPUSH
28195: LD_OWVAR 67
28199: PPUSH
28200: CALL_OW 12
28204: PLUS
28205: ST_TO_ADDR
// end ;
28206: END
// every 21 21$0 trigger attackAvalaible = 1 do
28207: LD_EXP 66
28211: PUSH
28212: LD_INT 1
28214: EQUAL
28215: IFFALSE 28228
28217: GO 28219
28219: DISABLE
// attackAvalaible = 0 ; end_of_file
28220: LD_ADDR_EXP 66
28224: PUSH
28225: LD_INT 0
28227: ST_TO_ADDR
28228: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28229: LD_INT 54
28231: PPUSH
28232: LD_INT 1
28234: PPUSH
28235: CALL_OW 321
28239: PUSH
28240: LD_INT 2
28242: EQUAL
28243: PUSH
28244: LD_INT 55
28246: PPUSH
28247: LD_INT 1
28249: PPUSH
28250: CALL_OW 321
28254: PUSH
28255: LD_INT 2
28257: EQUAL
28258: AND
28259: PUSH
28260: LD_INT 21
28262: PPUSH
28263: LD_INT 1
28265: PPUSH
28266: CALL_OW 321
28270: PUSH
28271: LD_INT 2
28273: EQUAL
28274: AND
28275: PUSH
28276: LD_INT 22
28278: PPUSH
28279: LD_INT 1
28281: PPUSH
28282: CALL_OW 321
28286: PUSH
28287: LD_INT 2
28289: EQUAL
28290: AND
28291: PUSH
28292: LD_INT 12
28294: PPUSH
28295: LD_INT 1
28297: PPUSH
28298: CALL_OW 321
28302: PUSH
28303: LD_INT 1
28305: EQUAL
28306: PUSH
28307: LD_INT 32
28309: PPUSH
28310: LD_INT 1
28312: PPUSH
28313: CALL_OW 321
28317: PUSH
28318: LD_INT 1
28320: EQUAL
28321: OR
28322: PUSH
28323: EMPTY
28324: LIST
28325: AND
28326: PUSH
28327: LD_EXP 50
28331: PUSH
28332: LD_INT 1
28334: EQUAL
28335: AND
28336: PUSH
28337: LD_INT 22
28339: PUSH
28340: LD_INT 3
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 21
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: PUSH
28366: LD_INT 0
28368: EQUAL
28369: AND
28370: IFFALSE 28426
28372: GO 28374
28374: DISABLE
// begin case query ( QEndMission ) of 1 :
28375: LD_STRING QEndMission
28377: PPUSH
28378: CALL_OW 97
28382: PUSH
28383: LD_INT 1
28385: DOUBLE
28386: EQUAL
28387: IFTRUE 28391
28389: GO 28402
28391: POP
// begin end_the_mission_allowed = true ;
28392: LD_ADDR_OWVAR 57
28396: PUSH
28397: LD_INT 1
28399: ST_TO_ADDR
// end ; 2 :
28400: GO 28426
28402: LD_INT 2
28404: DOUBLE
28405: EQUAL
28406: IFTRUE 28410
28408: GO 28425
28410: POP
// begin fastEnd = 1 ;
28411: LD_ADDR_EXP 65
28415: PUSH
28416: LD_INT 1
28418: ST_TO_ADDR
// FinishMission ;
28419: CALL 28471 0 0
// end ; end ;
28423: GO 28426
28425: POP
// end ;
28426: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28427: LD_EXP 60
28431: PUSH
28432: LD_EXP 59
28436: NOT
28437: AND
28438: PUSH
28439: LD_INT 22
28441: PUSH
28442: LD_INT 3
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 69
28453: PUSH
28454: LD_INT 0
28456: EQUAL
28457: AND
28458: IFFALSE 28470
28460: GO 28462
28462: DISABLE
// SetAchievement ( ACH_TACT ) ;
28463: LD_STRING ACH_TACT
28465: PPUSH
28466: CALL_OW 543
28470: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28471: LD_INT 0
28473: PPUSH
28474: PPUSH
28475: PPUSH
28476: PPUSH
// if not snipersTrained then
28477: LD_EXP 64
28481: NOT
28482: IFFALSE 28491
// SetAchievement ( ACH_SNIPER ) ;
28484: LD_STRING ACH_SNIPER
28486: PPUSH
28487: CALL_OW 543
// m1 := false ;
28491: LD_ADDR_VAR 0 2
28495: PUSH
28496: LD_INT 0
28498: ST_TO_ADDR
// m2 := false ;
28499: LD_ADDR_VAR 0 3
28503: PUSH
28504: LD_INT 0
28506: ST_TO_ADDR
// m3 := false ;
28507: LD_ADDR_VAR 0 4
28511: PUSH
28512: LD_INT 0
28514: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28515: LD_EXP 55
28519: PPUSH
28520: LD_STRING 10_KhatamStatus_1
28522: PPUSH
28523: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28527: LD_EXP 54
28531: PPUSH
28532: LD_STRING 10_GensherEscape_1
28534: PPUSH
28535: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28539: LD_INT 12
28541: PPUSH
28542: LD_INT 1
28544: PPUSH
28545: CALL_OW 321
28549: PUSH
28550: LD_INT 2
28552: EQUAL
28553: IFFALSE 28575
// begin AddMedal ( sights , 1 ) ;
28555: LD_STRING sights
28557: PPUSH
28558: LD_INT 1
28560: PPUSH
28561: CALL_OW 101
// m1 := true ;
28565: LD_ADDR_VAR 0 2
28569: PUSH
28570: LD_INT 1
28572: ST_TO_ADDR
// end else
28573: GO 28586
// begin AddMedal ( sights , - 1 ) ;
28575: LD_STRING sights
28577: PPUSH
28578: LD_INT 1
28580: NEG
28581: PPUSH
28582: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28586: LD_INT 32
28588: PPUSH
28589: LD_INT 1
28591: PPUSH
28592: CALL_OW 321
28596: PUSH
28597: LD_INT 2
28599: EQUAL
28600: IFFALSE 28622
// begin AddMedal ( computers , 1 ) ;
28602: LD_STRING computers
28604: PPUSH
28605: LD_INT 1
28607: PPUSH
28608: CALL_OW 101
// m2 := true ;
28612: LD_ADDR_VAR 0 3
28616: PUSH
28617: LD_INT 1
28619: ST_TO_ADDR
// end else
28620: GO 28633
// begin AddMedal ( computers , - 1 ) ;
28622: LD_STRING computers
28624: PPUSH
28625: LD_INT 1
28627: NEG
28628: PPUSH
28629: CALL_OW 101
// end ; if arabianEscape = 0 then
28633: LD_EXP 49
28637: PUSH
28638: LD_INT 0
28640: EQUAL
28641: IFFALSE 28673
// begin AddMedal ( renegades , 2 ) ;
28643: LD_STRING renegades
28645: PPUSH
28646: LD_INT 2
28648: PPUSH
28649: CALL_OW 101
// m3 := true ;
28653: LD_ADDR_VAR 0 4
28657: PUSH
28658: LD_INT 1
28660: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28661: LD_INT 0
28663: PPUSH
28664: LD_STRING 10_ScientistsEscape_1
28666: PPUSH
28667: CALL_OW 39
// end else
28671: GO 28684
// begin AddMedal ( renegades , - 1 ) ;
28673: LD_STRING renegades
28675: PPUSH
28676: LD_INT 1
28678: NEG
28679: PPUSH
28680: CALL_OW 101
// end ; SaveEpsilonBase ;
28684: CALL 29499 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28688: LD_VAR 0 2
28692: PUSH
28693: LD_VAR 0 3
28697: AND
28698: PUSH
28699: LD_VAR 0 4
28703: AND
28704: PUSH
28705: LD_OWVAR 67
28709: PUSH
28710: LD_INT 3
28712: GREATEREQUAL
28713: AND
28714: IFFALSE 28726
// SetAchievementEX ( ACH_AMER , 10 ) ;
28716: LD_STRING ACH_AMER
28718: PPUSH
28719: LD_INT 10
28721: PPUSH
28722: CALL_OW 564
// if tick <= 40 40$00 then
28726: LD_OWVAR 1
28730: PUSH
28731: LD_INT 84000
28733: LESSEQUAL
28734: IFFALSE 28750
// begin wait ( 3 ) ;
28736: LD_INT 3
28738: PPUSH
28739: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28743: LD_STRING ACH_ASPEED_10
28745: PPUSH
28746: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28750: LD_STRING Main
28752: PPUSH
28753: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28757: LD_INT 22
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 23
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 21
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 25
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 25
28802: PUSH
28803: LD_INT 2
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 25
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 25
28822: PUSH
28823: LD_INT 4
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 25
28832: PUSH
28833: LD_INT 5
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 25
28842: PUSH
28843: LD_INT 8
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: PPUSH
28865: CALL_OW 69
28869: PPUSH
28870: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28874: LD_EXP 1
28878: PPUSH
28879: LD_EXP 56
28883: PUSH
28884: LD_STRING JMM
28886: STR
28887: PPUSH
28888: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28892: LD_EXP 2
28896: PPUSH
28897: LD_EXP 56
28901: PUSH
28902: LD_STRING Brown
28904: STR
28905: PPUSH
28906: CALL 11768 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28910: LD_EXP 3
28914: PPUSH
28915: LD_EXP 56
28919: PUSH
28920: LD_STRING Donaldson
28922: STR
28923: PPUSH
28924: CALL 11768 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28928: LD_EXP 4
28932: PPUSH
28933: LD_EXP 56
28937: PUSH
28938: LD_STRING Bobby
28940: STR
28941: PPUSH
28942: CALL 11768 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28946: LD_EXP 5
28950: PPUSH
28951: LD_EXP 56
28955: PUSH
28956: LD_STRING Cyrus
28958: STR
28959: PPUSH
28960: CALL 11768 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28964: LD_EXP 6
28968: PPUSH
28969: LD_EXP 56
28973: PUSH
28974: LD_STRING Lisa
28976: STR
28977: PPUSH
28978: CALL 11768 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28982: LD_EXP 7
28986: PPUSH
28987: LD_EXP 56
28991: PUSH
28992: LD_STRING Frank
28994: STR
28995: PPUSH
28996: CALL 11768 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
29000: LD_EXP 8
29004: PPUSH
29005: LD_EXP 56
29009: PUSH
29010: LD_STRING Kikuchi
29012: STR
29013: PPUSH
29014: CALL 11768 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
29018: LD_EXP 9
29022: PPUSH
29023: LD_EXP 56
29027: PUSH
29028: LD_STRING Houten
29030: STR
29031: PPUSH
29032: CALL 11768 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
29036: LD_EXP 10
29040: PPUSH
29041: LD_EXP 56
29045: PUSH
29046: LD_STRING Gary
29048: STR
29049: PPUSH
29050: CALL 11768 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
29054: LD_EXP 20
29058: PPUSH
29059: LD_EXP 56
29063: PUSH
29064: LD_STRING Cornell
29066: STR
29067: PPUSH
29068: CALL 11768 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
29072: LD_EXP 11
29076: PPUSH
29077: LD_EXP 56
29081: PUSH
29082: LD_STRING Simms
29084: STR
29085: PPUSH
29086: CALL 11768 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
29090: LD_EXP 12
29094: PPUSH
29095: LD_EXP 56
29099: PUSH
29100: LD_STRING Denis
29102: STR
29103: PPUSH
29104: CALL 11768 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
29108: LD_EXP 13
29112: PPUSH
29113: LD_EXP 56
29117: PUSH
29118: LD_STRING Joan
29120: STR
29121: PPUSH
29122: CALL 11768 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
29126: LD_EXP 15
29130: PPUSH
29131: LD_EXP 56
29135: PUSH
29136: LD_STRING Gladstone
29138: STR
29139: PPUSH
29140: CALL 11768 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
29144: LD_EXP 17
29148: PPUSH
29149: LD_EXP 56
29153: PUSH
29154: LD_STRING DeltaDoctor
29156: STR
29157: PPUSH
29158: CALL 11768 0 2
// if IsLive ( Mike ) then
29162: LD_EXP 19
29166: PPUSH
29167: CALL_OW 300
29171: IFFALSE 29191
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
29173: LD_EXP 19
29177: PPUSH
29178: LD_EXP 56
29182: PUSH
29183: LD_STRING Mike
29185: STR
29186: PPUSH
29187: CALL_OW 38
// SaveCharacters ( others09 , 10c_lock ) ;
29191: LD_EXP 24
29195: PPUSH
29196: LD_STRING 10c_lock
29198: PPUSH
29199: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
29203: LD_INT 50
29205: PUSH
29206: EMPTY
29207: LIST
29208: PUSH
29209: LD_INT 22
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 21
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: LD_INT 25
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 25
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 25
29254: PUSH
29255: LD_INT 3
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 25
29264: PUSH
29265: LD_INT 4
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 25
29274: PUSH
29275: LD_INT 5
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 25
29284: PUSH
29285: LD_INT 8
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 69
29311: PUSH
29312: LD_EXP 1
29316: PUSH
29317: LD_EXP 2
29321: PUSH
29322: LD_EXP 3
29326: PUSH
29327: LD_EXP 4
29331: PUSH
29332: LD_EXP 5
29336: PUSH
29337: LD_EXP 6
29341: PUSH
29342: LD_EXP 7
29346: PUSH
29347: LD_EXP 15
29351: PUSH
29352: LD_EXP 8
29356: PUSH
29357: LD_EXP 12
29361: PUSH
29362: LD_EXP 13
29366: PUSH
29367: LD_EXP 9
29371: PUSH
29372: LD_EXP 11
29376: PUSH
29377: LD_EXP 10
29381: PUSH
29382: LD_EXP 17
29386: PUSH
29387: LD_EXP 20
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: DIFF
29410: PPUSH
29411: LD_STRING 10_other_survivors
29413: PPUSH
29414: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29418: LD_INT 50
29420: PUSH
29421: EMPTY
29422: LIST
29423: PUSH
29424: LD_INT 22
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 21
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: LD_INT 25
29449: PUSH
29450: LD_INT 16
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 25
29459: PUSH
29460: LD_INT 12
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: PPUSH
29478: CALL_OW 69
29482: PPUSH
29483: LD_STRING 10_ape
29485: PPUSH
29486: CALL_OW 38
// YouWin ;
29490: CALL_OW 103
// end ;
29494: LD_VAR 0 1
29498: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29499: LD_INT 0
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
// epsilonBase = [ ] ;
29505: LD_ADDR_VAR 0 2
29509: PUSH
29510: EMPTY
29511: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29512: LD_ADDR_VAR 0 3
29516: PUSH
29517: LD_INT 22
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 21
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 50
29539: PUSH
29540: EMPTY
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: PPUSH
29548: CALL_OW 69
29552: ST_TO_ADDR
// for i in buildings do
29553: LD_ADDR_VAR 0 4
29557: PUSH
29558: LD_VAR 0 3
29562: PUSH
29563: FOR_IN
29564: IFFALSE 30016
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29566: LD_VAR 0 4
29570: PPUSH
29571: CALL_OW 266
29575: PUSH
29576: LD_INT 6
29578: PUSH
29579: LD_INT 7
29581: PUSH
29582: LD_INT 8
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: LIST
29589: IN
29590: IFFALSE 29704
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_VAR 0 2
29601: PUSH
29602: LD_VAR 0 4
29606: PPUSH
29607: CALL_OW 266
29611: PUSH
29612: LD_VAR 0 4
29616: PPUSH
29617: CALL_OW 250
29621: PUSH
29622: LD_VAR 0 4
29626: PPUSH
29627: CALL_OW 251
29631: PUSH
29632: LD_VAR 0 4
29636: PPUSH
29637: CALL_OW 254
29641: PUSH
29642: LD_VAR 0 4
29646: PPUSH
29647: CALL_OW 267
29651: PUSH
29652: LD_VAR 0 4
29656: PPUSH
29657: CALL_OW 248
29661: PUSH
29662: LD_VAR 0 4
29666: PPUSH
29667: LD_INT 1
29669: PPUSH
29670: CALL_OW 268
29674: PUSH
29675: LD_VAR 0 4
29679: PPUSH
29680: LD_INT 2
29682: PPUSH
29683: CALL_OW 268
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: ADD
29701: ST_TO_ADDR
29702: GO 30014
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29704: LD_VAR 0 4
29708: PPUSH
29709: CALL_OW 266
29713: PUSH
29714: LD_INT 32
29716: EQUAL
29717: PUSH
29718: LD_VAR 0 4
29722: PPUSH
29723: CALL_OW 266
29727: PUSH
29728: LD_INT 33
29730: EQUAL
29731: OR
29732: IFFALSE 29829
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29734: LD_ADDR_VAR 0 2
29738: PUSH
29739: LD_VAR 0 2
29743: PUSH
29744: LD_VAR 0 4
29748: PPUSH
29749: CALL_OW 266
29753: PUSH
29754: LD_VAR 0 4
29758: PPUSH
29759: CALL_OW 250
29763: PUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: CALL_OW 251
29773: PUSH
29774: LD_VAR 0 4
29778: PPUSH
29779: CALL_OW 254
29783: PUSH
29784: LD_VAR 0 4
29788: PPUSH
29789: CALL_OW 267
29793: PUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: CALL_OW 248
29803: PUSH
29804: LD_VAR 0 4
29808: PPUSH
29809: CALL_OW 269
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: ADD
29826: ST_TO_ADDR
29827: GO 30014
// if GetBType ( i ) = b_factory then
29829: LD_VAR 0 4
29833: PPUSH
29834: CALL_OW 266
29838: PUSH
29839: LD_INT 3
29841: EQUAL
29842: IFFALSE 29932
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29844: LD_ADDR_VAR 0 2
29848: PUSH
29849: LD_VAR 0 2
29853: PPUSH
29854: LD_INT 1
29856: PPUSH
29857: LD_VAR 0 4
29861: PPUSH
29862: CALL_OW 266
29866: PUSH
29867: LD_VAR 0 4
29871: PPUSH
29872: CALL_OW 250
29876: PUSH
29877: LD_VAR 0 4
29881: PPUSH
29882: CALL_OW 251
29886: PUSH
29887: LD_VAR 0 4
29891: PPUSH
29892: CALL_OW 254
29896: PUSH
29897: LD_VAR 0 4
29901: PPUSH
29902: CALL_OW 267
29906: PUSH
29907: LD_VAR 0 4
29911: PPUSH
29912: CALL_OW 248
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 2
29929: ST_TO_ADDR
29930: GO 30014
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29932: LD_ADDR_VAR 0 2
29936: PUSH
29937: LD_VAR 0 2
29941: PUSH
29942: LD_VAR 0 4
29946: PPUSH
29947: CALL_OW 266
29951: PUSH
29952: LD_VAR 0 4
29956: PPUSH
29957: CALL_OW 250
29961: PUSH
29962: LD_VAR 0 4
29966: PPUSH
29967: CALL_OW 251
29971: PUSH
29972: LD_VAR 0 4
29976: PPUSH
29977: CALL_OW 254
29981: PUSH
29982: LD_VAR 0 4
29986: PPUSH
29987: CALL_OW 267
29991: PUSH
29992: LD_VAR 0 4
29996: PPUSH
29997: CALL_OW 248
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: ADD
30013: ST_TO_ADDR
// end ;
30014: GO 29563
30016: POP
30017: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
30018: LD_VAR 0 2
30022: PPUSH
30023: LD_STRING 10_EpsilonBase
30025: PPUSH
30026: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
30030: LD_INT 19
30032: PPUSH
30033: LD_STRING 10_EpsilonEnv
30035: PPUSH
30036: CALL 30045 0 2
// end ;
30040: LD_VAR 0 1
30044: RET
// export function SaveEnvironment ( area , saveId ) ; begin
30045: LD_INT 0
30047: PPUSH
// result := ListEnvironmentArea ( area ) ;
30048: LD_ADDR_VAR 0 3
30052: PUSH
30053: LD_VAR 0 1
30057: PPUSH
30058: CALL_OW 353
30062: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
30063: LD_VAR 0 3
30067: PPUSH
30068: LD_VAR 0 2
30072: PPUSH
30073: CALL_OW 39
// end ; end_of_file
30077: LD_VAR 0 3
30081: RET
// every 0 0$01 do var timer ;
30082: GO 30084
30084: DISABLE
30085: LD_INT 0
30087: PPUSH
// begin timer := 0 0$20 ;
30088: LD_ADDR_VAR 0 1
30092: PUSH
30093: LD_INT 700
30095: ST_TO_ADDR
// repeat wait ( timer ) ;
30096: LD_VAR 0 1
30100: PPUSH
30101: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
30105: LD_EXP 58
30109: PUSH
30110: LD_INT 6
30112: GREATEREQUAL
30113: PUSH
30114: LD_EXP 58
30118: PUSH
30119: LD_INT 14
30121: LESS
30122: AND
30123: IFFALSE 30139
// timer := timer + 0 0$3 ;
30125: LD_ADDR_VAR 0 1
30129: PUSH
30130: LD_VAR 0 1
30134: PUSH
30135: LD_INT 105
30137: PLUS
30138: ST_TO_ADDR
// if cratesSpawned >= 14 then
30139: LD_EXP 58
30143: PUSH
30144: LD_INT 14
30146: GREATEREQUAL
30147: IFFALSE 30163
// timer := timer + 0 0$6 ;
30149: LD_ADDR_VAR 0 1
30153: PUSH
30154: LD_VAR 0 1
30158: PUSH
30159: LD_INT 210
30161: PLUS
30162: ST_TO_ADDR
// if timer > 2 2$00 then
30163: LD_VAR 0 1
30167: PUSH
30168: LD_INT 4200
30170: GREATER
30171: IFFALSE 30181
// timer := 0 0$45 ;
30173: LD_ADDR_VAR 0 1
30177: PUSH
30178: LD_INT 1575
30180: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
30181: LD_INT 1
30183: PPUSH
30184: LD_INT 5
30186: PPUSH
30187: CALL_OW 12
30191: PPUSH
30192: LD_INT 16
30194: PPUSH
30195: LD_INT 1
30197: PPUSH
30198: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
30202: LD_ADDR_EXP 58
30206: PUSH
30207: LD_EXP 58
30211: PUSH
30212: LD_INT 1
30214: PLUS
30215: ST_TO_ADDR
// until false ;
30216: LD_INT 0
30218: IFFALSE 30096
// end ; end_of_file end_of_file
30220: PPOPN 1
30222: END
// export globalGameSaveCounter ; every 0 0$1 do
30223: GO 30225
30225: DISABLE
// begin enable ;
30226: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30227: LD_STRING updateTimer(
30229: PUSH
30230: LD_OWVAR 1
30234: STR
30235: PUSH
30236: LD_STRING );
30238: STR
30239: PPUSH
30240: CALL_OW 559
// end ;
30244: END
// every 0 0$1 do
30245: GO 30247
30247: DISABLE
// begin globalGameSaveCounter := 0 ;
30248: LD_ADDR_EXP 71
30252: PUSH
30253: LD_INT 0
30255: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
30256: LD_STRING setGameSaveCounter(0)
30258: PPUSH
30259: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
30263: LD_STRING initStreamRollete();
30265: PPUSH
30266: CALL_OW 559
// InitStreamMode ;
30270: CALL 31596 0 0
// DefineStreamItems ( false ) ;
30274: LD_INT 0
30276: PPUSH
30277: CALL 32060 0 1
// end ;
30281: END
// export function SOS_MapStart ( ) ; begin
30282: LD_INT 0
30284: PPUSH
// if streamModeActive then
30285: LD_EXP 72
30289: IFFALSE 30298
// DefineStreamItems ( true ) ;
30291: LD_INT 1
30293: PPUSH
30294: CALL 32060 0 1
// UpdateLuaVariables ( ) ;
30298: CALL 30315 0 0
// UpdateFactoryWaypoints ( ) ;
30302: CALL 44921 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30306: CALL 45178 0 0
// end ;
30310: LD_VAR 0 1
30314: RET
// function UpdateLuaVariables ( ) ; begin
30315: LD_INT 0
30317: PPUSH
// if globalGameSaveCounter then
30318: LD_EXP 71
30322: IFFALSE 30356
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
30324: LD_ADDR_EXP 71
30328: PUSH
30329: LD_EXP 71
30333: PPUSH
30334: CALL 89135 0 1
30338: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
30339: LD_STRING setGameSaveCounter(
30341: PUSH
30342: LD_EXP 71
30346: STR
30347: PUSH
30348: LD_STRING )
30350: STR
30351: PPUSH
30352: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
30356: LD_STRING setGameDifficulty(
30358: PUSH
30359: LD_OWVAR 67
30363: STR
30364: PUSH
30365: LD_STRING )
30367: STR
30368: PPUSH
30369: CALL_OW 559
// end ;
30373: LD_VAR 0 1
30377: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30378: LD_INT 0
30380: PPUSH
// if p2 = stream_mode then
30381: LD_VAR 0 2
30385: PUSH
30386: LD_INT 100
30388: EQUAL
30389: IFFALSE 31392
// begin if not StreamModeActive then
30391: LD_EXP 72
30395: NOT
30396: IFFALSE 30406
// StreamModeActive := true ;
30398: LD_ADDR_EXP 72
30402: PUSH
30403: LD_INT 1
30405: ST_TO_ADDR
// if p3 = 0 then
30406: LD_VAR 0 3
30410: PUSH
30411: LD_INT 0
30413: EQUAL
30414: IFFALSE 30420
// InitStreamMode ;
30416: CALL 31596 0 0
// if p3 = 1 then
30420: LD_VAR 0 3
30424: PUSH
30425: LD_INT 1
30427: EQUAL
30428: IFFALSE 30438
// sRocket := true ;
30430: LD_ADDR_EXP 77
30434: PUSH
30435: LD_INT 1
30437: ST_TO_ADDR
// if p3 = 2 then
30438: LD_VAR 0 3
30442: PUSH
30443: LD_INT 2
30445: EQUAL
30446: IFFALSE 30456
// sSpeed := true ;
30448: LD_ADDR_EXP 76
30452: PUSH
30453: LD_INT 1
30455: ST_TO_ADDR
// if p3 = 3 then
30456: LD_VAR 0 3
30460: PUSH
30461: LD_INT 3
30463: EQUAL
30464: IFFALSE 30474
// sEngine := true ;
30466: LD_ADDR_EXP 78
30470: PUSH
30471: LD_INT 1
30473: ST_TO_ADDR
// if p3 = 4 then
30474: LD_VAR 0 3
30478: PUSH
30479: LD_INT 4
30481: EQUAL
30482: IFFALSE 30492
// sSpec := true ;
30484: LD_ADDR_EXP 75
30488: PUSH
30489: LD_INT 1
30491: ST_TO_ADDR
// if p3 = 5 then
30492: LD_VAR 0 3
30496: PUSH
30497: LD_INT 5
30499: EQUAL
30500: IFFALSE 30510
// sLevel := true ;
30502: LD_ADDR_EXP 79
30506: PUSH
30507: LD_INT 1
30509: ST_TO_ADDR
// if p3 = 6 then
30510: LD_VAR 0 3
30514: PUSH
30515: LD_INT 6
30517: EQUAL
30518: IFFALSE 30528
// sArmoury := true ;
30520: LD_ADDR_EXP 80
30524: PUSH
30525: LD_INT 1
30527: ST_TO_ADDR
// if p3 = 7 then
30528: LD_VAR 0 3
30532: PUSH
30533: LD_INT 7
30535: EQUAL
30536: IFFALSE 30546
// sRadar := true ;
30538: LD_ADDR_EXP 81
30542: PUSH
30543: LD_INT 1
30545: ST_TO_ADDR
// if p3 = 8 then
30546: LD_VAR 0 3
30550: PUSH
30551: LD_INT 8
30553: EQUAL
30554: IFFALSE 30564
// sBunker := true ;
30556: LD_ADDR_EXP 82
30560: PUSH
30561: LD_INT 1
30563: ST_TO_ADDR
// if p3 = 9 then
30564: LD_VAR 0 3
30568: PUSH
30569: LD_INT 9
30571: EQUAL
30572: IFFALSE 30582
// sHack := true ;
30574: LD_ADDR_EXP 83
30578: PUSH
30579: LD_INT 1
30581: ST_TO_ADDR
// if p3 = 10 then
30582: LD_VAR 0 3
30586: PUSH
30587: LD_INT 10
30589: EQUAL
30590: IFFALSE 30600
// sFire := true ;
30592: LD_ADDR_EXP 84
30596: PUSH
30597: LD_INT 1
30599: ST_TO_ADDR
// if p3 = 11 then
30600: LD_VAR 0 3
30604: PUSH
30605: LD_INT 11
30607: EQUAL
30608: IFFALSE 30618
// sRefresh := true ;
30610: LD_ADDR_EXP 85
30614: PUSH
30615: LD_INT 1
30617: ST_TO_ADDR
// if p3 = 12 then
30618: LD_VAR 0 3
30622: PUSH
30623: LD_INT 12
30625: EQUAL
30626: IFFALSE 30636
// sExp := true ;
30628: LD_ADDR_EXP 86
30632: PUSH
30633: LD_INT 1
30635: ST_TO_ADDR
// if p3 = 13 then
30636: LD_VAR 0 3
30640: PUSH
30641: LD_INT 13
30643: EQUAL
30644: IFFALSE 30654
// sDepot := true ;
30646: LD_ADDR_EXP 87
30650: PUSH
30651: LD_INT 1
30653: ST_TO_ADDR
// if p3 = 14 then
30654: LD_VAR 0 3
30658: PUSH
30659: LD_INT 14
30661: EQUAL
30662: IFFALSE 30672
// sFlag := true ;
30664: LD_ADDR_EXP 88
30668: PUSH
30669: LD_INT 1
30671: ST_TO_ADDR
// if p3 = 15 then
30672: LD_VAR 0 3
30676: PUSH
30677: LD_INT 15
30679: EQUAL
30680: IFFALSE 30690
// sKamikadze := true ;
30682: LD_ADDR_EXP 96
30686: PUSH
30687: LD_INT 1
30689: ST_TO_ADDR
// if p3 = 16 then
30690: LD_VAR 0 3
30694: PUSH
30695: LD_INT 16
30697: EQUAL
30698: IFFALSE 30708
// sTroll := true ;
30700: LD_ADDR_EXP 97
30704: PUSH
30705: LD_INT 1
30707: ST_TO_ADDR
// if p3 = 17 then
30708: LD_VAR 0 3
30712: PUSH
30713: LD_INT 17
30715: EQUAL
30716: IFFALSE 30726
// sSlow := true ;
30718: LD_ADDR_EXP 98
30722: PUSH
30723: LD_INT 1
30725: ST_TO_ADDR
// if p3 = 18 then
30726: LD_VAR 0 3
30730: PUSH
30731: LD_INT 18
30733: EQUAL
30734: IFFALSE 30744
// sLack := true ;
30736: LD_ADDR_EXP 99
30740: PUSH
30741: LD_INT 1
30743: ST_TO_ADDR
// if p3 = 19 then
30744: LD_VAR 0 3
30748: PUSH
30749: LD_INT 19
30751: EQUAL
30752: IFFALSE 30762
// sTank := true ;
30754: LD_ADDR_EXP 101
30758: PUSH
30759: LD_INT 1
30761: ST_TO_ADDR
// if p3 = 20 then
30762: LD_VAR 0 3
30766: PUSH
30767: LD_INT 20
30769: EQUAL
30770: IFFALSE 30780
// sRemote := true ;
30772: LD_ADDR_EXP 102
30776: PUSH
30777: LD_INT 1
30779: ST_TO_ADDR
// if p3 = 21 then
30780: LD_VAR 0 3
30784: PUSH
30785: LD_INT 21
30787: EQUAL
30788: IFFALSE 30798
// sPowell := true ;
30790: LD_ADDR_EXP 103
30794: PUSH
30795: LD_INT 1
30797: ST_TO_ADDR
// if p3 = 22 then
30798: LD_VAR 0 3
30802: PUSH
30803: LD_INT 22
30805: EQUAL
30806: IFFALSE 30816
// sTeleport := true ;
30808: LD_ADDR_EXP 106
30812: PUSH
30813: LD_INT 1
30815: ST_TO_ADDR
// if p3 = 23 then
30816: LD_VAR 0 3
30820: PUSH
30821: LD_INT 23
30823: EQUAL
30824: IFFALSE 30834
// sOilTower := true ;
30826: LD_ADDR_EXP 108
30830: PUSH
30831: LD_INT 1
30833: ST_TO_ADDR
// if p3 = 24 then
30834: LD_VAR 0 3
30838: PUSH
30839: LD_INT 24
30841: EQUAL
30842: IFFALSE 30852
// sShovel := true ;
30844: LD_ADDR_EXP 109
30848: PUSH
30849: LD_INT 1
30851: ST_TO_ADDR
// if p3 = 25 then
30852: LD_VAR 0 3
30856: PUSH
30857: LD_INT 25
30859: EQUAL
30860: IFFALSE 30870
// sSheik := true ;
30862: LD_ADDR_EXP 110
30866: PUSH
30867: LD_INT 1
30869: ST_TO_ADDR
// if p3 = 26 then
30870: LD_VAR 0 3
30874: PUSH
30875: LD_INT 26
30877: EQUAL
30878: IFFALSE 30888
// sEarthquake := true ;
30880: LD_ADDR_EXP 112
30884: PUSH
30885: LD_INT 1
30887: ST_TO_ADDR
// if p3 = 27 then
30888: LD_VAR 0 3
30892: PUSH
30893: LD_INT 27
30895: EQUAL
30896: IFFALSE 30906
// sAI := true ;
30898: LD_ADDR_EXP 113
30902: PUSH
30903: LD_INT 1
30905: ST_TO_ADDR
// if p3 = 28 then
30906: LD_VAR 0 3
30910: PUSH
30911: LD_INT 28
30913: EQUAL
30914: IFFALSE 30924
// sCargo := true ;
30916: LD_ADDR_EXP 116
30920: PUSH
30921: LD_INT 1
30923: ST_TO_ADDR
// if p3 = 29 then
30924: LD_VAR 0 3
30928: PUSH
30929: LD_INT 29
30931: EQUAL
30932: IFFALSE 30942
// sDLaser := true ;
30934: LD_ADDR_EXP 117
30938: PUSH
30939: LD_INT 1
30941: ST_TO_ADDR
// if p3 = 30 then
30942: LD_VAR 0 3
30946: PUSH
30947: LD_INT 30
30949: EQUAL
30950: IFFALSE 30960
// sExchange := true ;
30952: LD_ADDR_EXP 118
30956: PUSH
30957: LD_INT 1
30959: ST_TO_ADDR
// if p3 = 31 then
30960: LD_VAR 0 3
30964: PUSH
30965: LD_INT 31
30967: EQUAL
30968: IFFALSE 30978
// sFac := true ;
30970: LD_ADDR_EXP 119
30974: PUSH
30975: LD_INT 1
30977: ST_TO_ADDR
// if p3 = 32 then
30978: LD_VAR 0 3
30982: PUSH
30983: LD_INT 32
30985: EQUAL
30986: IFFALSE 30996
// sPower := true ;
30988: LD_ADDR_EXP 120
30992: PUSH
30993: LD_INT 1
30995: ST_TO_ADDR
// if p3 = 33 then
30996: LD_VAR 0 3
31000: PUSH
31001: LD_INT 33
31003: EQUAL
31004: IFFALSE 31014
// sRandom := true ;
31006: LD_ADDR_EXP 121
31010: PUSH
31011: LD_INT 1
31013: ST_TO_ADDR
// if p3 = 34 then
31014: LD_VAR 0 3
31018: PUSH
31019: LD_INT 34
31021: EQUAL
31022: IFFALSE 31032
// sShield := true ;
31024: LD_ADDR_EXP 122
31028: PUSH
31029: LD_INT 1
31031: ST_TO_ADDR
// if p3 = 35 then
31032: LD_VAR 0 3
31036: PUSH
31037: LD_INT 35
31039: EQUAL
31040: IFFALSE 31050
// sTime := true ;
31042: LD_ADDR_EXP 123
31046: PUSH
31047: LD_INT 1
31049: ST_TO_ADDR
// if p3 = 36 then
31050: LD_VAR 0 3
31054: PUSH
31055: LD_INT 36
31057: EQUAL
31058: IFFALSE 31068
// sTools := true ;
31060: LD_ADDR_EXP 124
31064: PUSH
31065: LD_INT 1
31067: ST_TO_ADDR
// if p3 = 101 then
31068: LD_VAR 0 3
31072: PUSH
31073: LD_INT 101
31075: EQUAL
31076: IFFALSE 31086
// sSold := true ;
31078: LD_ADDR_EXP 89
31082: PUSH
31083: LD_INT 1
31085: ST_TO_ADDR
// if p3 = 102 then
31086: LD_VAR 0 3
31090: PUSH
31091: LD_INT 102
31093: EQUAL
31094: IFFALSE 31104
// sDiff := true ;
31096: LD_ADDR_EXP 90
31100: PUSH
31101: LD_INT 1
31103: ST_TO_ADDR
// if p3 = 103 then
31104: LD_VAR 0 3
31108: PUSH
31109: LD_INT 103
31111: EQUAL
31112: IFFALSE 31122
// sFog := true ;
31114: LD_ADDR_EXP 93
31118: PUSH
31119: LD_INT 1
31121: ST_TO_ADDR
// if p3 = 104 then
31122: LD_VAR 0 3
31126: PUSH
31127: LD_INT 104
31129: EQUAL
31130: IFFALSE 31140
// sReset := true ;
31132: LD_ADDR_EXP 94
31136: PUSH
31137: LD_INT 1
31139: ST_TO_ADDR
// if p3 = 105 then
31140: LD_VAR 0 3
31144: PUSH
31145: LD_INT 105
31147: EQUAL
31148: IFFALSE 31158
// sSun := true ;
31150: LD_ADDR_EXP 95
31154: PUSH
31155: LD_INT 1
31157: ST_TO_ADDR
// if p3 = 106 then
31158: LD_VAR 0 3
31162: PUSH
31163: LD_INT 106
31165: EQUAL
31166: IFFALSE 31176
// sTiger := true ;
31168: LD_ADDR_EXP 91
31172: PUSH
31173: LD_INT 1
31175: ST_TO_ADDR
// if p3 = 107 then
31176: LD_VAR 0 3
31180: PUSH
31181: LD_INT 107
31183: EQUAL
31184: IFFALSE 31194
// sBomb := true ;
31186: LD_ADDR_EXP 92
31190: PUSH
31191: LD_INT 1
31193: ST_TO_ADDR
// if p3 = 108 then
31194: LD_VAR 0 3
31198: PUSH
31199: LD_INT 108
31201: EQUAL
31202: IFFALSE 31212
// sWound := true ;
31204: LD_ADDR_EXP 100
31208: PUSH
31209: LD_INT 1
31211: ST_TO_ADDR
// if p3 = 109 then
31212: LD_VAR 0 3
31216: PUSH
31217: LD_INT 109
31219: EQUAL
31220: IFFALSE 31230
// sBetray := true ;
31222: LD_ADDR_EXP 104
31226: PUSH
31227: LD_INT 1
31229: ST_TO_ADDR
// if p3 = 110 then
31230: LD_VAR 0 3
31234: PUSH
31235: LD_INT 110
31237: EQUAL
31238: IFFALSE 31248
// sContamin := true ;
31240: LD_ADDR_EXP 105
31244: PUSH
31245: LD_INT 1
31247: ST_TO_ADDR
// if p3 = 111 then
31248: LD_VAR 0 3
31252: PUSH
31253: LD_INT 111
31255: EQUAL
31256: IFFALSE 31266
// sOil := true ;
31258: LD_ADDR_EXP 107
31262: PUSH
31263: LD_INT 1
31265: ST_TO_ADDR
// if p3 = 112 then
31266: LD_VAR 0 3
31270: PUSH
31271: LD_INT 112
31273: EQUAL
31274: IFFALSE 31284
// sStu := true ;
31276: LD_ADDR_EXP 111
31280: PUSH
31281: LD_INT 1
31283: ST_TO_ADDR
// if p3 = 113 then
31284: LD_VAR 0 3
31288: PUSH
31289: LD_INT 113
31291: EQUAL
31292: IFFALSE 31302
// sBazooka := true ;
31294: LD_ADDR_EXP 114
31298: PUSH
31299: LD_INT 1
31301: ST_TO_ADDR
// if p3 = 114 then
31302: LD_VAR 0 3
31306: PUSH
31307: LD_INT 114
31309: EQUAL
31310: IFFALSE 31320
// sMortar := true ;
31312: LD_ADDR_EXP 115
31316: PUSH
31317: LD_INT 1
31319: ST_TO_ADDR
// if p3 = 115 then
31320: LD_VAR 0 3
31324: PUSH
31325: LD_INT 115
31327: EQUAL
31328: IFFALSE 31338
// sRanger := true ;
31330: LD_ADDR_EXP 125
31334: PUSH
31335: LD_INT 1
31337: ST_TO_ADDR
// if p3 = 116 then
31338: LD_VAR 0 3
31342: PUSH
31343: LD_INT 116
31345: EQUAL
31346: IFFALSE 31356
// sComputer := true ;
31348: LD_ADDR_EXP 126
31352: PUSH
31353: LD_INT 1
31355: ST_TO_ADDR
// if p3 = 117 then
31356: LD_VAR 0 3
31360: PUSH
31361: LD_INT 117
31363: EQUAL
31364: IFFALSE 31374
// s30 := true ;
31366: LD_ADDR_EXP 127
31370: PUSH
31371: LD_INT 1
31373: ST_TO_ADDR
// if p3 = 118 then
31374: LD_VAR 0 3
31378: PUSH
31379: LD_INT 118
31381: EQUAL
31382: IFFALSE 31392
// s60 := true ;
31384: LD_ADDR_EXP 128
31388: PUSH
31389: LD_INT 1
31391: ST_TO_ADDR
// end ; if p2 = hack_mode then
31392: LD_VAR 0 2
31396: PUSH
31397: LD_INT 101
31399: EQUAL
31400: IFFALSE 31528
// begin case p3 of 1 :
31402: LD_VAR 0 3
31406: PUSH
31407: LD_INT 1
31409: DOUBLE
31410: EQUAL
31411: IFTRUE 31415
31413: GO 31422
31415: POP
// hHackUnlimitedResources ; 2 :
31416: CALL 43667 0 0
31420: GO 31528
31422: LD_INT 2
31424: DOUBLE
31425: EQUAL
31426: IFTRUE 31430
31428: GO 31437
31430: POP
// hHackSetLevel10 ; 3 :
31431: CALL 43800 0 0
31435: GO 31528
31437: LD_INT 3
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31452
31445: POP
// hHackSetLevel10YourUnits ; 4 :
31446: CALL 43885 0 0
31450: GO 31528
31452: LD_INT 4
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31467
31460: POP
// hHackInvincible ; 5 :
31461: CALL 44333 0 0
31465: GO 31528
31467: LD_INT 5
31469: DOUBLE
31470: EQUAL
31471: IFTRUE 31475
31473: GO 31482
31475: POP
// hHackInvisible ; 6 :
31476: CALL 44444 0 0
31480: GO 31528
31482: LD_INT 6
31484: DOUBLE
31485: EQUAL
31486: IFTRUE 31490
31488: GO 31497
31490: POP
// hHackChangeYourSide ; 7 :
31491: CALL 44501 0 0
31495: GO 31528
31497: LD_INT 7
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31512
31505: POP
// hHackChangeUnitSide ; 8 :
31506: CALL 44543 0 0
31510: GO 31528
31512: LD_INT 8
31514: DOUBLE
31515: EQUAL
31516: IFTRUE 31520
31518: GO 31527
31520: POP
// hHackFog ; end ;
31521: CALL 44644 0 0
31525: GO 31528
31527: POP
// end ; if p2 = game_save_mode then
31528: LD_VAR 0 2
31532: PUSH
31533: LD_INT 102
31535: EQUAL
31536: IFFALSE 31591
// begin if p3 = 1 then
31538: LD_VAR 0 3
31542: PUSH
31543: LD_INT 1
31545: EQUAL
31546: IFFALSE 31558
// globalGameSaveCounter := p4 ;
31548: LD_ADDR_EXP 71
31552: PUSH
31553: LD_VAR 0 4
31557: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
31558: LD_VAR 0 3
31562: PUSH
31563: LD_INT 2
31565: EQUAL
31566: PUSH
31567: LD_EXP 71
31571: AND
31572: IFFALSE 31591
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
31574: LD_STRING setGameSaveCounter(
31576: PUSH
31577: LD_EXP 71
31581: STR
31582: PUSH
31583: LD_STRING )
31585: STR
31586: PPUSH
31587: CALL_OW 559
// end ; end ;
31591: LD_VAR 0 7
31595: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
31596: LD_INT 0
31598: PPUSH
// streamModeActive := false ;
31599: LD_ADDR_EXP 72
31603: PUSH
31604: LD_INT 0
31606: ST_TO_ADDR
// normalCounter := 36 ;
31607: LD_ADDR_EXP 73
31611: PUSH
31612: LD_INT 36
31614: ST_TO_ADDR
// hardcoreCounter := 18 ;
31615: LD_ADDR_EXP 74
31619: PUSH
31620: LD_INT 18
31622: ST_TO_ADDR
// sRocket := false ;
31623: LD_ADDR_EXP 77
31627: PUSH
31628: LD_INT 0
31630: ST_TO_ADDR
// sSpeed := false ;
31631: LD_ADDR_EXP 76
31635: PUSH
31636: LD_INT 0
31638: ST_TO_ADDR
// sEngine := false ;
31639: LD_ADDR_EXP 78
31643: PUSH
31644: LD_INT 0
31646: ST_TO_ADDR
// sSpec := false ;
31647: LD_ADDR_EXP 75
31651: PUSH
31652: LD_INT 0
31654: ST_TO_ADDR
// sLevel := false ;
31655: LD_ADDR_EXP 79
31659: PUSH
31660: LD_INT 0
31662: ST_TO_ADDR
// sArmoury := false ;
31663: LD_ADDR_EXP 80
31667: PUSH
31668: LD_INT 0
31670: ST_TO_ADDR
// sRadar := false ;
31671: LD_ADDR_EXP 81
31675: PUSH
31676: LD_INT 0
31678: ST_TO_ADDR
// sBunker := false ;
31679: LD_ADDR_EXP 82
31683: PUSH
31684: LD_INT 0
31686: ST_TO_ADDR
// sHack := false ;
31687: LD_ADDR_EXP 83
31691: PUSH
31692: LD_INT 0
31694: ST_TO_ADDR
// sFire := false ;
31695: LD_ADDR_EXP 84
31699: PUSH
31700: LD_INT 0
31702: ST_TO_ADDR
// sRefresh := false ;
31703: LD_ADDR_EXP 85
31707: PUSH
31708: LD_INT 0
31710: ST_TO_ADDR
// sExp := false ;
31711: LD_ADDR_EXP 86
31715: PUSH
31716: LD_INT 0
31718: ST_TO_ADDR
// sDepot := false ;
31719: LD_ADDR_EXP 87
31723: PUSH
31724: LD_INT 0
31726: ST_TO_ADDR
// sFlag := false ;
31727: LD_ADDR_EXP 88
31731: PUSH
31732: LD_INT 0
31734: ST_TO_ADDR
// sKamikadze := false ;
31735: LD_ADDR_EXP 96
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
// sTroll := false ;
31743: LD_ADDR_EXP 97
31747: PUSH
31748: LD_INT 0
31750: ST_TO_ADDR
// sSlow := false ;
31751: LD_ADDR_EXP 98
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// sLack := false ;
31759: LD_ADDR_EXP 99
31763: PUSH
31764: LD_INT 0
31766: ST_TO_ADDR
// sTank := false ;
31767: LD_ADDR_EXP 101
31771: PUSH
31772: LD_INT 0
31774: ST_TO_ADDR
// sRemote := false ;
31775: LD_ADDR_EXP 102
31779: PUSH
31780: LD_INT 0
31782: ST_TO_ADDR
// sPowell := false ;
31783: LD_ADDR_EXP 103
31787: PUSH
31788: LD_INT 0
31790: ST_TO_ADDR
// sTeleport := false ;
31791: LD_ADDR_EXP 106
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// sOilTower := false ;
31799: LD_ADDR_EXP 108
31803: PUSH
31804: LD_INT 0
31806: ST_TO_ADDR
// sShovel := false ;
31807: LD_ADDR_EXP 109
31811: PUSH
31812: LD_INT 0
31814: ST_TO_ADDR
// sSheik := false ;
31815: LD_ADDR_EXP 110
31819: PUSH
31820: LD_INT 0
31822: ST_TO_ADDR
// sEarthquake := false ;
31823: LD_ADDR_EXP 112
31827: PUSH
31828: LD_INT 0
31830: ST_TO_ADDR
// sAI := false ;
31831: LD_ADDR_EXP 113
31835: PUSH
31836: LD_INT 0
31838: ST_TO_ADDR
// sCargo := false ;
31839: LD_ADDR_EXP 116
31843: PUSH
31844: LD_INT 0
31846: ST_TO_ADDR
// sDLaser := false ;
31847: LD_ADDR_EXP 117
31851: PUSH
31852: LD_INT 0
31854: ST_TO_ADDR
// sExchange := false ;
31855: LD_ADDR_EXP 118
31859: PUSH
31860: LD_INT 0
31862: ST_TO_ADDR
// sFac := false ;
31863: LD_ADDR_EXP 119
31867: PUSH
31868: LD_INT 0
31870: ST_TO_ADDR
// sPower := false ;
31871: LD_ADDR_EXP 120
31875: PUSH
31876: LD_INT 0
31878: ST_TO_ADDR
// sRandom := false ;
31879: LD_ADDR_EXP 121
31883: PUSH
31884: LD_INT 0
31886: ST_TO_ADDR
// sShield := false ;
31887: LD_ADDR_EXP 122
31891: PUSH
31892: LD_INT 0
31894: ST_TO_ADDR
// sTime := false ;
31895: LD_ADDR_EXP 123
31899: PUSH
31900: LD_INT 0
31902: ST_TO_ADDR
// sTools := false ;
31903: LD_ADDR_EXP 124
31907: PUSH
31908: LD_INT 0
31910: ST_TO_ADDR
// sSold := false ;
31911: LD_ADDR_EXP 89
31915: PUSH
31916: LD_INT 0
31918: ST_TO_ADDR
// sDiff := false ;
31919: LD_ADDR_EXP 90
31923: PUSH
31924: LD_INT 0
31926: ST_TO_ADDR
// sFog := false ;
31927: LD_ADDR_EXP 93
31931: PUSH
31932: LD_INT 0
31934: ST_TO_ADDR
// sReset := false ;
31935: LD_ADDR_EXP 94
31939: PUSH
31940: LD_INT 0
31942: ST_TO_ADDR
// sSun := false ;
31943: LD_ADDR_EXP 95
31947: PUSH
31948: LD_INT 0
31950: ST_TO_ADDR
// sTiger := false ;
31951: LD_ADDR_EXP 91
31955: PUSH
31956: LD_INT 0
31958: ST_TO_ADDR
// sBomb := false ;
31959: LD_ADDR_EXP 92
31963: PUSH
31964: LD_INT 0
31966: ST_TO_ADDR
// sWound := false ;
31967: LD_ADDR_EXP 100
31971: PUSH
31972: LD_INT 0
31974: ST_TO_ADDR
// sBetray := false ;
31975: LD_ADDR_EXP 104
31979: PUSH
31980: LD_INT 0
31982: ST_TO_ADDR
// sContamin := false ;
31983: LD_ADDR_EXP 105
31987: PUSH
31988: LD_INT 0
31990: ST_TO_ADDR
// sOil := false ;
31991: LD_ADDR_EXP 107
31995: PUSH
31996: LD_INT 0
31998: ST_TO_ADDR
// sStu := false ;
31999: LD_ADDR_EXP 111
32003: PUSH
32004: LD_INT 0
32006: ST_TO_ADDR
// sBazooka := false ;
32007: LD_ADDR_EXP 114
32011: PUSH
32012: LD_INT 0
32014: ST_TO_ADDR
// sMortar := false ;
32015: LD_ADDR_EXP 115
32019: PUSH
32020: LD_INT 0
32022: ST_TO_ADDR
// sRanger := false ;
32023: LD_ADDR_EXP 125
32027: PUSH
32028: LD_INT 0
32030: ST_TO_ADDR
// sComputer := false ;
32031: LD_ADDR_EXP 126
32035: PUSH
32036: LD_INT 0
32038: ST_TO_ADDR
// s30 := false ;
32039: LD_ADDR_EXP 127
32043: PUSH
32044: LD_INT 0
32046: ST_TO_ADDR
// s60 := false ;
32047: LD_ADDR_EXP 128
32051: PUSH
32052: LD_INT 0
32054: ST_TO_ADDR
// end ;
32055: LD_VAR 0 1
32059: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
32060: LD_INT 0
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
// result := [ ] ;
32069: LD_ADDR_VAR 0 2
32073: PUSH
32074: EMPTY
32075: ST_TO_ADDR
// if campaign_id = 1 then
32076: LD_OWVAR 69
32080: PUSH
32081: LD_INT 1
32083: EQUAL
32084: IFFALSE 35250
// begin case mission_number of 1 :
32086: LD_OWVAR 70
32090: PUSH
32091: LD_INT 1
32093: DOUBLE
32094: EQUAL
32095: IFTRUE 32099
32097: GO 32175
32099: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
32100: LD_ADDR_VAR 0 2
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 4
32110: PUSH
32111: LD_INT 11
32113: PUSH
32114: LD_INT 12
32116: PUSH
32117: LD_INT 15
32119: PUSH
32120: LD_INT 16
32122: PUSH
32123: LD_INT 22
32125: PUSH
32126: LD_INT 23
32128: PUSH
32129: LD_INT 26
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 101
32145: PUSH
32146: LD_INT 102
32148: PUSH
32149: LD_INT 106
32151: PUSH
32152: LD_INT 116
32154: PUSH
32155: LD_INT 117
32157: PUSH
32158: LD_INT 118
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: ST_TO_ADDR
32173: GO 35248
32175: LD_INT 2
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32267
32183: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
32184: LD_ADDR_VAR 0 2
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: LD_INT 4
32194: PUSH
32195: LD_INT 11
32197: PUSH
32198: LD_INT 12
32200: PUSH
32201: LD_INT 15
32203: PUSH
32204: LD_INT 16
32206: PUSH
32207: LD_INT 22
32209: PUSH
32210: LD_INT 23
32212: PUSH
32213: LD_INT 26
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 101
32229: PUSH
32230: LD_INT 102
32232: PUSH
32233: LD_INT 105
32235: PUSH
32236: LD_INT 106
32238: PUSH
32239: LD_INT 108
32241: PUSH
32242: LD_INT 116
32244: PUSH
32245: LD_INT 117
32247: PUSH
32248: LD_INT 118
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: ST_TO_ADDR
32265: GO 35248
32267: LD_INT 3
32269: DOUBLE
32270: EQUAL
32271: IFTRUE 32275
32273: GO 32363
32275: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32276: LD_ADDR_VAR 0 2
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: LD_INT 11
32292: PUSH
32293: LD_INT 12
32295: PUSH
32296: LD_INT 15
32298: PUSH
32299: LD_INT 16
32301: PUSH
32302: LD_INT 22
32304: PUSH
32305: LD_INT 26
32307: PUSH
32308: LD_INT 36
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 101
32325: PUSH
32326: LD_INT 102
32328: PUSH
32329: LD_INT 105
32331: PUSH
32332: LD_INT 106
32334: PUSH
32335: LD_INT 108
32337: PUSH
32338: LD_INT 116
32340: PUSH
32341: LD_INT 117
32343: PUSH
32344: LD_INT 118
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: ST_TO_ADDR
32361: GO 35248
32363: LD_INT 4
32365: DOUBLE
32366: EQUAL
32367: IFTRUE 32371
32369: GO 32467
32371: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32372: LD_ADDR_VAR 0 2
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: LD_INT 4
32382: PUSH
32383: LD_INT 5
32385: PUSH
32386: LD_INT 8
32388: PUSH
32389: LD_INT 11
32391: PUSH
32392: LD_INT 12
32394: PUSH
32395: LD_INT 15
32397: PUSH
32398: LD_INT 16
32400: PUSH
32401: LD_INT 22
32403: PUSH
32404: LD_INT 23
32406: PUSH
32407: LD_INT 26
32409: PUSH
32410: LD_INT 36
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 101
32429: PUSH
32430: LD_INT 102
32432: PUSH
32433: LD_INT 105
32435: PUSH
32436: LD_INT 106
32438: PUSH
32439: LD_INT 108
32441: PUSH
32442: LD_INT 116
32444: PUSH
32445: LD_INT 117
32447: PUSH
32448: LD_INT 118
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: ST_TO_ADDR
32465: GO 35248
32467: LD_INT 5
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32587
32475: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32476: LD_ADDR_VAR 0 2
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: LD_INT 4
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: LD_INT 6
32492: PUSH
32493: LD_INT 8
32495: PUSH
32496: LD_INT 11
32498: PUSH
32499: LD_INT 12
32501: PUSH
32502: LD_INT 15
32504: PUSH
32505: LD_INT 16
32507: PUSH
32508: LD_INT 22
32510: PUSH
32511: LD_INT 23
32513: PUSH
32514: LD_INT 25
32516: PUSH
32517: LD_INT 26
32519: PUSH
32520: LD_INT 36
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 101
32541: PUSH
32542: LD_INT 102
32544: PUSH
32545: LD_INT 105
32547: PUSH
32548: LD_INT 106
32550: PUSH
32551: LD_INT 108
32553: PUSH
32554: LD_INT 109
32556: PUSH
32557: LD_INT 112
32559: PUSH
32560: LD_INT 116
32562: PUSH
32563: LD_INT 117
32565: PUSH
32566: LD_INT 118
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: ST_TO_ADDR
32585: GO 35248
32587: LD_INT 6
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32595
32593: GO 32727
32595: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32596: LD_ADDR_VAR 0 2
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: LD_INT 4
32606: PUSH
32607: LD_INT 5
32609: PUSH
32610: LD_INT 6
32612: PUSH
32613: LD_INT 8
32615: PUSH
32616: LD_INT 11
32618: PUSH
32619: LD_INT 12
32621: PUSH
32622: LD_INT 15
32624: PUSH
32625: LD_INT 16
32627: PUSH
32628: LD_INT 20
32630: PUSH
32631: LD_INT 21
32633: PUSH
32634: LD_INT 22
32636: PUSH
32637: LD_INT 23
32639: PUSH
32640: LD_INT 25
32642: PUSH
32643: LD_INT 26
32645: PUSH
32646: LD_INT 30
32648: PUSH
32649: LD_INT 31
32651: PUSH
32652: LD_INT 32
32654: PUSH
32655: LD_INT 36
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 101
32681: PUSH
32682: LD_INT 102
32684: PUSH
32685: LD_INT 105
32687: PUSH
32688: LD_INT 106
32690: PUSH
32691: LD_INT 108
32693: PUSH
32694: LD_INT 109
32696: PUSH
32697: LD_INT 112
32699: PUSH
32700: LD_INT 116
32702: PUSH
32703: LD_INT 117
32705: PUSH
32706: LD_INT 118
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: ST_TO_ADDR
32725: GO 35248
32727: LD_INT 7
32729: DOUBLE
32730: EQUAL
32731: IFTRUE 32735
32733: GO 32847
32735: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32736: LD_ADDR_VAR 0 2
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 4
32746: PUSH
32747: LD_INT 5
32749: PUSH
32750: LD_INT 7
32752: PUSH
32753: LD_INT 11
32755: PUSH
32756: LD_INT 12
32758: PUSH
32759: LD_INT 15
32761: PUSH
32762: LD_INT 16
32764: PUSH
32765: LD_INT 20
32767: PUSH
32768: LD_INT 21
32770: PUSH
32771: LD_INT 22
32773: PUSH
32774: LD_INT 23
32776: PUSH
32777: LD_INT 25
32779: PUSH
32780: LD_INT 26
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 101
32801: PUSH
32802: LD_INT 102
32804: PUSH
32805: LD_INT 103
32807: PUSH
32808: LD_INT 105
32810: PUSH
32811: LD_INT 106
32813: PUSH
32814: LD_INT 108
32816: PUSH
32817: LD_INT 112
32819: PUSH
32820: LD_INT 116
32822: PUSH
32823: LD_INT 117
32825: PUSH
32826: LD_INT 118
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: ST_TO_ADDR
32845: GO 35248
32847: LD_INT 8
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32995
32855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32856: LD_ADDR_VAR 0 2
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 4
32866: PUSH
32867: LD_INT 5
32869: PUSH
32870: LD_INT 6
32872: PUSH
32873: LD_INT 7
32875: PUSH
32876: LD_INT 8
32878: PUSH
32879: LD_INT 11
32881: PUSH
32882: LD_INT 12
32884: PUSH
32885: LD_INT 15
32887: PUSH
32888: LD_INT 16
32890: PUSH
32891: LD_INT 20
32893: PUSH
32894: LD_INT 21
32896: PUSH
32897: LD_INT 22
32899: PUSH
32900: LD_INT 23
32902: PUSH
32903: LD_INT 25
32905: PUSH
32906: LD_INT 26
32908: PUSH
32909: LD_INT 30
32911: PUSH
32912: LD_INT 31
32914: PUSH
32915: LD_INT 32
32917: PUSH
32918: LD_INT 36
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 101
32945: PUSH
32946: LD_INT 102
32948: PUSH
32949: LD_INT 103
32951: PUSH
32952: LD_INT 105
32954: PUSH
32955: LD_INT 106
32957: PUSH
32958: LD_INT 108
32960: PUSH
32961: LD_INT 109
32963: PUSH
32964: LD_INT 112
32966: PUSH
32967: LD_INT 116
32969: PUSH
32970: LD_INT 117
32972: PUSH
32973: LD_INT 118
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: ST_TO_ADDR
32993: GO 35248
32995: LD_INT 9
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33151
33003: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
33004: LD_ADDR_VAR 0 2
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 4
33014: PUSH
33015: LD_INT 5
33017: PUSH
33018: LD_INT 6
33020: PUSH
33021: LD_INT 7
33023: PUSH
33024: LD_INT 8
33026: PUSH
33027: LD_INT 11
33029: PUSH
33030: LD_INT 12
33032: PUSH
33033: LD_INT 15
33035: PUSH
33036: LD_INT 16
33038: PUSH
33039: LD_INT 20
33041: PUSH
33042: LD_INT 21
33044: PUSH
33045: LD_INT 22
33047: PUSH
33048: LD_INT 23
33050: PUSH
33051: LD_INT 25
33053: PUSH
33054: LD_INT 26
33056: PUSH
33057: LD_INT 28
33059: PUSH
33060: LD_INT 30
33062: PUSH
33063: LD_INT 31
33065: PUSH
33066: LD_INT 32
33068: PUSH
33069: LD_INT 36
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 101
33097: PUSH
33098: LD_INT 102
33100: PUSH
33101: LD_INT 103
33103: PUSH
33104: LD_INT 105
33106: PUSH
33107: LD_INT 106
33109: PUSH
33110: LD_INT 108
33112: PUSH
33113: LD_INT 109
33115: PUSH
33116: LD_INT 112
33118: PUSH
33119: LD_INT 114
33121: PUSH
33122: LD_INT 116
33124: PUSH
33125: LD_INT 117
33127: PUSH
33128: LD_INT 118
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: ST_TO_ADDR
33149: GO 35248
33151: LD_INT 10
33153: DOUBLE
33154: EQUAL
33155: IFTRUE 33159
33157: GO 33355
33159: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 4
33170: PUSH
33171: LD_INT 5
33173: PUSH
33174: LD_INT 6
33176: PUSH
33177: LD_INT 7
33179: PUSH
33180: LD_INT 8
33182: PUSH
33183: LD_INT 9
33185: PUSH
33186: LD_INT 10
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 12
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: LD_INT 15
33203: PUSH
33204: LD_INT 16
33206: PUSH
33207: LD_INT 17
33209: PUSH
33210: LD_INT 18
33212: PUSH
33213: LD_INT 19
33215: PUSH
33216: LD_INT 20
33218: PUSH
33219: LD_INT 21
33221: PUSH
33222: LD_INT 22
33224: PUSH
33225: LD_INT 23
33227: PUSH
33228: LD_INT 24
33230: PUSH
33231: LD_INT 25
33233: PUSH
33234: LD_INT 26
33236: PUSH
33237: LD_INT 28
33239: PUSH
33240: LD_INT 30
33242: PUSH
33243: LD_INT 31
33245: PUSH
33246: LD_INT 32
33248: PUSH
33249: LD_INT 36
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 101
33285: PUSH
33286: LD_INT 102
33288: PUSH
33289: LD_INT 103
33291: PUSH
33292: LD_INT 104
33294: PUSH
33295: LD_INT 105
33297: PUSH
33298: LD_INT 106
33300: PUSH
33301: LD_INT 107
33303: PUSH
33304: LD_INT 108
33306: PUSH
33307: LD_INT 109
33309: PUSH
33310: LD_INT 110
33312: PUSH
33313: LD_INT 111
33315: PUSH
33316: LD_INT 112
33318: PUSH
33319: LD_INT 114
33321: PUSH
33322: LD_INT 116
33324: PUSH
33325: LD_INT 117
33327: PUSH
33328: LD_INT 118
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: ST_TO_ADDR
33353: GO 35248
33355: LD_INT 11
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33567
33363: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33364: LD_ADDR_VAR 0 2
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 4
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: LD_INT 6
33383: PUSH
33384: LD_INT 7
33386: PUSH
33387: LD_INT 8
33389: PUSH
33390: LD_INT 9
33392: PUSH
33393: LD_INT 10
33395: PUSH
33396: LD_INT 11
33398: PUSH
33399: LD_INT 12
33401: PUSH
33402: LD_INT 13
33404: PUSH
33405: LD_INT 14
33407: PUSH
33408: LD_INT 15
33410: PUSH
33411: LD_INT 16
33413: PUSH
33414: LD_INT 17
33416: PUSH
33417: LD_INT 18
33419: PUSH
33420: LD_INT 19
33422: PUSH
33423: LD_INT 20
33425: PUSH
33426: LD_INT 21
33428: PUSH
33429: LD_INT 22
33431: PUSH
33432: LD_INT 23
33434: PUSH
33435: LD_INT 24
33437: PUSH
33438: LD_INT 25
33440: PUSH
33441: LD_INT 26
33443: PUSH
33444: LD_INT 28
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: LD_INT 31
33452: PUSH
33453: LD_INT 32
33455: PUSH
33456: LD_INT 34
33458: PUSH
33459: LD_INT 36
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 101
33497: PUSH
33498: LD_INT 102
33500: PUSH
33501: LD_INT 103
33503: PUSH
33504: LD_INT 104
33506: PUSH
33507: LD_INT 105
33509: PUSH
33510: LD_INT 106
33512: PUSH
33513: LD_INT 107
33515: PUSH
33516: LD_INT 108
33518: PUSH
33519: LD_INT 109
33521: PUSH
33522: LD_INT 110
33524: PUSH
33525: LD_INT 111
33527: PUSH
33528: LD_INT 112
33530: PUSH
33531: LD_INT 114
33533: PUSH
33534: LD_INT 116
33536: PUSH
33537: LD_INT 117
33539: PUSH
33540: LD_INT 118
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: ST_TO_ADDR
33565: GO 35248
33567: LD_INT 12
33569: DOUBLE
33570: EQUAL
33571: IFTRUE 33575
33573: GO 33795
33575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33576: LD_ADDR_VAR 0 2
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: LD_INT 3
33589: PUSH
33590: LD_INT 4
33592: PUSH
33593: LD_INT 5
33595: PUSH
33596: LD_INT 6
33598: PUSH
33599: LD_INT 7
33601: PUSH
33602: LD_INT 8
33604: PUSH
33605: LD_INT 9
33607: PUSH
33608: LD_INT 10
33610: PUSH
33611: LD_INT 11
33613: PUSH
33614: LD_INT 12
33616: PUSH
33617: LD_INT 13
33619: PUSH
33620: LD_INT 14
33622: PUSH
33623: LD_INT 15
33625: PUSH
33626: LD_INT 16
33628: PUSH
33629: LD_INT 17
33631: PUSH
33632: LD_INT 18
33634: PUSH
33635: LD_INT 19
33637: PUSH
33638: LD_INT 20
33640: PUSH
33641: LD_INT 21
33643: PUSH
33644: LD_INT 22
33646: PUSH
33647: LD_INT 23
33649: PUSH
33650: LD_INT 24
33652: PUSH
33653: LD_INT 25
33655: PUSH
33656: LD_INT 26
33658: PUSH
33659: LD_INT 27
33661: PUSH
33662: LD_INT 28
33664: PUSH
33665: LD_INT 30
33667: PUSH
33668: LD_INT 31
33670: PUSH
33671: LD_INT 32
33673: PUSH
33674: LD_INT 33
33676: PUSH
33677: LD_INT 34
33679: PUSH
33680: LD_INT 36
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 101
33721: PUSH
33722: LD_INT 102
33724: PUSH
33725: LD_INT 103
33727: PUSH
33728: LD_INT 104
33730: PUSH
33731: LD_INT 105
33733: PUSH
33734: LD_INT 106
33736: PUSH
33737: LD_INT 107
33739: PUSH
33740: LD_INT 108
33742: PUSH
33743: LD_INT 109
33745: PUSH
33746: LD_INT 110
33748: PUSH
33749: LD_INT 111
33751: PUSH
33752: LD_INT 112
33754: PUSH
33755: LD_INT 113
33757: PUSH
33758: LD_INT 114
33760: PUSH
33761: LD_INT 116
33763: PUSH
33764: LD_INT 117
33766: PUSH
33767: LD_INT 118
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 35248
33795: LD_INT 13
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 34011
33803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33804: LD_ADDR_VAR 0 2
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: LD_INT 4
33820: PUSH
33821: LD_INT 5
33823: PUSH
33824: LD_INT 8
33826: PUSH
33827: LD_INT 9
33829: PUSH
33830: LD_INT 10
33832: PUSH
33833: LD_INT 11
33835: PUSH
33836: LD_INT 12
33838: PUSH
33839: LD_INT 14
33841: PUSH
33842: LD_INT 15
33844: PUSH
33845: LD_INT 16
33847: PUSH
33848: LD_INT 17
33850: PUSH
33851: LD_INT 18
33853: PUSH
33854: LD_INT 19
33856: PUSH
33857: LD_INT 20
33859: PUSH
33860: LD_INT 21
33862: PUSH
33863: LD_INT 22
33865: PUSH
33866: LD_INT 23
33868: PUSH
33869: LD_INT 24
33871: PUSH
33872: LD_INT 25
33874: PUSH
33875: LD_INT 26
33877: PUSH
33878: LD_INT 27
33880: PUSH
33881: LD_INT 28
33883: PUSH
33884: LD_INT 30
33886: PUSH
33887: LD_INT 31
33889: PUSH
33890: LD_INT 32
33892: PUSH
33893: LD_INT 33
33895: PUSH
33896: LD_INT 34
33898: PUSH
33899: LD_INT 36
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 101
33937: PUSH
33938: LD_INT 102
33940: PUSH
33941: LD_INT 103
33943: PUSH
33944: LD_INT 104
33946: PUSH
33947: LD_INT 105
33949: PUSH
33950: LD_INT 106
33952: PUSH
33953: LD_INT 107
33955: PUSH
33956: LD_INT 108
33958: PUSH
33959: LD_INT 109
33961: PUSH
33962: LD_INT 110
33964: PUSH
33965: LD_INT 111
33967: PUSH
33968: LD_INT 112
33970: PUSH
33971: LD_INT 113
33973: PUSH
33974: LD_INT 114
33976: PUSH
33977: LD_INT 116
33979: PUSH
33980: LD_INT 117
33982: PUSH
33983: LD_INT 118
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: ST_TO_ADDR
34009: GO 35248
34011: LD_INT 14
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34019
34017: GO 34243
34019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
34020: LD_ADDR_VAR 0 2
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: LD_INT 4
34036: PUSH
34037: LD_INT 5
34039: PUSH
34040: LD_INT 6
34042: PUSH
34043: LD_INT 7
34045: PUSH
34046: LD_INT 8
34048: PUSH
34049: LD_INT 9
34051: PUSH
34052: LD_INT 10
34054: PUSH
34055: LD_INT 11
34057: PUSH
34058: LD_INT 12
34060: PUSH
34061: LD_INT 13
34063: PUSH
34064: LD_INT 14
34066: PUSH
34067: LD_INT 15
34069: PUSH
34070: LD_INT 16
34072: PUSH
34073: LD_INT 17
34075: PUSH
34076: LD_INT 18
34078: PUSH
34079: LD_INT 19
34081: PUSH
34082: LD_INT 20
34084: PUSH
34085: LD_INT 21
34087: PUSH
34088: LD_INT 22
34090: PUSH
34091: LD_INT 23
34093: PUSH
34094: LD_INT 24
34096: PUSH
34097: LD_INT 25
34099: PUSH
34100: LD_INT 26
34102: PUSH
34103: LD_INT 27
34105: PUSH
34106: LD_INT 28
34108: PUSH
34109: LD_INT 29
34111: PUSH
34112: LD_INT 30
34114: PUSH
34115: LD_INT 31
34117: PUSH
34118: LD_INT 32
34120: PUSH
34121: LD_INT 33
34123: PUSH
34124: LD_INT 34
34126: PUSH
34127: LD_INT 36
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 101
34169: PUSH
34170: LD_INT 102
34172: PUSH
34173: LD_INT 103
34175: PUSH
34176: LD_INT 104
34178: PUSH
34179: LD_INT 105
34181: PUSH
34182: LD_INT 106
34184: PUSH
34185: LD_INT 107
34187: PUSH
34188: LD_INT 108
34190: PUSH
34191: LD_INT 109
34193: PUSH
34194: LD_INT 110
34196: PUSH
34197: LD_INT 111
34199: PUSH
34200: LD_INT 112
34202: PUSH
34203: LD_INT 113
34205: PUSH
34206: LD_INT 114
34208: PUSH
34209: LD_INT 116
34211: PUSH
34212: LD_INT 117
34214: PUSH
34215: LD_INT 118
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: ST_TO_ADDR
34241: GO 35248
34243: LD_INT 15
34245: DOUBLE
34246: EQUAL
34247: IFTRUE 34251
34249: GO 34475
34251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
34252: LD_ADDR_VAR 0 2
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 3
34265: PUSH
34266: LD_INT 4
34268: PUSH
34269: LD_INT 5
34271: PUSH
34272: LD_INT 6
34274: PUSH
34275: LD_INT 7
34277: PUSH
34278: LD_INT 8
34280: PUSH
34281: LD_INT 9
34283: PUSH
34284: LD_INT 10
34286: PUSH
34287: LD_INT 11
34289: PUSH
34290: LD_INT 12
34292: PUSH
34293: LD_INT 13
34295: PUSH
34296: LD_INT 14
34298: PUSH
34299: LD_INT 15
34301: PUSH
34302: LD_INT 16
34304: PUSH
34305: LD_INT 17
34307: PUSH
34308: LD_INT 18
34310: PUSH
34311: LD_INT 19
34313: PUSH
34314: LD_INT 20
34316: PUSH
34317: LD_INT 21
34319: PUSH
34320: LD_INT 22
34322: PUSH
34323: LD_INT 23
34325: PUSH
34326: LD_INT 24
34328: PUSH
34329: LD_INT 25
34331: PUSH
34332: LD_INT 26
34334: PUSH
34335: LD_INT 27
34337: PUSH
34338: LD_INT 28
34340: PUSH
34341: LD_INT 29
34343: PUSH
34344: LD_INT 30
34346: PUSH
34347: LD_INT 31
34349: PUSH
34350: LD_INT 32
34352: PUSH
34353: LD_INT 33
34355: PUSH
34356: LD_INT 34
34358: PUSH
34359: LD_INT 36
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 101
34401: PUSH
34402: LD_INT 102
34404: PUSH
34405: LD_INT 103
34407: PUSH
34408: LD_INT 104
34410: PUSH
34411: LD_INT 105
34413: PUSH
34414: LD_INT 106
34416: PUSH
34417: LD_INT 107
34419: PUSH
34420: LD_INT 108
34422: PUSH
34423: LD_INT 109
34425: PUSH
34426: LD_INT 110
34428: PUSH
34429: LD_INT 111
34431: PUSH
34432: LD_INT 112
34434: PUSH
34435: LD_INT 113
34437: PUSH
34438: LD_INT 114
34440: PUSH
34441: LD_INT 116
34443: PUSH
34444: LD_INT 117
34446: PUSH
34447: LD_INT 118
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: ST_TO_ADDR
34473: GO 35248
34475: LD_INT 16
34477: DOUBLE
34478: EQUAL
34479: IFTRUE 34483
34481: GO 34619
34483: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34484: LD_ADDR_VAR 0 2
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 4
34494: PUSH
34495: LD_INT 5
34497: PUSH
34498: LD_INT 7
34500: PUSH
34501: LD_INT 11
34503: PUSH
34504: LD_INT 12
34506: PUSH
34507: LD_INT 15
34509: PUSH
34510: LD_INT 16
34512: PUSH
34513: LD_INT 20
34515: PUSH
34516: LD_INT 21
34518: PUSH
34519: LD_INT 22
34521: PUSH
34522: LD_INT 23
34524: PUSH
34525: LD_INT 25
34527: PUSH
34528: LD_INT 26
34530: PUSH
34531: LD_INT 30
34533: PUSH
34534: LD_INT 31
34536: PUSH
34537: LD_INT 32
34539: PUSH
34540: LD_INT 33
34542: PUSH
34543: LD_INT 34
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 101
34569: PUSH
34570: LD_INT 102
34572: PUSH
34573: LD_INT 103
34575: PUSH
34576: LD_INT 106
34578: PUSH
34579: LD_INT 108
34581: PUSH
34582: LD_INT 112
34584: PUSH
34585: LD_INT 113
34587: PUSH
34588: LD_INT 114
34590: PUSH
34591: LD_INT 116
34593: PUSH
34594: LD_INT 117
34596: PUSH
34597: LD_INT 118
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: ST_TO_ADDR
34617: GO 35248
34619: LD_INT 17
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34851
34627: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34628: LD_ADDR_VAR 0 2
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: LD_INT 4
34644: PUSH
34645: LD_INT 5
34647: PUSH
34648: LD_INT 6
34650: PUSH
34651: LD_INT 7
34653: PUSH
34654: LD_INT 8
34656: PUSH
34657: LD_INT 9
34659: PUSH
34660: LD_INT 10
34662: PUSH
34663: LD_INT 11
34665: PUSH
34666: LD_INT 12
34668: PUSH
34669: LD_INT 13
34671: PUSH
34672: LD_INT 14
34674: PUSH
34675: LD_INT 15
34677: PUSH
34678: LD_INT 16
34680: PUSH
34681: LD_INT 17
34683: PUSH
34684: LD_INT 18
34686: PUSH
34687: LD_INT 19
34689: PUSH
34690: LD_INT 20
34692: PUSH
34693: LD_INT 21
34695: PUSH
34696: LD_INT 22
34698: PUSH
34699: LD_INT 23
34701: PUSH
34702: LD_INT 24
34704: PUSH
34705: LD_INT 25
34707: PUSH
34708: LD_INT 26
34710: PUSH
34711: LD_INT 27
34713: PUSH
34714: LD_INT 28
34716: PUSH
34717: LD_INT 29
34719: PUSH
34720: LD_INT 30
34722: PUSH
34723: LD_INT 31
34725: PUSH
34726: LD_INT 32
34728: PUSH
34729: LD_INT 33
34731: PUSH
34732: LD_INT 34
34734: PUSH
34735: LD_INT 36
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 101
34777: PUSH
34778: LD_INT 102
34780: PUSH
34781: LD_INT 103
34783: PUSH
34784: LD_INT 104
34786: PUSH
34787: LD_INT 105
34789: PUSH
34790: LD_INT 106
34792: PUSH
34793: LD_INT 107
34795: PUSH
34796: LD_INT 108
34798: PUSH
34799: LD_INT 109
34801: PUSH
34802: LD_INT 110
34804: PUSH
34805: LD_INT 111
34807: PUSH
34808: LD_INT 112
34810: PUSH
34811: LD_INT 113
34813: PUSH
34814: LD_INT 114
34816: PUSH
34817: LD_INT 116
34819: PUSH
34820: LD_INT 117
34822: PUSH
34823: LD_INT 118
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: ST_TO_ADDR
34849: GO 35248
34851: LD_INT 18
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 35007
34859: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34860: LD_ADDR_VAR 0 2
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: LD_INT 5
34873: PUSH
34874: LD_INT 7
34876: PUSH
34877: LD_INT 11
34879: PUSH
34880: LD_INT 12
34882: PUSH
34883: LD_INT 15
34885: PUSH
34886: LD_INT 16
34888: PUSH
34889: LD_INT 20
34891: PUSH
34892: LD_INT 21
34894: PUSH
34895: LD_INT 22
34897: PUSH
34898: LD_INT 23
34900: PUSH
34901: LD_INT 25
34903: PUSH
34904: LD_INT 26
34906: PUSH
34907: LD_INT 30
34909: PUSH
34910: LD_INT 31
34912: PUSH
34913: LD_INT 32
34915: PUSH
34916: LD_INT 33
34918: PUSH
34919: LD_INT 34
34921: PUSH
34922: LD_INT 35
34924: PUSH
34925: LD_INT 36
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 101
34953: PUSH
34954: LD_INT 102
34956: PUSH
34957: LD_INT 103
34959: PUSH
34960: LD_INT 106
34962: PUSH
34963: LD_INT 108
34965: PUSH
34966: LD_INT 112
34968: PUSH
34969: LD_INT 113
34971: PUSH
34972: LD_INT 114
34974: PUSH
34975: LD_INT 115
34977: PUSH
34978: LD_INT 116
34980: PUSH
34981: LD_INT 117
34983: PUSH
34984: LD_INT 118
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: ST_TO_ADDR
35005: GO 35248
35007: LD_INT 19
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35247
35015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
35016: LD_ADDR_VAR 0 2
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 3
35029: PUSH
35030: LD_INT 4
35032: PUSH
35033: LD_INT 5
35035: PUSH
35036: LD_INT 6
35038: PUSH
35039: LD_INT 7
35041: PUSH
35042: LD_INT 8
35044: PUSH
35045: LD_INT 9
35047: PUSH
35048: LD_INT 10
35050: PUSH
35051: LD_INT 11
35053: PUSH
35054: LD_INT 12
35056: PUSH
35057: LD_INT 13
35059: PUSH
35060: LD_INT 14
35062: PUSH
35063: LD_INT 15
35065: PUSH
35066: LD_INT 16
35068: PUSH
35069: LD_INT 17
35071: PUSH
35072: LD_INT 18
35074: PUSH
35075: LD_INT 19
35077: PUSH
35078: LD_INT 20
35080: PUSH
35081: LD_INT 21
35083: PUSH
35084: LD_INT 22
35086: PUSH
35087: LD_INT 23
35089: PUSH
35090: LD_INT 24
35092: PUSH
35093: LD_INT 25
35095: PUSH
35096: LD_INT 26
35098: PUSH
35099: LD_INT 27
35101: PUSH
35102: LD_INT 28
35104: PUSH
35105: LD_INT 29
35107: PUSH
35108: LD_INT 30
35110: PUSH
35111: LD_INT 31
35113: PUSH
35114: LD_INT 32
35116: PUSH
35117: LD_INT 33
35119: PUSH
35120: LD_INT 34
35122: PUSH
35123: LD_INT 35
35125: PUSH
35126: LD_INT 36
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 101
35169: PUSH
35170: LD_INT 102
35172: PUSH
35173: LD_INT 103
35175: PUSH
35176: LD_INT 104
35178: PUSH
35179: LD_INT 105
35181: PUSH
35182: LD_INT 106
35184: PUSH
35185: LD_INT 107
35187: PUSH
35188: LD_INT 108
35190: PUSH
35191: LD_INT 109
35193: PUSH
35194: LD_INT 110
35196: PUSH
35197: LD_INT 111
35199: PUSH
35200: LD_INT 112
35202: PUSH
35203: LD_INT 113
35205: PUSH
35206: LD_INT 114
35208: PUSH
35209: LD_INT 115
35211: PUSH
35212: LD_INT 116
35214: PUSH
35215: LD_INT 117
35217: PUSH
35218: LD_INT 118
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: ST_TO_ADDR
35245: GO 35248
35247: POP
// end else
35248: GO 35479
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
35250: LD_ADDR_VAR 0 2
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: LD_INT 4
35266: PUSH
35267: LD_INT 5
35269: PUSH
35270: LD_INT 6
35272: PUSH
35273: LD_INT 7
35275: PUSH
35276: LD_INT 8
35278: PUSH
35279: LD_INT 9
35281: PUSH
35282: LD_INT 10
35284: PUSH
35285: LD_INT 11
35287: PUSH
35288: LD_INT 12
35290: PUSH
35291: LD_INT 13
35293: PUSH
35294: LD_INT 14
35296: PUSH
35297: LD_INT 15
35299: PUSH
35300: LD_INT 16
35302: PUSH
35303: LD_INT 17
35305: PUSH
35306: LD_INT 18
35308: PUSH
35309: LD_INT 19
35311: PUSH
35312: LD_INT 20
35314: PUSH
35315: LD_INT 21
35317: PUSH
35318: LD_INT 22
35320: PUSH
35321: LD_INT 23
35323: PUSH
35324: LD_INT 24
35326: PUSH
35327: LD_INT 25
35329: PUSH
35330: LD_INT 26
35332: PUSH
35333: LD_INT 27
35335: PUSH
35336: LD_INT 28
35338: PUSH
35339: LD_INT 29
35341: PUSH
35342: LD_INT 30
35344: PUSH
35345: LD_INT 31
35347: PUSH
35348: LD_INT 32
35350: PUSH
35351: LD_INT 33
35353: PUSH
35354: LD_INT 34
35356: PUSH
35357: LD_INT 35
35359: PUSH
35360: LD_INT 36
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 101
35403: PUSH
35404: LD_INT 102
35406: PUSH
35407: LD_INT 103
35409: PUSH
35410: LD_INT 104
35412: PUSH
35413: LD_INT 105
35415: PUSH
35416: LD_INT 106
35418: PUSH
35419: LD_INT 107
35421: PUSH
35422: LD_INT 108
35424: PUSH
35425: LD_INT 109
35427: PUSH
35428: LD_INT 110
35430: PUSH
35431: LD_INT 111
35433: PUSH
35434: LD_INT 112
35436: PUSH
35437: LD_INT 113
35439: PUSH
35440: LD_INT 114
35442: PUSH
35443: LD_INT 115
35445: PUSH
35446: LD_INT 116
35448: PUSH
35449: LD_INT 117
35451: PUSH
35452: LD_INT 118
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: ST_TO_ADDR
// if result then
35479: LD_VAR 0 2
35483: IFFALSE 36269
// begin normal :=  ;
35485: LD_ADDR_VAR 0 5
35489: PUSH
35490: LD_STRING 
35492: ST_TO_ADDR
// hardcore :=  ;
35493: LD_ADDR_VAR 0 6
35497: PUSH
35498: LD_STRING 
35500: ST_TO_ADDR
// active :=  ;
35501: LD_ADDR_VAR 0 7
35505: PUSH
35506: LD_STRING 
35508: ST_TO_ADDR
// for i = 1 to normalCounter do
35509: LD_ADDR_VAR 0 8
35513: PUSH
35514: DOUBLE
35515: LD_INT 1
35517: DEC
35518: ST_TO_ADDR
35519: LD_EXP 73
35523: PUSH
35524: FOR_TO
35525: IFFALSE 35626
// begin tmp := 0 ;
35527: LD_ADDR_VAR 0 3
35531: PUSH
35532: LD_STRING 0
35534: ST_TO_ADDR
// if result [ 1 ] then
35535: LD_VAR 0 2
35539: PUSH
35540: LD_INT 1
35542: ARRAY
35543: IFFALSE 35608
// if result [ 1 ] [ 1 ] = i then
35545: LD_VAR 0 2
35549: PUSH
35550: LD_INT 1
35552: ARRAY
35553: PUSH
35554: LD_INT 1
35556: ARRAY
35557: PUSH
35558: LD_VAR 0 8
35562: EQUAL
35563: IFFALSE 35608
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35565: LD_ADDR_VAR 0 2
35569: PUSH
35570: LD_VAR 0 2
35574: PPUSH
35575: LD_INT 1
35577: PPUSH
35578: LD_VAR 0 2
35582: PUSH
35583: LD_INT 1
35585: ARRAY
35586: PPUSH
35587: LD_INT 1
35589: PPUSH
35590: CALL_OW 3
35594: PPUSH
35595: CALL_OW 1
35599: ST_TO_ADDR
// tmp := 1 ;
35600: LD_ADDR_VAR 0 3
35604: PUSH
35605: LD_STRING 1
35607: ST_TO_ADDR
// end ; normal := normal & tmp ;
35608: LD_ADDR_VAR 0 5
35612: PUSH
35613: LD_VAR 0 5
35617: PUSH
35618: LD_VAR 0 3
35622: STR
35623: ST_TO_ADDR
// end ;
35624: GO 35524
35626: POP
35627: POP
// for i = 1 to hardcoreCounter do
35628: LD_ADDR_VAR 0 8
35632: PUSH
35633: DOUBLE
35634: LD_INT 1
35636: DEC
35637: ST_TO_ADDR
35638: LD_EXP 74
35642: PUSH
35643: FOR_TO
35644: IFFALSE 35749
// begin tmp := 0 ;
35646: LD_ADDR_VAR 0 3
35650: PUSH
35651: LD_STRING 0
35653: ST_TO_ADDR
// if result [ 2 ] then
35654: LD_VAR 0 2
35658: PUSH
35659: LD_INT 2
35661: ARRAY
35662: IFFALSE 35731
// if result [ 2 ] [ 1 ] = 100 + i then
35664: LD_VAR 0 2
35668: PUSH
35669: LD_INT 2
35671: ARRAY
35672: PUSH
35673: LD_INT 1
35675: ARRAY
35676: PUSH
35677: LD_INT 100
35679: PUSH
35680: LD_VAR 0 8
35684: PLUS
35685: EQUAL
35686: IFFALSE 35731
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35688: LD_ADDR_VAR 0 2
35692: PUSH
35693: LD_VAR 0 2
35697: PPUSH
35698: LD_INT 2
35700: PPUSH
35701: LD_VAR 0 2
35705: PUSH
35706: LD_INT 2
35708: ARRAY
35709: PPUSH
35710: LD_INT 1
35712: PPUSH
35713: CALL_OW 3
35717: PPUSH
35718: CALL_OW 1
35722: ST_TO_ADDR
// tmp := 1 ;
35723: LD_ADDR_VAR 0 3
35727: PUSH
35728: LD_STRING 1
35730: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35731: LD_ADDR_VAR 0 6
35735: PUSH
35736: LD_VAR 0 6
35740: PUSH
35741: LD_VAR 0 3
35745: STR
35746: ST_TO_ADDR
// end ;
35747: GO 35643
35749: POP
35750: POP
// if isGameLoad then
35751: LD_VAR 0 1
35755: IFFALSE 36230
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35757: LD_ADDR_VAR 0 4
35761: PUSH
35762: LD_EXP 77
35766: PUSH
35767: LD_EXP 76
35771: PUSH
35772: LD_EXP 78
35776: PUSH
35777: LD_EXP 75
35781: PUSH
35782: LD_EXP 79
35786: PUSH
35787: LD_EXP 80
35791: PUSH
35792: LD_EXP 81
35796: PUSH
35797: LD_EXP 82
35801: PUSH
35802: LD_EXP 83
35806: PUSH
35807: LD_EXP 84
35811: PUSH
35812: LD_EXP 85
35816: PUSH
35817: LD_EXP 86
35821: PUSH
35822: LD_EXP 87
35826: PUSH
35827: LD_EXP 88
35831: PUSH
35832: LD_EXP 96
35836: PUSH
35837: LD_EXP 97
35841: PUSH
35842: LD_EXP 98
35846: PUSH
35847: LD_EXP 99
35851: PUSH
35852: LD_EXP 101
35856: PUSH
35857: LD_EXP 102
35861: PUSH
35862: LD_EXP 103
35866: PUSH
35867: LD_EXP 106
35871: PUSH
35872: LD_EXP 108
35876: PUSH
35877: LD_EXP 109
35881: PUSH
35882: LD_EXP 110
35886: PUSH
35887: LD_EXP 112
35891: PUSH
35892: LD_EXP 113
35896: PUSH
35897: LD_EXP 116
35901: PUSH
35902: LD_EXP 117
35906: PUSH
35907: LD_EXP 118
35911: PUSH
35912: LD_EXP 119
35916: PUSH
35917: LD_EXP 120
35921: PUSH
35922: LD_EXP 121
35926: PUSH
35927: LD_EXP 122
35931: PUSH
35932: LD_EXP 123
35936: PUSH
35937: LD_EXP 124
35941: PUSH
35942: LD_EXP 89
35946: PUSH
35947: LD_EXP 90
35951: PUSH
35952: LD_EXP 93
35956: PUSH
35957: LD_EXP 94
35961: PUSH
35962: LD_EXP 95
35966: PUSH
35967: LD_EXP 91
35971: PUSH
35972: LD_EXP 92
35976: PUSH
35977: LD_EXP 100
35981: PUSH
35982: LD_EXP 104
35986: PUSH
35987: LD_EXP 105
35991: PUSH
35992: LD_EXP 107
35996: PUSH
35997: LD_EXP 111
36001: PUSH
36002: LD_EXP 114
36006: PUSH
36007: LD_EXP 115
36011: PUSH
36012: LD_EXP 125
36016: PUSH
36017: LD_EXP 126
36021: PUSH
36022: LD_EXP 127
36026: PUSH
36027: LD_EXP 128
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// tmp :=  ;
36088: LD_ADDR_VAR 0 3
36092: PUSH
36093: LD_STRING 
36095: ST_TO_ADDR
// for i = 1 to normalCounter do
36096: LD_ADDR_VAR 0 8
36100: PUSH
36101: DOUBLE
36102: LD_INT 1
36104: DEC
36105: ST_TO_ADDR
36106: LD_EXP 73
36110: PUSH
36111: FOR_TO
36112: IFFALSE 36148
// begin if flags [ i ] then
36114: LD_VAR 0 4
36118: PUSH
36119: LD_VAR 0 8
36123: ARRAY
36124: IFFALSE 36146
// tmp := tmp & i & ; ;
36126: LD_ADDR_VAR 0 3
36130: PUSH
36131: LD_VAR 0 3
36135: PUSH
36136: LD_VAR 0 8
36140: STR
36141: PUSH
36142: LD_STRING ;
36144: STR
36145: ST_TO_ADDR
// end ;
36146: GO 36111
36148: POP
36149: POP
// for i = 1 to hardcoreCounter do
36150: LD_ADDR_VAR 0 8
36154: PUSH
36155: DOUBLE
36156: LD_INT 1
36158: DEC
36159: ST_TO_ADDR
36160: LD_EXP 74
36164: PUSH
36165: FOR_TO
36166: IFFALSE 36212
// begin if flags [ normalCounter + i ] then
36168: LD_VAR 0 4
36172: PUSH
36173: LD_EXP 73
36177: PUSH
36178: LD_VAR 0 8
36182: PLUS
36183: ARRAY
36184: IFFALSE 36210
// tmp := tmp & ( 100 + i ) & ; ;
36186: LD_ADDR_VAR 0 3
36190: PUSH
36191: LD_VAR 0 3
36195: PUSH
36196: LD_INT 100
36198: PUSH
36199: LD_VAR 0 8
36203: PLUS
36204: STR
36205: PUSH
36206: LD_STRING ;
36208: STR
36209: ST_TO_ADDR
// end ;
36210: GO 36165
36212: POP
36213: POP
// if tmp then
36214: LD_VAR 0 3
36218: IFFALSE 36230
// active := tmp ;
36220: LD_ADDR_VAR 0 7
36224: PUSH
36225: LD_VAR 0 3
36229: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
36230: LD_STRING getStreamItemsFromMission("
36232: PUSH
36233: LD_VAR 0 5
36237: STR
36238: PUSH
36239: LD_STRING ","
36241: STR
36242: PUSH
36243: LD_VAR 0 6
36247: STR
36248: PUSH
36249: LD_STRING ","
36251: STR
36252: PUSH
36253: LD_VAR 0 7
36257: STR
36258: PUSH
36259: LD_STRING ")
36261: STR
36262: PPUSH
36263: CALL_OW 559
// end else
36267: GO 36276
// ToLua ( getStreamItemsFromMission("","","") ) ;
36269: LD_STRING getStreamItemsFromMission("","","")
36271: PPUSH
36272: CALL_OW 559
// end ;
36276: LD_VAR 0 2
36280: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36281: LD_EXP 72
36285: PUSH
36286: LD_EXP 77
36290: AND
36291: IFFALSE 36415
36293: GO 36295
36295: DISABLE
36296: LD_INT 0
36298: PPUSH
36299: PPUSH
// begin enable ;
36300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36301: LD_ADDR_VAR 0 2
36305: PUSH
36306: LD_INT 22
36308: PUSH
36309: LD_OWVAR 2
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: LD_INT 34
36323: PUSH
36324: LD_INT 7
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 34
36333: PUSH
36334: LD_INT 45
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 34
36343: PUSH
36344: LD_INT 28
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 34
36353: PUSH
36354: LD_INT 47
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PPUSH
36372: CALL_OW 69
36376: ST_TO_ADDR
// if not tmp then
36377: LD_VAR 0 2
36381: NOT
36382: IFFALSE 36386
// exit ;
36384: GO 36415
// for i in tmp do
36386: LD_ADDR_VAR 0 1
36390: PUSH
36391: LD_VAR 0 2
36395: PUSH
36396: FOR_IN
36397: IFFALSE 36413
// begin SetLives ( i , 0 ) ;
36399: LD_VAR 0 1
36403: PPUSH
36404: LD_INT 0
36406: PPUSH
36407: CALL_OW 234
// end ;
36411: GO 36396
36413: POP
36414: POP
// end ;
36415: PPOPN 2
36417: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36418: LD_EXP 72
36422: PUSH
36423: LD_EXP 78
36427: AND
36428: IFFALSE 36512
36430: GO 36432
36432: DISABLE
36433: LD_INT 0
36435: PPUSH
36436: PPUSH
// begin enable ;
36437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36438: LD_ADDR_VAR 0 2
36442: PUSH
36443: LD_INT 22
36445: PUSH
36446: LD_OWVAR 2
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 32
36457: PUSH
36458: LD_INT 3
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PPUSH
36469: CALL_OW 69
36473: ST_TO_ADDR
// if not tmp then
36474: LD_VAR 0 2
36478: NOT
36479: IFFALSE 36483
// exit ;
36481: GO 36512
// for i in tmp do
36483: LD_ADDR_VAR 0 1
36487: PUSH
36488: LD_VAR 0 2
36492: PUSH
36493: FOR_IN
36494: IFFALSE 36510
// begin SetLives ( i , 0 ) ;
36496: LD_VAR 0 1
36500: PPUSH
36501: LD_INT 0
36503: PPUSH
36504: CALL_OW 234
// end ;
36508: GO 36493
36510: POP
36511: POP
// end ;
36512: PPOPN 2
36514: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36515: LD_EXP 72
36519: PUSH
36520: LD_EXP 75
36524: AND
36525: IFFALSE 36618
36527: GO 36529
36529: DISABLE
36530: LD_INT 0
36532: PPUSH
// begin enable ;
36533: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36534: LD_ADDR_VAR 0 1
36538: PUSH
36539: LD_INT 22
36541: PUSH
36542: LD_OWVAR 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 2
36553: PUSH
36554: LD_INT 25
36556: PUSH
36557: LD_INT 5
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 25
36566: PUSH
36567: LD_INT 9
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 25
36576: PUSH
36577: LD_INT 8
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PPUSH
36594: CALL_OW 69
36598: PUSH
36599: FOR_IN
36600: IFFALSE 36616
// begin SetClass ( i , 1 ) ;
36602: LD_VAR 0 1
36606: PPUSH
36607: LD_INT 1
36609: PPUSH
36610: CALL_OW 336
// end ;
36614: GO 36599
36616: POP
36617: POP
// end ;
36618: PPOPN 1
36620: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36621: LD_EXP 72
36625: PUSH
36626: LD_EXP 76
36630: AND
36631: PUSH
36632: LD_OWVAR 65
36636: PUSH
36637: LD_INT 7
36639: LESS
36640: AND
36641: IFFALSE 36655
36643: GO 36645
36645: DISABLE
// begin enable ;
36646: ENABLE
// game_speed := 7 ;
36647: LD_ADDR_OWVAR 65
36651: PUSH
36652: LD_INT 7
36654: ST_TO_ADDR
// end ;
36655: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36656: LD_EXP 72
36660: PUSH
36661: LD_EXP 79
36665: AND
36666: IFFALSE 36868
36668: GO 36670
36670: DISABLE
36671: LD_INT 0
36673: PPUSH
36674: PPUSH
36675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36676: LD_ADDR_VAR 0 3
36680: PUSH
36681: LD_INT 81
36683: PUSH
36684: LD_OWVAR 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 21
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 69
36711: ST_TO_ADDR
// if not tmp then
36712: LD_VAR 0 3
36716: NOT
36717: IFFALSE 36721
// exit ;
36719: GO 36868
// if tmp > 5 then
36721: LD_VAR 0 3
36725: PUSH
36726: LD_INT 5
36728: GREATER
36729: IFFALSE 36741
// k := 5 else
36731: LD_ADDR_VAR 0 2
36735: PUSH
36736: LD_INT 5
36738: ST_TO_ADDR
36739: GO 36751
// k := tmp ;
36741: LD_ADDR_VAR 0 2
36745: PUSH
36746: LD_VAR 0 3
36750: ST_TO_ADDR
// for i := 1 to k do
36751: LD_ADDR_VAR 0 1
36755: PUSH
36756: DOUBLE
36757: LD_INT 1
36759: DEC
36760: ST_TO_ADDR
36761: LD_VAR 0 2
36765: PUSH
36766: FOR_TO
36767: IFFALSE 36866
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36769: LD_VAR 0 3
36773: PUSH
36774: LD_VAR 0 1
36778: ARRAY
36779: PPUSH
36780: LD_VAR 0 1
36784: PUSH
36785: LD_INT 4
36787: MOD
36788: PUSH
36789: LD_INT 1
36791: PLUS
36792: PPUSH
36793: CALL_OW 259
36797: PUSH
36798: LD_INT 10
36800: LESS
36801: IFFALSE 36864
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36803: LD_VAR 0 3
36807: PUSH
36808: LD_VAR 0 1
36812: ARRAY
36813: PPUSH
36814: LD_VAR 0 1
36818: PUSH
36819: LD_INT 4
36821: MOD
36822: PUSH
36823: LD_INT 1
36825: PLUS
36826: PPUSH
36827: LD_VAR 0 3
36831: PUSH
36832: LD_VAR 0 1
36836: ARRAY
36837: PPUSH
36838: LD_VAR 0 1
36842: PUSH
36843: LD_INT 4
36845: MOD
36846: PUSH
36847: LD_INT 1
36849: PLUS
36850: PPUSH
36851: CALL_OW 259
36855: PUSH
36856: LD_INT 1
36858: PLUS
36859: PPUSH
36860: CALL_OW 237
36864: GO 36766
36866: POP
36867: POP
// end ;
36868: PPOPN 3
36870: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36871: LD_EXP 72
36875: PUSH
36876: LD_EXP 80
36880: AND
36881: IFFALSE 36901
36883: GO 36885
36885: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36886: LD_INT 4
36888: PPUSH
36889: LD_OWVAR 2
36893: PPUSH
36894: LD_INT 0
36896: PPUSH
36897: CALL_OW 324
36901: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36902: LD_EXP 72
36906: PUSH
36907: LD_EXP 109
36911: AND
36912: IFFALSE 36932
36914: GO 36916
36916: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36917: LD_INT 19
36919: PPUSH
36920: LD_OWVAR 2
36924: PPUSH
36925: LD_INT 0
36927: PPUSH
36928: CALL_OW 324
36932: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36933: LD_EXP 72
36937: PUSH
36938: LD_EXP 81
36942: AND
36943: IFFALSE 37045
36945: GO 36947
36947: DISABLE
36948: LD_INT 0
36950: PPUSH
36951: PPUSH
// begin enable ;
36952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36953: LD_ADDR_VAR 0 2
36957: PUSH
36958: LD_INT 22
36960: PUSH
36961: LD_OWVAR 2
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 34
36975: PUSH
36976: LD_INT 11
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 34
36985: PUSH
36986: LD_INT 30
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PPUSH
37002: CALL_OW 69
37006: ST_TO_ADDR
// if not tmp then
37007: LD_VAR 0 2
37011: NOT
37012: IFFALSE 37016
// exit ;
37014: GO 37045
// for i in tmp do
37016: LD_ADDR_VAR 0 1
37020: PUSH
37021: LD_VAR 0 2
37025: PUSH
37026: FOR_IN
37027: IFFALSE 37043
// begin SetLives ( i , 0 ) ;
37029: LD_VAR 0 1
37033: PPUSH
37034: LD_INT 0
37036: PPUSH
37037: CALL_OW 234
// end ;
37041: GO 37026
37043: POP
37044: POP
// end ;
37045: PPOPN 2
37047: END
// every 0 0$1 trigger StreamModeActive and sBunker do
37048: LD_EXP 72
37052: PUSH
37053: LD_EXP 82
37057: AND
37058: IFFALSE 37078
37060: GO 37062
37062: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
37063: LD_INT 32
37065: PPUSH
37066: LD_OWVAR 2
37070: PPUSH
37071: LD_INT 0
37073: PPUSH
37074: CALL_OW 324
37078: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
37079: LD_EXP 72
37083: PUSH
37084: LD_EXP 83
37088: AND
37089: IFFALSE 37270
37091: GO 37093
37093: DISABLE
37094: LD_INT 0
37096: PPUSH
37097: PPUSH
37098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
37099: LD_ADDR_VAR 0 2
37103: PUSH
37104: LD_INT 22
37106: PUSH
37107: LD_OWVAR 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 33
37118: PUSH
37119: LD_INT 3
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PPUSH
37130: CALL_OW 69
37134: ST_TO_ADDR
// if not tmp then
37135: LD_VAR 0 2
37139: NOT
37140: IFFALSE 37144
// exit ;
37142: GO 37270
// side := 0 ;
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_INT 0
37151: ST_TO_ADDR
// for i := 1 to 8 do
37152: LD_ADDR_VAR 0 1
37156: PUSH
37157: DOUBLE
37158: LD_INT 1
37160: DEC
37161: ST_TO_ADDR
37162: LD_INT 8
37164: PUSH
37165: FOR_TO
37166: IFFALSE 37214
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
37168: LD_OWVAR 2
37172: PUSH
37173: LD_VAR 0 1
37177: NONEQUAL
37178: PUSH
37179: LD_OWVAR 2
37183: PPUSH
37184: LD_VAR 0 1
37188: PPUSH
37189: CALL_OW 81
37193: PUSH
37194: LD_INT 2
37196: EQUAL
37197: AND
37198: IFFALSE 37212
// begin side := i ;
37200: LD_ADDR_VAR 0 3
37204: PUSH
37205: LD_VAR 0 1
37209: ST_TO_ADDR
// break ;
37210: GO 37214
// end ;
37212: GO 37165
37214: POP
37215: POP
// if not side then
37216: LD_VAR 0 3
37220: NOT
37221: IFFALSE 37225
// exit ;
37223: GO 37270
// for i := 1 to tmp do
37225: LD_ADDR_VAR 0 1
37229: PUSH
37230: DOUBLE
37231: LD_INT 1
37233: DEC
37234: ST_TO_ADDR
37235: LD_VAR 0 2
37239: PUSH
37240: FOR_TO
37241: IFFALSE 37268
// if Prob ( 60 ) then
37243: LD_INT 60
37245: PPUSH
37246: CALL_OW 13
37250: IFFALSE 37266
// SetSide ( i , side ) ;
37252: LD_VAR 0 1
37256: PPUSH
37257: LD_VAR 0 3
37261: PPUSH
37262: CALL_OW 235
37266: GO 37240
37268: POP
37269: POP
// end ;
37270: PPOPN 3
37272: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37273: LD_EXP 72
37277: PUSH
37278: LD_EXP 85
37282: AND
37283: IFFALSE 37402
37285: GO 37287
37287: DISABLE
37288: LD_INT 0
37290: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37291: LD_ADDR_VAR 0 1
37295: PUSH
37296: LD_INT 22
37298: PUSH
37299: LD_OWVAR 2
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 21
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: LD_INT 23
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: PPUSH
37340: CALL_OW 69
37344: PUSH
37345: FOR_IN
37346: IFFALSE 37400
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37348: LD_VAR 0 1
37352: PPUSH
37353: CALL_OW 257
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: LD_INT 4
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: IN
37376: IFFALSE 37398
// SetClass ( un , rand ( 1 , 4 ) ) ;
37378: LD_VAR 0 1
37382: PPUSH
37383: LD_INT 1
37385: PPUSH
37386: LD_INT 4
37388: PPUSH
37389: CALL_OW 12
37393: PPUSH
37394: CALL_OW 336
37398: GO 37345
37400: POP
37401: POP
// end ;
37402: PPOPN 1
37404: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37405: LD_EXP 72
37409: PUSH
37410: LD_EXP 84
37414: AND
37415: IFFALSE 37494
37417: GO 37419
37419: DISABLE
37420: LD_INT 0
37422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37423: LD_ADDR_VAR 0 1
37427: PUSH
37428: LD_INT 22
37430: PUSH
37431: LD_OWVAR 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 21
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PPUSH
37454: CALL_OW 69
37458: ST_TO_ADDR
// if not tmp then
37459: LD_VAR 0 1
37463: NOT
37464: IFFALSE 37468
// exit ;
37466: GO 37494
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37468: LD_VAR 0 1
37472: PUSH
37473: LD_INT 1
37475: PPUSH
37476: LD_VAR 0 1
37480: PPUSH
37481: CALL_OW 12
37485: ARRAY
37486: PPUSH
37487: LD_INT 100
37489: PPUSH
37490: CALL_OW 234
// end ;
37494: PPOPN 1
37496: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37497: LD_EXP 72
37501: PUSH
37502: LD_EXP 86
37506: AND
37507: IFFALSE 37605
37509: GO 37511
37511: DISABLE
37512: LD_INT 0
37514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37515: LD_ADDR_VAR 0 1
37519: PUSH
37520: LD_INT 22
37522: PUSH
37523: LD_OWVAR 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 21
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PPUSH
37546: CALL_OW 69
37550: ST_TO_ADDR
// if not tmp then
37551: LD_VAR 0 1
37555: NOT
37556: IFFALSE 37560
// exit ;
37558: GO 37605
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37560: LD_VAR 0 1
37564: PUSH
37565: LD_INT 1
37567: PPUSH
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 12
37577: ARRAY
37578: PPUSH
37579: LD_INT 1
37581: PPUSH
37582: LD_INT 4
37584: PPUSH
37585: CALL_OW 12
37589: PPUSH
37590: LD_INT 3000
37592: PPUSH
37593: LD_INT 9000
37595: PPUSH
37596: CALL_OW 12
37600: PPUSH
37601: CALL_OW 492
// end ;
37605: PPOPN 1
37607: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37608: LD_EXP 72
37612: PUSH
37613: LD_EXP 87
37617: AND
37618: IFFALSE 37638
37620: GO 37622
37622: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37623: LD_INT 1
37625: PPUSH
37626: LD_OWVAR 2
37630: PPUSH
37631: LD_INT 0
37633: PPUSH
37634: CALL_OW 324
37638: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37639: LD_EXP 72
37643: PUSH
37644: LD_EXP 88
37648: AND
37649: IFFALSE 37732
37651: GO 37653
37653: DISABLE
37654: LD_INT 0
37656: PPUSH
37657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37658: LD_ADDR_VAR 0 2
37662: PUSH
37663: LD_INT 22
37665: PUSH
37666: LD_OWVAR 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 21
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PPUSH
37689: CALL_OW 69
37693: ST_TO_ADDR
// if not tmp then
37694: LD_VAR 0 2
37698: NOT
37699: IFFALSE 37703
// exit ;
37701: GO 37732
// for i in tmp do
37703: LD_ADDR_VAR 0 1
37707: PUSH
37708: LD_VAR 0 2
37712: PUSH
37713: FOR_IN
37714: IFFALSE 37730
// SetBLevel ( i , 10 ) ;
37716: LD_VAR 0 1
37720: PPUSH
37721: LD_INT 10
37723: PPUSH
37724: CALL_OW 241
37728: GO 37713
37730: POP
37731: POP
// end ;
37732: PPOPN 2
37734: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37735: LD_EXP 72
37739: PUSH
37740: LD_EXP 89
37744: AND
37745: IFFALSE 37856
37747: GO 37749
37749: DISABLE
37750: LD_INT 0
37752: PPUSH
37753: PPUSH
37754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 22
37762: PUSH
37763: LD_OWVAR 2
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 25
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PPUSH
37786: CALL_OW 69
37790: ST_TO_ADDR
// if not tmp then
37791: LD_VAR 0 3
37795: NOT
37796: IFFALSE 37800
// exit ;
37798: GO 37856
// un := tmp [ rand ( 1 , tmp ) ] ;
37800: LD_ADDR_VAR 0 2
37804: PUSH
37805: LD_VAR 0 3
37809: PUSH
37810: LD_INT 1
37812: PPUSH
37813: LD_VAR 0 3
37817: PPUSH
37818: CALL_OW 12
37822: ARRAY
37823: ST_TO_ADDR
// if Crawls ( un ) then
37824: LD_VAR 0 2
37828: PPUSH
37829: CALL_OW 318
37833: IFFALSE 37844
// ComWalk ( un ) ;
37835: LD_VAR 0 2
37839: PPUSH
37840: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37844: LD_VAR 0 2
37848: PPUSH
37849: LD_INT 5
37851: PPUSH
37852: CALL_OW 336
// end ;
37856: PPOPN 3
37858: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37859: LD_EXP 72
37863: PUSH
37864: LD_EXP 90
37868: AND
37869: PUSH
37870: LD_OWVAR 67
37874: PUSH
37875: LD_INT 4
37877: LESS
37878: AND
37879: IFFALSE 37898
37881: GO 37883
37883: DISABLE
// begin Difficulty := Difficulty + 1 ;
37884: LD_ADDR_OWVAR 67
37888: PUSH
37889: LD_OWVAR 67
37893: PUSH
37894: LD_INT 1
37896: PLUS
37897: ST_TO_ADDR
// end ;
37898: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37899: LD_EXP 72
37903: PUSH
37904: LD_EXP 91
37908: AND
37909: IFFALSE 38012
37911: GO 37913
37913: DISABLE
37914: LD_INT 0
37916: PPUSH
// begin for i := 1 to 5 do
37917: LD_ADDR_VAR 0 1
37921: PUSH
37922: DOUBLE
37923: LD_INT 1
37925: DEC
37926: ST_TO_ADDR
37927: LD_INT 5
37929: PUSH
37930: FOR_TO
37931: IFFALSE 38010
// begin uc_nation := nation_nature ;
37933: LD_ADDR_OWVAR 21
37937: PUSH
37938: LD_INT 0
37940: ST_TO_ADDR
// uc_side := 0 ;
37941: LD_ADDR_OWVAR 20
37945: PUSH
37946: LD_INT 0
37948: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37949: LD_ADDR_OWVAR 29
37953: PUSH
37954: LD_INT 12
37956: PUSH
37957: LD_INT 12
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: ST_TO_ADDR
// hc_agressivity := 20 ;
37964: LD_ADDR_OWVAR 35
37968: PUSH
37969: LD_INT 20
37971: ST_TO_ADDR
// hc_class := class_tiger ;
37972: LD_ADDR_OWVAR 28
37976: PUSH
37977: LD_INT 14
37979: ST_TO_ADDR
// hc_gallery :=  ;
37980: LD_ADDR_OWVAR 33
37984: PUSH
37985: LD_STRING 
37987: ST_TO_ADDR
// hc_name :=  ;
37988: LD_ADDR_OWVAR 26
37992: PUSH
37993: LD_STRING 
37995: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37996: CALL_OW 44
38000: PPUSH
38001: LD_INT 0
38003: PPUSH
38004: CALL_OW 51
// end ;
38008: GO 37930
38010: POP
38011: POP
// end ;
38012: PPOPN 1
38014: END
// every 0 0$1 trigger StreamModeActive and sBomb do
38015: LD_EXP 72
38019: PUSH
38020: LD_EXP 92
38024: AND
38025: IFFALSE 38034
38027: GO 38029
38029: DISABLE
// StreamSibBomb ;
38030: CALL 38035 0 0
38034: END
// export function StreamSibBomb ; var i , x , y ; begin
38035: LD_INT 0
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
// result := false ;
38041: LD_ADDR_VAR 0 1
38045: PUSH
38046: LD_INT 0
38048: ST_TO_ADDR
// for i := 1 to 16 do
38049: LD_ADDR_VAR 0 2
38053: PUSH
38054: DOUBLE
38055: LD_INT 1
38057: DEC
38058: ST_TO_ADDR
38059: LD_INT 16
38061: PUSH
38062: FOR_TO
38063: IFFALSE 38262
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
38065: LD_ADDR_VAR 0 3
38069: PUSH
38070: LD_INT 10
38072: PUSH
38073: LD_INT 20
38075: PUSH
38076: LD_INT 30
38078: PUSH
38079: LD_INT 40
38081: PUSH
38082: LD_INT 50
38084: PUSH
38085: LD_INT 60
38087: PUSH
38088: LD_INT 70
38090: PUSH
38091: LD_INT 80
38093: PUSH
38094: LD_INT 90
38096: PUSH
38097: LD_INT 100
38099: PUSH
38100: LD_INT 110
38102: PUSH
38103: LD_INT 120
38105: PUSH
38106: LD_INT 130
38108: PUSH
38109: LD_INT 140
38111: PUSH
38112: LD_INT 150
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: PPUSH
38135: LD_INT 15
38137: PPUSH
38138: CALL_OW 12
38142: ARRAY
38143: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
38144: LD_ADDR_VAR 0 4
38148: PUSH
38149: LD_INT 10
38151: PUSH
38152: LD_INT 20
38154: PUSH
38155: LD_INT 30
38157: PUSH
38158: LD_INT 40
38160: PUSH
38161: LD_INT 50
38163: PUSH
38164: LD_INT 60
38166: PUSH
38167: LD_INT 70
38169: PUSH
38170: LD_INT 80
38172: PUSH
38173: LD_INT 90
38175: PUSH
38176: LD_INT 100
38178: PUSH
38179: LD_INT 110
38181: PUSH
38182: LD_INT 120
38184: PUSH
38185: LD_INT 130
38187: PUSH
38188: LD_INT 140
38190: PUSH
38191: LD_INT 150
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: PPUSH
38214: LD_INT 15
38216: PPUSH
38217: CALL_OW 12
38221: ARRAY
38222: ST_TO_ADDR
// if ValidHex ( x , y ) then
38223: LD_VAR 0 3
38227: PPUSH
38228: LD_VAR 0 4
38232: PPUSH
38233: CALL_OW 488
38237: IFFALSE 38260
// begin result := [ x , y ] ;
38239: LD_ADDR_VAR 0 1
38243: PUSH
38244: LD_VAR 0 3
38248: PUSH
38249: LD_VAR 0 4
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: ST_TO_ADDR
// break ;
38258: GO 38262
// end ; end ;
38260: GO 38062
38262: POP
38263: POP
// if result then
38264: LD_VAR 0 1
38268: IFFALSE 38328
// begin ToLua ( playSibBomb() ) ;
38270: LD_STRING playSibBomb()
38272: PPUSH
38273: CALL_OW 559
// wait ( 0 0$14 ) ;
38277: LD_INT 490
38279: PPUSH
38280: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38284: LD_VAR 0 1
38288: PUSH
38289: LD_INT 1
38291: ARRAY
38292: PPUSH
38293: LD_VAR 0 1
38297: PUSH
38298: LD_INT 2
38300: ARRAY
38301: PPUSH
38302: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38306: LD_VAR 0 1
38310: PUSH
38311: LD_INT 1
38313: ARRAY
38314: PPUSH
38315: LD_VAR 0 1
38319: PUSH
38320: LD_INT 2
38322: ARRAY
38323: PPUSH
38324: CALL_OW 429
// end ; end ;
38328: LD_VAR 0 1
38332: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38333: LD_EXP 72
38337: PUSH
38338: LD_EXP 94
38342: AND
38343: IFFALSE 38355
38345: GO 38347
38347: DISABLE
// YouLost (  ) ;
38348: LD_STRING 
38350: PPUSH
38351: CALL_OW 104
38355: END
// every 0 0$1 trigger StreamModeActive and sFog do
38356: LD_EXP 72
38360: PUSH
38361: LD_EXP 93
38365: AND
38366: IFFALSE 38380
38368: GO 38370
38370: DISABLE
// FogOff ( your_side ) ;
38371: LD_OWVAR 2
38375: PPUSH
38376: CALL_OW 344
38380: END
// every 0 0$1 trigger StreamModeActive and sSun do
38381: LD_EXP 72
38385: PUSH
38386: LD_EXP 95
38390: AND
38391: IFFALSE 38419
38393: GO 38395
38395: DISABLE
// begin solar_recharge_percent := 0 ;
38396: LD_ADDR_OWVAR 79
38400: PUSH
38401: LD_INT 0
38403: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38404: LD_INT 10500
38406: PPUSH
38407: CALL_OW 67
// solar_recharge_percent := 100 ;
38411: LD_ADDR_OWVAR 79
38415: PUSH
38416: LD_INT 100
38418: ST_TO_ADDR
// end ;
38419: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38420: LD_EXP 72
38424: PUSH
38425: LD_EXP 96
38429: AND
38430: IFFALSE 38669
38432: GO 38434
38434: DISABLE
38435: LD_INT 0
38437: PPUSH
38438: PPUSH
38439: PPUSH
// begin tmp := [ ] ;
38440: LD_ADDR_VAR 0 3
38444: PUSH
38445: EMPTY
38446: ST_TO_ADDR
// for i := 1 to 6 do
38447: LD_ADDR_VAR 0 1
38451: PUSH
38452: DOUBLE
38453: LD_INT 1
38455: DEC
38456: ST_TO_ADDR
38457: LD_INT 6
38459: PUSH
38460: FOR_TO
38461: IFFALSE 38566
// begin uc_nation := nation_nature ;
38463: LD_ADDR_OWVAR 21
38467: PUSH
38468: LD_INT 0
38470: ST_TO_ADDR
// uc_side := 0 ;
38471: LD_ADDR_OWVAR 20
38475: PUSH
38476: LD_INT 0
38478: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38479: LD_ADDR_OWVAR 29
38483: PUSH
38484: LD_INT 12
38486: PUSH
38487: LD_INT 12
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: ST_TO_ADDR
// hc_agressivity := 20 ;
38494: LD_ADDR_OWVAR 35
38498: PUSH
38499: LD_INT 20
38501: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38502: LD_ADDR_OWVAR 28
38506: PUSH
38507: LD_INT 17
38509: ST_TO_ADDR
// hc_gallery :=  ;
38510: LD_ADDR_OWVAR 33
38514: PUSH
38515: LD_STRING 
38517: ST_TO_ADDR
// hc_name :=  ;
38518: LD_ADDR_OWVAR 26
38522: PUSH
38523: LD_STRING 
38525: ST_TO_ADDR
// un := CreateHuman ;
38526: LD_ADDR_VAR 0 2
38530: PUSH
38531: CALL_OW 44
38535: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_INT 1
38543: PPUSH
38544: CALL_OW 51
// tmp := tmp ^ un ;
38548: LD_ADDR_VAR 0 3
38552: PUSH
38553: LD_VAR 0 3
38557: PUSH
38558: LD_VAR 0 2
38562: ADD
38563: ST_TO_ADDR
// end ;
38564: GO 38460
38566: POP
38567: POP
// repeat wait ( 0 0$1 ) ;
38568: LD_INT 35
38570: PPUSH
38571: CALL_OW 67
// for un in tmp do
38575: LD_ADDR_VAR 0 2
38579: PUSH
38580: LD_VAR 0 3
38584: PUSH
38585: FOR_IN
38586: IFFALSE 38660
// begin if IsDead ( un ) then
38588: LD_VAR 0 2
38592: PPUSH
38593: CALL_OW 301
38597: IFFALSE 38617
// begin tmp := tmp diff un ;
38599: LD_ADDR_VAR 0 3
38603: PUSH
38604: LD_VAR 0 3
38608: PUSH
38609: LD_VAR 0 2
38613: DIFF
38614: ST_TO_ADDR
// continue ;
38615: GO 38585
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38617: LD_VAR 0 2
38621: PPUSH
38622: LD_INT 3
38624: PUSH
38625: LD_INT 22
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PPUSH
38639: CALL_OW 69
38643: PPUSH
38644: LD_VAR 0 2
38648: PPUSH
38649: CALL_OW 74
38653: PPUSH
38654: CALL_OW 115
// end ;
38658: GO 38585
38660: POP
38661: POP
// until not tmp ;
38662: LD_VAR 0 3
38666: NOT
38667: IFFALSE 38568
// end ;
38669: PPOPN 3
38671: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38672: LD_EXP 72
38676: PUSH
38677: LD_EXP 97
38681: AND
38682: IFFALSE 38736
38684: GO 38686
38686: DISABLE
// begin ToLua ( displayTroll(); ) ;
38687: LD_STRING displayTroll();
38689: PPUSH
38690: CALL_OW 559
// wait ( 3 3$00 ) ;
38694: LD_INT 6300
38696: PPUSH
38697: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38701: LD_STRING hideTroll();
38703: PPUSH
38704: CALL_OW 559
// wait ( 1 1$00 ) ;
38708: LD_INT 2100
38710: PPUSH
38711: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38715: LD_STRING displayTroll();
38717: PPUSH
38718: CALL_OW 559
// wait ( 1 1$00 ) ;
38722: LD_INT 2100
38724: PPUSH
38725: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38729: LD_STRING hideTroll();
38731: PPUSH
38732: CALL_OW 559
// end ;
38736: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38737: LD_EXP 72
38741: PUSH
38742: LD_EXP 98
38746: AND
38747: IFFALSE 38810
38749: GO 38751
38751: DISABLE
38752: LD_INT 0
38754: PPUSH
// begin p := 0 ;
38755: LD_ADDR_VAR 0 1
38759: PUSH
38760: LD_INT 0
38762: ST_TO_ADDR
// repeat game_speed := 1 ;
38763: LD_ADDR_OWVAR 65
38767: PUSH
38768: LD_INT 1
38770: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38771: LD_INT 35
38773: PPUSH
38774: CALL_OW 67
// p := p + 1 ;
38778: LD_ADDR_VAR 0 1
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_INT 1
38790: PLUS
38791: ST_TO_ADDR
// until p >= 60 ;
38792: LD_VAR 0 1
38796: PUSH
38797: LD_INT 60
38799: GREATEREQUAL
38800: IFFALSE 38763
// game_speed := 4 ;
38802: LD_ADDR_OWVAR 65
38806: PUSH
38807: LD_INT 4
38809: ST_TO_ADDR
// end ;
38810: PPOPN 1
38812: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38813: LD_EXP 72
38817: PUSH
38818: LD_EXP 99
38822: AND
38823: IFFALSE 38969
38825: GO 38827
38827: DISABLE
38828: LD_INT 0
38830: PPUSH
38831: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38832: LD_ADDR_VAR 0 1
38836: PUSH
38837: LD_INT 22
38839: PUSH
38840: LD_OWVAR 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: LD_INT 30
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 30
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PPUSH
38881: CALL_OW 69
38885: ST_TO_ADDR
// if not depot then
38886: LD_VAR 0 1
38890: NOT
38891: IFFALSE 38895
// exit ;
38893: GO 38969
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38895: LD_ADDR_VAR 0 2
38899: PUSH
38900: LD_VAR 0 1
38904: PUSH
38905: LD_INT 1
38907: PPUSH
38908: LD_VAR 0 1
38912: PPUSH
38913: CALL_OW 12
38917: ARRAY
38918: PPUSH
38919: CALL_OW 274
38923: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38924: LD_VAR 0 2
38928: PPUSH
38929: LD_INT 1
38931: PPUSH
38932: LD_INT 0
38934: PPUSH
38935: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38939: LD_VAR 0 2
38943: PPUSH
38944: LD_INT 2
38946: PPUSH
38947: LD_INT 0
38949: PPUSH
38950: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38954: LD_VAR 0 2
38958: PPUSH
38959: LD_INT 3
38961: PPUSH
38962: LD_INT 0
38964: PPUSH
38965: CALL_OW 277
// end ;
38969: PPOPN 2
38971: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38972: LD_EXP 72
38976: PUSH
38977: LD_EXP 100
38981: AND
38982: IFFALSE 39079
38984: GO 38986
38986: DISABLE
38987: LD_INT 0
38989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38990: LD_ADDR_VAR 0 1
38994: PUSH
38995: LD_INT 22
38997: PUSH
38998: LD_OWVAR 2
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 21
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 23
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: PPUSH
39039: CALL_OW 69
39043: ST_TO_ADDR
// if not tmp then
39044: LD_VAR 0 1
39048: NOT
39049: IFFALSE 39053
// exit ;
39051: GO 39079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
39053: LD_VAR 0 1
39057: PUSH
39058: LD_INT 1
39060: PPUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: CALL_OW 12
39070: ARRAY
39071: PPUSH
39072: LD_INT 200
39074: PPUSH
39075: CALL_OW 234
// end ;
39079: PPOPN 1
39081: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
39082: LD_EXP 72
39086: PUSH
39087: LD_EXP 101
39091: AND
39092: IFFALSE 39171
39094: GO 39096
39096: DISABLE
39097: LD_INT 0
39099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
39100: LD_ADDR_VAR 0 1
39104: PUSH
39105: LD_INT 22
39107: PUSH
39108: LD_OWVAR 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 21
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PPUSH
39131: CALL_OW 69
39135: ST_TO_ADDR
// if not tmp then
39136: LD_VAR 0 1
39140: NOT
39141: IFFALSE 39145
// exit ;
39143: GO 39171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
39145: LD_VAR 0 1
39149: PUSH
39150: LD_INT 1
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 12
39162: ARRAY
39163: PPUSH
39164: LD_INT 60
39166: PPUSH
39167: CALL_OW 234
// end ;
39171: PPOPN 1
39173: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
39174: LD_EXP 72
39178: PUSH
39179: LD_EXP 102
39183: AND
39184: IFFALSE 39283
39186: GO 39188
39188: DISABLE
39189: LD_INT 0
39191: PPUSH
39192: PPUSH
// begin enable ;
39193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
39194: LD_ADDR_VAR 0 1
39198: PUSH
39199: LD_INT 22
39201: PUSH
39202: LD_OWVAR 2
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 61
39213: PUSH
39214: EMPTY
39215: LIST
39216: PUSH
39217: LD_INT 33
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: PPUSH
39232: CALL_OW 69
39236: ST_TO_ADDR
// if not tmp then
39237: LD_VAR 0 1
39241: NOT
39242: IFFALSE 39246
// exit ;
39244: GO 39283
// for i in tmp do
39246: LD_ADDR_VAR 0 2
39250: PUSH
39251: LD_VAR 0 1
39255: PUSH
39256: FOR_IN
39257: IFFALSE 39281
// if IsControledBy ( i ) then
39259: LD_VAR 0 2
39263: PPUSH
39264: CALL_OW 312
39268: IFFALSE 39279
// ComUnlink ( i ) ;
39270: LD_VAR 0 2
39274: PPUSH
39275: CALL_OW 136
39279: GO 39256
39281: POP
39282: POP
// end ;
39283: PPOPN 2
39285: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39286: LD_EXP 72
39290: PUSH
39291: LD_EXP 103
39295: AND
39296: IFFALSE 39436
39298: GO 39300
39300: DISABLE
39301: LD_INT 0
39303: PPUSH
39304: PPUSH
// begin ToLua ( displayPowell(); ) ;
39305: LD_STRING displayPowell();
39307: PPUSH
39308: CALL_OW 559
// uc_side := 0 ;
39312: LD_ADDR_OWVAR 20
39316: PUSH
39317: LD_INT 0
39319: ST_TO_ADDR
// uc_nation := 2 ;
39320: LD_ADDR_OWVAR 21
39324: PUSH
39325: LD_INT 2
39327: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39328: LD_ADDR_OWVAR 37
39332: PUSH
39333: LD_INT 14
39335: ST_TO_ADDR
// vc_engine := engine_siberite ;
39336: LD_ADDR_OWVAR 39
39340: PUSH
39341: LD_INT 3
39343: ST_TO_ADDR
// vc_control := control_apeman ;
39344: LD_ADDR_OWVAR 38
39348: PUSH
39349: LD_INT 5
39351: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39352: LD_ADDR_OWVAR 40
39356: PUSH
39357: LD_INT 29
39359: ST_TO_ADDR
// un := CreateVehicle ;
39360: LD_ADDR_VAR 0 2
39364: PUSH
39365: CALL_OW 45
39369: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39370: LD_VAR 0 2
39374: PPUSH
39375: LD_INT 1
39377: PPUSH
39378: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39382: LD_INT 35
39384: PPUSH
39385: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39389: LD_VAR 0 2
39393: PPUSH
39394: LD_INT 22
39396: PUSH
39397: LD_OWVAR 2
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PPUSH
39406: CALL_OW 69
39410: PPUSH
39411: LD_VAR 0 2
39415: PPUSH
39416: CALL_OW 74
39420: PPUSH
39421: CALL_OW 115
// until IsDead ( un ) ;
39425: LD_VAR 0 2
39429: PPUSH
39430: CALL_OW 301
39434: IFFALSE 39382
// end ;
39436: PPOPN 2
39438: END
// every 0 0$1 trigger StreamModeActive and sStu do
39439: LD_EXP 72
39443: PUSH
39444: LD_EXP 111
39448: AND
39449: IFFALSE 39465
39451: GO 39453
39453: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39454: LD_STRING displayStucuk();
39456: PPUSH
39457: CALL_OW 559
// ResetFog ;
39461: CALL_OW 335
// end ;
39465: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39466: LD_EXP 72
39470: PUSH
39471: LD_EXP 104
39475: AND
39476: IFFALSE 39617
39478: GO 39480
39480: DISABLE
39481: LD_INT 0
39483: PPUSH
39484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39485: LD_ADDR_VAR 0 2
39489: PUSH
39490: LD_INT 22
39492: PUSH
39493: LD_OWVAR 2
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 21
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PPUSH
39516: CALL_OW 69
39520: ST_TO_ADDR
// if not tmp then
39521: LD_VAR 0 2
39525: NOT
39526: IFFALSE 39530
// exit ;
39528: GO 39617
// un := tmp [ rand ( 1 , tmp ) ] ;
39530: LD_ADDR_VAR 0 1
39534: PUSH
39535: LD_VAR 0 2
39539: PUSH
39540: LD_INT 1
39542: PPUSH
39543: LD_VAR 0 2
39547: PPUSH
39548: CALL_OW 12
39552: ARRAY
39553: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39554: LD_VAR 0 1
39558: PPUSH
39559: LD_INT 0
39561: PPUSH
39562: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39566: LD_VAR 0 1
39570: PPUSH
39571: LD_OWVAR 3
39575: PUSH
39576: LD_VAR 0 1
39580: DIFF
39581: PPUSH
39582: LD_VAR 0 1
39586: PPUSH
39587: CALL_OW 74
39591: PPUSH
39592: CALL_OW 115
// wait ( 0 0$20 ) ;
39596: LD_INT 700
39598: PPUSH
39599: CALL_OW 67
// SetSide ( un , your_side ) ;
39603: LD_VAR 0 1
39607: PPUSH
39608: LD_OWVAR 2
39612: PPUSH
39613: CALL_OW 235
// end ;
39617: PPOPN 2
39619: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39620: LD_EXP 72
39624: PUSH
39625: LD_EXP 105
39629: AND
39630: IFFALSE 39736
39632: GO 39634
39634: DISABLE
39635: LD_INT 0
39637: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39638: LD_ADDR_VAR 0 1
39642: PUSH
39643: LD_INT 22
39645: PUSH
39646: LD_OWVAR 2
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: LD_INT 30
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 30
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: LIST
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PPUSH
39687: CALL_OW 69
39691: ST_TO_ADDR
// if not depot then
39692: LD_VAR 0 1
39696: NOT
39697: IFFALSE 39701
// exit ;
39699: GO 39736
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39701: LD_VAR 0 1
39705: PUSH
39706: LD_INT 1
39708: ARRAY
39709: PPUSH
39710: CALL_OW 250
39714: PPUSH
39715: LD_VAR 0 1
39719: PUSH
39720: LD_INT 1
39722: ARRAY
39723: PPUSH
39724: CALL_OW 251
39728: PPUSH
39729: LD_INT 70
39731: PPUSH
39732: CALL_OW 495
// end ;
39736: PPOPN 1
39738: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39739: LD_EXP 72
39743: PUSH
39744: LD_EXP 106
39748: AND
39749: IFFALSE 39960
39751: GO 39753
39753: DISABLE
39754: LD_INT 0
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39761: LD_ADDR_VAR 0 5
39765: PUSH
39766: LD_INT 22
39768: PUSH
39769: LD_OWVAR 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 21
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PPUSH
39792: CALL_OW 69
39796: ST_TO_ADDR
// if not tmp then
39797: LD_VAR 0 5
39801: NOT
39802: IFFALSE 39806
// exit ;
39804: GO 39960
// for i in tmp do
39806: LD_ADDR_VAR 0 1
39810: PUSH
39811: LD_VAR 0 5
39815: PUSH
39816: FOR_IN
39817: IFFALSE 39958
// begin d := rand ( 0 , 5 ) ;
39819: LD_ADDR_VAR 0 4
39823: PUSH
39824: LD_INT 0
39826: PPUSH
39827: LD_INT 5
39829: PPUSH
39830: CALL_OW 12
39834: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39835: LD_ADDR_VAR 0 2
39839: PUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 250
39849: PPUSH
39850: LD_VAR 0 4
39854: PPUSH
39855: LD_INT 3
39857: PPUSH
39858: LD_INT 12
39860: PPUSH
39861: CALL_OW 12
39865: PPUSH
39866: CALL_OW 272
39870: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 251
39885: PPUSH
39886: LD_VAR 0 4
39890: PPUSH
39891: LD_INT 3
39893: PPUSH
39894: LD_INT 12
39896: PPUSH
39897: CALL_OW 12
39901: PPUSH
39902: CALL_OW 273
39906: ST_TO_ADDR
// if ValidHex ( x , y ) then
39907: LD_VAR 0 2
39911: PPUSH
39912: LD_VAR 0 3
39916: PPUSH
39917: CALL_OW 488
39921: IFFALSE 39956
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39923: LD_VAR 0 1
39927: PPUSH
39928: LD_VAR 0 2
39932: PPUSH
39933: LD_VAR 0 3
39937: PPUSH
39938: LD_INT 3
39940: PPUSH
39941: LD_INT 6
39943: PPUSH
39944: CALL_OW 12
39948: PPUSH
39949: LD_INT 1
39951: PPUSH
39952: CALL_OW 483
// end ;
39956: GO 39816
39958: POP
39959: POP
// end ;
39960: PPOPN 5
39962: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39963: LD_EXP 72
39967: PUSH
39968: LD_EXP 107
39972: AND
39973: IFFALSE 40067
39975: GO 39977
39977: DISABLE
39978: LD_INT 0
39980: PPUSH
39981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39982: LD_ADDR_VAR 0 2
39986: PUSH
39987: LD_INT 22
39989: PUSH
39990: LD_OWVAR 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 32
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 21
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PPUSH
40024: CALL_OW 69
40028: ST_TO_ADDR
// if not tmp then
40029: LD_VAR 0 2
40033: NOT
40034: IFFALSE 40038
// exit ;
40036: GO 40067
// for i in tmp do
40038: LD_ADDR_VAR 0 1
40042: PUSH
40043: LD_VAR 0 2
40047: PUSH
40048: FOR_IN
40049: IFFALSE 40065
// SetFuel ( i , 0 ) ;
40051: LD_VAR 0 1
40055: PPUSH
40056: LD_INT 0
40058: PPUSH
40059: CALL_OW 240
40063: GO 40048
40065: POP
40066: POP
// end ;
40067: PPOPN 2
40069: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
40070: LD_EXP 72
40074: PUSH
40075: LD_EXP 108
40079: AND
40080: IFFALSE 40146
40082: GO 40084
40084: DISABLE
40085: LD_INT 0
40087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40088: LD_ADDR_VAR 0 1
40092: PUSH
40093: LD_INT 22
40095: PUSH
40096: LD_OWVAR 2
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 30
40107: PUSH
40108: LD_INT 29
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PPUSH
40119: CALL_OW 69
40123: ST_TO_ADDR
// if not tmp then
40124: LD_VAR 0 1
40128: NOT
40129: IFFALSE 40133
// exit ;
40131: GO 40146
// DestroyUnit ( tmp [ 1 ] ) ;
40133: LD_VAR 0 1
40137: PUSH
40138: LD_INT 1
40140: ARRAY
40141: PPUSH
40142: CALL_OW 65
// end ;
40146: PPOPN 1
40148: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
40149: LD_EXP 72
40153: PUSH
40154: LD_EXP 110
40158: AND
40159: IFFALSE 40288
40161: GO 40163
40163: DISABLE
40164: LD_INT 0
40166: PPUSH
// begin uc_side := 0 ;
40167: LD_ADDR_OWVAR 20
40171: PUSH
40172: LD_INT 0
40174: ST_TO_ADDR
// uc_nation := nation_arabian ;
40175: LD_ADDR_OWVAR 21
40179: PUSH
40180: LD_INT 2
40182: ST_TO_ADDR
// hc_gallery :=  ;
40183: LD_ADDR_OWVAR 33
40187: PUSH
40188: LD_STRING 
40190: ST_TO_ADDR
// hc_name :=  ;
40191: LD_ADDR_OWVAR 26
40195: PUSH
40196: LD_STRING 
40198: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
40199: LD_INT 1
40201: PPUSH
40202: LD_INT 11
40204: PPUSH
40205: LD_INT 10
40207: PPUSH
40208: CALL_OW 380
// un := CreateHuman ;
40212: LD_ADDR_VAR 0 1
40216: PUSH
40217: CALL_OW 44
40221: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40222: LD_VAR 0 1
40226: PPUSH
40227: LD_INT 1
40229: PPUSH
40230: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40234: LD_INT 35
40236: PPUSH
40237: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40241: LD_VAR 0 1
40245: PPUSH
40246: LD_INT 22
40248: PUSH
40249: LD_OWVAR 2
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PPUSH
40258: CALL_OW 69
40262: PPUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: CALL_OW 74
40272: PPUSH
40273: CALL_OW 115
// until IsDead ( un ) ;
40277: LD_VAR 0 1
40281: PPUSH
40282: CALL_OW 301
40286: IFFALSE 40234
// end ;
40288: PPOPN 1
40290: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40291: LD_EXP 72
40295: PUSH
40296: LD_EXP 112
40300: AND
40301: IFFALSE 40313
40303: GO 40305
40305: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40306: LD_STRING earthquake(getX(game), 0, 32)
40308: PPUSH
40309: CALL_OW 559
40313: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40314: LD_EXP 72
40318: PUSH
40319: LD_EXP 113
40323: AND
40324: IFFALSE 40415
40326: GO 40328
40328: DISABLE
40329: LD_INT 0
40331: PPUSH
// begin enable ;
40332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40333: LD_ADDR_VAR 0 1
40337: PUSH
40338: LD_INT 22
40340: PUSH
40341: LD_OWVAR 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 21
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 33
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: PPUSH
40375: CALL_OW 69
40379: ST_TO_ADDR
// if not tmp then
40380: LD_VAR 0 1
40384: NOT
40385: IFFALSE 40389
// exit ;
40387: GO 40415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40389: LD_VAR 0 1
40393: PUSH
40394: LD_INT 1
40396: PPUSH
40397: LD_VAR 0 1
40401: PPUSH
40402: CALL_OW 12
40406: ARRAY
40407: PPUSH
40408: LD_INT 1
40410: PPUSH
40411: CALL_OW 234
// end ;
40415: PPOPN 1
40417: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40418: LD_EXP 72
40422: PUSH
40423: LD_EXP 114
40427: AND
40428: IFFALSE 40569
40430: GO 40432
40432: DISABLE
40433: LD_INT 0
40435: PPUSH
40436: PPUSH
40437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40438: LD_ADDR_VAR 0 3
40442: PUSH
40443: LD_INT 22
40445: PUSH
40446: LD_OWVAR 2
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 25
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PPUSH
40469: CALL_OW 69
40473: ST_TO_ADDR
// if not tmp then
40474: LD_VAR 0 3
40478: NOT
40479: IFFALSE 40483
// exit ;
40481: GO 40569
// un := tmp [ rand ( 1 , tmp ) ] ;
40483: LD_ADDR_VAR 0 2
40487: PUSH
40488: LD_VAR 0 3
40492: PUSH
40493: LD_INT 1
40495: PPUSH
40496: LD_VAR 0 3
40500: PPUSH
40501: CALL_OW 12
40505: ARRAY
40506: ST_TO_ADDR
// if Crawls ( un ) then
40507: LD_VAR 0 2
40511: PPUSH
40512: CALL_OW 318
40516: IFFALSE 40527
// ComWalk ( un ) ;
40518: LD_VAR 0 2
40522: PPUSH
40523: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40527: LD_VAR 0 2
40531: PPUSH
40532: LD_INT 9
40534: PPUSH
40535: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40539: LD_INT 28
40541: PPUSH
40542: LD_OWVAR 2
40546: PPUSH
40547: LD_INT 2
40549: PPUSH
40550: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40554: LD_INT 29
40556: PPUSH
40557: LD_OWVAR 2
40561: PPUSH
40562: LD_INT 2
40564: PPUSH
40565: CALL_OW 322
// end ;
40569: PPOPN 3
40571: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40572: LD_EXP 72
40576: PUSH
40577: LD_EXP 115
40581: AND
40582: IFFALSE 40693
40584: GO 40586
40586: DISABLE
40587: LD_INT 0
40589: PPUSH
40590: PPUSH
40591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_INT 22
40599: PUSH
40600: LD_OWVAR 2
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 25
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PPUSH
40623: CALL_OW 69
40627: ST_TO_ADDR
// if not tmp then
40628: LD_VAR 0 3
40632: NOT
40633: IFFALSE 40637
// exit ;
40635: GO 40693
// un := tmp [ rand ( 1 , tmp ) ] ;
40637: LD_ADDR_VAR 0 2
40641: PUSH
40642: LD_VAR 0 3
40646: PUSH
40647: LD_INT 1
40649: PPUSH
40650: LD_VAR 0 3
40654: PPUSH
40655: CALL_OW 12
40659: ARRAY
40660: ST_TO_ADDR
// if Crawls ( un ) then
40661: LD_VAR 0 2
40665: PPUSH
40666: CALL_OW 318
40670: IFFALSE 40681
// ComWalk ( un ) ;
40672: LD_VAR 0 2
40676: PPUSH
40677: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40681: LD_VAR 0 2
40685: PPUSH
40686: LD_INT 8
40688: PPUSH
40689: CALL_OW 336
// end ;
40693: PPOPN 3
40695: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40696: LD_EXP 72
40700: PUSH
40701: LD_EXP 116
40705: AND
40706: IFFALSE 40850
40708: GO 40710
40710: DISABLE
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40715: LD_ADDR_VAR 0 2
40719: PUSH
40720: LD_INT 22
40722: PUSH
40723: LD_OWVAR 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 21
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 34
40747: PUSH
40748: LD_INT 12
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 34
40757: PUSH
40758: LD_INT 51
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 34
40767: PUSH
40768: LD_INT 32
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: PPUSH
40786: CALL_OW 69
40790: ST_TO_ADDR
// if not tmp then
40791: LD_VAR 0 2
40795: NOT
40796: IFFALSE 40800
// exit ;
40798: GO 40850
// for i in tmp do
40800: LD_ADDR_VAR 0 1
40804: PUSH
40805: LD_VAR 0 2
40809: PUSH
40810: FOR_IN
40811: IFFALSE 40848
// if GetCargo ( i , mat_artifact ) = 0 then
40813: LD_VAR 0 1
40817: PPUSH
40818: LD_INT 4
40820: PPUSH
40821: CALL_OW 289
40825: PUSH
40826: LD_INT 0
40828: EQUAL
40829: IFFALSE 40846
// SetCargo ( i , mat_siberit , 100 ) ;
40831: LD_VAR 0 1
40835: PPUSH
40836: LD_INT 3
40838: PPUSH
40839: LD_INT 100
40841: PPUSH
40842: CALL_OW 290
40846: GO 40810
40848: POP
40849: POP
// end ;
40850: PPOPN 2
40852: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40853: LD_EXP 72
40857: PUSH
40858: LD_EXP 117
40862: AND
40863: IFFALSE 41046
40865: GO 40867
40867: DISABLE
40868: LD_INT 0
40870: PPUSH
40871: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40872: LD_ADDR_VAR 0 2
40876: PUSH
40877: LD_INT 22
40879: PUSH
40880: LD_OWVAR 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PPUSH
40889: CALL_OW 69
40893: ST_TO_ADDR
// if not tmp then
40894: LD_VAR 0 2
40898: NOT
40899: IFFALSE 40903
// exit ;
40901: GO 41046
// for i := 1 to 2 do
40903: LD_ADDR_VAR 0 1
40907: PUSH
40908: DOUBLE
40909: LD_INT 1
40911: DEC
40912: ST_TO_ADDR
40913: LD_INT 2
40915: PUSH
40916: FOR_TO
40917: IFFALSE 41044
// begin uc_side := your_side ;
40919: LD_ADDR_OWVAR 20
40923: PUSH
40924: LD_OWVAR 2
40928: ST_TO_ADDR
// uc_nation := nation_american ;
40929: LD_ADDR_OWVAR 21
40933: PUSH
40934: LD_INT 1
40936: ST_TO_ADDR
// vc_chassis := us_morphling ;
40937: LD_ADDR_OWVAR 37
40941: PUSH
40942: LD_INT 5
40944: ST_TO_ADDR
// vc_engine := engine_siberite ;
40945: LD_ADDR_OWVAR 39
40949: PUSH
40950: LD_INT 3
40952: ST_TO_ADDR
// vc_control := control_computer ;
40953: LD_ADDR_OWVAR 38
40957: PUSH
40958: LD_INT 3
40960: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40961: LD_ADDR_OWVAR 40
40965: PUSH
40966: LD_INT 10
40968: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40969: LD_VAR 0 2
40973: PUSH
40974: LD_INT 1
40976: ARRAY
40977: PPUSH
40978: CALL_OW 310
40982: NOT
40983: IFFALSE 41030
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40985: CALL_OW 45
40989: PPUSH
40990: LD_VAR 0 2
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: PPUSH
40999: CALL_OW 250
41003: PPUSH
41004: LD_VAR 0 2
41008: PUSH
41009: LD_INT 1
41011: ARRAY
41012: PPUSH
41013: CALL_OW 251
41017: PPUSH
41018: LD_INT 12
41020: PPUSH
41021: LD_INT 1
41023: PPUSH
41024: CALL_OW 50
41028: GO 41042
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
41030: CALL_OW 45
41034: PPUSH
41035: LD_INT 1
41037: PPUSH
41038: CALL_OW 51
// end ;
41042: GO 40916
41044: POP
41045: POP
// end ;
41046: PPOPN 2
41048: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
41049: LD_EXP 72
41053: PUSH
41054: LD_EXP 118
41058: AND
41059: IFFALSE 41281
41061: GO 41063
41063: DISABLE
41064: LD_INT 0
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41072: LD_ADDR_VAR 0 6
41076: PUSH
41077: LD_INT 22
41079: PUSH
41080: LD_OWVAR 2
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 21
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: LD_INT 23
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: LIST
41120: PPUSH
41121: CALL_OW 69
41125: ST_TO_ADDR
// if not tmp then
41126: LD_VAR 0 6
41130: NOT
41131: IFFALSE 41135
// exit ;
41133: GO 41281
// s1 := rand ( 1 , 4 ) ;
41135: LD_ADDR_VAR 0 2
41139: PUSH
41140: LD_INT 1
41142: PPUSH
41143: LD_INT 4
41145: PPUSH
41146: CALL_OW 12
41150: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
41151: LD_ADDR_VAR 0 4
41155: PUSH
41156: LD_VAR 0 6
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PPUSH
41165: LD_VAR 0 2
41169: PPUSH
41170: CALL_OW 259
41174: ST_TO_ADDR
// if s1 = 1 then
41175: LD_VAR 0 2
41179: PUSH
41180: LD_INT 1
41182: EQUAL
41183: IFFALSE 41203
// s2 := rand ( 2 , 4 ) else
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: LD_INT 2
41192: PPUSH
41193: LD_INT 4
41195: PPUSH
41196: CALL_OW 12
41200: ST_TO_ADDR
41201: GO 41211
// s2 := 1 ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_INT 1
41210: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
41211: LD_ADDR_VAR 0 5
41215: PUSH
41216: LD_VAR 0 6
41220: PUSH
41221: LD_INT 1
41223: ARRAY
41224: PPUSH
41225: LD_VAR 0 3
41229: PPUSH
41230: CALL_OW 259
41234: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
41235: LD_VAR 0 6
41239: PUSH
41240: LD_INT 1
41242: ARRAY
41243: PPUSH
41244: LD_VAR 0 2
41248: PPUSH
41249: LD_VAR 0 5
41253: PPUSH
41254: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41258: LD_VAR 0 6
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: PPUSH
41267: LD_VAR 0 3
41271: PPUSH
41272: LD_VAR 0 4
41276: PPUSH
41277: CALL_OW 237
// end ;
41281: PPOPN 6
41283: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41284: LD_EXP 72
41288: PUSH
41289: LD_EXP 119
41293: AND
41294: IFFALSE 41373
41296: GO 41298
41298: DISABLE
41299: LD_INT 0
41301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41302: LD_ADDR_VAR 0 1
41306: PUSH
41307: LD_INT 22
41309: PUSH
41310: LD_OWVAR 2
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 30
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PPUSH
41333: CALL_OW 69
41337: ST_TO_ADDR
// if not tmp then
41338: LD_VAR 0 1
41342: NOT
41343: IFFALSE 41347
// exit ;
41345: GO 41373
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41347: LD_VAR 0 1
41351: PUSH
41352: LD_INT 1
41354: PPUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 12
41364: ARRAY
41365: PPUSH
41366: LD_INT 1
41368: PPUSH
41369: CALL_OW 234
// end ;
41373: PPOPN 1
41375: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41376: LD_EXP 72
41380: PUSH
41381: LD_EXP 120
41385: AND
41386: IFFALSE 41498
41388: GO 41390
41390: DISABLE
41391: LD_INT 0
41393: PPUSH
41394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41395: LD_ADDR_VAR 0 2
41399: PUSH
41400: LD_INT 22
41402: PUSH
41403: LD_OWVAR 2
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 30
41417: PUSH
41418: LD_INT 27
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 30
41427: PUSH
41428: LD_INT 26
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 30
41437: PUSH
41438: LD_INT 28
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PPUSH
41455: CALL_OW 69
41459: ST_TO_ADDR
// if not tmp then
41460: LD_VAR 0 2
41464: NOT
41465: IFFALSE 41469
// exit ;
41467: GO 41498
// for i in tmp do
41469: LD_ADDR_VAR 0 1
41473: PUSH
41474: LD_VAR 0 2
41478: PUSH
41479: FOR_IN
41480: IFFALSE 41496
// SetLives ( i , 1 ) ;
41482: LD_VAR 0 1
41486: PPUSH
41487: LD_INT 1
41489: PPUSH
41490: CALL_OW 234
41494: GO 41479
41496: POP
41497: POP
// end ;
41498: PPOPN 2
41500: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41501: LD_EXP 72
41505: PUSH
41506: LD_EXP 121
41510: AND
41511: IFFALSE 41798
41513: GO 41515
41515: DISABLE
41516: LD_INT 0
41518: PPUSH
41519: PPUSH
41520: PPUSH
// begin i := rand ( 1 , 7 ) ;
41521: LD_ADDR_VAR 0 1
41525: PUSH
41526: LD_INT 1
41528: PPUSH
41529: LD_INT 7
41531: PPUSH
41532: CALL_OW 12
41536: ST_TO_ADDR
// case i of 1 :
41537: LD_VAR 0 1
41541: PUSH
41542: LD_INT 1
41544: DOUBLE
41545: EQUAL
41546: IFTRUE 41550
41548: GO 41560
41550: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41551: LD_STRING earthquake(getX(game), 0, 32)
41553: PPUSH
41554: CALL_OW 559
41558: GO 41798
41560: LD_INT 2
41562: DOUBLE
41563: EQUAL
41564: IFTRUE 41568
41566: GO 41582
41568: POP
// begin ToLua ( displayStucuk(); ) ;
41569: LD_STRING displayStucuk();
41571: PPUSH
41572: CALL_OW 559
// ResetFog ;
41576: CALL_OW 335
// end ; 3 :
41580: GO 41798
41582: LD_INT 3
41584: DOUBLE
41585: EQUAL
41586: IFTRUE 41590
41588: GO 41694
41590: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41591: LD_ADDR_VAR 0 2
41595: PUSH
41596: LD_INT 22
41598: PUSH
41599: LD_OWVAR 2
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 25
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PPUSH
41622: CALL_OW 69
41626: ST_TO_ADDR
// if not tmp then
41627: LD_VAR 0 2
41631: NOT
41632: IFFALSE 41636
// exit ;
41634: GO 41798
// un := tmp [ rand ( 1 , tmp ) ] ;
41636: LD_ADDR_VAR 0 3
41640: PUSH
41641: LD_VAR 0 2
41645: PUSH
41646: LD_INT 1
41648: PPUSH
41649: LD_VAR 0 2
41653: PPUSH
41654: CALL_OW 12
41658: ARRAY
41659: ST_TO_ADDR
// if Crawls ( un ) then
41660: LD_VAR 0 3
41664: PPUSH
41665: CALL_OW 318
41669: IFFALSE 41680
// ComWalk ( un ) ;
41671: LD_VAR 0 3
41675: PPUSH
41676: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41680: LD_VAR 0 3
41684: PPUSH
41685: LD_INT 8
41687: PPUSH
41688: CALL_OW 336
// end ; 4 :
41692: GO 41798
41694: LD_INT 4
41696: DOUBLE
41697: EQUAL
41698: IFTRUE 41702
41700: GO 41776
41702: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41703: LD_ADDR_VAR 0 2
41707: PUSH
41708: LD_INT 22
41710: PUSH
41711: LD_OWVAR 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 30
41722: PUSH
41723: LD_INT 29
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PPUSH
41734: CALL_OW 69
41738: ST_TO_ADDR
// if not tmp then
41739: LD_VAR 0 2
41743: NOT
41744: IFFALSE 41748
// exit ;
41746: GO 41798
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41748: LD_VAR 0 2
41752: PUSH
41753: LD_INT 1
41755: ARRAY
41756: PPUSH
41757: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41761: LD_VAR 0 2
41765: PUSH
41766: LD_INT 1
41768: ARRAY
41769: PPUSH
41770: CALL_OW 65
// end ; 5 .. 7 :
41774: GO 41798
41776: LD_INT 5
41778: DOUBLE
41779: GREATEREQUAL
41780: IFFALSE 41788
41782: LD_INT 7
41784: DOUBLE
41785: LESSEQUAL
41786: IFTRUE 41790
41788: GO 41797
41790: POP
// StreamSibBomb ; end ;
41791: CALL 38035 0 0
41795: GO 41798
41797: POP
// end ;
41798: PPOPN 3
41800: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41801: LD_EXP 72
41805: PUSH
41806: LD_EXP 122
41810: AND
41811: IFFALSE 41967
41813: GO 41815
41815: DISABLE
41816: LD_INT 0
41818: PPUSH
41819: PPUSH
41820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41821: LD_ADDR_VAR 0 2
41825: PUSH
41826: LD_INT 81
41828: PUSH
41829: LD_OWVAR 2
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: LD_INT 21
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 21
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PPUSH
41870: CALL_OW 69
41874: ST_TO_ADDR
// if not tmp then
41875: LD_VAR 0 2
41879: NOT
41880: IFFALSE 41884
// exit ;
41882: GO 41967
// p := 0 ;
41884: LD_ADDR_VAR 0 3
41888: PUSH
41889: LD_INT 0
41891: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41892: LD_INT 35
41894: PPUSH
41895: CALL_OW 67
// p := p + 1 ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_VAR 0 3
41908: PUSH
41909: LD_INT 1
41911: PLUS
41912: ST_TO_ADDR
// for i in tmp do
41913: LD_ADDR_VAR 0 1
41917: PUSH
41918: LD_VAR 0 2
41922: PUSH
41923: FOR_IN
41924: IFFALSE 41955
// if GetLives ( i ) < 1000 then
41926: LD_VAR 0 1
41930: PPUSH
41931: CALL_OW 256
41935: PUSH
41936: LD_INT 1000
41938: LESS
41939: IFFALSE 41953
// SetLives ( i , 1000 ) ;
41941: LD_VAR 0 1
41945: PPUSH
41946: LD_INT 1000
41948: PPUSH
41949: CALL_OW 234
41953: GO 41923
41955: POP
41956: POP
// until p > 20 ;
41957: LD_VAR 0 3
41961: PUSH
41962: LD_INT 20
41964: GREATER
41965: IFFALSE 41892
// end ;
41967: PPOPN 3
41969: END
// every 0 0$1 trigger StreamModeActive and sTime do
41970: LD_EXP 72
41974: PUSH
41975: LD_EXP 123
41979: AND
41980: IFFALSE 42015
41982: GO 41984
41984: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41985: LD_INT 28
41987: PPUSH
41988: LD_OWVAR 2
41992: PPUSH
41993: LD_INT 2
41995: PPUSH
41996: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
42000: LD_INT 30
42002: PPUSH
42003: LD_OWVAR 2
42007: PPUSH
42008: LD_INT 2
42010: PPUSH
42011: CALL_OW 322
// end ;
42015: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
42016: LD_EXP 72
42020: PUSH
42021: LD_EXP 124
42025: AND
42026: IFFALSE 42147
42028: GO 42030
42030: DISABLE
42031: LD_INT 0
42033: PPUSH
42034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42035: LD_ADDR_VAR 0 2
42039: PUSH
42040: LD_INT 22
42042: PUSH
42043: LD_OWVAR 2
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 21
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: PUSH
42065: LD_INT 23
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PPUSH
42084: CALL_OW 69
42088: ST_TO_ADDR
// if not tmp then
42089: LD_VAR 0 2
42093: NOT
42094: IFFALSE 42098
// exit ;
42096: GO 42147
// for i in tmp do
42098: LD_ADDR_VAR 0 1
42102: PUSH
42103: LD_VAR 0 2
42107: PUSH
42108: FOR_IN
42109: IFFALSE 42145
// begin if Crawls ( i ) then
42111: LD_VAR 0 1
42115: PPUSH
42116: CALL_OW 318
42120: IFFALSE 42131
// ComWalk ( i ) ;
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 138
// SetClass ( i , 2 ) ;
42131: LD_VAR 0 1
42135: PPUSH
42136: LD_INT 2
42138: PPUSH
42139: CALL_OW 336
// end ;
42143: GO 42108
42145: POP
42146: POP
// end ;
42147: PPOPN 2
42149: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
42150: LD_EXP 72
42154: PUSH
42155: LD_EXP 125
42159: AND
42160: IFFALSE 42448
42162: GO 42164
42164: DISABLE
42165: LD_INT 0
42167: PPUSH
42168: PPUSH
42169: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
42170: LD_OWVAR 2
42174: PPUSH
42175: LD_INT 9
42177: PPUSH
42178: LD_INT 1
42180: PPUSH
42181: LD_INT 1
42183: PPUSH
42184: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
42188: LD_INT 9
42190: PPUSH
42191: LD_OWVAR 2
42195: PPUSH
42196: CALL_OW 343
// uc_side := 9 ;
42200: LD_ADDR_OWVAR 20
42204: PUSH
42205: LD_INT 9
42207: ST_TO_ADDR
// uc_nation := 2 ;
42208: LD_ADDR_OWVAR 21
42212: PUSH
42213: LD_INT 2
42215: ST_TO_ADDR
// hc_name := Dark Warrior ;
42216: LD_ADDR_OWVAR 26
42220: PUSH
42221: LD_STRING Dark Warrior
42223: ST_TO_ADDR
// hc_gallery :=  ;
42224: LD_ADDR_OWVAR 33
42228: PUSH
42229: LD_STRING 
42231: ST_TO_ADDR
// hc_noskilllimit := true ;
42232: LD_ADDR_OWVAR 76
42236: PUSH
42237: LD_INT 1
42239: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
42240: LD_ADDR_OWVAR 31
42244: PUSH
42245: LD_INT 30
42247: PUSH
42248: LD_INT 30
42250: PUSH
42251: LD_INT 30
42253: PUSH
42254: LD_INT 30
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// un := CreateHuman ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: CALL_OW 44
42272: ST_TO_ADDR
// hc_noskilllimit := false ;
42273: LD_ADDR_OWVAR 76
42277: PUSH
42278: LD_INT 0
42280: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42281: LD_VAR 0 3
42285: PPUSH
42286: LD_INT 1
42288: PPUSH
42289: CALL_OW 51
// ToLua ( playRanger() ) ;
42293: LD_STRING playRanger()
42295: PPUSH
42296: CALL_OW 559
// p := 0 ;
42300: LD_ADDR_VAR 0 2
42304: PUSH
42305: LD_INT 0
42307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42308: LD_INT 35
42310: PPUSH
42311: CALL_OW 67
// p := p + 1 ;
42315: LD_ADDR_VAR 0 2
42319: PUSH
42320: LD_VAR 0 2
42324: PUSH
42325: LD_INT 1
42327: PLUS
42328: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42329: LD_VAR 0 3
42333: PPUSH
42334: CALL_OW 256
42338: PUSH
42339: LD_INT 1000
42341: LESS
42342: IFFALSE 42356
// SetLives ( un , 1000 ) ;
42344: LD_VAR 0 3
42348: PPUSH
42349: LD_INT 1000
42351: PPUSH
42352: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42356: LD_VAR 0 3
42360: PPUSH
42361: LD_INT 81
42363: PUSH
42364: LD_OWVAR 2
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 91
42375: PUSH
42376: LD_VAR 0 3
42380: PUSH
42381: LD_INT 30
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PPUSH
42393: CALL_OW 69
42397: PPUSH
42398: LD_VAR 0 3
42402: PPUSH
42403: CALL_OW 74
42407: PPUSH
42408: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42412: LD_VAR 0 2
42416: PUSH
42417: LD_INT 80
42419: GREATER
42420: PUSH
42421: LD_VAR 0 3
42425: PPUSH
42426: CALL_OW 301
42430: OR
42431: IFFALSE 42308
// if un then
42433: LD_VAR 0 3
42437: IFFALSE 42448
// RemoveUnit ( un ) ;
42439: LD_VAR 0 3
42443: PPUSH
42444: CALL_OW 64
// end ;
42448: PPOPN 3
42450: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42451: LD_EXP 126
42455: IFFALSE 42571
42457: GO 42459
42459: DISABLE
42460: LD_INT 0
42462: PPUSH
42463: PPUSH
42464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42465: LD_ADDR_VAR 0 2
42469: PUSH
42470: LD_INT 81
42472: PUSH
42473: LD_OWVAR 2
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 21
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PPUSH
42496: CALL_OW 69
42500: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42501: LD_STRING playComputer()
42503: PPUSH
42504: CALL_OW 559
// if not tmp then
42508: LD_VAR 0 2
42512: NOT
42513: IFFALSE 42517
// exit ;
42515: GO 42571
// for i in tmp do
42517: LD_ADDR_VAR 0 1
42521: PUSH
42522: LD_VAR 0 2
42526: PUSH
42527: FOR_IN
42528: IFFALSE 42569
// for j := 1 to 4 do
42530: LD_ADDR_VAR 0 3
42534: PUSH
42535: DOUBLE
42536: LD_INT 1
42538: DEC
42539: ST_TO_ADDR
42540: LD_INT 4
42542: PUSH
42543: FOR_TO
42544: IFFALSE 42565
// SetSkill ( i , j , 10 ) ;
42546: LD_VAR 0 1
42550: PPUSH
42551: LD_VAR 0 3
42555: PPUSH
42556: LD_INT 10
42558: PPUSH
42559: CALL_OW 237
42563: GO 42543
42565: POP
42566: POP
42567: GO 42527
42569: POP
42570: POP
// end ;
42571: PPOPN 3
42573: END
// every 0 0$1 trigger s30 do var i , tmp ;
42574: LD_EXP 127
42578: IFFALSE 42647
42580: GO 42582
42582: DISABLE
42583: LD_INT 0
42585: PPUSH
42586: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42587: LD_ADDR_VAR 0 2
42591: PUSH
42592: LD_INT 22
42594: PUSH
42595: LD_OWVAR 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PPUSH
42604: CALL_OW 69
42608: ST_TO_ADDR
// if not tmp then
42609: LD_VAR 0 2
42613: NOT
42614: IFFALSE 42618
// exit ;
42616: GO 42647
// for i in tmp do
42618: LD_ADDR_VAR 0 1
42622: PUSH
42623: LD_VAR 0 2
42627: PUSH
42628: FOR_IN
42629: IFFALSE 42645
// SetLives ( i , 300 ) ;
42631: LD_VAR 0 1
42635: PPUSH
42636: LD_INT 300
42638: PPUSH
42639: CALL_OW 234
42643: GO 42628
42645: POP
42646: POP
// end ;
42647: PPOPN 2
42649: END
// every 0 0$1 trigger s60 do var i , tmp ;
42650: LD_EXP 128
42654: IFFALSE 42723
42656: GO 42658
42658: DISABLE
42659: LD_INT 0
42661: PPUSH
42662: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42663: LD_ADDR_VAR 0 2
42667: PUSH
42668: LD_INT 22
42670: PUSH
42671: LD_OWVAR 2
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PPUSH
42680: CALL_OW 69
42684: ST_TO_ADDR
// if not tmp then
42685: LD_VAR 0 2
42689: NOT
42690: IFFALSE 42694
// exit ;
42692: GO 42723
// for i in tmp do
42694: LD_ADDR_VAR 0 1
42698: PUSH
42699: LD_VAR 0 2
42703: PUSH
42704: FOR_IN
42705: IFFALSE 42721
// SetLives ( i , 600 ) ;
42707: LD_VAR 0 1
42711: PPUSH
42712: LD_INT 600
42714: PPUSH
42715: CALL_OW 234
42719: GO 42704
42721: POP
42722: POP
// end ;
42723: PPOPN 2
42725: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42726: LD_INT 0
42728: PPUSH
// case cmd of 301 :
42729: LD_VAR 0 1
42733: PUSH
42734: LD_INT 301
42736: DOUBLE
42737: EQUAL
42738: IFTRUE 42742
42740: GO 42774
42742: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42743: LD_VAR 0 6
42747: PPUSH
42748: LD_VAR 0 7
42752: PPUSH
42753: LD_VAR 0 8
42757: PPUSH
42758: LD_VAR 0 4
42762: PPUSH
42763: LD_VAR 0 5
42767: PPUSH
42768: CALL 43975 0 5
42772: GO 42895
42774: LD_INT 302
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42782
42780: GO 42819
42782: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42783: LD_VAR 0 6
42787: PPUSH
42788: LD_VAR 0 7
42792: PPUSH
42793: LD_VAR 0 8
42797: PPUSH
42798: LD_VAR 0 9
42802: PPUSH
42803: LD_VAR 0 4
42807: PPUSH
42808: LD_VAR 0 5
42812: PPUSH
42813: CALL 44066 0 6
42817: GO 42895
42819: LD_INT 303
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42864
42827: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42828: LD_VAR 0 6
42832: PPUSH
42833: LD_VAR 0 7
42837: PPUSH
42838: LD_VAR 0 8
42842: PPUSH
42843: LD_VAR 0 9
42847: PPUSH
42848: LD_VAR 0 4
42852: PPUSH
42853: LD_VAR 0 5
42857: PPUSH
42858: CALL 42900 0 6
42862: GO 42895
42864: LD_INT 304
42866: DOUBLE
42867: EQUAL
42868: IFTRUE 42872
42870: GO 42894
42872: POP
// hHackTeleport ( unit , x , y ) ; end ;
42873: LD_VAR 0 2
42877: PPUSH
42878: LD_VAR 0 4
42882: PPUSH
42883: LD_VAR 0 5
42887: PPUSH
42888: CALL 44659 0 3
42892: GO 42895
42894: POP
// end ;
42895: LD_VAR 0 12
42899: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42900: LD_INT 0
42902: PPUSH
42903: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42904: LD_VAR 0 1
42908: PUSH
42909: LD_INT 1
42911: LESS
42912: PUSH
42913: LD_VAR 0 1
42917: PUSH
42918: LD_INT 3
42920: GREATER
42921: OR
42922: PUSH
42923: LD_VAR 0 5
42927: PPUSH
42928: LD_VAR 0 6
42932: PPUSH
42933: CALL_OW 428
42937: OR
42938: IFFALSE 42942
// exit ;
42940: GO 43662
// uc_side := your_side ;
42942: LD_ADDR_OWVAR 20
42946: PUSH
42947: LD_OWVAR 2
42951: ST_TO_ADDR
// uc_nation := nation ;
42952: LD_ADDR_OWVAR 21
42956: PUSH
42957: LD_VAR 0 1
42961: ST_TO_ADDR
// bc_level = 1 ;
42962: LD_ADDR_OWVAR 43
42966: PUSH
42967: LD_INT 1
42969: ST_TO_ADDR
// case btype of 1 :
42970: LD_VAR 0 2
42974: PUSH
42975: LD_INT 1
42977: DOUBLE
42978: EQUAL
42979: IFTRUE 42983
42981: GO 42994
42983: POP
// bc_type := b_depot ; 2 :
42984: LD_ADDR_OWVAR 42
42988: PUSH
42989: LD_INT 0
42991: ST_TO_ADDR
42992: GO 43606
42994: LD_INT 2
42996: DOUBLE
42997: EQUAL
42998: IFTRUE 43002
43000: GO 43013
43002: POP
// bc_type := b_warehouse ; 3 :
43003: LD_ADDR_OWVAR 42
43007: PUSH
43008: LD_INT 1
43010: ST_TO_ADDR
43011: GO 43606
43013: LD_INT 3
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43021
43019: GO 43032
43021: POP
// bc_type := b_lab ; 4 .. 9 :
43022: LD_ADDR_OWVAR 42
43026: PUSH
43027: LD_INT 6
43029: ST_TO_ADDR
43030: GO 43606
43032: LD_INT 4
43034: DOUBLE
43035: GREATEREQUAL
43036: IFFALSE 43044
43038: LD_INT 9
43040: DOUBLE
43041: LESSEQUAL
43042: IFTRUE 43046
43044: GO 43098
43046: POP
// begin bc_type := b_lab_half ;
43047: LD_ADDR_OWVAR 42
43051: PUSH
43052: LD_INT 7
43054: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
43055: LD_ADDR_OWVAR 44
43059: PUSH
43060: LD_INT 10
43062: PUSH
43063: LD_INT 11
43065: PUSH
43066: LD_INT 12
43068: PUSH
43069: LD_INT 15
43071: PUSH
43072: LD_INT 14
43074: PUSH
43075: LD_INT 13
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: PUSH
43086: LD_VAR 0 2
43090: PUSH
43091: LD_INT 3
43093: MINUS
43094: ARRAY
43095: ST_TO_ADDR
// end ; 10 .. 13 :
43096: GO 43606
43098: LD_INT 10
43100: DOUBLE
43101: GREATEREQUAL
43102: IFFALSE 43110
43104: LD_INT 13
43106: DOUBLE
43107: LESSEQUAL
43108: IFTRUE 43112
43110: GO 43189
43112: POP
// begin bc_type := b_lab_full ;
43113: LD_ADDR_OWVAR 42
43117: PUSH
43118: LD_INT 8
43120: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
43121: LD_ADDR_OWVAR 44
43125: PUSH
43126: LD_INT 10
43128: PUSH
43129: LD_INT 12
43131: PUSH
43132: LD_INT 14
43134: PUSH
43135: LD_INT 13
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: PUSH
43144: LD_VAR 0 2
43148: PUSH
43149: LD_INT 9
43151: MINUS
43152: ARRAY
43153: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
43154: LD_ADDR_OWVAR 45
43158: PUSH
43159: LD_INT 11
43161: PUSH
43162: LD_INT 15
43164: PUSH
43165: LD_INT 12
43167: PUSH
43168: LD_INT 15
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: PUSH
43177: LD_VAR 0 2
43181: PUSH
43182: LD_INT 9
43184: MINUS
43185: ARRAY
43186: ST_TO_ADDR
// end ; 14 :
43187: GO 43606
43189: LD_INT 14
43191: DOUBLE
43192: EQUAL
43193: IFTRUE 43197
43195: GO 43208
43197: POP
// bc_type := b_workshop ; 15 :
43198: LD_ADDR_OWVAR 42
43202: PUSH
43203: LD_INT 2
43205: ST_TO_ADDR
43206: GO 43606
43208: LD_INT 15
43210: DOUBLE
43211: EQUAL
43212: IFTRUE 43216
43214: GO 43227
43216: POP
// bc_type := b_factory ; 16 :
43217: LD_ADDR_OWVAR 42
43221: PUSH
43222: LD_INT 3
43224: ST_TO_ADDR
43225: GO 43606
43227: LD_INT 16
43229: DOUBLE
43230: EQUAL
43231: IFTRUE 43235
43233: GO 43246
43235: POP
// bc_type := b_ext_gun ; 17 :
43236: LD_ADDR_OWVAR 42
43240: PUSH
43241: LD_INT 17
43243: ST_TO_ADDR
43244: GO 43606
43246: LD_INT 17
43248: DOUBLE
43249: EQUAL
43250: IFTRUE 43254
43252: GO 43282
43254: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
43255: LD_ADDR_OWVAR 42
43259: PUSH
43260: LD_INT 19
43262: PUSH
43263: LD_INT 23
43265: PUSH
43266: LD_INT 19
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: PUSH
43274: LD_VAR 0 1
43278: ARRAY
43279: ST_TO_ADDR
43280: GO 43606
43282: LD_INT 18
43284: DOUBLE
43285: EQUAL
43286: IFTRUE 43290
43288: GO 43301
43290: POP
// bc_type := b_ext_radar ; 19 :
43291: LD_ADDR_OWVAR 42
43295: PUSH
43296: LD_INT 20
43298: ST_TO_ADDR
43299: GO 43606
43301: LD_INT 19
43303: DOUBLE
43304: EQUAL
43305: IFTRUE 43309
43307: GO 43320
43309: POP
// bc_type := b_ext_radio ; 20 :
43310: LD_ADDR_OWVAR 42
43314: PUSH
43315: LD_INT 22
43317: ST_TO_ADDR
43318: GO 43606
43320: LD_INT 20
43322: DOUBLE
43323: EQUAL
43324: IFTRUE 43328
43326: GO 43339
43328: POP
// bc_type := b_ext_siberium ; 21 :
43329: LD_ADDR_OWVAR 42
43333: PUSH
43334: LD_INT 21
43336: ST_TO_ADDR
43337: GO 43606
43339: LD_INT 21
43341: DOUBLE
43342: EQUAL
43343: IFTRUE 43347
43345: GO 43358
43347: POP
// bc_type := b_ext_computer ; 22 :
43348: LD_ADDR_OWVAR 42
43352: PUSH
43353: LD_INT 24
43355: ST_TO_ADDR
43356: GO 43606
43358: LD_INT 22
43360: DOUBLE
43361: EQUAL
43362: IFTRUE 43366
43364: GO 43377
43366: POP
// bc_type := b_ext_track ; 23 :
43367: LD_ADDR_OWVAR 42
43371: PUSH
43372: LD_INT 16
43374: ST_TO_ADDR
43375: GO 43606
43377: LD_INT 23
43379: DOUBLE
43380: EQUAL
43381: IFTRUE 43385
43383: GO 43396
43385: POP
// bc_type := b_ext_laser ; 24 :
43386: LD_ADDR_OWVAR 42
43390: PUSH
43391: LD_INT 25
43393: ST_TO_ADDR
43394: GO 43606
43396: LD_INT 24
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43415
43404: POP
// bc_type := b_control_tower ; 25 :
43405: LD_ADDR_OWVAR 42
43409: PUSH
43410: LD_INT 36
43412: ST_TO_ADDR
43413: GO 43606
43415: LD_INT 25
43417: DOUBLE
43418: EQUAL
43419: IFTRUE 43423
43421: GO 43434
43423: POP
// bc_type := b_breastwork ; 26 :
43424: LD_ADDR_OWVAR 42
43428: PUSH
43429: LD_INT 31
43431: ST_TO_ADDR
43432: GO 43606
43434: LD_INT 26
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43453
43442: POP
// bc_type := b_bunker ; 27 :
43443: LD_ADDR_OWVAR 42
43447: PUSH
43448: LD_INT 32
43450: ST_TO_ADDR
43451: GO 43606
43453: LD_INT 27
43455: DOUBLE
43456: EQUAL
43457: IFTRUE 43461
43459: GO 43472
43461: POP
// bc_type := b_turret ; 28 :
43462: LD_ADDR_OWVAR 42
43466: PUSH
43467: LD_INT 33
43469: ST_TO_ADDR
43470: GO 43606
43472: LD_INT 28
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 43491
43480: POP
// bc_type := b_armoury ; 29 :
43481: LD_ADDR_OWVAR 42
43485: PUSH
43486: LD_INT 4
43488: ST_TO_ADDR
43489: GO 43606
43491: LD_INT 29
43493: DOUBLE
43494: EQUAL
43495: IFTRUE 43499
43497: GO 43510
43499: POP
// bc_type := b_barracks ; 30 :
43500: LD_ADDR_OWVAR 42
43504: PUSH
43505: LD_INT 5
43507: ST_TO_ADDR
43508: GO 43606
43510: LD_INT 30
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43518
43516: GO 43529
43518: POP
// bc_type := b_solar_power ; 31 :
43519: LD_ADDR_OWVAR 42
43523: PUSH
43524: LD_INT 27
43526: ST_TO_ADDR
43527: GO 43606
43529: LD_INT 31
43531: DOUBLE
43532: EQUAL
43533: IFTRUE 43537
43535: GO 43548
43537: POP
// bc_type := b_oil_power ; 32 :
43538: LD_ADDR_OWVAR 42
43542: PUSH
43543: LD_INT 26
43545: ST_TO_ADDR
43546: GO 43606
43548: LD_INT 32
43550: DOUBLE
43551: EQUAL
43552: IFTRUE 43556
43554: GO 43567
43556: POP
// bc_type := b_siberite_power ; 33 :
43557: LD_ADDR_OWVAR 42
43561: PUSH
43562: LD_INT 28
43564: ST_TO_ADDR
43565: GO 43606
43567: LD_INT 33
43569: DOUBLE
43570: EQUAL
43571: IFTRUE 43575
43573: GO 43586
43575: POP
// bc_type := b_oil_mine ; 34 :
43576: LD_ADDR_OWVAR 42
43580: PUSH
43581: LD_INT 29
43583: ST_TO_ADDR
43584: GO 43606
43586: LD_INT 34
43588: DOUBLE
43589: EQUAL
43590: IFTRUE 43594
43592: GO 43605
43594: POP
// bc_type := b_siberite_mine ; end ;
43595: LD_ADDR_OWVAR 42
43599: PUSH
43600: LD_INT 30
43602: ST_TO_ADDR
43603: GO 43606
43605: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43606: LD_ADDR_VAR 0 8
43610: PUSH
43611: LD_VAR 0 5
43615: PPUSH
43616: LD_VAR 0 6
43620: PPUSH
43621: LD_VAR 0 3
43625: PPUSH
43626: CALL_OW 47
43630: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43631: LD_OWVAR 42
43635: PUSH
43636: LD_INT 32
43638: PUSH
43639: LD_INT 33
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: IN
43646: IFFALSE 43662
// PlaceWeaponTurret ( b , weapon ) ;
43648: LD_VAR 0 8
43652: PPUSH
43653: LD_VAR 0 4
43657: PPUSH
43658: CALL_OW 431
// end ;
43662: LD_VAR 0 7
43666: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43667: LD_INT 0
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43673: LD_ADDR_VAR 0 4
43677: PUSH
43678: LD_INT 22
43680: PUSH
43681: LD_OWVAR 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 30
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 30
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PPUSH
43722: CALL_OW 69
43726: ST_TO_ADDR
// if not tmp then
43727: LD_VAR 0 4
43731: NOT
43732: IFFALSE 43736
// exit ;
43734: GO 43795
// for i in tmp do
43736: LD_ADDR_VAR 0 2
43740: PUSH
43741: LD_VAR 0 4
43745: PUSH
43746: FOR_IN
43747: IFFALSE 43793
// for j = 1 to 3 do
43749: LD_ADDR_VAR 0 3
43753: PUSH
43754: DOUBLE
43755: LD_INT 1
43757: DEC
43758: ST_TO_ADDR
43759: LD_INT 3
43761: PUSH
43762: FOR_TO
43763: IFFALSE 43789
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43765: LD_VAR 0 2
43769: PPUSH
43770: CALL_OW 274
43774: PPUSH
43775: LD_VAR 0 3
43779: PPUSH
43780: LD_INT 99999
43782: PPUSH
43783: CALL_OW 277
43787: GO 43762
43789: POP
43790: POP
43791: GO 43746
43793: POP
43794: POP
// end ;
43795: LD_VAR 0 1
43799: RET
// export function hHackSetLevel10 ; var i , j ; begin
43800: LD_INT 0
43802: PPUSH
43803: PPUSH
43804: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43805: LD_ADDR_VAR 0 2
43809: PUSH
43810: LD_INT 21
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PPUSH
43820: CALL_OW 69
43824: PUSH
43825: FOR_IN
43826: IFFALSE 43878
// if IsSelected ( i ) then
43828: LD_VAR 0 2
43832: PPUSH
43833: CALL_OW 306
43837: IFFALSE 43876
// begin for j := 1 to 4 do
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: DOUBLE
43845: LD_INT 1
43847: DEC
43848: ST_TO_ADDR
43849: LD_INT 4
43851: PUSH
43852: FOR_TO
43853: IFFALSE 43874
// SetSkill ( i , j , 10 ) ;
43855: LD_VAR 0 2
43859: PPUSH
43860: LD_VAR 0 3
43864: PPUSH
43865: LD_INT 10
43867: PPUSH
43868: CALL_OW 237
43872: GO 43852
43874: POP
43875: POP
// end ;
43876: GO 43825
43878: POP
43879: POP
// end ;
43880: LD_VAR 0 1
43884: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43885: LD_INT 0
43887: PPUSH
43888: PPUSH
43889: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43890: LD_ADDR_VAR 0 2
43894: PUSH
43895: LD_INT 22
43897: PUSH
43898: LD_OWVAR 2
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 21
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PPUSH
43921: CALL_OW 69
43925: PUSH
43926: FOR_IN
43927: IFFALSE 43968
// begin for j := 1 to 4 do
43929: LD_ADDR_VAR 0 3
43933: PUSH
43934: DOUBLE
43935: LD_INT 1
43937: DEC
43938: ST_TO_ADDR
43939: LD_INT 4
43941: PUSH
43942: FOR_TO
43943: IFFALSE 43964
// SetSkill ( i , j , 10 ) ;
43945: LD_VAR 0 2
43949: PPUSH
43950: LD_VAR 0 3
43954: PPUSH
43955: LD_INT 10
43957: PPUSH
43958: CALL_OW 237
43962: GO 43942
43964: POP
43965: POP
// end ;
43966: GO 43926
43968: POP
43969: POP
// end ;
43970: LD_VAR 0 1
43974: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43975: LD_INT 0
43977: PPUSH
// uc_side := your_side ;
43978: LD_ADDR_OWVAR 20
43982: PUSH
43983: LD_OWVAR 2
43987: ST_TO_ADDR
// uc_nation := nation ;
43988: LD_ADDR_OWVAR 21
43992: PUSH
43993: LD_VAR 0 1
43997: ST_TO_ADDR
// InitHc ;
43998: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
44002: LD_INT 0
44004: PPUSH
44005: LD_VAR 0 2
44009: PPUSH
44010: LD_VAR 0 3
44014: PPUSH
44015: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
44019: LD_VAR 0 4
44023: PPUSH
44024: LD_VAR 0 5
44028: PPUSH
44029: CALL_OW 428
44033: PUSH
44034: LD_INT 0
44036: EQUAL
44037: IFFALSE 44061
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
44039: CALL_OW 44
44043: PPUSH
44044: LD_VAR 0 4
44048: PPUSH
44049: LD_VAR 0 5
44053: PPUSH
44054: LD_INT 1
44056: PPUSH
44057: CALL_OW 48
// end ;
44061: LD_VAR 0 6
44065: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
44066: LD_INT 0
44068: PPUSH
44069: PPUSH
// uc_side := your_side ;
44070: LD_ADDR_OWVAR 20
44074: PUSH
44075: LD_OWVAR 2
44079: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
44080: LD_VAR 0 1
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: LD_INT 4
44096: PUSH
44097: LD_INT 5
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: IN
44107: IFFALSE 44119
// uc_nation := nation_american else
44109: LD_ADDR_OWVAR 21
44113: PUSH
44114: LD_INT 1
44116: ST_TO_ADDR
44117: GO 44162
// if chassis in [ 11 , 12 , 13 , 14 ] then
44119: LD_VAR 0 1
44123: PUSH
44124: LD_INT 11
44126: PUSH
44127: LD_INT 12
44129: PUSH
44130: LD_INT 13
44132: PUSH
44133: LD_INT 14
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: IN
44142: IFFALSE 44154
// uc_nation := nation_arabian else
44144: LD_ADDR_OWVAR 21
44148: PUSH
44149: LD_INT 2
44151: ST_TO_ADDR
44152: GO 44162
// uc_nation := nation_russian ;
44154: LD_ADDR_OWVAR 21
44158: PUSH
44159: LD_INT 3
44161: ST_TO_ADDR
// vc_chassis := chassis ;
44162: LD_ADDR_OWVAR 37
44166: PUSH
44167: LD_VAR 0 1
44171: ST_TO_ADDR
// vc_engine := engine ;
44172: LD_ADDR_OWVAR 39
44176: PUSH
44177: LD_VAR 0 2
44181: ST_TO_ADDR
// vc_control := control ;
44182: LD_ADDR_OWVAR 38
44186: PUSH
44187: LD_VAR 0 3
44191: ST_TO_ADDR
// vc_weapon := weapon ;
44192: LD_ADDR_OWVAR 40
44196: PUSH
44197: LD_VAR 0 4
44201: ST_TO_ADDR
// un := CreateVehicle ;
44202: LD_ADDR_VAR 0 8
44206: PUSH
44207: CALL_OW 45
44211: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
44212: LD_VAR 0 8
44216: PPUSH
44217: LD_INT 0
44219: PPUSH
44220: LD_INT 5
44222: PPUSH
44223: CALL_OW 12
44227: PPUSH
44228: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
44232: LD_VAR 0 8
44236: PPUSH
44237: LD_VAR 0 5
44241: PPUSH
44242: LD_VAR 0 6
44246: PPUSH
44247: LD_INT 1
44249: PPUSH
44250: CALL_OW 48
// end ;
44254: LD_VAR 0 7
44258: RET
// export hInvincible ; every 1 do
44259: GO 44261
44261: DISABLE
// hInvincible := [ ] ;
44262: LD_ADDR_EXP 129
44266: PUSH
44267: EMPTY
44268: ST_TO_ADDR
44269: END
// every 10 do var i ;
44270: GO 44272
44272: DISABLE
44273: LD_INT 0
44275: PPUSH
// begin enable ;
44276: ENABLE
// if not hInvincible then
44277: LD_EXP 129
44281: NOT
44282: IFFALSE 44286
// exit ;
44284: GO 44330
// for i in hInvincible do
44286: LD_ADDR_VAR 0 1
44290: PUSH
44291: LD_EXP 129
44295: PUSH
44296: FOR_IN
44297: IFFALSE 44328
// if GetLives ( i ) < 1000 then
44299: LD_VAR 0 1
44303: PPUSH
44304: CALL_OW 256
44308: PUSH
44309: LD_INT 1000
44311: LESS
44312: IFFALSE 44326
// SetLives ( i , 1000 ) ;
44314: LD_VAR 0 1
44318: PPUSH
44319: LD_INT 1000
44321: PPUSH
44322: CALL_OW 234
44326: GO 44296
44328: POP
44329: POP
// end ;
44330: PPOPN 1
44332: END
// export function hHackInvincible ; var i ; begin
44333: LD_INT 0
44335: PPUSH
44336: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44337: LD_ADDR_VAR 0 2
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 21
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 21
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: LIST
44369: PPUSH
44370: CALL_OW 69
44374: PUSH
44375: FOR_IN
44376: IFFALSE 44437
// if IsSelected ( i ) then
44378: LD_VAR 0 2
44382: PPUSH
44383: CALL_OW 306
44387: IFFALSE 44435
// begin if i in hInvincible then
44389: LD_VAR 0 2
44393: PUSH
44394: LD_EXP 129
44398: IN
44399: IFFALSE 44419
// hInvincible := hInvincible diff i else
44401: LD_ADDR_EXP 129
44405: PUSH
44406: LD_EXP 129
44410: PUSH
44411: LD_VAR 0 2
44415: DIFF
44416: ST_TO_ADDR
44417: GO 44435
// hInvincible := hInvincible union i ;
44419: LD_ADDR_EXP 129
44423: PUSH
44424: LD_EXP 129
44428: PUSH
44429: LD_VAR 0 2
44433: UNION
44434: ST_TO_ADDR
// end ;
44435: GO 44375
44437: POP
44438: POP
// end ;
44439: LD_VAR 0 1
44443: RET
// export function hHackInvisible ; var i , j ; begin
44444: LD_INT 0
44446: PPUSH
44447: PPUSH
44448: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44449: LD_ADDR_VAR 0 2
44453: PUSH
44454: LD_INT 21
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PPUSH
44464: CALL_OW 69
44468: PUSH
44469: FOR_IN
44470: IFFALSE 44494
// if IsSelected ( i ) then
44472: LD_VAR 0 2
44476: PPUSH
44477: CALL_OW 306
44481: IFFALSE 44492
// ComForceInvisible ( i ) ;
44483: LD_VAR 0 2
44487: PPUSH
44488: CALL_OW 496
44492: GO 44469
44494: POP
44495: POP
// end ;
44496: LD_VAR 0 1
44500: RET
// export function hHackChangeYourSide ; begin
44501: LD_INT 0
44503: PPUSH
// if your_side = 8 then
44504: LD_OWVAR 2
44508: PUSH
44509: LD_INT 8
44511: EQUAL
44512: IFFALSE 44524
// your_side := 0 else
44514: LD_ADDR_OWVAR 2
44518: PUSH
44519: LD_INT 0
44521: ST_TO_ADDR
44522: GO 44538
// your_side := your_side + 1 ;
44524: LD_ADDR_OWVAR 2
44528: PUSH
44529: LD_OWVAR 2
44533: PUSH
44534: LD_INT 1
44536: PLUS
44537: ST_TO_ADDR
// end ;
44538: LD_VAR 0 1
44542: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44543: LD_INT 0
44545: PPUSH
44546: PPUSH
44547: PPUSH
// for i in all_units do
44548: LD_ADDR_VAR 0 2
44552: PUSH
44553: LD_OWVAR 3
44557: PUSH
44558: FOR_IN
44559: IFFALSE 44637
// if IsSelected ( i ) then
44561: LD_VAR 0 2
44565: PPUSH
44566: CALL_OW 306
44570: IFFALSE 44635
// begin j := GetSide ( i ) ;
44572: LD_ADDR_VAR 0 3
44576: PUSH
44577: LD_VAR 0 2
44581: PPUSH
44582: CALL_OW 255
44586: ST_TO_ADDR
// if j = 8 then
44587: LD_VAR 0 3
44591: PUSH
44592: LD_INT 8
44594: EQUAL
44595: IFFALSE 44607
// j := 0 else
44597: LD_ADDR_VAR 0 3
44601: PUSH
44602: LD_INT 0
44604: ST_TO_ADDR
44605: GO 44621
// j := j + 1 ;
44607: LD_ADDR_VAR 0 3
44611: PUSH
44612: LD_VAR 0 3
44616: PUSH
44617: LD_INT 1
44619: PLUS
44620: ST_TO_ADDR
// SetSide ( i , j ) ;
44621: LD_VAR 0 2
44625: PPUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: CALL_OW 235
// end ;
44635: GO 44558
44637: POP
44638: POP
// end ;
44639: LD_VAR 0 1
44643: RET
// export function hHackFog ; begin
44644: LD_INT 0
44646: PPUSH
// FogOff ( true ) ;
44647: LD_INT 1
44649: PPUSH
44650: CALL_OW 344
// end ;
44654: LD_VAR 0 1
44658: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44659: LD_INT 0
44661: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44662: LD_VAR 0 1
44666: PPUSH
44667: LD_VAR 0 2
44671: PPUSH
44672: LD_VAR 0 3
44676: PPUSH
44677: LD_INT 1
44679: PPUSH
44680: LD_INT 1
44682: PPUSH
44683: CALL_OW 483
// CenterOnXY ( x , y ) ;
44687: LD_VAR 0 2
44691: PPUSH
44692: LD_VAR 0 3
44696: PPUSH
44697: CALL_OW 84
// end ;
44701: LD_VAR 0 4
44705: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44706: LD_INT 0
44708: PPUSH
44709: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44710: LD_VAR 0 1
44714: NOT
44715: PUSH
44716: LD_VAR 0 2
44720: PPUSH
44721: LD_VAR 0 3
44725: PPUSH
44726: CALL_OW 488
44730: NOT
44731: OR
44732: PUSH
44733: LD_VAR 0 1
44737: PPUSH
44738: CALL_OW 266
44742: PUSH
44743: LD_INT 3
44745: NONEQUAL
44746: PUSH
44747: LD_VAR 0 1
44751: PPUSH
44752: CALL_OW 247
44756: PUSH
44757: LD_INT 1
44759: EQUAL
44760: NOT
44761: AND
44762: OR
44763: IFFALSE 44767
// exit ;
44765: GO 44916
// if GetType ( factory ) = unit_human then
44767: LD_VAR 0 1
44771: PPUSH
44772: CALL_OW 247
44776: PUSH
44777: LD_INT 1
44779: EQUAL
44780: IFFALSE 44797
// factory := IsInUnit ( factory ) ;
44782: LD_ADDR_VAR 0 1
44786: PUSH
44787: LD_VAR 0 1
44791: PPUSH
44792: CALL_OW 310
44796: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL_OW 266
44806: PUSH
44807: LD_INT 3
44809: NONEQUAL
44810: IFFALSE 44814
// exit ;
44812: GO 44916
// if HexInfo ( x , y ) = factory then
44814: LD_VAR 0 2
44818: PPUSH
44819: LD_VAR 0 3
44823: PPUSH
44824: CALL_OW 428
44828: PUSH
44829: LD_VAR 0 1
44833: EQUAL
44834: IFFALSE 44861
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44836: LD_ADDR_EXP 130
44840: PUSH
44841: LD_EXP 130
44845: PPUSH
44846: LD_VAR 0 1
44850: PPUSH
44851: LD_INT 0
44853: PPUSH
44854: CALL_OW 1
44858: ST_TO_ADDR
44859: GO 44912
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44861: LD_ADDR_EXP 130
44865: PUSH
44866: LD_EXP 130
44870: PPUSH
44871: LD_VAR 0 1
44875: PPUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL_OW 255
44885: PUSH
44886: LD_VAR 0 1
44890: PUSH
44891: LD_VAR 0 2
44895: PUSH
44896: LD_VAR 0 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: PPUSH
44907: CALL_OW 1
44911: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44912: CALL 44921 0 0
// end ;
44916: LD_VAR 0 4
44920: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44921: LD_INT 0
44923: PPUSH
44924: PPUSH
44925: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44926: LD_STRING resetFactoryWaypoint();
44928: PPUSH
44929: CALL_OW 559
// if factoryWaypoints then
44933: LD_EXP 130
44937: IFFALSE 45063
// begin list := PrepareArray ( factoryWaypoints ) ;
44939: LD_ADDR_VAR 0 3
44943: PUSH
44944: LD_EXP 130
44948: PPUSH
44949: CALL 91532 0 1
44953: ST_TO_ADDR
// for i := 1 to list do
44954: LD_ADDR_VAR 0 2
44958: PUSH
44959: DOUBLE
44960: LD_INT 1
44962: DEC
44963: ST_TO_ADDR
44964: LD_VAR 0 3
44968: PUSH
44969: FOR_TO
44970: IFFALSE 45061
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44972: LD_STRING setFactoryWaypointXY(
44974: PUSH
44975: LD_VAR 0 3
44979: PUSH
44980: LD_VAR 0 2
44984: ARRAY
44985: PUSH
44986: LD_INT 1
44988: ARRAY
44989: STR
44990: PUSH
44991: LD_STRING ,
44993: STR
44994: PUSH
44995: LD_VAR 0 3
44999: PUSH
45000: LD_VAR 0 2
45004: ARRAY
45005: PUSH
45006: LD_INT 2
45008: ARRAY
45009: STR
45010: PUSH
45011: LD_STRING ,
45013: STR
45014: PUSH
45015: LD_VAR 0 3
45019: PUSH
45020: LD_VAR 0 2
45024: ARRAY
45025: PUSH
45026: LD_INT 3
45028: ARRAY
45029: STR
45030: PUSH
45031: LD_STRING ,
45033: STR
45034: PUSH
45035: LD_VAR 0 3
45039: PUSH
45040: LD_VAR 0 2
45044: ARRAY
45045: PUSH
45046: LD_INT 4
45048: ARRAY
45049: STR
45050: PUSH
45051: LD_STRING )
45053: STR
45054: PPUSH
45055: CALL_OW 559
45059: GO 44969
45061: POP
45062: POP
// end ; end ;
45063: LD_VAR 0 1
45067: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
45068: LD_INT 0
45070: PPUSH
// if HexInfo ( x , y ) = warehouse then
45071: LD_VAR 0 2
45075: PPUSH
45076: LD_VAR 0 3
45080: PPUSH
45081: CALL_OW 428
45085: PUSH
45086: LD_VAR 0 1
45090: EQUAL
45091: IFFALSE 45118
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
45093: LD_ADDR_EXP 131
45097: PUSH
45098: LD_EXP 131
45102: PPUSH
45103: LD_VAR 0 1
45107: PPUSH
45108: LD_INT 0
45110: PPUSH
45111: CALL_OW 1
45115: ST_TO_ADDR
45116: GO 45169
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
45118: LD_ADDR_EXP 131
45122: PUSH
45123: LD_EXP 131
45127: PPUSH
45128: LD_VAR 0 1
45132: PPUSH
45133: LD_VAR 0 1
45137: PPUSH
45138: CALL_OW 255
45142: PUSH
45143: LD_VAR 0 1
45147: PUSH
45148: LD_VAR 0 2
45152: PUSH
45153: LD_VAR 0 3
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: PPUSH
45164: CALL_OW 1
45168: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
45169: CALL 45178 0 0
// end ;
45173: LD_VAR 0 4
45177: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
45178: LD_INT 0
45180: PPUSH
45181: PPUSH
45182: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
45183: LD_STRING resetWarehouseGatheringPoints();
45185: PPUSH
45186: CALL_OW 559
// if warehouseGatheringPoints then
45190: LD_EXP 131
45194: IFFALSE 45320
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
45196: LD_ADDR_VAR 0 3
45200: PUSH
45201: LD_EXP 131
45205: PPUSH
45206: CALL 91532 0 1
45210: ST_TO_ADDR
// for i := 1 to list do
45211: LD_ADDR_VAR 0 2
45215: PUSH
45216: DOUBLE
45217: LD_INT 1
45219: DEC
45220: ST_TO_ADDR
45221: LD_VAR 0 3
45225: PUSH
45226: FOR_TO
45227: IFFALSE 45318
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
45229: LD_STRING setWarehouseGatheringPointXY(
45231: PUSH
45232: LD_VAR 0 3
45236: PUSH
45237: LD_VAR 0 2
45241: ARRAY
45242: PUSH
45243: LD_INT 1
45245: ARRAY
45246: STR
45247: PUSH
45248: LD_STRING ,
45250: STR
45251: PUSH
45252: LD_VAR 0 3
45256: PUSH
45257: LD_VAR 0 2
45261: ARRAY
45262: PUSH
45263: LD_INT 2
45265: ARRAY
45266: STR
45267: PUSH
45268: LD_STRING ,
45270: STR
45271: PUSH
45272: LD_VAR 0 3
45276: PUSH
45277: LD_VAR 0 2
45281: ARRAY
45282: PUSH
45283: LD_INT 3
45285: ARRAY
45286: STR
45287: PUSH
45288: LD_STRING ,
45290: STR
45291: PUSH
45292: LD_VAR 0 3
45296: PUSH
45297: LD_VAR 0 2
45301: ARRAY
45302: PUSH
45303: LD_INT 4
45305: ARRAY
45306: STR
45307: PUSH
45308: LD_STRING )
45310: STR
45311: PPUSH
45312: CALL_OW 559
45316: GO 45226
45318: POP
45319: POP
// end ; end ;
45320: LD_VAR 0 1
45324: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
45325: LD_EXP 131
45329: IFFALSE 46014
45331: GO 45333
45333: DISABLE
45334: LD_INT 0
45336: PPUSH
45337: PPUSH
45338: PPUSH
45339: PPUSH
45340: PPUSH
45341: PPUSH
45342: PPUSH
45343: PPUSH
45344: PPUSH
// begin enable ;
45345: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
45346: LD_ADDR_VAR 0 3
45350: PUSH
45351: LD_EXP 131
45355: PPUSH
45356: CALL 91532 0 1
45360: ST_TO_ADDR
// if not list then
45361: LD_VAR 0 3
45365: NOT
45366: IFFALSE 45370
// exit ;
45368: GO 46014
// for i := 1 to list do
45370: LD_ADDR_VAR 0 1
45374: PUSH
45375: DOUBLE
45376: LD_INT 1
45378: DEC
45379: ST_TO_ADDR
45380: LD_VAR 0 3
45384: PUSH
45385: FOR_TO
45386: IFFALSE 46012
// begin depot := list [ i ] [ 2 ] ;
45388: LD_ADDR_VAR 0 8
45392: PUSH
45393: LD_VAR 0 3
45397: PUSH
45398: LD_VAR 0 1
45402: ARRAY
45403: PUSH
45404: LD_INT 2
45406: ARRAY
45407: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45408: LD_ADDR_VAR 0 5
45412: PUSH
45413: LD_VAR 0 3
45417: PUSH
45418: LD_VAR 0 1
45422: ARRAY
45423: PUSH
45424: LD_INT 1
45426: ARRAY
45427: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45428: LD_VAR 0 8
45432: PPUSH
45433: CALL_OW 301
45437: PUSH
45438: LD_VAR 0 5
45442: PUSH
45443: LD_VAR 0 8
45447: PPUSH
45448: CALL_OW 255
45452: NONEQUAL
45453: OR
45454: IFFALSE 45483
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45456: LD_ADDR_EXP 131
45460: PUSH
45461: LD_EXP 131
45465: PPUSH
45466: LD_VAR 0 8
45470: PPUSH
45471: LD_INT 0
45473: PPUSH
45474: CALL_OW 1
45478: ST_TO_ADDR
// exit ;
45479: POP
45480: POP
45481: GO 46014
// end ; x := list [ i ] [ 3 ] ;
45483: LD_ADDR_VAR 0 6
45487: PUSH
45488: LD_VAR 0 3
45492: PUSH
45493: LD_VAR 0 1
45497: ARRAY
45498: PUSH
45499: LD_INT 3
45501: ARRAY
45502: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45503: LD_ADDR_VAR 0 7
45507: PUSH
45508: LD_VAR 0 3
45512: PUSH
45513: LD_VAR 0 1
45517: ARRAY
45518: PUSH
45519: LD_INT 4
45521: ARRAY
45522: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45523: LD_ADDR_VAR 0 9
45527: PUSH
45528: LD_VAR 0 6
45532: PPUSH
45533: LD_VAR 0 7
45537: PPUSH
45538: LD_INT 16
45540: PPUSH
45541: CALL 90120 0 3
45545: ST_TO_ADDR
// if not cratesNearbyPoint then
45546: LD_VAR 0 9
45550: NOT
45551: IFFALSE 45557
// exit ;
45553: POP
45554: POP
45555: GO 46014
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45557: LD_ADDR_VAR 0 4
45561: PUSH
45562: LD_INT 22
45564: PUSH
45565: LD_VAR 0 5
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: LD_INT 60
45579: PUSH
45580: EMPTY
45581: LIST
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 91
45589: PUSH
45590: LD_VAR 0 8
45594: PUSH
45595: LD_INT 6
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 25
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 25
45618: PUSH
45619: LD_INT 16
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: PPUSH
45637: CALL_OW 69
45641: PUSH
45642: LD_VAR 0 8
45646: PPUSH
45647: CALL_OW 313
45651: PPUSH
45652: LD_INT 3
45654: PUSH
45655: LD_INT 60
45657: PUSH
45658: EMPTY
45659: LIST
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 25
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 25
45680: PUSH
45681: LD_INT 16
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PPUSH
45697: CALL_OW 72
45701: UNION
45702: ST_TO_ADDR
// if tmp then
45703: LD_VAR 0 4
45707: IFFALSE 45787
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45709: LD_ADDR_VAR 0 4
45713: PUSH
45714: LD_VAR 0 4
45718: PPUSH
45719: LD_INT 3
45721: PPUSH
45722: CALL 88089 0 2
45726: ST_TO_ADDR
// for j in tmp do
45727: LD_ADDR_VAR 0 2
45731: PUSH
45732: LD_VAR 0 4
45736: PUSH
45737: FOR_IN
45738: IFFALSE 45781
// begin if IsInUnit ( j ) then
45740: LD_VAR 0 2
45744: PPUSH
45745: CALL_OW 310
45749: IFFALSE 45760
// ComExit ( j ) ;
45751: LD_VAR 0 2
45755: PPUSH
45756: CALL 88172 0 1
// AddComCollect ( j , x , y ) ;
45760: LD_VAR 0 2
45764: PPUSH
45765: LD_VAR 0 6
45769: PPUSH
45770: LD_VAR 0 7
45774: PPUSH
45775: CALL_OW 177
// end ;
45779: GO 45737
45781: POP
45782: POP
// exit ;
45783: POP
45784: POP
45785: GO 46014
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45787: LD_ADDR_VAR 0 4
45791: PUSH
45792: LD_INT 22
45794: PUSH
45795: LD_VAR 0 5
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 91
45806: PUSH
45807: LD_VAR 0 8
45811: PUSH
45812: LD_INT 8
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 34
45825: PUSH
45826: LD_INT 12
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 34
45835: PUSH
45836: LD_INT 51
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 34
45845: PUSH
45846: LD_INT 32
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 34
45855: PUSH
45856: LD_INT 89
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: PPUSH
45875: CALL_OW 69
45879: ST_TO_ADDR
// if tmp then
45880: LD_VAR 0 4
45884: IFFALSE 46010
// begin for j in tmp do
45886: LD_ADDR_VAR 0 2
45890: PUSH
45891: LD_VAR 0 4
45895: PUSH
45896: FOR_IN
45897: IFFALSE 46008
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45899: LD_VAR 0 2
45903: PPUSH
45904: CALL_OW 262
45908: PUSH
45909: LD_INT 3
45911: EQUAL
45912: PUSH
45913: LD_VAR 0 2
45917: PPUSH
45918: CALL_OW 261
45922: PUSH
45923: LD_INT 20
45925: GREATER
45926: OR
45927: PUSH
45928: LD_VAR 0 2
45932: PPUSH
45933: CALL_OW 314
45937: NOT
45938: AND
45939: PUSH
45940: LD_VAR 0 2
45944: PPUSH
45945: CALL_OW 263
45949: PUSH
45950: LD_INT 1
45952: NONEQUAL
45953: PUSH
45954: LD_VAR 0 2
45958: PPUSH
45959: CALL_OW 311
45963: OR
45964: AND
45965: IFFALSE 46006
// begin ComCollect ( j , x , y ) ;
45967: LD_VAR 0 2
45971: PPUSH
45972: LD_VAR 0 6
45976: PPUSH
45977: LD_VAR 0 7
45981: PPUSH
45982: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45986: LD_VAR 0 2
45990: PPUSH
45991: LD_VAR 0 8
45995: PPUSH
45996: CALL_OW 172
// exit ;
46000: POP
46001: POP
46002: POP
46003: POP
46004: GO 46014
// end ;
46006: GO 45896
46008: POP
46009: POP
// end ; end ;
46010: GO 45385
46012: POP
46013: POP
// end ; end_of_file
46014: PPOPN 9
46016: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
46017: LD_INT 0
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
46023: LD_VAR 0 1
46027: PPUSH
46028: CALL_OW 264
46032: PUSH
46033: LD_INT 91
46035: EQUAL
46036: IFFALSE 46108
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
46038: LD_INT 68
46040: PPUSH
46041: LD_VAR 0 1
46045: PPUSH
46046: CALL_OW 255
46050: PPUSH
46051: CALL_OW 321
46055: PUSH
46056: LD_INT 2
46058: EQUAL
46059: IFFALSE 46071
// eff := 70 else
46061: LD_ADDR_VAR 0 4
46065: PUSH
46066: LD_INT 70
46068: ST_TO_ADDR
46069: GO 46079
// eff := 30 ;
46071: LD_ADDR_VAR 0 4
46075: PUSH
46076: LD_INT 30
46078: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
46079: LD_VAR 0 1
46083: PPUSH
46084: CALL_OW 250
46088: PPUSH
46089: LD_VAR 0 1
46093: PPUSH
46094: CALL_OW 251
46098: PPUSH
46099: LD_VAR 0 4
46103: PPUSH
46104: CALL_OW 495
// end ; end ;
46108: LD_VAR 0 2
46112: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
46113: LD_INT 0
46115: PPUSH
// end ;
46116: LD_VAR 0 4
46120: RET
// export function SOS_Command ( cmd ) ; begin
46121: LD_INT 0
46123: PPUSH
// end ;
46124: LD_VAR 0 2
46128: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
46129: LD_INT 0
46131: PPUSH
// end ;
46132: LD_VAR 0 6
46136: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
46137: LD_INT 0
46139: PPUSH
46140: PPUSH
// if not vehicle or not factory then
46141: LD_VAR 0 1
46145: NOT
46146: PUSH
46147: LD_VAR 0 2
46151: NOT
46152: OR
46153: IFFALSE 46157
// exit ;
46155: GO 46388
// if factoryWaypoints >= factory then
46157: LD_EXP 130
46161: PUSH
46162: LD_VAR 0 2
46166: GREATEREQUAL
46167: IFFALSE 46388
// if factoryWaypoints [ factory ] then
46169: LD_EXP 130
46173: PUSH
46174: LD_VAR 0 2
46178: ARRAY
46179: IFFALSE 46388
// begin if GetControl ( vehicle ) = control_manual then
46181: LD_VAR 0 1
46185: PPUSH
46186: CALL_OW 263
46190: PUSH
46191: LD_INT 1
46193: EQUAL
46194: IFFALSE 46275
// begin driver := IsDrivenBy ( vehicle ) ;
46196: LD_ADDR_VAR 0 4
46200: PUSH
46201: LD_VAR 0 1
46205: PPUSH
46206: CALL_OW 311
46210: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46211: LD_VAR 0 4
46215: PPUSH
46216: LD_EXP 130
46220: PUSH
46221: LD_VAR 0 2
46225: ARRAY
46226: PUSH
46227: LD_INT 3
46229: ARRAY
46230: PPUSH
46231: LD_EXP 130
46235: PUSH
46236: LD_VAR 0 2
46240: ARRAY
46241: PUSH
46242: LD_INT 4
46244: ARRAY
46245: PPUSH
46246: CALL_OW 171
// AddComExitVehicle ( driver ) ;
46250: LD_VAR 0 4
46254: PPUSH
46255: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
46259: LD_VAR 0 4
46263: PPUSH
46264: LD_VAR 0 2
46268: PPUSH
46269: CALL_OW 180
// end else
46273: GO 46388
// if GetControl ( vehicle ) = control_remote then
46275: LD_VAR 0 1
46279: PPUSH
46280: CALL_OW 263
46284: PUSH
46285: LD_INT 2
46287: EQUAL
46288: IFFALSE 46349
// begin wait ( 0 0$2 ) ;
46290: LD_INT 70
46292: PPUSH
46293: CALL_OW 67
// if Connect ( vehicle ) then
46297: LD_VAR 0 1
46301: PPUSH
46302: CALL 58412 0 1
46306: IFFALSE 46347
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46308: LD_VAR 0 1
46312: PPUSH
46313: LD_EXP 130
46317: PUSH
46318: LD_VAR 0 2
46322: ARRAY
46323: PUSH
46324: LD_INT 3
46326: ARRAY
46327: PPUSH
46328: LD_EXP 130
46332: PUSH
46333: LD_VAR 0 2
46337: ARRAY
46338: PUSH
46339: LD_INT 4
46341: ARRAY
46342: PPUSH
46343: CALL_OW 171
// end else
46347: GO 46388
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46349: LD_VAR 0 1
46353: PPUSH
46354: LD_EXP 130
46358: PUSH
46359: LD_VAR 0 2
46363: ARRAY
46364: PUSH
46365: LD_INT 3
46367: ARRAY
46368: PPUSH
46369: LD_EXP 130
46373: PUSH
46374: LD_VAR 0 2
46378: ARRAY
46379: PUSH
46380: LD_INT 4
46382: ARRAY
46383: PPUSH
46384: CALL_OW 171
// end ; end ;
46388: LD_VAR 0 3
46392: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46393: LD_INT 0
46395: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46396: LD_VAR 0 1
46400: PUSH
46401: LD_INT 250
46403: EQUAL
46404: PUSH
46405: LD_VAR 0 2
46409: PPUSH
46410: CALL_OW 264
46414: PUSH
46415: LD_INT 81
46417: EQUAL
46418: AND
46419: IFFALSE 46440
// MinerPlaceMine ( unit , x , y ) ;
46421: LD_VAR 0 2
46425: PPUSH
46426: LD_VAR 0 4
46430: PPUSH
46431: LD_VAR 0 5
46435: PPUSH
46436: CALL 48825 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46440: LD_VAR 0 1
46444: PUSH
46445: LD_INT 251
46447: EQUAL
46448: PUSH
46449: LD_VAR 0 2
46453: PPUSH
46454: CALL_OW 264
46458: PUSH
46459: LD_INT 81
46461: EQUAL
46462: AND
46463: IFFALSE 46484
// MinerDetonateMine ( unit , x , y ) ;
46465: LD_VAR 0 2
46469: PPUSH
46470: LD_VAR 0 4
46474: PPUSH
46475: LD_VAR 0 5
46479: PPUSH
46480: CALL 49100 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46484: LD_VAR 0 1
46488: PUSH
46489: LD_INT 252
46491: EQUAL
46492: PUSH
46493: LD_VAR 0 2
46497: PPUSH
46498: CALL_OW 264
46502: PUSH
46503: LD_INT 81
46505: EQUAL
46506: AND
46507: IFFALSE 46528
// MinerCreateMinefield ( unit , x , y ) ;
46509: LD_VAR 0 2
46513: PPUSH
46514: LD_VAR 0 4
46518: PPUSH
46519: LD_VAR 0 5
46523: PPUSH
46524: CALL 49517 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46528: LD_VAR 0 1
46532: PUSH
46533: LD_INT 253
46535: EQUAL
46536: PUSH
46537: LD_VAR 0 2
46541: PPUSH
46542: CALL_OW 257
46546: PUSH
46547: LD_INT 5
46549: EQUAL
46550: AND
46551: IFFALSE 46572
// ComBinocular ( unit , x , y ) ;
46553: LD_VAR 0 2
46557: PPUSH
46558: LD_VAR 0 4
46562: PPUSH
46563: LD_VAR 0 5
46567: PPUSH
46568: CALL 49886 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46572: LD_VAR 0 1
46576: PUSH
46577: LD_INT 254
46579: EQUAL
46580: PUSH
46581: LD_VAR 0 2
46585: PPUSH
46586: CALL_OW 264
46590: PUSH
46591: LD_INT 99
46593: EQUAL
46594: AND
46595: PUSH
46596: LD_VAR 0 3
46600: PPUSH
46601: CALL_OW 263
46605: PUSH
46606: LD_INT 3
46608: EQUAL
46609: AND
46610: IFFALSE 46626
// HackDestroyVehicle ( unit , selectedUnit ) ;
46612: LD_VAR 0 2
46616: PPUSH
46617: LD_VAR 0 3
46621: PPUSH
46622: CALL 48189 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46626: LD_VAR 0 1
46630: PUSH
46631: LD_INT 255
46633: EQUAL
46634: PUSH
46635: LD_VAR 0 2
46639: PPUSH
46640: CALL_OW 264
46644: PUSH
46645: LD_INT 14
46647: PUSH
46648: LD_INT 53
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: IN
46655: AND
46656: PUSH
46657: LD_VAR 0 4
46661: PPUSH
46662: LD_VAR 0 5
46666: PPUSH
46667: CALL_OW 488
46671: AND
46672: IFFALSE 46696
// CutTreeXYR ( unit , x , y , 12 ) ;
46674: LD_VAR 0 2
46678: PPUSH
46679: LD_VAR 0 4
46683: PPUSH
46684: LD_VAR 0 5
46688: PPUSH
46689: LD_INT 12
46691: PPUSH
46692: CALL 46759 0 4
// if cmd = 256 then
46696: LD_VAR 0 1
46700: PUSH
46701: LD_INT 256
46703: EQUAL
46704: IFFALSE 46725
// SetFactoryWaypoint ( unit , x , y ) ;
46706: LD_VAR 0 2
46710: PPUSH
46711: LD_VAR 0 4
46715: PPUSH
46716: LD_VAR 0 5
46720: PPUSH
46721: CALL 44706 0 3
// if cmd = 257 then
46725: LD_VAR 0 1
46729: PUSH
46730: LD_INT 257
46732: EQUAL
46733: IFFALSE 46754
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46735: LD_VAR 0 2
46739: PPUSH
46740: LD_VAR 0 4
46744: PPUSH
46745: LD_VAR 0 5
46749: PPUSH
46750: CALL 45068 0 3
// end ;
46754: LD_VAR 0 6
46758: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46759: LD_INT 0
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46770: LD_VAR 0 1
46774: NOT
46775: PUSH
46776: LD_VAR 0 2
46780: PPUSH
46781: LD_VAR 0 3
46785: PPUSH
46786: CALL_OW 488
46790: NOT
46791: OR
46792: PUSH
46793: LD_VAR 0 4
46797: NOT
46798: OR
46799: IFFALSE 46803
// exit ;
46801: GO 47143
// list := [ ] ;
46803: LD_ADDR_VAR 0 13
46807: PUSH
46808: EMPTY
46809: ST_TO_ADDR
// if x - r < 0 then
46810: LD_VAR 0 2
46814: PUSH
46815: LD_VAR 0 4
46819: MINUS
46820: PUSH
46821: LD_INT 0
46823: LESS
46824: IFFALSE 46836
// min_x := 0 else
46826: LD_ADDR_VAR 0 7
46830: PUSH
46831: LD_INT 0
46833: ST_TO_ADDR
46834: GO 46852
// min_x := x - r ;
46836: LD_ADDR_VAR 0 7
46840: PUSH
46841: LD_VAR 0 2
46845: PUSH
46846: LD_VAR 0 4
46850: MINUS
46851: ST_TO_ADDR
// if y - r < 0 then
46852: LD_VAR 0 3
46856: PUSH
46857: LD_VAR 0 4
46861: MINUS
46862: PUSH
46863: LD_INT 0
46865: LESS
46866: IFFALSE 46878
// min_y := 0 else
46868: LD_ADDR_VAR 0 8
46872: PUSH
46873: LD_INT 0
46875: ST_TO_ADDR
46876: GO 46894
// min_y := y - r ;
46878: LD_ADDR_VAR 0 8
46882: PUSH
46883: LD_VAR 0 3
46887: PUSH
46888: LD_VAR 0 4
46892: MINUS
46893: ST_TO_ADDR
// max_x := x + r ;
46894: LD_ADDR_VAR 0 9
46898: PUSH
46899: LD_VAR 0 2
46903: PUSH
46904: LD_VAR 0 4
46908: PLUS
46909: ST_TO_ADDR
// max_y := y + r ;
46910: LD_ADDR_VAR 0 10
46914: PUSH
46915: LD_VAR 0 3
46919: PUSH
46920: LD_VAR 0 4
46924: PLUS
46925: ST_TO_ADDR
// for _x = min_x to max_x do
46926: LD_ADDR_VAR 0 11
46930: PUSH
46931: DOUBLE
46932: LD_VAR 0 7
46936: DEC
46937: ST_TO_ADDR
46938: LD_VAR 0 9
46942: PUSH
46943: FOR_TO
46944: IFFALSE 47061
// for _y = min_y to max_y do
46946: LD_ADDR_VAR 0 12
46950: PUSH
46951: DOUBLE
46952: LD_VAR 0 8
46956: DEC
46957: ST_TO_ADDR
46958: LD_VAR 0 10
46962: PUSH
46963: FOR_TO
46964: IFFALSE 47057
// begin if not ValidHex ( _x , _y ) then
46966: LD_VAR 0 11
46970: PPUSH
46971: LD_VAR 0 12
46975: PPUSH
46976: CALL_OW 488
46980: NOT
46981: IFFALSE 46985
// continue ;
46983: GO 46963
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46985: LD_VAR 0 11
46989: PPUSH
46990: LD_VAR 0 12
46994: PPUSH
46995: CALL_OW 351
46999: PUSH
47000: LD_VAR 0 11
47004: PPUSH
47005: LD_VAR 0 12
47009: PPUSH
47010: CALL_OW 554
47014: AND
47015: IFFALSE 47055
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
47017: LD_ADDR_VAR 0 13
47021: PUSH
47022: LD_VAR 0 13
47026: PPUSH
47027: LD_VAR 0 13
47031: PUSH
47032: LD_INT 1
47034: PLUS
47035: PPUSH
47036: LD_VAR 0 11
47040: PUSH
47041: LD_VAR 0 12
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PPUSH
47050: CALL_OW 2
47054: ST_TO_ADDR
// end ;
47055: GO 46963
47057: POP
47058: POP
47059: GO 46943
47061: POP
47062: POP
// if not list then
47063: LD_VAR 0 13
47067: NOT
47068: IFFALSE 47072
// exit ;
47070: GO 47143
// for i in list do
47072: LD_ADDR_VAR 0 6
47076: PUSH
47077: LD_VAR 0 13
47081: PUSH
47082: FOR_IN
47083: IFFALSE 47141
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
47085: LD_VAR 0 1
47089: PPUSH
47090: LD_STRING M
47092: PUSH
47093: LD_VAR 0 6
47097: PUSH
47098: LD_INT 1
47100: ARRAY
47101: PUSH
47102: LD_VAR 0 6
47106: PUSH
47107: LD_INT 2
47109: ARRAY
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: PUSH
47132: EMPTY
47133: LIST
47134: PPUSH
47135: CALL_OW 447
47139: GO 47082
47141: POP
47142: POP
// end ;
47143: LD_VAR 0 5
47147: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
47148: LD_EXP 133
47152: NOT
47153: IFFALSE 47203
47155: GO 47157
47157: DISABLE
// begin initHack := true ;
47158: LD_ADDR_EXP 133
47162: PUSH
47163: LD_INT 1
47165: ST_TO_ADDR
// hackTanks := [ ] ;
47166: LD_ADDR_EXP 134
47170: PUSH
47171: EMPTY
47172: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
47173: LD_ADDR_EXP 135
47177: PUSH
47178: EMPTY
47179: ST_TO_ADDR
// hackLimit := 3 ;
47180: LD_ADDR_EXP 136
47184: PUSH
47185: LD_INT 3
47187: ST_TO_ADDR
// hackDist := 12 ;
47188: LD_ADDR_EXP 137
47192: PUSH
47193: LD_INT 12
47195: ST_TO_ADDR
// hackCounter := [ ] ;
47196: LD_ADDR_EXP 138
47200: PUSH
47201: EMPTY
47202: ST_TO_ADDR
// end ;
47203: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
47204: LD_EXP 133
47208: PUSH
47209: LD_INT 34
47211: PUSH
47212: LD_INT 99
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PPUSH
47219: CALL_OW 69
47223: AND
47224: IFFALSE 47477
47226: GO 47228
47228: DISABLE
47229: LD_INT 0
47231: PPUSH
47232: PPUSH
// begin enable ;
47233: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
47234: LD_ADDR_VAR 0 1
47238: PUSH
47239: LD_INT 34
47241: PUSH
47242: LD_INT 99
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PPUSH
47249: CALL_OW 69
47253: PUSH
47254: FOR_IN
47255: IFFALSE 47475
// begin if not i in hackTanks then
47257: LD_VAR 0 1
47261: PUSH
47262: LD_EXP 134
47266: IN
47267: NOT
47268: IFFALSE 47351
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47270: LD_ADDR_EXP 134
47274: PUSH
47275: LD_EXP 134
47279: PPUSH
47280: LD_EXP 134
47284: PUSH
47285: LD_INT 1
47287: PLUS
47288: PPUSH
47289: LD_VAR 0 1
47293: PPUSH
47294: CALL_OW 1
47298: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47299: LD_ADDR_EXP 135
47303: PUSH
47304: LD_EXP 135
47308: PPUSH
47309: LD_EXP 135
47313: PUSH
47314: LD_INT 1
47316: PLUS
47317: PPUSH
47318: EMPTY
47319: PPUSH
47320: CALL_OW 1
47324: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47325: LD_ADDR_EXP 138
47329: PUSH
47330: LD_EXP 138
47334: PPUSH
47335: LD_EXP 138
47339: PUSH
47340: LD_INT 1
47342: PLUS
47343: PPUSH
47344: EMPTY
47345: PPUSH
47346: CALL_OW 1
47350: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47351: LD_VAR 0 1
47355: PPUSH
47356: CALL_OW 302
47360: NOT
47361: IFFALSE 47374
// begin HackUnlinkAll ( i ) ;
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL 47480 0 1
// continue ;
47372: GO 47254
// end ; HackCheckCapturedStatus ( i ) ;
47374: LD_VAR 0 1
47378: PPUSH
47379: CALL 47923 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47383: LD_ADDR_VAR 0 2
47387: PUSH
47388: LD_INT 81
47390: PUSH
47391: LD_VAR 0 1
47395: PPUSH
47396: CALL_OW 255
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 33
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 91
47417: PUSH
47418: LD_VAR 0 1
47422: PUSH
47423: LD_EXP 137
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 50
47435: PUSH
47436: EMPTY
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: PPUSH
47445: CALL_OW 69
47449: ST_TO_ADDR
// if not tmp then
47450: LD_VAR 0 2
47454: NOT
47455: IFFALSE 47459
// continue ;
47457: GO 47254
// HackLink ( i , tmp ) ;
47459: LD_VAR 0 1
47463: PPUSH
47464: LD_VAR 0 2
47468: PPUSH
47469: CALL 47616 0 2
// end ;
47473: GO 47254
47475: POP
47476: POP
// end ;
47477: PPOPN 2
47479: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47480: LD_INT 0
47482: PPUSH
47483: PPUSH
47484: PPUSH
// if not hack in hackTanks then
47485: LD_VAR 0 1
47489: PUSH
47490: LD_EXP 134
47494: IN
47495: NOT
47496: IFFALSE 47500
// exit ;
47498: GO 47611
// index := GetElementIndex ( hackTanks , hack ) ;
47500: LD_ADDR_VAR 0 4
47504: PUSH
47505: LD_EXP 134
47509: PPUSH
47510: LD_VAR 0 1
47514: PPUSH
47515: CALL 55228 0 2
47519: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47520: LD_EXP 135
47524: PUSH
47525: LD_VAR 0 4
47529: ARRAY
47530: IFFALSE 47611
// begin for i in hackTanksCaptured [ index ] do
47532: LD_ADDR_VAR 0 3
47536: PUSH
47537: LD_EXP 135
47541: PUSH
47542: LD_VAR 0 4
47546: ARRAY
47547: PUSH
47548: FOR_IN
47549: IFFALSE 47575
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47551: LD_VAR 0 3
47555: PUSH
47556: LD_INT 1
47558: ARRAY
47559: PPUSH
47560: LD_VAR 0 3
47564: PUSH
47565: LD_INT 2
47567: ARRAY
47568: PPUSH
47569: CALL_OW 235
47573: GO 47548
47575: POP
47576: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47577: LD_ADDR_EXP 135
47581: PUSH
47582: LD_EXP 135
47586: PPUSH
47587: LD_VAR 0 4
47591: PPUSH
47592: EMPTY
47593: PPUSH
47594: CALL_OW 1
47598: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47599: LD_VAR 0 1
47603: PPUSH
47604: LD_INT 0
47606: PPUSH
47607: CALL_OW 505
// end ; end ;
47611: LD_VAR 0 2
47615: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47616: LD_INT 0
47618: PPUSH
47619: PPUSH
47620: PPUSH
// if not hack in hackTanks or not vehicles then
47621: LD_VAR 0 1
47625: PUSH
47626: LD_EXP 134
47630: IN
47631: NOT
47632: PUSH
47633: LD_VAR 0 2
47637: NOT
47638: OR
47639: IFFALSE 47643
// exit ;
47641: GO 47918
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47643: LD_ADDR_VAR 0 2
47647: PUSH
47648: LD_VAR 0 1
47652: PPUSH
47653: LD_VAR 0 2
47657: PPUSH
47658: LD_INT 1
47660: PPUSH
47661: LD_INT 1
47663: PPUSH
47664: CALL 55878 0 4
47668: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47669: LD_ADDR_VAR 0 5
47673: PUSH
47674: LD_EXP 134
47678: PPUSH
47679: LD_VAR 0 1
47683: PPUSH
47684: CALL 55228 0 2
47688: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47689: LD_EXP 135
47693: PUSH
47694: LD_VAR 0 5
47698: ARRAY
47699: PUSH
47700: LD_EXP 136
47704: LESS
47705: IFFALSE 47894
// begin for i := 1 to vehicles do
47707: LD_ADDR_VAR 0 4
47711: PUSH
47712: DOUBLE
47713: LD_INT 1
47715: DEC
47716: ST_TO_ADDR
47717: LD_VAR 0 2
47721: PUSH
47722: FOR_TO
47723: IFFALSE 47892
// begin if hackTanksCaptured [ index ] = hackLimit then
47725: LD_EXP 135
47729: PUSH
47730: LD_VAR 0 5
47734: ARRAY
47735: PUSH
47736: LD_EXP 136
47740: EQUAL
47741: IFFALSE 47745
// break ;
47743: GO 47892
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47745: LD_ADDR_EXP 138
47749: PUSH
47750: LD_EXP 138
47754: PPUSH
47755: LD_VAR 0 5
47759: PPUSH
47760: LD_EXP 138
47764: PUSH
47765: LD_VAR 0 5
47769: ARRAY
47770: PUSH
47771: LD_INT 1
47773: PLUS
47774: PPUSH
47775: CALL_OW 1
47779: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47780: LD_ADDR_EXP 135
47784: PUSH
47785: LD_EXP 135
47789: PPUSH
47790: LD_VAR 0 5
47794: PUSH
47795: LD_EXP 135
47799: PUSH
47800: LD_VAR 0 5
47804: ARRAY
47805: PUSH
47806: LD_INT 1
47808: PLUS
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PPUSH
47814: LD_VAR 0 2
47818: PUSH
47819: LD_VAR 0 4
47823: ARRAY
47824: PUSH
47825: LD_VAR 0 2
47829: PUSH
47830: LD_VAR 0 4
47834: ARRAY
47835: PPUSH
47836: CALL_OW 255
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PPUSH
47845: CALL 55443 0 3
47849: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47850: LD_VAR 0 2
47854: PUSH
47855: LD_VAR 0 4
47859: ARRAY
47860: PPUSH
47861: LD_VAR 0 1
47865: PPUSH
47866: CALL_OW 255
47870: PPUSH
47871: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47875: LD_VAR 0 2
47879: PUSH
47880: LD_VAR 0 4
47884: ARRAY
47885: PPUSH
47886: CALL_OW 141
// end ;
47890: GO 47722
47892: POP
47893: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47894: LD_VAR 0 1
47898: PPUSH
47899: LD_EXP 135
47903: PUSH
47904: LD_VAR 0 5
47908: ARRAY
47909: PUSH
47910: LD_INT 0
47912: PLUS
47913: PPUSH
47914: CALL_OW 505
// end ;
47918: LD_VAR 0 3
47922: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47923: LD_INT 0
47925: PPUSH
47926: PPUSH
47927: PPUSH
47928: PPUSH
// if not hack in hackTanks then
47929: LD_VAR 0 1
47933: PUSH
47934: LD_EXP 134
47938: IN
47939: NOT
47940: IFFALSE 47944
// exit ;
47942: GO 48184
// index := GetElementIndex ( hackTanks , hack ) ;
47944: LD_ADDR_VAR 0 4
47948: PUSH
47949: LD_EXP 134
47953: PPUSH
47954: LD_VAR 0 1
47958: PPUSH
47959: CALL 55228 0 2
47963: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47964: LD_ADDR_VAR 0 3
47968: PUSH
47969: DOUBLE
47970: LD_EXP 135
47974: PUSH
47975: LD_VAR 0 4
47979: ARRAY
47980: INC
47981: ST_TO_ADDR
47982: LD_INT 1
47984: PUSH
47985: FOR_DOWNTO
47986: IFFALSE 48158
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47988: LD_ADDR_VAR 0 5
47992: PUSH
47993: LD_EXP 135
47997: PUSH
47998: LD_VAR 0 4
48002: ARRAY
48003: PUSH
48004: LD_VAR 0 3
48008: ARRAY
48009: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
48010: LD_VAR 0 5
48014: PUSH
48015: LD_INT 1
48017: ARRAY
48018: PPUSH
48019: CALL_OW 302
48023: NOT
48024: PUSH
48025: LD_VAR 0 5
48029: PUSH
48030: LD_INT 1
48032: ARRAY
48033: PPUSH
48034: CALL_OW 255
48038: PUSH
48039: LD_VAR 0 1
48043: PPUSH
48044: CALL_OW 255
48048: NONEQUAL
48049: OR
48050: IFFALSE 48156
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
48052: LD_VAR 0 5
48056: PUSH
48057: LD_INT 1
48059: ARRAY
48060: PPUSH
48061: CALL_OW 305
48065: PUSH
48066: LD_VAR 0 5
48070: PUSH
48071: LD_INT 1
48073: ARRAY
48074: PPUSH
48075: CALL_OW 255
48079: PUSH
48080: LD_VAR 0 1
48084: PPUSH
48085: CALL_OW 255
48089: EQUAL
48090: AND
48091: IFFALSE 48115
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
48093: LD_VAR 0 5
48097: PUSH
48098: LD_INT 1
48100: ARRAY
48101: PPUSH
48102: LD_VAR 0 5
48106: PUSH
48107: LD_INT 2
48109: ARRAY
48110: PPUSH
48111: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
48115: LD_ADDR_EXP 135
48119: PUSH
48120: LD_EXP 135
48124: PPUSH
48125: LD_VAR 0 4
48129: PPUSH
48130: LD_EXP 135
48134: PUSH
48135: LD_VAR 0 4
48139: ARRAY
48140: PPUSH
48141: LD_VAR 0 3
48145: PPUSH
48146: CALL_OW 3
48150: PPUSH
48151: CALL_OW 1
48155: ST_TO_ADDR
// end ; end ;
48156: GO 47985
48158: POP
48159: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
48160: LD_VAR 0 1
48164: PPUSH
48165: LD_EXP 135
48169: PUSH
48170: LD_VAR 0 4
48174: ARRAY
48175: PUSH
48176: LD_INT 0
48178: PLUS
48179: PPUSH
48180: CALL_OW 505
// end ;
48184: LD_VAR 0 2
48188: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
48189: LD_INT 0
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
// if not hack in hackTanks then
48195: LD_VAR 0 1
48199: PUSH
48200: LD_EXP 134
48204: IN
48205: NOT
48206: IFFALSE 48210
// exit ;
48208: GO 48295
// index := GetElementIndex ( hackTanks , hack ) ;
48210: LD_ADDR_VAR 0 5
48214: PUSH
48215: LD_EXP 134
48219: PPUSH
48220: LD_VAR 0 1
48224: PPUSH
48225: CALL 55228 0 2
48229: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
48230: LD_ADDR_VAR 0 4
48234: PUSH
48235: DOUBLE
48236: LD_INT 1
48238: DEC
48239: ST_TO_ADDR
48240: LD_EXP 135
48244: PUSH
48245: LD_VAR 0 5
48249: ARRAY
48250: PUSH
48251: FOR_TO
48252: IFFALSE 48293
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
48254: LD_EXP 135
48258: PUSH
48259: LD_VAR 0 5
48263: ARRAY
48264: PUSH
48265: LD_VAR 0 4
48269: ARRAY
48270: PUSH
48271: LD_INT 1
48273: ARRAY
48274: PUSH
48275: LD_VAR 0 2
48279: EQUAL
48280: IFFALSE 48291
// KillUnit ( vehicle ) ;
48282: LD_VAR 0 2
48286: PPUSH
48287: CALL_OW 66
48291: GO 48251
48293: POP
48294: POP
// end ;
48295: LD_VAR 0 3
48299: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48300: LD_EXP 139
48304: NOT
48305: IFFALSE 48340
48307: GO 48309
48309: DISABLE
// begin initMiner := true ;
48310: LD_ADDR_EXP 139
48314: PUSH
48315: LD_INT 1
48317: ST_TO_ADDR
// minersList := [ ] ;
48318: LD_ADDR_EXP 140
48322: PUSH
48323: EMPTY
48324: ST_TO_ADDR
// minerMinesList := [ ] ;
48325: LD_ADDR_EXP 141
48329: PUSH
48330: EMPTY
48331: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48332: LD_ADDR_EXP 142
48336: PUSH
48337: LD_INT 5
48339: ST_TO_ADDR
// end ;
48340: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48341: LD_EXP 139
48345: PUSH
48346: LD_INT 34
48348: PUSH
48349: LD_INT 81
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PPUSH
48356: CALL_OW 69
48360: AND
48361: IFFALSE 48822
48363: GO 48365
48365: DISABLE
48366: LD_INT 0
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
// begin enable ;
48372: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48373: LD_ADDR_VAR 0 1
48377: PUSH
48378: LD_INT 34
48380: PUSH
48381: LD_INT 81
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PPUSH
48388: CALL_OW 69
48392: PUSH
48393: FOR_IN
48394: IFFALSE 48466
// begin if not i in minersList then
48396: LD_VAR 0 1
48400: PUSH
48401: LD_EXP 140
48405: IN
48406: NOT
48407: IFFALSE 48464
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48409: LD_ADDR_EXP 140
48413: PUSH
48414: LD_EXP 140
48418: PPUSH
48419: LD_EXP 140
48423: PUSH
48424: LD_INT 1
48426: PLUS
48427: PPUSH
48428: LD_VAR 0 1
48432: PPUSH
48433: CALL_OW 1
48437: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48438: LD_ADDR_EXP 141
48442: PUSH
48443: LD_EXP 141
48447: PPUSH
48448: LD_EXP 141
48452: PUSH
48453: LD_INT 1
48455: PLUS
48456: PPUSH
48457: EMPTY
48458: PPUSH
48459: CALL_OW 1
48463: ST_TO_ADDR
// end end ;
48464: GO 48393
48466: POP
48467: POP
// for i := minerMinesList downto 1 do
48468: LD_ADDR_VAR 0 1
48472: PUSH
48473: DOUBLE
48474: LD_EXP 141
48478: INC
48479: ST_TO_ADDR
48480: LD_INT 1
48482: PUSH
48483: FOR_DOWNTO
48484: IFFALSE 48820
// begin if IsLive ( minersList [ i ] ) then
48486: LD_EXP 140
48490: PUSH
48491: LD_VAR 0 1
48495: ARRAY
48496: PPUSH
48497: CALL_OW 300
48501: IFFALSE 48529
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48503: LD_EXP 140
48507: PUSH
48508: LD_VAR 0 1
48512: ARRAY
48513: PPUSH
48514: LD_EXP 141
48518: PUSH
48519: LD_VAR 0 1
48523: ARRAY
48524: PPUSH
48525: CALL_OW 505
// if not minerMinesList [ i ] then
48529: LD_EXP 141
48533: PUSH
48534: LD_VAR 0 1
48538: ARRAY
48539: NOT
48540: IFFALSE 48544
// continue ;
48542: GO 48483
// for j := minerMinesList [ i ] downto 1 do
48544: LD_ADDR_VAR 0 2
48548: PUSH
48549: DOUBLE
48550: LD_EXP 141
48554: PUSH
48555: LD_VAR 0 1
48559: ARRAY
48560: INC
48561: ST_TO_ADDR
48562: LD_INT 1
48564: PUSH
48565: FOR_DOWNTO
48566: IFFALSE 48816
// begin side := GetSide ( minersList [ i ] ) ;
48568: LD_ADDR_VAR 0 3
48572: PUSH
48573: LD_EXP 140
48577: PUSH
48578: LD_VAR 0 1
48582: ARRAY
48583: PPUSH
48584: CALL_OW 255
48588: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48589: LD_ADDR_VAR 0 4
48593: PUSH
48594: LD_EXP 141
48598: PUSH
48599: LD_VAR 0 1
48603: ARRAY
48604: PUSH
48605: LD_VAR 0 2
48609: ARRAY
48610: PUSH
48611: LD_INT 1
48613: ARRAY
48614: PPUSH
48615: LD_EXP 141
48619: PUSH
48620: LD_VAR 0 1
48624: ARRAY
48625: PUSH
48626: LD_VAR 0 2
48630: ARRAY
48631: PUSH
48632: LD_INT 2
48634: ARRAY
48635: PPUSH
48636: CALL_OW 428
48640: ST_TO_ADDR
// if not tmp then
48641: LD_VAR 0 4
48645: NOT
48646: IFFALSE 48650
// continue ;
48648: GO 48565
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48650: LD_VAR 0 4
48654: PUSH
48655: LD_INT 81
48657: PUSH
48658: LD_VAR 0 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PPUSH
48667: CALL_OW 69
48671: IN
48672: PUSH
48673: LD_EXP 141
48677: PUSH
48678: LD_VAR 0 1
48682: ARRAY
48683: PUSH
48684: LD_VAR 0 2
48688: ARRAY
48689: PUSH
48690: LD_INT 1
48692: ARRAY
48693: PPUSH
48694: LD_EXP 141
48698: PUSH
48699: LD_VAR 0 1
48703: ARRAY
48704: PUSH
48705: LD_VAR 0 2
48709: ARRAY
48710: PUSH
48711: LD_INT 2
48713: ARRAY
48714: PPUSH
48715: CALL_OW 458
48719: AND
48720: IFFALSE 48814
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48722: LD_EXP 141
48726: PUSH
48727: LD_VAR 0 1
48731: ARRAY
48732: PUSH
48733: LD_VAR 0 2
48737: ARRAY
48738: PUSH
48739: LD_INT 1
48741: ARRAY
48742: PPUSH
48743: LD_EXP 141
48747: PUSH
48748: LD_VAR 0 1
48752: ARRAY
48753: PUSH
48754: LD_VAR 0 2
48758: ARRAY
48759: PUSH
48760: LD_INT 2
48762: ARRAY
48763: PPUSH
48764: LD_VAR 0 3
48768: PPUSH
48769: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48773: LD_ADDR_EXP 141
48777: PUSH
48778: LD_EXP 141
48782: PPUSH
48783: LD_VAR 0 1
48787: PPUSH
48788: LD_EXP 141
48792: PUSH
48793: LD_VAR 0 1
48797: ARRAY
48798: PPUSH
48799: LD_VAR 0 2
48803: PPUSH
48804: CALL_OW 3
48808: PPUSH
48809: CALL_OW 1
48813: ST_TO_ADDR
// end ; end ;
48814: GO 48565
48816: POP
48817: POP
// end ;
48818: GO 48483
48820: POP
48821: POP
// end ;
48822: PPOPN 4
48824: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48825: LD_INT 0
48827: PPUSH
48828: PPUSH
// result := false ;
48829: LD_ADDR_VAR 0 4
48833: PUSH
48834: LD_INT 0
48836: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48837: LD_VAR 0 1
48841: PPUSH
48842: CALL_OW 264
48846: PUSH
48847: LD_INT 81
48849: EQUAL
48850: NOT
48851: IFFALSE 48855
// exit ;
48853: GO 49095
// index := GetElementIndex ( minersList , unit ) ;
48855: LD_ADDR_VAR 0 5
48859: PUSH
48860: LD_EXP 140
48864: PPUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: CALL 55228 0 2
48874: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48875: LD_EXP 141
48879: PUSH
48880: LD_VAR 0 5
48884: ARRAY
48885: PUSH
48886: LD_EXP 142
48890: GREATEREQUAL
48891: IFFALSE 48895
// exit ;
48893: GO 49095
// ComMoveXY ( unit , x , y ) ;
48895: LD_VAR 0 1
48899: PPUSH
48900: LD_VAR 0 2
48904: PPUSH
48905: LD_VAR 0 3
48909: PPUSH
48910: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48914: LD_INT 35
48916: PPUSH
48917: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48921: LD_VAR 0 1
48925: PPUSH
48926: LD_VAR 0 2
48930: PPUSH
48931: LD_VAR 0 3
48935: PPUSH
48936: CALL 86583 0 3
48940: NOT
48941: PUSH
48942: LD_VAR 0 1
48946: PPUSH
48947: CALL_OW 314
48951: AND
48952: IFFALSE 48956
// exit ;
48954: GO 49095
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48956: LD_VAR 0 2
48960: PPUSH
48961: LD_VAR 0 3
48965: PPUSH
48966: CALL_OW 428
48970: PUSH
48971: LD_VAR 0 1
48975: EQUAL
48976: PUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: CALL_OW 314
48986: NOT
48987: AND
48988: IFFALSE 48914
// PlaySoundXY ( x , y , PlantMine ) ;
48990: LD_VAR 0 2
48994: PPUSH
48995: LD_VAR 0 3
48999: PPUSH
49000: LD_STRING PlantMine
49002: PPUSH
49003: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
49007: LD_VAR 0 2
49011: PPUSH
49012: LD_VAR 0 3
49016: PPUSH
49017: LD_VAR 0 1
49021: PPUSH
49022: CALL_OW 255
49026: PPUSH
49027: LD_INT 0
49029: PPUSH
49030: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
49034: LD_ADDR_EXP 141
49038: PUSH
49039: LD_EXP 141
49043: PPUSH
49044: LD_VAR 0 5
49048: PUSH
49049: LD_EXP 141
49053: PUSH
49054: LD_VAR 0 5
49058: ARRAY
49059: PUSH
49060: LD_INT 1
49062: PLUS
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PPUSH
49068: LD_VAR 0 2
49072: PUSH
49073: LD_VAR 0 3
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PPUSH
49082: CALL 55443 0 3
49086: ST_TO_ADDR
// result := true ;
49087: LD_ADDR_VAR 0 4
49091: PUSH
49092: LD_INT 1
49094: ST_TO_ADDR
// end ;
49095: LD_VAR 0 4
49099: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
49100: LD_INT 0
49102: PPUSH
49103: PPUSH
49104: PPUSH
// if not unit in minersList then
49105: LD_VAR 0 1
49109: PUSH
49110: LD_EXP 140
49114: IN
49115: NOT
49116: IFFALSE 49120
// exit ;
49118: GO 49512
// index := GetElementIndex ( minersList , unit ) ;
49120: LD_ADDR_VAR 0 6
49124: PUSH
49125: LD_EXP 140
49129: PPUSH
49130: LD_VAR 0 1
49134: PPUSH
49135: CALL 55228 0 2
49139: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
49140: LD_ADDR_VAR 0 5
49144: PUSH
49145: DOUBLE
49146: LD_EXP 141
49150: PUSH
49151: LD_VAR 0 6
49155: ARRAY
49156: INC
49157: ST_TO_ADDR
49158: LD_INT 1
49160: PUSH
49161: FOR_DOWNTO
49162: IFFALSE 49323
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
49164: LD_EXP 141
49168: PUSH
49169: LD_VAR 0 6
49173: ARRAY
49174: PUSH
49175: LD_VAR 0 5
49179: ARRAY
49180: PUSH
49181: LD_INT 1
49183: ARRAY
49184: PUSH
49185: LD_VAR 0 2
49189: EQUAL
49190: PUSH
49191: LD_EXP 141
49195: PUSH
49196: LD_VAR 0 6
49200: ARRAY
49201: PUSH
49202: LD_VAR 0 5
49206: ARRAY
49207: PUSH
49208: LD_INT 2
49210: ARRAY
49211: PUSH
49212: LD_VAR 0 3
49216: EQUAL
49217: AND
49218: IFFALSE 49321
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49220: LD_EXP 141
49224: PUSH
49225: LD_VAR 0 6
49229: ARRAY
49230: PUSH
49231: LD_VAR 0 5
49235: ARRAY
49236: PUSH
49237: LD_INT 1
49239: ARRAY
49240: PPUSH
49241: LD_EXP 141
49245: PUSH
49246: LD_VAR 0 6
49250: ARRAY
49251: PUSH
49252: LD_VAR 0 5
49256: ARRAY
49257: PUSH
49258: LD_INT 2
49260: ARRAY
49261: PPUSH
49262: LD_VAR 0 1
49266: PPUSH
49267: CALL_OW 255
49271: PPUSH
49272: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49276: LD_ADDR_EXP 141
49280: PUSH
49281: LD_EXP 141
49285: PPUSH
49286: LD_VAR 0 6
49290: PPUSH
49291: LD_EXP 141
49295: PUSH
49296: LD_VAR 0 6
49300: ARRAY
49301: PPUSH
49302: LD_VAR 0 5
49306: PPUSH
49307: CALL_OW 3
49311: PPUSH
49312: CALL_OW 1
49316: ST_TO_ADDR
// exit ;
49317: POP
49318: POP
49319: GO 49512
// end ; end ;
49321: GO 49161
49323: POP
49324: POP
// for i := minerMinesList [ index ] downto 1 do
49325: LD_ADDR_VAR 0 5
49329: PUSH
49330: DOUBLE
49331: LD_EXP 141
49335: PUSH
49336: LD_VAR 0 6
49340: ARRAY
49341: INC
49342: ST_TO_ADDR
49343: LD_INT 1
49345: PUSH
49346: FOR_DOWNTO
49347: IFFALSE 49510
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49349: LD_EXP 141
49353: PUSH
49354: LD_VAR 0 6
49358: ARRAY
49359: PUSH
49360: LD_VAR 0 5
49364: ARRAY
49365: PUSH
49366: LD_INT 1
49368: ARRAY
49369: PPUSH
49370: LD_EXP 141
49374: PUSH
49375: LD_VAR 0 6
49379: ARRAY
49380: PUSH
49381: LD_VAR 0 5
49385: ARRAY
49386: PUSH
49387: LD_INT 2
49389: ARRAY
49390: PPUSH
49391: LD_VAR 0 2
49395: PPUSH
49396: LD_VAR 0 3
49400: PPUSH
49401: CALL_OW 298
49405: PUSH
49406: LD_INT 6
49408: LESS
49409: IFFALSE 49508
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49411: LD_EXP 141
49415: PUSH
49416: LD_VAR 0 6
49420: ARRAY
49421: PUSH
49422: LD_VAR 0 5
49426: ARRAY
49427: PUSH
49428: LD_INT 1
49430: ARRAY
49431: PPUSH
49432: LD_EXP 141
49436: PUSH
49437: LD_VAR 0 6
49441: ARRAY
49442: PUSH
49443: LD_VAR 0 5
49447: ARRAY
49448: PUSH
49449: LD_INT 2
49451: ARRAY
49452: PPUSH
49453: LD_VAR 0 1
49457: PPUSH
49458: CALL_OW 255
49462: PPUSH
49463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49467: LD_ADDR_EXP 141
49471: PUSH
49472: LD_EXP 141
49476: PPUSH
49477: LD_VAR 0 6
49481: PPUSH
49482: LD_EXP 141
49486: PUSH
49487: LD_VAR 0 6
49491: ARRAY
49492: PPUSH
49493: LD_VAR 0 5
49497: PPUSH
49498: CALL_OW 3
49502: PPUSH
49503: CALL_OW 1
49507: ST_TO_ADDR
// end ; end ;
49508: GO 49346
49510: POP
49511: POP
// end ;
49512: LD_VAR 0 4
49516: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49517: LD_INT 0
49519: PPUSH
49520: PPUSH
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49528: LD_VAR 0 1
49532: PPUSH
49533: CALL_OW 264
49537: PUSH
49538: LD_INT 81
49540: EQUAL
49541: NOT
49542: PUSH
49543: LD_VAR 0 1
49547: PUSH
49548: LD_EXP 140
49552: IN
49553: NOT
49554: OR
49555: IFFALSE 49559
// exit ;
49557: GO 49881
// index := GetElementIndex ( minersList , unit ) ;
49559: LD_ADDR_VAR 0 6
49563: PUSH
49564: LD_EXP 140
49568: PPUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL 55228 0 2
49578: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49579: LD_ADDR_VAR 0 8
49583: PUSH
49584: LD_EXP 142
49588: PUSH
49589: LD_EXP 141
49593: PUSH
49594: LD_VAR 0 6
49598: ARRAY
49599: MINUS
49600: ST_TO_ADDR
// if not minesFreeAmount then
49601: LD_VAR 0 8
49605: NOT
49606: IFFALSE 49610
// exit ;
49608: GO 49881
// tmp := [ ] ;
49610: LD_ADDR_VAR 0 7
49614: PUSH
49615: EMPTY
49616: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49617: LD_ADDR_VAR 0 5
49621: PUSH
49622: DOUBLE
49623: LD_INT 1
49625: DEC
49626: ST_TO_ADDR
49627: LD_VAR 0 8
49631: PUSH
49632: FOR_TO
49633: IFFALSE 49828
// begin _d := rand ( 0 , 5 ) ;
49635: LD_ADDR_VAR 0 11
49639: PUSH
49640: LD_INT 0
49642: PPUSH
49643: LD_INT 5
49645: PPUSH
49646: CALL_OW 12
49650: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49651: LD_ADDR_VAR 0 12
49655: PUSH
49656: LD_INT 2
49658: PPUSH
49659: LD_INT 6
49661: PPUSH
49662: CALL_OW 12
49666: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49667: LD_ADDR_VAR 0 9
49671: PUSH
49672: LD_VAR 0 2
49676: PPUSH
49677: LD_VAR 0 11
49681: PPUSH
49682: LD_VAR 0 12
49686: PPUSH
49687: CALL_OW 272
49691: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49692: LD_ADDR_VAR 0 10
49696: PUSH
49697: LD_VAR 0 3
49701: PPUSH
49702: LD_VAR 0 11
49706: PPUSH
49707: LD_VAR 0 12
49711: PPUSH
49712: CALL_OW 273
49716: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49717: LD_VAR 0 9
49721: PPUSH
49722: LD_VAR 0 10
49726: PPUSH
49727: CALL_OW 488
49731: PUSH
49732: LD_VAR 0 9
49736: PUSH
49737: LD_VAR 0 10
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_VAR 0 7
49750: IN
49751: NOT
49752: AND
49753: PUSH
49754: LD_VAR 0 9
49758: PPUSH
49759: LD_VAR 0 10
49763: PPUSH
49764: CALL_OW 458
49768: NOT
49769: AND
49770: IFFALSE 49812
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49772: LD_ADDR_VAR 0 7
49776: PUSH
49777: LD_VAR 0 7
49781: PPUSH
49782: LD_VAR 0 7
49786: PUSH
49787: LD_INT 1
49789: PLUS
49790: PPUSH
49791: LD_VAR 0 9
49795: PUSH
49796: LD_VAR 0 10
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PPUSH
49805: CALL_OW 1
49809: ST_TO_ADDR
49810: GO 49826
// i := i - 1 ;
49812: LD_ADDR_VAR 0 5
49816: PUSH
49817: LD_VAR 0 5
49821: PUSH
49822: LD_INT 1
49824: MINUS
49825: ST_TO_ADDR
// end ;
49826: GO 49632
49828: POP
49829: POP
// for i in tmp do
49830: LD_ADDR_VAR 0 5
49834: PUSH
49835: LD_VAR 0 7
49839: PUSH
49840: FOR_IN
49841: IFFALSE 49879
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49843: LD_VAR 0 1
49847: PPUSH
49848: LD_VAR 0 5
49852: PUSH
49853: LD_INT 1
49855: ARRAY
49856: PPUSH
49857: LD_VAR 0 5
49861: PUSH
49862: LD_INT 2
49864: ARRAY
49865: PPUSH
49866: CALL 48825 0 3
49870: NOT
49871: IFFALSE 49877
// exit ;
49873: POP
49874: POP
49875: GO 49881
49877: GO 49840
49879: POP
49880: POP
// end ;
49881: LD_VAR 0 4
49885: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49886: LD_INT 0
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
// if not GetClass ( unit ) = class_sniper then
49895: LD_VAR 0 1
49899: PPUSH
49900: CALL_OW 257
49904: PUSH
49905: LD_INT 5
49907: EQUAL
49908: NOT
49909: IFFALSE 49913
// exit ;
49911: GO 50301
// dist := 8 ;
49913: LD_ADDR_VAR 0 5
49917: PUSH
49918: LD_INT 8
49920: ST_TO_ADDR
// viewRange := 12 ;
49921: LD_ADDR_VAR 0 7
49925: PUSH
49926: LD_INT 12
49928: ST_TO_ADDR
// side := GetSide ( unit ) ;
49929: LD_ADDR_VAR 0 6
49933: PUSH
49934: LD_VAR 0 1
49938: PPUSH
49939: CALL_OW 255
49943: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49944: LD_INT 61
49946: PPUSH
49947: LD_VAR 0 6
49951: PPUSH
49952: CALL_OW 321
49956: PUSH
49957: LD_INT 2
49959: EQUAL
49960: IFFALSE 49970
// viewRange := 16 ;
49962: LD_ADDR_VAR 0 7
49966: PUSH
49967: LD_INT 16
49969: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49970: LD_VAR 0 1
49974: PPUSH
49975: LD_VAR 0 2
49979: PPUSH
49980: LD_VAR 0 3
49984: PPUSH
49985: CALL_OW 297
49989: PUSH
49990: LD_VAR 0 5
49994: GREATER
49995: IFFALSE 50074
// begin ComMoveXY ( unit , x , y ) ;
49997: LD_VAR 0 1
50001: PPUSH
50002: LD_VAR 0 2
50006: PPUSH
50007: LD_VAR 0 3
50011: PPUSH
50012: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
50016: LD_INT 35
50018: PPUSH
50019: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
50023: LD_VAR 0 1
50027: PPUSH
50028: LD_VAR 0 2
50032: PPUSH
50033: LD_VAR 0 3
50037: PPUSH
50038: CALL 86583 0 3
50042: NOT
50043: IFFALSE 50047
// exit ;
50045: GO 50301
// until GetDistUnitXY ( unit , x , y ) < dist ;
50047: LD_VAR 0 1
50051: PPUSH
50052: LD_VAR 0 2
50056: PPUSH
50057: LD_VAR 0 3
50061: PPUSH
50062: CALL_OW 297
50066: PUSH
50067: LD_VAR 0 5
50071: LESS
50072: IFFALSE 50016
// end ; ComTurnXY ( unit , x , y ) ;
50074: LD_VAR 0 1
50078: PPUSH
50079: LD_VAR 0 2
50083: PPUSH
50084: LD_VAR 0 3
50088: PPUSH
50089: CALL_OW 118
// wait ( 5 ) ;
50093: LD_INT 5
50095: PPUSH
50096: CALL_OW 67
// _d := GetDir ( unit ) ;
50100: LD_ADDR_VAR 0 10
50104: PUSH
50105: LD_VAR 0 1
50109: PPUSH
50110: CALL_OW 254
50114: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
50115: LD_ADDR_VAR 0 8
50119: PUSH
50120: LD_VAR 0 1
50124: PPUSH
50125: CALL_OW 250
50129: PPUSH
50130: LD_VAR 0 10
50134: PPUSH
50135: LD_VAR 0 5
50139: PPUSH
50140: CALL_OW 272
50144: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
50145: LD_ADDR_VAR 0 9
50149: PUSH
50150: LD_VAR 0 1
50154: PPUSH
50155: CALL_OW 251
50159: PPUSH
50160: LD_VAR 0 10
50164: PPUSH
50165: LD_VAR 0 5
50169: PPUSH
50170: CALL_OW 273
50174: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50175: LD_VAR 0 8
50179: PPUSH
50180: LD_VAR 0 9
50184: PPUSH
50185: CALL_OW 488
50189: NOT
50190: IFFALSE 50194
// exit ;
50192: GO 50301
// ComAnimCustom ( unit , 1 ) ;
50194: LD_VAR 0 1
50198: PPUSH
50199: LD_INT 1
50201: PPUSH
50202: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
50206: LD_VAR 0 8
50210: PPUSH
50211: LD_VAR 0 9
50215: PPUSH
50216: LD_VAR 0 6
50220: PPUSH
50221: LD_VAR 0 7
50225: PPUSH
50226: CALL_OW 330
// repeat wait ( 1 ) ;
50230: LD_INT 1
50232: PPUSH
50233: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
50237: LD_VAR 0 1
50241: PPUSH
50242: CALL_OW 316
50246: PUSH
50247: LD_VAR 0 1
50251: PPUSH
50252: CALL_OW 314
50256: OR
50257: PUSH
50258: LD_VAR 0 1
50262: PPUSH
50263: CALL_OW 302
50267: NOT
50268: OR
50269: PUSH
50270: LD_VAR 0 1
50274: PPUSH
50275: CALL_OW 301
50279: OR
50280: IFFALSE 50230
// RemoveSeeing ( _x , _y , side ) ;
50282: LD_VAR 0 8
50286: PPUSH
50287: LD_VAR 0 9
50291: PPUSH
50292: LD_VAR 0 6
50296: PPUSH
50297: CALL_OW 331
// end ; end_of_file
50301: LD_VAR 0 4
50305: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50306: LD_INT 0
50308: PPUSH
50309: PPUSH
// if exist_mode then
50310: LD_VAR 0 2
50314: IFFALSE 50339
// unit := CreateCharacter ( prefix & ident ) else
50316: LD_ADDR_VAR 0 5
50320: PUSH
50321: LD_VAR 0 3
50325: PUSH
50326: LD_VAR 0 1
50330: STR
50331: PPUSH
50332: CALL_OW 34
50336: ST_TO_ADDR
50337: GO 50354
// unit := NewCharacter ( ident ) ;
50339: LD_ADDR_VAR 0 5
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: CALL_OW 25
50353: ST_TO_ADDR
// result := unit ;
50354: LD_ADDR_VAR 0 4
50358: PUSH
50359: LD_VAR 0 5
50363: ST_TO_ADDR
// end ;
50364: LD_VAR 0 4
50368: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50369: LD_INT 0
50371: PPUSH
50372: PPUSH
// if not side or not nation then
50373: LD_VAR 0 1
50377: NOT
50378: PUSH
50379: LD_VAR 0 2
50383: NOT
50384: OR
50385: IFFALSE 50389
// exit ;
50387: GO 51157
// case nation of nation_american :
50389: LD_VAR 0 2
50393: PUSH
50394: LD_INT 1
50396: DOUBLE
50397: EQUAL
50398: IFTRUE 50402
50400: GO 50616
50402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50403: LD_ADDR_VAR 0 4
50407: PUSH
50408: LD_INT 35
50410: PUSH
50411: LD_INT 45
50413: PUSH
50414: LD_INT 46
50416: PUSH
50417: LD_INT 47
50419: PUSH
50420: LD_INT 82
50422: PUSH
50423: LD_INT 83
50425: PUSH
50426: LD_INT 84
50428: PUSH
50429: LD_INT 85
50431: PUSH
50432: LD_INT 86
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 6
50443: PUSH
50444: LD_INT 15
50446: PUSH
50447: LD_INT 16
50449: PUSH
50450: LD_INT 7
50452: PUSH
50453: LD_INT 12
50455: PUSH
50456: LD_INT 13
50458: PUSH
50459: LD_INT 10
50461: PUSH
50462: LD_INT 14
50464: PUSH
50465: LD_INT 20
50467: PUSH
50468: LD_INT 21
50470: PUSH
50471: LD_INT 22
50473: PUSH
50474: LD_INT 25
50476: PUSH
50477: LD_INT 32
50479: PUSH
50480: LD_INT 27
50482: PUSH
50483: LD_INT 36
50485: PUSH
50486: LD_INT 69
50488: PUSH
50489: LD_INT 39
50491: PUSH
50492: LD_INT 34
50494: PUSH
50495: LD_INT 40
50497: PUSH
50498: LD_INT 48
50500: PUSH
50501: LD_INT 49
50503: PUSH
50504: LD_INT 50
50506: PUSH
50507: LD_INT 51
50509: PUSH
50510: LD_INT 52
50512: PUSH
50513: LD_INT 53
50515: PUSH
50516: LD_INT 54
50518: PUSH
50519: LD_INT 55
50521: PUSH
50522: LD_INT 56
50524: PUSH
50525: LD_INT 57
50527: PUSH
50528: LD_INT 58
50530: PUSH
50531: LD_INT 59
50533: PUSH
50534: LD_INT 60
50536: PUSH
50537: LD_INT 61
50539: PUSH
50540: LD_INT 62
50542: PUSH
50543: LD_INT 80
50545: PUSH
50546: LD_INT 82
50548: PUSH
50549: LD_INT 83
50551: PUSH
50552: LD_INT 84
50554: PUSH
50555: LD_INT 85
50557: PUSH
50558: LD_INT 86
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: ST_TO_ADDR
50614: GO 51081
50616: LD_INT 2
50618: DOUBLE
50619: EQUAL
50620: IFTRUE 50624
50622: GO 50850
50624: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50625: LD_ADDR_VAR 0 4
50629: PUSH
50630: LD_INT 35
50632: PUSH
50633: LD_INT 45
50635: PUSH
50636: LD_INT 46
50638: PUSH
50639: LD_INT 47
50641: PUSH
50642: LD_INT 82
50644: PUSH
50645: LD_INT 83
50647: PUSH
50648: LD_INT 84
50650: PUSH
50651: LD_INT 85
50653: PUSH
50654: LD_INT 87
50656: PUSH
50657: LD_INT 70
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 11
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 4
50671: PUSH
50672: LD_INT 5
50674: PUSH
50675: LD_INT 6
50677: PUSH
50678: LD_INT 15
50680: PUSH
50681: LD_INT 18
50683: PUSH
50684: LD_INT 7
50686: PUSH
50687: LD_INT 17
50689: PUSH
50690: LD_INT 8
50692: PUSH
50693: LD_INT 20
50695: PUSH
50696: LD_INT 21
50698: PUSH
50699: LD_INT 22
50701: PUSH
50702: LD_INT 72
50704: PUSH
50705: LD_INT 26
50707: PUSH
50708: LD_INT 69
50710: PUSH
50711: LD_INT 39
50713: PUSH
50714: LD_INT 40
50716: PUSH
50717: LD_INT 41
50719: PUSH
50720: LD_INT 42
50722: PUSH
50723: LD_INT 43
50725: PUSH
50726: LD_INT 48
50728: PUSH
50729: LD_INT 49
50731: PUSH
50732: LD_INT 50
50734: PUSH
50735: LD_INT 51
50737: PUSH
50738: LD_INT 52
50740: PUSH
50741: LD_INT 53
50743: PUSH
50744: LD_INT 54
50746: PUSH
50747: LD_INT 55
50749: PUSH
50750: LD_INT 56
50752: PUSH
50753: LD_INT 60
50755: PUSH
50756: LD_INT 61
50758: PUSH
50759: LD_INT 62
50761: PUSH
50762: LD_INT 66
50764: PUSH
50765: LD_INT 67
50767: PUSH
50768: LD_INT 68
50770: PUSH
50771: LD_INT 81
50773: PUSH
50774: LD_INT 82
50776: PUSH
50777: LD_INT 83
50779: PUSH
50780: LD_INT 84
50782: PUSH
50783: LD_INT 85
50785: PUSH
50786: LD_INT 87
50788: PUSH
50789: LD_INT 88
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
50848: GO 51081
50850: LD_INT 3
50852: DOUBLE
50853: EQUAL
50854: IFTRUE 50858
50856: GO 51080
50858: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50859: LD_ADDR_VAR 0 4
50863: PUSH
50864: LD_INT 46
50866: PUSH
50867: LD_INT 47
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 82
50878: PUSH
50879: LD_INT 83
50881: PUSH
50882: LD_INT 84
50884: PUSH
50885: LD_INT 85
50887: PUSH
50888: LD_INT 86
50890: PUSH
50891: LD_INT 11
50893: PUSH
50894: LD_INT 9
50896: PUSH
50897: LD_INT 20
50899: PUSH
50900: LD_INT 19
50902: PUSH
50903: LD_INT 21
50905: PUSH
50906: LD_INT 24
50908: PUSH
50909: LD_INT 22
50911: PUSH
50912: LD_INT 25
50914: PUSH
50915: LD_INT 28
50917: PUSH
50918: LD_INT 29
50920: PUSH
50921: LD_INT 30
50923: PUSH
50924: LD_INT 31
50926: PUSH
50927: LD_INT 37
50929: PUSH
50930: LD_INT 38
50932: PUSH
50933: LD_INT 32
50935: PUSH
50936: LD_INT 27
50938: PUSH
50939: LD_INT 33
50941: PUSH
50942: LD_INT 69
50944: PUSH
50945: LD_INT 39
50947: PUSH
50948: LD_INT 34
50950: PUSH
50951: LD_INT 40
50953: PUSH
50954: LD_INT 71
50956: PUSH
50957: LD_INT 23
50959: PUSH
50960: LD_INT 44
50962: PUSH
50963: LD_INT 48
50965: PUSH
50966: LD_INT 49
50968: PUSH
50969: LD_INT 50
50971: PUSH
50972: LD_INT 51
50974: PUSH
50975: LD_INT 52
50977: PUSH
50978: LD_INT 53
50980: PUSH
50981: LD_INT 54
50983: PUSH
50984: LD_INT 55
50986: PUSH
50987: LD_INT 56
50989: PUSH
50990: LD_INT 57
50992: PUSH
50993: LD_INT 58
50995: PUSH
50996: LD_INT 59
50998: PUSH
50999: LD_INT 63
51001: PUSH
51002: LD_INT 64
51004: PUSH
51005: LD_INT 65
51007: PUSH
51008: LD_INT 82
51010: PUSH
51011: LD_INT 83
51013: PUSH
51014: LD_INT 84
51016: PUSH
51017: LD_INT 85
51019: PUSH
51020: LD_INT 86
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
51078: GO 51081
51080: POP
// if state > - 1 and state < 3 then
51081: LD_VAR 0 3
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: GREATER
51090: PUSH
51091: LD_VAR 0 3
51095: PUSH
51096: LD_INT 3
51098: LESS
51099: AND
51100: IFFALSE 51157
// for i in result do
51102: LD_ADDR_VAR 0 5
51106: PUSH
51107: LD_VAR 0 4
51111: PUSH
51112: FOR_IN
51113: IFFALSE 51155
// if GetTech ( i , side ) <> state then
51115: LD_VAR 0 5
51119: PPUSH
51120: LD_VAR 0 1
51124: PPUSH
51125: CALL_OW 321
51129: PUSH
51130: LD_VAR 0 3
51134: NONEQUAL
51135: IFFALSE 51153
// result := result diff i ;
51137: LD_ADDR_VAR 0 4
51141: PUSH
51142: LD_VAR 0 4
51146: PUSH
51147: LD_VAR 0 5
51151: DIFF
51152: ST_TO_ADDR
51153: GO 51112
51155: POP
51156: POP
// end ;
51157: LD_VAR 0 4
51161: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
51162: LD_INT 0
51164: PPUSH
51165: PPUSH
51166: PPUSH
// result := true ;
51167: LD_ADDR_VAR 0 3
51171: PUSH
51172: LD_INT 1
51174: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
51175: LD_ADDR_VAR 0 5
51179: PUSH
51180: LD_VAR 0 2
51184: PPUSH
51185: CALL_OW 480
51189: ST_TO_ADDR
// if not tmp then
51190: LD_VAR 0 5
51194: NOT
51195: IFFALSE 51199
// exit ;
51197: GO 51248
// for i in tmp do
51199: LD_ADDR_VAR 0 4
51203: PUSH
51204: LD_VAR 0 5
51208: PUSH
51209: FOR_IN
51210: IFFALSE 51246
// if GetTech ( i , side ) <> state_researched then
51212: LD_VAR 0 4
51216: PPUSH
51217: LD_VAR 0 1
51221: PPUSH
51222: CALL_OW 321
51226: PUSH
51227: LD_INT 2
51229: NONEQUAL
51230: IFFALSE 51244
// begin result := false ;
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_INT 0
51239: ST_TO_ADDR
// exit ;
51240: POP
51241: POP
51242: GO 51248
// end ;
51244: GO 51209
51246: POP
51247: POP
// end ;
51248: LD_VAR 0 3
51252: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51253: LD_INT 0
51255: PPUSH
51256: PPUSH
51257: PPUSH
51258: PPUSH
51259: PPUSH
51260: PPUSH
51261: PPUSH
51262: PPUSH
51263: PPUSH
51264: PPUSH
51265: PPUSH
51266: PPUSH
51267: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51268: LD_VAR 0 1
51272: NOT
51273: PUSH
51274: LD_VAR 0 1
51278: PPUSH
51279: CALL_OW 257
51283: PUSH
51284: LD_INT 9
51286: NONEQUAL
51287: OR
51288: IFFALSE 51292
// exit ;
51290: GO 51865
// side := GetSide ( unit ) ;
51292: LD_ADDR_VAR 0 9
51296: PUSH
51297: LD_VAR 0 1
51301: PPUSH
51302: CALL_OW 255
51306: ST_TO_ADDR
// tech_space := tech_spacanom ;
51307: LD_ADDR_VAR 0 12
51311: PUSH
51312: LD_INT 29
51314: ST_TO_ADDR
// tech_time := tech_taurad ;
51315: LD_ADDR_VAR 0 13
51319: PUSH
51320: LD_INT 28
51322: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51323: LD_ADDR_VAR 0 11
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: CALL_OW 310
51337: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51338: LD_VAR 0 11
51342: PPUSH
51343: CALL_OW 247
51347: PUSH
51348: LD_INT 2
51350: EQUAL
51351: IFFALSE 51355
// exit ;
51353: GO 51865
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51355: LD_ADDR_VAR 0 8
51359: PUSH
51360: LD_INT 81
51362: PUSH
51363: LD_VAR 0 9
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 21
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PPUSH
51393: CALL_OW 69
51397: ST_TO_ADDR
// if not tmp then
51398: LD_VAR 0 8
51402: NOT
51403: IFFALSE 51407
// exit ;
51405: GO 51865
// if in_unit then
51407: LD_VAR 0 11
51411: IFFALSE 51435
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51413: LD_ADDR_VAR 0 10
51417: PUSH
51418: LD_VAR 0 8
51422: PPUSH
51423: LD_VAR 0 11
51427: PPUSH
51428: CALL_OW 74
51432: ST_TO_ADDR
51433: GO 51455
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51435: LD_ADDR_VAR 0 10
51439: PUSH
51440: LD_VAR 0 8
51444: PPUSH
51445: LD_VAR 0 1
51449: PPUSH
51450: CALL_OW 74
51454: ST_TO_ADDR
// if not enemy then
51455: LD_VAR 0 10
51459: NOT
51460: IFFALSE 51464
// exit ;
51462: GO 51865
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51464: LD_VAR 0 11
51468: PUSH
51469: LD_VAR 0 11
51473: PPUSH
51474: LD_VAR 0 10
51478: PPUSH
51479: CALL_OW 296
51483: PUSH
51484: LD_INT 13
51486: GREATER
51487: AND
51488: PUSH
51489: LD_VAR 0 1
51493: PPUSH
51494: LD_VAR 0 10
51498: PPUSH
51499: CALL_OW 296
51503: PUSH
51504: LD_INT 12
51506: GREATER
51507: OR
51508: IFFALSE 51512
// exit ;
51510: GO 51865
// missile := [ 1 ] ;
51512: LD_ADDR_VAR 0 14
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51523: LD_VAR 0 9
51527: PPUSH
51528: LD_VAR 0 12
51532: PPUSH
51533: CALL_OW 325
51537: IFFALSE 51566
// missile := Replace ( missile , missile + 1 , 2 ) ;
51539: LD_ADDR_VAR 0 14
51543: PUSH
51544: LD_VAR 0 14
51548: PPUSH
51549: LD_VAR 0 14
51553: PUSH
51554: LD_INT 1
51556: PLUS
51557: PPUSH
51558: LD_INT 2
51560: PPUSH
51561: CALL_OW 1
51565: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51566: LD_VAR 0 9
51570: PPUSH
51571: LD_VAR 0 13
51575: PPUSH
51576: CALL_OW 325
51580: PUSH
51581: LD_VAR 0 10
51585: PPUSH
51586: CALL_OW 255
51590: PPUSH
51591: LD_VAR 0 13
51595: PPUSH
51596: CALL_OW 325
51600: NOT
51601: AND
51602: IFFALSE 51631
// missile := Replace ( missile , missile + 1 , 3 ) ;
51604: LD_ADDR_VAR 0 14
51608: PUSH
51609: LD_VAR 0 14
51613: PPUSH
51614: LD_VAR 0 14
51618: PUSH
51619: LD_INT 1
51621: PLUS
51622: PPUSH
51623: LD_INT 3
51625: PPUSH
51626: CALL_OW 1
51630: ST_TO_ADDR
// if missile < 2 then
51631: LD_VAR 0 14
51635: PUSH
51636: LD_INT 2
51638: LESS
51639: IFFALSE 51643
// exit ;
51641: GO 51865
// x := GetX ( enemy ) ;
51643: LD_ADDR_VAR 0 4
51647: PUSH
51648: LD_VAR 0 10
51652: PPUSH
51653: CALL_OW 250
51657: ST_TO_ADDR
// y := GetY ( enemy ) ;
51658: LD_ADDR_VAR 0 5
51662: PUSH
51663: LD_VAR 0 10
51667: PPUSH
51668: CALL_OW 251
51672: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51673: LD_ADDR_VAR 0 6
51677: PUSH
51678: LD_VAR 0 4
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PPUSH
51687: LD_INT 1
51689: PPUSH
51690: CALL_OW 12
51694: PLUS
51695: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51696: LD_ADDR_VAR 0 7
51700: PUSH
51701: LD_VAR 0 5
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PPUSH
51710: LD_INT 1
51712: PPUSH
51713: CALL_OW 12
51717: PLUS
51718: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51719: LD_VAR 0 6
51723: PPUSH
51724: LD_VAR 0 7
51728: PPUSH
51729: CALL_OW 488
51733: NOT
51734: IFFALSE 51756
// begin _x := x ;
51736: LD_ADDR_VAR 0 6
51740: PUSH
51741: LD_VAR 0 4
51745: ST_TO_ADDR
// _y := y ;
51746: LD_ADDR_VAR 0 7
51750: PUSH
51751: LD_VAR 0 5
51755: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51756: LD_ADDR_VAR 0 3
51760: PUSH
51761: LD_INT 1
51763: PPUSH
51764: LD_VAR 0 14
51768: PPUSH
51769: CALL_OW 12
51773: ST_TO_ADDR
// case i of 1 :
51774: LD_VAR 0 3
51778: PUSH
51779: LD_INT 1
51781: DOUBLE
51782: EQUAL
51783: IFTRUE 51787
51785: GO 51804
51787: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51788: LD_VAR 0 1
51792: PPUSH
51793: LD_VAR 0 10
51797: PPUSH
51798: CALL_OW 115
51802: GO 51865
51804: LD_INT 2
51806: DOUBLE
51807: EQUAL
51808: IFTRUE 51812
51810: GO 51834
51812: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51813: LD_VAR 0 1
51817: PPUSH
51818: LD_VAR 0 6
51822: PPUSH
51823: LD_VAR 0 7
51827: PPUSH
51828: CALL_OW 153
51832: GO 51865
51834: LD_INT 3
51836: DOUBLE
51837: EQUAL
51838: IFTRUE 51842
51840: GO 51864
51842: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51843: LD_VAR 0 1
51847: PPUSH
51848: LD_VAR 0 6
51852: PPUSH
51853: LD_VAR 0 7
51857: PPUSH
51858: CALL_OW 154
51862: GO 51865
51864: POP
// end ;
51865: LD_VAR 0 2
51869: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51870: LD_INT 0
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
// if not unit or not building then
51878: LD_VAR 0 1
51882: NOT
51883: PUSH
51884: LD_VAR 0 2
51888: NOT
51889: OR
51890: IFFALSE 51894
// exit ;
51892: GO 52052
// x := GetX ( building ) ;
51894: LD_ADDR_VAR 0 5
51898: PUSH
51899: LD_VAR 0 2
51903: PPUSH
51904: CALL_OW 250
51908: ST_TO_ADDR
// y := GetY ( building ) ;
51909: LD_ADDR_VAR 0 6
51913: PUSH
51914: LD_VAR 0 2
51918: PPUSH
51919: CALL_OW 251
51923: ST_TO_ADDR
// for i = 0 to 5 do
51924: LD_ADDR_VAR 0 4
51928: PUSH
51929: DOUBLE
51930: LD_INT 0
51932: DEC
51933: ST_TO_ADDR
51934: LD_INT 5
51936: PUSH
51937: FOR_TO
51938: IFFALSE 52050
// begin _x := ShiftX ( x , i , 3 ) ;
51940: LD_ADDR_VAR 0 7
51944: PUSH
51945: LD_VAR 0 5
51949: PPUSH
51950: LD_VAR 0 4
51954: PPUSH
51955: LD_INT 3
51957: PPUSH
51958: CALL_OW 272
51962: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51963: LD_ADDR_VAR 0 8
51967: PUSH
51968: LD_VAR 0 6
51972: PPUSH
51973: LD_VAR 0 4
51977: PPUSH
51978: LD_INT 3
51980: PPUSH
51981: CALL_OW 273
51985: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51986: LD_VAR 0 7
51990: PPUSH
51991: LD_VAR 0 8
51995: PPUSH
51996: CALL_OW 488
52000: NOT
52001: IFFALSE 52005
// continue ;
52003: GO 51937
// if HexInfo ( _x , _y ) = 0 then
52005: LD_VAR 0 7
52009: PPUSH
52010: LD_VAR 0 8
52014: PPUSH
52015: CALL_OW 428
52019: PUSH
52020: LD_INT 0
52022: EQUAL
52023: IFFALSE 52048
// begin ComMoveXY ( unit , _x , _y ) ;
52025: LD_VAR 0 1
52029: PPUSH
52030: LD_VAR 0 7
52034: PPUSH
52035: LD_VAR 0 8
52039: PPUSH
52040: CALL_OW 111
// exit ;
52044: POP
52045: POP
52046: GO 52052
// end ; end ;
52048: GO 51937
52050: POP
52051: POP
// end ;
52052: LD_VAR 0 3
52056: RET
// export function ScanBase ( side , base_area ) ; begin
52057: LD_INT 0
52059: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
52060: LD_ADDR_VAR 0 3
52064: PUSH
52065: LD_VAR 0 2
52069: PPUSH
52070: LD_INT 81
52072: PUSH
52073: LD_VAR 0 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PPUSH
52082: CALL_OW 70
52086: ST_TO_ADDR
// end ;
52087: LD_VAR 0 3
52091: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
52092: LD_INT 0
52094: PPUSH
52095: PPUSH
52096: PPUSH
52097: PPUSH
// result := false ;
52098: LD_ADDR_VAR 0 2
52102: PUSH
52103: LD_INT 0
52105: ST_TO_ADDR
// side := GetSide ( unit ) ;
52106: LD_ADDR_VAR 0 3
52110: PUSH
52111: LD_VAR 0 1
52115: PPUSH
52116: CALL_OW 255
52120: ST_TO_ADDR
// nat := GetNation ( unit ) ;
52121: LD_ADDR_VAR 0 4
52125: PUSH
52126: LD_VAR 0 1
52130: PPUSH
52131: CALL_OW 248
52135: ST_TO_ADDR
// case nat of 1 :
52136: LD_VAR 0 4
52140: PUSH
52141: LD_INT 1
52143: DOUBLE
52144: EQUAL
52145: IFTRUE 52149
52147: GO 52160
52149: POP
// tech := tech_lassight ; 2 :
52150: LD_ADDR_VAR 0 5
52154: PUSH
52155: LD_INT 12
52157: ST_TO_ADDR
52158: GO 52199
52160: LD_INT 2
52162: DOUBLE
52163: EQUAL
52164: IFTRUE 52168
52166: GO 52179
52168: POP
// tech := tech_mortar ; 3 :
52169: LD_ADDR_VAR 0 5
52173: PUSH
52174: LD_INT 41
52176: ST_TO_ADDR
52177: GO 52199
52179: LD_INT 3
52181: DOUBLE
52182: EQUAL
52183: IFTRUE 52187
52185: GO 52198
52187: POP
// tech := tech_bazooka ; end ;
52188: LD_ADDR_VAR 0 5
52192: PUSH
52193: LD_INT 44
52195: ST_TO_ADDR
52196: GO 52199
52198: POP
// if Researched ( side , tech ) then
52199: LD_VAR 0 3
52203: PPUSH
52204: LD_VAR 0 5
52208: PPUSH
52209: CALL_OW 325
52213: IFFALSE 52240
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52215: LD_ADDR_VAR 0 2
52219: PUSH
52220: LD_INT 5
52222: PUSH
52223: LD_INT 8
52225: PUSH
52226: LD_INT 9
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: PUSH
52234: LD_VAR 0 4
52238: ARRAY
52239: ST_TO_ADDR
// end ;
52240: LD_VAR 0 2
52244: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52245: LD_INT 0
52247: PPUSH
52248: PPUSH
52249: PPUSH
// if not mines then
52250: LD_VAR 0 2
52254: NOT
52255: IFFALSE 52259
// exit ;
52257: GO 52403
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52259: LD_ADDR_VAR 0 5
52263: PUSH
52264: LD_INT 81
52266: PUSH
52267: LD_VAR 0 1
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: LD_INT 21
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PPUSH
52297: CALL_OW 69
52301: ST_TO_ADDR
// for i in mines do
52302: LD_ADDR_VAR 0 4
52306: PUSH
52307: LD_VAR 0 2
52311: PUSH
52312: FOR_IN
52313: IFFALSE 52401
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52315: LD_VAR 0 4
52319: PUSH
52320: LD_INT 1
52322: ARRAY
52323: PPUSH
52324: LD_VAR 0 4
52328: PUSH
52329: LD_INT 2
52331: ARRAY
52332: PPUSH
52333: CALL_OW 458
52337: NOT
52338: IFFALSE 52342
// continue ;
52340: GO 52312
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52342: LD_VAR 0 4
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: PPUSH
52351: LD_VAR 0 4
52355: PUSH
52356: LD_INT 2
52358: ARRAY
52359: PPUSH
52360: CALL_OW 428
52364: PUSH
52365: LD_VAR 0 5
52369: IN
52370: IFFALSE 52399
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52372: LD_VAR 0 4
52376: PUSH
52377: LD_INT 1
52379: ARRAY
52380: PPUSH
52381: LD_VAR 0 4
52385: PUSH
52386: LD_INT 2
52388: ARRAY
52389: PPUSH
52390: LD_VAR 0 1
52394: PPUSH
52395: CALL_OW 456
// end ;
52399: GO 52312
52401: POP
52402: POP
// end ;
52403: LD_VAR 0 3
52407: RET
// export function Count ( array ) ; var i ; begin
52408: LD_INT 0
52410: PPUSH
52411: PPUSH
// result := 0 ;
52412: LD_ADDR_VAR 0 2
52416: PUSH
52417: LD_INT 0
52419: ST_TO_ADDR
// for i in array do
52420: LD_ADDR_VAR 0 3
52424: PUSH
52425: LD_VAR 0 1
52429: PUSH
52430: FOR_IN
52431: IFFALSE 52455
// if i then
52433: LD_VAR 0 3
52437: IFFALSE 52453
// result := result + 1 ;
52439: LD_ADDR_VAR 0 2
52443: PUSH
52444: LD_VAR 0 2
52448: PUSH
52449: LD_INT 1
52451: PLUS
52452: ST_TO_ADDR
52453: GO 52430
52455: POP
52456: POP
// end ;
52457: LD_VAR 0 2
52461: RET
// export function IsEmpty ( building ) ; begin
52462: LD_INT 0
52464: PPUSH
// if not building then
52465: LD_VAR 0 1
52469: NOT
52470: IFFALSE 52474
// exit ;
52472: GO 52517
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52474: LD_ADDR_VAR 0 2
52478: PUSH
52479: LD_VAR 0 1
52483: PUSH
52484: LD_INT 22
52486: PUSH
52487: LD_VAR 0 1
52491: PPUSH
52492: CALL_OW 255
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 58
52503: PUSH
52504: EMPTY
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PPUSH
52511: CALL_OW 69
52515: IN
52516: ST_TO_ADDR
// end ;
52517: LD_VAR 0 2
52521: RET
// export function IsNotFull ( building ) ; var places ; begin
52522: LD_INT 0
52524: PPUSH
52525: PPUSH
// if not building then
52526: LD_VAR 0 1
52530: NOT
52531: IFFALSE 52535
// exit ;
52533: GO 52706
// result := false ;
52535: LD_ADDR_VAR 0 2
52539: PUSH
52540: LD_INT 0
52542: ST_TO_ADDR
// places := 0 ;
52543: LD_ADDR_VAR 0 3
52547: PUSH
52548: LD_INT 0
52550: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52551: LD_VAR 0 1
52555: PPUSH
52556: CALL_OW 266
52560: PUSH
52561: LD_INT 0
52563: DOUBLE
52564: EQUAL
52565: IFTRUE 52623
52567: LD_INT 1
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52623
52573: LD_INT 6
52575: DOUBLE
52576: EQUAL
52577: IFTRUE 52623
52579: LD_INT 7
52581: DOUBLE
52582: EQUAL
52583: IFTRUE 52623
52585: LD_INT 8
52587: DOUBLE
52588: EQUAL
52589: IFTRUE 52623
52591: LD_INT 4
52593: DOUBLE
52594: EQUAL
52595: IFTRUE 52623
52597: LD_INT 5
52599: DOUBLE
52600: EQUAL
52601: IFTRUE 52623
52603: LD_INT 2
52605: DOUBLE
52606: EQUAL
52607: IFTRUE 52623
52609: LD_INT 3
52611: DOUBLE
52612: EQUAL
52613: IFTRUE 52623
52615: LD_INT 35
52617: DOUBLE
52618: EQUAL
52619: IFTRUE 52623
52621: GO 52634
52623: POP
// places := 6 ; b_bunker , b_breastwork :
52624: LD_ADDR_VAR 0 3
52628: PUSH
52629: LD_INT 6
52631: ST_TO_ADDR
52632: GO 52679
52634: LD_INT 32
52636: DOUBLE
52637: EQUAL
52638: IFTRUE 52648
52640: LD_INT 31
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52648
52646: GO 52659
52648: POP
// places := 1 ; b_control_tower :
52649: LD_ADDR_VAR 0 3
52653: PUSH
52654: LD_INT 1
52656: ST_TO_ADDR
52657: GO 52679
52659: LD_INT 36
52661: DOUBLE
52662: EQUAL
52663: IFTRUE 52667
52665: GO 52678
52667: POP
// places := 3 ; end ;
52668: LD_ADDR_VAR 0 3
52672: PUSH
52673: LD_INT 3
52675: ST_TO_ADDR
52676: GO 52679
52678: POP
// if places then
52679: LD_VAR 0 3
52683: IFFALSE 52706
// result := UnitsInside ( building ) < places ;
52685: LD_ADDR_VAR 0 2
52689: PUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 313
52699: PUSH
52700: LD_VAR 0 3
52704: LESS
52705: ST_TO_ADDR
// end ;
52706: LD_VAR 0 2
52710: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52711: LD_INT 0
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
// tmp := [ ] ;
52717: LD_ADDR_VAR 0 3
52721: PUSH
52722: EMPTY
52723: ST_TO_ADDR
// list := [ ] ;
52724: LD_ADDR_VAR 0 5
52728: PUSH
52729: EMPTY
52730: ST_TO_ADDR
// for i = 16 to 25 do
52731: LD_ADDR_VAR 0 4
52735: PUSH
52736: DOUBLE
52737: LD_INT 16
52739: DEC
52740: ST_TO_ADDR
52741: LD_INT 25
52743: PUSH
52744: FOR_TO
52745: IFFALSE 52818
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52747: LD_ADDR_VAR 0 3
52751: PUSH
52752: LD_VAR 0 3
52756: PUSH
52757: LD_INT 22
52759: PUSH
52760: LD_VAR 0 1
52764: PPUSH
52765: CALL_OW 255
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 91
52776: PUSH
52777: LD_VAR 0 1
52781: PUSH
52782: LD_INT 6
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 30
52792: PUSH
52793: LD_VAR 0 4
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: PPUSH
52810: CALL_OW 69
52814: ADD
52815: ST_TO_ADDR
52816: GO 52744
52818: POP
52819: POP
// for i = 1 to tmp do
52820: LD_ADDR_VAR 0 4
52824: PUSH
52825: DOUBLE
52826: LD_INT 1
52828: DEC
52829: ST_TO_ADDR
52830: LD_VAR 0 3
52834: PUSH
52835: FOR_TO
52836: IFFALSE 52924
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52838: LD_ADDR_VAR 0 5
52842: PUSH
52843: LD_VAR 0 5
52847: PUSH
52848: LD_VAR 0 3
52852: PUSH
52853: LD_VAR 0 4
52857: ARRAY
52858: PPUSH
52859: CALL_OW 266
52863: PUSH
52864: LD_VAR 0 3
52868: PUSH
52869: LD_VAR 0 4
52873: ARRAY
52874: PPUSH
52875: CALL_OW 250
52879: PUSH
52880: LD_VAR 0 3
52884: PUSH
52885: LD_VAR 0 4
52889: ARRAY
52890: PPUSH
52891: CALL_OW 251
52895: PUSH
52896: LD_VAR 0 3
52900: PUSH
52901: LD_VAR 0 4
52905: ARRAY
52906: PPUSH
52907: CALL_OW 254
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: ADD
52921: ST_TO_ADDR
52922: GO 52835
52924: POP
52925: POP
// result := list ;
52926: LD_ADDR_VAR 0 2
52930: PUSH
52931: LD_VAR 0 5
52935: ST_TO_ADDR
// end ;
52936: LD_VAR 0 2
52940: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52941: LD_INT 0
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
// if not factory then
52950: LD_VAR 0 1
52954: NOT
52955: IFFALSE 52959
// exit ;
52957: GO 53552
// if control = control_apeman then
52959: LD_VAR 0 4
52963: PUSH
52964: LD_INT 5
52966: EQUAL
52967: IFFALSE 53076
// begin tmp := UnitsInside ( factory ) ;
52969: LD_ADDR_VAR 0 8
52973: PUSH
52974: LD_VAR 0 1
52978: PPUSH
52979: CALL_OW 313
52983: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52984: LD_VAR 0 8
52988: PPUSH
52989: LD_INT 25
52991: PUSH
52992: LD_INT 12
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PPUSH
52999: CALL_OW 72
53003: NOT
53004: IFFALSE 53014
// control := control_manual ;
53006: LD_ADDR_VAR 0 4
53010: PUSH
53011: LD_INT 1
53013: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
53014: LD_ADDR_VAR 0 8
53018: PUSH
53019: LD_VAR 0 1
53023: PPUSH
53024: CALL 52711 0 1
53028: ST_TO_ADDR
// if tmp then
53029: LD_VAR 0 8
53033: IFFALSE 53076
// begin for i in tmp do
53035: LD_ADDR_VAR 0 7
53039: PUSH
53040: LD_VAR 0 8
53044: PUSH
53045: FOR_IN
53046: IFFALSE 53074
// if i [ 1 ] = b_ext_radio then
53048: LD_VAR 0 7
53052: PUSH
53053: LD_INT 1
53055: ARRAY
53056: PUSH
53057: LD_INT 22
53059: EQUAL
53060: IFFALSE 53072
// begin control := control_remote ;
53062: LD_ADDR_VAR 0 4
53066: PUSH
53067: LD_INT 2
53069: ST_TO_ADDR
// break ;
53070: GO 53074
// end ;
53072: GO 53045
53074: POP
53075: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53076: LD_VAR 0 1
53080: PPUSH
53081: LD_VAR 0 2
53085: PPUSH
53086: LD_VAR 0 3
53090: PPUSH
53091: LD_VAR 0 4
53095: PPUSH
53096: LD_VAR 0 5
53100: PPUSH
53101: CALL_OW 448
53105: IFFALSE 53140
// begin result := [ chassis , engine , control , weapon ] ;
53107: LD_ADDR_VAR 0 6
53111: PUSH
53112: LD_VAR 0 2
53116: PUSH
53117: LD_VAR 0 3
53121: PUSH
53122: LD_VAR 0 4
53126: PUSH
53127: LD_VAR 0 5
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// exit ;
53138: GO 53552
// end ; _chassis := AvailableChassisList ( factory ) ;
53140: LD_ADDR_VAR 0 9
53144: PUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 475
53154: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
53155: LD_ADDR_VAR 0 11
53159: PUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: CALL_OW 476
53169: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
53170: LD_ADDR_VAR 0 12
53174: PUSH
53175: LD_VAR 0 1
53179: PPUSH
53180: CALL_OW 477
53184: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
53185: LD_ADDR_VAR 0 10
53189: PUSH
53190: LD_VAR 0 1
53194: PPUSH
53195: CALL_OW 478
53199: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53200: LD_VAR 0 9
53204: NOT
53205: PUSH
53206: LD_VAR 0 11
53210: NOT
53211: OR
53212: PUSH
53213: LD_VAR 0 12
53217: NOT
53218: OR
53219: PUSH
53220: LD_VAR 0 10
53224: NOT
53225: OR
53226: IFFALSE 53261
// begin result := [ chassis , engine , control , weapon ] ;
53228: LD_ADDR_VAR 0 6
53232: PUSH
53233: LD_VAR 0 2
53237: PUSH
53238: LD_VAR 0 3
53242: PUSH
53243: LD_VAR 0 4
53247: PUSH
53248: LD_VAR 0 5
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// exit ;
53259: GO 53552
// end ; if not chassis in _chassis then
53261: LD_VAR 0 2
53265: PUSH
53266: LD_VAR 0 9
53270: IN
53271: NOT
53272: IFFALSE 53298
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53274: LD_ADDR_VAR 0 2
53278: PUSH
53279: LD_VAR 0 9
53283: PUSH
53284: LD_INT 1
53286: PPUSH
53287: LD_VAR 0 9
53291: PPUSH
53292: CALL_OW 12
53296: ARRAY
53297: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53298: LD_VAR 0 2
53302: PPUSH
53303: LD_VAR 0 3
53307: PPUSH
53308: CALL 53557 0 2
53312: NOT
53313: IFFALSE 53372
// repeat engine := _engine [ 1 ] ;
53315: LD_ADDR_VAR 0 3
53319: PUSH
53320: LD_VAR 0 11
53324: PUSH
53325: LD_INT 1
53327: ARRAY
53328: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53329: LD_ADDR_VAR 0 11
53333: PUSH
53334: LD_VAR 0 11
53338: PPUSH
53339: LD_INT 1
53341: PPUSH
53342: CALL_OW 3
53346: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53347: LD_VAR 0 2
53351: PPUSH
53352: LD_VAR 0 3
53356: PPUSH
53357: CALL 53557 0 2
53361: PUSH
53362: LD_VAR 0 11
53366: PUSH
53367: EMPTY
53368: EQUAL
53369: OR
53370: IFFALSE 53315
// if not control in _control then
53372: LD_VAR 0 4
53376: PUSH
53377: LD_VAR 0 12
53381: IN
53382: NOT
53383: IFFALSE 53409
// control := _control [ rand ( 1 , _control ) ] ;
53385: LD_ADDR_VAR 0 4
53389: PUSH
53390: LD_VAR 0 12
53394: PUSH
53395: LD_INT 1
53397: PPUSH
53398: LD_VAR 0 12
53402: PPUSH
53403: CALL_OW 12
53407: ARRAY
53408: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53409: LD_VAR 0 2
53413: PPUSH
53414: LD_VAR 0 5
53418: PPUSH
53419: CALL 53777 0 2
53423: NOT
53424: IFFALSE 53483
// repeat weapon := _weapon [ 1 ] ;
53426: LD_ADDR_VAR 0 5
53430: PUSH
53431: LD_VAR 0 10
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53440: LD_ADDR_VAR 0 10
53444: PUSH
53445: LD_VAR 0 10
53449: PPUSH
53450: LD_INT 1
53452: PPUSH
53453: CALL_OW 3
53457: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53458: LD_VAR 0 2
53462: PPUSH
53463: LD_VAR 0 5
53467: PPUSH
53468: CALL 53777 0 2
53472: PUSH
53473: LD_VAR 0 10
53477: PUSH
53478: EMPTY
53479: EQUAL
53480: OR
53481: IFFALSE 53426
// result := [ ] ;
53483: LD_ADDR_VAR 0 6
53487: PUSH
53488: EMPTY
53489: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53490: LD_VAR 0 1
53494: PPUSH
53495: LD_VAR 0 2
53499: PPUSH
53500: LD_VAR 0 3
53504: PPUSH
53505: LD_VAR 0 4
53509: PPUSH
53510: LD_VAR 0 5
53514: PPUSH
53515: CALL_OW 448
53519: IFFALSE 53552
// result := [ chassis , engine , control , weapon ] ;
53521: LD_ADDR_VAR 0 6
53525: PUSH
53526: LD_VAR 0 2
53530: PUSH
53531: LD_VAR 0 3
53535: PUSH
53536: LD_VAR 0 4
53540: PUSH
53541: LD_VAR 0 5
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// end ;
53552: LD_VAR 0 6
53556: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53557: LD_INT 0
53559: PPUSH
// if not chassis or not engine then
53560: LD_VAR 0 1
53564: NOT
53565: PUSH
53566: LD_VAR 0 2
53570: NOT
53571: OR
53572: IFFALSE 53576
// exit ;
53574: GO 53772
// case engine of engine_solar :
53576: LD_VAR 0 2
53580: PUSH
53581: LD_INT 2
53583: DOUBLE
53584: EQUAL
53585: IFTRUE 53589
53587: GO 53627
53589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53590: LD_ADDR_VAR 0 3
53594: PUSH
53595: LD_INT 11
53597: PUSH
53598: LD_INT 12
53600: PUSH
53601: LD_INT 13
53603: PUSH
53604: LD_INT 14
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
53625: GO 53756
53627: LD_INT 1
53629: DOUBLE
53630: EQUAL
53631: IFTRUE 53635
53633: GO 53697
53635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53636: LD_ADDR_VAR 0 3
53640: PUSH
53641: LD_INT 11
53643: PUSH
53644: LD_INT 12
53646: PUSH
53647: LD_INT 13
53649: PUSH
53650: LD_INT 14
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: LD_INT 5
53667: PUSH
53668: LD_INT 21
53670: PUSH
53671: LD_INT 23
53673: PUSH
53674: LD_INT 22
53676: PUSH
53677: LD_INT 24
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
53695: GO 53756
53697: LD_INT 3
53699: DOUBLE
53700: EQUAL
53701: IFTRUE 53705
53703: GO 53755
53705: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53706: LD_ADDR_VAR 0 3
53710: PUSH
53711: LD_INT 13
53713: PUSH
53714: LD_INT 14
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 4
53725: PUSH
53726: LD_INT 5
53728: PUSH
53729: LD_INT 21
53731: PUSH
53732: LD_INT 22
53734: PUSH
53735: LD_INT 23
53737: PUSH
53738: LD_INT 24
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
53753: GO 53756
53755: POP
// result := ( chassis in result ) ;
53756: LD_ADDR_VAR 0 3
53760: PUSH
53761: LD_VAR 0 1
53765: PUSH
53766: LD_VAR 0 3
53770: IN
53771: ST_TO_ADDR
// end ;
53772: LD_VAR 0 3
53776: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53777: LD_INT 0
53779: PPUSH
// if not chassis or not weapon then
53780: LD_VAR 0 1
53784: NOT
53785: PUSH
53786: LD_VAR 0 2
53790: NOT
53791: OR
53792: IFFALSE 53796
// exit ;
53794: GO 54856
// case weapon of us_machine_gun :
53796: LD_VAR 0 2
53800: PUSH
53801: LD_INT 2
53803: DOUBLE
53804: EQUAL
53805: IFTRUE 53809
53807: GO 53839
53809: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53810: LD_ADDR_VAR 0 3
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: LD_INT 4
53826: PUSH
53827: LD_INT 5
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: ST_TO_ADDR
53837: GO 54840
53839: LD_INT 3
53841: DOUBLE
53842: EQUAL
53843: IFTRUE 53847
53845: GO 53877
53847: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53848: LD_ADDR_VAR 0 3
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: LD_INT 3
53861: PUSH
53862: LD_INT 4
53864: PUSH
53865: LD_INT 5
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
53875: GO 54840
53877: LD_INT 11
53879: DOUBLE
53880: EQUAL
53881: IFTRUE 53885
53883: GO 53915
53885: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53886: LD_ADDR_VAR 0 3
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: LD_INT 4
53902: PUSH
53903: LD_INT 5
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: ST_TO_ADDR
53913: GO 54840
53915: LD_INT 4
53917: DOUBLE
53918: EQUAL
53919: IFTRUE 53923
53921: GO 53949
53923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53924: LD_ADDR_VAR 0 3
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 3
53934: PUSH
53935: LD_INT 4
53937: PUSH
53938: LD_INT 5
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
53947: GO 54840
53949: LD_INT 5
53951: DOUBLE
53952: EQUAL
53953: IFTRUE 53957
53955: GO 53983
53957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53958: LD_ADDR_VAR 0 3
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: LD_INT 4
53971: PUSH
53972: LD_INT 5
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: ST_TO_ADDR
53981: GO 54840
53983: LD_INT 9
53985: DOUBLE
53986: EQUAL
53987: IFTRUE 53991
53989: GO 54017
53991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53992: LD_ADDR_VAR 0 3
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: LD_INT 4
54005: PUSH
54006: LD_INT 5
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: ST_TO_ADDR
54015: GO 54840
54017: LD_INT 7
54019: DOUBLE
54020: EQUAL
54021: IFTRUE 54025
54023: GO 54051
54025: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
54026: LD_ADDR_VAR 0 3
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 4
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
54049: GO 54840
54051: LD_INT 12
54053: DOUBLE
54054: EQUAL
54055: IFTRUE 54059
54057: GO 54085
54059: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
54060: LD_ADDR_VAR 0 3
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: LD_INT 4
54073: PUSH
54074: LD_INT 5
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
54083: GO 54840
54085: LD_INT 13
54087: DOUBLE
54088: EQUAL
54089: IFTRUE 54093
54091: GO 54119
54093: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
54094: LD_ADDR_VAR 0 3
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: LD_INT 4
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
54117: GO 54840
54119: LD_INT 14
54121: DOUBLE
54122: EQUAL
54123: IFTRUE 54127
54125: GO 54145
54127: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
54128: LD_ADDR_VAR 0 3
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: LD_INT 5
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: ST_TO_ADDR
54143: GO 54840
54145: LD_INT 6
54147: DOUBLE
54148: EQUAL
54149: IFTRUE 54153
54151: GO 54171
54153: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
54154: LD_ADDR_VAR 0 3
54158: PUSH
54159: LD_INT 4
54161: PUSH
54162: LD_INT 5
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: ST_TO_ADDR
54169: GO 54840
54171: LD_INT 10
54173: DOUBLE
54174: EQUAL
54175: IFTRUE 54179
54177: GO 54197
54179: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
54180: LD_ADDR_VAR 0 3
54184: PUSH
54185: LD_INT 4
54187: PUSH
54188: LD_INT 5
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: ST_TO_ADDR
54195: GO 54840
54197: LD_INT 22
54199: DOUBLE
54200: EQUAL
54201: IFTRUE 54205
54203: GO 54231
54205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54206: LD_ADDR_VAR 0 3
54210: PUSH
54211: LD_INT 11
54213: PUSH
54214: LD_INT 12
54216: PUSH
54217: LD_INT 13
54219: PUSH
54220: LD_INT 14
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
54229: GO 54840
54231: LD_INT 23
54233: DOUBLE
54234: EQUAL
54235: IFTRUE 54239
54237: GO 54265
54239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54240: LD_ADDR_VAR 0 3
54244: PUSH
54245: LD_INT 11
54247: PUSH
54248: LD_INT 12
54250: PUSH
54251: LD_INT 13
54253: PUSH
54254: LD_INT 14
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
54263: GO 54840
54265: LD_INT 24
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54273
54271: GO 54299
54273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54274: LD_ADDR_VAR 0 3
54278: PUSH
54279: LD_INT 11
54281: PUSH
54282: LD_INT 12
54284: PUSH
54285: LD_INT 13
54287: PUSH
54288: LD_INT 14
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
54297: GO 54840
54299: LD_INT 30
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54307
54305: GO 54333
54307: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54308: LD_ADDR_VAR 0 3
54312: PUSH
54313: LD_INT 11
54315: PUSH
54316: LD_INT 12
54318: PUSH
54319: LD_INT 13
54321: PUSH
54322: LD_INT 14
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: ST_TO_ADDR
54331: GO 54840
54333: LD_INT 25
54335: DOUBLE
54336: EQUAL
54337: IFTRUE 54341
54339: GO 54359
54341: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54342: LD_ADDR_VAR 0 3
54346: PUSH
54347: LD_INT 13
54349: PUSH
54350: LD_INT 14
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: ST_TO_ADDR
54357: GO 54840
54359: LD_INT 27
54361: DOUBLE
54362: EQUAL
54363: IFTRUE 54367
54365: GO 54385
54367: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
54368: LD_ADDR_VAR 0 3
54372: PUSH
54373: LD_INT 13
54375: PUSH
54376: LD_INT 14
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: ST_TO_ADDR
54383: GO 54840
54385: LD_INT 92
54387: DOUBLE
54388: EQUAL
54389: IFTRUE 54393
54391: GO 54419
54393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54394: LD_ADDR_VAR 0 3
54398: PUSH
54399: LD_INT 11
54401: PUSH
54402: LD_INT 12
54404: PUSH
54405: LD_INT 13
54407: PUSH
54408: LD_INT 14
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
54417: GO 54840
54419: LD_INT 28
54421: DOUBLE
54422: EQUAL
54423: IFTRUE 54427
54425: GO 54445
54427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54428: LD_ADDR_VAR 0 3
54432: PUSH
54433: LD_INT 13
54435: PUSH
54436: LD_INT 14
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: ST_TO_ADDR
54443: GO 54840
54445: LD_INT 29
54447: DOUBLE
54448: EQUAL
54449: IFTRUE 54453
54451: GO 54471
54453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54454: LD_ADDR_VAR 0 3
54458: PUSH
54459: LD_INT 13
54461: PUSH
54462: LD_INT 14
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: ST_TO_ADDR
54469: GO 54840
54471: LD_INT 31
54473: DOUBLE
54474: EQUAL
54475: IFTRUE 54479
54477: GO 54497
54479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54480: LD_ADDR_VAR 0 3
54484: PUSH
54485: LD_INT 13
54487: PUSH
54488: LD_INT 14
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: ST_TO_ADDR
54495: GO 54840
54497: LD_INT 26
54499: DOUBLE
54500: EQUAL
54501: IFTRUE 54505
54503: GO 54523
54505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54506: LD_ADDR_VAR 0 3
54510: PUSH
54511: LD_INT 13
54513: PUSH
54514: LD_INT 14
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: ST_TO_ADDR
54521: GO 54840
54523: LD_INT 42
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54531
54529: GO 54557
54531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54532: LD_ADDR_VAR 0 3
54536: PUSH
54537: LD_INT 21
54539: PUSH
54540: LD_INT 22
54542: PUSH
54543: LD_INT 23
54545: PUSH
54546: LD_INT 24
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
54555: GO 54840
54557: LD_INT 43
54559: DOUBLE
54560: EQUAL
54561: IFTRUE 54565
54563: GO 54591
54565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54566: LD_ADDR_VAR 0 3
54570: PUSH
54571: LD_INT 21
54573: PUSH
54574: LD_INT 22
54576: PUSH
54577: LD_INT 23
54579: PUSH
54580: LD_INT 24
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
54589: GO 54840
54591: LD_INT 44
54593: DOUBLE
54594: EQUAL
54595: IFTRUE 54599
54597: GO 54625
54599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54600: LD_ADDR_VAR 0 3
54604: PUSH
54605: LD_INT 21
54607: PUSH
54608: LD_INT 22
54610: PUSH
54611: LD_INT 23
54613: PUSH
54614: LD_INT 24
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: ST_TO_ADDR
54623: GO 54840
54625: LD_INT 45
54627: DOUBLE
54628: EQUAL
54629: IFTRUE 54633
54631: GO 54659
54633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54634: LD_ADDR_VAR 0 3
54638: PUSH
54639: LD_INT 21
54641: PUSH
54642: LD_INT 22
54644: PUSH
54645: LD_INT 23
54647: PUSH
54648: LD_INT 24
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: ST_TO_ADDR
54657: GO 54840
54659: LD_INT 49
54661: DOUBLE
54662: EQUAL
54663: IFTRUE 54667
54665: GO 54693
54667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54668: LD_ADDR_VAR 0 3
54672: PUSH
54673: LD_INT 21
54675: PUSH
54676: LD_INT 22
54678: PUSH
54679: LD_INT 23
54681: PUSH
54682: LD_INT 24
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
54691: GO 54840
54693: LD_INT 51
54695: DOUBLE
54696: EQUAL
54697: IFTRUE 54701
54699: GO 54727
54701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54702: LD_ADDR_VAR 0 3
54706: PUSH
54707: LD_INT 21
54709: PUSH
54710: LD_INT 22
54712: PUSH
54713: LD_INT 23
54715: PUSH
54716: LD_INT 24
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: ST_TO_ADDR
54725: GO 54840
54727: LD_INT 52
54729: DOUBLE
54730: EQUAL
54731: IFTRUE 54735
54733: GO 54761
54735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54736: LD_ADDR_VAR 0 3
54740: PUSH
54741: LD_INT 21
54743: PUSH
54744: LD_INT 22
54746: PUSH
54747: LD_INT 23
54749: PUSH
54750: LD_INT 24
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: ST_TO_ADDR
54759: GO 54840
54761: LD_INT 53
54763: DOUBLE
54764: EQUAL
54765: IFTRUE 54769
54767: GO 54787
54769: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54770: LD_ADDR_VAR 0 3
54774: PUSH
54775: LD_INT 23
54777: PUSH
54778: LD_INT 24
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: ST_TO_ADDR
54785: GO 54840
54787: LD_INT 46
54789: DOUBLE
54790: EQUAL
54791: IFTRUE 54795
54793: GO 54813
54795: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54796: LD_ADDR_VAR 0 3
54800: PUSH
54801: LD_INT 23
54803: PUSH
54804: LD_INT 24
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: ST_TO_ADDR
54811: GO 54840
54813: LD_INT 47
54815: DOUBLE
54816: EQUAL
54817: IFTRUE 54821
54819: GO 54839
54821: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54822: LD_ADDR_VAR 0 3
54826: PUSH
54827: LD_INT 23
54829: PUSH
54830: LD_INT 24
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: ST_TO_ADDR
54837: GO 54840
54839: POP
// result := ( chassis in result ) ;
54840: LD_ADDR_VAR 0 3
54844: PUSH
54845: LD_VAR 0 1
54849: PUSH
54850: LD_VAR 0 3
54854: IN
54855: ST_TO_ADDR
// end ;
54856: LD_VAR 0 3
54860: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54861: LD_INT 0
54863: PPUSH
54864: PPUSH
54865: PPUSH
54866: PPUSH
54867: PPUSH
54868: PPUSH
54869: PPUSH
// result := array ;
54870: LD_ADDR_VAR 0 5
54874: PUSH
54875: LD_VAR 0 1
54879: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54880: LD_VAR 0 1
54884: NOT
54885: PUSH
54886: LD_VAR 0 2
54890: NOT
54891: OR
54892: PUSH
54893: LD_VAR 0 3
54897: NOT
54898: OR
54899: PUSH
54900: LD_VAR 0 2
54904: PUSH
54905: LD_VAR 0 1
54909: GREATER
54910: OR
54911: PUSH
54912: LD_VAR 0 3
54916: PUSH
54917: LD_VAR 0 1
54921: GREATER
54922: OR
54923: IFFALSE 54927
// exit ;
54925: GO 55223
// if direction then
54927: LD_VAR 0 4
54931: IFFALSE 54995
// begin d := 1 ;
54933: LD_ADDR_VAR 0 9
54937: PUSH
54938: LD_INT 1
54940: ST_TO_ADDR
// if i_from > i_to then
54941: LD_VAR 0 2
54945: PUSH
54946: LD_VAR 0 3
54950: GREATER
54951: IFFALSE 54977
// length := ( array - i_from ) + i_to else
54953: LD_ADDR_VAR 0 11
54957: PUSH
54958: LD_VAR 0 1
54962: PUSH
54963: LD_VAR 0 2
54967: MINUS
54968: PUSH
54969: LD_VAR 0 3
54973: PLUS
54974: ST_TO_ADDR
54975: GO 54993
// length := i_to - i_from ;
54977: LD_ADDR_VAR 0 11
54981: PUSH
54982: LD_VAR 0 3
54986: PUSH
54987: LD_VAR 0 2
54991: MINUS
54992: ST_TO_ADDR
// end else
54993: GO 55056
// begin d := - 1 ;
54995: LD_ADDR_VAR 0 9
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: ST_TO_ADDR
// if i_from > i_to then
55004: LD_VAR 0 2
55008: PUSH
55009: LD_VAR 0 3
55013: GREATER
55014: IFFALSE 55034
// length := i_from - i_to else
55016: LD_ADDR_VAR 0 11
55020: PUSH
55021: LD_VAR 0 2
55025: PUSH
55026: LD_VAR 0 3
55030: MINUS
55031: ST_TO_ADDR
55032: GO 55056
// length := ( array - i_to ) + i_from ;
55034: LD_ADDR_VAR 0 11
55038: PUSH
55039: LD_VAR 0 1
55043: PUSH
55044: LD_VAR 0 3
55048: MINUS
55049: PUSH
55050: LD_VAR 0 2
55054: PLUS
55055: ST_TO_ADDR
// end ; if not length then
55056: LD_VAR 0 11
55060: NOT
55061: IFFALSE 55065
// exit ;
55063: GO 55223
// tmp := array ;
55065: LD_ADDR_VAR 0 10
55069: PUSH
55070: LD_VAR 0 1
55074: ST_TO_ADDR
// for i = 1 to length do
55075: LD_ADDR_VAR 0 6
55079: PUSH
55080: DOUBLE
55081: LD_INT 1
55083: DEC
55084: ST_TO_ADDR
55085: LD_VAR 0 11
55089: PUSH
55090: FOR_TO
55091: IFFALSE 55211
// begin for j = 1 to array do
55093: LD_ADDR_VAR 0 7
55097: PUSH
55098: DOUBLE
55099: LD_INT 1
55101: DEC
55102: ST_TO_ADDR
55103: LD_VAR 0 1
55107: PUSH
55108: FOR_TO
55109: IFFALSE 55197
// begin k := j + d ;
55111: LD_ADDR_VAR 0 8
55115: PUSH
55116: LD_VAR 0 7
55120: PUSH
55121: LD_VAR 0 9
55125: PLUS
55126: ST_TO_ADDR
// if k > array then
55127: LD_VAR 0 8
55131: PUSH
55132: LD_VAR 0 1
55136: GREATER
55137: IFFALSE 55147
// k := 1 ;
55139: LD_ADDR_VAR 0 8
55143: PUSH
55144: LD_INT 1
55146: ST_TO_ADDR
// if not k then
55147: LD_VAR 0 8
55151: NOT
55152: IFFALSE 55164
// k := array ;
55154: LD_ADDR_VAR 0 8
55158: PUSH
55159: LD_VAR 0 1
55163: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
55164: LD_ADDR_VAR 0 10
55168: PUSH
55169: LD_VAR 0 10
55173: PPUSH
55174: LD_VAR 0 8
55178: PPUSH
55179: LD_VAR 0 1
55183: PUSH
55184: LD_VAR 0 7
55188: ARRAY
55189: PPUSH
55190: CALL_OW 1
55194: ST_TO_ADDR
// end ;
55195: GO 55108
55197: POP
55198: POP
// array := tmp ;
55199: LD_ADDR_VAR 0 1
55203: PUSH
55204: LD_VAR 0 10
55208: ST_TO_ADDR
// end ;
55209: GO 55090
55211: POP
55212: POP
// result := array ;
55213: LD_ADDR_VAR 0 5
55217: PUSH
55218: LD_VAR 0 1
55222: ST_TO_ADDR
// end ;
55223: LD_VAR 0 5
55227: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55228: LD_INT 0
55230: PPUSH
55231: PPUSH
// result := 0 ;
55232: LD_ADDR_VAR 0 3
55236: PUSH
55237: LD_INT 0
55239: ST_TO_ADDR
// if not array or not value in array then
55240: LD_VAR 0 1
55244: NOT
55245: PUSH
55246: LD_VAR 0 2
55250: PUSH
55251: LD_VAR 0 1
55255: IN
55256: NOT
55257: OR
55258: IFFALSE 55262
// exit ;
55260: GO 55316
// for i = 1 to array do
55262: LD_ADDR_VAR 0 4
55266: PUSH
55267: DOUBLE
55268: LD_INT 1
55270: DEC
55271: ST_TO_ADDR
55272: LD_VAR 0 1
55276: PUSH
55277: FOR_TO
55278: IFFALSE 55314
// if value = array [ i ] then
55280: LD_VAR 0 2
55284: PUSH
55285: LD_VAR 0 1
55289: PUSH
55290: LD_VAR 0 4
55294: ARRAY
55295: EQUAL
55296: IFFALSE 55312
// begin result := i ;
55298: LD_ADDR_VAR 0 3
55302: PUSH
55303: LD_VAR 0 4
55307: ST_TO_ADDR
// exit ;
55308: POP
55309: POP
55310: GO 55316
// end ;
55312: GO 55277
55314: POP
55315: POP
// end ;
55316: LD_VAR 0 3
55320: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55321: LD_INT 0
55323: PPUSH
// vc_chassis := chassis ;
55324: LD_ADDR_OWVAR 37
55328: PUSH
55329: LD_VAR 0 1
55333: ST_TO_ADDR
// vc_engine := engine ;
55334: LD_ADDR_OWVAR 39
55338: PUSH
55339: LD_VAR 0 2
55343: ST_TO_ADDR
// vc_control := control ;
55344: LD_ADDR_OWVAR 38
55348: PUSH
55349: LD_VAR 0 3
55353: ST_TO_ADDR
// vc_weapon := weapon ;
55354: LD_ADDR_OWVAR 40
55358: PUSH
55359: LD_VAR 0 4
55363: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55364: LD_ADDR_OWVAR 41
55368: PUSH
55369: LD_VAR 0 5
55373: ST_TO_ADDR
// end ;
55374: LD_VAR 0 6
55378: RET
// export function WantPlant ( unit ) ; var task ; begin
55379: LD_INT 0
55381: PPUSH
55382: PPUSH
// result := false ;
55383: LD_ADDR_VAR 0 2
55387: PUSH
55388: LD_INT 0
55390: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55391: LD_ADDR_VAR 0 3
55395: PUSH
55396: LD_VAR 0 1
55400: PPUSH
55401: CALL_OW 437
55405: ST_TO_ADDR
// if task then
55406: LD_VAR 0 3
55410: IFFALSE 55438
// if task [ 1 ] [ 1 ] = p then
55412: LD_VAR 0 3
55416: PUSH
55417: LD_INT 1
55419: ARRAY
55420: PUSH
55421: LD_INT 1
55423: ARRAY
55424: PUSH
55425: LD_STRING p
55427: EQUAL
55428: IFFALSE 55438
// result := true ;
55430: LD_ADDR_VAR 0 2
55434: PUSH
55435: LD_INT 1
55437: ST_TO_ADDR
// end ;
55438: LD_VAR 0 2
55442: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55443: LD_INT 0
55445: PPUSH
55446: PPUSH
55447: PPUSH
55448: PPUSH
// if pos < 1 then
55449: LD_VAR 0 2
55453: PUSH
55454: LD_INT 1
55456: LESS
55457: IFFALSE 55461
// exit ;
55459: GO 55764
// if pos = 1 then
55461: LD_VAR 0 2
55465: PUSH
55466: LD_INT 1
55468: EQUAL
55469: IFFALSE 55502
// result := Replace ( arr , pos [ 1 ] , value ) else
55471: LD_ADDR_VAR 0 4
55475: PUSH
55476: LD_VAR 0 1
55480: PPUSH
55481: LD_VAR 0 2
55485: PUSH
55486: LD_INT 1
55488: ARRAY
55489: PPUSH
55490: LD_VAR 0 3
55494: PPUSH
55495: CALL_OW 1
55499: ST_TO_ADDR
55500: GO 55764
// begin tmp := arr ;
55502: LD_ADDR_VAR 0 6
55506: PUSH
55507: LD_VAR 0 1
55511: ST_TO_ADDR
// s_arr := [ tmp ] ;
55512: LD_ADDR_VAR 0 7
55516: PUSH
55517: LD_VAR 0 6
55521: PUSH
55522: EMPTY
55523: LIST
55524: ST_TO_ADDR
// for i = 1 to pos - 1 do
55525: LD_ADDR_VAR 0 5
55529: PUSH
55530: DOUBLE
55531: LD_INT 1
55533: DEC
55534: ST_TO_ADDR
55535: LD_VAR 0 2
55539: PUSH
55540: LD_INT 1
55542: MINUS
55543: PUSH
55544: FOR_TO
55545: IFFALSE 55590
// begin tmp := tmp [ pos [ i ] ] ;
55547: LD_ADDR_VAR 0 6
55551: PUSH
55552: LD_VAR 0 6
55556: PUSH
55557: LD_VAR 0 2
55561: PUSH
55562: LD_VAR 0 5
55566: ARRAY
55567: ARRAY
55568: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55569: LD_ADDR_VAR 0 7
55573: PUSH
55574: LD_VAR 0 7
55578: PUSH
55579: LD_VAR 0 6
55583: PUSH
55584: EMPTY
55585: LIST
55586: ADD
55587: ST_TO_ADDR
// end ;
55588: GO 55544
55590: POP
55591: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55592: LD_ADDR_VAR 0 6
55596: PUSH
55597: LD_VAR 0 6
55601: PPUSH
55602: LD_VAR 0 2
55606: PUSH
55607: LD_VAR 0 2
55611: ARRAY
55612: PPUSH
55613: LD_VAR 0 3
55617: PPUSH
55618: CALL_OW 1
55622: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55623: LD_ADDR_VAR 0 7
55627: PUSH
55628: LD_VAR 0 7
55632: PPUSH
55633: LD_VAR 0 7
55637: PPUSH
55638: LD_VAR 0 6
55642: PPUSH
55643: CALL_OW 1
55647: ST_TO_ADDR
// for i = s_arr downto 2 do
55648: LD_ADDR_VAR 0 5
55652: PUSH
55653: DOUBLE
55654: LD_VAR 0 7
55658: INC
55659: ST_TO_ADDR
55660: LD_INT 2
55662: PUSH
55663: FOR_DOWNTO
55664: IFFALSE 55748
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55666: LD_ADDR_VAR 0 6
55670: PUSH
55671: LD_VAR 0 7
55675: PUSH
55676: LD_VAR 0 5
55680: PUSH
55681: LD_INT 1
55683: MINUS
55684: ARRAY
55685: PPUSH
55686: LD_VAR 0 2
55690: PUSH
55691: LD_VAR 0 5
55695: PUSH
55696: LD_INT 1
55698: MINUS
55699: ARRAY
55700: PPUSH
55701: LD_VAR 0 7
55705: PUSH
55706: LD_VAR 0 5
55710: ARRAY
55711: PPUSH
55712: CALL_OW 1
55716: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55717: LD_ADDR_VAR 0 7
55721: PUSH
55722: LD_VAR 0 7
55726: PPUSH
55727: LD_VAR 0 5
55731: PUSH
55732: LD_INT 1
55734: MINUS
55735: PPUSH
55736: LD_VAR 0 6
55740: PPUSH
55741: CALL_OW 1
55745: ST_TO_ADDR
// end ;
55746: GO 55663
55748: POP
55749: POP
// result := s_arr [ 1 ] ;
55750: LD_ADDR_VAR 0 4
55754: PUSH
55755: LD_VAR 0 7
55759: PUSH
55760: LD_INT 1
55762: ARRAY
55763: ST_TO_ADDR
// end ; end ;
55764: LD_VAR 0 4
55768: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55769: LD_INT 0
55771: PPUSH
55772: PPUSH
// if not list then
55773: LD_VAR 0 1
55777: NOT
55778: IFFALSE 55782
// exit ;
55780: GO 55873
// i := list [ pos1 ] ;
55782: LD_ADDR_VAR 0 5
55786: PUSH
55787: LD_VAR 0 1
55791: PUSH
55792: LD_VAR 0 2
55796: ARRAY
55797: ST_TO_ADDR
// if not i then
55798: LD_VAR 0 5
55802: NOT
55803: IFFALSE 55807
// exit ;
55805: GO 55873
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55807: LD_ADDR_VAR 0 1
55811: PUSH
55812: LD_VAR 0 1
55816: PPUSH
55817: LD_VAR 0 2
55821: PPUSH
55822: LD_VAR 0 1
55826: PUSH
55827: LD_VAR 0 3
55831: ARRAY
55832: PPUSH
55833: CALL_OW 1
55837: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55838: LD_ADDR_VAR 0 1
55842: PUSH
55843: LD_VAR 0 1
55847: PPUSH
55848: LD_VAR 0 3
55852: PPUSH
55853: LD_VAR 0 5
55857: PPUSH
55858: CALL_OW 1
55862: ST_TO_ADDR
// result := list ;
55863: LD_ADDR_VAR 0 4
55867: PUSH
55868: LD_VAR 0 1
55872: ST_TO_ADDR
// end ;
55873: LD_VAR 0 4
55877: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55878: LD_INT 0
55880: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55881: LD_ADDR_VAR 0 5
55885: PUSH
55886: LD_VAR 0 1
55890: PPUSH
55891: CALL_OW 250
55895: PPUSH
55896: LD_VAR 0 1
55900: PPUSH
55901: CALL_OW 251
55905: PPUSH
55906: LD_VAR 0 2
55910: PPUSH
55911: LD_VAR 0 3
55915: PPUSH
55916: LD_VAR 0 4
55920: PPUSH
55921: CALL 55931 0 5
55925: ST_TO_ADDR
// end ;
55926: LD_VAR 0 5
55930: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55931: LD_INT 0
55933: PPUSH
55934: PPUSH
55935: PPUSH
55936: PPUSH
// if not list then
55937: LD_VAR 0 3
55941: NOT
55942: IFFALSE 55946
// exit ;
55944: GO 56334
// result := [ ] ;
55946: LD_ADDR_VAR 0 6
55950: PUSH
55951: EMPTY
55952: ST_TO_ADDR
// for i in list do
55953: LD_ADDR_VAR 0 7
55957: PUSH
55958: LD_VAR 0 3
55962: PUSH
55963: FOR_IN
55964: IFFALSE 56166
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55966: LD_ADDR_VAR 0 9
55970: PUSH
55971: LD_VAR 0 7
55975: PPUSH
55976: LD_VAR 0 1
55980: PPUSH
55981: LD_VAR 0 2
55985: PPUSH
55986: CALL_OW 297
55990: ST_TO_ADDR
// if not result then
55991: LD_VAR 0 6
55995: NOT
55996: IFFALSE 56022
// result := [ [ i , tmp ] ] else
55998: LD_ADDR_VAR 0 6
56002: PUSH
56003: LD_VAR 0 7
56007: PUSH
56008: LD_VAR 0 9
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: ST_TO_ADDR
56020: GO 56164
// begin if result [ result ] [ 2 ] < tmp then
56022: LD_VAR 0 6
56026: PUSH
56027: LD_VAR 0 6
56031: ARRAY
56032: PUSH
56033: LD_INT 2
56035: ARRAY
56036: PUSH
56037: LD_VAR 0 9
56041: LESS
56042: IFFALSE 56084
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
56044: LD_ADDR_VAR 0 6
56048: PUSH
56049: LD_VAR 0 6
56053: PPUSH
56054: LD_VAR 0 6
56058: PUSH
56059: LD_INT 1
56061: PLUS
56062: PPUSH
56063: LD_VAR 0 7
56067: PUSH
56068: LD_VAR 0 9
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PPUSH
56077: CALL_OW 2
56081: ST_TO_ADDR
56082: GO 56164
// for j = 1 to result do
56084: LD_ADDR_VAR 0 8
56088: PUSH
56089: DOUBLE
56090: LD_INT 1
56092: DEC
56093: ST_TO_ADDR
56094: LD_VAR 0 6
56098: PUSH
56099: FOR_TO
56100: IFFALSE 56162
// begin if tmp < result [ j ] [ 2 ] then
56102: LD_VAR 0 9
56106: PUSH
56107: LD_VAR 0 6
56111: PUSH
56112: LD_VAR 0 8
56116: ARRAY
56117: PUSH
56118: LD_INT 2
56120: ARRAY
56121: LESS
56122: IFFALSE 56160
// begin result := Insert ( result , j , [ i , tmp ] ) ;
56124: LD_ADDR_VAR 0 6
56128: PUSH
56129: LD_VAR 0 6
56133: PPUSH
56134: LD_VAR 0 8
56138: PPUSH
56139: LD_VAR 0 7
56143: PUSH
56144: LD_VAR 0 9
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PPUSH
56153: CALL_OW 2
56157: ST_TO_ADDR
// break ;
56158: GO 56162
// end ; end ;
56160: GO 56099
56162: POP
56163: POP
// end ; end ;
56164: GO 55963
56166: POP
56167: POP
// if result and not asc then
56168: LD_VAR 0 6
56172: PUSH
56173: LD_VAR 0 4
56177: NOT
56178: AND
56179: IFFALSE 56254
// begin tmp := result ;
56181: LD_ADDR_VAR 0 9
56185: PUSH
56186: LD_VAR 0 6
56190: ST_TO_ADDR
// for i = tmp downto 1 do
56191: LD_ADDR_VAR 0 7
56195: PUSH
56196: DOUBLE
56197: LD_VAR 0 9
56201: INC
56202: ST_TO_ADDR
56203: LD_INT 1
56205: PUSH
56206: FOR_DOWNTO
56207: IFFALSE 56252
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56209: LD_ADDR_VAR 0 6
56213: PUSH
56214: LD_VAR 0 6
56218: PPUSH
56219: LD_VAR 0 9
56223: PUSH
56224: LD_VAR 0 7
56228: MINUS
56229: PUSH
56230: LD_INT 1
56232: PLUS
56233: PPUSH
56234: LD_VAR 0 9
56238: PUSH
56239: LD_VAR 0 7
56243: ARRAY
56244: PPUSH
56245: CALL_OW 1
56249: ST_TO_ADDR
56250: GO 56206
56252: POP
56253: POP
// end ; tmp := [ ] ;
56254: LD_ADDR_VAR 0 9
56258: PUSH
56259: EMPTY
56260: ST_TO_ADDR
// if mode then
56261: LD_VAR 0 5
56265: IFFALSE 56334
// begin for i = 1 to result do
56267: LD_ADDR_VAR 0 7
56271: PUSH
56272: DOUBLE
56273: LD_INT 1
56275: DEC
56276: ST_TO_ADDR
56277: LD_VAR 0 6
56281: PUSH
56282: FOR_TO
56283: IFFALSE 56322
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56285: LD_ADDR_VAR 0 9
56289: PUSH
56290: LD_VAR 0 9
56294: PPUSH
56295: LD_VAR 0 7
56299: PPUSH
56300: LD_VAR 0 6
56304: PUSH
56305: LD_VAR 0 7
56309: ARRAY
56310: PUSH
56311: LD_INT 1
56313: ARRAY
56314: PPUSH
56315: CALL_OW 1
56319: ST_TO_ADDR
56320: GO 56282
56322: POP
56323: POP
// result := tmp ;
56324: LD_ADDR_VAR 0 6
56328: PUSH
56329: LD_VAR 0 9
56333: ST_TO_ADDR
// end ; end ;
56334: LD_VAR 0 6
56338: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56339: LD_INT 0
56341: PPUSH
56342: PPUSH
56343: PPUSH
56344: PPUSH
56345: PPUSH
56346: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56347: LD_ADDR_VAR 0 5
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: ST_TO_ADDR
// if not x or not y then
56369: LD_VAR 0 2
56373: NOT
56374: PUSH
56375: LD_VAR 0 3
56379: NOT
56380: OR
56381: IFFALSE 56385
// exit ;
56383: GO 58035
// if not range then
56385: LD_VAR 0 4
56389: NOT
56390: IFFALSE 56400
// range := 10 ;
56392: LD_ADDR_VAR 0 4
56396: PUSH
56397: LD_INT 10
56399: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56400: LD_ADDR_VAR 0 8
56404: PUSH
56405: LD_INT 81
56407: PUSH
56408: LD_VAR 0 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 92
56419: PUSH
56420: LD_VAR 0 2
56424: PUSH
56425: LD_VAR 0 3
56429: PUSH
56430: LD_VAR 0 4
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: LD_INT 21
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: PPUSH
56463: CALL_OW 69
56467: ST_TO_ADDR
// if not tmp then
56468: LD_VAR 0 8
56472: NOT
56473: IFFALSE 56477
// exit ;
56475: GO 58035
// for i in tmp do
56477: LD_ADDR_VAR 0 6
56481: PUSH
56482: LD_VAR 0 8
56486: PUSH
56487: FOR_IN
56488: IFFALSE 58010
// begin points := [ 0 , 0 , 0 ] ;
56490: LD_ADDR_VAR 0 9
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: ST_TO_ADDR
// bpoints := 1 ;
56509: LD_ADDR_VAR 0 10
56513: PUSH
56514: LD_INT 1
56516: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56517: LD_VAR 0 6
56521: PPUSH
56522: CALL_OW 247
56526: PUSH
56527: LD_INT 1
56529: DOUBLE
56530: EQUAL
56531: IFTRUE 56535
56533: GO 57113
56535: POP
// begin if GetClass ( i ) = 1 then
56536: LD_VAR 0 6
56540: PPUSH
56541: CALL_OW 257
56545: PUSH
56546: LD_INT 1
56548: EQUAL
56549: IFFALSE 56570
// points := [ 10 , 5 , 3 ] ;
56551: LD_ADDR_VAR 0 9
56555: PUSH
56556: LD_INT 10
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56570: LD_VAR 0 6
56574: PPUSH
56575: CALL_OW 257
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: LD_INT 4
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: IN
56594: IFFALSE 56615
// points := [ 3 , 2 , 1 ] ;
56596: LD_ADDR_VAR 0 9
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56615: LD_VAR 0 6
56619: PPUSH
56620: CALL_OW 257
56624: PUSH
56625: LD_INT 5
56627: EQUAL
56628: IFFALSE 56649
// points := [ 130 , 5 , 2 ] ;
56630: LD_ADDR_VAR 0 9
56634: PUSH
56635: LD_INT 130
56637: PUSH
56638: LD_INT 5
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: LIST
56648: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56649: LD_VAR 0 6
56653: PPUSH
56654: CALL_OW 257
56658: PUSH
56659: LD_INT 8
56661: EQUAL
56662: IFFALSE 56683
// points := [ 35 , 35 , 30 ] ;
56664: LD_ADDR_VAR 0 9
56668: PUSH
56669: LD_INT 35
56671: PUSH
56672: LD_INT 35
56674: PUSH
56675: LD_INT 30
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56683: LD_VAR 0 6
56687: PPUSH
56688: CALL_OW 257
56692: PUSH
56693: LD_INT 9
56695: EQUAL
56696: IFFALSE 56717
// points := [ 20 , 55 , 40 ] ;
56698: LD_ADDR_VAR 0 9
56702: PUSH
56703: LD_INT 20
56705: PUSH
56706: LD_INT 55
56708: PUSH
56709: LD_INT 40
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56717: LD_VAR 0 6
56721: PPUSH
56722: CALL_OW 257
56726: PUSH
56727: LD_INT 12
56729: PUSH
56730: LD_INT 16
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: IN
56737: IFFALSE 56758
// points := [ 5 , 3 , 2 ] ;
56739: LD_ADDR_VAR 0 9
56743: PUSH
56744: LD_INT 5
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56758: LD_VAR 0 6
56762: PPUSH
56763: CALL_OW 257
56767: PUSH
56768: LD_INT 17
56770: EQUAL
56771: IFFALSE 56792
// points := [ 100 , 50 , 75 ] ;
56773: LD_ADDR_VAR 0 9
56777: PUSH
56778: LD_INT 100
56780: PUSH
56781: LD_INT 50
56783: PUSH
56784: LD_INT 75
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56792: LD_VAR 0 6
56796: PPUSH
56797: CALL_OW 257
56801: PUSH
56802: LD_INT 15
56804: EQUAL
56805: IFFALSE 56826
// points := [ 10 , 5 , 3 ] ;
56807: LD_ADDR_VAR 0 9
56811: PUSH
56812: LD_INT 10
56814: PUSH
56815: LD_INT 5
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56826: LD_VAR 0 6
56830: PPUSH
56831: CALL_OW 257
56835: PUSH
56836: LD_INT 14
56838: EQUAL
56839: IFFALSE 56860
// points := [ 10 , 0 , 0 ] ;
56841: LD_ADDR_VAR 0 9
56845: PUSH
56846: LD_INT 10
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56860: LD_VAR 0 6
56864: PPUSH
56865: CALL_OW 257
56869: PUSH
56870: LD_INT 11
56872: EQUAL
56873: IFFALSE 56894
// points := [ 30 , 10 , 5 ] ;
56875: LD_ADDR_VAR 0 9
56879: PUSH
56880: LD_INT 30
56882: PUSH
56883: LD_INT 10
56885: PUSH
56886: LD_INT 5
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56894: LD_VAR 0 1
56898: PPUSH
56899: LD_INT 5
56901: PPUSH
56902: CALL_OW 321
56906: PUSH
56907: LD_INT 2
56909: EQUAL
56910: IFFALSE 56927
// bpoints := bpoints * 1.8 ;
56912: LD_ADDR_VAR 0 10
56916: PUSH
56917: LD_VAR 0 10
56921: PUSH
56922: LD_REAL  1.80000000000000E+0000
56925: MUL
56926: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56927: LD_VAR 0 6
56931: PPUSH
56932: CALL_OW 257
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 4
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: IN
56955: PUSH
56956: LD_VAR 0 1
56960: PPUSH
56961: LD_INT 51
56963: PPUSH
56964: CALL_OW 321
56968: PUSH
56969: LD_INT 2
56971: EQUAL
56972: AND
56973: IFFALSE 56990
// bpoints := bpoints * 1.2 ;
56975: LD_ADDR_VAR 0 10
56979: PUSH
56980: LD_VAR 0 10
56984: PUSH
56985: LD_REAL  1.20000000000000E+0000
56988: MUL
56989: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56990: LD_VAR 0 6
56994: PPUSH
56995: CALL_OW 257
56999: PUSH
57000: LD_INT 5
57002: PUSH
57003: LD_INT 7
57005: PUSH
57006: LD_INT 9
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: IN
57014: PUSH
57015: LD_VAR 0 1
57019: PPUSH
57020: LD_INT 52
57022: PPUSH
57023: CALL_OW 321
57027: PUSH
57028: LD_INT 2
57030: EQUAL
57031: AND
57032: IFFALSE 57049
// bpoints := bpoints * 1.5 ;
57034: LD_ADDR_VAR 0 10
57038: PUSH
57039: LD_VAR 0 10
57043: PUSH
57044: LD_REAL  1.50000000000000E+0000
57047: MUL
57048: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
57049: LD_VAR 0 1
57053: PPUSH
57054: LD_INT 66
57056: PPUSH
57057: CALL_OW 321
57061: PUSH
57062: LD_INT 2
57064: EQUAL
57065: IFFALSE 57082
// bpoints := bpoints * 1.1 ;
57067: LD_ADDR_VAR 0 10
57071: PUSH
57072: LD_VAR 0 10
57076: PUSH
57077: LD_REAL  1.10000000000000E+0000
57080: MUL
57081: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
57082: LD_ADDR_VAR 0 10
57086: PUSH
57087: LD_VAR 0 10
57091: PUSH
57092: LD_VAR 0 6
57096: PPUSH
57097: LD_INT 1
57099: PPUSH
57100: CALL_OW 259
57104: PUSH
57105: LD_REAL  1.15000000000000E+0000
57108: MUL
57109: MUL
57110: ST_TO_ADDR
// end ; unit_vehicle :
57111: GO 57939
57113: LD_INT 2
57115: DOUBLE
57116: EQUAL
57117: IFTRUE 57121
57119: GO 57927
57121: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
57122: LD_VAR 0 6
57126: PPUSH
57127: CALL_OW 264
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 42
57137: PUSH
57138: LD_INT 24
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: IN
57146: IFFALSE 57167
// points := [ 25 , 5 , 3 ] ;
57148: LD_ADDR_VAR 0 9
57152: PUSH
57153: LD_INT 25
57155: PUSH
57156: LD_INT 5
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
57167: LD_VAR 0 6
57171: PPUSH
57172: CALL_OW 264
57176: PUSH
57177: LD_INT 4
57179: PUSH
57180: LD_INT 43
57182: PUSH
57183: LD_INT 25
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: IN
57191: IFFALSE 57212
// points := [ 40 , 15 , 5 ] ;
57193: LD_ADDR_VAR 0 9
57197: PUSH
57198: LD_INT 40
57200: PUSH
57201: LD_INT 15
57203: PUSH
57204: LD_INT 5
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57212: LD_VAR 0 6
57216: PPUSH
57217: CALL_OW 264
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 23
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: IN
57232: IFFALSE 57253
// points := [ 7 , 25 , 8 ] ;
57234: LD_ADDR_VAR 0 9
57238: PUSH
57239: LD_INT 7
57241: PUSH
57242: LD_INT 25
57244: PUSH
57245: LD_INT 8
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57253: LD_VAR 0 6
57257: PPUSH
57258: CALL_OW 264
57262: PUSH
57263: LD_INT 5
57265: PUSH
57266: LD_INT 27
57268: PUSH
57269: LD_INT 44
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: LIST
57276: IN
57277: IFFALSE 57298
// points := [ 14 , 50 , 16 ] ;
57279: LD_ADDR_VAR 0 9
57283: PUSH
57284: LD_INT 14
57286: PUSH
57287: LD_INT 50
57289: PUSH
57290: LD_INT 16
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57298: LD_VAR 0 6
57302: PPUSH
57303: CALL_OW 264
57307: PUSH
57308: LD_INT 6
57310: PUSH
57311: LD_INT 46
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: IN
57318: IFFALSE 57339
// points := [ 32 , 120 , 70 ] ;
57320: LD_ADDR_VAR 0 9
57324: PUSH
57325: LD_INT 32
57327: PUSH
57328: LD_INT 120
57330: PUSH
57331: LD_INT 70
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
57339: LD_VAR 0 6
57343: PPUSH
57344: CALL_OW 264
57348: PUSH
57349: LD_INT 7
57351: PUSH
57352: LD_INT 28
57354: PUSH
57355: LD_INT 45
57357: PUSH
57358: LD_INT 92
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: IN
57367: IFFALSE 57388
// points := [ 35 , 20 , 45 ] ;
57369: LD_ADDR_VAR 0 9
57373: PUSH
57374: LD_INT 35
57376: PUSH
57377: LD_INT 20
57379: PUSH
57380: LD_INT 45
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57388: LD_VAR 0 6
57392: PPUSH
57393: CALL_OW 264
57397: PUSH
57398: LD_INT 47
57400: PUSH
57401: EMPTY
57402: LIST
57403: IN
57404: IFFALSE 57425
// points := [ 67 , 45 , 75 ] ;
57406: LD_ADDR_VAR 0 9
57410: PUSH
57411: LD_INT 67
57413: PUSH
57414: LD_INT 45
57416: PUSH
57417: LD_INT 75
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57425: LD_VAR 0 6
57429: PPUSH
57430: CALL_OW 264
57434: PUSH
57435: LD_INT 26
57437: PUSH
57438: EMPTY
57439: LIST
57440: IN
57441: IFFALSE 57462
// points := [ 120 , 30 , 80 ] ;
57443: LD_ADDR_VAR 0 9
57447: PUSH
57448: LD_INT 120
57450: PUSH
57451: LD_INT 30
57453: PUSH
57454: LD_INT 80
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: LIST
57461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57462: LD_VAR 0 6
57466: PPUSH
57467: CALL_OW 264
57471: PUSH
57472: LD_INT 22
57474: PUSH
57475: EMPTY
57476: LIST
57477: IN
57478: IFFALSE 57499
// points := [ 40 , 1 , 1 ] ;
57480: LD_ADDR_VAR 0 9
57484: PUSH
57485: LD_INT 40
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57499: LD_VAR 0 6
57503: PPUSH
57504: CALL_OW 264
57508: PUSH
57509: LD_INT 29
57511: PUSH
57512: EMPTY
57513: LIST
57514: IN
57515: IFFALSE 57536
// points := [ 70 , 200 , 400 ] ;
57517: LD_ADDR_VAR 0 9
57521: PUSH
57522: LD_INT 70
57524: PUSH
57525: LD_INT 200
57527: PUSH
57528: LD_INT 400
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57536: LD_VAR 0 6
57540: PPUSH
57541: CALL_OW 264
57545: PUSH
57546: LD_INT 14
57548: PUSH
57549: LD_INT 53
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: IN
57556: IFFALSE 57577
// points := [ 40 , 10 , 20 ] ;
57558: LD_ADDR_VAR 0 9
57562: PUSH
57563: LD_INT 40
57565: PUSH
57566: LD_INT 10
57568: PUSH
57569: LD_INT 20
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57577: LD_VAR 0 6
57581: PPUSH
57582: CALL_OW 264
57586: PUSH
57587: LD_INT 9
57589: PUSH
57590: EMPTY
57591: LIST
57592: IN
57593: IFFALSE 57614
// points := [ 5 , 70 , 20 ] ;
57595: LD_ADDR_VAR 0 9
57599: PUSH
57600: LD_INT 5
57602: PUSH
57603: LD_INT 70
57605: PUSH
57606: LD_INT 20
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57614: LD_VAR 0 6
57618: PPUSH
57619: CALL_OW 264
57623: PUSH
57624: LD_INT 10
57626: PUSH
57627: EMPTY
57628: LIST
57629: IN
57630: IFFALSE 57651
// points := [ 35 , 110 , 70 ] ;
57632: LD_ADDR_VAR 0 9
57636: PUSH
57637: LD_INT 35
57639: PUSH
57640: LD_INT 110
57642: PUSH
57643: LD_INT 70
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57651: LD_VAR 0 6
57655: PPUSH
57656: CALL_OW 265
57660: PUSH
57661: LD_INT 25
57663: EQUAL
57664: IFFALSE 57685
// points := [ 80 , 65 , 100 ] ;
57666: LD_ADDR_VAR 0 9
57670: PUSH
57671: LD_INT 80
57673: PUSH
57674: LD_INT 65
57676: PUSH
57677: LD_INT 100
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57685: LD_VAR 0 6
57689: PPUSH
57690: CALL_OW 263
57694: PUSH
57695: LD_INT 1
57697: EQUAL
57698: IFFALSE 57733
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57700: LD_ADDR_VAR 0 10
57704: PUSH
57705: LD_VAR 0 10
57709: PUSH
57710: LD_VAR 0 6
57714: PPUSH
57715: CALL_OW 311
57719: PPUSH
57720: LD_INT 3
57722: PPUSH
57723: CALL_OW 259
57727: PUSH
57728: LD_INT 4
57730: MUL
57731: MUL
57732: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57733: LD_VAR 0 6
57737: PPUSH
57738: CALL_OW 263
57742: PUSH
57743: LD_INT 2
57745: EQUAL
57746: IFFALSE 57797
// begin j := IsControledBy ( i ) ;
57748: LD_ADDR_VAR 0 7
57752: PUSH
57753: LD_VAR 0 6
57757: PPUSH
57758: CALL_OW 312
57762: ST_TO_ADDR
// if j then
57763: LD_VAR 0 7
57767: IFFALSE 57797
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57769: LD_ADDR_VAR 0 10
57773: PUSH
57774: LD_VAR 0 10
57778: PUSH
57779: LD_VAR 0 7
57783: PPUSH
57784: LD_INT 3
57786: PPUSH
57787: CALL_OW 259
57791: PUSH
57792: LD_INT 3
57794: MUL
57795: MUL
57796: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57797: LD_VAR 0 6
57801: PPUSH
57802: CALL_OW 264
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: LD_INT 6
57812: PUSH
57813: LD_INT 46
57815: PUSH
57816: LD_INT 44
57818: PUSH
57819: LD_INT 47
57821: PUSH
57822: LD_INT 45
57824: PUSH
57825: LD_INT 28
57827: PUSH
57828: LD_INT 7
57830: PUSH
57831: LD_INT 27
57833: PUSH
57834: LD_INT 29
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: IN
57849: PUSH
57850: LD_VAR 0 1
57854: PPUSH
57855: LD_INT 52
57857: PPUSH
57858: CALL_OW 321
57862: PUSH
57863: LD_INT 2
57865: EQUAL
57866: AND
57867: IFFALSE 57884
// bpoints := bpoints * 1.2 ;
57869: LD_ADDR_VAR 0 10
57873: PUSH
57874: LD_VAR 0 10
57878: PUSH
57879: LD_REAL  1.20000000000000E+0000
57882: MUL
57883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57884: LD_VAR 0 6
57888: PPUSH
57889: CALL_OW 264
57893: PUSH
57894: LD_INT 6
57896: PUSH
57897: LD_INT 46
57899: PUSH
57900: LD_INT 47
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: IN
57908: IFFALSE 57925
// bpoints := bpoints * 1.2 ;
57910: LD_ADDR_VAR 0 10
57914: PUSH
57915: LD_VAR 0 10
57919: PUSH
57920: LD_REAL  1.20000000000000E+0000
57923: MUL
57924: ST_TO_ADDR
// end ; unit_building :
57925: GO 57939
57927: LD_INT 3
57929: DOUBLE
57930: EQUAL
57931: IFTRUE 57935
57933: GO 57938
57935: POP
// ; end ;
57936: GO 57939
57938: POP
// for j = 1 to 3 do
57939: LD_ADDR_VAR 0 7
57943: PUSH
57944: DOUBLE
57945: LD_INT 1
57947: DEC
57948: ST_TO_ADDR
57949: LD_INT 3
57951: PUSH
57952: FOR_TO
57953: IFFALSE 58006
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57955: LD_ADDR_VAR 0 5
57959: PUSH
57960: LD_VAR 0 5
57964: PPUSH
57965: LD_VAR 0 7
57969: PPUSH
57970: LD_VAR 0 5
57974: PUSH
57975: LD_VAR 0 7
57979: ARRAY
57980: PUSH
57981: LD_VAR 0 9
57985: PUSH
57986: LD_VAR 0 7
57990: ARRAY
57991: PUSH
57992: LD_VAR 0 10
57996: MUL
57997: PLUS
57998: PPUSH
57999: CALL_OW 1
58003: ST_TO_ADDR
58004: GO 57952
58006: POP
58007: POP
// end ;
58008: GO 56487
58010: POP
58011: POP
// result := Replace ( result , 4 , tmp ) ;
58012: LD_ADDR_VAR 0 5
58016: PUSH
58017: LD_VAR 0 5
58021: PPUSH
58022: LD_INT 4
58024: PPUSH
58025: LD_VAR 0 8
58029: PPUSH
58030: CALL_OW 1
58034: ST_TO_ADDR
// end ;
58035: LD_VAR 0 5
58039: RET
// export function DangerAtRange ( unit , range ) ; begin
58040: LD_INT 0
58042: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
58043: LD_ADDR_VAR 0 3
58047: PUSH
58048: LD_VAR 0 1
58052: PPUSH
58053: CALL_OW 255
58057: PPUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 250
58067: PPUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: CALL_OW 251
58077: PPUSH
58078: LD_VAR 0 2
58082: PPUSH
58083: CALL 56339 0 4
58087: ST_TO_ADDR
// end ;
58088: LD_VAR 0 3
58092: RET
// export function DangerInArea ( side , area ) ; begin
58093: LD_INT 0
58095: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
58096: LD_ADDR_VAR 0 3
58100: PUSH
58101: LD_VAR 0 2
58105: PPUSH
58106: LD_INT 81
58108: PUSH
58109: LD_VAR 0 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PPUSH
58118: CALL_OW 70
58122: ST_TO_ADDR
// end ;
58123: LD_VAR 0 3
58127: RET
// export function IsExtension ( b ) ; begin
58128: LD_INT 0
58130: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
58131: LD_ADDR_VAR 0 2
58135: PUSH
58136: LD_VAR 0 1
58140: PUSH
58141: LD_INT 23
58143: PUSH
58144: LD_INT 20
58146: PUSH
58147: LD_INT 22
58149: PUSH
58150: LD_INT 17
58152: PUSH
58153: LD_INT 24
58155: PUSH
58156: LD_INT 21
58158: PUSH
58159: LD_INT 19
58161: PUSH
58162: LD_INT 16
58164: PUSH
58165: LD_INT 25
58167: PUSH
58168: LD_INT 18
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: IN
58183: ST_TO_ADDR
// end ;
58184: LD_VAR 0 2
58188: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
58189: LD_INT 0
58191: PPUSH
58192: PPUSH
58193: PPUSH
// result := [ ] ;
58194: LD_ADDR_VAR 0 4
58198: PUSH
58199: EMPTY
58200: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58201: LD_ADDR_VAR 0 5
58205: PUSH
58206: LD_VAR 0 2
58210: PPUSH
58211: LD_INT 21
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PPUSH
58221: CALL_OW 70
58225: ST_TO_ADDR
// if not tmp then
58226: LD_VAR 0 5
58230: NOT
58231: IFFALSE 58235
// exit ;
58233: GO 58299
// if checkLink then
58235: LD_VAR 0 3
58239: IFFALSE 58289
// begin for i in tmp do
58241: LD_ADDR_VAR 0 6
58245: PUSH
58246: LD_VAR 0 5
58250: PUSH
58251: FOR_IN
58252: IFFALSE 58287
// if GetBase ( i ) <> base then
58254: LD_VAR 0 6
58258: PPUSH
58259: CALL_OW 274
58263: PUSH
58264: LD_VAR 0 1
58268: NONEQUAL
58269: IFFALSE 58285
// ComLinkToBase ( base , i ) ;
58271: LD_VAR 0 1
58275: PPUSH
58276: LD_VAR 0 6
58280: PPUSH
58281: CALL_OW 169
58285: GO 58251
58287: POP
58288: POP
// end ; result := tmp ;
58289: LD_ADDR_VAR 0 4
58293: PUSH
58294: LD_VAR 0 5
58298: ST_TO_ADDR
// end ;
58299: LD_VAR 0 4
58303: RET
// export function ComComplete ( units , b ) ; var i ; begin
58304: LD_INT 0
58306: PPUSH
58307: PPUSH
// if not units then
58308: LD_VAR 0 1
58312: NOT
58313: IFFALSE 58317
// exit ;
58315: GO 58407
// for i in units do
58317: LD_ADDR_VAR 0 4
58321: PUSH
58322: LD_VAR 0 1
58326: PUSH
58327: FOR_IN
58328: IFFALSE 58405
// if BuildingStatus ( b ) = bs_build then
58330: LD_VAR 0 2
58334: PPUSH
58335: CALL_OW 461
58339: PUSH
58340: LD_INT 1
58342: EQUAL
58343: IFFALSE 58403
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58345: LD_VAR 0 4
58349: PPUSH
58350: LD_STRING h
58352: PUSH
58353: LD_VAR 0 2
58357: PPUSH
58358: CALL_OW 250
58362: PUSH
58363: LD_VAR 0 2
58367: PPUSH
58368: CALL_OW 251
58372: PUSH
58373: LD_VAR 0 2
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: PUSH
58396: EMPTY
58397: LIST
58398: PPUSH
58399: CALL_OW 446
58403: GO 58327
58405: POP
58406: POP
// end ;
58407: LD_VAR 0 3
58411: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58412: LD_INT 0
58414: PPUSH
58415: PPUSH
58416: PPUSH
58417: PPUSH
58418: PPUSH
58419: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58420: LD_VAR 0 1
58424: NOT
58425: PUSH
58426: LD_VAR 0 1
58430: PPUSH
58431: CALL_OW 263
58435: PUSH
58436: LD_INT 2
58438: NONEQUAL
58439: OR
58440: IFFALSE 58444
// exit ;
58442: GO 58760
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58444: LD_ADDR_VAR 0 6
58448: PUSH
58449: LD_INT 22
58451: PUSH
58452: LD_VAR 0 1
58456: PPUSH
58457: CALL_OW 255
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: LD_INT 30
58471: PUSH
58472: LD_INT 36
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 34
58481: PUSH
58482: LD_INT 31
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: LIST
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PPUSH
58498: CALL_OW 69
58502: ST_TO_ADDR
// if not tmp then
58503: LD_VAR 0 6
58507: NOT
58508: IFFALSE 58512
// exit ;
58510: GO 58760
// result := [ ] ;
58512: LD_ADDR_VAR 0 2
58516: PUSH
58517: EMPTY
58518: ST_TO_ADDR
// for i in tmp do
58519: LD_ADDR_VAR 0 3
58523: PUSH
58524: LD_VAR 0 6
58528: PUSH
58529: FOR_IN
58530: IFFALSE 58601
// begin t := UnitsInside ( i ) ;
58532: LD_ADDR_VAR 0 4
58536: PUSH
58537: LD_VAR 0 3
58541: PPUSH
58542: CALL_OW 313
58546: ST_TO_ADDR
// if t then
58547: LD_VAR 0 4
58551: IFFALSE 58599
// for j in t do
58553: LD_ADDR_VAR 0 7
58557: PUSH
58558: LD_VAR 0 4
58562: PUSH
58563: FOR_IN
58564: IFFALSE 58597
// result := Replace ( result , result + 1 , j ) ;
58566: LD_ADDR_VAR 0 2
58570: PUSH
58571: LD_VAR 0 2
58575: PPUSH
58576: LD_VAR 0 2
58580: PUSH
58581: LD_INT 1
58583: PLUS
58584: PPUSH
58585: LD_VAR 0 7
58589: PPUSH
58590: CALL_OW 1
58594: ST_TO_ADDR
58595: GO 58563
58597: POP
58598: POP
// end ;
58599: GO 58529
58601: POP
58602: POP
// if not result then
58603: LD_VAR 0 2
58607: NOT
58608: IFFALSE 58612
// exit ;
58610: GO 58760
// mech := result [ 1 ] ;
58612: LD_ADDR_VAR 0 5
58616: PUSH
58617: LD_VAR 0 2
58621: PUSH
58622: LD_INT 1
58624: ARRAY
58625: ST_TO_ADDR
// if result > 1 then
58626: LD_VAR 0 2
58630: PUSH
58631: LD_INT 1
58633: GREATER
58634: IFFALSE 58746
// begin for i = 2 to result do
58636: LD_ADDR_VAR 0 3
58640: PUSH
58641: DOUBLE
58642: LD_INT 2
58644: DEC
58645: ST_TO_ADDR
58646: LD_VAR 0 2
58650: PUSH
58651: FOR_TO
58652: IFFALSE 58744
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58654: LD_ADDR_VAR 0 4
58658: PUSH
58659: LD_VAR 0 2
58663: PUSH
58664: LD_VAR 0 3
58668: ARRAY
58669: PPUSH
58670: LD_INT 3
58672: PPUSH
58673: CALL_OW 259
58677: PUSH
58678: LD_VAR 0 2
58682: PUSH
58683: LD_VAR 0 3
58687: ARRAY
58688: PPUSH
58689: CALL_OW 432
58693: MINUS
58694: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58695: LD_VAR 0 4
58699: PUSH
58700: LD_VAR 0 5
58704: PPUSH
58705: LD_INT 3
58707: PPUSH
58708: CALL_OW 259
58712: PUSH
58713: LD_VAR 0 5
58717: PPUSH
58718: CALL_OW 432
58722: MINUS
58723: GREATEREQUAL
58724: IFFALSE 58742
// mech := result [ i ] ;
58726: LD_ADDR_VAR 0 5
58730: PUSH
58731: LD_VAR 0 2
58735: PUSH
58736: LD_VAR 0 3
58740: ARRAY
58741: ST_TO_ADDR
// end ;
58742: GO 58651
58744: POP
58745: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58746: LD_VAR 0 1
58750: PPUSH
58751: LD_VAR 0 5
58755: PPUSH
58756: CALL_OW 135
// end ;
58760: LD_VAR 0 2
58764: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58765: LD_INT 0
58767: PPUSH
58768: PPUSH
58769: PPUSH
58770: PPUSH
58771: PPUSH
58772: PPUSH
58773: PPUSH
58774: PPUSH
58775: PPUSH
58776: PPUSH
58777: PPUSH
58778: PPUSH
58779: PPUSH
// result := [ ] ;
58780: LD_ADDR_VAR 0 7
58784: PUSH
58785: EMPTY
58786: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58787: LD_VAR 0 1
58791: PPUSH
58792: CALL_OW 266
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: IN
58807: NOT
58808: IFFALSE 58812
// exit ;
58810: GO 60446
// if name then
58812: LD_VAR 0 3
58816: IFFALSE 58832
// SetBName ( base_dep , name ) ;
58818: LD_VAR 0 1
58822: PPUSH
58823: LD_VAR 0 3
58827: PPUSH
58828: CALL_OW 500
// base := GetBase ( base_dep ) ;
58832: LD_ADDR_VAR 0 15
58836: PUSH
58837: LD_VAR 0 1
58841: PPUSH
58842: CALL_OW 274
58846: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58847: LD_ADDR_VAR 0 16
58851: PUSH
58852: LD_VAR 0 1
58856: PPUSH
58857: CALL_OW 255
58861: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58862: LD_ADDR_VAR 0 17
58866: PUSH
58867: LD_VAR 0 1
58871: PPUSH
58872: CALL_OW 248
58876: ST_TO_ADDR
// if sources then
58877: LD_VAR 0 5
58881: IFFALSE 58928
// for i = 1 to 3 do
58883: LD_ADDR_VAR 0 8
58887: PUSH
58888: DOUBLE
58889: LD_INT 1
58891: DEC
58892: ST_TO_ADDR
58893: LD_INT 3
58895: PUSH
58896: FOR_TO
58897: IFFALSE 58926
// AddResourceType ( base , i , sources [ i ] ) ;
58899: LD_VAR 0 15
58903: PPUSH
58904: LD_VAR 0 8
58908: PPUSH
58909: LD_VAR 0 5
58913: PUSH
58914: LD_VAR 0 8
58918: ARRAY
58919: PPUSH
58920: CALL_OW 276
58924: GO 58896
58926: POP
58927: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58928: LD_ADDR_VAR 0 18
58932: PUSH
58933: LD_VAR 0 15
58937: PPUSH
58938: LD_VAR 0 2
58942: PPUSH
58943: LD_INT 1
58945: PPUSH
58946: CALL 58189 0 3
58950: ST_TO_ADDR
// InitHc ;
58951: CALL_OW 19
// InitUc ;
58955: CALL_OW 18
// uc_side := side ;
58959: LD_ADDR_OWVAR 20
58963: PUSH
58964: LD_VAR 0 16
58968: ST_TO_ADDR
// uc_nation := nation ;
58969: LD_ADDR_OWVAR 21
58973: PUSH
58974: LD_VAR 0 17
58978: ST_TO_ADDR
// if buildings then
58979: LD_VAR 0 18
58983: IFFALSE 60305
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58985: LD_ADDR_VAR 0 19
58989: PUSH
58990: LD_VAR 0 18
58994: PPUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 30
59000: PUSH
59001: LD_INT 29
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 30
59010: PUSH
59011: LD_INT 30
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: PPUSH
59023: CALL_OW 72
59027: ST_TO_ADDR
// if tmp then
59028: LD_VAR 0 19
59032: IFFALSE 59080
// for i in tmp do
59034: LD_ADDR_VAR 0 8
59038: PUSH
59039: LD_VAR 0 19
59043: PUSH
59044: FOR_IN
59045: IFFALSE 59078
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
59047: LD_VAR 0 8
59051: PPUSH
59052: CALL_OW 250
59056: PPUSH
59057: LD_VAR 0 8
59061: PPUSH
59062: CALL_OW 251
59066: PPUSH
59067: LD_VAR 0 16
59071: PPUSH
59072: CALL_OW 441
59076: GO 59044
59078: POP
59079: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
59080: LD_VAR 0 18
59084: PPUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 30
59090: PUSH
59091: LD_INT 32
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 30
59100: PUSH
59101: LD_INT 33
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: PPUSH
59113: CALL_OW 72
59117: IFFALSE 59205
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
59119: LD_ADDR_VAR 0 8
59123: PUSH
59124: LD_VAR 0 18
59128: PPUSH
59129: LD_INT 2
59131: PUSH
59132: LD_INT 30
59134: PUSH
59135: LD_INT 32
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 30
59144: PUSH
59145: LD_INT 33
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: PPUSH
59157: CALL_OW 72
59161: PUSH
59162: FOR_IN
59163: IFFALSE 59203
// begin if not GetBWeapon ( i ) then
59165: LD_VAR 0 8
59169: PPUSH
59170: CALL_OW 269
59174: NOT
59175: IFFALSE 59201
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
59177: LD_VAR 0 8
59181: PPUSH
59182: LD_VAR 0 8
59186: PPUSH
59187: LD_VAR 0 2
59191: PPUSH
59192: CALL 60451 0 2
59196: PPUSH
59197: CALL_OW 431
// end ;
59201: GO 59162
59203: POP
59204: POP
// end ; for i = 1 to personel do
59205: LD_ADDR_VAR 0 8
59209: PUSH
59210: DOUBLE
59211: LD_INT 1
59213: DEC
59214: ST_TO_ADDR
59215: LD_VAR 0 6
59219: PUSH
59220: FOR_TO
59221: IFFALSE 60285
// begin if i > 4 then
59223: LD_VAR 0 8
59227: PUSH
59228: LD_INT 4
59230: GREATER
59231: IFFALSE 59235
// break ;
59233: GO 60285
// case i of 1 :
59235: LD_VAR 0 8
59239: PUSH
59240: LD_INT 1
59242: DOUBLE
59243: EQUAL
59244: IFTRUE 59248
59246: GO 59328
59248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59249: LD_ADDR_VAR 0 12
59253: PUSH
59254: LD_VAR 0 18
59258: PPUSH
59259: LD_INT 22
59261: PUSH
59262: LD_VAR 0 16
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 58
59273: PUSH
59274: EMPTY
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 30
59282: PUSH
59283: LD_INT 32
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 30
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 30
59302: PUSH
59303: LD_INT 5
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: PPUSH
59321: CALL_OW 72
59325: ST_TO_ADDR
59326: GO 59550
59328: LD_INT 2
59330: DOUBLE
59331: EQUAL
59332: IFTRUE 59336
59334: GO 59398
59336: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59337: LD_ADDR_VAR 0 12
59341: PUSH
59342: LD_VAR 0 18
59346: PPUSH
59347: LD_INT 22
59349: PUSH
59350: LD_VAR 0 16
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: LD_INT 30
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 30
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PPUSH
59391: CALL_OW 72
59395: ST_TO_ADDR
59396: GO 59550
59398: LD_INT 3
59400: DOUBLE
59401: EQUAL
59402: IFTRUE 59406
59404: GO 59468
59406: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59407: LD_ADDR_VAR 0 12
59411: PUSH
59412: LD_VAR 0 18
59416: PPUSH
59417: LD_INT 22
59419: PUSH
59420: LD_VAR 0 16
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 30
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 30
59444: PUSH
59445: LD_INT 3
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PPUSH
59461: CALL_OW 72
59465: ST_TO_ADDR
59466: GO 59550
59468: LD_INT 4
59470: DOUBLE
59471: EQUAL
59472: IFTRUE 59476
59474: GO 59549
59476: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59477: LD_ADDR_VAR 0 12
59481: PUSH
59482: LD_VAR 0 18
59486: PPUSH
59487: LD_INT 22
59489: PUSH
59490: LD_VAR 0 16
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 30
59504: PUSH
59505: LD_INT 6
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 30
59514: PUSH
59515: LD_INT 7
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 30
59524: PUSH
59525: LD_INT 8
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PPUSH
59542: CALL_OW 72
59546: ST_TO_ADDR
59547: GO 59550
59549: POP
// if i = 1 then
59550: LD_VAR 0 8
59554: PUSH
59555: LD_INT 1
59557: EQUAL
59558: IFFALSE 59669
// begin tmp := [ ] ;
59560: LD_ADDR_VAR 0 19
59564: PUSH
59565: EMPTY
59566: ST_TO_ADDR
// for j in f do
59567: LD_ADDR_VAR 0 9
59571: PUSH
59572: LD_VAR 0 12
59576: PUSH
59577: FOR_IN
59578: IFFALSE 59651
// if GetBType ( j ) = b_bunker then
59580: LD_VAR 0 9
59584: PPUSH
59585: CALL_OW 266
59589: PUSH
59590: LD_INT 32
59592: EQUAL
59593: IFFALSE 59620
// tmp := Insert ( tmp , 1 , j ) else
59595: LD_ADDR_VAR 0 19
59599: PUSH
59600: LD_VAR 0 19
59604: PPUSH
59605: LD_INT 1
59607: PPUSH
59608: LD_VAR 0 9
59612: PPUSH
59613: CALL_OW 2
59617: ST_TO_ADDR
59618: GO 59649
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59620: LD_ADDR_VAR 0 19
59624: PUSH
59625: LD_VAR 0 19
59629: PPUSH
59630: LD_VAR 0 19
59634: PUSH
59635: LD_INT 1
59637: PLUS
59638: PPUSH
59639: LD_VAR 0 9
59643: PPUSH
59644: CALL_OW 2
59648: ST_TO_ADDR
59649: GO 59577
59651: POP
59652: POP
// if tmp then
59653: LD_VAR 0 19
59657: IFFALSE 59669
// f := tmp ;
59659: LD_ADDR_VAR 0 12
59663: PUSH
59664: LD_VAR 0 19
59668: ST_TO_ADDR
// end ; x := personel [ i ] ;
59669: LD_ADDR_VAR 0 13
59673: PUSH
59674: LD_VAR 0 6
59678: PUSH
59679: LD_VAR 0 8
59683: ARRAY
59684: ST_TO_ADDR
// if x = - 1 then
59685: LD_VAR 0 13
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: EQUAL
59694: IFFALSE 59903
// begin for j in f do
59696: LD_ADDR_VAR 0 9
59700: PUSH
59701: LD_VAR 0 12
59705: PUSH
59706: FOR_IN
59707: IFFALSE 59899
// repeat InitHc ;
59709: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59713: LD_VAR 0 9
59717: PPUSH
59718: CALL_OW 266
59722: PUSH
59723: LD_INT 5
59725: EQUAL
59726: IFFALSE 59796
// begin if UnitsInside ( j ) < 3 then
59728: LD_VAR 0 9
59732: PPUSH
59733: CALL_OW 313
59737: PUSH
59738: LD_INT 3
59740: LESS
59741: IFFALSE 59777
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59743: LD_INT 0
59745: PPUSH
59746: LD_INT 5
59748: PUSH
59749: LD_INT 8
59751: PUSH
59752: LD_INT 9
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: PUSH
59760: LD_VAR 0 17
59764: ARRAY
59765: PPUSH
59766: LD_VAR 0 4
59770: PPUSH
59771: CALL_OW 380
59775: GO 59794
// PrepareHuman ( false , i , skill ) ;
59777: LD_INT 0
59779: PPUSH
59780: LD_VAR 0 8
59784: PPUSH
59785: LD_VAR 0 4
59789: PPUSH
59790: CALL_OW 380
// end else
59794: GO 59813
// PrepareHuman ( false , i , skill ) ;
59796: LD_INT 0
59798: PPUSH
59799: LD_VAR 0 8
59803: PPUSH
59804: LD_VAR 0 4
59808: PPUSH
59809: CALL_OW 380
// un := CreateHuman ;
59813: LD_ADDR_VAR 0 14
59817: PUSH
59818: CALL_OW 44
59822: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59823: LD_ADDR_VAR 0 7
59827: PUSH
59828: LD_VAR 0 7
59832: PPUSH
59833: LD_INT 1
59835: PPUSH
59836: LD_VAR 0 14
59840: PPUSH
59841: CALL_OW 2
59845: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59846: LD_VAR 0 14
59850: PPUSH
59851: LD_VAR 0 9
59855: PPUSH
59856: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59860: LD_VAR 0 9
59864: PPUSH
59865: CALL_OW 313
59869: PUSH
59870: LD_INT 6
59872: EQUAL
59873: PUSH
59874: LD_VAR 0 9
59878: PPUSH
59879: CALL_OW 266
59883: PUSH
59884: LD_INT 32
59886: PUSH
59887: LD_INT 31
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: IN
59894: OR
59895: IFFALSE 59709
59897: GO 59706
59899: POP
59900: POP
// end else
59901: GO 60283
// for j = 1 to x do
59903: LD_ADDR_VAR 0 9
59907: PUSH
59908: DOUBLE
59909: LD_INT 1
59911: DEC
59912: ST_TO_ADDR
59913: LD_VAR 0 13
59917: PUSH
59918: FOR_TO
59919: IFFALSE 60281
// begin InitHc ;
59921: CALL_OW 19
// if not f then
59925: LD_VAR 0 12
59929: NOT
59930: IFFALSE 60019
// begin PrepareHuman ( false , i , skill ) ;
59932: LD_INT 0
59934: PPUSH
59935: LD_VAR 0 8
59939: PPUSH
59940: LD_VAR 0 4
59944: PPUSH
59945: CALL_OW 380
// un := CreateHuman ;
59949: LD_ADDR_VAR 0 14
59953: PUSH
59954: CALL_OW 44
59958: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59959: LD_ADDR_VAR 0 7
59963: PUSH
59964: LD_VAR 0 7
59968: PPUSH
59969: LD_INT 1
59971: PPUSH
59972: LD_VAR 0 14
59976: PPUSH
59977: CALL_OW 2
59981: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59982: LD_VAR 0 14
59986: PPUSH
59987: LD_VAR 0 1
59991: PPUSH
59992: CALL_OW 250
59996: PPUSH
59997: LD_VAR 0 1
60001: PPUSH
60002: CALL_OW 251
60006: PPUSH
60007: LD_INT 10
60009: PPUSH
60010: LD_INT 0
60012: PPUSH
60013: CALL_OW 50
// continue ;
60017: GO 59918
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
60019: LD_VAR 0 12
60023: PUSH
60024: LD_INT 1
60026: ARRAY
60027: PPUSH
60028: CALL_OW 313
60032: PUSH
60033: LD_VAR 0 12
60037: PUSH
60038: LD_INT 1
60040: ARRAY
60041: PPUSH
60042: CALL_OW 266
60046: PUSH
60047: LD_INT 32
60049: PUSH
60050: LD_INT 31
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: IN
60057: AND
60058: PUSH
60059: LD_VAR 0 12
60063: PUSH
60064: LD_INT 1
60066: ARRAY
60067: PPUSH
60068: CALL_OW 313
60072: PUSH
60073: LD_INT 6
60075: EQUAL
60076: OR
60077: IFFALSE 60097
// f := Delete ( f , 1 ) ;
60079: LD_ADDR_VAR 0 12
60083: PUSH
60084: LD_VAR 0 12
60088: PPUSH
60089: LD_INT 1
60091: PPUSH
60092: CALL_OW 3
60096: ST_TO_ADDR
// if not f then
60097: LD_VAR 0 12
60101: NOT
60102: IFFALSE 60120
// begin x := x + 2 ;
60104: LD_ADDR_VAR 0 13
60108: PUSH
60109: LD_VAR 0 13
60113: PUSH
60114: LD_INT 2
60116: PLUS
60117: ST_TO_ADDR
// continue ;
60118: GO 59918
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
60120: LD_VAR 0 12
60124: PUSH
60125: LD_INT 1
60127: ARRAY
60128: PPUSH
60129: CALL_OW 266
60133: PUSH
60134: LD_INT 5
60136: EQUAL
60137: IFFALSE 60211
// begin if UnitsInside ( f [ 1 ] ) < 3 then
60139: LD_VAR 0 12
60143: PUSH
60144: LD_INT 1
60146: ARRAY
60147: PPUSH
60148: CALL_OW 313
60152: PUSH
60153: LD_INT 3
60155: LESS
60156: IFFALSE 60192
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
60158: LD_INT 0
60160: PPUSH
60161: LD_INT 5
60163: PUSH
60164: LD_INT 8
60166: PUSH
60167: LD_INT 9
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: LIST
60174: PUSH
60175: LD_VAR 0 17
60179: ARRAY
60180: PPUSH
60181: LD_VAR 0 4
60185: PPUSH
60186: CALL_OW 380
60190: GO 60209
// PrepareHuman ( false , i , skill ) ;
60192: LD_INT 0
60194: PPUSH
60195: LD_VAR 0 8
60199: PPUSH
60200: LD_VAR 0 4
60204: PPUSH
60205: CALL_OW 380
// end else
60209: GO 60228
// PrepareHuman ( false , i , skill ) ;
60211: LD_INT 0
60213: PPUSH
60214: LD_VAR 0 8
60218: PPUSH
60219: LD_VAR 0 4
60223: PPUSH
60224: CALL_OW 380
// un := CreateHuman ;
60228: LD_ADDR_VAR 0 14
60232: PUSH
60233: CALL_OW 44
60237: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60238: LD_ADDR_VAR 0 7
60242: PUSH
60243: LD_VAR 0 7
60247: PPUSH
60248: LD_INT 1
60250: PPUSH
60251: LD_VAR 0 14
60255: PPUSH
60256: CALL_OW 2
60260: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60261: LD_VAR 0 14
60265: PPUSH
60266: LD_VAR 0 12
60270: PUSH
60271: LD_INT 1
60273: ARRAY
60274: PPUSH
60275: CALL_OW 52
// end ;
60279: GO 59918
60281: POP
60282: POP
// end ;
60283: GO 59220
60285: POP
60286: POP
// result := result ^ buildings ;
60287: LD_ADDR_VAR 0 7
60291: PUSH
60292: LD_VAR 0 7
60296: PUSH
60297: LD_VAR 0 18
60301: ADD
60302: ST_TO_ADDR
// end else
60303: GO 60446
// begin for i = 1 to personel do
60305: LD_ADDR_VAR 0 8
60309: PUSH
60310: DOUBLE
60311: LD_INT 1
60313: DEC
60314: ST_TO_ADDR
60315: LD_VAR 0 6
60319: PUSH
60320: FOR_TO
60321: IFFALSE 60444
// begin if i > 4 then
60323: LD_VAR 0 8
60327: PUSH
60328: LD_INT 4
60330: GREATER
60331: IFFALSE 60335
// break ;
60333: GO 60444
// x := personel [ i ] ;
60335: LD_ADDR_VAR 0 13
60339: PUSH
60340: LD_VAR 0 6
60344: PUSH
60345: LD_VAR 0 8
60349: ARRAY
60350: ST_TO_ADDR
// if x = - 1 then
60351: LD_VAR 0 13
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: EQUAL
60360: IFFALSE 60364
// continue ;
60362: GO 60320
// PrepareHuman ( false , i , skill ) ;
60364: LD_INT 0
60366: PPUSH
60367: LD_VAR 0 8
60371: PPUSH
60372: LD_VAR 0 4
60376: PPUSH
60377: CALL_OW 380
// un := CreateHuman ;
60381: LD_ADDR_VAR 0 14
60385: PUSH
60386: CALL_OW 44
60390: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60391: LD_VAR 0 14
60395: PPUSH
60396: LD_VAR 0 1
60400: PPUSH
60401: CALL_OW 250
60405: PPUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 251
60415: PPUSH
60416: LD_INT 10
60418: PPUSH
60419: LD_INT 0
60421: PPUSH
60422: CALL_OW 50
// result := result ^ un ;
60426: LD_ADDR_VAR 0 7
60430: PUSH
60431: LD_VAR 0 7
60435: PUSH
60436: LD_VAR 0 14
60440: ADD
60441: ST_TO_ADDR
// end ;
60442: GO 60320
60444: POP
60445: POP
// end ; end ;
60446: LD_VAR 0 7
60450: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60451: LD_INT 0
60453: PPUSH
60454: PPUSH
60455: PPUSH
60456: PPUSH
60457: PPUSH
60458: PPUSH
60459: PPUSH
60460: PPUSH
60461: PPUSH
60462: PPUSH
60463: PPUSH
60464: PPUSH
60465: PPUSH
60466: PPUSH
60467: PPUSH
60468: PPUSH
// result := false ;
60469: LD_ADDR_VAR 0 3
60473: PUSH
60474: LD_INT 0
60476: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60477: LD_VAR 0 1
60481: NOT
60482: PUSH
60483: LD_VAR 0 1
60487: PPUSH
60488: CALL_OW 266
60492: PUSH
60493: LD_INT 32
60495: PUSH
60496: LD_INT 33
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: IN
60503: NOT
60504: OR
60505: IFFALSE 60509
// exit ;
60507: GO 61618
// nat := GetNation ( tower ) ;
60509: LD_ADDR_VAR 0 12
60513: PUSH
60514: LD_VAR 0 1
60518: PPUSH
60519: CALL_OW 248
60523: ST_TO_ADDR
// side := GetSide ( tower ) ;
60524: LD_ADDR_VAR 0 16
60528: PUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: CALL_OW 255
60538: ST_TO_ADDR
// x := GetX ( tower ) ;
60539: LD_ADDR_VAR 0 10
60543: PUSH
60544: LD_VAR 0 1
60548: PPUSH
60549: CALL_OW 250
60553: ST_TO_ADDR
// y := GetY ( tower ) ;
60554: LD_ADDR_VAR 0 11
60558: PUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: CALL_OW 251
60568: ST_TO_ADDR
// if not x or not y then
60569: LD_VAR 0 10
60573: NOT
60574: PUSH
60575: LD_VAR 0 11
60579: NOT
60580: OR
60581: IFFALSE 60585
// exit ;
60583: GO 61618
// weapon := 0 ;
60585: LD_ADDR_VAR 0 18
60589: PUSH
60590: LD_INT 0
60592: ST_TO_ADDR
// fac_list := [ ] ;
60593: LD_ADDR_VAR 0 17
60597: PUSH
60598: EMPTY
60599: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60600: LD_ADDR_VAR 0 6
60604: PUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: CALL_OW 274
60614: PPUSH
60615: LD_VAR 0 2
60619: PPUSH
60620: LD_INT 0
60622: PPUSH
60623: CALL 58189 0 3
60627: PPUSH
60628: LD_INT 30
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PPUSH
60638: CALL_OW 72
60642: ST_TO_ADDR
// if not factories then
60643: LD_VAR 0 6
60647: NOT
60648: IFFALSE 60652
// exit ;
60650: GO 61618
// for i in factories do
60652: LD_ADDR_VAR 0 8
60656: PUSH
60657: LD_VAR 0 6
60661: PUSH
60662: FOR_IN
60663: IFFALSE 60688
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60665: LD_ADDR_VAR 0 17
60669: PUSH
60670: LD_VAR 0 17
60674: PUSH
60675: LD_VAR 0 8
60679: PPUSH
60680: CALL_OW 478
60684: UNION
60685: ST_TO_ADDR
60686: GO 60662
60688: POP
60689: POP
// if not fac_list then
60690: LD_VAR 0 17
60694: NOT
60695: IFFALSE 60699
// exit ;
60697: GO 61618
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60699: LD_ADDR_VAR 0 5
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: LD_INT 5
60709: PUSH
60710: LD_INT 9
60712: PUSH
60713: LD_INT 10
60715: PUSH
60716: LD_INT 6
60718: PUSH
60719: LD_INT 7
60721: PUSH
60722: LD_INT 11
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 27
60736: PUSH
60737: LD_INT 28
60739: PUSH
60740: LD_INT 26
60742: PUSH
60743: LD_INT 30
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 43
60754: PUSH
60755: LD_INT 44
60757: PUSH
60758: LD_INT 46
60760: PUSH
60761: LD_INT 45
60763: PUSH
60764: LD_INT 47
60766: PUSH
60767: LD_INT 49
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: PUSH
60783: LD_VAR 0 12
60787: ARRAY
60788: ST_TO_ADDR
// list := list isect fac_list ;
60789: LD_ADDR_VAR 0 5
60793: PUSH
60794: LD_VAR 0 5
60798: PUSH
60799: LD_VAR 0 17
60803: ISECT
60804: ST_TO_ADDR
// if not list then
60805: LD_VAR 0 5
60809: NOT
60810: IFFALSE 60814
// exit ;
60812: GO 61618
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60814: LD_VAR 0 12
60818: PUSH
60819: LD_INT 3
60821: EQUAL
60822: PUSH
60823: LD_INT 49
60825: PUSH
60826: LD_VAR 0 5
60830: IN
60831: AND
60832: PUSH
60833: LD_INT 31
60835: PPUSH
60836: LD_VAR 0 16
60840: PPUSH
60841: CALL_OW 321
60845: PUSH
60846: LD_INT 2
60848: EQUAL
60849: AND
60850: IFFALSE 60910
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60852: LD_INT 22
60854: PUSH
60855: LD_VAR 0 16
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 35
60866: PUSH
60867: LD_INT 49
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 91
60876: PUSH
60877: LD_VAR 0 1
60881: PUSH
60882: LD_INT 10
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: PPUSH
60895: CALL_OW 69
60899: NOT
60900: IFFALSE 60910
// weapon := ru_time_lapser ;
60902: LD_ADDR_VAR 0 18
60906: PUSH
60907: LD_INT 49
60909: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60910: LD_VAR 0 12
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: IN
60925: PUSH
60926: LD_INT 11
60928: PUSH
60929: LD_VAR 0 5
60933: IN
60934: PUSH
60935: LD_INT 30
60937: PUSH
60938: LD_VAR 0 5
60942: IN
60943: OR
60944: AND
60945: PUSH
60946: LD_INT 6
60948: PPUSH
60949: LD_VAR 0 16
60953: PPUSH
60954: CALL_OW 321
60958: PUSH
60959: LD_INT 2
60961: EQUAL
60962: AND
60963: IFFALSE 61128
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60965: LD_INT 22
60967: PUSH
60968: LD_VAR 0 16
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: LD_INT 35
60982: PUSH
60983: LD_INT 11
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 35
60992: PUSH
60993: LD_INT 30
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 91
61007: PUSH
61008: LD_VAR 0 1
61012: PUSH
61013: LD_INT 18
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: LIST
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: LIST
61025: PPUSH
61026: CALL_OW 69
61030: NOT
61031: PUSH
61032: LD_INT 22
61034: PUSH
61035: LD_VAR 0 16
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: LD_INT 30
61049: PUSH
61050: LD_INT 32
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 30
61059: PUSH
61060: LD_INT 33
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 91
61074: PUSH
61075: LD_VAR 0 1
61079: PUSH
61080: LD_INT 12
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: PUSH
61093: EMPTY
61094: LIST
61095: PPUSH
61096: CALL_OW 69
61100: PUSH
61101: LD_INT 2
61103: GREATER
61104: AND
61105: IFFALSE 61128
// weapon := [ us_radar , ar_radar ] [ nat ] ;
61107: LD_ADDR_VAR 0 18
61111: PUSH
61112: LD_INT 11
61114: PUSH
61115: LD_INT 30
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_VAR 0 12
61126: ARRAY
61127: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
61128: LD_VAR 0 18
61132: NOT
61133: PUSH
61134: LD_INT 40
61136: PPUSH
61137: LD_VAR 0 16
61141: PPUSH
61142: CALL_OW 321
61146: PUSH
61147: LD_INT 2
61149: EQUAL
61150: AND
61151: PUSH
61152: LD_INT 7
61154: PUSH
61155: LD_VAR 0 5
61159: IN
61160: PUSH
61161: LD_INT 28
61163: PUSH
61164: LD_VAR 0 5
61168: IN
61169: OR
61170: PUSH
61171: LD_INT 45
61173: PUSH
61174: LD_VAR 0 5
61178: IN
61179: OR
61180: AND
61181: IFFALSE 61435
// begin hex := GetHexInfo ( x , y ) ;
61183: LD_ADDR_VAR 0 4
61187: PUSH
61188: LD_VAR 0 10
61192: PPUSH
61193: LD_VAR 0 11
61197: PPUSH
61198: CALL_OW 546
61202: ST_TO_ADDR
// if hex [ 1 ] then
61203: LD_VAR 0 4
61207: PUSH
61208: LD_INT 1
61210: ARRAY
61211: IFFALSE 61215
// exit ;
61213: GO 61618
// height := hex [ 2 ] ;
61215: LD_ADDR_VAR 0 15
61219: PUSH
61220: LD_VAR 0 4
61224: PUSH
61225: LD_INT 2
61227: ARRAY
61228: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61229: LD_ADDR_VAR 0 14
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 2
61239: PUSH
61240: LD_INT 3
61242: PUSH
61243: LD_INT 5
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: ST_TO_ADDR
// for i in tmp do
61252: LD_ADDR_VAR 0 8
61256: PUSH
61257: LD_VAR 0 14
61261: PUSH
61262: FOR_IN
61263: IFFALSE 61433
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61265: LD_ADDR_VAR 0 9
61269: PUSH
61270: LD_VAR 0 10
61274: PPUSH
61275: LD_VAR 0 8
61279: PPUSH
61280: LD_INT 5
61282: PPUSH
61283: CALL_OW 272
61287: PUSH
61288: LD_VAR 0 11
61292: PPUSH
61293: LD_VAR 0 8
61297: PPUSH
61298: LD_INT 5
61300: PPUSH
61301: CALL_OW 273
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61310: LD_VAR 0 9
61314: PUSH
61315: LD_INT 1
61317: ARRAY
61318: PPUSH
61319: LD_VAR 0 9
61323: PUSH
61324: LD_INT 2
61326: ARRAY
61327: PPUSH
61328: CALL_OW 488
61332: IFFALSE 61431
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61334: LD_ADDR_VAR 0 4
61338: PUSH
61339: LD_VAR 0 9
61343: PUSH
61344: LD_INT 1
61346: ARRAY
61347: PPUSH
61348: LD_VAR 0 9
61352: PUSH
61353: LD_INT 2
61355: ARRAY
61356: PPUSH
61357: CALL_OW 546
61361: ST_TO_ADDR
// if hex [ 1 ] then
61362: LD_VAR 0 4
61366: PUSH
61367: LD_INT 1
61369: ARRAY
61370: IFFALSE 61374
// continue ;
61372: GO 61262
// h := hex [ 2 ] ;
61374: LD_ADDR_VAR 0 13
61378: PUSH
61379: LD_VAR 0 4
61383: PUSH
61384: LD_INT 2
61386: ARRAY
61387: ST_TO_ADDR
// if h + 7 < height then
61388: LD_VAR 0 13
61392: PUSH
61393: LD_INT 7
61395: PLUS
61396: PUSH
61397: LD_VAR 0 15
61401: LESS
61402: IFFALSE 61431
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61404: LD_ADDR_VAR 0 18
61408: PUSH
61409: LD_INT 7
61411: PUSH
61412: LD_INT 28
61414: PUSH
61415: LD_INT 45
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: PUSH
61423: LD_VAR 0 12
61427: ARRAY
61428: ST_TO_ADDR
// break ;
61429: GO 61433
// end ; end ; end ;
61431: GO 61262
61433: POP
61434: POP
// end ; if not weapon then
61435: LD_VAR 0 18
61439: NOT
61440: IFFALSE 61500
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61442: LD_ADDR_VAR 0 5
61446: PUSH
61447: LD_VAR 0 5
61451: PUSH
61452: LD_INT 11
61454: PUSH
61455: LD_INT 30
61457: PUSH
61458: LD_INT 49
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: DIFF
61466: ST_TO_ADDR
// if not list then
61467: LD_VAR 0 5
61471: NOT
61472: IFFALSE 61476
// exit ;
61474: GO 61618
// weapon := list [ rand ( 1 , list ) ] ;
61476: LD_ADDR_VAR 0 18
61480: PUSH
61481: LD_VAR 0 5
61485: PUSH
61486: LD_INT 1
61488: PPUSH
61489: LD_VAR 0 5
61493: PPUSH
61494: CALL_OW 12
61498: ARRAY
61499: ST_TO_ADDR
// end ; if weapon then
61500: LD_VAR 0 18
61504: IFFALSE 61618
// begin tmp := CostOfWeapon ( weapon ) ;
61506: LD_ADDR_VAR 0 14
61510: PUSH
61511: LD_VAR 0 18
61515: PPUSH
61516: CALL_OW 451
61520: ST_TO_ADDR
// j := GetBase ( tower ) ;
61521: LD_ADDR_VAR 0 9
61525: PUSH
61526: LD_VAR 0 1
61530: PPUSH
61531: CALL_OW 274
61535: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61536: LD_VAR 0 9
61540: PPUSH
61541: LD_INT 1
61543: PPUSH
61544: CALL_OW 275
61548: PUSH
61549: LD_VAR 0 14
61553: PUSH
61554: LD_INT 1
61556: ARRAY
61557: GREATEREQUAL
61558: PUSH
61559: LD_VAR 0 9
61563: PPUSH
61564: LD_INT 2
61566: PPUSH
61567: CALL_OW 275
61571: PUSH
61572: LD_VAR 0 14
61576: PUSH
61577: LD_INT 2
61579: ARRAY
61580: GREATEREQUAL
61581: AND
61582: PUSH
61583: LD_VAR 0 9
61587: PPUSH
61588: LD_INT 3
61590: PPUSH
61591: CALL_OW 275
61595: PUSH
61596: LD_VAR 0 14
61600: PUSH
61601: LD_INT 3
61603: ARRAY
61604: GREATEREQUAL
61605: AND
61606: IFFALSE 61618
// result := weapon ;
61608: LD_ADDR_VAR 0 3
61612: PUSH
61613: LD_VAR 0 18
61617: ST_TO_ADDR
// end ; end ;
61618: LD_VAR 0 3
61622: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61623: LD_INT 0
61625: PPUSH
61626: PPUSH
// result := true ;
61627: LD_ADDR_VAR 0 3
61631: PUSH
61632: LD_INT 1
61634: ST_TO_ADDR
// if array1 = array2 then
61635: LD_VAR 0 1
61639: PUSH
61640: LD_VAR 0 2
61644: EQUAL
61645: IFFALSE 61705
// begin for i = 1 to array1 do
61647: LD_ADDR_VAR 0 4
61651: PUSH
61652: DOUBLE
61653: LD_INT 1
61655: DEC
61656: ST_TO_ADDR
61657: LD_VAR 0 1
61661: PUSH
61662: FOR_TO
61663: IFFALSE 61701
// if array1 [ i ] <> array2 [ i ] then
61665: LD_VAR 0 1
61669: PUSH
61670: LD_VAR 0 4
61674: ARRAY
61675: PUSH
61676: LD_VAR 0 2
61680: PUSH
61681: LD_VAR 0 4
61685: ARRAY
61686: NONEQUAL
61687: IFFALSE 61699
// begin result := false ;
61689: LD_ADDR_VAR 0 3
61693: PUSH
61694: LD_INT 0
61696: ST_TO_ADDR
// break ;
61697: GO 61701
// end ;
61699: GO 61662
61701: POP
61702: POP
// end else
61703: GO 61713
// result := false ;
61705: LD_ADDR_VAR 0 3
61709: PUSH
61710: LD_INT 0
61712: ST_TO_ADDR
// end ;
61713: LD_VAR 0 3
61717: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61718: LD_INT 0
61720: PPUSH
61721: PPUSH
// if not array1 or not array2 then
61722: LD_VAR 0 1
61726: NOT
61727: PUSH
61728: LD_VAR 0 2
61732: NOT
61733: OR
61734: IFFALSE 61738
// exit ;
61736: GO 61802
// result := true ;
61738: LD_ADDR_VAR 0 3
61742: PUSH
61743: LD_INT 1
61745: ST_TO_ADDR
// for i = 1 to array1 do
61746: LD_ADDR_VAR 0 4
61750: PUSH
61751: DOUBLE
61752: LD_INT 1
61754: DEC
61755: ST_TO_ADDR
61756: LD_VAR 0 1
61760: PUSH
61761: FOR_TO
61762: IFFALSE 61800
// if array1 [ i ] <> array2 [ i ] then
61764: LD_VAR 0 1
61768: PUSH
61769: LD_VAR 0 4
61773: ARRAY
61774: PUSH
61775: LD_VAR 0 2
61779: PUSH
61780: LD_VAR 0 4
61784: ARRAY
61785: NONEQUAL
61786: IFFALSE 61798
// begin result := false ;
61788: LD_ADDR_VAR 0 3
61792: PUSH
61793: LD_INT 0
61795: ST_TO_ADDR
// break ;
61796: GO 61800
// end ;
61798: GO 61761
61800: POP
61801: POP
// end ;
61802: LD_VAR 0 3
61806: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61807: LD_INT 0
61809: PPUSH
61810: PPUSH
61811: PPUSH
// pom := GetBase ( fac ) ;
61812: LD_ADDR_VAR 0 5
61816: PUSH
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 274
61826: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61827: LD_ADDR_VAR 0 4
61831: PUSH
61832: LD_VAR 0 2
61836: PUSH
61837: LD_INT 1
61839: ARRAY
61840: PPUSH
61841: LD_VAR 0 2
61845: PUSH
61846: LD_INT 2
61848: ARRAY
61849: PPUSH
61850: LD_VAR 0 2
61854: PUSH
61855: LD_INT 3
61857: ARRAY
61858: PPUSH
61859: LD_VAR 0 2
61863: PUSH
61864: LD_INT 4
61866: ARRAY
61867: PPUSH
61868: CALL_OW 449
61872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61873: LD_ADDR_VAR 0 3
61877: PUSH
61878: LD_VAR 0 5
61882: PPUSH
61883: LD_INT 1
61885: PPUSH
61886: CALL_OW 275
61890: PUSH
61891: LD_VAR 0 4
61895: PUSH
61896: LD_INT 1
61898: ARRAY
61899: GREATEREQUAL
61900: PUSH
61901: LD_VAR 0 5
61905: PPUSH
61906: LD_INT 2
61908: PPUSH
61909: CALL_OW 275
61913: PUSH
61914: LD_VAR 0 4
61918: PUSH
61919: LD_INT 2
61921: ARRAY
61922: GREATEREQUAL
61923: AND
61924: PUSH
61925: LD_VAR 0 5
61929: PPUSH
61930: LD_INT 3
61932: PPUSH
61933: CALL_OW 275
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 3
61945: ARRAY
61946: GREATEREQUAL
61947: AND
61948: ST_TO_ADDR
// end ;
61949: LD_VAR 0 3
61953: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61954: LD_INT 0
61956: PPUSH
61957: PPUSH
61958: PPUSH
61959: PPUSH
// pom := GetBase ( building ) ;
61960: LD_ADDR_VAR 0 3
61964: PUSH
61965: LD_VAR 0 1
61969: PPUSH
61970: CALL_OW 274
61974: ST_TO_ADDR
// if not pom then
61975: LD_VAR 0 3
61979: NOT
61980: IFFALSE 61984
// exit ;
61982: GO 62154
// btype := GetBType ( building ) ;
61984: LD_ADDR_VAR 0 5
61988: PUSH
61989: LD_VAR 0 1
61993: PPUSH
61994: CALL_OW 266
61998: ST_TO_ADDR
// if btype = b_armoury then
61999: LD_VAR 0 5
62003: PUSH
62004: LD_INT 4
62006: EQUAL
62007: IFFALSE 62017
// btype := b_barracks ;
62009: LD_ADDR_VAR 0 5
62013: PUSH
62014: LD_INT 5
62016: ST_TO_ADDR
// if btype = b_depot then
62017: LD_VAR 0 5
62021: PUSH
62022: LD_INT 0
62024: EQUAL
62025: IFFALSE 62035
// btype := b_warehouse ;
62027: LD_ADDR_VAR 0 5
62031: PUSH
62032: LD_INT 1
62034: ST_TO_ADDR
// if btype = b_workshop then
62035: LD_VAR 0 5
62039: PUSH
62040: LD_INT 2
62042: EQUAL
62043: IFFALSE 62053
// btype := b_factory ;
62045: LD_ADDR_VAR 0 5
62049: PUSH
62050: LD_INT 3
62052: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62053: LD_ADDR_VAR 0 4
62057: PUSH
62058: LD_VAR 0 5
62062: PPUSH
62063: LD_VAR 0 1
62067: PPUSH
62068: CALL_OW 248
62072: PPUSH
62073: CALL_OW 450
62077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62078: LD_ADDR_VAR 0 2
62082: PUSH
62083: LD_VAR 0 3
62087: PPUSH
62088: LD_INT 1
62090: PPUSH
62091: CALL_OW 275
62095: PUSH
62096: LD_VAR 0 4
62100: PUSH
62101: LD_INT 1
62103: ARRAY
62104: GREATEREQUAL
62105: PUSH
62106: LD_VAR 0 3
62110: PPUSH
62111: LD_INT 2
62113: PPUSH
62114: CALL_OW 275
62118: PUSH
62119: LD_VAR 0 4
62123: PUSH
62124: LD_INT 2
62126: ARRAY
62127: GREATEREQUAL
62128: AND
62129: PUSH
62130: LD_VAR 0 3
62134: PPUSH
62135: LD_INT 3
62137: PPUSH
62138: CALL_OW 275
62142: PUSH
62143: LD_VAR 0 4
62147: PUSH
62148: LD_INT 3
62150: ARRAY
62151: GREATEREQUAL
62152: AND
62153: ST_TO_ADDR
// end ;
62154: LD_VAR 0 2
62158: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
62159: LD_INT 0
62161: PPUSH
62162: PPUSH
62163: PPUSH
// pom := GetBase ( building ) ;
62164: LD_ADDR_VAR 0 4
62168: PUSH
62169: LD_VAR 0 1
62173: PPUSH
62174: CALL_OW 274
62178: ST_TO_ADDR
// if not pom then
62179: LD_VAR 0 4
62183: NOT
62184: IFFALSE 62188
// exit ;
62186: GO 62289
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62188: LD_ADDR_VAR 0 5
62192: PUSH
62193: LD_VAR 0 2
62197: PPUSH
62198: LD_VAR 0 1
62202: PPUSH
62203: CALL_OW 248
62207: PPUSH
62208: CALL_OW 450
62212: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62213: LD_ADDR_VAR 0 3
62217: PUSH
62218: LD_VAR 0 4
62222: PPUSH
62223: LD_INT 1
62225: PPUSH
62226: CALL_OW 275
62230: PUSH
62231: LD_VAR 0 5
62235: PUSH
62236: LD_INT 1
62238: ARRAY
62239: GREATEREQUAL
62240: PUSH
62241: LD_VAR 0 4
62245: PPUSH
62246: LD_INT 2
62248: PPUSH
62249: CALL_OW 275
62253: PUSH
62254: LD_VAR 0 5
62258: PUSH
62259: LD_INT 2
62261: ARRAY
62262: GREATEREQUAL
62263: AND
62264: PUSH
62265: LD_VAR 0 4
62269: PPUSH
62270: LD_INT 3
62272: PPUSH
62273: CALL_OW 275
62277: PUSH
62278: LD_VAR 0 5
62282: PUSH
62283: LD_INT 3
62285: ARRAY
62286: GREATEREQUAL
62287: AND
62288: ST_TO_ADDR
// end ;
62289: LD_VAR 0 3
62293: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
62294: LD_INT 0
62296: PPUSH
62297: PPUSH
62298: PPUSH
62299: PPUSH
62300: PPUSH
62301: PPUSH
62302: PPUSH
62303: PPUSH
62304: PPUSH
62305: PPUSH
62306: PPUSH
// result := false ;
62307: LD_ADDR_VAR 0 8
62311: PUSH
62312: LD_INT 0
62314: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
62315: LD_VAR 0 5
62319: NOT
62320: PUSH
62321: LD_VAR 0 1
62325: NOT
62326: OR
62327: PUSH
62328: LD_VAR 0 2
62332: NOT
62333: OR
62334: PUSH
62335: LD_VAR 0 3
62339: NOT
62340: OR
62341: IFFALSE 62345
// exit ;
62343: GO 63159
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
62345: LD_ADDR_VAR 0 14
62349: PUSH
62350: LD_VAR 0 1
62354: PPUSH
62355: LD_VAR 0 2
62359: PPUSH
62360: LD_VAR 0 3
62364: PPUSH
62365: LD_VAR 0 4
62369: PPUSH
62370: LD_VAR 0 5
62374: PUSH
62375: LD_INT 1
62377: ARRAY
62378: PPUSH
62379: CALL_OW 248
62383: PPUSH
62384: LD_INT 0
62386: PPUSH
62387: CALL 64392 0 6
62391: ST_TO_ADDR
// if not hexes then
62392: LD_VAR 0 14
62396: NOT
62397: IFFALSE 62401
// exit ;
62399: GO 63159
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62401: LD_ADDR_VAR 0 17
62405: PUSH
62406: LD_VAR 0 5
62410: PPUSH
62411: LD_INT 22
62413: PUSH
62414: LD_VAR 0 13
62418: PPUSH
62419: CALL_OW 255
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: LD_INT 30
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 30
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PPUSH
62460: CALL_OW 72
62464: ST_TO_ADDR
// for i = 1 to hexes do
62465: LD_ADDR_VAR 0 9
62469: PUSH
62470: DOUBLE
62471: LD_INT 1
62473: DEC
62474: ST_TO_ADDR
62475: LD_VAR 0 14
62479: PUSH
62480: FOR_TO
62481: IFFALSE 63157
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62483: LD_ADDR_VAR 0 13
62487: PUSH
62488: LD_VAR 0 14
62492: PUSH
62493: LD_VAR 0 9
62497: ARRAY
62498: PUSH
62499: LD_INT 1
62501: ARRAY
62502: PPUSH
62503: LD_VAR 0 14
62507: PUSH
62508: LD_VAR 0 9
62512: ARRAY
62513: PUSH
62514: LD_INT 2
62516: ARRAY
62517: PPUSH
62518: CALL_OW 428
62522: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62523: LD_VAR 0 14
62527: PUSH
62528: LD_VAR 0 9
62532: ARRAY
62533: PUSH
62534: LD_INT 1
62536: ARRAY
62537: PPUSH
62538: LD_VAR 0 14
62542: PUSH
62543: LD_VAR 0 9
62547: ARRAY
62548: PUSH
62549: LD_INT 2
62551: ARRAY
62552: PPUSH
62553: CALL_OW 351
62557: PUSH
62558: LD_VAR 0 14
62562: PUSH
62563: LD_VAR 0 9
62567: ARRAY
62568: PUSH
62569: LD_INT 1
62571: ARRAY
62572: PPUSH
62573: LD_VAR 0 14
62577: PUSH
62578: LD_VAR 0 9
62582: ARRAY
62583: PUSH
62584: LD_INT 2
62586: ARRAY
62587: PPUSH
62588: CALL_OW 488
62592: NOT
62593: OR
62594: PUSH
62595: LD_VAR 0 13
62599: PPUSH
62600: CALL_OW 247
62604: PUSH
62605: LD_INT 3
62607: EQUAL
62608: OR
62609: IFFALSE 62615
// exit ;
62611: POP
62612: POP
62613: GO 63159
// if not tmp then
62615: LD_VAR 0 13
62619: NOT
62620: IFFALSE 62624
// continue ;
62622: GO 62480
// result := true ;
62624: LD_ADDR_VAR 0 8
62628: PUSH
62629: LD_INT 1
62631: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62632: LD_VAR 0 6
62636: PUSH
62637: LD_VAR 0 13
62641: PPUSH
62642: CALL_OW 247
62646: PUSH
62647: LD_INT 2
62649: EQUAL
62650: AND
62651: PUSH
62652: LD_VAR 0 13
62656: PPUSH
62657: CALL_OW 263
62661: PUSH
62662: LD_INT 1
62664: EQUAL
62665: AND
62666: IFFALSE 62830
// begin if IsDrivenBy ( tmp ) then
62668: LD_VAR 0 13
62672: PPUSH
62673: CALL_OW 311
62677: IFFALSE 62681
// continue ;
62679: GO 62480
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62681: LD_VAR 0 6
62685: PPUSH
62686: LD_INT 3
62688: PUSH
62689: LD_INT 60
62691: PUSH
62692: EMPTY
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: LD_INT 55
62704: PUSH
62705: EMPTY
62706: LIST
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PPUSH
62716: CALL_OW 72
62720: IFFALSE 62828
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62722: LD_ADDR_VAR 0 18
62726: PUSH
62727: LD_VAR 0 6
62731: PPUSH
62732: LD_INT 3
62734: PUSH
62735: LD_INT 60
62737: PUSH
62738: EMPTY
62739: LIST
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: LD_INT 55
62750: PUSH
62751: EMPTY
62752: LIST
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PPUSH
62762: CALL_OW 72
62766: PUSH
62767: LD_INT 1
62769: ARRAY
62770: ST_TO_ADDR
// if IsInUnit ( driver ) then
62771: LD_VAR 0 18
62775: PPUSH
62776: CALL_OW 310
62780: IFFALSE 62791
// ComExit ( driver ) ;
62782: LD_VAR 0 18
62786: PPUSH
62787: CALL 88172 0 1
// AddComEnterUnit ( driver , tmp ) ;
62791: LD_VAR 0 18
62795: PPUSH
62796: LD_VAR 0 13
62800: PPUSH
62801: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62805: LD_VAR 0 18
62809: PPUSH
62810: LD_VAR 0 7
62814: PPUSH
62815: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62819: LD_VAR 0 18
62823: PPUSH
62824: CALL_OW 181
// end ; continue ;
62828: GO 62480
// end ; if not cleaners or not tmp in cleaners then
62830: LD_VAR 0 6
62834: NOT
62835: PUSH
62836: LD_VAR 0 13
62840: PUSH
62841: LD_VAR 0 6
62845: IN
62846: NOT
62847: OR
62848: IFFALSE 63155
// begin if dep then
62850: LD_VAR 0 17
62854: IFFALSE 62990
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62856: LD_ADDR_VAR 0 16
62860: PUSH
62861: LD_VAR 0 17
62865: PUSH
62866: LD_INT 1
62868: ARRAY
62869: PPUSH
62870: CALL_OW 250
62874: PPUSH
62875: LD_VAR 0 17
62879: PUSH
62880: LD_INT 1
62882: ARRAY
62883: PPUSH
62884: CALL_OW 254
62888: PPUSH
62889: LD_INT 5
62891: PPUSH
62892: CALL_OW 272
62896: PUSH
62897: LD_VAR 0 17
62901: PUSH
62902: LD_INT 1
62904: ARRAY
62905: PPUSH
62906: CALL_OW 251
62910: PPUSH
62911: LD_VAR 0 17
62915: PUSH
62916: LD_INT 1
62918: ARRAY
62919: PPUSH
62920: CALL_OW 254
62924: PPUSH
62925: LD_INT 5
62927: PPUSH
62928: CALL_OW 273
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62937: LD_VAR 0 16
62941: PUSH
62942: LD_INT 1
62944: ARRAY
62945: PPUSH
62946: LD_VAR 0 16
62950: PUSH
62951: LD_INT 2
62953: ARRAY
62954: PPUSH
62955: CALL_OW 488
62959: IFFALSE 62990
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62961: LD_VAR 0 13
62965: PPUSH
62966: LD_VAR 0 16
62970: PUSH
62971: LD_INT 1
62973: ARRAY
62974: PPUSH
62975: LD_VAR 0 16
62979: PUSH
62980: LD_INT 2
62982: ARRAY
62983: PPUSH
62984: CALL_OW 111
// continue ;
62988: GO 62480
// end ; end ; r := GetDir ( tmp ) ;
62990: LD_ADDR_VAR 0 15
62994: PUSH
62995: LD_VAR 0 13
62999: PPUSH
63000: CALL_OW 254
63004: ST_TO_ADDR
// if r = 5 then
63005: LD_VAR 0 15
63009: PUSH
63010: LD_INT 5
63012: EQUAL
63013: IFFALSE 63023
// r := 0 ;
63015: LD_ADDR_VAR 0 15
63019: PUSH
63020: LD_INT 0
63022: ST_TO_ADDR
// for j = r to 5 do
63023: LD_ADDR_VAR 0 10
63027: PUSH
63028: DOUBLE
63029: LD_VAR 0 15
63033: DEC
63034: ST_TO_ADDR
63035: LD_INT 5
63037: PUSH
63038: FOR_TO
63039: IFFALSE 63153
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
63041: LD_ADDR_VAR 0 11
63045: PUSH
63046: LD_VAR 0 13
63050: PPUSH
63051: CALL_OW 250
63055: PPUSH
63056: LD_VAR 0 10
63060: PPUSH
63061: LD_INT 2
63063: PPUSH
63064: CALL_OW 272
63068: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
63069: LD_ADDR_VAR 0 12
63073: PUSH
63074: LD_VAR 0 13
63078: PPUSH
63079: CALL_OW 251
63083: PPUSH
63084: LD_VAR 0 10
63088: PPUSH
63089: LD_INT 2
63091: PPUSH
63092: CALL_OW 273
63096: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
63097: LD_VAR 0 11
63101: PPUSH
63102: LD_VAR 0 12
63106: PPUSH
63107: CALL_OW 488
63111: PUSH
63112: LD_VAR 0 11
63116: PPUSH
63117: LD_VAR 0 12
63121: PPUSH
63122: CALL_OW 428
63126: NOT
63127: AND
63128: IFFALSE 63151
// begin ComMoveXY ( tmp , _x , _y ) ;
63130: LD_VAR 0 13
63134: PPUSH
63135: LD_VAR 0 11
63139: PPUSH
63140: LD_VAR 0 12
63144: PPUSH
63145: CALL_OW 111
// break ;
63149: GO 63153
// end ; end ;
63151: GO 63038
63153: POP
63154: POP
// end ; end ;
63155: GO 62480
63157: POP
63158: POP
// end ;
63159: LD_VAR 0 8
63163: RET
// export function BuildingTechInvented ( side , btype ) ; begin
63164: LD_INT 0
63166: PPUSH
// result := true ;
63167: LD_ADDR_VAR 0 3
63171: PUSH
63172: LD_INT 1
63174: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
63175: LD_VAR 0 2
63179: PUSH
63180: LD_INT 24
63182: DOUBLE
63183: EQUAL
63184: IFTRUE 63194
63186: LD_INT 33
63188: DOUBLE
63189: EQUAL
63190: IFTRUE 63194
63192: GO 63219
63194: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
63195: LD_ADDR_VAR 0 3
63199: PUSH
63200: LD_INT 32
63202: PPUSH
63203: LD_VAR 0 1
63207: PPUSH
63208: CALL_OW 321
63212: PUSH
63213: LD_INT 2
63215: EQUAL
63216: ST_TO_ADDR
63217: GO 63535
63219: LD_INT 20
63221: DOUBLE
63222: EQUAL
63223: IFTRUE 63227
63225: GO 63252
63227: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
63228: LD_ADDR_VAR 0 3
63232: PUSH
63233: LD_INT 6
63235: PPUSH
63236: LD_VAR 0 1
63240: PPUSH
63241: CALL_OW 321
63245: PUSH
63246: LD_INT 2
63248: EQUAL
63249: ST_TO_ADDR
63250: GO 63535
63252: LD_INT 22
63254: DOUBLE
63255: EQUAL
63256: IFTRUE 63266
63258: LD_INT 36
63260: DOUBLE
63261: EQUAL
63262: IFTRUE 63266
63264: GO 63291
63266: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
63267: LD_ADDR_VAR 0 3
63271: PUSH
63272: LD_INT 15
63274: PPUSH
63275: LD_VAR 0 1
63279: PPUSH
63280: CALL_OW 321
63284: PUSH
63285: LD_INT 2
63287: EQUAL
63288: ST_TO_ADDR
63289: GO 63535
63291: LD_INT 30
63293: DOUBLE
63294: EQUAL
63295: IFTRUE 63299
63297: GO 63324
63299: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
63300: LD_ADDR_VAR 0 3
63304: PUSH
63305: LD_INT 20
63307: PPUSH
63308: LD_VAR 0 1
63312: PPUSH
63313: CALL_OW 321
63317: PUSH
63318: LD_INT 2
63320: EQUAL
63321: ST_TO_ADDR
63322: GO 63535
63324: LD_INT 28
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63338
63330: LD_INT 21
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63338
63336: GO 63363
63338: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
63339: LD_ADDR_VAR 0 3
63343: PUSH
63344: LD_INT 21
63346: PPUSH
63347: LD_VAR 0 1
63351: PPUSH
63352: CALL_OW 321
63356: PUSH
63357: LD_INT 2
63359: EQUAL
63360: ST_TO_ADDR
63361: GO 63535
63363: LD_INT 16
63365: DOUBLE
63366: EQUAL
63367: IFTRUE 63371
63369: GO 63396
63371: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
63372: LD_ADDR_VAR 0 3
63376: PUSH
63377: LD_INT 84
63379: PPUSH
63380: LD_VAR 0 1
63384: PPUSH
63385: CALL_OW 321
63389: PUSH
63390: LD_INT 2
63392: EQUAL
63393: ST_TO_ADDR
63394: GO 63535
63396: LD_INT 19
63398: DOUBLE
63399: EQUAL
63400: IFTRUE 63410
63402: LD_INT 23
63404: DOUBLE
63405: EQUAL
63406: IFTRUE 63410
63408: GO 63435
63410: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63411: LD_ADDR_VAR 0 3
63415: PUSH
63416: LD_INT 83
63418: PPUSH
63419: LD_VAR 0 1
63423: PPUSH
63424: CALL_OW 321
63428: PUSH
63429: LD_INT 2
63431: EQUAL
63432: ST_TO_ADDR
63433: GO 63535
63435: LD_INT 17
63437: DOUBLE
63438: EQUAL
63439: IFTRUE 63443
63441: GO 63468
63443: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63444: LD_ADDR_VAR 0 3
63448: PUSH
63449: LD_INT 39
63451: PPUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: CALL_OW 321
63461: PUSH
63462: LD_INT 2
63464: EQUAL
63465: ST_TO_ADDR
63466: GO 63535
63468: LD_INT 18
63470: DOUBLE
63471: EQUAL
63472: IFTRUE 63476
63474: GO 63501
63476: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63477: LD_ADDR_VAR 0 3
63481: PUSH
63482: LD_INT 40
63484: PPUSH
63485: LD_VAR 0 1
63489: PPUSH
63490: CALL_OW 321
63494: PUSH
63495: LD_INT 2
63497: EQUAL
63498: ST_TO_ADDR
63499: GO 63535
63501: LD_INT 27
63503: DOUBLE
63504: EQUAL
63505: IFTRUE 63509
63507: GO 63534
63509: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63510: LD_ADDR_VAR 0 3
63514: PUSH
63515: LD_INT 35
63517: PPUSH
63518: LD_VAR 0 1
63522: PPUSH
63523: CALL_OW 321
63527: PUSH
63528: LD_INT 2
63530: EQUAL
63531: ST_TO_ADDR
63532: GO 63535
63534: POP
// end ;
63535: LD_VAR 0 3
63539: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63540: LD_INT 0
63542: PPUSH
63543: PPUSH
63544: PPUSH
63545: PPUSH
63546: PPUSH
63547: PPUSH
63548: PPUSH
63549: PPUSH
63550: PPUSH
63551: PPUSH
63552: PPUSH
// result := false ;
63553: LD_ADDR_VAR 0 6
63557: PUSH
63558: LD_INT 0
63560: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63561: LD_VAR 0 1
63565: NOT
63566: PUSH
63567: LD_VAR 0 1
63571: PPUSH
63572: CALL_OW 266
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: IN
63587: NOT
63588: OR
63589: PUSH
63590: LD_VAR 0 2
63594: NOT
63595: OR
63596: PUSH
63597: LD_VAR 0 5
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: LD_INT 4
63616: PUSH
63617: LD_INT 5
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: IN
63628: NOT
63629: OR
63630: PUSH
63631: LD_VAR 0 3
63635: PPUSH
63636: LD_VAR 0 4
63640: PPUSH
63641: CALL_OW 488
63645: NOT
63646: OR
63647: IFFALSE 63651
// exit ;
63649: GO 64387
// side := GetSide ( depot ) ;
63651: LD_ADDR_VAR 0 9
63655: PUSH
63656: LD_VAR 0 1
63660: PPUSH
63661: CALL_OW 255
63665: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63666: LD_VAR 0 9
63670: PPUSH
63671: LD_VAR 0 2
63675: PPUSH
63676: CALL 63164 0 2
63680: NOT
63681: IFFALSE 63685
// exit ;
63683: GO 64387
// pom := GetBase ( depot ) ;
63685: LD_ADDR_VAR 0 10
63689: PUSH
63690: LD_VAR 0 1
63694: PPUSH
63695: CALL_OW 274
63699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63700: LD_ADDR_VAR 0 11
63704: PUSH
63705: LD_VAR 0 2
63709: PPUSH
63710: LD_VAR 0 1
63714: PPUSH
63715: CALL_OW 248
63719: PPUSH
63720: CALL_OW 450
63724: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63725: LD_VAR 0 10
63729: PPUSH
63730: LD_INT 1
63732: PPUSH
63733: CALL_OW 275
63737: PUSH
63738: LD_VAR 0 11
63742: PUSH
63743: LD_INT 1
63745: ARRAY
63746: GREATEREQUAL
63747: PUSH
63748: LD_VAR 0 10
63752: PPUSH
63753: LD_INT 2
63755: PPUSH
63756: CALL_OW 275
63760: PUSH
63761: LD_VAR 0 11
63765: PUSH
63766: LD_INT 2
63768: ARRAY
63769: GREATEREQUAL
63770: AND
63771: PUSH
63772: LD_VAR 0 10
63776: PPUSH
63777: LD_INT 3
63779: PPUSH
63780: CALL_OW 275
63784: PUSH
63785: LD_VAR 0 11
63789: PUSH
63790: LD_INT 3
63792: ARRAY
63793: GREATEREQUAL
63794: AND
63795: NOT
63796: IFFALSE 63800
// exit ;
63798: GO 64387
// if GetBType ( depot ) = b_depot then
63800: LD_VAR 0 1
63804: PPUSH
63805: CALL_OW 266
63809: PUSH
63810: LD_INT 0
63812: EQUAL
63813: IFFALSE 63825
// dist := 28 else
63815: LD_ADDR_VAR 0 14
63819: PUSH
63820: LD_INT 28
63822: ST_TO_ADDR
63823: GO 63833
// dist := 36 ;
63825: LD_ADDR_VAR 0 14
63829: PUSH
63830: LD_INT 36
63832: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63833: LD_VAR 0 1
63837: PPUSH
63838: LD_VAR 0 3
63842: PPUSH
63843: LD_VAR 0 4
63847: PPUSH
63848: CALL_OW 297
63852: PUSH
63853: LD_VAR 0 14
63857: GREATER
63858: IFFALSE 63862
// exit ;
63860: GO 64387
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63862: LD_ADDR_VAR 0 12
63866: PUSH
63867: LD_VAR 0 2
63871: PPUSH
63872: LD_VAR 0 3
63876: PPUSH
63877: LD_VAR 0 4
63881: PPUSH
63882: LD_VAR 0 5
63886: PPUSH
63887: LD_VAR 0 1
63891: PPUSH
63892: CALL_OW 248
63896: PPUSH
63897: LD_INT 0
63899: PPUSH
63900: CALL 64392 0 6
63904: ST_TO_ADDR
// if not hexes then
63905: LD_VAR 0 12
63909: NOT
63910: IFFALSE 63914
// exit ;
63912: GO 64387
// hex := GetHexInfo ( x , y ) ;
63914: LD_ADDR_VAR 0 15
63918: PUSH
63919: LD_VAR 0 3
63923: PPUSH
63924: LD_VAR 0 4
63928: PPUSH
63929: CALL_OW 546
63933: ST_TO_ADDR
// if hex [ 1 ] then
63934: LD_VAR 0 15
63938: PUSH
63939: LD_INT 1
63941: ARRAY
63942: IFFALSE 63946
// exit ;
63944: GO 64387
// height := hex [ 2 ] ;
63946: LD_ADDR_VAR 0 13
63950: PUSH
63951: LD_VAR 0 15
63955: PUSH
63956: LD_INT 2
63958: ARRAY
63959: ST_TO_ADDR
// for i = 1 to hexes do
63960: LD_ADDR_VAR 0 7
63964: PUSH
63965: DOUBLE
63966: LD_INT 1
63968: DEC
63969: ST_TO_ADDR
63970: LD_VAR 0 12
63974: PUSH
63975: FOR_TO
63976: IFFALSE 64306
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63978: LD_VAR 0 12
63982: PUSH
63983: LD_VAR 0 7
63987: ARRAY
63988: PUSH
63989: LD_INT 1
63991: ARRAY
63992: PPUSH
63993: LD_VAR 0 12
63997: PUSH
63998: LD_VAR 0 7
64002: ARRAY
64003: PUSH
64004: LD_INT 2
64006: ARRAY
64007: PPUSH
64008: CALL_OW 488
64012: NOT
64013: PUSH
64014: LD_VAR 0 12
64018: PUSH
64019: LD_VAR 0 7
64023: ARRAY
64024: PUSH
64025: LD_INT 1
64027: ARRAY
64028: PPUSH
64029: LD_VAR 0 12
64033: PUSH
64034: LD_VAR 0 7
64038: ARRAY
64039: PUSH
64040: LD_INT 2
64042: ARRAY
64043: PPUSH
64044: CALL_OW 428
64048: PUSH
64049: LD_INT 0
64051: GREATER
64052: OR
64053: PUSH
64054: LD_VAR 0 12
64058: PUSH
64059: LD_VAR 0 7
64063: ARRAY
64064: PUSH
64065: LD_INT 1
64067: ARRAY
64068: PPUSH
64069: LD_VAR 0 12
64073: PUSH
64074: LD_VAR 0 7
64078: ARRAY
64079: PUSH
64080: LD_INT 2
64082: ARRAY
64083: PPUSH
64084: CALL_OW 351
64088: OR
64089: IFFALSE 64095
// exit ;
64091: POP
64092: POP
64093: GO 64387
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64095: LD_ADDR_VAR 0 8
64099: PUSH
64100: LD_VAR 0 12
64104: PUSH
64105: LD_VAR 0 7
64109: ARRAY
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PPUSH
64115: LD_VAR 0 12
64119: PUSH
64120: LD_VAR 0 7
64124: ARRAY
64125: PUSH
64126: LD_INT 2
64128: ARRAY
64129: PPUSH
64130: CALL_OW 546
64134: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
64135: LD_VAR 0 8
64139: PUSH
64140: LD_INT 1
64142: ARRAY
64143: PUSH
64144: LD_VAR 0 8
64148: PUSH
64149: LD_INT 2
64151: ARRAY
64152: PUSH
64153: LD_VAR 0 13
64157: PUSH
64158: LD_INT 2
64160: PLUS
64161: GREATER
64162: OR
64163: PUSH
64164: LD_VAR 0 8
64168: PUSH
64169: LD_INT 2
64171: ARRAY
64172: PUSH
64173: LD_VAR 0 13
64177: PUSH
64178: LD_INT 2
64180: MINUS
64181: LESS
64182: OR
64183: PUSH
64184: LD_VAR 0 8
64188: PUSH
64189: LD_INT 3
64191: ARRAY
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: LD_INT 8
64198: PUSH
64199: LD_INT 9
64201: PUSH
64202: LD_INT 10
64204: PUSH
64205: LD_INT 11
64207: PUSH
64208: LD_INT 12
64210: PUSH
64211: LD_INT 13
64213: PUSH
64214: LD_INT 16
64216: PUSH
64217: LD_INT 17
64219: PUSH
64220: LD_INT 18
64222: PUSH
64223: LD_INT 19
64225: PUSH
64226: LD_INT 20
64228: PUSH
64229: LD_INT 21
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: IN
64247: NOT
64248: OR
64249: PUSH
64250: LD_VAR 0 8
64254: PUSH
64255: LD_INT 5
64257: ARRAY
64258: NOT
64259: OR
64260: PUSH
64261: LD_VAR 0 8
64265: PUSH
64266: LD_INT 6
64268: ARRAY
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: LD_INT 7
64278: PUSH
64279: LD_INT 9
64281: PUSH
64282: LD_INT 10
64284: PUSH
64285: LD_INT 11
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: IN
64296: NOT
64297: OR
64298: IFFALSE 64304
// exit ;
64300: POP
64301: POP
64302: GO 64387
// end ;
64304: GO 63975
64306: POP
64307: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64308: LD_VAR 0 9
64312: PPUSH
64313: LD_VAR 0 3
64317: PPUSH
64318: LD_VAR 0 4
64322: PPUSH
64323: LD_INT 20
64325: PPUSH
64326: CALL 56339 0 4
64330: PUSH
64331: LD_INT 4
64333: ARRAY
64334: IFFALSE 64338
// exit ;
64336: GO 64387
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
64338: LD_VAR 0 2
64342: PUSH
64343: LD_INT 29
64345: PUSH
64346: LD_INT 30
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: IN
64353: PUSH
64354: LD_VAR 0 3
64358: PPUSH
64359: LD_VAR 0 4
64363: PPUSH
64364: LD_VAR 0 9
64368: PPUSH
64369: CALL_OW 440
64373: NOT
64374: AND
64375: IFFALSE 64379
// exit ;
64377: GO 64387
// result := true ;
64379: LD_ADDR_VAR 0 6
64383: PUSH
64384: LD_INT 1
64386: ST_TO_ADDR
// end ;
64387: LD_VAR 0 6
64391: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64392: LD_INT 0
64394: PPUSH
64395: PPUSH
64396: PPUSH
64397: PPUSH
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
64403: PPUSH
64404: PPUSH
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
64413: PPUSH
64414: PPUSH
64415: PPUSH
64416: PPUSH
64417: PPUSH
64418: PPUSH
64419: PPUSH
64420: PPUSH
64421: PPUSH
64422: PPUSH
64423: PPUSH
64424: PPUSH
64425: PPUSH
64426: PPUSH
64427: PPUSH
64428: PPUSH
64429: PPUSH
64430: PPUSH
64431: PPUSH
64432: PPUSH
64433: PPUSH
64434: PPUSH
64435: PPUSH
64436: PPUSH
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
64441: PPUSH
64442: PPUSH
64443: PPUSH
64444: PPUSH
64445: PPUSH
64446: PPUSH
64447: PPUSH
64448: PPUSH
64449: PPUSH
64450: PPUSH
64451: PPUSH
// result = [ ] ;
64452: LD_ADDR_VAR 0 7
64456: PUSH
64457: EMPTY
64458: ST_TO_ADDR
// temp_list = [ ] ;
64459: LD_ADDR_VAR 0 9
64463: PUSH
64464: EMPTY
64465: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64466: LD_VAR 0 4
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 2
64479: PUSH
64480: LD_INT 3
64482: PUSH
64483: LD_INT 4
64485: PUSH
64486: LD_INT 5
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: IN
64497: NOT
64498: PUSH
64499: LD_VAR 0 1
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: IN
64514: PUSH
64515: LD_VAR 0 5
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: IN
64534: NOT
64535: AND
64536: OR
64537: IFFALSE 64541
// exit ;
64539: GO 82932
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64541: LD_VAR 0 1
64545: PUSH
64546: LD_INT 6
64548: PUSH
64549: LD_INT 7
64551: PUSH
64552: LD_INT 8
64554: PUSH
64555: LD_INT 13
64557: PUSH
64558: LD_INT 12
64560: PUSH
64561: LD_INT 15
64563: PUSH
64564: LD_INT 11
64566: PUSH
64567: LD_INT 14
64569: PUSH
64570: LD_INT 10
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: IN
64584: IFFALSE 64594
// btype = b_lab ;
64586: LD_ADDR_VAR 0 1
64590: PUSH
64591: LD_INT 6
64593: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64594: LD_VAR 0 6
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: IN
64613: NOT
64614: PUSH
64615: LD_VAR 0 1
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 3
64631: PUSH
64632: LD_INT 6
64634: PUSH
64635: LD_INT 36
64637: PUSH
64638: LD_INT 4
64640: PUSH
64641: LD_INT 5
64643: PUSH
64644: LD_INT 31
64646: PUSH
64647: LD_INT 32
64649: PUSH
64650: LD_INT 33
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: IN
64666: NOT
64667: PUSH
64668: LD_VAR 0 6
64672: PUSH
64673: LD_INT 1
64675: EQUAL
64676: AND
64677: OR
64678: PUSH
64679: LD_VAR 0 1
64683: PUSH
64684: LD_INT 2
64686: PUSH
64687: LD_INT 3
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: IN
64694: NOT
64695: PUSH
64696: LD_VAR 0 6
64700: PUSH
64701: LD_INT 2
64703: EQUAL
64704: AND
64705: OR
64706: IFFALSE 64716
// mode = 0 ;
64708: LD_ADDR_VAR 0 6
64712: PUSH
64713: LD_INT 0
64715: ST_TO_ADDR
// case mode of 0 :
64716: LD_VAR 0 6
64720: PUSH
64721: LD_INT 0
64723: DOUBLE
64724: EQUAL
64725: IFTRUE 64729
64727: GO 76182
64729: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64730: LD_ADDR_VAR 0 11
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: LD_INT 2
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64923: LD_ADDR_VAR 0 12
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 3
65080: NEG
65081: PUSH
65082: LD_INT 0
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: NEG
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65119: LD_ADDR_VAR 0 13
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: LD_INT 2
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 2
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: LD_INT 2
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: LD_INT 1
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: NEG
65255: PUSH
65256: LD_INT 2
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 2
65266: NEG
65267: PUSH
65268: LD_INT 3
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: NEG
65279: PUSH
65280: LD_INT 2
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: NEG
65291: PUSH
65292: LD_INT 3
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65318: LD_ADDR_VAR 0 14
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: LD_INT 2
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: LD_INT 3
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 3
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65514: LD_ADDR_VAR 0 15
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 3
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65707: LD_ADDR_VAR 0 16
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 2
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: NEG
65831: PUSH
65832: LD_INT 1
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 3
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65900: LD_ADDR_VAR 0 17
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: LD_INT 2
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 2
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: LD_INT 1
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: NEG
66100: PUSH
66101: LD_INT 2
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66130: LD_ADDR_VAR 0 18
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: LD_INT 2
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 2
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 2
66329: NEG
66330: PUSH
66331: LD_INT 2
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66360: LD_ADDR_VAR 0 19
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: LD_INT 2
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 2
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 2
66536: NEG
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: LD_INT 1
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: LD_INT 2
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66590: LD_ADDR_VAR 0 20
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 2
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: LD_INT 2
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 2
66766: NEG
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: NEG
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 2
66789: NEG
66790: PUSH
66791: LD_INT 2
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66820: LD_ADDR_VAR 0 21
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 1
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 1
66901: NEG
66902: PUSH
66903: LD_INT 2
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 2
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 2
66955: PUSH
66956: LD_INT 2
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 1
66965: PUSH
66966: LD_INT 2
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 2
66996: NEG
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 2
67007: NEG
67008: PUSH
67009: LD_INT 1
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 2
67019: NEG
67020: PUSH
67021: LD_INT 2
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67050: LD_ADDR_VAR 0 22
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 1
67088: PUSH
67089: LD_INT 1
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 2
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 0
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: LD_INT 1
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 2
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 2
67226: NEG
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 2
67237: NEG
67238: PUSH
67239: LD_INT 1
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 2
67249: NEG
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67280: LD_ADDR_VAR 0 23
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 1
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 2
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: LD_INT 2
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 2
67456: NEG
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 2
67467: NEG
67468: PUSH
67469: LD_INT 1
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: NEG
67480: PUSH
67481: LD_INT 2
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: LD_INT 3
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67560: LD_ADDR_VAR 0 24
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 1
67641: NEG
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 2
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 2
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: NEG
67726: PUSH
67727: LD_INT 1
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 2
67736: NEG
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 2
67759: NEG
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 1
67771: PUSH
67772: LD_INT 2
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 3
67793: PUSH
67794: LD_INT 1
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 3
67803: PUSH
67804: LD_INT 2
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67836: LD_ADDR_VAR 0 25
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: LD_INT 0
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: LD_INT 1
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 1
67874: PUSH
67875: LD_INT 1
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: LD_INT 1
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: NEG
67918: PUSH
67919: LD_INT 2
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: LD_INT 1
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 1
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 2
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 2
68023: NEG
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: LD_INT 2
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 3
68047: PUSH
68048: LD_INT 1
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68110: LD_ADDR_VAR 0 26
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: LD_INT 1
68130: NEG
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: LD_INT 0
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 1
68179: NEG
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: LD_INT 2
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: LD_INT 1
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: LD_INT 2
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 1
68275: NEG
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: NEG
68298: PUSH
68299: LD_INT 1
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 2
68309: NEG
68310: PUSH
68311: LD_INT 2
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 2
68321: PUSH
68322: LD_INT 3
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 1
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 1
68341: NEG
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 2
68352: NEG
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68386: LD_ADDR_VAR 0 27
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: LD_INT 1
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: LD_INT 1
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 1
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: NEG
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: PUSH
68457: LD_INT 1
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: LD_INT 2
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 0
68479: PUSH
68480: LD_INT 2
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 1
68490: PUSH
68491: LD_INT 1
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 2
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: LD_INT 2
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 1
68531: PUSH
68532: LD_INT 2
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 2
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: NEG
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 2
68573: NEG
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 2
68585: NEG
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 2
68608: NEG
68609: PUSH
68610: LD_INT 1
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 3
68619: NEG
68620: PUSH
68621: LD_INT 1
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 3
68631: NEG
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68666: LD_ADDR_VAR 0 28
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: LD_INT 1
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 1
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 1
68724: NEG
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 1
68735: NEG
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 1
68747: NEG
68748: PUSH
68749: LD_INT 2
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: LD_INT 2
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 1
68770: PUSH
68771: LD_INT 1
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 2
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 2
68791: PUSH
68792: LD_INT 1
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 2
68801: PUSH
68802: LD_INT 2
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 1
68811: PUSH
68812: LD_INT 2
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: LD_INT 2
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 1
68831: NEG
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 2
68842: NEG
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 2
68853: NEG
68854: PUSH
68855: LD_INT 1
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 2
68865: NEG
68866: PUSH
68867: LD_INT 2
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 2
68877: NEG
68878: PUSH
68879: LD_INT 3
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: LD_INT 3
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: NEG
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: NEG
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68948: LD_ADDR_VAR 0 29
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 0
68965: PUSH
68966: LD_INT 1
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 1
68986: PUSH
68987: LD_INT 1
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: NEG
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 1
69017: NEG
69018: PUSH
69019: LD_INT 1
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: LD_INT 2
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 1
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 2
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: LD_INT 2
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 1
69103: NEG
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 2
69126: NEG
69127: PUSH
69128: LD_INT 2
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 2
69138: NEG
69139: PUSH
69140: LD_INT 3
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 2
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: PUSH
69172: LD_INT 3
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 3
69192: NEG
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69227: LD_ADDR_VAR 0 30
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 1
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: LD_INT 1
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 1
69285: NEG
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 1
69296: NEG
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: NEG
69309: PUSH
69310: LD_INT 2
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: LD_INT 2
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: LD_INT 1
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 2
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 2
69352: PUSH
69353: LD_INT 1
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 2
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 1
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 2
69404: NEG
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 1
69416: NEG
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 2
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: LD_INT 2
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: LD_INT 3
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 2
69459: NEG
69460: PUSH
69461: LD_INT 1
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 3
69470: NEG
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69505: LD_ADDR_VAR 0 31
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: LD_INT 0
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 1
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: PUSH
69534: LD_INT 0
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: LD_INT 1
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: LD_INT 0
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 1
69574: NEG
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: LD_INT 2
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 1
69639: PUSH
69640: LD_INT 2
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 1
69659: NEG
69660: PUSH
69661: LD_INT 1
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 2
69670: NEG
69671: PUSH
69672: LD_INT 1
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 2
69682: NEG
69683: PUSH
69684: LD_INT 2
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 2
69694: NEG
69695: PUSH
69696: LD_INT 3
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 2
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 3
69717: PUSH
69718: LD_INT 1
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 3
69748: NEG
69749: PUSH
69750: LD_INT 2
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69783: LD_ADDR_VAR 0 32
69787: PUSH
69788: LD_INT 0
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 0
69800: PUSH
69801: LD_INT 1
69803: NEG
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 1
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 1
69821: PUSH
69822: LD_INT 1
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 0
69831: PUSH
69832: LD_INT 1
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 1
69841: NEG
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: NEG
69865: PUSH
69866: LD_INT 2
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 2
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 1
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: LD_INT 1
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 2
69908: PUSH
69909: LD_INT 2
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 1
69918: PUSH
69919: LD_INT 2
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: LD_INT 2
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: LD_INT 1
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 2
69949: NEG
69950: PUSH
69951: LD_INT 0
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: LD_INT 1
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: LD_INT 3
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: LD_INT 2
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 3
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 2
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 2
70015: NEG
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: NEG
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
70061: LD_ADDR_VAR 0 33
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 0
70078: PUSH
70079: LD_INT 1
70081: NEG
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 1
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 1
70099: PUSH
70100: LD_INT 1
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 1
70119: NEG
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 1
70130: NEG
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: LD_INT 2
70146: NEG
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 1
70154: PUSH
70155: LD_INT 1
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: LD_INT 1
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 1
70185: PUSH
70186: LD_INT 2
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: LD_INT 2
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: LD_INT 1
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 2
70216: NEG
70217: PUSH
70218: LD_INT 0
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 2
70227: NEG
70228: PUSH
70229: LD_INT 1
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 2
70239: NEG
70240: PUSH
70241: LD_INT 2
70243: NEG
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 2
70251: NEG
70252: PUSH
70253: LD_INT 3
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 1
70284: PUSH
70285: LD_INT 3
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 1
70294: NEG
70295: PUSH
70296: LD_INT 2
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 3
70305: NEG
70306: PUSH
70307: LD_INT 2
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70340: LD_ADDR_VAR 0 34
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: LD_INT 0
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 0
70357: PUSH
70358: LD_INT 1
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 1
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 1
70378: PUSH
70379: LD_INT 1
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 1
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 1
70398: NEG
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: NEG
70422: PUSH
70423: LD_INT 2
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: LD_INT 2
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 2
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 2
70465: PUSH
70466: LD_INT 2
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: LD_INT 2
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: LD_INT 1
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 2
70496: NEG
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 2
70507: NEG
70508: PUSH
70509: LD_INT 1
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 2
70519: NEG
70520: PUSH
70521: LD_INT 2
70523: NEG
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 1
70531: NEG
70532: PUSH
70533: LD_INT 3
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 1
70543: PUSH
70544: LD_INT 2
70546: NEG
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: LD_INT 3
70554: PUSH
70555: LD_INT 2
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 2
70564: PUSH
70565: LD_INT 3
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 2
70574: NEG
70575: PUSH
70576: LD_INT 1
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 3
70585: NEG
70586: PUSH
70587: LD_INT 1
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70620: LD_ADDR_VAR 0 35
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: LD_INT 0
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: LD_INT 1
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 1
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 1
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 0
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 1
70678: NEG
70679: PUSH
70680: LD_INT 0
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 1
70689: NEG
70690: PUSH
70691: LD_INT 1
70693: NEG
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 2
70711: NEG
70712: PUSH
70713: LD_INT 1
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70732: LD_ADDR_VAR 0 36
70736: PUSH
70737: LD_INT 0
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: LD_INT 1
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: LD_INT 0
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 0
70780: PUSH
70781: LD_INT 1
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 1
70790: NEG
70791: PUSH
70792: LD_INT 0
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: NEG
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 1
70813: NEG
70814: PUSH
70815: LD_INT 2
70817: NEG
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: LD_INT 2
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70844: LD_ADDR_VAR 0 37
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: LD_INT 1
70864: NEG
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 1
70882: PUSH
70883: LD_INT 1
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: LD_INT 1
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 1
70902: NEG
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: LD_INT 1
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 1
70925: PUSH
70926: LD_INT 1
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 1
70936: NEG
70937: PUSH
70938: LD_INT 1
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70956: LD_ADDR_VAR 0 38
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: LD_INT 0
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: LD_INT 1
70976: NEG
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 1
70984: PUSH
70985: LD_INT 0
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 1
70994: PUSH
70995: LD_INT 1
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: LD_INT 1
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 1
71014: NEG
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 1
71025: NEG
71026: PUSH
71027: LD_INT 1
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: LD_INT 1
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 2
71047: NEG
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
71068: LD_ADDR_VAR 0 39
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: LD_INT 1
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 1
71096: PUSH
71097: LD_INT 0
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: LD_INT 1
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 0
71116: PUSH
71117: LD_INT 1
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: NEG
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 1
71137: NEG
71138: PUSH
71139: LD_INT 1
71141: NEG
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 1
71149: NEG
71150: PUSH
71151: LD_INT 2
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: LD_INT 2
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
71180: LD_ADDR_VAR 0 40
71184: PUSH
71185: LD_INT 0
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: LD_INT 1
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 1
71208: PUSH
71209: LD_INT 0
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 1
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 1
71238: NEG
71239: PUSH
71240: LD_INT 0
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 1
71249: NEG
71250: PUSH
71251: LD_INT 1
71253: NEG
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 1
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: LD_INT 1
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71292: LD_ADDR_VAR 0 41
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 0
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: LD_INT 0
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: LD_INT 1
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 0
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 1
71361: NEG
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 1
71373: NEG
71374: PUSH
71375: LD_INT 2
71377: NEG
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 1
71385: PUSH
71386: LD_INT 1
71388: NEG
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 2
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 2
71406: PUSH
71407: LD_INT 1
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 2
71416: PUSH
71417: LD_INT 2
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 1
71426: PUSH
71427: LD_INT 2
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 1
71436: NEG
71437: PUSH
71438: LD_INT 1
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: NEG
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 2
71458: NEG
71459: PUSH
71460: LD_INT 1
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 2
71470: NEG
71471: PUSH
71472: LD_INT 2
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 2
71482: NEG
71483: PUSH
71484: LD_INT 3
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 2
71494: PUSH
71495: LD_INT 1
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 3
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 3
71515: PUSH
71516: LD_INT 1
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 3
71525: PUSH
71526: LD_INT 2
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 3
71535: PUSH
71536: LD_INT 3
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 2
71545: PUSH
71546: LD_INT 3
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 2
71555: NEG
71556: PUSH
71557: LD_INT 1
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: NEG
71567: PUSH
71568: LD_INT 0
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 3
71577: NEG
71578: PUSH
71579: LD_INT 1
71581: NEG
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 3
71589: NEG
71590: PUSH
71591: LD_INT 2
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 3
71601: NEG
71602: PUSH
71603: LD_INT 3
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71642: LD_ADDR_VAR 0 42
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: LD_INT 0
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 0
71690: PUSH
71691: LD_INT 1
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 1
71700: NEG
71701: PUSH
71702: LD_INT 0
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: LD_INT 1
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 1
71723: NEG
71724: PUSH
71725: LD_INT 2
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: LD_INT 2
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 1
71746: PUSH
71747: LD_INT 1
71749: NEG
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: LD_INT 1
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: LD_INT 2
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 1
71777: PUSH
71778: LD_INT 2
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 2
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 1
71797: NEG
71798: PUSH
71799: LD_INT 1
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 2
71808: NEG
71809: PUSH
71810: LD_INT 1
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 2
71820: NEG
71821: PUSH
71822: LD_INT 2
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 2
71832: NEG
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 1
71844: NEG
71845: PUSH
71846: LD_INT 3
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: LD_INT 3
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: LD_INT 2
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 3
71878: PUSH
71879: LD_INT 2
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 3
71888: PUSH
71889: LD_INT 3
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 2
71898: PUSH
71899: LD_INT 3
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 1
71908: PUSH
71909: LD_INT 3
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: LD_INT 3
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 1
71928: NEG
71929: PUSH
71930: LD_INT 2
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 3
71939: NEG
71940: PUSH
71941: LD_INT 2
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 3
71951: NEG
71952: PUSH
71953: LD_INT 3
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71992: LD_ADDR_VAR 0 43
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 0
72009: PUSH
72010: LD_INT 1
72012: NEG
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 1
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 1
72030: PUSH
72031: LD_INT 1
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: LD_INT 0
72040: PUSH
72041: LD_INT 1
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 1
72050: NEG
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 1
72061: NEG
72062: PUSH
72063: LD_INT 1
72065: NEG
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 1
72073: NEG
72074: PUSH
72075: LD_INT 2
72077: NEG
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: LD_INT 2
72088: NEG
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 1
72096: PUSH
72097: LD_INT 1
72099: NEG
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 2
72107: PUSH
72108: LD_INT 0
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 2
72117: PUSH
72118: LD_INT 1
72120: PUSH
72121: EMPTY
72122: LIST
72123: LIST
72124: PUSH
72125: LD_INT 1
72127: PUSH
72128: LD_INT 2
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 0
72137: PUSH
72138: LD_INT 2
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 1
72147: NEG
72148: PUSH
72149: LD_INT 1
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 2
72158: NEG
72159: PUSH
72160: LD_INT 0
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 2
72169: NEG
72170: PUSH
72171: LD_INT 1
72173: NEG
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: LD_INT 3
72185: NEG
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: LD_INT 3
72196: NEG
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: LD_INT 2
72207: NEG
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 2
72215: PUSH
72216: LD_INT 1
72218: NEG
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 3
72226: PUSH
72227: LD_INT 0
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 3
72236: PUSH
72237: LD_INT 1
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 1
72246: PUSH
72247: LD_INT 3
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 0
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 1
72266: NEG
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 2
72277: NEG
72278: PUSH
72279: LD_INT 1
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 3
72288: NEG
72289: PUSH
72290: LD_INT 0
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 3
72299: NEG
72300: PUSH
72301: LD_INT 1
72303: NEG
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72340: LD_ADDR_VAR 0 44
72344: PUSH
72345: LD_INT 0
72347: PUSH
72348: LD_INT 0
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: LD_INT 1
72360: NEG
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 1
72368: PUSH
72369: LD_INT 0
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 1
72378: PUSH
72379: LD_INT 1
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 0
72388: PUSH
72389: LD_INT 1
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 1
72398: NEG
72399: PUSH
72400: LD_INT 0
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 1
72409: NEG
72410: PUSH
72411: LD_INT 1
72413: NEG
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 1
72421: NEG
72422: PUSH
72423: LD_INT 2
72425: NEG
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 1
72433: PUSH
72434: LD_INT 1
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 2
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 2
72454: PUSH
72455: LD_INT 1
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 2
72464: PUSH
72465: LD_INT 2
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 1
72474: PUSH
72475: LD_INT 2
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 1
72484: NEG
72485: PUSH
72486: LD_INT 1
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 2
72495: NEG
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 2
72506: NEG
72507: PUSH
72508: LD_INT 1
72510: NEG
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 2
72518: NEG
72519: PUSH
72520: LD_INT 2
72522: NEG
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 2
72530: NEG
72531: PUSH
72532: LD_INT 3
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 2
72542: PUSH
72543: LD_INT 1
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 3
72563: PUSH
72564: LD_INT 1
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: LD_INT 2
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 3
72583: PUSH
72584: LD_INT 3
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 2
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 2
72603: NEG
72604: PUSH
72605: LD_INT 1
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 3
72614: NEG
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 3
72625: NEG
72626: PUSH
72627: LD_INT 1
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 3
72637: NEG
72638: PUSH
72639: LD_INT 2
72641: NEG
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_INT 3
72649: NEG
72650: PUSH
72651: LD_INT 3
72653: NEG
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72690: LD_ADDR_VAR 0 45
72694: PUSH
72695: LD_INT 0
72697: PUSH
72698: LD_INT 0
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 0
72707: PUSH
72708: LD_INT 1
72710: NEG
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: PUSH
72716: LD_INT 1
72718: PUSH
72719: LD_INT 0
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 1
72728: PUSH
72729: LD_INT 1
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: LD_INT 1
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 1
72748: NEG
72749: PUSH
72750: LD_INT 0
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 1
72759: NEG
72760: PUSH
72761: LD_INT 1
72763: NEG
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 1
72771: NEG
72772: PUSH
72773: LD_INT 2
72775: NEG
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 0
72783: PUSH
72784: LD_INT 2
72786: NEG
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 1
72794: PUSH
72795: LD_INT 1
72797: NEG
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 2
72805: PUSH
72806: LD_INT 1
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: LD_INT 2
72815: PUSH
72816: LD_INT 2
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 1
72825: PUSH
72826: LD_INT 2
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: LD_INT 2
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 1
72845: NEG
72846: PUSH
72847: LD_INT 1
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 2
72856: NEG
72857: PUSH
72858: LD_INT 1
72860: NEG
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 2
72868: NEG
72869: PUSH
72870: LD_INT 2
72872: NEG
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: LD_INT 3
72884: NEG
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 1
72892: NEG
72893: PUSH
72894: LD_INT 3
72896: NEG
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 0
72904: PUSH
72905: LD_INT 3
72907: NEG
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 1
72915: PUSH
72916: LD_INT 2
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 3
72926: PUSH
72927: LD_INT 2
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 3
72936: PUSH
72937: LD_INT 3
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 2
72946: PUSH
72947: LD_INT 3
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: LD_INT 3
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 0
72966: PUSH
72967: LD_INT 3
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: LD_INT 1
72976: NEG
72977: PUSH
72978: LD_INT 2
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 3
72987: NEG
72988: PUSH
72989: LD_INT 2
72991: NEG
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 3
72999: NEG
73000: PUSH
73001: LD_INT 3
73003: NEG
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73040: LD_ADDR_VAR 0 46
73044: PUSH
73045: LD_INT 0
73047: PUSH
73048: LD_INT 0
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: LD_INT 1
73060: NEG
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: PUSH
73066: LD_INT 1
73068: PUSH
73069: LD_INT 0
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: LD_INT 1
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 0
73088: PUSH
73089: LD_INT 1
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 1
73098: NEG
73099: PUSH
73100: LD_INT 0
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 1
73109: NEG
73110: PUSH
73111: LD_INT 1
73113: NEG
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 1
73121: NEG
73122: PUSH
73123: LD_INT 2
73125: NEG
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 0
73133: PUSH
73134: LD_INT 2
73136: NEG
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 1
73144: PUSH
73145: LD_INT 1
73147: NEG
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 2
73155: PUSH
73156: LD_INT 0
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 2
73165: PUSH
73166: LD_INT 1
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: PUSH
73173: LD_INT 1
73175: PUSH
73176: LD_INT 2
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: LD_INT 2
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 1
73195: NEG
73196: PUSH
73197: LD_INT 1
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: LD_INT 2
73206: NEG
73207: PUSH
73208: LD_INT 0
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: LD_INT 2
73217: NEG
73218: PUSH
73219: LD_INT 1
73221: NEG
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 1
73229: NEG
73230: PUSH
73231: LD_INT 3
73233: NEG
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 0
73241: PUSH
73242: LD_INT 3
73244: NEG
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 1
73252: PUSH
73253: LD_INT 2
73255: NEG
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 2
73263: PUSH
73264: LD_INT 1
73266: NEG
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 3
73274: PUSH
73275: LD_INT 0
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 3
73284: PUSH
73285: LD_INT 1
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 1
73294: PUSH
73295: LD_INT 3
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 0
73304: PUSH
73305: LD_INT 3
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 1
73314: NEG
73315: PUSH
73316: LD_INT 2
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 2
73325: NEG
73326: PUSH
73327: LD_INT 1
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 3
73336: NEG
73337: PUSH
73338: LD_INT 0
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 3
73347: NEG
73348: PUSH
73349: LD_INT 1
73351: NEG
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73388: LD_ADDR_VAR 0 47
73392: PUSH
73393: LD_INT 0
73395: PUSH
73396: LD_INT 0
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 0
73405: PUSH
73406: LD_INT 1
73408: NEG
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 1
73416: PUSH
73417: LD_INT 0
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: LD_INT 1
73426: PUSH
73427: LD_INT 1
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 0
73436: PUSH
73437: LD_INT 1
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 1
73446: NEG
73447: PUSH
73448: LD_INT 0
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: LD_INT 1
73457: NEG
73458: PUSH
73459: LD_INT 1
73461: NEG
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 1
73469: NEG
73470: PUSH
73471: LD_INT 2
73473: NEG
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 0
73481: PUSH
73482: LD_INT 2
73484: NEG
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: PUSH
73490: LD_INT 1
73492: PUSH
73493: LD_INT 1
73495: NEG
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 2
73503: NEG
73504: PUSH
73505: LD_INT 1
73507: NEG
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PUSH
73513: LD_INT 2
73515: NEG
73516: PUSH
73517: LD_INT 2
73519: NEG
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73539: LD_ADDR_VAR 0 48
73543: PUSH
73544: LD_INT 0
73546: PUSH
73547: LD_INT 0
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 0
73556: PUSH
73557: LD_INT 1
73559: NEG
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 1
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 1
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: LD_INT 0
73587: PUSH
73588: LD_INT 1
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 1
73597: NEG
73598: PUSH
73599: LD_INT 0
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: LD_INT 1
73608: NEG
73609: PUSH
73610: LD_INT 1
73612: NEG
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: LD_INT 1
73620: NEG
73621: PUSH
73622: LD_INT 2
73624: NEG
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: PUSH
73630: LD_INT 0
73632: PUSH
73633: LD_INT 2
73635: NEG
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 1
73643: PUSH
73644: LD_INT 1
73646: NEG
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 2
73654: PUSH
73655: LD_INT 0
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 2
73664: PUSH
73665: LD_INT 1
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73686: LD_ADDR_VAR 0 49
73690: PUSH
73691: LD_INT 0
73693: PUSH
73694: LD_INT 0
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 0
73703: PUSH
73704: LD_INT 1
73706: NEG
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 1
73714: PUSH
73715: LD_INT 0
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 1
73724: PUSH
73725: LD_INT 1
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: LD_INT 1
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 1
73744: NEG
73745: PUSH
73746: LD_INT 0
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: PUSH
73753: LD_INT 1
73755: NEG
73756: PUSH
73757: LD_INT 1
73759: NEG
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 1
73767: PUSH
73768: LD_INT 1
73770: NEG
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 2
73778: PUSH
73779: LD_INT 0
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 2
73788: PUSH
73789: LD_INT 1
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 2
73798: PUSH
73799: LD_INT 2
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 1
73808: PUSH
73809: LD_INT 2
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73830: LD_ADDR_VAR 0 50
73834: PUSH
73835: LD_INT 0
73837: PUSH
73838: LD_INT 0
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 0
73847: PUSH
73848: LD_INT 1
73850: NEG
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 1
73858: PUSH
73859: LD_INT 0
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 1
73868: PUSH
73869: LD_INT 1
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 0
73878: PUSH
73879: LD_INT 1
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 1
73888: NEG
73889: PUSH
73890: LD_INT 0
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 1
73899: NEG
73900: PUSH
73901: LD_INT 1
73903: NEG
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 2
73911: PUSH
73912: LD_INT 1
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 2
73921: PUSH
73922: LD_INT 2
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: LD_INT 1
73931: PUSH
73932: LD_INT 2
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 0
73941: PUSH
73942: LD_INT 2
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 1
73951: NEG
73952: PUSH
73953: LD_INT 1
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73974: LD_ADDR_VAR 0 51
73978: PUSH
73979: LD_INT 0
73981: PUSH
73982: LD_INT 0
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 0
73991: PUSH
73992: LD_INT 1
73994: NEG
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: PUSH
74000: LD_INT 1
74002: PUSH
74003: LD_INT 0
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 1
74012: PUSH
74013: LD_INT 1
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 0
74022: PUSH
74023: LD_INT 1
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 1
74032: NEG
74033: PUSH
74034: LD_INT 0
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 1
74043: NEG
74044: PUSH
74045: LD_INT 1
74047: NEG
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 1
74055: PUSH
74056: LD_INT 2
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 0
74065: PUSH
74066: LD_INT 2
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 1
74075: NEG
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 2
74086: NEG
74087: PUSH
74088: LD_INT 0
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 2
74097: NEG
74098: PUSH
74099: LD_INT 1
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74121: LD_ADDR_VAR 0 52
74125: PUSH
74126: LD_INT 0
74128: PUSH
74129: LD_INT 0
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: LD_INT 1
74141: NEG
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 1
74149: PUSH
74150: LD_INT 0
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 1
74159: PUSH
74160: LD_INT 1
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 0
74169: PUSH
74170: LD_INT 1
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 1
74179: NEG
74180: PUSH
74181: LD_INT 0
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 1
74190: NEG
74191: PUSH
74192: LD_INT 1
74194: NEG
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: PUSH
74200: LD_INT 1
74202: NEG
74203: PUSH
74204: LD_INT 2
74206: NEG
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 1
74214: NEG
74215: PUSH
74216: LD_INT 1
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: PUSH
74223: LD_INT 2
74225: NEG
74226: PUSH
74227: LD_INT 0
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PUSH
74234: LD_INT 2
74236: NEG
74237: PUSH
74238: LD_INT 1
74240: NEG
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 2
74248: NEG
74249: PUSH
74250: LD_INT 2
74252: NEG
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74272: LD_ADDR_VAR 0 53
74276: PUSH
74277: LD_INT 0
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 0
74289: PUSH
74290: LD_INT 1
74292: NEG
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 1
74300: PUSH
74301: LD_INT 0
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 1
74310: PUSH
74311: LD_INT 1
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 0
74320: PUSH
74321: LD_INT 1
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 1
74330: NEG
74331: PUSH
74332: LD_INT 0
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 1
74341: NEG
74342: PUSH
74343: LD_INT 1
74345: NEG
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: LD_INT 1
74353: NEG
74354: PUSH
74355: LD_INT 2
74357: NEG
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 0
74365: PUSH
74366: LD_INT 2
74368: NEG
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: LD_INT 1
74376: PUSH
74377: LD_INT 1
74379: NEG
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: LD_INT 2
74387: PUSH
74388: LD_INT 0
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 2
74397: PUSH
74398: LD_INT 1
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 2
74407: PUSH
74408: LD_INT 2
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 1
74417: PUSH
74418: LD_INT 2
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 0
74427: PUSH
74428: LD_INT 2
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 1
74437: NEG
74438: PUSH
74439: LD_INT 1
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 2
74448: NEG
74449: PUSH
74450: LD_INT 0
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 2
74459: NEG
74460: PUSH
74461: LD_INT 1
74463: NEG
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 2
74471: NEG
74472: PUSH
74473: LD_INT 2
74475: NEG
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74502: LD_ADDR_VAR 0 54
74506: PUSH
74507: LD_INT 0
74509: PUSH
74510: LD_INT 0
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 0
74519: PUSH
74520: LD_INT 1
74522: NEG
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 1
74530: PUSH
74531: LD_INT 0
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 1
74540: PUSH
74541: LD_INT 1
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 0
74550: PUSH
74551: LD_INT 1
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 1
74560: NEG
74561: PUSH
74562: LD_INT 0
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 1
74571: NEG
74572: PUSH
74573: LD_INT 1
74575: NEG
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PUSH
74581: LD_INT 1
74583: NEG
74584: PUSH
74585: LD_INT 2
74587: NEG
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: LD_INT 0
74595: PUSH
74596: LD_INT 2
74598: NEG
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: PUSH
74604: LD_INT 1
74606: PUSH
74607: LD_INT 1
74609: NEG
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: LD_INT 2
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: LD_INT 1
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PUSH
74635: LD_INT 2
74637: PUSH
74638: LD_INT 2
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PUSH
74645: LD_INT 1
74647: PUSH
74648: LD_INT 2
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 0
74657: PUSH
74658: LD_INT 2
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: LD_INT 1
74667: NEG
74668: PUSH
74669: LD_INT 1
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 2
74678: NEG
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 2
74689: NEG
74690: PUSH
74691: LD_INT 1
74693: NEG
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 2
74701: NEG
74702: PUSH
74703: LD_INT 2
74705: NEG
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74732: LD_ADDR_VAR 0 55
74736: PUSH
74737: LD_INT 0
74739: PUSH
74740: LD_INT 0
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 0
74749: PUSH
74750: LD_INT 1
74752: NEG
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 1
74760: PUSH
74761: LD_INT 0
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PUSH
74768: LD_INT 1
74770: PUSH
74771: LD_INT 1
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: PUSH
74778: LD_INT 0
74780: PUSH
74781: LD_INT 1
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: PUSH
74788: LD_INT 1
74790: NEG
74791: PUSH
74792: LD_INT 0
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 1
74801: NEG
74802: PUSH
74803: LD_INT 1
74805: NEG
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 1
74813: NEG
74814: PUSH
74815: LD_INT 2
74817: NEG
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: PUSH
74823: LD_INT 0
74825: PUSH
74826: LD_INT 2
74828: NEG
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: LD_INT 1
74836: PUSH
74837: LD_INT 1
74839: NEG
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PUSH
74845: LD_INT 2
74847: PUSH
74848: LD_INT 0
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 2
74857: PUSH
74858: LD_INT 1
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 2
74867: PUSH
74868: LD_INT 2
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: PUSH
74875: LD_INT 1
74877: PUSH
74878: LD_INT 2
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 0
74887: PUSH
74888: LD_INT 2
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 1
74897: NEG
74898: PUSH
74899: LD_INT 1
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 2
74908: NEG
74909: PUSH
74910: LD_INT 0
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 2
74919: NEG
74920: PUSH
74921: LD_INT 1
74923: NEG
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: LD_INT 2
74931: NEG
74932: PUSH
74933: LD_INT 2
74935: NEG
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74962: LD_ADDR_VAR 0 56
74966: PUSH
74967: LD_INT 0
74969: PUSH
74970: LD_INT 0
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 0
74979: PUSH
74980: LD_INT 1
74982: NEG
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: PUSH
74988: LD_INT 1
74990: PUSH
74991: LD_INT 0
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 1
75000: PUSH
75001: LD_INT 1
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 0
75010: PUSH
75011: LD_INT 1
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 1
75020: NEG
75021: PUSH
75022: LD_INT 0
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 1
75031: NEG
75032: PUSH
75033: LD_INT 1
75035: NEG
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 1
75043: NEG
75044: PUSH
75045: LD_INT 2
75047: NEG
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: LD_INT 0
75055: PUSH
75056: LD_INT 2
75058: NEG
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: PUSH
75064: LD_INT 1
75066: PUSH
75067: LD_INT 1
75069: NEG
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: LD_INT 2
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 2
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: LD_INT 2
75097: PUSH
75098: LD_INT 2
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: PUSH
75105: LD_INT 1
75107: PUSH
75108: LD_INT 2
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 0
75117: PUSH
75118: LD_INT 2
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: LD_INT 1
75127: NEG
75128: PUSH
75129: LD_INT 1
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: PUSH
75136: LD_INT 2
75138: NEG
75139: PUSH
75140: LD_INT 0
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 2
75149: NEG
75150: PUSH
75151: LD_INT 1
75153: NEG
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 2
75161: NEG
75162: PUSH
75163: LD_INT 2
75165: NEG
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75192: LD_ADDR_VAR 0 57
75196: PUSH
75197: LD_INT 0
75199: PUSH
75200: LD_INT 0
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PUSH
75207: LD_INT 0
75209: PUSH
75210: LD_INT 1
75212: NEG
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: LD_INT 1
75220: PUSH
75221: LD_INT 0
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: PUSH
75228: LD_INT 1
75230: PUSH
75231: LD_INT 1
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 0
75240: PUSH
75241: LD_INT 1
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: PUSH
75248: LD_INT 1
75250: NEG
75251: PUSH
75252: LD_INT 0
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PUSH
75259: LD_INT 1
75261: NEG
75262: PUSH
75263: LD_INT 1
75265: NEG
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 1
75273: NEG
75274: PUSH
75275: LD_INT 2
75277: NEG
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 0
75285: PUSH
75286: LD_INT 2
75288: NEG
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: LD_INT 1
75296: PUSH
75297: LD_INT 1
75299: NEG
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 2
75307: PUSH
75308: LD_INT 0
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 2
75317: PUSH
75318: LD_INT 1
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: PUSH
75325: LD_INT 2
75327: PUSH
75328: LD_INT 2
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: LD_INT 1
75337: PUSH
75338: LD_INT 2
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: LD_INT 0
75347: PUSH
75348: LD_INT 2
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: LD_INT 1
75357: NEG
75358: PUSH
75359: LD_INT 1
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 2
75368: NEG
75369: PUSH
75370: LD_INT 0
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: PUSH
75377: LD_INT 2
75379: NEG
75380: PUSH
75381: LD_INT 1
75383: NEG
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: LD_INT 2
75391: NEG
75392: PUSH
75393: LD_INT 2
75395: NEG
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75422: LD_ADDR_VAR 0 58
75426: PUSH
75427: LD_INT 0
75429: PUSH
75430: LD_INT 0
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: LD_INT 0
75439: PUSH
75440: LD_INT 1
75442: NEG
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: PUSH
75448: LD_INT 1
75450: PUSH
75451: LD_INT 0
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PUSH
75458: LD_INT 1
75460: PUSH
75461: LD_INT 1
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: PUSH
75468: LD_INT 0
75470: PUSH
75471: LD_INT 1
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PUSH
75478: LD_INT 1
75480: NEG
75481: PUSH
75482: LD_INT 0
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 1
75491: NEG
75492: PUSH
75493: LD_INT 1
75495: NEG
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: PUSH
75501: LD_INT 1
75503: NEG
75504: PUSH
75505: LD_INT 2
75507: NEG
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: PUSH
75513: LD_INT 0
75515: PUSH
75516: LD_INT 2
75518: NEG
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: LD_INT 1
75526: PUSH
75527: LD_INT 1
75529: NEG
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 2
75537: PUSH
75538: LD_INT 0
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 2
75547: PUSH
75548: LD_INT 1
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 2
75557: PUSH
75558: LD_INT 2
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 1
75567: PUSH
75568: LD_INT 2
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 0
75577: PUSH
75578: LD_INT 2
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 1
75587: NEG
75588: PUSH
75589: LD_INT 1
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: LD_INT 2
75598: NEG
75599: PUSH
75600: LD_INT 0
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 2
75609: NEG
75610: PUSH
75611: LD_INT 1
75613: NEG
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 2
75621: NEG
75622: PUSH
75623: LD_INT 2
75625: NEG
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75652: LD_ADDR_VAR 0 59
75656: PUSH
75657: LD_INT 0
75659: PUSH
75660: LD_INT 0
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: PUSH
75667: LD_INT 0
75669: PUSH
75670: LD_INT 1
75672: NEG
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: PUSH
75678: LD_INT 1
75680: PUSH
75681: LD_INT 0
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 1
75690: PUSH
75691: LD_INT 1
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 0
75700: PUSH
75701: LD_INT 1
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 1
75710: NEG
75711: PUSH
75712: LD_INT 0
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 1
75721: NEG
75722: PUSH
75723: LD_INT 1
75725: NEG
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75740: LD_ADDR_VAR 0 60
75744: PUSH
75745: LD_INT 0
75747: PUSH
75748: LD_INT 0
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: LD_INT 0
75757: PUSH
75758: LD_INT 1
75760: NEG
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: LD_INT 1
75768: PUSH
75769: LD_INT 0
75771: PUSH
75772: EMPTY
75773: LIST
75774: LIST
75775: PUSH
75776: LD_INT 1
75778: PUSH
75779: LD_INT 1
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 0
75788: PUSH
75789: LD_INT 1
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 1
75798: NEG
75799: PUSH
75800: LD_INT 0
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: LD_INT 1
75809: NEG
75810: PUSH
75811: LD_INT 1
75813: NEG
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75828: LD_ADDR_VAR 0 61
75832: PUSH
75833: LD_INT 0
75835: PUSH
75836: LD_INT 0
75838: PUSH
75839: EMPTY
75840: LIST
75841: LIST
75842: PUSH
75843: LD_INT 0
75845: PUSH
75846: LD_INT 1
75848: NEG
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PUSH
75854: LD_INT 1
75856: PUSH
75857: LD_INT 0
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: PUSH
75864: LD_INT 1
75866: PUSH
75867: LD_INT 1
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 0
75876: PUSH
75877: LD_INT 1
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PUSH
75884: LD_INT 1
75886: NEG
75887: PUSH
75888: LD_INT 0
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 1
75897: NEG
75898: PUSH
75899: LD_INT 1
75901: NEG
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75916: LD_ADDR_VAR 0 62
75920: PUSH
75921: LD_INT 0
75923: PUSH
75924: LD_INT 0
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: LD_INT 0
75933: PUSH
75934: LD_INT 1
75936: NEG
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PUSH
75942: LD_INT 1
75944: PUSH
75945: LD_INT 0
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: LD_INT 1
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: LD_INT 1
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: PUSH
75972: LD_INT 1
75974: NEG
75975: PUSH
75976: LD_INT 0
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PUSH
75983: LD_INT 1
75985: NEG
75986: PUSH
75987: LD_INT 1
75989: NEG
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76004: LD_ADDR_VAR 0 63
76008: PUSH
76009: LD_INT 0
76011: PUSH
76012: LD_INT 0
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 0
76021: PUSH
76022: LD_INT 1
76024: NEG
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: PUSH
76030: LD_INT 1
76032: PUSH
76033: LD_INT 0
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 1
76042: PUSH
76043: LD_INT 1
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 0
76052: PUSH
76053: LD_INT 1
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: LD_INT 1
76062: NEG
76063: PUSH
76064: LD_INT 0
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PUSH
76071: LD_INT 1
76073: NEG
76074: PUSH
76075: LD_INT 1
76077: NEG
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76092: LD_ADDR_VAR 0 64
76096: PUSH
76097: LD_INT 0
76099: PUSH
76100: LD_INT 0
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PUSH
76107: LD_INT 0
76109: PUSH
76110: LD_INT 1
76112: NEG
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: LD_INT 1
76120: PUSH
76121: LD_INT 0
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PUSH
76128: LD_INT 1
76130: PUSH
76131: LD_INT 1
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: PUSH
76138: LD_INT 0
76140: PUSH
76141: LD_INT 1
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 1
76150: NEG
76151: PUSH
76152: LD_INT 0
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 1
76161: NEG
76162: PUSH
76163: LD_INT 1
76165: NEG
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: LIST
76178: LIST
76179: ST_TO_ADDR
// end ; 1 :
76180: GO 82077
76182: LD_INT 1
76184: DOUBLE
76185: EQUAL
76186: IFTRUE 76190
76188: GO 78813
76190: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76191: LD_ADDR_VAR 0 11
76195: PUSH
76196: LD_INT 1
76198: NEG
76199: PUSH
76200: LD_INT 3
76202: NEG
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PUSH
76208: LD_INT 0
76210: PUSH
76211: LD_INT 3
76213: NEG
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 1
76221: PUSH
76222: LD_INT 2
76224: NEG
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: LIST
76234: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76235: LD_ADDR_VAR 0 12
76239: PUSH
76240: LD_INT 2
76242: PUSH
76243: LD_INT 1
76245: NEG
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 3
76253: PUSH
76254: LD_INT 0
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 3
76263: PUSH
76264: LD_INT 1
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: LIST
76275: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76276: LD_ADDR_VAR 0 13
76280: PUSH
76281: LD_INT 3
76283: PUSH
76284: LD_INT 2
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 3
76293: PUSH
76294: LD_INT 3
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 2
76303: PUSH
76304: LD_INT 3
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: LIST
76315: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76316: LD_ADDR_VAR 0 14
76320: PUSH
76321: LD_INT 1
76323: PUSH
76324: LD_INT 3
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 0
76333: PUSH
76334: LD_INT 3
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 1
76343: NEG
76344: PUSH
76345: LD_INT 2
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: LIST
76356: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76357: LD_ADDR_VAR 0 15
76361: PUSH
76362: LD_INT 2
76364: NEG
76365: PUSH
76366: LD_INT 1
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 3
76375: NEG
76376: PUSH
76377: LD_INT 0
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: LD_INT 3
76386: NEG
76387: PUSH
76388: LD_INT 1
76390: NEG
76391: PUSH
76392: EMPTY
76393: LIST
76394: LIST
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76401: LD_ADDR_VAR 0 16
76405: PUSH
76406: LD_INT 2
76408: NEG
76409: PUSH
76410: LD_INT 3
76412: NEG
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: LD_INT 3
76420: NEG
76421: PUSH
76422: LD_INT 2
76424: NEG
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 3
76432: NEG
76433: PUSH
76434: LD_INT 3
76436: NEG
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: LIST
76446: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76447: LD_ADDR_VAR 0 17
76451: PUSH
76452: LD_INT 1
76454: NEG
76455: PUSH
76456: LD_INT 3
76458: NEG
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 0
76466: PUSH
76467: LD_INT 3
76469: NEG
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: PUSH
76475: LD_INT 1
76477: PUSH
76478: LD_INT 2
76480: NEG
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: LIST
76490: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76491: LD_ADDR_VAR 0 18
76495: PUSH
76496: LD_INT 2
76498: PUSH
76499: LD_INT 1
76501: NEG
76502: PUSH
76503: EMPTY
76504: LIST
76505: LIST
76506: PUSH
76507: LD_INT 3
76509: PUSH
76510: LD_INT 0
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: PUSH
76517: LD_INT 3
76519: PUSH
76520: LD_INT 1
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: LIST
76531: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76532: LD_ADDR_VAR 0 19
76536: PUSH
76537: LD_INT 3
76539: PUSH
76540: LD_INT 2
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: PUSH
76547: LD_INT 3
76549: PUSH
76550: LD_INT 3
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 2
76559: PUSH
76560: LD_INT 3
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: LIST
76571: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76572: LD_ADDR_VAR 0 20
76576: PUSH
76577: LD_INT 1
76579: PUSH
76580: LD_INT 3
76582: PUSH
76583: EMPTY
76584: LIST
76585: LIST
76586: PUSH
76587: LD_INT 0
76589: PUSH
76590: LD_INT 3
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: PUSH
76597: LD_INT 1
76599: NEG
76600: PUSH
76601: LD_INT 2
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: LIST
76612: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76613: LD_ADDR_VAR 0 21
76617: PUSH
76618: LD_INT 2
76620: NEG
76621: PUSH
76622: LD_INT 1
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PUSH
76629: LD_INT 3
76631: NEG
76632: PUSH
76633: LD_INT 0
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 3
76642: NEG
76643: PUSH
76644: LD_INT 1
76646: NEG
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: LIST
76656: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76657: LD_ADDR_VAR 0 22
76661: PUSH
76662: LD_INT 2
76664: NEG
76665: PUSH
76666: LD_INT 3
76668: NEG
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 3
76676: NEG
76677: PUSH
76678: LD_INT 2
76680: NEG
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 3
76688: NEG
76689: PUSH
76690: LD_INT 3
76692: NEG
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: LIST
76702: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76703: LD_ADDR_VAR 0 23
76707: PUSH
76708: LD_INT 0
76710: PUSH
76711: LD_INT 3
76713: NEG
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: PUSH
76719: LD_INT 1
76721: NEG
76722: PUSH
76723: LD_INT 4
76725: NEG
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: LD_INT 3
76736: NEG
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: LIST
76746: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76747: LD_ADDR_VAR 0 24
76751: PUSH
76752: LD_INT 3
76754: PUSH
76755: LD_INT 0
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: PUSH
76762: LD_INT 3
76764: PUSH
76765: LD_INT 1
76767: NEG
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 4
76775: PUSH
76776: LD_INT 1
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: LIST
76787: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76788: LD_ADDR_VAR 0 25
76792: PUSH
76793: LD_INT 3
76795: PUSH
76796: LD_INT 3
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: PUSH
76803: LD_INT 4
76805: PUSH
76806: LD_INT 3
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: PUSH
76813: LD_INT 3
76815: PUSH
76816: LD_INT 4
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: LIST
76827: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76828: LD_ADDR_VAR 0 26
76832: PUSH
76833: LD_INT 0
76835: PUSH
76836: LD_INT 3
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 1
76845: PUSH
76846: LD_INT 4
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: PUSH
76853: LD_INT 1
76855: NEG
76856: PUSH
76857: LD_INT 3
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: LIST
76868: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76869: LD_ADDR_VAR 0 27
76873: PUSH
76874: LD_INT 3
76876: NEG
76877: PUSH
76878: LD_INT 0
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: PUSH
76885: LD_INT 3
76887: NEG
76888: PUSH
76889: LD_INT 1
76891: PUSH
76892: EMPTY
76893: LIST
76894: LIST
76895: PUSH
76896: LD_INT 4
76898: NEG
76899: PUSH
76900: LD_INT 1
76902: NEG
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: LIST
76912: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76913: LD_ADDR_VAR 0 28
76917: PUSH
76918: LD_INT 3
76920: NEG
76921: PUSH
76922: LD_INT 3
76924: NEG
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: PUSH
76930: LD_INT 3
76932: NEG
76933: PUSH
76934: LD_INT 4
76936: NEG
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: LD_INT 4
76944: NEG
76945: PUSH
76946: LD_INT 3
76948: NEG
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: LIST
76958: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76959: LD_ADDR_VAR 0 29
76963: PUSH
76964: LD_INT 1
76966: NEG
76967: PUSH
76968: LD_INT 3
76970: NEG
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: PUSH
76976: LD_INT 0
76978: PUSH
76979: LD_INT 3
76981: NEG
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 1
76989: PUSH
76990: LD_INT 2
76992: NEG
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 1
77000: NEG
77001: PUSH
77002: LD_INT 4
77004: NEG
77005: PUSH
77006: EMPTY
77007: LIST
77008: LIST
77009: PUSH
77010: LD_INT 0
77012: PUSH
77013: LD_INT 4
77015: NEG
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 1
77023: PUSH
77024: LD_INT 3
77026: NEG
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 1
77034: NEG
77035: PUSH
77036: LD_INT 5
77038: NEG
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: PUSH
77044: LD_INT 0
77046: PUSH
77047: LD_INT 5
77049: NEG
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: PUSH
77055: LD_INT 1
77057: PUSH
77058: LD_INT 4
77060: NEG
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PUSH
77066: LD_INT 1
77068: NEG
77069: PUSH
77070: LD_INT 6
77072: NEG
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 0
77080: PUSH
77081: LD_INT 6
77083: NEG
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: LD_INT 1
77091: PUSH
77092: LD_INT 5
77094: NEG
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: LIST
77113: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
77114: LD_ADDR_VAR 0 30
77118: PUSH
77119: LD_INT 2
77121: PUSH
77122: LD_INT 1
77124: NEG
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 3
77132: PUSH
77133: LD_INT 0
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: LD_INT 3
77142: PUSH
77143: LD_INT 1
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: PUSH
77150: LD_INT 3
77152: PUSH
77153: LD_INT 1
77155: NEG
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 4
77163: PUSH
77164: LD_INT 0
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 4
77173: PUSH
77174: LD_INT 1
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: PUSH
77181: LD_INT 4
77183: PUSH
77184: LD_INT 1
77186: NEG
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: PUSH
77192: LD_INT 5
77194: PUSH
77195: LD_INT 0
77197: PUSH
77198: EMPTY
77199: LIST
77200: LIST
77201: PUSH
77202: LD_INT 5
77204: PUSH
77205: LD_INT 1
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: PUSH
77212: LD_INT 5
77214: PUSH
77215: LD_INT 1
77217: NEG
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: PUSH
77223: LD_INT 6
77225: PUSH
77226: LD_INT 0
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 6
77235: PUSH
77236: LD_INT 1
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: LIST
77247: LIST
77248: LIST
77249: LIST
77250: LIST
77251: LIST
77252: LIST
77253: LIST
77254: LIST
77255: LIST
77256: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
77257: LD_ADDR_VAR 0 31
77261: PUSH
77262: LD_INT 3
77264: PUSH
77265: LD_INT 2
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: LD_INT 3
77274: PUSH
77275: LD_INT 3
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 2
77284: PUSH
77285: LD_INT 3
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PUSH
77292: LD_INT 4
77294: PUSH
77295: LD_INT 3
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PUSH
77302: LD_INT 4
77304: PUSH
77305: LD_INT 4
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 3
77314: PUSH
77315: LD_INT 4
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 5
77324: PUSH
77325: LD_INT 4
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: LD_INT 5
77334: PUSH
77335: LD_INT 5
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: PUSH
77342: LD_INT 4
77344: PUSH
77345: LD_INT 5
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: PUSH
77352: LD_INT 6
77354: PUSH
77355: LD_INT 5
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: LD_INT 6
77364: PUSH
77365: LD_INT 6
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PUSH
77372: LD_INT 5
77374: PUSH
77375: LD_INT 6
77377: PUSH
77378: EMPTY
77379: LIST
77380: LIST
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77396: LD_ADDR_VAR 0 32
77400: PUSH
77401: LD_INT 1
77403: PUSH
77404: LD_INT 3
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: PUSH
77411: LD_INT 0
77413: PUSH
77414: LD_INT 3
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: LD_INT 1
77423: NEG
77424: PUSH
77425: LD_INT 2
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_INT 1
77434: PUSH
77435: LD_INT 4
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: LD_INT 0
77444: PUSH
77445: LD_INT 4
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: PUSH
77452: LD_INT 1
77454: NEG
77455: PUSH
77456: LD_INT 3
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_INT 1
77465: PUSH
77466: LD_INT 5
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: PUSH
77473: LD_INT 0
77475: PUSH
77476: LD_INT 5
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 1
77485: NEG
77486: PUSH
77487: LD_INT 4
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 1
77496: PUSH
77497: LD_INT 6
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: LD_INT 0
77506: PUSH
77507: LD_INT 6
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PUSH
77514: LD_INT 1
77516: NEG
77517: PUSH
77518: LD_INT 5
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77539: LD_ADDR_VAR 0 33
77543: PUSH
77544: LD_INT 2
77546: NEG
77547: PUSH
77548: LD_INT 1
77550: PUSH
77551: EMPTY
77552: LIST
77553: LIST
77554: PUSH
77555: LD_INT 3
77557: NEG
77558: PUSH
77559: LD_INT 0
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: PUSH
77566: LD_INT 3
77568: NEG
77569: PUSH
77570: LD_INT 1
77572: NEG
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 3
77580: NEG
77581: PUSH
77582: LD_INT 1
77584: PUSH
77585: EMPTY
77586: LIST
77587: LIST
77588: PUSH
77589: LD_INT 4
77591: NEG
77592: PUSH
77593: LD_INT 0
77595: PUSH
77596: EMPTY
77597: LIST
77598: LIST
77599: PUSH
77600: LD_INT 4
77602: NEG
77603: PUSH
77604: LD_INT 1
77606: NEG
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PUSH
77612: LD_INT 4
77614: NEG
77615: PUSH
77616: LD_INT 1
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: PUSH
77623: LD_INT 5
77625: NEG
77626: PUSH
77627: LD_INT 0
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 5
77636: NEG
77637: PUSH
77638: LD_INT 1
77640: NEG
77641: PUSH
77642: EMPTY
77643: LIST
77644: LIST
77645: PUSH
77646: LD_INT 5
77648: NEG
77649: PUSH
77650: LD_INT 1
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: PUSH
77657: LD_INT 6
77659: NEG
77660: PUSH
77661: LD_INT 0
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: PUSH
77668: LD_INT 6
77670: NEG
77671: PUSH
77672: LD_INT 1
77674: NEG
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: LIST
77686: LIST
77687: LIST
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77694: LD_ADDR_VAR 0 34
77698: PUSH
77699: LD_INT 2
77701: NEG
77702: PUSH
77703: LD_INT 3
77705: NEG
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 3
77713: NEG
77714: PUSH
77715: LD_INT 2
77717: NEG
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PUSH
77723: LD_INT 3
77725: NEG
77726: PUSH
77727: LD_INT 3
77729: NEG
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 3
77737: NEG
77738: PUSH
77739: LD_INT 4
77741: NEG
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: PUSH
77747: LD_INT 4
77749: NEG
77750: PUSH
77751: LD_INT 3
77753: NEG
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: PUSH
77759: LD_INT 4
77761: NEG
77762: PUSH
77763: LD_INT 4
77765: NEG
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 4
77773: NEG
77774: PUSH
77775: LD_INT 5
77777: NEG
77778: PUSH
77779: EMPTY
77780: LIST
77781: LIST
77782: PUSH
77783: LD_INT 5
77785: NEG
77786: PUSH
77787: LD_INT 4
77789: NEG
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: PUSH
77795: LD_INT 5
77797: NEG
77798: PUSH
77799: LD_INT 5
77801: NEG
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PUSH
77807: LD_INT 5
77809: NEG
77810: PUSH
77811: LD_INT 6
77813: NEG
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: LD_INT 6
77821: NEG
77822: PUSH
77823: LD_INT 5
77825: NEG
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: PUSH
77831: LD_INT 6
77833: NEG
77834: PUSH
77835: LD_INT 6
77837: NEG
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77857: LD_ADDR_VAR 0 41
77861: PUSH
77862: LD_INT 0
77864: PUSH
77865: LD_INT 2
77867: NEG
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: PUSH
77873: LD_INT 1
77875: NEG
77876: PUSH
77877: LD_INT 3
77879: NEG
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PUSH
77885: LD_INT 1
77887: PUSH
77888: LD_INT 2
77890: NEG
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: LIST
77900: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77901: LD_ADDR_VAR 0 42
77905: PUSH
77906: LD_INT 2
77908: PUSH
77909: LD_INT 0
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: PUSH
77916: LD_INT 2
77918: PUSH
77919: LD_INT 1
77921: NEG
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: LD_INT 3
77929: PUSH
77930: LD_INT 1
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: EMPTY
77938: LIST
77939: LIST
77940: LIST
77941: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77942: LD_ADDR_VAR 0 43
77946: PUSH
77947: LD_INT 2
77949: PUSH
77950: LD_INT 2
77952: PUSH
77953: EMPTY
77954: LIST
77955: LIST
77956: PUSH
77957: LD_INT 3
77959: PUSH
77960: LD_INT 2
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: PUSH
77967: LD_INT 2
77969: PUSH
77970: LD_INT 3
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: LIST
77981: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77982: LD_ADDR_VAR 0 44
77986: PUSH
77987: LD_INT 0
77989: PUSH
77990: LD_INT 2
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 1
77999: PUSH
78000: LD_INT 3
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PUSH
78007: LD_INT 1
78009: NEG
78010: PUSH
78011: LD_INT 2
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: EMPTY
78019: LIST
78020: LIST
78021: LIST
78022: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
78023: LD_ADDR_VAR 0 45
78027: PUSH
78028: LD_INT 2
78030: NEG
78031: PUSH
78032: LD_INT 0
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: LD_INT 2
78041: NEG
78042: PUSH
78043: LD_INT 1
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: LD_INT 3
78052: NEG
78053: PUSH
78054: LD_INT 1
78056: NEG
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: LIST
78066: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
78067: LD_ADDR_VAR 0 46
78071: PUSH
78072: LD_INT 2
78074: NEG
78075: PUSH
78076: LD_INT 2
78078: NEG
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: PUSH
78084: LD_INT 2
78086: NEG
78087: PUSH
78088: LD_INT 3
78090: NEG
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: PUSH
78096: LD_INT 3
78098: NEG
78099: PUSH
78100: LD_INT 2
78102: NEG
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: LIST
78112: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
78113: LD_ADDR_VAR 0 47
78117: PUSH
78118: LD_INT 2
78120: NEG
78121: PUSH
78122: LD_INT 3
78124: NEG
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PUSH
78130: LD_INT 1
78132: NEG
78133: PUSH
78134: LD_INT 3
78136: NEG
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
78146: LD_ADDR_VAR 0 48
78150: PUSH
78151: LD_INT 1
78153: PUSH
78154: LD_INT 2
78156: NEG
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PUSH
78162: LD_INT 2
78164: PUSH
78165: LD_INT 1
78167: NEG
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
78177: LD_ADDR_VAR 0 49
78181: PUSH
78182: LD_INT 3
78184: PUSH
78185: LD_INT 1
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: PUSH
78192: LD_INT 3
78194: PUSH
78195: LD_INT 2
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
78206: LD_ADDR_VAR 0 50
78210: PUSH
78211: LD_INT 2
78213: PUSH
78214: LD_INT 3
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: PUSH
78221: LD_INT 1
78223: PUSH
78224: LD_INT 3
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78235: LD_ADDR_VAR 0 51
78239: PUSH
78240: LD_INT 1
78242: NEG
78243: PUSH
78244: LD_INT 2
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PUSH
78251: LD_INT 2
78253: NEG
78254: PUSH
78255: LD_INT 1
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78266: LD_ADDR_VAR 0 52
78270: PUSH
78271: LD_INT 3
78273: NEG
78274: PUSH
78275: LD_INT 1
78277: NEG
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: PUSH
78283: LD_INT 3
78285: NEG
78286: PUSH
78287: LD_INT 2
78289: NEG
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78299: LD_ADDR_VAR 0 53
78303: PUSH
78304: LD_INT 1
78306: NEG
78307: PUSH
78308: LD_INT 3
78310: NEG
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 0
78318: PUSH
78319: LD_INT 3
78321: NEG
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 1
78329: PUSH
78330: LD_INT 2
78332: NEG
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: LIST
78342: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78343: LD_ADDR_VAR 0 54
78347: PUSH
78348: LD_INT 2
78350: PUSH
78351: LD_INT 1
78353: NEG
78354: PUSH
78355: EMPTY
78356: LIST
78357: LIST
78358: PUSH
78359: LD_INT 3
78361: PUSH
78362: LD_INT 0
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PUSH
78369: LD_INT 3
78371: PUSH
78372: LD_INT 1
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: LIST
78383: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78384: LD_ADDR_VAR 0 55
78388: PUSH
78389: LD_INT 3
78391: PUSH
78392: LD_INT 2
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 3
78401: PUSH
78402: LD_INT 3
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 2
78411: PUSH
78412: LD_INT 3
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: LIST
78423: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78424: LD_ADDR_VAR 0 56
78428: PUSH
78429: LD_INT 1
78431: PUSH
78432: LD_INT 3
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: LD_INT 0
78441: PUSH
78442: LD_INT 3
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: LD_INT 1
78451: NEG
78452: PUSH
78453: LD_INT 2
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: LIST
78464: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78465: LD_ADDR_VAR 0 57
78469: PUSH
78470: LD_INT 2
78472: NEG
78473: PUSH
78474: LD_INT 1
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: PUSH
78481: LD_INT 3
78483: NEG
78484: PUSH
78485: LD_INT 0
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 3
78494: NEG
78495: PUSH
78496: LD_INT 1
78498: NEG
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: LIST
78508: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78509: LD_ADDR_VAR 0 58
78513: PUSH
78514: LD_INT 2
78516: NEG
78517: PUSH
78518: LD_INT 3
78520: NEG
78521: PUSH
78522: EMPTY
78523: LIST
78524: LIST
78525: PUSH
78526: LD_INT 3
78528: NEG
78529: PUSH
78530: LD_INT 2
78532: NEG
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 3
78540: NEG
78541: PUSH
78542: LD_INT 3
78544: NEG
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: LIST
78554: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78555: LD_ADDR_VAR 0 59
78559: PUSH
78560: LD_INT 1
78562: NEG
78563: PUSH
78564: LD_INT 2
78566: NEG
78567: PUSH
78568: EMPTY
78569: LIST
78570: LIST
78571: PUSH
78572: LD_INT 0
78574: PUSH
78575: LD_INT 2
78577: NEG
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: PUSH
78583: LD_INT 1
78585: PUSH
78586: LD_INT 1
78588: NEG
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: LIST
78598: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78599: LD_ADDR_VAR 0 60
78603: PUSH
78604: LD_INT 1
78606: PUSH
78607: LD_INT 1
78609: NEG
78610: PUSH
78611: EMPTY
78612: LIST
78613: LIST
78614: PUSH
78615: LD_INT 2
78617: PUSH
78618: LD_INT 0
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: PUSH
78625: LD_INT 2
78627: PUSH
78628: LD_INT 1
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: LIST
78639: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78640: LD_ADDR_VAR 0 61
78644: PUSH
78645: LD_INT 2
78647: PUSH
78648: LD_INT 1
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PUSH
78655: LD_INT 2
78657: PUSH
78658: LD_INT 2
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PUSH
78665: LD_INT 1
78667: PUSH
78668: LD_INT 2
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: LIST
78679: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78680: LD_ADDR_VAR 0 62
78684: PUSH
78685: LD_INT 1
78687: PUSH
78688: LD_INT 2
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: PUSH
78695: LD_INT 0
78697: PUSH
78698: LD_INT 2
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: PUSH
78705: LD_INT 1
78707: NEG
78708: PUSH
78709: LD_INT 1
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: LIST
78720: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78721: LD_ADDR_VAR 0 63
78725: PUSH
78726: LD_INT 1
78728: NEG
78729: PUSH
78730: LD_INT 1
78732: PUSH
78733: EMPTY
78734: LIST
78735: LIST
78736: PUSH
78737: LD_INT 2
78739: NEG
78740: PUSH
78741: LD_INT 0
78743: PUSH
78744: EMPTY
78745: LIST
78746: LIST
78747: PUSH
78748: LD_INT 2
78750: NEG
78751: PUSH
78752: LD_INT 1
78754: NEG
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: LIST
78764: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78765: LD_ADDR_VAR 0 64
78769: PUSH
78770: LD_INT 1
78772: NEG
78773: PUSH
78774: LD_INT 2
78776: NEG
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: PUSH
78782: LD_INT 2
78784: NEG
78785: PUSH
78786: LD_INT 1
78788: NEG
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: PUSH
78794: LD_INT 2
78796: NEG
78797: PUSH
78798: LD_INT 2
78800: NEG
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: LIST
78810: ST_TO_ADDR
// end ; 2 :
78811: GO 82077
78813: LD_INT 2
78815: DOUBLE
78816: EQUAL
78817: IFTRUE 78821
78819: GO 82076
78821: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78822: LD_ADDR_VAR 0 29
78826: PUSH
78827: LD_INT 4
78829: PUSH
78830: LD_INT 0
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: PUSH
78837: LD_INT 4
78839: PUSH
78840: LD_INT 1
78842: NEG
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 5
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PUSH
78858: LD_INT 5
78860: PUSH
78861: LD_INT 1
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: LD_INT 4
78870: PUSH
78871: LD_INT 1
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: PUSH
78878: LD_INT 3
78880: PUSH
78881: LD_INT 0
78883: PUSH
78884: EMPTY
78885: LIST
78886: LIST
78887: PUSH
78888: LD_INT 3
78890: PUSH
78891: LD_INT 1
78893: NEG
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: PUSH
78899: LD_INT 3
78901: PUSH
78902: LD_INT 2
78904: NEG
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 5
78912: PUSH
78913: LD_INT 2
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PUSH
78920: LD_INT 3
78922: PUSH
78923: LD_INT 3
78925: PUSH
78926: EMPTY
78927: LIST
78928: LIST
78929: PUSH
78930: LD_INT 3
78932: PUSH
78933: LD_INT 2
78935: PUSH
78936: EMPTY
78937: LIST
78938: LIST
78939: PUSH
78940: LD_INT 4
78942: PUSH
78943: LD_INT 3
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: PUSH
78950: LD_INT 4
78952: PUSH
78953: LD_INT 4
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: LD_INT 3
78962: PUSH
78963: LD_INT 4
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 2
78972: PUSH
78973: LD_INT 3
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PUSH
78980: LD_INT 2
78982: PUSH
78983: LD_INT 2
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_INT 4
78992: PUSH
78993: LD_INT 2
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 2
79002: PUSH
79003: LD_INT 4
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 0
79012: PUSH
79013: LD_INT 4
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 0
79022: PUSH
79023: LD_INT 3
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 1
79032: PUSH
79033: LD_INT 4
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 1
79042: PUSH
79043: LD_INT 5
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 0
79052: PUSH
79053: LD_INT 5
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 1
79062: NEG
79063: PUSH
79064: LD_INT 4
79066: PUSH
79067: EMPTY
79068: LIST
79069: LIST
79070: PUSH
79071: LD_INT 1
79073: NEG
79074: PUSH
79075: LD_INT 3
79077: PUSH
79078: EMPTY
79079: LIST
79080: LIST
79081: PUSH
79082: LD_INT 2
79084: PUSH
79085: LD_INT 5
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: PUSH
79092: LD_INT 2
79094: NEG
79095: PUSH
79096: LD_INT 3
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: PUSH
79103: LD_INT 3
79105: NEG
79106: PUSH
79107: LD_INT 0
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: PUSH
79114: LD_INT 3
79116: NEG
79117: PUSH
79118: LD_INT 1
79120: NEG
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: PUSH
79126: LD_INT 2
79128: NEG
79129: PUSH
79130: LD_INT 0
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: LD_INT 2
79139: NEG
79140: PUSH
79141: LD_INT 1
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: PUSH
79148: LD_INT 3
79150: NEG
79151: PUSH
79152: LD_INT 1
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: PUSH
79159: LD_INT 4
79161: NEG
79162: PUSH
79163: LD_INT 0
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: PUSH
79170: LD_INT 4
79172: NEG
79173: PUSH
79174: LD_INT 1
79176: NEG
79177: PUSH
79178: EMPTY
79179: LIST
79180: LIST
79181: PUSH
79182: LD_INT 4
79184: NEG
79185: PUSH
79186: LD_INT 2
79188: NEG
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PUSH
79194: LD_INT 2
79196: NEG
79197: PUSH
79198: LD_INT 2
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: PUSH
79205: LD_INT 4
79207: NEG
79208: PUSH
79209: LD_INT 4
79211: NEG
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: PUSH
79217: LD_INT 4
79219: NEG
79220: PUSH
79221: LD_INT 5
79223: NEG
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: LD_INT 3
79231: NEG
79232: PUSH
79233: LD_INT 4
79235: NEG
79236: PUSH
79237: EMPTY
79238: LIST
79239: LIST
79240: PUSH
79241: LD_INT 3
79243: NEG
79244: PUSH
79245: LD_INT 3
79247: NEG
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: PUSH
79253: LD_INT 4
79255: NEG
79256: PUSH
79257: LD_INT 3
79259: NEG
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: PUSH
79265: LD_INT 5
79267: NEG
79268: PUSH
79269: LD_INT 4
79271: NEG
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: PUSH
79277: LD_INT 5
79279: NEG
79280: PUSH
79281: LD_INT 5
79283: NEG
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 3
79291: NEG
79292: PUSH
79293: LD_INT 5
79295: NEG
79296: PUSH
79297: EMPTY
79298: LIST
79299: LIST
79300: PUSH
79301: LD_INT 5
79303: NEG
79304: PUSH
79305: LD_INT 3
79307: NEG
79308: PUSH
79309: EMPTY
79310: LIST
79311: LIST
79312: PUSH
79313: EMPTY
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: LIST
79353: LIST
79354: LIST
79355: LIST
79356: LIST
79357: LIST
79358: LIST
79359: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
79360: LD_ADDR_VAR 0 30
79364: PUSH
79365: LD_INT 4
79367: PUSH
79368: LD_INT 4
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: PUSH
79375: LD_INT 4
79377: PUSH
79378: LD_INT 3
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: PUSH
79385: LD_INT 5
79387: PUSH
79388: LD_INT 4
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: PUSH
79395: LD_INT 5
79397: PUSH
79398: LD_INT 5
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: PUSH
79405: LD_INT 4
79407: PUSH
79408: LD_INT 5
79410: PUSH
79411: EMPTY
79412: LIST
79413: LIST
79414: PUSH
79415: LD_INT 3
79417: PUSH
79418: LD_INT 4
79420: PUSH
79421: EMPTY
79422: LIST
79423: LIST
79424: PUSH
79425: LD_INT 3
79427: PUSH
79428: LD_INT 3
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: LD_INT 5
79437: PUSH
79438: LD_INT 3
79440: PUSH
79441: EMPTY
79442: LIST
79443: LIST
79444: PUSH
79445: LD_INT 3
79447: PUSH
79448: LD_INT 5
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: PUSH
79455: LD_INT 0
79457: PUSH
79458: LD_INT 3
79460: PUSH
79461: EMPTY
79462: LIST
79463: LIST
79464: PUSH
79465: LD_INT 0
79467: PUSH
79468: LD_INT 2
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PUSH
79475: LD_INT 1
79477: PUSH
79478: LD_INT 3
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PUSH
79485: LD_INT 1
79487: PUSH
79488: LD_INT 4
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 0
79497: PUSH
79498: LD_INT 4
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 1
79507: NEG
79508: PUSH
79509: LD_INT 3
79511: PUSH
79512: EMPTY
79513: LIST
79514: LIST
79515: PUSH
79516: LD_INT 1
79518: NEG
79519: PUSH
79520: LD_INT 2
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: LD_INT 2
79529: PUSH
79530: LD_INT 4
79532: PUSH
79533: EMPTY
79534: LIST
79535: LIST
79536: PUSH
79537: LD_INT 2
79539: NEG
79540: PUSH
79541: LD_INT 2
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PUSH
79548: LD_INT 4
79550: NEG
79551: PUSH
79552: LD_INT 0
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: PUSH
79559: LD_INT 4
79561: NEG
79562: PUSH
79563: LD_INT 1
79565: NEG
79566: PUSH
79567: EMPTY
79568: LIST
79569: LIST
79570: PUSH
79571: LD_INT 3
79573: NEG
79574: PUSH
79575: LD_INT 0
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: LD_INT 3
79584: NEG
79585: PUSH
79586: LD_INT 1
79588: PUSH
79589: EMPTY
79590: LIST
79591: LIST
79592: PUSH
79593: LD_INT 4
79595: NEG
79596: PUSH
79597: LD_INT 1
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: PUSH
79604: LD_INT 5
79606: NEG
79607: PUSH
79608: LD_INT 0
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: PUSH
79615: LD_INT 5
79617: NEG
79618: PUSH
79619: LD_INT 1
79621: NEG
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: PUSH
79627: LD_INT 5
79629: NEG
79630: PUSH
79631: LD_INT 2
79633: NEG
79634: PUSH
79635: EMPTY
79636: LIST
79637: LIST
79638: PUSH
79639: LD_INT 3
79641: NEG
79642: PUSH
79643: LD_INT 2
79645: PUSH
79646: EMPTY
79647: LIST
79648: LIST
79649: PUSH
79650: LD_INT 3
79652: NEG
79653: PUSH
79654: LD_INT 3
79656: NEG
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: PUSH
79662: LD_INT 3
79664: NEG
79665: PUSH
79666: LD_INT 4
79668: NEG
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PUSH
79674: LD_INT 2
79676: NEG
79677: PUSH
79678: LD_INT 3
79680: NEG
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: PUSH
79686: LD_INT 2
79688: NEG
79689: PUSH
79690: LD_INT 2
79692: NEG
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: PUSH
79698: LD_INT 3
79700: NEG
79701: PUSH
79702: LD_INT 2
79704: NEG
79705: PUSH
79706: EMPTY
79707: LIST
79708: LIST
79709: PUSH
79710: LD_INT 4
79712: NEG
79713: PUSH
79714: LD_INT 3
79716: NEG
79717: PUSH
79718: EMPTY
79719: LIST
79720: LIST
79721: PUSH
79722: LD_INT 4
79724: NEG
79725: PUSH
79726: LD_INT 4
79728: NEG
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PUSH
79734: LD_INT 2
79736: NEG
79737: PUSH
79738: LD_INT 4
79740: NEG
79741: PUSH
79742: EMPTY
79743: LIST
79744: LIST
79745: PUSH
79746: LD_INT 4
79748: NEG
79749: PUSH
79750: LD_INT 2
79752: NEG
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: PUSH
79758: LD_INT 0
79760: PUSH
79761: LD_INT 4
79763: NEG
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 0
79771: PUSH
79772: LD_INT 5
79774: NEG
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: PUSH
79780: LD_INT 1
79782: PUSH
79783: LD_INT 4
79785: NEG
79786: PUSH
79787: EMPTY
79788: LIST
79789: LIST
79790: PUSH
79791: LD_INT 1
79793: PUSH
79794: LD_INT 3
79796: NEG
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: PUSH
79802: LD_INT 0
79804: PUSH
79805: LD_INT 3
79807: NEG
79808: PUSH
79809: EMPTY
79810: LIST
79811: LIST
79812: PUSH
79813: LD_INT 1
79815: NEG
79816: PUSH
79817: LD_INT 4
79819: NEG
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 1
79827: NEG
79828: PUSH
79829: LD_INT 5
79831: NEG
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: PUSH
79837: LD_INT 2
79839: PUSH
79840: LD_INT 3
79842: NEG
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: PUSH
79848: LD_INT 2
79850: NEG
79851: PUSH
79852: LD_INT 5
79854: NEG
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: LIST
79872: LIST
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: LIST
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: LIST
79890: LIST
79891: LIST
79892: LIST
79893: LIST
79894: LIST
79895: LIST
79896: LIST
79897: LIST
79898: LIST
79899: LIST
79900: LIST
79901: LIST
79902: LIST
79903: LIST
79904: LIST
79905: LIST
79906: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79907: LD_ADDR_VAR 0 31
79911: PUSH
79912: LD_INT 0
79914: PUSH
79915: LD_INT 4
79917: PUSH
79918: EMPTY
79919: LIST
79920: LIST
79921: PUSH
79922: LD_INT 0
79924: PUSH
79925: LD_INT 3
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: LD_INT 1
79934: PUSH
79935: LD_INT 4
79937: PUSH
79938: EMPTY
79939: LIST
79940: LIST
79941: PUSH
79942: LD_INT 1
79944: PUSH
79945: LD_INT 5
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: PUSH
79952: LD_INT 0
79954: PUSH
79955: LD_INT 5
79957: PUSH
79958: EMPTY
79959: LIST
79960: LIST
79961: PUSH
79962: LD_INT 1
79964: NEG
79965: PUSH
79966: LD_INT 4
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: PUSH
79973: LD_INT 1
79975: NEG
79976: PUSH
79977: LD_INT 3
79979: PUSH
79980: EMPTY
79981: LIST
79982: LIST
79983: PUSH
79984: LD_INT 2
79986: PUSH
79987: LD_INT 5
79989: PUSH
79990: EMPTY
79991: LIST
79992: LIST
79993: PUSH
79994: LD_INT 2
79996: NEG
79997: PUSH
79998: LD_INT 3
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: PUSH
80005: LD_INT 3
80007: NEG
80008: PUSH
80009: LD_INT 0
80011: PUSH
80012: EMPTY
80013: LIST
80014: LIST
80015: PUSH
80016: LD_INT 3
80018: NEG
80019: PUSH
80020: LD_INT 1
80022: NEG
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: LD_INT 2
80030: NEG
80031: PUSH
80032: LD_INT 0
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: PUSH
80039: LD_INT 2
80041: NEG
80042: PUSH
80043: LD_INT 1
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PUSH
80050: LD_INT 3
80052: NEG
80053: PUSH
80054: LD_INT 1
80056: PUSH
80057: EMPTY
80058: LIST
80059: LIST
80060: PUSH
80061: LD_INT 4
80063: NEG
80064: PUSH
80065: LD_INT 0
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: LD_INT 4
80074: NEG
80075: PUSH
80076: LD_INT 1
80078: NEG
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: PUSH
80084: LD_INT 4
80086: NEG
80087: PUSH
80088: LD_INT 2
80090: NEG
80091: PUSH
80092: EMPTY
80093: LIST
80094: LIST
80095: PUSH
80096: LD_INT 2
80098: NEG
80099: PUSH
80100: LD_INT 2
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 4
80109: NEG
80110: PUSH
80111: LD_INT 4
80113: NEG
80114: PUSH
80115: EMPTY
80116: LIST
80117: LIST
80118: PUSH
80119: LD_INT 4
80121: NEG
80122: PUSH
80123: LD_INT 5
80125: NEG
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PUSH
80131: LD_INT 3
80133: NEG
80134: PUSH
80135: LD_INT 4
80137: NEG
80138: PUSH
80139: EMPTY
80140: LIST
80141: LIST
80142: PUSH
80143: LD_INT 3
80145: NEG
80146: PUSH
80147: LD_INT 3
80149: NEG
80150: PUSH
80151: EMPTY
80152: LIST
80153: LIST
80154: PUSH
80155: LD_INT 4
80157: NEG
80158: PUSH
80159: LD_INT 3
80161: NEG
80162: PUSH
80163: EMPTY
80164: LIST
80165: LIST
80166: PUSH
80167: LD_INT 5
80169: NEG
80170: PUSH
80171: LD_INT 4
80173: NEG
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 5
80181: NEG
80182: PUSH
80183: LD_INT 5
80185: NEG
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: LD_INT 3
80193: NEG
80194: PUSH
80195: LD_INT 5
80197: NEG
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: PUSH
80203: LD_INT 5
80205: NEG
80206: PUSH
80207: LD_INT 3
80209: NEG
80210: PUSH
80211: EMPTY
80212: LIST
80213: LIST
80214: PUSH
80215: LD_INT 0
80217: PUSH
80218: LD_INT 3
80220: NEG
80221: PUSH
80222: EMPTY
80223: LIST
80224: LIST
80225: PUSH
80226: LD_INT 0
80228: PUSH
80229: LD_INT 4
80231: NEG
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: PUSH
80237: LD_INT 1
80239: PUSH
80240: LD_INT 3
80242: NEG
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: PUSH
80248: LD_INT 1
80250: PUSH
80251: LD_INT 2
80253: NEG
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: PUSH
80259: LD_INT 0
80261: PUSH
80262: LD_INT 2
80264: NEG
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: PUSH
80270: LD_INT 1
80272: NEG
80273: PUSH
80274: LD_INT 3
80276: NEG
80277: PUSH
80278: EMPTY
80279: LIST
80280: LIST
80281: PUSH
80282: LD_INT 1
80284: NEG
80285: PUSH
80286: LD_INT 4
80288: NEG
80289: PUSH
80290: EMPTY
80291: LIST
80292: LIST
80293: PUSH
80294: LD_INT 2
80296: PUSH
80297: LD_INT 2
80299: NEG
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: PUSH
80305: LD_INT 2
80307: NEG
80308: PUSH
80309: LD_INT 4
80311: NEG
80312: PUSH
80313: EMPTY
80314: LIST
80315: LIST
80316: PUSH
80317: LD_INT 4
80319: PUSH
80320: LD_INT 0
80322: PUSH
80323: EMPTY
80324: LIST
80325: LIST
80326: PUSH
80327: LD_INT 4
80329: PUSH
80330: LD_INT 1
80332: NEG
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 5
80340: PUSH
80341: LD_INT 0
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 5
80350: PUSH
80351: LD_INT 1
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: PUSH
80358: LD_INT 4
80360: PUSH
80361: LD_INT 1
80363: PUSH
80364: EMPTY
80365: LIST
80366: LIST
80367: PUSH
80368: LD_INT 3
80370: PUSH
80371: LD_INT 0
80373: PUSH
80374: EMPTY
80375: LIST
80376: LIST
80377: PUSH
80378: LD_INT 3
80380: PUSH
80381: LD_INT 1
80383: NEG
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: PUSH
80389: LD_INT 3
80391: PUSH
80392: LD_INT 2
80394: NEG
80395: PUSH
80396: EMPTY
80397: LIST
80398: LIST
80399: PUSH
80400: LD_INT 5
80402: PUSH
80403: LD_INT 2
80405: PUSH
80406: EMPTY
80407: LIST
80408: LIST
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: LIST
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: LIST
80430: LIST
80431: LIST
80432: LIST
80433: LIST
80434: LIST
80435: LIST
80436: LIST
80437: LIST
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: LIST
80444: LIST
80445: LIST
80446: LIST
80447: LIST
80448: LIST
80449: LIST
80450: LIST
80451: LIST
80452: LIST
80453: LIST
80454: LIST
80455: LIST
80456: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80457: LD_ADDR_VAR 0 32
80461: PUSH
80462: LD_INT 4
80464: NEG
80465: PUSH
80466: LD_INT 0
80468: PUSH
80469: EMPTY
80470: LIST
80471: LIST
80472: PUSH
80473: LD_INT 4
80475: NEG
80476: PUSH
80477: LD_INT 1
80479: NEG
80480: PUSH
80481: EMPTY
80482: LIST
80483: LIST
80484: PUSH
80485: LD_INT 3
80487: NEG
80488: PUSH
80489: LD_INT 0
80491: PUSH
80492: EMPTY
80493: LIST
80494: LIST
80495: PUSH
80496: LD_INT 3
80498: NEG
80499: PUSH
80500: LD_INT 1
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: PUSH
80507: LD_INT 4
80509: NEG
80510: PUSH
80511: LD_INT 1
80513: PUSH
80514: EMPTY
80515: LIST
80516: LIST
80517: PUSH
80518: LD_INT 5
80520: NEG
80521: PUSH
80522: LD_INT 0
80524: PUSH
80525: EMPTY
80526: LIST
80527: LIST
80528: PUSH
80529: LD_INT 5
80531: NEG
80532: PUSH
80533: LD_INT 1
80535: NEG
80536: PUSH
80537: EMPTY
80538: LIST
80539: LIST
80540: PUSH
80541: LD_INT 5
80543: NEG
80544: PUSH
80545: LD_INT 2
80547: NEG
80548: PUSH
80549: EMPTY
80550: LIST
80551: LIST
80552: PUSH
80553: LD_INT 3
80555: NEG
80556: PUSH
80557: LD_INT 2
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: PUSH
80564: LD_INT 3
80566: NEG
80567: PUSH
80568: LD_INT 3
80570: NEG
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: PUSH
80576: LD_INT 3
80578: NEG
80579: PUSH
80580: LD_INT 4
80582: NEG
80583: PUSH
80584: EMPTY
80585: LIST
80586: LIST
80587: PUSH
80588: LD_INT 2
80590: NEG
80591: PUSH
80592: LD_INT 3
80594: NEG
80595: PUSH
80596: EMPTY
80597: LIST
80598: LIST
80599: PUSH
80600: LD_INT 2
80602: NEG
80603: PUSH
80604: LD_INT 2
80606: NEG
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: PUSH
80612: LD_INT 3
80614: NEG
80615: PUSH
80616: LD_INT 2
80618: NEG
80619: PUSH
80620: EMPTY
80621: LIST
80622: LIST
80623: PUSH
80624: LD_INT 4
80626: NEG
80627: PUSH
80628: LD_INT 3
80630: NEG
80631: PUSH
80632: EMPTY
80633: LIST
80634: LIST
80635: PUSH
80636: LD_INT 4
80638: NEG
80639: PUSH
80640: LD_INT 4
80642: NEG
80643: PUSH
80644: EMPTY
80645: LIST
80646: LIST
80647: PUSH
80648: LD_INT 2
80650: NEG
80651: PUSH
80652: LD_INT 4
80654: NEG
80655: PUSH
80656: EMPTY
80657: LIST
80658: LIST
80659: PUSH
80660: LD_INT 4
80662: NEG
80663: PUSH
80664: LD_INT 2
80666: NEG
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: PUSH
80672: LD_INT 0
80674: PUSH
80675: LD_INT 4
80677: NEG
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: PUSH
80683: LD_INT 0
80685: PUSH
80686: LD_INT 5
80688: NEG
80689: PUSH
80690: EMPTY
80691: LIST
80692: LIST
80693: PUSH
80694: LD_INT 1
80696: PUSH
80697: LD_INT 4
80699: NEG
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: PUSH
80705: LD_INT 1
80707: PUSH
80708: LD_INT 3
80710: NEG
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PUSH
80716: LD_INT 0
80718: PUSH
80719: LD_INT 3
80721: NEG
80722: PUSH
80723: EMPTY
80724: LIST
80725: LIST
80726: PUSH
80727: LD_INT 1
80729: NEG
80730: PUSH
80731: LD_INT 4
80733: NEG
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: PUSH
80739: LD_INT 1
80741: NEG
80742: PUSH
80743: LD_INT 5
80745: NEG
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: PUSH
80751: LD_INT 2
80753: PUSH
80754: LD_INT 3
80756: NEG
80757: PUSH
80758: EMPTY
80759: LIST
80760: LIST
80761: PUSH
80762: LD_INT 2
80764: NEG
80765: PUSH
80766: LD_INT 5
80768: NEG
80769: PUSH
80770: EMPTY
80771: LIST
80772: LIST
80773: PUSH
80774: LD_INT 3
80776: PUSH
80777: LD_INT 0
80779: PUSH
80780: EMPTY
80781: LIST
80782: LIST
80783: PUSH
80784: LD_INT 3
80786: PUSH
80787: LD_INT 1
80789: NEG
80790: PUSH
80791: EMPTY
80792: LIST
80793: LIST
80794: PUSH
80795: LD_INT 4
80797: PUSH
80798: LD_INT 0
80800: PUSH
80801: EMPTY
80802: LIST
80803: LIST
80804: PUSH
80805: LD_INT 4
80807: PUSH
80808: LD_INT 1
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: PUSH
80815: LD_INT 3
80817: PUSH
80818: LD_INT 1
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: PUSH
80825: LD_INT 2
80827: PUSH
80828: LD_INT 0
80830: PUSH
80831: EMPTY
80832: LIST
80833: LIST
80834: PUSH
80835: LD_INT 2
80837: PUSH
80838: LD_INT 1
80840: NEG
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: PUSH
80846: LD_INT 2
80848: PUSH
80849: LD_INT 2
80851: NEG
80852: PUSH
80853: EMPTY
80854: LIST
80855: LIST
80856: PUSH
80857: LD_INT 4
80859: PUSH
80860: LD_INT 2
80862: PUSH
80863: EMPTY
80864: LIST
80865: LIST
80866: PUSH
80867: LD_INT 4
80869: PUSH
80870: LD_INT 4
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 4
80879: PUSH
80880: LD_INT 3
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 5
80889: PUSH
80890: LD_INT 4
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: LD_INT 5
80899: PUSH
80900: LD_INT 5
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PUSH
80907: LD_INT 4
80909: PUSH
80910: LD_INT 5
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PUSH
80917: LD_INT 3
80919: PUSH
80920: LD_INT 4
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: LD_INT 3
80929: PUSH
80930: LD_INT 3
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: PUSH
80937: LD_INT 5
80939: PUSH
80940: LD_INT 3
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: PUSH
80947: LD_INT 3
80949: PUSH
80950: LD_INT 5
80952: PUSH
80953: EMPTY
80954: LIST
80955: LIST
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: LIST
80975: LIST
80976: LIST
80977: LIST
80978: LIST
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: LIST
80986: LIST
80987: LIST
80988: LIST
80989: LIST
80990: LIST
80991: LIST
80992: LIST
80993: LIST
80994: LIST
80995: LIST
80996: LIST
80997: LIST
80998: LIST
80999: LIST
81000: LIST
81001: LIST
81002: LIST
81003: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
81004: LD_ADDR_VAR 0 33
81008: PUSH
81009: LD_INT 4
81011: NEG
81012: PUSH
81013: LD_INT 4
81015: NEG
81016: PUSH
81017: EMPTY
81018: LIST
81019: LIST
81020: PUSH
81021: LD_INT 4
81023: NEG
81024: PUSH
81025: LD_INT 5
81027: NEG
81028: PUSH
81029: EMPTY
81030: LIST
81031: LIST
81032: PUSH
81033: LD_INT 3
81035: NEG
81036: PUSH
81037: LD_INT 4
81039: NEG
81040: PUSH
81041: EMPTY
81042: LIST
81043: LIST
81044: PUSH
81045: LD_INT 3
81047: NEG
81048: PUSH
81049: LD_INT 3
81051: NEG
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: PUSH
81057: LD_INT 4
81059: NEG
81060: PUSH
81061: LD_INT 3
81063: NEG
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PUSH
81069: LD_INT 5
81071: NEG
81072: PUSH
81073: LD_INT 4
81075: NEG
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: LD_INT 5
81083: NEG
81084: PUSH
81085: LD_INT 5
81087: NEG
81088: PUSH
81089: EMPTY
81090: LIST
81091: LIST
81092: PUSH
81093: LD_INT 3
81095: NEG
81096: PUSH
81097: LD_INT 5
81099: NEG
81100: PUSH
81101: EMPTY
81102: LIST
81103: LIST
81104: PUSH
81105: LD_INT 5
81107: NEG
81108: PUSH
81109: LD_INT 3
81111: NEG
81112: PUSH
81113: EMPTY
81114: LIST
81115: LIST
81116: PUSH
81117: LD_INT 0
81119: PUSH
81120: LD_INT 3
81122: NEG
81123: PUSH
81124: EMPTY
81125: LIST
81126: LIST
81127: PUSH
81128: LD_INT 0
81130: PUSH
81131: LD_INT 4
81133: NEG
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: PUSH
81139: LD_INT 1
81141: PUSH
81142: LD_INT 3
81144: NEG
81145: PUSH
81146: EMPTY
81147: LIST
81148: LIST
81149: PUSH
81150: LD_INT 1
81152: PUSH
81153: LD_INT 2
81155: NEG
81156: PUSH
81157: EMPTY
81158: LIST
81159: LIST
81160: PUSH
81161: LD_INT 0
81163: PUSH
81164: LD_INT 2
81166: NEG
81167: PUSH
81168: EMPTY
81169: LIST
81170: LIST
81171: PUSH
81172: LD_INT 1
81174: NEG
81175: PUSH
81176: LD_INT 3
81178: NEG
81179: PUSH
81180: EMPTY
81181: LIST
81182: LIST
81183: PUSH
81184: LD_INT 1
81186: NEG
81187: PUSH
81188: LD_INT 4
81190: NEG
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: PUSH
81196: LD_INT 2
81198: PUSH
81199: LD_INT 2
81201: NEG
81202: PUSH
81203: EMPTY
81204: LIST
81205: LIST
81206: PUSH
81207: LD_INT 2
81209: NEG
81210: PUSH
81211: LD_INT 4
81213: NEG
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: PUSH
81219: LD_INT 4
81221: PUSH
81222: LD_INT 0
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: PUSH
81229: LD_INT 4
81231: PUSH
81232: LD_INT 1
81234: NEG
81235: PUSH
81236: EMPTY
81237: LIST
81238: LIST
81239: PUSH
81240: LD_INT 5
81242: PUSH
81243: LD_INT 0
81245: PUSH
81246: EMPTY
81247: LIST
81248: LIST
81249: PUSH
81250: LD_INT 5
81252: PUSH
81253: LD_INT 1
81255: PUSH
81256: EMPTY
81257: LIST
81258: LIST
81259: PUSH
81260: LD_INT 4
81262: PUSH
81263: LD_INT 1
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: PUSH
81270: LD_INT 3
81272: PUSH
81273: LD_INT 0
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: PUSH
81280: LD_INT 3
81282: PUSH
81283: LD_INT 1
81285: NEG
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: PUSH
81291: LD_INT 3
81293: PUSH
81294: LD_INT 2
81296: NEG
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PUSH
81302: LD_INT 5
81304: PUSH
81305: LD_INT 2
81307: PUSH
81308: EMPTY
81309: LIST
81310: LIST
81311: PUSH
81312: LD_INT 3
81314: PUSH
81315: LD_INT 3
81317: PUSH
81318: EMPTY
81319: LIST
81320: LIST
81321: PUSH
81322: LD_INT 3
81324: PUSH
81325: LD_INT 2
81327: PUSH
81328: EMPTY
81329: LIST
81330: LIST
81331: PUSH
81332: LD_INT 4
81334: PUSH
81335: LD_INT 3
81337: PUSH
81338: EMPTY
81339: LIST
81340: LIST
81341: PUSH
81342: LD_INT 4
81344: PUSH
81345: LD_INT 4
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PUSH
81352: LD_INT 3
81354: PUSH
81355: LD_INT 4
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: PUSH
81362: LD_INT 2
81364: PUSH
81365: LD_INT 3
81367: PUSH
81368: EMPTY
81369: LIST
81370: LIST
81371: PUSH
81372: LD_INT 2
81374: PUSH
81375: LD_INT 2
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: PUSH
81382: LD_INT 4
81384: PUSH
81385: LD_INT 2
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: PUSH
81392: LD_INT 2
81394: PUSH
81395: LD_INT 4
81397: PUSH
81398: EMPTY
81399: LIST
81400: LIST
81401: PUSH
81402: LD_INT 0
81404: PUSH
81405: LD_INT 4
81407: PUSH
81408: EMPTY
81409: LIST
81410: LIST
81411: PUSH
81412: LD_INT 0
81414: PUSH
81415: LD_INT 3
81417: PUSH
81418: EMPTY
81419: LIST
81420: LIST
81421: PUSH
81422: LD_INT 1
81424: PUSH
81425: LD_INT 4
81427: PUSH
81428: EMPTY
81429: LIST
81430: LIST
81431: PUSH
81432: LD_INT 1
81434: PUSH
81435: LD_INT 5
81437: PUSH
81438: EMPTY
81439: LIST
81440: LIST
81441: PUSH
81442: LD_INT 0
81444: PUSH
81445: LD_INT 5
81447: PUSH
81448: EMPTY
81449: LIST
81450: LIST
81451: PUSH
81452: LD_INT 1
81454: NEG
81455: PUSH
81456: LD_INT 4
81458: PUSH
81459: EMPTY
81460: LIST
81461: LIST
81462: PUSH
81463: LD_INT 1
81465: NEG
81466: PUSH
81467: LD_INT 3
81469: PUSH
81470: EMPTY
81471: LIST
81472: LIST
81473: PUSH
81474: LD_INT 2
81476: PUSH
81477: LD_INT 5
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: PUSH
81484: LD_INT 2
81486: NEG
81487: PUSH
81488: LD_INT 3
81490: PUSH
81491: EMPTY
81492: LIST
81493: LIST
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: LIST
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: LIST
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: LIST
81534: LIST
81535: LIST
81536: LIST
81537: LIST
81538: LIST
81539: LIST
81540: LIST
81541: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81542: LD_ADDR_VAR 0 34
81546: PUSH
81547: LD_INT 0
81549: PUSH
81550: LD_INT 4
81552: NEG
81553: PUSH
81554: EMPTY
81555: LIST
81556: LIST
81557: PUSH
81558: LD_INT 0
81560: PUSH
81561: LD_INT 5
81563: NEG
81564: PUSH
81565: EMPTY
81566: LIST
81567: LIST
81568: PUSH
81569: LD_INT 1
81571: PUSH
81572: LD_INT 4
81574: NEG
81575: PUSH
81576: EMPTY
81577: LIST
81578: LIST
81579: PUSH
81580: LD_INT 1
81582: PUSH
81583: LD_INT 3
81585: NEG
81586: PUSH
81587: EMPTY
81588: LIST
81589: LIST
81590: PUSH
81591: LD_INT 0
81593: PUSH
81594: LD_INT 3
81596: NEG
81597: PUSH
81598: EMPTY
81599: LIST
81600: LIST
81601: PUSH
81602: LD_INT 1
81604: NEG
81605: PUSH
81606: LD_INT 4
81608: NEG
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: PUSH
81614: LD_INT 1
81616: NEG
81617: PUSH
81618: LD_INT 5
81620: NEG
81621: PUSH
81622: EMPTY
81623: LIST
81624: LIST
81625: PUSH
81626: LD_INT 2
81628: PUSH
81629: LD_INT 3
81631: NEG
81632: PUSH
81633: EMPTY
81634: LIST
81635: LIST
81636: PUSH
81637: LD_INT 2
81639: NEG
81640: PUSH
81641: LD_INT 5
81643: NEG
81644: PUSH
81645: EMPTY
81646: LIST
81647: LIST
81648: PUSH
81649: LD_INT 3
81651: PUSH
81652: LD_INT 0
81654: PUSH
81655: EMPTY
81656: LIST
81657: LIST
81658: PUSH
81659: LD_INT 3
81661: PUSH
81662: LD_INT 1
81664: NEG
81665: PUSH
81666: EMPTY
81667: LIST
81668: LIST
81669: PUSH
81670: LD_INT 4
81672: PUSH
81673: LD_INT 0
81675: PUSH
81676: EMPTY
81677: LIST
81678: LIST
81679: PUSH
81680: LD_INT 4
81682: PUSH
81683: LD_INT 1
81685: PUSH
81686: EMPTY
81687: LIST
81688: LIST
81689: PUSH
81690: LD_INT 3
81692: PUSH
81693: LD_INT 1
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: PUSH
81700: LD_INT 2
81702: PUSH
81703: LD_INT 0
81705: PUSH
81706: EMPTY
81707: LIST
81708: LIST
81709: PUSH
81710: LD_INT 2
81712: PUSH
81713: LD_INT 1
81715: NEG
81716: PUSH
81717: EMPTY
81718: LIST
81719: LIST
81720: PUSH
81721: LD_INT 2
81723: PUSH
81724: LD_INT 2
81726: NEG
81727: PUSH
81728: EMPTY
81729: LIST
81730: LIST
81731: PUSH
81732: LD_INT 4
81734: PUSH
81735: LD_INT 2
81737: PUSH
81738: EMPTY
81739: LIST
81740: LIST
81741: PUSH
81742: LD_INT 4
81744: PUSH
81745: LD_INT 4
81747: PUSH
81748: EMPTY
81749: LIST
81750: LIST
81751: PUSH
81752: LD_INT 4
81754: PUSH
81755: LD_INT 3
81757: PUSH
81758: EMPTY
81759: LIST
81760: LIST
81761: PUSH
81762: LD_INT 5
81764: PUSH
81765: LD_INT 4
81767: PUSH
81768: EMPTY
81769: LIST
81770: LIST
81771: PUSH
81772: LD_INT 5
81774: PUSH
81775: LD_INT 5
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: PUSH
81782: LD_INT 4
81784: PUSH
81785: LD_INT 5
81787: PUSH
81788: EMPTY
81789: LIST
81790: LIST
81791: PUSH
81792: LD_INT 3
81794: PUSH
81795: LD_INT 4
81797: PUSH
81798: EMPTY
81799: LIST
81800: LIST
81801: PUSH
81802: LD_INT 3
81804: PUSH
81805: LD_INT 3
81807: PUSH
81808: EMPTY
81809: LIST
81810: LIST
81811: PUSH
81812: LD_INT 5
81814: PUSH
81815: LD_INT 3
81817: PUSH
81818: EMPTY
81819: LIST
81820: LIST
81821: PUSH
81822: LD_INT 3
81824: PUSH
81825: LD_INT 5
81827: PUSH
81828: EMPTY
81829: LIST
81830: LIST
81831: PUSH
81832: LD_INT 0
81834: PUSH
81835: LD_INT 3
81837: PUSH
81838: EMPTY
81839: LIST
81840: LIST
81841: PUSH
81842: LD_INT 0
81844: PUSH
81845: LD_INT 2
81847: PUSH
81848: EMPTY
81849: LIST
81850: LIST
81851: PUSH
81852: LD_INT 1
81854: PUSH
81855: LD_INT 3
81857: PUSH
81858: EMPTY
81859: LIST
81860: LIST
81861: PUSH
81862: LD_INT 1
81864: PUSH
81865: LD_INT 4
81867: PUSH
81868: EMPTY
81869: LIST
81870: LIST
81871: PUSH
81872: LD_INT 0
81874: PUSH
81875: LD_INT 4
81877: PUSH
81878: EMPTY
81879: LIST
81880: LIST
81881: PUSH
81882: LD_INT 1
81884: NEG
81885: PUSH
81886: LD_INT 3
81888: PUSH
81889: EMPTY
81890: LIST
81891: LIST
81892: PUSH
81893: LD_INT 1
81895: NEG
81896: PUSH
81897: LD_INT 2
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PUSH
81904: LD_INT 2
81906: PUSH
81907: LD_INT 4
81909: PUSH
81910: EMPTY
81911: LIST
81912: LIST
81913: PUSH
81914: LD_INT 2
81916: NEG
81917: PUSH
81918: LD_INT 2
81920: PUSH
81921: EMPTY
81922: LIST
81923: LIST
81924: PUSH
81925: LD_INT 4
81927: NEG
81928: PUSH
81929: LD_INT 0
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: PUSH
81936: LD_INT 4
81938: NEG
81939: PUSH
81940: LD_INT 1
81942: NEG
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: PUSH
81948: LD_INT 3
81950: NEG
81951: PUSH
81952: LD_INT 0
81954: PUSH
81955: EMPTY
81956: LIST
81957: LIST
81958: PUSH
81959: LD_INT 3
81961: NEG
81962: PUSH
81963: LD_INT 1
81965: PUSH
81966: EMPTY
81967: LIST
81968: LIST
81969: PUSH
81970: LD_INT 4
81972: NEG
81973: PUSH
81974: LD_INT 1
81976: PUSH
81977: EMPTY
81978: LIST
81979: LIST
81980: PUSH
81981: LD_INT 5
81983: NEG
81984: PUSH
81985: LD_INT 0
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: PUSH
81992: LD_INT 5
81994: NEG
81995: PUSH
81996: LD_INT 1
81998: NEG
81999: PUSH
82000: EMPTY
82001: LIST
82002: LIST
82003: PUSH
82004: LD_INT 5
82006: NEG
82007: PUSH
82008: LD_INT 2
82010: NEG
82011: PUSH
82012: EMPTY
82013: LIST
82014: LIST
82015: PUSH
82016: LD_INT 3
82018: NEG
82019: PUSH
82020: LD_INT 2
82022: PUSH
82023: EMPTY
82024: LIST
82025: LIST
82026: PUSH
82027: EMPTY
82028: LIST
82029: LIST
82030: LIST
82031: LIST
82032: LIST
82033: LIST
82034: LIST
82035: LIST
82036: LIST
82037: LIST
82038: LIST
82039: LIST
82040: LIST
82041: LIST
82042: LIST
82043: LIST
82044: LIST
82045: LIST
82046: LIST
82047: LIST
82048: LIST
82049: LIST
82050: LIST
82051: LIST
82052: LIST
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: LIST
82058: LIST
82059: LIST
82060: LIST
82061: LIST
82062: LIST
82063: LIST
82064: LIST
82065: LIST
82066: LIST
82067: LIST
82068: LIST
82069: LIST
82070: LIST
82071: LIST
82072: LIST
82073: ST_TO_ADDR
// end ; end ;
82074: GO 82077
82076: POP
// case btype of b_depot , b_warehouse :
82077: LD_VAR 0 1
82081: PUSH
82082: LD_INT 0
82084: DOUBLE
82085: EQUAL
82086: IFTRUE 82096
82088: LD_INT 1
82090: DOUBLE
82091: EQUAL
82092: IFTRUE 82096
82094: GO 82297
82096: POP
// case nation of nation_american :
82097: LD_VAR 0 5
82101: PUSH
82102: LD_INT 1
82104: DOUBLE
82105: EQUAL
82106: IFTRUE 82110
82108: GO 82166
82110: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
82111: LD_ADDR_VAR 0 9
82115: PUSH
82116: LD_VAR 0 11
82120: PUSH
82121: LD_VAR 0 12
82125: PUSH
82126: LD_VAR 0 13
82130: PUSH
82131: LD_VAR 0 14
82135: PUSH
82136: LD_VAR 0 15
82140: PUSH
82141: LD_VAR 0 16
82145: PUSH
82146: EMPTY
82147: LIST
82148: LIST
82149: LIST
82150: LIST
82151: LIST
82152: LIST
82153: PUSH
82154: LD_VAR 0 4
82158: PUSH
82159: LD_INT 1
82161: PLUS
82162: ARRAY
82163: ST_TO_ADDR
82164: GO 82295
82166: LD_INT 2
82168: DOUBLE
82169: EQUAL
82170: IFTRUE 82174
82172: GO 82230
82174: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
82175: LD_ADDR_VAR 0 9
82179: PUSH
82180: LD_VAR 0 17
82184: PUSH
82185: LD_VAR 0 18
82189: PUSH
82190: LD_VAR 0 19
82194: PUSH
82195: LD_VAR 0 20
82199: PUSH
82200: LD_VAR 0 21
82204: PUSH
82205: LD_VAR 0 22
82209: PUSH
82210: EMPTY
82211: LIST
82212: LIST
82213: LIST
82214: LIST
82215: LIST
82216: LIST
82217: PUSH
82218: LD_VAR 0 4
82222: PUSH
82223: LD_INT 1
82225: PLUS
82226: ARRAY
82227: ST_TO_ADDR
82228: GO 82295
82230: LD_INT 3
82232: DOUBLE
82233: EQUAL
82234: IFTRUE 82238
82236: GO 82294
82238: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
82239: LD_ADDR_VAR 0 9
82243: PUSH
82244: LD_VAR 0 23
82248: PUSH
82249: LD_VAR 0 24
82253: PUSH
82254: LD_VAR 0 25
82258: PUSH
82259: LD_VAR 0 26
82263: PUSH
82264: LD_VAR 0 27
82268: PUSH
82269: LD_VAR 0 28
82273: PUSH
82274: EMPTY
82275: LIST
82276: LIST
82277: LIST
82278: LIST
82279: LIST
82280: LIST
82281: PUSH
82282: LD_VAR 0 4
82286: PUSH
82287: LD_INT 1
82289: PLUS
82290: ARRAY
82291: ST_TO_ADDR
82292: GO 82295
82294: POP
82295: GO 82850
82297: LD_INT 2
82299: DOUBLE
82300: EQUAL
82301: IFTRUE 82311
82303: LD_INT 3
82305: DOUBLE
82306: EQUAL
82307: IFTRUE 82311
82309: GO 82367
82311: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
82312: LD_ADDR_VAR 0 9
82316: PUSH
82317: LD_VAR 0 29
82321: PUSH
82322: LD_VAR 0 30
82326: PUSH
82327: LD_VAR 0 31
82331: PUSH
82332: LD_VAR 0 32
82336: PUSH
82337: LD_VAR 0 33
82341: PUSH
82342: LD_VAR 0 34
82346: PUSH
82347: EMPTY
82348: LIST
82349: LIST
82350: LIST
82351: LIST
82352: LIST
82353: LIST
82354: PUSH
82355: LD_VAR 0 4
82359: PUSH
82360: LD_INT 1
82362: PLUS
82363: ARRAY
82364: ST_TO_ADDR
82365: GO 82850
82367: LD_INT 16
82369: DOUBLE
82370: EQUAL
82371: IFTRUE 82429
82373: LD_INT 17
82375: DOUBLE
82376: EQUAL
82377: IFTRUE 82429
82379: LD_INT 18
82381: DOUBLE
82382: EQUAL
82383: IFTRUE 82429
82385: LD_INT 19
82387: DOUBLE
82388: EQUAL
82389: IFTRUE 82429
82391: LD_INT 22
82393: DOUBLE
82394: EQUAL
82395: IFTRUE 82429
82397: LD_INT 20
82399: DOUBLE
82400: EQUAL
82401: IFTRUE 82429
82403: LD_INT 21
82405: DOUBLE
82406: EQUAL
82407: IFTRUE 82429
82409: LD_INT 23
82411: DOUBLE
82412: EQUAL
82413: IFTRUE 82429
82415: LD_INT 24
82417: DOUBLE
82418: EQUAL
82419: IFTRUE 82429
82421: LD_INT 25
82423: DOUBLE
82424: EQUAL
82425: IFTRUE 82429
82427: GO 82485
82429: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82430: LD_ADDR_VAR 0 9
82434: PUSH
82435: LD_VAR 0 35
82439: PUSH
82440: LD_VAR 0 36
82444: PUSH
82445: LD_VAR 0 37
82449: PUSH
82450: LD_VAR 0 38
82454: PUSH
82455: LD_VAR 0 39
82459: PUSH
82460: LD_VAR 0 40
82464: PUSH
82465: EMPTY
82466: LIST
82467: LIST
82468: LIST
82469: LIST
82470: LIST
82471: LIST
82472: PUSH
82473: LD_VAR 0 4
82477: PUSH
82478: LD_INT 1
82480: PLUS
82481: ARRAY
82482: ST_TO_ADDR
82483: GO 82850
82485: LD_INT 6
82487: DOUBLE
82488: EQUAL
82489: IFTRUE 82541
82491: LD_INT 7
82493: DOUBLE
82494: EQUAL
82495: IFTRUE 82541
82497: LD_INT 8
82499: DOUBLE
82500: EQUAL
82501: IFTRUE 82541
82503: LD_INT 13
82505: DOUBLE
82506: EQUAL
82507: IFTRUE 82541
82509: LD_INT 12
82511: DOUBLE
82512: EQUAL
82513: IFTRUE 82541
82515: LD_INT 15
82517: DOUBLE
82518: EQUAL
82519: IFTRUE 82541
82521: LD_INT 11
82523: DOUBLE
82524: EQUAL
82525: IFTRUE 82541
82527: LD_INT 14
82529: DOUBLE
82530: EQUAL
82531: IFTRUE 82541
82533: LD_INT 10
82535: DOUBLE
82536: EQUAL
82537: IFTRUE 82541
82539: GO 82597
82541: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82542: LD_ADDR_VAR 0 9
82546: PUSH
82547: LD_VAR 0 41
82551: PUSH
82552: LD_VAR 0 42
82556: PUSH
82557: LD_VAR 0 43
82561: PUSH
82562: LD_VAR 0 44
82566: PUSH
82567: LD_VAR 0 45
82571: PUSH
82572: LD_VAR 0 46
82576: PUSH
82577: EMPTY
82578: LIST
82579: LIST
82580: LIST
82581: LIST
82582: LIST
82583: LIST
82584: PUSH
82585: LD_VAR 0 4
82589: PUSH
82590: LD_INT 1
82592: PLUS
82593: ARRAY
82594: ST_TO_ADDR
82595: GO 82850
82597: LD_INT 36
82599: DOUBLE
82600: EQUAL
82601: IFTRUE 82605
82603: GO 82661
82605: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82606: LD_ADDR_VAR 0 9
82610: PUSH
82611: LD_VAR 0 47
82615: PUSH
82616: LD_VAR 0 48
82620: PUSH
82621: LD_VAR 0 49
82625: PUSH
82626: LD_VAR 0 50
82630: PUSH
82631: LD_VAR 0 51
82635: PUSH
82636: LD_VAR 0 52
82640: PUSH
82641: EMPTY
82642: LIST
82643: LIST
82644: LIST
82645: LIST
82646: LIST
82647: LIST
82648: PUSH
82649: LD_VAR 0 4
82653: PUSH
82654: LD_INT 1
82656: PLUS
82657: ARRAY
82658: ST_TO_ADDR
82659: GO 82850
82661: LD_INT 4
82663: DOUBLE
82664: EQUAL
82665: IFTRUE 82687
82667: LD_INT 5
82669: DOUBLE
82670: EQUAL
82671: IFTRUE 82687
82673: LD_INT 34
82675: DOUBLE
82676: EQUAL
82677: IFTRUE 82687
82679: LD_INT 37
82681: DOUBLE
82682: EQUAL
82683: IFTRUE 82687
82685: GO 82743
82687: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82688: LD_ADDR_VAR 0 9
82692: PUSH
82693: LD_VAR 0 53
82697: PUSH
82698: LD_VAR 0 54
82702: PUSH
82703: LD_VAR 0 55
82707: PUSH
82708: LD_VAR 0 56
82712: PUSH
82713: LD_VAR 0 57
82717: PUSH
82718: LD_VAR 0 58
82722: PUSH
82723: EMPTY
82724: LIST
82725: LIST
82726: LIST
82727: LIST
82728: LIST
82729: LIST
82730: PUSH
82731: LD_VAR 0 4
82735: PUSH
82736: LD_INT 1
82738: PLUS
82739: ARRAY
82740: ST_TO_ADDR
82741: GO 82850
82743: LD_INT 31
82745: DOUBLE
82746: EQUAL
82747: IFTRUE 82793
82749: LD_INT 32
82751: DOUBLE
82752: EQUAL
82753: IFTRUE 82793
82755: LD_INT 33
82757: DOUBLE
82758: EQUAL
82759: IFTRUE 82793
82761: LD_INT 27
82763: DOUBLE
82764: EQUAL
82765: IFTRUE 82793
82767: LD_INT 26
82769: DOUBLE
82770: EQUAL
82771: IFTRUE 82793
82773: LD_INT 28
82775: DOUBLE
82776: EQUAL
82777: IFTRUE 82793
82779: LD_INT 29
82781: DOUBLE
82782: EQUAL
82783: IFTRUE 82793
82785: LD_INT 30
82787: DOUBLE
82788: EQUAL
82789: IFTRUE 82793
82791: GO 82849
82793: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82794: LD_ADDR_VAR 0 9
82798: PUSH
82799: LD_VAR 0 59
82803: PUSH
82804: LD_VAR 0 60
82808: PUSH
82809: LD_VAR 0 61
82813: PUSH
82814: LD_VAR 0 62
82818: PUSH
82819: LD_VAR 0 63
82823: PUSH
82824: LD_VAR 0 64
82828: PUSH
82829: EMPTY
82830: LIST
82831: LIST
82832: LIST
82833: LIST
82834: LIST
82835: LIST
82836: PUSH
82837: LD_VAR 0 4
82841: PUSH
82842: LD_INT 1
82844: PLUS
82845: ARRAY
82846: ST_TO_ADDR
82847: GO 82850
82849: POP
// temp_list2 = [ ] ;
82850: LD_ADDR_VAR 0 10
82854: PUSH
82855: EMPTY
82856: ST_TO_ADDR
// for i in temp_list do
82857: LD_ADDR_VAR 0 8
82861: PUSH
82862: LD_VAR 0 9
82866: PUSH
82867: FOR_IN
82868: IFFALSE 82920
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82870: LD_ADDR_VAR 0 10
82874: PUSH
82875: LD_VAR 0 10
82879: PUSH
82880: LD_VAR 0 8
82884: PUSH
82885: LD_INT 1
82887: ARRAY
82888: PUSH
82889: LD_VAR 0 2
82893: PLUS
82894: PUSH
82895: LD_VAR 0 8
82899: PUSH
82900: LD_INT 2
82902: ARRAY
82903: PUSH
82904: LD_VAR 0 3
82908: PLUS
82909: PUSH
82910: EMPTY
82911: LIST
82912: LIST
82913: PUSH
82914: EMPTY
82915: LIST
82916: ADD
82917: ST_TO_ADDR
82918: GO 82867
82920: POP
82921: POP
// result = temp_list2 ;
82922: LD_ADDR_VAR 0 7
82926: PUSH
82927: LD_VAR 0 10
82931: ST_TO_ADDR
// end ;
82932: LD_VAR 0 7
82936: RET
// export function EnemyInRange ( unit , dist ) ; begin
82937: LD_INT 0
82939: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82940: LD_ADDR_VAR 0 3
82944: PUSH
82945: LD_VAR 0 1
82949: PPUSH
82950: CALL_OW 255
82954: PPUSH
82955: LD_VAR 0 1
82959: PPUSH
82960: CALL_OW 250
82964: PPUSH
82965: LD_VAR 0 1
82969: PPUSH
82970: CALL_OW 251
82974: PPUSH
82975: LD_VAR 0 2
82979: PPUSH
82980: CALL 56339 0 4
82984: PUSH
82985: LD_INT 4
82987: ARRAY
82988: ST_TO_ADDR
// end ;
82989: LD_VAR 0 3
82993: RET
// export function PlayerSeeMe ( unit ) ; begin
82994: LD_INT 0
82996: PPUSH
// result := See ( your_side , unit ) ;
82997: LD_ADDR_VAR 0 2
83001: PUSH
83002: LD_OWVAR 2
83006: PPUSH
83007: LD_VAR 0 1
83011: PPUSH
83012: CALL_OW 292
83016: ST_TO_ADDR
// end ;
83017: LD_VAR 0 2
83021: RET
// export function ReverseDir ( unit ) ; begin
83022: LD_INT 0
83024: PPUSH
// if not unit then
83025: LD_VAR 0 1
83029: NOT
83030: IFFALSE 83034
// exit ;
83032: GO 83057
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
83034: LD_ADDR_VAR 0 2
83038: PUSH
83039: LD_VAR 0 1
83043: PPUSH
83044: CALL_OW 254
83048: PUSH
83049: LD_INT 3
83051: PLUS
83052: PUSH
83053: LD_INT 6
83055: MOD
83056: ST_TO_ADDR
// end ;
83057: LD_VAR 0 2
83061: RET
// export function ReverseArray ( array ) ; var i ; begin
83062: LD_INT 0
83064: PPUSH
83065: PPUSH
// if not array then
83066: LD_VAR 0 1
83070: NOT
83071: IFFALSE 83075
// exit ;
83073: GO 83130
// result := [ ] ;
83075: LD_ADDR_VAR 0 2
83079: PUSH
83080: EMPTY
83081: ST_TO_ADDR
// for i := array downto 1 do
83082: LD_ADDR_VAR 0 3
83086: PUSH
83087: DOUBLE
83088: LD_VAR 0 1
83092: INC
83093: ST_TO_ADDR
83094: LD_INT 1
83096: PUSH
83097: FOR_DOWNTO
83098: IFFALSE 83128
// result := Join ( result , array [ i ] ) ;
83100: LD_ADDR_VAR 0 2
83104: PUSH
83105: LD_VAR 0 2
83109: PPUSH
83110: LD_VAR 0 1
83114: PUSH
83115: LD_VAR 0 3
83119: ARRAY
83120: PPUSH
83121: CALL 87774 0 2
83125: ST_TO_ADDR
83126: GO 83097
83128: POP
83129: POP
// end ;
83130: LD_VAR 0 2
83134: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
83135: LD_INT 0
83137: PPUSH
83138: PPUSH
83139: PPUSH
83140: PPUSH
83141: PPUSH
83142: PPUSH
// if not unit or not hexes then
83143: LD_VAR 0 1
83147: NOT
83148: PUSH
83149: LD_VAR 0 2
83153: NOT
83154: OR
83155: IFFALSE 83159
// exit ;
83157: GO 83282
// dist := 9999 ;
83159: LD_ADDR_VAR 0 5
83163: PUSH
83164: LD_INT 9999
83166: ST_TO_ADDR
// for i = 1 to hexes do
83167: LD_ADDR_VAR 0 4
83171: PUSH
83172: DOUBLE
83173: LD_INT 1
83175: DEC
83176: ST_TO_ADDR
83177: LD_VAR 0 2
83181: PUSH
83182: FOR_TO
83183: IFFALSE 83270
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
83185: LD_ADDR_VAR 0 6
83189: PUSH
83190: LD_VAR 0 1
83194: PPUSH
83195: LD_VAR 0 2
83199: PUSH
83200: LD_VAR 0 4
83204: ARRAY
83205: PUSH
83206: LD_INT 1
83208: ARRAY
83209: PPUSH
83210: LD_VAR 0 2
83214: PUSH
83215: LD_VAR 0 4
83219: ARRAY
83220: PUSH
83221: LD_INT 2
83223: ARRAY
83224: PPUSH
83225: CALL_OW 297
83229: ST_TO_ADDR
// if tdist < dist then
83230: LD_VAR 0 6
83234: PUSH
83235: LD_VAR 0 5
83239: LESS
83240: IFFALSE 83268
// begin hex := hexes [ i ] ;
83242: LD_ADDR_VAR 0 8
83246: PUSH
83247: LD_VAR 0 2
83251: PUSH
83252: LD_VAR 0 4
83256: ARRAY
83257: ST_TO_ADDR
// dist := tdist ;
83258: LD_ADDR_VAR 0 5
83262: PUSH
83263: LD_VAR 0 6
83267: ST_TO_ADDR
// end ; end ;
83268: GO 83182
83270: POP
83271: POP
// result := hex ;
83272: LD_ADDR_VAR 0 3
83276: PUSH
83277: LD_VAR 0 8
83281: ST_TO_ADDR
// end ;
83282: LD_VAR 0 3
83286: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
83287: LD_INT 0
83289: PPUSH
83290: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83291: LD_VAR 0 1
83295: NOT
83296: PUSH
83297: LD_VAR 0 1
83301: PUSH
83302: LD_INT 21
83304: PUSH
83305: LD_INT 2
83307: PUSH
83308: EMPTY
83309: LIST
83310: LIST
83311: PUSH
83312: LD_INT 23
83314: PUSH
83315: LD_INT 2
83317: PUSH
83318: EMPTY
83319: LIST
83320: LIST
83321: PUSH
83322: EMPTY
83323: LIST
83324: LIST
83325: PPUSH
83326: CALL_OW 69
83330: IN
83331: NOT
83332: OR
83333: IFFALSE 83337
// exit ;
83335: GO 83384
// for i = 1 to 3 do
83337: LD_ADDR_VAR 0 3
83341: PUSH
83342: DOUBLE
83343: LD_INT 1
83345: DEC
83346: ST_TO_ADDR
83347: LD_INT 3
83349: PUSH
83350: FOR_TO
83351: IFFALSE 83382
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
83353: LD_VAR 0 1
83357: PPUSH
83358: CALL_OW 250
83362: PPUSH
83363: LD_VAR 0 1
83367: PPUSH
83368: CALL_OW 251
83372: PPUSH
83373: LD_INT 1
83375: PPUSH
83376: CALL_OW 453
83380: GO 83350
83382: POP
83383: POP
// end ;
83384: LD_VAR 0 2
83388: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83389: LD_INT 0
83391: PPUSH
83392: PPUSH
83393: PPUSH
83394: PPUSH
83395: PPUSH
83396: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83397: LD_VAR 0 1
83401: NOT
83402: PUSH
83403: LD_VAR 0 2
83407: NOT
83408: OR
83409: PUSH
83410: LD_VAR 0 1
83414: PPUSH
83415: CALL_OW 314
83419: OR
83420: IFFALSE 83424
// exit ;
83422: GO 83891
// if GetLives ( i ) < 250 then
83424: LD_VAR 0 4
83428: PPUSH
83429: CALL_OW 256
83433: PUSH
83434: LD_INT 250
83436: LESS
83437: IFFALSE 83450
// begin ComAutodestruct ( i ) ;
83439: LD_VAR 0 4
83443: PPUSH
83444: CALL 83287 0 1
// exit ;
83448: GO 83891
// end ; x := GetX ( enemy_unit ) ;
83450: LD_ADDR_VAR 0 7
83454: PUSH
83455: LD_VAR 0 2
83459: PPUSH
83460: CALL_OW 250
83464: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83465: LD_ADDR_VAR 0 8
83469: PUSH
83470: LD_VAR 0 2
83474: PPUSH
83475: CALL_OW 251
83479: ST_TO_ADDR
// if not x or not y then
83480: LD_VAR 0 7
83484: NOT
83485: PUSH
83486: LD_VAR 0 8
83490: NOT
83491: OR
83492: IFFALSE 83496
// exit ;
83494: GO 83891
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83496: LD_ADDR_VAR 0 6
83500: PUSH
83501: LD_VAR 0 7
83505: PPUSH
83506: LD_INT 0
83508: PPUSH
83509: LD_INT 4
83511: PPUSH
83512: CALL_OW 272
83516: PUSH
83517: LD_VAR 0 8
83521: PPUSH
83522: LD_INT 0
83524: PPUSH
83525: LD_INT 4
83527: PPUSH
83528: CALL_OW 273
83532: PUSH
83533: EMPTY
83534: LIST
83535: LIST
83536: PUSH
83537: LD_VAR 0 7
83541: PPUSH
83542: LD_INT 1
83544: PPUSH
83545: LD_INT 4
83547: PPUSH
83548: CALL_OW 272
83552: PUSH
83553: LD_VAR 0 8
83557: PPUSH
83558: LD_INT 1
83560: PPUSH
83561: LD_INT 4
83563: PPUSH
83564: CALL_OW 273
83568: PUSH
83569: EMPTY
83570: LIST
83571: LIST
83572: PUSH
83573: LD_VAR 0 7
83577: PPUSH
83578: LD_INT 2
83580: PPUSH
83581: LD_INT 4
83583: PPUSH
83584: CALL_OW 272
83588: PUSH
83589: LD_VAR 0 8
83593: PPUSH
83594: LD_INT 2
83596: PPUSH
83597: LD_INT 4
83599: PPUSH
83600: CALL_OW 273
83604: PUSH
83605: EMPTY
83606: LIST
83607: LIST
83608: PUSH
83609: LD_VAR 0 7
83613: PPUSH
83614: LD_INT 3
83616: PPUSH
83617: LD_INT 4
83619: PPUSH
83620: CALL_OW 272
83624: PUSH
83625: LD_VAR 0 8
83629: PPUSH
83630: LD_INT 3
83632: PPUSH
83633: LD_INT 4
83635: PPUSH
83636: CALL_OW 273
83640: PUSH
83641: EMPTY
83642: LIST
83643: LIST
83644: PUSH
83645: LD_VAR 0 7
83649: PPUSH
83650: LD_INT 4
83652: PPUSH
83653: LD_INT 4
83655: PPUSH
83656: CALL_OW 272
83660: PUSH
83661: LD_VAR 0 8
83665: PPUSH
83666: LD_INT 4
83668: PPUSH
83669: LD_INT 4
83671: PPUSH
83672: CALL_OW 273
83676: PUSH
83677: EMPTY
83678: LIST
83679: LIST
83680: PUSH
83681: LD_VAR 0 7
83685: PPUSH
83686: LD_INT 5
83688: PPUSH
83689: LD_INT 4
83691: PPUSH
83692: CALL_OW 272
83696: PUSH
83697: LD_VAR 0 8
83701: PPUSH
83702: LD_INT 5
83704: PPUSH
83705: LD_INT 4
83707: PPUSH
83708: CALL_OW 273
83712: PUSH
83713: EMPTY
83714: LIST
83715: LIST
83716: PUSH
83717: EMPTY
83718: LIST
83719: LIST
83720: LIST
83721: LIST
83722: LIST
83723: LIST
83724: ST_TO_ADDR
// for i = tmp downto 1 do
83725: LD_ADDR_VAR 0 4
83729: PUSH
83730: DOUBLE
83731: LD_VAR 0 6
83735: INC
83736: ST_TO_ADDR
83737: LD_INT 1
83739: PUSH
83740: FOR_DOWNTO
83741: IFFALSE 83842
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83743: LD_VAR 0 6
83747: PUSH
83748: LD_VAR 0 4
83752: ARRAY
83753: PUSH
83754: LD_INT 1
83756: ARRAY
83757: PPUSH
83758: LD_VAR 0 6
83762: PUSH
83763: LD_VAR 0 4
83767: ARRAY
83768: PUSH
83769: LD_INT 2
83771: ARRAY
83772: PPUSH
83773: CALL_OW 488
83777: NOT
83778: PUSH
83779: LD_VAR 0 6
83783: PUSH
83784: LD_VAR 0 4
83788: ARRAY
83789: PUSH
83790: LD_INT 1
83792: ARRAY
83793: PPUSH
83794: LD_VAR 0 6
83798: PUSH
83799: LD_VAR 0 4
83803: ARRAY
83804: PUSH
83805: LD_INT 2
83807: ARRAY
83808: PPUSH
83809: CALL_OW 428
83813: PUSH
83814: LD_INT 0
83816: NONEQUAL
83817: OR
83818: IFFALSE 83840
// tmp := Delete ( tmp , i ) ;
83820: LD_ADDR_VAR 0 6
83824: PUSH
83825: LD_VAR 0 6
83829: PPUSH
83830: LD_VAR 0 4
83834: PPUSH
83835: CALL_OW 3
83839: ST_TO_ADDR
83840: GO 83740
83842: POP
83843: POP
// j := GetClosestHex ( unit , tmp ) ;
83844: LD_ADDR_VAR 0 5
83848: PUSH
83849: LD_VAR 0 1
83853: PPUSH
83854: LD_VAR 0 6
83858: PPUSH
83859: CALL 83135 0 2
83863: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83864: LD_VAR 0 1
83868: PPUSH
83869: LD_VAR 0 5
83873: PUSH
83874: LD_INT 1
83876: ARRAY
83877: PPUSH
83878: LD_VAR 0 5
83882: PUSH
83883: LD_INT 2
83885: ARRAY
83886: PPUSH
83887: CALL_OW 111
// end ;
83891: LD_VAR 0 3
83895: RET
// export function PrepareApemanSoldier ( ) ; begin
83896: LD_INT 0
83898: PPUSH
// uc_nation := 0 ;
83899: LD_ADDR_OWVAR 21
83903: PUSH
83904: LD_INT 0
83906: ST_TO_ADDR
// hc_sex := sex_male ;
83907: LD_ADDR_OWVAR 27
83911: PUSH
83912: LD_INT 1
83914: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83915: LD_ADDR_OWVAR 28
83919: PUSH
83920: LD_INT 15
83922: ST_TO_ADDR
// hc_gallery :=  ;
83923: LD_ADDR_OWVAR 33
83927: PUSH
83928: LD_STRING 
83930: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83931: LD_ADDR_OWVAR 31
83935: PUSH
83936: LD_INT 0
83938: PPUSH
83939: LD_INT 3
83941: PPUSH
83942: CALL_OW 12
83946: PUSH
83947: LD_INT 0
83949: PPUSH
83950: LD_INT 3
83952: PPUSH
83953: CALL_OW 12
83957: PUSH
83958: LD_INT 0
83960: PUSH
83961: LD_INT 0
83963: PUSH
83964: EMPTY
83965: LIST
83966: LIST
83967: LIST
83968: LIST
83969: ST_TO_ADDR
// end ;
83970: LD_VAR 0 1
83974: RET
// export function PrepareApemanEngineer ( ) ; begin
83975: LD_INT 0
83977: PPUSH
// uc_nation := 0 ;
83978: LD_ADDR_OWVAR 21
83982: PUSH
83983: LD_INT 0
83985: ST_TO_ADDR
// hc_sex := sex_male ;
83986: LD_ADDR_OWVAR 27
83990: PUSH
83991: LD_INT 1
83993: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83994: LD_ADDR_OWVAR 28
83998: PUSH
83999: LD_INT 16
84001: ST_TO_ADDR
// hc_gallery :=  ;
84002: LD_ADDR_OWVAR 33
84006: PUSH
84007: LD_STRING 
84009: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
84010: LD_ADDR_OWVAR 31
84014: PUSH
84015: LD_INT 0
84017: PPUSH
84018: LD_INT 3
84020: PPUSH
84021: CALL_OW 12
84025: PUSH
84026: LD_INT 0
84028: PPUSH
84029: LD_INT 3
84031: PPUSH
84032: CALL_OW 12
84036: PUSH
84037: LD_INT 0
84039: PUSH
84040: LD_INT 0
84042: PUSH
84043: EMPTY
84044: LIST
84045: LIST
84046: LIST
84047: LIST
84048: ST_TO_ADDR
// end ;
84049: LD_VAR 0 1
84053: RET
// export function PrepareApeman ( agressivity ) ; begin
84054: LD_INT 0
84056: PPUSH
// uc_side := 0 ;
84057: LD_ADDR_OWVAR 20
84061: PUSH
84062: LD_INT 0
84064: ST_TO_ADDR
// uc_nation := 0 ;
84065: LD_ADDR_OWVAR 21
84069: PUSH
84070: LD_INT 0
84072: ST_TO_ADDR
// hc_sex := sex_male ;
84073: LD_ADDR_OWVAR 27
84077: PUSH
84078: LD_INT 1
84080: ST_TO_ADDR
// hc_class := class_apeman ;
84081: LD_ADDR_OWVAR 28
84085: PUSH
84086: LD_INT 12
84088: ST_TO_ADDR
// hc_gallery :=  ;
84089: LD_ADDR_OWVAR 33
84093: PUSH
84094: LD_STRING 
84096: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84097: LD_ADDR_OWVAR 35
84101: PUSH
84102: LD_VAR 0 1
84106: NEG
84107: PPUSH
84108: LD_VAR 0 1
84112: PPUSH
84113: CALL_OW 12
84117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
84118: LD_ADDR_OWVAR 31
84122: PUSH
84123: LD_INT 0
84125: PPUSH
84126: LD_INT 3
84128: PPUSH
84129: CALL_OW 12
84133: PUSH
84134: LD_INT 0
84136: PPUSH
84137: LD_INT 3
84139: PPUSH
84140: CALL_OW 12
84144: PUSH
84145: LD_INT 0
84147: PUSH
84148: LD_INT 0
84150: PUSH
84151: EMPTY
84152: LIST
84153: LIST
84154: LIST
84155: LIST
84156: ST_TO_ADDR
// end ;
84157: LD_VAR 0 2
84161: RET
// export function PrepareTiger ( agressivity ) ; begin
84162: LD_INT 0
84164: PPUSH
// uc_side := 0 ;
84165: LD_ADDR_OWVAR 20
84169: PUSH
84170: LD_INT 0
84172: ST_TO_ADDR
// uc_nation := 0 ;
84173: LD_ADDR_OWVAR 21
84177: PUSH
84178: LD_INT 0
84180: ST_TO_ADDR
// hc_class := class_tiger ;
84181: LD_ADDR_OWVAR 28
84185: PUSH
84186: LD_INT 14
84188: ST_TO_ADDR
// hc_gallery :=  ;
84189: LD_ADDR_OWVAR 33
84193: PUSH
84194: LD_STRING 
84196: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84197: LD_ADDR_OWVAR 35
84201: PUSH
84202: LD_VAR 0 1
84206: NEG
84207: PPUSH
84208: LD_VAR 0 1
84212: PPUSH
84213: CALL_OW 12
84217: ST_TO_ADDR
// end ;
84218: LD_VAR 0 2
84222: RET
// export function PrepareEnchidna ( ) ; begin
84223: LD_INT 0
84225: PPUSH
// uc_side := 0 ;
84226: LD_ADDR_OWVAR 20
84230: PUSH
84231: LD_INT 0
84233: ST_TO_ADDR
// uc_nation := 0 ;
84234: LD_ADDR_OWVAR 21
84238: PUSH
84239: LD_INT 0
84241: ST_TO_ADDR
// hc_class := class_baggie ;
84242: LD_ADDR_OWVAR 28
84246: PUSH
84247: LD_INT 13
84249: ST_TO_ADDR
// hc_gallery :=  ;
84250: LD_ADDR_OWVAR 33
84254: PUSH
84255: LD_STRING 
84257: ST_TO_ADDR
// end ;
84258: LD_VAR 0 1
84262: RET
// export function PrepareFrog ( ) ; begin
84263: LD_INT 0
84265: PPUSH
// uc_side := 0 ;
84266: LD_ADDR_OWVAR 20
84270: PUSH
84271: LD_INT 0
84273: ST_TO_ADDR
// uc_nation := 0 ;
84274: LD_ADDR_OWVAR 21
84278: PUSH
84279: LD_INT 0
84281: ST_TO_ADDR
// hc_class := class_frog ;
84282: LD_ADDR_OWVAR 28
84286: PUSH
84287: LD_INT 19
84289: ST_TO_ADDR
// hc_gallery :=  ;
84290: LD_ADDR_OWVAR 33
84294: PUSH
84295: LD_STRING 
84297: ST_TO_ADDR
// end ;
84298: LD_VAR 0 1
84302: RET
// export function PrepareFish ( ) ; begin
84303: LD_INT 0
84305: PPUSH
// uc_side := 0 ;
84306: LD_ADDR_OWVAR 20
84310: PUSH
84311: LD_INT 0
84313: ST_TO_ADDR
// uc_nation := 0 ;
84314: LD_ADDR_OWVAR 21
84318: PUSH
84319: LD_INT 0
84321: ST_TO_ADDR
// hc_class := class_fish ;
84322: LD_ADDR_OWVAR 28
84326: PUSH
84327: LD_INT 20
84329: ST_TO_ADDR
// hc_gallery :=  ;
84330: LD_ADDR_OWVAR 33
84334: PUSH
84335: LD_STRING 
84337: ST_TO_ADDR
// end ;
84338: LD_VAR 0 1
84342: RET
// export function PrepareBird ( ) ; begin
84343: LD_INT 0
84345: PPUSH
// uc_side := 0 ;
84346: LD_ADDR_OWVAR 20
84350: PUSH
84351: LD_INT 0
84353: ST_TO_ADDR
// uc_nation := 0 ;
84354: LD_ADDR_OWVAR 21
84358: PUSH
84359: LD_INT 0
84361: ST_TO_ADDR
// hc_class := class_phororhacos ;
84362: LD_ADDR_OWVAR 28
84366: PUSH
84367: LD_INT 18
84369: ST_TO_ADDR
// hc_gallery :=  ;
84370: LD_ADDR_OWVAR 33
84374: PUSH
84375: LD_STRING 
84377: ST_TO_ADDR
// end ;
84378: LD_VAR 0 1
84382: RET
// export function PrepareHorse ( ) ; begin
84383: LD_INT 0
84385: PPUSH
// uc_side := 0 ;
84386: LD_ADDR_OWVAR 20
84390: PUSH
84391: LD_INT 0
84393: ST_TO_ADDR
// uc_nation := 0 ;
84394: LD_ADDR_OWVAR 21
84398: PUSH
84399: LD_INT 0
84401: ST_TO_ADDR
// hc_class := class_horse ;
84402: LD_ADDR_OWVAR 28
84406: PUSH
84407: LD_INT 21
84409: ST_TO_ADDR
// hc_gallery :=  ;
84410: LD_ADDR_OWVAR 33
84414: PUSH
84415: LD_STRING 
84417: ST_TO_ADDR
// end ;
84418: LD_VAR 0 1
84422: RET
// export function PrepareMastodont ( ) ; begin
84423: LD_INT 0
84425: PPUSH
// uc_side := 0 ;
84426: LD_ADDR_OWVAR 20
84430: PUSH
84431: LD_INT 0
84433: ST_TO_ADDR
// uc_nation := 0 ;
84434: LD_ADDR_OWVAR 21
84438: PUSH
84439: LD_INT 0
84441: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84442: LD_ADDR_OWVAR 37
84446: PUSH
84447: LD_INT 31
84449: ST_TO_ADDR
// vc_control := control_rider ;
84450: LD_ADDR_OWVAR 38
84454: PUSH
84455: LD_INT 4
84457: ST_TO_ADDR
// end ;
84458: LD_VAR 0 1
84462: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84463: LD_INT 0
84465: PPUSH
84466: PPUSH
84467: PPUSH
// uc_side = 0 ;
84468: LD_ADDR_OWVAR 20
84472: PUSH
84473: LD_INT 0
84475: ST_TO_ADDR
// uc_nation = 0 ;
84476: LD_ADDR_OWVAR 21
84480: PUSH
84481: LD_INT 0
84483: ST_TO_ADDR
// InitHc_All ( ) ;
84484: CALL_OW 584
// InitVc ;
84488: CALL_OW 20
// if mastodonts then
84492: LD_VAR 0 6
84496: IFFALSE 84563
// for i = 1 to mastodonts do
84498: LD_ADDR_VAR 0 11
84502: PUSH
84503: DOUBLE
84504: LD_INT 1
84506: DEC
84507: ST_TO_ADDR
84508: LD_VAR 0 6
84512: PUSH
84513: FOR_TO
84514: IFFALSE 84561
// begin vc_chassis := 31 ;
84516: LD_ADDR_OWVAR 37
84520: PUSH
84521: LD_INT 31
84523: ST_TO_ADDR
// vc_control := control_rider ;
84524: LD_ADDR_OWVAR 38
84528: PUSH
84529: LD_INT 4
84531: ST_TO_ADDR
// animal := CreateVehicle ;
84532: LD_ADDR_VAR 0 12
84536: PUSH
84537: CALL_OW 45
84541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84542: LD_VAR 0 12
84546: PPUSH
84547: LD_VAR 0 8
84551: PPUSH
84552: LD_INT 0
84554: PPUSH
84555: CALL 86691 0 3
// end ;
84559: GO 84513
84561: POP
84562: POP
// if horses then
84563: LD_VAR 0 5
84567: IFFALSE 84634
// for i = 1 to horses do
84569: LD_ADDR_VAR 0 11
84573: PUSH
84574: DOUBLE
84575: LD_INT 1
84577: DEC
84578: ST_TO_ADDR
84579: LD_VAR 0 5
84583: PUSH
84584: FOR_TO
84585: IFFALSE 84632
// begin hc_class := 21 ;
84587: LD_ADDR_OWVAR 28
84591: PUSH
84592: LD_INT 21
84594: ST_TO_ADDR
// hc_gallery :=  ;
84595: LD_ADDR_OWVAR 33
84599: PUSH
84600: LD_STRING 
84602: ST_TO_ADDR
// animal := CreateHuman ;
84603: LD_ADDR_VAR 0 12
84607: PUSH
84608: CALL_OW 44
84612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84613: LD_VAR 0 12
84617: PPUSH
84618: LD_VAR 0 8
84622: PPUSH
84623: LD_INT 0
84625: PPUSH
84626: CALL 86691 0 3
// end ;
84630: GO 84584
84632: POP
84633: POP
// if birds then
84634: LD_VAR 0 1
84638: IFFALSE 84705
// for i = 1 to birds do
84640: LD_ADDR_VAR 0 11
84644: PUSH
84645: DOUBLE
84646: LD_INT 1
84648: DEC
84649: ST_TO_ADDR
84650: LD_VAR 0 1
84654: PUSH
84655: FOR_TO
84656: IFFALSE 84703
// begin hc_class = 18 ;
84658: LD_ADDR_OWVAR 28
84662: PUSH
84663: LD_INT 18
84665: ST_TO_ADDR
// hc_gallery =  ;
84666: LD_ADDR_OWVAR 33
84670: PUSH
84671: LD_STRING 
84673: ST_TO_ADDR
// animal := CreateHuman ;
84674: LD_ADDR_VAR 0 12
84678: PUSH
84679: CALL_OW 44
84683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84684: LD_VAR 0 12
84688: PPUSH
84689: LD_VAR 0 8
84693: PPUSH
84694: LD_INT 0
84696: PPUSH
84697: CALL 86691 0 3
// end ;
84701: GO 84655
84703: POP
84704: POP
// if tigers then
84705: LD_VAR 0 2
84709: IFFALSE 84793
// for i = 1 to tigers do
84711: LD_ADDR_VAR 0 11
84715: PUSH
84716: DOUBLE
84717: LD_INT 1
84719: DEC
84720: ST_TO_ADDR
84721: LD_VAR 0 2
84725: PUSH
84726: FOR_TO
84727: IFFALSE 84791
// begin hc_class = class_tiger ;
84729: LD_ADDR_OWVAR 28
84733: PUSH
84734: LD_INT 14
84736: ST_TO_ADDR
// hc_gallery =  ;
84737: LD_ADDR_OWVAR 33
84741: PUSH
84742: LD_STRING 
84744: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84745: LD_ADDR_OWVAR 35
84749: PUSH
84750: LD_INT 7
84752: NEG
84753: PPUSH
84754: LD_INT 7
84756: PPUSH
84757: CALL_OW 12
84761: ST_TO_ADDR
// animal := CreateHuman ;
84762: LD_ADDR_VAR 0 12
84766: PUSH
84767: CALL_OW 44
84771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84772: LD_VAR 0 12
84776: PPUSH
84777: LD_VAR 0 8
84781: PPUSH
84782: LD_INT 0
84784: PPUSH
84785: CALL 86691 0 3
// end ;
84789: GO 84726
84791: POP
84792: POP
// if apemans then
84793: LD_VAR 0 3
84797: IFFALSE 84920
// for i = 1 to apemans do
84799: LD_ADDR_VAR 0 11
84803: PUSH
84804: DOUBLE
84805: LD_INT 1
84807: DEC
84808: ST_TO_ADDR
84809: LD_VAR 0 3
84813: PUSH
84814: FOR_TO
84815: IFFALSE 84918
// begin hc_class = class_apeman ;
84817: LD_ADDR_OWVAR 28
84821: PUSH
84822: LD_INT 12
84824: ST_TO_ADDR
// hc_gallery =  ;
84825: LD_ADDR_OWVAR 33
84829: PUSH
84830: LD_STRING 
84832: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84833: LD_ADDR_OWVAR 35
84837: PUSH
84838: LD_INT 2
84840: NEG
84841: PPUSH
84842: LD_INT 2
84844: PPUSH
84845: CALL_OW 12
84849: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84850: LD_ADDR_OWVAR 31
84854: PUSH
84855: LD_INT 1
84857: PPUSH
84858: LD_INT 3
84860: PPUSH
84861: CALL_OW 12
84865: PUSH
84866: LD_INT 1
84868: PPUSH
84869: LD_INT 3
84871: PPUSH
84872: CALL_OW 12
84876: PUSH
84877: LD_INT 0
84879: PUSH
84880: LD_INT 0
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: LIST
84887: LIST
84888: ST_TO_ADDR
// animal := CreateHuman ;
84889: LD_ADDR_VAR 0 12
84893: PUSH
84894: CALL_OW 44
84898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84899: LD_VAR 0 12
84903: PPUSH
84904: LD_VAR 0 8
84908: PPUSH
84909: LD_INT 0
84911: PPUSH
84912: CALL 86691 0 3
// end ;
84916: GO 84814
84918: POP
84919: POP
// if enchidnas then
84920: LD_VAR 0 4
84924: IFFALSE 84991
// for i = 1 to enchidnas do
84926: LD_ADDR_VAR 0 11
84930: PUSH
84931: DOUBLE
84932: LD_INT 1
84934: DEC
84935: ST_TO_ADDR
84936: LD_VAR 0 4
84940: PUSH
84941: FOR_TO
84942: IFFALSE 84989
// begin hc_class = 13 ;
84944: LD_ADDR_OWVAR 28
84948: PUSH
84949: LD_INT 13
84951: ST_TO_ADDR
// hc_gallery =  ;
84952: LD_ADDR_OWVAR 33
84956: PUSH
84957: LD_STRING 
84959: ST_TO_ADDR
// animal := CreateHuman ;
84960: LD_ADDR_VAR 0 12
84964: PUSH
84965: CALL_OW 44
84969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84970: LD_VAR 0 12
84974: PPUSH
84975: LD_VAR 0 8
84979: PPUSH
84980: LD_INT 0
84982: PPUSH
84983: CALL 86691 0 3
// end ;
84987: GO 84941
84989: POP
84990: POP
// if fishes then
84991: LD_VAR 0 7
84995: IFFALSE 85062
// for i = 1 to fishes do
84997: LD_ADDR_VAR 0 11
85001: PUSH
85002: DOUBLE
85003: LD_INT 1
85005: DEC
85006: ST_TO_ADDR
85007: LD_VAR 0 7
85011: PUSH
85012: FOR_TO
85013: IFFALSE 85060
// begin hc_class = 20 ;
85015: LD_ADDR_OWVAR 28
85019: PUSH
85020: LD_INT 20
85022: ST_TO_ADDR
// hc_gallery =  ;
85023: LD_ADDR_OWVAR 33
85027: PUSH
85028: LD_STRING 
85030: ST_TO_ADDR
// animal := CreateHuman ;
85031: LD_ADDR_VAR 0 12
85035: PUSH
85036: CALL_OW 44
85040: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
85041: LD_VAR 0 12
85045: PPUSH
85046: LD_VAR 0 9
85050: PPUSH
85051: LD_INT 0
85053: PPUSH
85054: CALL 86691 0 3
// end ;
85058: GO 85012
85060: POP
85061: POP
// end ;
85062: LD_VAR 0 10
85066: RET
// export function WantHeal ( sci , unit ) ; begin
85067: LD_INT 0
85069: PPUSH
// if GetTaskList ( sci ) > 0 then
85070: LD_VAR 0 1
85074: PPUSH
85075: CALL_OW 437
85079: PUSH
85080: LD_INT 0
85082: GREATER
85083: IFFALSE 85153
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
85085: LD_VAR 0 1
85089: PPUSH
85090: CALL_OW 437
85094: PUSH
85095: LD_INT 1
85097: ARRAY
85098: PUSH
85099: LD_INT 1
85101: ARRAY
85102: PUSH
85103: LD_STRING l
85105: EQUAL
85106: PUSH
85107: LD_VAR 0 1
85111: PPUSH
85112: CALL_OW 437
85116: PUSH
85117: LD_INT 1
85119: ARRAY
85120: PUSH
85121: LD_INT 4
85123: ARRAY
85124: PUSH
85125: LD_VAR 0 2
85129: EQUAL
85130: AND
85131: IFFALSE 85143
// result := true else
85133: LD_ADDR_VAR 0 3
85137: PUSH
85138: LD_INT 1
85140: ST_TO_ADDR
85141: GO 85151
// result := false ;
85143: LD_ADDR_VAR 0 3
85147: PUSH
85148: LD_INT 0
85150: ST_TO_ADDR
// end else
85151: GO 85161
// result := false ;
85153: LD_ADDR_VAR 0 3
85157: PUSH
85158: LD_INT 0
85160: ST_TO_ADDR
// end ;
85161: LD_VAR 0 3
85165: RET
// export function HealTarget ( sci ) ; begin
85166: LD_INT 0
85168: PPUSH
// if not sci then
85169: LD_VAR 0 1
85173: NOT
85174: IFFALSE 85178
// exit ;
85176: GO 85243
// result := 0 ;
85178: LD_ADDR_VAR 0 2
85182: PUSH
85183: LD_INT 0
85185: ST_TO_ADDR
// if GetTaskList ( sci ) then
85186: LD_VAR 0 1
85190: PPUSH
85191: CALL_OW 437
85195: IFFALSE 85243
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
85197: LD_VAR 0 1
85201: PPUSH
85202: CALL_OW 437
85206: PUSH
85207: LD_INT 1
85209: ARRAY
85210: PUSH
85211: LD_INT 1
85213: ARRAY
85214: PUSH
85215: LD_STRING l
85217: EQUAL
85218: IFFALSE 85243
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
85220: LD_ADDR_VAR 0 2
85224: PUSH
85225: LD_VAR 0 1
85229: PPUSH
85230: CALL_OW 437
85234: PUSH
85235: LD_INT 1
85237: ARRAY
85238: PUSH
85239: LD_INT 4
85241: ARRAY
85242: ST_TO_ADDR
// end ;
85243: LD_VAR 0 2
85247: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
85248: LD_INT 0
85250: PPUSH
85251: PPUSH
85252: PPUSH
85253: PPUSH
// if not base_units then
85254: LD_VAR 0 1
85258: NOT
85259: IFFALSE 85263
// exit ;
85261: GO 85350
// result := false ;
85263: LD_ADDR_VAR 0 2
85267: PUSH
85268: LD_INT 0
85270: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85271: LD_ADDR_VAR 0 5
85275: PUSH
85276: LD_VAR 0 1
85280: PPUSH
85281: LD_INT 21
85283: PUSH
85284: LD_INT 3
85286: PUSH
85287: EMPTY
85288: LIST
85289: LIST
85290: PPUSH
85291: CALL_OW 72
85295: ST_TO_ADDR
// if not tmp then
85296: LD_VAR 0 5
85300: NOT
85301: IFFALSE 85305
// exit ;
85303: GO 85350
// for i in tmp do
85305: LD_ADDR_VAR 0 3
85309: PUSH
85310: LD_VAR 0 5
85314: PUSH
85315: FOR_IN
85316: IFFALSE 85348
// begin result := EnemyInRange ( i , 22 ) ;
85318: LD_ADDR_VAR 0 2
85322: PUSH
85323: LD_VAR 0 3
85327: PPUSH
85328: LD_INT 22
85330: PPUSH
85331: CALL 82937 0 2
85335: ST_TO_ADDR
// if result then
85336: LD_VAR 0 2
85340: IFFALSE 85346
// exit ;
85342: POP
85343: POP
85344: GO 85350
// end ;
85346: GO 85315
85348: POP
85349: POP
// end ;
85350: LD_VAR 0 2
85354: RET
// export function FilterByTag ( units , tag ) ; begin
85355: LD_INT 0
85357: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
85358: LD_ADDR_VAR 0 3
85362: PUSH
85363: LD_VAR 0 1
85367: PPUSH
85368: LD_INT 120
85370: PUSH
85371: LD_VAR 0 2
85375: PUSH
85376: EMPTY
85377: LIST
85378: LIST
85379: PPUSH
85380: CALL_OW 72
85384: ST_TO_ADDR
// end ;
85385: LD_VAR 0 3
85389: RET
// export function IsDriver ( un ) ; begin
85390: LD_INT 0
85392: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85393: LD_ADDR_VAR 0 2
85397: PUSH
85398: LD_VAR 0 1
85402: PUSH
85403: LD_INT 55
85405: PUSH
85406: EMPTY
85407: LIST
85408: PPUSH
85409: CALL_OW 69
85413: IN
85414: ST_TO_ADDR
// end ;
85415: LD_VAR 0 2
85419: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85420: LD_INT 0
85422: PPUSH
85423: PPUSH
// list := [ ] ;
85424: LD_ADDR_VAR 0 5
85428: PUSH
85429: EMPTY
85430: ST_TO_ADDR
// case d of 0 :
85431: LD_VAR 0 3
85435: PUSH
85436: LD_INT 0
85438: DOUBLE
85439: EQUAL
85440: IFTRUE 85444
85442: GO 85577
85444: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85445: LD_ADDR_VAR 0 5
85449: PUSH
85450: LD_VAR 0 1
85454: PUSH
85455: LD_INT 4
85457: MINUS
85458: PUSH
85459: LD_VAR 0 2
85463: PUSH
85464: LD_INT 4
85466: MINUS
85467: PUSH
85468: LD_INT 2
85470: PUSH
85471: EMPTY
85472: LIST
85473: LIST
85474: LIST
85475: PUSH
85476: LD_VAR 0 1
85480: PUSH
85481: LD_INT 3
85483: MINUS
85484: PUSH
85485: LD_VAR 0 2
85489: PUSH
85490: LD_INT 1
85492: PUSH
85493: EMPTY
85494: LIST
85495: LIST
85496: LIST
85497: PUSH
85498: LD_VAR 0 1
85502: PUSH
85503: LD_INT 4
85505: PLUS
85506: PUSH
85507: LD_VAR 0 2
85511: PUSH
85512: LD_INT 4
85514: PUSH
85515: EMPTY
85516: LIST
85517: LIST
85518: LIST
85519: PUSH
85520: LD_VAR 0 1
85524: PUSH
85525: LD_INT 3
85527: PLUS
85528: PUSH
85529: LD_VAR 0 2
85533: PUSH
85534: LD_INT 3
85536: PLUS
85537: PUSH
85538: LD_INT 5
85540: PUSH
85541: EMPTY
85542: LIST
85543: LIST
85544: LIST
85545: PUSH
85546: LD_VAR 0 1
85550: PUSH
85551: LD_VAR 0 2
85555: PUSH
85556: LD_INT 4
85558: PLUS
85559: PUSH
85560: LD_INT 0
85562: PUSH
85563: EMPTY
85564: LIST
85565: LIST
85566: LIST
85567: PUSH
85568: EMPTY
85569: LIST
85570: LIST
85571: LIST
85572: LIST
85573: LIST
85574: ST_TO_ADDR
// end ; 1 :
85575: GO 86275
85577: LD_INT 1
85579: DOUBLE
85580: EQUAL
85581: IFTRUE 85585
85583: GO 85718
85585: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85586: LD_ADDR_VAR 0 5
85590: PUSH
85591: LD_VAR 0 1
85595: PUSH
85596: LD_VAR 0 2
85600: PUSH
85601: LD_INT 4
85603: MINUS
85604: PUSH
85605: LD_INT 3
85607: PUSH
85608: EMPTY
85609: LIST
85610: LIST
85611: LIST
85612: PUSH
85613: LD_VAR 0 1
85617: PUSH
85618: LD_INT 3
85620: MINUS
85621: PUSH
85622: LD_VAR 0 2
85626: PUSH
85627: LD_INT 3
85629: MINUS
85630: PUSH
85631: LD_INT 2
85633: PUSH
85634: EMPTY
85635: LIST
85636: LIST
85637: LIST
85638: PUSH
85639: LD_VAR 0 1
85643: PUSH
85644: LD_INT 4
85646: MINUS
85647: PUSH
85648: LD_VAR 0 2
85652: PUSH
85653: LD_INT 1
85655: PUSH
85656: EMPTY
85657: LIST
85658: LIST
85659: LIST
85660: PUSH
85661: LD_VAR 0 1
85665: PUSH
85666: LD_VAR 0 2
85670: PUSH
85671: LD_INT 3
85673: PLUS
85674: PUSH
85675: LD_INT 0
85677: PUSH
85678: EMPTY
85679: LIST
85680: LIST
85681: LIST
85682: PUSH
85683: LD_VAR 0 1
85687: PUSH
85688: LD_INT 4
85690: PLUS
85691: PUSH
85692: LD_VAR 0 2
85696: PUSH
85697: LD_INT 4
85699: PLUS
85700: PUSH
85701: LD_INT 5
85703: PUSH
85704: EMPTY
85705: LIST
85706: LIST
85707: LIST
85708: PUSH
85709: EMPTY
85710: LIST
85711: LIST
85712: LIST
85713: LIST
85714: LIST
85715: ST_TO_ADDR
// end ; 2 :
85716: GO 86275
85718: LD_INT 2
85720: DOUBLE
85721: EQUAL
85722: IFTRUE 85726
85724: GO 85855
85726: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85727: LD_ADDR_VAR 0 5
85731: PUSH
85732: LD_VAR 0 1
85736: PUSH
85737: LD_VAR 0 2
85741: PUSH
85742: LD_INT 3
85744: MINUS
85745: PUSH
85746: LD_INT 3
85748: PUSH
85749: EMPTY
85750: LIST
85751: LIST
85752: LIST
85753: PUSH
85754: LD_VAR 0 1
85758: PUSH
85759: LD_INT 4
85761: PLUS
85762: PUSH
85763: LD_VAR 0 2
85767: PUSH
85768: LD_INT 4
85770: PUSH
85771: EMPTY
85772: LIST
85773: LIST
85774: LIST
85775: PUSH
85776: LD_VAR 0 1
85780: PUSH
85781: LD_VAR 0 2
85785: PUSH
85786: LD_INT 4
85788: PLUS
85789: PUSH
85790: LD_INT 0
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: LIST
85797: PUSH
85798: LD_VAR 0 1
85802: PUSH
85803: LD_INT 3
85805: MINUS
85806: PUSH
85807: LD_VAR 0 2
85811: PUSH
85812: LD_INT 1
85814: PUSH
85815: EMPTY
85816: LIST
85817: LIST
85818: LIST
85819: PUSH
85820: LD_VAR 0 1
85824: PUSH
85825: LD_INT 4
85827: MINUS
85828: PUSH
85829: LD_VAR 0 2
85833: PUSH
85834: LD_INT 4
85836: MINUS
85837: PUSH
85838: LD_INT 2
85840: PUSH
85841: EMPTY
85842: LIST
85843: LIST
85844: LIST
85845: PUSH
85846: EMPTY
85847: LIST
85848: LIST
85849: LIST
85850: LIST
85851: LIST
85852: ST_TO_ADDR
// end ; 3 :
85853: GO 86275
85855: LD_INT 3
85857: DOUBLE
85858: EQUAL
85859: IFTRUE 85863
85861: GO 85996
85863: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85864: LD_ADDR_VAR 0 5
85868: PUSH
85869: LD_VAR 0 1
85873: PUSH
85874: LD_INT 3
85876: PLUS
85877: PUSH
85878: LD_VAR 0 2
85882: PUSH
85883: LD_INT 4
85885: PUSH
85886: EMPTY
85887: LIST
85888: LIST
85889: LIST
85890: PUSH
85891: LD_VAR 0 1
85895: PUSH
85896: LD_INT 4
85898: PLUS
85899: PUSH
85900: LD_VAR 0 2
85904: PUSH
85905: LD_INT 4
85907: PLUS
85908: PUSH
85909: LD_INT 5
85911: PUSH
85912: EMPTY
85913: LIST
85914: LIST
85915: LIST
85916: PUSH
85917: LD_VAR 0 1
85921: PUSH
85922: LD_INT 4
85924: MINUS
85925: PUSH
85926: LD_VAR 0 2
85930: PUSH
85931: LD_INT 1
85933: PUSH
85934: EMPTY
85935: LIST
85936: LIST
85937: LIST
85938: PUSH
85939: LD_VAR 0 1
85943: PUSH
85944: LD_VAR 0 2
85948: PUSH
85949: LD_INT 4
85951: MINUS
85952: PUSH
85953: LD_INT 3
85955: PUSH
85956: EMPTY
85957: LIST
85958: LIST
85959: LIST
85960: PUSH
85961: LD_VAR 0 1
85965: PUSH
85966: LD_INT 3
85968: MINUS
85969: PUSH
85970: LD_VAR 0 2
85974: PUSH
85975: LD_INT 3
85977: MINUS
85978: PUSH
85979: LD_INT 2
85981: PUSH
85982: EMPTY
85983: LIST
85984: LIST
85985: LIST
85986: PUSH
85987: EMPTY
85988: LIST
85989: LIST
85990: LIST
85991: LIST
85992: LIST
85993: ST_TO_ADDR
// end ; 4 :
85994: GO 86275
85996: LD_INT 4
85998: DOUBLE
85999: EQUAL
86000: IFTRUE 86004
86002: GO 86137
86004: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
86005: LD_ADDR_VAR 0 5
86009: PUSH
86010: LD_VAR 0 1
86014: PUSH
86015: LD_VAR 0 2
86019: PUSH
86020: LD_INT 4
86022: PLUS
86023: PUSH
86024: LD_INT 0
86026: PUSH
86027: EMPTY
86028: LIST
86029: LIST
86030: LIST
86031: PUSH
86032: LD_VAR 0 1
86036: PUSH
86037: LD_INT 3
86039: PLUS
86040: PUSH
86041: LD_VAR 0 2
86045: PUSH
86046: LD_INT 3
86048: PLUS
86049: PUSH
86050: LD_INT 5
86052: PUSH
86053: EMPTY
86054: LIST
86055: LIST
86056: LIST
86057: PUSH
86058: LD_VAR 0 1
86062: PUSH
86063: LD_INT 4
86065: PLUS
86066: PUSH
86067: LD_VAR 0 2
86071: PUSH
86072: LD_INT 4
86074: PUSH
86075: EMPTY
86076: LIST
86077: LIST
86078: LIST
86079: PUSH
86080: LD_VAR 0 1
86084: PUSH
86085: LD_VAR 0 2
86089: PUSH
86090: LD_INT 3
86092: MINUS
86093: PUSH
86094: LD_INT 3
86096: PUSH
86097: EMPTY
86098: LIST
86099: LIST
86100: LIST
86101: PUSH
86102: LD_VAR 0 1
86106: PUSH
86107: LD_INT 4
86109: MINUS
86110: PUSH
86111: LD_VAR 0 2
86115: PUSH
86116: LD_INT 4
86118: MINUS
86119: PUSH
86120: LD_INT 2
86122: PUSH
86123: EMPTY
86124: LIST
86125: LIST
86126: LIST
86127: PUSH
86128: EMPTY
86129: LIST
86130: LIST
86131: LIST
86132: LIST
86133: LIST
86134: ST_TO_ADDR
// end ; 5 :
86135: GO 86275
86137: LD_INT 5
86139: DOUBLE
86140: EQUAL
86141: IFTRUE 86145
86143: GO 86274
86145: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
86146: LD_ADDR_VAR 0 5
86150: PUSH
86151: LD_VAR 0 1
86155: PUSH
86156: LD_INT 4
86158: MINUS
86159: PUSH
86160: LD_VAR 0 2
86164: PUSH
86165: LD_INT 1
86167: PUSH
86168: EMPTY
86169: LIST
86170: LIST
86171: LIST
86172: PUSH
86173: LD_VAR 0 1
86177: PUSH
86178: LD_VAR 0 2
86182: PUSH
86183: LD_INT 4
86185: MINUS
86186: PUSH
86187: LD_INT 3
86189: PUSH
86190: EMPTY
86191: LIST
86192: LIST
86193: LIST
86194: PUSH
86195: LD_VAR 0 1
86199: PUSH
86200: LD_INT 4
86202: PLUS
86203: PUSH
86204: LD_VAR 0 2
86208: PUSH
86209: LD_INT 4
86211: PLUS
86212: PUSH
86213: LD_INT 5
86215: PUSH
86216: EMPTY
86217: LIST
86218: LIST
86219: LIST
86220: PUSH
86221: LD_VAR 0 1
86225: PUSH
86226: LD_INT 3
86228: PLUS
86229: PUSH
86230: LD_VAR 0 2
86234: PUSH
86235: LD_INT 4
86237: PUSH
86238: EMPTY
86239: LIST
86240: LIST
86241: LIST
86242: PUSH
86243: LD_VAR 0 1
86247: PUSH
86248: LD_VAR 0 2
86252: PUSH
86253: LD_INT 3
86255: PLUS
86256: PUSH
86257: LD_INT 0
86259: PUSH
86260: EMPTY
86261: LIST
86262: LIST
86263: LIST
86264: PUSH
86265: EMPTY
86266: LIST
86267: LIST
86268: LIST
86269: LIST
86270: LIST
86271: ST_TO_ADDR
// end ; end ;
86272: GO 86275
86274: POP
// result := list ;
86275: LD_ADDR_VAR 0 4
86279: PUSH
86280: LD_VAR 0 5
86284: ST_TO_ADDR
// end ;
86285: LD_VAR 0 4
86289: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86290: LD_INT 0
86292: PPUSH
86293: PPUSH
86294: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86295: LD_VAR 0 1
86299: NOT
86300: PUSH
86301: LD_VAR 0 2
86305: PUSH
86306: LD_INT 1
86308: PUSH
86309: LD_INT 2
86311: PUSH
86312: LD_INT 3
86314: PUSH
86315: LD_INT 4
86317: PUSH
86318: EMPTY
86319: LIST
86320: LIST
86321: LIST
86322: LIST
86323: IN
86324: NOT
86325: OR
86326: IFFALSE 86330
// exit ;
86328: GO 86413
// tmp := [ ] ;
86330: LD_ADDR_VAR 0 5
86334: PUSH
86335: EMPTY
86336: ST_TO_ADDR
// for i in units do
86337: LD_ADDR_VAR 0 4
86341: PUSH
86342: LD_VAR 0 1
86346: PUSH
86347: FOR_IN
86348: IFFALSE 86382
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
86350: LD_ADDR_VAR 0 5
86354: PUSH
86355: LD_VAR 0 5
86359: PPUSH
86360: LD_VAR 0 4
86364: PPUSH
86365: LD_VAR 0 2
86369: PPUSH
86370: CALL_OW 259
86374: PPUSH
86375: CALL 87774 0 2
86379: ST_TO_ADDR
86380: GO 86347
86382: POP
86383: POP
// if not tmp then
86384: LD_VAR 0 5
86388: NOT
86389: IFFALSE 86393
// exit ;
86391: GO 86413
// result := SortListByListDesc ( units , tmp ) ;
86393: LD_ADDR_VAR 0 3
86397: PUSH
86398: LD_VAR 0 1
86402: PPUSH
86403: LD_VAR 0 5
86407: PPUSH
86408: CALL_OW 77
86412: ST_TO_ADDR
// end ;
86413: LD_VAR 0 3
86417: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86418: LD_INT 0
86420: PPUSH
86421: PPUSH
86422: PPUSH
// result := false ;
86423: LD_ADDR_VAR 0 3
86427: PUSH
86428: LD_INT 0
86430: ST_TO_ADDR
// if not building then
86431: LD_VAR 0 2
86435: NOT
86436: IFFALSE 86440
// exit ;
86438: GO 86578
// x := GetX ( building ) ;
86440: LD_ADDR_VAR 0 4
86444: PUSH
86445: LD_VAR 0 2
86449: PPUSH
86450: CALL_OW 250
86454: ST_TO_ADDR
// y := GetY ( building ) ;
86455: LD_ADDR_VAR 0 5
86459: PUSH
86460: LD_VAR 0 2
86464: PPUSH
86465: CALL_OW 251
86469: ST_TO_ADDR
// if not x or not y then
86470: LD_VAR 0 4
86474: NOT
86475: PUSH
86476: LD_VAR 0 5
86480: NOT
86481: OR
86482: IFFALSE 86486
// exit ;
86484: GO 86578
// if GetTaskList ( unit ) then
86486: LD_VAR 0 1
86490: PPUSH
86491: CALL_OW 437
86495: IFFALSE 86578
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86497: LD_STRING e
86499: PUSH
86500: LD_VAR 0 1
86504: PPUSH
86505: CALL_OW 437
86509: PUSH
86510: LD_INT 1
86512: ARRAY
86513: PUSH
86514: LD_INT 1
86516: ARRAY
86517: EQUAL
86518: PUSH
86519: LD_VAR 0 4
86523: PUSH
86524: LD_VAR 0 1
86528: PPUSH
86529: CALL_OW 437
86533: PUSH
86534: LD_INT 1
86536: ARRAY
86537: PUSH
86538: LD_INT 2
86540: ARRAY
86541: EQUAL
86542: AND
86543: PUSH
86544: LD_VAR 0 5
86548: PUSH
86549: LD_VAR 0 1
86553: PPUSH
86554: CALL_OW 437
86558: PUSH
86559: LD_INT 1
86561: ARRAY
86562: PUSH
86563: LD_INT 3
86565: ARRAY
86566: EQUAL
86567: AND
86568: IFFALSE 86578
// result := true end ;
86570: LD_ADDR_VAR 0 3
86574: PUSH
86575: LD_INT 1
86577: ST_TO_ADDR
// end ;
86578: LD_VAR 0 3
86582: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86583: LD_INT 0
86585: PPUSH
// result := false ;
86586: LD_ADDR_VAR 0 4
86590: PUSH
86591: LD_INT 0
86593: ST_TO_ADDR
// if GetTaskList ( unit ) then
86594: LD_VAR 0 1
86598: PPUSH
86599: CALL_OW 437
86603: IFFALSE 86686
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86605: LD_STRING M
86607: PUSH
86608: LD_VAR 0 1
86612: PPUSH
86613: CALL_OW 437
86617: PUSH
86618: LD_INT 1
86620: ARRAY
86621: PUSH
86622: LD_INT 1
86624: ARRAY
86625: EQUAL
86626: PUSH
86627: LD_VAR 0 2
86631: PUSH
86632: LD_VAR 0 1
86636: PPUSH
86637: CALL_OW 437
86641: PUSH
86642: LD_INT 1
86644: ARRAY
86645: PUSH
86646: LD_INT 2
86648: ARRAY
86649: EQUAL
86650: AND
86651: PUSH
86652: LD_VAR 0 3
86656: PUSH
86657: LD_VAR 0 1
86661: PPUSH
86662: CALL_OW 437
86666: PUSH
86667: LD_INT 1
86669: ARRAY
86670: PUSH
86671: LD_INT 3
86673: ARRAY
86674: EQUAL
86675: AND
86676: IFFALSE 86686
// result := true ;
86678: LD_ADDR_VAR 0 4
86682: PUSH
86683: LD_INT 1
86685: ST_TO_ADDR
// end ; end ;
86686: LD_VAR 0 4
86690: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86691: LD_INT 0
86693: PPUSH
86694: PPUSH
86695: PPUSH
86696: PPUSH
// if not unit or not area then
86697: LD_VAR 0 1
86701: NOT
86702: PUSH
86703: LD_VAR 0 2
86707: NOT
86708: OR
86709: IFFALSE 86713
// exit ;
86711: GO 86877
// tmp := AreaToList ( area , i ) ;
86713: LD_ADDR_VAR 0 6
86717: PUSH
86718: LD_VAR 0 2
86722: PPUSH
86723: LD_VAR 0 5
86727: PPUSH
86728: CALL_OW 517
86732: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86733: LD_ADDR_VAR 0 5
86737: PUSH
86738: DOUBLE
86739: LD_INT 1
86741: DEC
86742: ST_TO_ADDR
86743: LD_VAR 0 6
86747: PUSH
86748: LD_INT 1
86750: ARRAY
86751: PUSH
86752: FOR_TO
86753: IFFALSE 86875
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86755: LD_ADDR_VAR 0 7
86759: PUSH
86760: LD_VAR 0 6
86764: PUSH
86765: LD_INT 1
86767: ARRAY
86768: PUSH
86769: LD_VAR 0 5
86773: ARRAY
86774: PUSH
86775: LD_VAR 0 6
86779: PUSH
86780: LD_INT 2
86782: ARRAY
86783: PUSH
86784: LD_VAR 0 5
86788: ARRAY
86789: PUSH
86790: EMPTY
86791: LIST
86792: LIST
86793: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86794: LD_VAR 0 7
86798: PUSH
86799: LD_INT 1
86801: ARRAY
86802: PPUSH
86803: LD_VAR 0 7
86807: PUSH
86808: LD_INT 2
86810: ARRAY
86811: PPUSH
86812: CALL_OW 428
86816: PUSH
86817: LD_INT 0
86819: EQUAL
86820: IFFALSE 86873
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86822: LD_VAR 0 1
86826: PPUSH
86827: LD_VAR 0 7
86831: PUSH
86832: LD_INT 1
86834: ARRAY
86835: PPUSH
86836: LD_VAR 0 7
86840: PUSH
86841: LD_INT 2
86843: ARRAY
86844: PPUSH
86845: LD_VAR 0 3
86849: PPUSH
86850: CALL_OW 48
// result := IsPlaced ( unit ) ;
86854: LD_ADDR_VAR 0 4
86858: PUSH
86859: LD_VAR 0 1
86863: PPUSH
86864: CALL_OW 305
86868: ST_TO_ADDR
// exit ;
86869: POP
86870: POP
86871: GO 86877
// end ; end ;
86873: GO 86752
86875: POP
86876: POP
// end ;
86877: LD_VAR 0 4
86881: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86882: LD_INT 0
86884: PPUSH
86885: PPUSH
86886: PPUSH
// if not side or side > 8 then
86887: LD_VAR 0 1
86891: NOT
86892: PUSH
86893: LD_VAR 0 1
86897: PUSH
86898: LD_INT 8
86900: GREATER
86901: OR
86902: IFFALSE 86906
// exit ;
86904: GO 87093
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86906: LD_ADDR_VAR 0 4
86910: PUSH
86911: LD_INT 22
86913: PUSH
86914: LD_VAR 0 1
86918: PUSH
86919: EMPTY
86920: LIST
86921: LIST
86922: PUSH
86923: LD_INT 21
86925: PUSH
86926: LD_INT 3
86928: PUSH
86929: EMPTY
86930: LIST
86931: LIST
86932: PUSH
86933: EMPTY
86934: LIST
86935: LIST
86936: PPUSH
86937: CALL_OW 69
86941: ST_TO_ADDR
// if not tmp then
86942: LD_VAR 0 4
86946: NOT
86947: IFFALSE 86951
// exit ;
86949: GO 87093
// enable_addtolog := true ;
86951: LD_ADDR_OWVAR 81
86955: PUSH
86956: LD_INT 1
86958: ST_TO_ADDR
// AddToLog ( [ ) ;
86959: LD_STRING [
86961: PPUSH
86962: CALL_OW 561
// for i in tmp do
86966: LD_ADDR_VAR 0 3
86970: PUSH
86971: LD_VAR 0 4
86975: PUSH
86976: FOR_IN
86977: IFFALSE 87084
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86979: LD_STRING [
86981: PUSH
86982: LD_VAR 0 3
86986: PPUSH
86987: CALL_OW 266
86991: STR
86992: PUSH
86993: LD_STRING , 
86995: STR
86996: PUSH
86997: LD_VAR 0 3
87001: PPUSH
87002: CALL_OW 250
87006: STR
87007: PUSH
87008: LD_STRING , 
87010: STR
87011: PUSH
87012: LD_VAR 0 3
87016: PPUSH
87017: CALL_OW 251
87021: STR
87022: PUSH
87023: LD_STRING , 
87025: STR
87026: PUSH
87027: LD_VAR 0 3
87031: PPUSH
87032: CALL_OW 254
87036: STR
87037: PUSH
87038: LD_STRING , 
87040: STR
87041: PUSH
87042: LD_VAR 0 3
87046: PPUSH
87047: LD_INT 1
87049: PPUSH
87050: CALL_OW 268
87054: STR
87055: PUSH
87056: LD_STRING , 
87058: STR
87059: PUSH
87060: LD_VAR 0 3
87064: PPUSH
87065: LD_INT 2
87067: PPUSH
87068: CALL_OW 268
87072: STR
87073: PUSH
87074: LD_STRING ],
87076: STR
87077: PPUSH
87078: CALL_OW 561
// end ;
87082: GO 86976
87084: POP
87085: POP
// AddToLog ( ]; ) ;
87086: LD_STRING ];
87088: PPUSH
87089: CALL_OW 561
// end ;
87093: LD_VAR 0 2
87097: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
87098: LD_INT 0
87100: PPUSH
87101: PPUSH
87102: PPUSH
87103: PPUSH
87104: PPUSH
// if not area or not rate or not max then
87105: LD_VAR 0 1
87109: NOT
87110: PUSH
87111: LD_VAR 0 2
87115: NOT
87116: OR
87117: PUSH
87118: LD_VAR 0 4
87122: NOT
87123: OR
87124: IFFALSE 87128
// exit ;
87126: GO 87317
// while 1 do
87128: LD_INT 1
87130: IFFALSE 87317
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
87132: LD_ADDR_VAR 0 9
87136: PUSH
87137: LD_VAR 0 1
87141: PPUSH
87142: LD_INT 1
87144: PPUSH
87145: CALL_OW 287
87149: PUSH
87150: LD_INT 10
87152: MUL
87153: ST_TO_ADDR
// r := rate / 10 ;
87154: LD_ADDR_VAR 0 7
87158: PUSH
87159: LD_VAR 0 2
87163: PUSH
87164: LD_INT 10
87166: DIVREAL
87167: ST_TO_ADDR
// time := 1 1$00 ;
87168: LD_ADDR_VAR 0 8
87172: PUSH
87173: LD_INT 2100
87175: ST_TO_ADDR
// if amount < min then
87176: LD_VAR 0 9
87180: PUSH
87181: LD_VAR 0 3
87185: LESS
87186: IFFALSE 87204
// r := r * 2 else
87188: LD_ADDR_VAR 0 7
87192: PUSH
87193: LD_VAR 0 7
87197: PUSH
87198: LD_INT 2
87200: MUL
87201: ST_TO_ADDR
87202: GO 87230
// if amount > max then
87204: LD_VAR 0 9
87208: PUSH
87209: LD_VAR 0 4
87213: GREATER
87214: IFFALSE 87230
// r := r / 2 ;
87216: LD_ADDR_VAR 0 7
87220: PUSH
87221: LD_VAR 0 7
87225: PUSH
87226: LD_INT 2
87228: DIVREAL
87229: ST_TO_ADDR
// time := time / r ;
87230: LD_ADDR_VAR 0 8
87234: PUSH
87235: LD_VAR 0 8
87239: PUSH
87240: LD_VAR 0 7
87244: DIVREAL
87245: ST_TO_ADDR
// if time < 0 then
87246: LD_VAR 0 8
87250: PUSH
87251: LD_INT 0
87253: LESS
87254: IFFALSE 87271
// time := time * - 1 ;
87256: LD_ADDR_VAR 0 8
87260: PUSH
87261: LD_VAR 0 8
87265: PUSH
87266: LD_INT 1
87268: NEG
87269: MUL
87270: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
87271: LD_VAR 0 8
87275: PUSH
87276: LD_INT 35
87278: PPUSH
87279: LD_INT 875
87281: PPUSH
87282: CALL_OW 12
87286: PLUS
87287: PPUSH
87288: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87292: LD_INT 1
87294: PPUSH
87295: LD_INT 5
87297: PPUSH
87298: CALL_OW 12
87302: PPUSH
87303: LD_VAR 0 1
87307: PPUSH
87308: LD_INT 1
87310: PPUSH
87311: CALL_OW 55
// end ;
87315: GO 87128
// end ;
87317: LD_VAR 0 5
87321: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87322: LD_INT 0
87324: PPUSH
87325: PPUSH
87326: PPUSH
87327: PPUSH
87328: PPUSH
87329: PPUSH
87330: PPUSH
87331: PPUSH
// if not turrets or not factories then
87332: LD_VAR 0 1
87336: NOT
87337: PUSH
87338: LD_VAR 0 2
87342: NOT
87343: OR
87344: IFFALSE 87348
// exit ;
87346: GO 87655
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87348: LD_ADDR_VAR 0 10
87352: PUSH
87353: LD_INT 5
87355: PUSH
87356: LD_INT 6
87358: PUSH
87359: EMPTY
87360: LIST
87361: LIST
87362: PUSH
87363: LD_INT 2
87365: PUSH
87366: LD_INT 4
87368: PUSH
87369: EMPTY
87370: LIST
87371: LIST
87372: PUSH
87373: LD_INT 3
87375: PUSH
87376: LD_INT 5
87378: PUSH
87379: EMPTY
87380: LIST
87381: LIST
87382: PUSH
87383: EMPTY
87384: LIST
87385: LIST
87386: LIST
87387: PUSH
87388: LD_INT 24
87390: PUSH
87391: LD_INT 25
87393: PUSH
87394: EMPTY
87395: LIST
87396: LIST
87397: PUSH
87398: LD_INT 23
87400: PUSH
87401: LD_INT 27
87403: PUSH
87404: EMPTY
87405: LIST
87406: LIST
87407: PUSH
87408: EMPTY
87409: LIST
87410: LIST
87411: PUSH
87412: LD_INT 42
87414: PUSH
87415: LD_INT 43
87417: PUSH
87418: EMPTY
87419: LIST
87420: LIST
87421: PUSH
87422: LD_INT 44
87424: PUSH
87425: LD_INT 46
87427: PUSH
87428: EMPTY
87429: LIST
87430: LIST
87431: PUSH
87432: LD_INT 45
87434: PUSH
87435: LD_INT 47
87437: PUSH
87438: EMPTY
87439: LIST
87440: LIST
87441: PUSH
87442: EMPTY
87443: LIST
87444: LIST
87445: LIST
87446: PUSH
87447: EMPTY
87448: LIST
87449: LIST
87450: LIST
87451: ST_TO_ADDR
// result := [ ] ;
87452: LD_ADDR_VAR 0 3
87456: PUSH
87457: EMPTY
87458: ST_TO_ADDR
// for i in turrets do
87459: LD_ADDR_VAR 0 4
87463: PUSH
87464: LD_VAR 0 1
87468: PUSH
87469: FOR_IN
87470: IFFALSE 87653
// begin nat := GetNation ( i ) ;
87472: LD_ADDR_VAR 0 7
87476: PUSH
87477: LD_VAR 0 4
87481: PPUSH
87482: CALL_OW 248
87486: ST_TO_ADDR
// weapon := 0 ;
87487: LD_ADDR_VAR 0 8
87491: PUSH
87492: LD_INT 0
87494: ST_TO_ADDR
// if not nat then
87495: LD_VAR 0 7
87499: NOT
87500: IFFALSE 87504
// continue ;
87502: GO 87469
// for j in list [ nat ] do
87504: LD_ADDR_VAR 0 5
87508: PUSH
87509: LD_VAR 0 10
87513: PUSH
87514: LD_VAR 0 7
87518: ARRAY
87519: PUSH
87520: FOR_IN
87521: IFFALSE 87562
// if GetBWeapon ( i ) = j [ 1 ] then
87523: LD_VAR 0 4
87527: PPUSH
87528: CALL_OW 269
87532: PUSH
87533: LD_VAR 0 5
87537: PUSH
87538: LD_INT 1
87540: ARRAY
87541: EQUAL
87542: IFFALSE 87560
// begin weapon := j [ 2 ] ;
87544: LD_ADDR_VAR 0 8
87548: PUSH
87549: LD_VAR 0 5
87553: PUSH
87554: LD_INT 2
87556: ARRAY
87557: ST_TO_ADDR
// break ;
87558: GO 87562
// end ;
87560: GO 87520
87562: POP
87563: POP
// if not weapon then
87564: LD_VAR 0 8
87568: NOT
87569: IFFALSE 87573
// continue ;
87571: GO 87469
// for k in factories do
87573: LD_ADDR_VAR 0 6
87577: PUSH
87578: LD_VAR 0 2
87582: PUSH
87583: FOR_IN
87584: IFFALSE 87649
// begin weapons := AvailableWeaponList ( k ) ;
87586: LD_ADDR_VAR 0 9
87590: PUSH
87591: LD_VAR 0 6
87595: PPUSH
87596: CALL_OW 478
87600: ST_TO_ADDR
// if not weapons then
87601: LD_VAR 0 9
87605: NOT
87606: IFFALSE 87610
// continue ;
87608: GO 87583
// if weapon in weapons then
87610: LD_VAR 0 8
87614: PUSH
87615: LD_VAR 0 9
87619: IN
87620: IFFALSE 87647
// begin result := [ i , weapon ] ;
87622: LD_ADDR_VAR 0 3
87626: PUSH
87627: LD_VAR 0 4
87631: PUSH
87632: LD_VAR 0 8
87636: PUSH
87637: EMPTY
87638: LIST
87639: LIST
87640: ST_TO_ADDR
// exit ;
87641: POP
87642: POP
87643: POP
87644: POP
87645: GO 87655
// end ; end ;
87647: GO 87583
87649: POP
87650: POP
// end ;
87651: GO 87469
87653: POP
87654: POP
// end ;
87655: LD_VAR 0 3
87659: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87660: LD_INT 0
87662: PPUSH
// if not side or side > 8 then
87663: LD_VAR 0 3
87667: NOT
87668: PUSH
87669: LD_VAR 0 3
87673: PUSH
87674: LD_INT 8
87676: GREATER
87677: OR
87678: IFFALSE 87682
// exit ;
87680: GO 87741
// if not range then
87682: LD_VAR 0 4
87686: NOT
87687: IFFALSE 87698
// range := - 12 ;
87689: LD_ADDR_VAR 0 4
87693: PUSH
87694: LD_INT 12
87696: NEG
87697: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87698: LD_VAR 0 1
87702: PPUSH
87703: LD_VAR 0 2
87707: PPUSH
87708: LD_VAR 0 3
87712: PPUSH
87713: LD_VAR 0 4
87717: PPUSH
87718: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87722: LD_VAR 0 1
87726: PPUSH
87727: LD_VAR 0 2
87731: PPUSH
87732: LD_VAR 0 3
87736: PPUSH
87737: CALL_OW 331
// end ;
87741: LD_VAR 0 5
87745: RET
// export function Video ( mode ) ; begin
87746: LD_INT 0
87748: PPUSH
// ingame_video = mode ;
87749: LD_ADDR_OWVAR 52
87753: PUSH
87754: LD_VAR 0 1
87758: ST_TO_ADDR
// interface_hidden = mode ;
87759: LD_ADDR_OWVAR 54
87763: PUSH
87764: LD_VAR 0 1
87768: ST_TO_ADDR
// end ;
87769: LD_VAR 0 2
87773: RET
// export function Join ( array , element ) ; begin
87774: LD_INT 0
87776: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87777: LD_ADDR_VAR 0 3
87781: PUSH
87782: LD_VAR 0 1
87786: PPUSH
87787: LD_VAR 0 1
87791: PUSH
87792: LD_INT 1
87794: PLUS
87795: PPUSH
87796: LD_VAR 0 2
87800: PPUSH
87801: CALL_OW 1
87805: ST_TO_ADDR
// end ;
87806: LD_VAR 0 3
87810: RET
// export function JoinUnion ( array , element ) ; begin
87811: LD_INT 0
87813: PPUSH
// result := array union element ;
87814: LD_ADDR_VAR 0 3
87818: PUSH
87819: LD_VAR 0 1
87823: PUSH
87824: LD_VAR 0 2
87828: UNION
87829: ST_TO_ADDR
// end ;
87830: LD_VAR 0 3
87834: RET
// export function GetBehemoths ( side ) ; begin
87835: LD_INT 0
87837: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87838: LD_ADDR_VAR 0 2
87842: PUSH
87843: LD_INT 22
87845: PUSH
87846: LD_VAR 0 1
87850: PUSH
87851: EMPTY
87852: LIST
87853: LIST
87854: PUSH
87855: LD_INT 31
87857: PUSH
87858: LD_INT 25
87860: PUSH
87861: EMPTY
87862: LIST
87863: LIST
87864: PUSH
87865: EMPTY
87866: LIST
87867: LIST
87868: PPUSH
87869: CALL_OW 69
87873: ST_TO_ADDR
// end ;
87874: LD_VAR 0 2
87878: RET
// export function Shuffle ( array ) ; var i , index ; begin
87879: LD_INT 0
87881: PPUSH
87882: PPUSH
87883: PPUSH
// result := [ ] ;
87884: LD_ADDR_VAR 0 2
87888: PUSH
87889: EMPTY
87890: ST_TO_ADDR
// if not array then
87891: LD_VAR 0 1
87895: NOT
87896: IFFALSE 87900
// exit ;
87898: GO 87999
// Randomize ;
87900: CALL_OW 10
// for i = array downto 1 do
87904: LD_ADDR_VAR 0 3
87908: PUSH
87909: DOUBLE
87910: LD_VAR 0 1
87914: INC
87915: ST_TO_ADDR
87916: LD_INT 1
87918: PUSH
87919: FOR_DOWNTO
87920: IFFALSE 87997
// begin index := rand ( 1 , array ) ;
87922: LD_ADDR_VAR 0 4
87926: PUSH
87927: LD_INT 1
87929: PPUSH
87930: LD_VAR 0 1
87934: PPUSH
87935: CALL_OW 12
87939: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87940: LD_ADDR_VAR 0 2
87944: PUSH
87945: LD_VAR 0 2
87949: PPUSH
87950: LD_VAR 0 2
87954: PUSH
87955: LD_INT 1
87957: PLUS
87958: PPUSH
87959: LD_VAR 0 1
87963: PUSH
87964: LD_VAR 0 4
87968: ARRAY
87969: PPUSH
87970: CALL_OW 2
87974: ST_TO_ADDR
// array := Delete ( array , index ) ;
87975: LD_ADDR_VAR 0 1
87979: PUSH
87980: LD_VAR 0 1
87984: PPUSH
87985: LD_VAR 0 4
87989: PPUSH
87990: CALL_OW 3
87994: ST_TO_ADDR
// end ;
87995: GO 87919
87997: POP
87998: POP
// end ;
87999: LD_VAR 0 2
88003: RET
// export function GetBaseMaterials ( base ) ; begin
88004: LD_INT 0
88006: PPUSH
// result := [ 0 , 0 , 0 ] ;
88007: LD_ADDR_VAR 0 2
88011: PUSH
88012: LD_INT 0
88014: PUSH
88015: LD_INT 0
88017: PUSH
88018: LD_INT 0
88020: PUSH
88021: EMPTY
88022: LIST
88023: LIST
88024: LIST
88025: ST_TO_ADDR
// if not base then
88026: LD_VAR 0 1
88030: NOT
88031: IFFALSE 88035
// exit ;
88033: GO 88084
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
88035: LD_ADDR_VAR 0 2
88039: PUSH
88040: LD_VAR 0 1
88044: PPUSH
88045: LD_INT 1
88047: PPUSH
88048: CALL_OW 275
88052: PUSH
88053: LD_VAR 0 1
88057: PPUSH
88058: LD_INT 2
88060: PPUSH
88061: CALL_OW 275
88065: PUSH
88066: LD_VAR 0 1
88070: PPUSH
88071: LD_INT 3
88073: PPUSH
88074: CALL_OW 275
88078: PUSH
88079: EMPTY
88080: LIST
88081: LIST
88082: LIST
88083: ST_TO_ADDR
// end ;
88084: LD_VAR 0 2
88088: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
88089: LD_INT 0
88091: PPUSH
88092: PPUSH
// result := array ;
88093: LD_ADDR_VAR 0 3
88097: PUSH
88098: LD_VAR 0 1
88102: ST_TO_ADDR
// if size >= result then
88103: LD_VAR 0 2
88107: PUSH
88108: LD_VAR 0 3
88112: GREATEREQUAL
88113: IFFALSE 88117
// exit ;
88115: GO 88167
// if size then
88117: LD_VAR 0 2
88121: IFFALSE 88167
// for i := array downto size do
88123: LD_ADDR_VAR 0 4
88127: PUSH
88128: DOUBLE
88129: LD_VAR 0 1
88133: INC
88134: ST_TO_ADDR
88135: LD_VAR 0 2
88139: PUSH
88140: FOR_DOWNTO
88141: IFFALSE 88165
// result := Delete ( result , result ) ;
88143: LD_ADDR_VAR 0 3
88147: PUSH
88148: LD_VAR 0 3
88152: PPUSH
88153: LD_VAR 0 3
88157: PPUSH
88158: CALL_OW 3
88162: ST_TO_ADDR
88163: GO 88140
88165: POP
88166: POP
// end ;
88167: LD_VAR 0 3
88171: RET
// export function ComExit ( unit ) ; var tmp ; begin
88172: LD_INT 0
88174: PPUSH
88175: PPUSH
// if not IsInUnit ( unit ) then
88176: LD_VAR 0 1
88180: PPUSH
88181: CALL_OW 310
88185: NOT
88186: IFFALSE 88190
// exit ;
88188: GO 88250
// tmp := IsInUnit ( unit ) ;
88190: LD_ADDR_VAR 0 3
88194: PUSH
88195: LD_VAR 0 1
88199: PPUSH
88200: CALL_OW 310
88204: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
88205: LD_VAR 0 3
88209: PPUSH
88210: CALL_OW 247
88214: PUSH
88215: LD_INT 2
88217: EQUAL
88218: IFFALSE 88231
// ComExitVehicle ( unit ) else
88220: LD_VAR 0 1
88224: PPUSH
88225: CALL_OW 121
88229: GO 88240
// ComExitBuilding ( unit ) ;
88231: LD_VAR 0 1
88235: PPUSH
88236: CALL_OW 122
// result := tmp ;
88240: LD_ADDR_VAR 0 2
88244: PUSH
88245: LD_VAR 0 3
88249: ST_TO_ADDR
// end ;
88250: LD_VAR 0 2
88254: RET
// export function ComExitAll ( units ) ; var i ; begin
88255: LD_INT 0
88257: PPUSH
88258: PPUSH
// if not units then
88259: LD_VAR 0 1
88263: NOT
88264: IFFALSE 88268
// exit ;
88266: GO 88294
// for i in units do
88268: LD_ADDR_VAR 0 3
88272: PUSH
88273: LD_VAR 0 1
88277: PUSH
88278: FOR_IN
88279: IFFALSE 88292
// ComExit ( i ) ;
88281: LD_VAR 0 3
88285: PPUSH
88286: CALL 88172 0 1
88290: GO 88278
88292: POP
88293: POP
// end ;
88294: LD_VAR 0 2
88298: RET
// export function ResetHc ; begin
88299: LD_INT 0
88301: PPUSH
// InitHc ;
88302: CALL_OW 19
// hc_importance := 0 ;
88306: LD_ADDR_OWVAR 32
88310: PUSH
88311: LD_INT 0
88313: ST_TO_ADDR
// end ;
88314: LD_VAR 0 1
88318: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
88319: LD_INT 0
88321: PPUSH
88322: PPUSH
88323: PPUSH
// _x := ( x1 + x2 ) div 2 ;
88324: LD_ADDR_VAR 0 6
88328: PUSH
88329: LD_VAR 0 1
88333: PUSH
88334: LD_VAR 0 3
88338: PLUS
88339: PUSH
88340: LD_INT 2
88342: DIV
88343: ST_TO_ADDR
// if _x < 0 then
88344: LD_VAR 0 6
88348: PUSH
88349: LD_INT 0
88351: LESS
88352: IFFALSE 88369
// _x := _x * - 1 ;
88354: LD_ADDR_VAR 0 6
88358: PUSH
88359: LD_VAR 0 6
88363: PUSH
88364: LD_INT 1
88366: NEG
88367: MUL
88368: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
88369: LD_ADDR_VAR 0 7
88373: PUSH
88374: LD_VAR 0 2
88378: PUSH
88379: LD_VAR 0 4
88383: PLUS
88384: PUSH
88385: LD_INT 2
88387: DIV
88388: ST_TO_ADDR
// if _y < 0 then
88389: LD_VAR 0 7
88393: PUSH
88394: LD_INT 0
88396: LESS
88397: IFFALSE 88414
// _y := _y * - 1 ;
88399: LD_ADDR_VAR 0 7
88403: PUSH
88404: LD_VAR 0 7
88408: PUSH
88409: LD_INT 1
88411: NEG
88412: MUL
88413: ST_TO_ADDR
// result := [ _x , _y ] ;
88414: LD_ADDR_VAR 0 5
88418: PUSH
88419: LD_VAR 0 6
88423: PUSH
88424: LD_VAR 0 7
88428: PUSH
88429: EMPTY
88430: LIST
88431: LIST
88432: ST_TO_ADDR
// end ;
88433: LD_VAR 0 5
88437: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88438: LD_INT 0
88440: PPUSH
88441: PPUSH
88442: PPUSH
88443: PPUSH
// task := GetTaskList ( unit ) ;
88444: LD_ADDR_VAR 0 7
88448: PUSH
88449: LD_VAR 0 1
88453: PPUSH
88454: CALL_OW 437
88458: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88459: LD_VAR 0 7
88463: NOT
88464: PUSH
88465: LD_VAR 0 1
88469: PPUSH
88470: LD_VAR 0 2
88474: PPUSH
88475: CALL_OW 308
88479: NOT
88480: AND
88481: IFFALSE 88485
// exit ;
88483: GO 88603
// if IsInArea ( unit , area ) then
88485: LD_VAR 0 1
88489: PPUSH
88490: LD_VAR 0 2
88494: PPUSH
88495: CALL_OW 308
88499: IFFALSE 88517
// begin ComMoveToArea ( unit , goAway ) ;
88501: LD_VAR 0 1
88505: PPUSH
88506: LD_VAR 0 3
88510: PPUSH
88511: CALL_OW 113
// exit ;
88515: GO 88603
// end ; if task [ 1 ] [ 1 ] <> M then
88517: LD_VAR 0 7
88521: PUSH
88522: LD_INT 1
88524: ARRAY
88525: PUSH
88526: LD_INT 1
88528: ARRAY
88529: PUSH
88530: LD_STRING M
88532: NONEQUAL
88533: IFFALSE 88537
// exit ;
88535: GO 88603
// x := task [ 1 ] [ 2 ] ;
88537: LD_ADDR_VAR 0 5
88541: PUSH
88542: LD_VAR 0 7
88546: PUSH
88547: LD_INT 1
88549: ARRAY
88550: PUSH
88551: LD_INT 2
88553: ARRAY
88554: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88555: LD_ADDR_VAR 0 6
88559: PUSH
88560: LD_VAR 0 7
88564: PUSH
88565: LD_INT 1
88567: ARRAY
88568: PUSH
88569: LD_INT 3
88571: ARRAY
88572: ST_TO_ADDR
// if InArea ( x , y , area ) then
88573: LD_VAR 0 5
88577: PPUSH
88578: LD_VAR 0 6
88582: PPUSH
88583: LD_VAR 0 2
88587: PPUSH
88588: CALL_OW 309
88592: IFFALSE 88603
// ComStop ( unit ) ;
88594: LD_VAR 0 1
88598: PPUSH
88599: CALL_OW 141
// end ;
88603: LD_VAR 0 4
88607: RET
// export function Abs ( value ) ; begin
88608: LD_INT 0
88610: PPUSH
// result := value ;
88611: LD_ADDR_VAR 0 2
88615: PUSH
88616: LD_VAR 0 1
88620: ST_TO_ADDR
// if value < 0 then
88621: LD_VAR 0 1
88625: PUSH
88626: LD_INT 0
88628: LESS
88629: IFFALSE 88646
// result := value * - 1 ;
88631: LD_ADDR_VAR 0 2
88635: PUSH
88636: LD_VAR 0 1
88640: PUSH
88641: LD_INT 1
88643: NEG
88644: MUL
88645: ST_TO_ADDR
// end ;
88646: LD_VAR 0 2
88650: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88651: LD_INT 0
88653: PPUSH
88654: PPUSH
88655: PPUSH
88656: PPUSH
88657: PPUSH
88658: PPUSH
88659: PPUSH
88660: PPUSH
// if not unit or not building then
88661: LD_VAR 0 1
88665: NOT
88666: PUSH
88667: LD_VAR 0 2
88671: NOT
88672: OR
88673: IFFALSE 88677
// exit ;
88675: GO 88903
// x := GetX ( building ) ;
88677: LD_ADDR_VAR 0 4
88681: PUSH
88682: LD_VAR 0 2
88686: PPUSH
88687: CALL_OW 250
88691: ST_TO_ADDR
// y := GetY ( building ) ;
88692: LD_ADDR_VAR 0 6
88696: PUSH
88697: LD_VAR 0 2
88701: PPUSH
88702: CALL_OW 251
88706: ST_TO_ADDR
// d := GetDir ( building ) ;
88707: LD_ADDR_VAR 0 8
88711: PUSH
88712: LD_VAR 0 2
88716: PPUSH
88717: CALL_OW 254
88721: ST_TO_ADDR
// r := 4 ;
88722: LD_ADDR_VAR 0 9
88726: PUSH
88727: LD_INT 4
88729: ST_TO_ADDR
// for i := 1 to 5 do
88730: LD_ADDR_VAR 0 10
88734: PUSH
88735: DOUBLE
88736: LD_INT 1
88738: DEC
88739: ST_TO_ADDR
88740: LD_INT 5
88742: PUSH
88743: FOR_TO
88744: IFFALSE 88901
// begin _x := ShiftX ( x , d , r + i ) ;
88746: LD_ADDR_VAR 0 5
88750: PUSH
88751: LD_VAR 0 4
88755: PPUSH
88756: LD_VAR 0 8
88760: PPUSH
88761: LD_VAR 0 9
88765: PUSH
88766: LD_VAR 0 10
88770: PLUS
88771: PPUSH
88772: CALL_OW 272
88776: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88777: LD_ADDR_VAR 0 7
88781: PUSH
88782: LD_VAR 0 6
88786: PPUSH
88787: LD_VAR 0 8
88791: PPUSH
88792: LD_VAR 0 9
88796: PUSH
88797: LD_VAR 0 10
88801: PLUS
88802: PPUSH
88803: CALL_OW 273
88807: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88808: LD_VAR 0 5
88812: PPUSH
88813: LD_VAR 0 7
88817: PPUSH
88818: CALL_OW 488
88822: PUSH
88823: LD_VAR 0 5
88827: PPUSH
88828: LD_VAR 0 7
88832: PPUSH
88833: CALL_OW 428
88837: PPUSH
88838: CALL_OW 247
88842: PUSH
88843: LD_INT 3
88845: PUSH
88846: LD_INT 2
88848: PUSH
88849: EMPTY
88850: LIST
88851: LIST
88852: IN
88853: NOT
88854: AND
88855: IFFALSE 88899
// begin ComMoveXY ( unit , _x , _y ) ;
88857: LD_VAR 0 1
88861: PPUSH
88862: LD_VAR 0 5
88866: PPUSH
88867: LD_VAR 0 7
88871: PPUSH
88872: CALL_OW 111
// result := [ _x , _y ] ;
88876: LD_ADDR_VAR 0 3
88880: PUSH
88881: LD_VAR 0 5
88885: PUSH
88886: LD_VAR 0 7
88890: PUSH
88891: EMPTY
88892: LIST
88893: LIST
88894: ST_TO_ADDR
// exit ;
88895: POP
88896: POP
88897: GO 88903
// end ; end ;
88899: GO 88743
88901: POP
88902: POP
// end ;
88903: LD_VAR 0 3
88907: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88908: LD_INT 0
88910: PPUSH
88911: PPUSH
88912: PPUSH
// result := 0 ;
88913: LD_ADDR_VAR 0 3
88917: PUSH
88918: LD_INT 0
88920: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88921: LD_VAR 0 1
88925: PUSH
88926: LD_INT 0
88928: LESS
88929: PUSH
88930: LD_VAR 0 1
88934: PUSH
88935: LD_INT 8
88937: GREATER
88938: OR
88939: PUSH
88940: LD_VAR 0 2
88944: PUSH
88945: LD_INT 0
88947: LESS
88948: OR
88949: PUSH
88950: LD_VAR 0 2
88954: PUSH
88955: LD_INT 8
88957: GREATER
88958: OR
88959: IFFALSE 88963
// exit ;
88961: GO 89038
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88963: LD_ADDR_VAR 0 4
88967: PUSH
88968: LD_INT 22
88970: PUSH
88971: LD_VAR 0 2
88975: PUSH
88976: EMPTY
88977: LIST
88978: LIST
88979: PPUSH
88980: CALL_OW 69
88984: PUSH
88985: FOR_IN
88986: IFFALSE 89036
// begin un := UnitShoot ( i ) ;
88988: LD_ADDR_VAR 0 5
88992: PUSH
88993: LD_VAR 0 4
88997: PPUSH
88998: CALL_OW 504
89002: ST_TO_ADDR
// if GetSide ( un ) = side1 then
89003: LD_VAR 0 5
89007: PPUSH
89008: CALL_OW 255
89012: PUSH
89013: LD_VAR 0 1
89017: EQUAL
89018: IFFALSE 89034
// begin result := un ;
89020: LD_ADDR_VAR 0 3
89024: PUSH
89025: LD_VAR 0 5
89029: ST_TO_ADDR
// exit ;
89030: POP
89031: POP
89032: GO 89038
// end ; end ;
89034: GO 88985
89036: POP
89037: POP
// end ;
89038: LD_VAR 0 3
89042: RET
// export function GetCargoBay ( units ) ; begin
89043: LD_INT 0
89045: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
89046: LD_ADDR_VAR 0 2
89050: PUSH
89051: LD_VAR 0 1
89055: PPUSH
89056: LD_INT 2
89058: PUSH
89059: LD_INT 34
89061: PUSH
89062: LD_INT 12
89064: PUSH
89065: EMPTY
89066: LIST
89067: LIST
89068: PUSH
89069: LD_INT 34
89071: PUSH
89072: LD_INT 51
89074: PUSH
89075: EMPTY
89076: LIST
89077: LIST
89078: PUSH
89079: LD_INT 34
89081: PUSH
89082: LD_INT 32
89084: PUSH
89085: EMPTY
89086: LIST
89087: LIST
89088: PUSH
89089: LD_INT 34
89091: PUSH
89092: LD_INT 89
89094: PUSH
89095: EMPTY
89096: LIST
89097: LIST
89098: PUSH
89099: EMPTY
89100: LIST
89101: LIST
89102: LIST
89103: LIST
89104: LIST
89105: PPUSH
89106: CALL_OW 72
89110: ST_TO_ADDR
// end ;
89111: LD_VAR 0 2
89115: RET
// export function Negate ( value ) ; begin
89116: LD_INT 0
89118: PPUSH
// result := not value ;
89119: LD_ADDR_VAR 0 2
89123: PUSH
89124: LD_VAR 0 1
89128: NOT
89129: ST_TO_ADDR
// end ;
89130: LD_VAR 0 2
89134: RET
// export function Inc ( value ) ; begin
89135: LD_INT 0
89137: PPUSH
// result := value + 1 ;
89138: LD_ADDR_VAR 0 2
89142: PUSH
89143: LD_VAR 0 1
89147: PUSH
89148: LD_INT 1
89150: PLUS
89151: ST_TO_ADDR
// end ;
89152: LD_VAR 0 2
89156: RET
// export function Dec ( value ) ; begin
89157: LD_INT 0
89159: PPUSH
// result := value - 1 ;
89160: LD_ADDR_VAR 0 2
89164: PUSH
89165: LD_VAR 0 1
89169: PUSH
89170: LD_INT 1
89172: MINUS
89173: ST_TO_ADDR
// end ;
89174: LD_VAR 0 2
89178: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
89179: LD_INT 0
89181: PPUSH
89182: PPUSH
89183: PPUSH
89184: PPUSH
89185: PPUSH
89186: PPUSH
89187: PPUSH
89188: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
89189: LD_VAR 0 1
89193: PPUSH
89194: LD_VAR 0 2
89198: PPUSH
89199: CALL_OW 488
89203: NOT
89204: PUSH
89205: LD_VAR 0 3
89209: PPUSH
89210: LD_VAR 0 4
89214: PPUSH
89215: CALL_OW 488
89219: NOT
89220: OR
89221: IFFALSE 89234
// begin result := - 1 ;
89223: LD_ADDR_VAR 0 5
89227: PUSH
89228: LD_INT 1
89230: NEG
89231: ST_TO_ADDR
// exit ;
89232: GO 89469
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
89234: LD_ADDR_VAR 0 12
89238: PUSH
89239: LD_VAR 0 1
89243: PPUSH
89244: LD_VAR 0 2
89248: PPUSH
89249: LD_VAR 0 3
89253: PPUSH
89254: LD_VAR 0 4
89258: PPUSH
89259: CALL 88319 0 4
89263: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
89264: LD_ADDR_VAR 0 11
89268: PUSH
89269: LD_VAR 0 1
89273: PPUSH
89274: LD_VAR 0 2
89278: PPUSH
89279: LD_VAR 0 12
89283: PUSH
89284: LD_INT 1
89286: ARRAY
89287: PPUSH
89288: LD_VAR 0 12
89292: PUSH
89293: LD_INT 2
89295: ARRAY
89296: PPUSH
89297: CALL_OW 298
89301: ST_TO_ADDR
// distance := 9999 ;
89302: LD_ADDR_VAR 0 10
89306: PUSH
89307: LD_INT 9999
89309: ST_TO_ADDR
// for i := 0 to 5 do
89310: LD_ADDR_VAR 0 6
89314: PUSH
89315: DOUBLE
89316: LD_INT 0
89318: DEC
89319: ST_TO_ADDR
89320: LD_INT 5
89322: PUSH
89323: FOR_TO
89324: IFFALSE 89467
// begin _x := ShiftX ( x1 , i , centerDist ) ;
89326: LD_ADDR_VAR 0 7
89330: PUSH
89331: LD_VAR 0 1
89335: PPUSH
89336: LD_VAR 0 6
89340: PPUSH
89341: LD_VAR 0 11
89345: PPUSH
89346: CALL_OW 272
89350: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
89351: LD_ADDR_VAR 0 8
89355: PUSH
89356: LD_VAR 0 2
89360: PPUSH
89361: LD_VAR 0 6
89365: PPUSH
89366: LD_VAR 0 11
89370: PPUSH
89371: CALL_OW 273
89375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89376: LD_VAR 0 7
89380: PPUSH
89381: LD_VAR 0 8
89385: PPUSH
89386: CALL_OW 488
89390: NOT
89391: IFFALSE 89395
// continue ;
89393: GO 89323
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89395: LD_ADDR_VAR 0 9
89399: PUSH
89400: LD_VAR 0 12
89404: PUSH
89405: LD_INT 1
89407: ARRAY
89408: PPUSH
89409: LD_VAR 0 12
89413: PUSH
89414: LD_INT 2
89416: ARRAY
89417: PPUSH
89418: LD_VAR 0 7
89422: PPUSH
89423: LD_VAR 0 8
89427: PPUSH
89428: CALL_OW 298
89432: ST_TO_ADDR
// if tmp < distance then
89433: LD_VAR 0 9
89437: PUSH
89438: LD_VAR 0 10
89442: LESS
89443: IFFALSE 89465
// begin result := i ;
89445: LD_ADDR_VAR 0 5
89449: PUSH
89450: LD_VAR 0 6
89454: ST_TO_ADDR
// distance := tmp ;
89455: LD_ADDR_VAR 0 10
89459: PUSH
89460: LD_VAR 0 9
89464: ST_TO_ADDR
// end ; end ;
89465: GO 89323
89467: POP
89468: POP
// end ;
89469: LD_VAR 0 5
89473: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89474: LD_INT 0
89476: PPUSH
89477: PPUSH
// if not driver or not IsInUnit ( driver ) then
89478: LD_VAR 0 1
89482: NOT
89483: PUSH
89484: LD_VAR 0 1
89488: PPUSH
89489: CALL_OW 310
89493: NOT
89494: OR
89495: IFFALSE 89499
// exit ;
89497: GO 89589
// vehicle := IsInUnit ( driver ) ;
89499: LD_ADDR_VAR 0 3
89503: PUSH
89504: LD_VAR 0 1
89508: PPUSH
89509: CALL_OW 310
89513: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89514: LD_VAR 0 1
89518: PPUSH
89519: LD_STRING \
89521: PUSH
89522: LD_INT 0
89524: PUSH
89525: LD_INT 0
89527: PUSH
89528: LD_INT 0
89530: PUSH
89531: LD_INT 0
89533: PUSH
89534: LD_INT 0
89536: PUSH
89537: LD_INT 0
89539: PUSH
89540: EMPTY
89541: LIST
89542: LIST
89543: LIST
89544: LIST
89545: LIST
89546: LIST
89547: LIST
89548: PUSH
89549: LD_STRING E
89551: PUSH
89552: LD_INT 0
89554: PUSH
89555: LD_INT 0
89557: PUSH
89558: LD_VAR 0 3
89562: PUSH
89563: LD_INT 0
89565: PUSH
89566: LD_INT 0
89568: PUSH
89569: LD_INT 0
89571: PUSH
89572: EMPTY
89573: LIST
89574: LIST
89575: LIST
89576: LIST
89577: LIST
89578: LIST
89579: LIST
89580: PUSH
89581: EMPTY
89582: LIST
89583: LIST
89584: PPUSH
89585: CALL_OW 446
// end ;
89589: LD_VAR 0 2
89593: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89594: LD_INT 0
89596: PPUSH
89597: PPUSH
// if not driver or not IsInUnit ( driver ) then
89598: LD_VAR 0 1
89602: NOT
89603: PUSH
89604: LD_VAR 0 1
89608: PPUSH
89609: CALL_OW 310
89613: NOT
89614: OR
89615: IFFALSE 89619
// exit ;
89617: GO 89709
// vehicle := IsInUnit ( driver ) ;
89619: LD_ADDR_VAR 0 3
89623: PUSH
89624: LD_VAR 0 1
89628: PPUSH
89629: CALL_OW 310
89633: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89634: LD_VAR 0 1
89638: PPUSH
89639: LD_STRING \
89641: PUSH
89642: LD_INT 0
89644: PUSH
89645: LD_INT 0
89647: PUSH
89648: LD_INT 0
89650: PUSH
89651: LD_INT 0
89653: PUSH
89654: LD_INT 0
89656: PUSH
89657: LD_INT 0
89659: PUSH
89660: EMPTY
89661: LIST
89662: LIST
89663: LIST
89664: LIST
89665: LIST
89666: LIST
89667: LIST
89668: PUSH
89669: LD_STRING E
89671: PUSH
89672: LD_INT 0
89674: PUSH
89675: LD_INT 0
89677: PUSH
89678: LD_VAR 0 3
89682: PUSH
89683: LD_INT 0
89685: PUSH
89686: LD_INT 0
89688: PUSH
89689: LD_INT 0
89691: PUSH
89692: EMPTY
89693: LIST
89694: LIST
89695: LIST
89696: LIST
89697: LIST
89698: LIST
89699: LIST
89700: PUSH
89701: EMPTY
89702: LIST
89703: LIST
89704: PPUSH
89705: CALL_OW 447
// end ;
89709: LD_VAR 0 2
89713: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89714: LD_INT 0
89716: PPUSH
89717: PPUSH
89718: PPUSH
// tmp := [ ] ;
89719: LD_ADDR_VAR 0 5
89723: PUSH
89724: EMPTY
89725: ST_TO_ADDR
// for i in units do
89726: LD_ADDR_VAR 0 4
89730: PUSH
89731: LD_VAR 0 1
89735: PUSH
89736: FOR_IN
89737: IFFALSE 89775
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89739: LD_ADDR_VAR 0 5
89743: PUSH
89744: LD_VAR 0 5
89748: PPUSH
89749: LD_VAR 0 5
89753: PUSH
89754: LD_INT 1
89756: PLUS
89757: PPUSH
89758: LD_VAR 0 4
89762: PPUSH
89763: CALL_OW 256
89767: PPUSH
89768: CALL_OW 2
89772: ST_TO_ADDR
89773: GO 89736
89775: POP
89776: POP
// if not tmp then
89777: LD_VAR 0 5
89781: NOT
89782: IFFALSE 89786
// exit ;
89784: GO 89834
// if asc then
89786: LD_VAR 0 2
89790: IFFALSE 89814
// result := SortListByListAsc ( units , tmp ) else
89792: LD_ADDR_VAR 0 3
89796: PUSH
89797: LD_VAR 0 1
89801: PPUSH
89802: LD_VAR 0 5
89806: PPUSH
89807: CALL_OW 76
89811: ST_TO_ADDR
89812: GO 89834
// result := SortListByListDesc ( units , tmp ) ;
89814: LD_ADDR_VAR 0 3
89818: PUSH
89819: LD_VAR 0 1
89823: PPUSH
89824: LD_VAR 0 5
89828: PPUSH
89829: CALL_OW 77
89833: ST_TO_ADDR
// end ;
89834: LD_VAR 0 3
89838: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89839: LD_INT 0
89841: PPUSH
89842: PPUSH
// task := GetTaskList ( mech ) ;
89843: LD_ADDR_VAR 0 4
89847: PUSH
89848: LD_VAR 0 1
89852: PPUSH
89853: CALL_OW 437
89857: ST_TO_ADDR
// if not task then
89858: LD_VAR 0 4
89862: NOT
89863: IFFALSE 89867
// exit ;
89865: GO 89909
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89867: LD_ADDR_VAR 0 3
89871: PUSH
89872: LD_VAR 0 4
89876: PUSH
89877: LD_INT 1
89879: ARRAY
89880: PUSH
89881: LD_INT 1
89883: ARRAY
89884: PUSH
89885: LD_STRING r
89887: EQUAL
89888: PUSH
89889: LD_VAR 0 4
89893: PUSH
89894: LD_INT 1
89896: ARRAY
89897: PUSH
89898: LD_INT 4
89900: ARRAY
89901: PUSH
89902: LD_VAR 0 2
89906: EQUAL
89907: AND
89908: ST_TO_ADDR
// end ;
89909: LD_VAR 0 3
89913: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89914: LD_INT 0
89916: PPUSH
// SetDir ( unit , d ) ;
89917: LD_VAR 0 1
89921: PPUSH
89922: LD_VAR 0 4
89926: PPUSH
89927: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89931: LD_VAR 0 1
89935: PPUSH
89936: LD_VAR 0 2
89940: PPUSH
89941: LD_VAR 0 3
89945: PPUSH
89946: LD_VAR 0 5
89950: PPUSH
89951: CALL_OW 48
// end ;
89955: LD_VAR 0 6
89959: RET
// export function ToNaturalNumber ( number ) ; begin
89960: LD_INT 0
89962: PPUSH
// result := number div 1 ;
89963: LD_ADDR_VAR 0 2
89967: PUSH
89968: LD_VAR 0 1
89972: PUSH
89973: LD_INT 1
89975: DIV
89976: ST_TO_ADDR
// if number < 0 then
89977: LD_VAR 0 1
89981: PUSH
89982: LD_INT 0
89984: LESS
89985: IFFALSE 89995
// result := 0 ;
89987: LD_ADDR_VAR 0 2
89991: PUSH
89992: LD_INT 0
89994: ST_TO_ADDR
// end ;
89995: LD_VAR 0 2
89999: RET
// export function SortByClass ( units , class ) ; var un ; begin
90000: LD_INT 0
90002: PPUSH
90003: PPUSH
// if not units or not class then
90004: LD_VAR 0 1
90008: NOT
90009: PUSH
90010: LD_VAR 0 2
90014: NOT
90015: OR
90016: IFFALSE 90020
// exit ;
90018: GO 90115
// result := [ ] ;
90020: LD_ADDR_VAR 0 3
90024: PUSH
90025: EMPTY
90026: ST_TO_ADDR
// for un in units do
90027: LD_ADDR_VAR 0 4
90031: PUSH
90032: LD_VAR 0 1
90036: PUSH
90037: FOR_IN
90038: IFFALSE 90113
// if GetClass ( un ) = class then
90040: LD_VAR 0 4
90044: PPUSH
90045: CALL_OW 257
90049: PUSH
90050: LD_VAR 0 2
90054: EQUAL
90055: IFFALSE 90082
// result := Insert ( result , 1 , un ) else
90057: LD_ADDR_VAR 0 3
90061: PUSH
90062: LD_VAR 0 3
90066: PPUSH
90067: LD_INT 1
90069: PPUSH
90070: LD_VAR 0 4
90074: PPUSH
90075: CALL_OW 2
90079: ST_TO_ADDR
90080: GO 90111
// result := Replace ( result , result + 1 , un ) ;
90082: LD_ADDR_VAR 0 3
90086: PUSH
90087: LD_VAR 0 3
90091: PPUSH
90092: LD_VAR 0 3
90096: PUSH
90097: LD_INT 1
90099: PLUS
90100: PPUSH
90101: LD_VAR 0 4
90105: PPUSH
90106: CALL_OW 1
90110: ST_TO_ADDR
90111: GO 90037
90113: POP
90114: POP
// end ;
90115: LD_VAR 0 3
90119: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
90120: LD_INT 0
90122: PPUSH
90123: PPUSH
90124: PPUSH
90125: PPUSH
90126: PPUSH
90127: PPUSH
90128: PPUSH
// result := [ ] ;
90129: LD_ADDR_VAR 0 4
90133: PUSH
90134: EMPTY
90135: ST_TO_ADDR
// if x - r < 0 then
90136: LD_VAR 0 1
90140: PUSH
90141: LD_VAR 0 3
90145: MINUS
90146: PUSH
90147: LD_INT 0
90149: LESS
90150: IFFALSE 90162
// min_x := 0 else
90152: LD_ADDR_VAR 0 8
90156: PUSH
90157: LD_INT 0
90159: ST_TO_ADDR
90160: GO 90178
// min_x := x - r ;
90162: LD_ADDR_VAR 0 8
90166: PUSH
90167: LD_VAR 0 1
90171: PUSH
90172: LD_VAR 0 3
90176: MINUS
90177: ST_TO_ADDR
// if y - r < 0 then
90178: LD_VAR 0 2
90182: PUSH
90183: LD_VAR 0 3
90187: MINUS
90188: PUSH
90189: LD_INT 0
90191: LESS
90192: IFFALSE 90204
// min_y := 0 else
90194: LD_ADDR_VAR 0 7
90198: PUSH
90199: LD_INT 0
90201: ST_TO_ADDR
90202: GO 90220
// min_y := y - r ;
90204: LD_ADDR_VAR 0 7
90208: PUSH
90209: LD_VAR 0 2
90213: PUSH
90214: LD_VAR 0 3
90218: MINUS
90219: ST_TO_ADDR
// max_x := x + r ;
90220: LD_ADDR_VAR 0 9
90224: PUSH
90225: LD_VAR 0 1
90229: PUSH
90230: LD_VAR 0 3
90234: PLUS
90235: ST_TO_ADDR
// max_y := y + r ;
90236: LD_ADDR_VAR 0 10
90240: PUSH
90241: LD_VAR 0 2
90245: PUSH
90246: LD_VAR 0 3
90250: PLUS
90251: ST_TO_ADDR
// for _x = min_x to max_x do
90252: LD_ADDR_VAR 0 5
90256: PUSH
90257: DOUBLE
90258: LD_VAR 0 8
90262: DEC
90263: ST_TO_ADDR
90264: LD_VAR 0 9
90268: PUSH
90269: FOR_TO
90270: IFFALSE 90371
// for _y = min_y to max_y do
90272: LD_ADDR_VAR 0 6
90276: PUSH
90277: DOUBLE
90278: LD_VAR 0 7
90282: DEC
90283: ST_TO_ADDR
90284: LD_VAR 0 10
90288: PUSH
90289: FOR_TO
90290: IFFALSE 90367
// begin if not ValidHex ( _x , _y ) then
90292: LD_VAR 0 5
90296: PPUSH
90297: LD_VAR 0 6
90301: PPUSH
90302: CALL_OW 488
90306: NOT
90307: IFFALSE 90311
// continue ;
90309: GO 90289
// if GetResourceTypeXY ( _x , _y ) then
90311: LD_VAR 0 5
90315: PPUSH
90316: LD_VAR 0 6
90320: PPUSH
90321: CALL_OW 283
90325: IFFALSE 90365
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
90327: LD_ADDR_VAR 0 4
90331: PUSH
90332: LD_VAR 0 4
90336: PPUSH
90337: LD_VAR 0 4
90341: PUSH
90342: LD_INT 1
90344: PLUS
90345: PPUSH
90346: LD_VAR 0 5
90350: PUSH
90351: LD_VAR 0 6
90355: PUSH
90356: EMPTY
90357: LIST
90358: LIST
90359: PPUSH
90360: CALL_OW 1
90364: ST_TO_ADDR
// end ;
90365: GO 90289
90367: POP
90368: POP
90369: GO 90269
90371: POP
90372: POP
// end ;
90373: LD_VAR 0 4
90377: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
90378: LD_INT 0
90380: PPUSH
90381: PPUSH
90382: PPUSH
90383: PPUSH
90384: PPUSH
90385: PPUSH
90386: PPUSH
90387: PPUSH
// if not units then
90388: LD_VAR 0 1
90392: NOT
90393: IFFALSE 90397
// exit ;
90395: GO 90921
// result := UnitFilter ( units , [ f_ok ] ) ;
90397: LD_ADDR_VAR 0 3
90401: PUSH
90402: LD_VAR 0 1
90406: PPUSH
90407: LD_INT 50
90409: PUSH
90410: EMPTY
90411: LIST
90412: PPUSH
90413: CALL_OW 72
90417: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90418: LD_ADDR_VAR 0 8
90422: PUSH
90423: LD_VAR 0 1
90427: PUSH
90428: LD_INT 1
90430: ARRAY
90431: PPUSH
90432: CALL_OW 255
90436: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90437: LD_ADDR_VAR 0 10
90441: PUSH
90442: LD_INT 29
90444: PUSH
90445: LD_INT 91
90447: PUSH
90448: LD_INT 49
90450: PUSH
90451: EMPTY
90452: LIST
90453: LIST
90454: LIST
90455: ST_TO_ADDR
// if not result then
90456: LD_VAR 0 3
90460: NOT
90461: IFFALSE 90465
// exit ;
90463: GO 90921
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90465: LD_ADDR_VAR 0 5
90469: PUSH
90470: LD_INT 81
90472: PUSH
90473: LD_VAR 0 8
90477: PUSH
90478: EMPTY
90479: LIST
90480: LIST
90481: PPUSH
90482: CALL_OW 69
90486: ST_TO_ADDR
// for i in result do
90487: LD_ADDR_VAR 0 4
90491: PUSH
90492: LD_VAR 0 3
90496: PUSH
90497: FOR_IN
90498: IFFALSE 90919
// begin tag := GetTag ( i ) + 1 ;
90500: LD_ADDR_VAR 0 9
90504: PUSH
90505: LD_VAR 0 4
90509: PPUSH
90510: CALL_OW 110
90514: PUSH
90515: LD_INT 1
90517: PLUS
90518: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90519: LD_ADDR_VAR 0 7
90523: PUSH
90524: LD_VAR 0 4
90528: PPUSH
90529: CALL_OW 250
90533: PPUSH
90534: LD_VAR 0 4
90538: PPUSH
90539: CALL_OW 251
90543: PPUSH
90544: LD_INT 6
90546: PPUSH
90547: CALL 90120 0 3
90551: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90552: LD_VAR 0 4
90556: PPUSH
90557: CALL_OW 247
90561: PUSH
90562: LD_INT 2
90564: EQUAL
90565: PUSH
90566: LD_VAR 0 7
90570: AND
90571: PUSH
90572: LD_VAR 0 4
90576: PPUSH
90577: CALL_OW 264
90581: PUSH
90582: LD_VAR 0 10
90586: IN
90587: NOT
90588: AND
90589: IFFALSE 90628
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90591: LD_VAR 0 4
90595: PPUSH
90596: LD_VAR 0 7
90600: PUSH
90601: LD_INT 1
90603: ARRAY
90604: PUSH
90605: LD_INT 1
90607: ARRAY
90608: PPUSH
90609: LD_VAR 0 7
90613: PUSH
90614: LD_INT 1
90616: ARRAY
90617: PUSH
90618: LD_INT 2
90620: ARRAY
90621: PPUSH
90622: CALL_OW 116
90626: GO 90917
// if path > tag then
90628: LD_VAR 0 2
90632: PUSH
90633: LD_VAR 0 9
90637: GREATER
90638: IFFALSE 90846
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90640: LD_ADDR_VAR 0 6
90644: PUSH
90645: LD_VAR 0 5
90649: PPUSH
90650: LD_INT 91
90652: PUSH
90653: LD_VAR 0 4
90657: PUSH
90658: LD_INT 8
90660: PUSH
90661: EMPTY
90662: LIST
90663: LIST
90664: LIST
90665: PPUSH
90666: CALL_OW 72
90670: ST_TO_ADDR
// if nearEnemy then
90671: LD_VAR 0 6
90675: IFFALSE 90744
// begin if GetWeapon ( i ) = ru_time_lapser then
90677: LD_VAR 0 4
90681: PPUSH
90682: CALL_OW 264
90686: PUSH
90687: LD_INT 49
90689: EQUAL
90690: IFFALSE 90718
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90692: LD_VAR 0 4
90696: PPUSH
90697: LD_VAR 0 6
90701: PPUSH
90702: LD_VAR 0 4
90706: PPUSH
90707: CALL_OW 74
90711: PPUSH
90712: CALL_OW 112
90716: GO 90742
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90718: LD_VAR 0 4
90722: PPUSH
90723: LD_VAR 0 6
90727: PPUSH
90728: LD_VAR 0 4
90732: PPUSH
90733: CALL_OW 74
90737: PPUSH
90738: CALL_OW 115
// end else
90742: GO 90844
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90744: LD_VAR 0 4
90748: PPUSH
90749: LD_VAR 0 2
90753: PUSH
90754: LD_VAR 0 9
90758: ARRAY
90759: PUSH
90760: LD_INT 1
90762: ARRAY
90763: PPUSH
90764: LD_VAR 0 2
90768: PUSH
90769: LD_VAR 0 9
90773: ARRAY
90774: PUSH
90775: LD_INT 2
90777: ARRAY
90778: PPUSH
90779: CALL_OW 297
90783: PUSH
90784: LD_INT 6
90786: GREATER
90787: IFFALSE 90830
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90789: LD_VAR 0 4
90793: PPUSH
90794: LD_VAR 0 2
90798: PUSH
90799: LD_VAR 0 9
90803: ARRAY
90804: PUSH
90805: LD_INT 1
90807: ARRAY
90808: PPUSH
90809: LD_VAR 0 2
90813: PUSH
90814: LD_VAR 0 9
90818: ARRAY
90819: PUSH
90820: LD_INT 2
90822: ARRAY
90823: PPUSH
90824: CALL_OW 114
90828: GO 90844
// SetTag ( i , tag ) ;
90830: LD_VAR 0 4
90834: PPUSH
90835: LD_VAR 0 9
90839: PPUSH
90840: CALL_OW 109
// end else
90844: GO 90917
// if enemy then
90846: LD_VAR 0 5
90850: IFFALSE 90917
// begin if GetWeapon ( i ) = ru_time_lapser then
90852: LD_VAR 0 4
90856: PPUSH
90857: CALL_OW 264
90861: PUSH
90862: LD_INT 49
90864: EQUAL
90865: IFFALSE 90893
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90867: LD_VAR 0 4
90871: PPUSH
90872: LD_VAR 0 5
90876: PPUSH
90877: LD_VAR 0 4
90881: PPUSH
90882: CALL_OW 74
90886: PPUSH
90887: CALL_OW 112
90891: GO 90917
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90893: LD_VAR 0 4
90897: PPUSH
90898: LD_VAR 0 5
90902: PPUSH
90903: LD_VAR 0 4
90907: PPUSH
90908: CALL_OW 74
90912: PPUSH
90913: CALL_OW 115
// end ; end ;
90917: GO 90497
90919: POP
90920: POP
// end ;
90921: LD_VAR 0 3
90925: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90926: LD_INT 0
90928: PPUSH
90929: PPUSH
90930: PPUSH
// if not unit or IsInUnit ( unit ) then
90931: LD_VAR 0 1
90935: NOT
90936: PUSH
90937: LD_VAR 0 1
90941: PPUSH
90942: CALL_OW 310
90946: OR
90947: IFFALSE 90951
// exit ;
90949: GO 91042
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90951: LD_ADDR_VAR 0 4
90955: PUSH
90956: LD_VAR 0 1
90960: PPUSH
90961: CALL_OW 250
90965: PPUSH
90966: LD_VAR 0 2
90970: PPUSH
90971: LD_INT 1
90973: PPUSH
90974: CALL_OW 272
90978: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90979: LD_ADDR_VAR 0 5
90983: PUSH
90984: LD_VAR 0 1
90988: PPUSH
90989: CALL_OW 251
90993: PPUSH
90994: LD_VAR 0 2
90998: PPUSH
90999: LD_INT 1
91001: PPUSH
91002: CALL_OW 273
91006: ST_TO_ADDR
// if ValidHex ( x , y ) then
91007: LD_VAR 0 4
91011: PPUSH
91012: LD_VAR 0 5
91016: PPUSH
91017: CALL_OW 488
91021: IFFALSE 91042
// ComTurnXY ( unit , x , y ) ;
91023: LD_VAR 0 1
91027: PPUSH
91028: LD_VAR 0 4
91032: PPUSH
91033: LD_VAR 0 5
91037: PPUSH
91038: CALL_OW 118
// end ;
91042: LD_VAR 0 3
91046: RET
// export function SeeUnits ( side , units ) ; var i ; begin
91047: LD_INT 0
91049: PPUSH
91050: PPUSH
// result := false ;
91051: LD_ADDR_VAR 0 3
91055: PUSH
91056: LD_INT 0
91058: ST_TO_ADDR
// if not units then
91059: LD_VAR 0 2
91063: NOT
91064: IFFALSE 91068
// exit ;
91066: GO 91113
// for i in units do
91068: LD_ADDR_VAR 0 4
91072: PUSH
91073: LD_VAR 0 2
91077: PUSH
91078: FOR_IN
91079: IFFALSE 91111
// if See ( side , i ) then
91081: LD_VAR 0 1
91085: PPUSH
91086: LD_VAR 0 4
91090: PPUSH
91091: CALL_OW 292
91095: IFFALSE 91109
// begin result := true ;
91097: LD_ADDR_VAR 0 3
91101: PUSH
91102: LD_INT 1
91104: ST_TO_ADDR
// exit ;
91105: POP
91106: POP
91107: GO 91113
// end ;
91109: GO 91078
91111: POP
91112: POP
// end ;
91113: LD_VAR 0 3
91117: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
91118: LD_INT 0
91120: PPUSH
91121: PPUSH
91122: PPUSH
91123: PPUSH
// if not unit or not points then
91124: LD_VAR 0 1
91128: NOT
91129: PUSH
91130: LD_VAR 0 2
91134: NOT
91135: OR
91136: IFFALSE 91140
// exit ;
91138: GO 91230
// dist := 99999 ;
91140: LD_ADDR_VAR 0 5
91144: PUSH
91145: LD_INT 99999
91147: ST_TO_ADDR
// for i in points do
91148: LD_ADDR_VAR 0 4
91152: PUSH
91153: LD_VAR 0 2
91157: PUSH
91158: FOR_IN
91159: IFFALSE 91228
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
91161: LD_ADDR_VAR 0 6
91165: PUSH
91166: LD_VAR 0 1
91170: PPUSH
91171: LD_VAR 0 4
91175: PUSH
91176: LD_INT 1
91178: ARRAY
91179: PPUSH
91180: LD_VAR 0 4
91184: PUSH
91185: LD_INT 2
91187: ARRAY
91188: PPUSH
91189: CALL_OW 297
91193: ST_TO_ADDR
// if tmpDist < dist then
91194: LD_VAR 0 6
91198: PUSH
91199: LD_VAR 0 5
91203: LESS
91204: IFFALSE 91226
// begin result := i ;
91206: LD_ADDR_VAR 0 3
91210: PUSH
91211: LD_VAR 0 4
91215: ST_TO_ADDR
// dist := tmpDist ;
91216: LD_ADDR_VAR 0 5
91220: PUSH
91221: LD_VAR 0 6
91225: ST_TO_ADDR
// end ; end ;
91226: GO 91158
91228: POP
91229: POP
// end ;
91230: LD_VAR 0 3
91234: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
91235: LD_INT 0
91237: PPUSH
// uc_side := side ;
91238: LD_ADDR_OWVAR 20
91242: PUSH
91243: LD_VAR 0 1
91247: ST_TO_ADDR
// uc_nation := 3 ;
91248: LD_ADDR_OWVAR 21
91252: PUSH
91253: LD_INT 3
91255: ST_TO_ADDR
// vc_chassis := 25 ;
91256: LD_ADDR_OWVAR 37
91260: PUSH
91261: LD_INT 25
91263: ST_TO_ADDR
// vc_engine := engine_siberite ;
91264: LD_ADDR_OWVAR 39
91268: PUSH
91269: LD_INT 3
91271: ST_TO_ADDR
// vc_control := control_computer ;
91272: LD_ADDR_OWVAR 38
91276: PUSH
91277: LD_INT 3
91279: ST_TO_ADDR
// vc_weapon := 59 ;
91280: LD_ADDR_OWVAR 40
91284: PUSH
91285: LD_INT 59
91287: ST_TO_ADDR
// result := CreateVehicle ;
91288: LD_ADDR_VAR 0 5
91292: PUSH
91293: CALL_OW 45
91297: ST_TO_ADDR
// SetDir ( result , d ) ;
91298: LD_VAR 0 5
91302: PPUSH
91303: LD_VAR 0 4
91307: PPUSH
91308: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
91312: LD_VAR 0 5
91316: PPUSH
91317: LD_VAR 0 2
91321: PPUSH
91322: LD_VAR 0 3
91326: PPUSH
91327: LD_INT 0
91329: PPUSH
91330: CALL_OW 48
// end ;
91334: LD_VAR 0 5
91338: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
91339: LD_INT 0
91341: PPUSH
91342: PPUSH
91343: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
91344: LD_ADDR_VAR 0 2
91348: PUSH
91349: LD_INT 0
91351: PUSH
91352: LD_INT 0
91354: PUSH
91355: LD_INT 0
91357: PUSH
91358: LD_INT 0
91360: PUSH
91361: EMPTY
91362: LIST
91363: LIST
91364: LIST
91365: LIST
91366: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
91367: LD_VAR 0 1
91371: NOT
91372: PUSH
91373: LD_VAR 0 1
91377: PPUSH
91378: CALL_OW 264
91382: PUSH
91383: LD_INT 12
91385: PUSH
91386: LD_INT 51
91388: PUSH
91389: LD_INT 32
91391: PUSH
91392: LD_INT 89
91394: PUSH
91395: EMPTY
91396: LIST
91397: LIST
91398: LIST
91399: LIST
91400: IN
91401: NOT
91402: OR
91403: IFFALSE 91407
// exit ;
91405: GO 91505
// for i := 1 to 3 do
91407: LD_ADDR_VAR 0 3
91411: PUSH
91412: DOUBLE
91413: LD_INT 1
91415: DEC
91416: ST_TO_ADDR
91417: LD_INT 3
91419: PUSH
91420: FOR_TO
91421: IFFALSE 91503
// begin tmp := GetCargo ( cargo , i ) ;
91423: LD_ADDR_VAR 0 4
91427: PUSH
91428: LD_VAR 0 1
91432: PPUSH
91433: LD_VAR 0 3
91437: PPUSH
91438: CALL_OW 289
91442: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91443: LD_ADDR_VAR 0 2
91447: PUSH
91448: LD_VAR 0 2
91452: PPUSH
91453: LD_VAR 0 3
91457: PPUSH
91458: LD_VAR 0 4
91462: PPUSH
91463: CALL_OW 1
91467: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91468: LD_ADDR_VAR 0 2
91472: PUSH
91473: LD_VAR 0 2
91477: PPUSH
91478: LD_INT 4
91480: PPUSH
91481: LD_VAR 0 2
91485: PUSH
91486: LD_INT 4
91488: ARRAY
91489: PUSH
91490: LD_VAR 0 4
91494: PLUS
91495: PPUSH
91496: CALL_OW 1
91500: ST_TO_ADDR
// end ;
91501: GO 91420
91503: POP
91504: POP
// end ;
91505: LD_VAR 0 2
91509: RET
// export function Length ( array ) ; begin
91510: LD_INT 0
91512: PPUSH
// result := array + 0 ;
91513: LD_ADDR_VAR 0 2
91517: PUSH
91518: LD_VAR 0 1
91522: PUSH
91523: LD_INT 0
91525: PLUS
91526: ST_TO_ADDR
// end ;
91527: LD_VAR 0 2
91531: RET
// export function PrepareArray ( array ) ; begin
91532: LD_INT 0
91534: PPUSH
// result := array diff 0 ;
91535: LD_ADDR_VAR 0 2
91539: PUSH
91540: LD_VAR 0 1
91544: PUSH
91545: LD_INT 0
91547: DIFF
91548: ST_TO_ADDR
// if not result [ 1 ] then
91549: LD_VAR 0 2
91553: PUSH
91554: LD_INT 1
91556: ARRAY
91557: NOT
91558: IFFALSE 91578
// result := Delete ( result , 1 ) ;
91560: LD_ADDR_VAR 0 2
91564: PUSH
91565: LD_VAR 0 2
91569: PPUSH
91570: LD_INT 1
91572: PPUSH
91573: CALL_OW 3
91577: ST_TO_ADDR
// end ;
91578: LD_VAR 0 2
91582: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
91583: LD_INT 0
91585: PPUSH
91586: PPUSH
91587: PPUSH
91588: PPUSH
// sibRocketRange := 25 ;
91589: LD_ADDR_VAR 0 6
91593: PUSH
91594: LD_INT 25
91596: ST_TO_ADDR
// result := false ;
91597: LD_ADDR_VAR 0 4
91601: PUSH
91602: LD_INT 0
91604: ST_TO_ADDR
// for i := 0 to 5 do
91605: LD_ADDR_VAR 0 5
91609: PUSH
91610: DOUBLE
91611: LD_INT 0
91613: DEC
91614: ST_TO_ADDR
91615: LD_INT 5
91617: PUSH
91618: FOR_TO
91619: IFFALSE 91686
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
91621: LD_VAR 0 1
91625: PPUSH
91626: LD_VAR 0 5
91630: PPUSH
91631: LD_VAR 0 6
91635: PPUSH
91636: CALL_OW 272
91640: PPUSH
91641: LD_VAR 0 2
91645: PPUSH
91646: LD_VAR 0 5
91650: PPUSH
91651: LD_VAR 0 6
91655: PPUSH
91656: CALL_OW 273
91660: PPUSH
91661: LD_VAR 0 3
91665: PPUSH
91666: CALL_OW 309
91670: IFFALSE 91684
// begin result := true ;
91672: LD_ADDR_VAR 0 4
91676: PUSH
91677: LD_INT 1
91679: ST_TO_ADDR
// exit ;
91680: POP
91681: POP
91682: GO 91688
// end ;
91684: GO 91618
91686: POP
91687: POP
// end ;
91688: LD_VAR 0 4
91692: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
91693: LD_INT 0
91695: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
91696: LD_VAR 0 1
91700: PPUSH
91701: LD_VAR 0 2
91705: PPUSH
91706: LD_INT 0
91708: PPUSH
91709: LD_INT 0
91711: PPUSH
91712: LD_INT 1
91714: PPUSH
91715: LD_INT 0
91717: PPUSH
91718: CALL_OW 587
// end ; end_of_file
91722: LD_VAR 0 3
91726: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91727: LD_VAR 0 1
91731: PUSH
91732: LD_INT 200
91734: DOUBLE
91735: GREATEREQUAL
91736: IFFALSE 91744
91738: LD_INT 299
91740: DOUBLE
91741: LESSEQUAL
91742: IFTRUE 91746
91744: GO 91778
91746: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91747: LD_VAR 0 1
91751: PPUSH
91752: LD_VAR 0 2
91756: PPUSH
91757: LD_VAR 0 3
91761: PPUSH
91762: LD_VAR 0 4
91766: PPUSH
91767: LD_VAR 0 5
91771: PPUSH
91772: CALL 46393 0 5
91776: GO 91855
91778: LD_INT 300
91780: DOUBLE
91781: GREATEREQUAL
91782: IFFALSE 91790
91784: LD_INT 399
91786: DOUBLE
91787: LESSEQUAL
91788: IFTRUE 91792
91790: GO 91854
91792: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91793: LD_VAR 0 1
91797: PPUSH
91798: LD_VAR 0 2
91802: PPUSH
91803: LD_VAR 0 3
91807: PPUSH
91808: LD_VAR 0 4
91812: PPUSH
91813: LD_VAR 0 5
91817: PPUSH
91818: LD_VAR 0 6
91822: PPUSH
91823: LD_VAR 0 7
91827: PPUSH
91828: LD_VAR 0 8
91832: PPUSH
91833: LD_VAR 0 9
91837: PPUSH
91838: LD_VAR 0 10
91842: PPUSH
91843: LD_VAR 0 11
91847: PPUSH
91848: CALL 42726 0 11
91852: GO 91855
91854: POP
// end ;
91855: PPOPN 11
91857: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91858: LD_VAR 0 1
91862: PPUSH
91863: LD_VAR 0 2
91867: PPUSH
91868: LD_VAR 0 3
91872: PPUSH
91873: LD_VAR 0 4
91877: PPUSH
91878: LD_VAR 0 5
91882: PPUSH
91883: CALL 46129 0 5
// end ; end_of_file
91887: PPOPN 5
91889: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91890: LD_VAR 0 1
91894: PPUSH
91895: LD_VAR 0 2
91899: PPUSH
91900: LD_VAR 0 3
91904: PPUSH
91905: LD_VAR 0 4
91909: PPUSH
91910: LD_VAR 0 5
91914: PPUSH
91915: LD_VAR 0 6
91919: PPUSH
91920: CALL 30378 0 6
// end ;
91924: PPOPN 6
91926: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91927: LD_INT 0
91929: PPUSH
// begin if not units then
91930: LD_VAR 0 1
91934: NOT
91935: IFFALSE 91939
// exit ;
91937: GO 91939
// end ;
91939: PPOPN 7
91941: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91942: CALL 30282 0 0
// end ;
91946: PPOPN 1
91948: END
