// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8706 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 89057 0 9
// Action ;
  97: CALL 25465 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 54678 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 54678 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 54678 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 54678 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 54678 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 54678 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 54678 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 54678 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 54678 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 54678 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 56780 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 56780 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 56780 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 56780 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 92380 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 92417 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 92417 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 56780 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 59518 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 92380 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 59518 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 92380 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 56780 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 59518 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 92380 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 54678 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 54678 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 54678 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 54678 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 54678 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 54678 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 54678 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 54678 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 54678 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 54678 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 54678 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 54678 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 56780 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 56780 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 54678 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 92380 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 92380 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 92380 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 56780 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 56780 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 56780 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 56780 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 87656 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 56780 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 56780 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// AddComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 93741 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 92380 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 59518 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 5
7591: PPUSH
7592: CALL 92380 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 59518 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 5
7766: PPUSH
7767: CALL 92380 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 59518 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 5
7972: PPUSH
7973: CALL 92380 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8415: LD_EXP 58
8419: IFFALSE 8703
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
8428: PPUSH
// begin p := 0 ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_EXP 58
8453: PPUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: ST_TO_ADDR
// for i in tmp do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8513
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 143
8485: PUSH
8486: LD_INT 38
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 111
8495: PUSH
8496: LD_INT 31
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL 94984 0 2
8511: GO 8475
8513: POP
8514: POP
// if IsDead ( Dietrich ) then
8515: LD_EXP 50
8519: PPUSH
8520: CALL_OW 301
8524: IFFALSE 8541
// p := Inc ( p ) ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 93741 0 1
8540: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8541: LD_VAR 0 2
8545: NOT
8546: PUSH
8547: LD_EXP 13
8551: OR
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 40
8560: GREATER
8561: OR
8562: IFFALSE 8437
// if not arAttackersVeh then
8564: LD_EXP 58
8568: NOT
8569: IFFALSE 8573
// exit ;
8571: GO 8703
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 58
8589: PPUSH
8590: LD_INT 50
8592: PUSH
8593: EMPTY
8594: LIST
8595: PPUSH
8596: CALL_OW 72
8600: ST_TO_ADDR
// for i in tmp do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_VAR 0 2
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8694
// if IsInArea ( i , arAttackSpawnArea ) then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 18
8621: PPUSH
8622: CALL_OW 308
8626: IFFALSE 8680
// begin if IsInUnit ( i ) then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 310
8637: IFFALSE 8653
// RemoveUnit ( IsInUnit ( i ) ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 310
8648: PPUSH
8649: CALL_OW 64
// RemoveUnit ( i ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8662: LD_ADDR_EXP 58
8666: PUSH
8667: LD_EXP 58
8671: PUSH
8672: LD_VAR 0 1
8676: DIFF
8677: ST_TO_ADDR
// end else
8678: GO 8692
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 18
8687: PPUSH
8688: CALL_OW 113
8692: GO 8611
8694: POP
8695: POP
// until not tmp ;
8696: LD_VAR 0 2
8700: NOT
8701: IFFALSE 8573
// end ; end_of_file
8703: PPOPN 3
8705: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// uc_side := 3 ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_INT 3
8721: ST_TO_ADDR
// uc_nation := nation_russian ;
8722: LD_ADDR_OWVAR 21
8726: PUSH
8727: LD_INT 3
8729: ST_TO_ADDR
// ruForces := [ ] ;
8730: LD_ADDR_EXP 59
8734: PUSH
8735: EMPTY
8736: ST_TO_ADDR
// ruForces2 := [ ] ;
8737: LD_ADDR_EXP 60
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// ruMech := [ ] ;
8744: LD_ADDR_EXP 63
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// ruMech2 := [ ] ;
8751: LD_ADDR_EXP 64
8755: PUSH
8756: EMPTY
8757: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8758: LD_ADDR_EXP 65
8762: PUSH
8763: LD_INT 37
8765: PUSH
8766: LD_INT 63
8768: PUSH
8769: LD_INT 52
8771: PUSH
8772: LD_INT 54
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// ruBaseArea := 0 ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8789: LD_ADDR_EXP 67
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// ruBase := 0 ;
8797: LD_ADDR_EXP 68
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// ruBase2 := 0 ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// ruConstructList := [ ] ;
8813: LD_ADDR_EXP 70
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: LD_INT 43
8877: PUSH
8878: LD_INT 44
8880: PUSH
8881: LD_INT 45
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 43
8918: PUSH
8919: LD_INT 44
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// ruCratesArea := 0 ;
8953: LD_ADDR_EXP 72
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8961: LD_ADDR_EXP 73
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// ruHealPoint := [ ] ;
8969: LD_ADDR_EXP 74
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8976: LD_ADDR_EXP 75
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// ruBuildings := [ ] ;
8983: LD_ADDR_EXP 76
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8990: LD_ADDR_EXP 77
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// ruTanks := [ ] ;
8997: LD_ADDR_EXP 79
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// ruTanks2 := [ ] ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// ruParkingArea := 0 ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9019: LD_ADDR_EXP 83
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 4
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: ARRAY
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9122
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9064: LD_ADDR_EXP 70
9068: PUSH
9069: LD_EXP 70
9073: PPUSH
9074: LD_INT 22
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 43
9085: PUSH
9086: LD_INT 44
9088: PUSH
9089: LD_INT 45
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 3
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL 92380 0 2
9119: ST_TO_ADDR
9120: GO 9061
9122: POP
9123: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_INT 43
9131: PUSH
9132: LD_INT 68
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: LD_INT 79
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 99
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 114
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 152
9181: PUSH
9182: LD_INT 85
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
// for i in sources do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9237
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: LD_VAR 0 2
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 441
9235: GO 9207
9237: POP
9238: POP
// if Difficulty > 2 then
9239: LD_OWVAR 67
9243: PUSH
9244: LD_INT 2
9246: GREATER
9247: IFFALSE 9275
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9249: LD_INT 52
9251: PPUSH
9252: LD_INT 6
9254: PPUSH
9255: LD_INT 2
9257: PPUSH
9258: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9262: LD_INT 58
9264: PPUSH
9265: LD_INT 6
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: LD_OWVAR 67
9302: ARRAY
9303: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9304: LD_ADDR_EXP 61
9308: PUSH
9309: LD_STRING Tsaritsyn
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: LD_STRING 
9317: PPUSH
9318: CALL 54678 0 3
9322: ST_TO_ADDR
// for i := 1 to 4 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 4
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9555
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 5
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: LD_INT 8
9357: PUSH
9358: LD_INT 9
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_OWVAR 67
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_OWVAR 67
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9551
// begin PrepareHuman ( false , i , skill ) ;
9460: LD_INT 0
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: CALL_OW 380
// un := CreateHuman ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9487: LD_ADDR_EXP 59
9491: PUSH
9492: LD_EXP 59
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL 92380 0 2
9506: ST_TO_ADDR
// if i = 3 then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 3
9514: EQUAL
9515: IFFALSE 9549
// begin ruMech := Join ( ruMech , un ) ;
9517: LD_ADDR_EXP 63
9521: PUSH
9522: LD_EXP 63
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL 92380 0 2
9536: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 336
// end ; end ;
9549: GO 9457
9551: POP
9552: POP
9553: GO 9336
9555: POP
9556: POP
// if Difficulty < 4 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 4
9564: LESS
9565: IFFALSE 9569
// exit ;
9567: GO 9841
// PrepareSoldier ( sex_male , skill + 1 ) ;
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: PPUSH
9581: CALL_OW 381
// hc_importance := 100 ;
9585: LD_ADDR_OWVAR 32
9589: PUSH
9590: LD_INT 100
9592: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9593: LD_ADDR_EXP 62
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// InitHc_All ( ) ;
9603: CALL_OW 584
// for i := 1 to 4 do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 4
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9839
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: DOUBLE
9629: LD_INT 1
9631: DEC
9632: ST_TO_ADDR
9633: LD_INT 5
9635: PUSH
9636: LD_INT 6
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: LD_INT 9
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_OWVAR 67
9655: ARRAY
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: LD_OWVAR 67
9679: ARRAY
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 6
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_OWVAR 67
9703: ARRAY
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_VAR 0 2
9739: ARRAY
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9835
// begin PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9771: LD_ADDR_EXP 60
9775: PUSH
9776: LD_EXP 60
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL 92380 0 2
9790: ST_TO_ADDR
// if i = 3 then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_INT 3
9798: EQUAL
9799: IFFALSE 9833
// begin ruMech2 := Join ( ruMech2 , un ) ;
9801: LD_ADDR_EXP 64
9805: PUSH
9806: LD_EXP 64
9810: PPUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL 92380 0 2
9820: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9821: LD_VAR 0 4
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 336
// end ; end ;
9833: GO 9741
9835: POP
9836: POP
9837: GO 9620
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 1
9845: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9846: LD_EXP 66
9850: PPUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 50
9863: PUSH
9864: EMPTY
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 70
9875: PUSH
9876: LD_EXP 76
9880: PPUSH
9881: CALL 56780 0 1
9885: PUSH
9886: LD_INT 3
9888: LESS
9889: AND
9890: IFFALSE 10154
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
// begin enable ;
9898: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9899: LD_ADDR_EXP 70
9903: PUSH
9904: LD_EXP 70
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 44
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 2
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_OWVAR 67
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 45
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_OWVAR 67
10028: ARRAY
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 45
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
// for i := Difficulty downto 1 do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_OWVAR 67
10061: INC
10062: ST_TO_ADDR
10063: LD_INT 1
10065: PUSH
10066: FOR_DOWNTO
10067: IFFALSE 10152
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10069: LD_ADDR_EXP 70
10073: PUSH
10074: LD_EXP 70
10078: PPUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_OWVAR 67
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: LD_INT 44
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 45
10117: PUSH
10118: LD_INT 43
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: CALL_OW 12
10137: ARRAY
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL 92380 0 2
10149: ST_TO_ADDR
10150: GO 10066
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10157: LD_EXP 67
10161: PPUSH
10162: LD_INT 30
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 70
10186: PUSH
10187: LD_EXP 77
10191: PPUSH
10192: CALL 56780 0 1
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: AND
10201: IFFALSE 10396
10203: GO 10205
10205: DISABLE
// begin enable ;
10206: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10207: LD_ADDR_EXP 71
10211: PUSH
10212: LD_EXP 71
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 4
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: LD_INT 44
10255: PUSH
10256: LD_INT 45
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 45
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 43
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ADD
10395: ST_TO_ADDR
// end ;
10396: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
// case Difficulty of 1 :
10407: LD_OWVAR 67
10411: PUSH
10412: LD_INT 1
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10439
10420: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10421: LD_ADDR_VAR 0 4
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 2
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
10437: GO 10513
10439: LD_INT 2
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10466
10447: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10448: LD_ADDR_VAR 0 4
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 12
10463: ST_TO_ADDR
10464: GO 10513
10466: LD_INT 3
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10493
10474: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: CALL_OW 12
10490: ST_TO_ADDR
10491: GO 10513
10493: LD_INT 4
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10512
10501: POP
// spawn := 3 ; end ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_INT 3
10509: ST_TO_ADDR
10510: GO 10513
10512: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 4
10536: ARRAY
10537: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10538: LD_ADDR_VAR 0 5
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 22
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_INT 96
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 54
10580: PUSH
10581: LD_INT 85
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 146
10590: PUSH
10591: LD_INT 67
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_VAR 0 4
10607: ARRAY
10608: ST_TO_ADDR
// for i in ruForces union ruCommander do
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_EXP 59
10618: PUSH
10619: LD_EXP 61
10623: UNION
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10681
// begin PlaceUnitArea ( i , area , false ) ;
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 5
10637: PPUSH
10638: LD_INT 0
10640: PPUSH
10641: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10645: LD_VAR 0 2
10649: PPUSH
10650: LD_VAR 0 8
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 8
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10672: LD_INT 14
10674: PPUSH
10675: CALL_OW 67
// end ;
10679: GO 10625
10681: POP
10682: POP
// DRussianConvoy ;
10683: CALL 28644 0 0
// spawnedRussians := true ;
10687: LD_ADDR_EXP 19
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 6
10702: PPUSH
10703: CALL_OW 332
// case spawn of 1 :
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10730
10720: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10721: LD_INT 102
10723: PPUSH
10724: CALL_OW 427
10728: GO 10767
10730: LD_INT 2
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10748
10738: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10739: LD_INT 103
10741: PPUSH
10742: CALL_OW 427
10746: GO 10767
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10766
10756: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10757: LD_INT 104
10759: PPUSH
10760: CALL_OW 427
10764: GO 10767
10766: POP
// if Difficulty < 4 then
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 4
10774: LESS
10775: IFFALSE 10779
// exit ;
10777: GO 10856
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10779: LD_INT 1
10781: PPUSH
10782: LD_INT 22
10784: PPUSH
10785: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_EXP 60
10798: PUSH
10799: LD_EXP 62
10803: UNION
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10847
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 22
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 54
10830: PPUSH
10831: LD_INT 85
10833: PPUSH
10834: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10838: LD_INT 28
10840: PPUSH
10841: CALL_OW 67
// end ;
10845: GO 10805
10847: POP
10848: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10849: LD_INT 105
10851: PPUSH
10852: CALL_OW 427
// end ;
10856: LD_VAR 0 1
10860: RET
// export function RussianBase ( group , option ) ; begin
10861: LD_INT 0
10863: PPUSH
// case option of 1 :
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 1
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 11333
10877: POP
// begin ruBaseArea := ruBaseCenterArea ;
10878: LD_ADDR_EXP 66
10882: PUSH
10883: LD_INT 26
10885: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10886: LD_ADDR_EXP 72
10890: PUSH
10891: LD_INT 26
10893: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 98
10922: PUSH
10923: LD_INT 90
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 29
10937: PUSH
10938: LD_INT 103
10940: PUSH
10941: LD_INT 114
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 30
10955: PUSH
10956: LD_INT 99
10958: PUSH
10959: LD_INT 114
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_INT 112
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 92
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 26
11009: PUSH
11010: LD_INT 97
11012: PUSH
11013: LD_INT 116
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 96
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 18
11045: PUSH
11046: LD_INT 88
11048: PUSH
11049: LD_INT 97
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 92
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 6
11081: PUSH
11082: LD_INT 93
11084: PUSH
11085: LD_INT 110
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 89
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 95
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 24
11135: PUSH
11136: LD_INT 92
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 88
11156: PUSH
11157: LD_INT 89
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 33
11171: PUSH
11172: LD_INT 86
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 85
11192: PUSH
11193: LD_INT 99
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 85
11210: PUSH
11211: LD_INT 107
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 99
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 92
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 33
11261: PUSH
11262: LD_INT 105
11264: PUSH
11265: LD_INT 92
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11300: LD_ADDR_EXP 74
11304: PUSH
11305: LD_INT 98
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11315: LD_ADDR_EXP 82
11319: PUSH
11320: LD_INT 30
11322: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11323: LD_ADDR_EXP 84
11327: PUSH
11328: LD_INT 36
11330: ST_TO_ADDR
// end ; 2 :
11331: GO 12357
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11835
11341: POP
// begin ruBaseArea := ruBaseWestArea ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 28
11349: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11350: LD_ADDR_EXP 72
11354: PUSH
11355: LD_INT 28
11357: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11358: LD_ADDR_EXP 76
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 49
11368: PUSH
11369: LD_INT 74
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 73
11386: PUSH
11387: LD_INT 88
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: LD_INT 56
11404: PUSH
11405: LD_INT 62
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 29
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 68
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 43
11440: PUSH
11441: LD_INT 79
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 60
11458: PUSH
11459: LD_INT 75
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: LD_INT 87
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 45
11494: PUSH
11495: LD_INT 67
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 17
11509: PUSH
11510: LD_INT 47
11512: PUSH
11513: LD_INT 84
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 18
11527: PUSH
11528: LD_INT 46
11530: PUSH
11531: LD_INT 87
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 26
11545: PUSH
11546: LD_INT 41
11548: PUSH
11549: LD_INT 64
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 42
11566: PUSH
11567: LD_INT 74
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 54
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 83
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 50
11620: PUSH
11621: LD_INT 90
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 51
11638: PUSH
11639: LD_INT 61
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 42
11656: PUSH
11657: LD_INT 60
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 39
11692: PUSH
11693: LD_INT 59
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 61
11710: PUSH
11711: LD_INT 64
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 63
11728: PUSH
11729: LD_INT 90
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 64
11746: PUSH
11747: LD_INT 88
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 72
11764: PUSH
11765: LD_INT 82
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11802: LD_ADDR_EXP 74
11806: PUSH
11807: LD_INT 45
11809: PUSH
11810: LD_INT 75
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11817: LD_ADDR_EXP 82
11821: PUSH
11822: LD_INT 31
11824: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 37
11832: ST_TO_ADDR
// end ; 3 :
11833: GO 12357
11835: LD_INT 3
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12356
11843: POP
// begin ruBaseArea := ruBaseEastArea ;
11844: LD_ADDR_EXP 66
11848: PUSH
11849: LD_INT 27
11851: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11852: LD_ADDR_EXP 72
11856: PUSH
11857: LD_INT 27
11859: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11860: LD_ADDR_EXP 76
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 152
11870: PUSH
11871: LD_INT 72
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 139
11888: PUSH
11889: LD_INT 69
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 142
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 157
11960: PUSH
11961: LD_INT 96
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 161
11978: PUSH
11979: LD_INT 74
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 157
11996: PUSH
11997: LD_INT 74
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 16
12011: PUSH
12012: LD_INT 161
12014: PUSH
12015: LD_INT 77
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 165
12032: PUSH
12033: LD_INT 78
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 17
12047: PUSH
12048: LD_INT 164
12050: PUSH
12051: LD_INT 74
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 164
12068: PUSH
12069: LD_INT 95
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 70
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 155
12104: PUSH
12105: LD_INT 87
12107: PUSH
12108: LD_INT 0
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 159
12122: PUSH
12123: LD_INT 95
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: LD_INT 167
12140: PUSH
12141: LD_INT 98
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 33
12155: PUSH
12156: LD_INT 152
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: LD_INT 134
12176: PUSH
12177: LD_INT 61
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 156
12194: PUSH
12195: LD_INT 62
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 171
12212: PUSH
12213: LD_INT 97
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 169
12230: PUSH
12231: LD_INT 103
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 158
12248: PUSH
12249: LD_INT 65
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 144
12266: PUSH
12267: LD_INT 53
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 150
12284: PUSH
12285: LD_INT 81
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12323: LD_ADDR_EXP 74
12327: PUSH
12328: LD_INT 145
12330: PUSH
12331: LD_INT 71
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12338: LD_ADDR_EXP 82
12342: PUSH
12343: LD_INT 29
12345: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 35
12353: ST_TO_ADDR
// end ; end ;
12354: GO 12357
12356: POP
// ruScriptActive := true ;
12357: LD_ADDR_EXP 14
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// end ;
12365: LD_VAR 0 3
12369: RET
// export function RussianBase2 ( group , option ) ; begin
12370: LD_INT 0
12372: PPUSH
// case option of 1 :
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12842
12386: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12387: LD_ADDR_EXP 67
12391: PUSH
12392: LD_INT 26
12394: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12395: LD_ADDR_EXP 73
12399: PUSH
12400: LD_INT 26
12402: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12403: LD_ADDR_EXP 77
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 104
12413: PUSH
12414: LD_INT 110
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 98
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 29
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 114
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 99
12467: PUSH
12468: LD_INT 114
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 100
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 92
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 97
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 96
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 18
12554: PUSH
12555: LD_INT 88
12557: PUSH
12558: LD_INT 97
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 106
12575: PUSH
12576: LD_INT 92
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 6
12590: PUSH
12591: LD_INT 93
12593: PUSH
12594: LD_INT 110
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 89
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 16
12626: PUSH
12627: LD_INT 95
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 92
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 33
12662: PUSH
12663: LD_INT 88
12665: PUSH
12666: LD_INT 89
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 33
12680: PUSH
12681: LD_INT 86
12683: PUSH
12684: LD_INT 90
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 33
12698: PUSH
12699: LD_INT 85
12701: PUSH
12702: LD_INT 99
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 85
12719: PUSH
12720: LD_INT 107
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 33
12734: PUSH
12735: LD_INT 105
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 33
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 92
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 105
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 98
12816: PUSH
12817: LD_INT 107
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12824: LD_ADDR_EXP 83
12828: PUSH
12829: LD_INT 30
12831: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12832: LD_ADDR_EXP 85
12836: PUSH
12837: LD_INT 36
12839: ST_TO_ADDR
// end ; 2 :
12840: GO 13809
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 13344
12850: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12851: LD_ADDR_EXP 67
12855: PUSH
12856: LD_INT 28
12858: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12859: LD_ADDR_EXP 73
12863: PUSH
12864: LD_INT 28
12866: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 0
12874: PUSH
12875: LD_INT 49
12877: PUSH
12878: LD_INT 74
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 73
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 56
12913: PUSH
12914: LD_INT 62
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 43
12931: PUSH
12932: LD_INT 68
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 43
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 60
12967: PUSH
12968: LD_INT 75
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 87
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 26
13000: PUSH
13001: LD_INT 45
13003: PUSH
13004: LD_INT 67
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 47
13021: PUSH
13022: LD_INT 84
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 87
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 41
13057: PUSH
13058: LD_INT 64
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 42
13075: PUSH
13076: LD_INT 74
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 91
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 83
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 24
13126: PUSH
13127: LD_INT 50
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 51
13147: PUSH
13148: LD_INT 61
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 42
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: LD_INT 58
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 39
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 33
13216: PUSH
13217: LD_INT 61
13219: PUSH
13220: LD_INT 64
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 63
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 5
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 33
13252: PUSH
13253: LD_INT 64
13255: PUSH
13256: LD_INT 88
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 72
13273: PUSH
13274: LD_INT 82
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13311: LD_ADDR_EXP 74
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: LD_INT 75
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13326: LD_ADDR_EXP 83
13330: PUSH
13331: LD_INT 31
13333: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13334: LD_ADDR_EXP 85
13338: PUSH
13339: LD_INT 37
13341: ST_TO_ADDR
// end ; 3 :
13342: GO 13809
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13808
13352: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13353: LD_ADDR_EXP 67
13357: PUSH
13358: LD_INT 27
13360: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13361: LD_ADDR_EXP 73
13365: PUSH
13366: LD_INT 27
13368: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13369: LD_ADDR_EXP 77
13373: PUSH
13374: LD_INT 0
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 72
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 139
13397: PUSH
13398: LD_INT 69
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 142
13415: PUSH
13416: LD_INT 56
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 29
13430: PUSH
13431: LD_INT 152
13433: PUSH
13434: LD_INT 85
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 156
13451: PUSH
13452: LD_INT 92
13454: PUSH
13455: LD_INT 3
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 157
13469: PUSH
13470: LD_INT 96
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 161
13487: PUSH
13488: LD_INT 74
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 157
13505: PUSH
13506: LD_INT 74
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 161
13523: PUSH
13524: LD_INT 77
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 24
13538: PUSH
13539: LD_INT 165
13541: PUSH
13542: LD_INT 78
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 164
13559: PUSH
13560: LD_INT 74
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 6
13574: PUSH
13575: LD_INT 164
13577: PUSH
13578: LD_INT 95
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 161
13595: PUSH
13596: LD_INT 70
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 155
13613: PUSH
13614: LD_INT 87
13616: PUSH
13617: LD_INT 0
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 159
13631: PUSH
13632: LD_INT 95
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: LD_INT 167
13649: PUSH
13650: LD_INT 98
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 33
13664: PUSH
13665: LD_INT 152
13667: PUSH
13668: LD_INT 89
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 134
13685: PUSH
13686: LD_INT 61
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 156
13703: PUSH
13704: LD_INT 62
13706: PUSH
13707: LD_INT 3
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 33
13718: PUSH
13719: LD_INT 171
13721: PUSH
13722: LD_INT 97
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 33
13736: PUSH
13737: LD_INT 169
13739: PUSH
13740: LD_INT 103
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13775: LD_ADDR_EXP 75
13779: PUSH
13780: LD_INT 145
13782: PUSH
13783: LD_INT 71
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13790: LD_ADDR_EXP 83
13794: PUSH
13795: LD_INT 29
13797: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13798: LD_ADDR_EXP 85
13802: PUSH
13803: LD_INT 35
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13809
13808: POP
// ruScriptActive2 := true ;
13809: LD_ADDR_EXP 15
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// end ;
13817: LD_VAR 0 3
13821: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13822: LD_EXP 14
13826: PUSH
13827: LD_EXP 59
13831: PPUSH
13832: CALL 56780 0 1
13836: AND
13837: IFFALSE 16419
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// begin enable ;
13860: ENABLE
// if ruTech then
13861: LD_EXP 65
13865: IFFALSE 14019
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13867: LD_ADDR_VAR 0 4
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 50
13884: PUSH
13885: EMPTY
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 7
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if lab then
13937: LD_VAR 0 4
13941: IFFALSE 14019
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 461
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: IFFALSE 14019
// begin for i in ruTech do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_EXP 65
13971: PUSH
13972: FOR_IN
13973: IFFALSE 14017
// if CanBeResearched ( lab [ 1 ] , i ) then
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 430
13993: IFFALSE 14015
// begin ComResearch ( lab [ 1 ] , i ) ;
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 124
// break ;
14013: GO 14017
// end ;
14015: GO 13972
14017: POP
14018: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_EXP 66
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 50
14051: PUSH
14052: EMPTY
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// if fac then
14065: LD_VAR 0 14
14069: IFFALSE 14664
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14071: LD_EXP 63
14075: PPUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 60
14081: PUSH
14082: EMPTY
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 72
14114: IFFALSE 14255
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 63
14125: PPUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 60
14131: PUSH
14132: EMPTY
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14253
// begin SetTag ( i , tMech ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 7
14175: PPUSH
14176: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 310
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 310
14199: PUSH
14200: LD_VAR 0 14
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: NONEQUAL
14209: AND
14210: IFFALSE 14221
// ComExitBuilding ( i ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 183
// end ;
14251: GO 14165
14253: POP
14254: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14255: LD_EXP 63
14259: PPUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 120
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 72
14309: IFFALSE 14396
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_EXP 63
14320: PPUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 54
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 120
14346: PUSH
14347: LD_INT 7
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 72
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14394
// ComEnterUnit ( i , fac [ 1 ] ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 14
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: CALL_OW 120
14392: GO 14371
14394: POP
14395: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14396: LD_VAR 0 14
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 461
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: IFFALSE 14664
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14415: LD_ADDR_VAR 0 15
14419: PUSH
14420: LD_EXP 66
14424: PPUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 32
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 35
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// if emptyTowers then
14472: LD_VAR 0 15
14476: IFFALSE 14526
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14478: LD_ADDR_VAR 0 16
14482: PUSH
14483: LD_VAR 0 15
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_EXP 66
14496: PPUSH
14497: CALL 65025 0 2
14501: ST_TO_ADDR
// if weapon then
14502: LD_VAR 0 16
14506: IFFALSE 14526
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14508: LD_VAR 0 15
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 16
14521: PPUSH
14522: CALL_OW 148
// end ; if ruConstructList then
14526: LD_EXP 70
14530: IFFALSE 14664
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_EXP 70
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_EXP 70
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PPUSH
14567: LD_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 3
14578: ARRAY
14579: PPUSH
14580: LD_EXP 70
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 448
14597: IFFALSE 14664
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14599: LD_VAR 0 14
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_EXP 70
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: LD_EXP 70
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: LD_EXP 70
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_EXP 70
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_EXP 66
14673: PPUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: LD_INT 57
14689: PUSH
14690: EMPTY
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: LD_INT 1000
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 70
14723: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14724: LD_ADDR_VAR 0 8
14728: PUSH
14729: LD_EXP 72
14733: PPUSH
14734: CALL_OW 435
14738: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14739: LD_ADDR_VAR 0 9
14743: PUSH
14744: LD_EXP 59
14748: PPUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 72
14773: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_EXP 66
14783: PPUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// if sci then
14828: LD_VAR 0 9
14832: IFFALSE 14993
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14834: LD_ADDR_VAR 0 11
14838: PUSH
14839: LD_EXP 59
14843: PPUSH
14844: LD_INT 95
14846: PUSH
14847: LD_EXP 66
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 120
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: ST_TO_ADDR
// if hurtUnits then
14875: LD_VAR 0 11
14879: IFFALSE 14940
// begin for i in sci do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 9
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14936
// if IsInUnit ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 310
14903: IFFALSE 14916
// ComExitBuilding ( i ) else
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 122
14914: GO 14934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 11
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 128
14934: GO 14891
14936: POP
14937: POP
// end else
14938: GO 14993
// if lab then
14940: LD_VAR 0 4
14944: IFFALSE 14993
// begin for i in sci do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14991
// if not IsInUnit ( i ) then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 310
14968: NOT
14969: IFFALSE 14989
// ComEnterUnit ( i , lab [ 1 ] ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: CALL_OW 120
14989: GO 14956
14991: POP
14992: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_EXP 59
15002: PPUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if eng then
15018: LD_VAR 0 5
15022: IFFALSE 15807
// begin for i in eng do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15805
// begin tag := GetTag ( i ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 110
15051: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 256
15061: PUSH
15062: LD_INT 800
15064: LESS
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: NONEQUAL
15074: AND
15075: IFFALSE 15125
// begin SetTag ( i , tHeal ) ;
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_EXP 74
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_INT 2
15110: ARRAY
15111: PPUSH
15112: CALL_OW 111
// AddComHold ( i ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15125: LD_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: EQUAL
15147: AND
15148: IFFALSE 15162
// SetTag ( i , 0 ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 109
// if not tag then
15162: LD_VAR 0 6
15166: NOT
15167: IFFALSE 15339
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_EXP 66
15178: PPUSH
15179: LD_INT 57
15181: PUSH
15182: EMPTY
15183: LIST
15184: PPUSH
15185: CALL_OW 70
15189: ST_TO_ADDR
// if undone then
15190: LD_VAR 0 3
15194: IFFALSE 15216
// begin ComComplete ( i , undone [ 1 ] ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL 62878 0 2
// continue ;
15214: GO 15034
// end ; if cr or tmp or Count ( ruBuildings ) then
15216: LD_VAR 0 8
15220: PUSH
15221: LD_VAR 0 2
15225: OR
15226: PUSH
15227: LD_EXP 76
15231: PPUSH
15232: CALL 56780 0 1
15236: OR
15237: IFFALSE 15313
// begin if IsInUnit ( i ) then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 310
15248: IFFALSE 15259
// ComExitBuilding ( i ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 122
// if tmp then
15259: LD_VAR 0 2
15263: IFFALSE 15279
// SetTag ( i , tRepair ) else
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 3
15272: PPUSH
15273: CALL_OW 109
15277: GO 15311
// if cr then
15279: LD_VAR 0 8
15283: IFFALSE 15299
// SetTag ( i , tCrates ) else
15285: LD_VAR 0 1
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 109
15297: GO 15311
// SetTag ( i , tBuild ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 5
15306: PPUSH
15307: CALL_OW 109
// end else
15311: GO 15339
// if not IsInUnit ( i ) then
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 310
15322: NOT
15323: IFFALSE 15339
// ComEnterUnit ( i , ruBase ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_EXP 68
15334: PPUSH
15335: CALL_OW 120
// end ; if tag = tRepair then
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 3
15346: EQUAL
15347: IFFALSE 15453
// begin if IsInUnit ( i ) then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 310
15358: IFFALSE 15371
// begin ComExitBuilding ( i ) ;
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 122
// continue ;
15369: GO 15034
// end ; if not tmp then
15371: LD_VAR 0 2
15375: NOT
15376: IFFALSE 15392
// begin SetTag ( i , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 109
// continue ;
15390: GO 15034
// end ; if not HasTask ( i ) then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 314
15401: NOT
15402: IFFALSE 15422
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_EXP 66
15431: PPUSH
15432: CALL_OW 308
15436: NOT
15437: IFFALSE 15453
// ComMoveToArea ( i , ruBaseArea ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 66
15448: PPUSH
15449: CALL_OW 113
// end ; if tag = tBuild then
15453: LD_VAR 0 6
15457: PUSH
15458: LD_INT 5
15460: EQUAL
15461: IFFALSE 15660
// begin if IsInUnit ( i ) then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 310
15472: IFFALSE 15485
// begin ComExitBuilding ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 122
// continue ;
15483: GO 15034
// end ; if not Count ( ruBuildings ) then
15485: LD_EXP 76
15489: PPUSH
15490: CALL 56780 0 1
15494: NOT
15495: IFFALSE 15513
// begin SetTag ( i , 0 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 109
// continue ;
15509: GO 15034
// end else
15511: GO 15552
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15513: LD_EXP 68
15517: PPUSH
15518: LD_EXP 76
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: CALL 25319 0 2
15535: NOT
15536: IFFALSE 15552
// begin SetTag ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 109
// continue ;
15550: GO 15034
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_EXP 66
15561: PPUSH
15562: LD_INT 57
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 70
15572: ST_TO_ADDR
// if undone then
15573: LD_VAR 0 3
15577: IFFALSE 15599
// begin ComComplete ( i , undone [ 1 ] ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: CALL 62878 0 2
// continue ;
15597: GO 15034
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15599: LD_VAR 0 1
15603: PPUSH
15604: LD_EXP 76
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_EXP 76
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_EXP 76
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_EXP 76
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PUSH
15652: LD_INT 4
15654: ARRAY
15655: PPUSH
15656: CALL_OW 145
// end ; if tag = tCrates then
15660: LD_VAR 0 6
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15803
// begin if IsInUnit ( i ) then
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 310
15679: IFFALSE 15692
// begin ComExitBuilding ( i ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 122
// continue ;
15690: GO 15034
// end ; if not cr then
15692: LD_VAR 0 8
15696: NOT
15697: IFFALSE 15713
// begin SetTag ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 109
// continue ;
15711: GO 15034
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 92
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_INT 12
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: NOT
15773: AND
15774: IFFALSE 15803
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_INT 2
15797: ARRAY
15798: PPUSH
15799: CALL_OW 117
// end ; end ;
15803: GO 15034
15805: POP
15806: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15807: LD_ADDR_VAR 0 10
15811: PUSH
15812: LD_EXP 59
15816: PPUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 9
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: PUSH
15860: LD_EXP 61
15864: UNION
15865: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15866: LD_ADDR_VAR 0 12
15870: PUSH
15871: LD_EXP 66
15875: PPUSH
15876: LD_INT 81
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 70
15890: ST_TO_ADDR
// if sol then
15891: LD_VAR 0 10
15895: IFFALSE 16419
// begin if enemyInBase then
15897: LD_VAR 0 12
15901: IFFALSE 16044
// begin for i in sol do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16040
// begin tw := IsInUnit ( i ) ;
15916: LD_ADDR_VAR 0 7
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 310
15930: ST_TO_ADDR
// if tw then
15931: LD_VAR 0 7
15935: IFFALSE 16014
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 101
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 30
15977: PUSH
15978: LD_INT 31
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: IN
16000: NOT
16001: IFFALSE 16012
// ComExitBuilding ( i ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 122
// end else
16012: GO 16038
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 12
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 74
16033: PPUSH
16034: CALL_OW 115
// end ;
16038: GO 15913
16040: POP
16041: POP
// end else
16042: GO 16419
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 62
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 31
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 70
16125: ST_TO_ADDR
// if empty then
16126: LD_VAR 0 13
16130: IFFALSE 16147
// empty := ReverseArray ( empty ) ;
16132: LD_ADDR_VAR 0 13
16136: PUSH
16137: LD_VAR 0 13
16141: PPUSH
16142: CALL 87656 0 1
16146: ST_TO_ADDR
// for i in sol do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 10
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16417
// begin tag := GetTag ( i ) ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 110
16174: ST_TO_ADDR
// if tag = tMech then
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 7
16182: EQUAL
16183: IFFALSE 16187
// continue ;
16185: GO 16157
// if GetLives ( i ) < 1000 and tag <> tHeal then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 256
16196: PUSH
16197: LD_INT 1000
16199: LESS
16200: PUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_INT 1
16208: NONEQUAL
16209: AND
16210: IFFALSE 16262
// begin SetTag ( i , tHeal ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_EXP 74
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: LD_EXP 74
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PPUSH
16247: CALL_OW 111
// AddComHold ( i ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 200
// continue ;
16260: GO 16157
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 256
16271: PUSH
16272: LD_INT 1000
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: AND
16285: IFFALSE 16301
// begin SetTag ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 109
// continue ;
16299: GO 16157
// end ; if HasTask ( i ) then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 314
16310: IFFALSE 16314
// continue ;
16312: GO 16157
// if not IsInUnit ( i ) and not tag and empty then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 310
16323: NOT
16324: PUSH
16325: LD_VAR 0 6
16329: NOT
16330: AND
16331: PUSH
16332: LD_VAR 0 13
16336: AND
16337: IFFALSE 16415
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16357: LD_VAR 0 13
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: CALL_OW 266
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: PUSH
16375: LD_INT 50
16377: PPUSH
16378: CALL_OW 13
16382: AND
16383: IFFALSE 16397
// AddComChangeProfession ( i , class_bazooker ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 9
16392: PPUSH
16393: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16397: LD_ADDR_VAR 0 13
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: ST_TO_ADDR
// end ; end ;
16415: GO 16157
16417: POP
16418: POP
// end ; end ; end ;
16419: PPOPN 16
16421: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16422: LD_EXP 15
16426: PUSH
16427: LD_EXP 60
16431: PPUSH
16432: CALL 56780 0 1
16436: AND
16437: IFFALSE 19019
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin enable ;
16460: ENABLE
// if ruTech then
16461: LD_EXP 65
16465: IFFALSE 16619
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16467: LD_ADDR_VAR 0 4
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 50
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// if lab then
16537: LD_VAR 0 4
16541: IFFALSE 16619
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16543: LD_VAR 0 4
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 461
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: IFFALSE 16619
// begin for i in ruTech do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_EXP 65
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16617
// if CanBeResearched ( lab [ 1 ] , i ) then
16575: LD_VAR 0 4
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 430
16593: IFFALSE 16615
// begin ComResearch ( lab [ 1 ] , i ) ;
16595: LD_VAR 0 4
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 124
// break ;
16613: GO 16617
// end ;
16615: GO 16572
16617: POP
16618: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16619: LD_ADDR_VAR 0 14
16623: PUSH
16624: LD_EXP 67
16628: PPUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 50
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 70
16664: ST_TO_ADDR
// if fac then
16665: LD_VAR 0 14
16669: IFFALSE 17264
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16671: LD_EXP 64
16675: PPUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 60
16681: PUSH
16682: EMPTY
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: IFFALSE 16855
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 64
16725: PPUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16853
// begin SetTag ( i , tMech ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 7
16775: PPUSH
16776: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 310
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 310
16799: PUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: NONEQUAL
16809: AND
16810: IFFALSE 16821
// ComExitBuilding ( i ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_VAR 0 14
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 183
// end ;
16851: GO 16765
16853: POP
16854: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16855: LD_EXP 64
16859: PPUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 54
16875: PUSH
16876: EMPTY
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 120
16885: PUSH
16886: LD_INT 7
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 50
16895: PUSH
16896: EMPTY
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 72
16909: IFFALSE 16996
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 64
16920: PPUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 54
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 120
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 50
16956: PUSH
16957: EMPTY
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: PUSH
16971: FOR_IN
16972: IFFALSE 16994
// ComEnterUnit ( i , fac [ 1 ] ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 120
16992: GO 16971
16994: POP
16995: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 461
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: IFFALSE 17264
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17015: LD_ADDR_VAR 0 15
17019: PUSH
17020: LD_EXP 67
17024: PPUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 32
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 33
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 35
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 70
17071: ST_TO_ADDR
// if emptyTowers then
17072: LD_VAR 0 15
17076: IFFALSE 17126
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: LD_VAR 0 15
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 67
17096: PPUSH
17097: CALL 65025 0 2
17101: ST_TO_ADDR
// if weapon then
17102: LD_VAR 0 16
17106: IFFALSE 17126
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17108: LD_VAR 0 15
17112: PUSH
17113: LD_INT 1
17115: ARRAY
17116: PPUSH
17117: LD_VAR 0 16
17121: PPUSH
17122: CALL_OW 148
// end ; if ruConstructList2 then
17126: LD_EXP 71
17130: IFFALSE 17264
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17132: LD_VAR 0 14
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_EXP 71
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PUSH
17163: LD_INT 2
17165: ARRAY
17166: PPUSH
17167: LD_EXP 71
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_EXP 71
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: PPUSH
17193: CALL_OW 448
17197: IFFALSE 17264
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17199: LD_VAR 0 14
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_EXP 71
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_EXP 71
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: LD_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PUSH
17243: LD_INT 3
17245: ARRAY
17246: PPUSH
17247: LD_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: PPUSH
17260: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17264: LD_ADDR_VAR 0 2
17268: PUSH
17269: LD_EXP 67
17273: PPUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 57
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 1000
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 70
17323: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: LD_EXP 73
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_EXP 60
17348: PPUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 50
17361: PUSH
17362: EMPTY
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 72
17373: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_EXP 67
17383: PPUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_INT 7
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 70
17427: ST_TO_ADDR
// if sci then
17428: LD_VAR 0 9
17432: IFFALSE 17593
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_EXP 60
17443: PPUSH
17444: LD_INT 95
17446: PUSH
17447: LD_EXP 67
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 120
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 72
17474: ST_TO_ADDR
// if hurtUnits then
17475: LD_VAR 0 11
17479: IFFALSE 17540
// begin for i in sci do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17536
// if IsInUnit ( i ) then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 310
17503: IFFALSE 17516
// ComExitBuilding ( i ) else
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 122
17514: GO 17534
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 11
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 128
17534: GO 17491
17536: POP
17537: POP
// end else
17538: GO 17593
// if lab then
17540: LD_VAR 0 4
17544: IFFALSE 17593
// begin for i in sci do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 9
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17591
// if not IsInUnit ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 310
17568: NOT
17569: IFFALSE 17589
// ComEnterUnit ( i , lab [ 1 ] ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_VAR 0 4
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 120
17589: GO 17556
17591: POP
17592: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17593: LD_ADDR_VAR 0 5
17597: PUSH
17598: LD_EXP 60
17602: PPUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 72
17617: ST_TO_ADDR
// if eng then
17618: LD_VAR 0 5
17622: IFFALSE 18407
// begin for i in eng do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 5
17633: PUSH
17634: FOR_IN
17635: IFFALSE 18405
// begin tag := GetTag ( i ) ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 110
17651: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 256
17661: PUSH
17662: LD_INT 800
17664: LESS
17665: PUSH
17666: LD_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: NONEQUAL
17674: AND
17675: IFFALSE 17725
// begin SetTag ( i , tHeal ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_EXP 75
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: LD_EXP 75
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: PPUSH
17712: CALL_OW 111
// AddComHold ( i ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17725: LD_VAR 0 6
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 256
17743: PUSH
17744: LD_INT 1000
17746: EQUAL
17747: AND
17748: IFFALSE 17762
// SetTag ( i , 0 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: CALL_OW 109
// if not tag then
17762: LD_VAR 0 6
17766: NOT
17767: IFFALSE 17939
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_EXP 67
17778: PPUSH
17779: LD_INT 57
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 70
17789: ST_TO_ADDR
// if undone then
17790: LD_VAR 0 3
17794: IFFALSE 17816
// begin ComComplete ( i , undone [ 1 ] ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL 62878 0 2
// continue ;
17814: GO 17634
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17816: LD_VAR 0 8
17820: PUSH
17821: LD_VAR 0 2
17825: OR
17826: PUSH
17827: LD_EXP 77
17831: PPUSH
17832: CALL 56780 0 1
17836: OR
17837: IFFALSE 17913
// begin if IsInUnit ( i ) then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 310
17848: IFFALSE 17859
// ComExitBuilding ( i ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 122
// if tmp then
17859: LD_VAR 0 2
17863: IFFALSE 17879
// SetTag ( i , tRepair ) else
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 109
17877: GO 17911
// if cr then
17879: LD_VAR 0 8
17883: IFFALSE 17899
// SetTag ( i , tCrates ) else
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 2
17892: PPUSH
17893: CALL_OW 109
17897: GO 17911
// SetTag ( i , tBuild ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 109
// end else
17911: GO 17939
// if not IsInUnit ( i ) then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 310
17922: NOT
17923: IFFALSE 17939
// ComEnterUnit ( i , ruBase2 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_EXP 69
17934: PPUSH
17935: CALL_OW 120
// end ; if tag = tRepair then
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: IFFALSE 18053
// begin if IsInUnit ( i ) then
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: IFFALSE 17971
// begin ComExitBuilding ( i ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 122
// continue ;
17969: GO 17634
// end ; if not tmp then
17971: LD_VAR 0 2
17975: NOT
17976: IFFALSE 17992
// begin SetTag ( i , 0 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: CALL_OW 109
// continue ;
17990: GO 17634
// end ; if not HasTask ( i ) then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 314
18001: NOT
18002: IFFALSE 18022
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 308
18036: NOT
18037: IFFALSE 18053
// ComMoveToArea ( i , ruBaseArea2 ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_EXP 67
18048: PPUSH
18049: CALL_OW 113
// end ; if tag = tBuild then
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18260
// begin if IsInUnit ( i ) then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 310
18072: IFFALSE 18085
// begin ComExitBuilding ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 122
// continue ;
18083: GO 17634
// end ; if not Count ( ruBuildings2 ) then
18085: LD_EXP 77
18089: PPUSH
18090: CALL 56780 0 1
18094: NOT
18095: IFFALSE 18113
// begin SetTag ( i , 0 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 109
// continue ;
18109: GO 17634
// end else
18111: GO 18152
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18113: LD_EXP 69
18117: PPUSH
18118: LD_EXP 77
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL 25319 0 2
18135: NOT
18136: IFFALSE 18152
// begin SetTag ( i , 0 ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 109
// continue ;
18150: GO 17634
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_EXP 67
18161: PPUSH
18162: LD_INT 57
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL_OW 70
18172: ST_TO_ADDR
// if undone then
18173: LD_VAR 0 3
18177: IFFALSE 18199
// begin ComComplete ( i , undone [ 1 ] ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL 62878 0 2
// continue ;
18197: GO 17634
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_EXP 77
18208: PUSH
18209: LD_INT 1
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: ARRAY
18216: PPUSH
18217: LD_EXP 77
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PPUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PPUSH
18243: LD_EXP 77
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_INT 4
18254: ARRAY
18255: PPUSH
18256: CALL_OW 145
// end ; if tag = tCrates then
18260: LD_VAR 0 6
18264: PUSH
18265: LD_INT 2
18267: EQUAL
18268: IFFALSE 18403
// begin if IsInUnit ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 310
18279: IFFALSE 18292
// begin ComExitBuilding ( i ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 122
// continue ;
18290: GO 17634
// end ; if not cr then
18292: LD_VAR 0 8
18296: NOT
18297: IFFALSE 18313
// begin SetTag ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 109
// continue ;
18311: GO 17634
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 314
18322: NOT
18323: PUSH
18324: LD_INT 81
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 92
18336: PUSH
18337: LD_VAR 0 8
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_VAR 0 8
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: NOT
18373: AND
18374: IFFALSE 18403
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 8
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 8
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 117
// end ; end ;
18403: GO 17634
18405: POP
18406: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18407: LD_ADDR_VAR 0 10
18411: PUSH
18412: LD_EXP 60
18416: PPUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 50
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 72
18459: PUSH
18460: LD_EXP 62
18464: UNION
18465: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18466: LD_ADDR_VAR 0 12
18470: PUSH
18471: LD_EXP 67
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 70
18490: ST_TO_ADDR
// if sol then
18491: LD_VAR 0 10
18495: IFFALSE 19019
// begin if enemyInBase then
18497: LD_VAR 0 12
18501: IFFALSE 18644
// begin for i in sol do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 10
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18640
// begin tw := IsInUnit ( i ) ;
18516: LD_ADDR_VAR 0 7
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 310
18530: ST_TO_ADDR
// if tw then
18531: LD_VAR 0 7
18535: IFFALSE 18614
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18537: LD_VAR 0 7
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 101
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 30
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 31
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: IN
18600: NOT
18601: IFFALSE 18612
// ComExitBuilding ( i ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 122
// end else
18612: GO 18638
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 74
18633: PPUSH
18634: CALL_OW 115
// end ;
18638: GO 18513
18640: POP
18641: POP
// end else
18642: GO 19019
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18644: LD_ADDR_VAR 0 13
18648: PUSH
18649: LD_EXP 67
18653: PPUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 62
18659: PUSH
18660: EMPTY
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 31
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 70
18725: ST_TO_ADDR
// if empty then
18726: LD_VAR 0 13
18730: IFFALSE 18747
// empty := ReverseArray ( empty ) ;
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL 87656 0 1
18746: ST_TO_ADDR
// for i in sol do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_IN
18758: IFFALSE 19017
// begin tag := GetTag ( i ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: ST_TO_ADDR
// if tag = tMech then
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 7
18782: EQUAL
18783: IFFALSE 18787
// continue ;
18785: GO 18757
// if GetLives ( i ) < 1000 and tag <> tHeal then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: LD_INT 1
18808: NONEQUAL
18809: AND
18810: IFFALSE 18862
// begin SetTag ( i , tHeal ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_EXP 75
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: LD_EXP 75
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: PPUSH
18847: CALL_OW 111
// AddComHold ( i ) ;
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 200
// continue ;
18860: GO 18757
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 256
18871: PUSH
18872: LD_INT 1000
18874: EQUAL
18875: PUSH
18876: LD_VAR 0 6
18880: PUSH
18881: LD_INT 1
18883: EQUAL
18884: AND
18885: IFFALSE 18901
// begin SetTag ( i , 0 ) ;
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 0
18894: PPUSH
18895: CALL_OW 109
// continue ;
18899: GO 18757
// end ; if HasTask ( i ) then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 314
18910: IFFALSE 18914
// continue ;
18912: GO 18757
// if not IsInUnit ( i ) and not tag and empty then
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 310
18923: NOT
18924: PUSH
18925: LD_VAR 0 6
18929: NOT
18930: AND
18931: PUSH
18932: LD_VAR 0 13
18936: AND
18937: IFFALSE 19015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: ARRAY
18965: PPUSH
18966: CALL_OW 266
18970: PUSH
18971: LD_INT 5
18973: EQUAL
18974: PUSH
18975: LD_INT 50
18977: PPUSH
18978: CALL_OW 13
18982: AND
18983: IFFALSE 18997
// AddComChangeProfession ( i , class_bazooker ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 13
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 3
19014: ST_TO_ADDR
// end ; end ;
19015: GO 18757
19017: POP
19018: POP
// end ; end ; end ;
19019: PPOPN 16
19021: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19022: LD_EXP 79
19026: PUSH
19027: LD_EXP 22
19031: AND
19032: IFFALSE 19599
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
// begin enable ;
19042: ENABLE
// if not ruTanks then
19043: LD_EXP 79
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19599
// for i in ruTanks do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 79
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19597
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 302
19074: NOT
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 255
19085: PUSH
19086: LD_INT 3
19088: NONEQUAL
19089: OR
19090: IFFALSE 19110
// begin ruTanks := ruTanks diff i ;
19092: LD_ADDR_EXP 79
19096: PUSH
19097: LD_EXP 79
19101: PUSH
19102: LD_VAR 0 1
19106: DIFF
19107: ST_TO_ADDR
// continue ;
19108: GO 19062
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 110
19119: NOT
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 110
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 19308
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 262
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 261
19160: PUSH
19161: LD_INT 50
19163: LESS
19164: AND
19165: PUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 302
19175: AND
19176: IFFALSE 19263
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_EXP 68
19187: PPUSH
19188: CALL_OW 250
19192: PPUSH
19193: LD_EXP 68
19197: PPUSH
19198: CALL_OW 251
19202: PPUSH
19203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19207: LD_INT 35
19209: PPUSH
19210: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_EXP 68
19223: PPUSH
19224: CALL_OW 250
19228: PPUSH
19229: LD_EXP 68
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 297
19243: PUSH
19244: LD_INT 6
19246: LESS
19247: IFFALSE 19207
// SetFuel ( i , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 240
// end else
19261: GO 19308
// if not IsInArea ( i , ruParkingArea ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 308
19277: NOT
19278: IFFALSE 19296
// ComMoveToArea ( i , ruParkingArea ) else
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 82
19289: PPUSH
19290: CALL_OW 113
19294: GO 19308
// SetTag ( i , tParking ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 110
19317: PUSH
19318: LD_INT 12
19320: EQUAL
19321: IFFALSE 19451
// begin if GetLives ( i ) < 650 then
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 256
19332: PUSH
19333: LD_INT 650
19335: LESS
19336: IFFALSE 19428
// begin if not IsDrivenBy ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: NOT
19348: IFFALSE 19352
// continue ;
19350: GO 19062
// mech := IsDrivenBy ( i ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19390: LD_INT 35
19392: PPUSH
19393: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 256
19406: PUSH
19407: LD_INT 1000
19409: EQUAL
19410: IFFALSE 19390
// ComEnterUnit ( mech , i ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 120
// end else
19426: GO 19451
// if IsDrivenBy ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 311
19437: IFFALSE 19451
// SetTag ( i , tAttack ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 13
19446: PPUSH
19447: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 110
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19595
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_EXP 66
19475: PPUSH
19476: LD_INT 81
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 256
19500: PUSH
19501: LD_INT 650
19503: LESS
19504: IFFALSE 19529
// begin ComStop ( i ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 141
// SetTag ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 109
// continue ;
19527: GO 19062
// end ; if enemy then
19529: LD_VAR 0 3
19533: IFFALSE 19573
// begin if not HasTask ( i ) then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 314
19544: NOT
19545: IFFALSE 19571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 115
// end else
19571: GO 19595
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 35
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: PPUSH
19591: CALL 94984 0 2
// end ; end ;
19595: GO 19062
19597: POP
19598: POP
// end ;
19599: PPOPN 3
19601: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19602: LD_EXP 80
19606: PUSH
19607: LD_EXP 22
19611: AND
19612: IFFALSE 20179
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// begin enable ;
19622: ENABLE
// if not ruTanks2 then
19623: LD_EXP 80
19627: NOT
19628: IFFALSE 19632
// exit ;
19630: GO 20179
// for i in ruTanks2 do
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_EXP 80
19641: PUSH
19642: FOR_IN
19643: IFFALSE 20177
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: NONEQUAL
19669: OR
19670: IFFALSE 19690
// begin ruTanks := ruTanks diff i ;
19672: LD_ADDR_EXP 79
19676: PUSH
19677: LD_EXP 79
19681: PUSH
19682: LD_VAR 0 1
19686: DIFF
19687: ST_TO_ADDR
// continue ;
19688: GO 19642
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 110
19699: NOT
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: OR
19715: IFFALSE 19888
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 262
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 261
19740: PUSH
19741: LD_INT 50
19743: LESS
19744: AND
19745: PUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 302
19755: AND
19756: IFFALSE 19843
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_EXP 69
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_EXP 69
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19787: LD_INT 35
19789: PPUSH
19790: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_EXP 69
19803: PPUSH
19804: CALL_OW 250
19808: PPUSH
19809: LD_EXP 69
19813: PPUSH
19814: CALL_OW 251
19818: PPUSH
19819: CALL_OW 297
19823: PUSH
19824: LD_INT 6
19826: LESS
19827: IFFALSE 19787
// SetFuel ( i , 100 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 100
19836: PPUSH
19837: CALL_OW 240
// end else
19841: GO 19888
// if not IsInArea ( i , ruParkingArea2 ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 308
19857: NOT
19858: IFFALSE 19876
// ComMoveToArea ( i , ruParkingArea2 ) else
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_EXP 83
19869: PPUSH
19870: CALL_OW 113
19874: GO 19888
// SetTag ( i , tParking ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 12
19883: PPUSH
19884: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 110
19897: PUSH
19898: LD_INT 12
19900: EQUAL
19901: IFFALSE 20031
// begin if GetLives ( i ) < 650 then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 256
19912: PUSH
19913: LD_INT 650
19915: LESS
19916: IFFALSE 20008
// begin if not IsDrivenBy ( i ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 311
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19642
// mech := IsDrivenBy ( i ) ;
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 311
19946: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: EQUAL
19990: IFFALSE 19970
// ComEnterUnit ( mech , i ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 120
// end else
20006: GO 20031
// if IsDrivenBy ( i ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 311
20017: IFFALSE 20031
// SetTag ( i , tAttack ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 13
20026: PPUSH
20027: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 13
20043: EQUAL
20044: IFFALSE 20175
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_EXP 67
20055: PPUSH
20056: LD_INT 81
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 70
20070: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 256
20080: PUSH
20081: LD_INT 650
20083: LESS
20084: IFFALSE 20109
// begin ComStop ( i ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 141
// SetTag ( i , 0 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 109
// continue ;
20107: GO 19642
// end ; if enemy then
20109: LD_VAR 0 3
20113: IFFALSE 20153
// begin if not HasTask ( i ) then
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: IFFALSE 20151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 74
20146: PPUSH
20147: CALL_OW 115
// end else
20151: GO 20175
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 35
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: PPUSH
20171: CALL 94984 0 2
// end ; end ;
20175: GO 19642
20177: POP
20178: POP
// end ;
20179: PPOPN 3
20181: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20182: LD_EXP 81
20186: PPUSH
20187: CALL 56780 0 1
20191: IFFALSE 20204
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20197: LD_INT 106
20199: PPUSH
20200: CALL_OW 427
// end ;
20204: END
// export function RussianExtraAttack ; var i , tmp ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_EXP 81
20219: PPUSH
20220: LD_INT 50
20222: PUSH
20223: EMPTY
20224: LIST
20225: PPUSH
20226: CALL_OW 72
20230: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20231: LD_ADDR_EXP 81
20235: PUSH
20236: LD_EXP 81
20240: PUSH
20241: LD_VAR 0 3
20245: DIFF
20246: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_INT 105
20254: PPUSH
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 114
// wait ( 0 0$5 ) ;
20262: LD_INT 175
20264: PPUSH
20265: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20269: LD_INT 35
20271: PPUSH
20272: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 50
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// for i in tmp do
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20334
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 35
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: PPUSH
20328: CALL 94984 0 2
20332: GO 20307
20334: POP
20335: POP
// until not tmp ;
20336: LD_VAR 0 3
20340: NOT
20341: IFFALSE 20269
// end ;
20343: LD_VAR 0 1
20347: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// result := [ ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 4
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: LD_INT 6
20380: PUSH
20381: LD_INT 7
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_OWVAR 67
20394: ARRAY
20395: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20396: LD_ADDR_VAR 0 8
20400: PUSH
20401: LD_INT 19
20403: ST_TO_ADDR
// parking := ruGatPointArea ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: LD_INT 32
20411: ST_TO_ADDR
// dir := 5 ;
20412: LD_ADDR_VAR 0 10
20416: PUSH
20417: LD_INT 5
20419: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 6
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: IFFALSE 20518
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 70
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20516
// RemoveUnit ( i ) ;
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 64
20514: GO 20502
20516: POP
20517: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: IFFALSE 20622
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 8
20569: PPUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20620
// KillUnit ( i ) ;
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 66
20618: GO 20606
20620: POP
20621: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_INT 21
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: IFFALSE 20718
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 8
20666: PPUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20716
// ComMoveXY ( i , 92 , 92 ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 92
20706: PPUSH
20707: LD_INT 92
20709: PPUSH
20710: CALL_OW 111
20714: GO 20696
20716: POP
20717: POP
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 50
20732: PUSH
20733: EMPTY
20734: LIST
20735: PPUSH
20736: CALL_OW 70
20740: NOT
20741: IFFALSE 20718
// InitHC_All ( ) ;
20743: CALL_OW 584
// InitVc ;
20747: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_OWVAR 67
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 1
20789: PLUS
20790: PUSH
20791: FOR_TO
20792: IFFALSE 21099
// begin uc_side := 6 ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_INT 6
20801: ST_TO_ADDR
// uc_nation := nation_russian ;
20802: LD_ADDR_OWVAR 21
20806: PUSH
20807: LD_INT 3
20809: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 4
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20845: LD_INT 22
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 3
20866: MOD
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ARRAY
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_INT 45
20902: PUSH
20903: LD_INT 46
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 3
20921: MOD
20922: PUSH
20923: LD_INT 1
20925: PLUS
20926: ARRAY
20927: PPUSH
20928: LD_INT 100
20930: PPUSH
20931: CALL 59518 0 5
// veh := CreateVehicle ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: CALL_OW 45
20944: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20945: LD_VAR 0 6
20949: PPUSH
20950: LD_VAR 0 10
20954: PPUSH
20955: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 8
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: CALL_OW 49
// if control = control_manual then
20976: LD_VAR 0 11
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: IFFALSE 21038
// begin uc_side := 6 ;
20986: LD_ADDR_OWVAR 20
20990: PUSH
20991: LD_INT 6
20993: ST_TO_ADDR
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21002: LD_INT 0
21004: PPUSH
21005: LD_VAR 0 7
21009: PPUSH
21010: CALL_OW 383
// un := CreateHuman ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: CALL_OW 44
21023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_VAR 0 6
21033: PPUSH
21034: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 9
21047: PPUSH
21048: CALL_OW 113
// wait ( 0 0$3 ) ;
21052: LD_INT 105
21054: PPUSH
21055: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PPUSH
21070: CALL_OW 70
21074: NOT
21075: IFFALSE 21038
// result := Join ( result , veh ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL 92380 0 2
21096: ST_TO_ADDR
// end ;
21097: GO 20791
21099: POP
21100: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_OWVAR 67
21133: ARRAY
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21292
// begin uc_side := 6 ;
21138: LD_ADDR_OWVAR 20
21142: PUSH
21143: LD_INT 6
21145: ST_TO_ADDR
// uc_nation := nation_russian ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 3
21153: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21154: LD_INT 0
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: CALL_OW 381
// un := CreateHuman ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: CALL_OW 44
21175: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21176: LD_INT 35
21178: PUSH
21179: LD_INT 60
21181: PUSH
21182: LD_INT 70
21184: PUSH
21185: LD_INT 80
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21218
// SetClass ( un , class_bazooker ) ;
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_INT 9
21213: PPUSH
21214: CALL_OW 336
// SetDir ( un , dir ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 9
21258: PPUSH
21259: CALL_OW 113
// wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// result := Join ( result , un ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 92380 0 2
21289: ST_TO_ADDR
// end ;
21290: GO 21135
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 2
21298: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21307: LD_ADDR_EXP 18
21311: PUSH
21312: LD_EXP 18
21316: PPUSH
21317: CALL 93741 0 1
21321: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 99
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 78
21339: PUSH
21340: LD_INT 50
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 91
21349: PUSH
21350: LD_INT 45
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL 20348 0 1
21376: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21377: LD_VAR 0 4
21381: PPUSH
21382: LD_INT 21
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: PPUSH
21397: LD_INT 108
21399: PPUSH
21400: LD_INT 60
21402: PPUSH
21403: CALL_OW 114
// DRussianNextAttack ;
21407: CALL 28624 0 0
// repeat wait ( 0 0$2 ) ;
21411: LD_INT 70
21413: PPUSH
21414: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_INT 81
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: LD_INT 50
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 72
21458: ST_TO_ADDR
// for i in attackers do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: FOR_IN
21470: IFFALSE 21846
// begin if not IsOk ( i ) then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFFALSE 21502
// begin attackers := attackers diff i ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: LD_VAR 0 6
21498: DIFF
21499: ST_TO_ADDR
// continue ;
21500: GO 21469
// end ; if GetType ( i ) = unit_vehicle then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 247
21511: PUSH
21512: LD_INT 2
21514: EQUAL
21515: IFFALSE 21533
// AgressiveMove ( i , path ) else
21517: LD_VAR 0 6
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 94984 0 2
21531: GO 21844
// begin if GetClass ( i ) = class_bazooker then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 9
21545: EQUAL
21546: IFFALSE 21820
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 74
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 12
21575: GREATER
21576: IFFALSE 21604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 7
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: CALL_OW 74
21597: PPUSH
21598: CALL 96452 0 2
21602: GO 21818
// begin e := NearestUnitToUnit ( enemy , i ) ;
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 74
21623: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: PUSH
21635: LD_INT 1
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21660
21643: POP
// ComAttackUnit ( i , e ) ; 2 :
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 115
21658: GO 21818
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21746
21668: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 250
21683: PPUSH
21684: LD_VAR 0 5
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 247
21707: PUSH
21708: LD_INT 3
21710: NONEQUAL
21711: PUSH
21712: LD_EXP 17
21716: NOT
21717: AND
21718: IFFALSE 21744
// begin dialogRussianSpaceAmmo := true ;
21720: LD_ADDR_EXP 17
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21728: LD_INT 210
21730: PPUSH
21731: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL 28671 0 1
// end ; end ; 3 :
21744: GO 21818
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21817
21754: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21784: LD_EXP 17
21788: NOT
21789: IFFALSE 21815
// begin dialogRussianSpaceAmmo := true ;
21791: LD_ADDR_EXP 17
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21799: LD_INT 210
21801: PPUSH
21802: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21806: LD_VAR 0 5
21810: PPUSH
21811: CALL 28671 0 1
// end ; end ; end ;
21815: GO 21818
21817: POP
// end ; end else
21818: GO 21844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21820: LD_VAR 0 6
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 74
21839: PPUSH
21840: CALL 96452 0 2
// end ; end ;
21844: GO 21469
21846: POP
21847: POP
// until not attackers ;
21848: LD_VAR 0 4
21852: NOT
21853: IFFALSE 21411
// end ;
21855: LD_VAR 0 2
21859: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21860: LD_EXP 10
21864: PUSH
21865: LD_EXP 16
21869: AND
21870: IFFALSE 21982
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
// begin InitHC_All ( ) ;
21880: CALL_OW 584
// for i := 1 to 3 do
21884: LD_ADDR_VAR 0 1
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21980
// begin uc_side := 6 ;
21900: LD_ADDR_OWVAR 20
21904: PUSH
21905: LD_INT 6
21907: ST_TO_ADDR
// uc_nation := nation_russian ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_INT 3
21915: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 381
// un := CreateHuman ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: CALL_OW 44
21935: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_INT 33
21955: PPUSH
21956: LD_INT 0
21958: PPUSH
21959: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 52
21970: PPUSH
21971: LD_INT 16
21973: PPUSH
21974: CALL_OW 114
// end ;
21978: GO 21897
21980: POP
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21985: LD_EXP 68
21989: PPUSH
21990: CALL_OW 302
21994: PUSH
21995: LD_EXP 78
21999: NOT
22000: AND
22001: IFFALSE 22238
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
// begin enable ;
22009: ENABLE
// uc_side := 3 ;
22010: LD_ADDR_OWVAR 20
22014: PUSH
22015: LD_INT 3
22017: ST_TO_ADDR
// uc_nation := nation_russian ;
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22026: LD_INT 22
22028: PPUSH
22029: LD_INT 3
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 51
22037: PPUSH
22038: LD_INT 100
22040: PPUSH
22041: CALL 59518 0 5
// cargo := CreateVehicle ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 45
22054: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 187
22074: PPUSH
22075: LD_INT 117
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_INT 100
22095: PPUSH
22096: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22100: LD_VAR 0 1
22104: PPUSH
22105: LD_EXP 68
22109: PPUSH
22110: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_EXP 68
22123: PPUSH
22124: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 187
22135: PPUSH
22136: LD_INT 117
22138: PPUSH
22139: CALL_OW 171
// wait ( 0 0$10 ) ;
22143: LD_INT 350
22145: PPUSH
22146: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22150: LD_INT 35
22152: PPUSH
22153: CALL_OW 67
// if not HasTask ( cargo ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 314
22166: NOT
22167: IFFALSE 22184
// ComMoveXY ( cargo , 187 , 117 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 187
22176: PPUSH
22177: LD_INT 117
22179: PPUSH
22180: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 301
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 307
22209: OR
22210: IFFALSE 22150
// if IsAt ( cargo , 187 , 117 ) then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 187
22219: PPUSH
22220: LD_INT 117
22222: PPUSH
22223: CALL_OW 307
22227: IFFALSE 22238
// RemoveUnit ( cargo ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 64
// end ; end_of_file
22238: PPOPN 1
22240: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 49784 0 1
// if unit = Dietrich and not arabianAttack then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_EXP 50
22259: EQUAL
22260: PUSH
22261: LD_EXP 4
22265: NOT
22266: AND
22267: IFFALSE 22276
// YouLost ( ArabDefeated ) ;
22269: LD_STRING ArabDefeated
22271: PPUSH
22272: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: IN
22310: PUSH
22311: LD_EXP 4
22315: NOT
22316: AND
22317: IFFALSE 22326
// YouLost ( ArabDefeated ) ;
22319: LD_STRING ArabDefeated
22321: PPUSH
22322: CALL_OW 104
// if unit in JMMSquad then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_EXP 45
22335: IN
22336: IFFALSE 22354
// JMMSquad := JMMSquad diff unit ;
22338: LD_ADDR_EXP 45
22342: PUSH
22343: LD_EXP 45
22347: PUSH
22348: LD_VAR 0 1
22352: DIFF
22353: ST_TO_ADDR
// if unit = Truman then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_EXP 43
22363: EQUAL
22364: IFFALSE 22373
// YouLost ( Powell ) ;
22366: LD_STRING Powell
22368: PPUSH
22369: CALL_OW 104
// if unit = JMM then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_EXP 23
22382: EQUAL
22383: IFFALSE 22392
// YouLost ( JMM ) ;
22385: LD_STRING JMM
22387: PPUSH
22388: CALL_OW 104
// if unit in arEscapist then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_EXP 56
22401: IN
22402: IFFALSE 22420
// arEscapist := arEscapist diff unit ;
22404: LD_ADDR_EXP 56
22408: PUSH
22409: LD_EXP 56
22413: PUSH
22414: LD_VAR 0 1
22418: DIFF
22419: ST_TO_ADDR
// if unit in arAttackersInf then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_EXP 57
22429: IN
22430: IFFALSE 22448
// arAttackersInf := arAttackersInf diff unit ;
22432: LD_ADDR_EXP 57
22436: PUSH
22437: LD_EXP 57
22441: PUSH
22442: LD_VAR 0 1
22446: DIFF
22447: ST_TO_ADDR
// if unit in arAttackersVeh then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_EXP 58
22457: IN
22458: IFFALSE 22476
// arAttackersVeh := arAttackersVeh diff unit ;
22460: LD_ADDR_EXP 58
22464: PUSH
22465: LD_EXP 58
22469: PUSH
22470: LD_VAR 0 1
22474: DIFF
22475: ST_TO_ADDR
// if unit = Khatam then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_EXP 36
22485: EQUAL
22486: IFFALSE 22496
// khatamStatus := false ;
22488: LD_ADDR_EXP 5
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// if unit = epsilon then
22496: LD_VAR 0 1
22500: PUSH
22501: LD_EXP 10
22505: EQUAL
22506: IFFALSE 22537
// begin hasBase := false ;
22508: LD_ADDR_EXP 9
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// epsilon := 0 ;
22516: LD_ADDR_EXP 10
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; if unit = Khatam then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_EXP 36
22546: EQUAL
22547: IFFALSE 22559
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_STRING 10_KhatamStatus_1
22554: PPUSH
22555: CALL_OW 39
// if unit in ruForces then
22559: LD_VAR 0 1
22563: PUSH
22564: LD_EXP 59
22568: IN
22569: IFFALSE 22587
// ruForces := ruForces diff unit ;
22571: LD_ADDR_EXP 59
22575: PUSH
22576: LD_EXP 59
22580: PUSH
22581: LD_VAR 0 1
22585: DIFF
22586: ST_TO_ADDR
// if unit in ruForces2 then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 60
22596: IN
22597: IFFALSE 22615
// ruForces2 := ruForces2 diff unit ;
22599: LD_ADDR_EXP 60
22603: PUSH
22604: LD_EXP 60
22608: PUSH
22609: LD_VAR 0 1
22613: DIFF
22614: ST_TO_ADDR
// if unit in ruTanks then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_EXP 79
22624: IN
22625: IFFALSE 22643
// ruTanks := ruTanks diff unit ;
22627: LD_ADDR_EXP 79
22631: PUSH
22632: LD_EXP 79
22636: PUSH
22637: LD_VAR 0 1
22641: DIFF
22642: ST_TO_ADDR
// if unit in ruTanks2 then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 80
22652: IN
22653: IFFALSE 22671
// ruTanks2 := ruTanks2 diff unit ;
22655: LD_ADDR_EXP 80
22659: PUSH
22660: LD_EXP 80
22664: PUSH
22665: LD_VAR 0 1
22669: DIFF
22670: ST_TO_ADDR
// if unit in ruExtraTanks then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_EXP 81
22680: IN
22681: IFFALSE 22699
// ruExtraTanks := ruExtraTanks diff unit ;
22683: LD_ADDR_EXP 81
22687: PUSH
22688: LD_EXP 81
22692: PUSH
22693: LD_VAR 0 1
22697: DIFF
22698: ST_TO_ADDR
// if unit in ruMech then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 63
22708: IN
22709: IFFALSE 22727
// ruMech := ruMech diff unit ;
22711: LD_ADDR_EXP 63
22715: PUSH
22716: LD_EXP 63
22720: PUSH
22721: LD_VAR 0 1
22725: DIFF
22726: ST_TO_ADDR
// if unit in ruMech2 then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_EXP 64
22736: IN
22737: IFFALSE 22755
// ruMech2 := ruMech2 diff unit ;
22739: LD_ADDR_EXP 64
22743: PUSH
22744: LD_EXP 64
22748: PUSH
22749: LD_VAR 0 1
22753: DIFF
22754: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 266
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: IN
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 255
22785: PUSH
22786: LD_INT 3
22788: EQUAL
22789: AND
22790: IFFALSE 22946
// begin if IsInArea ( unit , ruBaseArea ) then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_EXP 66
22801: PPUSH
22802: CALL_OW 308
22806: IFFALSE 22869
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22808: LD_ADDR_EXP 76
22812: PUSH
22813: LD_EXP 76
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 266
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 250
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 251
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 254
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL 92380 0 2
22868: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_EXP 67
22878: PPUSH
22879: CALL_OW 308
22883: IFFALSE 22946
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22885: LD_ADDR_EXP 77
22889: PUSH
22890: LD_EXP 77
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 266
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 254
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL 92380 0 2
22945: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: IN
22980: IFFALSE 22990
// ruTransportDestroyed := true ;
22982: LD_ADDR_EXP 78
22986: PUSH
22987: LD_INT 1
22989: ST_TO_ADDR
// end ;
22990: PPOPN 1
22992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 7
23005: EQUAL
23006: IFFALSE 23020
// SetTag ( un , 0 ) ;
23008: LD_VAR 0 1
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 109
// end ;
23020: PPOPN 3
23022: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: IN
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 266
23067: PUSH
23068: LD_INT 3
23070: EQUAL
23071: AND
23072: PUSH
23073: LD_VAR 0 2
23077: PPUSH
23078: CALL_OW 256
23082: PUSH
23083: LD_INT 1000
23085: LESS
23086: AND
23087: IFFALSE 23113
// begin SetTag ( un , 0 ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 109
// SetLives ( un , 1000 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 1000
23108: PPUSH
23109: CALL_OW 234
// end ; end ;
23113: PPOPN 2
23115: END
// on UnitGoesToRed ( un ) do var i ;
23116: LD_INT 0
23118: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_EXP 36
23128: EQUAL
23129: PUSH
23130: LD_EXP 36
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 8
23142: EQUAL
23143: AND
23144: IFFALSE 23155
// KillUnit ( Khatam ) ;
23146: LD_EXP 36
23150: PPUSH
23151: CALL_OW 66
// end ;
23155: PPOPN 2
23157: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23158: LD_EXP 6
23162: NOT
23163: IFFALSE 23197
// begin seenRussianTeleport := true ;
23165: LD_ADDR_EXP 6
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: CALL 26681 0 2
// end ; end ;
23197: PPOPN 1
23199: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 266
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 6
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 5
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: AND
23243: IFFALSE 23362
// begin for i := 1 to rand ( 2 , 4 ) do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 2
23257: PPUSH
23258: LD_INT 4
23260: PPUSH
23261: CALL_OW 12
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23360
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 12
23295: MINUS
23296: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 251
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PPUSH
23316: LD_INT 2
23318: PPUSH
23319: CALL_OW 12
23323: PLUS
23324: ST_TO_ADDR
// if ValidHex ( x , y ) then
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 488
23339: IFFALSE 23358
// MineExplosion ( x , y , 10 ) ;
23341: LD_VAR 0 5
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_INT 10
23353: PPUSH
23354: CALL_OW 453
// end ;
23358: GO 23266
23360: POP
23361: POP
// end ; end ;
23362: PPOPN 6
23364: END
// on VehicleConstructed ( veh , fac ) do var side ;
23365: LD_INT 0
23367: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL 49904 0 2
// side := GetSide ( fac ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 255
23396: ST_TO_ADDR
// if side = 3 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23589
// begin if IsInArea ( fac , ruBaseArea ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_EXP 66
23416: PPUSH
23417: CALL_OW 308
23421: IFFALSE 23498
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23423: LD_ADDR_EXP 70
23427: PUSH
23428: LD_EXP 70
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 3
23440: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 263
23450: PUSH
23451: LD_INT 1
23453: EQUAL
23454: IFFALSE 23478
// ruTanks := Join ( ruTanks , veh ) else
23456: LD_ADDR_EXP 79
23460: PUSH
23461: LD_EXP 79
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL 92380 0 2
23475: ST_TO_ADDR
23476: GO 23498
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23478: LD_ADDR_EXP 81
23482: PUSH
23483: LD_EXP 81
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 92380 0 2
23497: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_EXP 67
23507: PPUSH
23508: CALL_OW 308
23512: IFFALSE 23589
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23514: LD_ADDR_EXP 71
23518: PUSH
23519: LD_EXP 71
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 3
23531: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23569
// ruTanks2 := Join ( ruTanks2 , veh ) else
23547: LD_ADDR_EXP 80
23551: PUSH
23552: LD_EXP 80
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL 92380 0 2
23566: ST_TO_ADDR
23567: GO 23589
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23569: LD_ADDR_EXP 81
23573: PUSH
23574: LD_EXP 81
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 92380 0 2
23588: ST_TO_ADDR
// end ; end ; end ;
23589: PPOPN 3
23591: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// begin side := GetSide ( driver ) ;
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: ST_TO_ADDR
// if side = 5 then
23612: LD_VAR 0 7
23616: PUSH
23617: LD_INT 5
23619: EQUAL
23620: IFFALSE 23700
// begin arAttackersVeh := arAttackersVeh diff driver ;
23622: LD_ADDR_EXP 58
23626: PUSH
23627: LD_EXP 58
23631: PUSH
23632: LD_VAR 0 1
23636: DIFF
23637: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 189
23645: PPUSH
23646: LD_INT 80
23648: PPUSH
23649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23653: LD_INT 35
23655: PPUSH
23656: CALL_OW 67
// if not IsOk ( driver ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 24224
// until IsAt ( driver , 189 , 80 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 189
23681: PPUSH
23682: LD_INT 80
23684: PPUSH
23685: CALL_OW 307
23689: IFFALSE 23653
// RemoveUnit ( driver ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 64
// end ; if side = 6 then
23700: LD_VAR 0 7
23704: PUSH
23705: LD_INT 6
23707: EQUAL
23708: IFFALSE 23766
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 19
23717: PPUSH
23718: CALL_OW 113
// wait ( 0 0$3 ) ;
23722: LD_INT 105
23724: PPUSH
23725: CALL_OW 67
// if not IsOk ( driver ) then
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 302
23738: NOT
23739: IFFALSE 23743
// exit ;
23741: GO 24224
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 19
23750: PPUSH
23751: CALL_OW 308
23755: IFFALSE 23710
// RemoveUnit ( driver ) ;
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 64
// end ; if side = 3 then
23766: LD_VAR 0 7
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: IFFALSE 24224
// begin if driver in ruMech then
23776: LD_VAR 0 1
23780: PUSH
23781: LD_EXP 63
23785: IN
23786: IFFALSE 24000
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_EXP 66
23797: PPUSH
23798: CALL_OW 113
// SetTag ( driver , tMech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_INT 7
23809: PPUSH
23810: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 66
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 50
23846: PUSH
23847: EMPTY
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// if fac then
23860: LD_VAR 0 6
23864: IFFALSE 23886
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23866: LD_VAR 0 1
23870: PPUSH
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PPUSH
23880: CALL_OW 180
// exit ;
23884: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_EXP 66
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 62
23939: PUSH
23940: EMPTY
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 50
23949: PUSH
23950: EMPTY
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: ST_TO_ADDR
// if arm then
23964: LD_VAR 0 5
23968: IFFALSE 24000
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_VAR 0 5
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 64
24009: IN
24010: IFFALSE 24224
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 67
24021: PPUSH
24022: CALL_OW 113
// SetTag ( driver , tMech ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24038: LD_ADDR_VAR 0 6
24042: PUSH
24043: LD_EXP 67
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 50
24070: PUSH
24071: EMPTY
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if fac then
24084: LD_VAR 0 6
24088: IFFALSE 24110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 6
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: CALL_OW 180
// exit ;
24108: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 67
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 62
24163: PUSH
24164: EMPTY
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 50
24173: PUSH
24174: EMPTY
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 70
24187: ST_TO_ADDR
// if arm then
24188: LD_VAR 0 5
24192: IFFALSE 24224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 5
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// end ; end ; end ; end ;
24224: PPOPN 7
24226: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24227: LD_OWVAR 57
24231: IFFALSE 24245
// begin end_the_mission_allowed := false ;
24233: LD_ADDR_OWVAR 57
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// FinishMission ;
24241: CALL 32129 0 0
// end ; end ;
24245: PPOPN 1
24247: END
// on BuildingComplete ( b ) do var side , type ;
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// begin side := GetSide ( b ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// type := GetBType ( b ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: ST_TO_ADDR
// if side = 2 then
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: EQUAL
24290: IFFALSE 24310
// arBuildings := Delete ( arBuildings , 1 ) ;
24292: LD_ADDR_EXP 53
24296: PUSH
24297: LD_EXP 53
24301: PPUSH
24302: LD_INT 1
24304: PPUSH
24305: CALL_OW 3
24309: ST_TO_ADDR
// if side = 1 then
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: EQUAL
24318: IFFALSE 24380
// if type = b_depot and not hasBase then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: PUSH
24329: LD_EXP 9
24333: NOT
24334: AND
24335: IFFALSE 24380
// begin hasBase := true ;
24337: LD_ADDR_EXP 9
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// epsilon := b ;
24345: LD_ADDR_EXP 10
24349: PUSH
24350: LD_VAR 0 1
24354: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_STRING epsilon
24362: PPUSH
24363: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24367: LD_INT 0
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_INT 0
24375: PPUSH
24376: CALL_OW 324
// end ; if side = 3 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 3
24387: EQUAL
24388: IFFALSE 24674
// begin if IsInArea ( b , ruBaseArea ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 66
24399: PPUSH
24400: CALL_OW 308
24404: IFFALSE 24424
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24406: LD_ADDR_EXP 76
24410: PUSH
24411: LD_EXP 76
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 67
24433: PPUSH
24434: CALL_OW 308
24438: IFFALSE 24458
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24440: LD_ADDR_EXP 77
24444: PUSH
24445: LD_EXP 77
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: IN
24477: IFFALSE 24488
// ComUpgrade ( b ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 146
// if type = b_lab then
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 6
24495: EQUAL
24496: IFFALSE 24540
// if IsInArea ( b , ruBaseArea ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_EXP 66
24507: PPUSH
24508: CALL_OW 308
24512: IFFALSE 24528
// ComUpgradeLab ( b , b_lab_weapon ) else
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 10
24521: PPUSH
24522: CALL_OW 147
24526: GO 24540
// ComUpgradeLab ( b , b_lab_computer ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 12
24535: PPUSH
24536: CALL_OW 147
// if type = b_depot then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24674
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 274
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 2550
24565: PPUSH
24566: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 274
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: LD_INT 250
24585: PPUSH
24586: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 274
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: LD_INT 200
24605: PPUSH
24606: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_EXP 66
24619: PPUSH
24620: CALL_OW 308
24624: IFFALSE 24648
// begin ruBase := b ;
24626: LD_ADDR_EXP 68
24630: PUSH
24631: LD_VAR 0 1
24635: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24636: LD_VAR 0 1
24640: PPUSH
24641: LD_STRING chuikov
24643: PPUSH
24644: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 67
24657: PPUSH
24658: CALL_OW 308
24662: IFFALSE 24674
// begin ruBase2 := b ;
24664: LD_ADDR_EXP 69
24668: PUSH
24669: LD_VAR 0 1
24673: ST_TO_ADDR
// end ; end ; end ; end ;
24674: PPOPN 3
24676: END
// on UpgradeComplete ( b ) do var side , type ;
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin side := GetSide ( b ) ;
24681: LD_ADDR_VAR 0 2
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: ST_TO_ADDR
// type := GetBType ( b ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: ST_TO_ADDR
// if side = 3 then
24711: LD_VAR 0 2
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 24773
// if type = b_lab_half then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 7
24728: EQUAL
24729: IFFALSE 24773
// if IsInArea ( b , ruBaseArea ) then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 66
24740: PPUSH
24741: CALL_OW 308
24745: IFFALSE 24761
// ComUpgradeLab ( b , b_lab_spacetime ) else
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_INT 14
24754: PPUSH
24755: CALL_OW 147
24759: GO 24773
// ComUpgradeLab ( b , b_lab_siberium ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: LD_INT 11
24768: PPUSH
24769: CALL_OW 147
// end ;
24773: PPOPN 3
24775: END
// on ResearchComplete ( tech , lab ) do var side ;
24776: LD_INT 0
24778: PPUSH
// begin side := GetSide ( lab ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 255
24793: ST_TO_ADDR
// if side = 2 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24850
// begin arTech := Delete ( arTech , 1 ) ;
24804: LD_ADDR_EXP 52
24808: PUSH
24809: LD_EXP 52
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 3
24821: ST_TO_ADDR
// if tech = tech_sibPow then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 21
24829: EQUAL
24830: IFFALSE 24836
// DArabTrait1 ;
24832: CALL 29043 0 0
// if tech = tech_sibEng then
24836: LD_VAR 0 1
24840: PUSH
24841: LD_INT 22
24843: EQUAL
24844: IFFALSE 24850
// DArabTrait2 ;
24846: CALL 29374 0 0
// end ; end ;
24850: PPOPN 3
24852: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL 49888 0 1
// end ;
24862: PPOPN 1
24864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 1
24872: EQUAL
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 81
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: AND
24899: IFFALSE 24905
// DAttackOnAlly ;
24901: CALL 26759 0 0
// end ;
24905: PPOPN 2
24907: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 101
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24928
24921: POP
// ArabAttack ; ERussianBaseC :
24922: CALL 7224 0 0
24926: GO 25080
24928: LD_INT 102
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24957
24936: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24937: LD_EXP 59
24941: PUSH
24942: LD_EXP 61
24946: UNION
24947: PPUSH
24948: LD_INT 1
24950: PPUSH
24951: CALL 10861 0 2
24955: GO 25080
24957: LD_INT 103
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24986
24965: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24966: LD_EXP 59
24970: PUSH
24971: LD_EXP 61
24975: UNION
24976: PPUSH
24977: LD_INT 2
24979: PPUSH
24980: CALL 10861 0 2
24984: GO 25080
24986: LD_INT 104
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25015
24994: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24995: LD_EXP 59
24999: PUSH
25000: LD_EXP 61
25004: UNION
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL 10861 0 2
25013: GO 25080
25015: LD_INT 105
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25044
25023: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25024: LD_EXP 60
25028: PUSH
25029: LD_EXP 62
25033: UNION
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL 12370 0 2
25042: GO 25080
25044: LD_INT 106
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25059
25052: POP
// RussianExtraAttack ; ESendRussianAttack :
25053: CALL 20205 0 0
25057: GO 25080
25059: LD_INT 107
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25079
25067: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25068: LD_EXP 18
25072: PPUSH
25073: CALL 21299 0 1
25077: GO 25080
25079: POP
// end ; end_of_file
25080: PPOPN 1
25082: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_EXP 23
25102: PUSH
25103: LD_EXP 24
25107: PUSH
25108: LD_EXP 25
25112: PUSH
25113: LD_EXP 26
25117: PUSH
25118: LD_EXP 27
25122: PUSH
25123: LD_EXP 28
25127: PUSH
25128: LD_EXP 29
25132: PUSH
25133: LD_EXP 30
25137: PUSH
25138: LD_EXP 31
25142: PUSH
25143: LD_EXP 32
25147: PUSH
25148: LD_EXP 33
25152: PUSH
25153: LD_EXP 34
25157: PUSH
25158: LD_EXP 35
25162: PUSH
25163: LD_EXP 36
25167: PUSH
25168: LD_EXP 37
25172: PUSH
25173: LD_EXP 38
25177: PUSH
25178: LD_EXP 39
25182: PUSH
25183: LD_EXP 40
25187: PUSH
25188: LD_EXP 42
25192: PUSH
25193: LD_EXP 44
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: DIFF
25220: ST_TO_ADDR
// if not characters then
25221: LD_VAR 0 1
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25314
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_VAR 0 1
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL 56780 0 1
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25259: LD_VAR 0 6
25263: PPUSH
25264: CALL_OW 258
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25290
// Say ( speaker , dialogMID ) else
25274: LD_VAR 0 6
25278: PPUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 88
25288: GO 25304
// Say ( speaker , dialogFID ) ;
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 88
// result := speaker ;
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_VAR 0 6
25313: ST_TO_ADDR
// end ;
25314: LD_VAR 0 4
25318: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
25319: LD_INT 0
25321: PPUSH
25322: PPUSH
25323: PPUSH
// if btype = b_depot then
25324: LD_VAR 0 2
25328: PUSH
25329: LD_INT 0
25331: EQUAL
25332: IFFALSE 25344
// begin result := true ;
25334: LD_ADDR_VAR 0 3
25338: PUSH
25339: LD_INT 1
25341: ST_TO_ADDR
// exit ;
25342: GO 25460
// end ; pom := GetBase ( depot ) ;
25344: LD_ADDR_VAR 0 4
25348: PUSH
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 274
25358: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25359: LD_ADDR_VAR 0 5
25363: PUSH
25364: LD_VAR 0 2
25368: PPUSH
25369: LD_VAR 0 1
25373: PPUSH
25374: CALL_OW 248
25378: PPUSH
25379: CALL_OW 450
25383: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
25384: LD_ADDR_VAR 0 3
25388: PUSH
25389: LD_VAR 0 4
25393: PPUSH
25394: LD_INT 1
25396: PPUSH
25397: CALL_OW 275
25401: PUSH
25402: LD_VAR 0 5
25406: PUSH
25407: LD_INT 1
25409: ARRAY
25410: GREATEREQUAL
25411: PUSH
25412: LD_VAR 0 4
25416: PPUSH
25417: LD_INT 2
25419: PPUSH
25420: CALL_OW 275
25424: PUSH
25425: LD_VAR 0 5
25429: PUSH
25430: LD_INT 2
25432: ARRAY
25433: GREATEREQUAL
25434: AND
25435: PUSH
25436: LD_VAR 0 4
25440: PPUSH
25441: LD_INT 3
25443: PPUSH
25444: CALL_OW 275
25448: PUSH
25449: LD_VAR 0 5
25453: PUSH
25454: LD_INT 3
25456: ARRAY
25457: GREATEREQUAL
25458: AND
25459: ST_TO_ADDR
// end ; end_of_file
25460: LD_VAR 0 3
25464: RET
// export function Action ; begin
25465: LD_INT 0
25467: PPUSH
// InGameOn ;
25468: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25472: LD_INT 25
25474: PPUSH
25475: LD_INT 35
25477: PPUSH
25478: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25482: LD_INT 1
25484: PPUSH
25485: LD_INT 5
25487: PPUSH
25488: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25492: LD_INT 1
25494: PPUSH
25495: LD_INT 4
25497: PPUSH
25498: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25502: LD_INT 52
25504: PPUSH
25505: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25509: LD_EXP 33
25513: PPUSH
25514: CALL_OW 87
// wait ( 0 0$3 ) ;
25518: LD_INT 105
25520: PPUSH
25521: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25525: LD_EXP 23
25529: PPUSH
25530: CALL_OW 310
25534: PPUSH
25535: CALL_OW 85
// wait ( 0 0$1 ) ;
25539: LD_INT 35
25541: PPUSH
25542: CALL_OW 67
// if IsOk ( Gary ) then
25546: LD_EXP 32
25550: PPUSH
25551: CALL_OW 302
25555: IFFALSE 25593
// begin Say ( Gary , D2-Gary-1 ) ;
25557: LD_EXP 32
25561: PPUSH
25562: LD_STRING D2-Gary-1
25564: PPUSH
25565: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25569: LD_EXP 23
25573: PPUSH
25574: LD_STRING D2-JMM-1
25576: PPUSH
25577: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25581: LD_EXP 32
25585: PPUSH
25586: LD_STRING D2-Gary-2
25588: PPUSH
25589: CALL_OW 88
// end ; InGameOff ;
25593: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25597: LD_STRING M1
25599: PPUSH
25600: CALL_OW 337
// SaveForQuickRestart ;
25604: CALL_OW 22
// end ;
25608: LD_VAR 0 1
25612: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25613: LD_EXP 23
25617: PPUSH
25618: LD_EXP 33
25622: PPUSH
25623: CALL_OW 296
25627: PUSH
25628: LD_INT 15
25630: LESS
25631: IFFALSE 26591
25633: GO 25635
25635: DISABLE
25636: LD_INT 0
25638: PPUSH
25639: PPUSH
// begin wait ( 0 0$3 ) ;
25640: LD_INT 105
25642: PPUSH
25643: CALL_OW 67
// Video ( true ) ;
25647: LD_INT 1
25649: PPUSH
25650: CALL 92352 0 1
// ComExitVehicle ( JMM ) ;
25654: LD_EXP 23
25658: PPUSH
25659: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25663: LD_EXP 23
25667: PPUSH
25668: LD_EXP 33
25672: PPUSH
25673: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25677: LD_EXP 23
25681: PPUSH
25682: CALL_OW 87
// if Truman then
25686: LD_EXP 43
25690: IFFALSE 25827
// begin ComMoveUnit ( Truman , JMM ) ;
25692: LD_EXP 43
25696: PPUSH
25697: LD_EXP 23
25701: PPUSH
25702: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25706: LD_INT 35
25708: PPUSH
25709: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25713: LD_EXP 43
25717: PPUSH
25718: LD_EXP 23
25722: PPUSH
25723: CALL_OW 296
25727: PUSH
25728: LD_INT 6
25730: LESS
25731: IFFALSE 25706
// ComTurnUnit ( Truman , JMM ) ;
25733: LD_EXP 43
25737: PPUSH
25738: LD_EXP 23
25742: PPUSH
25743: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25747: LD_EXP 23
25751: PPUSH
25752: LD_EXP 43
25756: PPUSH
25757: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25761: LD_EXP 43
25765: PPUSH
25766: LD_STRING D2-Tru-1
25768: PPUSH
25769: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25773: LD_EXP 23
25777: PPUSH
25778: LD_STRING D2-JMM-Tru-1
25780: PPUSH
25781: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25785: LD_EXP 43
25789: PPUSH
25790: LD_STRING D2-Tru-2
25792: PPUSH
25793: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25797: LD_EXP 43
25801: PPUSH
25802: LD_INT 79
25804: PPUSH
25805: LD_INT 41
25807: PPUSH
25808: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25812: LD_EXP 43
25816: PPUSH
25817: LD_INT 17
25819: PPUSH
25820: LD_INT 31
25822: PPUSH
25823: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25827: LD_EXP 23
25831: PPUSH
25832: LD_EXP 33
25836: PPUSH
25837: CALL_OW 179
// p := 15 ;
25841: LD_ADDR_VAR 0 2
25845: PUSH
25846: LD_INT 15
25848: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25849: LD_INT 35
25851: PPUSH
25852: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25856: LD_EXP 33
25860: PUSH
25861: LD_EXP 35
25865: PUSH
25866: LD_EXP 34
25870: PUSH
25871: LD_EXP 36
25875: PUSH
25876: LD_EXP 30
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PPUSH
25888: LD_EXP 23
25892: PPUSH
25893: CALL_OW 112
// p := p - 1 ;
25897: LD_ADDR_VAR 0 2
25901: PUSH
25902: LD_VAR 0 2
25906: PUSH
25907: LD_INT 1
25909: MINUS
25910: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25911: LD_EXP 23
25915: PPUSH
25916: LD_EXP 33
25920: PPUSH
25921: CALL_OW 296
25925: PUSH
25926: LD_INT 5
25928: LESS
25929: PUSH
25930: LD_VAR 0 2
25934: PUSH
25935: LD_INT 0
25937: LESSEQUAL
25938: OR
25939: IFFALSE 25849
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25941: LD_EXP 33
25945: PUSH
25946: LD_EXP 35
25950: PUSH
25951: LD_EXP 34
25955: PUSH
25956: LD_EXP 36
25960: PUSH
25961: LD_EXP 30
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: PPUSH
25973: LD_EXP 23
25977: PPUSH
25978: CALL_OW 119
// if not IsInUnit ( JMM ) then
25982: LD_EXP 23
25986: PPUSH
25987: CALL_OW 310
25991: NOT
25992: IFFALSE 26008
// ComTurnUnit ( JMM , Simms ) ;
25994: LD_EXP 23
25998: PPUSH
25999: LD_EXP 33
26003: PPUSH
26004: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
26008: LD_EXP 33
26012: PUSH
26013: LD_EXP 35
26017: PUSH
26018: LD_EXP 34
26022: PUSH
26023: LD_EXP 36
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: PPUSH
26034: LD_EXP 23
26038: PPUSH
26039: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26043: LD_EXP 23
26047: PUSH
26048: LD_EXP 33
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PPUSH
26057: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26061: LD_EXP 33
26065: PPUSH
26066: LD_STRING D2a-Sim-1
26068: PPUSH
26069: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26073: LD_EXP 23
26077: PPUSH
26078: LD_STRING D2a-JMM-1
26080: PPUSH
26081: CALL_OW 88
// if IsOk ( Joan ) then
26085: LD_EXP 35
26089: PPUSH
26090: CALL_OW 302
26094: IFFALSE 26172
// begin if not IsInUnit ( JMM ) then
26096: LD_EXP 23
26100: PPUSH
26101: CALL_OW 310
26105: NOT
26106: IFFALSE 26122
// ComTurnUnit ( JMM , Joan ) ;
26108: LD_EXP 23
26112: PPUSH
26113: LD_EXP 35
26117: PPUSH
26118: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26122: LD_EXP 35
26126: PPUSH
26127: LD_EXP 23
26131: PPUSH
26132: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26136: LD_EXP 35
26140: PPUSH
26141: LD_STRING D2b-Joan-1
26143: PPUSH
26144: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26148: LD_EXP 23
26152: PPUSH
26153: LD_STRING D2b-JMM-1
26155: PPUSH
26156: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26160: LD_EXP 35
26164: PPUSH
26165: LD_STRING D2b-Joan-2
26167: PPUSH
26168: CALL_OW 88
// end ; if IsOk ( Denis ) then
26172: LD_EXP 34
26176: PPUSH
26177: CALL_OW 302
26181: IFFALSE 26235
// begin if not IsInUnit ( JMM ) then
26183: LD_EXP 23
26187: PPUSH
26188: CALL_OW 310
26192: NOT
26193: IFFALSE 26209
// ComTurnUnit ( JMM , Denis ) ;
26195: LD_EXP 23
26199: PPUSH
26200: LD_EXP 34
26204: PPUSH
26205: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26209: LD_EXP 34
26213: PPUSH
26214: LD_EXP 23
26218: PPUSH
26219: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26223: LD_EXP 34
26227: PPUSH
26228: LD_STRING D2c-Den-1
26230: PPUSH
26231: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26235: LD_EXP 30
26239: PPUSH
26240: CALL_OW 302
26244: PUSH
26245: LD_STRING 08_Kikuchi
26247: PPUSH
26248: CALL_OW 28
26252: NOT
26253: AND
26254: IFFALSE 26349
// begin repeat wait ( 0 0$1 ) ;
26256: LD_INT 35
26258: PPUSH
26259: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26263: LD_EXP 30
26267: PPUSH
26268: LD_EXP 23
26272: PPUSH
26273: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26277: LD_EXP 23
26281: PPUSH
26282: LD_EXP 30
26286: PPUSH
26287: CALL_OW 296
26291: PUSH
26292: LD_INT 5
26294: LESS
26295: IFFALSE 26256
// ComTurnUnit ( Kikuchi , JMM ) ;
26297: LD_EXP 30
26301: PPUSH
26302: LD_EXP 23
26306: PPUSH
26307: CALL_OW 119
// if not IsInUnit ( JMM ) then
26311: LD_EXP 23
26315: PPUSH
26316: CALL_OW 310
26320: NOT
26321: IFFALSE 26337
// ComTurnUnit ( JMM , Kikuchi ) ;
26323: LD_EXP 23
26327: PPUSH
26328: LD_EXP 30
26332: PPUSH
26333: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26337: LD_EXP 30
26341: PPUSH
26342: LD_STRING D3b-Yam-1
26344: PPUSH
26345: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26349: LD_EXP 36
26353: PPUSH
26354: CALL_OW 302
26358: IFFALSE 26424
// begin if not IsInUnit ( JMM ) then
26360: LD_EXP 23
26364: PPUSH
26365: CALL_OW 310
26369: NOT
26370: IFFALSE 26386
// ComTurnUnit ( JMM , Khatam ) ;
26372: LD_EXP 23
26376: PPUSH
26377: LD_EXP 36
26381: PPUSH
26382: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26386: LD_EXP 36
26390: PPUSH
26391: LD_EXP 23
26395: PPUSH
26396: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26400: LD_EXP 23
26404: PPUSH
26405: LD_STRING D2c-JMM-1
26407: PPUSH
26408: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26412: LD_EXP 36
26416: PPUSH
26417: LD_STRING D2c-Khat-1
26419: PPUSH
26420: CALL_OW 88
// end ; Video ( false ) ;
26424: LD_INT 0
26426: PPUSH
26427: CALL 92352 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26431: LD_INT 22
26433: PUSH
26434: LD_INT 4
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PPUSH
26441: CALL_OW 69
26445: PUSH
26446: LD_EXP 43
26450: DIFF
26451: PPUSH
26452: LD_INT 1
26454: PPUSH
26455: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26459: LD_STRING M1a
26461: PPUSH
26462: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26466: LD_INT 0
26468: PPUSH
26469: LD_INT 1
26471: PPUSH
26472: LD_INT 1
26474: PPUSH
26475: CALL_OW 324
// joinedToEpsilon := true ;
26479: LD_ADDR_EXP 7
26483: PUSH
26484: LD_INT 1
26486: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26487: LD_INT 1050
26489: PPUSH
26490: CALL_OW 67
// SpawnConvoy ;
26494: CALL 10397 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26498: LD_INT 25200
26500: PUSH
26501: LD_INT 2100
26503: PUSH
26504: LD_OWVAR 67
26508: MUL
26509: MINUS
26510: PPUSH
26511: CALL_OW 67
// firstAttack := true ;
26515: LD_ADDR_EXP 16
26519: PUSH
26520: LD_INT 1
26522: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26523: LD_INT 107
26525: PPUSH
26526: CALL_OW 427
// for i := 1 to Difficulty do
26530: LD_ADDR_VAR 0 1
26534: PUSH
26535: DOUBLE
26536: LD_INT 1
26538: DEC
26539: ST_TO_ADDR
26540: LD_OWVAR 67
26544: PUSH
26545: FOR_TO
26546: IFFALSE 26589
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26548: LD_INT 25200
26550: PUSH
26551: LD_INT 2100
26553: PUSH
26554: LD_OWVAR 67
26558: MUL
26559: MINUS
26560: PPUSH
26561: CALL_OW 67
// if not ruActiveAttacks then
26565: LD_EXP 22
26569: NOT
26570: IFFALSE 26580
// ruActiveAttacks := true ;
26572: LD_ADDR_EXP 22
26576: PUSH
26577: LD_INT 1
26579: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26580: LD_INT 107
26582: PPUSH
26583: CALL_OW 427
// end ;
26587: GO 26545
26589: POP
26590: POP
// end ;
26591: PPOPN 2
26593: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26594: LD_EXP 43
26598: PPUSH
26599: CALL_OW 302
26603: PUSH
26604: LD_EXP 7
26608: AND
26609: IFFALSE 26680
26611: GO 26613
26613: DISABLE
// begin enable ;
26614: ENABLE
// if not HasTask ( Truman ) then
26615: LD_EXP 43
26619: PPUSH
26620: CALL_OW 314
26624: NOT
26625: IFFALSE 26639
// ComMoveToArea ( Truman , removeArea ) ;
26627: LD_EXP 43
26631: PPUSH
26632: LD_INT 10
26634: PPUSH
26635: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26639: LD_EXP 43
26643: PPUSH
26644: LD_INT 17
26646: PPUSH
26647: LD_INT 32
26649: PPUSH
26650: CALL_OW 307
26654: PUSH
26655: LD_EXP 43
26659: PPUSH
26660: LD_INT 10
26662: PPUSH
26663: CALL_OW 308
26667: OR
26668: IFFALSE 26680
// begin RemoveUnit ( Truman ) ;
26670: LD_EXP 43
26674: PPUSH
26675: CALL_OW 64
// disable ;
26679: DISABLE
// end ; end ;
26680: END
// export function DTankTeleport ( x , y ) ; begin
26681: LD_INT 0
26683: PPUSH
// DialogueOn ;
26684: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26688: LD_VAR 0 1
26692: PPUSH
26693: LD_VAR 0 2
26697: PPUSH
26698: CALL_OW 86
// if IsOk ( Cyrus ) then
26702: LD_EXP 27
26706: PPUSH
26707: CALL_OW 302
26711: IFFALSE 26727
// Say ( Cyrus , D10-Cyrus-1 ) else
26713: LD_EXP 27
26717: PPUSH
26718: LD_STRING D10-Cyrus-1
26720: PPUSH
26721: CALL_OW 88
26725: GO 26750
// if IsOk ( JMM ) then
26727: LD_EXP 23
26731: PPUSH
26732: CALL_OW 302
26736: IFFALSE 26750
// Say ( JMM , D10-JMM-1 ) ;
26738: LD_EXP 23
26742: PPUSH
26743: LD_STRING D10-JMM-1
26745: PPUSH
26746: CALL_OW 88
// DialogueOff ;
26750: CALL_OW 7
// end ;
26754: LD_VAR 0 3
26758: RET
// export function DAttackOnAlly ; begin
26759: LD_INT 0
26761: PPUSH
// DialogueOn ;
26762: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26766: LD_INT 10
26768: PPUSH
26769: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26773: LD_EXP 44
26777: PPUSH
26778: LD_STRING D6b-Pow-1
26780: PPUSH
26781: CALL_OW 94
// YouLost ( Powell ) ;
26785: LD_STRING Powell
26787: PPUSH
26788: CALL_OW 104
// DialogueOff ;
26792: CALL_OW 7
// end ;
26796: LD_VAR 0 1
26800: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26801: LD_INT 5
26803: PPUSH
26804: LD_INT 22
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 21
26816: PUSH
26817: LD_INT 3
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PPUSH
26828: CALL_OW 70
26832: PUSH
26833: LD_INT 5
26835: PPUSH
26836: LD_INT 22
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 21
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PPUSH
26860: CALL_OW 70
26864: OR
26865: PUSH
26866: LD_INT 1
26868: PPUSH
26869: LD_INT 2
26871: PPUSH
26872: CALL_OW 81
26876: PUSH
26877: LD_INT 1
26879: EQUAL
26880: AND
26881: IFFALSE 27116
26883: GO 26885
26885: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26886: LD_INT 5
26888: PPUSH
26889: LD_INT 22
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 21
26901: PUSH
26902: LD_INT 3
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PPUSH
26913: CALL_OW 70
26917: PUSH
26918: LD_INT 5
26920: PPUSH
26921: LD_INT 22
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 21
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 70
26949: OR
26950: PUSH
26951: LD_INT 1
26953: PPUSH
26954: LD_INT 2
26956: PPUSH
26957: CALL_OW 81
26961: PUSH
26962: LD_INT 1
26964: EQUAL
26965: AND
26966: IFFALSE 26975
// Query ( QAttack ) ;
26968: LD_STRING QAttack
26970: PPUSH
26971: CALL_OW 97
// wait ( 0 0$20 ) ;
26975: LD_INT 700
26977: PPUSH
26978: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26982: LD_INT 350
26984: PPUSH
26985: CALL_OW 67
// if arabianAttack then
26989: LD_EXP 4
26993: IFFALSE 26997
// exit ;
26995: GO 27116
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26997: LD_INT 5
26999: PPUSH
27000: LD_INT 22
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 21
27012: PUSH
27013: LD_INT 3
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 70
27028: PUSH
27029: LD_INT 5
27031: PPUSH
27032: LD_INT 22
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 21
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PPUSH
27056: CALL_OW 70
27060: OR
27061: PUSH
27062: LD_INT 1
27064: PPUSH
27065: LD_INT 2
27067: PPUSH
27068: CALL_OW 81
27072: PUSH
27073: LD_INT 1
27075: EQUAL
27076: AND
27077: IFFALSE 26982
// InGameOn ;
27079: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27083: LD_INT 73
27085: PPUSH
27086: LD_INT 18
27088: PPUSH
27089: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27093: LD_EXP 44
27097: PPUSH
27098: LD_STRING D6b-Pow-1
27100: PPUSH
27101: CALL_OW 94
// YouLost ( Powell ) ;
27105: LD_STRING Powell
27107: PPUSH
27108: CALL_OW 104
// InGameOff ;
27112: CALL_OW 9
// end ;
27116: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27117: LD_INT 12
27119: PPUSH
27120: LD_INT 1
27122: PPUSH
27123: CALL_OW 321
27127: PUSH
27128: LD_INT 2
27130: EQUAL
27131: IFFALSE 27143
27133: GO 27135
27135: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27136: LD_STRING M2b
27138: PPUSH
27139: CALL_OW 337
27143: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27144: LD_INT 32
27146: PPUSH
27147: LD_INT 1
27149: PPUSH
27150: CALL_OW 321
27154: PUSH
27155: LD_INT 2
27157: EQUAL
27158: IFFALSE 27170
27160: GO 27162
27162: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27163: LD_STRING M2c
27165: PPUSH
27166: CALL_OW 337
27170: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27171: LD_EXP 4
27175: PUSH
27176: LD_EXP 12
27180: AND
27181: PUSH
27182: LD_INT 22
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 21
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PPUSH
27206: CALL_OW 69
27210: PUSH
27211: LD_INT 0
27213: EQUAL
27214: AND
27215: PUSH
27216: LD_EXP 58
27220: PPUSH
27221: LD_INT 50
27223: PUSH
27224: EMPTY
27225: LIST
27226: PPUSH
27227: CALL_OW 72
27231: PUSH
27232: LD_INT 0
27234: EQUAL
27235: AND
27236: PUSH
27237: LD_EXP 57
27241: PPUSH
27242: LD_INT 50
27244: PUSH
27245: EMPTY
27246: LIST
27247: PPUSH
27248: CALL_OW 72
27252: PUSH
27253: LD_INT 0
27255: EQUAL
27256: AND
27257: IFFALSE 27277
27259: GO 27261
27261: DISABLE
// begin arabianDefeated := true ;
27262: LD_ADDR_EXP 8
27266: PUSH
27267: LD_INT 1
27269: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27270: LD_STRING M4a
27272: PPUSH
27273: CALL_OW 337
// end ;
27277: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27278: LD_INT 54
27280: PPUSH
27281: LD_INT 1
27283: PPUSH
27284: CALL_OW 321
27288: PUSH
27289: LD_INT 2
27291: EQUAL
27292: PUSH
27293: LD_INT 55
27295: PPUSH
27296: LD_INT 1
27298: PPUSH
27299: CALL_OW 321
27303: PUSH
27304: LD_INT 2
27306: EQUAL
27307: AND
27308: PUSH
27309: LD_INT 21
27311: PPUSH
27312: LD_INT 1
27314: PPUSH
27315: CALL_OW 321
27319: PUSH
27320: LD_INT 2
27322: EQUAL
27323: AND
27324: PUSH
27325: LD_INT 22
27327: PPUSH
27328: LD_INT 1
27330: PPUSH
27331: CALL_OW 321
27335: PUSH
27336: LD_INT 2
27338: EQUAL
27339: AND
27340: IFFALSE 27352
27342: GO 27344
27344: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27345: LD_STRING M2a
27347: PPUSH
27348: CALL_OW 337
27352: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27353: LD_INT 22
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 3
27365: PUSH
27366: LD_INT 57
27368: PUSH
27369: EMPTY
27370: LIST
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 63
27378: PUSH
27379: LD_INT 11
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 69
27395: IFFALSE 28621
27397: GO 27399
27399: DISABLE
27400: LD_INT 0
27402: PPUSH
27403: PPUSH
27404: PPUSH
27405: PPUSH
27406: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27407: LD_ADDR_VAR 0 1
27411: PUSH
27412: LD_EXP 32
27416: PPUSH
27417: CALL_OW 302
27421: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27422: LD_ADDR_VAR 0 2
27426: PUSH
27427: LD_EXP 39
27431: PPUSH
27432: CALL_OW 302
27436: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27437: LD_ADDR_VAR 0 3
27441: PUSH
27442: LD_INT 22
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 50
27454: PUSH
27455: EMPTY
27456: LIST
27457: PUSH
27458: LD_INT 25
27460: PUSH
27461: LD_INT 4
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 26
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: PPUSH
27484: CALL_OW 69
27488: PUSH
27489: LD_EXP 23
27493: PUSH
27494: LD_EXP 24
27498: PUSH
27499: LD_EXP 25
27503: PUSH
27504: LD_EXP 26
27508: PUSH
27509: LD_EXP 27
27513: PUSH
27514: LD_EXP 28
27518: PUSH
27519: LD_EXP 29
27523: PUSH
27524: LD_EXP 30
27528: PUSH
27529: LD_EXP 31
27533: PUSH
27534: LD_EXP 32
27538: PUSH
27539: LD_EXP 33
27543: PUSH
27544: LD_EXP 34
27548: PUSH
27549: LD_EXP 35
27553: PUSH
27554: LD_EXP 36
27558: PUSH
27559: LD_EXP 37
27563: PUSH
27564: LD_EXP 38
27568: PUSH
27569: LD_EXP 39
27573: PUSH
27574: LD_EXP 40
27578: PUSH
27579: LD_EXP 42
27583: PUSH
27584: LD_EXP 44
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: DIFF
27611: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27612: LD_ADDR_VAR 0 4
27616: PUSH
27617: LD_INT 22
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 50
27629: PUSH
27630: EMPTY
27631: LIST
27632: PUSH
27633: LD_INT 26
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: LD_INT 25
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 25
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 25
27668: PUSH
27669: LD_INT 3
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: PPUSH
27688: CALL_OW 69
27692: PUSH
27693: LD_EXP 23
27697: PUSH
27698: LD_EXP 24
27702: PUSH
27703: LD_EXP 25
27707: PUSH
27708: LD_EXP 26
27712: PUSH
27713: LD_EXP 27
27717: PUSH
27718: LD_EXP 28
27722: PUSH
27723: LD_EXP 29
27727: PUSH
27728: LD_EXP 30
27732: PUSH
27733: LD_EXP 31
27737: PUSH
27738: LD_EXP 32
27742: PUSH
27743: LD_EXP 33
27747: PUSH
27748: LD_EXP 34
27752: PUSH
27753: LD_EXP 35
27757: PUSH
27758: LD_EXP 36
27762: PUSH
27763: LD_EXP 37
27767: PUSH
27768: LD_EXP 38
27772: PUSH
27773: LD_EXP 39
27777: PUSH
27778: LD_EXP 40
27782: PUSH
27783: LD_EXP 42
27787: PUSH
27788: LD_EXP 44
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: DIFF
27815: ST_TO_ADDR
// if tmp1 then
27816: LD_VAR 0 3
27820: IFFALSE 27836
// tmp1 := tmp1 [ 1 ] ;
27822: LD_ADDR_VAR 0 3
27826: PUSH
27827: LD_VAR 0 3
27831: PUSH
27832: LD_INT 1
27834: ARRAY
27835: ST_TO_ADDR
// if tmp2 then
27836: LD_VAR 0 4
27840: IFFALSE 27856
// tmp2 := tmp2 [ 1 ] ;
27842: LD_ADDR_VAR 0 4
27846: PUSH
27847: LD_VAR 0 4
27851: PUSH
27852: LD_INT 1
27854: ARRAY
27855: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27856: LD_VAR 0 1
27860: PUSH
27861: LD_VAR 0 4
27865: OR
27866: PUSH
27867: LD_VAR 0 2
27871: PUSH
27872: LD_VAR 0 3
27876: OR
27877: AND
27878: IFFALSE 28072
// begin DialogueOn ;
27880: CALL_OW 6
// if deltaSpeaker then
27884: LD_VAR 0 2
27888: IFFALSE 27904
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27890: LD_EXP 39
27894: PPUSH
27895: LD_STRING D3-Sci1-1
27897: PPUSH
27898: CALL_OW 88
27902: GO 27916
// Say ( tmp1 , D3-Sci1-1 ) ;
27904: LD_VAR 0 3
27908: PPUSH
27909: LD_STRING D3-Sci1-1
27911: PPUSH
27912: CALL_OW 88
// if garySpeaker then
27916: LD_VAR 0 1
27920: IFFALSE 27936
// Say ( Gary , D3-Gary-1 ) else
27922: LD_EXP 32
27926: PPUSH
27927: LD_STRING D3-Gary-1
27929: PPUSH
27930: CALL_OW 88
27934: GO 27948
// Say ( tmp2 , D3-Gary-1 ) ;
27936: LD_VAR 0 4
27940: PPUSH
27941: LD_STRING D3-Gary-1
27943: PPUSH
27944: CALL_OW 88
// if deltaSpeaker then
27948: LD_VAR 0 2
27952: IFFALSE 27968
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27954: LD_EXP 39
27958: PPUSH
27959: LD_STRING D3-Sci1-2
27961: PPUSH
27962: CALL_OW 88
27966: GO 27980
// Say ( tmp1 , D3-Sci1-2 ) ;
27968: LD_VAR 0 3
27972: PPUSH
27973: LD_STRING D3-Sci1-2
27975: PPUSH
27976: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27980: LD_EXP 23
27984: PPUSH
27985: LD_STRING D3-JMM-2
27987: PPUSH
27988: CALL_OW 88
// if deltaSpeaker then
27992: LD_VAR 0 2
27996: IFFALSE 28012
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27998: LD_EXP 39
28002: PPUSH
28003: LD_STRING D3-Sci1-3
28005: PPUSH
28006: CALL_OW 88
28010: GO 28024
// Say ( tmp1 , D3-Sci1-3 ) ;
28012: LD_VAR 0 3
28016: PPUSH
28017: LD_STRING D3-Sci1-3
28019: PPUSH
28020: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28024: LD_EXP 23
28028: PPUSH
28029: LD_STRING D3-JMM-3
28031: PPUSH
28032: CALL_OW 88
// if deltaSpeaker then
28036: LD_VAR 0 2
28040: IFFALSE 28056
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28042: LD_EXP 39
28046: PPUSH
28047: LD_STRING D3-Sci1-4
28049: PPUSH
28050: CALL_OW 88
28054: GO 28068
// Say ( tmp1 , D3-Sci1-4 ) ;
28056: LD_VAR 0 3
28060: PPUSH
28061: LD_STRING D3-Sci1-4
28063: PPUSH
28064: CALL_OW 88
// DialogueOff ;
28068: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28072: LD_INT 12
28074: PPUSH
28075: LD_INT 1
28077: PPUSH
28078: LD_INT 1
28080: PPUSH
28081: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28085: LD_INT 40
28087: PPUSH
28088: LD_INT 1
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28098: LD_INT 32
28100: PPUSH
28101: LD_INT 1
28103: PPUSH
28104: LD_INT 1
28106: PPUSH
28107: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28111: LD_INT 33
28113: PPUSH
28114: LD_INT 1
28116: PPUSH
28117: LD_INT 1
28119: PPUSH
28120: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28124: LD_INT 12
28126: PPUSH
28127: LD_INT 1
28129: PPUSH
28130: LD_INT 1
28132: PPUSH
28133: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28137: LD_STRING M2
28139: PPUSH
28140: CALL_OW 337
// wait ( 3 3$0 ) ;
28144: LD_INT 6300
28146: PPUSH
28147: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28151: LD_INT 35
28153: PPUSH
28154: CALL_OW 67
// until not InBattle ( 1 ) ;
28158: LD_INT 1
28160: PPUSH
28161: CALL_OW 463
28165: NOT
28166: IFFALSE 28151
// if IsOk ( Simms ) and deltaSpeaker then
28168: LD_EXP 33
28172: PPUSH
28173: CALL_OW 302
28177: PUSH
28178: LD_VAR 0 2
28182: AND
28183: IFFALSE 28352
// begin DialogueOn ;
28185: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28189: LD_EXP 33
28193: PPUSH
28194: LD_STRING D3a-Sim-1
28196: PPUSH
28197: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28201: LD_EXP 39
28205: PPUSH
28206: LD_STRING D3a-Sci1-1
28208: PPUSH
28209: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28213: LD_EXP 33
28217: PPUSH
28218: LD_STRING D3a-Sim-2
28220: PPUSH
28221: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28225: LD_EXP 39
28229: PPUSH
28230: LD_STRING D3a-Sci1-2
28232: PPUSH
28233: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28237: LD_EXP 33
28241: PPUSH
28242: LD_STRING D3a-Sim-3
28244: PPUSH
28245: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28249: LD_EXP 39
28253: PPUSH
28254: LD_STRING D3a-Sci1-3
28256: PPUSH
28257: CALL_OW 88
// if IsOK ( Joan ) then
28261: LD_EXP 35
28265: PPUSH
28266: CALL_OW 302
28270: IFFALSE 28286
// Say ( Simms , D3a-Sim-4 ) else
28272: LD_EXP 33
28276: PPUSH
28277: LD_STRING D3a-Sim-4
28279: PPUSH
28280: CALL_OW 88
28284: GO 28298
// Say ( Simms , D3a-Sim-4a ) ;
28286: LD_EXP 33
28290: PPUSH
28291: LD_STRING D3a-Sim-4a
28293: PPUSH
28294: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28298: LD_EXP 39
28302: PPUSH
28303: LD_STRING D3a-Sci1-4
28305: PPUSH
28306: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28310: LD_EXP 33
28314: PPUSH
28315: LD_STRING D3a-Sim-5
28317: PPUSH
28318: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28322: LD_EXP 39
28326: PPUSH
28327: LD_STRING D3a-Sci1-5
28329: PPUSH
28330: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28334: LD_EXP 33
28338: PPUSH
28339: LD_STRING D3a-Sim-6
28341: PPUSH
28342: CALL_OW 88
// DialogueOff ;
28346: CALL_OW 7
// end else
28350: GO 28621
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28352: LD_ADDR_VAR 0 5
28356: PUSH
28357: LD_INT 22
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 26
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 25
28379: PUSH
28380: LD_INT 4
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: PPUSH
28392: CALL_OW 69
28396: PUSH
28397: LD_EXP 23
28401: PUSH
28402: LD_EXP 29
28406: PUSH
28407: LD_EXP 28
28411: PUSH
28412: LD_EXP 33
28416: PUSH
28417: LD_EXP 36
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: DIFF
28429: ST_TO_ADDR
// if tmp3 then
28430: LD_VAR 0 5
28434: IFFALSE 28621
// begin DialogueOn ;
28436: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28440: LD_EXP 33
28444: PPUSH
28445: LD_STRING D3a-Sim-1
28447: PPUSH
28448: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28452: LD_VAR 0 5
28456: PUSH
28457: LD_INT 1
28459: ARRAY
28460: PPUSH
28461: LD_STRING D3a-Sci1-1
28463: PPUSH
28464: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28468: LD_EXP 33
28472: PPUSH
28473: LD_STRING D3a-Sim-2
28475: PPUSH
28476: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28480: LD_VAR 0 5
28484: PUSH
28485: LD_INT 1
28487: ARRAY
28488: PPUSH
28489: LD_STRING D3a-Sci1-2
28491: PPUSH
28492: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28496: LD_EXP 33
28500: PPUSH
28501: LD_STRING D3a-Sim-3
28503: PPUSH
28504: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28508: LD_VAR 0 5
28512: PUSH
28513: LD_INT 1
28515: ARRAY
28516: PPUSH
28517: LD_STRING D3a-Sci1-3
28519: PPUSH
28520: CALL_OW 88
// if IsOK ( Joan ) then
28524: LD_EXP 35
28528: PPUSH
28529: CALL_OW 302
28533: IFFALSE 28549
// Say ( Simms , D3a-Sim-4 ) else
28535: LD_EXP 33
28539: PPUSH
28540: LD_STRING D3a-Sim-4
28542: PPUSH
28543: CALL_OW 88
28547: GO 28561
// Say ( Simms , D3a-Sim-4a ) ;
28549: LD_EXP 33
28553: PPUSH
28554: LD_STRING D3a-Sim-4a
28556: PPUSH
28557: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28561: LD_VAR 0 5
28565: PUSH
28566: LD_INT 1
28568: ARRAY
28569: PPUSH
28570: LD_STRING D3a-Sci1-4
28572: PPUSH
28573: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28577: LD_EXP 33
28581: PPUSH
28582: LD_STRING D3a-Sim-5
28584: PPUSH
28585: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28589: LD_VAR 0 5
28593: PUSH
28594: LD_INT 1
28596: ARRAY
28597: PPUSH
28598: LD_STRING D3a-Sci1-5
28600: PPUSH
28601: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28605: LD_EXP 33
28609: PPUSH
28610: LD_STRING D3a-Sim-6
28612: PPUSH
28613: CALL_OW 88
// DialogueOff ;
28617: CALL_OW 7
// end ; end ; end ;
28621: PPOPN 5
28623: END
// export function DRussianNextAttack ; begin
28624: LD_INT 0
28626: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28627: LD_EXP 40
28631: PPUSH
28632: LD_STRING D4-FSol1-2
28634: PPUSH
28635: CALL_OW 94
// end ;
28639: LD_VAR 0 1
28643: RET
// export function DRussianConvoy ; begin
28644: LD_INT 0
28646: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28647: LD_EXP 40
28651: PPUSH
28652: LD_STRING D4-FSol1-1
28654: PPUSH
28655: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28659: LD_STRING M3
28661: PPUSH
28662: CALL_OW 337
// end ;
28666: LD_VAR 0 1
28670: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28671: LD_INT 0
28673: PPUSH
// CenterNowOnUnits ( unit ) ;
28674: LD_VAR 0 1
28678: PPUSH
28679: CALL_OW 87
// DialogueOn ;
28683: CALL_OW 6
// if IsOK ( Cyrus ) then
28687: LD_EXP 27
28691: PPUSH
28692: CALL_OW 302
28696: IFFALSE 28712
// Say ( Cyrus , D9a-Cyrus-1 ) else
28698: LD_EXP 27
28702: PPUSH
28703: LD_STRING D9a-Cyrus-1
28705: PPUSH
28706: CALL_OW 88
28710: GO 28834
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28712: LD_INT 22
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 26
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: LD_INT 25
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 25
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 25
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 25
28767: PUSH
28768: LD_INT 4
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 25
28777: PUSH
28778: LD_INT 5
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: PPUSH
28798: CALL_OW 69
28802: PUSH
28803: LD_EXP 23
28807: PUSH
28808: LD_EXP 36
28812: PUSH
28813: LD_EXP 27
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: DIFF
28823: PPUSH
28824: LD_STRING D9a-Sol1-1
28826: PPUSH
28827: LD_STRING D9a-Sol1-1
28829: PPUSH
28830: CALL 25083 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28834: LD_INT 22
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 26
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 2
28856: PUSH
28857: LD_INT 25
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 25
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 25
28879: PUSH
28880: LD_INT 3
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 25
28889: PUSH
28890: LD_INT 4
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 25
28899: PUSH
28900: LD_INT 5
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: PPUSH
28920: CALL_OW 69
28924: PUSH
28925: LD_EXP 23
28929: PUSH
28930: LD_EXP 36
28934: PUSH
28935: LD_EXP 27
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: LIST
28944: DIFF
28945: PPUSH
28946: LD_STRING D9b-Sol1-1
28948: PPUSH
28949: LD_STRING D9b-Sol1-1
28951: PPUSH
28952: CALL 25083 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28956: LD_STRING 09_arInfo
28958: PPUSH
28959: LD_INT 0
28961: PPUSH
28962: CALL_OW 30
28966: IFFALSE 28980
// Say ( JMM , D9a-JMM-1 ) ;
28968: LD_EXP 23
28972: PPUSH
28973: LD_STRING D9a-JMM-1
28975: PPUSH
28976: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28980: LD_EXP 23
28984: PPUSH
28985: LD_STRING D9c-JMM-1
28987: PPUSH
28988: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28992: LD_INT 22
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 25
29004: PUSH
29005: LD_INT 5
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PPUSH
29016: CALL_OW 69
29020: IFFALSE 29034
// Say ( JMM , D9c-JMM-1a ) ;
29022: LD_EXP 23
29026: PPUSH
29027: LD_STRING D9c-JMM-1a
29029: PPUSH
29030: CALL_OW 88
// DialogueOff ;
29034: CALL_OW 7
// end ;
29038: LD_VAR 0 2
29042: RET
// export function DArabTrait1 ; var tmp ; begin
29043: LD_INT 0
29045: PPUSH
29046: PPUSH
// if IsOk ( DeltaDoctor ) then
29047: LD_EXP 39
29051: PPUSH
29052: CALL_OW 302
29056: IFFALSE 29070
// tmp := DeltaDoctor else
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_EXP 39
29067: ST_TO_ADDR
29068: GO 29268
// if IsOk ( Denis ) then
29070: LD_EXP 34
29074: PPUSH
29075: CALL_OW 302
29079: IFFALSE 29093
// tmp := Denis else
29081: LD_ADDR_VAR 0 2
29085: PUSH
29086: LD_EXP 34
29090: ST_TO_ADDR
29091: GO 29268
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29093: LD_ADDR_VAR 0 2
29097: PUSH
29098: LD_INT 22
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 50
29110: PUSH
29111: EMPTY
29112: LIST
29113: PUSH
29114: LD_INT 25
29116: PUSH
29117: LD_INT 4
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 26
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: PPUSH
29140: CALL_OW 69
29144: PUSH
29145: LD_EXP 23
29149: PUSH
29150: LD_EXP 24
29154: PUSH
29155: LD_EXP 25
29159: PUSH
29160: LD_EXP 26
29164: PUSH
29165: LD_EXP 27
29169: PUSH
29170: LD_EXP 28
29174: PUSH
29175: LD_EXP 29
29179: PUSH
29180: LD_EXP 30
29184: PUSH
29185: LD_EXP 31
29189: PUSH
29190: LD_EXP 32
29194: PUSH
29195: LD_EXP 33
29199: PUSH
29200: LD_EXP 34
29204: PUSH
29205: LD_EXP 35
29209: PUSH
29210: LD_EXP 36
29214: PUSH
29215: LD_EXP 37
29219: PUSH
29220: LD_EXP 38
29224: PUSH
29225: LD_EXP 39
29229: PUSH
29230: LD_EXP 40
29234: PUSH
29235: LD_EXP 42
29239: PUSH
29240: LD_EXP 44
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: DIFF
29267: ST_TO_ADDR
// if not tmp then
29268: LD_VAR 0 2
29272: NOT
29273: IFFALSE 29277
// exit ;
29275: GO 29369
// DialogueOn ;
29277: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29281: LD_EXP 23
29285: PPUSH
29286: LD_STRING D6-JMM-1
29288: PPUSH
29289: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29293: LD_VAR 0 2
29297: PPUSH
29298: LD_STRING D6-Sci1-1
29300: PPUSH
29301: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29305: LD_EXP 23
29309: PPUSH
29310: LD_STRING D6-JMM-2
29312: PPUSH
29313: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29317: LD_VAR 0 2
29321: PPUSH
29322: LD_STRING D6-Sci1-2
29324: PPUSH
29325: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29329: LD_EXP 23
29333: PPUSH
29334: LD_STRING D6-JMM-3
29336: PPUSH
29337: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29341: LD_VAR 0 2
29345: PPUSH
29346: LD_STRING D6-Sci1-3
29348: PPUSH
29349: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29353: LD_EXP 23
29357: PPUSH
29358: LD_STRING D6-JMM-4
29360: PPUSH
29361: CALL_OW 88
// DialogueOff ;
29365: CALL_OW 7
// end ;
29369: LD_VAR 0 1
29373: RET
// export function DArabTrait2 ; begin
29374: LD_INT 0
29376: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29377: LD_EXP 36
29381: PPUSH
29382: CALL_OW 305
29386: NOT
29387: PUSH
29388: LD_EXP 51
29392: PPUSH
29393: CALL_OW 302
29397: NOT
29398: OR
29399: PUSH
29400: LD_EXP 50
29404: PPUSH
29405: CALL_OW 302
29409: NOT
29410: OR
29411: IFFALSE 29415
// exit ;
29413: GO 29471
// DialogueOn ;
29415: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29419: LD_EXP 51
29423: PPUSH
29424: LD_STRING D5-Ar1-1
29426: PPUSH
29427: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29431: LD_EXP 50
29435: PPUSH
29436: LD_STRING D5-Diet-1
29438: PPUSH
29439: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29443: LD_EXP 51
29447: PPUSH
29448: LD_STRING D5-Ar1-2
29450: PPUSH
29451: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29455: LD_EXP 50
29459: PPUSH
29460: LD_STRING D5-Diet-2
29462: PPUSH
29463: CALL_OW 88
// DialogueOff ;
29467: CALL_OW 7
// end ;
29471: LD_VAR 0 1
29475: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29476: LD_EXP 4
29480: IFFALSE 31193
29482: GO 29484
29484: DISABLE
29485: LD_INT 0
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
29493: PPUSH
29494: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29495: LD_INT 2
29497: PPUSH
29498: LD_INT 3
29500: PPUSH
29501: LD_INT 1
29503: PPUSH
29504: LD_INT 1
29506: PPUSH
29507: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29511: LD_INT 2
29513: PPUSH
29514: LD_INT 6
29516: PPUSH
29517: LD_INT 1
29519: PPUSH
29520: LD_INT 1
29522: PPUSH
29523: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29527: LD_ADDR_VAR 0 5
29531: PUSH
29532: LD_INT 22
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: LD_INT 25
29547: PUSH
29548: LD_INT 4
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 25
29557: PUSH
29558: LD_INT 2
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 25
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PPUSH
29585: CALL_OW 69
29589: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: LD_INT 22
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 25
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 25
29630: PUSH
29631: LD_INT 8
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 25
29640: PUSH
29641: LD_INT 15
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: PPUSH
29659: CALL_OW 69
29663: PUSH
29664: LD_EXP 50
29668: DIFF
29669: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29670: LD_ADDR_VAR 0 6
29674: PUSH
29675: LD_INT 22
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 30
29687: PUSH
29688: LD_INT 5
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PPUSH
29699: CALL_OW 69
29703: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29704: LD_VAR 0 5
29708: PPUSH
29709: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29713: LD_VAR 0 4
29717: PPUSH
29718: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29722: LD_INT 101
29724: PPUSH
29725: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29729: LD_EXP 40
29733: PPUSH
29734: LD_STRING D4-FSol1-3
29736: PPUSH
29737: CALL_OW 94
// for i in arCivilian do
29741: LD_ADDR_VAR 0 1
29745: PUSH
29746: LD_VAR 0 5
29750: PUSH
29751: FOR_IN
29752: IFFALSE 29831
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29754: LD_VAR 0 1
29758: PPUSH
29759: LD_VAR 0 6
29763: PUSH
29764: LD_VAR 0 1
29768: PUSH
29769: LD_INT 2
29771: MOD
29772: PUSH
29773: LD_INT 1
29775: PLUS
29776: ARRAY
29777: PPUSH
29778: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29782: LD_VAR 0 1
29786: PPUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 8
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PPUSH
29800: LD_INT 2
29802: PPUSH
29803: CALL_OW 12
29807: ARRAY
29808: PPUSH
29809: CALL_OW 183
// AddComExitBuilding ( i ) ;
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29822: LD_INT 18
29824: PPUSH
29825: CALL_OW 67
// end ;
29829: GO 29751
29831: POP
29832: POP
// wait ( 0 0$5 ) ;
29833: LD_INT 175
29835: PPUSH
29836: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29840: LD_INT 76
29842: PPUSH
29843: LD_INT 19
29845: PPUSH
29846: CALL_OW 84
// DialogueOn ;
29850: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29854: LD_INT 22
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 26
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 2
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 25
29909: PUSH
29910: LD_INT 4
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 25
29919: PUSH
29920: LD_INT 5
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: PPUSH
29945: LD_STRING D8-Sol1-1
29947: PPUSH
29948: LD_STRING D8-Sol1-1
29950: PPUSH
29951: CALL 25083 0 3
// if IsOk ( DeltaDoctor ) then
29955: LD_EXP 39
29959: PPUSH
29960: CALL_OW 302
29964: IFFALSE 29980
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29966: LD_EXP 39
29970: PPUSH
29971: LD_STRING D8-Sci1-1
29973: PPUSH
29974: CALL_OW 88
29978: GO 30081
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29980: LD_INT 22
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 26
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 2
30002: PUSH
30003: LD_INT 25
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 25
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 25
30035: PUSH
30036: LD_INT 4
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 25
30045: PUSH
30046: LD_INT 5
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL_OW 69
30070: PPUSH
30071: LD_STRING D8-Sol1-1
30073: PPUSH
30074: LD_STRING D8-Sol1-1
30076: PPUSH
30077: CALL 25083 0 3
// Say ( JMM , D8-JMM-1 ) ;
30081: LD_EXP 23
30085: PPUSH
30086: LD_STRING D8-JMM-1
30088: PPUSH
30089: CALL_OW 88
// DialogueOff ;
30093: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30097: LD_INT 2
30099: PPUSH
30100: LD_INT 2
30102: PPUSH
30103: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30107: LD_INT 1
30109: PPUSH
30110: LD_INT 2
30112: PPUSH
30113: LD_INT 2
30115: PPUSH
30116: LD_INT 1
30118: PPUSH
30119: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30123: LD_INT 3
30125: PPUSH
30126: LD_INT 2
30128: PPUSH
30129: LD_INT 1
30131: PPUSH
30132: LD_INT 1
30134: PPUSH
30135: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
30139: LD_INT 6
30141: PPUSH
30142: LD_INT 2
30144: PPUSH
30145: LD_INT 1
30147: PPUSH
30148: LD_INT 1
30150: PPUSH
30151: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30155: LD_STRING M4
30157: PPUSH
30158: CALL_OW 337
// wait ( 0 0$1 ) ;
30162: LD_INT 35
30164: PPUSH
30165: CALL_OW 67
// if IsLive ( Khatam ) then
30169: LD_EXP 36
30173: PPUSH
30174: CALL_OW 300
30178: IFFALSE 30192
// DoNotAttack ( 2 , Khatam ) ;
30180: LD_INT 2
30182: PPUSH
30183: LD_EXP 36
30187: PPUSH
30188: CALL_OW 471
// wait ( 0 0$1 ) ;
30192: LD_INT 35
30194: PPUSH
30195: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30199: LD_ADDR_VAR 0 7
30203: PUSH
30204: LD_INT 22
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 21
30216: PUSH
30217: LD_INT 3
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PPUSH
30228: CALL_OW 69
30232: PPUSH
30233: LD_VAR 0 4
30237: PUSH
30238: LD_INT 1
30240: ARRAY
30241: PPUSH
30242: CALL_OW 74
30246: ST_TO_ADDR
// for i := 1 to 3 do
30247: LD_ADDR_VAR 0 1
30251: PUSH
30252: DOUBLE
30253: LD_INT 1
30255: DEC
30256: ST_TO_ADDR
30257: LD_INT 3
30259: PUSH
30260: FOR_TO
30261: IFFALSE 30320
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30263: LD_VAR 0 4
30267: PPUSH
30268: LD_INT 25
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL_OW 72
30282: PUSH
30283: LD_VAR 0 1
30287: ARRAY
30288: PPUSH
30289: LD_VAR 0 7
30293: PPUSH
30294: CALL_OW 250
30298: PPUSH
30299: LD_VAR 0 7
30303: PPUSH
30304: CALL_OW 251
30308: PPUSH
30309: LD_VAR 0 7
30313: PPUSH
30314: CALL_OW 192
30318: GO 30260
30320: POP
30321: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30322: LD_VAR 0 4
30326: PPUSH
30327: LD_INT 84
30329: PPUSH
30330: LD_INT 22
30332: PPUSH
30333: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30337: LD_VAR 0 4
30341: PPUSH
30342: LD_INT 95
30344: PPUSH
30345: LD_INT 12
30347: PPUSH
30348: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30352: LD_VAR 0 4
30356: PPUSH
30357: LD_INT 102
30359: PPUSH
30360: LD_INT 11
30362: PPUSH
30363: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30367: LD_VAR 0 4
30371: PPUSH
30372: LD_INT 116
30374: PPUSH
30375: LD_INT 15
30377: PPUSH
30378: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30382: LD_VAR 0 4
30386: PPUSH
30387: LD_INT 140
30389: PPUSH
30390: LD_INT 25
30392: PPUSH
30393: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30397: LD_ADDR_VAR 0 4
30401: PUSH
30402: LD_INT 22
30404: PUSH
30405: LD_INT 2
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 21
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: PUSH
30425: LD_INT 25
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 25
30437: PUSH
30438: LD_INT 8
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 25
30447: PUSH
30448: LD_INT 15
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: PPUSH
30466: CALL_OW 69
30470: PUSH
30471: LD_EXP 50
30475: DIFF
30476: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30477: LD_ADDR_VAR 0 5
30481: PUSH
30482: LD_INT 22
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 21
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 25
30507: PUSH
30508: LD_INT 2
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 25
30517: PUSH
30518: LD_INT 3
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 25
30527: PUSH
30528: LD_INT 4
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 25
30537: PUSH
30538: LD_INT 12
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 25
30547: PUSH
30548: LD_INT 16
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: PPUSH
30568: CALL_OW 69
30572: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30573: LD_ADDR_VAR 0 5
30577: PUSH
30578: LD_VAR 0 5
30582: PUSH
30583: LD_EXP 50
30587: ADD
30588: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30589: LD_VAR 0 5
30593: PPUSH
30594: LD_INT 81
30596: PPUSH
30597: LD_INT 12
30599: PPUSH
30600: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30604: LD_VAR 0 5
30608: PPUSH
30609: LD_INT 88
30611: PPUSH
30612: LD_INT 8
30614: PPUSH
30615: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30619: LD_VAR 0 5
30623: PPUSH
30624: LD_INT 102
30626: PPUSH
30627: LD_INT 10
30629: PPUSH
30630: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30634: LD_VAR 0 5
30638: PPUSH
30639: LD_INT 116
30641: PPUSH
30642: LD_INT 15
30644: PPUSH
30645: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30649: LD_VAR 0 5
30653: PPUSH
30654: LD_INT 140
30656: PPUSH
30657: LD_INT 25
30659: PPUSH
30660: CALL_OW 171
// wait ( 3 ) ;
30664: LD_INT 3
30666: PPUSH
30667: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30671: LD_ADDR_EXP 56
30675: PUSH
30676: LD_VAR 0 5
30680: PUSH
30681: LD_VAR 0 4
30685: UNION
30686: ST_TO_ADDR
// if IsOk ( Gary ) then
30687: LD_EXP 32
30691: PPUSH
30692: CALL_OW 302
30696: IFFALSE 30710
// Say ( Gary , D8a-Gary-1 ) ;
30698: LD_EXP 32
30702: PPUSH
30703: LD_STRING D8a-Gary-1
30705: PPUSH
30706: CALL_OW 88
// wait ( 0 0$5 ) ;
30710: LD_INT 175
30712: PPUSH
30713: CALL_OW 67
// if IsOK ( Khatam ) then
30717: LD_EXP 36
30721: PPUSH
30722: CALL_OW 302
30726: IFFALSE 31193
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30728: LD_ADDR_VAR 0 2
30732: PUSH
30733: LD_INT 22
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 2
30745: PUSH
30746: LD_INT 25
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 25
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 25
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 25
30778: PUSH
30779: LD_INT 4
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 25
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 25
30798: PUSH
30799: LD_INT 8
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PPUSH
30819: CALL_OW 69
30823: PUSH
30824: LD_EXP 23
30828: PUSH
30829: LD_EXP 24
30833: PUSH
30834: LD_EXP 25
30838: PUSH
30839: LD_EXP 26
30843: PUSH
30844: LD_EXP 27
30848: PUSH
30849: LD_EXP 28
30853: PUSH
30854: LD_EXP 29
30858: PUSH
30859: LD_EXP 30
30863: PUSH
30864: LD_EXP 31
30868: PUSH
30869: LD_EXP 32
30873: PUSH
30874: LD_EXP 33
30878: PUSH
30879: LD_EXP 34
30883: PUSH
30884: LD_EXP 35
30888: PUSH
30889: LD_EXP 36
30893: PUSH
30894: LD_EXP 37
30898: PUSH
30899: LD_EXP 38
30903: PUSH
30904: LD_EXP 39
30908: PUSH
30909: LD_EXP 42
30913: PUSH
30914: LD_EXP 44
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: DIFF
30940: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30941: LD_EXP 36
30945: PPUSH
30946: LD_INT 8
30948: PPUSH
30949: CALL_OW 235
// ComExit ( Khatam ) ;
30953: LD_EXP 36
30957: PPUSH
30958: CALL 92778 0 1
// wait ( 0 0$1 ) ;
30962: LD_INT 35
30964: PPUSH
30965: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30969: LD_EXP 36
30973: PPUSH
30974: LD_INT 11
30976: PPUSH
30977: CALL_OW 113
// escapeKhatam := true ;
30981: LD_ADDR_EXP 11
30985: PUSH
30986: LD_INT 1
30988: ST_TO_ADDR
// if not tmp then
30989: LD_VAR 0 2
30993: NOT
30994: IFFALSE 30998
// exit ;
30996: GO 31193
// wait ( 0 0$2 ) ;
30998: LD_INT 70
31000: PPUSH
31001: CALL_OW 67
// DialogueOn ;
31005: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
31009: LD_ADDR_VAR 0 8
31013: PUSH
31014: LD_VAR 0 2
31018: PPUSH
31019: LD_STRING D8b-Sol1-1
31021: PPUSH
31022: LD_STRING D8b-FSol1-1
31024: PPUSH
31025: CALL 25083 0 3
31029: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
31030: LD_EXP 36
31034: PPUSH
31035: LD_STRING D8b-Khat-1
31037: PPUSH
31038: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31042: LD_VAR 0 8
31046: PPUSH
31047: CALL_OW 258
31051: PUSH
31052: LD_INT 1
31054: EQUAL
31055: IFFALSE 31071
// Say ( speaker , D8b-Sol1-2 ) else
31057: LD_VAR 0 8
31061: PPUSH
31062: LD_STRING D8b-Sol1-2
31064: PPUSH
31065: CALL_OW 88
31069: GO 31083
// Say ( speaker , D8b-FSol1-2 ) ;
31071: LD_VAR 0 8
31075: PPUSH
31076: LD_STRING D8b-FSol1-2
31078: PPUSH
31079: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31083: LD_EXP 36
31087: PPUSH
31088: LD_STRING D8b-Khat-2
31090: PPUSH
31091: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31095: LD_VAR 0 8
31099: PPUSH
31100: CALL_OW 258
31104: PUSH
31105: LD_INT 1
31107: EQUAL
31108: IFFALSE 31124
// Say ( speaker , D8b-Sol1-3 ) else
31110: LD_VAR 0 8
31114: PPUSH
31115: LD_STRING D8b-Sol1-3
31117: PPUSH
31118: CALL_OW 88
31122: GO 31136
// Say ( speaker , D8b-FSol1-3 ) ;
31124: LD_VAR 0 8
31128: PPUSH
31129: LD_STRING D8b-FSol1-3
31131: PPUSH
31132: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31136: LD_EXP 36
31140: PPUSH
31141: LD_STRING D8b-Khat-3
31143: PPUSH
31144: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31148: LD_VAR 0 8
31152: PPUSH
31153: CALL_OW 258
31157: PUSH
31158: LD_INT 1
31160: EQUAL
31161: IFFALSE 31177
// Say ( speaker , D8b-Sol1-4 ) else
31163: LD_VAR 0 8
31167: PPUSH
31168: LD_STRING D8b-Sol1-4
31170: PPUSH
31171: CALL_OW 88
31175: GO 31189
// Say ( speaker , D8b-FSol1-4 ) ;
31177: LD_VAR 0 8
31181: PPUSH
31182: LD_STRING D8b-FSol1-4
31184: PPUSH
31185: CALL_OW 88
// DialogueOff ;
31189: CALL_OW 7
// end ; end ;
31193: PPOPN 8
31195: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31196: LD_EXP 11
31200: PUSH
31201: LD_EXP 36
31205: PPUSH
31206: CALL_OW 302
31210: AND
31211: IFFALSE 31286
31213: GO 31215
31215: DISABLE
// begin enable ;
31216: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31217: LD_EXP 36
31221: PPUSH
31222: CALL_OW 302
31226: PUSH
31227: LD_EXP 36
31231: PPUSH
31232: CALL_OW 314
31236: NOT
31237: AND
31238: IFFALSE 31252
// ComMoveToArea ( Khatam , khatamArea ) ;
31240: LD_EXP 36
31244: PPUSH
31245: LD_INT 11
31247: PPUSH
31248: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31252: LD_EXP 36
31256: PPUSH
31257: LD_INT 11
31259: PPUSH
31260: CALL_OW 308
31264: IFFALSE 31286
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31266: LD_INT 1
31268: PPUSH
31269: LD_STRING 10_KhatamStatus_1
31271: PPUSH
31272: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31276: LD_EXP 36
31280: PPUSH
31281: CALL_OW 64
// disable ;
31285: DISABLE
// end ; end ;
31286: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31287: LD_EXP 7
31291: PUSH
31292: LD_STRING 02_mikhailStatus_1
31294: PPUSH
31295: LD_INT 0
31297: PPUSH
31298: CALL_OW 30
31302: AND
31303: PUSH
31304: LD_INT 22
31306: PUSH
31307: LD_INT 5
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 50
31316: PUSH
31317: EMPTY
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PPUSH
31324: CALL_OW 69
31328: PUSH
31329: LD_INT 0
31331: EQUAL
31332: AND
31333: PUSH
31334: LD_INT 22
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 50
31346: PUSH
31347: EMPTY
31348: LIST
31349: PUSH
31350: LD_INT 21
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: PPUSH
31365: CALL_OW 69
31369: PUSH
31370: LD_INT 0
31372: EQUAL
31373: PUSH
31374: LD_EXP 4
31378: NOT
31379: OR
31380: AND
31381: IFFALSE 31403
31383: GO 31385
31385: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31386: LD_INT 4200
31388: PUSH
31389: LD_OWVAR 67
31393: MUL
31394: PPUSH
31395: CALL_OW 67
// PrepareCornell ;
31399: CALL 3198 0 0
// end ;
31403: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31404: LD_INT 22
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PPUSH
31414: CALL_OW 69
31418: PPUSH
31419: LD_EXP 42
31423: PPUSH
31424: CALL_OW 74
31428: PPUSH
31429: LD_EXP 42
31433: PPUSH
31434: CALL_OW 296
31438: PUSH
31439: LD_INT 9
31441: LESS
31442: PUSH
31443: LD_EXP 42
31447: PPUSH
31448: CALL_OW 302
31452: AND
31453: IFFALSE 31897
31455: GO 31457
31457: DISABLE
// begin InGameOn ;
31458: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31462: LD_EXP 42
31466: PPUSH
31467: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31471: LD_EXP 42
31475: PPUSH
31476: LD_STRING D7-Corn-1
31478: PPUSH
31479: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31483: LD_INT 22
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 25
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 25
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 25
31518: PUSH
31519: LD_INT 3
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 25
31528: PUSH
31529: LD_INT 4
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 25
31538: PUSH
31539: LD_INT 5
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PPUSH
31558: CALL_OW 69
31562: PPUSH
31563: LD_STRING D7-Sol1-1
31565: PPUSH
31566: LD_STRING D7-FSol1-1
31568: PPUSH
31569: CALL 25083 0 3
// CenterNowOnUnits ( Cornell ) ;
31573: LD_EXP 42
31577: PPUSH
31578: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31582: LD_EXP 42
31586: PPUSH
31587: LD_STRING D7-Corn-2
31589: PPUSH
31590: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31594: LD_EXP 23
31598: PPUSH
31599: LD_STRING D7-JMM-2
31601: PPUSH
31602: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31606: LD_EXP 42
31610: PPUSH
31611: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31615: LD_EXP 42
31619: PPUSH
31620: LD_STRING D7-Corn-3
31622: PPUSH
31623: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31627: LD_EXP 42
31631: PPUSH
31632: LD_INT 250
31634: PPUSH
31635: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31639: LD_EXP 42
31643: PPUSH
31644: LD_INT 1
31646: PPUSH
31647: CALL_OW 235
// wait ( 0 0$1 ) ;
31651: LD_INT 35
31653: PPUSH
31654: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31658: LD_EXP 23
31662: PPUSH
31663: LD_STRING D7-JMM-3
31665: PPUSH
31666: CALL_OW 88
// InGameOff ;
31670: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31674: LD_INT 35
31676: PPUSH
31677: CALL_OW 67
// if IsDead ( Cornell ) then
31681: LD_EXP 42
31685: PPUSH
31686: CALL_OW 301
31690: IFFALSE 31694
// exit ;
31692: GO 31897
// until GetLives ( Cornell ) > 350 ;
31694: LD_EXP 42
31698: PPUSH
31699: CALL_OW 256
31703: PUSH
31704: LD_INT 350
31706: GREATER
31707: IFFALSE 31674
// DialogueOn ;
31709: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31713: LD_EXP 23
31717: PPUSH
31718: LD_STRING D7a-JMM-1
31720: PPUSH
31721: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31725: LD_EXP 42
31729: PPUSH
31730: LD_STRING D7a-Corn-1
31732: PPUSH
31733: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31737: LD_EXP 23
31741: PPUSH
31742: LD_STRING D7a-JMM-2
31744: PPUSH
31745: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31749: LD_EXP 42
31753: PPUSH
31754: LD_STRING D7a-Corn-2
31756: PPUSH
31757: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31761: LD_EXP 23
31765: PPUSH
31766: LD_STRING D7a-JMM-3
31768: PPUSH
31769: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31773: LD_EXP 42
31777: PPUSH
31778: LD_STRING D7a-Corn-3
31780: PPUSH
31781: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31785: LD_EXP 23
31789: PPUSH
31790: LD_STRING D7a-JMM-4
31792: PPUSH
31793: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31797: LD_EXP 42
31801: PPUSH
31802: LD_STRING D7a-Corn-4
31804: PPUSH
31805: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31809: LD_EXP 23
31813: PPUSH
31814: LD_STRING D7a-JMM-5
31816: PPUSH
31817: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31821: LD_EXP 42
31825: PPUSH
31826: LD_STRING D7a-Corn-5
31828: PPUSH
31829: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31833: LD_EXP 23
31837: PPUSH
31838: LD_STRING D7a-JMM-6
31840: PPUSH
31841: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31845: LD_EXP 42
31849: PPUSH
31850: LD_STRING D7a-Corn-6
31852: PPUSH
31853: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31857: LD_EXP 23
31861: PPUSH
31862: LD_STRING D7a-JMM-7
31864: PPUSH
31865: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31869: LD_EXP 42
31873: PPUSH
31874: LD_STRING D7a-Corn-7
31876: PPUSH
31877: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31881: LD_EXP 23
31885: PPUSH
31886: LD_STRING D7a-JMM-8
31888: PPUSH
31889: CALL_OW 88
// DialogueOff ;
31893: CALL_OW 7
// end ;
31897: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31898: LD_INT 54
31900: PPUSH
31901: LD_INT 1
31903: PPUSH
31904: CALL_OW 321
31908: PUSH
31909: LD_INT 2
31911: EQUAL
31912: PUSH
31913: LD_INT 55
31915: PPUSH
31916: LD_INT 1
31918: PPUSH
31919: CALL_OW 321
31923: PUSH
31924: LD_INT 2
31926: EQUAL
31927: AND
31928: PUSH
31929: LD_INT 21
31931: PPUSH
31932: LD_INT 1
31934: PPUSH
31935: CALL_OW 321
31939: PUSH
31940: LD_INT 2
31942: EQUAL
31943: AND
31944: PUSH
31945: LD_INT 22
31947: PPUSH
31948: LD_INT 1
31950: PPUSH
31951: CALL_OW 321
31955: PUSH
31956: LD_INT 2
31958: EQUAL
31959: AND
31960: PUSH
31961: LD_INT 12
31963: PPUSH
31964: LD_INT 1
31966: PPUSH
31967: CALL_OW 321
31971: PUSH
31972: LD_INT 1
31974: EQUAL
31975: PUSH
31976: LD_INT 32
31978: PPUSH
31979: LD_INT 1
31981: PPUSH
31982: CALL_OW 321
31986: PUSH
31987: LD_INT 1
31989: EQUAL
31990: OR
31991: PUSH
31992: EMPTY
31993: LIST
31994: AND
31995: PUSH
31996: LD_EXP 8
32000: AND
32001: PUSH
32002: LD_INT 22
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 21
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PPUSH
32026: CALL_OW 69
32030: PUSH
32031: LD_INT 0
32033: EQUAL
32034: AND
32035: IFFALSE 32083
32037: GO 32039
32039: DISABLE
// begin case Query ( QEndMission ) of 1 :
32040: LD_STRING QEndMission
32042: PPUSH
32043: CALL_OW 97
32047: PUSH
32048: LD_INT 1
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32067
32056: POP
// end_the_mission_allowed = true ; 2 :
32057: LD_ADDR_OWVAR 57
32061: PUSH
32062: LD_INT 1
32064: ST_TO_ADDR
32065: GO 32083
32067: LD_INT 2
32069: DOUBLE
32070: EQUAL
32071: IFTRUE 32075
32073: GO 32082
32075: POP
// FinishMission ; end ;
32076: CALL 32129 0 0
32080: GO 32083
32082: POP
// end ;
32083: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32084: LD_INT 0
32086: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32087: LD_VAR 0 1
32091: PPUSH
32092: CALL_OW 300
32096: PUSH
32097: LD_VAR 0 1
32101: PUSH
32102: LD_EXP 45
32106: IN
32107: OR
32108: IFFALSE 32124
// SaveCharacters ( unit , id ) ;
32110: LD_VAR 0 1
32114: PPUSH
32115: LD_VAR 0 2
32119: PPUSH
32120: CALL_OW 38
// end ;
32124: LD_VAR 0 3
32128: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32129: LD_INT 0
32131: PPUSH
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
// if not hasSniper then
32136: LD_EXP 20
32140: NOT
32141: IFFALSE 32150
// SetAchievement ( ACH_SNIPER ) ;
32143: LD_STRING ACH_SNIPER
32145: PPUSH
32146: CALL_OW 543
// m1 := false ;
32150: LD_ADDR_VAR 0 2
32154: PUSH
32155: LD_INT 0
32157: ST_TO_ADDR
// m2 := false ;
32158: LD_ADDR_VAR 0 3
32162: PUSH
32163: LD_INT 0
32165: ST_TO_ADDR
// m3 := false ;
32166: LD_ADDR_VAR 0 4
32170: PUSH
32171: LD_INT 0
32173: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32174: LD_INT 12
32176: PPUSH
32177: LD_INT 1
32179: PPUSH
32180: CALL_OW 321
32184: PUSH
32185: LD_INT 2
32187: EQUAL
32188: IFFALSE 32210
// begin AddMedal ( sights , 1 ) ;
32190: LD_STRING sights
32192: PPUSH
32193: LD_INT 1
32195: PPUSH
32196: CALL_OW 101
// m1 := true ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_INT 1
32207: ST_TO_ADDR
// end else
32208: GO 32221
// AddMedal ( sights , - 1 ) ;
32210: LD_STRING sights
32212: PPUSH
32213: LD_INT 1
32215: NEG
32216: PPUSH
32217: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32221: LD_INT 32
32223: PPUSH
32224: LD_INT 1
32226: PPUSH
32227: CALL_OW 321
32231: PUSH
32232: LD_INT 2
32234: EQUAL
32235: IFFALSE 32257
// begin AddMedal ( computers , 1 ) ;
32237: LD_STRING computers
32239: PPUSH
32240: LD_INT 1
32242: PPUSH
32243: CALL_OW 101
// m2 := true ;
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_INT 1
32254: ST_TO_ADDR
// end else
32255: GO 32268
// AddMedal ( computers , - 1 ) ;
32257: LD_STRING computers
32259: PPUSH
32260: LD_INT 1
32262: NEG
32263: PPUSH
32264: CALL_OW 101
// if arabianEscapedCounter = 0 then
32268: LD_EXP 21
32272: PUSH
32273: LD_INT 0
32275: EQUAL
32276: IFFALSE 32308
// begin AddMedal ( renegades , 2 ) ;
32278: LD_STRING renegades
32280: PPUSH
32281: LD_INT 2
32283: PPUSH
32284: CALL_OW 101
// m3 := true ;
32288: LD_ADDR_VAR 0 4
32292: PUSH
32293: LD_INT 1
32295: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32296: LD_INT 0
32298: PPUSH
32299: LD_STRING 10_ScientistsEscape_1
32301: PPUSH
32302: CALL_OW 39
// end else
32306: GO 32319
// AddMedal ( renegades , - 1 ) ;
32308: LD_STRING renegades
32310: PPUSH
32311: LD_INT 1
32313: NEG
32314: PPUSH
32315: CALL_OW 101
// SaveEpsilonBase ;
32319: CALL 33161 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32323: LD_VAR 0 2
32327: PUSH
32328: LD_VAR 0 3
32332: AND
32333: PUSH
32334: LD_VAR 0 4
32338: AND
32339: PUSH
32340: LD_OWVAR 67
32344: PUSH
32345: LD_INT 3
32347: GREATEREQUAL
32348: AND
32349: IFFALSE 32361
// SetAchievementEX ( ACH_AMER , 10 ) ;
32351: LD_STRING ACH_AMER
32353: PPUSH
32354: LD_INT 10
32356: PPUSH
32357: CALL_OW 564
// if tick <= 40 40$00 then
32361: LD_OWVAR 1
32365: PUSH
32366: LD_INT 84000
32368: LESSEQUAL
32369: IFFALSE 32385
// begin wait ( 3 ) ;
32371: LD_INT 3
32373: PPUSH
32374: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32378: LD_STRING ACH_ASPEED_10
32380: PPUSH
32381: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32385: LD_STRING Main
32387: PPUSH
32388: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32392: LD_INT 22
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 23
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 21
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: LD_INT 25
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 25
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 25
32447: PUSH
32448: LD_INT 3
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 25
32457: PUSH
32458: LD_INT 4
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 25
32467: PUSH
32468: LD_INT 5
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 25
32477: PUSH
32478: LD_INT 8
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: PPUSH
32500: CALL_OW 69
32504: PPUSH
32505: CALL_OW 43
// prefix := 10c_ ;
32509: LD_ADDR_VAR 0 5
32513: PUSH
32514: LD_STRING 10c_
32516: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32517: LD_EXP 23
32521: PPUSH
32522: LD_VAR 0 5
32526: PUSH
32527: LD_STRING JMM
32529: STR
32530: PPUSH
32531: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32535: LD_EXP 24
32539: PPUSH
32540: LD_VAR 0 5
32544: PUSH
32545: LD_STRING Brown
32547: STR
32548: PPUSH
32549: CALL 32084 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32553: LD_EXP 25
32557: PPUSH
32558: LD_VAR 0 5
32562: PUSH
32563: LD_STRING Donaldson
32565: STR
32566: PPUSH
32567: CALL 32084 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32571: LD_EXP 26
32575: PPUSH
32576: LD_VAR 0 5
32580: PUSH
32581: LD_STRING Bobby
32583: STR
32584: PPUSH
32585: CALL 32084 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32589: LD_EXP 27
32593: PPUSH
32594: LD_VAR 0 5
32598: PUSH
32599: LD_STRING Cyrus
32601: STR
32602: PPUSH
32603: CALL 32084 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32607: LD_EXP 28
32611: PPUSH
32612: LD_VAR 0 5
32616: PUSH
32617: LD_STRING Lisa
32619: STR
32620: PPUSH
32621: CALL 32084 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32625: LD_EXP 29
32629: PPUSH
32630: LD_VAR 0 5
32634: PUSH
32635: LD_STRING Frank
32637: STR
32638: PPUSH
32639: CALL 32084 0 2
// if Kikuchi then
32643: LD_EXP 30
32647: IFFALSE 32674
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32649: LD_STRING enableBioCharacter(BIO_YAMO)
32651: PPUSH
32652: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32656: LD_EXP 30
32660: PPUSH
32661: LD_VAR 0 5
32665: PUSH
32666: LD_STRING Kikuchi
32668: STR
32669: PPUSH
32670: CALL 32084 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32674: LD_EXP 31
32678: PPUSH
32679: LD_VAR 0 5
32683: PUSH
32684: LD_STRING Houten
32686: STR
32687: PPUSH
32688: CALL 32084 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32692: LD_EXP 32
32696: PPUSH
32697: LD_VAR 0 5
32701: PUSH
32702: LD_STRING Gary
32704: STR
32705: PPUSH
32706: CALL 32084 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32710: LD_EXP 42
32714: PPUSH
32715: LD_VAR 0 5
32719: PUSH
32720: LD_STRING Cornell
32722: STR
32723: PPUSH
32724: CALL 32084 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32728: LD_EXP 33
32732: PPUSH
32733: LD_VAR 0 5
32737: PUSH
32738: LD_STRING Simms
32740: STR
32741: PPUSH
32742: CALL 32084 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32746: LD_EXP 34
32750: PPUSH
32751: LD_VAR 0 5
32755: PUSH
32756: LD_STRING Denis
32758: STR
32759: PPUSH
32760: CALL 32084 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32764: LD_EXP 35
32768: PPUSH
32769: LD_VAR 0 5
32773: PUSH
32774: LD_STRING Joan
32776: STR
32777: PPUSH
32778: CALL 32084 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32782: LD_EXP 37
32786: PPUSH
32787: LD_VAR 0 5
32791: PUSH
32792: LD_STRING Gladstone
32794: STR
32795: PPUSH
32796: CALL 32084 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32800: LD_EXP 39
32804: PPUSH
32805: LD_VAR 0 5
32809: PUSH
32810: LD_STRING DeltaDoctor
32812: STR
32813: PPUSH
32814: CALL 32084 0 2
// if IsLive ( Mike ) then
32818: LD_EXP 41
32822: PPUSH
32823: CALL_OW 300
32827: IFFALSE 32847
// SaveCharacters ( Mike , prefix & Mike ) ;
32829: LD_EXP 41
32833: PPUSH
32834: LD_VAR 0 5
32838: PUSH
32839: LD_STRING Mike
32841: STR
32842: PPUSH
32843: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32847: LD_EXP 46
32851: PPUSH
32852: LD_STRING 10c_lock
32854: PPUSH
32855: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32859: LD_INT 50
32861: PUSH
32862: EMPTY
32863: LIST
32864: PUSH
32865: LD_INT 22
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 21
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: LD_INT 25
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 25
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 25
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 25
32920: PUSH
32921: LD_INT 4
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 25
32930: PUSH
32931: LD_INT 5
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 25
32940: PUSH
32941: LD_INT 8
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: PPUSH
32963: CALL_OW 69
32967: PUSH
32968: LD_EXP 23
32972: PUSH
32973: LD_EXP 24
32977: PUSH
32978: LD_EXP 25
32982: PUSH
32983: LD_EXP 26
32987: PUSH
32988: LD_EXP 27
32992: PUSH
32993: LD_EXP 28
32997: PUSH
32998: LD_EXP 29
33002: PUSH
33003: LD_EXP 37
33007: PUSH
33008: LD_EXP 30
33012: PUSH
33013: LD_EXP 34
33017: PUSH
33018: LD_EXP 35
33022: PUSH
33023: LD_EXP 31
33027: PUSH
33028: LD_EXP 33
33032: PUSH
33033: LD_EXP 32
33037: PUSH
33038: LD_EXP 39
33042: PUSH
33043: LD_EXP 42
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: DIFF
33066: PPUSH
33067: LD_STRING 10_other_survivors
33069: PPUSH
33070: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
33074: LD_INT 50
33076: PUSH
33077: EMPTY
33078: LIST
33079: PUSH
33080: LD_INT 22
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 21
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 25
33105: PUSH
33106: LD_INT 16
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 25
33115: PUSH
33116: LD_INT 12
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: PPUSH
33134: CALL_OW 69
33138: PUSH
33139: LD_EXP 41
33143: DIFF
33144: PPUSH
33145: LD_STRING 10_ape
33147: PPUSH
33148: CALL_OW 38
// YouWin ;
33152: CALL_OW 103
// end ;
33156: LD_VAR 0 1
33160: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33161: LD_INT 0
33163: PPUSH
33164: PPUSH
33165: PPUSH
33166: PPUSH
// epsilonBase := [ ] ;
33167: LD_ADDR_VAR 0 2
33171: PUSH
33172: EMPTY
33173: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33174: LD_ADDR_VAR 0 3
33178: PUSH
33179: LD_INT 22
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 21
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 50
33201: PUSH
33202: EMPTY
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: PPUSH
33210: CALL_OW 69
33214: ST_TO_ADDR
// for i in buildings do
33215: LD_ADDR_VAR 0 4
33219: PUSH
33220: LD_VAR 0 3
33224: PUSH
33225: FOR_IN
33226: IFFALSE 33678
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33228: LD_VAR 0 4
33232: PPUSH
33233: CALL_OW 266
33237: PUSH
33238: LD_INT 6
33240: PUSH
33241: LD_INT 7
33243: PUSH
33244: LD_INT 8
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: IN
33252: IFFALSE 33366
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33254: LD_ADDR_VAR 0 2
33258: PUSH
33259: LD_VAR 0 2
33263: PUSH
33264: LD_VAR 0 4
33268: PPUSH
33269: CALL_OW 266
33273: PUSH
33274: LD_VAR 0 4
33278: PPUSH
33279: CALL_OW 250
33283: PUSH
33284: LD_VAR 0 4
33288: PPUSH
33289: CALL_OW 251
33293: PUSH
33294: LD_VAR 0 4
33298: PPUSH
33299: CALL_OW 254
33303: PUSH
33304: LD_VAR 0 4
33308: PPUSH
33309: CALL_OW 267
33313: PUSH
33314: LD_VAR 0 4
33318: PPUSH
33319: CALL_OW 248
33323: PUSH
33324: LD_VAR 0 4
33328: PPUSH
33329: LD_INT 1
33331: PPUSH
33332: CALL_OW 268
33336: PUSH
33337: LD_VAR 0 4
33341: PPUSH
33342: LD_INT 2
33344: PPUSH
33345: CALL_OW 268
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: PUSH
33360: EMPTY
33361: LIST
33362: ADD
33363: ST_TO_ADDR
33364: GO 33676
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33366: LD_VAR 0 4
33370: PPUSH
33371: CALL_OW 266
33375: PUSH
33376: LD_INT 32
33378: EQUAL
33379: PUSH
33380: LD_VAR 0 4
33384: PPUSH
33385: CALL_OW 266
33389: PUSH
33390: LD_INT 33
33392: EQUAL
33393: OR
33394: IFFALSE 33491
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33396: LD_ADDR_VAR 0 2
33400: PUSH
33401: LD_VAR 0 2
33405: PUSH
33406: LD_VAR 0 4
33410: PPUSH
33411: CALL_OW 266
33415: PUSH
33416: LD_VAR 0 4
33420: PPUSH
33421: CALL_OW 250
33425: PUSH
33426: LD_VAR 0 4
33430: PPUSH
33431: CALL_OW 251
33435: PUSH
33436: LD_VAR 0 4
33440: PPUSH
33441: CALL_OW 254
33445: PUSH
33446: LD_VAR 0 4
33450: PPUSH
33451: CALL_OW 267
33455: PUSH
33456: LD_VAR 0 4
33460: PPUSH
33461: CALL_OW 248
33465: PUSH
33466: LD_VAR 0 4
33470: PPUSH
33471: CALL_OW 269
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: PUSH
33485: EMPTY
33486: LIST
33487: ADD
33488: ST_TO_ADDR
33489: GO 33676
// if GetBType ( i ) = b_factory then
33491: LD_VAR 0 4
33495: PPUSH
33496: CALL_OW 266
33500: PUSH
33501: LD_INT 3
33503: EQUAL
33504: IFFALSE 33594
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33506: LD_ADDR_VAR 0 2
33510: PUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: LD_INT 1
33518: PPUSH
33519: LD_VAR 0 4
33523: PPUSH
33524: CALL_OW 266
33528: PUSH
33529: LD_VAR 0 4
33533: PPUSH
33534: CALL_OW 250
33538: PUSH
33539: LD_VAR 0 4
33543: PPUSH
33544: CALL_OW 251
33548: PUSH
33549: LD_VAR 0 4
33553: PPUSH
33554: CALL_OW 254
33558: PUSH
33559: LD_VAR 0 4
33563: PPUSH
33564: CALL_OW 267
33568: PUSH
33569: LD_VAR 0 4
33573: PPUSH
33574: CALL_OW 248
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: PPUSH
33587: CALL_OW 2
33591: ST_TO_ADDR
33592: GO 33676
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33594: LD_ADDR_VAR 0 2
33598: PUSH
33599: LD_VAR 0 2
33603: PUSH
33604: LD_VAR 0 4
33608: PPUSH
33609: CALL_OW 266
33613: PUSH
33614: LD_VAR 0 4
33618: PPUSH
33619: CALL_OW 250
33623: PUSH
33624: LD_VAR 0 4
33628: PPUSH
33629: CALL_OW 251
33633: PUSH
33634: LD_VAR 0 4
33638: PPUSH
33639: CALL_OW 254
33643: PUSH
33644: LD_VAR 0 4
33648: PPUSH
33649: CALL_OW 267
33653: PUSH
33654: LD_VAR 0 4
33658: PPUSH
33659: CALL_OW 248
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: ADD
33675: ST_TO_ADDR
// end ;
33676: GO 33225
33678: POP
33679: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33680: LD_VAR 0 2
33684: PPUSH
33685: LD_STRING 10_EpsilonBase
33687: PPUSH
33688: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33692: LD_INT 34
33694: PPUSH
33695: CALL_OW 353
33699: PPUSH
33700: LD_STRING 10_EpsilonEnv
33702: PPUSH
33703: CALL_OW 39
// end ; end_of_file
33707: LD_VAR 0 1
33711: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33712: LD_EXP 7
33716: IFFALSE 33839
33718: GO 33720
33720: DISABLE
33721: LD_INT 0
33723: PPUSH
33724: PPUSH
// begin enable ;
33725: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33726: LD_INT 35
33728: PPUSH
33729: LD_INT 385
33731: PPUSH
33732: CALL_OW 12
33736: PPUSH
33737: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33741: LD_ADDR_VAR 0 2
33745: PUSH
33746: LD_INT 13
33748: PUSH
33749: LD_INT 14
33751: PUSH
33752: LD_INT 15
33754: PUSH
33755: LD_INT 16
33757: PUSH
33758: LD_INT 17
33760: PUSH
33761: LD_INT 38
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33772: LD_ADDR_VAR 0 1
33776: PUSH
33777: LD_VAR 0 2
33781: PUSH
33782: LD_INT 1
33784: PPUSH
33785: LD_VAR 0 2
33789: PPUSH
33790: CALL 56780 0 1
33794: PPUSH
33795: CALL_OW 12
33799: ARRAY
33800: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33801: LD_VAR 0 1
33805: PPUSH
33806: CALL_OW 435
33810: PUSH
33811: LD_INT 8
33813: LESS
33814: IFFALSE 33839
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33816: LD_INT 1
33818: PPUSH
33819: LD_INT 5
33821: PPUSH
33822: CALL_OW 12
33826: PPUSH
33827: LD_VAR 0 1
33831: PPUSH
33832: LD_INT 1
33834: PPUSH
33835: CALL_OW 55
// end ;
33839: PPOPN 2
33841: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33842: LD_OWVAR 1
33846: PUSH
33847: LD_INT 10500
33849: LESS
33850: PUSH
33851: LD_EXP 9
33855: AND
33856: IFFALSE 33883
33858: GO 33860
33860: DISABLE
// begin enable ;
33861: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33862: LD_INT 1
33864: PPUSH
33865: LD_INT 5
33867: PPUSH
33868: CALL_OW 12
33872: PPUSH
33873: LD_INT 15
33875: PPUSH
33876: LD_INT 1
33878: PPUSH
33879: CALL_OW 55
// end ;
33883: END
// every 0 0$55 trigger ruBase do
33884: LD_EXP 68
33888: IFFALSE 33932
33890: GO 33892
33892: DISABLE
// begin enable ;
33893: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33894: LD_EXP 84
33898: PPUSH
33899: CALL_OW 435
33903: PUSH
33904: LD_INT 3
33906: LESS
33907: IFFALSE 33932
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33909: LD_INT 1
33911: PPUSH
33912: LD_INT 5
33914: PPUSH
33915: CALL_OW 12
33919: PPUSH
33920: LD_EXP 84
33924: PPUSH
33925: LD_INT 1
33927: PPUSH
33928: CALL_OW 55
// end ;
33932: END
// every 1 1$05 trigger ruBase2 do
33933: LD_EXP 69
33937: IFFALSE 33981
33939: GO 33941
33941: DISABLE
// begin enable ;
33942: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33943: LD_EXP 85
33947: PPUSH
33948: CALL_OW 435
33952: PUSH
33953: LD_INT 3
33955: LESS
33956: IFFALSE 33981
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33958: LD_INT 1
33960: PPUSH
33961: LD_INT 5
33963: PPUSH
33964: CALL_OW 12
33968: PPUSH
33969: LD_EXP 85
33973: PPUSH
33974: LD_INT 1
33976: PPUSH
33977: CALL_OW 55
// end ; end_of_file end_of_file
33981: END
// export globalGameSaveCounter ; every 0 0$1 do
33982: GO 33984
33984: DISABLE
// begin enable ;
33985: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33986: LD_STRING updateTimer(
33988: PUSH
33989: LD_OWVAR 1
33993: STR
33994: PUSH
33995: LD_STRING );
33997: STR
33998: PPUSH
33999: CALL_OW 559
// end ;
34003: END
// every 0 0$1 do
34004: GO 34006
34006: DISABLE
// begin globalGameSaveCounter := 0 ;
34007: LD_ADDR_EXP 86
34011: PUSH
34012: LD_INT 0
34014: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
34015: LD_STRING setGameSaveCounter(0)
34017: PPUSH
34018: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
34022: LD_STRING initStreamRollete();
34024: PPUSH
34025: CALL_OW 559
// InitStreamMode ;
34029: CALL 35355 0 0
// DefineStreamItems ( false ) ;
34033: LD_INT 0
34035: PPUSH
34036: CALL 35819 0 1
// end ;
34040: END
// export function SOS_MapStart ( ) ; begin
34041: LD_INT 0
34043: PPUSH
// if streamModeActive then
34044: LD_EXP 87
34048: IFFALSE 34057
// DefineStreamItems ( true ) ;
34050: LD_INT 1
34052: PPUSH
34053: CALL 35819 0 1
// UpdateLuaVariables ( ) ;
34057: CALL 34074 0 0
// UpdateFactoryWaypoints ( ) ;
34061: CALL 48688 0 0
// UpdateWarehouseGatheringPoints ( ) ;
34065: CALL 48945 0 0
// end ;
34069: LD_VAR 0 1
34073: RET
// function UpdateLuaVariables ( ) ; begin
34074: LD_INT 0
34076: PPUSH
// if globalGameSaveCounter then
34077: LD_EXP 86
34081: IFFALSE 34115
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34083: LD_ADDR_EXP 86
34087: PUSH
34088: LD_EXP 86
34092: PPUSH
34093: CALL 93741 0 1
34097: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34098: LD_STRING setGameSaveCounter(
34100: PUSH
34101: LD_EXP 86
34105: STR
34106: PUSH
34107: LD_STRING )
34109: STR
34110: PPUSH
34111: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34115: LD_STRING setGameDifficulty(
34117: PUSH
34118: LD_OWVAR 67
34122: STR
34123: PUSH
34124: LD_STRING )
34126: STR
34127: PPUSH
34128: CALL_OW 559
// end ;
34132: LD_VAR 0 1
34136: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34137: LD_INT 0
34139: PPUSH
// if p2 = stream_mode then
34140: LD_VAR 0 2
34144: PUSH
34145: LD_INT 100
34147: EQUAL
34148: IFFALSE 35151
// begin if not StreamModeActive then
34150: LD_EXP 87
34154: NOT
34155: IFFALSE 34165
// StreamModeActive := true ;
34157: LD_ADDR_EXP 87
34161: PUSH
34162: LD_INT 1
34164: ST_TO_ADDR
// if p3 = 0 then
34165: LD_VAR 0 3
34169: PUSH
34170: LD_INT 0
34172: EQUAL
34173: IFFALSE 34179
// InitStreamMode ;
34175: CALL 35355 0 0
// if p3 = 1 then
34179: LD_VAR 0 3
34183: PUSH
34184: LD_INT 1
34186: EQUAL
34187: IFFALSE 34197
// sRocket := true ;
34189: LD_ADDR_EXP 92
34193: PUSH
34194: LD_INT 1
34196: ST_TO_ADDR
// if p3 = 2 then
34197: LD_VAR 0 3
34201: PUSH
34202: LD_INT 2
34204: EQUAL
34205: IFFALSE 34215
// sSpeed := true ;
34207: LD_ADDR_EXP 91
34211: PUSH
34212: LD_INT 1
34214: ST_TO_ADDR
// if p3 = 3 then
34215: LD_VAR 0 3
34219: PUSH
34220: LD_INT 3
34222: EQUAL
34223: IFFALSE 34233
// sEngine := true ;
34225: LD_ADDR_EXP 93
34229: PUSH
34230: LD_INT 1
34232: ST_TO_ADDR
// if p3 = 4 then
34233: LD_VAR 0 3
34237: PUSH
34238: LD_INT 4
34240: EQUAL
34241: IFFALSE 34251
// sSpec := true ;
34243: LD_ADDR_EXP 90
34247: PUSH
34248: LD_INT 1
34250: ST_TO_ADDR
// if p3 = 5 then
34251: LD_VAR 0 3
34255: PUSH
34256: LD_INT 5
34258: EQUAL
34259: IFFALSE 34269
// sLevel := true ;
34261: LD_ADDR_EXP 94
34265: PUSH
34266: LD_INT 1
34268: ST_TO_ADDR
// if p3 = 6 then
34269: LD_VAR 0 3
34273: PUSH
34274: LD_INT 6
34276: EQUAL
34277: IFFALSE 34287
// sArmoury := true ;
34279: LD_ADDR_EXP 95
34283: PUSH
34284: LD_INT 1
34286: ST_TO_ADDR
// if p3 = 7 then
34287: LD_VAR 0 3
34291: PUSH
34292: LD_INT 7
34294: EQUAL
34295: IFFALSE 34305
// sRadar := true ;
34297: LD_ADDR_EXP 96
34301: PUSH
34302: LD_INT 1
34304: ST_TO_ADDR
// if p3 = 8 then
34305: LD_VAR 0 3
34309: PUSH
34310: LD_INT 8
34312: EQUAL
34313: IFFALSE 34323
// sBunker := true ;
34315: LD_ADDR_EXP 97
34319: PUSH
34320: LD_INT 1
34322: ST_TO_ADDR
// if p3 = 9 then
34323: LD_VAR 0 3
34327: PUSH
34328: LD_INT 9
34330: EQUAL
34331: IFFALSE 34341
// sHack := true ;
34333: LD_ADDR_EXP 98
34337: PUSH
34338: LD_INT 1
34340: ST_TO_ADDR
// if p3 = 10 then
34341: LD_VAR 0 3
34345: PUSH
34346: LD_INT 10
34348: EQUAL
34349: IFFALSE 34359
// sFire := true ;
34351: LD_ADDR_EXP 99
34355: PUSH
34356: LD_INT 1
34358: ST_TO_ADDR
// if p3 = 11 then
34359: LD_VAR 0 3
34363: PUSH
34364: LD_INT 11
34366: EQUAL
34367: IFFALSE 34377
// sRefresh := true ;
34369: LD_ADDR_EXP 100
34373: PUSH
34374: LD_INT 1
34376: ST_TO_ADDR
// if p3 = 12 then
34377: LD_VAR 0 3
34381: PUSH
34382: LD_INT 12
34384: EQUAL
34385: IFFALSE 34395
// sExp := true ;
34387: LD_ADDR_EXP 101
34391: PUSH
34392: LD_INT 1
34394: ST_TO_ADDR
// if p3 = 13 then
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 13
34402: EQUAL
34403: IFFALSE 34413
// sDepot := true ;
34405: LD_ADDR_EXP 102
34409: PUSH
34410: LD_INT 1
34412: ST_TO_ADDR
// if p3 = 14 then
34413: LD_VAR 0 3
34417: PUSH
34418: LD_INT 14
34420: EQUAL
34421: IFFALSE 34431
// sFlag := true ;
34423: LD_ADDR_EXP 103
34427: PUSH
34428: LD_INT 1
34430: ST_TO_ADDR
// if p3 = 15 then
34431: LD_VAR 0 3
34435: PUSH
34436: LD_INT 15
34438: EQUAL
34439: IFFALSE 34449
// sKamikadze := true ;
34441: LD_ADDR_EXP 111
34445: PUSH
34446: LD_INT 1
34448: ST_TO_ADDR
// if p3 = 16 then
34449: LD_VAR 0 3
34453: PUSH
34454: LD_INT 16
34456: EQUAL
34457: IFFALSE 34467
// sTroll := true ;
34459: LD_ADDR_EXP 112
34463: PUSH
34464: LD_INT 1
34466: ST_TO_ADDR
// if p3 = 17 then
34467: LD_VAR 0 3
34471: PUSH
34472: LD_INT 17
34474: EQUAL
34475: IFFALSE 34485
// sSlow := true ;
34477: LD_ADDR_EXP 113
34481: PUSH
34482: LD_INT 1
34484: ST_TO_ADDR
// if p3 = 18 then
34485: LD_VAR 0 3
34489: PUSH
34490: LD_INT 18
34492: EQUAL
34493: IFFALSE 34503
// sLack := true ;
34495: LD_ADDR_EXP 114
34499: PUSH
34500: LD_INT 1
34502: ST_TO_ADDR
// if p3 = 19 then
34503: LD_VAR 0 3
34507: PUSH
34508: LD_INT 19
34510: EQUAL
34511: IFFALSE 34521
// sTank := true ;
34513: LD_ADDR_EXP 116
34517: PUSH
34518: LD_INT 1
34520: ST_TO_ADDR
// if p3 = 20 then
34521: LD_VAR 0 3
34525: PUSH
34526: LD_INT 20
34528: EQUAL
34529: IFFALSE 34539
// sRemote := true ;
34531: LD_ADDR_EXP 117
34535: PUSH
34536: LD_INT 1
34538: ST_TO_ADDR
// if p3 = 21 then
34539: LD_VAR 0 3
34543: PUSH
34544: LD_INT 21
34546: EQUAL
34547: IFFALSE 34557
// sPowell := true ;
34549: LD_ADDR_EXP 118
34553: PUSH
34554: LD_INT 1
34556: ST_TO_ADDR
// if p3 = 22 then
34557: LD_VAR 0 3
34561: PUSH
34562: LD_INT 22
34564: EQUAL
34565: IFFALSE 34575
// sTeleport := true ;
34567: LD_ADDR_EXP 121
34571: PUSH
34572: LD_INT 1
34574: ST_TO_ADDR
// if p3 = 23 then
34575: LD_VAR 0 3
34579: PUSH
34580: LD_INT 23
34582: EQUAL
34583: IFFALSE 34593
// sOilTower := true ;
34585: LD_ADDR_EXP 123
34589: PUSH
34590: LD_INT 1
34592: ST_TO_ADDR
// if p3 = 24 then
34593: LD_VAR 0 3
34597: PUSH
34598: LD_INT 24
34600: EQUAL
34601: IFFALSE 34611
// sShovel := true ;
34603: LD_ADDR_EXP 124
34607: PUSH
34608: LD_INT 1
34610: ST_TO_ADDR
// if p3 = 25 then
34611: LD_VAR 0 3
34615: PUSH
34616: LD_INT 25
34618: EQUAL
34619: IFFALSE 34629
// sSheik := true ;
34621: LD_ADDR_EXP 125
34625: PUSH
34626: LD_INT 1
34628: ST_TO_ADDR
// if p3 = 26 then
34629: LD_VAR 0 3
34633: PUSH
34634: LD_INT 26
34636: EQUAL
34637: IFFALSE 34647
// sEarthquake := true ;
34639: LD_ADDR_EXP 127
34643: PUSH
34644: LD_INT 1
34646: ST_TO_ADDR
// if p3 = 27 then
34647: LD_VAR 0 3
34651: PUSH
34652: LD_INT 27
34654: EQUAL
34655: IFFALSE 34665
// sAI := true ;
34657: LD_ADDR_EXP 128
34661: PUSH
34662: LD_INT 1
34664: ST_TO_ADDR
// if p3 = 28 then
34665: LD_VAR 0 3
34669: PUSH
34670: LD_INT 28
34672: EQUAL
34673: IFFALSE 34683
// sCargo := true ;
34675: LD_ADDR_EXP 131
34679: PUSH
34680: LD_INT 1
34682: ST_TO_ADDR
// if p3 = 29 then
34683: LD_VAR 0 3
34687: PUSH
34688: LD_INT 29
34690: EQUAL
34691: IFFALSE 34701
// sDLaser := true ;
34693: LD_ADDR_EXP 132
34697: PUSH
34698: LD_INT 1
34700: ST_TO_ADDR
// if p3 = 30 then
34701: LD_VAR 0 3
34705: PUSH
34706: LD_INT 30
34708: EQUAL
34709: IFFALSE 34719
// sExchange := true ;
34711: LD_ADDR_EXP 133
34715: PUSH
34716: LD_INT 1
34718: ST_TO_ADDR
// if p3 = 31 then
34719: LD_VAR 0 3
34723: PUSH
34724: LD_INT 31
34726: EQUAL
34727: IFFALSE 34737
// sFac := true ;
34729: LD_ADDR_EXP 134
34733: PUSH
34734: LD_INT 1
34736: ST_TO_ADDR
// if p3 = 32 then
34737: LD_VAR 0 3
34741: PUSH
34742: LD_INT 32
34744: EQUAL
34745: IFFALSE 34755
// sPower := true ;
34747: LD_ADDR_EXP 135
34751: PUSH
34752: LD_INT 1
34754: ST_TO_ADDR
// if p3 = 33 then
34755: LD_VAR 0 3
34759: PUSH
34760: LD_INT 33
34762: EQUAL
34763: IFFALSE 34773
// sRandom := true ;
34765: LD_ADDR_EXP 136
34769: PUSH
34770: LD_INT 1
34772: ST_TO_ADDR
// if p3 = 34 then
34773: LD_VAR 0 3
34777: PUSH
34778: LD_INT 34
34780: EQUAL
34781: IFFALSE 34791
// sShield := true ;
34783: LD_ADDR_EXP 137
34787: PUSH
34788: LD_INT 1
34790: ST_TO_ADDR
// if p3 = 35 then
34791: LD_VAR 0 3
34795: PUSH
34796: LD_INT 35
34798: EQUAL
34799: IFFALSE 34809
// sTime := true ;
34801: LD_ADDR_EXP 138
34805: PUSH
34806: LD_INT 1
34808: ST_TO_ADDR
// if p3 = 36 then
34809: LD_VAR 0 3
34813: PUSH
34814: LD_INT 36
34816: EQUAL
34817: IFFALSE 34827
// sTools := true ;
34819: LD_ADDR_EXP 139
34823: PUSH
34824: LD_INT 1
34826: ST_TO_ADDR
// if p3 = 101 then
34827: LD_VAR 0 3
34831: PUSH
34832: LD_INT 101
34834: EQUAL
34835: IFFALSE 34845
// sSold := true ;
34837: LD_ADDR_EXP 104
34841: PUSH
34842: LD_INT 1
34844: ST_TO_ADDR
// if p3 = 102 then
34845: LD_VAR 0 3
34849: PUSH
34850: LD_INT 102
34852: EQUAL
34853: IFFALSE 34863
// sDiff := true ;
34855: LD_ADDR_EXP 105
34859: PUSH
34860: LD_INT 1
34862: ST_TO_ADDR
// if p3 = 103 then
34863: LD_VAR 0 3
34867: PUSH
34868: LD_INT 103
34870: EQUAL
34871: IFFALSE 34881
// sFog := true ;
34873: LD_ADDR_EXP 108
34877: PUSH
34878: LD_INT 1
34880: ST_TO_ADDR
// if p3 = 104 then
34881: LD_VAR 0 3
34885: PUSH
34886: LD_INT 104
34888: EQUAL
34889: IFFALSE 34899
// sReset := true ;
34891: LD_ADDR_EXP 109
34895: PUSH
34896: LD_INT 1
34898: ST_TO_ADDR
// if p3 = 105 then
34899: LD_VAR 0 3
34903: PUSH
34904: LD_INT 105
34906: EQUAL
34907: IFFALSE 34917
// sSun := true ;
34909: LD_ADDR_EXP 110
34913: PUSH
34914: LD_INT 1
34916: ST_TO_ADDR
// if p3 = 106 then
34917: LD_VAR 0 3
34921: PUSH
34922: LD_INT 106
34924: EQUAL
34925: IFFALSE 34935
// sTiger := true ;
34927: LD_ADDR_EXP 106
34931: PUSH
34932: LD_INT 1
34934: ST_TO_ADDR
// if p3 = 107 then
34935: LD_VAR 0 3
34939: PUSH
34940: LD_INT 107
34942: EQUAL
34943: IFFALSE 34953
// sBomb := true ;
34945: LD_ADDR_EXP 107
34949: PUSH
34950: LD_INT 1
34952: ST_TO_ADDR
// if p3 = 108 then
34953: LD_VAR 0 3
34957: PUSH
34958: LD_INT 108
34960: EQUAL
34961: IFFALSE 34971
// sWound := true ;
34963: LD_ADDR_EXP 115
34967: PUSH
34968: LD_INT 1
34970: ST_TO_ADDR
// if p3 = 109 then
34971: LD_VAR 0 3
34975: PUSH
34976: LD_INT 109
34978: EQUAL
34979: IFFALSE 34989
// sBetray := true ;
34981: LD_ADDR_EXP 119
34985: PUSH
34986: LD_INT 1
34988: ST_TO_ADDR
// if p3 = 110 then
34989: LD_VAR 0 3
34993: PUSH
34994: LD_INT 110
34996: EQUAL
34997: IFFALSE 35007
// sContamin := true ;
34999: LD_ADDR_EXP 120
35003: PUSH
35004: LD_INT 1
35006: ST_TO_ADDR
// if p3 = 111 then
35007: LD_VAR 0 3
35011: PUSH
35012: LD_INT 111
35014: EQUAL
35015: IFFALSE 35025
// sOil := true ;
35017: LD_ADDR_EXP 122
35021: PUSH
35022: LD_INT 1
35024: ST_TO_ADDR
// if p3 = 112 then
35025: LD_VAR 0 3
35029: PUSH
35030: LD_INT 112
35032: EQUAL
35033: IFFALSE 35043
// sStu := true ;
35035: LD_ADDR_EXP 126
35039: PUSH
35040: LD_INT 1
35042: ST_TO_ADDR
// if p3 = 113 then
35043: LD_VAR 0 3
35047: PUSH
35048: LD_INT 113
35050: EQUAL
35051: IFFALSE 35061
// sBazooka := true ;
35053: LD_ADDR_EXP 129
35057: PUSH
35058: LD_INT 1
35060: ST_TO_ADDR
// if p3 = 114 then
35061: LD_VAR 0 3
35065: PUSH
35066: LD_INT 114
35068: EQUAL
35069: IFFALSE 35079
// sMortar := true ;
35071: LD_ADDR_EXP 130
35075: PUSH
35076: LD_INT 1
35078: ST_TO_ADDR
// if p3 = 115 then
35079: LD_VAR 0 3
35083: PUSH
35084: LD_INT 115
35086: EQUAL
35087: IFFALSE 35097
// sRanger := true ;
35089: LD_ADDR_EXP 140
35093: PUSH
35094: LD_INT 1
35096: ST_TO_ADDR
// if p3 = 116 then
35097: LD_VAR 0 3
35101: PUSH
35102: LD_INT 116
35104: EQUAL
35105: IFFALSE 35115
// sComputer := true ;
35107: LD_ADDR_EXP 141
35111: PUSH
35112: LD_INT 1
35114: ST_TO_ADDR
// if p3 = 117 then
35115: LD_VAR 0 3
35119: PUSH
35120: LD_INT 117
35122: EQUAL
35123: IFFALSE 35133
// s30 := true ;
35125: LD_ADDR_EXP 142
35129: PUSH
35130: LD_INT 1
35132: ST_TO_ADDR
// if p3 = 118 then
35133: LD_VAR 0 3
35137: PUSH
35138: LD_INT 118
35140: EQUAL
35141: IFFALSE 35151
// s60 := true ;
35143: LD_ADDR_EXP 143
35147: PUSH
35148: LD_INT 1
35150: ST_TO_ADDR
// end ; if p2 = hack_mode then
35151: LD_VAR 0 2
35155: PUSH
35156: LD_INT 101
35158: EQUAL
35159: IFFALSE 35287
// begin case p3 of 1 :
35161: LD_VAR 0 3
35165: PUSH
35166: LD_INT 1
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35181
35174: POP
// hHackUnlimitedResources ; 2 :
35175: CALL 47434 0 0
35179: GO 35287
35181: LD_INT 2
35183: DOUBLE
35184: EQUAL
35185: IFTRUE 35189
35187: GO 35196
35189: POP
// hHackSetLevel10 ; 3 :
35190: CALL 47567 0 0
35194: GO 35287
35196: LD_INT 3
35198: DOUBLE
35199: EQUAL
35200: IFTRUE 35204
35202: GO 35211
35204: POP
// hHackSetLevel10YourUnits ; 4 :
35205: CALL 47652 0 0
35209: GO 35287
35211: LD_INT 4
35213: DOUBLE
35214: EQUAL
35215: IFTRUE 35219
35217: GO 35226
35219: POP
// hHackInvincible ; 5 :
35220: CALL 48100 0 0
35224: GO 35287
35226: LD_INT 5
35228: DOUBLE
35229: EQUAL
35230: IFTRUE 35234
35232: GO 35241
35234: POP
// hHackInvisible ; 6 :
35235: CALL 48211 0 0
35239: GO 35287
35241: LD_INT 6
35243: DOUBLE
35244: EQUAL
35245: IFTRUE 35249
35247: GO 35256
35249: POP
// hHackChangeYourSide ; 7 :
35250: CALL 48268 0 0
35254: GO 35287
35256: LD_INT 7
35258: DOUBLE
35259: EQUAL
35260: IFTRUE 35264
35262: GO 35271
35264: POP
// hHackChangeUnitSide ; 8 :
35265: CALL 48310 0 0
35269: GO 35287
35271: LD_INT 8
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35286
35279: POP
// hHackFog ; end ;
35280: CALL 48411 0 0
35284: GO 35287
35286: POP
// end ; if p2 = game_save_mode then
35287: LD_VAR 0 2
35291: PUSH
35292: LD_INT 102
35294: EQUAL
35295: IFFALSE 35350
// begin if p3 = 1 then
35297: LD_VAR 0 3
35301: PUSH
35302: LD_INT 1
35304: EQUAL
35305: IFFALSE 35317
// globalGameSaveCounter := p4 ;
35307: LD_ADDR_EXP 86
35311: PUSH
35312: LD_VAR 0 4
35316: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35317: LD_VAR 0 3
35321: PUSH
35322: LD_INT 2
35324: EQUAL
35325: PUSH
35326: LD_EXP 86
35330: AND
35331: IFFALSE 35350
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35333: LD_STRING setGameSaveCounter(
35335: PUSH
35336: LD_EXP 86
35340: STR
35341: PUSH
35342: LD_STRING )
35344: STR
35345: PPUSH
35346: CALL_OW 559
// end ; end ;
35350: LD_VAR 0 7
35354: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35355: LD_INT 0
35357: PPUSH
// streamModeActive := false ;
35358: LD_ADDR_EXP 87
35362: PUSH
35363: LD_INT 0
35365: ST_TO_ADDR
// normalCounter := 36 ;
35366: LD_ADDR_EXP 88
35370: PUSH
35371: LD_INT 36
35373: ST_TO_ADDR
// hardcoreCounter := 18 ;
35374: LD_ADDR_EXP 89
35378: PUSH
35379: LD_INT 18
35381: ST_TO_ADDR
// sRocket := false ;
35382: LD_ADDR_EXP 92
35386: PUSH
35387: LD_INT 0
35389: ST_TO_ADDR
// sSpeed := false ;
35390: LD_ADDR_EXP 91
35394: PUSH
35395: LD_INT 0
35397: ST_TO_ADDR
// sEngine := false ;
35398: LD_ADDR_EXP 93
35402: PUSH
35403: LD_INT 0
35405: ST_TO_ADDR
// sSpec := false ;
35406: LD_ADDR_EXP 90
35410: PUSH
35411: LD_INT 0
35413: ST_TO_ADDR
// sLevel := false ;
35414: LD_ADDR_EXP 94
35418: PUSH
35419: LD_INT 0
35421: ST_TO_ADDR
// sArmoury := false ;
35422: LD_ADDR_EXP 95
35426: PUSH
35427: LD_INT 0
35429: ST_TO_ADDR
// sRadar := false ;
35430: LD_ADDR_EXP 96
35434: PUSH
35435: LD_INT 0
35437: ST_TO_ADDR
// sBunker := false ;
35438: LD_ADDR_EXP 97
35442: PUSH
35443: LD_INT 0
35445: ST_TO_ADDR
// sHack := false ;
35446: LD_ADDR_EXP 98
35450: PUSH
35451: LD_INT 0
35453: ST_TO_ADDR
// sFire := false ;
35454: LD_ADDR_EXP 99
35458: PUSH
35459: LD_INT 0
35461: ST_TO_ADDR
// sRefresh := false ;
35462: LD_ADDR_EXP 100
35466: PUSH
35467: LD_INT 0
35469: ST_TO_ADDR
// sExp := false ;
35470: LD_ADDR_EXP 101
35474: PUSH
35475: LD_INT 0
35477: ST_TO_ADDR
// sDepot := false ;
35478: LD_ADDR_EXP 102
35482: PUSH
35483: LD_INT 0
35485: ST_TO_ADDR
// sFlag := false ;
35486: LD_ADDR_EXP 103
35490: PUSH
35491: LD_INT 0
35493: ST_TO_ADDR
// sKamikadze := false ;
35494: LD_ADDR_EXP 111
35498: PUSH
35499: LD_INT 0
35501: ST_TO_ADDR
// sTroll := false ;
35502: LD_ADDR_EXP 112
35506: PUSH
35507: LD_INT 0
35509: ST_TO_ADDR
// sSlow := false ;
35510: LD_ADDR_EXP 113
35514: PUSH
35515: LD_INT 0
35517: ST_TO_ADDR
// sLack := false ;
35518: LD_ADDR_EXP 114
35522: PUSH
35523: LD_INT 0
35525: ST_TO_ADDR
// sTank := false ;
35526: LD_ADDR_EXP 116
35530: PUSH
35531: LD_INT 0
35533: ST_TO_ADDR
// sRemote := false ;
35534: LD_ADDR_EXP 117
35538: PUSH
35539: LD_INT 0
35541: ST_TO_ADDR
// sPowell := false ;
35542: LD_ADDR_EXP 118
35546: PUSH
35547: LD_INT 0
35549: ST_TO_ADDR
// sTeleport := false ;
35550: LD_ADDR_EXP 121
35554: PUSH
35555: LD_INT 0
35557: ST_TO_ADDR
// sOilTower := false ;
35558: LD_ADDR_EXP 123
35562: PUSH
35563: LD_INT 0
35565: ST_TO_ADDR
// sShovel := false ;
35566: LD_ADDR_EXP 124
35570: PUSH
35571: LD_INT 0
35573: ST_TO_ADDR
// sSheik := false ;
35574: LD_ADDR_EXP 125
35578: PUSH
35579: LD_INT 0
35581: ST_TO_ADDR
// sEarthquake := false ;
35582: LD_ADDR_EXP 127
35586: PUSH
35587: LD_INT 0
35589: ST_TO_ADDR
// sAI := false ;
35590: LD_ADDR_EXP 128
35594: PUSH
35595: LD_INT 0
35597: ST_TO_ADDR
// sCargo := false ;
35598: LD_ADDR_EXP 131
35602: PUSH
35603: LD_INT 0
35605: ST_TO_ADDR
// sDLaser := false ;
35606: LD_ADDR_EXP 132
35610: PUSH
35611: LD_INT 0
35613: ST_TO_ADDR
// sExchange := false ;
35614: LD_ADDR_EXP 133
35618: PUSH
35619: LD_INT 0
35621: ST_TO_ADDR
// sFac := false ;
35622: LD_ADDR_EXP 134
35626: PUSH
35627: LD_INT 0
35629: ST_TO_ADDR
// sPower := false ;
35630: LD_ADDR_EXP 135
35634: PUSH
35635: LD_INT 0
35637: ST_TO_ADDR
// sRandom := false ;
35638: LD_ADDR_EXP 136
35642: PUSH
35643: LD_INT 0
35645: ST_TO_ADDR
// sShield := false ;
35646: LD_ADDR_EXP 137
35650: PUSH
35651: LD_INT 0
35653: ST_TO_ADDR
// sTime := false ;
35654: LD_ADDR_EXP 138
35658: PUSH
35659: LD_INT 0
35661: ST_TO_ADDR
// sTools := false ;
35662: LD_ADDR_EXP 139
35666: PUSH
35667: LD_INT 0
35669: ST_TO_ADDR
// sSold := false ;
35670: LD_ADDR_EXP 104
35674: PUSH
35675: LD_INT 0
35677: ST_TO_ADDR
// sDiff := false ;
35678: LD_ADDR_EXP 105
35682: PUSH
35683: LD_INT 0
35685: ST_TO_ADDR
// sFog := false ;
35686: LD_ADDR_EXP 108
35690: PUSH
35691: LD_INT 0
35693: ST_TO_ADDR
// sReset := false ;
35694: LD_ADDR_EXP 109
35698: PUSH
35699: LD_INT 0
35701: ST_TO_ADDR
// sSun := false ;
35702: LD_ADDR_EXP 110
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// sTiger := false ;
35710: LD_ADDR_EXP 106
35714: PUSH
35715: LD_INT 0
35717: ST_TO_ADDR
// sBomb := false ;
35718: LD_ADDR_EXP 107
35722: PUSH
35723: LD_INT 0
35725: ST_TO_ADDR
// sWound := false ;
35726: LD_ADDR_EXP 115
35730: PUSH
35731: LD_INT 0
35733: ST_TO_ADDR
// sBetray := false ;
35734: LD_ADDR_EXP 119
35738: PUSH
35739: LD_INT 0
35741: ST_TO_ADDR
// sContamin := false ;
35742: LD_ADDR_EXP 120
35746: PUSH
35747: LD_INT 0
35749: ST_TO_ADDR
// sOil := false ;
35750: LD_ADDR_EXP 122
35754: PUSH
35755: LD_INT 0
35757: ST_TO_ADDR
// sStu := false ;
35758: LD_ADDR_EXP 126
35762: PUSH
35763: LD_INT 0
35765: ST_TO_ADDR
// sBazooka := false ;
35766: LD_ADDR_EXP 129
35770: PUSH
35771: LD_INT 0
35773: ST_TO_ADDR
// sMortar := false ;
35774: LD_ADDR_EXP 130
35778: PUSH
35779: LD_INT 0
35781: ST_TO_ADDR
// sRanger := false ;
35782: LD_ADDR_EXP 140
35786: PUSH
35787: LD_INT 0
35789: ST_TO_ADDR
// sComputer := false ;
35790: LD_ADDR_EXP 141
35794: PUSH
35795: LD_INT 0
35797: ST_TO_ADDR
// s30 := false ;
35798: LD_ADDR_EXP 142
35802: PUSH
35803: LD_INT 0
35805: ST_TO_ADDR
// s60 := false ;
35806: LD_ADDR_EXP 143
35810: PUSH
35811: LD_INT 0
35813: ST_TO_ADDR
// end ;
35814: LD_VAR 0 1
35818: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35819: LD_INT 0
35821: PPUSH
35822: PPUSH
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
35827: PPUSH
// result := [ ] ;
35828: LD_ADDR_VAR 0 2
35832: PUSH
35833: EMPTY
35834: ST_TO_ADDR
// if campaign_id = 1 then
35835: LD_OWVAR 69
35839: PUSH
35840: LD_INT 1
35842: EQUAL
35843: IFFALSE 39009
// begin case mission_number of 1 :
35845: LD_OWVAR 70
35849: PUSH
35850: LD_INT 1
35852: DOUBLE
35853: EQUAL
35854: IFTRUE 35858
35856: GO 35934
35858: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35859: LD_ADDR_VAR 0 2
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 4
35869: PUSH
35870: LD_INT 11
35872: PUSH
35873: LD_INT 12
35875: PUSH
35876: LD_INT 15
35878: PUSH
35879: LD_INT 16
35881: PUSH
35882: LD_INT 22
35884: PUSH
35885: LD_INT 23
35887: PUSH
35888: LD_INT 26
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 101
35904: PUSH
35905: LD_INT 102
35907: PUSH
35908: LD_INT 106
35910: PUSH
35911: LD_INT 116
35913: PUSH
35914: LD_INT 117
35916: PUSH
35917: LD_INT 118
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: ST_TO_ADDR
35932: GO 39007
35934: LD_INT 2
35936: DOUBLE
35937: EQUAL
35938: IFTRUE 35942
35940: GO 36026
35942: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35943: LD_ADDR_VAR 0 2
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: LD_INT 4
35953: PUSH
35954: LD_INT 11
35956: PUSH
35957: LD_INT 12
35959: PUSH
35960: LD_INT 15
35962: PUSH
35963: LD_INT 16
35965: PUSH
35966: LD_INT 22
35968: PUSH
35969: LD_INT 23
35971: PUSH
35972: LD_INT 26
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 101
35988: PUSH
35989: LD_INT 102
35991: PUSH
35992: LD_INT 105
35994: PUSH
35995: LD_INT 106
35997: PUSH
35998: LD_INT 108
36000: PUSH
36001: LD_INT 116
36003: PUSH
36004: LD_INT 117
36006: PUSH
36007: LD_INT 118
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: ST_TO_ADDR
36024: GO 39007
36026: LD_INT 3
36028: DOUBLE
36029: EQUAL
36030: IFTRUE 36034
36032: GO 36122
36034: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
36035: LD_ADDR_VAR 0 2
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: LD_INT 4
36045: PUSH
36046: LD_INT 5
36048: PUSH
36049: LD_INT 11
36051: PUSH
36052: LD_INT 12
36054: PUSH
36055: LD_INT 15
36057: PUSH
36058: LD_INT 16
36060: PUSH
36061: LD_INT 22
36063: PUSH
36064: LD_INT 26
36066: PUSH
36067: LD_INT 36
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 101
36084: PUSH
36085: LD_INT 102
36087: PUSH
36088: LD_INT 105
36090: PUSH
36091: LD_INT 106
36093: PUSH
36094: LD_INT 108
36096: PUSH
36097: LD_INT 116
36099: PUSH
36100: LD_INT 117
36102: PUSH
36103: LD_INT 118
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: ST_TO_ADDR
36120: GO 39007
36122: LD_INT 4
36124: DOUBLE
36125: EQUAL
36126: IFTRUE 36130
36128: GO 36226
36130: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36131: LD_ADDR_VAR 0 2
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: LD_INT 4
36141: PUSH
36142: LD_INT 5
36144: PUSH
36145: LD_INT 8
36147: PUSH
36148: LD_INT 11
36150: PUSH
36151: LD_INT 12
36153: PUSH
36154: LD_INT 15
36156: PUSH
36157: LD_INT 16
36159: PUSH
36160: LD_INT 22
36162: PUSH
36163: LD_INT 23
36165: PUSH
36166: LD_INT 26
36168: PUSH
36169: LD_INT 36
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 101
36188: PUSH
36189: LD_INT 102
36191: PUSH
36192: LD_INT 105
36194: PUSH
36195: LD_INT 106
36197: PUSH
36198: LD_INT 108
36200: PUSH
36201: LD_INT 116
36203: PUSH
36204: LD_INT 117
36206: PUSH
36207: LD_INT 118
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: ST_TO_ADDR
36224: GO 39007
36226: LD_INT 5
36228: DOUBLE
36229: EQUAL
36230: IFTRUE 36234
36232: GO 36346
36234: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36235: LD_ADDR_VAR 0 2
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: LD_INT 4
36245: PUSH
36246: LD_INT 5
36248: PUSH
36249: LD_INT 6
36251: PUSH
36252: LD_INT 8
36254: PUSH
36255: LD_INT 11
36257: PUSH
36258: LD_INT 12
36260: PUSH
36261: LD_INT 15
36263: PUSH
36264: LD_INT 16
36266: PUSH
36267: LD_INT 22
36269: PUSH
36270: LD_INT 23
36272: PUSH
36273: LD_INT 25
36275: PUSH
36276: LD_INT 26
36278: PUSH
36279: LD_INT 36
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 101
36300: PUSH
36301: LD_INT 102
36303: PUSH
36304: LD_INT 105
36306: PUSH
36307: LD_INT 106
36309: PUSH
36310: LD_INT 108
36312: PUSH
36313: LD_INT 109
36315: PUSH
36316: LD_INT 112
36318: PUSH
36319: LD_INT 116
36321: PUSH
36322: LD_INT 117
36324: PUSH
36325: LD_INT 118
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: ST_TO_ADDR
36344: GO 39007
36346: LD_INT 6
36348: DOUBLE
36349: EQUAL
36350: IFTRUE 36354
36352: GO 36486
36354: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36355: LD_ADDR_VAR 0 2
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: LD_INT 4
36365: PUSH
36366: LD_INT 5
36368: PUSH
36369: LD_INT 6
36371: PUSH
36372: LD_INT 8
36374: PUSH
36375: LD_INT 11
36377: PUSH
36378: LD_INT 12
36380: PUSH
36381: LD_INT 15
36383: PUSH
36384: LD_INT 16
36386: PUSH
36387: LD_INT 20
36389: PUSH
36390: LD_INT 21
36392: PUSH
36393: LD_INT 22
36395: PUSH
36396: LD_INT 23
36398: PUSH
36399: LD_INT 25
36401: PUSH
36402: LD_INT 26
36404: PUSH
36405: LD_INT 30
36407: PUSH
36408: LD_INT 31
36410: PUSH
36411: LD_INT 32
36413: PUSH
36414: LD_INT 36
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 101
36440: PUSH
36441: LD_INT 102
36443: PUSH
36444: LD_INT 105
36446: PUSH
36447: LD_INT 106
36449: PUSH
36450: LD_INT 108
36452: PUSH
36453: LD_INT 109
36455: PUSH
36456: LD_INT 112
36458: PUSH
36459: LD_INT 116
36461: PUSH
36462: LD_INT 117
36464: PUSH
36465: LD_INT 118
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: ST_TO_ADDR
36484: GO 39007
36486: LD_INT 7
36488: DOUBLE
36489: EQUAL
36490: IFTRUE 36494
36492: GO 36606
36494: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36495: LD_ADDR_VAR 0 2
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 4
36505: PUSH
36506: LD_INT 5
36508: PUSH
36509: LD_INT 7
36511: PUSH
36512: LD_INT 11
36514: PUSH
36515: LD_INT 12
36517: PUSH
36518: LD_INT 15
36520: PUSH
36521: LD_INT 16
36523: PUSH
36524: LD_INT 20
36526: PUSH
36527: LD_INT 21
36529: PUSH
36530: LD_INT 22
36532: PUSH
36533: LD_INT 23
36535: PUSH
36536: LD_INT 25
36538: PUSH
36539: LD_INT 26
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 101
36560: PUSH
36561: LD_INT 102
36563: PUSH
36564: LD_INT 103
36566: PUSH
36567: LD_INT 105
36569: PUSH
36570: LD_INT 106
36572: PUSH
36573: LD_INT 108
36575: PUSH
36576: LD_INT 112
36578: PUSH
36579: LD_INT 116
36581: PUSH
36582: LD_INT 117
36584: PUSH
36585: LD_INT 118
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: ST_TO_ADDR
36604: GO 39007
36606: LD_INT 8
36608: DOUBLE
36609: EQUAL
36610: IFTRUE 36614
36612: GO 36754
36614: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36615: LD_ADDR_VAR 0 2
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: LD_INT 4
36625: PUSH
36626: LD_INT 5
36628: PUSH
36629: LD_INT 6
36631: PUSH
36632: LD_INT 7
36634: PUSH
36635: LD_INT 8
36637: PUSH
36638: LD_INT 11
36640: PUSH
36641: LD_INT 12
36643: PUSH
36644: LD_INT 15
36646: PUSH
36647: LD_INT 16
36649: PUSH
36650: LD_INT 20
36652: PUSH
36653: LD_INT 21
36655: PUSH
36656: LD_INT 22
36658: PUSH
36659: LD_INT 23
36661: PUSH
36662: LD_INT 25
36664: PUSH
36665: LD_INT 26
36667: PUSH
36668: LD_INT 30
36670: PUSH
36671: LD_INT 31
36673: PUSH
36674: LD_INT 32
36676: PUSH
36677: LD_INT 36
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 101
36704: PUSH
36705: LD_INT 102
36707: PUSH
36708: LD_INT 103
36710: PUSH
36711: LD_INT 105
36713: PUSH
36714: LD_INT 106
36716: PUSH
36717: LD_INT 108
36719: PUSH
36720: LD_INT 109
36722: PUSH
36723: LD_INT 112
36725: PUSH
36726: LD_INT 116
36728: PUSH
36729: LD_INT 117
36731: PUSH
36732: LD_INT 118
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: ST_TO_ADDR
36752: GO 39007
36754: LD_INT 9
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36762
36760: GO 36910
36762: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36763: LD_ADDR_VAR 0 2
36767: PUSH
36768: LD_INT 2
36770: PUSH
36771: LD_INT 4
36773: PUSH
36774: LD_INT 5
36776: PUSH
36777: LD_INT 6
36779: PUSH
36780: LD_INT 7
36782: PUSH
36783: LD_INT 8
36785: PUSH
36786: LD_INT 11
36788: PUSH
36789: LD_INT 12
36791: PUSH
36792: LD_INT 15
36794: PUSH
36795: LD_INT 16
36797: PUSH
36798: LD_INT 20
36800: PUSH
36801: LD_INT 21
36803: PUSH
36804: LD_INT 22
36806: PUSH
36807: LD_INT 23
36809: PUSH
36810: LD_INT 25
36812: PUSH
36813: LD_INT 26
36815: PUSH
36816: LD_INT 28
36818: PUSH
36819: LD_INT 30
36821: PUSH
36822: LD_INT 31
36824: PUSH
36825: LD_INT 32
36827: PUSH
36828: LD_INT 36
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 101
36856: PUSH
36857: LD_INT 102
36859: PUSH
36860: LD_INT 103
36862: PUSH
36863: LD_INT 105
36865: PUSH
36866: LD_INT 106
36868: PUSH
36869: LD_INT 108
36871: PUSH
36872: LD_INT 109
36874: PUSH
36875: LD_INT 112
36877: PUSH
36878: LD_INT 114
36880: PUSH
36881: LD_INT 116
36883: PUSH
36884: LD_INT 117
36886: PUSH
36887: LD_INT 118
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: ST_TO_ADDR
36908: GO 39007
36910: LD_INT 10
36912: DOUBLE
36913: EQUAL
36914: IFTRUE 36918
36916: GO 37114
36918: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36919: LD_ADDR_VAR 0 2
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 4
36929: PUSH
36930: LD_INT 5
36932: PUSH
36933: LD_INT 6
36935: PUSH
36936: LD_INT 7
36938: PUSH
36939: LD_INT 8
36941: PUSH
36942: LD_INT 9
36944: PUSH
36945: LD_INT 10
36947: PUSH
36948: LD_INT 11
36950: PUSH
36951: LD_INT 12
36953: PUSH
36954: LD_INT 13
36956: PUSH
36957: LD_INT 14
36959: PUSH
36960: LD_INT 15
36962: PUSH
36963: LD_INT 16
36965: PUSH
36966: LD_INT 17
36968: PUSH
36969: LD_INT 18
36971: PUSH
36972: LD_INT 19
36974: PUSH
36975: LD_INT 20
36977: PUSH
36978: LD_INT 21
36980: PUSH
36981: LD_INT 22
36983: PUSH
36984: LD_INT 23
36986: PUSH
36987: LD_INT 24
36989: PUSH
36990: LD_INT 25
36992: PUSH
36993: LD_INT 26
36995: PUSH
36996: LD_INT 28
36998: PUSH
36999: LD_INT 30
37001: PUSH
37002: LD_INT 31
37004: PUSH
37005: LD_INT 32
37007: PUSH
37008: LD_INT 36
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 101
37044: PUSH
37045: LD_INT 102
37047: PUSH
37048: LD_INT 103
37050: PUSH
37051: LD_INT 104
37053: PUSH
37054: LD_INT 105
37056: PUSH
37057: LD_INT 106
37059: PUSH
37060: LD_INT 107
37062: PUSH
37063: LD_INT 108
37065: PUSH
37066: LD_INT 109
37068: PUSH
37069: LD_INT 110
37071: PUSH
37072: LD_INT 111
37074: PUSH
37075: LD_INT 112
37077: PUSH
37078: LD_INT 114
37080: PUSH
37081: LD_INT 116
37083: PUSH
37084: LD_INT 117
37086: PUSH
37087: LD_INT 118
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: ST_TO_ADDR
37112: GO 39007
37114: LD_INT 11
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37122
37120: GO 37326
37122: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37123: LD_ADDR_VAR 0 2
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 3
37133: PUSH
37134: LD_INT 4
37136: PUSH
37137: LD_INT 5
37139: PUSH
37140: LD_INT 6
37142: PUSH
37143: LD_INT 7
37145: PUSH
37146: LD_INT 8
37148: PUSH
37149: LD_INT 9
37151: PUSH
37152: LD_INT 10
37154: PUSH
37155: LD_INT 11
37157: PUSH
37158: LD_INT 12
37160: PUSH
37161: LD_INT 13
37163: PUSH
37164: LD_INT 14
37166: PUSH
37167: LD_INT 15
37169: PUSH
37170: LD_INT 16
37172: PUSH
37173: LD_INT 17
37175: PUSH
37176: LD_INT 18
37178: PUSH
37179: LD_INT 19
37181: PUSH
37182: LD_INT 20
37184: PUSH
37185: LD_INT 21
37187: PUSH
37188: LD_INT 22
37190: PUSH
37191: LD_INT 23
37193: PUSH
37194: LD_INT 24
37196: PUSH
37197: LD_INT 25
37199: PUSH
37200: LD_INT 26
37202: PUSH
37203: LD_INT 28
37205: PUSH
37206: LD_INT 30
37208: PUSH
37209: LD_INT 31
37211: PUSH
37212: LD_INT 32
37214: PUSH
37215: LD_INT 34
37217: PUSH
37218: LD_INT 36
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 101
37256: PUSH
37257: LD_INT 102
37259: PUSH
37260: LD_INT 103
37262: PUSH
37263: LD_INT 104
37265: PUSH
37266: LD_INT 105
37268: PUSH
37269: LD_INT 106
37271: PUSH
37272: LD_INT 107
37274: PUSH
37275: LD_INT 108
37277: PUSH
37278: LD_INT 109
37280: PUSH
37281: LD_INT 110
37283: PUSH
37284: LD_INT 111
37286: PUSH
37287: LD_INT 112
37289: PUSH
37290: LD_INT 114
37292: PUSH
37293: LD_INT 116
37295: PUSH
37296: LD_INT 117
37298: PUSH
37299: LD_INT 118
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: ST_TO_ADDR
37324: GO 39007
37326: LD_INT 12
37328: DOUBLE
37329: EQUAL
37330: IFTRUE 37334
37332: GO 37554
37334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37335: LD_ADDR_VAR 0 2
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 3
37348: PUSH
37349: LD_INT 4
37351: PUSH
37352: LD_INT 5
37354: PUSH
37355: LD_INT 6
37357: PUSH
37358: LD_INT 7
37360: PUSH
37361: LD_INT 8
37363: PUSH
37364: LD_INT 9
37366: PUSH
37367: LD_INT 10
37369: PUSH
37370: LD_INT 11
37372: PUSH
37373: LD_INT 12
37375: PUSH
37376: LD_INT 13
37378: PUSH
37379: LD_INT 14
37381: PUSH
37382: LD_INT 15
37384: PUSH
37385: LD_INT 16
37387: PUSH
37388: LD_INT 17
37390: PUSH
37391: LD_INT 18
37393: PUSH
37394: LD_INT 19
37396: PUSH
37397: LD_INT 20
37399: PUSH
37400: LD_INT 21
37402: PUSH
37403: LD_INT 22
37405: PUSH
37406: LD_INT 23
37408: PUSH
37409: LD_INT 24
37411: PUSH
37412: LD_INT 25
37414: PUSH
37415: LD_INT 26
37417: PUSH
37418: LD_INT 27
37420: PUSH
37421: LD_INT 28
37423: PUSH
37424: LD_INT 30
37426: PUSH
37427: LD_INT 31
37429: PUSH
37430: LD_INT 32
37432: PUSH
37433: LD_INT 33
37435: PUSH
37436: LD_INT 34
37438: PUSH
37439: LD_INT 36
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 101
37480: PUSH
37481: LD_INT 102
37483: PUSH
37484: LD_INT 103
37486: PUSH
37487: LD_INT 104
37489: PUSH
37490: LD_INT 105
37492: PUSH
37493: LD_INT 106
37495: PUSH
37496: LD_INT 107
37498: PUSH
37499: LD_INT 108
37501: PUSH
37502: LD_INT 109
37504: PUSH
37505: LD_INT 110
37507: PUSH
37508: LD_INT 111
37510: PUSH
37511: LD_INT 112
37513: PUSH
37514: LD_INT 113
37516: PUSH
37517: LD_INT 114
37519: PUSH
37520: LD_INT 116
37522: PUSH
37523: LD_INT 117
37525: PUSH
37526: LD_INT 118
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: ST_TO_ADDR
37552: GO 39007
37554: LD_INT 13
37556: DOUBLE
37557: EQUAL
37558: IFTRUE 37562
37560: GO 37770
37562: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37563: LD_ADDR_VAR 0 2
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 4
37579: PUSH
37580: LD_INT 5
37582: PUSH
37583: LD_INT 8
37585: PUSH
37586: LD_INT 9
37588: PUSH
37589: LD_INT 10
37591: PUSH
37592: LD_INT 11
37594: PUSH
37595: LD_INT 12
37597: PUSH
37598: LD_INT 14
37600: PUSH
37601: LD_INT 15
37603: PUSH
37604: LD_INT 16
37606: PUSH
37607: LD_INT 17
37609: PUSH
37610: LD_INT 18
37612: PUSH
37613: LD_INT 19
37615: PUSH
37616: LD_INT 20
37618: PUSH
37619: LD_INT 21
37621: PUSH
37622: LD_INT 22
37624: PUSH
37625: LD_INT 23
37627: PUSH
37628: LD_INT 24
37630: PUSH
37631: LD_INT 25
37633: PUSH
37634: LD_INT 26
37636: PUSH
37637: LD_INT 27
37639: PUSH
37640: LD_INT 28
37642: PUSH
37643: LD_INT 30
37645: PUSH
37646: LD_INT 31
37648: PUSH
37649: LD_INT 32
37651: PUSH
37652: LD_INT 33
37654: PUSH
37655: LD_INT 34
37657: PUSH
37658: LD_INT 36
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 101
37696: PUSH
37697: LD_INT 102
37699: PUSH
37700: LD_INT 103
37702: PUSH
37703: LD_INT 104
37705: PUSH
37706: LD_INT 105
37708: PUSH
37709: LD_INT 106
37711: PUSH
37712: LD_INT 107
37714: PUSH
37715: LD_INT 108
37717: PUSH
37718: LD_INT 109
37720: PUSH
37721: LD_INT 110
37723: PUSH
37724: LD_INT 111
37726: PUSH
37727: LD_INT 112
37729: PUSH
37730: LD_INT 113
37732: PUSH
37733: LD_INT 114
37735: PUSH
37736: LD_INT 116
37738: PUSH
37739: LD_INT 117
37741: PUSH
37742: LD_INT 118
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: ST_TO_ADDR
37768: GO 39007
37770: LD_INT 14
37772: DOUBLE
37773: EQUAL
37774: IFTRUE 37778
37776: GO 38002
37778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37779: LD_ADDR_VAR 0 2
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: LD_INT 4
37795: PUSH
37796: LD_INT 5
37798: PUSH
37799: LD_INT 6
37801: PUSH
37802: LD_INT 7
37804: PUSH
37805: LD_INT 8
37807: PUSH
37808: LD_INT 9
37810: PUSH
37811: LD_INT 10
37813: PUSH
37814: LD_INT 11
37816: PUSH
37817: LD_INT 12
37819: PUSH
37820: LD_INT 13
37822: PUSH
37823: LD_INT 14
37825: PUSH
37826: LD_INT 15
37828: PUSH
37829: LD_INT 16
37831: PUSH
37832: LD_INT 17
37834: PUSH
37835: LD_INT 18
37837: PUSH
37838: LD_INT 19
37840: PUSH
37841: LD_INT 20
37843: PUSH
37844: LD_INT 21
37846: PUSH
37847: LD_INT 22
37849: PUSH
37850: LD_INT 23
37852: PUSH
37853: LD_INT 24
37855: PUSH
37856: LD_INT 25
37858: PUSH
37859: LD_INT 26
37861: PUSH
37862: LD_INT 27
37864: PUSH
37865: LD_INT 28
37867: PUSH
37868: LD_INT 29
37870: PUSH
37871: LD_INT 30
37873: PUSH
37874: LD_INT 31
37876: PUSH
37877: LD_INT 32
37879: PUSH
37880: LD_INT 33
37882: PUSH
37883: LD_INT 34
37885: PUSH
37886: LD_INT 36
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 101
37928: PUSH
37929: LD_INT 102
37931: PUSH
37932: LD_INT 103
37934: PUSH
37935: LD_INT 104
37937: PUSH
37938: LD_INT 105
37940: PUSH
37941: LD_INT 106
37943: PUSH
37944: LD_INT 107
37946: PUSH
37947: LD_INT 108
37949: PUSH
37950: LD_INT 109
37952: PUSH
37953: LD_INT 110
37955: PUSH
37956: LD_INT 111
37958: PUSH
37959: LD_INT 112
37961: PUSH
37962: LD_INT 113
37964: PUSH
37965: LD_INT 114
37967: PUSH
37968: LD_INT 116
37970: PUSH
37971: LD_INT 117
37973: PUSH
37974: LD_INT 118
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: ST_TO_ADDR
38000: GO 39007
38002: LD_INT 15
38004: DOUBLE
38005: EQUAL
38006: IFTRUE 38010
38008: GO 38234
38010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
38011: LD_ADDR_VAR 0 2
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 3
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: LD_INT 5
38030: PUSH
38031: LD_INT 6
38033: PUSH
38034: LD_INT 7
38036: PUSH
38037: LD_INT 8
38039: PUSH
38040: LD_INT 9
38042: PUSH
38043: LD_INT 10
38045: PUSH
38046: LD_INT 11
38048: PUSH
38049: LD_INT 12
38051: PUSH
38052: LD_INT 13
38054: PUSH
38055: LD_INT 14
38057: PUSH
38058: LD_INT 15
38060: PUSH
38061: LD_INT 16
38063: PUSH
38064: LD_INT 17
38066: PUSH
38067: LD_INT 18
38069: PUSH
38070: LD_INT 19
38072: PUSH
38073: LD_INT 20
38075: PUSH
38076: LD_INT 21
38078: PUSH
38079: LD_INT 22
38081: PUSH
38082: LD_INT 23
38084: PUSH
38085: LD_INT 24
38087: PUSH
38088: LD_INT 25
38090: PUSH
38091: LD_INT 26
38093: PUSH
38094: LD_INT 27
38096: PUSH
38097: LD_INT 28
38099: PUSH
38100: LD_INT 29
38102: PUSH
38103: LD_INT 30
38105: PUSH
38106: LD_INT 31
38108: PUSH
38109: LD_INT 32
38111: PUSH
38112: LD_INT 33
38114: PUSH
38115: LD_INT 34
38117: PUSH
38118: LD_INT 36
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 101
38160: PUSH
38161: LD_INT 102
38163: PUSH
38164: LD_INT 103
38166: PUSH
38167: LD_INT 104
38169: PUSH
38170: LD_INT 105
38172: PUSH
38173: LD_INT 106
38175: PUSH
38176: LD_INT 107
38178: PUSH
38179: LD_INT 108
38181: PUSH
38182: LD_INT 109
38184: PUSH
38185: LD_INT 110
38187: PUSH
38188: LD_INT 111
38190: PUSH
38191: LD_INT 112
38193: PUSH
38194: LD_INT 113
38196: PUSH
38197: LD_INT 114
38199: PUSH
38200: LD_INT 116
38202: PUSH
38203: LD_INT 117
38205: PUSH
38206: LD_INT 118
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: ST_TO_ADDR
38232: GO 39007
38234: LD_INT 16
38236: DOUBLE
38237: EQUAL
38238: IFTRUE 38242
38240: GO 38378
38242: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38243: LD_ADDR_VAR 0 2
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: LD_INT 4
38253: PUSH
38254: LD_INT 5
38256: PUSH
38257: LD_INT 7
38259: PUSH
38260: LD_INT 11
38262: PUSH
38263: LD_INT 12
38265: PUSH
38266: LD_INT 15
38268: PUSH
38269: LD_INT 16
38271: PUSH
38272: LD_INT 20
38274: PUSH
38275: LD_INT 21
38277: PUSH
38278: LD_INT 22
38280: PUSH
38281: LD_INT 23
38283: PUSH
38284: LD_INT 25
38286: PUSH
38287: LD_INT 26
38289: PUSH
38290: LD_INT 30
38292: PUSH
38293: LD_INT 31
38295: PUSH
38296: LD_INT 32
38298: PUSH
38299: LD_INT 33
38301: PUSH
38302: LD_INT 34
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 101
38328: PUSH
38329: LD_INT 102
38331: PUSH
38332: LD_INT 103
38334: PUSH
38335: LD_INT 106
38337: PUSH
38338: LD_INT 108
38340: PUSH
38341: LD_INT 112
38343: PUSH
38344: LD_INT 113
38346: PUSH
38347: LD_INT 114
38349: PUSH
38350: LD_INT 116
38352: PUSH
38353: LD_INT 117
38355: PUSH
38356: LD_INT 118
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: ST_TO_ADDR
38376: GO 39007
38378: LD_INT 17
38380: DOUBLE
38381: EQUAL
38382: IFTRUE 38386
38384: GO 38610
38386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38387: LD_ADDR_VAR 0 2
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: LD_INT 4
38403: PUSH
38404: LD_INT 5
38406: PUSH
38407: LD_INT 6
38409: PUSH
38410: LD_INT 7
38412: PUSH
38413: LD_INT 8
38415: PUSH
38416: LD_INT 9
38418: PUSH
38419: LD_INT 10
38421: PUSH
38422: LD_INT 11
38424: PUSH
38425: LD_INT 12
38427: PUSH
38428: LD_INT 13
38430: PUSH
38431: LD_INT 14
38433: PUSH
38434: LD_INT 15
38436: PUSH
38437: LD_INT 16
38439: PUSH
38440: LD_INT 17
38442: PUSH
38443: LD_INT 18
38445: PUSH
38446: LD_INT 19
38448: PUSH
38449: LD_INT 20
38451: PUSH
38452: LD_INT 21
38454: PUSH
38455: LD_INT 22
38457: PUSH
38458: LD_INT 23
38460: PUSH
38461: LD_INT 24
38463: PUSH
38464: LD_INT 25
38466: PUSH
38467: LD_INT 26
38469: PUSH
38470: LD_INT 27
38472: PUSH
38473: LD_INT 28
38475: PUSH
38476: LD_INT 29
38478: PUSH
38479: LD_INT 30
38481: PUSH
38482: LD_INT 31
38484: PUSH
38485: LD_INT 32
38487: PUSH
38488: LD_INT 33
38490: PUSH
38491: LD_INT 34
38493: PUSH
38494: LD_INT 36
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 101
38536: PUSH
38537: LD_INT 102
38539: PUSH
38540: LD_INT 103
38542: PUSH
38543: LD_INT 104
38545: PUSH
38546: LD_INT 105
38548: PUSH
38549: LD_INT 106
38551: PUSH
38552: LD_INT 107
38554: PUSH
38555: LD_INT 108
38557: PUSH
38558: LD_INT 109
38560: PUSH
38561: LD_INT 110
38563: PUSH
38564: LD_INT 111
38566: PUSH
38567: LD_INT 112
38569: PUSH
38570: LD_INT 113
38572: PUSH
38573: LD_INT 114
38575: PUSH
38576: LD_INT 116
38578: PUSH
38579: LD_INT 117
38581: PUSH
38582: LD_INT 118
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: ST_TO_ADDR
38608: GO 39007
38610: LD_INT 18
38612: DOUBLE
38613: EQUAL
38614: IFTRUE 38618
38616: GO 38766
38618: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38619: LD_ADDR_VAR 0 2
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 4
38629: PUSH
38630: LD_INT 5
38632: PUSH
38633: LD_INT 7
38635: PUSH
38636: LD_INT 11
38638: PUSH
38639: LD_INT 12
38641: PUSH
38642: LD_INT 15
38644: PUSH
38645: LD_INT 16
38647: PUSH
38648: LD_INT 20
38650: PUSH
38651: LD_INT 21
38653: PUSH
38654: LD_INT 22
38656: PUSH
38657: LD_INT 23
38659: PUSH
38660: LD_INT 25
38662: PUSH
38663: LD_INT 26
38665: PUSH
38666: LD_INT 30
38668: PUSH
38669: LD_INT 31
38671: PUSH
38672: LD_INT 32
38674: PUSH
38675: LD_INT 33
38677: PUSH
38678: LD_INT 34
38680: PUSH
38681: LD_INT 35
38683: PUSH
38684: LD_INT 36
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 101
38712: PUSH
38713: LD_INT 102
38715: PUSH
38716: LD_INT 103
38718: PUSH
38719: LD_INT 106
38721: PUSH
38722: LD_INT 108
38724: PUSH
38725: LD_INT 112
38727: PUSH
38728: LD_INT 113
38730: PUSH
38731: LD_INT 114
38733: PUSH
38734: LD_INT 115
38736: PUSH
38737: LD_INT 116
38739: PUSH
38740: LD_INT 117
38742: PUSH
38743: LD_INT 118
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: ST_TO_ADDR
38764: GO 39007
38766: LD_INT 19
38768: DOUBLE
38769: EQUAL
38770: IFTRUE 38774
38772: GO 39006
38774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38775: LD_ADDR_VAR 0 2
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 4
38791: PUSH
38792: LD_INT 5
38794: PUSH
38795: LD_INT 6
38797: PUSH
38798: LD_INT 7
38800: PUSH
38801: LD_INT 8
38803: PUSH
38804: LD_INT 9
38806: PUSH
38807: LD_INT 10
38809: PUSH
38810: LD_INT 11
38812: PUSH
38813: LD_INT 12
38815: PUSH
38816: LD_INT 13
38818: PUSH
38819: LD_INT 14
38821: PUSH
38822: LD_INT 15
38824: PUSH
38825: LD_INT 16
38827: PUSH
38828: LD_INT 17
38830: PUSH
38831: LD_INT 18
38833: PUSH
38834: LD_INT 19
38836: PUSH
38837: LD_INT 20
38839: PUSH
38840: LD_INT 21
38842: PUSH
38843: LD_INT 22
38845: PUSH
38846: LD_INT 23
38848: PUSH
38849: LD_INT 24
38851: PUSH
38852: LD_INT 25
38854: PUSH
38855: LD_INT 26
38857: PUSH
38858: LD_INT 27
38860: PUSH
38861: LD_INT 28
38863: PUSH
38864: LD_INT 29
38866: PUSH
38867: LD_INT 30
38869: PUSH
38870: LD_INT 31
38872: PUSH
38873: LD_INT 32
38875: PUSH
38876: LD_INT 33
38878: PUSH
38879: LD_INT 34
38881: PUSH
38882: LD_INT 35
38884: PUSH
38885: LD_INT 36
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 101
38928: PUSH
38929: LD_INT 102
38931: PUSH
38932: LD_INT 103
38934: PUSH
38935: LD_INT 104
38937: PUSH
38938: LD_INT 105
38940: PUSH
38941: LD_INT 106
38943: PUSH
38944: LD_INT 107
38946: PUSH
38947: LD_INT 108
38949: PUSH
38950: LD_INT 109
38952: PUSH
38953: LD_INT 110
38955: PUSH
38956: LD_INT 111
38958: PUSH
38959: LD_INT 112
38961: PUSH
38962: LD_INT 113
38964: PUSH
38965: LD_INT 114
38967: PUSH
38968: LD_INT 115
38970: PUSH
38971: LD_INT 116
38973: PUSH
38974: LD_INT 117
38976: PUSH
38977: LD_INT 118
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: ST_TO_ADDR
39004: GO 39007
39006: POP
// end else
39007: GO 39238
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
39009: LD_ADDR_VAR 0 2
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: LD_INT 5
39028: PUSH
39029: LD_INT 6
39031: PUSH
39032: LD_INT 7
39034: PUSH
39035: LD_INT 8
39037: PUSH
39038: LD_INT 9
39040: PUSH
39041: LD_INT 10
39043: PUSH
39044: LD_INT 11
39046: PUSH
39047: LD_INT 12
39049: PUSH
39050: LD_INT 13
39052: PUSH
39053: LD_INT 14
39055: PUSH
39056: LD_INT 15
39058: PUSH
39059: LD_INT 16
39061: PUSH
39062: LD_INT 17
39064: PUSH
39065: LD_INT 18
39067: PUSH
39068: LD_INT 19
39070: PUSH
39071: LD_INT 20
39073: PUSH
39074: LD_INT 21
39076: PUSH
39077: LD_INT 22
39079: PUSH
39080: LD_INT 23
39082: PUSH
39083: LD_INT 24
39085: PUSH
39086: LD_INT 25
39088: PUSH
39089: LD_INT 26
39091: PUSH
39092: LD_INT 27
39094: PUSH
39095: LD_INT 28
39097: PUSH
39098: LD_INT 29
39100: PUSH
39101: LD_INT 30
39103: PUSH
39104: LD_INT 31
39106: PUSH
39107: LD_INT 32
39109: PUSH
39110: LD_INT 33
39112: PUSH
39113: LD_INT 34
39115: PUSH
39116: LD_INT 35
39118: PUSH
39119: LD_INT 36
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 101
39162: PUSH
39163: LD_INT 102
39165: PUSH
39166: LD_INT 103
39168: PUSH
39169: LD_INT 104
39171: PUSH
39172: LD_INT 105
39174: PUSH
39175: LD_INT 106
39177: PUSH
39178: LD_INT 107
39180: PUSH
39181: LD_INT 108
39183: PUSH
39184: LD_INT 109
39186: PUSH
39187: LD_INT 110
39189: PUSH
39190: LD_INT 111
39192: PUSH
39193: LD_INT 112
39195: PUSH
39196: LD_INT 113
39198: PUSH
39199: LD_INT 114
39201: PUSH
39202: LD_INT 115
39204: PUSH
39205: LD_INT 116
39207: PUSH
39208: LD_INT 117
39210: PUSH
39211: LD_INT 118
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// if result then
39238: LD_VAR 0 2
39242: IFFALSE 40028
// begin normal :=  ;
39244: LD_ADDR_VAR 0 5
39248: PUSH
39249: LD_STRING 
39251: ST_TO_ADDR
// hardcore :=  ;
39252: LD_ADDR_VAR 0 6
39256: PUSH
39257: LD_STRING 
39259: ST_TO_ADDR
// active :=  ;
39260: LD_ADDR_VAR 0 7
39264: PUSH
39265: LD_STRING 
39267: ST_TO_ADDR
// for i = 1 to normalCounter do
39268: LD_ADDR_VAR 0 8
39272: PUSH
39273: DOUBLE
39274: LD_INT 1
39276: DEC
39277: ST_TO_ADDR
39278: LD_EXP 88
39282: PUSH
39283: FOR_TO
39284: IFFALSE 39385
// begin tmp := 0 ;
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: LD_STRING 0
39293: ST_TO_ADDR
// if result [ 1 ] then
39294: LD_VAR 0 2
39298: PUSH
39299: LD_INT 1
39301: ARRAY
39302: IFFALSE 39367
// if result [ 1 ] [ 1 ] = i then
39304: LD_VAR 0 2
39308: PUSH
39309: LD_INT 1
39311: ARRAY
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PUSH
39317: LD_VAR 0 8
39321: EQUAL
39322: IFFALSE 39367
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39324: LD_ADDR_VAR 0 2
39328: PUSH
39329: LD_VAR 0 2
39333: PPUSH
39334: LD_INT 1
39336: PPUSH
39337: LD_VAR 0 2
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PPUSH
39346: LD_INT 1
39348: PPUSH
39349: CALL_OW 3
39353: PPUSH
39354: CALL_OW 1
39358: ST_TO_ADDR
// tmp := 1 ;
39359: LD_ADDR_VAR 0 3
39363: PUSH
39364: LD_STRING 1
39366: ST_TO_ADDR
// end ; normal := normal & tmp ;
39367: LD_ADDR_VAR 0 5
39371: PUSH
39372: LD_VAR 0 5
39376: PUSH
39377: LD_VAR 0 3
39381: STR
39382: ST_TO_ADDR
// end ;
39383: GO 39283
39385: POP
39386: POP
// for i = 1 to hardcoreCounter do
39387: LD_ADDR_VAR 0 8
39391: PUSH
39392: DOUBLE
39393: LD_INT 1
39395: DEC
39396: ST_TO_ADDR
39397: LD_EXP 89
39401: PUSH
39402: FOR_TO
39403: IFFALSE 39508
// begin tmp := 0 ;
39405: LD_ADDR_VAR 0 3
39409: PUSH
39410: LD_STRING 0
39412: ST_TO_ADDR
// if result [ 2 ] then
39413: LD_VAR 0 2
39417: PUSH
39418: LD_INT 2
39420: ARRAY
39421: IFFALSE 39490
// if result [ 2 ] [ 1 ] = 100 + i then
39423: LD_VAR 0 2
39427: PUSH
39428: LD_INT 2
39430: ARRAY
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: PUSH
39436: LD_INT 100
39438: PUSH
39439: LD_VAR 0 8
39443: PLUS
39444: EQUAL
39445: IFFALSE 39490
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39447: LD_ADDR_VAR 0 2
39451: PUSH
39452: LD_VAR 0 2
39456: PPUSH
39457: LD_INT 2
39459: PPUSH
39460: LD_VAR 0 2
39464: PUSH
39465: LD_INT 2
39467: ARRAY
39468: PPUSH
39469: LD_INT 1
39471: PPUSH
39472: CALL_OW 3
39476: PPUSH
39477: CALL_OW 1
39481: ST_TO_ADDR
// tmp := 1 ;
39482: LD_ADDR_VAR 0 3
39486: PUSH
39487: LD_STRING 1
39489: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39490: LD_ADDR_VAR 0 6
39494: PUSH
39495: LD_VAR 0 6
39499: PUSH
39500: LD_VAR 0 3
39504: STR
39505: ST_TO_ADDR
// end ;
39506: GO 39402
39508: POP
39509: POP
// if isGameLoad then
39510: LD_VAR 0 1
39514: IFFALSE 39989
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39516: LD_ADDR_VAR 0 4
39520: PUSH
39521: LD_EXP 92
39525: PUSH
39526: LD_EXP 91
39530: PUSH
39531: LD_EXP 93
39535: PUSH
39536: LD_EXP 90
39540: PUSH
39541: LD_EXP 94
39545: PUSH
39546: LD_EXP 95
39550: PUSH
39551: LD_EXP 96
39555: PUSH
39556: LD_EXP 97
39560: PUSH
39561: LD_EXP 98
39565: PUSH
39566: LD_EXP 99
39570: PUSH
39571: LD_EXP 100
39575: PUSH
39576: LD_EXP 101
39580: PUSH
39581: LD_EXP 102
39585: PUSH
39586: LD_EXP 103
39590: PUSH
39591: LD_EXP 111
39595: PUSH
39596: LD_EXP 112
39600: PUSH
39601: LD_EXP 113
39605: PUSH
39606: LD_EXP 114
39610: PUSH
39611: LD_EXP 116
39615: PUSH
39616: LD_EXP 117
39620: PUSH
39621: LD_EXP 118
39625: PUSH
39626: LD_EXP 121
39630: PUSH
39631: LD_EXP 123
39635: PUSH
39636: LD_EXP 124
39640: PUSH
39641: LD_EXP 125
39645: PUSH
39646: LD_EXP 127
39650: PUSH
39651: LD_EXP 128
39655: PUSH
39656: LD_EXP 131
39660: PUSH
39661: LD_EXP 132
39665: PUSH
39666: LD_EXP 133
39670: PUSH
39671: LD_EXP 134
39675: PUSH
39676: LD_EXP 135
39680: PUSH
39681: LD_EXP 136
39685: PUSH
39686: LD_EXP 137
39690: PUSH
39691: LD_EXP 138
39695: PUSH
39696: LD_EXP 139
39700: PUSH
39701: LD_EXP 104
39705: PUSH
39706: LD_EXP 105
39710: PUSH
39711: LD_EXP 108
39715: PUSH
39716: LD_EXP 109
39720: PUSH
39721: LD_EXP 110
39725: PUSH
39726: LD_EXP 106
39730: PUSH
39731: LD_EXP 107
39735: PUSH
39736: LD_EXP 115
39740: PUSH
39741: LD_EXP 119
39745: PUSH
39746: LD_EXP 120
39750: PUSH
39751: LD_EXP 122
39755: PUSH
39756: LD_EXP 126
39760: PUSH
39761: LD_EXP 129
39765: PUSH
39766: LD_EXP 130
39770: PUSH
39771: LD_EXP 140
39775: PUSH
39776: LD_EXP 141
39780: PUSH
39781: LD_EXP 142
39785: PUSH
39786: LD_EXP 143
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: ST_TO_ADDR
// tmp :=  ;
39847: LD_ADDR_VAR 0 3
39851: PUSH
39852: LD_STRING 
39854: ST_TO_ADDR
// for i = 1 to normalCounter do
39855: LD_ADDR_VAR 0 8
39859: PUSH
39860: DOUBLE
39861: LD_INT 1
39863: DEC
39864: ST_TO_ADDR
39865: LD_EXP 88
39869: PUSH
39870: FOR_TO
39871: IFFALSE 39907
// begin if flags [ i ] then
39873: LD_VAR 0 4
39877: PUSH
39878: LD_VAR 0 8
39882: ARRAY
39883: IFFALSE 39905
// tmp := tmp & i & ; ;
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_VAR 0 3
39894: PUSH
39895: LD_VAR 0 8
39899: STR
39900: PUSH
39901: LD_STRING ;
39903: STR
39904: ST_TO_ADDR
// end ;
39905: GO 39870
39907: POP
39908: POP
// for i = 1 to hardcoreCounter do
39909: LD_ADDR_VAR 0 8
39913: PUSH
39914: DOUBLE
39915: LD_INT 1
39917: DEC
39918: ST_TO_ADDR
39919: LD_EXP 89
39923: PUSH
39924: FOR_TO
39925: IFFALSE 39971
// begin if flags [ normalCounter + i ] then
39927: LD_VAR 0 4
39931: PUSH
39932: LD_EXP 88
39936: PUSH
39937: LD_VAR 0 8
39941: PLUS
39942: ARRAY
39943: IFFALSE 39969
// tmp := tmp & ( 100 + i ) & ; ;
39945: LD_ADDR_VAR 0 3
39949: PUSH
39950: LD_VAR 0 3
39954: PUSH
39955: LD_INT 100
39957: PUSH
39958: LD_VAR 0 8
39962: PLUS
39963: STR
39964: PUSH
39965: LD_STRING ;
39967: STR
39968: ST_TO_ADDR
// end ;
39969: GO 39924
39971: POP
39972: POP
// if tmp then
39973: LD_VAR 0 3
39977: IFFALSE 39989
// active := tmp ;
39979: LD_ADDR_VAR 0 7
39983: PUSH
39984: LD_VAR 0 3
39988: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39989: LD_STRING getStreamItemsFromMission("
39991: PUSH
39992: LD_VAR 0 5
39996: STR
39997: PUSH
39998: LD_STRING ","
40000: STR
40001: PUSH
40002: LD_VAR 0 6
40006: STR
40007: PUSH
40008: LD_STRING ","
40010: STR
40011: PUSH
40012: LD_VAR 0 7
40016: STR
40017: PUSH
40018: LD_STRING ")
40020: STR
40021: PPUSH
40022: CALL_OW 559
// end else
40026: GO 40035
// ToLua ( getStreamItemsFromMission("","","") ) ;
40028: LD_STRING getStreamItemsFromMission("","","")
40030: PPUSH
40031: CALL_OW 559
// end ;
40035: LD_VAR 0 2
40039: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
40040: LD_EXP 87
40044: PUSH
40045: LD_EXP 92
40049: AND
40050: IFFALSE 40174
40052: GO 40054
40054: DISABLE
40055: LD_INT 0
40057: PPUSH
40058: PPUSH
// begin enable ;
40059: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
40060: LD_ADDR_VAR 0 2
40064: PUSH
40065: LD_INT 22
40067: PUSH
40068: LD_OWVAR 2
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 34
40082: PUSH
40083: LD_INT 7
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 34
40092: PUSH
40093: LD_INT 45
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 34
40102: PUSH
40103: LD_INT 28
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 34
40112: PUSH
40113: LD_INT 47
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PPUSH
40131: CALL_OW 69
40135: ST_TO_ADDR
// if not tmp then
40136: LD_VAR 0 2
40140: NOT
40141: IFFALSE 40145
// exit ;
40143: GO 40174
// for i in tmp do
40145: LD_ADDR_VAR 0 1
40149: PUSH
40150: LD_VAR 0 2
40154: PUSH
40155: FOR_IN
40156: IFFALSE 40172
// begin SetLives ( i , 0 ) ;
40158: LD_VAR 0 1
40162: PPUSH
40163: LD_INT 0
40165: PPUSH
40166: CALL_OW 234
// end ;
40170: GO 40155
40172: POP
40173: POP
// end ;
40174: PPOPN 2
40176: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40177: LD_EXP 87
40181: PUSH
40182: LD_EXP 93
40186: AND
40187: IFFALSE 40271
40189: GO 40191
40191: DISABLE
40192: LD_INT 0
40194: PPUSH
40195: PPUSH
// begin enable ;
40196: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40197: LD_ADDR_VAR 0 2
40201: PUSH
40202: LD_INT 22
40204: PUSH
40205: LD_OWVAR 2
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 32
40216: PUSH
40217: LD_INT 3
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PPUSH
40228: CALL_OW 69
40232: ST_TO_ADDR
// if not tmp then
40233: LD_VAR 0 2
40237: NOT
40238: IFFALSE 40242
// exit ;
40240: GO 40271
// for i in tmp do
40242: LD_ADDR_VAR 0 1
40246: PUSH
40247: LD_VAR 0 2
40251: PUSH
40252: FOR_IN
40253: IFFALSE 40269
// begin SetLives ( i , 0 ) ;
40255: LD_VAR 0 1
40259: PPUSH
40260: LD_INT 0
40262: PPUSH
40263: CALL_OW 234
// end ;
40267: GO 40252
40269: POP
40270: POP
// end ;
40271: PPOPN 2
40273: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40274: LD_EXP 87
40278: PUSH
40279: LD_EXP 90
40283: AND
40284: IFFALSE 40377
40286: GO 40288
40288: DISABLE
40289: LD_INT 0
40291: PPUSH
// begin enable ;
40292: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40293: LD_ADDR_VAR 0 1
40297: PUSH
40298: LD_INT 22
40300: PUSH
40301: LD_OWVAR 2
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 25
40315: PUSH
40316: LD_INT 5
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 25
40325: PUSH
40326: LD_INT 9
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 25
40335: PUSH
40336: LD_INT 8
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PPUSH
40353: CALL_OW 69
40357: PUSH
40358: FOR_IN
40359: IFFALSE 40375
// begin SetClass ( i , 1 ) ;
40361: LD_VAR 0 1
40365: PPUSH
40366: LD_INT 1
40368: PPUSH
40369: CALL_OW 336
// end ;
40373: GO 40358
40375: POP
40376: POP
// end ;
40377: PPOPN 1
40379: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40380: LD_EXP 87
40384: PUSH
40385: LD_EXP 91
40389: AND
40390: PUSH
40391: LD_OWVAR 65
40395: PUSH
40396: LD_INT 7
40398: LESS
40399: AND
40400: IFFALSE 40414
40402: GO 40404
40404: DISABLE
// begin enable ;
40405: ENABLE
// game_speed := 7 ;
40406: LD_ADDR_OWVAR 65
40410: PUSH
40411: LD_INT 7
40413: ST_TO_ADDR
// end ;
40414: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40415: LD_EXP 87
40419: PUSH
40420: LD_EXP 94
40424: AND
40425: IFFALSE 40627
40427: GO 40429
40429: DISABLE
40430: LD_INT 0
40432: PPUSH
40433: PPUSH
40434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: LD_INT 81
40442: PUSH
40443: LD_OWVAR 2
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 21
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PPUSH
40466: CALL_OW 69
40470: ST_TO_ADDR
// if not tmp then
40471: LD_VAR 0 3
40475: NOT
40476: IFFALSE 40480
// exit ;
40478: GO 40627
// if tmp > 5 then
40480: LD_VAR 0 3
40484: PUSH
40485: LD_INT 5
40487: GREATER
40488: IFFALSE 40500
// k := 5 else
40490: LD_ADDR_VAR 0 2
40494: PUSH
40495: LD_INT 5
40497: ST_TO_ADDR
40498: GO 40510
// k := tmp ;
40500: LD_ADDR_VAR 0 2
40504: PUSH
40505: LD_VAR 0 3
40509: ST_TO_ADDR
// for i := 1 to k do
40510: LD_ADDR_VAR 0 1
40514: PUSH
40515: DOUBLE
40516: LD_INT 1
40518: DEC
40519: ST_TO_ADDR
40520: LD_VAR 0 2
40524: PUSH
40525: FOR_TO
40526: IFFALSE 40625
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40528: LD_VAR 0 3
40532: PUSH
40533: LD_VAR 0 1
40537: ARRAY
40538: PPUSH
40539: LD_VAR 0 1
40543: PUSH
40544: LD_INT 4
40546: MOD
40547: PUSH
40548: LD_INT 1
40550: PLUS
40551: PPUSH
40552: CALL_OW 259
40556: PUSH
40557: LD_INT 10
40559: LESS
40560: IFFALSE 40623
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40562: LD_VAR 0 3
40566: PUSH
40567: LD_VAR 0 1
40571: ARRAY
40572: PPUSH
40573: LD_VAR 0 1
40577: PUSH
40578: LD_INT 4
40580: MOD
40581: PUSH
40582: LD_INT 1
40584: PLUS
40585: PPUSH
40586: LD_VAR 0 3
40590: PUSH
40591: LD_VAR 0 1
40595: ARRAY
40596: PPUSH
40597: LD_VAR 0 1
40601: PUSH
40602: LD_INT 4
40604: MOD
40605: PUSH
40606: LD_INT 1
40608: PLUS
40609: PPUSH
40610: CALL_OW 259
40614: PUSH
40615: LD_INT 1
40617: PLUS
40618: PPUSH
40619: CALL_OW 237
40623: GO 40525
40625: POP
40626: POP
// end ;
40627: PPOPN 3
40629: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40630: LD_EXP 87
40634: PUSH
40635: LD_EXP 95
40639: AND
40640: IFFALSE 40660
40642: GO 40644
40644: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40645: LD_INT 4
40647: PPUSH
40648: LD_OWVAR 2
40652: PPUSH
40653: LD_INT 0
40655: PPUSH
40656: CALL_OW 324
40660: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40661: LD_EXP 87
40665: PUSH
40666: LD_EXP 124
40670: AND
40671: IFFALSE 40691
40673: GO 40675
40675: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40676: LD_INT 19
40678: PPUSH
40679: LD_OWVAR 2
40683: PPUSH
40684: LD_INT 0
40686: PPUSH
40687: CALL_OW 324
40691: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40692: LD_EXP 87
40696: PUSH
40697: LD_EXP 96
40701: AND
40702: IFFALSE 40804
40704: GO 40706
40706: DISABLE
40707: LD_INT 0
40709: PPUSH
40710: PPUSH
// begin enable ;
40711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40712: LD_ADDR_VAR 0 2
40716: PUSH
40717: LD_INT 22
40719: PUSH
40720: LD_OWVAR 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 34
40734: PUSH
40735: LD_INT 11
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 34
40744: PUSH
40745: LD_INT 30
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PPUSH
40761: CALL_OW 69
40765: ST_TO_ADDR
// if not tmp then
40766: LD_VAR 0 2
40770: NOT
40771: IFFALSE 40775
// exit ;
40773: GO 40804
// for i in tmp do
40775: LD_ADDR_VAR 0 1
40779: PUSH
40780: LD_VAR 0 2
40784: PUSH
40785: FOR_IN
40786: IFFALSE 40802
// begin SetLives ( i , 0 ) ;
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_INT 0
40795: PPUSH
40796: CALL_OW 234
// end ;
40800: GO 40785
40802: POP
40803: POP
// end ;
40804: PPOPN 2
40806: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40807: LD_EXP 87
40811: PUSH
40812: LD_EXP 97
40816: AND
40817: IFFALSE 40837
40819: GO 40821
40821: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40822: LD_INT 32
40824: PPUSH
40825: LD_OWVAR 2
40829: PPUSH
40830: LD_INT 0
40832: PPUSH
40833: CALL_OW 324
40837: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40838: LD_EXP 87
40842: PUSH
40843: LD_EXP 98
40847: AND
40848: IFFALSE 41029
40850: GO 40852
40852: DISABLE
40853: LD_INT 0
40855: PPUSH
40856: PPUSH
40857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40858: LD_ADDR_VAR 0 2
40862: PUSH
40863: LD_INT 22
40865: PUSH
40866: LD_OWVAR 2
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 33
40877: PUSH
40878: LD_INT 3
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PPUSH
40889: CALL_OW 69
40893: ST_TO_ADDR
// if not tmp then
40894: LD_VAR 0 2
40898: NOT
40899: IFFALSE 40903
// exit ;
40901: GO 41029
// side := 0 ;
40903: LD_ADDR_VAR 0 3
40907: PUSH
40908: LD_INT 0
40910: ST_TO_ADDR
// for i := 1 to 8 do
40911: LD_ADDR_VAR 0 1
40915: PUSH
40916: DOUBLE
40917: LD_INT 1
40919: DEC
40920: ST_TO_ADDR
40921: LD_INT 8
40923: PUSH
40924: FOR_TO
40925: IFFALSE 40973
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40927: LD_OWVAR 2
40931: PUSH
40932: LD_VAR 0 1
40936: NONEQUAL
40937: PUSH
40938: LD_OWVAR 2
40942: PPUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 81
40952: PUSH
40953: LD_INT 2
40955: EQUAL
40956: AND
40957: IFFALSE 40971
// begin side := i ;
40959: LD_ADDR_VAR 0 3
40963: PUSH
40964: LD_VAR 0 1
40968: ST_TO_ADDR
// break ;
40969: GO 40973
// end ;
40971: GO 40924
40973: POP
40974: POP
// if not side then
40975: LD_VAR 0 3
40979: NOT
40980: IFFALSE 40984
// exit ;
40982: GO 41029
// for i := 1 to tmp do
40984: LD_ADDR_VAR 0 1
40988: PUSH
40989: DOUBLE
40990: LD_INT 1
40992: DEC
40993: ST_TO_ADDR
40994: LD_VAR 0 2
40998: PUSH
40999: FOR_TO
41000: IFFALSE 41027
// if Prob ( 60 ) then
41002: LD_INT 60
41004: PPUSH
41005: CALL_OW 13
41009: IFFALSE 41025
// SetSide ( i , side ) ;
41011: LD_VAR 0 1
41015: PPUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: CALL_OW 235
41025: GO 40999
41027: POP
41028: POP
// end ;
41029: PPOPN 3
41031: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
41032: LD_EXP 87
41036: PUSH
41037: LD_EXP 100
41041: AND
41042: IFFALSE 41161
41044: GO 41046
41046: DISABLE
41047: LD_INT 0
41049: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
41050: LD_ADDR_VAR 0 1
41054: PUSH
41055: LD_INT 22
41057: PUSH
41058: LD_OWVAR 2
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 21
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: LD_INT 23
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: PPUSH
41099: CALL_OW 69
41103: PUSH
41104: FOR_IN
41105: IFFALSE 41159
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 257
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: LD_INT 4
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: IN
41135: IFFALSE 41157
// SetClass ( un , rand ( 1 , 4 ) ) ;
41137: LD_VAR 0 1
41141: PPUSH
41142: LD_INT 1
41144: PPUSH
41145: LD_INT 4
41147: PPUSH
41148: CALL_OW 12
41152: PPUSH
41153: CALL_OW 336
41157: GO 41104
41159: POP
41160: POP
// end ;
41161: PPOPN 1
41163: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41164: LD_EXP 87
41168: PUSH
41169: LD_EXP 99
41173: AND
41174: IFFALSE 41253
41176: GO 41178
41178: DISABLE
41179: LD_INT 0
41181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41182: LD_ADDR_VAR 0 1
41186: PUSH
41187: LD_INT 22
41189: PUSH
41190: LD_OWVAR 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 21
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PPUSH
41213: CALL_OW 69
41217: ST_TO_ADDR
// if not tmp then
41218: LD_VAR 0 1
41222: NOT
41223: IFFALSE 41227
// exit ;
41225: GO 41253
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41227: LD_VAR 0 1
41231: PUSH
41232: LD_INT 1
41234: PPUSH
41235: LD_VAR 0 1
41239: PPUSH
41240: CALL_OW 12
41244: ARRAY
41245: PPUSH
41246: LD_INT 100
41248: PPUSH
41249: CALL_OW 234
// end ;
41253: PPOPN 1
41255: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41256: LD_EXP 87
41260: PUSH
41261: LD_EXP 101
41265: AND
41266: IFFALSE 41364
41268: GO 41270
41270: DISABLE
41271: LD_INT 0
41273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41274: LD_ADDR_VAR 0 1
41278: PUSH
41279: LD_INT 22
41281: PUSH
41282: LD_OWVAR 2
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 21
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PPUSH
41305: CALL_OW 69
41309: ST_TO_ADDR
// if not tmp then
41310: LD_VAR 0 1
41314: NOT
41315: IFFALSE 41319
// exit ;
41317: GO 41364
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41319: LD_VAR 0 1
41323: PUSH
41324: LD_INT 1
41326: PPUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 12
41336: ARRAY
41337: PPUSH
41338: LD_INT 1
41340: PPUSH
41341: LD_INT 4
41343: PPUSH
41344: CALL_OW 12
41348: PPUSH
41349: LD_INT 3000
41351: PPUSH
41352: LD_INT 9000
41354: PPUSH
41355: CALL_OW 12
41359: PPUSH
41360: CALL_OW 492
// end ;
41364: PPOPN 1
41366: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41367: LD_EXP 87
41371: PUSH
41372: LD_EXP 102
41376: AND
41377: IFFALSE 41397
41379: GO 41381
41381: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41382: LD_INT 1
41384: PPUSH
41385: LD_OWVAR 2
41389: PPUSH
41390: LD_INT 0
41392: PPUSH
41393: CALL_OW 324
41397: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41398: LD_EXP 87
41402: PUSH
41403: LD_EXP 103
41407: AND
41408: IFFALSE 41491
41410: GO 41412
41412: DISABLE
41413: LD_INT 0
41415: PPUSH
41416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41417: LD_ADDR_VAR 0 2
41421: PUSH
41422: LD_INT 22
41424: PUSH
41425: LD_OWVAR 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 21
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PPUSH
41448: CALL_OW 69
41452: ST_TO_ADDR
// if not tmp then
41453: LD_VAR 0 2
41457: NOT
41458: IFFALSE 41462
// exit ;
41460: GO 41491
// for i in tmp do
41462: LD_ADDR_VAR 0 1
41466: PUSH
41467: LD_VAR 0 2
41471: PUSH
41472: FOR_IN
41473: IFFALSE 41489
// SetBLevel ( i , 10 ) ;
41475: LD_VAR 0 1
41479: PPUSH
41480: LD_INT 10
41482: PPUSH
41483: CALL_OW 241
41487: GO 41472
41489: POP
41490: POP
// end ;
41491: PPOPN 2
41493: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41494: LD_EXP 87
41498: PUSH
41499: LD_EXP 104
41503: AND
41504: IFFALSE 41615
41506: GO 41508
41508: DISABLE
41509: LD_INT 0
41511: PPUSH
41512: PPUSH
41513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41514: LD_ADDR_VAR 0 3
41518: PUSH
41519: LD_INT 22
41521: PUSH
41522: LD_OWVAR 2
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 25
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PPUSH
41545: CALL_OW 69
41549: ST_TO_ADDR
// if not tmp then
41550: LD_VAR 0 3
41554: NOT
41555: IFFALSE 41559
// exit ;
41557: GO 41615
// un := tmp [ rand ( 1 , tmp ) ] ;
41559: LD_ADDR_VAR 0 2
41563: PUSH
41564: LD_VAR 0 3
41568: PUSH
41569: LD_INT 1
41571: PPUSH
41572: LD_VAR 0 3
41576: PPUSH
41577: CALL_OW 12
41581: ARRAY
41582: ST_TO_ADDR
// if Crawls ( un ) then
41583: LD_VAR 0 2
41587: PPUSH
41588: CALL_OW 318
41592: IFFALSE 41603
// ComWalk ( un ) ;
41594: LD_VAR 0 2
41598: PPUSH
41599: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41603: LD_VAR 0 2
41607: PPUSH
41608: LD_INT 5
41610: PPUSH
41611: CALL_OW 336
// end ;
41615: PPOPN 3
41617: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41618: LD_EXP 87
41622: PUSH
41623: LD_EXP 105
41627: AND
41628: PUSH
41629: LD_OWVAR 67
41633: PUSH
41634: LD_INT 4
41636: LESS
41637: AND
41638: IFFALSE 41657
41640: GO 41642
41642: DISABLE
// begin Difficulty := Difficulty + 1 ;
41643: LD_ADDR_OWVAR 67
41647: PUSH
41648: LD_OWVAR 67
41652: PUSH
41653: LD_INT 1
41655: PLUS
41656: ST_TO_ADDR
// end ;
41657: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41658: LD_EXP 87
41662: PUSH
41663: LD_EXP 106
41667: AND
41668: IFFALSE 41771
41670: GO 41672
41672: DISABLE
41673: LD_INT 0
41675: PPUSH
// begin for i := 1 to 5 do
41676: LD_ADDR_VAR 0 1
41680: PUSH
41681: DOUBLE
41682: LD_INT 1
41684: DEC
41685: ST_TO_ADDR
41686: LD_INT 5
41688: PUSH
41689: FOR_TO
41690: IFFALSE 41769
// begin uc_nation := nation_nature ;
41692: LD_ADDR_OWVAR 21
41696: PUSH
41697: LD_INT 0
41699: ST_TO_ADDR
// uc_side := 0 ;
41700: LD_ADDR_OWVAR 20
41704: PUSH
41705: LD_INT 0
41707: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41708: LD_ADDR_OWVAR 29
41712: PUSH
41713: LD_INT 12
41715: PUSH
41716: LD_INT 12
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// hc_agressivity := 20 ;
41723: LD_ADDR_OWVAR 35
41727: PUSH
41728: LD_INT 20
41730: ST_TO_ADDR
// hc_class := class_tiger ;
41731: LD_ADDR_OWVAR 28
41735: PUSH
41736: LD_INT 14
41738: ST_TO_ADDR
// hc_gallery :=  ;
41739: LD_ADDR_OWVAR 33
41743: PUSH
41744: LD_STRING 
41746: ST_TO_ADDR
// hc_name :=  ;
41747: LD_ADDR_OWVAR 26
41751: PUSH
41752: LD_STRING 
41754: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41755: CALL_OW 44
41759: PPUSH
41760: LD_INT 0
41762: PPUSH
41763: CALL_OW 51
// end ;
41767: GO 41689
41769: POP
41770: POP
// end ;
41771: PPOPN 1
41773: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41774: LD_EXP 87
41778: PUSH
41779: LD_EXP 107
41783: AND
41784: IFFALSE 41793
41786: GO 41788
41788: DISABLE
// StreamSibBomb ;
41789: CALL 41794 0 0
41793: END
// export function StreamSibBomb ; var i , x , y ; begin
41794: LD_INT 0
41796: PPUSH
41797: PPUSH
41798: PPUSH
41799: PPUSH
// result := false ;
41800: LD_ADDR_VAR 0 1
41804: PUSH
41805: LD_INT 0
41807: ST_TO_ADDR
// for i := 1 to 16 do
41808: LD_ADDR_VAR 0 2
41812: PUSH
41813: DOUBLE
41814: LD_INT 1
41816: DEC
41817: ST_TO_ADDR
41818: LD_INT 16
41820: PUSH
41821: FOR_TO
41822: IFFALSE 42021
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41824: LD_ADDR_VAR 0 3
41828: PUSH
41829: LD_INT 10
41831: PUSH
41832: LD_INT 20
41834: PUSH
41835: LD_INT 30
41837: PUSH
41838: LD_INT 40
41840: PUSH
41841: LD_INT 50
41843: PUSH
41844: LD_INT 60
41846: PUSH
41847: LD_INT 70
41849: PUSH
41850: LD_INT 80
41852: PUSH
41853: LD_INT 90
41855: PUSH
41856: LD_INT 100
41858: PUSH
41859: LD_INT 110
41861: PUSH
41862: LD_INT 120
41864: PUSH
41865: LD_INT 130
41867: PUSH
41868: LD_INT 140
41870: PUSH
41871: LD_INT 150
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: PPUSH
41894: LD_INT 15
41896: PPUSH
41897: CALL_OW 12
41901: ARRAY
41902: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41903: LD_ADDR_VAR 0 4
41907: PUSH
41908: LD_INT 10
41910: PUSH
41911: LD_INT 20
41913: PUSH
41914: LD_INT 30
41916: PUSH
41917: LD_INT 40
41919: PUSH
41920: LD_INT 50
41922: PUSH
41923: LD_INT 60
41925: PUSH
41926: LD_INT 70
41928: PUSH
41929: LD_INT 80
41931: PUSH
41932: LD_INT 90
41934: PUSH
41935: LD_INT 100
41937: PUSH
41938: LD_INT 110
41940: PUSH
41941: LD_INT 120
41943: PUSH
41944: LD_INT 130
41946: PUSH
41947: LD_INT 140
41949: PUSH
41950: LD_INT 150
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PPUSH
41973: LD_INT 15
41975: PPUSH
41976: CALL_OW 12
41980: ARRAY
41981: ST_TO_ADDR
// if ValidHex ( x , y ) then
41982: LD_VAR 0 3
41986: PPUSH
41987: LD_VAR 0 4
41991: PPUSH
41992: CALL_OW 488
41996: IFFALSE 42019
// begin result := [ x , y ] ;
41998: LD_ADDR_VAR 0 1
42002: PUSH
42003: LD_VAR 0 3
42007: PUSH
42008: LD_VAR 0 4
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// break ;
42017: GO 42021
// end ; end ;
42019: GO 41821
42021: POP
42022: POP
// if result then
42023: LD_VAR 0 1
42027: IFFALSE 42087
// begin ToLua ( playSibBomb() ) ;
42029: LD_STRING playSibBomb()
42031: PPUSH
42032: CALL_OW 559
// wait ( 0 0$14 ) ;
42036: LD_INT 490
42038: PPUSH
42039: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
42043: LD_VAR 0 1
42047: PUSH
42048: LD_INT 1
42050: ARRAY
42051: PPUSH
42052: LD_VAR 0 1
42056: PUSH
42057: LD_INT 2
42059: ARRAY
42060: PPUSH
42061: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42065: LD_VAR 0 1
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: PPUSH
42074: LD_VAR 0 1
42078: PUSH
42079: LD_INT 2
42081: ARRAY
42082: PPUSH
42083: CALL_OW 429
// end ; end ;
42087: LD_VAR 0 1
42091: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42092: LD_EXP 87
42096: PUSH
42097: LD_EXP 109
42101: AND
42102: IFFALSE 42114
42104: GO 42106
42106: DISABLE
// YouLost (  ) ;
42107: LD_STRING 
42109: PPUSH
42110: CALL_OW 104
42114: END
// every 0 0$1 trigger StreamModeActive and sFog do
42115: LD_EXP 87
42119: PUSH
42120: LD_EXP 108
42124: AND
42125: IFFALSE 42139
42127: GO 42129
42129: DISABLE
// FogOff ( your_side ) ;
42130: LD_OWVAR 2
42134: PPUSH
42135: CALL_OW 344
42139: END
// every 0 0$1 trigger StreamModeActive and sSun do
42140: LD_EXP 87
42144: PUSH
42145: LD_EXP 110
42149: AND
42150: IFFALSE 42178
42152: GO 42154
42154: DISABLE
// begin solar_recharge_percent := 0 ;
42155: LD_ADDR_OWVAR 79
42159: PUSH
42160: LD_INT 0
42162: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42163: LD_INT 10500
42165: PPUSH
42166: CALL_OW 67
// solar_recharge_percent := 100 ;
42170: LD_ADDR_OWVAR 79
42174: PUSH
42175: LD_INT 100
42177: ST_TO_ADDR
// end ;
42178: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42179: LD_EXP 87
42183: PUSH
42184: LD_EXP 111
42188: AND
42189: IFFALSE 42428
42191: GO 42193
42193: DISABLE
42194: LD_INT 0
42196: PPUSH
42197: PPUSH
42198: PPUSH
// begin tmp := [ ] ;
42199: LD_ADDR_VAR 0 3
42203: PUSH
42204: EMPTY
42205: ST_TO_ADDR
// for i := 1 to 6 do
42206: LD_ADDR_VAR 0 1
42210: PUSH
42211: DOUBLE
42212: LD_INT 1
42214: DEC
42215: ST_TO_ADDR
42216: LD_INT 6
42218: PUSH
42219: FOR_TO
42220: IFFALSE 42325
// begin uc_nation := nation_nature ;
42222: LD_ADDR_OWVAR 21
42226: PUSH
42227: LD_INT 0
42229: ST_TO_ADDR
// uc_side := 0 ;
42230: LD_ADDR_OWVAR 20
42234: PUSH
42235: LD_INT 0
42237: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42238: LD_ADDR_OWVAR 29
42242: PUSH
42243: LD_INT 12
42245: PUSH
42246: LD_INT 12
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: ST_TO_ADDR
// hc_agressivity := 20 ;
42253: LD_ADDR_OWVAR 35
42257: PUSH
42258: LD_INT 20
42260: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42261: LD_ADDR_OWVAR 28
42265: PUSH
42266: LD_INT 17
42268: ST_TO_ADDR
// hc_gallery :=  ;
42269: LD_ADDR_OWVAR 33
42273: PUSH
42274: LD_STRING 
42276: ST_TO_ADDR
// hc_name :=  ;
42277: LD_ADDR_OWVAR 26
42281: PUSH
42282: LD_STRING 
42284: ST_TO_ADDR
// un := CreateHuman ;
42285: LD_ADDR_VAR 0 2
42289: PUSH
42290: CALL_OW 44
42294: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42295: LD_VAR 0 2
42299: PPUSH
42300: LD_INT 1
42302: PPUSH
42303: CALL_OW 51
// tmp := tmp ^ un ;
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_VAR 0 3
42316: PUSH
42317: LD_VAR 0 2
42321: ADD
42322: ST_TO_ADDR
// end ;
42323: GO 42219
42325: POP
42326: POP
// repeat wait ( 0 0$1 ) ;
42327: LD_INT 35
42329: PPUSH
42330: CALL_OW 67
// for un in tmp do
42334: LD_ADDR_VAR 0 2
42338: PUSH
42339: LD_VAR 0 3
42343: PUSH
42344: FOR_IN
42345: IFFALSE 42419
// begin if IsDead ( un ) then
42347: LD_VAR 0 2
42351: PPUSH
42352: CALL_OW 301
42356: IFFALSE 42376
// begin tmp := tmp diff un ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_VAR 0 3
42367: PUSH
42368: LD_VAR 0 2
42372: DIFF
42373: ST_TO_ADDR
// continue ;
42374: GO 42344
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42376: LD_VAR 0 2
42380: PPUSH
42381: LD_INT 3
42383: PUSH
42384: LD_INT 22
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PPUSH
42398: CALL_OW 69
42402: PPUSH
42403: LD_VAR 0 2
42407: PPUSH
42408: CALL_OW 74
42412: PPUSH
42413: CALL_OW 115
// end ;
42417: GO 42344
42419: POP
42420: POP
// until not tmp ;
42421: LD_VAR 0 3
42425: NOT
42426: IFFALSE 42327
// end ;
42428: PPOPN 3
42430: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42431: LD_EXP 87
42435: PUSH
42436: LD_EXP 112
42440: AND
42441: IFFALSE 42495
42443: GO 42445
42445: DISABLE
// begin ToLua ( displayTroll(); ) ;
42446: LD_STRING displayTroll();
42448: PPUSH
42449: CALL_OW 559
// wait ( 3 3$00 ) ;
42453: LD_INT 6300
42455: PPUSH
42456: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42460: LD_STRING hideTroll();
42462: PPUSH
42463: CALL_OW 559
// wait ( 1 1$00 ) ;
42467: LD_INT 2100
42469: PPUSH
42470: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42474: LD_STRING displayTroll();
42476: PPUSH
42477: CALL_OW 559
// wait ( 1 1$00 ) ;
42481: LD_INT 2100
42483: PPUSH
42484: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42488: LD_STRING hideTroll();
42490: PPUSH
42491: CALL_OW 559
// end ;
42495: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42496: LD_EXP 87
42500: PUSH
42501: LD_EXP 113
42505: AND
42506: IFFALSE 42569
42508: GO 42510
42510: DISABLE
42511: LD_INT 0
42513: PPUSH
// begin p := 0 ;
42514: LD_ADDR_VAR 0 1
42518: PUSH
42519: LD_INT 0
42521: ST_TO_ADDR
// repeat game_speed := 1 ;
42522: LD_ADDR_OWVAR 65
42526: PUSH
42527: LD_INT 1
42529: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42530: LD_INT 35
42532: PPUSH
42533: CALL_OW 67
// p := p + 1 ;
42537: LD_ADDR_VAR 0 1
42541: PUSH
42542: LD_VAR 0 1
42546: PUSH
42547: LD_INT 1
42549: PLUS
42550: ST_TO_ADDR
// until p >= 60 ;
42551: LD_VAR 0 1
42555: PUSH
42556: LD_INT 60
42558: GREATEREQUAL
42559: IFFALSE 42522
// game_speed := 4 ;
42561: LD_ADDR_OWVAR 65
42565: PUSH
42566: LD_INT 4
42568: ST_TO_ADDR
// end ;
42569: PPOPN 1
42571: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42572: LD_EXP 87
42576: PUSH
42577: LD_EXP 114
42581: AND
42582: IFFALSE 42728
42584: GO 42586
42586: DISABLE
42587: LD_INT 0
42589: PPUSH
42590: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42591: LD_ADDR_VAR 0 1
42595: PUSH
42596: LD_INT 22
42598: PUSH
42599: LD_OWVAR 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 30
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 30
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PPUSH
42640: CALL_OW 69
42644: ST_TO_ADDR
// if not depot then
42645: LD_VAR 0 1
42649: NOT
42650: IFFALSE 42654
// exit ;
42652: GO 42728
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42654: LD_ADDR_VAR 0 2
42658: PUSH
42659: LD_VAR 0 1
42663: PUSH
42664: LD_INT 1
42666: PPUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL_OW 12
42676: ARRAY
42677: PPUSH
42678: CALL_OW 274
42682: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42683: LD_VAR 0 2
42687: PPUSH
42688: LD_INT 1
42690: PPUSH
42691: LD_INT 0
42693: PPUSH
42694: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42698: LD_VAR 0 2
42702: PPUSH
42703: LD_INT 2
42705: PPUSH
42706: LD_INT 0
42708: PPUSH
42709: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42713: LD_VAR 0 2
42717: PPUSH
42718: LD_INT 3
42720: PPUSH
42721: LD_INT 0
42723: PPUSH
42724: CALL_OW 277
// end ;
42728: PPOPN 2
42730: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42731: LD_EXP 87
42735: PUSH
42736: LD_EXP 115
42740: AND
42741: IFFALSE 42838
42743: GO 42745
42745: DISABLE
42746: LD_INT 0
42748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42749: LD_ADDR_VAR 0 1
42753: PUSH
42754: LD_INT 22
42756: PUSH
42757: LD_OWVAR 2
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 21
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: LD_INT 23
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: PPUSH
42798: CALL_OW 69
42802: ST_TO_ADDR
// if not tmp then
42803: LD_VAR 0 1
42807: NOT
42808: IFFALSE 42812
// exit ;
42810: GO 42838
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42812: LD_VAR 0 1
42816: PUSH
42817: LD_INT 1
42819: PPUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: CALL_OW 12
42829: ARRAY
42830: PPUSH
42831: LD_INT 200
42833: PPUSH
42834: CALL_OW 234
// end ;
42838: PPOPN 1
42840: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42841: LD_EXP 87
42845: PUSH
42846: LD_EXP 116
42850: AND
42851: IFFALSE 42930
42853: GO 42855
42855: DISABLE
42856: LD_INT 0
42858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42859: LD_ADDR_VAR 0 1
42863: PUSH
42864: LD_INT 22
42866: PUSH
42867: LD_OWVAR 2
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 21
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PPUSH
42890: CALL_OW 69
42894: ST_TO_ADDR
// if not tmp then
42895: LD_VAR 0 1
42899: NOT
42900: IFFALSE 42904
// exit ;
42902: GO 42930
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42904: LD_VAR 0 1
42908: PUSH
42909: LD_INT 1
42911: PPUSH
42912: LD_VAR 0 1
42916: PPUSH
42917: CALL_OW 12
42921: ARRAY
42922: PPUSH
42923: LD_INT 60
42925: PPUSH
42926: CALL_OW 234
// end ;
42930: PPOPN 1
42932: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42933: LD_EXP 87
42937: PUSH
42938: LD_EXP 117
42942: AND
42943: IFFALSE 43042
42945: GO 42947
42947: DISABLE
42948: LD_INT 0
42950: PPUSH
42951: PPUSH
// begin enable ;
42952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42953: LD_ADDR_VAR 0 1
42957: PUSH
42958: LD_INT 22
42960: PUSH
42961: LD_OWVAR 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 61
42972: PUSH
42973: EMPTY
42974: LIST
42975: PUSH
42976: LD_INT 33
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: PPUSH
42991: CALL_OW 69
42995: ST_TO_ADDR
// if not tmp then
42996: LD_VAR 0 1
43000: NOT
43001: IFFALSE 43005
// exit ;
43003: GO 43042
// for i in tmp do
43005: LD_ADDR_VAR 0 2
43009: PUSH
43010: LD_VAR 0 1
43014: PUSH
43015: FOR_IN
43016: IFFALSE 43040
// if IsControledBy ( i ) then
43018: LD_VAR 0 2
43022: PPUSH
43023: CALL_OW 312
43027: IFFALSE 43038
// ComUnlink ( i ) ;
43029: LD_VAR 0 2
43033: PPUSH
43034: CALL_OW 136
43038: GO 43015
43040: POP
43041: POP
// end ;
43042: PPOPN 2
43044: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
43045: LD_EXP 87
43049: PUSH
43050: LD_EXP 118
43054: AND
43055: IFFALSE 43195
43057: GO 43059
43059: DISABLE
43060: LD_INT 0
43062: PPUSH
43063: PPUSH
// begin ToLua ( displayPowell(); ) ;
43064: LD_STRING displayPowell();
43066: PPUSH
43067: CALL_OW 559
// uc_side := 0 ;
43071: LD_ADDR_OWVAR 20
43075: PUSH
43076: LD_INT 0
43078: ST_TO_ADDR
// uc_nation := 2 ;
43079: LD_ADDR_OWVAR 21
43083: PUSH
43084: LD_INT 2
43086: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43087: LD_ADDR_OWVAR 37
43091: PUSH
43092: LD_INT 14
43094: ST_TO_ADDR
// vc_engine := engine_siberite ;
43095: LD_ADDR_OWVAR 39
43099: PUSH
43100: LD_INT 3
43102: ST_TO_ADDR
// vc_control := control_apeman ;
43103: LD_ADDR_OWVAR 38
43107: PUSH
43108: LD_INT 5
43110: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43111: LD_ADDR_OWVAR 40
43115: PUSH
43116: LD_INT 29
43118: ST_TO_ADDR
// un := CreateVehicle ;
43119: LD_ADDR_VAR 0 2
43123: PUSH
43124: CALL_OW 45
43128: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43129: LD_VAR 0 2
43133: PPUSH
43134: LD_INT 1
43136: PPUSH
43137: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43141: LD_INT 35
43143: PPUSH
43144: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43148: LD_VAR 0 2
43152: PPUSH
43153: LD_INT 22
43155: PUSH
43156: LD_OWVAR 2
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PPUSH
43165: CALL_OW 69
43169: PPUSH
43170: LD_VAR 0 2
43174: PPUSH
43175: CALL_OW 74
43179: PPUSH
43180: CALL_OW 115
// until IsDead ( un ) ;
43184: LD_VAR 0 2
43188: PPUSH
43189: CALL_OW 301
43193: IFFALSE 43141
// end ;
43195: PPOPN 2
43197: END
// every 0 0$1 trigger StreamModeActive and sStu do
43198: LD_EXP 87
43202: PUSH
43203: LD_EXP 126
43207: AND
43208: IFFALSE 43224
43210: GO 43212
43212: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43213: LD_STRING displayStucuk();
43215: PPUSH
43216: CALL_OW 559
// ResetFog ;
43220: CALL_OW 335
// end ;
43224: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43225: LD_EXP 87
43229: PUSH
43230: LD_EXP 119
43234: AND
43235: IFFALSE 43376
43237: GO 43239
43239: DISABLE
43240: LD_INT 0
43242: PPUSH
43243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43244: LD_ADDR_VAR 0 2
43248: PUSH
43249: LD_INT 22
43251: PUSH
43252: LD_OWVAR 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 21
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PPUSH
43275: CALL_OW 69
43279: ST_TO_ADDR
// if not tmp then
43280: LD_VAR 0 2
43284: NOT
43285: IFFALSE 43289
// exit ;
43287: GO 43376
// un := tmp [ rand ( 1 , tmp ) ] ;
43289: LD_ADDR_VAR 0 1
43293: PUSH
43294: LD_VAR 0 2
43298: PUSH
43299: LD_INT 1
43301: PPUSH
43302: LD_VAR 0 2
43306: PPUSH
43307: CALL_OW 12
43311: ARRAY
43312: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43313: LD_VAR 0 1
43317: PPUSH
43318: LD_INT 0
43320: PPUSH
43321: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43325: LD_VAR 0 1
43329: PPUSH
43330: LD_OWVAR 3
43334: PUSH
43335: LD_VAR 0 1
43339: DIFF
43340: PPUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL_OW 74
43350: PPUSH
43351: CALL_OW 115
// wait ( 0 0$20 ) ;
43355: LD_INT 700
43357: PPUSH
43358: CALL_OW 67
// SetSide ( un , your_side ) ;
43362: LD_VAR 0 1
43366: PPUSH
43367: LD_OWVAR 2
43371: PPUSH
43372: CALL_OW 235
// end ;
43376: PPOPN 2
43378: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43379: LD_EXP 87
43383: PUSH
43384: LD_EXP 120
43388: AND
43389: IFFALSE 43495
43391: GO 43393
43393: DISABLE
43394: LD_INT 0
43396: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43397: LD_ADDR_VAR 0 1
43401: PUSH
43402: LD_INT 22
43404: PUSH
43405: LD_OWVAR 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 30
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 30
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: LIST
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PPUSH
43446: CALL_OW 69
43450: ST_TO_ADDR
// if not depot then
43451: LD_VAR 0 1
43455: NOT
43456: IFFALSE 43460
// exit ;
43458: GO 43495
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43460: LD_VAR 0 1
43464: PUSH
43465: LD_INT 1
43467: ARRAY
43468: PPUSH
43469: CALL_OW 250
43473: PPUSH
43474: LD_VAR 0 1
43478: PUSH
43479: LD_INT 1
43481: ARRAY
43482: PPUSH
43483: CALL_OW 251
43487: PPUSH
43488: LD_INT 70
43490: PPUSH
43491: CALL_OW 495
// end ;
43495: PPOPN 1
43497: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43498: LD_EXP 87
43502: PUSH
43503: LD_EXP 121
43507: AND
43508: IFFALSE 43719
43510: GO 43512
43512: DISABLE
43513: LD_INT 0
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
43519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43520: LD_ADDR_VAR 0 5
43524: PUSH
43525: LD_INT 22
43527: PUSH
43528: LD_OWVAR 2
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 21
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PPUSH
43551: CALL_OW 69
43555: ST_TO_ADDR
// if not tmp then
43556: LD_VAR 0 5
43560: NOT
43561: IFFALSE 43565
// exit ;
43563: GO 43719
// for i in tmp do
43565: LD_ADDR_VAR 0 1
43569: PUSH
43570: LD_VAR 0 5
43574: PUSH
43575: FOR_IN
43576: IFFALSE 43717
// begin d := rand ( 0 , 5 ) ;
43578: LD_ADDR_VAR 0 4
43582: PUSH
43583: LD_INT 0
43585: PPUSH
43586: LD_INT 5
43588: PPUSH
43589: CALL_OW 12
43593: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43594: LD_ADDR_VAR 0 2
43598: PUSH
43599: LD_VAR 0 1
43603: PPUSH
43604: CALL_OW 250
43608: PPUSH
43609: LD_VAR 0 4
43613: PPUSH
43614: LD_INT 3
43616: PPUSH
43617: LD_INT 12
43619: PPUSH
43620: CALL_OW 12
43624: PPUSH
43625: CALL_OW 272
43629: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43630: LD_ADDR_VAR 0 3
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 251
43644: PPUSH
43645: LD_VAR 0 4
43649: PPUSH
43650: LD_INT 3
43652: PPUSH
43653: LD_INT 12
43655: PPUSH
43656: CALL_OW 12
43660: PPUSH
43661: CALL_OW 273
43665: ST_TO_ADDR
// if ValidHex ( x , y ) then
43666: LD_VAR 0 2
43670: PPUSH
43671: LD_VAR 0 3
43675: PPUSH
43676: CALL_OW 488
43680: IFFALSE 43715
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43682: LD_VAR 0 1
43686: PPUSH
43687: LD_VAR 0 2
43691: PPUSH
43692: LD_VAR 0 3
43696: PPUSH
43697: LD_INT 3
43699: PPUSH
43700: LD_INT 6
43702: PPUSH
43703: CALL_OW 12
43707: PPUSH
43708: LD_INT 1
43710: PPUSH
43711: CALL_OW 483
// end ;
43715: GO 43575
43717: POP
43718: POP
// end ;
43719: PPOPN 5
43721: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43722: LD_EXP 87
43726: PUSH
43727: LD_EXP 122
43731: AND
43732: IFFALSE 43826
43734: GO 43736
43736: DISABLE
43737: LD_INT 0
43739: PPUSH
43740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43741: LD_ADDR_VAR 0 2
43745: PUSH
43746: LD_INT 22
43748: PUSH
43749: LD_OWVAR 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 32
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 21
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: PPUSH
43783: CALL_OW 69
43787: ST_TO_ADDR
// if not tmp then
43788: LD_VAR 0 2
43792: NOT
43793: IFFALSE 43797
// exit ;
43795: GO 43826
// for i in tmp do
43797: LD_ADDR_VAR 0 1
43801: PUSH
43802: LD_VAR 0 2
43806: PUSH
43807: FOR_IN
43808: IFFALSE 43824
// SetFuel ( i , 0 ) ;
43810: LD_VAR 0 1
43814: PPUSH
43815: LD_INT 0
43817: PPUSH
43818: CALL_OW 240
43822: GO 43807
43824: POP
43825: POP
// end ;
43826: PPOPN 2
43828: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43829: LD_EXP 87
43833: PUSH
43834: LD_EXP 123
43838: AND
43839: IFFALSE 43905
43841: GO 43843
43843: DISABLE
43844: LD_INT 0
43846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43847: LD_ADDR_VAR 0 1
43851: PUSH
43852: LD_INT 22
43854: PUSH
43855: LD_OWVAR 2
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 30
43866: PUSH
43867: LD_INT 29
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PPUSH
43878: CALL_OW 69
43882: ST_TO_ADDR
// if not tmp then
43883: LD_VAR 0 1
43887: NOT
43888: IFFALSE 43892
// exit ;
43890: GO 43905
// DestroyUnit ( tmp [ 1 ] ) ;
43892: LD_VAR 0 1
43896: PUSH
43897: LD_INT 1
43899: ARRAY
43900: PPUSH
43901: CALL_OW 65
// end ;
43905: PPOPN 1
43907: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43908: LD_EXP 87
43912: PUSH
43913: LD_EXP 125
43917: AND
43918: IFFALSE 44047
43920: GO 43922
43922: DISABLE
43923: LD_INT 0
43925: PPUSH
// begin uc_side := 0 ;
43926: LD_ADDR_OWVAR 20
43930: PUSH
43931: LD_INT 0
43933: ST_TO_ADDR
// uc_nation := nation_arabian ;
43934: LD_ADDR_OWVAR 21
43938: PUSH
43939: LD_INT 2
43941: ST_TO_ADDR
// hc_gallery :=  ;
43942: LD_ADDR_OWVAR 33
43946: PUSH
43947: LD_STRING 
43949: ST_TO_ADDR
// hc_name :=  ;
43950: LD_ADDR_OWVAR 26
43954: PUSH
43955: LD_STRING 
43957: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43958: LD_INT 1
43960: PPUSH
43961: LD_INT 11
43963: PPUSH
43964: LD_INT 10
43966: PPUSH
43967: CALL_OW 380
// un := CreateHuman ;
43971: LD_ADDR_VAR 0 1
43975: PUSH
43976: CALL_OW 44
43980: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43981: LD_VAR 0 1
43985: PPUSH
43986: LD_INT 1
43988: PPUSH
43989: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43993: LD_INT 35
43995: PPUSH
43996: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
44000: LD_VAR 0 1
44004: PPUSH
44005: LD_INT 22
44007: PUSH
44008: LD_OWVAR 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PPUSH
44017: CALL_OW 69
44021: PPUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: CALL_OW 74
44031: PPUSH
44032: CALL_OW 115
// until IsDead ( un ) ;
44036: LD_VAR 0 1
44040: PPUSH
44041: CALL_OW 301
44045: IFFALSE 43993
// end ;
44047: PPOPN 1
44049: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
44050: LD_EXP 87
44054: PUSH
44055: LD_EXP 127
44059: AND
44060: IFFALSE 44072
44062: GO 44064
44064: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44065: LD_STRING earthquake(getX(game), 0, 32)
44067: PPUSH
44068: CALL_OW 559
44072: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44073: LD_EXP 87
44077: PUSH
44078: LD_EXP 128
44082: AND
44083: IFFALSE 44174
44085: GO 44087
44087: DISABLE
44088: LD_INT 0
44090: PPUSH
// begin enable ;
44091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44092: LD_ADDR_VAR 0 1
44096: PUSH
44097: LD_INT 22
44099: PUSH
44100: LD_OWVAR 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 21
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 33
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: PPUSH
44134: CALL_OW 69
44138: ST_TO_ADDR
// if not tmp then
44139: LD_VAR 0 1
44143: NOT
44144: IFFALSE 44148
// exit ;
44146: GO 44174
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44148: LD_VAR 0 1
44152: PUSH
44153: LD_INT 1
44155: PPUSH
44156: LD_VAR 0 1
44160: PPUSH
44161: CALL_OW 12
44165: ARRAY
44166: PPUSH
44167: LD_INT 1
44169: PPUSH
44170: CALL_OW 234
// end ;
44174: PPOPN 1
44176: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44177: LD_EXP 87
44181: PUSH
44182: LD_EXP 129
44186: AND
44187: IFFALSE 44328
44189: GO 44191
44191: DISABLE
44192: LD_INT 0
44194: PPUSH
44195: PPUSH
44196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_INT 22
44204: PUSH
44205: LD_OWVAR 2
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 25
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PPUSH
44228: CALL_OW 69
44232: ST_TO_ADDR
// if not tmp then
44233: LD_VAR 0 3
44237: NOT
44238: IFFALSE 44242
// exit ;
44240: GO 44328
// un := tmp [ rand ( 1 , tmp ) ] ;
44242: LD_ADDR_VAR 0 2
44246: PUSH
44247: LD_VAR 0 3
44251: PUSH
44252: LD_INT 1
44254: PPUSH
44255: LD_VAR 0 3
44259: PPUSH
44260: CALL_OW 12
44264: ARRAY
44265: ST_TO_ADDR
// if Crawls ( un ) then
44266: LD_VAR 0 2
44270: PPUSH
44271: CALL_OW 318
44275: IFFALSE 44286
// ComWalk ( un ) ;
44277: LD_VAR 0 2
44281: PPUSH
44282: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44286: LD_VAR 0 2
44290: PPUSH
44291: LD_INT 9
44293: PPUSH
44294: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44298: LD_INT 28
44300: PPUSH
44301: LD_OWVAR 2
44305: PPUSH
44306: LD_INT 2
44308: PPUSH
44309: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44313: LD_INT 29
44315: PPUSH
44316: LD_OWVAR 2
44320: PPUSH
44321: LD_INT 2
44323: PPUSH
44324: CALL_OW 322
// end ;
44328: PPOPN 3
44330: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44331: LD_EXP 87
44335: PUSH
44336: LD_EXP 130
44340: AND
44341: IFFALSE 44452
44343: GO 44345
44345: DISABLE
44346: LD_INT 0
44348: PPUSH
44349: PPUSH
44350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44351: LD_ADDR_VAR 0 3
44355: PUSH
44356: LD_INT 22
44358: PUSH
44359: LD_OWVAR 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 25
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PPUSH
44382: CALL_OW 69
44386: ST_TO_ADDR
// if not tmp then
44387: LD_VAR 0 3
44391: NOT
44392: IFFALSE 44396
// exit ;
44394: GO 44452
// un := tmp [ rand ( 1 , tmp ) ] ;
44396: LD_ADDR_VAR 0 2
44400: PUSH
44401: LD_VAR 0 3
44405: PUSH
44406: LD_INT 1
44408: PPUSH
44409: LD_VAR 0 3
44413: PPUSH
44414: CALL_OW 12
44418: ARRAY
44419: ST_TO_ADDR
// if Crawls ( un ) then
44420: LD_VAR 0 2
44424: PPUSH
44425: CALL_OW 318
44429: IFFALSE 44440
// ComWalk ( un ) ;
44431: LD_VAR 0 2
44435: PPUSH
44436: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44440: LD_VAR 0 2
44444: PPUSH
44445: LD_INT 8
44447: PPUSH
44448: CALL_OW 336
// end ;
44452: PPOPN 3
44454: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44455: LD_EXP 87
44459: PUSH
44460: LD_EXP 131
44464: AND
44465: IFFALSE 44609
44467: GO 44469
44469: DISABLE
44470: LD_INT 0
44472: PPUSH
44473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44474: LD_ADDR_VAR 0 2
44478: PUSH
44479: LD_INT 22
44481: PUSH
44482: LD_OWVAR 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 21
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: LD_INT 34
44506: PUSH
44507: LD_INT 12
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 34
44516: PUSH
44517: LD_INT 51
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 34
44526: PUSH
44527: LD_INT 32
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: PPUSH
44545: CALL_OW 69
44549: ST_TO_ADDR
// if not tmp then
44550: LD_VAR 0 2
44554: NOT
44555: IFFALSE 44559
// exit ;
44557: GO 44609
// for i in tmp do
44559: LD_ADDR_VAR 0 1
44563: PUSH
44564: LD_VAR 0 2
44568: PUSH
44569: FOR_IN
44570: IFFALSE 44607
// if GetCargo ( i , mat_artifact ) = 0 then
44572: LD_VAR 0 1
44576: PPUSH
44577: LD_INT 4
44579: PPUSH
44580: CALL_OW 289
44584: PUSH
44585: LD_INT 0
44587: EQUAL
44588: IFFALSE 44605
// SetCargo ( i , mat_siberit , 100 ) ;
44590: LD_VAR 0 1
44594: PPUSH
44595: LD_INT 3
44597: PPUSH
44598: LD_INT 100
44600: PPUSH
44601: CALL_OW 290
44605: GO 44569
44607: POP
44608: POP
// end ;
44609: PPOPN 2
44611: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44612: LD_EXP 87
44616: PUSH
44617: LD_EXP 132
44621: AND
44622: IFFALSE 44805
44624: GO 44626
44626: DISABLE
44627: LD_INT 0
44629: PPUSH
44630: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44631: LD_ADDR_VAR 0 2
44635: PUSH
44636: LD_INT 22
44638: PUSH
44639: LD_OWVAR 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PPUSH
44648: CALL_OW 69
44652: ST_TO_ADDR
// if not tmp then
44653: LD_VAR 0 2
44657: NOT
44658: IFFALSE 44662
// exit ;
44660: GO 44805
// for i := 1 to 2 do
44662: LD_ADDR_VAR 0 1
44666: PUSH
44667: DOUBLE
44668: LD_INT 1
44670: DEC
44671: ST_TO_ADDR
44672: LD_INT 2
44674: PUSH
44675: FOR_TO
44676: IFFALSE 44803
// begin uc_side := your_side ;
44678: LD_ADDR_OWVAR 20
44682: PUSH
44683: LD_OWVAR 2
44687: ST_TO_ADDR
// uc_nation := nation_american ;
44688: LD_ADDR_OWVAR 21
44692: PUSH
44693: LD_INT 1
44695: ST_TO_ADDR
// vc_chassis := us_morphling ;
44696: LD_ADDR_OWVAR 37
44700: PUSH
44701: LD_INT 5
44703: ST_TO_ADDR
// vc_engine := engine_siberite ;
44704: LD_ADDR_OWVAR 39
44708: PUSH
44709: LD_INT 3
44711: ST_TO_ADDR
// vc_control := control_computer ;
44712: LD_ADDR_OWVAR 38
44716: PUSH
44717: LD_INT 3
44719: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44720: LD_ADDR_OWVAR 40
44724: PUSH
44725: LD_INT 10
44727: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44728: LD_VAR 0 2
44732: PUSH
44733: LD_INT 1
44735: ARRAY
44736: PPUSH
44737: CALL_OW 310
44741: NOT
44742: IFFALSE 44789
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44744: CALL_OW 45
44748: PPUSH
44749: LD_VAR 0 2
44753: PUSH
44754: LD_INT 1
44756: ARRAY
44757: PPUSH
44758: CALL_OW 250
44762: PPUSH
44763: LD_VAR 0 2
44767: PUSH
44768: LD_INT 1
44770: ARRAY
44771: PPUSH
44772: CALL_OW 251
44776: PPUSH
44777: LD_INT 12
44779: PPUSH
44780: LD_INT 1
44782: PPUSH
44783: CALL_OW 50
44787: GO 44801
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44789: CALL_OW 45
44793: PPUSH
44794: LD_INT 1
44796: PPUSH
44797: CALL_OW 51
// end ;
44801: GO 44675
44803: POP
44804: POP
// end ;
44805: PPOPN 2
44807: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44808: LD_EXP 87
44812: PUSH
44813: LD_EXP 133
44817: AND
44818: IFFALSE 45040
44820: GO 44822
44822: DISABLE
44823: LD_INT 0
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
44829: PPUSH
44830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44831: LD_ADDR_VAR 0 6
44835: PUSH
44836: LD_INT 22
44838: PUSH
44839: LD_OWVAR 2
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 21
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: LD_INT 23
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: LIST
44879: PPUSH
44880: CALL_OW 69
44884: ST_TO_ADDR
// if not tmp then
44885: LD_VAR 0 6
44889: NOT
44890: IFFALSE 44894
// exit ;
44892: GO 45040
// s1 := rand ( 1 , 4 ) ;
44894: LD_ADDR_VAR 0 2
44898: PUSH
44899: LD_INT 1
44901: PPUSH
44902: LD_INT 4
44904: PPUSH
44905: CALL_OW 12
44909: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44910: LD_ADDR_VAR 0 4
44914: PUSH
44915: LD_VAR 0 6
44919: PUSH
44920: LD_INT 1
44922: ARRAY
44923: PPUSH
44924: LD_VAR 0 2
44928: PPUSH
44929: CALL_OW 259
44933: ST_TO_ADDR
// if s1 = 1 then
44934: LD_VAR 0 2
44938: PUSH
44939: LD_INT 1
44941: EQUAL
44942: IFFALSE 44962
// s2 := rand ( 2 , 4 ) else
44944: LD_ADDR_VAR 0 3
44948: PUSH
44949: LD_INT 2
44951: PPUSH
44952: LD_INT 4
44954: PPUSH
44955: CALL_OW 12
44959: ST_TO_ADDR
44960: GO 44970
// s2 := 1 ;
44962: LD_ADDR_VAR 0 3
44966: PUSH
44967: LD_INT 1
44969: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44970: LD_ADDR_VAR 0 5
44974: PUSH
44975: LD_VAR 0 6
44979: PUSH
44980: LD_INT 1
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 3
44988: PPUSH
44989: CALL_OW 259
44993: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44994: LD_VAR 0 6
44998: PUSH
44999: LD_INT 1
45001: ARRAY
45002: PPUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: LD_VAR 0 5
45012: PPUSH
45013: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
45017: LD_VAR 0 6
45021: PUSH
45022: LD_INT 1
45024: ARRAY
45025: PPUSH
45026: LD_VAR 0 3
45030: PPUSH
45031: LD_VAR 0 4
45035: PPUSH
45036: CALL_OW 237
// end ;
45040: PPOPN 6
45042: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
45043: LD_EXP 87
45047: PUSH
45048: LD_EXP 134
45052: AND
45053: IFFALSE 45132
45055: GO 45057
45057: DISABLE
45058: LD_INT 0
45060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
45061: LD_ADDR_VAR 0 1
45065: PUSH
45066: LD_INT 22
45068: PUSH
45069: LD_OWVAR 2
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 30
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PPUSH
45092: CALL_OW 69
45096: ST_TO_ADDR
// if not tmp then
45097: LD_VAR 0 1
45101: NOT
45102: IFFALSE 45106
// exit ;
45104: GO 45132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45106: LD_VAR 0 1
45110: PUSH
45111: LD_INT 1
45113: PPUSH
45114: LD_VAR 0 1
45118: PPUSH
45119: CALL_OW 12
45123: ARRAY
45124: PPUSH
45125: LD_INT 1
45127: PPUSH
45128: CALL_OW 234
// end ;
45132: PPOPN 1
45134: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45135: LD_EXP 87
45139: PUSH
45140: LD_EXP 135
45144: AND
45145: IFFALSE 45257
45147: GO 45149
45149: DISABLE
45150: LD_INT 0
45152: PPUSH
45153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45154: LD_ADDR_VAR 0 2
45158: PUSH
45159: LD_INT 22
45161: PUSH
45162: LD_OWVAR 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 30
45176: PUSH
45177: LD_INT 27
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 30
45186: PUSH
45187: LD_INT 26
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 30
45196: PUSH
45197: LD_INT 28
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PPUSH
45214: CALL_OW 69
45218: ST_TO_ADDR
// if not tmp then
45219: LD_VAR 0 2
45223: NOT
45224: IFFALSE 45228
// exit ;
45226: GO 45257
// for i in tmp do
45228: LD_ADDR_VAR 0 1
45232: PUSH
45233: LD_VAR 0 2
45237: PUSH
45238: FOR_IN
45239: IFFALSE 45255
// SetLives ( i , 1 ) ;
45241: LD_VAR 0 1
45245: PPUSH
45246: LD_INT 1
45248: PPUSH
45249: CALL_OW 234
45253: GO 45238
45255: POP
45256: POP
// end ;
45257: PPOPN 2
45259: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45260: LD_EXP 87
45264: PUSH
45265: LD_EXP 136
45269: AND
45270: IFFALSE 45557
45272: GO 45274
45274: DISABLE
45275: LD_INT 0
45277: PPUSH
45278: PPUSH
45279: PPUSH
// begin i := rand ( 1 , 7 ) ;
45280: LD_ADDR_VAR 0 1
45284: PUSH
45285: LD_INT 1
45287: PPUSH
45288: LD_INT 7
45290: PPUSH
45291: CALL_OW 12
45295: ST_TO_ADDR
// case i of 1 :
45296: LD_VAR 0 1
45300: PUSH
45301: LD_INT 1
45303: DOUBLE
45304: EQUAL
45305: IFTRUE 45309
45307: GO 45319
45309: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45310: LD_STRING earthquake(getX(game), 0, 32)
45312: PPUSH
45313: CALL_OW 559
45317: GO 45557
45319: LD_INT 2
45321: DOUBLE
45322: EQUAL
45323: IFTRUE 45327
45325: GO 45341
45327: POP
// begin ToLua ( displayStucuk(); ) ;
45328: LD_STRING displayStucuk();
45330: PPUSH
45331: CALL_OW 559
// ResetFog ;
45335: CALL_OW 335
// end ; 3 :
45339: GO 45557
45341: LD_INT 3
45343: DOUBLE
45344: EQUAL
45345: IFTRUE 45349
45347: GO 45453
45349: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45350: LD_ADDR_VAR 0 2
45354: PUSH
45355: LD_INT 22
45357: PUSH
45358: LD_OWVAR 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 25
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PPUSH
45381: CALL_OW 69
45385: ST_TO_ADDR
// if not tmp then
45386: LD_VAR 0 2
45390: NOT
45391: IFFALSE 45395
// exit ;
45393: GO 45557
// un := tmp [ rand ( 1 , tmp ) ] ;
45395: LD_ADDR_VAR 0 3
45399: PUSH
45400: LD_VAR 0 2
45404: PUSH
45405: LD_INT 1
45407: PPUSH
45408: LD_VAR 0 2
45412: PPUSH
45413: CALL_OW 12
45417: ARRAY
45418: ST_TO_ADDR
// if Crawls ( un ) then
45419: LD_VAR 0 3
45423: PPUSH
45424: CALL_OW 318
45428: IFFALSE 45439
// ComWalk ( un ) ;
45430: LD_VAR 0 3
45434: PPUSH
45435: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45439: LD_VAR 0 3
45443: PPUSH
45444: LD_INT 8
45446: PPUSH
45447: CALL_OW 336
// end ; 4 :
45451: GO 45557
45453: LD_INT 4
45455: DOUBLE
45456: EQUAL
45457: IFTRUE 45461
45459: GO 45535
45461: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45462: LD_ADDR_VAR 0 2
45466: PUSH
45467: LD_INT 22
45469: PUSH
45470: LD_OWVAR 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 30
45481: PUSH
45482: LD_INT 29
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PPUSH
45493: CALL_OW 69
45497: ST_TO_ADDR
// if not tmp then
45498: LD_VAR 0 2
45502: NOT
45503: IFFALSE 45507
// exit ;
45505: GO 45557
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45507: LD_VAR 0 2
45511: PUSH
45512: LD_INT 1
45514: ARRAY
45515: PPUSH
45516: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45520: LD_VAR 0 2
45524: PUSH
45525: LD_INT 1
45527: ARRAY
45528: PPUSH
45529: CALL_OW 65
// end ; 5 .. 7 :
45533: GO 45557
45535: LD_INT 5
45537: DOUBLE
45538: GREATEREQUAL
45539: IFFALSE 45547
45541: LD_INT 7
45543: DOUBLE
45544: LESSEQUAL
45545: IFTRUE 45549
45547: GO 45556
45549: POP
// StreamSibBomb ; end ;
45550: CALL 41794 0 0
45554: GO 45557
45556: POP
// end ;
45557: PPOPN 3
45559: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45560: LD_EXP 87
45564: PUSH
45565: LD_EXP 137
45569: AND
45570: IFFALSE 45726
45572: GO 45574
45574: DISABLE
45575: LD_INT 0
45577: PPUSH
45578: PPUSH
45579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45580: LD_ADDR_VAR 0 2
45584: PUSH
45585: LD_INT 81
45587: PUSH
45588: LD_OWVAR 2
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 21
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 21
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: LIST
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PPUSH
45629: CALL_OW 69
45633: ST_TO_ADDR
// if not tmp then
45634: LD_VAR 0 2
45638: NOT
45639: IFFALSE 45643
// exit ;
45641: GO 45726
// p := 0 ;
45643: LD_ADDR_VAR 0 3
45647: PUSH
45648: LD_INT 0
45650: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45651: LD_INT 35
45653: PPUSH
45654: CALL_OW 67
// p := p + 1 ;
45658: LD_ADDR_VAR 0 3
45662: PUSH
45663: LD_VAR 0 3
45667: PUSH
45668: LD_INT 1
45670: PLUS
45671: ST_TO_ADDR
// for i in tmp do
45672: LD_ADDR_VAR 0 1
45676: PUSH
45677: LD_VAR 0 2
45681: PUSH
45682: FOR_IN
45683: IFFALSE 45714
// if GetLives ( i ) < 1000 then
45685: LD_VAR 0 1
45689: PPUSH
45690: CALL_OW 256
45694: PUSH
45695: LD_INT 1000
45697: LESS
45698: IFFALSE 45712
// SetLives ( i , 1000 ) ;
45700: LD_VAR 0 1
45704: PPUSH
45705: LD_INT 1000
45707: PPUSH
45708: CALL_OW 234
45712: GO 45682
45714: POP
45715: POP
// until p > 20 ;
45716: LD_VAR 0 3
45720: PUSH
45721: LD_INT 20
45723: GREATER
45724: IFFALSE 45651
// end ;
45726: PPOPN 3
45728: END
// every 0 0$1 trigger StreamModeActive and sTime do
45729: LD_EXP 87
45733: PUSH
45734: LD_EXP 138
45738: AND
45739: IFFALSE 45774
45741: GO 45743
45743: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45744: LD_INT 28
45746: PPUSH
45747: LD_OWVAR 2
45751: PPUSH
45752: LD_INT 2
45754: PPUSH
45755: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45759: LD_INT 30
45761: PPUSH
45762: LD_OWVAR 2
45766: PPUSH
45767: LD_INT 2
45769: PPUSH
45770: CALL_OW 322
// end ;
45774: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45775: LD_EXP 87
45779: PUSH
45780: LD_EXP 139
45784: AND
45785: IFFALSE 45906
45787: GO 45789
45789: DISABLE
45790: LD_INT 0
45792: PPUSH
45793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45794: LD_ADDR_VAR 0 2
45798: PUSH
45799: LD_INT 22
45801: PUSH
45802: LD_OWVAR 2
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 21
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: LD_INT 23
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: PPUSH
45843: CALL_OW 69
45847: ST_TO_ADDR
// if not tmp then
45848: LD_VAR 0 2
45852: NOT
45853: IFFALSE 45857
// exit ;
45855: GO 45906
// for i in tmp do
45857: LD_ADDR_VAR 0 1
45861: PUSH
45862: LD_VAR 0 2
45866: PUSH
45867: FOR_IN
45868: IFFALSE 45904
// begin if Crawls ( i ) then
45870: LD_VAR 0 1
45874: PPUSH
45875: CALL_OW 318
45879: IFFALSE 45890
// ComWalk ( i ) ;
45881: LD_VAR 0 1
45885: PPUSH
45886: CALL_OW 138
// SetClass ( i , 2 ) ;
45890: LD_VAR 0 1
45894: PPUSH
45895: LD_INT 2
45897: PPUSH
45898: CALL_OW 336
// end ;
45902: GO 45867
45904: POP
45905: POP
// end ;
45906: PPOPN 2
45908: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45909: LD_EXP 87
45913: PUSH
45914: LD_EXP 140
45918: AND
45919: IFFALSE 46207
45921: GO 45923
45923: DISABLE
45924: LD_INT 0
45926: PPUSH
45927: PPUSH
45928: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45929: LD_OWVAR 2
45933: PPUSH
45934: LD_INT 9
45936: PPUSH
45937: LD_INT 1
45939: PPUSH
45940: LD_INT 1
45942: PPUSH
45943: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45947: LD_INT 9
45949: PPUSH
45950: LD_OWVAR 2
45954: PPUSH
45955: CALL_OW 343
// uc_side := 9 ;
45959: LD_ADDR_OWVAR 20
45963: PUSH
45964: LD_INT 9
45966: ST_TO_ADDR
// uc_nation := 2 ;
45967: LD_ADDR_OWVAR 21
45971: PUSH
45972: LD_INT 2
45974: ST_TO_ADDR
// hc_name := Dark Warrior ;
45975: LD_ADDR_OWVAR 26
45979: PUSH
45980: LD_STRING Dark Warrior
45982: ST_TO_ADDR
// hc_gallery :=  ;
45983: LD_ADDR_OWVAR 33
45987: PUSH
45988: LD_STRING 
45990: ST_TO_ADDR
// hc_noskilllimit := true ;
45991: LD_ADDR_OWVAR 76
45995: PUSH
45996: LD_INT 1
45998: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45999: LD_ADDR_OWVAR 31
46003: PUSH
46004: LD_INT 30
46006: PUSH
46007: LD_INT 30
46009: PUSH
46010: LD_INT 30
46012: PUSH
46013: LD_INT 30
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// un := CreateHuman ;
46022: LD_ADDR_VAR 0 3
46026: PUSH
46027: CALL_OW 44
46031: ST_TO_ADDR
// hc_noskilllimit := false ;
46032: LD_ADDR_OWVAR 76
46036: PUSH
46037: LD_INT 0
46039: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46040: LD_VAR 0 3
46044: PPUSH
46045: LD_INT 1
46047: PPUSH
46048: CALL_OW 51
// ToLua ( playRanger() ) ;
46052: LD_STRING playRanger()
46054: PPUSH
46055: CALL_OW 559
// p := 0 ;
46059: LD_ADDR_VAR 0 2
46063: PUSH
46064: LD_INT 0
46066: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46067: LD_INT 35
46069: PPUSH
46070: CALL_OW 67
// p := p + 1 ;
46074: LD_ADDR_VAR 0 2
46078: PUSH
46079: LD_VAR 0 2
46083: PUSH
46084: LD_INT 1
46086: PLUS
46087: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46088: LD_VAR 0 3
46092: PPUSH
46093: CALL_OW 256
46097: PUSH
46098: LD_INT 1000
46100: LESS
46101: IFFALSE 46115
// SetLives ( un , 1000 ) ;
46103: LD_VAR 0 3
46107: PPUSH
46108: LD_INT 1000
46110: PPUSH
46111: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46115: LD_VAR 0 3
46119: PPUSH
46120: LD_INT 81
46122: PUSH
46123: LD_OWVAR 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 91
46134: PUSH
46135: LD_VAR 0 3
46139: PUSH
46140: LD_INT 30
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PPUSH
46152: CALL_OW 69
46156: PPUSH
46157: LD_VAR 0 3
46161: PPUSH
46162: CALL_OW 74
46166: PPUSH
46167: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46171: LD_VAR 0 2
46175: PUSH
46176: LD_INT 80
46178: GREATER
46179: PUSH
46180: LD_VAR 0 3
46184: PPUSH
46185: CALL_OW 301
46189: OR
46190: IFFALSE 46067
// if un then
46192: LD_VAR 0 3
46196: IFFALSE 46207
// RemoveUnit ( un ) ;
46198: LD_VAR 0 3
46202: PPUSH
46203: CALL_OW 64
// end ;
46207: PPOPN 3
46209: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46210: LD_EXP 141
46214: IFFALSE 46330
46216: GO 46218
46218: DISABLE
46219: LD_INT 0
46221: PPUSH
46222: PPUSH
46223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46224: LD_ADDR_VAR 0 2
46228: PUSH
46229: LD_INT 81
46231: PUSH
46232: LD_OWVAR 2
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 21
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PPUSH
46255: CALL_OW 69
46259: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46260: LD_STRING playComputer()
46262: PPUSH
46263: CALL_OW 559
// if not tmp then
46267: LD_VAR 0 2
46271: NOT
46272: IFFALSE 46276
// exit ;
46274: GO 46330
// for i in tmp do
46276: LD_ADDR_VAR 0 1
46280: PUSH
46281: LD_VAR 0 2
46285: PUSH
46286: FOR_IN
46287: IFFALSE 46328
// for j := 1 to 4 do
46289: LD_ADDR_VAR 0 3
46293: PUSH
46294: DOUBLE
46295: LD_INT 1
46297: DEC
46298: ST_TO_ADDR
46299: LD_INT 4
46301: PUSH
46302: FOR_TO
46303: IFFALSE 46324
// SetSkill ( i , j , 10 ) ;
46305: LD_VAR 0 1
46309: PPUSH
46310: LD_VAR 0 3
46314: PPUSH
46315: LD_INT 10
46317: PPUSH
46318: CALL_OW 237
46322: GO 46302
46324: POP
46325: POP
46326: GO 46286
46328: POP
46329: POP
// end ;
46330: PPOPN 3
46332: END
// every 0 0$1 trigger s30 do var i , tmp ;
46333: LD_EXP 142
46337: IFFALSE 46406
46339: GO 46341
46341: DISABLE
46342: LD_INT 0
46344: PPUSH
46345: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: LD_INT 22
46353: PUSH
46354: LD_OWVAR 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PPUSH
46363: CALL_OW 69
46367: ST_TO_ADDR
// if not tmp then
46368: LD_VAR 0 2
46372: NOT
46373: IFFALSE 46377
// exit ;
46375: GO 46406
// for i in tmp do
46377: LD_ADDR_VAR 0 1
46381: PUSH
46382: LD_VAR 0 2
46386: PUSH
46387: FOR_IN
46388: IFFALSE 46404
// SetLives ( i , 300 ) ;
46390: LD_VAR 0 1
46394: PPUSH
46395: LD_INT 300
46397: PPUSH
46398: CALL_OW 234
46402: GO 46387
46404: POP
46405: POP
// end ;
46406: PPOPN 2
46408: END
// every 0 0$1 trigger s60 do var i , tmp ;
46409: LD_EXP 143
46413: IFFALSE 46482
46415: GO 46417
46417: DISABLE
46418: LD_INT 0
46420: PPUSH
46421: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46422: LD_ADDR_VAR 0 2
46426: PUSH
46427: LD_INT 22
46429: PUSH
46430: LD_OWVAR 2
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PPUSH
46439: CALL_OW 69
46443: ST_TO_ADDR
// if not tmp then
46444: LD_VAR 0 2
46448: NOT
46449: IFFALSE 46453
// exit ;
46451: GO 46482
// for i in tmp do
46453: LD_ADDR_VAR 0 1
46457: PUSH
46458: LD_VAR 0 2
46462: PUSH
46463: FOR_IN
46464: IFFALSE 46480
// SetLives ( i , 600 ) ;
46466: LD_VAR 0 1
46470: PPUSH
46471: LD_INT 600
46473: PPUSH
46474: CALL_OW 234
46478: GO 46463
46480: POP
46481: POP
// end ;
46482: PPOPN 2
46484: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46485: LD_INT 0
46487: PPUSH
// case cmd of 301 :
46488: LD_VAR 0 1
46492: PUSH
46493: LD_INT 301
46495: DOUBLE
46496: EQUAL
46497: IFTRUE 46501
46499: GO 46533
46501: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46502: LD_VAR 0 6
46506: PPUSH
46507: LD_VAR 0 7
46511: PPUSH
46512: LD_VAR 0 8
46516: PPUSH
46517: LD_VAR 0 4
46521: PPUSH
46522: LD_VAR 0 5
46526: PPUSH
46527: CALL 47742 0 5
46531: GO 46654
46533: LD_INT 302
46535: DOUBLE
46536: EQUAL
46537: IFTRUE 46541
46539: GO 46578
46541: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46542: LD_VAR 0 6
46546: PPUSH
46547: LD_VAR 0 7
46551: PPUSH
46552: LD_VAR 0 8
46556: PPUSH
46557: LD_VAR 0 9
46561: PPUSH
46562: LD_VAR 0 4
46566: PPUSH
46567: LD_VAR 0 5
46571: PPUSH
46572: CALL 47833 0 6
46576: GO 46654
46578: LD_INT 303
46580: DOUBLE
46581: EQUAL
46582: IFTRUE 46586
46584: GO 46623
46586: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46587: LD_VAR 0 6
46591: PPUSH
46592: LD_VAR 0 7
46596: PPUSH
46597: LD_VAR 0 8
46601: PPUSH
46602: LD_VAR 0 9
46606: PPUSH
46607: LD_VAR 0 4
46611: PPUSH
46612: LD_VAR 0 5
46616: PPUSH
46617: CALL 46659 0 6
46621: GO 46654
46623: LD_INT 304
46625: DOUBLE
46626: EQUAL
46627: IFTRUE 46631
46629: GO 46653
46631: POP
// hHackTeleport ( unit , x , y ) ; end ;
46632: LD_VAR 0 2
46636: PPUSH
46637: LD_VAR 0 4
46641: PPUSH
46642: LD_VAR 0 5
46646: PPUSH
46647: CALL 48426 0 3
46651: GO 46654
46653: POP
// end ;
46654: LD_VAR 0 12
46658: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46659: LD_INT 0
46661: PPUSH
46662: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46663: LD_VAR 0 1
46667: PUSH
46668: LD_INT 1
46670: LESS
46671: PUSH
46672: LD_VAR 0 1
46676: PUSH
46677: LD_INT 3
46679: GREATER
46680: OR
46681: PUSH
46682: LD_VAR 0 5
46686: PPUSH
46687: LD_VAR 0 6
46691: PPUSH
46692: CALL_OW 428
46696: OR
46697: IFFALSE 46701
// exit ;
46699: GO 47429
// uc_side := your_side ;
46701: LD_ADDR_OWVAR 20
46705: PUSH
46706: LD_OWVAR 2
46710: ST_TO_ADDR
// uc_nation := nation ;
46711: LD_ADDR_OWVAR 21
46715: PUSH
46716: LD_VAR 0 1
46720: ST_TO_ADDR
// bc_level = 1 ;
46721: LD_ADDR_OWVAR 43
46725: PUSH
46726: LD_INT 1
46728: ST_TO_ADDR
// case btype of 1 :
46729: LD_VAR 0 2
46733: PUSH
46734: LD_INT 1
46736: DOUBLE
46737: EQUAL
46738: IFTRUE 46742
46740: GO 46753
46742: POP
// bc_type := b_depot ; 2 :
46743: LD_ADDR_OWVAR 42
46747: PUSH
46748: LD_INT 0
46750: ST_TO_ADDR
46751: GO 47373
46753: LD_INT 2
46755: DOUBLE
46756: EQUAL
46757: IFTRUE 46761
46759: GO 46772
46761: POP
// bc_type := b_warehouse ; 3 :
46762: LD_ADDR_OWVAR 42
46766: PUSH
46767: LD_INT 1
46769: ST_TO_ADDR
46770: GO 47373
46772: LD_INT 3
46774: DOUBLE
46775: EQUAL
46776: IFTRUE 46780
46778: GO 46791
46780: POP
// bc_type := b_lab ; 4 .. 9 :
46781: LD_ADDR_OWVAR 42
46785: PUSH
46786: LD_INT 6
46788: ST_TO_ADDR
46789: GO 47373
46791: LD_INT 4
46793: DOUBLE
46794: GREATEREQUAL
46795: IFFALSE 46803
46797: LD_INT 9
46799: DOUBLE
46800: LESSEQUAL
46801: IFTRUE 46805
46803: GO 46865
46805: POP
// begin bc_type := b_lab_half ;
46806: LD_ADDR_OWVAR 42
46810: PUSH
46811: LD_INT 7
46813: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46814: LD_ADDR_OWVAR 44
46818: PUSH
46819: LD_INT 10
46821: PUSH
46822: LD_INT 11
46824: PUSH
46825: LD_INT 12
46827: PUSH
46828: LD_INT 15
46830: PUSH
46831: LD_INT 14
46833: PUSH
46834: LD_INT 13
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: PUSH
46845: LD_VAR 0 2
46849: PUSH
46850: LD_INT 3
46852: MINUS
46853: ARRAY
46854: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46855: LD_ADDR_OWVAR 45
46859: PUSH
46860: LD_INT 9
46862: ST_TO_ADDR
// end ; 10 .. 13 :
46863: GO 47373
46865: LD_INT 10
46867: DOUBLE
46868: GREATEREQUAL
46869: IFFALSE 46877
46871: LD_INT 13
46873: DOUBLE
46874: LESSEQUAL
46875: IFTRUE 46879
46877: GO 46956
46879: POP
// begin bc_type := b_lab_full ;
46880: LD_ADDR_OWVAR 42
46884: PUSH
46885: LD_INT 8
46887: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46888: LD_ADDR_OWVAR 44
46892: PUSH
46893: LD_INT 10
46895: PUSH
46896: LD_INT 12
46898: PUSH
46899: LD_INT 14
46901: PUSH
46902: LD_INT 13
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: PUSH
46911: LD_VAR 0 2
46915: PUSH
46916: LD_INT 9
46918: MINUS
46919: ARRAY
46920: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46921: LD_ADDR_OWVAR 45
46925: PUSH
46926: LD_INT 11
46928: PUSH
46929: LD_INT 15
46931: PUSH
46932: LD_INT 12
46934: PUSH
46935: LD_INT 15
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: PUSH
46944: LD_VAR 0 2
46948: PUSH
46949: LD_INT 9
46951: MINUS
46952: ARRAY
46953: ST_TO_ADDR
// end ; 14 :
46954: GO 47373
46956: LD_INT 14
46958: DOUBLE
46959: EQUAL
46960: IFTRUE 46964
46962: GO 46975
46964: POP
// bc_type := b_workshop ; 15 :
46965: LD_ADDR_OWVAR 42
46969: PUSH
46970: LD_INT 2
46972: ST_TO_ADDR
46973: GO 47373
46975: LD_INT 15
46977: DOUBLE
46978: EQUAL
46979: IFTRUE 46983
46981: GO 46994
46983: POP
// bc_type := b_factory ; 16 :
46984: LD_ADDR_OWVAR 42
46988: PUSH
46989: LD_INT 3
46991: ST_TO_ADDR
46992: GO 47373
46994: LD_INT 16
46996: DOUBLE
46997: EQUAL
46998: IFTRUE 47002
47000: GO 47013
47002: POP
// bc_type := b_ext_gun ; 17 :
47003: LD_ADDR_OWVAR 42
47007: PUSH
47008: LD_INT 17
47010: ST_TO_ADDR
47011: GO 47373
47013: LD_INT 17
47015: DOUBLE
47016: EQUAL
47017: IFTRUE 47021
47019: GO 47049
47021: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
47022: LD_ADDR_OWVAR 42
47026: PUSH
47027: LD_INT 19
47029: PUSH
47030: LD_INT 23
47032: PUSH
47033: LD_INT 19
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: PUSH
47041: LD_VAR 0 1
47045: ARRAY
47046: ST_TO_ADDR
47047: GO 47373
47049: LD_INT 18
47051: DOUBLE
47052: EQUAL
47053: IFTRUE 47057
47055: GO 47068
47057: POP
// bc_type := b_ext_radar ; 19 :
47058: LD_ADDR_OWVAR 42
47062: PUSH
47063: LD_INT 20
47065: ST_TO_ADDR
47066: GO 47373
47068: LD_INT 19
47070: DOUBLE
47071: EQUAL
47072: IFTRUE 47076
47074: GO 47087
47076: POP
// bc_type := b_ext_radio ; 20 :
47077: LD_ADDR_OWVAR 42
47081: PUSH
47082: LD_INT 22
47084: ST_TO_ADDR
47085: GO 47373
47087: LD_INT 20
47089: DOUBLE
47090: EQUAL
47091: IFTRUE 47095
47093: GO 47106
47095: POP
// bc_type := b_ext_siberium ; 21 :
47096: LD_ADDR_OWVAR 42
47100: PUSH
47101: LD_INT 21
47103: ST_TO_ADDR
47104: GO 47373
47106: LD_INT 21
47108: DOUBLE
47109: EQUAL
47110: IFTRUE 47114
47112: GO 47125
47114: POP
// bc_type := b_ext_computer ; 22 :
47115: LD_ADDR_OWVAR 42
47119: PUSH
47120: LD_INT 24
47122: ST_TO_ADDR
47123: GO 47373
47125: LD_INT 22
47127: DOUBLE
47128: EQUAL
47129: IFTRUE 47133
47131: GO 47144
47133: POP
// bc_type := b_ext_track ; 23 :
47134: LD_ADDR_OWVAR 42
47138: PUSH
47139: LD_INT 16
47141: ST_TO_ADDR
47142: GO 47373
47144: LD_INT 23
47146: DOUBLE
47147: EQUAL
47148: IFTRUE 47152
47150: GO 47163
47152: POP
// bc_type := b_ext_laser ; 24 :
47153: LD_ADDR_OWVAR 42
47157: PUSH
47158: LD_INT 25
47160: ST_TO_ADDR
47161: GO 47373
47163: LD_INT 24
47165: DOUBLE
47166: EQUAL
47167: IFTRUE 47171
47169: GO 47182
47171: POP
// bc_type := b_control_tower ; 25 :
47172: LD_ADDR_OWVAR 42
47176: PUSH
47177: LD_INT 36
47179: ST_TO_ADDR
47180: GO 47373
47182: LD_INT 25
47184: DOUBLE
47185: EQUAL
47186: IFTRUE 47190
47188: GO 47201
47190: POP
// bc_type := b_breastwork ; 26 :
47191: LD_ADDR_OWVAR 42
47195: PUSH
47196: LD_INT 31
47198: ST_TO_ADDR
47199: GO 47373
47201: LD_INT 26
47203: DOUBLE
47204: EQUAL
47205: IFTRUE 47209
47207: GO 47220
47209: POP
// bc_type := b_bunker ; 27 :
47210: LD_ADDR_OWVAR 42
47214: PUSH
47215: LD_INT 32
47217: ST_TO_ADDR
47218: GO 47373
47220: LD_INT 27
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47239
47228: POP
// bc_type := b_turret ; 28 :
47229: LD_ADDR_OWVAR 42
47233: PUSH
47234: LD_INT 33
47236: ST_TO_ADDR
47237: GO 47373
47239: LD_INT 28
47241: DOUBLE
47242: EQUAL
47243: IFTRUE 47247
47245: GO 47258
47247: POP
// bc_type := b_armoury ; 29 :
47248: LD_ADDR_OWVAR 42
47252: PUSH
47253: LD_INT 4
47255: ST_TO_ADDR
47256: GO 47373
47258: LD_INT 29
47260: DOUBLE
47261: EQUAL
47262: IFTRUE 47266
47264: GO 47277
47266: POP
// bc_type := b_barracks ; 30 :
47267: LD_ADDR_OWVAR 42
47271: PUSH
47272: LD_INT 5
47274: ST_TO_ADDR
47275: GO 47373
47277: LD_INT 30
47279: DOUBLE
47280: EQUAL
47281: IFTRUE 47285
47283: GO 47296
47285: POP
// bc_type := b_solar_power ; 31 :
47286: LD_ADDR_OWVAR 42
47290: PUSH
47291: LD_INT 27
47293: ST_TO_ADDR
47294: GO 47373
47296: LD_INT 31
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47304
47302: GO 47315
47304: POP
// bc_type := b_oil_power ; 32 :
47305: LD_ADDR_OWVAR 42
47309: PUSH
47310: LD_INT 26
47312: ST_TO_ADDR
47313: GO 47373
47315: LD_INT 32
47317: DOUBLE
47318: EQUAL
47319: IFTRUE 47323
47321: GO 47334
47323: POP
// bc_type := b_siberite_power ; 33 :
47324: LD_ADDR_OWVAR 42
47328: PUSH
47329: LD_INT 28
47331: ST_TO_ADDR
47332: GO 47373
47334: LD_INT 33
47336: DOUBLE
47337: EQUAL
47338: IFTRUE 47342
47340: GO 47353
47342: POP
// bc_type := b_oil_mine ; 34 :
47343: LD_ADDR_OWVAR 42
47347: PUSH
47348: LD_INT 29
47350: ST_TO_ADDR
47351: GO 47373
47353: LD_INT 34
47355: DOUBLE
47356: EQUAL
47357: IFTRUE 47361
47359: GO 47372
47361: POP
// bc_type := b_siberite_mine ; end ;
47362: LD_ADDR_OWVAR 42
47366: PUSH
47367: LD_INT 30
47369: ST_TO_ADDR
47370: GO 47373
47372: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47373: LD_ADDR_VAR 0 8
47377: PUSH
47378: LD_VAR 0 5
47382: PPUSH
47383: LD_VAR 0 6
47387: PPUSH
47388: LD_VAR 0 3
47392: PPUSH
47393: CALL_OW 47
47397: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47398: LD_OWVAR 42
47402: PUSH
47403: LD_INT 32
47405: PUSH
47406: LD_INT 33
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: IN
47413: IFFALSE 47429
// PlaceWeaponTurret ( b , weapon ) ;
47415: LD_VAR 0 8
47419: PPUSH
47420: LD_VAR 0 4
47424: PPUSH
47425: CALL_OW 431
// end ;
47429: LD_VAR 0 7
47433: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47434: LD_INT 0
47436: PPUSH
47437: PPUSH
47438: PPUSH
47439: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47440: LD_ADDR_VAR 0 4
47444: PUSH
47445: LD_INT 22
47447: PUSH
47448: LD_OWVAR 2
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 30
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 30
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PPUSH
47489: CALL_OW 69
47493: ST_TO_ADDR
// if not tmp then
47494: LD_VAR 0 4
47498: NOT
47499: IFFALSE 47503
// exit ;
47501: GO 47562
// for i in tmp do
47503: LD_ADDR_VAR 0 2
47507: PUSH
47508: LD_VAR 0 4
47512: PUSH
47513: FOR_IN
47514: IFFALSE 47560
// for j = 1 to 3 do
47516: LD_ADDR_VAR 0 3
47520: PUSH
47521: DOUBLE
47522: LD_INT 1
47524: DEC
47525: ST_TO_ADDR
47526: LD_INT 3
47528: PUSH
47529: FOR_TO
47530: IFFALSE 47556
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 274
47541: PPUSH
47542: LD_VAR 0 3
47546: PPUSH
47547: LD_INT 99999
47549: PPUSH
47550: CALL_OW 277
47554: GO 47529
47556: POP
47557: POP
47558: GO 47513
47560: POP
47561: POP
// end ;
47562: LD_VAR 0 1
47566: RET
// export function hHackSetLevel10 ; var i , j ; begin
47567: LD_INT 0
47569: PPUSH
47570: PPUSH
47571: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47572: LD_ADDR_VAR 0 2
47576: PUSH
47577: LD_INT 21
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PPUSH
47587: CALL_OW 69
47591: PUSH
47592: FOR_IN
47593: IFFALSE 47645
// if IsSelected ( i ) then
47595: LD_VAR 0 2
47599: PPUSH
47600: CALL_OW 306
47604: IFFALSE 47643
// begin for j := 1 to 4 do
47606: LD_ADDR_VAR 0 3
47610: PUSH
47611: DOUBLE
47612: LD_INT 1
47614: DEC
47615: ST_TO_ADDR
47616: LD_INT 4
47618: PUSH
47619: FOR_TO
47620: IFFALSE 47641
// SetSkill ( i , j , 10 ) ;
47622: LD_VAR 0 2
47626: PPUSH
47627: LD_VAR 0 3
47631: PPUSH
47632: LD_INT 10
47634: PPUSH
47635: CALL_OW 237
47639: GO 47619
47641: POP
47642: POP
// end ;
47643: GO 47592
47645: POP
47646: POP
// end ;
47647: LD_VAR 0 1
47651: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47652: LD_INT 0
47654: PPUSH
47655: PPUSH
47656: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47657: LD_ADDR_VAR 0 2
47661: PUSH
47662: LD_INT 22
47664: PUSH
47665: LD_OWVAR 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 21
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PPUSH
47688: CALL_OW 69
47692: PUSH
47693: FOR_IN
47694: IFFALSE 47735
// begin for j := 1 to 4 do
47696: LD_ADDR_VAR 0 3
47700: PUSH
47701: DOUBLE
47702: LD_INT 1
47704: DEC
47705: ST_TO_ADDR
47706: LD_INT 4
47708: PUSH
47709: FOR_TO
47710: IFFALSE 47731
// SetSkill ( i , j , 10 ) ;
47712: LD_VAR 0 2
47716: PPUSH
47717: LD_VAR 0 3
47721: PPUSH
47722: LD_INT 10
47724: PPUSH
47725: CALL_OW 237
47729: GO 47709
47731: POP
47732: POP
// end ;
47733: GO 47693
47735: POP
47736: POP
// end ;
47737: LD_VAR 0 1
47741: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47742: LD_INT 0
47744: PPUSH
// uc_side := your_side ;
47745: LD_ADDR_OWVAR 20
47749: PUSH
47750: LD_OWVAR 2
47754: ST_TO_ADDR
// uc_nation := nation ;
47755: LD_ADDR_OWVAR 21
47759: PUSH
47760: LD_VAR 0 1
47764: ST_TO_ADDR
// InitHc ;
47765: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47769: LD_INT 0
47771: PPUSH
47772: LD_VAR 0 2
47776: PPUSH
47777: LD_VAR 0 3
47781: PPUSH
47782: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47786: LD_VAR 0 4
47790: PPUSH
47791: LD_VAR 0 5
47795: PPUSH
47796: CALL_OW 428
47800: PUSH
47801: LD_INT 0
47803: EQUAL
47804: IFFALSE 47828
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47806: CALL_OW 44
47810: PPUSH
47811: LD_VAR 0 4
47815: PPUSH
47816: LD_VAR 0 5
47820: PPUSH
47821: LD_INT 1
47823: PPUSH
47824: CALL_OW 48
// end ;
47828: LD_VAR 0 6
47832: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47833: LD_INT 0
47835: PPUSH
47836: PPUSH
// uc_side := your_side ;
47837: LD_ADDR_OWVAR 20
47841: PUSH
47842: LD_OWVAR 2
47846: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47847: LD_VAR 0 1
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: LD_INT 4
47863: PUSH
47864: LD_INT 5
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: IN
47874: IFFALSE 47886
// uc_nation := nation_american else
47876: LD_ADDR_OWVAR 21
47880: PUSH
47881: LD_INT 1
47883: ST_TO_ADDR
47884: GO 47929
// if chassis in [ 11 , 12 , 13 , 14 ] then
47886: LD_VAR 0 1
47890: PUSH
47891: LD_INT 11
47893: PUSH
47894: LD_INT 12
47896: PUSH
47897: LD_INT 13
47899: PUSH
47900: LD_INT 14
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: IN
47909: IFFALSE 47921
// uc_nation := nation_arabian else
47911: LD_ADDR_OWVAR 21
47915: PUSH
47916: LD_INT 2
47918: ST_TO_ADDR
47919: GO 47929
// uc_nation := nation_russian ;
47921: LD_ADDR_OWVAR 21
47925: PUSH
47926: LD_INT 3
47928: ST_TO_ADDR
// vc_chassis := chassis ;
47929: LD_ADDR_OWVAR 37
47933: PUSH
47934: LD_VAR 0 1
47938: ST_TO_ADDR
// vc_engine := engine ;
47939: LD_ADDR_OWVAR 39
47943: PUSH
47944: LD_VAR 0 2
47948: ST_TO_ADDR
// vc_control := control ;
47949: LD_ADDR_OWVAR 38
47953: PUSH
47954: LD_VAR 0 3
47958: ST_TO_ADDR
// vc_weapon := weapon ;
47959: LD_ADDR_OWVAR 40
47963: PUSH
47964: LD_VAR 0 4
47968: ST_TO_ADDR
// un := CreateVehicle ;
47969: LD_ADDR_VAR 0 8
47973: PUSH
47974: CALL_OW 45
47978: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47979: LD_VAR 0 8
47983: PPUSH
47984: LD_INT 0
47986: PPUSH
47987: LD_INT 5
47989: PPUSH
47990: CALL_OW 12
47994: PPUSH
47995: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47999: LD_VAR 0 8
48003: PPUSH
48004: LD_VAR 0 5
48008: PPUSH
48009: LD_VAR 0 6
48013: PPUSH
48014: LD_INT 1
48016: PPUSH
48017: CALL_OW 48
// end ;
48021: LD_VAR 0 7
48025: RET
// export hInvincible ; every 1 do
48026: GO 48028
48028: DISABLE
// hInvincible := [ ] ;
48029: LD_ADDR_EXP 144
48033: PUSH
48034: EMPTY
48035: ST_TO_ADDR
48036: END
// every 10 do var i ;
48037: GO 48039
48039: DISABLE
48040: LD_INT 0
48042: PPUSH
// begin enable ;
48043: ENABLE
// if not hInvincible then
48044: LD_EXP 144
48048: NOT
48049: IFFALSE 48053
// exit ;
48051: GO 48097
// for i in hInvincible do
48053: LD_ADDR_VAR 0 1
48057: PUSH
48058: LD_EXP 144
48062: PUSH
48063: FOR_IN
48064: IFFALSE 48095
// if GetLives ( i ) < 1000 then
48066: LD_VAR 0 1
48070: PPUSH
48071: CALL_OW 256
48075: PUSH
48076: LD_INT 1000
48078: LESS
48079: IFFALSE 48093
// SetLives ( i , 1000 ) ;
48081: LD_VAR 0 1
48085: PPUSH
48086: LD_INT 1000
48088: PPUSH
48089: CALL_OW 234
48093: GO 48063
48095: POP
48096: POP
// end ;
48097: PPOPN 1
48099: END
// export function hHackInvincible ; var i ; begin
48100: LD_INT 0
48102: PPUSH
48103: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48104: LD_ADDR_VAR 0 2
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 21
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 21
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: PPUSH
48137: CALL_OW 69
48141: PUSH
48142: FOR_IN
48143: IFFALSE 48204
// if IsSelected ( i ) then
48145: LD_VAR 0 2
48149: PPUSH
48150: CALL_OW 306
48154: IFFALSE 48202
// begin if i in hInvincible then
48156: LD_VAR 0 2
48160: PUSH
48161: LD_EXP 144
48165: IN
48166: IFFALSE 48186
// hInvincible := hInvincible diff i else
48168: LD_ADDR_EXP 144
48172: PUSH
48173: LD_EXP 144
48177: PUSH
48178: LD_VAR 0 2
48182: DIFF
48183: ST_TO_ADDR
48184: GO 48202
// hInvincible := hInvincible union i ;
48186: LD_ADDR_EXP 144
48190: PUSH
48191: LD_EXP 144
48195: PUSH
48196: LD_VAR 0 2
48200: UNION
48201: ST_TO_ADDR
// end ;
48202: GO 48142
48204: POP
48205: POP
// end ;
48206: LD_VAR 0 1
48210: RET
// export function hHackInvisible ; var i , j ; begin
48211: LD_INT 0
48213: PPUSH
48214: PPUSH
48215: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48216: LD_ADDR_VAR 0 2
48220: PUSH
48221: LD_INT 21
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PPUSH
48231: CALL_OW 69
48235: PUSH
48236: FOR_IN
48237: IFFALSE 48261
// if IsSelected ( i ) then
48239: LD_VAR 0 2
48243: PPUSH
48244: CALL_OW 306
48248: IFFALSE 48259
// ComForceInvisible ( i ) ;
48250: LD_VAR 0 2
48254: PPUSH
48255: CALL_OW 496
48259: GO 48236
48261: POP
48262: POP
// end ;
48263: LD_VAR 0 1
48267: RET
// export function hHackChangeYourSide ; begin
48268: LD_INT 0
48270: PPUSH
// if your_side = 8 then
48271: LD_OWVAR 2
48275: PUSH
48276: LD_INT 8
48278: EQUAL
48279: IFFALSE 48291
// your_side := 0 else
48281: LD_ADDR_OWVAR 2
48285: PUSH
48286: LD_INT 0
48288: ST_TO_ADDR
48289: GO 48305
// your_side := your_side + 1 ;
48291: LD_ADDR_OWVAR 2
48295: PUSH
48296: LD_OWVAR 2
48300: PUSH
48301: LD_INT 1
48303: PLUS
48304: ST_TO_ADDR
// end ;
48305: LD_VAR 0 1
48309: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48310: LD_INT 0
48312: PPUSH
48313: PPUSH
48314: PPUSH
// for i in all_units do
48315: LD_ADDR_VAR 0 2
48319: PUSH
48320: LD_OWVAR 3
48324: PUSH
48325: FOR_IN
48326: IFFALSE 48404
// if IsSelected ( i ) then
48328: LD_VAR 0 2
48332: PPUSH
48333: CALL_OW 306
48337: IFFALSE 48402
// begin j := GetSide ( i ) ;
48339: LD_ADDR_VAR 0 3
48343: PUSH
48344: LD_VAR 0 2
48348: PPUSH
48349: CALL_OW 255
48353: ST_TO_ADDR
// if j = 8 then
48354: LD_VAR 0 3
48358: PUSH
48359: LD_INT 8
48361: EQUAL
48362: IFFALSE 48374
// j := 0 else
48364: LD_ADDR_VAR 0 3
48368: PUSH
48369: LD_INT 0
48371: ST_TO_ADDR
48372: GO 48388
// j := j + 1 ;
48374: LD_ADDR_VAR 0 3
48378: PUSH
48379: LD_VAR 0 3
48383: PUSH
48384: LD_INT 1
48386: PLUS
48387: ST_TO_ADDR
// SetSide ( i , j ) ;
48388: LD_VAR 0 2
48392: PPUSH
48393: LD_VAR 0 3
48397: PPUSH
48398: CALL_OW 235
// end ;
48402: GO 48325
48404: POP
48405: POP
// end ;
48406: LD_VAR 0 1
48410: RET
// export function hHackFog ; begin
48411: LD_INT 0
48413: PPUSH
// FogOff ( true ) ;
48414: LD_INT 1
48416: PPUSH
48417: CALL_OW 344
// end ;
48421: LD_VAR 0 1
48425: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48426: LD_INT 0
48428: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48429: LD_VAR 0 1
48433: PPUSH
48434: LD_VAR 0 2
48438: PPUSH
48439: LD_VAR 0 3
48443: PPUSH
48444: LD_INT 1
48446: PPUSH
48447: LD_INT 1
48449: PPUSH
48450: CALL_OW 483
// CenterOnXY ( x , y ) ;
48454: LD_VAR 0 2
48458: PPUSH
48459: LD_VAR 0 3
48463: PPUSH
48464: CALL_OW 84
// end ;
48468: LD_VAR 0 4
48472: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48473: LD_INT 0
48475: PPUSH
48476: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48477: LD_VAR 0 1
48481: NOT
48482: PUSH
48483: LD_VAR 0 2
48487: PPUSH
48488: LD_VAR 0 3
48492: PPUSH
48493: CALL_OW 488
48497: NOT
48498: OR
48499: PUSH
48500: LD_VAR 0 1
48504: PPUSH
48505: CALL_OW 266
48509: PUSH
48510: LD_INT 3
48512: NONEQUAL
48513: PUSH
48514: LD_VAR 0 1
48518: PPUSH
48519: CALL_OW 247
48523: PUSH
48524: LD_INT 1
48526: EQUAL
48527: NOT
48528: AND
48529: OR
48530: IFFALSE 48534
// exit ;
48532: GO 48683
// if GetType ( factory ) = unit_human then
48534: LD_VAR 0 1
48538: PPUSH
48539: CALL_OW 247
48543: PUSH
48544: LD_INT 1
48546: EQUAL
48547: IFFALSE 48564
// factory := IsInUnit ( factory ) ;
48549: LD_ADDR_VAR 0 1
48553: PUSH
48554: LD_VAR 0 1
48558: PPUSH
48559: CALL_OW 310
48563: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48564: LD_VAR 0 1
48568: PPUSH
48569: CALL_OW 266
48573: PUSH
48574: LD_INT 3
48576: NONEQUAL
48577: IFFALSE 48581
// exit ;
48579: GO 48683
// if HexInfo ( x , y ) = factory then
48581: LD_VAR 0 2
48585: PPUSH
48586: LD_VAR 0 3
48590: PPUSH
48591: CALL_OW 428
48595: PUSH
48596: LD_VAR 0 1
48600: EQUAL
48601: IFFALSE 48628
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
48603: LD_ADDR_EXP 145
48607: PUSH
48608: LD_EXP 145
48612: PPUSH
48613: LD_VAR 0 1
48617: PPUSH
48618: LD_INT 0
48620: PPUSH
48621: CALL_OW 1
48625: ST_TO_ADDR
48626: GO 48679
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
48628: LD_ADDR_EXP 145
48632: PUSH
48633: LD_EXP 145
48637: PPUSH
48638: LD_VAR 0 1
48642: PPUSH
48643: LD_VAR 0 1
48647: PPUSH
48648: CALL_OW 255
48652: PUSH
48653: LD_VAR 0 1
48657: PUSH
48658: LD_VAR 0 2
48662: PUSH
48663: LD_VAR 0 3
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: PPUSH
48674: CALL_OW 1
48678: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48679: CALL 48688 0 0
// end ;
48683: LD_VAR 0 4
48687: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48688: LD_INT 0
48690: PPUSH
48691: PPUSH
48692: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48693: LD_STRING resetFactoryWaypoint();
48695: PPUSH
48696: CALL_OW 559
// if factoryWaypoints then
48700: LD_EXP 145
48704: IFFALSE 48830
// begin list := PrepareArray ( factoryWaypoints ) ;
48706: LD_ADDR_VAR 0 3
48710: PUSH
48711: LD_EXP 145
48715: PPUSH
48716: CALL 96138 0 1
48720: ST_TO_ADDR
// for i := 1 to list do
48721: LD_ADDR_VAR 0 2
48725: PUSH
48726: DOUBLE
48727: LD_INT 1
48729: DEC
48730: ST_TO_ADDR
48731: LD_VAR 0 3
48735: PUSH
48736: FOR_TO
48737: IFFALSE 48828
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48739: LD_STRING setFactoryWaypointXY(
48741: PUSH
48742: LD_VAR 0 3
48746: PUSH
48747: LD_VAR 0 2
48751: ARRAY
48752: PUSH
48753: LD_INT 1
48755: ARRAY
48756: STR
48757: PUSH
48758: LD_STRING ,
48760: STR
48761: PUSH
48762: LD_VAR 0 3
48766: PUSH
48767: LD_VAR 0 2
48771: ARRAY
48772: PUSH
48773: LD_INT 2
48775: ARRAY
48776: STR
48777: PUSH
48778: LD_STRING ,
48780: STR
48781: PUSH
48782: LD_VAR 0 3
48786: PUSH
48787: LD_VAR 0 2
48791: ARRAY
48792: PUSH
48793: LD_INT 3
48795: ARRAY
48796: STR
48797: PUSH
48798: LD_STRING ,
48800: STR
48801: PUSH
48802: LD_VAR 0 3
48806: PUSH
48807: LD_VAR 0 2
48811: ARRAY
48812: PUSH
48813: LD_INT 4
48815: ARRAY
48816: STR
48817: PUSH
48818: LD_STRING )
48820: STR
48821: PPUSH
48822: CALL_OW 559
48826: GO 48736
48828: POP
48829: POP
// end ; end ;
48830: LD_VAR 0 1
48834: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48835: LD_INT 0
48837: PPUSH
// if HexInfo ( x , y ) = warehouse then
48838: LD_VAR 0 2
48842: PPUSH
48843: LD_VAR 0 3
48847: PPUSH
48848: CALL_OW 428
48852: PUSH
48853: LD_VAR 0 1
48857: EQUAL
48858: IFFALSE 48885
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48860: LD_ADDR_EXP 146
48864: PUSH
48865: LD_EXP 146
48869: PPUSH
48870: LD_VAR 0 1
48874: PPUSH
48875: LD_INT 0
48877: PPUSH
48878: CALL_OW 1
48882: ST_TO_ADDR
48883: GO 48936
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48885: LD_ADDR_EXP 146
48889: PUSH
48890: LD_EXP 146
48894: PPUSH
48895: LD_VAR 0 1
48899: PPUSH
48900: LD_VAR 0 1
48904: PPUSH
48905: CALL_OW 255
48909: PUSH
48910: LD_VAR 0 1
48914: PUSH
48915: LD_VAR 0 2
48919: PUSH
48920: LD_VAR 0 3
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: PPUSH
48931: CALL_OW 1
48935: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
48936: CALL 48945 0 0
// end ;
48940: LD_VAR 0 4
48944: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
48945: LD_INT 0
48947: PPUSH
48948: PPUSH
48949: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
48950: LD_STRING resetWarehouseGatheringPoints();
48952: PPUSH
48953: CALL_OW 559
// if warehouseGatheringPoints then
48957: LD_EXP 146
48961: IFFALSE 49087
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
48963: LD_ADDR_VAR 0 3
48967: PUSH
48968: LD_EXP 146
48972: PPUSH
48973: CALL 96138 0 1
48977: ST_TO_ADDR
// for i := 1 to list do
48978: LD_ADDR_VAR 0 2
48982: PUSH
48983: DOUBLE
48984: LD_INT 1
48986: DEC
48987: ST_TO_ADDR
48988: LD_VAR 0 3
48992: PUSH
48993: FOR_TO
48994: IFFALSE 49085
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48996: LD_STRING setWarehouseGatheringPointXY(
48998: PUSH
48999: LD_VAR 0 3
49003: PUSH
49004: LD_VAR 0 2
49008: ARRAY
49009: PUSH
49010: LD_INT 1
49012: ARRAY
49013: STR
49014: PUSH
49015: LD_STRING ,
49017: STR
49018: PUSH
49019: LD_VAR 0 3
49023: PUSH
49024: LD_VAR 0 2
49028: ARRAY
49029: PUSH
49030: LD_INT 2
49032: ARRAY
49033: STR
49034: PUSH
49035: LD_STRING ,
49037: STR
49038: PUSH
49039: LD_VAR 0 3
49043: PUSH
49044: LD_VAR 0 2
49048: ARRAY
49049: PUSH
49050: LD_INT 3
49052: ARRAY
49053: STR
49054: PUSH
49055: LD_STRING ,
49057: STR
49058: PUSH
49059: LD_VAR 0 3
49063: PUSH
49064: LD_VAR 0 2
49068: ARRAY
49069: PUSH
49070: LD_INT 4
49072: ARRAY
49073: STR
49074: PUSH
49075: LD_STRING )
49077: STR
49078: PPUSH
49079: CALL_OW 559
49083: GO 48993
49085: POP
49086: POP
// end ; end ;
49087: LD_VAR 0 1
49091: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49092: LD_EXP 146
49096: IFFALSE 49781
49098: GO 49100
49100: DISABLE
49101: LD_INT 0
49103: PPUSH
49104: PPUSH
49105: PPUSH
49106: PPUSH
49107: PPUSH
49108: PPUSH
49109: PPUSH
49110: PPUSH
49111: PPUSH
// begin enable ;
49112: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49113: LD_ADDR_VAR 0 3
49117: PUSH
49118: LD_EXP 146
49122: PPUSH
49123: CALL 96138 0 1
49127: ST_TO_ADDR
// if not list then
49128: LD_VAR 0 3
49132: NOT
49133: IFFALSE 49137
// exit ;
49135: GO 49781
// for i := 1 to list do
49137: LD_ADDR_VAR 0 1
49141: PUSH
49142: DOUBLE
49143: LD_INT 1
49145: DEC
49146: ST_TO_ADDR
49147: LD_VAR 0 3
49151: PUSH
49152: FOR_TO
49153: IFFALSE 49779
// begin depot := list [ i ] [ 2 ] ;
49155: LD_ADDR_VAR 0 8
49159: PUSH
49160: LD_VAR 0 3
49164: PUSH
49165: LD_VAR 0 1
49169: ARRAY
49170: PUSH
49171: LD_INT 2
49173: ARRAY
49174: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49175: LD_ADDR_VAR 0 5
49179: PUSH
49180: LD_VAR 0 3
49184: PUSH
49185: LD_VAR 0 1
49189: ARRAY
49190: PUSH
49191: LD_INT 1
49193: ARRAY
49194: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49195: LD_VAR 0 8
49199: PPUSH
49200: CALL_OW 301
49204: PUSH
49205: LD_VAR 0 5
49209: PUSH
49210: LD_VAR 0 8
49214: PPUSH
49215: CALL_OW 255
49219: NONEQUAL
49220: OR
49221: IFFALSE 49250
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49223: LD_ADDR_EXP 146
49227: PUSH
49228: LD_EXP 146
49232: PPUSH
49233: LD_VAR 0 8
49237: PPUSH
49238: LD_INT 0
49240: PPUSH
49241: CALL_OW 1
49245: ST_TO_ADDR
// exit ;
49246: POP
49247: POP
49248: GO 49781
// end ; x := list [ i ] [ 3 ] ;
49250: LD_ADDR_VAR 0 6
49254: PUSH
49255: LD_VAR 0 3
49259: PUSH
49260: LD_VAR 0 1
49264: ARRAY
49265: PUSH
49266: LD_INT 3
49268: ARRAY
49269: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49270: LD_ADDR_VAR 0 7
49274: PUSH
49275: LD_VAR 0 3
49279: PUSH
49280: LD_VAR 0 1
49284: ARRAY
49285: PUSH
49286: LD_INT 4
49288: ARRAY
49289: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49290: LD_ADDR_VAR 0 9
49294: PUSH
49295: LD_VAR 0 6
49299: PPUSH
49300: LD_VAR 0 7
49304: PPUSH
49305: LD_INT 16
49307: PPUSH
49308: CALL 94726 0 3
49312: ST_TO_ADDR
// if not cratesNearbyPoint then
49313: LD_VAR 0 9
49317: NOT
49318: IFFALSE 49324
// exit ;
49320: POP
49321: POP
49322: GO 49781
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49324: LD_ADDR_VAR 0 4
49328: PUSH
49329: LD_INT 22
49331: PUSH
49332: LD_VAR 0 5
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: LD_INT 60
49346: PUSH
49347: EMPTY
49348: LIST
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 91
49356: PUSH
49357: LD_VAR 0 8
49361: PUSH
49362: LD_INT 6
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 25
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 25
49385: PUSH
49386: LD_INT 16
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: PPUSH
49404: CALL_OW 69
49408: PUSH
49409: LD_VAR 0 8
49413: PPUSH
49414: CALL_OW 313
49418: PPUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 60
49424: PUSH
49425: EMPTY
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 25
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 25
49447: PUSH
49448: LD_INT 16
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PPUSH
49464: CALL_OW 72
49468: UNION
49469: ST_TO_ADDR
// if tmp then
49470: LD_VAR 0 4
49474: IFFALSE 49554
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49476: LD_ADDR_VAR 0 4
49480: PUSH
49481: LD_VAR 0 4
49485: PPUSH
49486: LD_INT 3
49488: PPUSH
49489: CALL 92695 0 2
49493: ST_TO_ADDR
// for j in tmp do
49494: LD_ADDR_VAR 0 2
49498: PUSH
49499: LD_VAR 0 4
49503: PUSH
49504: FOR_IN
49505: IFFALSE 49548
// begin if IsInUnit ( j ) then
49507: LD_VAR 0 2
49511: PPUSH
49512: CALL_OW 310
49516: IFFALSE 49527
// ComExit ( j ) ;
49518: LD_VAR 0 2
49522: PPUSH
49523: CALL 92778 0 1
// AddComCollect ( j , x , y ) ;
49527: LD_VAR 0 2
49531: PPUSH
49532: LD_VAR 0 6
49536: PPUSH
49537: LD_VAR 0 7
49541: PPUSH
49542: CALL_OW 177
// end ;
49546: GO 49504
49548: POP
49549: POP
// exit ;
49550: POP
49551: POP
49552: GO 49781
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49554: LD_ADDR_VAR 0 4
49558: PUSH
49559: LD_INT 22
49561: PUSH
49562: LD_VAR 0 5
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 91
49573: PUSH
49574: LD_VAR 0 8
49578: PUSH
49579: LD_INT 8
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 34
49592: PUSH
49593: LD_INT 12
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 34
49602: PUSH
49603: LD_INT 51
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 34
49612: PUSH
49613: LD_INT 32
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 34
49622: PUSH
49623: LD_INT 89
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: PPUSH
49642: CALL_OW 69
49646: ST_TO_ADDR
// if tmp then
49647: LD_VAR 0 4
49651: IFFALSE 49777
// begin for j in tmp do
49653: LD_ADDR_VAR 0 2
49657: PUSH
49658: LD_VAR 0 4
49662: PUSH
49663: FOR_IN
49664: IFFALSE 49775
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49666: LD_VAR 0 2
49670: PPUSH
49671: CALL_OW 262
49675: PUSH
49676: LD_INT 3
49678: EQUAL
49679: PUSH
49680: LD_VAR 0 2
49684: PPUSH
49685: CALL_OW 261
49689: PUSH
49690: LD_INT 20
49692: GREATER
49693: OR
49694: PUSH
49695: LD_VAR 0 2
49699: PPUSH
49700: CALL_OW 314
49704: NOT
49705: AND
49706: PUSH
49707: LD_VAR 0 2
49711: PPUSH
49712: CALL_OW 263
49716: PUSH
49717: LD_INT 1
49719: NONEQUAL
49720: PUSH
49721: LD_VAR 0 2
49725: PPUSH
49726: CALL_OW 311
49730: OR
49731: AND
49732: IFFALSE 49773
// begin ComCollect ( j , x , y ) ;
49734: LD_VAR 0 2
49738: PPUSH
49739: LD_VAR 0 6
49743: PPUSH
49744: LD_VAR 0 7
49748: PPUSH
49749: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49753: LD_VAR 0 2
49757: PPUSH
49758: LD_VAR 0 8
49762: PPUSH
49763: CALL_OW 172
// exit ;
49767: POP
49768: POP
49769: POP
49770: POP
49771: GO 49781
// end ;
49773: GO 49663
49775: POP
49776: POP
// end ; end ;
49777: GO 49152
49779: POP
49780: POP
// end ; end_of_file
49781: PPOPN 9
49783: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
49784: LD_INT 0
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
49790: LD_VAR 0 1
49794: PPUSH
49795: CALL_OW 264
49799: PUSH
49800: LD_INT 91
49802: EQUAL
49803: IFFALSE 49875
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
49805: LD_INT 68
49807: PPUSH
49808: LD_VAR 0 1
49812: PPUSH
49813: CALL_OW 255
49817: PPUSH
49818: CALL_OW 321
49822: PUSH
49823: LD_INT 2
49825: EQUAL
49826: IFFALSE 49838
// eff := 70 else
49828: LD_ADDR_VAR 0 4
49832: PUSH
49833: LD_INT 70
49835: ST_TO_ADDR
49836: GO 49846
// eff := 30 ;
49838: LD_ADDR_VAR 0 4
49842: PUSH
49843: LD_INT 30
49845: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
49846: LD_VAR 0 1
49850: PPUSH
49851: CALL_OW 250
49855: PPUSH
49856: LD_VAR 0 1
49860: PPUSH
49861: CALL_OW 251
49865: PPUSH
49866: LD_VAR 0 4
49870: PPUSH
49871: CALL_OW 495
// end ; end ;
49875: LD_VAR 0 2
49879: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49880: LD_INT 0
49882: PPUSH
// end ;
49883: LD_VAR 0 4
49887: RET
// export function SOS_Command ( cmd ) ; begin
49888: LD_INT 0
49890: PPUSH
// end ;
49891: LD_VAR 0 2
49895: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49896: LD_INT 0
49898: PPUSH
// end ;
49899: LD_VAR 0 6
49903: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
49904: LD_INT 0
49906: PPUSH
49907: PPUSH
// if not vehicle or not factory then
49908: LD_VAR 0 1
49912: NOT
49913: PUSH
49914: LD_VAR 0 2
49918: NOT
49919: OR
49920: IFFALSE 49924
// exit ;
49922: GO 50155
// if factoryWaypoints >= factory then
49924: LD_EXP 145
49928: PUSH
49929: LD_VAR 0 2
49933: GREATEREQUAL
49934: IFFALSE 50155
// if factoryWaypoints [ factory ] then
49936: LD_EXP 145
49940: PUSH
49941: LD_VAR 0 2
49945: ARRAY
49946: IFFALSE 50155
// begin if GetControl ( vehicle ) = control_manual then
49948: LD_VAR 0 1
49952: PPUSH
49953: CALL_OW 263
49957: PUSH
49958: LD_INT 1
49960: EQUAL
49961: IFFALSE 50042
// begin driver := IsDrivenBy ( vehicle ) ;
49963: LD_ADDR_VAR 0 4
49967: PUSH
49968: LD_VAR 0 1
49972: PPUSH
49973: CALL_OW 311
49977: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49978: LD_VAR 0 4
49982: PPUSH
49983: LD_EXP 145
49987: PUSH
49988: LD_VAR 0 2
49992: ARRAY
49993: PUSH
49994: LD_INT 3
49996: ARRAY
49997: PPUSH
49998: LD_EXP 145
50002: PUSH
50003: LD_VAR 0 2
50007: ARRAY
50008: PUSH
50009: LD_INT 4
50011: ARRAY
50012: PPUSH
50013: CALL_OW 171
// AddComExitVehicle ( driver ) ;
50017: LD_VAR 0 4
50021: PPUSH
50022: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
50026: LD_VAR 0 4
50030: PPUSH
50031: LD_VAR 0 2
50035: PPUSH
50036: CALL_OW 180
// end else
50040: GO 50155
// if GetControl ( vehicle ) = control_remote then
50042: LD_VAR 0 1
50046: PPUSH
50047: CALL_OW 263
50051: PUSH
50052: LD_INT 2
50054: EQUAL
50055: IFFALSE 50116
// begin wait ( 0 0$2 ) ;
50057: LD_INT 70
50059: PPUSH
50060: CALL_OW 67
// if Connect ( vehicle ) then
50064: LD_VAR 0 1
50068: PPUSH
50069: CALL 62986 0 1
50073: IFFALSE 50114
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50075: LD_VAR 0 1
50079: PPUSH
50080: LD_EXP 145
50084: PUSH
50085: LD_VAR 0 2
50089: ARRAY
50090: PUSH
50091: LD_INT 3
50093: ARRAY
50094: PPUSH
50095: LD_EXP 145
50099: PUSH
50100: LD_VAR 0 2
50104: ARRAY
50105: PUSH
50106: LD_INT 4
50108: ARRAY
50109: PPUSH
50110: CALL_OW 171
// end else
50114: GO 50155
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50116: LD_VAR 0 1
50120: PPUSH
50121: LD_EXP 145
50125: PUSH
50126: LD_VAR 0 2
50130: ARRAY
50131: PUSH
50132: LD_INT 3
50134: ARRAY
50135: PPUSH
50136: LD_EXP 145
50140: PUSH
50141: LD_VAR 0 2
50145: ARRAY
50146: PUSH
50147: LD_INT 4
50149: ARRAY
50150: PPUSH
50151: CALL_OW 171
// end ; end ;
50155: LD_VAR 0 3
50159: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50160: LD_INT 0
50162: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50163: LD_VAR 0 1
50167: PUSH
50168: LD_INT 250
50170: EQUAL
50171: PUSH
50172: LD_VAR 0 2
50176: PPUSH
50177: CALL_OW 264
50181: PUSH
50182: LD_INT 81
50184: EQUAL
50185: AND
50186: IFFALSE 50207
// MinerPlaceMine ( unit , x , y ) ;
50188: LD_VAR 0 2
50192: PPUSH
50193: LD_VAR 0 4
50197: PPUSH
50198: LD_VAR 0 5
50202: PPUSH
50203: CALL 53197 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50207: LD_VAR 0 1
50211: PUSH
50212: LD_INT 251
50214: EQUAL
50215: PUSH
50216: LD_VAR 0 2
50220: PPUSH
50221: CALL_OW 264
50225: PUSH
50226: LD_INT 81
50228: EQUAL
50229: AND
50230: IFFALSE 50251
// MinerDetonateMine ( unit , x , y ) ;
50232: LD_VAR 0 2
50236: PPUSH
50237: LD_VAR 0 4
50241: PPUSH
50242: LD_VAR 0 5
50246: PPUSH
50247: CALL 53472 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50251: LD_VAR 0 1
50255: PUSH
50256: LD_INT 252
50258: EQUAL
50259: PUSH
50260: LD_VAR 0 2
50264: PPUSH
50265: CALL_OW 264
50269: PUSH
50270: LD_INT 81
50272: EQUAL
50273: AND
50274: IFFALSE 50295
// MinerCreateMinefield ( unit , x , y ) ;
50276: LD_VAR 0 2
50280: PPUSH
50281: LD_VAR 0 4
50285: PPUSH
50286: LD_VAR 0 5
50290: PPUSH
50291: CALL 53889 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50295: LD_VAR 0 1
50299: PUSH
50300: LD_INT 253
50302: EQUAL
50303: PUSH
50304: LD_VAR 0 2
50308: PPUSH
50309: CALL_OW 257
50313: PUSH
50314: LD_INT 5
50316: EQUAL
50317: AND
50318: IFFALSE 50339
// ComBinocular ( unit , x , y ) ;
50320: LD_VAR 0 2
50324: PPUSH
50325: LD_VAR 0 4
50329: PPUSH
50330: LD_VAR 0 5
50334: PPUSH
50335: CALL 54258 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50339: LD_VAR 0 1
50343: PUSH
50344: LD_INT 254
50346: EQUAL
50347: PUSH
50348: LD_VAR 0 2
50352: PPUSH
50353: CALL_OW 264
50357: PUSH
50358: LD_INT 99
50360: EQUAL
50361: AND
50362: PUSH
50363: LD_VAR 0 3
50367: PPUSH
50368: CALL_OW 263
50372: PUSH
50373: LD_INT 3
50375: EQUAL
50376: AND
50377: IFFALSE 50393
// HackDestroyVehicle ( unit , selectedUnit ) ;
50379: LD_VAR 0 2
50383: PPUSH
50384: LD_VAR 0 3
50388: PPUSH
50389: CALL 52561 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50393: LD_VAR 0 1
50397: PUSH
50398: LD_INT 255
50400: EQUAL
50401: PUSH
50402: LD_VAR 0 2
50406: PPUSH
50407: CALL_OW 264
50411: PUSH
50412: LD_INT 14
50414: PUSH
50415: LD_INT 53
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: IN
50422: AND
50423: PUSH
50424: LD_VAR 0 4
50428: PPUSH
50429: LD_VAR 0 5
50433: PPUSH
50434: CALL_OW 488
50438: AND
50439: IFFALSE 50463
// CutTreeXYR ( unit , x , y , 12 ) ;
50441: LD_VAR 0 2
50445: PPUSH
50446: LD_VAR 0 4
50450: PPUSH
50451: LD_VAR 0 5
50455: PPUSH
50456: LD_INT 12
50458: PPUSH
50459: CALL 50558 0 4
// if cmd = 256 then
50463: LD_VAR 0 1
50467: PUSH
50468: LD_INT 256
50470: EQUAL
50471: IFFALSE 50492
// SetFactoryWaypoint ( unit , x , y ) ;
50473: LD_VAR 0 2
50477: PPUSH
50478: LD_VAR 0 4
50482: PPUSH
50483: LD_VAR 0 5
50487: PPUSH
50488: CALL 48473 0 3
// if cmd = 257 then
50492: LD_VAR 0 1
50496: PUSH
50497: LD_INT 257
50499: EQUAL
50500: IFFALSE 50521
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50502: LD_VAR 0 2
50506: PPUSH
50507: LD_VAR 0 4
50511: PPUSH
50512: LD_VAR 0 5
50516: PPUSH
50517: CALL 48835 0 3
// if cmd = 258 then
50521: LD_VAR 0 1
50525: PUSH
50526: LD_INT 258
50528: EQUAL
50529: IFFALSE 50553
// BurnTreeXYR ( unit , x , y , 8 ) ;
50531: LD_VAR 0 2
50535: PPUSH
50536: LD_VAR 0 4
50540: PPUSH
50541: LD_VAR 0 5
50545: PPUSH
50546: LD_INT 8
50548: PPUSH
50549: CALL 50952 0 4
// end ;
50553: LD_VAR 0 6
50557: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50558: LD_INT 0
50560: PPUSH
50561: PPUSH
50562: PPUSH
50563: PPUSH
50564: PPUSH
50565: PPUSH
50566: PPUSH
50567: PPUSH
50568: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50569: LD_VAR 0 1
50573: PPUSH
50574: CALL_OW 302
50578: NOT
50579: PUSH
50580: LD_VAR 0 2
50584: PPUSH
50585: LD_VAR 0 3
50589: PPUSH
50590: CALL_OW 488
50594: NOT
50595: OR
50596: PUSH
50597: LD_VAR 0 4
50601: NOT
50602: OR
50603: IFFALSE 50607
// exit ;
50605: GO 50947
// list := [ ] ;
50607: LD_ADDR_VAR 0 13
50611: PUSH
50612: EMPTY
50613: ST_TO_ADDR
// if x - r < 0 then
50614: LD_VAR 0 2
50618: PUSH
50619: LD_VAR 0 4
50623: MINUS
50624: PUSH
50625: LD_INT 0
50627: LESS
50628: IFFALSE 50640
// min_x := 0 else
50630: LD_ADDR_VAR 0 7
50634: PUSH
50635: LD_INT 0
50637: ST_TO_ADDR
50638: GO 50656
// min_x := x - r ;
50640: LD_ADDR_VAR 0 7
50644: PUSH
50645: LD_VAR 0 2
50649: PUSH
50650: LD_VAR 0 4
50654: MINUS
50655: ST_TO_ADDR
// if y - r < 0 then
50656: LD_VAR 0 3
50660: PUSH
50661: LD_VAR 0 4
50665: MINUS
50666: PUSH
50667: LD_INT 0
50669: LESS
50670: IFFALSE 50682
// min_y := 0 else
50672: LD_ADDR_VAR 0 8
50676: PUSH
50677: LD_INT 0
50679: ST_TO_ADDR
50680: GO 50698
// min_y := y - r ;
50682: LD_ADDR_VAR 0 8
50686: PUSH
50687: LD_VAR 0 3
50691: PUSH
50692: LD_VAR 0 4
50696: MINUS
50697: ST_TO_ADDR
// max_x := x + r ;
50698: LD_ADDR_VAR 0 9
50702: PUSH
50703: LD_VAR 0 2
50707: PUSH
50708: LD_VAR 0 4
50712: PLUS
50713: ST_TO_ADDR
// max_y := y + r ;
50714: LD_ADDR_VAR 0 10
50718: PUSH
50719: LD_VAR 0 3
50723: PUSH
50724: LD_VAR 0 4
50728: PLUS
50729: ST_TO_ADDR
// for _x = min_x to max_x do
50730: LD_ADDR_VAR 0 11
50734: PUSH
50735: DOUBLE
50736: LD_VAR 0 7
50740: DEC
50741: ST_TO_ADDR
50742: LD_VAR 0 9
50746: PUSH
50747: FOR_TO
50748: IFFALSE 50865
// for _y = min_y to max_y do
50750: LD_ADDR_VAR 0 12
50754: PUSH
50755: DOUBLE
50756: LD_VAR 0 8
50760: DEC
50761: ST_TO_ADDR
50762: LD_VAR 0 10
50766: PUSH
50767: FOR_TO
50768: IFFALSE 50861
// begin if not ValidHex ( _x , _y ) then
50770: LD_VAR 0 11
50774: PPUSH
50775: LD_VAR 0 12
50779: PPUSH
50780: CALL_OW 488
50784: NOT
50785: IFFALSE 50789
// continue ;
50787: GO 50767
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
50789: LD_VAR 0 11
50793: PPUSH
50794: LD_VAR 0 12
50798: PPUSH
50799: CALL_OW 351
50803: PUSH
50804: LD_VAR 0 11
50808: PPUSH
50809: LD_VAR 0 12
50813: PPUSH
50814: CALL_OW 554
50818: AND
50819: IFFALSE 50859
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
50821: LD_ADDR_VAR 0 13
50825: PUSH
50826: LD_VAR 0 13
50830: PPUSH
50831: LD_VAR 0 13
50835: PUSH
50836: LD_INT 1
50838: PLUS
50839: PPUSH
50840: LD_VAR 0 11
50844: PUSH
50845: LD_VAR 0 12
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PPUSH
50854: CALL_OW 2
50858: ST_TO_ADDR
// end ;
50859: GO 50767
50861: POP
50862: POP
50863: GO 50747
50865: POP
50866: POP
// if not list then
50867: LD_VAR 0 13
50871: NOT
50872: IFFALSE 50876
// exit ;
50874: GO 50947
// for i in list do
50876: LD_ADDR_VAR 0 6
50880: PUSH
50881: LD_VAR 0 13
50885: PUSH
50886: FOR_IN
50887: IFFALSE 50945
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
50889: LD_VAR 0 1
50893: PPUSH
50894: LD_STRING M
50896: PUSH
50897: LD_VAR 0 6
50901: PUSH
50902: LD_INT 1
50904: ARRAY
50905: PUSH
50906: LD_VAR 0 6
50910: PUSH
50911: LD_INT 2
50913: ARRAY
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: PPUSH
50939: CALL_OW 447
50943: GO 50886
50945: POP
50946: POP
// end ;
50947: LD_VAR 0 5
50951: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
50952: LD_INT 0
50954: PPUSH
50955: PPUSH
50956: PPUSH
50957: PPUSH
50958: PPUSH
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
50964: LD_VAR 0 1
50968: PPUSH
50969: CALL_OW 302
50973: NOT
50974: PUSH
50975: LD_VAR 0 2
50979: PPUSH
50980: LD_VAR 0 3
50984: PPUSH
50985: CALL_OW 488
50989: NOT
50990: OR
50991: PUSH
50992: LD_VAR 0 4
50996: NOT
50997: OR
50998: IFFALSE 51002
// exit ;
51000: GO 51515
// list := [ ] ;
51002: LD_ADDR_VAR 0 13
51006: PUSH
51007: EMPTY
51008: ST_TO_ADDR
// if x - r < 0 then
51009: LD_VAR 0 2
51013: PUSH
51014: LD_VAR 0 4
51018: MINUS
51019: PUSH
51020: LD_INT 0
51022: LESS
51023: IFFALSE 51035
// min_x := 0 else
51025: LD_ADDR_VAR 0 7
51029: PUSH
51030: LD_INT 0
51032: ST_TO_ADDR
51033: GO 51051
// min_x := x - r ;
51035: LD_ADDR_VAR 0 7
51039: PUSH
51040: LD_VAR 0 2
51044: PUSH
51045: LD_VAR 0 4
51049: MINUS
51050: ST_TO_ADDR
// if y - r < 0 then
51051: LD_VAR 0 3
51055: PUSH
51056: LD_VAR 0 4
51060: MINUS
51061: PUSH
51062: LD_INT 0
51064: LESS
51065: IFFALSE 51077
// min_y := 0 else
51067: LD_ADDR_VAR 0 8
51071: PUSH
51072: LD_INT 0
51074: ST_TO_ADDR
51075: GO 51093
// min_y := y - r ;
51077: LD_ADDR_VAR 0 8
51081: PUSH
51082: LD_VAR 0 3
51086: PUSH
51087: LD_VAR 0 4
51091: MINUS
51092: ST_TO_ADDR
// max_x := x + r ;
51093: LD_ADDR_VAR 0 9
51097: PUSH
51098: LD_VAR 0 2
51102: PUSH
51103: LD_VAR 0 4
51107: PLUS
51108: ST_TO_ADDR
// max_y := y + r ;
51109: LD_ADDR_VAR 0 10
51113: PUSH
51114: LD_VAR 0 3
51118: PUSH
51119: LD_VAR 0 4
51123: PLUS
51124: ST_TO_ADDR
// for _x = min_x to max_x do
51125: LD_ADDR_VAR 0 11
51129: PUSH
51130: DOUBLE
51131: LD_VAR 0 7
51135: DEC
51136: ST_TO_ADDR
51137: LD_VAR 0 9
51141: PUSH
51142: FOR_TO
51143: IFFALSE 51260
// for _y = min_y to max_y do
51145: LD_ADDR_VAR 0 12
51149: PUSH
51150: DOUBLE
51151: LD_VAR 0 8
51155: DEC
51156: ST_TO_ADDR
51157: LD_VAR 0 10
51161: PUSH
51162: FOR_TO
51163: IFFALSE 51256
// begin if not ValidHex ( _x , _y ) then
51165: LD_VAR 0 11
51169: PPUSH
51170: LD_VAR 0 12
51174: PPUSH
51175: CALL_OW 488
51179: NOT
51180: IFFALSE 51184
// continue ;
51182: GO 51162
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51184: LD_VAR 0 11
51188: PPUSH
51189: LD_VAR 0 12
51193: PPUSH
51194: CALL_OW 351
51198: PUSH
51199: LD_VAR 0 11
51203: PPUSH
51204: LD_VAR 0 12
51208: PPUSH
51209: CALL_OW 554
51213: AND
51214: IFFALSE 51254
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51216: LD_ADDR_VAR 0 13
51220: PUSH
51221: LD_VAR 0 13
51225: PPUSH
51226: LD_VAR 0 13
51230: PUSH
51231: LD_INT 1
51233: PLUS
51234: PPUSH
51235: LD_VAR 0 11
51239: PUSH
51240: LD_VAR 0 12
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PPUSH
51249: CALL_OW 2
51253: ST_TO_ADDR
// end ;
51254: GO 51162
51256: POP
51257: POP
51258: GO 51142
51260: POP
51261: POP
// if not list then
51262: LD_VAR 0 13
51266: NOT
51267: IFFALSE 51271
// exit ;
51269: GO 51515
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51271: LD_ADDR_VAR 0 13
51275: PUSH
51276: LD_VAR 0 1
51280: PPUSH
51281: LD_VAR 0 13
51285: PPUSH
51286: LD_INT 1
51288: PPUSH
51289: LD_INT 1
51291: PPUSH
51292: CALL 60128 0 4
51296: ST_TO_ADDR
// ComStop ( flame ) ;
51297: LD_VAR 0 1
51301: PPUSH
51302: CALL_OW 141
// for i in list do
51306: LD_ADDR_VAR 0 6
51310: PUSH
51311: LD_VAR 0 13
51315: PUSH
51316: FOR_IN
51317: IFFALSE 51348
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51319: LD_VAR 0 1
51323: PPUSH
51324: LD_VAR 0 6
51328: PUSH
51329: LD_INT 1
51331: ARRAY
51332: PPUSH
51333: LD_VAR 0 6
51337: PUSH
51338: LD_INT 2
51340: ARRAY
51341: PPUSH
51342: CALL_OW 176
51346: GO 51316
51348: POP
51349: POP
// repeat wait ( 0 0$1 ) ;
51350: LD_INT 35
51352: PPUSH
51353: CALL_OW 67
// task := GetTaskList ( flame ) ;
51357: LD_ADDR_VAR 0 14
51361: PUSH
51362: LD_VAR 0 1
51366: PPUSH
51367: CALL_OW 437
51371: ST_TO_ADDR
// if not task then
51372: LD_VAR 0 14
51376: NOT
51377: IFFALSE 51381
// exit ;
51379: GO 51515
// if task [ 1 ] [ 1 ] <> | then
51381: LD_VAR 0 14
51385: PUSH
51386: LD_INT 1
51388: ARRAY
51389: PUSH
51390: LD_INT 1
51392: ARRAY
51393: PUSH
51394: LD_STRING |
51396: NONEQUAL
51397: IFFALSE 51401
// exit ;
51399: GO 51515
// _x := task [ 1 ] [ 2 ] ;
51401: LD_ADDR_VAR 0 11
51405: PUSH
51406: LD_VAR 0 14
51410: PUSH
51411: LD_INT 1
51413: ARRAY
51414: PUSH
51415: LD_INT 2
51417: ARRAY
51418: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
51419: LD_ADDR_VAR 0 12
51423: PUSH
51424: LD_VAR 0 14
51428: PUSH
51429: LD_INT 1
51431: ARRAY
51432: PUSH
51433: LD_INT 3
51435: ARRAY
51436: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
51437: LD_VAR 0 11
51441: PPUSH
51442: LD_VAR 0 12
51446: PPUSH
51447: CALL_OW 351
51451: NOT
51452: PUSH
51453: LD_VAR 0 11
51457: PPUSH
51458: LD_VAR 0 12
51462: PPUSH
51463: CALL_OW 554
51467: NOT
51468: OR
51469: IFFALSE 51503
// begin task := Delete ( task , 1 ) ;
51471: LD_ADDR_VAR 0 14
51475: PUSH
51476: LD_VAR 0 14
51480: PPUSH
51481: LD_INT 1
51483: PPUSH
51484: CALL_OW 3
51488: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
51489: LD_VAR 0 1
51493: PPUSH
51494: LD_VAR 0 14
51498: PPUSH
51499: CALL_OW 446
// end ; until not HasTask ( flame ) ;
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 314
51512: NOT
51513: IFFALSE 51350
// end ;
51515: LD_VAR 0 5
51519: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51520: LD_EXP 148
51524: NOT
51525: IFFALSE 51575
51527: GO 51529
51529: DISABLE
// begin initHack := true ;
51530: LD_ADDR_EXP 148
51534: PUSH
51535: LD_INT 1
51537: ST_TO_ADDR
// hackTanks := [ ] ;
51538: LD_ADDR_EXP 149
51542: PUSH
51543: EMPTY
51544: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51545: LD_ADDR_EXP 150
51549: PUSH
51550: EMPTY
51551: ST_TO_ADDR
// hackLimit := 3 ;
51552: LD_ADDR_EXP 151
51556: PUSH
51557: LD_INT 3
51559: ST_TO_ADDR
// hackDist := 12 ;
51560: LD_ADDR_EXP 152
51564: PUSH
51565: LD_INT 12
51567: ST_TO_ADDR
// hackCounter := [ ] ;
51568: LD_ADDR_EXP 153
51572: PUSH
51573: EMPTY
51574: ST_TO_ADDR
// end ;
51575: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51576: LD_EXP 148
51580: PUSH
51581: LD_INT 34
51583: PUSH
51584: LD_INT 99
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PPUSH
51591: CALL_OW 69
51595: AND
51596: IFFALSE 51849
51598: GO 51600
51600: DISABLE
51601: LD_INT 0
51603: PPUSH
51604: PPUSH
// begin enable ;
51605: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51606: LD_ADDR_VAR 0 1
51610: PUSH
51611: LD_INT 34
51613: PUSH
51614: LD_INT 99
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PPUSH
51621: CALL_OW 69
51625: PUSH
51626: FOR_IN
51627: IFFALSE 51847
// begin if not i in hackTanks then
51629: LD_VAR 0 1
51633: PUSH
51634: LD_EXP 149
51638: IN
51639: NOT
51640: IFFALSE 51723
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
51642: LD_ADDR_EXP 149
51646: PUSH
51647: LD_EXP 149
51651: PPUSH
51652: LD_EXP 149
51656: PUSH
51657: LD_INT 1
51659: PLUS
51660: PPUSH
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL_OW 1
51670: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
51671: LD_ADDR_EXP 150
51675: PUSH
51676: LD_EXP 150
51680: PPUSH
51681: LD_EXP 150
51685: PUSH
51686: LD_INT 1
51688: PLUS
51689: PPUSH
51690: EMPTY
51691: PPUSH
51692: CALL_OW 1
51696: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
51697: LD_ADDR_EXP 153
51701: PUSH
51702: LD_EXP 153
51706: PPUSH
51707: LD_EXP 153
51711: PUSH
51712: LD_INT 1
51714: PLUS
51715: PPUSH
51716: EMPTY
51717: PPUSH
51718: CALL_OW 1
51722: ST_TO_ADDR
// end ; if not IsOk ( i ) then
51723: LD_VAR 0 1
51727: PPUSH
51728: CALL_OW 302
51732: NOT
51733: IFFALSE 51746
// begin HackUnlinkAll ( i ) ;
51735: LD_VAR 0 1
51739: PPUSH
51740: CALL 51852 0 1
// continue ;
51744: GO 51626
// end ; HackCheckCapturedStatus ( i ) ;
51746: LD_VAR 0 1
51750: PPUSH
51751: CALL 52295 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
51755: LD_ADDR_VAR 0 2
51759: PUSH
51760: LD_INT 81
51762: PUSH
51763: LD_VAR 0 1
51767: PPUSH
51768: CALL_OW 255
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 33
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 91
51789: PUSH
51790: LD_VAR 0 1
51794: PUSH
51795: LD_EXP 152
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 50
51807: PUSH
51808: EMPTY
51809: LIST
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: PPUSH
51817: CALL_OW 69
51821: ST_TO_ADDR
// if not tmp then
51822: LD_VAR 0 2
51826: NOT
51827: IFFALSE 51831
// continue ;
51829: GO 51626
// HackLink ( i , tmp ) ;
51831: LD_VAR 0 1
51835: PPUSH
51836: LD_VAR 0 2
51840: PPUSH
51841: CALL 51988 0 2
// end ;
51845: GO 51626
51847: POP
51848: POP
// end ;
51849: PPOPN 2
51851: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
51852: LD_INT 0
51854: PPUSH
51855: PPUSH
51856: PPUSH
// if not hack in hackTanks then
51857: LD_VAR 0 1
51861: PUSH
51862: LD_EXP 149
51866: IN
51867: NOT
51868: IFFALSE 51872
// exit ;
51870: GO 51983
// index := GetElementIndex ( hackTanks , hack ) ;
51872: LD_ADDR_VAR 0 4
51876: PUSH
51877: LD_EXP 149
51881: PPUSH
51882: LD_VAR 0 1
51886: PPUSH
51887: CALL 59425 0 2
51891: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
51892: LD_EXP 150
51896: PUSH
51897: LD_VAR 0 4
51901: ARRAY
51902: IFFALSE 51983
// begin for i in hackTanksCaptured [ index ] do
51904: LD_ADDR_VAR 0 3
51908: PUSH
51909: LD_EXP 150
51913: PUSH
51914: LD_VAR 0 4
51918: ARRAY
51919: PUSH
51920: FOR_IN
51921: IFFALSE 51947
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
51923: LD_VAR 0 3
51927: PUSH
51928: LD_INT 1
51930: ARRAY
51931: PPUSH
51932: LD_VAR 0 3
51936: PUSH
51937: LD_INT 2
51939: ARRAY
51940: PPUSH
51941: CALL_OW 235
51945: GO 51920
51947: POP
51948: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
51949: LD_ADDR_EXP 150
51953: PUSH
51954: LD_EXP 150
51958: PPUSH
51959: LD_VAR 0 4
51963: PPUSH
51964: EMPTY
51965: PPUSH
51966: CALL_OW 1
51970: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
51971: LD_VAR 0 1
51975: PPUSH
51976: LD_INT 0
51978: PPUSH
51979: CALL_OW 505
// end ; end ;
51983: LD_VAR 0 2
51987: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
51988: LD_INT 0
51990: PPUSH
51991: PPUSH
51992: PPUSH
// if not hack in hackTanks or not vehicles then
51993: LD_VAR 0 1
51997: PUSH
51998: LD_EXP 149
52002: IN
52003: NOT
52004: PUSH
52005: LD_VAR 0 2
52009: NOT
52010: OR
52011: IFFALSE 52015
// exit ;
52013: GO 52290
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
52015: LD_ADDR_VAR 0 2
52019: PUSH
52020: LD_VAR 0 1
52024: PPUSH
52025: LD_VAR 0 2
52029: PPUSH
52030: LD_INT 1
52032: PPUSH
52033: LD_INT 1
52035: PPUSH
52036: CALL 60075 0 4
52040: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
52041: LD_ADDR_VAR 0 5
52045: PUSH
52046: LD_EXP 149
52050: PPUSH
52051: LD_VAR 0 1
52055: PPUSH
52056: CALL 59425 0 2
52060: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
52061: LD_EXP 150
52065: PUSH
52066: LD_VAR 0 5
52070: ARRAY
52071: PUSH
52072: LD_EXP 151
52076: LESS
52077: IFFALSE 52266
// begin for i := 1 to vehicles do
52079: LD_ADDR_VAR 0 4
52083: PUSH
52084: DOUBLE
52085: LD_INT 1
52087: DEC
52088: ST_TO_ADDR
52089: LD_VAR 0 2
52093: PUSH
52094: FOR_TO
52095: IFFALSE 52264
// begin if hackTanksCaptured [ index ] = hackLimit then
52097: LD_EXP 150
52101: PUSH
52102: LD_VAR 0 5
52106: ARRAY
52107: PUSH
52108: LD_EXP 151
52112: EQUAL
52113: IFFALSE 52117
// break ;
52115: GO 52264
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
52117: LD_ADDR_EXP 153
52121: PUSH
52122: LD_EXP 153
52126: PPUSH
52127: LD_VAR 0 5
52131: PPUSH
52132: LD_EXP 153
52136: PUSH
52137: LD_VAR 0 5
52141: ARRAY
52142: PUSH
52143: LD_INT 1
52145: PLUS
52146: PPUSH
52147: CALL_OW 1
52151: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
52152: LD_ADDR_EXP 150
52156: PUSH
52157: LD_EXP 150
52161: PPUSH
52162: LD_VAR 0 5
52166: PUSH
52167: LD_EXP 150
52171: PUSH
52172: LD_VAR 0 5
52176: ARRAY
52177: PUSH
52178: LD_INT 1
52180: PLUS
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PPUSH
52186: LD_VAR 0 2
52190: PUSH
52191: LD_VAR 0 4
52195: ARRAY
52196: PUSH
52197: LD_VAR 0 2
52201: PUSH
52202: LD_VAR 0 4
52206: ARRAY
52207: PPUSH
52208: CALL_OW 255
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PPUSH
52217: CALL 59640 0 3
52221: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52222: LD_VAR 0 2
52226: PUSH
52227: LD_VAR 0 4
52231: ARRAY
52232: PPUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 255
52242: PPUSH
52243: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52247: LD_VAR 0 2
52251: PUSH
52252: LD_VAR 0 4
52256: ARRAY
52257: PPUSH
52258: CALL_OW 141
// end ;
52262: GO 52094
52264: POP
52265: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52266: LD_VAR 0 1
52270: PPUSH
52271: LD_EXP 150
52275: PUSH
52276: LD_VAR 0 5
52280: ARRAY
52281: PUSH
52282: LD_INT 0
52284: PLUS
52285: PPUSH
52286: CALL_OW 505
// end ;
52290: LD_VAR 0 3
52294: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52295: LD_INT 0
52297: PPUSH
52298: PPUSH
52299: PPUSH
52300: PPUSH
// if not hack in hackTanks then
52301: LD_VAR 0 1
52305: PUSH
52306: LD_EXP 149
52310: IN
52311: NOT
52312: IFFALSE 52316
// exit ;
52314: GO 52556
// index := GetElementIndex ( hackTanks , hack ) ;
52316: LD_ADDR_VAR 0 4
52320: PUSH
52321: LD_EXP 149
52325: PPUSH
52326: LD_VAR 0 1
52330: PPUSH
52331: CALL 59425 0 2
52335: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52336: LD_ADDR_VAR 0 3
52340: PUSH
52341: DOUBLE
52342: LD_EXP 150
52346: PUSH
52347: LD_VAR 0 4
52351: ARRAY
52352: INC
52353: ST_TO_ADDR
52354: LD_INT 1
52356: PUSH
52357: FOR_DOWNTO
52358: IFFALSE 52530
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52360: LD_ADDR_VAR 0 5
52364: PUSH
52365: LD_EXP 150
52369: PUSH
52370: LD_VAR 0 4
52374: ARRAY
52375: PUSH
52376: LD_VAR 0 3
52380: ARRAY
52381: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52382: LD_VAR 0 5
52386: PUSH
52387: LD_INT 1
52389: ARRAY
52390: PPUSH
52391: CALL_OW 302
52395: NOT
52396: PUSH
52397: LD_VAR 0 5
52401: PUSH
52402: LD_INT 1
52404: ARRAY
52405: PPUSH
52406: CALL_OW 255
52410: PUSH
52411: LD_VAR 0 1
52415: PPUSH
52416: CALL_OW 255
52420: NONEQUAL
52421: OR
52422: IFFALSE 52528
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52424: LD_VAR 0 5
52428: PUSH
52429: LD_INT 1
52431: ARRAY
52432: PPUSH
52433: CALL_OW 305
52437: PUSH
52438: LD_VAR 0 5
52442: PUSH
52443: LD_INT 1
52445: ARRAY
52446: PPUSH
52447: CALL_OW 255
52451: PUSH
52452: LD_VAR 0 1
52456: PPUSH
52457: CALL_OW 255
52461: EQUAL
52462: AND
52463: IFFALSE 52487
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52465: LD_VAR 0 5
52469: PUSH
52470: LD_INT 1
52472: ARRAY
52473: PPUSH
52474: LD_VAR 0 5
52478: PUSH
52479: LD_INT 2
52481: ARRAY
52482: PPUSH
52483: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52487: LD_ADDR_EXP 150
52491: PUSH
52492: LD_EXP 150
52496: PPUSH
52497: LD_VAR 0 4
52501: PPUSH
52502: LD_EXP 150
52506: PUSH
52507: LD_VAR 0 4
52511: ARRAY
52512: PPUSH
52513: LD_VAR 0 3
52517: PPUSH
52518: CALL_OW 3
52522: PPUSH
52523: CALL_OW 1
52527: ST_TO_ADDR
// end ; end ;
52528: GO 52357
52530: POP
52531: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52532: LD_VAR 0 1
52536: PPUSH
52537: LD_EXP 150
52541: PUSH
52542: LD_VAR 0 4
52546: ARRAY
52547: PUSH
52548: LD_INT 0
52550: PLUS
52551: PPUSH
52552: CALL_OW 505
// end ;
52556: LD_VAR 0 2
52560: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52561: LD_INT 0
52563: PPUSH
52564: PPUSH
52565: PPUSH
52566: PPUSH
// if not hack in hackTanks then
52567: LD_VAR 0 1
52571: PUSH
52572: LD_EXP 149
52576: IN
52577: NOT
52578: IFFALSE 52582
// exit ;
52580: GO 52667
// index := GetElementIndex ( hackTanks , hack ) ;
52582: LD_ADDR_VAR 0 5
52586: PUSH
52587: LD_EXP 149
52591: PPUSH
52592: LD_VAR 0 1
52596: PPUSH
52597: CALL 59425 0 2
52601: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52602: LD_ADDR_VAR 0 4
52606: PUSH
52607: DOUBLE
52608: LD_INT 1
52610: DEC
52611: ST_TO_ADDR
52612: LD_EXP 150
52616: PUSH
52617: LD_VAR 0 5
52621: ARRAY
52622: PUSH
52623: FOR_TO
52624: IFFALSE 52665
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
52626: LD_EXP 150
52630: PUSH
52631: LD_VAR 0 5
52635: ARRAY
52636: PUSH
52637: LD_VAR 0 4
52641: ARRAY
52642: PUSH
52643: LD_INT 1
52645: ARRAY
52646: PUSH
52647: LD_VAR 0 2
52651: EQUAL
52652: IFFALSE 52663
// KillUnit ( vehicle ) ;
52654: LD_VAR 0 2
52658: PPUSH
52659: CALL_OW 66
52663: GO 52623
52665: POP
52666: POP
// end ;
52667: LD_VAR 0 3
52671: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
52672: LD_EXP 154
52676: NOT
52677: IFFALSE 52712
52679: GO 52681
52681: DISABLE
// begin initMiner := true ;
52682: LD_ADDR_EXP 154
52686: PUSH
52687: LD_INT 1
52689: ST_TO_ADDR
// minersList := [ ] ;
52690: LD_ADDR_EXP 155
52694: PUSH
52695: EMPTY
52696: ST_TO_ADDR
// minerMinesList := [ ] ;
52697: LD_ADDR_EXP 156
52701: PUSH
52702: EMPTY
52703: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
52704: LD_ADDR_EXP 157
52708: PUSH
52709: LD_INT 5
52711: ST_TO_ADDR
// end ;
52712: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
52713: LD_EXP 154
52717: PUSH
52718: LD_INT 34
52720: PUSH
52721: LD_INT 81
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PPUSH
52728: CALL_OW 69
52732: AND
52733: IFFALSE 53194
52735: GO 52737
52737: DISABLE
52738: LD_INT 0
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
// begin enable ;
52744: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
52745: LD_ADDR_VAR 0 1
52749: PUSH
52750: LD_INT 34
52752: PUSH
52753: LD_INT 81
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PPUSH
52760: CALL_OW 69
52764: PUSH
52765: FOR_IN
52766: IFFALSE 52838
// begin if not i in minersList then
52768: LD_VAR 0 1
52772: PUSH
52773: LD_EXP 155
52777: IN
52778: NOT
52779: IFFALSE 52836
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
52781: LD_ADDR_EXP 155
52785: PUSH
52786: LD_EXP 155
52790: PPUSH
52791: LD_EXP 155
52795: PUSH
52796: LD_INT 1
52798: PLUS
52799: PPUSH
52800: LD_VAR 0 1
52804: PPUSH
52805: CALL_OW 1
52809: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
52810: LD_ADDR_EXP 156
52814: PUSH
52815: LD_EXP 156
52819: PPUSH
52820: LD_EXP 156
52824: PUSH
52825: LD_INT 1
52827: PLUS
52828: PPUSH
52829: EMPTY
52830: PPUSH
52831: CALL_OW 1
52835: ST_TO_ADDR
// end end ;
52836: GO 52765
52838: POP
52839: POP
// for i := minerMinesList downto 1 do
52840: LD_ADDR_VAR 0 1
52844: PUSH
52845: DOUBLE
52846: LD_EXP 156
52850: INC
52851: ST_TO_ADDR
52852: LD_INT 1
52854: PUSH
52855: FOR_DOWNTO
52856: IFFALSE 53192
// begin if IsLive ( minersList [ i ] ) then
52858: LD_EXP 155
52862: PUSH
52863: LD_VAR 0 1
52867: ARRAY
52868: PPUSH
52869: CALL_OW 300
52873: IFFALSE 52901
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
52875: LD_EXP 155
52879: PUSH
52880: LD_VAR 0 1
52884: ARRAY
52885: PPUSH
52886: LD_EXP 156
52890: PUSH
52891: LD_VAR 0 1
52895: ARRAY
52896: PPUSH
52897: CALL_OW 505
// if not minerMinesList [ i ] then
52901: LD_EXP 156
52905: PUSH
52906: LD_VAR 0 1
52910: ARRAY
52911: NOT
52912: IFFALSE 52916
// continue ;
52914: GO 52855
// for j := minerMinesList [ i ] downto 1 do
52916: LD_ADDR_VAR 0 2
52920: PUSH
52921: DOUBLE
52922: LD_EXP 156
52926: PUSH
52927: LD_VAR 0 1
52931: ARRAY
52932: INC
52933: ST_TO_ADDR
52934: LD_INT 1
52936: PUSH
52937: FOR_DOWNTO
52938: IFFALSE 53188
// begin side := GetSide ( minersList [ i ] ) ;
52940: LD_ADDR_VAR 0 3
52944: PUSH
52945: LD_EXP 155
52949: PUSH
52950: LD_VAR 0 1
52954: ARRAY
52955: PPUSH
52956: CALL_OW 255
52960: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
52961: LD_ADDR_VAR 0 4
52965: PUSH
52966: LD_EXP 156
52970: PUSH
52971: LD_VAR 0 1
52975: ARRAY
52976: PUSH
52977: LD_VAR 0 2
52981: ARRAY
52982: PUSH
52983: LD_INT 1
52985: ARRAY
52986: PPUSH
52987: LD_EXP 156
52991: PUSH
52992: LD_VAR 0 1
52996: ARRAY
52997: PUSH
52998: LD_VAR 0 2
53002: ARRAY
53003: PUSH
53004: LD_INT 2
53006: ARRAY
53007: PPUSH
53008: CALL_OW 428
53012: ST_TO_ADDR
// if not tmp then
53013: LD_VAR 0 4
53017: NOT
53018: IFFALSE 53022
// continue ;
53020: GO 52937
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
53022: LD_VAR 0 4
53026: PUSH
53027: LD_INT 81
53029: PUSH
53030: LD_VAR 0 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PPUSH
53039: CALL_OW 69
53043: IN
53044: PUSH
53045: LD_EXP 156
53049: PUSH
53050: LD_VAR 0 1
53054: ARRAY
53055: PUSH
53056: LD_VAR 0 2
53060: ARRAY
53061: PUSH
53062: LD_INT 1
53064: ARRAY
53065: PPUSH
53066: LD_EXP 156
53070: PUSH
53071: LD_VAR 0 1
53075: ARRAY
53076: PUSH
53077: LD_VAR 0 2
53081: ARRAY
53082: PUSH
53083: LD_INT 2
53085: ARRAY
53086: PPUSH
53087: CALL_OW 458
53091: AND
53092: IFFALSE 53186
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
53094: LD_EXP 156
53098: PUSH
53099: LD_VAR 0 1
53103: ARRAY
53104: PUSH
53105: LD_VAR 0 2
53109: ARRAY
53110: PUSH
53111: LD_INT 1
53113: ARRAY
53114: PPUSH
53115: LD_EXP 156
53119: PUSH
53120: LD_VAR 0 1
53124: ARRAY
53125: PUSH
53126: LD_VAR 0 2
53130: ARRAY
53131: PUSH
53132: LD_INT 2
53134: ARRAY
53135: PPUSH
53136: LD_VAR 0 3
53140: PPUSH
53141: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
53145: LD_ADDR_EXP 156
53149: PUSH
53150: LD_EXP 156
53154: PPUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: LD_EXP 156
53164: PUSH
53165: LD_VAR 0 1
53169: ARRAY
53170: PPUSH
53171: LD_VAR 0 2
53175: PPUSH
53176: CALL_OW 3
53180: PPUSH
53181: CALL_OW 1
53185: ST_TO_ADDR
// end ; end ;
53186: GO 52937
53188: POP
53189: POP
// end ;
53190: GO 52855
53192: POP
53193: POP
// end ;
53194: PPOPN 4
53196: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53197: LD_INT 0
53199: PPUSH
53200: PPUSH
// result := false ;
53201: LD_ADDR_VAR 0 4
53205: PUSH
53206: LD_INT 0
53208: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53209: LD_VAR 0 1
53213: PPUSH
53214: CALL_OW 264
53218: PUSH
53219: LD_INT 81
53221: EQUAL
53222: NOT
53223: IFFALSE 53227
// exit ;
53225: GO 53467
// index := GetElementIndex ( minersList , unit ) ;
53227: LD_ADDR_VAR 0 5
53231: PUSH
53232: LD_EXP 155
53236: PPUSH
53237: LD_VAR 0 1
53241: PPUSH
53242: CALL 59425 0 2
53246: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53247: LD_EXP 156
53251: PUSH
53252: LD_VAR 0 5
53256: ARRAY
53257: PUSH
53258: LD_EXP 157
53262: GREATEREQUAL
53263: IFFALSE 53267
// exit ;
53265: GO 53467
// ComMoveXY ( unit , x , y ) ;
53267: LD_VAR 0 1
53271: PPUSH
53272: LD_VAR 0 2
53276: PPUSH
53277: LD_VAR 0 3
53281: PPUSH
53282: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53286: LD_INT 35
53288: PPUSH
53289: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53293: LD_VAR 0 1
53297: PPUSH
53298: LD_VAR 0 2
53302: PPUSH
53303: LD_VAR 0 3
53307: PPUSH
53308: CALL 91177 0 3
53312: NOT
53313: PUSH
53314: LD_VAR 0 1
53318: PPUSH
53319: CALL_OW 314
53323: AND
53324: IFFALSE 53328
// exit ;
53326: GO 53467
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53328: LD_VAR 0 2
53332: PPUSH
53333: LD_VAR 0 3
53337: PPUSH
53338: CALL_OW 428
53342: PUSH
53343: LD_VAR 0 1
53347: EQUAL
53348: PUSH
53349: LD_VAR 0 1
53353: PPUSH
53354: CALL_OW 314
53358: NOT
53359: AND
53360: IFFALSE 53286
// PlaySoundXY ( x , y , PlantMine ) ;
53362: LD_VAR 0 2
53366: PPUSH
53367: LD_VAR 0 3
53371: PPUSH
53372: LD_STRING PlantMine
53374: PPUSH
53375: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53379: LD_VAR 0 2
53383: PPUSH
53384: LD_VAR 0 3
53388: PPUSH
53389: LD_VAR 0 1
53393: PPUSH
53394: CALL_OW 255
53398: PPUSH
53399: LD_INT 0
53401: PPUSH
53402: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53406: LD_ADDR_EXP 156
53410: PUSH
53411: LD_EXP 156
53415: PPUSH
53416: LD_VAR 0 5
53420: PUSH
53421: LD_EXP 156
53425: PUSH
53426: LD_VAR 0 5
53430: ARRAY
53431: PUSH
53432: LD_INT 1
53434: PLUS
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PPUSH
53440: LD_VAR 0 2
53444: PUSH
53445: LD_VAR 0 3
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PPUSH
53454: CALL 59640 0 3
53458: ST_TO_ADDR
// result := true ;
53459: LD_ADDR_VAR 0 4
53463: PUSH
53464: LD_INT 1
53466: ST_TO_ADDR
// end ;
53467: LD_VAR 0 4
53471: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53472: LD_INT 0
53474: PPUSH
53475: PPUSH
53476: PPUSH
// if not unit in minersList then
53477: LD_VAR 0 1
53481: PUSH
53482: LD_EXP 155
53486: IN
53487: NOT
53488: IFFALSE 53492
// exit ;
53490: GO 53884
// index := GetElementIndex ( minersList , unit ) ;
53492: LD_ADDR_VAR 0 6
53496: PUSH
53497: LD_EXP 155
53501: PPUSH
53502: LD_VAR 0 1
53506: PPUSH
53507: CALL 59425 0 2
53511: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53512: LD_ADDR_VAR 0 5
53516: PUSH
53517: DOUBLE
53518: LD_EXP 156
53522: PUSH
53523: LD_VAR 0 6
53527: ARRAY
53528: INC
53529: ST_TO_ADDR
53530: LD_INT 1
53532: PUSH
53533: FOR_DOWNTO
53534: IFFALSE 53695
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53536: LD_EXP 156
53540: PUSH
53541: LD_VAR 0 6
53545: ARRAY
53546: PUSH
53547: LD_VAR 0 5
53551: ARRAY
53552: PUSH
53553: LD_INT 1
53555: ARRAY
53556: PUSH
53557: LD_VAR 0 2
53561: EQUAL
53562: PUSH
53563: LD_EXP 156
53567: PUSH
53568: LD_VAR 0 6
53572: ARRAY
53573: PUSH
53574: LD_VAR 0 5
53578: ARRAY
53579: PUSH
53580: LD_INT 2
53582: ARRAY
53583: PUSH
53584: LD_VAR 0 3
53588: EQUAL
53589: AND
53590: IFFALSE 53693
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53592: LD_EXP 156
53596: PUSH
53597: LD_VAR 0 6
53601: ARRAY
53602: PUSH
53603: LD_VAR 0 5
53607: ARRAY
53608: PUSH
53609: LD_INT 1
53611: ARRAY
53612: PPUSH
53613: LD_EXP 156
53617: PUSH
53618: LD_VAR 0 6
53622: ARRAY
53623: PUSH
53624: LD_VAR 0 5
53628: ARRAY
53629: PUSH
53630: LD_INT 2
53632: ARRAY
53633: PPUSH
53634: LD_VAR 0 1
53638: PPUSH
53639: CALL_OW 255
53643: PPUSH
53644: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53648: LD_ADDR_EXP 156
53652: PUSH
53653: LD_EXP 156
53657: PPUSH
53658: LD_VAR 0 6
53662: PPUSH
53663: LD_EXP 156
53667: PUSH
53668: LD_VAR 0 6
53672: ARRAY
53673: PPUSH
53674: LD_VAR 0 5
53678: PPUSH
53679: CALL_OW 3
53683: PPUSH
53684: CALL_OW 1
53688: ST_TO_ADDR
// exit ;
53689: POP
53690: POP
53691: GO 53884
// end ; end ;
53693: GO 53533
53695: POP
53696: POP
// for i := minerMinesList [ index ] downto 1 do
53697: LD_ADDR_VAR 0 5
53701: PUSH
53702: DOUBLE
53703: LD_EXP 156
53707: PUSH
53708: LD_VAR 0 6
53712: ARRAY
53713: INC
53714: ST_TO_ADDR
53715: LD_INT 1
53717: PUSH
53718: FOR_DOWNTO
53719: IFFALSE 53882
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
53721: LD_EXP 156
53725: PUSH
53726: LD_VAR 0 6
53730: ARRAY
53731: PUSH
53732: LD_VAR 0 5
53736: ARRAY
53737: PUSH
53738: LD_INT 1
53740: ARRAY
53741: PPUSH
53742: LD_EXP 156
53746: PUSH
53747: LD_VAR 0 6
53751: ARRAY
53752: PUSH
53753: LD_VAR 0 5
53757: ARRAY
53758: PUSH
53759: LD_INT 2
53761: ARRAY
53762: PPUSH
53763: LD_VAR 0 2
53767: PPUSH
53768: LD_VAR 0 3
53772: PPUSH
53773: CALL_OW 298
53777: PUSH
53778: LD_INT 6
53780: LESS
53781: IFFALSE 53880
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53783: LD_EXP 156
53787: PUSH
53788: LD_VAR 0 6
53792: ARRAY
53793: PUSH
53794: LD_VAR 0 5
53798: ARRAY
53799: PUSH
53800: LD_INT 1
53802: ARRAY
53803: PPUSH
53804: LD_EXP 156
53808: PUSH
53809: LD_VAR 0 6
53813: ARRAY
53814: PUSH
53815: LD_VAR 0 5
53819: ARRAY
53820: PUSH
53821: LD_INT 2
53823: ARRAY
53824: PPUSH
53825: LD_VAR 0 1
53829: PPUSH
53830: CALL_OW 255
53834: PPUSH
53835: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53839: LD_ADDR_EXP 156
53843: PUSH
53844: LD_EXP 156
53848: PPUSH
53849: LD_VAR 0 6
53853: PPUSH
53854: LD_EXP 156
53858: PUSH
53859: LD_VAR 0 6
53863: ARRAY
53864: PPUSH
53865: LD_VAR 0 5
53869: PPUSH
53870: CALL_OW 3
53874: PPUSH
53875: CALL_OW 1
53879: ST_TO_ADDR
// end ; end ;
53880: GO 53718
53882: POP
53883: POP
// end ;
53884: LD_VAR 0 4
53888: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
53889: LD_INT 0
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
53900: LD_VAR 0 1
53904: PPUSH
53905: CALL_OW 264
53909: PUSH
53910: LD_INT 81
53912: EQUAL
53913: NOT
53914: PUSH
53915: LD_VAR 0 1
53919: PUSH
53920: LD_EXP 155
53924: IN
53925: NOT
53926: OR
53927: IFFALSE 53931
// exit ;
53929: GO 54253
// index := GetElementIndex ( minersList , unit ) ;
53931: LD_ADDR_VAR 0 6
53935: PUSH
53936: LD_EXP 155
53940: PPUSH
53941: LD_VAR 0 1
53945: PPUSH
53946: CALL 59425 0 2
53950: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
53951: LD_ADDR_VAR 0 8
53955: PUSH
53956: LD_EXP 157
53960: PUSH
53961: LD_EXP 156
53965: PUSH
53966: LD_VAR 0 6
53970: ARRAY
53971: MINUS
53972: ST_TO_ADDR
// if not minesFreeAmount then
53973: LD_VAR 0 8
53977: NOT
53978: IFFALSE 53982
// exit ;
53980: GO 54253
// tmp := [ ] ;
53982: LD_ADDR_VAR 0 7
53986: PUSH
53987: EMPTY
53988: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
53989: LD_ADDR_VAR 0 5
53993: PUSH
53994: DOUBLE
53995: LD_INT 1
53997: DEC
53998: ST_TO_ADDR
53999: LD_VAR 0 8
54003: PUSH
54004: FOR_TO
54005: IFFALSE 54200
// begin _d := rand ( 0 , 5 ) ;
54007: LD_ADDR_VAR 0 11
54011: PUSH
54012: LD_INT 0
54014: PPUSH
54015: LD_INT 5
54017: PPUSH
54018: CALL_OW 12
54022: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
54023: LD_ADDR_VAR 0 12
54027: PUSH
54028: LD_INT 2
54030: PPUSH
54031: LD_INT 6
54033: PPUSH
54034: CALL_OW 12
54038: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
54039: LD_ADDR_VAR 0 9
54043: PUSH
54044: LD_VAR 0 2
54048: PPUSH
54049: LD_VAR 0 11
54053: PPUSH
54054: LD_VAR 0 12
54058: PPUSH
54059: CALL_OW 272
54063: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
54064: LD_ADDR_VAR 0 10
54068: PUSH
54069: LD_VAR 0 3
54073: PPUSH
54074: LD_VAR 0 11
54078: PPUSH
54079: LD_VAR 0 12
54083: PPUSH
54084: CALL_OW 273
54088: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
54089: LD_VAR 0 9
54093: PPUSH
54094: LD_VAR 0 10
54098: PPUSH
54099: CALL_OW 488
54103: PUSH
54104: LD_VAR 0 9
54108: PUSH
54109: LD_VAR 0 10
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_VAR 0 7
54122: IN
54123: NOT
54124: AND
54125: PUSH
54126: LD_VAR 0 9
54130: PPUSH
54131: LD_VAR 0 10
54135: PPUSH
54136: CALL_OW 458
54140: NOT
54141: AND
54142: IFFALSE 54184
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
54144: LD_ADDR_VAR 0 7
54148: PUSH
54149: LD_VAR 0 7
54153: PPUSH
54154: LD_VAR 0 7
54158: PUSH
54159: LD_INT 1
54161: PLUS
54162: PPUSH
54163: LD_VAR 0 9
54167: PUSH
54168: LD_VAR 0 10
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PPUSH
54177: CALL_OW 1
54181: ST_TO_ADDR
54182: GO 54198
// i := i - 1 ;
54184: LD_ADDR_VAR 0 5
54188: PUSH
54189: LD_VAR 0 5
54193: PUSH
54194: LD_INT 1
54196: MINUS
54197: ST_TO_ADDR
// end ;
54198: GO 54004
54200: POP
54201: POP
// for i in tmp do
54202: LD_ADDR_VAR 0 5
54206: PUSH
54207: LD_VAR 0 7
54211: PUSH
54212: FOR_IN
54213: IFFALSE 54251
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54215: LD_VAR 0 1
54219: PPUSH
54220: LD_VAR 0 5
54224: PUSH
54225: LD_INT 1
54227: ARRAY
54228: PPUSH
54229: LD_VAR 0 5
54233: PUSH
54234: LD_INT 2
54236: ARRAY
54237: PPUSH
54238: CALL 53197 0 3
54242: NOT
54243: IFFALSE 54249
// exit ;
54245: POP
54246: POP
54247: GO 54253
54249: GO 54212
54251: POP
54252: POP
// end ;
54253: LD_VAR 0 4
54257: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
54258: LD_INT 0
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
// if not GetClass ( unit ) = class_sniper then
54267: LD_VAR 0 1
54271: PPUSH
54272: CALL_OW 257
54276: PUSH
54277: LD_INT 5
54279: EQUAL
54280: NOT
54281: IFFALSE 54285
// exit ;
54283: GO 54673
// dist := 8 ;
54285: LD_ADDR_VAR 0 5
54289: PUSH
54290: LD_INT 8
54292: ST_TO_ADDR
// viewRange := 12 ;
54293: LD_ADDR_VAR 0 7
54297: PUSH
54298: LD_INT 12
54300: ST_TO_ADDR
// side := GetSide ( unit ) ;
54301: LD_ADDR_VAR 0 6
54305: PUSH
54306: LD_VAR 0 1
54310: PPUSH
54311: CALL_OW 255
54315: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54316: LD_INT 61
54318: PPUSH
54319: LD_VAR 0 6
54323: PPUSH
54324: CALL_OW 321
54328: PUSH
54329: LD_INT 2
54331: EQUAL
54332: IFFALSE 54342
// viewRange := 16 ;
54334: LD_ADDR_VAR 0 7
54338: PUSH
54339: LD_INT 16
54341: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54342: LD_VAR 0 1
54346: PPUSH
54347: LD_VAR 0 2
54351: PPUSH
54352: LD_VAR 0 3
54356: PPUSH
54357: CALL_OW 297
54361: PUSH
54362: LD_VAR 0 5
54366: GREATER
54367: IFFALSE 54446
// begin ComMoveXY ( unit , x , y ) ;
54369: LD_VAR 0 1
54373: PPUSH
54374: LD_VAR 0 2
54378: PPUSH
54379: LD_VAR 0 3
54383: PPUSH
54384: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54388: LD_INT 35
54390: PPUSH
54391: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54395: LD_VAR 0 1
54399: PPUSH
54400: LD_VAR 0 2
54404: PPUSH
54405: LD_VAR 0 3
54409: PPUSH
54410: CALL 91177 0 3
54414: NOT
54415: IFFALSE 54419
// exit ;
54417: GO 54673
// until GetDistUnitXY ( unit , x , y ) < dist ;
54419: LD_VAR 0 1
54423: PPUSH
54424: LD_VAR 0 2
54428: PPUSH
54429: LD_VAR 0 3
54433: PPUSH
54434: CALL_OW 297
54438: PUSH
54439: LD_VAR 0 5
54443: LESS
54444: IFFALSE 54388
// end ; ComTurnXY ( unit , x , y ) ;
54446: LD_VAR 0 1
54450: PPUSH
54451: LD_VAR 0 2
54455: PPUSH
54456: LD_VAR 0 3
54460: PPUSH
54461: CALL_OW 118
// wait ( 5 ) ;
54465: LD_INT 5
54467: PPUSH
54468: CALL_OW 67
// _d := GetDir ( unit ) ;
54472: LD_ADDR_VAR 0 10
54476: PUSH
54477: LD_VAR 0 1
54481: PPUSH
54482: CALL_OW 254
54486: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
54487: LD_ADDR_VAR 0 8
54491: PUSH
54492: LD_VAR 0 1
54496: PPUSH
54497: CALL_OW 250
54501: PPUSH
54502: LD_VAR 0 10
54506: PPUSH
54507: LD_VAR 0 5
54511: PPUSH
54512: CALL_OW 272
54516: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
54517: LD_ADDR_VAR 0 9
54521: PUSH
54522: LD_VAR 0 1
54526: PPUSH
54527: CALL_OW 251
54531: PPUSH
54532: LD_VAR 0 10
54536: PPUSH
54537: LD_VAR 0 5
54541: PPUSH
54542: CALL_OW 273
54546: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54547: LD_VAR 0 8
54551: PPUSH
54552: LD_VAR 0 9
54556: PPUSH
54557: CALL_OW 488
54561: NOT
54562: IFFALSE 54566
// exit ;
54564: GO 54673
// ComAnimCustom ( unit , 1 ) ;
54566: LD_VAR 0 1
54570: PPUSH
54571: LD_INT 1
54573: PPUSH
54574: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
54578: LD_VAR 0 8
54582: PPUSH
54583: LD_VAR 0 9
54587: PPUSH
54588: LD_VAR 0 6
54592: PPUSH
54593: LD_VAR 0 7
54597: PPUSH
54598: CALL_OW 330
// repeat wait ( 1 ) ;
54602: LD_INT 1
54604: PPUSH
54605: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
54609: LD_VAR 0 1
54613: PPUSH
54614: CALL_OW 316
54618: PUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: CALL_OW 314
54628: OR
54629: PUSH
54630: LD_VAR 0 1
54634: PPUSH
54635: CALL_OW 302
54639: NOT
54640: OR
54641: PUSH
54642: LD_VAR 0 1
54646: PPUSH
54647: CALL_OW 301
54651: OR
54652: IFFALSE 54602
// RemoveSeeing ( _x , _y , side ) ;
54654: LD_VAR 0 8
54658: PPUSH
54659: LD_VAR 0 9
54663: PPUSH
54664: LD_VAR 0 6
54668: PPUSH
54669: CALL_OW 331
// end ; end_of_file
54673: LD_VAR 0 4
54677: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
54678: LD_INT 0
54680: PPUSH
54681: PPUSH
// if exist_mode then
54682: LD_VAR 0 2
54686: IFFALSE 54711
// unit := CreateCharacter ( prefix & ident ) else
54688: LD_ADDR_VAR 0 5
54692: PUSH
54693: LD_VAR 0 3
54697: PUSH
54698: LD_VAR 0 1
54702: STR
54703: PPUSH
54704: CALL_OW 34
54708: ST_TO_ADDR
54709: GO 54726
// unit := NewCharacter ( ident ) ;
54711: LD_ADDR_VAR 0 5
54715: PUSH
54716: LD_VAR 0 1
54720: PPUSH
54721: CALL_OW 25
54725: ST_TO_ADDR
// result := unit ;
54726: LD_ADDR_VAR 0 4
54730: PUSH
54731: LD_VAR 0 5
54735: ST_TO_ADDR
// end ;
54736: LD_VAR 0 4
54740: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
54741: LD_INT 0
54743: PPUSH
54744: PPUSH
// if not side or not nation then
54745: LD_VAR 0 1
54749: NOT
54750: PUSH
54751: LD_VAR 0 2
54755: NOT
54756: OR
54757: IFFALSE 54761
// exit ;
54759: GO 55529
// case nation of nation_american :
54761: LD_VAR 0 2
54765: PUSH
54766: LD_INT 1
54768: DOUBLE
54769: EQUAL
54770: IFTRUE 54774
54772: GO 54988
54774: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
54775: LD_ADDR_VAR 0 4
54779: PUSH
54780: LD_INT 35
54782: PUSH
54783: LD_INT 45
54785: PUSH
54786: LD_INT 46
54788: PUSH
54789: LD_INT 47
54791: PUSH
54792: LD_INT 82
54794: PUSH
54795: LD_INT 83
54797: PUSH
54798: LD_INT 84
54800: PUSH
54801: LD_INT 85
54803: PUSH
54804: LD_INT 86
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 6
54815: PUSH
54816: LD_INT 15
54818: PUSH
54819: LD_INT 16
54821: PUSH
54822: LD_INT 7
54824: PUSH
54825: LD_INT 12
54827: PUSH
54828: LD_INT 13
54830: PUSH
54831: LD_INT 10
54833: PUSH
54834: LD_INT 14
54836: PUSH
54837: LD_INT 20
54839: PUSH
54840: LD_INT 21
54842: PUSH
54843: LD_INT 22
54845: PUSH
54846: LD_INT 25
54848: PUSH
54849: LD_INT 32
54851: PUSH
54852: LD_INT 27
54854: PUSH
54855: LD_INT 36
54857: PUSH
54858: LD_INT 69
54860: PUSH
54861: LD_INT 39
54863: PUSH
54864: LD_INT 34
54866: PUSH
54867: LD_INT 40
54869: PUSH
54870: LD_INT 48
54872: PUSH
54873: LD_INT 49
54875: PUSH
54876: LD_INT 50
54878: PUSH
54879: LD_INT 51
54881: PUSH
54882: LD_INT 52
54884: PUSH
54885: LD_INT 53
54887: PUSH
54888: LD_INT 54
54890: PUSH
54891: LD_INT 55
54893: PUSH
54894: LD_INT 56
54896: PUSH
54897: LD_INT 57
54899: PUSH
54900: LD_INT 58
54902: PUSH
54903: LD_INT 59
54905: PUSH
54906: LD_INT 60
54908: PUSH
54909: LD_INT 61
54911: PUSH
54912: LD_INT 62
54914: PUSH
54915: LD_INT 80
54917: PUSH
54918: LD_INT 82
54920: PUSH
54921: LD_INT 83
54923: PUSH
54924: LD_INT 84
54926: PUSH
54927: LD_INT 85
54929: PUSH
54930: LD_INT 86
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: ST_TO_ADDR
54986: GO 55453
54988: LD_INT 2
54990: DOUBLE
54991: EQUAL
54992: IFTRUE 54996
54994: GO 55222
54996: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
54997: LD_ADDR_VAR 0 4
55001: PUSH
55002: LD_INT 35
55004: PUSH
55005: LD_INT 45
55007: PUSH
55008: LD_INT 46
55010: PUSH
55011: LD_INT 47
55013: PUSH
55014: LD_INT 82
55016: PUSH
55017: LD_INT 83
55019: PUSH
55020: LD_INT 84
55022: PUSH
55023: LD_INT 85
55025: PUSH
55026: LD_INT 87
55028: PUSH
55029: LD_INT 70
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 11
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: LD_INT 4
55043: PUSH
55044: LD_INT 5
55046: PUSH
55047: LD_INT 6
55049: PUSH
55050: LD_INT 15
55052: PUSH
55053: LD_INT 18
55055: PUSH
55056: LD_INT 7
55058: PUSH
55059: LD_INT 17
55061: PUSH
55062: LD_INT 8
55064: PUSH
55065: LD_INT 20
55067: PUSH
55068: LD_INT 21
55070: PUSH
55071: LD_INT 22
55073: PUSH
55074: LD_INT 72
55076: PUSH
55077: LD_INT 26
55079: PUSH
55080: LD_INT 69
55082: PUSH
55083: LD_INT 39
55085: PUSH
55086: LD_INT 40
55088: PUSH
55089: LD_INT 41
55091: PUSH
55092: LD_INT 42
55094: PUSH
55095: LD_INT 43
55097: PUSH
55098: LD_INT 48
55100: PUSH
55101: LD_INT 49
55103: PUSH
55104: LD_INT 50
55106: PUSH
55107: LD_INT 51
55109: PUSH
55110: LD_INT 52
55112: PUSH
55113: LD_INT 53
55115: PUSH
55116: LD_INT 54
55118: PUSH
55119: LD_INT 55
55121: PUSH
55122: LD_INT 56
55124: PUSH
55125: LD_INT 60
55127: PUSH
55128: LD_INT 61
55130: PUSH
55131: LD_INT 62
55133: PUSH
55134: LD_INT 66
55136: PUSH
55137: LD_INT 67
55139: PUSH
55140: LD_INT 68
55142: PUSH
55143: LD_INT 81
55145: PUSH
55146: LD_INT 82
55148: PUSH
55149: LD_INT 83
55151: PUSH
55152: LD_INT 84
55154: PUSH
55155: LD_INT 85
55157: PUSH
55158: LD_INT 87
55160: PUSH
55161: LD_INT 88
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: ST_TO_ADDR
55220: GO 55453
55222: LD_INT 3
55224: DOUBLE
55225: EQUAL
55226: IFTRUE 55230
55228: GO 55452
55230: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55231: LD_ADDR_VAR 0 4
55235: PUSH
55236: LD_INT 46
55238: PUSH
55239: LD_INT 47
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 82
55250: PUSH
55251: LD_INT 83
55253: PUSH
55254: LD_INT 84
55256: PUSH
55257: LD_INT 85
55259: PUSH
55260: LD_INT 86
55262: PUSH
55263: LD_INT 11
55265: PUSH
55266: LD_INT 9
55268: PUSH
55269: LD_INT 20
55271: PUSH
55272: LD_INT 19
55274: PUSH
55275: LD_INT 21
55277: PUSH
55278: LD_INT 24
55280: PUSH
55281: LD_INT 22
55283: PUSH
55284: LD_INT 25
55286: PUSH
55287: LD_INT 28
55289: PUSH
55290: LD_INT 29
55292: PUSH
55293: LD_INT 30
55295: PUSH
55296: LD_INT 31
55298: PUSH
55299: LD_INT 37
55301: PUSH
55302: LD_INT 38
55304: PUSH
55305: LD_INT 32
55307: PUSH
55308: LD_INT 27
55310: PUSH
55311: LD_INT 33
55313: PUSH
55314: LD_INT 69
55316: PUSH
55317: LD_INT 39
55319: PUSH
55320: LD_INT 34
55322: PUSH
55323: LD_INT 40
55325: PUSH
55326: LD_INT 71
55328: PUSH
55329: LD_INT 23
55331: PUSH
55332: LD_INT 44
55334: PUSH
55335: LD_INT 48
55337: PUSH
55338: LD_INT 49
55340: PUSH
55341: LD_INT 50
55343: PUSH
55344: LD_INT 51
55346: PUSH
55347: LD_INT 52
55349: PUSH
55350: LD_INT 53
55352: PUSH
55353: LD_INT 54
55355: PUSH
55356: LD_INT 55
55358: PUSH
55359: LD_INT 56
55361: PUSH
55362: LD_INT 57
55364: PUSH
55365: LD_INT 58
55367: PUSH
55368: LD_INT 59
55370: PUSH
55371: LD_INT 63
55373: PUSH
55374: LD_INT 64
55376: PUSH
55377: LD_INT 65
55379: PUSH
55380: LD_INT 82
55382: PUSH
55383: LD_INT 83
55385: PUSH
55386: LD_INT 84
55388: PUSH
55389: LD_INT 85
55391: PUSH
55392: LD_INT 86
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: ST_TO_ADDR
55450: GO 55453
55452: POP
// if state > - 1 and state < 3 then
55453: LD_VAR 0 3
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: GREATER
55462: PUSH
55463: LD_VAR 0 3
55467: PUSH
55468: LD_INT 3
55470: LESS
55471: AND
55472: IFFALSE 55529
// for i in result do
55474: LD_ADDR_VAR 0 5
55478: PUSH
55479: LD_VAR 0 4
55483: PUSH
55484: FOR_IN
55485: IFFALSE 55527
// if GetTech ( i , side ) <> state then
55487: LD_VAR 0 5
55491: PPUSH
55492: LD_VAR 0 1
55496: PPUSH
55497: CALL_OW 321
55501: PUSH
55502: LD_VAR 0 3
55506: NONEQUAL
55507: IFFALSE 55525
// result := result diff i ;
55509: LD_ADDR_VAR 0 4
55513: PUSH
55514: LD_VAR 0 4
55518: PUSH
55519: LD_VAR 0 5
55523: DIFF
55524: ST_TO_ADDR
55525: GO 55484
55527: POP
55528: POP
// end ;
55529: LD_VAR 0 4
55533: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
55534: LD_INT 0
55536: PPUSH
55537: PPUSH
55538: PPUSH
// result := true ;
55539: LD_ADDR_VAR 0 3
55543: PUSH
55544: LD_INT 1
55546: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
55547: LD_ADDR_VAR 0 5
55551: PUSH
55552: LD_VAR 0 2
55556: PPUSH
55557: CALL_OW 480
55561: ST_TO_ADDR
// if not tmp then
55562: LD_VAR 0 5
55566: NOT
55567: IFFALSE 55571
// exit ;
55569: GO 55620
// for i in tmp do
55571: LD_ADDR_VAR 0 4
55575: PUSH
55576: LD_VAR 0 5
55580: PUSH
55581: FOR_IN
55582: IFFALSE 55618
// if GetTech ( i , side ) <> state_researched then
55584: LD_VAR 0 4
55588: PPUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: CALL_OW 321
55598: PUSH
55599: LD_INT 2
55601: NONEQUAL
55602: IFFALSE 55616
// begin result := false ;
55604: LD_ADDR_VAR 0 3
55608: PUSH
55609: LD_INT 0
55611: ST_TO_ADDR
// exit ;
55612: POP
55613: POP
55614: GO 55620
// end ;
55616: GO 55581
55618: POP
55619: POP
// end ;
55620: LD_VAR 0 3
55624: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
55625: LD_INT 0
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
55631: PPUSH
55632: PPUSH
55633: PPUSH
55634: PPUSH
55635: PPUSH
55636: PPUSH
55637: PPUSH
55638: PPUSH
55639: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
55640: LD_VAR 0 1
55644: NOT
55645: PUSH
55646: LD_VAR 0 1
55650: PPUSH
55651: CALL_OW 257
55655: PUSH
55656: LD_INT 9
55658: NONEQUAL
55659: OR
55660: IFFALSE 55664
// exit ;
55662: GO 56237
// side := GetSide ( unit ) ;
55664: LD_ADDR_VAR 0 9
55668: PUSH
55669: LD_VAR 0 1
55673: PPUSH
55674: CALL_OW 255
55678: ST_TO_ADDR
// tech_space := tech_spacanom ;
55679: LD_ADDR_VAR 0 12
55683: PUSH
55684: LD_INT 29
55686: ST_TO_ADDR
// tech_time := tech_taurad ;
55687: LD_ADDR_VAR 0 13
55691: PUSH
55692: LD_INT 28
55694: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
55695: LD_ADDR_VAR 0 11
55699: PUSH
55700: LD_VAR 0 1
55704: PPUSH
55705: CALL_OW 310
55709: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
55710: LD_VAR 0 11
55714: PPUSH
55715: CALL_OW 247
55719: PUSH
55720: LD_INT 2
55722: EQUAL
55723: IFFALSE 55727
// exit ;
55725: GO 56237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55727: LD_ADDR_VAR 0 8
55731: PUSH
55732: LD_INT 81
55734: PUSH
55735: LD_VAR 0 9
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 3
55746: PUSH
55747: LD_INT 21
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PPUSH
55765: CALL_OW 69
55769: ST_TO_ADDR
// if not tmp then
55770: LD_VAR 0 8
55774: NOT
55775: IFFALSE 55779
// exit ;
55777: GO 56237
// if in_unit then
55779: LD_VAR 0 11
55783: IFFALSE 55807
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
55785: LD_ADDR_VAR 0 10
55789: PUSH
55790: LD_VAR 0 8
55794: PPUSH
55795: LD_VAR 0 11
55799: PPUSH
55800: CALL_OW 74
55804: ST_TO_ADDR
55805: GO 55827
// enemy := NearestUnitToUnit ( tmp , unit ) ;
55807: LD_ADDR_VAR 0 10
55811: PUSH
55812: LD_VAR 0 8
55816: PPUSH
55817: LD_VAR 0 1
55821: PPUSH
55822: CALL_OW 74
55826: ST_TO_ADDR
// if not enemy then
55827: LD_VAR 0 10
55831: NOT
55832: IFFALSE 55836
// exit ;
55834: GO 56237
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
55836: LD_VAR 0 11
55840: PUSH
55841: LD_VAR 0 11
55845: PPUSH
55846: LD_VAR 0 10
55850: PPUSH
55851: CALL_OW 296
55855: PUSH
55856: LD_INT 13
55858: GREATER
55859: AND
55860: PUSH
55861: LD_VAR 0 1
55865: PPUSH
55866: LD_VAR 0 10
55870: PPUSH
55871: CALL_OW 296
55875: PUSH
55876: LD_INT 12
55878: GREATER
55879: OR
55880: IFFALSE 55884
// exit ;
55882: GO 56237
// missile := [ 1 ] ;
55884: LD_ADDR_VAR 0 14
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: ST_TO_ADDR
// if Researched ( side , tech_space ) then
55895: LD_VAR 0 9
55899: PPUSH
55900: LD_VAR 0 12
55904: PPUSH
55905: CALL_OW 325
55909: IFFALSE 55938
// missile := Replace ( missile , missile + 1 , 2 ) ;
55911: LD_ADDR_VAR 0 14
55915: PUSH
55916: LD_VAR 0 14
55920: PPUSH
55921: LD_VAR 0 14
55925: PUSH
55926: LD_INT 1
55928: PLUS
55929: PPUSH
55930: LD_INT 2
55932: PPUSH
55933: CALL_OW 1
55937: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
55938: LD_VAR 0 9
55942: PPUSH
55943: LD_VAR 0 13
55947: PPUSH
55948: CALL_OW 325
55952: PUSH
55953: LD_VAR 0 10
55957: PPUSH
55958: CALL_OW 255
55962: PPUSH
55963: LD_VAR 0 13
55967: PPUSH
55968: CALL_OW 325
55972: NOT
55973: AND
55974: IFFALSE 56003
// missile := Replace ( missile , missile + 1 , 3 ) ;
55976: LD_ADDR_VAR 0 14
55980: PUSH
55981: LD_VAR 0 14
55985: PPUSH
55986: LD_VAR 0 14
55990: PUSH
55991: LD_INT 1
55993: PLUS
55994: PPUSH
55995: LD_INT 3
55997: PPUSH
55998: CALL_OW 1
56002: ST_TO_ADDR
// if missile < 2 then
56003: LD_VAR 0 14
56007: PUSH
56008: LD_INT 2
56010: LESS
56011: IFFALSE 56015
// exit ;
56013: GO 56237
// x := GetX ( enemy ) ;
56015: LD_ADDR_VAR 0 4
56019: PUSH
56020: LD_VAR 0 10
56024: PPUSH
56025: CALL_OW 250
56029: ST_TO_ADDR
// y := GetY ( enemy ) ;
56030: LD_ADDR_VAR 0 5
56034: PUSH
56035: LD_VAR 0 10
56039: PPUSH
56040: CALL_OW 251
56044: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
56045: LD_ADDR_VAR 0 6
56049: PUSH
56050: LD_VAR 0 4
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PPUSH
56059: LD_INT 1
56061: PPUSH
56062: CALL_OW 12
56066: PLUS
56067: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
56068: LD_ADDR_VAR 0 7
56072: PUSH
56073: LD_VAR 0 5
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PPUSH
56082: LD_INT 1
56084: PPUSH
56085: CALL_OW 12
56089: PLUS
56090: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56091: LD_VAR 0 6
56095: PPUSH
56096: LD_VAR 0 7
56100: PPUSH
56101: CALL_OW 488
56105: NOT
56106: IFFALSE 56128
// begin _x := x ;
56108: LD_ADDR_VAR 0 6
56112: PUSH
56113: LD_VAR 0 4
56117: ST_TO_ADDR
// _y := y ;
56118: LD_ADDR_VAR 0 7
56122: PUSH
56123: LD_VAR 0 5
56127: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
56128: LD_ADDR_VAR 0 3
56132: PUSH
56133: LD_INT 1
56135: PPUSH
56136: LD_VAR 0 14
56140: PPUSH
56141: CALL_OW 12
56145: ST_TO_ADDR
// case i of 1 :
56146: LD_VAR 0 3
56150: PUSH
56151: LD_INT 1
56153: DOUBLE
56154: EQUAL
56155: IFTRUE 56159
56157: GO 56176
56159: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
56160: LD_VAR 0 1
56164: PPUSH
56165: LD_VAR 0 10
56169: PPUSH
56170: CALL_OW 115
56174: GO 56237
56176: LD_INT 2
56178: DOUBLE
56179: EQUAL
56180: IFTRUE 56184
56182: GO 56206
56184: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56185: LD_VAR 0 1
56189: PPUSH
56190: LD_VAR 0 6
56194: PPUSH
56195: LD_VAR 0 7
56199: PPUSH
56200: CALL_OW 153
56204: GO 56237
56206: LD_INT 3
56208: DOUBLE
56209: EQUAL
56210: IFTRUE 56214
56212: GO 56236
56214: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56215: LD_VAR 0 1
56219: PPUSH
56220: LD_VAR 0 6
56224: PPUSH
56225: LD_VAR 0 7
56229: PPUSH
56230: CALL_OW 154
56234: GO 56237
56236: POP
// end ;
56237: LD_VAR 0 2
56241: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56242: LD_INT 0
56244: PPUSH
56245: PPUSH
56246: PPUSH
56247: PPUSH
56248: PPUSH
56249: PPUSH
// if not unit or not building then
56250: LD_VAR 0 1
56254: NOT
56255: PUSH
56256: LD_VAR 0 2
56260: NOT
56261: OR
56262: IFFALSE 56266
// exit ;
56264: GO 56424
// x := GetX ( building ) ;
56266: LD_ADDR_VAR 0 5
56270: PUSH
56271: LD_VAR 0 2
56275: PPUSH
56276: CALL_OW 250
56280: ST_TO_ADDR
// y := GetY ( building ) ;
56281: LD_ADDR_VAR 0 6
56285: PUSH
56286: LD_VAR 0 2
56290: PPUSH
56291: CALL_OW 251
56295: ST_TO_ADDR
// for i = 0 to 5 do
56296: LD_ADDR_VAR 0 4
56300: PUSH
56301: DOUBLE
56302: LD_INT 0
56304: DEC
56305: ST_TO_ADDR
56306: LD_INT 5
56308: PUSH
56309: FOR_TO
56310: IFFALSE 56422
// begin _x := ShiftX ( x , i , 3 ) ;
56312: LD_ADDR_VAR 0 7
56316: PUSH
56317: LD_VAR 0 5
56321: PPUSH
56322: LD_VAR 0 4
56326: PPUSH
56327: LD_INT 3
56329: PPUSH
56330: CALL_OW 272
56334: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56335: LD_ADDR_VAR 0 8
56339: PUSH
56340: LD_VAR 0 6
56344: PPUSH
56345: LD_VAR 0 4
56349: PPUSH
56350: LD_INT 3
56352: PPUSH
56353: CALL_OW 273
56357: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56358: LD_VAR 0 7
56362: PPUSH
56363: LD_VAR 0 8
56367: PPUSH
56368: CALL_OW 488
56372: NOT
56373: IFFALSE 56377
// continue ;
56375: GO 56309
// if HexInfo ( _x , _y ) = 0 then
56377: LD_VAR 0 7
56381: PPUSH
56382: LD_VAR 0 8
56386: PPUSH
56387: CALL_OW 428
56391: PUSH
56392: LD_INT 0
56394: EQUAL
56395: IFFALSE 56420
// begin ComMoveXY ( unit , _x , _y ) ;
56397: LD_VAR 0 1
56401: PPUSH
56402: LD_VAR 0 7
56406: PPUSH
56407: LD_VAR 0 8
56411: PPUSH
56412: CALL_OW 111
// exit ;
56416: POP
56417: POP
56418: GO 56424
// end ; end ;
56420: GO 56309
56422: POP
56423: POP
// end ;
56424: LD_VAR 0 3
56428: RET
// export function ScanBase ( side , base_area ) ; begin
56429: LD_INT 0
56431: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56432: LD_ADDR_VAR 0 3
56436: PUSH
56437: LD_VAR 0 2
56441: PPUSH
56442: LD_INT 81
56444: PUSH
56445: LD_VAR 0 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PPUSH
56454: CALL_OW 70
56458: ST_TO_ADDR
// end ;
56459: LD_VAR 0 3
56463: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
56464: LD_INT 0
56466: PPUSH
56467: PPUSH
56468: PPUSH
56469: PPUSH
// result := false ;
56470: LD_ADDR_VAR 0 2
56474: PUSH
56475: LD_INT 0
56477: ST_TO_ADDR
// side := GetSide ( unit ) ;
56478: LD_ADDR_VAR 0 3
56482: PUSH
56483: LD_VAR 0 1
56487: PPUSH
56488: CALL_OW 255
56492: ST_TO_ADDR
// nat := GetNation ( unit ) ;
56493: LD_ADDR_VAR 0 4
56497: PUSH
56498: LD_VAR 0 1
56502: PPUSH
56503: CALL_OW 248
56507: ST_TO_ADDR
// case nat of 1 :
56508: LD_VAR 0 4
56512: PUSH
56513: LD_INT 1
56515: DOUBLE
56516: EQUAL
56517: IFTRUE 56521
56519: GO 56532
56521: POP
// tech := tech_lassight ; 2 :
56522: LD_ADDR_VAR 0 5
56526: PUSH
56527: LD_INT 12
56529: ST_TO_ADDR
56530: GO 56571
56532: LD_INT 2
56534: DOUBLE
56535: EQUAL
56536: IFTRUE 56540
56538: GO 56551
56540: POP
// tech := tech_mortar ; 3 :
56541: LD_ADDR_VAR 0 5
56545: PUSH
56546: LD_INT 41
56548: ST_TO_ADDR
56549: GO 56571
56551: LD_INT 3
56553: DOUBLE
56554: EQUAL
56555: IFTRUE 56559
56557: GO 56570
56559: POP
// tech := tech_bazooka ; end ;
56560: LD_ADDR_VAR 0 5
56564: PUSH
56565: LD_INT 44
56567: ST_TO_ADDR
56568: GO 56571
56570: POP
// if Researched ( side , tech ) then
56571: LD_VAR 0 3
56575: PPUSH
56576: LD_VAR 0 5
56580: PPUSH
56581: CALL_OW 325
56585: IFFALSE 56612
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
56587: LD_ADDR_VAR 0 2
56591: PUSH
56592: LD_INT 5
56594: PUSH
56595: LD_INT 8
56597: PUSH
56598: LD_INT 9
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: PUSH
56606: LD_VAR 0 4
56610: ARRAY
56611: ST_TO_ADDR
// end ;
56612: LD_VAR 0 2
56616: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
56617: LD_INT 0
56619: PPUSH
56620: PPUSH
56621: PPUSH
// if not mines then
56622: LD_VAR 0 2
56626: NOT
56627: IFFALSE 56631
// exit ;
56629: GO 56775
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56631: LD_ADDR_VAR 0 5
56635: PUSH
56636: LD_INT 81
56638: PUSH
56639: LD_VAR 0 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 21
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PPUSH
56669: CALL_OW 69
56673: ST_TO_ADDR
// for i in mines do
56674: LD_ADDR_VAR 0 4
56678: PUSH
56679: LD_VAR 0 2
56683: PUSH
56684: FOR_IN
56685: IFFALSE 56773
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
56687: LD_VAR 0 4
56691: PUSH
56692: LD_INT 1
56694: ARRAY
56695: PPUSH
56696: LD_VAR 0 4
56700: PUSH
56701: LD_INT 2
56703: ARRAY
56704: PPUSH
56705: CALL_OW 458
56709: NOT
56710: IFFALSE 56714
// continue ;
56712: GO 56684
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
56714: LD_VAR 0 4
56718: PUSH
56719: LD_INT 1
56721: ARRAY
56722: PPUSH
56723: LD_VAR 0 4
56727: PUSH
56728: LD_INT 2
56730: ARRAY
56731: PPUSH
56732: CALL_OW 428
56736: PUSH
56737: LD_VAR 0 5
56741: IN
56742: IFFALSE 56771
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
56744: LD_VAR 0 4
56748: PUSH
56749: LD_INT 1
56751: ARRAY
56752: PPUSH
56753: LD_VAR 0 4
56757: PUSH
56758: LD_INT 2
56760: ARRAY
56761: PPUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 456
// end ;
56771: GO 56684
56773: POP
56774: POP
// end ;
56775: LD_VAR 0 3
56779: RET
// export function Count ( array ) ; begin
56780: LD_INT 0
56782: PPUSH
// result := array + 0 ;
56783: LD_ADDR_VAR 0 2
56787: PUSH
56788: LD_VAR 0 1
56792: PUSH
56793: LD_INT 0
56795: PLUS
56796: ST_TO_ADDR
// end ;
56797: LD_VAR 0 2
56801: RET
// export function IsEmpty ( building ) ; begin
56802: LD_INT 0
56804: PPUSH
// if not building then
56805: LD_VAR 0 1
56809: NOT
56810: IFFALSE 56814
// exit ;
56812: GO 56857
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
56814: LD_ADDR_VAR 0 2
56818: PUSH
56819: LD_VAR 0 1
56823: PUSH
56824: LD_INT 22
56826: PUSH
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 255
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 58
56843: PUSH
56844: EMPTY
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PPUSH
56851: CALL_OW 69
56855: IN
56856: ST_TO_ADDR
// end ;
56857: LD_VAR 0 2
56861: RET
// export function IsNotFull ( building ) ; var places ; begin
56862: LD_INT 0
56864: PPUSH
56865: PPUSH
// if not building then
56866: LD_VAR 0 1
56870: NOT
56871: IFFALSE 56875
// exit ;
56873: GO 56903
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
56875: LD_ADDR_VAR 0 2
56879: PUSH
56880: LD_VAR 0 1
56884: PPUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 62
56890: PUSH
56891: EMPTY
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PPUSH
56898: CALL_OW 72
56902: ST_TO_ADDR
// end ;
56903: LD_VAR 0 2
56907: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
56908: LD_INT 0
56910: PPUSH
56911: PPUSH
56912: PPUSH
56913: PPUSH
// tmp := [ ] ;
56914: LD_ADDR_VAR 0 3
56918: PUSH
56919: EMPTY
56920: ST_TO_ADDR
// list := [ ] ;
56921: LD_ADDR_VAR 0 5
56925: PUSH
56926: EMPTY
56927: ST_TO_ADDR
// for i = 16 to 25 do
56928: LD_ADDR_VAR 0 4
56932: PUSH
56933: DOUBLE
56934: LD_INT 16
56936: DEC
56937: ST_TO_ADDR
56938: LD_INT 25
56940: PUSH
56941: FOR_TO
56942: IFFALSE 57015
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
56944: LD_ADDR_VAR 0 3
56948: PUSH
56949: LD_VAR 0 3
56953: PUSH
56954: LD_INT 22
56956: PUSH
56957: LD_VAR 0 1
56961: PPUSH
56962: CALL_OW 255
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 91
56973: PUSH
56974: LD_VAR 0 1
56978: PUSH
56979: LD_INT 6
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 30
56989: PUSH
56990: LD_VAR 0 4
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: PPUSH
57007: CALL_OW 69
57011: ADD
57012: ST_TO_ADDR
57013: GO 56941
57015: POP
57016: POP
// for i = 1 to tmp do
57017: LD_ADDR_VAR 0 4
57021: PUSH
57022: DOUBLE
57023: LD_INT 1
57025: DEC
57026: ST_TO_ADDR
57027: LD_VAR 0 3
57031: PUSH
57032: FOR_TO
57033: IFFALSE 57121
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
57035: LD_ADDR_VAR 0 5
57039: PUSH
57040: LD_VAR 0 5
57044: PUSH
57045: LD_VAR 0 3
57049: PUSH
57050: LD_VAR 0 4
57054: ARRAY
57055: PPUSH
57056: CALL_OW 266
57060: PUSH
57061: LD_VAR 0 3
57065: PUSH
57066: LD_VAR 0 4
57070: ARRAY
57071: PPUSH
57072: CALL_OW 250
57076: PUSH
57077: LD_VAR 0 3
57081: PUSH
57082: LD_VAR 0 4
57086: ARRAY
57087: PPUSH
57088: CALL_OW 251
57092: PUSH
57093: LD_VAR 0 3
57097: PUSH
57098: LD_VAR 0 4
57102: ARRAY
57103: PPUSH
57104: CALL_OW 254
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: PUSH
57115: EMPTY
57116: LIST
57117: ADD
57118: ST_TO_ADDR
57119: GO 57032
57121: POP
57122: POP
// result := list ;
57123: LD_ADDR_VAR 0 2
57127: PUSH
57128: LD_VAR 0 5
57132: ST_TO_ADDR
// end ;
57133: LD_VAR 0 2
57137: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
57138: LD_INT 0
57140: PPUSH
57141: PPUSH
57142: PPUSH
57143: PPUSH
57144: PPUSH
57145: PPUSH
57146: PPUSH
// if not factory then
57147: LD_VAR 0 1
57151: NOT
57152: IFFALSE 57156
// exit ;
57154: GO 57749
// if control = control_apeman then
57156: LD_VAR 0 4
57160: PUSH
57161: LD_INT 5
57163: EQUAL
57164: IFFALSE 57273
// begin tmp := UnitsInside ( factory ) ;
57166: LD_ADDR_VAR 0 8
57170: PUSH
57171: LD_VAR 0 1
57175: PPUSH
57176: CALL_OW 313
57180: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57181: LD_VAR 0 8
57185: PPUSH
57186: LD_INT 25
57188: PUSH
57189: LD_INT 12
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PPUSH
57196: CALL_OW 72
57200: NOT
57201: IFFALSE 57211
// control := control_manual ;
57203: LD_ADDR_VAR 0 4
57207: PUSH
57208: LD_INT 1
57210: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57211: LD_ADDR_VAR 0 8
57215: PUSH
57216: LD_VAR 0 1
57220: PPUSH
57221: CALL 56908 0 1
57225: ST_TO_ADDR
// if tmp then
57226: LD_VAR 0 8
57230: IFFALSE 57273
// begin for i in tmp do
57232: LD_ADDR_VAR 0 7
57236: PUSH
57237: LD_VAR 0 8
57241: PUSH
57242: FOR_IN
57243: IFFALSE 57271
// if i [ 1 ] = b_ext_radio then
57245: LD_VAR 0 7
57249: PUSH
57250: LD_INT 1
57252: ARRAY
57253: PUSH
57254: LD_INT 22
57256: EQUAL
57257: IFFALSE 57269
// begin control := control_remote ;
57259: LD_ADDR_VAR 0 4
57263: PUSH
57264: LD_INT 2
57266: ST_TO_ADDR
// break ;
57267: GO 57271
// end ;
57269: GO 57242
57271: POP
57272: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57273: LD_VAR 0 1
57277: PPUSH
57278: LD_VAR 0 2
57282: PPUSH
57283: LD_VAR 0 3
57287: PPUSH
57288: LD_VAR 0 4
57292: PPUSH
57293: LD_VAR 0 5
57297: PPUSH
57298: CALL_OW 448
57302: IFFALSE 57337
// begin result := [ chassis , engine , control , weapon ] ;
57304: LD_ADDR_VAR 0 6
57308: PUSH
57309: LD_VAR 0 2
57313: PUSH
57314: LD_VAR 0 3
57318: PUSH
57319: LD_VAR 0 4
57323: PUSH
57324: LD_VAR 0 5
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// exit ;
57335: GO 57749
// end ; _chassis := AvailableChassisList ( factory ) ;
57337: LD_ADDR_VAR 0 9
57341: PUSH
57342: LD_VAR 0 1
57346: PPUSH
57347: CALL_OW 475
57351: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57352: LD_ADDR_VAR 0 11
57356: PUSH
57357: LD_VAR 0 1
57361: PPUSH
57362: CALL_OW 476
57366: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57367: LD_ADDR_VAR 0 12
57371: PUSH
57372: LD_VAR 0 1
57376: PPUSH
57377: CALL_OW 477
57381: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57382: LD_ADDR_VAR 0 10
57386: PUSH
57387: LD_VAR 0 1
57391: PPUSH
57392: CALL_OW 478
57396: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57397: LD_VAR 0 9
57401: NOT
57402: PUSH
57403: LD_VAR 0 11
57407: NOT
57408: OR
57409: PUSH
57410: LD_VAR 0 12
57414: NOT
57415: OR
57416: PUSH
57417: LD_VAR 0 10
57421: NOT
57422: OR
57423: IFFALSE 57458
// begin result := [ chassis , engine , control , weapon ] ;
57425: LD_ADDR_VAR 0 6
57429: PUSH
57430: LD_VAR 0 2
57434: PUSH
57435: LD_VAR 0 3
57439: PUSH
57440: LD_VAR 0 4
57444: PUSH
57445: LD_VAR 0 5
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// exit ;
57456: GO 57749
// end ; if not chassis in _chassis then
57458: LD_VAR 0 2
57462: PUSH
57463: LD_VAR 0 9
57467: IN
57468: NOT
57469: IFFALSE 57495
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
57471: LD_ADDR_VAR 0 2
57475: PUSH
57476: LD_VAR 0 9
57480: PUSH
57481: LD_INT 1
57483: PPUSH
57484: LD_VAR 0 9
57488: PPUSH
57489: CALL_OW 12
57493: ARRAY
57494: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
57495: LD_VAR 0 2
57499: PPUSH
57500: LD_VAR 0 3
57504: PPUSH
57505: CALL 57754 0 2
57509: NOT
57510: IFFALSE 57569
// repeat engine := _engine [ 1 ] ;
57512: LD_ADDR_VAR 0 3
57516: PUSH
57517: LD_VAR 0 11
57521: PUSH
57522: LD_INT 1
57524: ARRAY
57525: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
57526: LD_ADDR_VAR 0 11
57530: PUSH
57531: LD_VAR 0 11
57535: PPUSH
57536: LD_INT 1
57538: PPUSH
57539: CALL_OW 3
57543: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
57544: LD_VAR 0 2
57548: PPUSH
57549: LD_VAR 0 3
57553: PPUSH
57554: CALL 57754 0 2
57558: PUSH
57559: LD_VAR 0 11
57563: PUSH
57564: EMPTY
57565: EQUAL
57566: OR
57567: IFFALSE 57512
// if not control in _control then
57569: LD_VAR 0 4
57573: PUSH
57574: LD_VAR 0 12
57578: IN
57579: NOT
57580: IFFALSE 57606
// control := _control [ rand ( 1 , _control ) ] ;
57582: LD_ADDR_VAR 0 4
57586: PUSH
57587: LD_VAR 0 12
57591: PUSH
57592: LD_INT 1
57594: PPUSH
57595: LD_VAR 0 12
57599: PPUSH
57600: CALL_OW 12
57604: ARRAY
57605: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
57606: LD_VAR 0 2
57610: PPUSH
57611: LD_VAR 0 5
57615: PPUSH
57616: CALL 57974 0 2
57620: NOT
57621: IFFALSE 57680
// repeat weapon := _weapon [ 1 ] ;
57623: LD_ADDR_VAR 0 5
57627: PUSH
57628: LD_VAR 0 10
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
57637: LD_ADDR_VAR 0 10
57641: PUSH
57642: LD_VAR 0 10
57646: PPUSH
57647: LD_INT 1
57649: PPUSH
57650: CALL_OW 3
57654: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
57655: LD_VAR 0 2
57659: PPUSH
57660: LD_VAR 0 5
57664: PPUSH
57665: CALL 57974 0 2
57669: PUSH
57670: LD_VAR 0 10
57674: PUSH
57675: EMPTY
57676: EQUAL
57677: OR
57678: IFFALSE 57623
// result := [ ] ;
57680: LD_ADDR_VAR 0 6
57684: PUSH
57685: EMPTY
57686: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57687: LD_VAR 0 1
57691: PPUSH
57692: LD_VAR 0 2
57696: PPUSH
57697: LD_VAR 0 3
57701: PPUSH
57702: LD_VAR 0 4
57706: PPUSH
57707: LD_VAR 0 5
57711: PPUSH
57712: CALL_OW 448
57716: IFFALSE 57749
// result := [ chassis , engine , control , weapon ] ;
57718: LD_ADDR_VAR 0 6
57722: PUSH
57723: LD_VAR 0 2
57727: PUSH
57728: LD_VAR 0 3
57732: PUSH
57733: LD_VAR 0 4
57737: PUSH
57738: LD_VAR 0 5
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: ST_TO_ADDR
// end ;
57749: LD_VAR 0 6
57753: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
57754: LD_INT 0
57756: PPUSH
// if not chassis or not engine then
57757: LD_VAR 0 1
57761: NOT
57762: PUSH
57763: LD_VAR 0 2
57767: NOT
57768: OR
57769: IFFALSE 57773
// exit ;
57771: GO 57969
// case engine of engine_solar :
57773: LD_VAR 0 2
57777: PUSH
57778: LD_INT 2
57780: DOUBLE
57781: EQUAL
57782: IFTRUE 57786
57784: GO 57824
57786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
57787: LD_ADDR_VAR 0 3
57791: PUSH
57792: LD_INT 11
57794: PUSH
57795: LD_INT 12
57797: PUSH
57798: LD_INT 13
57800: PUSH
57801: LD_INT 14
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: ST_TO_ADDR
57822: GO 57953
57824: LD_INT 1
57826: DOUBLE
57827: EQUAL
57828: IFTRUE 57832
57830: GO 57894
57832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
57833: LD_ADDR_VAR 0 3
57837: PUSH
57838: LD_INT 11
57840: PUSH
57841: LD_INT 12
57843: PUSH
57844: LD_INT 13
57846: PUSH
57847: LD_INT 14
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 4
57861: PUSH
57862: LD_INT 5
57864: PUSH
57865: LD_INT 21
57867: PUSH
57868: LD_INT 23
57870: PUSH
57871: LD_INT 22
57873: PUSH
57874: LD_INT 24
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
57892: GO 57953
57894: LD_INT 3
57896: DOUBLE
57897: EQUAL
57898: IFTRUE 57902
57900: GO 57952
57902: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57903: LD_ADDR_VAR 0 3
57907: PUSH
57908: LD_INT 13
57910: PUSH
57911: LD_INT 14
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: LD_INT 5
57925: PUSH
57926: LD_INT 21
57928: PUSH
57929: LD_INT 22
57931: PUSH
57932: LD_INT 23
57934: PUSH
57935: LD_INT 24
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: ST_TO_ADDR
57950: GO 57953
57952: POP
// result := ( chassis in result ) ;
57953: LD_ADDR_VAR 0 3
57957: PUSH
57958: LD_VAR 0 1
57962: PUSH
57963: LD_VAR 0 3
57967: IN
57968: ST_TO_ADDR
// end ;
57969: LD_VAR 0 3
57973: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
57974: LD_INT 0
57976: PPUSH
// if not chassis or not weapon then
57977: LD_VAR 0 1
57981: NOT
57982: PUSH
57983: LD_VAR 0 2
57987: NOT
57988: OR
57989: IFFALSE 57993
// exit ;
57991: GO 59053
// case weapon of us_machine_gun :
57993: LD_VAR 0 2
57997: PUSH
57998: LD_INT 2
58000: DOUBLE
58001: EQUAL
58002: IFTRUE 58006
58004: GO 58036
58006: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
58007: LD_ADDR_VAR 0 3
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 4
58023: PUSH
58024: LD_INT 5
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: ST_TO_ADDR
58034: GO 59037
58036: LD_INT 3
58038: DOUBLE
58039: EQUAL
58040: IFTRUE 58044
58042: GO 58074
58044: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
58045: LD_ADDR_VAR 0 3
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 3
58058: PUSH
58059: LD_INT 4
58061: PUSH
58062: LD_INT 5
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
58072: GO 59037
58074: LD_INT 11
58076: DOUBLE
58077: EQUAL
58078: IFTRUE 58082
58080: GO 58112
58082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
58083: LD_ADDR_VAR 0 3
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 5
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: ST_TO_ADDR
58110: GO 59037
58112: LD_INT 4
58114: DOUBLE
58115: EQUAL
58116: IFTRUE 58120
58118: GO 58146
58120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
58121: LD_ADDR_VAR 0 3
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 4
58134: PUSH
58135: LD_INT 5
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
58144: GO 59037
58146: LD_INT 5
58148: DOUBLE
58149: EQUAL
58150: IFTRUE 58154
58152: GO 58180
58154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
58155: LD_ADDR_VAR 0 3
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 4
58168: PUSH
58169: LD_INT 5
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
58178: GO 59037
58180: LD_INT 9
58182: DOUBLE
58183: EQUAL
58184: IFTRUE 58188
58186: GO 58214
58188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58189: LD_ADDR_VAR 0 3
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 4
58202: PUSH
58203: LD_INT 5
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: ST_TO_ADDR
58212: GO 59037
58214: LD_INT 7
58216: DOUBLE
58217: EQUAL
58218: IFTRUE 58222
58220: GO 58248
58222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58223: LD_ADDR_VAR 0 3
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: LD_INT 4
58236: PUSH
58237: LD_INT 5
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: ST_TO_ADDR
58246: GO 59037
58248: LD_INT 12
58250: DOUBLE
58251: EQUAL
58252: IFTRUE 58256
58254: GO 58282
58256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58257: LD_ADDR_VAR 0 3
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: LD_INT 4
58270: PUSH
58271: LD_INT 5
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
58280: GO 59037
58282: LD_INT 13
58284: DOUBLE
58285: EQUAL
58286: IFTRUE 58290
58288: GO 58316
58290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58291: LD_ADDR_VAR 0 3
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: LD_INT 5
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
58314: GO 59037
58316: LD_INT 14
58318: DOUBLE
58319: EQUAL
58320: IFTRUE 58324
58322: GO 58342
58324: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58325: LD_ADDR_VAR 0 3
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: LD_INT 5
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: ST_TO_ADDR
58340: GO 59037
58342: LD_INT 6
58344: DOUBLE
58345: EQUAL
58346: IFTRUE 58350
58348: GO 58368
58350: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58351: LD_ADDR_VAR 0 3
58355: PUSH
58356: LD_INT 4
58358: PUSH
58359: LD_INT 5
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: ST_TO_ADDR
58366: GO 59037
58368: LD_INT 10
58370: DOUBLE
58371: EQUAL
58372: IFTRUE 58376
58374: GO 58394
58376: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58377: LD_ADDR_VAR 0 3
58381: PUSH
58382: LD_INT 4
58384: PUSH
58385: LD_INT 5
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: ST_TO_ADDR
58392: GO 59037
58394: LD_INT 22
58396: DOUBLE
58397: EQUAL
58398: IFTRUE 58402
58400: GO 58428
58402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58403: LD_ADDR_VAR 0 3
58407: PUSH
58408: LD_INT 11
58410: PUSH
58411: LD_INT 12
58413: PUSH
58414: LD_INT 13
58416: PUSH
58417: LD_INT 14
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
58426: GO 59037
58428: LD_INT 23
58430: DOUBLE
58431: EQUAL
58432: IFTRUE 58436
58434: GO 58462
58436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58437: LD_ADDR_VAR 0 3
58441: PUSH
58442: LD_INT 11
58444: PUSH
58445: LD_INT 12
58447: PUSH
58448: LD_INT 13
58450: PUSH
58451: LD_INT 14
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
58460: GO 59037
58462: LD_INT 24
58464: DOUBLE
58465: EQUAL
58466: IFTRUE 58470
58468: GO 58496
58470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
58471: LD_ADDR_VAR 0 3
58475: PUSH
58476: LD_INT 11
58478: PUSH
58479: LD_INT 12
58481: PUSH
58482: LD_INT 13
58484: PUSH
58485: LD_INT 14
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: ST_TO_ADDR
58494: GO 59037
58496: LD_INT 30
58498: DOUBLE
58499: EQUAL
58500: IFTRUE 58504
58502: GO 58530
58504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
58505: LD_ADDR_VAR 0 3
58509: PUSH
58510: LD_INT 11
58512: PUSH
58513: LD_INT 12
58515: PUSH
58516: LD_INT 13
58518: PUSH
58519: LD_INT 14
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: ST_TO_ADDR
58528: GO 59037
58530: LD_INT 25
58532: DOUBLE
58533: EQUAL
58534: IFTRUE 58538
58536: GO 58556
58538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
58539: LD_ADDR_VAR 0 3
58543: PUSH
58544: LD_INT 13
58546: PUSH
58547: LD_INT 14
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: ST_TO_ADDR
58554: GO 59037
58556: LD_INT 27
58558: DOUBLE
58559: EQUAL
58560: IFTRUE 58564
58562: GO 58582
58564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
58565: LD_ADDR_VAR 0 3
58569: PUSH
58570: LD_INT 13
58572: PUSH
58573: LD_INT 14
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: ST_TO_ADDR
58580: GO 59037
58582: LD_INT 92
58584: DOUBLE
58585: EQUAL
58586: IFTRUE 58590
58588: GO 58616
58590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
58591: LD_ADDR_VAR 0 3
58595: PUSH
58596: LD_INT 11
58598: PUSH
58599: LD_INT 12
58601: PUSH
58602: LD_INT 13
58604: PUSH
58605: LD_INT 14
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: ST_TO_ADDR
58614: GO 59037
58616: LD_INT 28
58618: DOUBLE
58619: EQUAL
58620: IFTRUE 58624
58622: GO 58642
58624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
58625: LD_ADDR_VAR 0 3
58629: PUSH
58630: LD_INT 13
58632: PUSH
58633: LD_INT 14
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: ST_TO_ADDR
58640: GO 59037
58642: LD_INT 29
58644: DOUBLE
58645: EQUAL
58646: IFTRUE 58650
58648: GO 58668
58650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
58651: LD_ADDR_VAR 0 3
58655: PUSH
58656: LD_INT 13
58658: PUSH
58659: LD_INT 14
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: ST_TO_ADDR
58666: GO 59037
58668: LD_INT 31
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58676
58674: GO 58694
58676: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
58677: LD_ADDR_VAR 0 3
58681: PUSH
58682: LD_INT 13
58684: PUSH
58685: LD_INT 14
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: ST_TO_ADDR
58692: GO 59037
58694: LD_INT 26
58696: DOUBLE
58697: EQUAL
58698: IFTRUE 58702
58700: GO 58720
58702: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
58703: LD_ADDR_VAR 0 3
58707: PUSH
58708: LD_INT 13
58710: PUSH
58711: LD_INT 14
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: ST_TO_ADDR
58718: GO 59037
58720: LD_INT 42
58722: DOUBLE
58723: EQUAL
58724: IFTRUE 58728
58726: GO 58754
58728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
58729: LD_ADDR_VAR 0 3
58733: PUSH
58734: LD_INT 21
58736: PUSH
58737: LD_INT 22
58739: PUSH
58740: LD_INT 23
58742: PUSH
58743: LD_INT 24
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: ST_TO_ADDR
58752: GO 59037
58754: LD_INT 43
58756: DOUBLE
58757: EQUAL
58758: IFTRUE 58762
58760: GO 58788
58762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
58763: LD_ADDR_VAR 0 3
58767: PUSH
58768: LD_INT 21
58770: PUSH
58771: LD_INT 22
58773: PUSH
58774: LD_INT 23
58776: PUSH
58777: LD_INT 24
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: ST_TO_ADDR
58786: GO 59037
58788: LD_INT 44
58790: DOUBLE
58791: EQUAL
58792: IFTRUE 58796
58794: GO 58822
58796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
58797: LD_ADDR_VAR 0 3
58801: PUSH
58802: LD_INT 21
58804: PUSH
58805: LD_INT 22
58807: PUSH
58808: LD_INT 23
58810: PUSH
58811: LD_INT 24
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: ST_TO_ADDR
58820: GO 59037
58822: LD_INT 45
58824: DOUBLE
58825: EQUAL
58826: IFTRUE 58830
58828: GO 58856
58830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
58831: LD_ADDR_VAR 0 3
58835: PUSH
58836: LD_INT 21
58838: PUSH
58839: LD_INT 22
58841: PUSH
58842: LD_INT 23
58844: PUSH
58845: LD_INT 24
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: ST_TO_ADDR
58854: GO 59037
58856: LD_INT 49
58858: DOUBLE
58859: EQUAL
58860: IFTRUE 58864
58862: GO 58890
58864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
58865: LD_ADDR_VAR 0 3
58869: PUSH
58870: LD_INT 21
58872: PUSH
58873: LD_INT 22
58875: PUSH
58876: LD_INT 23
58878: PUSH
58879: LD_INT 24
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: ST_TO_ADDR
58888: GO 59037
58890: LD_INT 51
58892: DOUBLE
58893: EQUAL
58894: IFTRUE 58898
58896: GO 58924
58898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
58899: LD_ADDR_VAR 0 3
58903: PUSH
58904: LD_INT 21
58906: PUSH
58907: LD_INT 22
58909: PUSH
58910: LD_INT 23
58912: PUSH
58913: LD_INT 24
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: ST_TO_ADDR
58922: GO 59037
58924: LD_INT 52
58926: DOUBLE
58927: EQUAL
58928: IFTRUE 58932
58930: GO 58958
58932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
58933: LD_ADDR_VAR 0 3
58937: PUSH
58938: LD_INT 21
58940: PUSH
58941: LD_INT 22
58943: PUSH
58944: LD_INT 23
58946: PUSH
58947: LD_INT 24
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: ST_TO_ADDR
58956: GO 59037
58958: LD_INT 53
58960: DOUBLE
58961: EQUAL
58962: IFTRUE 58966
58964: GO 58984
58966: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
58967: LD_ADDR_VAR 0 3
58971: PUSH
58972: LD_INT 23
58974: PUSH
58975: LD_INT 24
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: ST_TO_ADDR
58982: GO 59037
58984: LD_INT 46
58986: DOUBLE
58987: EQUAL
58988: IFTRUE 58992
58990: GO 59010
58992: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
58993: LD_ADDR_VAR 0 3
58997: PUSH
58998: LD_INT 23
59000: PUSH
59001: LD_INT 24
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: ST_TO_ADDR
59008: GO 59037
59010: LD_INT 47
59012: DOUBLE
59013: EQUAL
59014: IFTRUE 59018
59016: GO 59036
59018: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
59019: LD_ADDR_VAR 0 3
59023: PUSH
59024: LD_INT 23
59026: PUSH
59027: LD_INT 24
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: ST_TO_ADDR
59034: GO 59037
59036: POP
// result := ( chassis in result ) ;
59037: LD_ADDR_VAR 0 3
59041: PUSH
59042: LD_VAR 0 1
59046: PUSH
59047: LD_VAR 0 3
59051: IN
59052: ST_TO_ADDR
// end ;
59053: LD_VAR 0 3
59057: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
59058: LD_INT 0
59060: PPUSH
59061: PPUSH
59062: PPUSH
59063: PPUSH
59064: PPUSH
59065: PPUSH
59066: PPUSH
// result := array ;
59067: LD_ADDR_VAR 0 5
59071: PUSH
59072: LD_VAR 0 1
59076: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
59077: LD_VAR 0 1
59081: NOT
59082: PUSH
59083: LD_VAR 0 2
59087: NOT
59088: OR
59089: PUSH
59090: LD_VAR 0 3
59094: NOT
59095: OR
59096: PUSH
59097: LD_VAR 0 2
59101: PUSH
59102: LD_VAR 0 1
59106: GREATER
59107: OR
59108: PUSH
59109: LD_VAR 0 3
59113: PUSH
59114: LD_VAR 0 1
59118: GREATER
59119: OR
59120: IFFALSE 59124
// exit ;
59122: GO 59420
// if direction then
59124: LD_VAR 0 4
59128: IFFALSE 59192
// begin d := 1 ;
59130: LD_ADDR_VAR 0 9
59134: PUSH
59135: LD_INT 1
59137: ST_TO_ADDR
// if i_from > i_to then
59138: LD_VAR 0 2
59142: PUSH
59143: LD_VAR 0 3
59147: GREATER
59148: IFFALSE 59174
// length := ( array - i_from ) + i_to else
59150: LD_ADDR_VAR 0 11
59154: PUSH
59155: LD_VAR 0 1
59159: PUSH
59160: LD_VAR 0 2
59164: MINUS
59165: PUSH
59166: LD_VAR 0 3
59170: PLUS
59171: ST_TO_ADDR
59172: GO 59190
// length := i_to - i_from ;
59174: LD_ADDR_VAR 0 11
59178: PUSH
59179: LD_VAR 0 3
59183: PUSH
59184: LD_VAR 0 2
59188: MINUS
59189: ST_TO_ADDR
// end else
59190: GO 59253
// begin d := - 1 ;
59192: LD_ADDR_VAR 0 9
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: ST_TO_ADDR
// if i_from > i_to then
59201: LD_VAR 0 2
59205: PUSH
59206: LD_VAR 0 3
59210: GREATER
59211: IFFALSE 59231
// length := i_from - i_to else
59213: LD_ADDR_VAR 0 11
59217: PUSH
59218: LD_VAR 0 2
59222: PUSH
59223: LD_VAR 0 3
59227: MINUS
59228: ST_TO_ADDR
59229: GO 59253
// length := ( array - i_to ) + i_from ;
59231: LD_ADDR_VAR 0 11
59235: PUSH
59236: LD_VAR 0 1
59240: PUSH
59241: LD_VAR 0 3
59245: MINUS
59246: PUSH
59247: LD_VAR 0 2
59251: PLUS
59252: ST_TO_ADDR
// end ; if not length then
59253: LD_VAR 0 11
59257: NOT
59258: IFFALSE 59262
// exit ;
59260: GO 59420
// tmp := array ;
59262: LD_ADDR_VAR 0 10
59266: PUSH
59267: LD_VAR 0 1
59271: ST_TO_ADDR
// for i = 1 to length do
59272: LD_ADDR_VAR 0 6
59276: PUSH
59277: DOUBLE
59278: LD_INT 1
59280: DEC
59281: ST_TO_ADDR
59282: LD_VAR 0 11
59286: PUSH
59287: FOR_TO
59288: IFFALSE 59408
// begin for j = 1 to array do
59290: LD_ADDR_VAR 0 7
59294: PUSH
59295: DOUBLE
59296: LD_INT 1
59298: DEC
59299: ST_TO_ADDR
59300: LD_VAR 0 1
59304: PUSH
59305: FOR_TO
59306: IFFALSE 59394
// begin k := j + d ;
59308: LD_ADDR_VAR 0 8
59312: PUSH
59313: LD_VAR 0 7
59317: PUSH
59318: LD_VAR 0 9
59322: PLUS
59323: ST_TO_ADDR
// if k > array then
59324: LD_VAR 0 8
59328: PUSH
59329: LD_VAR 0 1
59333: GREATER
59334: IFFALSE 59344
// k := 1 ;
59336: LD_ADDR_VAR 0 8
59340: PUSH
59341: LD_INT 1
59343: ST_TO_ADDR
// if not k then
59344: LD_VAR 0 8
59348: NOT
59349: IFFALSE 59361
// k := array ;
59351: LD_ADDR_VAR 0 8
59355: PUSH
59356: LD_VAR 0 1
59360: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59361: LD_ADDR_VAR 0 10
59365: PUSH
59366: LD_VAR 0 10
59370: PPUSH
59371: LD_VAR 0 8
59375: PPUSH
59376: LD_VAR 0 1
59380: PUSH
59381: LD_VAR 0 7
59385: ARRAY
59386: PPUSH
59387: CALL_OW 1
59391: ST_TO_ADDR
// end ;
59392: GO 59305
59394: POP
59395: POP
// array := tmp ;
59396: LD_ADDR_VAR 0 1
59400: PUSH
59401: LD_VAR 0 10
59405: ST_TO_ADDR
// end ;
59406: GO 59287
59408: POP
59409: POP
// result := array ;
59410: LD_ADDR_VAR 0 5
59414: PUSH
59415: LD_VAR 0 1
59419: ST_TO_ADDR
// end ;
59420: LD_VAR 0 5
59424: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59425: LD_INT 0
59427: PPUSH
59428: PPUSH
// result := 0 ;
59429: LD_ADDR_VAR 0 3
59433: PUSH
59434: LD_INT 0
59436: ST_TO_ADDR
// if not array or not value in array then
59437: LD_VAR 0 1
59441: NOT
59442: PUSH
59443: LD_VAR 0 2
59447: PUSH
59448: LD_VAR 0 1
59452: IN
59453: NOT
59454: OR
59455: IFFALSE 59459
// exit ;
59457: GO 59513
// for i = 1 to array do
59459: LD_ADDR_VAR 0 4
59463: PUSH
59464: DOUBLE
59465: LD_INT 1
59467: DEC
59468: ST_TO_ADDR
59469: LD_VAR 0 1
59473: PUSH
59474: FOR_TO
59475: IFFALSE 59511
// if value = array [ i ] then
59477: LD_VAR 0 2
59481: PUSH
59482: LD_VAR 0 1
59486: PUSH
59487: LD_VAR 0 4
59491: ARRAY
59492: EQUAL
59493: IFFALSE 59509
// begin result := i ;
59495: LD_ADDR_VAR 0 3
59499: PUSH
59500: LD_VAR 0 4
59504: ST_TO_ADDR
// exit ;
59505: POP
59506: POP
59507: GO 59513
// end ;
59509: GO 59474
59511: POP
59512: POP
// end ;
59513: LD_VAR 0 3
59517: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
59518: LD_INT 0
59520: PPUSH
// vc_chassis := chassis ;
59521: LD_ADDR_OWVAR 37
59525: PUSH
59526: LD_VAR 0 1
59530: ST_TO_ADDR
// vc_engine := engine ;
59531: LD_ADDR_OWVAR 39
59535: PUSH
59536: LD_VAR 0 2
59540: ST_TO_ADDR
// vc_control := control ;
59541: LD_ADDR_OWVAR 38
59545: PUSH
59546: LD_VAR 0 3
59550: ST_TO_ADDR
// vc_weapon := weapon ;
59551: LD_ADDR_OWVAR 40
59555: PUSH
59556: LD_VAR 0 4
59560: ST_TO_ADDR
// vc_fuel_battery := fuel ;
59561: LD_ADDR_OWVAR 41
59565: PUSH
59566: LD_VAR 0 5
59570: ST_TO_ADDR
// end ;
59571: LD_VAR 0 6
59575: RET
// export function WantPlant ( unit ) ; var task ; begin
59576: LD_INT 0
59578: PPUSH
59579: PPUSH
// result := false ;
59580: LD_ADDR_VAR 0 2
59584: PUSH
59585: LD_INT 0
59587: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
59588: LD_ADDR_VAR 0 3
59592: PUSH
59593: LD_VAR 0 1
59597: PPUSH
59598: CALL_OW 437
59602: ST_TO_ADDR
// if task then
59603: LD_VAR 0 3
59607: IFFALSE 59635
// if task [ 1 ] [ 1 ] = p then
59609: LD_VAR 0 3
59613: PUSH
59614: LD_INT 1
59616: ARRAY
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: PUSH
59622: LD_STRING p
59624: EQUAL
59625: IFFALSE 59635
// result := true ;
59627: LD_ADDR_VAR 0 2
59631: PUSH
59632: LD_INT 1
59634: ST_TO_ADDR
// end ;
59635: LD_VAR 0 2
59639: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
59640: LD_INT 0
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
// if pos < 1 then
59646: LD_VAR 0 2
59650: PUSH
59651: LD_INT 1
59653: LESS
59654: IFFALSE 59658
// exit ;
59656: GO 59961
// if pos = 1 then
59658: LD_VAR 0 2
59662: PUSH
59663: LD_INT 1
59665: EQUAL
59666: IFFALSE 59699
// result := Replace ( arr , pos [ 1 ] , value ) else
59668: LD_ADDR_VAR 0 4
59672: PUSH
59673: LD_VAR 0 1
59677: PPUSH
59678: LD_VAR 0 2
59682: PUSH
59683: LD_INT 1
59685: ARRAY
59686: PPUSH
59687: LD_VAR 0 3
59691: PPUSH
59692: CALL_OW 1
59696: ST_TO_ADDR
59697: GO 59961
// begin tmp := arr ;
59699: LD_ADDR_VAR 0 6
59703: PUSH
59704: LD_VAR 0 1
59708: ST_TO_ADDR
// s_arr := [ tmp ] ;
59709: LD_ADDR_VAR 0 7
59713: PUSH
59714: LD_VAR 0 6
59718: PUSH
59719: EMPTY
59720: LIST
59721: ST_TO_ADDR
// for i = 1 to pos - 1 do
59722: LD_ADDR_VAR 0 5
59726: PUSH
59727: DOUBLE
59728: LD_INT 1
59730: DEC
59731: ST_TO_ADDR
59732: LD_VAR 0 2
59736: PUSH
59737: LD_INT 1
59739: MINUS
59740: PUSH
59741: FOR_TO
59742: IFFALSE 59787
// begin tmp := tmp [ pos [ i ] ] ;
59744: LD_ADDR_VAR 0 6
59748: PUSH
59749: LD_VAR 0 6
59753: PUSH
59754: LD_VAR 0 2
59758: PUSH
59759: LD_VAR 0 5
59763: ARRAY
59764: ARRAY
59765: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
59766: LD_ADDR_VAR 0 7
59770: PUSH
59771: LD_VAR 0 7
59775: PUSH
59776: LD_VAR 0 6
59780: PUSH
59781: EMPTY
59782: LIST
59783: ADD
59784: ST_TO_ADDR
// end ;
59785: GO 59741
59787: POP
59788: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
59789: LD_ADDR_VAR 0 6
59793: PUSH
59794: LD_VAR 0 6
59798: PPUSH
59799: LD_VAR 0 2
59803: PUSH
59804: LD_VAR 0 2
59808: ARRAY
59809: PPUSH
59810: LD_VAR 0 3
59814: PPUSH
59815: CALL_OW 1
59819: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
59820: LD_ADDR_VAR 0 7
59824: PUSH
59825: LD_VAR 0 7
59829: PPUSH
59830: LD_VAR 0 7
59834: PPUSH
59835: LD_VAR 0 6
59839: PPUSH
59840: CALL_OW 1
59844: ST_TO_ADDR
// for i = s_arr downto 2 do
59845: LD_ADDR_VAR 0 5
59849: PUSH
59850: DOUBLE
59851: LD_VAR 0 7
59855: INC
59856: ST_TO_ADDR
59857: LD_INT 2
59859: PUSH
59860: FOR_DOWNTO
59861: IFFALSE 59945
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
59863: LD_ADDR_VAR 0 6
59867: PUSH
59868: LD_VAR 0 7
59872: PUSH
59873: LD_VAR 0 5
59877: PUSH
59878: LD_INT 1
59880: MINUS
59881: ARRAY
59882: PPUSH
59883: LD_VAR 0 2
59887: PUSH
59888: LD_VAR 0 5
59892: PUSH
59893: LD_INT 1
59895: MINUS
59896: ARRAY
59897: PPUSH
59898: LD_VAR 0 7
59902: PUSH
59903: LD_VAR 0 5
59907: ARRAY
59908: PPUSH
59909: CALL_OW 1
59913: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
59914: LD_ADDR_VAR 0 7
59918: PUSH
59919: LD_VAR 0 7
59923: PPUSH
59924: LD_VAR 0 5
59928: PUSH
59929: LD_INT 1
59931: MINUS
59932: PPUSH
59933: LD_VAR 0 6
59937: PPUSH
59938: CALL_OW 1
59942: ST_TO_ADDR
// end ;
59943: GO 59860
59945: POP
59946: POP
// result := s_arr [ 1 ] ;
59947: LD_ADDR_VAR 0 4
59951: PUSH
59952: LD_VAR 0 7
59956: PUSH
59957: LD_INT 1
59959: ARRAY
59960: ST_TO_ADDR
// end ; end ;
59961: LD_VAR 0 4
59965: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
59966: LD_INT 0
59968: PPUSH
59969: PPUSH
// if not list then
59970: LD_VAR 0 1
59974: NOT
59975: IFFALSE 59979
// exit ;
59977: GO 60070
// i := list [ pos1 ] ;
59979: LD_ADDR_VAR 0 5
59983: PUSH
59984: LD_VAR 0 1
59988: PUSH
59989: LD_VAR 0 2
59993: ARRAY
59994: ST_TO_ADDR
// if not i then
59995: LD_VAR 0 5
59999: NOT
60000: IFFALSE 60004
// exit ;
60002: GO 60070
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
60004: LD_ADDR_VAR 0 1
60008: PUSH
60009: LD_VAR 0 1
60013: PPUSH
60014: LD_VAR 0 2
60018: PPUSH
60019: LD_VAR 0 1
60023: PUSH
60024: LD_VAR 0 3
60028: ARRAY
60029: PPUSH
60030: CALL_OW 1
60034: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
60035: LD_ADDR_VAR 0 1
60039: PUSH
60040: LD_VAR 0 1
60044: PPUSH
60045: LD_VAR 0 3
60049: PPUSH
60050: LD_VAR 0 5
60054: PPUSH
60055: CALL_OW 1
60059: ST_TO_ADDR
// result := list ;
60060: LD_ADDR_VAR 0 4
60064: PUSH
60065: LD_VAR 0 1
60069: ST_TO_ADDR
// end ;
60070: LD_VAR 0 4
60074: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
60075: LD_INT 0
60077: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
60078: LD_ADDR_VAR 0 5
60082: PUSH
60083: LD_VAR 0 1
60087: PPUSH
60088: CALL_OW 250
60092: PPUSH
60093: LD_VAR 0 1
60097: PPUSH
60098: CALL_OW 251
60102: PPUSH
60103: LD_VAR 0 2
60107: PPUSH
60108: LD_VAR 0 3
60112: PPUSH
60113: LD_VAR 0 4
60117: PPUSH
60118: CALL 60496 0 5
60122: ST_TO_ADDR
// end ;
60123: LD_VAR 0 5
60127: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
60128: LD_INT 0
60130: PPUSH
60131: PPUSH
60132: PPUSH
60133: PPUSH
// if not list or not unit then
60134: LD_VAR 0 2
60138: NOT
60139: PUSH
60140: LD_VAR 0 1
60144: NOT
60145: OR
60146: IFFALSE 60150
// exit ;
60148: GO 60491
// result := [ ] ;
60150: LD_ADDR_VAR 0 5
60154: PUSH
60155: EMPTY
60156: ST_TO_ADDR
// for i in list do
60157: LD_ADDR_VAR 0 6
60161: PUSH
60162: LD_VAR 0 2
60166: PUSH
60167: FOR_IN
60168: IFFALSE 60386
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60170: LD_ADDR_VAR 0 8
60174: PUSH
60175: LD_VAR 0 1
60179: PPUSH
60180: LD_VAR 0 6
60184: PUSH
60185: LD_INT 1
60187: ARRAY
60188: PPUSH
60189: LD_VAR 0 6
60193: PUSH
60194: LD_INT 2
60196: ARRAY
60197: PPUSH
60198: CALL_OW 297
60202: ST_TO_ADDR
// if not Count ( result ) then
60203: LD_VAR 0 5
60207: PPUSH
60208: CALL 56780 0 1
60212: NOT
60213: IFFALSE 60246
// begin result := Join ( result , [ i , tmp ] ) ;
60215: LD_ADDR_VAR 0 5
60219: PUSH
60220: LD_VAR 0 5
60224: PPUSH
60225: LD_VAR 0 6
60229: PUSH
60230: LD_VAR 0 8
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PPUSH
60239: CALL 92380 0 2
60243: ST_TO_ADDR
// continue ;
60244: GO 60167
// end ; if result [ result ] [ 2 ] <= tmp then
60246: LD_VAR 0 5
60250: PUSH
60251: LD_VAR 0 5
60255: ARRAY
60256: PUSH
60257: LD_INT 2
60259: ARRAY
60260: PUSH
60261: LD_VAR 0 8
60265: LESSEQUAL
60266: IFFALSE 60299
// result := Join ( result , [ i , tmp ] ) else
60268: LD_ADDR_VAR 0 5
60272: PUSH
60273: LD_VAR 0 5
60277: PPUSH
60278: LD_VAR 0 6
60282: PUSH
60283: LD_VAR 0 8
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PPUSH
60292: CALL 92380 0 2
60296: ST_TO_ADDR
60297: GO 60384
// begin for j := 1 to Count ( result ) do
60299: LD_ADDR_VAR 0 7
60303: PUSH
60304: DOUBLE
60305: LD_INT 1
60307: DEC
60308: ST_TO_ADDR
60309: LD_VAR 0 5
60313: PPUSH
60314: CALL 56780 0 1
60318: PUSH
60319: FOR_TO
60320: IFFALSE 60382
// begin if tmp < result [ j ] [ 2 ] then
60322: LD_VAR 0 8
60326: PUSH
60327: LD_VAR 0 5
60331: PUSH
60332: LD_VAR 0 7
60336: ARRAY
60337: PUSH
60338: LD_INT 2
60340: ARRAY
60341: LESS
60342: IFFALSE 60380
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60344: LD_ADDR_VAR 0 5
60348: PUSH
60349: LD_VAR 0 5
60353: PPUSH
60354: LD_VAR 0 7
60358: PPUSH
60359: LD_VAR 0 6
60363: PUSH
60364: LD_VAR 0 8
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PPUSH
60373: CALL_OW 2
60377: ST_TO_ADDR
// break ;
60378: GO 60382
// end ; end ;
60380: GO 60319
60382: POP
60383: POP
// end ; end ;
60384: GO 60167
60386: POP
60387: POP
// if result and not asc then
60388: LD_VAR 0 5
60392: PUSH
60393: LD_VAR 0 3
60397: NOT
60398: AND
60399: IFFALSE 60416
// result := ReverseArray ( result ) ;
60401: LD_ADDR_VAR 0 5
60405: PUSH
60406: LD_VAR 0 5
60410: PPUSH
60411: CALL 87656 0 1
60415: ST_TO_ADDR
// tmp := [ ] ;
60416: LD_ADDR_VAR 0 8
60420: PUSH
60421: EMPTY
60422: ST_TO_ADDR
// if mode then
60423: LD_VAR 0 4
60427: IFFALSE 60491
// begin for i := 1 to result do
60429: LD_ADDR_VAR 0 6
60433: PUSH
60434: DOUBLE
60435: LD_INT 1
60437: DEC
60438: ST_TO_ADDR
60439: LD_VAR 0 5
60443: PUSH
60444: FOR_TO
60445: IFFALSE 60479
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60447: LD_ADDR_VAR 0 8
60451: PUSH
60452: LD_VAR 0 8
60456: PPUSH
60457: LD_VAR 0 5
60461: PUSH
60462: LD_VAR 0 6
60466: ARRAY
60467: PUSH
60468: LD_INT 1
60470: ARRAY
60471: PPUSH
60472: CALL 92380 0 2
60476: ST_TO_ADDR
60477: GO 60444
60479: POP
60480: POP
// result := tmp ;
60481: LD_ADDR_VAR 0 5
60485: PUSH
60486: LD_VAR 0 8
60490: ST_TO_ADDR
// end ; end ;
60491: LD_VAR 0 5
60495: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
60496: LD_INT 0
60498: PPUSH
60499: PPUSH
60500: PPUSH
60501: PPUSH
// if not list then
60502: LD_VAR 0 3
60506: NOT
60507: IFFALSE 60511
// exit ;
60509: GO 60899
// result := [ ] ;
60511: LD_ADDR_VAR 0 6
60515: PUSH
60516: EMPTY
60517: ST_TO_ADDR
// for i in list do
60518: LD_ADDR_VAR 0 7
60522: PUSH
60523: LD_VAR 0 3
60527: PUSH
60528: FOR_IN
60529: IFFALSE 60731
// begin tmp := GetDistUnitXY ( i , x , y ) ;
60531: LD_ADDR_VAR 0 9
60535: PUSH
60536: LD_VAR 0 7
60540: PPUSH
60541: LD_VAR 0 1
60545: PPUSH
60546: LD_VAR 0 2
60550: PPUSH
60551: CALL_OW 297
60555: ST_TO_ADDR
// if not result then
60556: LD_VAR 0 6
60560: NOT
60561: IFFALSE 60587
// result := [ [ i , tmp ] ] else
60563: LD_ADDR_VAR 0 6
60567: PUSH
60568: LD_VAR 0 7
60572: PUSH
60573: LD_VAR 0 9
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: EMPTY
60583: LIST
60584: ST_TO_ADDR
60585: GO 60729
// begin if result [ result ] [ 2 ] < tmp then
60587: LD_VAR 0 6
60591: PUSH
60592: LD_VAR 0 6
60596: ARRAY
60597: PUSH
60598: LD_INT 2
60600: ARRAY
60601: PUSH
60602: LD_VAR 0 9
60606: LESS
60607: IFFALSE 60649
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
60609: LD_ADDR_VAR 0 6
60613: PUSH
60614: LD_VAR 0 6
60618: PPUSH
60619: LD_VAR 0 6
60623: PUSH
60624: LD_INT 1
60626: PLUS
60627: PPUSH
60628: LD_VAR 0 7
60632: PUSH
60633: LD_VAR 0 9
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PPUSH
60642: CALL_OW 2
60646: ST_TO_ADDR
60647: GO 60729
// for j = 1 to result do
60649: LD_ADDR_VAR 0 8
60653: PUSH
60654: DOUBLE
60655: LD_INT 1
60657: DEC
60658: ST_TO_ADDR
60659: LD_VAR 0 6
60663: PUSH
60664: FOR_TO
60665: IFFALSE 60727
// begin if tmp < result [ j ] [ 2 ] then
60667: LD_VAR 0 9
60671: PUSH
60672: LD_VAR 0 6
60676: PUSH
60677: LD_VAR 0 8
60681: ARRAY
60682: PUSH
60683: LD_INT 2
60685: ARRAY
60686: LESS
60687: IFFALSE 60725
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60689: LD_ADDR_VAR 0 6
60693: PUSH
60694: LD_VAR 0 6
60698: PPUSH
60699: LD_VAR 0 8
60703: PPUSH
60704: LD_VAR 0 7
60708: PUSH
60709: LD_VAR 0 9
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PPUSH
60718: CALL_OW 2
60722: ST_TO_ADDR
// break ;
60723: GO 60727
// end ; end ;
60725: GO 60664
60727: POP
60728: POP
// end ; end ;
60729: GO 60528
60731: POP
60732: POP
// if result and not asc then
60733: LD_VAR 0 6
60737: PUSH
60738: LD_VAR 0 4
60742: NOT
60743: AND
60744: IFFALSE 60819
// begin tmp := result ;
60746: LD_ADDR_VAR 0 9
60750: PUSH
60751: LD_VAR 0 6
60755: ST_TO_ADDR
// for i = tmp downto 1 do
60756: LD_ADDR_VAR 0 7
60760: PUSH
60761: DOUBLE
60762: LD_VAR 0 9
60766: INC
60767: ST_TO_ADDR
60768: LD_INT 1
60770: PUSH
60771: FOR_DOWNTO
60772: IFFALSE 60817
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
60774: LD_ADDR_VAR 0 6
60778: PUSH
60779: LD_VAR 0 6
60783: PPUSH
60784: LD_VAR 0 9
60788: PUSH
60789: LD_VAR 0 7
60793: MINUS
60794: PUSH
60795: LD_INT 1
60797: PLUS
60798: PPUSH
60799: LD_VAR 0 9
60803: PUSH
60804: LD_VAR 0 7
60808: ARRAY
60809: PPUSH
60810: CALL_OW 1
60814: ST_TO_ADDR
60815: GO 60771
60817: POP
60818: POP
// end ; tmp := [ ] ;
60819: LD_ADDR_VAR 0 9
60823: PUSH
60824: EMPTY
60825: ST_TO_ADDR
// if mode then
60826: LD_VAR 0 5
60830: IFFALSE 60899
// begin for i = 1 to result do
60832: LD_ADDR_VAR 0 7
60836: PUSH
60837: DOUBLE
60838: LD_INT 1
60840: DEC
60841: ST_TO_ADDR
60842: LD_VAR 0 6
60846: PUSH
60847: FOR_TO
60848: IFFALSE 60887
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
60850: LD_ADDR_VAR 0 9
60854: PUSH
60855: LD_VAR 0 9
60859: PPUSH
60860: LD_VAR 0 7
60864: PPUSH
60865: LD_VAR 0 6
60869: PUSH
60870: LD_VAR 0 7
60874: ARRAY
60875: PUSH
60876: LD_INT 1
60878: ARRAY
60879: PPUSH
60880: CALL_OW 1
60884: ST_TO_ADDR
60885: GO 60847
60887: POP
60888: POP
// result := tmp ;
60889: LD_ADDR_VAR 0 6
60893: PUSH
60894: LD_VAR 0 9
60898: ST_TO_ADDR
// end ; end ;
60899: LD_VAR 0 6
60903: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
60904: LD_INT 0
60906: PPUSH
60907: PPUSH
60908: PPUSH
60909: PPUSH
60910: PPUSH
60911: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
60912: LD_ADDR_VAR 0 5
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// if not x or not y then
60934: LD_VAR 0 2
60938: NOT
60939: PUSH
60940: LD_VAR 0 3
60944: NOT
60945: OR
60946: IFFALSE 60950
// exit ;
60948: GO 62600
// if not range then
60950: LD_VAR 0 4
60954: NOT
60955: IFFALSE 60965
// range := 10 ;
60957: LD_ADDR_VAR 0 4
60961: PUSH
60962: LD_INT 10
60964: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60965: LD_ADDR_VAR 0 8
60969: PUSH
60970: LD_INT 81
60972: PUSH
60973: LD_VAR 0 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 92
60984: PUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_VAR 0 3
60994: PUSH
60995: LD_VAR 0 4
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: LD_INT 21
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: PPUSH
61028: CALL_OW 69
61032: ST_TO_ADDR
// if not tmp then
61033: LD_VAR 0 8
61037: NOT
61038: IFFALSE 61042
// exit ;
61040: GO 62600
// for i in tmp do
61042: LD_ADDR_VAR 0 6
61046: PUSH
61047: LD_VAR 0 8
61051: PUSH
61052: FOR_IN
61053: IFFALSE 62575
// begin points := [ 0 , 0 , 0 ] ;
61055: LD_ADDR_VAR 0 9
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: LIST
61073: ST_TO_ADDR
// bpoints := 1 ;
61074: LD_ADDR_VAR 0 10
61078: PUSH
61079: LD_INT 1
61081: ST_TO_ADDR
// case GetType ( i ) of unit_human :
61082: LD_VAR 0 6
61086: PPUSH
61087: CALL_OW 247
61091: PUSH
61092: LD_INT 1
61094: DOUBLE
61095: EQUAL
61096: IFTRUE 61100
61098: GO 61678
61100: POP
// begin if GetClass ( i ) = 1 then
61101: LD_VAR 0 6
61105: PPUSH
61106: CALL_OW 257
61110: PUSH
61111: LD_INT 1
61113: EQUAL
61114: IFFALSE 61135
// points := [ 10 , 5 , 3 ] ;
61116: LD_ADDR_VAR 0 9
61120: PUSH
61121: LD_INT 10
61123: PUSH
61124: LD_INT 5
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: LIST
61134: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
61135: LD_VAR 0 6
61139: PPUSH
61140: CALL_OW 257
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: IN
61159: IFFALSE 61180
// points := [ 3 , 2 , 1 ] ;
61161: LD_ADDR_VAR 0 9
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61180: LD_VAR 0 6
61184: PPUSH
61185: CALL_OW 257
61189: PUSH
61190: LD_INT 5
61192: EQUAL
61193: IFFALSE 61214
// points := [ 130 , 5 , 2 ] ;
61195: LD_ADDR_VAR 0 9
61199: PUSH
61200: LD_INT 130
61202: PUSH
61203: LD_INT 5
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61214: LD_VAR 0 6
61218: PPUSH
61219: CALL_OW 257
61223: PUSH
61224: LD_INT 8
61226: EQUAL
61227: IFFALSE 61248
// points := [ 35 , 35 , 30 ] ;
61229: LD_ADDR_VAR 0 9
61233: PUSH
61234: LD_INT 35
61236: PUSH
61237: LD_INT 35
61239: PUSH
61240: LD_INT 30
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61248: LD_VAR 0 6
61252: PPUSH
61253: CALL_OW 257
61257: PUSH
61258: LD_INT 9
61260: EQUAL
61261: IFFALSE 61282
// points := [ 20 , 55 , 40 ] ;
61263: LD_ADDR_VAR 0 9
61267: PUSH
61268: LD_INT 20
61270: PUSH
61271: LD_INT 55
61273: PUSH
61274: LD_INT 40
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: LIST
61281: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61282: LD_VAR 0 6
61286: PPUSH
61287: CALL_OW 257
61291: PUSH
61292: LD_INT 12
61294: PUSH
61295: LD_INT 16
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: IN
61302: IFFALSE 61323
// points := [ 5 , 3 , 2 ] ;
61304: LD_ADDR_VAR 0 9
61308: PUSH
61309: LD_INT 5
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61323: LD_VAR 0 6
61327: PPUSH
61328: CALL_OW 257
61332: PUSH
61333: LD_INT 17
61335: EQUAL
61336: IFFALSE 61357
// points := [ 100 , 50 , 75 ] ;
61338: LD_ADDR_VAR 0 9
61342: PUSH
61343: LD_INT 100
61345: PUSH
61346: LD_INT 50
61348: PUSH
61349: LD_INT 75
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61357: LD_VAR 0 6
61361: PPUSH
61362: CALL_OW 257
61366: PUSH
61367: LD_INT 15
61369: EQUAL
61370: IFFALSE 61391
// points := [ 10 , 5 , 3 ] ;
61372: LD_ADDR_VAR 0 9
61376: PUSH
61377: LD_INT 10
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61391: LD_VAR 0 6
61395: PPUSH
61396: CALL_OW 257
61400: PUSH
61401: LD_INT 14
61403: EQUAL
61404: IFFALSE 61425
// points := [ 10 , 0 , 0 ] ;
61406: LD_ADDR_VAR 0 9
61410: PUSH
61411: LD_INT 10
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61425: LD_VAR 0 6
61429: PPUSH
61430: CALL_OW 257
61434: PUSH
61435: LD_INT 11
61437: EQUAL
61438: IFFALSE 61459
// points := [ 30 , 10 , 5 ] ;
61440: LD_ADDR_VAR 0 9
61444: PUSH
61445: LD_INT 30
61447: PUSH
61448: LD_INT 10
61450: PUSH
61451: LD_INT 5
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61459: LD_VAR 0 1
61463: PPUSH
61464: LD_INT 5
61466: PPUSH
61467: CALL_OW 321
61471: PUSH
61472: LD_INT 2
61474: EQUAL
61475: IFFALSE 61492
// bpoints := bpoints * 1.8 ;
61477: LD_ADDR_VAR 0 10
61481: PUSH
61482: LD_VAR 0 10
61486: PUSH
61487: LD_REAL  1.80000000000000E+0000
61490: MUL
61491: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
61492: LD_VAR 0 6
61496: PPUSH
61497: CALL_OW 257
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: LD_INT 3
61510: PUSH
61511: LD_INT 4
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: IN
61520: PUSH
61521: LD_VAR 0 1
61525: PPUSH
61526: LD_INT 51
61528: PPUSH
61529: CALL_OW 321
61533: PUSH
61534: LD_INT 2
61536: EQUAL
61537: AND
61538: IFFALSE 61555
// bpoints := bpoints * 1.2 ;
61540: LD_ADDR_VAR 0 10
61544: PUSH
61545: LD_VAR 0 10
61549: PUSH
61550: LD_REAL  1.20000000000000E+0000
61553: MUL
61554: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
61555: LD_VAR 0 6
61559: PPUSH
61560: CALL_OW 257
61564: PUSH
61565: LD_INT 5
61567: PUSH
61568: LD_INT 7
61570: PUSH
61571: LD_INT 9
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: IN
61579: PUSH
61580: LD_VAR 0 1
61584: PPUSH
61585: LD_INT 52
61587: PPUSH
61588: CALL_OW 321
61592: PUSH
61593: LD_INT 2
61595: EQUAL
61596: AND
61597: IFFALSE 61614
// bpoints := bpoints * 1.5 ;
61599: LD_ADDR_VAR 0 10
61603: PUSH
61604: LD_VAR 0 10
61608: PUSH
61609: LD_REAL  1.50000000000000E+0000
61612: MUL
61613: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
61614: LD_VAR 0 1
61618: PPUSH
61619: LD_INT 66
61621: PPUSH
61622: CALL_OW 321
61626: PUSH
61627: LD_INT 2
61629: EQUAL
61630: IFFALSE 61647
// bpoints := bpoints * 1.1 ;
61632: LD_ADDR_VAR 0 10
61636: PUSH
61637: LD_VAR 0 10
61641: PUSH
61642: LD_REAL  1.10000000000000E+0000
61645: MUL
61646: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
61647: LD_ADDR_VAR 0 10
61651: PUSH
61652: LD_VAR 0 10
61656: PUSH
61657: LD_VAR 0 6
61661: PPUSH
61662: LD_INT 1
61664: PPUSH
61665: CALL_OW 259
61669: PUSH
61670: LD_REAL  1.15000000000000E+0000
61673: MUL
61674: MUL
61675: ST_TO_ADDR
// end ; unit_vehicle :
61676: GO 62504
61678: LD_INT 2
61680: DOUBLE
61681: EQUAL
61682: IFTRUE 61686
61684: GO 62492
61686: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
61687: LD_VAR 0 6
61691: PPUSH
61692: CALL_OW 264
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: LD_INT 42
61702: PUSH
61703: LD_INT 24
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: IN
61711: IFFALSE 61732
// points := [ 25 , 5 , 3 ] ;
61713: LD_ADDR_VAR 0 9
61717: PUSH
61718: LD_INT 25
61720: PUSH
61721: LD_INT 5
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
61732: LD_VAR 0 6
61736: PPUSH
61737: CALL_OW 264
61741: PUSH
61742: LD_INT 4
61744: PUSH
61745: LD_INT 43
61747: PUSH
61748: LD_INT 25
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: LIST
61755: IN
61756: IFFALSE 61777
// points := [ 40 , 15 , 5 ] ;
61758: LD_ADDR_VAR 0 9
61762: PUSH
61763: LD_INT 40
61765: PUSH
61766: LD_INT 15
61768: PUSH
61769: LD_INT 5
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
61777: LD_VAR 0 6
61781: PPUSH
61782: CALL_OW 264
61786: PUSH
61787: LD_INT 3
61789: PUSH
61790: LD_INT 23
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: IN
61797: IFFALSE 61818
// points := [ 7 , 25 , 8 ] ;
61799: LD_ADDR_VAR 0 9
61803: PUSH
61804: LD_INT 7
61806: PUSH
61807: LD_INT 25
61809: PUSH
61810: LD_INT 8
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
61818: LD_VAR 0 6
61822: PPUSH
61823: CALL_OW 264
61827: PUSH
61828: LD_INT 5
61830: PUSH
61831: LD_INT 27
61833: PUSH
61834: LD_INT 44
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: IN
61842: IFFALSE 61863
// points := [ 14 , 50 , 16 ] ;
61844: LD_ADDR_VAR 0 9
61848: PUSH
61849: LD_INT 14
61851: PUSH
61852: LD_INT 50
61854: PUSH
61855: LD_INT 16
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
61863: LD_VAR 0 6
61867: PPUSH
61868: CALL_OW 264
61872: PUSH
61873: LD_INT 6
61875: PUSH
61876: LD_INT 46
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: IN
61883: IFFALSE 61904
// points := [ 32 , 120 , 70 ] ;
61885: LD_ADDR_VAR 0 9
61889: PUSH
61890: LD_INT 32
61892: PUSH
61893: LD_INT 120
61895: PUSH
61896: LD_INT 70
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: LIST
61903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
61904: LD_VAR 0 6
61908: PPUSH
61909: CALL_OW 264
61913: PUSH
61914: LD_INT 7
61916: PUSH
61917: LD_INT 28
61919: PUSH
61920: LD_INT 45
61922: PUSH
61923: LD_INT 92
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: IN
61932: IFFALSE 61953
// points := [ 35 , 20 , 45 ] ;
61934: LD_ADDR_VAR 0 9
61938: PUSH
61939: LD_INT 35
61941: PUSH
61942: LD_INT 20
61944: PUSH
61945: LD_INT 45
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
61953: LD_VAR 0 6
61957: PPUSH
61958: CALL_OW 264
61962: PUSH
61963: LD_INT 47
61965: PUSH
61966: EMPTY
61967: LIST
61968: IN
61969: IFFALSE 61990
// points := [ 67 , 45 , 75 ] ;
61971: LD_ADDR_VAR 0 9
61975: PUSH
61976: LD_INT 67
61978: PUSH
61979: LD_INT 45
61981: PUSH
61982: LD_INT 75
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
61990: LD_VAR 0 6
61994: PPUSH
61995: CALL_OW 264
61999: PUSH
62000: LD_INT 26
62002: PUSH
62003: EMPTY
62004: LIST
62005: IN
62006: IFFALSE 62027
// points := [ 120 , 30 , 80 ] ;
62008: LD_ADDR_VAR 0 9
62012: PUSH
62013: LD_INT 120
62015: PUSH
62016: LD_INT 30
62018: PUSH
62019: LD_INT 80
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
62027: LD_VAR 0 6
62031: PPUSH
62032: CALL_OW 264
62036: PUSH
62037: LD_INT 22
62039: PUSH
62040: EMPTY
62041: LIST
62042: IN
62043: IFFALSE 62064
// points := [ 40 , 1 , 1 ] ;
62045: LD_ADDR_VAR 0 9
62049: PUSH
62050: LD_INT 40
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: LIST
62063: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
62064: LD_VAR 0 6
62068: PPUSH
62069: CALL_OW 264
62073: PUSH
62074: LD_INT 29
62076: PUSH
62077: EMPTY
62078: LIST
62079: IN
62080: IFFALSE 62101
// points := [ 70 , 200 , 400 ] ;
62082: LD_ADDR_VAR 0 9
62086: PUSH
62087: LD_INT 70
62089: PUSH
62090: LD_INT 200
62092: PUSH
62093: LD_INT 400
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: LIST
62100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
62101: LD_VAR 0 6
62105: PPUSH
62106: CALL_OW 264
62110: PUSH
62111: LD_INT 14
62113: PUSH
62114: LD_INT 53
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: IN
62121: IFFALSE 62142
// points := [ 40 , 10 , 20 ] ;
62123: LD_ADDR_VAR 0 9
62127: PUSH
62128: LD_INT 40
62130: PUSH
62131: LD_INT 10
62133: PUSH
62134: LD_INT 20
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
62142: LD_VAR 0 6
62146: PPUSH
62147: CALL_OW 264
62151: PUSH
62152: LD_INT 9
62154: PUSH
62155: EMPTY
62156: LIST
62157: IN
62158: IFFALSE 62179
// points := [ 5 , 70 , 20 ] ;
62160: LD_ADDR_VAR 0 9
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: LD_INT 70
62170: PUSH
62171: LD_INT 20
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: LIST
62178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62179: LD_VAR 0 6
62183: PPUSH
62184: CALL_OW 264
62188: PUSH
62189: LD_INT 10
62191: PUSH
62192: EMPTY
62193: LIST
62194: IN
62195: IFFALSE 62216
// points := [ 35 , 110 , 70 ] ;
62197: LD_ADDR_VAR 0 9
62201: PUSH
62202: LD_INT 35
62204: PUSH
62205: LD_INT 110
62207: PUSH
62208: LD_INT 70
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: LIST
62215: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62216: LD_VAR 0 6
62220: PPUSH
62221: CALL_OW 265
62225: PUSH
62226: LD_INT 25
62228: EQUAL
62229: IFFALSE 62250
// points := [ 80 , 65 , 100 ] ;
62231: LD_ADDR_VAR 0 9
62235: PUSH
62236: LD_INT 80
62238: PUSH
62239: LD_INT 65
62241: PUSH
62242: LD_INT 100
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62250: LD_VAR 0 6
62254: PPUSH
62255: CALL_OW 263
62259: PUSH
62260: LD_INT 1
62262: EQUAL
62263: IFFALSE 62298
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62265: LD_ADDR_VAR 0 10
62269: PUSH
62270: LD_VAR 0 10
62274: PUSH
62275: LD_VAR 0 6
62279: PPUSH
62280: CALL_OW 311
62284: PPUSH
62285: LD_INT 3
62287: PPUSH
62288: CALL_OW 259
62292: PUSH
62293: LD_INT 4
62295: MUL
62296: MUL
62297: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62298: LD_VAR 0 6
62302: PPUSH
62303: CALL_OW 263
62307: PUSH
62308: LD_INT 2
62310: EQUAL
62311: IFFALSE 62362
// begin j := IsControledBy ( i ) ;
62313: LD_ADDR_VAR 0 7
62317: PUSH
62318: LD_VAR 0 6
62322: PPUSH
62323: CALL_OW 312
62327: ST_TO_ADDR
// if j then
62328: LD_VAR 0 7
62332: IFFALSE 62362
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62334: LD_ADDR_VAR 0 10
62338: PUSH
62339: LD_VAR 0 10
62343: PUSH
62344: LD_VAR 0 7
62348: PPUSH
62349: LD_INT 3
62351: PPUSH
62352: CALL_OW 259
62356: PUSH
62357: LD_INT 3
62359: MUL
62360: MUL
62361: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62362: LD_VAR 0 6
62366: PPUSH
62367: CALL_OW 264
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: LD_INT 6
62377: PUSH
62378: LD_INT 46
62380: PUSH
62381: LD_INT 44
62383: PUSH
62384: LD_INT 47
62386: PUSH
62387: LD_INT 45
62389: PUSH
62390: LD_INT 28
62392: PUSH
62393: LD_INT 7
62395: PUSH
62396: LD_INT 27
62398: PUSH
62399: LD_INT 29
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: IN
62414: PUSH
62415: LD_VAR 0 1
62419: PPUSH
62420: LD_INT 52
62422: PPUSH
62423: CALL_OW 321
62427: PUSH
62428: LD_INT 2
62430: EQUAL
62431: AND
62432: IFFALSE 62449
// bpoints := bpoints * 1.2 ;
62434: LD_ADDR_VAR 0 10
62438: PUSH
62439: LD_VAR 0 10
62443: PUSH
62444: LD_REAL  1.20000000000000E+0000
62447: MUL
62448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62449: LD_VAR 0 6
62453: PPUSH
62454: CALL_OW 264
62458: PUSH
62459: LD_INT 6
62461: PUSH
62462: LD_INT 46
62464: PUSH
62465: LD_INT 47
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: IN
62473: IFFALSE 62490
// bpoints := bpoints * 1.2 ;
62475: LD_ADDR_VAR 0 10
62479: PUSH
62480: LD_VAR 0 10
62484: PUSH
62485: LD_REAL  1.20000000000000E+0000
62488: MUL
62489: ST_TO_ADDR
// end ; unit_building :
62490: GO 62504
62492: LD_INT 3
62494: DOUBLE
62495: EQUAL
62496: IFTRUE 62500
62498: GO 62503
62500: POP
// ; end ;
62501: GO 62504
62503: POP
// for j = 1 to 3 do
62504: LD_ADDR_VAR 0 7
62508: PUSH
62509: DOUBLE
62510: LD_INT 1
62512: DEC
62513: ST_TO_ADDR
62514: LD_INT 3
62516: PUSH
62517: FOR_TO
62518: IFFALSE 62571
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
62520: LD_ADDR_VAR 0 5
62524: PUSH
62525: LD_VAR 0 5
62529: PPUSH
62530: LD_VAR 0 7
62534: PPUSH
62535: LD_VAR 0 5
62539: PUSH
62540: LD_VAR 0 7
62544: ARRAY
62545: PUSH
62546: LD_VAR 0 9
62550: PUSH
62551: LD_VAR 0 7
62555: ARRAY
62556: PUSH
62557: LD_VAR 0 10
62561: MUL
62562: PLUS
62563: PPUSH
62564: CALL_OW 1
62568: ST_TO_ADDR
62569: GO 62517
62571: POP
62572: POP
// end ;
62573: GO 61052
62575: POP
62576: POP
// result := Replace ( result , 4 , tmp ) ;
62577: LD_ADDR_VAR 0 5
62581: PUSH
62582: LD_VAR 0 5
62586: PPUSH
62587: LD_INT 4
62589: PPUSH
62590: LD_VAR 0 8
62594: PPUSH
62595: CALL_OW 1
62599: ST_TO_ADDR
// end ;
62600: LD_VAR 0 5
62604: RET
// export function DangerAtRange ( unit , range ) ; begin
62605: LD_INT 0
62607: PPUSH
// if not unit then
62608: LD_VAR 0 1
62612: NOT
62613: IFFALSE 62617
// exit ;
62615: GO 62662
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
62617: LD_ADDR_VAR 0 3
62621: PUSH
62622: LD_VAR 0 1
62626: PPUSH
62627: CALL_OW 255
62631: PPUSH
62632: LD_VAR 0 1
62636: PPUSH
62637: CALL_OW 250
62641: PPUSH
62642: LD_VAR 0 1
62646: PPUSH
62647: CALL_OW 251
62651: PPUSH
62652: LD_VAR 0 2
62656: PPUSH
62657: CALL 60904 0 4
62661: ST_TO_ADDR
// end ;
62662: LD_VAR 0 3
62666: RET
// export function DangerInArea ( side , area ) ; begin
62667: LD_INT 0
62669: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
62670: LD_ADDR_VAR 0 3
62674: PUSH
62675: LD_VAR 0 2
62679: PPUSH
62680: LD_INT 81
62682: PUSH
62683: LD_VAR 0 1
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PPUSH
62692: CALL_OW 70
62696: ST_TO_ADDR
// end ;
62697: LD_VAR 0 3
62701: RET
// export function IsExtension ( b ) ; begin
62702: LD_INT 0
62704: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
62705: LD_ADDR_VAR 0 2
62709: PUSH
62710: LD_VAR 0 1
62714: PUSH
62715: LD_INT 23
62717: PUSH
62718: LD_INT 20
62720: PUSH
62721: LD_INT 22
62723: PUSH
62724: LD_INT 17
62726: PUSH
62727: LD_INT 24
62729: PUSH
62730: LD_INT 21
62732: PUSH
62733: LD_INT 19
62735: PUSH
62736: LD_INT 16
62738: PUSH
62739: LD_INT 25
62741: PUSH
62742: LD_INT 18
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: IN
62757: ST_TO_ADDR
// end ;
62758: LD_VAR 0 2
62762: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
62763: LD_INT 0
62765: PPUSH
62766: PPUSH
62767: PPUSH
// result := [ ] ;
62768: LD_ADDR_VAR 0 4
62772: PUSH
62773: EMPTY
62774: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
62775: LD_ADDR_VAR 0 5
62779: PUSH
62780: LD_VAR 0 2
62784: PPUSH
62785: LD_INT 21
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PPUSH
62795: CALL_OW 70
62799: ST_TO_ADDR
// if not tmp then
62800: LD_VAR 0 5
62804: NOT
62805: IFFALSE 62809
// exit ;
62807: GO 62873
// if checkLink then
62809: LD_VAR 0 3
62813: IFFALSE 62863
// begin for i in tmp do
62815: LD_ADDR_VAR 0 6
62819: PUSH
62820: LD_VAR 0 5
62824: PUSH
62825: FOR_IN
62826: IFFALSE 62861
// if GetBase ( i ) <> base then
62828: LD_VAR 0 6
62832: PPUSH
62833: CALL_OW 274
62837: PUSH
62838: LD_VAR 0 1
62842: NONEQUAL
62843: IFFALSE 62859
// ComLinkToBase ( base , i ) ;
62845: LD_VAR 0 1
62849: PPUSH
62850: LD_VAR 0 6
62854: PPUSH
62855: CALL_OW 169
62859: GO 62825
62861: POP
62862: POP
// end ; result := tmp ;
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: LD_VAR 0 5
62872: ST_TO_ADDR
// end ;
62873: LD_VAR 0 4
62877: RET
// export function ComComplete ( units , b ) ; var i ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
// if not units then
62882: LD_VAR 0 1
62886: NOT
62887: IFFALSE 62891
// exit ;
62889: GO 62981
// for i in units do
62891: LD_ADDR_VAR 0 4
62895: PUSH
62896: LD_VAR 0 1
62900: PUSH
62901: FOR_IN
62902: IFFALSE 62979
// if BuildingStatus ( b ) = bs_build then
62904: LD_VAR 0 2
62908: PPUSH
62909: CALL_OW 461
62913: PUSH
62914: LD_INT 1
62916: EQUAL
62917: IFFALSE 62977
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
62919: LD_VAR 0 4
62923: PPUSH
62924: LD_STRING h
62926: PUSH
62927: LD_VAR 0 2
62931: PPUSH
62932: CALL_OW 250
62936: PUSH
62937: LD_VAR 0 2
62941: PPUSH
62942: CALL_OW 251
62946: PUSH
62947: LD_VAR 0 2
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: PUSH
62970: EMPTY
62971: LIST
62972: PPUSH
62973: CALL_OW 446
62977: GO 62901
62979: POP
62980: POP
// end ;
62981: LD_VAR 0 3
62985: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
62986: LD_INT 0
62988: PPUSH
62989: PPUSH
62990: PPUSH
62991: PPUSH
62992: PPUSH
62993: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
62994: LD_VAR 0 1
62998: NOT
62999: PUSH
63000: LD_VAR 0 1
63004: PPUSH
63005: CALL_OW 263
63009: PUSH
63010: LD_INT 2
63012: NONEQUAL
63013: OR
63014: IFFALSE 63018
// exit ;
63016: GO 63334
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
63018: LD_ADDR_VAR 0 6
63022: PUSH
63023: LD_INT 22
63025: PUSH
63026: LD_VAR 0 1
63030: PPUSH
63031: CALL_OW 255
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 30
63045: PUSH
63046: LD_INT 36
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 34
63055: PUSH
63056: LD_INT 31
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PPUSH
63072: CALL_OW 69
63076: ST_TO_ADDR
// if not tmp then
63077: LD_VAR 0 6
63081: NOT
63082: IFFALSE 63086
// exit ;
63084: GO 63334
// result := [ ] ;
63086: LD_ADDR_VAR 0 2
63090: PUSH
63091: EMPTY
63092: ST_TO_ADDR
// for i in tmp do
63093: LD_ADDR_VAR 0 3
63097: PUSH
63098: LD_VAR 0 6
63102: PUSH
63103: FOR_IN
63104: IFFALSE 63175
// begin t := UnitsInside ( i ) ;
63106: LD_ADDR_VAR 0 4
63110: PUSH
63111: LD_VAR 0 3
63115: PPUSH
63116: CALL_OW 313
63120: ST_TO_ADDR
// if t then
63121: LD_VAR 0 4
63125: IFFALSE 63173
// for j in t do
63127: LD_ADDR_VAR 0 7
63131: PUSH
63132: LD_VAR 0 4
63136: PUSH
63137: FOR_IN
63138: IFFALSE 63171
// result := Replace ( result , result + 1 , j ) ;
63140: LD_ADDR_VAR 0 2
63144: PUSH
63145: LD_VAR 0 2
63149: PPUSH
63150: LD_VAR 0 2
63154: PUSH
63155: LD_INT 1
63157: PLUS
63158: PPUSH
63159: LD_VAR 0 7
63163: PPUSH
63164: CALL_OW 1
63168: ST_TO_ADDR
63169: GO 63137
63171: POP
63172: POP
// end ;
63173: GO 63103
63175: POP
63176: POP
// if not result then
63177: LD_VAR 0 2
63181: NOT
63182: IFFALSE 63186
// exit ;
63184: GO 63334
// mech := result [ 1 ] ;
63186: LD_ADDR_VAR 0 5
63190: PUSH
63191: LD_VAR 0 2
63195: PUSH
63196: LD_INT 1
63198: ARRAY
63199: ST_TO_ADDR
// if result > 1 then
63200: LD_VAR 0 2
63204: PUSH
63205: LD_INT 1
63207: GREATER
63208: IFFALSE 63320
// begin for i = 2 to result do
63210: LD_ADDR_VAR 0 3
63214: PUSH
63215: DOUBLE
63216: LD_INT 2
63218: DEC
63219: ST_TO_ADDR
63220: LD_VAR 0 2
63224: PUSH
63225: FOR_TO
63226: IFFALSE 63318
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63228: LD_ADDR_VAR 0 4
63232: PUSH
63233: LD_VAR 0 2
63237: PUSH
63238: LD_VAR 0 3
63242: ARRAY
63243: PPUSH
63244: LD_INT 3
63246: PPUSH
63247: CALL_OW 259
63251: PUSH
63252: LD_VAR 0 2
63256: PUSH
63257: LD_VAR 0 3
63261: ARRAY
63262: PPUSH
63263: CALL_OW 432
63267: MINUS
63268: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63269: LD_VAR 0 4
63273: PUSH
63274: LD_VAR 0 5
63278: PPUSH
63279: LD_INT 3
63281: PPUSH
63282: CALL_OW 259
63286: PUSH
63287: LD_VAR 0 5
63291: PPUSH
63292: CALL_OW 432
63296: MINUS
63297: GREATEREQUAL
63298: IFFALSE 63316
// mech := result [ i ] ;
63300: LD_ADDR_VAR 0 5
63304: PUSH
63305: LD_VAR 0 2
63309: PUSH
63310: LD_VAR 0 3
63314: ARRAY
63315: ST_TO_ADDR
// end ;
63316: GO 63225
63318: POP
63319: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63320: LD_VAR 0 1
63324: PPUSH
63325: LD_VAR 0 5
63329: PPUSH
63330: CALL_OW 135
// end ;
63334: LD_VAR 0 2
63338: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63339: LD_INT 0
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
63345: PPUSH
63346: PPUSH
63347: PPUSH
63348: PPUSH
63349: PPUSH
63350: PPUSH
63351: PPUSH
63352: PPUSH
63353: PPUSH
// result := [ ] ;
63354: LD_ADDR_VAR 0 7
63358: PUSH
63359: EMPTY
63360: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL_OW 266
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: IN
63381: NOT
63382: IFFALSE 63386
// exit ;
63384: GO 65020
// if name then
63386: LD_VAR 0 3
63390: IFFALSE 63406
// SetBName ( base_dep , name ) ;
63392: LD_VAR 0 1
63396: PPUSH
63397: LD_VAR 0 3
63401: PPUSH
63402: CALL_OW 500
// base := GetBase ( base_dep ) ;
63406: LD_ADDR_VAR 0 15
63410: PUSH
63411: LD_VAR 0 1
63415: PPUSH
63416: CALL_OW 274
63420: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63421: LD_ADDR_VAR 0 16
63425: PUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 255
63435: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63436: LD_ADDR_VAR 0 17
63440: PUSH
63441: LD_VAR 0 1
63445: PPUSH
63446: CALL_OW 248
63450: ST_TO_ADDR
// if sources then
63451: LD_VAR 0 5
63455: IFFALSE 63502
// for i = 1 to 3 do
63457: LD_ADDR_VAR 0 8
63461: PUSH
63462: DOUBLE
63463: LD_INT 1
63465: DEC
63466: ST_TO_ADDR
63467: LD_INT 3
63469: PUSH
63470: FOR_TO
63471: IFFALSE 63500
// AddResourceType ( base , i , sources [ i ] ) ;
63473: LD_VAR 0 15
63477: PPUSH
63478: LD_VAR 0 8
63482: PPUSH
63483: LD_VAR 0 5
63487: PUSH
63488: LD_VAR 0 8
63492: ARRAY
63493: PPUSH
63494: CALL_OW 276
63498: GO 63470
63500: POP
63501: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
63502: LD_ADDR_VAR 0 18
63506: PUSH
63507: LD_VAR 0 15
63511: PPUSH
63512: LD_VAR 0 2
63516: PPUSH
63517: LD_INT 1
63519: PPUSH
63520: CALL 62763 0 3
63524: ST_TO_ADDR
// InitHc ;
63525: CALL_OW 19
// InitUc ;
63529: CALL_OW 18
// uc_side := side ;
63533: LD_ADDR_OWVAR 20
63537: PUSH
63538: LD_VAR 0 16
63542: ST_TO_ADDR
// uc_nation := nation ;
63543: LD_ADDR_OWVAR 21
63547: PUSH
63548: LD_VAR 0 17
63552: ST_TO_ADDR
// if buildings then
63553: LD_VAR 0 18
63557: IFFALSE 64879
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
63559: LD_ADDR_VAR 0 19
63563: PUSH
63564: LD_VAR 0 18
63568: PPUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 30
63574: PUSH
63575: LD_INT 29
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 30
63584: PUSH
63585: LD_INT 30
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: LIST
63596: PPUSH
63597: CALL_OW 72
63601: ST_TO_ADDR
// if tmp then
63602: LD_VAR 0 19
63606: IFFALSE 63654
// for i in tmp do
63608: LD_ADDR_VAR 0 8
63612: PUSH
63613: LD_VAR 0 19
63617: PUSH
63618: FOR_IN
63619: IFFALSE 63652
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
63621: LD_VAR 0 8
63625: PPUSH
63626: CALL_OW 250
63630: PPUSH
63631: LD_VAR 0 8
63635: PPUSH
63636: CALL_OW 251
63640: PPUSH
63641: LD_VAR 0 16
63645: PPUSH
63646: CALL_OW 441
63650: GO 63618
63652: POP
63653: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
63654: LD_VAR 0 18
63658: PPUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 30
63664: PUSH
63665: LD_INT 32
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 30
63674: PUSH
63675: LD_INT 33
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: PPUSH
63687: CALL_OW 72
63691: IFFALSE 63779
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
63693: LD_ADDR_VAR 0 8
63697: PUSH
63698: LD_VAR 0 18
63702: PPUSH
63703: LD_INT 2
63705: PUSH
63706: LD_INT 30
63708: PUSH
63709: LD_INT 32
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 30
63718: PUSH
63719: LD_INT 33
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: PPUSH
63731: CALL_OW 72
63735: PUSH
63736: FOR_IN
63737: IFFALSE 63777
// begin if not GetBWeapon ( i ) then
63739: LD_VAR 0 8
63743: PPUSH
63744: CALL_OW 269
63748: NOT
63749: IFFALSE 63775
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
63751: LD_VAR 0 8
63755: PPUSH
63756: LD_VAR 0 8
63760: PPUSH
63761: LD_VAR 0 2
63765: PPUSH
63766: CALL 65025 0 2
63770: PPUSH
63771: CALL_OW 431
// end ;
63775: GO 63736
63777: POP
63778: POP
// end ; for i = 1 to personel do
63779: LD_ADDR_VAR 0 8
63783: PUSH
63784: DOUBLE
63785: LD_INT 1
63787: DEC
63788: ST_TO_ADDR
63789: LD_VAR 0 6
63793: PUSH
63794: FOR_TO
63795: IFFALSE 64859
// begin if i > 4 then
63797: LD_VAR 0 8
63801: PUSH
63802: LD_INT 4
63804: GREATER
63805: IFFALSE 63809
// break ;
63807: GO 64859
// case i of 1 :
63809: LD_VAR 0 8
63813: PUSH
63814: LD_INT 1
63816: DOUBLE
63817: EQUAL
63818: IFTRUE 63822
63820: GO 63902
63822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
63823: LD_ADDR_VAR 0 12
63827: PUSH
63828: LD_VAR 0 18
63832: PPUSH
63833: LD_INT 22
63835: PUSH
63836: LD_VAR 0 16
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 58
63847: PUSH
63848: EMPTY
63849: LIST
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: LD_INT 30
63856: PUSH
63857: LD_INT 32
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 30
63866: PUSH
63867: LD_INT 4
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 30
63876: PUSH
63877: LD_INT 5
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: PPUSH
63895: CALL_OW 72
63899: ST_TO_ADDR
63900: GO 64124
63902: LD_INT 2
63904: DOUBLE
63905: EQUAL
63906: IFTRUE 63910
63908: GO 63972
63910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
63911: LD_ADDR_VAR 0 12
63915: PUSH
63916: LD_VAR 0 18
63920: PPUSH
63921: LD_INT 22
63923: PUSH
63924: LD_VAR 0 16
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 2
63935: PUSH
63936: LD_INT 30
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 30
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PPUSH
63965: CALL_OW 72
63969: ST_TO_ADDR
63970: GO 64124
63972: LD_INT 3
63974: DOUBLE
63975: EQUAL
63976: IFTRUE 63980
63978: GO 64042
63980: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
63981: LD_ADDR_VAR 0 12
63985: PUSH
63986: LD_VAR 0 18
63990: PPUSH
63991: LD_INT 22
63993: PUSH
63994: LD_VAR 0 16
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 2
64005: PUSH
64006: LD_INT 30
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 30
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PPUSH
64035: CALL_OW 72
64039: ST_TO_ADDR
64040: GO 64124
64042: LD_INT 4
64044: DOUBLE
64045: EQUAL
64046: IFTRUE 64050
64048: GO 64123
64050: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
64051: LD_ADDR_VAR 0 12
64055: PUSH
64056: LD_VAR 0 18
64060: PPUSH
64061: LD_INT 22
64063: PUSH
64064: LD_VAR 0 16
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: LD_INT 30
64078: PUSH
64079: LD_INT 6
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 30
64088: PUSH
64089: LD_INT 7
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 30
64098: PUSH
64099: LD_INT 8
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PPUSH
64116: CALL_OW 72
64120: ST_TO_ADDR
64121: GO 64124
64123: POP
// if i = 1 then
64124: LD_VAR 0 8
64128: PUSH
64129: LD_INT 1
64131: EQUAL
64132: IFFALSE 64243
// begin tmp := [ ] ;
64134: LD_ADDR_VAR 0 19
64138: PUSH
64139: EMPTY
64140: ST_TO_ADDR
// for j in f do
64141: LD_ADDR_VAR 0 9
64145: PUSH
64146: LD_VAR 0 12
64150: PUSH
64151: FOR_IN
64152: IFFALSE 64225
// if GetBType ( j ) = b_bunker then
64154: LD_VAR 0 9
64158: PPUSH
64159: CALL_OW 266
64163: PUSH
64164: LD_INT 32
64166: EQUAL
64167: IFFALSE 64194
// tmp := Insert ( tmp , 1 , j ) else
64169: LD_ADDR_VAR 0 19
64173: PUSH
64174: LD_VAR 0 19
64178: PPUSH
64179: LD_INT 1
64181: PPUSH
64182: LD_VAR 0 9
64186: PPUSH
64187: CALL_OW 2
64191: ST_TO_ADDR
64192: GO 64223
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64194: LD_ADDR_VAR 0 19
64198: PUSH
64199: LD_VAR 0 19
64203: PPUSH
64204: LD_VAR 0 19
64208: PUSH
64209: LD_INT 1
64211: PLUS
64212: PPUSH
64213: LD_VAR 0 9
64217: PPUSH
64218: CALL_OW 2
64222: ST_TO_ADDR
64223: GO 64151
64225: POP
64226: POP
// if tmp then
64227: LD_VAR 0 19
64231: IFFALSE 64243
// f := tmp ;
64233: LD_ADDR_VAR 0 12
64237: PUSH
64238: LD_VAR 0 19
64242: ST_TO_ADDR
// end ; x := personel [ i ] ;
64243: LD_ADDR_VAR 0 13
64247: PUSH
64248: LD_VAR 0 6
64252: PUSH
64253: LD_VAR 0 8
64257: ARRAY
64258: ST_TO_ADDR
// if x = - 1 then
64259: LD_VAR 0 13
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: EQUAL
64268: IFFALSE 64477
// begin for j in f do
64270: LD_ADDR_VAR 0 9
64274: PUSH
64275: LD_VAR 0 12
64279: PUSH
64280: FOR_IN
64281: IFFALSE 64473
// repeat InitHc ;
64283: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64287: LD_VAR 0 9
64291: PPUSH
64292: CALL_OW 266
64296: PUSH
64297: LD_INT 5
64299: EQUAL
64300: IFFALSE 64370
// begin if UnitsInside ( j ) < 3 then
64302: LD_VAR 0 9
64306: PPUSH
64307: CALL_OW 313
64311: PUSH
64312: LD_INT 3
64314: LESS
64315: IFFALSE 64351
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64317: LD_INT 0
64319: PPUSH
64320: LD_INT 5
64322: PUSH
64323: LD_INT 8
64325: PUSH
64326: LD_INT 9
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: LIST
64333: PUSH
64334: LD_VAR 0 17
64338: ARRAY
64339: PPUSH
64340: LD_VAR 0 4
64344: PPUSH
64345: CALL_OW 380
64349: GO 64368
// PrepareHuman ( false , i , skill ) ;
64351: LD_INT 0
64353: PPUSH
64354: LD_VAR 0 8
64358: PPUSH
64359: LD_VAR 0 4
64363: PPUSH
64364: CALL_OW 380
// end else
64368: GO 64387
// PrepareHuman ( false , i , skill ) ;
64370: LD_INT 0
64372: PPUSH
64373: LD_VAR 0 8
64377: PPUSH
64378: LD_VAR 0 4
64382: PPUSH
64383: CALL_OW 380
// un := CreateHuman ;
64387: LD_ADDR_VAR 0 14
64391: PUSH
64392: CALL_OW 44
64396: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64397: LD_ADDR_VAR 0 7
64401: PUSH
64402: LD_VAR 0 7
64406: PPUSH
64407: LD_INT 1
64409: PPUSH
64410: LD_VAR 0 14
64414: PPUSH
64415: CALL_OW 2
64419: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64420: LD_VAR 0 14
64424: PPUSH
64425: LD_VAR 0 9
64429: PPUSH
64430: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64434: LD_VAR 0 9
64438: PPUSH
64439: CALL_OW 313
64443: PUSH
64444: LD_INT 6
64446: EQUAL
64447: PUSH
64448: LD_VAR 0 9
64452: PPUSH
64453: CALL_OW 266
64457: PUSH
64458: LD_INT 32
64460: PUSH
64461: LD_INT 31
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: IN
64468: OR
64469: IFFALSE 64283
64471: GO 64280
64473: POP
64474: POP
// end else
64475: GO 64857
// for j = 1 to x do
64477: LD_ADDR_VAR 0 9
64481: PUSH
64482: DOUBLE
64483: LD_INT 1
64485: DEC
64486: ST_TO_ADDR
64487: LD_VAR 0 13
64491: PUSH
64492: FOR_TO
64493: IFFALSE 64855
// begin InitHc ;
64495: CALL_OW 19
// if not f then
64499: LD_VAR 0 12
64503: NOT
64504: IFFALSE 64593
// begin PrepareHuman ( false , i , skill ) ;
64506: LD_INT 0
64508: PPUSH
64509: LD_VAR 0 8
64513: PPUSH
64514: LD_VAR 0 4
64518: PPUSH
64519: CALL_OW 380
// un := CreateHuman ;
64523: LD_ADDR_VAR 0 14
64527: PUSH
64528: CALL_OW 44
64532: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64533: LD_ADDR_VAR 0 7
64537: PUSH
64538: LD_VAR 0 7
64542: PPUSH
64543: LD_INT 1
64545: PPUSH
64546: LD_VAR 0 14
64550: PPUSH
64551: CALL_OW 2
64555: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64556: LD_VAR 0 14
64560: PPUSH
64561: LD_VAR 0 1
64565: PPUSH
64566: CALL_OW 250
64570: PPUSH
64571: LD_VAR 0 1
64575: PPUSH
64576: CALL_OW 251
64580: PPUSH
64581: LD_INT 10
64583: PPUSH
64584: LD_INT 0
64586: PPUSH
64587: CALL_OW 50
// continue ;
64591: GO 64492
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
64593: LD_VAR 0 12
64597: PUSH
64598: LD_INT 1
64600: ARRAY
64601: PPUSH
64602: CALL_OW 313
64606: PUSH
64607: LD_VAR 0 12
64611: PUSH
64612: LD_INT 1
64614: ARRAY
64615: PPUSH
64616: CALL_OW 266
64620: PUSH
64621: LD_INT 32
64623: PUSH
64624: LD_INT 31
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: IN
64631: AND
64632: PUSH
64633: LD_VAR 0 12
64637: PUSH
64638: LD_INT 1
64640: ARRAY
64641: PPUSH
64642: CALL_OW 313
64646: PUSH
64647: LD_INT 6
64649: EQUAL
64650: OR
64651: IFFALSE 64671
// f := Delete ( f , 1 ) ;
64653: LD_ADDR_VAR 0 12
64657: PUSH
64658: LD_VAR 0 12
64662: PPUSH
64663: LD_INT 1
64665: PPUSH
64666: CALL_OW 3
64670: ST_TO_ADDR
// if not f then
64671: LD_VAR 0 12
64675: NOT
64676: IFFALSE 64694
// begin x := x + 2 ;
64678: LD_ADDR_VAR 0 13
64682: PUSH
64683: LD_VAR 0 13
64687: PUSH
64688: LD_INT 2
64690: PLUS
64691: ST_TO_ADDR
// continue ;
64692: GO 64492
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
64694: LD_VAR 0 12
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PPUSH
64703: CALL_OW 266
64707: PUSH
64708: LD_INT 5
64710: EQUAL
64711: IFFALSE 64785
// begin if UnitsInside ( f [ 1 ] ) < 3 then
64713: LD_VAR 0 12
64717: PUSH
64718: LD_INT 1
64720: ARRAY
64721: PPUSH
64722: CALL_OW 313
64726: PUSH
64727: LD_INT 3
64729: LESS
64730: IFFALSE 64766
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64732: LD_INT 0
64734: PPUSH
64735: LD_INT 5
64737: PUSH
64738: LD_INT 8
64740: PUSH
64741: LD_INT 9
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: PUSH
64749: LD_VAR 0 17
64753: ARRAY
64754: PPUSH
64755: LD_VAR 0 4
64759: PPUSH
64760: CALL_OW 380
64764: GO 64783
// PrepareHuman ( false , i , skill ) ;
64766: LD_INT 0
64768: PPUSH
64769: LD_VAR 0 8
64773: PPUSH
64774: LD_VAR 0 4
64778: PPUSH
64779: CALL_OW 380
// end else
64783: GO 64802
// PrepareHuman ( false , i , skill ) ;
64785: LD_INT 0
64787: PPUSH
64788: LD_VAR 0 8
64792: PPUSH
64793: LD_VAR 0 4
64797: PPUSH
64798: CALL_OW 380
// un := CreateHuman ;
64802: LD_ADDR_VAR 0 14
64806: PUSH
64807: CALL_OW 44
64811: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64812: LD_ADDR_VAR 0 7
64816: PUSH
64817: LD_VAR 0 7
64821: PPUSH
64822: LD_INT 1
64824: PPUSH
64825: LD_VAR 0 14
64829: PPUSH
64830: CALL_OW 2
64834: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
64835: LD_VAR 0 14
64839: PPUSH
64840: LD_VAR 0 12
64844: PUSH
64845: LD_INT 1
64847: ARRAY
64848: PPUSH
64849: CALL_OW 52
// end ;
64853: GO 64492
64855: POP
64856: POP
// end ;
64857: GO 63794
64859: POP
64860: POP
// result := result ^ buildings ;
64861: LD_ADDR_VAR 0 7
64865: PUSH
64866: LD_VAR 0 7
64870: PUSH
64871: LD_VAR 0 18
64875: ADD
64876: ST_TO_ADDR
// end else
64877: GO 65020
// begin for i = 1 to personel do
64879: LD_ADDR_VAR 0 8
64883: PUSH
64884: DOUBLE
64885: LD_INT 1
64887: DEC
64888: ST_TO_ADDR
64889: LD_VAR 0 6
64893: PUSH
64894: FOR_TO
64895: IFFALSE 65018
// begin if i > 4 then
64897: LD_VAR 0 8
64901: PUSH
64902: LD_INT 4
64904: GREATER
64905: IFFALSE 64909
// break ;
64907: GO 65018
// x := personel [ i ] ;
64909: LD_ADDR_VAR 0 13
64913: PUSH
64914: LD_VAR 0 6
64918: PUSH
64919: LD_VAR 0 8
64923: ARRAY
64924: ST_TO_ADDR
// if x = - 1 then
64925: LD_VAR 0 13
64929: PUSH
64930: LD_INT 1
64932: NEG
64933: EQUAL
64934: IFFALSE 64938
// continue ;
64936: GO 64894
// PrepareHuman ( false , i , skill ) ;
64938: LD_INT 0
64940: PPUSH
64941: LD_VAR 0 8
64945: PPUSH
64946: LD_VAR 0 4
64950: PPUSH
64951: CALL_OW 380
// un := CreateHuman ;
64955: LD_ADDR_VAR 0 14
64959: PUSH
64960: CALL_OW 44
64964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64965: LD_VAR 0 14
64969: PPUSH
64970: LD_VAR 0 1
64974: PPUSH
64975: CALL_OW 250
64979: PPUSH
64980: LD_VAR 0 1
64984: PPUSH
64985: CALL_OW 251
64989: PPUSH
64990: LD_INT 10
64992: PPUSH
64993: LD_INT 0
64995: PPUSH
64996: CALL_OW 50
// result := result ^ un ;
65000: LD_ADDR_VAR 0 7
65004: PUSH
65005: LD_VAR 0 7
65009: PUSH
65010: LD_VAR 0 14
65014: ADD
65015: ST_TO_ADDR
// end ;
65016: GO 64894
65018: POP
65019: POP
// end ; end ;
65020: LD_VAR 0 7
65024: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
65025: LD_INT 0
65027: PPUSH
65028: PPUSH
65029: PPUSH
65030: PPUSH
65031: PPUSH
65032: PPUSH
65033: PPUSH
65034: PPUSH
65035: PPUSH
65036: PPUSH
65037: PPUSH
65038: PPUSH
65039: PPUSH
65040: PPUSH
65041: PPUSH
65042: PPUSH
// result := false ;
65043: LD_ADDR_VAR 0 3
65047: PUSH
65048: LD_INT 0
65050: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
65051: LD_VAR 0 1
65055: NOT
65056: PUSH
65057: LD_VAR 0 1
65061: PPUSH
65062: CALL_OW 266
65066: PUSH
65067: LD_INT 32
65069: PUSH
65070: LD_INT 33
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: IN
65077: NOT
65078: OR
65079: IFFALSE 65083
// exit ;
65081: GO 66192
// nat := GetNation ( tower ) ;
65083: LD_ADDR_VAR 0 12
65087: PUSH
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 248
65097: ST_TO_ADDR
// side := GetSide ( tower ) ;
65098: LD_ADDR_VAR 0 16
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: CALL_OW 255
65112: ST_TO_ADDR
// x := GetX ( tower ) ;
65113: LD_ADDR_VAR 0 10
65117: PUSH
65118: LD_VAR 0 1
65122: PPUSH
65123: CALL_OW 250
65127: ST_TO_ADDR
// y := GetY ( tower ) ;
65128: LD_ADDR_VAR 0 11
65132: PUSH
65133: LD_VAR 0 1
65137: PPUSH
65138: CALL_OW 251
65142: ST_TO_ADDR
// if not x or not y then
65143: LD_VAR 0 10
65147: NOT
65148: PUSH
65149: LD_VAR 0 11
65153: NOT
65154: OR
65155: IFFALSE 65159
// exit ;
65157: GO 66192
// weapon := 0 ;
65159: LD_ADDR_VAR 0 18
65163: PUSH
65164: LD_INT 0
65166: ST_TO_ADDR
// fac_list := [ ] ;
65167: LD_ADDR_VAR 0 17
65171: PUSH
65172: EMPTY
65173: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65174: LD_ADDR_VAR 0 6
65178: PUSH
65179: LD_VAR 0 1
65183: PPUSH
65184: CALL_OW 274
65188: PPUSH
65189: LD_VAR 0 2
65193: PPUSH
65194: LD_INT 0
65196: PPUSH
65197: CALL 62763 0 3
65201: PPUSH
65202: LD_INT 30
65204: PUSH
65205: LD_INT 3
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PPUSH
65212: CALL_OW 72
65216: ST_TO_ADDR
// if not factories then
65217: LD_VAR 0 6
65221: NOT
65222: IFFALSE 65226
// exit ;
65224: GO 66192
// for i in factories do
65226: LD_ADDR_VAR 0 8
65230: PUSH
65231: LD_VAR 0 6
65235: PUSH
65236: FOR_IN
65237: IFFALSE 65262
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65239: LD_ADDR_VAR 0 17
65243: PUSH
65244: LD_VAR 0 17
65248: PUSH
65249: LD_VAR 0 8
65253: PPUSH
65254: CALL_OW 478
65258: UNION
65259: ST_TO_ADDR
65260: GO 65236
65262: POP
65263: POP
// if not fac_list then
65264: LD_VAR 0 17
65268: NOT
65269: IFFALSE 65273
// exit ;
65271: GO 66192
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65273: LD_ADDR_VAR 0 5
65277: PUSH
65278: LD_INT 4
65280: PUSH
65281: LD_INT 5
65283: PUSH
65284: LD_INT 9
65286: PUSH
65287: LD_INT 10
65289: PUSH
65290: LD_INT 6
65292: PUSH
65293: LD_INT 7
65295: PUSH
65296: LD_INT 11
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 27
65310: PUSH
65311: LD_INT 28
65313: PUSH
65314: LD_INT 26
65316: PUSH
65317: LD_INT 30
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 43
65328: PUSH
65329: LD_INT 44
65331: PUSH
65332: LD_INT 46
65334: PUSH
65335: LD_INT 45
65337: PUSH
65338: LD_INT 47
65340: PUSH
65341: LD_INT 49
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: LIST
65356: PUSH
65357: LD_VAR 0 12
65361: ARRAY
65362: ST_TO_ADDR
// list := list isect fac_list ;
65363: LD_ADDR_VAR 0 5
65367: PUSH
65368: LD_VAR 0 5
65372: PUSH
65373: LD_VAR 0 17
65377: ISECT
65378: ST_TO_ADDR
// if not list then
65379: LD_VAR 0 5
65383: NOT
65384: IFFALSE 65388
// exit ;
65386: GO 66192
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65388: LD_VAR 0 12
65392: PUSH
65393: LD_INT 3
65395: EQUAL
65396: PUSH
65397: LD_INT 49
65399: PUSH
65400: LD_VAR 0 5
65404: IN
65405: AND
65406: PUSH
65407: LD_INT 31
65409: PPUSH
65410: LD_VAR 0 16
65414: PPUSH
65415: CALL_OW 321
65419: PUSH
65420: LD_INT 2
65422: EQUAL
65423: AND
65424: IFFALSE 65484
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65426: LD_INT 22
65428: PUSH
65429: LD_VAR 0 16
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 35
65440: PUSH
65441: LD_INT 49
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 91
65450: PUSH
65451: LD_VAR 0 1
65455: PUSH
65456: LD_INT 10
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: PPUSH
65469: CALL_OW 69
65473: NOT
65474: IFFALSE 65484
// weapon := ru_time_lapser ;
65476: LD_ADDR_VAR 0 18
65480: PUSH
65481: LD_INT 49
65483: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
65484: LD_VAR 0 12
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: IN
65499: PUSH
65500: LD_INT 11
65502: PUSH
65503: LD_VAR 0 5
65507: IN
65508: PUSH
65509: LD_INT 30
65511: PUSH
65512: LD_VAR 0 5
65516: IN
65517: OR
65518: AND
65519: PUSH
65520: LD_INT 6
65522: PPUSH
65523: LD_VAR 0 16
65527: PPUSH
65528: CALL_OW 321
65532: PUSH
65533: LD_INT 2
65535: EQUAL
65536: AND
65537: IFFALSE 65702
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
65539: LD_INT 22
65541: PUSH
65542: LD_VAR 0 16
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: LD_INT 35
65556: PUSH
65557: LD_INT 11
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 35
65566: PUSH
65567: LD_INT 30
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 91
65581: PUSH
65582: LD_VAR 0 1
65586: PUSH
65587: LD_INT 18
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: PPUSH
65600: CALL_OW 69
65604: NOT
65605: PUSH
65606: LD_INT 22
65608: PUSH
65609: LD_VAR 0 16
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: LD_INT 30
65623: PUSH
65624: LD_INT 32
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 30
65633: PUSH
65634: LD_INT 33
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 91
65648: PUSH
65649: LD_VAR 0 1
65653: PUSH
65654: LD_INT 12
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: LIST
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: PPUSH
65670: CALL_OW 69
65674: PUSH
65675: LD_INT 2
65677: GREATER
65678: AND
65679: IFFALSE 65702
// weapon := [ us_radar , ar_radar ] [ nat ] ;
65681: LD_ADDR_VAR 0 18
65685: PUSH
65686: LD_INT 11
65688: PUSH
65689: LD_INT 30
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_VAR 0 12
65700: ARRAY
65701: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
65702: LD_VAR 0 18
65706: NOT
65707: PUSH
65708: LD_INT 40
65710: PPUSH
65711: LD_VAR 0 16
65715: PPUSH
65716: CALL_OW 321
65720: PUSH
65721: LD_INT 2
65723: EQUAL
65724: AND
65725: PUSH
65726: LD_INT 7
65728: PUSH
65729: LD_VAR 0 5
65733: IN
65734: PUSH
65735: LD_INT 28
65737: PUSH
65738: LD_VAR 0 5
65742: IN
65743: OR
65744: PUSH
65745: LD_INT 45
65747: PUSH
65748: LD_VAR 0 5
65752: IN
65753: OR
65754: AND
65755: IFFALSE 66009
// begin hex := GetHexInfo ( x , y ) ;
65757: LD_ADDR_VAR 0 4
65761: PUSH
65762: LD_VAR 0 10
65766: PPUSH
65767: LD_VAR 0 11
65771: PPUSH
65772: CALL_OW 546
65776: ST_TO_ADDR
// if hex [ 1 ] then
65777: LD_VAR 0 4
65781: PUSH
65782: LD_INT 1
65784: ARRAY
65785: IFFALSE 65789
// exit ;
65787: GO 66192
// height := hex [ 2 ] ;
65789: LD_ADDR_VAR 0 15
65793: PUSH
65794: LD_VAR 0 4
65798: PUSH
65799: LD_INT 2
65801: ARRAY
65802: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
65803: LD_ADDR_VAR 0 14
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: LD_INT 5
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// for i in tmp do
65826: LD_ADDR_VAR 0 8
65830: PUSH
65831: LD_VAR 0 14
65835: PUSH
65836: FOR_IN
65837: IFFALSE 66007
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
65839: LD_ADDR_VAR 0 9
65843: PUSH
65844: LD_VAR 0 10
65848: PPUSH
65849: LD_VAR 0 8
65853: PPUSH
65854: LD_INT 5
65856: PPUSH
65857: CALL_OW 272
65861: PUSH
65862: LD_VAR 0 11
65866: PPUSH
65867: LD_VAR 0 8
65871: PPUSH
65872: LD_INT 5
65874: PPUSH
65875: CALL_OW 273
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
65884: LD_VAR 0 9
65888: PUSH
65889: LD_INT 1
65891: ARRAY
65892: PPUSH
65893: LD_VAR 0 9
65897: PUSH
65898: LD_INT 2
65900: ARRAY
65901: PPUSH
65902: CALL_OW 488
65906: IFFALSE 66005
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
65908: LD_ADDR_VAR 0 4
65912: PUSH
65913: LD_VAR 0 9
65917: PUSH
65918: LD_INT 1
65920: ARRAY
65921: PPUSH
65922: LD_VAR 0 9
65926: PUSH
65927: LD_INT 2
65929: ARRAY
65930: PPUSH
65931: CALL_OW 546
65935: ST_TO_ADDR
// if hex [ 1 ] then
65936: LD_VAR 0 4
65940: PUSH
65941: LD_INT 1
65943: ARRAY
65944: IFFALSE 65948
// continue ;
65946: GO 65836
// h := hex [ 2 ] ;
65948: LD_ADDR_VAR 0 13
65952: PUSH
65953: LD_VAR 0 4
65957: PUSH
65958: LD_INT 2
65960: ARRAY
65961: ST_TO_ADDR
// if h + 7 < height then
65962: LD_VAR 0 13
65966: PUSH
65967: LD_INT 7
65969: PLUS
65970: PUSH
65971: LD_VAR 0 15
65975: LESS
65976: IFFALSE 66005
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
65978: LD_ADDR_VAR 0 18
65982: PUSH
65983: LD_INT 7
65985: PUSH
65986: LD_INT 28
65988: PUSH
65989: LD_INT 45
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: LIST
65996: PUSH
65997: LD_VAR 0 12
66001: ARRAY
66002: ST_TO_ADDR
// break ;
66003: GO 66007
// end ; end ; end ;
66005: GO 65836
66007: POP
66008: POP
// end ; if not weapon then
66009: LD_VAR 0 18
66013: NOT
66014: IFFALSE 66074
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
66016: LD_ADDR_VAR 0 5
66020: PUSH
66021: LD_VAR 0 5
66025: PUSH
66026: LD_INT 11
66028: PUSH
66029: LD_INT 30
66031: PUSH
66032: LD_INT 49
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: DIFF
66040: ST_TO_ADDR
// if not list then
66041: LD_VAR 0 5
66045: NOT
66046: IFFALSE 66050
// exit ;
66048: GO 66192
// weapon := list [ rand ( 1 , list ) ] ;
66050: LD_ADDR_VAR 0 18
66054: PUSH
66055: LD_VAR 0 5
66059: PUSH
66060: LD_INT 1
66062: PPUSH
66063: LD_VAR 0 5
66067: PPUSH
66068: CALL_OW 12
66072: ARRAY
66073: ST_TO_ADDR
// end ; if weapon then
66074: LD_VAR 0 18
66078: IFFALSE 66192
// begin tmp := CostOfWeapon ( weapon ) ;
66080: LD_ADDR_VAR 0 14
66084: PUSH
66085: LD_VAR 0 18
66089: PPUSH
66090: CALL_OW 451
66094: ST_TO_ADDR
// j := GetBase ( tower ) ;
66095: LD_ADDR_VAR 0 9
66099: PUSH
66100: LD_VAR 0 1
66104: PPUSH
66105: CALL_OW 274
66109: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
66110: LD_VAR 0 9
66114: PPUSH
66115: LD_INT 1
66117: PPUSH
66118: CALL_OW 275
66122: PUSH
66123: LD_VAR 0 14
66127: PUSH
66128: LD_INT 1
66130: ARRAY
66131: GREATEREQUAL
66132: PUSH
66133: LD_VAR 0 9
66137: PPUSH
66138: LD_INT 2
66140: PPUSH
66141: CALL_OW 275
66145: PUSH
66146: LD_VAR 0 14
66150: PUSH
66151: LD_INT 2
66153: ARRAY
66154: GREATEREQUAL
66155: AND
66156: PUSH
66157: LD_VAR 0 9
66161: PPUSH
66162: LD_INT 3
66164: PPUSH
66165: CALL_OW 275
66169: PUSH
66170: LD_VAR 0 14
66174: PUSH
66175: LD_INT 3
66177: ARRAY
66178: GREATEREQUAL
66179: AND
66180: IFFALSE 66192
// result := weapon ;
66182: LD_ADDR_VAR 0 3
66186: PUSH
66187: LD_VAR 0 18
66191: ST_TO_ADDR
// end ; end ;
66192: LD_VAR 0 3
66196: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66197: LD_INT 0
66199: PPUSH
66200: PPUSH
// result := true ;
66201: LD_ADDR_VAR 0 3
66205: PUSH
66206: LD_INT 1
66208: ST_TO_ADDR
// if array1 = array2 then
66209: LD_VAR 0 1
66213: PUSH
66214: LD_VAR 0 2
66218: EQUAL
66219: IFFALSE 66279
// begin for i = 1 to array1 do
66221: LD_ADDR_VAR 0 4
66225: PUSH
66226: DOUBLE
66227: LD_INT 1
66229: DEC
66230: ST_TO_ADDR
66231: LD_VAR 0 1
66235: PUSH
66236: FOR_TO
66237: IFFALSE 66275
// if array1 [ i ] <> array2 [ i ] then
66239: LD_VAR 0 1
66243: PUSH
66244: LD_VAR 0 4
66248: ARRAY
66249: PUSH
66250: LD_VAR 0 2
66254: PUSH
66255: LD_VAR 0 4
66259: ARRAY
66260: NONEQUAL
66261: IFFALSE 66273
// begin result := false ;
66263: LD_ADDR_VAR 0 3
66267: PUSH
66268: LD_INT 0
66270: ST_TO_ADDR
// break ;
66271: GO 66275
// end ;
66273: GO 66236
66275: POP
66276: POP
// end else
66277: GO 66287
// result := false ;
66279: LD_ADDR_VAR 0 3
66283: PUSH
66284: LD_INT 0
66286: ST_TO_ADDR
// end ;
66287: LD_VAR 0 3
66291: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66292: LD_INT 0
66294: PPUSH
66295: PPUSH
// if not array1 or not array2 then
66296: LD_VAR 0 1
66300: NOT
66301: PUSH
66302: LD_VAR 0 2
66306: NOT
66307: OR
66308: IFFALSE 66312
// exit ;
66310: GO 66376
// result := true ;
66312: LD_ADDR_VAR 0 3
66316: PUSH
66317: LD_INT 1
66319: ST_TO_ADDR
// for i = 1 to array1 do
66320: LD_ADDR_VAR 0 4
66324: PUSH
66325: DOUBLE
66326: LD_INT 1
66328: DEC
66329: ST_TO_ADDR
66330: LD_VAR 0 1
66334: PUSH
66335: FOR_TO
66336: IFFALSE 66374
// if array1 [ i ] <> array2 [ i ] then
66338: LD_VAR 0 1
66342: PUSH
66343: LD_VAR 0 4
66347: ARRAY
66348: PUSH
66349: LD_VAR 0 2
66353: PUSH
66354: LD_VAR 0 4
66358: ARRAY
66359: NONEQUAL
66360: IFFALSE 66372
// begin result := false ;
66362: LD_ADDR_VAR 0 3
66366: PUSH
66367: LD_INT 0
66369: ST_TO_ADDR
// break ;
66370: GO 66374
// end ;
66372: GO 66335
66374: POP
66375: POP
// end ;
66376: LD_VAR 0 3
66380: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66381: LD_INT 0
66383: PPUSH
66384: PPUSH
66385: PPUSH
// pom := GetBase ( fac ) ;
66386: LD_ADDR_VAR 0 5
66390: PUSH
66391: LD_VAR 0 1
66395: PPUSH
66396: CALL_OW 274
66400: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66401: LD_ADDR_VAR 0 4
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: LD_INT 1
66413: ARRAY
66414: PPUSH
66415: LD_VAR 0 2
66419: PUSH
66420: LD_INT 2
66422: ARRAY
66423: PPUSH
66424: LD_VAR 0 2
66428: PUSH
66429: LD_INT 3
66431: ARRAY
66432: PPUSH
66433: LD_VAR 0 2
66437: PUSH
66438: LD_INT 4
66440: ARRAY
66441: PPUSH
66442: CALL_OW 449
66446: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66447: LD_ADDR_VAR 0 3
66451: PUSH
66452: LD_VAR 0 5
66456: PPUSH
66457: LD_INT 1
66459: PPUSH
66460: CALL_OW 275
66464: PUSH
66465: LD_VAR 0 4
66469: PUSH
66470: LD_INT 1
66472: ARRAY
66473: GREATEREQUAL
66474: PUSH
66475: LD_VAR 0 5
66479: PPUSH
66480: LD_INT 2
66482: PPUSH
66483: CALL_OW 275
66487: PUSH
66488: LD_VAR 0 4
66492: PUSH
66493: LD_INT 2
66495: ARRAY
66496: GREATEREQUAL
66497: AND
66498: PUSH
66499: LD_VAR 0 5
66503: PPUSH
66504: LD_INT 3
66506: PPUSH
66507: CALL_OW 275
66511: PUSH
66512: LD_VAR 0 4
66516: PUSH
66517: LD_INT 3
66519: ARRAY
66520: GREATEREQUAL
66521: AND
66522: ST_TO_ADDR
// end ;
66523: LD_VAR 0 3
66527: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
66528: LD_INT 0
66530: PPUSH
66531: PPUSH
66532: PPUSH
66533: PPUSH
// pom := GetBase ( building ) ;
66534: LD_ADDR_VAR 0 3
66538: PUSH
66539: LD_VAR 0 1
66543: PPUSH
66544: CALL_OW 274
66548: ST_TO_ADDR
// if not pom then
66549: LD_VAR 0 3
66553: NOT
66554: IFFALSE 66558
// exit ;
66556: GO 66728
// btype := GetBType ( building ) ;
66558: LD_ADDR_VAR 0 5
66562: PUSH
66563: LD_VAR 0 1
66567: PPUSH
66568: CALL_OW 266
66572: ST_TO_ADDR
// if btype = b_armoury then
66573: LD_VAR 0 5
66577: PUSH
66578: LD_INT 4
66580: EQUAL
66581: IFFALSE 66591
// btype := b_barracks ;
66583: LD_ADDR_VAR 0 5
66587: PUSH
66588: LD_INT 5
66590: ST_TO_ADDR
// if btype = b_depot then
66591: LD_VAR 0 5
66595: PUSH
66596: LD_INT 0
66598: EQUAL
66599: IFFALSE 66609
// btype := b_warehouse ;
66601: LD_ADDR_VAR 0 5
66605: PUSH
66606: LD_INT 1
66608: ST_TO_ADDR
// if btype = b_workshop then
66609: LD_VAR 0 5
66613: PUSH
66614: LD_INT 2
66616: EQUAL
66617: IFFALSE 66627
// btype := b_factory ;
66619: LD_ADDR_VAR 0 5
66623: PUSH
66624: LD_INT 3
66626: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66627: LD_ADDR_VAR 0 4
66631: PUSH
66632: LD_VAR 0 5
66636: PPUSH
66637: LD_VAR 0 1
66641: PPUSH
66642: CALL_OW 248
66646: PPUSH
66647: CALL_OW 450
66651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66652: LD_ADDR_VAR 0 2
66656: PUSH
66657: LD_VAR 0 3
66661: PPUSH
66662: LD_INT 1
66664: PPUSH
66665: CALL_OW 275
66669: PUSH
66670: LD_VAR 0 4
66674: PUSH
66675: LD_INT 1
66677: ARRAY
66678: GREATEREQUAL
66679: PUSH
66680: LD_VAR 0 3
66684: PPUSH
66685: LD_INT 2
66687: PPUSH
66688: CALL_OW 275
66692: PUSH
66693: LD_VAR 0 4
66697: PUSH
66698: LD_INT 2
66700: ARRAY
66701: GREATEREQUAL
66702: AND
66703: PUSH
66704: LD_VAR 0 3
66708: PPUSH
66709: LD_INT 3
66711: PPUSH
66712: CALL_OW 275
66716: PUSH
66717: LD_VAR 0 4
66721: PUSH
66722: LD_INT 3
66724: ARRAY
66725: GREATEREQUAL
66726: AND
66727: ST_TO_ADDR
// end ;
66728: LD_VAR 0 2
66732: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
66733: LD_INT 0
66735: PPUSH
66736: PPUSH
66737: PPUSH
// pom := GetBase ( building ) ;
66738: LD_ADDR_VAR 0 4
66742: PUSH
66743: LD_VAR 0 1
66747: PPUSH
66748: CALL_OW 274
66752: ST_TO_ADDR
// if not pom then
66753: LD_VAR 0 4
66757: NOT
66758: IFFALSE 66762
// exit ;
66760: GO 66863
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66762: LD_ADDR_VAR 0 5
66766: PUSH
66767: LD_VAR 0 2
66771: PPUSH
66772: LD_VAR 0 1
66776: PPUSH
66777: CALL_OW 248
66781: PPUSH
66782: CALL_OW 450
66786: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66787: LD_ADDR_VAR 0 3
66791: PUSH
66792: LD_VAR 0 4
66796: PPUSH
66797: LD_INT 1
66799: PPUSH
66800: CALL_OW 275
66804: PUSH
66805: LD_VAR 0 5
66809: PUSH
66810: LD_INT 1
66812: ARRAY
66813: GREATEREQUAL
66814: PUSH
66815: LD_VAR 0 4
66819: PPUSH
66820: LD_INT 2
66822: PPUSH
66823: CALL_OW 275
66827: PUSH
66828: LD_VAR 0 5
66832: PUSH
66833: LD_INT 2
66835: ARRAY
66836: GREATEREQUAL
66837: AND
66838: PUSH
66839: LD_VAR 0 4
66843: PPUSH
66844: LD_INT 3
66846: PPUSH
66847: CALL_OW 275
66851: PUSH
66852: LD_VAR 0 5
66856: PUSH
66857: LD_INT 3
66859: ARRAY
66860: GREATEREQUAL
66861: AND
66862: ST_TO_ADDR
// end ;
66863: LD_VAR 0 3
66867: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
66868: LD_INT 0
66870: PPUSH
66871: PPUSH
66872: PPUSH
66873: PPUSH
66874: PPUSH
66875: PPUSH
66876: PPUSH
66877: PPUSH
66878: PPUSH
66879: PPUSH
66880: PPUSH
// result := false ;
66881: LD_ADDR_VAR 0 8
66885: PUSH
66886: LD_INT 0
66888: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
66889: LD_VAR 0 5
66893: NOT
66894: PUSH
66895: LD_VAR 0 1
66899: NOT
66900: OR
66901: PUSH
66902: LD_VAR 0 2
66906: NOT
66907: OR
66908: PUSH
66909: LD_VAR 0 3
66913: NOT
66914: OR
66915: IFFALSE 66919
// exit ;
66917: GO 67733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
66919: LD_ADDR_VAR 0 14
66923: PUSH
66924: LD_VAR 0 1
66928: PPUSH
66929: LD_VAR 0 2
66933: PPUSH
66934: LD_VAR 0 3
66938: PPUSH
66939: LD_VAR 0 4
66943: PPUSH
66944: LD_VAR 0 5
66948: PUSH
66949: LD_INT 1
66951: ARRAY
66952: PPUSH
66953: CALL_OW 248
66957: PPUSH
66958: LD_INT 0
66960: PPUSH
66961: CALL 68986 0 6
66965: ST_TO_ADDR
// if not hexes then
66966: LD_VAR 0 14
66970: NOT
66971: IFFALSE 66975
// exit ;
66973: GO 67733
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66975: LD_ADDR_VAR 0 17
66979: PUSH
66980: LD_VAR 0 5
66984: PPUSH
66985: LD_INT 22
66987: PUSH
66988: LD_VAR 0 13
66992: PPUSH
66993: CALL_OW 255
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 30
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 30
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PPUSH
67034: CALL_OW 72
67038: ST_TO_ADDR
// for i = 1 to hexes do
67039: LD_ADDR_VAR 0 9
67043: PUSH
67044: DOUBLE
67045: LD_INT 1
67047: DEC
67048: ST_TO_ADDR
67049: LD_VAR 0 14
67053: PUSH
67054: FOR_TO
67055: IFFALSE 67731
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67057: LD_ADDR_VAR 0 13
67061: PUSH
67062: LD_VAR 0 14
67066: PUSH
67067: LD_VAR 0 9
67071: ARRAY
67072: PUSH
67073: LD_INT 1
67075: ARRAY
67076: PPUSH
67077: LD_VAR 0 14
67081: PUSH
67082: LD_VAR 0 9
67086: ARRAY
67087: PUSH
67088: LD_INT 2
67090: ARRAY
67091: PPUSH
67092: CALL_OW 428
67096: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
67097: LD_VAR 0 14
67101: PUSH
67102: LD_VAR 0 9
67106: ARRAY
67107: PUSH
67108: LD_INT 1
67110: ARRAY
67111: PPUSH
67112: LD_VAR 0 14
67116: PUSH
67117: LD_VAR 0 9
67121: ARRAY
67122: PUSH
67123: LD_INT 2
67125: ARRAY
67126: PPUSH
67127: CALL_OW 351
67131: PUSH
67132: LD_VAR 0 14
67136: PUSH
67137: LD_VAR 0 9
67141: ARRAY
67142: PUSH
67143: LD_INT 1
67145: ARRAY
67146: PPUSH
67147: LD_VAR 0 14
67151: PUSH
67152: LD_VAR 0 9
67156: ARRAY
67157: PUSH
67158: LD_INT 2
67160: ARRAY
67161: PPUSH
67162: CALL_OW 488
67166: NOT
67167: OR
67168: PUSH
67169: LD_VAR 0 13
67173: PPUSH
67174: CALL_OW 247
67178: PUSH
67179: LD_INT 3
67181: EQUAL
67182: OR
67183: IFFALSE 67189
// exit ;
67185: POP
67186: POP
67187: GO 67733
// if not tmp then
67189: LD_VAR 0 13
67193: NOT
67194: IFFALSE 67198
// continue ;
67196: GO 67054
// result := true ;
67198: LD_ADDR_VAR 0 8
67202: PUSH
67203: LD_INT 1
67205: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67206: LD_VAR 0 6
67210: PUSH
67211: LD_VAR 0 13
67215: PPUSH
67216: CALL_OW 247
67220: PUSH
67221: LD_INT 2
67223: EQUAL
67224: AND
67225: PUSH
67226: LD_VAR 0 13
67230: PPUSH
67231: CALL_OW 263
67235: PUSH
67236: LD_INT 1
67238: EQUAL
67239: AND
67240: IFFALSE 67404
// begin if IsDrivenBy ( tmp ) then
67242: LD_VAR 0 13
67246: PPUSH
67247: CALL_OW 311
67251: IFFALSE 67255
// continue ;
67253: GO 67054
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67255: LD_VAR 0 6
67259: PPUSH
67260: LD_INT 3
67262: PUSH
67263: LD_INT 60
67265: PUSH
67266: EMPTY
67267: LIST
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 55
67278: PUSH
67279: EMPTY
67280: LIST
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PPUSH
67290: CALL_OW 72
67294: IFFALSE 67402
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67296: LD_ADDR_VAR 0 18
67300: PUSH
67301: LD_VAR 0 6
67305: PPUSH
67306: LD_INT 3
67308: PUSH
67309: LD_INT 60
67311: PUSH
67312: EMPTY
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: LD_INT 55
67324: PUSH
67325: EMPTY
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PPUSH
67336: CALL_OW 72
67340: PUSH
67341: LD_INT 1
67343: ARRAY
67344: ST_TO_ADDR
// if IsInUnit ( driver ) then
67345: LD_VAR 0 18
67349: PPUSH
67350: CALL_OW 310
67354: IFFALSE 67365
// ComExit ( driver ) ;
67356: LD_VAR 0 18
67360: PPUSH
67361: CALL 92778 0 1
// AddComEnterUnit ( driver , tmp ) ;
67365: LD_VAR 0 18
67369: PPUSH
67370: LD_VAR 0 13
67374: PPUSH
67375: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67379: LD_VAR 0 18
67383: PPUSH
67384: LD_VAR 0 7
67388: PPUSH
67389: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67393: LD_VAR 0 18
67397: PPUSH
67398: CALL_OW 181
// end ; continue ;
67402: GO 67054
// end ; if not cleaners or not tmp in cleaners then
67404: LD_VAR 0 6
67408: NOT
67409: PUSH
67410: LD_VAR 0 13
67414: PUSH
67415: LD_VAR 0 6
67419: IN
67420: NOT
67421: OR
67422: IFFALSE 67729
// begin if dep then
67424: LD_VAR 0 17
67428: IFFALSE 67564
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67430: LD_ADDR_VAR 0 16
67434: PUSH
67435: LD_VAR 0 17
67439: PUSH
67440: LD_INT 1
67442: ARRAY
67443: PPUSH
67444: CALL_OW 250
67448: PPUSH
67449: LD_VAR 0 17
67453: PUSH
67454: LD_INT 1
67456: ARRAY
67457: PPUSH
67458: CALL_OW 254
67462: PPUSH
67463: LD_INT 5
67465: PPUSH
67466: CALL_OW 272
67470: PUSH
67471: LD_VAR 0 17
67475: PUSH
67476: LD_INT 1
67478: ARRAY
67479: PPUSH
67480: CALL_OW 251
67484: PPUSH
67485: LD_VAR 0 17
67489: PUSH
67490: LD_INT 1
67492: ARRAY
67493: PPUSH
67494: CALL_OW 254
67498: PPUSH
67499: LD_INT 5
67501: PPUSH
67502: CALL_OW 273
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
67511: LD_VAR 0 16
67515: PUSH
67516: LD_INT 1
67518: ARRAY
67519: PPUSH
67520: LD_VAR 0 16
67524: PUSH
67525: LD_INT 2
67527: ARRAY
67528: PPUSH
67529: CALL_OW 488
67533: IFFALSE 67564
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
67535: LD_VAR 0 13
67539: PPUSH
67540: LD_VAR 0 16
67544: PUSH
67545: LD_INT 1
67547: ARRAY
67548: PPUSH
67549: LD_VAR 0 16
67553: PUSH
67554: LD_INT 2
67556: ARRAY
67557: PPUSH
67558: CALL_OW 111
// continue ;
67562: GO 67054
// end ; end ; r := GetDir ( tmp ) ;
67564: LD_ADDR_VAR 0 15
67568: PUSH
67569: LD_VAR 0 13
67573: PPUSH
67574: CALL_OW 254
67578: ST_TO_ADDR
// if r = 5 then
67579: LD_VAR 0 15
67583: PUSH
67584: LD_INT 5
67586: EQUAL
67587: IFFALSE 67597
// r := 0 ;
67589: LD_ADDR_VAR 0 15
67593: PUSH
67594: LD_INT 0
67596: ST_TO_ADDR
// for j = r to 5 do
67597: LD_ADDR_VAR 0 10
67601: PUSH
67602: DOUBLE
67603: LD_VAR 0 15
67607: DEC
67608: ST_TO_ADDR
67609: LD_INT 5
67611: PUSH
67612: FOR_TO
67613: IFFALSE 67727
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
67615: LD_ADDR_VAR 0 11
67619: PUSH
67620: LD_VAR 0 13
67624: PPUSH
67625: CALL_OW 250
67629: PPUSH
67630: LD_VAR 0 10
67634: PPUSH
67635: LD_INT 2
67637: PPUSH
67638: CALL_OW 272
67642: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
67643: LD_ADDR_VAR 0 12
67647: PUSH
67648: LD_VAR 0 13
67652: PPUSH
67653: CALL_OW 251
67657: PPUSH
67658: LD_VAR 0 10
67662: PPUSH
67663: LD_INT 2
67665: PPUSH
67666: CALL_OW 273
67670: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
67671: LD_VAR 0 11
67675: PPUSH
67676: LD_VAR 0 12
67680: PPUSH
67681: CALL_OW 488
67685: PUSH
67686: LD_VAR 0 11
67690: PPUSH
67691: LD_VAR 0 12
67695: PPUSH
67696: CALL_OW 428
67700: NOT
67701: AND
67702: IFFALSE 67725
// begin ComMoveXY ( tmp , _x , _y ) ;
67704: LD_VAR 0 13
67708: PPUSH
67709: LD_VAR 0 11
67713: PPUSH
67714: LD_VAR 0 12
67718: PPUSH
67719: CALL_OW 111
// break ;
67723: GO 67727
// end ; end ;
67725: GO 67612
67727: POP
67728: POP
// end ; end ;
67729: GO 67054
67731: POP
67732: POP
// end ;
67733: LD_VAR 0 8
67737: RET
// export function BuildingTechInvented ( side , btype ) ; begin
67738: LD_INT 0
67740: PPUSH
// result := true ;
67741: LD_ADDR_VAR 0 3
67745: PUSH
67746: LD_INT 1
67748: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
67749: LD_VAR 0 2
67753: PUSH
67754: LD_INT 24
67756: DOUBLE
67757: EQUAL
67758: IFTRUE 67768
67760: LD_INT 33
67762: DOUBLE
67763: EQUAL
67764: IFTRUE 67768
67766: GO 67793
67768: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
67769: LD_ADDR_VAR 0 3
67773: PUSH
67774: LD_INT 32
67776: PPUSH
67777: LD_VAR 0 1
67781: PPUSH
67782: CALL_OW 321
67786: PUSH
67787: LD_INT 2
67789: EQUAL
67790: ST_TO_ADDR
67791: GO 68109
67793: LD_INT 20
67795: DOUBLE
67796: EQUAL
67797: IFTRUE 67801
67799: GO 67826
67801: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
67802: LD_ADDR_VAR 0 3
67806: PUSH
67807: LD_INT 6
67809: PPUSH
67810: LD_VAR 0 1
67814: PPUSH
67815: CALL_OW 321
67819: PUSH
67820: LD_INT 2
67822: EQUAL
67823: ST_TO_ADDR
67824: GO 68109
67826: LD_INT 22
67828: DOUBLE
67829: EQUAL
67830: IFTRUE 67840
67832: LD_INT 36
67834: DOUBLE
67835: EQUAL
67836: IFTRUE 67840
67838: GO 67865
67840: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: LD_INT 15
67848: PPUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: CALL_OW 321
67858: PUSH
67859: LD_INT 2
67861: EQUAL
67862: ST_TO_ADDR
67863: GO 68109
67865: LD_INT 30
67867: DOUBLE
67868: EQUAL
67869: IFTRUE 67873
67871: GO 67898
67873: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
67874: LD_ADDR_VAR 0 3
67878: PUSH
67879: LD_INT 20
67881: PPUSH
67882: LD_VAR 0 1
67886: PPUSH
67887: CALL_OW 321
67891: PUSH
67892: LD_INT 2
67894: EQUAL
67895: ST_TO_ADDR
67896: GO 68109
67898: LD_INT 28
67900: DOUBLE
67901: EQUAL
67902: IFTRUE 67912
67904: LD_INT 21
67906: DOUBLE
67907: EQUAL
67908: IFTRUE 67912
67910: GO 67937
67912: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
67913: LD_ADDR_VAR 0 3
67917: PUSH
67918: LD_INT 21
67920: PPUSH
67921: LD_VAR 0 1
67925: PPUSH
67926: CALL_OW 321
67930: PUSH
67931: LD_INT 2
67933: EQUAL
67934: ST_TO_ADDR
67935: GO 68109
67937: LD_INT 16
67939: DOUBLE
67940: EQUAL
67941: IFTRUE 67945
67943: GO 67970
67945: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
67946: LD_ADDR_VAR 0 3
67950: PUSH
67951: LD_INT 84
67953: PPUSH
67954: LD_VAR 0 1
67958: PPUSH
67959: CALL_OW 321
67963: PUSH
67964: LD_INT 2
67966: EQUAL
67967: ST_TO_ADDR
67968: GO 68109
67970: LD_INT 19
67972: DOUBLE
67973: EQUAL
67974: IFTRUE 67984
67976: LD_INT 23
67978: DOUBLE
67979: EQUAL
67980: IFTRUE 67984
67982: GO 68009
67984: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
67985: LD_ADDR_VAR 0 3
67989: PUSH
67990: LD_INT 83
67992: PPUSH
67993: LD_VAR 0 1
67997: PPUSH
67998: CALL_OW 321
68002: PUSH
68003: LD_INT 2
68005: EQUAL
68006: ST_TO_ADDR
68007: GO 68109
68009: LD_INT 17
68011: DOUBLE
68012: EQUAL
68013: IFTRUE 68017
68015: GO 68042
68017: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
68018: LD_ADDR_VAR 0 3
68022: PUSH
68023: LD_INT 39
68025: PPUSH
68026: LD_VAR 0 1
68030: PPUSH
68031: CALL_OW 321
68035: PUSH
68036: LD_INT 2
68038: EQUAL
68039: ST_TO_ADDR
68040: GO 68109
68042: LD_INT 18
68044: DOUBLE
68045: EQUAL
68046: IFTRUE 68050
68048: GO 68075
68050: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
68051: LD_ADDR_VAR 0 3
68055: PUSH
68056: LD_INT 40
68058: PPUSH
68059: LD_VAR 0 1
68063: PPUSH
68064: CALL_OW 321
68068: PUSH
68069: LD_INT 2
68071: EQUAL
68072: ST_TO_ADDR
68073: GO 68109
68075: LD_INT 27
68077: DOUBLE
68078: EQUAL
68079: IFTRUE 68083
68081: GO 68108
68083: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
68084: LD_ADDR_VAR 0 3
68088: PUSH
68089: LD_INT 35
68091: PPUSH
68092: LD_VAR 0 1
68096: PPUSH
68097: CALL_OW 321
68101: PUSH
68102: LD_INT 2
68104: EQUAL
68105: ST_TO_ADDR
68106: GO 68109
68108: POP
// end ;
68109: LD_VAR 0 3
68113: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
68114: LD_INT 0
68116: PPUSH
68117: PPUSH
68118: PPUSH
68119: PPUSH
68120: PPUSH
68121: PPUSH
68122: PPUSH
68123: PPUSH
68124: PPUSH
68125: PPUSH
68126: PPUSH
// result := false ;
68127: LD_ADDR_VAR 0 6
68131: PUSH
68132: LD_INT 0
68134: ST_TO_ADDR
// if btype = b_depot then
68135: LD_VAR 0 2
68139: PUSH
68140: LD_INT 0
68142: EQUAL
68143: IFFALSE 68155
// begin result := true ;
68145: LD_ADDR_VAR 0 6
68149: PUSH
68150: LD_INT 1
68152: ST_TO_ADDR
// exit ;
68153: GO 68981
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
68155: LD_VAR 0 1
68159: NOT
68160: PUSH
68161: LD_VAR 0 1
68165: PPUSH
68166: CALL_OW 266
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: IN
68181: NOT
68182: OR
68183: PUSH
68184: LD_VAR 0 2
68188: NOT
68189: OR
68190: PUSH
68191: LD_VAR 0 5
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: LD_INT 2
68204: PUSH
68205: LD_INT 3
68207: PUSH
68208: LD_INT 4
68210: PUSH
68211: LD_INT 5
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: IN
68222: NOT
68223: OR
68224: PUSH
68225: LD_VAR 0 3
68229: PPUSH
68230: LD_VAR 0 4
68234: PPUSH
68235: CALL_OW 488
68239: NOT
68240: OR
68241: IFFALSE 68245
// exit ;
68243: GO 68981
// side := GetSide ( depot ) ;
68245: LD_ADDR_VAR 0 9
68249: PUSH
68250: LD_VAR 0 1
68254: PPUSH
68255: CALL_OW 255
68259: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68260: LD_VAR 0 9
68264: PPUSH
68265: LD_VAR 0 2
68269: PPUSH
68270: CALL 67738 0 2
68274: NOT
68275: IFFALSE 68279
// exit ;
68277: GO 68981
// pom := GetBase ( depot ) ;
68279: LD_ADDR_VAR 0 10
68283: PUSH
68284: LD_VAR 0 1
68288: PPUSH
68289: CALL_OW 274
68293: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68294: LD_ADDR_VAR 0 11
68298: PUSH
68299: LD_VAR 0 2
68303: PPUSH
68304: LD_VAR 0 1
68308: PPUSH
68309: CALL_OW 248
68313: PPUSH
68314: CALL_OW 450
68318: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68319: LD_VAR 0 10
68323: PPUSH
68324: LD_INT 1
68326: PPUSH
68327: CALL_OW 275
68331: PUSH
68332: LD_VAR 0 11
68336: PUSH
68337: LD_INT 1
68339: ARRAY
68340: GREATEREQUAL
68341: PUSH
68342: LD_VAR 0 10
68346: PPUSH
68347: LD_INT 2
68349: PPUSH
68350: CALL_OW 275
68354: PUSH
68355: LD_VAR 0 11
68359: PUSH
68360: LD_INT 2
68362: ARRAY
68363: GREATEREQUAL
68364: AND
68365: PUSH
68366: LD_VAR 0 10
68370: PPUSH
68371: LD_INT 3
68373: PPUSH
68374: CALL_OW 275
68378: PUSH
68379: LD_VAR 0 11
68383: PUSH
68384: LD_INT 3
68386: ARRAY
68387: GREATEREQUAL
68388: AND
68389: NOT
68390: IFFALSE 68394
// exit ;
68392: GO 68981
// if GetBType ( depot ) = b_depot then
68394: LD_VAR 0 1
68398: PPUSH
68399: CALL_OW 266
68403: PUSH
68404: LD_INT 0
68406: EQUAL
68407: IFFALSE 68419
// dist := 28 else
68409: LD_ADDR_VAR 0 14
68413: PUSH
68414: LD_INT 28
68416: ST_TO_ADDR
68417: GO 68427
// dist := 36 ;
68419: LD_ADDR_VAR 0 14
68423: PUSH
68424: LD_INT 36
68426: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_VAR 0 3
68436: PPUSH
68437: LD_VAR 0 4
68441: PPUSH
68442: CALL_OW 297
68446: PUSH
68447: LD_VAR 0 14
68451: GREATER
68452: IFFALSE 68456
// exit ;
68454: GO 68981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68456: LD_ADDR_VAR 0 12
68460: PUSH
68461: LD_VAR 0 2
68465: PPUSH
68466: LD_VAR 0 3
68470: PPUSH
68471: LD_VAR 0 4
68475: PPUSH
68476: LD_VAR 0 5
68480: PPUSH
68481: LD_VAR 0 1
68485: PPUSH
68486: CALL_OW 248
68490: PPUSH
68491: LD_INT 0
68493: PPUSH
68494: CALL 68986 0 6
68498: ST_TO_ADDR
// if not hexes then
68499: LD_VAR 0 12
68503: NOT
68504: IFFALSE 68508
// exit ;
68506: GO 68981
// hex := GetHexInfo ( x , y ) ;
68508: LD_ADDR_VAR 0 15
68512: PUSH
68513: LD_VAR 0 3
68517: PPUSH
68518: LD_VAR 0 4
68522: PPUSH
68523: CALL_OW 546
68527: ST_TO_ADDR
// if hex [ 1 ] then
68528: LD_VAR 0 15
68532: PUSH
68533: LD_INT 1
68535: ARRAY
68536: IFFALSE 68540
// exit ;
68538: GO 68981
// height := hex [ 2 ] ;
68540: LD_ADDR_VAR 0 13
68544: PUSH
68545: LD_VAR 0 15
68549: PUSH
68550: LD_INT 2
68552: ARRAY
68553: ST_TO_ADDR
// for i = 1 to hexes do
68554: LD_ADDR_VAR 0 7
68558: PUSH
68559: DOUBLE
68560: LD_INT 1
68562: DEC
68563: ST_TO_ADDR
68564: LD_VAR 0 12
68568: PUSH
68569: FOR_TO
68570: IFFALSE 68900
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
68572: LD_VAR 0 12
68576: PUSH
68577: LD_VAR 0 7
68581: ARRAY
68582: PUSH
68583: LD_INT 1
68585: ARRAY
68586: PPUSH
68587: LD_VAR 0 12
68591: PUSH
68592: LD_VAR 0 7
68596: ARRAY
68597: PUSH
68598: LD_INT 2
68600: ARRAY
68601: PPUSH
68602: CALL_OW 488
68606: NOT
68607: PUSH
68608: LD_VAR 0 12
68612: PUSH
68613: LD_VAR 0 7
68617: ARRAY
68618: PUSH
68619: LD_INT 1
68621: ARRAY
68622: PPUSH
68623: LD_VAR 0 12
68627: PUSH
68628: LD_VAR 0 7
68632: ARRAY
68633: PUSH
68634: LD_INT 2
68636: ARRAY
68637: PPUSH
68638: CALL_OW 428
68642: PUSH
68643: LD_INT 0
68645: GREATER
68646: OR
68647: PUSH
68648: LD_VAR 0 12
68652: PUSH
68653: LD_VAR 0 7
68657: ARRAY
68658: PUSH
68659: LD_INT 1
68661: ARRAY
68662: PPUSH
68663: LD_VAR 0 12
68667: PUSH
68668: LD_VAR 0 7
68672: ARRAY
68673: PUSH
68674: LD_INT 2
68676: ARRAY
68677: PPUSH
68678: CALL_OW 351
68682: OR
68683: IFFALSE 68689
// exit ;
68685: POP
68686: POP
68687: GO 68981
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68689: LD_ADDR_VAR 0 8
68693: PUSH
68694: LD_VAR 0 12
68698: PUSH
68699: LD_VAR 0 7
68703: ARRAY
68704: PUSH
68705: LD_INT 1
68707: ARRAY
68708: PPUSH
68709: LD_VAR 0 12
68713: PUSH
68714: LD_VAR 0 7
68718: ARRAY
68719: PUSH
68720: LD_INT 2
68722: ARRAY
68723: PPUSH
68724: CALL_OW 546
68728: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
68729: LD_VAR 0 8
68733: PUSH
68734: LD_INT 1
68736: ARRAY
68737: PUSH
68738: LD_VAR 0 8
68742: PUSH
68743: LD_INT 2
68745: ARRAY
68746: PUSH
68747: LD_VAR 0 13
68751: PUSH
68752: LD_INT 2
68754: PLUS
68755: GREATER
68756: OR
68757: PUSH
68758: LD_VAR 0 8
68762: PUSH
68763: LD_INT 2
68765: ARRAY
68766: PUSH
68767: LD_VAR 0 13
68771: PUSH
68772: LD_INT 2
68774: MINUS
68775: LESS
68776: OR
68777: PUSH
68778: LD_VAR 0 8
68782: PUSH
68783: LD_INT 3
68785: ARRAY
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: LD_INT 8
68792: PUSH
68793: LD_INT 9
68795: PUSH
68796: LD_INT 10
68798: PUSH
68799: LD_INT 11
68801: PUSH
68802: LD_INT 12
68804: PUSH
68805: LD_INT 13
68807: PUSH
68808: LD_INT 16
68810: PUSH
68811: LD_INT 17
68813: PUSH
68814: LD_INT 18
68816: PUSH
68817: LD_INT 19
68819: PUSH
68820: LD_INT 20
68822: PUSH
68823: LD_INT 21
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: IN
68841: NOT
68842: OR
68843: PUSH
68844: LD_VAR 0 8
68848: PUSH
68849: LD_INT 5
68851: ARRAY
68852: NOT
68853: OR
68854: PUSH
68855: LD_VAR 0 8
68859: PUSH
68860: LD_INT 6
68862: ARRAY
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: LD_INT 2
68869: PUSH
68870: LD_INT 7
68872: PUSH
68873: LD_INT 9
68875: PUSH
68876: LD_INT 10
68878: PUSH
68879: LD_INT 11
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: IN
68890: NOT
68891: OR
68892: IFFALSE 68898
// exit ;
68894: POP
68895: POP
68896: GO 68981
// end ;
68898: GO 68569
68900: POP
68901: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68902: LD_VAR 0 9
68906: PPUSH
68907: LD_VAR 0 3
68911: PPUSH
68912: LD_VAR 0 4
68916: PPUSH
68917: LD_INT 20
68919: PPUSH
68920: CALL 60904 0 4
68924: PUSH
68925: LD_INT 4
68927: ARRAY
68928: IFFALSE 68932
// exit ;
68930: GO 68981
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
68932: LD_VAR 0 2
68936: PUSH
68937: LD_INT 29
68939: PUSH
68940: LD_INT 30
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: IN
68947: PUSH
68948: LD_VAR 0 3
68952: PPUSH
68953: LD_VAR 0 4
68957: PPUSH
68958: LD_VAR 0 9
68962: PPUSH
68963: CALL_OW 440
68967: NOT
68968: AND
68969: IFFALSE 68973
// exit ;
68971: GO 68981
// result := true ;
68973: LD_ADDR_VAR 0 6
68977: PUSH
68978: LD_INT 1
68980: ST_TO_ADDR
// end ;
68981: LD_VAR 0 6
68985: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
68986: LD_INT 0
68988: PPUSH
68989: PPUSH
68990: PPUSH
68991: PPUSH
68992: PPUSH
68993: PPUSH
68994: PPUSH
68995: PPUSH
68996: PPUSH
68997: PPUSH
68998: PPUSH
68999: PPUSH
69000: PPUSH
69001: PPUSH
69002: PPUSH
69003: PPUSH
69004: PPUSH
69005: PPUSH
69006: PPUSH
69007: PPUSH
69008: PPUSH
69009: PPUSH
69010: PPUSH
69011: PPUSH
69012: PPUSH
69013: PPUSH
69014: PPUSH
69015: PPUSH
69016: PPUSH
69017: PPUSH
69018: PPUSH
69019: PPUSH
69020: PPUSH
69021: PPUSH
69022: PPUSH
69023: PPUSH
69024: PPUSH
69025: PPUSH
69026: PPUSH
69027: PPUSH
69028: PPUSH
69029: PPUSH
69030: PPUSH
69031: PPUSH
69032: PPUSH
69033: PPUSH
69034: PPUSH
69035: PPUSH
69036: PPUSH
69037: PPUSH
69038: PPUSH
69039: PPUSH
69040: PPUSH
69041: PPUSH
69042: PPUSH
69043: PPUSH
69044: PPUSH
69045: PPUSH
// result = [ ] ;
69046: LD_ADDR_VAR 0 7
69050: PUSH
69051: EMPTY
69052: ST_TO_ADDR
// temp_list = [ ] ;
69053: LD_ADDR_VAR 0 9
69057: PUSH
69058: EMPTY
69059: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
69060: LD_VAR 0 4
69064: PUSH
69065: LD_INT 0
69067: PUSH
69068: LD_INT 1
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: LD_INT 3
69076: PUSH
69077: LD_INT 4
69079: PUSH
69080: LD_INT 5
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: IN
69091: NOT
69092: PUSH
69093: LD_VAR 0 1
69097: PUSH
69098: LD_INT 0
69100: PUSH
69101: LD_INT 1
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: IN
69108: PUSH
69109: LD_VAR 0 5
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: LD_INT 3
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: LIST
69127: IN
69128: NOT
69129: AND
69130: OR
69131: IFFALSE 69135
// exit ;
69133: GO 87526
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
69135: LD_VAR 0 1
69139: PUSH
69140: LD_INT 6
69142: PUSH
69143: LD_INT 7
69145: PUSH
69146: LD_INT 8
69148: PUSH
69149: LD_INT 13
69151: PUSH
69152: LD_INT 12
69154: PUSH
69155: LD_INT 15
69157: PUSH
69158: LD_INT 11
69160: PUSH
69161: LD_INT 14
69163: PUSH
69164: LD_INT 10
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: IN
69178: IFFALSE 69188
// btype = b_lab ;
69180: LD_ADDR_VAR 0 1
69184: PUSH
69185: LD_INT 6
69187: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69188: LD_VAR 0 6
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 1
69198: PUSH
69199: LD_INT 2
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: IN
69207: NOT
69208: PUSH
69209: LD_VAR 0 1
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: LD_INT 2
69222: PUSH
69223: LD_INT 3
69225: PUSH
69226: LD_INT 6
69228: PUSH
69229: LD_INT 36
69231: PUSH
69232: LD_INT 4
69234: PUSH
69235: LD_INT 5
69237: PUSH
69238: LD_INT 31
69240: PUSH
69241: LD_INT 32
69243: PUSH
69244: LD_INT 33
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: IN
69260: NOT
69261: PUSH
69262: LD_VAR 0 6
69266: PUSH
69267: LD_INT 1
69269: EQUAL
69270: AND
69271: OR
69272: PUSH
69273: LD_VAR 0 1
69277: PUSH
69278: LD_INT 2
69280: PUSH
69281: LD_INT 3
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: IN
69288: NOT
69289: PUSH
69290: LD_VAR 0 6
69294: PUSH
69295: LD_INT 2
69297: EQUAL
69298: AND
69299: OR
69300: IFFALSE 69310
// mode = 0 ;
69302: LD_ADDR_VAR 0 6
69306: PUSH
69307: LD_INT 0
69309: ST_TO_ADDR
// case mode of 0 :
69310: LD_VAR 0 6
69314: PUSH
69315: LD_INT 0
69317: DOUBLE
69318: EQUAL
69319: IFTRUE 69323
69321: GO 80776
69323: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69324: LD_ADDR_VAR 0 11
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 0
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 1
69344: NEG
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 1
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: LD_INT 2
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: LD_INT 2
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: LD_INT 1
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 3
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: LD_INT 3
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: LD_INT 2
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69517: LD_ADDR_VAR 0 12
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 1
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: LD_INT 0
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 1
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: LD_INT 1
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 1
69575: NEG
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: LD_INT 1
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 1
69629: NEG
69630: PUSH
69631: LD_INT 1
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 2
69640: NEG
69641: PUSH
69642: LD_INT 0
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 2
69651: NEG
69652: PUSH
69653: LD_INT 1
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 2
69663: NEG
69664: PUSH
69665: LD_INT 1
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 3
69674: NEG
69675: PUSH
69676: LD_INT 0
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 3
69685: NEG
69686: PUSH
69687: LD_INT 1
69689: NEG
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69713: LD_ADDR_VAR 0 13
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 0
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: LD_INT 1
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 1
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: LD_INT 1
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 1
69782: NEG
69783: PUSH
69784: LD_INT 1
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 1
69794: NEG
69795: PUSH
69796: LD_INT 2
69798: NEG
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 2
69806: PUSH
69807: LD_INT 1
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: LD_INT 2
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: LD_INT 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 2
69848: NEG
69849: PUSH
69850: LD_INT 2
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 2
69860: NEG
69861: PUSH
69862: LD_INT 3
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 3
69872: NEG
69873: PUSH
69874: LD_INT 2
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 3
69884: NEG
69885: PUSH
69886: LD_INT 3
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69912: LD_ADDR_VAR 0 14
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: LD_INT 1
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 1
69940: PUSH
69941: LD_INT 0
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 1
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: LD_INT 1
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 1
69970: NEG
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: LD_INT 1
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 1
69993: NEG
69994: PUSH
69995: LD_INT 2
69997: NEG
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: LD_INT 2
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 1
70016: PUSH
70017: LD_INT 1
70019: NEG
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 1
70027: PUSH
70028: LD_INT 2
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 2
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 1
70047: NEG
70048: PUSH
70049: LD_INT 1
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 1
70058: NEG
70059: PUSH
70060: LD_INT 3
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 0
70070: PUSH
70071: LD_INT 3
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 1
70081: PUSH
70082: LD_INT 2
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70108: LD_ADDR_VAR 0 15
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: LD_INT 1
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 1
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: LD_INT 1
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 1
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 1
70166: NEG
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 1
70177: NEG
70178: PUSH
70179: LD_INT 1
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 1
70189: PUSH
70190: LD_INT 1
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 2
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 2
70210: PUSH
70211: LD_INT 1
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: LD_INT 1
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 2
70231: NEG
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 2
70242: NEG
70243: PUSH
70244: LD_INT 1
70246: NEG
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: LD_INT 1
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 3
70275: PUSH
70276: LD_INT 1
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70301: LD_ADDR_VAR 0 16
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 0
70318: PUSH
70319: LD_INT 1
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: LD_INT 0
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 1
70339: PUSH
70340: LD_INT 1
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 1
70359: NEG
70360: PUSH
70361: LD_INT 0
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 1
70370: NEG
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 1
70382: NEG
70383: PUSH
70384: LD_INT 2
70386: NEG
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 2
70394: PUSH
70395: LD_INT 1
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 2
70404: PUSH
70405: LD_INT 2
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 1
70414: PUSH
70415: LD_INT 2
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 2
70424: NEG
70425: PUSH
70426: LD_INT 1
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 2
70436: NEG
70437: PUSH
70438: LD_INT 2
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 3
70448: PUSH
70449: LD_INT 2
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 3
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 2
70468: PUSH
70469: LD_INT 3
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70494: LD_ADDR_VAR 0 17
70498: PUSH
70499: LD_INT 0
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: LD_INT 1
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: LD_INT 0
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 1
70532: PUSH
70533: LD_INT 1
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: LD_INT 1
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 1
70552: NEG
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: LD_INT 1
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 1
70575: NEG
70576: PUSH
70577: LD_INT 2
70579: NEG
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 0
70587: PUSH
70588: LD_INT 2
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 1
70598: PUSH
70599: LD_INT 1
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 2
70609: PUSH
70610: LD_INT 0
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 2
70619: PUSH
70620: LD_INT 1
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 2
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 1
70639: PUSH
70640: LD_INT 2
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_INT 2
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 1
70659: NEG
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 2
70670: NEG
70671: PUSH
70672: LD_INT 0
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: LD_INT 1
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: NEG
70694: PUSH
70695: LD_INT 2
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70724: LD_ADDR_VAR 0 18
70728: PUSH
70729: LD_INT 0
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 0
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 1
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 0
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 1
70782: NEG
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: LD_INT 2
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 0
70817: PUSH
70818: LD_INT 2
70820: NEG
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 1
70828: PUSH
70829: LD_INT 1
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: LD_INT 0
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 2
70849: PUSH
70850: LD_INT 1
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 2
70859: PUSH
70860: LD_INT 2
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: LD_INT 2
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: LD_INT 2
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: NEG
70890: PUSH
70891: LD_INT 1
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 2
70900: NEG
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 2
70911: NEG
70912: PUSH
70913: LD_INT 1
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 2
70923: NEG
70924: PUSH
70925: LD_INT 2
70927: NEG
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70954: LD_ADDR_VAR 0 19
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: LD_INT 0
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: LD_INT 1
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 1
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 1
70992: PUSH
70993: LD_INT 1
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 0
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 1
71012: NEG
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: LD_INT 1
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 1
71035: NEG
71036: PUSH
71037: LD_INT 2
71039: NEG
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 0
71047: PUSH
71048: LD_INT 2
71050: NEG
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 1
71058: PUSH
71059: LD_INT 1
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 2
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 2
71079: PUSH
71080: LD_INT 1
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 2
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 1
71099: PUSH
71100: LD_INT 2
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: LD_INT 2
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 1
71119: NEG
71120: PUSH
71121: LD_INT 1
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 2
71130: NEG
71131: PUSH
71132: LD_INT 0
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 2
71141: NEG
71142: PUSH
71143: LD_INT 1
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 2
71153: NEG
71154: PUSH
71155: LD_INT 2
71157: NEG
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71184: LD_ADDR_VAR 0 20
71188: PUSH
71189: LD_INT 0
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 0
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 1
71212: PUSH
71213: LD_INT 0
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 1
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: LD_INT 1
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 1
71242: NEG
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 1
71253: NEG
71254: PUSH
71255: LD_INT 1
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 1
71265: NEG
71266: PUSH
71267: LD_INT 2
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 0
71277: PUSH
71278: LD_INT 2
71280: NEG
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 1
71288: PUSH
71289: LD_INT 1
71291: NEG
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 2
71299: PUSH
71300: LD_INT 0
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 2
71309: PUSH
71310: LD_INT 1
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 2
71319: PUSH
71320: LD_INT 2
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 1
71329: PUSH
71330: LD_INT 2
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: LD_INT 2
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 1
71349: NEG
71350: PUSH
71351: LD_INT 1
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 2
71360: NEG
71361: PUSH
71362: LD_INT 0
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 2
71371: NEG
71372: PUSH
71373: LD_INT 1
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: LD_INT 2
71387: NEG
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71414: LD_ADDR_VAR 0 21
71418: PUSH
71419: LD_INT 0
71421: PUSH
71422: LD_INT 0
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: LD_INT 1
71434: NEG
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 1
71442: PUSH
71443: LD_INT 0
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 1
71452: PUSH
71453: LD_INT 1
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: LD_INT 1
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 1
71472: NEG
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: LD_INT 1
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 1
71495: NEG
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 0
71507: PUSH
71508: LD_INT 2
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 1
71518: PUSH
71519: LD_INT 1
71521: NEG
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 2
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 2
71539: PUSH
71540: LD_INT 1
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 2
71549: PUSH
71550: LD_INT 2
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 1
71559: PUSH
71560: LD_INT 2
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 0
71569: PUSH
71570: LD_INT 2
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 1
71579: NEG
71580: PUSH
71581: LD_INT 1
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 2
71590: NEG
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 2
71601: NEG
71602: PUSH
71603: LD_INT 1
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: NEG
71614: PUSH
71615: LD_INT 2
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71644: LD_ADDR_VAR 0 22
71648: PUSH
71649: LD_INT 0
71651: PUSH
71652: LD_INT 0
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 1
71672: PUSH
71673: LD_INT 0
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 1
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 0
71692: PUSH
71693: LD_INT 1
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 1
71702: NEG
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 1
71713: NEG
71714: PUSH
71715: LD_INT 1
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 1
71725: NEG
71726: PUSH
71727: LD_INT 2
71729: NEG
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: LD_INT 2
71740: NEG
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 1
71748: PUSH
71749: LD_INT 1
71751: NEG
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 2
71759: PUSH
71760: LD_INT 0
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 2
71769: PUSH
71770: LD_INT 1
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 2
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: PUSH
71790: LD_INT 2
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 0
71799: PUSH
71800: LD_INT 2
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 1
71809: NEG
71810: PUSH
71811: LD_INT 1
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 2
71820: NEG
71821: PUSH
71822: LD_INT 0
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 2
71831: NEG
71832: PUSH
71833: LD_INT 1
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 2
71843: NEG
71844: PUSH
71845: LD_INT 2
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71874: LD_ADDR_VAR 0 23
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: LD_INT 0
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 0
71891: PUSH
71892: LD_INT 1
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 1
71902: PUSH
71903: LD_INT 0
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 1
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 0
71922: PUSH
71923: LD_INT 1
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: LD_INT 1
71932: NEG
71933: PUSH
71934: LD_INT 0
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 1
71943: NEG
71944: PUSH
71945: LD_INT 1
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 1
71955: NEG
71956: PUSH
71957: LD_INT 2
71959: NEG
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 0
71967: PUSH
71968: LD_INT 2
71970: NEG
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 1
71978: PUSH
71979: LD_INT 1
71981: NEG
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 2
71989: PUSH
71990: LD_INT 0
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 2
71999: PUSH
72000: LD_INT 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 2
72009: PUSH
72010: LD_INT 2
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 1
72019: PUSH
72020: LD_INT 2
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 0
72029: PUSH
72030: LD_INT 2
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 1
72039: NEG
72040: PUSH
72041: LD_INT 1
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 2
72050: NEG
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 2
72061: NEG
72062: PUSH
72063: LD_INT 1
72065: NEG
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 2
72073: NEG
72074: PUSH
72075: LD_INT 2
72077: NEG
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 2
72085: NEG
72086: PUSH
72087: LD_INT 3
72089: NEG
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 1
72097: NEG
72098: PUSH
72099: LD_INT 3
72101: NEG
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 1
72109: PUSH
72110: LD_INT 2
72112: NEG
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 2
72120: PUSH
72121: LD_INT 1
72123: NEG
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
72154: LD_ADDR_VAR 0 24
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: LD_INT 0
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 0
72171: PUSH
72172: LD_INT 1
72174: NEG
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 1
72182: PUSH
72183: LD_INT 0
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 1
72192: PUSH
72193: LD_INT 1
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: LD_INT 1
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: LD_INT 1
72212: NEG
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 1
72223: NEG
72224: PUSH
72225: LD_INT 1
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 1
72235: NEG
72236: PUSH
72237: LD_INT 2
72239: NEG
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 0
72247: PUSH
72248: LD_INT 2
72250: NEG
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 1
72258: PUSH
72259: LD_INT 1
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 2
72269: PUSH
72270: LD_INT 0
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 2
72279: PUSH
72280: LD_INT 1
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 2
72289: PUSH
72290: LD_INT 2
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 1
72299: PUSH
72300: LD_INT 2
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 0
72309: PUSH
72310: LD_INT 2
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 1
72319: NEG
72320: PUSH
72321: LD_INT 1
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 2
72330: NEG
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: LD_INT 1
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 2
72353: NEG
72354: PUSH
72355: LD_INT 2
72357: NEG
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 1
72365: PUSH
72366: LD_INT 2
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 2
72376: PUSH
72377: LD_INT 1
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: PUSH
72388: LD_INT 1
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 3
72397: PUSH
72398: LD_INT 2
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72430: LD_ADDR_VAR 0 25
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: LD_INT 0
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: LD_INT 1
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 1
72458: PUSH
72459: LD_INT 0
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 1
72468: PUSH
72469: LD_INT 1
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 0
72478: PUSH
72479: LD_INT 1
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 1
72488: NEG
72489: PUSH
72490: LD_INT 0
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 1
72499: NEG
72500: PUSH
72501: LD_INT 1
72503: NEG
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 1
72511: NEG
72512: PUSH
72513: LD_INT 2
72515: NEG
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 0
72523: PUSH
72524: LD_INT 2
72526: NEG
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: LD_INT 1
72537: NEG
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 2
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 2
72555: PUSH
72556: LD_INT 1
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 2
72565: PUSH
72566: LD_INT 2
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 1
72575: PUSH
72576: LD_INT 2
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 0
72585: PUSH
72586: LD_INT 2
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 1
72595: NEG
72596: PUSH
72597: LD_INT 1
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 2
72606: NEG
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 2
72617: NEG
72618: PUSH
72619: LD_INT 1
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 2
72629: NEG
72630: PUSH
72631: LD_INT 2
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 3
72641: PUSH
72642: LD_INT 1
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 3
72651: PUSH
72652: LD_INT 2
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 2
72661: PUSH
72662: LD_INT 3
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 1
72671: PUSH
72672: LD_INT 3
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72704: LD_ADDR_VAR 0 26
72708: PUSH
72709: LD_INT 0
72711: PUSH
72712: LD_INT 0
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 0
72721: PUSH
72722: LD_INT 1
72724: NEG
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 1
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 1
72742: PUSH
72743: LD_INT 1
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 0
72752: PUSH
72753: LD_INT 1
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 1
72762: NEG
72763: PUSH
72764: LD_INT 0
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 1
72773: NEG
72774: PUSH
72775: LD_INT 1
72777: NEG
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 1
72785: NEG
72786: PUSH
72787: LD_INT 2
72789: NEG
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 0
72797: PUSH
72798: LD_INT 2
72800: NEG
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 1
72808: PUSH
72809: LD_INT 1
72811: NEG
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 2
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 2
72829: PUSH
72830: LD_INT 1
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 2
72839: PUSH
72840: LD_INT 2
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 1
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 0
72859: PUSH
72860: LD_INT 2
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 1
72869: NEG
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: LD_INT 0
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 2
72891: NEG
72892: PUSH
72893: LD_INT 1
72895: NEG
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 2
72903: NEG
72904: PUSH
72905: LD_INT 2
72907: NEG
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 2
72915: PUSH
72916: LD_INT 3
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 1
72925: PUSH
72926: LD_INT 3
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 1
72935: NEG
72936: PUSH
72937: LD_INT 2
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 2
72946: NEG
72947: PUSH
72948: LD_INT 1
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72980: LD_ADDR_VAR 0 27
72984: PUSH
72985: LD_INT 0
72987: PUSH
72988: LD_INT 0
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 0
72997: PUSH
72998: LD_INT 1
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 1
73008: PUSH
73009: LD_INT 0
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 1
73018: PUSH
73019: LD_INT 1
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 0
73028: PUSH
73029: LD_INT 1
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 1
73038: NEG
73039: PUSH
73040: LD_INT 0
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 1
73049: NEG
73050: PUSH
73051: LD_INT 1
73053: NEG
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 1
73061: NEG
73062: PUSH
73063: LD_INT 2
73065: NEG
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 0
73073: PUSH
73074: LD_INT 2
73076: NEG
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: LD_INT 1
73084: PUSH
73085: LD_INT 1
73087: NEG
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 2
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 2
73105: PUSH
73106: LD_INT 1
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 2
73115: PUSH
73116: LD_INT 2
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 1
73125: PUSH
73126: LD_INT 2
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 0
73135: PUSH
73136: LD_INT 2
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 1
73145: NEG
73146: PUSH
73147: LD_INT 1
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 2
73156: NEG
73157: PUSH
73158: LD_INT 0
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 2
73167: NEG
73168: PUSH
73169: LD_INT 1
73171: NEG
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: PUSH
73177: LD_INT 2
73179: NEG
73180: PUSH
73181: LD_INT 2
73183: NEG
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 1
73191: NEG
73192: PUSH
73193: LD_INT 2
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 2
73202: NEG
73203: PUSH
73204: LD_INT 1
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 3
73213: NEG
73214: PUSH
73215: LD_INT 1
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 3
73225: NEG
73226: PUSH
73227: LD_INT 2
73229: NEG
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73260: LD_ADDR_VAR 0 28
73264: PUSH
73265: LD_INT 0
73267: PUSH
73268: LD_INT 0
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: LD_INT 0
73277: PUSH
73278: LD_INT 1
73280: NEG
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 1
73288: PUSH
73289: LD_INT 0
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 1
73298: PUSH
73299: LD_INT 1
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 0
73308: PUSH
73309: LD_INT 1
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 1
73318: NEG
73319: PUSH
73320: LD_INT 0
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 1
73329: NEG
73330: PUSH
73331: LD_INT 1
73333: NEG
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 1
73341: NEG
73342: PUSH
73343: LD_INT 2
73345: NEG
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 0
73353: PUSH
73354: LD_INT 2
73356: NEG
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: LD_INT 1
73364: PUSH
73365: LD_INT 1
73367: NEG
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 2
73375: PUSH
73376: LD_INT 0
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 2
73385: PUSH
73386: LD_INT 1
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 2
73395: PUSH
73396: LD_INT 2
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 1
73405: PUSH
73406: LD_INT 2
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 0
73415: PUSH
73416: LD_INT 2
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 1
73425: NEG
73426: PUSH
73427: LD_INT 1
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 2
73436: NEG
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 2
73447: NEG
73448: PUSH
73449: LD_INT 1
73451: NEG
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 2
73459: NEG
73460: PUSH
73461: LD_INT 2
73463: NEG
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 2
73471: NEG
73472: PUSH
73473: LD_INT 3
73475: NEG
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 1
73483: NEG
73484: PUSH
73485: LD_INT 3
73487: NEG
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 3
73495: NEG
73496: PUSH
73497: LD_INT 1
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 3
73507: NEG
73508: PUSH
73509: LD_INT 2
73511: NEG
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: LIST
73541: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73542: LD_ADDR_VAR 0 29
73546: PUSH
73547: LD_INT 0
73549: PUSH
73550: LD_INT 0
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: LD_INT 1
73562: NEG
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 1
73570: PUSH
73571: LD_INT 0
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: LD_INT 1
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 0
73590: PUSH
73591: LD_INT 1
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: NEG
73601: PUSH
73602: LD_INT 0
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 1
73611: NEG
73612: PUSH
73613: LD_INT 1
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 1
73623: NEG
73624: PUSH
73625: LD_INT 2
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 0
73635: PUSH
73636: LD_INT 2
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 1
73646: PUSH
73647: LD_INT 1
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 2
73657: PUSH
73658: LD_INT 0
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 2
73667: PUSH
73668: LD_INT 1
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 1
73677: PUSH
73678: LD_INT 2
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 0
73687: PUSH
73688: LD_INT 2
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 1
73697: NEG
73698: PUSH
73699: LD_INT 1
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 2
73708: NEG
73709: PUSH
73710: LD_INT 1
73712: NEG
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: LD_INT 2
73720: NEG
73721: PUSH
73722: LD_INT 2
73724: NEG
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 2
73732: NEG
73733: PUSH
73734: LD_INT 3
73736: NEG
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 2
73744: PUSH
73745: LD_INT 1
73747: NEG
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: PUSH
73753: LD_INT 3
73755: PUSH
73756: LD_INT 1
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 1
73765: PUSH
73766: LD_INT 3
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 1
73775: NEG
73776: PUSH
73777: LD_INT 2
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 3
73786: NEG
73787: PUSH
73788: LD_INT 2
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73821: LD_ADDR_VAR 0 30
73825: PUSH
73826: LD_INT 0
73828: PUSH
73829: LD_INT 0
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 0
73838: PUSH
73839: LD_INT 1
73841: NEG
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 1
73849: PUSH
73850: LD_INT 0
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 1
73859: PUSH
73860: LD_INT 1
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 0
73869: PUSH
73870: LD_INT 1
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: NEG
73880: PUSH
73881: LD_INT 0
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: LD_INT 1
73890: NEG
73891: PUSH
73892: LD_INT 1
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 1
73902: NEG
73903: PUSH
73904: LD_INT 2
73906: NEG
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: PUSH
73912: LD_INT 0
73914: PUSH
73915: LD_INT 2
73917: NEG
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 1
73925: PUSH
73926: LD_INT 1
73928: NEG
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 2
73936: PUSH
73937: LD_INT 0
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 2
73946: PUSH
73947: LD_INT 1
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 2
73956: PUSH
73957: LD_INT 2
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 1
73966: PUSH
73967: LD_INT 2
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 1
73976: NEG
73977: PUSH
73978: LD_INT 1
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: LD_INT 2
73987: NEG
73988: PUSH
73989: LD_INT 0
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 2
73998: NEG
73999: PUSH
74000: LD_INT 1
74002: NEG
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 1
74010: NEG
74011: PUSH
74012: LD_INT 3
74014: NEG
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 1
74022: PUSH
74023: LD_INT 2
74025: NEG
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 3
74033: PUSH
74034: LD_INT 2
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 2
74043: PUSH
74044: LD_INT 3
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 2
74053: NEG
74054: PUSH
74055: LD_INT 1
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 3
74064: NEG
74065: PUSH
74066: LD_INT 1
74068: NEG
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74099: LD_ADDR_VAR 0 31
74103: PUSH
74104: LD_INT 0
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 0
74116: PUSH
74117: LD_INT 1
74119: NEG
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: LD_INT 1
74127: PUSH
74128: LD_INT 0
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 1
74137: PUSH
74138: LD_INT 1
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: LD_INT 0
74147: PUSH
74148: LD_INT 1
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 1
74157: NEG
74158: PUSH
74159: LD_INT 0
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 1
74168: NEG
74169: PUSH
74170: LD_INT 1
74172: NEG
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: LD_INT 1
74180: NEG
74181: PUSH
74182: LD_INT 2
74184: NEG
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 1
74192: PUSH
74193: LD_INT 1
74195: NEG
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 2
74203: PUSH
74204: LD_INT 0
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 2
74213: PUSH
74214: LD_INT 1
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 2
74223: PUSH
74224: LD_INT 2
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 1
74233: PUSH
74234: LD_INT 2
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 0
74243: PUSH
74244: LD_INT 2
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: LD_INT 1
74253: NEG
74254: PUSH
74255: LD_INT 1
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 2
74264: NEG
74265: PUSH
74266: LD_INT 1
74268: NEG
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: LD_INT 2
74276: NEG
74277: PUSH
74278: LD_INT 2
74280: NEG
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 2
74288: NEG
74289: PUSH
74290: LD_INT 3
74292: NEG
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 2
74300: PUSH
74301: LD_INT 1
74303: NEG
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 3
74311: PUSH
74312: LD_INT 1
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 1
74321: PUSH
74322: LD_INT 3
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 1
74331: NEG
74332: PUSH
74333: LD_INT 2
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 3
74342: NEG
74343: PUSH
74344: LD_INT 2
74346: NEG
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74377: LD_ADDR_VAR 0 32
74381: PUSH
74382: LD_INT 0
74384: PUSH
74385: LD_INT 0
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 0
74394: PUSH
74395: LD_INT 1
74397: NEG
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 1
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 1
74415: PUSH
74416: LD_INT 1
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 0
74425: PUSH
74426: LD_INT 1
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 1
74435: NEG
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 1
74446: NEG
74447: PUSH
74448: LD_INT 1
74450: NEG
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 1
74458: NEG
74459: PUSH
74460: LD_INT 2
74462: NEG
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 0
74470: PUSH
74471: LD_INT 2
74473: NEG
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 1
74481: PUSH
74482: LD_INT 1
74484: NEG
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: LD_INT 2
74492: PUSH
74493: LD_INT 1
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 2
74502: PUSH
74503: LD_INT 2
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 1
74512: PUSH
74513: LD_INT 2
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: LD_INT 0
74522: PUSH
74523: LD_INT 2
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 1
74532: NEG
74533: PUSH
74534: LD_INT 1
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: LD_INT 2
74543: NEG
74544: PUSH
74545: LD_INT 0
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 2
74554: NEG
74555: PUSH
74556: LD_INT 1
74558: NEG
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 1
74566: NEG
74567: PUSH
74568: LD_INT 3
74570: NEG
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: PUSH
74576: LD_INT 1
74578: PUSH
74579: LD_INT 2
74581: NEG
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 3
74589: PUSH
74590: LD_INT 2
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 2
74599: PUSH
74600: LD_INT 3
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 2
74609: NEG
74610: PUSH
74611: LD_INT 1
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 3
74620: NEG
74621: PUSH
74622: LD_INT 1
74624: NEG
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74655: LD_ADDR_VAR 0 33
74659: PUSH
74660: LD_INT 0
74662: PUSH
74663: LD_INT 0
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 0
74672: PUSH
74673: LD_INT 1
74675: NEG
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 1
74683: PUSH
74684: LD_INT 0
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 1
74693: PUSH
74694: LD_INT 1
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 0
74703: PUSH
74704: LD_INT 1
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 1
74713: NEG
74714: PUSH
74715: LD_INT 0
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PUSH
74722: LD_INT 1
74724: NEG
74725: PUSH
74726: LD_INT 1
74728: NEG
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 1
74736: NEG
74737: PUSH
74738: LD_INT 2
74740: NEG
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PUSH
74746: LD_INT 1
74748: PUSH
74749: LD_INT 1
74751: NEG
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: PUSH
74757: LD_INT 2
74759: PUSH
74760: LD_INT 0
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: PUSH
74767: LD_INT 2
74769: PUSH
74770: LD_INT 1
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 1
74779: PUSH
74780: LD_INT 2
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: PUSH
74787: LD_INT 0
74789: PUSH
74790: LD_INT 2
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PUSH
74797: LD_INT 1
74799: NEG
74800: PUSH
74801: LD_INT 1
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PUSH
74808: LD_INT 2
74810: NEG
74811: PUSH
74812: LD_INT 0
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 2
74821: NEG
74822: PUSH
74823: LD_INT 1
74825: NEG
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: PUSH
74831: LD_INT 2
74833: NEG
74834: PUSH
74835: LD_INT 2
74837: NEG
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PUSH
74843: LD_INT 2
74845: NEG
74846: PUSH
74847: LD_INT 3
74849: NEG
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 2
74857: PUSH
74858: LD_INT 1
74860: NEG
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: PUSH
74866: LD_INT 3
74868: PUSH
74869: LD_INT 1
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PUSH
74876: LD_INT 1
74878: PUSH
74879: LD_INT 3
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 1
74888: NEG
74889: PUSH
74890: LD_INT 2
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: LD_INT 3
74899: NEG
74900: PUSH
74901: LD_INT 2
74903: NEG
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74934: LD_ADDR_VAR 0 34
74938: PUSH
74939: LD_INT 0
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 0
74951: PUSH
74952: LD_INT 1
74954: NEG
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 1
74962: PUSH
74963: LD_INT 0
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 1
74972: PUSH
74973: LD_INT 1
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 0
74982: PUSH
74983: LD_INT 1
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 1
74992: NEG
74993: PUSH
74994: LD_INT 0
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 1
75003: NEG
75004: PUSH
75005: LD_INT 1
75007: NEG
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: LD_INT 1
75015: NEG
75016: PUSH
75017: LD_INT 2
75019: NEG
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 0
75027: PUSH
75028: LD_INT 2
75030: NEG
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 1
75038: PUSH
75039: LD_INT 1
75041: NEG
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 2
75049: PUSH
75050: LD_INT 1
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_INT 2
75059: PUSH
75060: LD_INT 2
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 1
75069: PUSH
75070: LD_INT 2
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 1
75079: NEG
75080: PUSH
75081: LD_INT 1
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PUSH
75088: LD_INT 2
75090: NEG
75091: PUSH
75092: LD_INT 0
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 2
75101: NEG
75102: PUSH
75103: LD_INT 1
75105: NEG
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_INT 2
75113: NEG
75114: PUSH
75115: LD_INT 2
75117: NEG
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: PUSH
75123: LD_INT 1
75125: NEG
75126: PUSH
75127: LD_INT 3
75129: NEG
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 1
75137: PUSH
75138: LD_INT 2
75140: NEG
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 3
75148: PUSH
75149: LD_INT 2
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PUSH
75156: LD_INT 2
75158: PUSH
75159: LD_INT 3
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: PUSH
75166: LD_INT 2
75168: NEG
75169: PUSH
75170: LD_INT 1
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 3
75179: NEG
75180: PUSH
75181: LD_INT 1
75183: NEG
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75214: LD_ADDR_VAR 0 35
75218: PUSH
75219: LD_INT 0
75221: PUSH
75222: LD_INT 0
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: PUSH
75229: LD_INT 0
75231: PUSH
75232: LD_INT 1
75234: NEG
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 1
75242: PUSH
75243: LD_INT 0
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 1
75252: PUSH
75253: LD_INT 1
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: LD_INT 1
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: LD_INT 1
75272: NEG
75273: PUSH
75274: LD_INT 0
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: LD_INT 1
75287: NEG
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 2
75295: PUSH
75296: LD_INT 1
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: LD_INT 2
75305: NEG
75306: PUSH
75307: LD_INT 1
75309: NEG
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75326: LD_ADDR_VAR 0 36
75330: PUSH
75331: LD_INT 0
75333: PUSH
75334: LD_INT 0
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PUSH
75341: LD_INT 0
75343: PUSH
75344: LD_INT 1
75346: NEG
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 1
75354: PUSH
75355: LD_INT 0
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 1
75364: PUSH
75365: LD_INT 1
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: LD_INT 1
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 1
75384: NEG
75385: PUSH
75386: LD_INT 0
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PUSH
75393: LD_INT 1
75395: NEG
75396: PUSH
75397: LD_INT 1
75399: NEG
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: LD_INT 1
75407: NEG
75408: PUSH
75409: LD_INT 2
75411: NEG
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: LD_INT 1
75419: PUSH
75420: LD_INT 2
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75438: LD_ADDR_VAR 0 37
75442: PUSH
75443: LD_INT 0
75445: PUSH
75446: LD_INT 0
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: LD_INT 0
75455: PUSH
75456: LD_INT 1
75458: NEG
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PUSH
75464: LD_INT 1
75466: PUSH
75467: LD_INT 0
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 1
75476: PUSH
75477: LD_INT 1
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: PUSH
75484: LD_INT 0
75486: PUSH
75487: LD_INT 1
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PUSH
75494: LD_INT 1
75496: NEG
75497: PUSH
75498: LD_INT 0
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: LD_INT 1
75507: NEG
75508: PUSH
75509: LD_INT 1
75511: NEG
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: PUSH
75517: LD_INT 1
75519: PUSH
75520: LD_INT 1
75522: NEG
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: LD_INT 1
75530: NEG
75531: PUSH
75532: LD_INT 1
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75550: LD_ADDR_VAR 0 38
75554: PUSH
75555: LD_INT 0
75557: PUSH
75558: LD_INT 0
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 0
75567: PUSH
75568: LD_INT 1
75570: NEG
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 1
75578: PUSH
75579: LD_INT 0
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 1
75588: PUSH
75589: LD_INT 1
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: LD_INT 0
75598: PUSH
75599: LD_INT 1
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: PUSH
75606: LD_INT 1
75608: NEG
75609: PUSH
75610: LD_INT 0
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 1
75619: NEG
75620: PUSH
75621: LD_INT 1
75623: NEG
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PUSH
75629: LD_INT 2
75631: PUSH
75632: LD_INT 1
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 2
75641: NEG
75642: PUSH
75643: LD_INT 1
75645: NEG
75646: PUSH
75647: EMPTY
75648: LIST
75649: LIST
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75662: LD_ADDR_VAR 0 39
75666: PUSH
75667: LD_INT 0
75669: PUSH
75670: LD_INT 0
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: LD_INT 1
75682: NEG
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 1
75690: PUSH
75691: LD_INT 0
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 1
75700: PUSH
75701: LD_INT 1
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 0
75710: PUSH
75711: LD_INT 1
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 1
75720: NEG
75721: PUSH
75722: LD_INT 0
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 1
75731: NEG
75732: PUSH
75733: LD_INT 1
75735: NEG
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: PUSH
75741: LD_INT 1
75743: NEG
75744: PUSH
75745: LD_INT 2
75747: NEG
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: PUSH
75753: LD_INT 1
75755: PUSH
75756: LD_INT 2
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: LIST
75773: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75774: LD_ADDR_VAR 0 40
75778: PUSH
75779: LD_INT 0
75781: PUSH
75782: LD_INT 0
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: LD_INT 0
75791: PUSH
75792: LD_INT 1
75794: NEG
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: PUSH
75800: LD_INT 1
75802: PUSH
75803: LD_INT 0
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: LD_INT 1
75812: PUSH
75813: LD_INT 1
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 0
75822: PUSH
75823: LD_INT 1
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 1
75832: NEG
75833: PUSH
75834: LD_INT 0
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 1
75843: NEG
75844: PUSH
75845: LD_INT 1
75847: NEG
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 1
75855: PUSH
75856: LD_INT 1
75858: NEG
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: PUSH
75864: LD_INT 1
75866: NEG
75867: PUSH
75868: LD_INT 1
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75886: LD_ADDR_VAR 0 41
75890: PUSH
75891: LD_INT 0
75893: PUSH
75894: LD_INT 0
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 0
75903: PUSH
75904: LD_INT 1
75906: NEG
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PUSH
75912: LD_INT 1
75914: PUSH
75915: LD_INT 0
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PUSH
75922: LD_INT 1
75924: PUSH
75925: LD_INT 1
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PUSH
75932: LD_INT 0
75934: PUSH
75935: LD_INT 1
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PUSH
75942: LD_INT 1
75944: NEG
75945: PUSH
75946: LD_INT 0
75948: PUSH
75949: EMPTY
75950: LIST
75951: LIST
75952: PUSH
75953: LD_INT 1
75955: NEG
75956: PUSH
75957: LD_INT 1
75959: NEG
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: LD_INT 1
75967: NEG
75968: PUSH
75969: LD_INT 2
75971: NEG
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: LD_INT 1
75979: PUSH
75980: LD_INT 1
75982: NEG
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 2
75990: PUSH
75991: LD_INT 0
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_INT 2
76000: PUSH
76001: LD_INT 1
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 2
76010: PUSH
76011: LD_INT 2
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PUSH
76018: LD_INT 1
76020: PUSH
76021: LD_INT 2
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: LD_INT 1
76030: NEG
76031: PUSH
76032: LD_INT 1
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PUSH
76039: LD_INT 2
76041: NEG
76042: PUSH
76043: LD_INT 0
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 2
76052: NEG
76053: PUSH
76054: LD_INT 1
76056: NEG
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: LD_INT 2
76064: NEG
76065: PUSH
76066: LD_INT 2
76068: NEG
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: LD_INT 2
76076: NEG
76077: PUSH
76078: LD_INT 3
76080: NEG
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: PUSH
76086: LD_INT 2
76088: PUSH
76089: LD_INT 1
76091: NEG
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: PUSH
76097: LD_INT 3
76099: PUSH
76100: LD_INT 0
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PUSH
76107: LD_INT 3
76109: PUSH
76110: LD_INT 1
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: PUSH
76117: LD_INT 3
76119: PUSH
76120: LD_INT 2
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: PUSH
76127: LD_INT 3
76129: PUSH
76130: LD_INT 3
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 2
76139: PUSH
76140: LD_INT 3
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 2
76149: NEG
76150: PUSH
76151: LD_INT 1
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: LD_INT 3
76160: NEG
76161: PUSH
76162: LD_INT 0
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 3
76171: NEG
76172: PUSH
76173: LD_INT 1
76175: NEG
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: LD_INT 3
76183: NEG
76184: PUSH
76185: LD_INT 2
76187: NEG
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 3
76195: NEG
76196: PUSH
76197: LD_INT 3
76199: NEG
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76236: LD_ADDR_VAR 0 42
76240: PUSH
76241: LD_INT 0
76243: PUSH
76244: LD_INT 0
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 0
76253: PUSH
76254: LD_INT 1
76256: NEG
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 1
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 1
76274: PUSH
76275: LD_INT 1
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: PUSH
76282: LD_INT 0
76284: PUSH
76285: LD_INT 1
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: PUSH
76292: LD_INT 1
76294: NEG
76295: PUSH
76296: LD_INT 0
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: PUSH
76303: LD_INT 1
76305: NEG
76306: PUSH
76307: LD_INT 1
76309: NEG
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: PUSH
76315: LD_INT 1
76317: NEG
76318: PUSH
76319: LD_INT 2
76321: NEG
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: PUSH
76327: LD_INT 0
76329: PUSH
76330: LD_INT 2
76332: NEG
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PUSH
76338: LD_INT 1
76340: PUSH
76341: LD_INT 1
76343: NEG
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 2
76351: PUSH
76352: LD_INT 1
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 2
76361: PUSH
76362: LD_INT 2
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 1
76371: PUSH
76372: LD_INT 2
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: PUSH
76379: LD_INT 0
76381: PUSH
76382: LD_INT 2
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 1
76391: NEG
76392: PUSH
76393: LD_INT 1
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PUSH
76400: LD_INT 2
76402: NEG
76403: PUSH
76404: LD_INT 1
76406: NEG
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 2
76414: NEG
76415: PUSH
76416: LD_INT 2
76418: NEG
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PUSH
76424: LD_INT 2
76426: NEG
76427: PUSH
76428: LD_INT 3
76430: NEG
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 1
76438: NEG
76439: PUSH
76440: LD_INT 3
76442: NEG
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: LD_INT 0
76450: PUSH
76451: LD_INT 3
76453: NEG
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: LD_INT 1
76461: PUSH
76462: LD_INT 2
76464: NEG
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: LD_INT 3
76472: PUSH
76473: LD_INT 2
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: PUSH
76480: LD_INT 3
76482: PUSH
76483: LD_INT 3
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: LD_INT 2
76492: PUSH
76493: LD_INT 3
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PUSH
76500: LD_INT 1
76502: PUSH
76503: LD_INT 3
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 0
76512: PUSH
76513: LD_INT 3
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 1
76522: NEG
76523: PUSH
76524: LD_INT 2
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 3
76533: NEG
76534: PUSH
76535: LD_INT 2
76537: NEG
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PUSH
76543: LD_INT 3
76545: NEG
76546: PUSH
76547: LD_INT 3
76549: NEG
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: LIST
76561: LIST
76562: LIST
76563: LIST
76564: LIST
76565: LIST
76566: LIST
76567: LIST
76568: LIST
76569: LIST
76570: LIST
76571: LIST
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76586: LD_ADDR_VAR 0 43
76590: PUSH
76591: LD_INT 0
76593: PUSH
76594: LD_INT 0
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 0
76603: PUSH
76604: LD_INT 1
76606: NEG
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PUSH
76612: LD_INT 1
76614: PUSH
76615: LD_INT 0
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: PUSH
76622: LD_INT 1
76624: PUSH
76625: LD_INT 1
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: LD_INT 0
76634: PUSH
76635: LD_INT 1
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: PUSH
76642: LD_INT 1
76644: NEG
76645: PUSH
76646: LD_INT 0
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 1
76655: NEG
76656: PUSH
76657: LD_INT 1
76659: NEG
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: PUSH
76665: LD_INT 1
76667: NEG
76668: PUSH
76669: LD_INT 2
76671: NEG
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: PUSH
76677: LD_INT 0
76679: PUSH
76680: LD_INT 2
76682: NEG
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: PUSH
76688: LD_INT 1
76690: PUSH
76691: LD_INT 1
76693: NEG
76694: PUSH
76695: EMPTY
76696: LIST
76697: LIST
76698: PUSH
76699: LD_INT 2
76701: PUSH
76702: LD_INT 0
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: LD_INT 2
76711: PUSH
76712: LD_INT 1
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: PUSH
76719: LD_INT 1
76721: PUSH
76722: LD_INT 2
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: PUSH
76729: LD_INT 0
76731: PUSH
76732: LD_INT 2
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PUSH
76739: LD_INT 1
76741: NEG
76742: PUSH
76743: LD_INT 1
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: PUSH
76750: LD_INT 2
76752: NEG
76753: PUSH
76754: LD_INT 0
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: PUSH
76761: LD_INT 2
76763: NEG
76764: PUSH
76765: LD_INT 1
76767: NEG
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 1
76775: NEG
76776: PUSH
76777: LD_INT 3
76779: NEG
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 0
76787: PUSH
76788: LD_INT 3
76790: NEG
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PUSH
76796: LD_INT 1
76798: PUSH
76799: LD_INT 2
76801: NEG
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PUSH
76807: LD_INT 2
76809: PUSH
76810: LD_INT 1
76812: NEG
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 3
76820: PUSH
76821: LD_INT 0
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 3
76830: PUSH
76831: LD_INT 1
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: LD_INT 1
76840: PUSH
76841: LD_INT 3
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: PUSH
76848: LD_INT 0
76850: PUSH
76851: LD_INT 3
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: LD_INT 1
76860: NEG
76861: PUSH
76862: LD_INT 2
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: PUSH
76869: LD_INT 2
76871: NEG
76872: PUSH
76873: LD_INT 1
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 3
76882: NEG
76883: PUSH
76884: LD_INT 0
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PUSH
76891: LD_INT 3
76893: NEG
76894: PUSH
76895: LD_INT 1
76897: NEG
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: LIST
76907: LIST
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76934: LD_ADDR_VAR 0 44
76938: PUSH
76939: LD_INT 0
76941: PUSH
76942: LD_INT 0
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 0
76951: PUSH
76952: LD_INT 1
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 1
76962: PUSH
76963: LD_INT 0
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: PUSH
76970: LD_INT 1
76972: PUSH
76973: LD_INT 1
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: PUSH
76980: LD_INT 0
76982: PUSH
76983: LD_INT 1
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: PUSH
76990: LD_INT 1
76992: NEG
76993: PUSH
76994: LD_INT 0
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PUSH
77001: LD_INT 1
77003: NEG
77004: PUSH
77005: LD_INT 1
77007: NEG
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 1
77015: NEG
77016: PUSH
77017: LD_INT 2
77019: NEG
77020: PUSH
77021: EMPTY
77022: LIST
77023: LIST
77024: PUSH
77025: LD_INT 1
77027: PUSH
77028: LD_INT 1
77030: NEG
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PUSH
77036: LD_INT 2
77038: PUSH
77039: LD_INT 0
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: PUSH
77046: LD_INT 2
77048: PUSH
77049: LD_INT 1
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: PUSH
77056: LD_INT 2
77058: PUSH
77059: LD_INT 2
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: PUSH
77066: LD_INT 1
77068: PUSH
77069: LD_INT 2
77071: PUSH
77072: EMPTY
77073: LIST
77074: LIST
77075: PUSH
77076: LD_INT 1
77078: NEG
77079: PUSH
77080: LD_INT 1
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: LD_INT 2
77089: NEG
77090: PUSH
77091: LD_INT 0
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 2
77100: NEG
77101: PUSH
77102: LD_INT 1
77104: NEG
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 2
77112: NEG
77113: PUSH
77114: LD_INT 2
77116: NEG
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 2
77124: NEG
77125: PUSH
77126: LD_INT 3
77128: NEG
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PUSH
77134: LD_INT 2
77136: PUSH
77137: LD_INT 1
77139: NEG
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PUSH
77145: LD_INT 3
77147: PUSH
77148: LD_INT 0
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 3
77157: PUSH
77158: LD_INT 1
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: LD_INT 3
77167: PUSH
77168: LD_INT 2
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 3
77177: PUSH
77178: LD_INT 3
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 2
77187: PUSH
77188: LD_INT 3
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 2
77197: NEG
77198: PUSH
77199: LD_INT 1
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 3
77208: NEG
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PUSH
77217: LD_INT 3
77219: NEG
77220: PUSH
77221: LD_INT 1
77223: NEG
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: PUSH
77229: LD_INT 3
77231: NEG
77232: PUSH
77233: LD_INT 2
77235: NEG
77236: PUSH
77237: EMPTY
77238: LIST
77239: LIST
77240: PUSH
77241: LD_INT 3
77243: NEG
77244: PUSH
77245: LD_INT 3
77247: NEG
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: LIST
77281: LIST
77282: LIST
77283: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77284: LD_ADDR_VAR 0 45
77288: PUSH
77289: LD_INT 0
77291: PUSH
77292: LD_INT 0
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 0
77301: PUSH
77302: LD_INT 1
77304: NEG
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: PUSH
77310: LD_INT 1
77312: PUSH
77313: LD_INT 0
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: PUSH
77320: LD_INT 1
77322: PUSH
77323: LD_INT 1
77325: PUSH
77326: EMPTY
77327: LIST
77328: LIST
77329: PUSH
77330: LD_INT 0
77332: PUSH
77333: LD_INT 1
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: PUSH
77340: LD_INT 1
77342: NEG
77343: PUSH
77344: LD_INT 0
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PUSH
77351: LD_INT 1
77353: NEG
77354: PUSH
77355: LD_INT 1
77357: NEG
77358: PUSH
77359: EMPTY
77360: LIST
77361: LIST
77362: PUSH
77363: LD_INT 1
77365: NEG
77366: PUSH
77367: LD_INT 2
77369: NEG
77370: PUSH
77371: EMPTY
77372: LIST
77373: LIST
77374: PUSH
77375: LD_INT 0
77377: PUSH
77378: LD_INT 2
77380: NEG
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: PUSH
77386: LD_INT 1
77388: PUSH
77389: LD_INT 1
77391: NEG
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 2
77399: PUSH
77400: LD_INT 1
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 2
77409: PUSH
77410: LD_INT 2
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: LD_INT 1
77419: PUSH
77420: LD_INT 2
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: PUSH
77427: LD_INT 0
77429: PUSH
77430: LD_INT 2
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: PUSH
77437: LD_INT 1
77439: NEG
77440: PUSH
77441: LD_INT 1
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: PUSH
77448: LD_INT 2
77450: NEG
77451: PUSH
77452: LD_INT 1
77454: NEG
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: LD_INT 2
77462: NEG
77463: PUSH
77464: LD_INT 2
77466: NEG
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: LD_INT 2
77474: NEG
77475: PUSH
77476: LD_INT 3
77478: NEG
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: PUSH
77484: LD_INT 1
77486: NEG
77487: PUSH
77488: LD_INT 3
77490: NEG
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: PUSH
77496: LD_INT 0
77498: PUSH
77499: LD_INT 3
77501: NEG
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PUSH
77507: LD_INT 1
77509: PUSH
77510: LD_INT 2
77512: NEG
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: LD_INT 3
77520: PUSH
77521: LD_INT 2
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 3
77530: PUSH
77531: LD_INT 3
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: LD_INT 2
77540: PUSH
77541: LD_INT 3
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: PUSH
77548: LD_INT 1
77550: PUSH
77551: LD_INT 3
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: PUSH
77558: LD_INT 0
77560: PUSH
77561: LD_INT 3
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: PUSH
77568: LD_INT 1
77570: NEG
77571: PUSH
77572: LD_INT 2
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PUSH
77579: LD_INT 3
77581: NEG
77582: PUSH
77583: LD_INT 2
77585: NEG
77586: PUSH
77587: EMPTY
77588: LIST
77589: LIST
77590: PUSH
77591: LD_INT 3
77593: NEG
77594: PUSH
77595: LD_INT 3
77597: NEG
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: EMPTY
77604: LIST
77605: LIST
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: LIST
77629: LIST
77630: LIST
77631: LIST
77632: LIST
77633: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77634: LD_ADDR_VAR 0 46
77638: PUSH
77639: LD_INT 0
77641: PUSH
77642: LD_INT 0
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: LD_INT 0
77651: PUSH
77652: LD_INT 1
77654: NEG
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 1
77662: PUSH
77663: LD_INT 0
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: LD_INT 1
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 0
77682: PUSH
77683: LD_INT 1
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: LD_INT 1
77692: NEG
77693: PUSH
77694: LD_INT 0
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 1
77703: NEG
77704: PUSH
77705: LD_INT 1
77707: NEG
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: PUSH
77713: LD_INT 1
77715: NEG
77716: PUSH
77717: LD_INT 2
77719: NEG
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 0
77727: PUSH
77728: LD_INT 2
77730: NEG
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PUSH
77736: LD_INT 1
77738: PUSH
77739: LD_INT 1
77741: NEG
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: PUSH
77747: LD_INT 2
77749: PUSH
77750: LD_INT 0
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 2
77759: PUSH
77760: LD_INT 1
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: LD_INT 1
77769: PUSH
77770: LD_INT 2
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PUSH
77777: LD_INT 0
77779: PUSH
77780: LD_INT 2
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 1
77789: NEG
77790: PUSH
77791: LD_INT 1
77793: PUSH
77794: EMPTY
77795: LIST
77796: LIST
77797: PUSH
77798: LD_INT 2
77800: NEG
77801: PUSH
77802: LD_INT 0
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: PUSH
77809: LD_INT 2
77811: NEG
77812: PUSH
77813: LD_INT 1
77815: NEG
77816: PUSH
77817: EMPTY
77818: LIST
77819: LIST
77820: PUSH
77821: LD_INT 1
77823: NEG
77824: PUSH
77825: LD_INT 3
77827: NEG
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: PUSH
77833: LD_INT 0
77835: PUSH
77836: LD_INT 3
77838: NEG
77839: PUSH
77840: EMPTY
77841: LIST
77842: LIST
77843: PUSH
77844: LD_INT 1
77846: PUSH
77847: LD_INT 2
77849: NEG
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: PUSH
77855: LD_INT 2
77857: PUSH
77858: LD_INT 1
77860: NEG
77861: PUSH
77862: EMPTY
77863: LIST
77864: LIST
77865: PUSH
77866: LD_INT 3
77868: PUSH
77869: LD_INT 0
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 3
77878: PUSH
77879: LD_INT 1
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: LD_INT 1
77888: PUSH
77889: LD_INT 3
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: LD_INT 3
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 1
77908: NEG
77909: PUSH
77910: LD_INT 2
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PUSH
77917: LD_INT 2
77919: NEG
77920: PUSH
77921: LD_INT 1
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: PUSH
77928: LD_INT 3
77930: NEG
77931: PUSH
77932: LD_INT 0
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: PUSH
77939: LD_INT 3
77941: NEG
77942: PUSH
77943: LD_INT 1
77945: NEG
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: LIST
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77982: LD_ADDR_VAR 0 47
77986: PUSH
77987: LD_INT 0
77989: PUSH
77990: LD_INT 0
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 0
77999: PUSH
78000: LD_INT 1
78002: NEG
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: LD_INT 1
78010: PUSH
78011: LD_INT 0
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: LD_INT 1
78020: PUSH
78021: LD_INT 1
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PUSH
78028: LD_INT 0
78030: PUSH
78031: LD_INT 1
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: LD_INT 1
78040: NEG
78041: PUSH
78042: LD_INT 0
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: PUSH
78049: LD_INT 1
78051: NEG
78052: PUSH
78053: LD_INT 1
78055: NEG
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: PUSH
78061: LD_INT 1
78063: NEG
78064: PUSH
78065: LD_INT 2
78067: NEG
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: PUSH
78073: LD_INT 0
78075: PUSH
78076: LD_INT 2
78078: NEG
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: PUSH
78084: LD_INT 1
78086: PUSH
78087: LD_INT 1
78089: NEG
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: LD_INT 2
78097: NEG
78098: PUSH
78099: LD_INT 1
78101: NEG
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: LD_INT 2
78109: NEG
78110: PUSH
78111: LD_INT 2
78113: NEG
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78133: LD_ADDR_VAR 0 48
78137: PUSH
78138: LD_INT 0
78140: PUSH
78141: LD_INT 0
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: PUSH
78148: LD_INT 0
78150: PUSH
78151: LD_INT 1
78153: NEG
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: LD_INT 1
78161: PUSH
78162: LD_INT 0
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: PUSH
78169: LD_INT 1
78171: PUSH
78172: LD_INT 1
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: PUSH
78179: LD_INT 0
78181: PUSH
78182: LD_INT 1
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: PUSH
78189: LD_INT 1
78191: NEG
78192: PUSH
78193: LD_INT 0
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: LD_INT 1
78202: NEG
78203: PUSH
78204: LD_INT 1
78206: NEG
78207: PUSH
78208: EMPTY
78209: LIST
78210: LIST
78211: PUSH
78212: LD_INT 1
78214: NEG
78215: PUSH
78216: LD_INT 2
78218: NEG
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PUSH
78224: LD_INT 0
78226: PUSH
78227: LD_INT 2
78229: NEG
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: PUSH
78235: LD_INT 1
78237: PUSH
78238: LD_INT 1
78240: NEG
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PUSH
78246: LD_INT 2
78248: PUSH
78249: LD_INT 0
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PUSH
78256: LD_INT 2
78258: PUSH
78259: LD_INT 1
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: LIST
78276: LIST
78277: LIST
78278: LIST
78279: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78280: LD_ADDR_VAR 0 49
78284: PUSH
78285: LD_INT 0
78287: PUSH
78288: LD_INT 0
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: PUSH
78295: LD_INT 0
78297: PUSH
78298: LD_INT 1
78300: NEG
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 1
78308: PUSH
78309: LD_INT 0
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 1
78318: PUSH
78319: LD_INT 1
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: PUSH
78326: LD_INT 0
78328: PUSH
78329: LD_INT 1
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: PUSH
78336: LD_INT 1
78338: NEG
78339: PUSH
78340: LD_INT 0
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: LD_INT 1
78349: NEG
78350: PUSH
78351: LD_INT 1
78353: NEG
78354: PUSH
78355: EMPTY
78356: LIST
78357: LIST
78358: PUSH
78359: LD_INT 1
78361: PUSH
78362: LD_INT 1
78364: NEG
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: PUSH
78370: LD_INT 2
78372: PUSH
78373: LD_INT 0
78375: PUSH
78376: EMPTY
78377: LIST
78378: LIST
78379: PUSH
78380: LD_INT 2
78382: PUSH
78383: LD_INT 1
78385: PUSH
78386: EMPTY
78387: LIST
78388: LIST
78389: PUSH
78390: LD_INT 2
78392: PUSH
78393: LD_INT 2
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: PUSH
78400: LD_INT 1
78402: PUSH
78403: LD_INT 2
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PUSH
78410: EMPTY
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: LIST
78421: LIST
78422: LIST
78423: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78424: LD_ADDR_VAR 0 50
78428: PUSH
78429: LD_INT 0
78431: PUSH
78432: LD_INT 0
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: LD_INT 0
78441: PUSH
78442: LD_INT 1
78444: NEG
78445: PUSH
78446: EMPTY
78447: LIST
78448: LIST
78449: PUSH
78450: LD_INT 1
78452: PUSH
78453: LD_INT 0
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 1
78462: PUSH
78463: LD_INT 1
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PUSH
78470: LD_INT 0
78472: PUSH
78473: LD_INT 1
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: LD_INT 1
78482: NEG
78483: PUSH
78484: LD_INT 0
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PUSH
78491: LD_INT 1
78493: NEG
78494: PUSH
78495: LD_INT 1
78497: NEG
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PUSH
78503: LD_INT 2
78505: PUSH
78506: LD_INT 1
78508: PUSH
78509: EMPTY
78510: LIST
78511: LIST
78512: PUSH
78513: LD_INT 2
78515: PUSH
78516: LD_INT 2
78518: PUSH
78519: EMPTY
78520: LIST
78521: LIST
78522: PUSH
78523: LD_INT 1
78525: PUSH
78526: LD_INT 2
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: PUSH
78533: LD_INT 0
78535: PUSH
78536: LD_INT 2
78538: PUSH
78539: EMPTY
78540: LIST
78541: LIST
78542: PUSH
78543: LD_INT 1
78545: NEG
78546: PUSH
78547: LD_INT 1
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: LIST
78564: LIST
78565: LIST
78566: LIST
78567: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78568: LD_ADDR_VAR 0 51
78572: PUSH
78573: LD_INT 0
78575: PUSH
78576: LD_INT 0
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: PUSH
78583: LD_INT 0
78585: PUSH
78586: LD_INT 1
78588: NEG
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PUSH
78594: LD_INT 1
78596: PUSH
78597: LD_INT 0
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: PUSH
78604: LD_INT 1
78606: PUSH
78607: LD_INT 1
78609: PUSH
78610: EMPTY
78611: LIST
78612: LIST
78613: PUSH
78614: LD_INT 0
78616: PUSH
78617: LD_INT 1
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: PUSH
78624: LD_INT 1
78626: NEG
78627: PUSH
78628: LD_INT 0
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 1
78637: NEG
78638: PUSH
78639: LD_INT 1
78641: NEG
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PUSH
78647: LD_INT 1
78649: PUSH
78650: LD_INT 2
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 0
78659: PUSH
78660: LD_INT 2
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 1
78669: NEG
78670: PUSH
78671: LD_INT 1
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PUSH
78678: LD_INT 2
78680: NEG
78681: PUSH
78682: LD_INT 0
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: LD_INT 2
78691: NEG
78692: PUSH
78693: LD_INT 1
78695: NEG
78696: PUSH
78697: EMPTY
78698: LIST
78699: LIST
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: LIST
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: LIST
78712: LIST
78713: LIST
78714: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78715: LD_ADDR_VAR 0 52
78719: PUSH
78720: LD_INT 0
78722: PUSH
78723: LD_INT 0
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: PUSH
78730: LD_INT 0
78732: PUSH
78733: LD_INT 1
78735: NEG
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: LD_INT 1
78743: PUSH
78744: LD_INT 0
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 1
78753: PUSH
78754: LD_INT 1
78756: PUSH
78757: EMPTY
78758: LIST
78759: LIST
78760: PUSH
78761: LD_INT 0
78763: PUSH
78764: LD_INT 1
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: PUSH
78771: LD_INT 1
78773: NEG
78774: PUSH
78775: LD_INT 0
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: PUSH
78782: LD_INT 1
78784: NEG
78785: PUSH
78786: LD_INT 1
78788: NEG
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: PUSH
78794: LD_INT 1
78796: NEG
78797: PUSH
78798: LD_INT 2
78800: NEG
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: PUSH
78806: LD_INT 1
78808: NEG
78809: PUSH
78810: LD_INT 1
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: PUSH
78817: LD_INT 2
78819: NEG
78820: PUSH
78821: LD_INT 0
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: PUSH
78828: LD_INT 2
78830: NEG
78831: PUSH
78832: LD_INT 1
78834: NEG
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: LD_INT 2
78842: NEG
78843: PUSH
78844: LD_INT 2
78846: NEG
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: LIST
78862: LIST
78863: LIST
78864: LIST
78865: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78866: LD_ADDR_VAR 0 53
78870: PUSH
78871: LD_INT 0
78873: PUSH
78874: LD_INT 0
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: PUSH
78881: LD_INT 0
78883: PUSH
78884: LD_INT 1
78886: NEG
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 1
78894: PUSH
78895: LD_INT 0
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PUSH
78902: LD_INT 1
78904: PUSH
78905: LD_INT 1
78907: PUSH
78908: EMPTY
78909: LIST
78910: LIST
78911: PUSH
78912: LD_INT 0
78914: PUSH
78915: LD_INT 1
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: PUSH
78922: LD_INT 1
78924: NEG
78925: PUSH
78926: LD_INT 0
78928: PUSH
78929: EMPTY
78930: LIST
78931: LIST
78932: PUSH
78933: LD_INT 1
78935: NEG
78936: PUSH
78937: LD_INT 1
78939: NEG
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: PUSH
78945: LD_INT 1
78947: NEG
78948: PUSH
78949: LD_INT 2
78951: NEG
78952: PUSH
78953: EMPTY
78954: LIST
78955: LIST
78956: PUSH
78957: LD_INT 0
78959: PUSH
78960: LD_INT 2
78962: NEG
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: PUSH
78968: LD_INT 1
78970: PUSH
78971: LD_INT 1
78973: NEG
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: PUSH
78979: LD_INT 2
78981: PUSH
78982: LD_INT 0
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 2
78991: PUSH
78992: LD_INT 1
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: LD_INT 2
79001: PUSH
79002: LD_INT 2
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PUSH
79009: LD_INT 1
79011: PUSH
79012: LD_INT 2
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PUSH
79019: LD_INT 0
79021: PUSH
79022: LD_INT 2
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: LD_INT 1
79031: NEG
79032: PUSH
79033: LD_INT 1
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 2
79042: NEG
79043: PUSH
79044: LD_INT 0
79046: PUSH
79047: EMPTY
79048: LIST
79049: LIST
79050: PUSH
79051: LD_INT 2
79053: NEG
79054: PUSH
79055: LD_INT 1
79057: NEG
79058: PUSH
79059: EMPTY
79060: LIST
79061: LIST
79062: PUSH
79063: LD_INT 2
79065: NEG
79066: PUSH
79067: LD_INT 2
79069: NEG
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: PUSH
79075: EMPTY
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79096: LD_ADDR_VAR 0 54
79100: PUSH
79101: LD_INT 0
79103: PUSH
79104: LD_INT 0
79106: PUSH
79107: EMPTY
79108: LIST
79109: LIST
79110: PUSH
79111: LD_INT 0
79113: PUSH
79114: LD_INT 1
79116: NEG
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PUSH
79122: LD_INT 1
79124: PUSH
79125: LD_INT 0
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: PUSH
79132: LD_INT 1
79134: PUSH
79135: LD_INT 1
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: PUSH
79142: LD_INT 0
79144: PUSH
79145: LD_INT 1
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 1
79154: NEG
79155: PUSH
79156: LD_INT 0
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: PUSH
79163: LD_INT 1
79165: NEG
79166: PUSH
79167: LD_INT 1
79169: NEG
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PUSH
79175: LD_INT 1
79177: NEG
79178: PUSH
79179: LD_INT 2
79181: NEG
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PUSH
79187: LD_INT 0
79189: PUSH
79190: LD_INT 2
79192: NEG
79193: PUSH
79194: EMPTY
79195: LIST
79196: LIST
79197: PUSH
79198: LD_INT 1
79200: PUSH
79201: LD_INT 1
79203: NEG
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: PUSH
79209: LD_INT 2
79211: PUSH
79212: LD_INT 0
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: LD_INT 2
79221: PUSH
79222: LD_INT 1
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: LD_INT 2
79231: PUSH
79232: LD_INT 2
79234: PUSH
79235: EMPTY
79236: LIST
79237: LIST
79238: PUSH
79239: LD_INT 1
79241: PUSH
79242: LD_INT 2
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: PUSH
79249: LD_INT 0
79251: PUSH
79252: LD_INT 2
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PUSH
79259: LD_INT 1
79261: NEG
79262: PUSH
79263: LD_INT 1
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: PUSH
79270: LD_INT 2
79272: NEG
79273: PUSH
79274: LD_INT 0
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 2
79283: NEG
79284: PUSH
79285: LD_INT 1
79287: NEG
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PUSH
79293: LD_INT 2
79295: NEG
79296: PUSH
79297: LD_INT 2
79299: NEG
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79326: LD_ADDR_VAR 0 55
79330: PUSH
79331: LD_INT 0
79333: PUSH
79334: LD_INT 0
79336: PUSH
79337: EMPTY
79338: LIST
79339: LIST
79340: PUSH
79341: LD_INT 0
79343: PUSH
79344: LD_INT 1
79346: NEG
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PUSH
79352: LD_INT 1
79354: PUSH
79355: LD_INT 0
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: PUSH
79362: LD_INT 1
79364: PUSH
79365: LD_INT 1
79367: PUSH
79368: EMPTY
79369: LIST
79370: LIST
79371: PUSH
79372: LD_INT 0
79374: PUSH
79375: LD_INT 1
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: PUSH
79382: LD_INT 1
79384: NEG
79385: PUSH
79386: LD_INT 0
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: PUSH
79393: LD_INT 1
79395: NEG
79396: PUSH
79397: LD_INT 1
79399: NEG
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: PUSH
79405: LD_INT 1
79407: NEG
79408: PUSH
79409: LD_INT 2
79411: NEG
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 0
79419: PUSH
79420: LD_INT 2
79422: NEG
79423: PUSH
79424: EMPTY
79425: LIST
79426: LIST
79427: PUSH
79428: LD_INT 1
79430: PUSH
79431: LD_INT 1
79433: NEG
79434: PUSH
79435: EMPTY
79436: LIST
79437: LIST
79438: PUSH
79439: LD_INT 2
79441: PUSH
79442: LD_INT 0
79444: PUSH
79445: EMPTY
79446: LIST
79447: LIST
79448: PUSH
79449: LD_INT 2
79451: PUSH
79452: LD_INT 1
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: PUSH
79459: LD_INT 2
79461: PUSH
79462: LD_INT 2
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 1
79471: PUSH
79472: LD_INT 2
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: LD_INT 0
79481: PUSH
79482: LD_INT 2
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: PUSH
79489: LD_INT 1
79491: NEG
79492: PUSH
79493: LD_INT 1
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 2
79502: NEG
79503: PUSH
79504: LD_INT 0
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: PUSH
79511: LD_INT 2
79513: NEG
79514: PUSH
79515: LD_INT 1
79517: NEG
79518: PUSH
79519: EMPTY
79520: LIST
79521: LIST
79522: PUSH
79523: LD_INT 2
79525: NEG
79526: PUSH
79527: LD_INT 2
79529: NEG
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: LIST
79542: LIST
79543: LIST
79544: LIST
79545: LIST
79546: LIST
79547: LIST
79548: LIST
79549: LIST
79550: LIST
79551: LIST
79552: LIST
79553: LIST
79554: LIST
79555: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79556: LD_ADDR_VAR 0 56
79560: PUSH
79561: LD_INT 0
79563: PUSH
79564: LD_INT 0
79566: PUSH
79567: EMPTY
79568: LIST
79569: LIST
79570: PUSH
79571: LD_INT 0
79573: PUSH
79574: LD_INT 1
79576: NEG
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: LD_INT 1
79584: PUSH
79585: LD_INT 0
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: PUSH
79592: LD_INT 1
79594: PUSH
79595: LD_INT 1
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 0
79604: PUSH
79605: LD_INT 1
79607: PUSH
79608: EMPTY
79609: LIST
79610: LIST
79611: PUSH
79612: LD_INT 1
79614: NEG
79615: PUSH
79616: LD_INT 0
79618: PUSH
79619: EMPTY
79620: LIST
79621: LIST
79622: PUSH
79623: LD_INT 1
79625: NEG
79626: PUSH
79627: LD_INT 1
79629: NEG
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: LD_INT 1
79637: NEG
79638: PUSH
79639: LD_INT 2
79641: NEG
79642: PUSH
79643: EMPTY
79644: LIST
79645: LIST
79646: PUSH
79647: LD_INT 0
79649: PUSH
79650: LD_INT 2
79652: NEG
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: PUSH
79658: LD_INT 1
79660: PUSH
79661: LD_INT 1
79663: NEG
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: PUSH
79669: LD_INT 2
79671: PUSH
79672: LD_INT 0
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: PUSH
79679: LD_INT 2
79681: PUSH
79682: LD_INT 1
79684: PUSH
79685: EMPTY
79686: LIST
79687: LIST
79688: PUSH
79689: LD_INT 2
79691: PUSH
79692: LD_INT 2
79694: PUSH
79695: EMPTY
79696: LIST
79697: LIST
79698: PUSH
79699: LD_INT 1
79701: PUSH
79702: LD_INT 2
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 0
79711: PUSH
79712: LD_INT 2
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: LD_INT 1
79721: NEG
79722: PUSH
79723: LD_INT 1
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: PUSH
79730: LD_INT 2
79732: NEG
79733: PUSH
79734: LD_INT 0
79736: PUSH
79737: EMPTY
79738: LIST
79739: LIST
79740: PUSH
79741: LD_INT 2
79743: NEG
79744: PUSH
79745: LD_INT 1
79747: NEG
79748: PUSH
79749: EMPTY
79750: LIST
79751: LIST
79752: PUSH
79753: LD_INT 2
79755: NEG
79756: PUSH
79757: LD_INT 2
79759: NEG
79760: PUSH
79761: EMPTY
79762: LIST
79763: LIST
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: LIST
79769: LIST
79770: LIST
79771: LIST
79772: LIST
79773: LIST
79774: LIST
79775: LIST
79776: LIST
79777: LIST
79778: LIST
79779: LIST
79780: LIST
79781: LIST
79782: LIST
79783: LIST
79784: LIST
79785: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79786: LD_ADDR_VAR 0 57
79790: PUSH
79791: LD_INT 0
79793: PUSH
79794: LD_INT 0
79796: PUSH
79797: EMPTY
79798: LIST
79799: LIST
79800: PUSH
79801: LD_INT 0
79803: PUSH
79804: LD_INT 1
79806: NEG
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 1
79814: PUSH
79815: LD_INT 0
79817: PUSH
79818: EMPTY
79819: LIST
79820: LIST
79821: PUSH
79822: LD_INT 1
79824: PUSH
79825: LD_INT 1
79827: PUSH
79828: EMPTY
79829: LIST
79830: LIST
79831: PUSH
79832: LD_INT 0
79834: PUSH
79835: LD_INT 1
79837: PUSH
79838: EMPTY
79839: LIST
79840: LIST
79841: PUSH
79842: LD_INT 1
79844: NEG
79845: PUSH
79846: LD_INT 0
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: LD_INT 1
79855: NEG
79856: PUSH
79857: LD_INT 1
79859: NEG
79860: PUSH
79861: EMPTY
79862: LIST
79863: LIST
79864: PUSH
79865: LD_INT 1
79867: NEG
79868: PUSH
79869: LD_INT 2
79871: NEG
79872: PUSH
79873: EMPTY
79874: LIST
79875: LIST
79876: PUSH
79877: LD_INT 0
79879: PUSH
79880: LD_INT 2
79882: NEG
79883: PUSH
79884: EMPTY
79885: LIST
79886: LIST
79887: PUSH
79888: LD_INT 1
79890: PUSH
79891: LD_INT 1
79893: NEG
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: PUSH
79899: LD_INT 2
79901: PUSH
79902: LD_INT 0
79904: PUSH
79905: EMPTY
79906: LIST
79907: LIST
79908: PUSH
79909: LD_INT 2
79911: PUSH
79912: LD_INT 1
79914: PUSH
79915: EMPTY
79916: LIST
79917: LIST
79918: PUSH
79919: LD_INT 2
79921: PUSH
79922: LD_INT 2
79924: PUSH
79925: EMPTY
79926: LIST
79927: LIST
79928: PUSH
79929: LD_INT 1
79931: PUSH
79932: LD_INT 2
79934: PUSH
79935: EMPTY
79936: LIST
79937: LIST
79938: PUSH
79939: LD_INT 0
79941: PUSH
79942: LD_INT 2
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PUSH
79949: LD_INT 1
79951: NEG
79952: PUSH
79953: LD_INT 1
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: LD_INT 2
79962: NEG
79963: PUSH
79964: LD_INT 0
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: PUSH
79971: LD_INT 2
79973: NEG
79974: PUSH
79975: LD_INT 1
79977: NEG
79978: PUSH
79979: EMPTY
79980: LIST
79981: LIST
79982: PUSH
79983: LD_INT 2
79985: NEG
79986: PUSH
79987: LD_INT 2
79989: NEG
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: PUSH
79995: EMPTY
79996: LIST
79997: LIST
79998: LIST
79999: LIST
80000: LIST
80001: LIST
80002: LIST
80003: LIST
80004: LIST
80005: LIST
80006: LIST
80007: LIST
80008: LIST
80009: LIST
80010: LIST
80011: LIST
80012: LIST
80013: LIST
80014: LIST
80015: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80016: LD_ADDR_VAR 0 58
80020: PUSH
80021: LD_INT 0
80023: PUSH
80024: LD_INT 0
80026: PUSH
80027: EMPTY
80028: LIST
80029: LIST
80030: PUSH
80031: LD_INT 0
80033: PUSH
80034: LD_INT 1
80036: NEG
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 1
80044: PUSH
80045: LD_INT 0
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 1
80054: PUSH
80055: LD_INT 1
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 0
80064: PUSH
80065: LD_INT 1
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: LD_INT 1
80074: NEG
80075: PUSH
80076: LD_INT 0
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: PUSH
80083: LD_INT 1
80085: NEG
80086: PUSH
80087: LD_INT 1
80089: NEG
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: PUSH
80095: LD_INT 1
80097: NEG
80098: PUSH
80099: LD_INT 2
80101: NEG
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 0
80109: PUSH
80110: LD_INT 2
80112: NEG
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: PUSH
80118: LD_INT 1
80120: PUSH
80121: LD_INT 1
80123: NEG
80124: PUSH
80125: EMPTY
80126: LIST
80127: LIST
80128: PUSH
80129: LD_INT 2
80131: PUSH
80132: LD_INT 0
80134: PUSH
80135: EMPTY
80136: LIST
80137: LIST
80138: PUSH
80139: LD_INT 2
80141: PUSH
80142: LD_INT 1
80144: PUSH
80145: EMPTY
80146: LIST
80147: LIST
80148: PUSH
80149: LD_INT 2
80151: PUSH
80152: LD_INT 2
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: PUSH
80159: LD_INT 1
80161: PUSH
80162: LD_INT 2
80164: PUSH
80165: EMPTY
80166: LIST
80167: LIST
80168: PUSH
80169: LD_INT 0
80171: PUSH
80172: LD_INT 2
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 1
80181: NEG
80182: PUSH
80183: LD_INT 1
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: LD_INT 2
80192: NEG
80193: PUSH
80194: LD_INT 0
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: PUSH
80201: LD_INT 2
80203: NEG
80204: PUSH
80205: LD_INT 1
80207: NEG
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: PUSH
80213: LD_INT 2
80215: NEG
80216: PUSH
80217: LD_INT 2
80219: NEG
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: LIST
80229: LIST
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: LIST
80243: LIST
80244: LIST
80245: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80246: LD_ADDR_VAR 0 59
80250: PUSH
80251: LD_INT 0
80253: PUSH
80254: LD_INT 0
80256: PUSH
80257: EMPTY
80258: LIST
80259: LIST
80260: PUSH
80261: LD_INT 0
80263: PUSH
80264: LD_INT 1
80266: NEG
80267: PUSH
80268: EMPTY
80269: LIST
80270: LIST
80271: PUSH
80272: LD_INT 1
80274: PUSH
80275: LD_INT 0
80277: PUSH
80278: EMPTY
80279: LIST
80280: LIST
80281: PUSH
80282: LD_INT 1
80284: PUSH
80285: LD_INT 1
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 0
80294: PUSH
80295: LD_INT 1
80297: PUSH
80298: EMPTY
80299: LIST
80300: LIST
80301: PUSH
80302: LD_INT 1
80304: NEG
80305: PUSH
80306: LD_INT 0
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: PUSH
80313: LD_INT 1
80315: NEG
80316: PUSH
80317: LD_INT 1
80319: NEG
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: PUSH
80325: EMPTY
80326: LIST
80327: LIST
80328: LIST
80329: LIST
80330: LIST
80331: LIST
80332: LIST
80333: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80334: LD_ADDR_VAR 0 60
80338: PUSH
80339: LD_INT 0
80341: PUSH
80342: LD_INT 0
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: PUSH
80349: LD_INT 0
80351: PUSH
80352: LD_INT 1
80354: NEG
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PUSH
80360: LD_INT 1
80362: PUSH
80363: LD_INT 0
80365: PUSH
80366: EMPTY
80367: LIST
80368: LIST
80369: PUSH
80370: LD_INT 1
80372: PUSH
80373: LD_INT 1
80375: PUSH
80376: EMPTY
80377: LIST
80378: LIST
80379: PUSH
80380: LD_INT 0
80382: PUSH
80383: LD_INT 1
80385: PUSH
80386: EMPTY
80387: LIST
80388: LIST
80389: PUSH
80390: LD_INT 1
80392: NEG
80393: PUSH
80394: LD_INT 0
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: PUSH
80401: LD_INT 1
80403: NEG
80404: PUSH
80405: LD_INT 1
80407: NEG
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80422: LD_ADDR_VAR 0 61
80426: PUSH
80427: LD_INT 0
80429: PUSH
80430: LD_INT 0
80432: PUSH
80433: EMPTY
80434: LIST
80435: LIST
80436: PUSH
80437: LD_INT 0
80439: PUSH
80440: LD_INT 1
80442: NEG
80443: PUSH
80444: EMPTY
80445: LIST
80446: LIST
80447: PUSH
80448: LD_INT 1
80450: PUSH
80451: LD_INT 0
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: PUSH
80458: LD_INT 1
80460: PUSH
80461: LD_INT 1
80463: PUSH
80464: EMPTY
80465: LIST
80466: LIST
80467: PUSH
80468: LD_INT 0
80470: PUSH
80471: LD_INT 1
80473: PUSH
80474: EMPTY
80475: LIST
80476: LIST
80477: PUSH
80478: LD_INT 1
80480: NEG
80481: PUSH
80482: LD_INT 0
80484: PUSH
80485: EMPTY
80486: LIST
80487: LIST
80488: PUSH
80489: LD_INT 1
80491: NEG
80492: PUSH
80493: LD_INT 1
80495: NEG
80496: PUSH
80497: EMPTY
80498: LIST
80499: LIST
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: LIST
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80510: LD_ADDR_VAR 0 62
80514: PUSH
80515: LD_INT 0
80517: PUSH
80518: LD_INT 0
80520: PUSH
80521: EMPTY
80522: LIST
80523: LIST
80524: PUSH
80525: LD_INT 0
80527: PUSH
80528: LD_INT 1
80530: NEG
80531: PUSH
80532: EMPTY
80533: LIST
80534: LIST
80535: PUSH
80536: LD_INT 1
80538: PUSH
80539: LD_INT 0
80541: PUSH
80542: EMPTY
80543: LIST
80544: LIST
80545: PUSH
80546: LD_INT 1
80548: PUSH
80549: LD_INT 1
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: PUSH
80556: LD_INT 0
80558: PUSH
80559: LD_INT 1
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PUSH
80566: LD_INT 1
80568: NEG
80569: PUSH
80570: LD_INT 0
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: PUSH
80577: LD_INT 1
80579: NEG
80580: PUSH
80581: LD_INT 1
80583: NEG
80584: PUSH
80585: EMPTY
80586: LIST
80587: LIST
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: LIST
80597: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80598: LD_ADDR_VAR 0 63
80602: PUSH
80603: LD_INT 0
80605: PUSH
80606: LD_INT 0
80608: PUSH
80609: EMPTY
80610: LIST
80611: LIST
80612: PUSH
80613: LD_INT 0
80615: PUSH
80616: LD_INT 1
80618: NEG
80619: PUSH
80620: EMPTY
80621: LIST
80622: LIST
80623: PUSH
80624: LD_INT 1
80626: PUSH
80627: LD_INT 0
80629: PUSH
80630: EMPTY
80631: LIST
80632: LIST
80633: PUSH
80634: LD_INT 1
80636: PUSH
80637: LD_INT 1
80639: PUSH
80640: EMPTY
80641: LIST
80642: LIST
80643: PUSH
80644: LD_INT 0
80646: PUSH
80647: LD_INT 1
80649: PUSH
80650: EMPTY
80651: LIST
80652: LIST
80653: PUSH
80654: LD_INT 1
80656: NEG
80657: PUSH
80658: LD_INT 0
80660: PUSH
80661: EMPTY
80662: LIST
80663: LIST
80664: PUSH
80665: LD_INT 1
80667: NEG
80668: PUSH
80669: LD_INT 1
80671: NEG
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: LIST
80681: LIST
80682: LIST
80683: LIST
80684: LIST
80685: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80686: LD_ADDR_VAR 0 64
80690: PUSH
80691: LD_INT 0
80693: PUSH
80694: LD_INT 0
80696: PUSH
80697: EMPTY
80698: LIST
80699: LIST
80700: PUSH
80701: LD_INT 0
80703: PUSH
80704: LD_INT 1
80706: NEG
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: PUSH
80712: LD_INT 1
80714: PUSH
80715: LD_INT 0
80717: PUSH
80718: EMPTY
80719: LIST
80720: LIST
80721: PUSH
80722: LD_INT 1
80724: PUSH
80725: LD_INT 1
80727: PUSH
80728: EMPTY
80729: LIST
80730: LIST
80731: PUSH
80732: LD_INT 0
80734: PUSH
80735: LD_INT 1
80737: PUSH
80738: EMPTY
80739: LIST
80740: LIST
80741: PUSH
80742: LD_INT 1
80744: NEG
80745: PUSH
80746: LD_INT 0
80748: PUSH
80749: EMPTY
80750: LIST
80751: LIST
80752: PUSH
80753: LD_INT 1
80755: NEG
80756: PUSH
80757: LD_INT 1
80759: NEG
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: PUSH
80765: EMPTY
80766: LIST
80767: LIST
80768: LIST
80769: LIST
80770: LIST
80771: LIST
80772: LIST
80773: ST_TO_ADDR
// end ; 1 :
80774: GO 86671
80776: LD_INT 1
80778: DOUBLE
80779: EQUAL
80780: IFTRUE 80784
80782: GO 83407
80784: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80785: LD_ADDR_VAR 0 11
80789: PUSH
80790: LD_INT 1
80792: NEG
80793: PUSH
80794: LD_INT 3
80796: NEG
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: PUSH
80802: LD_INT 0
80804: PUSH
80805: LD_INT 3
80807: NEG
80808: PUSH
80809: EMPTY
80810: LIST
80811: LIST
80812: PUSH
80813: LD_INT 1
80815: PUSH
80816: LD_INT 2
80818: NEG
80819: PUSH
80820: EMPTY
80821: LIST
80822: LIST
80823: PUSH
80824: EMPTY
80825: LIST
80826: LIST
80827: LIST
80828: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80829: LD_ADDR_VAR 0 12
80833: PUSH
80834: LD_INT 2
80836: PUSH
80837: LD_INT 1
80839: NEG
80840: PUSH
80841: EMPTY
80842: LIST
80843: LIST
80844: PUSH
80845: LD_INT 3
80847: PUSH
80848: LD_INT 0
80850: PUSH
80851: EMPTY
80852: LIST
80853: LIST
80854: PUSH
80855: LD_INT 3
80857: PUSH
80858: LD_INT 1
80860: PUSH
80861: EMPTY
80862: LIST
80863: LIST
80864: PUSH
80865: EMPTY
80866: LIST
80867: LIST
80868: LIST
80869: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80870: LD_ADDR_VAR 0 13
80874: PUSH
80875: LD_INT 3
80877: PUSH
80878: LD_INT 2
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: PUSH
80885: LD_INT 3
80887: PUSH
80888: LD_INT 3
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: PUSH
80895: LD_INT 2
80897: PUSH
80898: LD_INT 3
80900: PUSH
80901: EMPTY
80902: LIST
80903: LIST
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: LIST
80909: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80910: LD_ADDR_VAR 0 14
80914: PUSH
80915: LD_INT 1
80917: PUSH
80918: LD_INT 3
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: PUSH
80925: LD_INT 0
80927: PUSH
80928: LD_INT 3
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PUSH
80935: LD_INT 1
80937: NEG
80938: PUSH
80939: LD_INT 2
80941: PUSH
80942: EMPTY
80943: LIST
80944: LIST
80945: PUSH
80946: EMPTY
80947: LIST
80948: LIST
80949: LIST
80950: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80951: LD_ADDR_VAR 0 15
80955: PUSH
80956: LD_INT 2
80958: NEG
80959: PUSH
80960: LD_INT 1
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: PUSH
80967: LD_INT 3
80969: NEG
80970: PUSH
80971: LD_INT 0
80973: PUSH
80974: EMPTY
80975: LIST
80976: LIST
80977: PUSH
80978: LD_INT 3
80980: NEG
80981: PUSH
80982: LD_INT 1
80984: NEG
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: LIST
80994: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80995: LD_ADDR_VAR 0 16
80999: PUSH
81000: LD_INT 2
81002: NEG
81003: PUSH
81004: LD_INT 3
81006: NEG
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: PUSH
81012: LD_INT 3
81014: NEG
81015: PUSH
81016: LD_INT 2
81018: NEG
81019: PUSH
81020: EMPTY
81021: LIST
81022: LIST
81023: PUSH
81024: LD_INT 3
81026: NEG
81027: PUSH
81028: LD_INT 3
81030: NEG
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: LIST
81040: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81041: LD_ADDR_VAR 0 17
81045: PUSH
81046: LD_INT 1
81048: NEG
81049: PUSH
81050: LD_INT 3
81052: NEG
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: PUSH
81058: LD_INT 0
81060: PUSH
81061: LD_INT 3
81063: NEG
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PUSH
81069: LD_INT 1
81071: PUSH
81072: LD_INT 2
81074: NEG
81075: PUSH
81076: EMPTY
81077: LIST
81078: LIST
81079: PUSH
81080: EMPTY
81081: LIST
81082: LIST
81083: LIST
81084: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81085: LD_ADDR_VAR 0 18
81089: PUSH
81090: LD_INT 2
81092: PUSH
81093: LD_INT 1
81095: NEG
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: PUSH
81101: LD_INT 3
81103: PUSH
81104: LD_INT 0
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PUSH
81111: LD_INT 3
81113: PUSH
81114: LD_INT 1
81116: PUSH
81117: EMPTY
81118: LIST
81119: LIST
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: LIST
81125: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81126: LD_ADDR_VAR 0 19
81130: PUSH
81131: LD_INT 3
81133: PUSH
81134: LD_INT 2
81136: PUSH
81137: EMPTY
81138: LIST
81139: LIST
81140: PUSH
81141: LD_INT 3
81143: PUSH
81144: LD_INT 3
81146: PUSH
81147: EMPTY
81148: LIST
81149: LIST
81150: PUSH
81151: LD_INT 2
81153: PUSH
81154: LD_INT 3
81156: PUSH
81157: EMPTY
81158: LIST
81159: LIST
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: LIST
81165: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81166: LD_ADDR_VAR 0 20
81170: PUSH
81171: LD_INT 1
81173: PUSH
81174: LD_INT 3
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: PUSH
81181: LD_INT 0
81183: PUSH
81184: LD_INT 3
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: PUSH
81191: LD_INT 1
81193: NEG
81194: PUSH
81195: LD_INT 2
81197: PUSH
81198: EMPTY
81199: LIST
81200: LIST
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: LIST
81206: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81207: LD_ADDR_VAR 0 21
81211: PUSH
81212: LD_INT 2
81214: NEG
81215: PUSH
81216: LD_INT 1
81218: PUSH
81219: EMPTY
81220: LIST
81221: LIST
81222: PUSH
81223: LD_INT 3
81225: NEG
81226: PUSH
81227: LD_INT 0
81229: PUSH
81230: EMPTY
81231: LIST
81232: LIST
81233: PUSH
81234: LD_INT 3
81236: NEG
81237: PUSH
81238: LD_INT 1
81240: NEG
81241: PUSH
81242: EMPTY
81243: LIST
81244: LIST
81245: PUSH
81246: EMPTY
81247: LIST
81248: LIST
81249: LIST
81250: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81251: LD_ADDR_VAR 0 22
81255: PUSH
81256: LD_INT 2
81258: NEG
81259: PUSH
81260: LD_INT 3
81262: NEG
81263: PUSH
81264: EMPTY
81265: LIST
81266: LIST
81267: PUSH
81268: LD_INT 3
81270: NEG
81271: PUSH
81272: LD_INT 2
81274: NEG
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: PUSH
81280: LD_INT 3
81282: NEG
81283: PUSH
81284: LD_INT 3
81286: NEG
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: PUSH
81292: EMPTY
81293: LIST
81294: LIST
81295: LIST
81296: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81297: LD_ADDR_VAR 0 23
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: LD_INT 3
81307: NEG
81308: PUSH
81309: EMPTY
81310: LIST
81311: LIST
81312: PUSH
81313: LD_INT 1
81315: NEG
81316: PUSH
81317: LD_INT 4
81319: NEG
81320: PUSH
81321: EMPTY
81322: LIST
81323: LIST
81324: PUSH
81325: LD_INT 1
81327: PUSH
81328: LD_INT 3
81330: NEG
81331: PUSH
81332: EMPTY
81333: LIST
81334: LIST
81335: PUSH
81336: EMPTY
81337: LIST
81338: LIST
81339: LIST
81340: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81341: LD_ADDR_VAR 0 24
81345: PUSH
81346: LD_INT 3
81348: PUSH
81349: LD_INT 0
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: PUSH
81356: LD_INT 3
81358: PUSH
81359: LD_INT 1
81361: NEG
81362: PUSH
81363: EMPTY
81364: LIST
81365: LIST
81366: PUSH
81367: LD_INT 4
81369: PUSH
81370: LD_INT 1
81372: PUSH
81373: EMPTY
81374: LIST
81375: LIST
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: LIST
81381: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81382: LD_ADDR_VAR 0 25
81386: PUSH
81387: LD_INT 3
81389: PUSH
81390: LD_INT 3
81392: PUSH
81393: EMPTY
81394: LIST
81395: LIST
81396: PUSH
81397: LD_INT 4
81399: PUSH
81400: LD_INT 3
81402: PUSH
81403: EMPTY
81404: LIST
81405: LIST
81406: PUSH
81407: LD_INT 3
81409: PUSH
81410: LD_INT 4
81412: PUSH
81413: EMPTY
81414: LIST
81415: LIST
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: LIST
81421: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81422: LD_ADDR_VAR 0 26
81426: PUSH
81427: LD_INT 0
81429: PUSH
81430: LD_INT 3
81432: PUSH
81433: EMPTY
81434: LIST
81435: LIST
81436: PUSH
81437: LD_INT 1
81439: PUSH
81440: LD_INT 4
81442: PUSH
81443: EMPTY
81444: LIST
81445: LIST
81446: PUSH
81447: LD_INT 1
81449: NEG
81450: PUSH
81451: LD_INT 3
81453: PUSH
81454: EMPTY
81455: LIST
81456: LIST
81457: PUSH
81458: EMPTY
81459: LIST
81460: LIST
81461: LIST
81462: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
81463: LD_ADDR_VAR 0 27
81467: PUSH
81468: LD_INT 3
81470: NEG
81471: PUSH
81472: LD_INT 0
81474: PUSH
81475: EMPTY
81476: LIST
81477: LIST
81478: PUSH
81479: LD_INT 3
81481: NEG
81482: PUSH
81483: LD_INT 1
81485: PUSH
81486: EMPTY
81487: LIST
81488: LIST
81489: PUSH
81490: LD_INT 4
81492: NEG
81493: PUSH
81494: LD_INT 1
81496: NEG
81497: PUSH
81498: EMPTY
81499: LIST
81500: LIST
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: LIST
81506: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
81507: LD_ADDR_VAR 0 28
81511: PUSH
81512: LD_INT 3
81514: NEG
81515: PUSH
81516: LD_INT 3
81518: NEG
81519: PUSH
81520: EMPTY
81521: LIST
81522: LIST
81523: PUSH
81524: LD_INT 3
81526: NEG
81527: PUSH
81528: LD_INT 4
81530: NEG
81531: PUSH
81532: EMPTY
81533: LIST
81534: LIST
81535: PUSH
81536: LD_INT 4
81538: NEG
81539: PUSH
81540: LD_INT 3
81542: NEG
81543: PUSH
81544: EMPTY
81545: LIST
81546: LIST
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: LIST
81552: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
81553: LD_ADDR_VAR 0 29
81557: PUSH
81558: LD_INT 1
81560: NEG
81561: PUSH
81562: LD_INT 3
81564: NEG
81565: PUSH
81566: EMPTY
81567: LIST
81568: LIST
81569: PUSH
81570: LD_INT 0
81572: PUSH
81573: LD_INT 3
81575: NEG
81576: PUSH
81577: EMPTY
81578: LIST
81579: LIST
81580: PUSH
81581: LD_INT 1
81583: PUSH
81584: LD_INT 2
81586: NEG
81587: PUSH
81588: EMPTY
81589: LIST
81590: LIST
81591: PUSH
81592: LD_INT 1
81594: NEG
81595: PUSH
81596: LD_INT 4
81598: NEG
81599: PUSH
81600: EMPTY
81601: LIST
81602: LIST
81603: PUSH
81604: LD_INT 0
81606: PUSH
81607: LD_INT 4
81609: NEG
81610: PUSH
81611: EMPTY
81612: LIST
81613: LIST
81614: PUSH
81615: LD_INT 1
81617: PUSH
81618: LD_INT 3
81620: NEG
81621: PUSH
81622: EMPTY
81623: LIST
81624: LIST
81625: PUSH
81626: LD_INT 1
81628: NEG
81629: PUSH
81630: LD_INT 5
81632: NEG
81633: PUSH
81634: EMPTY
81635: LIST
81636: LIST
81637: PUSH
81638: LD_INT 0
81640: PUSH
81641: LD_INT 5
81643: NEG
81644: PUSH
81645: EMPTY
81646: LIST
81647: LIST
81648: PUSH
81649: LD_INT 1
81651: PUSH
81652: LD_INT 4
81654: NEG
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: PUSH
81660: LD_INT 1
81662: NEG
81663: PUSH
81664: LD_INT 6
81666: NEG
81667: PUSH
81668: EMPTY
81669: LIST
81670: LIST
81671: PUSH
81672: LD_INT 0
81674: PUSH
81675: LD_INT 6
81677: NEG
81678: PUSH
81679: EMPTY
81680: LIST
81681: LIST
81682: PUSH
81683: LD_INT 1
81685: PUSH
81686: LD_INT 5
81688: NEG
81689: PUSH
81690: EMPTY
81691: LIST
81692: LIST
81693: PUSH
81694: EMPTY
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: LIST
81702: LIST
81703: LIST
81704: LIST
81705: LIST
81706: LIST
81707: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
81708: LD_ADDR_VAR 0 30
81712: PUSH
81713: LD_INT 2
81715: PUSH
81716: LD_INT 1
81718: NEG
81719: PUSH
81720: EMPTY
81721: LIST
81722: LIST
81723: PUSH
81724: LD_INT 3
81726: PUSH
81727: LD_INT 0
81729: PUSH
81730: EMPTY
81731: LIST
81732: LIST
81733: PUSH
81734: LD_INT 3
81736: PUSH
81737: LD_INT 1
81739: PUSH
81740: EMPTY
81741: LIST
81742: LIST
81743: PUSH
81744: LD_INT 3
81746: PUSH
81747: LD_INT 1
81749: NEG
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PUSH
81755: LD_INT 4
81757: PUSH
81758: LD_INT 0
81760: PUSH
81761: EMPTY
81762: LIST
81763: LIST
81764: PUSH
81765: LD_INT 4
81767: PUSH
81768: LD_INT 1
81770: PUSH
81771: EMPTY
81772: LIST
81773: LIST
81774: PUSH
81775: LD_INT 4
81777: PUSH
81778: LD_INT 1
81780: NEG
81781: PUSH
81782: EMPTY
81783: LIST
81784: LIST
81785: PUSH
81786: LD_INT 5
81788: PUSH
81789: LD_INT 0
81791: PUSH
81792: EMPTY
81793: LIST
81794: LIST
81795: PUSH
81796: LD_INT 5
81798: PUSH
81799: LD_INT 1
81801: PUSH
81802: EMPTY
81803: LIST
81804: LIST
81805: PUSH
81806: LD_INT 5
81808: PUSH
81809: LD_INT 1
81811: NEG
81812: PUSH
81813: EMPTY
81814: LIST
81815: LIST
81816: PUSH
81817: LD_INT 6
81819: PUSH
81820: LD_INT 0
81822: PUSH
81823: EMPTY
81824: LIST
81825: LIST
81826: PUSH
81827: LD_INT 6
81829: PUSH
81830: LD_INT 1
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: PUSH
81837: EMPTY
81838: LIST
81839: LIST
81840: LIST
81841: LIST
81842: LIST
81843: LIST
81844: LIST
81845: LIST
81846: LIST
81847: LIST
81848: LIST
81849: LIST
81850: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
81851: LD_ADDR_VAR 0 31
81855: PUSH
81856: LD_INT 3
81858: PUSH
81859: LD_INT 2
81861: PUSH
81862: EMPTY
81863: LIST
81864: LIST
81865: PUSH
81866: LD_INT 3
81868: PUSH
81869: LD_INT 3
81871: PUSH
81872: EMPTY
81873: LIST
81874: LIST
81875: PUSH
81876: LD_INT 2
81878: PUSH
81879: LD_INT 3
81881: PUSH
81882: EMPTY
81883: LIST
81884: LIST
81885: PUSH
81886: LD_INT 4
81888: PUSH
81889: LD_INT 3
81891: PUSH
81892: EMPTY
81893: LIST
81894: LIST
81895: PUSH
81896: LD_INT 4
81898: PUSH
81899: LD_INT 4
81901: PUSH
81902: EMPTY
81903: LIST
81904: LIST
81905: PUSH
81906: LD_INT 3
81908: PUSH
81909: LD_INT 4
81911: PUSH
81912: EMPTY
81913: LIST
81914: LIST
81915: PUSH
81916: LD_INT 5
81918: PUSH
81919: LD_INT 4
81921: PUSH
81922: EMPTY
81923: LIST
81924: LIST
81925: PUSH
81926: LD_INT 5
81928: PUSH
81929: LD_INT 5
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: PUSH
81936: LD_INT 4
81938: PUSH
81939: LD_INT 5
81941: PUSH
81942: EMPTY
81943: LIST
81944: LIST
81945: PUSH
81946: LD_INT 6
81948: PUSH
81949: LD_INT 5
81951: PUSH
81952: EMPTY
81953: LIST
81954: LIST
81955: PUSH
81956: LD_INT 6
81958: PUSH
81959: LD_INT 6
81961: PUSH
81962: EMPTY
81963: LIST
81964: LIST
81965: PUSH
81966: LD_INT 5
81968: PUSH
81969: LD_INT 6
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: PUSH
81976: EMPTY
81977: LIST
81978: LIST
81979: LIST
81980: LIST
81981: LIST
81982: LIST
81983: LIST
81984: LIST
81985: LIST
81986: LIST
81987: LIST
81988: LIST
81989: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
81990: LD_ADDR_VAR 0 32
81994: PUSH
81995: LD_INT 1
81997: PUSH
81998: LD_INT 3
82000: PUSH
82001: EMPTY
82002: LIST
82003: LIST
82004: PUSH
82005: LD_INT 0
82007: PUSH
82008: LD_INT 3
82010: PUSH
82011: EMPTY
82012: LIST
82013: LIST
82014: PUSH
82015: LD_INT 1
82017: NEG
82018: PUSH
82019: LD_INT 2
82021: PUSH
82022: EMPTY
82023: LIST
82024: LIST
82025: PUSH
82026: LD_INT 1
82028: PUSH
82029: LD_INT 4
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: PUSH
82036: LD_INT 0
82038: PUSH
82039: LD_INT 4
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: LD_INT 1
82048: NEG
82049: PUSH
82050: LD_INT 3
82052: PUSH
82053: EMPTY
82054: LIST
82055: LIST
82056: PUSH
82057: LD_INT 1
82059: PUSH
82060: LD_INT 5
82062: PUSH
82063: EMPTY
82064: LIST
82065: LIST
82066: PUSH
82067: LD_INT 0
82069: PUSH
82070: LD_INT 5
82072: PUSH
82073: EMPTY
82074: LIST
82075: LIST
82076: PUSH
82077: LD_INT 1
82079: NEG
82080: PUSH
82081: LD_INT 4
82083: PUSH
82084: EMPTY
82085: LIST
82086: LIST
82087: PUSH
82088: LD_INT 1
82090: PUSH
82091: LD_INT 6
82093: PUSH
82094: EMPTY
82095: LIST
82096: LIST
82097: PUSH
82098: LD_INT 0
82100: PUSH
82101: LD_INT 6
82103: PUSH
82104: EMPTY
82105: LIST
82106: LIST
82107: PUSH
82108: LD_INT 1
82110: NEG
82111: PUSH
82112: LD_INT 5
82114: PUSH
82115: EMPTY
82116: LIST
82117: LIST
82118: PUSH
82119: EMPTY
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: LIST
82129: LIST
82130: LIST
82131: LIST
82132: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
82133: LD_ADDR_VAR 0 33
82137: PUSH
82138: LD_INT 2
82140: NEG
82141: PUSH
82142: LD_INT 1
82144: PUSH
82145: EMPTY
82146: LIST
82147: LIST
82148: PUSH
82149: LD_INT 3
82151: NEG
82152: PUSH
82153: LD_INT 0
82155: PUSH
82156: EMPTY
82157: LIST
82158: LIST
82159: PUSH
82160: LD_INT 3
82162: NEG
82163: PUSH
82164: LD_INT 1
82166: NEG
82167: PUSH
82168: EMPTY
82169: LIST
82170: LIST
82171: PUSH
82172: LD_INT 3
82174: NEG
82175: PUSH
82176: LD_INT 1
82178: PUSH
82179: EMPTY
82180: LIST
82181: LIST
82182: PUSH
82183: LD_INT 4
82185: NEG
82186: PUSH
82187: LD_INT 0
82189: PUSH
82190: EMPTY
82191: LIST
82192: LIST
82193: PUSH
82194: LD_INT 4
82196: NEG
82197: PUSH
82198: LD_INT 1
82200: NEG
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: PUSH
82206: LD_INT 4
82208: NEG
82209: PUSH
82210: LD_INT 1
82212: PUSH
82213: EMPTY
82214: LIST
82215: LIST
82216: PUSH
82217: LD_INT 5
82219: NEG
82220: PUSH
82221: LD_INT 0
82223: PUSH
82224: EMPTY
82225: LIST
82226: LIST
82227: PUSH
82228: LD_INT 5
82230: NEG
82231: PUSH
82232: LD_INT 1
82234: NEG
82235: PUSH
82236: EMPTY
82237: LIST
82238: LIST
82239: PUSH
82240: LD_INT 5
82242: NEG
82243: PUSH
82244: LD_INT 1
82246: PUSH
82247: EMPTY
82248: LIST
82249: LIST
82250: PUSH
82251: LD_INT 6
82253: NEG
82254: PUSH
82255: LD_INT 0
82257: PUSH
82258: EMPTY
82259: LIST
82260: LIST
82261: PUSH
82262: LD_INT 6
82264: NEG
82265: PUSH
82266: LD_INT 1
82268: NEG
82269: PUSH
82270: EMPTY
82271: LIST
82272: LIST
82273: PUSH
82274: EMPTY
82275: LIST
82276: LIST
82277: LIST
82278: LIST
82279: LIST
82280: LIST
82281: LIST
82282: LIST
82283: LIST
82284: LIST
82285: LIST
82286: LIST
82287: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82288: LD_ADDR_VAR 0 34
82292: PUSH
82293: LD_INT 2
82295: NEG
82296: PUSH
82297: LD_INT 3
82299: NEG
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: PUSH
82305: LD_INT 3
82307: NEG
82308: PUSH
82309: LD_INT 2
82311: NEG
82312: PUSH
82313: EMPTY
82314: LIST
82315: LIST
82316: PUSH
82317: LD_INT 3
82319: NEG
82320: PUSH
82321: LD_INT 3
82323: NEG
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: PUSH
82329: LD_INT 3
82331: NEG
82332: PUSH
82333: LD_INT 4
82335: NEG
82336: PUSH
82337: EMPTY
82338: LIST
82339: LIST
82340: PUSH
82341: LD_INT 4
82343: NEG
82344: PUSH
82345: LD_INT 3
82347: NEG
82348: PUSH
82349: EMPTY
82350: LIST
82351: LIST
82352: PUSH
82353: LD_INT 4
82355: NEG
82356: PUSH
82357: LD_INT 4
82359: NEG
82360: PUSH
82361: EMPTY
82362: LIST
82363: LIST
82364: PUSH
82365: LD_INT 4
82367: NEG
82368: PUSH
82369: LD_INT 5
82371: NEG
82372: PUSH
82373: EMPTY
82374: LIST
82375: LIST
82376: PUSH
82377: LD_INT 5
82379: NEG
82380: PUSH
82381: LD_INT 4
82383: NEG
82384: PUSH
82385: EMPTY
82386: LIST
82387: LIST
82388: PUSH
82389: LD_INT 5
82391: NEG
82392: PUSH
82393: LD_INT 5
82395: NEG
82396: PUSH
82397: EMPTY
82398: LIST
82399: LIST
82400: PUSH
82401: LD_INT 5
82403: NEG
82404: PUSH
82405: LD_INT 6
82407: NEG
82408: PUSH
82409: EMPTY
82410: LIST
82411: LIST
82412: PUSH
82413: LD_INT 6
82415: NEG
82416: PUSH
82417: LD_INT 5
82419: NEG
82420: PUSH
82421: EMPTY
82422: LIST
82423: LIST
82424: PUSH
82425: LD_INT 6
82427: NEG
82428: PUSH
82429: LD_INT 6
82431: NEG
82432: PUSH
82433: EMPTY
82434: LIST
82435: LIST
82436: PUSH
82437: EMPTY
82438: LIST
82439: LIST
82440: LIST
82441: LIST
82442: LIST
82443: LIST
82444: LIST
82445: LIST
82446: LIST
82447: LIST
82448: LIST
82449: LIST
82450: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82451: LD_ADDR_VAR 0 41
82455: PUSH
82456: LD_INT 0
82458: PUSH
82459: LD_INT 2
82461: NEG
82462: PUSH
82463: EMPTY
82464: LIST
82465: LIST
82466: PUSH
82467: LD_INT 1
82469: NEG
82470: PUSH
82471: LD_INT 3
82473: NEG
82474: PUSH
82475: EMPTY
82476: LIST
82477: LIST
82478: PUSH
82479: LD_INT 1
82481: PUSH
82482: LD_INT 2
82484: NEG
82485: PUSH
82486: EMPTY
82487: LIST
82488: LIST
82489: PUSH
82490: EMPTY
82491: LIST
82492: LIST
82493: LIST
82494: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
82495: LD_ADDR_VAR 0 42
82499: PUSH
82500: LD_INT 2
82502: PUSH
82503: LD_INT 0
82505: PUSH
82506: EMPTY
82507: LIST
82508: LIST
82509: PUSH
82510: LD_INT 2
82512: PUSH
82513: LD_INT 1
82515: NEG
82516: PUSH
82517: EMPTY
82518: LIST
82519: LIST
82520: PUSH
82521: LD_INT 3
82523: PUSH
82524: LD_INT 1
82526: PUSH
82527: EMPTY
82528: LIST
82529: LIST
82530: PUSH
82531: EMPTY
82532: LIST
82533: LIST
82534: LIST
82535: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
82536: LD_ADDR_VAR 0 43
82540: PUSH
82541: LD_INT 2
82543: PUSH
82544: LD_INT 2
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: PUSH
82551: LD_INT 3
82553: PUSH
82554: LD_INT 2
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PUSH
82561: LD_INT 2
82563: PUSH
82564: LD_INT 3
82566: PUSH
82567: EMPTY
82568: LIST
82569: LIST
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: LIST
82575: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
82576: LD_ADDR_VAR 0 44
82580: PUSH
82581: LD_INT 0
82583: PUSH
82584: LD_INT 2
82586: PUSH
82587: EMPTY
82588: LIST
82589: LIST
82590: PUSH
82591: LD_INT 1
82593: PUSH
82594: LD_INT 3
82596: PUSH
82597: EMPTY
82598: LIST
82599: LIST
82600: PUSH
82601: LD_INT 1
82603: NEG
82604: PUSH
82605: LD_INT 2
82607: PUSH
82608: EMPTY
82609: LIST
82610: LIST
82611: PUSH
82612: EMPTY
82613: LIST
82614: LIST
82615: LIST
82616: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
82617: LD_ADDR_VAR 0 45
82621: PUSH
82622: LD_INT 2
82624: NEG
82625: PUSH
82626: LD_INT 0
82628: PUSH
82629: EMPTY
82630: LIST
82631: LIST
82632: PUSH
82633: LD_INT 2
82635: NEG
82636: PUSH
82637: LD_INT 1
82639: PUSH
82640: EMPTY
82641: LIST
82642: LIST
82643: PUSH
82644: LD_INT 3
82646: NEG
82647: PUSH
82648: LD_INT 1
82650: NEG
82651: PUSH
82652: EMPTY
82653: LIST
82654: LIST
82655: PUSH
82656: EMPTY
82657: LIST
82658: LIST
82659: LIST
82660: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
82661: LD_ADDR_VAR 0 46
82665: PUSH
82666: LD_INT 2
82668: NEG
82669: PUSH
82670: LD_INT 2
82672: NEG
82673: PUSH
82674: EMPTY
82675: LIST
82676: LIST
82677: PUSH
82678: LD_INT 2
82680: NEG
82681: PUSH
82682: LD_INT 3
82684: NEG
82685: PUSH
82686: EMPTY
82687: LIST
82688: LIST
82689: PUSH
82690: LD_INT 3
82692: NEG
82693: PUSH
82694: LD_INT 2
82696: NEG
82697: PUSH
82698: EMPTY
82699: LIST
82700: LIST
82701: PUSH
82702: EMPTY
82703: LIST
82704: LIST
82705: LIST
82706: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
82707: LD_ADDR_VAR 0 47
82711: PUSH
82712: LD_INT 2
82714: NEG
82715: PUSH
82716: LD_INT 3
82718: NEG
82719: PUSH
82720: EMPTY
82721: LIST
82722: LIST
82723: PUSH
82724: LD_INT 1
82726: NEG
82727: PUSH
82728: LD_INT 3
82730: NEG
82731: PUSH
82732: EMPTY
82733: LIST
82734: LIST
82735: PUSH
82736: EMPTY
82737: LIST
82738: LIST
82739: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
82740: LD_ADDR_VAR 0 48
82744: PUSH
82745: LD_INT 1
82747: PUSH
82748: LD_INT 2
82750: NEG
82751: PUSH
82752: EMPTY
82753: LIST
82754: LIST
82755: PUSH
82756: LD_INT 2
82758: PUSH
82759: LD_INT 1
82761: NEG
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PUSH
82767: EMPTY
82768: LIST
82769: LIST
82770: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
82771: LD_ADDR_VAR 0 49
82775: PUSH
82776: LD_INT 3
82778: PUSH
82779: LD_INT 1
82781: PUSH
82782: EMPTY
82783: LIST
82784: LIST
82785: PUSH
82786: LD_INT 3
82788: PUSH
82789: LD_INT 2
82791: PUSH
82792: EMPTY
82793: LIST
82794: LIST
82795: PUSH
82796: EMPTY
82797: LIST
82798: LIST
82799: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
82800: LD_ADDR_VAR 0 50
82804: PUSH
82805: LD_INT 2
82807: PUSH
82808: LD_INT 3
82810: PUSH
82811: EMPTY
82812: LIST
82813: LIST
82814: PUSH
82815: LD_INT 1
82817: PUSH
82818: LD_INT 3
82820: PUSH
82821: EMPTY
82822: LIST
82823: LIST
82824: PUSH
82825: EMPTY
82826: LIST
82827: LIST
82828: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
82829: LD_ADDR_VAR 0 51
82833: PUSH
82834: LD_INT 1
82836: NEG
82837: PUSH
82838: LD_INT 2
82840: PUSH
82841: EMPTY
82842: LIST
82843: LIST
82844: PUSH
82845: LD_INT 2
82847: NEG
82848: PUSH
82849: LD_INT 1
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: PUSH
82856: EMPTY
82857: LIST
82858: LIST
82859: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
82860: LD_ADDR_VAR 0 52
82864: PUSH
82865: LD_INT 3
82867: NEG
82868: PUSH
82869: LD_INT 1
82871: NEG
82872: PUSH
82873: EMPTY
82874: LIST
82875: LIST
82876: PUSH
82877: LD_INT 3
82879: NEG
82880: PUSH
82881: LD_INT 2
82883: NEG
82884: PUSH
82885: EMPTY
82886: LIST
82887: LIST
82888: PUSH
82889: EMPTY
82890: LIST
82891: LIST
82892: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82893: LD_ADDR_VAR 0 53
82897: PUSH
82898: LD_INT 1
82900: NEG
82901: PUSH
82902: LD_INT 3
82904: NEG
82905: PUSH
82906: EMPTY
82907: LIST
82908: LIST
82909: PUSH
82910: LD_INT 0
82912: PUSH
82913: LD_INT 3
82915: NEG
82916: PUSH
82917: EMPTY
82918: LIST
82919: LIST
82920: PUSH
82921: LD_INT 1
82923: PUSH
82924: LD_INT 2
82926: NEG
82927: PUSH
82928: EMPTY
82929: LIST
82930: LIST
82931: PUSH
82932: EMPTY
82933: LIST
82934: LIST
82935: LIST
82936: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82937: LD_ADDR_VAR 0 54
82941: PUSH
82942: LD_INT 2
82944: PUSH
82945: LD_INT 1
82947: NEG
82948: PUSH
82949: EMPTY
82950: LIST
82951: LIST
82952: PUSH
82953: LD_INT 3
82955: PUSH
82956: LD_INT 0
82958: PUSH
82959: EMPTY
82960: LIST
82961: LIST
82962: PUSH
82963: LD_INT 3
82965: PUSH
82966: LD_INT 1
82968: PUSH
82969: EMPTY
82970: LIST
82971: LIST
82972: PUSH
82973: EMPTY
82974: LIST
82975: LIST
82976: LIST
82977: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82978: LD_ADDR_VAR 0 55
82982: PUSH
82983: LD_INT 3
82985: PUSH
82986: LD_INT 2
82988: PUSH
82989: EMPTY
82990: LIST
82991: LIST
82992: PUSH
82993: LD_INT 3
82995: PUSH
82996: LD_INT 3
82998: PUSH
82999: EMPTY
83000: LIST
83001: LIST
83002: PUSH
83003: LD_INT 2
83005: PUSH
83006: LD_INT 3
83008: PUSH
83009: EMPTY
83010: LIST
83011: LIST
83012: PUSH
83013: EMPTY
83014: LIST
83015: LIST
83016: LIST
83017: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83018: LD_ADDR_VAR 0 56
83022: PUSH
83023: LD_INT 1
83025: PUSH
83026: LD_INT 3
83028: PUSH
83029: EMPTY
83030: LIST
83031: LIST
83032: PUSH
83033: LD_INT 0
83035: PUSH
83036: LD_INT 3
83038: PUSH
83039: EMPTY
83040: LIST
83041: LIST
83042: PUSH
83043: LD_INT 1
83045: NEG
83046: PUSH
83047: LD_INT 2
83049: PUSH
83050: EMPTY
83051: LIST
83052: LIST
83053: PUSH
83054: EMPTY
83055: LIST
83056: LIST
83057: LIST
83058: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83059: LD_ADDR_VAR 0 57
83063: PUSH
83064: LD_INT 2
83066: NEG
83067: PUSH
83068: LD_INT 1
83070: PUSH
83071: EMPTY
83072: LIST
83073: LIST
83074: PUSH
83075: LD_INT 3
83077: NEG
83078: PUSH
83079: LD_INT 0
83081: PUSH
83082: EMPTY
83083: LIST
83084: LIST
83085: PUSH
83086: LD_INT 3
83088: NEG
83089: PUSH
83090: LD_INT 1
83092: NEG
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: PUSH
83098: EMPTY
83099: LIST
83100: LIST
83101: LIST
83102: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83103: LD_ADDR_VAR 0 58
83107: PUSH
83108: LD_INT 2
83110: NEG
83111: PUSH
83112: LD_INT 3
83114: NEG
83115: PUSH
83116: EMPTY
83117: LIST
83118: LIST
83119: PUSH
83120: LD_INT 3
83122: NEG
83123: PUSH
83124: LD_INT 2
83126: NEG
83127: PUSH
83128: EMPTY
83129: LIST
83130: LIST
83131: PUSH
83132: LD_INT 3
83134: NEG
83135: PUSH
83136: LD_INT 3
83138: NEG
83139: PUSH
83140: EMPTY
83141: LIST
83142: LIST
83143: PUSH
83144: EMPTY
83145: LIST
83146: LIST
83147: LIST
83148: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
83149: LD_ADDR_VAR 0 59
83153: PUSH
83154: LD_INT 1
83156: NEG
83157: PUSH
83158: LD_INT 2
83160: NEG
83161: PUSH
83162: EMPTY
83163: LIST
83164: LIST
83165: PUSH
83166: LD_INT 0
83168: PUSH
83169: LD_INT 2
83171: NEG
83172: PUSH
83173: EMPTY
83174: LIST
83175: LIST
83176: PUSH
83177: LD_INT 1
83179: PUSH
83180: LD_INT 1
83182: NEG
83183: PUSH
83184: EMPTY
83185: LIST
83186: LIST
83187: PUSH
83188: EMPTY
83189: LIST
83190: LIST
83191: LIST
83192: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83193: LD_ADDR_VAR 0 60
83197: PUSH
83198: LD_INT 1
83200: PUSH
83201: LD_INT 1
83203: NEG
83204: PUSH
83205: EMPTY
83206: LIST
83207: LIST
83208: PUSH
83209: LD_INT 2
83211: PUSH
83212: LD_INT 0
83214: PUSH
83215: EMPTY
83216: LIST
83217: LIST
83218: PUSH
83219: LD_INT 2
83221: PUSH
83222: LD_INT 1
83224: PUSH
83225: EMPTY
83226: LIST
83227: LIST
83228: PUSH
83229: EMPTY
83230: LIST
83231: LIST
83232: LIST
83233: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83234: LD_ADDR_VAR 0 61
83238: PUSH
83239: LD_INT 2
83241: PUSH
83242: LD_INT 1
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: PUSH
83249: LD_INT 2
83251: PUSH
83252: LD_INT 2
83254: PUSH
83255: EMPTY
83256: LIST
83257: LIST
83258: PUSH
83259: LD_INT 1
83261: PUSH
83262: LD_INT 2
83264: PUSH
83265: EMPTY
83266: LIST
83267: LIST
83268: PUSH
83269: EMPTY
83270: LIST
83271: LIST
83272: LIST
83273: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83274: LD_ADDR_VAR 0 62
83278: PUSH
83279: LD_INT 1
83281: PUSH
83282: LD_INT 2
83284: PUSH
83285: EMPTY
83286: LIST
83287: LIST
83288: PUSH
83289: LD_INT 0
83291: PUSH
83292: LD_INT 2
83294: PUSH
83295: EMPTY
83296: LIST
83297: LIST
83298: PUSH
83299: LD_INT 1
83301: NEG
83302: PUSH
83303: LD_INT 1
83305: PUSH
83306: EMPTY
83307: LIST
83308: LIST
83309: PUSH
83310: EMPTY
83311: LIST
83312: LIST
83313: LIST
83314: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83315: LD_ADDR_VAR 0 63
83319: PUSH
83320: LD_INT 1
83322: NEG
83323: PUSH
83324: LD_INT 1
83326: PUSH
83327: EMPTY
83328: LIST
83329: LIST
83330: PUSH
83331: LD_INT 2
83333: NEG
83334: PUSH
83335: LD_INT 0
83337: PUSH
83338: EMPTY
83339: LIST
83340: LIST
83341: PUSH
83342: LD_INT 2
83344: NEG
83345: PUSH
83346: LD_INT 1
83348: NEG
83349: PUSH
83350: EMPTY
83351: LIST
83352: LIST
83353: PUSH
83354: EMPTY
83355: LIST
83356: LIST
83357: LIST
83358: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83359: LD_ADDR_VAR 0 64
83363: PUSH
83364: LD_INT 1
83366: NEG
83367: PUSH
83368: LD_INT 2
83370: NEG
83371: PUSH
83372: EMPTY
83373: LIST
83374: LIST
83375: PUSH
83376: LD_INT 2
83378: NEG
83379: PUSH
83380: LD_INT 1
83382: NEG
83383: PUSH
83384: EMPTY
83385: LIST
83386: LIST
83387: PUSH
83388: LD_INT 2
83390: NEG
83391: PUSH
83392: LD_INT 2
83394: NEG
83395: PUSH
83396: EMPTY
83397: LIST
83398: LIST
83399: PUSH
83400: EMPTY
83401: LIST
83402: LIST
83403: LIST
83404: ST_TO_ADDR
// end ; 2 :
83405: GO 86671
83407: LD_INT 2
83409: DOUBLE
83410: EQUAL
83411: IFTRUE 83415
83413: GO 86670
83415: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83416: LD_ADDR_VAR 0 29
83420: PUSH
83421: LD_INT 4
83423: PUSH
83424: LD_INT 0
83426: PUSH
83427: EMPTY
83428: LIST
83429: LIST
83430: PUSH
83431: LD_INT 4
83433: PUSH
83434: LD_INT 1
83436: NEG
83437: PUSH
83438: EMPTY
83439: LIST
83440: LIST
83441: PUSH
83442: LD_INT 5
83444: PUSH
83445: LD_INT 0
83447: PUSH
83448: EMPTY
83449: LIST
83450: LIST
83451: PUSH
83452: LD_INT 5
83454: PUSH
83455: LD_INT 1
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: PUSH
83462: LD_INT 4
83464: PUSH
83465: LD_INT 1
83467: PUSH
83468: EMPTY
83469: LIST
83470: LIST
83471: PUSH
83472: LD_INT 3
83474: PUSH
83475: LD_INT 0
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: PUSH
83482: LD_INT 3
83484: PUSH
83485: LD_INT 1
83487: NEG
83488: PUSH
83489: EMPTY
83490: LIST
83491: LIST
83492: PUSH
83493: LD_INT 3
83495: PUSH
83496: LD_INT 2
83498: NEG
83499: PUSH
83500: EMPTY
83501: LIST
83502: LIST
83503: PUSH
83504: LD_INT 5
83506: PUSH
83507: LD_INT 2
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: PUSH
83514: LD_INT 3
83516: PUSH
83517: LD_INT 3
83519: PUSH
83520: EMPTY
83521: LIST
83522: LIST
83523: PUSH
83524: LD_INT 3
83526: PUSH
83527: LD_INT 2
83529: PUSH
83530: EMPTY
83531: LIST
83532: LIST
83533: PUSH
83534: LD_INT 4
83536: PUSH
83537: LD_INT 3
83539: PUSH
83540: EMPTY
83541: LIST
83542: LIST
83543: PUSH
83544: LD_INT 4
83546: PUSH
83547: LD_INT 4
83549: PUSH
83550: EMPTY
83551: LIST
83552: LIST
83553: PUSH
83554: LD_INT 3
83556: PUSH
83557: LD_INT 4
83559: PUSH
83560: EMPTY
83561: LIST
83562: LIST
83563: PUSH
83564: LD_INT 2
83566: PUSH
83567: LD_INT 3
83569: PUSH
83570: EMPTY
83571: LIST
83572: LIST
83573: PUSH
83574: LD_INT 2
83576: PUSH
83577: LD_INT 2
83579: PUSH
83580: EMPTY
83581: LIST
83582: LIST
83583: PUSH
83584: LD_INT 4
83586: PUSH
83587: LD_INT 2
83589: PUSH
83590: EMPTY
83591: LIST
83592: LIST
83593: PUSH
83594: LD_INT 2
83596: PUSH
83597: LD_INT 4
83599: PUSH
83600: EMPTY
83601: LIST
83602: LIST
83603: PUSH
83604: LD_INT 0
83606: PUSH
83607: LD_INT 4
83609: PUSH
83610: EMPTY
83611: LIST
83612: LIST
83613: PUSH
83614: LD_INT 0
83616: PUSH
83617: LD_INT 3
83619: PUSH
83620: EMPTY
83621: LIST
83622: LIST
83623: PUSH
83624: LD_INT 1
83626: PUSH
83627: LD_INT 4
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: PUSH
83634: LD_INT 1
83636: PUSH
83637: LD_INT 5
83639: PUSH
83640: EMPTY
83641: LIST
83642: LIST
83643: PUSH
83644: LD_INT 0
83646: PUSH
83647: LD_INT 5
83649: PUSH
83650: EMPTY
83651: LIST
83652: LIST
83653: PUSH
83654: LD_INT 1
83656: NEG
83657: PUSH
83658: LD_INT 4
83660: PUSH
83661: EMPTY
83662: LIST
83663: LIST
83664: PUSH
83665: LD_INT 1
83667: NEG
83668: PUSH
83669: LD_INT 3
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PUSH
83676: LD_INT 2
83678: PUSH
83679: LD_INT 5
83681: PUSH
83682: EMPTY
83683: LIST
83684: LIST
83685: PUSH
83686: LD_INT 2
83688: NEG
83689: PUSH
83690: LD_INT 3
83692: PUSH
83693: EMPTY
83694: LIST
83695: LIST
83696: PUSH
83697: LD_INT 3
83699: NEG
83700: PUSH
83701: LD_INT 0
83703: PUSH
83704: EMPTY
83705: LIST
83706: LIST
83707: PUSH
83708: LD_INT 3
83710: NEG
83711: PUSH
83712: LD_INT 1
83714: NEG
83715: PUSH
83716: EMPTY
83717: LIST
83718: LIST
83719: PUSH
83720: LD_INT 2
83722: NEG
83723: PUSH
83724: LD_INT 0
83726: PUSH
83727: EMPTY
83728: LIST
83729: LIST
83730: PUSH
83731: LD_INT 2
83733: NEG
83734: PUSH
83735: LD_INT 1
83737: PUSH
83738: EMPTY
83739: LIST
83740: LIST
83741: PUSH
83742: LD_INT 3
83744: NEG
83745: PUSH
83746: LD_INT 1
83748: PUSH
83749: EMPTY
83750: LIST
83751: LIST
83752: PUSH
83753: LD_INT 4
83755: NEG
83756: PUSH
83757: LD_INT 0
83759: PUSH
83760: EMPTY
83761: LIST
83762: LIST
83763: PUSH
83764: LD_INT 4
83766: NEG
83767: PUSH
83768: LD_INT 1
83770: NEG
83771: PUSH
83772: EMPTY
83773: LIST
83774: LIST
83775: PUSH
83776: LD_INT 4
83778: NEG
83779: PUSH
83780: LD_INT 2
83782: NEG
83783: PUSH
83784: EMPTY
83785: LIST
83786: LIST
83787: PUSH
83788: LD_INT 2
83790: NEG
83791: PUSH
83792: LD_INT 2
83794: PUSH
83795: EMPTY
83796: LIST
83797: LIST
83798: PUSH
83799: LD_INT 4
83801: NEG
83802: PUSH
83803: LD_INT 4
83805: NEG
83806: PUSH
83807: EMPTY
83808: LIST
83809: LIST
83810: PUSH
83811: LD_INT 4
83813: NEG
83814: PUSH
83815: LD_INT 5
83817: NEG
83818: PUSH
83819: EMPTY
83820: LIST
83821: LIST
83822: PUSH
83823: LD_INT 3
83825: NEG
83826: PUSH
83827: LD_INT 4
83829: NEG
83830: PUSH
83831: EMPTY
83832: LIST
83833: LIST
83834: PUSH
83835: LD_INT 3
83837: NEG
83838: PUSH
83839: LD_INT 3
83841: NEG
83842: PUSH
83843: EMPTY
83844: LIST
83845: LIST
83846: PUSH
83847: LD_INT 4
83849: NEG
83850: PUSH
83851: LD_INT 3
83853: NEG
83854: PUSH
83855: EMPTY
83856: LIST
83857: LIST
83858: PUSH
83859: LD_INT 5
83861: NEG
83862: PUSH
83863: LD_INT 4
83865: NEG
83866: PUSH
83867: EMPTY
83868: LIST
83869: LIST
83870: PUSH
83871: LD_INT 5
83873: NEG
83874: PUSH
83875: LD_INT 5
83877: NEG
83878: PUSH
83879: EMPTY
83880: LIST
83881: LIST
83882: PUSH
83883: LD_INT 3
83885: NEG
83886: PUSH
83887: LD_INT 5
83889: NEG
83890: PUSH
83891: EMPTY
83892: LIST
83893: LIST
83894: PUSH
83895: LD_INT 5
83897: NEG
83898: PUSH
83899: LD_INT 3
83901: NEG
83902: PUSH
83903: EMPTY
83904: LIST
83905: LIST
83906: PUSH
83907: EMPTY
83908: LIST
83909: LIST
83910: LIST
83911: LIST
83912: LIST
83913: LIST
83914: LIST
83915: LIST
83916: LIST
83917: LIST
83918: LIST
83919: LIST
83920: LIST
83921: LIST
83922: LIST
83923: LIST
83924: LIST
83925: LIST
83926: LIST
83927: LIST
83928: LIST
83929: LIST
83930: LIST
83931: LIST
83932: LIST
83933: LIST
83934: LIST
83935: LIST
83936: LIST
83937: LIST
83938: LIST
83939: LIST
83940: LIST
83941: LIST
83942: LIST
83943: LIST
83944: LIST
83945: LIST
83946: LIST
83947: LIST
83948: LIST
83949: LIST
83950: LIST
83951: LIST
83952: LIST
83953: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
83954: LD_ADDR_VAR 0 30
83958: PUSH
83959: LD_INT 4
83961: PUSH
83962: LD_INT 4
83964: PUSH
83965: EMPTY
83966: LIST
83967: LIST
83968: PUSH
83969: LD_INT 4
83971: PUSH
83972: LD_INT 3
83974: PUSH
83975: EMPTY
83976: LIST
83977: LIST
83978: PUSH
83979: LD_INT 5
83981: PUSH
83982: LD_INT 4
83984: PUSH
83985: EMPTY
83986: LIST
83987: LIST
83988: PUSH
83989: LD_INT 5
83991: PUSH
83992: LD_INT 5
83994: PUSH
83995: EMPTY
83996: LIST
83997: LIST
83998: PUSH
83999: LD_INT 4
84001: PUSH
84002: LD_INT 5
84004: PUSH
84005: EMPTY
84006: LIST
84007: LIST
84008: PUSH
84009: LD_INT 3
84011: PUSH
84012: LD_INT 4
84014: PUSH
84015: EMPTY
84016: LIST
84017: LIST
84018: PUSH
84019: LD_INT 3
84021: PUSH
84022: LD_INT 3
84024: PUSH
84025: EMPTY
84026: LIST
84027: LIST
84028: PUSH
84029: LD_INT 5
84031: PUSH
84032: LD_INT 3
84034: PUSH
84035: EMPTY
84036: LIST
84037: LIST
84038: PUSH
84039: LD_INT 3
84041: PUSH
84042: LD_INT 5
84044: PUSH
84045: EMPTY
84046: LIST
84047: LIST
84048: PUSH
84049: LD_INT 0
84051: PUSH
84052: LD_INT 3
84054: PUSH
84055: EMPTY
84056: LIST
84057: LIST
84058: PUSH
84059: LD_INT 0
84061: PUSH
84062: LD_INT 2
84064: PUSH
84065: EMPTY
84066: LIST
84067: LIST
84068: PUSH
84069: LD_INT 1
84071: PUSH
84072: LD_INT 3
84074: PUSH
84075: EMPTY
84076: LIST
84077: LIST
84078: PUSH
84079: LD_INT 1
84081: PUSH
84082: LD_INT 4
84084: PUSH
84085: EMPTY
84086: LIST
84087: LIST
84088: PUSH
84089: LD_INT 0
84091: PUSH
84092: LD_INT 4
84094: PUSH
84095: EMPTY
84096: LIST
84097: LIST
84098: PUSH
84099: LD_INT 1
84101: NEG
84102: PUSH
84103: LD_INT 3
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: PUSH
84110: LD_INT 1
84112: NEG
84113: PUSH
84114: LD_INT 2
84116: PUSH
84117: EMPTY
84118: LIST
84119: LIST
84120: PUSH
84121: LD_INT 2
84123: PUSH
84124: LD_INT 4
84126: PUSH
84127: EMPTY
84128: LIST
84129: LIST
84130: PUSH
84131: LD_INT 2
84133: NEG
84134: PUSH
84135: LD_INT 2
84137: PUSH
84138: EMPTY
84139: LIST
84140: LIST
84141: PUSH
84142: LD_INT 4
84144: NEG
84145: PUSH
84146: LD_INT 0
84148: PUSH
84149: EMPTY
84150: LIST
84151: LIST
84152: PUSH
84153: LD_INT 4
84155: NEG
84156: PUSH
84157: LD_INT 1
84159: NEG
84160: PUSH
84161: EMPTY
84162: LIST
84163: LIST
84164: PUSH
84165: LD_INT 3
84167: NEG
84168: PUSH
84169: LD_INT 0
84171: PUSH
84172: EMPTY
84173: LIST
84174: LIST
84175: PUSH
84176: LD_INT 3
84178: NEG
84179: PUSH
84180: LD_INT 1
84182: PUSH
84183: EMPTY
84184: LIST
84185: LIST
84186: PUSH
84187: LD_INT 4
84189: NEG
84190: PUSH
84191: LD_INT 1
84193: PUSH
84194: EMPTY
84195: LIST
84196: LIST
84197: PUSH
84198: LD_INT 5
84200: NEG
84201: PUSH
84202: LD_INT 0
84204: PUSH
84205: EMPTY
84206: LIST
84207: LIST
84208: PUSH
84209: LD_INT 5
84211: NEG
84212: PUSH
84213: LD_INT 1
84215: NEG
84216: PUSH
84217: EMPTY
84218: LIST
84219: LIST
84220: PUSH
84221: LD_INT 5
84223: NEG
84224: PUSH
84225: LD_INT 2
84227: NEG
84228: PUSH
84229: EMPTY
84230: LIST
84231: LIST
84232: PUSH
84233: LD_INT 3
84235: NEG
84236: PUSH
84237: LD_INT 2
84239: PUSH
84240: EMPTY
84241: LIST
84242: LIST
84243: PUSH
84244: LD_INT 3
84246: NEG
84247: PUSH
84248: LD_INT 3
84250: NEG
84251: PUSH
84252: EMPTY
84253: LIST
84254: LIST
84255: PUSH
84256: LD_INT 3
84258: NEG
84259: PUSH
84260: LD_INT 4
84262: NEG
84263: PUSH
84264: EMPTY
84265: LIST
84266: LIST
84267: PUSH
84268: LD_INT 2
84270: NEG
84271: PUSH
84272: LD_INT 3
84274: NEG
84275: PUSH
84276: EMPTY
84277: LIST
84278: LIST
84279: PUSH
84280: LD_INT 2
84282: NEG
84283: PUSH
84284: LD_INT 2
84286: NEG
84287: PUSH
84288: EMPTY
84289: LIST
84290: LIST
84291: PUSH
84292: LD_INT 3
84294: NEG
84295: PUSH
84296: LD_INT 2
84298: NEG
84299: PUSH
84300: EMPTY
84301: LIST
84302: LIST
84303: PUSH
84304: LD_INT 4
84306: NEG
84307: PUSH
84308: LD_INT 3
84310: NEG
84311: PUSH
84312: EMPTY
84313: LIST
84314: LIST
84315: PUSH
84316: LD_INT 4
84318: NEG
84319: PUSH
84320: LD_INT 4
84322: NEG
84323: PUSH
84324: EMPTY
84325: LIST
84326: LIST
84327: PUSH
84328: LD_INT 2
84330: NEG
84331: PUSH
84332: LD_INT 4
84334: NEG
84335: PUSH
84336: EMPTY
84337: LIST
84338: LIST
84339: PUSH
84340: LD_INT 4
84342: NEG
84343: PUSH
84344: LD_INT 2
84346: NEG
84347: PUSH
84348: EMPTY
84349: LIST
84350: LIST
84351: PUSH
84352: LD_INT 0
84354: PUSH
84355: LD_INT 4
84357: NEG
84358: PUSH
84359: EMPTY
84360: LIST
84361: LIST
84362: PUSH
84363: LD_INT 0
84365: PUSH
84366: LD_INT 5
84368: NEG
84369: PUSH
84370: EMPTY
84371: LIST
84372: LIST
84373: PUSH
84374: LD_INT 1
84376: PUSH
84377: LD_INT 4
84379: NEG
84380: PUSH
84381: EMPTY
84382: LIST
84383: LIST
84384: PUSH
84385: LD_INT 1
84387: PUSH
84388: LD_INT 3
84390: NEG
84391: PUSH
84392: EMPTY
84393: LIST
84394: LIST
84395: PUSH
84396: LD_INT 0
84398: PUSH
84399: LD_INT 3
84401: NEG
84402: PUSH
84403: EMPTY
84404: LIST
84405: LIST
84406: PUSH
84407: LD_INT 1
84409: NEG
84410: PUSH
84411: LD_INT 4
84413: NEG
84414: PUSH
84415: EMPTY
84416: LIST
84417: LIST
84418: PUSH
84419: LD_INT 1
84421: NEG
84422: PUSH
84423: LD_INT 5
84425: NEG
84426: PUSH
84427: EMPTY
84428: LIST
84429: LIST
84430: PUSH
84431: LD_INT 2
84433: PUSH
84434: LD_INT 3
84436: NEG
84437: PUSH
84438: EMPTY
84439: LIST
84440: LIST
84441: PUSH
84442: LD_INT 2
84444: NEG
84445: PUSH
84446: LD_INT 5
84448: NEG
84449: PUSH
84450: EMPTY
84451: LIST
84452: LIST
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: LIST
84458: LIST
84459: LIST
84460: LIST
84461: LIST
84462: LIST
84463: LIST
84464: LIST
84465: LIST
84466: LIST
84467: LIST
84468: LIST
84469: LIST
84470: LIST
84471: LIST
84472: LIST
84473: LIST
84474: LIST
84475: LIST
84476: LIST
84477: LIST
84478: LIST
84479: LIST
84480: LIST
84481: LIST
84482: LIST
84483: LIST
84484: LIST
84485: LIST
84486: LIST
84487: LIST
84488: LIST
84489: LIST
84490: LIST
84491: LIST
84492: LIST
84493: LIST
84494: LIST
84495: LIST
84496: LIST
84497: LIST
84498: LIST
84499: LIST
84500: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
84501: LD_ADDR_VAR 0 31
84505: PUSH
84506: LD_INT 0
84508: PUSH
84509: LD_INT 4
84511: PUSH
84512: EMPTY
84513: LIST
84514: LIST
84515: PUSH
84516: LD_INT 0
84518: PUSH
84519: LD_INT 3
84521: PUSH
84522: EMPTY
84523: LIST
84524: LIST
84525: PUSH
84526: LD_INT 1
84528: PUSH
84529: LD_INT 4
84531: PUSH
84532: EMPTY
84533: LIST
84534: LIST
84535: PUSH
84536: LD_INT 1
84538: PUSH
84539: LD_INT 5
84541: PUSH
84542: EMPTY
84543: LIST
84544: LIST
84545: PUSH
84546: LD_INT 0
84548: PUSH
84549: LD_INT 5
84551: PUSH
84552: EMPTY
84553: LIST
84554: LIST
84555: PUSH
84556: LD_INT 1
84558: NEG
84559: PUSH
84560: LD_INT 4
84562: PUSH
84563: EMPTY
84564: LIST
84565: LIST
84566: PUSH
84567: LD_INT 1
84569: NEG
84570: PUSH
84571: LD_INT 3
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PUSH
84578: LD_INT 2
84580: PUSH
84581: LD_INT 5
84583: PUSH
84584: EMPTY
84585: LIST
84586: LIST
84587: PUSH
84588: LD_INT 2
84590: NEG
84591: PUSH
84592: LD_INT 3
84594: PUSH
84595: EMPTY
84596: LIST
84597: LIST
84598: PUSH
84599: LD_INT 3
84601: NEG
84602: PUSH
84603: LD_INT 0
84605: PUSH
84606: EMPTY
84607: LIST
84608: LIST
84609: PUSH
84610: LD_INT 3
84612: NEG
84613: PUSH
84614: LD_INT 1
84616: NEG
84617: PUSH
84618: EMPTY
84619: LIST
84620: LIST
84621: PUSH
84622: LD_INT 2
84624: NEG
84625: PUSH
84626: LD_INT 0
84628: PUSH
84629: EMPTY
84630: LIST
84631: LIST
84632: PUSH
84633: LD_INT 2
84635: NEG
84636: PUSH
84637: LD_INT 1
84639: PUSH
84640: EMPTY
84641: LIST
84642: LIST
84643: PUSH
84644: LD_INT 3
84646: NEG
84647: PUSH
84648: LD_INT 1
84650: PUSH
84651: EMPTY
84652: LIST
84653: LIST
84654: PUSH
84655: LD_INT 4
84657: NEG
84658: PUSH
84659: LD_INT 0
84661: PUSH
84662: EMPTY
84663: LIST
84664: LIST
84665: PUSH
84666: LD_INT 4
84668: NEG
84669: PUSH
84670: LD_INT 1
84672: NEG
84673: PUSH
84674: EMPTY
84675: LIST
84676: LIST
84677: PUSH
84678: LD_INT 4
84680: NEG
84681: PUSH
84682: LD_INT 2
84684: NEG
84685: PUSH
84686: EMPTY
84687: LIST
84688: LIST
84689: PUSH
84690: LD_INT 2
84692: NEG
84693: PUSH
84694: LD_INT 2
84696: PUSH
84697: EMPTY
84698: LIST
84699: LIST
84700: PUSH
84701: LD_INT 4
84703: NEG
84704: PUSH
84705: LD_INT 4
84707: NEG
84708: PUSH
84709: EMPTY
84710: LIST
84711: LIST
84712: PUSH
84713: LD_INT 4
84715: NEG
84716: PUSH
84717: LD_INT 5
84719: NEG
84720: PUSH
84721: EMPTY
84722: LIST
84723: LIST
84724: PUSH
84725: LD_INT 3
84727: NEG
84728: PUSH
84729: LD_INT 4
84731: NEG
84732: PUSH
84733: EMPTY
84734: LIST
84735: LIST
84736: PUSH
84737: LD_INT 3
84739: NEG
84740: PUSH
84741: LD_INT 3
84743: NEG
84744: PUSH
84745: EMPTY
84746: LIST
84747: LIST
84748: PUSH
84749: LD_INT 4
84751: NEG
84752: PUSH
84753: LD_INT 3
84755: NEG
84756: PUSH
84757: EMPTY
84758: LIST
84759: LIST
84760: PUSH
84761: LD_INT 5
84763: NEG
84764: PUSH
84765: LD_INT 4
84767: NEG
84768: PUSH
84769: EMPTY
84770: LIST
84771: LIST
84772: PUSH
84773: LD_INT 5
84775: NEG
84776: PUSH
84777: LD_INT 5
84779: NEG
84780: PUSH
84781: EMPTY
84782: LIST
84783: LIST
84784: PUSH
84785: LD_INT 3
84787: NEG
84788: PUSH
84789: LD_INT 5
84791: NEG
84792: PUSH
84793: EMPTY
84794: LIST
84795: LIST
84796: PUSH
84797: LD_INT 5
84799: NEG
84800: PUSH
84801: LD_INT 3
84803: NEG
84804: PUSH
84805: EMPTY
84806: LIST
84807: LIST
84808: PUSH
84809: LD_INT 0
84811: PUSH
84812: LD_INT 3
84814: NEG
84815: PUSH
84816: EMPTY
84817: LIST
84818: LIST
84819: PUSH
84820: LD_INT 0
84822: PUSH
84823: LD_INT 4
84825: NEG
84826: PUSH
84827: EMPTY
84828: LIST
84829: LIST
84830: PUSH
84831: LD_INT 1
84833: PUSH
84834: LD_INT 3
84836: NEG
84837: PUSH
84838: EMPTY
84839: LIST
84840: LIST
84841: PUSH
84842: LD_INT 1
84844: PUSH
84845: LD_INT 2
84847: NEG
84848: PUSH
84849: EMPTY
84850: LIST
84851: LIST
84852: PUSH
84853: LD_INT 0
84855: PUSH
84856: LD_INT 2
84858: NEG
84859: PUSH
84860: EMPTY
84861: LIST
84862: LIST
84863: PUSH
84864: LD_INT 1
84866: NEG
84867: PUSH
84868: LD_INT 3
84870: NEG
84871: PUSH
84872: EMPTY
84873: LIST
84874: LIST
84875: PUSH
84876: LD_INT 1
84878: NEG
84879: PUSH
84880: LD_INT 4
84882: NEG
84883: PUSH
84884: EMPTY
84885: LIST
84886: LIST
84887: PUSH
84888: LD_INT 2
84890: PUSH
84891: LD_INT 2
84893: NEG
84894: PUSH
84895: EMPTY
84896: LIST
84897: LIST
84898: PUSH
84899: LD_INT 2
84901: NEG
84902: PUSH
84903: LD_INT 4
84905: NEG
84906: PUSH
84907: EMPTY
84908: LIST
84909: LIST
84910: PUSH
84911: LD_INT 4
84913: PUSH
84914: LD_INT 0
84916: PUSH
84917: EMPTY
84918: LIST
84919: LIST
84920: PUSH
84921: LD_INT 4
84923: PUSH
84924: LD_INT 1
84926: NEG
84927: PUSH
84928: EMPTY
84929: LIST
84930: LIST
84931: PUSH
84932: LD_INT 5
84934: PUSH
84935: LD_INT 0
84937: PUSH
84938: EMPTY
84939: LIST
84940: LIST
84941: PUSH
84942: LD_INT 5
84944: PUSH
84945: LD_INT 1
84947: PUSH
84948: EMPTY
84949: LIST
84950: LIST
84951: PUSH
84952: LD_INT 4
84954: PUSH
84955: LD_INT 1
84957: PUSH
84958: EMPTY
84959: LIST
84960: LIST
84961: PUSH
84962: LD_INT 3
84964: PUSH
84965: LD_INT 0
84967: PUSH
84968: EMPTY
84969: LIST
84970: LIST
84971: PUSH
84972: LD_INT 3
84974: PUSH
84975: LD_INT 1
84977: NEG
84978: PUSH
84979: EMPTY
84980: LIST
84981: LIST
84982: PUSH
84983: LD_INT 3
84985: PUSH
84986: LD_INT 2
84988: NEG
84989: PUSH
84990: EMPTY
84991: LIST
84992: LIST
84993: PUSH
84994: LD_INT 5
84996: PUSH
84997: LD_INT 2
84999: PUSH
85000: EMPTY
85001: LIST
85002: LIST
85003: PUSH
85004: EMPTY
85005: LIST
85006: LIST
85007: LIST
85008: LIST
85009: LIST
85010: LIST
85011: LIST
85012: LIST
85013: LIST
85014: LIST
85015: LIST
85016: LIST
85017: LIST
85018: LIST
85019: LIST
85020: LIST
85021: LIST
85022: LIST
85023: LIST
85024: LIST
85025: LIST
85026: LIST
85027: LIST
85028: LIST
85029: LIST
85030: LIST
85031: LIST
85032: LIST
85033: LIST
85034: LIST
85035: LIST
85036: LIST
85037: LIST
85038: LIST
85039: LIST
85040: LIST
85041: LIST
85042: LIST
85043: LIST
85044: LIST
85045: LIST
85046: LIST
85047: LIST
85048: LIST
85049: LIST
85050: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
85051: LD_ADDR_VAR 0 32
85055: PUSH
85056: LD_INT 4
85058: NEG
85059: PUSH
85060: LD_INT 0
85062: PUSH
85063: EMPTY
85064: LIST
85065: LIST
85066: PUSH
85067: LD_INT 4
85069: NEG
85070: PUSH
85071: LD_INT 1
85073: NEG
85074: PUSH
85075: EMPTY
85076: LIST
85077: LIST
85078: PUSH
85079: LD_INT 3
85081: NEG
85082: PUSH
85083: LD_INT 0
85085: PUSH
85086: EMPTY
85087: LIST
85088: LIST
85089: PUSH
85090: LD_INT 3
85092: NEG
85093: PUSH
85094: LD_INT 1
85096: PUSH
85097: EMPTY
85098: LIST
85099: LIST
85100: PUSH
85101: LD_INT 4
85103: NEG
85104: PUSH
85105: LD_INT 1
85107: PUSH
85108: EMPTY
85109: LIST
85110: LIST
85111: PUSH
85112: LD_INT 5
85114: NEG
85115: PUSH
85116: LD_INT 0
85118: PUSH
85119: EMPTY
85120: LIST
85121: LIST
85122: PUSH
85123: LD_INT 5
85125: NEG
85126: PUSH
85127: LD_INT 1
85129: NEG
85130: PUSH
85131: EMPTY
85132: LIST
85133: LIST
85134: PUSH
85135: LD_INT 5
85137: NEG
85138: PUSH
85139: LD_INT 2
85141: NEG
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: LD_INT 3
85149: NEG
85150: PUSH
85151: LD_INT 2
85153: PUSH
85154: EMPTY
85155: LIST
85156: LIST
85157: PUSH
85158: LD_INT 3
85160: NEG
85161: PUSH
85162: LD_INT 3
85164: NEG
85165: PUSH
85166: EMPTY
85167: LIST
85168: LIST
85169: PUSH
85170: LD_INT 3
85172: NEG
85173: PUSH
85174: LD_INT 4
85176: NEG
85177: PUSH
85178: EMPTY
85179: LIST
85180: LIST
85181: PUSH
85182: LD_INT 2
85184: NEG
85185: PUSH
85186: LD_INT 3
85188: NEG
85189: PUSH
85190: EMPTY
85191: LIST
85192: LIST
85193: PUSH
85194: LD_INT 2
85196: NEG
85197: PUSH
85198: LD_INT 2
85200: NEG
85201: PUSH
85202: EMPTY
85203: LIST
85204: LIST
85205: PUSH
85206: LD_INT 3
85208: NEG
85209: PUSH
85210: LD_INT 2
85212: NEG
85213: PUSH
85214: EMPTY
85215: LIST
85216: LIST
85217: PUSH
85218: LD_INT 4
85220: NEG
85221: PUSH
85222: LD_INT 3
85224: NEG
85225: PUSH
85226: EMPTY
85227: LIST
85228: LIST
85229: PUSH
85230: LD_INT 4
85232: NEG
85233: PUSH
85234: LD_INT 4
85236: NEG
85237: PUSH
85238: EMPTY
85239: LIST
85240: LIST
85241: PUSH
85242: LD_INT 2
85244: NEG
85245: PUSH
85246: LD_INT 4
85248: NEG
85249: PUSH
85250: EMPTY
85251: LIST
85252: LIST
85253: PUSH
85254: LD_INT 4
85256: NEG
85257: PUSH
85258: LD_INT 2
85260: NEG
85261: PUSH
85262: EMPTY
85263: LIST
85264: LIST
85265: PUSH
85266: LD_INT 0
85268: PUSH
85269: LD_INT 4
85271: NEG
85272: PUSH
85273: EMPTY
85274: LIST
85275: LIST
85276: PUSH
85277: LD_INT 0
85279: PUSH
85280: LD_INT 5
85282: NEG
85283: PUSH
85284: EMPTY
85285: LIST
85286: LIST
85287: PUSH
85288: LD_INT 1
85290: PUSH
85291: LD_INT 4
85293: NEG
85294: PUSH
85295: EMPTY
85296: LIST
85297: LIST
85298: PUSH
85299: LD_INT 1
85301: PUSH
85302: LD_INT 3
85304: NEG
85305: PUSH
85306: EMPTY
85307: LIST
85308: LIST
85309: PUSH
85310: LD_INT 0
85312: PUSH
85313: LD_INT 3
85315: NEG
85316: PUSH
85317: EMPTY
85318: LIST
85319: LIST
85320: PUSH
85321: LD_INT 1
85323: NEG
85324: PUSH
85325: LD_INT 4
85327: NEG
85328: PUSH
85329: EMPTY
85330: LIST
85331: LIST
85332: PUSH
85333: LD_INT 1
85335: NEG
85336: PUSH
85337: LD_INT 5
85339: NEG
85340: PUSH
85341: EMPTY
85342: LIST
85343: LIST
85344: PUSH
85345: LD_INT 2
85347: PUSH
85348: LD_INT 3
85350: NEG
85351: PUSH
85352: EMPTY
85353: LIST
85354: LIST
85355: PUSH
85356: LD_INT 2
85358: NEG
85359: PUSH
85360: LD_INT 5
85362: NEG
85363: PUSH
85364: EMPTY
85365: LIST
85366: LIST
85367: PUSH
85368: LD_INT 3
85370: PUSH
85371: LD_INT 0
85373: PUSH
85374: EMPTY
85375: LIST
85376: LIST
85377: PUSH
85378: LD_INT 3
85380: PUSH
85381: LD_INT 1
85383: NEG
85384: PUSH
85385: EMPTY
85386: LIST
85387: LIST
85388: PUSH
85389: LD_INT 4
85391: PUSH
85392: LD_INT 0
85394: PUSH
85395: EMPTY
85396: LIST
85397: LIST
85398: PUSH
85399: LD_INT 4
85401: PUSH
85402: LD_INT 1
85404: PUSH
85405: EMPTY
85406: LIST
85407: LIST
85408: PUSH
85409: LD_INT 3
85411: PUSH
85412: LD_INT 1
85414: PUSH
85415: EMPTY
85416: LIST
85417: LIST
85418: PUSH
85419: LD_INT 2
85421: PUSH
85422: LD_INT 0
85424: PUSH
85425: EMPTY
85426: LIST
85427: LIST
85428: PUSH
85429: LD_INT 2
85431: PUSH
85432: LD_INT 1
85434: NEG
85435: PUSH
85436: EMPTY
85437: LIST
85438: LIST
85439: PUSH
85440: LD_INT 2
85442: PUSH
85443: LD_INT 2
85445: NEG
85446: PUSH
85447: EMPTY
85448: LIST
85449: LIST
85450: PUSH
85451: LD_INT 4
85453: PUSH
85454: LD_INT 2
85456: PUSH
85457: EMPTY
85458: LIST
85459: LIST
85460: PUSH
85461: LD_INT 4
85463: PUSH
85464: LD_INT 4
85466: PUSH
85467: EMPTY
85468: LIST
85469: LIST
85470: PUSH
85471: LD_INT 4
85473: PUSH
85474: LD_INT 3
85476: PUSH
85477: EMPTY
85478: LIST
85479: LIST
85480: PUSH
85481: LD_INT 5
85483: PUSH
85484: LD_INT 4
85486: PUSH
85487: EMPTY
85488: LIST
85489: LIST
85490: PUSH
85491: LD_INT 5
85493: PUSH
85494: LD_INT 5
85496: PUSH
85497: EMPTY
85498: LIST
85499: LIST
85500: PUSH
85501: LD_INT 4
85503: PUSH
85504: LD_INT 5
85506: PUSH
85507: EMPTY
85508: LIST
85509: LIST
85510: PUSH
85511: LD_INT 3
85513: PUSH
85514: LD_INT 4
85516: PUSH
85517: EMPTY
85518: LIST
85519: LIST
85520: PUSH
85521: LD_INT 3
85523: PUSH
85524: LD_INT 3
85526: PUSH
85527: EMPTY
85528: LIST
85529: LIST
85530: PUSH
85531: LD_INT 5
85533: PUSH
85534: LD_INT 3
85536: PUSH
85537: EMPTY
85538: LIST
85539: LIST
85540: PUSH
85541: LD_INT 3
85543: PUSH
85544: LD_INT 5
85546: PUSH
85547: EMPTY
85548: LIST
85549: LIST
85550: PUSH
85551: EMPTY
85552: LIST
85553: LIST
85554: LIST
85555: LIST
85556: LIST
85557: LIST
85558: LIST
85559: LIST
85560: LIST
85561: LIST
85562: LIST
85563: LIST
85564: LIST
85565: LIST
85566: LIST
85567: LIST
85568: LIST
85569: LIST
85570: LIST
85571: LIST
85572: LIST
85573: LIST
85574: LIST
85575: LIST
85576: LIST
85577: LIST
85578: LIST
85579: LIST
85580: LIST
85581: LIST
85582: LIST
85583: LIST
85584: LIST
85585: LIST
85586: LIST
85587: LIST
85588: LIST
85589: LIST
85590: LIST
85591: LIST
85592: LIST
85593: LIST
85594: LIST
85595: LIST
85596: LIST
85597: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
85598: LD_ADDR_VAR 0 33
85602: PUSH
85603: LD_INT 4
85605: NEG
85606: PUSH
85607: LD_INT 4
85609: NEG
85610: PUSH
85611: EMPTY
85612: LIST
85613: LIST
85614: PUSH
85615: LD_INT 4
85617: NEG
85618: PUSH
85619: LD_INT 5
85621: NEG
85622: PUSH
85623: EMPTY
85624: LIST
85625: LIST
85626: PUSH
85627: LD_INT 3
85629: NEG
85630: PUSH
85631: LD_INT 4
85633: NEG
85634: PUSH
85635: EMPTY
85636: LIST
85637: LIST
85638: PUSH
85639: LD_INT 3
85641: NEG
85642: PUSH
85643: LD_INT 3
85645: NEG
85646: PUSH
85647: EMPTY
85648: LIST
85649: LIST
85650: PUSH
85651: LD_INT 4
85653: NEG
85654: PUSH
85655: LD_INT 3
85657: NEG
85658: PUSH
85659: EMPTY
85660: LIST
85661: LIST
85662: PUSH
85663: LD_INT 5
85665: NEG
85666: PUSH
85667: LD_INT 4
85669: NEG
85670: PUSH
85671: EMPTY
85672: LIST
85673: LIST
85674: PUSH
85675: LD_INT 5
85677: NEG
85678: PUSH
85679: LD_INT 5
85681: NEG
85682: PUSH
85683: EMPTY
85684: LIST
85685: LIST
85686: PUSH
85687: LD_INT 3
85689: NEG
85690: PUSH
85691: LD_INT 5
85693: NEG
85694: PUSH
85695: EMPTY
85696: LIST
85697: LIST
85698: PUSH
85699: LD_INT 5
85701: NEG
85702: PUSH
85703: LD_INT 3
85705: NEG
85706: PUSH
85707: EMPTY
85708: LIST
85709: LIST
85710: PUSH
85711: LD_INT 0
85713: PUSH
85714: LD_INT 3
85716: NEG
85717: PUSH
85718: EMPTY
85719: LIST
85720: LIST
85721: PUSH
85722: LD_INT 0
85724: PUSH
85725: LD_INT 4
85727: NEG
85728: PUSH
85729: EMPTY
85730: LIST
85731: LIST
85732: PUSH
85733: LD_INT 1
85735: PUSH
85736: LD_INT 3
85738: NEG
85739: PUSH
85740: EMPTY
85741: LIST
85742: LIST
85743: PUSH
85744: LD_INT 1
85746: PUSH
85747: LD_INT 2
85749: NEG
85750: PUSH
85751: EMPTY
85752: LIST
85753: LIST
85754: PUSH
85755: LD_INT 0
85757: PUSH
85758: LD_INT 2
85760: NEG
85761: PUSH
85762: EMPTY
85763: LIST
85764: LIST
85765: PUSH
85766: LD_INT 1
85768: NEG
85769: PUSH
85770: LD_INT 3
85772: NEG
85773: PUSH
85774: EMPTY
85775: LIST
85776: LIST
85777: PUSH
85778: LD_INT 1
85780: NEG
85781: PUSH
85782: LD_INT 4
85784: NEG
85785: PUSH
85786: EMPTY
85787: LIST
85788: LIST
85789: PUSH
85790: LD_INT 2
85792: PUSH
85793: LD_INT 2
85795: NEG
85796: PUSH
85797: EMPTY
85798: LIST
85799: LIST
85800: PUSH
85801: LD_INT 2
85803: NEG
85804: PUSH
85805: LD_INT 4
85807: NEG
85808: PUSH
85809: EMPTY
85810: LIST
85811: LIST
85812: PUSH
85813: LD_INT 4
85815: PUSH
85816: LD_INT 0
85818: PUSH
85819: EMPTY
85820: LIST
85821: LIST
85822: PUSH
85823: LD_INT 4
85825: PUSH
85826: LD_INT 1
85828: NEG
85829: PUSH
85830: EMPTY
85831: LIST
85832: LIST
85833: PUSH
85834: LD_INT 5
85836: PUSH
85837: LD_INT 0
85839: PUSH
85840: EMPTY
85841: LIST
85842: LIST
85843: PUSH
85844: LD_INT 5
85846: PUSH
85847: LD_INT 1
85849: PUSH
85850: EMPTY
85851: LIST
85852: LIST
85853: PUSH
85854: LD_INT 4
85856: PUSH
85857: LD_INT 1
85859: PUSH
85860: EMPTY
85861: LIST
85862: LIST
85863: PUSH
85864: LD_INT 3
85866: PUSH
85867: LD_INT 0
85869: PUSH
85870: EMPTY
85871: LIST
85872: LIST
85873: PUSH
85874: LD_INT 3
85876: PUSH
85877: LD_INT 1
85879: NEG
85880: PUSH
85881: EMPTY
85882: LIST
85883: LIST
85884: PUSH
85885: LD_INT 3
85887: PUSH
85888: LD_INT 2
85890: NEG
85891: PUSH
85892: EMPTY
85893: LIST
85894: LIST
85895: PUSH
85896: LD_INT 5
85898: PUSH
85899: LD_INT 2
85901: PUSH
85902: EMPTY
85903: LIST
85904: LIST
85905: PUSH
85906: LD_INT 3
85908: PUSH
85909: LD_INT 3
85911: PUSH
85912: EMPTY
85913: LIST
85914: LIST
85915: PUSH
85916: LD_INT 3
85918: PUSH
85919: LD_INT 2
85921: PUSH
85922: EMPTY
85923: LIST
85924: LIST
85925: PUSH
85926: LD_INT 4
85928: PUSH
85929: LD_INT 3
85931: PUSH
85932: EMPTY
85933: LIST
85934: LIST
85935: PUSH
85936: LD_INT 4
85938: PUSH
85939: LD_INT 4
85941: PUSH
85942: EMPTY
85943: LIST
85944: LIST
85945: PUSH
85946: LD_INT 3
85948: PUSH
85949: LD_INT 4
85951: PUSH
85952: EMPTY
85953: LIST
85954: LIST
85955: PUSH
85956: LD_INT 2
85958: PUSH
85959: LD_INT 3
85961: PUSH
85962: EMPTY
85963: LIST
85964: LIST
85965: PUSH
85966: LD_INT 2
85968: PUSH
85969: LD_INT 2
85971: PUSH
85972: EMPTY
85973: LIST
85974: LIST
85975: PUSH
85976: LD_INT 4
85978: PUSH
85979: LD_INT 2
85981: PUSH
85982: EMPTY
85983: LIST
85984: LIST
85985: PUSH
85986: LD_INT 2
85988: PUSH
85989: LD_INT 4
85991: PUSH
85992: EMPTY
85993: LIST
85994: LIST
85995: PUSH
85996: LD_INT 0
85998: PUSH
85999: LD_INT 4
86001: PUSH
86002: EMPTY
86003: LIST
86004: LIST
86005: PUSH
86006: LD_INT 0
86008: PUSH
86009: LD_INT 3
86011: PUSH
86012: EMPTY
86013: LIST
86014: LIST
86015: PUSH
86016: LD_INT 1
86018: PUSH
86019: LD_INT 4
86021: PUSH
86022: EMPTY
86023: LIST
86024: LIST
86025: PUSH
86026: LD_INT 1
86028: PUSH
86029: LD_INT 5
86031: PUSH
86032: EMPTY
86033: LIST
86034: LIST
86035: PUSH
86036: LD_INT 0
86038: PUSH
86039: LD_INT 5
86041: PUSH
86042: EMPTY
86043: LIST
86044: LIST
86045: PUSH
86046: LD_INT 1
86048: NEG
86049: PUSH
86050: LD_INT 4
86052: PUSH
86053: EMPTY
86054: LIST
86055: LIST
86056: PUSH
86057: LD_INT 1
86059: NEG
86060: PUSH
86061: LD_INT 3
86063: PUSH
86064: EMPTY
86065: LIST
86066: LIST
86067: PUSH
86068: LD_INT 2
86070: PUSH
86071: LD_INT 5
86073: PUSH
86074: EMPTY
86075: LIST
86076: LIST
86077: PUSH
86078: LD_INT 2
86080: NEG
86081: PUSH
86082: LD_INT 3
86084: PUSH
86085: EMPTY
86086: LIST
86087: LIST
86088: PUSH
86089: EMPTY
86090: LIST
86091: LIST
86092: LIST
86093: LIST
86094: LIST
86095: LIST
86096: LIST
86097: LIST
86098: LIST
86099: LIST
86100: LIST
86101: LIST
86102: LIST
86103: LIST
86104: LIST
86105: LIST
86106: LIST
86107: LIST
86108: LIST
86109: LIST
86110: LIST
86111: LIST
86112: LIST
86113: LIST
86114: LIST
86115: LIST
86116: LIST
86117: LIST
86118: LIST
86119: LIST
86120: LIST
86121: LIST
86122: LIST
86123: LIST
86124: LIST
86125: LIST
86126: LIST
86127: LIST
86128: LIST
86129: LIST
86130: LIST
86131: LIST
86132: LIST
86133: LIST
86134: LIST
86135: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
86136: LD_ADDR_VAR 0 34
86140: PUSH
86141: LD_INT 0
86143: PUSH
86144: LD_INT 4
86146: NEG
86147: PUSH
86148: EMPTY
86149: LIST
86150: LIST
86151: PUSH
86152: LD_INT 0
86154: PUSH
86155: LD_INT 5
86157: NEG
86158: PUSH
86159: EMPTY
86160: LIST
86161: LIST
86162: PUSH
86163: LD_INT 1
86165: PUSH
86166: LD_INT 4
86168: NEG
86169: PUSH
86170: EMPTY
86171: LIST
86172: LIST
86173: PUSH
86174: LD_INT 1
86176: PUSH
86177: LD_INT 3
86179: NEG
86180: PUSH
86181: EMPTY
86182: LIST
86183: LIST
86184: PUSH
86185: LD_INT 0
86187: PUSH
86188: LD_INT 3
86190: NEG
86191: PUSH
86192: EMPTY
86193: LIST
86194: LIST
86195: PUSH
86196: LD_INT 1
86198: NEG
86199: PUSH
86200: LD_INT 4
86202: NEG
86203: PUSH
86204: EMPTY
86205: LIST
86206: LIST
86207: PUSH
86208: LD_INT 1
86210: NEG
86211: PUSH
86212: LD_INT 5
86214: NEG
86215: PUSH
86216: EMPTY
86217: LIST
86218: LIST
86219: PUSH
86220: LD_INT 2
86222: PUSH
86223: LD_INT 3
86225: NEG
86226: PUSH
86227: EMPTY
86228: LIST
86229: LIST
86230: PUSH
86231: LD_INT 2
86233: NEG
86234: PUSH
86235: LD_INT 5
86237: NEG
86238: PUSH
86239: EMPTY
86240: LIST
86241: LIST
86242: PUSH
86243: LD_INT 3
86245: PUSH
86246: LD_INT 0
86248: PUSH
86249: EMPTY
86250: LIST
86251: LIST
86252: PUSH
86253: LD_INT 3
86255: PUSH
86256: LD_INT 1
86258: NEG
86259: PUSH
86260: EMPTY
86261: LIST
86262: LIST
86263: PUSH
86264: LD_INT 4
86266: PUSH
86267: LD_INT 0
86269: PUSH
86270: EMPTY
86271: LIST
86272: LIST
86273: PUSH
86274: LD_INT 4
86276: PUSH
86277: LD_INT 1
86279: PUSH
86280: EMPTY
86281: LIST
86282: LIST
86283: PUSH
86284: LD_INT 3
86286: PUSH
86287: LD_INT 1
86289: PUSH
86290: EMPTY
86291: LIST
86292: LIST
86293: PUSH
86294: LD_INT 2
86296: PUSH
86297: LD_INT 0
86299: PUSH
86300: EMPTY
86301: LIST
86302: LIST
86303: PUSH
86304: LD_INT 2
86306: PUSH
86307: LD_INT 1
86309: NEG
86310: PUSH
86311: EMPTY
86312: LIST
86313: LIST
86314: PUSH
86315: LD_INT 2
86317: PUSH
86318: LD_INT 2
86320: NEG
86321: PUSH
86322: EMPTY
86323: LIST
86324: LIST
86325: PUSH
86326: LD_INT 4
86328: PUSH
86329: LD_INT 2
86331: PUSH
86332: EMPTY
86333: LIST
86334: LIST
86335: PUSH
86336: LD_INT 4
86338: PUSH
86339: LD_INT 4
86341: PUSH
86342: EMPTY
86343: LIST
86344: LIST
86345: PUSH
86346: LD_INT 4
86348: PUSH
86349: LD_INT 3
86351: PUSH
86352: EMPTY
86353: LIST
86354: LIST
86355: PUSH
86356: LD_INT 5
86358: PUSH
86359: LD_INT 4
86361: PUSH
86362: EMPTY
86363: LIST
86364: LIST
86365: PUSH
86366: LD_INT 5
86368: PUSH
86369: LD_INT 5
86371: PUSH
86372: EMPTY
86373: LIST
86374: LIST
86375: PUSH
86376: LD_INT 4
86378: PUSH
86379: LD_INT 5
86381: PUSH
86382: EMPTY
86383: LIST
86384: LIST
86385: PUSH
86386: LD_INT 3
86388: PUSH
86389: LD_INT 4
86391: PUSH
86392: EMPTY
86393: LIST
86394: LIST
86395: PUSH
86396: LD_INT 3
86398: PUSH
86399: LD_INT 3
86401: PUSH
86402: EMPTY
86403: LIST
86404: LIST
86405: PUSH
86406: LD_INT 5
86408: PUSH
86409: LD_INT 3
86411: PUSH
86412: EMPTY
86413: LIST
86414: LIST
86415: PUSH
86416: LD_INT 3
86418: PUSH
86419: LD_INT 5
86421: PUSH
86422: EMPTY
86423: LIST
86424: LIST
86425: PUSH
86426: LD_INT 0
86428: PUSH
86429: LD_INT 3
86431: PUSH
86432: EMPTY
86433: LIST
86434: LIST
86435: PUSH
86436: LD_INT 0
86438: PUSH
86439: LD_INT 2
86441: PUSH
86442: EMPTY
86443: LIST
86444: LIST
86445: PUSH
86446: LD_INT 1
86448: PUSH
86449: LD_INT 3
86451: PUSH
86452: EMPTY
86453: LIST
86454: LIST
86455: PUSH
86456: LD_INT 1
86458: PUSH
86459: LD_INT 4
86461: PUSH
86462: EMPTY
86463: LIST
86464: LIST
86465: PUSH
86466: LD_INT 0
86468: PUSH
86469: LD_INT 4
86471: PUSH
86472: EMPTY
86473: LIST
86474: LIST
86475: PUSH
86476: LD_INT 1
86478: NEG
86479: PUSH
86480: LD_INT 3
86482: PUSH
86483: EMPTY
86484: LIST
86485: LIST
86486: PUSH
86487: LD_INT 1
86489: NEG
86490: PUSH
86491: LD_INT 2
86493: PUSH
86494: EMPTY
86495: LIST
86496: LIST
86497: PUSH
86498: LD_INT 2
86500: PUSH
86501: LD_INT 4
86503: PUSH
86504: EMPTY
86505: LIST
86506: LIST
86507: PUSH
86508: LD_INT 2
86510: NEG
86511: PUSH
86512: LD_INT 2
86514: PUSH
86515: EMPTY
86516: LIST
86517: LIST
86518: PUSH
86519: LD_INT 4
86521: NEG
86522: PUSH
86523: LD_INT 0
86525: PUSH
86526: EMPTY
86527: LIST
86528: LIST
86529: PUSH
86530: LD_INT 4
86532: NEG
86533: PUSH
86534: LD_INT 1
86536: NEG
86537: PUSH
86538: EMPTY
86539: LIST
86540: LIST
86541: PUSH
86542: LD_INT 3
86544: NEG
86545: PUSH
86546: LD_INT 0
86548: PUSH
86549: EMPTY
86550: LIST
86551: LIST
86552: PUSH
86553: LD_INT 3
86555: NEG
86556: PUSH
86557: LD_INT 1
86559: PUSH
86560: EMPTY
86561: LIST
86562: LIST
86563: PUSH
86564: LD_INT 4
86566: NEG
86567: PUSH
86568: LD_INT 1
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: PUSH
86575: LD_INT 5
86577: NEG
86578: PUSH
86579: LD_INT 0
86581: PUSH
86582: EMPTY
86583: LIST
86584: LIST
86585: PUSH
86586: LD_INT 5
86588: NEG
86589: PUSH
86590: LD_INT 1
86592: NEG
86593: PUSH
86594: EMPTY
86595: LIST
86596: LIST
86597: PUSH
86598: LD_INT 5
86600: NEG
86601: PUSH
86602: LD_INT 2
86604: NEG
86605: PUSH
86606: EMPTY
86607: LIST
86608: LIST
86609: PUSH
86610: LD_INT 3
86612: NEG
86613: PUSH
86614: LD_INT 2
86616: PUSH
86617: EMPTY
86618: LIST
86619: LIST
86620: PUSH
86621: EMPTY
86622: LIST
86623: LIST
86624: LIST
86625: LIST
86626: LIST
86627: LIST
86628: LIST
86629: LIST
86630: LIST
86631: LIST
86632: LIST
86633: LIST
86634: LIST
86635: LIST
86636: LIST
86637: LIST
86638: LIST
86639: LIST
86640: LIST
86641: LIST
86642: LIST
86643: LIST
86644: LIST
86645: LIST
86646: LIST
86647: LIST
86648: LIST
86649: LIST
86650: LIST
86651: LIST
86652: LIST
86653: LIST
86654: LIST
86655: LIST
86656: LIST
86657: LIST
86658: LIST
86659: LIST
86660: LIST
86661: LIST
86662: LIST
86663: LIST
86664: LIST
86665: LIST
86666: LIST
86667: ST_TO_ADDR
// end ; end ;
86668: GO 86671
86670: POP
// case btype of b_depot , b_warehouse :
86671: LD_VAR 0 1
86675: PUSH
86676: LD_INT 0
86678: DOUBLE
86679: EQUAL
86680: IFTRUE 86690
86682: LD_INT 1
86684: DOUBLE
86685: EQUAL
86686: IFTRUE 86690
86688: GO 86891
86690: POP
// case nation of nation_american :
86691: LD_VAR 0 5
86695: PUSH
86696: LD_INT 1
86698: DOUBLE
86699: EQUAL
86700: IFTRUE 86704
86702: GO 86760
86704: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
86705: LD_ADDR_VAR 0 9
86709: PUSH
86710: LD_VAR 0 11
86714: PUSH
86715: LD_VAR 0 12
86719: PUSH
86720: LD_VAR 0 13
86724: PUSH
86725: LD_VAR 0 14
86729: PUSH
86730: LD_VAR 0 15
86734: PUSH
86735: LD_VAR 0 16
86739: PUSH
86740: EMPTY
86741: LIST
86742: LIST
86743: LIST
86744: LIST
86745: LIST
86746: LIST
86747: PUSH
86748: LD_VAR 0 4
86752: PUSH
86753: LD_INT 1
86755: PLUS
86756: ARRAY
86757: ST_TO_ADDR
86758: GO 86889
86760: LD_INT 2
86762: DOUBLE
86763: EQUAL
86764: IFTRUE 86768
86766: GO 86824
86768: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
86769: LD_ADDR_VAR 0 9
86773: PUSH
86774: LD_VAR 0 17
86778: PUSH
86779: LD_VAR 0 18
86783: PUSH
86784: LD_VAR 0 19
86788: PUSH
86789: LD_VAR 0 20
86793: PUSH
86794: LD_VAR 0 21
86798: PUSH
86799: LD_VAR 0 22
86803: PUSH
86804: EMPTY
86805: LIST
86806: LIST
86807: LIST
86808: LIST
86809: LIST
86810: LIST
86811: PUSH
86812: LD_VAR 0 4
86816: PUSH
86817: LD_INT 1
86819: PLUS
86820: ARRAY
86821: ST_TO_ADDR
86822: GO 86889
86824: LD_INT 3
86826: DOUBLE
86827: EQUAL
86828: IFTRUE 86832
86830: GO 86888
86832: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
86833: LD_ADDR_VAR 0 9
86837: PUSH
86838: LD_VAR 0 23
86842: PUSH
86843: LD_VAR 0 24
86847: PUSH
86848: LD_VAR 0 25
86852: PUSH
86853: LD_VAR 0 26
86857: PUSH
86858: LD_VAR 0 27
86862: PUSH
86863: LD_VAR 0 28
86867: PUSH
86868: EMPTY
86869: LIST
86870: LIST
86871: LIST
86872: LIST
86873: LIST
86874: LIST
86875: PUSH
86876: LD_VAR 0 4
86880: PUSH
86881: LD_INT 1
86883: PLUS
86884: ARRAY
86885: ST_TO_ADDR
86886: GO 86889
86888: POP
86889: GO 87444
86891: LD_INT 2
86893: DOUBLE
86894: EQUAL
86895: IFTRUE 86905
86897: LD_INT 3
86899: DOUBLE
86900: EQUAL
86901: IFTRUE 86905
86903: GO 86961
86905: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
86906: LD_ADDR_VAR 0 9
86910: PUSH
86911: LD_VAR 0 29
86915: PUSH
86916: LD_VAR 0 30
86920: PUSH
86921: LD_VAR 0 31
86925: PUSH
86926: LD_VAR 0 32
86930: PUSH
86931: LD_VAR 0 33
86935: PUSH
86936: LD_VAR 0 34
86940: PUSH
86941: EMPTY
86942: LIST
86943: LIST
86944: LIST
86945: LIST
86946: LIST
86947: LIST
86948: PUSH
86949: LD_VAR 0 4
86953: PUSH
86954: LD_INT 1
86956: PLUS
86957: ARRAY
86958: ST_TO_ADDR
86959: GO 87444
86961: LD_INT 16
86963: DOUBLE
86964: EQUAL
86965: IFTRUE 87023
86967: LD_INT 17
86969: DOUBLE
86970: EQUAL
86971: IFTRUE 87023
86973: LD_INT 18
86975: DOUBLE
86976: EQUAL
86977: IFTRUE 87023
86979: LD_INT 19
86981: DOUBLE
86982: EQUAL
86983: IFTRUE 87023
86985: LD_INT 22
86987: DOUBLE
86988: EQUAL
86989: IFTRUE 87023
86991: LD_INT 20
86993: DOUBLE
86994: EQUAL
86995: IFTRUE 87023
86997: LD_INT 21
86999: DOUBLE
87000: EQUAL
87001: IFTRUE 87023
87003: LD_INT 23
87005: DOUBLE
87006: EQUAL
87007: IFTRUE 87023
87009: LD_INT 24
87011: DOUBLE
87012: EQUAL
87013: IFTRUE 87023
87015: LD_INT 25
87017: DOUBLE
87018: EQUAL
87019: IFTRUE 87023
87021: GO 87079
87023: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
87024: LD_ADDR_VAR 0 9
87028: PUSH
87029: LD_VAR 0 35
87033: PUSH
87034: LD_VAR 0 36
87038: PUSH
87039: LD_VAR 0 37
87043: PUSH
87044: LD_VAR 0 38
87048: PUSH
87049: LD_VAR 0 39
87053: PUSH
87054: LD_VAR 0 40
87058: PUSH
87059: EMPTY
87060: LIST
87061: LIST
87062: LIST
87063: LIST
87064: LIST
87065: LIST
87066: PUSH
87067: LD_VAR 0 4
87071: PUSH
87072: LD_INT 1
87074: PLUS
87075: ARRAY
87076: ST_TO_ADDR
87077: GO 87444
87079: LD_INT 6
87081: DOUBLE
87082: EQUAL
87083: IFTRUE 87135
87085: LD_INT 7
87087: DOUBLE
87088: EQUAL
87089: IFTRUE 87135
87091: LD_INT 8
87093: DOUBLE
87094: EQUAL
87095: IFTRUE 87135
87097: LD_INT 13
87099: DOUBLE
87100: EQUAL
87101: IFTRUE 87135
87103: LD_INT 12
87105: DOUBLE
87106: EQUAL
87107: IFTRUE 87135
87109: LD_INT 15
87111: DOUBLE
87112: EQUAL
87113: IFTRUE 87135
87115: LD_INT 11
87117: DOUBLE
87118: EQUAL
87119: IFTRUE 87135
87121: LD_INT 14
87123: DOUBLE
87124: EQUAL
87125: IFTRUE 87135
87127: LD_INT 10
87129: DOUBLE
87130: EQUAL
87131: IFTRUE 87135
87133: GO 87191
87135: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
87136: LD_ADDR_VAR 0 9
87140: PUSH
87141: LD_VAR 0 41
87145: PUSH
87146: LD_VAR 0 42
87150: PUSH
87151: LD_VAR 0 43
87155: PUSH
87156: LD_VAR 0 44
87160: PUSH
87161: LD_VAR 0 45
87165: PUSH
87166: LD_VAR 0 46
87170: PUSH
87171: EMPTY
87172: LIST
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: LIST
87178: PUSH
87179: LD_VAR 0 4
87183: PUSH
87184: LD_INT 1
87186: PLUS
87187: ARRAY
87188: ST_TO_ADDR
87189: GO 87444
87191: LD_INT 36
87193: DOUBLE
87194: EQUAL
87195: IFTRUE 87199
87197: GO 87255
87199: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87200: LD_ADDR_VAR 0 9
87204: PUSH
87205: LD_VAR 0 47
87209: PUSH
87210: LD_VAR 0 48
87214: PUSH
87215: LD_VAR 0 49
87219: PUSH
87220: LD_VAR 0 50
87224: PUSH
87225: LD_VAR 0 51
87229: PUSH
87230: LD_VAR 0 52
87234: PUSH
87235: EMPTY
87236: LIST
87237: LIST
87238: LIST
87239: LIST
87240: LIST
87241: LIST
87242: PUSH
87243: LD_VAR 0 4
87247: PUSH
87248: LD_INT 1
87250: PLUS
87251: ARRAY
87252: ST_TO_ADDR
87253: GO 87444
87255: LD_INT 4
87257: DOUBLE
87258: EQUAL
87259: IFTRUE 87281
87261: LD_INT 5
87263: DOUBLE
87264: EQUAL
87265: IFTRUE 87281
87267: LD_INT 34
87269: DOUBLE
87270: EQUAL
87271: IFTRUE 87281
87273: LD_INT 37
87275: DOUBLE
87276: EQUAL
87277: IFTRUE 87281
87279: GO 87337
87281: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87282: LD_ADDR_VAR 0 9
87286: PUSH
87287: LD_VAR 0 53
87291: PUSH
87292: LD_VAR 0 54
87296: PUSH
87297: LD_VAR 0 55
87301: PUSH
87302: LD_VAR 0 56
87306: PUSH
87307: LD_VAR 0 57
87311: PUSH
87312: LD_VAR 0 58
87316: PUSH
87317: EMPTY
87318: LIST
87319: LIST
87320: LIST
87321: LIST
87322: LIST
87323: LIST
87324: PUSH
87325: LD_VAR 0 4
87329: PUSH
87330: LD_INT 1
87332: PLUS
87333: ARRAY
87334: ST_TO_ADDR
87335: GO 87444
87337: LD_INT 31
87339: DOUBLE
87340: EQUAL
87341: IFTRUE 87387
87343: LD_INT 32
87345: DOUBLE
87346: EQUAL
87347: IFTRUE 87387
87349: LD_INT 33
87351: DOUBLE
87352: EQUAL
87353: IFTRUE 87387
87355: LD_INT 27
87357: DOUBLE
87358: EQUAL
87359: IFTRUE 87387
87361: LD_INT 26
87363: DOUBLE
87364: EQUAL
87365: IFTRUE 87387
87367: LD_INT 28
87369: DOUBLE
87370: EQUAL
87371: IFTRUE 87387
87373: LD_INT 29
87375: DOUBLE
87376: EQUAL
87377: IFTRUE 87387
87379: LD_INT 30
87381: DOUBLE
87382: EQUAL
87383: IFTRUE 87387
87385: GO 87443
87387: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87388: LD_ADDR_VAR 0 9
87392: PUSH
87393: LD_VAR 0 59
87397: PUSH
87398: LD_VAR 0 60
87402: PUSH
87403: LD_VAR 0 61
87407: PUSH
87408: LD_VAR 0 62
87412: PUSH
87413: LD_VAR 0 63
87417: PUSH
87418: LD_VAR 0 64
87422: PUSH
87423: EMPTY
87424: LIST
87425: LIST
87426: LIST
87427: LIST
87428: LIST
87429: LIST
87430: PUSH
87431: LD_VAR 0 4
87435: PUSH
87436: LD_INT 1
87438: PLUS
87439: ARRAY
87440: ST_TO_ADDR
87441: GO 87444
87443: POP
// temp_list2 = [ ] ;
87444: LD_ADDR_VAR 0 10
87448: PUSH
87449: EMPTY
87450: ST_TO_ADDR
// for i in temp_list do
87451: LD_ADDR_VAR 0 8
87455: PUSH
87456: LD_VAR 0 9
87460: PUSH
87461: FOR_IN
87462: IFFALSE 87514
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
87464: LD_ADDR_VAR 0 10
87468: PUSH
87469: LD_VAR 0 10
87473: PUSH
87474: LD_VAR 0 8
87478: PUSH
87479: LD_INT 1
87481: ARRAY
87482: PUSH
87483: LD_VAR 0 2
87487: PLUS
87488: PUSH
87489: LD_VAR 0 8
87493: PUSH
87494: LD_INT 2
87496: ARRAY
87497: PUSH
87498: LD_VAR 0 3
87502: PLUS
87503: PUSH
87504: EMPTY
87505: LIST
87506: LIST
87507: PUSH
87508: EMPTY
87509: LIST
87510: ADD
87511: ST_TO_ADDR
87512: GO 87461
87514: POP
87515: POP
// result = temp_list2 ;
87516: LD_ADDR_VAR 0 7
87520: PUSH
87521: LD_VAR 0 10
87525: ST_TO_ADDR
// end ;
87526: LD_VAR 0 7
87530: RET
// export function EnemyInRange ( unit , dist ) ; begin
87531: LD_INT 0
87533: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
87534: LD_ADDR_VAR 0 3
87538: PUSH
87539: LD_VAR 0 1
87543: PPUSH
87544: CALL_OW 255
87548: PPUSH
87549: LD_VAR 0 1
87553: PPUSH
87554: CALL_OW 250
87558: PPUSH
87559: LD_VAR 0 1
87563: PPUSH
87564: CALL_OW 251
87568: PPUSH
87569: LD_VAR 0 2
87573: PPUSH
87574: CALL 60904 0 4
87578: PUSH
87579: LD_INT 4
87581: ARRAY
87582: ST_TO_ADDR
// end ;
87583: LD_VAR 0 3
87587: RET
// export function PlayerSeeMe ( unit ) ; begin
87588: LD_INT 0
87590: PPUSH
// result := See ( your_side , unit ) ;
87591: LD_ADDR_VAR 0 2
87595: PUSH
87596: LD_OWVAR 2
87600: PPUSH
87601: LD_VAR 0 1
87605: PPUSH
87606: CALL_OW 292
87610: ST_TO_ADDR
// end ;
87611: LD_VAR 0 2
87615: RET
// export function ReverseDir ( unit ) ; begin
87616: LD_INT 0
87618: PPUSH
// if not unit then
87619: LD_VAR 0 1
87623: NOT
87624: IFFALSE 87628
// exit ;
87626: GO 87651
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
87628: LD_ADDR_VAR 0 2
87632: PUSH
87633: LD_VAR 0 1
87637: PPUSH
87638: CALL_OW 254
87642: PUSH
87643: LD_INT 3
87645: PLUS
87646: PUSH
87647: LD_INT 6
87649: MOD
87650: ST_TO_ADDR
// end ;
87651: LD_VAR 0 2
87655: RET
// export function ReverseArray ( array ) ; var i ; begin
87656: LD_INT 0
87658: PPUSH
87659: PPUSH
// if not array then
87660: LD_VAR 0 1
87664: NOT
87665: IFFALSE 87669
// exit ;
87667: GO 87724
// result := [ ] ;
87669: LD_ADDR_VAR 0 2
87673: PUSH
87674: EMPTY
87675: ST_TO_ADDR
// for i := array downto 1 do
87676: LD_ADDR_VAR 0 3
87680: PUSH
87681: DOUBLE
87682: LD_VAR 0 1
87686: INC
87687: ST_TO_ADDR
87688: LD_INT 1
87690: PUSH
87691: FOR_DOWNTO
87692: IFFALSE 87722
// result := Join ( result , array [ i ] ) ;
87694: LD_ADDR_VAR 0 2
87698: PUSH
87699: LD_VAR 0 2
87703: PPUSH
87704: LD_VAR 0 1
87708: PUSH
87709: LD_VAR 0 3
87713: ARRAY
87714: PPUSH
87715: CALL 92380 0 2
87719: ST_TO_ADDR
87720: GO 87691
87722: POP
87723: POP
// end ;
87724: LD_VAR 0 2
87728: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
87729: LD_INT 0
87731: PPUSH
87732: PPUSH
87733: PPUSH
87734: PPUSH
87735: PPUSH
87736: PPUSH
// if not unit or not hexes then
87737: LD_VAR 0 1
87741: NOT
87742: PUSH
87743: LD_VAR 0 2
87747: NOT
87748: OR
87749: IFFALSE 87753
// exit ;
87751: GO 87876
// dist := 9999 ;
87753: LD_ADDR_VAR 0 5
87757: PUSH
87758: LD_INT 9999
87760: ST_TO_ADDR
// for i = 1 to hexes do
87761: LD_ADDR_VAR 0 4
87765: PUSH
87766: DOUBLE
87767: LD_INT 1
87769: DEC
87770: ST_TO_ADDR
87771: LD_VAR 0 2
87775: PUSH
87776: FOR_TO
87777: IFFALSE 87864
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
87779: LD_ADDR_VAR 0 6
87783: PUSH
87784: LD_VAR 0 1
87788: PPUSH
87789: LD_VAR 0 2
87793: PUSH
87794: LD_VAR 0 4
87798: ARRAY
87799: PUSH
87800: LD_INT 1
87802: ARRAY
87803: PPUSH
87804: LD_VAR 0 2
87808: PUSH
87809: LD_VAR 0 4
87813: ARRAY
87814: PUSH
87815: LD_INT 2
87817: ARRAY
87818: PPUSH
87819: CALL_OW 297
87823: ST_TO_ADDR
// if tdist < dist then
87824: LD_VAR 0 6
87828: PUSH
87829: LD_VAR 0 5
87833: LESS
87834: IFFALSE 87862
// begin hex := hexes [ i ] ;
87836: LD_ADDR_VAR 0 8
87840: PUSH
87841: LD_VAR 0 2
87845: PUSH
87846: LD_VAR 0 4
87850: ARRAY
87851: ST_TO_ADDR
// dist := tdist ;
87852: LD_ADDR_VAR 0 5
87856: PUSH
87857: LD_VAR 0 6
87861: ST_TO_ADDR
// end ; end ;
87862: GO 87776
87864: POP
87865: POP
// result := hex ;
87866: LD_ADDR_VAR 0 3
87870: PUSH
87871: LD_VAR 0 8
87875: ST_TO_ADDR
// end ;
87876: LD_VAR 0 3
87880: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
87881: LD_INT 0
87883: PPUSH
87884: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87885: LD_VAR 0 1
87889: NOT
87890: PUSH
87891: LD_VAR 0 1
87895: PUSH
87896: LD_INT 21
87898: PUSH
87899: LD_INT 2
87901: PUSH
87902: EMPTY
87903: LIST
87904: LIST
87905: PUSH
87906: LD_INT 23
87908: PUSH
87909: LD_INT 2
87911: PUSH
87912: EMPTY
87913: LIST
87914: LIST
87915: PUSH
87916: EMPTY
87917: LIST
87918: LIST
87919: PPUSH
87920: CALL_OW 69
87924: IN
87925: NOT
87926: OR
87927: IFFALSE 87931
// exit ;
87929: GO 87978
// for i = 1 to 3 do
87931: LD_ADDR_VAR 0 3
87935: PUSH
87936: DOUBLE
87937: LD_INT 1
87939: DEC
87940: ST_TO_ADDR
87941: LD_INT 3
87943: PUSH
87944: FOR_TO
87945: IFFALSE 87976
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
87947: LD_VAR 0 1
87951: PPUSH
87952: CALL_OW 250
87956: PPUSH
87957: LD_VAR 0 1
87961: PPUSH
87962: CALL_OW 251
87966: PPUSH
87967: LD_INT 1
87969: PPUSH
87970: CALL_OW 453
87974: GO 87944
87976: POP
87977: POP
// end ;
87978: LD_VAR 0 2
87982: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
87983: LD_INT 0
87985: PPUSH
87986: PPUSH
87987: PPUSH
87988: PPUSH
87989: PPUSH
87990: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
87991: LD_VAR 0 1
87995: NOT
87996: PUSH
87997: LD_VAR 0 2
88001: NOT
88002: OR
88003: PUSH
88004: LD_VAR 0 1
88008: PPUSH
88009: CALL_OW 314
88013: OR
88014: IFFALSE 88018
// exit ;
88016: GO 88485
// if GetLives ( i ) < 250 then
88018: LD_VAR 0 4
88022: PPUSH
88023: CALL_OW 256
88027: PUSH
88028: LD_INT 250
88030: LESS
88031: IFFALSE 88044
// begin ComAutodestruct ( i ) ;
88033: LD_VAR 0 4
88037: PPUSH
88038: CALL 87881 0 1
// exit ;
88042: GO 88485
// end ; x := GetX ( enemy_unit ) ;
88044: LD_ADDR_VAR 0 7
88048: PUSH
88049: LD_VAR 0 2
88053: PPUSH
88054: CALL_OW 250
88058: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
88059: LD_ADDR_VAR 0 8
88063: PUSH
88064: LD_VAR 0 2
88068: PPUSH
88069: CALL_OW 251
88073: ST_TO_ADDR
// if not x or not y then
88074: LD_VAR 0 7
88078: NOT
88079: PUSH
88080: LD_VAR 0 8
88084: NOT
88085: OR
88086: IFFALSE 88090
// exit ;
88088: GO 88485
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
88090: LD_ADDR_VAR 0 6
88094: PUSH
88095: LD_VAR 0 7
88099: PPUSH
88100: LD_INT 0
88102: PPUSH
88103: LD_INT 4
88105: PPUSH
88106: CALL_OW 272
88110: PUSH
88111: LD_VAR 0 8
88115: PPUSH
88116: LD_INT 0
88118: PPUSH
88119: LD_INT 4
88121: PPUSH
88122: CALL_OW 273
88126: PUSH
88127: EMPTY
88128: LIST
88129: LIST
88130: PUSH
88131: LD_VAR 0 7
88135: PPUSH
88136: LD_INT 1
88138: PPUSH
88139: LD_INT 4
88141: PPUSH
88142: CALL_OW 272
88146: PUSH
88147: LD_VAR 0 8
88151: PPUSH
88152: LD_INT 1
88154: PPUSH
88155: LD_INT 4
88157: PPUSH
88158: CALL_OW 273
88162: PUSH
88163: EMPTY
88164: LIST
88165: LIST
88166: PUSH
88167: LD_VAR 0 7
88171: PPUSH
88172: LD_INT 2
88174: PPUSH
88175: LD_INT 4
88177: PPUSH
88178: CALL_OW 272
88182: PUSH
88183: LD_VAR 0 8
88187: PPUSH
88188: LD_INT 2
88190: PPUSH
88191: LD_INT 4
88193: PPUSH
88194: CALL_OW 273
88198: PUSH
88199: EMPTY
88200: LIST
88201: LIST
88202: PUSH
88203: LD_VAR 0 7
88207: PPUSH
88208: LD_INT 3
88210: PPUSH
88211: LD_INT 4
88213: PPUSH
88214: CALL_OW 272
88218: PUSH
88219: LD_VAR 0 8
88223: PPUSH
88224: LD_INT 3
88226: PPUSH
88227: LD_INT 4
88229: PPUSH
88230: CALL_OW 273
88234: PUSH
88235: EMPTY
88236: LIST
88237: LIST
88238: PUSH
88239: LD_VAR 0 7
88243: PPUSH
88244: LD_INT 4
88246: PPUSH
88247: LD_INT 4
88249: PPUSH
88250: CALL_OW 272
88254: PUSH
88255: LD_VAR 0 8
88259: PPUSH
88260: LD_INT 4
88262: PPUSH
88263: LD_INT 4
88265: PPUSH
88266: CALL_OW 273
88270: PUSH
88271: EMPTY
88272: LIST
88273: LIST
88274: PUSH
88275: LD_VAR 0 7
88279: PPUSH
88280: LD_INT 5
88282: PPUSH
88283: LD_INT 4
88285: PPUSH
88286: CALL_OW 272
88290: PUSH
88291: LD_VAR 0 8
88295: PPUSH
88296: LD_INT 5
88298: PPUSH
88299: LD_INT 4
88301: PPUSH
88302: CALL_OW 273
88306: PUSH
88307: EMPTY
88308: LIST
88309: LIST
88310: PUSH
88311: EMPTY
88312: LIST
88313: LIST
88314: LIST
88315: LIST
88316: LIST
88317: LIST
88318: ST_TO_ADDR
// for i = tmp downto 1 do
88319: LD_ADDR_VAR 0 4
88323: PUSH
88324: DOUBLE
88325: LD_VAR 0 6
88329: INC
88330: ST_TO_ADDR
88331: LD_INT 1
88333: PUSH
88334: FOR_DOWNTO
88335: IFFALSE 88436
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88337: LD_VAR 0 6
88341: PUSH
88342: LD_VAR 0 4
88346: ARRAY
88347: PUSH
88348: LD_INT 1
88350: ARRAY
88351: PPUSH
88352: LD_VAR 0 6
88356: PUSH
88357: LD_VAR 0 4
88361: ARRAY
88362: PUSH
88363: LD_INT 2
88365: ARRAY
88366: PPUSH
88367: CALL_OW 488
88371: NOT
88372: PUSH
88373: LD_VAR 0 6
88377: PUSH
88378: LD_VAR 0 4
88382: ARRAY
88383: PUSH
88384: LD_INT 1
88386: ARRAY
88387: PPUSH
88388: LD_VAR 0 6
88392: PUSH
88393: LD_VAR 0 4
88397: ARRAY
88398: PUSH
88399: LD_INT 2
88401: ARRAY
88402: PPUSH
88403: CALL_OW 428
88407: PUSH
88408: LD_INT 0
88410: NONEQUAL
88411: OR
88412: IFFALSE 88434
// tmp := Delete ( tmp , i ) ;
88414: LD_ADDR_VAR 0 6
88418: PUSH
88419: LD_VAR 0 6
88423: PPUSH
88424: LD_VAR 0 4
88428: PPUSH
88429: CALL_OW 3
88433: ST_TO_ADDR
88434: GO 88334
88436: POP
88437: POP
// j := GetClosestHex ( unit , tmp ) ;
88438: LD_ADDR_VAR 0 5
88442: PUSH
88443: LD_VAR 0 1
88447: PPUSH
88448: LD_VAR 0 6
88452: PPUSH
88453: CALL 87729 0 2
88457: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88458: LD_VAR 0 1
88462: PPUSH
88463: LD_VAR 0 5
88467: PUSH
88468: LD_INT 1
88470: ARRAY
88471: PPUSH
88472: LD_VAR 0 5
88476: PUSH
88477: LD_INT 2
88479: ARRAY
88480: PPUSH
88481: CALL_OW 111
// end ;
88485: LD_VAR 0 3
88489: RET
// export function PrepareApemanSoldier ( ) ; begin
88490: LD_INT 0
88492: PPUSH
// uc_nation := 0 ;
88493: LD_ADDR_OWVAR 21
88497: PUSH
88498: LD_INT 0
88500: ST_TO_ADDR
// hc_sex := sex_male ;
88501: LD_ADDR_OWVAR 27
88505: PUSH
88506: LD_INT 1
88508: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
88509: LD_ADDR_OWVAR 28
88513: PUSH
88514: LD_INT 15
88516: ST_TO_ADDR
// hc_gallery :=  ;
88517: LD_ADDR_OWVAR 33
88521: PUSH
88522: LD_STRING 
88524: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88525: LD_ADDR_OWVAR 31
88529: PUSH
88530: LD_INT 0
88532: PPUSH
88533: LD_INT 3
88535: PPUSH
88536: CALL_OW 12
88540: PUSH
88541: LD_INT 0
88543: PPUSH
88544: LD_INT 3
88546: PPUSH
88547: CALL_OW 12
88551: PUSH
88552: LD_INT 0
88554: PUSH
88555: LD_INT 0
88557: PUSH
88558: EMPTY
88559: LIST
88560: LIST
88561: LIST
88562: LIST
88563: ST_TO_ADDR
// end ;
88564: LD_VAR 0 1
88568: RET
// export function PrepareApemanEngineer ( ) ; begin
88569: LD_INT 0
88571: PPUSH
// uc_nation := 0 ;
88572: LD_ADDR_OWVAR 21
88576: PUSH
88577: LD_INT 0
88579: ST_TO_ADDR
// hc_sex := sex_male ;
88580: LD_ADDR_OWVAR 27
88584: PUSH
88585: LD_INT 1
88587: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
88588: LD_ADDR_OWVAR 28
88592: PUSH
88593: LD_INT 16
88595: ST_TO_ADDR
// hc_gallery :=  ;
88596: LD_ADDR_OWVAR 33
88600: PUSH
88601: LD_STRING 
88603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88604: LD_ADDR_OWVAR 31
88608: PUSH
88609: LD_INT 0
88611: PPUSH
88612: LD_INT 3
88614: PPUSH
88615: CALL_OW 12
88619: PUSH
88620: LD_INT 0
88622: PPUSH
88623: LD_INT 3
88625: PPUSH
88626: CALL_OW 12
88630: PUSH
88631: LD_INT 0
88633: PUSH
88634: LD_INT 0
88636: PUSH
88637: EMPTY
88638: LIST
88639: LIST
88640: LIST
88641: LIST
88642: ST_TO_ADDR
// end ;
88643: LD_VAR 0 1
88647: RET
// export function PrepareApeman ( agressivity ) ; begin
88648: LD_INT 0
88650: PPUSH
// uc_side := 0 ;
88651: LD_ADDR_OWVAR 20
88655: PUSH
88656: LD_INT 0
88658: ST_TO_ADDR
// uc_nation := 0 ;
88659: LD_ADDR_OWVAR 21
88663: PUSH
88664: LD_INT 0
88666: ST_TO_ADDR
// hc_sex := sex_male ;
88667: LD_ADDR_OWVAR 27
88671: PUSH
88672: LD_INT 1
88674: ST_TO_ADDR
// hc_class := class_apeman ;
88675: LD_ADDR_OWVAR 28
88679: PUSH
88680: LD_INT 12
88682: ST_TO_ADDR
// hc_gallery :=  ;
88683: LD_ADDR_OWVAR 33
88687: PUSH
88688: LD_STRING 
88690: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88691: LD_ADDR_OWVAR 35
88695: PUSH
88696: LD_VAR 0 1
88700: NEG
88701: PPUSH
88702: LD_VAR 0 1
88706: PPUSH
88707: CALL_OW 12
88711: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88712: LD_ADDR_OWVAR 31
88716: PUSH
88717: LD_INT 0
88719: PPUSH
88720: LD_INT 3
88722: PPUSH
88723: CALL_OW 12
88727: PUSH
88728: LD_INT 0
88730: PPUSH
88731: LD_INT 3
88733: PPUSH
88734: CALL_OW 12
88738: PUSH
88739: LD_INT 0
88741: PUSH
88742: LD_INT 0
88744: PUSH
88745: EMPTY
88746: LIST
88747: LIST
88748: LIST
88749: LIST
88750: ST_TO_ADDR
// end ;
88751: LD_VAR 0 2
88755: RET
// export function PrepareTiger ( agressivity ) ; begin
88756: LD_INT 0
88758: PPUSH
// uc_side := 0 ;
88759: LD_ADDR_OWVAR 20
88763: PUSH
88764: LD_INT 0
88766: ST_TO_ADDR
// uc_nation := 0 ;
88767: LD_ADDR_OWVAR 21
88771: PUSH
88772: LD_INT 0
88774: ST_TO_ADDR
// hc_class := class_tiger ;
88775: LD_ADDR_OWVAR 28
88779: PUSH
88780: LD_INT 14
88782: ST_TO_ADDR
// hc_gallery :=  ;
88783: LD_ADDR_OWVAR 33
88787: PUSH
88788: LD_STRING 
88790: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88791: LD_ADDR_OWVAR 35
88795: PUSH
88796: LD_VAR 0 1
88800: NEG
88801: PPUSH
88802: LD_VAR 0 1
88806: PPUSH
88807: CALL_OW 12
88811: ST_TO_ADDR
// end ;
88812: LD_VAR 0 2
88816: RET
// export function PrepareEnchidna ( ) ; begin
88817: LD_INT 0
88819: PPUSH
// uc_side := 0 ;
88820: LD_ADDR_OWVAR 20
88824: PUSH
88825: LD_INT 0
88827: ST_TO_ADDR
// uc_nation := 0 ;
88828: LD_ADDR_OWVAR 21
88832: PUSH
88833: LD_INT 0
88835: ST_TO_ADDR
// hc_class := class_baggie ;
88836: LD_ADDR_OWVAR 28
88840: PUSH
88841: LD_INT 13
88843: ST_TO_ADDR
// hc_gallery :=  ;
88844: LD_ADDR_OWVAR 33
88848: PUSH
88849: LD_STRING 
88851: ST_TO_ADDR
// end ;
88852: LD_VAR 0 1
88856: RET
// export function PrepareFrog ( ) ; begin
88857: LD_INT 0
88859: PPUSH
// uc_side := 0 ;
88860: LD_ADDR_OWVAR 20
88864: PUSH
88865: LD_INT 0
88867: ST_TO_ADDR
// uc_nation := 0 ;
88868: LD_ADDR_OWVAR 21
88872: PUSH
88873: LD_INT 0
88875: ST_TO_ADDR
// hc_class := class_frog ;
88876: LD_ADDR_OWVAR 28
88880: PUSH
88881: LD_INT 19
88883: ST_TO_ADDR
// hc_gallery :=  ;
88884: LD_ADDR_OWVAR 33
88888: PUSH
88889: LD_STRING 
88891: ST_TO_ADDR
// end ;
88892: LD_VAR 0 1
88896: RET
// export function PrepareFish ( ) ; begin
88897: LD_INT 0
88899: PPUSH
// uc_side := 0 ;
88900: LD_ADDR_OWVAR 20
88904: PUSH
88905: LD_INT 0
88907: ST_TO_ADDR
// uc_nation := 0 ;
88908: LD_ADDR_OWVAR 21
88912: PUSH
88913: LD_INT 0
88915: ST_TO_ADDR
// hc_class := class_fish ;
88916: LD_ADDR_OWVAR 28
88920: PUSH
88921: LD_INT 20
88923: ST_TO_ADDR
// hc_gallery :=  ;
88924: LD_ADDR_OWVAR 33
88928: PUSH
88929: LD_STRING 
88931: ST_TO_ADDR
// end ;
88932: LD_VAR 0 1
88936: RET
// export function PrepareBird ( ) ; begin
88937: LD_INT 0
88939: PPUSH
// uc_side := 0 ;
88940: LD_ADDR_OWVAR 20
88944: PUSH
88945: LD_INT 0
88947: ST_TO_ADDR
// uc_nation := 0 ;
88948: LD_ADDR_OWVAR 21
88952: PUSH
88953: LD_INT 0
88955: ST_TO_ADDR
// hc_class := class_phororhacos ;
88956: LD_ADDR_OWVAR 28
88960: PUSH
88961: LD_INT 18
88963: ST_TO_ADDR
// hc_gallery :=  ;
88964: LD_ADDR_OWVAR 33
88968: PUSH
88969: LD_STRING 
88971: ST_TO_ADDR
// end ;
88972: LD_VAR 0 1
88976: RET
// export function PrepareHorse ( ) ; begin
88977: LD_INT 0
88979: PPUSH
// uc_side := 0 ;
88980: LD_ADDR_OWVAR 20
88984: PUSH
88985: LD_INT 0
88987: ST_TO_ADDR
// uc_nation := 0 ;
88988: LD_ADDR_OWVAR 21
88992: PUSH
88993: LD_INT 0
88995: ST_TO_ADDR
// hc_class := class_horse ;
88996: LD_ADDR_OWVAR 28
89000: PUSH
89001: LD_INT 21
89003: ST_TO_ADDR
// hc_gallery :=  ;
89004: LD_ADDR_OWVAR 33
89008: PUSH
89009: LD_STRING 
89011: ST_TO_ADDR
// end ;
89012: LD_VAR 0 1
89016: RET
// export function PrepareMastodont ( ) ; begin
89017: LD_INT 0
89019: PPUSH
// uc_side := 0 ;
89020: LD_ADDR_OWVAR 20
89024: PUSH
89025: LD_INT 0
89027: ST_TO_ADDR
// uc_nation := 0 ;
89028: LD_ADDR_OWVAR 21
89032: PUSH
89033: LD_INT 0
89035: ST_TO_ADDR
// vc_chassis := class_mastodont ;
89036: LD_ADDR_OWVAR 37
89040: PUSH
89041: LD_INT 31
89043: ST_TO_ADDR
// vc_control := control_rider ;
89044: LD_ADDR_OWVAR 38
89048: PUSH
89049: LD_INT 4
89051: ST_TO_ADDR
// end ;
89052: LD_VAR 0 1
89056: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
89057: LD_INT 0
89059: PPUSH
89060: PPUSH
89061: PPUSH
// uc_side = 0 ;
89062: LD_ADDR_OWVAR 20
89066: PUSH
89067: LD_INT 0
89069: ST_TO_ADDR
// uc_nation = 0 ;
89070: LD_ADDR_OWVAR 21
89074: PUSH
89075: LD_INT 0
89077: ST_TO_ADDR
// InitHc_All ( ) ;
89078: CALL_OW 584
// InitVc ;
89082: CALL_OW 20
// if mastodonts then
89086: LD_VAR 0 6
89090: IFFALSE 89157
// for i = 1 to mastodonts do
89092: LD_ADDR_VAR 0 11
89096: PUSH
89097: DOUBLE
89098: LD_INT 1
89100: DEC
89101: ST_TO_ADDR
89102: LD_VAR 0 6
89106: PUSH
89107: FOR_TO
89108: IFFALSE 89155
// begin vc_chassis := 31 ;
89110: LD_ADDR_OWVAR 37
89114: PUSH
89115: LD_INT 31
89117: ST_TO_ADDR
// vc_control := control_rider ;
89118: LD_ADDR_OWVAR 38
89122: PUSH
89123: LD_INT 4
89125: ST_TO_ADDR
// animal := CreateVehicle ;
89126: LD_ADDR_VAR 0 12
89130: PUSH
89131: CALL_OW 45
89135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89136: LD_VAR 0 12
89140: PPUSH
89141: LD_VAR 0 8
89145: PPUSH
89146: LD_INT 0
89148: PPUSH
89149: CALL 91285 0 3
// end ;
89153: GO 89107
89155: POP
89156: POP
// if horses then
89157: LD_VAR 0 5
89161: IFFALSE 89228
// for i = 1 to horses do
89163: LD_ADDR_VAR 0 11
89167: PUSH
89168: DOUBLE
89169: LD_INT 1
89171: DEC
89172: ST_TO_ADDR
89173: LD_VAR 0 5
89177: PUSH
89178: FOR_TO
89179: IFFALSE 89226
// begin hc_class := 21 ;
89181: LD_ADDR_OWVAR 28
89185: PUSH
89186: LD_INT 21
89188: ST_TO_ADDR
// hc_gallery :=  ;
89189: LD_ADDR_OWVAR 33
89193: PUSH
89194: LD_STRING 
89196: ST_TO_ADDR
// animal := CreateHuman ;
89197: LD_ADDR_VAR 0 12
89201: PUSH
89202: CALL_OW 44
89206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89207: LD_VAR 0 12
89211: PPUSH
89212: LD_VAR 0 8
89216: PPUSH
89217: LD_INT 0
89219: PPUSH
89220: CALL 91285 0 3
// end ;
89224: GO 89178
89226: POP
89227: POP
// if birds then
89228: LD_VAR 0 1
89232: IFFALSE 89299
// for i = 1 to birds do
89234: LD_ADDR_VAR 0 11
89238: PUSH
89239: DOUBLE
89240: LD_INT 1
89242: DEC
89243: ST_TO_ADDR
89244: LD_VAR 0 1
89248: PUSH
89249: FOR_TO
89250: IFFALSE 89297
// begin hc_class := 18 ;
89252: LD_ADDR_OWVAR 28
89256: PUSH
89257: LD_INT 18
89259: ST_TO_ADDR
// hc_gallery =  ;
89260: LD_ADDR_OWVAR 33
89264: PUSH
89265: LD_STRING 
89267: ST_TO_ADDR
// animal := CreateHuman ;
89268: LD_ADDR_VAR 0 12
89272: PUSH
89273: CALL_OW 44
89277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89278: LD_VAR 0 12
89282: PPUSH
89283: LD_VAR 0 8
89287: PPUSH
89288: LD_INT 0
89290: PPUSH
89291: CALL 91285 0 3
// end ;
89295: GO 89249
89297: POP
89298: POP
// if tigers then
89299: LD_VAR 0 2
89303: IFFALSE 89387
// for i = 1 to tigers do
89305: LD_ADDR_VAR 0 11
89309: PUSH
89310: DOUBLE
89311: LD_INT 1
89313: DEC
89314: ST_TO_ADDR
89315: LD_VAR 0 2
89319: PUSH
89320: FOR_TO
89321: IFFALSE 89385
// begin hc_class = class_tiger ;
89323: LD_ADDR_OWVAR 28
89327: PUSH
89328: LD_INT 14
89330: ST_TO_ADDR
// hc_gallery =  ;
89331: LD_ADDR_OWVAR 33
89335: PUSH
89336: LD_STRING 
89338: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89339: LD_ADDR_OWVAR 35
89343: PUSH
89344: LD_INT 7
89346: NEG
89347: PPUSH
89348: LD_INT 7
89350: PPUSH
89351: CALL_OW 12
89355: ST_TO_ADDR
// animal := CreateHuman ;
89356: LD_ADDR_VAR 0 12
89360: PUSH
89361: CALL_OW 44
89365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89366: LD_VAR 0 12
89370: PPUSH
89371: LD_VAR 0 8
89375: PPUSH
89376: LD_INT 0
89378: PPUSH
89379: CALL 91285 0 3
// end ;
89383: GO 89320
89385: POP
89386: POP
// if apemans then
89387: LD_VAR 0 3
89391: IFFALSE 89514
// for i = 1 to apemans do
89393: LD_ADDR_VAR 0 11
89397: PUSH
89398: DOUBLE
89399: LD_INT 1
89401: DEC
89402: ST_TO_ADDR
89403: LD_VAR 0 3
89407: PUSH
89408: FOR_TO
89409: IFFALSE 89512
// begin hc_class = class_apeman ;
89411: LD_ADDR_OWVAR 28
89415: PUSH
89416: LD_INT 12
89418: ST_TO_ADDR
// hc_gallery =  ;
89419: LD_ADDR_OWVAR 33
89423: PUSH
89424: LD_STRING 
89426: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89427: LD_ADDR_OWVAR 35
89431: PUSH
89432: LD_INT 2
89434: NEG
89435: PPUSH
89436: LD_INT 2
89438: PPUSH
89439: CALL_OW 12
89443: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89444: LD_ADDR_OWVAR 31
89448: PUSH
89449: LD_INT 1
89451: PPUSH
89452: LD_INT 3
89454: PPUSH
89455: CALL_OW 12
89459: PUSH
89460: LD_INT 1
89462: PPUSH
89463: LD_INT 3
89465: PPUSH
89466: CALL_OW 12
89470: PUSH
89471: LD_INT 0
89473: PUSH
89474: LD_INT 0
89476: PUSH
89477: EMPTY
89478: LIST
89479: LIST
89480: LIST
89481: LIST
89482: ST_TO_ADDR
// animal := CreateHuman ;
89483: LD_ADDR_VAR 0 12
89487: PUSH
89488: CALL_OW 44
89492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89493: LD_VAR 0 12
89497: PPUSH
89498: LD_VAR 0 8
89502: PPUSH
89503: LD_INT 0
89505: PPUSH
89506: CALL 91285 0 3
// end ;
89510: GO 89408
89512: POP
89513: POP
// if enchidnas then
89514: LD_VAR 0 4
89518: IFFALSE 89585
// for i = 1 to enchidnas do
89520: LD_ADDR_VAR 0 11
89524: PUSH
89525: DOUBLE
89526: LD_INT 1
89528: DEC
89529: ST_TO_ADDR
89530: LD_VAR 0 4
89534: PUSH
89535: FOR_TO
89536: IFFALSE 89583
// begin hc_class = 13 ;
89538: LD_ADDR_OWVAR 28
89542: PUSH
89543: LD_INT 13
89545: ST_TO_ADDR
// hc_gallery =  ;
89546: LD_ADDR_OWVAR 33
89550: PUSH
89551: LD_STRING 
89553: ST_TO_ADDR
// animal := CreateHuman ;
89554: LD_ADDR_VAR 0 12
89558: PUSH
89559: CALL_OW 44
89563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89564: LD_VAR 0 12
89568: PPUSH
89569: LD_VAR 0 8
89573: PPUSH
89574: LD_INT 0
89576: PPUSH
89577: CALL 91285 0 3
// end ;
89581: GO 89535
89583: POP
89584: POP
// if fishes then
89585: LD_VAR 0 7
89589: IFFALSE 89656
// for i = 1 to fishes do
89591: LD_ADDR_VAR 0 11
89595: PUSH
89596: DOUBLE
89597: LD_INT 1
89599: DEC
89600: ST_TO_ADDR
89601: LD_VAR 0 7
89605: PUSH
89606: FOR_TO
89607: IFFALSE 89654
// begin hc_class = 20 ;
89609: LD_ADDR_OWVAR 28
89613: PUSH
89614: LD_INT 20
89616: ST_TO_ADDR
// hc_gallery =  ;
89617: LD_ADDR_OWVAR 33
89621: PUSH
89622: LD_STRING 
89624: ST_TO_ADDR
// animal := CreateHuman ;
89625: LD_ADDR_VAR 0 12
89629: PUSH
89630: CALL_OW 44
89634: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
89635: LD_VAR 0 12
89639: PPUSH
89640: LD_VAR 0 9
89644: PPUSH
89645: LD_INT 0
89647: PPUSH
89648: CALL 91285 0 3
// end ;
89652: GO 89606
89654: POP
89655: POP
// end ;
89656: LD_VAR 0 10
89660: RET
// export function WantHeal ( sci , unit ) ; begin
89661: LD_INT 0
89663: PPUSH
// if GetTaskList ( sci ) > 0 then
89664: LD_VAR 0 1
89668: PPUSH
89669: CALL_OW 437
89673: PUSH
89674: LD_INT 0
89676: GREATER
89677: IFFALSE 89747
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
89679: LD_VAR 0 1
89683: PPUSH
89684: CALL_OW 437
89688: PUSH
89689: LD_INT 1
89691: ARRAY
89692: PUSH
89693: LD_INT 1
89695: ARRAY
89696: PUSH
89697: LD_STRING l
89699: EQUAL
89700: PUSH
89701: LD_VAR 0 1
89705: PPUSH
89706: CALL_OW 437
89710: PUSH
89711: LD_INT 1
89713: ARRAY
89714: PUSH
89715: LD_INT 4
89717: ARRAY
89718: PUSH
89719: LD_VAR 0 2
89723: EQUAL
89724: AND
89725: IFFALSE 89737
// result := true else
89727: LD_ADDR_VAR 0 3
89731: PUSH
89732: LD_INT 1
89734: ST_TO_ADDR
89735: GO 89745
// result := false ;
89737: LD_ADDR_VAR 0 3
89741: PUSH
89742: LD_INT 0
89744: ST_TO_ADDR
// end else
89745: GO 89755
// result := false ;
89747: LD_ADDR_VAR 0 3
89751: PUSH
89752: LD_INT 0
89754: ST_TO_ADDR
// end ;
89755: LD_VAR 0 3
89759: RET
// export function HealTarget ( sci ) ; begin
89760: LD_INT 0
89762: PPUSH
// if not sci then
89763: LD_VAR 0 1
89767: NOT
89768: IFFALSE 89772
// exit ;
89770: GO 89837
// result := 0 ;
89772: LD_ADDR_VAR 0 2
89776: PUSH
89777: LD_INT 0
89779: ST_TO_ADDR
// if GetTaskList ( sci ) then
89780: LD_VAR 0 1
89784: PPUSH
89785: CALL_OW 437
89789: IFFALSE 89837
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
89791: LD_VAR 0 1
89795: PPUSH
89796: CALL_OW 437
89800: PUSH
89801: LD_INT 1
89803: ARRAY
89804: PUSH
89805: LD_INT 1
89807: ARRAY
89808: PUSH
89809: LD_STRING l
89811: EQUAL
89812: IFFALSE 89837
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
89814: LD_ADDR_VAR 0 2
89818: PUSH
89819: LD_VAR 0 1
89823: PPUSH
89824: CALL_OW 437
89828: PUSH
89829: LD_INT 1
89831: ARRAY
89832: PUSH
89833: LD_INT 4
89835: ARRAY
89836: ST_TO_ADDR
// end ;
89837: LD_VAR 0 2
89841: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
89842: LD_INT 0
89844: PPUSH
89845: PPUSH
89846: PPUSH
89847: PPUSH
// if not base_units then
89848: LD_VAR 0 1
89852: NOT
89853: IFFALSE 89857
// exit ;
89855: GO 89944
// result := false ;
89857: LD_ADDR_VAR 0 2
89861: PUSH
89862: LD_INT 0
89864: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
89865: LD_ADDR_VAR 0 5
89869: PUSH
89870: LD_VAR 0 1
89874: PPUSH
89875: LD_INT 21
89877: PUSH
89878: LD_INT 3
89880: PUSH
89881: EMPTY
89882: LIST
89883: LIST
89884: PPUSH
89885: CALL_OW 72
89889: ST_TO_ADDR
// if not tmp then
89890: LD_VAR 0 5
89894: NOT
89895: IFFALSE 89899
// exit ;
89897: GO 89944
// for i in tmp do
89899: LD_ADDR_VAR 0 3
89903: PUSH
89904: LD_VAR 0 5
89908: PUSH
89909: FOR_IN
89910: IFFALSE 89942
// begin result := EnemyInRange ( i , 22 ) ;
89912: LD_ADDR_VAR 0 2
89916: PUSH
89917: LD_VAR 0 3
89921: PPUSH
89922: LD_INT 22
89924: PPUSH
89925: CALL 87531 0 2
89929: ST_TO_ADDR
// if result then
89930: LD_VAR 0 2
89934: IFFALSE 89940
// exit ;
89936: POP
89937: POP
89938: GO 89944
// end ;
89940: GO 89909
89942: POP
89943: POP
// end ;
89944: LD_VAR 0 2
89948: RET
// export function FilterByTag ( units , tag ) ; begin
89949: LD_INT 0
89951: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
89952: LD_ADDR_VAR 0 3
89956: PUSH
89957: LD_VAR 0 1
89961: PPUSH
89962: LD_INT 120
89964: PUSH
89965: LD_VAR 0 2
89969: PUSH
89970: EMPTY
89971: LIST
89972: LIST
89973: PPUSH
89974: CALL_OW 72
89978: ST_TO_ADDR
// end ;
89979: LD_VAR 0 3
89983: RET
// export function IsDriver ( un ) ; begin
89984: LD_INT 0
89986: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
89987: LD_ADDR_VAR 0 2
89991: PUSH
89992: LD_VAR 0 1
89996: PUSH
89997: LD_INT 55
89999: PUSH
90000: EMPTY
90001: LIST
90002: PPUSH
90003: CALL_OW 69
90007: IN
90008: ST_TO_ADDR
// end ;
90009: LD_VAR 0 2
90013: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
90014: LD_INT 0
90016: PPUSH
90017: PPUSH
// list := [ ] ;
90018: LD_ADDR_VAR 0 5
90022: PUSH
90023: EMPTY
90024: ST_TO_ADDR
// case d of 0 :
90025: LD_VAR 0 3
90029: PUSH
90030: LD_INT 0
90032: DOUBLE
90033: EQUAL
90034: IFTRUE 90038
90036: GO 90171
90038: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
90039: LD_ADDR_VAR 0 5
90043: PUSH
90044: LD_VAR 0 1
90048: PUSH
90049: LD_INT 4
90051: MINUS
90052: PUSH
90053: LD_VAR 0 2
90057: PUSH
90058: LD_INT 4
90060: MINUS
90061: PUSH
90062: LD_INT 2
90064: PUSH
90065: EMPTY
90066: LIST
90067: LIST
90068: LIST
90069: PUSH
90070: LD_VAR 0 1
90074: PUSH
90075: LD_INT 3
90077: MINUS
90078: PUSH
90079: LD_VAR 0 2
90083: PUSH
90084: LD_INT 1
90086: PUSH
90087: EMPTY
90088: LIST
90089: LIST
90090: LIST
90091: PUSH
90092: LD_VAR 0 1
90096: PUSH
90097: LD_INT 4
90099: PLUS
90100: PUSH
90101: LD_VAR 0 2
90105: PUSH
90106: LD_INT 4
90108: PUSH
90109: EMPTY
90110: LIST
90111: LIST
90112: LIST
90113: PUSH
90114: LD_VAR 0 1
90118: PUSH
90119: LD_INT 3
90121: PLUS
90122: PUSH
90123: LD_VAR 0 2
90127: PUSH
90128: LD_INT 3
90130: PLUS
90131: PUSH
90132: LD_INT 5
90134: PUSH
90135: EMPTY
90136: LIST
90137: LIST
90138: LIST
90139: PUSH
90140: LD_VAR 0 1
90144: PUSH
90145: LD_VAR 0 2
90149: PUSH
90150: LD_INT 4
90152: PLUS
90153: PUSH
90154: LD_INT 0
90156: PUSH
90157: EMPTY
90158: LIST
90159: LIST
90160: LIST
90161: PUSH
90162: EMPTY
90163: LIST
90164: LIST
90165: LIST
90166: LIST
90167: LIST
90168: ST_TO_ADDR
// end ; 1 :
90169: GO 90869
90171: LD_INT 1
90173: DOUBLE
90174: EQUAL
90175: IFTRUE 90179
90177: GO 90312
90179: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90180: LD_ADDR_VAR 0 5
90184: PUSH
90185: LD_VAR 0 1
90189: PUSH
90190: LD_VAR 0 2
90194: PUSH
90195: LD_INT 4
90197: MINUS
90198: PUSH
90199: LD_INT 3
90201: PUSH
90202: EMPTY
90203: LIST
90204: LIST
90205: LIST
90206: PUSH
90207: LD_VAR 0 1
90211: PUSH
90212: LD_INT 3
90214: MINUS
90215: PUSH
90216: LD_VAR 0 2
90220: PUSH
90221: LD_INT 3
90223: MINUS
90224: PUSH
90225: LD_INT 2
90227: PUSH
90228: EMPTY
90229: LIST
90230: LIST
90231: LIST
90232: PUSH
90233: LD_VAR 0 1
90237: PUSH
90238: LD_INT 4
90240: MINUS
90241: PUSH
90242: LD_VAR 0 2
90246: PUSH
90247: LD_INT 1
90249: PUSH
90250: EMPTY
90251: LIST
90252: LIST
90253: LIST
90254: PUSH
90255: LD_VAR 0 1
90259: PUSH
90260: LD_VAR 0 2
90264: PUSH
90265: LD_INT 3
90267: PLUS
90268: PUSH
90269: LD_INT 0
90271: PUSH
90272: EMPTY
90273: LIST
90274: LIST
90275: LIST
90276: PUSH
90277: LD_VAR 0 1
90281: PUSH
90282: LD_INT 4
90284: PLUS
90285: PUSH
90286: LD_VAR 0 2
90290: PUSH
90291: LD_INT 4
90293: PLUS
90294: PUSH
90295: LD_INT 5
90297: PUSH
90298: EMPTY
90299: LIST
90300: LIST
90301: LIST
90302: PUSH
90303: EMPTY
90304: LIST
90305: LIST
90306: LIST
90307: LIST
90308: LIST
90309: ST_TO_ADDR
// end ; 2 :
90310: GO 90869
90312: LD_INT 2
90314: DOUBLE
90315: EQUAL
90316: IFTRUE 90320
90318: GO 90449
90320: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90321: LD_ADDR_VAR 0 5
90325: PUSH
90326: LD_VAR 0 1
90330: PUSH
90331: LD_VAR 0 2
90335: PUSH
90336: LD_INT 3
90338: MINUS
90339: PUSH
90340: LD_INT 3
90342: PUSH
90343: EMPTY
90344: LIST
90345: LIST
90346: LIST
90347: PUSH
90348: LD_VAR 0 1
90352: PUSH
90353: LD_INT 4
90355: PLUS
90356: PUSH
90357: LD_VAR 0 2
90361: PUSH
90362: LD_INT 4
90364: PUSH
90365: EMPTY
90366: LIST
90367: LIST
90368: LIST
90369: PUSH
90370: LD_VAR 0 1
90374: PUSH
90375: LD_VAR 0 2
90379: PUSH
90380: LD_INT 4
90382: PLUS
90383: PUSH
90384: LD_INT 0
90386: PUSH
90387: EMPTY
90388: LIST
90389: LIST
90390: LIST
90391: PUSH
90392: LD_VAR 0 1
90396: PUSH
90397: LD_INT 3
90399: MINUS
90400: PUSH
90401: LD_VAR 0 2
90405: PUSH
90406: LD_INT 1
90408: PUSH
90409: EMPTY
90410: LIST
90411: LIST
90412: LIST
90413: PUSH
90414: LD_VAR 0 1
90418: PUSH
90419: LD_INT 4
90421: MINUS
90422: PUSH
90423: LD_VAR 0 2
90427: PUSH
90428: LD_INT 4
90430: MINUS
90431: PUSH
90432: LD_INT 2
90434: PUSH
90435: EMPTY
90436: LIST
90437: LIST
90438: LIST
90439: PUSH
90440: EMPTY
90441: LIST
90442: LIST
90443: LIST
90444: LIST
90445: LIST
90446: ST_TO_ADDR
// end ; 3 :
90447: GO 90869
90449: LD_INT 3
90451: DOUBLE
90452: EQUAL
90453: IFTRUE 90457
90455: GO 90590
90457: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
90458: LD_ADDR_VAR 0 5
90462: PUSH
90463: LD_VAR 0 1
90467: PUSH
90468: LD_INT 3
90470: PLUS
90471: PUSH
90472: LD_VAR 0 2
90476: PUSH
90477: LD_INT 4
90479: PUSH
90480: EMPTY
90481: LIST
90482: LIST
90483: LIST
90484: PUSH
90485: LD_VAR 0 1
90489: PUSH
90490: LD_INT 4
90492: PLUS
90493: PUSH
90494: LD_VAR 0 2
90498: PUSH
90499: LD_INT 4
90501: PLUS
90502: PUSH
90503: LD_INT 5
90505: PUSH
90506: EMPTY
90507: LIST
90508: LIST
90509: LIST
90510: PUSH
90511: LD_VAR 0 1
90515: PUSH
90516: LD_INT 4
90518: MINUS
90519: PUSH
90520: LD_VAR 0 2
90524: PUSH
90525: LD_INT 1
90527: PUSH
90528: EMPTY
90529: LIST
90530: LIST
90531: LIST
90532: PUSH
90533: LD_VAR 0 1
90537: PUSH
90538: LD_VAR 0 2
90542: PUSH
90543: LD_INT 4
90545: MINUS
90546: PUSH
90547: LD_INT 3
90549: PUSH
90550: EMPTY
90551: LIST
90552: LIST
90553: LIST
90554: PUSH
90555: LD_VAR 0 1
90559: PUSH
90560: LD_INT 3
90562: MINUS
90563: PUSH
90564: LD_VAR 0 2
90568: PUSH
90569: LD_INT 3
90571: MINUS
90572: PUSH
90573: LD_INT 2
90575: PUSH
90576: EMPTY
90577: LIST
90578: LIST
90579: LIST
90580: PUSH
90581: EMPTY
90582: LIST
90583: LIST
90584: LIST
90585: LIST
90586: LIST
90587: ST_TO_ADDR
// end ; 4 :
90588: GO 90869
90590: LD_INT 4
90592: DOUBLE
90593: EQUAL
90594: IFTRUE 90598
90596: GO 90731
90598: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
90599: LD_ADDR_VAR 0 5
90603: PUSH
90604: LD_VAR 0 1
90608: PUSH
90609: LD_VAR 0 2
90613: PUSH
90614: LD_INT 4
90616: PLUS
90617: PUSH
90618: LD_INT 0
90620: PUSH
90621: EMPTY
90622: LIST
90623: LIST
90624: LIST
90625: PUSH
90626: LD_VAR 0 1
90630: PUSH
90631: LD_INT 3
90633: PLUS
90634: PUSH
90635: LD_VAR 0 2
90639: PUSH
90640: LD_INT 3
90642: PLUS
90643: PUSH
90644: LD_INT 5
90646: PUSH
90647: EMPTY
90648: LIST
90649: LIST
90650: LIST
90651: PUSH
90652: LD_VAR 0 1
90656: PUSH
90657: LD_INT 4
90659: PLUS
90660: PUSH
90661: LD_VAR 0 2
90665: PUSH
90666: LD_INT 4
90668: PUSH
90669: EMPTY
90670: LIST
90671: LIST
90672: LIST
90673: PUSH
90674: LD_VAR 0 1
90678: PUSH
90679: LD_VAR 0 2
90683: PUSH
90684: LD_INT 3
90686: MINUS
90687: PUSH
90688: LD_INT 3
90690: PUSH
90691: EMPTY
90692: LIST
90693: LIST
90694: LIST
90695: PUSH
90696: LD_VAR 0 1
90700: PUSH
90701: LD_INT 4
90703: MINUS
90704: PUSH
90705: LD_VAR 0 2
90709: PUSH
90710: LD_INT 4
90712: MINUS
90713: PUSH
90714: LD_INT 2
90716: PUSH
90717: EMPTY
90718: LIST
90719: LIST
90720: LIST
90721: PUSH
90722: EMPTY
90723: LIST
90724: LIST
90725: LIST
90726: LIST
90727: LIST
90728: ST_TO_ADDR
// end ; 5 :
90729: GO 90869
90731: LD_INT 5
90733: DOUBLE
90734: EQUAL
90735: IFTRUE 90739
90737: GO 90868
90739: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
90740: LD_ADDR_VAR 0 5
90744: PUSH
90745: LD_VAR 0 1
90749: PUSH
90750: LD_INT 4
90752: MINUS
90753: PUSH
90754: LD_VAR 0 2
90758: PUSH
90759: LD_INT 1
90761: PUSH
90762: EMPTY
90763: LIST
90764: LIST
90765: LIST
90766: PUSH
90767: LD_VAR 0 1
90771: PUSH
90772: LD_VAR 0 2
90776: PUSH
90777: LD_INT 4
90779: MINUS
90780: PUSH
90781: LD_INT 3
90783: PUSH
90784: EMPTY
90785: LIST
90786: LIST
90787: LIST
90788: PUSH
90789: LD_VAR 0 1
90793: PUSH
90794: LD_INT 4
90796: PLUS
90797: PUSH
90798: LD_VAR 0 2
90802: PUSH
90803: LD_INT 4
90805: PLUS
90806: PUSH
90807: LD_INT 5
90809: PUSH
90810: EMPTY
90811: LIST
90812: LIST
90813: LIST
90814: PUSH
90815: LD_VAR 0 1
90819: PUSH
90820: LD_INT 3
90822: PLUS
90823: PUSH
90824: LD_VAR 0 2
90828: PUSH
90829: LD_INT 4
90831: PUSH
90832: EMPTY
90833: LIST
90834: LIST
90835: LIST
90836: PUSH
90837: LD_VAR 0 1
90841: PUSH
90842: LD_VAR 0 2
90846: PUSH
90847: LD_INT 3
90849: PLUS
90850: PUSH
90851: LD_INT 0
90853: PUSH
90854: EMPTY
90855: LIST
90856: LIST
90857: LIST
90858: PUSH
90859: EMPTY
90860: LIST
90861: LIST
90862: LIST
90863: LIST
90864: LIST
90865: ST_TO_ADDR
// end ; end ;
90866: GO 90869
90868: POP
// result := list ;
90869: LD_ADDR_VAR 0 4
90873: PUSH
90874: LD_VAR 0 5
90878: ST_TO_ADDR
// end ;
90879: LD_VAR 0 4
90883: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
90884: LD_INT 0
90886: PPUSH
90887: PPUSH
90888: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
90889: LD_VAR 0 1
90893: NOT
90894: PUSH
90895: LD_VAR 0 2
90899: PUSH
90900: LD_INT 1
90902: PUSH
90903: LD_INT 2
90905: PUSH
90906: LD_INT 3
90908: PUSH
90909: LD_INT 4
90911: PUSH
90912: EMPTY
90913: LIST
90914: LIST
90915: LIST
90916: LIST
90917: IN
90918: NOT
90919: OR
90920: IFFALSE 90924
// exit ;
90922: GO 91007
// tmp := [ ] ;
90924: LD_ADDR_VAR 0 5
90928: PUSH
90929: EMPTY
90930: ST_TO_ADDR
// for i in units do
90931: LD_ADDR_VAR 0 4
90935: PUSH
90936: LD_VAR 0 1
90940: PUSH
90941: FOR_IN
90942: IFFALSE 90976
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
90944: LD_ADDR_VAR 0 5
90948: PUSH
90949: LD_VAR 0 5
90953: PPUSH
90954: LD_VAR 0 4
90958: PPUSH
90959: LD_VAR 0 2
90963: PPUSH
90964: CALL_OW 259
90968: PPUSH
90969: CALL 92380 0 2
90973: ST_TO_ADDR
90974: GO 90941
90976: POP
90977: POP
// if not tmp then
90978: LD_VAR 0 5
90982: NOT
90983: IFFALSE 90987
// exit ;
90985: GO 91007
// result := SortListByListDesc ( units , tmp ) ;
90987: LD_ADDR_VAR 0 3
90991: PUSH
90992: LD_VAR 0 1
90996: PPUSH
90997: LD_VAR 0 5
91001: PPUSH
91002: CALL_OW 77
91006: ST_TO_ADDR
// end ;
91007: LD_VAR 0 3
91011: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
91012: LD_INT 0
91014: PPUSH
91015: PPUSH
91016: PPUSH
// result := false ;
91017: LD_ADDR_VAR 0 3
91021: PUSH
91022: LD_INT 0
91024: ST_TO_ADDR
// if not building then
91025: LD_VAR 0 2
91029: NOT
91030: IFFALSE 91034
// exit ;
91032: GO 91172
// x := GetX ( building ) ;
91034: LD_ADDR_VAR 0 4
91038: PUSH
91039: LD_VAR 0 2
91043: PPUSH
91044: CALL_OW 250
91048: ST_TO_ADDR
// y := GetY ( building ) ;
91049: LD_ADDR_VAR 0 5
91053: PUSH
91054: LD_VAR 0 2
91058: PPUSH
91059: CALL_OW 251
91063: ST_TO_ADDR
// if not x or not y then
91064: LD_VAR 0 4
91068: NOT
91069: PUSH
91070: LD_VAR 0 5
91074: NOT
91075: OR
91076: IFFALSE 91080
// exit ;
91078: GO 91172
// if GetTaskList ( unit ) then
91080: LD_VAR 0 1
91084: PPUSH
91085: CALL_OW 437
91089: IFFALSE 91172
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91091: LD_STRING e
91093: PUSH
91094: LD_VAR 0 1
91098: PPUSH
91099: CALL_OW 437
91103: PUSH
91104: LD_INT 1
91106: ARRAY
91107: PUSH
91108: LD_INT 1
91110: ARRAY
91111: EQUAL
91112: PUSH
91113: LD_VAR 0 4
91117: PUSH
91118: LD_VAR 0 1
91122: PPUSH
91123: CALL_OW 437
91127: PUSH
91128: LD_INT 1
91130: ARRAY
91131: PUSH
91132: LD_INT 2
91134: ARRAY
91135: EQUAL
91136: AND
91137: PUSH
91138: LD_VAR 0 5
91142: PUSH
91143: LD_VAR 0 1
91147: PPUSH
91148: CALL_OW 437
91152: PUSH
91153: LD_INT 1
91155: ARRAY
91156: PUSH
91157: LD_INT 3
91159: ARRAY
91160: EQUAL
91161: AND
91162: IFFALSE 91172
// result := true end ;
91164: LD_ADDR_VAR 0 3
91168: PUSH
91169: LD_INT 1
91171: ST_TO_ADDR
// end ;
91172: LD_VAR 0 3
91176: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91177: LD_INT 0
91179: PPUSH
// result := false ;
91180: LD_ADDR_VAR 0 4
91184: PUSH
91185: LD_INT 0
91187: ST_TO_ADDR
// if GetTaskList ( unit ) then
91188: LD_VAR 0 1
91192: PPUSH
91193: CALL_OW 437
91197: IFFALSE 91280
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91199: LD_STRING M
91201: PUSH
91202: LD_VAR 0 1
91206: PPUSH
91207: CALL_OW 437
91211: PUSH
91212: LD_INT 1
91214: ARRAY
91215: PUSH
91216: LD_INT 1
91218: ARRAY
91219: EQUAL
91220: PUSH
91221: LD_VAR 0 2
91225: PUSH
91226: LD_VAR 0 1
91230: PPUSH
91231: CALL_OW 437
91235: PUSH
91236: LD_INT 1
91238: ARRAY
91239: PUSH
91240: LD_INT 2
91242: ARRAY
91243: EQUAL
91244: AND
91245: PUSH
91246: LD_VAR 0 3
91250: PUSH
91251: LD_VAR 0 1
91255: PPUSH
91256: CALL_OW 437
91260: PUSH
91261: LD_INT 1
91263: ARRAY
91264: PUSH
91265: LD_INT 3
91267: ARRAY
91268: EQUAL
91269: AND
91270: IFFALSE 91280
// result := true ;
91272: LD_ADDR_VAR 0 4
91276: PUSH
91277: LD_INT 1
91279: ST_TO_ADDR
// end ; end ;
91280: LD_VAR 0 4
91284: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91285: LD_INT 0
91287: PPUSH
91288: PPUSH
91289: PPUSH
91290: PPUSH
// if not unit or not area then
91291: LD_VAR 0 1
91295: NOT
91296: PUSH
91297: LD_VAR 0 2
91301: NOT
91302: OR
91303: IFFALSE 91307
// exit ;
91305: GO 91483
// tmp := AreaToList ( area , i ) ;
91307: LD_ADDR_VAR 0 6
91311: PUSH
91312: LD_VAR 0 2
91316: PPUSH
91317: LD_VAR 0 5
91321: PPUSH
91322: CALL_OW 517
91326: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91327: LD_ADDR_VAR 0 5
91331: PUSH
91332: DOUBLE
91333: LD_INT 1
91335: DEC
91336: ST_TO_ADDR
91337: LD_VAR 0 6
91341: PUSH
91342: LD_INT 1
91344: ARRAY
91345: PUSH
91346: FOR_TO
91347: IFFALSE 91481
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91349: LD_ADDR_VAR 0 7
91353: PUSH
91354: LD_VAR 0 6
91358: PUSH
91359: LD_INT 1
91361: ARRAY
91362: PUSH
91363: LD_VAR 0 5
91367: ARRAY
91368: PUSH
91369: LD_VAR 0 6
91373: PUSH
91374: LD_INT 2
91376: ARRAY
91377: PUSH
91378: LD_VAR 0 5
91382: ARRAY
91383: PUSH
91384: EMPTY
91385: LIST
91386: LIST
91387: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91388: LD_INT 92
91390: PUSH
91391: LD_VAR 0 7
91395: PUSH
91396: LD_INT 1
91398: ARRAY
91399: PUSH
91400: LD_VAR 0 7
91404: PUSH
91405: LD_INT 2
91407: ARRAY
91408: PUSH
91409: LD_INT 2
91411: PUSH
91412: EMPTY
91413: LIST
91414: LIST
91415: LIST
91416: LIST
91417: PPUSH
91418: CALL_OW 69
91422: PUSH
91423: LD_INT 0
91425: EQUAL
91426: IFFALSE 91479
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91428: LD_VAR 0 1
91432: PPUSH
91433: LD_VAR 0 7
91437: PUSH
91438: LD_INT 1
91440: ARRAY
91441: PPUSH
91442: LD_VAR 0 7
91446: PUSH
91447: LD_INT 2
91449: ARRAY
91450: PPUSH
91451: LD_VAR 0 3
91455: PPUSH
91456: CALL_OW 48
// result := IsPlaced ( unit ) ;
91460: LD_ADDR_VAR 0 4
91464: PUSH
91465: LD_VAR 0 1
91469: PPUSH
91470: CALL_OW 305
91474: ST_TO_ADDR
// exit ;
91475: POP
91476: POP
91477: GO 91483
// end ; end ;
91479: GO 91346
91481: POP
91482: POP
// end ;
91483: LD_VAR 0 4
91487: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
91488: LD_INT 0
91490: PPUSH
91491: PPUSH
91492: PPUSH
// if not side or side > 8 then
91493: LD_VAR 0 1
91497: NOT
91498: PUSH
91499: LD_VAR 0 1
91503: PUSH
91504: LD_INT 8
91506: GREATER
91507: OR
91508: IFFALSE 91512
// exit ;
91510: GO 91699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
91512: LD_ADDR_VAR 0 4
91516: PUSH
91517: LD_INT 22
91519: PUSH
91520: LD_VAR 0 1
91524: PUSH
91525: EMPTY
91526: LIST
91527: LIST
91528: PUSH
91529: LD_INT 21
91531: PUSH
91532: LD_INT 3
91534: PUSH
91535: EMPTY
91536: LIST
91537: LIST
91538: PUSH
91539: EMPTY
91540: LIST
91541: LIST
91542: PPUSH
91543: CALL_OW 69
91547: ST_TO_ADDR
// if not tmp then
91548: LD_VAR 0 4
91552: NOT
91553: IFFALSE 91557
// exit ;
91555: GO 91699
// enable_addtolog := true ;
91557: LD_ADDR_OWVAR 81
91561: PUSH
91562: LD_INT 1
91564: ST_TO_ADDR
// AddToLog ( [ ) ;
91565: LD_STRING [
91567: PPUSH
91568: CALL_OW 561
// for i in tmp do
91572: LD_ADDR_VAR 0 3
91576: PUSH
91577: LD_VAR 0 4
91581: PUSH
91582: FOR_IN
91583: IFFALSE 91690
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
91585: LD_STRING [
91587: PUSH
91588: LD_VAR 0 3
91592: PPUSH
91593: CALL_OW 266
91597: STR
91598: PUSH
91599: LD_STRING , 
91601: STR
91602: PUSH
91603: LD_VAR 0 3
91607: PPUSH
91608: CALL_OW 250
91612: STR
91613: PUSH
91614: LD_STRING , 
91616: STR
91617: PUSH
91618: LD_VAR 0 3
91622: PPUSH
91623: CALL_OW 251
91627: STR
91628: PUSH
91629: LD_STRING , 
91631: STR
91632: PUSH
91633: LD_VAR 0 3
91637: PPUSH
91638: CALL_OW 254
91642: STR
91643: PUSH
91644: LD_STRING , 
91646: STR
91647: PUSH
91648: LD_VAR 0 3
91652: PPUSH
91653: LD_INT 1
91655: PPUSH
91656: CALL_OW 268
91660: STR
91661: PUSH
91662: LD_STRING , 
91664: STR
91665: PUSH
91666: LD_VAR 0 3
91670: PPUSH
91671: LD_INT 2
91673: PPUSH
91674: CALL_OW 268
91678: STR
91679: PUSH
91680: LD_STRING ],
91682: STR
91683: PPUSH
91684: CALL_OW 561
// end ;
91688: GO 91582
91690: POP
91691: POP
// AddToLog ( ]; ) ;
91692: LD_STRING ];
91694: PPUSH
91695: CALL_OW 561
// end ;
91699: LD_VAR 0 2
91703: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
91704: LD_INT 0
91706: PPUSH
91707: PPUSH
91708: PPUSH
91709: PPUSH
91710: PPUSH
// if not area or not rate or not max then
91711: LD_VAR 0 1
91715: NOT
91716: PUSH
91717: LD_VAR 0 2
91721: NOT
91722: OR
91723: PUSH
91724: LD_VAR 0 4
91728: NOT
91729: OR
91730: IFFALSE 91734
// exit ;
91732: GO 91923
// while 1 do
91734: LD_INT 1
91736: IFFALSE 91923
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
91738: LD_ADDR_VAR 0 9
91742: PUSH
91743: LD_VAR 0 1
91747: PPUSH
91748: LD_INT 1
91750: PPUSH
91751: CALL_OW 287
91755: PUSH
91756: LD_INT 10
91758: MUL
91759: ST_TO_ADDR
// r := rate / 10 ;
91760: LD_ADDR_VAR 0 7
91764: PUSH
91765: LD_VAR 0 2
91769: PUSH
91770: LD_INT 10
91772: DIVREAL
91773: ST_TO_ADDR
// time := 1 1$00 ;
91774: LD_ADDR_VAR 0 8
91778: PUSH
91779: LD_INT 2100
91781: ST_TO_ADDR
// if amount < min then
91782: LD_VAR 0 9
91786: PUSH
91787: LD_VAR 0 3
91791: LESS
91792: IFFALSE 91810
// r := r * 2 else
91794: LD_ADDR_VAR 0 7
91798: PUSH
91799: LD_VAR 0 7
91803: PUSH
91804: LD_INT 2
91806: MUL
91807: ST_TO_ADDR
91808: GO 91836
// if amount > max then
91810: LD_VAR 0 9
91814: PUSH
91815: LD_VAR 0 4
91819: GREATER
91820: IFFALSE 91836
// r := r / 2 ;
91822: LD_ADDR_VAR 0 7
91826: PUSH
91827: LD_VAR 0 7
91831: PUSH
91832: LD_INT 2
91834: DIVREAL
91835: ST_TO_ADDR
// time := time / r ;
91836: LD_ADDR_VAR 0 8
91840: PUSH
91841: LD_VAR 0 8
91845: PUSH
91846: LD_VAR 0 7
91850: DIVREAL
91851: ST_TO_ADDR
// if time < 0 then
91852: LD_VAR 0 8
91856: PUSH
91857: LD_INT 0
91859: LESS
91860: IFFALSE 91877
// time := time * - 1 ;
91862: LD_ADDR_VAR 0 8
91866: PUSH
91867: LD_VAR 0 8
91871: PUSH
91872: LD_INT 1
91874: NEG
91875: MUL
91876: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
91877: LD_VAR 0 8
91881: PUSH
91882: LD_INT 35
91884: PPUSH
91885: LD_INT 875
91887: PPUSH
91888: CALL_OW 12
91892: PLUS
91893: PPUSH
91894: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
91898: LD_INT 1
91900: PPUSH
91901: LD_INT 5
91903: PPUSH
91904: CALL_OW 12
91908: PPUSH
91909: LD_VAR 0 1
91913: PPUSH
91914: LD_INT 1
91916: PPUSH
91917: CALL_OW 55
// end ;
91921: GO 91734
// end ;
91923: LD_VAR 0 5
91927: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
91928: LD_INT 0
91930: PPUSH
91931: PPUSH
91932: PPUSH
91933: PPUSH
91934: PPUSH
91935: PPUSH
91936: PPUSH
91937: PPUSH
// if not turrets or not factories then
91938: LD_VAR 0 1
91942: NOT
91943: PUSH
91944: LD_VAR 0 2
91948: NOT
91949: OR
91950: IFFALSE 91954
// exit ;
91952: GO 92261
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
91954: LD_ADDR_VAR 0 10
91958: PUSH
91959: LD_INT 5
91961: PUSH
91962: LD_INT 6
91964: PUSH
91965: EMPTY
91966: LIST
91967: LIST
91968: PUSH
91969: LD_INT 2
91971: PUSH
91972: LD_INT 4
91974: PUSH
91975: EMPTY
91976: LIST
91977: LIST
91978: PUSH
91979: LD_INT 3
91981: PUSH
91982: LD_INT 5
91984: PUSH
91985: EMPTY
91986: LIST
91987: LIST
91988: PUSH
91989: EMPTY
91990: LIST
91991: LIST
91992: LIST
91993: PUSH
91994: LD_INT 24
91996: PUSH
91997: LD_INT 25
91999: PUSH
92000: EMPTY
92001: LIST
92002: LIST
92003: PUSH
92004: LD_INT 23
92006: PUSH
92007: LD_INT 27
92009: PUSH
92010: EMPTY
92011: LIST
92012: LIST
92013: PUSH
92014: EMPTY
92015: LIST
92016: LIST
92017: PUSH
92018: LD_INT 42
92020: PUSH
92021: LD_INT 43
92023: PUSH
92024: EMPTY
92025: LIST
92026: LIST
92027: PUSH
92028: LD_INT 44
92030: PUSH
92031: LD_INT 46
92033: PUSH
92034: EMPTY
92035: LIST
92036: LIST
92037: PUSH
92038: LD_INT 45
92040: PUSH
92041: LD_INT 47
92043: PUSH
92044: EMPTY
92045: LIST
92046: LIST
92047: PUSH
92048: EMPTY
92049: LIST
92050: LIST
92051: LIST
92052: PUSH
92053: EMPTY
92054: LIST
92055: LIST
92056: LIST
92057: ST_TO_ADDR
// result := [ ] ;
92058: LD_ADDR_VAR 0 3
92062: PUSH
92063: EMPTY
92064: ST_TO_ADDR
// for i in turrets do
92065: LD_ADDR_VAR 0 4
92069: PUSH
92070: LD_VAR 0 1
92074: PUSH
92075: FOR_IN
92076: IFFALSE 92259
// begin nat := GetNation ( i ) ;
92078: LD_ADDR_VAR 0 7
92082: PUSH
92083: LD_VAR 0 4
92087: PPUSH
92088: CALL_OW 248
92092: ST_TO_ADDR
// weapon := 0 ;
92093: LD_ADDR_VAR 0 8
92097: PUSH
92098: LD_INT 0
92100: ST_TO_ADDR
// if not nat then
92101: LD_VAR 0 7
92105: NOT
92106: IFFALSE 92110
// continue ;
92108: GO 92075
// for j in list [ nat ] do
92110: LD_ADDR_VAR 0 5
92114: PUSH
92115: LD_VAR 0 10
92119: PUSH
92120: LD_VAR 0 7
92124: ARRAY
92125: PUSH
92126: FOR_IN
92127: IFFALSE 92168
// if GetBWeapon ( i ) = j [ 1 ] then
92129: LD_VAR 0 4
92133: PPUSH
92134: CALL_OW 269
92138: PUSH
92139: LD_VAR 0 5
92143: PUSH
92144: LD_INT 1
92146: ARRAY
92147: EQUAL
92148: IFFALSE 92166
// begin weapon := j [ 2 ] ;
92150: LD_ADDR_VAR 0 8
92154: PUSH
92155: LD_VAR 0 5
92159: PUSH
92160: LD_INT 2
92162: ARRAY
92163: ST_TO_ADDR
// break ;
92164: GO 92168
// end ;
92166: GO 92126
92168: POP
92169: POP
// if not weapon then
92170: LD_VAR 0 8
92174: NOT
92175: IFFALSE 92179
// continue ;
92177: GO 92075
// for k in factories do
92179: LD_ADDR_VAR 0 6
92183: PUSH
92184: LD_VAR 0 2
92188: PUSH
92189: FOR_IN
92190: IFFALSE 92255
// begin weapons := AvailableWeaponList ( k ) ;
92192: LD_ADDR_VAR 0 9
92196: PUSH
92197: LD_VAR 0 6
92201: PPUSH
92202: CALL_OW 478
92206: ST_TO_ADDR
// if not weapons then
92207: LD_VAR 0 9
92211: NOT
92212: IFFALSE 92216
// continue ;
92214: GO 92189
// if weapon in weapons then
92216: LD_VAR 0 8
92220: PUSH
92221: LD_VAR 0 9
92225: IN
92226: IFFALSE 92253
// begin result := [ i , weapon ] ;
92228: LD_ADDR_VAR 0 3
92232: PUSH
92233: LD_VAR 0 4
92237: PUSH
92238: LD_VAR 0 8
92242: PUSH
92243: EMPTY
92244: LIST
92245: LIST
92246: ST_TO_ADDR
// exit ;
92247: POP
92248: POP
92249: POP
92250: POP
92251: GO 92261
// end ; end ;
92253: GO 92189
92255: POP
92256: POP
// end ;
92257: GO 92075
92259: POP
92260: POP
// end ;
92261: LD_VAR 0 3
92265: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92266: LD_INT 0
92268: PPUSH
// if not side or side > 8 then
92269: LD_VAR 0 3
92273: NOT
92274: PUSH
92275: LD_VAR 0 3
92279: PUSH
92280: LD_INT 8
92282: GREATER
92283: OR
92284: IFFALSE 92288
// exit ;
92286: GO 92347
// if not range then
92288: LD_VAR 0 4
92292: NOT
92293: IFFALSE 92304
// range := - 12 ;
92295: LD_ADDR_VAR 0 4
92299: PUSH
92300: LD_INT 12
92302: NEG
92303: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92304: LD_VAR 0 1
92308: PPUSH
92309: LD_VAR 0 2
92313: PPUSH
92314: LD_VAR 0 3
92318: PPUSH
92319: LD_VAR 0 4
92323: PPUSH
92324: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92328: LD_VAR 0 1
92332: PPUSH
92333: LD_VAR 0 2
92337: PPUSH
92338: LD_VAR 0 3
92342: PPUSH
92343: CALL_OW 331
// end ;
92347: LD_VAR 0 5
92351: RET
// export function Video ( mode ) ; begin
92352: LD_INT 0
92354: PPUSH
// ingame_video = mode ;
92355: LD_ADDR_OWVAR 52
92359: PUSH
92360: LD_VAR 0 1
92364: ST_TO_ADDR
// interface_hidden = mode ;
92365: LD_ADDR_OWVAR 54
92369: PUSH
92370: LD_VAR 0 1
92374: ST_TO_ADDR
// end ;
92375: LD_VAR 0 2
92379: RET
// export function Join ( array , element ) ; begin
92380: LD_INT 0
92382: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92383: LD_ADDR_VAR 0 3
92387: PUSH
92388: LD_VAR 0 1
92392: PPUSH
92393: LD_VAR 0 1
92397: PUSH
92398: LD_INT 1
92400: PLUS
92401: PPUSH
92402: LD_VAR 0 2
92406: PPUSH
92407: CALL_OW 1
92411: ST_TO_ADDR
// end ;
92412: LD_VAR 0 3
92416: RET
// export function JoinUnion ( array , element ) ; begin
92417: LD_INT 0
92419: PPUSH
// result := array union element ;
92420: LD_ADDR_VAR 0 3
92424: PUSH
92425: LD_VAR 0 1
92429: PUSH
92430: LD_VAR 0 2
92434: UNION
92435: ST_TO_ADDR
// end ;
92436: LD_VAR 0 3
92440: RET
// export function GetBehemoths ( side ) ; begin
92441: LD_INT 0
92443: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92444: LD_ADDR_VAR 0 2
92448: PUSH
92449: LD_INT 22
92451: PUSH
92452: LD_VAR 0 1
92456: PUSH
92457: EMPTY
92458: LIST
92459: LIST
92460: PUSH
92461: LD_INT 31
92463: PUSH
92464: LD_INT 25
92466: PUSH
92467: EMPTY
92468: LIST
92469: LIST
92470: PUSH
92471: EMPTY
92472: LIST
92473: LIST
92474: PPUSH
92475: CALL_OW 69
92479: ST_TO_ADDR
// end ;
92480: LD_VAR 0 2
92484: RET
// export function Shuffle ( array ) ; var i , index ; begin
92485: LD_INT 0
92487: PPUSH
92488: PPUSH
92489: PPUSH
// result := [ ] ;
92490: LD_ADDR_VAR 0 2
92494: PUSH
92495: EMPTY
92496: ST_TO_ADDR
// if not array then
92497: LD_VAR 0 1
92501: NOT
92502: IFFALSE 92506
// exit ;
92504: GO 92605
// Randomize ;
92506: CALL_OW 10
// for i = array downto 1 do
92510: LD_ADDR_VAR 0 3
92514: PUSH
92515: DOUBLE
92516: LD_VAR 0 1
92520: INC
92521: ST_TO_ADDR
92522: LD_INT 1
92524: PUSH
92525: FOR_DOWNTO
92526: IFFALSE 92603
// begin index := rand ( 1 , array ) ;
92528: LD_ADDR_VAR 0 4
92532: PUSH
92533: LD_INT 1
92535: PPUSH
92536: LD_VAR 0 1
92540: PPUSH
92541: CALL_OW 12
92545: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
92546: LD_ADDR_VAR 0 2
92550: PUSH
92551: LD_VAR 0 2
92555: PPUSH
92556: LD_VAR 0 2
92560: PUSH
92561: LD_INT 1
92563: PLUS
92564: PPUSH
92565: LD_VAR 0 1
92569: PUSH
92570: LD_VAR 0 4
92574: ARRAY
92575: PPUSH
92576: CALL_OW 2
92580: ST_TO_ADDR
// array := Delete ( array , index ) ;
92581: LD_ADDR_VAR 0 1
92585: PUSH
92586: LD_VAR 0 1
92590: PPUSH
92591: LD_VAR 0 4
92595: PPUSH
92596: CALL_OW 3
92600: ST_TO_ADDR
// end ;
92601: GO 92525
92603: POP
92604: POP
// end ;
92605: LD_VAR 0 2
92609: RET
// export function GetBaseMaterials ( base ) ; begin
92610: LD_INT 0
92612: PPUSH
// result := [ 0 , 0 , 0 ] ;
92613: LD_ADDR_VAR 0 2
92617: PUSH
92618: LD_INT 0
92620: PUSH
92621: LD_INT 0
92623: PUSH
92624: LD_INT 0
92626: PUSH
92627: EMPTY
92628: LIST
92629: LIST
92630: LIST
92631: ST_TO_ADDR
// if not base then
92632: LD_VAR 0 1
92636: NOT
92637: IFFALSE 92641
// exit ;
92639: GO 92690
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
92641: LD_ADDR_VAR 0 2
92645: PUSH
92646: LD_VAR 0 1
92650: PPUSH
92651: LD_INT 1
92653: PPUSH
92654: CALL_OW 275
92658: PUSH
92659: LD_VAR 0 1
92663: PPUSH
92664: LD_INT 2
92666: PPUSH
92667: CALL_OW 275
92671: PUSH
92672: LD_VAR 0 1
92676: PPUSH
92677: LD_INT 3
92679: PPUSH
92680: CALL_OW 275
92684: PUSH
92685: EMPTY
92686: LIST
92687: LIST
92688: LIST
92689: ST_TO_ADDR
// end ;
92690: LD_VAR 0 2
92694: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
92695: LD_INT 0
92697: PPUSH
92698: PPUSH
// result := array ;
92699: LD_ADDR_VAR 0 3
92703: PUSH
92704: LD_VAR 0 1
92708: ST_TO_ADDR
// if size >= result then
92709: LD_VAR 0 2
92713: PUSH
92714: LD_VAR 0 3
92718: GREATEREQUAL
92719: IFFALSE 92723
// exit ;
92721: GO 92773
// if size then
92723: LD_VAR 0 2
92727: IFFALSE 92773
// for i := array downto size do
92729: LD_ADDR_VAR 0 4
92733: PUSH
92734: DOUBLE
92735: LD_VAR 0 1
92739: INC
92740: ST_TO_ADDR
92741: LD_VAR 0 2
92745: PUSH
92746: FOR_DOWNTO
92747: IFFALSE 92771
// result := Delete ( result , result ) ;
92749: LD_ADDR_VAR 0 3
92753: PUSH
92754: LD_VAR 0 3
92758: PPUSH
92759: LD_VAR 0 3
92763: PPUSH
92764: CALL_OW 3
92768: ST_TO_ADDR
92769: GO 92746
92771: POP
92772: POP
// end ;
92773: LD_VAR 0 3
92777: RET
// export function ComExit ( unit ) ; var tmp ; begin
92778: LD_INT 0
92780: PPUSH
92781: PPUSH
// if not IsInUnit ( unit ) then
92782: LD_VAR 0 1
92786: PPUSH
92787: CALL_OW 310
92791: NOT
92792: IFFALSE 92796
// exit ;
92794: GO 92856
// tmp := IsInUnit ( unit ) ;
92796: LD_ADDR_VAR 0 3
92800: PUSH
92801: LD_VAR 0 1
92805: PPUSH
92806: CALL_OW 310
92810: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
92811: LD_VAR 0 3
92815: PPUSH
92816: CALL_OW 247
92820: PUSH
92821: LD_INT 2
92823: EQUAL
92824: IFFALSE 92837
// ComExitVehicle ( unit ) else
92826: LD_VAR 0 1
92830: PPUSH
92831: CALL_OW 121
92835: GO 92846
// ComExitBuilding ( unit ) ;
92837: LD_VAR 0 1
92841: PPUSH
92842: CALL_OW 122
// result := tmp ;
92846: LD_ADDR_VAR 0 2
92850: PUSH
92851: LD_VAR 0 3
92855: ST_TO_ADDR
// end ;
92856: LD_VAR 0 2
92860: RET
// export function ComExitAll ( units ) ; var i ; begin
92861: LD_INT 0
92863: PPUSH
92864: PPUSH
// if not units then
92865: LD_VAR 0 1
92869: NOT
92870: IFFALSE 92874
// exit ;
92872: GO 92900
// for i in units do
92874: LD_ADDR_VAR 0 3
92878: PUSH
92879: LD_VAR 0 1
92883: PUSH
92884: FOR_IN
92885: IFFALSE 92898
// ComExit ( i ) ;
92887: LD_VAR 0 3
92891: PPUSH
92892: CALL 92778 0 1
92896: GO 92884
92898: POP
92899: POP
// end ;
92900: LD_VAR 0 2
92904: RET
// export function ResetHc ; begin
92905: LD_INT 0
92907: PPUSH
// InitHc ;
92908: CALL_OW 19
// hc_importance := 0 ;
92912: LD_ADDR_OWVAR 32
92916: PUSH
92917: LD_INT 0
92919: ST_TO_ADDR
// end ;
92920: LD_VAR 0 1
92924: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
92925: LD_INT 0
92927: PPUSH
92928: PPUSH
92929: PPUSH
// _x := ( x1 + x2 ) div 2 ;
92930: LD_ADDR_VAR 0 6
92934: PUSH
92935: LD_VAR 0 1
92939: PUSH
92940: LD_VAR 0 3
92944: PLUS
92945: PUSH
92946: LD_INT 2
92948: DIV
92949: ST_TO_ADDR
// if _x < 0 then
92950: LD_VAR 0 6
92954: PUSH
92955: LD_INT 0
92957: LESS
92958: IFFALSE 92975
// _x := _x * - 1 ;
92960: LD_ADDR_VAR 0 6
92964: PUSH
92965: LD_VAR 0 6
92969: PUSH
92970: LD_INT 1
92972: NEG
92973: MUL
92974: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
92975: LD_ADDR_VAR 0 7
92979: PUSH
92980: LD_VAR 0 2
92984: PUSH
92985: LD_VAR 0 4
92989: PLUS
92990: PUSH
92991: LD_INT 2
92993: DIV
92994: ST_TO_ADDR
// if _y < 0 then
92995: LD_VAR 0 7
92999: PUSH
93000: LD_INT 0
93002: LESS
93003: IFFALSE 93020
// _y := _y * - 1 ;
93005: LD_ADDR_VAR 0 7
93009: PUSH
93010: LD_VAR 0 7
93014: PUSH
93015: LD_INT 1
93017: NEG
93018: MUL
93019: ST_TO_ADDR
// result := [ _x , _y ] ;
93020: LD_ADDR_VAR 0 5
93024: PUSH
93025: LD_VAR 0 6
93029: PUSH
93030: LD_VAR 0 7
93034: PUSH
93035: EMPTY
93036: LIST
93037: LIST
93038: ST_TO_ADDR
// end ;
93039: LD_VAR 0 5
93043: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
93044: LD_INT 0
93046: PPUSH
93047: PPUSH
93048: PPUSH
93049: PPUSH
// task := GetTaskList ( unit ) ;
93050: LD_ADDR_VAR 0 7
93054: PUSH
93055: LD_VAR 0 1
93059: PPUSH
93060: CALL_OW 437
93064: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
93065: LD_VAR 0 7
93069: NOT
93070: PUSH
93071: LD_VAR 0 1
93075: PPUSH
93076: LD_VAR 0 2
93080: PPUSH
93081: CALL_OW 308
93085: NOT
93086: AND
93087: IFFALSE 93091
// exit ;
93089: GO 93209
// if IsInArea ( unit , area ) then
93091: LD_VAR 0 1
93095: PPUSH
93096: LD_VAR 0 2
93100: PPUSH
93101: CALL_OW 308
93105: IFFALSE 93123
// begin ComMoveToArea ( unit , goAway ) ;
93107: LD_VAR 0 1
93111: PPUSH
93112: LD_VAR 0 3
93116: PPUSH
93117: CALL_OW 113
// exit ;
93121: GO 93209
// end ; if task [ 1 ] [ 1 ] <> M then
93123: LD_VAR 0 7
93127: PUSH
93128: LD_INT 1
93130: ARRAY
93131: PUSH
93132: LD_INT 1
93134: ARRAY
93135: PUSH
93136: LD_STRING M
93138: NONEQUAL
93139: IFFALSE 93143
// exit ;
93141: GO 93209
// x := task [ 1 ] [ 2 ] ;
93143: LD_ADDR_VAR 0 5
93147: PUSH
93148: LD_VAR 0 7
93152: PUSH
93153: LD_INT 1
93155: ARRAY
93156: PUSH
93157: LD_INT 2
93159: ARRAY
93160: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
93161: LD_ADDR_VAR 0 6
93165: PUSH
93166: LD_VAR 0 7
93170: PUSH
93171: LD_INT 1
93173: ARRAY
93174: PUSH
93175: LD_INT 3
93177: ARRAY
93178: ST_TO_ADDR
// if InArea ( x , y , area ) then
93179: LD_VAR 0 5
93183: PPUSH
93184: LD_VAR 0 6
93188: PPUSH
93189: LD_VAR 0 2
93193: PPUSH
93194: CALL_OW 309
93198: IFFALSE 93209
// ComStop ( unit ) ;
93200: LD_VAR 0 1
93204: PPUSH
93205: CALL_OW 141
// end ;
93209: LD_VAR 0 4
93213: RET
// export function Abs ( value ) ; begin
93214: LD_INT 0
93216: PPUSH
// result := value ;
93217: LD_ADDR_VAR 0 2
93221: PUSH
93222: LD_VAR 0 1
93226: ST_TO_ADDR
// if value < 0 then
93227: LD_VAR 0 1
93231: PUSH
93232: LD_INT 0
93234: LESS
93235: IFFALSE 93252
// result := value * - 1 ;
93237: LD_ADDR_VAR 0 2
93241: PUSH
93242: LD_VAR 0 1
93246: PUSH
93247: LD_INT 1
93249: NEG
93250: MUL
93251: ST_TO_ADDR
// end ;
93252: LD_VAR 0 2
93256: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93257: LD_INT 0
93259: PPUSH
93260: PPUSH
93261: PPUSH
93262: PPUSH
93263: PPUSH
93264: PPUSH
93265: PPUSH
93266: PPUSH
// if not unit or not building then
93267: LD_VAR 0 1
93271: NOT
93272: PUSH
93273: LD_VAR 0 2
93277: NOT
93278: OR
93279: IFFALSE 93283
// exit ;
93281: GO 93509
// x := GetX ( building ) ;
93283: LD_ADDR_VAR 0 4
93287: PUSH
93288: LD_VAR 0 2
93292: PPUSH
93293: CALL_OW 250
93297: ST_TO_ADDR
// y := GetY ( building ) ;
93298: LD_ADDR_VAR 0 6
93302: PUSH
93303: LD_VAR 0 2
93307: PPUSH
93308: CALL_OW 251
93312: ST_TO_ADDR
// d := GetDir ( building ) ;
93313: LD_ADDR_VAR 0 8
93317: PUSH
93318: LD_VAR 0 2
93322: PPUSH
93323: CALL_OW 254
93327: ST_TO_ADDR
// r := 4 ;
93328: LD_ADDR_VAR 0 9
93332: PUSH
93333: LD_INT 4
93335: ST_TO_ADDR
// for i := 1 to 5 do
93336: LD_ADDR_VAR 0 10
93340: PUSH
93341: DOUBLE
93342: LD_INT 1
93344: DEC
93345: ST_TO_ADDR
93346: LD_INT 5
93348: PUSH
93349: FOR_TO
93350: IFFALSE 93507
// begin _x := ShiftX ( x , d , r + i ) ;
93352: LD_ADDR_VAR 0 5
93356: PUSH
93357: LD_VAR 0 4
93361: PPUSH
93362: LD_VAR 0 8
93366: PPUSH
93367: LD_VAR 0 9
93371: PUSH
93372: LD_VAR 0 10
93376: PLUS
93377: PPUSH
93378: CALL_OW 272
93382: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93383: LD_ADDR_VAR 0 7
93387: PUSH
93388: LD_VAR 0 6
93392: PPUSH
93393: LD_VAR 0 8
93397: PPUSH
93398: LD_VAR 0 9
93402: PUSH
93403: LD_VAR 0 10
93407: PLUS
93408: PPUSH
93409: CALL_OW 273
93413: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93414: LD_VAR 0 5
93418: PPUSH
93419: LD_VAR 0 7
93423: PPUSH
93424: CALL_OW 488
93428: PUSH
93429: LD_VAR 0 5
93433: PPUSH
93434: LD_VAR 0 7
93438: PPUSH
93439: CALL_OW 428
93443: PPUSH
93444: CALL_OW 247
93448: PUSH
93449: LD_INT 3
93451: PUSH
93452: LD_INT 2
93454: PUSH
93455: EMPTY
93456: LIST
93457: LIST
93458: IN
93459: NOT
93460: AND
93461: IFFALSE 93505
// begin ComMoveXY ( unit , _x , _y ) ;
93463: LD_VAR 0 1
93467: PPUSH
93468: LD_VAR 0 5
93472: PPUSH
93473: LD_VAR 0 7
93477: PPUSH
93478: CALL_OW 111
// result := [ _x , _y ] ;
93482: LD_ADDR_VAR 0 3
93486: PUSH
93487: LD_VAR 0 5
93491: PUSH
93492: LD_VAR 0 7
93496: PUSH
93497: EMPTY
93498: LIST
93499: LIST
93500: ST_TO_ADDR
// exit ;
93501: POP
93502: POP
93503: GO 93509
// end ; end ;
93505: GO 93349
93507: POP
93508: POP
// end ;
93509: LD_VAR 0 3
93513: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
93514: LD_INT 0
93516: PPUSH
93517: PPUSH
93518: PPUSH
// result := 0 ;
93519: LD_ADDR_VAR 0 3
93523: PUSH
93524: LD_INT 0
93526: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
93527: LD_VAR 0 1
93531: PUSH
93532: LD_INT 0
93534: LESS
93535: PUSH
93536: LD_VAR 0 1
93540: PUSH
93541: LD_INT 8
93543: GREATER
93544: OR
93545: PUSH
93546: LD_VAR 0 2
93550: PUSH
93551: LD_INT 0
93553: LESS
93554: OR
93555: PUSH
93556: LD_VAR 0 2
93560: PUSH
93561: LD_INT 8
93563: GREATER
93564: OR
93565: IFFALSE 93569
// exit ;
93567: GO 93644
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
93569: LD_ADDR_VAR 0 4
93573: PUSH
93574: LD_INT 22
93576: PUSH
93577: LD_VAR 0 2
93581: PUSH
93582: EMPTY
93583: LIST
93584: LIST
93585: PPUSH
93586: CALL_OW 69
93590: PUSH
93591: FOR_IN
93592: IFFALSE 93642
// begin un := UnitShoot ( i ) ;
93594: LD_ADDR_VAR 0 5
93598: PUSH
93599: LD_VAR 0 4
93603: PPUSH
93604: CALL_OW 504
93608: ST_TO_ADDR
// if GetSide ( un ) = side1 then
93609: LD_VAR 0 5
93613: PPUSH
93614: CALL_OW 255
93618: PUSH
93619: LD_VAR 0 1
93623: EQUAL
93624: IFFALSE 93640
// begin result := un ;
93626: LD_ADDR_VAR 0 3
93630: PUSH
93631: LD_VAR 0 5
93635: ST_TO_ADDR
// exit ;
93636: POP
93637: POP
93638: GO 93644
// end ; end ;
93640: GO 93591
93642: POP
93643: POP
// end ;
93644: LD_VAR 0 3
93648: RET
// export function GetCargoBay ( units ) ; begin
93649: LD_INT 0
93651: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
93652: LD_ADDR_VAR 0 2
93656: PUSH
93657: LD_VAR 0 1
93661: PPUSH
93662: LD_INT 2
93664: PUSH
93665: LD_INT 34
93667: PUSH
93668: LD_INT 12
93670: PUSH
93671: EMPTY
93672: LIST
93673: LIST
93674: PUSH
93675: LD_INT 34
93677: PUSH
93678: LD_INT 51
93680: PUSH
93681: EMPTY
93682: LIST
93683: LIST
93684: PUSH
93685: LD_INT 34
93687: PUSH
93688: LD_INT 32
93690: PUSH
93691: EMPTY
93692: LIST
93693: LIST
93694: PUSH
93695: LD_INT 34
93697: PUSH
93698: LD_INT 89
93700: PUSH
93701: EMPTY
93702: LIST
93703: LIST
93704: PUSH
93705: EMPTY
93706: LIST
93707: LIST
93708: LIST
93709: LIST
93710: LIST
93711: PPUSH
93712: CALL_OW 72
93716: ST_TO_ADDR
// end ;
93717: LD_VAR 0 2
93721: RET
// export function Negate ( value ) ; begin
93722: LD_INT 0
93724: PPUSH
// result := not value ;
93725: LD_ADDR_VAR 0 2
93729: PUSH
93730: LD_VAR 0 1
93734: NOT
93735: ST_TO_ADDR
// end ;
93736: LD_VAR 0 2
93740: RET
// export function Inc ( value ) ; begin
93741: LD_INT 0
93743: PPUSH
// result := value + 1 ;
93744: LD_ADDR_VAR 0 2
93748: PUSH
93749: LD_VAR 0 1
93753: PUSH
93754: LD_INT 1
93756: PLUS
93757: ST_TO_ADDR
// end ;
93758: LD_VAR 0 2
93762: RET
// export function Dec ( value ) ; begin
93763: LD_INT 0
93765: PPUSH
// result := value - 1 ;
93766: LD_ADDR_VAR 0 2
93770: PUSH
93771: LD_VAR 0 1
93775: PUSH
93776: LD_INT 1
93778: MINUS
93779: ST_TO_ADDR
// end ;
93780: LD_VAR 0 2
93784: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
93785: LD_INT 0
93787: PPUSH
93788: PPUSH
93789: PPUSH
93790: PPUSH
93791: PPUSH
93792: PPUSH
93793: PPUSH
93794: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
93795: LD_VAR 0 1
93799: PPUSH
93800: LD_VAR 0 2
93804: PPUSH
93805: CALL_OW 488
93809: NOT
93810: PUSH
93811: LD_VAR 0 3
93815: PPUSH
93816: LD_VAR 0 4
93820: PPUSH
93821: CALL_OW 488
93825: NOT
93826: OR
93827: IFFALSE 93840
// begin result := - 1 ;
93829: LD_ADDR_VAR 0 5
93833: PUSH
93834: LD_INT 1
93836: NEG
93837: ST_TO_ADDR
// exit ;
93838: GO 94075
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
93840: LD_ADDR_VAR 0 12
93844: PUSH
93845: LD_VAR 0 1
93849: PPUSH
93850: LD_VAR 0 2
93854: PPUSH
93855: LD_VAR 0 3
93859: PPUSH
93860: LD_VAR 0 4
93864: PPUSH
93865: CALL 92925 0 4
93869: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
93870: LD_ADDR_VAR 0 11
93874: PUSH
93875: LD_VAR 0 1
93879: PPUSH
93880: LD_VAR 0 2
93884: PPUSH
93885: LD_VAR 0 12
93889: PUSH
93890: LD_INT 1
93892: ARRAY
93893: PPUSH
93894: LD_VAR 0 12
93898: PUSH
93899: LD_INT 2
93901: ARRAY
93902: PPUSH
93903: CALL_OW 298
93907: ST_TO_ADDR
// distance := 9999 ;
93908: LD_ADDR_VAR 0 10
93912: PUSH
93913: LD_INT 9999
93915: ST_TO_ADDR
// for i := 0 to 5 do
93916: LD_ADDR_VAR 0 6
93920: PUSH
93921: DOUBLE
93922: LD_INT 0
93924: DEC
93925: ST_TO_ADDR
93926: LD_INT 5
93928: PUSH
93929: FOR_TO
93930: IFFALSE 94073
// begin _x := ShiftX ( x1 , i , centerDist ) ;
93932: LD_ADDR_VAR 0 7
93936: PUSH
93937: LD_VAR 0 1
93941: PPUSH
93942: LD_VAR 0 6
93946: PPUSH
93947: LD_VAR 0 11
93951: PPUSH
93952: CALL_OW 272
93956: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
93957: LD_ADDR_VAR 0 8
93961: PUSH
93962: LD_VAR 0 2
93966: PPUSH
93967: LD_VAR 0 6
93971: PPUSH
93972: LD_VAR 0 11
93976: PPUSH
93977: CALL_OW 273
93981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93982: LD_VAR 0 7
93986: PPUSH
93987: LD_VAR 0 8
93991: PPUSH
93992: CALL_OW 488
93996: NOT
93997: IFFALSE 94001
// continue ;
93999: GO 93929
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
94001: LD_ADDR_VAR 0 9
94005: PUSH
94006: LD_VAR 0 12
94010: PUSH
94011: LD_INT 1
94013: ARRAY
94014: PPUSH
94015: LD_VAR 0 12
94019: PUSH
94020: LD_INT 2
94022: ARRAY
94023: PPUSH
94024: LD_VAR 0 7
94028: PPUSH
94029: LD_VAR 0 8
94033: PPUSH
94034: CALL_OW 298
94038: ST_TO_ADDR
// if tmp < distance then
94039: LD_VAR 0 9
94043: PUSH
94044: LD_VAR 0 10
94048: LESS
94049: IFFALSE 94071
// begin result := i ;
94051: LD_ADDR_VAR 0 5
94055: PUSH
94056: LD_VAR 0 6
94060: ST_TO_ADDR
// distance := tmp ;
94061: LD_ADDR_VAR 0 10
94065: PUSH
94066: LD_VAR 0 9
94070: ST_TO_ADDR
// end ; end ;
94071: GO 93929
94073: POP
94074: POP
// end ;
94075: LD_VAR 0 5
94079: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94080: LD_INT 0
94082: PPUSH
94083: PPUSH
// if not driver or not IsInUnit ( driver ) then
94084: LD_VAR 0 1
94088: NOT
94089: PUSH
94090: LD_VAR 0 1
94094: PPUSH
94095: CALL_OW 310
94099: NOT
94100: OR
94101: IFFALSE 94105
// exit ;
94103: GO 94195
// vehicle := IsInUnit ( driver ) ;
94105: LD_ADDR_VAR 0 3
94109: PUSH
94110: LD_VAR 0 1
94114: PPUSH
94115: CALL_OW 310
94119: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94120: LD_VAR 0 1
94124: PPUSH
94125: LD_STRING \
94127: PUSH
94128: LD_INT 0
94130: PUSH
94131: LD_INT 0
94133: PUSH
94134: LD_INT 0
94136: PUSH
94137: LD_INT 0
94139: PUSH
94140: LD_INT 0
94142: PUSH
94143: LD_INT 0
94145: PUSH
94146: EMPTY
94147: LIST
94148: LIST
94149: LIST
94150: LIST
94151: LIST
94152: LIST
94153: LIST
94154: PUSH
94155: LD_STRING E
94157: PUSH
94158: LD_INT 0
94160: PUSH
94161: LD_INT 0
94163: PUSH
94164: LD_VAR 0 3
94168: PUSH
94169: LD_INT 0
94171: PUSH
94172: LD_INT 0
94174: PUSH
94175: LD_INT 0
94177: PUSH
94178: EMPTY
94179: LIST
94180: LIST
94181: LIST
94182: LIST
94183: LIST
94184: LIST
94185: LIST
94186: PUSH
94187: EMPTY
94188: LIST
94189: LIST
94190: PPUSH
94191: CALL_OW 446
// end ;
94195: LD_VAR 0 2
94199: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94200: LD_INT 0
94202: PPUSH
94203: PPUSH
// if not driver or not IsInUnit ( driver ) then
94204: LD_VAR 0 1
94208: NOT
94209: PUSH
94210: LD_VAR 0 1
94214: PPUSH
94215: CALL_OW 310
94219: NOT
94220: OR
94221: IFFALSE 94225
// exit ;
94223: GO 94315
// vehicle := IsInUnit ( driver ) ;
94225: LD_ADDR_VAR 0 3
94229: PUSH
94230: LD_VAR 0 1
94234: PPUSH
94235: CALL_OW 310
94239: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94240: LD_VAR 0 1
94244: PPUSH
94245: LD_STRING \
94247: PUSH
94248: LD_INT 0
94250: PUSH
94251: LD_INT 0
94253: PUSH
94254: LD_INT 0
94256: PUSH
94257: LD_INT 0
94259: PUSH
94260: LD_INT 0
94262: PUSH
94263: LD_INT 0
94265: PUSH
94266: EMPTY
94267: LIST
94268: LIST
94269: LIST
94270: LIST
94271: LIST
94272: LIST
94273: LIST
94274: PUSH
94275: LD_STRING E
94277: PUSH
94278: LD_INT 0
94280: PUSH
94281: LD_INT 0
94283: PUSH
94284: LD_VAR 0 3
94288: PUSH
94289: LD_INT 0
94291: PUSH
94292: LD_INT 0
94294: PUSH
94295: LD_INT 0
94297: PUSH
94298: EMPTY
94299: LIST
94300: LIST
94301: LIST
94302: LIST
94303: LIST
94304: LIST
94305: LIST
94306: PUSH
94307: EMPTY
94308: LIST
94309: LIST
94310: PPUSH
94311: CALL_OW 447
// end ;
94315: LD_VAR 0 2
94319: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94320: LD_INT 0
94322: PPUSH
94323: PPUSH
94324: PPUSH
// tmp := [ ] ;
94325: LD_ADDR_VAR 0 5
94329: PUSH
94330: EMPTY
94331: ST_TO_ADDR
// for i in units do
94332: LD_ADDR_VAR 0 4
94336: PUSH
94337: LD_VAR 0 1
94341: PUSH
94342: FOR_IN
94343: IFFALSE 94381
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94345: LD_ADDR_VAR 0 5
94349: PUSH
94350: LD_VAR 0 5
94354: PPUSH
94355: LD_VAR 0 5
94359: PUSH
94360: LD_INT 1
94362: PLUS
94363: PPUSH
94364: LD_VAR 0 4
94368: PPUSH
94369: CALL_OW 256
94373: PPUSH
94374: CALL_OW 2
94378: ST_TO_ADDR
94379: GO 94342
94381: POP
94382: POP
// if not tmp then
94383: LD_VAR 0 5
94387: NOT
94388: IFFALSE 94392
// exit ;
94390: GO 94440
// if asc then
94392: LD_VAR 0 2
94396: IFFALSE 94420
// result := SortListByListAsc ( units , tmp ) else
94398: LD_ADDR_VAR 0 3
94402: PUSH
94403: LD_VAR 0 1
94407: PPUSH
94408: LD_VAR 0 5
94412: PPUSH
94413: CALL_OW 76
94417: ST_TO_ADDR
94418: GO 94440
// result := SortListByListDesc ( units , tmp ) ;
94420: LD_ADDR_VAR 0 3
94424: PUSH
94425: LD_VAR 0 1
94429: PPUSH
94430: LD_VAR 0 5
94434: PPUSH
94435: CALL_OW 77
94439: ST_TO_ADDR
// end ;
94440: LD_VAR 0 3
94444: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94445: LD_INT 0
94447: PPUSH
94448: PPUSH
// task := GetTaskList ( mech ) ;
94449: LD_ADDR_VAR 0 4
94453: PUSH
94454: LD_VAR 0 1
94458: PPUSH
94459: CALL_OW 437
94463: ST_TO_ADDR
// if not task then
94464: LD_VAR 0 4
94468: NOT
94469: IFFALSE 94473
// exit ;
94471: GO 94515
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
94473: LD_ADDR_VAR 0 3
94477: PUSH
94478: LD_VAR 0 4
94482: PUSH
94483: LD_INT 1
94485: ARRAY
94486: PUSH
94487: LD_INT 1
94489: ARRAY
94490: PUSH
94491: LD_STRING r
94493: EQUAL
94494: PUSH
94495: LD_VAR 0 4
94499: PUSH
94500: LD_INT 1
94502: ARRAY
94503: PUSH
94504: LD_INT 4
94506: ARRAY
94507: PUSH
94508: LD_VAR 0 2
94512: EQUAL
94513: AND
94514: ST_TO_ADDR
// end ;
94515: LD_VAR 0 3
94519: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
94520: LD_INT 0
94522: PPUSH
// SetDir ( unit , d ) ;
94523: LD_VAR 0 1
94527: PPUSH
94528: LD_VAR 0 4
94532: PPUSH
94533: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
94537: LD_VAR 0 1
94541: PPUSH
94542: LD_VAR 0 2
94546: PPUSH
94547: LD_VAR 0 3
94551: PPUSH
94552: LD_VAR 0 5
94556: PPUSH
94557: CALL_OW 48
// end ;
94561: LD_VAR 0 6
94565: RET
// export function ToNaturalNumber ( number ) ; begin
94566: LD_INT 0
94568: PPUSH
// result := number div 1 ;
94569: LD_ADDR_VAR 0 2
94573: PUSH
94574: LD_VAR 0 1
94578: PUSH
94579: LD_INT 1
94581: DIV
94582: ST_TO_ADDR
// if number < 0 then
94583: LD_VAR 0 1
94587: PUSH
94588: LD_INT 0
94590: LESS
94591: IFFALSE 94601
// result := 0 ;
94593: LD_ADDR_VAR 0 2
94597: PUSH
94598: LD_INT 0
94600: ST_TO_ADDR
// end ;
94601: LD_VAR 0 2
94605: RET
// export function SortByClass ( units , class ) ; var un ; begin
94606: LD_INT 0
94608: PPUSH
94609: PPUSH
// if not units or not class then
94610: LD_VAR 0 1
94614: NOT
94615: PUSH
94616: LD_VAR 0 2
94620: NOT
94621: OR
94622: IFFALSE 94626
// exit ;
94624: GO 94721
// result := [ ] ;
94626: LD_ADDR_VAR 0 3
94630: PUSH
94631: EMPTY
94632: ST_TO_ADDR
// for un in units do
94633: LD_ADDR_VAR 0 4
94637: PUSH
94638: LD_VAR 0 1
94642: PUSH
94643: FOR_IN
94644: IFFALSE 94719
// if GetClass ( un ) = class then
94646: LD_VAR 0 4
94650: PPUSH
94651: CALL_OW 257
94655: PUSH
94656: LD_VAR 0 2
94660: EQUAL
94661: IFFALSE 94688
// result := Insert ( result , 1 , un ) else
94663: LD_ADDR_VAR 0 3
94667: PUSH
94668: LD_VAR 0 3
94672: PPUSH
94673: LD_INT 1
94675: PPUSH
94676: LD_VAR 0 4
94680: PPUSH
94681: CALL_OW 2
94685: ST_TO_ADDR
94686: GO 94717
// result := Replace ( result , result + 1 , un ) ;
94688: LD_ADDR_VAR 0 3
94692: PUSH
94693: LD_VAR 0 3
94697: PPUSH
94698: LD_VAR 0 3
94702: PUSH
94703: LD_INT 1
94705: PLUS
94706: PPUSH
94707: LD_VAR 0 4
94711: PPUSH
94712: CALL_OW 1
94716: ST_TO_ADDR
94717: GO 94643
94719: POP
94720: POP
// end ;
94721: LD_VAR 0 3
94725: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
94726: LD_INT 0
94728: PPUSH
94729: PPUSH
94730: PPUSH
94731: PPUSH
94732: PPUSH
94733: PPUSH
94734: PPUSH
// result := [ ] ;
94735: LD_ADDR_VAR 0 4
94739: PUSH
94740: EMPTY
94741: ST_TO_ADDR
// if x - r < 0 then
94742: LD_VAR 0 1
94746: PUSH
94747: LD_VAR 0 3
94751: MINUS
94752: PUSH
94753: LD_INT 0
94755: LESS
94756: IFFALSE 94768
// min_x := 0 else
94758: LD_ADDR_VAR 0 8
94762: PUSH
94763: LD_INT 0
94765: ST_TO_ADDR
94766: GO 94784
// min_x := x - r ;
94768: LD_ADDR_VAR 0 8
94772: PUSH
94773: LD_VAR 0 1
94777: PUSH
94778: LD_VAR 0 3
94782: MINUS
94783: ST_TO_ADDR
// if y - r < 0 then
94784: LD_VAR 0 2
94788: PUSH
94789: LD_VAR 0 3
94793: MINUS
94794: PUSH
94795: LD_INT 0
94797: LESS
94798: IFFALSE 94810
// min_y := 0 else
94800: LD_ADDR_VAR 0 7
94804: PUSH
94805: LD_INT 0
94807: ST_TO_ADDR
94808: GO 94826
// min_y := y - r ;
94810: LD_ADDR_VAR 0 7
94814: PUSH
94815: LD_VAR 0 2
94819: PUSH
94820: LD_VAR 0 3
94824: MINUS
94825: ST_TO_ADDR
// max_x := x + r ;
94826: LD_ADDR_VAR 0 9
94830: PUSH
94831: LD_VAR 0 1
94835: PUSH
94836: LD_VAR 0 3
94840: PLUS
94841: ST_TO_ADDR
// max_y := y + r ;
94842: LD_ADDR_VAR 0 10
94846: PUSH
94847: LD_VAR 0 2
94851: PUSH
94852: LD_VAR 0 3
94856: PLUS
94857: ST_TO_ADDR
// for _x = min_x to max_x do
94858: LD_ADDR_VAR 0 5
94862: PUSH
94863: DOUBLE
94864: LD_VAR 0 8
94868: DEC
94869: ST_TO_ADDR
94870: LD_VAR 0 9
94874: PUSH
94875: FOR_TO
94876: IFFALSE 94977
// for _y = min_y to max_y do
94878: LD_ADDR_VAR 0 6
94882: PUSH
94883: DOUBLE
94884: LD_VAR 0 7
94888: DEC
94889: ST_TO_ADDR
94890: LD_VAR 0 10
94894: PUSH
94895: FOR_TO
94896: IFFALSE 94973
// begin if not ValidHex ( _x , _y ) then
94898: LD_VAR 0 5
94902: PPUSH
94903: LD_VAR 0 6
94907: PPUSH
94908: CALL_OW 488
94912: NOT
94913: IFFALSE 94917
// continue ;
94915: GO 94895
// if GetResourceTypeXY ( _x , _y ) then
94917: LD_VAR 0 5
94921: PPUSH
94922: LD_VAR 0 6
94926: PPUSH
94927: CALL_OW 283
94931: IFFALSE 94971
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
94933: LD_ADDR_VAR 0 4
94937: PUSH
94938: LD_VAR 0 4
94942: PPUSH
94943: LD_VAR 0 4
94947: PUSH
94948: LD_INT 1
94950: PLUS
94951: PPUSH
94952: LD_VAR 0 5
94956: PUSH
94957: LD_VAR 0 6
94961: PUSH
94962: EMPTY
94963: LIST
94964: LIST
94965: PPUSH
94966: CALL_OW 1
94970: ST_TO_ADDR
// end ;
94971: GO 94895
94973: POP
94974: POP
94975: GO 94875
94977: POP
94978: POP
// end ;
94979: LD_VAR 0 4
94983: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
94984: LD_INT 0
94986: PPUSH
94987: PPUSH
94988: PPUSH
94989: PPUSH
94990: PPUSH
94991: PPUSH
94992: PPUSH
94993: PPUSH
// if not units then
94994: LD_VAR 0 1
94998: NOT
94999: IFFALSE 95003
// exit ;
95001: GO 95527
// result := UnitFilter ( units , [ f_ok ] ) ;
95003: LD_ADDR_VAR 0 3
95007: PUSH
95008: LD_VAR 0 1
95012: PPUSH
95013: LD_INT 50
95015: PUSH
95016: EMPTY
95017: LIST
95018: PPUSH
95019: CALL_OW 72
95023: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
95024: LD_ADDR_VAR 0 8
95028: PUSH
95029: LD_VAR 0 1
95033: PUSH
95034: LD_INT 1
95036: ARRAY
95037: PPUSH
95038: CALL_OW 255
95042: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
95043: LD_ADDR_VAR 0 10
95047: PUSH
95048: LD_INT 29
95050: PUSH
95051: LD_INT 91
95053: PUSH
95054: LD_INT 49
95056: PUSH
95057: EMPTY
95058: LIST
95059: LIST
95060: LIST
95061: ST_TO_ADDR
// if not result then
95062: LD_VAR 0 3
95066: NOT
95067: IFFALSE 95071
// exit ;
95069: GO 95527
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
95071: LD_ADDR_VAR 0 5
95075: PUSH
95076: LD_INT 81
95078: PUSH
95079: LD_VAR 0 8
95083: PUSH
95084: EMPTY
95085: LIST
95086: LIST
95087: PPUSH
95088: CALL_OW 69
95092: ST_TO_ADDR
// for i in result do
95093: LD_ADDR_VAR 0 4
95097: PUSH
95098: LD_VAR 0 3
95102: PUSH
95103: FOR_IN
95104: IFFALSE 95525
// begin tag := GetTag ( i ) + 1 ;
95106: LD_ADDR_VAR 0 9
95110: PUSH
95111: LD_VAR 0 4
95115: PPUSH
95116: CALL_OW 110
95120: PUSH
95121: LD_INT 1
95123: PLUS
95124: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
95125: LD_ADDR_VAR 0 7
95129: PUSH
95130: LD_VAR 0 4
95134: PPUSH
95135: CALL_OW 250
95139: PPUSH
95140: LD_VAR 0 4
95144: PPUSH
95145: CALL_OW 251
95149: PPUSH
95150: LD_INT 6
95152: PPUSH
95153: CALL 94726 0 3
95157: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
95158: LD_VAR 0 4
95162: PPUSH
95163: CALL_OW 247
95167: PUSH
95168: LD_INT 2
95170: EQUAL
95171: PUSH
95172: LD_VAR 0 7
95176: AND
95177: PUSH
95178: LD_VAR 0 4
95182: PPUSH
95183: CALL_OW 264
95187: PUSH
95188: LD_VAR 0 10
95192: IN
95193: NOT
95194: AND
95195: IFFALSE 95234
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95197: LD_VAR 0 4
95201: PPUSH
95202: LD_VAR 0 7
95206: PUSH
95207: LD_INT 1
95209: ARRAY
95210: PUSH
95211: LD_INT 1
95213: ARRAY
95214: PPUSH
95215: LD_VAR 0 7
95219: PUSH
95220: LD_INT 1
95222: ARRAY
95223: PUSH
95224: LD_INT 2
95226: ARRAY
95227: PPUSH
95228: CALL_OW 116
95232: GO 95523
// if path > tag then
95234: LD_VAR 0 2
95238: PUSH
95239: LD_VAR 0 9
95243: GREATER
95244: IFFALSE 95452
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95246: LD_ADDR_VAR 0 6
95250: PUSH
95251: LD_VAR 0 5
95255: PPUSH
95256: LD_INT 91
95258: PUSH
95259: LD_VAR 0 4
95263: PUSH
95264: LD_INT 8
95266: PUSH
95267: EMPTY
95268: LIST
95269: LIST
95270: LIST
95271: PPUSH
95272: CALL_OW 72
95276: ST_TO_ADDR
// if nearEnemy then
95277: LD_VAR 0 6
95281: IFFALSE 95350
// begin if GetWeapon ( i ) = ru_time_lapser then
95283: LD_VAR 0 4
95287: PPUSH
95288: CALL_OW 264
95292: PUSH
95293: LD_INT 49
95295: EQUAL
95296: IFFALSE 95324
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95298: LD_VAR 0 4
95302: PPUSH
95303: LD_VAR 0 6
95307: PPUSH
95308: LD_VAR 0 4
95312: PPUSH
95313: CALL_OW 74
95317: PPUSH
95318: CALL_OW 112
95322: GO 95348
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95324: LD_VAR 0 4
95328: PPUSH
95329: LD_VAR 0 6
95333: PPUSH
95334: LD_VAR 0 4
95338: PPUSH
95339: CALL_OW 74
95343: PPUSH
95344: CALL 96452 0 2
// end else
95348: GO 95450
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95350: LD_VAR 0 4
95354: PPUSH
95355: LD_VAR 0 2
95359: PUSH
95360: LD_VAR 0 9
95364: ARRAY
95365: PUSH
95366: LD_INT 1
95368: ARRAY
95369: PPUSH
95370: LD_VAR 0 2
95374: PUSH
95375: LD_VAR 0 9
95379: ARRAY
95380: PUSH
95381: LD_INT 2
95383: ARRAY
95384: PPUSH
95385: CALL_OW 297
95389: PUSH
95390: LD_INT 6
95392: GREATER
95393: IFFALSE 95436
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95395: LD_VAR 0 4
95399: PPUSH
95400: LD_VAR 0 2
95404: PUSH
95405: LD_VAR 0 9
95409: ARRAY
95410: PUSH
95411: LD_INT 1
95413: ARRAY
95414: PPUSH
95415: LD_VAR 0 2
95419: PUSH
95420: LD_VAR 0 9
95424: ARRAY
95425: PUSH
95426: LD_INT 2
95428: ARRAY
95429: PPUSH
95430: CALL_OW 114
95434: GO 95450
// SetTag ( i , tag ) ;
95436: LD_VAR 0 4
95440: PPUSH
95441: LD_VAR 0 9
95445: PPUSH
95446: CALL_OW 109
// end else
95450: GO 95523
// if enemy then
95452: LD_VAR 0 5
95456: IFFALSE 95523
// begin if GetWeapon ( i ) = ru_time_lapser then
95458: LD_VAR 0 4
95462: PPUSH
95463: CALL_OW 264
95467: PUSH
95468: LD_INT 49
95470: EQUAL
95471: IFFALSE 95499
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95473: LD_VAR 0 4
95477: PPUSH
95478: LD_VAR 0 5
95482: PPUSH
95483: LD_VAR 0 4
95487: PPUSH
95488: CALL_OW 74
95492: PPUSH
95493: CALL_OW 112
95497: GO 95523
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
95499: LD_VAR 0 4
95503: PPUSH
95504: LD_VAR 0 5
95508: PPUSH
95509: LD_VAR 0 4
95513: PPUSH
95514: CALL_OW 74
95518: PPUSH
95519: CALL 96452 0 2
// end ; end ;
95523: GO 95103
95525: POP
95526: POP
// end ;
95527: LD_VAR 0 3
95531: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
95532: LD_INT 0
95534: PPUSH
95535: PPUSH
95536: PPUSH
// if not unit or IsInUnit ( unit ) then
95537: LD_VAR 0 1
95541: NOT
95542: PUSH
95543: LD_VAR 0 1
95547: PPUSH
95548: CALL_OW 310
95552: OR
95553: IFFALSE 95557
// exit ;
95555: GO 95648
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
95557: LD_ADDR_VAR 0 4
95561: PUSH
95562: LD_VAR 0 1
95566: PPUSH
95567: CALL_OW 250
95571: PPUSH
95572: LD_VAR 0 2
95576: PPUSH
95577: LD_INT 1
95579: PPUSH
95580: CALL_OW 272
95584: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
95585: LD_ADDR_VAR 0 5
95589: PUSH
95590: LD_VAR 0 1
95594: PPUSH
95595: CALL_OW 251
95599: PPUSH
95600: LD_VAR 0 2
95604: PPUSH
95605: LD_INT 1
95607: PPUSH
95608: CALL_OW 273
95612: ST_TO_ADDR
// if ValidHex ( x , y ) then
95613: LD_VAR 0 4
95617: PPUSH
95618: LD_VAR 0 5
95622: PPUSH
95623: CALL_OW 488
95627: IFFALSE 95648
// ComTurnXY ( unit , x , y ) ;
95629: LD_VAR 0 1
95633: PPUSH
95634: LD_VAR 0 4
95638: PPUSH
95639: LD_VAR 0 5
95643: PPUSH
95644: CALL_OW 118
// end ;
95648: LD_VAR 0 3
95652: RET
// export function SeeUnits ( side , units ) ; var i ; begin
95653: LD_INT 0
95655: PPUSH
95656: PPUSH
// result := false ;
95657: LD_ADDR_VAR 0 3
95661: PUSH
95662: LD_INT 0
95664: ST_TO_ADDR
// if not units then
95665: LD_VAR 0 2
95669: NOT
95670: IFFALSE 95674
// exit ;
95672: GO 95719
// for i in units do
95674: LD_ADDR_VAR 0 4
95678: PUSH
95679: LD_VAR 0 2
95683: PUSH
95684: FOR_IN
95685: IFFALSE 95717
// if See ( side , i ) then
95687: LD_VAR 0 1
95691: PPUSH
95692: LD_VAR 0 4
95696: PPUSH
95697: CALL_OW 292
95701: IFFALSE 95715
// begin result := true ;
95703: LD_ADDR_VAR 0 3
95707: PUSH
95708: LD_INT 1
95710: ST_TO_ADDR
// exit ;
95711: POP
95712: POP
95713: GO 95719
// end ;
95715: GO 95684
95717: POP
95718: POP
// end ;
95719: LD_VAR 0 3
95723: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
95724: LD_INT 0
95726: PPUSH
95727: PPUSH
95728: PPUSH
95729: PPUSH
// if not unit or not points then
95730: LD_VAR 0 1
95734: NOT
95735: PUSH
95736: LD_VAR 0 2
95740: NOT
95741: OR
95742: IFFALSE 95746
// exit ;
95744: GO 95836
// dist := 99999 ;
95746: LD_ADDR_VAR 0 5
95750: PUSH
95751: LD_INT 99999
95753: ST_TO_ADDR
// for i in points do
95754: LD_ADDR_VAR 0 4
95758: PUSH
95759: LD_VAR 0 2
95763: PUSH
95764: FOR_IN
95765: IFFALSE 95834
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
95767: LD_ADDR_VAR 0 6
95771: PUSH
95772: LD_VAR 0 1
95776: PPUSH
95777: LD_VAR 0 4
95781: PUSH
95782: LD_INT 1
95784: ARRAY
95785: PPUSH
95786: LD_VAR 0 4
95790: PUSH
95791: LD_INT 2
95793: ARRAY
95794: PPUSH
95795: CALL_OW 297
95799: ST_TO_ADDR
// if tmpDist < dist then
95800: LD_VAR 0 6
95804: PUSH
95805: LD_VAR 0 5
95809: LESS
95810: IFFALSE 95832
// begin result := i ;
95812: LD_ADDR_VAR 0 3
95816: PUSH
95817: LD_VAR 0 4
95821: ST_TO_ADDR
// dist := tmpDist ;
95822: LD_ADDR_VAR 0 5
95826: PUSH
95827: LD_VAR 0 6
95831: ST_TO_ADDR
// end ; end ;
95832: GO 95764
95834: POP
95835: POP
// end ;
95836: LD_VAR 0 3
95840: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
95841: LD_INT 0
95843: PPUSH
// uc_side := side ;
95844: LD_ADDR_OWVAR 20
95848: PUSH
95849: LD_VAR 0 1
95853: ST_TO_ADDR
// uc_nation := 3 ;
95854: LD_ADDR_OWVAR 21
95858: PUSH
95859: LD_INT 3
95861: ST_TO_ADDR
// vc_chassis := 25 ;
95862: LD_ADDR_OWVAR 37
95866: PUSH
95867: LD_INT 25
95869: ST_TO_ADDR
// vc_engine := engine_siberite ;
95870: LD_ADDR_OWVAR 39
95874: PUSH
95875: LD_INT 3
95877: ST_TO_ADDR
// vc_control := control_computer ;
95878: LD_ADDR_OWVAR 38
95882: PUSH
95883: LD_INT 3
95885: ST_TO_ADDR
// vc_weapon := 59 ;
95886: LD_ADDR_OWVAR 40
95890: PUSH
95891: LD_INT 59
95893: ST_TO_ADDR
// result := CreateVehicle ;
95894: LD_ADDR_VAR 0 5
95898: PUSH
95899: CALL_OW 45
95903: ST_TO_ADDR
// SetDir ( result , d ) ;
95904: LD_VAR 0 5
95908: PPUSH
95909: LD_VAR 0 4
95913: PPUSH
95914: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
95918: LD_VAR 0 5
95922: PPUSH
95923: LD_VAR 0 2
95927: PPUSH
95928: LD_VAR 0 3
95932: PPUSH
95933: LD_INT 0
95935: PPUSH
95936: CALL_OW 48
// end ;
95940: LD_VAR 0 5
95944: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
95945: LD_INT 0
95947: PPUSH
95948: PPUSH
95949: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
95950: LD_ADDR_VAR 0 2
95954: PUSH
95955: LD_INT 0
95957: PUSH
95958: LD_INT 0
95960: PUSH
95961: LD_INT 0
95963: PUSH
95964: LD_INT 0
95966: PUSH
95967: EMPTY
95968: LIST
95969: LIST
95970: LIST
95971: LIST
95972: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
95973: LD_VAR 0 1
95977: NOT
95978: PUSH
95979: LD_VAR 0 1
95983: PPUSH
95984: CALL_OW 264
95988: PUSH
95989: LD_INT 12
95991: PUSH
95992: LD_INT 51
95994: PUSH
95995: LD_INT 32
95997: PUSH
95998: LD_INT 89
96000: PUSH
96001: EMPTY
96002: LIST
96003: LIST
96004: LIST
96005: LIST
96006: IN
96007: NOT
96008: OR
96009: IFFALSE 96013
// exit ;
96011: GO 96111
// for i := 1 to 3 do
96013: LD_ADDR_VAR 0 3
96017: PUSH
96018: DOUBLE
96019: LD_INT 1
96021: DEC
96022: ST_TO_ADDR
96023: LD_INT 3
96025: PUSH
96026: FOR_TO
96027: IFFALSE 96109
// begin tmp := GetCargo ( cargo , i ) ;
96029: LD_ADDR_VAR 0 4
96033: PUSH
96034: LD_VAR 0 1
96038: PPUSH
96039: LD_VAR 0 3
96043: PPUSH
96044: CALL_OW 289
96048: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
96049: LD_ADDR_VAR 0 2
96053: PUSH
96054: LD_VAR 0 2
96058: PPUSH
96059: LD_VAR 0 3
96063: PPUSH
96064: LD_VAR 0 4
96068: PPUSH
96069: CALL_OW 1
96073: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
96074: LD_ADDR_VAR 0 2
96078: PUSH
96079: LD_VAR 0 2
96083: PPUSH
96084: LD_INT 4
96086: PPUSH
96087: LD_VAR 0 2
96091: PUSH
96092: LD_INT 4
96094: ARRAY
96095: PUSH
96096: LD_VAR 0 4
96100: PLUS
96101: PPUSH
96102: CALL_OW 1
96106: ST_TO_ADDR
// end ;
96107: GO 96026
96109: POP
96110: POP
// end ;
96111: LD_VAR 0 2
96115: RET
// export function Length ( array ) ; begin
96116: LD_INT 0
96118: PPUSH
// result := array + 0 ;
96119: LD_ADDR_VAR 0 2
96123: PUSH
96124: LD_VAR 0 1
96128: PUSH
96129: LD_INT 0
96131: PLUS
96132: ST_TO_ADDR
// end ;
96133: LD_VAR 0 2
96137: RET
// export function PrepareArray ( array ) ; begin
96138: LD_INT 0
96140: PPUSH
// result := array diff 0 ;
96141: LD_ADDR_VAR 0 2
96145: PUSH
96146: LD_VAR 0 1
96150: PUSH
96151: LD_INT 0
96153: DIFF
96154: ST_TO_ADDR
// if not result [ 1 ] then
96155: LD_VAR 0 2
96159: PUSH
96160: LD_INT 1
96162: ARRAY
96163: NOT
96164: IFFALSE 96184
// result := Delete ( result , 1 ) ;
96166: LD_ADDR_VAR 0 2
96170: PUSH
96171: LD_VAR 0 2
96175: PPUSH
96176: LD_INT 1
96178: PPUSH
96179: CALL_OW 3
96183: ST_TO_ADDR
// end ;
96184: LD_VAR 0 2
96188: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96189: LD_INT 0
96191: PPUSH
96192: PPUSH
96193: PPUSH
96194: PPUSH
// sibRocketRange := 25 ;
96195: LD_ADDR_VAR 0 6
96199: PUSH
96200: LD_INT 25
96202: ST_TO_ADDR
// result := false ;
96203: LD_ADDR_VAR 0 4
96207: PUSH
96208: LD_INT 0
96210: ST_TO_ADDR
// for i := 0 to 5 do
96211: LD_ADDR_VAR 0 5
96215: PUSH
96216: DOUBLE
96217: LD_INT 0
96219: DEC
96220: ST_TO_ADDR
96221: LD_INT 5
96223: PUSH
96224: FOR_TO
96225: IFFALSE 96292
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96227: LD_VAR 0 1
96231: PPUSH
96232: LD_VAR 0 5
96236: PPUSH
96237: LD_VAR 0 6
96241: PPUSH
96242: CALL_OW 272
96246: PPUSH
96247: LD_VAR 0 2
96251: PPUSH
96252: LD_VAR 0 5
96256: PPUSH
96257: LD_VAR 0 6
96261: PPUSH
96262: CALL_OW 273
96266: PPUSH
96267: LD_VAR 0 3
96271: PPUSH
96272: CALL_OW 309
96276: IFFALSE 96290
// begin result := true ;
96278: LD_ADDR_VAR 0 4
96282: PUSH
96283: LD_INT 1
96285: ST_TO_ADDR
// exit ;
96286: POP
96287: POP
96288: GO 96294
// end ;
96290: GO 96224
96292: POP
96293: POP
// end ;
96294: LD_VAR 0 4
96298: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
96299: LD_INT 0
96301: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
96302: LD_VAR 0 1
96306: PPUSH
96307: LD_VAR 0 2
96311: PPUSH
96312: LD_INT 0
96314: PPUSH
96315: LD_INT 0
96317: PPUSH
96318: LD_INT 1
96320: PPUSH
96321: LD_INT 0
96323: PPUSH
96324: CALL_OW 587
// end ;
96328: LD_VAR 0 3
96332: RET
// export function CenterOnNow ( unit ) ; begin
96333: LD_INT 0
96335: PPUSH
// result := IsInUnit ( unit ) ;
96336: LD_ADDR_VAR 0 2
96340: PUSH
96341: LD_VAR 0 1
96345: PPUSH
96346: CALL_OW 310
96350: ST_TO_ADDR
// if not result then
96351: LD_VAR 0 2
96355: NOT
96356: IFFALSE 96368
// result := unit ;
96358: LD_ADDR_VAR 0 2
96362: PUSH
96363: LD_VAR 0 1
96367: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
96368: LD_VAR 0 1
96372: PPUSH
96373: CALL_OW 87
// end ;
96377: LD_VAR 0 2
96381: RET
// export function ComMoveHex ( unit , hex ) ; begin
96382: LD_INT 0
96384: PPUSH
// if not hex then
96385: LD_VAR 0 2
96389: NOT
96390: IFFALSE 96394
// exit ;
96392: GO 96447
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
96394: LD_VAR 0 2
96398: PUSH
96399: LD_INT 1
96401: ARRAY
96402: PPUSH
96403: LD_VAR 0 2
96407: PUSH
96408: LD_INT 2
96410: ARRAY
96411: PPUSH
96412: CALL_OW 428
96416: IFFALSE 96420
// exit ;
96418: GO 96447
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
96420: LD_VAR 0 1
96424: PPUSH
96425: LD_VAR 0 2
96429: PUSH
96430: LD_INT 1
96432: ARRAY
96433: PPUSH
96434: LD_VAR 0 2
96438: PUSH
96439: LD_INT 2
96441: ARRAY
96442: PPUSH
96443: CALL_OW 111
// end ;
96447: LD_VAR 0 3
96451: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
96452: LD_INT 0
96454: PPUSH
96455: PPUSH
96456: PPUSH
// if not unit or not enemy then
96457: LD_VAR 0 1
96461: NOT
96462: PUSH
96463: LD_VAR 0 2
96467: NOT
96468: OR
96469: IFFALSE 96473
// exit ;
96471: GO 96597
// x := GetX ( enemy ) ;
96473: LD_ADDR_VAR 0 4
96477: PUSH
96478: LD_VAR 0 2
96482: PPUSH
96483: CALL_OW 250
96487: ST_TO_ADDR
// y := GetY ( enemy ) ;
96488: LD_ADDR_VAR 0 5
96492: PUSH
96493: LD_VAR 0 2
96497: PPUSH
96498: CALL_OW 251
96502: ST_TO_ADDR
// if ValidHex ( x , y ) then
96503: LD_VAR 0 4
96507: PPUSH
96508: LD_VAR 0 5
96512: PPUSH
96513: CALL_OW 488
96517: IFFALSE 96597
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
96519: LD_VAR 0 2
96523: PPUSH
96524: CALL_OW 247
96528: PUSH
96529: LD_INT 3
96531: PUSH
96532: LD_INT 2
96534: PUSH
96535: EMPTY
96536: LIST
96537: LIST
96538: IN
96539: PUSH
96540: LD_VAR 0 1
96544: PPUSH
96545: CALL_OW 255
96549: PPUSH
96550: LD_VAR 0 2
96554: PPUSH
96555: CALL_OW 292
96559: AND
96560: IFFALSE 96578
// ComAttackUnit ( unit , enemy ) else
96562: LD_VAR 0 1
96566: PPUSH
96567: LD_VAR 0 2
96571: PPUSH
96572: CALL_OW 115
96576: GO 96597
// ComAgressiveMove ( unit , x , y ) ;
96578: LD_VAR 0 1
96582: PPUSH
96583: LD_VAR 0 4
96587: PPUSH
96588: LD_VAR 0 5
96592: PPUSH
96593: CALL_OW 114
// end ;
96597: LD_VAR 0 3
96601: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
96602: LD_INT 0
96604: PPUSH
96605: PPUSH
96606: PPUSH
// list := AreaToList ( area , 0 ) ;
96607: LD_ADDR_VAR 0 5
96611: PUSH
96612: LD_VAR 0 1
96616: PPUSH
96617: LD_INT 0
96619: PPUSH
96620: CALL_OW 517
96624: ST_TO_ADDR
// if not list then
96625: LD_VAR 0 5
96629: NOT
96630: IFFALSE 96634
// exit ;
96632: GO 96764
// if all then
96634: LD_VAR 0 2
96638: IFFALSE 96726
// begin for i := 1 to list [ 1 ] do
96640: LD_ADDR_VAR 0 4
96644: PUSH
96645: DOUBLE
96646: LD_INT 1
96648: DEC
96649: ST_TO_ADDR
96650: LD_VAR 0 5
96654: PUSH
96655: LD_INT 1
96657: ARRAY
96658: PUSH
96659: FOR_TO
96660: IFFALSE 96722
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
96662: LD_ADDR_VAR 0 3
96666: PUSH
96667: LD_VAR 0 3
96671: PPUSH
96672: LD_VAR 0 3
96676: PUSH
96677: LD_INT 1
96679: PLUS
96680: PPUSH
96681: LD_VAR 0 5
96685: PUSH
96686: LD_INT 1
96688: ARRAY
96689: PUSH
96690: LD_VAR 0 4
96694: ARRAY
96695: PUSH
96696: LD_VAR 0 5
96700: PUSH
96701: LD_INT 2
96703: ARRAY
96704: PUSH
96705: LD_VAR 0 4
96709: ARRAY
96710: PUSH
96711: EMPTY
96712: LIST
96713: LIST
96714: PPUSH
96715: CALL_OW 1
96719: ST_TO_ADDR
96720: GO 96659
96722: POP
96723: POP
// exit ;
96724: GO 96764
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
96726: LD_ADDR_VAR 0 3
96730: PUSH
96731: LD_VAR 0 5
96735: PUSH
96736: LD_INT 1
96738: ARRAY
96739: PUSH
96740: LD_INT 1
96742: ARRAY
96743: PUSH
96744: LD_VAR 0 5
96748: PUSH
96749: LD_INT 2
96751: ARRAY
96752: PUSH
96753: LD_INT 1
96755: ARRAY
96756: PUSH
96757: EMPTY
96758: LIST
96759: LIST
96760: PUSH
96761: EMPTY
96762: LIST
96763: ST_TO_ADDR
// end ;
96764: LD_VAR 0 3
96768: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
96769: LD_INT 0
96771: PPUSH
96772: PPUSH
// list := AreaToList ( area , 0 ) ;
96773: LD_ADDR_VAR 0 4
96777: PUSH
96778: LD_VAR 0 1
96782: PPUSH
96783: LD_INT 0
96785: PPUSH
96786: CALL_OW 517
96790: ST_TO_ADDR
// if not list then
96791: LD_VAR 0 4
96795: NOT
96796: IFFALSE 96800
// exit ;
96798: GO 96841
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
96800: LD_ADDR_VAR 0 3
96804: PUSH
96805: LD_VAR 0 4
96809: PUSH
96810: LD_INT 1
96812: ARRAY
96813: PUSH
96814: LD_INT 1
96816: ARRAY
96817: PUSH
96818: LD_VAR 0 4
96822: PUSH
96823: LD_INT 2
96825: ARRAY
96826: PUSH
96827: LD_INT 1
96829: ARRAY
96830: PUSH
96831: LD_VAR 0 2
96835: PUSH
96836: EMPTY
96837: LIST
96838: LIST
96839: LIST
96840: ST_TO_ADDR
// end ;
96841: LD_VAR 0 3
96845: RET
// export function First ( array ) ; begin
96846: LD_INT 0
96848: PPUSH
// if not array then
96849: LD_VAR 0 1
96853: NOT
96854: IFFALSE 96858
// exit ;
96856: GO 96872
// result := array [ 1 ] ;
96858: LD_ADDR_VAR 0 2
96862: PUSH
96863: LD_VAR 0 1
96867: PUSH
96868: LD_INT 1
96870: ARRAY
96871: ST_TO_ADDR
// end ;
96872: LD_VAR 0 2
96876: RET
// export function Last ( array ) ; begin
96877: LD_INT 0
96879: PPUSH
// if not array then
96880: LD_VAR 0 1
96884: NOT
96885: IFFALSE 96889
// exit ;
96887: GO 96905
// result := array [ array ] ;
96889: LD_ADDR_VAR 0 2
96893: PUSH
96894: LD_VAR 0 1
96898: PUSH
96899: LD_VAR 0 1
96903: ARRAY
96904: ST_TO_ADDR
// end ; end_of_file
96905: LD_VAR 0 2
96909: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
96910: LD_VAR 0 1
96914: PUSH
96915: LD_INT 200
96917: DOUBLE
96918: GREATEREQUAL
96919: IFFALSE 96927
96921: LD_INT 299
96923: DOUBLE
96924: LESSEQUAL
96925: IFTRUE 96929
96927: GO 96961
96929: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
96930: LD_VAR 0 1
96934: PPUSH
96935: LD_VAR 0 2
96939: PPUSH
96940: LD_VAR 0 3
96944: PPUSH
96945: LD_VAR 0 4
96949: PPUSH
96950: LD_VAR 0 5
96954: PPUSH
96955: CALL 50160 0 5
96959: GO 97038
96961: LD_INT 300
96963: DOUBLE
96964: GREATEREQUAL
96965: IFFALSE 96973
96967: LD_INT 399
96969: DOUBLE
96970: LESSEQUAL
96971: IFTRUE 96975
96973: GO 97037
96975: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
96976: LD_VAR 0 1
96980: PPUSH
96981: LD_VAR 0 2
96985: PPUSH
96986: LD_VAR 0 3
96990: PPUSH
96991: LD_VAR 0 4
96995: PPUSH
96996: LD_VAR 0 5
97000: PPUSH
97001: LD_VAR 0 6
97005: PPUSH
97006: LD_VAR 0 7
97010: PPUSH
97011: LD_VAR 0 8
97015: PPUSH
97016: LD_VAR 0 9
97020: PPUSH
97021: LD_VAR 0 10
97025: PPUSH
97026: LD_VAR 0 11
97030: PPUSH
97031: CALL 46485 0 11
97035: GO 97038
97037: POP
// end ;
97038: PPOPN 11
97040: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
97041: LD_VAR 0 1
97045: PPUSH
97046: LD_VAR 0 2
97050: PPUSH
97051: LD_VAR 0 3
97055: PPUSH
97056: LD_VAR 0 4
97060: PPUSH
97061: LD_VAR 0 5
97065: PPUSH
97066: CALL 49896 0 5
// end ; end_of_file
97070: PPOPN 5
97072: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
97073: LD_VAR 0 1
97077: PPUSH
97078: LD_VAR 0 2
97082: PPUSH
97083: LD_VAR 0 3
97087: PPUSH
97088: LD_VAR 0 4
97092: PPUSH
97093: LD_VAR 0 5
97097: PPUSH
97098: LD_VAR 0 6
97102: PPUSH
97103: CALL 34137 0 6
// end ;
97107: PPOPN 6
97109: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
97110: LD_INT 0
97112: PPUSH
// begin if not units then
97113: LD_VAR 0 1
97117: NOT
97118: IFFALSE 97122
// exit ;
97120: GO 97122
// end ;
97122: PPOPN 7
97124: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
97125: CALL 34041 0 0
// end ;
97129: PPOPN 1
97131: END
