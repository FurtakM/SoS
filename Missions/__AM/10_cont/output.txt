// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8706 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 89685 0 9
// Action ;
  97: CALL 25319 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 55213 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 55213 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 55213 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 55213 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 55213 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 55213 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 55213 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 55213 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 55213 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 55213 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 57399 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 57399 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 57399 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 57399 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 93008 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 93045 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 93045 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 57399 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 60137 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 93008 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 60137 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 93008 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 57399 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 60137 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 93008 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 55213 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 55213 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 55213 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 55213 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 55213 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 55213 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 55213 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 55213 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 55213 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 55213 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 55213 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 55213 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 57399 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 57399 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 55213 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 93008 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 93008 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 93008 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 57399 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 57399 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 57399 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 57399 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 88275 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 57399 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 57399 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// AddComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 94369 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 93008 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 60137 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 5
7591: PPUSH
7592: CALL 93008 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 60137 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 5
7766: PPUSH
7767: CALL 93008 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 60137 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 5
7972: PPUSH
7973: CALL 93008 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8415: LD_EXP 58
8419: IFFALSE 8703
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
8428: PPUSH
// begin p := 0 ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_EXP 58
8453: PPUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: ST_TO_ADDR
// for i in tmp do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8513
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 143
8485: PUSH
8486: LD_INT 38
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 111
8495: PUSH
8496: LD_INT 31
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL 95618 0 2
8511: GO 8475
8513: POP
8514: POP
// if IsDead ( Dietrich ) then
8515: LD_EXP 50
8519: PPUSH
8520: CALL_OW 301
8524: IFFALSE 8541
// p := Inc ( p ) ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 94369 0 1
8540: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8541: LD_VAR 0 2
8545: NOT
8546: PUSH
8547: LD_EXP 13
8551: OR
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 40
8560: GREATER
8561: OR
8562: IFFALSE 8437
// if not arAttackersVeh then
8564: LD_EXP 58
8568: NOT
8569: IFFALSE 8573
// exit ;
8571: GO 8703
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 58
8589: PPUSH
8590: LD_INT 50
8592: PUSH
8593: EMPTY
8594: LIST
8595: PPUSH
8596: CALL_OW 72
8600: ST_TO_ADDR
// for i in tmp do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_VAR 0 2
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8694
// if IsInArea ( i , arAttackSpawnArea ) then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 18
8621: PPUSH
8622: CALL_OW 308
8626: IFFALSE 8680
// begin if IsInUnit ( i ) then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 310
8637: IFFALSE 8653
// RemoveUnit ( IsInUnit ( i ) ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 310
8648: PPUSH
8649: CALL_OW 64
// RemoveUnit ( i ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8662: LD_ADDR_EXP 58
8666: PUSH
8667: LD_EXP 58
8671: PUSH
8672: LD_VAR 0 1
8676: DIFF
8677: ST_TO_ADDR
// end else
8678: GO 8692
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 18
8687: PPUSH
8688: CALL_OW 113
8692: GO 8611
8694: POP
8695: POP
// until not tmp ;
8696: LD_VAR 0 2
8700: NOT
8701: IFFALSE 8573
// end ; end_of_file
8703: PPOPN 3
8705: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// uc_side := 3 ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_INT 3
8721: ST_TO_ADDR
// uc_nation := nation_russian ;
8722: LD_ADDR_OWVAR 21
8726: PUSH
8727: LD_INT 3
8729: ST_TO_ADDR
// ruForces := [ ] ;
8730: LD_ADDR_EXP 59
8734: PUSH
8735: EMPTY
8736: ST_TO_ADDR
// ruForces2 := [ ] ;
8737: LD_ADDR_EXP 60
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// ruMech := [ ] ;
8744: LD_ADDR_EXP 63
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// ruMech2 := [ ] ;
8751: LD_ADDR_EXP 64
8755: PUSH
8756: EMPTY
8757: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8758: LD_ADDR_EXP 65
8762: PUSH
8763: LD_INT 37
8765: PUSH
8766: LD_INT 63
8768: PUSH
8769: LD_INT 52
8771: PUSH
8772: LD_INT 54
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// ruBaseArea := 0 ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8789: LD_ADDR_EXP 67
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// ruBase := 0 ;
8797: LD_ADDR_EXP 68
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// ruBase2 := 0 ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// ruConstructList := [ ] ;
8813: LD_ADDR_EXP 70
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: LD_INT 43
8877: PUSH
8878: LD_INT 44
8880: PUSH
8881: LD_INT 45
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 43
8918: PUSH
8919: LD_INT 44
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// ruCratesArea := 0 ;
8953: LD_ADDR_EXP 72
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8961: LD_ADDR_EXP 73
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// ruHealPoint := [ ] ;
8969: LD_ADDR_EXP 74
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8976: LD_ADDR_EXP 75
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// ruBuildings := [ ] ;
8983: LD_ADDR_EXP 76
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8990: LD_ADDR_EXP 77
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// ruTanks := [ ] ;
8997: LD_ADDR_EXP 79
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// ruTanks2 := [ ] ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// ruParkingArea := 0 ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9019: LD_ADDR_EXP 83
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 4
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: ARRAY
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9122
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9064: LD_ADDR_EXP 70
9068: PUSH
9069: LD_EXP 70
9073: PPUSH
9074: LD_INT 22
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 43
9085: PUSH
9086: LD_INT 44
9088: PUSH
9089: LD_INT 45
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 3
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL 93008 0 2
9119: ST_TO_ADDR
9120: GO 9061
9122: POP
9123: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_INT 43
9131: PUSH
9132: LD_INT 68
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: LD_INT 79
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 99
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 114
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 152
9181: PUSH
9182: LD_INT 85
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
// for i in sources do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9237
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: LD_VAR 0 2
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 441
9235: GO 9207
9237: POP
9238: POP
// if Difficulty > 2 then
9239: LD_OWVAR 67
9243: PUSH
9244: LD_INT 2
9246: GREATER
9247: IFFALSE 9275
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9249: LD_INT 52
9251: PPUSH
9252: LD_INT 6
9254: PPUSH
9255: LD_INT 2
9257: PPUSH
9258: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9262: LD_INT 58
9264: PPUSH
9265: LD_INT 6
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: LD_OWVAR 67
9302: ARRAY
9303: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9304: LD_ADDR_EXP 61
9308: PUSH
9309: LD_STRING Tsaritsyn
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: LD_STRING 
9317: PPUSH
9318: CALL 55213 0 3
9322: ST_TO_ADDR
// for i := 1 to 4 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 4
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9555
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 5
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: LD_INT 8
9357: PUSH
9358: LD_INT 9
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_OWVAR 67
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_OWVAR 67
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9551
// begin PrepareHuman ( false , i , skill ) ;
9460: LD_INT 0
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: CALL_OW 380
// un := CreateHuman ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9487: LD_ADDR_EXP 59
9491: PUSH
9492: LD_EXP 59
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL 93008 0 2
9506: ST_TO_ADDR
// if i = 3 then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 3
9514: EQUAL
9515: IFFALSE 9549
// begin ruMech := Join ( ruMech , un ) ;
9517: LD_ADDR_EXP 63
9521: PUSH
9522: LD_EXP 63
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL 93008 0 2
9536: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 336
// end ; end ;
9549: GO 9457
9551: POP
9552: POP
9553: GO 9336
9555: POP
9556: POP
// if Difficulty < 4 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 4
9564: LESS
9565: IFFALSE 9569
// exit ;
9567: GO 9841
// PrepareSoldier ( sex_male , skill + 1 ) ;
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: PPUSH
9581: CALL_OW 381
// hc_importance := 100 ;
9585: LD_ADDR_OWVAR 32
9589: PUSH
9590: LD_INT 100
9592: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9593: LD_ADDR_EXP 62
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// InitHc_All ( ) ;
9603: CALL_OW 584
// for i := 1 to 4 do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 4
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9839
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: DOUBLE
9629: LD_INT 1
9631: DEC
9632: ST_TO_ADDR
9633: LD_INT 5
9635: PUSH
9636: LD_INT 6
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: LD_INT 9
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_OWVAR 67
9655: ARRAY
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: LD_OWVAR 67
9679: ARRAY
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 6
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_OWVAR 67
9703: ARRAY
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_VAR 0 2
9739: ARRAY
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9835
// begin PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9771: LD_ADDR_EXP 60
9775: PUSH
9776: LD_EXP 60
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL 93008 0 2
9790: ST_TO_ADDR
// if i = 3 then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_INT 3
9798: EQUAL
9799: IFFALSE 9833
// begin ruMech2 := Join ( ruMech2 , un ) ;
9801: LD_ADDR_EXP 64
9805: PUSH
9806: LD_EXP 64
9810: PPUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL 93008 0 2
9820: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9821: LD_VAR 0 4
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 336
// end ; end ;
9833: GO 9741
9835: POP
9836: POP
9837: GO 9620
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 1
9845: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9846: LD_EXP 66
9850: PPUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 50
9863: PUSH
9864: EMPTY
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 70
9875: PUSH
9876: LD_EXP 76
9880: PPUSH
9881: CALL 57399 0 1
9885: PUSH
9886: LD_INT 3
9888: LESS
9889: AND
9890: IFFALSE 10154
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
// begin enable ;
9898: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9899: LD_ADDR_EXP 70
9903: PUSH
9904: LD_EXP 70
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 44
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 2
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_OWVAR 67
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 45
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_OWVAR 67
10028: ARRAY
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 45
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
// for i := Difficulty downto 1 do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_OWVAR 67
10061: INC
10062: ST_TO_ADDR
10063: LD_INT 1
10065: PUSH
10066: FOR_DOWNTO
10067: IFFALSE 10152
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10069: LD_ADDR_EXP 70
10073: PUSH
10074: LD_EXP 70
10078: PPUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_OWVAR 67
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: LD_INT 44
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 45
10117: PUSH
10118: LD_INT 43
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: CALL_OW 12
10137: ARRAY
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL 93008 0 2
10149: ST_TO_ADDR
10150: GO 10066
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10157: LD_EXP 67
10161: PPUSH
10162: LD_INT 30
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 70
10186: PUSH
10187: LD_EXP 77
10191: PPUSH
10192: CALL 57399 0 1
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: AND
10201: IFFALSE 10396
10203: GO 10205
10205: DISABLE
// begin enable ;
10206: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10207: LD_ADDR_EXP 71
10211: PUSH
10212: LD_EXP 71
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 4
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: LD_INT 44
10255: PUSH
10256: LD_INT 45
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 45
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 43
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ADD
10395: ST_TO_ADDR
// end ;
10396: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
// case Difficulty of 1 :
10407: LD_OWVAR 67
10411: PUSH
10412: LD_INT 1
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10439
10420: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10421: LD_ADDR_VAR 0 4
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 2
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
10437: GO 10513
10439: LD_INT 2
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10466
10447: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10448: LD_ADDR_VAR 0 4
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 12
10463: ST_TO_ADDR
10464: GO 10513
10466: LD_INT 3
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10493
10474: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: CALL_OW 12
10490: ST_TO_ADDR
10491: GO 10513
10493: LD_INT 4
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10512
10501: POP
// spawn := 3 ; end ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_INT 3
10509: ST_TO_ADDR
10510: GO 10513
10512: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 4
10536: ARRAY
10537: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10538: LD_ADDR_VAR 0 5
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 22
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_INT 96
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 54
10580: PUSH
10581: LD_INT 85
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 146
10590: PUSH
10591: LD_INT 67
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_VAR 0 4
10607: ARRAY
10608: ST_TO_ADDR
// for i in ruForces union ruCommander do
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_EXP 59
10618: PUSH
10619: LD_EXP 61
10623: UNION
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10681
// begin PlaceUnitArea ( i , area , false ) ;
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 5
10637: PPUSH
10638: LD_INT 0
10640: PPUSH
10641: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10645: LD_VAR 0 2
10649: PPUSH
10650: LD_VAR 0 8
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 8
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10672: LD_INT 14
10674: PPUSH
10675: CALL_OW 67
// end ;
10679: GO 10625
10681: POP
10682: POP
// DRussianConvoy ;
10683: CALL 28498 0 0
// spawnedRussians := true ;
10687: LD_ADDR_EXP 19
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 6
10702: PPUSH
10703: CALL_OW 332
// case spawn of 1 :
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10730
10720: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10721: LD_INT 102
10723: PPUSH
10724: CALL_OW 427
10728: GO 10767
10730: LD_INT 2
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10748
10738: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10739: LD_INT 103
10741: PPUSH
10742: CALL_OW 427
10746: GO 10767
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10766
10756: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10757: LD_INT 104
10759: PPUSH
10760: CALL_OW 427
10764: GO 10767
10766: POP
// if Difficulty < 4 then
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 4
10774: LESS
10775: IFFALSE 10779
// exit ;
10777: GO 10856
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10779: LD_INT 1
10781: PPUSH
10782: LD_INT 22
10784: PPUSH
10785: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_EXP 60
10798: PUSH
10799: LD_EXP 62
10803: UNION
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10847
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 22
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 54
10830: PPUSH
10831: LD_INT 85
10833: PPUSH
10834: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10838: LD_INT 28
10840: PPUSH
10841: CALL_OW 67
// end ;
10845: GO 10805
10847: POP
10848: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10849: LD_INT 105
10851: PPUSH
10852: CALL_OW 427
// end ;
10856: LD_VAR 0 1
10860: RET
// export function RussianBase ( group , option ) ; begin
10861: LD_INT 0
10863: PPUSH
// case option of 1 :
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 1
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 11333
10877: POP
// begin ruBaseArea := ruBaseCenterArea ;
10878: LD_ADDR_EXP 66
10882: PUSH
10883: LD_INT 26
10885: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10886: LD_ADDR_EXP 72
10890: PUSH
10891: LD_INT 26
10893: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 98
10922: PUSH
10923: LD_INT 90
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 29
10937: PUSH
10938: LD_INT 103
10940: PUSH
10941: LD_INT 114
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 30
10955: PUSH
10956: LD_INT 99
10958: PUSH
10959: LD_INT 114
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_INT 112
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 92
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 26
11009: PUSH
11010: LD_INT 97
11012: PUSH
11013: LD_INT 116
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 96
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 18
11045: PUSH
11046: LD_INT 88
11048: PUSH
11049: LD_INT 97
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 92
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 6
11081: PUSH
11082: LD_INT 93
11084: PUSH
11085: LD_INT 110
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 89
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 95
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 24
11135: PUSH
11136: LD_INT 92
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 88
11156: PUSH
11157: LD_INT 89
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 33
11171: PUSH
11172: LD_INT 86
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 85
11192: PUSH
11193: LD_INT 99
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 85
11210: PUSH
11211: LD_INT 107
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 99
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 92
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 33
11261: PUSH
11262: LD_INT 105
11264: PUSH
11265: LD_INT 92
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11300: LD_ADDR_EXP 74
11304: PUSH
11305: LD_INT 98
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11315: LD_ADDR_EXP 82
11319: PUSH
11320: LD_INT 30
11322: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11323: LD_ADDR_EXP 84
11327: PUSH
11328: LD_INT 36
11330: ST_TO_ADDR
// end ; 2 :
11331: GO 12357
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11835
11341: POP
// begin ruBaseArea := ruBaseWestArea ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 28
11349: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11350: LD_ADDR_EXP 72
11354: PUSH
11355: LD_INT 28
11357: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11358: LD_ADDR_EXP 76
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 49
11368: PUSH
11369: LD_INT 74
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 73
11386: PUSH
11387: LD_INT 88
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: LD_INT 56
11404: PUSH
11405: LD_INT 62
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 29
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 68
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 43
11440: PUSH
11441: LD_INT 79
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 60
11458: PUSH
11459: LD_INT 75
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: LD_INT 87
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 45
11494: PUSH
11495: LD_INT 67
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 17
11509: PUSH
11510: LD_INT 47
11512: PUSH
11513: LD_INT 84
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 18
11527: PUSH
11528: LD_INT 46
11530: PUSH
11531: LD_INT 87
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 26
11545: PUSH
11546: LD_INT 41
11548: PUSH
11549: LD_INT 64
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 42
11566: PUSH
11567: LD_INT 74
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 54
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 83
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 50
11620: PUSH
11621: LD_INT 90
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 51
11638: PUSH
11639: LD_INT 61
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 42
11656: PUSH
11657: LD_INT 60
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 39
11692: PUSH
11693: LD_INT 59
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 61
11710: PUSH
11711: LD_INT 64
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 63
11728: PUSH
11729: LD_INT 90
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 64
11746: PUSH
11747: LD_INT 88
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 72
11764: PUSH
11765: LD_INT 82
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11802: LD_ADDR_EXP 74
11806: PUSH
11807: LD_INT 45
11809: PUSH
11810: LD_INT 75
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11817: LD_ADDR_EXP 82
11821: PUSH
11822: LD_INT 31
11824: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 37
11832: ST_TO_ADDR
// end ; 3 :
11833: GO 12357
11835: LD_INT 3
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12356
11843: POP
// begin ruBaseArea := ruBaseEastArea ;
11844: LD_ADDR_EXP 66
11848: PUSH
11849: LD_INT 27
11851: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11852: LD_ADDR_EXP 72
11856: PUSH
11857: LD_INT 27
11859: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11860: LD_ADDR_EXP 76
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 152
11870: PUSH
11871: LD_INT 72
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 139
11888: PUSH
11889: LD_INT 69
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 142
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 157
11960: PUSH
11961: LD_INT 96
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 161
11978: PUSH
11979: LD_INT 74
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 157
11996: PUSH
11997: LD_INT 74
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 16
12011: PUSH
12012: LD_INT 161
12014: PUSH
12015: LD_INT 77
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 165
12032: PUSH
12033: LD_INT 78
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 17
12047: PUSH
12048: LD_INT 164
12050: PUSH
12051: LD_INT 74
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 164
12068: PUSH
12069: LD_INT 95
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 70
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 155
12104: PUSH
12105: LD_INT 87
12107: PUSH
12108: LD_INT 0
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 159
12122: PUSH
12123: LD_INT 95
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: LD_INT 167
12140: PUSH
12141: LD_INT 98
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 33
12155: PUSH
12156: LD_INT 152
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: LD_INT 134
12176: PUSH
12177: LD_INT 61
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 156
12194: PUSH
12195: LD_INT 62
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 171
12212: PUSH
12213: LD_INT 97
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 169
12230: PUSH
12231: LD_INT 103
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 158
12248: PUSH
12249: LD_INT 65
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 144
12266: PUSH
12267: LD_INT 53
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 150
12284: PUSH
12285: LD_INT 81
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12323: LD_ADDR_EXP 74
12327: PUSH
12328: LD_INT 145
12330: PUSH
12331: LD_INT 71
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12338: LD_ADDR_EXP 82
12342: PUSH
12343: LD_INT 29
12345: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 35
12353: ST_TO_ADDR
// end ; end ;
12354: GO 12357
12356: POP
// ruScriptActive := true ;
12357: LD_ADDR_EXP 14
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// end ;
12365: LD_VAR 0 3
12369: RET
// export function RussianBase2 ( group , option ) ; begin
12370: LD_INT 0
12372: PPUSH
// case option of 1 :
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12842
12386: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12387: LD_ADDR_EXP 67
12391: PUSH
12392: LD_INT 26
12394: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12395: LD_ADDR_EXP 73
12399: PUSH
12400: LD_INT 26
12402: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12403: LD_ADDR_EXP 77
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 104
12413: PUSH
12414: LD_INT 110
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 98
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 29
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 114
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 99
12467: PUSH
12468: LD_INT 114
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 100
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 92
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 97
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 96
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 18
12554: PUSH
12555: LD_INT 88
12557: PUSH
12558: LD_INT 97
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 106
12575: PUSH
12576: LD_INT 92
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 6
12590: PUSH
12591: LD_INT 93
12593: PUSH
12594: LD_INT 110
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 89
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 16
12626: PUSH
12627: LD_INT 95
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 92
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 33
12662: PUSH
12663: LD_INT 88
12665: PUSH
12666: LD_INT 89
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 33
12680: PUSH
12681: LD_INT 86
12683: PUSH
12684: LD_INT 90
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 33
12698: PUSH
12699: LD_INT 85
12701: PUSH
12702: LD_INT 99
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 85
12719: PUSH
12720: LD_INT 107
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 33
12734: PUSH
12735: LD_INT 105
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 33
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 92
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 105
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 98
12816: PUSH
12817: LD_INT 107
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12824: LD_ADDR_EXP 83
12828: PUSH
12829: LD_INT 30
12831: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12832: LD_ADDR_EXP 85
12836: PUSH
12837: LD_INT 36
12839: ST_TO_ADDR
// end ; 2 :
12840: GO 13809
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 13344
12850: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12851: LD_ADDR_EXP 67
12855: PUSH
12856: LD_INT 28
12858: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12859: LD_ADDR_EXP 73
12863: PUSH
12864: LD_INT 28
12866: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 0
12874: PUSH
12875: LD_INT 49
12877: PUSH
12878: LD_INT 74
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 73
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 56
12913: PUSH
12914: LD_INT 62
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 43
12931: PUSH
12932: LD_INT 68
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 43
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 60
12967: PUSH
12968: LD_INT 75
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 87
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 26
13000: PUSH
13001: LD_INT 45
13003: PUSH
13004: LD_INT 67
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 47
13021: PUSH
13022: LD_INT 84
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 87
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 41
13057: PUSH
13058: LD_INT 64
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 42
13075: PUSH
13076: LD_INT 74
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 91
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 83
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 24
13126: PUSH
13127: LD_INT 50
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 51
13147: PUSH
13148: LD_INT 61
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 42
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: LD_INT 58
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 39
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 33
13216: PUSH
13217: LD_INT 61
13219: PUSH
13220: LD_INT 64
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 63
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 5
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 33
13252: PUSH
13253: LD_INT 64
13255: PUSH
13256: LD_INT 88
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 72
13273: PUSH
13274: LD_INT 82
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13311: LD_ADDR_EXP 74
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: LD_INT 75
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13326: LD_ADDR_EXP 83
13330: PUSH
13331: LD_INT 31
13333: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13334: LD_ADDR_EXP 85
13338: PUSH
13339: LD_INT 37
13341: ST_TO_ADDR
// end ; 3 :
13342: GO 13809
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13808
13352: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13353: LD_ADDR_EXP 67
13357: PUSH
13358: LD_INT 27
13360: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13361: LD_ADDR_EXP 73
13365: PUSH
13366: LD_INT 27
13368: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13369: LD_ADDR_EXP 77
13373: PUSH
13374: LD_INT 0
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 72
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 139
13397: PUSH
13398: LD_INT 69
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 142
13415: PUSH
13416: LD_INT 56
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 29
13430: PUSH
13431: LD_INT 152
13433: PUSH
13434: LD_INT 85
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 156
13451: PUSH
13452: LD_INT 92
13454: PUSH
13455: LD_INT 3
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 157
13469: PUSH
13470: LD_INT 96
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 161
13487: PUSH
13488: LD_INT 74
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 157
13505: PUSH
13506: LD_INT 74
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 161
13523: PUSH
13524: LD_INT 77
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 24
13538: PUSH
13539: LD_INT 165
13541: PUSH
13542: LD_INT 78
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 164
13559: PUSH
13560: LD_INT 74
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 6
13574: PUSH
13575: LD_INT 164
13577: PUSH
13578: LD_INT 95
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 161
13595: PUSH
13596: LD_INT 70
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 155
13613: PUSH
13614: LD_INT 87
13616: PUSH
13617: LD_INT 0
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 159
13631: PUSH
13632: LD_INT 95
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: LD_INT 167
13649: PUSH
13650: LD_INT 98
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 33
13664: PUSH
13665: LD_INT 152
13667: PUSH
13668: LD_INT 89
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 134
13685: PUSH
13686: LD_INT 61
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 156
13703: PUSH
13704: LD_INT 62
13706: PUSH
13707: LD_INT 3
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 33
13718: PUSH
13719: LD_INT 171
13721: PUSH
13722: LD_INT 97
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 33
13736: PUSH
13737: LD_INT 169
13739: PUSH
13740: LD_INT 103
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13775: LD_ADDR_EXP 75
13779: PUSH
13780: LD_INT 145
13782: PUSH
13783: LD_INT 71
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13790: LD_ADDR_EXP 83
13794: PUSH
13795: LD_INT 29
13797: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13798: LD_ADDR_EXP 85
13802: PUSH
13803: LD_INT 35
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13809
13808: POP
// ruScriptActive2 := true ;
13809: LD_ADDR_EXP 15
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// end ;
13817: LD_VAR 0 3
13821: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13822: LD_EXP 14
13826: PUSH
13827: LD_EXP 59
13831: PPUSH
13832: CALL 57399 0 1
13836: AND
13837: IFFALSE 16419
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// begin enable ;
13860: ENABLE
// if ruTech then
13861: LD_EXP 65
13865: IFFALSE 14019
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13867: LD_ADDR_VAR 0 4
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 50
13884: PUSH
13885: EMPTY
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 7
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if lab then
13937: LD_VAR 0 4
13941: IFFALSE 14019
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 461
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: IFFALSE 14019
// begin for i in ruTech do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_EXP 65
13971: PUSH
13972: FOR_IN
13973: IFFALSE 14017
// if CanBeResearched ( lab [ 1 ] , i ) then
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 430
13993: IFFALSE 14015
// begin ComResearch ( lab [ 1 ] , i ) ;
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 124
// break ;
14013: GO 14017
// end ;
14015: GO 13972
14017: POP
14018: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_EXP 66
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 50
14051: PUSH
14052: EMPTY
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// if fac then
14065: LD_VAR 0 14
14069: IFFALSE 14664
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14071: LD_EXP 63
14075: PPUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 60
14081: PUSH
14082: EMPTY
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 72
14114: IFFALSE 14255
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 63
14125: PPUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 60
14131: PUSH
14132: EMPTY
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14253
// begin SetTag ( i , tMech ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 7
14175: PPUSH
14176: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 310
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 310
14199: PUSH
14200: LD_VAR 0 14
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: NONEQUAL
14209: AND
14210: IFFALSE 14221
// ComExitBuilding ( i ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 183
// end ;
14251: GO 14165
14253: POP
14254: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14255: LD_EXP 63
14259: PPUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 120
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 72
14309: IFFALSE 14396
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_EXP 63
14320: PPUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 54
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 120
14346: PUSH
14347: LD_INT 7
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 72
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14394
// ComEnterUnit ( i , fac [ 1 ] ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 14
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: CALL_OW 120
14392: GO 14371
14394: POP
14395: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14396: LD_VAR 0 14
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 461
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: IFFALSE 14664
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14415: LD_ADDR_VAR 0 15
14419: PUSH
14420: LD_EXP 66
14424: PPUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 32
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 35
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// if emptyTowers then
14472: LD_VAR 0 15
14476: IFFALSE 14526
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14478: LD_ADDR_VAR 0 16
14482: PUSH
14483: LD_VAR 0 15
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_EXP 66
14496: PPUSH
14497: CALL 65644 0 2
14501: ST_TO_ADDR
// if weapon then
14502: LD_VAR 0 16
14506: IFFALSE 14526
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14508: LD_VAR 0 15
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 16
14521: PPUSH
14522: CALL_OW 148
// end ; if ruConstructList then
14526: LD_EXP 70
14530: IFFALSE 14664
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_EXP 70
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_EXP 70
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PPUSH
14567: LD_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 3
14578: ARRAY
14579: PPUSH
14580: LD_EXP 70
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 448
14597: IFFALSE 14664
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14599: LD_VAR 0 14
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_EXP 70
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: LD_EXP 70
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: LD_EXP 70
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_EXP 70
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_EXP 66
14673: PPUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: LD_INT 57
14689: PUSH
14690: EMPTY
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: LD_INT 1000
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 70
14723: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14724: LD_ADDR_VAR 0 8
14728: PUSH
14729: LD_EXP 72
14733: PPUSH
14734: CALL_OW 435
14738: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14739: LD_ADDR_VAR 0 9
14743: PUSH
14744: LD_EXP 59
14748: PPUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 72
14773: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_EXP 66
14783: PPUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// if sci then
14828: LD_VAR 0 9
14832: IFFALSE 14993
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14834: LD_ADDR_VAR 0 11
14838: PUSH
14839: LD_EXP 59
14843: PPUSH
14844: LD_INT 95
14846: PUSH
14847: LD_EXP 66
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 120
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: ST_TO_ADDR
// if hurtUnits then
14875: LD_VAR 0 11
14879: IFFALSE 14940
// begin for i in sci do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 9
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14936
// if IsInUnit ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 310
14903: IFFALSE 14916
// ComExitBuilding ( i ) else
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 122
14914: GO 14934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 11
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 128
14934: GO 14891
14936: POP
14937: POP
// end else
14938: GO 14993
// if lab then
14940: LD_VAR 0 4
14944: IFFALSE 14993
// begin for i in sci do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14991
// if not IsInUnit ( i ) then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 310
14968: NOT
14969: IFFALSE 14989
// ComEnterUnit ( i , lab [ 1 ] ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: CALL_OW 120
14989: GO 14956
14991: POP
14992: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_EXP 59
15002: PPUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if eng then
15018: LD_VAR 0 5
15022: IFFALSE 15807
// begin for i in eng do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15805
// begin tag := GetTag ( i ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 110
15051: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 256
15061: PUSH
15062: LD_INT 800
15064: LESS
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: NONEQUAL
15074: AND
15075: IFFALSE 15125
// begin SetTag ( i , tHeal ) ;
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_EXP 74
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_INT 2
15110: ARRAY
15111: PPUSH
15112: CALL_OW 111
// AddComHold ( i ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15125: LD_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: EQUAL
15147: AND
15148: IFFALSE 15162
// SetTag ( i , 0 ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 109
// if not tag then
15162: LD_VAR 0 6
15166: NOT
15167: IFFALSE 15339
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_EXP 66
15178: PPUSH
15179: LD_INT 57
15181: PUSH
15182: EMPTY
15183: LIST
15184: PPUSH
15185: CALL_OW 70
15189: ST_TO_ADDR
// if undone then
15190: LD_VAR 0 3
15194: IFFALSE 15216
// begin ComComplete ( i , undone [ 1 ] ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL 63497 0 2
// continue ;
15214: GO 15034
// end ; if cr or tmp or Count ( ruBuildings ) then
15216: LD_VAR 0 8
15220: PUSH
15221: LD_VAR 0 2
15225: OR
15226: PUSH
15227: LD_EXP 76
15231: PPUSH
15232: CALL 57399 0 1
15236: OR
15237: IFFALSE 15313
// begin if IsInUnit ( i ) then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 310
15248: IFFALSE 15259
// ComExitBuilding ( i ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 122
// if tmp then
15259: LD_VAR 0 2
15263: IFFALSE 15279
// SetTag ( i , tRepair ) else
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 3
15272: PPUSH
15273: CALL_OW 109
15277: GO 15311
// if cr then
15279: LD_VAR 0 8
15283: IFFALSE 15299
// SetTag ( i , tCrates ) else
15285: LD_VAR 0 1
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 109
15297: GO 15311
// SetTag ( i , tBuild ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 5
15306: PPUSH
15307: CALL_OW 109
// end else
15311: GO 15339
// if not IsInUnit ( i ) then
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 310
15322: NOT
15323: IFFALSE 15339
// ComEnterUnit ( i , ruBase ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_EXP 68
15334: PPUSH
15335: CALL_OW 120
// end ; if tag = tRepair then
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 3
15346: EQUAL
15347: IFFALSE 15453
// begin if IsInUnit ( i ) then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 310
15358: IFFALSE 15371
// begin ComExitBuilding ( i ) ;
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 122
// continue ;
15369: GO 15034
// end ; if not tmp then
15371: LD_VAR 0 2
15375: NOT
15376: IFFALSE 15392
// begin SetTag ( i , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 109
// continue ;
15390: GO 15034
// end ; if not HasTask ( i ) then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 314
15401: NOT
15402: IFFALSE 15422
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_EXP 66
15431: PPUSH
15432: CALL_OW 308
15436: NOT
15437: IFFALSE 15453
// ComMoveToArea ( i , ruBaseArea ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 66
15448: PPUSH
15449: CALL_OW 113
// end ; if tag = tBuild then
15453: LD_VAR 0 6
15457: PUSH
15458: LD_INT 5
15460: EQUAL
15461: IFFALSE 15660
// begin if IsInUnit ( i ) then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 310
15472: IFFALSE 15485
// begin ComExitBuilding ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 122
// continue ;
15483: GO 15034
// end ; if not Count ( ruBuildings ) then
15485: LD_EXP 76
15489: PPUSH
15490: CALL 57399 0 1
15494: NOT
15495: IFFALSE 15513
// begin SetTag ( i , 0 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 109
// continue ;
15509: GO 15034
// end else
15511: GO 15552
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15513: LD_EXP 68
15517: PPUSH
15518: LD_EXP 76
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: CALL 96937 0 2
15535: NOT
15536: IFFALSE 15552
// begin SetTag ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 109
// continue ;
15550: GO 15034
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_EXP 66
15561: PPUSH
15562: LD_INT 57
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 70
15572: ST_TO_ADDR
// if undone then
15573: LD_VAR 0 3
15577: IFFALSE 15599
// begin ComComplete ( i , undone [ 1 ] ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: CALL 63497 0 2
// continue ;
15597: GO 15034
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15599: LD_VAR 0 1
15603: PPUSH
15604: LD_EXP 76
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_EXP 76
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_EXP 76
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_EXP 76
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PUSH
15652: LD_INT 4
15654: ARRAY
15655: PPUSH
15656: CALL_OW 145
// end ; if tag = tCrates then
15660: LD_VAR 0 6
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15803
// begin if IsInUnit ( i ) then
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 310
15679: IFFALSE 15692
// begin ComExitBuilding ( i ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 122
// continue ;
15690: GO 15034
// end ; if not cr then
15692: LD_VAR 0 8
15696: NOT
15697: IFFALSE 15713
// begin SetTag ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 109
// continue ;
15711: GO 15034
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 92
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_INT 12
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: NOT
15773: AND
15774: IFFALSE 15803
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_INT 2
15797: ARRAY
15798: PPUSH
15799: CALL_OW 117
// end ; end ;
15803: GO 15034
15805: POP
15806: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15807: LD_ADDR_VAR 0 10
15811: PUSH
15812: LD_EXP 59
15816: PPUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 9
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: PUSH
15860: LD_EXP 61
15864: UNION
15865: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15866: LD_ADDR_VAR 0 12
15870: PUSH
15871: LD_EXP 66
15875: PPUSH
15876: LD_INT 81
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 70
15890: ST_TO_ADDR
// if sol then
15891: LD_VAR 0 10
15895: IFFALSE 16419
// begin if enemyInBase then
15897: LD_VAR 0 12
15901: IFFALSE 16044
// begin for i in sol do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16040
// begin tw := IsInUnit ( i ) ;
15916: LD_ADDR_VAR 0 7
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 310
15930: ST_TO_ADDR
// if tw then
15931: LD_VAR 0 7
15935: IFFALSE 16014
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 101
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 30
15977: PUSH
15978: LD_INT 31
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: IN
16000: NOT
16001: IFFALSE 16012
// ComExitBuilding ( i ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 122
// end else
16012: GO 16038
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 12
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 74
16033: PPUSH
16034: CALL_OW 115
// end ;
16038: GO 15913
16040: POP
16041: POP
// end else
16042: GO 16419
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 62
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 31
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 70
16125: ST_TO_ADDR
// if empty then
16126: LD_VAR 0 13
16130: IFFALSE 16147
// empty := ReverseArray ( empty ) ;
16132: LD_ADDR_VAR 0 13
16136: PUSH
16137: LD_VAR 0 13
16141: PPUSH
16142: CALL 88275 0 1
16146: ST_TO_ADDR
// for i in sol do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 10
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16417
// begin tag := GetTag ( i ) ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 110
16174: ST_TO_ADDR
// if tag = tMech then
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 7
16182: EQUAL
16183: IFFALSE 16187
// continue ;
16185: GO 16157
// if GetLives ( i ) < 1000 and tag <> tHeal then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 256
16196: PUSH
16197: LD_INT 1000
16199: LESS
16200: PUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_INT 1
16208: NONEQUAL
16209: AND
16210: IFFALSE 16262
// begin SetTag ( i , tHeal ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_EXP 74
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: LD_EXP 74
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PPUSH
16247: CALL_OW 111
// AddComHold ( i ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 200
// continue ;
16260: GO 16157
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 256
16271: PUSH
16272: LD_INT 1000
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: AND
16285: IFFALSE 16301
// begin SetTag ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 109
// continue ;
16299: GO 16157
// end ; if HasTask ( i ) then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 314
16310: IFFALSE 16314
// continue ;
16312: GO 16157
// if not IsInUnit ( i ) and not tag and empty then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 310
16323: NOT
16324: PUSH
16325: LD_VAR 0 6
16329: NOT
16330: AND
16331: PUSH
16332: LD_VAR 0 13
16336: AND
16337: IFFALSE 16415
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16357: LD_VAR 0 13
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: CALL_OW 266
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: PUSH
16375: LD_INT 50
16377: PPUSH
16378: CALL_OW 13
16382: AND
16383: IFFALSE 16397
// AddComChangeProfession ( i , class_bazooker ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 9
16392: PPUSH
16393: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16397: LD_ADDR_VAR 0 13
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: ST_TO_ADDR
// end ; end ;
16415: GO 16157
16417: POP
16418: POP
// end ; end ; end ;
16419: PPOPN 16
16421: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16422: LD_EXP 15
16426: PUSH
16427: LD_EXP 60
16431: PPUSH
16432: CALL 57399 0 1
16436: AND
16437: IFFALSE 19019
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin enable ;
16460: ENABLE
// if ruTech then
16461: LD_EXP 65
16465: IFFALSE 16619
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16467: LD_ADDR_VAR 0 4
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 50
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// if lab then
16537: LD_VAR 0 4
16541: IFFALSE 16619
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16543: LD_VAR 0 4
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 461
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: IFFALSE 16619
// begin for i in ruTech do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_EXP 65
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16617
// if CanBeResearched ( lab [ 1 ] , i ) then
16575: LD_VAR 0 4
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 430
16593: IFFALSE 16615
// begin ComResearch ( lab [ 1 ] , i ) ;
16595: LD_VAR 0 4
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 124
// break ;
16613: GO 16617
// end ;
16615: GO 16572
16617: POP
16618: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16619: LD_ADDR_VAR 0 14
16623: PUSH
16624: LD_EXP 67
16628: PPUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 50
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 70
16664: ST_TO_ADDR
// if fac then
16665: LD_VAR 0 14
16669: IFFALSE 17264
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16671: LD_EXP 64
16675: PPUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 60
16681: PUSH
16682: EMPTY
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: IFFALSE 16855
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 64
16725: PPUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16853
// begin SetTag ( i , tMech ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 7
16775: PPUSH
16776: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 310
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 310
16799: PUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: NONEQUAL
16809: AND
16810: IFFALSE 16821
// ComExitBuilding ( i ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_VAR 0 14
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 183
// end ;
16851: GO 16765
16853: POP
16854: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16855: LD_EXP 64
16859: PPUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 54
16875: PUSH
16876: EMPTY
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 120
16885: PUSH
16886: LD_INT 7
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 50
16895: PUSH
16896: EMPTY
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 72
16909: IFFALSE 16996
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 64
16920: PPUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 54
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 120
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 50
16956: PUSH
16957: EMPTY
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: PUSH
16971: FOR_IN
16972: IFFALSE 16994
// ComEnterUnit ( i , fac [ 1 ] ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 120
16992: GO 16971
16994: POP
16995: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 461
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: IFFALSE 17264
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17015: LD_ADDR_VAR 0 15
17019: PUSH
17020: LD_EXP 67
17024: PPUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 32
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 33
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 35
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 70
17071: ST_TO_ADDR
// if emptyTowers then
17072: LD_VAR 0 15
17076: IFFALSE 17126
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: LD_VAR 0 15
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 67
17096: PPUSH
17097: CALL 65644 0 2
17101: ST_TO_ADDR
// if weapon then
17102: LD_VAR 0 16
17106: IFFALSE 17126
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17108: LD_VAR 0 15
17112: PUSH
17113: LD_INT 1
17115: ARRAY
17116: PPUSH
17117: LD_VAR 0 16
17121: PPUSH
17122: CALL_OW 148
// end ; if ruConstructList2 then
17126: LD_EXP 71
17130: IFFALSE 17264
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17132: LD_VAR 0 14
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_EXP 71
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PUSH
17163: LD_INT 2
17165: ARRAY
17166: PPUSH
17167: LD_EXP 71
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_EXP 71
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: PPUSH
17193: CALL_OW 448
17197: IFFALSE 17264
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17199: LD_VAR 0 14
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_EXP 71
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_EXP 71
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: LD_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PUSH
17243: LD_INT 3
17245: ARRAY
17246: PPUSH
17247: LD_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: PPUSH
17260: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17264: LD_ADDR_VAR 0 2
17268: PUSH
17269: LD_EXP 67
17273: PPUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 57
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 1000
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 70
17323: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: LD_EXP 73
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_EXP 60
17348: PPUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 50
17361: PUSH
17362: EMPTY
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 72
17373: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_EXP 67
17383: PPUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_INT 7
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 70
17427: ST_TO_ADDR
// if sci then
17428: LD_VAR 0 9
17432: IFFALSE 17593
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_EXP 60
17443: PPUSH
17444: LD_INT 95
17446: PUSH
17447: LD_EXP 67
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 120
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 72
17474: ST_TO_ADDR
// if hurtUnits then
17475: LD_VAR 0 11
17479: IFFALSE 17540
// begin for i in sci do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17536
// if IsInUnit ( i ) then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 310
17503: IFFALSE 17516
// ComExitBuilding ( i ) else
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 122
17514: GO 17534
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 11
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 128
17534: GO 17491
17536: POP
17537: POP
// end else
17538: GO 17593
// if lab then
17540: LD_VAR 0 4
17544: IFFALSE 17593
// begin for i in sci do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 9
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17591
// if not IsInUnit ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 310
17568: NOT
17569: IFFALSE 17589
// ComEnterUnit ( i , lab [ 1 ] ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_VAR 0 4
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 120
17589: GO 17556
17591: POP
17592: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17593: LD_ADDR_VAR 0 5
17597: PUSH
17598: LD_EXP 60
17602: PPUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 72
17617: ST_TO_ADDR
// if eng then
17618: LD_VAR 0 5
17622: IFFALSE 18407
// begin for i in eng do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 5
17633: PUSH
17634: FOR_IN
17635: IFFALSE 18405
// begin tag := GetTag ( i ) ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 110
17651: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 256
17661: PUSH
17662: LD_INT 800
17664: LESS
17665: PUSH
17666: LD_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: NONEQUAL
17674: AND
17675: IFFALSE 17725
// begin SetTag ( i , tHeal ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_EXP 75
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: LD_EXP 75
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: PPUSH
17712: CALL_OW 111
// AddComHold ( i ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17725: LD_VAR 0 6
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 256
17743: PUSH
17744: LD_INT 1000
17746: EQUAL
17747: AND
17748: IFFALSE 17762
// SetTag ( i , 0 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: CALL_OW 109
// if not tag then
17762: LD_VAR 0 6
17766: NOT
17767: IFFALSE 17939
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_EXP 67
17778: PPUSH
17779: LD_INT 57
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 70
17789: ST_TO_ADDR
// if undone then
17790: LD_VAR 0 3
17794: IFFALSE 17816
// begin ComComplete ( i , undone [ 1 ] ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL 63497 0 2
// continue ;
17814: GO 17634
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17816: LD_VAR 0 8
17820: PUSH
17821: LD_VAR 0 2
17825: OR
17826: PUSH
17827: LD_EXP 77
17831: PPUSH
17832: CALL 57399 0 1
17836: OR
17837: IFFALSE 17913
// begin if IsInUnit ( i ) then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 310
17848: IFFALSE 17859
// ComExitBuilding ( i ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 122
// if tmp then
17859: LD_VAR 0 2
17863: IFFALSE 17879
// SetTag ( i , tRepair ) else
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 109
17877: GO 17911
// if cr then
17879: LD_VAR 0 8
17883: IFFALSE 17899
// SetTag ( i , tCrates ) else
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 2
17892: PPUSH
17893: CALL_OW 109
17897: GO 17911
// SetTag ( i , tBuild ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 109
// end else
17911: GO 17939
// if not IsInUnit ( i ) then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 310
17922: NOT
17923: IFFALSE 17939
// ComEnterUnit ( i , ruBase2 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_EXP 69
17934: PPUSH
17935: CALL_OW 120
// end ; if tag = tRepair then
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: IFFALSE 18053
// begin if IsInUnit ( i ) then
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: IFFALSE 17971
// begin ComExitBuilding ( i ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 122
// continue ;
17969: GO 17634
// end ; if not tmp then
17971: LD_VAR 0 2
17975: NOT
17976: IFFALSE 17992
// begin SetTag ( i , 0 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: CALL_OW 109
// continue ;
17990: GO 17634
// end ; if not HasTask ( i ) then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 314
18001: NOT
18002: IFFALSE 18022
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 308
18036: NOT
18037: IFFALSE 18053
// ComMoveToArea ( i , ruBaseArea2 ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_EXP 67
18048: PPUSH
18049: CALL_OW 113
// end ; if tag = tBuild then
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18260
// begin if IsInUnit ( i ) then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 310
18072: IFFALSE 18085
// begin ComExitBuilding ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 122
// continue ;
18083: GO 17634
// end ; if not Count ( ruBuildings2 ) then
18085: LD_EXP 77
18089: PPUSH
18090: CALL 57399 0 1
18094: NOT
18095: IFFALSE 18113
// begin SetTag ( i , 0 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 109
// continue ;
18109: GO 17634
// end else
18111: GO 18152
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18113: LD_EXP 69
18117: PPUSH
18118: LD_EXP 77
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL 96937 0 2
18135: NOT
18136: IFFALSE 18152
// begin SetTag ( i , 0 ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 109
// continue ;
18150: GO 17634
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_EXP 67
18161: PPUSH
18162: LD_INT 57
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL_OW 70
18172: ST_TO_ADDR
// if undone then
18173: LD_VAR 0 3
18177: IFFALSE 18199
// begin ComComplete ( i , undone [ 1 ] ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL 63497 0 2
// continue ;
18197: GO 17634
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_EXP 77
18208: PUSH
18209: LD_INT 1
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: ARRAY
18216: PPUSH
18217: LD_EXP 77
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PPUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PPUSH
18243: LD_EXP 77
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_INT 4
18254: ARRAY
18255: PPUSH
18256: CALL_OW 145
// end ; if tag = tCrates then
18260: LD_VAR 0 6
18264: PUSH
18265: LD_INT 2
18267: EQUAL
18268: IFFALSE 18403
// begin if IsInUnit ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 310
18279: IFFALSE 18292
// begin ComExitBuilding ( i ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 122
// continue ;
18290: GO 17634
// end ; if not cr then
18292: LD_VAR 0 8
18296: NOT
18297: IFFALSE 18313
// begin SetTag ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 109
// continue ;
18311: GO 17634
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 314
18322: NOT
18323: PUSH
18324: LD_INT 81
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 92
18336: PUSH
18337: LD_VAR 0 8
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_VAR 0 8
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: NOT
18373: AND
18374: IFFALSE 18403
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 8
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 8
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 117
// end ; end ;
18403: GO 17634
18405: POP
18406: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18407: LD_ADDR_VAR 0 10
18411: PUSH
18412: LD_EXP 60
18416: PPUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 50
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 72
18459: PUSH
18460: LD_EXP 62
18464: UNION
18465: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18466: LD_ADDR_VAR 0 12
18470: PUSH
18471: LD_EXP 67
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 70
18490: ST_TO_ADDR
// if sol then
18491: LD_VAR 0 10
18495: IFFALSE 19019
// begin if enemyInBase then
18497: LD_VAR 0 12
18501: IFFALSE 18644
// begin for i in sol do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 10
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18640
// begin tw := IsInUnit ( i ) ;
18516: LD_ADDR_VAR 0 7
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 310
18530: ST_TO_ADDR
// if tw then
18531: LD_VAR 0 7
18535: IFFALSE 18614
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18537: LD_VAR 0 7
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 101
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 30
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 31
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: IN
18600: NOT
18601: IFFALSE 18612
// ComExitBuilding ( i ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 122
// end else
18612: GO 18638
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 74
18633: PPUSH
18634: CALL_OW 115
// end ;
18638: GO 18513
18640: POP
18641: POP
// end else
18642: GO 19019
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18644: LD_ADDR_VAR 0 13
18648: PUSH
18649: LD_EXP 67
18653: PPUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 62
18659: PUSH
18660: EMPTY
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 31
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 70
18725: ST_TO_ADDR
// if empty then
18726: LD_VAR 0 13
18730: IFFALSE 18747
// empty := ReverseArray ( empty ) ;
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL 88275 0 1
18746: ST_TO_ADDR
// for i in sol do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_IN
18758: IFFALSE 19017
// begin tag := GetTag ( i ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: ST_TO_ADDR
// if tag = tMech then
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 7
18782: EQUAL
18783: IFFALSE 18787
// continue ;
18785: GO 18757
// if GetLives ( i ) < 1000 and tag <> tHeal then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: LD_INT 1
18808: NONEQUAL
18809: AND
18810: IFFALSE 18862
// begin SetTag ( i , tHeal ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_EXP 75
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: LD_EXP 75
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: PPUSH
18847: CALL_OW 111
// AddComHold ( i ) ;
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 200
// continue ;
18860: GO 18757
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 256
18871: PUSH
18872: LD_INT 1000
18874: EQUAL
18875: PUSH
18876: LD_VAR 0 6
18880: PUSH
18881: LD_INT 1
18883: EQUAL
18884: AND
18885: IFFALSE 18901
// begin SetTag ( i , 0 ) ;
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 0
18894: PPUSH
18895: CALL_OW 109
// continue ;
18899: GO 18757
// end ; if HasTask ( i ) then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 314
18910: IFFALSE 18914
// continue ;
18912: GO 18757
// if not IsInUnit ( i ) and not tag and empty then
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 310
18923: NOT
18924: PUSH
18925: LD_VAR 0 6
18929: NOT
18930: AND
18931: PUSH
18932: LD_VAR 0 13
18936: AND
18937: IFFALSE 19015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: ARRAY
18965: PPUSH
18966: CALL_OW 266
18970: PUSH
18971: LD_INT 5
18973: EQUAL
18974: PUSH
18975: LD_INT 50
18977: PPUSH
18978: CALL_OW 13
18982: AND
18983: IFFALSE 18997
// AddComChangeProfession ( i , class_bazooker ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 13
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 3
19014: ST_TO_ADDR
// end ; end ;
19015: GO 18757
19017: POP
19018: POP
// end ; end ; end ;
19019: PPOPN 16
19021: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19022: LD_EXP 79
19026: PUSH
19027: LD_EXP 22
19031: AND
19032: IFFALSE 19599
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
// begin enable ;
19042: ENABLE
// if not ruTanks then
19043: LD_EXP 79
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19599
// for i in ruTanks do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 79
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19597
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 302
19074: NOT
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 255
19085: PUSH
19086: LD_INT 3
19088: NONEQUAL
19089: OR
19090: IFFALSE 19110
// begin ruTanks := ruTanks diff i ;
19092: LD_ADDR_EXP 79
19096: PUSH
19097: LD_EXP 79
19101: PUSH
19102: LD_VAR 0 1
19106: DIFF
19107: ST_TO_ADDR
// continue ;
19108: GO 19062
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 110
19119: NOT
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 110
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 19308
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 262
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 261
19160: PUSH
19161: LD_INT 50
19163: LESS
19164: AND
19165: PUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 302
19175: AND
19176: IFFALSE 19263
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_EXP 68
19187: PPUSH
19188: CALL_OW 250
19192: PPUSH
19193: LD_EXP 68
19197: PPUSH
19198: CALL_OW 251
19202: PPUSH
19203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19207: LD_INT 35
19209: PPUSH
19210: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_EXP 68
19223: PPUSH
19224: CALL_OW 250
19228: PPUSH
19229: LD_EXP 68
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 297
19243: PUSH
19244: LD_INT 6
19246: LESS
19247: IFFALSE 19207
// SetFuel ( i , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 240
// end else
19261: GO 19308
// if not IsInArea ( i , ruParkingArea ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 308
19277: NOT
19278: IFFALSE 19296
// ComMoveToArea ( i , ruParkingArea ) else
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 82
19289: PPUSH
19290: CALL_OW 113
19294: GO 19308
// SetTag ( i , tParking ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 110
19317: PUSH
19318: LD_INT 12
19320: EQUAL
19321: IFFALSE 19451
// begin if GetLives ( i ) < 650 then
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 256
19332: PUSH
19333: LD_INT 650
19335: LESS
19336: IFFALSE 19428
// begin if not IsDrivenBy ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: NOT
19348: IFFALSE 19352
// continue ;
19350: GO 19062
// mech := IsDrivenBy ( i ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19390: LD_INT 35
19392: PPUSH
19393: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 256
19406: PUSH
19407: LD_INT 1000
19409: EQUAL
19410: IFFALSE 19390
// ComEnterUnit ( mech , i ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 120
// end else
19426: GO 19451
// if IsDrivenBy ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 311
19437: IFFALSE 19451
// SetTag ( i , tAttack ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 13
19446: PPUSH
19447: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 110
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19595
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_EXP 66
19475: PPUSH
19476: LD_INT 81
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 256
19500: PUSH
19501: LD_INT 650
19503: LESS
19504: IFFALSE 19529
// begin ComStop ( i ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 141
// SetTag ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 109
// continue ;
19527: GO 19062
// end ; if enemy then
19529: LD_VAR 0 3
19533: IFFALSE 19573
// begin if not HasTask ( i ) then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 314
19544: NOT
19545: IFFALSE 19571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 115
// end else
19571: GO 19595
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 35
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: PPUSH
19591: CALL 95618 0 2
// end ; end ;
19595: GO 19062
19597: POP
19598: POP
// end ;
19599: PPOPN 3
19601: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19602: LD_EXP 80
19606: PUSH
19607: LD_EXP 22
19611: AND
19612: IFFALSE 20179
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// begin enable ;
19622: ENABLE
// if not ruTanks2 then
19623: LD_EXP 80
19627: NOT
19628: IFFALSE 19632
// exit ;
19630: GO 20179
// for i in ruTanks2 do
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_EXP 80
19641: PUSH
19642: FOR_IN
19643: IFFALSE 20177
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: NONEQUAL
19669: OR
19670: IFFALSE 19690
// begin ruTanks := ruTanks diff i ;
19672: LD_ADDR_EXP 79
19676: PUSH
19677: LD_EXP 79
19681: PUSH
19682: LD_VAR 0 1
19686: DIFF
19687: ST_TO_ADDR
// continue ;
19688: GO 19642
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 110
19699: NOT
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: OR
19715: IFFALSE 19888
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 262
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 261
19740: PUSH
19741: LD_INT 50
19743: LESS
19744: AND
19745: PUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 302
19755: AND
19756: IFFALSE 19843
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_EXP 69
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_EXP 69
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19787: LD_INT 35
19789: PPUSH
19790: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_EXP 69
19803: PPUSH
19804: CALL_OW 250
19808: PPUSH
19809: LD_EXP 69
19813: PPUSH
19814: CALL_OW 251
19818: PPUSH
19819: CALL_OW 297
19823: PUSH
19824: LD_INT 6
19826: LESS
19827: IFFALSE 19787
// SetFuel ( i , 100 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 100
19836: PPUSH
19837: CALL_OW 240
// end else
19841: GO 19888
// if not IsInArea ( i , ruParkingArea2 ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 308
19857: NOT
19858: IFFALSE 19876
// ComMoveToArea ( i , ruParkingArea2 ) else
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_EXP 83
19869: PPUSH
19870: CALL_OW 113
19874: GO 19888
// SetTag ( i , tParking ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 12
19883: PPUSH
19884: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 110
19897: PUSH
19898: LD_INT 12
19900: EQUAL
19901: IFFALSE 20031
// begin if GetLives ( i ) < 650 then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 256
19912: PUSH
19913: LD_INT 650
19915: LESS
19916: IFFALSE 20008
// begin if not IsDrivenBy ( i ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 311
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19642
// mech := IsDrivenBy ( i ) ;
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 311
19946: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: EQUAL
19990: IFFALSE 19970
// ComEnterUnit ( mech , i ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 120
// end else
20006: GO 20031
// if IsDrivenBy ( i ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 311
20017: IFFALSE 20031
// SetTag ( i , tAttack ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 13
20026: PPUSH
20027: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 13
20043: EQUAL
20044: IFFALSE 20175
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_EXP 67
20055: PPUSH
20056: LD_INT 81
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 70
20070: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 256
20080: PUSH
20081: LD_INT 650
20083: LESS
20084: IFFALSE 20109
// begin ComStop ( i ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 141
// SetTag ( i , 0 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 109
// continue ;
20107: GO 19642
// end ; if enemy then
20109: LD_VAR 0 3
20113: IFFALSE 20153
// begin if not HasTask ( i ) then
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: IFFALSE 20151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 74
20146: PPUSH
20147: CALL_OW 115
// end else
20151: GO 20175
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 35
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: PPUSH
20171: CALL 95618 0 2
// end ; end ;
20175: GO 19642
20177: POP
20178: POP
// end ;
20179: PPOPN 3
20181: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20182: LD_EXP 81
20186: PPUSH
20187: CALL 57399 0 1
20191: IFFALSE 20204
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20197: LD_INT 106
20199: PPUSH
20200: CALL_OW 427
// end ;
20204: END
// export function RussianExtraAttack ; var i , tmp ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_EXP 81
20219: PPUSH
20220: LD_INT 50
20222: PUSH
20223: EMPTY
20224: LIST
20225: PPUSH
20226: CALL_OW 72
20230: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20231: LD_ADDR_EXP 81
20235: PUSH
20236: LD_EXP 81
20240: PUSH
20241: LD_VAR 0 3
20245: DIFF
20246: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_INT 105
20254: PPUSH
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 114
// wait ( 0 0$5 ) ;
20262: LD_INT 175
20264: PPUSH
20265: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20269: LD_INT 35
20271: PPUSH
20272: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 50
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// for i in tmp do
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20334
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 35
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: PPUSH
20328: CALL 95618 0 2
20332: GO 20307
20334: POP
20335: POP
// until not tmp ;
20336: LD_VAR 0 3
20340: NOT
20341: IFFALSE 20269
// end ;
20343: LD_VAR 0 1
20347: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// result := [ ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 4
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: LD_INT 6
20380: PUSH
20381: LD_INT 7
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_OWVAR 67
20394: ARRAY
20395: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20396: LD_ADDR_VAR 0 8
20400: PUSH
20401: LD_INT 19
20403: ST_TO_ADDR
// parking := ruGatPointArea ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: LD_INT 32
20411: ST_TO_ADDR
// dir := 5 ;
20412: LD_ADDR_VAR 0 10
20416: PUSH
20417: LD_INT 5
20419: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 6
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: IFFALSE 20518
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 70
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20516
// RemoveUnit ( i ) ;
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 64
20514: GO 20502
20516: POP
20517: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: IFFALSE 20622
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 8
20569: PPUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20620
// KillUnit ( i ) ;
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 66
20618: GO 20606
20620: POP
20621: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_INT 21
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: IFFALSE 20718
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 8
20666: PPUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20716
// ComMoveXY ( i , 92 , 92 ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 92
20706: PPUSH
20707: LD_INT 92
20709: PPUSH
20710: CALL_OW 111
20714: GO 20696
20716: POP
20717: POP
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 50
20732: PUSH
20733: EMPTY
20734: LIST
20735: PPUSH
20736: CALL_OW 70
20740: NOT
20741: IFFALSE 20718
// InitHC_All ( ) ;
20743: CALL_OW 584
// InitVc ;
20747: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_OWVAR 67
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 1
20789: PLUS
20790: PUSH
20791: FOR_TO
20792: IFFALSE 21099
// begin uc_side := 6 ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_INT 6
20801: ST_TO_ADDR
// uc_nation := nation_russian ;
20802: LD_ADDR_OWVAR 21
20806: PUSH
20807: LD_INT 3
20809: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 4
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20845: LD_INT 22
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 3
20866: MOD
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ARRAY
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_INT 45
20902: PUSH
20903: LD_INT 46
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 3
20921: MOD
20922: PUSH
20923: LD_INT 1
20925: PLUS
20926: ARRAY
20927: PPUSH
20928: LD_INT 100
20930: PPUSH
20931: CALL 60137 0 5
// veh := CreateVehicle ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: CALL_OW 45
20944: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20945: LD_VAR 0 6
20949: PPUSH
20950: LD_VAR 0 10
20954: PPUSH
20955: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 8
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: CALL_OW 49
// if control = control_manual then
20976: LD_VAR 0 11
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: IFFALSE 21038
// begin uc_side := 6 ;
20986: LD_ADDR_OWVAR 20
20990: PUSH
20991: LD_INT 6
20993: ST_TO_ADDR
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21002: LD_INT 0
21004: PPUSH
21005: LD_VAR 0 7
21009: PPUSH
21010: CALL_OW 383
// un := CreateHuman ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: CALL_OW 44
21023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_VAR 0 6
21033: PPUSH
21034: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 9
21047: PPUSH
21048: CALL_OW 113
// wait ( 0 0$3 ) ;
21052: LD_INT 105
21054: PPUSH
21055: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PPUSH
21070: CALL_OW 70
21074: NOT
21075: IFFALSE 21038
// result := Join ( result , veh ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL 93008 0 2
21096: ST_TO_ADDR
// end ;
21097: GO 20791
21099: POP
21100: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_OWVAR 67
21133: ARRAY
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21292
// begin uc_side := 6 ;
21138: LD_ADDR_OWVAR 20
21142: PUSH
21143: LD_INT 6
21145: ST_TO_ADDR
// uc_nation := nation_russian ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 3
21153: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21154: LD_INT 0
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: CALL_OW 381
// un := CreateHuman ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: CALL_OW 44
21175: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21176: LD_INT 35
21178: PUSH
21179: LD_INT 60
21181: PUSH
21182: LD_INT 70
21184: PUSH
21185: LD_INT 80
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21218
// SetClass ( un , class_bazooker ) ;
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_INT 9
21213: PPUSH
21214: CALL_OW 336
// SetDir ( un , dir ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 9
21258: PPUSH
21259: CALL_OW 113
// wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// result := Join ( result , un ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 93008 0 2
21289: ST_TO_ADDR
// end ;
21290: GO 21135
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 2
21298: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21307: LD_ADDR_EXP 18
21311: PUSH
21312: LD_EXP 18
21316: PPUSH
21317: CALL 94369 0 1
21321: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 99
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 78
21339: PUSH
21340: LD_INT 50
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 91
21349: PUSH
21350: LD_INT 45
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL 20348 0 1
21376: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21377: LD_VAR 0 4
21381: PPUSH
21382: LD_INT 21
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: PPUSH
21397: LD_INT 108
21399: PPUSH
21400: LD_INT 60
21402: PPUSH
21403: CALL_OW 114
// DRussianNextAttack ;
21407: CALL 28478 0 0
// repeat wait ( 0 0$2 ) ;
21411: LD_INT 70
21413: PPUSH
21414: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_INT 81
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: LD_INT 50
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 72
21458: ST_TO_ADDR
// for i in attackers do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: FOR_IN
21470: IFFALSE 21846
// begin if not IsOk ( i ) then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFFALSE 21502
// begin attackers := attackers diff i ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: LD_VAR 0 6
21498: DIFF
21499: ST_TO_ADDR
// continue ;
21500: GO 21469
// end ; if GetType ( i ) = unit_vehicle then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 247
21511: PUSH
21512: LD_INT 2
21514: EQUAL
21515: IFFALSE 21533
// AgressiveMove ( i , path ) else
21517: LD_VAR 0 6
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 95618 0 2
21531: GO 21844
// begin if GetClass ( i ) = class_bazooker then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 9
21545: EQUAL
21546: IFFALSE 21820
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 74
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 12
21575: GREATER
21576: IFFALSE 21604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 7
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: CALL_OW 74
21597: PPUSH
21598: CALL 97236 0 2
21602: GO 21818
// begin e := NearestUnitToUnit ( enemy , i ) ;
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 74
21623: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: PUSH
21635: LD_INT 1
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21660
21643: POP
// ComAttackUnit ( i , e ) ; 2 :
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 115
21658: GO 21818
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21746
21668: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 250
21683: PPUSH
21684: LD_VAR 0 5
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 247
21707: PUSH
21708: LD_INT 3
21710: NONEQUAL
21711: PUSH
21712: LD_EXP 17
21716: NOT
21717: AND
21718: IFFALSE 21744
// begin dialogRussianSpaceAmmo := true ;
21720: LD_ADDR_EXP 17
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21728: LD_INT 210
21730: PPUSH
21731: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL 28525 0 1
// end ; end ; 3 :
21744: GO 21818
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21817
21754: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21784: LD_EXP 17
21788: NOT
21789: IFFALSE 21815
// begin dialogRussianSpaceAmmo := true ;
21791: LD_ADDR_EXP 17
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21799: LD_INT 210
21801: PPUSH
21802: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21806: LD_VAR 0 5
21810: PPUSH
21811: CALL 28525 0 1
// end ; end ; end ;
21815: GO 21818
21817: POP
// end ; end else
21818: GO 21844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21820: LD_VAR 0 6
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 74
21839: PPUSH
21840: CALL 97236 0 2
// end ; end ;
21844: GO 21469
21846: POP
21847: POP
// until not attackers ;
21848: LD_VAR 0 4
21852: NOT
21853: IFFALSE 21411
// end ;
21855: LD_VAR 0 2
21859: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21860: LD_EXP 10
21864: PUSH
21865: LD_EXP 16
21869: AND
21870: IFFALSE 21982
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
// begin InitHC_All ( ) ;
21880: CALL_OW 584
// for i := 1 to 3 do
21884: LD_ADDR_VAR 0 1
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21980
// begin uc_side := 6 ;
21900: LD_ADDR_OWVAR 20
21904: PUSH
21905: LD_INT 6
21907: ST_TO_ADDR
// uc_nation := nation_russian ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_INT 3
21915: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 381
// un := CreateHuman ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: CALL_OW 44
21935: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_INT 33
21955: PPUSH
21956: LD_INT 0
21958: PPUSH
21959: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 52
21970: PPUSH
21971: LD_INT 16
21973: PPUSH
21974: CALL_OW 114
// end ;
21978: GO 21897
21980: POP
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21985: LD_EXP 68
21989: PPUSH
21990: CALL_OW 302
21994: PUSH
21995: LD_EXP 78
21999: NOT
22000: AND
22001: IFFALSE 22238
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
// begin enable ;
22009: ENABLE
// uc_side := 3 ;
22010: LD_ADDR_OWVAR 20
22014: PUSH
22015: LD_INT 3
22017: ST_TO_ADDR
// uc_nation := nation_russian ;
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22026: LD_INT 22
22028: PPUSH
22029: LD_INT 3
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 51
22037: PPUSH
22038: LD_INT 100
22040: PPUSH
22041: CALL 60137 0 5
// cargo := CreateVehicle ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 45
22054: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 187
22074: PPUSH
22075: LD_INT 117
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_INT 100
22095: PPUSH
22096: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22100: LD_VAR 0 1
22104: PPUSH
22105: LD_EXP 68
22109: PPUSH
22110: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_EXP 68
22123: PPUSH
22124: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 187
22135: PPUSH
22136: LD_INT 117
22138: PPUSH
22139: CALL_OW 171
// wait ( 0 0$10 ) ;
22143: LD_INT 350
22145: PPUSH
22146: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22150: LD_INT 35
22152: PPUSH
22153: CALL_OW 67
// if not HasTask ( cargo ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 314
22166: NOT
22167: IFFALSE 22184
// ComMoveXY ( cargo , 187 , 117 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 187
22176: PPUSH
22177: LD_INT 117
22179: PPUSH
22180: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 301
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 307
22209: OR
22210: IFFALSE 22150
// if IsAt ( cargo , 187 , 117 ) then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 187
22219: PPUSH
22220: LD_INT 117
22222: PPUSH
22223: CALL_OW 307
22227: IFFALSE 22238
// RemoveUnit ( cargo ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 64
// end ; end_of_file
22238: PPOPN 1
22240: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 49849 0 1
// if unit = Dietrich and not arabianAttack then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_EXP 50
22259: EQUAL
22260: PUSH
22261: LD_EXP 4
22265: NOT
22266: AND
22267: IFFALSE 22276
// YouLost ( ArabDefeated ) ;
22269: LD_STRING ArabDefeated
22271: PPUSH
22272: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: IN
22310: PUSH
22311: LD_EXP 4
22315: NOT
22316: AND
22317: IFFALSE 22326
// YouLost ( ArabDefeated ) ;
22319: LD_STRING ArabDefeated
22321: PPUSH
22322: CALL_OW 104
// if unit in JMMSquad then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_EXP 45
22335: IN
22336: IFFALSE 22354
// JMMSquad := JMMSquad diff unit ;
22338: LD_ADDR_EXP 45
22342: PUSH
22343: LD_EXP 45
22347: PUSH
22348: LD_VAR 0 1
22352: DIFF
22353: ST_TO_ADDR
// if unit = Truman then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_EXP 43
22363: EQUAL
22364: IFFALSE 22373
// YouLost ( Powell ) ;
22366: LD_STRING Powell
22368: PPUSH
22369: CALL_OW 104
// if unit = JMM then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_EXP 23
22382: EQUAL
22383: IFFALSE 22392
// YouLost ( JMM ) ;
22385: LD_STRING JMM
22387: PPUSH
22388: CALL_OW 104
// if unit in arEscapist then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_EXP 56
22401: IN
22402: IFFALSE 22420
// arEscapist := arEscapist diff unit ;
22404: LD_ADDR_EXP 56
22408: PUSH
22409: LD_EXP 56
22413: PUSH
22414: LD_VAR 0 1
22418: DIFF
22419: ST_TO_ADDR
// if unit in arAttackersInf then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_EXP 57
22429: IN
22430: IFFALSE 22448
// arAttackersInf := arAttackersInf diff unit ;
22432: LD_ADDR_EXP 57
22436: PUSH
22437: LD_EXP 57
22441: PUSH
22442: LD_VAR 0 1
22446: DIFF
22447: ST_TO_ADDR
// if unit in arAttackersVeh then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_EXP 58
22457: IN
22458: IFFALSE 22476
// arAttackersVeh := arAttackersVeh diff unit ;
22460: LD_ADDR_EXP 58
22464: PUSH
22465: LD_EXP 58
22469: PUSH
22470: LD_VAR 0 1
22474: DIFF
22475: ST_TO_ADDR
// if unit = Khatam then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_EXP 36
22485: EQUAL
22486: IFFALSE 22496
// khatamStatus := false ;
22488: LD_ADDR_EXP 5
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// if unit = epsilon then
22496: LD_VAR 0 1
22500: PUSH
22501: LD_EXP 10
22505: EQUAL
22506: IFFALSE 22537
// begin hasBase := false ;
22508: LD_ADDR_EXP 9
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// epsilon := 0 ;
22516: LD_ADDR_EXP 10
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; if unit = Khatam then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_EXP 36
22546: EQUAL
22547: IFFALSE 22559
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_STRING 10_KhatamStatus_1
22554: PPUSH
22555: CALL_OW 39
// if unit in ruForces then
22559: LD_VAR 0 1
22563: PUSH
22564: LD_EXP 59
22568: IN
22569: IFFALSE 22587
// ruForces := ruForces diff unit ;
22571: LD_ADDR_EXP 59
22575: PUSH
22576: LD_EXP 59
22580: PUSH
22581: LD_VAR 0 1
22585: DIFF
22586: ST_TO_ADDR
// if unit in ruForces2 then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 60
22596: IN
22597: IFFALSE 22615
// ruForces2 := ruForces2 diff unit ;
22599: LD_ADDR_EXP 60
22603: PUSH
22604: LD_EXP 60
22608: PUSH
22609: LD_VAR 0 1
22613: DIFF
22614: ST_TO_ADDR
// if unit in ruTanks then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_EXP 79
22624: IN
22625: IFFALSE 22643
// ruTanks := ruTanks diff unit ;
22627: LD_ADDR_EXP 79
22631: PUSH
22632: LD_EXP 79
22636: PUSH
22637: LD_VAR 0 1
22641: DIFF
22642: ST_TO_ADDR
// if unit in ruTanks2 then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 80
22652: IN
22653: IFFALSE 22671
// ruTanks2 := ruTanks2 diff unit ;
22655: LD_ADDR_EXP 80
22659: PUSH
22660: LD_EXP 80
22664: PUSH
22665: LD_VAR 0 1
22669: DIFF
22670: ST_TO_ADDR
// if unit in ruExtraTanks then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_EXP 81
22680: IN
22681: IFFALSE 22699
// ruExtraTanks := ruExtraTanks diff unit ;
22683: LD_ADDR_EXP 81
22687: PUSH
22688: LD_EXP 81
22692: PUSH
22693: LD_VAR 0 1
22697: DIFF
22698: ST_TO_ADDR
// if unit in ruMech then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 63
22708: IN
22709: IFFALSE 22727
// ruMech := ruMech diff unit ;
22711: LD_ADDR_EXP 63
22715: PUSH
22716: LD_EXP 63
22720: PUSH
22721: LD_VAR 0 1
22725: DIFF
22726: ST_TO_ADDR
// if unit in ruMech2 then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_EXP 64
22736: IN
22737: IFFALSE 22755
// ruMech2 := ruMech2 diff unit ;
22739: LD_ADDR_EXP 64
22743: PUSH
22744: LD_EXP 64
22748: PUSH
22749: LD_VAR 0 1
22753: DIFF
22754: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 266
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: IN
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 255
22785: PUSH
22786: LD_INT 3
22788: EQUAL
22789: AND
22790: IFFALSE 22946
// begin if IsInArea ( unit , ruBaseArea ) then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_EXP 66
22801: PPUSH
22802: CALL_OW 308
22806: IFFALSE 22869
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22808: LD_ADDR_EXP 76
22812: PUSH
22813: LD_EXP 76
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 266
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 250
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 251
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 254
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL 93008 0 2
22868: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_EXP 67
22878: PPUSH
22879: CALL_OW 308
22883: IFFALSE 22946
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22885: LD_ADDR_EXP 77
22889: PUSH
22890: LD_EXP 77
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 266
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 254
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL 93008 0 2
22945: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: IN
22980: IFFALSE 22990
// ruTransportDestroyed := true ;
22982: LD_ADDR_EXP 78
22986: PUSH
22987: LD_INT 1
22989: ST_TO_ADDR
// end ;
22990: PPOPN 1
22992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 7
23005: EQUAL
23006: IFFALSE 23020
// SetTag ( un , 0 ) ;
23008: LD_VAR 0 1
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 109
// end ;
23020: PPOPN 3
23022: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: IN
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 266
23067: PUSH
23068: LD_INT 3
23070: EQUAL
23071: AND
23072: PUSH
23073: LD_VAR 0 2
23077: PPUSH
23078: CALL_OW 256
23082: PUSH
23083: LD_INT 1000
23085: LESS
23086: AND
23087: IFFALSE 23113
// begin SetTag ( un , 0 ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 109
// SetLives ( un , 1000 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 1000
23108: PPUSH
23109: CALL_OW 234
// end ; end ;
23113: PPOPN 2
23115: END
// on UnitGoesToRed ( un ) do var i ;
23116: LD_INT 0
23118: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_EXP 36
23128: EQUAL
23129: PUSH
23130: LD_EXP 36
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 8
23142: EQUAL
23143: AND
23144: IFFALSE 23155
// KillUnit ( Khatam ) ;
23146: LD_EXP 36
23150: PPUSH
23151: CALL_OW 66
// end ;
23155: PPOPN 2
23157: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23158: LD_EXP 6
23162: NOT
23163: IFFALSE 23197
// begin seenRussianTeleport := true ;
23165: LD_ADDR_EXP 6
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: CALL 26535 0 2
// end ; end ;
23197: PPOPN 1
23199: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 266
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 6
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 5
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: AND
23243: IFFALSE 23362
// begin for i := 1 to rand ( 2 , 4 ) do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 2
23257: PPUSH
23258: LD_INT 4
23260: PPUSH
23261: CALL_OW 12
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23360
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 12
23295: MINUS
23296: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 251
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PPUSH
23316: LD_INT 2
23318: PPUSH
23319: CALL_OW 12
23323: PLUS
23324: ST_TO_ADDR
// if ValidHex ( x , y ) then
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 488
23339: IFFALSE 23358
// MineExplosion ( x , y , 10 ) ;
23341: LD_VAR 0 5
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_INT 10
23353: PPUSH
23354: CALL_OW 453
// end ;
23358: GO 23266
23360: POP
23361: POP
// end ; end ;
23362: PPOPN 6
23364: END
// on VehicleConstructed ( veh , fac ) do var side ;
23365: LD_INT 0
23367: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL 49907 0 2
// side := GetSide ( fac ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 255
23396: ST_TO_ADDR
// if side = 3 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23589
// begin if IsInArea ( fac , ruBaseArea ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_EXP 66
23416: PPUSH
23417: CALL_OW 308
23421: IFFALSE 23498
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23423: LD_ADDR_EXP 70
23427: PUSH
23428: LD_EXP 70
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 3
23440: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 263
23450: PUSH
23451: LD_INT 1
23453: EQUAL
23454: IFFALSE 23478
// ruTanks := Join ( ruTanks , veh ) else
23456: LD_ADDR_EXP 79
23460: PUSH
23461: LD_EXP 79
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL 93008 0 2
23475: ST_TO_ADDR
23476: GO 23498
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23478: LD_ADDR_EXP 81
23482: PUSH
23483: LD_EXP 81
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 93008 0 2
23497: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_EXP 67
23507: PPUSH
23508: CALL_OW 308
23512: IFFALSE 23589
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23514: LD_ADDR_EXP 71
23518: PUSH
23519: LD_EXP 71
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 3
23531: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23569
// ruTanks2 := Join ( ruTanks2 , veh ) else
23547: LD_ADDR_EXP 80
23551: PUSH
23552: LD_EXP 80
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL 93008 0 2
23566: ST_TO_ADDR
23567: GO 23589
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23569: LD_ADDR_EXP 81
23573: PUSH
23574: LD_EXP 81
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 93008 0 2
23588: ST_TO_ADDR
// end ; end ; end ;
23589: PPOPN 3
23591: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// begin side := GetSide ( driver ) ;
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: ST_TO_ADDR
// if side = 5 then
23612: LD_VAR 0 7
23616: PUSH
23617: LD_INT 5
23619: EQUAL
23620: IFFALSE 23700
// begin arAttackersVeh := arAttackersVeh diff driver ;
23622: LD_ADDR_EXP 58
23626: PUSH
23627: LD_EXP 58
23631: PUSH
23632: LD_VAR 0 1
23636: DIFF
23637: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 189
23645: PPUSH
23646: LD_INT 80
23648: PPUSH
23649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23653: LD_INT 35
23655: PPUSH
23656: CALL_OW 67
// if not IsOk ( driver ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 24224
// until IsAt ( driver , 189 , 80 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 189
23681: PPUSH
23682: LD_INT 80
23684: PPUSH
23685: CALL_OW 307
23689: IFFALSE 23653
// RemoveUnit ( driver ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 64
// end ; if side = 6 then
23700: LD_VAR 0 7
23704: PUSH
23705: LD_INT 6
23707: EQUAL
23708: IFFALSE 23766
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 19
23717: PPUSH
23718: CALL_OW 113
// wait ( 0 0$3 ) ;
23722: LD_INT 105
23724: PPUSH
23725: CALL_OW 67
// if not IsOk ( driver ) then
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 302
23738: NOT
23739: IFFALSE 23743
// exit ;
23741: GO 24224
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 19
23750: PPUSH
23751: CALL_OW 308
23755: IFFALSE 23710
// RemoveUnit ( driver ) ;
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 64
// end ; if side = 3 then
23766: LD_VAR 0 7
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: IFFALSE 24224
// begin if driver in ruMech then
23776: LD_VAR 0 1
23780: PUSH
23781: LD_EXP 63
23785: IN
23786: IFFALSE 24000
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_EXP 66
23797: PPUSH
23798: CALL_OW 113
// SetTag ( driver , tMech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_INT 7
23809: PPUSH
23810: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 66
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 50
23846: PUSH
23847: EMPTY
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// if fac then
23860: LD_VAR 0 6
23864: IFFALSE 23886
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23866: LD_VAR 0 1
23870: PPUSH
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PPUSH
23880: CALL_OW 180
// exit ;
23884: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_EXP 66
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 62
23939: PUSH
23940: EMPTY
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 50
23949: PUSH
23950: EMPTY
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: ST_TO_ADDR
// if arm then
23964: LD_VAR 0 5
23968: IFFALSE 24000
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_VAR 0 5
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 64
24009: IN
24010: IFFALSE 24224
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 67
24021: PPUSH
24022: CALL_OW 113
// SetTag ( driver , tMech ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24038: LD_ADDR_VAR 0 6
24042: PUSH
24043: LD_EXP 67
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 50
24070: PUSH
24071: EMPTY
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if fac then
24084: LD_VAR 0 6
24088: IFFALSE 24110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 6
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: CALL_OW 180
// exit ;
24108: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 67
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 62
24163: PUSH
24164: EMPTY
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 50
24173: PUSH
24174: EMPTY
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 70
24187: ST_TO_ADDR
// if arm then
24188: LD_VAR 0 5
24192: IFFALSE 24224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 5
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// end ; end ; end ; end ;
24224: PPOPN 7
24226: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24227: LD_OWVAR 57
24231: IFFALSE 24245
// begin end_the_mission_allowed := false ;
24233: LD_ADDR_OWVAR 57
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// FinishMission ;
24241: CALL 31983 0 0
// end ; end ;
24245: PPOPN 1
24247: END
// on BuildingComplete ( b ) do var side , type ;
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// begin side := GetSide ( b ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// type := GetBType ( b ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: ST_TO_ADDR
// if side = 2 then
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: EQUAL
24290: IFFALSE 24310
// arBuildings := Delete ( arBuildings , 1 ) ;
24292: LD_ADDR_EXP 53
24296: PUSH
24297: LD_EXP 53
24301: PPUSH
24302: LD_INT 1
24304: PPUSH
24305: CALL_OW 3
24309: ST_TO_ADDR
// if side = 1 then
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: EQUAL
24318: IFFALSE 24380
// if type = b_depot and not hasBase then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: PUSH
24329: LD_EXP 9
24333: NOT
24334: AND
24335: IFFALSE 24380
// begin hasBase := true ;
24337: LD_ADDR_EXP 9
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// epsilon := b ;
24345: LD_ADDR_EXP 10
24349: PUSH
24350: LD_VAR 0 1
24354: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_STRING epsilon
24362: PPUSH
24363: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24367: LD_INT 0
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_INT 0
24375: PPUSH
24376: CALL_OW 324
// end ; if side = 3 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 3
24387: EQUAL
24388: IFFALSE 24674
// begin if IsInArea ( b , ruBaseArea ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 66
24399: PPUSH
24400: CALL_OW 308
24404: IFFALSE 24424
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24406: LD_ADDR_EXP 76
24410: PUSH
24411: LD_EXP 76
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 67
24433: PPUSH
24434: CALL_OW 308
24438: IFFALSE 24458
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24440: LD_ADDR_EXP 77
24444: PUSH
24445: LD_EXP 77
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: IN
24477: IFFALSE 24488
// ComUpgrade ( b ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 146
// if type = b_lab then
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 6
24495: EQUAL
24496: IFFALSE 24540
// if IsInArea ( b , ruBaseArea ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_EXP 66
24507: PPUSH
24508: CALL_OW 308
24512: IFFALSE 24528
// ComUpgradeLab ( b , b_lab_weapon ) else
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 10
24521: PPUSH
24522: CALL_OW 147
24526: GO 24540
// ComUpgradeLab ( b , b_lab_computer ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 12
24535: PPUSH
24536: CALL_OW 147
// if type = b_depot then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24674
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 274
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 2550
24565: PPUSH
24566: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 274
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: LD_INT 250
24585: PPUSH
24586: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 274
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: LD_INT 200
24605: PPUSH
24606: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_EXP 66
24619: PPUSH
24620: CALL_OW 308
24624: IFFALSE 24648
// begin ruBase := b ;
24626: LD_ADDR_EXP 68
24630: PUSH
24631: LD_VAR 0 1
24635: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24636: LD_VAR 0 1
24640: PPUSH
24641: LD_STRING chuikov
24643: PPUSH
24644: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 67
24657: PPUSH
24658: CALL_OW 308
24662: IFFALSE 24674
// begin ruBase2 := b ;
24664: LD_ADDR_EXP 69
24668: PUSH
24669: LD_VAR 0 1
24673: ST_TO_ADDR
// end ; end ; end ; end ;
24674: PPOPN 3
24676: END
// on UpgradeComplete ( b ) do var side , type ;
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin side := GetSide ( b ) ;
24681: LD_ADDR_VAR 0 2
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: ST_TO_ADDR
// type := GetBType ( b ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: ST_TO_ADDR
// if side = 3 then
24711: LD_VAR 0 2
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 24773
// if type = b_lab_half then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 7
24728: EQUAL
24729: IFFALSE 24773
// if IsInArea ( b , ruBaseArea ) then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 66
24740: PPUSH
24741: CALL_OW 308
24745: IFFALSE 24761
// ComUpgradeLab ( b , b_lab_spacetime ) else
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_INT 14
24754: PPUSH
24755: CALL_OW 147
24759: GO 24773
// ComUpgradeLab ( b , b_lab_siberium ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: LD_INT 11
24768: PPUSH
24769: CALL_OW 147
// end ;
24773: PPOPN 3
24775: END
// on ResearchComplete ( tech , lab ) do var side ;
24776: LD_INT 0
24778: PPUSH
// begin side := GetSide ( lab ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 255
24793: ST_TO_ADDR
// if side = 2 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24850
// begin arTech := Delete ( arTech , 1 ) ;
24804: LD_ADDR_EXP 52
24808: PUSH
24809: LD_EXP 52
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 3
24821: ST_TO_ADDR
// if tech = tech_sibPow then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 21
24829: EQUAL
24830: IFFALSE 24836
// DArabTrait1 ;
24832: CALL 28897 0 0
// if tech = tech_sibEng then
24836: LD_VAR 0 1
24840: PUSH
24841: LD_INT 22
24843: EQUAL
24844: IFFALSE 24850
// DArabTrait2 ;
24846: CALL 29228 0 0
// end ; end ;
24850: PPOPN 3
24852: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL 49891 0 1
// end ;
24862: PPOPN 1
24864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 1
24872: EQUAL
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 81
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: AND
24899: IFFALSE 24905
// DAttackOnAlly ;
24901: CALL 26613 0 0
// end ;
24905: PPOPN 2
24907: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 101
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24928
24921: POP
// ArabAttack ; ERussianBaseC :
24922: CALL 7224 0 0
24926: GO 25080
24928: LD_INT 102
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24957
24936: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24937: LD_EXP 59
24941: PUSH
24942: LD_EXP 61
24946: UNION
24947: PPUSH
24948: LD_INT 1
24950: PPUSH
24951: CALL 10861 0 2
24955: GO 25080
24957: LD_INT 103
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24986
24965: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24966: LD_EXP 59
24970: PUSH
24971: LD_EXP 61
24975: UNION
24976: PPUSH
24977: LD_INT 2
24979: PPUSH
24980: CALL 10861 0 2
24984: GO 25080
24986: LD_INT 104
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25015
24994: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24995: LD_EXP 59
24999: PUSH
25000: LD_EXP 61
25004: UNION
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL 10861 0 2
25013: GO 25080
25015: LD_INT 105
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25044
25023: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25024: LD_EXP 60
25028: PUSH
25029: LD_EXP 62
25033: UNION
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL 12370 0 2
25042: GO 25080
25044: LD_INT 106
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25059
25052: POP
// RussianExtraAttack ; ESendRussianAttack :
25053: CALL 20205 0 0
25057: GO 25080
25059: LD_INT 107
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25079
25067: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25068: LD_EXP 18
25072: PPUSH
25073: CALL 21299 0 1
25077: GO 25080
25079: POP
// end ; end_of_file
25080: PPOPN 1
25082: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_EXP 23
25102: PUSH
25103: LD_EXP 24
25107: PUSH
25108: LD_EXP 25
25112: PUSH
25113: LD_EXP 26
25117: PUSH
25118: LD_EXP 27
25122: PUSH
25123: LD_EXP 28
25127: PUSH
25128: LD_EXP 29
25132: PUSH
25133: LD_EXP 30
25137: PUSH
25138: LD_EXP 31
25142: PUSH
25143: LD_EXP 32
25147: PUSH
25148: LD_EXP 33
25152: PUSH
25153: LD_EXP 34
25157: PUSH
25158: LD_EXP 35
25162: PUSH
25163: LD_EXP 36
25167: PUSH
25168: LD_EXP 37
25172: PUSH
25173: LD_EXP 38
25177: PUSH
25178: LD_EXP 39
25182: PUSH
25183: LD_EXP 40
25187: PUSH
25188: LD_EXP 42
25192: PUSH
25193: LD_EXP 44
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: DIFF
25220: ST_TO_ADDR
// if not characters then
25221: LD_VAR 0 1
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25314
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_VAR 0 1
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL 57399 0 1
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25259: LD_VAR 0 6
25263: PPUSH
25264: CALL_OW 258
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25290
// Say ( speaker , dialogMID ) else
25274: LD_VAR 0 6
25278: PPUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 88
25288: GO 25304
// Say ( speaker , dialogFID ) ;
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 88
// result := speaker ;
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_VAR 0 6
25313: ST_TO_ADDR
// end ; end_of_file
25314: LD_VAR 0 4
25318: RET
// export function Action ; begin
25319: LD_INT 0
25321: PPUSH
// InGameOn ;
25322: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25326: LD_INT 25
25328: PPUSH
25329: LD_INT 35
25331: PPUSH
25332: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25336: LD_INT 1
25338: PPUSH
25339: LD_INT 5
25341: PPUSH
25342: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25346: LD_INT 1
25348: PPUSH
25349: LD_INT 4
25351: PPUSH
25352: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25356: LD_INT 52
25358: PPUSH
25359: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25363: LD_EXP 33
25367: PPUSH
25368: CALL_OW 87
// wait ( 0 0$3 ) ;
25372: LD_INT 105
25374: PPUSH
25375: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25379: LD_EXP 23
25383: PPUSH
25384: CALL_OW 310
25388: PPUSH
25389: CALL_OW 85
// wait ( 0 0$1 ) ;
25393: LD_INT 35
25395: PPUSH
25396: CALL_OW 67
// if IsOk ( Gary ) then
25400: LD_EXP 32
25404: PPUSH
25405: CALL_OW 302
25409: IFFALSE 25447
// begin Say ( Gary , D2-Gary-1 ) ;
25411: LD_EXP 32
25415: PPUSH
25416: LD_STRING D2-Gary-1
25418: PPUSH
25419: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25423: LD_EXP 23
25427: PPUSH
25428: LD_STRING D2-JMM-1
25430: PPUSH
25431: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25435: LD_EXP 32
25439: PPUSH
25440: LD_STRING D2-Gary-2
25442: PPUSH
25443: CALL_OW 88
// end ; InGameOff ;
25447: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25451: LD_STRING M1
25453: PPUSH
25454: CALL_OW 337
// SaveForQuickRestart ;
25458: CALL_OW 22
// end ;
25462: LD_VAR 0 1
25466: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25467: LD_EXP 23
25471: PPUSH
25472: LD_EXP 33
25476: PPUSH
25477: CALL_OW 296
25481: PUSH
25482: LD_INT 15
25484: LESS
25485: IFFALSE 26445
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
// begin wait ( 0 0$3 ) ;
25494: LD_INT 105
25496: PPUSH
25497: CALL_OW 67
// Video ( true ) ;
25501: LD_INT 1
25503: PPUSH
25504: CALL 92980 0 1
// ComExitVehicle ( JMM ) ;
25508: LD_EXP 23
25512: PPUSH
25513: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25517: LD_EXP 23
25521: PPUSH
25522: LD_EXP 33
25526: PPUSH
25527: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25531: LD_EXP 23
25535: PPUSH
25536: CALL_OW 87
// if Truman then
25540: LD_EXP 43
25544: IFFALSE 25681
// begin ComMoveUnit ( Truman , JMM ) ;
25546: LD_EXP 43
25550: PPUSH
25551: LD_EXP 23
25555: PPUSH
25556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25560: LD_INT 35
25562: PPUSH
25563: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25567: LD_EXP 43
25571: PPUSH
25572: LD_EXP 23
25576: PPUSH
25577: CALL_OW 296
25581: PUSH
25582: LD_INT 6
25584: LESS
25585: IFFALSE 25560
// ComTurnUnit ( Truman , JMM ) ;
25587: LD_EXP 43
25591: PPUSH
25592: LD_EXP 23
25596: PPUSH
25597: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25601: LD_EXP 23
25605: PPUSH
25606: LD_EXP 43
25610: PPUSH
25611: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25615: LD_EXP 43
25619: PPUSH
25620: LD_STRING D2-Tru-1
25622: PPUSH
25623: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25627: LD_EXP 23
25631: PPUSH
25632: LD_STRING D2-JMM-Tru-1
25634: PPUSH
25635: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25639: LD_EXP 43
25643: PPUSH
25644: LD_STRING D2-Tru-2
25646: PPUSH
25647: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25651: LD_EXP 43
25655: PPUSH
25656: LD_INT 79
25658: PPUSH
25659: LD_INT 41
25661: PPUSH
25662: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25666: LD_EXP 43
25670: PPUSH
25671: LD_INT 17
25673: PPUSH
25674: LD_INT 31
25676: PPUSH
25677: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25681: LD_EXP 23
25685: PPUSH
25686: LD_EXP 33
25690: PPUSH
25691: CALL_OW 179
// p := 15 ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 15
25702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25703: LD_INT 35
25705: PPUSH
25706: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25710: LD_EXP 33
25714: PUSH
25715: LD_EXP 35
25719: PUSH
25720: LD_EXP 34
25724: PUSH
25725: LD_EXP 36
25729: PUSH
25730: LD_EXP 30
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: LD_EXP 23
25746: PPUSH
25747: CALL_OW 112
// p := p - 1 ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 2
25760: PUSH
25761: LD_INT 1
25763: MINUS
25764: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25765: LD_EXP 23
25769: PPUSH
25770: LD_EXP 33
25774: PPUSH
25775: CALL_OW 296
25779: PUSH
25780: LD_INT 5
25782: LESS
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 0
25791: LESSEQUAL
25792: OR
25793: IFFALSE 25703
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25795: LD_EXP 33
25799: PUSH
25800: LD_EXP 35
25804: PUSH
25805: LD_EXP 34
25809: PUSH
25810: LD_EXP 36
25814: PUSH
25815: LD_EXP 30
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: PPUSH
25827: LD_EXP 23
25831: PPUSH
25832: CALL_OW 119
// if not IsInUnit ( JMM ) then
25836: LD_EXP 23
25840: PPUSH
25841: CALL_OW 310
25845: NOT
25846: IFFALSE 25862
// ComTurnUnit ( JMM , Simms ) ;
25848: LD_EXP 23
25852: PPUSH
25853: LD_EXP 33
25857: PPUSH
25858: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25862: LD_EXP 33
25866: PUSH
25867: LD_EXP 35
25871: PUSH
25872: LD_EXP 34
25876: PUSH
25877: LD_EXP 36
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PPUSH
25888: LD_EXP 23
25892: PPUSH
25893: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
25897: LD_EXP 23
25901: PUSH
25902: LD_EXP 33
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
25915: LD_EXP 33
25919: PPUSH
25920: LD_STRING D2a-Sim-1
25922: PPUSH
25923: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
25927: LD_EXP 23
25931: PPUSH
25932: LD_STRING D2a-JMM-1
25934: PPUSH
25935: CALL_OW 88
// if IsOk ( Joan ) then
25939: LD_EXP 35
25943: PPUSH
25944: CALL_OW 302
25948: IFFALSE 26026
// begin if not IsInUnit ( JMM ) then
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 310
25959: NOT
25960: IFFALSE 25976
// ComTurnUnit ( JMM , Joan ) ;
25962: LD_EXP 23
25966: PPUSH
25967: LD_EXP 35
25971: PPUSH
25972: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
25976: LD_EXP 35
25980: PPUSH
25981: LD_EXP 23
25985: PPUSH
25986: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
25990: LD_EXP 35
25994: PPUSH
25995: LD_STRING D2b-Joan-1
25997: PPUSH
25998: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26002: LD_EXP 23
26006: PPUSH
26007: LD_STRING D2b-JMM-1
26009: PPUSH
26010: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26014: LD_EXP 35
26018: PPUSH
26019: LD_STRING D2b-Joan-2
26021: PPUSH
26022: CALL_OW 88
// end ; if IsOk ( Denis ) then
26026: LD_EXP 34
26030: PPUSH
26031: CALL_OW 302
26035: IFFALSE 26089
// begin if not IsInUnit ( JMM ) then
26037: LD_EXP 23
26041: PPUSH
26042: CALL_OW 310
26046: NOT
26047: IFFALSE 26063
// ComTurnUnit ( JMM , Denis ) ;
26049: LD_EXP 23
26053: PPUSH
26054: LD_EXP 34
26058: PPUSH
26059: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26063: LD_EXP 34
26067: PPUSH
26068: LD_EXP 23
26072: PPUSH
26073: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26077: LD_EXP 34
26081: PPUSH
26082: LD_STRING D2c-Den-1
26084: PPUSH
26085: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26089: LD_EXP 30
26093: PPUSH
26094: CALL_OW 302
26098: PUSH
26099: LD_STRING 08_Kikuchi
26101: PPUSH
26102: CALL_OW 28
26106: NOT
26107: AND
26108: IFFALSE 26203
// begin repeat wait ( 0 0$1 ) ;
26110: LD_INT 35
26112: PPUSH
26113: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26117: LD_EXP 30
26121: PPUSH
26122: LD_EXP 23
26126: PPUSH
26127: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26131: LD_EXP 23
26135: PPUSH
26136: LD_EXP 30
26140: PPUSH
26141: CALL_OW 296
26145: PUSH
26146: LD_INT 5
26148: LESS
26149: IFFALSE 26110
// ComTurnUnit ( Kikuchi , JMM ) ;
26151: LD_EXP 30
26155: PPUSH
26156: LD_EXP 23
26160: PPUSH
26161: CALL_OW 119
// if not IsInUnit ( JMM ) then
26165: LD_EXP 23
26169: PPUSH
26170: CALL_OW 310
26174: NOT
26175: IFFALSE 26191
// ComTurnUnit ( JMM , Kikuchi ) ;
26177: LD_EXP 23
26181: PPUSH
26182: LD_EXP 30
26186: PPUSH
26187: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26191: LD_EXP 30
26195: PPUSH
26196: LD_STRING D3b-Yam-1
26198: PPUSH
26199: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26203: LD_EXP 36
26207: PPUSH
26208: CALL_OW 302
26212: IFFALSE 26278
// begin if not IsInUnit ( JMM ) then
26214: LD_EXP 23
26218: PPUSH
26219: CALL_OW 310
26223: NOT
26224: IFFALSE 26240
// ComTurnUnit ( JMM , Khatam ) ;
26226: LD_EXP 23
26230: PPUSH
26231: LD_EXP 36
26235: PPUSH
26236: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26240: LD_EXP 36
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_STRING D2c-JMM-1
26261: PPUSH
26262: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26266: LD_EXP 36
26270: PPUSH
26271: LD_STRING D2c-Khat-1
26273: PPUSH
26274: CALL_OW 88
// end ; Video ( false ) ;
26278: LD_INT 0
26280: PPUSH
26281: CALL 92980 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26285: LD_INT 22
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: PUSH
26300: LD_EXP 43
26304: DIFF
26305: PPUSH
26306: LD_INT 1
26308: PPUSH
26309: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26313: LD_STRING M1a
26315: PPUSH
26316: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26320: LD_INT 0
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 324
// joinedToEpsilon := true ;
26333: LD_ADDR_EXP 7
26337: PUSH
26338: LD_INT 1
26340: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26341: LD_INT 1050
26343: PPUSH
26344: CALL_OW 67
// SpawnConvoy ;
26348: CALL 10397 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26352: LD_INT 25200
26354: PUSH
26355: LD_INT 2100
26357: PUSH
26358: LD_OWVAR 67
26362: MUL
26363: MINUS
26364: PPUSH
26365: CALL_OW 67
// firstAttack := true ;
26369: LD_ADDR_EXP 16
26373: PUSH
26374: LD_INT 1
26376: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26377: LD_INT 107
26379: PPUSH
26380: CALL_OW 427
// for i := 1 to Difficulty do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: DOUBLE
26390: LD_INT 1
26392: DEC
26393: ST_TO_ADDR
26394: LD_OWVAR 67
26398: PUSH
26399: FOR_TO
26400: IFFALSE 26443
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26402: LD_INT 25200
26404: PUSH
26405: LD_INT 2100
26407: PUSH
26408: LD_OWVAR 67
26412: MUL
26413: MINUS
26414: PPUSH
26415: CALL_OW 67
// if not ruActiveAttacks then
26419: LD_EXP 22
26423: NOT
26424: IFFALSE 26434
// ruActiveAttacks := true ;
26426: LD_ADDR_EXP 22
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26434: LD_INT 107
26436: PPUSH
26437: CALL_OW 427
// end ;
26441: GO 26399
26443: POP
26444: POP
// end ;
26445: PPOPN 2
26447: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26448: LD_EXP 43
26452: PPUSH
26453: CALL_OW 302
26457: PUSH
26458: LD_EXP 7
26462: AND
26463: IFFALSE 26534
26465: GO 26467
26467: DISABLE
// begin enable ;
26468: ENABLE
// if not HasTask ( Truman ) then
26469: LD_EXP 43
26473: PPUSH
26474: CALL_OW 314
26478: NOT
26479: IFFALSE 26493
// ComMoveToArea ( Truman , removeArea ) ;
26481: LD_EXP 43
26485: PPUSH
26486: LD_INT 10
26488: PPUSH
26489: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26493: LD_EXP 43
26497: PPUSH
26498: LD_INT 17
26500: PPUSH
26501: LD_INT 32
26503: PPUSH
26504: CALL_OW 307
26508: PUSH
26509: LD_EXP 43
26513: PPUSH
26514: LD_INT 10
26516: PPUSH
26517: CALL_OW 308
26521: OR
26522: IFFALSE 26534
// begin RemoveUnit ( Truman ) ;
26524: LD_EXP 43
26528: PPUSH
26529: CALL_OW 64
// disable ;
26533: DISABLE
// end ; end ;
26534: END
// export function DTankTeleport ( x , y ) ; begin
26535: LD_INT 0
26537: PPUSH
// DialogueOn ;
26538: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: CALL_OW 86
// if IsOk ( Cyrus ) then
26556: LD_EXP 27
26560: PPUSH
26561: CALL_OW 302
26565: IFFALSE 26581
// Say ( Cyrus , D10-Cyrus-1 ) else
26567: LD_EXP 27
26571: PPUSH
26572: LD_STRING D10-Cyrus-1
26574: PPUSH
26575: CALL_OW 88
26579: GO 26604
// if IsOk ( JMM ) then
26581: LD_EXP 23
26585: PPUSH
26586: CALL_OW 302
26590: IFFALSE 26604
// Say ( JMM , D10-JMM-1 ) ;
26592: LD_EXP 23
26596: PPUSH
26597: LD_STRING D10-JMM-1
26599: PPUSH
26600: CALL_OW 88
// DialogueOff ;
26604: CALL_OW 7
// end ;
26608: LD_VAR 0 3
26612: RET
// export function DAttackOnAlly ; begin
26613: LD_INT 0
26615: PPUSH
// DialogueOn ;
26616: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26620: LD_INT 10
26622: PPUSH
26623: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26627: LD_EXP 44
26631: PPUSH
26632: LD_STRING D6b-Pow-1
26634: PPUSH
26635: CALL_OW 94
// YouLost ( Powell ) ;
26639: LD_STRING Powell
26641: PPUSH
26642: CALL_OW 104
// DialogueOff ;
26646: CALL_OW 7
// end ;
26650: LD_VAR 0 1
26654: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26655: LD_INT 5
26657: PPUSH
26658: LD_INT 22
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 70
26686: PUSH
26687: LD_INT 5
26689: PPUSH
26690: LD_INT 22
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 21
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 70
26718: OR
26719: PUSH
26720: LD_INT 1
26722: PPUSH
26723: LD_INT 2
26725: PPUSH
26726: CALL_OW 81
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: AND
26735: IFFALSE 26970
26737: GO 26739
26739: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26740: LD_INT 5
26742: PPUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 70
26771: PUSH
26772: LD_INT 5
26774: PPUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 21
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 70
26803: OR
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_INT 2
26810: PPUSH
26811: CALL_OW 81
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: AND
26820: IFFALSE 26829
// Query ( QAttack ) ;
26822: LD_STRING QAttack
26824: PPUSH
26825: CALL_OW 97
// wait ( 0 0$20 ) ;
26829: LD_INT 700
26831: PPUSH
26832: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26836: LD_INT 350
26838: PPUSH
26839: CALL_OW 67
// if arabianAttack then
26843: LD_EXP 4
26847: IFFALSE 26851
// exit ;
26849: GO 26970
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26851: LD_INT 5
26853: PPUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 70
26882: PUSH
26883: LD_INT 5
26885: PPUSH
26886: LD_INT 22
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 70
26914: OR
26915: PUSH
26916: LD_INT 1
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 81
26926: PUSH
26927: LD_INT 1
26929: EQUAL
26930: AND
26931: IFFALSE 26836
// InGameOn ;
26933: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26937: LD_INT 73
26939: PPUSH
26940: LD_INT 18
26942: PPUSH
26943: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26947: LD_EXP 44
26951: PPUSH
26952: LD_STRING D6b-Pow-1
26954: PPUSH
26955: CALL_OW 94
// YouLost ( Powell ) ;
26959: LD_STRING Powell
26961: PPUSH
26962: CALL_OW 104
// InGameOff ;
26966: CALL_OW 9
// end ;
26970: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
26971: LD_INT 12
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 321
26981: PUSH
26982: LD_INT 2
26984: EQUAL
26985: IFFALSE 26997
26987: GO 26989
26989: DISABLE
// ChangeMissionObjectives ( M2b ) ;
26990: LD_STRING M2b
26992: PPUSH
26993: CALL_OW 337
26997: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
26998: LD_INT 32
27000: PPUSH
27001: LD_INT 1
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27017: LD_STRING M2c
27019: PPUSH
27020: CALL_OW 337
27024: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27025: LD_EXP 4
27029: PUSH
27030: LD_EXP 12
27034: AND
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 21
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: PUSH
27065: LD_INT 0
27067: EQUAL
27068: AND
27069: PUSH
27070: LD_EXP 58
27074: PPUSH
27075: LD_INT 50
27077: PUSH
27078: EMPTY
27079: LIST
27080: PPUSH
27081: CALL_OW 72
27085: PUSH
27086: LD_INT 0
27088: EQUAL
27089: AND
27090: PUSH
27091: LD_EXP 57
27095: PPUSH
27096: LD_INT 50
27098: PUSH
27099: EMPTY
27100: LIST
27101: PPUSH
27102: CALL_OW 72
27106: PUSH
27107: LD_INT 0
27109: EQUAL
27110: AND
27111: IFFALSE 27131
27113: GO 27115
27115: DISABLE
// begin arabianDefeated := true ;
27116: LD_ADDR_EXP 8
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27124: LD_STRING M4a
27126: PPUSH
27127: CALL_OW 337
// end ;
27131: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27132: LD_INT 54
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: CALL_OW 321
27142: PUSH
27143: LD_INT 2
27145: EQUAL
27146: PUSH
27147: LD_INT 55
27149: PPUSH
27150: LD_INT 1
27152: PPUSH
27153: CALL_OW 321
27157: PUSH
27158: LD_INT 2
27160: EQUAL
27161: AND
27162: PUSH
27163: LD_INT 21
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 321
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: AND
27178: PUSH
27179: LD_INT 22
27181: PPUSH
27182: LD_INT 1
27184: PPUSH
27185: CALL_OW 321
27189: PUSH
27190: LD_INT 2
27192: EQUAL
27193: AND
27194: IFFALSE 27206
27196: GO 27198
27198: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27199: LD_STRING M2a
27201: PPUSH
27202: CALL_OW 337
27206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27207: LD_INT 22
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 57
27222: PUSH
27223: EMPTY
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 63
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: IFFALSE 28475
27251: GO 27253
27253: DISABLE
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_EXP 32
27270: PPUSH
27271: CALL_OW 302
27275: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_EXP 39
27285: PPUSH
27286: CALL_OW 302
27290: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 50
27308: PUSH
27309: EMPTY
27310: LIST
27311: PUSH
27312: LD_INT 25
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 26
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PUSH
27343: LD_EXP 23
27347: PUSH
27348: LD_EXP 24
27352: PUSH
27353: LD_EXP 25
27357: PUSH
27358: LD_EXP 26
27362: PUSH
27363: LD_EXP 27
27367: PUSH
27368: LD_EXP 28
27372: PUSH
27373: LD_EXP 29
27377: PUSH
27378: LD_EXP 30
27382: PUSH
27383: LD_EXP 31
27387: PUSH
27388: LD_EXP 32
27392: PUSH
27393: LD_EXP 33
27397: PUSH
27398: LD_EXP 34
27402: PUSH
27403: LD_EXP 35
27407: PUSH
27408: LD_EXP 36
27412: PUSH
27413: LD_EXP 37
27417: PUSH
27418: LD_EXP 38
27422: PUSH
27423: LD_EXP 39
27427: PUSH
27428: LD_EXP 40
27432: PUSH
27433: LD_EXP 42
27437: PUSH
27438: LD_EXP 44
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: DIFF
27465: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27466: LD_ADDR_VAR 0 4
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 50
27483: PUSH
27484: EMPTY
27485: LIST
27486: PUSH
27487: LD_INT 26
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 25
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 25
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 25
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_EXP 23
27551: PUSH
27552: LD_EXP 24
27556: PUSH
27557: LD_EXP 25
27561: PUSH
27562: LD_EXP 26
27566: PUSH
27567: LD_EXP 27
27571: PUSH
27572: LD_EXP 28
27576: PUSH
27577: LD_EXP 29
27581: PUSH
27582: LD_EXP 30
27586: PUSH
27587: LD_EXP 31
27591: PUSH
27592: LD_EXP 32
27596: PUSH
27597: LD_EXP 33
27601: PUSH
27602: LD_EXP 34
27606: PUSH
27607: LD_EXP 35
27611: PUSH
27612: LD_EXP 36
27616: PUSH
27617: LD_EXP 37
27621: PUSH
27622: LD_EXP 38
27626: PUSH
27627: LD_EXP 39
27631: PUSH
27632: LD_EXP 40
27636: PUSH
27637: LD_EXP 42
27641: PUSH
27642: LD_EXP 44
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: DIFF
27669: ST_TO_ADDR
// if tmp1 then
27670: LD_VAR 0 3
27674: IFFALSE 27690
// tmp1 := tmp1 [ 1 ] ;
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: ST_TO_ADDR
// if tmp2 then
27690: LD_VAR 0 4
27694: IFFALSE 27710
// tmp2 := tmp2 [ 1 ] ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_VAR 0 4
27719: OR
27720: PUSH
27721: LD_VAR 0 2
27725: PUSH
27726: LD_VAR 0 3
27730: OR
27731: AND
27732: IFFALSE 27926
// begin DialogueOn ;
27734: CALL_OW 6
// if deltaSpeaker then
27738: LD_VAR 0 2
27742: IFFALSE 27758
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27744: LD_EXP 39
27748: PPUSH
27749: LD_STRING D3-Sci1-1
27751: PPUSH
27752: CALL_OW 88
27756: GO 27770
// Say ( tmp1 , D3-Sci1-1 ) ;
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_STRING D3-Sci1-1
27765: PPUSH
27766: CALL_OW 88
// if garySpeaker then
27770: LD_VAR 0 1
27774: IFFALSE 27790
// Say ( Gary , D3-Gary-1 ) else
27776: LD_EXP 32
27780: PPUSH
27781: LD_STRING D3-Gary-1
27783: PPUSH
27784: CALL_OW 88
27788: GO 27802
// Say ( tmp2 , D3-Gary-1 ) ;
27790: LD_VAR 0 4
27794: PPUSH
27795: LD_STRING D3-Gary-1
27797: PPUSH
27798: CALL_OW 88
// if deltaSpeaker then
27802: LD_VAR 0 2
27806: IFFALSE 27822
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27808: LD_EXP 39
27812: PPUSH
27813: LD_STRING D3-Sci1-2
27815: PPUSH
27816: CALL_OW 88
27820: GO 27834
// Say ( tmp1 , D3-Sci1-2 ) ;
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_STRING D3-Sci1-2
27829: PPUSH
27830: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27834: LD_EXP 23
27838: PPUSH
27839: LD_STRING D3-JMM-2
27841: PPUSH
27842: CALL_OW 88
// if deltaSpeaker then
27846: LD_VAR 0 2
27850: IFFALSE 27866
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27852: LD_EXP 39
27856: PPUSH
27857: LD_STRING D3-Sci1-3
27859: PPUSH
27860: CALL_OW 88
27864: GO 27878
// Say ( tmp1 , D3-Sci1-3 ) ;
27866: LD_VAR 0 3
27870: PPUSH
27871: LD_STRING D3-Sci1-3
27873: PPUSH
27874: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
27878: LD_EXP 23
27882: PPUSH
27883: LD_STRING D3-JMM-3
27885: PPUSH
27886: CALL_OW 88
// if deltaSpeaker then
27890: LD_VAR 0 2
27894: IFFALSE 27910
// Say ( DeltaDoctor , D3-Sci1-4 ) else
27896: LD_EXP 39
27900: PPUSH
27901: LD_STRING D3-Sci1-4
27903: PPUSH
27904: CALL_OW 88
27908: GO 27922
// Say ( tmp1 , D3-Sci1-4 ) ;
27910: LD_VAR 0 3
27914: PPUSH
27915: LD_STRING D3-Sci1-4
27917: PPUSH
27918: CALL_OW 88
// DialogueOff ;
27922: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
27926: LD_INT 12
27928: PPUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
27939: LD_INT 40
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
27952: LD_INT 32
27954: PPUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 1
27960: PPUSH
27961: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
27965: LD_INT 33
27967: PPUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
27978: LD_INT 12
27980: PPUSH
27981: LD_INT 1
27983: PPUSH
27984: LD_INT 1
27986: PPUSH
27987: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
27991: LD_STRING M2
27993: PPUSH
27994: CALL_OW 337
// wait ( 3 3$0 ) ;
27998: LD_INT 6300
28000: PPUSH
28001: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28005: LD_INT 35
28007: PPUSH
28008: CALL_OW 67
// until not InBattle ( 1 ) ;
28012: LD_INT 1
28014: PPUSH
28015: CALL_OW 463
28019: NOT
28020: IFFALSE 28005
// if IsOk ( Simms ) and deltaSpeaker then
28022: LD_EXP 33
28026: PPUSH
28027: CALL_OW 302
28031: PUSH
28032: LD_VAR 0 2
28036: AND
28037: IFFALSE 28206
// begin DialogueOn ;
28039: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28043: LD_EXP 33
28047: PPUSH
28048: LD_STRING D3a-Sim-1
28050: PPUSH
28051: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28055: LD_EXP 39
28059: PPUSH
28060: LD_STRING D3a-Sci1-1
28062: PPUSH
28063: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28067: LD_EXP 33
28071: PPUSH
28072: LD_STRING D3a-Sim-2
28074: PPUSH
28075: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28079: LD_EXP 39
28083: PPUSH
28084: LD_STRING D3a-Sci1-2
28086: PPUSH
28087: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28091: LD_EXP 33
28095: PPUSH
28096: LD_STRING D3a-Sim-3
28098: PPUSH
28099: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28103: LD_EXP 39
28107: PPUSH
28108: LD_STRING D3a-Sci1-3
28110: PPUSH
28111: CALL_OW 88
// if IsOK ( Joan ) then
28115: LD_EXP 35
28119: PPUSH
28120: CALL_OW 302
28124: IFFALSE 28140
// Say ( Simms , D3a-Sim-4 ) else
28126: LD_EXP 33
28130: PPUSH
28131: LD_STRING D3a-Sim-4
28133: PPUSH
28134: CALL_OW 88
28138: GO 28152
// Say ( Simms , D3a-Sim-4a ) ;
28140: LD_EXP 33
28144: PPUSH
28145: LD_STRING D3a-Sim-4a
28147: PPUSH
28148: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28152: LD_EXP 39
28156: PPUSH
28157: LD_STRING D3a-Sci1-4
28159: PPUSH
28160: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28164: LD_EXP 33
28168: PPUSH
28169: LD_STRING D3a-Sim-5
28171: PPUSH
28172: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28176: LD_EXP 39
28180: PPUSH
28181: LD_STRING D3a-Sci1-5
28183: PPUSH
28184: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28188: LD_EXP 33
28192: PPUSH
28193: LD_STRING D3a-Sim-6
28195: PPUSH
28196: CALL_OW 88
// DialogueOff ;
28200: CALL_OW 7
// end else
28204: GO 28475
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28206: LD_ADDR_VAR 0 5
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 26
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 25
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: PUSH
28251: LD_EXP 23
28255: PUSH
28256: LD_EXP 29
28260: PUSH
28261: LD_EXP 28
28265: PUSH
28266: LD_EXP 33
28270: PUSH
28271: LD_EXP 36
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: DIFF
28283: ST_TO_ADDR
// if tmp3 then
28284: LD_VAR 0 5
28288: IFFALSE 28475
// begin DialogueOn ;
28290: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28294: LD_EXP 33
28298: PPUSH
28299: LD_STRING D3a-Sim-1
28301: PPUSH
28302: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28306: LD_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: ARRAY
28314: PPUSH
28315: LD_STRING D3a-Sci1-1
28317: PPUSH
28318: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28322: LD_EXP 33
28326: PPUSH
28327: LD_STRING D3a-Sim-2
28329: PPUSH
28330: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28334: LD_VAR 0 5
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PPUSH
28343: LD_STRING D3a-Sci1-2
28345: PPUSH
28346: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28350: LD_EXP 33
28354: PPUSH
28355: LD_STRING D3a-Sim-3
28357: PPUSH
28358: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28362: LD_VAR 0 5
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: PPUSH
28371: LD_STRING D3a-Sci1-3
28373: PPUSH
28374: CALL_OW 88
// if IsOK ( Joan ) then
28378: LD_EXP 35
28382: PPUSH
28383: CALL_OW 302
28387: IFFALSE 28403
// Say ( Simms , D3a-Sim-4 ) else
28389: LD_EXP 33
28393: PPUSH
28394: LD_STRING D3a-Sim-4
28396: PPUSH
28397: CALL_OW 88
28401: GO 28415
// Say ( Simms , D3a-Sim-4a ) ;
28403: LD_EXP 33
28407: PPUSH
28408: LD_STRING D3a-Sim-4a
28410: PPUSH
28411: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28415: LD_VAR 0 5
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_STRING D3a-Sci1-4
28426: PPUSH
28427: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28431: LD_EXP 33
28435: PPUSH
28436: LD_STRING D3a-Sim-5
28438: PPUSH
28439: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28443: LD_VAR 0 5
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: LD_STRING D3a-Sci1-5
28454: PPUSH
28455: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28459: LD_EXP 33
28463: PPUSH
28464: LD_STRING D3a-Sim-6
28466: PPUSH
28467: CALL_OW 88
// DialogueOff ;
28471: CALL_OW 7
// end ; end ; end ;
28475: PPOPN 5
28477: END
// export function DRussianNextAttack ; begin
28478: LD_INT 0
28480: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28481: LD_EXP 40
28485: PPUSH
28486: LD_STRING D4-FSol1-2
28488: PPUSH
28489: CALL_OW 94
// end ;
28493: LD_VAR 0 1
28497: RET
// export function DRussianConvoy ; begin
28498: LD_INT 0
28500: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28501: LD_EXP 40
28505: PPUSH
28506: LD_STRING D4-FSol1-1
28508: PPUSH
28509: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28513: LD_STRING M3
28515: PPUSH
28516: CALL_OW 337
// end ;
28520: LD_VAR 0 1
28524: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28525: LD_INT 0
28527: PPUSH
// CenterNowOnUnits ( unit ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 87
// DialogueOn ;
28537: CALL_OW 6
// if IsOK ( Cyrus ) then
28541: LD_EXP 27
28545: PPUSH
28546: CALL_OW 302
28550: IFFALSE 28566
// Say ( Cyrus , D9a-Cyrus-1 ) else
28552: LD_EXP 27
28556: PPUSH
28557: LD_STRING D9a-Cyrus-1
28559: PPUSH
28560: CALL_OW 88
28564: GO 28688
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28566: LD_INT 22
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 26
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 25
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 25
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 25
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 25
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: PUSH
28657: LD_EXP 23
28661: PUSH
28662: LD_EXP 36
28666: PUSH
28667: LD_EXP 27
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: DIFF
28677: PPUSH
28678: LD_STRING D9a-Sol1-1
28680: PPUSH
28681: LD_STRING D9a-Sol1-1
28683: PPUSH
28684: CALL 25083 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28688: LD_INT 22
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 26
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 25
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 25
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 25
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: PUSH
28779: LD_EXP 23
28783: PUSH
28784: LD_EXP 36
28788: PUSH
28789: LD_EXP 27
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: DIFF
28799: PPUSH
28800: LD_STRING D9b-Sol1-1
28802: PPUSH
28803: LD_STRING D9b-Sol1-1
28805: PPUSH
28806: CALL 25083 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28810: LD_STRING 09_arInfo
28812: PPUSH
28813: LD_INT 0
28815: PPUSH
28816: CALL_OW 30
28820: IFFALSE 28834
// Say ( JMM , D9a-JMM-1 ) ;
28822: LD_EXP 23
28826: PPUSH
28827: LD_STRING D9a-JMM-1
28829: PPUSH
28830: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28834: LD_EXP 23
28838: PPUSH
28839: LD_STRING D9c-JMM-1
28841: PPUSH
28842: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28846: LD_INT 22
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 25
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 69
28874: IFFALSE 28888
// Say ( JMM , D9c-JMM-1a ) ;
28876: LD_EXP 23
28880: PPUSH
28881: LD_STRING D9c-JMM-1a
28883: PPUSH
28884: CALL_OW 88
// DialogueOff ;
28888: CALL_OW 7
// end ;
28892: LD_VAR 0 2
28896: RET
// export function DArabTrait1 ; var tmp ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
// if IsOk ( DeltaDoctor ) then
28901: LD_EXP 39
28905: PPUSH
28906: CALL_OW 302
28910: IFFALSE 28924
// tmp := DeltaDoctor else
28912: LD_ADDR_VAR 0 2
28916: PUSH
28917: LD_EXP 39
28921: ST_TO_ADDR
28922: GO 29122
// if IsOk ( Denis ) then
28924: LD_EXP 34
28928: PPUSH
28929: CALL_OW 302
28933: IFFALSE 28947
// tmp := Denis else
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_EXP 34
28944: ST_TO_ADDR
28945: GO 29122
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: EMPTY
28966: LIST
28967: PUSH
28968: LD_INT 25
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 26
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: PUSH
28999: LD_EXP 23
29003: PUSH
29004: LD_EXP 24
29008: PUSH
29009: LD_EXP 25
29013: PUSH
29014: LD_EXP 26
29018: PUSH
29019: LD_EXP 27
29023: PUSH
29024: LD_EXP 28
29028: PUSH
29029: LD_EXP 29
29033: PUSH
29034: LD_EXP 30
29038: PUSH
29039: LD_EXP 31
29043: PUSH
29044: LD_EXP 32
29048: PUSH
29049: LD_EXP 33
29053: PUSH
29054: LD_EXP 34
29058: PUSH
29059: LD_EXP 35
29063: PUSH
29064: LD_EXP 36
29068: PUSH
29069: LD_EXP 37
29073: PUSH
29074: LD_EXP 38
29078: PUSH
29079: LD_EXP 39
29083: PUSH
29084: LD_EXP 40
29088: PUSH
29089: LD_EXP 42
29093: PUSH
29094: LD_EXP 44
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: DIFF
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 2
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29223
// DialogueOn ;
29131: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29135: LD_EXP 23
29139: PPUSH
29140: LD_STRING D6-JMM-1
29142: PPUSH
29143: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_STRING D6-Sci1-1
29154: PPUSH
29155: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29159: LD_EXP 23
29163: PPUSH
29164: LD_STRING D6-JMM-2
29166: PPUSH
29167: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_STRING D6-Sci1-2
29178: PPUSH
29179: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29183: LD_EXP 23
29187: PPUSH
29188: LD_STRING D6-JMM-3
29190: PPUSH
29191: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29195: LD_VAR 0 2
29199: PPUSH
29200: LD_STRING D6-Sci1-3
29202: PPUSH
29203: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29207: LD_EXP 23
29211: PPUSH
29212: LD_STRING D6-JMM-4
29214: PPUSH
29215: CALL_OW 88
// DialogueOff ;
29219: CALL_OW 7
// end ;
29223: LD_VAR 0 1
29227: RET
// export function DArabTrait2 ; begin
29228: LD_INT 0
29230: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29231: LD_EXP 36
29235: PPUSH
29236: CALL_OW 305
29240: NOT
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: CALL_OW 302
29251: NOT
29252: OR
29253: PUSH
29254: LD_EXP 50
29258: PPUSH
29259: CALL_OW 302
29263: NOT
29264: OR
29265: IFFALSE 29269
// exit ;
29267: GO 29325
// DialogueOn ;
29269: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29273: LD_EXP 51
29277: PPUSH
29278: LD_STRING D5-Ar1-1
29280: PPUSH
29281: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29285: LD_EXP 50
29289: PPUSH
29290: LD_STRING D5-Diet-1
29292: PPUSH
29293: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29297: LD_EXP 51
29301: PPUSH
29302: LD_STRING D5-Ar1-2
29304: PPUSH
29305: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29309: LD_EXP 50
29313: PPUSH
29314: LD_STRING D5-Diet-2
29316: PPUSH
29317: CALL_OW 88
// DialogueOff ;
29321: CALL_OW 7
// end ;
29325: LD_VAR 0 1
29329: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29330: LD_EXP 4
29334: IFFALSE 31047
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29349: LD_INT 2
29351: PPUSH
29352: LD_INT 3
29354: PPUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29365: LD_INT 2
29367: PPUSH
29368: LD_INT 6
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29381: LD_ADDR_VAR 0 5
29385: PUSH
29386: LD_INT 22
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 25
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 69
29443: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: LD_INT 22
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 21
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 25
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 8
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 25
29494: PUSH
29495: LD_INT 15
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: PUSH
29518: LD_EXP 50
29522: DIFF
29523: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29524: LD_ADDR_VAR 0 6
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29567: LD_VAR 0 4
29571: PPUSH
29572: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29576: LD_INT 101
29578: PPUSH
29579: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29583: LD_EXP 40
29587: PPUSH
29588: LD_STRING D4-FSol1-3
29590: PPUSH
29591: CALL_OW 94
// for i in arCivilian do
29595: LD_ADDR_VAR 0 1
29599: PUSH
29600: LD_VAR 0 5
29604: PUSH
29605: FOR_IN
29606: IFFALSE 29685
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29608: LD_VAR 0 1
29612: PPUSH
29613: LD_VAR 0 6
29617: PUSH
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 2
29625: MOD
29626: PUSH
29627: LD_INT 1
29629: PLUS
29630: ARRAY
29631: PPUSH
29632: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 8
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 2
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: PPUSH
29663: CALL_OW 183
// AddComExitBuilding ( i ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29676: LD_INT 18
29678: PPUSH
29679: CALL_OW 67
// end ;
29683: GO 29605
29685: POP
29686: POP
// wait ( 0 0$5 ) ;
29687: LD_INT 175
29689: PPUSH
29690: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29694: LD_INT 76
29696: PPUSH
29697: LD_INT 19
29699: PPUSH
29700: CALL_OW 84
// DialogueOn ;
29704: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29708: LD_INT 22
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 26
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 25
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 25
29763: PUSH
29764: LD_INT 4
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 25
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: PPUSH
29799: LD_STRING D8-Sol1-1
29801: PPUSH
29802: LD_STRING D8-Sol1-1
29804: PPUSH
29805: CALL 25083 0 3
// if IsOk ( DeltaDoctor ) then
29809: LD_EXP 39
29813: PPUSH
29814: CALL_OW 302
29818: IFFALSE 29834
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29820: LD_EXP 39
29824: PPUSH
29825: LD_STRING D8-Sci1-1
29827: PPUSH
29828: CALL_OW 88
29832: GO 29935
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25083 0 3
// Say ( JMM , D8-JMM-1 ) ;
29935: LD_EXP 23
29939: PPUSH
29940: LD_STRING D8-JMM-1
29942: PPUSH
29943: CALL_OW 88
// DialogueOff ;
29947: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
29951: LD_INT 2
29953: PPUSH
29954: LD_INT 2
29956: PPUSH
29957: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
29961: LD_INT 1
29963: PPUSH
29964: LD_INT 2
29966: PPUSH
29967: LD_INT 2
29969: PPUSH
29970: LD_INT 1
29972: PPUSH
29973: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
29977: LD_INT 3
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
29993: LD_INT 6
29995: PPUSH
29996: LD_INT 2
29998: PPUSH
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 1
30004: PPUSH
30005: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30009: LD_STRING M4
30011: PPUSH
30012: CALL_OW 337
// wait ( 0 0$1 ) ;
30016: LD_INT 35
30018: PPUSH
30019: CALL_OW 67
// if IsLive ( Khatam ) then
30023: LD_EXP 36
30027: PPUSH
30028: CALL_OW 300
30032: IFFALSE 30046
// DoNotAttack ( 2 , Khatam ) ;
30034: LD_INT 2
30036: PPUSH
30037: LD_EXP 36
30041: PPUSH
30042: CALL_OW 471
// wait ( 0 0$1 ) ;
30046: LD_INT 35
30048: PPUSH
30049: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30053: LD_ADDR_VAR 0 7
30057: PUSH
30058: LD_INT 22
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PPUSH
30082: CALL_OW 69
30086: PPUSH
30087: LD_VAR 0 4
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 74
30100: ST_TO_ADDR
// for i := 1 to 3 do
30101: LD_ADDR_VAR 0 1
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 3
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30174
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30117: LD_VAR 0 4
30121: PPUSH
30122: LD_INT 25
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 72
30136: PUSH
30137: LD_VAR 0 1
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 7
30147: PPUSH
30148: CALL_OW 250
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: CALL_OW 251
30162: PPUSH
30163: LD_VAR 0 7
30167: PPUSH
30168: CALL_OW 192
30172: GO 30114
30174: POP
30175: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30176: LD_VAR 0 4
30180: PPUSH
30181: LD_INT 84
30183: PPUSH
30184: LD_INT 22
30186: PPUSH
30187: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30191: LD_VAR 0 4
30195: PPUSH
30196: LD_INT 95
30198: PPUSH
30199: LD_INT 12
30201: PPUSH
30202: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_INT 102
30213: PPUSH
30214: LD_INT 11
30216: PPUSH
30217: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30221: LD_VAR 0 4
30225: PPUSH
30226: LD_INT 116
30228: PPUSH
30229: LD_INT 15
30231: PPUSH
30232: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30236: LD_VAR 0 4
30240: PPUSH
30241: LD_INT 140
30243: PPUSH
30244: LD_INT 25
30246: PPUSH
30247: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: LD_INT 22
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 25
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 25
30291: PUSH
30292: LD_INT 8
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: PUSH
30325: LD_EXP 50
30329: DIFF
30330: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 21
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 25
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 25
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 25
30401: PUSH
30402: LD_INT 16
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30427: LD_ADDR_VAR 0 5
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: LD_EXP 50
30441: ADD
30442: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30443: LD_VAR 0 5
30447: PPUSH
30448: LD_INT 81
30450: PPUSH
30451: LD_INT 12
30453: PPUSH
30454: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30458: LD_VAR 0 5
30462: PPUSH
30463: LD_INT 88
30465: PPUSH
30466: LD_INT 8
30468: PPUSH
30469: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30473: LD_VAR 0 5
30477: PPUSH
30478: LD_INT 102
30480: PPUSH
30481: LD_INT 10
30483: PPUSH
30484: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30488: LD_VAR 0 5
30492: PPUSH
30493: LD_INT 116
30495: PPUSH
30496: LD_INT 15
30498: PPUSH
30499: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30503: LD_VAR 0 5
30507: PPUSH
30508: LD_INT 140
30510: PPUSH
30511: LD_INT 25
30513: PPUSH
30514: CALL_OW 171
// wait ( 3 ) ;
30518: LD_INT 3
30520: PPUSH
30521: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30525: LD_ADDR_EXP 56
30529: PUSH
30530: LD_VAR 0 5
30534: PUSH
30535: LD_VAR 0 4
30539: UNION
30540: ST_TO_ADDR
// if IsOk ( Gary ) then
30541: LD_EXP 32
30545: PPUSH
30546: CALL_OW 302
30550: IFFALSE 30564
// Say ( Gary , D8a-Gary-1 ) ;
30552: LD_EXP 32
30556: PPUSH
30557: LD_STRING D8a-Gary-1
30559: PPUSH
30560: CALL_OW 88
// wait ( 0 0$5 ) ;
30564: LD_INT 175
30566: PPUSH
30567: CALL_OW 67
// if IsOK ( Khatam ) then
30571: LD_EXP 36
30575: PPUSH
30576: CALL_OW 302
30580: IFFALSE 31047
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 25
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 25
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 25
30652: PUSH
30653: LD_INT 8
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: PUSH
30678: LD_EXP 23
30682: PUSH
30683: LD_EXP 24
30687: PUSH
30688: LD_EXP 25
30692: PUSH
30693: LD_EXP 26
30697: PUSH
30698: LD_EXP 27
30702: PUSH
30703: LD_EXP 28
30707: PUSH
30708: LD_EXP 29
30712: PUSH
30713: LD_EXP 30
30717: PUSH
30718: LD_EXP 31
30722: PUSH
30723: LD_EXP 32
30727: PUSH
30728: LD_EXP 33
30732: PUSH
30733: LD_EXP 34
30737: PUSH
30738: LD_EXP 35
30742: PUSH
30743: LD_EXP 36
30747: PUSH
30748: LD_EXP 37
30752: PUSH
30753: LD_EXP 38
30757: PUSH
30758: LD_EXP 39
30762: PUSH
30763: LD_EXP 42
30767: PUSH
30768: LD_EXP 44
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: DIFF
30794: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30795: LD_EXP 36
30799: PPUSH
30800: LD_INT 8
30802: PPUSH
30803: CALL_OW 235
// ComExit ( Khatam ) ;
30807: LD_EXP 36
30811: PPUSH
30812: CALL 93406 0 1
// wait ( 0 0$1 ) ;
30816: LD_INT 35
30818: PPUSH
30819: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30823: LD_EXP 36
30827: PPUSH
30828: LD_INT 11
30830: PPUSH
30831: CALL_OW 113
// escapeKhatam := true ;
30835: LD_ADDR_EXP 11
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 2
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31047
// wait ( 0 0$2 ) ;
30852: LD_INT 70
30854: PPUSH
30855: CALL_OW 67
// DialogueOn ;
30859: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_STRING D8b-Sol1-1
30875: PPUSH
30876: LD_STRING D8b-FSol1-1
30878: PPUSH
30879: CALL 25083 0 3
30883: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30884: LD_EXP 36
30888: PPUSH
30889: LD_STRING D8b-Khat-1
30891: PPUSH
30892: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 258
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30925
// Say ( speaker , D8b-Sol1-2 ) else
30911: LD_VAR 0 8
30915: PPUSH
30916: LD_STRING D8b-Sol1-2
30918: PPUSH
30919: CALL_OW 88
30923: GO 30937
// Say ( speaker , D8b-FSol1-2 ) ;
30925: LD_VAR 0 8
30929: PPUSH
30930: LD_STRING D8b-FSol1-2
30932: PPUSH
30933: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
30937: LD_EXP 36
30941: PPUSH
30942: LD_STRING D8b-Khat-2
30944: PPUSH
30945: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30949: LD_VAR 0 8
30953: PPUSH
30954: CALL_OW 258
30958: PUSH
30959: LD_INT 1
30961: EQUAL
30962: IFFALSE 30978
// Say ( speaker , D8b-Sol1-3 ) else
30964: LD_VAR 0 8
30968: PPUSH
30969: LD_STRING D8b-Sol1-3
30971: PPUSH
30972: CALL_OW 88
30976: GO 30990
// Say ( speaker , D8b-FSol1-3 ) ;
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_STRING D8b-FSol1-3
30985: PPUSH
30986: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
30990: LD_EXP 36
30994: PPUSH
30995: LD_STRING D8b-Khat-3
30997: PPUSH
30998: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31002: LD_VAR 0 8
31006: PPUSH
31007: CALL_OW 258
31011: PUSH
31012: LD_INT 1
31014: EQUAL
31015: IFFALSE 31031
// Say ( speaker , D8b-Sol1-4 ) else
31017: LD_VAR 0 8
31021: PPUSH
31022: LD_STRING D8b-Sol1-4
31024: PPUSH
31025: CALL_OW 88
31029: GO 31043
// Say ( speaker , D8b-FSol1-4 ) ;
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_STRING D8b-FSol1-4
31038: PPUSH
31039: CALL_OW 88
// DialogueOff ;
31043: CALL_OW 7
// end ; end ;
31047: PPOPN 8
31049: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31050: LD_EXP 11
31054: PUSH
31055: LD_EXP 36
31059: PPUSH
31060: CALL_OW 302
31064: AND
31065: IFFALSE 31140
31067: GO 31069
31069: DISABLE
// begin enable ;
31070: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31071: LD_EXP 36
31075: PPUSH
31076: CALL_OW 302
31080: PUSH
31081: LD_EXP 36
31085: PPUSH
31086: CALL_OW 314
31090: NOT
31091: AND
31092: IFFALSE 31106
// ComMoveToArea ( Khatam , khatamArea ) ;
31094: LD_EXP 36
31098: PPUSH
31099: LD_INT 11
31101: PPUSH
31102: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31106: LD_EXP 36
31110: PPUSH
31111: LD_INT 11
31113: PPUSH
31114: CALL_OW 308
31118: IFFALSE 31140
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31120: LD_INT 1
31122: PPUSH
31123: LD_STRING 10_KhatamStatus_1
31125: PPUSH
31126: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31130: LD_EXP 36
31134: PPUSH
31135: CALL_OW 64
// disable ;
31139: DISABLE
// end ; end ;
31140: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31141: LD_EXP 7
31145: PUSH
31146: LD_STRING 02_mikhailStatus_1
31148: PPUSH
31149: LD_INT 0
31151: PPUSH
31152: CALL_OW 30
31156: AND
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 50
31170: PUSH
31171: EMPTY
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: PUSH
31183: LD_INT 0
31185: EQUAL
31186: AND
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 50
31200: PUSH
31201: EMPTY
31202: LIST
31203: PUSH
31204: LD_INT 21
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: PUSH
31224: LD_INT 0
31226: EQUAL
31227: PUSH
31228: LD_EXP 4
31232: NOT
31233: OR
31234: AND
31235: IFFALSE 31257
31237: GO 31239
31239: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31240: LD_INT 4200
31242: PUSH
31243: LD_OWVAR 67
31247: MUL
31248: PPUSH
31249: CALL_OW 67
// PrepareCornell ;
31253: CALL 3198 0 0
// end ;
31257: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31258: LD_INT 22
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PPUSH
31273: LD_EXP 42
31277: PPUSH
31278: CALL_OW 74
31282: PPUSH
31283: LD_EXP 42
31287: PPUSH
31288: CALL_OW 296
31292: PUSH
31293: LD_INT 9
31295: LESS
31296: PUSH
31297: LD_EXP 42
31301: PPUSH
31302: CALL_OW 302
31306: AND
31307: IFFALSE 31751
31309: GO 31311
31311: DISABLE
// begin InGameOn ;
31312: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31316: LD_EXP 42
31320: PPUSH
31321: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31325: LD_EXP 42
31329: PPUSH
31330: LD_STRING D7-Corn-1
31332: PPUSH
31333: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31337: LD_INT 22
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 25
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 25
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 25
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 25
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 25
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 69
31416: PPUSH
31417: LD_STRING D7-Sol1-1
31419: PPUSH
31420: LD_STRING D7-FSol1-1
31422: PPUSH
31423: CALL 25083 0 3
// CenterNowOnUnits ( Cornell ) ;
31427: LD_EXP 42
31431: PPUSH
31432: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31436: LD_EXP 42
31440: PPUSH
31441: LD_STRING D7-Corn-2
31443: PPUSH
31444: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31448: LD_EXP 23
31452: PPUSH
31453: LD_STRING D7-JMM-2
31455: PPUSH
31456: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31460: LD_EXP 42
31464: PPUSH
31465: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31469: LD_EXP 42
31473: PPUSH
31474: LD_STRING D7-Corn-3
31476: PPUSH
31477: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31481: LD_EXP 42
31485: PPUSH
31486: LD_INT 250
31488: PPUSH
31489: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31493: LD_EXP 42
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: CALL_OW 235
// wait ( 0 0$1 ) ;
31505: LD_INT 35
31507: PPUSH
31508: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31512: LD_EXP 23
31516: PPUSH
31517: LD_STRING D7-JMM-3
31519: PPUSH
31520: CALL_OW 88
// InGameOff ;
31524: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// if IsDead ( Cornell ) then
31535: LD_EXP 42
31539: PPUSH
31540: CALL_OW 301
31544: IFFALSE 31548
// exit ;
31546: GO 31751
// until GetLives ( Cornell ) > 350 ;
31548: LD_EXP 42
31552: PPUSH
31553: CALL_OW 256
31557: PUSH
31558: LD_INT 350
31560: GREATER
31561: IFFALSE 31528
// DialogueOn ;
31563: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31567: LD_EXP 23
31571: PPUSH
31572: LD_STRING D7a-JMM-1
31574: PPUSH
31575: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31579: LD_EXP 42
31583: PPUSH
31584: LD_STRING D7a-Corn-1
31586: PPUSH
31587: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31591: LD_EXP 23
31595: PPUSH
31596: LD_STRING D7a-JMM-2
31598: PPUSH
31599: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31603: LD_EXP 42
31607: PPUSH
31608: LD_STRING D7a-Corn-2
31610: PPUSH
31611: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31615: LD_EXP 23
31619: PPUSH
31620: LD_STRING D7a-JMM-3
31622: PPUSH
31623: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31627: LD_EXP 42
31631: PPUSH
31632: LD_STRING D7a-Corn-3
31634: PPUSH
31635: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31639: LD_EXP 23
31643: PPUSH
31644: LD_STRING D7a-JMM-4
31646: PPUSH
31647: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31651: LD_EXP 42
31655: PPUSH
31656: LD_STRING D7a-Corn-4
31658: PPUSH
31659: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31663: LD_EXP 23
31667: PPUSH
31668: LD_STRING D7a-JMM-5
31670: PPUSH
31671: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31675: LD_EXP 42
31679: PPUSH
31680: LD_STRING D7a-Corn-5
31682: PPUSH
31683: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31687: LD_EXP 23
31691: PPUSH
31692: LD_STRING D7a-JMM-6
31694: PPUSH
31695: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31699: LD_EXP 42
31703: PPUSH
31704: LD_STRING D7a-Corn-6
31706: PPUSH
31707: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31711: LD_EXP 23
31715: PPUSH
31716: LD_STRING D7a-JMM-7
31718: PPUSH
31719: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31723: LD_EXP 42
31727: PPUSH
31728: LD_STRING D7a-Corn-7
31730: PPUSH
31731: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31735: LD_EXP 23
31739: PPUSH
31740: LD_STRING D7a-JMM-8
31742: PPUSH
31743: CALL_OW 88
// DialogueOff ;
31747: CALL_OW 7
// end ;
31751: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31752: LD_INT 54
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 321
31762: PUSH
31763: LD_INT 2
31765: EQUAL
31766: PUSH
31767: LD_INT 55
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: AND
31782: PUSH
31783: LD_INT 21
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 321
31793: PUSH
31794: LD_INT 2
31796: EQUAL
31797: AND
31798: PUSH
31799: LD_INT 22
31801: PPUSH
31802: LD_INT 1
31804: PPUSH
31805: CALL_OW 321
31809: PUSH
31810: LD_INT 2
31812: EQUAL
31813: AND
31814: PUSH
31815: LD_INT 12
31817: PPUSH
31818: LD_INT 1
31820: PPUSH
31821: CALL_OW 321
31825: PUSH
31826: LD_INT 1
31828: EQUAL
31829: PUSH
31830: LD_INT 32
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 321
31840: PUSH
31841: LD_INT 1
31843: EQUAL
31844: OR
31845: PUSH
31846: EMPTY
31847: LIST
31848: AND
31849: PUSH
31850: LD_EXP 8
31854: AND
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: PUSH
31885: LD_INT 0
31887: EQUAL
31888: AND
31889: IFFALSE 31937
31891: GO 31893
31893: DISABLE
// begin case Query ( QEndMission ) of 1 :
31894: LD_STRING QEndMission
31896: PPUSH
31897: CALL_OW 97
31901: PUSH
31902: LD_INT 1
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// end_the_mission_allowed = true ; 2 :
31911: LD_ADDR_OWVAR 57
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
31919: GO 31937
31921: LD_INT 2
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31936
31929: POP
// FinishMission ; end ;
31930: CALL 31983 0 0
31934: GO 31937
31936: POP
// end ;
31937: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
31938: LD_INT 0
31940: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 300
31950: PUSH
31951: LD_VAR 0 1
31955: PUSH
31956: LD_EXP 45
31960: IN
31961: OR
31962: IFFALSE 31978
// SaveCharacters ( unit , id ) ;
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_VAR 0 2
31973: PPUSH
31974: CALL_OW 38
// end ;
31978: LD_VAR 0 3
31982: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
31990: LD_INT 22
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 23
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 50
32022: PUSH
32023: EMPTY
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: PPUSH
32032: CALL_OW 69
32036: PPUSH
32037: CALL 57399 0 1
32041: PUSH
32042: LD_INT 5
32044: LESS
32045: IFFALSE 32056
// begin YouLost ( Troops ) ;
32047: LD_STRING Troops
32049: PPUSH
32050: CALL_OW 104
// exit ;
32054: GO 33076
// end ; if not hasSniper then
32056: LD_EXP 20
32060: NOT
32061: IFFALSE 32070
// SetAchievement ( ACH_SNIPER ) ;
32063: LD_STRING ACH_SNIPER
32065: PPUSH
32066: CALL_OW 543
// m1 := false ;
32070: LD_ADDR_VAR 0 2
32074: PUSH
32075: LD_INT 0
32077: ST_TO_ADDR
// m2 := false ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 0
32085: ST_TO_ADDR
// m3 := false ;
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: LD_INT 0
32093: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32094: LD_INT 12
32096: PPUSH
32097: LD_INT 1
32099: PPUSH
32100: CALL_OW 321
32104: PUSH
32105: LD_INT 2
32107: EQUAL
32108: IFFALSE 32130
// begin AddMedal ( sights , 1 ) ;
32110: LD_STRING sights
32112: PPUSH
32113: LD_INT 1
32115: PPUSH
32116: CALL_OW 101
// m1 := true ;
32120: LD_ADDR_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: ST_TO_ADDR
// end else
32128: GO 32141
// AddMedal ( sights , - 1 ) ;
32130: LD_STRING sights
32132: PPUSH
32133: LD_INT 1
32135: NEG
32136: PPUSH
32137: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32141: LD_INT 32
32143: PPUSH
32144: LD_INT 1
32146: PPUSH
32147: CALL_OW 321
32151: PUSH
32152: LD_INT 2
32154: EQUAL
32155: IFFALSE 32177
// begin AddMedal ( computers , 1 ) ;
32157: LD_STRING computers
32159: PPUSH
32160: LD_INT 1
32162: PPUSH
32163: CALL_OW 101
// m2 := true ;
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: LD_INT 1
32174: ST_TO_ADDR
// end else
32175: GO 32188
// AddMedal ( computers , - 1 ) ;
32177: LD_STRING computers
32179: PPUSH
32180: LD_INT 1
32182: NEG
32183: PPUSH
32184: CALL_OW 101
// if arabianEscapedCounter = 0 then
32188: LD_EXP 21
32192: PUSH
32193: LD_INT 0
32195: EQUAL
32196: IFFALSE 32228
// begin AddMedal ( renegades , 2 ) ;
32198: LD_STRING renegades
32200: PPUSH
32201: LD_INT 2
32203: PPUSH
32204: CALL_OW 101
// m3 := true ;
32208: LD_ADDR_VAR 0 4
32212: PUSH
32213: LD_INT 1
32215: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32216: LD_INT 0
32218: PPUSH
32219: LD_STRING 10_ScientistsEscape_1
32221: PPUSH
32222: CALL_OW 39
// end else
32226: GO 32239
// AddMedal ( renegades , - 1 ) ;
32228: LD_STRING renegades
32230: PPUSH
32231: LD_INT 1
32233: NEG
32234: PPUSH
32235: CALL_OW 101
// SaveEpsilonBase ;
32239: CALL 33081 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32243: LD_VAR 0 2
32247: PUSH
32248: LD_VAR 0 3
32252: AND
32253: PUSH
32254: LD_VAR 0 4
32258: AND
32259: PUSH
32260: LD_OWVAR 67
32264: PUSH
32265: LD_INT 3
32267: GREATEREQUAL
32268: AND
32269: IFFALSE 32281
// SetAchievementEX ( ACH_AMER , 10 ) ;
32271: LD_STRING ACH_AMER
32273: PPUSH
32274: LD_INT 10
32276: PPUSH
32277: CALL_OW 564
// if tick <= 40 40$00 then
32281: LD_OWVAR 1
32285: PUSH
32286: LD_INT 84000
32288: LESSEQUAL
32289: IFFALSE 32305
// begin wait ( 3 ) ;
32291: LD_INT 3
32293: PPUSH
32294: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32298: LD_STRING ACH_ASPEED_10
32300: PPUSH
32301: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32305: LD_STRING Main
32307: PPUSH
32308: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32312: LD_INT 22
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 23
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 25
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 25
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 25
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 25
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 25
32387: PUSH
32388: LD_INT 5
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 25
32397: PUSH
32398: LD_INT 8
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: PPUSH
32420: CALL_OW 69
32424: PPUSH
32425: CALL_OW 43
// prefix := 10c_ ;
32429: LD_ADDR_VAR 0 5
32433: PUSH
32434: LD_STRING 10c_
32436: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32437: LD_EXP 23
32441: PPUSH
32442: LD_VAR 0 5
32446: PUSH
32447: LD_STRING JMM
32449: STR
32450: PPUSH
32451: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32455: LD_EXP 24
32459: PPUSH
32460: LD_VAR 0 5
32464: PUSH
32465: LD_STRING Brown
32467: STR
32468: PPUSH
32469: CALL 31938 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32473: LD_EXP 25
32477: PPUSH
32478: LD_VAR 0 5
32482: PUSH
32483: LD_STRING Donaldson
32485: STR
32486: PPUSH
32487: CALL 31938 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32491: LD_EXP 26
32495: PPUSH
32496: LD_VAR 0 5
32500: PUSH
32501: LD_STRING Bobby
32503: STR
32504: PPUSH
32505: CALL 31938 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32509: LD_EXP 27
32513: PPUSH
32514: LD_VAR 0 5
32518: PUSH
32519: LD_STRING Cyrus
32521: STR
32522: PPUSH
32523: CALL 31938 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32527: LD_EXP 28
32531: PPUSH
32532: LD_VAR 0 5
32536: PUSH
32537: LD_STRING Lisa
32539: STR
32540: PPUSH
32541: CALL 31938 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32545: LD_EXP 29
32549: PPUSH
32550: LD_VAR 0 5
32554: PUSH
32555: LD_STRING Frank
32557: STR
32558: PPUSH
32559: CALL 31938 0 2
// if Kikuchi then
32563: LD_EXP 30
32567: IFFALSE 32594
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32569: LD_STRING enableBioCharacter(BIO_YAMO)
32571: PPUSH
32572: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32576: LD_EXP 30
32580: PPUSH
32581: LD_VAR 0 5
32585: PUSH
32586: LD_STRING Kikuchi
32588: STR
32589: PPUSH
32590: CALL 31938 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32594: LD_EXP 31
32598: PPUSH
32599: LD_VAR 0 5
32603: PUSH
32604: LD_STRING Houten
32606: STR
32607: PPUSH
32608: CALL 31938 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32612: LD_EXP 32
32616: PPUSH
32617: LD_VAR 0 5
32621: PUSH
32622: LD_STRING Gary
32624: STR
32625: PPUSH
32626: CALL 31938 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32630: LD_EXP 42
32634: PPUSH
32635: LD_VAR 0 5
32639: PUSH
32640: LD_STRING Cornell
32642: STR
32643: PPUSH
32644: CALL 31938 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32648: LD_EXP 33
32652: PPUSH
32653: LD_VAR 0 5
32657: PUSH
32658: LD_STRING Simms
32660: STR
32661: PPUSH
32662: CALL 31938 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32666: LD_EXP 34
32670: PPUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_STRING Denis
32678: STR
32679: PPUSH
32680: CALL 31938 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32684: LD_EXP 35
32688: PPUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_STRING Joan
32696: STR
32697: PPUSH
32698: CALL 31938 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32702: LD_EXP 37
32706: PPUSH
32707: LD_VAR 0 5
32711: PUSH
32712: LD_STRING Gladstone
32714: STR
32715: PPUSH
32716: CALL 31938 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32720: LD_EXP 39
32724: PPUSH
32725: LD_VAR 0 5
32729: PUSH
32730: LD_STRING DeltaDoctor
32732: STR
32733: PPUSH
32734: CALL 31938 0 2
// if IsLive ( Mike ) then
32738: LD_EXP 41
32742: PPUSH
32743: CALL_OW 300
32747: IFFALSE 32767
// SaveCharacters ( Mike , prefix & Mike ) ;
32749: LD_EXP 41
32753: PPUSH
32754: LD_VAR 0 5
32758: PUSH
32759: LD_STRING Mike
32761: STR
32762: PPUSH
32763: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32767: LD_EXP 46
32771: PPUSH
32772: LD_STRING 10c_lock
32774: PPUSH
32775: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32779: LD_INT 50
32781: PUSH
32782: EMPTY
32783: LIST
32784: PUSH
32785: LD_INT 22
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 21
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 25
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 25
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 25
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 25
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 25
32850: PUSH
32851: LD_INT 5
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 25
32860: PUSH
32861: LD_INT 8
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: PPUSH
32883: CALL_OW 69
32887: PUSH
32888: LD_EXP 23
32892: PUSH
32893: LD_EXP 24
32897: PUSH
32898: LD_EXP 25
32902: PUSH
32903: LD_EXP 26
32907: PUSH
32908: LD_EXP 27
32912: PUSH
32913: LD_EXP 28
32917: PUSH
32918: LD_EXP 29
32922: PUSH
32923: LD_EXP 37
32927: PUSH
32928: LD_EXP 30
32932: PUSH
32933: LD_EXP 34
32937: PUSH
32938: LD_EXP 35
32942: PUSH
32943: LD_EXP 31
32947: PUSH
32948: LD_EXP 33
32952: PUSH
32953: LD_EXP 32
32957: PUSH
32958: LD_EXP 39
32962: PUSH
32963: LD_EXP 42
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: DIFF
32986: PPUSH
32987: LD_STRING 10_other_survivors
32989: PPUSH
32990: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32994: LD_INT 50
32996: PUSH
32997: EMPTY
32998: LIST
32999: PUSH
33000: LD_INT 22
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 21
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 25
33025: PUSH
33026: LD_INT 16
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 25
33035: PUSH
33036: LD_INT 12
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: PPUSH
33054: CALL_OW 69
33058: PUSH
33059: LD_EXP 41
33063: DIFF
33064: PPUSH
33065: LD_STRING 10_ape
33067: PPUSH
33068: CALL_OW 38
// YouWin ;
33072: CALL_OW 103
// end ;
33076: LD_VAR 0 1
33080: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
// epsilonBase := [ ] ;
33087: LD_ADDR_VAR 0 2
33091: PUSH
33092: EMPTY
33093: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_INT 22
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 50
33121: PUSH
33122: EMPTY
33123: LIST
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: PPUSH
33130: CALL_OW 69
33134: ST_TO_ADDR
// for i in buildings do
33135: LD_ADDR_VAR 0 4
33139: PUSH
33140: LD_VAR 0 3
33144: PUSH
33145: FOR_IN
33146: IFFALSE 33598
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33148: LD_VAR 0 4
33152: PPUSH
33153: CALL_OW 266
33157: PUSH
33158: LD_INT 6
33160: PUSH
33161: LD_INT 7
33163: PUSH
33164: LD_INT 8
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: IN
33172: IFFALSE 33286
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33174: LD_ADDR_VAR 0 2
33178: PUSH
33179: LD_VAR 0 2
33183: PUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: CALL_OW 266
33193: PUSH
33194: LD_VAR 0 4
33198: PPUSH
33199: CALL_OW 250
33203: PUSH
33204: LD_VAR 0 4
33208: PPUSH
33209: CALL_OW 251
33213: PUSH
33214: LD_VAR 0 4
33218: PPUSH
33219: CALL_OW 254
33223: PUSH
33224: LD_VAR 0 4
33228: PPUSH
33229: CALL_OW 267
33233: PUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: CALL_OW 248
33243: PUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 268
33256: PUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: LD_INT 2
33264: PPUSH
33265: CALL_OW 268
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: ADD
33283: ST_TO_ADDR
33284: GO 33596
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33286: LD_VAR 0 4
33290: PPUSH
33291: CALL_OW 266
33295: PUSH
33296: LD_INT 32
33298: EQUAL
33299: PUSH
33300: LD_VAR 0 4
33304: PPUSH
33305: CALL_OW 266
33309: PUSH
33310: LD_INT 33
33312: EQUAL
33313: OR
33314: IFFALSE 33411
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33316: LD_ADDR_VAR 0 2
33320: PUSH
33321: LD_VAR 0 2
33325: PUSH
33326: LD_VAR 0 4
33330: PPUSH
33331: CALL_OW 266
33335: PUSH
33336: LD_VAR 0 4
33340: PPUSH
33341: CALL_OW 250
33345: PUSH
33346: LD_VAR 0 4
33350: PPUSH
33351: CALL_OW 251
33355: PUSH
33356: LD_VAR 0 4
33360: PPUSH
33361: CALL_OW 254
33365: PUSH
33366: LD_VAR 0 4
33370: PPUSH
33371: CALL_OW 267
33375: PUSH
33376: LD_VAR 0 4
33380: PPUSH
33381: CALL_OW 248
33385: PUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: CALL_OW 269
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: ADD
33408: ST_TO_ADDR
33409: GO 33596
// if GetBType ( i ) = b_factory then
33411: LD_VAR 0 4
33415: PPUSH
33416: CALL_OW 266
33420: PUSH
33421: LD_INT 3
33423: EQUAL
33424: IFFALSE 33514
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33426: LD_ADDR_VAR 0 2
33430: PUSH
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_INT 1
33438: PPUSH
33439: LD_VAR 0 4
33443: PPUSH
33444: CALL_OW 266
33448: PUSH
33449: LD_VAR 0 4
33453: PPUSH
33454: CALL_OW 250
33458: PUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: CALL_OW 251
33468: PUSH
33469: LD_VAR 0 4
33473: PPUSH
33474: CALL_OW 254
33478: PUSH
33479: LD_VAR 0 4
33483: PPUSH
33484: CALL_OW 267
33488: PUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: CALL_OW 248
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL_OW 2
33511: ST_TO_ADDR
33512: GO 33596
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33514: LD_ADDR_VAR 0 2
33518: PUSH
33519: LD_VAR 0 2
33523: PUSH
33524: LD_VAR 0 4
33528: PPUSH
33529: CALL_OW 266
33533: PUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: CALL_OW 250
33543: PUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: CALL_OW 251
33553: PUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: CALL_OW 254
33563: PUSH
33564: LD_VAR 0 4
33568: PPUSH
33569: CALL_OW 267
33573: PUSH
33574: LD_VAR 0 4
33578: PPUSH
33579: CALL_OW 248
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: ADD
33595: ST_TO_ADDR
// end ;
33596: GO 33145
33598: POP
33599: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33600: LD_VAR 0 2
33604: PPUSH
33605: LD_STRING 10_EpsilonBase
33607: PPUSH
33608: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33612: LD_INT 34
33614: PPUSH
33615: CALL_OW 353
33619: PPUSH
33620: LD_STRING 10_EpsilonEnv
33622: PPUSH
33623: CALL_OW 39
// end ; end_of_file
33627: LD_VAR 0 1
33631: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33632: LD_EXP 7
33636: IFFALSE 33759
33638: GO 33640
33640: DISABLE
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
// begin enable ;
33645: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33646: LD_INT 35
33648: PPUSH
33649: LD_INT 385
33651: PPUSH
33652: CALL_OW 12
33656: PPUSH
33657: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33661: LD_ADDR_VAR 0 2
33665: PUSH
33666: LD_INT 13
33668: PUSH
33669: LD_INT 14
33671: PUSH
33672: LD_INT 15
33674: PUSH
33675: LD_INT 16
33677: PUSH
33678: LD_INT 17
33680: PUSH
33681: LD_INT 38
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33692: LD_ADDR_VAR 0 1
33696: PUSH
33697: LD_VAR 0 2
33701: PUSH
33702: LD_INT 1
33704: PPUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: CALL 57399 0 1
33714: PPUSH
33715: CALL_OW 12
33719: ARRAY
33720: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33721: LD_VAR 0 1
33725: PPUSH
33726: CALL_OW 435
33730: PUSH
33731: LD_INT 8
33733: LESS
33734: IFFALSE 33759
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33736: LD_INT 1
33738: PPUSH
33739: LD_INT 5
33741: PPUSH
33742: CALL_OW 12
33746: PPUSH
33747: LD_VAR 0 1
33751: PPUSH
33752: LD_INT 1
33754: PPUSH
33755: CALL_OW 55
// end ;
33759: PPOPN 2
33761: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33762: LD_OWVAR 1
33766: PUSH
33767: LD_INT 10500
33769: LESS
33770: PUSH
33771: LD_EXP 9
33775: AND
33776: IFFALSE 33803
33778: GO 33780
33780: DISABLE
// begin enable ;
33781: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33782: LD_INT 1
33784: PPUSH
33785: LD_INT 5
33787: PPUSH
33788: CALL_OW 12
33792: PPUSH
33793: LD_INT 15
33795: PPUSH
33796: LD_INT 1
33798: PPUSH
33799: CALL_OW 55
// end ;
33803: END
// every 0 0$55 trigger ruBase do
33804: LD_EXP 68
33808: IFFALSE 33852
33810: GO 33812
33812: DISABLE
// begin enable ;
33813: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33814: LD_EXP 84
33818: PPUSH
33819: CALL_OW 435
33823: PUSH
33824: LD_INT 3
33826: LESS
33827: IFFALSE 33852
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33829: LD_INT 1
33831: PPUSH
33832: LD_INT 5
33834: PPUSH
33835: CALL_OW 12
33839: PPUSH
33840: LD_EXP 84
33844: PPUSH
33845: LD_INT 1
33847: PPUSH
33848: CALL_OW 55
// end ;
33852: END
// every 1 1$05 trigger ruBase2 do
33853: LD_EXP 69
33857: IFFALSE 33901
33859: GO 33861
33861: DISABLE
// begin enable ;
33862: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33863: LD_EXP 85
33867: PPUSH
33868: CALL_OW 435
33872: PUSH
33873: LD_INT 3
33875: LESS
33876: IFFALSE 33901
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33878: LD_INT 1
33880: PPUSH
33881: LD_INT 5
33883: PPUSH
33884: CALL_OW 12
33888: PPUSH
33889: LD_EXP 85
33893: PPUSH
33894: LD_INT 1
33896: PPUSH
33897: CALL_OW 55
// end ; end_of_file end_of_file
33901: END
// export globalGameSaveCounter ; every 0 0$1 do
33902: GO 33904
33904: DISABLE
// begin enable ;
33905: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33906: LD_STRING updateTimer(
33908: PUSH
33909: LD_OWVAR 1
33913: STR
33914: PUSH
33915: LD_STRING );
33917: STR
33918: PPUSH
33919: CALL_OW 559
// end ;
33923: END
// every 0 0$1 do
33924: GO 33926
33926: DISABLE
// begin globalGameSaveCounter := 0 ;
33927: LD_ADDR_EXP 86
33931: PUSH
33932: LD_INT 0
33934: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33935: LD_STRING setGameSaveCounter(0)
33937: PPUSH
33938: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33942: LD_STRING initStreamRollete();
33944: PPUSH
33945: CALL_OW 559
// InitStreamMode ;
33949: CALL 35292 0 0
// DefineStreamItems ( false ) ;
33953: LD_INT 0
33955: PPUSH
33956: CALL 35756 0 1
// end ;
33960: END
// export function SOS_MapStart ( ) ; begin
33961: LD_INT 0
33963: PPUSH
// if streamModeActive then
33964: LD_EXP 87
33968: IFFALSE 33977
// DefineStreamItems ( true ) ;
33970: LD_INT 1
33972: PPUSH
33973: CALL 35756 0 1
// UpdateLuaVariables ( ) ;
33977: CALL 33994 0 0
// UpdateFactoryWaypoints ( ) ;
33981: CALL 48758 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33985: CALL 49010 0 0
// end ;
33989: LD_VAR 0 1
33993: RET
// function UpdateLuaVariables ( ) ; begin
33994: LD_INT 0
33996: PPUSH
// if globalGameSaveCounter then
33997: LD_EXP 86
34001: IFFALSE 34035
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34003: LD_ADDR_EXP 86
34007: PUSH
34008: LD_EXP 86
34012: PPUSH
34013: CALL 94369 0 1
34017: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34018: LD_STRING setGameSaveCounter(
34020: PUSH
34021: LD_EXP 86
34025: STR
34026: PUSH
34027: LD_STRING )
34029: STR
34030: PPUSH
34031: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34035: LD_STRING setGameDifficulty(
34037: PUSH
34038: LD_OWVAR 67
34042: STR
34043: PUSH
34044: LD_STRING )
34046: STR
34047: PPUSH
34048: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34052: LD_STRING displayDifficulty(
34054: PUSH
34055: LD_OWVAR 67
34059: STR
34060: PUSH
34061: LD_STRING )
34063: STR
34064: PPUSH
34065: CALL_OW 559
// end ;
34069: LD_VAR 0 1
34073: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34074: LD_INT 0
34076: PPUSH
// if p2 = stream_mode then
34077: LD_VAR 0 2
34081: PUSH
34082: LD_INT 100
34084: EQUAL
34085: IFFALSE 35088
// begin if not StreamModeActive then
34087: LD_EXP 87
34091: NOT
34092: IFFALSE 34102
// StreamModeActive := true ;
34094: LD_ADDR_EXP 87
34098: PUSH
34099: LD_INT 1
34101: ST_TO_ADDR
// if p3 = 0 then
34102: LD_VAR 0 3
34106: PUSH
34107: LD_INT 0
34109: EQUAL
34110: IFFALSE 34116
// InitStreamMode ;
34112: CALL 35292 0 0
// if p3 = 1 then
34116: LD_VAR 0 3
34120: PUSH
34121: LD_INT 1
34123: EQUAL
34124: IFFALSE 34134
// sRocket := true ;
34126: LD_ADDR_EXP 92
34130: PUSH
34131: LD_INT 1
34133: ST_TO_ADDR
// if p3 = 2 then
34134: LD_VAR 0 3
34138: PUSH
34139: LD_INT 2
34141: EQUAL
34142: IFFALSE 34152
// sSpeed := true ;
34144: LD_ADDR_EXP 91
34148: PUSH
34149: LD_INT 1
34151: ST_TO_ADDR
// if p3 = 3 then
34152: LD_VAR 0 3
34156: PUSH
34157: LD_INT 3
34159: EQUAL
34160: IFFALSE 34170
// sEngine := true ;
34162: LD_ADDR_EXP 93
34166: PUSH
34167: LD_INT 1
34169: ST_TO_ADDR
// if p3 = 4 then
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 4
34177: EQUAL
34178: IFFALSE 34188
// sSpec := true ;
34180: LD_ADDR_EXP 90
34184: PUSH
34185: LD_INT 1
34187: ST_TO_ADDR
// if p3 = 5 then
34188: LD_VAR 0 3
34192: PUSH
34193: LD_INT 5
34195: EQUAL
34196: IFFALSE 34206
// sLevel := true ;
34198: LD_ADDR_EXP 94
34202: PUSH
34203: LD_INT 1
34205: ST_TO_ADDR
// if p3 = 6 then
34206: LD_VAR 0 3
34210: PUSH
34211: LD_INT 6
34213: EQUAL
34214: IFFALSE 34224
// sArmoury := true ;
34216: LD_ADDR_EXP 95
34220: PUSH
34221: LD_INT 1
34223: ST_TO_ADDR
// if p3 = 7 then
34224: LD_VAR 0 3
34228: PUSH
34229: LD_INT 7
34231: EQUAL
34232: IFFALSE 34242
// sRadar := true ;
34234: LD_ADDR_EXP 96
34238: PUSH
34239: LD_INT 1
34241: ST_TO_ADDR
// if p3 = 8 then
34242: LD_VAR 0 3
34246: PUSH
34247: LD_INT 8
34249: EQUAL
34250: IFFALSE 34260
// sBunker := true ;
34252: LD_ADDR_EXP 97
34256: PUSH
34257: LD_INT 1
34259: ST_TO_ADDR
// if p3 = 9 then
34260: LD_VAR 0 3
34264: PUSH
34265: LD_INT 9
34267: EQUAL
34268: IFFALSE 34278
// sHack := true ;
34270: LD_ADDR_EXP 98
34274: PUSH
34275: LD_INT 1
34277: ST_TO_ADDR
// if p3 = 10 then
34278: LD_VAR 0 3
34282: PUSH
34283: LD_INT 10
34285: EQUAL
34286: IFFALSE 34296
// sFire := true ;
34288: LD_ADDR_EXP 99
34292: PUSH
34293: LD_INT 1
34295: ST_TO_ADDR
// if p3 = 11 then
34296: LD_VAR 0 3
34300: PUSH
34301: LD_INT 11
34303: EQUAL
34304: IFFALSE 34314
// sRefresh := true ;
34306: LD_ADDR_EXP 100
34310: PUSH
34311: LD_INT 1
34313: ST_TO_ADDR
// if p3 = 12 then
34314: LD_VAR 0 3
34318: PUSH
34319: LD_INT 12
34321: EQUAL
34322: IFFALSE 34332
// sExp := true ;
34324: LD_ADDR_EXP 101
34328: PUSH
34329: LD_INT 1
34331: ST_TO_ADDR
// if p3 = 13 then
34332: LD_VAR 0 3
34336: PUSH
34337: LD_INT 13
34339: EQUAL
34340: IFFALSE 34350
// sDepot := true ;
34342: LD_ADDR_EXP 102
34346: PUSH
34347: LD_INT 1
34349: ST_TO_ADDR
// if p3 = 14 then
34350: LD_VAR 0 3
34354: PUSH
34355: LD_INT 14
34357: EQUAL
34358: IFFALSE 34368
// sFlag := true ;
34360: LD_ADDR_EXP 103
34364: PUSH
34365: LD_INT 1
34367: ST_TO_ADDR
// if p3 = 15 then
34368: LD_VAR 0 3
34372: PUSH
34373: LD_INT 15
34375: EQUAL
34376: IFFALSE 34386
// sKamikadze := true ;
34378: LD_ADDR_EXP 111
34382: PUSH
34383: LD_INT 1
34385: ST_TO_ADDR
// if p3 = 16 then
34386: LD_VAR 0 3
34390: PUSH
34391: LD_INT 16
34393: EQUAL
34394: IFFALSE 34404
// sTroll := true ;
34396: LD_ADDR_EXP 112
34400: PUSH
34401: LD_INT 1
34403: ST_TO_ADDR
// if p3 = 17 then
34404: LD_VAR 0 3
34408: PUSH
34409: LD_INT 17
34411: EQUAL
34412: IFFALSE 34422
// sSlow := true ;
34414: LD_ADDR_EXP 113
34418: PUSH
34419: LD_INT 1
34421: ST_TO_ADDR
// if p3 = 18 then
34422: LD_VAR 0 3
34426: PUSH
34427: LD_INT 18
34429: EQUAL
34430: IFFALSE 34440
// sLack := true ;
34432: LD_ADDR_EXP 114
34436: PUSH
34437: LD_INT 1
34439: ST_TO_ADDR
// if p3 = 19 then
34440: LD_VAR 0 3
34444: PUSH
34445: LD_INT 19
34447: EQUAL
34448: IFFALSE 34458
// sTank := true ;
34450: LD_ADDR_EXP 116
34454: PUSH
34455: LD_INT 1
34457: ST_TO_ADDR
// if p3 = 20 then
34458: LD_VAR 0 3
34462: PUSH
34463: LD_INT 20
34465: EQUAL
34466: IFFALSE 34476
// sRemote := true ;
34468: LD_ADDR_EXP 117
34472: PUSH
34473: LD_INT 1
34475: ST_TO_ADDR
// if p3 = 21 then
34476: LD_VAR 0 3
34480: PUSH
34481: LD_INT 21
34483: EQUAL
34484: IFFALSE 34494
// sPowell := true ;
34486: LD_ADDR_EXP 118
34490: PUSH
34491: LD_INT 1
34493: ST_TO_ADDR
// if p3 = 22 then
34494: LD_VAR 0 3
34498: PUSH
34499: LD_INT 22
34501: EQUAL
34502: IFFALSE 34512
// sTeleport := true ;
34504: LD_ADDR_EXP 121
34508: PUSH
34509: LD_INT 1
34511: ST_TO_ADDR
// if p3 = 23 then
34512: LD_VAR 0 3
34516: PUSH
34517: LD_INT 23
34519: EQUAL
34520: IFFALSE 34530
// sOilTower := true ;
34522: LD_ADDR_EXP 123
34526: PUSH
34527: LD_INT 1
34529: ST_TO_ADDR
// if p3 = 24 then
34530: LD_VAR 0 3
34534: PUSH
34535: LD_INT 24
34537: EQUAL
34538: IFFALSE 34548
// sShovel := true ;
34540: LD_ADDR_EXP 124
34544: PUSH
34545: LD_INT 1
34547: ST_TO_ADDR
// if p3 = 25 then
34548: LD_VAR 0 3
34552: PUSH
34553: LD_INT 25
34555: EQUAL
34556: IFFALSE 34566
// sSheik := true ;
34558: LD_ADDR_EXP 125
34562: PUSH
34563: LD_INT 1
34565: ST_TO_ADDR
// if p3 = 26 then
34566: LD_VAR 0 3
34570: PUSH
34571: LD_INT 26
34573: EQUAL
34574: IFFALSE 34584
// sEarthquake := true ;
34576: LD_ADDR_EXP 127
34580: PUSH
34581: LD_INT 1
34583: ST_TO_ADDR
// if p3 = 27 then
34584: LD_VAR 0 3
34588: PUSH
34589: LD_INT 27
34591: EQUAL
34592: IFFALSE 34602
// sAI := true ;
34594: LD_ADDR_EXP 128
34598: PUSH
34599: LD_INT 1
34601: ST_TO_ADDR
// if p3 = 28 then
34602: LD_VAR 0 3
34606: PUSH
34607: LD_INT 28
34609: EQUAL
34610: IFFALSE 34620
// sCargo := true ;
34612: LD_ADDR_EXP 131
34616: PUSH
34617: LD_INT 1
34619: ST_TO_ADDR
// if p3 = 29 then
34620: LD_VAR 0 3
34624: PUSH
34625: LD_INT 29
34627: EQUAL
34628: IFFALSE 34638
// sDLaser := true ;
34630: LD_ADDR_EXP 132
34634: PUSH
34635: LD_INT 1
34637: ST_TO_ADDR
// if p3 = 30 then
34638: LD_VAR 0 3
34642: PUSH
34643: LD_INT 30
34645: EQUAL
34646: IFFALSE 34656
// sExchange := true ;
34648: LD_ADDR_EXP 133
34652: PUSH
34653: LD_INT 1
34655: ST_TO_ADDR
// if p3 = 31 then
34656: LD_VAR 0 3
34660: PUSH
34661: LD_INT 31
34663: EQUAL
34664: IFFALSE 34674
// sFac := true ;
34666: LD_ADDR_EXP 134
34670: PUSH
34671: LD_INT 1
34673: ST_TO_ADDR
// if p3 = 32 then
34674: LD_VAR 0 3
34678: PUSH
34679: LD_INT 32
34681: EQUAL
34682: IFFALSE 34692
// sPower := true ;
34684: LD_ADDR_EXP 135
34688: PUSH
34689: LD_INT 1
34691: ST_TO_ADDR
// if p3 = 33 then
34692: LD_VAR 0 3
34696: PUSH
34697: LD_INT 33
34699: EQUAL
34700: IFFALSE 34710
// sRandom := true ;
34702: LD_ADDR_EXP 136
34706: PUSH
34707: LD_INT 1
34709: ST_TO_ADDR
// if p3 = 34 then
34710: LD_VAR 0 3
34714: PUSH
34715: LD_INT 34
34717: EQUAL
34718: IFFALSE 34728
// sShield := true ;
34720: LD_ADDR_EXP 137
34724: PUSH
34725: LD_INT 1
34727: ST_TO_ADDR
// if p3 = 35 then
34728: LD_VAR 0 3
34732: PUSH
34733: LD_INT 35
34735: EQUAL
34736: IFFALSE 34746
// sTime := true ;
34738: LD_ADDR_EXP 138
34742: PUSH
34743: LD_INT 1
34745: ST_TO_ADDR
// if p3 = 36 then
34746: LD_VAR 0 3
34750: PUSH
34751: LD_INT 36
34753: EQUAL
34754: IFFALSE 34764
// sTools := true ;
34756: LD_ADDR_EXP 139
34760: PUSH
34761: LD_INT 1
34763: ST_TO_ADDR
// if p3 = 101 then
34764: LD_VAR 0 3
34768: PUSH
34769: LD_INT 101
34771: EQUAL
34772: IFFALSE 34782
// sSold := true ;
34774: LD_ADDR_EXP 104
34778: PUSH
34779: LD_INT 1
34781: ST_TO_ADDR
// if p3 = 102 then
34782: LD_VAR 0 3
34786: PUSH
34787: LD_INT 102
34789: EQUAL
34790: IFFALSE 34800
// sDiff := true ;
34792: LD_ADDR_EXP 105
34796: PUSH
34797: LD_INT 1
34799: ST_TO_ADDR
// if p3 = 103 then
34800: LD_VAR 0 3
34804: PUSH
34805: LD_INT 103
34807: EQUAL
34808: IFFALSE 34818
// sFog := true ;
34810: LD_ADDR_EXP 108
34814: PUSH
34815: LD_INT 1
34817: ST_TO_ADDR
// if p3 = 104 then
34818: LD_VAR 0 3
34822: PUSH
34823: LD_INT 104
34825: EQUAL
34826: IFFALSE 34836
// sReset := true ;
34828: LD_ADDR_EXP 109
34832: PUSH
34833: LD_INT 1
34835: ST_TO_ADDR
// if p3 = 105 then
34836: LD_VAR 0 3
34840: PUSH
34841: LD_INT 105
34843: EQUAL
34844: IFFALSE 34854
// sSun := true ;
34846: LD_ADDR_EXP 110
34850: PUSH
34851: LD_INT 1
34853: ST_TO_ADDR
// if p3 = 106 then
34854: LD_VAR 0 3
34858: PUSH
34859: LD_INT 106
34861: EQUAL
34862: IFFALSE 34872
// sTiger := true ;
34864: LD_ADDR_EXP 106
34868: PUSH
34869: LD_INT 1
34871: ST_TO_ADDR
// if p3 = 107 then
34872: LD_VAR 0 3
34876: PUSH
34877: LD_INT 107
34879: EQUAL
34880: IFFALSE 34890
// sBomb := true ;
34882: LD_ADDR_EXP 107
34886: PUSH
34887: LD_INT 1
34889: ST_TO_ADDR
// if p3 = 108 then
34890: LD_VAR 0 3
34894: PUSH
34895: LD_INT 108
34897: EQUAL
34898: IFFALSE 34908
// sWound := true ;
34900: LD_ADDR_EXP 115
34904: PUSH
34905: LD_INT 1
34907: ST_TO_ADDR
// if p3 = 109 then
34908: LD_VAR 0 3
34912: PUSH
34913: LD_INT 109
34915: EQUAL
34916: IFFALSE 34926
// sBetray := true ;
34918: LD_ADDR_EXP 119
34922: PUSH
34923: LD_INT 1
34925: ST_TO_ADDR
// if p3 = 110 then
34926: LD_VAR 0 3
34930: PUSH
34931: LD_INT 110
34933: EQUAL
34934: IFFALSE 34944
// sContamin := true ;
34936: LD_ADDR_EXP 120
34940: PUSH
34941: LD_INT 1
34943: ST_TO_ADDR
// if p3 = 111 then
34944: LD_VAR 0 3
34948: PUSH
34949: LD_INT 111
34951: EQUAL
34952: IFFALSE 34962
// sOil := true ;
34954: LD_ADDR_EXP 122
34958: PUSH
34959: LD_INT 1
34961: ST_TO_ADDR
// if p3 = 112 then
34962: LD_VAR 0 3
34966: PUSH
34967: LD_INT 112
34969: EQUAL
34970: IFFALSE 34980
// sStu := true ;
34972: LD_ADDR_EXP 126
34976: PUSH
34977: LD_INT 1
34979: ST_TO_ADDR
// if p3 = 113 then
34980: LD_VAR 0 3
34984: PUSH
34985: LD_INT 113
34987: EQUAL
34988: IFFALSE 34998
// sBazooka := true ;
34990: LD_ADDR_EXP 129
34994: PUSH
34995: LD_INT 1
34997: ST_TO_ADDR
// if p3 = 114 then
34998: LD_VAR 0 3
35002: PUSH
35003: LD_INT 114
35005: EQUAL
35006: IFFALSE 35016
// sMortar := true ;
35008: LD_ADDR_EXP 130
35012: PUSH
35013: LD_INT 1
35015: ST_TO_ADDR
// if p3 = 115 then
35016: LD_VAR 0 3
35020: PUSH
35021: LD_INT 115
35023: EQUAL
35024: IFFALSE 35034
// sRanger := true ;
35026: LD_ADDR_EXP 140
35030: PUSH
35031: LD_INT 1
35033: ST_TO_ADDR
// if p3 = 116 then
35034: LD_VAR 0 3
35038: PUSH
35039: LD_INT 116
35041: EQUAL
35042: IFFALSE 35052
// sComputer := true ;
35044: LD_ADDR_EXP 141
35048: PUSH
35049: LD_INT 1
35051: ST_TO_ADDR
// if p3 = 117 then
35052: LD_VAR 0 3
35056: PUSH
35057: LD_INT 117
35059: EQUAL
35060: IFFALSE 35070
// s30 := true ;
35062: LD_ADDR_EXP 142
35066: PUSH
35067: LD_INT 1
35069: ST_TO_ADDR
// if p3 = 118 then
35070: LD_VAR 0 3
35074: PUSH
35075: LD_INT 118
35077: EQUAL
35078: IFFALSE 35088
// s60 := true ;
35080: LD_ADDR_EXP 143
35084: PUSH
35085: LD_INT 1
35087: ST_TO_ADDR
// end ; if p2 = hack_mode then
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 101
35095: EQUAL
35096: IFFALSE 35224
// begin case p3 of 1 :
35098: LD_VAR 0 3
35102: PUSH
35103: LD_INT 1
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35111
35109: GO 35118
35111: POP
// hHackUnlimitedResources ; 2 :
35112: CALL 47371 0 0
35116: GO 35224
35118: LD_INT 2
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35133
35126: POP
// hHackSetLevel10 ; 3 :
35127: CALL 47504 0 0
35131: GO 35224
35133: LD_INT 3
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35148
35141: POP
// hHackSetLevel10YourUnits ; 4 :
35142: CALL 47589 0 0
35146: GO 35224
35148: LD_INT 4
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35163
35156: POP
// hHackInvincible ; 5 :
35157: CALL 48037 0 0
35161: GO 35224
35163: LD_INT 5
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35178
35171: POP
// hHackInvisible ; 6 :
35172: CALL 48148 0 0
35176: GO 35224
35178: LD_INT 6
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35186
35184: GO 35193
35186: POP
// hHackChangeYourSide ; 7 :
35187: CALL 48205 0 0
35191: GO 35224
35193: LD_INT 7
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35208
35201: POP
// hHackChangeUnitSide ; 8 :
35202: CALL 48247 0 0
35206: GO 35224
35208: LD_INT 8
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35223
35216: POP
// hHackFog ; end ;
35217: CALL 48348 0 0
35221: GO 35224
35223: POP
// end ; if p2 = game_save_mode then
35224: LD_VAR 0 2
35228: PUSH
35229: LD_INT 102
35231: EQUAL
35232: IFFALSE 35287
// begin if p3 = 1 then
35234: LD_VAR 0 3
35238: PUSH
35239: LD_INT 1
35241: EQUAL
35242: IFFALSE 35254
// globalGameSaveCounter := p4 ;
35244: LD_ADDR_EXP 86
35248: PUSH
35249: LD_VAR 0 4
35253: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35254: LD_VAR 0 3
35258: PUSH
35259: LD_INT 2
35261: EQUAL
35262: PUSH
35263: LD_EXP 86
35267: AND
35268: IFFALSE 35287
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35270: LD_STRING setGameSaveCounter(
35272: PUSH
35273: LD_EXP 86
35277: STR
35278: PUSH
35279: LD_STRING )
35281: STR
35282: PPUSH
35283: CALL_OW 559
// end ; end ;
35287: LD_VAR 0 7
35291: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35292: LD_INT 0
35294: PPUSH
// streamModeActive := false ;
35295: LD_ADDR_EXP 87
35299: PUSH
35300: LD_INT 0
35302: ST_TO_ADDR
// normalCounter := 36 ;
35303: LD_ADDR_EXP 88
35307: PUSH
35308: LD_INT 36
35310: ST_TO_ADDR
// hardcoreCounter := 18 ;
35311: LD_ADDR_EXP 89
35315: PUSH
35316: LD_INT 18
35318: ST_TO_ADDR
// sRocket := false ;
35319: LD_ADDR_EXP 92
35323: PUSH
35324: LD_INT 0
35326: ST_TO_ADDR
// sSpeed := false ;
35327: LD_ADDR_EXP 91
35331: PUSH
35332: LD_INT 0
35334: ST_TO_ADDR
// sEngine := false ;
35335: LD_ADDR_EXP 93
35339: PUSH
35340: LD_INT 0
35342: ST_TO_ADDR
// sSpec := false ;
35343: LD_ADDR_EXP 90
35347: PUSH
35348: LD_INT 0
35350: ST_TO_ADDR
// sLevel := false ;
35351: LD_ADDR_EXP 94
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
// sArmoury := false ;
35359: LD_ADDR_EXP 95
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// sRadar := false ;
35367: LD_ADDR_EXP 96
35371: PUSH
35372: LD_INT 0
35374: ST_TO_ADDR
// sBunker := false ;
35375: LD_ADDR_EXP 97
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// sHack := false ;
35383: LD_ADDR_EXP 98
35387: PUSH
35388: LD_INT 0
35390: ST_TO_ADDR
// sFire := false ;
35391: LD_ADDR_EXP 99
35395: PUSH
35396: LD_INT 0
35398: ST_TO_ADDR
// sRefresh := false ;
35399: LD_ADDR_EXP 100
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// sExp := false ;
35407: LD_ADDR_EXP 101
35411: PUSH
35412: LD_INT 0
35414: ST_TO_ADDR
// sDepot := false ;
35415: LD_ADDR_EXP 102
35419: PUSH
35420: LD_INT 0
35422: ST_TO_ADDR
// sFlag := false ;
35423: LD_ADDR_EXP 103
35427: PUSH
35428: LD_INT 0
35430: ST_TO_ADDR
// sKamikadze := false ;
35431: LD_ADDR_EXP 111
35435: PUSH
35436: LD_INT 0
35438: ST_TO_ADDR
// sTroll := false ;
35439: LD_ADDR_EXP 112
35443: PUSH
35444: LD_INT 0
35446: ST_TO_ADDR
// sSlow := false ;
35447: LD_ADDR_EXP 113
35451: PUSH
35452: LD_INT 0
35454: ST_TO_ADDR
// sLack := false ;
35455: LD_ADDR_EXP 114
35459: PUSH
35460: LD_INT 0
35462: ST_TO_ADDR
// sTank := false ;
35463: LD_ADDR_EXP 116
35467: PUSH
35468: LD_INT 0
35470: ST_TO_ADDR
// sRemote := false ;
35471: LD_ADDR_EXP 117
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// sPowell := false ;
35479: LD_ADDR_EXP 118
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// sTeleport := false ;
35487: LD_ADDR_EXP 121
35491: PUSH
35492: LD_INT 0
35494: ST_TO_ADDR
// sOilTower := false ;
35495: LD_ADDR_EXP 123
35499: PUSH
35500: LD_INT 0
35502: ST_TO_ADDR
// sShovel := false ;
35503: LD_ADDR_EXP 124
35507: PUSH
35508: LD_INT 0
35510: ST_TO_ADDR
// sSheik := false ;
35511: LD_ADDR_EXP 125
35515: PUSH
35516: LD_INT 0
35518: ST_TO_ADDR
// sEarthquake := false ;
35519: LD_ADDR_EXP 127
35523: PUSH
35524: LD_INT 0
35526: ST_TO_ADDR
// sAI := false ;
35527: LD_ADDR_EXP 128
35531: PUSH
35532: LD_INT 0
35534: ST_TO_ADDR
// sCargo := false ;
35535: LD_ADDR_EXP 131
35539: PUSH
35540: LD_INT 0
35542: ST_TO_ADDR
// sDLaser := false ;
35543: LD_ADDR_EXP 132
35547: PUSH
35548: LD_INT 0
35550: ST_TO_ADDR
// sExchange := false ;
35551: LD_ADDR_EXP 133
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// sFac := false ;
35559: LD_ADDR_EXP 134
35563: PUSH
35564: LD_INT 0
35566: ST_TO_ADDR
// sPower := false ;
35567: LD_ADDR_EXP 135
35571: PUSH
35572: LD_INT 0
35574: ST_TO_ADDR
// sRandom := false ;
35575: LD_ADDR_EXP 136
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// sShield := false ;
35583: LD_ADDR_EXP 137
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// sTime := false ;
35591: LD_ADDR_EXP 138
35595: PUSH
35596: LD_INT 0
35598: ST_TO_ADDR
// sTools := false ;
35599: LD_ADDR_EXP 139
35603: PUSH
35604: LD_INT 0
35606: ST_TO_ADDR
// sSold := false ;
35607: LD_ADDR_EXP 104
35611: PUSH
35612: LD_INT 0
35614: ST_TO_ADDR
// sDiff := false ;
35615: LD_ADDR_EXP 105
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// sFog := false ;
35623: LD_ADDR_EXP 108
35627: PUSH
35628: LD_INT 0
35630: ST_TO_ADDR
// sReset := false ;
35631: LD_ADDR_EXP 109
35635: PUSH
35636: LD_INT 0
35638: ST_TO_ADDR
// sSun := false ;
35639: LD_ADDR_EXP 110
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
// sTiger := false ;
35647: LD_ADDR_EXP 106
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
// sBomb := false ;
35655: LD_ADDR_EXP 107
35659: PUSH
35660: LD_INT 0
35662: ST_TO_ADDR
// sWound := false ;
35663: LD_ADDR_EXP 115
35667: PUSH
35668: LD_INT 0
35670: ST_TO_ADDR
// sBetray := false ;
35671: LD_ADDR_EXP 119
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// sContamin := false ;
35679: LD_ADDR_EXP 120
35683: PUSH
35684: LD_INT 0
35686: ST_TO_ADDR
// sOil := false ;
35687: LD_ADDR_EXP 122
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// sStu := false ;
35695: LD_ADDR_EXP 126
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// sBazooka := false ;
35703: LD_ADDR_EXP 129
35707: PUSH
35708: LD_INT 0
35710: ST_TO_ADDR
// sMortar := false ;
35711: LD_ADDR_EXP 130
35715: PUSH
35716: LD_INT 0
35718: ST_TO_ADDR
// sRanger := false ;
35719: LD_ADDR_EXP 140
35723: PUSH
35724: LD_INT 0
35726: ST_TO_ADDR
// sComputer := false ;
35727: LD_ADDR_EXP 141
35731: PUSH
35732: LD_INT 0
35734: ST_TO_ADDR
// s30 := false ;
35735: LD_ADDR_EXP 142
35739: PUSH
35740: LD_INT 0
35742: ST_TO_ADDR
// s60 := false ;
35743: LD_ADDR_EXP 143
35747: PUSH
35748: LD_INT 0
35750: ST_TO_ADDR
// end ;
35751: LD_VAR 0 1
35755: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35756: LD_INT 0
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
// result := [ ] ;
35765: LD_ADDR_VAR 0 2
35769: PUSH
35770: EMPTY
35771: ST_TO_ADDR
// if campaign_id = 1 then
35772: LD_OWVAR 69
35776: PUSH
35777: LD_INT 1
35779: EQUAL
35780: IFFALSE 38946
// begin case mission_number of 1 :
35782: LD_OWVAR 70
35786: PUSH
35787: LD_INT 1
35789: DOUBLE
35790: EQUAL
35791: IFTRUE 35795
35793: GO 35871
35795: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35796: LD_ADDR_VAR 0 2
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 4
35806: PUSH
35807: LD_INT 11
35809: PUSH
35810: LD_INT 12
35812: PUSH
35813: LD_INT 15
35815: PUSH
35816: LD_INT 16
35818: PUSH
35819: LD_INT 22
35821: PUSH
35822: LD_INT 23
35824: PUSH
35825: LD_INT 26
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 101
35841: PUSH
35842: LD_INT 102
35844: PUSH
35845: LD_INT 106
35847: PUSH
35848: LD_INT 116
35850: PUSH
35851: LD_INT 117
35853: PUSH
35854: LD_INT 118
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: ST_TO_ADDR
35869: GO 38944
35871: LD_INT 2
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35879
35877: GO 35963
35879: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35880: LD_ADDR_VAR 0 2
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: LD_INT 11
35893: PUSH
35894: LD_INT 12
35896: PUSH
35897: LD_INT 15
35899: PUSH
35900: LD_INT 16
35902: PUSH
35903: LD_INT 22
35905: PUSH
35906: LD_INT 23
35908: PUSH
35909: LD_INT 26
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 101
35925: PUSH
35926: LD_INT 102
35928: PUSH
35929: LD_INT 105
35931: PUSH
35932: LD_INT 106
35934: PUSH
35935: LD_INT 108
35937: PUSH
35938: LD_INT 116
35940: PUSH
35941: LD_INT 117
35943: PUSH
35944: LD_INT 118
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: ST_TO_ADDR
35961: GO 38944
35963: LD_INT 3
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 36059
35971: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35972: LD_ADDR_VAR 0 2
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 4
35982: PUSH
35983: LD_INT 5
35985: PUSH
35986: LD_INT 11
35988: PUSH
35989: LD_INT 12
35991: PUSH
35992: LD_INT 15
35994: PUSH
35995: LD_INT 16
35997: PUSH
35998: LD_INT 22
36000: PUSH
36001: LD_INT 26
36003: PUSH
36004: LD_INT 36
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 101
36021: PUSH
36022: LD_INT 102
36024: PUSH
36025: LD_INT 105
36027: PUSH
36028: LD_INT 106
36030: PUSH
36031: LD_INT 108
36033: PUSH
36034: LD_INT 116
36036: PUSH
36037: LD_INT 117
36039: PUSH
36040: LD_INT 118
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: ST_TO_ADDR
36057: GO 38944
36059: LD_INT 4
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36067
36065: GO 36163
36067: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 4
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: LD_INT 8
36084: PUSH
36085: LD_INT 11
36087: PUSH
36088: LD_INT 12
36090: PUSH
36091: LD_INT 15
36093: PUSH
36094: LD_INT 16
36096: PUSH
36097: LD_INT 22
36099: PUSH
36100: LD_INT 23
36102: PUSH
36103: LD_INT 26
36105: PUSH
36106: LD_INT 36
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 101
36125: PUSH
36126: LD_INT 102
36128: PUSH
36129: LD_INT 105
36131: PUSH
36132: LD_INT 106
36134: PUSH
36135: LD_INT 108
36137: PUSH
36138: LD_INT 116
36140: PUSH
36141: LD_INT 117
36143: PUSH
36144: LD_INT 118
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 38944
36163: LD_INT 5
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36283
36171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: LD_INT 4
36182: PUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 6
36188: PUSH
36189: LD_INT 8
36191: PUSH
36192: LD_INT 11
36194: PUSH
36195: LD_INT 12
36197: PUSH
36198: LD_INT 15
36200: PUSH
36201: LD_INT 16
36203: PUSH
36204: LD_INT 22
36206: PUSH
36207: LD_INT 23
36209: PUSH
36210: LD_INT 25
36212: PUSH
36213: LD_INT 26
36215: PUSH
36216: LD_INT 36
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 101
36237: PUSH
36238: LD_INT 102
36240: PUSH
36241: LD_INT 105
36243: PUSH
36244: LD_INT 106
36246: PUSH
36247: LD_INT 108
36249: PUSH
36250: LD_INT 109
36252: PUSH
36253: LD_INT 112
36255: PUSH
36256: LD_INT 116
36258: PUSH
36259: LD_INT 117
36261: PUSH
36262: LD_INT 118
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: ST_TO_ADDR
36281: GO 38944
36283: LD_INT 6
36285: DOUBLE
36286: EQUAL
36287: IFTRUE 36291
36289: GO 36423
36291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 4
36302: PUSH
36303: LD_INT 5
36305: PUSH
36306: LD_INT 6
36308: PUSH
36309: LD_INT 8
36311: PUSH
36312: LD_INT 11
36314: PUSH
36315: LD_INT 12
36317: PUSH
36318: LD_INT 15
36320: PUSH
36321: LD_INT 16
36323: PUSH
36324: LD_INT 20
36326: PUSH
36327: LD_INT 21
36329: PUSH
36330: LD_INT 22
36332: PUSH
36333: LD_INT 23
36335: PUSH
36336: LD_INT 25
36338: PUSH
36339: LD_INT 26
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 31
36347: PUSH
36348: LD_INT 32
36350: PUSH
36351: LD_INT 36
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 101
36377: PUSH
36378: LD_INT 102
36380: PUSH
36381: LD_INT 105
36383: PUSH
36384: LD_INT 106
36386: PUSH
36387: LD_INT 108
36389: PUSH
36390: LD_INT 109
36392: PUSH
36393: LD_INT 112
36395: PUSH
36396: LD_INT 116
36398: PUSH
36399: LD_INT 117
36401: PUSH
36402: LD_INT 118
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: ST_TO_ADDR
36421: GO 38944
36423: LD_INT 7
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36431
36429: GO 36543
36431: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: LD_INT 7
36448: PUSH
36449: LD_INT 11
36451: PUSH
36452: LD_INT 12
36454: PUSH
36455: LD_INT 15
36457: PUSH
36458: LD_INT 16
36460: PUSH
36461: LD_INT 20
36463: PUSH
36464: LD_INT 21
36466: PUSH
36467: LD_INT 22
36469: PUSH
36470: LD_INT 23
36472: PUSH
36473: LD_INT 25
36475: PUSH
36476: LD_INT 26
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 101
36497: PUSH
36498: LD_INT 102
36500: PUSH
36501: LD_INT 103
36503: PUSH
36504: LD_INT 105
36506: PUSH
36507: LD_INT 106
36509: PUSH
36510: LD_INT 108
36512: PUSH
36513: LD_INT 112
36515: PUSH
36516: LD_INT 116
36518: PUSH
36519: LD_INT 117
36521: PUSH
36522: LD_INT 118
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 38944
36543: LD_INT 8
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36691
36551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36552: LD_ADDR_VAR 0 2
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 4
36562: PUSH
36563: LD_INT 5
36565: PUSH
36566: LD_INT 6
36568: PUSH
36569: LD_INT 7
36571: PUSH
36572: LD_INT 8
36574: PUSH
36575: LD_INT 11
36577: PUSH
36578: LD_INT 12
36580: PUSH
36581: LD_INT 15
36583: PUSH
36584: LD_INT 16
36586: PUSH
36587: LD_INT 20
36589: PUSH
36590: LD_INT 21
36592: PUSH
36593: LD_INT 22
36595: PUSH
36596: LD_INT 23
36598: PUSH
36599: LD_INT 25
36601: PUSH
36602: LD_INT 26
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 31
36610: PUSH
36611: LD_INT 32
36613: PUSH
36614: LD_INT 36
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 101
36641: PUSH
36642: LD_INT 102
36644: PUSH
36645: LD_INT 103
36647: PUSH
36648: LD_INT 105
36650: PUSH
36651: LD_INT 106
36653: PUSH
36654: LD_INT 108
36656: PUSH
36657: LD_INT 109
36659: PUSH
36660: LD_INT 112
36662: PUSH
36663: LD_INT 116
36665: PUSH
36666: LD_INT 117
36668: PUSH
36669: LD_INT 118
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: ST_TO_ADDR
36689: GO 38944
36691: LD_INT 9
36693: DOUBLE
36694: EQUAL
36695: IFTRUE 36699
36697: GO 36847
36699: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36700: LD_ADDR_VAR 0 2
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: LD_INT 5
36713: PUSH
36714: LD_INT 6
36716: PUSH
36717: LD_INT 7
36719: PUSH
36720: LD_INT 8
36722: PUSH
36723: LD_INT 11
36725: PUSH
36726: LD_INT 12
36728: PUSH
36729: LD_INT 15
36731: PUSH
36732: LD_INT 16
36734: PUSH
36735: LD_INT 20
36737: PUSH
36738: LD_INT 21
36740: PUSH
36741: LD_INT 22
36743: PUSH
36744: LD_INT 23
36746: PUSH
36747: LD_INT 25
36749: PUSH
36750: LD_INT 26
36752: PUSH
36753: LD_INT 28
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: LD_INT 31
36761: PUSH
36762: LD_INT 32
36764: PUSH
36765: LD_INT 36
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 101
36793: PUSH
36794: LD_INT 102
36796: PUSH
36797: LD_INT 103
36799: PUSH
36800: LD_INT 105
36802: PUSH
36803: LD_INT 106
36805: PUSH
36806: LD_INT 108
36808: PUSH
36809: LD_INT 109
36811: PUSH
36812: LD_INT 112
36814: PUSH
36815: LD_INT 114
36817: PUSH
36818: LD_INT 116
36820: PUSH
36821: LD_INT 117
36823: PUSH
36824: LD_INT 118
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: ST_TO_ADDR
36845: GO 38944
36847: LD_INT 10
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 37051
36855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36856: LD_ADDR_VAR 0 2
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 4
36866: PUSH
36867: LD_INT 5
36869: PUSH
36870: LD_INT 6
36872: PUSH
36873: LD_INT 7
36875: PUSH
36876: LD_INT 8
36878: PUSH
36879: LD_INT 9
36881: PUSH
36882: LD_INT 10
36884: PUSH
36885: LD_INT 11
36887: PUSH
36888: LD_INT 12
36890: PUSH
36891: LD_INT 13
36893: PUSH
36894: LD_INT 14
36896: PUSH
36897: LD_INT 15
36899: PUSH
36900: LD_INT 16
36902: PUSH
36903: LD_INT 17
36905: PUSH
36906: LD_INT 18
36908: PUSH
36909: LD_INT 19
36911: PUSH
36912: LD_INT 20
36914: PUSH
36915: LD_INT 21
36917: PUSH
36918: LD_INT 22
36920: PUSH
36921: LD_INT 23
36923: PUSH
36924: LD_INT 24
36926: PUSH
36927: LD_INT 25
36929: PUSH
36930: LD_INT 26
36932: PUSH
36933: LD_INT 28
36935: PUSH
36936: LD_INT 30
36938: PUSH
36939: LD_INT 31
36941: PUSH
36942: LD_INT 32
36944: PUSH
36945: LD_INT 36
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 101
36981: PUSH
36982: LD_INT 102
36984: PUSH
36985: LD_INT 103
36987: PUSH
36988: LD_INT 104
36990: PUSH
36991: LD_INT 105
36993: PUSH
36994: LD_INT 106
36996: PUSH
36997: LD_INT 107
36999: PUSH
37000: LD_INT 108
37002: PUSH
37003: LD_INT 109
37005: PUSH
37006: LD_INT 110
37008: PUSH
37009: LD_INT 111
37011: PUSH
37012: LD_INT 112
37014: PUSH
37015: LD_INT 114
37017: PUSH
37018: LD_INT 116
37020: PUSH
37021: LD_INT 117
37023: PUSH
37024: LD_INT 118
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: ST_TO_ADDR
37049: GO 38944
37051: LD_INT 11
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37059
37057: GO 37263
37059: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37060: LD_ADDR_VAR 0 2
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 4
37073: PUSH
37074: LD_INT 5
37076: PUSH
37077: LD_INT 6
37079: PUSH
37080: LD_INT 7
37082: PUSH
37083: LD_INT 8
37085: PUSH
37086: LD_INT 9
37088: PUSH
37089: LD_INT 10
37091: PUSH
37092: LD_INT 11
37094: PUSH
37095: LD_INT 12
37097: PUSH
37098: LD_INT 13
37100: PUSH
37101: LD_INT 14
37103: PUSH
37104: LD_INT 15
37106: PUSH
37107: LD_INT 16
37109: PUSH
37110: LD_INT 17
37112: PUSH
37113: LD_INT 18
37115: PUSH
37116: LD_INT 19
37118: PUSH
37119: LD_INT 20
37121: PUSH
37122: LD_INT 21
37124: PUSH
37125: LD_INT 22
37127: PUSH
37128: LD_INT 23
37130: PUSH
37131: LD_INT 24
37133: PUSH
37134: LD_INT 25
37136: PUSH
37137: LD_INT 26
37139: PUSH
37140: LD_INT 28
37142: PUSH
37143: LD_INT 30
37145: PUSH
37146: LD_INT 31
37148: PUSH
37149: LD_INT 32
37151: PUSH
37152: LD_INT 34
37154: PUSH
37155: LD_INT 36
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 101
37193: PUSH
37194: LD_INT 102
37196: PUSH
37197: LD_INT 103
37199: PUSH
37200: LD_INT 104
37202: PUSH
37203: LD_INT 105
37205: PUSH
37206: LD_INT 106
37208: PUSH
37209: LD_INT 107
37211: PUSH
37212: LD_INT 108
37214: PUSH
37215: LD_INT 109
37217: PUSH
37218: LD_INT 110
37220: PUSH
37221: LD_INT 111
37223: PUSH
37224: LD_INT 112
37226: PUSH
37227: LD_INT 114
37229: PUSH
37230: LD_INT 116
37232: PUSH
37233: LD_INT 117
37235: PUSH
37236: LD_INT 118
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: ST_TO_ADDR
37261: GO 38944
37263: LD_INT 12
37265: DOUBLE
37266: EQUAL
37267: IFTRUE 37271
37269: GO 37491
37271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37272: LD_ADDR_VAR 0 2
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 3
37285: PUSH
37286: LD_INT 4
37288: PUSH
37289: LD_INT 5
37291: PUSH
37292: LD_INT 6
37294: PUSH
37295: LD_INT 7
37297: PUSH
37298: LD_INT 8
37300: PUSH
37301: LD_INT 9
37303: PUSH
37304: LD_INT 10
37306: PUSH
37307: LD_INT 11
37309: PUSH
37310: LD_INT 12
37312: PUSH
37313: LD_INT 13
37315: PUSH
37316: LD_INT 14
37318: PUSH
37319: LD_INT 15
37321: PUSH
37322: LD_INT 16
37324: PUSH
37325: LD_INT 17
37327: PUSH
37328: LD_INT 18
37330: PUSH
37331: LD_INT 19
37333: PUSH
37334: LD_INT 20
37336: PUSH
37337: LD_INT 21
37339: PUSH
37340: LD_INT 22
37342: PUSH
37343: LD_INT 23
37345: PUSH
37346: LD_INT 24
37348: PUSH
37349: LD_INT 25
37351: PUSH
37352: LD_INT 26
37354: PUSH
37355: LD_INT 27
37357: PUSH
37358: LD_INT 28
37360: PUSH
37361: LD_INT 30
37363: PUSH
37364: LD_INT 31
37366: PUSH
37367: LD_INT 32
37369: PUSH
37370: LD_INT 33
37372: PUSH
37373: LD_INT 34
37375: PUSH
37376: LD_INT 36
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 101
37417: PUSH
37418: LD_INT 102
37420: PUSH
37421: LD_INT 103
37423: PUSH
37424: LD_INT 104
37426: PUSH
37427: LD_INT 105
37429: PUSH
37430: LD_INT 106
37432: PUSH
37433: LD_INT 107
37435: PUSH
37436: LD_INT 108
37438: PUSH
37439: LD_INT 109
37441: PUSH
37442: LD_INT 110
37444: PUSH
37445: LD_INT 111
37447: PUSH
37448: LD_INT 112
37450: PUSH
37451: LD_INT 113
37453: PUSH
37454: LD_INT 114
37456: PUSH
37457: LD_INT 116
37459: PUSH
37460: LD_INT 117
37462: PUSH
37463: LD_INT 118
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: ST_TO_ADDR
37489: GO 38944
37491: LD_INT 13
37493: DOUBLE
37494: EQUAL
37495: IFTRUE 37499
37497: GO 37707
37499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37500: LD_ADDR_VAR 0 2
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: LD_INT 5
37519: PUSH
37520: LD_INT 8
37522: PUSH
37523: LD_INT 9
37525: PUSH
37526: LD_INT 10
37528: PUSH
37529: LD_INT 11
37531: PUSH
37532: LD_INT 12
37534: PUSH
37535: LD_INT 14
37537: PUSH
37538: LD_INT 15
37540: PUSH
37541: LD_INT 16
37543: PUSH
37544: LD_INT 17
37546: PUSH
37547: LD_INT 18
37549: PUSH
37550: LD_INT 19
37552: PUSH
37553: LD_INT 20
37555: PUSH
37556: LD_INT 21
37558: PUSH
37559: LD_INT 22
37561: PUSH
37562: LD_INT 23
37564: PUSH
37565: LD_INT 24
37567: PUSH
37568: LD_INT 25
37570: PUSH
37571: LD_INT 26
37573: PUSH
37574: LD_INT 27
37576: PUSH
37577: LD_INT 28
37579: PUSH
37580: LD_INT 30
37582: PUSH
37583: LD_INT 31
37585: PUSH
37586: LD_INT 32
37588: PUSH
37589: LD_INT 33
37591: PUSH
37592: LD_INT 34
37594: PUSH
37595: LD_INT 36
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 101
37633: PUSH
37634: LD_INT 102
37636: PUSH
37637: LD_INT 103
37639: PUSH
37640: LD_INT 104
37642: PUSH
37643: LD_INT 105
37645: PUSH
37646: LD_INT 106
37648: PUSH
37649: LD_INT 107
37651: PUSH
37652: LD_INT 108
37654: PUSH
37655: LD_INT 109
37657: PUSH
37658: LD_INT 110
37660: PUSH
37661: LD_INT 111
37663: PUSH
37664: LD_INT 112
37666: PUSH
37667: LD_INT 113
37669: PUSH
37670: LD_INT 114
37672: PUSH
37673: LD_INT 116
37675: PUSH
37676: LD_INT 117
37678: PUSH
37679: LD_INT 118
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: ST_TO_ADDR
37705: GO 38944
37707: LD_INT 14
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37939
37715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 4
37732: PUSH
37733: LD_INT 5
37735: PUSH
37736: LD_INT 6
37738: PUSH
37739: LD_INT 7
37741: PUSH
37742: LD_INT 8
37744: PUSH
37745: LD_INT 9
37747: PUSH
37748: LD_INT 10
37750: PUSH
37751: LD_INT 11
37753: PUSH
37754: LD_INT 12
37756: PUSH
37757: LD_INT 13
37759: PUSH
37760: LD_INT 14
37762: PUSH
37763: LD_INT 15
37765: PUSH
37766: LD_INT 16
37768: PUSH
37769: LD_INT 17
37771: PUSH
37772: LD_INT 18
37774: PUSH
37775: LD_INT 19
37777: PUSH
37778: LD_INT 20
37780: PUSH
37781: LD_INT 21
37783: PUSH
37784: LD_INT 22
37786: PUSH
37787: LD_INT 23
37789: PUSH
37790: LD_INT 24
37792: PUSH
37793: LD_INT 25
37795: PUSH
37796: LD_INT 26
37798: PUSH
37799: LD_INT 27
37801: PUSH
37802: LD_INT 28
37804: PUSH
37805: LD_INT 29
37807: PUSH
37808: LD_INT 30
37810: PUSH
37811: LD_INT 31
37813: PUSH
37814: LD_INT 32
37816: PUSH
37817: LD_INT 33
37819: PUSH
37820: LD_INT 34
37822: PUSH
37823: LD_INT 36
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 101
37865: PUSH
37866: LD_INT 102
37868: PUSH
37869: LD_INT 103
37871: PUSH
37872: LD_INT 104
37874: PUSH
37875: LD_INT 105
37877: PUSH
37878: LD_INT 106
37880: PUSH
37881: LD_INT 107
37883: PUSH
37884: LD_INT 108
37886: PUSH
37887: LD_INT 109
37889: PUSH
37890: LD_INT 110
37892: PUSH
37893: LD_INT 111
37895: PUSH
37896: LD_INT 112
37898: PUSH
37899: LD_INT 113
37901: PUSH
37902: LD_INT 114
37904: PUSH
37905: LD_INT 116
37907: PUSH
37908: LD_INT 117
37910: PUSH
37911: LD_INT 118
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: ST_TO_ADDR
37937: GO 38944
37939: LD_INT 15
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37947
37945: GO 38171
37947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37948: LD_ADDR_VAR 0 2
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: LD_INT 4
37964: PUSH
37965: LD_INT 5
37967: PUSH
37968: LD_INT 6
37970: PUSH
37971: LD_INT 7
37973: PUSH
37974: LD_INT 8
37976: PUSH
37977: LD_INT 9
37979: PUSH
37980: LD_INT 10
37982: PUSH
37983: LD_INT 11
37985: PUSH
37986: LD_INT 12
37988: PUSH
37989: LD_INT 13
37991: PUSH
37992: LD_INT 14
37994: PUSH
37995: LD_INT 15
37997: PUSH
37998: LD_INT 16
38000: PUSH
38001: LD_INT 17
38003: PUSH
38004: LD_INT 18
38006: PUSH
38007: LD_INT 19
38009: PUSH
38010: LD_INT 20
38012: PUSH
38013: LD_INT 21
38015: PUSH
38016: LD_INT 22
38018: PUSH
38019: LD_INT 23
38021: PUSH
38022: LD_INT 24
38024: PUSH
38025: LD_INT 25
38027: PUSH
38028: LD_INT 26
38030: PUSH
38031: LD_INT 27
38033: PUSH
38034: LD_INT 28
38036: PUSH
38037: LD_INT 29
38039: PUSH
38040: LD_INT 30
38042: PUSH
38043: LD_INT 31
38045: PUSH
38046: LD_INT 32
38048: PUSH
38049: LD_INT 33
38051: PUSH
38052: LD_INT 34
38054: PUSH
38055: LD_INT 36
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 101
38097: PUSH
38098: LD_INT 102
38100: PUSH
38101: LD_INT 103
38103: PUSH
38104: LD_INT 104
38106: PUSH
38107: LD_INT 105
38109: PUSH
38110: LD_INT 106
38112: PUSH
38113: LD_INT 107
38115: PUSH
38116: LD_INT 108
38118: PUSH
38119: LD_INT 109
38121: PUSH
38122: LD_INT 110
38124: PUSH
38125: LD_INT 111
38127: PUSH
38128: LD_INT 112
38130: PUSH
38131: LD_INT 113
38133: PUSH
38134: LD_INT 114
38136: PUSH
38137: LD_INT 116
38139: PUSH
38140: LD_INT 117
38142: PUSH
38143: LD_INT 118
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: ST_TO_ADDR
38169: GO 38944
38171: LD_INT 16
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38179
38177: GO 38315
38179: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38180: LD_ADDR_VAR 0 2
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 4
38190: PUSH
38191: LD_INT 5
38193: PUSH
38194: LD_INT 7
38196: PUSH
38197: LD_INT 11
38199: PUSH
38200: LD_INT 12
38202: PUSH
38203: LD_INT 15
38205: PUSH
38206: LD_INT 16
38208: PUSH
38209: LD_INT 20
38211: PUSH
38212: LD_INT 21
38214: PUSH
38215: LD_INT 22
38217: PUSH
38218: LD_INT 23
38220: PUSH
38221: LD_INT 25
38223: PUSH
38224: LD_INT 26
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 31
38232: PUSH
38233: LD_INT 32
38235: PUSH
38236: LD_INT 33
38238: PUSH
38239: LD_INT 34
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 101
38265: PUSH
38266: LD_INT 102
38268: PUSH
38269: LD_INT 103
38271: PUSH
38272: LD_INT 106
38274: PUSH
38275: LD_INT 108
38277: PUSH
38278: LD_INT 112
38280: PUSH
38281: LD_INT 113
38283: PUSH
38284: LD_INT 114
38286: PUSH
38287: LD_INT 116
38289: PUSH
38290: LD_INT 117
38292: PUSH
38293: LD_INT 118
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: ST_TO_ADDR
38313: GO 38944
38315: LD_INT 17
38317: DOUBLE
38318: EQUAL
38319: IFTRUE 38323
38321: GO 38547
38323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38324: LD_ADDR_VAR 0 2
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 4
38340: PUSH
38341: LD_INT 5
38343: PUSH
38344: LD_INT 6
38346: PUSH
38347: LD_INT 7
38349: PUSH
38350: LD_INT 8
38352: PUSH
38353: LD_INT 9
38355: PUSH
38356: LD_INT 10
38358: PUSH
38359: LD_INT 11
38361: PUSH
38362: LD_INT 12
38364: PUSH
38365: LD_INT 13
38367: PUSH
38368: LD_INT 14
38370: PUSH
38371: LD_INT 15
38373: PUSH
38374: LD_INT 16
38376: PUSH
38377: LD_INT 17
38379: PUSH
38380: LD_INT 18
38382: PUSH
38383: LD_INT 19
38385: PUSH
38386: LD_INT 20
38388: PUSH
38389: LD_INT 21
38391: PUSH
38392: LD_INT 22
38394: PUSH
38395: LD_INT 23
38397: PUSH
38398: LD_INT 24
38400: PUSH
38401: LD_INT 25
38403: PUSH
38404: LD_INT 26
38406: PUSH
38407: LD_INT 27
38409: PUSH
38410: LD_INT 28
38412: PUSH
38413: LD_INT 29
38415: PUSH
38416: LD_INT 30
38418: PUSH
38419: LD_INT 31
38421: PUSH
38422: LD_INT 32
38424: PUSH
38425: LD_INT 33
38427: PUSH
38428: LD_INT 34
38430: PUSH
38431: LD_INT 36
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 101
38473: PUSH
38474: LD_INT 102
38476: PUSH
38477: LD_INT 103
38479: PUSH
38480: LD_INT 104
38482: PUSH
38483: LD_INT 105
38485: PUSH
38486: LD_INT 106
38488: PUSH
38489: LD_INT 107
38491: PUSH
38492: LD_INT 108
38494: PUSH
38495: LD_INT 109
38497: PUSH
38498: LD_INT 110
38500: PUSH
38501: LD_INT 111
38503: PUSH
38504: LD_INT 112
38506: PUSH
38507: LD_INT 113
38509: PUSH
38510: LD_INT 114
38512: PUSH
38513: LD_INT 116
38515: PUSH
38516: LD_INT 117
38518: PUSH
38519: LD_INT 118
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: ST_TO_ADDR
38545: GO 38944
38547: LD_INT 18
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 38703
38555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38556: LD_ADDR_VAR 0 2
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 4
38566: PUSH
38567: LD_INT 5
38569: PUSH
38570: LD_INT 7
38572: PUSH
38573: LD_INT 11
38575: PUSH
38576: LD_INT 12
38578: PUSH
38579: LD_INT 15
38581: PUSH
38582: LD_INT 16
38584: PUSH
38585: LD_INT 20
38587: PUSH
38588: LD_INT 21
38590: PUSH
38591: LD_INT 22
38593: PUSH
38594: LD_INT 23
38596: PUSH
38597: LD_INT 25
38599: PUSH
38600: LD_INT 26
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 31
38608: PUSH
38609: LD_INT 32
38611: PUSH
38612: LD_INT 33
38614: PUSH
38615: LD_INT 34
38617: PUSH
38618: LD_INT 35
38620: PUSH
38621: LD_INT 36
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 101
38649: PUSH
38650: LD_INT 102
38652: PUSH
38653: LD_INT 103
38655: PUSH
38656: LD_INT 106
38658: PUSH
38659: LD_INT 108
38661: PUSH
38662: LD_INT 112
38664: PUSH
38665: LD_INT 113
38667: PUSH
38668: LD_INT 114
38670: PUSH
38671: LD_INT 115
38673: PUSH
38674: LD_INT 116
38676: PUSH
38677: LD_INT 117
38679: PUSH
38680: LD_INT 118
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: ST_TO_ADDR
38701: GO 38944
38703: LD_INT 19
38705: DOUBLE
38706: EQUAL
38707: IFTRUE 38711
38709: GO 38943
38711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38712: LD_ADDR_VAR 0 2
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: LD_INT 4
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 6
38734: PUSH
38735: LD_INT 7
38737: PUSH
38738: LD_INT 8
38740: PUSH
38741: LD_INT 9
38743: PUSH
38744: LD_INT 10
38746: PUSH
38747: LD_INT 11
38749: PUSH
38750: LD_INT 12
38752: PUSH
38753: LD_INT 13
38755: PUSH
38756: LD_INT 14
38758: PUSH
38759: LD_INT 15
38761: PUSH
38762: LD_INT 16
38764: PUSH
38765: LD_INT 17
38767: PUSH
38768: LD_INT 18
38770: PUSH
38771: LD_INT 19
38773: PUSH
38774: LD_INT 20
38776: PUSH
38777: LD_INT 21
38779: PUSH
38780: LD_INT 22
38782: PUSH
38783: LD_INT 23
38785: PUSH
38786: LD_INT 24
38788: PUSH
38789: LD_INT 25
38791: PUSH
38792: LD_INT 26
38794: PUSH
38795: LD_INT 27
38797: PUSH
38798: LD_INT 28
38800: PUSH
38801: LD_INT 29
38803: PUSH
38804: LD_INT 30
38806: PUSH
38807: LD_INT 31
38809: PUSH
38810: LD_INT 32
38812: PUSH
38813: LD_INT 33
38815: PUSH
38816: LD_INT 34
38818: PUSH
38819: LD_INT 35
38821: PUSH
38822: LD_INT 36
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 101
38865: PUSH
38866: LD_INT 102
38868: PUSH
38869: LD_INT 103
38871: PUSH
38872: LD_INT 104
38874: PUSH
38875: LD_INT 105
38877: PUSH
38878: LD_INT 106
38880: PUSH
38881: LD_INT 107
38883: PUSH
38884: LD_INT 108
38886: PUSH
38887: LD_INT 109
38889: PUSH
38890: LD_INT 110
38892: PUSH
38893: LD_INT 111
38895: PUSH
38896: LD_INT 112
38898: PUSH
38899: LD_INT 113
38901: PUSH
38902: LD_INT 114
38904: PUSH
38905: LD_INT 115
38907: PUSH
38908: LD_INT 116
38910: PUSH
38911: LD_INT 117
38913: PUSH
38914: LD_INT 118
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: ST_TO_ADDR
38941: GO 38944
38943: POP
// end else
38944: GO 39175
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38946: LD_ADDR_VAR 0 2
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: LD_INT 5
38965: PUSH
38966: LD_INT 6
38968: PUSH
38969: LD_INT 7
38971: PUSH
38972: LD_INT 8
38974: PUSH
38975: LD_INT 9
38977: PUSH
38978: LD_INT 10
38980: PUSH
38981: LD_INT 11
38983: PUSH
38984: LD_INT 12
38986: PUSH
38987: LD_INT 13
38989: PUSH
38990: LD_INT 14
38992: PUSH
38993: LD_INT 15
38995: PUSH
38996: LD_INT 16
38998: PUSH
38999: LD_INT 17
39001: PUSH
39002: LD_INT 18
39004: PUSH
39005: LD_INT 19
39007: PUSH
39008: LD_INT 20
39010: PUSH
39011: LD_INT 21
39013: PUSH
39014: LD_INT 22
39016: PUSH
39017: LD_INT 23
39019: PUSH
39020: LD_INT 24
39022: PUSH
39023: LD_INT 25
39025: PUSH
39026: LD_INT 26
39028: PUSH
39029: LD_INT 27
39031: PUSH
39032: LD_INT 28
39034: PUSH
39035: LD_INT 29
39037: PUSH
39038: LD_INT 30
39040: PUSH
39041: LD_INT 31
39043: PUSH
39044: LD_INT 32
39046: PUSH
39047: LD_INT 33
39049: PUSH
39050: LD_INT 34
39052: PUSH
39053: LD_INT 35
39055: PUSH
39056: LD_INT 36
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 101
39099: PUSH
39100: LD_INT 102
39102: PUSH
39103: LD_INT 103
39105: PUSH
39106: LD_INT 104
39108: PUSH
39109: LD_INT 105
39111: PUSH
39112: LD_INT 106
39114: PUSH
39115: LD_INT 107
39117: PUSH
39118: LD_INT 108
39120: PUSH
39121: LD_INT 109
39123: PUSH
39124: LD_INT 110
39126: PUSH
39127: LD_INT 111
39129: PUSH
39130: LD_INT 112
39132: PUSH
39133: LD_INT 113
39135: PUSH
39136: LD_INT 114
39138: PUSH
39139: LD_INT 115
39141: PUSH
39142: LD_INT 116
39144: PUSH
39145: LD_INT 117
39147: PUSH
39148: LD_INT 118
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// if result then
39175: LD_VAR 0 2
39179: IFFALSE 39965
// begin normal :=  ;
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: LD_STRING 
39188: ST_TO_ADDR
// hardcore :=  ;
39189: LD_ADDR_VAR 0 6
39193: PUSH
39194: LD_STRING 
39196: ST_TO_ADDR
// active :=  ;
39197: LD_ADDR_VAR 0 7
39201: PUSH
39202: LD_STRING 
39204: ST_TO_ADDR
// for i = 1 to normalCounter do
39205: LD_ADDR_VAR 0 8
39209: PUSH
39210: DOUBLE
39211: LD_INT 1
39213: DEC
39214: ST_TO_ADDR
39215: LD_EXP 88
39219: PUSH
39220: FOR_TO
39221: IFFALSE 39322
// begin tmp := 0 ;
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_STRING 0
39230: ST_TO_ADDR
// if result [ 1 ] then
39231: LD_VAR 0 2
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: IFFALSE 39304
// if result [ 1 ] [ 1 ] = i then
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PUSH
39254: LD_VAR 0 8
39258: EQUAL
39259: IFFALSE 39304
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39261: LD_ADDR_VAR 0 2
39265: PUSH
39266: LD_VAR 0 2
39270: PPUSH
39271: LD_INT 1
39273: PPUSH
39274: LD_VAR 0 2
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: LD_INT 1
39285: PPUSH
39286: CALL_OW 3
39290: PPUSH
39291: CALL_OW 1
39295: ST_TO_ADDR
// tmp := 1 ;
39296: LD_ADDR_VAR 0 3
39300: PUSH
39301: LD_STRING 1
39303: ST_TO_ADDR
// end ; normal := normal & tmp ;
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 5
39313: PUSH
39314: LD_VAR 0 3
39318: STR
39319: ST_TO_ADDR
// end ;
39320: GO 39220
39322: POP
39323: POP
// for i = 1 to hardcoreCounter do
39324: LD_ADDR_VAR 0 8
39328: PUSH
39329: DOUBLE
39330: LD_INT 1
39332: DEC
39333: ST_TO_ADDR
39334: LD_EXP 89
39338: PUSH
39339: FOR_TO
39340: IFFALSE 39445
// begin tmp := 0 ;
39342: LD_ADDR_VAR 0 3
39346: PUSH
39347: LD_STRING 0
39349: ST_TO_ADDR
// if result [ 2 ] then
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: IFFALSE 39427
// if result [ 2 ] [ 1 ] = 100 + i then
39360: LD_VAR 0 2
39364: PUSH
39365: LD_INT 2
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PUSH
39373: LD_INT 100
39375: PUSH
39376: LD_VAR 0 8
39380: PLUS
39381: EQUAL
39382: IFFALSE 39427
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39384: LD_ADDR_VAR 0 2
39388: PUSH
39389: LD_VAR 0 2
39393: PPUSH
39394: LD_INT 2
39396: PPUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_INT 2
39404: ARRAY
39405: PPUSH
39406: LD_INT 1
39408: PPUSH
39409: CALL_OW 3
39413: PPUSH
39414: CALL_OW 1
39418: ST_TO_ADDR
// tmp := 1 ;
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_STRING 1
39426: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39427: LD_ADDR_VAR 0 6
39431: PUSH
39432: LD_VAR 0 6
39436: PUSH
39437: LD_VAR 0 3
39441: STR
39442: ST_TO_ADDR
// end ;
39443: GO 39339
39445: POP
39446: POP
// if isGameLoad then
39447: LD_VAR 0 1
39451: IFFALSE 39926
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39453: LD_ADDR_VAR 0 4
39457: PUSH
39458: LD_EXP 92
39462: PUSH
39463: LD_EXP 91
39467: PUSH
39468: LD_EXP 93
39472: PUSH
39473: LD_EXP 90
39477: PUSH
39478: LD_EXP 94
39482: PUSH
39483: LD_EXP 95
39487: PUSH
39488: LD_EXP 96
39492: PUSH
39493: LD_EXP 97
39497: PUSH
39498: LD_EXP 98
39502: PUSH
39503: LD_EXP 99
39507: PUSH
39508: LD_EXP 100
39512: PUSH
39513: LD_EXP 101
39517: PUSH
39518: LD_EXP 102
39522: PUSH
39523: LD_EXP 103
39527: PUSH
39528: LD_EXP 111
39532: PUSH
39533: LD_EXP 112
39537: PUSH
39538: LD_EXP 113
39542: PUSH
39543: LD_EXP 114
39547: PUSH
39548: LD_EXP 116
39552: PUSH
39553: LD_EXP 117
39557: PUSH
39558: LD_EXP 118
39562: PUSH
39563: LD_EXP 121
39567: PUSH
39568: LD_EXP 123
39572: PUSH
39573: LD_EXP 124
39577: PUSH
39578: LD_EXP 125
39582: PUSH
39583: LD_EXP 127
39587: PUSH
39588: LD_EXP 128
39592: PUSH
39593: LD_EXP 131
39597: PUSH
39598: LD_EXP 132
39602: PUSH
39603: LD_EXP 133
39607: PUSH
39608: LD_EXP 134
39612: PUSH
39613: LD_EXP 135
39617: PUSH
39618: LD_EXP 136
39622: PUSH
39623: LD_EXP 137
39627: PUSH
39628: LD_EXP 138
39632: PUSH
39633: LD_EXP 139
39637: PUSH
39638: LD_EXP 104
39642: PUSH
39643: LD_EXP 105
39647: PUSH
39648: LD_EXP 108
39652: PUSH
39653: LD_EXP 109
39657: PUSH
39658: LD_EXP 110
39662: PUSH
39663: LD_EXP 106
39667: PUSH
39668: LD_EXP 107
39672: PUSH
39673: LD_EXP 115
39677: PUSH
39678: LD_EXP 119
39682: PUSH
39683: LD_EXP 120
39687: PUSH
39688: LD_EXP 122
39692: PUSH
39693: LD_EXP 126
39697: PUSH
39698: LD_EXP 129
39702: PUSH
39703: LD_EXP 130
39707: PUSH
39708: LD_EXP 140
39712: PUSH
39713: LD_EXP 141
39717: PUSH
39718: LD_EXP 142
39722: PUSH
39723: LD_EXP 143
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: ST_TO_ADDR
// tmp :=  ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_STRING 
39791: ST_TO_ADDR
// for i = 1 to normalCounter do
39792: LD_ADDR_VAR 0 8
39796: PUSH
39797: DOUBLE
39798: LD_INT 1
39800: DEC
39801: ST_TO_ADDR
39802: LD_EXP 88
39806: PUSH
39807: FOR_TO
39808: IFFALSE 39844
// begin if flags [ i ] then
39810: LD_VAR 0 4
39814: PUSH
39815: LD_VAR 0 8
39819: ARRAY
39820: IFFALSE 39842
// tmp := tmp & i & ; ;
39822: LD_ADDR_VAR 0 3
39826: PUSH
39827: LD_VAR 0 3
39831: PUSH
39832: LD_VAR 0 8
39836: STR
39837: PUSH
39838: LD_STRING ;
39840: STR
39841: ST_TO_ADDR
// end ;
39842: GO 39807
39844: POP
39845: POP
// for i = 1 to hardcoreCounter do
39846: LD_ADDR_VAR 0 8
39850: PUSH
39851: DOUBLE
39852: LD_INT 1
39854: DEC
39855: ST_TO_ADDR
39856: LD_EXP 89
39860: PUSH
39861: FOR_TO
39862: IFFALSE 39908
// begin if flags [ normalCounter + i ] then
39864: LD_VAR 0 4
39868: PUSH
39869: LD_EXP 88
39873: PUSH
39874: LD_VAR 0 8
39878: PLUS
39879: ARRAY
39880: IFFALSE 39906
// tmp := tmp & ( 100 + i ) & ; ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_VAR 0 3
39891: PUSH
39892: LD_INT 100
39894: PUSH
39895: LD_VAR 0 8
39899: PLUS
39900: STR
39901: PUSH
39902: LD_STRING ;
39904: STR
39905: ST_TO_ADDR
// end ;
39906: GO 39861
39908: POP
39909: POP
// if tmp then
39910: LD_VAR 0 3
39914: IFFALSE 39926
// active := tmp ;
39916: LD_ADDR_VAR 0 7
39920: PUSH
39921: LD_VAR 0 3
39925: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39926: LD_STRING getStreamItemsFromMission("
39928: PUSH
39929: LD_VAR 0 5
39933: STR
39934: PUSH
39935: LD_STRING ","
39937: STR
39938: PUSH
39939: LD_VAR 0 6
39943: STR
39944: PUSH
39945: LD_STRING ","
39947: STR
39948: PUSH
39949: LD_VAR 0 7
39953: STR
39954: PUSH
39955: LD_STRING ")
39957: STR
39958: PPUSH
39959: CALL_OW 559
// end else
39963: GO 39972
// ToLua ( getStreamItemsFromMission("","","") ) ;
39965: LD_STRING getStreamItemsFromMission("","","")
39967: PPUSH
39968: CALL_OW 559
// end ;
39972: LD_VAR 0 2
39976: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39977: LD_EXP 87
39981: PUSH
39982: LD_EXP 92
39986: AND
39987: IFFALSE 40111
39989: GO 39991
39991: DISABLE
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
// begin enable ;
39996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39997: LD_ADDR_VAR 0 2
40001: PUSH
40002: LD_INT 22
40004: PUSH
40005: LD_OWVAR 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 34
40019: PUSH
40020: LD_INT 7
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 34
40029: PUSH
40030: LD_INT 45
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 34
40039: PUSH
40040: LD_INT 28
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 34
40049: PUSH
40050: LD_INT 47
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PPUSH
40068: CALL_OW 69
40072: ST_TO_ADDR
// if not tmp then
40073: LD_VAR 0 2
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40111
// for i in tmp do
40082: LD_ADDR_VAR 0 1
40086: PUSH
40087: LD_VAR 0 2
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40109
// begin SetLives ( i , 0 ) ;
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_INT 0
40102: PPUSH
40103: CALL_OW 234
// end ;
40107: GO 40092
40109: POP
40110: POP
// end ;
40111: PPOPN 2
40113: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40114: LD_EXP 87
40118: PUSH
40119: LD_EXP 93
40123: AND
40124: IFFALSE 40208
40126: GO 40128
40128: DISABLE
40129: LD_INT 0
40131: PPUSH
40132: PPUSH
// begin enable ;
40133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40134: LD_ADDR_VAR 0 2
40138: PUSH
40139: LD_INT 22
40141: PUSH
40142: LD_OWVAR 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 32
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PPUSH
40165: CALL_OW 69
40169: ST_TO_ADDR
// if not tmp then
40170: LD_VAR 0 2
40174: NOT
40175: IFFALSE 40179
// exit ;
40177: GO 40208
// for i in tmp do
40179: LD_ADDR_VAR 0 1
40183: PUSH
40184: LD_VAR 0 2
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40206
// begin SetLives ( i , 0 ) ;
40192: LD_VAR 0 1
40196: PPUSH
40197: LD_INT 0
40199: PPUSH
40200: CALL_OW 234
// end ;
40204: GO 40189
40206: POP
40207: POP
// end ;
40208: PPOPN 2
40210: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40211: LD_EXP 87
40215: PUSH
40216: LD_EXP 90
40220: AND
40221: IFFALSE 40314
40223: GO 40225
40225: DISABLE
40226: LD_INT 0
40228: PPUSH
// begin enable ;
40229: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40230: LD_ADDR_VAR 0 1
40234: PUSH
40235: LD_INT 22
40237: PUSH
40238: LD_OWVAR 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 25
40252: PUSH
40253: LD_INT 5
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 25
40262: PUSH
40263: LD_INT 9
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 25
40272: PUSH
40273: LD_INT 8
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PPUSH
40290: CALL_OW 69
40294: PUSH
40295: FOR_IN
40296: IFFALSE 40312
// begin SetClass ( i , 1 ) ;
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_INT 1
40305: PPUSH
40306: CALL_OW 336
// end ;
40310: GO 40295
40312: POP
40313: POP
// end ;
40314: PPOPN 1
40316: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40317: LD_EXP 87
40321: PUSH
40322: LD_EXP 91
40326: AND
40327: PUSH
40328: LD_OWVAR 65
40332: PUSH
40333: LD_INT 7
40335: LESS
40336: AND
40337: IFFALSE 40351
40339: GO 40341
40341: DISABLE
// begin enable ;
40342: ENABLE
// game_speed := 7 ;
40343: LD_ADDR_OWVAR 65
40347: PUSH
40348: LD_INT 7
40350: ST_TO_ADDR
// end ;
40351: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40352: LD_EXP 87
40356: PUSH
40357: LD_EXP 94
40361: AND
40362: IFFALSE 40564
40364: GO 40366
40366: DISABLE
40367: LD_INT 0
40369: PPUSH
40370: PPUSH
40371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_INT 81
40379: PUSH
40380: LD_OWVAR 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 21
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PPUSH
40403: CALL_OW 69
40407: ST_TO_ADDR
// if not tmp then
40408: LD_VAR 0 3
40412: NOT
40413: IFFALSE 40417
// exit ;
40415: GO 40564
// if tmp > 5 then
40417: LD_VAR 0 3
40421: PUSH
40422: LD_INT 5
40424: GREATER
40425: IFFALSE 40437
// k := 5 else
40427: LD_ADDR_VAR 0 2
40431: PUSH
40432: LD_INT 5
40434: ST_TO_ADDR
40435: GO 40447
// k := tmp ;
40437: LD_ADDR_VAR 0 2
40441: PUSH
40442: LD_VAR 0 3
40446: ST_TO_ADDR
// for i := 1 to k do
40447: LD_ADDR_VAR 0 1
40451: PUSH
40452: DOUBLE
40453: LD_INT 1
40455: DEC
40456: ST_TO_ADDR
40457: LD_VAR 0 2
40461: PUSH
40462: FOR_TO
40463: IFFALSE 40562
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40465: LD_VAR 0 3
40469: PUSH
40470: LD_VAR 0 1
40474: ARRAY
40475: PPUSH
40476: LD_VAR 0 1
40480: PUSH
40481: LD_INT 4
40483: MOD
40484: PUSH
40485: LD_INT 1
40487: PLUS
40488: PPUSH
40489: CALL_OW 259
40493: PUSH
40494: LD_INT 10
40496: LESS
40497: IFFALSE 40560
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40499: LD_VAR 0 3
40503: PUSH
40504: LD_VAR 0 1
40508: ARRAY
40509: PPUSH
40510: LD_VAR 0 1
40514: PUSH
40515: LD_INT 4
40517: MOD
40518: PUSH
40519: LD_INT 1
40521: PLUS
40522: PPUSH
40523: LD_VAR 0 3
40527: PUSH
40528: LD_VAR 0 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 1
40538: PUSH
40539: LD_INT 4
40541: MOD
40542: PUSH
40543: LD_INT 1
40545: PLUS
40546: PPUSH
40547: CALL_OW 259
40551: PUSH
40552: LD_INT 1
40554: PLUS
40555: PPUSH
40556: CALL_OW 237
40560: GO 40462
40562: POP
40563: POP
// end ;
40564: PPOPN 3
40566: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40567: LD_EXP 87
40571: PUSH
40572: LD_EXP 95
40576: AND
40577: IFFALSE 40597
40579: GO 40581
40581: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40582: LD_INT 4
40584: PPUSH
40585: LD_OWVAR 2
40589: PPUSH
40590: LD_INT 0
40592: PPUSH
40593: CALL_OW 324
40597: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40598: LD_EXP 87
40602: PUSH
40603: LD_EXP 124
40607: AND
40608: IFFALSE 40628
40610: GO 40612
40612: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40613: LD_INT 19
40615: PPUSH
40616: LD_OWVAR 2
40620: PPUSH
40621: LD_INT 0
40623: PPUSH
40624: CALL_OW 324
40628: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40629: LD_EXP 87
40633: PUSH
40634: LD_EXP 96
40638: AND
40639: IFFALSE 40741
40641: GO 40643
40643: DISABLE
40644: LD_INT 0
40646: PPUSH
40647: PPUSH
// begin enable ;
40648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40649: LD_ADDR_VAR 0 2
40653: PUSH
40654: LD_INT 22
40656: PUSH
40657: LD_OWVAR 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: LD_INT 34
40671: PUSH
40672: LD_INT 11
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 34
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PPUSH
40698: CALL_OW 69
40702: ST_TO_ADDR
// if not tmp then
40703: LD_VAR 0 2
40707: NOT
40708: IFFALSE 40712
// exit ;
40710: GO 40741
// for i in tmp do
40712: LD_ADDR_VAR 0 1
40716: PUSH
40717: LD_VAR 0 2
40721: PUSH
40722: FOR_IN
40723: IFFALSE 40739
// begin SetLives ( i , 0 ) ;
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_INT 0
40732: PPUSH
40733: CALL_OW 234
// end ;
40737: GO 40722
40739: POP
40740: POP
// end ;
40741: PPOPN 2
40743: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40744: LD_EXP 87
40748: PUSH
40749: LD_EXP 97
40753: AND
40754: IFFALSE 40774
40756: GO 40758
40758: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40759: LD_INT 32
40761: PPUSH
40762: LD_OWVAR 2
40766: PPUSH
40767: LD_INT 0
40769: PPUSH
40770: CALL_OW 324
40774: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40775: LD_EXP 87
40779: PUSH
40780: LD_EXP 98
40784: AND
40785: IFFALSE 40966
40787: GO 40789
40789: DISABLE
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40795: LD_ADDR_VAR 0 2
40799: PUSH
40800: LD_INT 22
40802: PUSH
40803: LD_OWVAR 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 33
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PPUSH
40826: CALL_OW 69
40830: ST_TO_ADDR
// if not tmp then
40831: LD_VAR 0 2
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 40966
// side := 0 ;
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_INT 0
40847: ST_TO_ADDR
// for i := 1 to 8 do
40848: LD_ADDR_VAR 0 1
40852: PUSH
40853: DOUBLE
40854: LD_INT 1
40856: DEC
40857: ST_TO_ADDR
40858: LD_INT 8
40860: PUSH
40861: FOR_TO
40862: IFFALSE 40910
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40864: LD_OWVAR 2
40868: PUSH
40869: LD_VAR 0 1
40873: NONEQUAL
40874: PUSH
40875: LD_OWVAR 2
40879: PPUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 81
40889: PUSH
40890: LD_INT 2
40892: EQUAL
40893: AND
40894: IFFALSE 40908
// begin side := i ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 1
40905: ST_TO_ADDR
// break ;
40906: GO 40910
// end ;
40908: GO 40861
40910: POP
40911: POP
// if not side then
40912: LD_VAR 0 3
40916: NOT
40917: IFFALSE 40921
// exit ;
40919: GO 40966
// for i := 1 to tmp do
40921: LD_ADDR_VAR 0 1
40925: PUSH
40926: DOUBLE
40927: LD_INT 1
40929: DEC
40930: ST_TO_ADDR
40931: LD_VAR 0 2
40935: PUSH
40936: FOR_TO
40937: IFFALSE 40964
// if Prob ( 60 ) then
40939: LD_INT 60
40941: PPUSH
40942: CALL_OW 13
40946: IFFALSE 40962
// SetSide ( i , side ) ;
40948: LD_VAR 0 1
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL_OW 235
40962: GO 40936
40964: POP
40965: POP
// end ;
40966: PPOPN 3
40968: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40969: LD_EXP 87
40973: PUSH
40974: LD_EXP 100
40978: AND
40979: IFFALSE 41098
40981: GO 40983
40983: DISABLE
40984: LD_INT 0
40986: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40987: LD_ADDR_VAR 0 1
40991: PUSH
40992: LD_INT 22
40994: PUSH
40995: LD_OWVAR 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 21
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: LD_INT 23
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: PPUSH
41036: CALL_OW 69
41040: PUSH
41041: FOR_IN
41042: IFFALSE 41096
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 257
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: LD_INT 4
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: IN
41072: IFFALSE 41094
// SetClass ( un , rand ( 1 , 4 ) ) ;
41074: LD_VAR 0 1
41078: PPUSH
41079: LD_INT 1
41081: PPUSH
41082: LD_INT 4
41084: PPUSH
41085: CALL_OW 12
41089: PPUSH
41090: CALL_OW 336
41094: GO 41041
41096: POP
41097: POP
// end ;
41098: PPOPN 1
41100: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41101: LD_EXP 87
41105: PUSH
41106: LD_EXP 99
41110: AND
41111: IFFALSE 41190
41113: GO 41115
41115: DISABLE
41116: LD_INT 0
41118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41119: LD_ADDR_VAR 0 1
41123: PUSH
41124: LD_INT 22
41126: PUSH
41127: LD_OWVAR 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 21
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL_OW 69
41154: ST_TO_ADDR
// if not tmp then
41155: LD_VAR 0 1
41159: NOT
41160: IFFALSE 41164
// exit ;
41162: GO 41190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41164: LD_VAR 0 1
41168: PUSH
41169: LD_INT 1
41171: PPUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 12
41181: ARRAY
41182: PPUSH
41183: LD_INT 100
41185: PPUSH
41186: CALL_OW 234
// end ;
41190: PPOPN 1
41192: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41193: LD_EXP 87
41197: PUSH
41198: LD_EXP 101
41202: AND
41203: IFFALSE 41301
41205: GO 41207
41207: DISABLE
41208: LD_INT 0
41210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41211: LD_ADDR_VAR 0 1
41215: PUSH
41216: LD_INT 22
41218: PUSH
41219: LD_OWVAR 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 21
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PPUSH
41242: CALL_OW 69
41246: ST_TO_ADDR
// if not tmp then
41247: LD_VAR 0 1
41251: NOT
41252: IFFALSE 41256
// exit ;
41254: GO 41301
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41256: LD_VAR 0 1
41260: PUSH
41261: LD_INT 1
41263: PPUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 12
41273: ARRAY
41274: PPUSH
41275: LD_INT 1
41277: PPUSH
41278: LD_INT 4
41280: PPUSH
41281: CALL_OW 12
41285: PPUSH
41286: LD_INT 3000
41288: PPUSH
41289: LD_INT 9000
41291: PPUSH
41292: CALL_OW 12
41296: PPUSH
41297: CALL_OW 492
// end ;
41301: PPOPN 1
41303: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41304: LD_EXP 87
41308: PUSH
41309: LD_EXP 102
41313: AND
41314: IFFALSE 41334
41316: GO 41318
41318: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41319: LD_INT 1
41321: PPUSH
41322: LD_OWVAR 2
41326: PPUSH
41327: LD_INT 0
41329: PPUSH
41330: CALL_OW 324
41334: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41335: LD_EXP 87
41339: PUSH
41340: LD_EXP 103
41344: AND
41345: IFFALSE 41428
41347: GO 41349
41349: DISABLE
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41354: LD_ADDR_VAR 0 2
41358: PUSH
41359: LD_INT 22
41361: PUSH
41362: LD_OWVAR 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 21
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PPUSH
41385: CALL_OW 69
41389: ST_TO_ADDR
// if not tmp then
41390: LD_VAR 0 2
41394: NOT
41395: IFFALSE 41399
// exit ;
41397: GO 41428
// for i in tmp do
41399: LD_ADDR_VAR 0 1
41403: PUSH
41404: LD_VAR 0 2
41408: PUSH
41409: FOR_IN
41410: IFFALSE 41426
// SetBLevel ( i , 10 ) ;
41412: LD_VAR 0 1
41416: PPUSH
41417: LD_INT 10
41419: PPUSH
41420: CALL_OW 241
41424: GO 41409
41426: POP
41427: POP
// end ;
41428: PPOPN 2
41430: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41431: LD_EXP 87
41435: PUSH
41436: LD_EXP 104
41440: AND
41441: IFFALSE 41552
41443: GO 41445
41445: DISABLE
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_INT 22
41458: PUSH
41459: LD_OWVAR 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 25
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PPUSH
41482: CALL_OW 69
41486: ST_TO_ADDR
// if not tmp then
41487: LD_VAR 0 3
41491: NOT
41492: IFFALSE 41496
// exit ;
41494: GO 41552
// un := tmp [ rand ( 1 , tmp ) ] ;
41496: LD_ADDR_VAR 0 2
41500: PUSH
41501: LD_VAR 0 3
41505: PUSH
41506: LD_INT 1
41508: PPUSH
41509: LD_VAR 0 3
41513: PPUSH
41514: CALL_OW 12
41518: ARRAY
41519: ST_TO_ADDR
// if Crawls ( un ) then
41520: LD_VAR 0 2
41524: PPUSH
41525: CALL_OW 318
41529: IFFALSE 41540
// ComWalk ( un ) ;
41531: LD_VAR 0 2
41535: PPUSH
41536: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41540: LD_VAR 0 2
41544: PPUSH
41545: LD_INT 5
41547: PPUSH
41548: CALL_OW 336
// end ;
41552: PPOPN 3
41554: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41555: LD_EXP 87
41559: PUSH
41560: LD_EXP 105
41564: AND
41565: PUSH
41566: LD_OWVAR 67
41570: PUSH
41571: LD_INT 4
41573: LESS
41574: AND
41575: IFFALSE 41594
41577: GO 41579
41579: DISABLE
// begin Difficulty := Difficulty + 1 ;
41580: LD_ADDR_OWVAR 67
41584: PUSH
41585: LD_OWVAR 67
41589: PUSH
41590: LD_INT 1
41592: PLUS
41593: ST_TO_ADDR
// end ;
41594: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41595: LD_EXP 87
41599: PUSH
41600: LD_EXP 106
41604: AND
41605: IFFALSE 41708
41607: GO 41609
41609: DISABLE
41610: LD_INT 0
41612: PPUSH
// begin for i := 1 to 5 do
41613: LD_ADDR_VAR 0 1
41617: PUSH
41618: DOUBLE
41619: LD_INT 1
41621: DEC
41622: ST_TO_ADDR
41623: LD_INT 5
41625: PUSH
41626: FOR_TO
41627: IFFALSE 41706
// begin uc_nation := nation_nature ;
41629: LD_ADDR_OWVAR 21
41633: PUSH
41634: LD_INT 0
41636: ST_TO_ADDR
// uc_side := 0 ;
41637: LD_ADDR_OWVAR 20
41641: PUSH
41642: LD_INT 0
41644: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41645: LD_ADDR_OWVAR 29
41649: PUSH
41650: LD_INT 12
41652: PUSH
41653: LD_INT 12
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// hc_agressivity := 20 ;
41660: LD_ADDR_OWVAR 35
41664: PUSH
41665: LD_INT 20
41667: ST_TO_ADDR
// hc_class := class_tiger ;
41668: LD_ADDR_OWVAR 28
41672: PUSH
41673: LD_INT 14
41675: ST_TO_ADDR
// hc_gallery :=  ;
41676: LD_ADDR_OWVAR 33
41680: PUSH
41681: LD_STRING 
41683: ST_TO_ADDR
// hc_name :=  ;
41684: LD_ADDR_OWVAR 26
41688: PUSH
41689: LD_STRING 
41691: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41692: CALL_OW 44
41696: PPUSH
41697: LD_INT 0
41699: PPUSH
41700: CALL_OW 51
// end ;
41704: GO 41626
41706: POP
41707: POP
// end ;
41708: PPOPN 1
41710: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41711: LD_EXP 87
41715: PUSH
41716: LD_EXP 107
41720: AND
41721: IFFALSE 41730
41723: GO 41725
41725: DISABLE
// StreamSibBomb ;
41726: CALL 41731 0 0
41730: END
// export function StreamSibBomb ; var i , x , y ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
// result := false ;
41737: LD_ADDR_VAR 0 1
41741: PUSH
41742: LD_INT 0
41744: ST_TO_ADDR
// for i := 1 to 16 do
41745: LD_ADDR_VAR 0 2
41749: PUSH
41750: DOUBLE
41751: LD_INT 1
41753: DEC
41754: ST_TO_ADDR
41755: LD_INT 16
41757: PUSH
41758: FOR_TO
41759: IFFALSE 41958
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41761: LD_ADDR_VAR 0 3
41765: PUSH
41766: LD_INT 10
41768: PUSH
41769: LD_INT 20
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_INT 40
41777: PUSH
41778: LD_INT 50
41780: PUSH
41781: LD_INT 60
41783: PUSH
41784: LD_INT 70
41786: PUSH
41787: LD_INT 80
41789: PUSH
41790: LD_INT 90
41792: PUSH
41793: LD_INT 100
41795: PUSH
41796: LD_INT 110
41798: PUSH
41799: LD_INT 120
41801: PUSH
41802: LD_INT 130
41804: PUSH
41805: LD_INT 140
41807: PUSH
41808: LD_INT 150
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PPUSH
41831: LD_INT 15
41833: PPUSH
41834: CALL_OW 12
41838: ARRAY
41839: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_INT 10
41847: PUSH
41848: LD_INT 20
41850: PUSH
41851: LD_INT 30
41853: PUSH
41854: LD_INT 40
41856: PUSH
41857: LD_INT 50
41859: PUSH
41860: LD_INT 60
41862: PUSH
41863: LD_INT 70
41865: PUSH
41866: LD_INT 80
41868: PUSH
41869: LD_INT 90
41871: PUSH
41872: LD_INT 100
41874: PUSH
41875: LD_INT 110
41877: PUSH
41878: LD_INT 120
41880: PUSH
41881: LD_INT 130
41883: PUSH
41884: LD_INT 140
41886: PUSH
41887: LD_INT 150
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PPUSH
41910: LD_INT 15
41912: PPUSH
41913: CALL_OW 12
41917: ARRAY
41918: ST_TO_ADDR
// if ValidHex ( x , y ) then
41919: LD_VAR 0 3
41923: PPUSH
41924: LD_VAR 0 4
41928: PPUSH
41929: CALL_OW 488
41933: IFFALSE 41956
// begin result := [ x , y ] ;
41935: LD_ADDR_VAR 0 1
41939: PUSH
41940: LD_VAR 0 3
41944: PUSH
41945: LD_VAR 0 4
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// break ;
41954: GO 41958
// end ; end ;
41956: GO 41758
41958: POP
41959: POP
// if result then
41960: LD_VAR 0 1
41964: IFFALSE 42024
// begin ToLua ( playSibBomb() ) ;
41966: LD_STRING playSibBomb()
41968: PPUSH
41969: CALL_OW 559
// wait ( 0 0$14 ) ;
41973: LD_INT 490
41975: PPUSH
41976: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 1
41987: ARRAY
41988: PPUSH
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 2
41996: ARRAY
41997: PPUSH
41998: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42002: LD_VAR 0 1
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: PPUSH
42011: LD_VAR 0 1
42015: PUSH
42016: LD_INT 2
42018: ARRAY
42019: PPUSH
42020: CALL_OW 429
// end ; end ;
42024: LD_VAR 0 1
42028: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42029: LD_EXP 87
42033: PUSH
42034: LD_EXP 109
42038: AND
42039: IFFALSE 42051
42041: GO 42043
42043: DISABLE
// YouLost (  ) ;
42044: LD_STRING 
42046: PPUSH
42047: CALL_OW 104
42051: END
// every 0 0$1 trigger StreamModeActive and sFog do
42052: LD_EXP 87
42056: PUSH
42057: LD_EXP 108
42061: AND
42062: IFFALSE 42076
42064: GO 42066
42066: DISABLE
// FogOff ( your_side ) ;
42067: LD_OWVAR 2
42071: PPUSH
42072: CALL_OW 344
42076: END
// every 0 0$1 trigger StreamModeActive and sSun do
42077: LD_EXP 87
42081: PUSH
42082: LD_EXP 110
42086: AND
42087: IFFALSE 42115
42089: GO 42091
42091: DISABLE
// begin solar_recharge_percent := 0 ;
42092: LD_ADDR_OWVAR 79
42096: PUSH
42097: LD_INT 0
42099: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42100: LD_INT 10500
42102: PPUSH
42103: CALL_OW 67
// solar_recharge_percent := 100 ;
42107: LD_ADDR_OWVAR 79
42111: PUSH
42112: LD_INT 100
42114: ST_TO_ADDR
// end ;
42115: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42116: LD_EXP 87
42120: PUSH
42121: LD_EXP 111
42125: AND
42126: IFFALSE 42365
42128: GO 42130
42130: DISABLE
42131: LD_INT 0
42133: PPUSH
42134: PPUSH
42135: PPUSH
// begin tmp := [ ] ;
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// for i := 1 to 6 do
42143: LD_ADDR_VAR 0 1
42147: PUSH
42148: DOUBLE
42149: LD_INT 1
42151: DEC
42152: ST_TO_ADDR
42153: LD_INT 6
42155: PUSH
42156: FOR_TO
42157: IFFALSE 42262
// begin uc_nation := nation_nature ;
42159: LD_ADDR_OWVAR 21
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// uc_side := 0 ;
42167: LD_ADDR_OWVAR 20
42171: PUSH
42172: LD_INT 0
42174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42175: LD_ADDR_OWVAR 29
42179: PUSH
42180: LD_INT 12
42182: PUSH
42183: LD_INT 12
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// hc_agressivity := 20 ;
42190: LD_ADDR_OWVAR 35
42194: PUSH
42195: LD_INT 20
42197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42198: LD_ADDR_OWVAR 28
42202: PUSH
42203: LD_INT 17
42205: ST_TO_ADDR
// hc_gallery :=  ;
42206: LD_ADDR_OWVAR 33
42210: PUSH
42211: LD_STRING 
42213: ST_TO_ADDR
// hc_name :=  ;
42214: LD_ADDR_OWVAR 26
42218: PUSH
42219: LD_STRING 
42221: ST_TO_ADDR
// un := CreateHuman ;
42222: LD_ADDR_VAR 0 2
42226: PUSH
42227: CALL_OW 44
42231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42232: LD_VAR 0 2
42236: PPUSH
42237: LD_INT 1
42239: PPUSH
42240: CALL_OW 51
// tmp := tmp ^ un ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 3
42253: PUSH
42254: LD_VAR 0 2
42258: ADD
42259: ST_TO_ADDR
// end ;
42260: GO 42156
42262: POP
42263: POP
// repeat wait ( 0 0$1 ) ;
42264: LD_INT 35
42266: PPUSH
42267: CALL_OW 67
// for un in tmp do
42271: LD_ADDR_VAR 0 2
42275: PUSH
42276: LD_VAR 0 3
42280: PUSH
42281: FOR_IN
42282: IFFALSE 42356
// begin if IsDead ( un ) then
42284: LD_VAR 0 2
42288: PPUSH
42289: CALL_OW 301
42293: IFFALSE 42313
// begin tmp := tmp diff un ;
42295: LD_ADDR_VAR 0 3
42299: PUSH
42300: LD_VAR 0 3
42304: PUSH
42305: LD_VAR 0 2
42309: DIFF
42310: ST_TO_ADDR
// continue ;
42311: GO 42281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42313: LD_VAR 0 2
42317: PPUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 22
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PPUSH
42335: CALL_OW 69
42339: PPUSH
42340: LD_VAR 0 2
42344: PPUSH
42345: CALL_OW 74
42349: PPUSH
42350: CALL_OW 115
// end ;
42354: GO 42281
42356: POP
42357: POP
// until not tmp ;
42358: LD_VAR 0 3
42362: NOT
42363: IFFALSE 42264
// end ;
42365: PPOPN 3
42367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42368: LD_EXP 87
42372: PUSH
42373: LD_EXP 112
42377: AND
42378: IFFALSE 42432
42380: GO 42382
42382: DISABLE
// begin ToLua ( displayTroll(); ) ;
42383: LD_STRING displayTroll();
42385: PPUSH
42386: CALL_OW 559
// wait ( 3 3$00 ) ;
42390: LD_INT 6300
42392: PPUSH
42393: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42397: LD_STRING hideTroll();
42399: PPUSH
42400: CALL_OW 559
// wait ( 1 1$00 ) ;
42404: LD_INT 2100
42406: PPUSH
42407: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42411: LD_STRING displayTroll();
42413: PPUSH
42414: CALL_OW 559
// wait ( 1 1$00 ) ;
42418: LD_INT 2100
42420: PPUSH
42421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42425: LD_STRING hideTroll();
42427: PPUSH
42428: CALL_OW 559
// end ;
42432: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42433: LD_EXP 87
42437: PUSH
42438: LD_EXP 113
42442: AND
42443: IFFALSE 42506
42445: GO 42447
42447: DISABLE
42448: LD_INT 0
42450: PPUSH
// begin p := 0 ;
42451: LD_ADDR_VAR 0 1
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
// repeat game_speed := 1 ;
42459: LD_ADDR_OWVAR 65
42463: PUSH
42464: LD_INT 1
42466: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42467: LD_INT 35
42469: PPUSH
42470: CALL_OW 67
// p := p + 1 ;
42474: LD_ADDR_VAR 0 1
42478: PUSH
42479: LD_VAR 0 1
42483: PUSH
42484: LD_INT 1
42486: PLUS
42487: ST_TO_ADDR
// until p >= 60 ;
42488: LD_VAR 0 1
42492: PUSH
42493: LD_INT 60
42495: GREATEREQUAL
42496: IFFALSE 42459
// game_speed := 4 ;
42498: LD_ADDR_OWVAR 65
42502: PUSH
42503: LD_INT 4
42505: ST_TO_ADDR
// end ;
42506: PPOPN 1
42508: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42509: LD_EXP 87
42513: PUSH
42514: LD_EXP 114
42518: AND
42519: IFFALSE 42665
42521: GO 42523
42523: DISABLE
42524: LD_INT 0
42526: PPUSH
42527: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42528: LD_ADDR_VAR 0 1
42532: PUSH
42533: LD_INT 22
42535: PUSH
42536: LD_OWVAR 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 30
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 30
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PPUSH
42577: CALL_OW 69
42581: ST_TO_ADDR
// if not depot then
42582: LD_VAR 0 1
42586: NOT
42587: IFFALSE 42591
// exit ;
42589: GO 42665
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42591: LD_ADDR_VAR 0 2
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_INT 1
42603: PPUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 12
42613: ARRAY
42614: PPUSH
42615: CALL_OW 274
42619: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42620: LD_VAR 0 2
42624: PPUSH
42625: LD_INT 1
42627: PPUSH
42628: LD_INT 0
42630: PPUSH
42631: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42635: LD_VAR 0 2
42639: PPUSH
42640: LD_INT 2
42642: PPUSH
42643: LD_INT 0
42645: PPUSH
42646: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42650: LD_VAR 0 2
42654: PPUSH
42655: LD_INT 3
42657: PPUSH
42658: LD_INT 0
42660: PPUSH
42661: CALL_OW 277
// end ;
42665: PPOPN 2
42667: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42668: LD_EXP 87
42672: PUSH
42673: LD_EXP 115
42677: AND
42678: IFFALSE 42775
42680: GO 42682
42682: DISABLE
42683: LD_INT 0
42685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42686: LD_ADDR_VAR 0 1
42690: PUSH
42691: LD_INT 22
42693: PUSH
42694: LD_OWVAR 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 21
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: PUSH
42716: LD_INT 23
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PPUSH
42735: CALL_OW 69
42739: ST_TO_ADDR
// if not tmp then
42740: LD_VAR 0 1
42744: NOT
42745: IFFALSE 42749
// exit ;
42747: GO 42775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42749: LD_VAR 0 1
42753: PUSH
42754: LD_INT 1
42756: PPUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 12
42766: ARRAY
42767: PPUSH
42768: LD_INT 200
42770: PPUSH
42771: CALL_OW 234
// end ;
42775: PPOPN 1
42777: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42778: LD_EXP 87
42782: PUSH
42783: LD_EXP 116
42787: AND
42788: IFFALSE 42867
42790: GO 42792
42792: DISABLE
42793: LD_INT 0
42795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42796: LD_ADDR_VAR 0 1
42800: PUSH
42801: LD_INT 22
42803: PUSH
42804: LD_OWVAR 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 21
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PPUSH
42827: CALL_OW 69
42831: ST_TO_ADDR
// if not tmp then
42832: LD_VAR 0 1
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 42867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42841: LD_VAR 0 1
42845: PUSH
42846: LD_INT 1
42848: PPUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 12
42858: ARRAY
42859: PPUSH
42860: LD_INT 60
42862: PPUSH
42863: CALL_OW 234
// end ;
42867: PPOPN 1
42869: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42870: LD_EXP 87
42874: PUSH
42875: LD_EXP 117
42879: AND
42880: IFFALSE 42979
42882: GO 42884
42884: DISABLE
42885: LD_INT 0
42887: PPUSH
42888: PPUSH
// begin enable ;
42889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42890: LD_ADDR_VAR 0 1
42894: PUSH
42895: LD_INT 22
42897: PUSH
42898: LD_OWVAR 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 61
42909: PUSH
42910: EMPTY
42911: LIST
42912: PUSH
42913: LD_INT 33
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: PPUSH
42928: CALL_OW 69
42932: ST_TO_ADDR
// if not tmp then
42933: LD_VAR 0 1
42937: NOT
42938: IFFALSE 42942
// exit ;
42940: GO 42979
// for i in tmp do
42942: LD_ADDR_VAR 0 2
42946: PUSH
42947: LD_VAR 0 1
42951: PUSH
42952: FOR_IN
42953: IFFALSE 42977
// if IsControledBy ( i ) then
42955: LD_VAR 0 2
42959: PPUSH
42960: CALL_OW 312
42964: IFFALSE 42975
// ComUnlink ( i ) ;
42966: LD_VAR 0 2
42970: PPUSH
42971: CALL_OW 136
42975: GO 42952
42977: POP
42978: POP
// end ;
42979: PPOPN 2
42981: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42982: LD_EXP 87
42986: PUSH
42987: LD_EXP 118
42991: AND
42992: IFFALSE 43132
42994: GO 42996
42996: DISABLE
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
// begin ToLua ( displayPowell(); ) ;
43001: LD_STRING displayPowell();
43003: PPUSH
43004: CALL_OW 559
// uc_side := 0 ;
43008: LD_ADDR_OWVAR 20
43012: PUSH
43013: LD_INT 0
43015: ST_TO_ADDR
// uc_nation := 2 ;
43016: LD_ADDR_OWVAR 21
43020: PUSH
43021: LD_INT 2
43023: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43024: LD_ADDR_OWVAR 37
43028: PUSH
43029: LD_INT 14
43031: ST_TO_ADDR
// vc_engine := engine_siberite ;
43032: LD_ADDR_OWVAR 39
43036: PUSH
43037: LD_INT 3
43039: ST_TO_ADDR
// vc_control := control_apeman ;
43040: LD_ADDR_OWVAR 38
43044: PUSH
43045: LD_INT 5
43047: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43048: LD_ADDR_OWVAR 40
43052: PUSH
43053: LD_INT 29
43055: ST_TO_ADDR
// un := CreateVehicle ;
43056: LD_ADDR_VAR 0 2
43060: PUSH
43061: CALL_OW 45
43065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43066: LD_VAR 0 2
43070: PPUSH
43071: LD_INT 1
43073: PPUSH
43074: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43078: LD_INT 35
43080: PPUSH
43081: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43085: LD_VAR 0 2
43089: PPUSH
43090: LD_INT 22
43092: PUSH
43093: LD_OWVAR 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PPUSH
43102: CALL_OW 69
43106: PPUSH
43107: LD_VAR 0 2
43111: PPUSH
43112: CALL_OW 74
43116: PPUSH
43117: CALL_OW 115
// until IsDead ( un ) ;
43121: LD_VAR 0 2
43125: PPUSH
43126: CALL_OW 301
43130: IFFALSE 43078
// end ;
43132: PPOPN 2
43134: END
// every 0 0$1 trigger StreamModeActive and sStu do
43135: LD_EXP 87
43139: PUSH
43140: LD_EXP 126
43144: AND
43145: IFFALSE 43161
43147: GO 43149
43149: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43150: LD_STRING displayStucuk();
43152: PPUSH
43153: CALL_OW 559
// ResetFog ;
43157: CALL_OW 335
// end ;
43161: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43162: LD_EXP 87
43166: PUSH
43167: LD_EXP 119
43171: AND
43172: IFFALSE 43313
43174: GO 43176
43176: DISABLE
43177: LD_INT 0
43179: PPUSH
43180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43181: LD_ADDR_VAR 0 2
43185: PUSH
43186: LD_INT 22
43188: PUSH
43189: LD_OWVAR 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 21
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PPUSH
43212: CALL_OW 69
43216: ST_TO_ADDR
// if not tmp then
43217: LD_VAR 0 2
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 43313
// un := tmp [ rand ( 1 , tmp ) ] ;
43226: LD_ADDR_VAR 0 1
43230: PUSH
43231: LD_VAR 0 2
43235: PUSH
43236: LD_INT 1
43238: PPUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: CALL_OW 12
43248: ARRAY
43249: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_INT 0
43257: PPUSH
43258: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43262: LD_VAR 0 1
43266: PPUSH
43267: LD_OWVAR 3
43271: PUSH
43272: LD_VAR 0 1
43276: DIFF
43277: PPUSH
43278: LD_VAR 0 1
43282: PPUSH
43283: CALL_OW 74
43287: PPUSH
43288: CALL_OW 115
// wait ( 0 0$20 ) ;
43292: LD_INT 700
43294: PPUSH
43295: CALL_OW 67
// SetSide ( un , your_side ) ;
43299: LD_VAR 0 1
43303: PPUSH
43304: LD_OWVAR 2
43308: PPUSH
43309: CALL_OW 235
// end ;
43313: PPOPN 2
43315: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43316: LD_EXP 87
43320: PUSH
43321: LD_EXP 120
43325: AND
43326: IFFALSE 43432
43328: GO 43330
43330: DISABLE
43331: LD_INT 0
43333: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43334: LD_ADDR_VAR 0 1
43338: PUSH
43339: LD_INT 22
43341: PUSH
43342: LD_OWVAR 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 30
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 30
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PPUSH
43383: CALL_OW 69
43387: ST_TO_ADDR
// if not depot then
43388: LD_VAR 0 1
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 43432
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43397: LD_VAR 0 1
43401: PUSH
43402: LD_INT 1
43404: ARRAY
43405: PPUSH
43406: CALL_OW 250
43410: PPUSH
43411: LD_VAR 0 1
43415: PUSH
43416: LD_INT 1
43418: ARRAY
43419: PPUSH
43420: CALL_OW 251
43424: PPUSH
43425: LD_INT 70
43427: PPUSH
43428: CALL_OW 495
// end ;
43432: PPOPN 1
43434: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43435: LD_EXP 87
43439: PUSH
43440: LD_EXP 121
43444: AND
43445: IFFALSE 43656
43447: GO 43449
43449: DISABLE
43450: LD_INT 0
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43457: LD_ADDR_VAR 0 5
43461: PUSH
43462: LD_INT 22
43464: PUSH
43465: LD_OWVAR 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 21
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PPUSH
43488: CALL_OW 69
43492: ST_TO_ADDR
// if not tmp then
43493: LD_VAR 0 5
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43656
// for i in tmp do
43502: LD_ADDR_VAR 0 1
43506: PUSH
43507: LD_VAR 0 5
43511: PUSH
43512: FOR_IN
43513: IFFALSE 43654
// begin d := rand ( 0 , 5 ) ;
43515: LD_ADDR_VAR 0 4
43519: PUSH
43520: LD_INT 0
43522: PPUSH
43523: LD_INT 5
43525: PPUSH
43526: CALL_OW 12
43530: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43531: LD_ADDR_VAR 0 2
43535: PUSH
43536: LD_VAR 0 1
43540: PPUSH
43541: CALL_OW 250
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_INT 3
43553: PPUSH
43554: LD_INT 12
43556: PPUSH
43557: CALL_OW 12
43561: PPUSH
43562: CALL_OW 272
43566: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: CALL_OW 251
43581: PPUSH
43582: LD_VAR 0 4
43586: PPUSH
43587: LD_INT 3
43589: PPUSH
43590: LD_INT 12
43592: PPUSH
43593: CALL_OW 12
43597: PPUSH
43598: CALL_OW 273
43602: ST_TO_ADDR
// if ValidHex ( x , y ) then
43603: LD_VAR 0 2
43607: PPUSH
43608: LD_VAR 0 3
43612: PPUSH
43613: CALL_OW 488
43617: IFFALSE 43652
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43619: LD_VAR 0 1
43623: PPUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: LD_VAR 0 3
43633: PPUSH
43634: LD_INT 3
43636: PPUSH
43637: LD_INT 6
43639: PPUSH
43640: CALL_OW 12
43644: PPUSH
43645: LD_INT 1
43647: PPUSH
43648: CALL_OW 483
// end ;
43652: GO 43512
43654: POP
43655: POP
// end ;
43656: PPOPN 5
43658: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43659: LD_EXP 87
43663: PUSH
43664: LD_EXP 122
43668: AND
43669: IFFALSE 43763
43671: GO 43673
43673: DISABLE
43674: LD_INT 0
43676: PPUSH
43677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43678: LD_ADDR_VAR 0 2
43682: PUSH
43683: LD_INT 22
43685: PUSH
43686: LD_OWVAR 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 32
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 21
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: PPUSH
43720: CALL_OW 69
43724: ST_TO_ADDR
// if not tmp then
43725: LD_VAR 0 2
43729: NOT
43730: IFFALSE 43734
// exit ;
43732: GO 43763
// for i in tmp do
43734: LD_ADDR_VAR 0 1
43738: PUSH
43739: LD_VAR 0 2
43743: PUSH
43744: FOR_IN
43745: IFFALSE 43761
// SetFuel ( i , 0 ) ;
43747: LD_VAR 0 1
43751: PPUSH
43752: LD_INT 0
43754: PPUSH
43755: CALL_OW 240
43759: GO 43744
43761: POP
43762: POP
// end ;
43763: PPOPN 2
43765: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43766: LD_EXP 87
43770: PUSH
43771: LD_EXP 123
43775: AND
43776: IFFALSE 43842
43778: GO 43780
43780: DISABLE
43781: LD_INT 0
43783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43784: LD_ADDR_VAR 0 1
43788: PUSH
43789: LD_INT 22
43791: PUSH
43792: LD_OWVAR 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 30
43803: PUSH
43804: LD_INT 29
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PPUSH
43815: CALL_OW 69
43819: ST_TO_ADDR
// if not tmp then
43820: LD_VAR 0 1
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43842
// DestroyUnit ( tmp [ 1 ] ) ;
43829: LD_VAR 0 1
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: CALL_OW 65
// end ;
43842: PPOPN 1
43844: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43845: LD_EXP 87
43849: PUSH
43850: LD_EXP 125
43854: AND
43855: IFFALSE 43984
43857: GO 43859
43859: DISABLE
43860: LD_INT 0
43862: PPUSH
// begin uc_side := 0 ;
43863: LD_ADDR_OWVAR 20
43867: PUSH
43868: LD_INT 0
43870: ST_TO_ADDR
// uc_nation := nation_arabian ;
43871: LD_ADDR_OWVAR 21
43875: PUSH
43876: LD_INT 2
43878: ST_TO_ADDR
// hc_gallery :=  ;
43879: LD_ADDR_OWVAR 33
43883: PUSH
43884: LD_STRING 
43886: ST_TO_ADDR
// hc_name :=  ;
43887: LD_ADDR_OWVAR 26
43891: PUSH
43892: LD_STRING 
43894: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43895: LD_INT 1
43897: PPUSH
43898: LD_INT 11
43900: PPUSH
43901: LD_INT 10
43903: PPUSH
43904: CALL_OW 380
// un := CreateHuman ;
43908: LD_ADDR_VAR 0 1
43912: PUSH
43913: CALL_OW 44
43917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43918: LD_VAR 0 1
43922: PPUSH
43923: LD_INT 1
43925: PPUSH
43926: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43930: LD_INT 35
43932: PPUSH
43933: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43937: LD_VAR 0 1
43941: PPUSH
43942: LD_INT 22
43944: PUSH
43945: LD_OWVAR 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PPUSH
43954: CALL_OW 69
43958: PPUSH
43959: LD_VAR 0 1
43963: PPUSH
43964: CALL_OW 74
43968: PPUSH
43969: CALL_OW 115
// until IsDead ( un ) ;
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 301
43982: IFFALSE 43930
// end ;
43984: PPOPN 1
43986: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43987: LD_EXP 87
43991: PUSH
43992: LD_EXP 127
43996: AND
43997: IFFALSE 44009
43999: GO 44001
44001: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44002: LD_STRING earthquake(getX(game), 0, 32)
44004: PPUSH
44005: CALL_OW 559
44009: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44010: LD_EXP 87
44014: PUSH
44015: LD_EXP 128
44019: AND
44020: IFFALSE 44111
44022: GO 44024
44024: DISABLE
44025: LD_INT 0
44027: PPUSH
// begin enable ;
44028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44029: LD_ADDR_VAR 0 1
44033: PUSH
44034: LD_INT 22
44036: PUSH
44037: LD_OWVAR 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 21
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 33
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 69
44075: ST_TO_ADDR
// if not tmp then
44076: LD_VAR 0 1
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 44111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44085: LD_VAR 0 1
44089: PUSH
44090: LD_INT 1
44092: PPUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 12
44102: ARRAY
44103: PPUSH
44104: LD_INT 1
44106: PPUSH
44107: CALL_OW 234
// end ;
44111: PPOPN 1
44113: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44114: LD_EXP 87
44118: PUSH
44119: LD_EXP 129
44123: AND
44124: IFFALSE 44265
44126: GO 44128
44128: DISABLE
44129: LD_INT 0
44131: PPUSH
44132: PPUSH
44133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_INT 22
44141: PUSH
44142: LD_OWVAR 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 25
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PPUSH
44165: CALL_OW 69
44169: ST_TO_ADDR
// if not tmp then
44170: LD_VAR 0 3
44174: NOT
44175: IFFALSE 44179
// exit ;
44177: GO 44265
// un := tmp [ rand ( 1 , tmp ) ] ;
44179: LD_ADDR_VAR 0 2
44183: PUSH
44184: LD_VAR 0 3
44188: PUSH
44189: LD_INT 1
44191: PPUSH
44192: LD_VAR 0 3
44196: PPUSH
44197: CALL_OW 12
44201: ARRAY
44202: ST_TO_ADDR
// if Crawls ( un ) then
44203: LD_VAR 0 2
44207: PPUSH
44208: CALL_OW 318
44212: IFFALSE 44223
// ComWalk ( un ) ;
44214: LD_VAR 0 2
44218: PPUSH
44219: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44223: LD_VAR 0 2
44227: PPUSH
44228: LD_INT 9
44230: PPUSH
44231: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44235: LD_INT 28
44237: PPUSH
44238: LD_OWVAR 2
44242: PPUSH
44243: LD_INT 2
44245: PPUSH
44246: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44250: LD_INT 29
44252: PPUSH
44253: LD_OWVAR 2
44257: PPUSH
44258: LD_INT 2
44260: PPUSH
44261: CALL_OW 322
// end ;
44265: PPOPN 3
44267: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44268: LD_EXP 87
44272: PUSH
44273: LD_EXP 130
44277: AND
44278: IFFALSE 44389
44280: GO 44282
44282: DISABLE
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 22
44295: PUSH
44296: LD_OWVAR 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 25
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PPUSH
44319: CALL_OW 69
44323: ST_TO_ADDR
// if not tmp then
44324: LD_VAR 0 3
44328: NOT
44329: IFFALSE 44333
// exit ;
44331: GO 44389
// un := tmp [ rand ( 1 , tmp ) ] ;
44333: LD_ADDR_VAR 0 2
44337: PUSH
44338: LD_VAR 0 3
44342: PUSH
44343: LD_INT 1
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: CALL_OW 12
44355: ARRAY
44356: ST_TO_ADDR
// if Crawls ( un ) then
44357: LD_VAR 0 2
44361: PPUSH
44362: CALL_OW 318
44366: IFFALSE 44377
// ComWalk ( un ) ;
44368: LD_VAR 0 2
44372: PPUSH
44373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44377: LD_VAR 0 2
44381: PPUSH
44382: LD_INT 8
44384: PPUSH
44385: CALL_OW 336
// end ;
44389: PPOPN 3
44391: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44392: LD_EXP 87
44396: PUSH
44397: LD_EXP 131
44401: AND
44402: IFFALSE 44546
44404: GO 44406
44406: DISABLE
44407: LD_INT 0
44409: PPUSH
44410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44411: LD_ADDR_VAR 0 2
44415: PUSH
44416: LD_INT 22
44418: PUSH
44419: LD_OWVAR 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 34
44443: PUSH
44444: LD_INT 12
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 34
44453: PUSH
44454: LD_INT 51
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 34
44463: PUSH
44464: LD_INT 32
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: PPUSH
44482: CALL_OW 69
44486: ST_TO_ADDR
// if not tmp then
44487: LD_VAR 0 2
44491: NOT
44492: IFFALSE 44496
// exit ;
44494: GO 44546
// for i in tmp do
44496: LD_ADDR_VAR 0 1
44500: PUSH
44501: LD_VAR 0 2
44505: PUSH
44506: FOR_IN
44507: IFFALSE 44544
// if GetCargo ( i , mat_artifact ) = 0 then
44509: LD_VAR 0 1
44513: PPUSH
44514: LD_INT 4
44516: PPUSH
44517: CALL_OW 289
44521: PUSH
44522: LD_INT 0
44524: EQUAL
44525: IFFALSE 44542
// SetCargo ( i , mat_siberit , 100 ) ;
44527: LD_VAR 0 1
44531: PPUSH
44532: LD_INT 3
44534: PPUSH
44535: LD_INT 100
44537: PPUSH
44538: CALL_OW 290
44542: GO 44506
44544: POP
44545: POP
// end ;
44546: PPOPN 2
44548: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44549: LD_EXP 87
44553: PUSH
44554: LD_EXP 132
44558: AND
44559: IFFALSE 44742
44561: GO 44563
44563: DISABLE
44564: LD_INT 0
44566: PPUSH
44567: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44568: LD_ADDR_VAR 0 2
44572: PUSH
44573: LD_INT 22
44575: PUSH
44576: LD_OWVAR 2
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PPUSH
44585: CALL_OW 69
44589: ST_TO_ADDR
// if not tmp then
44590: LD_VAR 0 2
44594: NOT
44595: IFFALSE 44599
// exit ;
44597: GO 44742
// for i := 1 to 2 do
44599: LD_ADDR_VAR 0 1
44603: PUSH
44604: DOUBLE
44605: LD_INT 1
44607: DEC
44608: ST_TO_ADDR
44609: LD_INT 2
44611: PUSH
44612: FOR_TO
44613: IFFALSE 44740
// begin uc_side := your_side ;
44615: LD_ADDR_OWVAR 20
44619: PUSH
44620: LD_OWVAR 2
44624: ST_TO_ADDR
// uc_nation := nation_american ;
44625: LD_ADDR_OWVAR 21
44629: PUSH
44630: LD_INT 1
44632: ST_TO_ADDR
// vc_chassis := us_morphling ;
44633: LD_ADDR_OWVAR 37
44637: PUSH
44638: LD_INT 5
44640: ST_TO_ADDR
// vc_engine := engine_siberite ;
44641: LD_ADDR_OWVAR 39
44645: PUSH
44646: LD_INT 3
44648: ST_TO_ADDR
// vc_control := control_computer ;
44649: LD_ADDR_OWVAR 38
44653: PUSH
44654: LD_INT 3
44656: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44657: LD_ADDR_OWVAR 40
44661: PUSH
44662: LD_INT 10
44664: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44665: LD_VAR 0 2
44669: PUSH
44670: LD_INT 1
44672: ARRAY
44673: PPUSH
44674: CALL_OW 310
44678: NOT
44679: IFFALSE 44726
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44681: CALL_OW 45
44685: PPUSH
44686: LD_VAR 0 2
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: PPUSH
44695: CALL_OW 250
44699: PPUSH
44700: LD_VAR 0 2
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: CALL_OW 251
44713: PPUSH
44714: LD_INT 12
44716: PPUSH
44717: LD_INT 1
44719: PPUSH
44720: CALL_OW 50
44724: GO 44738
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44726: CALL_OW 45
44730: PPUSH
44731: LD_INT 1
44733: PPUSH
44734: CALL_OW 51
// end ;
44738: GO 44612
44740: POP
44741: POP
// end ;
44742: PPOPN 2
44744: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44745: LD_EXP 87
44749: PUSH
44750: LD_EXP 133
44754: AND
44755: IFFALSE 44977
44757: GO 44759
44759: DISABLE
44760: LD_INT 0
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44768: LD_ADDR_VAR 0 6
44772: PUSH
44773: LD_INT 22
44775: PUSH
44776: LD_OWVAR 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 21
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 23
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 69
44821: ST_TO_ADDR
// if not tmp then
44822: LD_VAR 0 6
44826: NOT
44827: IFFALSE 44831
// exit ;
44829: GO 44977
// s1 := rand ( 1 , 4 ) ;
44831: LD_ADDR_VAR 0 2
44835: PUSH
44836: LD_INT 1
44838: PPUSH
44839: LD_INT 4
44841: PPUSH
44842: CALL_OW 12
44846: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44847: LD_ADDR_VAR 0 4
44851: PUSH
44852: LD_VAR 0 6
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: LD_VAR 0 2
44865: PPUSH
44866: CALL_OW 259
44870: ST_TO_ADDR
// if s1 = 1 then
44871: LD_VAR 0 2
44875: PUSH
44876: LD_INT 1
44878: EQUAL
44879: IFFALSE 44899
// s2 := rand ( 2 , 4 ) else
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 2
44888: PPUSH
44889: LD_INT 4
44891: PPUSH
44892: CALL_OW 12
44896: ST_TO_ADDR
44897: GO 44907
// s2 := 1 ;
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: LD_INT 1
44906: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44907: LD_ADDR_VAR 0 5
44911: PUSH
44912: LD_VAR 0 6
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: PPUSH
44921: LD_VAR 0 3
44925: PPUSH
44926: CALL_OW 259
44930: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44931: LD_VAR 0 6
44935: PUSH
44936: LD_INT 1
44938: ARRAY
44939: PPUSH
44940: LD_VAR 0 2
44944: PPUSH
44945: LD_VAR 0 5
44949: PPUSH
44950: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44954: LD_VAR 0 6
44958: PUSH
44959: LD_INT 1
44961: ARRAY
44962: PPUSH
44963: LD_VAR 0 3
44967: PPUSH
44968: LD_VAR 0 4
44972: PPUSH
44973: CALL_OW 237
// end ;
44977: PPOPN 6
44979: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44980: LD_EXP 87
44984: PUSH
44985: LD_EXP 134
44989: AND
44990: IFFALSE 45069
44992: GO 44994
44994: DISABLE
44995: LD_INT 0
44997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44998: LD_ADDR_VAR 0 1
45002: PUSH
45003: LD_INT 22
45005: PUSH
45006: LD_OWVAR 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 30
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PPUSH
45029: CALL_OW 69
45033: ST_TO_ADDR
// if not tmp then
45034: LD_VAR 0 1
45038: NOT
45039: IFFALSE 45043
// exit ;
45041: GO 45069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45043: LD_VAR 0 1
45047: PUSH
45048: LD_INT 1
45050: PPUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 12
45060: ARRAY
45061: PPUSH
45062: LD_INT 1
45064: PPUSH
45065: CALL_OW 234
// end ;
45069: PPOPN 1
45071: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45072: LD_EXP 87
45076: PUSH
45077: LD_EXP 135
45081: AND
45082: IFFALSE 45194
45084: GO 45086
45086: DISABLE
45087: LD_INT 0
45089: PPUSH
45090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45091: LD_ADDR_VAR 0 2
45095: PUSH
45096: LD_INT 22
45098: PUSH
45099: LD_OWVAR 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 30
45113: PUSH
45114: LD_INT 27
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 30
45123: PUSH
45124: LD_INT 26
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 30
45133: PUSH
45134: LD_INT 28
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PPUSH
45151: CALL_OW 69
45155: ST_TO_ADDR
// if not tmp then
45156: LD_VAR 0 2
45160: NOT
45161: IFFALSE 45165
// exit ;
45163: GO 45194
// for i in tmp do
45165: LD_ADDR_VAR 0 1
45169: PUSH
45170: LD_VAR 0 2
45174: PUSH
45175: FOR_IN
45176: IFFALSE 45192
// SetLives ( i , 1 ) ;
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_INT 1
45185: PPUSH
45186: CALL_OW 234
45190: GO 45175
45192: POP
45193: POP
// end ;
45194: PPOPN 2
45196: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45197: LD_EXP 87
45201: PUSH
45202: LD_EXP 136
45206: AND
45207: IFFALSE 45494
45209: GO 45211
45211: DISABLE
45212: LD_INT 0
45214: PPUSH
45215: PPUSH
45216: PPUSH
// begin i := rand ( 1 , 7 ) ;
45217: LD_ADDR_VAR 0 1
45221: PUSH
45222: LD_INT 1
45224: PPUSH
45225: LD_INT 7
45227: PPUSH
45228: CALL_OW 12
45232: ST_TO_ADDR
// case i of 1 :
45233: LD_VAR 0 1
45237: PUSH
45238: LD_INT 1
45240: DOUBLE
45241: EQUAL
45242: IFTRUE 45246
45244: GO 45256
45246: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45247: LD_STRING earthquake(getX(game), 0, 32)
45249: PPUSH
45250: CALL_OW 559
45254: GO 45494
45256: LD_INT 2
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45264
45262: GO 45278
45264: POP
// begin ToLua ( displayStucuk(); ) ;
45265: LD_STRING displayStucuk();
45267: PPUSH
45268: CALL_OW 559
// ResetFog ;
45272: CALL_OW 335
// end ; 3 :
45276: GO 45494
45278: LD_INT 3
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45390
45286: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45287: LD_ADDR_VAR 0 2
45291: PUSH
45292: LD_INT 22
45294: PUSH
45295: LD_OWVAR 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 25
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PPUSH
45318: CALL_OW 69
45322: ST_TO_ADDR
// if not tmp then
45323: LD_VAR 0 2
45327: NOT
45328: IFFALSE 45332
// exit ;
45330: GO 45494
// un := tmp [ rand ( 1 , tmp ) ] ;
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: LD_VAR 0 2
45341: PUSH
45342: LD_INT 1
45344: PPUSH
45345: LD_VAR 0 2
45349: PPUSH
45350: CALL_OW 12
45354: ARRAY
45355: ST_TO_ADDR
// if Crawls ( un ) then
45356: LD_VAR 0 3
45360: PPUSH
45361: CALL_OW 318
45365: IFFALSE 45376
// ComWalk ( un ) ;
45367: LD_VAR 0 3
45371: PPUSH
45372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45376: LD_VAR 0 3
45380: PPUSH
45381: LD_INT 8
45383: PPUSH
45384: CALL_OW 336
// end ; 4 :
45388: GO 45494
45390: LD_INT 4
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45398
45396: GO 45472
45398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_INT 22
45406: PUSH
45407: LD_OWVAR 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: LD_INT 29
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PPUSH
45430: CALL_OW 69
45434: ST_TO_ADDR
// if not tmp then
45435: LD_VAR 0 2
45439: NOT
45440: IFFALSE 45444
// exit ;
45442: GO 45494
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45444: LD_VAR 0 2
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45457: LD_VAR 0 2
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PPUSH
45466: CALL_OW 65
// end ; 5 .. 7 :
45470: GO 45494
45472: LD_INT 5
45474: DOUBLE
45475: GREATEREQUAL
45476: IFFALSE 45484
45478: LD_INT 7
45480: DOUBLE
45481: LESSEQUAL
45482: IFTRUE 45486
45484: GO 45493
45486: POP
// StreamSibBomb ; end ;
45487: CALL 41731 0 0
45491: GO 45494
45493: POP
// end ;
45494: PPOPN 3
45496: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45497: LD_EXP 87
45501: PUSH
45502: LD_EXP 137
45506: AND
45507: IFFALSE 45663
45509: GO 45511
45511: DISABLE
45512: LD_INT 0
45514: PPUSH
45515: PPUSH
45516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45517: LD_ADDR_VAR 0 2
45521: PUSH
45522: LD_INT 81
45524: PUSH
45525: LD_OWVAR 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 21
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 21
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PPUSH
45566: CALL_OW 69
45570: ST_TO_ADDR
// if not tmp then
45571: LD_VAR 0 2
45575: NOT
45576: IFFALSE 45580
// exit ;
45578: GO 45663
// p := 0 ;
45580: LD_ADDR_VAR 0 3
45584: PUSH
45585: LD_INT 0
45587: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45588: LD_INT 35
45590: PPUSH
45591: CALL_OW 67
// p := p + 1 ;
45595: LD_ADDR_VAR 0 3
45599: PUSH
45600: LD_VAR 0 3
45604: PUSH
45605: LD_INT 1
45607: PLUS
45608: ST_TO_ADDR
// for i in tmp do
45609: LD_ADDR_VAR 0 1
45613: PUSH
45614: LD_VAR 0 2
45618: PUSH
45619: FOR_IN
45620: IFFALSE 45651
// if GetLives ( i ) < 1000 then
45622: LD_VAR 0 1
45626: PPUSH
45627: CALL_OW 256
45631: PUSH
45632: LD_INT 1000
45634: LESS
45635: IFFALSE 45649
// SetLives ( i , 1000 ) ;
45637: LD_VAR 0 1
45641: PPUSH
45642: LD_INT 1000
45644: PPUSH
45645: CALL_OW 234
45649: GO 45619
45651: POP
45652: POP
// until p > 20 ;
45653: LD_VAR 0 3
45657: PUSH
45658: LD_INT 20
45660: GREATER
45661: IFFALSE 45588
// end ;
45663: PPOPN 3
45665: END
// every 0 0$1 trigger StreamModeActive and sTime do
45666: LD_EXP 87
45670: PUSH
45671: LD_EXP 138
45675: AND
45676: IFFALSE 45711
45678: GO 45680
45680: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45681: LD_INT 28
45683: PPUSH
45684: LD_OWVAR 2
45688: PPUSH
45689: LD_INT 2
45691: PPUSH
45692: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45696: LD_INT 30
45698: PPUSH
45699: LD_OWVAR 2
45703: PPUSH
45704: LD_INT 2
45706: PPUSH
45707: CALL_OW 322
// end ;
45711: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45712: LD_EXP 87
45716: PUSH
45717: LD_EXP 139
45721: AND
45722: IFFALSE 45843
45724: GO 45726
45726: DISABLE
45727: LD_INT 0
45729: PPUSH
45730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45731: LD_ADDR_VAR 0 2
45735: PUSH
45736: LD_INT 22
45738: PUSH
45739: LD_OWVAR 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 21
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 23
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: PPUSH
45780: CALL_OW 69
45784: ST_TO_ADDR
// if not tmp then
45785: LD_VAR 0 2
45789: NOT
45790: IFFALSE 45794
// exit ;
45792: GO 45843
// for i in tmp do
45794: LD_ADDR_VAR 0 1
45798: PUSH
45799: LD_VAR 0 2
45803: PUSH
45804: FOR_IN
45805: IFFALSE 45841
// begin if Crawls ( i ) then
45807: LD_VAR 0 1
45811: PPUSH
45812: CALL_OW 318
45816: IFFALSE 45827
// ComWalk ( i ) ;
45818: LD_VAR 0 1
45822: PPUSH
45823: CALL_OW 138
// SetClass ( i , 2 ) ;
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_INT 2
45834: PPUSH
45835: CALL_OW 336
// end ;
45839: GO 45804
45841: POP
45842: POP
// end ;
45843: PPOPN 2
45845: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45846: LD_EXP 87
45850: PUSH
45851: LD_EXP 140
45855: AND
45856: IFFALSE 46144
45858: GO 45860
45860: DISABLE
45861: LD_INT 0
45863: PPUSH
45864: PPUSH
45865: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45866: LD_OWVAR 2
45870: PPUSH
45871: LD_INT 9
45873: PPUSH
45874: LD_INT 1
45876: PPUSH
45877: LD_INT 1
45879: PPUSH
45880: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45884: LD_INT 9
45886: PPUSH
45887: LD_OWVAR 2
45891: PPUSH
45892: CALL_OW 343
// uc_side := 9 ;
45896: LD_ADDR_OWVAR 20
45900: PUSH
45901: LD_INT 9
45903: ST_TO_ADDR
// uc_nation := 2 ;
45904: LD_ADDR_OWVAR 21
45908: PUSH
45909: LD_INT 2
45911: ST_TO_ADDR
// hc_name := Dark Warrior ;
45912: LD_ADDR_OWVAR 26
45916: PUSH
45917: LD_STRING Dark Warrior
45919: ST_TO_ADDR
// hc_gallery :=  ;
45920: LD_ADDR_OWVAR 33
45924: PUSH
45925: LD_STRING 
45927: ST_TO_ADDR
// hc_noskilllimit := true ;
45928: LD_ADDR_OWVAR 76
45932: PUSH
45933: LD_INT 1
45935: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45936: LD_ADDR_OWVAR 31
45940: PUSH
45941: LD_INT 30
45943: PUSH
45944: LD_INT 30
45946: PUSH
45947: LD_INT 30
45949: PUSH
45950: LD_INT 30
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// un := CreateHuman ;
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: CALL_OW 44
45968: ST_TO_ADDR
// hc_noskilllimit := false ;
45969: LD_ADDR_OWVAR 76
45973: PUSH
45974: LD_INT 0
45976: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45977: LD_VAR 0 3
45981: PPUSH
45982: LD_INT 1
45984: PPUSH
45985: CALL_OW 51
// ToLua ( playRanger() ) ;
45989: LD_STRING playRanger()
45991: PPUSH
45992: CALL_OW 559
// p := 0 ;
45996: LD_ADDR_VAR 0 2
46000: PUSH
46001: LD_INT 0
46003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46004: LD_INT 35
46006: PPUSH
46007: CALL_OW 67
// p := p + 1 ;
46011: LD_ADDR_VAR 0 2
46015: PUSH
46016: LD_VAR 0 2
46020: PUSH
46021: LD_INT 1
46023: PLUS
46024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46025: LD_VAR 0 3
46029: PPUSH
46030: CALL_OW 256
46034: PUSH
46035: LD_INT 1000
46037: LESS
46038: IFFALSE 46052
// SetLives ( un , 1000 ) ;
46040: LD_VAR 0 3
46044: PPUSH
46045: LD_INT 1000
46047: PPUSH
46048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46052: LD_VAR 0 3
46056: PPUSH
46057: LD_INT 81
46059: PUSH
46060: LD_OWVAR 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 91
46071: PUSH
46072: LD_VAR 0 3
46076: PUSH
46077: LD_INT 30
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: CALL_OW 69
46093: PPUSH
46094: LD_VAR 0 3
46098: PPUSH
46099: CALL_OW 74
46103: PPUSH
46104: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46108: LD_VAR 0 2
46112: PUSH
46113: LD_INT 80
46115: GREATER
46116: PUSH
46117: LD_VAR 0 3
46121: PPUSH
46122: CALL_OW 301
46126: OR
46127: IFFALSE 46004
// if un then
46129: LD_VAR 0 3
46133: IFFALSE 46144
// RemoveUnit ( un ) ;
46135: LD_VAR 0 3
46139: PPUSH
46140: CALL_OW 64
// end ;
46144: PPOPN 3
46146: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46147: LD_EXP 141
46151: IFFALSE 46267
46153: GO 46155
46155: DISABLE
46156: LD_INT 0
46158: PPUSH
46159: PPUSH
46160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46161: LD_ADDR_VAR 0 2
46165: PUSH
46166: LD_INT 81
46168: PUSH
46169: LD_OWVAR 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 21
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PPUSH
46192: CALL_OW 69
46196: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46197: LD_STRING playComputer()
46199: PPUSH
46200: CALL_OW 559
// if not tmp then
46204: LD_VAR 0 2
46208: NOT
46209: IFFALSE 46213
// exit ;
46211: GO 46267
// for i in tmp do
46213: LD_ADDR_VAR 0 1
46217: PUSH
46218: LD_VAR 0 2
46222: PUSH
46223: FOR_IN
46224: IFFALSE 46265
// for j := 1 to 4 do
46226: LD_ADDR_VAR 0 3
46230: PUSH
46231: DOUBLE
46232: LD_INT 1
46234: DEC
46235: ST_TO_ADDR
46236: LD_INT 4
46238: PUSH
46239: FOR_TO
46240: IFFALSE 46261
// SetSkill ( i , j , 10 ) ;
46242: LD_VAR 0 1
46246: PPUSH
46247: LD_VAR 0 3
46251: PPUSH
46252: LD_INT 10
46254: PPUSH
46255: CALL_OW 237
46259: GO 46239
46261: POP
46262: POP
46263: GO 46223
46265: POP
46266: POP
// end ;
46267: PPOPN 3
46269: END
// every 0 0$1 trigger s30 do var i , tmp ;
46270: LD_EXP 142
46274: IFFALSE 46343
46276: GO 46278
46278: DISABLE
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46283: LD_ADDR_VAR 0 2
46287: PUSH
46288: LD_INT 22
46290: PUSH
46291: LD_OWVAR 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PPUSH
46300: CALL_OW 69
46304: ST_TO_ADDR
// if not tmp then
46305: LD_VAR 0 2
46309: NOT
46310: IFFALSE 46314
// exit ;
46312: GO 46343
// for i in tmp do
46314: LD_ADDR_VAR 0 1
46318: PUSH
46319: LD_VAR 0 2
46323: PUSH
46324: FOR_IN
46325: IFFALSE 46341
// SetLives ( i , 300 ) ;
46327: LD_VAR 0 1
46331: PPUSH
46332: LD_INT 300
46334: PPUSH
46335: CALL_OW 234
46339: GO 46324
46341: POP
46342: POP
// end ;
46343: PPOPN 2
46345: END
// every 0 0$1 trigger s60 do var i , tmp ;
46346: LD_EXP 143
46350: IFFALSE 46419
46352: GO 46354
46354: DISABLE
46355: LD_INT 0
46357: PPUSH
46358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46359: LD_ADDR_VAR 0 2
46363: PUSH
46364: LD_INT 22
46366: PUSH
46367: LD_OWVAR 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PPUSH
46376: CALL_OW 69
46380: ST_TO_ADDR
// if not tmp then
46381: LD_VAR 0 2
46385: NOT
46386: IFFALSE 46390
// exit ;
46388: GO 46419
// for i in tmp do
46390: LD_ADDR_VAR 0 1
46394: PUSH
46395: LD_VAR 0 2
46399: PUSH
46400: FOR_IN
46401: IFFALSE 46417
// SetLives ( i , 600 ) ;
46403: LD_VAR 0 1
46407: PPUSH
46408: LD_INT 600
46410: PPUSH
46411: CALL_OW 234
46415: GO 46400
46417: POP
46418: POP
// end ;
46419: PPOPN 2
46421: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46422: LD_INT 0
46424: PPUSH
// case cmd of 301 :
46425: LD_VAR 0 1
46429: PUSH
46430: LD_INT 301
46432: DOUBLE
46433: EQUAL
46434: IFTRUE 46438
46436: GO 46470
46438: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46439: LD_VAR 0 6
46443: PPUSH
46444: LD_VAR 0 7
46448: PPUSH
46449: LD_VAR 0 8
46453: PPUSH
46454: LD_VAR 0 4
46458: PPUSH
46459: LD_VAR 0 5
46463: PPUSH
46464: CALL 47679 0 5
46468: GO 46591
46470: LD_INT 302
46472: DOUBLE
46473: EQUAL
46474: IFTRUE 46478
46476: GO 46515
46478: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46479: LD_VAR 0 6
46483: PPUSH
46484: LD_VAR 0 7
46488: PPUSH
46489: LD_VAR 0 8
46493: PPUSH
46494: LD_VAR 0 9
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: LD_VAR 0 5
46508: PPUSH
46509: CALL 47770 0 6
46513: GO 46591
46515: LD_INT 303
46517: DOUBLE
46518: EQUAL
46519: IFTRUE 46523
46521: GO 46560
46523: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46524: LD_VAR 0 6
46528: PPUSH
46529: LD_VAR 0 7
46533: PPUSH
46534: LD_VAR 0 8
46538: PPUSH
46539: LD_VAR 0 9
46543: PPUSH
46544: LD_VAR 0 4
46548: PPUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: CALL 46596 0 6
46558: GO 46591
46560: LD_INT 304
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46590
46568: POP
// hHackTeleport ( unit , x , y ) ; end ;
46569: LD_VAR 0 2
46573: PPUSH
46574: LD_VAR 0 4
46578: PPUSH
46579: LD_VAR 0 5
46583: PPUSH
46584: CALL 48363 0 3
46588: GO 46591
46590: POP
// end ;
46591: LD_VAR 0 12
46595: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46596: LD_INT 0
46598: PPUSH
46599: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46600: LD_VAR 0 1
46604: PUSH
46605: LD_INT 1
46607: LESS
46608: PUSH
46609: LD_VAR 0 1
46613: PUSH
46614: LD_INT 3
46616: GREATER
46617: OR
46618: PUSH
46619: LD_VAR 0 5
46623: PPUSH
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 428
46633: OR
46634: IFFALSE 46638
// exit ;
46636: GO 47366
// uc_side := your_side ;
46638: LD_ADDR_OWVAR 20
46642: PUSH
46643: LD_OWVAR 2
46647: ST_TO_ADDR
// uc_nation := nation ;
46648: LD_ADDR_OWVAR 21
46652: PUSH
46653: LD_VAR 0 1
46657: ST_TO_ADDR
// bc_level = 1 ;
46658: LD_ADDR_OWVAR 43
46662: PUSH
46663: LD_INT 1
46665: ST_TO_ADDR
// case btype of 1 :
46666: LD_VAR 0 2
46670: PUSH
46671: LD_INT 1
46673: DOUBLE
46674: EQUAL
46675: IFTRUE 46679
46677: GO 46690
46679: POP
// bc_type := b_depot ; 2 :
46680: LD_ADDR_OWVAR 42
46684: PUSH
46685: LD_INT 0
46687: ST_TO_ADDR
46688: GO 47310
46690: LD_INT 2
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46709
46698: POP
// bc_type := b_warehouse ; 3 :
46699: LD_ADDR_OWVAR 42
46703: PUSH
46704: LD_INT 1
46706: ST_TO_ADDR
46707: GO 47310
46709: LD_INT 3
46711: DOUBLE
46712: EQUAL
46713: IFTRUE 46717
46715: GO 46728
46717: POP
// bc_type := b_lab ; 4 .. 9 :
46718: LD_ADDR_OWVAR 42
46722: PUSH
46723: LD_INT 6
46725: ST_TO_ADDR
46726: GO 47310
46728: LD_INT 4
46730: DOUBLE
46731: GREATEREQUAL
46732: IFFALSE 46740
46734: LD_INT 9
46736: DOUBLE
46737: LESSEQUAL
46738: IFTRUE 46742
46740: GO 46802
46742: POP
// begin bc_type := b_lab_half ;
46743: LD_ADDR_OWVAR 42
46747: PUSH
46748: LD_INT 7
46750: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46751: LD_ADDR_OWVAR 44
46755: PUSH
46756: LD_INT 10
46758: PUSH
46759: LD_INT 11
46761: PUSH
46762: LD_INT 12
46764: PUSH
46765: LD_INT 15
46767: PUSH
46768: LD_INT 14
46770: PUSH
46771: LD_INT 13
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 3
46789: MINUS
46790: ARRAY
46791: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46792: LD_ADDR_OWVAR 45
46796: PUSH
46797: LD_INT 9
46799: ST_TO_ADDR
// end ; 10 .. 13 :
46800: GO 47310
46802: LD_INT 10
46804: DOUBLE
46805: GREATEREQUAL
46806: IFFALSE 46814
46808: LD_INT 13
46810: DOUBLE
46811: LESSEQUAL
46812: IFTRUE 46816
46814: GO 46893
46816: POP
// begin bc_type := b_lab_full ;
46817: LD_ADDR_OWVAR 42
46821: PUSH
46822: LD_INT 8
46824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46825: LD_ADDR_OWVAR 44
46829: PUSH
46830: LD_INT 10
46832: PUSH
46833: LD_INT 12
46835: PUSH
46836: LD_INT 14
46838: PUSH
46839: LD_INT 13
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: PUSH
46848: LD_VAR 0 2
46852: PUSH
46853: LD_INT 9
46855: MINUS
46856: ARRAY
46857: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46858: LD_ADDR_OWVAR 45
46862: PUSH
46863: LD_INT 11
46865: PUSH
46866: LD_INT 15
46868: PUSH
46869: LD_INT 12
46871: PUSH
46872: LD_INT 15
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: PUSH
46881: LD_VAR 0 2
46885: PUSH
46886: LD_INT 9
46888: MINUS
46889: ARRAY
46890: ST_TO_ADDR
// end ; 14 :
46891: GO 47310
46893: LD_INT 14
46895: DOUBLE
46896: EQUAL
46897: IFTRUE 46901
46899: GO 46912
46901: POP
// bc_type := b_workshop ; 15 :
46902: LD_ADDR_OWVAR 42
46906: PUSH
46907: LD_INT 2
46909: ST_TO_ADDR
46910: GO 47310
46912: LD_INT 15
46914: DOUBLE
46915: EQUAL
46916: IFTRUE 46920
46918: GO 46931
46920: POP
// bc_type := b_factory ; 16 :
46921: LD_ADDR_OWVAR 42
46925: PUSH
46926: LD_INT 3
46928: ST_TO_ADDR
46929: GO 47310
46931: LD_INT 16
46933: DOUBLE
46934: EQUAL
46935: IFTRUE 46939
46937: GO 46950
46939: POP
// bc_type := b_ext_gun ; 17 :
46940: LD_ADDR_OWVAR 42
46944: PUSH
46945: LD_INT 17
46947: ST_TO_ADDR
46948: GO 47310
46950: LD_INT 17
46952: DOUBLE
46953: EQUAL
46954: IFTRUE 46958
46956: GO 46986
46958: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46959: LD_ADDR_OWVAR 42
46963: PUSH
46964: LD_INT 19
46966: PUSH
46967: LD_INT 23
46969: PUSH
46970: LD_INT 19
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: LD_VAR 0 1
46982: ARRAY
46983: ST_TO_ADDR
46984: GO 47310
46986: LD_INT 18
46988: DOUBLE
46989: EQUAL
46990: IFTRUE 46994
46992: GO 47005
46994: POP
// bc_type := b_ext_radar ; 19 :
46995: LD_ADDR_OWVAR 42
46999: PUSH
47000: LD_INT 20
47002: ST_TO_ADDR
47003: GO 47310
47005: LD_INT 19
47007: DOUBLE
47008: EQUAL
47009: IFTRUE 47013
47011: GO 47024
47013: POP
// bc_type := b_ext_radio ; 20 :
47014: LD_ADDR_OWVAR 42
47018: PUSH
47019: LD_INT 22
47021: ST_TO_ADDR
47022: GO 47310
47024: LD_INT 20
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47032
47030: GO 47043
47032: POP
// bc_type := b_ext_siberium ; 21 :
47033: LD_ADDR_OWVAR 42
47037: PUSH
47038: LD_INT 21
47040: ST_TO_ADDR
47041: GO 47310
47043: LD_INT 21
47045: DOUBLE
47046: EQUAL
47047: IFTRUE 47051
47049: GO 47062
47051: POP
// bc_type := b_ext_computer ; 22 :
47052: LD_ADDR_OWVAR 42
47056: PUSH
47057: LD_INT 24
47059: ST_TO_ADDR
47060: GO 47310
47062: LD_INT 22
47064: DOUBLE
47065: EQUAL
47066: IFTRUE 47070
47068: GO 47081
47070: POP
// bc_type := b_ext_track ; 23 :
47071: LD_ADDR_OWVAR 42
47075: PUSH
47076: LD_INT 16
47078: ST_TO_ADDR
47079: GO 47310
47081: LD_INT 23
47083: DOUBLE
47084: EQUAL
47085: IFTRUE 47089
47087: GO 47100
47089: POP
// bc_type := b_ext_laser ; 24 :
47090: LD_ADDR_OWVAR 42
47094: PUSH
47095: LD_INT 25
47097: ST_TO_ADDR
47098: GO 47310
47100: LD_INT 24
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47108
47106: GO 47119
47108: POP
// bc_type := b_control_tower ; 25 :
47109: LD_ADDR_OWVAR 42
47113: PUSH
47114: LD_INT 36
47116: ST_TO_ADDR
47117: GO 47310
47119: LD_INT 25
47121: DOUBLE
47122: EQUAL
47123: IFTRUE 47127
47125: GO 47138
47127: POP
// bc_type := b_breastwork ; 26 :
47128: LD_ADDR_OWVAR 42
47132: PUSH
47133: LD_INT 31
47135: ST_TO_ADDR
47136: GO 47310
47138: LD_INT 26
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47157
47146: POP
// bc_type := b_bunker ; 27 :
47147: LD_ADDR_OWVAR 42
47151: PUSH
47152: LD_INT 32
47154: ST_TO_ADDR
47155: GO 47310
47157: LD_INT 27
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47176
47165: POP
// bc_type := b_turret ; 28 :
47166: LD_ADDR_OWVAR 42
47170: PUSH
47171: LD_INT 33
47173: ST_TO_ADDR
47174: GO 47310
47176: LD_INT 28
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47184
47182: GO 47195
47184: POP
// bc_type := b_armoury ; 29 :
47185: LD_ADDR_OWVAR 42
47189: PUSH
47190: LD_INT 4
47192: ST_TO_ADDR
47193: GO 47310
47195: LD_INT 29
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47203
47201: GO 47214
47203: POP
// bc_type := b_barracks ; 30 :
47204: LD_ADDR_OWVAR 42
47208: PUSH
47209: LD_INT 5
47211: ST_TO_ADDR
47212: GO 47310
47214: LD_INT 30
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47222
47220: GO 47233
47222: POP
// bc_type := b_solar_power ; 31 :
47223: LD_ADDR_OWVAR 42
47227: PUSH
47228: LD_INT 27
47230: ST_TO_ADDR
47231: GO 47310
47233: LD_INT 31
47235: DOUBLE
47236: EQUAL
47237: IFTRUE 47241
47239: GO 47252
47241: POP
// bc_type := b_oil_power ; 32 :
47242: LD_ADDR_OWVAR 42
47246: PUSH
47247: LD_INT 26
47249: ST_TO_ADDR
47250: GO 47310
47252: LD_INT 32
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 47271
47260: POP
// bc_type := b_siberite_power ; 33 :
47261: LD_ADDR_OWVAR 42
47265: PUSH
47266: LD_INT 28
47268: ST_TO_ADDR
47269: GO 47310
47271: LD_INT 33
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47290
47279: POP
// bc_type := b_oil_mine ; 34 :
47280: LD_ADDR_OWVAR 42
47284: PUSH
47285: LD_INT 29
47287: ST_TO_ADDR
47288: GO 47310
47290: LD_INT 34
47292: DOUBLE
47293: EQUAL
47294: IFTRUE 47298
47296: GO 47309
47298: POP
// bc_type := b_siberite_mine ; end ;
47299: LD_ADDR_OWVAR 42
47303: PUSH
47304: LD_INT 30
47306: ST_TO_ADDR
47307: GO 47310
47309: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47310: LD_ADDR_VAR 0 8
47314: PUSH
47315: LD_VAR 0 5
47319: PPUSH
47320: LD_VAR 0 6
47324: PPUSH
47325: LD_VAR 0 3
47329: PPUSH
47330: CALL_OW 47
47334: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47335: LD_OWVAR 42
47339: PUSH
47340: LD_INT 32
47342: PUSH
47343: LD_INT 33
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: IN
47350: IFFALSE 47366
// PlaceWeaponTurret ( b , weapon ) ;
47352: LD_VAR 0 8
47356: PPUSH
47357: LD_VAR 0 4
47361: PPUSH
47362: CALL_OW 431
// end ;
47366: LD_VAR 0 7
47370: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47371: LD_INT 0
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47377: LD_ADDR_VAR 0 4
47381: PUSH
47382: LD_INT 22
47384: PUSH
47385: LD_OWVAR 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 30
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 30
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PPUSH
47426: CALL_OW 69
47430: ST_TO_ADDR
// if not tmp then
47431: LD_VAR 0 4
47435: NOT
47436: IFFALSE 47440
// exit ;
47438: GO 47499
// for i in tmp do
47440: LD_ADDR_VAR 0 2
47444: PUSH
47445: LD_VAR 0 4
47449: PUSH
47450: FOR_IN
47451: IFFALSE 47497
// for j = 1 to 3 do
47453: LD_ADDR_VAR 0 3
47457: PUSH
47458: DOUBLE
47459: LD_INT 1
47461: DEC
47462: ST_TO_ADDR
47463: LD_INT 3
47465: PUSH
47466: FOR_TO
47467: IFFALSE 47493
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47469: LD_VAR 0 2
47473: PPUSH
47474: CALL_OW 274
47478: PPUSH
47479: LD_VAR 0 3
47483: PPUSH
47484: LD_INT 99999
47486: PPUSH
47487: CALL_OW 277
47491: GO 47466
47493: POP
47494: POP
47495: GO 47450
47497: POP
47498: POP
// end ;
47499: LD_VAR 0 1
47503: RET
// export function hHackSetLevel10 ; var i , j ; begin
47504: LD_INT 0
47506: PPUSH
47507: PPUSH
47508: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47509: LD_ADDR_VAR 0 2
47513: PUSH
47514: LD_INT 21
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PPUSH
47524: CALL_OW 69
47528: PUSH
47529: FOR_IN
47530: IFFALSE 47582
// if IsSelected ( i ) then
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 306
47541: IFFALSE 47580
// begin for j := 1 to 4 do
47543: LD_ADDR_VAR 0 3
47547: PUSH
47548: DOUBLE
47549: LD_INT 1
47551: DEC
47552: ST_TO_ADDR
47553: LD_INT 4
47555: PUSH
47556: FOR_TO
47557: IFFALSE 47578
// SetSkill ( i , j , 10 ) ;
47559: LD_VAR 0 2
47563: PPUSH
47564: LD_VAR 0 3
47568: PPUSH
47569: LD_INT 10
47571: PPUSH
47572: CALL_OW 237
47576: GO 47556
47578: POP
47579: POP
// end ;
47580: GO 47529
47582: POP
47583: POP
// end ;
47584: LD_VAR 0 1
47588: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47589: LD_INT 0
47591: PPUSH
47592: PPUSH
47593: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47594: LD_ADDR_VAR 0 2
47598: PUSH
47599: LD_INT 22
47601: PUSH
47602: LD_OWVAR 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 21
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PPUSH
47625: CALL_OW 69
47629: PUSH
47630: FOR_IN
47631: IFFALSE 47672
// begin for j := 1 to 4 do
47633: LD_ADDR_VAR 0 3
47637: PUSH
47638: DOUBLE
47639: LD_INT 1
47641: DEC
47642: ST_TO_ADDR
47643: LD_INT 4
47645: PUSH
47646: FOR_TO
47647: IFFALSE 47668
// SetSkill ( i , j , 10 ) ;
47649: LD_VAR 0 2
47653: PPUSH
47654: LD_VAR 0 3
47658: PPUSH
47659: LD_INT 10
47661: PPUSH
47662: CALL_OW 237
47666: GO 47646
47668: POP
47669: POP
// end ;
47670: GO 47630
47672: POP
47673: POP
// end ;
47674: LD_VAR 0 1
47678: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47679: LD_INT 0
47681: PPUSH
// uc_side := your_side ;
47682: LD_ADDR_OWVAR 20
47686: PUSH
47687: LD_OWVAR 2
47691: ST_TO_ADDR
// uc_nation := nation ;
47692: LD_ADDR_OWVAR 21
47696: PUSH
47697: LD_VAR 0 1
47701: ST_TO_ADDR
// InitHc ;
47702: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47706: LD_INT 0
47708: PPUSH
47709: LD_VAR 0 2
47713: PPUSH
47714: LD_VAR 0 3
47718: PPUSH
47719: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47723: LD_VAR 0 4
47727: PPUSH
47728: LD_VAR 0 5
47732: PPUSH
47733: CALL_OW 428
47737: PUSH
47738: LD_INT 0
47740: EQUAL
47741: IFFALSE 47765
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47743: CALL_OW 44
47747: PPUSH
47748: LD_VAR 0 4
47752: PPUSH
47753: LD_VAR 0 5
47757: PPUSH
47758: LD_INT 1
47760: PPUSH
47761: CALL_OW 48
// end ;
47765: LD_VAR 0 6
47769: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47770: LD_INT 0
47772: PPUSH
47773: PPUSH
// uc_side := your_side ;
47774: LD_ADDR_OWVAR 20
47778: PUSH
47779: LD_OWVAR 2
47783: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47784: LD_VAR 0 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 4
47800: PUSH
47801: LD_INT 5
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: IN
47811: IFFALSE 47823
// uc_nation := nation_american else
47813: LD_ADDR_OWVAR 21
47817: PUSH
47818: LD_INT 1
47820: ST_TO_ADDR
47821: GO 47866
// if chassis in [ 11 , 12 , 13 , 14 ] then
47823: LD_VAR 0 1
47827: PUSH
47828: LD_INT 11
47830: PUSH
47831: LD_INT 12
47833: PUSH
47834: LD_INT 13
47836: PUSH
47837: LD_INT 14
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: IN
47846: IFFALSE 47858
// uc_nation := nation_arabian else
47848: LD_ADDR_OWVAR 21
47852: PUSH
47853: LD_INT 2
47855: ST_TO_ADDR
47856: GO 47866
// uc_nation := nation_russian ;
47858: LD_ADDR_OWVAR 21
47862: PUSH
47863: LD_INT 3
47865: ST_TO_ADDR
// vc_chassis := chassis ;
47866: LD_ADDR_OWVAR 37
47870: PUSH
47871: LD_VAR 0 1
47875: ST_TO_ADDR
// vc_engine := engine ;
47876: LD_ADDR_OWVAR 39
47880: PUSH
47881: LD_VAR 0 2
47885: ST_TO_ADDR
// vc_control := control ;
47886: LD_ADDR_OWVAR 38
47890: PUSH
47891: LD_VAR 0 3
47895: ST_TO_ADDR
// vc_weapon := weapon ;
47896: LD_ADDR_OWVAR 40
47900: PUSH
47901: LD_VAR 0 4
47905: ST_TO_ADDR
// un := CreateVehicle ;
47906: LD_ADDR_VAR 0 8
47910: PUSH
47911: CALL_OW 45
47915: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47916: LD_VAR 0 8
47920: PPUSH
47921: LD_INT 0
47923: PPUSH
47924: LD_INT 5
47926: PPUSH
47927: CALL_OW 12
47931: PPUSH
47932: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47936: LD_VAR 0 8
47940: PPUSH
47941: LD_VAR 0 5
47945: PPUSH
47946: LD_VAR 0 6
47950: PPUSH
47951: LD_INT 1
47953: PPUSH
47954: CALL_OW 48
// end ;
47958: LD_VAR 0 7
47962: RET
// export hInvincible ; every 1 do
47963: GO 47965
47965: DISABLE
// hInvincible := [ ] ;
47966: LD_ADDR_EXP 144
47970: PUSH
47971: EMPTY
47972: ST_TO_ADDR
47973: END
// every 10 do var i ;
47974: GO 47976
47976: DISABLE
47977: LD_INT 0
47979: PPUSH
// begin enable ;
47980: ENABLE
// if not hInvincible then
47981: LD_EXP 144
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48034
// for i in hInvincible do
47990: LD_ADDR_VAR 0 1
47994: PUSH
47995: LD_EXP 144
47999: PUSH
48000: FOR_IN
48001: IFFALSE 48032
// if GetLives ( i ) < 1000 then
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 256
48012: PUSH
48013: LD_INT 1000
48015: LESS
48016: IFFALSE 48030
// SetLives ( i , 1000 ) ;
48018: LD_VAR 0 1
48022: PPUSH
48023: LD_INT 1000
48025: PPUSH
48026: CALL_OW 234
48030: GO 48000
48032: POP
48033: POP
// end ;
48034: PPOPN 1
48036: END
// export function hHackInvincible ; var i ; begin
48037: LD_INT 0
48039: PPUSH
48040: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48041: LD_ADDR_VAR 0 2
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 21
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 21
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: PPUSH
48074: CALL_OW 69
48078: PUSH
48079: FOR_IN
48080: IFFALSE 48141
// if IsSelected ( i ) then
48082: LD_VAR 0 2
48086: PPUSH
48087: CALL_OW 306
48091: IFFALSE 48139
// begin if i in hInvincible then
48093: LD_VAR 0 2
48097: PUSH
48098: LD_EXP 144
48102: IN
48103: IFFALSE 48123
// hInvincible := hInvincible diff i else
48105: LD_ADDR_EXP 144
48109: PUSH
48110: LD_EXP 144
48114: PUSH
48115: LD_VAR 0 2
48119: DIFF
48120: ST_TO_ADDR
48121: GO 48139
// hInvincible := hInvincible union i ;
48123: LD_ADDR_EXP 144
48127: PUSH
48128: LD_EXP 144
48132: PUSH
48133: LD_VAR 0 2
48137: UNION
48138: ST_TO_ADDR
// end ;
48139: GO 48079
48141: POP
48142: POP
// end ;
48143: LD_VAR 0 1
48147: RET
// export function hHackInvisible ; var i , j ; begin
48148: LD_INT 0
48150: PPUSH
48151: PPUSH
48152: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48153: LD_ADDR_VAR 0 2
48157: PUSH
48158: LD_INT 21
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 69
48172: PUSH
48173: FOR_IN
48174: IFFALSE 48198
// if IsSelected ( i ) then
48176: LD_VAR 0 2
48180: PPUSH
48181: CALL_OW 306
48185: IFFALSE 48196
// ComForceInvisible ( i ) ;
48187: LD_VAR 0 2
48191: PPUSH
48192: CALL_OW 496
48196: GO 48173
48198: POP
48199: POP
// end ;
48200: LD_VAR 0 1
48204: RET
// export function hHackChangeYourSide ; begin
48205: LD_INT 0
48207: PPUSH
// if your_side = 8 then
48208: LD_OWVAR 2
48212: PUSH
48213: LD_INT 8
48215: EQUAL
48216: IFFALSE 48228
// your_side := 0 else
48218: LD_ADDR_OWVAR 2
48222: PUSH
48223: LD_INT 0
48225: ST_TO_ADDR
48226: GO 48242
// your_side := your_side + 1 ;
48228: LD_ADDR_OWVAR 2
48232: PUSH
48233: LD_OWVAR 2
48237: PUSH
48238: LD_INT 1
48240: PLUS
48241: ST_TO_ADDR
// end ;
48242: LD_VAR 0 1
48246: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48247: LD_INT 0
48249: PPUSH
48250: PPUSH
48251: PPUSH
// for i in all_units do
48252: LD_ADDR_VAR 0 2
48256: PUSH
48257: LD_OWVAR 3
48261: PUSH
48262: FOR_IN
48263: IFFALSE 48341
// if IsSelected ( i ) then
48265: LD_VAR 0 2
48269: PPUSH
48270: CALL_OW 306
48274: IFFALSE 48339
// begin j := GetSide ( i ) ;
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_VAR 0 2
48285: PPUSH
48286: CALL_OW 255
48290: ST_TO_ADDR
// if j = 8 then
48291: LD_VAR 0 3
48295: PUSH
48296: LD_INT 8
48298: EQUAL
48299: IFFALSE 48311
// j := 0 else
48301: LD_ADDR_VAR 0 3
48305: PUSH
48306: LD_INT 0
48308: ST_TO_ADDR
48309: GO 48325
// j := j + 1 ;
48311: LD_ADDR_VAR 0 3
48315: PUSH
48316: LD_VAR 0 3
48320: PUSH
48321: LD_INT 1
48323: PLUS
48324: ST_TO_ADDR
// SetSide ( i , j ) ;
48325: LD_VAR 0 2
48329: PPUSH
48330: LD_VAR 0 3
48334: PPUSH
48335: CALL_OW 235
// end ;
48339: GO 48262
48341: POP
48342: POP
// end ;
48343: LD_VAR 0 1
48347: RET
// export function hHackFog ; begin
48348: LD_INT 0
48350: PPUSH
// FogOff ( true ) ;
48351: LD_INT 1
48353: PPUSH
48354: CALL_OW 344
// end ;
48358: LD_VAR 0 1
48362: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48363: LD_INT 0
48365: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48366: LD_VAR 0 1
48370: PPUSH
48371: LD_VAR 0 2
48375: PPUSH
48376: LD_VAR 0 3
48380: PPUSH
48381: LD_INT 1
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: CALL_OW 483
// CenterOnXY ( x , y ) ;
48391: LD_VAR 0 2
48395: PPUSH
48396: LD_VAR 0 3
48400: PPUSH
48401: CALL_OW 84
// end ;
48405: LD_VAR 0 4
48409: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48410: LD_INT 0
48412: PPUSH
48413: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48414: LD_VAR 0 1
48418: NOT
48419: PUSH
48420: LD_VAR 0 2
48424: PPUSH
48425: LD_VAR 0 3
48429: PPUSH
48430: CALL_OW 488
48434: NOT
48435: OR
48436: PUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 266
48446: PUSH
48447: LD_INT 3
48449: NONEQUAL
48450: PUSH
48451: LD_VAR 0 1
48455: PPUSH
48456: CALL_OW 247
48460: PUSH
48461: LD_INT 1
48463: EQUAL
48464: NOT
48465: AND
48466: OR
48467: IFFALSE 48471
// exit ;
48469: GO 48753
// if GetType ( factory ) = unit_human then
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 247
48480: PUSH
48481: LD_INT 1
48483: EQUAL
48484: IFFALSE 48501
// factory := IsInUnit ( factory ) ;
48486: LD_ADDR_VAR 0 1
48490: PUSH
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 310
48500: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48501: LD_VAR 0 1
48505: PPUSH
48506: CALL_OW 266
48510: PUSH
48511: LD_INT 3
48513: NONEQUAL
48514: IFFALSE 48518
// exit ;
48516: GO 48753
// for i := 1 to Count ( factoryWaypoints ) do
48518: LD_ADDR_VAR 0 5
48522: PUSH
48523: DOUBLE
48524: LD_INT 1
48526: DEC
48527: ST_TO_ADDR
48528: LD_EXP 145
48532: PPUSH
48533: CALL 57399 0 1
48537: PUSH
48538: FOR_TO
48539: IFFALSE 48701
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
48541: LD_VAR 0 2
48545: PPUSH
48546: LD_VAR 0 3
48550: PPUSH
48551: CALL_OW 428
48555: PUSH
48556: LD_EXP 145
48560: PUSH
48561: LD_VAR 0 5
48565: ARRAY
48566: PUSH
48567: LD_INT 2
48569: ARRAY
48570: EQUAL
48571: IFFALSE 48603
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48573: LD_ADDR_EXP 145
48577: PUSH
48578: LD_EXP 145
48582: PPUSH
48583: LD_VAR 0 5
48587: PPUSH
48588: CALL_OW 3
48592: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48593: CALL 48758 0 0
// exit ;
48597: POP
48598: POP
48599: GO 48753
// end else
48601: GO 48699
// if factory = factoryWaypoints [ i ] [ 2 ] then
48603: LD_VAR 0 1
48607: PUSH
48608: LD_EXP 145
48612: PUSH
48613: LD_VAR 0 5
48617: ARRAY
48618: PUSH
48619: LD_INT 2
48621: ARRAY
48622: EQUAL
48623: IFFALSE 48699
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48625: LD_ADDR_EXP 145
48629: PUSH
48630: LD_EXP 145
48634: PPUSH
48635: LD_VAR 0 5
48639: PPUSH
48640: CALL_OW 3
48644: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
48645: LD_ADDR_EXP 145
48649: PUSH
48650: LD_EXP 145
48654: PPUSH
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 255
48664: PUSH
48665: LD_VAR 0 1
48669: PUSH
48670: LD_VAR 0 2
48674: PUSH
48675: LD_VAR 0 3
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: PPUSH
48686: CALL 93008 0 2
48690: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48691: CALL 48758 0 0
// exit ;
48695: POP
48696: POP
48697: GO 48753
// end ; end ;
48699: GO 48538
48701: POP
48702: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
48703: LD_ADDR_EXP 145
48707: PUSH
48708: LD_EXP 145
48712: PPUSH
48713: LD_VAR 0 1
48717: PPUSH
48718: CALL_OW 255
48722: PUSH
48723: LD_VAR 0 1
48727: PUSH
48728: LD_VAR 0 2
48732: PUSH
48733: LD_VAR 0 3
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: PPUSH
48744: CALL 93008 0 2
48748: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48749: CALL 48758 0 0
// end ;
48753: LD_VAR 0 4
48757: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48758: LD_INT 0
48760: PPUSH
48761: PPUSH
48762: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48763: LD_STRING resetFactoryWaypoint();
48765: PPUSH
48766: CALL_OW 559
// if factoryWaypoints then
48770: LD_EXP 145
48774: IFFALSE 48895
// begin list := factoryWaypoints ;
48776: LD_ADDR_VAR 0 3
48780: PUSH
48781: LD_EXP 145
48785: ST_TO_ADDR
// for i := 1 to list do
48786: LD_ADDR_VAR 0 2
48790: PUSH
48791: DOUBLE
48792: LD_INT 1
48794: DEC
48795: ST_TO_ADDR
48796: LD_VAR 0 3
48800: PUSH
48801: FOR_TO
48802: IFFALSE 48893
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48804: LD_STRING setFactoryWaypointXY(
48806: PUSH
48807: LD_VAR 0 3
48811: PUSH
48812: LD_VAR 0 2
48816: ARRAY
48817: PUSH
48818: LD_INT 1
48820: ARRAY
48821: STR
48822: PUSH
48823: LD_STRING ,
48825: STR
48826: PUSH
48827: LD_VAR 0 3
48831: PUSH
48832: LD_VAR 0 2
48836: ARRAY
48837: PUSH
48838: LD_INT 2
48840: ARRAY
48841: STR
48842: PUSH
48843: LD_STRING ,
48845: STR
48846: PUSH
48847: LD_VAR 0 3
48851: PUSH
48852: LD_VAR 0 2
48856: ARRAY
48857: PUSH
48858: LD_INT 3
48860: ARRAY
48861: STR
48862: PUSH
48863: LD_STRING ,
48865: STR
48866: PUSH
48867: LD_VAR 0 3
48871: PUSH
48872: LD_VAR 0 2
48876: ARRAY
48877: PUSH
48878: LD_INT 4
48880: ARRAY
48881: STR
48882: PUSH
48883: LD_STRING )
48885: STR
48886: PPUSH
48887: CALL_OW 559
48891: GO 48801
48893: POP
48894: POP
// end ; end ;
48895: LD_VAR 0 1
48899: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48900: LD_INT 0
48902: PPUSH
// if HexInfo ( x , y ) = warehouse then
48903: LD_VAR 0 2
48907: PPUSH
48908: LD_VAR 0 3
48912: PPUSH
48913: CALL_OW 428
48917: PUSH
48918: LD_VAR 0 1
48922: EQUAL
48923: IFFALSE 48950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48925: LD_ADDR_EXP 147
48929: PUSH
48930: LD_EXP 147
48934: PPUSH
48935: LD_VAR 0 1
48939: PPUSH
48940: LD_INT 0
48942: PPUSH
48943: CALL_OW 1
48947: ST_TO_ADDR
48948: GO 49001
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48950: LD_ADDR_EXP 147
48954: PUSH
48955: LD_EXP 147
48959: PPUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: LD_VAR 0 1
48969: PPUSH
48970: CALL_OW 255
48974: PUSH
48975: LD_VAR 0 1
48979: PUSH
48980: LD_VAR 0 2
48984: PUSH
48985: LD_VAR 0 3
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: PPUSH
48996: CALL_OW 1
49000: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
49001: CALL 49010 0 0
// end ;
49005: LD_VAR 0 4
49009: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
49010: LD_INT 0
49012: PPUSH
49013: PPUSH
49014: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
49015: LD_STRING resetWarehouseGatheringPoints();
49017: PPUSH
49018: CALL_OW 559
// if warehouseGatheringPoints then
49022: LD_EXP 147
49026: IFFALSE 49152
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
49028: LD_ADDR_VAR 0 3
49032: PUSH
49033: LD_EXP 147
49037: PPUSH
49038: CALL 96776 0 1
49042: ST_TO_ADDR
// for i := 1 to list do
49043: LD_ADDR_VAR 0 2
49047: PUSH
49048: DOUBLE
49049: LD_INT 1
49051: DEC
49052: ST_TO_ADDR
49053: LD_VAR 0 3
49057: PUSH
49058: FOR_TO
49059: IFFALSE 49150
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49061: LD_STRING setWarehouseGatheringPointXY(
49063: PUSH
49064: LD_VAR 0 3
49068: PUSH
49069: LD_VAR 0 2
49073: ARRAY
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: STR
49079: PUSH
49080: LD_STRING ,
49082: STR
49083: PUSH
49084: LD_VAR 0 3
49088: PUSH
49089: LD_VAR 0 2
49093: ARRAY
49094: PUSH
49095: LD_INT 2
49097: ARRAY
49098: STR
49099: PUSH
49100: LD_STRING ,
49102: STR
49103: PUSH
49104: LD_VAR 0 3
49108: PUSH
49109: LD_VAR 0 2
49113: ARRAY
49114: PUSH
49115: LD_INT 3
49117: ARRAY
49118: STR
49119: PUSH
49120: LD_STRING ,
49122: STR
49123: PUSH
49124: LD_VAR 0 3
49128: PUSH
49129: LD_VAR 0 2
49133: ARRAY
49134: PUSH
49135: LD_INT 4
49137: ARRAY
49138: STR
49139: PUSH
49140: LD_STRING )
49142: STR
49143: PPUSH
49144: CALL_OW 559
49148: GO 49058
49150: POP
49151: POP
// end ; end ;
49152: LD_VAR 0 1
49156: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49157: LD_EXP 147
49161: IFFALSE 49846
49163: GO 49165
49165: DISABLE
49166: LD_INT 0
49168: PPUSH
49169: PPUSH
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
// begin enable ;
49177: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49178: LD_ADDR_VAR 0 3
49182: PUSH
49183: LD_EXP 147
49187: PPUSH
49188: CALL 96776 0 1
49192: ST_TO_ADDR
// if not list then
49193: LD_VAR 0 3
49197: NOT
49198: IFFALSE 49202
// exit ;
49200: GO 49846
// for i := 1 to list do
49202: LD_ADDR_VAR 0 1
49206: PUSH
49207: DOUBLE
49208: LD_INT 1
49210: DEC
49211: ST_TO_ADDR
49212: LD_VAR 0 3
49216: PUSH
49217: FOR_TO
49218: IFFALSE 49844
// begin depot := list [ i ] [ 2 ] ;
49220: LD_ADDR_VAR 0 8
49224: PUSH
49225: LD_VAR 0 3
49229: PUSH
49230: LD_VAR 0 1
49234: ARRAY
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49240: LD_ADDR_VAR 0 5
49244: PUSH
49245: LD_VAR 0 3
49249: PUSH
49250: LD_VAR 0 1
49254: ARRAY
49255: PUSH
49256: LD_INT 1
49258: ARRAY
49259: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49260: LD_VAR 0 8
49264: PPUSH
49265: CALL_OW 301
49269: PUSH
49270: LD_VAR 0 5
49274: PUSH
49275: LD_VAR 0 8
49279: PPUSH
49280: CALL_OW 255
49284: NONEQUAL
49285: OR
49286: IFFALSE 49315
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49288: LD_ADDR_EXP 147
49292: PUSH
49293: LD_EXP 147
49297: PPUSH
49298: LD_VAR 0 8
49302: PPUSH
49303: LD_INT 0
49305: PPUSH
49306: CALL_OW 1
49310: ST_TO_ADDR
// exit ;
49311: POP
49312: POP
49313: GO 49846
// end ; x := list [ i ] [ 3 ] ;
49315: LD_ADDR_VAR 0 6
49319: PUSH
49320: LD_VAR 0 3
49324: PUSH
49325: LD_VAR 0 1
49329: ARRAY
49330: PUSH
49331: LD_INT 3
49333: ARRAY
49334: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49335: LD_ADDR_VAR 0 7
49339: PUSH
49340: LD_VAR 0 3
49344: PUSH
49345: LD_VAR 0 1
49349: ARRAY
49350: PUSH
49351: LD_INT 4
49353: ARRAY
49354: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49355: LD_ADDR_VAR 0 9
49359: PUSH
49360: LD_VAR 0 6
49364: PPUSH
49365: LD_VAR 0 7
49369: PPUSH
49370: LD_INT 16
49372: PPUSH
49373: CALL 95360 0 3
49377: ST_TO_ADDR
// if not cratesNearbyPoint then
49378: LD_VAR 0 9
49382: NOT
49383: IFFALSE 49389
// exit ;
49385: POP
49386: POP
49387: GO 49846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49389: LD_ADDR_VAR 0 4
49393: PUSH
49394: LD_INT 22
49396: PUSH
49397: LD_VAR 0 5
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 60
49411: PUSH
49412: EMPTY
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 91
49421: PUSH
49422: LD_VAR 0 8
49426: PUSH
49427: LD_INT 6
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 25
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 25
49450: PUSH
49451: LD_INT 16
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: PPUSH
49469: CALL_OW 69
49473: PUSH
49474: LD_VAR 0 8
49478: PPUSH
49479: CALL_OW 313
49483: PPUSH
49484: LD_INT 3
49486: PUSH
49487: LD_INT 60
49489: PUSH
49490: EMPTY
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 25
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 25
49512: PUSH
49513: LD_INT 16
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PPUSH
49529: CALL_OW 72
49533: UNION
49534: ST_TO_ADDR
// if tmp then
49535: LD_VAR 0 4
49539: IFFALSE 49619
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49541: LD_ADDR_VAR 0 4
49545: PUSH
49546: LD_VAR 0 4
49550: PPUSH
49551: LD_INT 3
49553: PPUSH
49554: CALL 93323 0 2
49558: ST_TO_ADDR
// for j in tmp do
49559: LD_ADDR_VAR 0 2
49563: PUSH
49564: LD_VAR 0 4
49568: PUSH
49569: FOR_IN
49570: IFFALSE 49613
// begin if IsInUnit ( j ) then
49572: LD_VAR 0 2
49576: PPUSH
49577: CALL_OW 310
49581: IFFALSE 49592
// ComExit ( j ) ;
49583: LD_VAR 0 2
49587: PPUSH
49588: CALL 93406 0 1
// AddComCollect ( j , x , y ) ;
49592: LD_VAR 0 2
49596: PPUSH
49597: LD_VAR 0 6
49601: PPUSH
49602: LD_VAR 0 7
49606: PPUSH
49607: CALL_OW 177
// end ;
49611: GO 49569
49613: POP
49614: POP
// exit ;
49615: POP
49616: POP
49617: GO 49846
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49619: LD_ADDR_VAR 0 4
49623: PUSH
49624: LD_INT 22
49626: PUSH
49627: LD_VAR 0 5
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 91
49638: PUSH
49639: LD_VAR 0 8
49643: PUSH
49644: LD_INT 8
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 34
49657: PUSH
49658: LD_INT 12
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 34
49667: PUSH
49668: LD_INT 51
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 34
49677: PUSH
49678: LD_INT 32
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 34
49687: PUSH
49688: LD_INT 89
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: PPUSH
49707: CALL_OW 69
49711: ST_TO_ADDR
// if tmp then
49712: LD_VAR 0 4
49716: IFFALSE 49842
// begin for j in tmp do
49718: LD_ADDR_VAR 0 2
49722: PUSH
49723: LD_VAR 0 4
49727: PUSH
49728: FOR_IN
49729: IFFALSE 49840
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49731: LD_VAR 0 2
49735: PPUSH
49736: CALL_OW 262
49740: PUSH
49741: LD_INT 3
49743: EQUAL
49744: PUSH
49745: LD_VAR 0 2
49749: PPUSH
49750: CALL_OW 261
49754: PUSH
49755: LD_INT 20
49757: GREATER
49758: OR
49759: PUSH
49760: LD_VAR 0 2
49764: PPUSH
49765: CALL_OW 314
49769: NOT
49770: AND
49771: PUSH
49772: LD_VAR 0 2
49776: PPUSH
49777: CALL_OW 263
49781: PUSH
49782: LD_INT 1
49784: NONEQUAL
49785: PUSH
49786: LD_VAR 0 2
49790: PPUSH
49791: CALL_OW 311
49795: OR
49796: AND
49797: IFFALSE 49838
// begin ComCollect ( j , x , y ) ;
49799: LD_VAR 0 2
49803: PPUSH
49804: LD_VAR 0 6
49808: PPUSH
49809: LD_VAR 0 7
49813: PPUSH
49814: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49818: LD_VAR 0 2
49822: PPUSH
49823: LD_VAR 0 8
49827: PPUSH
49828: CALL_OW 172
// exit ;
49832: POP
49833: POP
49834: POP
49835: POP
49836: GO 49846
// end ;
49838: GO 49728
49840: POP
49841: POP
// end ; end ;
49842: GO 49217
49844: POP
49845: POP
// end ; end_of_file
49846: PPOPN 9
49848: END
// export function SOS_UnitDestroyed ( un ) ; begin
49849: LD_INT 0
49851: PPUSH
// ComRadiation ( un ) ;
49852: LD_VAR 0 1
49856: PPUSH
49857: CALL 50918 0 1
// end ;
49861: LD_VAR 0 2
49865: RET
// export function SOS_UnitKamikazed ( un ) ; begin
49866: LD_INT 0
49868: PPUSH
// ComRadiation ( un ) ;
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL 50918 0 1
// end ;
49878: LD_VAR 0 2
49882: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49883: LD_INT 0
49885: PPUSH
// end ;
49886: LD_VAR 0 4
49890: RET
// export function SOS_Command ( cmd ) ; begin
49891: LD_INT 0
49893: PPUSH
// end ;
49894: LD_VAR 0 2
49898: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49899: LD_INT 0
49901: PPUSH
// end ;
49902: LD_VAR 0 6
49906: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
49907: LD_INT 0
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
// if not vehicle or not factory then
49913: LD_VAR 0 1
49917: NOT
49918: PUSH
49919: LD_VAR 0 2
49923: NOT
49924: OR
49925: IFFALSE 49929
// exit ;
49927: GO 50509
// if not factoryWaypoints then
49929: LD_EXP 145
49933: NOT
49934: IFFALSE 49938
// exit ;
49936: GO 50509
// for i := 1 to Count ( factoryWaypoints ) do
49938: LD_ADDR_VAR 0 4
49942: PUSH
49943: DOUBLE
49944: LD_INT 1
49946: DEC
49947: ST_TO_ADDR
49948: LD_EXP 145
49952: PPUSH
49953: CALL 57399 0 1
49957: PUSH
49958: FOR_TO
49959: IFFALSE 50507
// if factoryWaypoints [ i ] [ 2 ] = factory then
49961: LD_EXP 145
49965: PUSH
49966: LD_VAR 0 4
49970: ARRAY
49971: PUSH
49972: LD_INT 2
49974: ARRAY
49975: PUSH
49976: LD_VAR 0 2
49980: EQUAL
49981: IFFALSE 50505
// begin if GetControl ( vehicle ) = control_manual then
49983: LD_VAR 0 1
49987: PPUSH
49988: CALL_OW 263
49992: PUSH
49993: LD_INT 1
49995: EQUAL
49996: IFFALSE 50358
// begin driver := IsDrivenBy ( vehicle ) ;
49998: LD_ADDR_VAR 0 5
50002: PUSH
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 311
50012: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
50013: LD_VAR 0 5
50017: PUSH
50018: LD_EXP 146
50022: IN
50023: PUSH
50024: LD_VAR 0 1
50028: PUSH
50029: LD_EXP 146
50033: IN
50034: OR
50035: IFFALSE 50041
// exit ;
50037: POP
50038: POP
50039: GO 50509
// if not HasTask ( driver ) then
50041: LD_VAR 0 5
50045: PPUSH
50046: CALL_OW 314
50050: NOT
50051: IFFALSE 50356
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
50053: LD_ADDR_EXP 146
50057: PUSH
50058: LD_EXP 146
50062: PPUSH
50063: LD_VAR 0 5
50067: PPUSH
50068: CALL 93008 0 2
50072: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
50073: LD_ADDR_EXP 146
50077: PUSH
50078: LD_EXP 146
50082: PPUSH
50083: LD_VAR 0 1
50087: PPUSH
50088: CALL 93008 0 2
50092: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50093: LD_ADDR_VAR 0 6
50097: PUSH
50098: LD_EXP 145
50102: PUSH
50103: LD_VAR 0 4
50107: ARRAY
50108: PUSH
50109: LD_INT 3
50111: ARRAY
50112: PPUSH
50113: LD_EXP 145
50117: PUSH
50118: LD_VAR 0 4
50122: ARRAY
50123: PUSH
50124: LD_INT 4
50126: ARRAY
50127: PPUSH
50128: CALL_OW 428
50132: ST_TO_ADDR
// if hex then
50133: LD_VAR 0 6
50137: IFFALSE 50155
// ComMoveUnit ( driver , hex ) else
50139: LD_VAR 0 5
50143: PPUSH
50144: LD_VAR 0 6
50148: PPUSH
50149: CALL_OW 112
50153: GO 50239
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
50155: LD_VAR 0 1
50159: PPUSH
50160: LD_EXP 145
50164: PUSH
50165: LD_VAR 0 4
50169: ARRAY
50170: PUSH
50171: LD_INT 3
50173: ARRAY
50174: PPUSH
50175: LD_EXP 145
50179: PUSH
50180: LD_VAR 0 4
50184: ARRAY
50185: PUSH
50186: LD_INT 4
50188: ARRAY
50189: PPUSH
50190: CALL_OW 297
50194: PUSH
50195: LD_INT 0
50197: GREATER
50198: IFFALSE 50239
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50200: LD_VAR 0 5
50204: PPUSH
50205: LD_EXP 145
50209: PUSH
50210: LD_VAR 0 4
50214: ARRAY
50215: PUSH
50216: LD_INT 3
50218: ARRAY
50219: PPUSH
50220: LD_EXP 145
50224: PUSH
50225: LD_VAR 0 4
50229: ARRAY
50230: PUSH
50231: LD_INT 4
50233: ARRAY
50234: PPUSH
50235: CALL_OW 111
// AddComExitVehicle ( driver ) ;
50239: LD_VAR 0 5
50243: PPUSH
50244: CALL_OW 181
// if Multiplayer then
50248: LD_OWVAR 4
50252: IFFALSE 50301
// begin repeat wait ( 10 ) ;
50254: LD_INT 10
50256: PPUSH
50257: CALL_OW 67
// until not IsInUnit ( driver ) ;
50261: LD_VAR 0 5
50265: PPUSH
50266: CALL_OW 310
50270: NOT
50271: IFFALSE 50254
// if not HasTask ( driver ) then
50273: LD_VAR 0 5
50277: PPUSH
50278: CALL_OW 314
50282: NOT
50283: IFFALSE 50299
// ComEnterUnit ( driver , factory ) ;
50285: LD_VAR 0 5
50289: PPUSH
50290: LD_VAR 0 2
50294: PPUSH
50295: CALL_OW 120
// end else
50299: GO 50315
// AddComEnterUnit ( driver , factory ) ;
50301: LD_VAR 0 5
50305: PPUSH
50306: LD_VAR 0 2
50310: PPUSH
50311: CALL_OW 180
// wait ( 0 0$1 ) ;
50315: LD_INT 35
50317: PPUSH
50318: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
50322: LD_ADDR_EXP 146
50326: PUSH
50327: LD_EXP 146
50331: PUSH
50332: LD_VAR 0 5
50336: DIFF
50337: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
50338: LD_ADDR_EXP 146
50342: PUSH
50343: LD_EXP 146
50347: PUSH
50348: LD_VAR 0 1
50352: DIFF
50353: ST_TO_ADDR
// break ;
50354: GO 50507
// end ; end else
50356: GO 50505
// if GetControl ( vehicle ) = control_remote then
50358: LD_VAR 0 1
50362: PPUSH
50363: CALL_OW 263
50367: PUSH
50368: LD_INT 2
50370: EQUAL
50371: IFFALSE 50457
// begin wait ( 0 0$2 ) ;
50373: LD_INT 70
50375: PPUSH
50376: CALL_OW 67
// repeat wait ( 10 ) ;
50380: LD_INT 10
50382: PPUSH
50383: CALL_OW 67
// Connect ( vehicle ) ;
50387: LD_VAR 0 1
50391: PPUSH
50392: CALL 63605 0 1
// until IsControledBy ( vehicle ) ;
50396: LD_VAR 0 1
50400: PPUSH
50401: CALL_OW 312
50405: IFFALSE 50380
// wait ( 10 ) ;
50407: LD_INT 10
50409: PPUSH
50410: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50414: LD_VAR 0 1
50418: PPUSH
50419: LD_EXP 145
50423: PUSH
50424: LD_VAR 0 4
50428: ARRAY
50429: PUSH
50430: LD_INT 3
50432: ARRAY
50433: PPUSH
50434: LD_EXP 145
50438: PUSH
50439: LD_VAR 0 4
50443: ARRAY
50444: PUSH
50445: LD_INT 4
50447: ARRAY
50448: PPUSH
50449: CALL_OW 111
// break ;
50453: GO 50507
// end else
50455: GO 50505
// begin wait ( 0 0$3 ) ;
50457: LD_INT 105
50459: PPUSH
50460: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50464: LD_VAR 0 1
50468: PPUSH
50469: LD_EXP 145
50473: PUSH
50474: LD_VAR 0 4
50478: ARRAY
50479: PUSH
50480: LD_INT 3
50482: ARRAY
50483: PPUSH
50484: LD_EXP 145
50488: PUSH
50489: LD_VAR 0 4
50493: ARRAY
50494: PUSH
50495: LD_INT 4
50497: ARRAY
50498: PPUSH
50499: CALL_OW 111
// break ;
50503: GO 50507
// end ; end ;
50505: GO 49958
50507: POP
50508: POP
// end ;
50509: LD_VAR 0 3
50513: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50514: LD_INT 0
50516: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50517: LD_VAR 0 1
50521: PUSH
50522: LD_INT 250
50524: EQUAL
50525: PUSH
50526: LD_VAR 0 2
50530: PPUSH
50531: CALL_OW 264
50535: PUSH
50536: LD_INT 81
50538: EQUAL
50539: AND
50540: IFFALSE 50561
// MinerPlaceMine ( unit , x , y ) ;
50542: LD_VAR 0 2
50546: PPUSH
50547: LD_VAR 0 4
50551: PPUSH
50552: LD_VAR 0 5
50556: PPUSH
50557: CALL 53653 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50561: LD_VAR 0 1
50565: PUSH
50566: LD_INT 251
50568: EQUAL
50569: PUSH
50570: LD_VAR 0 2
50574: PPUSH
50575: CALL_OW 264
50579: PUSH
50580: LD_INT 81
50582: EQUAL
50583: AND
50584: IFFALSE 50605
// MinerDetonateMine ( unit , x , y ) ;
50586: LD_VAR 0 2
50590: PPUSH
50591: LD_VAR 0 4
50595: PPUSH
50596: LD_VAR 0 5
50600: PPUSH
50601: CALL 53928 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50605: LD_VAR 0 1
50609: PUSH
50610: LD_INT 252
50612: EQUAL
50613: PUSH
50614: LD_VAR 0 2
50618: PPUSH
50619: CALL_OW 264
50623: PUSH
50624: LD_INT 81
50626: EQUAL
50627: AND
50628: IFFALSE 50649
// MinerCreateMinefield ( unit , x , y ) ;
50630: LD_VAR 0 2
50634: PPUSH
50635: LD_VAR 0 4
50639: PPUSH
50640: LD_VAR 0 5
50644: PPUSH
50645: CALL 54345 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50649: LD_VAR 0 1
50653: PUSH
50654: LD_INT 253
50656: EQUAL
50657: PUSH
50658: LD_VAR 0 2
50662: PPUSH
50663: CALL_OW 257
50667: PUSH
50668: LD_INT 5
50670: EQUAL
50671: AND
50672: IFFALSE 50693
// ComBinocular ( unit , x , y ) ;
50674: LD_VAR 0 2
50678: PPUSH
50679: LD_VAR 0 4
50683: PPUSH
50684: LD_VAR 0 5
50688: PPUSH
50689: CALL 54714 0 3
// if selectedUnit then
50693: LD_VAR 0 3
50697: IFFALSE 50753
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50699: LD_VAR 0 1
50703: PUSH
50704: LD_INT 254
50706: EQUAL
50707: PUSH
50708: LD_VAR 0 2
50712: PPUSH
50713: CALL_OW 264
50717: PUSH
50718: LD_INT 99
50720: EQUAL
50721: AND
50722: PUSH
50723: LD_VAR 0 3
50727: PPUSH
50728: CALL_OW 263
50732: PUSH
50733: LD_INT 3
50735: EQUAL
50736: AND
50737: IFFALSE 50753
// HackDestroyVehicle ( unit , selectedUnit ) ;
50739: LD_VAR 0 2
50743: PPUSH
50744: LD_VAR 0 3
50748: PPUSH
50749: CALL 53017 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50753: LD_VAR 0 1
50757: PUSH
50758: LD_INT 255
50760: EQUAL
50761: PUSH
50762: LD_VAR 0 2
50766: PPUSH
50767: CALL_OW 264
50771: PUSH
50772: LD_INT 14
50774: PUSH
50775: LD_INT 53
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: IN
50782: AND
50783: PUSH
50784: LD_VAR 0 4
50788: PPUSH
50789: LD_VAR 0 5
50793: PPUSH
50794: CALL_OW 488
50798: AND
50799: IFFALSE 50823
// CutTreeXYR ( unit , x , y , 12 ) ;
50801: LD_VAR 0 2
50805: PPUSH
50806: LD_VAR 0 4
50810: PPUSH
50811: LD_VAR 0 5
50815: PPUSH
50816: LD_INT 12
50818: PPUSH
50819: CALL 51014 0 4
// if cmd = 256 then
50823: LD_VAR 0 1
50827: PUSH
50828: LD_INT 256
50830: EQUAL
50831: IFFALSE 50852
// SetFactoryWaypoint ( unit , x , y ) ;
50833: LD_VAR 0 2
50837: PPUSH
50838: LD_VAR 0 4
50842: PPUSH
50843: LD_VAR 0 5
50847: PPUSH
50848: CALL 48410 0 3
// if cmd = 257 then
50852: LD_VAR 0 1
50856: PUSH
50857: LD_INT 257
50859: EQUAL
50860: IFFALSE 50881
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50862: LD_VAR 0 2
50866: PPUSH
50867: LD_VAR 0 4
50871: PPUSH
50872: LD_VAR 0 5
50876: PPUSH
50877: CALL 48900 0 3
// if cmd = 258 then
50881: LD_VAR 0 1
50885: PUSH
50886: LD_INT 258
50888: EQUAL
50889: IFFALSE 50913
// BurnTreeXYR ( unit , x , y , 8 ) ;
50891: LD_VAR 0 2
50895: PPUSH
50896: LD_VAR 0 4
50900: PPUSH
50901: LD_VAR 0 5
50905: PPUSH
50906: LD_INT 8
50908: PPUSH
50909: CALL 51408 0 4
// end ;
50913: LD_VAR 0 6
50917: RET
// export function ComRadiation ( un ) ; var eff ; begin
50918: LD_INT 0
50920: PPUSH
50921: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 264
50931: PUSH
50932: LD_INT 91
50934: NONEQUAL
50935: IFFALSE 50939
// exit ;
50937: GO 51009
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
50939: LD_INT 68
50941: PPUSH
50942: LD_VAR 0 1
50946: PPUSH
50947: CALL_OW 255
50951: PPUSH
50952: CALL_OW 321
50956: PUSH
50957: LD_INT 2
50959: EQUAL
50960: IFFALSE 50972
// eff := 50 else
50962: LD_ADDR_VAR 0 3
50966: PUSH
50967: LD_INT 50
50969: ST_TO_ADDR
50970: GO 50980
// eff := 25 ;
50972: LD_ADDR_VAR 0 3
50976: PUSH
50977: LD_INT 25
50979: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
50980: LD_VAR 0 1
50984: PPUSH
50985: CALL_OW 250
50989: PPUSH
50990: LD_VAR 0 1
50994: PPUSH
50995: CALL_OW 251
50999: PPUSH
51000: LD_VAR 0 3
51004: PPUSH
51005: CALL_OW 495
// end ;
51009: LD_VAR 0 2
51013: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
51014: LD_INT 0
51016: PPUSH
51017: PPUSH
51018: PPUSH
51019: PPUSH
51020: PPUSH
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
51025: LD_VAR 0 1
51029: PPUSH
51030: CALL_OW 302
51034: NOT
51035: PUSH
51036: LD_VAR 0 2
51040: PPUSH
51041: LD_VAR 0 3
51045: PPUSH
51046: CALL_OW 488
51050: NOT
51051: OR
51052: PUSH
51053: LD_VAR 0 4
51057: NOT
51058: OR
51059: IFFALSE 51063
// exit ;
51061: GO 51403
// list := [ ] ;
51063: LD_ADDR_VAR 0 13
51067: PUSH
51068: EMPTY
51069: ST_TO_ADDR
// if x - r < 0 then
51070: LD_VAR 0 2
51074: PUSH
51075: LD_VAR 0 4
51079: MINUS
51080: PUSH
51081: LD_INT 0
51083: LESS
51084: IFFALSE 51096
// min_x := 0 else
51086: LD_ADDR_VAR 0 7
51090: PUSH
51091: LD_INT 0
51093: ST_TO_ADDR
51094: GO 51112
// min_x := x - r ;
51096: LD_ADDR_VAR 0 7
51100: PUSH
51101: LD_VAR 0 2
51105: PUSH
51106: LD_VAR 0 4
51110: MINUS
51111: ST_TO_ADDR
// if y - r < 0 then
51112: LD_VAR 0 3
51116: PUSH
51117: LD_VAR 0 4
51121: MINUS
51122: PUSH
51123: LD_INT 0
51125: LESS
51126: IFFALSE 51138
// min_y := 0 else
51128: LD_ADDR_VAR 0 8
51132: PUSH
51133: LD_INT 0
51135: ST_TO_ADDR
51136: GO 51154
// min_y := y - r ;
51138: LD_ADDR_VAR 0 8
51142: PUSH
51143: LD_VAR 0 3
51147: PUSH
51148: LD_VAR 0 4
51152: MINUS
51153: ST_TO_ADDR
// max_x := x + r ;
51154: LD_ADDR_VAR 0 9
51158: PUSH
51159: LD_VAR 0 2
51163: PUSH
51164: LD_VAR 0 4
51168: PLUS
51169: ST_TO_ADDR
// max_y := y + r ;
51170: LD_ADDR_VAR 0 10
51174: PUSH
51175: LD_VAR 0 3
51179: PUSH
51180: LD_VAR 0 4
51184: PLUS
51185: ST_TO_ADDR
// for _x = min_x to max_x do
51186: LD_ADDR_VAR 0 11
51190: PUSH
51191: DOUBLE
51192: LD_VAR 0 7
51196: DEC
51197: ST_TO_ADDR
51198: LD_VAR 0 9
51202: PUSH
51203: FOR_TO
51204: IFFALSE 51321
// for _y = min_y to max_y do
51206: LD_ADDR_VAR 0 12
51210: PUSH
51211: DOUBLE
51212: LD_VAR 0 8
51216: DEC
51217: ST_TO_ADDR
51218: LD_VAR 0 10
51222: PUSH
51223: FOR_TO
51224: IFFALSE 51317
// begin if not ValidHex ( _x , _y ) then
51226: LD_VAR 0 11
51230: PPUSH
51231: LD_VAR 0 12
51235: PPUSH
51236: CALL_OW 488
51240: NOT
51241: IFFALSE 51245
// continue ;
51243: GO 51223
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51245: LD_VAR 0 11
51249: PPUSH
51250: LD_VAR 0 12
51254: PPUSH
51255: CALL_OW 351
51259: PUSH
51260: LD_VAR 0 11
51264: PPUSH
51265: LD_VAR 0 12
51269: PPUSH
51270: CALL_OW 554
51274: AND
51275: IFFALSE 51315
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51277: LD_ADDR_VAR 0 13
51281: PUSH
51282: LD_VAR 0 13
51286: PPUSH
51287: LD_VAR 0 13
51291: PUSH
51292: LD_INT 1
51294: PLUS
51295: PPUSH
51296: LD_VAR 0 11
51300: PUSH
51301: LD_VAR 0 12
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PPUSH
51310: CALL_OW 2
51314: ST_TO_ADDR
// end ;
51315: GO 51223
51317: POP
51318: POP
51319: GO 51203
51321: POP
51322: POP
// if not list then
51323: LD_VAR 0 13
51327: NOT
51328: IFFALSE 51332
// exit ;
51330: GO 51403
// for i in list do
51332: LD_ADDR_VAR 0 6
51336: PUSH
51337: LD_VAR 0 13
51341: PUSH
51342: FOR_IN
51343: IFFALSE 51401
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
51345: LD_VAR 0 1
51349: PPUSH
51350: LD_STRING M
51352: PUSH
51353: LD_VAR 0 6
51357: PUSH
51358: LD_INT 1
51360: ARRAY
51361: PUSH
51362: LD_VAR 0 6
51366: PUSH
51367: LD_INT 2
51369: ARRAY
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: PPUSH
51395: CALL_OW 447
51399: GO 51342
51401: POP
51402: POP
// end ;
51403: LD_VAR 0 5
51407: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
51408: LD_INT 0
51410: PPUSH
51411: PPUSH
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
51419: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
51420: LD_VAR 0 1
51424: PPUSH
51425: CALL_OW 302
51429: NOT
51430: PUSH
51431: LD_VAR 0 2
51435: PPUSH
51436: LD_VAR 0 3
51440: PPUSH
51441: CALL_OW 488
51445: NOT
51446: OR
51447: PUSH
51448: LD_VAR 0 4
51452: NOT
51453: OR
51454: IFFALSE 51458
// exit ;
51456: GO 51971
// list := [ ] ;
51458: LD_ADDR_VAR 0 13
51462: PUSH
51463: EMPTY
51464: ST_TO_ADDR
// if x - r < 0 then
51465: LD_VAR 0 2
51469: PUSH
51470: LD_VAR 0 4
51474: MINUS
51475: PUSH
51476: LD_INT 0
51478: LESS
51479: IFFALSE 51491
// min_x := 0 else
51481: LD_ADDR_VAR 0 7
51485: PUSH
51486: LD_INT 0
51488: ST_TO_ADDR
51489: GO 51507
// min_x := x - r ;
51491: LD_ADDR_VAR 0 7
51495: PUSH
51496: LD_VAR 0 2
51500: PUSH
51501: LD_VAR 0 4
51505: MINUS
51506: ST_TO_ADDR
// if y - r < 0 then
51507: LD_VAR 0 3
51511: PUSH
51512: LD_VAR 0 4
51516: MINUS
51517: PUSH
51518: LD_INT 0
51520: LESS
51521: IFFALSE 51533
// min_y := 0 else
51523: LD_ADDR_VAR 0 8
51527: PUSH
51528: LD_INT 0
51530: ST_TO_ADDR
51531: GO 51549
// min_y := y - r ;
51533: LD_ADDR_VAR 0 8
51537: PUSH
51538: LD_VAR 0 3
51542: PUSH
51543: LD_VAR 0 4
51547: MINUS
51548: ST_TO_ADDR
// max_x := x + r ;
51549: LD_ADDR_VAR 0 9
51553: PUSH
51554: LD_VAR 0 2
51558: PUSH
51559: LD_VAR 0 4
51563: PLUS
51564: ST_TO_ADDR
// max_y := y + r ;
51565: LD_ADDR_VAR 0 10
51569: PUSH
51570: LD_VAR 0 3
51574: PUSH
51575: LD_VAR 0 4
51579: PLUS
51580: ST_TO_ADDR
// for _x = min_x to max_x do
51581: LD_ADDR_VAR 0 11
51585: PUSH
51586: DOUBLE
51587: LD_VAR 0 7
51591: DEC
51592: ST_TO_ADDR
51593: LD_VAR 0 9
51597: PUSH
51598: FOR_TO
51599: IFFALSE 51716
// for _y = min_y to max_y do
51601: LD_ADDR_VAR 0 12
51605: PUSH
51606: DOUBLE
51607: LD_VAR 0 8
51611: DEC
51612: ST_TO_ADDR
51613: LD_VAR 0 10
51617: PUSH
51618: FOR_TO
51619: IFFALSE 51712
// begin if not ValidHex ( _x , _y ) then
51621: LD_VAR 0 11
51625: PPUSH
51626: LD_VAR 0 12
51630: PPUSH
51631: CALL_OW 488
51635: NOT
51636: IFFALSE 51640
// continue ;
51638: GO 51618
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51640: LD_VAR 0 11
51644: PPUSH
51645: LD_VAR 0 12
51649: PPUSH
51650: CALL_OW 351
51654: PUSH
51655: LD_VAR 0 11
51659: PPUSH
51660: LD_VAR 0 12
51664: PPUSH
51665: CALL_OW 554
51669: AND
51670: IFFALSE 51710
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51672: LD_ADDR_VAR 0 13
51676: PUSH
51677: LD_VAR 0 13
51681: PPUSH
51682: LD_VAR 0 13
51686: PUSH
51687: LD_INT 1
51689: PLUS
51690: PPUSH
51691: LD_VAR 0 11
51695: PUSH
51696: LD_VAR 0 12
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PPUSH
51705: CALL_OW 2
51709: ST_TO_ADDR
// end ;
51710: GO 51618
51712: POP
51713: POP
51714: GO 51598
51716: POP
51717: POP
// if not list then
51718: LD_VAR 0 13
51722: NOT
51723: IFFALSE 51727
// exit ;
51725: GO 51971
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51727: LD_ADDR_VAR 0 13
51731: PUSH
51732: LD_VAR 0 1
51736: PPUSH
51737: LD_VAR 0 13
51741: PPUSH
51742: LD_INT 1
51744: PPUSH
51745: LD_INT 1
51747: PPUSH
51748: CALL 60747 0 4
51752: ST_TO_ADDR
// ComStop ( flame ) ;
51753: LD_VAR 0 1
51757: PPUSH
51758: CALL_OW 141
// for i in list do
51762: LD_ADDR_VAR 0 6
51766: PUSH
51767: LD_VAR 0 13
51771: PUSH
51772: FOR_IN
51773: IFFALSE 51804
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51775: LD_VAR 0 1
51779: PPUSH
51780: LD_VAR 0 6
51784: PUSH
51785: LD_INT 1
51787: ARRAY
51788: PPUSH
51789: LD_VAR 0 6
51793: PUSH
51794: LD_INT 2
51796: ARRAY
51797: PPUSH
51798: CALL_OW 176
51802: GO 51772
51804: POP
51805: POP
// repeat wait ( 0 0$1 ) ;
51806: LD_INT 35
51808: PPUSH
51809: CALL_OW 67
// task := GetTaskList ( flame ) ;
51813: LD_ADDR_VAR 0 14
51817: PUSH
51818: LD_VAR 0 1
51822: PPUSH
51823: CALL_OW 437
51827: ST_TO_ADDR
// if not task then
51828: LD_VAR 0 14
51832: NOT
51833: IFFALSE 51837
// exit ;
51835: GO 51971
// if task [ 1 ] [ 1 ] <> | then
51837: LD_VAR 0 14
51841: PUSH
51842: LD_INT 1
51844: ARRAY
51845: PUSH
51846: LD_INT 1
51848: ARRAY
51849: PUSH
51850: LD_STRING |
51852: NONEQUAL
51853: IFFALSE 51857
// exit ;
51855: GO 51971
// _x := task [ 1 ] [ 2 ] ;
51857: LD_ADDR_VAR 0 11
51861: PUSH
51862: LD_VAR 0 14
51866: PUSH
51867: LD_INT 1
51869: ARRAY
51870: PUSH
51871: LD_INT 2
51873: ARRAY
51874: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
51875: LD_ADDR_VAR 0 12
51879: PUSH
51880: LD_VAR 0 14
51884: PUSH
51885: LD_INT 1
51887: ARRAY
51888: PUSH
51889: LD_INT 3
51891: ARRAY
51892: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
51893: LD_VAR 0 11
51897: PPUSH
51898: LD_VAR 0 12
51902: PPUSH
51903: CALL_OW 351
51907: NOT
51908: PUSH
51909: LD_VAR 0 11
51913: PPUSH
51914: LD_VAR 0 12
51918: PPUSH
51919: CALL_OW 554
51923: NOT
51924: OR
51925: IFFALSE 51959
// begin task := Delete ( task , 1 ) ;
51927: LD_ADDR_VAR 0 14
51931: PUSH
51932: LD_VAR 0 14
51936: PPUSH
51937: LD_INT 1
51939: PPUSH
51940: CALL_OW 3
51944: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
51945: LD_VAR 0 1
51949: PPUSH
51950: LD_VAR 0 14
51954: PPUSH
51955: CALL_OW 446
// end ; until not HasTask ( flame ) ;
51959: LD_VAR 0 1
51963: PPUSH
51964: CALL_OW 314
51968: NOT
51969: IFFALSE 51806
// end ;
51971: LD_VAR 0 5
51975: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51976: LD_EXP 149
51980: NOT
51981: IFFALSE 52031
51983: GO 51985
51985: DISABLE
// begin initHack := true ;
51986: LD_ADDR_EXP 149
51990: PUSH
51991: LD_INT 1
51993: ST_TO_ADDR
// hackTanks := [ ] ;
51994: LD_ADDR_EXP 150
51998: PUSH
51999: EMPTY
52000: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52001: LD_ADDR_EXP 151
52005: PUSH
52006: EMPTY
52007: ST_TO_ADDR
// hackLimit := 3 ;
52008: LD_ADDR_EXP 152
52012: PUSH
52013: LD_INT 3
52015: ST_TO_ADDR
// hackDist := 12 ;
52016: LD_ADDR_EXP 153
52020: PUSH
52021: LD_INT 12
52023: ST_TO_ADDR
// hackCounter := [ ] ;
52024: LD_ADDR_EXP 154
52028: PUSH
52029: EMPTY
52030: ST_TO_ADDR
// end ;
52031: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52032: LD_EXP 149
52036: PUSH
52037: LD_INT 34
52039: PUSH
52040: LD_INT 99
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PPUSH
52047: CALL_OW 69
52051: AND
52052: IFFALSE 52305
52054: GO 52056
52056: DISABLE
52057: LD_INT 0
52059: PPUSH
52060: PPUSH
// begin enable ;
52061: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52062: LD_ADDR_VAR 0 1
52066: PUSH
52067: LD_INT 34
52069: PUSH
52070: LD_INT 99
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PPUSH
52077: CALL_OW 69
52081: PUSH
52082: FOR_IN
52083: IFFALSE 52303
// begin if not i in hackTanks then
52085: LD_VAR 0 1
52089: PUSH
52090: LD_EXP 150
52094: IN
52095: NOT
52096: IFFALSE 52179
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52098: LD_ADDR_EXP 150
52102: PUSH
52103: LD_EXP 150
52107: PPUSH
52108: LD_EXP 150
52112: PUSH
52113: LD_INT 1
52115: PLUS
52116: PPUSH
52117: LD_VAR 0 1
52121: PPUSH
52122: CALL_OW 1
52126: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52127: LD_ADDR_EXP 151
52131: PUSH
52132: LD_EXP 151
52136: PPUSH
52137: LD_EXP 151
52141: PUSH
52142: LD_INT 1
52144: PLUS
52145: PPUSH
52146: EMPTY
52147: PPUSH
52148: CALL_OW 1
52152: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52153: LD_ADDR_EXP 154
52157: PUSH
52158: LD_EXP 154
52162: PPUSH
52163: LD_EXP 154
52167: PUSH
52168: LD_INT 1
52170: PLUS
52171: PPUSH
52172: EMPTY
52173: PPUSH
52174: CALL_OW 1
52178: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52179: LD_VAR 0 1
52183: PPUSH
52184: CALL_OW 302
52188: NOT
52189: IFFALSE 52202
// begin HackUnlinkAll ( i ) ;
52191: LD_VAR 0 1
52195: PPUSH
52196: CALL 52308 0 1
// continue ;
52200: GO 52082
// end ; HackCheckCapturedStatus ( i ) ;
52202: LD_VAR 0 1
52206: PPUSH
52207: CALL 52751 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52211: LD_ADDR_VAR 0 2
52215: PUSH
52216: LD_INT 81
52218: PUSH
52219: LD_VAR 0 1
52223: PPUSH
52224: CALL_OW 255
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 33
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 91
52245: PUSH
52246: LD_VAR 0 1
52250: PUSH
52251: LD_EXP 153
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 50
52263: PUSH
52264: EMPTY
52265: LIST
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: PPUSH
52273: CALL_OW 69
52277: ST_TO_ADDR
// if not tmp then
52278: LD_VAR 0 2
52282: NOT
52283: IFFALSE 52287
// continue ;
52285: GO 52082
// HackLink ( i , tmp ) ;
52287: LD_VAR 0 1
52291: PPUSH
52292: LD_VAR 0 2
52296: PPUSH
52297: CALL 52444 0 2
// end ;
52301: GO 52082
52303: POP
52304: POP
// end ;
52305: PPOPN 2
52307: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
52308: LD_INT 0
52310: PPUSH
52311: PPUSH
52312: PPUSH
// if not hack in hackTanks then
52313: LD_VAR 0 1
52317: PUSH
52318: LD_EXP 150
52322: IN
52323: NOT
52324: IFFALSE 52328
// exit ;
52326: GO 52439
// index := GetElementIndex ( hackTanks , hack ) ;
52328: LD_ADDR_VAR 0 4
52332: PUSH
52333: LD_EXP 150
52337: PPUSH
52338: LD_VAR 0 1
52342: PPUSH
52343: CALL 60044 0 2
52347: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
52348: LD_EXP 151
52352: PUSH
52353: LD_VAR 0 4
52357: ARRAY
52358: IFFALSE 52439
// begin for i in hackTanksCaptured [ index ] do
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_EXP 151
52369: PUSH
52370: LD_VAR 0 4
52374: ARRAY
52375: PUSH
52376: FOR_IN
52377: IFFALSE 52403
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
52379: LD_VAR 0 3
52383: PUSH
52384: LD_INT 1
52386: ARRAY
52387: PPUSH
52388: LD_VAR 0 3
52392: PUSH
52393: LD_INT 2
52395: ARRAY
52396: PPUSH
52397: CALL_OW 235
52401: GO 52376
52403: POP
52404: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
52405: LD_ADDR_EXP 151
52409: PUSH
52410: LD_EXP 151
52414: PPUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: EMPTY
52421: PPUSH
52422: CALL_OW 1
52426: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
52427: LD_VAR 0 1
52431: PPUSH
52432: LD_INT 0
52434: PPUSH
52435: CALL_OW 505
// end ; end ;
52439: LD_VAR 0 2
52443: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
52444: LD_INT 0
52446: PPUSH
52447: PPUSH
52448: PPUSH
// if not hack in hackTanks or not vehicles then
52449: LD_VAR 0 1
52453: PUSH
52454: LD_EXP 150
52458: IN
52459: NOT
52460: PUSH
52461: LD_VAR 0 2
52465: NOT
52466: OR
52467: IFFALSE 52471
// exit ;
52469: GO 52746
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
52471: LD_ADDR_VAR 0 2
52475: PUSH
52476: LD_VAR 0 1
52480: PPUSH
52481: LD_VAR 0 2
52485: PPUSH
52486: LD_INT 1
52488: PPUSH
52489: LD_INT 1
52491: PPUSH
52492: CALL 60694 0 4
52496: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
52497: LD_ADDR_VAR 0 5
52501: PUSH
52502: LD_EXP 150
52506: PPUSH
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL 60044 0 2
52516: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
52517: LD_EXP 151
52521: PUSH
52522: LD_VAR 0 5
52526: ARRAY
52527: PUSH
52528: LD_EXP 152
52532: LESS
52533: IFFALSE 52722
// begin for i := 1 to vehicles do
52535: LD_ADDR_VAR 0 4
52539: PUSH
52540: DOUBLE
52541: LD_INT 1
52543: DEC
52544: ST_TO_ADDR
52545: LD_VAR 0 2
52549: PUSH
52550: FOR_TO
52551: IFFALSE 52720
// begin if hackTanksCaptured [ index ] = hackLimit then
52553: LD_EXP 151
52557: PUSH
52558: LD_VAR 0 5
52562: ARRAY
52563: PUSH
52564: LD_EXP 152
52568: EQUAL
52569: IFFALSE 52573
// break ;
52571: GO 52720
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
52573: LD_ADDR_EXP 154
52577: PUSH
52578: LD_EXP 154
52582: PPUSH
52583: LD_VAR 0 5
52587: PPUSH
52588: LD_EXP 154
52592: PUSH
52593: LD_VAR 0 5
52597: ARRAY
52598: PUSH
52599: LD_INT 1
52601: PLUS
52602: PPUSH
52603: CALL_OW 1
52607: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
52608: LD_ADDR_EXP 151
52612: PUSH
52613: LD_EXP 151
52617: PPUSH
52618: LD_VAR 0 5
52622: PUSH
52623: LD_EXP 151
52627: PUSH
52628: LD_VAR 0 5
52632: ARRAY
52633: PUSH
52634: LD_INT 1
52636: PLUS
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PPUSH
52642: LD_VAR 0 2
52646: PUSH
52647: LD_VAR 0 4
52651: ARRAY
52652: PUSH
52653: LD_VAR 0 2
52657: PUSH
52658: LD_VAR 0 4
52662: ARRAY
52663: PPUSH
52664: CALL_OW 255
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PPUSH
52673: CALL 60259 0 3
52677: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52678: LD_VAR 0 2
52682: PUSH
52683: LD_VAR 0 4
52687: ARRAY
52688: PPUSH
52689: LD_VAR 0 1
52693: PPUSH
52694: CALL_OW 255
52698: PPUSH
52699: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52703: LD_VAR 0 2
52707: PUSH
52708: LD_VAR 0 4
52712: ARRAY
52713: PPUSH
52714: CALL_OW 141
// end ;
52718: GO 52550
52720: POP
52721: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52722: LD_VAR 0 1
52726: PPUSH
52727: LD_EXP 151
52731: PUSH
52732: LD_VAR 0 5
52736: ARRAY
52737: PUSH
52738: LD_INT 0
52740: PLUS
52741: PPUSH
52742: CALL_OW 505
// end ;
52746: LD_VAR 0 3
52750: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52751: LD_INT 0
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
// if not hack in hackTanks then
52757: LD_VAR 0 1
52761: PUSH
52762: LD_EXP 150
52766: IN
52767: NOT
52768: IFFALSE 52772
// exit ;
52770: GO 53012
// index := GetElementIndex ( hackTanks , hack ) ;
52772: LD_ADDR_VAR 0 4
52776: PUSH
52777: LD_EXP 150
52781: PPUSH
52782: LD_VAR 0 1
52786: PPUSH
52787: CALL 60044 0 2
52791: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52792: LD_ADDR_VAR 0 3
52796: PUSH
52797: DOUBLE
52798: LD_EXP 151
52802: PUSH
52803: LD_VAR 0 4
52807: ARRAY
52808: INC
52809: ST_TO_ADDR
52810: LD_INT 1
52812: PUSH
52813: FOR_DOWNTO
52814: IFFALSE 52986
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52816: LD_ADDR_VAR 0 5
52820: PUSH
52821: LD_EXP 151
52825: PUSH
52826: LD_VAR 0 4
52830: ARRAY
52831: PUSH
52832: LD_VAR 0 3
52836: ARRAY
52837: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52838: LD_VAR 0 5
52842: PUSH
52843: LD_INT 1
52845: ARRAY
52846: PPUSH
52847: CALL_OW 302
52851: NOT
52852: PUSH
52853: LD_VAR 0 5
52857: PUSH
52858: LD_INT 1
52860: ARRAY
52861: PPUSH
52862: CALL_OW 255
52866: PUSH
52867: LD_VAR 0 1
52871: PPUSH
52872: CALL_OW 255
52876: NONEQUAL
52877: OR
52878: IFFALSE 52984
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52880: LD_VAR 0 5
52884: PUSH
52885: LD_INT 1
52887: ARRAY
52888: PPUSH
52889: CALL_OW 305
52893: PUSH
52894: LD_VAR 0 5
52898: PUSH
52899: LD_INT 1
52901: ARRAY
52902: PPUSH
52903: CALL_OW 255
52907: PUSH
52908: LD_VAR 0 1
52912: PPUSH
52913: CALL_OW 255
52917: EQUAL
52918: AND
52919: IFFALSE 52943
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52921: LD_VAR 0 5
52925: PUSH
52926: LD_INT 1
52928: ARRAY
52929: PPUSH
52930: LD_VAR 0 5
52934: PUSH
52935: LD_INT 2
52937: ARRAY
52938: PPUSH
52939: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52943: LD_ADDR_EXP 151
52947: PUSH
52948: LD_EXP 151
52952: PPUSH
52953: LD_VAR 0 4
52957: PPUSH
52958: LD_EXP 151
52962: PUSH
52963: LD_VAR 0 4
52967: ARRAY
52968: PPUSH
52969: LD_VAR 0 3
52973: PPUSH
52974: CALL_OW 3
52978: PPUSH
52979: CALL_OW 1
52983: ST_TO_ADDR
// end ; end ;
52984: GO 52813
52986: POP
52987: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52988: LD_VAR 0 1
52992: PPUSH
52993: LD_EXP 151
52997: PUSH
52998: LD_VAR 0 4
53002: ARRAY
53003: PUSH
53004: LD_INT 0
53006: PLUS
53007: PPUSH
53008: CALL_OW 505
// end ;
53012: LD_VAR 0 2
53016: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53017: LD_INT 0
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
// if not hack in hackTanks then
53023: LD_VAR 0 1
53027: PUSH
53028: LD_EXP 150
53032: IN
53033: NOT
53034: IFFALSE 53038
// exit ;
53036: GO 53123
// index := GetElementIndex ( hackTanks , hack ) ;
53038: LD_ADDR_VAR 0 5
53042: PUSH
53043: LD_EXP 150
53047: PPUSH
53048: LD_VAR 0 1
53052: PPUSH
53053: CALL 60044 0 2
53057: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53058: LD_ADDR_VAR 0 4
53062: PUSH
53063: DOUBLE
53064: LD_INT 1
53066: DEC
53067: ST_TO_ADDR
53068: LD_EXP 151
53072: PUSH
53073: LD_VAR 0 5
53077: ARRAY
53078: PUSH
53079: FOR_TO
53080: IFFALSE 53121
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53082: LD_EXP 151
53086: PUSH
53087: LD_VAR 0 5
53091: ARRAY
53092: PUSH
53093: LD_VAR 0 4
53097: ARRAY
53098: PUSH
53099: LD_INT 1
53101: ARRAY
53102: PUSH
53103: LD_VAR 0 2
53107: EQUAL
53108: IFFALSE 53119
// KillUnit ( vehicle ) ;
53110: LD_VAR 0 2
53114: PPUSH
53115: CALL_OW 66
53119: GO 53079
53121: POP
53122: POP
// end ;
53123: LD_VAR 0 3
53127: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53128: LD_EXP 155
53132: NOT
53133: IFFALSE 53168
53135: GO 53137
53137: DISABLE
// begin initMiner := true ;
53138: LD_ADDR_EXP 155
53142: PUSH
53143: LD_INT 1
53145: ST_TO_ADDR
// minersList := [ ] ;
53146: LD_ADDR_EXP 156
53150: PUSH
53151: EMPTY
53152: ST_TO_ADDR
// minerMinesList := [ ] ;
53153: LD_ADDR_EXP 157
53157: PUSH
53158: EMPTY
53159: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53160: LD_ADDR_EXP 158
53164: PUSH
53165: LD_INT 5
53167: ST_TO_ADDR
// end ;
53168: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53169: LD_EXP 155
53173: PUSH
53174: LD_INT 34
53176: PUSH
53177: LD_INT 81
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PPUSH
53184: CALL_OW 69
53188: AND
53189: IFFALSE 53650
53191: GO 53193
53193: DISABLE
53194: LD_INT 0
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
// begin enable ;
53200: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53201: LD_ADDR_VAR 0 1
53205: PUSH
53206: LD_INT 34
53208: PUSH
53209: LD_INT 81
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PPUSH
53216: CALL_OW 69
53220: PUSH
53221: FOR_IN
53222: IFFALSE 53294
// begin if not i in minersList then
53224: LD_VAR 0 1
53228: PUSH
53229: LD_EXP 156
53233: IN
53234: NOT
53235: IFFALSE 53292
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53237: LD_ADDR_EXP 156
53241: PUSH
53242: LD_EXP 156
53246: PPUSH
53247: LD_EXP 156
53251: PUSH
53252: LD_INT 1
53254: PLUS
53255: PPUSH
53256: LD_VAR 0 1
53260: PPUSH
53261: CALL_OW 1
53265: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53266: LD_ADDR_EXP 157
53270: PUSH
53271: LD_EXP 157
53275: PPUSH
53276: LD_EXP 157
53280: PUSH
53281: LD_INT 1
53283: PLUS
53284: PPUSH
53285: EMPTY
53286: PPUSH
53287: CALL_OW 1
53291: ST_TO_ADDR
// end end ;
53292: GO 53221
53294: POP
53295: POP
// for i := minerMinesList downto 1 do
53296: LD_ADDR_VAR 0 1
53300: PUSH
53301: DOUBLE
53302: LD_EXP 157
53306: INC
53307: ST_TO_ADDR
53308: LD_INT 1
53310: PUSH
53311: FOR_DOWNTO
53312: IFFALSE 53648
// begin if IsLive ( minersList [ i ] ) then
53314: LD_EXP 156
53318: PUSH
53319: LD_VAR 0 1
53323: ARRAY
53324: PPUSH
53325: CALL_OW 300
53329: IFFALSE 53357
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
53331: LD_EXP 156
53335: PUSH
53336: LD_VAR 0 1
53340: ARRAY
53341: PPUSH
53342: LD_EXP 157
53346: PUSH
53347: LD_VAR 0 1
53351: ARRAY
53352: PPUSH
53353: CALL_OW 505
// if not minerMinesList [ i ] then
53357: LD_EXP 157
53361: PUSH
53362: LD_VAR 0 1
53366: ARRAY
53367: NOT
53368: IFFALSE 53372
// continue ;
53370: GO 53311
// for j := minerMinesList [ i ] downto 1 do
53372: LD_ADDR_VAR 0 2
53376: PUSH
53377: DOUBLE
53378: LD_EXP 157
53382: PUSH
53383: LD_VAR 0 1
53387: ARRAY
53388: INC
53389: ST_TO_ADDR
53390: LD_INT 1
53392: PUSH
53393: FOR_DOWNTO
53394: IFFALSE 53644
// begin side := GetSide ( minersList [ i ] ) ;
53396: LD_ADDR_VAR 0 3
53400: PUSH
53401: LD_EXP 156
53405: PUSH
53406: LD_VAR 0 1
53410: ARRAY
53411: PPUSH
53412: CALL_OW 255
53416: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53417: LD_ADDR_VAR 0 4
53421: PUSH
53422: LD_EXP 157
53426: PUSH
53427: LD_VAR 0 1
53431: ARRAY
53432: PUSH
53433: LD_VAR 0 2
53437: ARRAY
53438: PUSH
53439: LD_INT 1
53441: ARRAY
53442: PPUSH
53443: LD_EXP 157
53447: PUSH
53448: LD_VAR 0 1
53452: ARRAY
53453: PUSH
53454: LD_VAR 0 2
53458: ARRAY
53459: PUSH
53460: LD_INT 2
53462: ARRAY
53463: PPUSH
53464: CALL_OW 428
53468: ST_TO_ADDR
// if not tmp then
53469: LD_VAR 0 4
53473: NOT
53474: IFFALSE 53478
// continue ;
53476: GO 53393
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
53478: LD_VAR 0 4
53482: PUSH
53483: LD_INT 81
53485: PUSH
53486: LD_VAR 0 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PPUSH
53495: CALL_OW 69
53499: IN
53500: PUSH
53501: LD_EXP 157
53505: PUSH
53506: LD_VAR 0 1
53510: ARRAY
53511: PUSH
53512: LD_VAR 0 2
53516: ARRAY
53517: PUSH
53518: LD_INT 1
53520: ARRAY
53521: PPUSH
53522: LD_EXP 157
53526: PUSH
53527: LD_VAR 0 1
53531: ARRAY
53532: PUSH
53533: LD_VAR 0 2
53537: ARRAY
53538: PUSH
53539: LD_INT 2
53541: ARRAY
53542: PPUSH
53543: CALL_OW 458
53547: AND
53548: IFFALSE 53642
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
53550: LD_EXP 157
53554: PUSH
53555: LD_VAR 0 1
53559: ARRAY
53560: PUSH
53561: LD_VAR 0 2
53565: ARRAY
53566: PUSH
53567: LD_INT 1
53569: ARRAY
53570: PPUSH
53571: LD_EXP 157
53575: PUSH
53576: LD_VAR 0 1
53580: ARRAY
53581: PUSH
53582: LD_VAR 0 2
53586: ARRAY
53587: PUSH
53588: LD_INT 2
53590: ARRAY
53591: PPUSH
53592: LD_VAR 0 3
53596: PPUSH
53597: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
53601: LD_ADDR_EXP 157
53605: PUSH
53606: LD_EXP 157
53610: PPUSH
53611: LD_VAR 0 1
53615: PPUSH
53616: LD_EXP 157
53620: PUSH
53621: LD_VAR 0 1
53625: ARRAY
53626: PPUSH
53627: LD_VAR 0 2
53631: PPUSH
53632: CALL_OW 3
53636: PPUSH
53637: CALL_OW 1
53641: ST_TO_ADDR
// end ; end ;
53642: GO 53393
53644: POP
53645: POP
// end ;
53646: GO 53311
53648: POP
53649: POP
// end ;
53650: PPOPN 4
53652: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53653: LD_INT 0
53655: PPUSH
53656: PPUSH
// result := false ;
53657: LD_ADDR_VAR 0 4
53661: PUSH
53662: LD_INT 0
53664: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53665: LD_VAR 0 1
53669: PPUSH
53670: CALL_OW 264
53674: PUSH
53675: LD_INT 81
53677: EQUAL
53678: NOT
53679: IFFALSE 53683
// exit ;
53681: GO 53923
// index := GetElementIndex ( minersList , unit ) ;
53683: LD_ADDR_VAR 0 5
53687: PUSH
53688: LD_EXP 156
53692: PPUSH
53693: LD_VAR 0 1
53697: PPUSH
53698: CALL 60044 0 2
53702: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53703: LD_EXP 157
53707: PUSH
53708: LD_VAR 0 5
53712: ARRAY
53713: PUSH
53714: LD_EXP 158
53718: GREATEREQUAL
53719: IFFALSE 53723
// exit ;
53721: GO 53923
// ComMoveXY ( unit , x , y ) ;
53723: LD_VAR 0 1
53727: PPUSH
53728: LD_VAR 0 2
53732: PPUSH
53733: LD_VAR 0 3
53737: PPUSH
53738: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53742: LD_INT 35
53744: PPUSH
53745: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53749: LD_VAR 0 1
53753: PPUSH
53754: LD_VAR 0 2
53758: PPUSH
53759: LD_VAR 0 3
53763: PPUSH
53764: CALL 91805 0 3
53768: NOT
53769: PUSH
53770: LD_VAR 0 1
53774: PPUSH
53775: CALL_OW 314
53779: AND
53780: IFFALSE 53784
// exit ;
53782: GO 53923
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53784: LD_VAR 0 2
53788: PPUSH
53789: LD_VAR 0 3
53793: PPUSH
53794: CALL_OW 428
53798: PUSH
53799: LD_VAR 0 1
53803: EQUAL
53804: PUSH
53805: LD_VAR 0 1
53809: PPUSH
53810: CALL_OW 314
53814: NOT
53815: AND
53816: IFFALSE 53742
// PlaySoundXY ( x , y , PlantMine ) ;
53818: LD_VAR 0 2
53822: PPUSH
53823: LD_VAR 0 3
53827: PPUSH
53828: LD_STRING PlantMine
53830: PPUSH
53831: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53835: LD_VAR 0 2
53839: PPUSH
53840: LD_VAR 0 3
53844: PPUSH
53845: LD_VAR 0 1
53849: PPUSH
53850: CALL_OW 255
53854: PPUSH
53855: LD_INT 0
53857: PPUSH
53858: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53862: LD_ADDR_EXP 157
53866: PUSH
53867: LD_EXP 157
53871: PPUSH
53872: LD_VAR 0 5
53876: PUSH
53877: LD_EXP 157
53881: PUSH
53882: LD_VAR 0 5
53886: ARRAY
53887: PUSH
53888: LD_INT 1
53890: PLUS
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PPUSH
53896: LD_VAR 0 2
53900: PUSH
53901: LD_VAR 0 3
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PPUSH
53910: CALL 60259 0 3
53914: ST_TO_ADDR
// result := true ;
53915: LD_ADDR_VAR 0 4
53919: PUSH
53920: LD_INT 1
53922: ST_TO_ADDR
// end ;
53923: LD_VAR 0 4
53927: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53928: LD_INT 0
53930: PPUSH
53931: PPUSH
53932: PPUSH
// if not unit in minersList then
53933: LD_VAR 0 1
53937: PUSH
53938: LD_EXP 156
53942: IN
53943: NOT
53944: IFFALSE 53948
// exit ;
53946: GO 54340
// index := GetElementIndex ( minersList , unit ) ;
53948: LD_ADDR_VAR 0 6
53952: PUSH
53953: LD_EXP 156
53957: PPUSH
53958: LD_VAR 0 1
53962: PPUSH
53963: CALL 60044 0 2
53967: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53968: LD_ADDR_VAR 0 5
53972: PUSH
53973: DOUBLE
53974: LD_EXP 157
53978: PUSH
53979: LD_VAR 0 6
53983: ARRAY
53984: INC
53985: ST_TO_ADDR
53986: LD_INT 1
53988: PUSH
53989: FOR_DOWNTO
53990: IFFALSE 54151
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53992: LD_EXP 157
53996: PUSH
53997: LD_VAR 0 6
54001: ARRAY
54002: PUSH
54003: LD_VAR 0 5
54007: ARRAY
54008: PUSH
54009: LD_INT 1
54011: ARRAY
54012: PUSH
54013: LD_VAR 0 2
54017: EQUAL
54018: PUSH
54019: LD_EXP 157
54023: PUSH
54024: LD_VAR 0 6
54028: ARRAY
54029: PUSH
54030: LD_VAR 0 5
54034: ARRAY
54035: PUSH
54036: LD_INT 2
54038: ARRAY
54039: PUSH
54040: LD_VAR 0 3
54044: EQUAL
54045: AND
54046: IFFALSE 54149
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54048: LD_EXP 157
54052: PUSH
54053: LD_VAR 0 6
54057: ARRAY
54058: PUSH
54059: LD_VAR 0 5
54063: ARRAY
54064: PUSH
54065: LD_INT 1
54067: ARRAY
54068: PPUSH
54069: LD_EXP 157
54073: PUSH
54074: LD_VAR 0 6
54078: ARRAY
54079: PUSH
54080: LD_VAR 0 5
54084: ARRAY
54085: PUSH
54086: LD_INT 2
54088: ARRAY
54089: PPUSH
54090: LD_VAR 0 1
54094: PPUSH
54095: CALL_OW 255
54099: PPUSH
54100: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54104: LD_ADDR_EXP 157
54108: PUSH
54109: LD_EXP 157
54113: PPUSH
54114: LD_VAR 0 6
54118: PPUSH
54119: LD_EXP 157
54123: PUSH
54124: LD_VAR 0 6
54128: ARRAY
54129: PPUSH
54130: LD_VAR 0 5
54134: PPUSH
54135: CALL_OW 3
54139: PPUSH
54140: CALL_OW 1
54144: ST_TO_ADDR
// exit ;
54145: POP
54146: POP
54147: GO 54340
// end ; end ;
54149: GO 53989
54151: POP
54152: POP
// for i := minerMinesList [ index ] downto 1 do
54153: LD_ADDR_VAR 0 5
54157: PUSH
54158: DOUBLE
54159: LD_EXP 157
54163: PUSH
54164: LD_VAR 0 6
54168: ARRAY
54169: INC
54170: ST_TO_ADDR
54171: LD_INT 1
54173: PUSH
54174: FOR_DOWNTO
54175: IFFALSE 54338
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54177: LD_EXP 157
54181: PUSH
54182: LD_VAR 0 6
54186: ARRAY
54187: PUSH
54188: LD_VAR 0 5
54192: ARRAY
54193: PUSH
54194: LD_INT 1
54196: ARRAY
54197: PPUSH
54198: LD_EXP 157
54202: PUSH
54203: LD_VAR 0 6
54207: ARRAY
54208: PUSH
54209: LD_VAR 0 5
54213: ARRAY
54214: PUSH
54215: LD_INT 2
54217: ARRAY
54218: PPUSH
54219: LD_VAR 0 2
54223: PPUSH
54224: LD_VAR 0 3
54228: PPUSH
54229: CALL_OW 298
54233: PUSH
54234: LD_INT 6
54236: LESS
54237: IFFALSE 54336
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54239: LD_EXP 157
54243: PUSH
54244: LD_VAR 0 6
54248: ARRAY
54249: PUSH
54250: LD_VAR 0 5
54254: ARRAY
54255: PUSH
54256: LD_INT 1
54258: ARRAY
54259: PPUSH
54260: LD_EXP 157
54264: PUSH
54265: LD_VAR 0 6
54269: ARRAY
54270: PUSH
54271: LD_VAR 0 5
54275: ARRAY
54276: PUSH
54277: LD_INT 2
54279: ARRAY
54280: PPUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: CALL_OW 255
54290: PPUSH
54291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54295: LD_ADDR_EXP 157
54299: PUSH
54300: LD_EXP 157
54304: PPUSH
54305: LD_VAR 0 6
54309: PPUSH
54310: LD_EXP 157
54314: PUSH
54315: LD_VAR 0 6
54319: ARRAY
54320: PPUSH
54321: LD_VAR 0 5
54325: PPUSH
54326: CALL_OW 3
54330: PPUSH
54331: CALL_OW 1
54335: ST_TO_ADDR
// end ; end ;
54336: GO 54174
54338: POP
54339: POP
// end ;
54340: LD_VAR 0 4
54344: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
54345: LD_INT 0
54347: PPUSH
54348: PPUSH
54349: PPUSH
54350: PPUSH
54351: PPUSH
54352: PPUSH
54353: PPUSH
54354: PPUSH
54355: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
54356: LD_VAR 0 1
54360: PPUSH
54361: CALL_OW 264
54365: PUSH
54366: LD_INT 81
54368: EQUAL
54369: NOT
54370: PUSH
54371: LD_VAR 0 1
54375: PUSH
54376: LD_EXP 156
54380: IN
54381: NOT
54382: OR
54383: IFFALSE 54387
// exit ;
54385: GO 54709
// index := GetElementIndex ( minersList , unit ) ;
54387: LD_ADDR_VAR 0 6
54391: PUSH
54392: LD_EXP 156
54396: PPUSH
54397: LD_VAR 0 1
54401: PPUSH
54402: CALL 60044 0 2
54406: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
54407: LD_ADDR_VAR 0 8
54411: PUSH
54412: LD_EXP 158
54416: PUSH
54417: LD_EXP 157
54421: PUSH
54422: LD_VAR 0 6
54426: ARRAY
54427: MINUS
54428: ST_TO_ADDR
// if not minesFreeAmount then
54429: LD_VAR 0 8
54433: NOT
54434: IFFALSE 54438
// exit ;
54436: GO 54709
// tmp := [ ] ;
54438: LD_ADDR_VAR 0 7
54442: PUSH
54443: EMPTY
54444: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
54445: LD_ADDR_VAR 0 5
54449: PUSH
54450: DOUBLE
54451: LD_INT 1
54453: DEC
54454: ST_TO_ADDR
54455: LD_VAR 0 8
54459: PUSH
54460: FOR_TO
54461: IFFALSE 54656
// begin _d := rand ( 0 , 5 ) ;
54463: LD_ADDR_VAR 0 11
54467: PUSH
54468: LD_INT 0
54470: PPUSH
54471: LD_INT 5
54473: PPUSH
54474: CALL_OW 12
54478: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
54479: LD_ADDR_VAR 0 12
54483: PUSH
54484: LD_INT 2
54486: PPUSH
54487: LD_INT 6
54489: PPUSH
54490: CALL_OW 12
54494: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
54495: LD_ADDR_VAR 0 9
54499: PUSH
54500: LD_VAR 0 2
54504: PPUSH
54505: LD_VAR 0 11
54509: PPUSH
54510: LD_VAR 0 12
54514: PPUSH
54515: CALL_OW 272
54519: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
54520: LD_ADDR_VAR 0 10
54524: PUSH
54525: LD_VAR 0 3
54529: PPUSH
54530: LD_VAR 0 11
54534: PPUSH
54535: LD_VAR 0 12
54539: PPUSH
54540: CALL_OW 273
54544: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
54545: LD_VAR 0 9
54549: PPUSH
54550: LD_VAR 0 10
54554: PPUSH
54555: CALL_OW 488
54559: PUSH
54560: LD_VAR 0 9
54564: PUSH
54565: LD_VAR 0 10
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_VAR 0 7
54578: IN
54579: NOT
54580: AND
54581: PUSH
54582: LD_VAR 0 9
54586: PPUSH
54587: LD_VAR 0 10
54591: PPUSH
54592: CALL_OW 458
54596: NOT
54597: AND
54598: IFFALSE 54640
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
54600: LD_ADDR_VAR 0 7
54604: PUSH
54605: LD_VAR 0 7
54609: PPUSH
54610: LD_VAR 0 7
54614: PUSH
54615: LD_INT 1
54617: PLUS
54618: PPUSH
54619: LD_VAR 0 9
54623: PUSH
54624: LD_VAR 0 10
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PPUSH
54633: CALL_OW 1
54637: ST_TO_ADDR
54638: GO 54654
// i := i - 1 ;
54640: LD_ADDR_VAR 0 5
54644: PUSH
54645: LD_VAR 0 5
54649: PUSH
54650: LD_INT 1
54652: MINUS
54653: ST_TO_ADDR
// end ;
54654: GO 54460
54656: POP
54657: POP
// for i in tmp do
54658: LD_ADDR_VAR 0 5
54662: PUSH
54663: LD_VAR 0 7
54667: PUSH
54668: FOR_IN
54669: IFFALSE 54707
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54671: LD_VAR 0 1
54675: PPUSH
54676: LD_VAR 0 5
54680: PUSH
54681: LD_INT 1
54683: ARRAY
54684: PPUSH
54685: LD_VAR 0 5
54689: PUSH
54690: LD_INT 2
54692: ARRAY
54693: PPUSH
54694: CALL 53653 0 3
54698: NOT
54699: IFFALSE 54705
// exit ;
54701: POP
54702: POP
54703: GO 54709
54705: GO 54668
54707: POP
54708: POP
// end ;
54709: LD_VAR 0 4
54713: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
54714: LD_INT 0
54716: PPUSH
54717: PPUSH
54718: PPUSH
54719: PPUSH
54720: PPUSH
54721: PPUSH
54722: PPUSH
54723: PPUSH
54724: PPUSH
// if GetClass ( unit ) <> class_sniper then
54725: LD_VAR 0 1
54729: PPUSH
54730: CALL_OW 257
54734: PUSH
54735: LD_INT 5
54737: NONEQUAL
54738: IFFALSE 54742
// exit ;
54740: GO 55208
// dist := 8 ;
54742: LD_ADDR_VAR 0 5
54746: PUSH
54747: LD_INT 8
54749: ST_TO_ADDR
// viewRange := 12 ;
54750: LD_ADDR_VAR 0 8
54754: PUSH
54755: LD_INT 12
54757: ST_TO_ADDR
// side := GetSide ( unit ) ;
54758: LD_ADDR_VAR 0 6
54762: PUSH
54763: LD_VAR 0 1
54767: PPUSH
54768: CALL_OW 255
54772: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54773: LD_INT 61
54775: PPUSH
54776: LD_VAR 0 6
54780: PPUSH
54781: CALL_OW 321
54785: PUSH
54786: LD_INT 2
54788: EQUAL
54789: IFFALSE 54799
// viewRange := 16 ;
54791: LD_ADDR_VAR 0 8
54795: PUSH
54796: LD_INT 16
54798: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54799: LD_VAR 0 1
54803: PPUSH
54804: LD_VAR 0 2
54808: PPUSH
54809: LD_VAR 0 3
54813: PPUSH
54814: CALL_OW 297
54818: PUSH
54819: LD_VAR 0 5
54823: GREATER
54824: IFFALSE 54903
// begin ComMoveXY ( unit , x , y ) ;
54826: LD_VAR 0 1
54830: PPUSH
54831: LD_VAR 0 2
54835: PPUSH
54836: LD_VAR 0 3
54840: PPUSH
54841: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54845: LD_INT 35
54847: PPUSH
54848: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54852: LD_VAR 0 1
54856: PPUSH
54857: LD_VAR 0 2
54861: PPUSH
54862: LD_VAR 0 3
54866: PPUSH
54867: CALL 91805 0 3
54871: NOT
54872: IFFALSE 54876
// exit ;
54874: GO 55208
// until GetDistUnitXY ( unit , x , y ) < dist ;
54876: LD_VAR 0 1
54880: PPUSH
54881: LD_VAR 0 2
54885: PPUSH
54886: LD_VAR 0 3
54890: PPUSH
54891: CALL_OW 297
54895: PUSH
54896: LD_VAR 0 5
54900: LESS
54901: IFFALSE 54845
// end ; ComTurnXY ( unit , x , y ) ;
54903: LD_VAR 0 1
54907: PPUSH
54908: LD_VAR 0 2
54912: PPUSH
54913: LD_VAR 0 3
54917: PPUSH
54918: CALL_OW 118
// repeat if Multiplayer then
54922: LD_OWVAR 4
54926: IFFALSE 54937
// wait ( 35 ) else
54928: LD_INT 35
54930: PPUSH
54931: CALL_OW 67
54935: GO 54944
// wait ( 5 ) ;
54937: LD_INT 5
54939: PPUSH
54940: CALL_OW 67
// _d := GetDir ( unit ) ;
54944: LD_ADDR_VAR 0 11
54948: PUSH
54949: LD_VAR 0 1
54953: PPUSH
54954: CALL_OW 254
54958: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
54959: LD_ADDR_VAR 0 7
54963: PUSH
54964: LD_VAR 0 1
54968: PPUSH
54969: CALL_OW 250
54973: PPUSH
54974: LD_VAR 0 1
54978: PPUSH
54979: CALL_OW 251
54983: PPUSH
54984: LD_VAR 0 2
54988: PPUSH
54989: LD_VAR 0 3
54993: PPUSH
54994: CALL 94413 0 4
54998: ST_TO_ADDR
// until dir = _d ;
54999: LD_VAR 0 7
55003: PUSH
55004: LD_VAR 0 11
55008: EQUAL
55009: IFFALSE 54922
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
55011: LD_ADDR_VAR 0 9
55015: PUSH
55016: LD_VAR 0 1
55020: PPUSH
55021: CALL_OW 250
55025: PPUSH
55026: LD_VAR 0 7
55030: PPUSH
55031: LD_VAR 0 5
55035: PPUSH
55036: CALL_OW 272
55040: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
55041: LD_ADDR_VAR 0 10
55045: PUSH
55046: LD_VAR 0 1
55050: PPUSH
55051: CALL_OW 251
55055: PPUSH
55056: LD_VAR 0 7
55060: PPUSH
55061: LD_VAR 0 5
55065: PPUSH
55066: CALL_OW 273
55070: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55071: LD_VAR 0 9
55075: PPUSH
55076: LD_VAR 0 10
55080: PPUSH
55081: CALL_OW 488
55085: NOT
55086: IFFALSE 55090
// exit ;
55088: GO 55208
// ComAnimCustom ( unit , 1 ) ;
55090: LD_VAR 0 1
55094: PPUSH
55095: LD_INT 1
55097: PPUSH
55098: CALL_OW 592
// p := 0 ;
55102: LD_ADDR_VAR 0 12
55106: PUSH
55107: LD_INT 0
55109: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55110: LD_VAR 0 9
55114: PPUSH
55115: LD_VAR 0 10
55119: PPUSH
55120: LD_VAR 0 6
55124: PPUSH
55125: LD_VAR 0 8
55129: PPUSH
55130: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
55134: LD_INT 35
55136: PPUSH
55137: CALL_OW 67
// p := Inc ( p ) ;
55141: LD_ADDR_VAR 0 12
55145: PUSH
55146: LD_VAR 0 12
55150: PPUSH
55151: CALL 94369 0 1
55155: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
55156: LD_VAR 0 12
55160: PUSH
55161: LD_INT 3
55163: EQUAL
55164: PUSH
55165: LD_VAR 0 1
55169: PPUSH
55170: CALL_OW 302
55174: NOT
55175: OR
55176: PUSH
55177: LD_VAR 0 1
55181: PPUSH
55182: CALL_OW 301
55186: OR
55187: IFFALSE 55134
// RemoveSeeing ( _x , _y , side ) ;
55189: LD_VAR 0 9
55193: PPUSH
55194: LD_VAR 0 10
55198: PPUSH
55199: LD_VAR 0 6
55203: PPUSH
55204: CALL_OW 331
// end ; end_of_file
55208: LD_VAR 0 4
55212: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
55213: LD_INT 0
55215: PPUSH
55216: PPUSH
// if exist_mode then
55217: LD_VAR 0 2
55221: IFFALSE 55267
// begin unit := CreateCharacter ( prefix & ident ) ;
55223: LD_ADDR_VAR 0 5
55227: PUSH
55228: LD_VAR 0 3
55232: PUSH
55233: LD_VAR 0 1
55237: STR
55238: PPUSH
55239: CALL_OW 34
55243: ST_TO_ADDR
// if unit then
55244: LD_VAR 0 5
55248: IFFALSE 55265
// DeleteCharacters ( prefix & ident ) ;
55250: LD_VAR 0 3
55254: PUSH
55255: LD_VAR 0 1
55259: STR
55260: PPUSH
55261: CALL_OW 40
// end else
55265: GO 55282
// unit := NewCharacter ( ident ) ;
55267: LD_ADDR_VAR 0 5
55271: PUSH
55272: LD_VAR 0 1
55276: PPUSH
55277: CALL_OW 25
55281: ST_TO_ADDR
// result := unit ;
55282: LD_ADDR_VAR 0 4
55286: PUSH
55287: LD_VAR 0 5
55291: ST_TO_ADDR
// end ;
55292: LD_VAR 0 4
55296: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
55297: LD_INT 0
55299: PPUSH
55300: PPUSH
// if exist_mode then
55301: LD_VAR 0 2
55305: IFFALSE 55330
// unit := CreateCharacter ( prefix & ident ) else
55307: LD_ADDR_VAR 0 5
55311: PUSH
55312: LD_VAR 0 3
55316: PUSH
55317: LD_VAR 0 1
55321: STR
55322: PPUSH
55323: CALL_OW 34
55327: ST_TO_ADDR
55328: GO 55345
// unit := NewCharacter ( ident ) ;
55330: LD_ADDR_VAR 0 5
55334: PUSH
55335: LD_VAR 0 1
55339: PPUSH
55340: CALL_OW 25
55344: ST_TO_ADDR
// result := unit ;
55345: LD_ADDR_VAR 0 4
55349: PUSH
55350: LD_VAR 0 5
55354: ST_TO_ADDR
// end ;
55355: LD_VAR 0 4
55359: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
55360: LD_INT 0
55362: PPUSH
55363: PPUSH
// if not side or not nation then
55364: LD_VAR 0 1
55368: NOT
55369: PUSH
55370: LD_VAR 0 2
55374: NOT
55375: OR
55376: IFFALSE 55380
// exit ;
55378: GO 56148
// case nation of nation_american :
55380: LD_VAR 0 2
55384: PUSH
55385: LD_INT 1
55387: DOUBLE
55388: EQUAL
55389: IFTRUE 55393
55391: GO 55607
55393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
55394: LD_ADDR_VAR 0 4
55398: PUSH
55399: LD_INT 35
55401: PUSH
55402: LD_INT 45
55404: PUSH
55405: LD_INT 46
55407: PUSH
55408: LD_INT 47
55410: PUSH
55411: LD_INT 82
55413: PUSH
55414: LD_INT 83
55416: PUSH
55417: LD_INT 84
55419: PUSH
55420: LD_INT 85
55422: PUSH
55423: LD_INT 86
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 6
55434: PUSH
55435: LD_INT 15
55437: PUSH
55438: LD_INT 16
55440: PUSH
55441: LD_INT 7
55443: PUSH
55444: LD_INT 12
55446: PUSH
55447: LD_INT 13
55449: PUSH
55450: LD_INT 10
55452: PUSH
55453: LD_INT 14
55455: PUSH
55456: LD_INT 20
55458: PUSH
55459: LD_INT 21
55461: PUSH
55462: LD_INT 22
55464: PUSH
55465: LD_INT 25
55467: PUSH
55468: LD_INT 32
55470: PUSH
55471: LD_INT 27
55473: PUSH
55474: LD_INT 36
55476: PUSH
55477: LD_INT 69
55479: PUSH
55480: LD_INT 39
55482: PUSH
55483: LD_INT 34
55485: PUSH
55486: LD_INT 40
55488: PUSH
55489: LD_INT 48
55491: PUSH
55492: LD_INT 49
55494: PUSH
55495: LD_INT 50
55497: PUSH
55498: LD_INT 51
55500: PUSH
55501: LD_INT 52
55503: PUSH
55504: LD_INT 53
55506: PUSH
55507: LD_INT 54
55509: PUSH
55510: LD_INT 55
55512: PUSH
55513: LD_INT 56
55515: PUSH
55516: LD_INT 57
55518: PUSH
55519: LD_INT 58
55521: PUSH
55522: LD_INT 59
55524: PUSH
55525: LD_INT 60
55527: PUSH
55528: LD_INT 61
55530: PUSH
55531: LD_INT 62
55533: PUSH
55534: LD_INT 80
55536: PUSH
55537: LD_INT 82
55539: PUSH
55540: LD_INT 83
55542: PUSH
55543: LD_INT 84
55545: PUSH
55546: LD_INT 85
55548: PUSH
55549: LD_INT 86
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: ST_TO_ADDR
55605: GO 56072
55607: LD_INT 2
55609: DOUBLE
55610: EQUAL
55611: IFTRUE 55615
55613: GO 55841
55615: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
55616: LD_ADDR_VAR 0 4
55620: PUSH
55621: LD_INT 35
55623: PUSH
55624: LD_INT 45
55626: PUSH
55627: LD_INT 46
55629: PUSH
55630: LD_INT 47
55632: PUSH
55633: LD_INT 82
55635: PUSH
55636: LD_INT 83
55638: PUSH
55639: LD_INT 84
55641: PUSH
55642: LD_INT 85
55644: PUSH
55645: LD_INT 87
55647: PUSH
55648: LD_INT 70
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 11
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: LD_INT 5
55665: PUSH
55666: LD_INT 6
55668: PUSH
55669: LD_INT 15
55671: PUSH
55672: LD_INT 18
55674: PUSH
55675: LD_INT 7
55677: PUSH
55678: LD_INT 17
55680: PUSH
55681: LD_INT 8
55683: PUSH
55684: LD_INT 20
55686: PUSH
55687: LD_INT 21
55689: PUSH
55690: LD_INT 22
55692: PUSH
55693: LD_INT 72
55695: PUSH
55696: LD_INT 26
55698: PUSH
55699: LD_INT 69
55701: PUSH
55702: LD_INT 39
55704: PUSH
55705: LD_INT 40
55707: PUSH
55708: LD_INT 41
55710: PUSH
55711: LD_INT 42
55713: PUSH
55714: LD_INT 43
55716: PUSH
55717: LD_INT 48
55719: PUSH
55720: LD_INT 49
55722: PUSH
55723: LD_INT 50
55725: PUSH
55726: LD_INT 51
55728: PUSH
55729: LD_INT 52
55731: PUSH
55732: LD_INT 53
55734: PUSH
55735: LD_INT 54
55737: PUSH
55738: LD_INT 55
55740: PUSH
55741: LD_INT 56
55743: PUSH
55744: LD_INT 60
55746: PUSH
55747: LD_INT 61
55749: PUSH
55750: LD_INT 62
55752: PUSH
55753: LD_INT 66
55755: PUSH
55756: LD_INT 67
55758: PUSH
55759: LD_INT 68
55761: PUSH
55762: LD_INT 81
55764: PUSH
55765: LD_INT 82
55767: PUSH
55768: LD_INT 83
55770: PUSH
55771: LD_INT 84
55773: PUSH
55774: LD_INT 85
55776: PUSH
55777: LD_INT 87
55779: PUSH
55780: LD_INT 88
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
55839: GO 56072
55841: LD_INT 3
55843: DOUBLE
55844: EQUAL
55845: IFTRUE 55849
55847: GO 56071
55849: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55850: LD_ADDR_VAR 0 4
55854: PUSH
55855: LD_INT 46
55857: PUSH
55858: LD_INT 47
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 82
55869: PUSH
55870: LD_INT 83
55872: PUSH
55873: LD_INT 84
55875: PUSH
55876: LD_INT 85
55878: PUSH
55879: LD_INT 86
55881: PUSH
55882: LD_INT 11
55884: PUSH
55885: LD_INT 9
55887: PUSH
55888: LD_INT 20
55890: PUSH
55891: LD_INT 19
55893: PUSH
55894: LD_INT 21
55896: PUSH
55897: LD_INT 24
55899: PUSH
55900: LD_INT 22
55902: PUSH
55903: LD_INT 25
55905: PUSH
55906: LD_INT 28
55908: PUSH
55909: LD_INT 29
55911: PUSH
55912: LD_INT 30
55914: PUSH
55915: LD_INT 31
55917: PUSH
55918: LD_INT 37
55920: PUSH
55921: LD_INT 38
55923: PUSH
55924: LD_INT 32
55926: PUSH
55927: LD_INT 27
55929: PUSH
55930: LD_INT 33
55932: PUSH
55933: LD_INT 69
55935: PUSH
55936: LD_INT 39
55938: PUSH
55939: LD_INT 34
55941: PUSH
55942: LD_INT 40
55944: PUSH
55945: LD_INT 71
55947: PUSH
55948: LD_INT 23
55950: PUSH
55951: LD_INT 44
55953: PUSH
55954: LD_INT 48
55956: PUSH
55957: LD_INT 49
55959: PUSH
55960: LD_INT 50
55962: PUSH
55963: LD_INT 51
55965: PUSH
55966: LD_INT 52
55968: PUSH
55969: LD_INT 53
55971: PUSH
55972: LD_INT 54
55974: PUSH
55975: LD_INT 55
55977: PUSH
55978: LD_INT 56
55980: PUSH
55981: LD_INT 57
55983: PUSH
55984: LD_INT 58
55986: PUSH
55987: LD_INT 59
55989: PUSH
55990: LD_INT 63
55992: PUSH
55993: LD_INT 64
55995: PUSH
55996: LD_INT 65
55998: PUSH
55999: LD_INT 82
56001: PUSH
56002: LD_INT 83
56004: PUSH
56005: LD_INT 84
56007: PUSH
56008: LD_INT 85
56010: PUSH
56011: LD_INT 86
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: ST_TO_ADDR
56069: GO 56072
56071: POP
// if state > - 1 and state < 3 then
56072: LD_VAR 0 3
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: GREATER
56081: PUSH
56082: LD_VAR 0 3
56086: PUSH
56087: LD_INT 3
56089: LESS
56090: AND
56091: IFFALSE 56148
// for i in result do
56093: LD_ADDR_VAR 0 5
56097: PUSH
56098: LD_VAR 0 4
56102: PUSH
56103: FOR_IN
56104: IFFALSE 56146
// if GetTech ( i , side ) <> state then
56106: LD_VAR 0 5
56110: PPUSH
56111: LD_VAR 0 1
56115: PPUSH
56116: CALL_OW 321
56120: PUSH
56121: LD_VAR 0 3
56125: NONEQUAL
56126: IFFALSE 56144
// result := result diff i ;
56128: LD_ADDR_VAR 0 4
56132: PUSH
56133: LD_VAR 0 4
56137: PUSH
56138: LD_VAR 0 5
56142: DIFF
56143: ST_TO_ADDR
56144: GO 56103
56146: POP
56147: POP
// end ;
56148: LD_VAR 0 4
56152: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
56153: LD_INT 0
56155: PPUSH
56156: PPUSH
56157: PPUSH
// result := true ;
56158: LD_ADDR_VAR 0 3
56162: PUSH
56163: LD_INT 1
56165: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
56166: LD_ADDR_VAR 0 5
56170: PUSH
56171: LD_VAR 0 2
56175: PPUSH
56176: CALL_OW 480
56180: ST_TO_ADDR
// if not tmp then
56181: LD_VAR 0 5
56185: NOT
56186: IFFALSE 56190
// exit ;
56188: GO 56239
// for i in tmp do
56190: LD_ADDR_VAR 0 4
56194: PUSH
56195: LD_VAR 0 5
56199: PUSH
56200: FOR_IN
56201: IFFALSE 56237
// if GetTech ( i , side ) <> state_researched then
56203: LD_VAR 0 4
56207: PPUSH
56208: LD_VAR 0 1
56212: PPUSH
56213: CALL_OW 321
56217: PUSH
56218: LD_INT 2
56220: NONEQUAL
56221: IFFALSE 56235
// begin result := false ;
56223: LD_ADDR_VAR 0 3
56227: PUSH
56228: LD_INT 0
56230: ST_TO_ADDR
// exit ;
56231: POP
56232: POP
56233: GO 56239
// end ;
56235: GO 56200
56237: POP
56238: POP
// end ;
56239: LD_VAR 0 3
56243: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
56244: LD_INT 0
56246: PPUSH
56247: PPUSH
56248: PPUSH
56249: PPUSH
56250: PPUSH
56251: PPUSH
56252: PPUSH
56253: PPUSH
56254: PPUSH
56255: PPUSH
56256: PPUSH
56257: PPUSH
56258: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
56259: LD_VAR 0 1
56263: NOT
56264: PUSH
56265: LD_VAR 0 1
56269: PPUSH
56270: CALL_OW 257
56274: PUSH
56275: LD_INT 9
56277: NONEQUAL
56278: OR
56279: IFFALSE 56283
// exit ;
56281: GO 56856
// side := GetSide ( unit ) ;
56283: LD_ADDR_VAR 0 9
56287: PUSH
56288: LD_VAR 0 1
56292: PPUSH
56293: CALL_OW 255
56297: ST_TO_ADDR
// tech_space := tech_spacanom ;
56298: LD_ADDR_VAR 0 12
56302: PUSH
56303: LD_INT 29
56305: ST_TO_ADDR
// tech_time := tech_taurad ;
56306: LD_ADDR_VAR 0 13
56310: PUSH
56311: LD_INT 28
56313: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
56314: LD_ADDR_VAR 0 11
56318: PUSH
56319: LD_VAR 0 1
56323: PPUSH
56324: CALL_OW 310
56328: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
56329: LD_VAR 0 11
56333: PPUSH
56334: CALL_OW 247
56338: PUSH
56339: LD_INT 2
56341: EQUAL
56342: IFFALSE 56346
// exit ;
56344: GO 56856
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56346: LD_ADDR_VAR 0 8
56350: PUSH
56351: LD_INT 81
56353: PUSH
56354: LD_VAR 0 9
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: LD_INT 21
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PPUSH
56384: CALL_OW 69
56388: ST_TO_ADDR
// if not tmp then
56389: LD_VAR 0 8
56393: NOT
56394: IFFALSE 56398
// exit ;
56396: GO 56856
// if in_unit then
56398: LD_VAR 0 11
56402: IFFALSE 56426
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
56404: LD_ADDR_VAR 0 10
56408: PUSH
56409: LD_VAR 0 8
56413: PPUSH
56414: LD_VAR 0 11
56418: PPUSH
56419: CALL_OW 74
56423: ST_TO_ADDR
56424: GO 56446
// enemy := NearestUnitToUnit ( tmp , unit ) ;
56426: LD_ADDR_VAR 0 10
56430: PUSH
56431: LD_VAR 0 8
56435: PPUSH
56436: LD_VAR 0 1
56440: PPUSH
56441: CALL_OW 74
56445: ST_TO_ADDR
// if not enemy then
56446: LD_VAR 0 10
56450: NOT
56451: IFFALSE 56455
// exit ;
56453: GO 56856
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
56455: LD_VAR 0 11
56459: PUSH
56460: LD_VAR 0 11
56464: PPUSH
56465: LD_VAR 0 10
56469: PPUSH
56470: CALL_OW 296
56474: PUSH
56475: LD_INT 13
56477: GREATER
56478: AND
56479: PUSH
56480: LD_VAR 0 1
56484: PPUSH
56485: LD_VAR 0 10
56489: PPUSH
56490: CALL_OW 296
56494: PUSH
56495: LD_INT 12
56497: GREATER
56498: OR
56499: IFFALSE 56503
// exit ;
56501: GO 56856
// missile := [ 1 ] ;
56503: LD_ADDR_VAR 0 14
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: ST_TO_ADDR
// if Researched ( side , tech_space ) then
56514: LD_VAR 0 9
56518: PPUSH
56519: LD_VAR 0 12
56523: PPUSH
56524: CALL_OW 325
56528: IFFALSE 56557
// missile := Replace ( missile , missile + 1 , 2 ) ;
56530: LD_ADDR_VAR 0 14
56534: PUSH
56535: LD_VAR 0 14
56539: PPUSH
56540: LD_VAR 0 14
56544: PUSH
56545: LD_INT 1
56547: PLUS
56548: PPUSH
56549: LD_INT 2
56551: PPUSH
56552: CALL_OW 1
56556: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
56557: LD_VAR 0 9
56561: PPUSH
56562: LD_VAR 0 13
56566: PPUSH
56567: CALL_OW 325
56571: PUSH
56572: LD_VAR 0 10
56576: PPUSH
56577: CALL_OW 255
56581: PPUSH
56582: LD_VAR 0 13
56586: PPUSH
56587: CALL_OW 325
56591: NOT
56592: AND
56593: IFFALSE 56622
// missile := Replace ( missile , missile + 1 , 3 ) ;
56595: LD_ADDR_VAR 0 14
56599: PUSH
56600: LD_VAR 0 14
56604: PPUSH
56605: LD_VAR 0 14
56609: PUSH
56610: LD_INT 1
56612: PLUS
56613: PPUSH
56614: LD_INT 3
56616: PPUSH
56617: CALL_OW 1
56621: ST_TO_ADDR
// if missile < 2 then
56622: LD_VAR 0 14
56626: PUSH
56627: LD_INT 2
56629: LESS
56630: IFFALSE 56634
// exit ;
56632: GO 56856
// x := GetX ( enemy ) ;
56634: LD_ADDR_VAR 0 4
56638: PUSH
56639: LD_VAR 0 10
56643: PPUSH
56644: CALL_OW 250
56648: ST_TO_ADDR
// y := GetY ( enemy ) ;
56649: LD_ADDR_VAR 0 5
56653: PUSH
56654: LD_VAR 0 10
56658: PPUSH
56659: CALL_OW 251
56663: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
56664: LD_ADDR_VAR 0 6
56668: PUSH
56669: LD_VAR 0 4
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PPUSH
56678: LD_INT 1
56680: PPUSH
56681: CALL_OW 12
56685: PLUS
56686: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
56687: LD_ADDR_VAR 0 7
56691: PUSH
56692: LD_VAR 0 5
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PPUSH
56701: LD_INT 1
56703: PPUSH
56704: CALL_OW 12
56708: PLUS
56709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56710: LD_VAR 0 6
56714: PPUSH
56715: LD_VAR 0 7
56719: PPUSH
56720: CALL_OW 488
56724: NOT
56725: IFFALSE 56747
// begin _x := x ;
56727: LD_ADDR_VAR 0 6
56731: PUSH
56732: LD_VAR 0 4
56736: ST_TO_ADDR
// _y := y ;
56737: LD_ADDR_VAR 0 7
56741: PUSH
56742: LD_VAR 0 5
56746: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
56747: LD_ADDR_VAR 0 3
56751: PUSH
56752: LD_INT 1
56754: PPUSH
56755: LD_VAR 0 14
56759: PPUSH
56760: CALL_OW 12
56764: ST_TO_ADDR
// case i of 1 :
56765: LD_VAR 0 3
56769: PUSH
56770: LD_INT 1
56772: DOUBLE
56773: EQUAL
56774: IFTRUE 56778
56776: GO 56795
56778: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
56779: LD_VAR 0 1
56783: PPUSH
56784: LD_VAR 0 10
56788: PPUSH
56789: CALL_OW 115
56793: GO 56856
56795: LD_INT 2
56797: DOUBLE
56798: EQUAL
56799: IFTRUE 56803
56801: GO 56825
56803: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56804: LD_VAR 0 1
56808: PPUSH
56809: LD_VAR 0 6
56813: PPUSH
56814: LD_VAR 0 7
56818: PPUSH
56819: CALL_OW 153
56823: GO 56856
56825: LD_INT 3
56827: DOUBLE
56828: EQUAL
56829: IFTRUE 56833
56831: GO 56855
56833: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56834: LD_VAR 0 1
56838: PPUSH
56839: LD_VAR 0 6
56843: PPUSH
56844: LD_VAR 0 7
56848: PPUSH
56849: CALL_OW 154
56853: GO 56856
56855: POP
// end ;
56856: LD_VAR 0 2
56860: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56861: LD_INT 0
56863: PPUSH
56864: PPUSH
56865: PPUSH
56866: PPUSH
56867: PPUSH
56868: PPUSH
// if not unit or not building then
56869: LD_VAR 0 1
56873: NOT
56874: PUSH
56875: LD_VAR 0 2
56879: NOT
56880: OR
56881: IFFALSE 56885
// exit ;
56883: GO 57043
// x := GetX ( building ) ;
56885: LD_ADDR_VAR 0 5
56889: PUSH
56890: LD_VAR 0 2
56894: PPUSH
56895: CALL_OW 250
56899: ST_TO_ADDR
// y := GetY ( building ) ;
56900: LD_ADDR_VAR 0 6
56904: PUSH
56905: LD_VAR 0 2
56909: PPUSH
56910: CALL_OW 251
56914: ST_TO_ADDR
// for i = 0 to 5 do
56915: LD_ADDR_VAR 0 4
56919: PUSH
56920: DOUBLE
56921: LD_INT 0
56923: DEC
56924: ST_TO_ADDR
56925: LD_INT 5
56927: PUSH
56928: FOR_TO
56929: IFFALSE 57041
// begin _x := ShiftX ( x , i , 3 ) ;
56931: LD_ADDR_VAR 0 7
56935: PUSH
56936: LD_VAR 0 5
56940: PPUSH
56941: LD_VAR 0 4
56945: PPUSH
56946: LD_INT 3
56948: PPUSH
56949: CALL_OW 272
56953: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56954: LD_ADDR_VAR 0 8
56958: PUSH
56959: LD_VAR 0 6
56963: PPUSH
56964: LD_VAR 0 4
56968: PPUSH
56969: LD_INT 3
56971: PPUSH
56972: CALL_OW 273
56976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56977: LD_VAR 0 7
56981: PPUSH
56982: LD_VAR 0 8
56986: PPUSH
56987: CALL_OW 488
56991: NOT
56992: IFFALSE 56996
// continue ;
56994: GO 56928
// if HexInfo ( _x , _y ) = 0 then
56996: LD_VAR 0 7
57000: PPUSH
57001: LD_VAR 0 8
57005: PPUSH
57006: CALL_OW 428
57010: PUSH
57011: LD_INT 0
57013: EQUAL
57014: IFFALSE 57039
// begin ComMoveXY ( unit , _x , _y ) ;
57016: LD_VAR 0 1
57020: PPUSH
57021: LD_VAR 0 7
57025: PPUSH
57026: LD_VAR 0 8
57030: PPUSH
57031: CALL_OW 111
// exit ;
57035: POP
57036: POP
57037: GO 57043
// end ; end ;
57039: GO 56928
57041: POP
57042: POP
// end ;
57043: LD_VAR 0 3
57047: RET
// export function ScanBase ( side , base_area ) ; begin
57048: LD_INT 0
57050: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
57051: LD_ADDR_VAR 0 3
57055: PUSH
57056: LD_VAR 0 2
57060: PPUSH
57061: LD_INT 81
57063: PUSH
57064: LD_VAR 0 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PPUSH
57073: CALL_OW 70
57077: ST_TO_ADDR
// end ;
57078: LD_VAR 0 3
57082: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
57083: LD_INT 0
57085: PPUSH
57086: PPUSH
57087: PPUSH
57088: PPUSH
// result := false ;
57089: LD_ADDR_VAR 0 2
57093: PUSH
57094: LD_INT 0
57096: ST_TO_ADDR
// side := GetSide ( unit ) ;
57097: LD_ADDR_VAR 0 3
57101: PUSH
57102: LD_VAR 0 1
57106: PPUSH
57107: CALL_OW 255
57111: ST_TO_ADDR
// nat := GetNation ( unit ) ;
57112: LD_ADDR_VAR 0 4
57116: PUSH
57117: LD_VAR 0 1
57121: PPUSH
57122: CALL_OW 248
57126: ST_TO_ADDR
// case nat of 1 :
57127: LD_VAR 0 4
57131: PUSH
57132: LD_INT 1
57134: DOUBLE
57135: EQUAL
57136: IFTRUE 57140
57138: GO 57151
57140: POP
// tech := tech_lassight ; 2 :
57141: LD_ADDR_VAR 0 5
57145: PUSH
57146: LD_INT 12
57148: ST_TO_ADDR
57149: GO 57190
57151: LD_INT 2
57153: DOUBLE
57154: EQUAL
57155: IFTRUE 57159
57157: GO 57170
57159: POP
// tech := tech_mortar ; 3 :
57160: LD_ADDR_VAR 0 5
57164: PUSH
57165: LD_INT 41
57167: ST_TO_ADDR
57168: GO 57190
57170: LD_INT 3
57172: DOUBLE
57173: EQUAL
57174: IFTRUE 57178
57176: GO 57189
57178: POP
// tech := tech_bazooka ; end ;
57179: LD_ADDR_VAR 0 5
57183: PUSH
57184: LD_INT 44
57186: ST_TO_ADDR
57187: GO 57190
57189: POP
// if Researched ( side , tech ) then
57190: LD_VAR 0 3
57194: PPUSH
57195: LD_VAR 0 5
57199: PPUSH
57200: CALL_OW 325
57204: IFFALSE 57231
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
57206: LD_ADDR_VAR 0 2
57210: PUSH
57211: LD_INT 5
57213: PUSH
57214: LD_INT 8
57216: PUSH
57217: LD_INT 9
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: PUSH
57225: LD_VAR 0 4
57229: ARRAY
57230: ST_TO_ADDR
// end ;
57231: LD_VAR 0 2
57235: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
57236: LD_INT 0
57238: PPUSH
57239: PPUSH
57240: PPUSH
// if not mines then
57241: LD_VAR 0 2
57245: NOT
57246: IFFALSE 57250
// exit ;
57248: GO 57394
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57250: LD_ADDR_VAR 0 5
57254: PUSH
57255: LD_INT 81
57257: PUSH
57258: LD_VAR 0 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 21
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PPUSH
57288: CALL_OW 69
57292: ST_TO_ADDR
// for i in mines do
57293: LD_ADDR_VAR 0 4
57297: PUSH
57298: LD_VAR 0 2
57302: PUSH
57303: FOR_IN
57304: IFFALSE 57392
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
57306: LD_VAR 0 4
57310: PUSH
57311: LD_INT 1
57313: ARRAY
57314: PPUSH
57315: LD_VAR 0 4
57319: PUSH
57320: LD_INT 2
57322: ARRAY
57323: PPUSH
57324: CALL_OW 458
57328: NOT
57329: IFFALSE 57333
// continue ;
57331: GO 57303
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
57333: LD_VAR 0 4
57337: PUSH
57338: LD_INT 1
57340: ARRAY
57341: PPUSH
57342: LD_VAR 0 4
57346: PUSH
57347: LD_INT 2
57349: ARRAY
57350: PPUSH
57351: CALL_OW 428
57355: PUSH
57356: LD_VAR 0 5
57360: IN
57361: IFFALSE 57390
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
57363: LD_VAR 0 4
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PPUSH
57372: LD_VAR 0 4
57376: PUSH
57377: LD_INT 2
57379: ARRAY
57380: PPUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: CALL_OW 456
// end ;
57390: GO 57303
57392: POP
57393: POP
// end ;
57394: LD_VAR 0 3
57398: RET
// export function Count ( array ) ; begin
57399: LD_INT 0
57401: PPUSH
// result := array + 0 ;
57402: LD_ADDR_VAR 0 2
57406: PUSH
57407: LD_VAR 0 1
57411: PUSH
57412: LD_INT 0
57414: PLUS
57415: ST_TO_ADDR
// end ;
57416: LD_VAR 0 2
57420: RET
// export function IsEmpty ( building ) ; begin
57421: LD_INT 0
57423: PPUSH
// if not building then
57424: LD_VAR 0 1
57428: NOT
57429: IFFALSE 57433
// exit ;
57431: GO 57476
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
57433: LD_ADDR_VAR 0 2
57437: PUSH
57438: LD_VAR 0 1
57442: PUSH
57443: LD_INT 22
57445: PUSH
57446: LD_VAR 0 1
57450: PPUSH
57451: CALL_OW 255
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 58
57462: PUSH
57463: EMPTY
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PPUSH
57470: CALL_OW 69
57474: IN
57475: ST_TO_ADDR
// end ;
57476: LD_VAR 0 2
57480: RET
// export function IsNotFull ( building ) ; var places ; begin
57481: LD_INT 0
57483: PPUSH
57484: PPUSH
// if not building then
57485: LD_VAR 0 1
57489: NOT
57490: IFFALSE 57494
// exit ;
57492: GO 57522
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
57494: LD_ADDR_VAR 0 2
57498: PUSH
57499: LD_VAR 0 1
57503: PPUSH
57504: LD_INT 3
57506: PUSH
57507: LD_INT 62
57509: PUSH
57510: EMPTY
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PPUSH
57517: CALL_OW 72
57521: ST_TO_ADDR
// end ;
57522: LD_VAR 0 2
57526: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
57527: LD_INT 0
57529: PPUSH
57530: PPUSH
57531: PPUSH
57532: PPUSH
// tmp := [ ] ;
57533: LD_ADDR_VAR 0 3
57537: PUSH
57538: EMPTY
57539: ST_TO_ADDR
// list := [ ] ;
57540: LD_ADDR_VAR 0 5
57544: PUSH
57545: EMPTY
57546: ST_TO_ADDR
// for i = 16 to 25 do
57547: LD_ADDR_VAR 0 4
57551: PUSH
57552: DOUBLE
57553: LD_INT 16
57555: DEC
57556: ST_TO_ADDR
57557: LD_INT 25
57559: PUSH
57560: FOR_TO
57561: IFFALSE 57634
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
57563: LD_ADDR_VAR 0 3
57567: PUSH
57568: LD_VAR 0 3
57572: PUSH
57573: LD_INT 22
57575: PUSH
57576: LD_VAR 0 1
57580: PPUSH
57581: CALL_OW 255
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 91
57592: PUSH
57593: LD_VAR 0 1
57597: PUSH
57598: LD_INT 6
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 30
57608: PUSH
57609: LD_VAR 0 4
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: PPUSH
57626: CALL_OW 69
57630: ADD
57631: ST_TO_ADDR
57632: GO 57560
57634: POP
57635: POP
// for i = 1 to tmp do
57636: LD_ADDR_VAR 0 4
57640: PUSH
57641: DOUBLE
57642: LD_INT 1
57644: DEC
57645: ST_TO_ADDR
57646: LD_VAR 0 3
57650: PUSH
57651: FOR_TO
57652: IFFALSE 57740
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
57654: LD_ADDR_VAR 0 5
57658: PUSH
57659: LD_VAR 0 5
57663: PUSH
57664: LD_VAR 0 3
57668: PUSH
57669: LD_VAR 0 4
57673: ARRAY
57674: PPUSH
57675: CALL_OW 266
57679: PUSH
57680: LD_VAR 0 3
57684: PUSH
57685: LD_VAR 0 4
57689: ARRAY
57690: PPUSH
57691: CALL_OW 250
57695: PUSH
57696: LD_VAR 0 3
57700: PUSH
57701: LD_VAR 0 4
57705: ARRAY
57706: PPUSH
57707: CALL_OW 251
57711: PUSH
57712: LD_VAR 0 3
57716: PUSH
57717: LD_VAR 0 4
57721: ARRAY
57722: PPUSH
57723: CALL_OW 254
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: ADD
57737: ST_TO_ADDR
57738: GO 57651
57740: POP
57741: POP
// result := list ;
57742: LD_ADDR_VAR 0 2
57746: PUSH
57747: LD_VAR 0 5
57751: ST_TO_ADDR
// end ;
57752: LD_VAR 0 2
57756: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
57757: LD_INT 0
57759: PPUSH
57760: PPUSH
57761: PPUSH
57762: PPUSH
57763: PPUSH
57764: PPUSH
57765: PPUSH
// if not factory then
57766: LD_VAR 0 1
57770: NOT
57771: IFFALSE 57775
// exit ;
57773: GO 58368
// if control = control_apeman then
57775: LD_VAR 0 4
57779: PUSH
57780: LD_INT 5
57782: EQUAL
57783: IFFALSE 57892
// begin tmp := UnitsInside ( factory ) ;
57785: LD_ADDR_VAR 0 8
57789: PUSH
57790: LD_VAR 0 1
57794: PPUSH
57795: CALL_OW 313
57799: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57800: LD_VAR 0 8
57804: PPUSH
57805: LD_INT 25
57807: PUSH
57808: LD_INT 12
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PPUSH
57815: CALL_OW 72
57819: NOT
57820: IFFALSE 57830
// control := control_manual ;
57822: LD_ADDR_VAR 0 4
57826: PUSH
57827: LD_INT 1
57829: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57830: LD_ADDR_VAR 0 8
57834: PUSH
57835: LD_VAR 0 1
57839: PPUSH
57840: CALL 57527 0 1
57844: ST_TO_ADDR
// if tmp then
57845: LD_VAR 0 8
57849: IFFALSE 57892
// begin for i in tmp do
57851: LD_ADDR_VAR 0 7
57855: PUSH
57856: LD_VAR 0 8
57860: PUSH
57861: FOR_IN
57862: IFFALSE 57890
// if i [ 1 ] = b_ext_radio then
57864: LD_VAR 0 7
57868: PUSH
57869: LD_INT 1
57871: ARRAY
57872: PUSH
57873: LD_INT 22
57875: EQUAL
57876: IFFALSE 57888
// begin control := control_remote ;
57878: LD_ADDR_VAR 0 4
57882: PUSH
57883: LD_INT 2
57885: ST_TO_ADDR
// break ;
57886: GO 57890
// end ;
57888: GO 57861
57890: POP
57891: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57892: LD_VAR 0 1
57896: PPUSH
57897: LD_VAR 0 2
57901: PPUSH
57902: LD_VAR 0 3
57906: PPUSH
57907: LD_VAR 0 4
57911: PPUSH
57912: LD_VAR 0 5
57916: PPUSH
57917: CALL_OW 448
57921: IFFALSE 57956
// begin result := [ chassis , engine , control , weapon ] ;
57923: LD_ADDR_VAR 0 6
57927: PUSH
57928: LD_VAR 0 2
57932: PUSH
57933: LD_VAR 0 3
57937: PUSH
57938: LD_VAR 0 4
57942: PUSH
57943: LD_VAR 0 5
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: ST_TO_ADDR
// exit ;
57954: GO 58368
// end ; _chassis := AvailableChassisList ( factory ) ;
57956: LD_ADDR_VAR 0 9
57960: PUSH
57961: LD_VAR 0 1
57965: PPUSH
57966: CALL_OW 475
57970: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57971: LD_ADDR_VAR 0 11
57975: PUSH
57976: LD_VAR 0 1
57980: PPUSH
57981: CALL_OW 476
57985: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57986: LD_ADDR_VAR 0 12
57990: PUSH
57991: LD_VAR 0 1
57995: PPUSH
57996: CALL_OW 477
58000: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
58001: LD_ADDR_VAR 0 10
58005: PUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL_OW 478
58015: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
58016: LD_VAR 0 9
58020: NOT
58021: PUSH
58022: LD_VAR 0 11
58026: NOT
58027: OR
58028: PUSH
58029: LD_VAR 0 12
58033: NOT
58034: OR
58035: PUSH
58036: LD_VAR 0 10
58040: NOT
58041: OR
58042: IFFALSE 58077
// begin result := [ chassis , engine , control , weapon ] ;
58044: LD_ADDR_VAR 0 6
58048: PUSH
58049: LD_VAR 0 2
58053: PUSH
58054: LD_VAR 0 3
58058: PUSH
58059: LD_VAR 0 4
58063: PUSH
58064: LD_VAR 0 5
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
// exit ;
58075: GO 58368
// end ; if not chassis in _chassis then
58077: LD_VAR 0 2
58081: PUSH
58082: LD_VAR 0 9
58086: IN
58087: NOT
58088: IFFALSE 58114
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
58090: LD_ADDR_VAR 0 2
58094: PUSH
58095: LD_VAR 0 9
58099: PUSH
58100: LD_INT 1
58102: PPUSH
58103: LD_VAR 0 9
58107: PPUSH
58108: CALL_OW 12
58112: ARRAY
58113: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
58114: LD_VAR 0 2
58118: PPUSH
58119: LD_VAR 0 3
58123: PPUSH
58124: CALL 58373 0 2
58128: NOT
58129: IFFALSE 58188
// repeat engine := _engine [ 1 ] ;
58131: LD_ADDR_VAR 0 3
58135: PUSH
58136: LD_VAR 0 11
58140: PUSH
58141: LD_INT 1
58143: ARRAY
58144: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
58145: LD_ADDR_VAR 0 11
58149: PUSH
58150: LD_VAR 0 11
58154: PPUSH
58155: LD_INT 1
58157: PPUSH
58158: CALL_OW 3
58162: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
58163: LD_VAR 0 2
58167: PPUSH
58168: LD_VAR 0 3
58172: PPUSH
58173: CALL 58373 0 2
58177: PUSH
58178: LD_VAR 0 11
58182: PUSH
58183: EMPTY
58184: EQUAL
58185: OR
58186: IFFALSE 58131
// if not control in _control then
58188: LD_VAR 0 4
58192: PUSH
58193: LD_VAR 0 12
58197: IN
58198: NOT
58199: IFFALSE 58225
// control := _control [ rand ( 1 , _control ) ] ;
58201: LD_ADDR_VAR 0 4
58205: PUSH
58206: LD_VAR 0 12
58210: PUSH
58211: LD_INT 1
58213: PPUSH
58214: LD_VAR 0 12
58218: PPUSH
58219: CALL_OW 12
58223: ARRAY
58224: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
58225: LD_VAR 0 2
58229: PPUSH
58230: LD_VAR 0 5
58234: PPUSH
58235: CALL 58593 0 2
58239: NOT
58240: IFFALSE 58299
// repeat weapon := _weapon [ 1 ] ;
58242: LD_ADDR_VAR 0 5
58246: PUSH
58247: LD_VAR 0 10
58251: PUSH
58252: LD_INT 1
58254: ARRAY
58255: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
58256: LD_ADDR_VAR 0 10
58260: PUSH
58261: LD_VAR 0 10
58265: PPUSH
58266: LD_INT 1
58268: PPUSH
58269: CALL_OW 3
58273: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
58274: LD_VAR 0 2
58278: PPUSH
58279: LD_VAR 0 5
58283: PPUSH
58284: CALL 58593 0 2
58288: PUSH
58289: LD_VAR 0 10
58293: PUSH
58294: EMPTY
58295: EQUAL
58296: OR
58297: IFFALSE 58242
// result := [ ] ;
58299: LD_ADDR_VAR 0 6
58303: PUSH
58304: EMPTY
58305: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
58306: LD_VAR 0 1
58310: PPUSH
58311: LD_VAR 0 2
58315: PPUSH
58316: LD_VAR 0 3
58320: PPUSH
58321: LD_VAR 0 4
58325: PPUSH
58326: LD_VAR 0 5
58330: PPUSH
58331: CALL_OW 448
58335: IFFALSE 58368
// result := [ chassis , engine , control , weapon ] ;
58337: LD_ADDR_VAR 0 6
58341: PUSH
58342: LD_VAR 0 2
58346: PUSH
58347: LD_VAR 0 3
58351: PUSH
58352: LD_VAR 0 4
58356: PUSH
58357: LD_VAR 0 5
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// end ;
58368: LD_VAR 0 6
58372: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
58373: LD_INT 0
58375: PPUSH
// if not chassis or not engine then
58376: LD_VAR 0 1
58380: NOT
58381: PUSH
58382: LD_VAR 0 2
58386: NOT
58387: OR
58388: IFFALSE 58392
// exit ;
58390: GO 58588
// case engine of engine_solar :
58392: LD_VAR 0 2
58396: PUSH
58397: LD_INT 2
58399: DOUBLE
58400: EQUAL
58401: IFTRUE 58405
58403: GO 58443
58405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
58406: LD_ADDR_VAR 0 3
58410: PUSH
58411: LD_INT 11
58413: PUSH
58414: LD_INT 12
58416: PUSH
58417: LD_INT 13
58419: PUSH
58420: LD_INT 14
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: ST_TO_ADDR
58441: GO 58572
58443: LD_INT 1
58445: DOUBLE
58446: EQUAL
58447: IFTRUE 58451
58449: GO 58513
58451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
58452: LD_ADDR_VAR 0 3
58456: PUSH
58457: LD_INT 11
58459: PUSH
58460: LD_INT 12
58462: PUSH
58463: LD_INT 13
58465: PUSH
58466: LD_INT 14
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: LD_INT 4
58480: PUSH
58481: LD_INT 5
58483: PUSH
58484: LD_INT 21
58486: PUSH
58487: LD_INT 23
58489: PUSH
58490: LD_INT 22
58492: PUSH
58493: LD_INT 24
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
58511: GO 58572
58513: LD_INT 3
58515: DOUBLE
58516: EQUAL
58517: IFTRUE 58521
58519: GO 58571
58521: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58522: LD_ADDR_VAR 0 3
58526: PUSH
58527: LD_INT 13
58529: PUSH
58530: LD_INT 14
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: LD_INT 4
58541: PUSH
58542: LD_INT 5
58544: PUSH
58545: LD_INT 21
58547: PUSH
58548: LD_INT 22
58550: PUSH
58551: LD_INT 23
58553: PUSH
58554: LD_INT 24
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: ST_TO_ADDR
58569: GO 58572
58571: POP
// result := ( chassis in result ) ;
58572: LD_ADDR_VAR 0 3
58576: PUSH
58577: LD_VAR 0 1
58581: PUSH
58582: LD_VAR 0 3
58586: IN
58587: ST_TO_ADDR
// end ;
58588: LD_VAR 0 3
58592: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
58593: LD_INT 0
58595: PPUSH
// if not chassis or not weapon then
58596: LD_VAR 0 1
58600: NOT
58601: PUSH
58602: LD_VAR 0 2
58606: NOT
58607: OR
58608: IFFALSE 58612
// exit ;
58610: GO 59672
// case weapon of us_machine_gun :
58612: LD_VAR 0 2
58616: PUSH
58617: LD_INT 2
58619: DOUBLE
58620: EQUAL
58621: IFTRUE 58625
58623: GO 58655
58625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
58626: LD_ADDR_VAR 0 3
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: LD_INT 4
58642: PUSH
58643: LD_INT 5
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
58653: GO 59656
58655: LD_INT 3
58657: DOUBLE
58658: EQUAL
58659: IFTRUE 58663
58661: GO 58693
58663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
58664: LD_ADDR_VAR 0 3
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: LD_INT 4
58680: PUSH
58681: LD_INT 5
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: ST_TO_ADDR
58691: GO 59656
58693: LD_INT 11
58695: DOUBLE
58696: EQUAL
58697: IFTRUE 58701
58699: GO 58731
58701: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
58702: LD_ADDR_VAR 0 3
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: LD_INT 4
58718: PUSH
58719: LD_INT 5
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
58729: GO 59656
58731: LD_INT 4
58733: DOUBLE
58734: EQUAL
58735: IFTRUE 58739
58737: GO 58765
58739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
58740: LD_ADDR_VAR 0 3
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: LD_INT 3
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: LD_INT 5
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: ST_TO_ADDR
58763: GO 59656
58765: LD_INT 5
58767: DOUBLE
58768: EQUAL
58769: IFTRUE 58773
58771: GO 58799
58773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
58774: LD_ADDR_VAR 0 3
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: LD_INT 5
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: ST_TO_ADDR
58797: GO 59656
58799: LD_INT 9
58801: DOUBLE
58802: EQUAL
58803: IFTRUE 58807
58805: GO 58833
58807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58808: LD_ADDR_VAR 0 3
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: LD_INT 4
58821: PUSH
58822: LD_INT 5
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: ST_TO_ADDR
58831: GO 59656
58833: LD_INT 7
58835: DOUBLE
58836: EQUAL
58837: IFTRUE 58841
58839: GO 58867
58841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58842: LD_ADDR_VAR 0 3
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: LD_INT 4
58855: PUSH
58856: LD_INT 5
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: ST_TO_ADDR
58865: GO 59656
58867: LD_INT 12
58869: DOUBLE
58870: EQUAL
58871: IFTRUE 58875
58873: GO 58901
58875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58876: LD_ADDR_VAR 0 3
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: LD_INT 4
58889: PUSH
58890: LD_INT 5
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: ST_TO_ADDR
58899: GO 59656
58901: LD_INT 13
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58909
58907: GO 58935
58909: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58910: LD_ADDR_VAR 0 3
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: ST_TO_ADDR
58933: GO 59656
58935: LD_INT 14
58937: DOUBLE
58938: EQUAL
58939: IFTRUE 58943
58941: GO 58961
58943: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58944: LD_ADDR_VAR 0 3
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: LD_INT 5
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: ST_TO_ADDR
58959: GO 59656
58961: LD_INT 6
58963: DOUBLE
58964: EQUAL
58965: IFTRUE 58969
58967: GO 58987
58969: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58970: LD_ADDR_VAR 0 3
58974: PUSH
58975: LD_INT 4
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: ST_TO_ADDR
58985: GO 59656
58987: LD_INT 10
58989: DOUBLE
58990: EQUAL
58991: IFTRUE 58995
58993: GO 59013
58995: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58996: LD_ADDR_VAR 0 3
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: LD_INT 5
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: ST_TO_ADDR
59011: GO 59656
59013: LD_INT 22
59015: DOUBLE
59016: EQUAL
59017: IFTRUE 59021
59019: GO 59047
59021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
59022: LD_ADDR_VAR 0 3
59026: PUSH
59027: LD_INT 11
59029: PUSH
59030: LD_INT 12
59032: PUSH
59033: LD_INT 13
59035: PUSH
59036: LD_INT 14
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: ST_TO_ADDR
59045: GO 59656
59047: LD_INT 23
59049: DOUBLE
59050: EQUAL
59051: IFTRUE 59055
59053: GO 59081
59055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
59056: LD_ADDR_VAR 0 3
59060: PUSH
59061: LD_INT 11
59063: PUSH
59064: LD_INT 12
59066: PUSH
59067: LD_INT 13
59069: PUSH
59070: LD_INT 14
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: ST_TO_ADDR
59079: GO 59656
59081: LD_INT 24
59083: DOUBLE
59084: EQUAL
59085: IFTRUE 59089
59087: GO 59115
59089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
59090: LD_ADDR_VAR 0 3
59094: PUSH
59095: LD_INT 11
59097: PUSH
59098: LD_INT 12
59100: PUSH
59101: LD_INT 13
59103: PUSH
59104: LD_INT 14
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: ST_TO_ADDR
59113: GO 59656
59115: LD_INT 30
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59123
59121: GO 59149
59123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
59124: LD_ADDR_VAR 0 3
59128: PUSH
59129: LD_INT 11
59131: PUSH
59132: LD_INT 12
59134: PUSH
59135: LD_INT 13
59137: PUSH
59138: LD_INT 14
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
59147: GO 59656
59149: LD_INT 25
59151: DOUBLE
59152: EQUAL
59153: IFTRUE 59157
59155: GO 59175
59157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
59158: LD_ADDR_VAR 0 3
59162: PUSH
59163: LD_INT 13
59165: PUSH
59166: LD_INT 14
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: ST_TO_ADDR
59173: GO 59656
59175: LD_INT 27
59177: DOUBLE
59178: EQUAL
59179: IFTRUE 59183
59181: GO 59201
59183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
59184: LD_ADDR_VAR 0 3
59188: PUSH
59189: LD_INT 13
59191: PUSH
59192: LD_INT 14
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: ST_TO_ADDR
59199: GO 59656
59201: LD_INT 92
59203: DOUBLE
59204: EQUAL
59205: IFTRUE 59209
59207: GO 59235
59209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
59210: LD_ADDR_VAR 0 3
59214: PUSH
59215: LD_INT 11
59217: PUSH
59218: LD_INT 12
59220: PUSH
59221: LD_INT 13
59223: PUSH
59224: LD_INT 14
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: ST_TO_ADDR
59233: GO 59656
59235: LD_INT 28
59237: DOUBLE
59238: EQUAL
59239: IFTRUE 59243
59241: GO 59261
59243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
59244: LD_ADDR_VAR 0 3
59248: PUSH
59249: LD_INT 13
59251: PUSH
59252: LD_INT 14
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: ST_TO_ADDR
59259: GO 59656
59261: LD_INT 29
59263: DOUBLE
59264: EQUAL
59265: IFTRUE 59269
59267: GO 59287
59269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
59270: LD_ADDR_VAR 0 3
59274: PUSH
59275: LD_INT 13
59277: PUSH
59278: LD_INT 14
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: ST_TO_ADDR
59285: GO 59656
59287: LD_INT 31
59289: DOUBLE
59290: EQUAL
59291: IFTRUE 59295
59293: GO 59313
59295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
59296: LD_ADDR_VAR 0 3
59300: PUSH
59301: LD_INT 13
59303: PUSH
59304: LD_INT 14
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: ST_TO_ADDR
59311: GO 59656
59313: LD_INT 26
59315: DOUBLE
59316: EQUAL
59317: IFTRUE 59321
59319: GO 59339
59321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
59322: LD_ADDR_VAR 0 3
59326: PUSH
59327: LD_INT 13
59329: PUSH
59330: LD_INT 14
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: ST_TO_ADDR
59337: GO 59656
59339: LD_INT 42
59341: DOUBLE
59342: EQUAL
59343: IFTRUE 59347
59345: GO 59373
59347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
59348: LD_ADDR_VAR 0 3
59352: PUSH
59353: LD_INT 21
59355: PUSH
59356: LD_INT 22
59358: PUSH
59359: LD_INT 23
59361: PUSH
59362: LD_INT 24
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
59371: GO 59656
59373: LD_INT 43
59375: DOUBLE
59376: EQUAL
59377: IFTRUE 59381
59379: GO 59407
59381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
59382: LD_ADDR_VAR 0 3
59386: PUSH
59387: LD_INT 21
59389: PUSH
59390: LD_INT 22
59392: PUSH
59393: LD_INT 23
59395: PUSH
59396: LD_INT 24
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: ST_TO_ADDR
59405: GO 59656
59407: LD_INT 44
59409: DOUBLE
59410: EQUAL
59411: IFTRUE 59415
59413: GO 59441
59415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
59416: LD_ADDR_VAR 0 3
59420: PUSH
59421: LD_INT 21
59423: PUSH
59424: LD_INT 22
59426: PUSH
59427: LD_INT 23
59429: PUSH
59430: LD_INT 24
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
59439: GO 59656
59441: LD_INT 45
59443: DOUBLE
59444: EQUAL
59445: IFTRUE 59449
59447: GO 59475
59449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
59450: LD_ADDR_VAR 0 3
59454: PUSH
59455: LD_INT 21
59457: PUSH
59458: LD_INT 22
59460: PUSH
59461: LD_INT 23
59463: PUSH
59464: LD_INT 24
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
59473: GO 59656
59475: LD_INT 49
59477: DOUBLE
59478: EQUAL
59479: IFTRUE 59483
59481: GO 59509
59483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
59484: LD_ADDR_VAR 0 3
59488: PUSH
59489: LD_INT 21
59491: PUSH
59492: LD_INT 22
59494: PUSH
59495: LD_INT 23
59497: PUSH
59498: LD_INT 24
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: ST_TO_ADDR
59507: GO 59656
59509: LD_INT 51
59511: DOUBLE
59512: EQUAL
59513: IFTRUE 59517
59515: GO 59543
59517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
59518: LD_ADDR_VAR 0 3
59522: PUSH
59523: LD_INT 21
59525: PUSH
59526: LD_INT 22
59528: PUSH
59529: LD_INT 23
59531: PUSH
59532: LD_INT 24
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
59541: GO 59656
59543: LD_INT 52
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59551
59549: GO 59577
59551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
59552: LD_ADDR_VAR 0 3
59556: PUSH
59557: LD_INT 21
59559: PUSH
59560: LD_INT 22
59562: PUSH
59563: LD_INT 23
59565: PUSH
59566: LD_INT 24
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: ST_TO_ADDR
59575: GO 59656
59577: LD_INT 53
59579: DOUBLE
59580: EQUAL
59581: IFTRUE 59585
59583: GO 59603
59585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
59586: LD_ADDR_VAR 0 3
59590: PUSH
59591: LD_INT 23
59593: PUSH
59594: LD_INT 24
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: ST_TO_ADDR
59601: GO 59656
59603: LD_INT 46
59605: DOUBLE
59606: EQUAL
59607: IFTRUE 59611
59609: GO 59629
59611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
59612: LD_ADDR_VAR 0 3
59616: PUSH
59617: LD_INT 23
59619: PUSH
59620: LD_INT 24
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: ST_TO_ADDR
59627: GO 59656
59629: LD_INT 47
59631: DOUBLE
59632: EQUAL
59633: IFTRUE 59637
59635: GO 59655
59637: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
59638: LD_ADDR_VAR 0 3
59642: PUSH
59643: LD_INT 23
59645: PUSH
59646: LD_INT 24
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: ST_TO_ADDR
59653: GO 59656
59655: POP
// result := ( chassis in result ) ;
59656: LD_ADDR_VAR 0 3
59660: PUSH
59661: LD_VAR 0 1
59665: PUSH
59666: LD_VAR 0 3
59670: IN
59671: ST_TO_ADDR
// end ;
59672: LD_VAR 0 3
59676: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
59677: LD_INT 0
59679: PPUSH
59680: PPUSH
59681: PPUSH
59682: PPUSH
59683: PPUSH
59684: PPUSH
59685: PPUSH
// result := array ;
59686: LD_ADDR_VAR 0 5
59690: PUSH
59691: LD_VAR 0 1
59695: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
59696: LD_VAR 0 1
59700: NOT
59701: PUSH
59702: LD_VAR 0 2
59706: NOT
59707: OR
59708: PUSH
59709: LD_VAR 0 3
59713: NOT
59714: OR
59715: PUSH
59716: LD_VAR 0 2
59720: PUSH
59721: LD_VAR 0 1
59725: GREATER
59726: OR
59727: PUSH
59728: LD_VAR 0 3
59732: PUSH
59733: LD_VAR 0 1
59737: GREATER
59738: OR
59739: IFFALSE 59743
// exit ;
59741: GO 60039
// if direction then
59743: LD_VAR 0 4
59747: IFFALSE 59811
// begin d := 1 ;
59749: LD_ADDR_VAR 0 9
59753: PUSH
59754: LD_INT 1
59756: ST_TO_ADDR
// if i_from > i_to then
59757: LD_VAR 0 2
59761: PUSH
59762: LD_VAR 0 3
59766: GREATER
59767: IFFALSE 59793
// length := ( array - i_from ) + i_to else
59769: LD_ADDR_VAR 0 11
59773: PUSH
59774: LD_VAR 0 1
59778: PUSH
59779: LD_VAR 0 2
59783: MINUS
59784: PUSH
59785: LD_VAR 0 3
59789: PLUS
59790: ST_TO_ADDR
59791: GO 59809
// length := i_to - i_from ;
59793: LD_ADDR_VAR 0 11
59797: PUSH
59798: LD_VAR 0 3
59802: PUSH
59803: LD_VAR 0 2
59807: MINUS
59808: ST_TO_ADDR
// end else
59809: GO 59872
// begin d := - 1 ;
59811: LD_ADDR_VAR 0 9
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: ST_TO_ADDR
// if i_from > i_to then
59820: LD_VAR 0 2
59824: PUSH
59825: LD_VAR 0 3
59829: GREATER
59830: IFFALSE 59850
// length := i_from - i_to else
59832: LD_ADDR_VAR 0 11
59836: PUSH
59837: LD_VAR 0 2
59841: PUSH
59842: LD_VAR 0 3
59846: MINUS
59847: ST_TO_ADDR
59848: GO 59872
// length := ( array - i_to ) + i_from ;
59850: LD_ADDR_VAR 0 11
59854: PUSH
59855: LD_VAR 0 1
59859: PUSH
59860: LD_VAR 0 3
59864: MINUS
59865: PUSH
59866: LD_VAR 0 2
59870: PLUS
59871: ST_TO_ADDR
// end ; if not length then
59872: LD_VAR 0 11
59876: NOT
59877: IFFALSE 59881
// exit ;
59879: GO 60039
// tmp := array ;
59881: LD_ADDR_VAR 0 10
59885: PUSH
59886: LD_VAR 0 1
59890: ST_TO_ADDR
// for i = 1 to length do
59891: LD_ADDR_VAR 0 6
59895: PUSH
59896: DOUBLE
59897: LD_INT 1
59899: DEC
59900: ST_TO_ADDR
59901: LD_VAR 0 11
59905: PUSH
59906: FOR_TO
59907: IFFALSE 60027
// begin for j = 1 to array do
59909: LD_ADDR_VAR 0 7
59913: PUSH
59914: DOUBLE
59915: LD_INT 1
59917: DEC
59918: ST_TO_ADDR
59919: LD_VAR 0 1
59923: PUSH
59924: FOR_TO
59925: IFFALSE 60013
// begin k := j + d ;
59927: LD_ADDR_VAR 0 8
59931: PUSH
59932: LD_VAR 0 7
59936: PUSH
59937: LD_VAR 0 9
59941: PLUS
59942: ST_TO_ADDR
// if k > array then
59943: LD_VAR 0 8
59947: PUSH
59948: LD_VAR 0 1
59952: GREATER
59953: IFFALSE 59963
// k := 1 ;
59955: LD_ADDR_VAR 0 8
59959: PUSH
59960: LD_INT 1
59962: ST_TO_ADDR
// if not k then
59963: LD_VAR 0 8
59967: NOT
59968: IFFALSE 59980
// k := array ;
59970: LD_ADDR_VAR 0 8
59974: PUSH
59975: LD_VAR 0 1
59979: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59980: LD_ADDR_VAR 0 10
59984: PUSH
59985: LD_VAR 0 10
59989: PPUSH
59990: LD_VAR 0 8
59994: PPUSH
59995: LD_VAR 0 1
59999: PUSH
60000: LD_VAR 0 7
60004: ARRAY
60005: PPUSH
60006: CALL_OW 1
60010: ST_TO_ADDR
// end ;
60011: GO 59924
60013: POP
60014: POP
// array := tmp ;
60015: LD_ADDR_VAR 0 1
60019: PUSH
60020: LD_VAR 0 10
60024: ST_TO_ADDR
// end ;
60025: GO 59906
60027: POP
60028: POP
// result := array ;
60029: LD_ADDR_VAR 0 5
60033: PUSH
60034: LD_VAR 0 1
60038: ST_TO_ADDR
// end ;
60039: LD_VAR 0 5
60043: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
60044: LD_INT 0
60046: PPUSH
60047: PPUSH
// result := 0 ;
60048: LD_ADDR_VAR 0 3
60052: PUSH
60053: LD_INT 0
60055: ST_TO_ADDR
// if not array or not value in array then
60056: LD_VAR 0 1
60060: NOT
60061: PUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_VAR 0 1
60071: IN
60072: NOT
60073: OR
60074: IFFALSE 60078
// exit ;
60076: GO 60132
// for i = 1 to array do
60078: LD_ADDR_VAR 0 4
60082: PUSH
60083: DOUBLE
60084: LD_INT 1
60086: DEC
60087: ST_TO_ADDR
60088: LD_VAR 0 1
60092: PUSH
60093: FOR_TO
60094: IFFALSE 60130
// if value = array [ i ] then
60096: LD_VAR 0 2
60100: PUSH
60101: LD_VAR 0 1
60105: PUSH
60106: LD_VAR 0 4
60110: ARRAY
60111: EQUAL
60112: IFFALSE 60128
// begin result := i ;
60114: LD_ADDR_VAR 0 3
60118: PUSH
60119: LD_VAR 0 4
60123: ST_TO_ADDR
// exit ;
60124: POP
60125: POP
60126: GO 60132
// end ;
60128: GO 60093
60130: POP
60131: POP
// end ;
60132: LD_VAR 0 3
60136: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
60137: LD_INT 0
60139: PPUSH
// vc_chassis := chassis ;
60140: LD_ADDR_OWVAR 37
60144: PUSH
60145: LD_VAR 0 1
60149: ST_TO_ADDR
// vc_engine := engine ;
60150: LD_ADDR_OWVAR 39
60154: PUSH
60155: LD_VAR 0 2
60159: ST_TO_ADDR
// vc_control := control ;
60160: LD_ADDR_OWVAR 38
60164: PUSH
60165: LD_VAR 0 3
60169: ST_TO_ADDR
// vc_weapon := weapon ;
60170: LD_ADDR_OWVAR 40
60174: PUSH
60175: LD_VAR 0 4
60179: ST_TO_ADDR
// vc_fuel_battery := fuel ;
60180: LD_ADDR_OWVAR 41
60184: PUSH
60185: LD_VAR 0 5
60189: ST_TO_ADDR
// end ;
60190: LD_VAR 0 6
60194: RET
// export function WantPlant ( unit ) ; var task ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
// result := false ;
60199: LD_ADDR_VAR 0 2
60203: PUSH
60204: LD_INT 0
60206: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
60207: LD_ADDR_VAR 0 3
60211: PUSH
60212: LD_VAR 0 1
60216: PPUSH
60217: CALL_OW 437
60221: ST_TO_ADDR
// if task then
60222: LD_VAR 0 3
60226: IFFALSE 60254
// if task [ 1 ] [ 1 ] = p then
60228: LD_VAR 0 3
60232: PUSH
60233: LD_INT 1
60235: ARRAY
60236: PUSH
60237: LD_INT 1
60239: ARRAY
60240: PUSH
60241: LD_STRING p
60243: EQUAL
60244: IFFALSE 60254
// result := true ;
60246: LD_ADDR_VAR 0 2
60250: PUSH
60251: LD_INT 1
60253: ST_TO_ADDR
// end ;
60254: LD_VAR 0 2
60258: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
60259: LD_INT 0
60261: PPUSH
60262: PPUSH
60263: PPUSH
60264: PPUSH
// if pos < 1 then
60265: LD_VAR 0 2
60269: PUSH
60270: LD_INT 1
60272: LESS
60273: IFFALSE 60277
// exit ;
60275: GO 60580
// if pos = 1 then
60277: LD_VAR 0 2
60281: PUSH
60282: LD_INT 1
60284: EQUAL
60285: IFFALSE 60318
// result := Replace ( arr , pos [ 1 ] , value ) else
60287: LD_ADDR_VAR 0 4
60291: PUSH
60292: LD_VAR 0 1
60296: PPUSH
60297: LD_VAR 0 2
60301: PUSH
60302: LD_INT 1
60304: ARRAY
60305: PPUSH
60306: LD_VAR 0 3
60310: PPUSH
60311: CALL_OW 1
60315: ST_TO_ADDR
60316: GO 60580
// begin tmp := arr ;
60318: LD_ADDR_VAR 0 6
60322: PUSH
60323: LD_VAR 0 1
60327: ST_TO_ADDR
// s_arr := [ tmp ] ;
60328: LD_ADDR_VAR 0 7
60332: PUSH
60333: LD_VAR 0 6
60337: PUSH
60338: EMPTY
60339: LIST
60340: ST_TO_ADDR
// for i = 1 to pos - 1 do
60341: LD_ADDR_VAR 0 5
60345: PUSH
60346: DOUBLE
60347: LD_INT 1
60349: DEC
60350: ST_TO_ADDR
60351: LD_VAR 0 2
60355: PUSH
60356: LD_INT 1
60358: MINUS
60359: PUSH
60360: FOR_TO
60361: IFFALSE 60406
// begin tmp := tmp [ pos [ i ] ] ;
60363: LD_ADDR_VAR 0 6
60367: PUSH
60368: LD_VAR 0 6
60372: PUSH
60373: LD_VAR 0 2
60377: PUSH
60378: LD_VAR 0 5
60382: ARRAY
60383: ARRAY
60384: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
60385: LD_ADDR_VAR 0 7
60389: PUSH
60390: LD_VAR 0 7
60394: PUSH
60395: LD_VAR 0 6
60399: PUSH
60400: EMPTY
60401: LIST
60402: ADD
60403: ST_TO_ADDR
// end ;
60404: GO 60360
60406: POP
60407: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
60408: LD_ADDR_VAR 0 6
60412: PUSH
60413: LD_VAR 0 6
60417: PPUSH
60418: LD_VAR 0 2
60422: PUSH
60423: LD_VAR 0 2
60427: ARRAY
60428: PPUSH
60429: LD_VAR 0 3
60433: PPUSH
60434: CALL_OW 1
60438: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
60439: LD_ADDR_VAR 0 7
60443: PUSH
60444: LD_VAR 0 7
60448: PPUSH
60449: LD_VAR 0 7
60453: PPUSH
60454: LD_VAR 0 6
60458: PPUSH
60459: CALL_OW 1
60463: ST_TO_ADDR
// for i = s_arr downto 2 do
60464: LD_ADDR_VAR 0 5
60468: PUSH
60469: DOUBLE
60470: LD_VAR 0 7
60474: INC
60475: ST_TO_ADDR
60476: LD_INT 2
60478: PUSH
60479: FOR_DOWNTO
60480: IFFALSE 60564
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
60482: LD_ADDR_VAR 0 6
60486: PUSH
60487: LD_VAR 0 7
60491: PUSH
60492: LD_VAR 0 5
60496: PUSH
60497: LD_INT 1
60499: MINUS
60500: ARRAY
60501: PPUSH
60502: LD_VAR 0 2
60506: PUSH
60507: LD_VAR 0 5
60511: PUSH
60512: LD_INT 1
60514: MINUS
60515: ARRAY
60516: PPUSH
60517: LD_VAR 0 7
60521: PUSH
60522: LD_VAR 0 5
60526: ARRAY
60527: PPUSH
60528: CALL_OW 1
60532: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
60533: LD_ADDR_VAR 0 7
60537: PUSH
60538: LD_VAR 0 7
60542: PPUSH
60543: LD_VAR 0 5
60547: PUSH
60548: LD_INT 1
60550: MINUS
60551: PPUSH
60552: LD_VAR 0 6
60556: PPUSH
60557: CALL_OW 1
60561: ST_TO_ADDR
// end ;
60562: GO 60479
60564: POP
60565: POP
// result := s_arr [ 1 ] ;
60566: LD_ADDR_VAR 0 4
60570: PUSH
60571: LD_VAR 0 7
60575: PUSH
60576: LD_INT 1
60578: ARRAY
60579: ST_TO_ADDR
// end ; end ;
60580: LD_VAR 0 4
60584: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
60585: LD_INT 0
60587: PPUSH
60588: PPUSH
// if not list then
60589: LD_VAR 0 1
60593: NOT
60594: IFFALSE 60598
// exit ;
60596: GO 60689
// i := list [ pos1 ] ;
60598: LD_ADDR_VAR 0 5
60602: PUSH
60603: LD_VAR 0 1
60607: PUSH
60608: LD_VAR 0 2
60612: ARRAY
60613: ST_TO_ADDR
// if not i then
60614: LD_VAR 0 5
60618: NOT
60619: IFFALSE 60623
// exit ;
60621: GO 60689
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
60623: LD_ADDR_VAR 0 1
60627: PUSH
60628: LD_VAR 0 1
60632: PPUSH
60633: LD_VAR 0 2
60637: PPUSH
60638: LD_VAR 0 1
60642: PUSH
60643: LD_VAR 0 3
60647: ARRAY
60648: PPUSH
60649: CALL_OW 1
60653: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
60654: LD_ADDR_VAR 0 1
60658: PUSH
60659: LD_VAR 0 1
60663: PPUSH
60664: LD_VAR 0 3
60668: PPUSH
60669: LD_VAR 0 5
60673: PPUSH
60674: CALL_OW 1
60678: ST_TO_ADDR
// result := list ;
60679: LD_ADDR_VAR 0 4
60683: PUSH
60684: LD_VAR 0 1
60688: ST_TO_ADDR
// end ;
60689: LD_VAR 0 4
60693: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
60694: LD_INT 0
60696: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
60697: LD_ADDR_VAR 0 5
60701: PUSH
60702: LD_VAR 0 1
60706: PPUSH
60707: CALL_OW 250
60711: PPUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 251
60721: PPUSH
60722: LD_VAR 0 2
60726: PPUSH
60727: LD_VAR 0 3
60731: PPUSH
60732: LD_VAR 0 4
60736: PPUSH
60737: CALL 61115 0 5
60741: ST_TO_ADDR
// end ;
60742: LD_VAR 0 5
60746: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
60747: LD_INT 0
60749: PPUSH
60750: PPUSH
60751: PPUSH
60752: PPUSH
// if not list or not unit then
60753: LD_VAR 0 2
60757: NOT
60758: PUSH
60759: LD_VAR 0 1
60763: NOT
60764: OR
60765: IFFALSE 60769
// exit ;
60767: GO 61110
// result := [ ] ;
60769: LD_ADDR_VAR 0 5
60773: PUSH
60774: EMPTY
60775: ST_TO_ADDR
// for i in list do
60776: LD_ADDR_VAR 0 6
60780: PUSH
60781: LD_VAR 0 2
60785: PUSH
60786: FOR_IN
60787: IFFALSE 61005
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60789: LD_ADDR_VAR 0 8
60793: PUSH
60794: LD_VAR 0 1
60798: PPUSH
60799: LD_VAR 0 6
60803: PUSH
60804: LD_INT 1
60806: ARRAY
60807: PPUSH
60808: LD_VAR 0 6
60812: PUSH
60813: LD_INT 2
60815: ARRAY
60816: PPUSH
60817: CALL_OW 297
60821: ST_TO_ADDR
// if not Count ( result ) then
60822: LD_VAR 0 5
60826: PPUSH
60827: CALL 57399 0 1
60831: NOT
60832: IFFALSE 60865
// begin result := Join ( result , [ i , tmp ] ) ;
60834: LD_ADDR_VAR 0 5
60838: PUSH
60839: LD_VAR 0 5
60843: PPUSH
60844: LD_VAR 0 6
60848: PUSH
60849: LD_VAR 0 8
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PPUSH
60858: CALL 93008 0 2
60862: ST_TO_ADDR
// continue ;
60863: GO 60786
// end ; if result [ result ] [ 2 ] <= tmp then
60865: LD_VAR 0 5
60869: PUSH
60870: LD_VAR 0 5
60874: ARRAY
60875: PUSH
60876: LD_INT 2
60878: ARRAY
60879: PUSH
60880: LD_VAR 0 8
60884: LESSEQUAL
60885: IFFALSE 60918
// result := Join ( result , [ i , tmp ] ) else
60887: LD_ADDR_VAR 0 5
60891: PUSH
60892: LD_VAR 0 5
60896: PPUSH
60897: LD_VAR 0 6
60901: PUSH
60902: LD_VAR 0 8
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PPUSH
60911: CALL 93008 0 2
60915: ST_TO_ADDR
60916: GO 61003
// begin for j := 1 to Count ( result ) do
60918: LD_ADDR_VAR 0 7
60922: PUSH
60923: DOUBLE
60924: LD_INT 1
60926: DEC
60927: ST_TO_ADDR
60928: LD_VAR 0 5
60932: PPUSH
60933: CALL 57399 0 1
60937: PUSH
60938: FOR_TO
60939: IFFALSE 61001
// begin if tmp < result [ j ] [ 2 ] then
60941: LD_VAR 0 8
60945: PUSH
60946: LD_VAR 0 5
60950: PUSH
60951: LD_VAR 0 7
60955: ARRAY
60956: PUSH
60957: LD_INT 2
60959: ARRAY
60960: LESS
60961: IFFALSE 60999
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60963: LD_ADDR_VAR 0 5
60967: PUSH
60968: LD_VAR 0 5
60972: PPUSH
60973: LD_VAR 0 7
60977: PPUSH
60978: LD_VAR 0 6
60982: PUSH
60983: LD_VAR 0 8
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PPUSH
60992: CALL_OW 2
60996: ST_TO_ADDR
// break ;
60997: GO 61001
// end ; end ;
60999: GO 60938
61001: POP
61002: POP
// end ; end ;
61003: GO 60786
61005: POP
61006: POP
// if result and not asc then
61007: LD_VAR 0 5
61011: PUSH
61012: LD_VAR 0 3
61016: NOT
61017: AND
61018: IFFALSE 61035
// result := ReverseArray ( result ) ;
61020: LD_ADDR_VAR 0 5
61024: PUSH
61025: LD_VAR 0 5
61029: PPUSH
61030: CALL 88275 0 1
61034: ST_TO_ADDR
// tmp := [ ] ;
61035: LD_ADDR_VAR 0 8
61039: PUSH
61040: EMPTY
61041: ST_TO_ADDR
// if mode then
61042: LD_VAR 0 4
61046: IFFALSE 61110
// begin for i := 1 to result do
61048: LD_ADDR_VAR 0 6
61052: PUSH
61053: DOUBLE
61054: LD_INT 1
61056: DEC
61057: ST_TO_ADDR
61058: LD_VAR 0 5
61062: PUSH
61063: FOR_TO
61064: IFFALSE 61098
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
61066: LD_ADDR_VAR 0 8
61070: PUSH
61071: LD_VAR 0 8
61075: PPUSH
61076: LD_VAR 0 5
61080: PUSH
61081: LD_VAR 0 6
61085: ARRAY
61086: PUSH
61087: LD_INT 1
61089: ARRAY
61090: PPUSH
61091: CALL 93008 0 2
61095: ST_TO_ADDR
61096: GO 61063
61098: POP
61099: POP
// result := tmp ;
61100: LD_ADDR_VAR 0 5
61104: PUSH
61105: LD_VAR 0 8
61109: ST_TO_ADDR
// end ; end ;
61110: LD_VAR 0 5
61114: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
61115: LD_INT 0
61117: PPUSH
61118: PPUSH
61119: PPUSH
61120: PPUSH
// if not list then
61121: LD_VAR 0 3
61125: NOT
61126: IFFALSE 61130
// exit ;
61128: GO 61518
// result := [ ] ;
61130: LD_ADDR_VAR 0 6
61134: PUSH
61135: EMPTY
61136: ST_TO_ADDR
// for i in list do
61137: LD_ADDR_VAR 0 7
61141: PUSH
61142: LD_VAR 0 3
61146: PUSH
61147: FOR_IN
61148: IFFALSE 61350
// begin tmp := GetDistUnitXY ( i , x , y ) ;
61150: LD_ADDR_VAR 0 9
61154: PUSH
61155: LD_VAR 0 7
61159: PPUSH
61160: LD_VAR 0 1
61164: PPUSH
61165: LD_VAR 0 2
61169: PPUSH
61170: CALL_OW 297
61174: ST_TO_ADDR
// if not result then
61175: LD_VAR 0 6
61179: NOT
61180: IFFALSE 61206
// result := [ [ i , tmp ] ] else
61182: LD_ADDR_VAR 0 6
61186: PUSH
61187: LD_VAR 0 7
61191: PUSH
61192: LD_VAR 0 9
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: ST_TO_ADDR
61204: GO 61348
// begin if result [ result ] [ 2 ] <= tmp then
61206: LD_VAR 0 6
61210: PUSH
61211: LD_VAR 0 6
61215: ARRAY
61216: PUSH
61217: LD_INT 2
61219: ARRAY
61220: PUSH
61221: LD_VAR 0 9
61225: LESSEQUAL
61226: IFFALSE 61268
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
61228: LD_ADDR_VAR 0 6
61232: PUSH
61233: LD_VAR 0 6
61237: PPUSH
61238: LD_VAR 0 6
61242: PUSH
61243: LD_INT 1
61245: PLUS
61246: PPUSH
61247: LD_VAR 0 7
61251: PUSH
61252: LD_VAR 0 9
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PPUSH
61261: CALL_OW 2
61265: ST_TO_ADDR
61266: GO 61348
// for j := 1 to result do
61268: LD_ADDR_VAR 0 8
61272: PUSH
61273: DOUBLE
61274: LD_INT 1
61276: DEC
61277: ST_TO_ADDR
61278: LD_VAR 0 6
61282: PUSH
61283: FOR_TO
61284: IFFALSE 61346
// begin if tmp < result [ j ] [ 2 ] then
61286: LD_VAR 0 9
61290: PUSH
61291: LD_VAR 0 6
61295: PUSH
61296: LD_VAR 0 8
61300: ARRAY
61301: PUSH
61302: LD_INT 2
61304: ARRAY
61305: LESS
61306: IFFALSE 61344
// begin result := Insert ( result , j , [ i , tmp ] ) ;
61308: LD_ADDR_VAR 0 6
61312: PUSH
61313: LD_VAR 0 6
61317: PPUSH
61318: LD_VAR 0 8
61322: PPUSH
61323: LD_VAR 0 7
61327: PUSH
61328: LD_VAR 0 9
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PPUSH
61337: CALL_OW 2
61341: ST_TO_ADDR
// break ;
61342: GO 61346
// end ; end ;
61344: GO 61283
61346: POP
61347: POP
// end ; end ;
61348: GO 61147
61350: POP
61351: POP
// if result and not asc then
61352: LD_VAR 0 6
61356: PUSH
61357: LD_VAR 0 4
61361: NOT
61362: AND
61363: IFFALSE 61438
// begin tmp := result ;
61365: LD_ADDR_VAR 0 9
61369: PUSH
61370: LD_VAR 0 6
61374: ST_TO_ADDR
// for i = tmp downto 1 do
61375: LD_ADDR_VAR 0 7
61379: PUSH
61380: DOUBLE
61381: LD_VAR 0 9
61385: INC
61386: ST_TO_ADDR
61387: LD_INT 1
61389: PUSH
61390: FOR_DOWNTO
61391: IFFALSE 61436
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
61393: LD_ADDR_VAR 0 6
61397: PUSH
61398: LD_VAR 0 6
61402: PPUSH
61403: LD_VAR 0 9
61407: PUSH
61408: LD_VAR 0 7
61412: MINUS
61413: PUSH
61414: LD_INT 1
61416: PLUS
61417: PPUSH
61418: LD_VAR 0 9
61422: PUSH
61423: LD_VAR 0 7
61427: ARRAY
61428: PPUSH
61429: CALL_OW 1
61433: ST_TO_ADDR
61434: GO 61390
61436: POP
61437: POP
// end ; tmp := [ ] ;
61438: LD_ADDR_VAR 0 9
61442: PUSH
61443: EMPTY
61444: ST_TO_ADDR
// if mode then
61445: LD_VAR 0 5
61449: IFFALSE 61518
// begin for i = 1 to result do
61451: LD_ADDR_VAR 0 7
61455: PUSH
61456: DOUBLE
61457: LD_INT 1
61459: DEC
61460: ST_TO_ADDR
61461: LD_VAR 0 6
61465: PUSH
61466: FOR_TO
61467: IFFALSE 61506
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
61469: LD_ADDR_VAR 0 9
61473: PUSH
61474: LD_VAR 0 9
61478: PPUSH
61479: LD_VAR 0 7
61483: PPUSH
61484: LD_VAR 0 6
61488: PUSH
61489: LD_VAR 0 7
61493: ARRAY
61494: PUSH
61495: LD_INT 1
61497: ARRAY
61498: PPUSH
61499: CALL_OW 1
61503: ST_TO_ADDR
61504: GO 61466
61506: POP
61507: POP
// result := tmp ;
61508: LD_ADDR_VAR 0 6
61512: PUSH
61513: LD_VAR 0 9
61517: ST_TO_ADDR
// end ; end ;
61518: LD_VAR 0 6
61522: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
61523: LD_INT 0
61525: PPUSH
61526: PPUSH
61527: PPUSH
61528: PPUSH
61529: PPUSH
61530: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
61531: LD_ADDR_VAR 0 5
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// if not x or not y then
61553: LD_VAR 0 2
61557: NOT
61558: PUSH
61559: LD_VAR 0 3
61563: NOT
61564: OR
61565: IFFALSE 61569
// exit ;
61567: GO 63219
// if not range then
61569: LD_VAR 0 4
61573: NOT
61574: IFFALSE 61584
// range := 10 ;
61576: LD_ADDR_VAR 0 4
61580: PUSH
61581: LD_INT 10
61583: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
61584: LD_ADDR_VAR 0 8
61588: PUSH
61589: LD_INT 81
61591: PUSH
61592: LD_VAR 0 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 92
61603: PUSH
61604: LD_VAR 0 2
61608: PUSH
61609: LD_VAR 0 3
61613: PUSH
61614: LD_VAR 0 4
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 3
61627: PUSH
61628: LD_INT 21
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: PPUSH
61647: CALL_OW 69
61651: ST_TO_ADDR
// if not tmp then
61652: LD_VAR 0 8
61656: NOT
61657: IFFALSE 61661
// exit ;
61659: GO 63219
// for i in tmp do
61661: LD_ADDR_VAR 0 6
61665: PUSH
61666: LD_VAR 0 8
61670: PUSH
61671: FOR_IN
61672: IFFALSE 63194
// begin points := [ 0 , 0 , 0 ] ;
61674: LD_ADDR_VAR 0 9
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: ST_TO_ADDR
// bpoints := 1 ;
61693: LD_ADDR_VAR 0 10
61697: PUSH
61698: LD_INT 1
61700: ST_TO_ADDR
// case GetType ( i ) of unit_human :
61701: LD_VAR 0 6
61705: PPUSH
61706: CALL_OW 247
61710: PUSH
61711: LD_INT 1
61713: DOUBLE
61714: EQUAL
61715: IFTRUE 61719
61717: GO 62297
61719: POP
// begin if GetClass ( i ) = 1 then
61720: LD_VAR 0 6
61724: PPUSH
61725: CALL_OW 257
61729: PUSH
61730: LD_INT 1
61732: EQUAL
61733: IFFALSE 61754
// points := [ 10 , 5 , 3 ] ;
61735: LD_ADDR_VAR 0 9
61739: PUSH
61740: LD_INT 10
61742: PUSH
61743: LD_INT 5
61745: PUSH
61746: LD_INT 3
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: LIST
61753: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
61754: LD_VAR 0 6
61758: PPUSH
61759: CALL_OW 257
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: LD_INT 4
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: IN
61778: IFFALSE 61799
// points := [ 3 , 2 , 1 ] ;
61780: LD_ADDR_VAR 0 9
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61799: LD_VAR 0 6
61803: PPUSH
61804: CALL_OW 257
61808: PUSH
61809: LD_INT 5
61811: EQUAL
61812: IFFALSE 61833
// points := [ 130 , 5 , 2 ] ;
61814: LD_ADDR_VAR 0 9
61818: PUSH
61819: LD_INT 130
61821: PUSH
61822: LD_INT 5
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61833: LD_VAR 0 6
61837: PPUSH
61838: CALL_OW 257
61842: PUSH
61843: LD_INT 8
61845: EQUAL
61846: IFFALSE 61867
// points := [ 35 , 35 , 30 ] ;
61848: LD_ADDR_VAR 0 9
61852: PUSH
61853: LD_INT 35
61855: PUSH
61856: LD_INT 35
61858: PUSH
61859: LD_INT 30
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61867: LD_VAR 0 6
61871: PPUSH
61872: CALL_OW 257
61876: PUSH
61877: LD_INT 9
61879: EQUAL
61880: IFFALSE 61901
// points := [ 20 , 55 , 40 ] ;
61882: LD_ADDR_VAR 0 9
61886: PUSH
61887: LD_INT 20
61889: PUSH
61890: LD_INT 55
61892: PUSH
61893: LD_INT 40
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61901: LD_VAR 0 6
61905: PPUSH
61906: CALL_OW 257
61910: PUSH
61911: LD_INT 12
61913: PUSH
61914: LD_INT 16
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: IN
61921: IFFALSE 61942
// points := [ 5 , 3 , 2 ] ;
61923: LD_ADDR_VAR 0 9
61927: PUSH
61928: LD_INT 5
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61942: LD_VAR 0 6
61946: PPUSH
61947: CALL_OW 257
61951: PUSH
61952: LD_INT 17
61954: EQUAL
61955: IFFALSE 61976
// points := [ 100 , 50 , 75 ] ;
61957: LD_ADDR_VAR 0 9
61961: PUSH
61962: LD_INT 100
61964: PUSH
61965: LD_INT 50
61967: PUSH
61968: LD_INT 75
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61976: LD_VAR 0 6
61980: PPUSH
61981: CALL_OW 257
61985: PUSH
61986: LD_INT 15
61988: EQUAL
61989: IFFALSE 62010
// points := [ 10 , 5 , 3 ] ;
61991: LD_ADDR_VAR 0 9
61995: PUSH
61996: LD_INT 10
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// if GetClass ( i ) = 14 then
62010: LD_VAR 0 6
62014: PPUSH
62015: CALL_OW 257
62019: PUSH
62020: LD_INT 14
62022: EQUAL
62023: IFFALSE 62044
// points := [ 10 , 0 , 0 ] ;
62025: LD_ADDR_VAR 0 9
62029: PUSH
62030: LD_INT 10
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: ST_TO_ADDR
// if GetClass ( i ) = 11 then
62044: LD_VAR 0 6
62048: PPUSH
62049: CALL_OW 257
62053: PUSH
62054: LD_INT 11
62056: EQUAL
62057: IFFALSE 62078
// points := [ 30 , 10 , 5 ] ;
62059: LD_ADDR_VAR 0 9
62063: PUSH
62064: LD_INT 30
62066: PUSH
62067: LD_INT 10
62069: PUSH
62070: LD_INT 5
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
62078: LD_VAR 0 1
62082: PPUSH
62083: LD_INT 5
62085: PPUSH
62086: CALL_OW 321
62090: PUSH
62091: LD_INT 2
62093: EQUAL
62094: IFFALSE 62111
// bpoints := bpoints * 1.8 ;
62096: LD_ADDR_VAR 0 10
62100: PUSH
62101: LD_VAR 0 10
62105: PUSH
62106: LD_REAL  1.80000000000000E+0000
62109: MUL
62110: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
62111: LD_VAR 0 6
62115: PPUSH
62116: CALL_OW 257
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: IN
62139: PUSH
62140: LD_VAR 0 1
62144: PPUSH
62145: LD_INT 51
62147: PPUSH
62148: CALL_OW 321
62152: PUSH
62153: LD_INT 2
62155: EQUAL
62156: AND
62157: IFFALSE 62174
// bpoints := bpoints * 1.2 ;
62159: LD_ADDR_VAR 0 10
62163: PUSH
62164: LD_VAR 0 10
62168: PUSH
62169: LD_REAL  1.20000000000000E+0000
62172: MUL
62173: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
62174: LD_VAR 0 6
62178: PPUSH
62179: CALL_OW 257
62183: PUSH
62184: LD_INT 5
62186: PUSH
62187: LD_INT 7
62189: PUSH
62190: LD_INT 9
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: IN
62198: PUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: LD_INT 52
62206: PPUSH
62207: CALL_OW 321
62211: PUSH
62212: LD_INT 2
62214: EQUAL
62215: AND
62216: IFFALSE 62233
// bpoints := bpoints * 1.5 ;
62218: LD_ADDR_VAR 0 10
62222: PUSH
62223: LD_VAR 0 10
62227: PUSH
62228: LD_REAL  1.50000000000000E+0000
62231: MUL
62232: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
62233: LD_VAR 0 1
62237: PPUSH
62238: LD_INT 66
62240: PPUSH
62241: CALL_OW 321
62245: PUSH
62246: LD_INT 2
62248: EQUAL
62249: IFFALSE 62266
// bpoints := bpoints * 1.1 ;
62251: LD_ADDR_VAR 0 10
62255: PUSH
62256: LD_VAR 0 10
62260: PUSH
62261: LD_REAL  1.10000000000000E+0000
62264: MUL
62265: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
62266: LD_ADDR_VAR 0 10
62270: PUSH
62271: LD_VAR 0 10
62275: PUSH
62276: LD_VAR 0 6
62280: PPUSH
62281: LD_INT 1
62283: PPUSH
62284: CALL_OW 259
62288: PUSH
62289: LD_REAL  1.15000000000000E+0000
62292: MUL
62293: MUL
62294: ST_TO_ADDR
// end ; unit_vehicle :
62295: GO 63123
62297: LD_INT 2
62299: DOUBLE
62300: EQUAL
62301: IFTRUE 62305
62303: GO 63111
62305: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
62306: LD_VAR 0 6
62310: PPUSH
62311: CALL_OW 264
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: LD_INT 42
62321: PUSH
62322: LD_INT 24
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: IN
62330: IFFALSE 62351
// points := [ 25 , 5 , 3 ] ;
62332: LD_ADDR_VAR 0 9
62336: PUSH
62337: LD_INT 25
62339: PUSH
62340: LD_INT 5
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
62351: LD_VAR 0 6
62355: PPUSH
62356: CALL_OW 264
62360: PUSH
62361: LD_INT 4
62363: PUSH
62364: LD_INT 43
62366: PUSH
62367: LD_INT 25
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: IN
62375: IFFALSE 62396
// points := [ 40 , 15 , 5 ] ;
62377: LD_ADDR_VAR 0 9
62381: PUSH
62382: LD_INT 40
62384: PUSH
62385: LD_INT 15
62387: PUSH
62388: LD_INT 5
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
62396: LD_VAR 0 6
62400: PPUSH
62401: CALL_OW 264
62405: PUSH
62406: LD_INT 3
62408: PUSH
62409: LD_INT 23
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: IN
62416: IFFALSE 62437
// points := [ 7 , 25 , 8 ] ;
62418: LD_ADDR_VAR 0 9
62422: PUSH
62423: LD_INT 7
62425: PUSH
62426: LD_INT 25
62428: PUSH
62429: LD_INT 8
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
62437: LD_VAR 0 6
62441: PPUSH
62442: CALL_OW 264
62446: PUSH
62447: LD_INT 5
62449: PUSH
62450: LD_INT 27
62452: PUSH
62453: LD_INT 44
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: IN
62461: IFFALSE 62482
// points := [ 14 , 50 , 16 ] ;
62463: LD_ADDR_VAR 0 9
62467: PUSH
62468: LD_INT 14
62470: PUSH
62471: LD_INT 50
62473: PUSH
62474: LD_INT 16
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
62482: LD_VAR 0 6
62486: PPUSH
62487: CALL_OW 264
62491: PUSH
62492: LD_INT 6
62494: PUSH
62495: LD_INT 46
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: IN
62502: IFFALSE 62523
// points := [ 32 , 120 , 70 ] ;
62504: LD_ADDR_VAR 0 9
62508: PUSH
62509: LD_INT 32
62511: PUSH
62512: LD_INT 120
62514: PUSH
62515: LD_INT 70
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: LIST
62522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
62523: LD_VAR 0 6
62527: PPUSH
62528: CALL_OW 264
62532: PUSH
62533: LD_INT 7
62535: PUSH
62536: LD_INT 28
62538: PUSH
62539: LD_INT 45
62541: PUSH
62542: LD_INT 92
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: IN
62551: IFFALSE 62572
// points := [ 35 , 20 , 45 ] ;
62553: LD_ADDR_VAR 0 9
62557: PUSH
62558: LD_INT 35
62560: PUSH
62561: LD_INT 20
62563: PUSH
62564: LD_INT 45
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
62572: LD_VAR 0 6
62576: PPUSH
62577: CALL_OW 264
62581: PUSH
62582: LD_INT 47
62584: PUSH
62585: EMPTY
62586: LIST
62587: IN
62588: IFFALSE 62609
// points := [ 67 , 45 , 75 ] ;
62590: LD_ADDR_VAR 0 9
62594: PUSH
62595: LD_INT 67
62597: PUSH
62598: LD_INT 45
62600: PUSH
62601: LD_INT 75
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
62609: LD_VAR 0 6
62613: PPUSH
62614: CALL_OW 264
62618: PUSH
62619: LD_INT 26
62621: PUSH
62622: EMPTY
62623: LIST
62624: IN
62625: IFFALSE 62646
// points := [ 120 , 30 , 80 ] ;
62627: LD_ADDR_VAR 0 9
62631: PUSH
62632: LD_INT 120
62634: PUSH
62635: LD_INT 30
62637: PUSH
62638: LD_INT 80
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
62646: LD_VAR 0 6
62650: PPUSH
62651: CALL_OW 264
62655: PUSH
62656: LD_INT 22
62658: PUSH
62659: EMPTY
62660: LIST
62661: IN
62662: IFFALSE 62683
// points := [ 40 , 1 , 1 ] ;
62664: LD_ADDR_VAR 0 9
62668: PUSH
62669: LD_INT 40
62671: PUSH
62672: LD_INT 1
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
62683: LD_VAR 0 6
62687: PPUSH
62688: CALL_OW 264
62692: PUSH
62693: LD_INT 29
62695: PUSH
62696: EMPTY
62697: LIST
62698: IN
62699: IFFALSE 62720
// points := [ 70 , 200 , 400 ] ;
62701: LD_ADDR_VAR 0 9
62705: PUSH
62706: LD_INT 70
62708: PUSH
62709: LD_INT 200
62711: PUSH
62712: LD_INT 400
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: LIST
62719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
62720: LD_VAR 0 6
62724: PPUSH
62725: CALL_OW 264
62729: PUSH
62730: LD_INT 14
62732: PUSH
62733: LD_INT 53
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: IN
62740: IFFALSE 62761
// points := [ 40 , 10 , 20 ] ;
62742: LD_ADDR_VAR 0 9
62746: PUSH
62747: LD_INT 40
62749: PUSH
62750: LD_INT 10
62752: PUSH
62753: LD_INT 20
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: LIST
62760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
62761: LD_VAR 0 6
62765: PPUSH
62766: CALL_OW 264
62770: PUSH
62771: LD_INT 9
62773: PUSH
62774: EMPTY
62775: LIST
62776: IN
62777: IFFALSE 62798
// points := [ 5 , 70 , 20 ] ;
62779: LD_ADDR_VAR 0 9
62783: PUSH
62784: LD_INT 5
62786: PUSH
62787: LD_INT 70
62789: PUSH
62790: LD_INT 20
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62798: LD_VAR 0 6
62802: PPUSH
62803: CALL_OW 264
62807: PUSH
62808: LD_INT 10
62810: PUSH
62811: EMPTY
62812: LIST
62813: IN
62814: IFFALSE 62835
// points := [ 35 , 110 , 70 ] ;
62816: LD_ADDR_VAR 0 9
62820: PUSH
62821: LD_INT 35
62823: PUSH
62824: LD_INT 110
62826: PUSH
62827: LD_INT 70
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: LIST
62834: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62835: LD_VAR 0 6
62839: PPUSH
62840: CALL_OW 265
62844: PUSH
62845: LD_INT 25
62847: EQUAL
62848: IFFALSE 62869
// points := [ 80 , 65 , 100 ] ;
62850: LD_ADDR_VAR 0 9
62854: PUSH
62855: LD_INT 80
62857: PUSH
62858: LD_INT 65
62860: PUSH
62861: LD_INT 100
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62869: LD_VAR 0 6
62873: PPUSH
62874: CALL_OW 263
62878: PUSH
62879: LD_INT 1
62881: EQUAL
62882: IFFALSE 62917
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62884: LD_ADDR_VAR 0 10
62888: PUSH
62889: LD_VAR 0 10
62893: PUSH
62894: LD_VAR 0 6
62898: PPUSH
62899: CALL_OW 311
62903: PPUSH
62904: LD_INT 3
62906: PPUSH
62907: CALL_OW 259
62911: PUSH
62912: LD_INT 4
62914: MUL
62915: MUL
62916: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62917: LD_VAR 0 6
62921: PPUSH
62922: CALL_OW 263
62926: PUSH
62927: LD_INT 2
62929: EQUAL
62930: IFFALSE 62981
// begin j := IsControledBy ( i ) ;
62932: LD_ADDR_VAR 0 7
62936: PUSH
62937: LD_VAR 0 6
62941: PPUSH
62942: CALL_OW 312
62946: ST_TO_ADDR
// if j then
62947: LD_VAR 0 7
62951: IFFALSE 62981
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62953: LD_ADDR_VAR 0 10
62957: PUSH
62958: LD_VAR 0 10
62962: PUSH
62963: LD_VAR 0 7
62967: PPUSH
62968: LD_INT 3
62970: PPUSH
62971: CALL_OW 259
62975: PUSH
62976: LD_INT 3
62978: MUL
62979: MUL
62980: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62981: LD_VAR 0 6
62985: PPUSH
62986: CALL_OW 264
62990: PUSH
62991: LD_INT 5
62993: PUSH
62994: LD_INT 6
62996: PUSH
62997: LD_INT 46
62999: PUSH
63000: LD_INT 44
63002: PUSH
63003: LD_INT 47
63005: PUSH
63006: LD_INT 45
63008: PUSH
63009: LD_INT 28
63011: PUSH
63012: LD_INT 7
63014: PUSH
63015: LD_INT 27
63017: PUSH
63018: LD_INT 29
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: IN
63033: PUSH
63034: LD_VAR 0 1
63038: PPUSH
63039: LD_INT 52
63041: PPUSH
63042: CALL_OW 321
63046: PUSH
63047: LD_INT 2
63049: EQUAL
63050: AND
63051: IFFALSE 63068
// bpoints := bpoints * 1.2 ;
63053: LD_ADDR_VAR 0 10
63057: PUSH
63058: LD_VAR 0 10
63062: PUSH
63063: LD_REAL  1.20000000000000E+0000
63066: MUL
63067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
63068: LD_VAR 0 6
63072: PPUSH
63073: CALL_OW 264
63077: PUSH
63078: LD_INT 6
63080: PUSH
63081: LD_INT 46
63083: PUSH
63084: LD_INT 47
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: IN
63092: IFFALSE 63109
// bpoints := bpoints * 1.2 ;
63094: LD_ADDR_VAR 0 10
63098: PUSH
63099: LD_VAR 0 10
63103: PUSH
63104: LD_REAL  1.20000000000000E+0000
63107: MUL
63108: ST_TO_ADDR
// end ; unit_building :
63109: GO 63123
63111: LD_INT 3
63113: DOUBLE
63114: EQUAL
63115: IFTRUE 63119
63117: GO 63122
63119: POP
// ; end ;
63120: GO 63123
63122: POP
// for j = 1 to 3 do
63123: LD_ADDR_VAR 0 7
63127: PUSH
63128: DOUBLE
63129: LD_INT 1
63131: DEC
63132: ST_TO_ADDR
63133: LD_INT 3
63135: PUSH
63136: FOR_TO
63137: IFFALSE 63190
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
63139: LD_ADDR_VAR 0 5
63143: PUSH
63144: LD_VAR 0 5
63148: PPUSH
63149: LD_VAR 0 7
63153: PPUSH
63154: LD_VAR 0 5
63158: PUSH
63159: LD_VAR 0 7
63163: ARRAY
63164: PUSH
63165: LD_VAR 0 9
63169: PUSH
63170: LD_VAR 0 7
63174: ARRAY
63175: PUSH
63176: LD_VAR 0 10
63180: MUL
63181: PLUS
63182: PPUSH
63183: CALL_OW 1
63187: ST_TO_ADDR
63188: GO 63136
63190: POP
63191: POP
// end ;
63192: GO 61671
63194: POP
63195: POP
// result := Replace ( result , 4 , tmp ) ;
63196: LD_ADDR_VAR 0 5
63200: PUSH
63201: LD_VAR 0 5
63205: PPUSH
63206: LD_INT 4
63208: PPUSH
63209: LD_VAR 0 8
63213: PPUSH
63214: CALL_OW 1
63218: ST_TO_ADDR
// end ;
63219: LD_VAR 0 5
63223: RET
// export function DangerAtRange ( unit , range ) ; begin
63224: LD_INT 0
63226: PPUSH
// if not unit then
63227: LD_VAR 0 1
63231: NOT
63232: IFFALSE 63236
// exit ;
63234: GO 63281
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
63236: LD_ADDR_VAR 0 3
63240: PUSH
63241: LD_VAR 0 1
63245: PPUSH
63246: CALL_OW 255
63250: PPUSH
63251: LD_VAR 0 1
63255: PPUSH
63256: CALL_OW 250
63260: PPUSH
63261: LD_VAR 0 1
63265: PPUSH
63266: CALL_OW 251
63270: PPUSH
63271: LD_VAR 0 2
63275: PPUSH
63276: CALL 61523 0 4
63280: ST_TO_ADDR
// end ;
63281: LD_VAR 0 3
63285: RET
// export function DangerInArea ( side , area ) ; begin
63286: LD_INT 0
63288: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
63289: LD_ADDR_VAR 0 3
63293: PUSH
63294: LD_VAR 0 2
63298: PPUSH
63299: LD_INT 81
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PPUSH
63311: CALL_OW 70
63315: ST_TO_ADDR
// end ;
63316: LD_VAR 0 3
63320: RET
// export function IsExtension ( b ) ; begin
63321: LD_INT 0
63323: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
63324: LD_ADDR_VAR 0 2
63328: PUSH
63329: LD_VAR 0 1
63333: PUSH
63334: LD_INT 23
63336: PUSH
63337: LD_INT 20
63339: PUSH
63340: LD_INT 22
63342: PUSH
63343: LD_INT 17
63345: PUSH
63346: LD_INT 24
63348: PUSH
63349: LD_INT 21
63351: PUSH
63352: LD_INT 19
63354: PUSH
63355: LD_INT 16
63357: PUSH
63358: LD_INT 25
63360: PUSH
63361: LD_INT 18
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: IN
63376: ST_TO_ADDR
// end ;
63377: LD_VAR 0 2
63381: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
63382: LD_INT 0
63384: PPUSH
63385: PPUSH
63386: PPUSH
// result := [ ] ;
63387: LD_ADDR_VAR 0 4
63391: PUSH
63392: EMPTY
63393: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: LD_VAR 0 2
63403: PPUSH
63404: LD_INT 21
63406: PUSH
63407: LD_INT 3
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PPUSH
63414: CALL_OW 70
63418: ST_TO_ADDR
// if not tmp then
63419: LD_VAR 0 5
63423: NOT
63424: IFFALSE 63428
// exit ;
63426: GO 63492
// if checkLink then
63428: LD_VAR 0 3
63432: IFFALSE 63482
// begin for i in tmp do
63434: LD_ADDR_VAR 0 6
63438: PUSH
63439: LD_VAR 0 5
63443: PUSH
63444: FOR_IN
63445: IFFALSE 63480
// if GetBase ( i ) <> base then
63447: LD_VAR 0 6
63451: PPUSH
63452: CALL_OW 274
63456: PUSH
63457: LD_VAR 0 1
63461: NONEQUAL
63462: IFFALSE 63478
// ComLinkToBase ( base , i ) ;
63464: LD_VAR 0 1
63468: PPUSH
63469: LD_VAR 0 6
63473: PPUSH
63474: CALL_OW 169
63478: GO 63444
63480: POP
63481: POP
// end ; result := tmp ;
63482: LD_ADDR_VAR 0 4
63486: PUSH
63487: LD_VAR 0 5
63491: ST_TO_ADDR
// end ;
63492: LD_VAR 0 4
63496: RET
// export function ComComplete ( units , b ) ; var i ; begin
63497: LD_INT 0
63499: PPUSH
63500: PPUSH
// if not units then
63501: LD_VAR 0 1
63505: NOT
63506: IFFALSE 63510
// exit ;
63508: GO 63600
// for i in units do
63510: LD_ADDR_VAR 0 4
63514: PUSH
63515: LD_VAR 0 1
63519: PUSH
63520: FOR_IN
63521: IFFALSE 63598
// if BuildingStatus ( b ) = bs_build then
63523: LD_VAR 0 2
63527: PPUSH
63528: CALL_OW 461
63532: PUSH
63533: LD_INT 1
63535: EQUAL
63536: IFFALSE 63596
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
63538: LD_VAR 0 4
63542: PPUSH
63543: LD_STRING h
63545: PUSH
63546: LD_VAR 0 2
63550: PPUSH
63551: CALL_OW 250
63555: PUSH
63556: LD_VAR 0 2
63560: PPUSH
63561: CALL_OW 251
63565: PUSH
63566: LD_VAR 0 2
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: PUSH
63589: EMPTY
63590: LIST
63591: PPUSH
63592: CALL_OW 446
63596: GO 63520
63598: POP
63599: POP
// end ;
63600: LD_VAR 0 3
63604: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
63605: LD_INT 0
63607: PPUSH
63608: PPUSH
63609: PPUSH
63610: PPUSH
63611: PPUSH
63612: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
63613: LD_VAR 0 1
63617: NOT
63618: PUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: CALL_OW 263
63628: PUSH
63629: LD_INT 2
63631: NONEQUAL
63632: OR
63633: IFFALSE 63637
// exit ;
63635: GO 63953
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
63637: LD_ADDR_VAR 0 6
63641: PUSH
63642: LD_INT 22
63644: PUSH
63645: LD_VAR 0 1
63649: PPUSH
63650: CALL_OW 255
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 30
63664: PUSH
63665: LD_INT 36
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 34
63674: PUSH
63675: LD_INT 31
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PPUSH
63691: CALL_OW 69
63695: ST_TO_ADDR
// if not tmp then
63696: LD_VAR 0 6
63700: NOT
63701: IFFALSE 63705
// exit ;
63703: GO 63953
// result := [ ] ;
63705: LD_ADDR_VAR 0 2
63709: PUSH
63710: EMPTY
63711: ST_TO_ADDR
// for i in tmp do
63712: LD_ADDR_VAR 0 3
63716: PUSH
63717: LD_VAR 0 6
63721: PUSH
63722: FOR_IN
63723: IFFALSE 63794
// begin t := UnitsInside ( i ) ;
63725: LD_ADDR_VAR 0 4
63729: PUSH
63730: LD_VAR 0 3
63734: PPUSH
63735: CALL_OW 313
63739: ST_TO_ADDR
// if t then
63740: LD_VAR 0 4
63744: IFFALSE 63792
// for j in t do
63746: LD_ADDR_VAR 0 7
63750: PUSH
63751: LD_VAR 0 4
63755: PUSH
63756: FOR_IN
63757: IFFALSE 63790
// result := Replace ( result , result + 1 , j ) ;
63759: LD_ADDR_VAR 0 2
63763: PUSH
63764: LD_VAR 0 2
63768: PPUSH
63769: LD_VAR 0 2
63773: PUSH
63774: LD_INT 1
63776: PLUS
63777: PPUSH
63778: LD_VAR 0 7
63782: PPUSH
63783: CALL_OW 1
63787: ST_TO_ADDR
63788: GO 63756
63790: POP
63791: POP
// end ;
63792: GO 63722
63794: POP
63795: POP
// if not result then
63796: LD_VAR 0 2
63800: NOT
63801: IFFALSE 63805
// exit ;
63803: GO 63953
// mech := result [ 1 ] ;
63805: LD_ADDR_VAR 0 5
63809: PUSH
63810: LD_VAR 0 2
63814: PUSH
63815: LD_INT 1
63817: ARRAY
63818: ST_TO_ADDR
// if result > 1 then
63819: LD_VAR 0 2
63823: PUSH
63824: LD_INT 1
63826: GREATER
63827: IFFALSE 63939
// begin for i = 2 to result do
63829: LD_ADDR_VAR 0 3
63833: PUSH
63834: DOUBLE
63835: LD_INT 2
63837: DEC
63838: ST_TO_ADDR
63839: LD_VAR 0 2
63843: PUSH
63844: FOR_TO
63845: IFFALSE 63937
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63847: LD_ADDR_VAR 0 4
63851: PUSH
63852: LD_VAR 0 2
63856: PUSH
63857: LD_VAR 0 3
63861: ARRAY
63862: PPUSH
63863: LD_INT 3
63865: PPUSH
63866: CALL_OW 259
63870: PUSH
63871: LD_VAR 0 2
63875: PUSH
63876: LD_VAR 0 3
63880: ARRAY
63881: PPUSH
63882: CALL_OW 432
63886: MINUS
63887: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63888: LD_VAR 0 4
63892: PUSH
63893: LD_VAR 0 5
63897: PPUSH
63898: LD_INT 3
63900: PPUSH
63901: CALL_OW 259
63905: PUSH
63906: LD_VAR 0 5
63910: PPUSH
63911: CALL_OW 432
63915: MINUS
63916: GREATEREQUAL
63917: IFFALSE 63935
// mech := result [ i ] ;
63919: LD_ADDR_VAR 0 5
63923: PUSH
63924: LD_VAR 0 2
63928: PUSH
63929: LD_VAR 0 3
63933: ARRAY
63934: ST_TO_ADDR
// end ;
63935: GO 63844
63937: POP
63938: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63939: LD_VAR 0 1
63943: PPUSH
63944: LD_VAR 0 5
63948: PPUSH
63949: CALL_OW 135
// end ;
63953: LD_VAR 0 2
63957: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63958: LD_INT 0
63960: PPUSH
63961: PPUSH
63962: PPUSH
63963: PPUSH
63964: PPUSH
63965: PPUSH
63966: PPUSH
63967: PPUSH
63968: PPUSH
63969: PPUSH
63970: PPUSH
63971: PPUSH
63972: PPUSH
// result := [ ] ;
63973: LD_ADDR_VAR 0 7
63977: PUSH
63978: EMPTY
63979: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 266
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: IN
64000: NOT
64001: IFFALSE 64005
// exit ;
64003: GO 65639
// if name then
64005: LD_VAR 0 3
64009: IFFALSE 64025
// SetBName ( base_dep , name ) ;
64011: LD_VAR 0 1
64015: PPUSH
64016: LD_VAR 0 3
64020: PPUSH
64021: CALL_OW 500
// base := GetBase ( base_dep ) ;
64025: LD_ADDR_VAR 0 15
64029: PUSH
64030: LD_VAR 0 1
64034: PPUSH
64035: CALL_OW 274
64039: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
64040: LD_ADDR_VAR 0 16
64044: PUSH
64045: LD_VAR 0 1
64049: PPUSH
64050: CALL_OW 255
64054: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
64055: LD_ADDR_VAR 0 17
64059: PUSH
64060: LD_VAR 0 1
64064: PPUSH
64065: CALL_OW 248
64069: ST_TO_ADDR
// if sources then
64070: LD_VAR 0 5
64074: IFFALSE 64121
// for i = 1 to 3 do
64076: LD_ADDR_VAR 0 8
64080: PUSH
64081: DOUBLE
64082: LD_INT 1
64084: DEC
64085: ST_TO_ADDR
64086: LD_INT 3
64088: PUSH
64089: FOR_TO
64090: IFFALSE 64119
// AddResourceType ( base , i , sources [ i ] ) ;
64092: LD_VAR 0 15
64096: PPUSH
64097: LD_VAR 0 8
64101: PPUSH
64102: LD_VAR 0 5
64106: PUSH
64107: LD_VAR 0 8
64111: ARRAY
64112: PPUSH
64113: CALL_OW 276
64117: GO 64089
64119: POP
64120: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
64121: LD_ADDR_VAR 0 18
64125: PUSH
64126: LD_VAR 0 15
64130: PPUSH
64131: LD_VAR 0 2
64135: PPUSH
64136: LD_INT 1
64138: PPUSH
64139: CALL 63382 0 3
64143: ST_TO_ADDR
// InitHc ;
64144: CALL_OW 19
// InitUc ;
64148: CALL_OW 18
// uc_side := side ;
64152: LD_ADDR_OWVAR 20
64156: PUSH
64157: LD_VAR 0 16
64161: ST_TO_ADDR
// uc_nation := nation ;
64162: LD_ADDR_OWVAR 21
64166: PUSH
64167: LD_VAR 0 17
64171: ST_TO_ADDR
// if buildings then
64172: LD_VAR 0 18
64176: IFFALSE 65498
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
64178: LD_ADDR_VAR 0 19
64182: PUSH
64183: LD_VAR 0 18
64187: PPUSH
64188: LD_INT 2
64190: PUSH
64191: LD_INT 30
64193: PUSH
64194: LD_INT 29
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 30
64203: PUSH
64204: LD_INT 30
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: LIST
64215: PPUSH
64216: CALL_OW 72
64220: ST_TO_ADDR
// if tmp then
64221: LD_VAR 0 19
64225: IFFALSE 64273
// for i in tmp do
64227: LD_ADDR_VAR 0 8
64231: PUSH
64232: LD_VAR 0 19
64236: PUSH
64237: FOR_IN
64238: IFFALSE 64271
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
64240: LD_VAR 0 8
64244: PPUSH
64245: CALL_OW 250
64249: PPUSH
64250: LD_VAR 0 8
64254: PPUSH
64255: CALL_OW 251
64259: PPUSH
64260: LD_VAR 0 16
64264: PPUSH
64265: CALL_OW 441
64269: GO 64237
64271: POP
64272: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
64273: LD_VAR 0 18
64277: PPUSH
64278: LD_INT 2
64280: PUSH
64281: LD_INT 30
64283: PUSH
64284: LD_INT 32
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 30
64293: PUSH
64294: LD_INT 33
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: PPUSH
64306: CALL_OW 72
64310: IFFALSE 64398
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
64312: LD_ADDR_VAR 0 8
64316: PUSH
64317: LD_VAR 0 18
64321: PPUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 30
64327: PUSH
64328: LD_INT 32
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 30
64337: PUSH
64338: LD_INT 33
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: PPUSH
64350: CALL_OW 72
64354: PUSH
64355: FOR_IN
64356: IFFALSE 64396
// begin if not GetBWeapon ( i ) then
64358: LD_VAR 0 8
64362: PPUSH
64363: CALL_OW 269
64367: NOT
64368: IFFALSE 64394
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
64370: LD_VAR 0 8
64374: PPUSH
64375: LD_VAR 0 8
64379: PPUSH
64380: LD_VAR 0 2
64384: PPUSH
64385: CALL 65644 0 2
64389: PPUSH
64390: CALL_OW 431
// end ;
64394: GO 64355
64396: POP
64397: POP
// end ; for i = 1 to personel do
64398: LD_ADDR_VAR 0 8
64402: PUSH
64403: DOUBLE
64404: LD_INT 1
64406: DEC
64407: ST_TO_ADDR
64408: LD_VAR 0 6
64412: PUSH
64413: FOR_TO
64414: IFFALSE 65478
// begin if i > 4 then
64416: LD_VAR 0 8
64420: PUSH
64421: LD_INT 4
64423: GREATER
64424: IFFALSE 64428
// break ;
64426: GO 65478
// case i of 1 :
64428: LD_VAR 0 8
64432: PUSH
64433: LD_INT 1
64435: DOUBLE
64436: EQUAL
64437: IFTRUE 64441
64439: GO 64521
64441: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
64442: LD_ADDR_VAR 0 12
64446: PUSH
64447: LD_VAR 0 18
64451: PPUSH
64452: LD_INT 22
64454: PUSH
64455: LD_VAR 0 16
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 58
64466: PUSH
64467: EMPTY
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: LD_INT 30
64475: PUSH
64476: LD_INT 32
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 30
64485: PUSH
64486: LD_INT 4
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 30
64495: PUSH
64496: LD_INT 5
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: LIST
64513: PPUSH
64514: CALL_OW 72
64518: ST_TO_ADDR
64519: GO 64743
64521: LD_INT 2
64523: DOUBLE
64524: EQUAL
64525: IFTRUE 64529
64527: GO 64591
64529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
64530: LD_ADDR_VAR 0 12
64534: PUSH
64535: LD_VAR 0 18
64539: PPUSH
64540: LD_INT 22
64542: PUSH
64543: LD_VAR 0 16
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: LD_INT 30
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 30
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: LIST
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PPUSH
64584: CALL_OW 72
64588: ST_TO_ADDR
64589: GO 64743
64591: LD_INT 3
64593: DOUBLE
64594: EQUAL
64595: IFTRUE 64599
64597: GO 64661
64599: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
64600: LD_ADDR_VAR 0 12
64604: PUSH
64605: LD_VAR 0 18
64609: PPUSH
64610: LD_INT 22
64612: PUSH
64613: LD_VAR 0 16
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: LD_INT 30
64627: PUSH
64628: LD_INT 2
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 30
64637: PUSH
64638: LD_INT 3
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PPUSH
64654: CALL_OW 72
64658: ST_TO_ADDR
64659: GO 64743
64661: LD_INT 4
64663: DOUBLE
64664: EQUAL
64665: IFTRUE 64669
64667: GO 64742
64669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
64670: LD_ADDR_VAR 0 12
64674: PUSH
64675: LD_VAR 0 18
64679: PPUSH
64680: LD_INT 22
64682: PUSH
64683: LD_VAR 0 16
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 2
64694: PUSH
64695: LD_INT 30
64697: PUSH
64698: LD_INT 6
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 30
64707: PUSH
64708: LD_INT 7
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 30
64717: PUSH
64718: LD_INT 8
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PPUSH
64735: CALL_OW 72
64739: ST_TO_ADDR
64740: GO 64743
64742: POP
// if i = 1 then
64743: LD_VAR 0 8
64747: PUSH
64748: LD_INT 1
64750: EQUAL
64751: IFFALSE 64862
// begin tmp := [ ] ;
64753: LD_ADDR_VAR 0 19
64757: PUSH
64758: EMPTY
64759: ST_TO_ADDR
// for j in f do
64760: LD_ADDR_VAR 0 9
64764: PUSH
64765: LD_VAR 0 12
64769: PUSH
64770: FOR_IN
64771: IFFALSE 64844
// if GetBType ( j ) = b_bunker then
64773: LD_VAR 0 9
64777: PPUSH
64778: CALL_OW 266
64782: PUSH
64783: LD_INT 32
64785: EQUAL
64786: IFFALSE 64813
// tmp := Insert ( tmp , 1 , j ) else
64788: LD_ADDR_VAR 0 19
64792: PUSH
64793: LD_VAR 0 19
64797: PPUSH
64798: LD_INT 1
64800: PPUSH
64801: LD_VAR 0 9
64805: PPUSH
64806: CALL_OW 2
64810: ST_TO_ADDR
64811: GO 64842
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64813: LD_ADDR_VAR 0 19
64817: PUSH
64818: LD_VAR 0 19
64822: PPUSH
64823: LD_VAR 0 19
64827: PUSH
64828: LD_INT 1
64830: PLUS
64831: PPUSH
64832: LD_VAR 0 9
64836: PPUSH
64837: CALL_OW 2
64841: ST_TO_ADDR
64842: GO 64770
64844: POP
64845: POP
// if tmp then
64846: LD_VAR 0 19
64850: IFFALSE 64862
// f := tmp ;
64852: LD_ADDR_VAR 0 12
64856: PUSH
64857: LD_VAR 0 19
64861: ST_TO_ADDR
// end ; x := personel [ i ] ;
64862: LD_ADDR_VAR 0 13
64866: PUSH
64867: LD_VAR 0 6
64871: PUSH
64872: LD_VAR 0 8
64876: ARRAY
64877: ST_TO_ADDR
// if x = - 1 then
64878: LD_VAR 0 13
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: EQUAL
64887: IFFALSE 65096
// begin for j in f do
64889: LD_ADDR_VAR 0 9
64893: PUSH
64894: LD_VAR 0 12
64898: PUSH
64899: FOR_IN
64900: IFFALSE 65092
// repeat InitHc ;
64902: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64906: LD_VAR 0 9
64910: PPUSH
64911: CALL_OW 266
64915: PUSH
64916: LD_INT 5
64918: EQUAL
64919: IFFALSE 64989
// begin if UnitsInside ( j ) < 3 then
64921: LD_VAR 0 9
64925: PPUSH
64926: CALL_OW 313
64930: PUSH
64931: LD_INT 3
64933: LESS
64934: IFFALSE 64970
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64936: LD_INT 0
64938: PPUSH
64939: LD_INT 5
64941: PUSH
64942: LD_INT 8
64944: PUSH
64945: LD_INT 9
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: PUSH
64953: LD_VAR 0 17
64957: ARRAY
64958: PPUSH
64959: LD_VAR 0 4
64963: PPUSH
64964: CALL_OW 380
64968: GO 64987
// PrepareHuman ( false , i , skill ) ;
64970: LD_INT 0
64972: PPUSH
64973: LD_VAR 0 8
64977: PPUSH
64978: LD_VAR 0 4
64982: PPUSH
64983: CALL_OW 380
// end else
64987: GO 65006
// PrepareHuman ( false , i , skill ) ;
64989: LD_INT 0
64991: PPUSH
64992: LD_VAR 0 8
64996: PPUSH
64997: LD_VAR 0 4
65001: PPUSH
65002: CALL_OW 380
// un := CreateHuman ;
65006: LD_ADDR_VAR 0 14
65010: PUSH
65011: CALL_OW 44
65015: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65016: LD_ADDR_VAR 0 7
65020: PUSH
65021: LD_VAR 0 7
65025: PPUSH
65026: LD_INT 1
65028: PPUSH
65029: LD_VAR 0 14
65033: PPUSH
65034: CALL_OW 2
65038: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
65039: LD_VAR 0 14
65043: PPUSH
65044: LD_VAR 0 9
65048: PPUSH
65049: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
65053: LD_VAR 0 9
65057: PPUSH
65058: CALL_OW 313
65062: PUSH
65063: LD_INT 6
65065: EQUAL
65066: PUSH
65067: LD_VAR 0 9
65071: PPUSH
65072: CALL_OW 266
65076: PUSH
65077: LD_INT 32
65079: PUSH
65080: LD_INT 31
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: IN
65087: OR
65088: IFFALSE 64902
65090: GO 64899
65092: POP
65093: POP
// end else
65094: GO 65476
// for j = 1 to x do
65096: LD_ADDR_VAR 0 9
65100: PUSH
65101: DOUBLE
65102: LD_INT 1
65104: DEC
65105: ST_TO_ADDR
65106: LD_VAR 0 13
65110: PUSH
65111: FOR_TO
65112: IFFALSE 65474
// begin InitHc ;
65114: CALL_OW 19
// if not f then
65118: LD_VAR 0 12
65122: NOT
65123: IFFALSE 65212
// begin PrepareHuman ( false , i , skill ) ;
65125: LD_INT 0
65127: PPUSH
65128: LD_VAR 0 8
65132: PPUSH
65133: LD_VAR 0 4
65137: PPUSH
65138: CALL_OW 380
// un := CreateHuman ;
65142: LD_ADDR_VAR 0 14
65146: PUSH
65147: CALL_OW 44
65151: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65152: LD_ADDR_VAR 0 7
65156: PUSH
65157: LD_VAR 0 7
65161: PPUSH
65162: LD_INT 1
65164: PPUSH
65165: LD_VAR 0 14
65169: PPUSH
65170: CALL_OW 2
65174: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65175: LD_VAR 0 14
65179: PPUSH
65180: LD_VAR 0 1
65184: PPUSH
65185: CALL_OW 250
65189: PPUSH
65190: LD_VAR 0 1
65194: PPUSH
65195: CALL_OW 251
65199: PPUSH
65200: LD_INT 10
65202: PPUSH
65203: LD_INT 0
65205: PPUSH
65206: CALL_OW 50
// continue ;
65210: GO 65111
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
65212: LD_VAR 0 12
65216: PUSH
65217: LD_INT 1
65219: ARRAY
65220: PPUSH
65221: CALL_OW 313
65225: PUSH
65226: LD_VAR 0 12
65230: PUSH
65231: LD_INT 1
65233: ARRAY
65234: PPUSH
65235: CALL_OW 266
65239: PUSH
65240: LD_INT 32
65242: PUSH
65243: LD_INT 31
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: IN
65250: AND
65251: PUSH
65252: LD_VAR 0 12
65256: PUSH
65257: LD_INT 1
65259: ARRAY
65260: PPUSH
65261: CALL_OW 313
65265: PUSH
65266: LD_INT 6
65268: EQUAL
65269: OR
65270: IFFALSE 65290
// f := Delete ( f , 1 ) ;
65272: LD_ADDR_VAR 0 12
65276: PUSH
65277: LD_VAR 0 12
65281: PPUSH
65282: LD_INT 1
65284: PPUSH
65285: CALL_OW 3
65289: ST_TO_ADDR
// if not f then
65290: LD_VAR 0 12
65294: NOT
65295: IFFALSE 65313
// begin x := x + 2 ;
65297: LD_ADDR_VAR 0 13
65301: PUSH
65302: LD_VAR 0 13
65306: PUSH
65307: LD_INT 2
65309: PLUS
65310: ST_TO_ADDR
// continue ;
65311: GO 65111
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
65313: LD_VAR 0 12
65317: PUSH
65318: LD_INT 1
65320: ARRAY
65321: PPUSH
65322: CALL_OW 266
65326: PUSH
65327: LD_INT 5
65329: EQUAL
65330: IFFALSE 65404
// begin if UnitsInside ( f [ 1 ] ) < 3 then
65332: LD_VAR 0 12
65336: PUSH
65337: LD_INT 1
65339: ARRAY
65340: PPUSH
65341: CALL_OW 313
65345: PUSH
65346: LD_INT 3
65348: LESS
65349: IFFALSE 65385
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
65351: LD_INT 0
65353: PPUSH
65354: LD_INT 5
65356: PUSH
65357: LD_INT 8
65359: PUSH
65360: LD_INT 9
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: PUSH
65368: LD_VAR 0 17
65372: ARRAY
65373: PPUSH
65374: LD_VAR 0 4
65378: PPUSH
65379: CALL_OW 380
65383: GO 65402
// PrepareHuman ( false , i , skill ) ;
65385: LD_INT 0
65387: PPUSH
65388: LD_VAR 0 8
65392: PPUSH
65393: LD_VAR 0 4
65397: PPUSH
65398: CALL_OW 380
// end else
65402: GO 65421
// PrepareHuman ( false , i , skill ) ;
65404: LD_INT 0
65406: PPUSH
65407: LD_VAR 0 8
65411: PPUSH
65412: LD_VAR 0 4
65416: PPUSH
65417: CALL_OW 380
// un := CreateHuman ;
65421: LD_ADDR_VAR 0 14
65425: PUSH
65426: CALL_OW 44
65430: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65431: LD_ADDR_VAR 0 7
65435: PUSH
65436: LD_VAR 0 7
65440: PPUSH
65441: LD_INT 1
65443: PPUSH
65444: LD_VAR 0 14
65448: PPUSH
65449: CALL_OW 2
65453: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
65454: LD_VAR 0 14
65458: PPUSH
65459: LD_VAR 0 12
65463: PUSH
65464: LD_INT 1
65466: ARRAY
65467: PPUSH
65468: CALL_OW 52
// end ;
65472: GO 65111
65474: POP
65475: POP
// end ;
65476: GO 64413
65478: POP
65479: POP
// result := result ^ buildings ;
65480: LD_ADDR_VAR 0 7
65484: PUSH
65485: LD_VAR 0 7
65489: PUSH
65490: LD_VAR 0 18
65494: ADD
65495: ST_TO_ADDR
// end else
65496: GO 65639
// begin for i = 1 to personel do
65498: LD_ADDR_VAR 0 8
65502: PUSH
65503: DOUBLE
65504: LD_INT 1
65506: DEC
65507: ST_TO_ADDR
65508: LD_VAR 0 6
65512: PUSH
65513: FOR_TO
65514: IFFALSE 65637
// begin if i > 4 then
65516: LD_VAR 0 8
65520: PUSH
65521: LD_INT 4
65523: GREATER
65524: IFFALSE 65528
// break ;
65526: GO 65637
// x := personel [ i ] ;
65528: LD_ADDR_VAR 0 13
65532: PUSH
65533: LD_VAR 0 6
65537: PUSH
65538: LD_VAR 0 8
65542: ARRAY
65543: ST_TO_ADDR
// if x = - 1 then
65544: LD_VAR 0 13
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: EQUAL
65553: IFFALSE 65557
// continue ;
65555: GO 65513
// PrepareHuman ( false , i , skill ) ;
65557: LD_INT 0
65559: PPUSH
65560: LD_VAR 0 8
65564: PPUSH
65565: LD_VAR 0 4
65569: PPUSH
65570: CALL_OW 380
// un := CreateHuman ;
65574: LD_ADDR_VAR 0 14
65578: PUSH
65579: CALL_OW 44
65583: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65584: LD_VAR 0 14
65588: PPUSH
65589: LD_VAR 0 1
65593: PPUSH
65594: CALL_OW 250
65598: PPUSH
65599: LD_VAR 0 1
65603: PPUSH
65604: CALL_OW 251
65608: PPUSH
65609: LD_INT 10
65611: PPUSH
65612: LD_INT 0
65614: PPUSH
65615: CALL_OW 50
// result := result ^ un ;
65619: LD_ADDR_VAR 0 7
65623: PUSH
65624: LD_VAR 0 7
65628: PUSH
65629: LD_VAR 0 14
65633: ADD
65634: ST_TO_ADDR
// end ;
65635: GO 65513
65637: POP
65638: POP
// end ; end ;
65639: LD_VAR 0 7
65643: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
65644: LD_INT 0
65646: PPUSH
65647: PPUSH
65648: PPUSH
65649: PPUSH
65650: PPUSH
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
65655: PPUSH
65656: PPUSH
65657: PPUSH
65658: PPUSH
65659: PPUSH
65660: PPUSH
65661: PPUSH
// result := false ;
65662: LD_ADDR_VAR 0 3
65666: PUSH
65667: LD_INT 0
65669: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
65670: LD_VAR 0 1
65674: NOT
65675: PUSH
65676: LD_VAR 0 1
65680: PPUSH
65681: CALL_OW 266
65685: PUSH
65686: LD_INT 32
65688: PUSH
65689: LD_INT 33
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: IN
65696: NOT
65697: OR
65698: IFFALSE 65702
// exit ;
65700: GO 66811
// nat := GetNation ( tower ) ;
65702: LD_ADDR_VAR 0 12
65706: PUSH
65707: LD_VAR 0 1
65711: PPUSH
65712: CALL_OW 248
65716: ST_TO_ADDR
// side := GetSide ( tower ) ;
65717: LD_ADDR_VAR 0 16
65721: PUSH
65722: LD_VAR 0 1
65726: PPUSH
65727: CALL_OW 255
65731: ST_TO_ADDR
// x := GetX ( tower ) ;
65732: LD_ADDR_VAR 0 10
65736: PUSH
65737: LD_VAR 0 1
65741: PPUSH
65742: CALL_OW 250
65746: ST_TO_ADDR
// y := GetY ( tower ) ;
65747: LD_ADDR_VAR 0 11
65751: PUSH
65752: LD_VAR 0 1
65756: PPUSH
65757: CALL_OW 251
65761: ST_TO_ADDR
// if not x or not y then
65762: LD_VAR 0 10
65766: NOT
65767: PUSH
65768: LD_VAR 0 11
65772: NOT
65773: OR
65774: IFFALSE 65778
// exit ;
65776: GO 66811
// weapon := 0 ;
65778: LD_ADDR_VAR 0 18
65782: PUSH
65783: LD_INT 0
65785: ST_TO_ADDR
// fac_list := [ ] ;
65786: LD_ADDR_VAR 0 17
65790: PUSH
65791: EMPTY
65792: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65793: LD_ADDR_VAR 0 6
65797: PUSH
65798: LD_VAR 0 1
65802: PPUSH
65803: CALL_OW 274
65807: PPUSH
65808: LD_VAR 0 2
65812: PPUSH
65813: LD_INT 0
65815: PPUSH
65816: CALL 63382 0 3
65820: PPUSH
65821: LD_INT 30
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PPUSH
65831: CALL_OW 72
65835: ST_TO_ADDR
// if not factories then
65836: LD_VAR 0 6
65840: NOT
65841: IFFALSE 65845
// exit ;
65843: GO 66811
// for i in factories do
65845: LD_ADDR_VAR 0 8
65849: PUSH
65850: LD_VAR 0 6
65854: PUSH
65855: FOR_IN
65856: IFFALSE 65881
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65858: LD_ADDR_VAR 0 17
65862: PUSH
65863: LD_VAR 0 17
65867: PUSH
65868: LD_VAR 0 8
65872: PPUSH
65873: CALL_OW 478
65877: UNION
65878: ST_TO_ADDR
65879: GO 65855
65881: POP
65882: POP
// if not fac_list then
65883: LD_VAR 0 17
65887: NOT
65888: IFFALSE 65892
// exit ;
65890: GO 66811
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65892: LD_ADDR_VAR 0 5
65896: PUSH
65897: LD_INT 4
65899: PUSH
65900: LD_INT 5
65902: PUSH
65903: LD_INT 9
65905: PUSH
65906: LD_INT 10
65908: PUSH
65909: LD_INT 6
65911: PUSH
65912: LD_INT 7
65914: PUSH
65915: LD_INT 11
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 27
65929: PUSH
65930: LD_INT 28
65932: PUSH
65933: LD_INT 26
65935: PUSH
65936: LD_INT 30
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 43
65947: PUSH
65948: LD_INT 44
65950: PUSH
65951: LD_INT 46
65953: PUSH
65954: LD_INT 45
65956: PUSH
65957: LD_INT 47
65959: PUSH
65960: LD_INT 49
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: PUSH
65976: LD_VAR 0 12
65980: ARRAY
65981: ST_TO_ADDR
// list := list isect fac_list ;
65982: LD_ADDR_VAR 0 5
65986: PUSH
65987: LD_VAR 0 5
65991: PUSH
65992: LD_VAR 0 17
65996: ISECT
65997: ST_TO_ADDR
// if not list then
65998: LD_VAR 0 5
66002: NOT
66003: IFFALSE 66007
// exit ;
66005: GO 66811
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
66007: LD_VAR 0 12
66011: PUSH
66012: LD_INT 3
66014: EQUAL
66015: PUSH
66016: LD_INT 49
66018: PUSH
66019: LD_VAR 0 5
66023: IN
66024: AND
66025: PUSH
66026: LD_INT 31
66028: PPUSH
66029: LD_VAR 0 16
66033: PPUSH
66034: CALL_OW 321
66038: PUSH
66039: LD_INT 2
66041: EQUAL
66042: AND
66043: IFFALSE 66103
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
66045: LD_INT 22
66047: PUSH
66048: LD_VAR 0 16
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 35
66059: PUSH
66060: LD_INT 49
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 91
66069: PUSH
66070: LD_VAR 0 1
66074: PUSH
66075: LD_INT 10
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: PPUSH
66088: CALL_OW 69
66092: NOT
66093: IFFALSE 66103
// weapon := ru_time_lapser ;
66095: LD_ADDR_VAR 0 18
66099: PUSH
66100: LD_INT 49
66102: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
66103: LD_VAR 0 12
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: IN
66118: PUSH
66119: LD_INT 11
66121: PUSH
66122: LD_VAR 0 5
66126: IN
66127: PUSH
66128: LD_INT 30
66130: PUSH
66131: LD_VAR 0 5
66135: IN
66136: OR
66137: AND
66138: PUSH
66139: LD_INT 6
66141: PPUSH
66142: LD_VAR 0 16
66146: PPUSH
66147: CALL_OW 321
66151: PUSH
66152: LD_INT 2
66154: EQUAL
66155: AND
66156: IFFALSE 66321
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
66158: LD_INT 22
66160: PUSH
66161: LD_VAR 0 16
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 2
66172: PUSH
66173: LD_INT 35
66175: PUSH
66176: LD_INT 11
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 35
66185: PUSH
66186: LD_INT 30
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 91
66200: PUSH
66201: LD_VAR 0 1
66205: PUSH
66206: LD_INT 18
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: LIST
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: LIST
66218: PPUSH
66219: CALL_OW 69
66223: NOT
66224: PUSH
66225: LD_INT 22
66227: PUSH
66228: LD_VAR 0 16
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 2
66239: PUSH
66240: LD_INT 30
66242: PUSH
66243: LD_INT 32
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 30
66252: PUSH
66253: LD_INT 33
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 91
66267: PUSH
66268: LD_VAR 0 1
66272: PUSH
66273: LD_INT 12
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: PUSH
66286: EMPTY
66287: LIST
66288: PPUSH
66289: CALL_OW 69
66293: PUSH
66294: LD_INT 2
66296: GREATER
66297: AND
66298: IFFALSE 66321
// weapon := [ us_radar , ar_radar ] [ nat ] ;
66300: LD_ADDR_VAR 0 18
66304: PUSH
66305: LD_INT 11
66307: PUSH
66308: LD_INT 30
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_VAR 0 12
66319: ARRAY
66320: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
66321: LD_VAR 0 18
66325: NOT
66326: PUSH
66327: LD_INT 40
66329: PPUSH
66330: LD_VAR 0 16
66334: PPUSH
66335: CALL_OW 321
66339: PUSH
66340: LD_INT 2
66342: EQUAL
66343: AND
66344: PUSH
66345: LD_INT 7
66347: PUSH
66348: LD_VAR 0 5
66352: IN
66353: PUSH
66354: LD_INT 28
66356: PUSH
66357: LD_VAR 0 5
66361: IN
66362: OR
66363: PUSH
66364: LD_INT 45
66366: PUSH
66367: LD_VAR 0 5
66371: IN
66372: OR
66373: AND
66374: IFFALSE 66628
// begin hex := GetHexInfo ( x , y ) ;
66376: LD_ADDR_VAR 0 4
66380: PUSH
66381: LD_VAR 0 10
66385: PPUSH
66386: LD_VAR 0 11
66390: PPUSH
66391: CALL_OW 546
66395: ST_TO_ADDR
// if hex [ 1 ] then
66396: LD_VAR 0 4
66400: PUSH
66401: LD_INT 1
66403: ARRAY
66404: IFFALSE 66408
// exit ;
66406: GO 66811
// height := hex [ 2 ] ;
66408: LD_ADDR_VAR 0 15
66412: PUSH
66413: LD_VAR 0 4
66417: PUSH
66418: LD_INT 2
66420: ARRAY
66421: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
66422: LD_ADDR_VAR 0 14
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 2
66432: PUSH
66433: LD_INT 3
66435: PUSH
66436: LD_INT 5
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: ST_TO_ADDR
// for i in tmp do
66445: LD_ADDR_VAR 0 8
66449: PUSH
66450: LD_VAR 0 14
66454: PUSH
66455: FOR_IN
66456: IFFALSE 66626
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
66458: LD_ADDR_VAR 0 9
66462: PUSH
66463: LD_VAR 0 10
66467: PPUSH
66468: LD_VAR 0 8
66472: PPUSH
66473: LD_INT 5
66475: PPUSH
66476: CALL_OW 272
66480: PUSH
66481: LD_VAR 0 11
66485: PPUSH
66486: LD_VAR 0 8
66490: PPUSH
66491: LD_INT 5
66493: PPUSH
66494: CALL_OW 273
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
66503: LD_VAR 0 9
66507: PUSH
66508: LD_INT 1
66510: ARRAY
66511: PPUSH
66512: LD_VAR 0 9
66516: PUSH
66517: LD_INT 2
66519: ARRAY
66520: PPUSH
66521: CALL_OW 488
66525: IFFALSE 66624
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
66527: LD_ADDR_VAR 0 4
66531: PUSH
66532: LD_VAR 0 9
66536: PUSH
66537: LD_INT 1
66539: ARRAY
66540: PPUSH
66541: LD_VAR 0 9
66545: PUSH
66546: LD_INT 2
66548: ARRAY
66549: PPUSH
66550: CALL_OW 546
66554: ST_TO_ADDR
// if hex [ 1 ] then
66555: LD_VAR 0 4
66559: PUSH
66560: LD_INT 1
66562: ARRAY
66563: IFFALSE 66567
// continue ;
66565: GO 66455
// h := hex [ 2 ] ;
66567: LD_ADDR_VAR 0 13
66571: PUSH
66572: LD_VAR 0 4
66576: PUSH
66577: LD_INT 2
66579: ARRAY
66580: ST_TO_ADDR
// if h + 7 < height then
66581: LD_VAR 0 13
66585: PUSH
66586: LD_INT 7
66588: PLUS
66589: PUSH
66590: LD_VAR 0 15
66594: LESS
66595: IFFALSE 66624
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
66597: LD_ADDR_VAR 0 18
66601: PUSH
66602: LD_INT 7
66604: PUSH
66605: LD_INT 28
66607: PUSH
66608: LD_INT 45
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: PUSH
66616: LD_VAR 0 12
66620: ARRAY
66621: ST_TO_ADDR
// break ;
66622: GO 66626
// end ; end ; end ;
66624: GO 66455
66626: POP
66627: POP
// end ; if not weapon then
66628: LD_VAR 0 18
66632: NOT
66633: IFFALSE 66693
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
66635: LD_ADDR_VAR 0 5
66639: PUSH
66640: LD_VAR 0 5
66644: PUSH
66645: LD_INT 11
66647: PUSH
66648: LD_INT 30
66650: PUSH
66651: LD_INT 49
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: DIFF
66659: ST_TO_ADDR
// if not list then
66660: LD_VAR 0 5
66664: NOT
66665: IFFALSE 66669
// exit ;
66667: GO 66811
// weapon := list [ rand ( 1 , list ) ] ;
66669: LD_ADDR_VAR 0 18
66673: PUSH
66674: LD_VAR 0 5
66678: PUSH
66679: LD_INT 1
66681: PPUSH
66682: LD_VAR 0 5
66686: PPUSH
66687: CALL_OW 12
66691: ARRAY
66692: ST_TO_ADDR
// end ; if weapon then
66693: LD_VAR 0 18
66697: IFFALSE 66811
// begin tmp := CostOfWeapon ( weapon ) ;
66699: LD_ADDR_VAR 0 14
66703: PUSH
66704: LD_VAR 0 18
66708: PPUSH
66709: CALL_OW 451
66713: ST_TO_ADDR
// j := GetBase ( tower ) ;
66714: LD_ADDR_VAR 0 9
66718: PUSH
66719: LD_VAR 0 1
66723: PPUSH
66724: CALL_OW 274
66728: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
66729: LD_VAR 0 9
66733: PPUSH
66734: LD_INT 1
66736: PPUSH
66737: CALL_OW 275
66741: PUSH
66742: LD_VAR 0 14
66746: PUSH
66747: LD_INT 1
66749: ARRAY
66750: GREATEREQUAL
66751: PUSH
66752: LD_VAR 0 9
66756: PPUSH
66757: LD_INT 2
66759: PPUSH
66760: CALL_OW 275
66764: PUSH
66765: LD_VAR 0 14
66769: PUSH
66770: LD_INT 2
66772: ARRAY
66773: GREATEREQUAL
66774: AND
66775: PUSH
66776: LD_VAR 0 9
66780: PPUSH
66781: LD_INT 3
66783: PPUSH
66784: CALL_OW 275
66788: PUSH
66789: LD_VAR 0 14
66793: PUSH
66794: LD_INT 3
66796: ARRAY
66797: GREATEREQUAL
66798: AND
66799: IFFALSE 66811
// result := weapon ;
66801: LD_ADDR_VAR 0 3
66805: PUSH
66806: LD_VAR 0 18
66810: ST_TO_ADDR
// end ; end ;
66811: LD_VAR 0 3
66815: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
// result := true ;
66820: LD_ADDR_VAR 0 3
66824: PUSH
66825: LD_INT 1
66827: ST_TO_ADDR
// if array1 = array2 then
66828: LD_VAR 0 1
66832: PUSH
66833: LD_VAR 0 2
66837: EQUAL
66838: IFFALSE 66898
// begin for i = 1 to array1 do
66840: LD_ADDR_VAR 0 4
66844: PUSH
66845: DOUBLE
66846: LD_INT 1
66848: DEC
66849: ST_TO_ADDR
66850: LD_VAR 0 1
66854: PUSH
66855: FOR_TO
66856: IFFALSE 66894
// if array1 [ i ] <> array2 [ i ] then
66858: LD_VAR 0 1
66862: PUSH
66863: LD_VAR 0 4
66867: ARRAY
66868: PUSH
66869: LD_VAR 0 2
66873: PUSH
66874: LD_VAR 0 4
66878: ARRAY
66879: NONEQUAL
66880: IFFALSE 66892
// begin result := false ;
66882: LD_ADDR_VAR 0 3
66886: PUSH
66887: LD_INT 0
66889: ST_TO_ADDR
// break ;
66890: GO 66894
// end ;
66892: GO 66855
66894: POP
66895: POP
// end else
66896: GO 66906
// result := false ;
66898: LD_ADDR_VAR 0 3
66902: PUSH
66903: LD_INT 0
66905: ST_TO_ADDR
// end ;
66906: LD_VAR 0 3
66910: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66911: LD_INT 0
66913: PPUSH
66914: PPUSH
// if not array1 or not array2 then
66915: LD_VAR 0 1
66919: NOT
66920: PUSH
66921: LD_VAR 0 2
66925: NOT
66926: OR
66927: IFFALSE 66931
// exit ;
66929: GO 66995
// result := true ;
66931: LD_ADDR_VAR 0 3
66935: PUSH
66936: LD_INT 1
66938: ST_TO_ADDR
// for i = 1 to array1 do
66939: LD_ADDR_VAR 0 4
66943: PUSH
66944: DOUBLE
66945: LD_INT 1
66947: DEC
66948: ST_TO_ADDR
66949: LD_VAR 0 1
66953: PUSH
66954: FOR_TO
66955: IFFALSE 66993
// if array1 [ i ] <> array2 [ i ] then
66957: LD_VAR 0 1
66961: PUSH
66962: LD_VAR 0 4
66966: ARRAY
66967: PUSH
66968: LD_VAR 0 2
66972: PUSH
66973: LD_VAR 0 4
66977: ARRAY
66978: NONEQUAL
66979: IFFALSE 66991
// begin result := false ;
66981: LD_ADDR_VAR 0 3
66985: PUSH
66986: LD_INT 0
66988: ST_TO_ADDR
// break ;
66989: GO 66993
// end ;
66991: GO 66954
66993: POP
66994: POP
// end ;
66995: LD_VAR 0 3
66999: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
67000: LD_INT 0
67002: PPUSH
67003: PPUSH
67004: PPUSH
// pom := GetBase ( fac ) ;
67005: LD_ADDR_VAR 0 5
67009: PUSH
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 274
67019: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
67020: LD_ADDR_VAR 0 4
67024: PUSH
67025: LD_VAR 0 2
67029: PUSH
67030: LD_INT 1
67032: ARRAY
67033: PPUSH
67034: LD_VAR 0 2
67038: PUSH
67039: LD_INT 2
67041: ARRAY
67042: PPUSH
67043: LD_VAR 0 2
67047: PUSH
67048: LD_INT 3
67050: ARRAY
67051: PPUSH
67052: LD_VAR 0 2
67056: PUSH
67057: LD_INT 4
67059: ARRAY
67060: PPUSH
67061: CALL_OW 449
67065: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67066: LD_ADDR_VAR 0 3
67070: PUSH
67071: LD_VAR 0 5
67075: PPUSH
67076: LD_INT 1
67078: PPUSH
67079: CALL_OW 275
67083: PUSH
67084: LD_VAR 0 4
67088: PUSH
67089: LD_INT 1
67091: ARRAY
67092: GREATEREQUAL
67093: PUSH
67094: LD_VAR 0 5
67098: PPUSH
67099: LD_INT 2
67101: PPUSH
67102: CALL_OW 275
67106: PUSH
67107: LD_VAR 0 4
67111: PUSH
67112: LD_INT 2
67114: ARRAY
67115: GREATEREQUAL
67116: AND
67117: PUSH
67118: LD_VAR 0 5
67122: PPUSH
67123: LD_INT 3
67125: PPUSH
67126: CALL_OW 275
67130: PUSH
67131: LD_VAR 0 4
67135: PUSH
67136: LD_INT 3
67138: ARRAY
67139: GREATEREQUAL
67140: AND
67141: ST_TO_ADDR
// end ;
67142: LD_VAR 0 3
67146: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
67147: LD_INT 0
67149: PPUSH
67150: PPUSH
67151: PPUSH
67152: PPUSH
// pom := GetBase ( building ) ;
67153: LD_ADDR_VAR 0 3
67157: PUSH
67158: LD_VAR 0 1
67162: PPUSH
67163: CALL_OW 274
67167: ST_TO_ADDR
// if not pom then
67168: LD_VAR 0 3
67172: NOT
67173: IFFALSE 67177
// exit ;
67175: GO 67347
// btype := GetBType ( building ) ;
67177: LD_ADDR_VAR 0 5
67181: PUSH
67182: LD_VAR 0 1
67186: PPUSH
67187: CALL_OW 266
67191: ST_TO_ADDR
// if btype = b_armoury then
67192: LD_VAR 0 5
67196: PUSH
67197: LD_INT 4
67199: EQUAL
67200: IFFALSE 67210
// btype := b_barracks ;
67202: LD_ADDR_VAR 0 5
67206: PUSH
67207: LD_INT 5
67209: ST_TO_ADDR
// if btype = b_depot then
67210: LD_VAR 0 5
67214: PUSH
67215: LD_INT 0
67217: EQUAL
67218: IFFALSE 67228
// btype := b_warehouse ;
67220: LD_ADDR_VAR 0 5
67224: PUSH
67225: LD_INT 1
67227: ST_TO_ADDR
// if btype = b_workshop then
67228: LD_VAR 0 5
67232: PUSH
67233: LD_INT 2
67235: EQUAL
67236: IFFALSE 67246
// btype := b_factory ;
67238: LD_ADDR_VAR 0 5
67242: PUSH
67243: LD_INT 3
67245: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67246: LD_ADDR_VAR 0 4
67250: PUSH
67251: LD_VAR 0 5
67255: PPUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: CALL_OW 248
67265: PPUSH
67266: CALL_OW 450
67270: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67271: LD_ADDR_VAR 0 2
67275: PUSH
67276: LD_VAR 0 3
67280: PPUSH
67281: LD_INT 1
67283: PPUSH
67284: CALL_OW 275
67288: PUSH
67289: LD_VAR 0 4
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: GREATEREQUAL
67298: PUSH
67299: LD_VAR 0 3
67303: PPUSH
67304: LD_INT 2
67306: PPUSH
67307: CALL_OW 275
67311: PUSH
67312: LD_VAR 0 4
67316: PUSH
67317: LD_INT 2
67319: ARRAY
67320: GREATEREQUAL
67321: AND
67322: PUSH
67323: LD_VAR 0 3
67327: PPUSH
67328: LD_INT 3
67330: PPUSH
67331: CALL_OW 275
67335: PUSH
67336: LD_VAR 0 4
67340: PUSH
67341: LD_INT 3
67343: ARRAY
67344: GREATEREQUAL
67345: AND
67346: ST_TO_ADDR
// end ;
67347: LD_VAR 0 2
67351: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
67352: LD_INT 0
67354: PPUSH
67355: PPUSH
67356: PPUSH
// pom := GetBase ( building ) ;
67357: LD_ADDR_VAR 0 4
67361: PUSH
67362: LD_VAR 0 1
67366: PPUSH
67367: CALL_OW 274
67371: ST_TO_ADDR
// if not pom then
67372: LD_VAR 0 4
67376: NOT
67377: IFFALSE 67381
// exit ;
67379: GO 67482
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67381: LD_ADDR_VAR 0 5
67385: PUSH
67386: LD_VAR 0 2
67390: PPUSH
67391: LD_VAR 0 1
67395: PPUSH
67396: CALL_OW 248
67400: PPUSH
67401: CALL_OW 450
67405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67406: LD_ADDR_VAR 0 3
67410: PUSH
67411: LD_VAR 0 4
67415: PPUSH
67416: LD_INT 1
67418: PPUSH
67419: CALL_OW 275
67423: PUSH
67424: LD_VAR 0 5
67428: PUSH
67429: LD_INT 1
67431: ARRAY
67432: GREATEREQUAL
67433: PUSH
67434: LD_VAR 0 4
67438: PPUSH
67439: LD_INT 2
67441: PPUSH
67442: CALL_OW 275
67446: PUSH
67447: LD_VAR 0 5
67451: PUSH
67452: LD_INT 2
67454: ARRAY
67455: GREATEREQUAL
67456: AND
67457: PUSH
67458: LD_VAR 0 4
67462: PPUSH
67463: LD_INT 3
67465: PPUSH
67466: CALL_OW 275
67470: PUSH
67471: LD_VAR 0 5
67475: PUSH
67476: LD_INT 3
67478: ARRAY
67479: GREATEREQUAL
67480: AND
67481: ST_TO_ADDR
// end ;
67482: LD_VAR 0 3
67486: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
67487: LD_INT 0
67489: PPUSH
67490: PPUSH
67491: PPUSH
67492: PPUSH
67493: PPUSH
67494: PPUSH
67495: PPUSH
67496: PPUSH
67497: PPUSH
67498: PPUSH
67499: PPUSH
// result := false ;
67500: LD_ADDR_VAR 0 8
67504: PUSH
67505: LD_INT 0
67507: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
67508: LD_VAR 0 5
67512: NOT
67513: PUSH
67514: LD_VAR 0 1
67518: NOT
67519: OR
67520: PUSH
67521: LD_VAR 0 2
67525: NOT
67526: OR
67527: PUSH
67528: LD_VAR 0 3
67532: NOT
67533: OR
67534: IFFALSE 67538
// exit ;
67536: GO 68352
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
67538: LD_ADDR_VAR 0 14
67542: PUSH
67543: LD_VAR 0 1
67547: PPUSH
67548: LD_VAR 0 2
67552: PPUSH
67553: LD_VAR 0 3
67557: PPUSH
67558: LD_VAR 0 4
67562: PPUSH
67563: LD_VAR 0 5
67567: PUSH
67568: LD_INT 1
67570: ARRAY
67571: PPUSH
67572: CALL_OW 248
67576: PPUSH
67577: LD_INT 0
67579: PPUSH
67580: CALL 69605 0 6
67584: ST_TO_ADDR
// if not hexes then
67585: LD_VAR 0 14
67589: NOT
67590: IFFALSE 67594
// exit ;
67592: GO 68352
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67594: LD_ADDR_VAR 0 17
67598: PUSH
67599: LD_VAR 0 5
67603: PPUSH
67604: LD_INT 22
67606: PUSH
67607: LD_VAR 0 13
67611: PPUSH
67612: CALL_OW 255
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 2
67623: PUSH
67624: LD_INT 30
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 30
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: LIST
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PPUSH
67653: CALL_OW 72
67657: ST_TO_ADDR
// for i = 1 to hexes do
67658: LD_ADDR_VAR 0 9
67662: PUSH
67663: DOUBLE
67664: LD_INT 1
67666: DEC
67667: ST_TO_ADDR
67668: LD_VAR 0 14
67672: PUSH
67673: FOR_TO
67674: IFFALSE 68350
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67676: LD_ADDR_VAR 0 13
67680: PUSH
67681: LD_VAR 0 14
67685: PUSH
67686: LD_VAR 0 9
67690: ARRAY
67691: PUSH
67692: LD_INT 1
67694: ARRAY
67695: PPUSH
67696: LD_VAR 0 14
67700: PUSH
67701: LD_VAR 0 9
67705: ARRAY
67706: PUSH
67707: LD_INT 2
67709: ARRAY
67710: PPUSH
67711: CALL_OW 428
67715: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
67716: LD_VAR 0 14
67720: PUSH
67721: LD_VAR 0 9
67725: ARRAY
67726: PUSH
67727: LD_INT 1
67729: ARRAY
67730: PPUSH
67731: LD_VAR 0 14
67735: PUSH
67736: LD_VAR 0 9
67740: ARRAY
67741: PUSH
67742: LD_INT 2
67744: ARRAY
67745: PPUSH
67746: CALL_OW 351
67750: PUSH
67751: LD_VAR 0 14
67755: PUSH
67756: LD_VAR 0 9
67760: ARRAY
67761: PUSH
67762: LD_INT 1
67764: ARRAY
67765: PPUSH
67766: LD_VAR 0 14
67770: PUSH
67771: LD_VAR 0 9
67775: ARRAY
67776: PUSH
67777: LD_INT 2
67779: ARRAY
67780: PPUSH
67781: CALL_OW 488
67785: NOT
67786: OR
67787: PUSH
67788: LD_VAR 0 13
67792: PPUSH
67793: CALL_OW 247
67797: PUSH
67798: LD_INT 3
67800: EQUAL
67801: OR
67802: IFFALSE 67808
// exit ;
67804: POP
67805: POP
67806: GO 68352
// if not tmp then
67808: LD_VAR 0 13
67812: NOT
67813: IFFALSE 67817
// continue ;
67815: GO 67673
// result := true ;
67817: LD_ADDR_VAR 0 8
67821: PUSH
67822: LD_INT 1
67824: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67825: LD_VAR 0 6
67829: PUSH
67830: LD_VAR 0 13
67834: PPUSH
67835: CALL_OW 247
67839: PUSH
67840: LD_INT 2
67842: EQUAL
67843: AND
67844: PUSH
67845: LD_VAR 0 13
67849: PPUSH
67850: CALL_OW 263
67854: PUSH
67855: LD_INT 1
67857: EQUAL
67858: AND
67859: IFFALSE 68023
// begin if IsDrivenBy ( tmp ) then
67861: LD_VAR 0 13
67865: PPUSH
67866: CALL_OW 311
67870: IFFALSE 67874
// continue ;
67872: GO 67673
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67874: LD_VAR 0 6
67878: PPUSH
67879: LD_INT 3
67881: PUSH
67882: LD_INT 60
67884: PUSH
67885: EMPTY
67886: LIST
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 3
67894: PUSH
67895: LD_INT 55
67897: PUSH
67898: EMPTY
67899: LIST
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PPUSH
67909: CALL_OW 72
67913: IFFALSE 68021
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67915: LD_ADDR_VAR 0 18
67919: PUSH
67920: LD_VAR 0 6
67924: PPUSH
67925: LD_INT 3
67927: PUSH
67928: LD_INT 60
67930: PUSH
67931: EMPTY
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: LD_INT 55
67943: PUSH
67944: EMPTY
67945: LIST
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PPUSH
67955: CALL_OW 72
67959: PUSH
67960: LD_INT 1
67962: ARRAY
67963: ST_TO_ADDR
// if IsInUnit ( driver ) then
67964: LD_VAR 0 18
67968: PPUSH
67969: CALL_OW 310
67973: IFFALSE 67984
// ComExit ( driver ) ;
67975: LD_VAR 0 18
67979: PPUSH
67980: CALL 93406 0 1
// AddComEnterUnit ( driver , tmp ) ;
67984: LD_VAR 0 18
67988: PPUSH
67989: LD_VAR 0 13
67993: PPUSH
67994: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67998: LD_VAR 0 18
68002: PPUSH
68003: LD_VAR 0 7
68007: PPUSH
68008: CALL_OW 173
// AddComExitVehicle ( driver ) ;
68012: LD_VAR 0 18
68016: PPUSH
68017: CALL_OW 181
// end ; continue ;
68021: GO 67673
// end ; if not cleaners or not tmp in cleaners then
68023: LD_VAR 0 6
68027: NOT
68028: PUSH
68029: LD_VAR 0 13
68033: PUSH
68034: LD_VAR 0 6
68038: IN
68039: NOT
68040: OR
68041: IFFALSE 68348
// begin if dep then
68043: LD_VAR 0 17
68047: IFFALSE 68183
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
68049: LD_ADDR_VAR 0 16
68053: PUSH
68054: LD_VAR 0 17
68058: PUSH
68059: LD_INT 1
68061: ARRAY
68062: PPUSH
68063: CALL_OW 250
68067: PPUSH
68068: LD_VAR 0 17
68072: PUSH
68073: LD_INT 1
68075: ARRAY
68076: PPUSH
68077: CALL_OW 254
68081: PPUSH
68082: LD_INT 5
68084: PPUSH
68085: CALL_OW 272
68089: PUSH
68090: LD_VAR 0 17
68094: PUSH
68095: LD_INT 1
68097: ARRAY
68098: PPUSH
68099: CALL_OW 251
68103: PPUSH
68104: LD_VAR 0 17
68108: PUSH
68109: LD_INT 1
68111: ARRAY
68112: PPUSH
68113: CALL_OW 254
68117: PPUSH
68118: LD_INT 5
68120: PPUSH
68121: CALL_OW 273
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
68130: LD_VAR 0 16
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PPUSH
68139: LD_VAR 0 16
68143: PUSH
68144: LD_INT 2
68146: ARRAY
68147: PPUSH
68148: CALL_OW 488
68152: IFFALSE 68183
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
68154: LD_VAR 0 13
68158: PPUSH
68159: LD_VAR 0 16
68163: PUSH
68164: LD_INT 1
68166: ARRAY
68167: PPUSH
68168: LD_VAR 0 16
68172: PUSH
68173: LD_INT 2
68175: ARRAY
68176: PPUSH
68177: CALL_OW 111
// continue ;
68181: GO 67673
// end ; end ; r := GetDir ( tmp ) ;
68183: LD_ADDR_VAR 0 15
68187: PUSH
68188: LD_VAR 0 13
68192: PPUSH
68193: CALL_OW 254
68197: ST_TO_ADDR
// if r = 5 then
68198: LD_VAR 0 15
68202: PUSH
68203: LD_INT 5
68205: EQUAL
68206: IFFALSE 68216
// r := 0 ;
68208: LD_ADDR_VAR 0 15
68212: PUSH
68213: LD_INT 0
68215: ST_TO_ADDR
// for j = r to 5 do
68216: LD_ADDR_VAR 0 10
68220: PUSH
68221: DOUBLE
68222: LD_VAR 0 15
68226: DEC
68227: ST_TO_ADDR
68228: LD_INT 5
68230: PUSH
68231: FOR_TO
68232: IFFALSE 68346
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
68234: LD_ADDR_VAR 0 11
68238: PUSH
68239: LD_VAR 0 13
68243: PPUSH
68244: CALL_OW 250
68248: PPUSH
68249: LD_VAR 0 10
68253: PPUSH
68254: LD_INT 2
68256: PPUSH
68257: CALL_OW 272
68261: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
68262: LD_ADDR_VAR 0 12
68266: PUSH
68267: LD_VAR 0 13
68271: PPUSH
68272: CALL_OW 251
68276: PPUSH
68277: LD_VAR 0 10
68281: PPUSH
68282: LD_INT 2
68284: PPUSH
68285: CALL_OW 273
68289: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
68290: LD_VAR 0 11
68294: PPUSH
68295: LD_VAR 0 12
68299: PPUSH
68300: CALL_OW 488
68304: PUSH
68305: LD_VAR 0 11
68309: PPUSH
68310: LD_VAR 0 12
68314: PPUSH
68315: CALL_OW 428
68319: NOT
68320: AND
68321: IFFALSE 68344
// begin ComMoveXY ( tmp , _x , _y ) ;
68323: LD_VAR 0 13
68327: PPUSH
68328: LD_VAR 0 11
68332: PPUSH
68333: LD_VAR 0 12
68337: PPUSH
68338: CALL_OW 111
// break ;
68342: GO 68346
// end ; end ;
68344: GO 68231
68346: POP
68347: POP
// end ; end ;
68348: GO 67673
68350: POP
68351: POP
// end ;
68352: LD_VAR 0 8
68356: RET
// export function BuildingTechInvented ( side , btype ) ; begin
68357: LD_INT 0
68359: PPUSH
// result := true ;
68360: LD_ADDR_VAR 0 3
68364: PUSH
68365: LD_INT 1
68367: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
68368: LD_VAR 0 2
68372: PUSH
68373: LD_INT 24
68375: DOUBLE
68376: EQUAL
68377: IFTRUE 68387
68379: LD_INT 33
68381: DOUBLE
68382: EQUAL
68383: IFTRUE 68387
68385: GO 68412
68387: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
68388: LD_ADDR_VAR 0 3
68392: PUSH
68393: LD_INT 32
68395: PPUSH
68396: LD_VAR 0 1
68400: PPUSH
68401: CALL_OW 321
68405: PUSH
68406: LD_INT 2
68408: EQUAL
68409: ST_TO_ADDR
68410: GO 68728
68412: LD_INT 20
68414: DOUBLE
68415: EQUAL
68416: IFTRUE 68420
68418: GO 68445
68420: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
68421: LD_ADDR_VAR 0 3
68425: PUSH
68426: LD_INT 6
68428: PPUSH
68429: LD_VAR 0 1
68433: PPUSH
68434: CALL_OW 321
68438: PUSH
68439: LD_INT 2
68441: EQUAL
68442: ST_TO_ADDR
68443: GO 68728
68445: LD_INT 22
68447: DOUBLE
68448: EQUAL
68449: IFTRUE 68459
68451: LD_INT 36
68453: DOUBLE
68454: EQUAL
68455: IFTRUE 68459
68457: GO 68484
68459: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
68460: LD_ADDR_VAR 0 3
68464: PUSH
68465: LD_INT 15
68467: PPUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: CALL_OW 321
68477: PUSH
68478: LD_INT 2
68480: EQUAL
68481: ST_TO_ADDR
68482: GO 68728
68484: LD_INT 30
68486: DOUBLE
68487: EQUAL
68488: IFTRUE 68492
68490: GO 68517
68492: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
68493: LD_ADDR_VAR 0 3
68497: PUSH
68498: LD_INT 20
68500: PPUSH
68501: LD_VAR 0 1
68505: PPUSH
68506: CALL_OW 321
68510: PUSH
68511: LD_INT 2
68513: EQUAL
68514: ST_TO_ADDR
68515: GO 68728
68517: LD_INT 28
68519: DOUBLE
68520: EQUAL
68521: IFTRUE 68531
68523: LD_INT 21
68525: DOUBLE
68526: EQUAL
68527: IFTRUE 68531
68529: GO 68556
68531: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
68532: LD_ADDR_VAR 0 3
68536: PUSH
68537: LD_INT 21
68539: PPUSH
68540: LD_VAR 0 1
68544: PPUSH
68545: CALL_OW 321
68549: PUSH
68550: LD_INT 2
68552: EQUAL
68553: ST_TO_ADDR
68554: GO 68728
68556: LD_INT 16
68558: DOUBLE
68559: EQUAL
68560: IFTRUE 68564
68562: GO 68589
68564: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
68565: LD_ADDR_VAR 0 3
68569: PUSH
68570: LD_INT 84
68572: PPUSH
68573: LD_VAR 0 1
68577: PPUSH
68578: CALL_OW 321
68582: PUSH
68583: LD_INT 2
68585: EQUAL
68586: ST_TO_ADDR
68587: GO 68728
68589: LD_INT 19
68591: DOUBLE
68592: EQUAL
68593: IFTRUE 68603
68595: LD_INT 23
68597: DOUBLE
68598: EQUAL
68599: IFTRUE 68603
68601: GO 68628
68603: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
68604: LD_ADDR_VAR 0 3
68608: PUSH
68609: LD_INT 83
68611: PPUSH
68612: LD_VAR 0 1
68616: PPUSH
68617: CALL_OW 321
68621: PUSH
68622: LD_INT 2
68624: EQUAL
68625: ST_TO_ADDR
68626: GO 68728
68628: LD_INT 17
68630: DOUBLE
68631: EQUAL
68632: IFTRUE 68636
68634: GO 68661
68636: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
68637: LD_ADDR_VAR 0 3
68641: PUSH
68642: LD_INT 39
68644: PPUSH
68645: LD_VAR 0 1
68649: PPUSH
68650: CALL_OW 321
68654: PUSH
68655: LD_INT 2
68657: EQUAL
68658: ST_TO_ADDR
68659: GO 68728
68661: LD_INT 18
68663: DOUBLE
68664: EQUAL
68665: IFTRUE 68669
68667: GO 68694
68669: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
68670: LD_ADDR_VAR 0 3
68674: PUSH
68675: LD_INT 40
68677: PPUSH
68678: LD_VAR 0 1
68682: PPUSH
68683: CALL_OW 321
68687: PUSH
68688: LD_INT 2
68690: EQUAL
68691: ST_TO_ADDR
68692: GO 68728
68694: LD_INT 27
68696: DOUBLE
68697: EQUAL
68698: IFTRUE 68702
68700: GO 68727
68702: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
68703: LD_ADDR_VAR 0 3
68707: PUSH
68708: LD_INT 35
68710: PPUSH
68711: LD_VAR 0 1
68715: PPUSH
68716: CALL_OW 321
68720: PUSH
68721: LD_INT 2
68723: EQUAL
68724: ST_TO_ADDR
68725: GO 68728
68727: POP
// end ;
68728: LD_VAR 0 3
68732: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
68733: LD_INT 0
68735: PPUSH
68736: PPUSH
68737: PPUSH
68738: PPUSH
68739: PPUSH
68740: PPUSH
68741: PPUSH
68742: PPUSH
68743: PPUSH
68744: PPUSH
68745: PPUSH
// result := false ;
68746: LD_ADDR_VAR 0 6
68750: PUSH
68751: LD_INT 0
68753: ST_TO_ADDR
// if btype = b_depot then
68754: LD_VAR 0 2
68758: PUSH
68759: LD_INT 0
68761: EQUAL
68762: IFFALSE 68774
// begin result := true ;
68764: LD_ADDR_VAR 0 6
68768: PUSH
68769: LD_INT 1
68771: ST_TO_ADDR
// exit ;
68772: GO 69600
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
68774: LD_VAR 0 1
68778: NOT
68779: PUSH
68780: LD_VAR 0 1
68784: PPUSH
68785: CALL_OW 266
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: LD_INT 1
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: IN
68800: NOT
68801: OR
68802: PUSH
68803: LD_VAR 0 2
68807: NOT
68808: OR
68809: PUSH
68810: LD_VAR 0 5
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: LD_INT 4
68829: PUSH
68830: LD_INT 5
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: IN
68841: NOT
68842: OR
68843: PUSH
68844: LD_VAR 0 3
68848: PPUSH
68849: LD_VAR 0 4
68853: PPUSH
68854: CALL_OW 488
68858: NOT
68859: OR
68860: IFFALSE 68864
// exit ;
68862: GO 69600
// side := GetSide ( depot ) ;
68864: LD_ADDR_VAR 0 9
68868: PUSH
68869: LD_VAR 0 1
68873: PPUSH
68874: CALL_OW 255
68878: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68879: LD_VAR 0 9
68883: PPUSH
68884: LD_VAR 0 2
68888: PPUSH
68889: CALL 68357 0 2
68893: NOT
68894: IFFALSE 68898
// exit ;
68896: GO 69600
// pom := GetBase ( depot ) ;
68898: LD_ADDR_VAR 0 10
68902: PUSH
68903: LD_VAR 0 1
68907: PPUSH
68908: CALL_OW 274
68912: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68913: LD_ADDR_VAR 0 11
68917: PUSH
68918: LD_VAR 0 2
68922: PPUSH
68923: LD_VAR 0 1
68927: PPUSH
68928: CALL_OW 248
68932: PPUSH
68933: CALL_OW 450
68937: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68938: LD_VAR 0 10
68942: PPUSH
68943: LD_INT 1
68945: PPUSH
68946: CALL_OW 275
68950: PUSH
68951: LD_VAR 0 11
68955: PUSH
68956: LD_INT 1
68958: ARRAY
68959: GREATEREQUAL
68960: PUSH
68961: LD_VAR 0 10
68965: PPUSH
68966: LD_INT 2
68968: PPUSH
68969: CALL_OW 275
68973: PUSH
68974: LD_VAR 0 11
68978: PUSH
68979: LD_INT 2
68981: ARRAY
68982: GREATEREQUAL
68983: AND
68984: PUSH
68985: LD_VAR 0 10
68989: PPUSH
68990: LD_INT 3
68992: PPUSH
68993: CALL_OW 275
68997: PUSH
68998: LD_VAR 0 11
69002: PUSH
69003: LD_INT 3
69005: ARRAY
69006: GREATEREQUAL
69007: AND
69008: NOT
69009: IFFALSE 69013
// exit ;
69011: GO 69600
// if GetBType ( depot ) = b_depot then
69013: LD_VAR 0 1
69017: PPUSH
69018: CALL_OW 266
69022: PUSH
69023: LD_INT 0
69025: EQUAL
69026: IFFALSE 69038
// dist := 28 else
69028: LD_ADDR_VAR 0 14
69032: PUSH
69033: LD_INT 28
69035: ST_TO_ADDR
69036: GO 69046
// dist := 36 ;
69038: LD_ADDR_VAR 0 14
69042: PUSH
69043: LD_INT 36
69045: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
69046: LD_VAR 0 1
69050: PPUSH
69051: LD_VAR 0 3
69055: PPUSH
69056: LD_VAR 0 4
69060: PPUSH
69061: CALL_OW 297
69065: PUSH
69066: LD_VAR 0 14
69070: GREATER
69071: IFFALSE 69075
// exit ;
69073: GO 69600
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
69075: LD_ADDR_VAR 0 12
69079: PUSH
69080: LD_VAR 0 2
69084: PPUSH
69085: LD_VAR 0 3
69089: PPUSH
69090: LD_VAR 0 4
69094: PPUSH
69095: LD_VAR 0 5
69099: PPUSH
69100: LD_VAR 0 1
69104: PPUSH
69105: CALL_OW 248
69109: PPUSH
69110: LD_INT 0
69112: PPUSH
69113: CALL 69605 0 6
69117: ST_TO_ADDR
// if not hexes then
69118: LD_VAR 0 12
69122: NOT
69123: IFFALSE 69127
// exit ;
69125: GO 69600
// hex := GetHexInfo ( x , y ) ;
69127: LD_ADDR_VAR 0 15
69131: PUSH
69132: LD_VAR 0 3
69136: PPUSH
69137: LD_VAR 0 4
69141: PPUSH
69142: CALL_OW 546
69146: ST_TO_ADDR
// if hex [ 1 ] then
69147: LD_VAR 0 15
69151: PUSH
69152: LD_INT 1
69154: ARRAY
69155: IFFALSE 69159
// exit ;
69157: GO 69600
// height := hex [ 2 ] ;
69159: LD_ADDR_VAR 0 13
69163: PUSH
69164: LD_VAR 0 15
69168: PUSH
69169: LD_INT 2
69171: ARRAY
69172: ST_TO_ADDR
// for i = 1 to hexes do
69173: LD_ADDR_VAR 0 7
69177: PUSH
69178: DOUBLE
69179: LD_INT 1
69181: DEC
69182: ST_TO_ADDR
69183: LD_VAR 0 12
69187: PUSH
69188: FOR_TO
69189: IFFALSE 69519
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
69191: LD_VAR 0 12
69195: PUSH
69196: LD_VAR 0 7
69200: ARRAY
69201: PUSH
69202: LD_INT 1
69204: ARRAY
69205: PPUSH
69206: LD_VAR 0 12
69210: PUSH
69211: LD_VAR 0 7
69215: ARRAY
69216: PUSH
69217: LD_INT 2
69219: ARRAY
69220: PPUSH
69221: CALL_OW 488
69225: NOT
69226: PUSH
69227: LD_VAR 0 12
69231: PUSH
69232: LD_VAR 0 7
69236: ARRAY
69237: PUSH
69238: LD_INT 1
69240: ARRAY
69241: PPUSH
69242: LD_VAR 0 12
69246: PUSH
69247: LD_VAR 0 7
69251: ARRAY
69252: PUSH
69253: LD_INT 2
69255: ARRAY
69256: PPUSH
69257: CALL_OW 428
69261: PUSH
69262: LD_INT 0
69264: GREATER
69265: OR
69266: PUSH
69267: LD_VAR 0 12
69271: PUSH
69272: LD_VAR 0 7
69276: ARRAY
69277: PUSH
69278: LD_INT 1
69280: ARRAY
69281: PPUSH
69282: LD_VAR 0 12
69286: PUSH
69287: LD_VAR 0 7
69291: ARRAY
69292: PUSH
69293: LD_INT 2
69295: ARRAY
69296: PPUSH
69297: CALL_OW 351
69301: OR
69302: IFFALSE 69308
// exit ;
69304: POP
69305: POP
69306: GO 69600
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69308: LD_ADDR_VAR 0 8
69312: PUSH
69313: LD_VAR 0 12
69317: PUSH
69318: LD_VAR 0 7
69322: ARRAY
69323: PUSH
69324: LD_INT 1
69326: ARRAY
69327: PPUSH
69328: LD_VAR 0 12
69332: PUSH
69333: LD_VAR 0 7
69337: ARRAY
69338: PUSH
69339: LD_INT 2
69341: ARRAY
69342: PPUSH
69343: CALL_OW 546
69347: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
69348: LD_VAR 0 8
69352: PUSH
69353: LD_INT 1
69355: ARRAY
69356: PUSH
69357: LD_VAR 0 8
69361: PUSH
69362: LD_INT 2
69364: ARRAY
69365: PUSH
69366: LD_VAR 0 13
69370: PUSH
69371: LD_INT 2
69373: PLUS
69374: GREATER
69375: OR
69376: PUSH
69377: LD_VAR 0 8
69381: PUSH
69382: LD_INT 2
69384: ARRAY
69385: PUSH
69386: LD_VAR 0 13
69390: PUSH
69391: LD_INT 2
69393: MINUS
69394: LESS
69395: OR
69396: PUSH
69397: LD_VAR 0 8
69401: PUSH
69402: LD_INT 3
69404: ARRAY
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 8
69411: PUSH
69412: LD_INT 9
69414: PUSH
69415: LD_INT 10
69417: PUSH
69418: LD_INT 11
69420: PUSH
69421: LD_INT 12
69423: PUSH
69424: LD_INT 13
69426: PUSH
69427: LD_INT 16
69429: PUSH
69430: LD_INT 17
69432: PUSH
69433: LD_INT 18
69435: PUSH
69436: LD_INT 19
69438: PUSH
69439: LD_INT 20
69441: PUSH
69442: LD_INT 21
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: IN
69460: NOT
69461: OR
69462: PUSH
69463: LD_VAR 0 8
69467: PUSH
69468: LD_INT 5
69470: ARRAY
69471: NOT
69472: OR
69473: PUSH
69474: LD_VAR 0 8
69478: PUSH
69479: LD_INT 6
69481: ARRAY
69482: PUSH
69483: LD_INT 1
69485: PUSH
69486: LD_INT 2
69488: PUSH
69489: LD_INT 7
69491: PUSH
69492: LD_INT 9
69494: PUSH
69495: LD_INT 10
69497: PUSH
69498: LD_INT 11
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: IN
69509: NOT
69510: OR
69511: IFFALSE 69517
// exit ;
69513: POP
69514: POP
69515: GO 69600
// end ;
69517: GO 69188
69519: POP
69520: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
69521: LD_VAR 0 9
69525: PPUSH
69526: LD_VAR 0 3
69530: PPUSH
69531: LD_VAR 0 4
69535: PPUSH
69536: LD_INT 20
69538: PPUSH
69539: CALL 61523 0 4
69543: PUSH
69544: LD_INT 4
69546: ARRAY
69547: IFFALSE 69551
// exit ;
69549: GO 69600
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
69551: LD_VAR 0 2
69555: PUSH
69556: LD_INT 29
69558: PUSH
69559: LD_INT 30
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: IN
69566: PUSH
69567: LD_VAR 0 3
69571: PPUSH
69572: LD_VAR 0 4
69576: PPUSH
69577: LD_VAR 0 9
69581: PPUSH
69582: CALL_OW 440
69586: NOT
69587: AND
69588: IFFALSE 69592
// exit ;
69590: GO 69600
// result := true ;
69592: LD_ADDR_VAR 0 6
69596: PUSH
69597: LD_INT 1
69599: ST_TO_ADDR
// end ;
69600: LD_VAR 0 6
69604: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
69605: LD_INT 0
69607: PPUSH
69608: PPUSH
69609: PPUSH
69610: PPUSH
69611: PPUSH
69612: PPUSH
69613: PPUSH
69614: PPUSH
69615: PPUSH
69616: PPUSH
69617: PPUSH
69618: PPUSH
69619: PPUSH
69620: PPUSH
69621: PPUSH
69622: PPUSH
69623: PPUSH
69624: PPUSH
69625: PPUSH
69626: PPUSH
69627: PPUSH
69628: PPUSH
69629: PPUSH
69630: PPUSH
69631: PPUSH
69632: PPUSH
69633: PPUSH
69634: PPUSH
69635: PPUSH
69636: PPUSH
69637: PPUSH
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
69642: PPUSH
69643: PPUSH
69644: PPUSH
69645: PPUSH
69646: PPUSH
69647: PPUSH
69648: PPUSH
69649: PPUSH
69650: PPUSH
69651: PPUSH
69652: PPUSH
69653: PPUSH
69654: PPUSH
69655: PPUSH
69656: PPUSH
69657: PPUSH
69658: PPUSH
69659: PPUSH
69660: PPUSH
69661: PPUSH
69662: PPUSH
69663: PPUSH
69664: PPUSH
// result = [ ] ;
69665: LD_ADDR_VAR 0 7
69669: PUSH
69670: EMPTY
69671: ST_TO_ADDR
// temp_list = [ ] ;
69672: LD_ADDR_VAR 0 9
69676: PUSH
69677: EMPTY
69678: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
69679: LD_VAR 0 4
69683: PUSH
69684: LD_INT 0
69686: PUSH
69687: LD_INT 1
69689: PUSH
69690: LD_INT 2
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: LD_INT 4
69698: PUSH
69699: LD_INT 5
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: IN
69710: NOT
69711: PUSH
69712: LD_VAR 0 1
69716: PUSH
69717: LD_INT 0
69719: PUSH
69720: LD_INT 1
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: IN
69727: PUSH
69728: LD_VAR 0 5
69732: PUSH
69733: LD_INT 1
69735: PUSH
69736: LD_INT 2
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: IN
69747: NOT
69748: AND
69749: OR
69750: IFFALSE 69754
// exit ;
69752: GO 88145
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
69754: LD_VAR 0 1
69758: PUSH
69759: LD_INT 6
69761: PUSH
69762: LD_INT 7
69764: PUSH
69765: LD_INT 8
69767: PUSH
69768: LD_INT 13
69770: PUSH
69771: LD_INT 12
69773: PUSH
69774: LD_INT 15
69776: PUSH
69777: LD_INT 11
69779: PUSH
69780: LD_INT 14
69782: PUSH
69783: LD_INT 10
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: IN
69797: IFFALSE 69807
// btype = b_lab ;
69799: LD_ADDR_VAR 0 1
69803: PUSH
69804: LD_INT 6
69806: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69807: LD_VAR 0 6
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: LD_INT 1
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: IN
69826: NOT
69827: PUSH
69828: LD_VAR 0 1
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: LD_INT 2
69841: PUSH
69842: LD_INT 3
69844: PUSH
69845: LD_INT 6
69847: PUSH
69848: LD_INT 36
69850: PUSH
69851: LD_INT 4
69853: PUSH
69854: LD_INT 5
69856: PUSH
69857: LD_INT 31
69859: PUSH
69860: LD_INT 32
69862: PUSH
69863: LD_INT 33
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: IN
69879: NOT
69880: PUSH
69881: LD_VAR 0 6
69885: PUSH
69886: LD_INT 1
69888: EQUAL
69889: AND
69890: OR
69891: PUSH
69892: LD_VAR 0 1
69896: PUSH
69897: LD_INT 2
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: IN
69907: NOT
69908: PUSH
69909: LD_VAR 0 6
69913: PUSH
69914: LD_INT 2
69916: EQUAL
69917: AND
69918: OR
69919: IFFALSE 69929
// mode = 0 ;
69921: LD_ADDR_VAR 0 6
69925: PUSH
69926: LD_INT 0
69928: ST_TO_ADDR
// case mode of 0 :
69929: LD_VAR 0 6
69933: PUSH
69934: LD_INT 0
69936: DOUBLE
69937: EQUAL
69938: IFTRUE 69942
69940: GO 81395
69942: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69943: LD_ADDR_VAR 0 11
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: LD_INT 0
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 1
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: LD_INT 1
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 1
70012: NEG
70013: PUSH
70014: LD_INT 1
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: LD_INT 2
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: LD_INT 2
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 1
70058: PUSH
70059: LD_INT 2
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: LD_INT 2
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 1
70078: NEG
70079: PUSH
70080: LD_INT 1
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 1
70089: PUSH
70090: LD_INT 3
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 0
70099: PUSH
70100: LD_INT 3
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 1
70109: NEG
70110: PUSH
70111: LD_INT 2
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70136: LD_ADDR_VAR 0 12
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: LD_INT 1
70156: NEG
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 1
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 1
70174: PUSH
70175: LD_INT 1
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: LD_INT 1
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 2
70228: PUSH
70229: LD_INT 0
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 2
70238: PUSH
70239: LD_INT 1
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 1
70248: NEG
70249: PUSH
70250: LD_INT 1
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 2
70259: NEG
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: NEG
70271: PUSH
70272: LD_INT 1
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 2
70282: NEG
70283: PUSH
70284: LD_INT 1
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 3
70293: NEG
70294: PUSH
70295: LD_INT 0
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 3
70304: NEG
70305: PUSH
70306: LD_INT 1
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70332: LD_ADDR_VAR 0 13
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: LD_INT 0
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: LD_INT 1
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 1
70360: PUSH
70361: LD_INT 0
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: LD_INT 1
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: LD_INT 1
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 1
70401: NEG
70402: PUSH
70403: LD_INT 1
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: PUSH
70415: LD_INT 2
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 2
70425: PUSH
70426: LD_INT 1
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 2
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: LD_INT 2
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 2
70479: NEG
70480: PUSH
70481: LD_INT 3
70483: NEG
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 3
70491: NEG
70492: PUSH
70493: LD_INT 2
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 3
70503: NEG
70504: PUSH
70505: LD_INT 3
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70531: LD_ADDR_VAR 0 14
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: LD_INT 1
70551: NEG
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: LD_INT 0
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: LD_INT 1
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 1
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 1
70589: NEG
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 1
70600: NEG
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: NEG
70613: PUSH
70614: LD_INT 2
70616: NEG
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 0
70624: PUSH
70625: LD_INT 2
70627: NEG
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: LD_INT 1
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 1
70646: PUSH
70647: LD_INT 2
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 0
70656: PUSH
70657: LD_INT 2
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 1
70666: NEG
70667: PUSH
70668: LD_INT 1
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 1
70677: NEG
70678: PUSH
70679: LD_INT 3
70681: NEG
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 3
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 1
70700: PUSH
70701: LD_INT 2
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70727: LD_ADDR_VAR 0 15
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_INT 0
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: LD_INT 1
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: PUSH
70756: LD_INT 0
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: LD_INT 1
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: LD_INT 1
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 1
70785: NEG
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 1
70796: NEG
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 1
70808: PUSH
70809: LD_INT 1
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: LD_INT 1
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 1
70839: NEG
70840: PUSH
70841: LD_INT 1
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 2
70850: NEG
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 2
70861: NEG
70862: PUSH
70863: LD_INT 1
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 2
70873: PUSH
70874: LD_INT 1
70876: NEG
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 3
70884: PUSH
70885: LD_INT 0
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 3
70894: PUSH
70895: LD_INT 1
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70920: LD_ADDR_VAR 0 16
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: LD_INT 0
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: LD_INT 1
70940: NEG
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 1
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: LD_INT 1
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 0
70968: PUSH
70969: LD_INT 1
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 1
70978: NEG
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 1
70989: NEG
70990: PUSH
70991: LD_INT 1
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 2
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: PUSH
71014: LD_INT 1
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: PUSH
71024: LD_INT 2
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 1
71033: PUSH
71034: LD_INT 2
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: NEG
71044: PUSH
71045: LD_INT 1
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 2
71055: NEG
71056: PUSH
71057: LD_INT 2
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: LD_INT 2
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 3
71077: PUSH
71078: LD_INT 3
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 2
71087: PUSH
71088: LD_INT 3
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71113: LD_ADDR_VAR 0 17
71117: PUSH
71118: LD_INT 0
71120: PUSH
71121: LD_INT 0
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 1
71141: PUSH
71142: LD_INT 0
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 1
71151: PUSH
71152: LD_INT 1
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 0
71161: PUSH
71162: LD_INT 1
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 1
71171: NEG
71172: PUSH
71173: LD_INT 0
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 1
71182: NEG
71183: PUSH
71184: LD_INT 1
71186: NEG
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 1
71194: NEG
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: LD_INT 2
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 1
71217: PUSH
71218: LD_INT 1
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 2
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: LD_INT 1
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: LD_INT 2
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 1
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 1
71278: NEG
71279: PUSH
71280: LD_INT 1
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 2
71300: NEG
71301: PUSH
71302: LD_INT 1
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 2
71312: NEG
71313: PUSH
71314: LD_INT 2
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71343: LD_ADDR_VAR 0 18
71347: PUSH
71348: LD_INT 0
71350: PUSH
71351: LD_INT 0
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 1
71371: PUSH
71372: LD_INT 0
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 1
71381: PUSH
71382: LD_INT 1
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: LD_INT 1
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: NEG
71402: PUSH
71403: LD_INT 0
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 1
71412: NEG
71413: PUSH
71414: LD_INT 1
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 0
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 1
71447: PUSH
71448: LD_INT 1
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 2
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 2
71468: PUSH
71469: LD_INT 1
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 2
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 1
71488: PUSH
71489: LD_INT 2
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 2
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 1
71508: NEG
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 2
71519: NEG
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 2
71530: NEG
71531: PUSH
71532: LD_INT 1
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 2
71542: NEG
71543: PUSH
71544: LD_INT 2
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71573: LD_ADDR_VAR 0 19
71577: PUSH
71578: LD_INT 0
71580: PUSH
71581: LD_INT 0
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 0
71590: PUSH
71591: LD_INT 1
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 1
71601: PUSH
71602: LD_INT 0
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 1
71611: PUSH
71612: LD_INT 1
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 0
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 1
71631: NEG
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 1
71642: NEG
71643: PUSH
71644: LD_INT 1
71646: NEG
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: LD_INT 2
71658: NEG
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: LD_INT 2
71669: NEG
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 1
71677: PUSH
71678: LD_INT 1
71680: NEG
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 2
71688: PUSH
71689: LD_INT 0
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 2
71698: PUSH
71699: LD_INT 1
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: LD_INT 2
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 1
71718: PUSH
71719: LD_INT 2
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: LD_INT 2
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 1
71738: NEG
71739: PUSH
71740: LD_INT 1
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 2
71749: NEG
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 2
71760: NEG
71761: PUSH
71762: LD_INT 1
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 2
71772: NEG
71773: PUSH
71774: LD_INT 2
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71803: LD_ADDR_VAR 0 20
71807: PUSH
71808: LD_INT 0
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: LD_INT 0
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 1
71841: PUSH
71842: LD_INT 1
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 0
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 1
71861: NEG
71862: PUSH
71863: LD_INT 0
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 1
71872: NEG
71873: PUSH
71874: LD_INT 1
71876: NEG
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 1
71884: NEG
71885: PUSH
71886: LD_INT 2
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 0
71896: PUSH
71897: LD_INT 2
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 1
71907: PUSH
71908: LD_INT 1
71910: NEG
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 2
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 2
71928: PUSH
71929: LD_INT 1
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 2
71938: PUSH
71939: LD_INT 2
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 1
71948: PUSH
71949: LD_INT 2
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 0
71958: PUSH
71959: LD_INT 2
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 1
71968: NEG
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 2
71979: NEG
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 2
71990: NEG
71991: PUSH
71992: LD_INT 1
71994: NEG
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 2
72002: NEG
72003: PUSH
72004: LD_INT 2
72006: NEG
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72033: LD_ADDR_VAR 0 21
72037: PUSH
72038: LD_INT 0
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 0
72050: PUSH
72051: LD_INT 1
72053: NEG
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 1
72071: PUSH
72072: LD_INT 1
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: LD_INT 1
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 1
72091: NEG
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 1
72102: NEG
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 1
72114: NEG
72115: PUSH
72116: LD_INT 2
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: LD_INT 2
72129: NEG
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 1
72137: PUSH
72138: LD_INT 1
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 2
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 2
72158: PUSH
72159: LD_INT 1
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 2
72168: PUSH
72169: LD_INT 2
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 1
72178: PUSH
72179: LD_INT 2
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: LD_INT 2
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 1
72198: NEG
72199: PUSH
72200: LD_INT 1
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 2
72209: NEG
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 2
72220: NEG
72221: PUSH
72222: LD_INT 1
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 2
72232: NEG
72233: PUSH
72234: LD_INT 2
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72263: LD_ADDR_VAR 0 22
72267: PUSH
72268: LD_INT 0
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 0
72280: PUSH
72281: LD_INT 1
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 1
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 1
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 0
72311: PUSH
72312: LD_INT 1
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 1
72321: NEG
72322: PUSH
72323: LD_INT 0
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 1
72332: NEG
72333: PUSH
72334: LD_INT 1
72336: NEG
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 1
72344: NEG
72345: PUSH
72346: LD_INT 2
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: LD_INT 2
72359: NEG
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 1
72367: PUSH
72368: LD_INT 1
72370: NEG
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 2
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 2
72388: PUSH
72389: LD_INT 1
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 2
72398: PUSH
72399: LD_INT 2
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 1
72408: PUSH
72409: LD_INT 2
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 0
72418: PUSH
72419: LD_INT 2
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 1
72428: NEG
72429: PUSH
72430: LD_INT 1
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 2
72439: NEG
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 2
72450: NEG
72451: PUSH
72452: LD_INT 1
72454: NEG
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 2
72462: NEG
72463: PUSH
72464: LD_INT 2
72466: NEG
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72493: LD_ADDR_VAR 0 23
72497: PUSH
72498: LD_INT 0
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 0
72510: PUSH
72511: LD_INT 1
72513: NEG
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 1
72521: PUSH
72522: LD_INT 0
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 1
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 0
72541: PUSH
72542: LD_INT 1
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 1
72551: NEG
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 1
72562: NEG
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 1
72574: NEG
72575: PUSH
72576: LD_INT 2
72578: NEG
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: PUSH
72584: LD_INT 0
72586: PUSH
72587: LD_INT 2
72589: NEG
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 1
72597: PUSH
72598: LD_INT 1
72600: NEG
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 2
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 2
72618: PUSH
72619: LD_INT 1
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 2
72628: PUSH
72629: LD_INT 2
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 1
72638: PUSH
72639: LD_INT 2
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: LD_INT 2
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 1
72658: NEG
72659: PUSH
72660: LD_INT 1
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 2
72669: NEG
72670: PUSH
72671: LD_INT 0
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 2
72680: NEG
72681: PUSH
72682: LD_INT 1
72684: NEG
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 2
72692: NEG
72693: PUSH
72694: LD_INT 2
72696: NEG
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 2
72704: NEG
72705: PUSH
72706: LD_INT 3
72708: NEG
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 1
72716: NEG
72717: PUSH
72718: LD_INT 3
72720: NEG
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 1
72728: PUSH
72729: LD_INT 2
72731: NEG
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 2
72739: PUSH
72740: LD_INT 1
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
72773: LD_ADDR_VAR 0 24
72777: PUSH
72778: LD_INT 0
72780: PUSH
72781: LD_INT 0
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 0
72790: PUSH
72791: LD_INT 1
72793: NEG
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 1
72801: PUSH
72802: LD_INT 0
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 1
72811: PUSH
72812: LD_INT 1
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: LD_INT 1
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 1
72831: NEG
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 1
72842: NEG
72843: PUSH
72844: LD_INT 1
72846: NEG
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 1
72854: NEG
72855: PUSH
72856: LD_INT 2
72858: NEG
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: LD_INT 2
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: PUSH
72878: LD_INT 1
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 0
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 2
72898: PUSH
72899: LD_INT 1
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 2
72908: PUSH
72909: LD_INT 2
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 1
72918: PUSH
72919: LD_INT 2
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 0
72928: PUSH
72929: LD_INT 2
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 1
72938: NEG
72939: PUSH
72940: LD_INT 1
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 2
72949: NEG
72950: PUSH
72951: LD_INT 0
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 2
72960: NEG
72961: PUSH
72962: LD_INT 1
72964: NEG
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 2
72972: NEG
72973: PUSH
72974: LD_INT 2
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 1
72984: PUSH
72985: LD_INT 2
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 2
72995: PUSH
72996: LD_INT 1
72998: NEG
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 3
73006: PUSH
73007: LD_INT 1
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 3
73016: PUSH
73017: LD_INT 2
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
73049: LD_ADDR_VAR 0 25
73053: PUSH
73054: LD_INT 0
73056: PUSH
73057: LD_INT 0
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 0
73066: PUSH
73067: LD_INT 1
73069: NEG
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 1
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 1
73087: PUSH
73088: LD_INT 1
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 0
73097: PUSH
73098: LD_INT 1
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 1
73107: NEG
73108: PUSH
73109: LD_INT 0
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: LD_INT 1
73118: NEG
73119: PUSH
73120: LD_INT 1
73122: NEG
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 1
73130: NEG
73131: PUSH
73132: LD_INT 2
73134: NEG
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 0
73142: PUSH
73143: LD_INT 2
73145: NEG
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 1
73153: PUSH
73154: LD_INT 1
73156: NEG
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 2
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 2
73174: PUSH
73175: LD_INT 1
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 2
73184: PUSH
73185: LD_INT 2
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 1
73194: PUSH
73195: LD_INT 2
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 0
73204: PUSH
73205: LD_INT 2
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 1
73214: NEG
73215: PUSH
73216: LD_INT 1
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 2
73225: NEG
73226: PUSH
73227: LD_INT 0
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 2
73236: NEG
73237: PUSH
73238: LD_INT 1
73240: NEG
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 2
73248: NEG
73249: PUSH
73250: LD_INT 2
73252: NEG
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 3
73260: PUSH
73261: LD_INT 1
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 3
73270: PUSH
73271: LD_INT 2
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: LD_INT 2
73280: PUSH
73281: LD_INT 3
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 1
73290: PUSH
73291: LD_INT 3
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73323: LD_ADDR_VAR 0 26
73327: PUSH
73328: LD_INT 0
73330: PUSH
73331: LD_INT 0
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 0
73340: PUSH
73341: LD_INT 1
73343: NEG
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 1
73351: PUSH
73352: LD_INT 0
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 1
73361: PUSH
73362: LD_INT 1
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: LD_INT 1
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 1
73381: NEG
73382: PUSH
73383: LD_INT 0
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 1
73392: NEG
73393: PUSH
73394: LD_INT 1
73396: NEG
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 1
73404: NEG
73405: PUSH
73406: LD_INT 2
73408: NEG
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 0
73416: PUSH
73417: LD_INT 2
73419: NEG
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: LD_INT 1
73427: PUSH
73428: LD_INT 1
73430: NEG
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 2
73438: PUSH
73439: LD_INT 0
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 2
73448: PUSH
73449: LD_INT 1
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 2
73458: PUSH
73459: LD_INT 2
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 1
73468: PUSH
73469: LD_INT 2
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 0
73478: PUSH
73479: LD_INT 2
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 1
73488: NEG
73489: PUSH
73490: LD_INT 1
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 2
73499: NEG
73500: PUSH
73501: LD_INT 0
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 2
73510: NEG
73511: PUSH
73512: LD_INT 1
73514: NEG
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PUSH
73524: LD_INT 2
73526: NEG
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 2
73534: PUSH
73535: LD_INT 3
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 1
73544: PUSH
73545: LD_INT 3
73547: PUSH
73548: EMPTY
73549: LIST
73550: LIST
73551: PUSH
73552: LD_INT 1
73554: NEG
73555: PUSH
73556: LD_INT 2
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 2
73565: NEG
73566: PUSH
73567: LD_INT 1
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73599: LD_ADDR_VAR 0 27
73603: PUSH
73604: LD_INT 0
73606: PUSH
73607: LD_INT 0
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: LD_INT 1
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 1
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 1
73637: PUSH
73638: LD_INT 1
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: LD_INT 1
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 1
73657: NEG
73658: PUSH
73659: LD_INT 0
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 1
73668: NEG
73669: PUSH
73670: LD_INT 1
73672: NEG
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 1
73680: NEG
73681: PUSH
73682: LD_INT 2
73684: NEG
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 0
73692: PUSH
73693: LD_INT 2
73695: NEG
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 1
73703: PUSH
73704: LD_INT 1
73706: NEG
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 2
73714: PUSH
73715: LD_INT 0
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 2
73724: PUSH
73725: LD_INT 1
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 2
73734: PUSH
73735: LD_INT 2
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 1
73744: PUSH
73745: LD_INT 2
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 0
73754: PUSH
73755: LD_INT 2
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 1
73764: NEG
73765: PUSH
73766: LD_INT 1
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 2
73775: NEG
73776: PUSH
73777: LD_INT 0
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 2
73786: NEG
73787: PUSH
73788: LD_INT 1
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 2
73798: NEG
73799: PUSH
73800: LD_INT 2
73802: NEG
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 1
73810: NEG
73811: PUSH
73812: LD_INT 2
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 2
73821: NEG
73822: PUSH
73823: LD_INT 1
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: LD_INT 3
73832: NEG
73833: PUSH
73834: LD_INT 1
73836: NEG
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 3
73844: NEG
73845: PUSH
73846: LD_INT 2
73848: NEG
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73879: LD_ADDR_VAR 0 28
73883: PUSH
73884: LD_INT 0
73886: PUSH
73887: LD_INT 0
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 0
73896: PUSH
73897: LD_INT 1
73899: NEG
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 1
73907: PUSH
73908: LD_INT 0
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: LD_INT 1
73917: PUSH
73918: LD_INT 1
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 0
73927: PUSH
73928: LD_INT 1
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: LD_INT 1
73937: NEG
73938: PUSH
73939: LD_INT 0
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 1
73948: NEG
73949: PUSH
73950: LD_INT 1
73952: NEG
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 1
73960: NEG
73961: PUSH
73962: LD_INT 2
73964: NEG
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: PUSH
73970: LD_INT 0
73972: PUSH
73973: LD_INT 2
73975: NEG
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 1
73983: PUSH
73984: LD_INT 1
73986: NEG
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 2
73994: PUSH
73995: LD_INT 0
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 2
74004: PUSH
74005: LD_INT 1
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PUSH
74012: LD_INT 2
74014: PUSH
74015: LD_INT 2
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: LD_INT 1
74024: PUSH
74025: LD_INT 2
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 0
74034: PUSH
74035: LD_INT 2
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 1
74044: NEG
74045: PUSH
74046: LD_INT 1
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 2
74055: NEG
74056: PUSH
74057: LD_INT 0
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 2
74066: NEG
74067: PUSH
74068: LD_INT 1
74070: NEG
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 2
74078: NEG
74079: PUSH
74080: LD_INT 2
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 2
74090: NEG
74091: PUSH
74092: LD_INT 3
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 1
74102: NEG
74103: PUSH
74104: LD_INT 3
74106: NEG
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 3
74114: NEG
74115: PUSH
74116: LD_INT 1
74118: NEG
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 3
74126: NEG
74127: PUSH
74128: LD_INT 2
74130: NEG
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74161: LD_ADDR_VAR 0 29
74165: PUSH
74166: LD_INT 0
74168: PUSH
74169: LD_INT 0
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 0
74178: PUSH
74179: LD_INT 1
74181: NEG
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 1
74189: PUSH
74190: LD_INT 0
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 1
74199: PUSH
74200: LD_INT 1
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 0
74209: PUSH
74210: LD_INT 1
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 1
74219: NEG
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 1
74230: NEG
74231: PUSH
74232: LD_INT 1
74234: NEG
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 1
74242: NEG
74243: PUSH
74244: LD_INT 2
74246: NEG
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 0
74254: PUSH
74255: LD_INT 2
74257: NEG
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PUSH
74263: LD_INT 1
74265: PUSH
74266: LD_INT 1
74268: NEG
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: LD_INT 2
74276: PUSH
74277: LD_INT 0
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: PUSH
74284: LD_INT 2
74286: PUSH
74287: LD_INT 1
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PUSH
74294: LD_INT 1
74296: PUSH
74297: LD_INT 2
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 0
74306: PUSH
74307: LD_INT 2
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 1
74316: NEG
74317: PUSH
74318: LD_INT 1
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 2
74327: NEG
74328: PUSH
74329: LD_INT 1
74331: NEG
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 2
74339: NEG
74340: PUSH
74341: LD_INT 2
74343: NEG
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 2
74351: NEG
74352: PUSH
74353: LD_INT 3
74355: NEG
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: LD_INT 2
74363: PUSH
74364: LD_INT 1
74366: NEG
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 3
74374: PUSH
74375: LD_INT 1
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PUSH
74382: LD_INT 1
74384: PUSH
74385: LD_INT 3
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 1
74394: NEG
74395: PUSH
74396: LD_INT 2
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 3
74405: NEG
74406: PUSH
74407: LD_INT 2
74409: NEG
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74440: LD_ADDR_VAR 0 30
74444: PUSH
74445: LD_INT 0
74447: PUSH
74448: LD_INT 0
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 0
74457: PUSH
74458: LD_INT 1
74460: NEG
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 1
74468: PUSH
74469: LD_INT 0
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 1
74478: PUSH
74479: LD_INT 1
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: LD_INT 0
74488: PUSH
74489: LD_INT 1
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 1
74498: NEG
74499: PUSH
74500: LD_INT 0
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 1
74509: NEG
74510: PUSH
74511: LD_INT 1
74513: NEG
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: PUSH
74519: LD_INT 1
74521: NEG
74522: PUSH
74523: LD_INT 2
74525: NEG
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PUSH
74531: LD_INT 0
74533: PUSH
74534: LD_INT 2
74536: NEG
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: PUSH
74542: LD_INT 1
74544: PUSH
74545: LD_INT 1
74547: NEG
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 2
74555: PUSH
74556: LD_INT 0
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 2
74565: PUSH
74566: LD_INT 1
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 2
74575: PUSH
74576: LD_INT 2
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: LD_INT 1
74585: PUSH
74586: LD_INT 2
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: LD_INT 1
74595: NEG
74596: PUSH
74597: LD_INT 1
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: PUSH
74604: LD_INT 2
74606: NEG
74607: PUSH
74608: LD_INT 0
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: LD_INT 2
74617: NEG
74618: PUSH
74619: LD_INT 1
74621: NEG
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 1
74629: NEG
74630: PUSH
74631: LD_INT 3
74633: NEG
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 1
74641: PUSH
74642: LD_INT 2
74644: NEG
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 3
74652: PUSH
74653: LD_INT 2
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: PUSH
74660: LD_INT 2
74662: PUSH
74663: LD_INT 3
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 2
74672: NEG
74673: PUSH
74674: LD_INT 1
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 3
74683: NEG
74684: PUSH
74685: LD_INT 1
74687: NEG
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74718: LD_ADDR_VAR 0 31
74722: PUSH
74723: LD_INT 0
74725: PUSH
74726: LD_INT 0
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: LD_INT 1
74738: NEG
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 1
74746: PUSH
74747: LD_INT 0
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PUSH
74754: LD_INT 1
74756: PUSH
74757: LD_INT 1
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 0
74766: PUSH
74767: LD_INT 1
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 1
74776: NEG
74777: PUSH
74778: LD_INT 0
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_INT 1
74787: NEG
74788: PUSH
74789: LD_INT 1
74791: NEG
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: PUSH
74797: LD_INT 1
74799: NEG
74800: PUSH
74801: LD_INT 2
74803: NEG
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 1
74811: PUSH
74812: LD_INT 1
74814: NEG
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PUSH
74820: LD_INT 2
74822: PUSH
74823: LD_INT 0
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 2
74832: PUSH
74833: LD_INT 1
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 2
74842: PUSH
74843: LD_INT 2
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 1
74852: PUSH
74853: LD_INT 2
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 0
74862: PUSH
74863: LD_INT 2
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 1
74872: NEG
74873: PUSH
74874: LD_INT 1
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 2
74883: NEG
74884: PUSH
74885: LD_INT 1
74887: NEG
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 2
74895: NEG
74896: PUSH
74897: LD_INT 2
74899: NEG
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 2
74907: NEG
74908: PUSH
74909: LD_INT 3
74911: NEG
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 2
74919: PUSH
74920: LD_INT 1
74922: NEG
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 3
74930: PUSH
74931: LD_INT 1
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: PUSH
74938: LD_INT 1
74940: PUSH
74941: LD_INT 3
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: PUSH
74948: LD_INT 1
74950: NEG
74951: PUSH
74952: LD_INT 2
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 3
74961: NEG
74962: PUSH
74963: LD_INT 2
74965: NEG
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74996: LD_ADDR_VAR 0 32
75000: PUSH
75001: LD_INT 0
75003: PUSH
75004: LD_INT 0
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 0
75013: PUSH
75014: LD_INT 1
75016: NEG
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: PUSH
75022: LD_INT 1
75024: PUSH
75025: LD_INT 0
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: PUSH
75032: LD_INT 1
75034: PUSH
75035: LD_INT 1
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: PUSH
75042: LD_INT 0
75044: PUSH
75045: LD_INT 1
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 1
75054: NEG
75055: PUSH
75056: LD_INT 0
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: LD_INT 1
75065: NEG
75066: PUSH
75067: LD_INT 1
75069: NEG
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: LD_INT 1
75077: NEG
75078: PUSH
75079: LD_INT 2
75081: NEG
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: PUSH
75087: LD_INT 0
75089: PUSH
75090: LD_INT 2
75092: NEG
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 1
75100: PUSH
75101: LD_INT 1
75103: NEG
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 2
75111: PUSH
75112: LD_INT 1
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 2
75121: PUSH
75122: LD_INT 2
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 1
75131: PUSH
75132: LD_INT 2
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PUSH
75139: LD_INT 0
75141: PUSH
75142: LD_INT 2
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: LD_INT 1
75151: NEG
75152: PUSH
75153: LD_INT 1
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 2
75162: NEG
75163: PUSH
75164: LD_INT 0
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 2
75173: NEG
75174: PUSH
75175: LD_INT 1
75177: NEG
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 1
75185: NEG
75186: PUSH
75187: LD_INT 3
75189: NEG
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 1
75197: PUSH
75198: LD_INT 2
75200: NEG
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: PUSH
75206: LD_INT 3
75208: PUSH
75209: LD_INT 2
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_INT 2
75218: PUSH
75219: LD_INT 3
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PUSH
75226: LD_INT 2
75228: NEG
75229: PUSH
75230: LD_INT 1
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: LD_INT 3
75239: NEG
75240: PUSH
75241: LD_INT 1
75243: NEG
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75274: LD_ADDR_VAR 0 33
75278: PUSH
75279: LD_INT 0
75281: PUSH
75282: LD_INT 0
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 0
75291: PUSH
75292: LD_INT 1
75294: NEG
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 1
75302: PUSH
75303: LD_INT 0
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_INT 1
75312: PUSH
75313: LD_INT 1
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 0
75322: PUSH
75323: LD_INT 1
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 1
75332: NEG
75333: PUSH
75334: LD_INT 0
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: PUSH
75341: LD_INT 1
75343: NEG
75344: PUSH
75345: LD_INT 1
75347: NEG
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 1
75355: NEG
75356: PUSH
75357: LD_INT 2
75359: NEG
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: PUSH
75365: LD_INT 1
75367: PUSH
75368: LD_INT 1
75370: NEG
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 2
75378: PUSH
75379: LD_INT 0
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: PUSH
75386: LD_INT 2
75388: PUSH
75389: LD_INT 1
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 1
75398: PUSH
75399: LD_INT 2
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: LD_INT 2
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 1
75418: NEG
75419: PUSH
75420: LD_INT 1
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: LD_INT 2
75429: NEG
75430: PUSH
75431: LD_INT 0
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 2
75440: NEG
75441: PUSH
75442: LD_INT 1
75444: NEG
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 2
75452: NEG
75453: PUSH
75454: LD_INT 2
75456: NEG
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: LD_INT 2
75464: NEG
75465: PUSH
75466: LD_INT 3
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 2
75476: PUSH
75477: LD_INT 1
75479: NEG
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 3
75487: PUSH
75488: LD_INT 1
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 1
75497: PUSH
75498: LD_INT 3
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: LD_INT 1
75507: NEG
75508: PUSH
75509: LD_INT 2
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: PUSH
75516: LD_INT 3
75518: NEG
75519: PUSH
75520: LD_INT 2
75522: NEG
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75553: LD_ADDR_VAR 0 34
75557: PUSH
75558: LD_INT 0
75560: PUSH
75561: LD_INT 0
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PUSH
75568: LD_INT 0
75570: PUSH
75571: LD_INT 1
75573: NEG
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 1
75581: PUSH
75582: LD_INT 0
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: LD_INT 1
75591: PUSH
75592: LD_INT 1
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 0
75601: PUSH
75602: LD_INT 1
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 1
75611: NEG
75612: PUSH
75613: LD_INT 0
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 1
75622: NEG
75623: PUSH
75624: LD_INT 1
75626: NEG
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: LD_INT 1
75634: NEG
75635: PUSH
75636: LD_INT 2
75638: NEG
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: PUSH
75644: LD_INT 0
75646: PUSH
75647: LD_INT 2
75649: NEG
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: PUSH
75655: LD_INT 1
75657: PUSH
75658: LD_INT 1
75660: NEG
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 2
75668: PUSH
75669: LD_INT 1
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: LD_INT 2
75678: PUSH
75679: LD_INT 2
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: PUSH
75686: LD_INT 1
75688: PUSH
75689: LD_INT 2
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: LD_INT 1
75698: NEG
75699: PUSH
75700: LD_INT 1
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: LD_INT 2
75709: NEG
75710: PUSH
75711: LD_INT 0
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 2
75720: NEG
75721: PUSH
75722: LD_INT 1
75724: NEG
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: LD_INT 2
75732: NEG
75733: PUSH
75734: LD_INT 2
75736: NEG
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: PUSH
75742: LD_INT 1
75744: NEG
75745: PUSH
75746: LD_INT 3
75748: NEG
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PUSH
75754: LD_INT 1
75756: PUSH
75757: LD_INT 2
75759: NEG
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 3
75767: PUSH
75768: LD_INT 2
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: PUSH
75775: LD_INT 2
75777: PUSH
75778: LD_INT 3
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 2
75787: NEG
75788: PUSH
75789: LD_INT 1
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 3
75798: NEG
75799: PUSH
75800: LD_INT 1
75802: NEG
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75833: LD_ADDR_VAR 0 35
75837: PUSH
75838: LD_INT 0
75840: PUSH
75841: LD_INT 0
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_INT 1
75853: NEG
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 1
75861: PUSH
75862: LD_INT 0
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 1
75871: PUSH
75872: LD_INT 1
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: LD_INT 1
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: PUSH
75889: LD_INT 1
75891: NEG
75892: PUSH
75893: LD_INT 0
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PUSH
75900: LD_INT 1
75902: NEG
75903: PUSH
75904: LD_INT 1
75906: NEG
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PUSH
75912: LD_INT 2
75914: PUSH
75915: LD_INT 1
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PUSH
75922: LD_INT 2
75924: NEG
75925: PUSH
75926: LD_INT 1
75928: NEG
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: LIST
75944: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75945: LD_ADDR_VAR 0 36
75949: PUSH
75950: LD_INT 0
75952: PUSH
75953: LD_INT 0
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: LD_INT 1
75965: NEG
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 1
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: PUSH
75981: LD_INT 1
75983: PUSH
75984: LD_INT 1
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: PUSH
75991: LD_INT 0
75993: PUSH
75994: LD_INT 1
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PUSH
76001: LD_INT 1
76003: NEG
76004: PUSH
76005: LD_INT 0
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: PUSH
76012: LD_INT 1
76014: NEG
76015: PUSH
76016: LD_INT 1
76018: NEG
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 1
76026: NEG
76027: PUSH
76028: LD_INT 2
76030: NEG
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 1
76038: PUSH
76039: LD_INT 2
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
76057: LD_ADDR_VAR 0 37
76061: PUSH
76062: LD_INT 0
76064: PUSH
76065: LD_INT 0
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: LD_INT 0
76074: PUSH
76075: LD_INT 1
76077: NEG
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 1
76085: PUSH
76086: LD_INT 0
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 1
76095: PUSH
76096: LD_INT 1
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 0
76105: PUSH
76106: LD_INT 1
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PUSH
76113: LD_INT 1
76115: NEG
76116: PUSH
76117: LD_INT 0
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 1
76126: NEG
76127: PUSH
76128: LD_INT 1
76130: NEG
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: LD_INT 1
76138: PUSH
76139: LD_INT 1
76141: NEG
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 1
76149: NEG
76150: PUSH
76151: LD_INT 1
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
76169: LD_ADDR_VAR 0 38
76173: PUSH
76174: LD_INT 0
76176: PUSH
76177: LD_INT 0
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: LD_INT 0
76186: PUSH
76187: LD_INT 1
76189: NEG
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 1
76197: PUSH
76198: LD_INT 0
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 1
76207: PUSH
76208: LD_INT 1
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: LD_INT 0
76217: PUSH
76218: LD_INT 1
76220: PUSH
76221: EMPTY
76222: LIST
76223: LIST
76224: PUSH
76225: LD_INT 1
76227: NEG
76228: PUSH
76229: LD_INT 0
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: PUSH
76236: LD_INT 1
76238: NEG
76239: PUSH
76240: LD_INT 1
76242: NEG
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: PUSH
76248: LD_INT 2
76250: PUSH
76251: LD_INT 1
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: PUSH
76258: LD_INT 2
76260: NEG
76261: PUSH
76262: LD_INT 1
76264: NEG
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
76281: LD_ADDR_VAR 0 39
76285: PUSH
76286: LD_INT 0
76288: PUSH
76289: LD_INT 0
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 0
76298: PUSH
76299: LD_INT 1
76301: NEG
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 1
76309: PUSH
76310: LD_INT 0
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 1
76319: PUSH
76320: LD_INT 1
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: PUSH
76327: LD_INT 0
76329: PUSH
76330: LD_INT 1
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: PUSH
76337: LD_INT 1
76339: NEG
76340: PUSH
76341: LD_INT 0
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PUSH
76348: LD_INT 1
76350: NEG
76351: PUSH
76352: LD_INT 1
76354: NEG
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: LD_INT 1
76362: NEG
76363: PUSH
76364: LD_INT 2
76366: NEG
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PUSH
76372: LD_INT 1
76374: PUSH
76375: LD_INT 2
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
76393: LD_ADDR_VAR 0 40
76397: PUSH
76398: LD_INT 0
76400: PUSH
76401: LD_INT 0
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PUSH
76408: LD_INT 0
76410: PUSH
76411: LD_INT 1
76413: NEG
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: PUSH
76419: LD_INT 1
76421: PUSH
76422: LD_INT 0
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: LD_INT 1
76431: PUSH
76432: LD_INT 1
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: PUSH
76439: LD_INT 0
76441: PUSH
76442: LD_INT 1
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: LD_INT 1
76451: NEG
76452: PUSH
76453: LD_INT 0
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: PUSH
76460: LD_INT 1
76462: NEG
76463: PUSH
76464: LD_INT 1
76466: NEG
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 1
76474: PUSH
76475: LD_INT 1
76477: NEG
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: PUSH
76483: LD_INT 1
76485: NEG
76486: PUSH
76487: LD_INT 1
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: EMPTY
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76505: LD_ADDR_VAR 0 41
76509: PUSH
76510: LD_INT 0
76512: PUSH
76513: LD_INT 0
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 0
76522: PUSH
76523: LD_INT 1
76525: NEG
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 1
76533: PUSH
76534: LD_INT 0
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: PUSH
76541: LD_INT 1
76543: PUSH
76544: LD_INT 1
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PUSH
76551: LD_INT 0
76553: PUSH
76554: LD_INT 1
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PUSH
76561: LD_INT 1
76563: NEG
76564: PUSH
76565: LD_INT 0
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: PUSH
76572: LD_INT 1
76574: NEG
76575: PUSH
76576: LD_INT 1
76578: NEG
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 1
76586: NEG
76587: PUSH
76588: LD_INT 2
76590: NEG
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: PUSH
76596: LD_INT 1
76598: PUSH
76599: LD_INT 1
76601: NEG
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: PUSH
76607: LD_INT 2
76609: PUSH
76610: LD_INT 0
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: LD_INT 2
76619: PUSH
76620: LD_INT 1
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 2
76629: PUSH
76630: LD_INT 2
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: PUSH
76637: LD_INT 1
76639: PUSH
76640: LD_INT 2
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: PUSH
76647: LD_INT 1
76649: NEG
76650: PUSH
76651: LD_INT 1
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: PUSH
76658: LD_INT 2
76660: NEG
76661: PUSH
76662: LD_INT 0
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PUSH
76669: LD_INT 2
76671: NEG
76672: PUSH
76673: LD_INT 1
76675: NEG
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: PUSH
76681: LD_INT 2
76683: NEG
76684: PUSH
76685: LD_INT 2
76687: NEG
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: LD_INT 2
76695: NEG
76696: PUSH
76697: LD_INT 3
76699: NEG
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: PUSH
76705: LD_INT 2
76707: PUSH
76708: LD_INT 1
76710: NEG
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 3
76718: PUSH
76719: LD_INT 0
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: PUSH
76726: LD_INT 3
76728: PUSH
76729: LD_INT 1
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: LD_INT 3
76738: PUSH
76739: LD_INT 2
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 3
76748: PUSH
76749: LD_INT 3
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: PUSH
76756: LD_INT 2
76758: PUSH
76759: LD_INT 3
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PUSH
76766: LD_INT 2
76768: NEG
76769: PUSH
76770: LD_INT 1
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: LD_INT 3
76779: NEG
76780: PUSH
76781: LD_INT 0
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 3
76790: NEG
76791: PUSH
76792: LD_INT 1
76794: NEG
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: LD_INT 3
76802: NEG
76803: PUSH
76804: LD_INT 2
76806: NEG
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: PUSH
76812: LD_INT 3
76814: NEG
76815: PUSH
76816: LD_INT 3
76818: NEG
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76855: LD_ADDR_VAR 0 42
76859: PUSH
76860: LD_INT 0
76862: PUSH
76863: LD_INT 0
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: LD_INT 0
76872: PUSH
76873: LD_INT 1
76875: NEG
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PUSH
76881: LD_INT 1
76883: PUSH
76884: LD_INT 0
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PUSH
76891: LD_INT 1
76893: PUSH
76894: LD_INT 1
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: PUSH
76901: LD_INT 0
76903: PUSH
76904: LD_INT 1
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PUSH
76911: LD_INT 1
76913: NEG
76914: PUSH
76915: LD_INT 0
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PUSH
76922: LD_INT 1
76924: NEG
76925: PUSH
76926: LD_INT 1
76928: NEG
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: PUSH
76934: LD_INT 1
76936: NEG
76937: PUSH
76938: LD_INT 2
76940: NEG
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PUSH
76946: LD_INT 0
76948: PUSH
76949: LD_INT 2
76951: NEG
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_INT 1
76959: PUSH
76960: LD_INT 1
76962: NEG
76963: PUSH
76964: EMPTY
76965: LIST
76966: LIST
76967: PUSH
76968: LD_INT 2
76970: PUSH
76971: LD_INT 1
76973: PUSH
76974: EMPTY
76975: LIST
76976: LIST
76977: PUSH
76978: LD_INT 2
76980: PUSH
76981: LD_INT 2
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: PUSH
76988: LD_INT 1
76990: PUSH
76991: LD_INT 2
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 0
77000: PUSH
77001: LD_INT 2
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PUSH
77008: LD_INT 1
77010: NEG
77011: PUSH
77012: LD_INT 1
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PUSH
77019: LD_INT 2
77021: NEG
77022: PUSH
77023: LD_INT 1
77025: NEG
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: LD_INT 2
77033: NEG
77034: PUSH
77035: LD_INT 2
77037: NEG
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: PUSH
77043: LD_INT 2
77045: NEG
77046: PUSH
77047: LD_INT 3
77049: NEG
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: PUSH
77055: LD_INT 1
77057: NEG
77058: PUSH
77059: LD_INT 3
77061: NEG
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 0
77069: PUSH
77070: LD_INT 3
77072: NEG
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 1
77080: PUSH
77081: LD_INT 2
77083: NEG
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: LD_INT 3
77091: PUSH
77092: LD_INT 2
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: LD_INT 3
77101: PUSH
77102: LD_INT 3
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PUSH
77109: LD_INT 2
77111: PUSH
77112: LD_INT 3
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PUSH
77119: LD_INT 1
77121: PUSH
77122: LD_INT 3
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 0
77131: PUSH
77132: LD_INT 3
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 1
77141: NEG
77142: PUSH
77143: LD_INT 2
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: PUSH
77150: LD_INT 3
77152: NEG
77153: PUSH
77154: LD_INT 2
77156: NEG
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: PUSH
77162: LD_INT 3
77164: NEG
77165: PUSH
77166: LD_INT 3
77168: NEG
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77205: LD_ADDR_VAR 0 43
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: LD_INT 0
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PUSH
77220: LD_INT 0
77222: PUSH
77223: LD_INT 1
77225: NEG
77226: PUSH
77227: EMPTY
77228: LIST
77229: LIST
77230: PUSH
77231: LD_INT 1
77233: PUSH
77234: LD_INT 0
77236: PUSH
77237: EMPTY
77238: LIST
77239: LIST
77240: PUSH
77241: LD_INT 1
77243: PUSH
77244: LD_INT 1
77246: PUSH
77247: EMPTY
77248: LIST
77249: LIST
77250: PUSH
77251: LD_INT 0
77253: PUSH
77254: LD_INT 1
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: LD_INT 1
77263: NEG
77264: PUSH
77265: LD_INT 0
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: LD_INT 1
77274: NEG
77275: PUSH
77276: LD_INT 1
77278: NEG
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 1
77286: NEG
77287: PUSH
77288: LD_INT 2
77290: NEG
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: PUSH
77296: LD_INT 0
77298: PUSH
77299: LD_INT 2
77301: NEG
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 1
77309: PUSH
77310: LD_INT 1
77312: NEG
77313: PUSH
77314: EMPTY
77315: LIST
77316: LIST
77317: PUSH
77318: LD_INT 2
77320: PUSH
77321: LD_INT 0
77323: PUSH
77324: EMPTY
77325: LIST
77326: LIST
77327: PUSH
77328: LD_INT 2
77330: PUSH
77331: LD_INT 1
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PUSH
77338: LD_INT 1
77340: PUSH
77341: LD_INT 2
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: PUSH
77348: LD_INT 0
77350: PUSH
77351: LD_INT 2
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: PUSH
77358: LD_INT 1
77360: NEG
77361: PUSH
77362: LD_INT 1
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: PUSH
77369: LD_INT 2
77371: NEG
77372: PUSH
77373: LD_INT 0
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PUSH
77380: LD_INT 2
77382: NEG
77383: PUSH
77384: LD_INT 1
77386: NEG
77387: PUSH
77388: EMPTY
77389: LIST
77390: LIST
77391: PUSH
77392: LD_INT 1
77394: NEG
77395: PUSH
77396: LD_INT 3
77398: NEG
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: PUSH
77404: LD_INT 0
77406: PUSH
77407: LD_INT 3
77409: NEG
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: PUSH
77415: LD_INT 1
77417: PUSH
77418: LD_INT 2
77420: NEG
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: LD_INT 2
77428: PUSH
77429: LD_INT 1
77431: NEG
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: PUSH
77437: LD_INT 3
77439: PUSH
77440: LD_INT 0
77442: PUSH
77443: EMPTY
77444: LIST
77445: LIST
77446: PUSH
77447: LD_INT 3
77449: PUSH
77450: LD_INT 1
77452: PUSH
77453: EMPTY
77454: LIST
77455: LIST
77456: PUSH
77457: LD_INT 1
77459: PUSH
77460: LD_INT 3
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PUSH
77467: LD_INT 0
77469: PUSH
77470: LD_INT 3
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: PUSH
77477: LD_INT 1
77479: NEG
77480: PUSH
77481: LD_INT 2
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: LD_INT 2
77490: NEG
77491: PUSH
77492: LD_INT 1
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: LD_INT 3
77501: NEG
77502: PUSH
77503: LD_INT 0
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 3
77512: NEG
77513: PUSH
77514: LD_INT 1
77516: NEG
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77553: LD_ADDR_VAR 0 44
77557: PUSH
77558: LD_INT 0
77560: PUSH
77561: LD_INT 0
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: PUSH
77568: LD_INT 0
77570: PUSH
77571: LD_INT 1
77573: NEG
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PUSH
77579: LD_INT 1
77581: PUSH
77582: LD_INT 0
77584: PUSH
77585: EMPTY
77586: LIST
77587: LIST
77588: PUSH
77589: LD_INT 1
77591: PUSH
77592: LD_INT 1
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: PUSH
77599: LD_INT 0
77601: PUSH
77602: LD_INT 1
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: PUSH
77609: LD_INT 1
77611: NEG
77612: PUSH
77613: LD_INT 0
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PUSH
77620: LD_INT 1
77622: NEG
77623: PUSH
77624: LD_INT 1
77626: NEG
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PUSH
77632: LD_INT 1
77634: NEG
77635: PUSH
77636: LD_INT 2
77638: NEG
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: LD_INT 1
77646: PUSH
77647: LD_INT 1
77649: NEG
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PUSH
77655: LD_INT 2
77657: PUSH
77658: LD_INT 0
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 2
77667: PUSH
77668: LD_INT 1
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: PUSH
77675: LD_INT 2
77677: PUSH
77678: LD_INT 2
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: PUSH
77685: LD_INT 1
77687: PUSH
77688: LD_INT 2
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 1
77697: NEG
77698: PUSH
77699: LD_INT 1
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: PUSH
77706: LD_INT 2
77708: NEG
77709: PUSH
77710: LD_INT 0
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: PUSH
77717: LD_INT 2
77719: NEG
77720: PUSH
77721: LD_INT 1
77723: NEG
77724: PUSH
77725: EMPTY
77726: LIST
77727: LIST
77728: PUSH
77729: LD_INT 2
77731: NEG
77732: PUSH
77733: LD_INT 2
77735: NEG
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 2
77743: NEG
77744: PUSH
77745: LD_INT 3
77747: NEG
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: PUSH
77753: LD_INT 2
77755: PUSH
77756: LD_INT 1
77758: NEG
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: PUSH
77764: LD_INT 3
77766: PUSH
77767: LD_INT 0
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 3
77776: PUSH
77777: LD_INT 1
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 3
77786: PUSH
77787: LD_INT 2
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 3
77796: PUSH
77797: LD_INT 3
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 2
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 2
77816: NEG
77817: PUSH
77818: LD_INT 1
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: LD_INT 3
77827: NEG
77828: PUSH
77829: LD_INT 0
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PUSH
77836: LD_INT 3
77838: NEG
77839: PUSH
77840: LD_INT 1
77842: NEG
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PUSH
77848: LD_INT 3
77850: NEG
77851: PUSH
77852: LD_INT 2
77854: NEG
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PUSH
77860: LD_INT 3
77862: NEG
77863: PUSH
77864: LD_INT 3
77866: NEG
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77903: LD_ADDR_VAR 0 45
77907: PUSH
77908: LD_INT 0
77910: PUSH
77911: LD_INT 0
77913: PUSH
77914: EMPTY
77915: LIST
77916: LIST
77917: PUSH
77918: LD_INT 0
77920: PUSH
77921: LD_INT 1
77923: NEG
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: PUSH
77929: LD_INT 1
77931: PUSH
77932: LD_INT 0
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: PUSH
77939: LD_INT 1
77941: PUSH
77942: LD_INT 1
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 0
77951: PUSH
77952: LD_INT 1
77954: PUSH
77955: EMPTY
77956: LIST
77957: LIST
77958: PUSH
77959: LD_INT 1
77961: NEG
77962: PUSH
77963: LD_INT 0
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PUSH
77970: LD_INT 1
77972: NEG
77973: PUSH
77974: LD_INT 1
77976: NEG
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: LD_INT 1
77984: NEG
77985: PUSH
77986: LD_INT 2
77988: NEG
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 0
77996: PUSH
77997: LD_INT 2
77999: NEG
78000: PUSH
78001: EMPTY
78002: LIST
78003: LIST
78004: PUSH
78005: LD_INT 1
78007: PUSH
78008: LD_INT 1
78010: NEG
78011: PUSH
78012: EMPTY
78013: LIST
78014: LIST
78015: PUSH
78016: LD_INT 2
78018: PUSH
78019: LD_INT 1
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: LD_INT 2
78028: PUSH
78029: LD_INT 2
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: PUSH
78036: LD_INT 1
78038: PUSH
78039: LD_INT 2
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PUSH
78046: LD_INT 0
78048: PUSH
78049: LD_INT 2
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: LD_INT 1
78058: NEG
78059: PUSH
78060: LD_INT 1
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: LD_INT 2
78069: NEG
78070: PUSH
78071: LD_INT 1
78073: NEG
78074: PUSH
78075: EMPTY
78076: LIST
78077: LIST
78078: PUSH
78079: LD_INT 2
78081: NEG
78082: PUSH
78083: LD_INT 2
78085: NEG
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: PUSH
78091: LD_INT 2
78093: NEG
78094: PUSH
78095: LD_INT 3
78097: NEG
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: PUSH
78103: LD_INT 1
78105: NEG
78106: PUSH
78107: LD_INT 3
78109: NEG
78110: PUSH
78111: EMPTY
78112: LIST
78113: LIST
78114: PUSH
78115: LD_INT 0
78117: PUSH
78118: LD_INT 3
78120: NEG
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PUSH
78126: LD_INT 1
78128: PUSH
78129: LD_INT 2
78131: NEG
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: LD_INT 3
78139: PUSH
78140: LD_INT 2
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: PUSH
78147: LD_INT 3
78149: PUSH
78150: LD_INT 3
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PUSH
78157: LD_INT 2
78159: PUSH
78160: LD_INT 3
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: PUSH
78167: LD_INT 1
78169: PUSH
78170: LD_INT 3
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: LD_INT 0
78179: PUSH
78180: LD_INT 3
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PUSH
78187: LD_INT 1
78189: NEG
78190: PUSH
78191: LD_INT 2
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: PUSH
78198: LD_INT 3
78200: NEG
78201: PUSH
78202: LD_INT 2
78204: NEG
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: PUSH
78210: LD_INT 3
78212: NEG
78213: PUSH
78214: LD_INT 3
78216: NEG
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: LIST
78238: LIST
78239: LIST
78240: LIST
78241: LIST
78242: LIST
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: LIST
78250: LIST
78251: LIST
78252: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78253: LD_ADDR_VAR 0 46
78257: PUSH
78258: LD_INT 0
78260: PUSH
78261: LD_INT 0
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PUSH
78268: LD_INT 0
78270: PUSH
78271: LD_INT 1
78273: NEG
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: LD_INT 1
78281: PUSH
78282: LD_INT 0
78284: PUSH
78285: EMPTY
78286: LIST
78287: LIST
78288: PUSH
78289: LD_INT 1
78291: PUSH
78292: LD_INT 1
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: PUSH
78299: LD_INT 0
78301: PUSH
78302: LD_INT 1
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: PUSH
78309: LD_INT 1
78311: NEG
78312: PUSH
78313: LD_INT 0
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: LD_INT 1
78322: NEG
78323: PUSH
78324: LD_INT 1
78326: NEG
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 1
78334: NEG
78335: PUSH
78336: LD_INT 2
78338: NEG
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: PUSH
78344: LD_INT 0
78346: PUSH
78347: LD_INT 2
78349: NEG
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PUSH
78355: LD_INT 1
78357: PUSH
78358: LD_INT 1
78360: NEG
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: PUSH
78366: LD_INT 2
78368: PUSH
78369: LD_INT 0
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 2
78378: PUSH
78379: LD_INT 1
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 1
78388: PUSH
78389: LD_INT 2
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: LD_INT 0
78398: PUSH
78399: LD_INT 2
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: LD_INT 1
78408: NEG
78409: PUSH
78410: LD_INT 1
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: PUSH
78417: LD_INT 2
78419: NEG
78420: PUSH
78421: LD_INT 0
78423: PUSH
78424: EMPTY
78425: LIST
78426: LIST
78427: PUSH
78428: LD_INT 2
78430: NEG
78431: PUSH
78432: LD_INT 1
78434: NEG
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PUSH
78440: LD_INT 1
78442: NEG
78443: PUSH
78444: LD_INT 3
78446: NEG
78447: PUSH
78448: EMPTY
78449: LIST
78450: LIST
78451: PUSH
78452: LD_INT 0
78454: PUSH
78455: LD_INT 3
78457: NEG
78458: PUSH
78459: EMPTY
78460: LIST
78461: LIST
78462: PUSH
78463: LD_INT 1
78465: PUSH
78466: LD_INT 2
78468: NEG
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: LD_INT 2
78476: PUSH
78477: LD_INT 1
78479: NEG
78480: PUSH
78481: EMPTY
78482: LIST
78483: LIST
78484: PUSH
78485: LD_INT 3
78487: PUSH
78488: LD_INT 0
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: PUSH
78495: LD_INT 3
78497: PUSH
78498: LD_INT 1
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PUSH
78505: LD_INT 1
78507: PUSH
78508: LD_INT 3
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: PUSH
78515: LD_INT 0
78517: PUSH
78518: LD_INT 3
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: PUSH
78525: LD_INT 1
78527: NEG
78528: PUSH
78529: LD_INT 2
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: LD_INT 2
78538: NEG
78539: PUSH
78540: LD_INT 1
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PUSH
78547: LD_INT 3
78549: NEG
78550: PUSH
78551: LD_INT 0
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PUSH
78558: LD_INT 3
78560: NEG
78561: PUSH
78562: LD_INT 1
78564: NEG
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: EMPTY
78571: LIST
78572: LIST
78573: LIST
78574: LIST
78575: LIST
78576: LIST
78577: LIST
78578: LIST
78579: LIST
78580: LIST
78581: LIST
78582: LIST
78583: LIST
78584: LIST
78585: LIST
78586: LIST
78587: LIST
78588: LIST
78589: LIST
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: LIST
78598: LIST
78599: LIST
78600: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78601: LD_ADDR_VAR 0 47
78605: PUSH
78606: LD_INT 0
78608: PUSH
78609: LD_INT 0
78611: PUSH
78612: EMPTY
78613: LIST
78614: LIST
78615: PUSH
78616: LD_INT 0
78618: PUSH
78619: LD_INT 1
78621: NEG
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: LD_INT 1
78629: PUSH
78630: LD_INT 0
78632: PUSH
78633: EMPTY
78634: LIST
78635: LIST
78636: PUSH
78637: LD_INT 1
78639: PUSH
78640: LD_INT 1
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PUSH
78647: LD_INT 0
78649: PUSH
78650: LD_INT 1
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 1
78659: NEG
78660: PUSH
78661: LD_INT 0
78663: PUSH
78664: EMPTY
78665: LIST
78666: LIST
78667: PUSH
78668: LD_INT 1
78670: NEG
78671: PUSH
78672: LD_INT 1
78674: NEG
78675: PUSH
78676: EMPTY
78677: LIST
78678: LIST
78679: PUSH
78680: LD_INT 1
78682: NEG
78683: PUSH
78684: LD_INT 2
78686: NEG
78687: PUSH
78688: EMPTY
78689: LIST
78690: LIST
78691: PUSH
78692: LD_INT 0
78694: PUSH
78695: LD_INT 2
78697: NEG
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PUSH
78703: LD_INT 1
78705: PUSH
78706: LD_INT 1
78708: NEG
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PUSH
78714: LD_INT 2
78716: NEG
78717: PUSH
78718: LD_INT 1
78720: NEG
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: PUSH
78726: LD_INT 2
78728: NEG
78729: PUSH
78730: LD_INT 2
78732: NEG
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PUSH
78738: EMPTY
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78752: LD_ADDR_VAR 0 48
78756: PUSH
78757: LD_INT 0
78759: PUSH
78760: LD_INT 0
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: PUSH
78767: LD_INT 0
78769: PUSH
78770: LD_INT 1
78772: NEG
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: PUSH
78778: LD_INT 1
78780: PUSH
78781: LD_INT 0
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PUSH
78788: LD_INT 1
78790: PUSH
78791: LD_INT 1
78793: PUSH
78794: EMPTY
78795: LIST
78796: LIST
78797: PUSH
78798: LD_INT 0
78800: PUSH
78801: LD_INT 1
78803: PUSH
78804: EMPTY
78805: LIST
78806: LIST
78807: PUSH
78808: LD_INT 1
78810: NEG
78811: PUSH
78812: LD_INT 0
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 1
78821: NEG
78822: PUSH
78823: LD_INT 1
78825: NEG
78826: PUSH
78827: EMPTY
78828: LIST
78829: LIST
78830: PUSH
78831: LD_INT 1
78833: NEG
78834: PUSH
78835: LD_INT 2
78837: NEG
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PUSH
78843: LD_INT 0
78845: PUSH
78846: LD_INT 2
78848: NEG
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: PUSH
78854: LD_INT 1
78856: PUSH
78857: LD_INT 1
78859: NEG
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: PUSH
78865: LD_INT 2
78867: PUSH
78868: LD_INT 0
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: PUSH
78875: LD_INT 2
78877: PUSH
78878: LD_INT 1
78880: PUSH
78881: EMPTY
78882: LIST
78883: LIST
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: LIST
78893: LIST
78894: LIST
78895: LIST
78896: LIST
78897: LIST
78898: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78899: LD_ADDR_VAR 0 49
78903: PUSH
78904: LD_INT 0
78906: PUSH
78907: LD_INT 0
78909: PUSH
78910: EMPTY
78911: LIST
78912: LIST
78913: PUSH
78914: LD_INT 0
78916: PUSH
78917: LD_INT 1
78919: NEG
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: PUSH
78925: LD_INT 1
78927: PUSH
78928: LD_INT 0
78930: PUSH
78931: EMPTY
78932: LIST
78933: LIST
78934: PUSH
78935: LD_INT 1
78937: PUSH
78938: LD_INT 1
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: PUSH
78945: LD_INT 0
78947: PUSH
78948: LD_INT 1
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: PUSH
78955: LD_INT 1
78957: NEG
78958: PUSH
78959: LD_INT 0
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PUSH
78966: LD_INT 1
78968: NEG
78969: PUSH
78970: LD_INT 1
78972: NEG
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: PUSH
78978: LD_INT 1
78980: PUSH
78981: LD_INT 1
78983: NEG
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 2
78991: PUSH
78992: LD_INT 0
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: LD_INT 2
79001: PUSH
79002: LD_INT 1
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PUSH
79009: LD_INT 2
79011: PUSH
79012: LD_INT 2
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PUSH
79019: LD_INT 1
79021: PUSH
79022: LD_INT 2
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: EMPTY
79030: LIST
79031: LIST
79032: LIST
79033: LIST
79034: LIST
79035: LIST
79036: LIST
79037: LIST
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
79043: LD_ADDR_VAR 0 50
79047: PUSH
79048: LD_INT 0
79050: PUSH
79051: LD_INT 0
79053: PUSH
79054: EMPTY
79055: LIST
79056: LIST
79057: PUSH
79058: LD_INT 0
79060: PUSH
79061: LD_INT 1
79063: NEG
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: PUSH
79069: LD_INT 1
79071: PUSH
79072: LD_INT 0
79074: PUSH
79075: EMPTY
79076: LIST
79077: LIST
79078: PUSH
79079: LD_INT 1
79081: PUSH
79082: LD_INT 1
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: PUSH
79089: LD_INT 0
79091: PUSH
79092: LD_INT 1
79094: PUSH
79095: EMPTY
79096: LIST
79097: LIST
79098: PUSH
79099: LD_INT 1
79101: NEG
79102: PUSH
79103: LD_INT 0
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PUSH
79110: LD_INT 1
79112: NEG
79113: PUSH
79114: LD_INT 1
79116: NEG
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PUSH
79122: LD_INT 2
79124: PUSH
79125: LD_INT 1
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: PUSH
79132: LD_INT 2
79134: PUSH
79135: LD_INT 2
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: PUSH
79142: LD_INT 1
79144: PUSH
79145: LD_INT 2
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 0
79154: PUSH
79155: LD_INT 2
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 1
79164: NEG
79165: PUSH
79166: LD_INT 1
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: LIST
79186: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
79187: LD_ADDR_VAR 0 51
79191: PUSH
79192: LD_INT 0
79194: PUSH
79195: LD_INT 0
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 0
79204: PUSH
79205: LD_INT 1
79207: NEG
79208: PUSH
79209: EMPTY
79210: LIST
79211: LIST
79212: PUSH
79213: LD_INT 1
79215: PUSH
79216: LD_INT 0
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: PUSH
79223: LD_INT 1
79225: PUSH
79226: LD_INT 1
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: PUSH
79233: LD_INT 0
79235: PUSH
79236: LD_INT 1
79238: PUSH
79239: EMPTY
79240: LIST
79241: LIST
79242: PUSH
79243: LD_INT 1
79245: NEG
79246: PUSH
79247: LD_INT 0
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: PUSH
79254: LD_INT 1
79256: NEG
79257: PUSH
79258: LD_INT 1
79260: NEG
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: PUSH
79266: LD_INT 1
79268: PUSH
79269: LD_INT 2
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: PUSH
79276: LD_INT 0
79278: PUSH
79279: LD_INT 2
79281: PUSH
79282: EMPTY
79283: LIST
79284: LIST
79285: PUSH
79286: LD_INT 1
79288: NEG
79289: PUSH
79290: LD_INT 1
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: PUSH
79297: LD_INT 2
79299: NEG
79300: PUSH
79301: LD_INT 0
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: PUSH
79308: LD_INT 2
79310: NEG
79311: PUSH
79312: LD_INT 1
79314: NEG
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: PUSH
79320: EMPTY
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79334: LD_ADDR_VAR 0 52
79338: PUSH
79339: LD_INT 0
79341: PUSH
79342: LD_INT 0
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: PUSH
79349: LD_INT 0
79351: PUSH
79352: LD_INT 1
79354: NEG
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: LD_INT 1
79362: PUSH
79363: LD_INT 0
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: PUSH
79370: LD_INT 1
79372: PUSH
79373: LD_INT 1
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: PUSH
79380: LD_INT 0
79382: PUSH
79383: LD_INT 1
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: PUSH
79390: LD_INT 1
79392: NEG
79393: PUSH
79394: LD_INT 0
79396: PUSH
79397: EMPTY
79398: LIST
79399: LIST
79400: PUSH
79401: LD_INT 1
79403: NEG
79404: PUSH
79405: LD_INT 1
79407: NEG
79408: PUSH
79409: EMPTY
79410: LIST
79411: LIST
79412: PUSH
79413: LD_INT 1
79415: NEG
79416: PUSH
79417: LD_INT 2
79419: NEG
79420: PUSH
79421: EMPTY
79422: LIST
79423: LIST
79424: PUSH
79425: LD_INT 1
79427: NEG
79428: PUSH
79429: LD_INT 1
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: PUSH
79436: LD_INT 2
79438: NEG
79439: PUSH
79440: LD_INT 0
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: PUSH
79447: LD_INT 2
79449: NEG
79450: PUSH
79451: LD_INT 1
79453: NEG
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: PUSH
79459: LD_INT 2
79461: NEG
79462: PUSH
79463: LD_INT 2
79465: NEG
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79485: LD_ADDR_VAR 0 53
79489: PUSH
79490: LD_INT 0
79492: PUSH
79493: LD_INT 0
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 0
79502: PUSH
79503: LD_INT 1
79505: NEG
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: PUSH
79511: LD_INT 1
79513: PUSH
79514: LD_INT 0
79516: PUSH
79517: EMPTY
79518: LIST
79519: LIST
79520: PUSH
79521: LD_INT 1
79523: PUSH
79524: LD_INT 1
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: PUSH
79531: LD_INT 0
79533: PUSH
79534: LD_INT 1
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 1
79543: NEG
79544: PUSH
79545: LD_INT 0
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: PUSH
79552: LD_INT 1
79554: NEG
79555: PUSH
79556: LD_INT 1
79558: NEG
79559: PUSH
79560: EMPTY
79561: LIST
79562: LIST
79563: PUSH
79564: LD_INT 1
79566: NEG
79567: PUSH
79568: LD_INT 2
79570: NEG
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: PUSH
79576: LD_INT 0
79578: PUSH
79579: LD_INT 2
79581: NEG
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 1
79589: PUSH
79590: LD_INT 1
79592: NEG
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: LD_INT 2
79600: PUSH
79601: LD_INT 0
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: PUSH
79608: LD_INT 2
79610: PUSH
79611: LD_INT 1
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: PUSH
79618: LD_INT 2
79620: PUSH
79621: LD_INT 2
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: PUSH
79628: LD_INT 1
79630: PUSH
79631: LD_INT 2
79633: PUSH
79634: EMPTY
79635: LIST
79636: LIST
79637: PUSH
79638: LD_INT 0
79640: PUSH
79641: LD_INT 2
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: PUSH
79648: LD_INT 1
79650: NEG
79651: PUSH
79652: LD_INT 1
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PUSH
79659: LD_INT 2
79661: NEG
79662: PUSH
79663: LD_INT 0
79665: PUSH
79666: EMPTY
79667: LIST
79668: LIST
79669: PUSH
79670: LD_INT 2
79672: NEG
79673: PUSH
79674: LD_INT 1
79676: NEG
79677: PUSH
79678: EMPTY
79679: LIST
79680: LIST
79681: PUSH
79682: LD_INT 2
79684: NEG
79685: PUSH
79686: LD_INT 2
79688: NEG
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79715: LD_ADDR_VAR 0 54
79719: PUSH
79720: LD_INT 0
79722: PUSH
79723: LD_INT 0
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: PUSH
79730: LD_INT 0
79732: PUSH
79733: LD_INT 1
79735: NEG
79736: PUSH
79737: EMPTY
79738: LIST
79739: LIST
79740: PUSH
79741: LD_INT 1
79743: PUSH
79744: LD_INT 0
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: PUSH
79751: LD_INT 1
79753: PUSH
79754: LD_INT 1
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PUSH
79761: LD_INT 0
79763: PUSH
79764: LD_INT 1
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PUSH
79771: LD_INT 1
79773: NEG
79774: PUSH
79775: LD_INT 0
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PUSH
79782: LD_INT 1
79784: NEG
79785: PUSH
79786: LD_INT 1
79788: NEG
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 1
79796: NEG
79797: PUSH
79798: LD_INT 2
79800: NEG
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: LD_INT 0
79808: PUSH
79809: LD_INT 2
79811: NEG
79812: PUSH
79813: EMPTY
79814: LIST
79815: LIST
79816: PUSH
79817: LD_INT 1
79819: PUSH
79820: LD_INT 1
79822: NEG
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: PUSH
79828: LD_INT 2
79830: PUSH
79831: LD_INT 0
79833: PUSH
79834: EMPTY
79835: LIST
79836: LIST
79837: PUSH
79838: LD_INT 2
79840: PUSH
79841: LD_INT 1
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: PUSH
79848: LD_INT 2
79850: PUSH
79851: LD_INT 2
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PUSH
79858: LD_INT 1
79860: PUSH
79861: LD_INT 2
79863: PUSH
79864: EMPTY
79865: LIST
79866: LIST
79867: PUSH
79868: LD_INT 0
79870: PUSH
79871: LD_INT 2
79873: PUSH
79874: EMPTY
79875: LIST
79876: LIST
79877: PUSH
79878: LD_INT 1
79880: NEG
79881: PUSH
79882: LD_INT 1
79884: PUSH
79885: EMPTY
79886: LIST
79887: LIST
79888: PUSH
79889: LD_INT 2
79891: NEG
79892: PUSH
79893: LD_INT 0
79895: PUSH
79896: EMPTY
79897: LIST
79898: LIST
79899: PUSH
79900: LD_INT 2
79902: NEG
79903: PUSH
79904: LD_INT 1
79906: NEG
79907: PUSH
79908: EMPTY
79909: LIST
79910: LIST
79911: PUSH
79912: LD_INT 2
79914: NEG
79915: PUSH
79916: LD_INT 2
79918: NEG
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: LIST
79928: LIST
79929: LIST
79930: LIST
79931: LIST
79932: LIST
79933: LIST
79934: LIST
79935: LIST
79936: LIST
79937: LIST
79938: LIST
79939: LIST
79940: LIST
79941: LIST
79942: LIST
79943: LIST
79944: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79945: LD_ADDR_VAR 0 55
79949: PUSH
79950: LD_INT 0
79952: PUSH
79953: LD_INT 0
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: LD_INT 0
79962: PUSH
79963: LD_INT 1
79965: NEG
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: PUSH
79971: LD_INT 1
79973: PUSH
79974: LD_INT 0
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PUSH
79981: LD_INT 1
79983: PUSH
79984: LD_INT 1
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: PUSH
79991: LD_INT 0
79993: PUSH
79994: LD_INT 1
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PUSH
80001: LD_INT 1
80003: NEG
80004: PUSH
80005: LD_INT 0
80007: PUSH
80008: EMPTY
80009: LIST
80010: LIST
80011: PUSH
80012: LD_INT 1
80014: NEG
80015: PUSH
80016: LD_INT 1
80018: NEG
80019: PUSH
80020: EMPTY
80021: LIST
80022: LIST
80023: PUSH
80024: LD_INT 1
80026: NEG
80027: PUSH
80028: LD_INT 2
80030: NEG
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PUSH
80036: LD_INT 0
80038: PUSH
80039: LD_INT 2
80041: NEG
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 1
80049: PUSH
80050: LD_INT 1
80052: NEG
80053: PUSH
80054: EMPTY
80055: LIST
80056: LIST
80057: PUSH
80058: LD_INT 2
80060: PUSH
80061: LD_INT 0
80063: PUSH
80064: EMPTY
80065: LIST
80066: LIST
80067: PUSH
80068: LD_INT 2
80070: PUSH
80071: LD_INT 1
80073: PUSH
80074: EMPTY
80075: LIST
80076: LIST
80077: PUSH
80078: LD_INT 2
80080: PUSH
80081: LD_INT 2
80083: PUSH
80084: EMPTY
80085: LIST
80086: LIST
80087: PUSH
80088: LD_INT 1
80090: PUSH
80091: LD_INT 2
80093: PUSH
80094: EMPTY
80095: LIST
80096: LIST
80097: PUSH
80098: LD_INT 0
80100: PUSH
80101: LD_INT 2
80103: PUSH
80104: EMPTY
80105: LIST
80106: LIST
80107: PUSH
80108: LD_INT 1
80110: NEG
80111: PUSH
80112: LD_INT 1
80114: PUSH
80115: EMPTY
80116: LIST
80117: LIST
80118: PUSH
80119: LD_INT 2
80121: NEG
80122: PUSH
80123: LD_INT 0
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: PUSH
80130: LD_INT 2
80132: NEG
80133: PUSH
80134: LD_INT 1
80136: NEG
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: LD_INT 2
80144: NEG
80145: PUSH
80146: LD_INT 2
80148: NEG
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: EMPTY
80155: LIST
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80175: LD_ADDR_VAR 0 56
80179: PUSH
80180: LD_INT 0
80182: PUSH
80183: LD_INT 0
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: LD_INT 0
80192: PUSH
80193: LD_INT 1
80195: NEG
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: PUSH
80201: LD_INT 1
80203: PUSH
80204: LD_INT 0
80206: PUSH
80207: EMPTY
80208: LIST
80209: LIST
80210: PUSH
80211: LD_INT 1
80213: PUSH
80214: LD_INT 1
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: PUSH
80221: LD_INT 0
80223: PUSH
80224: LD_INT 1
80226: PUSH
80227: EMPTY
80228: LIST
80229: LIST
80230: PUSH
80231: LD_INT 1
80233: NEG
80234: PUSH
80235: LD_INT 0
80237: PUSH
80238: EMPTY
80239: LIST
80240: LIST
80241: PUSH
80242: LD_INT 1
80244: NEG
80245: PUSH
80246: LD_INT 1
80248: NEG
80249: PUSH
80250: EMPTY
80251: LIST
80252: LIST
80253: PUSH
80254: LD_INT 1
80256: NEG
80257: PUSH
80258: LD_INT 2
80260: NEG
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: PUSH
80266: LD_INT 0
80268: PUSH
80269: LD_INT 2
80271: NEG
80272: PUSH
80273: EMPTY
80274: LIST
80275: LIST
80276: PUSH
80277: LD_INT 1
80279: PUSH
80280: LD_INT 1
80282: NEG
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: PUSH
80288: LD_INT 2
80290: PUSH
80291: LD_INT 0
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PUSH
80298: LD_INT 2
80300: PUSH
80301: LD_INT 1
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 2
80310: PUSH
80311: LD_INT 2
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 1
80320: PUSH
80321: LD_INT 2
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: PUSH
80328: LD_INT 0
80330: PUSH
80331: LD_INT 2
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 1
80340: NEG
80341: PUSH
80342: LD_INT 1
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: PUSH
80349: LD_INT 2
80351: NEG
80352: PUSH
80353: LD_INT 0
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PUSH
80360: LD_INT 2
80362: NEG
80363: PUSH
80364: LD_INT 1
80366: NEG
80367: PUSH
80368: EMPTY
80369: LIST
80370: LIST
80371: PUSH
80372: LD_INT 2
80374: NEG
80375: PUSH
80376: LD_INT 2
80378: NEG
80379: PUSH
80380: EMPTY
80381: LIST
80382: LIST
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: LIST
80388: LIST
80389: LIST
80390: LIST
80391: LIST
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: LIST
80397: LIST
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: LIST
80404: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80405: LD_ADDR_VAR 0 57
80409: PUSH
80410: LD_INT 0
80412: PUSH
80413: LD_INT 0
80415: PUSH
80416: EMPTY
80417: LIST
80418: LIST
80419: PUSH
80420: LD_INT 0
80422: PUSH
80423: LD_INT 1
80425: NEG
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PUSH
80431: LD_INT 1
80433: PUSH
80434: LD_INT 0
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: PUSH
80441: LD_INT 1
80443: PUSH
80444: LD_INT 1
80446: PUSH
80447: EMPTY
80448: LIST
80449: LIST
80450: PUSH
80451: LD_INT 0
80453: PUSH
80454: LD_INT 1
80456: PUSH
80457: EMPTY
80458: LIST
80459: LIST
80460: PUSH
80461: LD_INT 1
80463: NEG
80464: PUSH
80465: LD_INT 0
80467: PUSH
80468: EMPTY
80469: LIST
80470: LIST
80471: PUSH
80472: LD_INT 1
80474: NEG
80475: PUSH
80476: LD_INT 1
80478: NEG
80479: PUSH
80480: EMPTY
80481: LIST
80482: LIST
80483: PUSH
80484: LD_INT 1
80486: NEG
80487: PUSH
80488: LD_INT 2
80490: NEG
80491: PUSH
80492: EMPTY
80493: LIST
80494: LIST
80495: PUSH
80496: LD_INT 0
80498: PUSH
80499: LD_INT 2
80501: NEG
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: PUSH
80507: LD_INT 1
80509: PUSH
80510: LD_INT 1
80512: NEG
80513: PUSH
80514: EMPTY
80515: LIST
80516: LIST
80517: PUSH
80518: LD_INT 2
80520: PUSH
80521: LD_INT 0
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: PUSH
80528: LD_INT 2
80530: PUSH
80531: LD_INT 1
80533: PUSH
80534: EMPTY
80535: LIST
80536: LIST
80537: PUSH
80538: LD_INT 2
80540: PUSH
80541: LD_INT 2
80543: PUSH
80544: EMPTY
80545: LIST
80546: LIST
80547: PUSH
80548: LD_INT 1
80550: PUSH
80551: LD_INT 2
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: PUSH
80558: LD_INT 0
80560: PUSH
80561: LD_INT 2
80563: PUSH
80564: EMPTY
80565: LIST
80566: LIST
80567: PUSH
80568: LD_INT 1
80570: NEG
80571: PUSH
80572: LD_INT 1
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: PUSH
80579: LD_INT 2
80581: NEG
80582: PUSH
80583: LD_INT 0
80585: PUSH
80586: EMPTY
80587: LIST
80588: LIST
80589: PUSH
80590: LD_INT 2
80592: NEG
80593: PUSH
80594: LD_INT 1
80596: NEG
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: PUSH
80602: LD_INT 2
80604: NEG
80605: PUSH
80606: LD_INT 2
80608: NEG
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: LIST
80621: LIST
80622: LIST
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: LIST
80631: LIST
80632: LIST
80633: LIST
80634: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80635: LD_ADDR_VAR 0 58
80639: PUSH
80640: LD_INT 0
80642: PUSH
80643: LD_INT 0
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: LD_INT 0
80652: PUSH
80653: LD_INT 1
80655: NEG
80656: PUSH
80657: EMPTY
80658: LIST
80659: LIST
80660: PUSH
80661: LD_INT 1
80663: PUSH
80664: LD_INT 0
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: PUSH
80671: LD_INT 1
80673: PUSH
80674: LD_INT 1
80676: PUSH
80677: EMPTY
80678: LIST
80679: LIST
80680: PUSH
80681: LD_INT 0
80683: PUSH
80684: LD_INT 1
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: PUSH
80691: LD_INT 1
80693: NEG
80694: PUSH
80695: LD_INT 0
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PUSH
80702: LD_INT 1
80704: NEG
80705: PUSH
80706: LD_INT 1
80708: NEG
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: PUSH
80714: LD_INT 1
80716: NEG
80717: PUSH
80718: LD_INT 2
80720: NEG
80721: PUSH
80722: EMPTY
80723: LIST
80724: LIST
80725: PUSH
80726: LD_INT 0
80728: PUSH
80729: LD_INT 2
80731: NEG
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: PUSH
80737: LD_INT 1
80739: PUSH
80740: LD_INT 1
80742: NEG
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PUSH
80748: LD_INT 2
80750: PUSH
80751: LD_INT 0
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: PUSH
80758: LD_INT 2
80760: PUSH
80761: LD_INT 1
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: PUSH
80768: LD_INT 2
80770: PUSH
80771: LD_INT 2
80773: PUSH
80774: EMPTY
80775: LIST
80776: LIST
80777: PUSH
80778: LD_INT 1
80780: PUSH
80781: LD_INT 2
80783: PUSH
80784: EMPTY
80785: LIST
80786: LIST
80787: PUSH
80788: LD_INT 0
80790: PUSH
80791: LD_INT 2
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: PUSH
80798: LD_INT 1
80800: NEG
80801: PUSH
80802: LD_INT 1
80804: PUSH
80805: EMPTY
80806: LIST
80807: LIST
80808: PUSH
80809: LD_INT 2
80811: NEG
80812: PUSH
80813: LD_INT 0
80815: PUSH
80816: EMPTY
80817: LIST
80818: LIST
80819: PUSH
80820: LD_INT 2
80822: NEG
80823: PUSH
80824: LD_INT 1
80826: NEG
80827: PUSH
80828: EMPTY
80829: LIST
80830: LIST
80831: PUSH
80832: LD_INT 2
80834: NEG
80835: PUSH
80836: LD_INT 2
80838: NEG
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PUSH
80844: EMPTY
80845: LIST
80846: LIST
80847: LIST
80848: LIST
80849: LIST
80850: LIST
80851: LIST
80852: LIST
80853: LIST
80854: LIST
80855: LIST
80856: LIST
80857: LIST
80858: LIST
80859: LIST
80860: LIST
80861: LIST
80862: LIST
80863: LIST
80864: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80865: LD_ADDR_VAR 0 59
80869: PUSH
80870: LD_INT 0
80872: PUSH
80873: LD_INT 0
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: PUSH
80880: LD_INT 0
80882: PUSH
80883: LD_INT 1
80885: NEG
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: PUSH
80891: LD_INT 1
80893: PUSH
80894: LD_INT 0
80896: PUSH
80897: EMPTY
80898: LIST
80899: LIST
80900: PUSH
80901: LD_INT 1
80903: PUSH
80904: LD_INT 1
80906: PUSH
80907: EMPTY
80908: LIST
80909: LIST
80910: PUSH
80911: LD_INT 0
80913: PUSH
80914: LD_INT 1
80916: PUSH
80917: EMPTY
80918: LIST
80919: LIST
80920: PUSH
80921: LD_INT 1
80923: NEG
80924: PUSH
80925: LD_INT 0
80927: PUSH
80928: EMPTY
80929: LIST
80930: LIST
80931: PUSH
80932: LD_INT 1
80934: NEG
80935: PUSH
80936: LD_INT 1
80938: NEG
80939: PUSH
80940: EMPTY
80941: LIST
80942: LIST
80943: PUSH
80944: EMPTY
80945: LIST
80946: LIST
80947: LIST
80948: LIST
80949: LIST
80950: LIST
80951: LIST
80952: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80953: LD_ADDR_VAR 0 60
80957: PUSH
80958: LD_INT 0
80960: PUSH
80961: LD_INT 0
80963: PUSH
80964: EMPTY
80965: LIST
80966: LIST
80967: PUSH
80968: LD_INT 0
80970: PUSH
80971: LD_INT 1
80973: NEG
80974: PUSH
80975: EMPTY
80976: LIST
80977: LIST
80978: PUSH
80979: LD_INT 1
80981: PUSH
80982: LD_INT 0
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: PUSH
80989: LD_INT 1
80991: PUSH
80992: LD_INT 1
80994: PUSH
80995: EMPTY
80996: LIST
80997: LIST
80998: PUSH
80999: LD_INT 0
81001: PUSH
81002: LD_INT 1
81004: PUSH
81005: EMPTY
81006: LIST
81007: LIST
81008: PUSH
81009: LD_INT 1
81011: NEG
81012: PUSH
81013: LD_INT 0
81015: PUSH
81016: EMPTY
81017: LIST
81018: LIST
81019: PUSH
81020: LD_INT 1
81022: NEG
81023: PUSH
81024: LD_INT 1
81026: NEG
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: LIST
81036: LIST
81037: LIST
81038: LIST
81039: LIST
81040: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81041: LD_ADDR_VAR 0 61
81045: PUSH
81046: LD_INT 0
81048: PUSH
81049: LD_INT 0
81051: PUSH
81052: EMPTY
81053: LIST
81054: LIST
81055: PUSH
81056: LD_INT 0
81058: PUSH
81059: LD_INT 1
81061: NEG
81062: PUSH
81063: EMPTY
81064: LIST
81065: LIST
81066: PUSH
81067: LD_INT 1
81069: PUSH
81070: LD_INT 0
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 1
81079: PUSH
81080: LD_INT 1
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PUSH
81087: LD_INT 0
81089: PUSH
81090: LD_INT 1
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PUSH
81097: LD_INT 1
81099: NEG
81100: PUSH
81101: LD_INT 0
81103: PUSH
81104: EMPTY
81105: LIST
81106: LIST
81107: PUSH
81108: LD_INT 1
81110: NEG
81111: PUSH
81112: LD_INT 1
81114: NEG
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: LIST
81128: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81129: LD_ADDR_VAR 0 62
81133: PUSH
81134: LD_INT 0
81136: PUSH
81137: LD_INT 0
81139: PUSH
81140: EMPTY
81141: LIST
81142: LIST
81143: PUSH
81144: LD_INT 0
81146: PUSH
81147: LD_INT 1
81149: NEG
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: PUSH
81155: LD_INT 1
81157: PUSH
81158: LD_INT 0
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PUSH
81165: LD_INT 1
81167: PUSH
81168: LD_INT 1
81170: PUSH
81171: EMPTY
81172: LIST
81173: LIST
81174: PUSH
81175: LD_INT 0
81177: PUSH
81178: LD_INT 1
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: PUSH
81185: LD_INT 1
81187: NEG
81188: PUSH
81189: LD_INT 0
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: PUSH
81196: LD_INT 1
81198: NEG
81199: PUSH
81200: LD_INT 1
81202: NEG
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: PUSH
81208: EMPTY
81209: LIST
81210: LIST
81211: LIST
81212: LIST
81213: LIST
81214: LIST
81215: LIST
81216: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81217: LD_ADDR_VAR 0 63
81221: PUSH
81222: LD_INT 0
81224: PUSH
81225: LD_INT 0
81227: PUSH
81228: EMPTY
81229: LIST
81230: LIST
81231: PUSH
81232: LD_INT 0
81234: PUSH
81235: LD_INT 1
81237: NEG
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: PUSH
81243: LD_INT 1
81245: PUSH
81246: LD_INT 0
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: PUSH
81253: LD_INT 1
81255: PUSH
81256: LD_INT 1
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: PUSH
81263: LD_INT 0
81265: PUSH
81266: LD_INT 1
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: PUSH
81273: LD_INT 1
81275: NEG
81276: PUSH
81277: LD_INT 0
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: PUSH
81284: LD_INT 1
81286: NEG
81287: PUSH
81288: LD_INT 1
81290: NEG
81291: PUSH
81292: EMPTY
81293: LIST
81294: LIST
81295: PUSH
81296: EMPTY
81297: LIST
81298: LIST
81299: LIST
81300: LIST
81301: LIST
81302: LIST
81303: LIST
81304: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81305: LD_ADDR_VAR 0 64
81309: PUSH
81310: LD_INT 0
81312: PUSH
81313: LD_INT 0
81315: PUSH
81316: EMPTY
81317: LIST
81318: LIST
81319: PUSH
81320: LD_INT 0
81322: PUSH
81323: LD_INT 1
81325: NEG
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: PUSH
81331: LD_INT 1
81333: PUSH
81334: LD_INT 0
81336: PUSH
81337: EMPTY
81338: LIST
81339: LIST
81340: PUSH
81341: LD_INT 1
81343: PUSH
81344: LD_INT 1
81346: PUSH
81347: EMPTY
81348: LIST
81349: LIST
81350: PUSH
81351: LD_INT 0
81353: PUSH
81354: LD_INT 1
81356: PUSH
81357: EMPTY
81358: LIST
81359: LIST
81360: PUSH
81361: LD_INT 1
81363: NEG
81364: PUSH
81365: LD_INT 0
81367: PUSH
81368: EMPTY
81369: LIST
81370: LIST
81371: PUSH
81372: LD_INT 1
81374: NEG
81375: PUSH
81376: LD_INT 1
81378: NEG
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: EMPTY
81385: LIST
81386: LIST
81387: LIST
81388: LIST
81389: LIST
81390: LIST
81391: LIST
81392: ST_TO_ADDR
// end ; 1 :
81393: GO 87290
81395: LD_INT 1
81397: DOUBLE
81398: EQUAL
81399: IFTRUE 81403
81401: GO 84026
81403: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81404: LD_ADDR_VAR 0 11
81408: PUSH
81409: LD_INT 1
81411: NEG
81412: PUSH
81413: LD_INT 3
81415: NEG
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: PUSH
81421: LD_INT 0
81423: PUSH
81424: LD_INT 3
81426: NEG
81427: PUSH
81428: EMPTY
81429: LIST
81430: LIST
81431: PUSH
81432: LD_INT 1
81434: PUSH
81435: LD_INT 2
81437: NEG
81438: PUSH
81439: EMPTY
81440: LIST
81441: LIST
81442: PUSH
81443: EMPTY
81444: LIST
81445: LIST
81446: LIST
81447: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81448: LD_ADDR_VAR 0 12
81452: PUSH
81453: LD_INT 2
81455: PUSH
81456: LD_INT 1
81458: NEG
81459: PUSH
81460: EMPTY
81461: LIST
81462: LIST
81463: PUSH
81464: LD_INT 3
81466: PUSH
81467: LD_INT 0
81469: PUSH
81470: EMPTY
81471: LIST
81472: LIST
81473: PUSH
81474: LD_INT 3
81476: PUSH
81477: LD_INT 1
81479: PUSH
81480: EMPTY
81481: LIST
81482: LIST
81483: PUSH
81484: EMPTY
81485: LIST
81486: LIST
81487: LIST
81488: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81489: LD_ADDR_VAR 0 13
81493: PUSH
81494: LD_INT 3
81496: PUSH
81497: LD_INT 2
81499: PUSH
81500: EMPTY
81501: LIST
81502: LIST
81503: PUSH
81504: LD_INT 3
81506: PUSH
81507: LD_INT 3
81509: PUSH
81510: EMPTY
81511: LIST
81512: LIST
81513: PUSH
81514: LD_INT 2
81516: PUSH
81517: LD_INT 3
81519: PUSH
81520: EMPTY
81521: LIST
81522: LIST
81523: PUSH
81524: EMPTY
81525: LIST
81526: LIST
81527: LIST
81528: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81529: LD_ADDR_VAR 0 14
81533: PUSH
81534: LD_INT 1
81536: PUSH
81537: LD_INT 3
81539: PUSH
81540: EMPTY
81541: LIST
81542: LIST
81543: PUSH
81544: LD_INT 0
81546: PUSH
81547: LD_INT 3
81549: PUSH
81550: EMPTY
81551: LIST
81552: LIST
81553: PUSH
81554: LD_INT 1
81556: NEG
81557: PUSH
81558: LD_INT 2
81560: PUSH
81561: EMPTY
81562: LIST
81563: LIST
81564: PUSH
81565: EMPTY
81566: LIST
81567: LIST
81568: LIST
81569: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81570: LD_ADDR_VAR 0 15
81574: PUSH
81575: LD_INT 2
81577: NEG
81578: PUSH
81579: LD_INT 1
81581: PUSH
81582: EMPTY
81583: LIST
81584: LIST
81585: PUSH
81586: LD_INT 3
81588: NEG
81589: PUSH
81590: LD_INT 0
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PUSH
81597: LD_INT 3
81599: NEG
81600: PUSH
81601: LD_INT 1
81603: NEG
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: PUSH
81609: EMPTY
81610: LIST
81611: LIST
81612: LIST
81613: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81614: LD_ADDR_VAR 0 16
81618: PUSH
81619: LD_INT 2
81621: NEG
81622: PUSH
81623: LD_INT 3
81625: NEG
81626: PUSH
81627: EMPTY
81628: LIST
81629: LIST
81630: PUSH
81631: LD_INT 3
81633: NEG
81634: PUSH
81635: LD_INT 2
81637: NEG
81638: PUSH
81639: EMPTY
81640: LIST
81641: LIST
81642: PUSH
81643: LD_INT 3
81645: NEG
81646: PUSH
81647: LD_INT 3
81649: NEG
81650: PUSH
81651: EMPTY
81652: LIST
81653: LIST
81654: PUSH
81655: EMPTY
81656: LIST
81657: LIST
81658: LIST
81659: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81660: LD_ADDR_VAR 0 17
81664: PUSH
81665: LD_INT 1
81667: NEG
81668: PUSH
81669: LD_INT 3
81671: NEG
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: PUSH
81677: LD_INT 0
81679: PUSH
81680: LD_INT 3
81682: NEG
81683: PUSH
81684: EMPTY
81685: LIST
81686: LIST
81687: PUSH
81688: LD_INT 1
81690: PUSH
81691: LD_INT 2
81693: NEG
81694: PUSH
81695: EMPTY
81696: LIST
81697: LIST
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: LIST
81703: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81704: LD_ADDR_VAR 0 18
81708: PUSH
81709: LD_INT 2
81711: PUSH
81712: LD_INT 1
81714: NEG
81715: PUSH
81716: EMPTY
81717: LIST
81718: LIST
81719: PUSH
81720: LD_INT 3
81722: PUSH
81723: LD_INT 0
81725: PUSH
81726: EMPTY
81727: LIST
81728: LIST
81729: PUSH
81730: LD_INT 3
81732: PUSH
81733: LD_INT 1
81735: PUSH
81736: EMPTY
81737: LIST
81738: LIST
81739: PUSH
81740: EMPTY
81741: LIST
81742: LIST
81743: LIST
81744: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81745: LD_ADDR_VAR 0 19
81749: PUSH
81750: LD_INT 3
81752: PUSH
81753: LD_INT 2
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: PUSH
81760: LD_INT 3
81762: PUSH
81763: LD_INT 3
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: PUSH
81770: LD_INT 2
81772: PUSH
81773: LD_INT 3
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: PUSH
81780: EMPTY
81781: LIST
81782: LIST
81783: LIST
81784: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81785: LD_ADDR_VAR 0 20
81789: PUSH
81790: LD_INT 1
81792: PUSH
81793: LD_INT 3
81795: PUSH
81796: EMPTY
81797: LIST
81798: LIST
81799: PUSH
81800: LD_INT 0
81802: PUSH
81803: LD_INT 3
81805: PUSH
81806: EMPTY
81807: LIST
81808: LIST
81809: PUSH
81810: LD_INT 1
81812: NEG
81813: PUSH
81814: LD_INT 2
81816: PUSH
81817: EMPTY
81818: LIST
81819: LIST
81820: PUSH
81821: EMPTY
81822: LIST
81823: LIST
81824: LIST
81825: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81826: LD_ADDR_VAR 0 21
81830: PUSH
81831: LD_INT 2
81833: NEG
81834: PUSH
81835: LD_INT 1
81837: PUSH
81838: EMPTY
81839: LIST
81840: LIST
81841: PUSH
81842: LD_INT 3
81844: NEG
81845: PUSH
81846: LD_INT 0
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: PUSH
81853: LD_INT 3
81855: NEG
81856: PUSH
81857: LD_INT 1
81859: NEG
81860: PUSH
81861: EMPTY
81862: LIST
81863: LIST
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: LIST
81869: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81870: LD_ADDR_VAR 0 22
81874: PUSH
81875: LD_INT 2
81877: NEG
81878: PUSH
81879: LD_INT 3
81881: NEG
81882: PUSH
81883: EMPTY
81884: LIST
81885: LIST
81886: PUSH
81887: LD_INT 3
81889: NEG
81890: PUSH
81891: LD_INT 2
81893: NEG
81894: PUSH
81895: EMPTY
81896: LIST
81897: LIST
81898: PUSH
81899: LD_INT 3
81901: NEG
81902: PUSH
81903: LD_INT 3
81905: NEG
81906: PUSH
81907: EMPTY
81908: LIST
81909: LIST
81910: PUSH
81911: EMPTY
81912: LIST
81913: LIST
81914: LIST
81915: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81916: LD_ADDR_VAR 0 23
81920: PUSH
81921: LD_INT 0
81923: PUSH
81924: LD_INT 3
81926: NEG
81927: PUSH
81928: EMPTY
81929: LIST
81930: LIST
81931: PUSH
81932: LD_INT 1
81934: NEG
81935: PUSH
81936: LD_INT 4
81938: NEG
81939: PUSH
81940: EMPTY
81941: LIST
81942: LIST
81943: PUSH
81944: LD_INT 1
81946: PUSH
81947: LD_INT 3
81949: NEG
81950: PUSH
81951: EMPTY
81952: LIST
81953: LIST
81954: PUSH
81955: EMPTY
81956: LIST
81957: LIST
81958: LIST
81959: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81960: LD_ADDR_VAR 0 24
81964: PUSH
81965: LD_INT 3
81967: PUSH
81968: LD_INT 0
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: PUSH
81975: LD_INT 3
81977: PUSH
81978: LD_INT 1
81980: NEG
81981: PUSH
81982: EMPTY
81983: LIST
81984: LIST
81985: PUSH
81986: LD_INT 4
81988: PUSH
81989: LD_INT 1
81991: PUSH
81992: EMPTY
81993: LIST
81994: LIST
81995: PUSH
81996: EMPTY
81997: LIST
81998: LIST
81999: LIST
82000: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
82001: LD_ADDR_VAR 0 25
82005: PUSH
82006: LD_INT 3
82008: PUSH
82009: LD_INT 3
82011: PUSH
82012: EMPTY
82013: LIST
82014: LIST
82015: PUSH
82016: LD_INT 4
82018: PUSH
82019: LD_INT 3
82021: PUSH
82022: EMPTY
82023: LIST
82024: LIST
82025: PUSH
82026: LD_INT 3
82028: PUSH
82029: LD_INT 4
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: PUSH
82036: EMPTY
82037: LIST
82038: LIST
82039: LIST
82040: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
82041: LD_ADDR_VAR 0 26
82045: PUSH
82046: LD_INT 0
82048: PUSH
82049: LD_INT 3
82051: PUSH
82052: EMPTY
82053: LIST
82054: LIST
82055: PUSH
82056: LD_INT 1
82058: PUSH
82059: LD_INT 4
82061: PUSH
82062: EMPTY
82063: LIST
82064: LIST
82065: PUSH
82066: LD_INT 1
82068: NEG
82069: PUSH
82070: LD_INT 3
82072: PUSH
82073: EMPTY
82074: LIST
82075: LIST
82076: PUSH
82077: EMPTY
82078: LIST
82079: LIST
82080: LIST
82081: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
82082: LD_ADDR_VAR 0 27
82086: PUSH
82087: LD_INT 3
82089: NEG
82090: PUSH
82091: LD_INT 0
82093: PUSH
82094: EMPTY
82095: LIST
82096: LIST
82097: PUSH
82098: LD_INT 3
82100: NEG
82101: PUSH
82102: LD_INT 1
82104: PUSH
82105: EMPTY
82106: LIST
82107: LIST
82108: PUSH
82109: LD_INT 4
82111: NEG
82112: PUSH
82113: LD_INT 1
82115: NEG
82116: PUSH
82117: EMPTY
82118: LIST
82119: LIST
82120: PUSH
82121: EMPTY
82122: LIST
82123: LIST
82124: LIST
82125: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
82126: LD_ADDR_VAR 0 28
82130: PUSH
82131: LD_INT 3
82133: NEG
82134: PUSH
82135: LD_INT 3
82137: NEG
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: PUSH
82143: LD_INT 3
82145: NEG
82146: PUSH
82147: LD_INT 4
82149: NEG
82150: PUSH
82151: EMPTY
82152: LIST
82153: LIST
82154: PUSH
82155: LD_INT 4
82157: NEG
82158: PUSH
82159: LD_INT 3
82161: NEG
82162: PUSH
82163: EMPTY
82164: LIST
82165: LIST
82166: PUSH
82167: EMPTY
82168: LIST
82169: LIST
82170: LIST
82171: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
82172: LD_ADDR_VAR 0 29
82176: PUSH
82177: LD_INT 1
82179: NEG
82180: PUSH
82181: LD_INT 3
82183: NEG
82184: PUSH
82185: EMPTY
82186: LIST
82187: LIST
82188: PUSH
82189: LD_INT 0
82191: PUSH
82192: LD_INT 3
82194: NEG
82195: PUSH
82196: EMPTY
82197: LIST
82198: LIST
82199: PUSH
82200: LD_INT 1
82202: PUSH
82203: LD_INT 2
82205: NEG
82206: PUSH
82207: EMPTY
82208: LIST
82209: LIST
82210: PUSH
82211: LD_INT 1
82213: NEG
82214: PUSH
82215: LD_INT 4
82217: NEG
82218: PUSH
82219: EMPTY
82220: LIST
82221: LIST
82222: PUSH
82223: LD_INT 0
82225: PUSH
82226: LD_INT 4
82228: NEG
82229: PUSH
82230: EMPTY
82231: LIST
82232: LIST
82233: PUSH
82234: LD_INT 1
82236: PUSH
82237: LD_INT 3
82239: NEG
82240: PUSH
82241: EMPTY
82242: LIST
82243: LIST
82244: PUSH
82245: LD_INT 1
82247: NEG
82248: PUSH
82249: LD_INT 5
82251: NEG
82252: PUSH
82253: EMPTY
82254: LIST
82255: LIST
82256: PUSH
82257: LD_INT 0
82259: PUSH
82260: LD_INT 5
82262: NEG
82263: PUSH
82264: EMPTY
82265: LIST
82266: LIST
82267: PUSH
82268: LD_INT 1
82270: PUSH
82271: LD_INT 4
82273: NEG
82274: PUSH
82275: EMPTY
82276: LIST
82277: LIST
82278: PUSH
82279: LD_INT 1
82281: NEG
82282: PUSH
82283: LD_INT 6
82285: NEG
82286: PUSH
82287: EMPTY
82288: LIST
82289: LIST
82290: PUSH
82291: LD_INT 0
82293: PUSH
82294: LD_INT 6
82296: NEG
82297: PUSH
82298: EMPTY
82299: LIST
82300: LIST
82301: PUSH
82302: LD_INT 1
82304: PUSH
82305: LD_INT 5
82307: NEG
82308: PUSH
82309: EMPTY
82310: LIST
82311: LIST
82312: PUSH
82313: EMPTY
82314: LIST
82315: LIST
82316: LIST
82317: LIST
82318: LIST
82319: LIST
82320: LIST
82321: LIST
82322: LIST
82323: LIST
82324: LIST
82325: LIST
82326: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
82327: LD_ADDR_VAR 0 30
82331: PUSH
82332: LD_INT 2
82334: PUSH
82335: LD_INT 1
82337: NEG
82338: PUSH
82339: EMPTY
82340: LIST
82341: LIST
82342: PUSH
82343: LD_INT 3
82345: PUSH
82346: LD_INT 0
82348: PUSH
82349: EMPTY
82350: LIST
82351: LIST
82352: PUSH
82353: LD_INT 3
82355: PUSH
82356: LD_INT 1
82358: PUSH
82359: EMPTY
82360: LIST
82361: LIST
82362: PUSH
82363: LD_INT 3
82365: PUSH
82366: LD_INT 1
82368: NEG
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: PUSH
82374: LD_INT 4
82376: PUSH
82377: LD_INT 0
82379: PUSH
82380: EMPTY
82381: LIST
82382: LIST
82383: PUSH
82384: LD_INT 4
82386: PUSH
82387: LD_INT 1
82389: PUSH
82390: EMPTY
82391: LIST
82392: LIST
82393: PUSH
82394: LD_INT 4
82396: PUSH
82397: LD_INT 1
82399: NEG
82400: PUSH
82401: EMPTY
82402: LIST
82403: LIST
82404: PUSH
82405: LD_INT 5
82407: PUSH
82408: LD_INT 0
82410: PUSH
82411: EMPTY
82412: LIST
82413: LIST
82414: PUSH
82415: LD_INT 5
82417: PUSH
82418: LD_INT 1
82420: PUSH
82421: EMPTY
82422: LIST
82423: LIST
82424: PUSH
82425: LD_INT 5
82427: PUSH
82428: LD_INT 1
82430: NEG
82431: PUSH
82432: EMPTY
82433: LIST
82434: LIST
82435: PUSH
82436: LD_INT 6
82438: PUSH
82439: LD_INT 0
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: PUSH
82446: LD_INT 6
82448: PUSH
82449: LD_INT 1
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: LIST
82460: LIST
82461: LIST
82462: LIST
82463: LIST
82464: LIST
82465: LIST
82466: LIST
82467: LIST
82468: LIST
82469: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
82470: LD_ADDR_VAR 0 31
82474: PUSH
82475: LD_INT 3
82477: PUSH
82478: LD_INT 2
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: PUSH
82485: LD_INT 3
82487: PUSH
82488: LD_INT 3
82490: PUSH
82491: EMPTY
82492: LIST
82493: LIST
82494: PUSH
82495: LD_INT 2
82497: PUSH
82498: LD_INT 3
82500: PUSH
82501: EMPTY
82502: LIST
82503: LIST
82504: PUSH
82505: LD_INT 4
82507: PUSH
82508: LD_INT 3
82510: PUSH
82511: EMPTY
82512: LIST
82513: LIST
82514: PUSH
82515: LD_INT 4
82517: PUSH
82518: LD_INT 4
82520: PUSH
82521: EMPTY
82522: LIST
82523: LIST
82524: PUSH
82525: LD_INT 3
82527: PUSH
82528: LD_INT 4
82530: PUSH
82531: EMPTY
82532: LIST
82533: LIST
82534: PUSH
82535: LD_INT 5
82537: PUSH
82538: LD_INT 4
82540: PUSH
82541: EMPTY
82542: LIST
82543: LIST
82544: PUSH
82545: LD_INT 5
82547: PUSH
82548: LD_INT 5
82550: PUSH
82551: EMPTY
82552: LIST
82553: LIST
82554: PUSH
82555: LD_INT 4
82557: PUSH
82558: LD_INT 5
82560: PUSH
82561: EMPTY
82562: LIST
82563: LIST
82564: PUSH
82565: LD_INT 6
82567: PUSH
82568: LD_INT 5
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: PUSH
82575: LD_INT 6
82577: PUSH
82578: LD_INT 6
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 5
82587: PUSH
82588: LD_INT 6
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: PUSH
82595: EMPTY
82596: LIST
82597: LIST
82598: LIST
82599: LIST
82600: LIST
82601: LIST
82602: LIST
82603: LIST
82604: LIST
82605: LIST
82606: LIST
82607: LIST
82608: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
82609: LD_ADDR_VAR 0 32
82613: PUSH
82614: LD_INT 1
82616: PUSH
82617: LD_INT 3
82619: PUSH
82620: EMPTY
82621: LIST
82622: LIST
82623: PUSH
82624: LD_INT 0
82626: PUSH
82627: LD_INT 3
82629: PUSH
82630: EMPTY
82631: LIST
82632: LIST
82633: PUSH
82634: LD_INT 1
82636: NEG
82637: PUSH
82638: LD_INT 2
82640: PUSH
82641: EMPTY
82642: LIST
82643: LIST
82644: PUSH
82645: LD_INT 1
82647: PUSH
82648: LD_INT 4
82650: PUSH
82651: EMPTY
82652: LIST
82653: LIST
82654: PUSH
82655: LD_INT 0
82657: PUSH
82658: LD_INT 4
82660: PUSH
82661: EMPTY
82662: LIST
82663: LIST
82664: PUSH
82665: LD_INT 1
82667: NEG
82668: PUSH
82669: LD_INT 3
82671: PUSH
82672: EMPTY
82673: LIST
82674: LIST
82675: PUSH
82676: LD_INT 1
82678: PUSH
82679: LD_INT 5
82681: PUSH
82682: EMPTY
82683: LIST
82684: LIST
82685: PUSH
82686: LD_INT 0
82688: PUSH
82689: LD_INT 5
82691: PUSH
82692: EMPTY
82693: LIST
82694: LIST
82695: PUSH
82696: LD_INT 1
82698: NEG
82699: PUSH
82700: LD_INT 4
82702: PUSH
82703: EMPTY
82704: LIST
82705: LIST
82706: PUSH
82707: LD_INT 1
82709: PUSH
82710: LD_INT 6
82712: PUSH
82713: EMPTY
82714: LIST
82715: LIST
82716: PUSH
82717: LD_INT 0
82719: PUSH
82720: LD_INT 6
82722: PUSH
82723: EMPTY
82724: LIST
82725: LIST
82726: PUSH
82727: LD_INT 1
82729: NEG
82730: PUSH
82731: LD_INT 5
82733: PUSH
82734: EMPTY
82735: LIST
82736: LIST
82737: PUSH
82738: EMPTY
82739: LIST
82740: LIST
82741: LIST
82742: LIST
82743: LIST
82744: LIST
82745: LIST
82746: LIST
82747: LIST
82748: LIST
82749: LIST
82750: LIST
82751: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
82752: LD_ADDR_VAR 0 33
82756: PUSH
82757: LD_INT 2
82759: NEG
82760: PUSH
82761: LD_INT 1
82763: PUSH
82764: EMPTY
82765: LIST
82766: LIST
82767: PUSH
82768: LD_INT 3
82770: NEG
82771: PUSH
82772: LD_INT 0
82774: PUSH
82775: EMPTY
82776: LIST
82777: LIST
82778: PUSH
82779: LD_INT 3
82781: NEG
82782: PUSH
82783: LD_INT 1
82785: NEG
82786: PUSH
82787: EMPTY
82788: LIST
82789: LIST
82790: PUSH
82791: LD_INT 3
82793: NEG
82794: PUSH
82795: LD_INT 1
82797: PUSH
82798: EMPTY
82799: LIST
82800: LIST
82801: PUSH
82802: LD_INT 4
82804: NEG
82805: PUSH
82806: LD_INT 0
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: PUSH
82813: LD_INT 4
82815: NEG
82816: PUSH
82817: LD_INT 1
82819: NEG
82820: PUSH
82821: EMPTY
82822: LIST
82823: LIST
82824: PUSH
82825: LD_INT 4
82827: NEG
82828: PUSH
82829: LD_INT 1
82831: PUSH
82832: EMPTY
82833: LIST
82834: LIST
82835: PUSH
82836: LD_INT 5
82838: NEG
82839: PUSH
82840: LD_INT 0
82842: PUSH
82843: EMPTY
82844: LIST
82845: LIST
82846: PUSH
82847: LD_INT 5
82849: NEG
82850: PUSH
82851: LD_INT 1
82853: NEG
82854: PUSH
82855: EMPTY
82856: LIST
82857: LIST
82858: PUSH
82859: LD_INT 5
82861: NEG
82862: PUSH
82863: LD_INT 1
82865: PUSH
82866: EMPTY
82867: LIST
82868: LIST
82869: PUSH
82870: LD_INT 6
82872: NEG
82873: PUSH
82874: LD_INT 0
82876: PUSH
82877: EMPTY
82878: LIST
82879: LIST
82880: PUSH
82881: LD_INT 6
82883: NEG
82884: PUSH
82885: LD_INT 1
82887: NEG
82888: PUSH
82889: EMPTY
82890: LIST
82891: LIST
82892: PUSH
82893: EMPTY
82894: LIST
82895: LIST
82896: LIST
82897: LIST
82898: LIST
82899: LIST
82900: LIST
82901: LIST
82902: LIST
82903: LIST
82904: LIST
82905: LIST
82906: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82907: LD_ADDR_VAR 0 34
82911: PUSH
82912: LD_INT 2
82914: NEG
82915: PUSH
82916: LD_INT 3
82918: NEG
82919: PUSH
82920: EMPTY
82921: LIST
82922: LIST
82923: PUSH
82924: LD_INT 3
82926: NEG
82927: PUSH
82928: LD_INT 2
82930: NEG
82931: PUSH
82932: EMPTY
82933: LIST
82934: LIST
82935: PUSH
82936: LD_INT 3
82938: NEG
82939: PUSH
82940: LD_INT 3
82942: NEG
82943: PUSH
82944: EMPTY
82945: LIST
82946: LIST
82947: PUSH
82948: LD_INT 3
82950: NEG
82951: PUSH
82952: LD_INT 4
82954: NEG
82955: PUSH
82956: EMPTY
82957: LIST
82958: LIST
82959: PUSH
82960: LD_INT 4
82962: NEG
82963: PUSH
82964: LD_INT 3
82966: NEG
82967: PUSH
82968: EMPTY
82969: LIST
82970: LIST
82971: PUSH
82972: LD_INT 4
82974: NEG
82975: PUSH
82976: LD_INT 4
82978: NEG
82979: PUSH
82980: EMPTY
82981: LIST
82982: LIST
82983: PUSH
82984: LD_INT 4
82986: NEG
82987: PUSH
82988: LD_INT 5
82990: NEG
82991: PUSH
82992: EMPTY
82993: LIST
82994: LIST
82995: PUSH
82996: LD_INT 5
82998: NEG
82999: PUSH
83000: LD_INT 4
83002: NEG
83003: PUSH
83004: EMPTY
83005: LIST
83006: LIST
83007: PUSH
83008: LD_INT 5
83010: NEG
83011: PUSH
83012: LD_INT 5
83014: NEG
83015: PUSH
83016: EMPTY
83017: LIST
83018: LIST
83019: PUSH
83020: LD_INT 5
83022: NEG
83023: PUSH
83024: LD_INT 6
83026: NEG
83027: PUSH
83028: EMPTY
83029: LIST
83030: LIST
83031: PUSH
83032: LD_INT 6
83034: NEG
83035: PUSH
83036: LD_INT 5
83038: NEG
83039: PUSH
83040: EMPTY
83041: LIST
83042: LIST
83043: PUSH
83044: LD_INT 6
83046: NEG
83047: PUSH
83048: LD_INT 6
83050: NEG
83051: PUSH
83052: EMPTY
83053: LIST
83054: LIST
83055: PUSH
83056: EMPTY
83057: LIST
83058: LIST
83059: LIST
83060: LIST
83061: LIST
83062: LIST
83063: LIST
83064: LIST
83065: LIST
83066: LIST
83067: LIST
83068: LIST
83069: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
83070: LD_ADDR_VAR 0 41
83074: PUSH
83075: LD_INT 0
83077: PUSH
83078: LD_INT 2
83080: NEG
83081: PUSH
83082: EMPTY
83083: LIST
83084: LIST
83085: PUSH
83086: LD_INT 1
83088: NEG
83089: PUSH
83090: LD_INT 3
83092: NEG
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: PUSH
83098: LD_INT 1
83100: PUSH
83101: LD_INT 2
83103: NEG
83104: PUSH
83105: EMPTY
83106: LIST
83107: LIST
83108: PUSH
83109: EMPTY
83110: LIST
83111: LIST
83112: LIST
83113: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
83114: LD_ADDR_VAR 0 42
83118: PUSH
83119: LD_INT 2
83121: PUSH
83122: LD_INT 0
83124: PUSH
83125: EMPTY
83126: LIST
83127: LIST
83128: PUSH
83129: LD_INT 2
83131: PUSH
83132: LD_INT 1
83134: NEG
83135: PUSH
83136: EMPTY
83137: LIST
83138: LIST
83139: PUSH
83140: LD_INT 3
83142: PUSH
83143: LD_INT 1
83145: PUSH
83146: EMPTY
83147: LIST
83148: LIST
83149: PUSH
83150: EMPTY
83151: LIST
83152: LIST
83153: LIST
83154: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
83155: LD_ADDR_VAR 0 43
83159: PUSH
83160: LD_INT 2
83162: PUSH
83163: LD_INT 2
83165: PUSH
83166: EMPTY
83167: LIST
83168: LIST
83169: PUSH
83170: LD_INT 3
83172: PUSH
83173: LD_INT 2
83175: PUSH
83176: EMPTY
83177: LIST
83178: LIST
83179: PUSH
83180: LD_INT 2
83182: PUSH
83183: LD_INT 3
83185: PUSH
83186: EMPTY
83187: LIST
83188: LIST
83189: PUSH
83190: EMPTY
83191: LIST
83192: LIST
83193: LIST
83194: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
83195: LD_ADDR_VAR 0 44
83199: PUSH
83200: LD_INT 0
83202: PUSH
83203: LD_INT 2
83205: PUSH
83206: EMPTY
83207: LIST
83208: LIST
83209: PUSH
83210: LD_INT 1
83212: PUSH
83213: LD_INT 3
83215: PUSH
83216: EMPTY
83217: LIST
83218: LIST
83219: PUSH
83220: LD_INT 1
83222: NEG
83223: PUSH
83224: LD_INT 2
83226: PUSH
83227: EMPTY
83228: LIST
83229: LIST
83230: PUSH
83231: EMPTY
83232: LIST
83233: LIST
83234: LIST
83235: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
83236: LD_ADDR_VAR 0 45
83240: PUSH
83241: LD_INT 2
83243: NEG
83244: PUSH
83245: LD_INT 0
83247: PUSH
83248: EMPTY
83249: LIST
83250: LIST
83251: PUSH
83252: LD_INT 2
83254: NEG
83255: PUSH
83256: LD_INT 1
83258: PUSH
83259: EMPTY
83260: LIST
83261: LIST
83262: PUSH
83263: LD_INT 3
83265: NEG
83266: PUSH
83267: LD_INT 1
83269: NEG
83270: PUSH
83271: EMPTY
83272: LIST
83273: LIST
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: LIST
83279: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
83280: LD_ADDR_VAR 0 46
83284: PUSH
83285: LD_INT 2
83287: NEG
83288: PUSH
83289: LD_INT 2
83291: NEG
83292: PUSH
83293: EMPTY
83294: LIST
83295: LIST
83296: PUSH
83297: LD_INT 2
83299: NEG
83300: PUSH
83301: LD_INT 3
83303: NEG
83304: PUSH
83305: EMPTY
83306: LIST
83307: LIST
83308: PUSH
83309: LD_INT 3
83311: NEG
83312: PUSH
83313: LD_INT 2
83315: NEG
83316: PUSH
83317: EMPTY
83318: LIST
83319: LIST
83320: PUSH
83321: EMPTY
83322: LIST
83323: LIST
83324: LIST
83325: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
83326: LD_ADDR_VAR 0 47
83330: PUSH
83331: LD_INT 2
83333: NEG
83334: PUSH
83335: LD_INT 3
83337: NEG
83338: PUSH
83339: EMPTY
83340: LIST
83341: LIST
83342: PUSH
83343: LD_INT 1
83345: NEG
83346: PUSH
83347: LD_INT 3
83349: NEG
83350: PUSH
83351: EMPTY
83352: LIST
83353: LIST
83354: PUSH
83355: EMPTY
83356: LIST
83357: LIST
83358: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
83359: LD_ADDR_VAR 0 48
83363: PUSH
83364: LD_INT 1
83366: PUSH
83367: LD_INT 2
83369: NEG
83370: PUSH
83371: EMPTY
83372: LIST
83373: LIST
83374: PUSH
83375: LD_INT 2
83377: PUSH
83378: LD_INT 1
83380: NEG
83381: PUSH
83382: EMPTY
83383: LIST
83384: LIST
83385: PUSH
83386: EMPTY
83387: LIST
83388: LIST
83389: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
83390: LD_ADDR_VAR 0 49
83394: PUSH
83395: LD_INT 3
83397: PUSH
83398: LD_INT 1
83400: PUSH
83401: EMPTY
83402: LIST
83403: LIST
83404: PUSH
83405: LD_INT 3
83407: PUSH
83408: LD_INT 2
83410: PUSH
83411: EMPTY
83412: LIST
83413: LIST
83414: PUSH
83415: EMPTY
83416: LIST
83417: LIST
83418: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
83419: LD_ADDR_VAR 0 50
83423: PUSH
83424: LD_INT 2
83426: PUSH
83427: LD_INT 3
83429: PUSH
83430: EMPTY
83431: LIST
83432: LIST
83433: PUSH
83434: LD_INT 1
83436: PUSH
83437: LD_INT 3
83439: PUSH
83440: EMPTY
83441: LIST
83442: LIST
83443: PUSH
83444: EMPTY
83445: LIST
83446: LIST
83447: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
83448: LD_ADDR_VAR 0 51
83452: PUSH
83453: LD_INT 1
83455: NEG
83456: PUSH
83457: LD_INT 2
83459: PUSH
83460: EMPTY
83461: LIST
83462: LIST
83463: PUSH
83464: LD_INT 2
83466: NEG
83467: PUSH
83468: LD_INT 1
83470: PUSH
83471: EMPTY
83472: LIST
83473: LIST
83474: PUSH
83475: EMPTY
83476: LIST
83477: LIST
83478: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
83479: LD_ADDR_VAR 0 52
83483: PUSH
83484: LD_INT 3
83486: NEG
83487: PUSH
83488: LD_INT 1
83490: NEG
83491: PUSH
83492: EMPTY
83493: LIST
83494: LIST
83495: PUSH
83496: LD_INT 3
83498: NEG
83499: PUSH
83500: LD_INT 2
83502: NEG
83503: PUSH
83504: EMPTY
83505: LIST
83506: LIST
83507: PUSH
83508: EMPTY
83509: LIST
83510: LIST
83511: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83512: LD_ADDR_VAR 0 53
83516: PUSH
83517: LD_INT 1
83519: NEG
83520: PUSH
83521: LD_INT 3
83523: NEG
83524: PUSH
83525: EMPTY
83526: LIST
83527: LIST
83528: PUSH
83529: LD_INT 0
83531: PUSH
83532: LD_INT 3
83534: NEG
83535: PUSH
83536: EMPTY
83537: LIST
83538: LIST
83539: PUSH
83540: LD_INT 1
83542: PUSH
83543: LD_INT 2
83545: NEG
83546: PUSH
83547: EMPTY
83548: LIST
83549: LIST
83550: PUSH
83551: EMPTY
83552: LIST
83553: LIST
83554: LIST
83555: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
83556: LD_ADDR_VAR 0 54
83560: PUSH
83561: LD_INT 2
83563: PUSH
83564: LD_INT 1
83566: NEG
83567: PUSH
83568: EMPTY
83569: LIST
83570: LIST
83571: PUSH
83572: LD_INT 3
83574: PUSH
83575: LD_INT 0
83577: PUSH
83578: EMPTY
83579: LIST
83580: LIST
83581: PUSH
83582: LD_INT 3
83584: PUSH
83585: LD_INT 1
83587: PUSH
83588: EMPTY
83589: LIST
83590: LIST
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: LIST
83596: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
83597: LD_ADDR_VAR 0 55
83601: PUSH
83602: LD_INT 3
83604: PUSH
83605: LD_INT 2
83607: PUSH
83608: EMPTY
83609: LIST
83610: LIST
83611: PUSH
83612: LD_INT 3
83614: PUSH
83615: LD_INT 3
83617: PUSH
83618: EMPTY
83619: LIST
83620: LIST
83621: PUSH
83622: LD_INT 2
83624: PUSH
83625: LD_INT 3
83627: PUSH
83628: EMPTY
83629: LIST
83630: LIST
83631: PUSH
83632: EMPTY
83633: LIST
83634: LIST
83635: LIST
83636: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83637: LD_ADDR_VAR 0 56
83641: PUSH
83642: LD_INT 1
83644: PUSH
83645: LD_INT 3
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: PUSH
83652: LD_INT 0
83654: PUSH
83655: LD_INT 3
83657: PUSH
83658: EMPTY
83659: LIST
83660: LIST
83661: PUSH
83662: LD_INT 1
83664: NEG
83665: PUSH
83666: LD_INT 2
83668: PUSH
83669: EMPTY
83670: LIST
83671: LIST
83672: PUSH
83673: EMPTY
83674: LIST
83675: LIST
83676: LIST
83677: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83678: LD_ADDR_VAR 0 57
83682: PUSH
83683: LD_INT 2
83685: NEG
83686: PUSH
83687: LD_INT 1
83689: PUSH
83690: EMPTY
83691: LIST
83692: LIST
83693: PUSH
83694: LD_INT 3
83696: NEG
83697: PUSH
83698: LD_INT 0
83700: PUSH
83701: EMPTY
83702: LIST
83703: LIST
83704: PUSH
83705: LD_INT 3
83707: NEG
83708: PUSH
83709: LD_INT 1
83711: NEG
83712: PUSH
83713: EMPTY
83714: LIST
83715: LIST
83716: PUSH
83717: EMPTY
83718: LIST
83719: LIST
83720: LIST
83721: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83722: LD_ADDR_VAR 0 58
83726: PUSH
83727: LD_INT 2
83729: NEG
83730: PUSH
83731: LD_INT 3
83733: NEG
83734: PUSH
83735: EMPTY
83736: LIST
83737: LIST
83738: PUSH
83739: LD_INT 3
83741: NEG
83742: PUSH
83743: LD_INT 2
83745: NEG
83746: PUSH
83747: EMPTY
83748: LIST
83749: LIST
83750: PUSH
83751: LD_INT 3
83753: NEG
83754: PUSH
83755: LD_INT 3
83757: NEG
83758: PUSH
83759: EMPTY
83760: LIST
83761: LIST
83762: PUSH
83763: EMPTY
83764: LIST
83765: LIST
83766: LIST
83767: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
83768: LD_ADDR_VAR 0 59
83772: PUSH
83773: LD_INT 1
83775: NEG
83776: PUSH
83777: LD_INT 2
83779: NEG
83780: PUSH
83781: EMPTY
83782: LIST
83783: LIST
83784: PUSH
83785: LD_INT 0
83787: PUSH
83788: LD_INT 2
83790: NEG
83791: PUSH
83792: EMPTY
83793: LIST
83794: LIST
83795: PUSH
83796: LD_INT 1
83798: PUSH
83799: LD_INT 1
83801: NEG
83802: PUSH
83803: EMPTY
83804: LIST
83805: LIST
83806: PUSH
83807: EMPTY
83808: LIST
83809: LIST
83810: LIST
83811: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83812: LD_ADDR_VAR 0 60
83816: PUSH
83817: LD_INT 1
83819: PUSH
83820: LD_INT 1
83822: NEG
83823: PUSH
83824: EMPTY
83825: LIST
83826: LIST
83827: PUSH
83828: LD_INT 2
83830: PUSH
83831: LD_INT 0
83833: PUSH
83834: EMPTY
83835: LIST
83836: LIST
83837: PUSH
83838: LD_INT 2
83840: PUSH
83841: LD_INT 1
83843: PUSH
83844: EMPTY
83845: LIST
83846: LIST
83847: PUSH
83848: EMPTY
83849: LIST
83850: LIST
83851: LIST
83852: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83853: LD_ADDR_VAR 0 61
83857: PUSH
83858: LD_INT 2
83860: PUSH
83861: LD_INT 1
83863: PUSH
83864: EMPTY
83865: LIST
83866: LIST
83867: PUSH
83868: LD_INT 2
83870: PUSH
83871: LD_INT 2
83873: PUSH
83874: EMPTY
83875: LIST
83876: LIST
83877: PUSH
83878: LD_INT 1
83880: PUSH
83881: LD_INT 2
83883: PUSH
83884: EMPTY
83885: LIST
83886: LIST
83887: PUSH
83888: EMPTY
83889: LIST
83890: LIST
83891: LIST
83892: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83893: LD_ADDR_VAR 0 62
83897: PUSH
83898: LD_INT 1
83900: PUSH
83901: LD_INT 2
83903: PUSH
83904: EMPTY
83905: LIST
83906: LIST
83907: PUSH
83908: LD_INT 0
83910: PUSH
83911: LD_INT 2
83913: PUSH
83914: EMPTY
83915: LIST
83916: LIST
83917: PUSH
83918: LD_INT 1
83920: NEG
83921: PUSH
83922: LD_INT 1
83924: PUSH
83925: EMPTY
83926: LIST
83927: LIST
83928: PUSH
83929: EMPTY
83930: LIST
83931: LIST
83932: LIST
83933: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83934: LD_ADDR_VAR 0 63
83938: PUSH
83939: LD_INT 1
83941: NEG
83942: PUSH
83943: LD_INT 1
83945: PUSH
83946: EMPTY
83947: LIST
83948: LIST
83949: PUSH
83950: LD_INT 2
83952: NEG
83953: PUSH
83954: LD_INT 0
83956: PUSH
83957: EMPTY
83958: LIST
83959: LIST
83960: PUSH
83961: LD_INT 2
83963: NEG
83964: PUSH
83965: LD_INT 1
83967: NEG
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: LIST
83977: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83978: LD_ADDR_VAR 0 64
83982: PUSH
83983: LD_INT 1
83985: NEG
83986: PUSH
83987: LD_INT 2
83989: NEG
83990: PUSH
83991: EMPTY
83992: LIST
83993: LIST
83994: PUSH
83995: LD_INT 2
83997: NEG
83998: PUSH
83999: LD_INT 1
84001: NEG
84002: PUSH
84003: EMPTY
84004: LIST
84005: LIST
84006: PUSH
84007: LD_INT 2
84009: NEG
84010: PUSH
84011: LD_INT 2
84013: NEG
84014: PUSH
84015: EMPTY
84016: LIST
84017: LIST
84018: PUSH
84019: EMPTY
84020: LIST
84021: LIST
84022: LIST
84023: ST_TO_ADDR
// end ; 2 :
84024: GO 87290
84026: LD_INT 2
84028: DOUBLE
84029: EQUAL
84030: IFTRUE 84034
84032: GO 87289
84034: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
84035: LD_ADDR_VAR 0 29
84039: PUSH
84040: LD_INT 4
84042: PUSH
84043: LD_INT 0
84045: PUSH
84046: EMPTY
84047: LIST
84048: LIST
84049: PUSH
84050: LD_INT 4
84052: PUSH
84053: LD_INT 1
84055: NEG
84056: PUSH
84057: EMPTY
84058: LIST
84059: LIST
84060: PUSH
84061: LD_INT 5
84063: PUSH
84064: LD_INT 0
84066: PUSH
84067: EMPTY
84068: LIST
84069: LIST
84070: PUSH
84071: LD_INT 5
84073: PUSH
84074: LD_INT 1
84076: PUSH
84077: EMPTY
84078: LIST
84079: LIST
84080: PUSH
84081: LD_INT 4
84083: PUSH
84084: LD_INT 1
84086: PUSH
84087: EMPTY
84088: LIST
84089: LIST
84090: PUSH
84091: LD_INT 3
84093: PUSH
84094: LD_INT 0
84096: PUSH
84097: EMPTY
84098: LIST
84099: LIST
84100: PUSH
84101: LD_INT 3
84103: PUSH
84104: LD_INT 1
84106: NEG
84107: PUSH
84108: EMPTY
84109: LIST
84110: LIST
84111: PUSH
84112: LD_INT 3
84114: PUSH
84115: LD_INT 2
84117: NEG
84118: PUSH
84119: EMPTY
84120: LIST
84121: LIST
84122: PUSH
84123: LD_INT 5
84125: PUSH
84126: LD_INT 2
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: PUSH
84133: LD_INT 3
84135: PUSH
84136: LD_INT 3
84138: PUSH
84139: EMPTY
84140: LIST
84141: LIST
84142: PUSH
84143: LD_INT 3
84145: PUSH
84146: LD_INT 2
84148: PUSH
84149: EMPTY
84150: LIST
84151: LIST
84152: PUSH
84153: LD_INT 4
84155: PUSH
84156: LD_INT 3
84158: PUSH
84159: EMPTY
84160: LIST
84161: LIST
84162: PUSH
84163: LD_INT 4
84165: PUSH
84166: LD_INT 4
84168: PUSH
84169: EMPTY
84170: LIST
84171: LIST
84172: PUSH
84173: LD_INT 3
84175: PUSH
84176: LD_INT 4
84178: PUSH
84179: EMPTY
84180: LIST
84181: LIST
84182: PUSH
84183: LD_INT 2
84185: PUSH
84186: LD_INT 3
84188: PUSH
84189: EMPTY
84190: LIST
84191: LIST
84192: PUSH
84193: LD_INT 2
84195: PUSH
84196: LD_INT 2
84198: PUSH
84199: EMPTY
84200: LIST
84201: LIST
84202: PUSH
84203: LD_INT 4
84205: PUSH
84206: LD_INT 2
84208: PUSH
84209: EMPTY
84210: LIST
84211: LIST
84212: PUSH
84213: LD_INT 2
84215: PUSH
84216: LD_INT 4
84218: PUSH
84219: EMPTY
84220: LIST
84221: LIST
84222: PUSH
84223: LD_INT 0
84225: PUSH
84226: LD_INT 4
84228: PUSH
84229: EMPTY
84230: LIST
84231: LIST
84232: PUSH
84233: LD_INT 0
84235: PUSH
84236: LD_INT 3
84238: PUSH
84239: EMPTY
84240: LIST
84241: LIST
84242: PUSH
84243: LD_INT 1
84245: PUSH
84246: LD_INT 4
84248: PUSH
84249: EMPTY
84250: LIST
84251: LIST
84252: PUSH
84253: LD_INT 1
84255: PUSH
84256: LD_INT 5
84258: PUSH
84259: EMPTY
84260: LIST
84261: LIST
84262: PUSH
84263: LD_INT 0
84265: PUSH
84266: LD_INT 5
84268: PUSH
84269: EMPTY
84270: LIST
84271: LIST
84272: PUSH
84273: LD_INT 1
84275: NEG
84276: PUSH
84277: LD_INT 4
84279: PUSH
84280: EMPTY
84281: LIST
84282: LIST
84283: PUSH
84284: LD_INT 1
84286: NEG
84287: PUSH
84288: LD_INT 3
84290: PUSH
84291: EMPTY
84292: LIST
84293: LIST
84294: PUSH
84295: LD_INT 2
84297: PUSH
84298: LD_INT 5
84300: PUSH
84301: EMPTY
84302: LIST
84303: LIST
84304: PUSH
84305: LD_INT 2
84307: NEG
84308: PUSH
84309: LD_INT 3
84311: PUSH
84312: EMPTY
84313: LIST
84314: LIST
84315: PUSH
84316: LD_INT 3
84318: NEG
84319: PUSH
84320: LD_INT 0
84322: PUSH
84323: EMPTY
84324: LIST
84325: LIST
84326: PUSH
84327: LD_INT 3
84329: NEG
84330: PUSH
84331: LD_INT 1
84333: NEG
84334: PUSH
84335: EMPTY
84336: LIST
84337: LIST
84338: PUSH
84339: LD_INT 2
84341: NEG
84342: PUSH
84343: LD_INT 0
84345: PUSH
84346: EMPTY
84347: LIST
84348: LIST
84349: PUSH
84350: LD_INT 2
84352: NEG
84353: PUSH
84354: LD_INT 1
84356: PUSH
84357: EMPTY
84358: LIST
84359: LIST
84360: PUSH
84361: LD_INT 3
84363: NEG
84364: PUSH
84365: LD_INT 1
84367: PUSH
84368: EMPTY
84369: LIST
84370: LIST
84371: PUSH
84372: LD_INT 4
84374: NEG
84375: PUSH
84376: LD_INT 0
84378: PUSH
84379: EMPTY
84380: LIST
84381: LIST
84382: PUSH
84383: LD_INT 4
84385: NEG
84386: PUSH
84387: LD_INT 1
84389: NEG
84390: PUSH
84391: EMPTY
84392: LIST
84393: LIST
84394: PUSH
84395: LD_INT 4
84397: NEG
84398: PUSH
84399: LD_INT 2
84401: NEG
84402: PUSH
84403: EMPTY
84404: LIST
84405: LIST
84406: PUSH
84407: LD_INT 2
84409: NEG
84410: PUSH
84411: LD_INT 2
84413: PUSH
84414: EMPTY
84415: LIST
84416: LIST
84417: PUSH
84418: LD_INT 4
84420: NEG
84421: PUSH
84422: LD_INT 4
84424: NEG
84425: PUSH
84426: EMPTY
84427: LIST
84428: LIST
84429: PUSH
84430: LD_INT 4
84432: NEG
84433: PUSH
84434: LD_INT 5
84436: NEG
84437: PUSH
84438: EMPTY
84439: LIST
84440: LIST
84441: PUSH
84442: LD_INT 3
84444: NEG
84445: PUSH
84446: LD_INT 4
84448: NEG
84449: PUSH
84450: EMPTY
84451: LIST
84452: LIST
84453: PUSH
84454: LD_INT 3
84456: NEG
84457: PUSH
84458: LD_INT 3
84460: NEG
84461: PUSH
84462: EMPTY
84463: LIST
84464: LIST
84465: PUSH
84466: LD_INT 4
84468: NEG
84469: PUSH
84470: LD_INT 3
84472: NEG
84473: PUSH
84474: EMPTY
84475: LIST
84476: LIST
84477: PUSH
84478: LD_INT 5
84480: NEG
84481: PUSH
84482: LD_INT 4
84484: NEG
84485: PUSH
84486: EMPTY
84487: LIST
84488: LIST
84489: PUSH
84490: LD_INT 5
84492: NEG
84493: PUSH
84494: LD_INT 5
84496: NEG
84497: PUSH
84498: EMPTY
84499: LIST
84500: LIST
84501: PUSH
84502: LD_INT 3
84504: NEG
84505: PUSH
84506: LD_INT 5
84508: NEG
84509: PUSH
84510: EMPTY
84511: LIST
84512: LIST
84513: PUSH
84514: LD_INT 5
84516: NEG
84517: PUSH
84518: LD_INT 3
84520: NEG
84521: PUSH
84522: EMPTY
84523: LIST
84524: LIST
84525: PUSH
84526: EMPTY
84527: LIST
84528: LIST
84529: LIST
84530: LIST
84531: LIST
84532: LIST
84533: LIST
84534: LIST
84535: LIST
84536: LIST
84537: LIST
84538: LIST
84539: LIST
84540: LIST
84541: LIST
84542: LIST
84543: LIST
84544: LIST
84545: LIST
84546: LIST
84547: LIST
84548: LIST
84549: LIST
84550: LIST
84551: LIST
84552: LIST
84553: LIST
84554: LIST
84555: LIST
84556: LIST
84557: LIST
84558: LIST
84559: LIST
84560: LIST
84561: LIST
84562: LIST
84563: LIST
84564: LIST
84565: LIST
84566: LIST
84567: LIST
84568: LIST
84569: LIST
84570: LIST
84571: LIST
84572: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
84573: LD_ADDR_VAR 0 30
84577: PUSH
84578: LD_INT 4
84580: PUSH
84581: LD_INT 4
84583: PUSH
84584: EMPTY
84585: LIST
84586: LIST
84587: PUSH
84588: LD_INT 4
84590: PUSH
84591: LD_INT 3
84593: PUSH
84594: EMPTY
84595: LIST
84596: LIST
84597: PUSH
84598: LD_INT 5
84600: PUSH
84601: LD_INT 4
84603: PUSH
84604: EMPTY
84605: LIST
84606: LIST
84607: PUSH
84608: LD_INT 5
84610: PUSH
84611: LD_INT 5
84613: PUSH
84614: EMPTY
84615: LIST
84616: LIST
84617: PUSH
84618: LD_INT 4
84620: PUSH
84621: LD_INT 5
84623: PUSH
84624: EMPTY
84625: LIST
84626: LIST
84627: PUSH
84628: LD_INT 3
84630: PUSH
84631: LD_INT 4
84633: PUSH
84634: EMPTY
84635: LIST
84636: LIST
84637: PUSH
84638: LD_INT 3
84640: PUSH
84641: LD_INT 3
84643: PUSH
84644: EMPTY
84645: LIST
84646: LIST
84647: PUSH
84648: LD_INT 5
84650: PUSH
84651: LD_INT 3
84653: PUSH
84654: EMPTY
84655: LIST
84656: LIST
84657: PUSH
84658: LD_INT 3
84660: PUSH
84661: LD_INT 5
84663: PUSH
84664: EMPTY
84665: LIST
84666: LIST
84667: PUSH
84668: LD_INT 0
84670: PUSH
84671: LD_INT 3
84673: PUSH
84674: EMPTY
84675: LIST
84676: LIST
84677: PUSH
84678: LD_INT 0
84680: PUSH
84681: LD_INT 2
84683: PUSH
84684: EMPTY
84685: LIST
84686: LIST
84687: PUSH
84688: LD_INT 1
84690: PUSH
84691: LD_INT 3
84693: PUSH
84694: EMPTY
84695: LIST
84696: LIST
84697: PUSH
84698: LD_INT 1
84700: PUSH
84701: LD_INT 4
84703: PUSH
84704: EMPTY
84705: LIST
84706: LIST
84707: PUSH
84708: LD_INT 0
84710: PUSH
84711: LD_INT 4
84713: PUSH
84714: EMPTY
84715: LIST
84716: LIST
84717: PUSH
84718: LD_INT 1
84720: NEG
84721: PUSH
84722: LD_INT 3
84724: PUSH
84725: EMPTY
84726: LIST
84727: LIST
84728: PUSH
84729: LD_INT 1
84731: NEG
84732: PUSH
84733: LD_INT 2
84735: PUSH
84736: EMPTY
84737: LIST
84738: LIST
84739: PUSH
84740: LD_INT 2
84742: PUSH
84743: LD_INT 4
84745: PUSH
84746: EMPTY
84747: LIST
84748: LIST
84749: PUSH
84750: LD_INT 2
84752: NEG
84753: PUSH
84754: LD_INT 2
84756: PUSH
84757: EMPTY
84758: LIST
84759: LIST
84760: PUSH
84761: LD_INT 4
84763: NEG
84764: PUSH
84765: LD_INT 0
84767: PUSH
84768: EMPTY
84769: LIST
84770: LIST
84771: PUSH
84772: LD_INT 4
84774: NEG
84775: PUSH
84776: LD_INT 1
84778: NEG
84779: PUSH
84780: EMPTY
84781: LIST
84782: LIST
84783: PUSH
84784: LD_INT 3
84786: NEG
84787: PUSH
84788: LD_INT 0
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: PUSH
84795: LD_INT 3
84797: NEG
84798: PUSH
84799: LD_INT 1
84801: PUSH
84802: EMPTY
84803: LIST
84804: LIST
84805: PUSH
84806: LD_INT 4
84808: NEG
84809: PUSH
84810: LD_INT 1
84812: PUSH
84813: EMPTY
84814: LIST
84815: LIST
84816: PUSH
84817: LD_INT 5
84819: NEG
84820: PUSH
84821: LD_INT 0
84823: PUSH
84824: EMPTY
84825: LIST
84826: LIST
84827: PUSH
84828: LD_INT 5
84830: NEG
84831: PUSH
84832: LD_INT 1
84834: NEG
84835: PUSH
84836: EMPTY
84837: LIST
84838: LIST
84839: PUSH
84840: LD_INT 5
84842: NEG
84843: PUSH
84844: LD_INT 2
84846: NEG
84847: PUSH
84848: EMPTY
84849: LIST
84850: LIST
84851: PUSH
84852: LD_INT 3
84854: NEG
84855: PUSH
84856: LD_INT 2
84858: PUSH
84859: EMPTY
84860: LIST
84861: LIST
84862: PUSH
84863: LD_INT 3
84865: NEG
84866: PUSH
84867: LD_INT 3
84869: NEG
84870: PUSH
84871: EMPTY
84872: LIST
84873: LIST
84874: PUSH
84875: LD_INT 3
84877: NEG
84878: PUSH
84879: LD_INT 4
84881: NEG
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: PUSH
84887: LD_INT 2
84889: NEG
84890: PUSH
84891: LD_INT 3
84893: NEG
84894: PUSH
84895: EMPTY
84896: LIST
84897: LIST
84898: PUSH
84899: LD_INT 2
84901: NEG
84902: PUSH
84903: LD_INT 2
84905: NEG
84906: PUSH
84907: EMPTY
84908: LIST
84909: LIST
84910: PUSH
84911: LD_INT 3
84913: NEG
84914: PUSH
84915: LD_INT 2
84917: NEG
84918: PUSH
84919: EMPTY
84920: LIST
84921: LIST
84922: PUSH
84923: LD_INT 4
84925: NEG
84926: PUSH
84927: LD_INT 3
84929: NEG
84930: PUSH
84931: EMPTY
84932: LIST
84933: LIST
84934: PUSH
84935: LD_INT 4
84937: NEG
84938: PUSH
84939: LD_INT 4
84941: NEG
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: PUSH
84947: LD_INT 2
84949: NEG
84950: PUSH
84951: LD_INT 4
84953: NEG
84954: PUSH
84955: EMPTY
84956: LIST
84957: LIST
84958: PUSH
84959: LD_INT 4
84961: NEG
84962: PUSH
84963: LD_INT 2
84965: NEG
84966: PUSH
84967: EMPTY
84968: LIST
84969: LIST
84970: PUSH
84971: LD_INT 0
84973: PUSH
84974: LD_INT 4
84976: NEG
84977: PUSH
84978: EMPTY
84979: LIST
84980: LIST
84981: PUSH
84982: LD_INT 0
84984: PUSH
84985: LD_INT 5
84987: NEG
84988: PUSH
84989: EMPTY
84990: LIST
84991: LIST
84992: PUSH
84993: LD_INT 1
84995: PUSH
84996: LD_INT 4
84998: NEG
84999: PUSH
85000: EMPTY
85001: LIST
85002: LIST
85003: PUSH
85004: LD_INT 1
85006: PUSH
85007: LD_INT 3
85009: NEG
85010: PUSH
85011: EMPTY
85012: LIST
85013: LIST
85014: PUSH
85015: LD_INT 0
85017: PUSH
85018: LD_INT 3
85020: NEG
85021: PUSH
85022: EMPTY
85023: LIST
85024: LIST
85025: PUSH
85026: LD_INT 1
85028: NEG
85029: PUSH
85030: LD_INT 4
85032: NEG
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: PUSH
85038: LD_INT 1
85040: NEG
85041: PUSH
85042: LD_INT 5
85044: NEG
85045: PUSH
85046: EMPTY
85047: LIST
85048: LIST
85049: PUSH
85050: LD_INT 2
85052: PUSH
85053: LD_INT 3
85055: NEG
85056: PUSH
85057: EMPTY
85058: LIST
85059: LIST
85060: PUSH
85061: LD_INT 2
85063: NEG
85064: PUSH
85065: LD_INT 5
85067: NEG
85068: PUSH
85069: EMPTY
85070: LIST
85071: LIST
85072: PUSH
85073: EMPTY
85074: LIST
85075: LIST
85076: LIST
85077: LIST
85078: LIST
85079: LIST
85080: LIST
85081: LIST
85082: LIST
85083: LIST
85084: LIST
85085: LIST
85086: LIST
85087: LIST
85088: LIST
85089: LIST
85090: LIST
85091: LIST
85092: LIST
85093: LIST
85094: LIST
85095: LIST
85096: LIST
85097: LIST
85098: LIST
85099: LIST
85100: LIST
85101: LIST
85102: LIST
85103: LIST
85104: LIST
85105: LIST
85106: LIST
85107: LIST
85108: LIST
85109: LIST
85110: LIST
85111: LIST
85112: LIST
85113: LIST
85114: LIST
85115: LIST
85116: LIST
85117: LIST
85118: LIST
85119: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
85120: LD_ADDR_VAR 0 31
85124: PUSH
85125: LD_INT 0
85127: PUSH
85128: LD_INT 4
85130: PUSH
85131: EMPTY
85132: LIST
85133: LIST
85134: PUSH
85135: LD_INT 0
85137: PUSH
85138: LD_INT 3
85140: PUSH
85141: EMPTY
85142: LIST
85143: LIST
85144: PUSH
85145: LD_INT 1
85147: PUSH
85148: LD_INT 4
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: LD_INT 1
85157: PUSH
85158: LD_INT 5
85160: PUSH
85161: EMPTY
85162: LIST
85163: LIST
85164: PUSH
85165: LD_INT 0
85167: PUSH
85168: LD_INT 5
85170: PUSH
85171: EMPTY
85172: LIST
85173: LIST
85174: PUSH
85175: LD_INT 1
85177: NEG
85178: PUSH
85179: LD_INT 4
85181: PUSH
85182: EMPTY
85183: LIST
85184: LIST
85185: PUSH
85186: LD_INT 1
85188: NEG
85189: PUSH
85190: LD_INT 3
85192: PUSH
85193: EMPTY
85194: LIST
85195: LIST
85196: PUSH
85197: LD_INT 2
85199: PUSH
85200: LD_INT 5
85202: PUSH
85203: EMPTY
85204: LIST
85205: LIST
85206: PUSH
85207: LD_INT 2
85209: NEG
85210: PUSH
85211: LD_INT 3
85213: PUSH
85214: EMPTY
85215: LIST
85216: LIST
85217: PUSH
85218: LD_INT 3
85220: NEG
85221: PUSH
85222: LD_INT 0
85224: PUSH
85225: EMPTY
85226: LIST
85227: LIST
85228: PUSH
85229: LD_INT 3
85231: NEG
85232: PUSH
85233: LD_INT 1
85235: NEG
85236: PUSH
85237: EMPTY
85238: LIST
85239: LIST
85240: PUSH
85241: LD_INT 2
85243: NEG
85244: PUSH
85245: LD_INT 0
85247: PUSH
85248: EMPTY
85249: LIST
85250: LIST
85251: PUSH
85252: LD_INT 2
85254: NEG
85255: PUSH
85256: LD_INT 1
85258: PUSH
85259: EMPTY
85260: LIST
85261: LIST
85262: PUSH
85263: LD_INT 3
85265: NEG
85266: PUSH
85267: LD_INT 1
85269: PUSH
85270: EMPTY
85271: LIST
85272: LIST
85273: PUSH
85274: LD_INT 4
85276: NEG
85277: PUSH
85278: LD_INT 0
85280: PUSH
85281: EMPTY
85282: LIST
85283: LIST
85284: PUSH
85285: LD_INT 4
85287: NEG
85288: PUSH
85289: LD_INT 1
85291: NEG
85292: PUSH
85293: EMPTY
85294: LIST
85295: LIST
85296: PUSH
85297: LD_INT 4
85299: NEG
85300: PUSH
85301: LD_INT 2
85303: NEG
85304: PUSH
85305: EMPTY
85306: LIST
85307: LIST
85308: PUSH
85309: LD_INT 2
85311: NEG
85312: PUSH
85313: LD_INT 2
85315: PUSH
85316: EMPTY
85317: LIST
85318: LIST
85319: PUSH
85320: LD_INT 4
85322: NEG
85323: PUSH
85324: LD_INT 4
85326: NEG
85327: PUSH
85328: EMPTY
85329: LIST
85330: LIST
85331: PUSH
85332: LD_INT 4
85334: NEG
85335: PUSH
85336: LD_INT 5
85338: NEG
85339: PUSH
85340: EMPTY
85341: LIST
85342: LIST
85343: PUSH
85344: LD_INT 3
85346: NEG
85347: PUSH
85348: LD_INT 4
85350: NEG
85351: PUSH
85352: EMPTY
85353: LIST
85354: LIST
85355: PUSH
85356: LD_INT 3
85358: NEG
85359: PUSH
85360: LD_INT 3
85362: NEG
85363: PUSH
85364: EMPTY
85365: LIST
85366: LIST
85367: PUSH
85368: LD_INT 4
85370: NEG
85371: PUSH
85372: LD_INT 3
85374: NEG
85375: PUSH
85376: EMPTY
85377: LIST
85378: LIST
85379: PUSH
85380: LD_INT 5
85382: NEG
85383: PUSH
85384: LD_INT 4
85386: NEG
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: PUSH
85392: LD_INT 5
85394: NEG
85395: PUSH
85396: LD_INT 5
85398: NEG
85399: PUSH
85400: EMPTY
85401: LIST
85402: LIST
85403: PUSH
85404: LD_INT 3
85406: NEG
85407: PUSH
85408: LD_INT 5
85410: NEG
85411: PUSH
85412: EMPTY
85413: LIST
85414: LIST
85415: PUSH
85416: LD_INT 5
85418: NEG
85419: PUSH
85420: LD_INT 3
85422: NEG
85423: PUSH
85424: EMPTY
85425: LIST
85426: LIST
85427: PUSH
85428: LD_INT 0
85430: PUSH
85431: LD_INT 3
85433: NEG
85434: PUSH
85435: EMPTY
85436: LIST
85437: LIST
85438: PUSH
85439: LD_INT 0
85441: PUSH
85442: LD_INT 4
85444: NEG
85445: PUSH
85446: EMPTY
85447: LIST
85448: LIST
85449: PUSH
85450: LD_INT 1
85452: PUSH
85453: LD_INT 3
85455: NEG
85456: PUSH
85457: EMPTY
85458: LIST
85459: LIST
85460: PUSH
85461: LD_INT 1
85463: PUSH
85464: LD_INT 2
85466: NEG
85467: PUSH
85468: EMPTY
85469: LIST
85470: LIST
85471: PUSH
85472: LD_INT 0
85474: PUSH
85475: LD_INT 2
85477: NEG
85478: PUSH
85479: EMPTY
85480: LIST
85481: LIST
85482: PUSH
85483: LD_INT 1
85485: NEG
85486: PUSH
85487: LD_INT 3
85489: NEG
85490: PUSH
85491: EMPTY
85492: LIST
85493: LIST
85494: PUSH
85495: LD_INT 1
85497: NEG
85498: PUSH
85499: LD_INT 4
85501: NEG
85502: PUSH
85503: EMPTY
85504: LIST
85505: LIST
85506: PUSH
85507: LD_INT 2
85509: PUSH
85510: LD_INT 2
85512: NEG
85513: PUSH
85514: EMPTY
85515: LIST
85516: LIST
85517: PUSH
85518: LD_INT 2
85520: NEG
85521: PUSH
85522: LD_INT 4
85524: NEG
85525: PUSH
85526: EMPTY
85527: LIST
85528: LIST
85529: PUSH
85530: LD_INT 4
85532: PUSH
85533: LD_INT 0
85535: PUSH
85536: EMPTY
85537: LIST
85538: LIST
85539: PUSH
85540: LD_INT 4
85542: PUSH
85543: LD_INT 1
85545: NEG
85546: PUSH
85547: EMPTY
85548: LIST
85549: LIST
85550: PUSH
85551: LD_INT 5
85553: PUSH
85554: LD_INT 0
85556: PUSH
85557: EMPTY
85558: LIST
85559: LIST
85560: PUSH
85561: LD_INT 5
85563: PUSH
85564: LD_INT 1
85566: PUSH
85567: EMPTY
85568: LIST
85569: LIST
85570: PUSH
85571: LD_INT 4
85573: PUSH
85574: LD_INT 1
85576: PUSH
85577: EMPTY
85578: LIST
85579: LIST
85580: PUSH
85581: LD_INT 3
85583: PUSH
85584: LD_INT 0
85586: PUSH
85587: EMPTY
85588: LIST
85589: LIST
85590: PUSH
85591: LD_INT 3
85593: PUSH
85594: LD_INT 1
85596: NEG
85597: PUSH
85598: EMPTY
85599: LIST
85600: LIST
85601: PUSH
85602: LD_INT 3
85604: PUSH
85605: LD_INT 2
85607: NEG
85608: PUSH
85609: EMPTY
85610: LIST
85611: LIST
85612: PUSH
85613: LD_INT 5
85615: PUSH
85616: LD_INT 2
85618: PUSH
85619: EMPTY
85620: LIST
85621: LIST
85622: PUSH
85623: EMPTY
85624: LIST
85625: LIST
85626: LIST
85627: LIST
85628: LIST
85629: LIST
85630: LIST
85631: LIST
85632: LIST
85633: LIST
85634: LIST
85635: LIST
85636: LIST
85637: LIST
85638: LIST
85639: LIST
85640: LIST
85641: LIST
85642: LIST
85643: LIST
85644: LIST
85645: LIST
85646: LIST
85647: LIST
85648: LIST
85649: LIST
85650: LIST
85651: LIST
85652: LIST
85653: LIST
85654: LIST
85655: LIST
85656: LIST
85657: LIST
85658: LIST
85659: LIST
85660: LIST
85661: LIST
85662: LIST
85663: LIST
85664: LIST
85665: LIST
85666: LIST
85667: LIST
85668: LIST
85669: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
85670: LD_ADDR_VAR 0 32
85674: PUSH
85675: LD_INT 4
85677: NEG
85678: PUSH
85679: LD_INT 0
85681: PUSH
85682: EMPTY
85683: LIST
85684: LIST
85685: PUSH
85686: LD_INT 4
85688: NEG
85689: PUSH
85690: LD_INT 1
85692: NEG
85693: PUSH
85694: EMPTY
85695: LIST
85696: LIST
85697: PUSH
85698: LD_INT 3
85700: NEG
85701: PUSH
85702: LD_INT 0
85704: PUSH
85705: EMPTY
85706: LIST
85707: LIST
85708: PUSH
85709: LD_INT 3
85711: NEG
85712: PUSH
85713: LD_INT 1
85715: PUSH
85716: EMPTY
85717: LIST
85718: LIST
85719: PUSH
85720: LD_INT 4
85722: NEG
85723: PUSH
85724: LD_INT 1
85726: PUSH
85727: EMPTY
85728: LIST
85729: LIST
85730: PUSH
85731: LD_INT 5
85733: NEG
85734: PUSH
85735: LD_INT 0
85737: PUSH
85738: EMPTY
85739: LIST
85740: LIST
85741: PUSH
85742: LD_INT 5
85744: NEG
85745: PUSH
85746: LD_INT 1
85748: NEG
85749: PUSH
85750: EMPTY
85751: LIST
85752: LIST
85753: PUSH
85754: LD_INT 5
85756: NEG
85757: PUSH
85758: LD_INT 2
85760: NEG
85761: PUSH
85762: EMPTY
85763: LIST
85764: LIST
85765: PUSH
85766: LD_INT 3
85768: NEG
85769: PUSH
85770: LD_INT 2
85772: PUSH
85773: EMPTY
85774: LIST
85775: LIST
85776: PUSH
85777: LD_INT 3
85779: NEG
85780: PUSH
85781: LD_INT 3
85783: NEG
85784: PUSH
85785: EMPTY
85786: LIST
85787: LIST
85788: PUSH
85789: LD_INT 3
85791: NEG
85792: PUSH
85793: LD_INT 4
85795: NEG
85796: PUSH
85797: EMPTY
85798: LIST
85799: LIST
85800: PUSH
85801: LD_INT 2
85803: NEG
85804: PUSH
85805: LD_INT 3
85807: NEG
85808: PUSH
85809: EMPTY
85810: LIST
85811: LIST
85812: PUSH
85813: LD_INT 2
85815: NEG
85816: PUSH
85817: LD_INT 2
85819: NEG
85820: PUSH
85821: EMPTY
85822: LIST
85823: LIST
85824: PUSH
85825: LD_INT 3
85827: NEG
85828: PUSH
85829: LD_INT 2
85831: NEG
85832: PUSH
85833: EMPTY
85834: LIST
85835: LIST
85836: PUSH
85837: LD_INT 4
85839: NEG
85840: PUSH
85841: LD_INT 3
85843: NEG
85844: PUSH
85845: EMPTY
85846: LIST
85847: LIST
85848: PUSH
85849: LD_INT 4
85851: NEG
85852: PUSH
85853: LD_INT 4
85855: NEG
85856: PUSH
85857: EMPTY
85858: LIST
85859: LIST
85860: PUSH
85861: LD_INT 2
85863: NEG
85864: PUSH
85865: LD_INT 4
85867: NEG
85868: PUSH
85869: EMPTY
85870: LIST
85871: LIST
85872: PUSH
85873: LD_INT 4
85875: NEG
85876: PUSH
85877: LD_INT 2
85879: NEG
85880: PUSH
85881: EMPTY
85882: LIST
85883: LIST
85884: PUSH
85885: LD_INT 0
85887: PUSH
85888: LD_INT 4
85890: NEG
85891: PUSH
85892: EMPTY
85893: LIST
85894: LIST
85895: PUSH
85896: LD_INT 0
85898: PUSH
85899: LD_INT 5
85901: NEG
85902: PUSH
85903: EMPTY
85904: LIST
85905: LIST
85906: PUSH
85907: LD_INT 1
85909: PUSH
85910: LD_INT 4
85912: NEG
85913: PUSH
85914: EMPTY
85915: LIST
85916: LIST
85917: PUSH
85918: LD_INT 1
85920: PUSH
85921: LD_INT 3
85923: NEG
85924: PUSH
85925: EMPTY
85926: LIST
85927: LIST
85928: PUSH
85929: LD_INT 0
85931: PUSH
85932: LD_INT 3
85934: NEG
85935: PUSH
85936: EMPTY
85937: LIST
85938: LIST
85939: PUSH
85940: LD_INT 1
85942: NEG
85943: PUSH
85944: LD_INT 4
85946: NEG
85947: PUSH
85948: EMPTY
85949: LIST
85950: LIST
85951: PUSH
85952: LD_INT 1
85954: NEG
85955: PUSH
85956: LD_INT 5
85958: NEG
85959: PUSH
85960: EMPTY
85961: LIST
85962: LIST
85963: PUSH
85964: LD_INT 2
85966: PUSH
85967: LD_INT 3
85969: NEG
85970: PUSH
85971: EMPTY
85972: LIST
85973: LIST
85974: PUSH
85975: LD_INT 2
85977: NEG
85978: PUSH
85979: LD_INT 5
85981: NEG
85982: PUSH
85983: EMPTY
85984: LIST
85985: LIST
85986: PUSH
85987: LD_INT 3
85989: PUSH
85990: LD_INT 0
85992: PUSH
85993: EMPTY
85994: LIST
85995: LIST
85996: PUSH
85997: LD_INT 3
85999: PUSH
86000: LD_INT 1
86002: NEG
86003: PUSH
86004: EMPTY
86005: LIST
86006: LIST
86007: PUSH
86008: LD_INT 4
86010: PUSH
86011: LD_INT 0
86013: PUSH
86014: EMPTY
86015: LIST
86016: LIST
86017: PUSH
86018: LD_INT 4
86020: PUSH
86021: LD_INT 1
86023: PUSH
86024: EMPTY
86025: LIST
86026: LIST
86027: PUSH
86028: LD_INT 3
86030: PUSH
86031: LD_INT 1
86033: PUSH
86034: EMPTY
86035: LIST
86036: LIST
86037: PUSH
86038: LD_INT 2
86040: PUSH
86041: LD_INT 0
86043: PUSH
86044: EMPTY
86045: LIST
86046: LIST
86047: PUSH
86048: LD_INT 2
86050: PUSH
86051: LD_INT 1
86053: NEG
86054: PUSH
86055: EMPTY
86056: LIST
86057: LIST
86058: PUSH
86059: LD_INT 2
86061: PUSH
86062: LD_INT 2
86064: NEG
86065: PUSH
86066: EMPTY
86067: LIST
86068: LIST
86069: PUSH
86070: LD_INT 4
86072: PUSH
86073: LD_INT 2
86075: PUSH
86076: EMPTY
86077: LIST
86078: LIST
86079: PUSH
86080: LD_INT 4
86082: PUSH
86083: LD_INT 4
86085: PUSH
86086: EMPTY
86087: LIST
86088: LIST
86089: PUSH
86090: LD_INT 4
86092: PUSH
86093: LD_INT 3
86095: PUSH
86096: EMPTY
86097: LIST
86098: LIST
86099: PUSH
86100: LD_INT 5
86102: PUSH
86103: LD_INT 4
86105: PUSH
86106: EMPTY
86107: LIST
86108: LIST
86109: PUSH
86110: LD_INT 5
86112: PUSH
86113: LD_INT 5
86115: PUSH
86116: EMPTY
86117: LIST
86118: LIST
86119: PUSH
86120: LD_INT 4
86122: PUSH
86123: LD_INT 5
86125: PUSH
86126: EMPTY
86127: LIST
86128: LIST
86129: PUSH
86130: LD_INT 3
86132: PUSH
86133: LD_INT 4
86135: PUSH
86136: EMPTY
86137: LIST
86138: LIST
86139: PUSH
86140: LD_INT 3
86142: PUSH
86143: LD_INT 3
86145: PUSH
86146: EMPTY
86147: LIST
86148: LIST
86149: PUSH
86150: LD_INT 5
86152: PUSH
86153: LD_INT 3
86155: PUSH
86156: EMPTY
86157: LIST
86158: LIST
86159: PUSH
86160: LD_INT 3
86162: PUSH
86163: LD_INT 5
86165: PUSH
86166: EMPTY
86167: LIST
86168: LIST
86169: PUSH
86170: EMPTY
86171: LIST
86172: LIST
86173: LIST
86174: LIST
86175: LIST
86176: LIST
86177: LIST
86178: LIST
86179: LIST
86180: LIST
86181: LIST
86182: LIST
86183: LIST
86184: LIST
86185: LIST
86186: LIST
86187: LIST
86188: LIST
86189: LIST
86190: LIST
86191: LIST
86192: LIST
86193: LIST
86194: LIST
86195: LIST
86196: LIST
86197: LIST
86198: LIST
86199: LIST
86200: LIST
86201: LIST
86202: LIST
86203: LIST
86204: LIST
86205: LIST
86206: LIST
86207: LIST
86208: LIST
86209: LIST
86210: LIST
86211: LIST
86212: LIST
86213: LIST
86214: LIST
86215: LIST
86216: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
86217: LD_ADDR_VAR 0 33
86221: PUSH
86222: LD_INT 4
86224: NEG
86225: PUSH
86226: LD_INT 4
86228: NEG
86229: PUSH
86230: EMPTY
86231: LIST
86232: LIST
86233: PUSH
86234: LD_INT 4
86236: NEG
86237: PUSH
86238: LD_INT 5
86240: NEG
86241: PUSH
86242: EMPTY
86243: LIST
86244: LIST
86245: PUSH
86246: LD_INT 3
86248: NEG
86249: PUSH
86250: LD_INT 4
86252: NEG
86253: PUSH
86254: EMPTY
86255: LIST
86256: LIST
86257: PUSH
86258: LD_INT 3
86260: NEG
86261: PUSH
86262: LD_INT 3
86264: NEG
86265: PUSH
86266: EMPTY
86267: LIST
86268: LIST
86269: PUSH
86270: LD_INT 4
86272: NEG
86273: PUSH
86274: LD_INT 3
86276: NEG
86277: PUSH
86278: EMPTY
86279: LIST
86280: LIST
86281: PUSH
86282: LD_INT 5
86284: NEG
86285: PUSH
86286: LD_INT 4
86288: NEG
86289: PUSH
86290: EMPTY
86291: LIST
86292: LIST
86293: PUSH
86294: LD_INT 5
86296: NEG
86297: PUSH
86298: LD_INT 5
86300: NEG
86301: PUSH
86302: EMPTY
86303: LIST
86304: LIST
86305: PUSH
86306: LD_INT 3
86308: NEG
86309: PUSH
86310: LD_INT 5
86312: NEG
86313: PUSH
86314: EMPTY
86315: LIST
86316: LIST
86317: PUSH
86318: LD_INT 5
86320: NEG
86321: PUSH
86322: LD_INT 3
86324: NEG
86325: PUSH
86326: EMPTY
86327: LIST
86328: LIST
86329: PUSH
86330: LD_INT 0
86332: PUSH
86333: LD_INT 3
86335: NEG
86336: PUSH
86337: EMPTY
86338: LIST
86339: LIST
86340: PUSH
86341: LD_INT 0
86343: PUSH
86344: LD_INT 4
86346: NEG
86347: PUSH
86348: EMPTY
86349: LIST
86350: LIST
86351: PUSH
86352: LD_INT 1
86354: PUSH
86355: LD_INT 3
86357: NEG
86358: PUSH
86359: EMPTY
86360: LIST
86361: LIST
86362: PUSH
86363: LD_INT 1
86365: PUSH
86366: LD_INT 2
86368: NEG
86369: PUSH
86370: EMPTY
86371: LIST
86372: LIST
86373: PUSH
86374: LD_INT 0
86376: PUSH
86377: LD_INT 2
86379: NEG
86380: PUSH
86381: EMPTY
86382: LIST
86383: LIST
86384: PUSH
86385: LD_INT 1
86387: NEG
86388: PUSH
86389: LD_INT 3
86391: NEG
86392: PUSH
86393: EMPTY
86394: LIST
86395: LIST
86396: PUSH
86397: LD_INT 1
86399: NEG
86400: PUSH
86401: LD_INT 4
86403: NEG
86404: PUSH
86405: EMPTY
86406: LIST
86407: LIST
86408: PUSH
86409: LD_INT 2
86411: PUSH
86412: LD_INT 2
86414: NEG
86415: PUSH
86416: EMPTY
86417: LIST
86418: LIST
86419: PUSH
86420: LD_INT 2
86422: NEG
86423: PUSH
86424: LD_INT 4
86426: NEG
86427: PUSH
86428: EMPTY
86429: LIST
86430: LIST
86431: PUSH
86432: LD_INT 4
86434: PUSH
86435: LD_INT 0
86437: PUSH
86438: EMPTY
86439: LIST
86440: LIST
86441: PUSH
86442: LD_INT 4
86444: PUSH
86445: LD_INT 1
86447: NEG
86448: PUSH
86449: EMPTY
86450: LIST
86451: LIST
86452: PUSH
86453: LD_INT 5
86455: PUSH
86456: LD_INT 0
86458: PUSH
86459: EMPTY
86460: LIST
86461: LIST
86462: PUSH
86463: LD_INT 5
86465: PUSH
86466: LD_INT 1
86468: PUSH
86469: EMPTY
86470: LIST
86471: LIST
86472: PUSH
86473: LD_INT 4
86475: PUSH
86476: LD_INT 1
86478: PUSH
86479: EMPTY
86480: LIST
86481: LIST
86482: PUSH
86483: LD_INT 3
86485: PUSH
86486: LD_INT 0
86488: PUSH
86489: EMPTY
86490: LIST
86491: LIST
86492: PUSH
86493: LD_INT 3
86495: PUSH
86496: LD_INT 1
86498: NEG
86499: PUSH
86500: EMPTY
86501: LIST
86502: LIST
86503: PUSH
86504: LD_INT 3
86506: PUSH
86507: LD_INT 2
86509: NEG
86510: PUSH
86511: EMPTY
86512: LIST
86513: LIST
86514: PUSH
86515: LD_INT 5
86517: PUSH
86518: LD_INT 2
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: PUSH
86525: LD_INT 3
86527: PUSH
86528: LD_INT 3
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: PUSH
86535: LD_INT 3
86537: PUSH
86538: LD_INT 2
86540: PUSH
86541: EMPTY
86542: LIST
86543: LIST
86544: PUSH
86545: LD_INT 4
86547: PUSH
86548: LD_INT 3
86550: PUSH
86551: EMPTY
86552: LIST
86553: LIST
86554: PUSH
86555: LD_INT 4
86557: PUSH
86558: LD_INT 4
86560: PUSH
86561: EMPTY
86562: LIST
86563: LIST
86564: PUSH
86565: LD_INT 3
86567: PUSH
86568: LD_INT 4
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: PUSH
86575: LD_INT 2
86577: PUSH
86578: LD_INT 3
86580: PUSH
86581: EMPTY
86582: LIST
86583: LIST
86584: PUSH
86585: LD_INT 2
86587: PUSH
86588: LD_INT 2
86590: PUSH
86591: EMPTY
86592: LIST
86593: LIST
86594: PUSH
86595: LD_INT 4
86597: PUSH
86598: LD_INT 2
86600: PUSH
86601: EMPTY
86602: LIST
86603: LIST
86604: PUSH
86605: LD_INT 2
86607: PUSH
86608: LD_INT 4
86610: PUSH
86611: EMPTY
86612: LIST
86613: LIST
86614: PUSH
86615: LD_INT 0
86617: PUSH
86618: LD_INT 4
86620: PUSH
86621: EMPTY
86622: LIST
86623: LIST
86624: PUSH
86625: LD_INT 0
86627: PUSH
86628: LD_INT 3
86630: PUSH
86631: EMPTY
86632: LIST
86633: LIST
86634: PUSH
86635: LD_INT 1
86637: PUSH
86638: LD_INT 4
86640: PUSH
86641: EMPTY
86642: LIST
86643: LIST
86644: PUSH
86645: LD_INT 1
86647: PUSH
86648: LD_INT 5
86650: PUSH
86651: EMPTY
86652: LIST
86653: LIST
86654: PUSH
86655: LD_INT 0
86657: PUSH
86658: LD_INT 5
86660: PUSH
86661: EMPTY
86662: LIST
86663: LIST
86664: PUSH
86665: LD_INT 1
86667: NEG
86668: PUSH
86669: LD_INT 4
86671: PUSH
86672: EMPTY
86673: LIST
86674: LIST
86675: PUSH
86676: LD_INT 1
86678: NEG
86679: PUSH
86680: LD_INT 3
86682: PUSH
86683: EMPTY
86684: LIST
86685: LIST
86686: PUSH
86687: LD_INT 2
86689: PUSH
86690: LD_INT 5
86692: PUSH
86693: EMPTY
86694: LIST
86695: LIST
86696: PUSH
86697: LD_INT 2
86699: NEG
86700: PUSH
86701: LD_INT 3
86703: PUSH
86704: EMPTY
86705: LIST
86706: LIST
86707: PUSH
86708: EMPTY
86709: LIST
86710: LIST
86711: LIST
86712: LIST
86713: LIST
86714: LIST
86715: LIST
86716: LIST
86717: LIST
86718: LIST
86719: LIST
86720: LIST
86721: LIST
86722: LIST
86723: LIST
86724: LIST
86725: LIST
86726: LIST
86727: LIST
86728: LIST
86729: LIST
86730: LIST
86731: LIST
86732: LIST
86733: LIST
86734: LIST
86735: LIST
86736: LIST
86737: LIST
86738: LIST
86739: LIST
86740: LIST
86741: LIST
86742: LIST
86743: LIST
86744: LIST
86745: LIST
86746: LIST
86747: LIST
86748: LIST
86749: LIST
86750: LIST
86751: LIST
86752: LIST
86753: LIST
86754: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
86755: LD_ADDR_VAR 0 34
86759: PUSH
86760: LD_INT 0
86762: PUSH
86763: LD_INT 4
86765: NEG
86766: PUSH
86767: EMPTY
86768: LIST
86769: LIST
86770: PUSH
86771: LD_INT 0
86773: PUSH
86774: LD_INT 5
86776: NEG
86777: PUSH
86778: EMPTY
86779: LIST
86780: LIST
86781: PUSH
86782: LD_INT 1
86784: PUSH
86785: LD_INT 4
86787: NEG
86788: PUSH
86789: EMPTY
86790: LIST
86791: LIST
86792: PUSH
86793: LD_INT 1
86795: PUSH
86796: LD_INT 3
86798: NEG
86799: PUSH
86800: EMPTY
86801: LIST
86802: LIST
86803: PUSH
86804: LD_INT 0
86806: PUSH
86807: LD_INT 3
86809: NEG
86810: PUSH
86811: EMPTY
86812: LIST
86813: LIST
86814: PUSH
86815: LD_INT 1
86817: NEG
86818: PUSH
86819: LD_INT 4
86821: NEG
86822: PUSH
86823: EMPTY
86824: LIST
86825: LIST
86826: PUSH
86827: LD_INT 1
86829: NEG
86830: PUSH
86831: LD_INT 5
86833: NEG
86834: PUSH
86835: EMPTY
86836: LIST
86837: LIST
86838: PUSH
86839: LD_INT 2
86841: PUSH
86842: LD_INT 3
86844: NEG
86845: PUSH
86846: EMPTY
86847: LIST
86848: LIST
86849: PUSH
86850: LD_INT 2
86852: NEG
86853: PUSH
86854: LD_INT 5
86856: NEG
86857: PUSH
86858: EMPTY
86859: LIST
86860: LIST
86861: PUSH
86862: LD_INT 3
86864: PUSH
86865: LD_INT 0
86867: PUSH
86868: EMPTY
86869: LIST
86870: LIST
86871: PUSH
86872: LD_INT 3
86874: PUSH
86875: LD_INT 1
86877: NEG
86878: PUSH
86879: EMPTY
86880: LIST
86881: LIST
86882: PUSH
86883: LD_INT 4
86885: PUSH
86886: LD_INT 0
86888: PUSH
86889: EMPTY
86890: LIST
86891: LIST
86892: PUSH
86893: LD_INT 4
86895: PUSH
86896: LD_INT 1
86898: PUSH
86899: EMPTY
86900: LIST
86901: LIST
86902: PUSH
86903: LD_INT 3
86905: PUSH
86906: LD_INT 1
86908: PUSH
86909: EMPTY
86910: LIST
86911: LIST
86912: PUSH
86913: LD_INT 2
86915: PUSH
86916: LD_INT 0
86918: PUSH
86919: EMPTY
86920: LIST
86921: LIST
86922: PUSH
86923: LD_INT 2
86925: PUSH
86926: LD_INT 1
86928: NEG
86929: PUSH
86930: EMPTY
86931: LIST
86932: LIST
86933: PUSH
86934: LD_INT 2
86936: PUSH
86937: LD_INT 2
86939: NEG
86940: PUSH
86941: EMPTY
86942: LIST
86943: LIST
86944: PUSH
86945: LD_INT 4
86947: PUSH
86948: LD_INT 2
86950: PUSH
86951: EMPTY
86952: LIST
86953: LIST
86954: PUSH
86955: LD_INT 4
86957: PUSH
86958: LD_INT 4
86960: PUSH
86961: EMPTY
86962: LIST
86963: LIST
86964: PUSH
86965: LD_INT 4
86967: PUSH
86968: LD_INT 3
86970: PUSH
86971: EMPTY
86972: LIST
86973: LIST
86974: PUSH
86975: LD_INT 5
86977: PUSH
86978: LD_INT 4
86980: PUSH
86981: EMPTY
86982: LIST
86983: LIST
86984: PUSH
86985: LD_INT 5
86987: PUSH
86988: LD_INT 5
86990: PUSH
86991: EMPTY
86992: LIST
86993: LIST
86994: PUSH
86995: LD_INT 4
86997: PUSH
86998: LD_INT 5
87000: PUSH
87001: EMPTY
87002: LIST
87003: LIST
87004: PUSH
87005: LD_INT 3
87007: PUSH
87008: LD_INT 4
87010: PUSH
87011: EMPTY
87012: LIST
87013: LIST
87014: PUSH
87015: LD_INT 3
87017: PUSH
87018: LD_INT 3
87020: PUSH
87021: EMPTY
87022: LIST
87023: LIST
87024: PUSH
87025: LD_INT 5
87027: PUSH
87028: LD_INT 3
87030: PUSH
87031: EMPTY
87032: LIST
87033: LIST
87034: PUSH
87035: LD_INT 3
87037: PUSH
87038: LD_INT 5
87040: PUSH
87041: EMPTY
87042: LIST
87043: LIST
87044: PUSH
87045: LD_INT 0
87047: PUSH
87048: LD_INT 3
87050: PUSH
87051: EMPTY
87052: LIST
87053: LIST
87054: PUSH
87055: LD_INT 0
87057: PUSH
87058: LD_INT 2
87060: PUSH
87061: EMPTY
87062: LIST
87063: LIST
87064: PUSH
87065: LD_INT 1
87067: PUSH
87068: LD_INT 3
87070: PUSH
87071: EMPTY
87072: LIST
87073: LIST
87074: PUSH
87075: LD_INT 1
87077: PUSH
87078: LD_INT 4
87080: PUSH
87081: EMPTY
87082: LIST
87083: LIST
87084: PUSH
87085: LD_INT 0
87087: PUSH
87088: LD_INT 4
87090: PUSH
87091: EMPTY
87092: LIST
87093: LIST
87094: PUSH
87095: LD_INT 1
87097: NEG
87098: PUSH
87099: LD_INT 3
87101: PUSH
87102: EMPTY
87103: LIST
87104: LIST
87105: PUSH
87106: LD_INT 1
87108: NEG
87109: PUSH
87110: LD_INT 2
87112: PUSH
87113: EMPTY
87114: LIST
87115: LIST
87116: PUSH
87117: LD_INT 2
87119: PUSH
87120: LD_INT 4
87122: PUSH
87123: EMPTY
87124: LIST
87125: LIST
87126: PUSH
87127: LD_INT 2
87129: NEG
87130: PUSH
87131: LD_INT 2
87133: PUSH
87134: EMPTY
87135: LIST
87136: LIST
87137: PUSH
87138: LD_INT 4
87140: NEG
87141: PUSH
87142: LD_INT 0
87144: PUSH
87145: EMPTY
87146: LIST
87147: LIST
87148: PUSH
87149: LD_INT 4
87151: NEG
87152: PUSH
87153: LD_INT 1
87155: NEG
87156: PUSH
87157: EMPTY
87158: LIST
87159: LIST
87160: PUSH
87161: LD_INT 3
87163: NEG
87164: PUSH
87165: LD_INT 0
87167: PUSH
87168: EMPTY
87169: LIST
87170: LIST
87171: PUSH
87172: LD_INT 3
87174: NEG
87175: PUSH
87176: LD_INT 1
87178: PUSH
87179: EMPTY
87180: LIST
87181: LIST
87182: PUSH
87183: LD_INT 4
87185: NEG
87186: PUSH
87187: LD_INT 1
87189: PUSH
87190: EMPTY
87191: LIST
87192: LIST
87193: PUSH
87194: LD_INT 5
87196: NEG
87197: PUSH
87198: LD_INT 0
87200: PUSH
87201: EMPTY
87202: LIST
87203: LIST
87204: PUSH
87205: LD_INT 5
87207: NEG
87208: PUSH
87209: LD_INT 1
87211: NEG
87212: PUSH
87213: EMPTY
87214: LIST
87215: LIST
87216: PUSH
87217: LD_INT 5
87219: NEG
87220: PUSH
87221: LD_INT 2
87223: NEG
87224: PUSH
87225: EMPTY
87226: LIST
87227: LIST
87228: PUSH
87229: LD_INT 3
87231: NEG
87232: PUSH
87233: LD_INT 2
87235: PUSH
87236: EMPTY
87237: LIST
87238: LIST
87239: PUSH
87240: EMPTY
87241: LIST
87242: LIST
87243: LIST
87244: LIST
87245: LIST
87246: LIST
87247: LIST
87248: LIST
87249: LIST
87250: LIST
87251: LIST
87252: LIST
87253: LIST
87254: LIST
87255: LIST
87256: LIST
87257: LIST
87258: LIST
87259: LIST
87260: LIST
87261: LIST
87262: LIST
87263: LIST
87264: LIST
87265: LIST
87266: LIST
87267: LIST
87268: LIST
87269: LIST
87270: LIST
87271: LIST
87272: LIST
87273: LIST
87274: LIST
87275: LIST
87276: LIST
87277: LIST
87278: LIST
87279: LIST
87280: LIST
87281: LIST
87282: LIST
87283: LIST
87284: LIST
87285: LIST
87286: ST_TO_ADDR
// end ; end ;
87287: GO 87290
87289: POP
// case btype of b_depot , b_warehouse :
87290: LD_VAR 0 1
87294: PUSH
87295: LD_INT 0
87297: DOUBLE
87298: EQUAL
87299: IFTRUE 87309
87301: LD_INT 1
87303: DOUBLE
87304: EQUAL
87305: IFTRUE 87309
87307: GO 87510
87309: POP
// case nation of nation_american :
87310: LD_VAR 0 5
87314: PUSH
87315: LD_INT 1
87317: DOUBLE
87318: EQUAL
87319: IFTRUE 87323
87321: GO 87379
87323: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
87324: LD_ADDR_VAR 0 9
87328: PUSH
87329: LD_VAR 0 11
87333: PUSH
87334: LD_VAR 0 12
87338: PUSH
87339: LD_VAR 0 13
87343: PUSH
87344: LD_VAR 0 14
87348: PUSH
87349: LD_VAR 0 15
87353: PUSH
87354: LD_VAR 0 16
87358: PUSH
87359: EMPTY
87360: LIST
87361: LIST
87362: LIST
87363: LIST
87364: LIST
87365: LIST
87366: PUSH
87367: LD_VAR 0 4
87371: PUSH
87372: LD_INT 1
87374: PLUS
87375: ARRAY
87376: ST_TO_ADDR
87377: GO 87508
87379: LD_INT 2
87381: DOUBLE
87382: EQUAL
87383: IFTRUE 87387
87385: GO 87443
87387: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
87388: LD_ADDR_VAR 0 9
87392: PUSH
87393: LD_VAR 0 17
87397: PUSH
87398: LD_VAR 0 18
87402: PUSH
87403: LD_VAR 0 19
87407: PUSH
87408: LD_VAR 0 20
87412: PUSH
87413: LD_VAR 0 21
87417: PUSH
87418: LD_VAR 0 22
87422: PUSH
87423: EMPTY
87424: LIST
87425: LIST
87426: LIST
87427: LIST
87428: LIST
87429: LIST
87430: PUSH
87431: LD_VAR 0 4
87435: PUSH
87436: LD_INT 1
87438: PLUS
87439: ARRAY
87440: ST_TO_ADDR
87441: GO 87508
87443: LD_INT 3
87445: DOUBLE
87446: EQUAL
87447: IFTRUE 87451
87449: GO 87507
87451: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
87452: LD_ADDR_VAR 0 9
87456: PUSH
87457: LD_VAR 0 23
87461: PUSH
87462: LD_VAR 0 24
87466: PUSH
87467: LD_VAR 0 25
87471: PUSH
87472: LD_VAR 0 26
87476: PUSH
87477: LD_VAR 0 27
87481: PUSH
87482: LD_VAR 0 28
87486: PUSH
87487: EMPTY
87488: LIST
87489: LIST
87490: LIST
87491: LIST
87492: LIST
87493: LIST
87494: PUSH
87495: LD_VAR 0 4
87499: PUSH
87500: LD_INT 1
87502: PLUS
87503: ARRAY
87504: ST_TO_ADDR
87505: GO 87508
87507: POP
87508: GO 88063
87510: LD_INT 2
87512: DOUBLE
87513: EQUAL
87514: IFTRUE 87524
87516: LD_INT 3
87518: DOUBLE
87519: EQUAL
87520: IFTRUE 87524
87522: GO 87580
87524: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
87525: LD_ADDR_VAR 0 9
87529: PUSH
87530: LD_VAR 0 29
87534: PUSH
87535: LD_VAR 0 30
87539: PUSH
87540: LD_VAR 0 31
87544: PUSH
87545: LD_VAR 0 32
87549: PUSH
87550: LD_VAR 0 33
87554: PUSH
87555: LD_VAR 0 34
87559: PUSH
87560: EMPTY
87561: LIST
87562: LIST
87563: LIST
87564: LIST
87565: LIST
87566: LIST
87567: PUSH
87568: LD_VAR 0 4
87572: PUSH
87573: LD_INT 1
87575: PLUS
87576: ARRAY
87577: ST_TO_ADDR
87578: GO 88063
87580: LD_INT 16
87582: DOUBLE
87583: EQUAL
87584: IFTRUE 87642
87586: LD_INT 17
87588: DOUBLE
87589: EQUAL
87590: IFTRUE 87642
87592: LD_INT 18
87594: DOUBLE
87595: EQUAL
87596: IFTRUE 87642
87598: LD_INT 19
87600: DOUBLE
87601: EQUAL
87602: IFTRUE 87642
87604: LD_INT 22
87606: DOUBLE
87607: EQUAL
87608: IFTRUE 87642
87610: LD_INT 20
87612: DOUBLE
87613: EQUAL
87614: IFTRUE 87642
87616: LD_INT 21
87618: DOUBLE
87619: EQUAL
87620: IFTRUE 87642
87622: LD_INT 23
87624: DOUBLE
87625: EQUAL
87626: IFTRUE 87642
87628: LD_INT 24
87630: DOUBLE
87631: EQUAL
87632: IFTRUE 87642
87634: LD_INT 25
87636: DOUBLE
87637: EQUAL
87638: IFTRUE 87642
87640: GO 87698
87642: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
87643: LD_ADDR_VAR 0 9
87647: PUSH
87648: LD_VAR 0 35
87652: PUSH
87653: LD_VAR 0 36
87657: PUSH
87658: LD_VAR 0 37
87662: PUSH
87663: LD_VAR 0 38
87667: PUSH
87668: LD_VAR 0 39
87672: PUSH
87673: LD_VAR 0 40
87677: PUSH
87678: EMPTY
87679: LIST
87680: LIST
87681: LIST
87682: LIST
87683: LIST
87684: LIST
87685: PUSH
87686: LD_VAR 0 4
87690: PUSH
87691: LD_INT 1
87693: PLUS
87694: ARRAY
87695: ST_TO_ADDR
87696: GO 88063
87698: LD_INT 6
87700: DOUBLE
87701: EQUAL
87702: IFTRUE 87754
87704: LD_INT 7
87706: DOUBLE
87707: EQUAL
87708: IFTRUE 87754
87710: LD_INT 8
87712: DOUBLE
87713: EQUAL
87714: IFTRUE 87754
87716: LD_INT 13
87718: DOUBLE
87719: EQUAL
87720: IFTRUE 87754
87722: LD_INT 12
87724: DOUBLE
87725: EQUAL
87726: IFTRUE 87754
87728: LD_INT 15
87730: DOUBLE
87731: EQUAL
87732: IFTRUE 87754
87734: LD_INT 11
87736: DOUBLE
87737: EQUAL
87738: IFTRUE 87754
87740: LD_INT 14
87742: DOUBLE
87743: EQUAL
87744: IFTRUE 87754
87746: LD_INT 10
87748: DOUBLE
87749: EQUAL
87750: IFTRUE 87754
87752: GO 87810
87754: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
87755: LD_ADDR_VAR 0 9
87759: PUSH
87760: LD_VAR 0 41
87764: PUSH
87765: LD_VAR 0 42
87769: PUSH
87770: LD_VAR 0 43
87774: PUSH
87775: LD_VAR 0 44
87779: PUSH
87780: LD_VAR 0 45
87784: PUSH
87785: LD_VAR 0 46
87789: PUSH
87790: EMPTY
87791: LIST
87792: LIST
87793: LIST
87794: LIST
87795: LIST
87796: LIST
87797: PUSH
87798: LD_VAR 0 4
87802: PUSH
87803: LD_INT 1
87805: PLUS
87806: ARRAY
87807: ST_TO_ADDR
87808: GO 88063
87810: LD_INT 36
87812: DOUBLE
87813: EQUAL
87814: IFTRUE 87818
87816: GO 87874
87818: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87819: LD_ADDR_VAR 0 9
87823: PUSH
87824: LD_VAR 0 47
87828: PUSH
87829: LD_VAR 0 48
87833: PUSH
87834: LD_VAR 0 49
87838: PUSH
87839: LD_VAR 0 50
87843: PUSH
87844: LD_VAR 0 51
87848: PUSH
87849: LD_VAR 0 52
87853: PUSH
87854: EMPTY
87855: LIST
87856: LIST
87857: LIST
87858: LIST
87859: LIST
87860: LIST
87861: PUSH
87862: LD_VAR 0 4
87866: PUSH
87867: LD_INT 1
87869: PLUS
87870: ARRAY
87871: ST_TO_ADDR
87872: GO 88063
87874: LD_INT 4
87876: DOUBLE
87877: EQUAL
87878: IFTRUE 87900
87880: LD_INT 5
87882: DOUBLE
87883: EQUAL
87884: IFTRUE 87900
87886: LD_INT 34
87888: DOUBLE
87889: EQUAL
87890: IFTRUE 87900
87892: LD_INT 37
87894: DOUBLE
87895: EQUAL
87896: IFTRUE 87900
87898: GO 87956
87900: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87901: LD_ADDR_VAR 0 9
87905: PUSH
87906: LD_VAR 0 53
87910: PUSH
87911: LD_VAR 0 54
87915: PUSH
87916: LD_VAR 0 55
87920: PUSH
87921: LD_VAR 0 56
87925: PUSH
87926: LD_VAR 0 57
87930: PUSH
87931: LD_VAR 0 58
87935: PUSH
87936: EMPTY
87937: LIST
87938: LIST
87939: LIST
87940: LIST
87941: LIST
87942: LIST
87943: PUSH
87944: LD_VAR 0 4
87948: PUSH
87949: LD_INT 1
87951: PLUS
87952: ARRAY
87953: ST_TO_ADDR
87954: GO 88063
87956: LD_INT 31
87958: DOUBLE
87959: EQUAL
87960: IFTRUE 88006
87962: LD_INT 32
87964: DOUBLE
87965: EQUAL
87966: IFTRUE 88006
87968: LD_INT 33
87970: DOUBLE
87971: EQUAL
87972: IFTRUE 88006
87974: LD_INT 27
87976: DOUBLE
87977: EQUAL
87978: IFTRUE 88006
87980: LD_INT 26
87982: DOUBLE
87983: EQUAL
87984: IFTRUE 88006
87986: LD_INT 28
87988: DOUBLE
87989: EQUAL
87990: IFTRUE 88006
87992: LD_INT 29
87994: DOUBLE
87995: EQUAL
87996: IFTRUE 88006
87998: LD_INT 30
88000: DOUBLE
88001: EQUAL
88002: IFTRUE 88006
88004: GO 88062
88006: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
88007: LD_ADDR_VAR 0 9
88011: PUSH
88012: LD_VAR 0 59
88016: PUSH
88017: LD_VAR 0 60
88021: PUSH
88022: LD_VAR 0 61
88026: PUSH
88027: LD_VAR 0 62
88031: PUSH
88032: LD_VAR 0 63
88036: PUSH
88037: LD_VAR 0 64
88041: PUSH
88042: EMPTY
88043: LIST
88044: LIST
88045: LIST
88046: LIST
88047: LIST
88048: LIST
88049: PUSH
88050: LD_VAR 0 4
88054: PUSH
88055: LD_INT 1
88057: PLUS
88058: ARRAY
88059: ST_TO_ADDR
88060: GO 88063
88062: POP
// temp_list2 = [ ] ;
88063: LD_ADDR_VAR 0 10
88067: PUSH
88068: EMPTY
88069: ST_TO_ADDR
// for i in temp_list do
88070: LD_ADDR_VAR 0 8
88074: PUSH
88075: LD_VAR 0 9
88079: PUSH
88080: FOR_IN
88081: IFFALSE 88133
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
88083: LD_ADDR_VAR 0 10
88087: PUSH
88088: LD_VAR 0 10
88092: PUSH
88093: LD_VAR 0 8
88097: PUSH
88098: LD_INT 1
88100: ARRAY
88101: PUSH
88102: LD_VAR 0 2
88106: PLUS
88107: PUSH
88108: LD_VAR 0 8
88112: PUSH
88113: LD_INT 2
88115: ARRAY
88116: PUSH
88117: LD_VAR 0 3
88121: PLUS
88122: PUSH
88123: EMPTY
88124: LIST
88125: LIST
88126: PUSH
88127: EMPTY
88128: LIST
88129: ADD
88130: ST_TO_ADDR
88131: GO 88080
88133: POP
88134: POP
// result = temp_list2 ;
88135: LD_ADDR_VAR 0 7
88139: PUSH
88140: LD_VAR 0 10
88144: ST_TO_ADDR
// end ;
88145: LD_VAR 0 7
88149: RET
// export function EnemyInRange ( unit , dist ) ; begin
88150: LD_INT 0
88152: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
88153: LD_ADDR_VAR 0 3
88157: PUSH
88158: LD_VAR 0 1
88162: PPUSH
88163: CALL_OW 255
88167: PPUSH
88168: LD_VAR 0 1
88172: PPUSH
88173: CALL_OW 250
88177: PPUSH
88178: LD_VAR 0 1
88182: PPUSH
88183: CALL_OW 251
88187: PPUSH
88188: LD_VAR 0 2
88192: PPUSH
88193: CALL 61523 0 4
88197: PUSH
88198: LD_INT 4
88200: ARRAY
88201: ST_TO_ADDR
// end ;
88202: LD_VAR 0 3
88206: RET
// export function PlayerSeeMe ( unit ) ; begin
88207: LD_INT 0
88209: PPUSH
// result := See ( your_side , unit ) ;
88210: LD_ADDR_VAR 0 2
88214: PUSH
88215: LD_OWVAR 2
88219: PPUSH
88220: LD_VAR 0 1
88224: PPUSH
88225: CALL_OW 292
88229: ST_TO_ADDR
// end ;
88230: LD_VAR 0 2
88234: RET
// export function ReverseDir ( unit ) ; begin
88235: LD_INT 0
88237: PPUSH
// if not unit then
88238: LD_VAR 0 1
88242: NOT
88243: IFFALSE 88247
// exit ;
88245: GO 88270
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
88247: LD_ADDR_VAR 0 2
88251: PUSH
88252: LD_VAR 0 1
88256: PPUSH
88257: CALL_OW 254
88261: PUSH
88262: LD_INT 3
88264: PLUS
88265: PUSH
88266: LD_INT 6
88268: MOD
88269: ST_TO_ADDR
// end ;
88270: LD_VAR 0 2
88274: RET
// export function ReverseArray ( array ) ; var i ; begin
88275: LD_INT 0
88277: PPUSH
88278: PPUSH
// if not array then
88279: LD_VAR 0 1
88283: NOT
88284: IFFALSE 88288
// exit ;
88286: GO 88343
// result := [ ] ;
88288: LD_ADDR_VAR 0 2
88292: PUSH
88293: EMPTY
88294: ST_TO_ADDR
// for i := array downto 1 do
88295: LD_ADDR_VAR 0 3
88299: PUSH
88300: DOUBLE
88301: LD_VAR 0 1
88305: INC
88306: ST_TO_ADDR
88307: LD_INT 1
88309: PUSH
88310: FOR_DOWNTO
88311: IFFALSE 88341
// result := Join ( result , array [ i ] ) ;
88313: LD_ADDR_VAR 0 2
88317: PUSH
88318: LD_VAR 0 2
88322: PPUSH
88323: LD_VAR 0 1
88327: PUSH
88328: LD_VAR 0 3
88332: ARRAY
88333: PPUSH
88334: CALL 93008 0 2
88338: ST_TO_ADDR
88339: GO 88310
88341: POP
88342: POP
// end ;
88343: LD_VAR 0 2
88347: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
88348: LD_INT 0
88350: PPUSH
88351: PPUSH
88352: PPUSH
88353: PPUSH
88354: PPUSH
88355: PPUSH
// if not unit or not hexes then
88356: LD_VAR 0 1
88360: NOT
88361: PUSH
88362: LD_VAR 0 2
88366: NOT
88367: OR
88368: IFFALSE 88372
// exit ;
88370: GO 88495
// dist := 9999 ;
88372: LD_ADDR_VAR 0 5
88376: PUSH
88377: LD_INT 9999
88379: ST_TO_ADDR
// for i = 1 to hexes do
88380: LD_ADDR_VAR 0 4
88384: PUSH
88385: DOUBLE
88386: LD_INT 1
88388: DEC
88389: ST_TO_ADDR
88390: LD_VAR 0 2
88394: PUSH
88395: FOR_TO
88396: IFFALSE 88483
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
88398: LD_ADDR_VAR 0 6
88402: PUSH
88403: LD_VAR 0 1
88407: PPUSH
88408: LD_VAR 0 2
88412: PUSH
88413: LD_VAR 0 4
88417: ARRAY
88418: PUSH
88419: LD_INT 1
88421: ARRAY
88422: PPUSH
88423: LD_VAR 0 2
88427: PUSH
88428: LD_VAR 0 4
88432: ARRAY
88433: PUSH
88434: LD_INT 2
88436: ARRAY
88437: PPUSH
88438: CALL_OW 297
88442: ST_TO_ADDR
// if tdist < dist then
88443: LD_VAR 0 6
88447: PUSH
88448: LD_VAR 0 5
88452: LESS
88453: IFFALSE 88481
// begin hex := hexes [ i ] ;
88455: LD_ADDR_VAR 0 8
88459: PUSH
88460: LD_VAR 0 2
88464: PUSH
88465: LD_VAR 0 4
88469: ARRAY
88470: ST_TO_ADDR
// dist := tdist ;
88471: LD_ADDR_VAR 0 5
88475: PUSH
88476: LD_VAR 0 6
88480: ST_TO_ADDR
// end ; end ;
88481: GO 88395
88483: POP
88484: POP
// result := hex ;
88485: LD_ADDR_VAR 0 3
88489: PUSH
88490: LD_VAR 0 8
88494: ST_TO_ADDR
// end ;
88495: LD_VAR 0 3
88499: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
88500: LD_INT 0
88502: PPUSH
88503: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
88504: LD_VAR 0 1
88508: NOT
88509: PUSH
88510: LD_VAR 0 1
88514: PUSH
88515: LD_INT 21
88517: PUSH
88518: LD_INT 2
88520: PUSH
88521: EMPTY
88522: LIST
88523: LIST
88524: PUSH
88525: LD_INT 23
88527: PUSH
88528: LD_INT 2
88530: PUSH
88531: EMPTY
88532: LIST
88533: LIST
88534: PUSH
88535: EMPTY
88536: LIST
88537: LIST
88538: PPUSH
88539: CALL_OW 69
88543: IN
88544: NOT
88545: OR
88546: IFFALSE 88550
// exit ;
88548: GO 88597
// for i = 1 to 3 do
88550: LD_ADDR_VAR 0 3
88554: PUSH
88555: DOUBLE
88556: LD_INT 1
88558: DEC
88559: ST_TO_ADDR
88560: LD_INT 3
88562: PUSH
88563: FOR_TO
88564: IFFALSE 88595
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
88566: LD_VAR 0 1
88570: PPUSH
88571: CALL_OW 250
88575: PPUSH
88576: LD_VAR 0 1
88580: PPUSH
88581: CALL_OW 251
88585: PPUSH
88586: LD_INT 1
88588: PPUSH
88589: CALL_OW 453
88593: GO 88563
88595: POP
88596: POP
// end ;
88597: LD_VAR 0 2
88601: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
88602: LD_INT 0
88604: PPUSH
88605: PPUSH
88606: PPUSH
88607: PPUSH
88608: PPUSH
88609: PPUSH
// if not unit or not enemy_unit then
88610: LD_VAR 0 1
88614: NOT
88615: PUSH
88616: LD_VAR 0 2
88620: NOT
88621: OR
88622: IFFALSE 88626
// exit ;
88624: GO 89093
// if GetLives ( i ) < 250 then
88626: LD_VAR 0 4
88630: PPUSH
88631: CALL_OW 256
88635: PUSH
88636: LD_INT 250
88638: LESS
88639: IFFALSE 88652
// begin ComAutodestruct ( i ) ;
88641: LD_VAR 0 4
88645: PPUSH
88646: CALL 88500 0 1
// exit ;
88650: GO 89093
// end ; x := GetX ( enemy_unit ) ;
88652: LD_ADDR_VAR 0 7
88656: PUSH
88657: LD_VAR 0 2
88661: PPUSH
88662: CALL_OW 250
88666: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
88667: LD_ADDR_VAR 0 8
88671: PUSH
88672: LD_VAR 0 2
88676: PPUSH
88677: CALL_OW 251
88681: ST_TO_ADDR
// if not x or not y then
88682: LD_VAR 0 7
88686: NOT
88687: PUSH
88688: LD_VAR 0 8
88692: NOT
88693: OR
88694: IFFALSE 88698
// exit ;
88696: GO 89093
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
88698: LD_ADDR_VAR 0 6
88702: PUSH
88703: LD_VAR 0 7
88707: PPUSH
88708: LD_INT 0
88710: PPUSH
88711: LD_INT 4
88713: PPUSH
88714: CALL_OW 272
88718: PUSH
88719: LD_VAR 0 8
88723: PPUSH
88724: LD_INT 0
88726: PPUSH
88727: LD_INT 4
88729: PPUSH
88730: CALL_OW 273
88734: PUSH
88735: EMPTY
88736: LIST
88737: LIST
88738: PUSH
88739: LD_VAR 0 7
88743: PPUSH
88744: LD_INT 1
88746: PPUSH
88747: LD_INT 4
88749: PPUSH
88750: CALL_OW 272
88754: PUSH
88755: LD_VAR 0 8
88759: PPUSH
88760: LD_INT 1
88762: PPUSH
88763: LD_INT 4
88765: PPUSH
88766: CALL_OW 273
88770: PUSH
88771: EMPTY
88772: LIST
88773: LIST
88774: PUSH
88775: LD_VAR 0 7
88779: PPUSH
88780: LD_INT 2
88782: PPUSH
88783: LD_INT 4
88785: PPUSH
88786: CALL_OW 272
88790: PUSH
88791: LD_VAR 0 8
88795: PPUSH
88796: LD_INT 2
88798: PPUSH
88799: LD_INT 4
88801: PPUSH
88802: CALL_OW 273
88806: PUSH
88807: EMPTY
88808: LIST
88809: LIST
88810: PUSH
88811: LD_VAR 0 7
88815: PPUSH
88816: LD_INT 3
88818: PPUSH
88819: LD_INT 4
88821: PPUSH
88822: CALL_OW 272
88826: PUSH
88827: LD_VAR 0 8
88831: PPUSH
88832: LD_INT 3
88834: PPUSH
88835: LD_INT 4
88837: PPUSH
88838: CALL_OW 273
88842: PUSH
88843: EMPTY
88844: LIST
88845: LIST
88846: PUSH
88847: LD_VAR 0 7
88851: PPUSH
88852: LD_INT 4
88854: PPUSH
88855: LD_INT 4
88857: PPUSH
88858: CALL_OW 272
88862: PUSH
88863: LD_VAR 0 8
88867: PPUSH
88868: LD_INT 4
88870: PPUSH
88871: LD_INT 4
88873: PPUSH
88874: CALL_OW 273
88878: PUSH
88879: EMPTY
88880: LIST
88881: LIST
88882: PUSH
88883: LD_VAR 0 7
88887: PPUSH
88888: LD_INT 5
88890: PPUSH
88891: LD_INT 4
88893: PPUSH
88894: CALL_OW 272
88898: PUSH
88899: LD_VAR 0 8
88903: PPUSH
88904: LD_INT 5
88906: PPUSH
88907: LD_INT 4
88909: PPUSH
88910: CALL_OW 273
88914: PUSH
88915: EMPTY
88916: LIST
88917: LIST
88918: PUSH
88919: EMPTY
88920: LIST
88921: LIST
88922: LIST
88923: LIST
88924: LIST
88925: LIST
88926: ST_TO_ADDR
// for i = tmp downto 1 do
88927: LD_ADDR_VAR 0 4
88931: PUSH
88932: DOUBLE
88933: LD_VAR 0 6
88937: INC
88938: ST_TO_ADDR
88939: LD_INT 1
88941: PUSH
88942: FOR_DOWNTO
88943: IFFALSE 89044
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88945: LD_VAR 0 6
88949: PUSH
88950: LD_VAR 0 4
88954: ARRAY
88955: PUSH
88956: LD_INT 1
88958: ARRAY
88959: PPUSH
88960: LD_VAR 0 6
88964: PUSH
88965: LD_VAR 0 4
88969: ARRAY
88970: PUSH
88971: LD_INT 2
88973: ARRAY
88974: PPUSH
88975: CALL_OW 488
88979: NOT
88980: PUSH
88981: LD_VAR 0 6
88985: PUSH
88986: LD_VAR 0 4
88990: ARRAY
88991: PUSH
88992: LD_INT 1
88994: ARRAY
88995: PPUSH
88996: LD_VAR 0 6
89000: PUSH
89001: LD_VAR 0 4
89005: ARRAY
89006: PUSH
89007: LD_INT 2
89009: ARRAY
89010: PPUSH
89011: CALL_OW 428
89015: PUSH
89016: LD_INT 0
89018: NONEQUAL
89019: OR
89020: IFFALSE 89042
// tmp := Delete ( tmp , i ) ;
89022: LD_ADDR_VAR 0 6
89026: PUSH
89027: LD_VAR 0 6
89031: PPUSH
89032: LD_VAR 0 4
89036: PPUSH
89037: CALL_OW 3
89041: ST_TO_ADDR
89042: GO 88942
89044: POP
89045: POP
// j := GetClosestHex ( unit , tmp ) ;
89046: LD_ADDR_VAR 0 5
89050: PUSH
89051: LD_VAR 0 1
89055: PPUSH
89056: LD_VAR 0 6
89060: PPUSH
89061: CALL 88348 0 2
89065: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
89066: LD_VAR 0 1
89070: PPUSH
89071: LD_VAR 0 5
89075: PUSH
89076: LD_INT 1
89078: ARRAY
89079: PPUSH
89080: LD_VAR 0 5
89084: PUSH
89085: LD_INT 2
89087: ARRAY
89088: PPUSH
89089: CALL_OW 111
// end ;
89093: LD_VAR 0 3
89097: RET
// export function PrepareApemanSoldier ( ) ; begin
89098: LD_INT 0
89100: PPUSH
// uc_nation := 0 ;
89101: LD_ADDR_OWVAR 21
89105: PUSH
89106: LD_INT 0
89108: ST_TO_ADDR
// hc_sex := sex_male ;
89109: LD_ADDR_OWVAR 27
89113: PUSH
89114: LD_INT 1
89116: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
89117: LD_ADDR_OWVAR 28
89121: PUSH
89122: LD_INT 15
89124: ST_TO_ADDR
// hc_gallery :=  ;
89125: LD_ADDR_OWVAR 33
89129: PUSH
89130: LD_STRING 
89132: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89133: LD_ADDR_OWVAR 31
89137: PUSH
89138: LD_INT 0
89140: PPUSH
89141: LD_INT 3
89143: PPUSH
89144: CALL_OW 12
89148: PUSH
89149: LD_INT 0
89151: PPUSH
89152: LD_INT 3
89154: PPUSH
89155: CALL_OW 12
89159: PUSH
89160: LD_INT 0
89162: PUSH
89163: LD_INT 0
89165: PUSH
89166: EMPTY
89167: LIST
89168: LIST
89169: LIST
89170: LIST
89171: ST_TO_ADDR
// end ;
89172: LD_VAR 0 1
89176: RET
// export function PrepareApemanEngineer ( ) ; begin
89177: LD_INT 0
89179: PPUSH
// uc_nation := 0 ;
89180: LD_ADDR_OWVAR 21
89184: PUSH
89185: LD_INT 0
89187: ST_TO_ADDR
// hc_sex := sex_male ;
89188: LD_ADDR_OWVAR 27
89192: PUSH
89193: LD_INT 1
89195: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
89196: LD_ADDR_OWVAR 28
89200: PUSH
89201: LD_INT 16
89203: ST_TO_ADDR
// hc_gallery :=  ;
89204: LD_ADDR_OWVAR 33
89208: PUSH
89209: LD_STRING 
89211: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89212: LD_ADDR_OWVAR 31
89216: PUSH
89217: LD_INT 0
89219: PPUSH
89220: LD_INT 3
89222: PPUSH
89223: CALL_OW 12
89227: PUSH
89228: LD_INT 0
89230: PPUSH
89231: LD_INT 3
89233: PPUSH
89234: CALL_OW 12
89238: PUSH
89239: LD_INT 0
89241: PUSH
89242: LD_INT 0
89244: PUSH
89245: EMPTY
89246: LIST
89247: LIST
89248: LIST
89249: LIST
89250: ST_TO_ADDR
// end ;
89251: LD_VAR 0 1
89255: RET
// export function PrepareApeman ( agressivity ) ; begin
89256: LD_INT 0
89258: PPUSH
// uc_side := 0 ;
89259: LD_ADDR_OWVAR 20
89263: PUSH
89264: LD_INT 0
89266: ST_TO_ADDR
// uc_nation := 0 ;
89267: LD_ADDR_OWVAR 21
89271: PUSH
89272: LD_INT 0
89274: ST_TO_ADDR
// hc_sex := sex_male ;
89275: LD_ADDR_OWVAR 27
89279: PUSH
89280: LD_INT 1
89282: ST_TO_ADDR
// hc_class := class_apeman ;
89283: LD_ADDR_OWVAR 28
89287: PUSH
89288: LD_INT 12
89290: ST_TO_ADDR
// hc_gallery :=  ;
89291: LD_ADDR_OWVAR 33
89295: PUSH
89296: LD_STRING 
89298: ST_TO_ADDR
// if agressivity = 0 then
89299: LD_VAR 0 1
89303: PUSH
89304: LD_INT 0
89306: EQUAL
89307: IFFALSE 89319
// hc_agressivity := 0 else
89309: LD_ADDR_OWVAR 35
89313: PUSH
89314: LD_INT 0
89316: ST_TO_ADDR
89317: GO 89340
// hc_agressivity := rand ( - agressivity , agressivity ) ;
89319: LD_ADDR_OWVAR 35
89323: PUSH
89324: LD_VAR 0 1
89328: NEG
89329: PPUSH
89330: LD_VAR 0 1
89334: PPUSH
89335: CALL_OW 12
89339: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89340: LD_ADDR_OWVAR 31
89344: PUSH
89345: LD_INT 0
89347: PPUSH
89348: LD_INT 3
89350: PPUSH
89351: CALL_OW 12
89355: PUSH
89356: LD_INT 0
89358: PPUSH
89359: LD_INT 3
89361: PPUSH
89362: CALL_OW 12
89366: PUSH
89367: LD_INT 0
89369: PUSH
89370: LD_INT 0
89372: PUSH
89373: EMPTY
89374: LIST
89375: LIST
89376: LIST
89377: LIST
89378: ST_TO_ADDR
// end ;
89379: LD_VAR 0 2
89383: RET
// export function PrepareTiger ( agressivity ) ; begin
89384: LD_INT 0
89386: PPUSH
// uc_side := 0 ;
89387: LD_ADDR_OWVAR 20
89391: PUSH
89392: LD_INT 0
89394: ST_TO_ADDR
// uc_nation := 0 ;
89395: LD_ADDR_OWVAR 21
89399: PUSH
89400: LD_INT 0
89402: ST_TO_ADDR
// hc_class := class_tiger ;
89403: LD_ADDR_OWVAR 28
89407: PUSH
89408: LD_INT 14
89410: ST_TO_ADDR
// hc_gallery :=  ;
89411: LD_ADDR_OWVAR 33
89415: PUSH
89416: LD_STRING 
89418: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
89419: LD_ADDR_OWVAR 35
89423: PUSH
89424: LD_VAR 0 1
89428: NEG
89429: PPUSH
89430: LD_VAR 0 1
89434: PPUSH
89435: CALL_OW 12
89439: ST_TO_ADDR
// end ;
89440: LD_VAR 0 2
89444: RET
// export function PrepareEnchidna ( ) ; begin
89445: LD_INT 0
89447: PPUSH
// uc_side := 0 ;
89448: LD_ADDR_OWVAR 20
89452: PUSH
89453: LD_INT 0
89455: ST_TO_ADDR
// uc_nation := 0 ;
89456: LD_ADDR_OWVAR 21
89460: PUSH
89461: LD_INT 0
89463: ST_TO_ADDR
// hc_class := class_baggie ;
89464: LD_ADDR_OWVAR 28
89468: PUSH
89469: LD_INT 13
89471: ST_TO_ADDR
// hc_gallery :=  ;
89472: LD_ADDR_OWVAR 33
89476: PUSH
89477: LD_STRING 
89479: ST_TO_ADDR
// end ;
89480: LD_VAR 0 1
89484: RET
// export function PrepareFrog ( ) ; begin
89485: LD_INT 0
89487: PPUSH
// uc_side := 0 ;
89488: LD_ADDR_OWVAR 20
89492: PUSH
89493: LD_INT 0
89495: ST_TO_ADDR
// uc_nation := 0 ;
89496: LD_ADDR_OWVAR 21
89500: PUSH
89501: LD_INT 0
89503: ST_TO_ADDR
// hc_class := class_frog ;
89504: LD_ADDR_OWVAR 28
89508: PUSH
89509: LD_INT 19
89511: ST_TO_ADDR
// hc_gallery :=  ;
89512: LD_ADDR_OWVAR 33
89516: PUSH
89517: LD_STRING 
89519: ST_TO_ADDR
// end ;
89520: LD_VAR 0 1
89524: RET
// export function PrepareFish ( ) ; begin
89525: LD_INT 0
89527: PPUSH
// uc_side := 0 ;
89528: LD_ADDR_OWVAR 20
89532: PUSH
89533: LD_INT 0
89535: ST_TO_ADDR
// uc_nation := 0 ;
89536: LD_ADDR_OWVAR 21
89540: PUSH
89541: LD_INT 0
89543: ST_TO_ADDR
// hc_class := class_fish ;
89544: LD_ADDR_OWVAR 28
89548: PUSH
89549: LD_INT 20
89551: ST_TO_ADDR
// hc_gallery :=  ;
89552: LD_ADDR_OWVAR 33
89556: PUSH
89557: LD_STRING 
89559: ST_TO_ADDR
// end ;
89560: LD_VAR 0 1
89564: RET
// export function PrepareBird ( ) ; begin
89565: LD_INT 0
89567: PPUSH
// uc_side := 0 ;
89568: LD_ADDR_OWVAR 20
89572: PUSH
89573: LD_INT 0
89575: ST_TO_ADDR
// uc_nation := 0 ;
89576: LD_ADDR_OWVAR 21
89580: PUSH
89581: LD_INT 0
89583: ST_TO_ADDR
// hc_class := class_phororhacos ;
89584: LD_ADDR_OWVAR 28
89588: PUSH
89589: LD_INT 18
89591: ST_TO_ADDR
// hc_gallery :=  ;
89592: LD_ADDR_OWVAR 33
89596: PUSH
89597: LD_STRING 
89599: ST_TO_ADDR
// end ;
89600: LD_VAR 0 1
89604: RET
// export function PrepareHorse ( ) ; begin
89605: LD_INT 0
89607: PPUSH
// uc_side := 0 ;
89608: LD_ADDR_OWVAR 20
89612: PUSH
89613: LD_INT 0
89615: ST_TO_ADDR
// uc_nation := 0 ;
89616: LD_ADDR_OWVAR 21
89620: PUSH
89621: LD_INT 0
89623: ST_TO_ADDR
// hc_class := class_horse ;
89624: LD_ADDR_OWVAR 28
89628: PUSH
89629: LD_INT 21
89631: ST_TO_ADDR
// hc_gallery :=  ;
89632: LD_ADDR_OWVAR 33
89636: PUSH
89637: LD_STRING 
89639: ST_TO_ADDR
// end ;
89640: LD_VAR 0 1
89644: RET
// export function PrepareMastodont ( ) ; begin
89645: LD_INT 0
89647: PPUSH
// uc_side := 0 ;
89648: LD_ADDR_OWVAR 20
89652: PUSH
89653: LD_INT 0
89655: ST_TO_ADDR
// uc_nation := 0 ;
89656: LD_ADDR_OWVAR 21
89660: PUSH
89661: LD_INT 0
89663: ST_TO_ADDR
// vc_chassis := class_mastodont ;
89664: LD_ADDR_OWVAR 37
89668: PUSH
89669: LD_INT 31
89671: ST_TO_ADDR
// vc_control := control_rider ;
89672: LD_ADDR_OWVAR 38
89676: PUSH
89677: LD_INT 4
89679: ST_TO_ADDR
// end ;
89680: LD_VAR 0 1
89684: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
89685: LD_INT 0
89687: PPUSH
89688: PPUSH
89689: PPUSH
// uc_side = 0 ;
89690: LD_ADDR_OWVAR 20
89694: PUSH
89695: LD_INT 0
89697: ST_TO_ADDR
// uc_nation = 0 ;
89698: LD_ADDR_OWVAR 21
89702: PUSH
89703: LD_INT 0
89705: ST_TO_ADDR
// InitHc_All ( ) ;
89706: CALL_OW 584
// InitVc ;
89710: CALL_OW 20
// if mastodonts then
89714: LD_VAR 0 6
89718: IFFALSE 89785
// for i = 1 to mastodonts do
89720: LD_ADDR_VAR 0 11
89724: PUSH
89725: DOUBLE
89726: LD_INT 1
89728: DEC
89729: ST_TO_ADDR
89730: LD_VAR 0 6
89734: PUSH
89735: FOR_TO
89736: IFFALSE 89783
// begin vc_chassis := 31 ;
89738: LD_ADDR_OWVAR 37
89742: PUSH
89743: LD_INT 31
89745: ST_TO_ADDR
// vc_control := control_rider ;
89746: LD_ADDR_OWVAR 38
89750: PUSH
89751: LD_INT 4
89753: ST_TO_ADDR
// animal := CreateVehicle ;
89754: LD_ADDR_VAR 0 12
89758: PUSH
89759: CALL_OW 45
89763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89764: LD_VAR 0 12
89768: PPUSH
89769: LD_VAR 0 8
89773: PPUSH
89774: LD_INT 0
89776: PPUSH
89777: CALL 91913 0 3
// end ;
89781: GO 89735
89783: POP
89784: POP
// if horses then
89785: LD_VAR 0 5
89789: IFFALSE 89856
// for i = 1 to horses do
89791: LD_ADDR_VAR 0 11
89795: PUSH
89796: DOUBLE
89797: LD_INT 1
89799: DEC
89800: ST_TO_ADDR
89801: LD_VAR 0 5
89805: PUSH
89806: FOR_TO
89807: IFFALSE 89854
// begin hc_class := 21 ;
89809: LD_ADDR_OWVAR 28
89813: PUSH
89814: LD_INT 21
89816: ST_TO_ADDR
// hc_gallery :=  ;
89817: LD_ADDR_OWVAR 33
89821: PUSH
89822: LD_STRING 
89824: ST_TO_ADDR
// animal := CreateHuman ;
89825: LD_ADDR_VAR 0 12
89829: PUSH
89830: CALL_OW 44
89834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89835: LD_VAR 0 12
89839: PPUSH
89840: LD_VAR 0 8
89844: PPUSH
89845: LD_INT 0
89847: PPUSH
89848: CALL 91913 0 3
// end ;
89852: GO 89806
89854: POP
89855: POP
// if birds then
89856: LD_VAR 0 1
89860: IFFALSE 89927
// for i = 1 to birds do
89862: LD_ADDR_VAR 0 11
89866: PUSH
89867: DOUBLE
89868: LD_INT 1
89870: DEC
89871: ST_TO_ADDR
89872: LD_VAR 0 1
89876: PUSH
89877: FOR_TO
89878: IFFALSE 89925
// begin hc_class := 18 ;
89880: LD_ADDR_OWVAR 28
89884: PUSH
89885: LD_INT 18
89887: ST_TO_ADDR
// hc_gallery =  ;
89888: LD_ADDR_OWVAR 33
89892: PUSH
89893: LD_STRING 
89895: ST_TO_ADDR
// animal := CreateHuman ;
89896: LD_ADDR_VAR 0 12
89900: PUSH
89901: CALL_OW 44
89905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89906: LD_VAR 0 12
89910: PPUSH
89911: LD_VAR 0 8
89915: PPUSH
89916: LD_INT 0
89918: PPUSH
89919: CALL 91913 0 3
// end ;
89923: GO 89877
89925: POP
89926: POP
// if tigers then
89927: LD_VAR 0 2
89931: IFFALSE 90015
// for i = 1 to tigers do
89933: LD_ADDR_VAR 0 11
89937: PUSH
89938: DOUBLE
89939: LD_INT 1
89941: DEC
89942: ST_TO_ADDR
89943: LD_VAR 0 2
89947: PUSH
89948: FOR_TO
89949: IFFALSE 90013
// begin hc_class = class_tiger ;
89951: LD_ADDR_OWVAR 28
89955: PUSH
89956: LD_INT 14
89958: ST_TO_ADDR
// hc_gallery =  ;
89959: LD_ADDR_OWVAR 33
89963: PUSH
89964: LD_STRING 
89966: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89967: LD_ADDR_OWVAR 35
89971: PUSH
89972: LD_INT 7
89974: NEG
89975: PPUSH
89976: LD_INT 7
89978: PPUSH
89979: CALL_OW 12
89983: ST_TO_ADDR
// animal := CreateHuman ;
89984: LD_ADDR_VAR 0 12
89988: PUSH
89989: CALL_OW 44
89993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89994: LD_VAR 0 12
89998: PPUSH
89999: LD_VAR 0 8
90003: PPUSH
90004: LD_INT 0
90006: PPUSH
90007: CALL 91913 0 3
// end ;
90011: GO 89948
90013: POP
90014: POP
// if apemans then
90015: LD_VAR 0 3
90019: IFFALSE 90142
// for i = 1 to apemans do
90021: LD_ADDR_VAR 0 11
90025: PUSH
90026: DOUBLE
90027: LD_INT 1
90029: DEC
90030: ST_TO_ADDR
90031: LD_VAR 0 3
90035: PUSH
90036: FOR_TO
90037: IFFALSE 90140
// begin hc_class = class_apeman ;
90039: LD_ADDR_OWVAR 28
90043: PUSH
90044: LD_INT 12
90046: ST_TO_ADDR
// hc_gallery =  ;
90047: LD_ADDR_OWVAR 33
90051: PUSH
90052: LD_STRING 
90054: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
90055: LD_ADDR_OWVAR 35
90059: PUSH
90060: LD_INT 2
90062: NEG
90063: PPUSH
90064: LD_INT 2
90066: PPUSH
90067: CALL_OW 12
90071: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
90072: LD_ADDR_OWVAR 31
90076: PUSH
90077: LD_INT 1
90079: PPUSH
90080: LD_INT 3
90082: PPUSH
90083: CALL_OW 12
90087: PUSH
90088: LD_INT 1
90090: PPUSH
90091: LD_INT 3
90093: PPUSH
90094: CALL_OW 12
90098: PUSH
90099: LD_INT 0
90101: PUSH
90102: LD_INT 0
90104: PUSH
90105: EMPTY
90106: LIST
90107: LIST
90108: LIST
90109: LIST
90110: ST_TO_ADDR
// animal := CreateHuman ;
90111: LD_ADDR_VAR 0 12
90115: PUSH
90116: CALL_OW 44
90120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90121: LD_VAR 0 12
90125: PPUSH
90126: LD_VAR 0 8
90130: PPUSH
90131: LD_INT 0
90133: PPUSH
90134: CALL 91913 0 3
// end ;
90138: GO 90036
90140: POP
90141: POP
// if enchidnas then
90142: LD_VAR 0 4
90146: IFFALSE 90213
// for i = 1 to enchidnas do
90148: LD_ADDR_VAR 0 11
90152: PUSH
90153: DOUBLE
90154: LD_INT 1
90156: DEC
90157: ST_TO_ADDR
90158: LD_VAR 0 4
90162: PUSH
90163: FOR_TO
90164: IFFALSE 90211
// begin hc_class = 13 ;
90166: LD_ADDR_OWVAR 28
90170: PUSH
90171: LD_INT 13
90173: ST_TO_ADDR
// hc_gallery =  ;
90174: LD_ADDR_OWVAR 33
90178: PUSH
90179: LD_STRING 
90181: ST_TO_ADDR
// animal := CreateHuman ;
90182: LD_ADDR_VAR 0 12
90186: PUSH
90187: CALL_OW 44
90191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90192: LD_VAR 0 12
90196: PPUSH
90197: LD_VAR 0 8
90201: PPUSH
90202: LD_INT 0
90204: PPUSH
90205: CALL 91913 0 3
// end ;
90209: GO 90163
90211: POP
90212: POP
// if fishes then
90213: LD_VAR 0 7
90217: IFFALSE 90284
// for i = 1 to fishes do
90219: LD_ADDR_VAR 0 11
90223: PUSH
90224: DOUBLE
90225: LD_INT 1
90227: DEC
90228: ST_TO_ADDR
90229: LD_VAR 0 7
90233: PUSH
90234: FOR_TO
90235: IFFALSE 90282
// begin hc_class = 20 ;
90237: LD_ADDR_OWVAR 28
90241: PUSH
90242: LD_INT 20
90244: ST_TO_ADDR
// hc_gallery =  ;
90245: LD_ADDR_OWVAR 33
90249: PUSH
90250: LD_STRING 
90252: ST_TO_ADDR
// animal := CreateHuman ;
90253: LD_ADDR_VAR 0 12
90257: PUSH
90258: CALL_OW 44
90262: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
90263: LD_VAR 0 12
90267: PPUSH
90268: LD_VAR 0 9
90272: PPUSH
90273: LD_INT 0
90275: PPUSH
90276: CALL 91913 0 3
// end ;
90280: GO 90234
90282: POP
90283: POP
// end ;
90284: LD_VAR 0 10
90288: RET
// export function WantHeal ( sci , unit ) ; begin
90289: LD_INT 0
90291: PPUSH
// if GetTaskList ( sci ) > 0 then
90292: LD_VAR 0 1
90296: PPUSH
90297: CALL_OW 437
90301: PUSH
90302: LD_INT 0
90304: GREATER
90305: IFFALSE 90375
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
90307: LD_VAR 0 1
90311: PPUSH
90312: CALL_OW 437
90316: PUSH
90317: LD_INT 1
90319: ARRAY
90320: PUSH
90321: LD_INT 1
90323: ARRAY
90324: PUSH
90325: LD_STRING l
90327: EQUAL
90328: PUSH
90329: LD_VAR 0 1
90333: PPUSH
90334: CALL_OW 437
90338: PUSH
90339: LD_INT 1
90341: ARRAY
90342: PUSH
90343: LD_INT 4
90345: ARRAY
90346: PUSH
90347: LD_VAR 0 2
90351: EQUAL
90352: AND
90353: IFFALSE 90365
// result := true else
90355: LD_ADDR_VAR 0 3
90359: PUSH
90360: LD_INT 1
90362: ST_TO_ADDR
90363: GO 90373
// result := false ;
90365: LD_ADDR_VAR 0 3
90369: PUSH
90370: LD_INT 0
90372: ST_TO_ADDR
// end else
90373: GO 90383
// result := false ;
90375: LD_ADDR_VAR 0 3
90379: PUSH
90380: LD_INT 0
90382: ST_TO_ADDR
// end ;
90383: LD_VAR 0 3
90387: RET
// export function HealTarget ( sci ) ; begin
90388: LD_INT 0
90390: PPUSH
// if not sci then
90391: LD_VAR 0 1
90395: NOT
90396: IFFALSE 90400
// exit ;
90398: GO 90465
// result := 0 ;
90400: LD_ADDR_VAR 0 2
90404: PUSH
90405: LD_INT 0
90407: ST_TO_ADDR
// if GetTaskList ( sci ) then
90408: LD_VAR 0 1
90412: PPUSH
90413: CALL_OW 437
90417: IFFALSE 90465
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
90419: LD_VAR 0 1
90423: PPUSH
90424: CALL_OW 437
90428: PUSH
90429: LD_INT 1
90431: ARRAY
90432: PUSH
90433: LD_INT 1
90435: ARRAY
90436: PUSH
90437: LD_STRING l
90439: EQUAL
90440: IFFALSE 90465
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
90442: LD_ADDR_VAR 0 2
90446: PUSH
90447: LD_VAR 0 1
90451: PPUSH
90452: CALL_OW 437
90456: PUSH
90457: LD_INT 1
90459: ARRAY
90460: PUSH
90461: LD_INT 4
90463: ARRAY
90464: ST_TO_ADDR
// end ;
90465: LD_VAR 0 2
90469: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
90470: LD_INT 0
90472: PPUSH
90473: PPUSH
90474: PPUSH
90475: PPUSH
// if not base_units then
90476: LD_VAR 0 1
90480: NOT
90481: IFFALSE 90485
// exit ;
90483: GO 90572
// result := false ;
90485: LD_ADDR_VAR 0 2
90489: PUSH
90490: LD_INT 0
90492: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
90493: LD_ADDR_VAR 0 5
90497: PUSH
90498: LD_VAR 0 1
90502: PPUSH
90503: LD_INT 21
90505: PUSH
90506: LD_INT 3
90508: PUSH
90509: EMPTY
90510: LIST
90511: LIST
90512: PPUSH
90513: CALL_OW 72
90517: ST_TO_ADDR
// if not tmp then
90518: LD_VAR 0 5
90522: NOT
90523: IFFALSE 90527
// exit ;
90525: GO 90572
// for i in tmp do
90527: LD_ADDR_VAR 0 3
90531: PUSH
90532: LD_VAR 0 5
90536: PUSH
90537: FOR_IN
90538: IFFALSE 90570
// begin result := EnemyInRange ( i , 22 ) ;
90540: LD_ADDR_VAR 0 2
90544: PUSH
90545: LD_VAR 0 3
90549: PPUSH
90550: LD_INT 22
90552: PPUSH
90553: CALL 88150 0 2
90557: ST_TO_ADDR
// if result then
90558: LD_VAR 0 2
90562: IFFALSE 90568
// exit ;
90564: POP
90565: POP
90566: GO 90572
// end ;
90568: GO 90537
90570: POP
90571: POP
// end ;
90572: LD_VAR 0 2
90576: RET
// export function FilterByTag ( units , tag ) ; begin
90577: LD_INT 0
90579: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
90580: LD_ADDR_VAR 0 3
90584: PUSH
90585: LD_VAR 0 1
90589: PPUSH
90590: LD_INT 120
90592: PUSH
90593: LD_VAR 0 2
90597: PUSH
90598: EMPTY
90599: LIST
90600: LIST
90601: PPUSH
90602: CALL_OW 72
90606: ST_TO_ADDR
// end ;
90607: LD_VAR 0 3
90611: RET
// export function IsDriver ( un ) ; begin
90612: LD_INT 0
90614: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
90615: LD_ADDR_VAR 0 2
90619: PUSH
90620: LD_VAR 0 1
90624: PUSH
90625: LD_INT 55
90627: PUSH
90628: EMPTY
90629: LIST
90630: PPUSH
90631: CALL_OW 69
90635: IN
90636: ST_TO_ADDR
// end ;
90637: LD_VAR 0 2
90641: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
90642: LD_INT 0
90644: PPUSH
90645: PPUSH
// list := [ ] ;
90646: LD_ADDR_VAR 0 5
90650: PUSH
90651: EMPTY
90652: ST_TO_ADDR
// case d of 0 :
90653: LD_VAR 0 3
90657: PUSH
90658: LD_INT 0
90660: DOUBLE
90661: EQUAL
90662: IFTRUE 90666
90664: GO 90799
90666: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
90667: LD_ADDR_VAR 0 5
90671: PUSH
90672: LD_VAR 0 1
90676: PUSH
90677: LD_INT 4
90679: MINUS
90680: PUSH
90681: LD_VAR 0 2
90685: PUSH
90686: LD_INT 4
90688: MINUS
90689: PUSH
90690: LD_INT 2
90692: PUSH
90693: EMPTY
90694: LIST
90695: LIST
90696: LIST
90697: PUSH
90698: LD_VAR 0 1
90702: PUSH
90703: LD_INT 3
90705: MINUS
90706: PUSH
90707: LD_VAR 0 2
90711: PUSH
90712: LD_INT 1
90714: PUSH
90715: EMPTY
90716: LIST
90717: LIST
90718: LIST
90719: PUSH
90720: LD_VAR 0 1
90724: PUSH
90725: LD_INT 4
90727: PLUS
90728: PUSH
90729: LD_VAR 0 2
90733: PUSH
90734: LD_INT 4
90736: PUSH
90737: EMPTY
90738: LIST
90739: LIST
90740: LIST
90741: PUSH
90742: LD_VAR 0 1
90746: PUSH
90747: LD_INT 3
90749: PLUS
90750: PUSH
90751: LD_VAR 0 2
90755: PUSH
90756: LD_INT 3
90758: PLUS
90759: PUSH
90760: LD_INT 5
90762: PUSH
90763: EMPTY
90764: LIST
90765: LIST
90766: LIST
90767: PUSH
90768: LD_VAR 0 1
90772: PUSH
90773: LD_VAR 0 2
90777: PUSH
90778: LD_INT 4
90780: PLUS
90781: PUSH
90782: LD_INT 0
90784: PUSH
90785: EMPTY
90786: LIST
90787: LIST
90788: LIST
90789: PUSH
90790: EMPTY
90791: LIST
90792: LIST
90793: LIST
90794: LIST
90795: LIST
90796: ST_TO_ADDR
// end ; 1 :
90797: GO 91497
90799: LD_INT 1
90801: DOUBLE
90802: EQUAL
90803: IFTRUE 90807
90805: GO 90940
90807: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90808: LD_ADDR_VAR 0 5
90812: PUSH
90813: LD_VAR 0 1
90817: PUSH
90818: LD_VAR 0 2
90822: PUSH
90823: LD_INT 4
90825: MINUS
90826: PUSH
90827: LD_INT 3
90829: PUSH
90830: EMPTY
90831: LIST
90832: LIST
90833: LIST
90834: PUSH
90835: LD_VAR 0 1
90839: PUSH
90840: LD_INT 3
90842: MINUS
90843: PUSH
90844: LD_VAR 0 2
90848: PUSH
90849: LD_INT 3
90851: MINUS
90852: PUSH
90853: LD_INT 2
90855: PUSH
90856: EMPTY
90857: LIST
90858: LIST
90859: LIST
90860: PUSH
90861: LD_VAR 0 1
90865: PUSH
90866: LD_INT 4
90868: MINUS
90869: PUSH
90870: LD_VAR 0 2
90874: PUSH
90875: LD_INT 1
90877: PUSH
90878: EMPTY
90879: LIST
90880: LIST
90881: LIST
90882: PUSH
90883: LD_VAR 0 1
90887: PUSH
90888: LD_VAR 0 2
90892: PUSH
90893: LD_INT 3
90895: PLUS
90896: PUSH
90897: LD_INT 0
90899: PUSH
90900: EMPTY
90901: LIST
90902: LIST
90903: LIST
90904: PUSH
90905: LD_VAR 0 1
90909: PUSH
90910: LD_INT 4
90912: PLUS
90913: PUSH
90914: LD_VAR 0 2
90918: PUSH
90919: LD_INT 4
90921: PLUS
90922: PUSH
90923: LD_INT 5
90925: PUSH
90926: EMPTY
90927: LIST
90928: LIST
90929: LIST
90930: PUSH
90931: EMPTY
90932: LIST
90933: LIST
90934: LIST
90935: LIST
90936: LIST
90937: ST_TO_ADDR
// end ; 2 :
90938: GO 91497
90940: LD_INT 2
90942: DOUBLE
90943: EQUAL
90944: IFTRUE 90948
90946: GO 91077
90948: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90949: LD_ADDR_VAR 0 5
90953: PUSH
90954: LD_VAR 0 1
90958: PUSH
90959: LD_VAR 0 2
90963: PUSH
90964: LD_INT 3
90966: MINUS
90967: PUSH
90968: LD_INT 3
90970: PUSH
90971: EMPTY
90972: LIST
90973: LIST
90974: LIST
90975: PUSH
90976: LD_VAR 0 1
90980: PUSH
90981: LD_INT 4
90983: PLUS
90984: PUSH
90985: LD_VAR 0 2
90989: PUSH
90990: LD_INT 4
90992: PUSH
90993: EMPTY
90994: LIST
90995: LIST
90996: LIST
90997: PUSH
90998: LD_VAR 0 1
91002: PUSH
91003: LD_VAR 0 2
91007: PUSH
91008: LD_INT 4
91010: PLUS
91011: PUSH
91012: LD_INT 0
91014: PUSH
91015: EMPTY
91016: LIST
91017: LIST
91018: LIST
91019: PUSH
91020: LD_VAR 0 1
91024: PUSH
91025: LD_INT 3
91027: MINUS
91028: PUSH
91029: LD_VAR 0 2
91033: PUSH
91034: LD_INT 1
91036: PUSH
91037: EMPTY
91038: LIST
91039: LIST
91040: LIST
91041: PUSH
91042: LD_VAR 0 1
91046: PUSH
91047: LD_INT 4
91049: MINUS
91050: PUSH
91051: LD_VAR 0 2
91055: PUSH
91056: LD_INT 4
91058: MINUS
91059: PUSH
91060: LD_INT 2
91062: PUSH
91063: EMPTY
91064: LIST
91065: LIST
91066: LIST
91067: PUSH
91068: EMPTY
91069: LIST
91070: LIST
91071: LIST
91072: LIST
91073: LIST
91074: ST_TO_ADDR
// end ; 3 :
91075: GO 91497
91077: LD_INT 3
91079: DOUBLE
91080: EQUAL
91081: IFTRUE 91085
91083: GO 91218
91085: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
91086: LD_ADDR_VAR 0 5
91090: PUSH
91091: LD_VAR 0 1
91095: PUSH
91096: LD_INT 3
91098: PLUS
91099: PUSH
91100: LD_VAR 0 2
91104: PUSH
91105: LD_INT 4
91107: PUSH
91108: EMPTY
91109: LIST
91110: LIST
91111: LIST
91112: PUSH
91113: LD_VAR 0 1
91117: PUSH
91118: LD_INT 4
91120: PLUS
91121: PUSH
91122: LD_VAR 0 2
91126: PUSH
91127: LD_INT 4
91129: PLUS
91130: PUSH
91131: LD_INT 5
91133: PUSH
91134: EMPTY
91135: LIST
91136: LIST
91137: LIST
91138: PUSH
91139: LD_VAR 0 1
91143: PUSH
91144: LD_INT 4
91146: MINUS
91147: PUSH
91148: LD_VAR 0 2
91152: PUSH
91153: LD_INT 1
91155: PUSH
91156: EMPTY
91157: LIST
91158: LIST
91159: LIST
91160: PUSH
91161: LD_VAR 0 1
91165: PUSH
91166: LD_VAR 0 2
91170: PUSH
91171: LD_INT 4
91173: MINUS
91174: PUSH
91175: LD_INT 3
91177: PUSH
91178: EMPTY
91179: LIST
91180: LIST
91181: LIST
91182: PUSH
91183: LD_VAR 0 1
91187: PUSH
91188: LD_INT 3
91190: MINUS
91191: PUSH
91192: LD_VAR 0 2
91196: PUSH
91197: LD_INT 3
91199: MINUS
91200: PUSH
91201: LD_INT 2
91203: PUSH
91204: EMPTY
91205: LIST
91206: LIST
91207: LIST
91208: PUSH
91209: EMPTY
91210: LIST
91211: LIST
91212: LIST
91213: LIST
91214: LIST
91215: ST_TO_ADDR
// end ; 4 :
91216: GO 91497
91218: LD_INT 4
91220: DOUBLE
91221: EQUAL
91222: IFTRUE 91226
91224: GO 91359
91226: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
91227: LD_ADDR_VAR 0 5
91231: PUSH
91232: LD_VAR 0 1
91236: PUSH
91237: LD_VAR 0 2
91241: PUSH
91242: LD_INT 4
91244: PLUS
91245: PUSH
91246: LD_INT 0
91248: PUSH
91249: EMPTY
91250: LIST
91251: LIST
91252: LIST
91253: PUSH
91254: LD_VAR 0 1
91258: PUSH
91259: LD_INT 3
91261: PLUS
91262: PUSH
91263: LD_VAR 0 2
91267: PUSH
91268: LD_INT 3
91270: PLUS
91271: PUSH
91272: LD_INT 5
91274: PUSH
91275: EMPTY
91276: LIST
91277: LIST
91278: LIST
91279: PUSH
91280: LD_VAR 0 1
91284: PUSH
91285: LD_INT 4
91287: PLUS
91288: PUSH
91289: LD_VAR 0 2
91293: PUSH
91294: LD_INT 4
91296: PUSH
91297: EMPTY
91298: LIST
91299: LIST
91300: LIST
91301: PUSH
91302: LD_VAR 0 1
91306: PUSH
91307: LD_VAR 0 2
91311: PUSH
91312: LD_INT 3
91314: MINUS
91315: PUSH
91316: LD_INT 3
91318: PUSH
91319: EMPTY
91320: LIST
91321: LIST
91322: LIST
91323: PUSH
91324: LD_VAR 0 1
91328: PUSH
91329: LD_INT 4
91331: MINUS
91332: PUSH
91333: LD_VAR 0 2
91337: PUSH
91338: LD_INT 4
91340: MINUS
91341: PUSH
91342: LD_INT 2
91344: PUSH
91345: EMPTY
91346: LIST
91347: LIST
91348: LIST
91349: PUSH
91350: EMPTY
91351: LIST
91352: LIST
91353: LIST
91354: LIST
91355: LIST
91356: ST_TO_ADDR
// end ; 5 :
91357: GO 91497
91359: LD_INT 5
91361: DOUBLE
91362: EQUAL
91363: IFTRUE 91367
91365: GO 91496
91367: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
91368: LD_ADDR_VAR 0 5
91372: PUSH
91373: LD_VAR 0 1
91377: PUSH
91378: LD_INT 4
91380: MINUS
91381: PUSH
91382: LD_VAR 0 2
91386: PUSH
91387: LD_INT 1
91389: PUSH
91390: EMPTY
91391: LIST
91392: LIST
91393: LIST
91394: PUSH
91395: LD_VAR 0 1
91399: PUSH
91400: LD_VAR 0 2
91404: PUSH
91405: LD_INT 4
91407: MINUS
91408: PUSH
91409: LD_INT 3
91411: PUSH
91412: EMPTY
91413: LIST
91414: LIST
91415: LIST
91416: PUSH
91417: LD_VAR 0 1
91421: PUSH
91422: LD_INT 4
91424: PLUS
91425: PUSH
91426: LD_VAR 0 2
91430: PUSH
91431: LD_INT 4
91433: PLUS
91434: PUSH
91435: LD_INT 5
91437: PUSH
91438: EMPTY
91439: LIST
91440: LIST
91441: LIST
91442: PUSH
91443: LD_VAR 0 1
91447: PUSH
91448: LD_INT 3
91450: PLUS
91451: PUSH
91452: LD_VAR 0 2
91456: PUSH
91457: LD_INT 4
91459: PUSH
91460: EMPTY
91461: LIST
91462: LIST
91463: LIST
91464: PUSH
91465: LD_VAR 0 1
91469: PUSH
91470: LD_VAR 0 2
91474: PUSH
91475: LD_INT 3
91477: PLUS
91478: PUSH
91479: LD_INT 0
91481: PUSH
91482: EMPTY
91483: LIST
91484: LIST
91485: LIST
91486: PUSH
91487: EMPTY
91488: LIST
91489: LIST
91490: LIST
91491: LIST
91492: LIST
91493: ST_TO_ADDR
// end ; end ;
91494: GO 91497
91496: POP
// result := list ;
91497: LD_ADDR_VAR 0 4
91501: PUSH
91502: LD_VAR 0 5
91506: ST_TO_ADDR
// end ;
91507: LD_VAR 0 4
91511: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
91512: LD_INT 0
91514: PPUSH
91515: PPUSH
91516: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
91517: LD_VAR 0 1
91521: NOT
91522: PUSH
91523: LD_VAR 0 2
91527: PUSH
91528: LD_INT 1
91530: PUSH
91531: LD_INT 2
91533: PUSH
91534: LD_INT 3
91536: PUSH
91537: LD_INT 4
91539: PUSH
91540: EMPTY
91541: LIST
91542: LIST
91543: LIST
91544: LIST
91545: IN
91546: NOT
91547: OR
91548: IFFALSE 91552
// exit ;
91550: GO 91635
// tmp := [ ] ;
91552: LD_ADDR_VAR 0 5
91556: PUSH
91557: EMPTY
91558: ST_TO_ADDR
// for i in units do
91559: LD_ADDR_VAR 0 4
91563: PUSH
91564: LD_VAR 0 1
91568: PUSH
91569: FOR_IN
91570: IFFALSE 91604
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
91572: LD_ADDR_VAR 0 5
91576: PUSH
91577: LD_VAR 0 5
91581: PPUSH
91582: LD_VAR 0 4
91586: PPUSH
91587: LD_VAR 0 2
91591: PPUSH
91592: CALL_OW 259
91596: PPUSH
91597: CALL 93008 0 2
91601: ST_TO_ADDR
91602: GO 91569
91604: POP
91605: POP
// if not tmp then
91606: LD_VAR 0 5
91610: NOT
91611: IFFALSE 91615
// exit ;
91613: GO 91635
// result := SortListByListDesc ( units , tmp ) ;
91615: LD_ADDR_VAR 0 3
91619: PUSH
91620: LD_VAR 0 1
91624: PPUSH
91625: LD_VAR 0 5
91629: PPUSH
91630: CALL_OW 77
91634: ST_TO_ADDR
// end ;
91635: LD_VAR 0 3
91639: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
91640: LD_INT 0
91642: PPUSH
91643: PPUSH
91644: PPUSH
// result := false ;
91645: LD_ADDR_VAR 0 3
91649: PUSH
91650: LD_INT 0
91652: ST_TO_ADDR
// if not building then
91653: LD_VAR 0 2
91657: NOT
91658: IFFALSE 91662
// exit ;
91660: GO 91800
// x := GetX ( building ) ;
91662: LD_ADDR_VAR 0 4
91666: PUSH
91667: LD_VAR 0 2
91671: PPUSH
91672: CALL_OW 250
91676: ST_TO_ADDR
// y := GetY ( building ) ;
91677: LD_ADDR_VAR 0 5
91681: PUSH
91682: LD_VAR 0 2
91686: PPUSH
91687: CALL_OW 251
91691: ST_TO_ADDR
// if not x or not y then
91692: LD_VAR 0 4
91696: NOT
91697: PUSH
91698: LD_VAR 0 5
91702: NOT
91703: OR
91704: IFFALSE 91708
// exit ;
91706: GO 91800
// if GetTaskList ( unit ) then
91708: LD_VAR 0 1
91712: PPUSH
91713: CALL_OW 437
91717: IFFALSE 91800
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91719: LD_STRING e
91721: PUSH
91722: LD_VAR 0 1
91726: PPUSH
91727: CALL_OW 437
91731: PUSH
91732: LD_INT 1
91734: ARRAY
91735: PUSH
91736: LD_INT 1
91738: ARRAY
91739: EQUAL
91740: PUSH
91741: LD_VAR 0 4
91745: PUSH
91746: LD_VAR 0 1
91750: PPUSH
91751: CALL_OW 437
91755: PUSH
91756: LD_INT 1
91758: ARRAY
91759: PUSH
91760: LD_INT 2
91762: ARRAY
91763: EQUAL
91764: AND
91765: PUSH
91766: LD_VAR 0 5
91770: PUSH
91771: LD_VAR 0 1
91775: PPUSH
91776: CALL_OW 437
91780: PUSH
91781: LD_INT 1
91783: ARRAY
91784: PUSH
91785: LD_INT 3
91787: ARRAY
91788: EQUAL
91789: AND
91790: IFFALSE 91800
// result := true end ;
91792: LD_ADDR_VAR 0 3
91796: PUSH
91797: LD_INT 1
91799: ST_TO_ADDR
// end ;
91800: LD_VAR 0 3
91804: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91805: LD_INT 0
91807: PPUSH
// result := false ;
91808: LD_ADDR_VAR 0 4
91812: PUSH
91813: LD_INT 0
91815: ST_TO_ADDR
// if GetTaskList ( unit ) then
91816: LD_VAR 0 1
91820: PPUSH
91821: CALL_OW 437
91825: IFFALSE 91908
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91827: LD_STRING M
91829: PUSH
91830: LD_VAR 0 1
91834: PPUSH
91835: CALL_OW 437
91839: PUSH
91840: LD_INT 1
91842: ARRAY
91843: PUSH
91844: LD_INT 1
91846: ARRAY
91847: EQUAL
91848: PUSH
91849: LD_VAR 0 2
91853: PUSH
91854: LD_VAR 0 1
91858: PPUSH
91859: CALL_OW 437
91863: PUSH
91864: LD_INT 1
91866: ARRAY
91867: PUSH
91868: LD_INT 2
91870: ARRAY
91871: EQUAL
91872: AND
91873: PUSH
91874: LD_VAR 0 3
91878: PUSH
91879: LD_VAR 0 1
91883: PPUSH
91884: CALL_OW 437
91888: PUSH
91889: LD_INT 1
91891: ARRAY
91892: PUSH
91893: LD_INT 3
91895: ARRAY
91896: EQUAL
91897: AND
91898: IFFALSE 91908
// result := true ;
91900: LD_ADDR_VAR 0 4
91904: PUSH
91905: LD_INT 1
91907: ST_TO_ADDR
// end ; end ;
91908: LD_VAR 0 4
91912: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91913: LD_INT 0
91915: PPUSH
91916: PPUSH
91917: PPUSH
91918: PPUSH
// if not unit or not area then
91919: LD_VAR 0 1
91923: NOT
91924: PUSH
91925: LD_VAR 0 2
91929: NOT
91930: OR
91931: IFFALSE 91935
// exit ;
91933: GO 92111
// tmp := AreaToList ( area , i ) ;
91935: LD_ADDR_VAR 0 6
91939: PUSH
91940: LD_VAR 0 2
91944: PPUSH
91945: LD_VAR 0 5
91949: PPUSH
91950: CALL_OW 517
91954: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91955: LD_ADDR_VAR 0 5
91959: PUSH
91960: DOUBLE
91961: LD_INT 1
91963: DEC
91964: ST_TO_ADDR
91965: LD_VAR 0 6
91969: PUSH
91970: LD_INT 1
91972: ARRAY
91973: PUSH
91974: FOR_TO
91975: IFFALSE 92109
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91977: LD_ADDR_VAR 0 7
91981: PUSH
91982: LD_VAR 0 6
91986: PUSH
91987: LD_INT 1
91989: ARRAY
91990: PUSH
91991: LD_VAR 0 5
91995: ARRAY
91996: PUSH
91997: LD_VAR 0 6
92001: PUSH
92002: LD_INT 2
92004: ARRAY
92005: PUSH
92006: LD_VAR 0 5
92010: ARRAY
92011: PUSH
92012: EMPTY
92013: LIST
92014: LIST
92015: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
92016: LD_INT 92
92018: PUSH
92019: LD_VAR 0 7
92023: PUSH
92024: LD_INT 1
92026: ARRAY
92027: PUSH
92028: LD_VAR 0 7
92032: PUSH
92033: LD_INT 2
92035: ARRAY
92036: PUSH
92037: LD_INT 2
92039: PUSH
92040: EMPTY
92041: LIST
92042: LIST
92043: LIST
92044: LIST
92045: PPUSH
92046: CALL_OW 69
92050: PUSH
92051: LD_INT 0
92053: EQUAL
92054: IFFALSE 92107
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
92056: LD_VAR 0 1
92060: PPUSH
92061: LD_VAR 0 7
92065: PUSH
92066: LD_INT 1
92068: ARRAY
92069: PPUSH
92070: LD_VAR 0 7
92074: PUSH
92075: LD_INT 2
92077: ARRAY
92078: PPUSH
92079: LD_VAR 0 3
92083: PPUSH
92084: CALL_OW 48
// result := IsPlaced ( unit ) ;
92088: LD_ADDR_VAR 0 4
92092: PUSH
92093: LD_VAR 0 1
92097: PPUSH
92098: CALL_OW 305
92102: ST_TO_ADDR
// exit ;
92103: POP
92104: POP
92105: GO 92111
// end ; end ;
92107: GO 91974
92109: POP
92110: POP
// end ;
92111: LD_VAR 0 4
92115: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
92116: LD_INT 0
92118: PPUSH
92119: PPUSH
92120: PPUSH
// if not side or side > 8 then
92121: LD_VAR 0 1
92125: NOT
92126: PUSH
92127: LD_VAR 0 1
92131: PUSH
92132: LD_INT 8
92134: GREATER
92135: OR
92136: IFFALSE 92140
// exit ;
92138: GO 92327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
92140: LD_ADDR_VAR 0 4
92144: PUSH
92145: LD_INT 22
92147: PUSH
92148: LD_VAR 0 1
92152: PUSH
92153: EMPTY
92154: LIST
92155: LIST
92156: PUSH
92157: LD_INT 21
92159: PUSH
92160: LD_INT 3
92162: PUSH
92163: EMPTY
92164: LIST
92165: LIST
92166: PUSH
92167: EMPTY
92168: LIST
92169: LIST
92170: PPUSH
92171: CALL_OW 69
92175: ST_TO_ADDR
// if not tmp then
92176: LD_VAR 0 4
92180: NOT
92181: IFFALSE 92185
// exit ;
92183: GO 92327
// enable_addtolog := true ;
92185: LD_ADDR_OWVAR 81
92189: PUSH
92190: LD_INT 1
92192: ST_TO_ADDR
// AddToLog ( [ ) ;
92193: LD_STRING [
92195: PPUSH
92196: CALL_OW 561
// for i in tmp do
92200: LD_ADDR_VAR 0 3
92204: PUSH
92205: LD_VAR 0 4
92209: PUSH
92210: FOR_IN
92211: IFFALSE 92318
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
92213: LD_STRING [
92215: PUSH
92216: LD_VAR 0 3
92220: PPUSH
92221: CALL_OW 266
92225: STR
92226: PUSH
92227: LD_STRING , 
92229: STR
92230: PUSH
92231: LD_VAR 0 3
92235: PPUSH
92236: CALL_OW 250
92240: STR
92241: PUSH
92242: LD_STRING , 
92244: STR
92245: PUSH
92246: LD_VAR 0 3
92250: PPUSH
92251: CALL_OW 251
92255: STR
92256: PUSH
92257: LD_STRING , 
92259: STR
92260: PUSH
92261: LD_VAR 0 3
92265: PPUSH
92266: CALL_OW 254
92270: STR
92271: PUSH
92272: LD_STRING , 
92274: STR
92275: PUSH
92276: LD_VAR 0 3
92280: PPUSH
92281: LD_INT 1
92283: PPUSH
92284: CALL_OW 268
92288: STR
92289: PUSH
92290: LD_STRING , 
92292: STR
92293: PUSH
92294: LD_VAR 0 3
92298: PPUSH
92299: LD_INT 2
92301: PPUSH
92302: CALL_OW 268
92306: STR
92307: PUSH
92308: LD_STRING ],
92310: STR
92311: PPUSH
92312: CALL_OW 561
// end ;
92316: GO 92210
92318: POP
92319: POP
// AddToLog ( ]; ) ;
92320: LD_STRING ];
92322: PPUSH
92323: CALL_OW 561
// end ;
92327: LD_VAR 0 2
92331: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
92332: LD_INT 0
92334: PPUSH
92335: PPUSH
92336: PPUSH
92337: PPUSH
92338: PPUSH
// if not area or not rate or not max then
92339: LD_VAR 0 1
92343: NOT
92344: PUSH
92345: LD_VAR 0 2
92349: NOT
92350: OR
92351: PUSH
92352: LD_VAR 0 4
92356: NOT
92357: OR
92358: IFFALSE 92362
// exit ;
92360: GO 92551
// while 1 do
92362: LD_INT 1
92364: IFFALSE 92551
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
92366: LD_ADDR_VAR 0 9
92370: PUSH
92371: LD_VAR 0 1
92375: PPUSH
92376: LD_INT 1
92378: PPUSH
92379: CALL_OW 287
92383: PUSH
92384: LD_INT 10
92386: MUL
92387: ST_TO_ADDR
// r := rate / 10 ;
92388: LD_ADDR_VAR 0 7
92392: PUSH
92393: LD_VAR 0 2
92397: PUSH
92398: LD_INT 10
92400: DIVREAL
92401: ST_TO_ADDR
// time := 1 1$00 ;
92402: LD_ADDR_VAR 0 8
92406: PUSH
92407: LD_INT 2100
92409: ST_TO_ADDR
// if amount < min then
92410: LD_VAR 0 9
92414: PUSH
92415: LD_VAR 0 3
92419: LESS
92420: IFFALSE 92438
// r := r * 2 else
92422: LD_ADDR_VAR 0 7
92426: PUSH
92427: LD_VAR 0 7
92431: PUSH
92432: LD_INT 2
92434: MUL
92435: ST_TO_ADDR
92436: GO 92464
// if amount > max then
92438: LD_VAR 0 9
92442: PUSH
92443: LD_VAR 0 4
92447: GREATER
92448: IFFALSE 92464
// r := r / 2 ;
92450: LD_ADDR_VAR 0 7
92454: PUSH
92455: LD_VAR 0 7
92459: PUSH
92460: LD_INT 2
92462: DIVREAL
92463: ST_TO_ADDR
// time := time / r ;
92464: LD_ADDR_VAR 0 8
92468: PUSH
92469: LD_VAR 0 8
92473: PUSH
92474: LD_VAR 0 7
92478: DIVREAL
92479: ST_TO_ADDR
// if time < 0 then
92480: LD_VAR 0 8
92484: PUSH
92485: LD_INT 0
92487: LESS
92488: IFFALSE 92505
// time := time * - 1 ;
92490: LD_ADDR_VAR 0 8
92494: PUSH
92495: LD_VAR 0 8
92499: PUSH
92500: LD_INT 1
92502: NEG
92503: MUL
92504: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
92505: LD_VAR 0 8
92509: PUSH
92510: LD_INT 35
92512: PPUSH
92513: LD_INT 875
92515: PPUSH
92516: CALL_OW 12
92520: PLUS
92521: PPUSH
92522: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
92526: LD_INT 1
92528: PPUSH
92529: LD_INT 5
92531: PPUSH
92532: CALL_OW 12
92536: PPUSH
92537: LD_VAR 0 1
92541: PPUSH
92542: LD_INT 1
92544: PPUSH
92545: CALL_OW 55
// end ;
92549: GO 92362
// end ;
92551: LD_VAR 0 5
92555: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
92556: LD_INT 0
92558: PPUSH
92559: PPUSH
92560: PPUSH
92561: PPUSH
92562: PPUSH
92563: PPUSH
92564: PPUSH
92565: PPUSH
// if not turrets or not factories then
92566: LD_VAR 0 1
92570: NOT
92571: PUSH
92572: LD_VAR 0 2
92576: NOT
92577: OR
92578: IFFALSE 92582
// exit ;
92580: GO 92889
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
92582: LD_ADDR_VAR 0 10
92586: PUSH
92587: LD_INT 5
92589: PUSH
92590: LD_INT 6
92592: PUSH
92593: EMPTY
92594: LIST
92595: LIST
92596: PUSH
92597: LD_INT 2
92599: PUSH
92600: LD_INT 4
92602: PUSH
92603: EMPTY
92604: LIST
92605: LIST
92606: PUSH
92607: LD_INT 3
92609: PUSH
92610: LD_INT 5
92612: PUSH
92613: EMPTY
92614: LIST
92615: LIST
92616: PUSH
92617: EMPTY
92618: LIST
92619: LIST
92620: LIST
92621: PUSH
92622: LD_INT 24
92624: PUSH
92625: LD_INT 25
92627: PUSH
92628: EMPTY
92629: LIST
92630: LIST
92631: PUSH
92632: LD_INT 23
92634: PUSH
92635: LD_INT 27
92637: PUSH
92638: EMPTY
92639: LIST
92640: LIST
92641: PUSH
92642: EMPTY
92643: LIST
92644: LIST
92645: PUSH
92646: LD_INT 42
92648: PUSH
92649: LD_INT 43
92651: PUSH
92652: EMPTY
92653: LIST
92654: LIST
92655: PUSH
92656: LD_INT 44
92658: PUSH
92659: LD_INT 46
92661: PUSH
92662: EMPTY
92663: LIST
92664: LIST
92665: PUSH
92666: LD_INT 45
92668: PUSH
92669: LD_INT 47
92671: PUSH
92672: EMPTY
92673: LIST
92674: LIST
92675: PUSH
92676: EMPTY
92677: LIST
92678: LIST
92679: LIST
92680: PUSH
92681: EMPTY
92682: LIST
92683: LIST
92684: LIST
92685: ST_TO_ADDR
// result := [ ] ;
92686: LD_ADDR_VAR 0 3
92690: PUSH
92691: EMPTY
92692: ST_TO_ADDR
// for i in turrets do
92693: LD_ADDR_VAR 0 4
92697: PUSH
92698: LD_VAR 0 1
92702: PUSH
92703: FOR_IN
92704: IFFALSE 92887
// begin nat := GetNation ( i ) ;
92706: LD_ADDR_VAR 0 7
92710: PUSH
92711: LD_VAR 0 4
92715: PPUSH
92716: CALL_OW 248
92720: ST_TO_ADDR
// weapon := 0 ;
92721: LD_ADDR_VAR 0 8
92725: PUSH
92726: LD_INT 0
92728: ST_TO_ADDR
// if not nat then
92729: LD_VAR 0 7
92733: NOT
92734: IFFALSE 92738
// continue ;
92736: GO 92703
// for j in list [ nat ] do
92738: LD_ADDR_VAR 0 5
92742: PUSH
92743: LD_VAR 0 10
92747: PUSH
92748: LD_VAR 0 7
92752: ARRAY
92753: PUSH
92754: FOR_IN
92755: IFFALSE 92796
// if GetBWeapon ( i ) = j [ 1 ] then
92757: LD_VAR 0 4
92761: PPUSH
92762: CALL_OW 269
92766: PUSH
92767: LD_VAR 0 5
92771: PUSH
92772: LD_INT 1
92774: ARRAY
92775: EQUAL
92776: IFFALSE 92794
// begin weapon := j [ 2 ] ;
92778: LD_ADDR_VAR 0 8
92782: PUSH
92783: LD_VAR 0 5
92787: PUSH
92788: LD_INT 2
92790: ARRAY
92791: ST_TO_ADDR
// break ;
92792: GO 92796
// end ;
92794: GO 92754
92796: POP
92797: POP
// if not weapon then
92798: LD_VAR 0 8
92802: NOT
92803: IFFALSE 92807
// continue ;
92805: GO 92703
// for k in factories do
92807: LD_ADDR_VAR 0 6
92811: PUSH
92812: LD_VAR 0 2
92816: PUSH
92817: FOR_IN
92818: IFFALSE 92883
// begin weapons := AvailableWeaponList ( k ) ;
92820: LD_ADDR_VAR 0 9
92824: PUSH
92825: LD_VAR 0 6
92829: PPUSH
92830: CALL_OW 478
92834: ST_TO_ADDR
// if not weapons then
92835: LD_VAR 0 9
92839: NOT
92840: IFFALSE 92844
// continue ;
92842: GO 92817
// if weapon in weapons then
92844: LD_VAR 0 8
92848: PUSH
92849: LD_VAR 0 9
92853: IN
92854: IFFALSE 92881
// begin result := [ i , weapon ] ;
92856: LD_ADDR_VAR 0 3
92860: PUSH
92861: LD_VAR 0 4
92865: PUSH
92866: LD_VAR 0 8
92870: PUSH
92871: EMPTY
92872: LIST
92873: LIST
92874: ST_TO_ADDR
// exit ;
92875: POP
92876: POP
92877: POP
92878: POP
92879: GO 92889
// end ; end ;
92881: GO 92817
92883: POP
92884: POP
// end ;
92885: GO 92703
92887: POP
92888: POP
// end ;
92889: LD_VAR 0 3
92893: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92894: LD_INT 0
92896: PPUSH
// if not side or side > 8 then
92897: LD_VAR 0 3
92901: NOT
92902: PUSH
92903: LD_VAR 0 3
92907: PUSH
92908: LD_INT 8
92910: GREATER
92911: OR
92912: IFFALSE 92916
// exit ;
92914: GO 92975
// if not range then
92916: LD_VAR 0 4
92920: NOT
92921: IFFALSE 92932
// range := - 12 ;
92923: LD_ADDR_VAR 0 4
92927: PUSH
92928: LD_INT 12
92930: NEG
92931: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92932: LD_VAR 0 1
92936: PPUSH
92937: LD_VAR 0 2
92941: PPUSH
92942: LD_VAR 0 3
92946: PPUSH
92947: LD_VAR 0 4
92951: PPUSH
92952: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92956: LD_VAR 0 1
92960: PPUSH
92961: LD_VAR 0 2
92965: PPUSH
92966: LD_VAR 0 3
92970: PPUSH
92971: CALL_OW 331
// end ;
92975: LD_VAR 0 5
92979: RET
// export function Video ( mode ) ; begin
92980: LD_INT 0
92982: PPUSH
// ingame_video = mode ;
92983: LD_ADDR_OWVAR 52
92987: PUSH
92988: LD_VAR 0 1
92992: ST_TO_ADDR
// interface_hidden = mode ;
92993: LD_ADDR_OWVAR 54
92997: PUSH
92998: LD_VAR 0 1
93002: ST_TO_ADDR
// end ;
93003: LD_VAR 0 2
93007: RET
// export function Join ( array , element ) ; begin
93008: LD_INT 0
93010: PPUSH
// result := Replace ( array , array + 1 , element ) ;
93011: LD_ADDR_VAR 0 3
93015: PUSH
93016: LD_VAR 0 1
93020: PPUSH
93021: LD_VAR 0 1
93025: PUSH
93026: LD_INT 1
93028: PLUS
93029: PPUSH
93030: LD_VAR 0 2
93034: PPUSH
93035: CALL_OW 1
93039: ST_TO_ADDR
// end ;
93040: LD_VAR 0 3
93044: RET
// export function JoinUnion ( array , element ) ; begin
93045: LD_INT 0
93047: PPUSH
// result := array union element ;
93048: LD_ADDR_VAR 0 3
93052: PUSH
93053: LD_VAR 0 1
93057: PUSH
93058: LD_VAR 0 2
93062: UNION
93063: ST_TO_ADDR
// end ;
93064: LD_VAR 0 3
93068: RET
// export function GetBehemoths ( side ) ; begin
93069: LD_INT 0
93071: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
93072: LD_ADDR_VAR 0 2
93076: PUSH
93077: LD_INT 22
93079: PUSH
93080: LD_VAR 0 1
93084: PUSH
93085: EMPTY
93086: LIST
93087: LIST
93088: PUSH
93089: LD_INT 31
93091: PUSH
93092: LD_INT 25
93094: PUSH
93095: EMPTY
93096: LIST
93097: LIST
93098: PUSH
93099: EMPTY
93100: LIST
93101: LIST
93102: PPUSH
93103: CALL_OW 69
93107: ST_TO_ADDR
// end ;
93108: LD_VAR 0 2
93112: RET
// export function Shuffle ( array ) ; var i , index ; begin
93113: LD_INT 0
93115: PPUSH
93116: PPUSH
93117: PPUSH
// result := [ ] ;
93118: LD_ADDR_VAR 0 2
93122: PUSH
93123: EMPTY
93124: ST_TO_ADDR
// if not array then
93125: LD_VAR 0 1
93129: NOT
93130: IFFALSE 93134
// exit ;
93132: GO 93233
// Randomize ;
93134: CALL_OW 10
// for i = array downto 1 do
93138: LD_ADDR_VAR 0 3
93142: PUSH
93143: DOUBLE
93144: LD_VAR 0 1
93148: INC
93149: ST_TO_ADDR
93150: LD_INT 1
93152: PUSH
93153: FOR_DOWNTO
93154: IFFALSE 93231
// begin index := rand ( 1 , array ) ;
93156: LD_ADDR_VAR 0 4
93160: PUSH
93161: LD_INT 1
93163: PPUSH
93164: LD_VAR 0 1
93168: PPUSH
93169: CALL_OW 12
93173: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
93174: LD_ADDR_VAR 0 2
93178: PUSH
93179: LD_VAR 0 2
93183: PPUSH
93184: LD_VAR 0 2
93188: PUSH
93189: LD_INT 1
93191: PLUS
93192: PPUSH
93193: LD_VAR 0 1
93197: PUSH
93198: LD_VAR 0 4
93202: ARRAY
93203: PPUSH
93204: CALL_OW 2
93208: ST_TO_ADDR
// array := Delete ( array , index ) ;
93209: LD_ADDR_VAR 0 1
93213: PUSH
93214: LD_VAR 0 1
93218: PPUSH
93219: LD_VAR 0 4
93223: PPUSH
93224: CALL_OW 3
93228: ST_TO_ADDR
// end ;
93229: GO 93153
93231: POP
93232: POP
// end ;
93233: LD_VAR 0 2
93237: RET
// export function GetBaseMaterials ( base ) ; begin
93238: LD_INT 0
93240: PPUSH
// result := [ 0 , 0 , 0 ] ;
93241: LD_ADDR_VAR 0 2
93245: PUSH
93246: LD_INT 0
93248: PUSH
93249: LD_INT 0
93251: PUSH
93252: LD_INT 0
93254: PUSH
93255: EMPTY
93256: LIST
93257: LIST
93258: LIST
93259: ST_TO_ADDR
// if not base then
93260: LD_VAR 0 1
93264: NOT
93265: IFFALSE 93269
// exit ;
93267: GO 93318
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
93269: LD_ADDR_VAR 0 2
93273: PUSH
93274: LD_VAR 0 1
93278: PPUSH
93279: LD_INT 1
93281: PPUSH
93282: CALL_OW 275
93286: PUSH
93287: LD_VAR 0 1
93291: PPUSH
93292: LD_INT 2
93294: PPUSH
93295: CALL_OW 275
93299: PUSH
93300: LD_VAR 0 1
93304: PPUSH
93305: LD_INT 3
93307: PPUSH
93308: CALL_OW 275
93312: PUSH
93313: EMPTY
93314: LIST
93315: LIST
93316: LIST
93317: ST_TO_ADDR
// end ;
93318: LD_VAR 0 2
93322: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
93323: LD_INT 0
93325: PPUSH
93326: PPUSH
// result := array ;
93327: LD_ADDR_VAR 0 3
93331: PUSH
93332: LD_VAR 0 1
93336: ST_TO_ADDR
// if size >= result then
93337: LD_VAR 0 2
93341: PUSH
93342: LD_VAR 0 3
93346: GREATEREQUAL
93347: IFFALSE 93351
// exit ;
93349: GO 93401
// if size then
93351: LD_VAR 0 2
93355: IFFALSE 93401
// for i := array downto size do
93357: LD_ADDR_VAR 0 4
93361: PUSH
93362: DOUBLE
93363: LD_VAR 0 1
93367: INC
93368: ST_TO_ADDR
93369: LD_VAR 0 2
93373: PUSH
93374: FOR_DOWNTO
93375: IFFALSE 93399
// result := Delete ( result , result ) ;
93377: LD_ADDR_VAR 0 3
93381: PUSH
93382: LD_VAR 0 3
93386: PPUSH
93387: LD_VAR 0 3
93391: PPUSH
93392: CALL_OW 3
93396: ST_TO_ADDR
93397: GO 93374
93399: POP
93400: POP
// end ;
93401: LD_VAR 0 3
93405: RET
// export function ComExit ( unit ) ; var tmp ; begin
93406: LD_INT 0
93408: PPUSH
93409: PPUSH
// if not IsInUnit ( unit ) then
93410: LD_VAR 0 1
93414: PPUSH
93415: CALL_OW 310
93419: NOT
93420: IFFALSE 93424
// exit ;
93422: GO 93484
// tmp := IsInUnit ( unit ) ;
93424: LD_ADDR_VAR 0 3
93428: PUSH
93429: LD_VAR 0 1
93433: PPUSH
93434: CALL_OW 310
93438: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
93439: LD_VAR 0 3
93443: PPUSH
93444: CALL_OW 247
93448: PUSH
93449: LD_INT 2
93451: EQUAL
93452: IFFALSE 93465
// ComExitVehicle ( unit ) else
93454: LD_VAR 0 1
93458: PPUSH
93459: CALL_OW 121
93463: GO 93474
// ComExitBuilding ( unit ) ;
93465: LD_VAR 0 1
93469: PPUSH
93470: CALL_OW 122
// result := tmp ;
93474: LD_ADDR_VAR 0 2
93478: PUSH
93479: LD_VAR 0 3
93483: ST_TO_ADDR
// end ;
93484: LD_VAR 0 2
93488: RET
// export function ComExitAll ( units ) ; var i ; begin
93489: LD_INT 0
93491: PPUSH
93492: PPUSH
// if not units then
93493: LD_VAR 0 1
93497: NOT
93498: IFFALSE 93502
// exit ;
93500: GO 93528
// for i in units do
93502: LD_ADDR_VAR 0 3
93506: PUSH
93507: LD_VAR 0 1
93511: PUSH
93512: FOR_IN
93513: IFFALSE 93526
// ComExit ( i ) ;
93515: LD_VAR 0 3
93519: PPUSH
93520: CALL 93406 0 1
93524: GO 93512
93526: POP
93527: POP
// end ;
93528: LD_VAR 0 2
93532: RET
// export function ResetHc ; begin
93533: LD_INT 0
93535: PPUSH
// InitHc ;
93536: CALL_OW 19
// hc_importance := 0 ;
93540: LD_ADDR_OWVAR 32
93544: PUSH
93545: LD_INT 0
93547: ST_TO_ADDR
// end ;
93548: LD_VAR 0 1
93552: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
93553: LD_INT 0
93555: PPUSH
93556: PPUSH
93557: PPUSH
// _x := ( x1 + x2 ) div 2 ;
93558: LD_ADDR_VAR 0 6
93562: PUSH
93563: LD_VAR 0 1
93567: PUSH
93568: LD_VAR 0 3
93572: PLUS
93573: PUSH
93574: LD_INT 2
93576: DIV
93577: ST_TO_ADDR
// if _x < 0 then
93578: LD_VAR 0 6
93582: PUSH
93583: LD_INT 0
93585: LESS
93586: IFFALSE 93603
// _x := _x * - 1 ;
93588: LD_ADDR_VAR 0 6
93592: PUSH
93593: LD_VAR 0 6
93597: PUSH
93598: LD_INT 1
93600: NEG
93601: MUL
93602: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
93603: LD_ADDR_VAR 0 7
93607: PUSH
93608: LD_VAR 0 2
93612: PUSH
93613: LD_VAR 0 4
93617: PLUS
93618: PUSH
93619: LD_INT 2
93621: DIV
93622: ST_TO_ADDR
// if _y < 0 then
93623: LD_VAR 0 7
93627: PUSH
93628: LD_INT 0
93630: LESS
93631: IFFALSE 93648
// _y := _y * - 1 ;
93633: LD_ADDR_VAR 0 7
93637: PUSH
93638: LD_VAR 0 7
93642: PUSH
93643: LD_INT 1
93645: NEG
93646: MUL
93647: ST_TO_ADDR
// result := [ _x , _y ] ;
93648: LD_ADDR_VAR 0 5
93652: PUSH
93653: LD_VAR 0 6
93657: PUSH
93658: LD_VAR 0 7
93662: PUSH
93663: EMPTY
93664: LIST
93665: LIST
93666: ST_TO_ADDR
// end ;
93667: LD_VAR 0 5
93671: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
93672: LD_INT 0
93674: PPUSH
93675: PPUSH
93676: PPUSH
93677: PPUSH
// task := GetTaskList ( unit ) ;
93678: LD_ADDR_VAR 0 7
93682: PUSH
93683: LD_VAR 0 1
93687: PPUSH
93688: CALL_OW 437
93692: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
93693: LD_VAR 0 7
93697: NOT
93698: PUSH
93699: LD_VAR 0 1
93703: PPUSH
93704: LD_VAR 0 2
93708: PPUSH
93709: CALL_OW 308
93713: NOT
93714: AND
93715: IFFALSE 93719
// exit ;
93717: GO 93837
// if IsInArea ( unit , area ) then
93719: LD_VAR 0 1
93723: PPUSH
93724: LD_VAR 0 2
93728: PPUSH
93729: CALL_OW 308
93733: IFFALSE 93751
// begin ComMoveToArea ( unit , goAway ) ;
93735: LD_VAR 0 1
93739: PPUSH
93740: LD_VAR 0 3
93744: PPUSH
93745: CALL_OW 113
// exit ;
93749: GO 93837
// end ; if task [ 1 ] [ 1 ] <> M then
93751: LD_VAR 0 7
93755: PUSH
93756: LD_INT 1
93758: ARRAY
93759: PUSH
93760: LD_INT 1
93762: ARRAY
93763: PUSH
93764: LD_STRING M
93766: NONEQUAL
93767: IFFALSE 93771
// exit ;
93769: GO 93837
// x := task [ 1 ] [ 2 ] ;
93771: LD_ADDR_VAR 0 5
93775: PUSH
93776: LD_VAR 0 7
93780: PUSH
93781: LD_INT 1
93783: ARRAY
93784: PUSH
93785: LD_INT 2
93787: ARRAY
93788: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
93789: LD_ADDR_VAR 0 6
93793: PUSH
93794: LD_VAR 0 7
93798: PUSH
93799: LD_INT 1
93801: ARRAY
93802: PUSH
93803: LD_INT 3
93805: ARRAY
93806: ST_TO_ADDR
// if InArea ( x , y , area ) then
93807: LD_VAR 0 5
93811: PPUSH
93812: LD_VAR 0 6
93816: PPUSH
93817: LD_VAR 0 2
93821: PPUSH
93822: CALL_OW 309
93826: IFFALSE 93837
// ComStop ( unit ) ;
93828: LD_VAR 0 1
93832: PPUSH
93833: CALL_OW 141
// end ;
93837: LD_VAR 0 4
93841: RET
// export function Abs ( value ) ; begin
93842: LD_INT 0
93844: PPUSH
// result := value ;
93845: LD_ADDR_VAR 0 2
93849: PUSH
93850: LD_VAR 0 1
93854: ST_TO_ADDR
// if value < 0 then
93855: LD_VAR 0 1
93859: PUSH
93860: LD_INT 0
93862: LESS
93863: IFFALSE 93880
// result := value * - 1 ;
93865: LD_ADDR_VAR 0 2
93869: PUSH
93870: LD_VAR 0 1
93874: PUSH
93875: LD_INT 1
93877: NEG
93878: MUL
93879: ST_TO_ADDR
// end ;
93880: LD_VAR 0 2
93884: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93885: LD_INT 0
93887: PPUSH
93888: PPUSH
93889: PPUSH
93890: PPUSH
93891: PPUSH
93892: PPUSH
93893: PPUSH
93894: PPUSH
// if not unit or not building then
93895: LD_VAR 0 1
93899: NOT
93900: PUSH
93901: LD_VAR 0 2
93905: NOT
93906: OR
93907: IFFALSE 93911
// exit ;
93909: GO 94137
// x := GetX ( building ) ;
93911: LD_ADDR_VAR 0 4
93915: PUSH
93916: LD_VAR 0 2
93920: PPUSH
93921: CALL_OW 250
93925: ST_TO_ADDR
// y := GetY ( building ) ;
93926: LD_ADDR_VAR 0 6
93930: PUSH
93931: LD_VAR 0 2
93935: PPUSH
93936: CALL_OW 251
93940: ST_TO_ADDR
// d := GetDir ( building ) ;
93941: LD_ADDR_VAR 0 8
93945: PUSH
93946: LD_VAR 0 2
93950: PPUSH
93951: CALL_OW 254
93955: ST_TO_ADDR
// r := 4 ;
93956: LD_ADDR_VAR 0 9
93960: PUSH
93961: LD_INT 4
93963: ST_TO_ADDR
// for i := 1 to 5 do
93964: LD_ADDR_VAR 0 10
93968: PUSH
93969: DOUBLE
93970: LD_INT 1
93972: DEC
93973: ST_TO_ADDR
93974: LD_INT 5
93976: PUSH
93977: FOR_TO
93978: IFFALSE 94135
// begin _x := ShiftX ( x , d , r + i ) ;
93980: LD_ADDR_VAR 0 5
93984: PUSH
93985: LD_VAR 0 4
93989: PPUSH
93990: LD_VAR 0 8
93994: PPUSH
93995: LD_VAR 0 9
93999: PUSH
94000: LD_VAR 0 10
94004: PLUS
94005: PPUSH
94006: CALL_OW 272
94010: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
94011: LD_ADDR_VAR 0 7
94015: PUSH
94016: LD_VAR 0 6
94020: PPUSH
94021: LD_VAR 0 8
94025: PPUSH
94026: LD_VAR 0 9
94030: PUSH
94031: LD_VAR 0 10
94035: PLUS
94036: PPUSH
94037: CALL_OW 273
94041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
94042: LD_VAR 0 5
94046: PPUSH
94047: LD_VAR 0 7
94051: PPUSH
94052: CALL_OW 488
94056: PUSH
94057: LD_VAR 0 5
94061: PPUSH
94062: LD_VAR 0 7
94066: PPUSH
94067: CALL_OW 428
94071: PPUSH
94072: CALL_OW 247
94076: PUSH
94077: LD_INT 3
94079: PUSH
94080: LD_INT 2
94082: PUSH
94083: EMPTY
94084: LIST
94085: LIST
94086: IN
94087: NOT
94088: AND
94089: IFFALSE 94133
// begin ComMoveXY ( unit , _x , _y ) ;
94091: LD_VAR 0 1
94095: PPUSH
94096: LD_VAR 0 5
94100: PPUSH
94101: LD_VAR 0 7
94105: PPUSH
94106: CALL_OW 111
// result := [ _x , _y ] ;
94110: LD_ADDR_VAR 0 3
94114: PUSH
94115: LD_VAR 0 5
94119: PUSH
94120: LD_VAR 0 7
94124: PUSH
94125: EMPTY
94126: LIST
94127: LIST
94128: ST_TO_ADDR
// exit ;
94129: POP
94130: POP
94131: GO 94137
// end ; end ;
94133: GO 93977
94135: POP
94136: POP
// end ;
94137: LD_VAR 0 3
94141: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
94142: LD_INT 0
94144: PPUSH
94145: PPUSH
94146: PPUSH
// result := 0 ;
94147: LD_ADDR_VAR 0 3
94151: PUSH
94152: LD_INT 0
94154: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
94155: LD_VAR 0 1
94159: PUSH
94160: LD_INT 0
94162: LESS
94163: PUSH
94164: LD_VAR 0 1
94168: PUSH
94169: LD_INT 8
94171: GREATER
94172: OR
94173: PUSH
94174: LD_VAR 0 2
94178: PUSH
94179: LD_INT 0
94181: LESS
94182: OR
94183: PUSH
94184: LD_VAR 0 2
94188: PUSH
94189: LD_INT 8
94191: GREATER
94192: OR
94193: IFFALSE 94197
// exit ;
94195: GO 94272
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
94197: LD_ADDR_VAR 0 4
94201: PUSH
94202: LD_INT 22
94204: PUSH
94205: LD_VAR 0 2
94209: PUSH
94210: EMPTY
94211: LIST
94212: LIST
94213: PPUSH
94214: CALL_OW 69
94218: PUSH
94219: FOR_IN
94220: IFFALSE 94270
// begin un := UnitShoot ( i ) ;
94222: LD_ADDR_VAR 0 5
94226: PUSH
94227: LD_VAR 0 4
94231: PPUSH
94232: CALL_OW 504
94236: ST_TO_ADDR
// if GetSide ( un ) = side1 then
94237: LD_VAR 0 5
94241: PPUSH
94242: CALL_OW 255
94246: PUSH
94247: LD_VAR 0 1
94251: EQUAL
94252: IFFALSE 94268
// begin result := un ;
94254: LD_ADDR_VAR 0 3
94258: PUSH
94259: LD_VAR 0 5
94263: ST_TO_ADDR
// exit ;
94264: POP
94265: POP
94266: GO 94272
// end ; end ;
94268: GO 94219
94270: POP
94271: POP
// end ;
94272: LD_VAR 0 3
94276: RET
// export function GetCargoBay ( units ) ; begin
94277: LD_INT 0
94279: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
94280: LD_ADDR_VAR 0 2
94284: PUSH
94285: LD_VAR 0 1
94289: PPUSH
94290: LD_INT 2
94292: PUSH
94293: LD_INT 34
94295: PUSH
94296: LD_INT 12
94298: PUSH
94299: EMPTY
94300: LIST
94301: LIST
94302: PUSH
94303: LD_INT 34
94305: PUSH
94306: LD_INT 51
94308: PUSH
94309: EMPTY
94310: LIST
94311: LIST
94312: PUSH
94313: LD_INT 34
94315: PUSH
94316: LD_INT 32
94318: PUSH
94319: EMPTY
94320: LIST
94321: LIST
94322: PUSH
94323: LD_INT 34
94325: PUSH
94326: LD_INT 89
94328: PUSH
94329: EMPTY
94330: LIST
94331: LIST
94332: PUSH
94333: EMPTY
94334: LIST
94335: LIST
94336: LIST
94337: LIST
94338: LIST
94339: PPUSH
94340: CALL_OW 72
94344: ST_TO_ADDR
// end ;
94345: LD_VAR 0 2
94349: RET
// export function Negate ( value ) ; begin
94350: LD_INT 0
94352: PPUSH
// result := not value ;
94353: LD_ADDR_VAR 0 2
94357: PUSH
94358: LD_VAR 0 1
94362: NOT
94363: ST_TO_ADDR
// end ;
94364: LD_VAR 0 2
94368: RET
// export function Inc ( value ) ; begin
94369: LD_INT 0
94371: PPUSH
// result := value + 1 ;
94372: LD_ADDR_VAR 0 2
94376: PUSH
94377: LD_VAR 0 1
94381: PUSH
94382: LD_INT 1
94384: PLUS
94385: ST_TO_ADDR
// end ;
94386: LD_VAR 0 2
94390: RET
// export function Dec ( value ) ; begin
94391: LD_INT 0
94393: PPUSH
// result := value - 1 ;
94394: LD_ADDR_VAR 0 2
94398: PUSH
94399: LD_VAR 0 1
94403: PUSH
94404: LD_INT 1
94406: MINUS
94407: ST_TO_ADDR
// end ;
94408: LD_VAR 0 2
94412: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
94413: LD_INT 0
94415: PPUSH
94416: PPUSH
94417: PPUSH
94418: PPUSH
94419: PPUSH
94420: PPUSH
94421: PPUSH
94422: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
94423: LD_VAR 0 1
94427: PPUSH
94428: LD_VAR 0 2
94432: PPUSH
94433: CALL_OW 488
94437: NOT
94438: PUSH
94439: LD_VAR 0 3
94443: PPUSH
94444: LD_VAR 0 4
94448: PPUSH
94449: CALL_OW 488
94453: NOT
94454: OR
94455: IFFALSE 94468
// begin result := - 1 ;
94457: LD_ADDR_VAR 0 5
94461: PUSH
94462: LD_INT 1
94464: NEG
94465: ST_TO_ADDR
// exit ;
94466: GO 94703
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
94468: LD_ADDR_VAR 0 12
94472: PUSH
94473: LD_VAR 0 1
94477: PPUSH
94478: LD_VAR 0 2
94482: PPUSH
94483: LD_VAR 0 3
94487: PPUSH
94488: LD_VAR 0 4
94492: PPUSH
94493: CALL 93553 0 4
94497: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
94498: LD_ADDR_VAR 0 11
94502: PUSH
94503: LD_VAR 0 1
94507: PPUSH
94508: LD_VAR 0 2
94512: PPUSH
94513: LD_VAR 0 12
94517: PUSH
94518: LD_INT 1
94520: ARRAY
94521: PPUSH
94522: LD_VAR 0 12
94526: PUSH
94527: LD_INT 2
94529: ARRAY
94530: PPUSH
94531: CALL_OW 298
94535: ST_TO_ADDR
// distance := 9999 ;
94536: LD_ADDR_VAR 0 10
94540: PUSH
94541: LD_INT 9999
94543: ST_TO_ADDR
// for i := 0 to 5 do
94544: LD_ADDR_VAR 0 6
94548: PUSH
94549: DOUBLE
94550: LD_INT 0
94552: DEC
94553: ST_TO_ADDR
94554: LD_INT 5
94556: PUSH
94557: FOR_TO
94558: IFFALSE 94701
// begin _x := ShiftX ( x1 , i , centerDist ) ;
94560: LD_ADDR_VAR 0 7
94564: PUSH
94565: LD_VAR 0 1
94569: PPUSH
94570: LD_VAR 0 6
94574: PPUSH
94575: LD_VAR 0 11
94579: PPUSH
94580: CALL_OW 272
94584: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
94585: LD_ADDR_VAR 0 8
94589: PUSH
94590: LD_VAR 0 2
94594: PPUSH
94595: LD_VAR 0 6
94599: PPUSH
94600: LD_VAR 0 11
94604: PPUSH
94605: CALL_OW 273
94609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
94610: LD_VAR 0 7
94614: PPUSH
94615: LD_VAR 0 8
94619: PPUSH
94620: CALL_OW 488
94624: NOT
94625: IFFALSE 94629
// continue ;
94627: GO 94557
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
94629: LD_ADDR_VAR 0 9
94633: PUSH
94634: LD_VAR 0 12
94638: PUSH
94639: LD_INT 1
94641: ARRAY
94642: PPUSH
94643: LD_VAR 0 12
94647: PUSH
94648: LD_INT 2
94650: ARRAY
94651: PPUSH
94652: LD_VAR 0 7
94656: PPUSH
94657: LD_VAR 0 8
94661: PPUSH
94662: CALL_OW 298
94666: ST_TO_ADDR
// if tmp < distance then
94667: LD_VAR 0 9
94671: PUSH
94672: LD_VAR 0 10
94676: LESS
94677: IFFALSE 94699
// begin result := i ;
94679: LD_ADDR_VAR 0 5
94683: PUSH
94684: LD_VAR 0 6
94688: ST_TO_ADDR
// distance := tmp ;
94689: LD_ADDR_VAR 0 10
94693: PUSH
94694: LD_VAR 0 9
94698: ST_TO_ADDR
// end ; end ;
94699: GO 94557
94701: POP
94702: POP
// end ;
94703: LD_VAR 0 5
94707: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94708: LD_INT 0
94710: PPUSH
94711: PPUSH
// if not driver or not IsInUnit ( driver ) then
94712: LD_VAR 0 1
94716: NOT
94717: PUSH
94718: LD_VAR 0 1
94722: PPUSH
94723: CALL_OW 310
94727: NOT
94728: OR
94729: IFFALSE 94733
// exit ;
94731: GO 94823
// vehicle := IsInUnit ( driver ) ;
94733: LD_ADDR_VAR 0 3
94737: PUSH
94738: LD_VAR 0 1
94742: PPUSH
94743: CALL_OW 310
94747: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94748: LD_VAR 0 1
94752: PPUSH
94753: LD_STRING \
94755: PUSH
94756: LD_INT 0
94758: PUSH
94759: LD_INT 0
94761: PUSH
94762: LD_INT 0
94764: PUSH
94765: LD_INT 0
94767: PUSH
94768: LD_INT 0
94770: PUSH
94771: LD_INT 0
94773: PUSH
94774: EMPTY
94775: LIST
94776: LIST
94777: LIST
94778: LIST
94779: LIST
94780: LIST
94781: LIST
94782: PUSH
94783: LD_STRING E
94785: PUSH
94786: LD_INT 0
94788: PUSH
94789: LD_INT 0
94791: PUSH
94792: LD_VAR 0 3
94796: PUSH
94797: LD_INT 0
94799: PUSH
94800: LD_INT 0
94802: PUSH
94803: LD_INT 0
94805: PUSH
94806: EMPTY
94807: LIST
94808: LIST
94809: LIST
94810: LIST
94811: LIST
94812: LIST
94813: LIST
94814: PUSH
94815: EMPTY
94816: LIST
94817: LIST
94818: PPUSH
94819: CALL_OW 446
// end ;
94823: LD_VAR 0 2
94827: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94828: LD_INT 0
94830: PPUSH
94831: PPUSH
// if not driver or not IsInUnit ( driver ) then
94832: LD_VAR 0 1
94836: NOT
94837: PUSH
94838: LD_VAR 0 1
94842: PPUSH
94843: CALL_OW 310
94847: NOT
94848: OR
94849: IFFALSE 94853
// exit ;
94851: GO 94943
// vehicle := IsInUnit ( driver ) ;
94853: LD_ADDR_VAR 0 3
94857: PUSH
94858: LD_VAR 0 1
94862: PPUSH
94863: CALL_OW 310
94867: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94868: LD_VAR 0 1
94872: PPUSH
94873: LD_STRING \
94875: PUSH
94876: LD_INT 0
94878: PUSH
94879: LD_INT 0
94881: PUSH
94882: LD_INT 0
94884: PUSH
94885: LD_INT 0
94887: PUSH
94888: LD_INT 0
94890: PUSH
94891: LD_INT 0
94893: PUSH
94894: EMPTY
94895: LIST
94896: LIST
94897: LIST
94898: LIST
94899: LIST
94900: LIST
94901: LIST
94902: PUSH
94903: LD_STRING E
94905: PUSH
94906: LD_INT 0
94908: PUSH
94909: LD_INT 0
94911: PUSH
94912: LD_VAR 0 3
94916: PUSH
94917: LD_INT 0
94919: PUSH
94920: LD_INT 0
94922: PUSH
94923: LD_INT 0
94925: PUSH
94926: EMPTY
94927: LIST
94928: LIST
94929: LIST
94930: LIST
94931: LIST
94932: LIST
94933: LIST
94934: PUSH
94935: EMPTY
94936: LIST
94937: LIST
94938: PPUSH
94939: CALL_OW 447
// end ;
94943: LD_VAR 0 2
94947: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94948: LD_INT 0
94950: PPUSH
94951: PPUSH
94952: PPUSH
// tmp := [ ] ;
94953: LD_ADDR_VAR 0 5
94957: PUSH
94958: EMPTY
94959: ST_TO_ADDR
// for i in units do
94960: LD_ADDR_VAR 0 4
94964: PUSH
94965: LD_VAR 0 1
94969: PUSH
94970: FOR_IN
94971: IFFALSE 95009
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94973: LD_ADDR_VAR 0 5
94977: PUSH
94978: LD_VAR 0 5
94982: PPUSH
94983: LD_VAR 0 5
94987: PUSH
94988: LD_INT 1
94990: PLUS
94991: PPUSH
94992: LD_VAR 0 4
94996: PPUSH
94997: CALL_OW 256
95001: PPUSH
95002: CALL_OW 2
95006: ST_TO_ADDR
95007: GO 94970
95009: POP
95010: POP
// if not tmp then
95011: LD_VAR 0 5
95015: NOT
95016: IFFALSE 95020
// exit ;
95018: GO 95068
// if asc then
95020: LD_VAR 0 2
95024: IFFALSE 95048
// result := SortListByListAsc ( units , tmp ) else
95026: LD_ADDR_VAR 0 3
95030: PUSH
95031: LD_VAR 0 1
95035: PPUSH
95036: LD_VAR 0 5
95040: PPUSH
95041: CALL_OW 76
95045: ST_TO_ADDR
95046: GO 95068
// result := SortListByListDesc ( units , tmp ) ;
95048: LD_ADDR_VAR 0 3
95052: PUSH
95053: LD_VAR 0 1
95057: PPUSH
95058: LD_VAR 0 5
95062: PPUSH
95063: CALL_OW 77
95067: ST_TO_ADDR
// end ;
95068: LD_VAR 0 3
95072: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
95073: LD_INT 0
95075: PPUSH
95076: PPUSH
// task := GetTaskList ( mech ) ;
95077: LD_ADDR_VAR 0 4
95081: PUSH
95082: LD_VAR 0 1
95086: PPUSH
95087: CALL_OW 437
95091: ST_TO_ADDR
// if not task then
95092: LD_VAR 0 4
95096: NOT
95097: IFFALSE 95101
// exit ;
95099: GO 95143
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
95101: LD_ADDR_VAR 0 3
95105: PUSH
95106: LD_VAR 0 4
95110: PUSH
95111: LD_INT 1
95113: ARRAY
95114: PUSH
95115: LD_INT 1
95117: ARRAY
95118: PUSH
95119: LD_STRING r
95121: EQUAL
95122: PUSH
95123: LD_VAR 0 4
95127: PUSH
95128: LD_INT 1
95130: ARRAY
95131: PUSH
95132: LD_INT 4
95134: ARRAY
95135: PUSH
95136: LD_VAR 0 2
95140: EQUAL
95141: AND
95142: ST_TO_ADDR
// end ;
95143: LD_VAR 0 3
95147: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
95148: LD_INT 0
95150: PPUSH
// SetDir ( unit , d ) ;
95151: LD_VAR 0 1
95155: PPUSH
95156: LD_VAR 0 4
95160: PPUSH
95161: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
95165: LD_ADDR_VAR 0 6
95169: PUSH
95170: LD_VAR 0 1
95174: PPUSH
95175: LD_VAR 0 2
95179: PPUSH
95180: LD_VAR 0 3
95184: PPUSH
95185: LD_VAR 0 5
95189: PPUSH
95190: CALL_OW 48
95194: ST_TO_ADDR
// end ;
95195: LD_VAR 0 6
95199: RET
// export function ToNaturalNumber ( number ) ; begin
95200: LD_INT 0
95202: PPUSH
// result := number div 1 ;
95203: LD_ADDR_VAR 0 2
95207: PUSH
95208: LD_VAR 0 1
95212: PUSH
95213: LD_INT 1
95215: DIV
95216: ST_TO_ADDR
// if number < 0 then
95217: LD_VAR 0 1
95221: PUSH
95222: LD_INT 0
95224: LESS
95225: IFFALSE 95235
// result := 0 ;
95227: LD_ADDR_VAR 0 2
95231: PUSH
95232: LD_INT 0
95234: ST_TO_ADDR
// end ;
95235: LD_VAR 0 2
95239: RET
// export function SortByClass ( units , class ) ; var un ; begin
95240: LD_INT 0
95242: PPUSH
95243: PPUSH
// if not units or not class then
95244: LD_VAR 0 1
95248: NOT
95249: PUSH
95250: LD_VAR 0 2
95254: NOT
95255: OR
95256: IFFALSE 95260
// exit ;
95258: GO 95355
// result := [ ] ;
95260: LD_ADDR_VAR 0 3
95264: PUSH
95265: EMPTY
95266: ST_TO_ADDR
// for un in units do
95267: LD_ADDR_VAR 0 4
95271: PUSH
95272: LD_VAR 0 1
95276: PUSH
95277: FOR_IN
95278: IFFALSE 95353
// if GetClass ( un ) = class then
95280: LD_VAR 0 4
95284: PPUSH
95285: CALL_OW 257
95289: PUSH
95290: LD_VAR 0 2
95294: EQUAL
95295: IFFALSE 95322
// result := Insert ( result , 1 , un ) else
95297: LD_ADDR_VAR 0 3
95301: PUSH
95302: LD_VAR 0 3
95306: PPUSH
95307: LD_INT 1
95309: PPUSH
95310: LD_VAR 0 4
95314: PPUSH
95315: CALL_OW 2
95319: ST_TO_ADDR
95320: GO 95351
// result := Replace ( result , result + 1 , un ) ;
95322: LD_ADDR_VAR 0 3
95326: PUSH
95327: LD_VAR 0 3
95331: PPUSH
95332: LD_VAR 0 3
95336: PUSH
95337: LD_INT 1
95339: PLUS
95340: PPUSH
95341: LD_VAR 0 4
95345: PPUSH
95346: CALL_OW 1
95350: ST_TO_ADDR
95351: GO 95277
95353: POP
95354: POP
// end ;
95355: LD_VAR 0 3
95359: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
95360: LD_INT 0
95362: PPUSH
95363: PPUSH
95364: PPUSH
95365: PPUSH
95366: PPUSH
95367: PPUSH
95368: PPUSH
// result := [ ] ;
95369: LD_ADDR_VAR 0 4
95373: PUSH
95374: EMPTY
95375: ST_TO_ADDR
// if x - r < 0 then
95376: LD_VAR 0 1
95380: PUSH
95381: LD_VAR 0 3
95385: MINUS
95386: PUSH
95387: LD_INT 0
95389: LESS
95390: IFFALSE 95402
// min_x := 0 else
95392: LD_ADDR_VAR 0 8
95396: PUSH
95397: LD_INT 0
95399: ST_TO_ADDR
95400: GO 95418
// min_x := x - r ;
95402: LD_ADDR_VAR 0 8
95406: PUSH
95407: LD_VAR 0 1
95411: PUSH
95412: LD_VAR 0 3
95416: MINUS
95417: ST_TO_ADDR
// if y - r < 0 then
95418: LD_VAR 0 2
95422: PUSH
95423: LD_VAR 0 3
95427: MINUS
95428: PUSH
95429: LD_INT 0
95431: LESS
95432: IFFALSE 95444
// min_y := 0 else
95434: LD_ADDR_VAR 0 7
95438: PUSH
95439: LD_INT 0
95441: ST_TO_ADDR
95442: GO 95460
// min_y := y - r ;
95444: LD_ADDR_VAR 0 7
95448: PUSH
95449: LD_VAR 0 2
95453: PUSH
95454: LD_VAR 0 3
95458: MINUS
95459: ST_TO_ADDR
// max_x := x + r ;
95460: LD_ADDR_VAR 0 9
95464: PUSH
95465: LD_VAR 0 1
95469: PUSH
95470: LD_VAR 0 3
95474: PLUS
95475: ST_TO_ADDR
// max_y := y + r ;
95476: LD_ADDR_VAR 0 10
95480: PUSH
95481: LD_VAR 0 2
95485: PUSH
95486: LD_VAR 0 3
95490: PLUS
95491: ST_TO_ADDR
// for _x = min_x to max_x do
95492: LD_ADDR_VAR 0 5
95496: PUSH
95497: DOUBLE
95498: LD_VAR 0 8
95502: DEC
95503: ST_TO_ADDR
95504: LD_VAR 0 9
95508: PUSH
95509: FOR_TO
95510: IFFALSE 95611
// for _y = min_y to max_y do
95512: LD_ADDR_VAR 0 6
95516: PUSH
95517: DOUBLE
95518: LD_VAR 0 7
95522: DEC
95523: ST_TO_ADDR
95524: LD_VAR 0 10
95528: PUSH
95529: FOR_TO
95530: IFFALSE 95607
// begin if not ValidHex ( _x , _y ) then
95532: LD_VAR 0 5
95536: PPUSH
95537: LD_VAR 0 6
95541: PPUSH
95542: CALL_OW 488
95546: NOT
95547: IFFALSE 95551
// continue ;
95549: GO 95529
// if GetResourceTypeXY ( _x , _y ) then
95551: LD_VAR 0 5
95555: PPUSH
95556: LD_VAR 0 6
95560: PPUSH
95561: CALL_OW 283
95565: IFFALSE 95605
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
95567: LD_ADDR_VAR 0 4
95571: PUSH
95572: LD_VAR 0 4
95576: PPUSH
95577: LD_VAR 0 4
95581: PUSH
95582: LD_INT 1
95584: PLUS
95585: PPUSH
95586: LD_VAR 0 5
95590: PUSH
95591: LD_VAR 0 6
95595: PUSH
95596: EMPTY
95597: LIST
95598: LIST
95599: PPUSH
95600: CALL_OW 1
95604: ST_TO_ADDR
// end ;
95605: GO 95529
95607: POP
95608: POP
95609: GO 95509
95611: POP
95612: POP
// end ;
95613: LD_VAR 0 4
95617: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
95618: LD_INT 0
95620: PPUSH
95621: PPUSH
95622: PPUSH
95623: PPUSH
95624: PPUSH
95625: PPUSH
95626: PPUSH
95627: PPUSH
// if not units then
95628: LD_VAR 0 1
95632: NOT
95633: IFFALSE 95637
// exit ;
95635: GO 96165
// result := UnitFilter ( units , [ f_ok ] ) ;
95637: LD_ADDR_VAR 0 3
95641: PUSH
95642: LD_VAR 0 1
95646: PPUSH
95647: LD_INT 50
95649: PUSH
95650: EMPTY
95651: LIST
95652: PPUSH
95653: CALL_OW 72
95657: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
95658: LD_ADDR_VAR 0 8
95662: PUSH
95663: LD_VAR 0 1
95667: PUSH
95668: LD_INT 1
95670: ARRAY
95671: PPUSH
95672: CALL_OW 255
95676: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
95677: LD_ADDR_VAR 0 10
95681: PUSH
95682: LD_INT 29
95684: PUSH
95685: LD_INT 91
95687: PUSH
95688: LD_INT 49
95690: PUSH
95691: EMPTY
95692: LIST
95693: LIST
95694: LIST
95695: ST_TO_ADDR
// if not result then
95696: LD_VAR 0 3
95700: NOT
95701: IFFALSE 95705
// exit ;
95703: GO 96165
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
95705: LD_ADDR_VAR 0 5
95709: PUSH
95710: LD_INT 81
95712: PUSH
95713: LD_VAR 0 8
95717: PUSH
95718: EMPTY
95719: LIST
95720: LIST
95721: PPUSH
95722: CALL_OW 69
95726: ST_TO_ADDR
// for i in result do
95727: LD_ADDR_VAR 0 4
95731: PUSH
95732: LD_VAR 0 3
95736: PUSH
95737: FOR_IN
95738: IFFALSE 96163
// begin tag := GetTag ( i ) + 1 ;
95740: LD_ADDR_VAR 0 9
95744: PUSH
95745: LD_VAR 0 4
95749: PPUSH
95750: CALL_OW 110
95754: PUSH
95755: LD_INT 1
95757: PLUS
95758: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
95759: LD_ADDR_VAR 0 7
95763: PUSH
95764: LD_VAR 0 4
95768: PPUSH
95769: CALL_OW 250
95773: PPUSH
95774: LD_VAR 0 4
95778: PPUSH
95779: CALL_OW 251
95783: PPUSH
95784: LD_INT 4
95786: PPUSH
95787: CALL 95360 0 3
95791: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
95792: LD_VAR 0 4
95796: PPUSH
95797: CALL_OW 247
95801: PUSH
95802: LD_INT 2
95804: EQUAL
95805: PUSH
95806: LD_VAR 0 7
95810: PUSH
95811: LD_INT 2
95813: GREATER
95814: AND
95815: PUSH
95816: LD_VAR 0 4
95820: PPUSH
95821: CALL_OW 264
95825: PUSH
95826: LD_VAR 0 10
95830: IN
95831: NOT
95832: AND
95833: IFFALSE 95872
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95835: LD_VAR 0 4
95839: PPUSH
95840: LD_VAR 0 7
95844: PUSH
95845: LD_INT 1
95847: ARRAY
95848: PUSH
95849: LD_INT 1
95851: ARRAY
95852: PPUSH
95853: LD_VAR 0 7
95857: PUSH
95858: LD_INT 1
95860: ARRAY
95861: PUSH
95862: LD_INT 2
95864: ARRAY
95865: PPUSH
95866: CALL_OW 116
95870: GO 96161
// if path > tag then
95872: LD_VAR 0 2
95876: PUSH
95877: LD_VAR 0 9
95881: GREATER
95882: IFFALSE 96090
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95884: LD_ADDR_VAR 0 6
95888: PUSH
95889: LD_VAR 0 5
95893: PPUSH
95894: LD_INT 91
95896: PUSH
95897: LD_VAR 0 4
95901: PUSH
95902: LD_INT 8
95904: PUSH
95905: EMPTY
95906: LIST
95907: LIST
95908: LIST
95909: PPUSH
95910: CALL_OW 72
95914: ST_TO_ADDR
// if nearEnemy then
95915: LD_VAR 0 6
95919: IFFALSE 95988
// begin if GetWeapon ( i ) = ru_time_lapser then
95921: LD_VAR 0 4
95925: PPUSH
95926: CALL_OW 264
95930: PUSH
95931: LD_INT 49
95933: EQUAL
95934: IFFALSE 95962
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95936: LD_VAR 0 4
95940: PPUSH
95941: LD_VAR 0 6
95945: PPUSH
95946: LD_VAR 0 4
95950: PPUSH
95951: CALL_OW 74
95955: PPUSH
95956: CALL_OW 112
95960: GO 95986
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95962: LD_VAR 0 4
95966: PPUSH
95967: LD_VAR 0 6
95971: PPUSH
95972: LD_VAR 0 4
95976: PPUSH
95977: CALL_OW 74
95981: PPUSH
95982: CALL 97236 0 2
// end else
95986: GO 96088
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95988: LD_VAR 0 4
95992: PPUSH
95993: LD_VAR 0 2
95997: PUSH
95998: LD_VAR 0 9
96002: ARRAY
96003: PUSH
96004: LD_INT 1
96006: ARRAY
96007: PPUSH
96008: LD_VAR 0 2
96012: PUSH
96013: LD_VAR 0 9
96017: ARRAY
96018: PUSH
96019: LD_INT 2
96021: ARRAY
96022: PPUSH
96023: CALL_OW 297
96027: PUSH
96028: LD_INT 6
96030: GREATER
96031: IFFALSE 96074
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
96033: LD_VAR 0 4
96037: PPUSH
96038: LD_VAR 0 2
96042: PUSH
96043: LD_VAR 0 9
96047: ARRAY
96048: PUSH
96049: LD_INT 1
96051: ARRAY
96052: PPUSH
96053: LD_VAR 0 2
96057: PUSH
96058: LD_VAR 0 9
96062: ARRAY
96063: PUSH
96064: LD_INT 2
96066: ARRAY
96067: PPUSH
96068: CALL_OW 114
96072: GO 96088
// SetTag ( i , tag ) ;
96074: LD_VAR 0 4
96078: PPUSH
96079: LD_VAR 0 9
96083: PPUSH
96084: CALL_OW 109
// end else
96088: GO 96161
// if enemy then
96090: LD_VAR 0 5
96094: IFFALSE 96161
// begin if GetWeapon ( i ) = ru_time_lapser then
96096: LD_VAR 0 4
96100: PPUSH
96101: CALL_OW 264
96105: PUSH
96106: LD_INT 49
96108: EQUAL
96109: IFFALSE 96137
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
96111: LD_VAR 0 4
96115: PPUSH
96116: LD_VAR 0 5
96120: PPUSH
96121: LD_VAR 0 4
96125: PPUSH
96126: CALL_OW 74
96130: PPUSH
96131: CALL_OW 112
96135: GO 96161
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
96137: LD_VAR 0 4
96141: PPUSH
96142: LD_VAR 0 5
96146: PPUSH
96147: LD_VAR 0 4
96151: PPUSH
96152: CALL_OW 74
96156: PPUSH
96157: CALL 97236 0 2
// end ; end ;
96161: GO 95737
96163: POP
96164: POP
// end ;
96165: LD_VAR 0 3
96169: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
96170: LD_INT 0
96172: PPUSH
96173: PPUSH
96174: PPUSH
// if not unit or IsInUnit ( unit ) then
96175: LD_VAR 0 1
96179: NOT
96180: PUSH
96181: LD_VAR 0 1
96185: PPUSH
96186: CALL_OW 310
96190: OR
96191: IFFALSE 96195
// exit ;
96193: GO 96286
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
96195: LD_ADDR_VAR 0 4
96199: PUSH
96200: LD_VAR 0 1
96204: PPUSH
96205: CALL_OW 250
96209: PPUSH
96210: LD_VAR 0 2
96214: PPUSH
96215: LD_INT 1
96217: PPUSH
96218: CALL_OW 272
96222: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
96223: LD_ADDR_VAR 0 5
96227: PUSH
96228: LD_VAR 0 1
96232: PPUSH
96233: CALL_OW 251
96237: PPUSH
96238: LD_VAR 0 2
96242: PPUSH
96243: LD_INT 1
96245: PPUSH
96246: CALL_OW 273
96250: ST_TO_ADDR
// if ValidHex ( x , y ) then
96251: LD_VAR 0 4
96255: PPUSH
96256: LD_VAR 0 5
96260: PPUSH
96261: CALL_OW 488
96265: IFFALSE 96286
// ComTurnXY ( unit , x , y ) ;
96267: LD_VAR 0 1
96271: PPUSH
96272: LD_VAR 0 4
96276: PPUSH
96277: LD_VAR 0 5
96281: PPUSH
96282: CALL_OW 118
// end ;
96286: LD_VAR 0 3
96290: RET
// export function SeeUnits ( side , units ) ; var i ; begin
96291: LD_INT 0
96293: PPUSH
96294: PPUSH
// result := false ;
96295: LD_ADDR_VAR 0 3
96299: PUSH
96300: LD_INT 0
96302: ST_TO_ADDR
// if not units then
96303: LD_VAR 0 2
96307: NOT
96308: IFFALSE 96312
// exit ;
96310: GO 96357
// for i in units do
96312: LD_ADDR_VAR 0 4
96316: PUSH
96317: LD_VAR 0 2
96321: PUSH
96322: FOR_IN
96323: IFFALSE 96355
// if See ( side , i ) then
96325: LD_VAR 0 1
96329: PPUSH
96330: LD_VAR 0 4
96334: PPUSH
96335: CALL_OW 292
96339: IFFALSE 96353
// begin result := true ;
96341: LD_ADDR_VAR 0 3
96345: PUSH
96346: LD_INT 1
96348: ST_TO_ADDR
// exit ;
96349: POP
96350: POP
96351: GO 96357
// end ;
96353: GO 96322
96355: POP
96356: POP
// end ;
96357: LD_VAR 0 3
96361: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
96362: LD_INT 0
96364: PPUSH
96365: PPUSH
96366: PPUSH
96367: PPUSH
// if not unit or not points then
96368: LD_VAR 0 1
96372: NOT
96373: PUSH
96374: LD_VAR 0 2
96378: NOT
96379: OR
96380: IFFALSE 96384
// exit ;
96382: GO 96474
// dist := 99999 ;
96384: LD_ADDR_VAR 0 5
96388: PUSH
96389: LD_INT 99999
96391: ST_TO_ADDR
// for i in points do
96392: LD_ADDR_VAR 0 4
96396: PUSH
96397: LD_VAR 0 2
96401: PUSH
96402: FOR_IN
96403: IFFALSE 96472
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
96405: LD_ADDR_VAR 0 6
96409: PUSH
96410: LD_VAR 0 1
96414: PPUSH
96415: LD_VAR 0 4
96419: PUSH
96420: LD_INT 1
96422: ARRAY
96423: PPUSH
96424: LD_VAR 0 4
96428: PUSH
96429: LD_INT 2
96431: ARRAY
96432: PPUSH
96433: CALL_OW 297
96437: ST_TO_ADDR
// if tmpDist < dist then
96438: LD_VAR 0 6
96442: PUSH
96443: LD_VAR 0 5
96447: LESS
96448: IFFALSE 96470
// begin result := i ;
96450: LD_ADDR_VAR 0 3
96454: PUSH
96455: LD_VAR 0 4
96459: ST_TO_ADDR
// dist := tmpDist ;
96460: LD_ADDR_VAR 0 5
96464: PUSH
96465: LD_VAR 0 6
96469: ST_TO_ADDR
// end ; end ;
96470: GO 96402
96472: POP
96473: POP
// end ;
96474: LD_VAR 0 3
96478: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
96479: LD_INT 0
96481: PPUSH
// uc_side := side ;
96482: LD_ADDR_OWVAR 20
96486: PUSH
96487: LD_VAR 0 1
96491: ST_TO_ADDR
// uc_nation := 3 ;
96492: LD_ADDR_OWVAR 21
96496: PUSH
96497: LD_INT 3
96499: ST_TO_ADDR
// vc_chassis := 25 ;
96500: LD_ADDR_OWVAR 37
96504: PUSH
96505: LD_INT 25
96507: ST_TO_ADDR
// vc_engine := engine_siberite ;
96508: LD_ADDR_OWVAR 39
96512: PUSH
96513: LD_INT 3
96515: ST_TO_ADDR
// vc_control := control_computer ;
96516: LD_ADDR_OWVAR 38
96520: PUSH
96521: LD_INT 3
96523: ST_TO_ADDR
// vc_weapon := 59 ;
96524: LD_ADDR_OWVAR 40
96528: PUSH
96529: LD_INT 59
96531: ST_TO_ADDR
// result := CreateVehicle ;
96532: LD_ADDR_VAR 0 5
96536: PUSH
96537: CALL_OW 45
96541: ST_TO_ADDR
// SetDir ( result , d ) ;
96542: LD_VAR 0 5
96546: PPUSH
96547: LD_VAR 0 4
96551: PPUSH
96552: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
96556: LD_VAR 0 5
96560: PPUSH
96561: LD_VAR 0 2
96565: PPUSH
96566: LD_VAR 0 3
96570: PPUSH
96571: LD_INT 0
96573: PPUSH
96574: CALL_OW 48
// end ;
96578: LD_VAR 0 5
96582: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
96583: LD_INT 0
96585: PPUSH
96586: PPUSH
96587: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
96588: LD_ADDR_VAR 0 2
96592: PUSH
96593: LD_INT 0
96595: PUSH
96596: LD_INT 0
96598: PUSH
96599: LD_INT 0
96601: PUSH
96602: LD_INT 0
96604: PUSH
96605: EMPTY
96606: LIST
96607: LIST
96608: LIST
96609: LIST
96610: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
96611: LD_VAR 0 1
96615: NOT
96616: PUSH
96617: LD_VAR 0 1
96621: PPUSH
96622: CALL_OW 264
96626: PUSH
96627: LD_INT 12
96629: PUSH
96630: LD_INT 51
96632: PUSH
96633: LD_INT 32
96635: PUSH
96636: LD_INT 89
96638: PUSH
96639: EMPTY
96640: LIST
96641: LIST
96642: LIST
96643: LIST
96644: IN
96645: NOT
96646: OR
96647: IFFALSE 96651
// exit ;
96649: GO 96749
// for i := 1 to 3 do
96651: LD_ADDR_VAR 0 3
96655: PUSH
96656: DOUBLE
96657: LD_INT 1
96659: DEC
96660: ST_TO_ADDR
96661: LD_INT 3
96663: PUSH
96664: FOR_TO
96665: IFFALSE 96747
// begin tmp := GetCargo ( cargo , i ) ;
96667: LD_ADDR_VAR 0 4
96671: PUSH
96672: LD_VAR 0 1
96676: PPUSH
96677: LD_VAR 0 3
96681: PPUSH
96682: CALL_OW 289
96686: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
96687: LD_ADDR_VAR 0 2
96691: PUSH
96692: LD_VAR 0 2
96696: PPUSH
96697: LD_VAR 0 3
96701: PPUSH
96702: LD_VAR 0 4
96706: PPUSH
96707: CALL_OW 1
96711: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
96712: LD_ADDR_VAR 0 2
96716: PUSH
96717: LD_VAR 0 2
96721: PPUSH
96722: LD_INT 4
96724: PPUSH
96725: LD_VAR 0 2
96729: PUSH
96730: LD_INT 4
96732: ARRAY
96733: PUSH
96734: LD_VAR 0 4
96738: PLUS
96739: PPUSH
96740: CALL_OW 1
96744: ST_TO_ADDR
// end ;
96745: GO 96664
96747: POP
96748: POP
// end ;
96749: LD_VAR 0 2
96753: RET
// export function Length ( array ) ; begin
96754: LD_INT 0
96756: PPUSH
// result := array + 0 ;
96757: LD_ADDR_VAR 0 2
96761: PUSH
96762: LD_VAR 0 1
96766: PUSH
96767: LD_INT 0
96769: PLUS
96770: ST_TO_ADDR
// end ;
96771: LD_VAR 0 2
96775: RET
// export function PrepareArray ( array ) ; begin
96776: LD_INT 0
96778: PPUSH
// result := array diff 0 ;
96779: LD_ADDR_VAR 0 2
96783: PUSH
96784: LD_VAR 0 1
96788: PUSH
96789: LD_INT 0
96791: DIFF
96792: ST_TO_ADDR
// if not result [ 1 ] then
96793: LD_VAR 0 2
96797: PUSH
96798: LD_INT 1
96800: ARRAY
96801: NOT
96802: IFFALSE 96822
// result := Delete ( result , 1 ) ;
96804: LD_ADDR_VAR 0 2
96808: PUSH
96809: LD_VAR 0 2
96813: PPUSH
96814: LD_INT 1
96816: PPUSH
96817: CALL_OW 3
96821: ST_TO_ADDR
// end ;
96822: LD_VAR 0 2
96826: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96827: LD_INT 0
96829: PPUSH
96830: PPUSH
96831: PPUSH
96832: PPUSH
// sibRocketRange := 25 ;
96833: LD_ADDR_VAR 0 6
96837: PUSH
96838: LD_INT 25
96840: ST_TO_ADDR
// result := false ;
96841: LD_ADDR_VAR 0 4
96845: PUSH
96846: LD_INT 0
96848: ST_TO_ADDR
// for i := 0 to 5 do
96849: LD_ADDR_VAR 0 5
96853: PUSH
96854: DOUBLE
96855: LD_INT 0
96857: DEC
96858: ST_TO_ADDR
96859: LD_INT 5
96861: PUSH
96862: FOR_TO
96863: IFFALSE 96930
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96865: LD_VAR 0 1
96869: PPUSH
96870: LD_VAR 0 5
96874: PPUSH
96875: LD_VAR 0 6
96879: PPUSH
96880: CALL_OW 272
96884: PPUSH
96885: LD_VAR 0 2
96889: PPUSH
96890: LD_VAR 0 5
96894: PPUSH
96895: LD_VAR 0 6
96899: PPUSH
96900: CALL_OW 273
96904: PPUSH
96905: LD_VAR 0 3
96909: PPUSH
96910: CALL_OW 309
96914: IFFALSE 96928
// begin result := true ;
96916: LD_ADDR_VAR 0 4
96920: PUSH
96921: LD_INT 1
96923: ST_TO_ADDR
// exit ;
96924: POP
96925: POP
96926: GO 96932
// end ;
96928: GO 96862
96930: POP
96931: POP
// end ;
96932: LD_VAR 0 4
96936: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
96937: LD_INT 0
96939: PPUSH
96940: PPUSH
96941: PPUSH
// if btype = b_depot then
96942: LD_VAR 0 2
96946: PUSH
96947: LD_INT 0
96949: EQUAL
96950: IFFALSE 96962
// begin result := true ;
96952: LD_ADDR_VAR 0 3
96956: PUSH
96957: LD_INT 1
96959: ST_TO_ADDR
// exit ;
96960: GO 97078
// end ; pom := GetBase ( depot ) ;
96962: LD_ADDR_VAR 0 4
96966: PUSH
96967: LD_VAR 0 1
96971: PPUSH
96972: CALL_OW 274
96976: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
96977: LD_ADDR_VAR 0 5
96981: PUSH
96982: LD_VAR 0 2
96986: PPUSH
96987: LD_VAR 0 1
96991: PPUSH
96992: CALL_OW 248
96996: PPUSH
96997: CALL_OW 450
97001: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
97002: LD_ADDR_VAR 0 3
97006: PUSH
97007: LD_VAR 0 4
97011: PPUSH
97012: LD_INT 1
97014: PPUSH
97015: CALL_OW 275
97019: PUSH
97020: LD_VAR 0 5
97024: PUSH
97025: LD_INT 1
97027: ARRAY
97028: GREATEREQUAL
97029: PUSH
97030: LD_VAR 0 4
97034: PPUSH
97035: LD_INT 2
97037: PPUSH
97038: CALL_OW 275
97042: PUSH
97043: LD_VAR 0 5
97047: PUSH
97048: LD_INT 2
97050: ARRAY
97051: GREATEREQUAL
97052: AND
97053: PUSH
97054: LD_VAR 0 4
97058: PPUSH
97059: LD_INT 3
97061: PPUSH
97062: CALL_OW 275
97066: PUSH
97067: LD_VAR 0 5
97071: PUSH
97072: LD_INT 3
97074: ARRAY
97075: GREATEREQUAL
97076: AND
97077: ST_TO_ADDR
// end ;
97078: LD_VAR 0 3
97082: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
97083: LD_INT 0
97085: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
97086: LD_VAR 0 1
97090: PPUSH
97091: LD_VAR 0 2
97095: PPUSH
97096: LD_INT 0
97098: PPUSH
97099: LD_INT 0
97101: PPUSH
97102: LD_INT 1
97104: PPUSH
97105: LD_INT 0
97107: PPUSH
97108: CALL_OW 587
// end ;
97112: LD_VAR 0 3
97116: RET
// export function CenterOnNow ( unit ) ; begin
97117: LD_INT 0
97119: PPUSH
// result := IsInUnit ( unit ) ;
97120: LD_ADDR_VAR 0 2
97124: PUSH
97125: LD_VAR 0 1
97129: PPUSH
97130: CALL_OW 310
97134: ST_TO_ADDR
// if not result then
97135: LD_VAR 0 2
97139: NOT
97140: IFFALSE 97152
// result := unit ;
97142: LD_ADDR_VAR 0 2
97146: PUSH
97147: LD_VAR 0 1
97151: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
97152: LD_VAR 0 1
97156: PPUSH
97157: CALL_OW 87
// end ;
97161: LD_VAR 0 2
97165: RET
// export function ComMoveHex ( unit , hex ) ; begin
97166: LD_INT 0
97168: PPUSH
// if not hex then
97169: LD_VAR 0 2
97173: NOT
97174: IFFALSE 97178
// exit ;
97176: GO 97231
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
97178: LD_VAR 0 2
97182: PUSH
97183: LD_INT 1
97185: ARRAY
97186: PPUSH
97187: LD_VAR 0 2
97191: PUSH
97192: LD_INT 2
97194: ARRAY
97195: PPUSH
97196: CALL_OW 428
97200: IFFALSE 97204
// exit ;
97202: GO 97231
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
97204: LD_VAR 0 1
97208: PPUSH
97209: LD_VAR 0 2
97213: PUSH
97214: LD_INT 1
97216: ARRAY
97217: PPUSH
97218: LD_VAR 0 2
97222: PUSH
97223: LD_INT 2
97225: ARRAY
97226: PPUSH
97227: CALL_OW 111
// end ;
97231: LD_VAR 0 3
97235: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
97236: LD_INT 0
97238: PPUSH
97239: PPUSH
97240: PPUSH
// if not unit or not enemy then
97241: LD_VAR 0 1
97245: NOT
97246: PUSH
97247: LD_VAR 0 2
97251: NOT
97252: OR
97253: IFFALSE 97257
// exit ;
97255: GO 97381
// x := GetX ( enemy ) ;
97257: LD_ADDR_VAR 0 4
97261: PUSH
97262: LD_VAR 0 2
97266: PPUSH
97267: CALL_OW 250
97271: ST_TO_ADDR
// y := GetY ( enemy ) ;
97272: LD_ADDR_VAR 0 5
97276: PUSH
97277: LD_VAR 0 2
97281: PPUSH
97282: CALL_OW 251
97286: ST_TO_ADDR
// if ValidHex ( x , y ) then
97287: LD_VAR 0 4
97291: PPUSH
97292: LD_VAR 0 5
97296: PPUSH
97297: CALL_OW 488
97301: IFFALSE 97381
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
97303: LD_VAR 0 2
97307: PPUSH
97308: CALL_OW 247
97312: PUSH
97313: LD_INT 3
97315: PUSH
97316: LD_INT 2
97318: PUSH
97319: EMPTY
97320: LIST
97321: LIST
97322: IN
97323: PUSH
97324: LD_VAR 0 1
97328: PPUSH
97329: CALL_OW 255
97333: PPUSH
97334: LD_VAR 0 2
97338: PPUSH
97339: CALL_OW 292
97343: OR
97344: IFFALSE 97362
// ComAttackUnit ( unit , enemy ) else
97346: LD_VAR 0 1
97350: PPUSH
97351: LD_VAR 0 2
97355: PPUSH
97356: CALL_OW 115
97360: GO 97381
// ComAgressiveMove ( unit , x , y ) ;
97362: LD_VAR 0 1
97366: PPUSH
97367: LD_VAR 0 4
97371: PPUSH
97372: LD_VAR 0 5
97376: PPUSH
97377: CALL_OW 114
// end ;
97381: LD_VAR 0 3
97385: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
97386: LD_INT 0
97388: PPUSH
97389: PPUSH
97390: PPUSH
// list := AreaToList ( area , 0 ) ;
97391: LD_ADDR_VAR 0 5
97395: PUSH
97396: LD_VAR 0 1
97400: PPUSH
97401: LD_INT 0
97403: PPUSH
97404: CALL_OW 517
97408: ST_TO_ADDR
// if not list then
97409: LD_VAR 0 5
97413: NOT
97414: IFFALSE 97418
// exit ;
97416: GO 97548
// if all then
97418: LD_VAR 0 2
97422: IFFALSE 97510
// begin for i := 1 to list [ 1 ] do
97424: LD_ADDR_VAR 0 4
97428: PUSH
97429: DOUBLE
97430: LD_INT 1
97432: DEC
97433: ST_TO_ADDR
97434: LD_VAR 0 5
97438: PUSH
97439: LD_INT 1
97441: ARRAY
97442: PUSH
97443: FOR_TO
97444: IFFALSE 97506
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
97446: LD_ADDR_VAR 0 3
97450: PUSH
97451: LD_VAR 0 3
97455: PPUSH
97456: LD_VAR 0 3
97460: PUSH
97461: LD_INT 1
97463: PLUS
97464: PPUSH
97465: LD_VAR 0 5
97469: PUSH
97470: LD_INT 1
97472: ARRAY
97473: PUSH
97474: LD_VAR 0 4
97478: ARRAY
97479: PUSH
97480: LD_VAR 0 5
97484: PUSH
97485: LD_INT 2
97487: ARRAY
97488: PUSH
97489: LD_VAR 0 4
97493: ARRAY
97494: PUSH
97495: EMPTY
97496: LIST
97497: LIST
97498: PPUSH
97499: CALL_OW 1
97503: ST_TO_ADDR
97504: GO 97443
97506: POP
97507: POP
// exit ;
97508: GO 97548
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
97510: LD_ADDR_VAR 0 3
97514: PUSH
97515: LD_VAR 0 5
97519: PUSH
97520: LD_INT 1
97522: ARRAY
97523: PUSH
97524: LD_INT 1
97526: ARRAY
97527: PUSH
97528: LD_VAR 0 5
97532: PUSH
97533: LD_INT 2
97535: ARRAY
97536: PUSH
97537: LD_INT 1
97539: ARRAY
97540: PUSH
97541: EMPTY
97542: LIST
97543: LIST
97544: PUSH
97545: EMPTY
97546: LIST
97547: ST_TO_ADDR
// end ;
97548: LD_VAR 0 3
97552: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
97553: LD_INT 0
97555: PPUSH
97556: PPUSH
// list := AreaToList ( area , 0 ) ;
97557: LD_ADDR_VAR 0 4
97561: PUSH
97562: LD_VAR 0 1
97566: PPUSH
97567: LD_INT 0
97569: PPUSH
97570: CALL_OW 517
97574: ST_TO_ADDR
// if not list then
97575: LD_VAR 0 4
97579: NOT
97580: IFFALSE 97584
// exit ;
97582: GO 97625
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
97584: LD_ADDR_VAR 0 3
97588: PUSH
97589: LD_VAR 0 4
97593: PUSH
97594: LD_INT 1
97596: ARRAY
97597: PUSH
97598: LD_INT 1
97600: ARRAY
97601: PUSH
97602: LD_VAR 0 4
97606: PUSH
97607: LD_INT 2
97609: ARRAY
97610: PUSH
97611: LD_INT 1
97613: ARRAY
97614: PUSH
97615: LD_VAR 0 2
97619: PUSH
97620: EMPTY
97621: LIST
97622: LIST
97623: LIST
97624: ST_TO_ADDR
// end ;
97625: LD_VAR 0 3
97629: RET
// export function First ( array ) ; begin
97630: LD_INT 0
97632: PPUSH
// if not array then
97633: LD_VAR 0 1
97637: NOT
97638: IFFALSE 97642
// exit ;
97640: GO 97656
// result := array [ 1 ] ;
97642: LD_ADDR_VAR 0 2
97646: PUSH
97647: LD_VAR 0 1
97651: PUSH
97652: LD_INT 1
97654: ARRAY
97655: ST_TO_ADDR
// end ;
97656: LD_VAR 0 2
97660: RET
// export function Last ( array ) ; begin
97661: LD_INT 0
97663: PPUSH
// if not array then
97664: LD_VAR 0 1
97668: NOT
97669: IFFALSE 97673
// exit ;
97671: GO 97689
// result := array [ array ] ;
97673: LD_ADDR_VAR 0 2
97677: PUSH
97678: LD_VAR 0 1
97682: PUSH
97683: LD_VAR 0 1
97687: ARRAY
97688: ST_TO_ADDR
// end ;
97689: LD_VAR 0 2
97693: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
97694: LD_INT 0
97696: PPUSH
97697: PPUSH
// result := [ ] ;
97698: LD_ADDR_VAR 0 5
97702: PUSH
97703: EMPTY
97704: ST_TO_ADDR
// if not array then
97705: LD_VAR 0 1
97709: NOT
97710: IFFALSE 97714
// exit ;
97712: GO 97826
// for i := 1 to array do
97714: LD_ADDR_VAR 0 6
97718: PUSH
97719: DOUBLE
97720: LD_INT 1
97722: DEC
97723: ST_TO_ADDR
97724: LD_VAR 0 1
97728: PUSH
97729: FOR_TO
97730: IFFALSE 97824
// if array [ i ] [ index ] = value then
97732: LD_VAR 0 1
97736: PUSH
97737: LD_VAR 0 6
97741: ARRAY
97742: PUSH
97743: LD_VAR 0 2
97747: ARRAY
97748: PUSH
97749: LD_VAR 0 3
97753: EQUAL
97754: IFFALSE 97822
// begin if indexColumn then
97756: LD_VAR 0 4
97760: IFFALSE 97796
// result := Join ( result , array [ i ] [ indexColumn ] ) else
97762: LD_ADDR_VAR 0 5
97766: PUSH
97767: LD_VAR 0 5
97771: PPUSH
97772: LD_VAR 0 1
97776: PUSH
97777: LD_VAR 0 6
97781: ARRAY
97782: PUSH
97783: LD_VAR 0 4
97787: ARRAY
97788: PPUSH
97789: CALL 93008 0 2
97793: ST_TO_ADDR
97794: GO 97822
// result := Join ( result , array [ i ] ) ;
97796: LD_ADDR_VAR 0 5
97800: PUSH
97801: LD_VAR 0 5
97805: PPUSH
97806: LD_VAR 0 1
97810: PUSH
97811: LD_VAR 0 6
97815: ARRAY
97816: PPUSH
97817: CALL 93008 0 2
97821: ST_TO_ADDR
// end ;
97822: GO 97729
97824: POP
97825: POP
// end ;
97826: LD_VAR 0 5
97830: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
97831: LD_INT 0
97833: PPUSH
// if not vehicles or not parkingPoint then
97834: LD_VAR 0 1
97838: NOT
97839: PUSH
97840: LD_VAR 0 2
97844: NOT
97845: OR
97846: IFFALSE 97850
// exit ;
97848: GO 97948
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
97850: LD_ADDR_VAR 0 1
97854: PUSH
97855: LD_VAR 0 1
97859: PPUSH
97860: LD_INT 50
97862: PUSH
97863: EMPTY
97864: LIST
97865: PUSH
97866: LD_INT 3
97868: PUSH
97869: LD_INT 92
97871: PUSH
97872: LD_VAR 0 2
97876: PUSH
97877: LD_INT 1
97879: ARRAY
97880: PUSH
97881: LD_VAR 0 2
97885: PUSH
97886: LD_INT 2
97888: ARRAY
97889: PUSH
97890: LD_INT 8
97892: PUSH
97893: EMPTY
97894: LIST
97895: LIST
97896: LIST
97897: LIST
97898: PUSH
97899: EMPTY
97900: LIST
97901: LIST
97902: PUSH
97903: EMPTY
97904: LIST
97905: LIST
97906: PPUSH
97907: CALL_OW 72
97911: ST_TO_ADDR
// if not vehicles then
97912: LD_VAR 0 1
97916: NOT
97917: IFFALSE 97921
// exit ;
97919: GO 97948
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
97921: LD_VAR 0 1
97925: PPUSH
97926: LD_VAR 0 2
97930: PUSH
97931: LD_INT 1
97933: ARRAY
97934: PPUSH
97935: LD_VAR 0 2
97939: PUSH
97940: LD_INT 2
97942: ARRAY
97943: PPUSH
97944: CALL_OW 111
// end ;
97948: LD_VAR 0 3
97952: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
97953: LD_INT 0
97955: PPUSH
97956: PPUSH
97957: PPUSH
// if not side or not area then
97958: LD_VAR 0 1
97962: NOT
97963: PUSH
97964: LD_VAR 0 2
97968: NOT
97969: OR
97970: IFFALSE 97974
// exit ;
97972: GO 98093
// tmp := AreaToList ( area , 0 ) ;
97974: LD_ADDR_VAR 0 5
97978: PUSH
97979: LD_VAR 0 2
97983: PPUSH
97984: LD_INT 0
97986: PPUSH
97987: CALL_OW 517
97991: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
97992: LD_ADDR_VAR 0 4
97996: PUSH
97997: DOUBLE
97998: LD_INT 1
98000: DEC
98001: ST_TO_ADDR
98002: LD_VAR 0 5
98006: PUSH
98007: LD_INT 1
98009: ARRAY
98010: PUSH
98011: FOR_TO
98012: IFFALSE 98091
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
98014: LD_VAR 0 5
98018: PUSH
98019: LD_INT 1
98021: ARRAY
98022: PUSH
98023: LD_VAR 0 4
98027: ARRAY
98028: PPUSH
98029: LD_VAR 0 5
98033: PUSH
98034: LD_INT 2
98036: ARRAY
98037: PUSH
98038: LD_VAR 0 4
98042: ARRAY
98043: PPUSH
98044: CALL_OW 351
98048: IFFALSE 98089
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
98050: LD_VAR 0 5
98054: PUSH
98055: LD_INT 1
98057: ARRAY
98058: PUSH
98059: LD_VAR 0 4
98063: ARRAY
98064: PPUSH
98065: LD_VAR 0 5
98069: PUSH
98070: LD_INT 2
98072: ARRAY
98073: PUSH
98074: LD_VAR 0 4
98078: ARRAY
98079: PPUSH
98080: LD_VAR 0 1
98084: PPUSH
98085: CALL_OW 244
// end ;
98089: GO 98011
98091: POP
98092: POP
// end ; end_of_file
98093: LD_VAR 0 3
98097: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
98098: LD_VAR 0 1
98102: PUSH
98103: LD_INT 200
98105: DOUBLE
98106: GREATEREQUAL
98107: IFFALSE 98115
98109: LD_INT 299
98111: DOUBLE
98112: LESSEQUAL
98113: IFTRUE 98117
98115: GO 98149
98117: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
98118: LD_VAR 0 1
98122: PPUSH
98123: LD_VAR 0 2
98127: PPUSH
98128: LD_VAR 0 3
98132: PPUSH
98133: LD_VAR 0 4
98137: PPUSH
98138: LD_VAR 0 5
98142: PPUSH
98143: CALL 50514 0 5
98147: GO 98226
98149: LD_INT 300
98151: DOUBLE
98152: GREATEREQUAL
98153: IFFALSE 98161
98155: LD_INT 399
98157: DOUBLE
98158: LESSEQUAL
98159: IFTRUE 98163
98161: GO 98225
98163: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
98164: LD_VAR 0 1
98168: PPUSH
98169: LD_VAR 0 2
98173: PPUSH
98174: LD_VAR 0 3
98178: PPUSH
98179: LD_VAR 0 4
98183: PPUSH
98184: LD_VAR 0 5
98188: PPUSH
98189: LD_VAR 0 6
98193: PPUSH
98194: LD_VAR 0 7
98198: PPUSH
98199: LD_VAR 0 8
98203: PPUSH
98204: LD_VAR 0 9
98208: PPUSH
98209: LD_VAR 0 10
98213: PPUSH
98214: LD_VAR 0 11
98218: PPUSH
98219: CALL 46422 0 11
98223: GO 98226
98225: POP
// end ;
98226: PPOPN 11
98228: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
98229: LD_VAR 0 1
98233: PPUSH
98234: LD_VAR 0 2
98238: PPUSH
98239: LD_VAR 0 3
98243: PPUSH
98244: LD_VAR 0 4
98248: PPUSH
98249: LD_VAR 0 5
98253: PPUSH
98254: CALL 49899 0 5
// end ; end_of_file
98258: PPOPN 5
98260: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
98261: LD_VAR 0 1
98265: PPUSH
98266: LD_VAR 0 2
98270: PPUSH
98271: LD_VAR 0 3
98275: PPUSH
98276: LD_VAR 0 4
98280: PPUSH
98281: LD_VAR 0 5
98285: PPUSH
98286: LD_VAR 0 6
98290: PPUSH
98291: CALL 34074 0 6
// end ;
98295: PPOPN 6
98297: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
98298: LD_INT 0
98300: PPUSH
// begin if not units then
98301: LD_VAR 0 1
98305: NOT
98306: IFFALSE 98310
// exit ;
98308: GO 98310
// end ;
98310: PPOPN 7
98312: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
98313: CALL 33961 0 0
// end ;
98317: PPOPN 1
98319: END
