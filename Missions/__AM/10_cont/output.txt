// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 65
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 66
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 63
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 53
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 52
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 56
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 59
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 60
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 62
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 57
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 58
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 64
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 54
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 55
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 67
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// CreateNature ;
 314: CALL 26779 0 0
// PrepareDifficulty ;
 318: CALL 11448 0 0
// PrepareJMMTeam ;
 322: CALL 1370 0 0
// PrepareCathyTeam ;
 326: CALL 2606 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 330: LD_INT 24
 332: PPUSH
 333: LD_INT 1
 335: PUSH
 336: LD_OWVAR 67
 340: PLUS
 341: PPUSH
 342: CALL 21308 0 2
// if Difficulty > 1 then
 346: LD_OWVAR 67
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: IFFALSE 368
// PlaceMines ( MineField2 , Difficulty ) ;
 356: LD_INT 25
 358: PPUSH
 359: LD_OWVAR 67
 363: PPUSH
 364: CALL 21308 0 2
// if Difficulty > 2 then
 368: LD_OWVAR 67
 372: PUSH
 373: LD_INT 2
 375: GREATER
 376: IFFALSE 390
// PlaceMines ( MineField3 , Difficulty ) ;
 378: LD_INT 26
 380: PPUSH
 381: LD_OWVAR 67
 385: PPUSH
 386: CALL 21308 0 2
// PrepareArabianCommander ;
 390: CALL 4088 0 0
// PrepareArabian ;
 394: CALL 4140 0 0
// BuildArabianBase ;
 398: CALL 14263 0 0
// TameApemans ;
 402: CALL 20113 0 0
// end ;
 406: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 407: LD_EXP 67
 411: PUSH
 412: LD_INT 1
 414: EQUAL
 415: IFFALSE 721
 417: GO 419
 419: DISABLE
 420: LD_INT 0
 422: PPUSH
// begin enable ;
 423: ENABLE
// fogoff ( true ) ;
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 21
 448: PUSH
 449: LD_INT 1
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PPUSH
 460: CALL_OW 69
 464: PUSH
 465: FOR_IN
 466: IFFALSE 482
// SetLives ( i , 1000 ) ;
 468: LD_VAR 0 1
 472: PPUSH
 473: LD_INT 1000
 475: PPUSH
 476: CALL_OW 234
 480: GO 465
 482: POP
 483: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 484: LD_ADDR_VAR 0 1
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 2
 501: PUSH
 502: LD_INT 30
 504: PUSH
 505: LD_INT 0
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 30
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 561
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 274
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: LD_INT 9999
 554: PPUSH
 555: CALL_OW 277
 559: GO 536
 561: POP
 562: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 563: LD_ADDR_VAR 0 1
 567: PUSH
 568: LD_INT 22
 570: PUSH
 571: LD_INT 1
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 30
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PPUSH
 610: CALL_OW 69
 614: PUSH
 615: FOR_IN
 616: IFFALSE 640
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 274
 627: PPUSH
 628: LD_INT 2
 630: PPUSH
 631: LD_INT 9999
 633: PPUSH
 634: CALL_OW 277
 638: GO 615
 640: POP
 641: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 642: LD_ADDR_VAR 0 1
 646: PUSH
 647: LD_INT 22
 649: PUSH
 650: LD_INT 1
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 30
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 30
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 719
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: CALL_OW 274
 706: PPUSH
 707: LD_INT 3
 709: PPUSH
 710: LD_INT 9999
 712: PPUSH
 713: CALL_OW 277
 717: GO 694
 719: POP
 720: POP
// end ;
 721: PPOPN 1
 723: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 724: LD_INT 25
 726: PUSH
 727: LD_INT 5
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 69
 738: IFFALSE 751
 740: GO 742
 742: DISABLE
// snipersTrained := true ;
 743: LD_ADDR_EXP 62
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
 751: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: CALL_OW 81
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: PUSH
 767: LD_EXP 42
 771: AND
 772: PUSH
 773: LD_INT 22
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 21
 785: PUSH
 786: LD_INT 3
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: AND
 806: IFFALSE 818
 808: GO 810
 810: DISABLE
// SetAchievement ( ACH_POWER ) ;
 811: LD_STRING ACH_POWER
 813: PPUSH
 814: CALL_OW 543
 818: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 1
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: PUSH
 848: LD_INT 22
 850: PUSH
 851: LD_INT 1
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: LD_INT 30
 860: PUSH
 861: LD_INT 32
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PPUSH
 872: CALL_OW 69
 876: AND
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 30
 890: PUSH
 891: LD_INT 33
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PPUSH
 902: CALL_OW 69
 906: AND
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 1
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 30
 920: PUSH
 921: LD_INT 5
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PPUSH
 932: CALL_OW 69
 936: AND
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 30
 950: PUSH
 951: LD_INT 3
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: AND
 967: PUSH
 968: LD_INT 22
 970: PUSH
 971: LD_INT 1
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 30
 980: PUSH
 981: LD_INT 36
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PPUSH
 992: CALL_OW 69
 996: AND
 997: PUSH
 998: LD_INT 22
1000: PUSH
1001: LD_INT 1
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 31
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PPUSH
1022: CALL_OW 69
1026: AND
1027: PUSH
1028: LD_INT 22
1030: PUSH
1031: LD_INT 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 30
1040: PUSH
1041: LD_INT 22
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 69
1056: AND
1057: PUSH
1058: LD_INT 22
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 30
1070: PUSH
1071: LD_INT 20
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: AND
1087: PUSH
1088: LD_INT 22
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 30
1100: PUSH
1101: LD_INT 19
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PPUSH
1112: CALL_OW 69
1116: AND
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 30
1130: PUSH
1131: LD_INT 16
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: AND
1147: PUSH
1148: LD_INT 22
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 30
1160: PUSH
1161: LD_INT 17
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: PPUSH
1172: CALL_OW 69
1176: AND
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 21
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PPUSH
1202: CALL_OW 69
1206: AND
1207: PUSH
1208: LD_INT 22
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 30
1220: PUSH
1221: LD_INT 29
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 69
1236: AND
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 30
1250: PUSH
1251: LD_INT 30
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 69
1266: AND
1267: PUSH
1268: LD_INT 22
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 30
1280: PUSH
1281: LD_INT 27
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: AND
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 1
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 30
1310: PUSH
1311: LD_INT 26
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: AND
1327: PUSH
1328: LD_INT 22
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 28
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: AND
1357: IFFALSE 1369
1359: GO 1361
1361: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1362: LD_STRING ACH_ARCH
1364: PPUSH
1365: CALL_OW 543
1369: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
1377: PPUSH
// uc_side = 1 ;
1378: LD_ADDR_OWVAR 20
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// uc_nation = 1 ;
1386: LD_ADDR_OWVAR 21
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// count = 0 ;
1394: LD_ADDR_VAR 0 6
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1402: LD_ADDR_EXP 1
1406: PUSH
1407: LD_STRING JMM
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: LD_STRING 10_
1415: PPUSH
1416: CALL 48788 0 3
1420: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1421: LD_ADDR_EXP 20
1425: PUSH
1426: LD_EXP 20
1430: PUSH
1431: LD_EXP 1
1435: ADD
1436: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1437: LD_ADDR_EXP 10
1441: PUSH
1442: LD_STRING Gary
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: LD_STRING 10_
1450: PPUSH
1451: CALL 48788 0 3
1455: ST_TO_ADDR
// if Gary then
1456: LD_EXP 10
1460: IFFALSE 1478
// JMMSquad = JMMSquad ^ Gary ;
1462: LD_ADDR_EXP 20
1466: PUSH
1467: LD_EXP 20
1471: PUSH
1472: LD_EXP 10
1476: ADD
1477: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1478: LD_ADDR_EXP 5
1482: PUSH
1483: LD_STRING Cyrus
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 10_
1491: PPUSH
1492: CALL 48788 0 3
1496: ST_TO_ADDR
// if Cyrus then
1497: LD_EXP 5
1501: IFFALSE 1519
// JMMSquad = JMMSquad ^ Cyrus ;
1503: LD_ADDR_EXP 20
1507: PUSH
1508: LD_EXP 20
1512: PUSH
1513: LD_EXP 5
1517: ADD
1518: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1519: LD_ADDR_EXP 4
1523: PUSH
1524: LD_STRING Bobby
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: LD_STRING 10_
1532: PPUSH
1533: CALL 48788 0 3
1537: ST_TO_ADDR
// if Bobby then
1538: LD_EXP 4
1542: IFFALSE 1560
// JMMSquad = JMMSquad ^ Bobby ;
1544: LD_ADDR_EXP 20
1548: PUSH
1549: LD_EXP 20
1553: PUSH
1554: LD_EXP 4
1558: ADD
1559: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1560: LD_ADDR_EXP 6
1564: PUSH
1565: LD_STRING Lisa
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_STRING 10_
1573: PPUSH
1574: CALL 48788 0 3
1578: ST_TO_ADDR
// if Lisa then
1579: LD_EXP 6
1583: IFFALSE 1601
// JMMSquad = JMMSquad ^ Lisa ;
1585: LD_ADDR_EXP 20
1589: PUSH
1590: LD_EXP 20
1594: PUSH
1595: LD_EXP 6
1599: ADD
1600: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1601: LD_ADDR_EXP 2
1605: PUSH
1606: LD_STRING Brown
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_STRING 10_
1614: PPUSH
1615: CALL 48788 0 3
1619: ST_TO_ADDR
// if Brown then
1620: LD_EXP 2
1624: IFFALSE 1642
// JMMSquad = JMMSquad ^ Brown ;
1626: LD_ADDR_EXP 20
1630: PUSH
1631: LD_EXP 20
1635: PUSH
1636: LD_EXP 2
1640: ADD
1641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1642: LD_ADDR_EXP 3
1646: PUSH
1647: LD_STRING Donaldson
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: LD_STRING 10_
1655: PPUSH
1656: CALL 48788 0 3
1660: ST_TO_ADDR
// if Donaldson then
1661: LD_EXP 3
1665: IFFALSE 1683
// JMMSquad = JMMSquad ^ Donaldson ;
1667: LD_ADDR_EXP 20
1671: PUSH
1672: LD_EXP 20
1676: PUSH
1677: LD_EXP 3
1681: ADD
1682: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1683: LD_ADDR_EXP 7
1687: PUSH
1688: LD_STRING Frank
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: LD_STRING 10_
1696: PPUSH
1697: CALL 48788 0 3
1701: ST_TO_ADDR
// if Frank then
1702: LD_EXP 7
1706: IFFALSE 1724
// JMMSquad = JMMSquad ^ Frank ;
1708: LD_ADDR_EXP 20
1712: PUSH
1713: LD_EXP 20
1717: PUSH
1718: LD_EXP 7
1722: ADD
1723: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1724: LD_ADDR_EXP 9
1728: PUSH
1729: LD_STRING Houten
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_STRING 10_
1737: PPUSH
1738: CALL 48788 0 3
1742: ST_TO_ADDR
// if Houten then
1743: LD_EXP 9
1747: IFFALSE 1765
// JMMSquad = JMMSquad ^ Houten ;
1749: LD_ADDR_EXP 20
1753: PUSH
1754: LD_EXP 20
1758: PUSH
1759: LD_EXP 9
1763: ADD
1764: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1765: LD_ADDR_EXP 21
1769: PUSH
1770: LD_STRING OthersIn10
1772: PPUSH
1773: CALL_OW 31
1777: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1778: LD_ADDR_EXP 24
1782: PUSH
1783: LD_STRING Powell
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: LD_STRING 
1791: PPUSH
1792: CALL 48788 0 3
1796: ST_TO_ADDR
// for i in JMMSquad do
1797: LD_ADDR_VAR 0 2
1801: PUSH
1802: LD_EXP 20
1806: PUSH
1807: FOR_IN
1808: IFFALSE 2088
// begin if count < 3 then
1810: LD_VAR 0 6
1814: PUSH
1815: LD_INT 3
1817: LESS
1818: IFFALSE 1935
// begin vc_engine = 1 ;
1820: LD_ADDR_OWVAR 39
1824: PUSH
1825: LD_INT 1
1827: ST_TO_ADDR
// vc_control = 1 ;
1828: LD_ADDR_OWVAR 38
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// vc_weapon = 12 ;
1836: LD_ADDR_OWVAR 40
1840: PUSH
1841: LD_INT 12
1843: ST_TO_ADDR
// vc_chassis = 3 ;
1844: LD_ADDR_OWVAR 37
1848: PUSH
1849: LD_INT 3
1851: ST_TO_ADDR
// veh = CreateVehicle ;
1852: LD_ADDR_VAR 0 4
1856: PUSH
1857: CALL_OW 45
1861: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 1
1869: PPUSH
1870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1874: LD_VAR 0 4
1878: PPUSH
1879: LD_INT 2
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// if count mod 2 = 0 then
1889: LD_VAR 0 6
1893: PUSH
1894: LD_INT 2
1896: MOD
1897: PUSH
1898: LD_INT 0
1900: EQUAL
1901: IFFALSE 1920
// AddCargo ( veh , 1 , 100 ) else
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 100
1913: PPUSH
1914: CALL_OW 291
1918: GO 1935
// AddCargo ( veh , 3 , 100 ) end ;
1920: LD_VAR 0 4
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: LD_INT 100
1930: PPUSH
1931: CALL_OW 291
// if count >= 3 then
1935: LD_VAR 0 6
1939: PUSH
1940: LD_INT 3
1942: GREATEREQUAL
1943: IFFALSE 2058
// begin vc_engine = 1 ;
1945: LD_ADDR_OWVAR 39
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// vc_control = 1 ;
1953: LD_ADDR_OWVAR 38
1957: PUSH
1958: LD_INT 1
1960: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1961: LD_ADDR_OWVAR 40
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 5
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 1
1982: PPUSH
1983: LD_INT 3
1985: PPUSH
1986: CALL_OW 12
1990: ARRAY
1991: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1992: LD_ADDR_OWVAR 37
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_VAR 0 2
2011: PUSH
2012: LD_INT 2
2014: MOD
2015: PUSH
2016: LD_INT 1
2018: PLUS
2019: ARRAY
2020: ST_TO_ADDR
// veh = CreateVehicle ;
2021: LD_ADDR_VAR 0 4
2025: PUSH
2026: CALL_OW 45
2030: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2043: LD_VAR 0 4
2047: PPUSH
2048: LD_INT 2
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL_OW 49
// end ; count = count + 1 ;
2058: LD_ADDR_VAR 0 6
2062: PUSH
2063: LD_VAR 0 6
2067: PUSH
2068: LD_INT 1
2070: PLUS
2071: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_VAR 0 4
2081: PPUSH
2082: CALL_OW 52
// end ;
2086: GO 1807
2088: POP
2089: POP
// for i := 1 to others10 do
2090: LD_ADDR_VAR 0 2
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_EXP 21
2104: PUSH
2105: FOR_TO
2106: IFFALSE 2337
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: PUSH
2116: LD_INT 4
2118: PUSH
2119: LD_INT 3
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_OWVAR 67
2135: ARRAY
2136: LESS
2137: IFFALSE 2290
// begin vc_engine = 1 ;
2139: LD_ADDR_OWVAR 39
2143: PUSH
2144: LD_INT 1
2146: ST_TO_ADDR
// vc_control = 1 ;
2147: LD_ADDR_OWVAR 38
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2155: LD_ADDR_OWVAR 40
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: LD_INT 4
2165: PUSH
2166: LD_INT 5
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: CALL_OW 12
2184: ARRAY
2185: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2186: LD_ADDR_OWVAR 37
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_VAR 0 2
2205: PUSH
2206: LD_INT 2
2208: MOD
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// veh = CreateVehicle ;
2215: LD_ADDR_VAR 0 4
2219: PUSH
2220: CALL_OW 45
2224: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2225: LD_VAR 0 4
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2237: LD_VAR 0 4
2241: PPUSH
2242: LD_INT 2
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2252: LD_ADDR_EXP 28
2256: PUSH
2257: LD_EXP 28
2261: PUSH
2262: LD_VAR 0 4
2266: ADD
2267: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2268: LD_EXP 21
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_VAR 0 4
2283: PPUSH
2284: CALL_OW 52
// end else
2288: GO 2335
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2290: LD_EXP 21
2294: PUSH
2295: LD_VAR 0 2
2299: ARRAY
2300: PPUSH
2301: LD_INT 106
2303: PPUSH
2304: LD_INT 33
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: LD_INT 0
2312: PPUSH
2313: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2317: LD_EXP 21
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: CALL_OW 235
// end ; end ;
2335: GO 2105
2337: POP
2338: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2339: LD_INT 22
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 21
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: CALL_OW 336
// end ;
2375: LD_VAR 0 1
2379: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2380: LD_INT 0
2382: PPUSH
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
// uc_side = 1 ;
2387: LD_ADDR_OWVAR 20
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// uc_nation = 1 ;
2395: LD_ADDR_OWVAR 21
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// for i := 1 to 10 do
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 10
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2599
// begin vc_engine = 1 ;
2419: LD_ADDR_OWVAR 39
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_control = 1 ;
2427: LD_ADDR_OWVAR 38
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: LD_INT 5
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: ST_TO_ADDR
// vc_chassis = 3 ;
2470: LD_ADDR_OWVAR 37
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// veh = CreateVehicle ;
2478: LD_ADDR_VAR 0 3
2482: PUSH
2483: CALL_OW 45
2487: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2488: LD_VAR 0 3
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2500: LD_VAR 0 3
2504: PPUSH
2505: LD_INT 2
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2515: LD_ADDR_EXP 28
2519: PUSH
2520: LD_EXP 28
2524: PUSH
2525: LD_VAR 0 3
2529: ADD
2530: ST_TO_ADDR
// if vc_weapon = 12 then
2531: LD_OWVAR 40
2535: PUSH
2536: LD_INT 12
2538: EQUAL
2539: IFFALSE 2597
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2541: LD_ADDR_VAR 0 4
2545: PUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 10
2551: PPUSH
2552: CALL_OW 12
2556: PUSH
2557: LD_INT 10
2559: MUL
2560: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2561: LD_VAR 0 3
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_VAR 0 4
2592: PPUSH
2593: CALL_OW 291
// end ; end ;
2597: GO 2416
2599: POP
2600: POP
// end ;
2601: LD_VAR 0 1
2605: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2606: LD_INT 0
2608: PPUSH
2609: PPUSH
2610: PPUSH
// uc_side = 4 ;
2611: LD_ADDR_OWVAR 20
2615: PUSH
2616: LD_INT 4
2618: ST_TO_ADDR
// uc_nation = 1 ;
2619: LD_ADDR_OWVAR 21
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2627: LD_ADDR_EXP 11
2631: PUSH
2632: LD_STRING Simms
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: CALL 48788 0 3
2645: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2646: LD_ADDR_EXP 12
2650: PUSH
2651: LD_STRING Denis
2653: PPUSH
2654: LD_INT 1
2656: PPUSH
2657: LD_STRING 08_
2659: PPUSH
2660: CALL 48788 0 3
2664: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2665: LD_ADDR_EXP 13
2669: PUSH
2670: LD_STRING Joan
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_STRING 08_
2678: PPUSH
2679: CALL 48788 0 3
2683: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2684: LD_STRING 08_Khatam
2686: PPUSH
2687: CALL_OW 28
2691: IFFALSE 2714
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2693: LD_ADDR_EXP 14
2697: PUSH
2698: LD_STRING Khatam
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_STRING 08_
2706: PPUSH
2707: CALL 48788 0 3
2711: ST_TO_ADDR
2712: GO 2742
// if TestCharacters ( 03_Khatam ) then
2714: LD_STRING 03_Khatam
2716: PPUSH
2717: CALL_OW 28
2721: IFFALSE 2742
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2723: LD_ADDR_EXP 14
2727: PUSH
2728: LD_STRING Khatam
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_STRING 03_
2736: PPUSH
2737: CALL 48788 0 3
2741: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2742: LD_ADDR_EXP 15
2746: PUSH
2747: LD_STRING Gladstone
2749: PPUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_STRING 08_
2755: PPUSH
2756: CALL 48788 0 3
2760: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2761: LD_ADDR_EXP 17
2765: PUSH
2766: LD_STRING DeltaDoctor
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: LD_STRING 
2774: PPUSH
2775: CALL 48788 0 3
2779: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2780: LD_ADDR_EXP 7
2784: PUSH
2785: LD_STRING Frank
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_STRING 08_
2793: PPUSH
2794: CALL 48788 0 3
2798: ST_TO_ADDR
// if Frank then
2799: LD_EXP 7
2803: IFFALSE 2826
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2805: LD_ADDR_EXP 8
2809: PUSH
2810: LD_STRING Yamoko
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: LD_STRING 
2818: PPUSH
2819: CALL 48788 0 3
2823: ST_TO_ADDR
2824: GO 2845
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2826: LD_ADDR_EXP 8
2830: PUSH
2831: LD_STRING Kikuchi
2833: PPUSH
2834: LD_INT 1
2836: PPUSH
2837: LD_STRING 08_
2839: PPUSH
2840: CALL 48788 0 3
2844: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2845: LD_ADDR_EXP 22
2849: PUSH
2850: LD_STRING 09_others
2852: PPUSH
2853: CALL_OW 31
2857: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2858: LD_ADDR_EXP 23
2862: PUSH
2863: LD_STRING 09_apes
2865: PPUSH
2866: CALL_OW 31
2870: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2871: LD_EXP 11
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2886: LD_EXP 12
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_INT 0
2896: PPUSH
2897: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2901: LD_EXP 13
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2916: LD_EXP 14
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2946: LD_EXP 17
2950: PPUSH
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 49
// if Kikuchi then
2961: LD_EXP 8
2965: IFFALSE 2982
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2967: LD_EXP 8
2971: PPUSH
2972: LD_INT 1
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2982: LD_EXP 11
2986: PUSH
2987: LD_EXP 14
2991: PUSH
2992: LD_EXP 12
2996: PUSH
2997: LD_EXP 15
3001: PUSH
3002: LD_EXP 17
3006: PUSH
3007: LD_EXP 13
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: PPUSH
3020: LD_INT 4
3022: PPUSH
3023: CALL_OW 336
// if others09 > 2 then
3027: LD_EXP 22
3031: PUSH
3032: LD_INT 2
3034: GREATER
3035: IFFALSE 3116
// begin for i := 1 to 3 do
3037: LD_ADDR_VAR 0 2
3041: PUSH
3042: DOUBLE
3043: LD_INT 1
3045: DEC
3046: ST_TO_ADDR
3047: LD_INT 3
3049: PUSH
3050: FOR_TO
3051: IFFALSE 3112
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3053: LD_EXP 22
3057: PUSH
3058: LD_VAR 0 2
3062: ARRAY
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3074: LD_ADDR_EXP 22
3078: PUSH
3079: LD_EXP 22
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: CALL_OW 3
3091: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3092: LD_EXP 22
3096: PUSH
3097: LD_VAR 0 2
3101: ARRAY
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: CALL_OW 336
// end ;
3110: GO 3050
3112: POP
3113: POP
// end else
3114: GO 3176
// begin for i in others09 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: LD_EXP 22
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3174
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3129: LD_VAR 0 2
3133: PPUSH
3134: LD_INT 1
3136: PPUSH
3137: LD_INT 0
3139: PPUSH
3140: CALL_OW 49
// others09 = others09 diff i ;
3144: LD_ADDR_EXP 22
3148: PUSH
3149: LD_EXP 22
3153: PUSH
3154: LD_VAR 0 2
3158: DIFF
3159: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 336
// end ;
3172: GO 3126
3174: POP
3175: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3176: LD_INT 22
3178: PUSH
3179: LD_INT 4
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: LD_INT 25
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PPUSH
3200: CALL_OW 69
3204: PUSH
3205: LD_INT 0
3207: EQUAL
3208: IFFALSE 3340
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 4
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 25
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 69
3243: PUSH
3244: LD_EXP 11
3248: PUSH
3249: LD_EXP 14
3253: PUSH
3254: LD_EXP 12
3258: PUSH
3259: LD_EXP 15
3263: PUSH
3264: LD_EXP 17
3268: PUSH
3269: LD_EXP 13
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: DIFF
3282: ST_TO_ADDR
// if not tmp then
3283: LD_VAR 0 3
3287: NOT
3288: IFFALSE 3324
// begin if Denis then
3290: LD_EXP 12
3294: IFFALSE 3310
// SetClass ( Denis , 2 ) else
3296: LD_EXP 12
3300: PPUSH
3301: LD_INT 2
3303: PPUSH
3304: CALL_OW 336
3308: GO 3322
// SetClass ( DeltaDoctor , 2 ) ;
3310: LD_EXP 17
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: CALL_OW 336
// end else
3322: GO 3340
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_INT 2
3335: PPUSH
3336: CALL_OW 336
// end ; end ; for i in ape09 do
3340: LD_ADDR_VAR 0 2
3344: PUSH
3345: LD_EXP 23
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3370
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3353: LD_VAR 0 2
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_INT 0
3363: PPUSH
3364: CALL_OW 49
3368: GO 3350
3370: POP
3371: POP
// uc_side = 4 ;
3372: LD_ADDR_OWVAR 20
3376: PUSH
3377: LD_INT 4
3379: ST_TO_ADDR
// hc_class := 1 ;
3380: LD_ADDR_OWVAR 28
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// hc_sex := sex_female ;
3388: LD_ADDR_OWVAR 27
3392: PUSH
3393: LD_INT 2
3395: ST_TO_ADDR
// hc_gallery :=  ;
3396: LD_ADDR_OWVAR 33
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// hc_name :=  ;
3404: LD_ADDR_OWVAR 26
3408: PUSH
3409: LD_STRING 
3411: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3412: LD_ADDR_OWVAR 31
3416: PUSH
3417: LD_INT 1
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: ST_TO_ADDR
// AmScout = CreateHuman ;
3435: LD_ADDR_EXP 18
3439: PUSH
3440: CALL_OW 44
3444: ST_TO_ADDR
// end ;
3445: LD_VAR 0 1
3449: RET
// export function PrepareCornell ; begin
3450: LD_INT 0
3452: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3453: LD_INT 4
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: CALL_OW 343
// uc_side = 4 ;
3463: LD_ADDR_OWVAR 20
3467: PUSH
3468: LD_INT 4
3470: ST_TO_ADDR
// uc_nation = 1 ;
3471: LD_ADDR_OWVAR 21
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3479: LD_ADDR_EXP 19
3483: PUSH
3484: LD_STRING Cornel
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: LD_STRING 03_
3492: PPUSH
3493: CALL 48788 0 3
3497: ST_TO_ADDR
// if not Cornell then
3498: LD_EXP 19
3502: NOT
3503: IFFALSE 3507
// exit ;
3505: GO 3615
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3507: LD_EXP 19
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3522: LD_EXP 19
3526: PPUSH
3527: LD_INT 350
3529: PPUSH
3530: CALL_OW 234
// if IsInUnit ( JMM ) then
3534: LD_EXP 1
3538: PPUSH
3539: CALL_OW 310
3543: IFFALSE 3586
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3545: LD_EXP 19
3549: PPUSH
3550: LD_EXP 1
3554: PPUSH
3555: CALL_OW 310
3559: PPUSH
3560: CALL_OW 250
3564: PPUSH
3565: LD_EXP 1
3569: PPUSH
3570: CALL_OW 310
3574: PPUSH
3575: CALL_OW 251
3579: PPUSH
3580: CALL_OW 111
3584: GO 3615
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3586: LD_EXP 19
3590: PPUSH
3591: LD_EXP 1
3595: PPUSH
3596: CALL_OW 250
3600: PPUSH
3601: LD_EXP 1
3605: PPUSH
3606: CALL_OW 251
3610: PPUSH
3611: CALL_OW 111
// end ; end_of_file
3615: LD_VAR 0 1
3619: RET
// export function PrepareRussians ; var i , un ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
3624: PPUSH
// uc_side = 3 ;
3625: LD_ADDR_OWVAR 20
3629: PUSH
3630: LD_INT 3
3632: ST_TO_ADDR
// uc_nation = 3 ;
3633: LD_ADDR_OWVAR 21
3637: PUSH
3638: LD_INT 3
3640: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3641: LD_ADDR_EXP 25
3645: PUSH
3646: LD_STRING Tsaritsyn
3648: PPUSH
3649: LD_INT 0
3651: PPUSH
3652: LD_STRING 
3654: PPUSH
3655: CALL 48788 0 3
3659: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3660: LD_EXP 25
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// for i = 1 to 14 do
3675: LD_ADDR_VAR 0 2
3679: PUSH
3680: DOUBLE
3681: LD_INT 1
3683: DEC
3684: ST_TO_ADDR
3685: LD_INT 14
3687: PUSH
3688: FOR_TO
3689: IFFALSE 3775
// begin uc_side = 3 ;
3691: LD_ADDR_OWVAR 20
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// uc_nation = 3 ;
3699: LD_ADDR_OWVAR 21
3703: PUSH
3704: LD_INT 3
3706: ST_TO_ADDR
// hc_gallery =  ;
3707: LD_ADDR_OWVAR 33
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_name =  ;
3715: LD_ADDR_OWVAR 26
3719: PUSH
3720: LD_STRING 
3722: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3723: LD_INT 0
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: LD_EXP 37
3738: PPUSH
3739: CALL_OW 12
3743: PPUSH
3744: CALL_OW 380
// un = CreateHuman ;
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3758: LD_VAR 0 3
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: LD_INT 0
3768: PPUSH
3769: CALL_OW 49
// end ;
3773: GO 3688
3775: POP
3776: POP
// for i = 1 to 6 do
3777: LD_ADDR_VAR 0 2
3781: PUSH
3782: DOUBLE
3783: LD_INT 1
3785: DEC
3786: ST_TO_ADDR
3787: LD_INT 6
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3877
// begin uc_side = 3 ;
3793: LD_ADDR_OWVAR 20
3797: PUSH
3798: LD_INT 3
3800: ST_TO_ADDR
// uc_nation = 3 ;
3801: LD_ADDR_OWVAR 21
3805: PUSH
3806: LD_INT 3
3808: ST_TO_ADDR
// hc_gallery =  ;
3809: LD_ADDR_OWVAR 33
3813: PUSH
3814: LD_STRING 
3816: ST_TO_ADDR
// hc_name =  ;
3817: LD_ADDR_OWVAR 26
3821: PUSH
3822: LD_STRING 
3824: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3825: LD_INT 0
3827: PPUSH
3828: LD_INT 2
3830: PPUSH
3831: LD_EXP 36
3835: PPUSH
3836: LD_EXP 37
3840: PPUSH
3841: CALL_OW 12
3845: PPUSH
3846: CALL_OW 380
// un = CreateHuman ;
3850: LD_ADDR_VAR 0 3
3854: PUSH
3855: CALL_OW 44
3859: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3860: LD_VAR 0 3
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 49
// end ;
3875: GO 3790
3877: POP
3878: POP
// for i = 1 to 6 do
3879: LD_ADDR_VAR 0 2
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_INT 6
3891: PUSH
3892: FOR_TO
3893: IFFALSE 3979
// begin uc_side = 3 ;
3895: LD_ADDR_OWVAR 20
3899: PUSH
3900: LD_INT 3
3902: ST_TO_ADDR
// uc_nation = 3 ;
3903: LD_ADDR_OWVAR 21
3907: PUSH
3908: LD_INT 3
3910: ST_TO_ADDR
// hc_gallery =  ;
3911: LD_ADDR_OWVAR 33
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// hc_name =  ;
3919: LD_ADDR_OWVAR 26
3923: PUSH
3924: LD_STRING 
3926: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_EXP 36
3937: PPUSH
3938: LD_EXP 37
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL_OW 380
// un = CreateHuman ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: CALL_OW 44
3961: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 3
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 49
// end ;
3977: GO 3892
3979: POP
3980: POP
// for i = 1 to 4 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 4
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4081
// begin uc_side = 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation = 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// hc_gallery =  ;
4013: LD_ADDR_OWVAR 33
4017: PUSH
4018: LD_STRING 
4020: ST_TO_ADDR
// hc_name =  ;
4021: LD_ADDR_OWVAR 26
4025: PUSH
4026: LD_STRING 
4028: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 4
4034: PPUSH
4035: LD_EXP 36
4039: PPUSH
4040: LD_EXP 37
4044: PPUSH
4045: CALL_OW 12
4049: PPUSH
4050: CALL_OW 380
// un = CreateHuman ;
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: CALL_OW 44
4063: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4064: LD_VAR 0 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 49
// end ;
4079: GO 3994
4081: POP
4082: POP
// end ; end_of_file
4083: LD_VAR 0 1
4087: RET
// export function PrepareArabianCommander ; begin
4088: LD_INT 0
4090: PPUSH
// uc_side = 2 ;
4091: LD_ADDR_OWVAR 20
4095: PUSH
4096: LD_INT 2
4098: ST_TO_ADDR
// uc_nation = 2 ;
4099: LD_ADDR_OWVAR 21
4103: PUSH
4104: LD_INT 2
4106: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4107: LD_ADDR_EXP 26
4111: PUSH
4112: LD_STRING Dietrich
4114: PPUSH
4115: CALL_OW 25
4119: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4120: LD_EXP 26
4124: PPUSH
4125: LD_INT 4
4127: PPUSH
4128: LD_INT 0
4130: PPUSH
4131: CALL_OW 49
// end ;
4135: LD_VAR 0 1
4139: RET
// export function PrepareArabian ; var i , un , veh ; begin
4140: LD_INT 0
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
// uc_side := 2 ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_INT 2
4153: ST_TO_ADDR
// uc_nation := 2 ;
4154: LD_ADDR_OWVAR 21
4158: PUSH
4159: LD_INT 2
4161: ST_TO_ADDR
// if not Ahmed then
4162: LD_EXP 27
4166: NOT
4167: IFFALSE 4235
// begin InitHc ;
4169: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_EXP 36
4183: PPUSH
4184: LD_EXP 37
4188: PUSH
4189: LD_INT 1
4191: PLUS
4192: PPUSH
4193: CALL_OW 12
4197: PPUSH
4198: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4202: LD_ADDR_OWVAR 26
4206: PUSH
4207: LD_STRING Ahmed Abbasid
4209: ST_TO_ADDR
// Ahmed := CreateHuman ;
4210: LD_ADDR_EXP 27
4214: PUSH
4215: CALL_OW 44
4219: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4220: LD_EXP 27
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 49
// end ; for i = 1 to 4 do
4235: LD_ADDR_VAR 0 2
4239: PUSH
4240: DOUBLE
4241: LD_INT 1
4243: DEC
4244: ST_TO_ADDR
4245: LD_INT 4
4247: PUSH
4248: FOR_TO
4249: IFFALSE 4335
// begin uc_side = 2 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 2
4258: ST_TO_ADDR
// uc_nation = 2 ;
4259: LD_ADDR_OWVAR 21
4263: PUSH
4264: LD_INT 2
4266: ST_TO_ADDR
// hc_gallery =  ;
4267: LD_ADDR_OWVAR 33
4271: PUSH
4272: LD_STRING 
4274: ST_TO_ADDR
// hc_name =  ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING 
4282: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 2
4288: PPUSH
4289: LD_EXP 36
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: CALL_OW 380
// un = CreateHuman ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: CALL_OW 44
4317: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4318: LD_VAR 0 3
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: CALL_OW 49
// end ;
4333: GO 4248
4335: POP
4336: POP
// for i = 1 to 5 do
4337: LD_ADDR_VAR 0 2
4341: PUSH
4342: DOUBLE
4343: LD_INT 1
4345: DEC
4346: ST_TO_ADDR
4347: LD_INT 5
4349: PUSH
4350: FOR_TO
4351: IFFALSE 4437
// begin uc_side = 2 ;
4353: LD_ADDR_OWVAR 20
4357: PUSH
4358: LD_INT 2
4360: ST_TO_ADDR
// uc_nation = 2 ;
4361: LD_ADDR_OWVAR 21
4365: PUSH
4366: LD_INT 2
4368: ST_TO_ADDR
// hc_gallery =  ;
4369: LD_ADDR_OWVAR 33
4373: PUSH
4374: LD_STRING 
4376: ST_TO_ADDR
// hc_name =  ;
4377: LD_ADDR_OWVAR 26
4381: PUSH
4382: LD_STRING 
4384: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4385: LD_INT 0
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_EXP 36
4395: PPUSH
4396: LD_EXP 37
4400: PPUSH
4401: CALL_OW 12
4405: PPUSH
4406: CALL_OW 380
// un = CreateHuman ;
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: CALL_OW 44
4419: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: LD_INT 4
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 49
// end ;
4435: GO 4350
4437: POP
4438: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4439: LD_ADDR_VAR 0 2
4443: PUSH
4444: DOUBLE
4445: LD_INT 1
4447: DEC
4448: ST_TO_ADDR
4449: LD_INT 3
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 4
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: PUSH
4473: FOR_TO
4474: IFFALSE 4560
// begin uc_side = 2 ;
4476: LD_ADDR_OWVAR 20
4480: PUSH
4481: LD_INT 2
4483: ST_TO_ADDR
// uc_nation = 2 ;
4484: LD_ADDR_OWVAR 21
4488: PUSH
4489: LD_INT 2
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// hc_name =  ;
4500: LD_ADDR_OWVAR 26
4504: PUSH
4505: LD_STRING 
4507: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4508: LD_INT 0
4510: PPUSH
4511: LD_INT 4
4513: PPUSH
4514: LD_EXP 36
4518: PPUSH
4519: LD_EXP 37
4523: PPUSH
4524: CALL_OW 12
4528: PPUSH
4529: CALL_OW 380
// un = CreateHuman ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: CALL_OW 44
4542: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4543: LD_VAR 0 3
4547: PPUSH
4548: LD_INT 4
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: CALL_OW 49
// end ;
4558: GO 4473
4560: POP
4561: POP
// for i = 1 to 2 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 2
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4706
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 21
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 58
4605: PUSH
4606: EMPTY
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: ST_TO_ADDR
// uc_side = 2 ;
4619: LD_ADDR_OWVAR 20
4623: PUSH
4624: LD_INT 2
4626: ST_TO_ADDR
// uc_nation = 2 ;
4627: LD_ADDR_OWVAR 21
4631: PUSH
4632: LD_INT 2
4634: ST_TO_ADDR
// hc_gallery =  ;
4635: LD_ADDR_OWVAR 33
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// hc_name =  ;
4643: LD_ADDR_OWVAR 26
4647: PUSH
4648: LD_STRING 
4650: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4651: LD_INT 0
4653: PPUSH
4654: LD_INT 3
4656: PPUSH
4657: LD_EXP 36
4661: PPUSH
4662: LD_EXP 37
4666: PPUSH
4667: CALL_OW 12
4671: PPUSH
4672: CALL_OW 380
// un = CreateHuman ;
4676: LD_ADDR_VAR 0 3
4680: PUSH
4681: CALL_OW 44
4685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4686: LD_VAR 0 3
4690: PPUSH
4691: LD_VAR 0 4
4695: PUSH
4696: LD_INT 1
4698: ARRAY
4699: PPUSH
4700: CALL_OW 52
// end ;
4704: GO 4575
4706: POP
4707: POP
// end ;
4708: LD_VAR 0 1
4712: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
// for i := 1 to 2 do
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: DOUBLE
4727: LD_INT 1
4729: DEC
4730: ST_TO_ADDR
4731: LD_INT 2
4733: PUSH
4734: FOR_TO
4735: IFFALSE 4861
// begin uc_side = 5 ;
4737: LD_ADDR_OWVAR 20
4741: PUSH
4742: LD_INT 5
4744: ST_TO_ADDR
// uc_nation = 2 ;
4745: LD_ADDR_OWVAR 21
4749: PUSH
4750: LD_INT 2
4752: ST_TO_ADDR
// vc_chassis := 31 ;
4753: LD_ADDR_OWVAR 37
4757: PUSH
4758: LD_INT 31
4760: ST_TO_ADDR
// vc_control := control_rider ;
4761: LD_ADDR_OWVAR 38
4765: PUSH
4766: LD_INT 4
4768: ST_TO_ADDR
// animal := CreateVehicle ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 45
4778: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 7
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// hc_gallery =  ;
4794: LD_ADDR_OWVAR 33
4798: PUSH
4799: LD_STRING 
4801: ST_TO_ADDR
// hc_name =  ;
4802: LD_ADDR_OWVAR 26
4806: PUSH
4807: LD_STRING 
4809: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4810: LD_INT 0
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_EXP 36
4820: PPUSH
4821: LD_EXP 37
4825: PPUSH
4826: CALL_OW 12
4830: PPUSH
4831: CALL_OW 380
// un = CreateHuman ;
4835: LD_ADDR_VAR 0 4
4839: PUSH
4840: CALL_OW 44
4844: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4845: LD_VAR 0 4
4849: PPUSH
4850: LD_VAR 0 3
4854: PPUSH
4855: CALL_OW 52
// end ;
4859: GO 4734
4861: POP
4862: POP
// repeat wait ( 0 0$1 ) ;
4863: LD_INT 35
4865: PPUSH
4866: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4870: LD_ADDR_VAR 0 5
4874: PUSH
4875: LD_INT 22
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PPUSH
4890: LD_VAR 0 2
4894: PPUSH
4895: CALL_OW 74
4899: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4900: LD_ADDR_VAR 0 6
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 2
4917: PUSH
4918: LD_INT 59
4920: PUSH
4921: EMPTY
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: EMPTY
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: PPUSH
4962: LD_VAR 0 2
4966: PPUSH
4967: CALL_OW 74
4971: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: LD_INT 11
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5077
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5009: LD_VAR 0 2
5013: PPUSH
5014: LD_VAR 0 5
5018: PPUSH
5019: CALL_OW 296
5023: PUSH
5024: LD_INT 8
5026: PLUS
5027: PUSH
5028: LD_VAR 0 2
5032: PPUSH
5033: LD_VAR 0 6
5037: PPUSH
5038: CALL_OW 296
5042: LESS
5043: IFFALSE 5061
// ComAttackUnit ( i , target1 ) else
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 115
5059: GO 5075
// ComAttackUnit ( i , target2 ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 6
5070: PPUSH
5071: CALL_OW 115
// end ;
5075: GO 5006
5077: POP
5078: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5079: LD_INT 22
5081: PUSH
5082: LD_INT 5
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 25
5091: PUSH
5092: LD_INT 11
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 69
5107: PUSH
5108: LD_INT 0
5110: EQUAL
5111: PUSH
5112: LD_INT 22
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: PUSH
5127: LD_INT 0
5129: EQUAL
5130: OR
5131: IFFALSE 4863
// end ; end_of_file
5133: LD_VAR 0 1
5137: RET
// every 1 do
5138: GO 5140
5140: DISABLE
// begin Video ( true ) ;
5141: LD_INT 1
5143: PPUSH
5144: CALL 85497 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 19
5153: PPUSH
5154: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5158: LD_EXP 11
5162: PPUSH
5163: CALL_OW 87
// wait ( 0 0$3 ) ;
5167: LD_INT 105
5169: PPUSH
5170: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5174: LD_EXP 1
5178: PPUSH
5179: CALL_OW 310
5183: PPUSH
5184: CALL_OW 85
// Wait ( 0 0$1 ) ;
5188: LD_INT 35
5190: PPUSH
5191: CALL_OW 67
// if IsOk ( Gary ) then
5195: LD_EXP 10
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5242
// begin Say ( Gary , D2-Gary-1 ) ;
5206: LD_EXP 10
5210: PPUSH
5211: LD_STRING D2-Gary-1
5213: PPUSH
5214: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5218: LD_EXP 1
5222: PPUSH
5223: LD_STRING D2-JMM-1
5225: PPUSH
5226: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5230: LD_EXP 10
5234: PPUSH
5235: LD_STRING D2-Gary-2
5237: PPUSH
5238: CALL_OW 88
// end ; Video ( false ) ;
5242: LD_INT 0
5244: PPUSH
5245: CALL 85497 0 1
// ChangeMissionObjectives ( M1 ) ;
5249: LD_STRING M1
5251: PPUSH
5252: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5256: LD_INT 38
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: LD_INT 100
5264: PPUSH
5265: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5269: LD_INT 47
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_INT 50
5277: PPUSH
5278: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5282: LD_INT 47
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 50
5290: PPUSH
5291: CALL_OW 291
// SaveForQuickRestart ;
5295: CALL_OW 22
// end ;
5299: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5300: LD_EXP 1
5304: PPUSH
5305: LD_EXP 11
5309: PPUSH
5310: CALL_OW 296
5314: PUSH
5315: LD_INT 15
5317: LESS
5318: IFFALSE 5999
5320: GO 5322
5322: DISABLE
5323: LD_INT 0
5325: PPUSH
// begin wait ( 0 0$3 ) ;
5326: LD_INT 105
5328: PPUSH
5329: CALL_OW 67
// Video ( true ) ;
5333: LD_INT 1
5335: PPUSH
5336: CALL 85497 0 1
// ComExitVehicle ( JMM ) ;
5340: LD_EXP 1
5344: PPUSH
5345: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5349: LD_EXP 1
5353: PPUSH
5354: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5358: LD_EXP 1
5362: PPUSH
5363: LD_EXP 11
5367: PPUSH
5368: CALL_OW 179
// p := 15 ;
5372: LD_ADDR_VAR 0 1
5376: PUSH
5377: LD_INT 15
5379: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5380: LD_INT 35
5382: PPUSH
5383: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5387: LD_EXP 11
5391: PUSH
5392: LD_EXP 13
5396: PUSH
5397: LD_EXP 12
5401: PUSH
5402: LD_EXP 14
5406: PUSH
5407: LD_EXP 8
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: LD_EXP 1
5423: PPUSH
5424: CALL_OW 112
// p := p - 1 ;
5428: LD_ADDR_VAR 0 1
5432: PUSH
5433: LD_VAR 0 1
5437: PUSH
5438: LD_INT 1
5440: MINUS
5441: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5442: LD_EXP 1
5446: PPUSH
5447: LD_EXP 11
5451: PPUSH
5452: CALL_OW 296
5456: PUSH
5457: LD_INT 5
5459: LESS
5460: PUSH
5461: LD_VAR 0 1
5465: PUSH
5466: LD_INT 0
5468: LESSEQUAL
5469: OR
5470: IFFALSE 5380
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5472: LD_EXP 11
5476: PUSH
5477: LD_EXP 13
5481: PUSH
5482: LD_EXP 12
5486: PUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_EXP 8
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 119
// if not IsInUnit ( JMM ) then
5513: LD_EXP 1
5517: PPUSH
5518: CALL_OW 310
5522: NOT
5523: IFFALSE 5539
// ComTurnUnit ( JMM , Simms ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_EXP 11
5534: PPUSH
5535: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5539: LD_EXP 11
5543: PUSH
5544: LD_EXP 13
5548: PUSH
5549: LD_EXP 12
5553: PUSH
5554: LD_EXP 14
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PPUSH
5565: LD_EXP 1
5569: PPUSH
5570: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5574: LD_EXP 1
5578: PUSH
5579: LD_EXP 11
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PPUSH
5588: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5592: LD_EXP 11
5596: PPUSH
5597: LD_STRING D2a-Sim-1
5599: PPUSH
5600: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_STRING D2a-JMM-1
5611: PPUSH
5612: CALL_OW 88
// if IsOk ( Joan ) then
5616: LD_EXP 13
5620: PPUSH
5621: CALL_OW 302
5625: IFFALSE 5703
// begin if not IsInUnit ( JMM ) then
5627: LD_EXP 1
5631: PPUSH
5632: CALL_OW 310
5636: NOT
5637: IFFALSE 5653
// ComTurnUnit ( JMM , Joan ) ;
5639: LD_EXP 1
5643: PPUSH
5644: LD_EXP 13
5648: PPUSH
5649: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5653: LD_EXP 13
5657: PPUSH
5658: LD_EXP 1
5662: PPUSH
5663: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5667: LD_EXP 13
5671: PPUSH
5672: LD_STRING D2b-Joan-1
5674: PPUSH
5675: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5679: LD_EXP 1
5683: PPUSH
5684: LD_STRING D2b-JMM-1
5686: PPUSH
5687: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5691: LD_EXP 13
5695: PPUSH
5696: LD_STRING D2b-Joan-2
5698: PPUSH
5699: CALL_OW 88
// end ; if IsOk ( Denis ) then
5703: LD_EXP 12
5707: PPUSH
5708: CALL_OW 302
5712: IFFALSE 5766
// begin if not IsInUnit ( JMM ) then
5714: LD_EXP 1
5718: PPUSH
5719: CALL_OW 310
5723: NOT
5724: IFFALSE 5740
// ComTurnUnit ( JMM , Denis ) ;
5726: LD_EXP 1
5730: PPUSH
5731: LD_EXP 12
5735: PPUSH
5736: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
5740: LD_EXP 12
5744: PPUSH
5745: LD_EXP 1
5749: PPUSH
5750: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5754: LD_EXP 12
5758: PPUSH
5759: LD_STRING D2c-Den-1
5761: PPUSH
5762: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5766: LD_EXP 8
5770: PPUSH
5771: CALL_OW 302
5775: PUSH
5776: LD_STRING 08_Kikuchi
5778: PPUSH
5779: CALL_OW 28
5783: NOT
5784: AND
5785: IFFALSE 5880
// begin repeat wait ( 0 0$1 ) ;
5787: LD_INT 35
5789: PPUSH
5790: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5794: LD_EXP 8
5798: PPUSH
5799: LD_EXP 1
5803: PPUSH
5804: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5808: LD_EXP 1
5812: PPUSH
5813: LD_EXP 8
5817: PPUSH
5818: CALL_OW 296
5822: PUSH
5823: LD_INT 5
5825: LESS
5826: IFFALSE 5787
// ComTurnUnit ( Kikuchi , JMM ) ;
5828: LD_EXP 8
5832: PPUSH
5833: LD_EXP 1
5837: PPUSH
5838: CALL_OW 119
// if not IsInUnit ( JMM ) then
5842: LD_EXP 1
5846: PPUSH
5847: CALL_OW 310
5851: NOT
5852: IFFALSE 5868
// ComTurnUnit ( JMM , Kikuchi ) ;
5854: LD_EXP 1
5858: PPUSH
5859: LD_EXP 8
5863: PPUSH
5864: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5868: LD_EXP 8
5872: PPUSH
5873: LD_STRING D3b-Yam-1
5875: PPUSH
5876: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5880: LD_EXP 14
5884: PPUSH
5885: CALL_OW 302
5889: IFFALSE 5955
// begin if not IsInUnit ( JMM ) then
5891: LD_EXP 1
5895: PPUSH
5896: CALL_OW 310
5900: NOT
5901: IFFALSE 5917
// ComTurnUnit ( JMM , Khatam ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_EXP 14
5912: PPUSH
5913: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
5917: LD_EXP 14
5921: PPUSH
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5931: LD_EXP 1
5935: PPUSH
5936: LD_STRING D2c-JMM-1
5938: PPUSH
5939: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5943: LD_EXP 14
5947: PPUSH
5948: LD_STRING D2c-Khat-1
5950: PPUSH
5951: CALL_OW 88
// end ; Video ( false ) ;
5955: LD_INT 0
5957: PPUSH
5958: CALL 85497 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5962: LD_INT 22
5964: PUSH
5965: LD_INT 4
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 69
5976: PPUSH
5977: LD_INT 1
5979: PPUSH
5980: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5984: LD_STRING M1a
5986: PPUSH
5987: CALL_OW 337
// joinEpsilon = 1 ;
5991: LD_ADDR_EXP 29
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// end ;
5999: PPOPN 1
6001: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6002: LD_INT 38
6004: PPUSH
6005: LD_INT 1
6007: PPUSH
6008: CALL_OW 289
6012: PUSH
6013: LD_INT 0
6015: EQUAL
6016: PUSH
6017: LD_INT 47
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: CALL_OW 289
6027: PUSH
6028: LD_INT 0
6030: EQUAL
6031: AND
6032: PUSH
6033: LD_INT 47
6035: PPUSH
6036: LD_INT 2
6038: PPUSH
6039: CALL_OW 289
6043: PUSH
6044: LD_INT 0
6046: EQUAL
6047: AND
6048: IFFALSE 6173
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
// begin p := 0 ;
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6064: LD_INT 38
6066: PUSH
6067: LD_INT 47
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: LD_INT 56
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6084: LD_INT 35
6086: PPUSH
6087: CALL_OW 67
// p := p + 1 ;
6091: LD_ADDR_VAR 0 1
6095: PUSH
6096: LD_VAR 0 1
6100: PUSH
6101: LD_INT 1
6103: PLUS
6104: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6105: LD_INT 38
6107: PUSH
6108: LD_INT 47
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: LD_INT 56
6117: PPUSH
6118: LD_INT 0
6120: PPUSH
6121: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6125: LD_INT 38
6127: PPUSH
6128: LD_INT 27
6130: PPUSH
6131: CALL_OW 308
6135: IFFALSE 6144
// RemoveUnit ( cargo1 ) ;
6137: LD_INT 38
6139: PPUSH
6140: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6144: LD_INT 47
6146: PPUSH
6147: LD_INT 27
6149: PPUSH
6150: CALL_OW 308
6154: IFFALSE 6163
// RemoveUnit ( cargo2 ) ;
6156: LD_INT 47
6158: PPUSH
6159: CALL_OW 64
// until p > 30 ;
6163: LD_VAR 0 1
6167: PUSH
6168: LD_INT 30
6170: GREATER
6171: IFFALSE 6084
// end ;
6173: PPOPN 1
6175: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6176: LD_EXP 65
6180: PUSH
6181: LD_INT 1
6183: EQUAL
6184: IFFALSE 7316
6186: GO 6188
6188: DISABLE
6189: LD_INT 0
6191: PPUSH
6192: PPUSH
6193: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6194: LD_ADDR_VAR 0 1
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 4
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 26
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PUSH
6239: LD_EXP 1
6243: PUSH
6244: LD_EXP 2
6248: PUSH
6249: LD_EXP 3
6253: PUSH
6254: LD_EXP 4
6258: PUSH
6259: LD_EXP 5
6263: PUSH
6264: LD_EXP 6
6268: PUSH
6269: LD_EXP 7
6273: PUSH
6274: LD_EXP 8
6278: PUSH
6279: LD_EXP 9
6283: PUSH
6284: LD_EXP 10
6288: PUSH
6289: LD_EXP 11
6293: PUSH
6294: LD_EXP 12
6298: PUSH
6299: LD_EXP 13
6303: PUSH
6304: LD_EXP 14
6308: PUSH
6309: LD_EXP 15
6313: PUSH
6314: LD_EXP 16
6318: PUSH
6319: LD_EXP 17
6323: PUSH
6324: LD_EXP 18
6328: PUSH
6329: LD_EXP 19
6333: PUSH
6334: LD_EXP 24
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: DIFF
6361: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6362: LD_ADDR_VAR 0 2
6366: PUSH
6367: LD_INT 22
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 26
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 25
6392: PUSH
6393: LD_INT 1
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 25
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 25
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: PUSH
6436: LD_EXP 1
6440: PUSH
6441: LD_EXP 2
6445: PUSH
6446: LD_EXP 3
6450: PUSH
6451: LD_EXP 4
6455: PUSH
6456: LD_EXP 5
6460: PUSH
6461: LD_EXP 6
6465: PUSH
6466: LD_EXP 7
6470: PUSH
6471: LD_EXP 8
6475: PUSH
6476: LD_EXP 9
6480: PUSH
6481: LD_EXP 10
6485: PUSH
6486: LD_EXP 11
6490: PUSH
6491: LD_EXP 12
6495: PUSH
6496: LD_EXP 13
6500: PUSH
6501: LD_EXP 14
6505: PUSH
6506: LD_EXP 15
6510: PUSH
6511: LD_EXP 16
6515: PUSH
6516: LD_EXP 17
6520: PUSH
6521: LD_EXP 18
6525: PUSH
6526: LD_EXP 19
6530: PUSH
6531: LD_EXP 24
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: DIFF
6558: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6559: LD_EXP 10
6563: PUSH
6564: LD_VAR 0 2
6568: OR
6569: PUSH
6570: LD_EXP 17
6574: PUSH
6575: LD_VAR 0 1
6579: OR
6580: AND
6581: IFFALSE 6800
// begin DialogueOn ;
6583: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6587: LD_EXP 17
6591: PPUSH
6592: CALL_OW 302
6596: IFFALSE 6612
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6598: LD_EXP 17
6602: PPUSH
6603: LD_STRING D3-Sci1-1
6605: PPUSH
6606: CALL_OW 88
6610: GO 6624
// Say ( tmp1 , D3-Sci1-1 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_STRING D3-Sci1-1
6619: PPUSH
6620: CALL_OW 88
// if IsOk ( Gary ) then
6624: LD_EXP 10
6628: PPUSH
6629: CALL_OW 302
6633: IFFALSE 6649
// Say ( Gary , D3-Gary-1 ) else
6635: LD_EXP 10
6639: PPUSH
6640: LD_STRING D3-Gary-1
6642: PPUSH
6643: CALL_OW 88
6647: GO 6661
// Say ( tmp2 , D3-Gary-1 ) ;
6649: LD_VAR 0 2
6653: PPUSH
6654: LD_STRING D3-Gary-1
6656: PPUSH
6657: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6661: LD_EXP 17
6665: PPUSH
6666: CALL_OW 302
6670: IFFALSE 6686
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6672: LD_EXP 17
6676: PPUSH
6677: LD_STRING D3-Sci1-2
6679: PPUSH
6680: CALL_OW 88
6684: GO 6698
// Say ( tmp1 , D3-Sci1-2 ) ;
6686: LD_VAR 0 1
6690: PPUSH
6691: LD_STRING D3-Sci1-2
6693: PPUSH
6694: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6698: LD_EXP 1
6702: PPUSH
6703: LD_STRING D3-JMM-2
6705: PPUSH
6706: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6710: LD_EXP 17
6714: PPUSH
6715: CALL_OW 302
6719: IFFALSE 6735
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6721: LD_EXP 17
6725: PPUSH
6726: LD_STRING D3-Sci1-3
6728: PPUSH
6729: CALL_OW 88
6733: GO 6747
// Say ( tmp1 , D3-Sci1-3 ) ;
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_STRING D3-Sci1-3
6742: PPUSH
6743: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6747: LD_EXP 1
6751: PPUSH
6752: LD_STRING D3-JMM-3
6754: PPUSH
6755: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6759: LD_EXP 17
6763: PPUSH
6764: CALL_OW 302
6768: IFFALSE 6784
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6770: LD_EXP 17
6774: PPUSH
6775: LD_STRING D3-Sci1-4
6777: PPUSH
6778: CALL_OW 88
6782: GO 6796
// Say ( tmp1 , D3-Sci1-4 ) ;
6784: LD_VAR 0 1
6788: PPUSH
6789: LD_STRING D3-Sci1-4
6791: PPUSH
6792: CALL_OW 88
// DialogueOff ;
6796: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6800: LD_INT 12
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: LD_INT 1
6808: PPUSH
6809: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6813: LD_INT 32
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_INT 1
6821: PPUSH
6822: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6826: LD_INT 12
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6839: LD_INT 33
6841: PPUSH
6842: LD_INT 1
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6852: LD_STRING M2
6854: PPUSH
6855: CALL_OW 337
// wait ( 3 3$0 ) ;
6859: LD_INT 6300
6861: PPUSH
6862: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 67
// until not InBattle ( 1 ) ;
6873: LD_INT 1
6875: PPUSH
6876: CALL_OW 463
6880: NOT
6881: IFFALSE 6866
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6883: LD_EXP 11
6887: PPUSH
6888: CALL_OW 302
6892: PUSH
6893: LD_EXP 17
6897: PPUSH
6898: CALL_OW 302
6902: AND
6903: IFFALSE 7072
// begin DialogueOn ;
6905: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6909: LD_EXP 11
6913: PPUSH
6914: LD_STRING D3a-Sim-1
6916: PPUSH
6917: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6921: LD_EXP 17
6925: PPUSH
6926: LD_STRING D3a-Sci1-1
6928: PPUSH
6929: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6933: LD_EXP 11
6937: PPUSH
6938: LD_STRING D3a-Sim-2
6940: PPUSH
6941: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6945: LD_EXP 17
6949: PPUSH
6950: LD_STRING D3a-Sci1-2
6952: PPUSH
6953: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6957: LD_EXP 11
6961: PPUSH
6962: LD_STRING D3a-Sim-3
6964: PPUSH
6965: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6969: LD_EXP 17
6973: PPUSH
6974: LD_STRING D3a-Sci1-3
6976: PPUSH
6977: CALL_OW 88
// if IsOK ( Joan ) then
6981: LD_EXP 13
6985: PPUSH
6986: CALL_OW 302
6990: IFFALSE 7006
// Say ( Simms , D3a-Sim-4 ) else
6992: LD_EXP 11
6996: PPUSH
6997: LD_STRING D3a-Sim-4
6999: PPUSH
7000: CALL_OW 88
7004: GO 7018
// Say ( Simms , D3a-Sim-4a ) ;
7006: LD_EXP 11
7010: PPUSH
7011: LD_STRING D3a-Sim-4a
7013: PPUSH
7014: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7018: LD_EXP 17
7022: PPUSH
7023: LD_STRING D3a-Sci1-4
7025: PPUSH
7026: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7030: LD_EXP 11
7034: PPUSH
7035: LD_STRING D3a-Sim-5
7037: PPUSH
7038: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7042: LD_EXP 17
7046: PPUSH
7047: LD_STRING D3a-Sci1-5
7049: PPUSH
7050: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7054: LD_EXP 11
7058: PPUSH
7059: LD_STRING D3a-Sim-6
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// end else
7070: GO 7316
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_INT 22
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 4
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PUSH
7106: LD_EXP 11
7110: PUSH
7111: LD_EXP 14
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: DIFF
7120: ST_TO_ADDR
// if tmp3 > 0 then
7121: LD_VAR 0 3
7125: PUSH
7126: LD_INT 0
7128: GREATER
7129: IFFALSE 7316
// begin DialogueOn ;
7131: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7135: LD_EXP 11
7139: PPUSH
7140: LD_STRING D3a-Sim-1
7142: PPUSH
7143: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7147: LD_VAR 0 3
7151: PUSH
7152: LD_INT 1
7154: ARRAY
7155: PPUSH
7156: LD_STRING D3a-Sci1-1
7158: PPUSH
7159: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7163: LD_EXP 11
7167: PPUSH
7168: LD_STRING D3a-Sim-2
7170: PPUSH
7171: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7175: LD_VAR 0 3
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_STRING D3a-Sci1-2
7186: PPUSH
7187: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7191: LD_EXP 11
7195: PPUSH
7196: LD_STRING D3a-Sim-3
7198: PPUSH
7199: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7203: LD_VAR 0 3
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PPUSH
7212: LD_STRING D3a-Sci1-3
7214: PPUSH
7215: CALL_OW 88
// if IsOK ( Joan ) then
7219: LD_EXP 13
7223: PPUSH
7224: CALL_OW 302
7228: IFFALSE 7244
// Say ( Simms , D3a-Sim-4 ) else
7230: LD_EXP 11
7234: PPUSH
7235: LD_STRING D3a-Sim-4
7237: PPUSH
7238: CALL_OW 88
7242: GO 7256
// Say ( Simms , D3a-Sim-4a ) ;
7244: LD_EXP 11
7248: PPUSH
7249: LD_STRING D3a-Sim-4a
7251: PPUSH
7252: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: LD_STRING D3a-Sci1-4
7267: PPUSH
7268: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7272: LD_EXP 11
7276: PPUSH
7277: LD_STRING D3a-Sim-5
7279: PPUSH
7280: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7284: LD_VAR 0 3
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: PPUSH
7293: LD_STRING D3a-Sci1-5
7295: PPUSH
7296: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7300: LD_EXP 11
7304: PPUSH
7305: LD_STRING D3a-Sim-6
7307: PPUSH
7308: CALL_OW 88
// DialogueOff ;
7312: CALL_OW 7
// end ; end ; end ;
7316: PPOPN 3
7318: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7319: LD_EXP 29
7323: PUSH
7324: LD_INT 1
7326: EQUAL
7327: IFFALSE 7662
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
// begin wait ( 2 2$00 ) ;
7335: LD_INT 4200
7337: PPUSH
7338: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7342: LD_EXP 18
7346: PPUSH
7347: LD_STRING D4-FSol1-1
7349: PPUSH
7350: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7354: LD_STRING M3
7356: PPUSH
7357: CALL_OW 337
// PrepareRussians ;
7361: CALL 3620 0 0
// spawnRussians := true ;
7365: LD_ADDR_EXP 58
7369: PUSH
7370: LD_INT 1
7372: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7373: LD_ADDR_VAR 0 1
7377: PUSH
7378: LD_INT 1
7380: PPUSH
7381: LD_INT 100
7383: PPUSH
7384: CALL_OW 12
7388: ST_TO_ADDR
// if difficulty = 1 then
7389: LD_OWVAR 67
7393: PUSH
7394: LD_INT 1
7396: EQUAL
7397: IFFALSE 7480
// begin if rnd > 0 and rnd < 51 then
7399: LD_VAR 0 1
7403: PUSH
7404: LD_INT 0
7406: GREATER
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 51
7415: LESS
7416: AND
7417: IFFALSE 7426
// BuildRussianBase ( 2 ) ;
7419: LD_INT 2
7421: PPUSH
7422: CALL 11768 0 1
// if rnd > 50 and rnd < 81 then
7426: LD_VAR 0 1
7430: PUSH
7431: LD_INT 50
7433: GREATER
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: LD_INT 81
7442: LESS
7443: AND
7444: IFFALSE 7453
// BuildRussianBase ( 1 ) ;
7446: LD_INT 1
7448: PPUSH
7449: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7453: LD_VAR 0 1
7457: PUSH
7458: LD_INT 80
7460: GREATER
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 101
7469: LESS
7470: AND
7471: IFFALSE 7480
// BuildRussianBase ( 3 ) ;
7473: LD_INT 3
7475: PPUSH
7476: CALL 11768 0 1
// end ; if difficulty = 2 then
7480: LD_OWVAR 67
7484: PUSH
7485: LD_INT 2
7487: EQUAL
7488: IFFALSE 7571
// begin if rnd > 0 and rnd < 61 then
7490: LD_VAR 0 1
7494: PUSH
7495: LD_INT 0
7497: GREATER
7498: PUSH
7499: LD_VAR 0 1
7503: PUSH
7504: LD_INT 61
7506: LESS
7507: AND
7508: IFFALSE 7517
// BuildRussianBase ( 2 ) ;
7510: LD_INT 2
7512: PPUSH
7513: CALL 11768 0 1
// if rnd > 60 and rnd < 81 then
7517: LD_VAR 0 1
7521: PUSH
7522: LD_INT 60
7524: GREATER
7525: PUSH
7526: LD_VAR 0 1
7530: PUSH
7531: LD_INT 81
7533: LESS
7534: AND
7535: IFFALSE 7544
// BuildRussianBase ( 1 ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7544: LD_VAR 0 1
7548: PUSH
7549: LD_INT 80
7551: GREATER
7552: PUSH
7553: LD_VAR 0 1
7557: PUSH
7558: LD_INT 101
7560: LESS
7561: AND
7562: IFFALSE 7571
// BuildRussianBase ( 3 ) ;
7564: LD_INT 3
7566: PPUSH
7567: CALL 11768 0 1
// end ; if difficulty >= 3 then
7571: LD_OWVAR 67
7575: PUSH
7576: LD_INT 3
7578: GREATEREQUAL
7579: IFFALSE 7662
// begin if rnd > 0 and rnd < 71 then
7581: LD_VAR 0 1
7585: PUSH
7586: LD_INT 0
7588: GREATER
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: LD_INT 71
7597: LESS
7598: AND
7599: IFFALSE 7608
// BuildRussianBase ( 3 ) ;
7601: LD_INT 3
7603: PPUSH
7604: CALL 11768 0 1
// if rnd > 70 and rnd < 81 then
7608: LD_VAR 0 1
7612: PUSH
7613: LD_INT 70
7615: GREATER
7616: PUSH
7617: LD_VAR 0 1
7621: PUSH
7622: LD_INT 81
7624: LESS
7625: AND
7626: IFFALSE 7635
// BuildRussianBase ( 2 ) ;
7628: LD_INT 2
7630: PPUSH
7631: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7635: LD_VAR 0 1
7639: PUSH
7640: LD_INT 80
7642: GREATER
7643: PUSH
7644: LD_VAR 0 1
7648: PUSH
7649: LD_INT 101
7651: LESS
7652: AND
7653: IFFALSE 7662
// BuildRussianBase ( 1 ) ;
7655: LD_INT 1
7657: PPUSH
7658: CALL 11768 0 1
// end ; end ;
7662: PPOPN 1
7664: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7665: LD_INT 54
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 321
7675: PUSH
7676: LD_INT 2
7678: EQUAL
7679: PUSH
7680: LD_INT 21
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 321
7690: PUSH
7691: LD_INT 2
7693: EQUAL
7694: OR
7695: PUSH
7696: LD_INT 22
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: CALL_OW 321
7706: PUSH
7707: LD_INT 2
7709: EQUAL
7710: OR
7711: IFFALSE 8013
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7720: LD_EXP 17
7724: PPUSH
7725: CALL_OW 302
7729: IFFALSE 7743
// tmp := DeltaDoctor else
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: LD_EXP 17
7740: ST_TO_ADDR
7741: GO 7753
// tmp := Denis ;
7743: LD_ADDR_VAR 0 2
7747: PUSH
7748: LD_EXP 12
7752: ST_TO_ADDR
// if tmp then
7753: LD_VAR 0 2
7757: IFFALSE 7851
// begin DialogueOn ;
7759: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D6-JMM-1
7770: PPUSH
7771: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7775: LD_VAR 0 2
7779: PPUSH
7780: LD_STRING D6-Sci1-1
7782: PPUSH
7783: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7787: LD_EXP 1
7791: PPUSH
7792: LD_STRING D6-JMM-2
7794: PPUSH
7795: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7799: LD_VAR 0 2
7803: PPUSH
7804: LD_STRING D6-Sci1-2
7806: PPUSH
7807: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7811: LD_EXP 1
7815: PPUSH
7816: LD_STRING D6-JMM-3
7818: PPUSH
7819: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7823: LD_VAR 0 2
7827: PPUSH
7828: LD_STRING D6-Sci1-3
7830: PPUSH
7831: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7835: LD_EXP 1
7839: PPUSH
7840: LD_STRING D6-JMM-4
7842: PPUSH
7843: CALL_OW 88
// DialogueOff ;
7847: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7851: LD_INT 1050
7853: PPUSH
7854: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7858: LD_EXP 49
7862: PUSH
7863: LD_INT 0
7865: EQUAL
7866: PUSH
7867: LD_EXP 14
7871: PPUSH
7872: CALL_OW 302
7876: AND
7877: IFFALSE 7935
// begin DialogueOn ;
7879: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7883: LD_EXP 27
7887: PPUSH
7888: LD_STRING D5-Ar1-1
7890: PPUSH
7891: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7895: LD_EXP 26
7899: PPUSH
7900: LD_STRING D5-Diet-1
7902: PPUSH
7903: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7907: LD_EXP 27
7911: PPUSH
7912: LD_STRING D5-Ar1-2
7914: PPUSH
7915: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7919: LD_EXP 26
7923: PPUSH
7924: LD_STRING D5-Diet-2
7926: PPUSH
7927: CALL_OW 88
// DialogueOff ;
7931: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7935: LD_INT 35
7937: PPUSH
7938: CALL_OW 67
// until tick > 10 10$00 ;
7942: LD_OWVAR 1
7946: PUSH
7947: LD_INT 21000
7949: GREATER
7950: IFFALSE 7935
// wait ( 1 1$30 ) ;
7952: LD_INT 3150
7954: PPUSH
7955: CALL_OW 67
// if arabianTrait = 0 then
7959: LD_EXP 49
7963: PUSH
7964: LD_INT 0
7966: EQUAL
7967: IFFALSE 8013
// begin arabianTrait = 1 ;
7969: LD_ADDR_EXP 49
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 3
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7993: LD_INT 2
7995: PPUSH
7996: LD_INT 6
7998: PPUSH
7999: LD_INT 1
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 80
// PrepareArabianTrait ;
8009: CALL 8016 0 0
// end ; end ;
8013: PPOPN 2
8015: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
8020: PPUSH
8021: PPUSH
8022: PPUSH
8023: PPUSH
8024: PPUSH
8025: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_INT 22
8033: PUSH
8034: LD_INT 2
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 2
8043: PUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PPUSH
8084: CALL_OW 69
8088: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8089: LD_ADDR_VAR 0 5
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 2
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 21
8106: PUSH
8107: LD_INT 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 25
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 25
8129: PUSH
8130: LD_INT 8
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 25
8139: PUSH
8140: LD_INT 15
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: PPUSH
8158: CALL_OW 69
8162: PUSH
8163: LD_EXP 26
8167: PUSH
8168: EMPTY
8169: LIST
8170: DIFF
8171: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 5
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8210: LD_VAR 0 6
8214: PPUSH
8215: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8219: LD_VAR 0 5
8223: PPUSH
8224: CALL_OW 122
// wait ( 0 0$3 ) ;
8228: LD_INT 105
8230: PPUSH
8231: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8235: LD_VAR 0 6
8239: PPUSH
8240: LD_VAR 0 7
8244: PPUSH
8245: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8249: LD_VAR 0 6
8253: PPUSH
8254: LD_INT 1
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 12
8274: ARRAY
8275: PPUSH
8276: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8280: LD_VAR 0 6
8284: PPUSH
8285: CALL_OW 182
// wait ( 0 0$1 ) ;
8289: LD_INT 35
8291: PPUSH
8292: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8296: LD_INT 76
8298: PPUSH
8299: LD_INT 19
8301: PPUSH
8302: CALL_OW 84
// DialogueOn ;
8306: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8310: LD_INT 22
8312: PUSH
8313: LD_INT 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 26
8322: PUSH
8323: LD_INT 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 3
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 25
8375: PUSH
8376: LD_INT 5
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: PPUSH
8396: CALL_OW 69
8400: PPUSH
8401: LD_STRING D8-Sol1-1
8403: PPUSH
8404: LD_STRING D8-Sol1-1
8406: PPUSH
8407: CALL 11110 0 3
// if IsOK ( DeltaDoctor ) then
8411: LD_EXP 17
8415: PPUSH
8416: CALL_OW 302
8420: IFFALSE 8436
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8422: LD_EXP 17
8426: PPUSH
8427: LD_STRING D8-Sci1-1
8429: PPUSH
8430: CALL_OW 88
8434: GO 8537
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8436: LD_INT 22
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 26
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 3
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 4
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PPUSH
8522: CALL_OW 69
8526: PPUSH
8527: LD_STRING D8-Sol1-1
8529: PPUSH
8530: LD_STRING D8-Sol1-1
8532: PPUSH
8533: CALL 11110 0 3
// Say ( JMM , D8-JMM-1 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D8-JMM-1
8544: PPUSH
8545: CALL_OW 88
// DialogueOff ;
8549: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8553: LD_INT 2
8555: PPUSH
8556: LD_INT 2
8558: PPUSH
8559: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: LD_INT 2
8571: PPUSH
8572: LD_INT 1
8574: PPUSH
8575: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8579: LD_INT 3
8581: PPUSH
8582: LD_INT 2
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_INT 1
8590: PPUSH
8591: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8595: LD_STRING M4
8597: PPUSH
8598: CALL_OW 337
// wait ( 0 0$1 ) ;
8602: LD_INT 35
8604: PPUSH
8605: CALL_OW 67
// if IsLive ( Khatam ) then
8609: LD_EXP 14
8613: PPUSH
8614: CALL_OW 300
8618: IFFALSE 8632
// DoNotAttack ( 2 , Khatam ) ;
8620: LD_INT 2
8622: PPUSH
8623: LD_EXP 14
8627: PPUSH
8628: CALL_OW 471
// wait ( 0 0$1 ) ;
8632: LD_INT 35
8634: PPUSH
8635: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8639: LD_ADDR_VAR 0 8
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 21
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: PPUSH
8673: LD_VAR 0 5
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: PPUSH
8682: CALL_OW 74
8686: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8687: LD_VAR 0 5
8691: PPUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 72
8706: PUSH
8707: LD_INT 1
8709: ARRAY
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 250
8720: PPUSH
8721: LD_VAR 0 8
8725: PPUSH
8726: CALL_OW 251
8730: PPUSH
8731: LD_VAR 0 8
8735: PPUSH
8736: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8740: LD_VAR 0 5
8744: PPUSH
8745: LD_INT 84
8747: PPUSH
8748: LD_INT 22
8750: PPUSH
8751: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8755: LD_VAR 0 5
8759: PPUSH
8760: LD_INT 82
8762: PPUSH
8763: LD_INT 5
8765: PPUSH
8766: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8770: LD_VAR 0 5
8774: PPUSH
8775: LD_INT 95
8777: PPUSH
8778: LD_INT 12
8780: PPUSH
8781: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8785: LD_VAR 0 5
8789: PPUSH
8790: LD_INT 102
8792: PPUSH
8793: LD_INT 11
8795: PPUSH
8796: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8800: LD_VAR 0 5
8804: PPUSH
8805: LD_INT 116
8807: PPUSH
8808: LD_INT 15
8810: PPUSH
8811: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8815: LD_VAR 0 5
8819: PPUSH
8820: LD_INT 140
8822: PPUSH
8823: LD_INT 25
8825: PPUSH
8826: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8830: LD_VAR 0 5
8834: PPUSH
8835: LD_INT 160
8837: PPUSH
8838: LD_INT 56
8840: PPUSH
8841: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8845: LD_ADDR_VAR 0 5
8849: PUSH
8850: LD_INT 22
8852: PUSH
8853: LD_INT 2
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: LD_INT 25
8875: PUSH
8876: LD_INT 1
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 8
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 25
8895: PUSH
8896: LD_INT 15
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: PUSH
8919: LD_EXP 26
8923: PUSH
8924: EMPTY
8925: LIST
8926: DIFF
8927: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8928: LD_ADDR_VAR 0 6
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 21
8945: PUSH
8946: LD_INT 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 3
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 4
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 12
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: LD_VAR 0 6
9033: PUSH
9034: LD_EXP 26
9038: ADD
9039: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9040: LD_VAR 0 5
9044: PPUSH
9045: LD_INT 189
9047: PPUSH
9048: LD_INT 79
9050: PPUSH
9051: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9055: LD_VAR 0 5
9059: PPUSH
9060: LD_INT 25
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 72
9074: IFFALSE 9115
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9076: LD_VAR 0 5
9080: PPUSH
9081: LD_INT 25
9083: PUSH
9084: LD_INT 15
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 72
9095: PUSH
9096: LD_INT 1
9098: ARRAY
9099: PPUSH
9100: LD_INT 84
9102: PPUSH
9103: LD_INT 21
9105: PPUSH
9106: CALL_OW 428
9110: PPUSH
9111: CALL_OW 120
// wait ( 0 0$4 ) ;
9115: LD_INT 140
9117: PPUSH
9118: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9122: LD_VAR 0 6
9126: PPUSH
9127: LD_INT 88
9129: PPUSH
9130: LD_INT 8
9132: PPUSH
9133: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9137: LD_VAR 0 6
9141: PPUSH
9142: LD_INT 102
9144: PPUSH
9145: LD_INT 10
9147: PPUSH
9148: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9152: LD_VAR 0 6
9156: PPUSH
9157: LD_INT 116
9159: PPUSH
9160: LD_INT 15
9162: PPUSH
9163: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9167: LD_VAR 0 6
9171: PPUSH
9172: LD_INT 140
9174: PPUSH
9175: LD_INT 25
9177: PPUSH
9178: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9182: LD_VAR 0 6
9186: PPUSH
9187: LD_INT 160
9189: PPUSH
9190: LD_INT 56
9192: PPUSH
9193: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9197: LD_VAR 0 6
9201: PPUSH
9202: LD_INT 189
9204: PPUSH
9205: LD_INT 79
9207: PPUSH
9208: CALL_OW 171
// arabianAttackersAI = 1 ;
9212: LD_ADDR_EXP 46
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if IsOk ( Gary ) then
9220: LD_EXP 10
9224: PPUSH
9225: CALL_OW 302
9229: IFFALSE 9243
// Say ( Gary , D8a-Gary-1 ) ;
9231: LD_EXP 10
9235: PPUSH
9236: LD_STRING D8a-Gary-1
9238: PPUSH
9239: CALL_OW 88
// wait ( 0 0$5 ) ;
9243: LD_INT 175
9245: PPUSH
9246: CALL_OW 67
// if IsOK ( Khatam ) then
9250: LD_EXP 14
9254: PPUSH
9255: CALL_OW 302
9259: IFFALSE 9795
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: LD_INT 22
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 1
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 25
9301: PUSH
9302: LD_INT 3
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 25
9311: PUSH
9312: LD_INT 4
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 25
9321: PUSH
9322: LD_INT 5
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 8
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: PUSH
9357: LD_EXP 1
9361: PUSH
9362: LD_EXP 2
9366: PUSH
9367: LD_EXP 3
9371: PUSH
9372: LD_EXP 4
9376: PUSH
9377: LD_EXP 5
9381: PUSH
9382: LD_EXP 6
9386: PUSH
9387: LD_EXP 7
9391: PUSH
9392: LD_EXP 8
9396: PUSH
9397: LD_EXP 9
9401: PUSH
9402: LD_EXP 10
9406: PUSH
9407: LD_EXP 11
9411: PUSH
9412: LD_EXP 12
9416: PUSH
9417: LD_EXP 13
9421: PUSH
9422: LD_EXP 14
9426: PUSH
9427: LD_EXP 15
9431: PUSH
9432: LD_EXP 16
9436: PUSH
9437: LD_EXP 17
9441: PUSH
9442: LD_EXP 19
9446: PUSH
9447: LD_EXP 24
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: DIFF
9473: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9474: LD_EXP 14
9478: PPUSH
9479: LD_INT 8
9481: PPUSH
9482: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9486: LD_EXP 14
9490: PPUSH
9491: CALL_OW 122
// wait ( 0 0$1 ) ;
9495: LD_INT 35
9497: PPUSH
9498: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9502: LD_EXP 14
9506: PPUSH
9507: CALL_OW 121
// wait ( 0 0$1 ) ;
9511: LD_INT 35
9513: PPUSH
9514: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9518: LD_EXP 14
9522: PPUSH
9523: LD_INT 7
9525: PPUSH
9526: CALL_OW 113
// if not tmp then
9530: LD_VAR 0 3
9534: NOT
9535: IFFALSE 9539
// exit ;
9537: GO 9795
// DialogueOn ;
9539: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9543: LD_VAR 0 3
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: CALL_OW 258
9556: PUSH
9557: LD_INT 1
9559: EQUAL
9560: IFFALSE 9580
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: PPUSH
9571: LD_STRING D8b-Sol1-1
9573: PPUSH
9574: CALL_OW 88
9578: GO 9596
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 1
9587: ARRAY
9588: PPUSH
9589: LD_STRING D8b-FSol1-1
9591: PPUSH
9592: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9596: LD_EXP 14
9600: PPUSH
9601: LD_STRING D8b-Khat-1
9603: PPUSH
9604: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9608: LD_VAR 0 3
9612: PUSH
9613: LD_INT 1
9615: ARRAY
9616: PPUSH
9617: CALL_OW 258
9621: PUSH
9622: LD_INT 1
9624: EQUAL
9625: IFFALSE 9645
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 1
9634: ARRAY
9635: PPUSH
9636: LD_STRING D8b-Sol1-2
9638: PPUSH
9639: CALL_OW 88
9643: GO 9661
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 1
9652: ARRAY
9653: PPUSH
9654: LD_STRING D8b-FSol1-2
9656: PPUSH
9657: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9661: LD_EXP 14
9665: PPUSH
9666: LD_STRING D8b-Khat-2
9668: PPUSH
9669: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9673: LD_VAR 0 3
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: CALL_OW 258
9686: PUSH
9687: LD_INT 1
9689: EQUAL
9690: IFFALSE 9710
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PPUSH
9701: LD_STRING D8b-Sol1-3
9703: PPUSH
9704: CALL_OW 88
9708: GO 9726
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9710: LD_VAR 0 3
9714: PUSH
9715: LD_INT 1
9717: ARRAY
9718: PPUSH
9719: LD_STRING D8b-FSol1-3
9721: PPUSH
9722: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9726: LD_EXP 14
9730: PPUSH
9731: LD_STRING D8b-Khat-3
9733: PPUSH
9734: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 1
9745: ARRAY
9746: PPUSH
9747: CALL_OW 258
9751: PUSH
9752: LD_INT 1
9754: EQUAL
9755: IFFALSE 9775
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PPUSH
9766: LD_STRING D8b-Sol1-4
9768: PPUSH
9769: CALL_OW 88
9773: GO 9791
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 1
9782: ARRAY
9783: PPUSH
9784: LD_STRING D8b-FSol1-4
9786: PPUSH
9787: CALL_OW 88
// DialogueOff ;
9791: CALL_OW 7
// end ; end ;
9795: LD_VAR 0 1
9799: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9800: LD_INT 7
9802: PPUSH
9803: LD_INT 22
9805: PUSH
9806: LD_INT 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 70
9817: PUSH
9818: LD_INT 0
9820: GREATER
9821: PUSH
9822: LD_EXP 14
9826: PPUSH
9827: LD_INT 7
9829: PPUSH
9830: CALL_OW 308
9834: OR
9835: IFFALSE 10042
9837: GO 9839
9839: DISABLE
9840: LD_INT 0
9842: PPUSH
// begin enable ;
9843: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9844: LD_ADDR_VAR 0 1
9848: PUSH
9849: LD_INT 7
9851: PPUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 70
9866: PUSH
9867: FOR_IN
9868: IFFALSE 10009
// begin if GetClass ( i ) = 4 then
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 257
9879: PUSH
9880: LD_INT 4
9882: EQUAL
9883: IFFALSE 9895
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9885: LD_INT 1
9887: PPUSH
9888: LD_STRING 10_ScientistsEscape_1
9890: PPUSH
9891: CALL_OW 39
// if i = Dietrich then
9895: LD_VAR 0 1
9899: PUSH
9900: LD_EXP 26
9904: EQUAL
9905: IFFALSE 9915
// GensherStatus = 1 ;
9907: LD_ADDR_EXP 52
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 257
9924: PUSH
9925: LD_INT 1
9927: EQUAL
9928: PUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: CALL_OW 257
9938: PUSH
9939: LD_INT 2
9941: EQUAL
9942: OR
9943: PUSH
9944: LD_VAR 0 1
9948: PPUSH
9949: CALL_OW 257
9953: PUSH
9954: LD_INT 3
9956: EQUAL
9957: OR
9958: PUSH
9959: LD_VAR 0 1
9963: PPUSH
9964: CALL_OW 257
9968: PUSH
9969: LD_INT 4
9971: EQUAL
9972: OR
9973: PUSH
9974: LD_VAR 0 1
9978: PPUSH
9979: CALL_OW 257
9983: PUSH
9984: LD_INT 8
9986: EQUAL
9987: OR
9988: IFFALSE 9998
// arabianEscape = 1 ;
9990: LD_ADDR_EXP 47
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// RemoveUnit ( i ) ;
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 64
// end ;
10007: GO 9867
10009: POP
10010: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10011: LD_EXP 14
10015: PPUSH
10016: LD_INT 7
10018: PPUSH
10019: CALL_OW 308
10023: IFFALSE 10042
// begin KhatamStatus = 1 ;
10025: LD_ADDR_EXP 53
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10033: LD_EXP 14
10037: PPUSH
10038: CALL_OW 64
// end ; end ;
10042: PPOPN 1
10044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10045: LD_INT 22
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PUSH
10074: LD_INT 0
10076: EQUAL
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 4
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 21
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: PUSH
10107: LD_INT 0
10109: EQUAL
10110: AND
10111: IFFALSE 10124
10113: GO 10115
10115: DISABLE
// arabianDefeated = 1 ;
10116: LD_ADDR_EXP 48
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
10124: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10125: LD_INT 54
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 321
10135: PUSH
10136: LD_INT 2
10138: EQUAL
10139: PUSH
10140: LD_INT 55
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 321
10150: PUSH
10151: LD_INT 2
10153: EQUAL
10154: AND
10155: PUSH
10156: LD_INT 21
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 321
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: AND
10171: PUSH
10172: LD_INT 22
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 321
10182: PUSH
10183: LD_INT 2
10185: EQUAL
10186: AND
10187: PUSH
10188: LD_INT 12
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 321
10198: PUSH
10199: LD_INT 2
10201: EQUAL
10202: AND
10203: PUSH
10204: LD_INT 32
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 321
10214: PUSH
10215: LD_INT 2
10217: EQUAL
10218: AND
10219: PUSH
10220: LD_EXP 63
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: AND
10229: PUSH
10230: LD_EXP 49
10234: PUSH
10235: LD_INT 0
10237: EQUAL
10238: AND
10239: PUSH
10240: LD_OWVAR 1
10244: PUSH
10245: LD_INT 31500
10247: GREATEREQUAL
10248: AND
10249: IFFALSE 10266
10251: GO 10253
10253: DISABLE
// begin arabianTrait = 1 ;
10254: LD_ADDR_EXP 49
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// PrepareArabianTrait ;
10262: CALL 8016 0 0
// end ;
10266: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10267: LD_EXP 29
10271: PUSH
10272: LD_STRING 02_mikhailStatus_1
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 30
10282: PUSH
10283: LD_INT 1
10285: EQUAL
10286: AND
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 5
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: AND
10307: PUSH
10308: LD_INT 22
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 49
10345: PUSH
10346: LD_INT 0
10348: EQUAL
10349: OR
10350: AND
10351: IFFALSE 10360
10353: GO 10355
10355: DISABLE
// PrepareCornell ;
10356: CALL 3450 0 0
10360: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10361: LD_INT 22
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PPUSH
10376: LD_EXP 19
10380: PPUSH
10381: CALL_OW 74
10385: PPUSH
10386: LD_EXP 19
10390: PPUSH
10391: CALL_OW 296
10395: PUSH
10396: LD_INT 9
10398: LESS
10399: IFFALSE 10620
10401: GO 10403
10403: DISABLE
// begin InGameOn ;
10404: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10408: LD_EXP 19
10412: PPUSH
10413: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10417: LD_EXP 19
10421: PPUSH
10422: LD_STRING D7-Corn-1
10424: PPUSH
10425: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10429: LD_INT 22
10431: PUSH
10432: LD_INT 1
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 1
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 2
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 25
10474: PUSH
10475: LD_INT 4
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 69
10508: PPUSH
10509: LD_STRING D7-Sol1-1
10511: PPUSH
10512: LD_STRING D7-FSol1-1
10514: PPUSH
10515: CALL 11110 0 3
// CenterNowOnUnits ( Cornell ) ;
10519: LD_EXP 19
10523: PPUSH
10524: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10528: LD_EXP 19
10532: PPUSH
10533: LD_STRING D7-Corn-2
10535: PPUSH
10536: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D7-JMM-2
10547: PPUSH
10548: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10552: LD_EXP 19
10556: PPUSH
10557: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10561: LD_EXP 19
10565: PPUSH
10566: LD_STRING D7-Corn-3
10568: PPUSH
10569: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10573: LD_EXP 19
10577: PPUSH
10578: LD_INT 250
10580: PPUSH
10581: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10585: LD_EXP 19
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 235
// wait ( 0 0$1 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10604: LD_EXP 1
10608: PPUSH
10609: LD_STRING D7-JMM-3
10611: PPUSH
10612: CALL_OW 88
// InGameOff ;
10616: CALL_OW 9
// end ;
10620: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10621: LD_EXP 19
10625: PPUSH
10626: CALL_OW 255
10630: PUSH
10631: LD_INT 1
10633: EQUAL
10634: PUSH
10635: LD_EXP 19
10639: PPUSH
10640: CALL_OW 256
10644: PUSH
10645: LD_INT 350
10647: GREATER
10648: AND
10649: IFFALSE 10842
10651: GO 10653
10653: DISABLE
// begin DialogueOn ;
10654: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10658: LD_EXP 1
10662: PPUSH
10663: LD_STRING D7a-JMM-1
10665: PPUSH
10666: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10670: LD_EXP 19
10674: PPUSH
10675: LD_STRING D7a-Corn-1
10677: PPUSH
10678: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10682: LD_EXP 1
10686: PPUSH
10687: LD_STRING D7a-JMM-2
10689: PPUSH
10690: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10694: LD_EXP 19
10698: PPUSH
10699: LD_STRING D7a-Corn-2
10701: PPUSH
10702: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10706: LD_EXP 1
10710: PPUSH
10711: LD_STRING D7a-JMM-3
10713: PPUSH
10714: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10718: LD_EXP 19
10722: PPUSH
10723: LD_STRING D7a-Corn-3
10725: PPUSH
10726: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10730: LD_EXP 1
10734: PPUSH
10735: LD_STRING D7a-JMM-4
10737: PPUSH
10738: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10742: LD_EXP 19
10746: PPUSH
10747: LD_STRING D7a-Corn-4
10749: PPUSH
10750: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_STRING D7a-JMM-5
10761: PPUSH
10762: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10766: LD_EXP 19
10770: PPUSH
10771: LD_STRING D7a-Corn-5
10773: PPUSH
10774: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10778: LD_EXP 1
10782: PPUSH
10783: LD_STRING D7a-JMM-6
10785: PPUSH
10786: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10790: LD_EXP 19
10794: PPUSH
10795: LD_STRING D7a-Corn-6
10797: PPUSH
10798: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_STRING D7a-JMM-7
10809: PPUSH
10810: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10814: LD_EXP 19
10818: PPUSH
10819: LD_STRING D7a-Corn-7
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10826: LD_EXP 1
10830: PPUSH
10831: LD_STRING D7a-JMM-8
10833: PPUSH
10834: CALL_OW 88
// DialogueOff ;
10838: CALL_OW 7
// end ;
10842: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10843: LD_EXP 61
10847: PUSH
10848: LD_EXP 1
10852: PPUSH
10853: CALL_OW 302
10857: PUSH
10858: LD_EXP 5
10862: PPUSH
10863: CALL_OW 302
10867: OR
10868: AND
10869: IFFALSE 10959
10871: GO 10873
10873: DISABLE
// begin Wait ( 0 0$2 ) ;
10874: LD_INT 70
10876: PPUSH
10877: CALL_OW 67
// DialogueOn ;
10881: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10885: LD_EXP 61
10889: PUSH
10890: LD_INT 1
10892: ARRAY
10893: PPUSH
10894: LD_EXP 61
10898: PUSH
10899: LD_INT 2
10901: ARRAY
10902: PPUSH
10903: CALL_OW 86
// if IsOk ( Cyrus ) then
10907: LD_EXP 5
10911: PPUSH
10912: CALL_OW 302
10916: IFFALSE 10932
// Say ( Cyrus , D10-Cyrus-1 ) else
10918: LD_EXP 5
10922: PPUSH
10923: LD_STRING D10-Cyrus-1
10925: PPUSH
10926: CALL_OW 88
10930: GO 10955
// if IsOk ( JMM ) then
10932: LD_EXP 1
10936: PPUSH
10937: CALL_OW 302
10941: IFFALSE 10955
// Say ( JMM , D10-JMM-1 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D10-JMM-1
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// end ;
10959: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10960: LD_INT 12
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 321
10970: PUSH
10971: LD_INT 2
10973: EQUAL
10974: IFFALSE 10986
10976: GO 10978
10978: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10979: LD_STRING M2b
10981: PPUSH
10982: CALL_OW 337
10986: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10987: LD_INT 32
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 321
10997: PUSH
10998: LD_INT 2
11000: EQUAL
11001: IFFALSE 11013
11003: GO 11005
11005: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11006: LD_STRING M2c
11008: PPUSH
11009: CALL_OW 337
11013: END
// every 0 0$1 trigger arabianDefeated = 1 do
11014: LD_EXP 48
11018: PUSH
11019: LD_INT 1
11021: EQUAL
11022: IFFALSE 11034
11024: GO 11026
11026: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11027: LD_STRING M4a
11029: PPUSH
11030: CALL_OW 337
11034: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11035: LD_INT 54
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 321
11045: PUSH
11046: LD_INT 2
11048: EQUAL
11049: PUSH
11050: LD_INT 55
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 321
11060: PUSH
11061: LD_INT 2
11063: EQUAL
11064: AND
11065: PUSH
11066: LD_INT 21
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 321
11076: PUSH
11077: LD_INT 2
11079: EQUAL
11080: AND
11081: PUSH
11082: LD_INT 22
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 321
11092: PUSH
11093: LD_INT 2
11095: EQUAL
11096: AND
11097: IFFALSE 11109
11099: GO 11101
11101: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11102: LD_STRING M2a
11104: PPUSH
11105: CALL_OW 337
11109: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11110: LD_INT 0
11112: PPUSH
11113: PPUSH
11114: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: LD_VAR 0 1
11124: PUSH
11125: LD_EXP 1
11129: PUSH
11130: LD_EXP 2
11134: PUSH
11135: LD_EXP 3
11139: PUSH
11140: LD_EXP 4
11144: PUSH
11145: LD_EXP 5
11149: PUSH
11150: LD_EXP 6
11154: PUSH
11155: LD_EXP 7
11159: PUSH
11160: LD_EXP 8
11164: PUSH
11165: LD_EXP 9
11169: PUSH
11170: LD_EXP 10
11174: PUSH
11175: LD_EXP 11
11179: PUSH
11180: LD_EXP 12
11184: PUSH
11185: LD_EXP 13
11189: PUSH
11190: LD_EXP 14
11194: PUSH
11195: LD_EXP 15
11199: PUSH
11200: LD_EXP 16
11204: PUSH
11205: LD_EXP 17
11209: PUSH
11210: LD_EXP 18
11214: PUSH
11215: LD_EXP 19
11219: PUSH
11220: LD_EXP 24
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: DIFF
11247: ST_TO_ADDR
// if not characters then
11248: LD_VAR 0 1
11252: NOT
11253: IFFALSE 11257
// exit ;
11255: GO 11403
// rnd = rand ( 1 , characters ) ;
11257: LD_ADDR_VAR 0 6
11261: PUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_VAR 0 1
11269: PPUSH
11270: CALL_OW 12
11274: ST_TO_ADDR
// for i = 1 to characters do
11275: LD_ADDR_VAR 0 5
11279: PUSH
11280: DOUBLE
11281: LD_INT 1
11283: DEC
11284: ST_TO_ADDR
11285: LD_VAR 0 1
11289: PUSH
11290: FOR_TO
11291: IFFALSE 11401
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11293: LD_VAR 0 5
11297: PUSH
11298: LD_VAR 0 6
11302: EQUAL
11303: PUSH
11304: LD_VAR 0 1
11308: PUSH
11309: LD_VAR 0 5
11313: ARRAY
11314: PPUSH
11315: CALL_OW 258
11319: PUSH
11320: LD_INT 1
11322: EQUAL
11323: AND
11324: IFFALSE 11346
// Say ( characters [ i ] , dialogMID ) ;
11326: LD_VAR 0 1
11330: PUSH
11331: LD_VAR 0 5
11335: ARRAY
11336: PPUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11346: LD_VAR 0 5
11350: PUSH
11351: LD_VAR 0 6
11355: EQUAL
11356: PUSH
11357: LD_VAR 0 1
11361: PUSH
11362: LD_VAR 0 5
11366: ARRAY
11367: PPUSH
11368: CALL_OW 258
11372: PUSH
11373: LD_INT 2
11375: EQUAL
11376: AND
11377: IFFALSE 11399
// Say ( characters [ i ] , dialogFID ) ;
11379: LD_VAR 0 1
11383: PUSH
11384: LD_VAR 0 5
11388: ARRAY
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: CALL_OW 88
// end ;
11399: GO 11290
11401: POP
11402: POP
// end ;
11403: LD_VAR 0 4
11407: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
// for i in charactersList do
11412: LD_ADDR_VAR 0 4
11416: PUSH
11417: LD_VAR 0 1
11421: PUSH
11422: FOR_IN
11423: IFFALSE 11441
// SaveCharacters ( i , ident ) ;
11425: LD_VAR 0 4
11429: PPUSH
11430: LD_VAR 0 2
11434: PPUSH
11435: CALL_OW 38
11439: GO 11422
11441: POP
11442: POP
// end ;
11443: LD_VAR 0 3
11447: RET
// export function PrepareDifficulty ; begin
11448: LD_INT 0
11450: PPUSH
// if difficulty = 1 then
11451: LD_OWVAR 67
11455: PUSH
11456: LD_INT 1
11458: EQUAL
11459: IFFALSE 11503
// begin RuSolMinLevel = 3 ;
11461: LD_ADDR_EXP 36
11465: PUSH
11466: LD_INT 3
11468: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11469: LD_ADDR_EXP 37
11473: PUSH
11474: LD_INT 5
11476: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11477: LD_INT 51
11479: PPUSH
11480: LD_INT 6
11482: PPUSH
11483: LD_INT 2
11485: PPUSH
11486: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11490: LD_INT 51
11492: PPUSH
11493: LD_INT 5
11495: PPUSH
11496: LD_INT 2
11498: PPUSH
11499: CALL_OW 322
// end ; if difficulty = 2 then
11503: LD_OWVAR 67
11507: PUSH
11508: LD_INT 2
11510: EQUAL
11511: IFFALSE 11607
// begin RuSolMinLevel = 5 ;
11513: LD_ADDR_EXP 36
11517: PUSH
11518: LD_INT 5
11520: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11521: LD_ADDR_EXP 37
11525: PUSH
11526: LD_INT 7
11528: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11529: LD_INT 51
11531: PPUSH
11532: LD_INT 6
11534: PPUSH
11535: LD_INT 2
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11542: LD_INT 57
11544: PPUSH
11545: LD_INT 6
11547: PPUSH
11548: LD_INT 2
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11555: LD_INT 63
11557: PPUSH
11558: LD_INT 6
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11568: LD_INT 51
11570: PPUSH
11571: LD_INT 5
11573: PPUSH
11574: LD_INT 2
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11581: LD_INT 5
11583: PPUSH
11584: LD_INT 2
11586: PPUSH
11587: LD_INT 2
11589: PPUSH
11590: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11594: LD_INT 5
11596: PPUSH
11597: LD_INT 5
11599: PPUSH
11600: LD_INT 2
11602: PPUSH
11603: CALL_OW 322
// end ; if difficulty >= 3 then
11607: LD_OWVAR 67
11611: PUSH
11612: LD_INT 3
11614: GREATEREQUAL
11615: IFFALSE 11763
// begin RuSolMinLevel = 6 ;
11617: LD_ADDR_EXP 36
11621: PUSH
11622: LD_INT 6
11624: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11625: LD_ADDR_EXP 37
11629: PUSH
11630: LD_INT 8
11632: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11633: LD_INT 51
11635: PPUSH
11636: LD_INT 6
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11646: LD_INT 57
11648: PPUSH
11649: LD_INT 6
11651: PPUSH
11652: LD_INT 2
11654: PPUSH
11655: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11659: LD_INT 52
11661: PPUSH
11662: LD_INT 6
11664: PPUSH
11665: LD_INT 2
11667: PPUSH
11668: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11672: LD_INT 58
11674: PPUSH
11675: LD_INT 6
11677: PPUSH
11678: LD_INT 2
11680: PPUSH
11681: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11685: LD_INT 63
11687: PPUSH
11688: LD_INT 6
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11698: LD_INT 64
11700: PPUSH
11701: LD_INT 6
11703: PPUSH
11704: LD_INT 2
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11711: LD_INT 51
11713: PPUSH
11714: LD_INT 5
11716: PPUSH
11717: LD_INT 2
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11724: LD_INT 52
11726: PPUSH
11727: LD_INT 5
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11737: LD_INT 66
11739: PPUSH
11740: LD_INT 2
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11750: LD_INT 66
11752: PPUSH
11753: LD_INT 5
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 322
// end ; end ;
11763: LD_VAR 0 1
11767: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
11772: PPUSH
11773: PPUSH
11774: PPUSH
11775: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_INT 43
11783: PUSH
11784: LD_INT 68
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 43
11793: PUSH
11794: LD_INT 79
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 99
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 103
11813: PUSH
11814: LD_INT 114
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 156
11823: PUSH
11824: LD_INT 92
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 152
11833: PUSH
11834: LD_INT 85
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: ST_TO_ADDR
// for i in sources do
11849: LD_ADDR_VAR 0 3
11853: PUSH
11854: LD_VAR 0 7
11858: PUSH
11859: FOR_IN
11860: IFFALSE 11889
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PPUSH
11871: LD_VAR 0 3
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: LD_INT 3
11882: PPUSH
11883: CALL_OW 441
11887: GO 11859
11889: POP
11890: POP
// case position of 1 :
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 1
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 11915
11904: POP
// area := westConv ; 2 :
11905: LD_ADDR_VAR 0 6
11909: PUSH
11910: LD_INT 20
11912: ST_TO_ADDR
11913: GO 11954
11915: LD_INT 2
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 11934
11923: POP
// area := midConv ; 3 :
11924: LD_ADDR_VAR 0 6
11928: PUSH
11929: LD_INT 21
11931: ST_TO_ADDR
11932: GO 11954
11934: LD_INT 3
11936: DOUBLE
11937: EQUAL
11938: IFTRUE 11942
11940: GO 11953
11942: POP
// area := eastConv ; end ;
11943: LD_ADDR_VAR 0 6
11947: PUSH
11948: LD_INT 22
11950: ST_TO_ADDR
11951: GO 11954
11953: POP
// area := AreaToList ( area , 0 ) ;
11954: LD_ADDR_VAR 0 6
11958: PUSH
11959: LD_VAR 0 6
11963: PPUSH
11964: LD_INT 0
11966: PPUSH
11967: CALL_OW 517
11971: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11972: LD_ADDR_VAR 0 3
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 6
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PUSH
11991: FOR_TO
11992: IFFALSE 12073
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11994: LD_VAR 0 6
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PUSH
12003: LD_VAR 0 3
12007: ARRAY
12008: PPUSH
12009: LD_VAR 0 6
12013: PUSH
12014: LD_INT 2
12016: ARRAY
12017: PUSH
12018: LD_VAR 0 3
12022: ARRAY
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12034: LD_VAR 0 6
12038: PUSH
12039: LD_INT 1
12041: ARRAY
12042: PUSH
12043: LD_VAR 0 3
12047: ARRAY
12048: PPUSH
12049: LD_VAR 0 6
12053: PUSH
12054: LD_INT 2
12056: ARRAY
12057: PUSH
12058: LD_VAR 0 3
12062: ARRAY
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 331
// end ;
12071: GO 11991
12073: POP
12074: POP
// ruPossition = position ;
12075: LD_ADDR_EXP 41
12079: PUSH
12080: LD_VAR 0 1
12084: ST_TO_ADDR
// if position = 1 then
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 1
12092: EQUAL
12093: IFFALSE 12841
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12095: LD_ADDR_VAR 0 4
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 25
12112: PUSH
12113: LD_INT 2
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12129: LD_ADDR_VAR 0 5
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: LD_INT 49
12139: PUSH
12140: LD_INT 74
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 73
12157: PUSH
12158: LD_INT 88
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: LD_INT 56
12175: PUSH
12176: LD_INT 62
12178: PUSH
12179: LD_INT 3
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 29
12190: PUSH
12191: LD_INT 43
12193: PUSH
12194: LD_INT 68
12196: PUSH
12197: LD_INT 2
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 43
12211: PUSH
12212: LD_INT 79
12214: PUSH
12215: LD_INT 5
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 28
12226: PUSH
12227: LD_INT 60
12229: PUSH
12230: LD_INT 75
12232: PUSH
12233: LD_INT 1
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 50
12247: PUSH
12248: LD_INT 87
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 28
12262: PUSH
12263: LD_INT 45
12265: PUSH
12266: LD_INT 67
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 17
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: LD_INT 84
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 18
12298: PUSH
12299: LD_INT 46
12301: PUSH
12302: LD_INT 87
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 28
12316: PUSH
12317: LD_INT 41
12319: PUSH
12320: LD_INT 64
12322: PUSH
12323: LD_INT 5
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 32
12334: PUSH
12335: LD_INT 75
12337: PUSH
12338: LD_INT 76
12340: PUSH
12341: LD_INT 5
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 32
12352: PUSH
12353: LD_INT 77
12355: PUSH
12356: LD_INT 75
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 32
12370: PUSH
12371: LD_INT 69
12373: PUSH
12374: LD_INT 68
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 32
12388: PUSH
12389: LD_INT 59
12391: PUSH
12392: LD_INT 96
12394: PUSH
12395: LD_INT 5
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 32
12406: PUSH
12407: LD_INT 56
12409: PUSH
12410: LD_INT 96
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 32
12424: PUSH
12425: LD_INT 51
12427: PUSH
12428: LD_INT 61
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 32
12442: PUSH
12443: LD_INT 42
12445: PUSH
12446: LD_INT 60
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 32
12460: PUSH
12461: LD_INT 36
12463: PUSH
12464: LD_INT 58
12466: PUSH
12467: LD_INT 3
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 32
12478: PUSH
12479: LD_INT 39
12481: PUSH
12482: LD_INT 59
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 32
12496: PUSH
12497: LD_INT 61
12499: PUSH
12500: LD_INT 64
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 33
12514: PUSH
12515: LD_INT 63
12517: PUSH
12518: LD_INT 90
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 33
12532: PUSH
12533: LD_INT 64
12535: PUSH
12536: LD_INT 88
12538: PUSH
12539: LD_INT 5
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 33
12550: PUSH
12551: LD_INT 72
12553: PUSH
12554: LD_INT 82
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 6
12568: PUSH
12569: LD_INT 42
12571: PUSH
12572: LD_INT 74
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 6
12586: PUSH
12587: LD_INT 56
12589: PUSH
12590: LD_INT 77
12592: PUSH
12593: LD_INT 2
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 21
12604: PUSH
12605: LD_INT 54
12607: PUSH
12608: LD_INT 91
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 16
12622: PUSH
12623: LD_INT 50
12625: PUSH
12626: LD_INT 83
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 24
12640: PUSH
12641: LD_INT 50
12643: PUSH
12644: LD_INT 90
12646: PUSH
12647: LD_INT 0
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: LD_INT 25
12707: PUSH
12708: LD_INT 2
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: PUSH
12728: FOR_IN
12729: IFFALSE 12748
// AddComAgressiveMove ( i , 53 , 82 ) ;
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_INT 53
12738: PPUSH
12739: LD_INT 82
12741: PPUSH
12742: CALL_OW 174
12746: GO 12728
12748: POP
12749: POP
// for i := 1 to buildingsTab do
12750: LD_ADDR_VAR 0 3
12754: PUSH
12755: DOUBLE
12756: LD_INT 1
12758: DEC
12759: ST_TO_ADDR
12760: LD_VAR 0 5
12764: PUSH
12765: FOR_TO
12766: IFFALSE 12839
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_VAR 0 5
12777: PUSH
12778: LD_VAR 0 3
12782: ARRAY
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 3
12797: ARRAY
12798: PUSH
12799: LD_INT 2
12801: ARRAY
12802: PPUSH
12803: LD_VAR 0 5
12807: PUSH
12808: LD_VAR 0 3
12812: ARRAY
12813: PUSH
12814: LD_INT 3
12816: ARRAY
12817: PPUSH
12818: LD_VAR 0 5
12822: PUSH
12823: LD_VAR 0 3
12827: ARRAY
12828: PUSH
12829: LD_INT 4
12831: ARRAY
12832: PPUSH
12833: CALL_OW 205
12837: GO 12765
12839: POP
12840: POP
// end ; if position = 2 then
12841: LD_VAR 0 1
12845: PUSH
12846: LD_INT 2
12848: EQUAL
12849: IFFALSE 13464
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12851: LD_ADDR_VAR 0 4
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 3
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 25
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 69
12884: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12885: LD_ADDR_VAR 0 5
12889: PUSH
12890: LD_INT 0
12892: PUSH
12893: LD_INT 104
12895: PUSH
12896: LD_INT 110
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 98
12913: PUSH
12914: LD_INT 90
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 103
12931: PUSH
12932: LD_INT 114
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 99
12949: PUSH
12950: LD_INT 114
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 100
12967: PUSH
12968: LD_INT 112
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 92
12985: PUSH
12986: LD_INT 101
12988: PUSH
12989: LD_INT 0
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 28
13000: PUSH
13001: LD_INT 97
13003: PUSH
13004: LD_INT 116
13006: PUSH
13007: LD_INT 5
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 96
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 4
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 88
13039: PUSH
13040: LD_INT 97
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 28
13054: PUSH
13055: LD_INT 106
13057: PUSH
13058: LD_INT 92
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 32
13072: PUSH
13073: LD_INT 88
13075: PUSH
13076: LD_INT 89
13078: PUSH
13079: LD_INT 2
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 32
13090: PUSH
13091: LD_INT 86
13093: PUSH
13094: LD_INT 90
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 32
13108: PUSH
13109: LD_INT 85
13111: PUSH
13112: LD_INT 99
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 32
13126: PUSH
13127: LD_INT 85
13129: PUSH
13130: LD_INT 107
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 105
13147: PUSH
13148: LD_INT 99
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 102
13165: PUSH
13166: LD_INT 92
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 105
13183: PUSH
13184: LD_INT 92
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 92
13201: PUSH
13202: LD_INT 110
13204: PUSH
13205: LD_INT 0
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 6
13216: PUSH
13217: LD_INT 103
13219: PUSH
13220: LD_INT 103
13222: PUSH
13223: LD_INT 5
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 21
13234: PUSH
13235: LD_INT 89
13237: PUSH
13238: LD_INT 101
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 95
13255: PUSH
13256: LD_INT 104
13258: PUSH
13259: LD_INT 4
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 92
13273: PUSH
13274: LD_INT 105
13276: PUSH
13277: LD_INT 0
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13310: LD_ADDR_VAR 0 3
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: LD_INT 25
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PUSH
13351: FOR_IN
13352: IFFALSE 13371
// AddComAgressiveMove ( i , 96 , 99 ) ;
13354: LD_VAR 0 3
13358: PPUSH
13359: LD_INT 96
13361: PPUSH
13362: LD_INT 99
13364: PPUSH
13365: CALL_OW 174
13369: GO 13351
13371: POP
13372: POP
// for i := 1 to buildingsTab do
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: DOUBLE
13379: LD_INT 1
13381: DEC
13382: ST_TO_ADDR
13383: LD_VAR 0 5
13387: PUSH
13388: FOR_TO
13389: IFFALSE 13462
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13391: LD_VAR 0 4
13395: PPUSH
13396: LD_VAR 0 5
13400: PUSH
13401: LD_VAR 0 3
13405: ARRAY
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_VAR 0 5
13415: PUSH
13416: LD_VAR 0 3
13420: ARRAY
13421: PUSH
13422: LD_INT 2
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 5
13430: PUSH
13431: LD_VAR 0 3
13435: ARRAY
13436: PUSH
13437: LD_INT 3
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 5
13445: PUSH
13446: LD_VAR 0 3
13450: ARRAY
13451: PUSH
13452: LD_INT 4
13454: ARRAY
13455: PPUSH
13456: CALL_OW 205
13460: GO 13388
13462: POP
13463: POP
// end ; if position = 3 then
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 3
13471: EQUAL
13472: IFFALSE 14258
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13474: LD_ADDR_VAR 0 4
13478: PUSH
13479: LD_INT 22
13481: PUSH
13482: LD_INT 3
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13508: LD_ADDR_VAR 0 5
13512: PUSH
13513: LD_INT 0
13515: PUSH
13516: LD_INT 151
13518: PUSH
13519: LD_INT 71
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 4
13533: PUSH
13534: LD_INT 145
13536: PUSH
13537: LD_INT 53
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: LD_INT 172
13554: PUSH
13555: LD_INT 102
13557: PUSH
13558: LD_INT 5
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 29
13569: PUSH
13570: LD_INT 152
13572: PUSH
13573: LD_INT 85
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 30
13587: PUSH
13588: LD_INT 156
13590: PUSH
13591: LD_INT 92
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 28
13605: PUSH
13606: LD_INT 151
13608: PUSH
13609: LD_INT 66
13611: PUSH
13612: LD_INT 4
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: LD_INT 163
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: LD_INT 5
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 28
13641: PUSH
13642: LD_INT 149
13644: PUSH
13645: LD_INT 63
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 17
13659: PUSH
13660: LD_INT 167
13662: PUSH
13663: LD_INT 99
13665: PUSH
13666: LD_INT 5
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 18
13677: PUSH
13678: LD_INT 163
13680: PUSH
13681: LD_INT 98
13683: PUSH
13684: LD_INT 0
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 28
13695: PUSH
13696: LD_INT 154
13698: PUSH
13699: LD_INT 70
13701: PUSH
13702: LD_INT 4
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 32
13713: PUSH
13714: LD_INT 155
13716: PUSH
13717: LD_INT 62
13719: PUSH
13720: LD_INT 4
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 32
13731: PUSH
13732: LD_INT 161
13734: PUSH
13735: LD_INT 69
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 32
13749: PUSH
13750: LD_INT 168
13752: PUSH
13753: LD_INT 78
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 32
13767: PUSH
13768: LD_INT 163
13770: PUSH
13771: LD_INT 80
13773: PUSH
13774: LD_INT 5
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 136
13788: PUSH
13789: LD_INT 73
13791: PUSH
13792: LD_INT 0
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 157
13806: PUSH
13807: LD_INT 98
13809: PUSH
13810: LD_INT 0
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 32
13821: PUSH
13822: LD_INT 150
13824: PUSH
13825: LD_INT 87
13827: PUSH
13828: LD_INT 1
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 33
13839: PUSH
13840: LD_INT 171
13842: PUSH
13843: LD_INT 97
13845: PUSH
13846: LD_INT 4
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 33
13857: PUSH
13858: LD_INT 168
13860: PUSH
13861: LD_INT 92
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 33
13875: PUSH
13876: LD_INT 166
13878: PUSH
13879: LD_INT 80
13881: PUSH
13882: LD_INT 5
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 33
13893: PUSH
13894: LD_INT 141
13896: PUSH
13897: LD_INT 54
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 33
13911: PUSH
13912: LD_INT 133
13914: PUSH
13915: LD_INT 57
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 33
13929: PUSH
13930: LD_INT 132
13932: PUSH
13933: LD_INT 61
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 33
13947: PUSH
13948: LD_INT 150
13950: PUSH
13951: LD_INT 82
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 33
13965: PUSH
13966: LD_INT 132
13968: PUSH
13969: LD_INT 72
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 6
13983: PUSH
13984: LD_INT 146
13986: PUSH
13987: LD_INT 64
13989: PUSH
13990: LD_INT 4
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 6
14001: PUSH
14002: LD_INT 159
14004: PUSH
14005: LD_INT 85
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 163
14022: PUSH
14023: LD_INT 91
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 16
14037: PUSH
14038: LD_INT 166
14040: PUSH
14041: LD_INT 95
14043: PUSH
14044: LD_INT 4
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 24
14055: PUSH
14056: LD_INT 159
14058: PUSH
14059: LD_INT 95
14061: PUSH
14062: LD_INT 1
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14165
// AddComAgressiveMove ( i , 141 , 65 ) ;
14148: LD_VAR 0 3
14152: PPUSH
14153: LD_INT 141
14155: PPUSH
14156: LD_INT 65
14158: PPUSH
14159: CALL_OW 174
14163: GO 14145
14165: POP
14166: POP
// for i := 1 to buildingsTab do
14167: LD_ADDR_VAR 0 3
14171: PUSH
14172: DOUBLE
14173: LD_INT 1
14175: DEC
14176: ST_TO_ADDR
14177: LD_VAR 0 5
14181: PUSH
14182: FOR_TO
14183: IFFALSE 14256
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14185: LD_VAR 0 4
14189: PPUSH
14190: LD_VAR 0 5
14194: PUSH
14195: LD_VAR 0 3
14199: ARRAY
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PPUSH
14205: LD_VAR 0 5
14209: PUSH
14210: LD_VAR 0 3
14214: ARRAY
14215: PUSH
14216: LD_INT 2
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 5
14224: PUSH
14225: LD_VAR 0 3
14229: ARRAY
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 5
14239: PUSH
14240: LD_VAR 0 3
14244: ARRAY
14245: PUSH
14246: LD_INT 4
14248: ARRAY
14249: PPUSH
14250: CALL_OW 205
14254: GO 14182
14256: POP
14257: POP
// end ; end ;
14258: LD_VAR 0 2
14262: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14263: LD_INT 0
14265: PPUSH
14266: PPUSH
14267: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14268: LD_ADDR_EXP 68
14272: PUSH
14273: LD_INT 0
14275: PUSH
14276: LD_INT 71
14278: PUSH
14279: LD_INT 15
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 6
14293: PUSH
14294: LD_INT 77
14296: PUSH
14297: LD_INT 18
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 4
14311: PUSH
14312: LD_INT 77
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: LD_INT 0
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 31
14329: PUSH
14330: LD_INT 72
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 31
14347: PUSH
14348: LD_INT 82
14350: PUSH
14351: LD_INT 28
14353: PUSH
14354: LD_INT 0
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 31
14365: PUSH
14366: LD_INT 84
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 31
14383: PUSH
14384: LD_INT 66
14386: PUSH
14387: LD_INT 14
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 27
14401: PUSH
14402: LD_INT 67
14404: PUSH
14405: LD_INT 18
14407: PUSH
14408: LD_INT 5
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 27
14419: PUSH
14420: LD_INT 69
14422: PUSH
14423: LD_INT 23
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 25
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_EXP 68
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: LD_EXP 68
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PUSH
14507: LD_INT 2
14509: ARRAY
14510: PPUSH
14511: LD_EXP 68
14515: PUSH
14516: LD_INT 1
14518: ARRAY
14519: PUSH
14520: LD_INT 3
14522: ARRAY
14523: PPUSH
14524: LD_EXP 68
14528: PUSH
14529: LD_INT 1
14531: ARRAY
14532: PUSH
14533: LD_INT 4
14535: ARRAY
14536: PPUSH
14537: CALL_OW 205
// end ;
14541: LD_VAR 0 1
14545: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14554: LD_ADDR_VAR 0 7
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_VAR 0 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 25
14573: PUSH
14574: LD_INT 9
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 69
14589: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14590: LD_ADDR_VAR 0 8
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_VAR 0 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: LD_INT 21
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14633: LD_ADDR_VAR 0 5
14637: PUSH
14638: LD_INT 1
14640: PPUSH
14641: LD_INT 3
14643: PPUSH
14644: CALL_OW 12
14648: ST_TO_ADDR
// for i = 1 to list do
14649: LD_ADDR_VAR 0 6
14653: PUSH
14654: DOUBLE
14655: LD_INT 1
14657: DEC
14658: ST_TO_ADDR
14659: LD_VAR 0 7
14663: PUSH
14664: FOR_TO
14665: IFFALSE 15655
// for ta in filter do
14667: LD_ADDR_VAR 0 4
14671: PUSH
14672: LD_VAR 0 8
14676: PUSH
14677: FOR_IN
14678: IFFALSE 15651
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14680: LD_VAR 0 7
14684: PUSH
14685: LD_VAR 0 6
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 4
14695: PPUSH
14696: CALL_OW 296
14700: PUSH
14701: LD_INT 15
14703: LESSEQUAL
14704: IFFALSE 15649
// begin case c of 1 :
14706: LD_VAR 0 5
14710: PUSH
14711: LD_INT 1
14713: DOUBLE
14714: EQUAL
14715: IFTRUE 14719
14717: GO 15151
14719: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14720: LD_VAR 0 7
14724: PUSH
14725: LD_VAR 0 6
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: CALL_OW 250
14740: PPUSH
14741: LD_VAR 0 4
14745: PPUSH
14746: CALL_OW 251
14750: PPUSH
14751: CALL_OW 154
// if eventVar2 = 0 then
14755: LD_EXP 66
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: IFFALSE 15149
// begin eventVar2 = 1 ;
14765: LD_ADDR_EXP 66
14769: PUSH
14770: LD_INT 1
14772: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14773: LD_INT 245
14775: PPUSH
14776: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14780: LD_VAR 0 4
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 84
// DialogueOn ;
14804: CALL_OW 6
// if IsOK ( Cyrus ) then
14808: LD_EXP 5
14812: PPUSH
14813: CALL_OW 302
14817: IFFALSE 14833
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14819: LD_EXP 5
14823: PPUSH
14824: LD_STRING D9a-Cyrus-1
14826: PPUSH
14827: CALL_OW 88
// end else
14831: GO 14955
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14833: LD_INT 22
14835: PUSH
14836: LD_INT 1
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 26
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 2
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 25
14888: PUSH
14889: LD_INT 4
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 25
14898: PUSH
14899: LD_INT 5
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: PUSH
14924: LD_EXP 1
14928: PUSH
14929: LD_EXP 14
14933: PUSH
14934: LD_EXP 5
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: DIFF
14944: PPUSH
14945: LD_STRING D9a-Sol1-1
14947: PPUSH
14948: LD_STRING D9a-Sol1-1
14950: PPUSH
14951: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14955: LD_INT 22
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 26
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 25
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 25
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 25
15020: PUSH
15021: LD_INT 5
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 69
15045: PUSH
15046: LD_EXP 1
15050: PUSH
15051: LD_EXP 14
15055: PUSH
15056: LD_EXP 5
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: DIFF
15066: PPUSH
15067: LD_STRING D9b-Sol1-1
15069: PPUSH
15070: LD_STRING D9b-Sol1-1
15072: PPUSH
15073: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15077: LD_STRING 09_arInfo
15079: PPUSH
15080: LD_INT 0
15082: PPUSH
15083: CALL_OW 30
15087: PUSH
15088: LD_INT 1
15090: EQUAL
15091: IFFALSE 15105
// Say ( JMM , D9a-JMM-1 ) ;
15093: LD_EXP 1
15097: PPUSH
15098: LD_STRING D9a-JMM-1
15100: PPUSH
15101: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15105: LD_EXP 1
15109: PPUSH
15110: LD_STRING D9c-JMM-1
15112: PPUSH
15113: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15117: LD_INT 12
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: CALL_OW 321
15127: PUSH
15128: LD_INT 2
15130: EQUAL
15131: IFFALSE 15145
// Say ( JMM , D9c-JMM-1a ) ;
15133: LD_EXP 1
15137: PPUSH
15138: LD_STRING D9c-JMM-1a
15140: PPUSH
15141: CALL_OW 88
// DialogueOff ;
15145: CALL_OW 7
// end ; end ; 2 :
15149: GO 15649
15151: LD_INT 2
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15617
15159: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15160: LD_VAR 0 7
15164: PUSH
15165: LD_VAR 0 6
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 4
15175: PPUSH
15176: CALL_OW 250
15180: PUSH
15181: LD_INT 1
15183: NEG
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: CALL_OW 12
15192: PLUS
15193: PPUSH
15194: LD_VAR 0 4
15198: PPUSH
15199: CALL_OW 251
15203: PUSH
15204: LD_INT 1
15206: NEG
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 12
15215: PLUS
15216: PPUSH
15217: CALL_OW 153
// if eventVar2 = 0 then
15221: LD_EXP 66
15225: PUSH
15226: LD_INT 0
15228: EQUAL
15229: IFFALSE 15615
// begin eventVar2 = 1 ;
15231: LD_ADDR_EXP 66
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15239: LD_INT 245
15241: PPUSH
15242: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15246: LD_VAR 0 4
15250: PPUSH
15251: CALL_OW 250
15255: PPUSH
15256: LD_VAR 0 4
15260: PPUSH
15261: CALL_OW 251
15265: PPUSH
15266: CALL_OW 84
// DialogueOn ;
15270: CALL_OW 6
// if IsOK ( Cyrus ) then
15274: LD_EXP 5
15278: PPUSH
15279: CALL_OW 302
15283: IFFALSE 15299
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15285: LD_EXP 5
15289: PPUSH
15290: LD_STRING D9a-Cyrus-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15421
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15299: LD_INT 22
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 25
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 5
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: PUSH
15390: LD_EXP 1
15394: PUSH
15395: LD_EXP 14
15399: PUSH
15400: LD_EXP 5
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: DIFF
15410: PPUSH
15411: LD_STRING D9a-Sol1-1
15413: PPUSH
15414: LD_STRING D9a-Sol1-1
15416: PPUSH
15417: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15421: LD_INT 22
15423: PUSH
15424: LD_INT 1
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 26
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 25
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PPUSH
15507: CALL_OW 69
15511: PUSH
15512: LD_EXP 1
15516: PUSH
15517: LD_EXP 14
15521: PUSH
15522: LD_EXP 5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: DIFF
15532: PPUSH
15533: LD_STRING D9b-Sol1-1
15535: PPUSH
15536: LD_STRING D9b-Sol1-1
15538: PPUSH
15539: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15543: LD_STRING 09_arInfo
15545: PPUSH
15546: LD_INT 0
15548: PPUSH
15549: CALL_OW 30
15553: PUSH
15554: LD_INT 1
15556: EQUAL
15557: IFFALSE 15571
// Say ( JMM , D9a-JMM-1 ) ;
15559: LD_EXP 1
15563: PPUSH
15564: LD_STRING D9a-JMM-1
15566: PPUSH
15567: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15571: LD_EXP 1
15575: PPUSH
15576: LD_STRING D9c-JMM-1
15578: PPUSH
15579: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15583: LD_INT 12
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 321
15593: PUSH
15594: LD_INT 2
15596: EQUAL
15597: IFFALSE 15611
// Say ( JMM , D9c-JMM-1a ) ;
15599: LD_EXP 1
15603: PPUSH
15604: LD_STRING D9c-JMM-1a
15606: PPUSH
15607: CALL_OW 88
// DialogueOff ;
15611: CALL_OW 7
// end ; end ; 3 :
15615: GO 15649
15617: LD_INT 3
15619: DOUBLE
15620: EQUAL
15621: IFTRUE 15625
15623: GO 15648
15625: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15626: LD_VAR 0 7
15630: PUSH
15631: LD_VAR 0 6
15635: ARRAY
15636: PPUSH
15637: LD_VAR 0 4
15641: PPUSH
15642: CALL_OW 115
15646: GO 15649
15648: POP
// end ; end ;
15649: GO 14677
15651: POP
15652: POP
15653: GO 14664
15655: POP
15656: POP
// end ;
15657: LD_VAR 0 3
15661: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
// for i = 1 to 72 do
15668: LD_ADDR_VAR 0 5
15672: PUSH
15673: DOUBLE
15674: LD_INT 1
15676: DEC
15677: ST_TO_ADDR
15678: LD_INT 72
15680: PUSH
15681: FOR_TO
15682: IFFALSE 15740
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15684: LD_VAR 0 5
15688: PPUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL_OW 321
15698: PUSH
15699: LD_INT 1
15701: EQUAL
15702: PUSH
15703: LD_VAR 0 5
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: CALL_OW 482
15717: PUSH
15718: LD_INT 1
15720: EQUAL
15721: AND
15722: IFFALSE 15738
// AddComResearch ( lab , i ) ;
15724: LD_VAR 0 2
15728: PPUSH
15729: LD_VAR 0 5
15733: PPUSH
15734: CALL_OW 184
15738: GO 15681
15740: POP
15741: POP
// end ;
15742: LD_VAR 0 4
15746: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15757: LD_ADDR_VAR 0 6
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_VAR 0 1
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 56
15776: PUSH
15777: EMPTY
15778: LIST
15779: PUSH
15780: LD_INT 24
15782: PUSH
15783: LD_INT 700
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 3
15792: PUSH
15793: LD_INT 60
15795: PUSH
15796: EMPTY
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 25
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 25
15818: PUSH
15819: LD_INT 9
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: PPUSH
15838: CALL_OW 69
15842: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15843: LD_ADDR_VAR 0 7
15847: PUSH
15848: LD_INT 22
15850: PUSH
15851: LD_VAR 0 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 30
15862: PUSH
15863: LD_INT 32
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 58
15872: PUSH
15873: EMPTY
15874: LIST
15875: PUSH
15876: LD_INT 24
15878: PUSH
15879: LD_INT 251
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 69
15896: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15897: LD_ADDR_VAR 0 9
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_VAR 0 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 30
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: LD_INT 5
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 24
15944: PUSH
15945: LD_INT 251
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 69
15961: ST_TO_ADDR
// if barrackList > 0 then
15962: LD_VAR 0 9
15966: PUSH
15967: LD_INT 0
15969: GREATER
15970: IFFALSE 16105
// begin if turretList = 0 then
15972: LD_VAR 0 7
15976: PUSH
15977: LD_INT 0
15979: EQUAL
15980: IFFALSE 16029
// begin for i in soldiers_list do
15982: LD_ADDR_VAR 0 4
15986: PUSH
15987: LD_VAR 0 6
15991: PUSH
15992: FOR_IN
15993: IFFALSE 16025
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_VAR 0 9
16004: PUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_VAR 0 9
16012: PPUSH
16013: CALL_OW 12
16017: ARRAY
16018: PPUSH
16019: CALL_OW 120
16023: GO 15992
16025: POP
16026: POP
// end else
16027: GO 16105
// begin for i in barrackList do
16029: LD_ADDR_VAR 0 4
16033: PUSH
16034: LD_VAR 0 9
16038: PUSH
16039: FOR_IN
16040: IFFALSE 16103
// begin insideUnits = UnitsInside ( i ) ;
16042: LD_ADDR_VAR 0 10
16046: PUSH
16047: LD_VAR 0 4
16051: PPUSH
16052: CALL_OW 313
16056: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16057: LD_VAR 0 10
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: LD_VAR 0 7
16070: PUSH
16071: LD_INT 1
16073: ARRAY
16074: PPUSH
16075: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16079: LD_VAR 0 6
16083: PUSH
16084: LD_INT 1
16086: ARRAY
16087: PPUSH
16088: LD_VAR 0 7
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: CALL_OW 120
// end ;
16101: GO 16039
16103: POP
16104: POP
// end ; end ; end ;
16105: LD_VAR 0 3
16109: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16118: LD_ADDR_VAR 0 6
16122: PUSH
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 313
16132: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16133: LD_ADDR_VAR 0 7
16137: PUSH
16138: LD_INT 22
16140: PUSH
16141: LD_VAR 0 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 25
16152: PUSH
16153: LD_INT 2
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 24
16162: PUSH
16163: LD_INT 1000
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: LD_INT 54
16175: PUSH
16176: EMPTY
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_VAR 0 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 21
16213: PUSH
16214: LD_INT 3
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 3
16223: PUSH
16224: LD_INT 24
16226: PUSH
16227: LD_INT 1000
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: PPUSH
16246: CALL_OW 69
16250: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16251: LD_VAR 0 4
16255: NOT
16256: PUSH
16257: LD_VAR 0 7
16261: NOT
16262: AND
16263: PUSH
16264: LD_EXP 42
16268: NOT
16269: AND
16270: IFFALSE 16274
// exit ;
16272: GO 16465
// if buildings_list > 0 and engineerOkInside then
16274: LD_VAR 0 4
16278: PUSH
16279: LD_INT 0
16281: GREATER
16282: PUSH
16283: LD_VAR 0 6
16287: AND
16288: IFFALSE 16342
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16290: LD_ADDR_VAR 0 5
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_VAR 0 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 25
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: PUSH
16326: FOR_IN
16327: IFFALSE 16340
// ComExitBuilding ( i ) ;
16329: LD_VAR 0 5
16333: PPUSH
16334: CALL_OW 122
16338: GO 16326
16340: POP
16341: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16342: LD_VAR 0 4
16346: PUSH
16347: LD_INT 0
16349: GREATER
16350: PUSH
16351: LD_VAR 0 7
16355: PUSH
16356: LD_INT 0
16358: GREATER
16359: AND
16360: IFFALSE 16414
// begin for i in engineerOkOutside do
16362: LD_ADDR_VAR 0 5
16366: PUSH
16367: LD_VAR 0 7
16371: PUSH
16372: FOR_IN
16373: IFFALSE 16412
// for j in buildings_list do
16375: LD_ADDR_VAR 0 8
16379: PUSH
16380: LD_VAR 0 4
16384: PUSH
16385: FOR_IN
16386: IFFALSE 16408
// ComRepairBuilding ( i , j [ 1 ] ) ;
16388: LD_VAR 0 5
16392: PPUSH
16393: LD_VAR 0 8
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: CALL_OW 130
16406: GO 16385
16408: POP
16409: POP
16410: GO 16372
16412: POP
16413: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16414: LD_VAR 0 4
16418: PUSH
16419: LD_INT 0
16421: EQUAL
16422: PUSH
16423: LD_VAR 0 7
16427: PUSH
16428: LD_INT 0
16430: GREATER
16431: AND
16432: IFFALSE 16465
// for i in engineerOkOutside do
16434: LD_ADDR_VAR 0 5
16438: PUSH
16439: LD_VAR 0 7
16443: PUSH
16444: FOR_IN
16445: IFFALSE 16463
// ComEnterUnit ( i , building ) ;
16447: LD_VAR 0 5
16451: PPUSH
16452: LD_VAR 0 2
16456: PPUSH
16457: CALL_OW 120
16461: GO 16444
16463: POP
16464: POP
// end ;
16465: LD_VAR 0 3
16469: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16470: LD_INT 0
16472: PPUSH
16473: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16474: LD_INT 22
16476: PUSH
16477: LD_VAR 0 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: LD_INT 0
16507: GREATER
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_VAR 0 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 3
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 3
16533: PUSH
16534: LD_INT 24
16536: PUSH
16537: LD_INT 1000
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PPUSH
16553: CALL_OW 69
16557: PUSH
16558: LD_INT 0
16560: EQUAL
16561: AND
16562: PUSH
16563: LD_VAR 0 2
16567: PUSH
16568: LD_INT 0
16570: GREATER
16571: AND
16572: IFFALSE 16671
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16574: LD_ADDR_VAR 0 4
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_VAR 0 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 25
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16669
// begin AddComExitBuilding ( i ) ;
16613: LD_VAR 0 4
16617: PPUSH
16618: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16622: LD_VAR 0 4
16626: PPUSH
16627: LD_VAR 0 2
16631: PUSH
16632: LD_INT 1
16634: ARRAY
16635: PPUSH
16636: LD_VAR 0 2
16640: PUSH
16641: LD_INT 2
16643: ARRAY
16644: PPUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 3
16652: ARRAY
16653: PPUSH
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 4
16661: ARRAY
16662: PPUSH
16663: CALL_OW 205
// end ;
16667: GO 16610
16669: POP
16670: POP
// end ; end ;
16671: LD_VAR 0 3
16675: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16676: LD_INT 0
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
16683: PPUSH
16684: PPUSH
16685: PPUSH
16686: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_INT 22
16694: PUSH
16695: LD_VAR 0 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 25
16706: PUSH
16707: LD_INT 4
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 24
16716: PUSH
16717: LD_INT 251
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16734: LD_ADDR_VAR 0 7
16738: PUSH
16739: LD_VAR 0 3
16743: PPUSH
16744: LD_INT 22
16746: PUSH
16747: LD_VAR 0 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 25
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 50
16768: PUSH
16769: EMPTY
16770: LIST
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 70
16781: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16782: LD_ADDR_VAR 0 10
16786: PUSH
16787: LD_VAR 0 3
16791: PPUSH
16792: LD_INT 22
16794: PUSH
16795: LD_VAR 0 1
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 21
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 25
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 24
16836: PUSH
16837: LD_INT 750
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 70
16858: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16859: LD_ADDR_VAR 0 11
16863: PUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: LD_INT 22
16871: PUSH
16872: LD_VAR 0 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 25
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: LD_INT 24
16913: PUSH
16914: LD_INT 1000
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 70
16935: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16936: LD_VAR 0 10
16940: NOT
16941: PUSH
16942: LD_VAR 0 7
16946: NOT
16947: AND
16948: PUSH
16949: LD_VAR 0 11
16953: NOT
16954: AND
16955: IFFALSE 16959
// exit ;
16957: GO 17219
// if damageUnits > 0 and sci_list > 0 then
16959: LD_VAR 0 10
16963: PUSH
16964: LD_INT 0
16966: GREATER
16967: PUSH
16968: LD_VAR 0 6
16972: PUSH
16973: LD_INT 0
16975: GREATER
16976: AND
16977: IFFALSE 17010
// for i in damageUnits do
16979: LD_ADDR_VAR 0 8
16983: PUSH
16984: LD_VAR 0 10
16988: PUSH
16989: FOR_IN
16990: IFFALSE 17008
// ComMoveToArea ( i , healArea ) ;
16992: LD_VAR 0 8
16996: PPUSH
16997: LD_VAR 0 2
17001: PPUSH
17002: CALL_OW 113
17006: GO 16989
17008: POP
17009: POP
// if unitsToHeal > 0 and sci_list > 0 then
17010: LD_VAR 0 11
17014: PUSH
17015: LD_INT 0
17017: GREATER
17018: PUSH
17019: LD_VAR 0 6
17023: PUSH
17024: LD_INT 0
17026: GREATER
17027: AND
17028: IFFALSE 17087
// begin for i in sci_list do
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 6
17039: PUSH
17040: FOR_IN
17041: IFFALSE 17085
// begin ComExitBuilding ( i ) ;
17043: LD_VAR 0 8
17047: PPUSH
17048: CALL_OW 122
// for j in unitsToHeal do
17052: LD_ADDR_VAR 0 9
17056: PUSH
17057: LD_VAR 0 11
17061: PUSH
17062: FOR_IN
17063: IFFALSE 17081
// AddComHeal ( i , j ) ;
17065: LD_VAR 0 8
17069: PPUSH
17070: LD_VAR 0 9
17074: PPUSH
17075: CALL_OW 188
17079: GO 17062
17081: POP
17082: POP
// end ;
17083: GO 17040
17085: POP
17086: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17087: LD_VAR 0 10
17091: PUSH
17092: LD_INT 0
17094: EQUAL
17095: PUSH
17096: LD_VAR 0 11
17100: PUSH
17101: LD_INT 0
17103: EQUAL
17104: AND
17105: PUSH
17106: LD_VAR 0 7
17110: PUSH
17111: LD_INT 0
17113: GREATER
17114: AND
17115: IFFALSE 17219
// for i in sci_listOutside do
17117: LD_ADDR_VAR 0 8
17121: PUSH
17122: LD_VAR 0 7
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17217
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17130: LD_ADDR_VAR 0 12
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_VAR 0 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 21
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: LD_INT 8
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17177: LD_ADDR_VAR 0 13
17181: PUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_VAR 0 12
17189: PPUSH
17190: CALL_OW 12
17194: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17195: LD_VAR 0 8
17199: PPUSH
17200: LD_VAR 0 12
17204: PUSH
17205: LD_VAR 0 13
17209: ARRAY
17210: PPUSH
17211: CALL_OW 120
// end ;
17215: GO 17127
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 5
17223: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
// amChassisTab = [ ] ;
17237: LD_ADDR_VAR 0 19
17241: PUSH
17242: EMPTY
17243: ST_TO_ADDR
// arChassisTab = [ ] ;
17244: LD_ADDR_VAR 0 18
17248: PUSH
17249: EMPTY
17250: ST_TO_ADDR
// ruChassisTab = [ ] ;
17251: LD_ADDR_VAR 0 17
17255: PUSH
17256: EMPTY
17257: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17258: LD_INT 35
17260: PPUSH
17261: CALL_OW 67
// if nation = 1 then
17265: LD_VAR 0 5
17269: PUSH
17270: LD_INT 1
17272: EQUAL
17273: IFFALSE 17778
// begin uc_side = side ;
17275: LD_ADDR_OWVAR 20
17279: PUSH
17280: LD_VAR 0 2
17284: ST_TO_ADDR
// uc_nation = nation ;
17285: LD_ADDR_OWVAR 21
17289: PUSH
17290: LD_VAR 0 5
17294: ST_TO_ADDR
// vc_engine = vehengine ;
17295: LD_ADDR_OWVAR 39
17299: PUSH
17300: LD_VAR 0 6
17304: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17305: LD_ADDR_OWVAR 38
17309: PUSH
17310: LD_VAR 0 7
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 7
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17329: LD_ADDR_OWVAR 40
17333: PUSH
17334: LD_VAR 0 10
17338: PUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_VAR 0 10
17346: PPUSH
17347: CALL_OW 12
17351: ARRAY
17352: ST_TO_ADDR
// for j = 1 to AMWeapon do
17353: LD_ADDR_VAR 0 14
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_VAR 0 10
17367: PUSH
17368: FOR_TO
17369: IFFALSE 17670
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17371: LD_VAR 0 10
17375: PUSH
17376: LD_VAR 0 14
17380: ARRAY
17381: PUSH
17382: LD_INT 2
17384: EQUAL
17385: PUSH
17386: LD_VAR 0 10
17390: PUSH
17391: LD_VAR 0 14
17395: ARRAY
17396: PUSH
17397: LD_INT 3
17399: EQUAL
17400: OR
17401: IFFALSE 17454
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17403: LD_ADDR_VAR 0 19
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 3
17416: PUSH
17417: LD_INT 4
17419: PUSH
17420: LD_INT 5
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17430: LD_ADDR_OWVAR 37
17434: PUSH
17435: LD_VAR 0 19
17439: PUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_VAR 0 19
17447: PPUSH
17448: CALL_OW 12
17452: ARRAY
17453: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17454: LD_VAR 0 10
17458: PUSH
17459: LD_VAR 0 14
17463: ARRAY
17464: PUSH
17465: LD_INT 4
17467: EQUAL
17468: PUSH
17469: LD_VAR 0 10
17473: PUSH
17474: LD_VAR 0 14
17478: ARRAY
17479: PUSH
17480: LD_INT 5
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 10
17489: PUSH
17490: LD_VAR 0 14
17494: ARRAY
17495: PUSH
17496: LD_INT 9
17498: EQUAL
17499: OR
17500: PUSH
17501: LD_VAR 0 10
17505: PUSH
17506: LD_VAR 0 14
17510: ARRAY
17511: PUSH
17512: LD_INT 11
17514: EQUAL
17515: OR
17516: PUSH
17517: LD_VAR 0 10
17521: PUSH
17522: LD_VAR 0 14
17526: ARRAY
17527: PUSH
17528: LD_INT 7
17530: EQUAL
17531: OR
17532: IFFALSE 17581
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17534: LD_ADDR_VAR 0 19
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 4
17547: PUSH
17548: LD_INT 5
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17557: LD_ADDR_OWVAR 37
17561: PUSH
17562: LD_VAR 0 19
17566: PUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_VAR 0 19
17574: PPUSH
17575: CALL_OW 12
17579: ARRAY
17580: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17581: LD_VAR 0 10
17585: PUSH
17586: LD_VAR 0 14
17590: ARRAY
17591: PUSH
17592: LD_INT 8
17594: EQUAL
17595: PUSH
17596: LD_VAR 0 10
17600: PUSH
17601: LD_VAR 0 14
17605: ARRAY
17606: PUSH
17607: LD_INT 6
17609: EQUAL
17610: OR
17611: PUSH
17612: LD_VAR 0 10
17616: PUSH
17617: LD_VAR 0 14
17621: ARRAY
17622: PUSH
17623: LD_INT 10
17625: EQUAL
17626: OR
17627: IFFALSE 17668
// begin amChassisTab = [ 4 , 5 ] ;
17629: LD_ADDR_VAR 0 19
17633: PUSH
17634: LD_INT 4
17636: PUSH
17637: LD_INT 5
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17644: LD_ADDR_OWVAR 37
17648: PUSH
17649: LD_VAR 0 19
17653: PUSH
17654: LD_INT 1
17656: PPUSH
17657: LD_VAR 0 19
17661: PPUSH
17662: CALL_OW 12
17666: ARRAY
17667: ST_TO_ADDR
// end ; end ;
17668: GO 17368
17670: POP
17671: POP
// veh = CreateVehicle ;
17672: LD_ADDR_VAR 0 16
17676: PUSH
17677: CALL_OW 45
17681: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17682: LD_VAR 0 16
17686: PPUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: LD_INT 0
17694: PPUSH
17695: CALL_OW 49
// if vc_control = 1 then
17699: LD_OWVAR 38
17703: PUSH
17704: LD_INT 1
17706: EQUAL
17707: IFFALSE 17764
// begin hc_gallery =  ;
17709: LD_ADDR_OWVAR 33
17713: PUSH
17714: LD_STRING 
17716: ST_TO_ADDR
// hc_name =  ;
17717: LD_ADDR_OWVAR 26
17721: PUSH
17722: LD_STRING 
17724: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17725: LD_INT 0
17727: PPUSH
17728: LD_INT 3
17730: PPUSH
17731: LD_VAR 0 4
17735: PPUSH
17736: CALL_OW 380
// un = CreateHuman ;
17740: LD_ADDR_VAR 0 15
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17750: LD_VAR 0 15
17754: PPUSH
17755: LD_VAR 0 16
17759: PPUSH
17760: CALL_OW 52
// end ; i = i + 1 ;
17764: LD_ADDR_VAR 0 13
17768: PUSH
17769: LD_VAR 0 13
17773: PUSH
17774: LD_INT 1
17776: PLUS
17777: ST_TO_ADDR
// end ; if nation = 2 then
17778: LD_VAR 0 5
17782: PUSH
17783: LD_INT 2
17785: EQUAL
17786: IFFALSE 18208
// begin uc_side = side ;
17788: LD_ADDR_OWVAR 20
17792: PUSH
17793: LD_VAR 0 2
17797: ST_TO_ADDR
// uc_nation = nation ;
17798: LD_ADDR_OWVAR 21
17802: PUSH
17803: LD_VAR 0 5
17807: ST_TO_ADDR
// vc_engine = vehengine ;
17808: LD_ADDR_OWVAR 39
17812: PUSH
17813: LD_VAR 0 6
17817: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17818: LD_ADDR_OWVAR 38
17822: PUSH
17823: LD_VAR 0 7
17827: PUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_VAR 0 7
17835: PPUSH
17836: CALL_OW 12
17840: ARRAY
17841: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17842: LD_ADDR_OWVAR 40
17846: PUSH
17847: LD_VAR 0 9
17851: PUSH
17852: LD_INT 1
17854: PPUSH
17855: LD_VAR 0 9
17859: PPUSH
17860: CALL_OW 12
17864: ARRAY
17865: ST_TO_ADDR
// for j = 1 to ARWeapons do
17866: LD_ADDR_VAR 0 14
17870: PUSH
17871: DOUBLE
17872: LD_INT 1
17874: DEC
17875: ST_TO_ADDR
17876: LD_VAR 0 9
17880: PUSH
17881: FOR_TO
17882: IFFALSE 18100
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17884: LD_VAR 0 9
17888: PUSH
17889: LD_VAR 0 14
17893: ARRAY
17894: PUSH
17895: LD_INT 24
17897: EQUAL
17898: PUSH
17899: LD_VAR 0 9
17903: PUSH
17904: LD_VAR 0 14
17908: ARRAY
17909: PUSH
17910: LD_INT 22
17912: EQUAL
17913: OR
17914: PUSH
17915: LD_VAR 0 9
17919: PUSH
17920: LD_VAR 0 14
17924: ARRAY
17925: PUSH
17926: LD_INT 23
17928: EQUAL
17929: OR
17930: PUSH
17931: LD_VAR 0 9
17935: PUSH
17936: LD_VAR 0 14
17940: ARRAY
17941: PUSH
17942: LD_INT 30
17944: EQUAL
17945: OR
17946: IFFALSE 17983
// begin arChassisTab = [ 14 ] ;
17948: LD_ADDR_VAR 0 18
17952: PUSH
17953: LD_INT 14
17955: PUSH
17956: EMPTY
17957: LIST
17958: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17959: LD_ADDR_OWVAR 37
17963: PUSH
17964: LD_VAR 0 18
17968: PUSH
17969: LD_INT 1
17971: PPUSH
17972: LD_VAR 0 18
17976: PPUSH
17977: CALL_OW 12
17981: ARRAY
17982: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17983: LD_VAR 0 9
17987: PUSH
17988: LD_VAR 0 14
17992: ARRAY
17993: PUSH
17994: LD_INT 29
17996: EQUAL
17997: PUSH
17998: LD_VAR 0 9
18002: PUSH
18003: LD_VAR 0 14
18007: ARRAY
18008: PUSH
18009: LD_INT 28
18011: EQUAL
18012: OR
18013: PUSH
18014: LD_VAR 0 9
18018: PUSH
18019: LD_VAR 0 14
18023: ARRAY
18024: PUSH
18025: LD_INT 27
18027: EQUAL
18028: OR
18029: PUSH
18030: LD_VAR 0 9
18034: PUSH
18035: LD_VAR 0 14
18039: ARRAY
18040: PUSH
18041: LD_INT 26
18043: EQUAL
18044: OR
18045: PUSH
18046: LD_VAR 0 9
18050: PUSH
18051: LD_VAR 0 14
18055: ARRAY
18056: PUSH
18057: LD_INT 25
18059: EQUAL
18060: OR
18061: IFFALSE 18098
// begin arChassisTab = [ 14 ] ;
18063: LD_ADDR_VAR 0 18
18067: PUSH
18068: LD_INT 14
18070: PUSH
18071: EMPTY
18072: LIST
18073: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18074: LD_ADDR_OWVAR 37
18078: PUSH
18079: LD_VAR 0 18
18083: PUSH
18084: LD_INT 1
18086: PPUSH
18087: LD_VAR 0 18
18091: PPUSH
18092: CALL_OW 12
18096: ARRAY
18097: ST_TO_ADDR
// end ; end ;
18098: GO 17881
18100: POP
18101: POP
// veh = CreateVehicle ;
18102: LD_ADDR_VAR 0 16
18106: PUSH
18107: CALL_OW 45
18111: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18112: LD_VAR 0 16
18116: PPUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: LD_INT 0
18124: PPUSH
18125: CALL_OW 49
// if vc_control = 1 then
18129: LD_OWVAR 38
18133: PUSH
18134: LD_INT 1
18136: EQUAL
18137: IFFALSE 18194
// begin hc_gallery =  ;
18139: LD_ADDR_OWVAR 33
18143: PUSH
18144: LD_STRING 
18146: ST_TO_ADDR
// hc_name =  ;
18147: LD_ADDR_OWVAR 26
18151: PUSH
18152: LD_STRING 
18154: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18155: LD_INT 0
18157: PPUSH
18158: LD_INT 3
18160: PPUSH
18161: LD_VAR 0 4
18165: PPUSH
18166: CALL_OW 380
// un = CreateHuman ;
18170: LD_ADDR_VAR 0 15
18174: PUSH
18175: CALL_OW 44
18179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18180: LD_VAR 0 15
18184: PPUSH
18185: LD_VAR 0 16
18189: PPUSH
18190: CALL_OW 52
// end ; i = i + 1 ;
18194: LD_ADDR_VAR 0 13
18198: PUSH
18199: LD_VAR 0 13
18203: PUSH
18204: LD_INT 1
18206: PLUS
18207: ST_TO_ADDR
// end ; if nation = 3 then
18208: LD_VAR 0 5
18212: PUSH
18213: LD_INT 3
18215: EQUAL
18216: IFFALSE 18622
// begin uc_side = side ;
18218: LD_ADDR_OWVAR 20
18222: PUSH
18223: LD_VAR 0 2
18227: ST_TO_ADDR
// uc_nation = nation ;
18228: LD_ADDR_OWVAR 21
18232: PUSH
18233: LD_VAR 0 5
18237: ST_TO_ADDR
// vc_engine = vehengine ;
18238: LD_ADDR_OWVAR 39
18242: PUSH
18243: LD_VAR 0 6
18247: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18248: LD_ADDR_OWVAR 38
18252: PUSH
18253: LD_VAR 0 7
18257: PUSH
18258: LD_INT 1
18260: PPUSH
18261: LD_VAR 0 7
18265: PPUSH
18266: CALL_OW 12
18270: ARRAY
18271: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18272: LD_ADDR_OWVAR 40
18276: PUSH
18277: LD_VAR 0 8
18281: PUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_VAR 0 8
18289: PPUSH
18290: CALL_OW 12
18294: ARRAY
18295: ST_TO_ADDR
// for j = 1 to RuWeapons do
18296: LD_ADDR_VAR 0 14
18300: PUSH
18301: DOUBLE
18302: LD_INT 1
18304: DEC
18305: ST_TO_ADDR
18306: LD_VAR 0 8
18310: PUSH
18311: FOR_TO
18312: IFFALSE 18514
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18314: LD_VAR 0 8
18318: PUSH
18319: LD_VAR 0 14
18323: ARRAY
18324: PUSH
18325: LD_INT 42
18327: EQUAL
18328: PUSH
18329: LD_VAR 0 8
18333: PUSH
18334: LD_VAR 0 14
18338: ARRAY
18339: PUSH
18340: LD_INT 43
18342: EQUAL
18343: OR
18344: PUSH
18345: LD_VAR 0 8
18349: PUSH
18350: LD_VAR 0 14
18354: ARRAY
18355: PUSH
18356: LD_INT 44
18358: EQUAL
18359: OR
18360: PUSH
18361: LD_VAR 0 8
18365: PUSH
18366: LD_VAR 0 14
18370: ARRAY
18371: PUSH
18372: LD_INT 45
18374: EQUAL
18375: OR
18376: PUSH
18377: LD_VAR 0 8
18381: PUSH
18382: LD_VAR 0 14
18386: ARRAY
18387: PUSH
18388: LD_INT 49
18390: EQUAL
18391: OR
18392: IFFALSE 18441
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18394: LD_ADDR_VAR 0 17
18398: PUSH
18399: LD_INT 21
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_INT 23
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18417: LD_ADDR_OWVAR 37
18421: PUSH
18422: LD_VAR 0 17
18426: PUSH
18427: LD_INT 1
18429: PPUSH
18430: LD_VAR 0 17
18434: PPUSH
18435: CALL_OW 12
18439: ARRAY
18440: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18441: LD_VAR 0 8
18445: PUSH
18446: LD_VAR 0 14
18450: ARRAY
18451: PUSH
18452: LD_INT 46
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 8
18460: PUSH
18461: LD_VAR 0 14
18465: ARRAY
18466: PUSH
18467: LD_INT 47
18469: EQUAL
18470: OR
18471: IFFALSE 18512
// begin ruChassisTab = [ 23 , 24 ] ;
18473: LD_ADDR_VAR 0 17
18477: PUSH
18478: LD_INT 23
18480: PUSH
18481: LD_INT 24
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18488: LD_ADDR_OWVAR 37
18492: PUSH
18493: LD_VAR 0 17
18497: PUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_VAR 0 17
18505: PPUSH
18506: CALL_OW 12
18510: ARRAY
18511: ST_TO_ADDR
// end ; end ;
18512: GO 18311
18514: POP
18515: POP
// veh = CreateVehicle ;
18516: LD_ADDR_VAR 0 16
18520: PUSH
18521: CALL_OW 45
18525: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18526: LD_VAR 0 16
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 0
18538: PPUSH
18539: CALL_OW 49
// if vc_control = 1 then
18543: LD_OWVAR 38
18547: PUSH
18548: LD_INT 1
18550: EQUAL
18551: IFFALSE 18608
// begin hc_gallery =  ;
18553: LD_ADDR_OWVAR 33
18557: PUSH
18558: LD_STRING 
18560: ST_TO_ADDR
// hc_name =  ;
18561: LD_ADDR_OWVAR 26
18565: PUSH
18566: LD_STRING 
18568: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18569: LD_INT 0
18571: PPUSH
18572: LD_INT 3
18574: PPUSH
18575: LD_VAR 0 4
18579: PPUSH
18580: CALL_OW 380
// un = CreateHuman ;
18584: LD_ADDR_VAR 0 15
18588: PUSH
18589: CALL_OW 44
18593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18594: LD_VAR 0 15
18598: PPUSH
18599: LD_VAR 0 16
18603: PPUSH
18604: CALL_OW 52
// end ; i = i + 1 ;
18608: LD_ADDR_VAR 0 13
18612: PUSH
18613: LD_VAR 0 13
18617: PUSH
18618: LD_INT 1
18620: PLUS
18621: ST_TO_ADDR
// end ; until i = vehCount ;
18622: LD_VAR 0 13
18626: PUSH
18627: LD_VAR 0 3
18631: EQUAL
18632: IFFALSE 17258
// repeat wait ( 0 0$1 ) ;
18634: LD_INT 35
18636: PPUSH
18637: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18641: LD_ADDR_VAR 0 20
18645: PUSH
18646: LD_INT 22
18648: PUSH
18649: LD_VAR 0 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 24
18670: PUSH
18671: LD_INT 650
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 69
18687: ST_TO_ADDR
// if vehicleOK_list > 0 then
18688: LD_VAR 0 20
18692: PUSH
18693: LD_INT 0
18695: GREATER
18696: IFFALSE 18887
// begin for i in vehicleOK_list do
18698: LD_ADDR_VAR 0 13
18702: PUSH
18703: LD_VAR 0 20
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18885
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18711: LD_ADDR_VAR 0 21
18715: PUSH
18716: LD_INT 22
18718: PUSH
18719: LD_VAR 0 11
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PPUSH
18728: CALL_OW 69
18732: PPUSH
18733: LD_VAR 0 13
18737: PPUSH
18738: CALL_OW 74
18742: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18743: LD_ADDR_VAR 0 22
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_VAR 0 11
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 59
18765: PUSH
18766: EMPTY
18767: LIST
18768: PUSH
18769: LD_INT 21
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 2
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: PPUSH
18807: LD_VAR 0 13
18811: PPUSH
18812: CALL_OW 74
18816: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18817: LD_VAR 0 13
18821: PPUSH
18822: LD_VAR 0 21
18826: PPUSH
18827: CALL_OW 296
18831: PUSH
18832: LD_INT 8
18834: PLUS
18835: PUSH
18836: LD_VAR 0 13
18840: PPUSH
18841: LD_VAR 0 22
18845: PPUSH
18846: CALL_OW 296
18850: LESS
18851: IFFALSE 18869
// begin ComAttackUnit ( i , target1 ) ;
18853: LD_VAR 0 13
18857: PPUSH
18858: LD_VAR 0 21
18862: PPUSH
18863: CALL_OW 115
// end else
18867: GO 18883
// begin ComAttackUnit ( i , target2 ) ;
18869: LD_VAR 0 13
18873: PPUSH
18874: LD_VAR 0 22
18878: PPUSH
18879: CALL_OW 115
// end ; end ;
18883: GO 18708
18885: POP
18886: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18887: LD_INT 22
18889: PUSH
18890: LD_VAR 0 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 21
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PUSH
18918: LD_INT 0
18920: EQUAL
18921: IFFALSE 18634
// end ;
18923: LD_VAR 0 12
18927: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
18936: PPUSH
18937: PPUSH
18938: PPUSH
18939: PPUSH
18940: PPUSH
// for i = 1 to soldierCount do
18941: LD_ADDR_VAR 0 13
18945: PUSH
18946: DOUBLE
18947: LD_INT 1
18949: DEC
18950: ST_TO_ADDR
18951: LD_VAR 0 3
18955: PUSH
18956: FOR_TO
18957: IFFALSE 19039
// begin uc_side = side ;
18959: LD_ADDR_OWVAR 20
18963: PUSH
18964: LD_VAR 0 1
18968: ST_TO_ADDR
// uc_nation = nation ;
18969: LD_ADDR_OWVAR 21
18973: PUSH
18974: LD_VAR 0 2
18978: ST_TO_ADDR
// hc_name =  ;
18979: LD_ADDR_OWVAR 26
18983: PUSH
18984: LD_STRING 
18986: ST_TO_ADDR
// hc_gallery =  ;
18987: LD_ADDR_OWVAR 33
18991: PUSH
18992: LD_STRING 
18994: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18995: LD_INT 0
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_VAR 0 8
19005: PPUSH
19006: CALL_OW 380
// un = CreateHuman ;
19010: LD_ADDR_VAR 0 15
19014: PUSH
19015: CALL_OW 44
19019: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19020: LD_VAR 0 15
19024: PPUSH
19025: LD_VAR 0 9
19029: PPUSH
19030: LD_INT 0
19032: PPUSH
19033: CALL_OW 49
// end ;
19037: GO 18956
19039: POP
19040: POP
// for i = 1 to sniperCount do
19041: LD_ADDR_VAR 0 13
19045: PUSH
19046: DOUBLE
19047: LD_INT 1
19049: DEC
19050: ST_TO_ADDR
19051: LD_VAR 0 4
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19139
// begin uc_side = side ;
19059: LD_ADDR_OWVAR 20
19063: PUSH
19064: LD_VAR 0 1
19068: ST_TO_ADDR
// uc_nation = nation ;
19069: LD_ADDR_OWVAR 21
19073: PUSH
19074: LD_VAR 0 2
19078: ST_TO_ADDR
// hc_name =  ;
19079: LD_ADDR_OWVAR 26
19083: PUSH
19084: LD_STRING 
19086: ST_TO_ADDR
// hc_gallery =  ;
19087: LD_ADDR_OWVAR 33
19091: PUSH
19092: LD_STRING 
19094: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19095: LD_INT 0
19097: PPUSH
19098: LD_INT 5
19100: PPUSH
19101: LD_VAR 0 8
19105: PPUSH
19106: CALL_OW 380
// un = CreateHuman ;
19110: LD_ADDR_VAR 0 15
19114: PUSH
19115: CALL_OW 44
19119: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19120: LD_VAR 0 15
19124: PPUSH
19125: LD_VAR 0 9
19129: PPUSH
19130: LD_INT 0
19132: PPUSH
19133: CALL_OW 49
// end ;
19137: GO 19056
19139: POP
19140: POP
// for i = 1 to bazookCount do
19141: LD_ADDR_VAR 0 13
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_VAR 0 5
19155: PUSH
19156: FOR_TO
19157: IFFALSE 19239
// begin uc_side = side ;
19159: LD_ADDR_OWVAR 20
19163: PUSH
19164: LD_VAR 0 1
19168: ST_TO_ADDR
// uc_nation = nation ;
19169: LD_ADDR_OWVAR 21
19173: PUSH
19174: LD_VAR 0 2
19178: ST_TO_ADDR
// hc_name =  ;
19179: LD_ADDR_OWVAR 26
19183: PUSH
19184: LD_STRING 
19186: ST_TO_ADDR
// hc_gallery =  ;
19187: LD_ADDR_OWVAR 33
19191: PUSH
19192: LD_STRING 
19194: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19195: LD_INT 0
19197: PPUSH
19198: LD_INT 9
19200: PPUSH
19201: LD_VAR 0 8
19205: PPUSH
19206: CALL_OW 380
// un = CreateHuman ;
19210: LD_ADDR_VAR 0 15
19214: PUSH
19215: CALL_OW 44
19219: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19220: LD_VAR 0 15
19224: PPUSH
19225: LD_VAR 0 9
19229: PPUSH
19230: LD_INT 0
19232: PPUSH
19233: CALL_OW 49
// end ;
19237: GO 19156
19239: POP
19240: POP
// for i = 1 to mortalCount do
19241: LD_ADDR_VAR 0 13
19245: PUSH
19246: DOUBLE
19247: LD_INT 1
19249: DEC
19250: ST_TO_ADDR
19251: LD_VAR 0 6
19255: PUSH
19256: FOR_TO
19257: IFFALSE 19339
// begin uc_side = side ;
19259: LD_ADDR_OWVAR 20
19263: PUSH
19264: LD_VAR 0 1
19268: ST_TO_ADDR
// uc_nation = nation ;
19269: LD_ADDR_OWVAR 21
19273: PUSH
19274: LD_VAR 0 2
19278: ST_TO_ADDR
// hc_name =  ;
19279: LD_ADDR_OWVAR 26
19283: PUSH
19284: LD_STRING 
19286: ST_TO_ADDR
// hc_gallery =  ;
19287: LD_ADDR_OWVAR 33
19291: PUSH
19292: LD_STRING 
19294: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19295: LD_INT 0
19297: PPUSH
19298: LD_INT 8
19300: PPUSH
19301: LD_VAR 0 8
19305: PPUSH
19306: CALL_OW 380
// un = CreateHuman ;
19310: LD_ADDR_VAR 0 15
19314: PUSH
19315: CALL_OW 44
19319: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19320: LD_VAR 0 15
19324: PPUSH
19325: LD_VAR 0 9
19329: PPUSH
19330: LD_INT 0
19332: PPUSH
19333: CALL_OW 49
// end ;
19337: GO 19256
19339: POP
19340: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19341: LD_ADDR_VAR 0 18
19345: PUSH
19346: LD_INT 22
19348: PUSH
19349: LD_VAR 0 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 25
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: LD_INT 5
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 25
19383: PUSH
19384: LD_INT 8
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 25
19393: PUSH
19394: LD_INT 9
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19417: LD_ADDR_VAR 0 17
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_VAR 0 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 25
19436: PUSH
19437: LD_INT 4
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// for i in medic_list do
19453: LD_ADDR_VAR 0 13
19457: PUSH
19458: LD_VAR 0 17
19462: PUSH
19463: FOR_IN
19464: IFFALSE 19482
// ComMoveToArea ( i , healArea ) ;
19466: LD_VAR 0 13
19470: PPUSH
19471: LD_VAR 0 10
19475: PPUSH
19476: CALL_OW 113
19480: GO 19463
19482: POP
19483: POP
// repeat wait ( 0 0$1 ) ;
19484: LD_INT 35
19486: PPUSH
19487: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19491: LD_ADDR_VAR 0 16
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_VAR 0 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: LD_INT 24
19516: PUSH
19517: LD_INT 550
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 24
19530: PUSH
19531: LD_INT 250
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19552: LD_ADDR_VAR 0 18
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 25
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 25
19584: PUSH
19585: LD_INT 5
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 25
19594: PUSH
19595: LD_INT 8
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 25
19604: PUSH
19605: LD_INT 9
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 24
19621: PUSH
19622: LD_INT 1000
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if medicCount > 0 then
19639: LD_VAR 0 7
19643: PUSH
19644: LD_INT 0
19646: GREATER
19647: IFFALSE 19721
// begin if damageUnit_list > 0 then
19649: LD_VAR 0 16
19653: PUSH
19654: LD_INT 0
19656: GREATER
19657: IFFALSE 19721
// begin for i in damageUnit_list do
19659: LD_ADDR_VAR 0 13
19663: PUSH
19664: LD_VAR 0 16
19668: PUSH
19669: FOR_IN
19670: IFFALSE 19719
// begin ComMoveToArea ( i , healArea ) ;
19672: LD_VAR 0 13
19676: PPUSH
19677: LD_VAR 0 10
19681: PPUSH
19682: CALL_OW 113
// for j in medic_list do
19686: LD_ADDR_VAR 0 14
19690: PUSH
19691: LD_VAR 0 17
19695: PUSH
19696: FOR_IN
19697: IFFALSE 19715
// AddComHeal ( j , i ) ;
19699: LD_VAR 0 14
19703: PPUSH
19704: LD_VAR 0 13
19708: PPUSH
19709: CALL_OW 188
19713: GO 19696
19715: POP
19716: POP
// end ;
19717: GO 19669
19719: POP
19720: POP
// end ; end ; for i in soldiersOK_list do
19721: LD_ADDR_VAR 0 13
19725: PUSH
19726: LD_VAR 0 18
19730: PUSH
19731: FOR_IN
19732: IFFALSE 19908
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19734: LD_ADDR_VAR 0 21
19738: PUSH
19739: LD_INT 22
19741: PUSH
19742: LD_VAR 0 11
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PPUSH
19756: LD_VAR 0 13
19760: PPUSH
19761: CALL_OW 74
19765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19766: LD_ADDR_VAR 0 22
19770: PUSH
19771: LD_INT 22
19773: PUSH
19774: LD_VAR 0 11
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 59
19788: PUSH
19789: EMPTY
19790: LIST
19791: PUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 21
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: PPUSH
19830: LD_VAR 0 13
19834: PPUSH
19835: CALL_OW 74
19839: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19840: LD_VAR 0 13
19844: PPUSH
19845: LD_VAR 0 21
19849: PPUSH
19850: CALL_OW 296
19854: PUSH
19855: LD_INT 8
19857: PLUS
19858: PUSH
19859: LD_VAR 0 13
19863: PPUSH
19864: LD_VAR 0 22
19868: PPUSH
19869: CALL_OW 296
19873: LESS
19874: IFFALSE 19892
// begin ComAttackUnit ( i , target1 ) ;
19876: LD_VAR 0 13
19880: PPUSH
19881: LD_VAR 0 21
19885: PPUSH
19886: CALL_OW 115
// end else
19890: GO 19906
// begin ComAttackUnit ( i , target2 ) ;
19892: LD_VAR 0 13
19896: PPUSH
19897: LD_VAR 0 22
19901: PPUSH
19902: CALL_OW 115
// end ; end ;
19906: GO 19731
19908: POP
19909: POP
// for i in soldiersOK_list do
19910: LD_ADDR_VAR 0 13
19914: PUSH
19915: LD_VAR 0 18
19919: PUSH
19920: FOR_IN
19921: IFFALSE 20097
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19923: LD_ADDR_VAR 0 21
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_VAR 0 11
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: PPUSH
19945: LD_VAR 0 13
19949: PPUSH
19950: CALL_OW 74
19954: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19955: LD_ADDR_VAR 0 22
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_VAR 0 11
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: LD_INT 59
19977: PUSH
19978: EMPTY
19979: LIST
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 21
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: PPUSH
20019: LD_VAR 0 13
20023: PPUSH
20024: CALL_OW 74
20028: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20029: LD_VAR 0 13
20033: PPUSH
20034: LD_VAR 0 21
20038: PPUSH
20039: CALL_OW 296
20043: PUSH
20044: LD_INT 8
20046: PLUS
20047: PUSH
20048: LD_VAR 0 13
20052: PPUSH
20053: LD_VAR 0 22
20057: PPUSH
20058: CALL_OW 296
20062: LESS
20063: IFFALSE 20081
// begin ComAttackUnit ( i , target1 ) ;
20065: LD_VAR 0 13
20069: PPUSH
20070: LD_VAR 0 21
20074: PPUSH
20075: CALL_OW 115
// end else
20079: GO 20095
// begin ComAttackUnit ( i , target2 ) ;
20081: LD_VAR 0 13
20085: PPUSH
20086: LD_VAR 0 22
20090: PPUSH
20091: CALL_OW 115
// end ; end ;
20095: GO 19920
20097: POP
20098: POP
// until soldiersOK_list = [ ] ;
20099: LD_VAR 0 18
20103: PUSH
20104: EMPTY
20105: EQUAL
20106: IFFALSE 19484
// end ;
20108: LD_VAR 0 12
20112: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
20118: PPUSH
20119: PPUSH
20120: PPUSH
20121: PPUSH
// repeat wait ( 0 0$1 ) ;
20122: LD_INT 35
20124: PPUSH
20125: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20129: LD_ADDR_VAR 0 7
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 25
20146: PUSH
20147: LD_INT 4
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 3
20156: PUSH
20157: LD_INT 60
20159: PUSH
20160: EMPTY
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 7
20181: NOT
20182: IFFALSE 20186
// continue ;
20184: GO 20122
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20186: LD_ADDR_VAR 0 3
20190: PUSH
20191: LD_INT 5
20193: PPUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 25
20206: PUSH
20207: LD_INT 12
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PPUSH
20218: CALL_OW 70
20222: PUSH
20223: FOR_IN
20224: IFFALSE 20257
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20226: LD_VAR 0 7
20230: PPUSH
20231: LD_VAR 0 3
20235: PPUSH
20236: CALL_OW 250
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: CALL_OW 251
20250: PPUSH
20251: CALL_OW 131
20255: GO 20223
20257: POP
20258: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20259: LD_INT 22
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 25
20271: PUSH
20272: LD_INT 4
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PPUSH
20283: CALL_OW 69
20287: PUSH
20288: LD_INT 0
20290: EQUAL
20291: PUSH
20292: LD_INT 5
20294: PPUSH
20295: LD_INT 22
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 25
20307: PUSH
20308: LD_INT 12
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 70
20323: PUSH
20324: LD_INT 2
20326: LESS
20327: OR
20328: PUSH
20329: LD_OWVAR 1
20333: PUSH
20334: LD_INT 7000
20336: GREATEREQUAL
20337: OR
20338: IFFALSE 20122
// repeat wait ( 0 0$1 ) ;
20340: LD_INT 35
20342: PPUSH
20343: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20347: LD_ADDR_VAR 0 5
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 5
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// until arm ;
20381: LD_VAR 0 5
20385: IFFALSE 20340
// wait ( 0 0$25 ) ;
20387: LD_INT 875
20389: PPUSH
20390: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20394: LD_ADDR_VAR 0 6
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 30
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: ST_TO_ADDR
// j := 0 ;
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20454: LD_ADDR_VAR 0 2
20458: PUSH
20459: LD_INT 22
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 25
20471: PUSH
20472: LD_INT 12
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20576
// begin ComMoveXY ( i , 63 , 16 ) ;
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_INT 63
20498: PPUSH
20499: LD_INT 16
20501: PPUSH
20502: CALL_OW 111
// j := j + 1 ;
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 1
20518: PLUS
20519: ST_TO_ADDR
// if j < 5 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 5
20527: LESS
20528: IFFALSE 20546
// b := arm [ 1 ] else
20530: LD_ADDR_VAR 0 4
20534: PUSH
20535: LD_VAR 0 5
20539: PUSH
20540: LD_INT 1
20542: ARRAY
20543: ST_TO_ADDR
20544: GO 20560
// b := dep [ 1 ] ;
20546: LD_ADDR_VAR 0 4
20550: PUSH
20551: LD_VAR 0 6
20555: PUSH
20556: LD_INT 1
20558: ARRAY
20559: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_VAR 0 4
20569: PPUSH
20570: CALL_OW 180
// end ;
20574: GO 20488
20576: POP
20577: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20578: LD_ADDR_VAR 0 2
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 25
20595: PUSH
20596: LD_INT 4
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: PUSH
20612: FOR_IN
20613: IFFALSE 20659
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 8
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: PUSH
20649: LD_INT 1
20651: ARRAY
20652: PPUSH
20653: CALL_OW 120
20657: GO 20612
20659: POP
20660: POP
// end ;
20661: LD_VAR 0 1
20665: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20666: LD_INT 0
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
20675: PPUSH
20676: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20677: LD_INT 22
20679: PUSH
20680: LD_VAR 0 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 21
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PPUSH
20703: CALL_OW 69
20707: PUSH
20708: LD_VAR 0 3
20712: LESSEQUAL
20713: IFFALSE 20857
// for i = 1 to vehCount do
20715: LD_ADDR_VAR 0 10
20719: PUSH
20720: DOUBLE
20721: LD_INT 1
20723: DEC
20724: ST_TO_ADDR
20725: LD_VAR 0 3
20729: PUSH
20730: FOR_TO
20731: IFFALSE 20855
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20733: LD_ADDR_VAR 0 12
20737: PUSH
20738: LD_VAR 0 5
20742: PUSH
20743: LD_INT 1
20745: PPUSH
20746: LD_VAR 0 5
20750: PPUSH
20751: CALL_OW 12
20755: ARRAY
20756: ST_TO_ADDR
// if randWeapon = 46 then
20757: LD_VAR 0 12
20761: PUSH
20762: LD_INT 46
20764: EQUAL
20765: IFFALSE 20810
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_INT 24
20774: PPUSH
20775: LD_VAR 0 6
20779: PPUSH
20780: LD_VAR 0 7
20784: PUSH
20785: LD_INT 1
20787: PPUSH
20788: LD_VAR 0 7
20792: PPUSH
20793: CALL_OW 12
20797: ARRAY
20798: PPUSH
20799: LD_VAR 0 12
20803: PPUSH
20804: CALL_OW 185
20808: GO 20853
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20810: LD_VAR 0 2
20814: PPUSH
20815: LD_VAR 0 8
20819: PPUSH
20820: LD_VAR 0 6
20824: PPUSH
20825: LD_VAR 0 7
20829: PUSH
20830: LD_INT 1
20832: PPUSH
20833: LD_VAR 0 7
20837: PPUSH
20838: CALL_OW 12
20842: ARRAY
20843: PPUSH
20844: LD_VAR 0 12
20848: PPUSH
20849: CALL_OW 185
// end ;
20853: GO 20730
20855: POP
20856: POP
// repeat wait ( 0 0$1 ) ;
20857: LD_INT 35
20859: PPUSH
20860: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20864: LD_INT 22
20866: PUSH
20867: LD_VAR 0 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 24
20888: PUSH
20889: LD_INT 250
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: PPUSH
20901: CALL_OW 69
20905: PUSH
20906: LD_VAR 0 3
20910: GREATEREQUAL
20911: IFFALSE 20857
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20913: LD_INT 22
20915: PUSH
20916: LD_VAR 0 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 24
20937: PUSH
20938: LD_INT 250
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: PPUSH
20950: CALL_OW 69
20954: PUSH
20955: LD_VAR 0 3
20959: GREATEREQUAL
20960: IFFALSE 21303
// begin repeat begin wait ( 0 0$1 ) ;
20962: LD_INT 35
20964: PPUSH
20965: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20969: LD_INT 22
20971: PUSH
20972: LD_VAR 0 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 21
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 24
20993: PUSH
20994: LD_INT 651
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: PUSH
21011: LD_INT 0
21013: GREATER
21014: IFFALSE 21242
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21016: LD_ADDR_VAR 0 10
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 24
21045: PUSH
21046: LD_INT 651
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: PUSH
21063: FOR_IN
21064: IFFALSE 21240
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21066: LD_ADDR_VAR 0 16
21070: PUSH
21071: LD_INT 22
21073: PUSH
21074: LD_VAR 0 4
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 69
21087: PPUSH
21088: LD_VAR 0 10
21092: PPUSH
21093: CALL_OW 74
21097: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21098: LD_ADDR_VAR 0 17
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_VAR 0 4
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 59
21120: PUSH
21121: EMPTY
21122: LIST
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 21
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: PPUSH
21157: CALL_OW 69
21161: PPUSH
21162: LD_VAR 0 10
21166: PPUSH
21167: CALL_OW 74
21171: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21172: LD_VAR 0 10
21176: PPUSH
21177: LD_VAR 0 16
21181: PPUSH
21182: CALL_OW 296
21186: PUSH
21187: LD_INT 8
21189: PLUS
21190: PUSH
21191: LD_VAR 0 10
21195: PPUSH
21196: LD_VAR 0 17
21200: PPUSH
21201: CALL_OW 296
21205: LESS
21206: IFFALSE 21224
// begin ComAttackUnit ( i , target1 ) ;
21208: LD_VAR 0 10
21212: PPUSH
21213: LD_VAR 0 16
21217: PPUSH
21218: CALL_OW 115
// end else
21222: GO 21238
// begin ComAttackUnit ( i , target2 ) ;
21224: LD_VAR 0 10
21228: PPUSH
21229: LD_VAR 0 17
21233: PPUSH
21234: CALL_OW 115
// end ; end ;
21238: GO 21063
21240: POP
21241: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21242: LD_INT 22
21244: PUSH
21245: LD_VAR 0 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: PUSH
21273: LD_INT 0
21275: EQUAL
21276: PUSH
21277: LD_INT 22
21279: PUSH
21280: LD_VAR 0 4
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: PPUSH
21292: CALL_OW 69
21296: PUSH
21297: LD_INT 0
21299: EQUAL
21300: OR
21301: IFFALSE 20962
// end ; end ;
21303: LD_VAR 0 9
21307: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
21313: PPUSH
// r := 100 ;
21314: LD_ADDR_VAR 0 5
21318: PUSH
21319: LD_INT 100
21321: ST_TO_ADDR
// x := 0 ;
21322: LD_ADDR_VAR 0 6
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// while ( x < n ) do
21330: LD_VAR 0 6
21334: PUSH
21335: LD_VAR 0 2
21339: LESS
21340: IFFALSE 21627
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21342: LD_ADDR_VAR 0 4
21346: PUSH
21347: DOUBLE
21348: LD_INT 1
21350: DEC
21351: ST_TO_ADDR
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_INT 0
21359: PPUSH
21360: CALL_OW 517
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PUSH
21369: FOR_TO
21370: IFFALSE 21623
// begin if r > 50 then
21372: LD_VAR 0 5
21376: PUSH
21377: LD_INT 50
21379: GREATER
21380: IFFALSE 21599
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 0
21389: PPUSH
21390: CALL_OW 517
21394: PUSH
21395: LD_INT 1
21397: ARRAY
21398: PUSH
21399: LD_VAR 0 4
21403: ARRAY
21404: PPUSH
21405: LD_VAR 0 1
21409: PPUSH
21410: LD_INT 0
21412: PPUSH
21413: CALL_OW 517
21417: PUSH
21418: LD_INT 2
21420: ARRAY
21421: PUSH
21422: LD_VAR 0 4
21426: ARRAY
21427: PPUSH
21428: CALL_OW 458
21432: NOT
21433: IFFALSE 21583
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_INT 0
21442: PPUSH
21443: CALL_OW 517
21447: PUSH
21448: LD_INT 1
21450: ARRAY
21451: PUSH
21452: LD_VAR 0 4
21456: ARRAY
21457: PPUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_INT 0
21465: PPUSH
21466: CALL_OW 517
21470: PUSH
21471: LD_INT 2
21473: ARRAY
21474: PUSH
21475: LD_VAR 0 4
21479: ARRAY
21480: PPUSH
21481: LD_INT 5
21483: PPUSH
21484: LD_INT 0
21486: PPUSH
21487: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21491: LD_ADDR_EXP 50
21495: PUSH
21496: LD_EXP 50
21500: PPUSH
21501: LD_INT 1
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: CALL_OW 517
21516: PUSH
21517: LD_INT 1
21519: ARRAY
21520: PUSH
21521: LD_VAR 0 4
21525: ARRAY
21526: PUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: LD_INT 0
21534: PPUSH
21535: CALL_OW 517
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: PUSH
21544: LD_VAR 0 4
21548: ARRAY
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PPUSH
21554: CALL_OW 2
21558: ST_TO_ADDR
// r := 0 ;
21559: LD_ADDR_VAR 0 5
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// x := x + 1 ;
21567: LD_ADDR_VAR 0 6
21571: PUSH
21572: LD_VAR 0 6
21576: PUSH
21577: LD_INT 1
21579: PLUS
21580: ST_TO_ADDR
// end else
21581: GO 21597
// r := r + 35 ;
21583: LD_ADDR_VAR 0 5
21587: PUSH
21588: LD_VAR 0 5
21592: PUSH
21593: LD_INT 35
21595: PLUS
21596: ST_TO_ADDR
// end else
21597: GO 21621
// r := r + rand ( 10 , 25 ) ;
21599: LD_ADDR_VAR 0 5
21603: PUSH
21604: LD_VAR 0 5
21608: PUSH
21609: LD_INT 10
21611: PPUSH
21612: LD_INT 25
21614: PPUSH
21615: CALL_OW 12
21619: PLUS
21620: ST_TO_ADDR
// end ;
21621: GO 21369
21623: POP
21624: POP
21625: GO 21330
// end ; end_of_file
21627: LD_VAR 0 3
21631: RET
// every 0 0$1 trigger russianAI = 1 do
21632: LD_EXP 39
21636: PUSH
21637: LD_INT 1
21639: EQUAL
21640: IFFALSE 21859
21642: GO 21644
21644: DISABLE
// begin enable ;
21645: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21646: LD_INT 3
21648: PPUSH
21649: LD_EXP 30
21653: PPUSH
21654: CALL 16110 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21658: LD_INT 3
21660: PPUSH
21661: LD_EXP 42
21665: PPUSH
21666: CALL 16470 0 2
// if ruPossition = 1 then
21670: LD_EXP 41
21674: PUSH
21675: LD_INT 1
21677: EQUAL
21678: IFFALSE 21733
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21680: LD_INT 3
21682: PPUSH
21683: LD_INT 13
21685: PPUSH
21686: LD_INT 10
21688: PPUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 21
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 8
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: PPUSH
21729: CALL 16676 0 4
// if ruPossition = 2 then
21733: LD_EXP 41
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: IFFALSE 21796
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21743: LD_INT 3
21745: PPUSH
21746: LD_INT 14
21748: PPUSH
21749: LD_INT 11
21751: PPUSH
21752: LD_INT 22
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 8
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: PPUSH
21792: CALL 16676 0 4
// if ruPossition = 3 then
21796: LD_EXP 41
21800: PUSH
21801: LD_INT 3
21803: EQUAL
21804: IFFALSE 21859
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21806: LD_INT 3
21808: PPUSH
21809: LD_INT 15
21811: PPUSH
21812: LD_INT 12
21814: PPUSH
21815: LD_INT 22
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 3
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: LD_INT 8
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: PPUSH
21855: CALL 16676 0 4
// end ;
21859: END
// every 0 0$1 do
21860: GO 21862
21862: DISABLE
// begin enable ;
21863: ENABLE
// if ruPossition = 1 then
21864: LD_EXP 41
21868: PUSH
21869: LD_INT 1
21871: EQUAL
21872: IFFALSE 21884
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21874: LD_INT 3
21876: PPUSH
21877: LD_INT 10
21879: PPUSH
21880: CALL 15747 0 2
// if ruPossition = 2 then
21884: LD_EXP 41
21888: PUSH
21889: LD_INT 2
21891: EQUAL
21892: IFFALSE 21904
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21894: LD_INT 3
21896: PPUSH
21897: LD_INT 11
21899: PPUSH
21900: CALL 15747 0 2
// if ruPossition = 3 then
21904: LD_EXP 41
21908: PUSH
21909: LD_INT 3
21911: EQUAL
21912: IFFALSE 21924
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21914: LD_INT 3
21916: PPUSH
21917: LD_INT 12
21919: PPUSH
21920: CALL 15747 0 2
// IntBazooka ( 3 , 1 ) ;
21924: LD_INT 3
21926: PPUSH
21927: LD_INT 1
21929: PPUSH
21930: CALL 14546 0 2
// IntBazooka ( 6 , 1 ) ;
21934: LD_INT 6
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL 14546 0 2
// end ;
21944: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21945: LD_EXP 39
21949: PUSH
21950: LD_INT 1
21952: EQUAL
21953: PUSH
21954: LD_EXP 35
21958: PPUSH
21959: CALL_OW 302
21963: AND
21964: PUSH
21965: LD_EXP 35
21969: PPUSH
21970: CALL_OW 255
21974: PUSH
21975: LD_INT 3
21977: EQUAL
21978: AND
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 21
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 33
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 69
22019: PUSH
22020: LD_INT 0
22022: EQUAL
22023: AND
22024: IFFALSE 22232
22026: GO 22028
22028: DISABLE
// begin enable ;
22029: ENABLE
// if Difficulty = 1 then
22030: LD_OWVAR 67
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22100
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_EXP 35
22047: PPUSH
22048: LD_INT 5
22050: PPUSH
22051: LD_INT 8
22053: PPUSH
22054: CALL_OW 12
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: LD_INT 43
22064: PUSH
22065: LD_INT 44
22067: PUSH
22068: LD_INT 45
22070: PUSH
22071: LD_INT 46
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 3
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PPUSH
22093: LD_INT 22
22095: PPUSH
22096: CALL 20666 0 8
// if Difficulty = 2 then
22100: LD_OWVAR 67
22104: PUSH
22105: LD_INT 2
22107: EQUAL
22108: IFFALSE 22166
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22110: LD_INT 3
22112: PPUSH
22113: LD_EXP 35
22117: PPUSH
22118: LD_INT 6
22120: PPUSH
22121: LD_INT 8
22123: PPUSH
22124: CALL_OW 12
22128: PPUSH
22129: LD_INT 1
22131: PPUSH
22132: LD_INT 44
22134: PUSH
22135: LD_INT 45
22137: PUSH
22138: LD_INT 46
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: LD_INT 3
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PPUSH
22159: LD_INT 22
22161: PPUSH
22162: CALL 20666 0 8
// if Difficulty >= 3 then
22166: LD_OWVAR 67
22170: PUSH
22171: LD_INT 3
22173: GREATEREQUAL
22174: IFFALSE 22232
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22176: LD_INT 3
22178: PPUSH
22179: LD_EXP 35
22183: PPUSH
22184: LD_INT 7
22186: PPUSH
22187: LD_INT 8
22189: PPUSH
22190: CALL_OW 12
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: LD_INT 44
22200: PUSH
22201: LD_INT 45
22203: PUSH
22204: LD_INT 46
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: PPUSH
22212: LD_INT 1
22214: PPUSH
22215: LD_INT 3
22217: PUSH
22218: LD_INT 3
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PPUSH
22225: LD_INT 22
22227: PPUSH
22228: CALL 20666 0 8
// end ;
22232: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22233: LD_EXP 50
22237: PUSH
22238: LD_EXP 49
22242: AND
22243: IFFALSE 22364
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
// begin enable ;
22251: ENABLE
// for i in arabianMines do
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_EXP 50
22261: PUSH
22262: FOR_IN
22263: IFFALSE 22362
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22265: LD_INT 22
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 92
22277: PUSH
22278: LD_VAR 0 1
22282: PUSH
22283: LD_INT 1
22285: ARRAY
22286: PUSH
22287: LD_VAR 0 1
22291: PUSH
22292: LD_INT 2
22294: ARRAY
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PPUSH
22309: CALL_OW 69
22313: IFFALSE 22360
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: ARRAY
22323: PPUSH
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 2
22331: ARRAY
22332: PPUSH
22333: LD_INT 5
22335: PPUSH
22336: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22340: LD_ADDR_EXP 50
22344: PUSH
22345: LD_EXP 50
22349: PPUSH
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 3
22359: ST_TO_ADDR
// end ; end ;
22360: GO 22262
22362: POP
22363: POP
// end ; end_of_file
22364: PPOPN 1
22366: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 255
22376: PUSH
22377: LD_INT 4
22379: EQUAL
22380: IFFALSE 22394
// SetBName ( building , epsilon ) ;
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_STRING epsilon
22389: PPUSH
22390: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 255
22403: PUSH
22404: LD_INT 1
22406: EQUAL
22407: PUSH
22408: LD_VAR 0 1
22412: PPUSH
22413: CALL_OW 266
22417: PUSH
22418: LD_INT 0
22420: EQUAL
22421: AND
22422: IFFALSE 22436
// SetBName ( building , epsilon ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_STRING epsilon
22431: PPUSH
22432: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 255
22445: PUSH
22446: LD_INT 3
22448: EQUAL
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 266
22459: PUSH
22460: LD_INT 0
22462: EQUAL
22463: AND
22464: IFFALSE 22478
// SetBName ( building , chuikov ) ;
22466: LD_VAR 0 1
22470: PPUSH
22471: LD_STRING chuikov
22473: PPUSH
22474: CALL_OW 500
// if GetSide ( building ) = 2 then
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 255
22487: PUSH
22488: LD_INT 2
22490: EQUAL
22491: IFFALSE 22547
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 266
22502: PUSH
22503: LD_INT 6
22505: EQUAL
22506: PUSH
22507: LD_VAR 0 1
22511: PPUSH
22512: CALL_OW 266
22516: PUSH
22517: LD_INT 9
22519: EQUAL
22520: OR
22521: IFFALSE 22547
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22523: LD_VAR 0 1
22527: PPUSH
22528: LD_INT 10
22530: PPUSH
22531: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22535: LD_VAR 0 1
22539: PPUSH
22540: LD_INT 11
22542: PPUSH
22543: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 255
22556: PUSH
22557: LD_INT 3
22559: EQUAL
22560: IFFALSE 22594
// begin ruDepotConstructed := true ;
22562: LD_ADDR_EXP 57
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL_OW 266
22579: PUSH
22580: LD_INT 2
22582: EQUAL
22583: IFFALSE 22594
// AddComUpgrade ( building ) ;
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 206
// end ; end ;
22594: PPOPN 2
22596: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22597: LD_INT 0
22599: PPUSH
22600: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22601: LD_VAR 0 1
22605: PUSH
22606: LD_INT 22
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 23
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: IN
22646: PUSH
22647: LD_EXP 61
22651: NOT
22652: AND
22653: IFFALSE 22684
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22655: LD_ADDR_EXP 61
22659: PUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 250
22669: PUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 251
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: ST_TO_ADDR
// end ;
22684: PPOPN 3
22686: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22687: LD_VAR 0 2
22691: PPUSH
22692: CALL_OW 255
22696: PUSH
22697: LD_INT 3
22699: EQUAL
22700: PUSH
22701: LD_EXP 35
22705: PPUSH
22706: CALL_OW 255
22710: PUSH
22711: LD_INT 3
22713: EQUAL
22714: AND
22715: PUSH
22716: LD_EXP 35
22720: PPUSH
22721: CALL_OW 302
22725: AND
22726: IFFALSE 22742
// ComEnterUnit ( human , ruFab ) ;
22728: LD_VAR 0 2
22732: PPUSH
22733: LD_EXP 35
22737: PPUSH
22738: CALL_OW 120
// end ;
22742: PPOPN 2
22744: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22745: LD_INT 0
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 255
22760: PUSH
22761: LD_INT 1
22763: EQUAL
22764: PUSH
22765: LD_EXP 65
22769: PUSH
22770: LD_INT 0
22772: EQUAL
22773: AND
22774: IFFALSE 22976
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 266
22785: PUSH
22786: LD_INT 26
22788: EQUAL
22789: PUSH
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 266
22799: PUSH
22800: LD_INT 27
22802: EQUAL
22803: OR
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 266
22814: PUSH
22815: LD_INT 28
22817: EQUAL
22818: OR
22819: IFFALSE 22976
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22821: LD_INT 22
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 7
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 30
22846: PUSH
22847: LD_INT 8
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 69
22867: PUSH
22868: LD_INT 0
22870: GREATER
22871: IFFALSE 22976
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22873: LD_ADDR_VAR 0 2
22877: PUSH
22878: LD_INT 22
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 7
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 30
22903: PUSH
22904: LD_INT 8
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: PUSH
22925: FOR_IN
22926: IFFALSE 22974
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22928: LD_VAR 0 2
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 268
22940: PUSH
22941: LD_INT 11
22943: EQUAL
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: LD_INT 2
22952: PPUSH
22953: CALL_OW 268
22957: PUSH
22958: LD_INT 11
22960: EQUAL
22961: OR
22962: IFFALSE 22972
// eventVar1 = 1 ;
22964: LD_ADDR_EXP 65
22968: PUSH
22969: LD_INT 1
22971: ST_TO_ADDR
22972: GO 22925
22974: POP
22975: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 255
22985: PUSH
22986: LD_INT 3
22988: EQUAL
22989: IFFALSE 23469
// begin if GetBType ( building ) = b_depot then
22991: LD_VAR 0 1
22995: PPUSH
22996: CALL_OW 266
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23076
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 274
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: LD_INT 5000
23021: PPUSH
23022: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 274
23035: PPUSH
23036: LD_INT 2
23038: PPUSH
23039: LD_INT 300
23041: PPUSH
23042: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 274
23055: PPUSH
23056: LD_INT 3
23058: PPUSH
23059: LD_INT 100
23061: PPUSH
23062: CALL_OW 277
// ruDepot = building ;
23066: LD_ADDR_EXP 30
23070: PUSH
23071: LD_VAR 0 1
23075: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 266
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: PUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 266
23099: PUSH
23100: LD_INT 2
23102: EQUAL
23103: OR
23104: PUSH
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 266
23114: PUSH
23115: LD_INT 4
23117: EQUAL
23118: OR
23119: IFFALSE 23130
// ComUpgrade ( building ) ;
23121: LD_VAR 0 1
23125: PPUSH
23126: CALL_OW 146
// if GetBType ( building ) = b_lab then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 266
23139: PUSH
23140: LD_INT 6
23142: EQUAL
23143: IFFALSE 23346
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23145: LD_INT 22
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 8
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 69
23173: PUSH
23174: LD_INT 0
23176: EQUAL
23177: IFFALSE 23215
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_INT 10
23186: PPUSH
23187: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23191: LD_VAR 0 1
23195: PPUSH
23196: LD_INT 12
23198: PPUSH
23199: CALL_OW 207
// ruLab1 = building ;
23203: LD_ADDR_EXP 31
23207: PUSH
23208: LD_VAR 0 1
23212: ST_TO_ADDR
// end else
23213: GO 23249
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23215: LD_VAR 0 1
23219: PPUSH
23220: LD_INT 11
23222: PPUSH
23223: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23227: LD_VAR 0 1
23231: PPUSH
23232: LD_INT 14
23234: PPUSH
23235: CALL_OW 207
// ruLab2 = building ;
23239: LD_ADDR_EXP 32
23243: PUSH
23244: LD_VAR 0 1
23248: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23249: LD_INT 3
23251: PPUSH
23252: LD_VAR 0 1
23256: PPUSH
23257: LD_INT 3
23259: PPUSH
23260: CALL 15662 0 3
// if ruDestroyedBuildings > 0 then
23264: LD_EXP 42
23268: PUSH
23269: LD_INT 0
23271: GREATER
23272: IFFALSE 23346
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23274: LD_ADDR_EXP 42
23278: PUSH
23279: LD_EXP 42
23283: PPUSH
23284: LD_INT 1
23286: PPUSH
23287: CALL_OW 3
23291: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23292: LD_ADDR_EXP 42
23296: PUSH
23297: LD_EXP 42
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 3
23309: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23310: LD_ADDR_EXP 42
23314: PUSH
23315: LD_EXP 42
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 3
23327: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23328: LD_ADDR_EXP 42
23332: PUSH
23333: LD_EXP 42
23337: PPUSH
23338: LD_INT 1
23340: PPUSH
23341: CALL_OW 3
23345: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 266
23355: PUSH
23356: LD_INT 32
23358: EQUAL
23359: IFFALSE 23396
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 44
23368: PUSH
23369: LD_INT 45
23371: PUSH
23372: LD_INT 46
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PPUSH
23383: LD_INT 3
23385: PPUSH
23386: CALL_OW 12
23390: ARRAY
23391: PPUSH
23392: CALL_OW 208
// if GetBType ( building ) = b_turret then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 266
23405: PUSH
23406: LD_INT 33
23408: EQUAL
23409: IFFALSE 23446
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23411: LD_VAR 0 1
23415: PPUSH
23416: LD_INT 44
23418: PUSH
23419: LD_INT 45
23421: PUSH
23422: LD_INT 46
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PPUSH
23433: LD_INT 3
23435: PPUSH
23436: CALL_OW 12
23440: ARRAY
23441: PPUSH
23442: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 266
23455: PUSH
23456: LD_INT 24
23458: EQUAL
23459: IFFALSE 23469
// russianAI = 1 ;
23461: LD_ADDR_EXP 39
23465: PUSH
23466: LD_INT 1
23468: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 255
23478: PUSH
23479: LD_INT 2
23481: EQUAL
23482: IFFALSE 24361
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23484: LD_VAR 0 1
23488: PPUSH
23489: CALL_OW 266
23493: PUSH
23494: LD_EXP 68
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PUSH
23503: LD_INT 1
23505: ARRAY
23506: EQUAL
23507: IFFALSE 23634
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23509: LD_ADDR_EXP 68
23513: PUSH
23514: LD_EXP 68
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 3
23526: ST_TO_ADDR
// if arBuildingsTab then
23527: LD_EXP 68
23531: IFFALSE 23634
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 25
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 69
23566: ST_TO_ADDR
// if engineers then
23567: LD_VAR 0 3
23571: IFFALSE 23634
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_EXP 68
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: PUSH
23587: LD_INT 1
23589: ARRAY
23590: PPUSH
23591: LD_EXP 68
23595: PUSH
23596: LD_INT 1
23598: ARRAY
23599: PUSH
23600: LD_INT 2
23602: ARRAY
23603: PPUSH
23604: LD_EXP 68
23608: PUSH
23609: LD_INT 1
23611: ARRAY
23612: PUSH
23613: LD_INT 3
23615: ARRAY
23616: PPUSH
23617: LD_EXP 68
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PUSH
23626: LD_INT 4
23628: ARRAY
23629: PPUSH
23630: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 266
23643: PUSH
23644: LD_INT 31
23646: EQUAL
23647: IFFALSE 23793
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23649: LD_ADDR_VAR 0 4
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 25
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 25
23679: PUSH
23680: LD_INT 8
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PPUSH
23696: CALL_OW 69
23700: PUSH
23701: LD_EXP 26
23705: DIFF
23706: ST_TO_ADDR
// if not sol then
23707: LD_VAR 0 4
23711: NOT
23712: IFFALSE 23716
// exit ;
23714: GO 24361
// for i in sol do
23716: LD_ADDR_VAR 0 2
23720: PUSH
23721: LD_VAR 0 4
23725: PUSH
23726: FOR_IN
23727: IFFALSE 23791
// if not GetTag ( i ) then
23729: LD_VAR 0 2
23733: PPUSH
23734: CALL_OW 110
23738: NOT
23739: IFFALSE 23789
// begin if IsInUnit ( i ) then
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL_OW 310
23750: IFFALSE 23761
// ComExitBuilding ( i ) ;
23752: LD_VAR 0 2
23756: PPUSH
23757: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23761: LD_VAR 0 2
23765: PPUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 180
// SetTag ( i , 11 ) ;
23775: LD_VAR 0 2
23779: PPUSH
23780: LD_INT 11
23782: PPUSH
23783: CALL_OW 109
// break ;
23787: GO 23791
// end ;
23789: GO 23726
23791: POP
23792: POP
// end ; if GetBType ( building ) = b_depot then
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 266
23802: PUSH
23803: LD_INT 0
23805: EQUAL
23806: IFFALSE 23892
// begin arDepot = building ;
23808: LD_ADDR_EXP 43
23812: PUSH
23813: LD_VAR 0 1
23817: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23818: LD_INT 38
23820: PUSH
23821: LD_INT 47
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PPUSH
23828: LD_INT 71
23830: PPUSH
23831: LD_INT 19
23833: PPUSH
23834: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 274
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: LD_INT 500
23853: PPUSH
23854: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 274
23867: PPUSH
23868: LD_INT 3
23870: PPUSH
23871: LD_INT 30
23873: PPUSH
23874: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23878: LD_EXP 26
23882: PPUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 266
23901: PUSH
23902: LD_INT 6
23904: EQUAL
23905: PUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 266
23915: PUSH
23916: LD_INT 9
23918: EQUAL
23919: OR
23920: IFFALSE 23971
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23922: LD_VAR 0 1
23926: PPUSH
23927: LD_INT 10
23929: PPUSH
23930: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_INT 11
23941: PPUSH
23942: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23946: LD_INT 2
23948: PPUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_INT 2
23956: PPUSH
23957: CALL 15662 0 3
// arLab = building ;
23961: LD_ADDR_EXP 44
23965: PUSH
23966: LD_VAR 0 1
23970: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 266
23980: PUSH
23981: LD_INT 2
23983: EQUAL
23984: PUSH
23985: LD_VAR 0 1
23989: PPUSH
23990: CALL_OW 266
23994: PUSH
23995: LD_INT 4
23997: EQUAL
23998: OR
23999: IFFALSE 24070
// begin ComUpgrade ( building ) ;
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL_OW 266
24019: PUSH
24020: LD_INT 4
24022: EQUAL
24023: IFFALSE 24070
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24025: LD_INT 22
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 25
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PPUSH
24049: CALL_OW 69
24053: PUSH
24054: LD_EXP 26
24058: DIFF
24059: PPUSH
24060: LD_INT 75
24062: PPUSH
24063: LD_INT 21
24065: PPUSH
24066: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 266
24079: PUSH
24080: LD_INT 27
24082: EQUAL
24083: IFFALSE 24361
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24085: LD_INT 22
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 30
24097: PUSH
24098: LD_INT 27
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PPUSH
24109: CALL_OW 69
24113: PUSH
24114: LD_INT 2
24116: EQUAL
24117: IFFALSE 24361
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PPUSH
24159: CALL_OW 69
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: ST_TO_ADDR
// if not i then
24168: LD_VAR 0 2
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24361
// AddComMoveXY ( i , 92 , 34 ) ;
24177: LD_VAR 0 2
24181: PPUSH
24182: LD_INT 92
24184: PPUSH
24185: LD_INT 34
24187: PPUSH
24188: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24192: LD_VAR 0 2
24196: PPUSH
24197: LD_INT 35
24199: PPUSH
24200: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24204: LD_VAR 0 2
24208: PPUSH
24209: LD_INT 101
24211: PPUSH
24212: LD_INT 20
24214: PPUSH
24215: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_INT 35
24226: PPUSH
24227: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24231: LD_VAR 0 2
24235: PPUSH
24236: LD_INT 115
24238: PPUSH
24239: LD_INT 30
24241: PPUSH
24242: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_INT 35
24253: PPUSH
24254: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24258: LD_VAR 0 2
24262: PPUSH
24263: LD_INT 82
24265: PPUSH
24266: LD_INT 57
24268: PPUSH
24269: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24273: LD_VAR 0 2
24277: PPUSH
24278: LD_INT 35
24280: PPUSH
24281: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24285: LD_VAR 0 2
24289: PPUSH
24290: LD_INT 36
24292: PPUSH
24293: LD_INT 28
24295: PPUSH
24296: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24300: LD_VAR 0 2
24304: PPUSH
24305: LD_INT 70
24307: PPUSH
24308: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24312: LD_INT 22
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 21
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: PPUSH
24347: CALL_OW 69
24351: PPUSH
24352: LD_EXP 43
24356: PPUSH
24357: CALL_OW 180
// end ; end ; end ;
24361: PPOPN 5
24363: END
// on UpgradeComplete ( building ) do var i ;
24364: LD_INT 0
24366: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 255
24376: PUSH
24377: LD_INT 1
24379: EQUAL
24380: PUSH
24381: LD_EXP 65
24385: PUSH
24386: LD_INT 0
24388: EQUAL
24389: AND
24390: IFFALSE 24588
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 266
24401: PUSH
24402: LD_INT 7
24404: EQUAL
24405: PUSH
24406: LD_VAR 0 1
24410: PPUSH
24411: CALL_OW 266
24415: PUSH
24416: LD_INT 8
24418: EQUAL
24419: OR
24420: IFFALSE 24588
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24422: LD_INT 22
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 26
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 27
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: LD_INT 28
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: LD_INT 0
24482: GREATER
24483: IFFALSE 24588
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 22
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 30
24505: PUSH
24506: LD_INT 7
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 30
24515: PUSH
24516: LD_INT 8
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: PUSH
24537: FOR_IN
24538: IFFALSE 24586
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 268
24552: PUSH
24553: LD_INT 11
24555: EQUAL
24556: PUSH
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_INT 2
24564: PPUSH
24565: CALL_OW 268
24569: PUSH
24570: LD_INT 11
24572: EQUAL
24573: OR
24574: IFFALSE 24584
// eventVar1 = 1 ;
24576: LD_ADDR_EXP 65
24580: PUSH
24581: LD_INT 1
24583: ST_TO_ADDR
24584: GO 24537
24586: POP
24587: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 255
24597: PUSH
24598: LD_INT 2
24600: EQUAL
24601: IFFALSE 24706
// begin if GetBType ( building ) = b_barracks then
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 266
24612: PUSH
24613: LD_INT 5
24615: EQUAL
24616: IFFALSE 24706
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 25
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: LD_INT 54
24648: PUSH
24649: EMPTY
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PPUSH
24661: CALL_OW 69
24665: PUSH
24666: LD_EXP 26
24670: PUSH
24671: EMPTY
24672: LIST
24673: DIFF
24674: PUSH
24675: FOR_IN
24676: IFFALSE 24694
// ComEnterUnit ( i , building ) ;
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 120
24692: GO 24675
24694: POP
24695: POP
// arArm = building ;
24696: LD_ADDR_EXP 45
24700: PUSH
24701: LD_VAR 0 1
24705: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24706: LD_VAR 0 1
24710: PPUSH
24711: CALL_OW 255
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 25192
// begin if GetBType ( building ) = b_factory then
24721: LD_VAR 0 1
24725: PPUSH
24726: CALL_OW 266
24730: PUSH
24731: LD_INT 3
24733: EQUAL
24734: IFFALSE 24801
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24736: LD_ADDR_VAR 0 2
24740: PUSH
24741: LD_INT 22
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 25
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PPUSH
24765: CALL_OW 69
24769: PUSH
24770: FOR_IN
24771: IFFALSE 24789
// ComEnterUnit ( i , building ) ;
24773: LD_VAR 0 2
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 120
24787: GO 24770
24789: POP
24790: POP
// ruFab = building ;
24791: LD_ADDR_EXP 35
24795: PUSH
24796: LD_VAR 0 1
24800: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24801: LD_INT 22
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 21
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 30
24823: PUSH
24824: LD_INT 8
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PUSH
24841: LD_INT 2
24843: EQUAL
24844: IFFALSE 25052
// begin for i = 1 to 2 do
24846: LD_ADDR_VAR 0 2
24850: PUSH
24851: DOUBLE
24852: LD_INT 1
24854: DEC
24855: ST_TO_ADDR
24856: LD_INT 2
24858: PUSH
24859: FOR_TO
24860: IFFALSE 24947
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24862: LD_INT 22
24864: PUSH
24865: LD_INT 3
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 25
24874: PUSH
24875: LD_INT 4
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PPUSH
24886: CALL_OW 69
24890: PUSH
24891: LD_VAR 0 2
24895: ARRAY
24896: PPUSH
24897: LD_INT 22
24899: PUSH
24900: LD_INT 3
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 21
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 8
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PPUSH
24932: CALL_OW 69
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PPUSH
24941: CALL_OW 120
24945: GO 24859
24947: POP
24948: POP
// for i = 3 to 4 do
24949: LD_ADDR_VAR 0 2
24953: PUSH
24954: DOUBLE
24955: LD_INT 3
24957: DEC
24958: ST_TO_ADDR
24959: LD_INT 4
24961: PUSH
24962: FOR_TO
24963: IFFALSE 25050
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24965: LD_INT 22
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 25
24977: PUSH
24978: LD_INT 4
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PPUSH
24989: CALL_OW 69
24993: PUSH
24994: LD_VAR 0 2
24998: ARRAY
24999: PPUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 21
25012: PUSH
25013: LD_INT 3
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 8
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: PUSH
25040: LD_INT 2
25042: ARRAY
25043: PPUSH
25044: CALL_OW 120
25048: GO 24962
25050: POP
25051: POP
// end ; if GetBType ( building ) = b_barracks then
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL_OW 266
25061: PUSH
25062: LD_INT 5
25064: EQUAL
25065: IFFALSE 25192
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25067: LD_ADDR_VAR 0 2
25071: PUSH
25072: LD_INT 22
25074: PUSH
25075: LD_INT 3
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 25
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: LD_INT 54
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: PPUSH
25110: CALL_OW 69
25114: PUSH
25115: FOR_IN
25116: IFFALSE 25134
// ComEnterUnit ( i , building ) ;
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: CALL_OW 120
25132: GO 25115
25134: POP
25135: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25136: LD_INT 22
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 30
25148: PUSH
25149: LD_INT 5
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PUSH
25165: LD_INT 0
25167: EQUAL
25168: IFFALSE 25182
// ruArm1 = building else
25170: LD_ADDR_EXP 33
25174: PUSH
25175: LD_VAR 0 1
25179: ST_TO_ADDR
25180: GO 25192
// ruArm2 = building ;
25182: LD_ADDR_EXP 34
25186: PUSH
25187: LD_VAR 0 1
25191: ST_TO_ADDR
// end ; end ; end ;
25192: PPOPN 2
25194: END
// on EnterBuilding ( building , human ) do var rnd ;
25195: LD_INT 0
25197: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25198: LD_VAR 0 2
25202: PPUSH
25203: CALL_OW 255
25207: PUSH
25208: LD_INT 2
25210: EQUAL
25211: PUSH
25212: LD_VAR 0 2
25216: PPUSH
25217: CALL_OW 257
25221: PUSH
25222: LD_INT 1
25224: EQUAL
25225: AND
25226: PUSH
25227: LD_VAR 0 1
25231: PUSH
25232: LD_EXP 45
25236: EQUAL
25237: AND
25238: IFFALSE 25285
// begin wait ( 0 0$1 ) ;
25240: LD_INT 35
25242: PPUSH
25243: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 1
25254: PPUSH
25255: LD_INT 100
25257: PPUSH
25258: CALL_OW 12
25262: ST_TO_ADDR
// if rnd > 50 then
25263: LD_VAR 0 3
25267: PUSH
25268: LD_INT 50
25270: GREATER
25271: IFFALSE 25285
// SetClass ( human , class_mortar ) ;
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_INT 8
25280: PPUSH
25281: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25285: LD_VAR 0 2
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 25
25302: PUSH
25303: LD_INT 12
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: IN
25319: IFFALSE 25369
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25321: LD_VAR 0 1
25325: PPUSH
25326: CALL_OW 266
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: IN
25341: IFFALSE 25357
// SetClass ( human , class_apeman_engineer ) else
25343: LD_VAR 0 2
25347: PPUSH
25348: LD_INT 16
25350: PPUSH
25351: CALL_OW 336
25355: GO 25369
// SetClass ( human , class_apeman_soldier ) ;
25357: LD_VAR 0 2
25361: PPUSH
25362: LD_INT 15
25364: PPUSH
25365: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25369: LD_VAR 0 2
25373: PPUSH
25374: CALL_OW 255
25378: PUSH
25379: LD_INT 3
25381: EQUAL
25382: PUSH
25383: LD_VAR 0 2
25387: PPUSH
25388: CALL_OW 257
25392: PUSH
25393: LD_INT 1
25395: EQUAL
25396: AND
25397: PUSH
25398: LD_VAR 0 1
25402: PUSH
25403: LD_EXP 33
25407: EQUAL
25408: PUSH
25409: LD_VAR 0 1
25413: PUSH
25414: LD_EXP 34
25418: EQUAL
25419: OR
25420: PUSH
25421: EMPTY
25422: LIST
25423: AND
25424: IFFALSE 25445
// begin wait ( 0 0$1 ) ;
25426: LD_INT 35
25428: PPUSH
25429: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25433: LD_VAR 0 2
25437: PPUSH
25438: LD_INT 9
25440: PPUSH
25441: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25445: LD_VAR 0 2
25449: PPUSH
25450: CALL_OW 255
25454: PUSH
25455: LD_INT 3
25457: EQUAL
25458: PUSH
25459: LD_VAR 0 2
25463: PPUSH
25464: CALL_OW 257
25468: PUSH
25469: LD_INT 9
25471: EQUAL
25472: AND
25473: PUSH
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL_OW 266
25483: PUSH
25484: LD_INT 32
25486: EQUAL
25487: AND
25488: IFFALSE 25509
// begin wait ( 0 0$1 ) ;
25490: LD_INT 35
25492: PPUSH
25493: CALL_OW 67
// SetClass ( human , 1 ) ;
25497: LD_VAR 0 2
25501: PPUSH
25502: LD_INT 1
25504: PPUSH
25505: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 255
25518: PUSH
25519: LD_INT 3
25521: EQUAL
25522: PUSH
25523: LD_VAR 0 2
25527: PPUSH
25528: CALL_OW 257
25532: PUSH
25533: LD_INT 3
25535: EQUAL
25536: AND
25537: PUSH
25538: LD_VAR 0 1
25542: PUSH
25543: LD_EXP 35
25547: EQUAL
25548: AND
25549: IFFALSE 25563
// SetLives ( human , 1000 ) ;
25551: LD_VAR 0 2
25555: PPUSH
25556: LD_INT 1000
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: PPOPN 3
25565: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 1
25573: EQUAL
25574: PUSH
25575: LD_VAR 0 2
25579: PUSH
25580: LD_INT 2
25582: EQUAL
25583: AND
25584: PUSH
25585: LD_INT 1
25587: PPUSH
25588: LD_INT 2
25590: PPUSH
25591: CALL_OW 81
25595: PUSH
25596: LD_INT 1
25598: EQUAL
25599: AND
25600: IFFALSE 25621
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25602: LD_EXP 24
25606: PPUSH
25607: LD_STRING D6b-Pow-1
25609: PPUSH
25610: CALL_OW 94
// YouLost ( Powell ) ;
25614: LD_STRING Powell
25616: PPUSH
25617: CALL_OW 104
// end ; end ;
25621: PPOPN 2
25623: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25624: LD_INT 23
25626: PPUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 21
25639: PUSH
25640: LD_INT 3
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 70
25655: PUSH
25656: LD_INT 23
25658: PPUSH
25659: LD_INT 22
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PPUSH
25683: CALL_OW 70
25687: OR
25688: PUSH
25689: LD_INT 1
25691: PPUSH
25692: LD_INT 2
25694: PPUSH
25695: CALL_OW 81
25699: PUSH
25700: LD_INT 1
25702: EQUAL
25703: AND
25704: IFFALSE 25837
25706: GO 25708
25708: DISABLE
// begin enable ;
25709: ENABLE
// wait ( 0 0$10 ) ;
25710: LD_INT 350
25712: PPUSH
25713: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25717: LD_INT 23
25719: PPUSH
25720: LD_INT 22
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 21
25732: PUSH
25733: LD_INT 3
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 70
25748: PUSH
25749: LD_INT 23
25751: PPUSH
25752: LD_INT 22
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PPUSH
25776: CALL_OW 70
25780: OR
25781: PUSH
25782: LD_INT 1
25784: PPUSH
25785: LD_INT 2
25787: PPUSH
25788: CALL_OW 81
25792: PUSH
25793: LD_INT 1
25795: EQUAL
25796: AND
25797: IFFALSE 25837
// begin disable ;
25799: DISABLE
// InGameOn ;
25800: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25804: LD_INT 73
25806: PPUSH
25807: LD_INT 18
25809: PPUSH
25810: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25814: LD_EXP 24
25818: PPUSH
25819: LD_STRING D6b-Pow-1
25821: PPUSH
25822: CALL_OW 94
// YouLost ( Powell ) ;
25826: LD_STRING Powell
25828: PPUSH
25829: CALL_OW 104
// InGameOff ;
25833: CALL_OW 9
// end ; end ;
25837: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25838: LD_VAR 0 1
25842: PUSH
25843: LD_EXP 1
25847: EQUAL
25848: IFFALSE 25857
// YouLost ( JMM ) ;
25850: LD_STRING JMM
25852: PPUSH
25853: CALL_OW 104
// if unit = Khatam then
25857: LD_VAR 0 1
25861: PUSH
25862: LD_EXP 14
25866: EQUAL
25867: IFFALSE 25877
// KhatamStatus = 0 ;
25869: LD_ADDR_EXP 53
25873: PUSH
25874: LD_INT 0
25876: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 255
25886: PUSH
25887: LD_INT 3
25889: EQUAL
25890: PUSH
25891: LD_VAR 0 1
25895: PPUSH
25896: CALL_OW 247
25900: PUSH
25901: LD_INT 3
25903: EQUAL
25904: AND
25905: IFFALSE 26597
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 266
25916: PUSH
25917: LD_INT 31
25919: EQUAL
25920: PUSH
25921: LD_VAR 0 1
25925: PPUSH
25926: CALL_OW 266
25930: PUSH
25931: LD_INT 32
25933: EQUAL
25934: OR
25935: PUSH
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 266
25945: PUSH
25946: LD_INT 36
25948: EQUAL
25949: OR
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 266
25960: PUSH
25961: LD_INT 0
25963: EQUAL
25964: OR
25965: PUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 266
25975: PUSH
25976: LD_INT 24
25978: EQUAL
25979: OR
25980: PUSH
25981: LD_VAR 0 1
25985: PPUSH
25986: CALL_OW 266
25990: PUSH
25991: LD_INT 17
25993: EQUAL
25994: OR
25995: PUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 266
26005: PUSH
26006: LD_INT 25
26008: EQUAL
26009: OR
26010: PUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 266
26020: PUSH
26021: LD_INT 19
26023: EQUAL
26024: OR
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 266
26035: PUSH
26036: LD_INT 20
26038: EQUAL
26039: OR
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 266
26050: PUSH
26051: LD_INT 18
26053: EQUAL
26054: OR
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 266
26065: PUSH
26066: LD_INT 21
26068: EQUAL
26069: OR
26070: PUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL_OW 266
26080: PUSH
26081: LD_INT 23
26083: EQUAL
26084: OR
26085: PUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 266
26095: PUSH
26096: LD_INT 16
26098: EQUAL
26099: OR
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 266
26110: PUSH
26111: LD_INT 6
26113: EQUAL
26114: OR
26115: PUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 266
26125: PUSH
26126: LD_INT 29
26128: EQUAL
26129: OR
26130: PUSH
26131: LD_VAR 0 1
26135: PPUSH
26136: CALL_OW 266
26140: PUSH
26141: LD_INT 26
26143: EQUAL
26144: OR
26145: PUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 266
26155: PUSH
26156: LD_INT 30
26158: EQUAL
26159: OR
26160: PUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 266
26170: PUSH
26171: LD_INT 28
26173: EQUAL
26174: OR
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 266
26185: PUSH
26186: LD_INT 27
26188: EQUAL
26189: OR
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 266
26200: PUSH
26201: LD_INT 33
26203: EQUAL
26204: OR
26205: PUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 266
26215: PUSH
26216: LD_INT 2
26218: EQUAL
26219: OR
26220: PUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 266
26230: PUSH
26231: LD_INT 4
26233: EQUAL
26234: OR
26235: IFFALSE 26321
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26237: LD_ADDR_EXP 42
26241: PUSH
26242: LD_EXP 42
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 266
26256: ADD
26257: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26258: LD_ADDR_EXP 42
26262: PUSH
26263: LD_EXP 42
26267: PUSH
26268: LD_VAR 0 1
26272: PPUSH
26273: CALL_OW 250
26277: ADD
26278: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26279: LD_ADDR_EXP 42
26283: PUSH
26284: LD_EXP 42
26288: PUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 251
26298: ADD
26299: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26300: LD_ADDR_EXP 42
26304: PUSH
26305: LD_EXP 42
26309: PUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 254
26319: ADD
26320: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 266
26330: PUSH
26331: LD_INT 1
26333: EQUAL
26334: IFFALSE 26413
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26336: LD_ADDR_EXP 42
26340: PUSH
26341: LD_EXP 42
26345: PUSH
26346: LD_INT 0
26348: ADD
26349: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26350: LD_ADDR_EXP 42
26354: PUSH
26355: LD_EXP 42
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 250
26369: ADD
26370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26371: LD_ADDR_EXP 42
26375: PUSH
26376: LD_EXP 42
26380: PUSH
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL_OW 251
26390: ADD
26391: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26392: LD_ADDR_EXP 42
26396: PUSH
26397: LD_EXP 42
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 254
26411: ADD
26412: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 266
26422: PUSH
26423: LD_INT 3
26425: EQUAL
26426: IFFALSE 26505
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26428: LD_ADDR_EXP 42
26432: PUSH
26433: LD_EXP 42
26437: PUSH
26438: LD_INT 2
26440: ADD
26441: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26442: LD_ADDR_EXP 42
26446: PUSH
26447: LD_EXP 42
26451: PUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 250
26461: ADD
26462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26463: LD_ADDR_EXP 42
26467: PUSH
26468: LD_EXP 42
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 251
26482: ADD
26483: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26484: LD_ADDR_EXP 42
26488: PUSH
26489: LD_EXP 42
26493: PUSH
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 254
26503: ADD
26504: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 5
26517: EQUAL
26518: IFFALSE 26597
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26520: LD_ADDR_EXP 42
26524: PUSH
26525: LD_EXP 42
26529: PUSH
26530: LD_INT 4
26532: ADD
26533: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26534: LD_ADDR_EXP 42
26538: PUSH
26539: LD_EXP 42
26543: PUSH
26544: LD_VAR 0 1
26548: PPUSH
26549: CALL_OW 250
26553: ADD
26554: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26555: LD_ADDR_EXP 42
26559: PUSH
26560: LD_EXP 42
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 251
26574: ADD
26575: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26576: LD_ADDR_EXP 42
26580: PUSH
26581: LD_EXP 42
26585: PUSH
26586: LD_VAR 0 1
26590: PPUSH
26591: CALL_OW 254
26595: ADD
26596: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26597: LD_EXP 51
26601: PUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 257
26611: PUSH
26612: LD_INT 3
26614: EQUAL
26615: AND
26616: PUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL_OW 255
26626: PUSH
26627: LD_INT 3
26629: EQUAL
26630: AND
26631: PUSH
26632: LD_EXP 35
26636: PPUSH
26637: CALL_OW 302
26641: AND
26642: PUSH
26643: LD_EXP 35
26647: PPUSH
26648: CALL_OW 255
26652: PUSH
26653: LD_INT 3
26655: EQUAL
26656: AND
26657: IFFALSE 26741
// begin ruMech := ruMech - 1 ;
26659: LD_ADDR_EXP 51
26663: PUSH
26664: LD_EXP 51
26668: PUSH
26669: LD_INT 1
26671: MINUS
26672: ST_TO_ADDR
// uc_side = 3 ;
26673: LD_ADDR_OWVAR 20
26677: PUSH
26678: LD_INT 3
26680: ST_TO_ADDR
// uc_nation = 3 ;
26681: LD_ADDR_OWVAR 21
26685: PUSH
26686: LD_INT 3
26688: ST_TO_ADDR
// hc_gallery :=  ;
26689: LD_ADDR_OWVAR 33
26693: PUSH
26694: LD_STRING 
26696: ST_TO_ADDR
// hc_name :=  ;
26697: LD_ADDR_OWVAR 26
26701: PUSH
26702: LD_STRING 
26704: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26705: LD_INT 0
26707: PPUSH
26708: LD_EXP 36
26712: PPUSH
26713: LD_EXP 37
26717: PPUSH
26718: CALL_OW 12
26722: PPUSH
26723: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26727: CALL_OW 44
26731: PPUSH
26732: LD_EXP 35
26736: PPUSH
26737: CALL_OW 52
// end ; end ;
26741: PPOPN 1
26743: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26744: LD_ADDR_OWVAR 57
26748: PUSH
26749: LD_INT 0
26751: ST_TO_ADDR
// fastEnd = 1 ;
26752: LD_ADDR_EXP 63
26756: PUSH
26757: LD_INT 1
26759: ST_TO_ADDR
// FinishMission ;
26760: CALL 27928 0 0
// end ;
26764: PPOPN 1
26766: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL 44254 0 1
// end ; end_of_file
26776: PPOPN 1
26778: END
// export function CreateNature ; var i , un ; begin
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26784: LD_ADDR_VAR 0 2
26788: PUSH
26789: DOUBLE
26790: LD_INT 1
26792: DEC
26793: ST_TO_ADDR
26794: LD_OWVAR 67
26798: PUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 5
26804: PPUSH
26805: CALL_OW 12
26809: PLUS
26810: PUSH
26811: FOR_TO
26812: IFFALSE 26957
// begin hc_sex = sex_male ;
26814: LD_ADDR_OWVAR 27
26818: PUSH
26819: LD_INT 1
26821: ST_TO_ADDR
// uc_side = 0 ;
26822: LD_ADDR_OWVAR 20
26826: PUSH
26827: LD_INT 0
26829: ST_TO_ADDR
// uc_nation = nation_nature ;
26830: LD_ADDR_OWVAR 21
26834: PUSH
26835: LD_INT 0
26837: ST_TO_ADDR
// hc_class = class_apeman ;
26838: LD_ADDR_OWVAR 28
26842: PUSH
26843: LD_INT 12
26845: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26846: LD_ADDR_OWVAR 31
26850: PUSH
26851: LD_INT 2
26853: PPUSH
26854: LD_INT 7
26856: PPUSH
26857: CALL_OW 12
26861: PUSH
26862: LD_OWVAR 67
26866: PLUS
26867: PUSH
26868: LD_INT 2
26870: PPUSH
26871: LD_INT 10
26873: PPUSH
26874: CALL_OW 12
26878: PUSH
26879: LD_INT 2
26881: PPUSH
26882: LD_INT 10
26884: PPUSH
26885: CALL_OW 12
26889: PUSH
26890: LD_INT 2
26892: PPUSH
26893: LD_INT 10
26895: PPUSH
26896: CALL_OW 12
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26907: LD_ADDR_OWVAR 35
26911: PUSH
26912: LD_INT 5
26914: NEG
26915: PPUSH
26916: LD_INT 5
26918: PPUSH
26919: CALL_OW 12
26923: PUSH
26924: LD_OWVAR 67
26928: MUL
26929: ST_TO_ADDR
// un = CreateHuman ;
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: CALL_OW 44
26939: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26940: LD_VAR 0 3
26944: PPUSH
26945: LD_INT 5
26947: PPUSH
26948: LD_INT 0
26950: PPUSH
26951: CALL_OW 49
// end ;
26955: GO 26811
26957: POP
26958: POP
// for i = 1 to Difficulty + 2 do
26959: LD_ADDR_VAR 0 2
26963: PUSH
26964: DOUBLE
26965: LD_INT 1
26967: DEC
26968: ST_TO_ADDR
26969: LD_OWVAR 67
26973: PUSH
26974: LD_INT 2
26976: PLUS
26977: PUSH
26978: FOR_TO
26979: IFFALSE 27088
// begin hc_sex = sex_male ;
26981: LD_ADDR_OWVAR 27
26985: PUSH
26986: LD_INT 1
26988: ST_TO_ADDR
// uc_side = 0 ;
26989: LD_ADDR_OWVAR 20
26993: PUSH
26994: LD_INT 0
26996: ST_TO_ADDR
// uc_nation = nation_nature ;
26997: LD_ADDR_OWVAR 21
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// hc_class = class_tiger ;
27005: LD_ADDR_OWVAR 28
27009: PUSH
27010: LD_INT 14
27012: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27013: LD_ADDR_OWVAR 31
27017: PUSH
27018: LD_EXP 37
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27038: LD_ADDR_OWVAR 35
27042: PUSH
27043: LD_INT 5
27045: NEG
27046: PPUSH
27047: LD_INT 5
27049: PPUSH
27050: CALL_OW 12
27054: PUSH
27055: LD_OWVAR 67
27059: MUL
27060: ST_TO_ADDR
// un = CreateHuman ;
27061: LD_ADDR_VAR 0 3
27065: PUSH
27066: CALL_OW 44
27070: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27071: LD_VAR 0 3
27075: PPUSH
27076: LD_INT 6
27078: PPUSH
27079: LD_INT 0
27081: PPUSH
27082: CALL_OW 49
// end ;
27086: GO 26978
27088: POP
27089: POP
// for i = 1 to rand ( 3 , 4 ) do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_INT 3
27102: PPUSH
27103: LD_INT 4
27105: PPUSH
27106: CALL_OW 12
27110: PUSH
27111: FOR_TO
27112: IFFALSE 27206
// begin hc_sex = sex_male ;
27114: LD_ADDR_OWVAR 27
27118: PUSH
27119: LD_INT 1
27121: ST_TO_ADDR
// uc_side = 0 ;
27122: LD_ADDR_OWVAR 20
27126: PUSH
27127: LD_INT 0
27129: ST_TO_ADDR
// uc_nation = nation_nature ;
27130: LD_ADDR_OWVAR 21
27134: PUSH
27135: LD_INT 0
27137: ST_TO_ADDR
// hc_class = 18 ;
27138: LD_ADDR_OWVAR 28
27142: PUSH
27143: LD_INT 18
27145: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27146: LD_ADDR_OWVAR 31
27150: PUSH
27151: LD_EXP 37
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
// hc_agressivity = 0 ;
27171: LD_ADDR_OWVAR 35
27175: PUSH
27176: LD_INT 0
27178: ST_TO_ADDR
// un = CreateHuman ;
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: CALL_OW 44
27188: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27189: LD_VAR 0 3
27193: PPUSH
27194: LD_INT 6
27196: PPUSH
27197: LD_INT 0
27199: PPUSH
27200: CALL_OW 49
// end ;
27204: GO 27111
27206: POP
27207: POP
// end ; end_of_file
27208: LD_VAR 0 1
27212: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27213: LD_EXP 46
27217: PUSH
27218: LD_INT 1
27220: EQUAL
27221: IFFALSE 27309
27223: GO 27225
27225: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27226: LD_INT 7
27228: PPUSH
27229: LD_INT 5
27231: PPUSH
27232: LD_INT 4
27234: PUSH
27235: LD_INT 5
27237: PUSH
27238: LD_INT 6
27240: PUSH
27241: LD_INT 6
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: PUSH
27250: LD_OWVAR 67
27254: ARRAY
27255: PPUSH
27256: LD_EXP 36
27260: PPUSH
27261: LD_EXP 37
27265: PPUSH
27266: CALL_OW 12
27270: PPUSH
27271: LD_INT 2
27273: PPUSH
27274: LD_INT 1
27276: PPUSH
27277: LD_INT 1
27279: PPUSH
27280: EMPTY
27281: PPUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 26
27287: PUSH
27288: LD_INT 27
27290: PUSH
27291: LD_INT 28
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: EMPTY
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: CALL 17224 0 11
27309: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27310: LD_EXP 46
27314: PUSH
27315: LD_INT 1
27317: EQUAL
27318: IFFALSE 27410
27320: GO 27322
27322: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27323: LD_INT 5
27325: PPUSH
27326: LD_INT 2
27328: PPUSH
27329: LD_INT 5
27331: PUSH
27332: LD_INT 6
27334: PUSH
27335: LD_INT 8
27337: PUSH
27338: LD_INT 9
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: PUSH
27347: LD_OWVAR 67
27351: ARRAY
27352: PPUSH
27353: LD_INT 0
27355: PPUSH
27356: LD_INT 0
27358: PPUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 4
27364: PUSH
27365: LD_INT 5
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: PUSH
27373: LD_OWVAR 67
27377: ARRAY
27378: PPUSH
27379: LD_INT 0
27381: PPUSH
27382: LD_EXP 36
27386: PPUSH
27387: LD_EXP 37
27391: PPUSH
27392: CALL_OW 12
27396: PPUSH
27397: LD_INT 7
27399: PPUSH
27400: LD_INT 9
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL 18928 0 11
27410: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27411: LD_EXP 46
27415: PUSH
27416: LD_INT 1
27418: EQUAL
27419: IFFALSE 27428
27421: GO 27423
27423: DISABLE
// PrepareArabianSheik ;
27424: CALL 4713 0 0
27428: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27429: LD_EXP 29
27433: PUSH
27434: LD_EXP 64
27438: PUSH
27439: LD_INT 1
27441: EQUAL
27442: AND
27443: IFFALSE 27512
27445: GO 27447
27447: DISABLE
// begin enable ;
27448: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27449: LD_INT 6
27451: PPUSH
27452: LD_INT 3
27454: PPUSH
27455: LD_EXP 60
27459: PPUSH
27460: LD_INT 0
27462: PPUSH
27463: LD_OWVAR 67
27467: PPUSH
27468: LD_INT 0
27470: PPUSH
27471: LD_EXP 60
27475: PUSH
27476: LD_INT 3
27478: DIV
27479: PUSH
27480: LD_INT 1
27482: PLUS
27483: PPUSH
27484: LD_EXP 36
27488: PPUSH
27489: LD_EXP 37
27493: PPUSH
27494: CALL_OW 12
27498: PPUSH
27499: LD_INT 17
27501: PPUSH
27502: LD_INT 18
27504: PPUSH
27505: LD_INT 1
27507: PPUSH
27508: CALL 18928 0 11
// end ;
27512: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27513: LD_EXP 29
27517: PUSH
27518: LD_EXP 64
27522: PUSH
27523: LD_INT 1
27525: EQUAL
27526: AND
27527: IFFALSE 27604
27529: GO 27531
27531: DISABLE
// begin enable ;
27532: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27533: LD_INT 17
27535: PPUSH
27536: LD_INT 6
27538: PPUSH
27539: LD_EXP 59
27543: PPUSH
27544: LD_EXP 36
27548: PPUSH
27549: LD_EXP 37
27553: PPUSH
27554: CALL_OW 12
27558: PPUSH
27559: LD_INT 3
27561: PPUSH
27562: LD_INT 1
27564: PPUSH
27565: LD_INT 3
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: LD_INT 43
27577: PUSH
27578: LD_INT 44
27580: PUSH
27581: LD_INT 45
27583: PUSH
27584: LD_INT 46
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: PPUSH
27593: EMPTY
27594: PPUSH
27595: EMPTY
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL 17224 0 11
// end ;
27604: END
// every 10 10$00 trigger joinEpsilon do
27605: LD_EXP 29
27609: IFFALSE 27663
27611: GO 27613
27613: DISABLE
// begin enable ;
27614: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27615: LD_ADDR_EXP 59
27619: PUSH
27620: LD_EXP 59
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_OWVAR 67
27632: PPUSH
27633: CALL_OW 12
27637: PLUS
27638: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27639: LD_ADDR_EXP 60
27643: PUSH
27644: LD_EXP 60
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_OWVAR 67
27656: PPUSH
27657: CALL_OW 12
27661: PLUS
27662: ST_TO_ADDR
// end ;
27663: END
// every 21 21$0 trigger attackAvalaible = 1 do
27664: LD_EXP 64
27668: PUSH
27669: LD_INT 1
27671: EQUAL
27672: IFFALSE 27685
27674: GO 27676
27676: DISABLE
// attackAvalaible = 0 ; end_of_file
27677: LD_ADDR_EXP 64
27681: PUSH
27682: LD_INT 0
27684: ST_TO_ADDR
27685: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27686: LD_INT 54
27688: PPUSH
27689: LD_INT 1
27691: PPUSH
27692: CALL_OW 321
27696: PUSH
27697: LD_INT 2
27699: EQUAL
27700: PUSH
27701: LD_INT 55
27703: PPUSH
27704: LD_INT 1
27706: PPUSH
27707: CALL_OW 321
27711: PUSH
27712: LD_INT 2
27714: EQUAL
27715: AND
27716: PUSH
27717: LD_INT 21
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 321
27727: PUSH
27728: LD_INT 2
27730: EQUAL
27731: AND
27732: PUSH
27733: LD_INT 22
27735: PPUSH
27736: LD_INT 1
27738: PPUSH
27739: CALL_OW 321
27743: PUSH
27744: LD_INT 2
27746: EQUAL
27747: AND
27748: PUSH
27749: LD_INT 12
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 321
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: PUSH
27764: LD_INT 32
27766: PPUSH
27767: LD_INT 1
27769: PPUSH
27770: CALL_OW 321
27774: PUSH
27775: LD_INT 1
27777: EQUAL
27778: OR
27779: PUSH
27780: EMPTY
27781: LIST
27782: AND
27783: PUSH
27784: LD_EXP 48
27788: PUSH
27789: LD_INT 1
27791: EQUAL
27792: AND
27793: PUSH
27794: LD_INT 22
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 21
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 69
27822: PUSH
27823: LD_INT 0
27825: EQUAL
27826: AND
27827: IFFALSE 27883
27829: GO 27831
27831: DISABLE
// begin case query ( QEndMission ) of 1 :
27832: LD_STRING QEndMission
27834: PPUSH
27835: CALL_OW 97
27839: PUSH
27840: LD_INT 1
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27859
27848: POP
// begin end_the_mission_allowed = true ;
27849: LD_ADDR_OWVAR 57
27853: PUSH
27854: LD_INT 1
27856: ST_TO_ADDR
// end ; 2 :
27857: GO 27883
27859: LD_INT 2
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27882
27867: POP
// begin fastEnd = 1 ;
27868: LD_ADDR_EXP 63
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// FinishMission ;
27876: CALL 27928 0 0
// end ; end ;
27880: GO 27883
27882: POP
// end ;
27883: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27884: LD_EXP 58
27888: PUSH
27889: LD_EXP 57
27893: NOT
27894: AND
27895: PUSH
27896: LD_INT 22
27898: PUSH
27899: LD_INT 3
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PPUSH
27906: CALL_OW 69
27910: PUSH
27911: LD_INT 0
27913: EQUAL
27914: AND
27915: IFFALSE 27927
27917: GO 27919
27919: DISABLE
// SetAchievement ( ACH_TACT ) ;
27920: LD_STRING ACH_TACT
27922: PPUSH
27923: CALL_OW 543
27927: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
// if not snipersTrained then
27934: LD_EXP 62
27938: NOT
27939: IFFALSE 27948
// SetAchievement ( ACH_SNIPER ) ;
27941: LD_STRING ACH_SNIPER
27943: PPUSH
27944: CALL_OW 543
// m1 := false ;
27948: LD_ADDR_VAR 0 2
27952: PUSH
27953: LD_INT 0
27955: ST_TO_ADDR
// m2 := false ;
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_INT 0
27963: ST_TO_ADDR
// m3 := false ;
27964: LD_ADDR_VAR 0 4
27968: PUSH
27969: LD_INT 0
27971: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27972: LD_EXP 53
27976: PPUSH
27977: LD_STRING 10_KhatamStatus_1
27979: PPUSH
27980: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27984: LD_EXP 52
27988: PPUSH
27989: LD_STRING 10_GensherEscape_1
27991: PPUSH
27992: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27996: LD_INT 12
27998: PPUSH
27999: LD_INT 1
28001: PPUSH
28002: CALL_OW 321
28006: PUSH
28007: LD_INT 2
28009: EQUAL
28010: IFFALSE 28032
// begin AddMedal ( sights , 1 ) ;
28012: LD_STRING sights
28014: PPUSH
28015: LD_INT 1
28017: PPUSH
28018: CALL_OW 101
// m1 := true ;
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 1
28029: ST_TO_ADDR
// end else
28030: GO 28043
// begin AddMedal ( sights , - 1 ) ;
28032: LD_STRING sights
28034: PPUSH
28035: LD_INT 1
28037: NEG
28038: PPUSH
28039: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28043: LD_INT 32
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 321
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: IFFALSE 28079
// begin AddMedal ( computers , 1 ) ;
28059: LD_STRING computers
28061: PPUSH
28062: LD_INT 1
28064: PPUSH
28065: CALL_OW 101
// m2 := true ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 1
28076: ST_TO_ADDR
// end else
28077: GO 28090
// begin AddMedal ( computers , - 1 ) ;
28079: LD_STRING computers
28081: PPUSH
28082: LD_INT 1
28084: NEG
28085: PPUSH
28086: CALL_OW 101
// end ; if arabianEscape = 0 then
28090: LD_EXP 47
28094: PUSH
28095: LD_INT 0
28097: EQUAL
28098: IFFALSE 28130
// begin AddMedal ( renegades , 2 ) ;
28100: LD_STRING renegades
28102: PPUSH
28103: LD_INT 2
28105: PPUSH
28106: CALL_OW 101
// m3 := true ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 1
28117: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28118: LD_INT 0
28120: PPUSH
28121: LD_STRING 10_ScientistsEscape_1
28123: PPUSH
28124: CALL_OW 39
// end else
28128: GO 28141
// begin AddMedal ( renegades , - 1 ) ;
28130: LD_STRING renegades
28132: PPUSH
28133: LD_INT 1
28135: NEG
28136: PPUSH
28137: CALL_OW 101
// end ; SaveEpsilonBase ;
28141: CALL 28927 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28145: LD_VAR 0 2
28149: PUSH
28150: LD_VAR 0 3
28154: AND
28155: PUSH
28156: LD_VAR 0 4
28160: AND
28161: PUSH
28162: LD_OWVAR 67
28166: PUSH
28167: LD_INT 3
28169: GREATEREQUAL
28170: AND
28171: IFFALSE 28183
// SetAchievementEX ( ACH_AMER , 10 ) ;
28173: LD_STRING ACH_AMER
28175: PPUSH
28176: LD_INT 10
28178: PPUSH
28179: CALL_OW 564
// if tick <= 40 40$00 then
28183: LD_OWVAR 1
28187: PUSH
28188: LD_INT 84000
28190: LESSEQUAL
28191: IFFALSE 28207
// begin wait ( 3 ) ;
28193: LD_INT 3
28195: PPUSH
28196: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28200: LD_STRING ACH_ASPEED_10
28202: PPUSH
28203: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28207: LD_STRING Main
28209: PPUSH
28210: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28214: LD_INT 22
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 23
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 25
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 25
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 25
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 25
28279: PUSH
28280: LD_INT 4
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 25
28289: PUSH
28290: LD_INT 5
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 25
28299: PUSH
28300: LD_INT 8
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: PPUSH
28322: CALL_OW 69
28326: PPUSH
28327: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28331: LD_EXP 1
28335: PPUSH
28336: LD_EXP 54
28340: PUSH
28341: LD_STRING JMM
28343: STR
28344: PPUSH
28345: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28349: LD_EXP 2
28353: PPUSH
28354: LD_EXP 54
28358: PUSH
28359: LD_STRING Brown
28361: STR
28362: PPUSH
28363: CALL 11408 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28367: LD_EXP 3
28371: PPUSH
28372: LD_EXP 54
28376: PUSH
28377: LD_STRING Donaldson
28379: STR
28380: PPUSH
28381: CALL 11408 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28385: LD_EXP 4
28389: PPUSH
28390: LD_EXP 54
28394: PUSH
28395: LD_STRING Bobby
28397: STR
28398: PPUSH
28399: CALL 11408 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28403: LD_EXP 5
28407: PPUSH
28408: LD_EXP 54
28412: PUSH
28413: LD_STRING Cyrus
28415: STR
28416: PPUSH
28417: CALL 11408 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28421: LD_EXP 6
28425: PPUSH
28426: LD_EXP 54
28430: PUSH
28431: LD_STRING Lisa
28433: STR
28434: PPUSH
28435: CALL 11408 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28439: LD_EXP 7
28443: PPUSH
28444: LD_EXP 54
28448: PUSH
28449: LD_STRING Frank
28451: STR
28452: PPUSH
28453: CALL 11408 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28457: LD_EXP 8
28461: PPUSH
28462: LD_EXP 54
28466: PUSH
28467: LD_STRING Kikuchi
28469: STR
28470: PPUSH
28471: CALL 11408 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28475: LD_EXP 9
28479: PPUSH
28480: LD_EXP 54
28484: PUSH
28485: LD_STRING Houten
28487: STR
28488: PPUSH
28489: CALL 11408 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28493: LD_EXP 10
28497: PPUSH
28498: LD_EXP 54
28502: PUSH
28503: LD_STRING Gary
28505: STR
28506: PPUSH
28507: CALL 11408 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28511: LD_EXP 19
28515: PPUSH
28516: LD_EXP 54
28520: PUSH
28521: LD_STRING Cornell
28523: STR
28524: PPUSH
28525: CALL 11408 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28529: LD_EXP 11
28533: PPUSH
28534: LD_EXP 54
28538: PUSH
28539: LD_STRING Simms
28541: STR
28542: PPUSH
28543: CALL 11408 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28547: LD_EXP 12
28551: PPUSH
28552: LD_EXP 54
28556: PUSH
28557: LD_STRING Denis
28559: STR
28560: PPUSH
28561: CALL 11408 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28565: LD_EXP 13
28569: PPUSH
28570: LD_EXP 54
28574: PUSH
28575: LD_STRING Joan
28577: STR
28578: PPUSH
28579: CALL 11408 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28583: LD_EXP 15
28587: PPUSH
28588: LD_EXP 54
28592: PUSH
28593: LD_STRING Gladstone
28595: STR
28596: PPUSH
28597: CALL 11408 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28601: LD_EXP 17
28605: PPUSH
28606: LD_EXP 54
28610: PUSH
28611: LD_STRING DeltaDoctor
28613: STR
28614: PPUSH
28615: CALL 11408 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28619: LD_EXP 22
28623: PPUSH
28624: LD_STRING 10c_lock
28626: PPUSH
28627: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28631: LD_INT 50
28633: PUSH
28634: EMPTY
28635: LIST
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 21
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 25
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 25
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 25
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 25
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 25
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 25
28712: PUSH
28713: LD_INT 8
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: PPUSH
28735: CALL_OW 69
28739: PUSH
28740: LD_EXP 1
28744: PUSH
28745: LD_EXP 2
28749: PUSH
28750: LD_EXP 3
28754: PUSH
28755: LD_EXP 4
28759: PUSH
28760: LD_EXP 5
28764: PUSH
28765: LD_EXP 6
28769: PUSH
28770: LD_EXP 7
28774: PUSH
28775: LD_EXP 15
28779: PUSH
28780: LD_EXP 8
28784: PUSH
28785: LD_EXP 12
28789: PUSH
28790: LD_EXP 13
28794: PUSH
28795: LD_EXP 9
28799: PUSH
28800: LD_EXP 11
28804: PUSH
28805: LD_EXP 10
28809: PUSH
28810: LD_EXP 17
28814: PUSH
28815: LD_EXP 19
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: DIFF
28838: PPUSH
28839: LD_STRING 10_other_survivors
28841: PPUSH
28842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28846: LD_INT 50
28848: PUSH
28849: EMPTY
28850: LIST
28851: PUSH
28852: LD_INT 22
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 21
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 25
28877: PUSH
28878: LD_INT 16
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 25
28887: PUSH
28888: LD_INT 12
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PPUSH
28911: LD_STRING 10_ape
28913: PPUSH
28914: CALL_OW 38
// YouWin ;
28918: CALL_OW 103
// end ;
28922: LD_VAR 0 1
28926: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28927: LD_INT 0
28929: PPUSH
28930: PPUSH
28931: PPUSH
28932: PPUSH
// epsilonBase = [ ] ;
28933: LD_ADDR_VAR 0 2
28937: PUSH
28938: EMPTY
28939: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28940: LD_ADDR_VAR 0 3
28944: PUSH
28945: LD_INT 22
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 21
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 50
28967: PUSH
28968: EMPTY
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 69
28980: ST_TO_ADDR
// for i in buildings do
28981: LD_ADDR_VAR 0 4
28985: PUSH
28986: LD_VAR 0 3
28990: PUSH
28991: FOR_IN
28992: IFFALSE 29444
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 266
29003: PUSH
29004: LD_INT 6
29006: PUSH
29007: LD_INT 7
29009: PUSH
29010: LD_INT 8
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: IN
29018: IFFALSE 29132
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_VAR 0 4
29034: PPUSH
29035: CALL_OW 266
29039: PUSH
29040: LD_VAR 0 4
29044: PPUSH
29045: CALL_OW 250
29049: PUSH
29050: LD_VAR 0 4
29054: PPUSH
29055: CALL_OW 251
29059: PUSH
29060: LD_VAR 0 4
29064: PPUSH
29065: CALL_OW 254
29069: PUSH
29070: LD_VAR 0 4
29074: PPUSH
29075: CALL_OW 267
29079: PUSH
29080: LD_VAR 0 4
29084: PPUSH
29085: CALL_OW 248
29089: PUSH
29090: LD_VAR 0 4
29094: PPUSH
29095: LD_INT 1
29097: PPUSH
29098: CALL_OW 268
29102: PUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: LD_INT 2
29110: PPUSH
29111: CALL_OW 268
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: ADD
29129: ST_TO_ADDR
29130: GO 29442
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29132: LD_VAR 0 4
29136: PPUSH
29137: CALL_OW 266
29141: PUSH
29142: LD_INT 32
29144: EQUAL
29145: PUSH
29146: LD_VAR 0 4
29150: PPUSH
29151: CALL_OW 266
29155: PUSH
29156: LD_INT 33
29158: EQUAL
29159: OR
29160: IFFALSE 29257
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29162: LD_ADDR_VAR 0 2
29166: PUSH
29167: LD_VAR 0 2
29171: PUSH
29172: LD_VAR 0 4
29176: PPUSH
29177: CALL_OW 266
29181: PUSH
29182: LD_VAR 0 4
29186: PPUSH
29187: CALL_OW 250
29191: PUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 251
29201: PUSH
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 254
29211: PUSH
29212: LD_VAR 0 4
29216: PPUSH
29217: CALL_OW 267
29221: PUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: CALL_OW 248
29231: PUSH
29232: LD_VAR 0 4
29236: PPUSH
29237: CALL_OW 269
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: ADD
29254: ST_TO_ADDR
29255: GO 29442
// if GetBType ( i ) = b_factory then
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 266
29266: PUSH
29267: LD_INT 3
29269: EQUAL
29270: IFFALSE 29360
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29272: LD_ADDR_VAR 0 2
29276: PUSH
29277: LD_VAR 0 2
29281: PPUSH
29282: LD_INT 1
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: CALL_OW 266
29294: PUSH
29295: LD_VAR 0 4
29299: PPUSH
29300: CALL_OW 250
29304: PUSH
29305: LD_VAR 0 4
29309: PPUSH
29310: CALL_OW 251
29314: PUSH
29315: LD_VAR 0 4
29319: PPUSH
29320: CALL_OW 254
29324: PUSH
29325: LD_VAR 0 4
29329: PPUSH
29330: CALL_OW 267
29334: PUSH
29335: LD_VAR 0 4
29339: PPUSH
29340: CALL_OW 248
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 2
29357: ST_TO_ADDR
29358: GO 29442
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29360: LD_ADDR_VAR 0 2
29364: PUSH
29365: LD_VAR 0 2
29369: PUSH
29370: LD_VAR 0 4
29374: PPUSH
29375: CALL_OW 266
29379: PUSH
29380: LD_VAR 0 4
29384: PPUSH
29385: CALL_OW 250
29389: PUSH
29390: LD_VAR 0 4
29394: PPUSH
29395: CALL_OW 251
29399: PUSH
29400: LD_VAR 0 4
29404: PPUSH
29405: CALL_OW 254
29409: PUSH
29410: LD_VAR 0 4
29414: PPUSH
29415: CALL_OW 267
29419: PUSH
29420: LD_VAR 0 4
29424: PPUSH
29425: CALL_OW 248
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: ADD
29441: ST_TO_ADDR
// end ;
29442: GO 28991
29444: POP
29445: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_STRING 10_EpsilonBase
29453: PPUSH
29454: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29458: LD_INT 19
29460: PPUSH
29461: LD_STRING 10_EpsilonEnv
29463: PPUSH
29464: CALL 29473 0 2
// end ;
29468: LD_VAR 0 1
29472: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29473: LD_INT 0
29475: PPUSH
// result := ListEnvironmentArea ( area ) ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 353
29490: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29491: LD_VAR 0 3
29495: PPUSH
29496: LD_VAR 0 2
29500: PPUSH
29501: CALL_OW 39
// end ; end_of_file
29505: LD_VAR 0 3
29509: RET
// every 0 0$01 do var timer ;
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
// begin timer := 0 0$20 ;
29516: LD_ADDR_VAR 0 1
29520: PUSH
29521: LD_INT 700
29523: ST_TO_ADDR
// repeat wait ( timer ) ;
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29533: LD_EXP 56
29537: PUSH
29538: LD_INT 6
29540: GREATEREQUAL
29541: PUSH
29542: LD_EXP 56
29546: PUSH
29547: LD_INT 14
29549: LESS
29550: AND
29551: IFFALSE 29567
// timer := timer + 0 0$3 ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 1
29562: PUSH
29563: LD_INT 105
29565: PLUS
29566: ST_TO_ADDR
// if cratesSpawned >= 14 then
29567: LD_EXP 56
29571: PUSH
29572: LD_INT 14
29574: GREATEREQUAL
29575: IFFALSE 29591
// timer := timer + 0 0$6 ;
29577: LD_ADDR_VAR 0 1
29581: PUSH
29582: LD_VAR 0 1
29586: PUSH
29587: LD_INT 210
29589: PLUS
29590: ST_TO_ADDR
// if timer > 2 2$00 then
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 4200
29598: GREATER
29599: IFFALSE 29609
// timer := 0 0$45 ;
29601: LD_ADDR_VAR 0 1
29605: PUSH
29606: LD_INT 1575
29608: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29609: LD_INT 1
29611: PPUSH
29612: LD_INT 5
29614: PPUSH
29615: CALL_OW 12
29619: PPUSH
29620: LD_INT 16
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29630: LD_ADDR_EXP 56
29634: PUSH
29635: LD_EXP 56
29639: PUSH
29640: LD_INT 1
29642: PLUS
29643: ST_TO_ADDR
// until false ;
29644: LD_INT 0
29646: IFFALSE 29524
// end ; end_of_file
29648: PPOPN 1
29650: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29651: LD_INT 0
29653: PPUSH
// ar_miner := 81 ;
29654: LD_ADDR_EXP 76
29658: PUSH
29659: LD_INT 81
29661: ST_TO_ADDR
// ar_crane := 88 ;
29662: LD_ADDR_EXP 75
29666: PUSH
29667: LD_INT 88
29669: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29670: LD_ADDR_EXP 70
29674: PUSH
29675: LD_INT 89
29677: ST_TO_ADDR
// us_hack := 99 ;
29678: LD_ADDR_EXP 71
29682: PUSH
29683: LD_INT 99
29685: ST_TO_ADDR
// us_artillery := 97 ;
29686: LD_ADDR_EXP 72
29690: PUSH
29691: LD_INT 97
29693: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29694: LD_ADDR_EXP 73
29698: PUSH
29699: LD_INT 91
29701: ST_TO_ADDR
// ar_mortar := 92 ;
29702: LD_ADDR_EXP 74
29706: PUSH
29707: LD_INT 92
29709: ST_TO_ADDR
// ru_radar := 98 ;
29710: LD_ADDR_EXP 69
29714: PUSH
29715: LD_INT 98
29717: ST_TO_ADDR
// tech_Artillery := 80 ;
29718: LD_ADDR_EXP 77
29722: PUSH
29723: LD_INT 80
29725: ST_TO_ADDR
// tech_RadMat := 81 ;
29726: LD_ADDR_EXP 78
29730: PUSH
29731: LD_INT 81
29733: ST_TO_ADDR
// tech_BasicTools := 82 ;
29734: LD_ADDR_EXP 79
29738: PUSH
29739: LD_INT 82
29741: ST_TO_ADDR
// tech_Cargo := 83 ;
29742: LD_ADDR_EXP 80
29746: PUSH
29747: LD_INT 83
29749: ST_TO_ADDR
// tech_Track := 84 ;
29750: LD_ADDR_EXP 81
29754: PUSH
29755: LD_INT 84
29757: ST_TO_ADDR
// tech_Crane := 85 ;
29758: LD_ADDR_EXP 82
29762: PUSH
29763: LD_INT 85
29765: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29766: LD_ADDR_EXP 83
29770: PUSH
29771: LD_INT 86
29773: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29774: LD_ADDR_EXP 84
29778: PUSH
29779: LD_INT 87
29781: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29782: LD_ADDR_EXP 85
29786: PUSH
29787: LD_INT 88
29789: ST_TO_ADDR
// class_mastodont := 31 ;
29790: LD_ADDR_EXP 86
29794: PUSH
29795: LD_INT 31
29797: ST_TO_ADDR
// class_horse := 21 ;
29798: LD_ADDR_EXP 87
29802: PUSH
29803: LD_INT 21
29805: ST_TO_ADDR
// end ;
29806: LD_VAR 0 1
29810: RET
// every 1 do
29811: GO 29813
29813: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29814: CALL 29651 0 0
29818: END
// every 0 0$1 do
29819: GO 29821
29821: DISABLE
// begin enable ;
29822: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
29823: LD_STRING updateTimer(
29825: PUSH
29826: LD_OWVAR 1
29830: STR
29831: PUSH
29832: LD_STRING );
29834: STR
29835: PPUSH
29836: CALL_OW 559
// end ;
29840: END
// on MapStart ( p ) do begin if streamModeActive then
29841: LD_EXP 88
29845: IFFALSE 29854
// DefineStreamItems ( true ) ;
29847: LD_INT 1
29849: PPUSH
29850: CALL 31502 0 1
// UpdateFactoryWaypoints ( ) ;
29854: CALL 45086 0 0
// end ;
29858: PPOPN 1
29860: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29861: LD_INT 0
29863: PPUSH
// if p2 = 100 then
29864: LD_VAR 0 2
29868: PUSH
29869: LD_INT 100
29871: EQUAL
29872: IFFALSE 30875
// begin if not StreamModeActive then
29874: LD_EXP 88
29878: NOT
29879: IFFALSE 29889
// StreamModeActive := true ;
29881: LD_ADDR_EXP 88
29885: PUSH
29886: LD_INT 1
29888: ST_TO_ADDR
// if p3 = 0 then
29889: LD_VAR 0 3
29893: PUSH
29894: LD_INT 0
29896: EQUAL
29897: IFFALSE 29903
// InitStreamMode ;
29899: CALL 31038 0 0
// if p3 = 1 then
29903: LD_VAR 0 3
29907: PUSH
29908: LD_INT 1
29910: EQUAL
29911: IFFALSE 29921
// sRocket := true ;
29913: LD_ADDR_EXP 93
29917: PUSH
29918: LD_INT 1
29920: ST_TO_ADDR
// if p3 = 2 then
29921: LD_VAR 0 3
29925: PUSH
29926: LD_INT 2
29928: EQUAL
29929: IFFALSE 29939
// sSpeed := true ;
29931: LD_ADDR_EXP 92
29935: PUSH
29936: LD_INT 1
29938: ST_TO_ADDR
// if p3 = 3 then
29939: LD_VAR 0 3
29943: PUSH
29944: LD_INT 3
29946: EQUAL
29947: IFFALSE 29957
// sEngine := true ;
29949: LD_ADDR_EXP 94
29953: PUSH
29954: LD_INT 1
29956: ST_TO_ADDR
// if p3 = 4 then
29957: LD_VAR 0 3
29961: PUSH
29962: LD_INT 4
29964: EQUAL
29965: IFFALSE 29975
// sSpec := true ;
29967: LD_ADDR_EXP 91
29971: PUSH
29972: LD_INT 1
29974: ST_TO_ADDR
// if p3 = 5 then
29975: LD_VAR 0 3
29979: PUSH
29980: LD_INT 5
29982: EQUAL
29983: IFFALSE 29993
// sLevel := true ;
29985: LD_ADDR_EXP 95
29989: PUSH
29990: LD_INT 1
29992: ST_TO_ADDR
// if p3 = 6 then
29993: LD_VAR 0 3
29997: PUSH
29998: LD_INT 6
30000: EQUAL
30001: IFFALSE 30011
// sArmoury := true ;
30003: LD_ADDR_EXP 96
30007: PUSH
30008: LD_INT 1
30010: ST_TO_ADDR
// if p3 = 7 then
30011: LD_VAR 0 3
30015: PUSH
30016: LD_INT 7
30018: EQUAL
30019: IFFALSE 30029
// sRadar := true ;
30021: LD_ADDR_EXP 97
30025: PUSH
30026: LD_INT 1
30028: ST_TO_ADDR
// if p3 = 8 then
30029: LD_VAR 0 3
30033: PUSH
30034: LD_INT 8
30036: EQUAL
30037: IFFALSE 30047
// sBunker := true ;
30039: LD_ADDR_EXP 98
30043: PUSH
30044: LD_INT 1
30046: ST_TO_ADDR
// if p3 = 9 then
30047: LD_VAR 0 3
30051: PUSH
30052: LD_INT 9
30054: EQUAL
30055: IFFALSE 30065
// sHack := true ;
30057: LD_ADDR_EXP 99
30061: PUSH
30062: LD_INT 1
30064: ST_TO_ADDR
// if p3 = 10 then
30065: LD_VAR 0 3
30069: PUSH
30070: LD_INT 10
30072: EQUAL
30073: IFFALSE 30083
// sFire := true ;
30075: LD_ADDR_EXP 100
30079: PUSH
30080: LD_INT 1
30082: ST_TO_ADDR
// if p3 = 11 then
30083: LD_VAR 0 3
30087: PUSH
30088: LD_INT 11
30090: EQUAL
30091: IFFALSE 30101
// sRefresh := true ;
30093: LD_ADDR_EXP 101
30097: PUSH
30098: LD_INT 1
30100: ST_TO_ADDR
// if p3 = 12 then
30101: LD_VAR 0 3
30105: PUSH
30106: LD_INT 12
30108: EQUAL
30109: IFFALSE 30119
// sExp := true ;
30111: LD_ADDR_EXP 102
30115: PUSH
30116: LD_INT 1
30118: ST_TO_ADDR
// if p3 = 13 then
30119: LD_VAR 0 3
30123: PUSH
30124: LD_INT 13
30126: EQUAL
30127: IFFALSE 30137
// sDepot := true ;
30129: LD_ADDR_EXP 103
30133: PUSH
30134: LD_INT 1
30136: ST_TO_ADDR
// if p3 = 14 then
30137: LD_VAR 0 3
30141: PUSH
30142: LD_INT 14
30144: EQUAL
30145: IFFALSE 30155
// sFlag := true ;
30147: LD_ADDR_EXP 104
30151: PUSH
30152: LD_INT 1
30154: ST_TO_ADDR
// if p3 = 15 then
30155: LD_VAR 0 3
30159: PUSH
30160: LD_INT 15
30162: EQUAL
30163: IFFALSE 30173
// sKamikadze := true ;
30165: LD_ADDR_EXP 112
30169: PUSH
30170: LD_INT 1
30172: ST_TO_ADDR
// if p3 = 16 then
30173: LD_VAR 0 3
30177: PUSH
30178: LD_INT 16
30180: EQUAL
30181: IFFALSE 30191
// sTroll := true ;
30183: LD_ADDR_EXP 113
30187: PUSH
30188: LD_INT 1
30190: ST_TO_ADDR
// if p3 = 17 then
30191: LD_VAR 0 3
30195: PUSH
30196: LD_INT 17
30198: EQUAL
30199: IFFALSE 30209
// sSlow := true ;
30201: LD_ADDR_EXP 114
30205: PUSH
30206: LD_INT 1
30208: ST_TO_ADDR
// if p3 = 18 then
30209: LD_VAR 0 3
30213: PUSH
30214: LD_INT 18
30216: EQUAL
30217: IFFALSE 30227
// sLack := true ;
30219: LD_ADDR_EXP 115
30223: PUSH
30224: LD_INT 1
30226: ST_TO_ADDR
// if p3 = 19 then
30227: LD_VAR 0 3
30231: PUSH
30232: LD_INT 19
30234: EQUAL
30235: IFFALSE 30245
// sTank := true ;
30237: LD_ADDR_EXP 117
30241: PUSH
30242: LD_INT 1
30244: ST_TO_ADDR
// if p3 = 20 then
30245: LD_VAR 0 3
30249: PUSH
30250: LD_INT 20
30252: EQUAL
30253: IFFALSE 30263
// sRemote := true ;
30255: LD_ADDR_EXP 118
30259: PUSH
30260: LD_INT 1
30262: ST_TO_ADDR
// if p3 = 21 then
30263: LD_VAR 0 3
30267: PUSH
30268: LD_INT 21
30270: EQUAL
30271: IFFALSE 30281
// sPowell := true ;
30273: LD_ADDR_EXP 119
30277: PUSH
30278: LD_INT 1
30280: ST_TO_ADDR
// if p3 = 22 then
30281: LD_VAR 0 3
30285: PUSH
30286: LD_INT 22
30288: EQUAL
30289: IFFALSE 30299
// sTeleport := true ;
30291: LD_ADDR_EXP 122
30295: PUSH
30296: LD_INT 1
30298: ST_TO_ADDR
// if p3 = 23 then
30299: LD_VAR 0 3
30303: PUSH
30304: LD_INT 23
30306: EQUAL
30307: IFFALSE 30317
// sOilTower := true ;
30309: LD_ADDR_EXP 124
30313: PUSH
30314: LD_INT 1
30316: ST_TO_ADDR
// if p3 = 24 then
30317: LD_VAR 0 3
30321: PUSH
30322: LD_INT 24
30324: EQUAL
30325: IFFALSE 30335
// sShovel := true ;
30327: LD_ADDR_EXP 125
30331: PUSH
30332: LD_INT 1
30334: ST_TO_ADDR
// if p3 = 25 then
30335: LD_VAR 0 3
30339: PUSH
30340: LD_INT 25
30342: EQUAL
30343: IFFALSE 30353
// sSheik := true ;
30345: LD_ADDR_EXP 126
30349: PUSH
30350: LD_INT 1
30352: ST_TO_ADDR
// if p3 = 26 then
30353: LD_VAR 0 3
30357: PUSH
30358: LD_INT 26
30360: EQUAL
30361: IFFALSE 30371
// sEarthquake := true ;
30363: LD_ADDR_EXP 128
30367: PUSH
30368: LD_INT 1
30370: ST_TO_ADDR
// if p3 = 27 then
30371: LD_VAR 0 3
30375: PUSH
30376: LD_INT 27
30378: EQUAL
30379: IFFALSE 30389
// sAI := true ;
30381: LD_ADDR_EXP 129
30385: PUSH
30386: LD_INT 1
30388: ST_TO_ADDR
// if p3 = 28 then
30389: LD_VAR 0 3
30393: PUSH
30394: LD_INT 28
30396: EQUAL
30397: IFFALSE 30407
// sCargo := true ;
30399: LD_ADDR_EXP 132
30403: PUSH
30404: LD_INT 1
30406: ST_TO_ADDR
// if p3 = 29 then
30407: LD_VAR 0 3
30411: PUSH
30412: LD_INT 29
30414: EQUAL
30415: IFFALSE 30425
// sDLaser := true ;
30417: LD_ADDR_EXP 133
30421: PUSH
30422: LD_INT 1
30424: ST_TO_ADDR
// if p3 = 30 then
30425: LD_VAR 0 3
30429: PUSH
30430: LD_INT 30
30432: EQUAL
30433: IFFALSE 30443
// sExchange := true ;
30435: LD_ADDR_EXP 134
30439: PUSH
30440: LD_INT 1
30442: ST_TO_ADDR
// if p3 = 31 then
30443: LD_VAR 0 3
30447: PUSH
30448: LD_INT 31
30450: EQUAL
30451: IFFALSE 30461
// sFac := true ;
30453: LD_ADDR_EXP 135
30457: PUSH
30458: LD_INT 1
30460: ST_TO_ADDR
// if p3 = 32 then
30461: LD_VAR 0 3
30465: PUSH
30466: LD_INT 32
30468: EQUAL
30469: IFFALSE 30479
// sPower := true ;
30471: LD_ADDR_EXP 136
30475: PUSH
30476: LD_INT 1
30478: ST_TO_ADDR
// if p3 = 33 then
30479: LD_VAR 0 3
30483: PUSH
30484: LD_INT 33
30486: EQUAL
30487: IFFALSE 30497
// sRandom := true ;
30489: LD_ADDR_EXP 137
30493: PUSH
30494: LD_INT 1
30496: ST_TO_ADDR
// if p3 = 34 then
30497: LD_VAR 0 3
30501: PUSH
30502: LD_INT 34
30504: EQUAL
30505: IFFALSE 30515
// sShield := true ;
30507: LD_ADDR_EXP 138
30511: PUSH
30512: LD_INT 1
30514: ST_TO_ADDR
// if p3 = 35 then
30515: LD_VAR 0 3
30519: PUSH
30520: LD_INT 35
30522: EQUAL
30523: IFFALSE 30533
// sTime := true ;
30525: LD_ADDR_EXP 139
30529: PUSH
30530: LD_INT 1
30532: ST_TO_ADDR
// if p3 = 36 then
30533: LD_VAR 0 3
30537: PUSH
30538: LD_INT 36
30540: EQUAL
30541: IFFALSE 30551
// sTools := true ;
30543: LD_ADDR_EXP 140
30547: PUSH
30548: LD_INT 1
30550: ST_TO_ADDR
// if p3 = 101 then
30551: LD_VAR 0 3
30555: PUSH
30556: LD_INT 101
30558: EQUAL
30559: IFFALSE 30569
// sSold := true ;
30561: LD_ADDR_EXP 105
30565: PUSH
30566: LD_INT 1
30568: ST_TO_ADDR
// if p3 = 102 then
30569: LD_VAR 0 3
30573: PUSH
30574: LD_INT 102
30576: EQUAL
30577: IFFALSE 30587
// sDiff := true ;
30579: LD_ADDR_EXP 106
30583: PUSH
30584: LD_INT 1
30586: ST_TO_ADDR
// if p3 = 103 then
30587: LD_VAR 0 3
30591: PUSH
30592: LD_INT 103
30594: EQUAL
30595: IFFALSE 30605
// sFog := true ;
30597: LD_ADDR_EXP 109
30601: PUSH
30602: LD_INT 1
30604: ST_TO_ADDR
// if p3 = 104 then
30605: LD_VAR 0 3
30609: PUSH
30610: LD_INT 104
30612: EQUAL
30613: IFFALSE 30623
// sReset := true ;
30615: LD_ADDR_EXP 110
30619: PUSH
30620: LD_INT 1
30622: ST_TO_ADDR
// if p3 = 105 then
30623: LD_VAR 0 3
30627: PUSH
30628: LD_INT 105
30630: EQUAL
30631: IFFALSE 30641
// sSun := true ;
30633: LD_ADDR_EXP 111
30637: PUSH
30638: LD_INT 1
30640: ST_TO_ADDR
// if p3 = 106 then
30641: LD_VAR 0 3
30645: PUSH
30646: LD_INT 106
30648: EQUAL
30649: IFFALSE 30659
// sTiger := true ;
30651: LD_ADDR_EXP 107
30655: PUSH
30656: LD_INT 1
30658: ST_TO_ADDR
// if p3 = 107 then
30659: LD_VAR 0 3
30663: PUSH
30664: LD_INT 107
30666: EQUAL
30667: IFFALSE 30677
// sBomb := true ;
30669: LD_ADDR_EXP 108
30673: PUSH
30674: LD_INT 1
30676: ST_TO_ADDR
// if p3 = 108 then
30677: LD_VAR 0 3
30681: PUSH
30682: LD_INT 108
30684: EQUAL
30685: IFFALSE 30695
// sWound := true ;
30687: LD_ADDR_EXP 116
30691: PUSH
30692: LD_INT 1
30694: ST_TO_ADDR
// if p3 = 109 then
30695: LD_VAR 0 3
30699: PUSH
30700: LD_INT 109
30702: EQUAL
30703: IFFALSE 30713
// sBetray := true ;
30705: LD_ADDR_EXP 120
30709: PUSH
30710: LD_INT 1
30712: ST_TO_ADDR
// if p3 = 110 then
30713: LD_VAR 0 3
30717: PUSH
30718: LD_INT 110
30720: EQUAL
30721: IFFALSE 30731
// sContamin := true ;
30723: LD_ADDR_EXP 121
30727: PUSH
30728: LD_INT 1
30730: ST_TO_ADDR
// if p3 = 111 then
30731: LD_VAR 0 3
30735: PUSH
30736: LD_INT 111
30738: EQUAL
30739: IFFALSE 30749
// sOil := true ;
30741: LD_ADDR_EXP 123
30745: PUSH
30746: LD_INT 1
30748: ST_TO_ADDR
// if p3 = 112 then
30749: LD_VAR 0 3
30753: PUSH
30754: LD_INT 112
30756: EQUAL
30757: IFFALSE 30767
// sStu := true ;
30759: LD_ADDR_EXP 127
30763: PUSH
30764: LD_INT 1
30766: ST_TO_ADDR
// if p3 = 113 then
30767: LD_VAR 0 3
30771: PUSH
30772: LD_INT 113
30774: EQUAL
30775: IFFALSE 30785
// sBazooka := true ;
30777: LD_ADDR_EXP 130
30781: PUSH
30782: LD_INT 1
30784: ST_TO_ADDR
// if p3 = 114 then
30785: LD_VAR 0 3
30789: PUSH
30790: LD_INT 114
30792: EQUAL
30793: IFFALSE 30803
// sMortar := true ;
30795: LD_ADDR_EXP 131
30799: PUSH
30800: LD_INT 1
30802: ST_TO_ADDR
// if p3 = 115 then
30803: LD_VAR 0 3
30807: PUSH
30808: LD_INT 115
30810: EQUAL
30811: IFFALSE 30821
// sRanger := true ;
30813: LD_ADDR_EXP 141
30817: PUSH
30818: LD_INT 1
30820: ST_TO_ADDR
// if p3 = 116 then
30821: LD_VAR 0 3
30825: PUSH
30826: LD_INT 116
30828: EQUAL
30829: IFFALSE 30839
// sComputer := true ;
30831: LD_ADDR_EXP 142
30835: PUSH
30836: LD_INT 1
30838: ST_TO_ADDR
// if p3 = 117 then
30839: LD_VAR 0 3
30843: PUSH
30844: LD_INT 117
30846: EQUAL
30847: IFFALSE 30857
// s30 := true ;
30849: LD_ADDR_EXP 143
30853: PUSH
30854: LD_INT 1
30856: ST_TO_ADDR
// if p3 = 118 then
30857: LD_VAR 0 3
30861: PUSH
30862: LD_INT 118
30864: EQUAL
30865: IFFALSE 30875
// s60 := true ;
30867: LD_ADDR_EXP 144
30871: PUSH
30872: LD_INT 1
30874: ST_TO_ADDR
// end ; if p2 = 101 then
30875: LD_VAR 0 2
30879: PUSH
30880: LD_INT 101
30882: EQUAL
30883: IFFALSE 31011
// begin case p3 of 1 :
30885: LD_VAR 0 3
30889: PUSH
30890: LD_INT 1
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30905
30898: POP
// hHackUnlimitedResources ; 2 :
30899: CALL 43109 0 0
30903: GO 31011
30905: LD_INT 2
30907: DOUBLE
30908: EQUAL
30909: IFTRUE 30913
30911: GO 30920
30913: POP
// hHackSetLevel10 ; 3 :
30914: CALL 43242 0 0
30918: GO 31011
30920: LD_INT 3
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30935
30928: POP
// hHackSetLevel10YourUnits ; 4 :
30929: CALL 43327 0 0
30933: GO 31011
30935: LD_INT 4
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30950
30943: POP
// hHackInvincible ; 5 :
30944: CALL 43775 0 0
30948: GO 31011
30950: LD_INT 5
30952: DOUBLE
30953: EQUAL
30954: IFTRUE 30958
30956: GO 30965
30958: POP
// hHackInvisible ; 6 :
30959: CALL 43886 0 0
30963: GO 31011
30965: LD_INT 6
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30980
30973: POP
// hHackChangeYourSide ; 7 :
30974: CALL 43943 0 0
30978: GO 31011
30980: LD_INT 7
30982: DOUBLE
30983: EQUAL
30984: IFTRUE 30988
30986: GO 30995
30988: POP
// hHackChangeUnitSide ; 8 :
30989: CALL 43985 0 0
30993: GO 31011
30995: LD_INT 8
30997: DOUBLE
30998: EQUAL
30999: IFTRUE 31003
31001: GO 31010
31003: POP
// hHackFog ; end ;
31004: CALL 44086 0 0
31008: GO 31011
31010: POP
// end ; end ;
31011: LD_VAR 0 7
31015: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31016: GO 31018
31018: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31019: LD_STRING initStreamRollete();
31021: PPUSH
31022: CALL_OW 559
// InitStreamMode ;
31026: CALL 31038 0 0
// DefineStreamItems ( false ) ;
31030: LD_INT 0
31032: PPUSH
31033: CALL 31502 0 1
// end ;
31037: END
// function InitStreamMode ; begin
31038: LD_INT 0
31040: PPUSH
// streamModeActive := false ;
31041: LD_ADDR_EXP 88
31045: PUSH
31046: LD_INT 0
31048: ST_TO_ADDR
// normalCounter := 36 ;
31049: LD_ADDR_EXP 89
31053: PUSH
31054: LD_INT 36
31056: ST_TO_ADDR
// hardcoreCounter := 18 ;
31057: LD_ADDR_EXP 90
31061: PUSH
31062: LD_INT 18
31064: ST_TO_ADDR
// sRocket := false ;
31065: LD_ADDR_EXP 93
31069: PUSH
31070: LD_INT 0
31072: ST_TO_ADDR
// sSpeed := false ;
31073: LD_ADDR_EXP 92
31077: PUSH
31078: LD_INT 0
31080: ST_TO_ADDR
// sEngine := false ;
31081: LD_ADDR_EXP 94
31085: PUSH
31086: LD_INT 0
31088: ST_TO_ADDR
// sSpec := false ;
31089: LD_ADDR_EXP 91
31093: PUSH
31094: LD_INT 0
31096: ST_TO_ADDR
// sLevel := false ;
31097: LD_ADDR_EXP 95
31101: PUSH
31102: LD_INT 0
31104: ST_TO_ADDR
// sArmoury := false ;
31105: LD_ADDR_EXP 96
31109: PUSH
31110: LD_INT 0
31112: ST_TO_ADDR
// sRadar := false ;
31113: LD_ADDR_EXP 97
31117: PUSH
31118: LD_INT 0
31120: ST_TO_ADDR
// sBunker := false ;
31121: LD_ADDR_EXP 98
31125: PUSH
31126: LD_INT 0
31128: ST_TO_ADDR
// sHack := false ;
31129: LD_ADDR_EXP 99
31133: PUSH
31134: LD_INT 0
31136: ST_TO_ADDR
// sFire := false ;
31137: LD_ADDR_EXP 100
31141: PUSH
31142: LD_INT 0
31144: ST_TO_ADDR
// sRefresh := false ;
31145: LD_ADDR_EXP 101
31149: PUSH
31150: LD_INT 0
31152: ST_TO_ADDR
// sExp := false ;
31153: LD_ADDR_EXP 102
31157: PUSH
31158: LD_INT 0
31160: ST_TO_ADDR
// sDepot := false ;
31161: LD_ADDR_EXP 103
31165: PUSH
31166: LD_INT 0
31168: ST_TO_ADDR
// sFlag := false ;
31169: LD_ADDR_EXP 104
31173: PUSH
31174: LD_INT 0
31176: ST_TO_ADDR
// sKamikadze := false ;
31177: LD_ADDR_EXP 112
31181: PUSH
31182: LD_INT 0
31184: ST_TO_ADDR
// sTroll := false ;
31185: LD_ADDR_EXP 113
31189: PUSH
31190: LD_INT 0
31192: ST_TO_ADDR
// sSlow := false ;
31193: LD_ADDR_EXP 114
31197: PUSH
31198: LD_INT 0
31200: ST_TO_ADDR
// sLack := false ;
31201: LD_ADDR_EXP 115
31205: PUSH
31206: LD_INT 0
31208: ST_TO_ADDR
// sTank := false ;
31209: LD_ADDR_EXP 117
31213: PUSH
31214: LD_INT 0
31216: ST_TO_ADDR
// sRemote := false ;
31217: LD_ADDR_EXP 118
31221: PUSH
31222: LD_INT 0
31224: ST_TO_ADDR
// sPowell := false ;
31225: LD_ADDR_EXP 119
31229: PUSH
31230: LD_INT 0
31232: ST_TO_ADDR
// sTeleport := false ;
31233: LD_ADDR_EXP 122
31237: PUSH
31238: LD_INT 0
31240: ST_TO_ADDR
// sOilTower := false ;
31241: LD_ADDR_EXP 124
31245: PUSH
31246: LD_INT 0
31248: ST_TO_ADDR
// sShovel := false ;
31249: LD_ADDR_EXP 125
31253: PUSH
31254: LD_INT 0
31256: ST_TO_ADDR
// sSheik := false ;
31257: LD_ADDR_EXP 126
31261: PUSH
31262: LD_INT 0
31264: ST_TO_ADDR
// sEarthquake := false ;
31265: LD_ADDR_EXP 128
31269: PUSH
31270: LD_INT 0
31272: ST_TO_ADDR
// sAI := false ;
31273: LD_ADDR_EXP 129
31277: PUSH
31278: LD_INT 0
31280: ST_TO_ADDR
// sCargo := false ;
31281: LD_ADDR_EXP 132
31285: PUSH
31286: LD_INT 0
31288: ST_TO_ADDR
// sDLaser := false ;
31289: LD_ADDR_EXP 133
31293: PUSH
31294: LD_INT 0
31296: ST_TO_ADDR
// sExchange := false ;
31297: LD_ADDR_EXP 134
31301: PUSH
31302: LD_INT 0
31304: ST_TO_ADDR
// sFac := false ;
31305: LD_ADDR_EXP 135
31309: PUSH
31310: LD_INT 0
31312: ST_TO_ADDR
// sPower := false ;
31313: LD_ADDR_EXP 136
31317: PUSH
31318: LD_INT 0
31320: ST_TO_ADDR
// sRandom := false ;
31321: LD_ADDR_EXP 137
31325: PUSH
31326: LD_INT 0
31328: ST_TO_ADDR
// sShield := false ;
31329: LD_ADDR_EXP 138
31333: PUSH
31334: LD_INT 0
31336: ST_TO_ADDR
// sTime := false ;
31337: LD_ADDR_EXP 139
31341: PUSH
31342: LD_INT 0
31344: ST_TO_ADDR
// sTools := false ;
31345: LD_ADDR_EXP 140
31349: PUSH
31350: LD_INT 0
31352: ST_TO_ADDR
// sSold := false ;
31353: LD_ADDR_EXP 105
31357: PUSH
31358: LD_INT 0
31360: ST_TO_ADDR
// sDiff := false ;
31361: LD_ADDR_EXP 106
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
// sFog := false ;
31369: LD_ADDR_EXP 109
31373: PUSH
31374: LD_INT 0
31376: ST_TO_ADDR
// sReset := false ;
31377: LD_ADDR_EXP 110
31381: PUSH
31382: LD_INT 0
31384: ST_TO_ADDR
// sSun := false ;
31385: LD_ADDR_EXP 111
31389: PUSH
31390: LD_INT 0
31392: ST_TO_ADDR
// sTiger := false ;
31393: LD_ADDR_EXP 107
31397: PUSH
31398: LD_INT 0
31400: ST_TO_ADDR
// sBomb := false ;
31401: LD_ADDR_EXP 108
31405: PUSH
31406: LD_INT 0
31408: ST_TO_ADDR
// sWound := false ;
31409: LD_ADDR_EXP 116
31413: PUSH
31414: LD_INT 0
31416: ST_TO_ADDR
// sBetray := false ;
31417: LD_ADDR_EXP 120
31421: PUSH
31422: LD_INT 0
31424: ST_TO_ADDR
// sContamin := false ;
31425: LD_ADDR_EXP 121
31429: PUSH
31430: LD_INT 0
31432: ST_TO_ADDR
// sOil := false ;
31433: LD_ADDR_EXP 123
31437: PUSH
31438: LD_INT 0
31440: ST_TO_ADDR
// sStu := false ;
31441: LD_ADDR_EXP 127
31445: PUSH
31446: LD_INT 0
31448: ST_TO_ADDR
// sBazooka := false ;
31449: LD_ADDR_EXP 130
31453: PUSH
31454: LD_INT 0
31456: ST_TO_ADDR
// sMortar := false ;
31457: LD_ADDR_EXP 131
31461: PUSH
31462: LD_INT 0
31464: ST_TO_ADDR
// sRanger := false ;
31465: LD_ADDR_EXP 141
31469: PUSH
31470: LD_INT 0
31472: ST_TO_ADDR
// sComputer := false ;
31473: LD_ADDR_EXP 142
31477: PUSH
31478: LD_INT 0
31480: ST_TO_ADDR
// s30 := false ;
31481: LD_ADDR_EXP 143
31485: PUSH
31486: LD_INT 0
31488: ST_TO_ADDR
// s60 := false ;
31489: LD_ADDR_EXP 144
31493: PUSH
31494: LD_INT 0
31496: ST_TO_ADDR
// end ;
31497: LD_VAR 0 1
31501: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31502: LD_INT 0
31504: PPUSH
31505: PPUSH
31506: PPUSH
31507: PPUSH
31508: PPUSH
31509: PPUSH
31510: PPUSH
// result := [ ] ;
31511: LD_ADDR_VAR 0 2
31515: PUSH
31516: EMPTY
31517: ST_TO_ADDR
// if campaign_id = 1 then
31518: LD_OWVAR 69
31522: PUSH
31523: LD_INT 1
31525: EQUAL
31526: IFFALSE 34692
// begin case mission_number of 1 :
31528: LD_OWVAR 70
31532: PUSH
31533: LD_INT 1
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31617
31541: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31542: LD_ADDR_VAR 0 2
31546: PUSH
31547: LD_INT 2
31549: PUSH
31550: LD_INT 4
31552: PUSH
31553: LD_INT 11
31555: PUSH
31556: LD_INT 12
31558: PUSH
31559: LD_INT 15
31561: PUSH
31562: LD_INT 16
31564: PUSH
31565: LD_INT 22
31567: PUSH
31568: LD_INT 23
31570: PUSH
31571: LD_INT 26
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 101
31587: PUSH
31588: LD_INT 102
31590: PUSH
31591: LD_INT 106
31593: PUSH
31594: LD_INT 116
31596: PUSH
31597: LD_INT 117
31599: PUSH
31600: LD_INT 118
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: ST_TO_ADDR
31615: GO 34690
31617: LD_INT 2
31619: DOUBLE
31620: EQUAL
31621: IFTRUE 31625
31623: GO 31709
31625: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31626: LD_ADDR_VAR 0 2
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: LD_INT 4
31636: PUSH
31637: LD_INT 11
31639: PUSH
31640: LD_INT 12
31642: PUSH
31643: LD_INT 15
31645: PUSH
31646: LD_INT 16
31648: PUSH
31649: LD_INT 22
31651: PUSH
31652: LD_INT 23
31654: PUSH
31655: LD_INT 26
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 101
31671: PUSH
31672: LD_INT 102
31674: PUSH
31675: LD_INT 105
31677: PUSH
31678: LD_INT 106
31680: PUSH
31681: LD_INT 108
31683: PUSH
31684: LD_INT 116
31686: PUSH
31687: LD_INT 117
31689: PUSH
31690: LD_INT 118
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: ST_TO_ADDR
31707: GO 34690
31709: LD_INT 3
31711: DOUBLE
31712: EQUAL
31713: IFTRUE 31717
31715: GO 31805
31717: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
31718: LD_ADDR_VAR 0 2
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: LD_INT 11
31734: PUSH
31735: LD_INT 12
31737: PUSH
31738: LD_INT 15
31740: PUSH
31741: LD_INT 16
31743: PUSH
31744: LD_INT 22
31746: PUSH
31747: LD_INT 26
31749: PUSH
31750: LD_INT 36
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 101
31767: PUSH
31768: LD_INT 102
31770: PUSH
31771: LD_INT 105
31773: PUSH
31774: LD_INT 106
31776: PUSH
31777: LD_INT 108
31779: PUSH
31780: LD_INT 116
31782: PUSH
31783: LD_INT 117
31785: PUSH
31786: LD_INT 118
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: ST_TO_ADDR
31803: GO 34690
31805: LD_INT 4
31807: DOUBLE
31808: EQUAL
31809: IFTRUE 31813
31811: GO 31909
31813: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
31814: LD_ADDR_VAR 0 2
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 4
31824: PUSH
31825: LD_INT 5
31827: PUSH
31828: LD_INT 8
31830: PUSH
31831: LD_INT 11
31833: PUSH
31834: LD_INT 12
31836: PUSH
31837: LD_INT 15
31839: PUSH
31840: LD_INT 16
31842: PUSH
31843: LD_INT 22
31845: PUSH
31846: LD_INT 23
31848: PUSH
31849: LD_INT 26
31851: PUSH
31852: LD_INT 36
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 101
31871: PUSH
31872: LD_INT 102
31874: PUSH
31875: LD_INT 105
31877: PUSH
31878: LD_INT 106
31880: PUSH
31881: LD_INT 108
31883: PUSH
31884: LD_INT 116
31886: PUSH
31887: LD_INT 117
31889: PUSH
31890: LD_INT 118
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: ST_TO_ADDR
31907: GO 34690
31909: LD_INT 5
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 32029
31917: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
31918: LD_ADDR_VAR 0 2
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 4
31928: PUSH
31929: LD_INT 5
31931: PUSH
31932: LD_INT 6
31934: PUSH
31935: LD_INT 8
31937: PUSH
31938: LD_INT 11
31940: PUSH
31941: LD_INT 12
31943: PUSH
31944: LD_INT 15
31946: PUSH
31947: LD_INT 16
31949: PUSH
31950: LD_INT 22
31952: PUSH
31953: LD_INT 23
31955: PUSH
31956: LD_INT 25
31958: PUSH
31959: LD_INT 26
31961: PUSH
31962: LD_INT 36
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 101
31983: PUSH
31984: LD_INT 102
31986: PUSH
31987: LD_INT 105
31989: PUSH
31990: LD_INT 106
31992: PUSH
31993: LD_INT 108
31995: PUSH
31996: LD_INT 109
31998: PUSH
31999: LD_INT 112
32001: PUSH
32002: LD_INT 116
32004: PUSH
32005: LD_INT 117
32007: PUSH
32008: LD_INT 118
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: ST_TO_ADDR
32027: GO 34690
32029: LD_INT 6
32031: DOUBLE
32032: EQUAL
32033: IFTRUE 32037
32035: GO 32169
32037: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32038: LD_ADDR_VAR 0 2
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: LD_INT 5
32051: PUSH
32052: LD_INT 6
32054: PUSH
32055: LD_INT 8
32057: PUSH
32058: LD_INT 11
32060: PUSH
32061: LD_INT 12
32063: PUSH
32064: LD_INT 15
32066: PUSH
32067: LD_INT 16
32069: PUSH
32070: LD_INT 20
32072: PUSH
32073: LD_INT 21
32075: PUSH
32076: LD_INT 22
32078: PUSH
32079: LD_INT 23
32081: PUSH
32082: LD_INT 25
32084: PUSH
32085: LD_INT 26
32087: PUSH
32088: LD_INT 30
32090: PUSH
32091: LD_INT 31
32093: PUSH
32094: LD_INT 32
32096: PUSH
32097: LD_INT 36
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 101
32123: PUSH
32124: LD_INT 102
32126: PUSH
32127: LD_INT 105
32129: PUSH
32130: LD_INT 106
32132: PUSH
32133: LD_INT 108
32135: PUSH
32136: LD_INT 109
32138: PUSH
32139: LD_INT 112
32141: PUSH
32142: LD_INT 116
32144: PUSH
32145: LD_INT 117
32147: PUSH
32148: LD_INT 118
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: ST_TO_ADDR
32167: GO 34690
32169: LD_INT 7
32171: DOUBLE
32172: EQUAL
32173: IFTRUE 32177
32175: GO 32289
32177: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32178: LD_ADDR_VAR 0 2
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 4
32188: PUSH
32189: LD_INT 5
32191: PUSH
32192: LD_INT 7
32194: PUSH
32195: LD_INT 11
32197: PUSH
32198: LD_INT 12
32200: PUSH
32201: LD_INT 15
32203: PUSH
32204: LD_INT 16
32206: PUSH
32207: LD_INT 20
32209: PUSH
32210: LD_INT 21
32212: PUSH
32213: LD_INT 22
32215: PUSH
32216: LD_INT 23
32218: PUSH
32219: LD_INT 25
32221: PUSH
32222: LD_INT 26
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 101
32243: PUSH
32244: LD_INT 102
32246: PUSH
32247: LD_INT 103
32249: PUSH
32250: LD_INT 105
32252: PUSH
32253: LD_INT 106
32255: PUSH
32256: LD_INT 108
32258: PUSH
32259: LD_INT 112
32261: PUSH
32262: LD_INT 116
32264: PUSH
32265: LD_INT 117
32267: PUSH
32268: LD_INT 118
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: ST_TO_ADDR
32287: GO 34690
32289: LD_INT 8
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 32437
32297: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32298: LD_ADDR_VAR 0 2
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 4
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: LD_INT 6
32314: PUSH
32315: LD_INT 7
32317: PUSH
32318: LD_INT 8
32320: PUSH
32321: LD_INT 11
32323: PUSH
32324: LD_INT 12
32326: PUSH
32327: LD_INT 15
32329: PUSH
32330: LD_INT 16
32332: PUSH
32333: LD_INT 20
32335: PUSH
32336: LD_INT 21
32338: PUSH
32339: LD_INT 22
32341: PUSH
32342: LD_INT 23
32344: PUSH
32345: LD_INT 25
32347: PUSH
32348: LD_INT 26
32350: PUSH
32351: LD_INT 30
32353: PUSH
32354: LD_INT 31
32356: PUSH
32357: LD_INT 32
32359: PUSH
32360: LD_INT 36
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 101
32387: PUSH
32388: LD_INT 102
32390: PUSH
32391: LD_INT 103
32393: PUSH
32394: LD_INT 105
32396: PUSH
32397: LD_INT 106
32399: PUSH
32400: LD_INT 108
32402: PUSH
32403: LD_INT 109
32405: PUSH
32406: LD_INT 112
32408: PUSH
32409: LD_INT 116
32411: PUSH
32412: LD_INT 117
32414: PUSH
32415: LD_INT 118
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: ST_TO_ADDR
32435: GO 34690
32437: LD_INT 9
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32445
32443: GO 32593
32445: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32446: LD_ADDR_VAR 0 2
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: LD_INT 6
32462: PUSH
32463: LD_INT 7
32465: PUSH
32466: LD_INT 8
32468: PUSH
32469: LD_INT 11
32471: PUSH
32472: LD_INT 12
32474: PUSH
32475: LD_INT 15
32477: PUSH
32478: LD_INT 16
32480: PUSH
32481: LD_INT 20
32483: PUSH
32484: LD_INT 21
32486: PUSH
32487: LD_INT 22
32489: PUSH
32490: LD_INT 23
32492: PUSH
32493: LD_INT 25
32495: PUSH
32496: LD_INT 26
32498: PUSH
32499: LD_INT 28
32501: PUSH
32502: LD_INT 30
32504: PUSH
32505: LD_INT 31
32507: PUSH
32508: LD_INT 32
32510: PUSH
32511: LD_INT 36
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 101
32539: PUSH
32540: LD_INT 102
32542: PUSH
32543: LD_INT 103
32545: PUSH
32546: LD_INT 105
32548: PUSH
32549: LD_INT 106
32551: PUSH
32552: LD_INT 108
32554: PUSH
32555: LD_INT 109
32557: PUSH
32558: LD_INT 112
32560: PUSH
32561: LD_INT 114
32563: PUSH
32564: LD_INT 116
32566: PUSH
32567: LD_INT 117
32569: PUSH
32570: LD_INT 118
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: ST_TO_ADDR
32591: GO 34690
32593: LD_INT 10
32595: DOUBLE
32596: EQUAL
32597: IFTRUE 32601
32599: GO 32797
32601: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32602: LD_ADDR_VAR 0 2
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: LD_INT 4
32612: PUSH
32613: LD_INT 5
32615: PUSH
32616: LD_INT 6
32618: PUSH
32619: LD_INT 7
32621: PUSH
32622: LD_INT 8
32624: PUSH
32625: LD_INT 9
32627: PUSH
32628: LD_INT 10
32630: PUSH
32631: LD_INT 11
32633: PUSH
32634: LD_INT 12
32636: PUSH
32637: LD_INT 13
32639: PUSH
32640: LD_INT 14
32642: PUSH
32643: LD_INT 15
32645: PUSH
32646: LD_INT 16
32648: PUSH
32649: LD_INT 17
32651: PUSH
32652: LD_INT 18
32654: PUSH
32655: LD_INT 19
32657: PUSH
32658: LD_INT 20
32660: PUSH
32661: LD_INT 21
32663: PUSH
32664: LD_INT 22
32666: PUSH
32667: LD_INT 23
32669: PUSH
32670: LD_INT 24
32672: PUSH
32673: LD_INT 25
32675: PUSH
32676: LD_INT 26
32678: PUSH
32679: LD_INT 28
32681: PUSH
32682: LD_INT 30
32684: PUSH
32685: LD_INT 31
32687: PUSH
32688: LD_INT 32
32690: PUSH
32691: LD_INT 36
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 101
32727: PUSH
32728: LD_INT 102
32730: PUSH
32731: LD_INT 103
32733: PUSH
32734: LD_INT 104
32736: PUSH
32737: LD_INT 105
32739: PUSH
32740: LD_INT 106
32742: PUSH
32743: LD_INT 107
32745: PUSH
32746: LD_INT 108
32748: PUSH
32749: LD_INT 109
32751: PUSH
32752: LD_INT 110
32754: PUSH
32755: LD_INT 111
32757: PUSH
32758: LD_INT 112
32760: PUSH
32761: LD_INT 114
32763: PUSH
32764: LD_INT 116
32766: PUSH
32767: LD_INT 117
32769: PUSH
32770: LD_INT 118
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: ST_TO_ADDR
32795: GO 34690
32797: LD_INT 11
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 33009
32805: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
32806: LD_ADDR_VAR 0 2
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: LD_INT 4
32819: PUSH
32820: LD_INT 5
32822: PUSH
32823: LD_INT 6
32825: PUSH
32826: LD_INT 7
32828: PUSH
32829: LD_INT 8
32831: PUSH
32832: LD_INT 9
32834: PUSH
32835: LD_INT 10
32837: PUSH
32838: LD_INT 11
32840: PUSH
32841: LD_INT 12
32843: PUSH
32844: LD_INT 13
32846: PUSH
32847: LD_INT 14
32849: PUSH
32850: LD_INT 15
32852: PUSH
32853: LD_INT 16
32855: PUSH
32856: LD_INT 17
32858: PUSH
32859: LD_INT 18
32861: PUSH
32862: LD_INT 19
32864: PUSH
32865: LD_INT 20
32867: PUSH
32868: LD_INT 21
32870: PUSH
32871: LD_INT 22
32873: PUSH
32874: LD_INT 23
32876: PUSH
32877: LD_INT 24
32879: PUSH
32880: LD_INT 25
32882: PUSH
32883: LD_INT 26
32885: PUSH
32886: LD_INT 28
32888: PUSH
32889: LD_INT 30
32891: PUSH
32892: LD_INT 31
32894: PUSH
32895: LD_INT 32
32897: PUSH
32898: LD_INT 34
32900: PUSH
32901: LD_INT 36
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 101
32939: PUSH
32940: LD_INT 102
32942: PUSH
32943: LD_INT 103
32945: PUSH
32946: LD_INT 104
32948: PUSH
32949: LD_INT 105
32951: PUSH
32952: LD_INT 106
32954: PUSH
32955: LD_INT 107
32957: PUSH
32958: LD_INT 108
32960: PUSH
32961: LD_INT 109
32963: PUSH
32964: LD_INT 110
32966: PUSH
32967: LD_INT 111
32969: PUSH
32970: LD_INT 112
32972: PUSH
32973: LD_INT 114
32975: PUSH
32976: LD_INT 116
32978: PUSH
32979: LD_INT 117
32981: PUSH
32982: LD_INT 118
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: ST_TO_ADDR
33007: GO 34690
33009: LD_INT 12
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33237
33017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33018: LD_ADDR_VAR 0 2
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: LD_INT 4
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: LD_INT 6
33040: PUSH
33041: LD_INT 7
33043: PUSH
33044: LD_INT 8
33046: PUSH
33047: LD_INT 9
33049: PUSH
33050: LD_INT 10
33052: PUSH
33053: LD_INT 11
33055: PUSH
33056: LD_INT 12
33058: PUSH
33059: LD_INT 13
33061: PUSH
33062: LD_INT 14
33064: PUSH
33065: LD_INT 15
33067: PUSH
33068: LD_INT 16
33070: PUSH
33071: LD_INT 17
33073: PUSH
33074: LD_INT 18
33076: PUSH
33077: LD_INT 19
33079: PUSH
33080: LD_INT 20
33082: PUSH
33083: LD_INT 21
33085: PUSH
33086: LD_INT 22
33088: PUSH
33089: LD_INT 23
33091: PUSH
33092: LD_INT 24
33094: PUSH
33095: LD_INT 25
33097: PUSH
33098: LD_INT 26
33100: PUSH
33101: LD_INT 27
33103: PUSH
33104: LD_INT 28
33106: PUSH
33107: LD_INT 30
33109: PUSH
33110: LD_INT 31
33112: PUSH
33113: LD_INT 32
33115: PUSH
33116: LD_INT 33
33118: PUSH
33119: LD_INT 34
33121: PUSH
33122: LD_INT 36
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 101
33163: PUSH
33164: LD_INT 102
33166: PUSH
33167: LD_INT 103
33169: PUSH
33170: LD_INT 104
33172: PUSH
33173: LD_INT 105
33175: PUSH
33176: LD_INT 106
33178: PUSH
33179: LD_INT 107
33181: PUSH
33182: LD_INT 108
33184: PUSH
33185: LD_INT 109
33187: PUSH
33188: LD_INT 110
33190: PUSH
33191: LD_INT 111
33193: PUSH
33194: LD_INT 112
33196: PUSH
33197: LD_INT 113
33199: PUSH
33200: LD_INT 114
33202: PUSH
33203: LD_INT 116
33205: PUSH
33206: LD_INT 117
33208: PUSH
33209: LD_INT 118
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: ST_TO_ADDR
33235: GO 34690
33237: LD_INT 13
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33245
33243: GO 33453
33245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33246: LD_ADDR_VAR 0 2
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: LD_INT 3
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: LD_INT 8
33268: PUSH
33269: LD_INT 9
33271: PUSH
33272: LD_INT 10
33274: PUSH
33275: LD_INT 11
33277: PUSH
33278: LD_INT 12
33280: PUSH
33281: LD_INT 14
33283: PUSH
33284: LD_INT 15
33286: PUSH
33287: LD_INT 16
33289: PUSH
33290: LD_INT 17
33292: PUSH
33293: LD_INT 18
33295: PUSH
33296: LD_INT 19
33298: PUSH
33299: LD_INT 20
33301: PUSH
33302: LD_INT 21
33304: PUSH
33305: LD_INT 22
33307: PUSH
33308: LD_INT 23
33310: PUSH
33311: LD_INT 24
33313: PUSH
33314: LD_INT 25
33316: PUSH
33317: LD_INT 26
33319: PUSH
33320: LD_INT 27
33322: PUSH
33323: LD_INT 28
33325: PUSH
33326: LD_INT 30
33328: PUSH
33329: LD_INT 31
33331: PUSH
33332: LD_INT 32
33334: PUSH
33335: LD_INT 33
33337: PUSH
33338: LD_INT 34
33340: PUSH
33341: LD_INT 36
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 101
33379: PUSH
33380: LD_INT 102
33382: PUSH
33383: LD_INT 103
33385: PUSH
33386: LD_INT 104
33388: PUSH
33389: LD_INT 105
33391: PUSH
33392: LD_INT 106
33394: PUSH
33395: LD_INT 107
33397: PUSH
33398: LD_INT 108
33400: PUSH
33401: LD_INT 109
33403: PUSH
33404: LD_INT 110
33406: PUSH
33407: LD_INT 111
33409: PUSH
33410: LD_INT 112
33412: PUSH
33413: LD_INT 113
33415: PUSH
33416: LD_INT 114
33418: PUSH
33419: LD_INT 116
33421: PUSH
33422: LD_INT 117
33424: PUSH
33425: LD_INT 118
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: ST_TO_ADDR
33451: GO 34690
33453: LD_INT 14
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33461
33459: GO 33685
33461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33462: LD_ADDR_VAR 0 2
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: LD_INT 4
33478: PUSH
33479: LD_INT 5
33481: PUSH
33482: LD_INT 6
33484: PUSH
33485: LD_INT 7
33487: PUSH
33488: LD_INT 8
33490: PUSH
33491: LD_INT 9
33493: PUSH
33494: LD_INT 10
33496: PUSH
33497: LD_INT 11
33499: PUSH
33500: LD_INT 12
33502: PUSH
33503: LD_INT 13
33505: PUSH
33506: LD_INT 14
33508: PUSH
33509: LD_INT 15
33511: PUSH
33512: LD_INT 16
33514: PUSH
33515: LD_INT 17
33517: PUSH
33518: LD_INT 18
33520: PUSH
33521: LD_INT 19
33523: PUSH
33524: LD_INT 20
33526: PUSH
33527: LD_INT 21
33529: PUSH
33530: LD_INT 22
33532: PUSH
33533: LD_INT 23
33535: PUSH
33536: LD_INT 24
33538: PUSH
33539: LD_INT 25
33541: PUSH
33542: LD_INT 26
33544: PUSH
33545: LD_INT 27
33547: PUSH
33548: LD_INT 28
33550: PUSH
33551: LD_INT 29
33553: PUSH
33554: LD_INT 30
33556: PUSH
33557: LD_INT 31
33559: PUSH
33560: LD_INT 32
33562: PUSH
33563: LD_INT 33
33565: PUSH
33566: LD_INT 34
33568: PUSH
33569: LD_INT 36
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 101
33611: PUSH
33612: LD_INT 102
33614: PUSH
33615: LD_INT 103
33617: PUSH
33618: LD_INT 104
33620: PUSH
33621: LD_INT 105
33623: PUSH
33624: LD_INT 106
33626: PUSH
33627: LD_INT 107
33629: PUSH
33630: LD_INT 108
33632: PUSH
33633: LD_INT 109
33635: PUSH
33636: LD_INT 110
33638: PUSH
33639: LD_INT 111
33641: PUSH
33642: LD_INT 112
33644: PUSH
33645: LD_INT 113
33647: PUSH
33648: LD_INT 114
33650: PUSH
33651: LD_INT 116
33653: PUSH
33654: LD_INT 117
33656: PUSH
33657: LD_INT 118
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: ST_TO_ADDR
33683: GO 34690
33685: LD_INT 15
33687: DOUBLE
33688: EQUAL
33689: IFTRUE 33693
33691: GO 33917
33693: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
33694: LD_ADDR_VAR 0 2
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: LD_INT 4
33710: PUSH
33711: LD_INT 5
33713: PUSH
33714: LD_INT 6
33716: PUSH
33717: LD_INT 7
33719: PUSH
33720: LD_INT 8
33722: PUSH
33723: LD_INT 9
33725: PUSH
33726: LD_INT 10
33728: PUSH
33729: LD_INT 11
33731: PUSH
33732: LD_INT 12
33734: PUSH
33735: LD_INT 13
33737: PUSH
33738: LD_INT 14
33740: PUSH
33741: LD_INT 15
33743: PUSH
33744: LD_INT 16
33746: PUSH
33747: LD_INT 17
33749: PUSH
33750: LD_INT 18
33752: PUSH
33753: LD_INT 19
33755: PUSH
33756: LD_INT 20
33758: PUSH
33759: LD_INT 21
33761: PUSH
33762: LD_INT 22
33764: PUSH
33765: LD_INT 23
33767: PUSH
33768: LD_INT 24
33770: PUSH
33771: LD_INT 25
33773: PUSH
33774: LD_INT 26
33776: PUSH
33777: LD_INT 27
33779: PUSH
33780: LD_INT 28
33782: PUSH
33783: LD_INT 29
33785: PUSH
33786: LD_INT 30
33788: PUSH
33789: LD_INT 31
33791: PUSH
33792: LD_INT 32
33794: PUSH
33795: LD_INT 33
33797: PUSH
33798: LD_INT 34
33800: PUSH
33801: LD_INT 36
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 101
33843: PUSH
33844: LD_INT 102
33846: PUSH
33847: LD_INT 103
33849: PUSH
33850: LD_INT 104
33852: PUSH
33853: LD_INT 105
33855: PUSH
33856: LD_INT 106
33858: PUSH
33859: LD_INT 107
33861: PUSH
33862: LD_INT 108
33864: PUSH
33865: LD_INT 109
33867: PUSH
33868: LD_INT 110
33870: PUSH
33871: LD_INT 111
33873: PUSH
33874: LD_INT 112
33876: PUSH
33877: LD_INT 113
33879: PUSH
33880: LD_INT 114
33882: PUSH
33883: LD_INT 116
33885: PUSH
33886: LD_INT 117
33888: PUSH
33889: LD_INT 118
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: ST_TO_ADDR
33915: GO 34690
33917: LD_INT 16
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33925
33923: GO 34061
33925: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
33926: LD_ADDR_VAR 0 2
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: LD_INT 4
33936: PUSH
33937: LD_INT 5
33939: PUSH
33940: LD_INT 7
33942: PUSH
33943: LD_INT 11
33945: PUSH
33946: LD_INT 12
33948: PUSH
33949: LD_INT 15
33951: PUSH
33952: LD_INT 16
33954: PUSH
33955: LD_INT 20
33957: PUSH
33958: LD_INT 21
33960: PUSH
33961: LD_INT 22
33963: PUSH
33964: LD_INT 23
33966: PUSH
33967: LD_INT 25
33969: PUSH
33970: LD_INT 26
33972: PUSH
33973: LD_INT 30
33975: PUSH
33976: LD_INT 31
33978: PUSH
33979: LD_INT 32
33981: PUSH
33982: LD_INT 33
33984: PUSH
33985: LD_INT 34
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 101
34011: PUSH
34012: LD_INT 102
34014: PUSH
34015: LD_INT 103
34017: PUSH
34018: LD_INT 106
34020: PUSH
34021: LD_INT 108
34023: PUSH
34024: LD_INT 112
34026: PUSH
34027: LD_INT 113
34029: PUSH
34030: LD_INT 114
34032: PUSH
34033: LD_INT 116
34035: PUSH
34036: LD_INT 117
34038: PUSH
34039: LD_INT 118
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: ST_TO_ADDR
34059: GO 34690
34061: LD_INT 17
34063: DOUBLE
34064: EQUAL
34065: IFTRUE 34069
34067: GO 34293
34069: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34070: LD_ADDR_VAR 0 2
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 4
34086: PUSH
34087: LD_INT 5
34089: PUSH
34090: LD_INT 6
34092: PUSH
34093: LD_INT 7
34095: PUSH
34096: LD_INT 8
34098: PUSH
34099: LD_INT 9
34101: PUSH
34102: LD_INT 10
34104: PUSH
34105: LD_INT 11
34107: PUSH
34108: LD_INT 12
34110: PUSH
34111: LD_INT 13
34113: PUSH
34114: LD_INT 14
34116: PUSH
34117: LD_INT 15
34119: PUSH
34120: LD_INT 16
34122: PUSH
34123: LD_INT 17
34125: PUSH
34126: LD_INT 18
34128: PUSH
34129: LD_INT 19
34131: PUSH
34132: LD_INT 20
34134: PUSH
34135: LD_INT 21
34137: PUSH
34138: LD_INT 22
34140: PUSH
34141: LD_INT 23
34143: PUSH
34144: LD_INT 24
34146: PUSH
34147: LD_INT 25
34149: PUSH
34150: LD_INT 26
34152: PUSH
34153: LD_INT 27
34155: PUSH
34156: LD_INT 28
34158: PUSH
34159: LD_INT 29
34161: PUSH
34162: LD_INT 30
34164: PUSH
34165: LD_INT 31
34167: PUSH
34168: LD_INT 32
34170: PUSH
34171: LD_INT 33
34173: PUSH
34174: LD_INT 34
34176: PUSH
34177: LD_INT 36
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 101
34219: PUSH
34220: LD_INT 102
34222: PUSH
34223: LD_INT 103
34225: PUSH
34226: LD_INT 104
34228: PUSH
34229: LD_INT 105
34231: PUSH
34232: LD_INT 106
34234: PUSH
34235: LD_INT 107
34237: PUSH
34238: LD_INT 108
34240: PUSH
34241: LD_INT 109
34243: PUSH
34244: LD_INT 110
34246: PUSH
34247: LD_INT 111
34249: PUSH
34250: LD_INT 112
34252: PUSH
34253: LD_INT 113
34255: PUSH
34256: LD_INT 114
34258: PUSH
34259: LD_INT 116
34261: PUSH
34262: LD_INT 117
34264: PUSH
34265: LD_INT 118
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: ST_TO_ADDR
34291: GO 34690
34293: LD_INT 18
34295: DOUBLE
34296: EQUAL
34297: IFTRUE 34301
34299: GO 34449
34301: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34302: LD_ADDR_VAR 0 2
34306: PUSH
34307: LD_INT 2
34309: PUSH
34310: LD_INT 4
34312: PUSH
34313: LD_INT 5
34315: PUSH
34316: LD_INT 7
34318: PUSH
34319: LD_INT 11
34321: PUSH
34322: LD_INT 12
34324: PUSH
34325: LD_INT 15
34327: PUSH
34328: LD_INT 16
34330: PUSH
34331: LD_INT 20
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 22
34339: PUSH
34340: LD_INT 23
34342: PUSH
34343: LD_INT 25
34345: PUSH
34346: LD_INT 26
34348: PUSH
34349: LD_INT 30
34351: PUSH
34352: LD_INT 31
34354: PUSH
34355: LD_INT 32
34357: PUSH
34358: LD_INT 33
34360: PUSH
34361: LD_INT 34
34363: PUSH
34364: LD_INT 35
34366: PUSH
34367: LD_INT 36
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 101
34395: PUSH
34396: LD_INT 102
34398: PUSH
34399: LD_INT 103
34401: PUSH
34402: LD_INT 106
34404: PUSH
34405: LD_INT 108
34407: PUSH
34408: LD_INT 112
34410: PUSH
34411: LD_INT 113
34413: PUSH
34414: LD_INT 114
34416: PUSH
34417: LD_INT 115
34419: PUSH
34420: LD_INT 116
34422: PUSH
34423: LD_INT 117
34425: PUSH
34426: LD_INT 118
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: ST_TO_ADDR
34447: GO 34690
34449: LD_INT 19
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34689
34457: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 4
34474: PUSH
34475: LD_INT 5
34477: PUSH
34478: LD_INT 6
34480: PUSH
34481: LD_INT 7
34483: PUSH
34484: LD_INT 8
34486: PUSH
34487: LD_INT 9
34489: PUSH
34490: LD_INT 10
34492: PUSH
34493: LD_INT 11
34495: PUSH
34496: LD_INT 12
34498: PUSH
34499: LD_INT 13
34501: PUSH
34502: LD_INT 14
34504: PUSH
34505: LD_INT 15
34507: PUSH
34508: LD_INT 16
34510: PUSH
34511: LD_INT 17
34513: PUSH
34514: LD_INT 18
34516: PUSH
34517: LD_INT 19
34519: PUSH
34520: LD_INT 20
34522: PUSH
34523: LD_INT 21
34525: PUSH
34526: LD_INT 22
34528: PUSH
34529: LD_INT 23
34531: PUSH
34532: LD_INT 24
34534: PUSH
34535: LD_INT 25
34537: PUSH
34538: LD_INT 26
34540: PUSH
34541: LD_INT 27
34543: PUSH
34544: LD_INT 28
34546: PUSH
34547: LD_INT 29
34549: PUSH
34550: LD_INT 30
34552: PUSH
34553: LD_INT 31
34555: PUSH
34556: LD_INT 32
34558: PUSH
34559: LD_INT 33
34561: PUSH
34562: LD_INT 34
34564: PUSH
34565: LD_INT 35
34567: PUSH
34568: LD_INT 36
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 101
34611: PUSH
34612: LD_INT 102
34614: PUSH
34615: LD_INT 103
34617: PUSH
34618: LD_INT 104
34620: PUSH
34621: LD_INT 105
34623: PUSH
34624: LD_INT 106
34626: PUSH
34627: LD_INT 107
34629: PUSH
34630: LD_INT 108
34632: PUSH
34633: LD_INT 109
34635: PUSH
34636: LD_INT 110
34638: PUSH
34639: LD_INT 111
34641: PUSH
34642: LD_INT 112
34644: PUSH
34645: LD_INT 113
34647: PUSH
34648: LD_INT 114
34650: PUSH
34651: LD_INT 115
34653: PUSH
34654: LD_INT 116
34656: PUSH
34657: LD_INT 117
34659: PUSH
34660: LD_INT 118
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: ST_TO_ADDR
34687: GO 34690
34689: POP
// end else
34690: GO 34921
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
34692: LD_ADDR_VAR 0 2
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: LD_INT 3
34705: PUSH
34706: LD_INT 4
34708: PUSH
34709: LD_INT 5
34711: PUSH
34712: LD_INT 6
34714: PUSH
34715: LD_INT 7
34717: PUSH
34718: LD_INT 8
34720: PUSH
34721: LD_INT 9
34723: PUSH
34724: LD_INT 10
34726: PUSH
34727: LD_INT 11
34729: PUSH
34730: LD_INT 12
34732: PUSH
34733: LD_INT 13
34735: PUSH
34736: LD_INT 14
34738: PUSH
34739: LD_INT 15
34741: PUSH
34742: LD_INT 16
34744: PUSH
34745: LD_INT 17
34747: PUSH
34748: LD_INT 18
34750: PUSH
34751: LD_INT 19
34753: PUSH
34754: LD_INT 20
34756: PUSH
34757: LD_INT 21
34759: PUSH
34760: LD_INT 22
34762: PUSH
34763: LD_INT 23
34765: PUSH
34766: LD_INT 24
34768: PUSH
34769: LD_INT 25
34771: PUSH
34772: LD_INT 26
34774: PUSH
34775: LD_INT 27
34777: PUSH
34778: LD_INT 28
34780: PUSH
34781: LD_INT 29
34783: PUSH
34784: LD_INT 30
34786: PUSH
34787: LD_INT 31
34789: PUSH
34790: LD_INT 32
34792: PUSH
34793: LD_INT 33
34795: PUSH
34796: LD_INT 34
34798: PUSH
34799: LD_INT 35
34801: PUSH
34802: LD_INT 36
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 101
34845: PUSH
34846: LD_INT 102
34848: PUSH
34849: LD_INT 103
34851: PUSH
34852: LD_INT 104
34854: PUSH
34855: LD_INT 105
34857: PUSH
34858: LD_INT 106
34860: PUSH
34861: LD_INT 107
34863: PUSH
34864: LD_INT 108
34866: PUSH
34867: LD_INT 109
34869: PUSH
34870: LD_INT 110
34872: PUSH
34873: LD_INT 111
34875: PUSH
34876: LD_INT 112
34878: PUSH
34879: LD_INT 113
34881: PUSH
34882: LD_INT 114
34884: PUSH
34885: LD_INT 115
34887: PUSH
34888: LD_INT 116
34890: PUSH
34891: LD_INT 117
34893: PUSH
34894: LD_INT 118
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: ST_TO_ADDR
// if result then
34921: LD_VAR 0 2
34925: IFFALSE 35711
// begin normal :=  ;
34927: LD_ADDR_VAR 0 5
34931: PUSH
34932: LD_STRING 
34934: ST_TO_ADDR
// hardcore :=  ;
34935: LD_ADDR_VAR 0 6
34939: PUSH
34940: LD_STRING 
34942: ST_TO_ADDR
// active :=  ;
34943: LD_ADDR_VAR 0 7
34947: PUSH
34948: LD_STRING 
34950: ST_TO_ADDR
// for i = 1 to normalCounter do
34951: LD_ADDR_VAR 0 8
34955: PUSH
34956: DOUBLE
34957: LD_INT 1
34959: DEC
34960: ST_TO_ADDR
34961: LD_EXP 89
34965: PUSH
34966: FOR_TO
34967: IFFALSE 35068
// begin tmp := 0 ;
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_STRING 0
34976: ST_TO_ADDR
// if result [ 1 ] then
34977: LD_VAR 0 2
34981: PUSH
34982: LD_INT 1
34984: ARRAY
34985: IFFALSE 35050
// if result [ 1 ] [ 1 ] = i then
34987: LD_VAR 0 2
34991: PUSH
34992: LD_INT 1
34994: ARRAY
34995: PUSH
34996: LD_INT 1
34998: ARRAY
34999: PUSH
35000: LD_VAR 0 8
35004: EQUAL
35005: IFFALSE 35050
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35007: LD_ADDR_VAR 0 2
35011: PUSH
35012: LD_VAR 0 2
35016: PPUSH
35017: LD_INT 1
35019: PPUSH
35020: LD_VAR 0 2
35024: PUSH
35025: LD_INT 1
35027: ARRAY
35028: PPUSH
35029: LD_INT 1
35031: PPUSH
35032: CALL_OW 3
35036: PPUSH
35037: CALL_OW 1
35041: ST_TO_ADDR
// tmp := 1 ;
35042: LD_ADDR_VAR 0 3
35046: PUSH
35047: LD_STRING 1
35049: ST_TO_ADDR
// end ; normal := normal & tmp ;
35050: LD_ADDR_VAR 0 5
35054: PUSH
35055: LD_VAR 0 5
35059: PUSH
35060: LD_VAR 0 3
35064: STR
35065: ST_TO_ADDR
// end ;
35066: GO 34966
35068: POP
35069: POP
// for i = 1 to hardcoreCounter do
35070: LD_ADDR_VAR 0 8
35074: PUSH
35075: DOUBLE
35076: LD_INT 1
35078: DEC
35079: ST_TO_ADDR
35080: LD_EXP 90
35084: PUSH
35085: FOR_TO
35086: IFFALSE 35191
// begin tmp := 0 ;
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_STRING 0
35095: ST_TO_ADDR
// if result [ 2 ] then
35096: LD_VAR 0 2
35100: PUSH
35101: LD_INT 2
35103: ARRAY
35104: IFFALSE 35173
// if result [ 2 ] [ 1 ] = 100 + i then
35106: LD_VAR 0 2
35110: PUSH
35111: LD_INT 2
35113: ARRAY
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: PUSH
35119: LD_INT 100
35121: PUSH
35122: LD_VAR 0 8
35126: PLUS
35127: EQUAL
35128: IFFALSE 35173
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35130: LD_ADDR_VAR 0 2
35134: PUSH
35135: LD_VAR 0 2
35139: PPUSH
35140: LD_INT 2
35142: PPUSH
35143: LD_VAR 0 2
35147: PUSH
35148: LD_INT 2
35150: ARRAY
35151: PPUSH
35152: LD_INT 1
35154: PPUSH
35155: CALL_OW 3
35159: PPUSH
35160: CALL_OW 1
35164: ST_TO_ADDR
// tmp := 1 ;
35165: LD_ADDR_VAR 0 3
35169: PUSH
35170: LD_STRING 1
35172: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35173: LD_ADDR_VAR 0 6
35177: PUSH
35178: LD_VAR 0 6
35182: PUSH
35183: LD_VAR 0 3
35187: STR
35188: ST_TO_ADDR
// end ;
35189: GO 35085
35191: POP
35192: POP
// if isGameLoad then
35193: LD_VAR 0 1
35197: IFFALSE 35672
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35199: LD_ADDR_VAR 0 4
35203: PUSH
35204: LD_EXP 93
35208: PUSH
35209: LD_EXP 92
35213: PUSH
35214: LD_EXP 94
35218: PUSH
35219: LD_EXP 91
35223: PUSH
35224: LD_EXP 95
35228: PUSH
35229: LD_EXP 96
35233: PUSH
35234: LD_EXP 97
35238: PUSH
35239: LD_EXP 98
35243: PUSH
35244: LD_EXP 99
35248: PUSH
35249: LD_EXP 100
35253: PUSH
35254: LD_EXP 101
35258: PUSH
35259: LD_EXP 102
35263: PUSH
35264: LD_EXP 103
35268: PUSH
35269: LD_EXP 104
35273: PUSH
35274: LD_EXP 112
35278: PUSH
35279: LD_EXP 113
35283: PUSH
35284: LD_EXP 114
35288: PUSH
35289: LD_EXP 115
35293: PUSH
35294: LD_EXP 117
35298: PUSH
35299: LD_EXP 118
35303: PUSH
35304: LD_EXP 119
35308: PUSH
35309: LD_EXP 122
35313: PUSH
35314: LD_EXP 124
35318: PUSH
35319: LD_EXP 125
35323: PUSH
35324: LD_EXP 126
35328: PUSH
35329: LD_EXP 128
35333: PUSH
35334: LD_EXP 129
35338: PUSH
35339: LD_EXP 132
35343: PUSH
35344: LD_EXP 133
35348: PUSH
35349: LD_EXP 134
35353: PUSH
35354: LD_EXP 135
35358: PUSH
35359: LD_EXP 136
35363: PUSH
35364: LD_EXP 137
35368: PUSH
35369: LD_EXP 138
35373: PUSH
35374: LD_EXP 139
35378: PUSH
35379: LD_EXP 140
35383: PUSH
35384: LD_EXP 105
35388: PUSH
35389: LD_EXP 106
35393: PUSH
35394: LD_EXP 109
35398: PUSH
35399: LD_EXP 110
35403: PUSH
35404: LD_EXP 111
35408: PUSH
35409: LD_EXP 107
35413: PUSH
35414: LD_EXP 108
35418: PUSH
35419: LD_EXP 116
35423: PUSH
35424: LD_EXP 120
35428: PUSH
35429: LD_EXP 121
35433: PUSH
35434: LD_EXP 123
35438: PUSH
35439: LD_EXP 127
35443: PUSH
35444: LD_EXP 130
35448: PUSH
35449: LD_EXP 131
35453: PUSH
35454: LD_EXP 141
35458: PUSH
35459: LD_EXP 142
35463: PUSH
35464: LD_EXP 143
35468: PUSH
35469: LD_EXP 144
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
// tmp :=  ;
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_STRING 
35537: ST_TO_ADDR
// for i = 1 to normalCounter do
35538: LD_ADDR_VAR 0 8
35542: PUSH
35543: DOUBLE
35544: LD_INT 1
35546: DEC
35547: ST_TO_ADDR
35548: LD_EXP 89
35552: PUSH
35553: FOR_TO
35554: IFFALSE 35590
// begin if flags [ i ] then
35556: LD_VAR 0 4
35560: PUSH
35561: LD_VAR 0 8
35565: ARRAY
35566: IFFALSE 35588
// tmp := tmp & i & ; ;
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_VAR 0 3
35577: PUSH
35578: LD_VAR 0 8
35582: STR
35583: PUSH
35584: LD_STRING ;
35586: STR
35587: ST_TO_ADDR
// end ;
35588: GO 35553
35590: POP
35591: POP
// for i = 1 to hardcoreCounter do
35592: LD_ADDR_VAR 0 8
35596: PUSH
35597: DOUBLE
35598: LD_INT 1
35600: DEC
35601: ST_TO_ADDR
35602: LD_EXP 90
35606: PUSH
35607: FOR_TO
35608: IFFALSE 35654
// begin if flags [ normalCounter + i ] then
35610: LD_VAR 0 4
35614: PUSH
35615: LD_EXP 89
35619: PUSH
35620: LD_VAR 0 8
35624: PLUS
35625: ARRAY
35626: IFFALSE 35652
// tmp := tmp & ( 100 + i ) & ; ;
35628: LD_ADDR_VAR 0 3
35632: PUSH
35633: LD_VAR 0 3
35637: PUSH
35638: LD_INT 100
35640: PUSH
35641: LD_VAR 0 8
35645: PLUS
35646: STR
35647: PUSH
35648: LD_STRING ;
35650: STR
35651: ST_TO_ADDR
// end ;
35652: GO 35607
35654: POP
35655: POP
// if tmp then
35656: LD_VAR 0 3
35660: IFFALSE 35672
// active := tmp ;
35662: LD_ADDR_VAR 0 7
35666: PUSH
35667: LD_VAR 0 3
35671: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
35672: LD_STRING getStreamItemsFromMission("
35674: PUSH
35675: LD_VAR 0 5
35679: STR
35680: PUSH
35681: LD_STRING ","
35683: STR
35684: PUSH
35685: LD_VAR 0 6
35689: STR
35690: PUSH
35691: LD_STRING ","
35693: STR
35694: PUSH
35695: LD_VAR 0 7
35699: STR
35700: PUSH
35701: LD_STRING ")
35703: STR
35704: PPUSH
35705: CALL_OW 559
// end else
35709: GO 35718
// ToLua ( getStreamItemsFromMission("","","") ) ;
35711: LD_STRING getStreamItemsFromMission("","","")
35713: PPUSH
35714: CALL_OW 559
// end ;
35718: LD_VAR 0 2
35722: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
35723: LD_EXP 88
35727: PUSH
35728: LD_EXP 93
35732: AND
35733: IFFALSE 35857
35735: GO 35737
35737: DISABLE
35738: LD_INT 0
35740: PPUSH
35741: PPUSH
// begin enable ;
35742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
35743: LD_ADDR_VAR 0 2
35747: PUSH
35748: LD_INT 22
35750: PUSH
35751: LD_OWVAR 2
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: LD_INT 34
35765: PUSH
35766: LD_INT 7
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 34
35775: PUSH
35776: LD_INT 45
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 34
35785: PUSH
35786: LD_INT 28
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 34
35795: PUSH
35796: LD_INT 47
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PPUSH
35814: CALL_OW 69
35818: ST_TO_ADDR
// if not tmp then
35819: LD_VAR 0 2
35823: NOT
35824: IFFALSE 35828
// exit ;
35826: GO 35857
// for i in tmp do
35828: LD_ADDR_VAR 0 1
35832: PUSH
35833: LD_VAR 0 2
35837: PUSH
35838: FOR_IN
35839: IFFALSE 35855
// begin SetLives ( i , 0 ) ;
35841: LD_VAR 0 1
35845: PPUSH
35846: LD_INT 0
35848: PPUSH
35849: CALL_OW 234
// end ;
35853: GO 35838
35855: POP
35856: POP
// end ;
35857: PPOPN 2
35859: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
35860: LD_EXP 88
35864: PUSH
35865: LD_EXP 94
35869: AND
35870: IFFALSE 35954
35872: GO 35874
35874: DISABLE
35875: LD_INT 0
35877: PPUSH
35878: PPUSH
// begin enable ;
35879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
35880: LD_ADDR_VAR 0 2
35884: PUSH
35885: LD_INT 22
35887: PUSH
35888: LD_OWVAR 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 32
35899: PUSH
35900: LD_INT 3
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PPUSH
35911: CALL_OW 69
35915: ST_TO_ADDR
// if not tmp then
35916: LD_VAR 0 2
35920: NOT
35921: IFFALSE 35925
// exit ;
35923: GO 35954
// for i in tmp do
35925: LD_ADDR_VAR 0 1
35929: PUSH
35930: LD_VAR 0 2
35934: PUSH
35935: FOR_IN
35936: IFFALSE 35952
// begin SetLives ( i , 0 ) ;
35938: LD_VAR 0 1
35942: PPUSH
35943: LD_INT 0
35945: PPUSH
35946: CALL_OW 234
// end ;
35950: GO 35935
35952: POP
35953: POP
// end ;
35954: PPOPN 2
35956: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
35957: LD_EXP 88
35961: PUSH
35962: LD_EXP 91
35966: AND
35967: IFFALSE 36060
35969: GO 35971
35971: DISABLE
35972: LD_INT 0
35974: PPUSH
// begin enable ;
35975: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
35976: LD_ADDR_VAR 0 1
35980: PUSH
35981: LD_INT 22
35983: PUSH
35984: LD_OWVAR 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 25
35998: PUSH
35999: LD_INT 5
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 25
36008: PUSH
36009: LD_INT 9
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 25
36018: PUSH
36019: LD_INT 8
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PPUSH
36036: CALL_OW 69
36040: PUSH
36041: FOR_IN
36042: IFFALSE 36058
// begin SetClass ( i , 1 ) ;
36044: LD_VAR 0 1
36048: PPUSH
36049: LD_INT 1
36051: PPUSH
36052: CALL_OW 336
// end ;
36056: GO 36041
36058: POP
36059: POP
// end ;
36060: PPOPN 1
36062: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36063: LD_EXP 88
36067: PUSH
36068: LD_EXP 92
36072: AND
36073: PUSH
36074: LD_OWVAR 65
36078: PUSH
36079: LD_INT 7
36081: LESS
36082: AND
36083: IFFALSE 36097
36085: GO 36087
36087: DISABLE
// begin enable ;
36088: ENABLE
// game_speed := 7 ;
36089: LD_ADDR_OWVAR 65
36093: PUSH
36094: LD_INT 7
36096: ST_TO_ADDR
// end ;
36097: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36098: LD_EXP 88
36102: PUSH
36103: LD_EXP 95
36107: AND
36108: IFFALSE 36310
36110: GO 36112
36112: DISABLE
36113: LD_INT 0
36115: PPUSH
36116: PPUSH
36117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36118: LD_ADDR_VAR 0 3
36122: PUSH
36123: LD_INT 81
36125: PUSH
36126: LD_OWVAR 2
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 21
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PPUSH
36149: CALL_OW 69
36153: ST_TO_ADDR
// if not tmp then
36154: LD_VAR 0 3
36158: NOT
36159: IFFALSE 36163
// exit ;
36161: GO 36310
// if tmp > 5 then
36163: LD_VAR 0 3
36167: PUSH
36168: LD_INT 5
36170: GREATER
36171: IFFALSE 36183
// k := 5 else
36173: LD_ADDR_VAR 0 2
36177: PUSH
36178: LD_INT 5
36180: ST_TO_ADDR
36181: GO 36193
// k := tmp ;
36183: LD_ADDR_VAR 0 2
36187: PUSH
36188: LD_VAR 0 3
36192: ST_TO_ADDR
// for i := 1 to k do
36193: LD_ADDR_VAR 0 1
36197: PUSH
36198: DOUBLE
36199: LD_INT 1
36201: DEC
36202: ST_TO_ADDR
36203: LD_VAR 0 2
36207: PUSH
36208: FOR_TO
36209: IFFALSE 36308
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36211: LD_VAR 0 3
36215: PUSH
36216: LD_VAR 0 1
36220: ARRAY
36221: PPUSH
36222: LD_VAR 0 1
36226: PUSH
36227: LD_INT 4
36229: MOD
36230: PUSH
36231: LD_INT 1
36233: PLUS
36234: PPUSH
36235: CALL_OW 259
36239: PUSH
36240: LD_INT 10
36242: LESS
36243: IFFALSE 36306
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36245: LD_VAR 0 3
36249: PUSH
36250: LD_VAR 0 1
36254: ARRAY
36255: PPUSH
36256: LD_VAR 0 1
36260: PUSH
36261: LD_INT 4
36263: MOD
36264: PUSH
36265: LD_INT 1
36267: PLUS
36268: PPUSH
36269: LD_VAR 0 3
36273: PUSH
36274: LD_VAR 0 1
36278: ARRAY
36279: PPUSH
36280: LD_VAR 0 1
36284: PUSH
36285: LD_INT 4
36287: MOD
36288: PUSH
36289: LD_INT 1
36291: PLUS
36292: PPUSH
36293: CALL_OW 259
36297: PUSH
36298: LD_INT 1
36300: PLUS
36301: PPUSH
36302: CALL_OW 237
36306: GO 36208
36308: POP
36309: POP
// end ;
36310: PPOPN 3
36312: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36313: LD_EXP 88
36317: PUSH
36318: LD_EXP 96
36322: AND
36323: IFFALSE 36343
36325: GO 36327
36327: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36328: LD_INT 4
36330: PPUSH
36331: LD_OWVAR 2
36335: PPUSH
36336: LD_INT 0
36338: PPUSH
36339: CALL_OW 324
36343: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36344: LD_EXP 88
36348: PUSH
36349: LD_EXP 125
36353: AND
36354: IFFALSE 36374
36356: GO 36358
36358: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36359: LD_INT 19
36361: PPUSH
36362: LD_OWVAR 2
36366: PPUSH
36367: LD_INT 0
36369: PPUSH
36370: CALL_OW 324
36374: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36375: LD_EXP 88
36379: PUSH
36380: LD_EXP 97
36384: AND
36385: IFFALSE 36487
36387: GO 36389
36389: DISABLE
36390: LD_INT 0
36392: PPUSH
36393: PPUSH
// begin enable ;
36394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36395: LD_ADDR_VAR 0 2
36399: PUSH
36400: LD_INT 22
36402: PUSH
36403: LD_OWVAR 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 34
36417: PUSH
36418: LD_INT 11
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 34
36427: PUSH
36428: LD_INT 30
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PPUSH
36444: CALL_OW 69
36448: ST_TO_ADDR
// if not tmp then
36449: LD_VAR 0 2
36453: NOT
36454: IFFALSE 36458
// exit ;
36456: GO 36487
// for i in tmp do
36458: LD_ADDR_VAR 0 1
36462: PUSH
36463: LD_VAR 0 2
36467: PUSH
36468: FOR_IN
36469: IFFALSE 36485
// begin SetLives ( i , 0 ) ;
36471: LD_VAR 0 1
36475: PPUSH
36476: LD_INT 0
36478: PPUSH
36479: CALL_OW 234
// end ;
36483: GO 36468
36485: POP
36486: POP
// end ;
36487: PPOPN 2
36489: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36490: LD_EXP 88
36494: PUSH
36495: LD_EXP 98
36499: AND
36500: IFFALSE 36520
36502: GO 36504
36504: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36505: LD_INT 32
36507: PPUSH
36508: LD_OWVAR 2
36512: PPUSH
36513: LD_INT 0
36515: PPUSH
36516: CALL_OW 324
36520: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36521: LD_EXP 88
36525: PUSH
36526: LD_EXP 99
36530: AND
36531: IFFALSE 36712
36533: GO 36535
36535: DISABLE
36536: LD_INT 0
36538: PPUSH
36539: PPUSH
36540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36541: LD_ADDR_VAR 0 2
36545: PUSH
36546: LD_INT 22
36548: PUSH
36549: LD_OWVAR 2
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 33
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PPUSH
36572: CALL_OW 69
36576: ST_TO_ADDR
// if not tmp then
36577: LD_VAR 0 2
36581: NOT
36582: IFFALSE 36586
// exit ;
36584: GO 36712
// side := 0 ;
36586: LD_ADDR_VAR 0 3
36590: PUSH
36591: LD_INT 0
36593: ST_TO_ADDR
// for i := 1 to 8 do
36594: LD_ADDR_VAR 0 1
36598: PUSH
36599: DOUBLE
36600: LD_INT 1
36602: DEC
36603: ST_TO_ADDR
36604: LD_INT 8
36606: PUSH
36607: FOR_TO
36608: IFFALSE 36656
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36610: LD_OWVAR 2
36614: PUSH
36615: LD_VAR 0 1
36619: NONEQUAL
36620: PUSH
36621: LD_OWVAR 2
36625: PPUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 81
36635: PUSH
36636: LD_INT 2
36638: EQUAL
36639: AND
36640: IFFALSE 36654
// begin side := i ;
36642: LD_ADDR_VAR 0 3
36646: PUSH
36647: LD_VAR 0 1
36651: ST_TO_ADDR
// break ;
36652: GO 36656
// end ;
36654: GO 36607
36656: POP
36657: POP
// if not side then
36658: LD_VAR 0 3
36662: NOT
36663: IFFALSE 36667
// exit ;
36665: GO 36712
// for i := 1 to tmp do
36667: LD_ADDR_VAR 0 1
36671: PUSH
36672: DOUBLE
36673: LD_INT 1
36675: DEC
36676: ST_TO_ADDR
36677: LD_VAR 0 2
36681: PUSH
36682: FOR_TO
36683: IFFALSE 36710
// if Prob ( 60 ) then
36685: LD_INT 60
36687: PPUSH
36688: CALL_OW 13
36692: IFFALSE 36708
// SetSide ( i , side ) ;
36694: LD_VAR 0 1
36698: PPUSH
36699: LD_VAR 0 3
36703: PPUSH
36704: CALL_OW 235
36708: GO 36682
36710: POP
36711: POP
// end ;
36712: PPOPN 3
36714: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
36715: LD_EXP 88
36719: PUSH
36720: LD_EXP 101
36724: AND
36725: IFFALSE 36844
36727: GO 36729
36729: DISABLE
36730: LD_INT 0
36732: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
36733: LD_ADDR_VAR 0 1
36737: PUSH
36738: LD_INT 22
36740: PUSH
36741: LD_OWVAR 2
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 21
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 3
36762: PUSH
36763: LD_INT 23
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: PPUSH
36782: CALL_OW 69
36786: PUSH
36787: FOR_IN
36788: IFFALSE 36842
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
36790: LD_VAR 0 1
36794: PPUSH
36795: CALL_OW 257
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 3
36808: PUSH
36809: LD_INT 4
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: IN
36818: IFFALSE 36840
// SetClass ( un , rand ( 1 , 4 ) ) ;
36820: LD_VAR 0 1
36824: PPUSH
36825: LD_INT 1
36827: PPUSH
36828: LD_INT 4
36830: PPUSH
36831: CALL_OW 12
36835: PPUSH
36836: CALL_OW 336
36840: GO 36787
36842: POP
36843: POP
// end ;
36844: PPOPN 1
36846: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
36847: LD_EXP 88
36851: PUSH
36852: LD_EXP 100
36856: AND
36857: IFFALSE 36936
36859: GO 36861
36861: DISABLE
36862: LD_INT 0
36864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36865: LD_ADDR_VAR 0 1
36869: PUSH
36870: LD_INT 22
36872: PUSH
36873: LD_OWVAR 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 21
36884: PUSH
36885: LD_INT 3
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PPUSH
36896: CALL_OW 69
36900: ST_TO_ADDR
// if not tmp then
36901: LD_VAR 0 1
36905: NOT
36906: IFFALSE 36910
// exit ;
36908: GO 36936
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
36910: LD_VAR 0 1
36914: PUSH
36915: LD_INT 1
36917: PPUSH
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL_OW 12
36927: ARRAY
36928: PPUSH
36929: LD_INT 100
36931: PPUSH
36932: CALL_OW 234
// end ;
36936: PPOPN 1
36938: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
36939: LD_EXP 88
36943: PUSH
36944: LD_EXP 102
36948: AND
36949: IFFALSE 37047
36951: GO 36953
36953: DISABLE
36954: LD_INT 0
36956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36957: LD_ADDR_VAR 0 1
36961: PUSH
36962: LD_INT 22
36964: PUSH
36965: LD_OWVAR 2
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 21
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PPUSH
36988: CALL_OW 69
36992: ST_TO_ADDR
// if not tmp then
36993: LD_VAR 0 1
36997: NOT
36998: IFFALSE 37002
// exit ;
37000: GO 37047
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37002: LD_VAR 0 1
37006: PUSH
37007: LD_INT 1
37009: PPUSH
37010: LD_VAR 0 1
37014: PPUSH
37015: CALL_OW 12
37019: ARRAY
37020: PPUSH
37021: LD_INT 1
37023: PPUSH
37024: LD_INT 4
37026: PPUSH
37027: CALL_OW 12
37031: PPUSH
37032: LD_INT 3000
37034: PPUSH
37035: LD_INT 9000
37037: PPUSH
37038: CALL_OW 12
37042: PPUSH
37043: CALL_OW 492
// end ;
37047: PPOPN 1
37049: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37050: LD_EXP 88
37054: PUSH
37055: LD_EXP 103
37059: AND
37060: IFFALSE 37080
37062: GO 37064
37064: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37065: LD_INT 1
37067: PPUSH
37068: LD_OWVAR 2
37072: PPUSH
37073: LD_INT 0
37075: PPUSH
37076: CALL_OW 324
37080: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37081: LD_EXP 88
37085: PUSH
37086: LD_EXP 104
37090: AND
37091: IFFALSE 37174
37093: GO 37095
37095: DISABLE
37096: LD_INT 0
37098: PPUSH
37099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37100: LD_ADDR_VAR 0 2
37104: PUSH
37105: LD_INT 22
37107: PUSH
37108: LD_OWVAR 2
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 21
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PPUSH
37131: CALL_OW 69
37135: ST_TO_ADDR
// if not tmp then
37136: LD_VAR 0 2
37140: NOT
37141: IFFALSE 37145
// exit ;
37143: GO 37174
// for i in tmp do
37145: LD_ADDR_VAR 0 1
37149: PUSH
37150: LD_VAR 0 2
37154: PUSH
37155: FOR_IN
37156: IFFALSE 37172
// SetBLevel ( i , 10 ) ;
37158: LD_VAR 0 1
37162: PPUSH
37163: LD_INT 10
37165: PPUSH
37166: CALL_OW 241
37170: GO 37155
37172: POP
37173: POP
// end ;
37174: PPOPN 2
37176: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37177: LD_EXP 88
37181: PUSH
37182: LD_EXP 105
37186: AND
37187: IFFALSE 37298
37189: GO 37191
37191: DISABLE
37192: LD_INT 0
37194: PPUSH
37195: PPUSH
37196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37197: LD_ADDR_VAR 0 3
37201: PUSH
37202: LD_INT 22
37204: PUSH
37205: LD_OWVAR 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 25
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PPUSH
37228: CALL_OW 69
37232: ST_TO_ADDR
// if not tmp then
37233: LD_VAR 0 3
37237: NOT
37238: IFFALSE 37242
// exit ;
37240: GO 37298
// un := tmp [ rand ( 1 , tmp ) ] ;
37242: LD_ADDR_VAR 0 2
37246: PUSH
37247: LD_VAR 0 3
37251: PUSH
37252: LD_INT 1
37254: PPUSH
37255: LD_VAR 0 3
37259: PPUSH
37260: CALL_OW 12
37264: ARRAY
37265: ST_TO_ADDR
// if Crawls ( un ) then
37266: LD_VAR 0 2
37270: PPUSH
37271: CALL_OW 318
37275: IFFALSE 37286
// ComWalk ( un ) ;
37277: LD_VAR 0 2
37281: PPUSH
37282: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37286: LD_VAR 0 2
37290: PPUSH
37291: LD_INT 5
37293: PPUSH
37294: CALL_OW 336
// end ;
37298: PPOPN 3
37300: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37301: LD_EXP 88
37305: PUSH
37306: LD_EXP 106
37310: AND
37311: PUSH
37312: LD_OWVAR 67
37316: PUSH
37317: LD_INT 4
37319: LESS
37320: AND
37321: IFFALSE 37340
37323: GO 37325
37325: DISABLE
// begin Difficulty := Difficulty + 1 ;
37326: LD_ADDR_OWVAR 67
37330: PUSH
37331: LD_OWVAR 67
37335: PUSH
37336: LD_INT 1
37338: PLUS
37339: ST_TO_ADDR
// end ;
37340: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37341: LD_EXP 88
37345: PUSH
37346: LD_EXP 107
37350: AND
37351: IFFALSE 37454
37353: GO 37355
37355: DISABLE
37356: LD_INT 0
37358: PPUSH
// begin for i := 1 to 5 do
37359: LD_ADDR_VAR 0 1
37363: PUSH
37364: DOUBLE
37365: LD_INT 1
37367: DEC
37368: ST_TO_ADDR
37369: LD_INT 5
37371: PUSH
37372: FOR_TO
37373: IFFALSE 37452
// begin uc_nation := nation_nature ;
37375: LD_ADDR_OWVAR 21
37379: PUSH
37380: LD_INT 0
37382: ST_TO_ADDR
// uc_side := 0 ;
37383: LD_ADDR_OWVAR 20
37387: PUSH
37388: LD_INT 0
37390: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37391: LD_ADDR_OWVAR 29
37395: PUSH
37396: LD_INT 12
37398: PUSH
37399: LD_INT 12
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: ST_TO_ADDR
// hc_agressivity := 20 ;
37406: LD_ADDR_OWVAR 35
37410: PUSH
37411: LD_INT 20
37413: ST_TO_ADDR
// hc_class := class_tiger ;
37414: LD_ADDR_OWVAR 28
37418: PUSH
37419: LD_INT 14
37421: ST_TO_ADDR
// hc_gallery :=  ;
37422: LD_ADDR_OWVAR 33
37426: PUSH
37427: LD_STRING 
37429: ST_TO_ADDR
// hc_name :=  ;
37430: LD_ADDR_OWVAR 26
37434: PUSH
37435: LD_STRING 
37437: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37438: CALL_OW 44
37442: PPUSH
37443: LD_INT 0
37445: PPUSH
37446: CALL_OW 51
// end ;
37450: GO 37372
37452: POP
37453: POP
// end ;
37454: PPOPN 1
37456: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37457: LD_EXP 88
37461: PUSH
37462: LD_EXP 108
37466: AND
37467: IFFALSE 37476
37469: GO 37471
37471: DISABLE
// StreamSibBomb ;
37472: CALL 37477 0 0
37476: END
// export function StreamSibBomb ; var i , x , y ; begin
37477: LD_INT 0
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
// result := false ;
37483: LD_ADDR_VAR 0 1
37487: PUSH
37488: LD_INT 0
37490: ST_TO_ADDR
// for i := 1 to 16 do
37491: LD_ADDR_VAR 0 2
37495: PUSH
37496: DOUBLE
37497: LD_INT 1
37499: DEC
37500: ST_TO_ADDR
37501: LD_INT 16
37503: PUSH
37504: FOR_TO
37505: IFFALSE 37704
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37507: LD_ADDR_VAR 0 3
37511: PUSH
37512: LD_INT 10
37514: PUSH
37515: LD_INT 20
37517: PUSH
37518: LD_INT 30
37520: PUSH
37521: LD_INT 40
37523: PUSH
37524: LD_INT 50
37526: PUSH
37527: LD_INT 60
37529: PUSH
37530: LD_INT 70
37532: PUSH
37533: LD_INT 80
37535: PUSH
37536: LD_INT 90
37538: PUSH
37539: LD_INT 100
37541: PUSH
37542: LD_INT 110
37544: PUSH
37545: LD_INT 120
37547: PUSH
37548: LD_INT 130
37550: PUSH
37551: LD_INT 140
37553: PUSH
37554: LD_INT 150
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PPUSH
37577: LD_INT 15
37579: PPUSH
37580: CALL_OW 12
37584: ARRAY
37585: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37586: LD_ADDR_VAR 0 4
37590: PUSH
37591: LD_INT 10
37593: PUSH
37594: LD_INT 20
37596: PUSH
37597: LD_INT 30
37599: PUSH
37600: LD_INT 40
37602: PUSH
37603: LD_INT 50
37605: PUSH
37606: LD_INT 60
37608: PUSH
37609: LD_INT 70
37611: PUSH
37612: LD_INT 80
37614: PUSH
37615: LD_INT 90
37617: PUSH
37618: LD_INT 100
37620: PUSH
37621: LD_INT 110
37623: PUSH
37624: LD_INT 120
37626: PUSH
37627: LD_INT 130
37629: PUSH
37630: LD_INT 140
37632: PUSH
37633: LD_INT 150
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PPUSH
37656: LD_INT 15
37658: PPUSH
37659: CALL_OW 12
37663: ARRAY
37664: ST_TO_ADDR
// if ValidHex ( x , y ) then
37665: LD_VAR 0 3
37669: PPUSH
37670: LD_VAR 0 4
37674: PPUSH
37675: CALL_OW 488
37679: IFFALSE 37702
// begin result := [ x , y ] ;
37681: LD_ADDR_VAR 0 1
37685: PUSH
37686: LD_VAR 0 3
37690: PUSH
37691: LD_VAR 0 4
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// break ;
37700: GO 37704
// end ; end ;
37702: GO 37504
37704: POP
37705: POP
// if result then
37706: LD_VAR 0 1
37710: IFFALSE 37770
// begin ToLua ( playSibBomb() ) ;
37712: LD_STRING playSibBomb()
37714: PPUSH
37715: CALL_OW 559
// wait ( 0 0$14 ) ;
37719: LD_INT 490
37721: PPUSH
37722: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
37726: LD_VAR 0 1
37730: PUSH
37731: LD_INT 1
37733: ARRAY
37734: PPUSH
37735: LD_VAR 0 1
37739: PUSH
37740: LD_INT 2
37742: ARRAY
37743: PPUSH
37744: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
37748: LD_VAR 0 1
37752: PUSH
37753: LD_INT 1
37755: ARRAY
37756: PPUSH
37757: LD_VAR 0 1
37761: PUSH
37762: LD_INT 2
37764: ARRAY
37765: PPUSH
37766: CALL_OW 429
// end ; end ;
37770: LD_VAR 0 1
37774: RET
// every 0 0$1 trigger StreamModeActive and sReset do
37775: LD_EXP 88
37779: PUSH
37780: LD_EXP 110
37784: AND
37785: IFFALSE 37797
37787: GO 37789
37789: DISABLE
// YouLost (  ) ;
37790: LD_STRING 
37792: PPUSH
37793: CALL_OW 104
37797: END
// every 0 0$1 trigger StreamModeActive and sFog do
37798: LD_EXP 88
37802: PUSH
37803: LD_EXP 109
37807: AND
37808: IFFALSE 37822
37810: GO 37812
37812: DISABLE
// FogOff ( your_side ) ;
37813: LD_OWVAR 2
37817: PPUSH
37818: CALL_OW 344
37822: END
// every 0 0$1 trigger StreamModeActive and sSun do
37823: LD_EXP 88
37827: PUSH
37828: LD_EXP 111
37832: AND
37833: IFFALSE 37861
37835: GO 37837
37837: DISABLE
// begin solar_recharge_percent := 0 ;
37838: LD_ADDR_OWVAR 79
37842: PUSH
37843: LD_INT 0
37845: ST_TO_ADDR
// wait ( 5 5$00 ) ;
37846: LD_INT 10500
37848: PPUSH
37849: CALL_OW 67
// solar_recharge_percent := 100 ;
37853: LD_ADDR_OWVAR 79
37857: PUSH
37858: LD_INT 100
37860: ST_TO_ADDR
// end ;
37861: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
37862: LD_EXP 88
37866: PUSH
37867: LD_EXP 112
37871: AND
37872: IFFALSE 38111
37874: GO 37876
37876: DISABLE
37877: LD_INT 0
37879: PPUSH
37880: PPUSH
37881: PPUSH
// begin tmp := [ ] ;
37882: LD_ADDR_VAR 0 3
37886: PUSH
37887: EMPTY
37888: ST_TO_ADDR
// for i := 1 to 6 do
37889: LD_ADDR_VAR 0 1
37893: PUSH
37894: DOUBLE
37895: LD_INT 1
37897: DEC
37898: ST_TO_ADDR
37899: LD_INT 6
37901: PUSH
37902: FOR_TO
37903: IFFALSE 38008
// begin uc_nation := nation_nature ;
37905: LD_ADDR_OWVAR 21
37909: PUSH
37910: LD_INT 0
37912: ST_TO_ADDR
// uc_side := 0 ;
37913: LD_ADDR_OWVAR 20
37917: PUSH
37918: LD_INT 0
37920: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37921: LD_ADDR_OWVAR 29
37925: PUSH
37926: LD_INT 12
37928: PUSH
37929: LD_INT 12
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: ST_TO_ADDR
// hc_agressivity := 20 ;
37936: LD_ADDR_OWVAR 35
37940: PUSH
37941: LD_INT 20
37943: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
37944: LD_ADDR_OWVAR 28
37948: PUSH
37949: LD_INT 17
37951: ST_TO_ADDR
// hc_gallery :=  ;
37952: LD_ADDR_OWVAR 33
37956: PUSH
37957: LD_STRING 
37959: ST_TO_ADDR
// hc_name :=  ;
37960: LD_ADDR_OWVAR 26
37964: PUSH
37965: LD_STRING 
37967: ST_TO_ADDR
// un := CreateHuman ;
37968: LD_ADDR_VAR 0 2
37972: PUSH
37973: CALL_OW 44
37977: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
37978: LD_VAR 0 2
37982: PPUSH
37983: LD_INT 1
37985: PPUSH
37986: CALL_OW 51
// tmp := tmp ^ un ;
37990: LD_ADDR_VAR 0 3
37994: PUSH
37995: LD_VAR 0 3
37999: PUSH
38000: LD_VAR 0 2
38004: ADD
38005: ST_TO_ADDR
// end ;
38006: GO 37902
38008: POP
38009: POP
// repeat wait ( 0 0$1 ) ;
38010: LD_INT 35
38012: PPUSH
38013: CALL_OW 67
// for un in tmp do
38017: LD_ADDR_VAR 0 2
38021: PUSH
38022: LD_VAR 0 3
38026: PUSH
38027: FOR_IN
38028: IFFALSE 38102
// begin if IsDead ( un ) then
38030: LD_VAR 0 2
38034: PPUSH
38035: CALL_OW 301
38039: IFFALSE 38059
// begin tmp := tmp diff un ;
38041: LD_ADDR_VAR 0 3
38045: PUSH
38046: LD_VAR 0 3
38050: PUSH
38051: LD_VAR 0 2
38055: DIFF
38056: ST_TO_ADDR
// continue ;
38057: GO 38027
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38059: LD_VAR 0 2
38063: PPUSH
38064: LD_INT 3
38066: PUSH
38067: LD_INT 22
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PPUSH
38081: CALL_OW 69
38085: PPUSH
38086: LD_VAR 0 2
38090: PPUSH
38091: CALL_OW 74
38095: PPUSH
38096: CALL_OW 115
// end ;
38100: GO 38027
38102: POP
38103: POP
// until not tmp ;
38104: LD_VAR 0 3
38108: NOT
38109: IFFALSE 38010
// end ;
38111: PPOPN 3
38113: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38114: LD_EXP 88
38118: PUSH
38119: LD_EXP 113
38123: AND
38124: IFFALSE 38178
38126: GO 38128
38128: DISABLE
// begin ToLua ( displayTroll(); ) ;
38129: LD_STRING displayTroll();
38131: PPUSH
38132: CALL_OW 559
// wait ( 3 3$00 ) ;
38136: LD_INT 6300
38138: PPUSH
38139: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38143: LD_STRING hideTroll();
38145: PPUSH
38146: CALL_OW 559
// wait ( 1 1$00 ) ;
38150: LD_INT 2100
38152: PPUSH
38153: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38157: LD_STRING displayTroll();
38159: PPUSH
38160: CALL_OW 559
// wait ( 1 1$00 ) ;
38164: LD_INT 2100
38166: PPUSH
38167: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38171: LD_STRING hideTroll();
38173: PPUSH
38174: CALL_OW 559
// end ;
38178: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38179: LD_EXP 88
38183: PUSH
38184: LD_EXP 114
38188: AND
38189: IFFALSE 38252
38191: GO 38193
38193: DISABLE
38194: LD_INT 0
38196: PPUSH
// begin p := 0 ;
38197: LD_ADDR_VAR 0 1
38201: PUSH
38202: LD_INT 0
38204: ST_TO_ADDR
// repeat game_speed := 1 ;
38205: LD_ADDR_OWVAR 65
38209: PUSH
38210: LD_INT 1
38212: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38213: LD_INT 35
38215: PPUSH
38216: CALL_OW 67
// p := p + 1 ;
38220: LD_ADDR_VAR 0 1
38224: PUSH
38225: LD_VAR 0 1
38229: PUSH
38230: LD_INT 1
38232: PLUS
38233: ST_TO_ADDR
// until p >= 60 ;
38234: LD_VAR 0 1
38238: PUSH
38239: LD_INT 60
38241: GREATEREQUAL
38242: IFFALSE 38205
// game_speed := 4 ;
38244: LD_ADDR_OWVAR 65
38248: PUSH
38249: LD_INT 4
38251: ST_TO_ADDR
// end ;
38252: PPOPN 1
38254: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38255: LD_EXP 88
38259: PUSH
38260: LD_EXP 115
38264: AND
38265: IFFALSE 38411
38267: GO 38269
38269: DISABLE
38270: LD_INT 0
38272: PPUSH
38273: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38274: LD_ADDR_VAR 0 1
38278: PUSH
38279: LD_INT 22
38281: PUSH
38282: LD_OWVAR 2
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: LD_INT 30
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 30
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PPUSH
38323: CALL_OW 69
38327: ST_TO_ADDR
// if not depot then
38328: LD_VAR 0 1
38332: NOT
38333: IFFALSE 38337
// exit ;
38335: GO 38411
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38337: LD_ADDR_VAR 0 2
38341: PUSH
38342: LD_VAR 0 1
38346: PUSH
38347: LD_INT 1
38349: PPUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL_OW 12
38359: ARRAY
38360: PPUSH
38361: CALL_OW 274
38365: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38366: LD_VAR 0 2
38370: PPUSH
38371: LD_INT 1
38373: PPUSH
38374: LD_INT 0
38376: PPUSH
38377: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38381: LD_VAR 0 2
38385: PPUSH
38386: LD_INT 2
38388: PPUSH
38389: LD_INT 0
38391: PPUSH
38392: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38396: LD_VAR 0 2
38400: PPUSH
38401: LD_INT 3
38403: PPUSH
38404: LD_INT 0
38406: PPUSH
38407: CALL_OW 277
// end ;
38411: PPOPN 2
38413: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38414: LD_EXP 88
38418: PUSH
38419: LD_EXP 116
38423: AND
38424: IFFALSE 38521
38426: GO 38428
38428: DISABLE
38429: LD_INT 0
38431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38432: LD_ADDR_VAR 0 1
38436: PUSH
38437: LD_INT 22
38439: PUSH
38440: LD_OWVAR 2
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 21
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: LD_INT 23
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: PPUSH
38481: CALL_OW 69
38485: ST_TO_ADDR
// if not tmp then
38486: LD_VAR 0 1
38490: NOT
38491: IFFALSE 38495
// exit ;
38493: GO 38521
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38495: LD_VAR 0 1
38499: PUSH
38500: LD_INT 1
38502: PPUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: CALL_OW 12
38512: ARRAY
38513: PPUSH
38514: LD_INT 200
38516: PPUSH
38517: CALL_OW 234
// end ;
38521: PPOPN 1
38523: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38524: LD_EXP 88
38528: PUSH
38529: LD_EXP 117
38533: AND
38534: IFFALSE 38613
38536: GO 38538
38538: DISABLE
38539: LD_INT 0
38541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38542: LD_ADDR_VAR 0 1
38546: PUSH
38547: LD_INT 22
38549: PUSH
38550: LD_OWVAR 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 21
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PPUSH
38573: CALL_OW 69
38577: ST_TO_ADDR
// if not tmp then
38578: LD_VAR 0 1
38582: NOT
38583: IFFALSE 38587
// exit ;
38585: GO 38613
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38587: LD_VAR 0 1
38591: PUSH
38592: LD_INT 1
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 12
38604: ARRAY
38605: PPUSH
38606: LD_INT 60
38608: PPUSH
38609: CALL_OW 234
// end ;
38613: PPOPN 1
38615: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38616: LD_EXP 88
38620: PUSH
38621: LD_EXP 118
38625: AND
38626: IFFALSE 38725
38628: GO 38630
38630: DISABLE
38631: LD_INT 0
38633: PPUSH
38634: PPUSH
// begin enable ;
38635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38636: LD_ADDR_VAR 0 1
38640: PUSH
38641: LD_INT 22
38643: PUSH
38644: LD_OWVAR 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 61
38655: PUSH
38656: EMPTY
38657: LIST
38658: PUSH
38659: LD_INT 33
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: PPUSH
38674: CALL_OW 69
38678: ST_TO_ADDR
// if not tmp then
38679: LD_VAR 0 1
38683: NOT
38684: IFFALSE 38688
// exit ;
38686: GO 38725
// for i in tmp do
38688: LD_ADDR_VAR 0 2
38692: PUSH
38693: LD_VAR 0 1
38697: PUSH
38698: FOR_IN
38699: IFFALSE 38723
// if IsControledBy ( i ) then
38701: LD_VAR 0 2
38705: PPUSH
38706: CALL_OW 312
38710: IFFALSE 38721
// ComUnlink ( i ) ;
38712: LD_VAR 0 2
38716: PPUSH
38717: CALL_OW 136
38721: GO 38698
38723: POP
38724: POP
// end ;
38725: PPOPN 2
38727: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
38728: LD_EXP 88
38732: PUSH
38733: LD_EXP 119
38737: AND
38738: IFFALSE 38878
38740: GO 38742
38742: DISABLE
38743: LD_INT 0
38745: PPUSH
38746: PPUSH
// begin ToLua ( displayPowell(); ) ;
38747: LD_STRING displayPowell();
38749: PPUSH
38750: CALL_OW 559
// uc_side := 0 ;
38754: LD_ADDR_OWVAR 20
38758: PUSH
38759: LD_INT 0
38761: ST_TO_ADDR
// uc_nation := 2 ;
38762: LD_ADDR_OWVAR 21
38766: PUSH
38767: LD_INT 2
38769: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
38770: LD_ADDR_OWVAR 37
38774: PUSH
38775: LD_INT 14
38777: ST_TO_ADDR
// vc_engine := engine_siberite ;
38778: LD_ADDR_OWVAR 39
38782: PUSH
38783: LD_INT 3
38785: ST_TO_ADDR
// vc_control := control_apeman ;
38786: LD_ADDR_OWVAR 38
38790: PUSH
38791: LD_INT 5
38793: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
38794: LD_ADDR_OWVAR 40
38798: PUSH
38799: LD_INT 29
38801: ST_TO_ADDR
// un := CreateVehicle ;
38802: LD_ADDR_VAR 0 2
38806: PUSH
38807: CALL_OW 45
38811: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38812: LD_VAR 0 2
38816: PPUSH
38817: LD_INT 1
38819: PPUSH
38820: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38824: LD_INT 35
38826: PPUSH
38827: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38831: LD_VAR 0 2
38835: PPUSH
38836: LD_INT 22
38838: PUSH
38839: LD_OWVAR 2
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PPUSH
38848: CALL_OW 69
38852: PPUSH
38853: LD_VAR 0 2
38857: PPUSH
38858: CALL_OW 74
38862: PPUSH
38863: CALL_OW 115
// until IsDead ( un ) ;
38867: LD_VAR 0 2
38871: PPUSH
38872: CALL_OW 301
38876: IFFALSE 38824
// end ;
38878: PPOPN 2
38880: END
// every 0 0$1 trigger StreamModeActive and sStu do
38881: LD_EXP 88
38885: PUSH
38886: LD_EXP 127
38890: AND
38891: IFFALSE 38907
38893: GO 38895
38895: DISABLE
// begin ToLua ( displayStucuk(); ) ;
38896: LD_STRING displayStucuk();
38898: PPUSH
38899: CALL_OW 559
// ResetFog ;
38903: CALL_OW 335
// end ;
38907: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
38908: LD_EXP 88
38912: PUSH
38913: LD_EXP 120
38917: AND
38918: IFFALSE 39059
38920: GO 38922
38922: DISABLE
38923: LD_INT 0
38925: PPUSH
38926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38927: LD_ADDR_VAR 0 2
38931: PUSH
38932: LD_INT 22
38934: PUSH
38935: LD_OWVAR 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 21
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PPUSH
38958: CALL_OW 69
38962: ST_TO_ADDR
// if not tmp then
38963: LD_VAR 0 2
38967: NOT
38968: IFFALSE 38972
// exit ;
38970: GO 39059
// un := tmp [ rand ( 1 , tmp ) ] ;
38972: LD_ADDR_VAR 0 1
38976: PUSH
38977: LD_VAR 0 2
38981: PUSH
38982: LD_INT 1
38984: PPUSH
38985: LD_VAR 0 2
38989: PPUSH
38990: CALL_OW 12
38994: ARRAY
38995: ST_TO_ADDR
// SetSide ( un , 0 ) ;
38996: LD_VAR 0 1
39000: PPUSH
39001: LD_INT 0
39003: PPUSH
39004: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39008: LD_VAR 0 1
39012: PPUSH
39013: LD_OWVAR 3
39017: PUSH
39018: LD_VAR 0 1
39022: DIFF
39023: PPUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 74
39033: PPUSH
39034: CALL_OW 115
// wait ( 0 0$20 ) ;
39038: LD_INT 700
39040: PPUSH
39041: CALL_OW 67
// SetSide ( un , your_side ) ;
39045: LD_VAR 0 1
39049: PPUSH
39050: LD_OWVAR 2
39054: PPUSH
39055: CALL_OW 235
// end ;
39059: PPOPN 2
39061: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39062: LD_EXP 88
39066: PUSH
39067: LD_EXP 121
39071: AND
39072: IFFALSE 39178
39074: GO 39076
39076: DISABLE
39077: LD_INT 0
39079: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39080: LD_ADDR_VAR 0 1
39084: PUSH
39085: LD_INT 22
39087: PUSH
39088: LD_OWVAR 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 30
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 30
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PPUSH
39129: CALL_OW 69
39133: ST_TO_ADDR
// if not depot then
39134: LD_VAR 0 1
39138: NOT
39139: IFFALSE 39143
// exit ;
39141: GO 39178
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 1
39150: ARRAY
39151: PPUSH
39152: CALL_OW 250
39156: PPUSH
39157: LD_VAR 0 1
39161: PUSH
39162: LD_INT 1
39164: ARRAY
39165: PPUSH
39166: CALL_OW 251
39170: PPUSH
39171: LD_INT 70
39173: PPUSH
39174: CALL_OW 495
// end ;
39178: PPOPN 1
39180: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39181: LD_EXP 88
39185: PUSH
39186: LD_EXP 122
39190: AND
39191: IFFALSE 39402
39193: GO 39195
39195: DISABLE
39196: LD_INT 0
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39203: LD_ADDR_VAR 0 5
39207: PUSH
39208: LD_INT 22
39210: PUSH
39211: LD_OWVAR 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 21
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PPUSH
39234: CALL_OW 69
39238: ST_TO_ADDR
// if not tmp then
39239: LD_VAR 0 5
39243: NOT
39244: IFFALSE 39248
// exit ;
39246: GO 39402
// for i in tmp do
39248: LD_ADDR_VAR 0 1
39252: PUSH
39253: LD_VAR 0 5
39257: PUSH
39258: FOR_IN
39259: IFFALSE 39400
// begin d := rand ( 0 , 5 ) ;
39261: LD_ADDR_VAR 0 4
39265: PUSH
39266: LD_INT 0
39268: PPUSH
39269: LD_INT 5
39271: PPUSH
39272: CALL_OW 12
39276: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39277: LD_ADDR_VAR 0 2
39281: PUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 250
39291: PPUSH
39292: LD_VAR 0 4
39296: PPUSH
39297: LD_INT 3
39299: PPUSH
39300: LD_INT 12
39302: PPUSH
39303: CALL_OW 12
39307: PPUSH
39308: CALL_OW 272
39312: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39313: LD_ADDR_VAR 0 3
39317: PUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 251
39327: PPUSH
39328: LD_VAR 0 4
39332: PPUSH
39333: LD_INT 3
39335: PPUSH
39336: LD_INT 12
39338: PPUSH
39339: CALL_OW 12
39343: PPUSH
39344: CALL_OW 273
39348: ST_TO_ADDR
// if ValidHex ( x , y ) then
39349: LD_VAR 0 2
39353: PPUSH
39354: LD_VAR 0 3
39358: PPUSH
39359: CALL_OW 488
39363: IFFALSE 39398
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39365: LD_VAR 0 1
39369: PPUSH
39370: LD_VAR 0 2
39374: PPUSH
39375: LD_VAR 0 3
39379: PPUSH
39380: LD_INT 3
39382: PPUSH
39383: LD_INT 6
39385: PPUSH
39386: CALL_OW 12
39390: PPUSH
39391: LD_INT 1
39393: PPUSH
39394: CALL_OW 483
// end ;
39398: GO 39258
39400: POP
39401: POP
// end ;
39402: PPOPN 5
39404: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39405: LD_EXP 88
39409: PUSH
39410: LD_EXP 123
39414: AND
39415: IFFALSE 39509
39417: GO 39419
39419: DISABLE
39420: LD_INT 0
39422: PPUSH
39423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39424: LD_ADDR_VAR 0 2
39428: PUSH
39429: LD_INT 22
39431: PUSH
39432: LD_OWVAR 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 32
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 21
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: PPUSH
39466: CALL_OW 69
39470: ST_TO_ADDR
// if not tmp then
39471: LD_VAR 0 2
39475: NOT
39476: IFFALSE 39480
// exit ;
39478: GO 39509
// for i in tmp do
39480: LD_ADDR_VAR 0 1
39484: PUSH
39485: LD_VAR 0 2
39489: PUSH
39490: FOR_IN
39491: IFFALSE 39507
// SetFuel ( i , 0 ) ;
39493: LD_VAR 0 1
39497: PPUSH
39498: LD_INT 0
39500: PPUSH
39501: CALL_OW 240
39505: GO 39490
39507: POP
39508: POP
// end ;
39509: PPOPN 2
39511: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39512: LD_EXP 88
39516: PUSH
39517: LD_EXP 124
39521: AND
39522: IFFALSE 39588
39524: GO 39526
39526: DISABLE
39527: LD_INT 0
39529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39530: LD_ADDR_VAR 0 1
39534: PUSH
39535: LD_INT 22
39537: PUSH
39538: LD_OWVAR 2
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 30
39549: PUSH
39550: LD_INT 29
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PPUSH
39561: CALL_OW 69
39565: ST_TO_ADDR
// if not tmp then
39566: LD_VAR 0 1
39570: NOT
39571: IFFALSE 39575
// exit ;
39573: GO 39588
// DestroyUnit ( tmp [ 1 ] ) ;
39575: LD_VAR 0 1
39579: PUSH
39580: LD_INT 1
39582: ARRAY
39583: PPUSH
39584: CALL_OW 65
// end ;
39588: PPOPN 1
39590: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39591: LD_EXP 88
39595: PUSH
39596: LD_EXP 126
39600: AND
39601: IFFALSE 39730
39603: GO 39605
39605: DISABLE
39606: LD_INT 0
39608: PPUSH
// begin uc_side := 0 ;
39609: LD_ADDR_OWVAR 20
39613: PUSH
39614: LD_INT 0
39616: ST_TO_ADDR
// uc_nation := nation_arabian ;
39617: LD_ADDR_OWVAR 21
39621: PUSH
39622: LD_INT 2
39624: ST_TO_ADDR
// hc_gallery :=  ;
39625: LD_ADDR_OWVAR 33
39629: PUSH
39630: LD_STRING 
39632: ST_TO_ADDR
// hc_name :=  ;
39633: LD_ADDR_OWVAR 26
39637: PUSH
39638: LD_STRING 
39640: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39641: LD_INT 1
39643: PPUSH
39644: LD_INT 11
39646: PPUSH
39647: LD_INT 10
39649: PPUSH
39650: CALL_OW 380
// un := CreateHuman ;
39654: LD_ADDR_VAR 0 1
39658: PUSH
39659: CALL_OW 44
39663: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39664: LD_VAR 0 1
39668: PPUSH
39669: LD_INT 1
39671: PPUSH
39672: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39676: LD_INT 35
39678: PPUSH
39679: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39683: LD_VAR 0 1
39687: PPUSH
39688: LD_INT 22
39690: PUSH
39691: LD_OWVAR 2
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PPUSH
39700: CALL_OW 69
39704: PPUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 74
39714: PPUSH
39715: CALL_OW 115
// until IsDead ( un ) ;
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 301
39728: IFFALSE 39676
// end ;
39730: PPOPN 1
39732: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
39733: LD_EXP 88
39737: PUSH
39738: LD_EXP 128
39742: AND
39743: IFFALSE 39755
39745: GO 39747
39747: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
39748: LD_STRING earthquake(getX(game), 0, 32)
39750: PPUSH
39751: CALL_OW 559
39755: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
39756: LD_EXP 88
39760: PUSH
39761: LD_EXP 129
39765: AND
39766: IFFALSE 39857
39768: GO 39770
39770: DISABLE
39771: LD_INT 0
39773: PPUSH
// begin enable ;
39774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
39775: LD_ADDR_VAR 0 1
39779: PUSH
39780: LD_INT 22
39782: PUSH
39783: LD_OWVAR 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 21
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 33
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: PPUSH
39817: CALL_OW 69
39821: ST_TO_ADDR
// if not tmp then
39822: LD_VAR 0 1
39826: NOT
39827: IFFALSE 39831
// exit ;
39829: GO 39857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39831: LD_VAR 0 1
39835: PUSH
39836: LD_INT 1
39838: PPUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 12
39848: ARRAY
39849: PPUSH
39850: LD_INT 1
39852: PPUSH
39853: CALL_OW 234
// end ;
39857: PPOPN 1
39859: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
39860: LD_EXP 88
39864: PUSH
39865: LD_EXP 130
39869: AND
39870: IFFALSE 40011
39872: GO 39874
39874: DISABLE
39875: LD_INT 0
39877: PPUSH
39878: PPUSH
39879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: LD_INT 22
39887: PUSH
39888: LD_OWVAR 2
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 25
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PPUSH
39911: CALL_OW 69
39915: ST_TO_ADDR
// if not tmp then
39916: LD_VAR 0 3
39920: NOT
39921: IFFALSE 39925
// exit ;
39923: GO 40011
// un := tmp [ rand ( 1 , tmp ) ] ;
39925: LD_ADDR_VAR 0 2
39929: PUSH
39930: LD_VAR 0 3
39934: PUSH
39935: LD_INT 1
39937: PPUSH
39938: LD_VAR 0 3
39942: PPUSH
39943: CALL_OW 12
39947: ARRAY
39948: ST_TO_ADDR
// if Crawls ( un ) then
39949: LD_VAR 0 2
39953: PPUSH
39954: CALL_OW 318
39958: IFFALSE 39969
// ComWalk ( un ) ;
39960: LD_VAR 0 2
39964: PPUSH
39965: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
39969: LD_VAR 0 2
39973: PPUSH
39974: LD_INT 9
39976: PPUSH
39977: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
39981: LD_INT 28
39983: PPUSH
39984: LD_OWVAR 2
39988: PPUSH
39989: LD_INT 2
39991: PPUSH
39992: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
39996: LD_INT 29
39998: PPUSH
39999: LD_OWVAR 2
40003: PPUSH
40004: LD_INT 2
40006: PPUSH
40007: CALL_OW 322
// end ;
40011: PPOPN 3
40013: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40014: LD_EXP 88
40018: PUSH
40019: LD_EXP 131
40023: AND
40024: IFFALSE 40135
40026: GO 40028
40028: DISABLE
40029: LD_INT 0
40031: PPUSH
40032: PPUSH
40033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40034: LD_ADDR_VAR 0 3
40038: PUSH
40039: LD_INT 22
40041: PUSH
40042: LD_OWVAR 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 25
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PPUSH
40065: CALL_OW 69
40069: ST_TO_ADDR
// if not tmp then
40070: LD_VAR 0 3
40074: NOT
40075: IFFALSE 40079
// exit ;
40077: GO 40135
// un := tmp [ rand ( 1 , tmp ) ] ;
40079: LD_ADDR_VAR 0 2
40083: PUSH
40084: LD_VAR 0 3
40088: PUSH
40089: LD_INT 1
40091: PPUSH
40092: LD_VAR 0 3
40096: PPUSH
40097: CALL_OW 12
40101: ARRAY
40102: ST_TO_ADDR
// if Crawls ( un ) then
40103: LD_VAR 0 2
40107: PPUSH
40108: CALL_OW 318
40112: IFFALSE 40123
// ComWalk ( un ) ;
40114: LD_VAR 0 2
40118: PPUSH
40119: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40123: LD_VAR 0 2
40127: PPUSH
40128: LD_INT 8
40130: PPUSH
40131: CALL_OW 336
// end ;
40135: PPOPN 3
40137: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40138: LD_EXP 88
40142: PUSH
40143: LD_EXP 132
40147: AND
40148: IFFALSE 40292
40150: GO 40152
40152: DISABLE
40153: LD_INT 0
40155: PPUSH
40156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40157: LD_ADDR_VAR 0 2
40161: PUSH
40162: LD_INT 22
40164: PUSH
40165: LD_OWVAR 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 21
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 34
40189: PUSH
40190: LD_INT 12
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 34
40199: PUSH
40200: LD_INT 51
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 34
40209: PUSH
40210: LD_INT 32
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: PPUSH
40228: CALL_OW 69
40232: ST_TO_ADDR
// if not tmp then
40233: LD_VAR 0 2
40237: NOT
40238: IFFALSE 40242
// exit ;
40240: GO 40292
// for i in tmp do
40242: LD_ADDR_VAR 0 1
40246: PUSH
40247: LD_VAR 0 2
40251: PUSH
40252: FOR_IN
40253: IFFALSE 40290
// if GetCargo ( i , mat_artifact ) = 0 then
40255: LD_VAR 0 1
40259: PPUSH
40260: LD_INT 4
40262: PPUSH
40263: CALL_OW 289
40267: PUSH
40268: LD_INT 0
40270: EQUAL
40271: IFFALSE 40288
// SetCargo ( i , mat_siberit , 100 ) ;
40273: LD_VAR 0 1
40277: PPUSH
40278: LD_INT 3
40280: PPUSH
40281: LD_INT 100
40283: PPUSH
40284: CALL_OW 290
40288: GO 40252
40290: POP
40291: POP
// end ;
40292: PPOPN 2
40294: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40295: LD_EXP 88
40299: PUSH
40300: LD_EXP 133
40304: AND
40305: IFFALSE 40488
40307: GO 40309
40309: DISABLE
40310: LD_INT 0
40312: PPUSH
40313: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40314: LD_ADDR_VAR 0 2
40318: PUSH
40319: LD_INT 22
40321: PUSH
40322: LD_OWVAR 2
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PPUSH
40331: CALL_OW 69
40335: ST_TO_ADDR
// if not tmp then
40336: LD_VAR 0 2
40340: NOT
40341: IFFALSE 40345
// exit ;
40343: GO 40488
// for i := 1 to 2 do
40345: LD_ADDR_VAR 0 1
40349: PUSH
40350: DOUBLE
40351: LD_INT 1
40353: DEC
40354: ST_TO_ADDR
40355: LD_INT 2
40357: PUSH
40358: FOR_TO
40359: IFFALSE 40486
// begin uc_side := your_side ;
40361: LD_ADDR_OWVAR 20
40365: PUSH
40366: LD_OWVAR 2
40370: ST_TO_ADDR
// uc_nation := nation_american ;
40371: LD_ADDR_OWVAR 21
40375: PUSH
40376: LD_INT 1
40378: ST_TO_ADDR
// vc_chassis := us_morphling ;
40379: LD_ADDR_OWVAR 37
40383: PUSH
40384: LD_INT 5
40386: ST_TO_ADDR
// vc_engine := engine_siberite ;
40387: LD_ADDR_OWVAR 39
40391: PUSH
40392: LD_INT 3
40394: ST_TO_ADDR
// vc_control := control_computer ;
40395: LD_ADDR_OWVAR 38
40399: PUSH
40400: LD_INT 3
40402: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40403: LD_ADDR_OWVAR 40
40407: PUSH
40408: LD_INT 10
40410: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40411: LD_VAR 0 2
40415: PUSH
40416: LD_INT 1
40418: ARRAY
40419: PPUSH
40420: CALL_OW 310
40424: NOT
40425: IFFALSE 40472
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40427: CALL_OW 45
40431: PPUSH
40432: LD_VAR 0 2
40436: PUSH
40437: LD_INT 1
40439: ARRAY
40440: PPUSH
40441: CALL_OW 250
40445: PPUSH
40446: LD_VAR 0 2
40450: PUSH
40451: LD_INT 1
40453: ARRAY
40454: PPUSH
40455: CALL_OW 251
40459: PPUSH
40460: LD_INT 12
40462: PPUSH
40463: LD_INT 1
40465: PPUSH
40466: CALL_OW 50
40470: GO 40484
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40472: CALL_OW 45
40476: PPUSH
40477: LD_INT 1
40479: PPUSH
40480: CALL_OW 51
// end ;
40484: GO 40358
40486: POP
40487: POP
// end ;
40488: PPOPN 2
40490: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40491: LD_EXP 88
40495: PUSH
40496: LD_EXP 134
40500: AND
40501: IFFALSE 40723
40503: GO 40505
40505: DISABLE
40506: LD_INT 0
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40514: LD_ADDR_VAR 0 6
40518: PUSH
40519: LD_INT 22
40521: PUSH
40522: LD_OWVAR 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 21
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: LD_INT 23
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 69
40567: ST_TO_ADDR
// if not tmp then
40568: LD_VAR 0 6
40572: NOT
40573: IFFALSE 40577
// exit ;
40575: GO 40723
// s1 := rand ( 1 , 4 ) ;
40577: LD_ADDR_VAR 0 2
40581: PUSH
40582: LD_INT 1
40584: PPUSH
40585: LD_INT 4
40587: PPUSH
40588: CALL_OW 12
40592: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40593: LD_ADDR_VAR 0 4
40597: PUSH
40598: LD_VAR 0 6
40602: PUSH
40603: LD_INT 1
40605: ARRAY
40606: PPUSH
40607: LD_VAR 0 2
40611: PPUSH
40612: CALL_OW 259
40616: ST_TO_ADDR
// if s1 = 1 then
40617: LD_VAR 0 2
40621: PUSH
40622: LD_INT 1
40624: EQUAL
40625: IFFALSE 40645
// s2 := rand ( 2 , 4 ) else
40627: LD_ADDR_VAR 0 3
40631: PUSH
40632: LD_INT 2
40634: PPUSH
40635: LD_INT 4
40637: PPUSH
40638: CALL_OW 12
40642: ST_TO_ADDR
40643: GO 40653
// s2 := 1 ;
40645: LD_ADDR_VAR 0 3
40649: PUSH
40650: LD_INT 1
40652: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40653: LD_ADDR_VAR 0 5
40657: PUSH
40658: LD_VAR 0 6
40662: PUSH
40663: LD_INT 1
40665: ARRAY
40666: PPUSH
40667: LD_VAR 0 3
40671: PPUSH
40672: CALL_OW 259
40676: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
40677: LD_VAR 0 6
40681: PUSH
40682: LD_INT 1
40684: ARRAY
40685: PPUSH
40686: LD_VAR 0 2
40690: PPUSH
40691: LD_VAR 0 5
40695: PPUSH
40696: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
40700: LD_VAR 0 6
40704: PUSH
40705: LD_INT 1
40707: ARRAY
40708: PPUSH
40709: LD_VAR 0 3
40713: PPUSH
40714: LD_VAR 0 4
40718: PPUSH
40719: CALL_OW 237
// end ;
40723: PPOPN 6
40725: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
40726: LD_EXP 88
40730: PUSH
40731: LD_EXP 135
40735: AND
40736: IFFALSE 40815
40738: GO 40740
40740: DISABLE
40741: LD_INT 0
40743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
40744: LD_ADDR_VAR 0 1
40748: PUSH
40749: LD_INT 22
40751: PUSH
40752: LD_OWVAR 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 30
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PPUSH
40775: CALL_OW 69
40779: ST_TO_ADDR
// if not tmp then
40780: LD_VAR 0 1
40784: NOT
40785: IFFALSE 40789
// exit ;
40787: GO 40815
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40789: LD_VAR 0 1
40793: PUSH
40794: LD_INT 1
40796: PPUSH
40797: LD_VAR 0 1
40801: PPUSH
40802: CALL_OW 12
40806: ARRAY
40807: PPUSH
40808: LD_INT 1
40810: PPUSH
40811: CALL_OW 234
// end ;
40815: PPOPN 1
40817: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
40818: LD_EXP 88
40822: PUSH
40823: LD_EXP 136
40827: AND
40828: IFFALSE 40940
40830: GO 40832
40832: DISABLE
40833: LD_INT 0
40835: PPUSH
40836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
40837: LD_ADDR_VAR 0 2
40841: PUSH
40842: LD_INT 22
40844: PUSH
40845: LD_OWVAR 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: LD_INT 30
40859: PUSH
40860: LD_INT 27
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 30
40869: PUSH
40870: LD_INT 26
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 30
40879: PUSH
40880: LD_INT 28
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PPUSH
40897: CALL_OW 69
40901: ST_TO_ADDR
// if not tmp then
40902: LD_VAR 0 2
40906: NOT
40907: IFFALSE 40911
// exit ;
40909: GO 40940
// for i in tmp do
40911: LD_ADDR_VAR 0 1
40915: PUSH
40916: LD_VAR 0 2
40920: PUSH
40921: FOR_IN
40922: IFFALSE 40938
// SetLives ( i , 1 ) ;
40924: LD_VAR 0 1
40928: PPUSH
40929: LD_INT 1
40931: PPUSH
40932: CALL_OW 234
40936: GO 40921
40938: POP
40939: POP
// end ;
40940: PPOPN 2
40942: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
40943: LD_EXP 88
40947: PUSH
40948: LD_EXP 137
40952: AND
40953: IFFALSE 41240
40955: GO 40957
40957: DISABLE
40958: LD_INT 0
40960: PPUSH
40961: PPUSH
40962: PPUSH
// begin i := rand ( 1 , 7 ) ;
40963: LD_ADDR_VAR 0 1
40967: PUSH
40968: LD_INT 1
40970: PPUSH
40971: LD_INT 7
40973: PPUSH
40974: CALL_OW 12
40978: ST_TO_ADDR
// case i of 1 :
40979: LD_VAR 0 1
40983: PUSH
40984: LD_INT 1
40986: DOUBLE
40987: EQUAL
40988: IFTRUE 40992
40990: GO 41002
40992: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
40993: LD_STRING earthquake(getX(game), 0, 32)
40995: PPUSH
40996: CALL_OW 559
41000: GO 41240
41002: LD_INT 2
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41024
41010: POP
// begin ToLua ( displayStucuk(); ) ;
41011: LD_STRING displayStucuk();
41013: PPUSH
41014: CALL_OW 559
// ResetFog ;
41018: CALL_OW 335
// end ; 3 :
41022: GO 41240
41024: LD_INT 3
41026: DOUBLE
41027: EQUAL
41028: IFTRUE 41032
41030: GO 41136
41032: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41033: LD_ADDR_VAR 0 2
41037: PUSH
41038: LD_INT 22
41040: PUSH
41041: LD_OWVAR 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 25
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PPUSH
41064: CALL_OW 69
41068: ST_TO_ADDR
// if not tmp then
41069: LD_VAR 0 2
41073: NOT
41074: IFFALSE 41078
// exit ;
41076: GO 41240
// un := tmp [ rand ( 1 , tmp ) ] ;
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_VAR 0 2
41087: PUSH
41088: LD_INT 1
41090: PPUSH
41091: LD_VAR 0 2
41095: PPUSH
41096: CALL_OW 12
41100: ARRAY
41101: ST_TO_ADDR
// if Crawls ( un ) then
41102: LD_VAR 0 3
41106: PPUSH
41107: CALL_OW 318
41111: IFFALSE 41122
// ComWalk ( un ) ;
41113: LD_VAR 0 3
41117: PPUSH
41118: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41122: LD_VAR 0 3
41126: PPUSH
41127: LD_INT 8
41129: PPUSH
41130: CALL_OW 336
// end ; 4 :
41134: GO 41240
41136: LD_INT 4
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41144
41142: GO 41218
41144: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41145: LD_ADDR_VAR 0 2
41149: PUSH
41150: LD_INT 22
41152: PUSH
41153: LD_OWVAR 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 30
41164: PUSH
41165: LD_INT 29
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PPUSH
41176: CALL_OW 69
41180: ST_TO_ADDR
// if not tmp then
41181: LD_VAR 0 2
41185: NOT
41186: IFFALSE 41190
// exit ;
41188: GO 41240
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41190: LD_VAR 0 2
41194: PUSH
41195: LD_INT 1
41197: ARRAY
41198: PPUSH
41199: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41203: LD_VAR 0 2
41207: PUSH
41208: LD_INT 1
41210: ARRAY
41211: PPUSH
41212: CALL_OW 65
// end ; 5 .. 7 :
41216: GO 41240
41218: LD_INT 5
41220: DOUBLE
41221: GREATEREQUAL
41222: IFFALSE 41230
41224: LD_INT 7
41226: DOUBLE
41227: LESSEQUAL
41228: IFTRUE 41232
41230: GO 41239
41232: POP
// StreamSibBomb ; end ;
41233: CALL 37477 0 0
41237: GO 41240
41239: POP
// end ;
41240: PPOPN 3
41242: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41243: LD_EXP 88
41247: PUSH
41248: LD_EXP 138
41252: AND
41253: IFFALSE 41409
41255: GO 41257
41257: DISABLE
41258: LD_INT 0
41260: PPUSH
41261: PPUSH
41262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41263: LD_ADDR_VAR 0 2
41267: PUSH
41268: LD_INT 81
41270: PUSH
41271: LD_OWVAR 2
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 21
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 21
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: LIST
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PPUSH
41312: CALL_OW 69
41316: ST_TO_ADDR
// if not tmp then
41317: LD_VAR 0 2
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41409
// p := 0 ;
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_INT 0
41333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41334: LD_INT 35
41336: PPUSH
41337: CALL_OW 67
// p := p + 1 ;
41341: LD_ADDR_VAR 0 3
41345: PUSH
41346: LD_VAR 0 3
41350: PUSH
41351: LD_INT 1
41353: PLUS
41354: ST_TO_ADDR
// for i in tmp do
41355: LD_ADDR_VAR 0 1
41359: PUSH
41360: LD_VAR 0 2
41364: PUSH
41365: FOR_IN
41366: IFFALSE 41397
// if GetLives ( i ) < 1000 then
41368: LD_VAR 0 1
41372: PPUSH
41373: CALL_OW 256
41377: PUSH
41378: LD_INT 1000
41380: LESS
41381: IFFALSE 41395
// SetLives ( i , 1000 ) ;
41383: LD_VAR 0 1
41387: PPUSH
41388: LD_INT 1000
41390: PPUSH
41391: CALL_OW 234
41395: GO 41365
41397: POP
41398: POP
// until p > 20 ;
41399: LD_VAR 0 3
41403: PUSH
41404: LD_INT 20
41406: GREATER
41407: IFFALSE 41334
// end ;
41409: PPOPN 3
41411: END
// every 0 0$1 trigger StreamModeActive and sTime do
41412: LD_EXP 88
41416: PUSH
41417: LD_EXP 139
41421: AND
41422: IFFALSE 41457
41424: GO 41426
41426: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41427: LD_INT 28
41429: PPUSH
41430: LD_OWVAR 2
41434: PPUSH
41435: LD_INT 2
41437: PPUSH
41438: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41442: LD_INT 30
41444: PPUSH
41445: LD_OWVAR 2
41449: PPUSH
41450: LD_INT 2
41452: PPUSH
41453: CALL_OW 322
// end ;
41457: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41458: LD_EXP 88
41462: PUSH
41463: LD_EXP 140
41467: AND
41468: IFFALSE 41589
41470: GO 41472
41472: DISABLE
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41477: LD_ADDR_VAR 0 2
41481: PUSH
41482: LD_INT 22
41484: PUSH
41485: LD_OWVAR 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 21
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: PUSH
41507: LD_INT 23
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: PPUSH
41526: CALL_OW 69
41530: ST_TO_ADDR
// if not tmp then
41531: LD_VAR 0 2
41535: NOT
41536: IFFALSE 41540
// exit ;
41538: GO 41589
// for i in tmp do
41540: LD_ADDR_VAR 0 1
41544: PUSH
41545: LD_VAR 0 2
41549: PUSH
41550: FOR_IN
41551: IFFALSE 41587
// begin if Crawls ( i ) then
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 318
41562: IFFALSE 41573
// ComWalk ( i ) ;
41564: LD_VAR 0 1
41568: PPUSH
41569: CALL_OW 138
// SetClass ( i , 2 ) ;
41573: LD_VAR 0 1
41577: PPUSH
41578: LD_INT 2
41580: PPUSH
41581: CALL_OW 336
// end ;
41585: GO 41550
41587: POP
41588: POP
// end ;
41589: PPOPN 2
41591: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41592: LD_EXP 88
41596: PUSH
41597: LD_EXP 141
41601: AND
41602: IFFALSE 41890
41604: GO 41606
41606: DISABLE
41607: LD_INT 0
41609: PPUSH
41610: PPUSH
41611: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41612: LD_OWVAR 2
41616: PPUSH
41617: LD_INT 9
41619: PPUSH
41620: LD_INT 1
41622: PPUSH
41623: LD_INT 1
41625: PPUSH
41626: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41630: LD_INT 9
41632: PPUSH
41633: LD_OWVAR 2
41637: PPUSH
41638: CALL_OW 343
// uc_side := 9 ;
41642: LD_ADDR_OWVAR 20
41646: PUSH
41647: LD_INT 9
41649: ST_TO_ADDR
// uc_nation := 2 ;
41650: LD_ADDR_OWVAR 21
41654: PUSH
41655: LD_INT 2
41657: ST_TO_ADDR
// hc_name := Dark Warrior ;
41658: LD_ADDR_OWVAR 26
41662: PUSH
41663: LD_STRING Dark Warrior
41665: ST_TO_ADDR
// hc_gallery :=  ;
41666: LD_ADDR_OWVAR 33
41670: PUSH
41671: LD_STRING 
41673: ST_TO_ADDR
// hc_noskilllimit := true ;
41674: LD_ADDR_OWVAR 76
41678: PUSH
41679: LD_INT 1
41681: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
41682: LD_ADDR_OWVAR 31
41686: PUSH
41687: LD_INT 30
41689: PUSH
41690: LD_INT 30
41692: PUSH
41693: LD_INT 30
41695: PUSH
41696: LD_INT 30
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
// un := CreateHuman ;
41705: LD_ADDR_VAR 0 3
41709: PUSH
41710: CALL_OW 44
41714: ST_TO_ADDR
// hc_noskilllimit := false ;
41715: LD_ADDR_OWVAR 76
41719: PUSH
41720: LD_INT 0
41722: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
41723: LD_VAR 0 3
41727: PPUSH
41728: LD_INT 1
41730: PPUSH
41731: CALL_OW 51
// ToLua ( playRanger() ) ;
41735: LD_STRING playRanger()
41737: PPUSH
41738: CALL_OW 559
// p := 0 ;
41742: LD_ADDR_VAR 0 2
41746: PUSH
41747: LD_INT 0
41749: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41750: LD_INT 35
41752: PPUSH
41753: CALL_OW 67
// p := p + 1 ;
41757: LD_ADDR_VAR 0 2
41761: PUSH
41762: LD_VAR 0 2
41766: PUSH
41767: LD_INT 1
41769: PLUS
41770: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
41771: LD_VAR 0 3
41775: PPUSH
41776: CALL_OW 256
41780: PUSH
41781: LD_INT 1000
41783: LESS
41784: IFFALSE 41798
// SetLives ( un , 1000 ) ;
41786: LD_VAR 0 3
41790: PPUSH
41791: LD_INT 1000
41793: PPUSH
41794: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
41798: LD_VAR 0 3
41802: PPUSH
41803: LD_INT 81
41805: PUSH
41806: LD_OWVAR 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 91
41817: PUSH
41818: LD_VAR 0 3
41822: PUSH
41823: LD_INT 30
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PPUSH
41835: CALL_OW 69
41839: PPUSH
41840: LD_VAR 0 3
41844: PPUSH
41845: CALL_OW 74
41849: PPUSH
41850: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
41854: LD_VAR 0 2
41858: PUSH
41859: LD_INT 80
41861: GREATER
41862: PUSH
41863: LD_VAR 0 3
41867: PPUSH
41868: CALL_OW 301
41872: OR
41873: IFFALSE 41750
// if un then
41875: LD_VAR 0 3
41879: IFFALSE 41890
// RemoveUnit ( un ) ;
41881: LD_VAR 0 3
41885: PPUSH
41886: CALL_OW 64
// end ;
41890: PPOPN 3
41892: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
41893: LD_EXP 142
41897: IFFALSE 42013
41899: GO 41901
41901: DISABLE
41902: LD_INT 0
41904: PPUSH
41905: PPUSH
41906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
41907: LD_ADDR_VAR 0 2
41911: PUSH
41912: LD_INT 81
41914: PUSH
41915: LD_OWVAR 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 21
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PPUSH
41938: CALL_OW 69
41942: ST_TO_ADDR
// ToLua ( playComputer() ) ;
41943: LD_STRING playComputer()
41945: PPUSH
41946: CALL_OW 559
// if not tmp then
41950: LD_VAR 0 2
41954: NOT
41955: IFFALSE 41959
// exit ;
41957: GO 42013
// for i in tmp do
41959: LD_ADDR_VAR 0 1
41963: PUSH
41964: LD_VAR 0 2
41968: PUSH
41969: FOR_IN
41970: IFFALSE 42011
// for j := 1 to 4 do
41972: LD_ADDR_VAR 0 3
41976: PUSH
41977: DOUBLE
41978: LD_INT 1
41980: DEC
41981: ST_TO_ADDR
41982: LD_INT 4
41984: PUSH
41985: FOR_TO
41986: IFFALSE 42007
// SetSkill ( i , j , 10 ) ;
41988: LD_VAR 0 1
41992: PPUSH
41993: LD_VAR 0 3
41997: PPUSH
41998: LD_INT 10
42000: PPUSH
42001: CALL_OW 237
42005: GO 41985
42007: POP
42008: POP
42009: GO 41969
42011: POP
42012: POP
// end ;
42013: PPOPN 3
42015: END
// every 0 0$1 trigger s30 do var i , tmp ;
42016: LD_EXP 143
42020: IFFALSE 42089
42022: GO 42024
42024: DISABLE
42025: LD_INT 0
42027: PPUSH
42028: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42029: LD_ADDR_VAR 0 2
42033: PUSH
42034: LD_INT 22
42036: PUSH
42037: LD_OWVAR 2
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PPUSH
42046: CALL_OW 69
42050: ST_TO_ADDR
// if not tmp then
42051: LD_VAR 0 2
42055: NOT
42056: IFFALSE 42060
// exit ;
42058: GO 42089
// for i in tmp do
42060: LD_ADDR_VAR 0 1
42064: PUSH
42065: LD_VAR 0 2
42069: PUSH
42070: FOR_IN
42071: IFFALSE 42087
// SetLives ( i , 300 ) ;
42073: LD_VAR 0 1
42077: PPUSH
42078: LD_INT 300
42080: PPUSH
42081: CALL_OW 234
42085: GO 42070
42087: POP
42088: POP
// end ;
42089: PPOPN 2
42091: END
// every 0 0$1 trigger s60 do var i , tmp ;
42092: LD_EXP 144
42096: IFFALSE 42165
42098: GO 42100
42100: DISABLE
42101: LD_INT 0
42103: PPUSH
42104: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42105: LD_ADDR_VAR 0 2
42109: PUSH
42110: LD_INT 22
42112: PUSH
42113: LD_OWVAR 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PPUSH
42122: CALL_OW 69
42126: ST_TO_ADDR
// if not tmp then
42127: LD_VAR 0 2
42131: NOT
42132: IFFALSE 42136
// exit ;
42134: GO 42165
// for i in tmp do
42136: LD_ADDR_VAR 0 1
42140: PUSH
42141: LD_VAR 0 2
42145: PUSH
42146: FOR_IN
42147: IFFALSE 42163
// SetLives ( i , 600 ) ;
42149: LD_VAR 0 1
42153: PPUSH
42154: LD_INT 600
42156: PPUSH
42157: CALL_OW 234
42161: GO 42146
42163: POP
42164: POP
// end ;
42165: PPOPN 2
42167: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42168: LD_INT 0
42170: PPUSH
// case cmd of 301 :
42171: LD_VAR 0 1
42175: PUSH
42176: LD_INT 301
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42184
42182: GO 42216
42184: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42185: LD_VAR 0 6
42189: PPUSH
42190: LD_VAR 0 7
42194: PPUSH
42195: LD_VAR 0 8
42199: PPUSH
42200: LD_VAR 0 4
42204: PPUSH
42205: LD_VAR 0 5
42209: PPUSH
42210: CALL 43417 0 5
42214: GO 42337
42216: LD_INT 302
42218: DOUBLE
42219: EQUAL
42220: IFTRUE 42224
42222: GO 42261
42224: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42225: LD_VAR 0 6
42229: PPUSH
42230: LD_VAR 0 7
42234: PPUSH
42235: LD_VAR 0 8
42239: PPUSH
42240: LD_VAR 0 9
42244: PPUSH
42245: LD_VAR 0 4
42249: PPUSH
42250: LD_VAR 0 5
42254: PPUSH
42255: CALL 43508 0 6
42259: GO 42337
42261: LD_INT 303
42263: DOUBLE
42264: EQUAL
42265: IFTRUE 42269
42267: GO 42306
42269: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42270: LD_VAR 0 6
42274: PPUSH
42275: LD_VAR 0 7
42279: PPUSH
42280: LD_VAR 0 8
42284: PPUSH
42285: LD_VAR 0 9
42289: PPUSH
42290: LD_VAR 0 4
42294: PPUSH
42295: LD_VAR 0 5
42299: PPUSH
42300: CALL 42342 0 6
42304: GO 42337
42306: LD_INT 304
42308: DOUBLE
42309: EQUAL
42310: IFTRUE 42314
42312: GO 42336
42314: POP
// hHackTeleport ( unit , x , y ) ; end ;
42315: LD_VAR 0 2
42319: PPUSH
42320: LD_VAR 0 4
42324: PPUSH
42325: LD_VAR 0 5
42329: PPUSH
42330: CALL 44101 0 3
42334: GO 42337
42336: POP
// end ;
42337: LD_VAR 0 12
42341: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42342: LD_INT 0
42344: PPUSH
42345: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42346: LD_VAR 0 1
42350: PUSH
42351: LD_INT 1
42353: LESS
42354: PUSH
42355: LD_VAR 0 1
42359: PUSH
42360: LD_INT 3
42362: GREATER
42363: OR
42364: PUSH
42365: LD_VAR 0 5
42369: PPUSH
42370: LD_VAR 0 6
42374: PPUSH
42375: CALL_OW 428
42379: OR
42380: IFFALSE 42384
// exit ;
42382: GO 43104
// uc_side := your_side ;
42384: LD_ADDR_OWVAR 20
42388: PUSH
42389: LD_OWVAR 2
42393: ST_TO_ADDR
// uc_nation := nation ;
42394: LD_ADDR_OWVAR 21
42398: PUSH
42399: LD_VAR 0 1
42403: ST_TO_ADDR
// bc_level = 1 ;
42404: LD_ADDR_OWVAR 43
42408: PUSH
42409: LD_INT 1
42411: ST_TO_ADDR
// case btype of 1 :
42412: LD_VAR 0 2
42416: PUSH
42417: LD_INT 1
42419: DOUBLE
42420: EQUAL
42421: IFTRUE 42425
42423: GO 42436
42425: POP
// bc_type := b_depot ; 2 :
42426: LD_ADDR_OWVAR 42
42430: PUSH
42431: LD_INT 0
42433: ST_TO_ADDR
42434: GO 43048
42436: LD_INT 2
42438: DOUBLE
42439: EQUAL
42440: IFTRUE 42444
42442: GO 42455
42444: POP
// bc_type := b_warehouse ; 3 :
42445: LD_ADDR_OWVAR 42
42449: PUSH
42450: LD_INT 1
42452: ST_TO_ADDR
42453: GO 43048
42455: LD_INT 3
42457: DOUBLE
42458: EQUAL
42459: IFTRUE 42463
42461: GO 42474
42463: POP
// bc_type := b_lab ; 4 .. 9 :
42464: LD_ADDR_OWVAR 42
42468: PUSH
42469: LD_INT 6
42471: ST_TO_ADDR
42472: GO 43048
42474: LD_INT 4
42476: DOUBLE
42477: GREATEREQUAL
42478: IFFALSE 42486
42480: LD_INT 9
42482: DOUBLE
42483: LESSEQUAL
42484: IFTRUE 42488
42486: GO 42540
42488: POP
// begin bc_type := b_lab_half ;
42489: LD_ADDR_OWVAR 42
42493: PUSH
42494: LD_INT 7
42496: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42497: LD_ADDR_OWVAR 44
42501: PUSH
42502: LD_INT 10
42504: PUSH
42505: LD_INT 11
42507: PUSH
42508: LD_INT 12
42510: PUSH
42511: LD_INT 15
42513: PUSH
42514: LD_INT 14
42516: PUSH
42517: LD_INT 13
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: PUSH
42528: LD_VAR 0 2
42532: PUSH
42533: LD_INT 3
42535: MINUS
42536: ARRAY
42537: ST_TO_ADDR
// end ; 10 .. 13 :
42538: GO 43048
42540: LD_INT 10
42542: DOUBLE
42543: GREATEREQUAL
42544: IFFALSE 42552
42546: LD_INT 13
42548: DOUBLE
42549: LESSEQUAL
42550: IFTRUE 42554
42552: GO 42631
42554: POP
// begin bc_type := b_lab_full ;
42555: LD_ADDR_OWVAR 42
42559: PUSH
42560: LD_INT 8
42562: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42563: LD_ADDR_OWVAR 44
42567: PUSH
42568: LD_INT 10
42570: PUSH
42571: LD_INT 12
42573: PUSH
42574: LD_INT 14
42576: PUSH
42577: LD_INT 13
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: PUSH
42586: LD_VAR 0 2
42590: PUSH
42591: LD_INT 9
42593: MINUS
42594: ARRAY
42595: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42596: LD_ADDR_OWVAR 45
42600: PUSH
42601: LD_INT 11
42603: PUSH
42604: LD_INT 15
42606: PUSH
42607: LD_INT 12
42609: PUSH
42610: LD_INT 15
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: PUSH
42619: LD_VAR 0 2
42623: PUSH
42624: LD_INT 9
42626: MINUS
42627: ARRAY
42628: ST_TO_ADDR
// end ; 14 :
42629: GO 43048
42631: LD_INT 14
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42639
42637: GO 42650
42639: POP
// bc_type := b_workshop ; 15 :
42640: LD_ADDR_OWVAR 42
42644: PUSH
42645: LD_INT 2
42647: ST_TO_ADDR
42648: GO 43048
42650: LD_INT 15
42652: DOUBLE
42653: EQUAL
42654: IFTRUE 42658
42656: GO 42669
42658: POP
// bc_type := b_factory ; 16 :
42659: LD_ADDR_OWVAR 42
42663: PUSH
42664: LD_INT 3
42666: ST_TO_ADDR
42667: GO 43048
42669: LD_INT 16
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42677
42675: GO 42688
42677: POP
// bc_type := b_ext_gun ; 17 :
42678: LD_ADDR_OWVAR 42
42682: PUSH
42683: LD_INT 17
42685: ST_TO_ADDR
42686: GO 43048
42688: LD_INT 17
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42724
42696: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
42697: LD_ADDR_OWVAR 42
42701: PUSH
42702: LD_INT 19
42704: PUSH
42705: LD_INT 23
42707: PUSH
42708: LD_INT 19
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: PUSH
42716: LD_VAR 0 1
42720: ARRAY
42721: ST_TO_ADDR
42722: GO 43048
42724: LD_INT 18
42726: DOUBLE
42727: EQUAL
42728: IFTRUE 42732
42730: GO 42743
42732: POP
// bc_type := b_ext_radar ; 19 :
42733: LD_ADDR_OWVAR 42
42737: PUSH
42738: LD_INT 20
42740: ST_TO_ADDR
42741: GO 43048
42743: LD_INT 19
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42751
42749: GO 42762
42751: POP
// bc_type := b_ext_radio ; 20 :
42752: LD_ADDR_OWVAR 42
42756: PUSH
42757: LD_INT 22
42759: ST_TO_ADDR
42760: GO 43048
42762: LD_INT 20
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42770
42768: GO 42781
42770: POP
// bc_type := b_ext_siberium ; 21 :
42771: LD_ADDR_OWVAR 42
42775: PUSH
42776: LD_INT 21
42778: ST_TO_ADDR
42779: GO 43048
42781: LD_INT 21
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 42800
42789: POP
// bc_type := b_ext_computer ; 22 :
42790: LD_ADDR_OWVAR 42
42794: PUSH
42795: LD_INT 24
42797: ST_TO_ADDR
42798: GO 43048
42800: LD_INT 22
42802: DOUBLE
42803: EQUAL
42804: IFTRUE 42808
42806: GO 42819
42808: POP
// bc_type := b_ext_track ; 23 :
42809: LD_ADDR_OWVAR 42
42813: PUSH
42814: LD_INT 16
42816: ST_TO_ADDR
42817: GO 43048
42819: LD_INT 23
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42838
42827: POP
// bc_type := b_ext_laser ; 24 :
42828: LD_ADDR_OWVAR 42
42832: PUSH
42833: LD_INT 25
42835: ST_TO_ADDR
42836: GO 43048
42838: LD_INT 24
42840: DOUBLE
42841: EQUAL
42842: IFTRUE 42846
42844: GO 42857
42846: POP
// bc_type := b_control_tower ; 25 :
42847: LD_ADDR_OWVAR 42
42851: PUSH
42852: LD_INT 36
42854: ST_TO_ADDR
42855: GO 43048
42857: LD_INT 25
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42865
42863: GO 42876
42865: POP
// bc_type := b_breastwork ; 26 :
42866: LD_ADDR_OWVAR 42
42870: PUSH
42871: LD_INT 31
42873: ST_TO_ADDR
42874: GO 43048
42876: LD_INT 26
42878: DOUBLE
42879: EQUAL
42880: IFTRUE 42884
42882: GO 42895
42884: POP
// bc_type := b_bunker ; 27 :
42885: LD_ADDR_OWVAR 42
42889: PUSH
42890: LD_INT 32
42892: ST_TO_ADDR
42893: GO 43048
42895: LD_INT 27
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42903
42901: GO 42914
42903: POP
// bc_type := b_turret ; 28 :
42904: LD_ADDR_OWVAR 42
42908: PUSH
42909: LD_INT 33
42911: ST_TO_ADDR
42912: GO 43048
42914: LD_INT 28
42916: DOUBLE
42917: EQUAL
42918: IFTRUE 42922
42920: GO 42933
42922: POP
// bc_type := b_armoury ; 29 :
42923: LD_ADDR_OWVAR 42
42927: PUSH
42928: LD_INT 4
42930: ST_TO_ADDR
42931: GO 43048
42933: LD_INT 29
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42941
42939: GO 42952
42941: POP
// bc_type := b_barracks ; 30 :
42942: LD_ADDR_OWVAR 42
42946: PUSH
42947: LD_INT 5
42949: ST_TO_ADDR
42950: GO 43048
42952: LD_INT 30
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42971
42960: POP
// bc_type := b_solar_power ; 31 :
42961: LD_ADDR_OWVAR 42
42965: PUSH
42966: LD_INT 27
42968: ST_TO_ADDR
42969: GO 43048
42971: LD_INT 31
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 42979
42977: GO 42990
42979: POP
// bc_type := b_oil_power ; 32 :
42980: LD_ADDR_OWVAR 42
42984: PUSH
42985: LD_INT 26
42987: ST_TO_ADDR
42988: GO 43048
42990: LD_INT 32
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 42998
42996: GO 43009
42998: POP
// bc_type := b_siberite_power ; 33 :
42999: LD_ADDR_OWVAR 42
43003: PUSH
43004: LD_INT 28
43006: ST_TO_ADDR
43007: GO 43048
43009: LD_INT 33
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43017
43015: GO 43028
43017: POP
// bc_type := b_oil_mine ; 34 :
43018: LD_ADDR_OWVAR 42
43022: PUSH
43023: LD_INT 29
43025: ST_TO_ADDR
43026: GO 43048
43028: LD_INT 34
43030: DOUBLE
43031: EQUAL
43032: IFTRUE 43036
43034: GO 43047
43036: POP
// bc_type := b_siberite_mine ; end ;
43037: LD_ADDR_OWVAR 42
43041: PUSH
43042: LD_INT 30
43044: ST_TO_ADDR
43045: GO 43048
43047: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43048: LD_ADDR_VAR 0 8
43052: PUSH
43053: LD_VAR 0 5
43057: PPUSH
43058: LD_VAR 0 6
43062: PPUSH
43063: LD_VAR 0 3
43067: PPUSH
43068: CALL_OW 47
43072: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43073: LD_OWVAR 42
43077: PUSH
43078: LD_INT 32
43080: PUSH
43081: LD_INT 33
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: IN
43088: IFFALSE 43104
// PlaceWeaponTurret ( b , weapon ) ;
43090: LD_VAR 0 8
43094: PPUSH
43095: LD_VAR 0 4
43099: PPUSH
43100: CALL_OW 431
// end ;
43104: LD_VAR 0 7
43108: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43109: LD_INT 0
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43115: LD_ADDR_VAR 0 4
43119: PUSH
43120: LD_INT 22
43122: PUSH
43123: LD_OWVAR 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 30
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 30
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PPUSH
43164: CALL_OW 69
43168: ST_TO_ADDR
// if not tmp then
43169: LD_VAR 0 4
43173: NOT
43174: IFFALSE 43178
// exit ;
43176: GO 43237
// for i in tmp do
43178: LD_ADDR_VAR 0 2
43182: PUSH
43183: LD_VAR 0 4
43187: PUSH
43188: FOR_IN
43189: IFFALSE 43235
// for j = 1 to 3 do
43191: LD_ADDR_VAR 0 3
43195: PUSH
43196: DOUBLE
43197: LD_INT 1
43199: DEC
43200: ST_TO_ADDR
43201: LD_INT 3
43203: PUSH
43204: FOR_TO
43205: IFFALSE 43231
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43207: LD_VAR 0 2
43211: PPUSH
43212: CALL_OW 274
43216: PPUSH
43217: LD_VAR 0 3
43221: PPUSH
43222: LD_INT 99999
43224: PPUSH
43225: CALL_OW 277
43229: GO 43204
43231: POP
43232: POP
43233: GO 43188
43235: POP
43236: POP
// end ;
43237: LD_VAR 0 1
43241: RET
// export function hHackSetLevel10 ; var i , j ; begin
43242: LD_INT 0
43244: PPUSH
43245: PPUSH
43246: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43247: LD_ADDR_VAR 0 2
43251: PUSH
43252: LD_INT 21
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PPUSH
43262: CALL_OW 69
43266: PUSH
43267: FOR_IN
43268: IFFALSE 43320
// if IsSelected ( i ) then
43270: LD_VAR 0 2
43274: PPUSH
43275: CALL_OW 306
43279: IFFALSE 43318
// begin for j := 1 to 4 do
43281: LD_ADDR_VAR 0 3
43285: PUSH
43286: DOUBLE
43287: LD_INT 1
43289: DEC
43290: ST_TO_ADDR
43291: LD_INT 4
43293: PUSH
43294: FOR_TO
43295: IFFALSE 43316
// SetSkill ( i , j , 10 ) ;
43297: LD_VAR 0 2
43301: PPUSH
43302: LD_VAR 0 3
43306: PPUSH
43307: LD_INT 10
43309: PPUSH
43310: CALL_OW 237
43314: GO 43294
43316: POP
43317: POP
// end ;
43318: GO 43267
43320: POP
43321: POP
// end ;
43322: LD_VAR 0 1
43326: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43327: LD_INT 0
43329: PPUSH
43330: PPUSH
43331: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43332: LD_ADDR_VAR 0 2
43336: PUSH
43337: LD_INT 22
43339: PUSH
43340: LD_OWVAR 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 21
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PPUSH
43363: CALL_OW 69
43367: PUSH
43368: FOR_IN
43369: IFFALSE 43410
// begin for j := 1 to 4 do
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: DOUBLE
43377: LD_INT 1
43379: DEC
43380: ST_TO_ADDR
43381: LD_INT 4
43383: PUSH
43384: FOR_TO
43385: IFFALSE 43406
// SetSkill ( i , j , 10 ) ;
43387: LD_VAR 0 2
43391: PPUSH
43392: LD_VAR 0 3
43396: PPUSH
43397: LD_INT 10
43399: PPUSH
43400: CALL_OW 237
43404: GO 43384
43406: POP
43407: POP
// end ;
43408: GO 43368
43410: POP
43411: POP
// end ;
43412: LD_VAR 0 1
43416: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43417: LD_INT 0
43419: PPUSH
// uc_side := your_side ;
43420: LD_ADDR_OWVAR 20
43424: PUSH
43425: LD_OWVAR 2
43429: ST_TO_ADDR
// uc_nation := nation ;
43430: LD_ADDR_OWVAR 21
43434: PUSH
43435: LD_VAR 0 1
43439: ST_TO_ADDR
// InitHc ;
43440: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43444: LD_INT 0
43446: PPUSH
43447: LD_VAR 0 2
43451: PPUSH
43452: LD_VAR 0 3
43456: PPUSH
43457: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43461: LD_VAR 0 4
43465: PPUSH
43466: LD_VAR 0 5
43470: PPUSH
43471: CALL_OW 428
43475: PUSH
43476: LD_INT 0
43478: EQUAL
43479: IFFALSE 43503
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43481: CALL_OW 44
43485: PPUSH
43486: LD_VAR 0 4
43490: PPUSH
43491: LD_VAR 0 5
43495: PPUSH
43496: LD_INT 1
43498: PPUSH
43499: CALL_OW 48
// end ;
43503: LD_VAR 0 6
43507: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43508: LD_INT 0
43510: PPUSH
43511: PPUSH
// uc_side := your_side ;
43512: LD_ADDR_OWVAR 20
43516: PUSH
43517: LD_OWVAR 2
43521: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43522: LD_VAR 0 1
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 4
43538: PUSH
43539: LD_INT 5
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: IN
43549: IFFALSE 43561
// uc_nation := nation_american else
43551: LD_ADDR_OWVAR 21
43555: PUSH
43556: LD_INT 1
43558: ST_TO_ADDR
43559: GO 43604
// if chassis in [ 11 , 12 , 13 , 14 ] then
43561: LD_VAR 0 1
43565: PUSH
43566: LD_INT 11
43568: PUSH
43569: LD_INT 12
43571: PUSH
43572: LD_INT 13
43574: PUSH
43575: LD_INT 14
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: IN
43584: IFFALSE 43596
// uc_nation := nation_arabian else
43586: LD_ADDR_OWVAR 21
43590: PUSH
43591: LD_INT 2
43593: ST_TO_ADDR
43594: GO 43604
// uc_nation := nation_russian ;
43596: LD_ADDR_OWVAR 21
43600: PUSH
43601: LD_INT 3
43603: ST_TO_ADDR
// vc_chassis := chassis ;
43604: LD_ADDR_OWVAR 37
43608: PUSH
43609: LD_VAR 0 1
43613: ST_TO_ADDR
// vc_engine := engine ;
43614: LD_ADDR_OWVAR 39
43618: PUSH
43619: LD_VAR 0 2
43623: ST_TO_ADDR
// vc_control := control ;
43624: LD_ADDR_OWVAR 38
43628: PUSH
43629: LD_VAR 0 3
43633: ST_TO_ADDR
// vc_weapon := weapon ;
43634: LD_ADDR_OWVAR 40
43638: PUSH
43639: LD_VAR 0 4
43643: ST_TO_ADDR
// un := CreateVehicle ;
43644: LD_ADDR_VAR 0 8
43648: PUSH
43649: CALL_OW 45
43653: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43654: LD_VAR 0 8
43658: PPUSH
43659: LD_INT 0
43661: PPUSH
43662: LD_INT 5
43664: PPUSH
43665: CALL_OW 12
43669: PPUSH
43670: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
43674: LD_VAR 0 8
43678: PPUSH
43679: LD_VAR 0 5
43683: PPUSH
43684: LD_VAR 0 6
43688: PPUSH
43689: LD_INT 1
43691: PPUSH
43692: CALL_OW 48
// end ;
43696: LD_VAR 0 7
43700: RET
// export hInvincible ; every 1 do
43701: GO 43703
43703: DISABLE
// hInvincible := [ ] ;
43704: LD_ADDR_EXP 145
43708: PUSH
43709: EMPTY
43710: ST_TO_ADDR
43711: END
// every 10 do var i ;
43712: GO 43714
43714: DISABLE
43715: LD_INT 0
43717: PPUSH
// begin enable ;
43718: ENABLE
// if not hInvincible then
43719: LD_EXP 145
43723: NOT
43724: IFFALSE 43728
// exit ;
43726: GO 43772
// for i in hInvincible do
43728: LD_ADDR_VAR 0 1
43732: PUSH
43733: LD_EXP 145
43737: PUSH
43738: FOR_IN
43739: IFFALSE 43770
// if GetLives ( i ) < 1000 then
43741: LD_VAR 0 1
43745: PPUSH
43746: CALL_OW 256
43750: PUSH
43751: LD_INT 1000
43753: LESS
43754: IFFALSE 43768
// SetLives ( i , 1000 ) ;
43756: LD_VAR 0 1
43760: PPUSH
43761: LD_INT 1000
43763: PPUSH
43764: CALL_OW 234
43768: GO 43738
43770: POP
43771: POP
// end ;
43772: PPOPN 1
43774: END
// export function hHackInvincible ; var i ; begin
43775: LD_INT 0
43777: PPUSH
43778: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
43779: LD_ADDR_VAR 0 2
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 21
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 21
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: PPUSH
43812: CALL_OW 69
43816: PUSH
43817: FOR_IN
43818: IFFALSE 43879
// if IsSelected ( i ) then
43820: LD_VAR 0 2
43824: PPUSH
43825: CALL_OW 306
43829: IFFALSE 43877
// begin if i in hInvincible then
43831: LD_VAR 0 2
43835: PUSH
43836: LD_EXP 145
43840: IN
43841: IFFALSE 43861
// hInvincible := hInvincible diff i else
43843: LD_ADDR_EXP 145
43847: PUSH
43848: LD_EXP 145
43852: PUSH
43853: LD_VAR 0 2
43857: DIFF
43858: ST_TO_ADDR
43859: GO 43877
// hInvincible := hInvincible union i ;
43861: LD_ADDR_EXP 145
43865: PUSH
43866: LD_EXP 145
43870: PUSH
43871: LD_VAR 0 2
43875: UNION
43876: ST_TO_ADDR
// end ;
43877: GO 43817
43879: POP
43880: POP
// end ;
43881: LD_VAR 0 1
43885: RET
// export function hHackInvisible ; var i , j ; begin
43886: LD_INT 0
43888: PPUSH
43889: PPUSH
43890: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43891: LD_ADDR_VAR 0 2
43895: PUSH
43896: LD_INT 21
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PPUSH
43906: CALL_OW 69
43910: PUSH
43911: FOR_IN
43912: IFFALSE 43936
// if IsSelected ( i ) then
43914: LD_VAR 0 2
43918: PPUSH
43919: CALL_OW 306
43923: IFFALSE 43934
// ComForceInvisible ( i ) ;
43925: LD_VAR 0 2
43929: PPUSH
43930: CALL_OW 496
43934: GO 43911
43936: POP
43937: POP
// end ;
43938: LD_VAR 0 1
43942: RET
// export function hHackChangeYourSide ; begin
43943: LD_INT 0
43945: PPUSH
// if your_side = 8 then
43946: LD_OWVAR 2
43950: PUSH
43951: LD_INT 8
43953: EQUAL
43954: IFFALSE 43966
// your_side := 0 else
43956: LD_ADDR_OWVAR 2
43960: PUSH
43961: LD_INT 0
43963: ST_TO_ADDR
43964: GO 43980
// your_side := your_side + 1 ;
43966: LD_ADDR_OWVAR 2
43970: PUSH
43971: LD_OWVAR 2
43975: PUSH
43976: LD_INT 1
43978: PLUS
43979: ST_TO_ADDR
// end ;
43980: LD_VAR 0 1
43984: RET
// export function hHackChangeUnitSide ; var i , j ; begin
43985: LD_INT 0
43987: PPUSH
43988: PPUSH
43989: PPUSH
// for i in all_units do
43990: LD_ADDR_VAR 0 2
43994: PUSH
43995: LD_OWVAR 3
43999: PUSH
44000: FOR_IN
44001: IFFALSE 44079
// if IsSelected ( i ) then
44003: LD_VAR 0 2
44007: PPUSH
44008: CALL_OW 306
44012: IFFALSE 44077
// begin j := GetSide ( i ) ;
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_VAR 0 2
44023: PPUSH
44024: CALL_OW 255
44028: ST_TO_ADDR
// if j = 8 then
44029: LD_VAR 0 3
44033: PUSH
44034: LD_INT 8
44036: EQUAL
44037: IFFALSE 44049
// j := 0 else
44039: LD_ADDR_VAR 0 3
44043: PUSH
44044: LD_INT 0
44046: ST_TO_ADDR
44047: GO 44063
// j := j + 1 ;
44049: LD_ADDR_VAR 0 3
44053: PUSH
44054: LD_VAR 0 3
44058: PUSH
44059: LD_INT 1
44061: PLUS
44062: ST_TO_ADDR
// SetSide ( i , j ) ;
44063: LD_VAR 0 2
44067: PPUSH
44068: LD_VAR 0 3
44072: PPUSH
44073: CALL_OW 235
// end ;
44077: GO 44000
44079: POP
44080: POP
// end ;
44081: LD_VAR 0 1
44085: RET
// export function hHackFog ; begin
44086: LD_INT 0
44088: PPUSH
// FogOff ( true ) ;
44089: LD_INT 1
44091: PPUSH
44092: CALL_OW 344
// end ;
44096: LD_VAR 0 1
44100: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44101: LD_INT 0
44103: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44104: LD_VAR 0 1
44108: PPUSH
44109: LD_VAR 0 2
44113: PPUSH
44114: LD_VAR 0 3
44118: PPUSH
44119: LD_INT 1
44121: PPUSH
44122: LD_INT 1
44124: PPUSH
44125: CALL_OW 483
// CenterOnXY ( x , y ) ;
44129: LD_VAR 0 2
44133: PPUSH
44134: LD_VAR 0 3
44138: PPUSH
44139: CALL_OW 84
// end ; end_of_file
44143: LD_VAR 0 4
44147: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
44148: LD_INT 0
44150: PPUSH
44151: PPUSH
44152: PPUSH
44153: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
44154: LD_VAR 0 1
44158: PPUSH
44159: CALL_OW 264
44163: PUSH
44164: LD_EXP 73
44168: EQUAL
44169: IFFALSE 44241
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44171: LD_INT 68
44173: PPUSH
44174: LD_VAR 0 1
44178: PPUSH
44179: CALL_OW 255
44183: PPUSH
44184: CALL_OW 321
44188: PUSH
44189: LD_INT 2
44191: EQUAL
44192: IFFALSE 44204
// eff := 70 else
44194: LD_ADDR_VAR 0 4
44198: PUSH
44199: LD_INT 70
44201: ST_TO_ADDR
44202: GO 44212
// eff := 30 ;
44204: LD_ADDR_VAR 0 4
44208: PUSH
44209: LD_INT 30
44211: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 250
44221: PPUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: CALL_OW 251
44231: PPUSH
44232: LD_VAR 0 4
44236: PPUSH
44237: CALL_OW 495
// end ; end ;
44241: LD_VAR 0 2
44245: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44246: LD_INT 0
44248: PPUSH
// end ;
44249: LD_VAR 0 4
44253: RET
// export function SOS_Command ( cmd ) ; begin
44254: LD_INT 0
44256: PPUSH
// end ;
44257: LD_VAR 0 2
44261: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44262: LD_INT 0
44264: PPUSH
// end ;
44265: LD_VAR 0 6
44269: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44270: LD_INT 0
44272: PPUSH
44273: PPUSH
// if not vehicle or not factory then
44274: LD_VAR 0 1
44278: NOT
44279: PUSH
44280: LD_VAR 0 2
44284: NOT
44285: OR
44286: IFFALSE 44290
// exit ;
44288: GO 44521
// if factoryWaypoints >= factory then
44290: LD_EXP 146
44294: PUSH
44295: LD_VAR 0 2
44299: GREATEREQUAL
44300: IFFALSE 44521
// if factoryWaypoints [ factory ] then
44302: LD_EXP 146
44306: PUSH
44307: LD_VAR 0 2
44311: ARRAY
44312: IFFALSE 44521
// begin if GetControl ( vehicle ) = control_manual then
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL_OW 263
44323: PUSH
44324: LD_INT 1
44326: EQUAL
44327: IFFALSE 44408
// begin driver := IsDrivenBy ( vehicle ) ;
44329: LD_ADDR_VAR 0 4
44333: PUSH
44334: LD_VAR 0 1
44338: PPUSH
44339: CALL_OW 311
44343: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
44344: LD_VAR 0 4
44348: PPUSH
44349: LD_EXP 146
44353: PUSH
44354: LD_VAR 0 2
44358: ARRAY
44359: PUSH
44360: LD_INT 1
44362: ARRAY
44363: PPUSH
44364: LD_EXP 146
44368: PUSH
44369: LD_VAR 0 2
44373: ARRAY
44374: PUSH
44375: LD_INT 2
44377: ARRAY
44378: PPUSH
44379: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44383: LD_VAR 0 4
44387: PPUSH
44388: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44392: LD_VAR 0 4
44396: PPUSH
44397: LD_VAR 0 2
44401: PPUSH
44402: CALL_OW 180
// end else
44406: GO 44521
// if GetControl ( vehicle ) = control_remote then
44408: LD_VAR 0 1
44412: PPUSH
44413: CALL_OW 263
44417: PUSH
44418: LD_INT 2
44420: EQUAL
44421: IFFALSE 44482
// begin wait ( 0 0$2 ) ;
44423: LD_INT 70
44425: PPUSH
44426: CALL_OW 67
// if Connect ( vehicle ) then
44430: LD_VAR 0 1
44434: PPUSH
44435: CALL 56745 0 1
44439: IFFALSE 44480
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
44441: LD_VAR 0 1
44445: PPUSH
44446: LD_EXP 146
44450: PUSH
44451: LD_VAR 0 2
44455: ARRAY
44456: PUSH
44457: LD_INT 1
44459: ARRAY
44460: PPUSH
44461: LD_EXP 146
44465: PUSH
44466: LD_VAR 0 2
44470: ARRAY
44471: PUSH
44472: LD_INT 2
44474: ARRAY
44475: PPUSH
44476: CALL_OW 171
// end else
44480: GO 44521
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
44482: LD_VAR 0 1
44486: PPUSH
44487: LD_EXP 146
44491: PUSH
44492: LD_VAR 0 2
44496: ARRAY
44497: PUSH
44498: LD_INT 1
44500: ARRAY
44501: PPUSH
44502: LD_EXP 146
44506: PUSH
44507: LD_VAR 0 2
44511: ARRAY
44512: PUSH
44513: LD_INT 2
44515: ARRAY
44516: PPUSH
44517: CALL_OW 171
// end ; end ;
44521: LD_VAR 0 3
44525: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44526: LD_INT 0
44528: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44529: LD_VAR 0 1
44533: PUSH
44534: LD_INT 250
44536: EQUAL
44537: PUSH
44538: LD_VAR 0 2
44542: PPUSH
44543: CALL_OW 264
44547: PUSH
44548: LD_EXP 76
44552: EQUAL
44553: AND
44554: IFFALSE 44575
// MinerPlaceMine ( unit , x , y ) ;
44556: LD_VAR 0 2
44560: PPUSH
44561: LD_VAR 0 4
44565: PPUSH
44566: LD_VAR 0 5
44570: PPUSH
44571: CALL 47303 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44575: LD_VAR 0 1
44579: PUSH
44580: LD_INT 251
44582: EQUAL
44583: PUSH
44584: LD_VAR 0 2
44588: PPUSH
44589: CALL_OW 264
44593: PUSH
44594: LD_EXP 76
44598: EQUAL
44599: AND
44600: IFFALSE 44621
// MinerDetonateMine ( unit , x , y ) ;
44602: LD_VAR 0 2
44606: PPUSH
44607: LD_VAR 0 4
44611: PPUSH
44612: LD_VAR 0 5
44616: PPUSH
44617: CALL 47580 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44621: LD_VAR 0 1
44625: PUSH
44626: LD_INT 252
44628: EQUAL
44629: PUSH
44630: LD_VAR 0 2
44634: PPUSH
44635: CALL_OW 264
44639: PUSH
44640: LD_EXP 76
44644: EQUAL
44645: AND
44646: IFFALSE 44667
// MinerCreateMinefield ( unit , x , y ) ;
44648: LD_VAR 0 2
44652: PPUSH
44653: LD_VAR 0 4
44657: PPUSH
44658: LD_VAR 0 5
44662: PPUSH
44663: CALL 47997 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44667: LD_VAR 0 1
44671: PUSH
44672: LD_INT 253
44674: EQUAL
44675: PUSH
44676: LD_VAR 0 2
44680: PPUSH
44681: CALL_OW 257
44685: PUSH
44686: LD_INT 5
44688: EQUAL
44689: AND
44690: IFFALSE 44711
// ComBinocular ( unit , x , y ) ;
44692: LD_VAR 0 2
44696: PPUSH
44697: LD_VAR 0 4
44701: PPUSH
44702: LD_VAR 0 5
44706: PPUSH
44707: CALL 48368 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44711: LD_VAR 0 1
44715: PUSH
44716: LD_INT 254
44718: EQUAL
44719: PUSH
44720: LD_VAR 0 2
44724: PPUSH
44725: CALL_OW 264
44729: PUSH
44730: LD_EXP 71
44734: EQUAL
44735: AND
44736: PUSH
44737: LD_VAR 0 3
44741: PPUSH
44742: CALL_OW 263
44746: PUSH
44747: LD_INT 3
44749: EQUAL
44750: AND
44751: IFFALSE 44767
// HackDestroyVehicle ( unit , selectedUnit ) ;
44753: LD_VAR 0 2
44757: PPUSH
44758: LD_VAR 0 3
44762: PPUSH
44763: CALL 46663 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44767: LD_VAR 0 1
44771: PUSH
44772: LD_INT 255
44774: EQUAL
44775: PUSH
44776: LD_VAR 0 2
44780: PPUSH
44781: CALL_OW 264
44785: PUSH
44786: LD_INT 14
44788: PUSH
44789: LD_INT 53
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: IN
44796: AND
44797: PUSH
44798: LD_VAR 0 4
44802: PPUSH
44803: LD_VAR 0 5
44807: PPUSH
44808: CALL_OW 488
44812: AND
44813: IFFALSE 44837
// CutTreeXYR ( unit , x , y , 12 ) ;
44815: LD_VAR 0 2
44819: PPUSH
44820: LD_VAR 0 4
44824: PPUSH
44825: LD_VAR 0 5
44829: PPUSH
44830: LD_INT 12
44832: PPUSH
44833: CALL 45229 0 4
// if cmd = 256 then
44837: LD_VAR 0 1
44841: PUSH
44842: LD_INT 256
44844: EQUAL
44845: IFFALSE 44866
// SetFactoryWaypoint ( unit , x , y ) ;
44847: LD_VAR 0 2
44851: PPUSH
44852: LD_VAR 0 4
44856: PPUSH
44857: LD_VAR 0 5
44861: PPUSH
44862: CALL 44871 0 3
// end ;
44866: LD_VAR 0 6
44870: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44871: LD_INT 0
44873: PPUSH
44874: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44875: LD_VAR 0 1
44879: NOT
44880: PUSH
44881: LD_VAR 0 2
44885: PPUSH
44886: LD_VAR 0 3
44890: PPUSH
44891: CALL_OW 488
44895: NOT
44896: OR
44897: PUSH
44898: LD_VAR 0 1
44902: PPUSH
44903: CALL_OW 266
44907: PUSH
44908: LD_INT 3
44910: NONEQUAL
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 247
44921: PUSH
44922: LD_INT 1
44924: EQUAL
44925: NOT
44926: AND
44927: OR
44928: IFFALSE 44932
// exit ;
44930: GO 45081
// if GetType ( factory ) = unit_human then
44932: LD_VAR 0 1
44936: PPUSH
44937: CALL_OW 247
44941: PUSH
44942: LD_INT 1
44944: EQUAL
44945: IFFALSE 44962
// factory := IsInUnit ( factory ) ;
44947: LD_ADDR_VAR 0 1
44951: PUSH
44952: LD_VAR 0 1
44956: PPUSH
44957: CALL_OW 310
44961: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44962: LD_VAR 0 1
44966: PPUSH
44967: CALL_OW 266
44971: PUSH
44972: LD_INT 3
44974: NONEQUAL
44975: IFFALSE 44979
// exit ;
44977: GO 45081
// if HexInfo ( x , y ) = factory then
44979: LD_VAR 0 2
44983: PPUSH
44984: LD_VAR 0 3
44988: PPUSH
44989: CALL_OW 428
44993: PUSH
44994: LD_VAR 0 1
44998: EQUAL
44999: IFFALSE 45026
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
45001: LD_ADDR_EXP 146
45005: PUSH
45006: LD_EXP 146
45010: PPUSH
45011: LD_VAR 0 1
45015: PPUSH
45016: LD_INT 0
45018: PPUSH
45019: CALL_OW 1
45023: ST_TO_ADDR
45024: GO 45077
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
45026: LD_ADDR_EXP 146
45030: PUSH
45031: LD_EXP 146
45035: PPUSH
45036: LD_VAR 0 1
45040: PPUSH
45041: LD_VAR 0 1
45045: PPUSH
45046: CALL_OW 255
45050: PUSH
45051: LD_VAR 0 1
45055: PUSH
45056: LD_VAR 0 2
45060: PUSH
45061: LD_VAR 0 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: PPUSH
45072: CALL_OW 1
45076: ST_TO_ADDR
// UpdateFactoryWaypoints ;
45077: CALL 45086 0 0
// end ;
45081: LD_VAR 0 4
45085: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
45086: LD_INT 0
45088: PPUSH
45089: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
45090: LD_STRING resetFactoryWaypoint();
45092: PPUSH
45093: CALL_OW 559
// if factoryWaypoints then
45097: LD_EXP 146
45101: IFFALSE 45224
// begin for i := 1 to factoryWaypoints do
45103: LD_ADDR_VAR 0 2
45107: PUSH
45108: DOUBLE
45109: LD_INT 1
45111: DEC
45112: ST_TO_ADDR
45113: LD_EXP 146
45117: PUSH
45118: FOR_TO
45119: IFFALSE 45222
// if factoryWaypoints [ i ] then
45121: LD_EXP 146
45125: PUSH
45126: LD_VAR 0 2
45130: ARRAY
45131: IFFALSE 45220
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
45133: LD_STRING setFactoryWaypointXY(
45135: PUSH
45136: LD_EXP 146
45140: PUSH
45141: LD_VAR 0 2
45145: ARRAY
45146: PUSH
45147: LD_INT 1
45149: ARRAY
45150: STR
45151: PUSH
45152: LD_STRING ,
45154: STR
45155: PUSH
45156: LD_EXP 146
45160: PUSH
45161: LD_VAR 0 2
45165: ARRAY
45166: PUSH
45167: LD_INT 2
45169: ARRAY
45170: STR
45171: PUSH
45172: LD_STRING ,
45174: STR
45175: PUSH
45176: LD_EXP 146
45180: PUSH
45181: LD_VAR 0 2
45185: ARRAY
45186: PUSH
45187: LD_INT 3
45189: ARRAY
45190: STR
45191: PUSH
45192: LD_STRING ,
45194: STR
45195: PUSH
45196: LD_EXP 146
45200: PUSH
45201: LD_VAR 0 2
45205: ARRAY
45206: PUSH
45207: LD_INT 4
45209: ARRAY
45210: STR
45211: PUSH
45212: LD_STRING )
45214: STR
45215: PPUSH
45216: CALL_OW 559
45220: GO 45118
45222: POP
45223: POP
// end ; end ;
45224: LD_VAR 0 1
45228: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45229: LD_INT 0
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
45240: LD_VAR 0 1
45244: NOT
45245: PUSH
45246: LD_VAR 0 2
45250: PPUSH
45251: LD_VAR 0 3
45255: PPUSH
45256: CALL_OW 488
45260: NOT
45261: OR
45262: PUSH
45263: LD_VAR 0 4
45267: NOT
45268: OR
45269: IFFALSE 45273
// exit ;
45271: GO 45613
// list := [ ] ;
45273: LD_ADDR_VAR 0 13
45277: PUSH
45278: EMPTY
45279: ST_TO_ADDR
// if x - r < 0 then
45280: LD_VAR 0 2
45284: PUSH
45285: LD_VAR 0 4
45289: MINUS
45290: PUSH
45291: LD_INT 0
45293: LESS
45294: IFFALSE 45306
// min_x := 0 else
45296: LD_ADDR_VAR 0 7
45300: PUSH
45301: LD_INT 0
45303: ST_TO_ADDR
45304: GO 45322
// min_x := x - r ;
45306: LD_ADDR_VAR 0 7
45310: PUSH
45311: LD_VAR 0 2
45315: PUSH
45316: LD_VAR 0 4
45320: MINUS
45321: ST_TO_ADDR
// if y - r < 0 then
45322: LD_VAR 0 3
45326: PUSH
45327: LD_VAR 0 4
45331: MINUS
45332: PUSH
45333: LD_INT 0
45335: LESS
45336: IFFALSE 45348
// min_y := 0 else
45338: LD_ADDR_VAR 0 8
45342: PUSH
45343: LD_INT 0
45345: ST_TO_ADDR
45346: GO 45364
// min_y := y - r ;
45348: LD_ADDR_VAR 0 8
45352: PUSH
45353: LD_VAR 0 3
45357: PUSH
45358: LD_VAR 0 4
45362: MINUS
45363: ST_TO_ADDR
// max_x := x + r ;
45364: LD_ADDR_VAR 0 9
45368: PUSH
45369: LD_VAR 0 2
45373: PUSH
45374: LD_VAR 0 4
45378: PLUS
45379: ST_TO_ADDR
// max_y := y + r ;
45380: LD_ADDR_VAR 0 10
45384: PUSH
45385: LD_VAR 0 3
45389: PUSH
45390: LD_VAR 0 4
45394: PLUS
45395: ST_TO_ADDR
// for _x = min_x to max_x do
45396: LD_ADDR_VAR 0 11
45400: PUSH
45401: DOUBLE
45402: LD_VAR 0 7
45406: DEC
45407: ST_TO_ADDR
45408: LD_VAR 0 9
45412: PUSH
45413: FOR_TO
45414: IFFALSE 45531
// for _y = min_y to max_y do
45416: LD_ADDR_VAR 0 12
45420: PUSH
45421: DOUBLE
45422: LD_VAR 0 8
45426: DEC
45427: ST_TO_ADDR
45428: LD_VAR 0 10
45432: PUSH
45433: FOR_TO
45434: IFFALSE 45527
// begin if not ValidHex ( _x , _y ) then
45436: LD_VAR 0 11
45440: PPUSH
45441: LD_VAR 0 12
45445: PPUSH
45446: CALL_OW 488
45450: NOT
45451: IFFALSE 45455
// continue ;
45453: GO 45433
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45455: LD_VAR 0 11
45459: PPUSH
45460: LD_VAR 0 12
45464: PPUSH
45465: CALL_OW 351
45469: PUSH
45470: LD_VAR 0 11
45474: PPUSH
45475: LD_VAR 0 12
45479: PPUSH
45480: CALL_OW 554
45484: AND
45485: IFFALSE 45525
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45487: LD_ADDR_VAR 0 13
45491: PUSH
45492: LD_VAR 0 13
45496: PPUSH
45497: LD_VAR 0 13
45501: PUSH
45502: LD_INT 1
45504: PLUS
45505: PPUSH
45506: LD_VAR 0 11
45510: PUSH
45511: LD_VAR 0 12
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PPUSH
45520: CALL_OW 2
45524: ST_TO_ADDR
// end ;
45525: GO 45433
45527: POP
45528: POP
45529: GO 45413
45531: POP
45532: POP
// if not list then
45533: LD_VAR 0 13
45537: NOT
45538: IFFALSE 45542
// exit ;
45540: GO 45613
// for i in list do
45542: LD_ADDR_VAR 0 6
45546: PUSH
45547: LD_VAR 0 13
45551: PUSH
45552: FOR_IN
45553: IFFALSE 45611
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45555: LD_VAR 0 1
45559: PPUSH
45560: LD_STRING M
45562: PUSH
45563: LD_VAR 0 6
45567: PUSH
45568: LD_INT 1
45570: ARRAY
45571: PUSH
45572: LD_VAR 0 6
45576: PUSH
45577: LD_INT 2
45579: ARRAY
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: PPUSH
45605: CALL_OW 447
45609: GO 45552
45611: POP
45612: POP
// end ;
45613: LD_VAR 0 5
45617: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45618: LD_EXP 147
45622: NOT
45623: IFFALSE 45673
45625: GO 45627
45627: DISABLE
// begin initHack := true ;
45628: LD_ADDR_EXP 147
45632: PUSH
45633: LD_INT 1
45635: ST_TO_ADDR
// hackTanks := [ ] ;
45636: LD_ADDR_EXP 148
45640: PUSH
45641: EMPTY
45642: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45643: LD_ADDR_EXP 149
45647: PUSH
45648: EMPTY
45649: ST_TO_ADDR
// hackLimit := 3 ;
45650: LD_ADDR_EXP 150
45654: PUSH
45655: LD_INT 3
45657: ST_TO_ADDR
// hackDist := 12 ;
45658: LD_ADDR_EXP 151
45662: PUSH
45663: LD_INT 12
45665: ST_TO_ADDR
// hackCounter := [ ] ;
45666: LD_ADDR_EXP 152
45670: PUSH
45671: EMPTY
45672: ST_TO_ADDR
// end ;
45673: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45674: LD_EXP 147
45678: PUSH
45679: LD_INT 34
45681: PUSH
45682: LD_EXP 71
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PPUSH
45691: CALL_OW 69
45695: AND
45696: IFFALSE 45951
45698: GO 45700
45700: DISABLE
45701: LD_INT 0
45703: PPUSH
45704: PPUSH
// begin enable ;
45705: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45706: LD_ADDR_VAR 0 1
45710: PUSH
45711: LD_INT 34
45713: PUSH
45714: LD_EXP 71
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PPUSH
45723: CALL_OW 69
45727: PUSH
45728: FOR_IN
45729: IFFALSE 45949
// begin if not i in hackTanks then
45731: LD_VAR 0 1
45735: PUSH
45736: LD_EXP 148
45740: IN
45741: NOT
45742: IFFALSE 45825
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45744: LD_ADDR_EXP 148
45748: PUSH
45749: LD_EXP 148
45753: PPUSH
45754: LD_EXP 148
45758: PUSH
45759: LD_INT 1
45761: PLUS
45762: PPUSH
45763: LD_VAR 0 1
45767: PPUSH
45768: CALL_OW 1
45772: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45773: LD_ADDR_EXP 149
45777: PUSH
45778: LD_EXP 149
45782: PPUSH
45783: LD_EXP 149
45787: PUSH
45788: LD_INT 1
45790: PLUS
45791: PPUSH
45792: EMPTY
45793: PPUSH
45794: CALL_OW 1
45798: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45799: LD_ADDR_EXP 152
45803: PUSH
45804: LD_EXP 152
45808: PPUSH
45809: LD_EXP 152
45813: PUSH
45814: LD_INT 1
45816: PLUS
45817: PPUSH
45818: EMPTY
45819: PPUSH
45820: CALL_OW 1
45824: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45825: LD_VAR 0 1
45829: PPUSH
45830: CALL_OW 302
45834: NOT
45835: IFFALSE 45848
// begin HackUnlinkAll ( i ) ;
45837: LD_VAR 0 1
45841: PPUSH
45842: CALL 45954 0 1
// continue ;
45846: GO 45728
// end ; HackCheckCapturedStatus ( i ) ;
45848: LD_VAR 0 1
45852: PPUSH
45853: CALL 46397 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45857: LD_ADDR_VAR 0 2
45861: PUSH
45862: LD_INT 81
45864: PUSH
45865: LD_VAR 0 1
45869: PPUSH
45870: CALL_OW 255
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 33
45881: PUSH
45882: LD_INT 3
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 91
45891: PUSH
45892: LD_VAR 0 1
45896: PUSH
45897: LD_EXP 151
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 50
45909: PUSH
45910: EMPTY
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: PPUSH
45919: CALL_OW 69
45923: ST_TO_ADDR
// if not tmp then
45924: LD_VAR 0 2
45928: NOT
45929: IFFALSE 45933
// continue ;
45931: GO 45728
// HackLink ( i , tmp ) ;
45933: LD_VAR 0 1
45937: PPUSH
45938: LD_VAR 0 2
45942: PPUSH
45943: CALL 46090 0 2
// end ;
45947: GO 45728
45949: POP
45950: POP
// end ;
45951: PPOPN 2
45953: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45954: LD_INT 0
45956: PPUSH
45957: PPUSH
45958: PPUSH
// if not hack in hackTanks then
45959: LD_VAR 0 1
45963: PUSH
45964: LD_EXP 148
45968: IN
45969: NOT
45970: IFFALSE 45974
// exit ;
45972: GO 46085
// index := GetElementIndex ( hackTanks , hack ) ;
45974: LD_ADDR_VAR 0 4
45978: PUSH
45979: LD_EXP 148
45983: PPUSH
45984: LD_VAR 0 1
45988: PPUSH
45989: CALL 53559 0 2
45993: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
45994: LD_EXP 149
45998: PUSH
45999: LD_VAR 0 4
46003: ARRAY
46004: IFFALSE 46085
// begin for i in hackTanksCaptured [ index ] do
46006: LD_ADDR_VAR 0 3
46010: PUSH
46011: LD_EXP 149
46015: PUSH
46016: LD_VAR 0 4
46020: ARRAY
46021: PUSH
46022: FOR_IN
46023: IFFALSE 46049
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
46025: LD_VAR 0 3
46029: PUSH
46030: LD_INT 1
46032: ARRAY
46033: PPUSH
46034: LD_VAR 0 3
46038: PUSH
46039: LD_INT 2
46041: ARRAY
46042: PPUSH
46043: CALL_OW 235
46047: GO 46022
46049: POP
46050: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
46051: LD_ADDR_EXP 149
46055: PUSH
46056: LD_EXP 149
46060: PPUSH
46061: LD_VAR 0 4
46065: PPUSH
46066: EMPTY
46067: PPUSH
46068: CALL_OW 1
46072: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
46073: LD_VAR 0 1
46077: PPUSH
46078: LD_INT 0
46080: PPUSH
46081: CALL_OW 505
// end ; end ;
46085: LD_VAR 0 2
46089: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
46090: LD_INT 0
46092: PPUSH
46093: PPUSH
46094: PPUSH
// if not hack in hackTanks or not vehicles then
46095: LD_VAR 0 1
46099: PUSH
46100: LD_EXP 148
46104: IN
46105: NOT
46106: PUSH
46107: LD_VAR 0 2
46111: NOT
46112: OR
46113: IFFALSE 46117
// exit ;
46115: GO 46392
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
46117: LD_ADDR_VAR 0 2
46121: PUSH
46122: LD_VAR 0 1
46126: PPUSH
46127: LD_VAR 0 2
46131: PPUSH
46132: LD_INT 1
46134: PPUSH
46135: LD_INT 1
46137: PPUSH
46138: CALL 54209 0 4
46142: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
46143: LD_ADDR_VAR 0 5
46147: PUSH
46148: LD_EXP 148
46152: PPUSH
46153: LD_VAR 0 1
46157: PPUSH
46158: CALL 53559 0 2
46162: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
46163: LD_EXP 149
46167: PUSH
46168: LD_VAR 0 5
46172: ARRAY
46173: PUSH
46174: LD_EXP 150
46178: LESS
46179: IFFALSE 46368
// begin for i := 1 to vehicles do
46181: LD_ADDR_VAR 0 4
46185: PUSH
46186: DOUBLE
46187: LD_INT 1
46189: DEC
46190: ST_TO_ADDR
46191: LD_VAR 0 2
46195: PUSH
46196: FOR_TO
46197: IFFALSE 46366
// begin if hackTanksCaptured [ index ] = hackLimit then
46199: LD_EXP 149
46203: PUSH
46204: LD_VAR 0 5
46208: ARRAY
46209: PUSH
46210: LD_EXP 150
46214: EQUAL
46215: IFFALSE 46219
// break ;
46217: GO 46366
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
46219: LD_ADDR_EXP 152
46223: PUSH
46224: LD_EXP 152
46228: PPUSH
46229: LD_VAR 0 5
46233: PPUSH
46234: LD_EXP 152
46238: PUSH
46239: LD_VAR 0 5
46243: ARRAY
46244: PUSH
46245: LD_INT 1
46247: PLUS
46248: PPUSH
46249: CALL_OW 1
46253: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
46254: LD_ADDR_EXP 149
46258: PUSH
46259: LD_EXP 149
46263: PPUSH
46264: LD_VAR 0 5
46268: PUSH
46269: LD_EXP 149
46273: PUSH
46274: LD_VAR 0 5
46278: ARRAY
46279: PUSH
46280: LD_INT 1
46282: PLUS
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PPUSH
46288: LD_VAR 0 2
46292: PUSH
46293: LD_VAR 0 4
46297: ARRAY
46298: PUSH
46299: LD_VAR 0 2
46303: PUSH
46304: LD_VAR 0 4
46308: ARRAY
46309: PPUSH
46310: CALL_OW 255
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PPUSH
46319: CALL 53774 0 3
46323: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
46324: LD_VAR 0 2
46328: PUSH
46329: LD_VAR 0 4
46333: ARRAY
46334: PPUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: CALL_OW 255
46344: PPUSH
46345: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46349: LD_VAR 0 2
46353: PUSH
46354: LD_VAR 0 4
46358: ARRAY
46359: PPUSH
46360: CALL_OW 141
// end ;
46364: GO 46196
46366: POP
46367: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46368: LD_VAR 0 1
46372: PPUSH
46373: LD_EXP 149
46377: PUSH
46378: LD_VAR 0 5
46382: ARRAY
46383: PUSH
46384: LD_INT 0
46386: PLUS
46387: PPUSH
46388: CALL_OW 505
// end ;
46392: LD_VAR 0 3
46396: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46397: LD_INT 0
46399: PPUSH
46400: PPUSH
46401: PPUSH
46402: PPUSH
// if not hack in hackTanks then
46403: LD_VAR 0 1
46407: PUSH
46408: LD_EXP 148
46412: IN
46413: NOT
46414: IFFALSE 46418
// exit ;
46416: GO 46658
// index := GetElementIndex ( hackTanks , hack ) ;
46418: LD_ADDR_VAR 0 4
46422: PUSH
46423: LD_EXP 148
46427: PPUSH
46428: LD_VAR 0 1
46432: PPUSH
46433: CALL 53559 0 2
46437: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46438: LD_ADDR_VAR 0 3
46442: PUSH
46443: DOUBLE
46444: LD_EXP 149
46448: PUSH
46449: LD_VAR 0 4
46453: ARRAY
46454: INC
46455: ST_TO_ADDR
46456: LD_INT 1
46458: PUSH
46459: FOR_DOWNTO
46460: IFFALSE 46632
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46462: LD_ADDR_VAR 0 5
46466: PUSH
46467: LD_EXP 149
46471: PUSH
46472: LD_VAR 0 4
46476: ARRAY
46477: PUSH
46478: LD_VAR 0 3
46482: ARRAY
46483: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46484: LD_VAR 0 5
46488: PUSH
46489: LD_INT 1
46491: ARRAY
46492: PPUSH
46493: CALL_OW 302
46497: NOT
46498: PUSH
46499: LD_VAR 0 5
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PPUSH
46508: CALL_OW 255
46512: PUSH
46513: LD_VAR 0 1
46517: PPUSH
46518: CALL_OW 255
46522: NONEQUAL
46523: OR
46524: IFFALSE 46630
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46526: LD_VAR 0 5
46530: PUSH
46531: LD_INT 1
46533: ARRAY
46534: PPUSH
46535: CALL_OW 305
46539: PUSH
46540: LD_VAR 0 5
46544: PUSH
46545: LD_INT 1
46547: ARRAY
46548: PPUSH
46549: CALL_OW 255
46553: PUSH
46554: LD_VAR 0 1
46558: PPUSH
46559: CALL_OW 255
46563: EQUAL
46564: AND
46565: IFFALSE 46589
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46567: LD_VAR 0 5
46571: PUSH
46572: LD_INT 1
46574: ARRAY
46575: PPUSH
46576: LD_VAR 0 5
46580: PUSH
46581: LD_INT 2
46583: ARRAY
46584: PPUSH
46585: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46589: LD_ADDR_EXP 149
46593: PUSH
46594: LD_EXP 149
46598: PPUSH
46599: LD_VAR 0 4
46603: PPUSH
46604: LD_EXP 149
46608: PUSH
46609: LD_VAR 0 4
46613: ARRAY
46614: PPUSH
46615: LD_VAR 0 3
46619: PPUSH
46620: CALL_OW 3
46624: PPUSH
46625: CALL_OW 1
46629: ST_TO_ADDR
// end ; end ;
46630: GO 46459
46632: POP
46633: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46634: LD_VAR 0 1
46638: PPUSH
46639: LD_EXP 149
46643: PUSH
46644: LD_VAR 0 4
46648: ARRAY
46649: PUSH
46650: LD_INT 0
46652: PLUS
46653: PPUSH
46654: CALL_OW 505
// end ;
46658: LD_VAR 0 2
46662: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46663: LD_INT 0
46665: PPUSH
46666: PPUSH
46667: PPUSH
46668: PPUSH
// if not hack in hackTanks then
46669: LD_VAR 0 1
46673: PUSH
46674: LD_EXP 148
46678: IN
46679: NOT
46680: IFFALSE 46684
// exit ;
46682: GO 46769
// index := GetElementIndex ( hackTanks , hack ) ;
46684: LD_ADDR_VAR 0 5
46688: PUSH
46689: LD_EXP 148
46693: PPUSH
46694: LD_VAR 0 1
46698: PPUSH
46699: CALL 53559 0 2
46703: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46704: LD_ADDR_VAR 0 4
46708: PUSH
46709: DOUBLE
46710: LD_INT 1
46712: DEC
46713: ST_TO_ADDR
46714: LD_EXP 149
46718: PUSH
46719: LD_VAR 0 5
46723: ARRAY
46724: PUSH
46725: FOR_TO
46726: IFFALSE 46767
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46728: LD_EXP 149
46732: PUSH
46733: LD_VAR 0 5
46737: ARRAY
46738: PUSH
46739: LD_VAR 0 4
46743: ARRAY
46744: PUSH
46745: LD_INT 1
46747: ARRAY
46748: PUSH
46749: LD_VAR 0 2
46753: EQUAL
46754: IFFALSE 46765
// KillUnit ( vehicle ) ;
46756: LD_VAR 0 2
46760: PPUSH
46761: CALL_OW 66
46765: GO 46725
46767: POP
46768: POP
// end ;
46769: LD_VAR 0 3
46773: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46774: LD_EXP 153
46778: NOT
46779: IFFALSE 46814
46781: GO 46783
46783: DISABLE
// begin initMiner := true ;
46784: LD_ADDR_EXP 153
46788: PUSH
46789: LD_INT 1
46791: ST_TO_ADDR
// minersList := [ ] ;
46792: LD_ADDR_EXP 154
46796: PUSH
46797: EMPTY
46798: ST_TO_ADDR
// minerMinesList := [ ] ;
46799: LD_ADDR_EXP 155
46803: PUSH
46804: EMPTY
46805: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46806: LD_ADDR_EXP 156
46810: PUSH
46811: LD_INT 5
46813: ST_TO_ADDR
// end ;
46814: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46815: LD_EXP 153
46819: PUSH
46820: LD_INT 34
46822: PUSH
46823: LD_EXP 76
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PPUSH
46832: CALL_OW 69
46836: AND
46837: IFFALSE 47300
46839: GO 46841
46841: DISABLE
46842: LD_INT 0
46844: PPUSH
46845: PPUSH
46846: PPUSH
46847: PPUSH
// begin enable ;
46848: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46849: LD_ADDR_VAR 0 1
46853: PUSH
46854: LD_INT 34
46856: PUSH
46857: LD_EXP 76
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PPUSH
46866: CALL_OW 69
46870: PUSH
46871: FOR_IN
46872: IFFALSE 46944
// begin if not i in minersList then
46874: LD_VAR 0 1
46878: PUSH
46879: LD_EXP 154
46883: IN
46884: NOT
46885: IFFALSE 46942
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46887: LD_ADDR_EXP 154
46891: PUSH
46892: LD_EXP 154
46896: PPUSH
46897: LD_EXP 154
46901: PUSH
46902: LD_INT 1
46904: PLUS
46905: PPUSH
46906: LD_VAR 0 1
46910: PPUSH
46911: CALL_OW 1
46915: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46916: LD_ADDR_EXP 155
46920: PUSH
46921: LD_EXP 155
46925: PPUSH
46926: LD_EXP 155
46930: PUSH
46931: LD_INT 1
46933: PLUS
46934: PPUSH
46935: EMPTY
46936: PPUSH
46937: CALL_OW 1
46941: ST_TO_ADDR
// end end ;
46942: GO 46871
46944: POP
46945: POP
// for i := minerMinesList downto 1 do
46946: LD_ADDR_VAR 0 1
46950: PUSH
46951: DOUBLE
46952: LD_EXP 155
46956: INC
46957: ST_TO_ADDR
46958: LD_INT 1
46960: PUSH
46961: FOR_DOWNTO
46962: IFFALSE 47298
// begin if IsLive ( minersList [ i ] ) then
46964: LD_EXP 154
46968: PUSH
46969: LD_VAR 0 1
46973: ARRAY
46974: PPUSH
46975: CALL_OW 300
46979: IFFALSE 47007
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
46981: LD_EXP 154
46985: PUSH
46986: LD_VAR 0 1
46990: ARRAY
46991: PPUSH
46992: LD_EXP 155
46996: PUSH
46997: LD_VAR 0 1
47001: ARRAY
47002: PPUSH
47003: CALL_OW 505
// if not minerMinesList [ i ] then
47007: LD_EXP 155
47011: PUSH
47012: LD_VAR 0 1
47016: ARRAY
47017: NOT
47018: IFFALSE 47022
// continue ;
47020: GO 46961
// for j := minerMinesList [ i ] downto 1 do
47022: LD_ADDR_VAR 0 2
47026: PUSH
47027: DOUBLE
47028: LD_EXP 155
47032: PUSH
47033: LD_VAR 0 1
47037: ARRAY
47038: INC
47039: ST_TO_ADDR
47040: LD_INT 1
47042: PUSH
47043: FOR_DOWNTO
47044: IFFALSE 47294
// begin side := GetSide ( minersList [ i ] ) ;
47046: LD_ADDR_VAR 0 3
47050: PUSH
47051: LD_EXP 154
47055: PUSH
47056: LD_VAR 0 1
47060: ARRAY
47061: PPUSH
47062: CALL_OW 255
47066: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
47067: LD_ADDR_VAR 0 4
47071: PUSH
47072: LD_EXP 155
47076: PUSH
47077: LD_VAR 0 1
47081: ARRAY
47082: PUSH
47083: LD_VAR 0 2
47087: ARRAY
47088: PUSH
47089: LD_INT 1
47091: ARRAY
47092: PPUSH
47093: LD_EXP 155
47097: PUSH
47098: LD_VAR 0 1
47102: ARRAY
47103: PUSH
47104: LD_VAR 0 2
47108: ARRAY
47109: PUSH
47110: LD_INT 2
47112: ARRAY
47113: PPUSH
47114: CALL_OW 428
47118: ST_TO_ADDR
// if not tmp then
47119: LD_VAR 0 4
47123: NOT
47124: IFFALSE 47128
// continue ;
47126: GO 47043
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
47128: LD_VAR 0 4
47132: PUSH
47133: LD_INT 81
47135: PUSH
47136: LD_VAR 0 3
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PPUSH
47145: CALL_OW 69
47149: IN
47150: PUSH
47151: LD_EXP 155
47155: PUSH
47156: LD_VAR 0 1
47160: ARRAY
47161: PUSH
47162: LD_VAR 0 2
47166: ARRAY
47167: PUSH
47168: LD_INT 1
47170: ARRAY
47171: PPUSH
47172: LD_EXP 155
47176: PUSH
47177: LD_VAR 0 1
47181: ARRAY
47182: PUSH
47183: LD_VAR 0 2
47187: ARRAY
47188: PUSH
47189: LD_INT 2
47191: ARRAY
47192: PPUSH
47193: CALL_OW 458
47197: AND
47198: IFFALSE 47292
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
47200: LD_EXP 155
47204: PUSH
47205: LD_VAR 0 1
47209: ARRAY
47210: PUSH
47211: LD_VAR 0 2
47215: ARRAY
47216: PUSH
47217: LD_INT 1
47219: ARRAY
47220: PPUSH
47221: LD_EXP 155
47225: PUSH
47226: LD_VAR 0 1
47230: ARRAY
47231: PUSH
47232: LD_VAR 0 2
47236: ARRAY
47237: PUSH
47238: LD_INT 2
47240: ARRAY
47241: PPUSH
47242: LD_VAR 0 3
47246: PPUSH
47247: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
47251: LD_ADDR_EXP 155
47255: PUSH
47256: LD_EXP 155
47260: PPUSH
47261: LD_VAR 0 1
47265: PPUSH
47266: LD_EXP 155
47270: PUSH
47271: LD_VAR 0 1
47275: ARRAY
47276: PPUSH
47277: LD_VAR 0 2
47281: PPUSH
47282: CALL_OW 3
47286: PPUSH
47287: CALL_OW 1
47291: ST_TO_ADDR
// end ; end ;
47292: GO 47043
47294: POP
47295: POP
// end ;
47296: GO 46961
47298: POP
47299: POP
// end ;
47300: PPOPN 4
47302: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
47303: LD_INT 0
47305: PPUSH
47306: PPUSH
// result := false ;
47307: LD_ADDR_VAR 0 4
47311: PUSH
47312: LD_INT 0
47314: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
47315: LD_VAR 0 1
47319: PPUSH
47320: CALL_OW 264
47324: PUSH
47325: LD_EXP 76
47329: EQUAL
47330: NOT
47331: IFFALSE 47335
// exit ;
47333: GO 47575
// index := GetElementIndex ( minersList , unit ) ;
47335: LD_ADDR_VAR 0 5
47339: PUSH
47340: LD_EXP 154
47344: PPUSH
47345: LD_VAR 0 1
47349: PPUSH
47350: CALL 53559 0 2
47354: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47355: LD_EXP 155
47359: PUSH
47360: LD_VAR 0 5
47364: ARRAY
47365: PUSH
47366: LD_EXP 156
47370: GREATEREQUAL
47371: IFFALSE 47375
// exit ;
47373: GO 47575
// ComMoveXY ( unit , x , y ) ;
47375: LD_VAR 0 1
47379: PPUSH
47380: LD_VAR 0 2
47384: PPUSH
47385: LD_VAR 0 3
47389: PPUSH
47390: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47394: LD_INT 35
47396: PPUSH
47397: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47401: LD_VAR 0 1
47405: PPUSH
47406: LD_VAR 0 2
47410: PPUSH
47411: LD_VAR 0 3
47415: PPUSH
47416: CALL 84331 0 3
47420: NOT
47421: PUSH
47422: LD_VAR 0 1
47426: PPUSH
47427: CALL_OW 314
47431: AND
47432: IFFALSE 47436
// exit ;
47434: GO 47575
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47436: LD_VAR 0 2
47440: PPUSH
47441: LD_VAR 0 3
47445: PPUSH
47446: CALL_OW 428
47450: PUSH
47451: LD_VAR 0 1
47455: EQUAL
47456: PUSH
47457: LD_VAR 0 1
47461: PPUSH
47462: CALL_OW 314
47466: NOT
47467: AND
47468: IFFALSE 47394
// PlaySoundXY ( x , y , PlantMine ) ;
47470: LD_VAR 0 2
47474: PPUSH
47475: LD_VAR 0 3
47479: PPUSH
47480: LD_STRING PlantMine
47482: PPUSH
47483: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47487: LD_VAR 0 2
47491: PPUSH
47492: LD_VAR 0 3
47496: PPUSH
47497: LD_VAR 0 1
47501: PPUSH
47502: CALL_OW 255
47506: PPUSH
47507: LD_INT 0
47509: PPUSH
47510: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47514: LD_ADDR_EXP 155
47518: PUSH
47519: LD_EXP 155
47523: PPUSH
47524: LD_VAR 0 5
47528: PUSH
47529: LD_EXP 155
47533: PUSH
47534: LD_VAR 0 5
47538: ARRAY
47539: PUSH
47540: LD_INT 1
47542: PLUS
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PPUSH
47548: LD_VAR 0 2
47552: PUSH
47553: LD_VAR 0 3
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PPUSH
47562: CALL 53774 0 3
47566: ST_TO_ADDR
// result := true ;
47567: LD_ADDR_VAR 0 4
47571: PUSH
47572: LD_INT 1
47574: ST_TO_ADDR
// end ;
47575: LD_VAR 0 4
47579: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47580: LD_INT 0
47582: PPUSH
47583: PPUSH
47584: PPUSH
// if not unit in minersList then
47585: LD_VAR 0 1
47589: PUSH
47590: LD_EXP 154
47594: IN
47595: NOT
47596: IFFALSE 47600
// exit ;
47598: GO 47992
// index := GetElementIndex ( minersList , unit ) ;
47600: LD_ADDR_VAR 0 6
47604: PUSH
47605: LD_EXP 154
47609: PPUSH
47610: LD_VAR 0 1
47614: PPUSH
47615: CALL 53559 0 2
47619: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47620: LD_ADDR_VAR 0 5
47624: PUSH
47625: DOUBLE
47626: LD_EXP 155
47630: PUSH
47631: LD_VAR 0 6
47635: ARRAY
47636: INC
47637: ST_TO_ADDR
47638: LD_INT 1
47640: PUSH
47641: FOR_DOWNTO
47642: IFFALSE 47803
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47644: LD_EXP 155
47648: PUSH
47649: LD_VAR 0 6
47653: ARRAY
47654: PUSH
47655: LD_VAR 0 5
47659: ARRAY
47660: PUSH
47661: LD_INT 1
47663: ARRAY
47664: PUSH
47665: LD_VAR 0 2
47669: EQUAL
47670: PUSH
47671: LD_EXP 155
47675: PUSH
47676: LD_VAR 0 6
47680: ARRAY
47681: PUSH
47682: LD_VAR 0 5
47686: ARRAY
47687: PUSH
47688: LD_INT 2
47690: ARRAY
47691: PUSH
47692: LD_VAR 0 3
47696: EQUAL
47697: AND
47698: IFFALSE 47801
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47700: LD_EXP 155
47704: PUSH
47705: LD_VAR 0 6
47709: ARRAY
47710: PUSH
47711: LD_VAR 0 5
47715: ARRAY
47716: PUSH
47717: LD_INT 1
47719: ARRAY
47720: PPUSH
47721: LD_EXP 155
47725: PUSH
47726: LD_VAR 0 6
47730: ARRAY
47731: PUSH
47732: LD_VAR 0 5
47736: ARRAY
47737: PUSH
47738: LD_INT 2
47740: ARRAY
47741: PPUSH
47742: LD_VAR 0 1
47746: PPUSH
47747: CALL_OW 255
47751: PPUSH
47752: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47756: LD_ADDR_EXP 155
47760: PUSH
47761: LD_EXP 155
47765: PPUSH
47766: LD_VAR 0 6
47770: PPUSH
47771: LD_EXP 155
47775: PUSH
47776: LD_VAR 0 6
47780: ARRAY
47781: PPUSH
47782: LD_VAR 0 5
47786: PPUSH
47787: CALL_OW 3
47791: PPUSH
47792: CALL_OW 1
47796: ST_TO_ADDR
// exit ;
47797: POP
47798: POP
47799: GO 47992
// end ; end ;
47801: GO 47641
47803: POP
47804: POP
// for i := minerMinesList [ index ] downto 1 do
47805: LD_ADDR_VAR 0 5
47809: PUSH
47810: DOUBLE
47811: LD_EXP 155
47815: PUSH
47816: LD_VAR 0 6
47820: ARRAY
47821: INC
47822: ST_TO_ADDR
47823: LD_INT 1
47825: PUSH
47826: FOR_DOWNTO
47827: IFFALSE 47990
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47829: LD_EXP 155
47833: PUSH
47834: LD_VAR 0 6
47838: ARRAY
47839: PUSH
47840: LD_VAR 0 5
47844: ARRAY
47845: PUSH
47846: LD_INT 1
47848: ARRAY
47849: PPUSH
47850: LD_EXP 155
47854: PUSH
47855: LD_VAR 0 6
47859: ARRAY
47860: PUSH
47861: LD_VAR 0 5
47865: ARRAY
47866: PUSH
47867: LD_INT 2
47869: ARRAY
47870: PPUSH
47871: LD_VAR 0 2
47875: PPUSH
47876: LD_VAR 0 3
47880: PPUSH
47881: CALL_OW 298
47885: PUSH
47886: LD_INT 6
47888: LESS
47889: IFFALSE 47988
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47891: LD_EXP 155
47895: PUSH
47896: LD_VAR 0 6
47900: ARRAY
47901: PUSH
47902: LD_VAR 0 5
47906: ARRAY
47907: PUSH
47908: LD_INT 1
47910: ARRAY
47911: PPUSH
47912: LD_EXP 155
47916: PUSH
47917: LD_VAR 0 6
47921: ARRAY
47922: PUSH
47923: LD_VAR 0 5
47927: ARRAY
47928: PUSH
47929: LD_INT 2
47931: ARRAY
47932: PPUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: CALL_OW 255
47942: PPUSH
47943: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47947: LD_ADDR_EXP 155
47951: PUSH
47952: LD_EXP 155
47956: PPUSH
47957: LD_VAR 0 6
47961: PPUSH
47962: LD_EXP 155
47966: PUSH
47967: LD_VAR 0 6
47971: ARRAY
47972: PPUSH
47973: LD_VAR 0 5
47977: PPUSH
47978: CALL_OW 3
47982: PPUSH
47983: CALL_OW 1
47987: ST_TO_ADDR
// end ; end ;
47988: GO 47826
47990: POP
47991: POP
// end ;
47992: LD_VAR 0 4
47996: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
47997: LD_INT 0
47999: PPUSH
48000: PPUSH
48001: PPUSH
48002: PPUSH
48003: PPUSH
48004: PPUSH
48005: PPUSH
48006: PPUSH
48007: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
48008: LD_VAR 0 1
48012: PPUSH
48013: CALL_OW 264
48017: PUSH
48018: LD_EXP 76
48022: EQUAL
48023: NOT
48024: PUSH
48025: LD_VAR 0 1
48029: PUSH
48030: LD_EXP 154
48034: IN
48035: NOT
48036: OR
48037: IFFALSE 48041
// exit ;
48039: GO 48363
// index := GetElementIndex ( minersList , unit ) ;
48041: LD_ADDR_VAR 0 6
48045: PUSH
48046: LD_EXP 154
48050: PPUSH
48051: LD_VAR 0 1
48055: PPUSH
48056: CALL 53559 0 2
48060: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
48061: LD_ADDR_VAR 0 8
48065: PUSH
48066: LD_EXP 156
48070: PUSH
48071: LD_EXP 155
48075: PUSH
48076: LD_VAR 0 6
48080: ARRAY
48081: MINUS
48082: ST_TO_ADDR
// if not minesFreeAmount then
48083: LD_VAR 0 8
48087: NOT
48088: IFFALSE 48092
// exit ;
48090: GO 48363
// tmp := [ ] ;
48092: LD_ADDR_VAR 0 7
48096: PUSH
48097: EMPTY
48098: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
48099: LD_ADDR_VAR 0 5
48103: PUSH
48104: DOUBLE
48105: LD_INT 1
48107: DEC
48108: ST_TO_ADDR
48109: LD_VAR 0 8
48113: PUSH
48114: FOR_TO
48115: IFFALSE 48310
// begin _d := rand ( 0 , 5 ) ;
48117: LD_ADDR_VAR 0 11
48121: PUSH
48122: LD_INT 0
48124: PPUSH
48125: LD_INT 5
48127: PPUSH
48128: CALL_OW 12
48132: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
48133: LD_ADDR_VAR 0 12
48137: PUSH
48138: LD_INT 2
48140: PPUSH
48141: LD_INT 6
48143: PPUSH
48144: CALL_OW 12
48148: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
48149: LD_ADDR_VAR 0 9
48153: PUSH
48154: LD_VAR 0 2
48158: PPUSH
48159: LD_VAR 0 11
48163: PPUSH
48164: LD_VAR 0 12
48168: PPUSH
48169: CALL_OW 272
48173: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
48174: LD_ADDR_VAR 0 10
48178: PUSH
48179: LD_VAR 0 3
48183: PPUSH
48184: LD_VAR 0 11
48188: PPUSH
48189: LD_VAR 0 12
48193: PPUSH
48194: CALL_OW 273
48198: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
48199: LD_VAR 0 9
48203: PPUSH
48204: LD_VAR 0 10
48208: PPUSH
48209: CALL_OW 488
48213: PUSH
48214: LD_VAR 0 9
48218: PUSH
48219: LD_VAR 0 10
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_VAR 0 7
48232: IN
48233: NOT
48234: AND
48235: PUSH
48236: LD_VAR 0 9
48240: PPUSH
48241: LD_VAR 0 10
48245: PPUSH
48246: CALL_OW 458
48250: NOT
48251: AND
48252: IFFALSE 48294
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
48254: LD_ADDR_VAR 0 7
48258: PUSH
48259: LD_VAR 0 7
48263: PPUSH
48264: LD_VAR 0 7
48268: PUSH
48269: LD_INT 1
48271: PLUS
48272: PPUSH
48273: LD_VAR 0 9
48277: PUSH
48278: LD_VAR 0 10
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PPUSH
48287: CALL_OW 1
48291: ST_TO_ADDR
48292: GO 48308
// i := i - 1 ;
48294: LD_ADDR_VAR 0 5
48298: PUSH
48299: LD_VAR 0 5
48303: PUSH
48304: LD_INT 1
48306: MINUS
48307: ST_TO_ADDR
// end ;
48308: GO 48114
48310: POP
48311: POP
// for i in tmp do
48312: LD_ADDR_VAR 0 5
48316: PUSH
48317: LD_VAR 0 7
48321: PUSH
48322: FOR_IN
48323: IFFALSE 48361
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48325: LD_VAR 0 1
48329: PPUSH
48330: LD_VAR 0 5
48334: PUSH
48335: LD_INT 1
48337: ARRAY
48338: PPUSH
48339: LD_VAR 0 5
48343: PUSH
48344: LD_INT 2
48346: ARRAY
48347: PPUSH
48348: CALL 47303 0 3
48352: NOT
48353: IFFALSE 48359
// exit ;
48355: POP
48356: POP
48357: GO 48363
48359: GO 48322
48361: POP
48362: POP
// end ;
48363: LD_VAR 0 4
48367: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
48368: LD_INT 0
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
48375: PPUSH
48376: PPUSH
// if not GetClass ( unit ) = class_sniper then
48377: LD_VAR 0 1
48381: PPUSH
48382: CALL_OW 257
48386: PUSH
48387: LD_INT 5
48389: EQUAL
48390: NOT
48391: IFFALSE 48395
// exit ;
48393: GO 48783
// dist := 8 ;
48395: LD_ADDR_VAR 0 5
48399: PUSH
48400: LD_INT 8
48402: ST_TO_ADDR
// viewRange := 12 ;
48403: LD_ADDR_VAR 0 7
48407: PUSH
48408: LD_INT 12
48410: ST_TO_ADDR
// side := GetSide ( unit ) ;
48411: LD_ADDR_VAR 0 6
48415: PUSH
48416: LD_VAR 0 1
48420: PPUSH
48421: CALL_OW 255
48425: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48426: LD_INT 61
48428: PPUSH
48429: LD_VAR 0 6
48433: PPUSH
48434: CALL_OW 321
48438: PUSH
48439: LD_INT 2
48441: EQUAL
48442: IFFALSE 48452
// viewRange := 16 ;
48444: LD_ADDR_VAR 0 7
48448: PUSH
48449: LD_INT 16
48451: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48452: LD_VAR 0 1
48456: PPUSH
48457: LD_VAR 0 2
48461: PPUSH
48462: LD_VAR 0 3
48466: PPUSH
48467: CALL_OW 297
48471: PUSH
48472: LD_VAR 0 5
48476: GREATER
48477: IFFALSE 48556
// begin ComMoveXY ( unit , x , y ) ;
48479: LD_VAR 0 1
48483: PPUSH
48484: LD_VAR 0 2
48488: PPUSH
48489: LD_VAR 0 3
48493: PPUSH
48494: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48498: LD_INT 35
48500: PPUSH
48501: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48505: LD_VAR 0 1
48509: PPUSH
48510: LD_VAR 0 2
48514: PPUSH
48515: LD_VAR 0 3
48519: PPUSH
48520: CALL 84331 0 3
48524: NOT
48525: IFFALSE 48529
// exit ;
48527: GO 48783
// until GetDistUnitXY ( unit , x , y ) < dist ;
48529: LD_VAR 0 1
48533: PPUSH
48534: LD_VAR 0 2
48538: PPUSH
48539: LD_VAR 0 3
48543: PPUSH
48544: CALL_OW 297
48548: PUSH
48549: LD_VAR 0 5
48553: LESS
48554: IFFALSE 48498
// end ; ComTurnXY ( unit , x , y ) ;
48556: LD_VAR 0 1
48560: PPUSH
48561: LD_VAR 0 2
48565: PPUSH
48566: LD_VAR 0 3
48570: PPUSH
48571: CALL_OW 118
// wait ( 5 ) ;
48575: LD_INT 5
48577: PPUSH
48578: CALL_OW 67
// _d := GetDir ( unit ) ;
48582: LD_ADDR_VAR 0 10
48586: PUSH
48587: LD_VAR 0 1
48591: PPUSH
48592: CALL_OW 254
48596: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48597: LD_ADDR_VAR 0 8
48601: PUSH
48602: LD_VAR 0 1
48606: PPUSH
48607: CALL_OW 250
48611: PPUSH
48612: LD_VAR 0 10
48616: PPUSH
48617: LD_VAR 0 5
48621: PPUSH
48622: CALL_OW 272
48626: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48627: LD_ADDR_VAR 0 9
48631: PUSH
48632: LD_VAR 0 1
48636: PPUSH
48637: CALL_OW 251
48641: PPUSH
48642: LD_VAR 0 10
48646: PPUSH
48647: LD_VAR 0 5
48651: PPUSH
48652: CALL_OW 273
48656: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48657: LD_VAR 0 8
48661: PPUSH
48662: LD_VAR 0 9
48666: PPUSH
48667: CALL_OW 488
48671: NOT
48672: IFFALSE 48676
// exit ;
48674: GO 48783
// ComAnimCustom ( unit , 1 ) ;
48676: LD_VAR 0 1
48680: PPUSH
48681: LD_INT 1
48683: PPUSH
48684: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48688: LD_VAR 0 8
48692: PPUSH
48693: LD_VAR 0 9
48697: PPUSH
48698: LD_VAR 0 6
48702: PPUSH
48703: LD_VAR 0 7
48707: PPUSH
48708: CALL_OW 330
// repeat wait ( 1 ) ;
48712: LD_INT 1
48714: PPUSH
48715: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
48719: LD_VAR 0 1
48723: PPUSH
48724: CALL_OW 316
48728: PUSH
48729: LD_VAR 0 1
48733: PPUSH
48734: CALL_OW 314
48738: OR
48739: PUSH
48740: LD_VAR 0 1
48744: PPUSH
48745: CALL_OW 302
48749: NOT
48750: OR
48751: PUSH
48752: LD_VAR 0 1
48756: PPUSH
48757: CALL_OW 301
48761: OR
48762: IFFALSE 48712
// RemoveSeeing ( _x , _y , side ) ;
48764: LD_VAR 0 8
48768: PPUSH
48769: LD_VAR 0 9
48773: PPUSH
48774: LD_VAR 0 6
48778: PPUSH
48779: CALL_OW 331
// end ; end_of_file
48783: LD_VAR 0 4
48787: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
48788: LD_INT 0
48790: PPUSH
48791: PPUSH
// if exist_mode then
48792: LD_VAR 0 2
48796: IFFALSE 48821
// unit := CreateCharacter ( prefix & ident ) else
48798: LD_ADDR_VAR 0 5
48802: PUSH
48803: LD_VAR 0 3
48807: PUSH
48808: LD_VAR 0 1
48812: STR
48813: PPUSH
48814: CALL_OW 34
48818: ST_TO_ADDR
48819: GO 48836
// unit := NewCharacter ( ident ) ;
48821: LD_ADDR_VAR 0 5
48825: PUSH
48826: LD_VAR 0 1
48830: PPUSH
48831: CALL_OW 25
48835: ST_TO_ADDR
// result := unit ;
48836: LD_ADDR_VAR 0 4
48840: PUSH
48841: LD_VAR 0 5
48845: ST_TO_ADDR
// end ;
48846: LD_VAR 0 4
48850: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
48851: LD_INT 0
48853: PPUSH
48854: PPUSH
// if not side or not nation then
48855: LD_VAR 0 1
48859: NOT
48860: PUSH
48861: LD_VAR 0 2
48865: NOT
48866: OR
48867: IFFALSE 48871
// exit ;
48869: GO 49639
// case nation of nation_american :
48871: LD_VAR 0 2
48875: PUSH
48876: LD_INT 1
48878: DOUBLE
48879: EQUAL
48880: IFTRUE 48884
48882: GO 49098
48884: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
48885: LD_ADDR_VAR 0 4
48889: PUSH
48890: LD_INT 35
48892: PUSH
48893: LD_INT 45
48895: PUSH
48896: LD_INT 46
48898: PUSH
48899: LD_INT 47
48901: PUSH
48902: LD_INT 82
48904: PUSH
48905: LD_INT 83
48907: PUSH
48908: LD_INT 84
48910: PUSH
48911: LD_INT 85
48913: PUSH
48914: LD_INT 86
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: LD_INT 6
48925: PUSH
48926: LD_INT 15
48928: PUSH
48929: LD_INT 16
48931: PUSH
48932: LD_INT 7
48934: PUSH
48935: LD_INT 12
48937: PUSH
48938: LD_INT 13
48940: PUSH
48941: LD_INT 10
48943: PUSH
48944: LD_INT 14
48946: PUSH
48947: LD_INT 20
48949: PUSH
48950: LD_INT 21
48952: PUSH
48953: LD_INT 22
48955: PUSH
48956: LD_INT 25
48958: PUSH
48959: LD_INT 32
48961: PUSH
48962: LD_INT 27
48964: PUSH
48965: LD_INT 36
48967: PUSH
48968: LD_INT 69
48970: PUSH
48971: LD_INT 39
48973: PUSH
48974: LD_INT 34
48976: PUSH
48977: LD_INT 40
48979: PUSH
48980: LD_INT 48
48982: PUSH
48983: LD_INT 49
48985: PUSH
48986: LD_INT 50
48988: PUSH
48989: LD_INT 51
48991: PUSH
48992: LD_INT 52
48994: PUSH
48995: LD_INT 53
48997: PUSH
48998: LD_INT 54
49000: PUSH
49001: LD_INT 55
49003: PUSH
49004: LD_INT 56
49006: PUSH
49007: LD_INT 57
49009: PUSH
49010: LD_INT 58
49012: PUSH
49013: LD_INT 59
49015: PUSH
49016: LD_INT 60
49018: PUSH
49019: LD_INT 61
49021: PUSH
49022: LD_INT 62
49024: PUSH
49025: LD_INT 80
49027: PUSH
49028: LD_INT 82
49030: PUSH
49031: LD_INT 83
49033: PUSH
49034: LD_INT 84
49036: PUSH
49037: LD_INT 85
49039: PUSH
49040: LD_INT 86
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
49096: GO 49563
49098: LD_INT 2
49100: DOUBLE
49101: EQUAL
49102: IFTRUE 49106
49104: GO 49332
49106: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
49107: LD_ADDR_VAR 0 4
49111: PUSH
49112: LD_INT 35
49114: PUSH
49115: LD_INT 45
49117: PUSH
49118: LD_INT 46
49120: PUSH
49121: LD_INT 47
49123: PUSH
49124: LD_INT 82
49126: PUSH
49127: LD_INT 83
49129: PUSH
49130: LD_INT 84
49132: PUSH
49133: LD_INT 85
49135: PUSH
49136: LD_INT 87
49138: PUSH
49139: LD_INT 70
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 11
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: LD_INT 4
49153: PUSH
49154: LD_INT 5
49156: PUSH
49157: LD_INT 6
49159: PUSH
49160: LD_INT 15
49162: PUSH
49163: LD_INT 18
49165: PUSH
49166: LD_INT 7
49168: PUSH
49169: LD_INT 17
49171: PUSH
49172: LD_INT 8
49174: PUSH
49175: LD_INT 20
49177: PUSH
49178: LD_INT 21
49180: PUSH
49181: LD_INT 22
49183: PUSH
49184: LD_INT 72
49186: PUSH
49187: LD_INT 26
49189: PUSH
49190: LD_INT 69
49192: PUSH
49193: LD_INT 39
49195: PUSH
49196: LD_INT 40
49198: PUSH
49199: LD_INT 41
49201: PUSH
49202: LD_INT 42
49204: PUSH
49205: LD_INT 43
49207: PUSH
49208: LD_INT 48
49210: PUSH
49211: LD_INT 49
49213: PUSH
49214: LD_INT 50
49216: PUSH
49217: LD_INT 51
49219: PUSH
49220: LD_INT 52
49222: PUSH
49223: LD_INT 53
49225: PUSH
49226: LD_INT 54
49228: PUSH
49229: LD_INT 55
49231: PUSH
49232: LD_INT 56
49234: PUSH
49235: LD_INT 60
49237: PUSH
49238: LD_INT 61
49240: PUSH
49241: LD_INT 62
49243: PUSH
49244: LD_INT 66
49246: PUSH
49247: LD_INT 67
49249: PUSH
49250: LD_INT 68
49252: PUSH
49253: LD_INT 81
49255: PUSH
49256: LD_INT 82
49258: PUSH
49259: LD_INT 83
49261: PUSH
49262: LD_INT 84
49264: PUSH
49265: LD_INT 85
49267: PUSH
49268: LD_INT 87
49270: PUSH
49271: LD_INT 88
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: ST_TO_ADDR
49330: GO 49563
49332: LD_INT 3
49334: DOUBLE
49335: EQUAL
49336: IFTRUE 49340
49338: GO 49562
49340: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
49341: LD_ADDR_VAR 0 4
49345: PUSH
49346: LD_INT 46
49348: PUSH
49349: LD_INT 47
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 82
49360: PUSH
49361: LD_INT 83
49363: PUSH
49364: LD_INT 84
49366: PUSH
49367: LD_INT 85
49369: PUSH
49370: LD_INT 86
49372: PUSH
49373: LD_INT 11
49375: PUSH
49376: LD_INT 9
49378: PUSH
49379: LD_INT 20
49381: PUSH
49382: LD_INT 19
49384: PUSH
49385: LD_INT 21
49387: PUSH
49388: LD_INT 24
49390: PUSH
49391: LD_INT 22
49393: PUSH
49394: LD_INT 25
49396: PUSH
49397: LD_INT 28
49399: PUSH
49400: LD_INT 29
49402: PUSH
49403: LD_INT 30
49405: PUSH
49406: LD_INT 31
49408: PUSH
49409: LD_INT 37
49411: PUSH
49412: LD_INT 38
49414: PUSH
49415: LD_INT 32
49417: PUSH
49418: LD_INT 27
49420: PUSH
49421: LD_INT 33
49423: PUSH
49424: LD_INT 69
49426: PUSH
49427: LD_INT 39
49429: PUSH
49430: LD_INT 34
49432: PUSH
49433: LD_INT 40
49435: PUSH
49436: LD_INT 71
49438: PUSH
49439: LD_INT 23
49441: PUSH
49442: LD_INT 44
49444: PUSH
49445: LD_INT 48
49447: PUSH
49448: LD_INT 49
49450: PUSH
49451: LD_INT 50
49453: PUSH
49454: LD_INT 51
49456: PUSH
49457: LD_INT 52
49459: PUSH
49460: LD_INT 53
49462: PUSH
49463: LD_INT 54
49465: PUSH
49466: LD_INT 55
49468: PUSH
49469: LD_INT 56
49471: PUSH
49472: LD_INT 57
49474: PUSH
49475: LD_INT 58
49477: PUSH
49478: LD_INT 59
49480: PUSH
49481: LD_INT 63
49483: PUSH
49484: LD_INT 64
49486: PUSH
49487: LD_INT 65
49489: PUSH
49490: LD_INT 82
49492: PUSH
49493: LD_INT 83
49495: PUSH
49496: LD_INT 84
49498: PUSH
49499: LD_INT 85
49501: PUSH
49502: LD_INT 86
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
49560: GO 49563
49562: POP
// if state > - 1 and state < 3 then
49563: LD_VAR 0 3
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: GREATER
49572: PUSH
49573: LD_VAR 0 3
49577: PUSH
49578: LD_INT 3
49580: LESS
49581: AND
49582: IFFALSE 49639
// for i in result do
49584: LD_ADDR_VAR 0 5
49588: PUSH
49589: LD_VAR 0 4
49593: PUSH
49594: FOR_IN
49595: IFFALSE 49637
// if GetTech ( i , side ) <> state then
49597: LD_VAR 0 5
49601: PPUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 321
49611: PUSH
49612: LD_VAR 0 3
49616: NONEQUAL
49617: IFFALSE 49635
// result := result diff i ;
49619: LD_ADDR_VAR 0 4
49623: PUSH
49624: LD_VAR 0 4
49628: PUSH
49629: LD_VAR 0 5
49633: DIFF
49634: ST_TO_ADDR
49635: GO 49594
49637: POP
49638: POP
// end ;
49639: LD_VAR 0 4
49643: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
49644: LD_INT 0
49646: PPUSH
49647: PPUSH
49648: PPUSH
// result := true ;
49649: LD_ADDR_VAR 0 3
49653: PUSH
49654: LD_INT 1
49656: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
49657: LD_ADDR_VAR 0 5
49661: PUSH
49662: LD_VAR 0 2
49666: PPUSH
49667: CALL_OW 480
49671: ST_TO_ADDR
// if not tmp then
49672: LD_VAR 0 5
49676: NOT
49677: IFFALSE 49681
// exit ;
49679: GO 49730
// for i in tmp do
49681: LD_ADDR_VAR 0 4
49685: PUSH
49686: LD_VAR 0 5
49690: PUSH
49691: FOR_IN
49692: IFFALSE 49728
// if GetTech ( i , side ) <> state_researched then
49694: LD_VAR 0 4
49698: PPUSH
49699: LD_VAR 0 1
49703: PPUSH
49704: CALL_OW 321
49708: PUSH
49709: LD_INT 2
49711: NONEQUAL
49712: IFFALSE 49726
// begin result := false ;
49714: LD_ADDR_VAR 0 3
49718: PUSH
49719: LD_INT 0
49721: ST_TO_ADDR
// exit ;
49722: POP
49723: POP
49724: GO 49730
// end ;
49726: GO 49691
49728: POP
49729: POP
// end ;
49730: LD_VAR 0 3
49734: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
49735: LD_INT 0
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
49742: PPUSH
49743: PPUSH
49744: PPUSH
49745: PPUSH
49746: PPUSH
49747: PPUSH
49748: PPUSH
49749: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
49750: LD_VAR 0 1
49754: NOT
49755: PUSH
49756: LD_VAR 0 1
49760: PPUSH
49761: CALL_OW 257
49765: PUSH
49766: LD_INT 9
49768: NONEQUAL
49769: OR
49770: IFFALSE 49774
// exit ;
49772: GO 50347
// side := GetSide ( unit ) ;
49774: LD_ADDR_VAR 0 9
49778: PUSH
49779: LD_VAR 0 1
49783: PPUSH
49784: CALL_OW 255
49788: ST_TO_ADDR
// tech_space := tech_spacanom ;
49789: LD_ADDR_VAR 0 12
49793: PUSH
49794: LD_INT 29
49796: ST_TO_ADDR
// tech_time := tech_taurad ;
49797: LD_ADDR_VAR 0 13
49801: PUSH
49802: LD_INT 28
49804: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
49805: LD_ADDR_VAR 0 11
49809: PUSH
49810: LD_VAR 0 1
49814: PPUSH
49815: CALL_OW 310
49819: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
49820: LD_VAR 0 11
49824: PPUSH
49825: CALL_OW 247
49829: PUSH
49830: LD_INT 2
49832: EQUAL
49833: IFFALSE 49837
// exit ;
49835: GO 50347
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49837: LD_ADDR_VAR 0 8
49841: PUSH
49842: LD_INT 81
49844: PUSH
49845: LD_VAR 0 9
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: LD_INT 21
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PPUSH
49875: CALL_OW 69
49879: ST_TO_ADDR
// if not tmp then
49880: LD_VAR 0 8
49884: NOT
49885: IFFALSE 49889
// exit ;
49887: GO 50347
// if in_unit then
49889: LD_VAR 0 11
49893: IFFALSE 49917
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
49895: LD_ADDR_VAR 0 10
49899: PUSH
49900: LD_VAR 0 8
49904: PPUSH
49905: LD_VAR 0 11
49909: PPUSH
49910: CALL_OW 74
49914: ST_TO_ADDR
49915: GO 49937
// enemy := NearestUnitToUnit ( tmp , unit ) ;
49917: LD_ADDR_VAR 0 10
49921: PUSH
49922: LD_VAR 0 8
49926: PPUSH
49927: LD_VAR 0 1
49931: PPUSH
49932: CALL_OW 74
49936: ST_TO_ADDR
// if not enemy then
49937: LD_VAR 0 10
49941: NOT
49942: IFFALSE 49946
// exit ;
49944: GO 50347
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
49946: LD_VAR 0 11
49950: PUSH
49951: LD_VAR 0 11
49955: PPUSH
49956: LD_VAR 0 10
49960: PPUSH
49961: CALL_OW 296
49965: PUSH
49966: LD_INT 13
49968: GREATER
49969: AND
49970: PUSH
49971: LD_VAR 0 1
49975: PPUSH
49976: LD_VAR 0 10
49980: PPUSH
49981: CALL_OW 296
49985: PUSH
49986: LD_INT 12
49988: GREATER
49989: OR
49990: IFFALSE 49994
// exit ;
49992: GO 50347
// missile := [ 1 ] ;
49994: LD_ADDR_VAR 0 14
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: ST_TO_ADDR
// if Researched ( side , tech_space ) then
50005: LD_VAR 0 9
50009: PPUSH
50010: LD_VAR 0 12
50014: PPUSH
50015: CALL_OW 325
50019: IFFALSE 50048
// missile := Insert ( missile , missile + 1 , 2 ) ;
50021: LD_ADDR_VAR 0 14
50025: PUSH
50026: LD_VAR 0 14
50030: PPUSH
50031: LD_VAR 0 14
50035: PUSH
50036: LD_INT 1
50038: PLUS
50039: PPUSH
50040: LD_INT 2
50042: PPUSH
50043: CALL_OW 2
50047: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
50048: LD_VAR 0 9
50052: PPUSH
50053: LD_VAR 0 13
50057: PPUSH
50058: CALL_OW 325
50062: PUSH
50063: LD_VAR 0 10
50067: PPUSH
50068: CALL_OW 255
50072: PPUSH
50073: LD_VAR 0 13
50077: PPUSH
50078: CALL_OW 325
50082: NOT
50083: AND
50084: IFFALSE 50113
// missile := Insert ( missile , missile + 1 , 3 ) ;
50086: LD_ADDR_VAR 0 14
50090: PUSH
50091: LD_VAR 0 14
50095: PPUSH
50096: LD_VAR 0 14
50100: PUSH
50101: LD_INT 1
50103: PLUS
50104: PPUSH
50105: LD_INT 3
50107: PPUSH
50108: CALL_OW 2
50112: ST_TO_ADDR
// if missile < 2 then
50113: LD_VAR 0 14
50117: PUSH
50118: LD_INT 2
50120: LESS
50121: IFFALSE 50125
// exit ;
50123: GO 50347
// x := GetX ( enemy ) ;
50125: LD_ADDR_VAR 0 4
50129: PUSH
50130: LD_VAR 0 10
50134: PPUSH
50135: CALL_OW 250
50139: ST_TO_ADDR
// y := GetY ( enemy ) ;
50140: LD_ADDR_VAR 0 5
50144: PUSH
50145: LD_VAR 0 10
50149: PPUSH
50150: CALL_OW 251
50154: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
50155: LD_ADDR_VAR 0 6
50159: PUSH
50160: LD_VAR 0 4
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PPUSH
50169: LD_INT 1
50171: PPUSH
50172: CALL_OW 12
50176: PLUS
50177: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
50178: LD_ADDR_VAR 0 7
50182: PUSH
50183: LD_VAR 0 5
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PPUSH
50192: LD_INT 1
50194: PPUSH
50195: CALL_OW 12
50199: PLUS
50200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50201: LD_VAR 0 6
50205: PPUSH
50206: LD_VAR 0 7
50210: PPUSH
50211: CALL_OW 488
50215: NOT
50216: IFFALSE 50238
// begin _x := x ;
50218: LD_ADDR_VAR 0 6
50222: PUSH
50223: LD_VAR 0 4
50227: ST_TO_ADDR
// _y := y ;
50228: LD_ADDR_VAR 0 7
50232: PUSH
50233: LD_VAR 0 5
50237: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
50238: LD_ADDR_VAR 0 3
50242: PUSH
50243: LD_INT 1
50245: PPUSH
50246: LD_VAR 0 14
50250: PPUSH
50251: CALL_OW 12
50255: ST_TO_ADDR
// case i of 1 :
50256: LD_VAR 0 3
50260: PUSH
50261: LD_INT 1
50263: DOUBLE
50264: EQUAL
50265: IFTRUE 50269
50267: GO 50286
50269: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
50270: LD_VAR 0 1
50274: PPUSH
50275: LD_VAR 0 10
50279: PPUSH
50280: CALL_OW 115
50284: GO 50347
50286: LD_INT 2
50288: DOUBLE
50289: EQUAL
50290: IFTRUE 50294
50292: GO 50316
50294: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
50295: LD_VAR 0 1
50299: PPUSH
50300: LD_VAR 0 6
50304: PPUSH
50305: LD_VAR 0 7
50309: PPUSH
50310: CALL_OW 153
50314: GO 50347
50316: LD_INT 3
50318: DOUBLE
50319: EQUAL
50320: IFTRUE 50324
50322: GO 50346
50324: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
50325: LD_VAR 0 1
50329: PPUSH
50330: LD_VAR 0 6
50334: PPUSH
50335: LD_VAR 0 7
50339: PPUSH
50340: CALL_OW 154
50344: GO 50347
50346: POP
// end ;
50347: LD_VAR 0 2
50351: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
50352: LD_INT 0
50354: PPUSH
50355: PPUSH
50356: PPUSH
50357: PPUSH
50358: PPUSH
50359: PPUSH
// if not unit or not building then
50360: LD_VAR 0 1
50364: NOT
50365: PUSH
50366: LD_VAR 0 2
50370: NOT
50371: OR
50372: IFFALSE 50376
// exit ;
50374: GO 50534
// x := GetX ( building ) ;
50376: LD_ADDR_VAR 0 5
50380: PUSH
50381: LD_VAR 0 2
50385: PPUSH
50386: CALL_OW 250
50390: ST_TO_ADDR
// y := GetY ( building ) ;
50391: LD_ADDR_VAR 0 6
50395: PUSH
50396: LD_VAR 0 2
50400: PPUSH
50401: CALL_OW 251
50405: ST_TO_ADDR
// for i = 0 to 5 do
50406: LD_ADDR_VAR 0 4
50410: PUSH
50411: DOUBLE
50412: LD_INT 0
50414: DEC
50415: ST_TO_ADDR
50416: LD_INT 5
50418: PUSH
50419: FOR_TO
50420: IFFALSE 50532
// begin _x := ShiftX ( x , i , 3 ) ;
50422: LD_ADDR_VAR 0 7
50426: PUSH
50427: LD_VAR 0 5
50431: PPUSH
50432: LD_VAR 0 4
50436: PPUSH
50437: LD_INT 3
50439: PPUSH
50440: CALL_OW 272
50444: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
50445: LD_ADDR_VAR 0 8
50449: PUSH
50450: LD_VAR 0 6
50454: PPUSH
50455: LD_VAR 0 4
50459: PPUSH
50460: LD_INT 3
50462: PPUSH
50463: CALL_OW 273
50467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50468: LD_VAR 0 7
50472: PPUSH
50473: LD_VAR 0 8
50477: PPUSH
50478: CALL_OW 488
50482: NOT
50483: IFFALSE 50487
// continue ;
50485: GO 50419
// if HexInfo ( _x , _y ) = 0 then
50487: LD_VAR 0 7
50491: PPUSH
50492: LD_VAR 0 8
50496: PPUSH
50497: CALL_OW 428
50501: PUSH
50502: LD_INT 0
50504: EQUAL
50505: IFFALSE 50530
// begin ComMoveXY ( unit , _x , _y ) ;
50507: LD_VAR 0 1
50511: PPUSH
50512: LD_VAR 0 7
50516: PPUSH
50517: LD_VAR 0 8
50521: PPUSH
50522: CALL_OW 111
// exit ;
50526: POP
50527: POP
50528: GO 50534
// end ; end ;
50530: GO 50419
50532: POP
50533: POP
// end ;
50534: LD_VAR 0 3
50538: RET
// export function ScanBase ( side , base_area ) ; begin
50539: LD_INT 0
50541: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
50542: LD_ADDR_VAR 0 3
50546: PUSH
50547: LD_VAR 0 2
50551: PPUSH
50552: LD_INT 81
50554: PUSH
50555: LD_VAR 0 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PPUSH
50564: CALL_OW 70
50568: ST_TO_ADDR
// end ;
50569: LD_VAR 0 3
50573: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
50574: LD_INT 0
50576: PPUSH
50577: PPUSH
50578: PPUSH
50579: PPUSH
// result := false ;
50580: LD_ADDR_VAR 0 2
50584: PUSH
50585: LD_INT 0
50587: ST_TO_ADDR
// side := GetSide ( unit ) ;
50588: LD_ADDR_VAR 0 3
50592: PUSH
50593: LD_VAR 0 1
50597: PPUSH
50598: CALL_OW 255
50602: ST_TO_ADDR
// nat := GetNation ( unit ) ;
50603: LD_ADDR_VAR 0 4
50607: PUSH
50608: LD_VAR 0 1
50612: PPUSH
50613: CALL_OW 248
50617: ST_TO_ADDR
// case nat of 1 :
50618: LD_VAR 0 4
50622: PUSH
50623: LD_INT 1
50625: DOUBLE
50626: EQUAL
50627: IFTRUE 50631
50629: GO 50642
50631: POP
// tech := tech_lassight ; 2 :
50632: LD_ADDR_VAR 0 5
50636: PUSH
50637: LD_INT 12
50639: ST_TO_ADDR
50640: GO 50681
50642: LD_INT 2
50644: DOUBLE
50645: EQUAL
50646: IFTRUE 50650
50648: GO 50661
50650: POP
// tech := tech_mortar ; 3 :
50651: LD_ADDR_VAR 0 5
50655: PUSH
50656: LD_INT 41
50658: ST_TO_ADDR
50659: GO 50681
50661: LD_INT 3
50663: DOUBLE
50664: EQUAL
50665: IFTRUE 50669
50667: GO 50680
50669: POP
// tech := tech_bazooka ; end ;
50670: LD_ADDR_VAR 0 5
50674: PUSH
50675: LD_INT 44
50677: ST_TO_ADDR
50678: GO 50681
50680: POP
// if Researched ( side , tech ) then
50681: LD_VAR 0 3
50685: PPUSH
50686: LD_VAR 0 5
50690: PPUSH
50691: CALL_OW 325
50695: IFFALSE 50722
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
50697: LD_ADDR_VAR 0 2
50701: PUSH
50702: LD_INT 5
50704: PUSH
50705: LD_INT 8
50707: PUSH
50708: LD_INT 9
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: LIST
50715: PUSH
50716: LD_VAR 0 4
50720: ARRAY
50721: ST_TO_ADDR
// end ;
50722: LD_VAR 0 2
50726: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
50727: LD_INT 0
50729: PPUSH
50730: PPUSH
50731: PPUSH
// if not mines then
50732: LD_VAR 0 2
50736: NOT
50737: IFFALSE 50741
// exit ;
50739: GO 50885
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50741: LD_ADDR_VAR 0 5
50745: PUSH
50746: LD_INT 81
50748: PUSH
50749: LD_VAR 0 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: LD_INT 21
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PPUSH
50779: CALL_OW 69
50783: ST_TO_ADDR
// for i in mines do
50784: LD_ADDR_VAR 0 4
50788: PUSH
50789: LD_VAR 0 2
50793: PUSH
50794: FOR_IN
50795: IFFALSE 50883
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
50797: LD_VAR 0 4
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: PPUSH
50806: LD_VAR 0 4
50810: PUSH
50811: LD_INT 2
50813: ARRAY
50814: PPUSH
50815: CALL_OW 458
50819: NOT
50820: IFFALSE 50824
// continue ;
50822: GO 50794
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
50824: LD_VAR 0 4
50828: PUSH
50829: LD_INT 1
50831: ARRAY
50832: PPUSH
50833: LD_VAR 0 4
50837: PUSH
50838: LD_INT 2
50840: ARRAY
50841: PPUSH
50842: CALL_OW 428
50846: PUSH
50847: LD_VAR 0 5
50851: IN
50852: IFFALSE 50881
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
50854: LD_VAR 0 4
50858: PUSH
50859: LD_INT 1
50861: ARRAY
50862: PPUSH
50863: LD_VAR 0 4
50867: PUSH
50868: LD_INT 2
50870: ARRAY
50871: PPUSH
50872: LD_VAR 0 1
50876: PPUSH
50877: CALL_OW 456
// end ;
50881: GO 50794
50883: POP
50884: POP
// end ;
50885: LD_VAR 0 3
50889: RET
// export function Count ( array ) ; var i ; begin
50890: LD_INT 0
50892: PPUSH
50893: PPUSH
// result := 0 ;
50894: LD_ADDR_VAR 0 2
50898: PUSH
50899: LD_INT 0
50901: ST_TO_ADDR
// for i in array do
50902: LD_ADDR_VAR 0 3
50906: PUSH
50907: LD_VAR 0 1
50911: PUSH
50912: FOR_IN
50913: IFFALSE 50937
// if i then
50915: LD_VAR 0 3
50919: IFFALSE 50935
// result := result + 1 ;
50921: LD_ADDR_VAR 0 2
50925: PUSH
50926: LD_VAR 0 2
50930: PUSH
50931: LD_INT 1
50933: PLUS
50934: ST_TO_ADDR
50935: GO 50912
50937: POP
50938: POP
// end ;
50939: LD_VAR 0 2
50943: RET
// export function IsEmpty ( building ) ; begin
50944: LD_INT 0
50946: PPUSH
// if not building then
50947: LD_VAR 0 1
50951: NOT
50952: IFFALSE 50956
// exit ;
50954: GO 50999
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
50956: LD_ADDR_VAR 0 2
50960: PUSH
50961: LD_VAR 0 1
50965: PUSH
50966: LD_INT 22
50968: PUSH
50969: LD_VAR 0 1
50973: PPUSH
50974: CALL_OW 255
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 58
50985: PUSH
50986: EMPTY
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PPUSH
50993: CALL_OW 69
50997: IN
50998: ST_TO_ADDR
// end ;
50999: LD_VAR 0 2
51003: RET
// export function IsNotFull ( building ) ; begin
51004: LD_INT 0
51006: PPUSH
// if not building then
51007: LD_VAR 0 1
51011: NOT
51012: IFFALSE 51016
// exit ;
51014: GO 51035
// result := UnitsInside ( building ) < 6 ;
51016: LD_ADDR_VAR 0 2
51020: PUSH
51021: LD_VAR 0 1
51025: PPUSH
51026: CALL_OW 313
51030: PUSH
51031: LD_INT 6
51033: LESS
51034: ST_TO_ADDR
// end ;
51035: LD_VAR 0 2
51039: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
51040: LD_INT 0
51042: PPUSH
51043: PPUSH
51044: PPUSH
51045: PPUSH
// tmp := [ ] ;
51046: LD_ADDR_VAR 0 3
51050: PUSH
51051: EMPTY
51052: ST_TO_ADDR
// list := [ ] ;
51053: LD_ADDR_VAR 0 5
51057: PUSH
51058: EMPTY
51059: ST_TO_ADDR
// for i = 16 to 25 do
51060: LD_ADDR_VAR 0 4
51064: PUSH
51065: DOUBLE
51066: LD_INT 16
51068: DEC
51069: ST_TO_ADDR
51070: LD_INT 25
51072: PUSH
51073: FOR_TO
51074: IFFALSE 51147
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
51076: LD_ADDR_VAR 0 3
51080: PUSH
51081: LD_VAR 0 3
51085: PUSH
51086: LD_INT 22
51088: PUSH
51089: LD_VAR 0 1
51093: PPUSH
51094: CALL_OW 255
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 91
51105: PUSH
51106: LD_VAR 0 1
51110: PUSH
51111: LD_INT 6
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 30
51121: PUSH
51122: LD_VAR 0 4
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: PPUSH
51139: CALL_OW 69
51143: ADD
51144: ST_TO_ADDR
51145: GO 51073
51147: POP
51148: POP
// for i = 1 to tmp do
51149: LD_ADDR_VAR 0 4
51153: PUSH
51154: DOUBLE
51155: LD_INT 1
51157: DEC
51158: ST_TO_ADDR
51159: LD_VAR 0 3
51163: PUSH
51164: FOR_TO
51165: IFFALSE 51253
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
51167: LD_ADDR_VAR 0 5
51171: PUSH
51172: LD_VAR 0 5
51176: PUSH
51177: LD_VAR 0 3
51181: PUSH
51182: LD_VAR 0 4
51186: ARRAY
51187: PPUSH
51188: CALL_OW 266
51192: PUSH
51193: LD_VAR 0 3
51197: PUSH
51198: LD_VAR 0 4
51202: ARRAY
51203: PPUSH
51204: CALL_OW 250
51208: PUSH
51209: LD_VAR 0 3
51213: PUSH
51214: LD_VAR 0 4
51218: ARRAY
51219: PPUSH
51220: CALL_OW 251
51224: PUSH
51225: LD_VAR 0 3
51229: PUSH
51230: LD_VAR 0 4
51234: ARRAY
51235: PPUSH
51236: CALL_OW 254
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: ADD
51250: ST_TO_ADDR
51251: GO 51164
51253: POP
51254: POP
// result := list ;
51255: LD_ADDR_VAR 0 2
51259: PUSH
51260: LD_VAR 0 5
51264: ST_TO_ADDR
// end ;
51265: LD_VAR 0 2
51269: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
51270: LD_INT 0
51272: PPUSH
51273: PPUSH
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
51278: PPUSH
// if not factory then
51279: LD_VAR 0 1
51283: NOT
51284: IFFALSE 51288
// exit ;
51286: GO 51881
// if control = control_apeman then
51288: LD_VAR 0 4
51292: PUSH
51293: LD_INT 5
51295: EQUAL
51296: IFFALSE 51405
// begin tmp := UnitsInside ( factory ) ;
51298: LD_ADDR_VAR 0 8
51302: PUSH
51303: LD_VAR 0 1
51307: PPUSH
51308: CALL_OW 313
51312: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
51313: LD_VAR 0 8
51317: PPUSH
51318: LD_INT 25
51320: PUSH
51321: LD_INT 12
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PPUSH
51328: CALL_OW 72
51332: NOT
51333: IFFALSE 51343
// control := control_manual ;
51335: LD_ADDR_VAR 0 4
51339: PUSH
51340: LD_INT 1
51342: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
51343: LD_ADDR_VAR 0 8
51347: PUSH
51348: LD_VAR 0 1
51352: PPUSH
51353: CALL 51040 0 1
51357: ST_TO_ADDR
// if tmp then
51358: LD_VAR 0 8
51362: IFFALSE 51405
// begin for i in tmp do
51364: LD_ADDR_VAR 0 7
51368: PUSH
51369: LD_VAR 0 8
51373: PUSH
51374: FOR_IN
51375: IFFALSE 51403
// if i [ 1 ] = b_ext_radio then
51377: LD_VAR 0 7
51381: PUSH
51382: LD_INT 1
51384: ARRAY
51385: PUSH
51386: LD_INT 22
51388: EQUAL
51389: IFFALSE 51401
// begin control := control_remote ;
51391: LD_ADDR_VAR 0 4
51395: PUSH
51396: LD_INT 2
51398: ST_TO_ADDR
// break ;
51399: GO 51403
// end ;
51401: GO 51374
51403: POP
51404: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51405: LD_VAR 0 1
51409: PPUSH
51410: LD_VAR 0 2
51414: PPUSH
51415: LD_VAR 0 3
51419: PPUSH
51420: LD_VAR 0 4
51424: PPUSH
51425: LD_VAR 0 5
51429: PPUSH
51430: CALL_OW 448
51434: IFFALSE 51469
// begin result := [ chassis , engine , control , weapon ] ;
51436: LD_ADDR_VAR 0 6
51440: PUSH
51441: LD_VAR 0 2
51445: PUSH
51446: LD_VAR 0 3
51450: PUSH
51451: LD_VAR 0 4
51455: PUSH
51456: LD_VAR 0 5
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// exit ;
51467: GO 51881
// end ; _chassis := AvailableChassisList ( factory ) ;
51469: LD_ADDR_VAR 0 9
51473: PUSH
51474: LD_VAR 0 1
51478: PPUSH
51479: CALL_OW 475
51483: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
51484: LD_ADDR_VAR 0 11
51488: PUSH
51489: LD_VAR 0 1
51493: PPUSH
51494: CALL_OW 476
51498: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
51499: LD_ADDR_VAR 0 12
51503: PUSH
51504: LD_VAR 0 1
51508: PPUSH
51509: CALL_OW 477
51513: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
51514: LD_ADDR_VAR 0 10
51518: PUSH
51519: LD_VAR 0 1
51523: PPUSH
51524: CALL_OW 478
51528: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
51529: LD_VAR 0 9
51533: NOT
51534: PUSH
51535: LD_VAR 0 11
51539: NOT
51540: OR
51541: PUSH
51542: LD_VAR 0 12
51546: NOT
51547: OR
51548: PUSH
51549: LD_VAR 0 10
51553: NOT
51554: OR
51555: IFFALSE 51590
// begin result := [ chassis , engine , control , weapon ] ;
51557: LD_ADDR_VAR 0 6
51561: PUSH
51562: LD_VAR 0 2
51566: PUSH
51567: LD_VAR 0 3
51571: PUSH
51572: LD_VAR 0 4
51576: PUSH
51577: LD_VAR 0 5
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// exit ;
51588: GO 51881
// end ; if not chassis in _chassis then
51590: LD_VAR 0 2
51594: PUSH
51595: LD_VAR 0 9
51599: IN
51600: NOT
51601: IFFALSE 51627
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
51603: LD_ADDR_VAR 0 2
51607: PUSH
51608: LD_VAR 0 9
51612: PUSH
51613: LD_INT 1
51615: PPUSH
51616: LD_VAR 0 9
51620: PPUSH
51621: CALL_OW 12
51625: ARRAY
51626: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
51627: LD_VAR 0 2
51631: PPUSH
51632: LD_VAR 0 3
51636: PPUSH
51637: CALL 51886 0 2
51641: NOT
51642: IFFALSE 51701
// repeat engine := _engine [ 1 ] ;
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_VAR 0 11
51653: PUSH
51654: LD_INT 1
51656: ARRAY
51657: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
51658: LD_ADDR_VAR 0 11
51662: PUSH
51663: LD_VAR 0 11
51667: PPUSH
51668: LD_INT 1
51670: PPUSH
51671: CALL_OW 3
51675: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
51676: LD_VAR 0 2
51680: PPUSH
51681: LD_VAR 0 3
51685: PPUSH
51686: CALL 51886 0 2
51690: PUSH
51691: LD_VAR 0 11
51695: PUSH
51696: EMPTY
51697: EQUAL
51698: OR
51699: IFFALSE 51644
// if not control in _control then
51701: LD_VAR 0 4
51705: PUSH
51706: LD_VAR 0 12
51710: IN
51711: NOT
51712: IFFALSE 51738
// control := _control [ rand ( 1 , _control ) ] ;
51714: LD_ADDR_VAR 0 4
51718: PUSH
51719: LD_VAR 0 12
51723: PUSH
51724: LD_INT 1
51726: PPUSH
51727: LD_VAR 0 12
51731: PPUSH
51732: CALL_OW 12
51736: ARRAY
51737: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
51738: LD_VAR 0 2
51742: PPUSH
51743: LD_VAR 0 5
51747: PPUSH
51748: CALL 52106 0 2
51752: NOT
51753: IFFALSE 51812
// repeat weapon := _weapon [ 1 ] ;
51755: LD_ADDR_VAR 0 5
51759: PUSH
51760: LD_VAR 0 10
51764: PUSH
51765: LD_INT 1
51767: ARRAY
51768: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
51769: LD_ADDR_VAR 0 10
51773: PUSH
51774: LD_VAR 0 10
51778: PPUSH
51779: LD_INT 1
51781: PPUSH
51782: CALL_OW 3
51786: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
51787: LD_VAR 0 2
51791: PPUSH
51792: LD_VAR 0 5
51796: PPUSH
51797: CALL 52106 0 2
51801: PUSH
51802: LD_VAR 0 10
51806: PUSH
51807: EMPTY
51808: EQUAL
51809: OR
51810: IFFALSE 51755
// result := [ ] ;
51812: LD_ADDR_VAR 0 6
51816: PUSH
51817: EMPTY
51818: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51819: LD_VAR 0 1
51823: PPUSH
51824: LD_VAR 0 2
51828: PPUSH
51829: LD_VAR 0 3
51833: PPUSH
51834: LD_VAR 0 4
51838: PPUSH
51839: LD_VAR 0 5
51843: PPUSH
51844: CALL_OW 448
51848: IFFALSE 51881
// result := [ chassis , engine , control , weapon ] ;
51850: LD_ADDR_VAR 0 6
51854: PUSH
51855: LD_VAR 0 2
51859: PUSH
51860: LD_VAR 0 3
51864: PUSH
51865: LD_VAR 0 4
51869: PUSH
51870: LD_VAR 0 5
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// end ;
51881: LD_VAR 0 6
51885: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
51886: LD_INT 0
51888: PPUSH
// if not chassis or not engine then
51889: LD_VAR 0 1
51893: NOT
51894: PUSH
51895: LD_VAR 0 2
51899: NOT
51900: OR
51901: IFFALSE 51905
// exit ;
51903: GO 52101
// case engine of engine_solar :
51905: LD_VAR 0 2
51909: PUSH
51910: LD_INT 2
51912: DOUBLE
51913: EQUAL
51914: IFTRUE 51918
51916: GO 51956
51918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
51919: LD_ADDR_VAR 0 3
51923: PUSH
51924: LD_INT 11
51926: PUSH
51927: LD_INT 12
51929: PUSH
51930: LD_INT 13
51932: PUSH
51933: LD_INT 14
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
51954: GO 52085
51956: LD_INT 1
51958: DOUBLE
51959: EQUAL
51960: IFTRUE 51964
51962: GO 52026
51964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
51965: LD_ADDR_VAR 0 3
51969: PUSH
51970: LD_INT 11
51972: PUSH
51973: LD_INT 12
51975: PUSH
51976: LD_INT 13
51978: PUSH
51979: LD_INT 14
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: LD_INT 4
51993: PUSH
51994: LD_INT 5
51996: PUSH
51997: LD_INT 21
51999: PUSH
52000: LD_INT 23
52002: PUSH
52003: LD_INT 22
52005: PUSH
52006: LD_INT 24
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: ST_TO_ADDR
52024: GO 52085
52026: LD_INT 3
52028: DOUBLE
52029: EQUAL
52030: IFTRUE 52034
52032: GO 52084
52034: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52035: LD_ADDR_VAR 0 3
52039: PUSH
52040: LD_INT 13
52042: PUSH
52043: LD_INT 14
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: LD_INT 4
52054: PUSH
52055: LD_INT 5
52057: PUSH
52058: LD_INT 21
52060: PUSH
52061: LD_INT 22
52063: PUSH
52064: LD_INT 23
52066: PUSH
52067: LD_INT 24
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
52082: GO 52085
52084: POP
// result := ( chassis in result ) ;
52085: LD_ADDR_VAR 0 3
52089: PUSH
52090: LD_VAR 0 1
52094: PUSH
52095: LD_VAR 0 3
52099: IN
52100: ST_TO_ADDR
// end ;
52101: LD_VAR 0 3
52105: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
52106: LD_INT 0
52108: PPUSH
// if not chassis or not weapon then
52109: LD_VAR 0 1
52113: NOT
52114: PUSH
52115: LD_VAR 0 2
52119: NOT
52120: OR
52121: IFFALSE 52125
// exit ;
52123: GO 53187
// case weapon of us_machine_gun :
52125: LD_VAR 0 2
52129: PUSH
52130: LD_INT 2
52132: DOUBLE
52133: EQUAL
52134: IFTRUE 52138
52136: GO 52168
52138: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
52139: LD_ADDR_VAR 0 3
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: LD_INT 4
52155: PUSH
52156: LD_INT 5
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
52166: GO 53171
52168: LD_INT 3
52170: DOUBLE
52171: EQUAL
52172: IFTRUE 52176
52174: GO 52206
52176: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
52177: LD_ADDR_VAR 0 3
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 4
52193: PUSH
52194: LD_INT 5
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: ST_TO_ADDR
52204: GO 53171
52206: LD_INT 11
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52214
52212: GO 52244
52214: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
52215: LD_ADDR_VAR 0 3
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 4
52231: PUSH
52232: LD_INT 5
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: ST_TO_ADDR
52242: GO 53171
52244: LD_INT 4
52246: DOUBLE
52247: EQUAL
52248: IFTRUE 52252
52250: GO 52278
52252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
52253: LD_ADDR_VAR 0 3
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: LD_INT 4
52266: PUSH
52267: LD_INT 5
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
52276: GO 53171
52278: LD_INT 5
52280: DOUBLE
52281: EQUAL
52282: IFTRUE 52286
52284: GO 52312
52286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
52287: LD_ADDR_VAR 0 3
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: LD_INT 4
52300: PUSH
52301: LD_INT 5
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: ST_TO_ADDR
52310: GO 53171
52312: LD_INT 9
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52320
52318: GO 52346
52320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
52321: LD_ADDR_VAR 0 3
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: LD_INT 4
52334: PUSH
52335: LD_INT 5
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
52344: GO 53171
52346: LD_INT 7
52348: DOUBLE
52349: EQUAL
52350: IFTRUE 52354
52352: GO 52380
52354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
52355: LD_ADDR_VAR 0 3
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: LD_INT 4
52368: PUSH
52369: LD_INT 5
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
52378: GO 53171
52380: LD_INT 12
52382: DOUBLE
52383: EQUAL
52384: IFTRUE 52388
52386: GO 52414
52388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
52389: LD_ADDR_VAR 0 3
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: LD_INT 4
52402: PUSH
52403: LD_INT 5
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: ST_TO_ADDR
52412: GO 53171
52414: LD_INT 13
52416: DOUBLE
52417: EQUAL
52418: IFTRUE 52422
52420: GO 52448
52422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
52423: LD_ADDR_VAR 0 3
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: LD_INT 4
52436: PUSH
52437: LD_INT 5
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: ST_TO_ADDR
52446: GO 53171
52448: LD_INT 14
52450: DOUBLE
52451: EQUAL
52452: IFTRUE 52456
52454: GO 52474
52456: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
52457: LD_ADDR_VAR 0 3
52461: PUSH
52462: LD_INT 4
52464: PUSH
52465: LD_INT 5
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: ST_TO_ADDR
52472: GO 53171
52474: LD_INT 6
52476: DOUBLE
52477: EQUAL
52478: IFTRUE 52482
52480: GO 52500
52482: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
52483: LD_ADDR_VAR 0 3
52487: PUSH
52488: LD_INT 4
52490: PUSH
52491: LD_INT 5
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: ST_TO_ADDR
52498: GO 53171
52500: LD_INT 10
52502: DOUBLE
52503: EQUAL
52504: IFTRUE 52508
52506: GO 52526
52508: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
52509: LD_ADDR_VAR 0 3
52513: PUSH
52514: LD_INT 4
52516: PUSH
52517: LD_INT 5
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: ST_TO_ADDR
52524: GO 53171
52526: LD_INT 22
52528: DOUBLE
52529: EQUAL
52530: IFTRUE 52534
52532: GO 52560
52534: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
52535: LD_ADDR_VAR 0 3
52539: PUSH
52540: LD_INT 11
52542: PUSH
52543: LD_INT 12
52545: PUSH
52546: LD_INT 13
52548: PUSH
52549: LD_INT 14
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: ST_TO_ADDR
52558: GO 53171
52560: LD_INT 23
52562: DOUBLE
52563: EQUAL
52564: IFTRUE 52568
52566: GO 52594
52568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
52569: LD_ADDR_VAR 0 3
52573: PUSH
52574: LD_INT 11
52576: PUSH
52577: LD_INT 12
52579: PUSH
52580: LD_INT 13
52582: PUSH
52583: LD_INT 14
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
52592: GO 53171
52594: LD_INT 24
52596: DOUBLE
52597: EQUAL
52598: IFTRUE 52602
52600: GO 52628
52602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
52603: LD_ADDR_VAR 0 3
52607: PUSH
52608: LD_INT 11
52610: PUSH
52611: LD_INT 12
52613: PUSH
52614: LD_INT 13
52616: PUSH
52617: LD_INT 14
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
52626: GO 53171
52628: LD_INT 30
52630: DOUBLE
52631: EQUAL
52632: IFTRUE 52636
52634: GO 52662
52636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
52637: LD_ADDR_VAR 0 3
52641: PUSH
52642: LD_INT 11
52644: PUSH
52645: LD_INT 12
52647: PUSH
52648: LD_INT 13
52650: PUSH
52651: LD_INT 14
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
52660: GO 53171
52662: LD_INT 25
52664: DOUBLE
52665: EQUAL
52666: IFTRUE 52670
52668: GO 52688
52670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
52671: LD_ADDR_VAR 0 3
52675: PUSH
52676: LD_INT 13
52678: PUSH
52679: LD_INT 14
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: ST_TO_ADDR
52686: GO 53171
52688: LD_INT 27
52690: DOUBLE
52691: EQUAL
52692: IFTRUE 52696
52694: GO 52714
52696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
52697: LD_ADDR_VAR 0 3
52701: PUSH
52702: LD_INT 13
52704: PUSH
52705: LD_INT 14
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: ST_TO_ADDR
52712: GO 53171
52714: LD_EXP 74
52718: DOUBLE
52719: EQUAL
52720: IFTRUE 52724
52722: GO 52750
52724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
52725: LD_ADDR_VAR 0 3
52729: PUSH
52730: LD_INT 11
52732: PUSH
52733: LD_INT 12
52735: PUSH
52736: LD_INT 13
52738: PUSH
52739: LD_INT 14
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: ST_TO_ADDR
52748: GO 53171
52750: LD_INT 28
52752: DOUBLE
52753: EQUAL
52754: IFTRUE 52758
52756: GO 52776
52758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
52759: LD_ADDR_VAR 0 3
52763: PUSH
52764: LD_INT 13
52766: PUSH
52767: LD_INT 14
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: ST_TO_ADDR
52774: GO 53171
52776: LD_INT 29
52778: DOUBLE
52779: EQUAL
52780: IFTRUE 52784
52782: GO 52802
52784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
52785: LD_ADDR_VAR 0 3
52789: PUSH
52790: LD_INT 13
52792: PUSH
52793: LD_INT 14
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: ST_TO_ADDR
52800: GO 53171
52802: LD_INT 31
52804: DOUBLE
52805: EQUAL
52806: IFTRUE 52810
52808: GO 52828
52810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
52811: LD_ADDR_VAR 0 3
52815: PUSH
52816: LD_INT 13
52818: PUSH
52819: LD_INT 14
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: ST_TO_ADDR
52826: GO 53171
52828: LD_INT 26
52830: DOUBLE
52831: EQUAL
52832: IFTRUE 52836
52834: GO 52854
52836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
52837: LD_ADDR_VAR 0 3
52841: PUSH
52842: LD_INT 13
52844: PUSH
52845: LD_INT 14
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: ST_TO_ADDR
52852: GO 53171
52854: LD_INT 42
52856: DOUBLE
52857: EQUAL
52858: IFTRUE 52862
52860: GO 52888
52862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
52863: LD_ADDR_VAR 0 3
52867: PUSH
52868: LD_INT 21
52870: PUSH
52871: LD_INT 22
52873: PUSH
52874: LD_INT 23
52876: PUSH
52877: LD_INT 24
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: ST_TO_ADDR
52886: GO 53171
52888: LD_INT 43
52890: DOUBLE
52891: EQUAL
52892: IFTRUE 52896
52894: GO 52922
52896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
52897: LD_ADDR_VAR 0 3
52901: PUSH
52902: LD_INT 21
52904: PUSH
52905: LD_INT 22
52907: PUSH
52908: LD_INT 23
52910: PUSH
52911: LD_INT 24
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
52920: GO 53171
52922: LD_INT 44
52924: DOUBLE
52925: EQUAL
52926: IFTRUE 52930
52928: GO 52956
52930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
52931: LD_ADDR_VAR 0 3
52935: PUSH
52936: LD_INT 21
52938: PUSH
52939: LD_INT 22
52941: PUSH
52942: LD_INT 23
52944: PUSH
52945: LD_INT 24
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: ST_TO_ADDR
52954: GO 53171
52956: LD_INT 45
52958: DOUBLE
52959: EQUAL
52960: IFTRUE 52964
52962: GO 52990
52964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
52965: LD_ADDR_VAR 0 3
52969: PUSH
52970: LD_INT 21
52972: PUSH
52973: LD_INT 22
52975: PUSH
52976: LD_INT 23
52978: PUSH
52979: LD_INT 24
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
52988: GO 53171
52990: LD_INT 49
52992: DOUBLE
52993: EQUAL
52994: IFTRUE 52998
52996: GO 53024
52998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
52999: LD_ADDR_VAR 0 3
53003: PUSH
53004: LD_INT 21
53006: PUSH
53007: LD_INT 22
53009: PUSH
53010: LD_INT 23
53012: PUSH
53013: LD_INT 24
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
53022: GO 53171
53024: LD_INT 51
53026: DOUBLE
53027: EQUAL
53028: IFTRUE 53032
53030: GO 53058
53032: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
53033: LD_ADDR_VAR 0 3
53037: PUSH
53038: LD_INT 21
53040: PUSH
53041: LD_INT 22
53043: PUSH
53044: LD_INT 23
53046: PUSH
53047: LD_INT 24
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
53056: GO 53171
53058: LD_INT 52
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53066
53064: GO 53092
53066: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
53067: LD_ADDR_VAR 0 3
53071: PUSH
53072: LD_INT 21
53074: PUSH
53075: LD_INT 22
53077: PUSH
53078: LD_INT 23
53080: PUSH
53081: LD_INT 24
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: ST_TO_ADDR
53090: GO 53171
53092: LD_INT 53
53094: DOUBLE
53095: EQUAL
53096: IFTRUE 53100
53098: GO 53118
53100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
53101: LD_ADDR_VAR 0 3
53105: PUSH
53106: LD_INT 23
53108: PUSH
53109: LD_INT 24
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: ST_TO_ADDR
53116: GO 53171
53118: LD_INT 46
53120: DOUBLE
53121: EQUAL
53122: IFTRUE 53126
53124: GO 53144
53126: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
53127: LD_ADDR_VAR 0 3
53131: PUSH
53132: LD_INT 23
53134: PUSH
53135: LD_INT 24
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: ST_TO_ADDR
53142: GO 53171
53144: LD_INT 47
53146: DOUBLE
53147: EQUAL
53148: IFTRUE 53152
53150: GO 53170
53152: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53153: LD_ADDR_VAR 0 3
53157: PUSH
53158: LD_INT 23
53160: PUSH
53161: LD_INT 24
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: ST_TO_ADDR
53168: GO 53171
53170: POP
// result := ( chassis in result ) ;
53171: LD_ADDR_VAR 0 3
53175: PUSH
53176: LD_VAR 0 1
53180: PUSH
53181: LD_VAR 0 3
53185: IN
53186: ST_TO_ADDR
// end ;
53187: LD_VAR 0 3
53191: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
53192: LD_INT 0
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
// result := array ;
53201: LD_ADDR_VAR 0 5
53205: PUSH
53206: LD_VAR 0 1
53210: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
53211: LD_VAR 0 1
53215: NOT
53216: PUSH
53217: LD_VAR 0 2
53221: NOT
53222: OR
53223: PUSH
53224: LD_VAR 0 3
53228: NOT
53229: OR
53230: PUSH
53231: LD_VAR 0 2
53235: PUSH
53236: LD_VAR 0 1
53240: GREATER
53241: OR
53242: PUSH
53243: LD_VAR 0 3
53247: PUSH
53248: LD_VAR 0 1
53252: GREATER
53253: OR
53254: IFFALSE 53258
// exit ;
53256: GO 53554
// if direction then
53258: LD_VAR 0 4
53262: IFFALSE 53326
// begin d := 1 ;
53264: LD_ADDR_VAR 0 9
53268: PUSH
53269: LD_INT 1
53271: ST_TO_ADDR
// if i_from > i_to then
53272: LD_VAR 0 2
53276: PUSH
53277: LD_VAR 0 3
53281: GREATER
53282: IFFALSE 53308
// length := ( array - i_from ) + i_to else
53284: LD_ADDR_VAR 0 11
53288: PUSH
53289: LD_VAR 0 1
53293: PUSH
53294: LD_VAR 0 2
53298: MINUS
53299: PUSH
53300: LD_VAR 0 3
53304: PLUS
53305: ST_TO_ADDR
53306: GO 53324
// length := i_to - i_from ;
53308: LD_ADDR_VAR 0 11
53312: PUSH
53313: LD_VAR 0 3
53317: PUSH
53318: LD_VAR 0 2
53322: MINUS
53323: ST_TO_ADDR
// end else
53324: GO 53387
// begin d := - 1 ;
53326: LD_ADDR_VAR 0 9
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: ST_TO_ADDR
// if i_from > i_to then
53335: LD_VAR 0 2
53339: PUSH
53340: LD_VAR 0 3
53344: GREATER
53345: IFFALSE 53365
// length := i_from - i_to else
53347: LD_ADDR_VAR 0 11
53351: PUSH
53352: LD_VAR 0 2
53356: PUSH
53357: LD_VAR 0 3
53361: MINUS
53362: ST_TO_ADDR
53363: GO 53387
// length := ( array - i_to ) + i_from ;
53365: LD_ADDR_VAR 0 11
53369: PUSH
53370: LD_VAR 0 1
53374: PUSH
53375: LD_VAR 0 3
53379: MINUS
53380: PUSH
53381: LD_VAR 0 2
53385: PLUS
53386: ST_TO_ADDR
// end ; if not length then
53387: LD_VAR 0 11
53391: NOT
53392: IFFALSE 53396
// exit ;
53394: GO 53554
// tmp := array ;
53396: LD_ADDR_VAR 0 10
53400: PUSH
53401: LD_VAR 0 1
53405: ST_TO_ADDR
// for i = 1 to length do
53406: LD_ADDR_VAR 0 6
53410: PUSH
53411: DOUBLE
53412: LD_INT 1
53414: DEC
53415: ST_TO_ADDR
53416: LD_VAR 0 11
53420: PUSH
53421: FOR_TO
53422: IFFALSE 53542
// begin for j = 1 to array do
53424: LD_ADDR_VAR 0 7
53428: PUSH
53429: DOUBLE
53430: LD_INT 1
53432: DEC
53433: ST_TO_ADDR
53434: LD_VAR 0 1
53438: PUSH
53439: FOR_TO
53440: IFFALSE 53528
// begin k := j + d ;
53442: LD_ADDR_VAR 0 8
53446: PUSH
53447: LD_VAR 0 7
53451: PUSH
53452: LD_VAR 0 9
53456: PLUS
53457: ST_TO_ADDR
// if k > array then
53458: LD_VAR 0 8
53462: PUSH
53463: LD_VAR 0 1
53467: GREATER
53468: IFFALSE 53478
// k := 1 ;
53470: LD_ADDR_VAR 0 8
53474: PUSH
53475: LD_INT 1
53477: ST_TO_ADDR
// if not k then
53478: LD_VAR 0 8
53482: NOT
53483: IFFALSE 53495
// k := array ;
53485: LD_ADDR_VAR 0 8
53489: PUSH
53490: LD_VAR 0 1
53494: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
53495: LD_ADDR_VAR 0 10
53499: PUSH
53500: LD_VAR 0 10
53504: PPUSH
53505: LD_VAR 0 8
53509: PPUSH
53510: LD_VAR 0 1
53514: PUSH
53515: LD_VAR 0 7
53519: ARRAY
53520: PPUSH
53521: CALL_OW 1
53525: ST_TO_ADDR
// end ;
53526: GO 53439
53528: POP
53529: POP
// array := tmp ;
53530: LD_ADDR_VAR 0 1
53534: PUSH
53535: LD_VAR 0 10
53539: ST_TO_ADDR
// end ;
53540: GO 53421
53542: POP
53543: POP
// result := array ;
53544: LD_ADDR_VAR 0 5
53548: PUSH
53549: LD_VAR 0 1
53553: ST_TO_ADDR
// end ;
53554: LD_VAR 0 5
53558: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
53559: LD_INT 0
53561: PPUSH
53562: PPUSH
// result := 0 ;
53563: LD_ADDR_VAR 0 3
53567: PUSH
53568: LD_INT 0
53570: ST_TO_ADDR
// if not array or not value in array then
53571: LD_VAR 0 1
53575: NOT
53576: PUSH
53577: LD_VAR 0 2
53581: PUSH
53582: LD_VAR 0 1
53586: IN
53587: NOT
53588: OR
53589: IFFALSE 53593
// exit ;
53591: GO 53647
// for i = 1 to array do
53593: LD_ADDR_VAR 0 4
53597: PUSH
53598: DOUBLE
53599: LD_INT 1
53601: DEC
53602: ST_TO_ADDR
53603: LD_VAR 0 1
53607: PUSH
53608: FOR_TO
53609: IFFALSE 53645
// if value = array [ i ] then
53611: LD_VAR 0 2
53615: PUSH
53616: LD_VAR 0 1
53620: PUSH
53621: LD_VAR 0 4
53625: ARRAY
53626: EQUAL
53627: IFFALSE 53643
// begin result := i ;
53629: LD_ADDR_VAR 0 3
53633: PUSH
53634: LD_VAR 0 4
53638: ST_TO_ADDR
// exit ;
53639: POP
53640: POP
53641: GO 53647
// end ;
53643: GO 53608
53645: POP
53646: POP
// end ;
53647: LD_VAR 0 3
53651: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
53652: LD_INT 0
53654: PPUSH
// vc_chassis := chassis ;
53655: LD_ADDR_OWVAR 37
53659: PUSH
53660: LD_VAR 0 1
53664: ST_TO_ADDR
// vc_engine := engine ;
53665: LD_ADDR_OWVAR 39
53669: PUSH
53670: LD_VAR 0 2
53674: ST_TO_ADDR
// vc_control := control ;
53675: LD_ADDR_OWVAR 38
53679: PUSH
53680: LD_VAR 0 3
53684: ST_TO_ADDR
// vc_weapon := weapon ;
53685: LD_ADDR_OWVAR 40
53689: PUSH
53690: LD_VAR 0 4
53694: ST_TO_ADDR
// vc_fuel_battery := fuel ;
53695: LD_ADDR_OWVAR 41
53699: PUSH
53700: LD_VAR 0 5
53704: ST_TO_ADDR
// end ;
53705: LD_VAR 0 6
53709: RET
// export function WantPlant ( unit ) ; var task ; begin
53710: LD_INT 0
53712: PPUSH
53713: PPUSH
// result := false ;
53714: LD_ADDR_VAR 0 2
53718: PUSH
53719: LD_INT 0
53721: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
53722: LD_ADDR_VAR 0 3
53726: PUSH
53727: LD_VAR 0 1
53731: PPUSH
53732: CALL_OW 437
53736: ST_TO_ADDR
// if task then
53737: LD_VAR 0 3
53741: IFFALSE 53769
// if task [ 1 ] [ 1 ] = p then
53743: LD_VAR 0 3
53747: PUSH
53748: LD_INT 1
53750: ARRAY
53751: PUSH
53752: LD_INT 1
53754: ARRAY
53755: PUSH
53756: LD_STRING p
53758: EQUAL
53759: IFFALSE 53769
// result := true ;
53761: LD_ADDR_VAR 0 2
53765: PUSH
53766: LD_INT 1
53768: ST_TO_ADDR
// end ;
53769: LD_VAR 0 2
53773: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
53774: LD_INT 0
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
// if pos < 1 then
53780: LD_VAR 0 2
53784: PUSH
53785: LD_INT 1
53787: LESS
53788: IFFALSE 53792
// exit ;
53790: GO 54095
// if pos = 1 then
53792: LD_VAR 0 2
53796: PUSH
53797: LD_INT 1
53799: EQUAL
53800: IFFALSE 53833
// result := Replace ( arr , pos [ 1 ] , value ) else
53802: LD_ADDR_VAR 0 4
53806: PUSH
53807: LD_VAR 0 1
53811: PPUSH
53812: LD_VAR 0 2
53816: PUSH
53817: LD_INT 1
53819: ARRAY
53820: PPUSH
53821: LD_VAR 0 3
53825: PPUSH
53826: CALL_OW 1
53830: ST_TO_ADDR
53831: GO 54095
// begin tmp := arr ;
53833: LD_ADDR_VAR 0 6
53837: PUSH
53838: LD_VAR 0 1
53842: ST_TO_ADDR
// s_arr := [ tmp ] ;
53843: LD_ADDR_VAR 0 7
53847: PUSH
53848: LD_VAR 0 6
53852: PUSH
53853: EMPTY
53854: LIST
53855: ST_TO_ADDR
// for i = 1 to pos - 1 do
53856: LD_ADDR_VAR 0 5
53860: PUSH
53861: DOUBLE
53862: LD_INT 1
53864: DEC
53865: ST_TO_ADDR
53866: LD_VAR 0 2
53870: PUSH
53871: LD_INT 1
53873: MINUS
53874: PUSH
53875: FOR_TO
53876: IFFALSE 53921
// begin tmp := tmp [ pos [ i ] ] ;
53878: LD_ADDR_VAR 0 6
53882: PUSH
53883: LD_VAR 0 6
53887: PUSH
53888: LD_VAR 0 2
53892: PUSH
53893: LD_VAR 0 5
53897: ARRAY
53898: ARRAY
53899: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
53900: LD_ADDR_VAR 0 7
53904: PUSH
53905: LD_VAR 0 7
53909: PUSH
53910: LD_VAR 0 6
53914: PUSH
53915: EMPTY
53916: LIST
53917: ADD
53918: ST_TO_ADDR
// end ;
53919: GO 53875
53921: POP
53922: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
53923: LD_ADDR_VAR 0 6
53927: PUSH
53928: LD_VAR 0 6
53932: PPUSH
53933: LD_VAR 0 2
53937: PUSH
53938: LD_VAR 0 2
53942: ARRAY
53943: PPUSH
53944: LD_VAR 0 3
53948: PPUSH
53949: CALL_OW 1
53953: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
53954: LD_ADDR_VAR 0 7
53958: PUSH
53959: LD_VAR 0 7
53963: PPUSH
53964: LD_VAR 0 7
53968: PPUSH
53969: LD_VAR 0 6
53973: PPUSH
53974: CALL_OW 1
53978: ST_TO_ADDR
// for i = s_arr downto 2 do
53979: LD_ADDR_VAR 0 5
53983: PUSH
53984: DOUBLE
53985: LD_VAR 0 7
53989: INC
53990: ST_TO_ADDR
53991: LD_INT 2
53993: PUSH
53994: FOR_DOWNTO
53995: IFFALSE 54079
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
53997: LD_ADDR_VAR 0 6
54001: PUSH
54002: LD_VAR 0 7
54006: PUSH
54007: LD_VAR 0 5
54011: PUSH
54012: LD_INT 1
54014: MINUS
54015: ARRAY
54016: PPUSH
54017: LD_VAR 0 2
54021: PUSH
54022: LD_VAR 0 5
54026: PUSH
54027: LD_INT 1
54029: MINUS
54030: ARRAY
54031: PPUSH
54032: LD_VAR 0 7
54036: PUSH
54037: LD_VAR 0 5
54041: ARRAY
54042: PPUSH
54043: CALL_OW 1
54047: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
54048: LD_ADDR_VAR 0 7
54052: PUSH
54053: LD_VAR 0 7
54057: PPUSH
54058: LD_VAR 0 5
54062: PUSH
54063: LD_INT 1
54065: MINUS
54066: PPUSH
54067: LD_VAR 0 6
54071: PPUSH
54072: CALL_OW 1
54076: ST_TO_ADDR
// end ;
54077: GO 53994
54079: POP
54080: POP
// result := s_arr [ 1 ] ;
54081: LD_ADDR_VAR 0 4
54085: PUSH
54086: LD_VAR 0 7
54090: PUSH
54091: LD_INT 1
54093: ARRAY
54094: ST_TO_ADDR
// end ; end ;
54095: LD_VAR 0 4
54099: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
54100: LD_INT 0
54102: PPUSH
54103: PPUSH
// if not list then
54104: LD_VAR 0 1
54108: NOT
54109: IFFALSE 54113
// exit ;
54111: GO 54204
// i := list [ pos1 ] ;
54113: LD_ADDR_VAR 0 5
54117: PUSH
54118: LD_VAR 0 1
54122: PUSH
54123: LD_VAR 0 2
54127: ARRAY
54128: ST_TO_ADDR
// if not i then
54129: LD_VAR 0 5
54133: NOT
54134: IFFALSE 54138
// exit ;
54136: GO 54204
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
54138: LD_ADDR_VAR 0 1
54142: PUSH
54143: LD_VAR 0 1
54147: PPUSH
54148: LD_VAR 0 2
54152: PPUSH
54153: LD_VAR 0 1
54157: PUSH
54158: LD_VAR 0 3
54162: ARRAY
54163: PPUSH
54164: CALL_OW 1
54168: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
54169: LD_ADDR_VAR 0 1
54173: PUSH
54174: LD_VAR 0 1
54178: PPUSH
54179: LD_VAR 0 3
54183: PPUSH
54184: LD_VAR 0 5
54188: PPUSH
54189: CALL_OW 1
54193: ST_TO_ADDR
// result := list ;
54194: LD_ADDR_VAR 0 4
54198: PUSH
54199: LD_VAR 0 1
54203: ST_TO_ADDR
// end ;
54204: LD_VAR 0 4
54208: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
54209: LD_INT 0
54211: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
54212: LD_ADDR_VAR 0 5
54216: PUSH
54217: LD_VAR 0 1
54221: PPUSH
54222: CALL_OW 250
54226: PPUSH
54227: LD_VAR 0 1
54231: PPUSH
54232: CALL_OW 251
54236: PPUSH
54237: LD_VAR 0 2
54241: PPUSH
54242: LD_VAR 0 3
54246: PPUSH
54247: LD_VAR 0 4
54251: PPUSH
54252: CALL 54262 0 5
54256: ST_TO_ADDR
// end ;
54257: LD_VAR 0 5
54261: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
54262: LD_INT 0
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
// if not list then
54268: LD_VAR 0 3
54272: NOT
54273: IFFALSE 54277
// exit ;
54275: GO 54665
// result := [ ] ;
54277: LD_ADDR_VAR 0 6
54281: PUSH
54282: EMPTY
54283: ST_TO_ADDR
// for i in list do
54284: LD_ADDR_VAR 0 7
54288: PUSH
54289: LD_VAR 0 3
54293: PUSH
54294: FOR_IN
54295: IFFALSE 54497
// begin tmp := GetDistUnitXY ( i , x , y ) ;
54297: LD_ADDR_VAR 0 9
54301: PUSH
54302: LD_VAR 0 7
54306: PPUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: LD_VAR 0 2
54316: PPUSH
54317: CALL_OW 297
54321: ST_TO_ADDR
// if not result then
54322: LD_VAR 0 6
54326: NOT
54327: IFFALSE 54353
// result := [ [ i , tmp ] ] else
54329: LD_ADDR_VAR 0 6
54333: PUSH
54334: LD_VAR 0 7
54338: PUSH
54339: LD_VAR 0 9
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: EMPTY
54349: LIST
54350: ST_TO_ADDR
54351: GO 54495
// begin if result [ result ] [ 2 ] < tmp then
54353: LD_VAR 0 6
54357: PUSH
54358: LD_VAR 0 6
54362: ARRAY
54363: PUSH
54364: LD_INT 2
54366: ARRAY
54367: PUSH
54368: LD_VAR 0 9
54372: LESS
54373: IFFALSE 54415
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
54375: LD_ADDR_VAR 0 6
54379: PUSH
54380: LD_VAR 0 6
54384: PPUSH
54385: LD_VAR 0 6
54389: PUSH
54390: LD_INT 1
54392: PLUS
54393: PPUSH
54394: LD_VAR 0 7
54398: PUSH
54399: LD_VAR 0 9
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PPUSH
54408: CALL_OW 2
54412: ST_TO_ADDR
54413: GO 54495
// for j = 1 to result do
54415: LD_ADDR_VAR 0 8
54419: PUSH
54420: DOUBLE
54421: LD_INT 1
54423: DEC
54424: ST_TO_ADDR
54425: LD_VAR 0 6
54429: PUSH
54430: FOR_TO
54431: IFFALSE 54493
// begin if tmp < result [ j ] [ 2 ] then
54433: LD_VAR 0 9
54437: PUSH
54438: LD_VAR 0 6
54442: PUSH
54443: LD_VAR 0 8
54447: ARRAY
54448: PUSH
54449: LD_INT 2
54451: ARRAY
54452: LESS
54453: IFFALSE 54491
// begin result := Insert ( result , j , [ i , tmp ] ) ;
54455: LD_ADDR_VAR 0 6
54459: PUSH
54460: LD_VAR 0 6
54464: PPUSH
54465: LD_VAR 0 8
54469: PPUSH
54470: LD_VAR 0 7
54474: PUSH
54475: LD_VAR 0 9
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PPUSH
54484: CALL_OW 2
54488: ST_TO_ADDR
// break ;
54489: GO 54493
// end ; end ;
54491: GO 54430
54493: POP
54494: POP
// end ; end ;
54495: GO 54294
54497: POP
54498: POP
// if result and not asc then
54499: LD_VAR 0 6
54503: PUSH
54504: LD_VAR 0 4
54508: NOT
54509: AND
54510: IFFALSE 54585
// begin tmp := result ;
54512: LD_ADDR_VAR 0 9
54516: PUSH
54517: LD_VAR 0 6
54521: ST_TO_ADDR
// for i = tmp downto 1 do
54522: LD_ADDR_VAR 0 7
54526: PUSH
54527: DOUBLE
54528: LD_VAR 0 9
54532: INC
54533: ST_TO_ADDR
54534: LD_INT 1
54536: PUSH
54537: FOR_DOWNTO
54538: IFFALSE 54583
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
54540: LD_ADDR_VAR 0 6
54544: PUSH
54545: LD_VAR 0 6
54549: PPUSH
54550: LD_VAR 0 9
54554: PUSH
54555: LD_VAR 0 7
54559: MINUS
54560: PUSH
54561: LD_INT 1
54563: PLUS
54564: PPUSH
54565: LD_VAR 0 9
54569: PUSH
54570: LD_VAR 0 7
54574: ARRAY
54575: PPUSH
54576: CALL_OW 1
54580: ST_TO_ADDR
54581: GO 54537
54583: POP
54584: POP
// end ; tmp := [ ] ;
54585: LD_ADDR_VAR 0 9
54589: PUSH
54590: EMPTY
54591: ST_TO_ADDR
// if mode then
54592: LD_VAR 0 5
54596: IFFALSE 54665
// begin for i = 1 to result do
54598: LD_ADDR_VAR 0 7
54602: PUSH
54603: DOUBLE
54604: LD_INT 1
54606: DEC
54607: ST_TO_ADDR
54608: LD_VAR 0 6
54612: PUSH
54613: FOR_TO
54614: IFFALSE 54653
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
54616: LD_ADDR_VAR 0 9
54620: PUSH
54621: LD_VAR 0 9
54625: PPUSH
54626: LD_VAR 0 7
54630: PPUSH
54631: LD_VAR 0 6
54635: PUSH
54636: LD_VAR 0 7
54640: ARRAY
54641: PUSH
54642: LD_INT 1
54644: ARRAY
54645: PPUSH
54646: CALL_OW 1
54650: ST_TO_ADDR
54651: GO 54613
54653: POP
54654: POP
// result := tmp ;
54655: LD_ADDR_VAR 0 6
54659: PUSH
54660: LD_VAR 0 9
54664: ST_TO_ADDR
// end ; end ;
54665: LD_VAR 0 6
54669: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
54670: LD_INT 0
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
54676: PPUSH
54677: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
54678: LD_ADDR_VAR 0 5
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: ST_TO_ADDR
// if not x or not y then
54700: LD_VAR 0 2
54704: NOT
54705: PUSH
54706: LD_VAR 0 3
54710: NOT
54711: OR
54712: IFFALSE 54716
// exit ;
54714: GO 56368
// if not range then
54716: LD_VAR 0 4
54720: NOT
54721: IFFALSE 54731
// range := 10 ;
54723: LD_ADDR_VAR 0 4
54727: PUSH
54728: LD_INT 10
54730: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
54731: LD_ADDR_VAR 0 8
54735: PUSH
54736: LD_INT 81
54738: PUSH
54739: LD_VAR 0 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 92
54750: PUSH
54751: LD_VAR 0 2
54755: PUSH
54756: LD_VAR 0 3
54760: PUSH
54761: LD_VAR 0 4
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: PUSH
54775: LD_INT 21
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: PPUSH
54794: CALL_OW 69
54798: ST_TO_ADDR
// if not tmp then
54799: LD_VAR 0 8
54803: NOT
54804: IFFALSE 54808
// exit ;
54806: GO 56368
// for i in tmp do
54808: LD_ADDR_VAR 0 6
54812: PUSH
54813: LD_VAR 0 8
54817: PUSH
54818: FOR_IN
54819: IFFALSE 56343
// begin points := [ 0 , 0 , 0 ] ;
54821: LD_ADDR_VAR 0 9
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// bpoints := 1 ;
54840: LD_ADDR_VAR 0 10
54844: PUSH
54845: LD_INT 1
54847: ST_TO_ADDR
// case GetType ( i ) of unit_human :
54848: LD_VAR 0 6
54852: PPUSH
54853: CALL_OW 247
54857: PUSH
54858: LD_INT 1
54860: DOUBLE
54861: EQUAL
54862: IFTRUE 54866
54864: GO 55444
54866: POP
// begin if GetClass ( i ) = 1 then
54867: LD_VAR 0 6
54871: PPUSH
54872: CALL_OW 257
54876: PUSH
54877: LD_INT 1
54879: EQUAL
54880: IFFALSE 54901
// points := [ 10 , 5 , 3 ] ;
54882: LD_ADDR_VAR 0 9
54886: PUSH
54887: LD_INT 10
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
54901: LD_VAR 0 6
54905: PPUSH
54906: CALL_OW 257
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: LD_INT 4
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: IN
54925: IFFALSE 54946
// points := [ 3 , 2 , 1 ] ;
54927: LD_ADDR_VAR 0 9
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// if GetClass ( i ) = 5 then
54946: LD_VAR 0 6
54950: PPUSH
54951: CALL_OW 257
54955: PUSH
54956: LD_INT 5
54958: EQUAL
54959: IFFALSE 54980
// points := [ 130 , 5 , 2 ] ;
54961: LD_ADDR_VAR 0 9
54965: PUSH
54966: LD_INT 130
54968: PUSH
54969: LD_INT 5
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// if GetClass ( i ) = 8 then
54980: LD_VAR 0 6
54984: PPUSH
54985: CALL_OW 257
54989: PUSH
54990: LD_INT 8
54992: EQUAL
54993: IFFALSE 55014
// points := [ 35 , 35 , 30 ] ;
54995: LD_ADDR_VAR 0 9
54999: PUSH
55000: LD_INT 35
55002: PUSH
55003: LD_INT 35
55005: PUSH
55006: LD_INT 30
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// if GetClass ( i ) = 9 then
55014: LD_VAR 0 6
55018: PPUSH
55019: CALL_OW 257
55023: PUSH
55024: LD_INT 9
55026: EQUAL
55027: IFFALSE 55048
// points := [ 20 , 55 , 40 ] ;
55029: LD_ADDR_VAR 0 9
55033: PUSH
55034: LD_INT 20
55036: PUSH
55037: LD_INT 55
55039: PUSH
55040: LD_INT 40
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
55048: LD_VAR 0 6
55052: PPUSH
55053: CALL_OW 257
55057: PUSH
55058: LD_INT 12
55060: PUSH
55061: LD_INT 16
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: IN
55068: IFFALSE 55089
// points := [ 5 , 3 , 2 ] ;
55070: LD_ADDR_VAR 0 9
55074: PUSH
55075: LD_INT 5
55077: PUSH
55078: LD_INT 3
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: ST_TO_ADDR
// if GetClass ( i ) = 17 then
55089: LD_VAR 0 6
55093: PPUSH
55094: CALL_OW 257
55098: PUSH
55099: LD_INT 17
55101: EQUAL
55102: IFFALSE 55123
// points := [ 100 , 50 , 75 ] ;
55104: LD_ADDR_VAR 0 9
55108: PUSH
55109: LD_INT 100
55111: PUSH
55112: LD_INT 50
55114: PUSH
55115: LD_INT 75
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: ST_TO_ADDR
// if GetClass ( i ) = 15 then
55123: LD_VAR 0 6
55127: PPUSH
55128: CALL_OW 257
55132: PUSH
55133: LD_INT 15
55135: EQUAL
55136: IFFALSE 55157
// points := [ 10 , 5 , 3 ] ;
55138: LD_ADDR_VAR 0 9
55142: PUSH
55143: LD_INT 10
55145: PUSH
55146: LD_INT 5
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: ST_TO_ADDR
// if GetClass ( i ) = 14 then
55157: LD_VAR 0 6
55161: PPUSH
55162: CALL_OW 257
55166: PUSH
55167: LD_INT 14
55169: EQUAL
55170: IFFALSE 55191
// points := [ 10 , 0 , 0 ] ;
55172: LD_ADDR_VAR 0 9
55176: PUSH
55177: LD_INT 10
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// if GetClass ( i ) = 11 then
55191: LD_VAR 0 6
55195: PPUSH
55196: CALL_OW 257
55200: PUSH
55201: LD_INT 11
55203: EQUAL
55204: IFFALSE 55225
// points := [ 30 , 10 , 5 ] ;
55206: LD_ADDR_VAR 0 9
55210: PUSH
55211: LD_INT 30
55213: PUSH
55214: LD_INT 10
55216: PUSH
55217: LD_INT 5
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
55225: LD_VAR 0 1
55229: PPUSH
55230: LD_INT 5
55232: PPUSH
55233: CALL_OW 321
55237: PUSH
55238: LD_INT 2
55240: EQUAL
55241: IFFALSE 55258
// bpoints := bpoints * 1.8 ;
55243: LD_ADDR_VAR 0 10
55247: PUSH
55248: LD_VAR 0 10
55252: PUSH
55253: LD_REAL  1.80000000000000E+0000
55256: MUL
55257: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
55258: LD_VAR 0 6
55262: PPUSH
55263: CALL_OW 257
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: IN
55286: PUSH
55287: LD_VAR 0 1
55291: PPUSH
55292: LD_INT 51
55294: PPUSH
55295: CALL_OW 321
55299: PUSH
55300: LD_INT 2
55302: EQUAL
55303: AND
55304: IFFALSE 55321
// bpoints := bpoints * 1.2 ;
55306: LD_ADDR_VAR 0 10
55310: PUSH
55311: LD_VAR 0 10
55315: PUSH
55316: LD_REAL  1.20000000000000E+0000
55319: MUL
55320: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
55321: LD_VAR 0 6
55325: PPUSH
55326: CALL_OW 257
55330: PUSH
55331: LD_INT 5
55333: PUSH
55334: LD_INT 7
55336: PUSH
55337: LD_INT 9
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: LIST
55344: IN
55345: PUSH
55346: LD_VAR 0 1
55350: PPUSH
55351: LD_INT 52
55353: PPUSH
55354: CALL_OW 321
55358: PUSH
55359: LD_INT 2
55361: EQUAL
55362: AND
55363: IFFALSE 55380
// bpoints := bpoints * 1.5 ;
55365: LD_ADDR_VAR 0 10
55369: PUSH
55370: LD_VAR 0 10
55374: PUSH
55375: LD_REAL  1.50000000000000E+0000
55378: MUL
55379: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
55380: LD_VAR 0 1
55384: PPUSH
55385: LD_INT 66
55387: PPUSH
55388: CALL_OW 321
55392: PUSH
55393: LD_INT 2
55395: EQUAL
55396: IFFALSE 55413
// bpoints := bpoints * 1.1 ;
55398: LD_ADDR_VAR 0 10
55402: PUSH
55403: LD_VAR 0 10
55407: PUSH
55408: LD_REAL  1.10000000000000E+0000
55411: MUL
55412: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
55413: LD_ADDR_VAR 0 10
55417: PUSH
55418: LD_VAR 0 10
55422: PUSH
55423: LD_VAR 0 6
55427: PPUSH
55428: LD_INT 1
55430: PPUSH
55431: CALL_OW 259
55435: PUSH
55436: LD_REAL  1.15000000000000E+0000
55439: MUL
55440: MUL
55441: ST_TO_ADDR
// end ; unit_vehicle :
55442: GO 56272
55444: LD_INT 2
55446: DOUBLE
55447: EQUAL
55448: IFTRUE 55452
55450: GO 56260
55452: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
55453: LD_VAR 0 6
55457: PPUSH
55458: CALL_OW 264
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 42
55468: PUSH
55469: LD_INT 24
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: IN
55477: IFFALSE 55498
// points := [ 25 , 5 , 3 ] ;
55479: LD_ADDR_VAR 0 9
55483: PUSH
55484: LD_INT 25
55486: PUSH
55487: LD_INT 5
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: LIST
55497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
55498: LD_VAR 0 6
55502: PPUSH
55503: CALL_OW 264
55507: PUSH
55508: LD_INT 4
55510: PUSH
55511: LD_INT 43
55513: PUSH
55514: LD_INT 25
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: IN
55522: IFFALSE 55543
// points := [ 40 , 15 , 5 ] ;
55524: LD_ADDR_VAR 0 9
55528: PUSH
55529: LD_INT 40
55531: PUSH
55532: LD_INT 15
55534: PUSH
55535: LD_INT 5
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
55543: LD_VAR 0 6
55547: PPUSH
55548: CALL_OW 264
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 23
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: IN
55563: IFFALSE 55584
// points := [ 7 , 25 , 8 ] ;
55565: LD_ADDR_VAR 0 9
55569: PUSH
55570: LD_INT 7
55572: PUSH
55573: LD_INT 25
55575: PUSH
55576: LD_INT 8
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
55584: LD_VAR 0 6
55588: PPUSH
55589: CALL_OW 264
55593: PUSH
55594: LD_INT 5
55596: PUSH
55597: LD_INT 27
55599: PUSH
55600: LD_INT 44
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: IN
55608: IFFALSE 55629
// points := [ 14 , 50 , 16 ] ;
55610: LD_ADDR_VAR 0 9
55614: PUSH
55615: LD_INT 14
55617: PUSH
55618: LD_INT 50
55620: PUSH
55621: LD_INT 16
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
55629: LD_VAR 0 6
55633: PPUSH
55634: CALL_OW 264
55638: PUSH
55639: LD_INT 6
55641: PUSH
55642: LD_INT 46
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: IN
55649: IFFALSE 55670
// points := [ 32 , 120 , 70 ] ;
55651: LD_ADDR_VAR 0 9
55655: PUSH
55656: LD_INT 32
55658: PUSH
55659: LD_INT 120
55661: PUSH
55662: LD_INT 70
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
55670: LD_VAR 0 6
55674: PPUSH
55675: CALL_OW 264
55679: PUSH
55680: LD_INT 7
55682: PUSH
55683: LD_INT 28
55685: PUSH
55686: LD_INT 45
55688: PUSH
55689: LD_EXP 74
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: IN
55700: IFFALSE 55721
// points := [ 35 , 20 , 45 ] ;
55702: LD_ADDR_VAR 0 9
55706: PUSH
55707: LD_INT 35
55709: PUSH
55710: LD_INT 20
55712: PUSH
55713: LD_INT 45
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
55721: LD_VAR 0 6
55725: PPUSH
55726: CALL_OW 264
55730: PUSH
55731: LD_INT 47
55733: PUSH
55734: EMPTY
55735: LIST
55736: IN
55737: IFFALSE 55758
// points := [ 67 , 45 , 75 ] ;
55739: LD_ADDR_VAR 0 9
55743: PUSH
55744: LD_INT 67
55746: PUSH
55747: LD_INT 45
55749: PUSH
55750: LD_INT 75
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
55758: LD_VAR 0 6
55762: PPUSH
55763: CALL_OW 264
55767: PUSH
55768: LD_INT 26
55770: PUSH
55771: EMPTY
55772: LIST
55773: IN
55774: IFFALSE 55795
// points := [ 120 , 30 , 80 ] ;
55776: LD_ADDR_VAR 0 9
55780: PUSH
55781: LD_INT 120
55783: PUSH
55784: LD_INT 30
55786: PUSH
55787: LD_INT 80
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
55795: LD_VAR 0 6
55799: PPUSH
55800: CALL_OW 264
55804: PUSH
55805: LD_INT 22
55807: PUSH
55808: EMPTY
55809: LIST
55810: IN
55811: IFFALSE 55832
// points := [ 40 , 1 , 1 ] ;
55813: LD_ADDR_VAR 0 9
55817: PUSH
55818: LD_INT 40
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
55832: LD_VAR 0 6
55836: PPUSH
55837: CALL_OW 264
55841: PUSH
55842: LD_INT 29
55844: PUSH
55845: EMPTY
55846: LIST
55847: IN
55848: IFFALSE 55869
// points := [ 70 , 200 , 400 ] ;
55850: LD_ADDR_VAR 0 9
55854: PUSH
55855: LD_INT 70
55857: PUSH
55858: LD_INT 200
55860: PUSH
55861: LD_INT 400
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
55869: LD_VAR 0 6
55873: PPUSH
55874: CALL_OW 264
55878: PUSH
55879: LD_INT 14
55881: PUSH
55882: LD_INT 53
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: IN
55889: IFFALSE 55910
// points := [ 40 , 10 , 20 ] ;
55891: LD_ADDR_VAR 0 9
55895: PUSH
55896: LD_INT 40
55898: PUSH
55899: LD_INT 10
55901: PUSH
55902: LD_INT 20
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
55910: LD_VAR 0 6
55914: PPUSH
55915: CALL_OW 264
55919: PUSH
55920: LD_INT 9
55922: PUSH
55923: EMPTY
55924: LIST
55925: IN
55926: IFFALSE 55947
// points := [ 5 , 70 , 20 ] ;
55928: LD_ADDR_VAR 0 9
55932: PUSH
55933: LD_INT 5
55935: PUSH
55936: LD_INT 70
55938: PUSH
55939: LD_INT 20
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
55947: LD_VAR 0 6
55951: PPUSH
55952: CALL_OW 264
55956: PUSH
55957: LD_INT 10
55959: PUSH
55960: EMPTY
55961: LIST
55962: IN
55963: IFFALSE 55984
// points := [ 35 , 110 , 70 ] ;
55965: LD_ADDR_VAR 0 9
55969: PUSH
55970: LD_INT 35
55972: PUSH
55973: LD_INT 110
55975: PUSH
55976: LD_INT 70
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
55984: LD_VAR 0 6
55988: PPUSH
55989: CALL_OW 265
55993: PUSH
55994: LD_INT 25
55996: EQUAL
55997: IFFALSE 56018
// points := [ 80 , 65 , 100 ] ;
55999: LD_ADDR_VAR 0 9
56003: PUSH
56004: LD_INT 80
56006: PUSH
56007: LD_INT 65
56009: PUSH
56010: LD_INT 100
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: LIST
56017: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
56018: LD_VAR 0 6
56022: PPUSH
56023: CALL_OW 263
56027: PUSH
56028: LD_INT 1
56030: EQUAL
56031: IFFALSE 56066
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
56033: LD_ADDR_VAR 0 10
56037: PUSH
56038: LD_VAR 0 10
56042: PUSH
56043: LD_VAR 0 6
56047: PPUSH
56048: CALL_OW 311
56052: PPUSH
56053: LD_INT 3
56055: PPUSH
56056: CALL_OW 259
56060: PUSH
56061: LD_INT 4
56063: MUL
56064: MUL
56065: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
56066: LD_VAR 0 6
56070: PPUSH
56071: CALL_OW 263
56075: PUSH
56076: LD_INT 2
56078: EQUAL
56079: IFFALSE 56130
// begin j := IsControledBy ( i ) ;
56081: LD_ADDR_VAR 0 7
56085: PUSH
56086: LD_VAR 0 6
56090: PPUSH
56091: CALL_OW 312
56095: ST_TO_ADDR
// if j then
56096: LD_VAR 0 7
56100: IFFALSE 56130
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
56102: LD_ADDR_VAR 0 10
56106: PUSH
56107: LD_VAR 0 10
56111: PUSH
56112: LD_VAR 0 7
56116: PPUSH
56117: LD_INT 3
56119: PPUSH
56120: CALL_OW 259
56124: PUSH
56125: LD_INT 3
56127: MUL
56128: MUL
56129: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
56130: LD_VAR 0 6
56134: PPUSH
56135: CALL_OW 264
56139: PUSH
56140: LD_INT 5
56142: PUSH
56143: LD_INT 6
56145: PUSH
56146: LD_INT 46
56148: PUSH
56149: LD_INT 44
56151: PUSH
56152: LD_INT 47
56154: PUSH
56155: LD_INT 45
56157: PUSH
56158: LD_INT 28
56160: PUSH
56161: LD_INT 7
56163: PUSH
56164: LD_INT 27
56166: PUSH
56167: LD_INT 29
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: IN
56182: PUSH
56183: LD_VAR 0 1
56187: PPUSH
56188: LD_INT 52
56190: PPUSH
56191: CALL_OW 321
56195: PUSH
56196: LD_INT 2
56198: EQUAL
56199: AND
56200: IFFALSE 56217
// bpoints := bpoints * 1.2 ;
56202: LD_ADDR_VAR 0 10
56206: PUSH
56207: LD_VAR 0 10
56211: PUSH
56212: LD_REAL  1.20000000000000E+0000
56215: MUL
56216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
56217: LD_VAR 0 6
56221: PPUSH
56222: CALL_OW 264
56226: PUSH
56227: LD_INT 6
56229: PUSH
56230: LD_INT 46
56232: PUSH
56233: LD_INT 47
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: IN
56241: IFFALSE 56258
// bpoints := bpoints * 1.2 ;
56243: LD_ADDR_VAR 0 10
56247: PUSH
56248: LD_VAR 0 10
56252: PUSH
56253: LD_REAL  1.20000000000000E+0000
56256: MUL
56257: ST_TO_ADDR
// end ; unit_building :
56258: GO 56272
56260: LD_INT 3
56262: DOUBLE
56263: EQUAL
56264: IFTRUE 56268
56266: GO 56271
56268: POP
// ; end ;
56269: GO 56272
56271: POP
// for j = 1 to 3 do
56272: LD_ADDR_VAR 0 7
56276: PUSH
56277: DOUBLE
56278: LD_INT 1
56280: DEC
56281: ST_TO_ADDR
56282: LD_INT 3
56284: PUSH
56285: FOR_TO
56286: IFFALSE 56339
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
56288: LD_ADDR_VAR 0 5
56292: PUSH
56293: LD_VAR 0 5
56297: PPUSH
56298: LD_VAR 0 7
56302: PPUSH
56303: LD_VAR 0 5
56307: PUSH
56308: LD_VAR 0 7
56312: ARRAY
56313: PUSH
56314: LD_VAR 0 9
56318: PUSH
56319: LD_VAR 0 7
56323: ARRAY
56324: PUSH
56325: LD_VAR 0 10
56329: MUL
56330: PLUS
56331: PPUSH
56332: CALL_OW 1
56336: ST_TO_ADDR
56337: GO 56285
56339: POP
56340: POP
// end ;
56341: GO 54818
56343: POP
56344: POP
// result := Replace ( result , 4 , tmp ) ;
56345: LD_ADDR_VAR 0 5
56349: PUSH
56350: LD_VAR 0 5
56354: PPUSH
56355: LD_INT 4
56357: PPUSH
56358: LD_VAR 0 8
56362: PPUSH
56363: CALL_OW 1
56367: ST_TO_ADDR
// end ;
56368: LD_VAR 0 5
56372: RET
// export function DangerAtRange ( unit , range ) ; begin
56373: LD_INT 0
56375: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
56376: LD_ADDR_VAR 0 3
56380: PUSH
56381: LD_VAR 0 1
56385: PPUSH
56386: CALL_OW 255
56390: PPUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 250
56400: PPUSH
56401: LD_VAR 0 1
56405: PPUSH
56406: CALL_OW 251
56410: PPUSH
56411: LD_VAR 0 2
56415: PPUSH
56416: CALL 54670 0 4
56420: ST_TO_ADDR
// end ;
56421: LD_VAR 0 3
56425: RET
// export function DangerInArea ( side , area ) ; begin
56426: LD_INT 0
56428: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
56429: LD_ADDR_VAR 0 3
56433: PUSH
56434: LD_VAR 0 2
56438: PPUSH
56439: LD_INT 81
56441: PUSH
56442: LD_VAR 0 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PPUSH
56451: CALL_OW 70
56455: ST_TO_ADDR
// end ;
56456: LD_VAR 0 3
56460: RET
// export function IsExtension ( b ) ; begin
56461: LD_INT 0
56463: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
56464: LD_ADDR_VAR 0 2
56468: PUSH
56469: LD_VAR 0 1
56473: PUSH
56474: LD_INT 23
56476: PUSH
56477: LD_INT 20
56479: PUSH
56480: LD_INT 22
56482: PUSH
56483: LD_INT 17
56485: PUSH
56486: LD_INT 24
56488: PUSH
56489: LD_INT 21
56491: PUSH
56492: LD_INT 19
56494: PUSH
56495: LD_INT 16
56497: PUSH
56498: LD_INT 25
56500: PUSH
56501: LD_INT 18
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: IN
56516: ST_TO_ADDR
// end ;
56517: LD_VAR 0 2
56521: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
56522: LD_INT 0
56524: PPUSH
56525: PPUSH
56526: PPUSH
// result := [ ] ;
56527: LD_ADDR_VAR 0 4
56531: PUSH
56532: EMPTY
56533: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
56534: LD_ADDR_VAR 0 5
56538: PUSH
56539: LD_VAR 0 2
56543: PPUSH
56544: LD_INT 21
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PPUSH
56554: CALL_OW 70
56558: ST_TO_ADDR
// if not tmp then
56559: LD_VAR 0 5
56563: NOT
56564: IFFALSE 56568
// exit ;
56566: GO 56632
// if checkLink then
56568: LD_VAR 0 3
56572: IFFALSE 56622
// begin for i in tmp do
56574: LD_ADDR_VAR 0 6
56578: PUSH
56579: LD_VAR 0 5
56583: PUSH
56584: FOR_IN
56585: IFFALSE 56620
// if GetBase ( i ) <> base then
56587: LD_VAR 0 6
56591: PPUSH
56592: CALL_OW 274
56596: PUSH
56597: LD_VAR 0 1
56601: NONEQUAL
56602: IFFALSE 56618
// ComLinkToBase ( base , i ) ;
56604: LD_VAR 0 1
56608: PPUSH
56609: LD_VAR 0 6
56613: PPUSH
56614: CALL_OW 169
56618: GO 56584
56620: POP
56621: POP
// end ; result := tmp ;
56622: LD_ADDR_VAR 0 4
56626: PUSH
56627: LD_VAR 0 5
56631: ST_TO_ADDR
// end ;
56632: LD_VAR 0 4
56636: RET
// export function ComComplete ( units , b ) ; var i ; begin
56637: LD_INT 0
56639: PPUSH
56640: PPUSH
// if not units then
56641: LD_VAR 0 1
56645: NOT
56646: IFFALSE 56650
// exit ;
56648: GO 56740
// for i in units do
56650: LD_ADDR_VAR 0 4
56654: PUSH
56655: LD_VAR 0 1
56659: PUSH
56660: FOR_IN
56661: IFFALSE 56738
// if BuildingStatus ( b ) = bs_build then
56663: LD_VAR 0 2
56667: PPUSH
56668: CALL_OW 461
56672: PUSH
56673: LD_INT 1
56675: EQUAL
56676: IFFALSE 56736
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
56678: LD_VAR 0 4
56682: PPUSH
56683: LD_STRING h
56685: PUSH
56686: LD_VAR 0 2
56690: PPUSH
56691: CALL_OW 250
56695: PUSH
56696: LD_VAR 0 2
56700: PPUSH
56701: CALL_OW 251
56705: PUSH
56706: LD_VAR 0 2
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: PPUSH
56732: CALL_OW 446
56736: GO 56660
56738: POP
56739: POP
// end ;
56740: LD_VAR 0 3
56744: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
56745: LD_INT 0
56747: PPUSH
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
56753: LD_VAR 0 1
56757: NOT
56758: PUSH
56759: LD_VAR 0 1
56763: PPUSH
56764: CALL_OW 263
56768: PUSH
56769: LD_INT 2
56771: NONEQUAL
56772: OR
56773: IFFALSE 56777
// exit ;
56775: GO 57093
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
56777: LD_ADDR_VAR 0 6
56781: PUSH
56782: LD_INT 22
56784: PUSH
56785: LD_VAR 0 1
56789: PPUSH
56790: CALL_OW 255
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 30
56804: PUSH
56805: LD_INT 36
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 34
56814: PUSH
56815: LD_INT 31
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PPUSH
56831: CALL_OW 69
56835: ST_TO_ADDR
// if not tmp then
56836: LD_VAR 0 6
56840: NOT
56841: IFFALSE 56845
// exit ;
56843: GO 57093
// result := [ ] ;
56845: LD_ADDR_VAR 0 2
56849: PUSH
56850: EMPTY
56851: ST_TO_ADDR
// for i in tmp do
56852: LD_ADDR_VAR 0 3
56856: PUSH
56857: LD_VAR 0 6
56861: PUSH
56862: FOR_IN
56863: IFFALSE 56934
// begin t := UnitsInside ( i ) ;
56865: LD_ADDR_VAR 0 4
56869: PUSH
56870: LD_VAR 0 3
56874: PPUSH
56875: CALL_OW 313
56879: ST_TO_ADDR
// if t then
56880: LD_VAR 0 4
56884: IFFALSE 56932
// for j in t do
56886: LD_ADDR_VAR 0 7
56890: PUSH
56891: LD_VAR 0 4
56895: PUSH
56896: FOR_IN
56897: IFFALSE 56930
// result := Replace ( result , result + 1 , j ) ;
56899: LD_ADDR_VAR 0 2
56903: PUSH
56904: LD_VAR 0 2
56908: PPUSH
56909: LD_VAR 0 2
56913: PUSH
56914: LD_INT 1
56916: PLUS
56917: PPUSH
56918: LD_VAR 0 7
56922: PPUSH
56923: CALL_OW 1
56927: ST_TO_ADDR
56928: GO 56896
56930: POP
56931: POP
// end ;
56932: GO 56862
56934: POP
56935: POP
// if not result then
56936: LD_VAR 0 2
56940: NOT
56941: IFFALSE 56945
// exit ;
56943: GO 57093
// mech := result [ 1 ] ;
56945: LD_ADDR_VAR 0 5
56949: PUSH
56950: LD_VAR 0 2
56954: PUSH
56955: LD_INT 1
56957: ARRAY
56958: ST_TO_ADDR
// if result > 1 then
56959: LD_VAR 0 2
56963: PUSH
56964: LD_INT 1
56966: GREATER
56967: IFFALSE 57079
// begin for i = 2 to result do
56969: LD_ADDR_VAR 0 3
56973: PUSH
56974: DOUBLE
56975: LD_INT 2
56977: DEC
56978: ST_TO_ADDR
56979: LD_VAR 0 2
56983: PUSH
56984: FOR_TO
56985: IFFALSE 57077
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
56987: LD_ADDR_VAR 0 4
56991: PUSH
56992: LD_VAR 0 2
56996: PUSH
56997: LD_VAR 0 3
57001: ARRAY
57002: PPUSH
57003: LD_INT 3
57005: PPUSH
57006: CALL_OW 259
57010: PUSH
57011: LD_VAR 0 2
57015: PUSH
57016: LD_VAR 0 3
57020: ARRAY
57021: PPUSH
57022: CALL_OW 432
57026: MINUS
57027: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
57028: LD_VAR 0 4
57032: PUSH
57033: LD_VAR 0 5
57037: PPUSH
57038: LD_INT 3
57040: PPUSH
57041: CALL_OW 259
57045: PUSH
57046: LD_VAR 0 5
57050: PPUSH
57051: CALL_OW 432
57055: MINUS
57056: GREATEREQUAL
57057: IFFALSE 57075
// mech := result [ i ] ;
57059: LD_ADDR_VAR 0 5
57063: PUSH
57064: LD_VAR 0 2
57068: PUSH
57069: LD_VAR 0 3
57073: ARRAY
57074: ST_TO_ADDR
// end ;
57075: GO 56984
57077: POP
57078: POP
// end ; ComLinkTo ( vehicle , mech ) ;
57079: LD_VAR 0 1
57083: PPUSH
57084: LD_VAR 0 5
57088: PPUSH
57089: CALL_OW 135
// end ;
57093: LD_VAR 0 2
57097: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
57098: LD_INT 0
57100: PPUSH
57101: PPUSH
57102: PPUSH
57103: PPUSH
57104: PPUSH
57105: PPUSH
57106: PPUSH
57107: PPUSH
57108: PPUSH
57109: PPUSH
57110: PPUSH
57111: PPUSH
57112: PPUSH
// result := [ ] ;
57113: LD_ADDR_VAR 0 7
57117: PUSH
57118: EMPTY
57119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
57120: LD_VAR 0 1
57124: PPUSH
57125: CALL_OW 266
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: IN
57140: NOT
57141: IFFALSE 57145
// exit ;
57143: GO 58779
// if name then
57145: LD_VAR 0 3
57149: IFFALSE 57165
// SetBName ( base_dep , name ) ;
57151: LD_VAR 0 1
57155: PPUSH
57156: LD_VAR 0 3
57160: PPUSH
57161: CALL_OW 500
// base := GetBase ( base_dep ) ;
57165: LD_ADDR_VAR 0 15
57169: PUSH
57170: LD_VAR 0 1
57174: PPUSH
57175: CALL_OW 274
57179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
57180: LD_ADDR_VAR 0 16
57184: PUSH
57185: LD_VAR 0 1
57189: PPUSH
57190: CALL_OW 255
57194: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
57195: LD_ADDR_VAR 0 17
57199: PUSH
57200: LD_VAR 0 1
57204: PPUSH
57205: CALL_OW 248
57209: ST_TO_ADDR
// if sources then
57210: LD_VAR 0 5
57214: IFFALSE 57261
// for i = 1 to 3 do
57216: LD_ADDR_VAR 0 8
57220: PUSH
57221: DOUBLE
57222: LD_INT 1
57224: DEC
57225: ST_TO_ADDR
57226: LD_INT 3
57228: PUSH
57229: FOR_TO
57230: IFFALSE 57259
// AddResourceType ( base , i , sources [ i ] ) ;
57232: LD_VAR 0 15
57236: PPUSH
57237: LD_VAR 0 8
57241: PPUSH
57242: LD_VAR 0 5
57246: PUSH
57247: LD_VAR 0 8
57251: ARRAY
57252: PPUSH
57253: CALL_OW 276
57257: GO 57229
57259: POP
57260: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
57261: LD_ADDR_VAR 0 18
57265: PUSH
57266: LD_VAR 0 15
57270: PPUSH
57271: LD_VAR 0 2
57275: PPUSH
57276: LD_INT 1
57278: PPUSH
57279: CALL 56522 0 3
57283: ST_TO_ADDR
// InitHc ;
57284: CALL_OW 19
// InitUc ;
57288: CALL_OW 18
// uc_side := side ;
57292: LD_ADDR_OWVAR 20
57296: PUSH
57297: LD_VAR 0 16
57301: ST_TO_ADDR
// uc_nation := nation ;
57302: LD_ADDR_OWVAR 21
57306: PUSH
57307: LD_VAR 0 17
57311: ST_TO_ADDR
// if buildings then
57312: LD_VAR 0 18
57316: IFFALSE 58638
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
57318: LD_ADDR_VAR 0 19
57322: PUSH
57323: LD_VAR 0 18
57327: PPUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 30
57333: PUSH
57334: LD_INT 29
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 30
57343: PUSH
57344: LD_INT 30
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: LIST
57355: PPUSH
57356: CALL_OW 72
57360: ST_TO_ADDR
// if tmp then
57361: LD_VAR 0 19
57365: IFFALSE 57413
// for i in tmp do
57367: LD_ADDR_VAR 0 8
57371: PUSH
57372: LD_VAR 0 19
57376: PUSH
57377: FOR_IN
57378: IFFALSE 57411
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
57380: LD_VAR 0 8
57384: PPUSH
57385: CALL_OW 250
57389: PPUSH
57390: LD_VAR 0 8
57394: PPUSH
57395: CALL_OW 251
57399: PPUSH
57400: LD_VAR 0 16
57404: PPUSH
57405: CALL_OW 441
57409: GO 57377
57411: POP
57412: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
57413: LD_VAR 0 18
57417: PPUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 30
57423: PUSH
57424: LD_INT 32
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 30
57433: PUSH
57434: LD_INT 33
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: PPUSH
57446: CALL_OW 72
57450: IFFALSE 57538
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
57452: LD_ADDR_VAR 0 8
57456: PUSH
57457: LD_VAR 0 18
57461: PPUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 30
57467: PUSH
57468: LD_INT 32
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 30
57477: PUSH
57478: LD_INT 33
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: PPUSH
57490: CALL_OW 72
57494: PUSH
57495: FOR_IN
57496: IFFALSE 57536
// begin if not GetBWeapon ( i ) then
57498: LD_VAR 0 8
57502: PPUSH
57503: CALL_OW 269
57507: NOT
57508: IFFALSE 57534
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
57510: LD_VAR 0 8
57514: PPUSH
57515: LD_VAR 0 8
57519: PPUSH
57520: LD_VAR 0 2
57524: PPUSH
57525: CALL 58784 0 2
57529: PPUSH
57530: CALL_OW 431
// end ;
57534: GO 57495
57536: POP
57537: POP
// end ; for i = 1 to personel do
57538: LD_ADDR_VAR 0 8
57542: PUSH
57543: DOUBLE
57544: LD_INT 1
57546: DEC
57547: ST_TO_ADDR
57548: LD_VAR 0 6
57552: PUSH
57553: FOR_TO
57554: IFFALSE 58618
// begin if i > 4 then
57556: LD_VAR 0 8
57560: PUSH
57561: LD_INT 4
57563: GREATER
57564: IFFALSE 57568
// break ;
57566: GO 58618
// case i of 1 :
57568: LD_VAR 0 8
57572: PUSH
57573: LD_INT 1
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57581
57579: GO 57661
57581: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
57582: LD_ADDR_VAR 0 12
57586: PUSH
57587: LD_VAR 0 18
57591: PPUSH
57592: LD_INT 22
57594: PUSH
57595: LD_VAR 0 16
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 58
57606: PUSH
57607: EMPTY
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: LD_INT 30
57615: PUSH
57616: LD_INT 32
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 30
57625: PUSH
57626: LD_INT 4
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 30
57635: PUSH
57636: LD_INT 5
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: PPUSH
57654: CALL_OW 72
57658: ST_TO_ADDR
57659: GO 57883
57661: LD_INT 2
57663: DOUBLE
57664: EQUAL
57665: IFTRUE 57669
57667: GO 57731
57669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
57670: LD_ADDR_VAR 0 12
57674: PUSH
57675: LD_VAR 0 18
57679: PPUSH
57680: LD_INT 22
57682: PUSH
57683: LD_VAR 0 16
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: LD_INT 30
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 30
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PPUSH
57724: CALL_OW 72
57728: ST_TO_ADDR
57729: GO 57883
57731: LD_INT 3
57733: DOUBLE
57734: EQUAL
57735: IFTRUE 57739
57737: GO 57801
57739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
57740: LD_ADDR_VAR 0 12
57744: PUSH
57745: LD_VAR 0 18
57749: PPUSH
57750: LD_INT 22
57752: PUSH
57753: LD_VAR 0 16
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 30
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 30
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PPUSH
57794: CALL_OW 72
57798: ST_TO_ADDR
57799: GO 57883
57801: LD_INT 4
57803: DOUBLE
57804: EQUAL
57805: IFTRUE 57809
57807: GO 57882
57809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
57810: LD_ADDR_VAR 0 12
57814: PUSH
57815: LD_VAR 0 18
57819: PPUSH
57820: LD_INT 22
57822: PUSH
57823: LD_VAR 0 16
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 30
57837: PUSH
57838: LD_INT 6
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 30
57847: PUSH
57848: LD_INT 7
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 30
57857: PUSH
57858: LD_INT 8
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PPUSH
57875: CALL_OW 72
57879: ST_TO_ADDR
57880: GO 57883
57882: POP
// if i = 1 then
57883: LD_VAR 0 8
57887: PUSH
57888: LD_INT 1
57890: EQUAL
57891: IFFALSE 58002
// begin tmp := [ ] ;
57893: LD_ADDR_VAR 0 19
57897: PUSH
57898: EMPTY
57899: ST_TO_ADDR
// for j in f do
57900: LD_ADDR_VAR 0 9
57904: PUSH
57905: LD_VAR 0 12
57909: PUSH
57910: FOR_IN
57911: IFFALSE 57984
// if GetBType ( j ) = b_bunker then
57913: LD_VAR 0 9
57917: PPUSH
57918: CALL_OW 266
57922: PUSH
57923: LD_INT 32
57925: EQUAL
57926: IFFALSE 57953
// tmp := Insert ( tmp , 1 , j ) else
57928: LD_ADDR_VAR 0 19
57932: PUSH
57933: LD_VAR 0 19
57937: PPUSH
57938: LD_INT 1
57940: PPUSH
57941: LD_VAR 0 9
57945: PPUSH
57946: CALL_OW 2
57950: ST_TO_ADDR
57951: GO 57982
// tmp := Insert ( tmp , tmp + 1 , j ) ;
57953: LD_ADDR_VAR 0 19
57957: PUSH
57958: LD_VAR 0 19
57962: PPUSH
57963: LD_VAR 0 19
57967: PUSH
57968: LD_INT 1
57970: PLUS
57971: PPUSH
57972: LD_VAR 0 9
57976: PPUSH
57977: CALL_OW 2
57981: ST_TO_ADDR
57982: GO 57910
57984: POP
57985: POP
// if tmp then
57986: LD_VAR 0 19
57990: IFFALSE 58002
// f := tmp ;
57992: LD_ADDR_VAR 0 12
57996: PUSH
57997: LD_VAR 0 19
58001: ST_TO_ADDR
// end ; x := personel [ i ] ;
58002: LD_ADDR_VAR 0 13
58006: PUSH
58007: LD_VAR 0 6
58011: PUSH
58012: LD_VAR 0 8
58016: ARRAY
58017: ST_TO_ADDR
// if x = - 1 then
58018: LD_VAR 0 13
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: EQUAL
58027: IFFALSE 58236
// begin for j in f do
58029: LD_ADDR_VAR 0 9
58033: PUSH
58034: LD_VAR 0 12
58038: PUSH
58039: FOR_IN
58040: IFFALSE 58232
// repeat InitHc ;
58042: CALL_OW 19
// if GetBType ( j ) = b_barracks then
58046: LD_VAR 0 9
58050: PPUSH
58051: CALL_OW 266
58055: PUSH
58056: LD_INT 5
58058: EQUAL
58059: IFFALSE 58129
// begin if UnitsInside ( j ) < 3 then
58061: LD_VAR 0 9
58065: PPUSH
58066: CALL_OW 313
58070: PUSH
58071: LD_INT 3
58073: LESS
58074: IFFALSE 58110
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58076: LD_INT 0
58078: PPUSH
58079: LD_INT 5
58081: PUSH
58082: LD_INT 8
58084: PUSH
58085: LD_INT 9
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: PUSH
58093: LD_VAR 0 17
58097: ARRAY
58098: PPUSH
58099: LD_VAR 0 4
58103: PPUSH
58104: CALL_OW 380
58108: GO 58127
// PrepareHuman ( false , i , skill ) ;
58110: LD_INT 0
58112: PPUSH
58113: LD_VAR 0 8
58117: PPUSH
58118: LD_VAR 0 4
58122: PPUSH
58123: CALL_OW 380
// end else
58127: GO 58146
// PrepareHuman ( false , i , skill ) ;
58129: LD_INT 0
58131: PPUSH
58132: LD_VAR 0 8
58136: PPUSH
58137: LD_VAR 0 4
58141: PPUSH
58142: CALL_OW 380
// un := CreateHuman ;
58146: LD_ADDR_VAR 0 14
58150: PUSH
58151: CALL_OW 44
58155: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58156: LD_ADDR_VAR 0 7
58160: PUSH
58161: LD_VAR 0 7
58165: PPUSH
58166: LD_INT 1
58168: PPUSH
58169: LD_VAR 0 14
58173: PPUSH
58174: CALL_OW 2
58178: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
58179: LD_VAR 0 14
58183: PPUSH
58184: LD_VAR 0 9
58188: PPUSH
58189: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
58193: LD_VAR 0 9
58197: PPUSH
58198: CALL_OW 313
58202: PUSH
58203: LD_INT 6
58205: EQUAL
58206: PUSH
58207: LD_VAR 0 9
58211: PPUSH
58212: CALL_OW 266
58216: PUSH
58217: LD_INT 32
58219: PUSH
58220: LD_INT 31
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: IN
58227: OR
58228: IFFALSE 58042
58230: GO 58039
58232: POP
58233: POP
// end else
58234: GO 58616
// for j = 1 to x do
58236: LD_ADDR_VAR 0 9
58240: PUSH
58241: DOUBLE
58242: LD_INT 1
58244: DEC
58245: ST_TO_ADDR
58246: LD_VAR 0 13
58250: PUSH
58251: FOR_TO
58252: IFFALSE 58614
// begin InitHc ;
58254: CALL_OW 19
// if not f then
58258: LD_VAR 0 12
58262: NOT
58263: IFFALSE 58352
// begin PrepareHuman ( false , i , skill ) ;
58265: LD_INT 0
58267: PPUSH
58268: LD_VAR 0 8
58272: PPUSH
58273: LD_VAR 0 4
58277: PPUSH
58278: CALL_OW 380
// un := CreateHuman ;
58282: LD_ADDR_VAR 0 14
58286: PUSH
58287: CALL_OW 44
58291: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58292: LD_ADDR_VAR 0 7
58296: PUSH
58297: LD_VAR 0 7
58301: PPUSH
58302: LD_INT 1
58304: PPUSH
58305: LD_VAR 0 14
58309: PPUSH
58310: CALL_OW 2
58314: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58315: LD_VAR 0 14
58319: PPUSH
58320: LD_VAR 0 1
58324: PPUSH
58325: CALL_OW 250
58329: PPUSH
58330: LD_VAR 0 1
58334: PPUSH
58335: CALL_OW 251
58339: PPUSH
58340: LD_INT 10
58342: PPUSH
58343: LD_INT 0
58345: PPUSH
58346: CALL_OW 50
// continue ;
58350: GO 58251
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
58352: LD_VAR 0 12
58356: PUSH
58357: LD_INT 1
58359: ARRAY
58360: PPUSH
58361: CALL_OW 313
58365: PUSH
58366: LD_VAR 0 12
58370: PUSH
58371: LD_INT 1
58373: ARRAY
58374: PPUSH
58375: CALL_OW 266
58379: PUSH
58380: LD_INT 32
58382: PUSH
58383: LD_INT 31
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: IN
58390: AND
58391: PUSH
58392: LD_VAR 0 12
58396: PUSH
58397: LD_INT 1
58399: ARRAY
58400: PPUSH
58401: CALL_OW 313
58405: PUSH
58406: LD_INT 6
58408: EQUAL
58409: OR
58410: IFFALSE 58430
// f := Delete ( f , 1 ) ;
58412: LD_ADDR_VAR 0 12
58416: PUSH
58417: LD_VAR 0 12
58421: PPUSH
58422: LD_INT 1
58424: PPUSH
58425: CALL_OW 3
58429: ST_TO_ADDR
// if not f then
58430: LD_VAR 0 12
58434: NOT
58435: IFFALSE 58453
// begin x := x + 2 ;
58437: LD_ADDR_VAR 0 13
58441: PUSH
58442: LD_VAR 0 13
58446: PUSH
58447: LD_INT 2
58449: PLUS
58450: ST_TO_ADDR
// continue ;
58451: GO 58251
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
58453: LD_VAR 0 12
58457: PUSH
58458: LD_INT 1
58460: ARRAY
58461: PPUSH
58462: CALL_OW 266
58466: PUSH
58467: LD_INT 5
58469: EQUAL
58470: IFFALSE 58544
// begin if UnitsInside ( f [ 1 ] ) < 3 then
58472: LD_VAR 0 12
58476: PUSH
58477: LD_INT 1
58479: ARRAY
58480: PPUSH
58481: CALL_OW 313
58485: PUSH
58486: LD_INT 3
58488: LESS
58489: IFFALSE 58525
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58491: LD_INT 0
58493: PPUSH
58494: LD_INT 5
58496: PUSH
58497: LD_INT 8
58499: PUSH
58500: LD_INT 9
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: PUSH
58508: LD_VAR 0 17
58512: ARRAY
58513: PPUSH
58514: LD_VAR 0 4
58518: PPUSH
58519: CALL_OW 380
58523: GO 58542
// PrepareHuman ( false , i , skill ) ;
58525: LD_INT 0
58527: PPUSH
58528: LD_VAR 0 8
58532: PPUSH
58533: LD_VAR 0 4
58537: PPUSH
58538: CALL_OW 380
// end else
58542: GO 58561
// PrepareHuman ( false , i , skill ) ;
58544: LD_INT 0
58546: PPUSH
58547: LD_VAR 0 8
58551: PPUSH
58552: LD_VAR 0 4
58556: PPUSH
58557: CALL_OW 380
// un := CreateHuman ;
58561: LD_ADDR_VAR 0 14
58565: PUSH
58566: CALL_OW 44
58570: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58571: LD_ADDR_VAR 0 7
58575: PUSH
58576: LD_VAR 0 7
58580: PPUSH
58581: LD_INT 1
58583: PPUSH
58584: LD_VAR 0 14
58588: PPUSH
58589: CALL_OW 2
58593: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
58594: LD_VAR 0 14
58598: PPUSH
58599: LD_VAR 0 12
58603: PUSH
58604: LD_INT 1
58606: ARRAY
58607: PPUSH
58608: CALL_OW 52
// end ;
58612: GO 58251
58614: POP
58615: POP
// end ;
58616: GO 57553
58618: POP
58619: POP
// result := result ^ buildings ;
58620: LD_ADDR_VAR 0 7
58624: PUSH
58625: LD_VAR 0 7
58629: PUSH
58630: LD_VAR 0 18
58634: ADD
58635: ST_TO_ADDR
// end else
58636: GO 58779
// begin for i = 1 to personel do
58638: LD_ADDR_VAR 0 8
58642: PUSH
58643: DOUBLE
58644: LD_INT 1
58646: DEC
58647: ST_TO_ADDR
58648: LD_VAR 0 6
58652: PUSH
58653: FOR_TO
58654: IFFALSE 58777
// begin if i > 4 then
58656: LD_VAR 0 8
58660: PUSH
58661: LD_INT 4
58663: GREATER
58664: IFFALSE 58668
// break ;
58666: GO 58777
// x := personel [ i ] ;
58668: LD_ADDR_VAR 0 13
58672: PUSH
58673: LD_VAR 0 6
58677: PUSH
58678: LD_VAR 0 8
58682: ARRAY
58683: ST_TO_ADDR
// if x = - 1 then
58684: LD_VAR 0 13
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: EQUAL
58693: IFFALSE 58697
// continue ;
58695: GO 58653
// PrepareHuman ( false , i , skill ) ;
58697: LD_INT 0
58699: PPUSH
58700: LD_VAR 0 8
58704: PPUSH
58705: LD_VAR 0 4
58709: PPUSH
58710: CALL_OW 380
// un := CreateHuman ;
58714: LD_ADDR_VAR 0 14
58718: PUSH
58719: CALL_OW 44
58723: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58724: LD_VAR 0 14
58728: PPUSH
58729: LD_VAR 0 1
58733: PPUSH
58734: CALL_OW 250
58738: PPUSH
58739: LD_VAR 0 1
58743: PPUSH
58744: CALL_OW 251
58748: PPUSH
58749: LD_INT 10
58751: PPUSH
58752: LD_INT 0
58754: PPUSH
58755: CALL_OW 50
// result := result ^ un ;
58759: LD_ADDR_VAR 0 7
58763: PUSH
58764: LD_VAR 0 7
58768: PUSH
58769: LD_VAR 0 14
58773: ADD
58774: ST_TO_ADDR
// end ;
58775: GO 58653
58777: POP
58778: POP
// end ; end ;
58779: LD_VAR 0 7
58783: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
58784: LD_INT 0
58786: PPUSH
58787: PPUSH
58788: PPUSH
58789: PPUSH
58790: PPUSH
58791: PPUSH
58792: PPUSH
58793: PPUSH
58794: PPUSH
58795: PPUSH
58796: PPUSH
58797: PPUSH
58798: PPUSH
58799: PPUSH
58800: PPUSH
58801: PPUSH
// result := false ;
58802: LD_ADDR_VAR 0 3
58806: PUSH
58807: LD_INT 0
58809: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
58810: LD_VAR 0 1
58814: NOT
58815: PUSH
58816: LD_VAR 0 1
58820: PPUSH
58821: CALL_OW 266
58825: PUSH
58826: LD_INT 32
58828: PUSH
58829: LD_INT 33
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: IN
58836: NOT
58837: OR
58838: IFFALSE 58842
// exit ;
58840: GO 59951
// nat := GetNation ( tower ) ;
58842: LD_ADDR_VAR 0 12
58846: PUSH
58847: LD_VAR 0 1
58851: PPUSH
58852: CALL_OW 248
58856: ST_TO_ADDR
// side := GetSide ( tower ) ;
58857: LD_ADDR_VAR 0 16
58861: PUSH
58862: LD_VAR 0 1
58866: PPUSH
58867: CALL_OW 255
58871: ST_TO_ADDR
// x := GetX ( tower ) ;
58872: LD_ADDR_VAR 0 10
58876: PUSH
58877: LD_VAR 0 1
58881: PPUSH
58882: CALL_OW 250
58886: ST_TO_ADDR
// y := GetY ( tower ) ;
58887: LD_ADDR_VAR 0 11
58891: PUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: CALL_OW 251
58901: ST_TO_ADDR
// if not x or not y then
58902: LD_VAR 0 10
58906: NOT
58907: PUSH
58908: LD_VAR 0 11
58912: NOT
58913: OR
58914: IFFALSE 58918
// exit ;
58916: GO 59951
// weapon := 0 ;
58918: LD_ADDR_VAR 0 18
58922: PUSH
58923: LD_INT 0
58925: ST_TO_ADDR
// fac_list := [ ] ;
58926: LD_ADDR_VAR 0 17
58930: PUSH
58931: EMPTY
58932: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
58933: LD_ADDR_VAR 0 6
58937: PUSH
58938: LD_VAR 0 1
58942: PPUSH
58943: CALL_OW 274
58947: PPUSH
58948: LD_VAR 0 2
58952: PPUSH
58953: LD_INT 0
58955: PPUSH
58956: CALL 56522 0 3
58960: PPUSH
58961: LD_INT 30
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PPUSH
58971: CALL_OW 72
58975: ST_TO_ADDR
// if not factories then
58976: LD_VAR 0 6
58980: NOT
58981: IFFALSE 58985
// exit ;
58983: GO 59951
// for i in factories do
58985: LD_ADDR_VAR 0 8
58989: PUSH
58990: LD_VAR 0 6
58994: PUSH
58995: FOR_IN
58996: IFFALSE 59021
// fac_list := fac_list union AvailableWeaponList ( i ) ;
58998: LD_ADDR_VAR 0 17
59002: PUSH
59003: LD_VAR 0 17
59007: PUSH
59008: LD_VAR 0 8
59012: PPUSH
59013: CALL_OW 478
59017: UNION
59018: ST_TO_ADDR
59019: GO 58995
59021: POP
59022: POP
// if not fac_list then
59023: LD_VAR 0 17
59027: NOT
59028: IFFALSE 59032
// exit ;
59030: GO 59951
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
59032: LD_ADDR_VAR 0 5
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: LD_INT 5
59042: PUSH
59043: LD_INT 9
59045: PUSH
59046: LD_INT 10
59048: PUSH
59049: LD_INT 6
59051: PUSH
59052: LD_INT 7
59054: PUSH
59055: LD_INT 11
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 27
59069: PUSH
59070: LD_INT 28
59072: PUSH
59073: LD_INT 26
59075: PUSH
59076: LD_INT 30
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 43
59087: PUSH
59088: LD_INT 44
59090: PUSH
59091: LD_INT 46
59093: PUSH
59094: LD_INT 45
59096: PUSH
59097: LD_INT 47
59099: PUSH
59100: LD_INT 49
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: PUSH
59116: LD_VAR 0 12
59120: ARRAY
59121: ST_TO_ADDR
// list := list isect fac_list ;
59122: LD_ADDR_VAR 0 5
59126: PUSH
59127: LD_VAR 0 5
59131: PUSH
59132: LD_VAR 0 17
59136: ISECT
59137: ST_TO_ADDR
// if not list then
59138: LD_VAR 0 5
59142: NOT
59143: IFFALSE 59147
// exit ;
59145: GO 59951
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
59147: LD_VAR 0 12
59151: PUSH
59152: LD_INT 3
59154: EQUAL
59155: PUSH
59156: LD_INT 49
59158: PUSH
59159: LD_VAR 0 5
59163: IN
59164: AND
59165: PUSH
59166: LD_INT 31
59168: PPUSH
59169: LD_VAR 0 16
59173: PPUSH
59174: CALL_OW 321
59178: PUSH
59179: LD_INT 2
59181: EQUAL
59182: AND
59183: IFFALSE 59243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
59185: LD_INT 22
59187: PUSH
59188: LD_VAR 0 16
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 35
59199: PUSH
59200: LD_INT 49
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 91
59209: PUSH
59210: LD_VAR 0 1
59214: PUSH
59215: LD_INT 10
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: PPUSH
59228: CALL_OW 69
59232: NOT
59233: IFFALSE 59243
// weapon := ru_time_lapser ;
59235: LD_ADDR_VAR 0 18
59239: PUSH
59240: LD_INT 49
59242: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
59243: LD_VAR 0 12
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 2
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: IN
59258: PUSH
59259: LD_INT 11
59261: PUSH
59262: LD_VAR 0 5
59266: IN
59267: PUSH
59268: LD_INT 30
59270: PUSH
59271: LD_VAR 0 5
59275: IN
59276: OR
59277: AND
59278: PUSH
59279: LD_INT 6
59281: PPUSH
59282: LD_VAR 0 16
59286: PPUSH
59287: CALL_OW 321
59291: PUSH
59292: LD_INT 2
59294: EQUAL
59295: AND
59296: IFFALSE 59461
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
59298: LD_INT 22
59300: PUSH
59301: LD_VAR 0 16
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 35
59315: PUSH
59316: LD_INT 11
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 35
59325: PUSH
59326: LD_INT 30
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 91
59340: PUSH
59341: LD_VAR 0 1
59345: PUSH
59346: LD_INT 18
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: PPUSH
59359: CALL_OW 69
59363: NOT
59364: PUSH
59365: LD_INT 22
59367: PUSH
59368: LD_VAR 0 16
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 30
59382: PUSH
59383: LD_INT 32
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 30
59392: PUSH
59393: LD_INT 33
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 91
59407: PUSH
59408: LD_VAR 0 1
59412: PUSH
59413: LD_INT 12
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: PPUSH
59429: CALL_OW 69
59433: PUSH
59434: LD_INT 2
59436: GREATER
59437: AND
59438: IFFALSE 59461
// weapon := [ us_radar , ar_radar ] [ nat ] ;
59440: LD_ADDR_VAR 0 18
59444: PUSH
59445: LD_INT 11
59447: PUSH
59448: LD_INT 30
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_VAR 0 12
59459: ARRAY
59460: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
59461: LD_VAR 0 18
59465: NOT
59466: PUSH
59467: LD_INT 40
59469: PPUSH
59470: LD_VAR 0 16
59474: PPUSH
59475: CALL_OW 321
59479: PUSH
59480: LD_INT 2
59482: EQUAL
59483: AND
59484: PUSH
59485: LD_INT 7
59487: PUSH
59488: LD_VAR 0 5
59492: IN
59493: PUSH
59494: LD_INT 28
59496: PUSH
59497: LD_VAR 0 5
59501: IN
59502: OR
59503: PUSH
59504: LD_INT 45
59506: PUSH
59507: LD_VAR 0 5
59511: IN
59512: OR
59513: AND
59514: IFFALSE 59768
// begin hex := GetHexInfo ( x , y ) ;
59516: LD_ADDR_VAR 0 4
59520: PUSH
59521: LD_VAR 0 10
59525: PPUSH
59526: LD_VAR 0 11
59530: PPUSH
59531: CALL_OW 546
59535: ST_TO_ADDR
// if hex [ 1 ] then
59536: LD_VAR 0 4
59540: PUSH
59541: LD_INT 1
59543: ARRAY
59544: IFFALSE 59548
// exit ;
59546: GO 59951
// height := hex [ 2 ] ;
59548: LD_ADDR_VAR 0 15
59552: PUSH
59553: LD_VAR 0 4
59557: PUSH
59558: LD_INT 2
59560: ARRAY
59561: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
59562: LD_ADDR_VAR 0 14
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// for i in tmp do
59585: LD_ADDR_VAR 0 8
59589: PUSH
59590: LD_VAR 0 14
59594: PUSH
59595: FOR_IN
59596: IFFALSE 59766
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
59598: LD_ADDR_VAR 0 9
59602: PUSH
59603: LD_VAR 0 10
59607: PPUSH
59608: LD_VAR 0 8
59612: PPUSH
59613: LD_INT 5
59615: PPUSH
59616: CALL_OW 272
59620: PUSH
59621: LD_VAR 0 11
59625: PPUSH
59626: LD_VAR 0 8
59630: PPUSH
59631: LD_INT 5
59633: PPUSH
59634: CALL_OW 273
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
59643: LD_VAR 0 9
59647: PUSH
59648: LD_INT 1
59650: ARRAY
59651: PPUSH
59652: LD_VAR 0 9
59656: PUSH
59657: LD_INT 2
59659: ARRAY
59660: PPUSH
59661: CALL_OW 488
59665: IFFALSE 59764
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
59667: LD_ADDR_VAR 0 4
59671: PUSH
59672: LD_VAR 0 9
59676: PUSH
59677: LD_INT 1
59679: ARRAY
59680: PPUSH
59681: LD_VAR 0 9
59685: PUSH
59686: LD_INT 2
59688: ARRAY
59689: PPUSH
59690: CALL_OW 546
59694: ST_TO_ADDR
// if hex [ 1 ] then
59695: LD_VAR 0 4
59699: PUSH
59700: LD_INT 1
59702: ARRAY
59703: IFFALSE 59707
// continue ;
59705: GO 59595
// h := hex [ 2 ] ;
59707: LD_ADDR_VAR 0 13
59711: PUSH
59712: LD_VAR 0 4
59716: PUSH
59717: LD_INT 2
59719: ARRAY
59720: ST_TO_ADDR
// if h + 7 < height then
59721: LD_VAR 0 13
59725: PUSH
59726: LD_INT 7
59728: PLUS
59729: PUSH
59730: LD_VAR 0 15
59734: LESS
59735: IFFALSE 59764
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
59737: LD_ADDR_VAR 0 18
59741: PUSH
59742: LD_INT 7
59744: PUSH
59745: LD_INT 28
59747: PUSH
59748: LD_INT 45
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: PUSH
59756: LD_VAR 0 12
59760: ARRAY
59761: ST_TO_ADDR
// break ;
59762: GO 59766
// end ; end ; end ;
59764: GO 59595
59766: POP
59767: POP
// end ; if not weapon then
59768: LD_VAR 0 18
59772: NOT
59773: IFFALSE 59833
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
59775: LD_ADDR_VAR 0 5
59779: PUSH
59780: LD_VAR 0 5
59784: PUSH
59785: LD_INT 11
59787: PUSH
59788: LD_INT 30
59790: PUSH
59791: LD_INT 49
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: DIFF
59799: ST_TO_ADDR
// if not list then
59800: LD_VAR 0 5
59804: NOT
59805: IFFALSE 59809
// exit ;
59807: GO 59951
// weapon := list [ rand ( 1 , list ) ] ;
59809: LD_ADDR_VAR 0 18
59813: PUSH
59814: LD_VAR 0 5
59818: PUSH
59819: LD_INT 1
59821: PPUSH
59822: LD_VAR 0 5
59826: PPUSH
59827: CALL_OW 12
59831: ARRAY
59832: ST_TO_ADDR
// end ; if weapon then
59833: LD_VAR 0 18
59837: IFFALSE 59951
// begin tmp := CostOfWeapon ( weapon ) ;
59839: LD_ADDR_VAR 0 14
59843: PUSH
59844: LD_VAR 0 18
59848: PPUSH
59849: CALL_OW 451
59853: ST_TO_ADDR
// j := GetBase ( tower ) ;
59854: LD_ADDR_VAR 0 9
59858: PUSH
59859: LD_VAR 0 1
59863: PPUSH
59864: CALL_OW 274
59868: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
59869: LD_VAR 0 9
59873: PPUSH
59874: LD_INT 1
59876: PPUSH
59877: CALL_OW 275
59881: PUSH
59882: LD_VAR 0 14
59886: PUSH
59887: LD_INT 1
59889: ARRAY
59890: GREATEREQUAL
59891: PUSH
59892: LD_VAR 0 9
59896: PPUSH
59897: LD_INT 2
59899: PPUSH
59900: CALL_OW 275
59904: PUSH
59905: LD_VAR 0 14
59909: PUSH
59910: LD_INT 2
59912: ARRAY
59913: GREATEREQUAL
59914: AND
59915: PUSH
59916: LD_VAR 0 9
59920: PPUSH
59921: LD_INT 3
59923: PPUSH
59924: CALL_OW 275
59928: PUSH
59929: LD_VAR 0 14
59933: PUSH
59934: LD_INT 3
59936: ARRAY
59937: GREATEREQUAL
59938: AND
59939: IFFALSE 59951
// result := weapon ;
59941: LD_ADDR_VAR 0 3
59945: PUSH
59946: LD_VAR 0 18
59950: ST_TO_ADDR
// end ; end ;
59951: LD_VAR 0 3
59955: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
59956: LD_INT 0
59958: PPUSH
59959: PPUSH
// result := true ;
59960: LD_ADDR_VAR 0 3
59964: PUSH
59965: LD_INT 1
59967: ST_TO_ADDR
// if array1 = array2 then
59968: LD_VAR 0 1
59972: PUSH
59973: LD_VAR 0 2
59977: EQUAL
59978: IFFALSE 60038
// begin for i = 1 to array1 do
59980: LD_ADDR_VAR 0 4
59984: PUSH
59985: DOUBLE
59986: LD_INT 1
59988: DEC
59989: ST_TO_ADDR
59990: LD_VAR 0 1
59994: PUSH
59995: FOR_TO
59996: IFFALSE 60034
// if array1 [ i ] <> array2 [ i ] then
59998: LD_VAR 0 1
60002: PUSH
60003: LD_VAR 0 4
60007: ARRAY
60008: PUSH
60009: LD_VAR 0 2
60013: PUSH
60014: LD_VAR 0 4
60018: ARRAY
60019: NONEQUAL
60020: IFFALSE 60032
// begin result := false ;
60022: LD_ADDR_VAR 0 3
60026: PUSH
60027: LD_INT 0
60029: ST_TO_ADDR
// break ;
60030: GO 60034
// end ;
60032: GO 59995
60034: POP
60035: POP
// end else
60036: GO 60046
// result := false ;
60038: LD_ADDR_VAR 0 3
60042: PUSH
60043: LD_INT 0
60045: ST_TO_ADDR
// end ;
60046: LD_VAR 0 3
60050: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
60051: LD_INT 0
60053: PPUSH
60054: PPUSH
// if not array1 or not array2 then
60055: LD_VAR 0 1
60059: NOT
60060: PUSH
60061: LD_VAR 0 2
60065: NOT
60066: OR
60067: IFFALSE 60071
// exit ;
60069: GO 60135
// result := true ;
60071: LD_ADDR_VAR 0 3
60075: PUSH
60076: LD_INT 1
60078: ST_TO_ADDR
// for i = 1 to array1 do
60079: LD_ADDR_VAR 0 4
60083: PUSH
60084: DOUBLE
60085: LD_INT 1
60087: DEC
60088: ST_TO_ADDR
60089: LD_VAR 0 1
60093: PUSH
60094: FOR_TO
60095: IFFALSE 60133
// if array1 [ i ] <> array2 [ i ] then
60097: LD_VAR 0 1
60101: PUSH
60102: LD_VAR 0 4
60106: ARRAY
60107: PUSH
60108: LD_VAR 0 2
60112: PUSH
60113: LD_VAR 0 4
60117: ARRAY
60118: NONEQUAL
60119: IFFALSE 60131
// begin result := false ;
60121: LD_ADDR_VAR 0 3
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
// break ;
60129: GO 60133
// end ;
60131: GO 60094
60133: POP
60134: POP
// end ;
60135: LD_VAR 0 3
60139: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
60140: LD_INT 0
60142: PPUSH
60143: PPUSH
60144: PPUSH
// pom := GetBase ( fac ) ;
60145: LD_ADDR_VAR 0 5
60149: PUSH
60150: LD_VAR 0 1
60154: PPUSH
60155: CALL_OW 274
60159: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
60160: LD_ADDR_VAR 0 4
60164: PUSH
60165: LD_VAR 0 2
60169: PUSH
60170: LD_INT 1
60172: ARRAY
60173: PPUSH
60174: LD_VAR 0 2
60178: PUSH
60179: LD_INT 2
60181: ARRAY
60182: PPUSH
60183: LD_VAR 0 2
60187: PUSH
60188: LD_INT 3
60190: ARRAY
60191: PPUSH
60192: LD_VAR 0 2
60196: PUSH
60197: LD_INT 4
60199: ARRAY
60200: PPUSH
60201: CALL_OW 449
60205: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60206: LD_ADDR_VAR 0 3
60210: PUSH
60211: LD_VAR 0 5
60215: PPUSH
60216: LD_INT 1
60218: PPUSH
60219: CALL_OW 275
60223: PUSH
60224: LD_VAR 0 4
60228: PUSH
60229: LD_INT 1
60231: ARRAY
60232: GREATEREQUAL
60233: PUSH
60234: LD_VAR 0 5
60238: PPUSH
60239: LD_INT 2
60241: PPUSH
60242: CALL_OW 275
60246: PUSH
60247: LD_VAR 0 4
60251: PUSH
60252: LD_INT 2
60254: ARRAY
60255: GREATEREQUAL
60256: AND
60257: PUSH
60258: LD_VAR 0 5
60262: PPUSH
60263: LD_INT 3
60265: PPUSH
60266: CALL_OW 275
60270: PUSH
60271: LD_VAR 0 4
60275: PUSH
60276: LD_INT 3
60278: ARRAY
60279: GREATEREQUAL
60280: AND
60281: ST_TO_ADDR
// end ;
60282: LD_VAR 0 3
60286: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
60287: LD_INT 0
60289: PPUSH
60290: PPUSH
60291: PPUSH
60292: PPUSH
// pom := GetBase ( building ) ;
60293: LD_ADDR_VAR 0 3
60297: PUSH
60298: LD_VAR 0 1
60302: PPUSH
60303: CALL_OW 274
60307: ST_TO_ADDR
// if not pom then
60308: LD_VAR 0 3
60312: NOT
60313: IFFALSE 60317
// exit ;
60315: GO 60487
// btype := GetBType ( building ) ;
60317: LD_ADDR_VAR 0 5
60321: PUSH
60322: LD_VAR 0 1
60326: PPUSH
60327: CALL_OW 266
60331: ST_TO_ADDR
// if btype = b_armoury then
60332: LD_VAR 0 5
60336: PUSH
60337: LD_INT 4
60339: EQUAL
60340: IFFALSE 60350
// btype := b_barracks ;
60342: LD_ADDR_VAR 0 5
60346: PUSH
60347: LD_INT 5
60349: ST_TO_ADDR
// if btype = b_depot then
60350: LD_VAR 0 5
60354: PUSH
60355: LD_INT 0
60357: EQUAL
60358: IFFALSE 60368
// btype := b_warehouse ;
60360: LD_ADDR_VAR 0 5
60364: PUSH
60365: LD_INT 1
60367: ST_TO_ADDR
// if btype = b_workshop then
60368: LD_VAR 0 5
60372: PUSH
60373: LD_INT 2
60375: EQUAL
60376: IFFALSE 60386
// btype := b_factory ;
60378: LD_ADDR_VAR 0 5
60382: PUSH
60383: LD_INT 3
60385: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60386: LD_ADDR_VAR 0 4
60390: PUSH
60391: LD_VAR 0 5
60395: PPUSH
60396: LD_VAR 0 1
60400: PPUSH
60401: CALL_OW 248
60405: PPUSH
60406: CALL_OW 450
60410: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60411: LD_ADDR_VAR 0 2
60415: PUSH
60416: LD_VAR 0 3
60420: PPUSH
60421: LD_INT 1
60423: PPUSH
60424: CALL_OW 275
60428: PUSH
60429: LD_VAR 0 4
60433: PUSH
60434: LD_INT 1
60436: ARRAY
60437: GREATEREQUAL
60438: PUSH
60439: LD_VAR 0 3
60443: PPUSH
60444: LD_INT 2
60446: PPUSH
60447: CALL_OW 275
60451: PUSH
60452: LD_VAR 0 4
60456: PUSH
60457: LD_INT 2
60459: ARRAY
60460: GREATEREQUAL
60461: AND
60462: PUSH
60463: LD_VAR 0 3
60467: PPUSH
60468: LD_INT 3
60470: PPUSH
60471: CALL_OW 275
60475: PUSH
60476: LD_VAR 0 4
60480: PUSH
60481: LD_INT 3
60483: ARRAY
60484: GREATEREQUAL
60485: AND
60486: ST_TO_ADDR
// end ;
60487: LD_VAR 0 2
60491: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
60492: LD_INT 0
60494: PPUSH
60495: PPUSH
60496: PPUSH
// pom := GetBase ( building ) ;
60497: LD_ADDR_VAR 0 4
60501: PUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 274
60511: ST_TO_ADDR
// if not pom then
60512: LD_VAR 0 4
60516: NOT
60517: IFFALSE 60521
// exit ;
60519: GO 60622
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60521: LD_ADDR_VAR 0 5
60525: PUSH
60526: LD_VAR 0 2
60530: PPUSH
60531: LD_VAR 0 1
60535: PPUSH
60536: CALL_OW 248
60540: PPUSH
60541: CALL_OW 450
60545: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60546: LD_ADDR_VAR 0 3
60550: PUSH
60551: LD_VAR 0 4
60555: PPUSH
60556: LD_INT 1
60558: PPUSH
60559: CALL_OW 275
60563: PUSH
60564: LD_VAR 0 5
60568: PUSH
60569: LD_INT 1
60571: ARRAY
60572: GREATEREQUAL
60573: PUSH
60574: LD_VAR 0 4
60578: PPUSH
60579: LD_INT 2
60581: PPUSH
60582: CALL_OW 275
60586: PUSH
60587: LD_VAR 0 5
60591: PUSH
60592: LD_INT 2
60594: ARRAY
60595: GREATEREQUAL
60596: AND
60597: PUSH
60598: LD_VAR 0 4
60602: PPUSH
60603: LD_INT 3
60605: PPUSH
60606: CALL_OW 275
60610: PUSH
60611: LD_VAR 0 5
60615: PUSH
60616: LD_INT 3
60618: ARRAY
60619: GREATEREQUAL
60620: AND
60621: ST_TO_ADDR
// end ;
60622: LD_VAR 0 3
60626: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
60627: LD_INT 0
60629: PPUSH
60630: PPUSH
60631: PPUSH
60632: PPUSH
60633: PPUSH
60634: PPUSH
60635: PPUSH
60636: PPUSH
60637: PPUSH
60638: PPUSH
60639: PPUSH
// result := false ;
60640: LD_ADDR_VAR 0 8
60644: PUSH
60645: LD_INT 0
60647: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
60648: LD_VAR 0 5
60652: NOT
60653: PUSH
60654: LD_VAR 0 1
60658: NOT
60659: OR
60660: PUSH
60661: LD_VAR 0 2
60665: NOT
60666: OR
60667: PUSH
60668: LD_VAR 0 3
60672: NOT
60673: OR
60674: IFFALSE 60678
// exit ;
60676: GO 61492
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
60678: LD_ADDR_VAR 0 14
60682: PUSH
60683: LD_VAR 0 1
60687: PPUSH
60688: LD_VAR 0 2
60692: PPUSH
60693: LD_VAR 0 3
60697: PPUSH
60698: LD_VAR 0 4
60702: PPUSH
60703: LD_VAR 0 5
60707: PUSH
60708: LD_INT 1
60710: ARRAY
60711: PPUSH
60712: CALL_OW 248
60716: PPUSH
60717: LD_INT 0
60719: PPUSH
60720: CALL 62729 0 6
60724: ST_TO_ADDR
// if not hexes then
60725: LD_VAR 0 14
60729: NOT
60730: IFFALSE 60734
// exit ;
60732: GO 61492
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60734: LD_ADDR_VAR 0 17
60738: PUSH
60739: LD_VAR 0 5
60743: PPUSH
60744: LD_INT 22
60746: PUSH
60747: LD_VAR 0 13
60751: PPUSH
60752: CALL_OW 255
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: LD_INT 30
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 30
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: LIST
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PPUSH
60793: CALL_OW 72
60797: ST_TO_ADDR
// for i = 1 to hexes do
60798: LD_ADDR_VAR 0 9
60802: PUSH
60803: DOUBLE
60804: LD_INT 1
60806: DEC
60807: ST_TO_ADDR
60808: LD_VAR 0 14
60812: PUSH
60813: FOR_TO
60814: IFFALSE 61490
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60816: LD_ADDR_VAR 0 13
60820: PUSH
60821: LD_VAR 0 14
60825: PUSH
60826: LD_VAR 0 9
60830: ARRAY
60831: PUSH
60832: LD_INT 1
60834: ARRAY
60835: PPUSH
60836: LD_VAR 0 14
60840: PUSH
60841: LD_VAR 0 9
60845: ARRAY
60846: PUSH
60847: LD_INT 2
60849: ARRAY
60850: PPUSH
60851: CALL_OW 428
60855: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
60856: LD_VAR 0 14
60860: PUSH
60861: LD_VAR 0 9
60865: ARRAY
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PPUSH
60871: LD_VAR 0 14
60875: PUSH
60876: LD_VAR 0 9
60880: ARRAY
60881: PUSH
60882: LD_INT 2
60884: ARRAY
60885: PPUSH
60886: CALL_OW 351
60890: PUSH
60891: LD_VAR 0 14
60895: PUSH
60896: LD_VAR 0 9
60900: ARRAY
60901: PUSH
60902: LD_INT 1
60904: ARRAY
60905: PPUSH
60906: LD_VAR 0 14
60910: PUSH
60911: LD_VAR 0 9
60915: ARRAY
60916: PUSH
60917: LD_INT 2
60919: ARRAY
60920: PPUSH
60921: CALL_OW 488
60925: NOT
60926: OR
60927: PUSH
60928: LD_VAR 0 13
60932: PPUSH
60933: CALL_OW 247
60937: PUSH
60938: LD_INT 3
60940: EQUAL
60941: OR
60942: IFFALSE 60948
// exit ;
60944: POP
60945: POP
60946: GO 61492
// if not tmp then
60948: LD_VAR 0 13
60952: NOT
60953: IFFALSE 60957
// continue ;
60955: GO 60813
// result := true ;
60957: LD_ADDR_VAR 0 8
60961: PUSH
60962: LD_INT 1
60964: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
60965: LD_VAR 0 6
60969: PUSH
60970: LD_VAR 0 13
60974: PPUSH
60975: CALL_OW 247
60979: PUSH
60980: LD_INT 2
60982: EQUAL
60983: AND
60984: PUSH
60985: LD_VAR 0 13
60989: PPUSH
60990: CALL_OW 263
60994: PUSH
60995: LD_INT 1
60997: EQUAL
60998: AND
60999: IFFALSE 61163
// begin if IsDrivenBy ( tmp ) then
61001: LD_VAR 0 13
61005: PPUSH
61006: CALL_OW 311
61010: IFFALSE 61014
// continue ;
61012: GO 60813
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
61014: LD_VAR 0 6
61018: PPUSH
61019: LD_INT 3
61021: PUSH
61022: LD_INT 60
61024: PUSH
61025: EMPTY
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: LD_INT 55
61037: PUSH
61038: EMPTY
61039: LIST
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PPUSH
61049: CALL_OW 72
61053: IFFALSE 61161
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
61055: LD_ADDR_VAR 0 18
61059: PUSH
61060: LD_VAR 0 6
61064: PPUSH
61065: LD_INT 3
61067: PUSH
61068: LD_INT 60
61070: PUSH
61071: EMPTY
61072: LIST
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: PUSH
61081: LD_INT 55
61083: PUSH
61084: EMPTY
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PPUSH
61095: CALL_OW 72
61099: PUSH
61100: LD_INT 1
61102: ARRAY
61103: ST_TO_ADDR
// if IsInUnit ( driver ) then
61104: LD_VAR 0 18
61108: PPUSH
61109: CALL_OW 310
61113: IFFALSE 61124
// ComExit ( driver ) ;
61115: LD_VAR 0 18
61119: PPUSH
61120: CALL 85913 0 1
// AddComEnterUnit ( driver , tmp ) ;
61124: LD_VAR 0 18
61128: PPUSH
61129: LD_VAR 0 13
61133: PPUSH
61134: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
61138: LD_VAR 0 18
61142: PPUSH
61143: LD_VAR 0 7
61147: PPUSH
61148: CALL_OW 173
// AddComExitVehicle ( driver ) ;
61152: LD_VAR 0 18
61156: PPUSH
61157: CALL_OW 181
// end ; continue ;
61161: GO 60813
// end ; if not cleaners or not tmp in cleaners then
61163: LD_VAR 0 6
61167: NOT
61168: PUSH
61169: LD_VAR 0 13
61173: PUSH
61174: LD_VAR 0 6
61178: IN
61179: NOT
61180: OR
61181: IFFALSE 61488
// begin if dep then
61183: LD_VAR 0 17
61187: IFFALSE 61323
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
61189: LD_ADDR_VAR 0 16
61193: PUSH
61194: LD_VAR 0 17
61198: PUSH
61199: LD_INT 1
61201: ARRAY
61202: PPUSH
61203: CALL_OW 250
61207: PPUSH
61208: LD_VAR 0 17
61212: PUSH
61213: LD_INT 1
61215: ARRAY
61216: PPUSH
61217: CALL_OW 254
61221: PPUSH
61222: LD_INT 5
61224: PPUSH
61225: CALL_OW 272
61229: PUSH
61230: LD_VAR 0 17
61234: PUSH
61235: LD_INT 1
61237: ARRAY
61238: PPUSH
61239: CALL_OW 251
61243: PPUSH
61244: LD_VAR 0 17
61248: PUSH
61249: LD_INT 1
61251: ARRAY
61252: PPUSH
61253: CALL_OW 254
61257: PPUSH
61258: LD_INT 5
61260: PPUSH
61261: CALL_OW 273
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
61270: LD_VAR 0 16
61274: PUSH
61275: LD_INT 1
61277: ARRAY
61278: PPUSH
61279: LD_VAR 0 16
61283: PUSH
61284: LD_INT 2
61286: ARRAY
61287: PPUSH
61288: CALL_OW 488
61292: IFFALSE 61323
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
61294: LD_VAR 0 13
61298: PPUSH
61299: LD_VAR 0 16
61303: PUSH
61304: LD_INT 1
61306: ARRAY
61307: PPUSH
61308: LD_VAR 0 16
61312: PUSH
61313: LD_INT 2
61315: ARRAY
61316: PPUSH
61317: CALL_OW 111
// continue ;
61321: GO 60813
// end ; end ; r := GetDir ( tmp ) ;
61323: LD_ADDR_VAR 0 15
61327: PUSH
61328: LD_VAR 0 13
61332: PPUSH
61333: CALL_OW 254
61337: ST_TO_ADDR
// if r = 5 then
61338: LD_VAR 0 15
61342: PUSH
61343: LD_INT 5
61345: EQUAL
61346: IFFALSE 61356
// r := 0 ;
61348: LD_ADDR_VAR 0 15
61352: PUSH
61353: LD_INT 0
61355: ST_TO_ADDR
// for j = r to 5 do
61356: LD_ADDR_VAR 0 10
61360: PUSH
61361: DOUBLE
61362: LD_VAR 0 15
61366: DEC
61367: ST_TO_ADDR
61368: LD_INT 5
61370: PUSH
61371: FOR_TO
61372: IFFALSE 61486
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
61374: LD_ADDR_VAR 0 11
61378: PUSH
61379: LD_VAR 0 13
61383: PPUSH
61384: CALL_OW 250
61388: PPUSH
61389: LD_VAR 0 10
61393: PPUSH
61394: LD_INT 2
61396: PPUSH
61397: CALL_OW 272
61401: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
61402: LD_ADDR_VAR 0 12
61406: PUSH
61407: LD_VAR 0 13
61411: PPUSH
61412: CALL_OW 251
61416: PPUSH
61417: LD_VAR 0 10
61421: PPUSH
61422: LD_INT 2
61424: PPUSH
61425: CALL_OW 273
61429: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
61430: LD_VAR 0 11
61434: PPUSH
61435: LD_VAR 0 12
61439: PPUSH
61440: CALL_OW 488
61444: PUSH
61445: LD_VAR 0 11
61449: PPUSH
61450: LD_VAR 0 12
61454: PPUSH
61455: CALL_OW 428
61459: NOT
61460: AND
61461: IFFALSE 61484
// begin ComMoveXY ( tmp , _x , _y ) ;
61463: LD_VAR 0 13
61467: PPUSH
61468: LD_VAR 0 11
61472: PPUSH
61473: LD_VAR 0 12
61477: PPUSH
61478: CALL_OW 111
// break ;
61482: GO 61486
// end ; end ;
61484: GO 61371
61486: POP
61487: POP
// end ; end ;
61488: GO 60813
61490: POP
61491: POP
// end ;
61492: LD_VAR 0 8
61496: RET
// export function BuildingTechInvented ( side , btype ) ; begin
61497: LD_INT 0
61499: PPUSH
// result := true ;
61500: LD_ADDR_VAR 0 3
61504: PUSH
61505: LD_INT 1
61507: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
61508: LD_VAR 0 2
61512: PUSH
61513: LD_INT 24
61515: DOUBLE
61516: EQUAL
61517: IFTRUE 61527
61519: LD_INT 33
61521: DOUBLE
61522: EQUAL
61523: IFTRUE 61527
61525: GO 61552
61527: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
61528: LD_ADDR_VAR 0 3
61532: PUSH
61533: LD_INT 32
61535: PPUSH
61536: LD_VAR 0 1
61540: PPUSH
61541: CALL_OW 321
61545: PUSH
61546: LD_INT 2
61548: EQUAL
61549: ST_TO_ADDR
61550: GO 61872
61552: LD_INT 20
61554: DOUBLE
61555: EQUAL
61556: IFTRUE 61560
61558: GO 61585
61560: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
61561: LD_ADDR_VAR 0 3
61565: PUSH
61566: LD_INT 6
61568: PPUSH
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL_OW 321
61578: PUSH
61579: LD_INT 2
61581: EQUAL
61582: ST_TO_ADDR
61583: GO 61872
61585: LD_INT 22
61587: DOUBLE
61588: EQUAL
61589: IFTRUE 61599
61591: LD_INT 36
61593: DOUBLE
61594: EQUAL
61595: IFTRUE 61599
61597: GO 61624
61599: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
61600: LD_ADDR_VAR 0 3
61604: PUSH
61605: LD_INT 15
61607: PPUSH
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 321
61617: PUSH
61618: LD_INT 2
61620: EQUAL
61621: ST_TO_ADDR
61622: GO 61872
61624: LD_INT 30
61626: DOUBLE
61627: EQUAL
61628: IFTRUE 61632
61630: GO 61657
61632: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
61633: LD_ADDR_VAR 0 3
61637: PUSH
61638: LD_INT 20
61640: PPUSH
61641: LD_VAR 0 1
61645: PPUSH
61646: CALL_OW 321
61650: PUSH
61651: LD_INT 2
61653: EQUAL
61654: ST_TO_ADDR
61655: GO 61872
61657: LD_INT 28
61659: DOUBLE
61660: EQUAL
61661: IFTRUE 61671
61663: LD_INT 21
61665: DOUBLE
61666: EQUAL
61667: IFTRUE 61671
61669: GO 61696
61671: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
61672: LD_ADDR_VAR 0 3
61676: PUSH
61677: LD_INT 21
61679: PPUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: CALL_OW 321
61689: PUSH
61690: LD_INT 2
61692: EQUAL
61693: ST_TO_ADDR
61694: GO 61872
61696: LD_INT 16
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61704
61702: GO 61731
61704: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
61705: LD_ADDR_VAR 0 3
61709: PUSH
61710: LD_EXP 81
61714: PPUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: CALL_OW 321
61724: PUSH
61725: LD_INT 2
61727: EQUAL
61728: ST_TO_ADDR
61729: GO 61872
61731: LD_INT 19
61733: DOUBLE
61734: EQUAL
61735: IFTRUE 61745
61737: LD_INT 23
61739: DOUBLE
61740: EQUAL
61741: IFTRUE 61745
61743: GO 61772
61745: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
61746: LD_ADDR_VAR 0 3
61750: PUSH
61751: LD_EXP 80
61755: PPUSH
61756: LD_VAR 0 1
61760: PPUSH
61761: CALL_OW 321
61765: PUSH
61766: LD_INT 2
61768: EQUAL
61769: ST_TO_ADDR
61770: GO 61872
61772: LD_INT 17
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61780
61778: GO 61805
61780: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
61781: LD_ADDR_VAR 0 3
61785: PUSH
61786: LD_INT 39
61788: PPUSH
61789: LD_VAR 0 1
61793: PPUSH
61794: CALL_OW 321
61798: PUSH
61799: LD_INT 2
61801: EQUAL
61802: ST_TO_ADDR
61803: GO 61872
61805: LD_INT 18
61807: DOUBLE
61808: EQUAL
61809: IFTRUE 61813
61811: GO 61838
61813: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
61814: LD_ADDR_VAR 0 3
61818: PUSH
61819: LD_INT 40
61821: PPUSH
61822: LD_VAR 0 1
61826: PPUSH
61827: CALL_OW 321
61831: PUSH
61832: LD_INT 2
61834: EQUAL
61835: ST_TO_ADDR
61836: GO 61872
61838: LD_INT 27
61840: DOUBLE
61841: EQUAL
61842: IFTRUE 61846
61844: GO 61871
61846: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
61847: LD_ADDR_VAR 0 3
61851: PUSH
61852: LD_INT 35
61854: PPUSH
61855: LD_VAR 0 1
61859: PPUSH
61860: CALL_OW 321
61864: PUSH
61865: LD_INT 2
61867: EQUAL
61868: ST_TO_ADDR
61869: GO 61872
61871: POP
// end ;
61872: LD_VAR 0 3
61876: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
61877: LD_INT 0
61879: PPUSH
61880: PPUSH
61881: PPUSH
61882: PPUSH
61883: PPUSH
61884: PPUSH
61885: PPUSH
61886: PPUSH
61887: PPUSH
61888: PPUSH
61889: PPUSH
// result := false ;
61890: LD_ADDR_VAR 0 6
61894: PUSH
61895: LD_INT 0
61897: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
61898: LD_VAR 0 1
61902: NOT
61903: PUSH
61904: LD_VAR 0 1
61908: PPUSH
61909: CALL_OW 266
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: IN
61924: NOT
61925: OR
61926: PUSH
61927: LD_VAR 0 2
61931: NOT
61932: OR
61933: PUSH
61934: LD_VAR 0 5
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 4
61953: PUSH
61954: LD_INT 5
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: IN
61965: NOT
61966: OR
61967: PUSH
61968: LD_VAR 0 3
61972: PPUSH
61973: LD_VAR 0 4
61977: PPUSH
61978: CALL_OW 488
61982: NOT
61983: OR
61984: IFFALSE 61988
// exit ;
61986: GO 62724
// side := GetSide ( depot ) ;
61988: LD_ADDR_VAR 0 9
61992: PUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: CALL_OW 255
62002: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
62003: LD_VAR 0 9
62007: PPUSH
62008: LD_VAR 0 2
62012: PPUSH
62013: CALL 61497 0 2
62017: NOT
62018: IFFALSE 62022
// exit ;
62020: GO 62724
// pom := GetBase ( depot ) ;
62022: LD_ADDR_VAR 0 10
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 274
62036: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62037: LD_ADDR_VAR 0 11
62041: PUSH
62042: LD_VAR 0 2
62046: PPUSH
62047: LD_VAR 0 1
62051: PPUSH
62052: CALL_OW 248
62056: PPUSH
62057: CALL_OW 450
62061: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
62062: LD_VAR 0 10
62066: PPUSH
62067: LD_INT 1
62069: PPUSH
62070: CALL_OW 275
62074: PUSH
62075: LD_VAR 0 11
62079: PUSH
62080: LD_INT 1
62082: ARRAY
62083: GREATEREQUAL
62084: PUSH
62085: LD_VAR 0 10
62089: PPUSH
62090: LD_INT 2
62092: PPUSH
62093: CALL_OW 275
62097: PUSH
62098: LD_VAR 0 11
62102: PUSH
62103: LD_INT 2
62105: ARRAY
62106: GREATEREQUAL
62107: AND
62108: PUSH
62109: LD_VAR 0 10
62113: PPUSH
62114: LD_INT 3
62116: PPUSH
62117: CALL_OW 275
62121: PUSH
62122: LD_VAR 0 11
62126: PUSH
62127: LD_INT 3
62129: ARRAY
62130: GREATEREQUAL
62131: AND
62132: NOT
62133: IFFALSE 62137
// exit ;
62135: GO 62724
// if GetBType ( depot ) = b_depot then
62137: LD_VAR 0 1
62141: PPUSH
62142: CALL_OW 266
62146: PUSH
62147: LD_INT 0
62149: EQUAL
62150: IFFALSE 62162
// dist := 28 else
62152: LD_ADDR_VAR 0 14
62156: PUSH
62157: LD_INT 28
62159: ST_TO_ADDR
62160: GO 62170
// dist := 36 ;
62162: LD_ADDR_VAR 0 14
62166: PUSH
62167: LD_INT 36
62169: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
62170: LD_VAR 0 1
62174: PPUSH
62175: LD_VAR 0 3
62179: PPUSH
62180: LD_VAR 0 4
62184: PPUSH
62185: CALL_OW 297
62189: PUSH
62190: LD_VAR 0 14
62194: GREATER
62195: IFFALSE 62199
// exit ;
62197: GO 62724
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
62199: LD_ADDR_VAR 0 12
62203: PUSH
62204: LD_VAR 0 2
62208: PPUSH
62209: LD_VAR 0 3
62213: PPUSH
62214: LD_VAR 0 4
62218: PPUSH
62219: LD_VAR 0 5
62223: PPUSH
62224: LD_VAR 0 1
62228: PPUSH
62229: CALL_OW 248
62233: PPUSH
62234: LD_INT 0
62236: PPUSH
62237: CALL 62729 0 6
62241: ST_TO_ADDR
// if not hexes then
62242: LD_VAR 0 12
62246: NOT
62247: IFFALSE 62251
// exit ;
62249: GO 62724
// hex := GetHexInfo ( x , y ) ;
62251: LD_ADDR_VAR 0 15
62255: PUSH
62256: LD_VAR 0 3
62260: PPUSH
62261: LD_VAR 0 4
62265: PPUSH
62266: CALL_OW 546
62270: ST_TO_ADDR
// if hex [ 1 ] then
62271: LD_VAR 0 15
62275: PUSH
62276: LD_INT 1
62278: ARRAY
62279: IFFALSE 62283
// exit ;
62281: GO 62724
// height := hex [ 2 ] ;
62283: LD_ADDR_VAR 0 13
62287: PUSH
62288: LD_VAR 0 15
62292: PUSH
62293: LD_INT 2
62295: ARRAY
62296: ST_TO_ADDR
// for i = 1 to hexes do
62297: LD_ADDR_VAR 0 7
62301: PUSH
62302: DOUBLE
62303: LD_INT 1
62305: DEC
62306: ST_TO_ADDR
62307: LD_VAR 0 12
62311: PUSH
62312: FOR_TO
62313: IFFALSE 62643
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
62315: LD_VAR 0 12
62319: PUSH
62320: LD_VAR 0 7
62324: ARRAY
62325: PUSH
62326: LD_INT 1
62328: ARRAY
62329: PPUSH
62330: LD_VAR 0 12
62334: PUSH
62335: LD_VAR 0 7
62339: ARRAY
62340: PUSH
62341: LD_INT 2
62343: ARRAY
62344: PPUSH
62345: CALL_OW 488
62349: NOT
62350: PUSH
62351: LD_VAR 0 12
62355: PUSH
62356: LD_VAR 0 7
62360: ARRAY
62361: PUSH
62362: LD_INT 1
62364: ARRAY
62365: PPUSH
62366: LD_VAR 0 12
62370: PUSH
62371: LD_VAR 0 7
62375: ARRAY
62376: PUSH
62377: LD_INT 2
62379: ARRAY
62380: PPUSH
62381: CALL_OW 428
62385: PUSH
62386: LD_INT 0
62388: GREATER
62389: OR
62390: PUSH
62391: LD_VAR 0 12
62395: PUSH
62396: LD_VAR 0 7
62400: ARRAY
62401: PUSH
62402: LD_INT 1
62404: ARRAY
62405: PPUSH
62406: LD_VAR 0 12
62410: PUSH
62411: LD_VAR 0 7
62415: ARRAY
62416: PUSH
62417: LD_INT 2
62419: ARRAY
62420: PPUSH
62421: CALL_OW 351
62425: OR
62426: IFFALSE 62432
// exit ;
62428: POP
62429: POP
62430: GO 62724
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62432: LD_ADDR_VAR 0 8
62436: PUSH
62437: LD_VAR 0 12
62441: PUSH
62442: LD_VAR 0 7
62446: ARRAY
62447: PUSH
62448: LD_INT 1
62450: ARRAY
62451: PPUSH
62452: LD_VAR 0 12
62456: PUSH
62457: LD_VAR 0 7
62461: ARRAY
62462: PUSH
62463: LD_INT 2
62465: ARRAY
62466: PPUSH
62467: CALL_OW 546
62471: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
62472: LD_VAR 0 8
62476: PUSH
62477: LD_INT 1
62479: ARRAY
62480: PUSH
62481: LD_VAR 0 8
62485: PUSH
62486: LD_INT 2
62488: ARRAY
62489: PUSH
62490: LD_VAR 0 13
62494: PUSH
62495: LD_INT 2
62497: PLUS
62498: GREATER
62499: OR
62500: PUSH
62501: LD_VAR 0 8
62505: PUSH
62506: LD_INT 2
62508: ARRAY
62509: PUSH
62510: LD_VAR 0 13
62514: PUSH
62515: LD_INT 2
62517: MINUS
62518: LESS
62519: OR
62520: PUSH
62521: LD_VAR 0 8
62525: PUSH
62526: LD_INT 3
62528: ARRAY
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: LD_INT 8
62535: PUSH
62536: LD_INT 9
62538: PUSH
62539: LD_INT 10
62541: PUSH
62542: LD_INT 11
62544: PUSH
62545: LD_INT 12
62547: PUSH
62548: LD_INT 13
62550: PUSH
62551: LD_INT 16
62553: PUSH
62554: LD_INT 17
62556: PUSH
62557: LD_INT 18
62559: PUSH
62560: LD_INT 19
62562: PUSH
62563: LD_INT 20
62565: PUSH
62566: LD_INT 21
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: IN
62584: NOT
62585: OR
62586: PUSH
62587: LD_VAR 0 8
62591: PUSH
62592: LD_INT 5
62594: ARRAY
62595: NOT
62596: OR
62597: PUSH
62598: LD_VAR 0 8
62602: PUSH
62603: LD_INT 6
62605: ARRAY
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 7
62615: PUSH
62616: LD_INT 9
62618: PUSH
62619: LD_INT 10
62621: PUSH
62622: LD_INT 11
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: IN
62633: NOT
62634: OR
62635: IFFALSE 62641
// exit ;
62637: POP
62638: POP
62639: GO 62724
// end ;
62641: GO 62312
62643: POP
62644: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
62645: LD_VAR 0 9
62649: PPUSH
62650: LD_VAR 0 3
62654: PPUSH
62655: LD_VAR 0 4
62659: PPUSH
62660: LD_INT 20
62662: PPUSH
62663: CALL 54670 0 4
62667: PUSH
62668: LD_INT 4
62670: ARRAY
62671: IFFALSE 62675
// exit ;
62673: GO 62724
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
62675: LD_VAR 0 2
62679: PUSH
62680: LD_INT 29
62682: PUSH
62683: LD_INT 30
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: IN
62690: PUSH
62691: LD_VAR 0 3
62695: PPUSH
62696: LD_VAR 0 4
62700: PPUSH
62701: LD_VAR 0 9
62705: PPUSH
62706: CALL_OW 440
62710: NOT
62711: AND
62712: IFFALSE 62716
// exit ;
62714: GO 62724
// result := true ;
62716: LD_ADDR_VAR 0 6
62720: PUSH
62721: LD_INT 1
62723: ST_TO_ADDR
// end ;
62724: LD_VAR 0 6
62728: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
62729: LD_INT 0
62731: PPUSH
62732: PPUSH
62733: PPUSH
62734: PPUSH
62735: PPUSH
62736: PPUSH
62737: PPUSH
62738: PPUSH
62739: PPUSH
62740: PPUSH
62741: PPUSH
62742: PPUSH
62743: PPUSH
62744: PPUSH
62745: PPUSH
62746: PPUSH
62747: PPUSH
62748: PPUSH
62749: PPUSH
62750: PPUSH
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
62755: PPUSH
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
62765: PPUSH
62766: PPUSH
62767: PPUSH
62768: PPUSH
62769: PPUSH
62770: PPUSH
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
62775: PPUSH
62776: PPUSH
62777: PPUSH
62778: PPUSH
62779: PPUSH
62780: PPUSH
62781: PPUSH
62782: PPUSH
62783: PPUSH
62784: PPUSH
62785: PPUSH
62786: PPUSH
62787: PPUSH
62788: PPUSH
// result = [ ] ;
62789: LD_ADDR_VAR 0 7
62793: PUSH
62794: EMPTY
62795: ST_TO_ADDR
// temp_list = [ ] ;
62796: LD_ADDR_VAR 0 9
62800: PUSH
62801: EMPTY
62802: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
62803: LD_VAR 0 4
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: LD_INT 4
62822: PUSH
62823: LD_INT 5
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: IN
62834: NOT
62835: PUSH
62836: LD_VAR 0 1
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: IN
62851: PUSH
62852: LD_VAR 0 5
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: IN
62871: NOT
62872: AND
62873: OR
62874: IFFALSE 62878
// exit ;
62876: GO 81269
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
62878: LD_VAR 0 1
62882: PUSH
62883: LD_INT 6
62885: PUSH
62886: LD_INT 7
62888: PUSH
62889: LD_INT 8
62891: PUSH
62892: LD_INT 13
62894: PUSH
62895: LD_INT 12
62897: PUSH
62898: LD_INT 15
62900: PUSH
62901: LD_INT 11
62903: PUSH
62904: LD_INT 14
62906: PUSH
62907: LD_INT 10
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: IN
62921: IFFALSE 62931
// btype = b_lab ;
62923: LD_ADDR_VAR 0 1
62927: PUSH
62928: LD_INT 6
62930: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
62931: LD_VAR 0 6
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: IN
62950: NOT
62951: PUSH
62952: LD_VAR 0 1
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: LD_INT 6
62971: PUSH
62972: LD_INT 36
62974: PUSH
62975: LD_INT 4
62977: PUSH
62978: LD_INT 5
62980: PUSH
62981: LD_INT 31
62983: PUSH
62984: LD_INT 32
62986: PUSH
62987: LD_INT 33
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: IN
63003: NOT
63004: PUSH
63005: LD_VAR 0 6
63009: PUSH
63010: LD_INT 1
63012: EQUAL
63013: AND
63014: OR
63015: PUSH
63016: LD_VAR 0 1
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: IN
63031: NOT
63032: PUSH
63033: LD_VAR 0 6
63037: PUSH
63038: LD_INT 2
63040: EQUAL
63041: AND
63042: OR
63043: IFFALSE 63053
// mode = 0 ;
63045: LD_ADDR_VAR 0 6
63049: PUSH
63050: LD_INT 0
63052: ST_TO_ADDR
// case mode of 0 :
63053: LD_VAR 0 6
63057: PUSH
63058: LD_INT 0
63060: DOUBLE
63061: EQUAL
63062: IFTRUE 63066
63064: GO 74519
63066: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63067: LD_ADDR_VAR 0 11
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63260: LD_ADDR_VAR 0 12
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 2
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 2
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 3
63417: NEG
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63456: LD_ADDR_VAR 0 13
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 2
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 2
63579: NEG
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 2
63591: NEG
63592: PUSH
63593: LD_INT 2
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63655: LD_ADDR_VAR 0 14
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 1
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 1
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 3
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 3
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63851: LD_ADDR_VAR 0 15
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 2
63985: NEG
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64044: LD_ADDR_VAR 0 16
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: NEG
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 2
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: LD_INT 2
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 3
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 3
64201: PUSH
64202: LD_INT 3
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: LD_INT 3
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64237: LD_ADDR_VAR 0 17
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: LD_INT 2
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64467: LD_ADDR_VAR 0 18
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 2
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: LD_INT 2
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 2
64643: NEG
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 2
64654: NEG
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 2
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64697: LD_ADDR_VAR 0 19
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: LD_INT 2
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 2
64873: NEG
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: LD_INT 2
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64927: LD_ADDR_VAR 0 20
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: LD_INT 2
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 2
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 2
65103: NEG
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: NEG
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 2
65126: NEG
65127: PUSH
65128: LD_INT 2
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65157: LD_ADDR_VAR 0 21
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: LD_INT 2
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 2
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 2
65333: NEG
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: LD_INT 2
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65387: LD_ADDR_VAR 0 22
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 2
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: NEG
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 2
65574: NEG
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: LD_INT 2
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65617: LD_ADDR_VAR 0 23
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: LD_INT 2
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 2
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 2
65793: NEG
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 2
65816: NEG
65817: PUSH
65818: LD_INT 2
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 2
65828: NEG
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 2
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
65897: LD_ADDR_VAR 0 24
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 1
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 2
66119: PUSH
66120: LD_INT 1
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 3
66140: PUSH
66141: LD_INT 2
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
66173: LD_ADDR_VAR 0 25
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 2
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 2
66349: NEG
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 2
66360: NEG
66361: PUSH
66362: LD_INT 1
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 2
66372: NEG
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 3
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: LD_INT 3
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: LD_INT 3
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66447: LD_ADDR_VAR 0 26
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 1
66528: NEG
66529: PUSH
66530: LD_INT 2
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: LD_INT 2
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: LD_INT 2
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 1
66612: NEG
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 2
66623: NEG
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: LD_INT 3
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: LD_INT 2
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 2
66689: NEG
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66723: LD_ADDR_VAR 0 27
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 0
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: LD_INT 2
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 1
66827: PUSH
66828: LD_INT 1
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 2
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 2
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: LD_INT 2
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 1
66888: NEG
66889: PUSH
66890: LD_INT 1
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: NEG
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: LD_INT 1
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: NEG
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: LD_INT 2
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 2
66945: NEG
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 3
66956: NEG
66957: PUSH
66958: LD_INT 1
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 3
66968: NEG
66969: PUSH
66970: LD_INT 2
66972: NEG
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67003: LD_ADDR_VAR 0 28
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: LD_INT 2
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 2
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 2
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: PUSH
67149: LD_INT 2
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 1
67168: NEG
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 2
67179: NEG
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 2
67190: NEG
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 2
67202: NEG
67203: PUSH
67204: LD_INT 2
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 2
67214: NEG
67215: PUSH
67216: LD_INT 3
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: LD_INT 3
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: NEG
67239: PUSH
67240: LD_INT 1
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: NEG
67251: PUSH
67252: LD_INT 2
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67285: LD_ADDR_VAR 0 29
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: NEG
67367: PUSH
67368: LD_INT 2
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 2
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 2
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: LD_INT 1
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 1
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 1
67440: NEG
67441: PUSH
67442: LD_INT 1
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 2
67451: NEG
67452: PUSH
67453: LD_INT 1
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 2
67463: NEG
67464: PUSH
67465: LD_INT 2
67467: NEG
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: LD_INT 3
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 3
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: LD_INT 2
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 3
67529: NEG
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67564: LD_ADDR_VAR 0 30
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 1
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: LD_INT 0
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: LD_INT 1
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 1
67645: NEG
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 2
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 2
67730: NEG
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 3
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: PUSH
67787: LD_INT 3
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 2
67796: NEG
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 3
67807: NEG
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67842: LD_ADDR_VAR 0 31
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 0
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: PUSH
67881: LD_INT 1
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: NEG
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 1
67935: PUSH
67936: LD_INT 1
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 2
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 1
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: LD_INT 2
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 1
67996: NEG
67997: PUSH
67998: LD_INT 1
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: LD_INT 1
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 2
68019: NEG
68020: PUSH
68021: LD_INT 2
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: LD_INT 3
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: NEG
68075: PUSH
68076: LD_INT 2
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: LD_INT 2
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68120: LD_ADDR_VAR 0 32
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: LD_INT 1
68193: NEG
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: NEG
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 1
68224: PUSH
68225: LD_INT 1
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: LD_INT 1
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: LD_INT 2
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 1
68255: PUSH
68256: LD_INT 2
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 1
68275: NEG
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 2
68297: NEG
68298: PUSH
68299: LD_INT 1
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: LD_INT 3
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: LD_INT 2
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 3
68332: PUSH
68333: LD_INT 2
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 2
68342: PUSH
68343: LD_INT 3
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 2
68352: NEG
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 3
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68398: LD_ADDR_VAR 0 33
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 0
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 1
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: LD_INT 1
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 1
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: LD_INT 1
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 1
68479: NEG
68480: PUSH
68481: LD_INT 2
68483: NEG
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 2
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 2
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: LD_INT 2
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: LD_INT 2
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: LD_INT 1
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 2
68553: NEG
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 2
68564: NEG
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 2
68576: NEG
68577: PUSH
68578: LD_INT 2
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: LD_INT 3
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 3
68611: PUSH
68612: LD_INT 1
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 1
68621: PUSH
68622: LD_INT 3
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68677: LD_ADDR_VAR 0 34
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 1
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: LD_INT 0
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: LD_INT 1
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: LD_INT 1
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 1
68735: NEG
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: NEG
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 1
68758: NEG
68759: PUSH
68760: LD_INT 2
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 2
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: LD_INT 1
68784: NEG
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 2
68792: PUSH
68793: LD_INT 1
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: LD_INT 2
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: LD_INT 2
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 1
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: NEG
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: LD_INT 2
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 1
68868: NEG
68869: PUSH
68870: LD_INT 3
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 1
68880: PUSH
68881: LD_INT 2
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 3
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 2
68901: PUSH
68902: LD_INT 3
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 2
68911: NEG
68912: PUSH
68913: LD_INT 1
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 3
68922: NEG
68923: PUSH
68924: LD_INT 1
68926: NEG
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68957: LD_ADDR_VAR 0 35
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 1
68995: PUSH
68996: LD_INT 1
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: LD_INT 1
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 1
69015: NEG
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 1
69026: NEG
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: PUSH
69039: LD_INT 1
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 2
69048: NEG
69049: PUSH
69050: LD_INT 1
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69069: LD_ADDR_VAR 0 36
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 0
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 0
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 0
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: LD_INT 1
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: LD_INT 0
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 1
69138: NEG
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: LD_INT 2
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: LD_INT 2
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69181: LD_ADDR_VAR 0 37
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 0
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 0
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: LD_INT 1
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 1
69239: NEG
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 1
69250: NEG
69251: PUSH
69252: LD_INT 1
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 1
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: NEG
69274: PUSH
69275: LD_INT 1
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69293: LD_ADDR_VAR 0 38
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: LD_INT 0
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: LD_INT 1
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 0
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: LD_INT 1
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 1
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: NEG
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: LD_INT 1
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 2
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 2
69384: NEG
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69405: LD_ADDR_VAR 0 39
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 0
69422: PUSH
69423: LD_INT 1
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 1
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 1
69443: PUSH
69444: LD_INT 1
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 1
69463: NEG
69464: PUSH
69465: LD_INT 0
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: LD_INT 1
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 1
69486: NEG
69487: PUSH
69488: LD_INT 2
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 1
69498: PUSH
69499: LD_INT 2
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69517: LD_ADDR_VAR 0 40
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 1
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: LD_INT 0
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 1
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: LD_INT 1
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 1
69575: NEG
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: LD_INT 1
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 1
69609: NEG
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69629: LD_ADDR_VAR 0 41
69633: PUSH
69634: LD_INT 0
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 1
69667: PUSH
69668: LD_INT 1
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: LD_INT 1
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 1
69687: NEG
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 1
69698: NEG
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 1
69710: NEG
69711: PUSH
69712: LD_INT 2
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 1
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 2
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: LD_INT 1
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 2
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: LD_INT 2
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 1
69773: NEG
69774: PUSH
69775: LD_INT 1
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 2
69784: NEG
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 2
69795: NEG
69796: PUSH
69797: LD_INT 1
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 2
69819: NEG
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 2
69831: PUSH
69832: LD_INT 1
69834: NEG
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 3
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 3
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: LD_INT 2
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 3
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 3
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 2
69892: NEG
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 3
69903: NEG
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 3
69914: NEG
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 3
69926: NEG
69927: PUSH
69928: LD_INT 2
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 3
69938: NEG
69939: PUSH
69940: LD_INT 3
69942: NEG
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69979: LD_ADDR_VAR 0 42
69983: PUSH
69984: LD_INT 0
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: LD_INT 1
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 1
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 1
70017: PUSH
70018: LD_INT 1
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 0
70027: PUSH
70028: LD_INT 1
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 1
70037: NEG
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 1
70048: NEG
70049: PUSH
70050: LD_INT 1
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: PUSH
70062: LD_INT 2
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 0
70072: PUSH
70073: LD_INT 2
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: LD_INT 1
70086: NEG
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 2
70094: PUSH
70095: LD_INT 1
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 2
70104: PUSH
70105: LD_INT 2
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: PUSH
70115: LD_INT 2
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: LD_INT 2
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 1
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 2
70145: NEG
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: NEG
70158: PUSH
70159: LD_INT 2
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 2
70169: NEG
70170: PUSH
70171: LD_INT 3
70173: NEG
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 1
70181: NEG
70182: PUSH
70183: LD_INT 3
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: LD_INT 3
70196: NEG
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: LD_INT 2
70207: NEG
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 3
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 3
70225: PUSH
70226: LD_INT 3
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 2
70235: PUSH
70236: LD_INT 3
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 1
70245: PUSH
70246: LD_INT 3
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: LD_INT 3
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 1
70265: NEG
70266: PUSH
70267: LD_INT 2
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 3
70276: NEG
70277: PUSH
70278: LD_INT 2
70280: NEG
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 3
70288: NEG
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70329: LD_ADDR_VAR 0 43
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 0
70346: PUSH
70347: LD_INT 1
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: LD_INT 1
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: LD_INT 0
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 1
70398: NEG
70399: PUSH
70400: LD_INT 1
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: NEG
70411: PUSH
70412: LD_INT 2
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: LD_INT 2
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 1
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 2
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 2
70454: PUSH
70455: LD_INT 1
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 1
70464: PUSH
70465: LD_INT 2
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 1
70484: NEG
70485: PUSH
70486: LD_INT 1
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 2
70495: NEG
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 2
70506: NEG
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 1
70518: NEG
70519: PUSH
70520: LD_INT 3
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 0
70530: PUSH
70531: LD_INT 3
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 1
70541: PUSH
70542: LD_INT 2
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 2
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 3
70563: PUSH
70564: LD_INT 0
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: LD_INT 1
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 1
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 3
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: LD_INT 2
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 2
70614: NEG
70615: PUSH
70616: LD_INT 1
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 3
70625: NEG
70626: PUSH
70627: LD_INT 0
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 3
70636: NEG
70637: PUSH
70638: LD_INT 1
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70677: LD_ADDR_VAR 0 44
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: LD_INT 1
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 1
70715: PUSH
70716: LD_INT 1
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: LD_INT 1
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 1
70735: NEG
70736: PUSH
70737: LD_INT 0
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: LD_INT 1
70750: NEG
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 1
70758: NEG
70759: PUSH
70760: LD_INT 2
70762: NEG
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: LD_INT 1
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 2
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 2
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 1
70811: PUSH
70812: LD_INT 2
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: NEG
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 2
70832: NEG
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 2
70843: NEG
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: LD_INT 2
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 2
70867: NEG
70868: PUSH
70869: LD_INT 3
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 2
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 3
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 3
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 3
70910: PUSH
70911: LD_INT 2
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 3
70920: PUSH
70921: LD_INT 3
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 2
70930: PUSH
70931: LD_INT 3
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 2
70940: NEG
70941: PUSH
70942: LD_INT 1
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 3
70951: NEG
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 3
70962: NEG
70963: PUSH
70964: LD_INT 1
70966: NEG
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 3
70974: NEG
70975: PUSH
70976: LD_INT 2
70978: NEG
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 3
70986: NEG
70987: PUSH
70988: LD_INT 3
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71027: LD_ADDR_VAR 0 45
71031: PUSH
71032: LD_INT 0
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: LD_INT 1
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 1
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 1
71065: PUSH
71066: LD_INT 1
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: LD_INT 1
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 1
71085: NEG
71086: PUSH
71087: LD_INT 0
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 1
71096: NEG
71097: PUSH
71098: LD_INT 1
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 1
71108: NEG
71109: PUSH
71110: LD_INT 2
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 0
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: PUSH
71132: LD_INT 1
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 2
71142: PUSH
71143: LD_INT 1
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: LD_INT 2
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 1
71162: PUSH
71163: LD_INT 2
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 0
71172: PUSH
71173: LD_INT 2
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 1
71182: NEG
71183: PUSH
71184: LD_INT 1
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 2
71193: NEG
71194: PUSH
71195: LD_INT 1
71197: NEG
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 2
71205: NEG
71206: PUSH
71207: LD_INT 2
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: NEG
71218: PUSH
71219: LD_INT 3
71221: NEG
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 1
71229: NEG
71230: PUSH
71231: LD_INT 3
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: LD_INT 3
71244: NEG
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 1
71252: PUSH
71253: LD_INT 2
71255: NEG
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 3
71263: PUSH
71264: LD_INT 2
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 3
71273: PUSH
71274: LD_INT 3
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 2
71283: PUSH
71284: LD_INT 3
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 1
71293: PUSH
71294: LD_INT 3
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 0
71303: PUSH
71304: LD_INT 3
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 1
71313: NEG
71314: PUSH
71315: LD_INT 2
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 3
71324: NEG
71325: PUSH
71326: LD_INT 2
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 3
71336: NEG
71337: PUSH
71338: LD_INT 3
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71377: LD_ADDR_VAR 0 46
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: LD_INT 1
71397: NEG
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 1
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 1
71415: PUSH
71416: LD_INT 1
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 0
71425: PUSH
71426: LD_INT 1
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 1
71435: NEG
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 1
71446: NEG
71447: PUSH
71448: LD_INT 1
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: LD_INT 2
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 0
71470: PUSH
71471: LD_INT 2
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 1
71481: PUSH
71482: LD_INT 1
71484: NEG
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 2
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 2
71502: PUSH
71503: LD_INT 1
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: LD_INT 2
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 0
71522: PUSH
71523: LD_INT 2
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 1
71532: NEG
71533: PUSH
71534: LD_INT 1
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 2
71543: NEG
71544: PUSH
71545: LD_INT 0
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 2
71554: NEG
71555: PUSH
71556: LD_INT 1
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 1
71566: NEG
71567: PUSH
71568: LD_INT 3
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 0
71578: PUSH
71579: LD_INT 3
71581: NEG
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 1
71589: PUSH
71590: LD_INT 2
71592: NEG
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: LD_INT 1
71603: NEG
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 3
71611: PUSH
71612: LD_INT 0
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 3
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 1
71631: PUSH
71632: LD_INT 3
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 0
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: NEG
71652: PUSH
71653: LD_INT 2
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 2
71662: NEG
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 3
71673: NEG
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 3
71684: NEG
71685: PUSH
71686: LD_INT 1
71688: NEG
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71725: LD_ADDR_VAR 0 47
71729: PUSH
71730: LD_INT 0
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: LD_INT 1
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 1
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 1
71763: PUSH
71764: LD_INT 1
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 0
71773: PUSH
71774: LD_INT 1
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 1
71783: NEG
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 1
71794: NEG
71795: PUSH
71796: LD_INT 1
71798: NEG
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: PUSH
71808: LD_INT 2
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: LD_INT 2
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 1
71829: PUSH
71830: LD_INT 1
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 2
71840: NEG
71841: PUSH
71842: LD_INT 1
71844: NEG
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 2
71852: NEG
71853: PUSH
71854: LD_INT 2
71856: NEG
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71876: LD_ADDR_VAR 0 48
71880: PUSH
71881: LD_INT 0
71883: PUSH
71884: LD_INT 0
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 0
71893: PUSH
71894: LD_INT 1
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 1
71904: PUSH
71905: LD_INT 0
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 1
71914: PUSH
71915: LD_INT 1
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: LD_INT 1
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 1
71934: NEG
71935: PUSH
71936: LD_INT 0
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 1
71945: NEG
71946: PUSH
71947: LD_INT 1
71949: NEG
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 1
71957: NEG
71958: PUSH
71959: LD_INT 2
71961: NEG
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 0
71969: PUSH
71970: LD_INT 2
71972: NEG
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 1
71980: PUSH
71981: LD_INT 1
71983: NEG
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 2
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 2
72001: PUSH
72002: LD_INT 1
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72023: LD_ADDR_VAR 0 49
72027: PUSH
72028: LD_INT 0
72030: PUSH
72031: LD_INT 0
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: LD_INT 0
72040: PUSH
72041: LD_INT 1
72043: NEG
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 1
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 1
72061: PUSH
72062: LD_INT 1
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 0
72071: PUSH
72072: LD_INT 1
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 1
72081: NEG
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 1
72092: NEG
72093: PUSH
72094: LD_INT 1
72096: NEG
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 1
72104: PUSH
72105: LD_INT 1
72107: NEG
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 2
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 2
72125: PUSH
72126: LD_INT 1
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 2
72135: PUSH
72136: LD_INT 2
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 1
72145: PUSH
72146: LD_INT 2
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72167: LD_ADDR_VAR 0 50
72171: PUSH
72172: LD_INT 0
72174: PUSH
72175: LD_INT 0
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: LD_INT 1
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 1
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 1
72205: PUSH
72206: LD_INT 1
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 0
72215: PUSH
72216: LD_INT 1
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 1
72225: NEG
72226: PUSH
72227: LD_INT 0
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 1
72236: NEG
72237: PUSH
72238: LD_INT 1
72240: NEG
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 2
72248: PUSH
72249: LD_INT 1
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 2
72258: PUSH
72259: LD_INT 2
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 1
72268: PUSH
72269: LD_INT 2
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 0
72278: PUSH
72279: LD_INT 2
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 1
72288: NEG
72289: PUSH
72290: LD_INT 1
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72311: LD_ADDR_VAR 0 51
72315: PUSH
72316: LD_INT 0
72318: PUSH
72319: LD_INT 0
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: LD_INT 1
72331: NEG
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: LD_INT 0
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 1
72349: PUSH
72350: LD_INT 1
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 1
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 1
72369: NEG
72370: PUSH
72371: LD_INT 0
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 1
72380: NEG
72381: PUSH
72382: LD_INT 1
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 1
72392: PUSH
72393: LD_INT 2
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 0
72402: PUSH
72403: LD_INT 2
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 1
72412: NEG
72413: PUSH
72414: LD_INT 1
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 2
72423: NEG
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 2
72434: NEG
72435: PUSH
72436: LD_INT 1
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72458: LD_ADDR_VAR 0 52
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: LD_INT 1
72478: NEG
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 1
72486: PUSH
72487: LD_INT 0
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 1
72496: PUSH
72497: LD_INT 1
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 0
72506: PUSH
72507: LD_INT 1
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 1
72516: NEG
72517: PUSH
72518: LD_INT 0
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 1
72527: NEG
72528: PUSH
72529: LD_INT 1
72531: NEG
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 1
72539: NEG
72540: PUSH
72541: LD_INT 2
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 1
72551: NEG
72552: PUSH
72553: LD_INT 1
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 2
72562: NEG
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 2
72573: NEG
72574: PUSH
72575: LD_INT 1
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 2
72585: NEG
72586: PUSH
72587: LD_INT 2
72589: NEG
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72609: LD_ADDR_VAR 0 53
72613: PUSH
72614: LD_INT 0
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 0
72626: PUSH
72627: LD_INT 1
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 1
72637: PUSH
72638: LD_INT 0
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 1
72647: PUSH
72648: LD_INT 1
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 0
72657: PUSH
72658: LD_INT 1
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 1
72667: NEG
72668: PUSH
72669: LD_INT 0
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 1
72678: NEG
72679: PUSH
72680: LD_INT 1
72682: NEG
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 1
72690: NEG
72691: PUSH
72692: LD_INT 2
72694: NEG
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 2
72705: NEG
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 1
72713: PUSH
72714: LD_INT 1
72716: NEG
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 2
72724: PUSH
72725: LD_INT 0
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 2
72734: PUSH
72735: LD_INT 1
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 2
72744: PUSH
72745: LD_INT 2
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 1
72754: PUSH
72755: LD_INT 2
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 0
72764: PUSH
72765: LD_INT 2
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 1
72774: NEG
72775: PUSH
72776: LD_INT 1
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 2
72785: NEG
72786: PUSH
72787: LD_INT 0
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 2
72796: NEG
72797: PUSH
72798: LD_INT 1
72800: NEG
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 2
72808: NEG
72809: PUSH
72810: LD_INT 2
72812: NEG
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72839: LD_ADDR_VAR 0 54
72843: PUSH
72844: LD_INT 0
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 0
72856: PUSH
72857: LD_INT 1
72859: NEG
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 1
72867: PUSH
72868: LD_INT 0
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: PUSH
72878: LD_INT 1
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 0
72887: PUSH
72888: LD_INT 1
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 1
72897: NEG
72898: PUSH
72899: LD_INT 0
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 1
72908: NEG
72909: PUSH
72910: LD_INT 1
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 1
72920: NEG
72921: PUSH
72922: LD_INT 2
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: LD_INT 2
72935: NEG
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 1
72943: PUSH
72944: LD_INT 1
72946: NEG
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 2
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 2
72964: PUSH
72965: LD_INT 1
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 2
72974: PUSH
72975: LD_INT 2
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 1
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 0
72994: PUSH
72995: LD_INT 2
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 1
73004: NEG
73005: PUSH
73006: LD_INT 1
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 2
73015: NEG
73016: PUSH
73017: LD_INT 0
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: LD_INT 2
73026: NEG
73027: PUSH
73028: LD_INT 1
73030: NEG
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 2
73038: NEG
73039: PUSH
73040: LD_INT 2
73042: NEG
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73069: LD_ADDR_VAR 0 55
73073: PUSH
73074: LD_INT 0
73076: PUSH
73077: LD_INT 0
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 0
73086: PUSH
73087: LD_INT 1
73089: NEG
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 1
73097: PUSH
73098: LD_INT 0
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 1
73107: PUSH
73108: LD_INT 1
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 0
73117: PUSH
73118: LD_INT 1
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 1
73127: NEG
73128: PUSH
73129: LD_INT 0
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: LD_INT 1
73138: NEG
73139: PUSH
73140: LD_INT 1
73142: NEG
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 1
73150: NEG
73151: PUSH
73152: LD_INT 2
73154: NEG
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 0
73162: PUSH
73163: LD_INT 2
73165: NEG
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 1
73173: PUSH
73174: LD_INT 1
73176: NEG
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 2
73184: PUSH
73185: LD_INT 0
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 2
73194: PUSH
73195: LD_INT 1
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 2
73204: PUSH
73205: LD_INT 2
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 1
73214: PUSH
73215: LD_INT 2
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 0
73224: PUSH
73225: LD_INT 2
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 1
73234: NEG
73235: PUSH
73236: LD_INT 1
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 2
73245: NEG
73246: PUSH
73247: LD_INT 0
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: LD_INT 2
73256: NEG
73257: PUSH
73258: LD_INT 1
73260: NEG
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: LD_INT 2
73268: NEG
73269: PUSH
73270: LD_INT 2
73272: NEG
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73299: LD_ADDR_VAR 0 56
73303: PUSH
73304: LD_INT 0
73306: PUSH
73307: LD_INT 0
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 0
73316: PUSH
73317: LD_INT 1
73319: NEG
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 1
73327: PUSH
73328: LD_INT 0
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 1
73337: PUSH
73338: LD_INT 1
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 0
73347: PUSH
73348: LD_INT 1
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 1
73357: NEG
73358: PUSH
73359: LD_INT 0
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 1
73368: NEG
73369: PUSH
73370: LD_INT 1
73372: NEG
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 1
73380: NEG
73381: PUSH
73382: LD_INT 2
73384: NEG
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 0
73392: PUSH
73393: LD_INT 2
73395: NEG
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 1
73403: PUSH
73404: LD_INT 1
73406: NEG
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 2
73414: PUSH
73415: LD_INT 0
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 2
73424: PUSH
73425: LD_INT 1
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: PUSH
73432: LD_INT 2
73434: PUSH
73435: LD_INT 2
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 1
73444: PUSH
73445: LD_INT 2
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 0
73454: PUSH
73455: LD_INT 2
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 1
73464: NEG
73465: PUSH
73466: LD_INT 1
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 2
73475: NEG
73476: PUSH
73477: LD_INT 0
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 2
73486: NEG
73487: PUSH
73488: LD_INT 1
73490: NEG
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 2
73498: NEG
73499: PUSH
73500: LD_INT 2
73502: NEG
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73529: LD_ADDR_VAR 0 57
73533: PUSH
73534: LD_INT 0
73536: PUSH
73537: LD_INT 0
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 0
73546: PUSH
73547: LD_INT 1
73549: NEG
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: LD_INT 1
73557: PUSH
73558: LD_INT 0
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 1
73567: PUSH
73568: LD_INT 1
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 0
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: LD_INT 1
73587: NEG
73588: PUSH
73589: LD_INT 0
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: LD_INT 1
73598: NEG
73599: PUSH
73600: LD_INT 1
73602: NEG
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 1
73610: NEG
73611: PUSH
73612: LD_INT 2
73614: NEG
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: LD_INT 2
73625: NEG
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 1
73633: PUSH
73634: LD_INT 1
73636: NEG
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 2
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 2
73654: PUSH
73655: LD_INT 1
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 2
73664: PUSH
73665: LD_INT 2
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 1
73674: PUSH
73675: LD_INT 2
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 0
73684: PUSH
73685: LD_INT 2
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 1
73694: NEG
73695: PUSH
73696: LD_INT 1
73698: PUSH
73699: EMPTY
73700: LIST
73701: LIST
73702: PUSH
73703: LD_INT 2
73705: NEG
73706: PUSH
73707: LD_INT 0
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 2
73716: NEG
73717: PUSH
73718: LD_INT 1
73720: NEG
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 2
73728: NEG
73729: PUSH
73730: LD_INT 2
73732: NEG
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73759: LD_ADDR_VAR 0 58
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: LD_INT 0
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 0
73776: PUSH
73777: LD_INT 1
73779: NEG
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 1
73787: PUSH
73788: LD_INT 0
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 1
73797: PUSH
73798: LD_INT 1
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PUSH
73805: LD_INT 0
73807: PUSH
73808: LD_INT 1
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: LD_INT 1
73817: NEG
73818: PUSH
73819: LD_INT 0
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 1
73828: NEG
73829: PUSH
73830: LD_INT 1
73832: NEG
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 1
73840: NEG
73841: PUSH
73842: LD_INT 2
73844: NEG
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: LD_INT 0
73852: PUSH
73853: LD_INT 2
73855: NEG
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 1
73863: PUSH
73864: LD_INT 1
73866: NEG
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 2
73874: PUSH
73875: LD_INT 0
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: LD_INT 2
73884: PUSH
73885: LD_INT 1
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 2
73894: PUSH
73895: LD_INT 2
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 1
73904: PUSH
73905: LD_INT 2
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: PUSH
73912: LD_INT 0
73914: PUSH
73915: LD_INT 2
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 1
73924: NEG
73925: PUSH
73926: LD_INT 1
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 2
73935: NEG
73936: PUSH
73937: LD_INT 0
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 2
73946: NEG
73947: PUSH
73948: LD_INT 1
73950: NEG
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 2
73958: NEG
73959: PUSH
73960: LD_INT 2
73962: NEG
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73989: LD_ADDR_VAR 0 59
73993: PUSH
73994: LD_INT 0
73996: PUSH
73997: LD_INT 0
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 0
74006: PUSH
74007: LD_INT 1
74009: NEG
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PUSH
74015: LD_INT 1
74017: PUSH
74018: LD_INT 0
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 1
74027: PUSH
74028: LD_INT 1
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 0
74037: PUSH
74038: LD_INT 1
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_INT 1
74047: NEG
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 1
74058: NEG
74059: PUSH
74060: LD_INT 1
74062: NEG
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74077: LD_ADDR_VAR 0 60
74081: PUSH
74082: LD_INT 0
74084: PUSH
74085: LD_INT 0
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 0
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 1
74105: PUSH
74106: LD_INT 0
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 1
74115: PUSH
74116: LD_INT 1
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 0
74125: PUSH
74126: LD_INT 1
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 1
74135: NEG
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 1
74146: NEG
74147: PUSH
74148: LD_INT 1
74150: NEG
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: LIST
74164: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74165: LD_ADDR_VAR 0 61
74169: PUSH
74170: LD_INT 0
74172: PUSH
74173: LD_INT 0
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 0
74182: PUSH
74183: LD_INT 1
74185: NEG
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 1
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 1
74203: PUSH
74204: LD_INT 1
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 0
74213: PUSH
74214: LD_INT 1
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 1
74223: NEG
74224: PUSH
74225: LD_INT 0
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 1
74234: NEG
74235: PUSH
74236: LD_INT 1
74238: NEG
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74253: LD_ADDR_VAR 0 62
74257: PUSH
74258: LD_INT 0
74260: PUSH
74261: LD_INT 0
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 0
74270: PUSH
74271: LD_INT 1
74273: NEG
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 1
74281: PUSH
74282: LD_INT 0
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: LD_INT 1
74291: PUSH
74292: LD_INT 1
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 0
74301: PUSH
74302: LD_INT 1
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 1
74311: NEG
74312: PUSH
74313: LD_INT 0
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 1
74322: NEG
74323: PUSH
74324: LD_INT 1
74326: NEG
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74341: LD_ADDR_VAR 0 63
74345: PUSH
74346: LD_INT 0
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PUSH
74356: LD_INT 0
74358: PUSH
74359: LD_INT 1
74361: NEG
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: LD_INT 1
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 1
74379: PUSH
74380: LD_INT 1
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 0
74389: PUSH
74390: LD_INT 1
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 1
74399: NEG
74400: PUSH
74401: LD_INT 0
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: LD_INT 1
74410: NEG
74411: PUSH
74412: LD_INT 1
74414: NEG
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74429: LD_ADDR_VAR 0 64
74433: PUSH
74434: LD_INT 0
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 0
74446: PUSH
74447: LD_INT 1
74449: NEG
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 1
74457: PUSH
74458: LD_INT 0
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 1
74467: PUSH
74468: LD_INT 1
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: PUSH
74475: LD_INT 0
74477: PUSH
74478: LD_INT 1
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: PUSH
74485: LD_INT 1
74487: NEG
74488: PUSH
74489: LD_INT 0
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 1
74498: NEG
74499: PUSH
74500: LD_INT 1
74502: NEG
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: ST_TO_ADDR
// end ; 1 :
74517: GO 80414
74519: LD_INT 1
74521: DOUBLE
74522: EQUAL
74523: IFTRUE 74527
74525: GO 77150
74527: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74528: LD_ADDR_VAR 0 11
74532: PUSH
74533: LD_INT 1
74535: NEG
74536: PUSH
74537: LD_INT 3
74539: NEG
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 0
74547: PUSH
74548: LD_INT 3
74550: NEG
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 1
74558: PUSH
74559: LD_INT 2
74561: NEG
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: LIST
74571: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74572: LD_ADDR_VAR 0 12
74576: PUSH
74577: LD_INT 2
74579: PUSH
74580: LD_INT 1
74582: NEG
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 3
74590: PUSH
74591: LD_INT 0
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 3
74600: PUSH
74601: LD_INT 1
74603: PUSH
74604: EMPTY
74605: LIST
74606: LIST
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: LIST
74612: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74613: LD_ADDR_VAR 0 13
74617: PUSH
74618: LD_INT 3
74620: PUSH
74621: LD_INT 2
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: PUSH
74628: LD_INT 3
74630: PUSH
74631: LD_INT 3
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: PUSH
74638: LD_INT 2
74640: PUSH
74641: LD_INT 3
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: LIST
74652: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74653: LD_ADDR_VAR 0 14
74657: PUSH
74658: LD_INT 1
74660: PUSH
74661: LD_INT 3
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 0
74670: PUSH
74671: LD_INT 3
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 1
74680: NEG
74681: PUSH
74682: LD_INT 2
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: LIST
74693: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74694: LD_ADDR_VAR 0 15
74698: PUSH
74699: LD_INT 2
74701: NEG
74702: PUSH
74703: LD_INT 1
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 3
74712: NEG
74713: PUSH
74714: LD_INT 0
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 3
74723: NEG
74724: PUSH
74725: LD_INT 1
74727: NEG
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: LIST
74737: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74738: LD_ADDR_VAR 0 16
74742: PUSH
74743: LD_INT 2
74745: NEG
74746: PUSH
74747: LD_INT 3
74749: NEG
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 3
74757: NEG
74758: PUSH
74759: LD_INT 2
74761: NEG
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: PUSH
74767: LD_INT 3
74769: NEG
74770: PUSH
74771: LD_INT 3
74773: NEG
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: LIST
74783: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74784: LD_ADDR_VAR 0 17
74788: PUSH
74789: LD_INT 1
74791: NEG
74792: PUSH
74793: LD_INT 3
74795: NEG
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 0
74803: PUSH
74804: LD_INT 3
74806: NEG
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 1
74814: PUSH
74815: LD_INT 2
74817: NEG
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: LIST
74827: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74828: LD_ADDR_VAR 0 18
74832: PUSH
74833: LD_INT 2
74835: PUSH
74836: LD_INT 1
74838: NEG
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: LD_INT 3
74846: PUSH
74847: LD_INT 0
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: PUSH
74854: LD_INT 3
74856: PUSH
74857: LD_INT 1
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: LIST
74868: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74869: LD_ADDR_VAR 0 19
74873: PUSH
74874: LD_INT 3
74876: PUSH
74877: LD_INT 2
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 3
74886: PUSH
74887: LD_INT 3
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: PUSH
74894: LD_INT 2
74896: PUSH
74897: LD_INT 3
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: LIST
74908: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74909: LD_ADDR_VAR 0 20
74913: PUSH
74914: LD_INT 1
74916: PUSH
74917: LD_INT 3
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 0
74926: PUSH
74927: LD_INT 3
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 1
74936: NEG
74937: PUSH
74938: LD_INT 2
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: LIST
74949: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74950: LD_ADDR_VAR 0 21
74954: PUSH
74955: LD_INT 2
74957: NEG
74958: PUSH
74959: LD_INT 1
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: LD_INT 3
74968: NEG
74969: PUSH
74970: LD_INT 0
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 3
74979: NEG
74980: PUSH
74981: LD_INT 1
74983: NEG
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: LIST
74993: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74994: LD_ADDR_VAR 0 22
74998: PUSH
74999: LD_INT 2
75001: NEG
75002: PUSH
75003: LD_INT 3
75005: NEG
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 3
75013: NEG
75014: PUSH
75015: LD_INT 2
75017: NEG
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: LD_INT 3
75025: NEG
75026: PUSH
75027: LD_INT 3
75029: NEG
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: LIST
75039: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
75040: LD_ADDR_VAR 0 23
75044: PUSH
75045: LD_INT 0
75047: PUSH
75048: LD_INT 3
75050: NEG
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: LD_INT 1
75058: NEG
75059: PUSH
75060: LD_INT 4
75062: NEG
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: PUSH
75068: LD_INT 1
75070: PUSH
75071: LD_INT 3
75073: NEG
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: LIST
75083: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
75084: LD_ADDR_VAR 0 24
75088: PUSH
75089: LD_INT 3
75091: PUSH
75092: LD_INT 0
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 3
75101: PUSH
75102: LD_INT 1
75104: NEG
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 4
75112: PUSH
75113: LD_INT 1
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: LIST
75124: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
75125: LD_ADDR_VAR 0 25
75129: PUSH
75130: LD_INT 3
75132: PUSH
75133: LD_INT 3
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 4
75142: PUSH
75143: LD_INT 3
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 3
75152: PUSH
75153: LD_INT 4
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: LIST
75164: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
75165: LD_ADDR_VAR 0 26
75169: PUSH
75170: LD_INT 0
75172: PUSH
75173: LD_INT 3
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 1
75182: PUSH
75183: LD_INT 4
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 1
75192: NEG
75193: PUSH
75194: LD_INT 3
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: LIST
75205: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
75206: LD_ADDR_VAR 0 27
75210: PUSH
75211: LD_INT 3
75213: NEG
75214: PUSH
75215: LD_INT 0
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 3
75224: NEG
75225: PUSH
75226: LD_INT 1
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 4
75235: NEG
75236: PUSH
75237: LD_INT 1
75239: NEG
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
75250: LD_ADDR_VAR 0 28
75254: PUSH
75255: LD_INT 3
75257: NEG
75258: PUSH
75259: LD_INT 3
75261: NEG
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 3
75269: NEG
75270: PUSH
75271: LD_INT 4
75273: NEG
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: PUSH
75279: LD_INT 4
75281: NEG
75282: PUSH
75283: LD_INT 3
75285: NEG
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: LIST
75295: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
75296: LD_ADDR_VAR 0 29
75300: PUSH
75301: LD_INT 1
75303: NEG
75304: PUSH
75305: LD_INT 3
75307: NEG
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 0
75315: PUSH
75316: LD_INT 3
75318: NEG
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 1
75326: PUSH
75327: LD_INT 2
75329: NEG
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: LD_INT 1
75337: NEG
75338: PUSH
75339: LD_INT 4
75341: NEG
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 0
75349: PUSH
75350: LD_INT 4
75352: NEG
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 1
75360: PUSH
75361: LD_INT 3
75363: NEG
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 1
75371: NEG
75372: PUSH
75373: LD_INT 5
75375: NEG
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: LD_INT 0
75383: PUSH
75384: LD_INT 5
75386: NEG
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 1
75394: PUSH
75395: LD_INT 4
75397: NEG
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 1
75405: NEG
75406: PUSH
75407: LD_INT 6
75409: NEG
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 0
75417: PUSH
75418: LD_INT 6
75420: NEG
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 1
75428: PUSH
75429: LD_INT 5
75431: NEG
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
75451: LD_ADDR_VAR 0 30
75455: PUSH
75456: LD_INT 2
75458: PUSH
75459: LD_INT 1
75461: NEG
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: PUSH
75467: LD_INT 3
75469: PUSH
75470: LD_INT 0
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PUSH
75477: LD_INT 3
75479: PUSH
75480: LD_INT 1
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 3
75489: PUSH
75490: LD_INT 1
75492: NEG
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PUSH
75498: LD_INT 4
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 4
75510: PUSH
75511: LD_INT 1
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 4
75520: PUSH
75521: LD_INT 1
75523: NEG
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 5
75531: PUSH
75532: LD_INT 0
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PUSH
75539: LD_INT 5
75541: PUSH
75542: LD_INT 1
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 5
75551: PUSH
75552: LD_INT 1
75554: NEG
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PUSH
75560: LD_INT 6
75562: PUSH
75563: LD_INT 0
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 6
75572: PUSH
75573: LD_INT 1
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
75594: LD_ADDR_VAR 0 31
75598: PUSH
75599: LD_INT 3
75601: PUSH
75602: LD_INT 2
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 3
75611: PUSH
75612: LD_INT 3
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: LD_INT 2
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PUSH
75629: LD_INT 4
75631: PUSH
75632: LD_INT 3
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 4
75641: PUSH
75642: LD_INT 4
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: PUSH
75649: LD_INT 3
75651: PUSH
75652: LD_INT 4
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PUSH
75659: LD_INT 5
75661: PUSH
75662: LD_INT 4
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: PUSH
75669: LD_INT 5
75671: PUSH
75672: LD_INT 5
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: PUSH
75679: LD_INT 4
75681: PUSH
75682: LD_INT 5
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: LD_INT 6
75691: PUSH
75692: LD_INT 5
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: LD_INT 6
75701: PUSH
75702: LD_INT 6
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 5
75711: PUSH
75712: LD_INT 6
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: LIST
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
75733: LD_ADDR_VAR 0 32
75737: PUSH
75738: LD_INT 1
75740: PUSH
75741: LD_INT 3
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_INT 0
75750: PUSH
75751: LD_INT 3
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: PUSH
75758: LD_INT 1
75760: NEG
75761: PUSH
75762: LD_INT 2
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: PUSH
75769: LD_INT 1
75771: PUSH
75772: LD_INT 4
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: LD_INT 0
75781: PUSH
75782: LD_INT 4
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: LD_INT 1
75791: NEG
75792: PUSH
75793: LD_INT 3
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: PUSH
75800: LD_INT 1
75802: PUSH
75803: LD_INT 5
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: LD_INT 0
75812: PUSH
75813: LD_INT 5
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 1
75822: NEG
75823: PUSH
75824: LD_INT 4
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: PUSH
75831: LD_INT 1
75833: PUSH
75834: LD_INT 6
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 0
75843: PUSH
75844: LD_INT 6
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 1
75853: NEG
75854: PUSH
75855: LD_INT 5
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
75876: LD_ADDR_VAR 0 33
75880: PUSH
75881: LD_INT 2
75883: NEG
75884: PUSH
75885: LD_INT 1
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: LD_INT 3
75894: NEG
75895: PUSH
75896: LD_INT 0
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: LD_INT 3
75905: NEG
75906: PUSH
75907: LD_INT 1
75909: NEG
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PUSH
75915: LD_INT 3
75917: NEG
75918: PUSH
75919: LD_INT 1
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 4
75928: NEG
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_INT 4
75939: NEG
75940: PUSH
75941: LD_INT 1
75943: NEG
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 4
75951: NEG
75952: PUSH
75953: LD_INT 1
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: LD_INT 5
75962: NEG
75963: PUSH
75964: LD_INT 0
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: PUSH
75971: LD_INT 5
75973: NEG
75974: PUSH
75975: LD_INT 1
75977: NEG
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: PUSH
75983: LD_INT 5
75985: NEG
75986: PUSH
75987: LD_INT 1
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: PUSH
75994: LD_INT 6
75996: NEG
75997: PUSH
75998: LD_INT 0
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_INT 6
76007: NEG
76008: PUSH
76009: LD_INT 1
76011: NEG
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
76031: LD_ADDR_VAR 0 34
76035: PUSH
76036: LD_INT 2
76038: NEG
76039: PUSH
76040: LD_INT 3
76042: NEG
76043: PUSH
76044: EMPTY
76045: LIST
76046: LIST
76047: PUSH
76048: LD_INT 3
76050: NEG
76051: PUSH
76052: LD_INT 2
76054: NEG
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: LD_INT 3
76062: NEG
76063: PUSH
76064: LD_INT 3
76066: NEG
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: LD_INT 3
76074: NEG
76075: PUSH
76076: LD_INT 4
76078: NEG
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: PUSH
76084: LD_INT 4
76086: NEG
76087: PUSH
76088: LD_INT 3
76090: NEG
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_INT 4
76098: NEG
76099: PUSH
76100: LD_INT 4
76102: NEG
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: PUSH
76108: LD_INT 4
76110: NEG
76111: PUSH
76112: LD_INT 5
76114: NEG
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PUSH
76120: LD_INT 5
76122: NEG
76123: PUSH
76124: LD_INT 4
76126: NEG
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_INT 5
76134: NEG
76135: PUSH
76136: LD_INT 5
76138: NEG
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 5
76146: NEG
76147: PUSH
76148: LD_INT 6
76150: NEG
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: LD_INT 6
76158: NEG
76159: PUSH
76160: LD_INT 5
76162: NEG
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 6
76170: NEG
76171: PUSH
76172: LD_INT 6
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
76194: LD_ADDR_VAR 0 41
76198: PUSH
76199: LD_INT 0
76201: PUSH
76202: LD_INT 2
76204: NEG
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 1
76212: NEG
76213: PUSH
76214: LD_INT 3
76216: NEG
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PUSH
76222: LD_INT 1
76224: PUSH
76225: LD_INT 2
76227: NEG
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: LIST
76237: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
76238: LD_ADDR_VAR 0 42
76242: PUSH
76243: LD_INT 2
76245: PUSH
76246: LD_INT 0
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: PUSH
76253: LD_INT 2
76255: PUSH
76256: LD_INT 1
76258: NEG
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: PUSH
76264: LD_INT 3
76266: PUSH
76267: LD_INT 1
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: LIST
76278: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
76279: LD_ADDR_VAR 0 43
76283: PUSH
76284: LD_INT 2
76286: PUSH
76287: LD_INT 2
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 3
76296: PUSH
76297: LD_INT 2
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: PUSH
76304: LD_INT 2
76306: PUSH
76307: LD_INT 3
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: LIST
76318: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
76319: LD_ADDR_VAR 0 44
76323: PUSH
76324: LD_INT 0
76326: PUSH
76327: LD_INT 2
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: LD_INT 1
76336: PUSH
76337: LD_INT 3
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: LD_INT 1
76346: NEG
76347: PUSH
76348: LD_INT 2
76350: PUSH
76351: EMPTY
76352: LIST
76353: LIST
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: LIST
76359: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76360: LD_ADDR_VAR 0 45
76364: PUSH
76365: LD_INT 2
76367: NEG
76368: PUSH
76369: LD_INT 0
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: PUSH
76376: LD_INT 2
76378: NEG
76379: PUSH
76380: LD_INT 1
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: LD_INT 3
76389: NEG
76390: PUSH
76391: LD_INT 1
76393: NEG
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: LIST
76403: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
76404: LD_ADDR_VAR 0 46
76408: PUSH
76409: LD_INT 2
76411: NEG
76412: PUSH
76413: LD_INT 2
76415: NEG
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 2
76423: NEG
76424: PUSH
76425: LD_INT 3
76427: NEG
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 3
76435: NEG
76436: PUSH
76437: LD_INT 2
76439: NEG
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: LIST
76449: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
76450: LD_ADDR_VAR 0 47
76454: PUSH
76455: LD_INT 2
76457: NEG
76458: PUSH
76459: LD_INT 3
76461: NEG
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: PUSH
76467: LD_INT 1
76469: NEG
76470: PUSH
76471: LD_INT 3
76473: NEG
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
76483: LD_ADDR_VAR 0 48
76487: PUSH
76488: LD_INT 1
76490: PUSH
76491: LD_INT 2
76493: NEG
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 2
76501: PUSH
76502: LD_INT 1
76504: NEG
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
76514: LD_ADDR_VAR 0 49
76518: PUSH
76519: LD_INT 3
76521: PUSH
76522: LD_INT 1
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 3
76531: PUSH
76532: LD_INT 2
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
76543: LD_ADDR_VAR 0 50
76547: PUSH
76548: LD_INT 2
76550: PUSH
76551: LD_INT 3
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: PUSH
76558: LD_INT 1
76560: PUSH
76561: LD_INT 3
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
76572: LD_ADDR_VAR 0 51
76576: PUSH
76577: LD_INT 1
76579: NEG
76580: PUSH
76581: LD_INT 2
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: PUSH
76588: LD_INT 2
76590: NEG
76591: PUSH
76592: LD_INT 1
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
76603: LD_ADDR_VAR 0 52
76607: PUSH
76608: LD_INT 3
76610: NEG
76611: PUSH
76612: LD_INT 1
76614: NEG
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: PUSH
76620: LD_INT 3
76622: NEG
76623: PUSH
76624: LD_INT 2
76626: NEG
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76636: LD_ADDR_VAR 0 53
76640: PUSH
76641: LD_INT 1
76643: NEG
76644: PUSH
76645: LD_INT 3
76647: NEG
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 0
76655: PUSH
76656: LD_INT 3
76658: NEG
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 1
76666: PUSH
76667: LD_INT 2
76669: NEG
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: LIST
76679: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76680: LD_ADDR_VAR 0 54
76684: PUSH
76685: LD_INT 2
76687: PUSH
76688: LD_INT 1
76690: NEG
76691: PUSH
76692: EMPTY
76693: LIST
76694: LIST
76695: PUSH
76696: LD_INT 3
76698: PUSH
76699: LD_INT 0
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 3
76708: PUSH
76709: LD_INT 1
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: LIST
76720: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76721: LD_ADDR_VAR 0 55
76725: PUSH
76726: LD_INT 3
76728: PUSH
76729: LD_INT 2
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: LD_INT 3
76738: PUSH
76739: LD_INT 3
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 2
76748: PUSH
76749: LD_INT 3
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: PUSH
76756: EMPTY
76757: LIST
76758: LIST
76759: LIST
76760: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76761: LD_ADDR_VAR 0 56
76765: PUSH
76766: LD_INT 1
76768: PUSH
76769: LD_INT 3
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 0
76778: PUSH
76779: LD_INT 3
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: LD_INT 1
76788: NEG
76789: PUSH
76790: LD_INT 2
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76802: LD_ADDR_VAR 0 57
76806: PUSH
76807: LD_INT 2
76809: NEG
76810: PUSH
76811: LD_INT 1
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 3
76820: NEG
76821: PUSH
76822: LD_INT 0
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: LD_INT 3
76831: NEG
76832: PUSH
76833: LD_INT 1
76835: NEG
76836: PUSH
76837: EMPTY
76838: LIST
76839: LIST
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: LIST
76845: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76846: LD_ADDR_VAR 0 58
76850: PUSH
76851: LD_INT 2
76853: NEG
76854: PUSH
76855: LD_INT 3
76857: NEG
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 3
76865: NEG
76866: PUSH
76867: LD_INT 2
76869: NEG
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PUSH
76875: LD_INT 3
76877: NEG
76878: PUSH
76879: LD_INT 3
76881: NEG
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: LIST
76891: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
76892: LD_ADDR_VAR 0 59
76896: PUSH
76897: LD_INT 1
76899: NEG
76900: PUSH
76901: LD_INT 2
76903: NEG
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PUSH
76909: LD_INT 0
76911: PUSH
76912: LD_INT 2
76914: NEG
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: PUSH
76920: LD_INT 1
76922: PUSH
76923: LD_INT 1
76925: NEG
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: PUSH
76931: EMPTY
76932: LIST
76933: LIST
76934: LIST
76935: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
76936: LD_ADDR_VAR 0 60
76940: PUSH
76941: LD_INT 1
76943: PUSH
76944: LD_INT 1
76946: NEG
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: PUSH
76952: LD_INT 2
76954: PUSH
76955: LD_INT 0
76957: PUSH
76958: EMPTY
76959: LIST
76960: LIST
76961: PUSH
76962: LD_INT 2
76964: PUSH
76965: LD_INT 1
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: LIST
76976: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
76977: LD_ADDR_VAR 0 61
76981: PUSH
76982: LD_INT 2
76984: PUSH
76985: LD_INT 1
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: LD_INT 2
76994: PUSH
76995: LD_INT 2
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 1
77004: PUSH
77005: LD_INT 2
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
77017: LD_ADDR_VAR 0 62
77021: PUSH
77022: LD_INT 1
77024: PUSH
77025: LD_INT 2
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 0
77034: PUSH
77035: LD_INT 2
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: PUSH
77042: LD_INT 1
77044: NEG
77045: PUSH
77046: LD_INT 1
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: LIST
77057: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
77058: LD_ADDR_VAR 0 63
77062: PUSH
77063: LD_INT 1
77065: NEG
77066: PUSH
77067: LD_INT 1
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: PUSH
77074: LD_INT 2
77076: NEG
77077: PUSH
77078: LD_INT 0
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PUSH
77085: LD_INT 2
77087: NEG
77088: PUSH
77089: LD_INT 1
77091: NEG
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: LIST
77101: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77102: LD_ADDR_VAR 0 64
77106: PUSH
77107: LD_INT 1
77109: NEG
77110: PUSH
77111: LD_INT 2
77113: NEG
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PUSH
77119: LD_INT 2
77121: NEG
77122: PUSH
77123: LD_INT 1
77125: NEG
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 2
77133: NEG
77134: PUSH
77135: LD_INT 2
77137: NEG
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: LIST
77147: ST_TO_ADDR
// end ; 2 :
77148: GO 80414
77150: LD_INT 2
77152: DOUBLE
77153: EQUAL
77154: IFTRUE 77158
77156: GO 80413
77158: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
77159: LD_ADDR_VAR 0 29
77163: PUSH
77164: LD_INT 4
77166: PUSH
77167: LD_INT 0
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: LD_INT 4
77176: PUSH
77177: LD_INT 1
77179: NEG
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 5
77187: PUSH
77188: LD_INT 0
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 5
77197: PUSH
77198: LD_INT 1
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PUSH
77205: LD_INT 4
77207: PUSH
77208: LD_INT 1
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 3
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: PUSH
77225: LD_INT 3
77227: PUSH
77228: LD_INT 1
77230: NEG
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PUSH
77236: LD_INT 3
77238: PUSH
77239: LD_INT 2
77241: NEG
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PUSH
77247: LD_INT 5
77249: PUSH
77250: LD_INT 2
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PUSH
77257: LD_INT 3
77259: PUSH
77260: LD_INT 3
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 3
77269: PUSH
77270: LD_INT 2
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 4
77279: PUSH
77280: LD_INT 3
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 4
77289: PUSH
77290: LD_INT 4
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: LD_INT 3
77299: PUSH
77300: LD_INT 4
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 2
77309: PUSH
77310: LD_INT 3
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: LD_INT 2
77319: PUSH
77320: LD_INT 2
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: PUSH
77327: LD_INT 4
77329: PUSH
77330: LD_INT 2
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: PUSH
77337: LD_INT 2
77339: PUSH
77340: LD_INT 4
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 0
77349: PUSH
77350: LD_INT 4
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PUSH
77357: LD_INT 0
77359: PUSH
77360: LD_INT 3
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 1
77369: PUSH
77370: LD_INT 4
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: PUSH
77377: LD_INT 1
77379: PUSH
77380: LD_INT 5
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: LD_INT 0
77389: PUSH
77390: LD_INT 5
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 1
77399: NEG
77400: PUSH
77401: LD_INT 4
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 1
77410: NEG
77411: PUSH
77412: LD_INT 3
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 2
77421: PUSH
77422: LD_INT 5
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: PUSH
77429: LD_INT 2
77431: NEG
77432: PUSH
77433: LD_INT 3
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: PUSH
77440: LD_INT 3
77442: NEG
77443: PUSH
77444: LD_INT 0
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: PUSH
77451: LD_INT 3
77453: NEG
77454: PUSH
77455: LD_INT 1
77457: NEG
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_INT 2
77465: NEG
77466: PUSH
77467: LD_INT 0
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PUSH
77474: LD_INT 2
77476: NEG
77477: PUSH
77478: LD_INT 1
77480: PUSH
77481: EMPTY
77482: LIST
77483: LIST
77484: PUSH
77485: LD_INT 3
77487: NEG
77488: PUSH
77489: LD_INT 1
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: PUSH
77496: LD_INT 4
77498: NEG
77499: PUSH
77500: LD_INT 0
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PUSH
77507: LD_INT 4
77509: NEG
77510: PUSH
77511: LD_INT 1
77513: NEG
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 4
77521: NEG
77522: PUSH
77523: LD_INT 2
77525: NEG
77526: PUSH
77527: EMPTY
77528: LIST
77529: LIST
77530: PUSH
77531: LD_INT 2
77533: NEG
77534: PUSH
77535: LD_INT 2
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 4
77544: NEG
77545: PUSH
77546: LD_INT 4
77548: NEG
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PUSH
77554: LD_INT 4
77556: NEG
77557: PUSH
77558: LD_INT 5
77560: NEG
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: PUSH
77566: LD_INT 3
77568: NEG
77569: PUSH
77570: LD_INT 4
77572: NEG
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 3
77580: NEG
77581: PUSH
77582: LD_INT 3
77584: NEG
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: PUSH
77590: LD_INT 4
77592: NEG
77593: PUSH
77594: LD_INT 3
77596: NEG
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 5
77604: NEG
77605: PUSH
77606: LD_INT 4
77608: NEG
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: PUSH
77614: LD_INT 5
77616: NEG
77617: PUSH
77618: LD_INT 5
77620: NEG
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: LD_INT 3
77628: NEG
77629: PUSH
77630: LD_INT 5
77632: NEG
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 5
77640: NEG
77641: PUSH
77642: LD_INT 3
77644: NEG
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: LIST
77654: LIST
77655: LIST
77656: LIST
77657: LIST
77658: LIST
77659: LIST
77660: LIST
77661: LIST
77662: LIST
77663: LIST
77664: LIST
77665: LIST
77666: LIST
77667: LIST
77668: LIST
77669: LIST
77670: LIST
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: LIST
77676: LIST
77677: LIST
77678: LIST
77679: LIST
77680: LIST
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: LIST
77686: LIST
77687: LIST
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: LIST
77694: LIST
77695: LIST
77696: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
77697: LD_ADDR_VAR 0 30
77701: PUSH
77702: LD_INT 4
77704: PUSH
77705: LD_INT 4
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PUSH
77712: LD_INT 4
77714: PUSH
77715: LD_INT 3
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 5
77724: PUSH
77725: LD_INT 4
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: LD_INT 5
77734: PUSH
77735: LD_INT 5
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PUSH
77742: LD_INT 4
77744: PUSH
77745: LD_INT 5
77747: PUSH
77748: EMPTY
77749: LIST
77750: LIST
77751: PUSH
77752: LD_INT 3
77754: PUSH
77755: LD_INT 4
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: LD_INT 3
77764: PUSH
77765: LD_INT 3
77767: PUSH
77768: EMPTY
77769: LIST
77770: LIST
77771: PUSH
77772: LD_INT 5
77774: PUSH
77775: LD_INT 3
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PUSH
77782: LD_INT 3
77784: PUSH
77785: LD_INT 5
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: LD_INT 0
77794: PUSH
77795: LD_INT 3
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: PUSH
77802: LD_INT 0
77804: PUSH
77805: LD_INT 2
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: PUSH
77812: LD_INT 1
77814: PUSH
77815: LD_INT 3
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: PUSH
77822: LD_INT 1
77824: PUSH
77825: LD_INT 4
77827: PUSH
77828: EMPTY
77829: LIST
77830: LIST
77831: PUSH
77832: LD_INT 0
77834: PUSH
77835: LD_INT 4
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: PUSH
77842: LD_INT 1
77844: NEG
77845: PUSH
77846: LD_INT 3
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: PUSH
77853: LD_INT 1
77855: NEG
77856: PUSH
77857: LD_INT 2
77859: PUSH
77860: EMPTY
77861: LIST
77862: LIST
77863: PUSH
77864: LD_INT 2
77866: PUSH
77867: LD_INT 4
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 2
77876: NEG
77877: PUSH
77878: LD_INT 2
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PUSH
77885: LD_INT 4
77887: NEG
77888: PUSH
77889: LD_INT 0
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: PUSH
77896: LD_INT 4
77898: NEG
77899: PUSH
77900: LD_INT 1
77902: NEG
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PUSH
77908: LD_INT 3
77910: NEG
77911: PUSH
77912: LD_INT 0
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: PUSH
77919: LD_INT 3
77921: NEG
77922: PUSH
77923: LD_INT 1
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: PUSH
77930: LD_INT 4
77932: NEG
77933: PUSH
77934: LD_INT 1
77936: PUSH
77937: EMPTY
77938: LIST
77939: LIST
77940: PUSH
77941: LD_INT 5
77943: NEG
77944: PUSH
77945: LD_INT 0
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: PUSH
77952: LD_INT 5
77954: NEG
77955: PUSH
77956: LD_INT 1
77958: NEG
77959: PUSH
77960: EMPTY
77961: LIST
77962: LIST
77963: PUSH
77964: LD_INT 5
77966: NEG
77967: PUSH
77968: LD_INT 2
77970: NEG
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: PUSH
77976: LD_INT 3
77978: NEG
77979: PUSH
77980: LD_INT 2
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: LD_INT 3
77989: NEG
77990: PUSH
77991: LD_INT 3
77993: NEG
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PUSH
77999: LD_INT 3
78001: NEG
78002: PUSH
78003: LD_INT 4
78005: NEG
78006: PUSH
78007: EMPTY
78008: LIST
78009: LIST
78010: PUSH
78011: LD_INT 2
78013: NEG
78014: PUSH
78015: LD_INT 3
78017: NEG
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 2
78025: NEG
78026: PUSH
78027: LD_INT 2
78029: NEG
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 3
78037: NEG
78038: PUSH
78039: LD_INT 2
78041: NEG
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PUSH
78047: LD_INT 4
78049: NEG
78050: PUSH
78051: LD_INT 3
78053: NEG
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: PUSH
78059: LD_INT 4
78061: NEG
78062: PUSH
78063: LD_INT 4
78065: NEG
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: PUSH
78071: LD_INT 2
78073: NEG
78074: PUSH
78075: LD_INT 4
78077: NEG
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: PUSH
78083: LD_INT 4
78085: NEG
78086: PUSH
78087: LD_INT 2
78089: NEG
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: LD_INT 0
78097: PUSH
78098: LD_INT 4
78100: NEG
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 0
78108: PUSH
78109: LD_INT 5
78111: NEG
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 1
78119: PUSH
78120: LD_INT 4
78122: NEG
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PUSH
78128: LD_INT 1
78130: PUSH
78131: LD_INT 3
78133: NEG
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: PUSH
78139: LD_INT 0
78141: PUSH
78142: LD_INT 3
78144: NEG
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: PUSH
78150: LD_INT 1
78152: NEG
78153: PUSH
78154: LD_INT 4
78156: NEG
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PUSH
78162: LD_INT 1
78164: NEG
78165: PUSH
78166: LD_INT 5
78168: NEG
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: PUSH
78174: LD_INT 2
78176: PUSH
78177: LD_INT 3
78179: NEG
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: PUSH
78185: LD_INT 2
78187: NEG
78188: PUSH
78189: LD_INT 5
78191: NEG
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: LIST
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: LIST
78238: LIST
78239: LIST
78240: LIST
78241: LIST
78242: LIST
78243: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
78244: LD_ADDR_VAR 0 31
78248: PUSH
78249: LD_INT 0
78251: PUSH
78252: LD_INT 4
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 0
78261: PUSH
78262: LD_INT 3
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: PUSH
78269: LD_INT 1
78271: PUSH
78272: LD_INT 4
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: LD_INT 1
78281: PUSH
78282: LD_INT 5
78284: PUSH
78285: EMPTY
78286: LIST
78287: LIST
78288: PUSH
78289: LD_INT 0
78291: PUSH
78292: LD_INT 5
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: PUSH
78299: LD_INT 1
78301: NEG
78302: PUSH
78303: LD_INT 4
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: PUSH
78310: LD_INT 1
78312: NEG
78313: PUSH
78314: LD_INT 3
78316: PUSH
78317: EMPTY
78318: LIST
78319: LIST
78320: PUSH
78321: LD_INT 2
78323: PUSH
78324: LD_INT 5
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: LD_INT 2
78333: NEG
78334: PUSH
78335: LD_INT 3
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: LD_INT 3
78344: NEG
78345: PUSH
78346: LD_INT 0
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PUSH
78353: LD_INT 3
78355: NEG
78356: PUSH
78357: LD_INT 1
78359: NEG
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: PUSH
78365: LD_INT 2
78367: NEG
78368: PUSH
78369: LD_INT 0
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 2
78378: NEG
78379: PUSH
78380: LD_INT 1
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 3
78389: NEG
78390: PUSH
78391: LD_INT 1
78393: PUSH
78394: EMPTY
78395: LIST
78396: LIST
78397: PUSH
78398: LD_INT 4
78400: NEG
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 4
78411: NEG
78412: PUSH
78413: LD_INT 1
78415: NEG
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PUSH
78421: LD_INT 4
78423: NEG
78424: PUSH
78425: LD_INT 2
78427: NEG
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PUSH
78433: LD_INT 2
78435: NEG
78436: PUSH
78437: LD_INT 2
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: PUSH
78444: LD_INT 4
78446: NEG
78447: PUSH
78448: LD_INT 4
78450: NEG
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: PUSH
78456: LD_INT 4
78458: NEG
78459: PUSH
78460: LD_INT 5
78462: NEG
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: PUSH
78468: LD_INT 3
78470: NEG
78471: PUSH
78472: LD_INT 4
78474: NEG
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: LD_INT 3
78482: NEG
78483: PUSH
78484: LD_INT 3
78486: NEG
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 4
78494: NEG
78495: PUSH
78496: LD_INT 3
78498: NEG
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: LD_INT 5
78506: NEG
78507: PUSH
78508: LD_INT 4
78510: NEG
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: PUSH
78516: LD_INT 5
78518: NEG
78519: PUSH
78520: LD_INT 5
78522: NEG
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: PUSH
78528: LD_INT 3
78530: NEG
78531: PUSH
78532: LD_INT 5
78534: NEG
78535: PUSH
78536: EMPTY
78537: LIST
78538: LIST
78539: PUSH
78540: LD_INT 5
78542: NEG
78543: PUSH
78544: LD_INT 3
78546: NEG
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PUSH
78552: LD_INT 0
78554: PUSH
78555: LD_INT 3
78557: NEG
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PUSH
78563: LD_INT 0
78565: PUSH
78566: LD_INT 4
78568: NEG
78569: PUSH
78570: EMPTY
78571: LIST
78572: LIST
78573: PUSH
78574: LD_INT 1
78576: PUSH
78577: LD_INT 3
78579: NEG
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: PUSH
78585: LD_INT 1
78587: PUSH
78588: LD_INT 2
78590: NEG
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: PUSH
78596: LD_INT 0
78598: PUSH
78599: LD_INT 2
78601: NEG
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PUSH
78607: LD_INT 1
78609: NEG
78610: PUSH
78611: LD_INT 3
78613: NEG
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: PUSH
78619: LD_INT 1
78621: NEG
78622: PUSH
78623: LD_INT 4
78625: NEG
78626: PUSH
78627: EMPTY
78628: LIST
78629: LIST
78630: PUSH
78631: LD_INT 2
78633: PUSH
78634: LD_INT 2
78636: NEG
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: LD_INT 2
78644: NEG
78645: PUSH
78646: LD_INT 4
78648: NEG
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: PUSH
78654: LD_INT 4
78656: PUSH
78657: LD_INT 0
78659: PUSH
78660: EMPTY
78661: LIST
78662: LIST
78663: PUSH
78664: LD_INT 4
78666: PUSH
78667: LD_INT 1
78669: NEG
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PUSH
78675: LD_INT 5
78677: PUSH
78678: LD_INT 0
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: PUSH
78685: LD_INT 5
78687: PUSH
78688: LD_INT 1
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: PUSH
78695: LD_INT 4
78697: PUSH
78698: LD_INT 1
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: PUSH
78705: LD_INT 3
78707: PUSH
78708: LD_INT 0
78710: PUSH
78711: EMPTY
78712: LIST
78713: LIST
78714: PUSH
78715: LD_INT 3
78717: PUSH
78718: LD_INT 1
78720: NEG
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: PUSH
78726: LD_INT 3
78728: PUSH
78729: LD_INT 2
78731: NEG
78732: PUSH
78733: EMPTY
78734: LIST
78735: LIST
78736: PUSH
78737: LD_INT 5
78739: PUSH
78740: LD_INT 2
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: LIST
78757: LIST
78758: LIST
78759: LIST
78760: LIST
78761: LIST
78762: LIST
78763: LIST
78764: LIST
78765: LIST
78766: LIST
78767: LIST
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: LIST
78791: LIST
78792: LIST
78793: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
78794: LD_ADDR_VAR 0 32
78798: PUSH
78799: LD_INT 4
78801: NEG
78802: PUSH
78803: LD_INT 0
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: PUSH
78810: LD_INT 4
78812: NEG
78813: PUSH
78814: LD_INT 1
78816: NEG
78817: PUSH
78818: EMPTY
78819: LIST
78820: LIST
78821: PUSH
78822: LD_INT 3
78824: NEG
78825: PUSH
78826: LD_INT 0
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: PUSH
78833: LD_INT 3
78835: NEG
78836: PUSH
78837: LD_INT 1
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: PUSH
78844: LD_INT 4
78846: NEG
78847: PUSH
78848: LD_INT 1
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: PUSH
78855: LD_INT 5
78857: NEG
78858: PUSH
78859: LD_INT 0
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: PUSH
78866: LD_INT 5
78868: NEG
78869: PUSH
78870: LD_INT 1
78872: NEG
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: PUSH
78878: LD_INT 5
78880: NEG
78881: PUSH
78882: LD_INT 2
78884: NEG
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 3
78892: NEG
78893: PUSH
78894: LD_INT 2
78896: PUSH
78897: EMPTY
78898: LIST
78899: LIST
78900: PUSH
78901: LD_INT 3
78903: NEG
78904: PUSH
78905: LD_INT 3
78907: NEG
78908: PUSH
78909: EMPTY
78910: LIST
78911: LIST
78912: PUSH
78913: LD_INT 3
78915: NEG
78916: PUSH
78917: LD_INT 4
78919: NEG
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: PUSH
78925: LD_INT 2
78927: NEG
78928: PUSH
78929: LD_INT 3
78931: NEG
78932: PUSH
78933: EMPTY
78934: LIST
78935: LIST
78936: PUSH
78937: LD_INT 2
78939: NEG
78940: PUSH
78941: LD_INT 2
78943: NEG
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PUSH
78949: LD_INT 3
78951: NEG
78952: PUSH
78953: LD_INT 2
78955: NEG
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: PUSH
78961: LD_INT 4
78963: NEG
78964: PUSH
78965: LD_INT 3
78967: NEG
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: PUSH
78973: LD_INT 4
78975: NEG
78976: PUSH
78977: LD_INT 4
78979: NEG
78980: PUSH
78981: EMPTY
78982: LIST
78983: LIST
78984: PUSH
78985: LD_INT 2
78987: NEG
78988: PUSH
78989: LD_INT 4
78991: NEG
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: PUSH
78997: LD_INT 4
78999: NEG
79000: PUSH
79001: LD_INT 2
79003: NEG
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PUSH
79009: LD_INT 0
79011: PUSH
79012: LD_INT 4
79014: NEG
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 0
79022: PUSH
79023: LD_INT 5
79025: NEG
79026: PUSH
79027: EMPTY
79028: LIST
79029: LIST
79030: PUSH
79031: LD_INT 1
79033: PUSH
79034: LD_INT 4
79036: NEG
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 1
79044: PUSH
79045: LD_INT 3
79047: NEG
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: PUSH
79053: LD_INT 0
79055: PUSH
79056: LD_INT 3
79058: NEG
79059: PUSH
79060: EMPTY
79061: LIST
79062: LIST
79063: PUSH
79064: LD_INT 1
79066: NEG
79067: PUSH
79068: LD_INT 4
79070: NEG
79071: PUSH
79072: EMPTY
79073: LIST
79074: LIST
79075: PUSH
79076: LD_INT 1
79078: NEG
79079: PUSH
79080: LD_INT 5
79082: NEG
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: PUSH
79088: LD_INT 2
79090: PUSH
79091: LD_INT 3
79093: NEG
79094: PUSH
79095: EMPTY
79096: LIST
79097: LIST
79098: PUSH
79099: LD_INT 2
79101: NEG
79102: PUSH
79103: LD_INT 5
79105: NEG
79106: PUSH
79107: EMPTY
79108: LIST
79109: LIST
79110: PUSH
79111: LD_INT 3
79113: PUSH
79114: LD_INT 0
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: PUSH
79121: LD_INT 3
79123: PUSH
79124: LD_INT 1
79126: NEG
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: PUSH
79132: LD_INT 4
79134: PUSH
79135: LD_INT 0
79137: PUSH
79138: EMPTY
79139: LIST
79140: LIST
79141: PUSH
79142: LD_INT 4
79144: PUSH
79145: LD_INT 1
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 3
79154: PUSH
79155: LD_INT 1
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 2
79164: PUSH
79165: LD_INT 0
79167: PUSH
79168: EMPTY
79169: LIST
79170: LIST
79171: PUSH
79172: LD_INT 2
79174: PUSH
79175: LD_INT 1
79177: NEG
79178: PUSH
79179: EMPTY
79180: LIST
79181: LIST
79182: PUSH
79183: LD_INT 2
79185: PUSH
79186: LD_INT 2
79188: NEG
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PUSH
79194: LD_INT 4
79196: PUSH
79197: LD_INT 2
79199: PUSH
79200: EMPTY
79201: LIST
79202: LIST
79203: PUSH
79204: LD_INT 4
79206: PUSH
79207: LD_INT 4
79209: PUSH
79210: EMPTY
79211: LIST
79212: LIST
79213: PUSH
79214: LD_INT 4
79216: PUSH
79217: LD_INT 3
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PUSH
79224: LD_INT 5
79226: PUSH
79227: LD_INT 4
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: PUSH
79234: LD_INT 5
79236: PUSH
79237: LD_INT 5
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: PUSH
79244: LD_INT 4
79246: PUSH
79247: LD_INT 5
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: PUSH
79254: LD_INT 3
79256: PUSH
79257: LD_INT 4
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 3
79266: PUSH
79267: LD_INT 3
79269: PUSH
79270: EMPTY
79271: LIST
79272: LIST
79273: PUSH
79274: LD_INT 5
79276: PUSH
79277: LD_INT 3
79279: PUSH
79280: EMPTY
79281: LIST
79282: LIST
79283: PUSH
79284: LD_INT 3
79286: PUSH
79287: LD_INT 5
79289: PUSH
79290: EMPTY
79291: LIST
79292: LIST
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: LIST
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
79341: LD_ADDR_VAR 0 33
79345: PUSH
79346: LD_INT 4
79348: NEG
79349: PUSH
79350: LD_INT 4
79352: NEG
79353: PUSH
79354: EMPTY
79355: LIST
79356: LIST
79357: PUSH
79358: LD_INT 4
79360: NEG
79361: PUSH
79362: LD_INT 5
79364: NEG
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: PUSH
79370: LD_INT 3
79372: NEG
79373: PUSH
79374: LD_INT 4
79376: NEG
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: PUSH
79382: LD_INT 3
79384: NEG
79385: PUSH
79386: LD_INT 3
79388: NEG
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PUSH
79394: LD_INT 4
79396: NEG
79397: PUSH
79398: LD_INT 3
79400: NEG
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: PUSH
79406: LD_INT 5
79408: NEG
79409: PUSH
79410: LD_INT 4
79412: NEG
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: LD_INT 5
79420: NEG
79421: PUSH
79422: LD_INT 5
79424: NEG
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: PUSH
79430: LD_INT 3
79432: NEG
79433: PUSH
79434: LD_INT 5
79436: NEG
79437: PUSH
79438: EMPTY
79439: LIST
79440: LIST
79441: PUSH
79442: LD_INT 5
79444: NEG
79445: PUSH
79446: LD_INT 3
79448: NEG
79449: PUSH
79450: EMPTY
79451: LIST
79452: LIST
79453: PUSH
79454: LD_INT 0
79456: PUSH
79457: LD_INT 3
79459: NEG
79460: PUSH
79461: EMPTY
79462: LIST
79463: LIST
79464: PUSH
79465: LD_INT 0
79467: PUSH
79468: LD_INT 4
79470: NEG
79471: PUSH
79472: EMPTY
79473: LIST
79474: LIST
79475: PUSH
79476: LD_INT 1
79478: PUSH
79479: LD_INT 3
79481: NEG
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: PUSH
79487: LD_INT 1
79489: PUSH
79490: LD_INT 2
79492: NEG
79493: PUSH
79494: EMPTY
79495: LIST
79496: LIST
79497: PUSH
79498: LD_INT 0
79500: PUSH
79501: LD_INT 2
79503: NEG
79504: PUSH
79505: EMPTY
79506: LIST
79507: LIST
79508: PUSH
79509: LD_INT 1
79511: NEG
79512: PUSH
79513: LD_INT 3
79515: NEG
79516: PUSH
79517: EMPTY
79518: LIST
79519: LIST
79520: PUSH
79521: LD_INT 1
79523: NEG
79524: PUSH
79525: LD_INT 4
79527: NEG
79528: PUSH
79529: EMPTY
79530: LIST
79531: LIST
79532: PUSH
79533: LD_INT 2
79535: PUSH
79536: LD_INT 2
79538: NEG
79539: PUSH
79540: EMPTY
79541: LIST
79542: LIST
79543: PUSH
79544: LD_INT 2
79546: NEG
79547: PUSH
79548: LD_INT 4
79550: NEG
79551: PUSH
79552: EMPTY
79553: LIST
79554: LIST
79555: PUSH
79556: LD_INT 4
79558: PUSH
79559: LD_INT 0
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: PUSH
79566: LD_INT 4
79568: PUSH
79569: LD_INT 1
79571: NEG
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: PUSH
79577: LD_INT 5
79579: PUSH
79580: LD_INT 0
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 5
79589: PUSH
79590: LD_INT 1
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: PUSH
79597: LD_INT 4
79599: PUSH
79600: LD_INT 1
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: PUSH
79607: LD_INT 3
79609: PUSH
79610: LD_INT 0
79612: PUSH
79613: EMPTY
79614: LIST
79615: LIST
79616: PUSH
79617: LD_INT 3
79619: PUSH
79620: LD_INT 1
79622: NEG
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: PUSH
79628: LD_INT 3
79630: PUSH
79631: LD_INT 2
79633: NEG
79634: PUSH
79635: EMPTY
79636: LIST
79637: LIST
79638: PUSH
79639: LD_INT 5
79641: PUSH
79642: LD_INT 2
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: PUSH
79649: LD_INT 3
79651: PUSH
79652: LD_INT 3
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PUSH
79659: LD_INT 3
79661: PUSH
79662: LD_INT 2
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: PUSH
79669: LD_INT 4
79671: PUSH
79672: LD_INT 3
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: PUSH
79679: LD_INT 4
79681: PUSH
79682: LD_INT 4
79684: PUSH
79685: EMPTY
79686: LIST
79687: LIST
79688: PUSH
79689: LD_INT 3
79691: PUSH
79692: LD_INT 4
79694: PUSH
79695: EMPTY
79696: LIST
79697: LIST
79698: PUSH
79699: LD_INT 2
79701: PUSH
79702: LD_INT 3
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 2
79711: PUSH
79712: LD_INT 2
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: LD_INT 4
79721: PUSH
79722: LD_INT 2
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PUSH
79729: LD_INT 2
79731: PUSH
79732: LD_INT 4
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: PUSH
79739: LD_INT 0
79741: PUSH
79742: LD_INT 4
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 0
79751: PUSH
79752: LD_INT 3
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: PUSH
79759: LD_INT 1
79761: PUSH
79762: LD_INT 4
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 1
79771: PUSH
79772: LD_INT 5
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: PUSH
79779: LD_INT 0
79781: PUSH
79782: LD_INT 5
79784: PUSH
79785: EMPTY
79786: LIST
79787: LIST
79788: PUSH
79789: LD_INT 1
79791: NEG
79792: PUSH
79793: LD_INT 4
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 1
79802: NEG
79803: PUSH
79804: LD_INT 3
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PUSH
79811: LD_INT 2
79813: PUSH
79814: LD_INT 5
79816: PUSH
79817: EMPTY
79818: LIST
79819: LIST
79820: PUSH
79821: LD_INT 2
79823: NEG
79824: PUSH
79825: LD_INT 3
79827: PUSH
79828: EMPTY
79829: LIST
79830: LIST
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: LIST
79839: LIST
79840: LIST
79841: LIST
79842: LIST
79843: LIST
79844: LIST
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: LIST
79851: LIST
79852: LIST
79853: LIST
79854: LIST
79855: LIST
79856: LIST
79857: LIST
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: LIST
79872: LIST
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: LIST
79878: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
79879: LD_ADDR_VAR 0 34
79883: PUSH
79884: LD_INT 0
79886: PUSH
79887: LD_INT 4
79889: NEG
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 0
79897: PUSH
79898: LD_INT 5
79900: NEG
79901: PUSH
79902: EMPTY
79903: LIST
79904: LIST
79905: PUSH
79906: LD_INT 1
79908: PUSH
79909: LD_INT 4
79911: NEG
79912: PUSH
79913: EMPTY
79914: LIST
79915: LIST
79916: PUSH
79917: LD_INT 1
79919: PUSH
79920: LD_INT 3
79922: NEG
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: PUSH
79928: LD_INT 0
79930: PUSH
79931: LD_INT 3
79933: NEG
79934: PUSH
79935: EMPTY
79936: LIST
79937: LIST
79938: PUSH
79939: LD_INT 1
79941: NEG
79942: PUSH
79943: LD_INT 4
79945: NEG
79946: PUSH
79947: EMPTY
79948: LIST
79949: LIST
79950: PUSH
79951: LD_INT 1
79953: NEG
79954: PUSH
79955: LD_INT 5
79957: NEG
79958: PUSH
79959: EMPTY
79960: LIST
79961: LIST
79962: PUSH
79963: LD_INT 2
79965: PUSH
79966: LD_INT 3
79968: NEG
79969: PUSH
79970: EMPTY
79971: LIST
79972: LIST
79973: PUSH
79974: LD_INT 2
79976: NEG
79977: PUSH
79978: LD_INT 5
79980: NEG
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PUSH
79986: LD_INT 3
79988: PUSH
79989: LD_INT 0
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: PUSH
79996: LD_INT 3
79998: PUSH
79999: LD_INT 1
80001: NEG
80002: PUSH
80003: EMPTY
80004: LIST
80005: LIST
80006: PUSH
80007: LD_INT 4
80009: PUSH
80010: LD_INT 0
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: PUSH
80017: LD_INT 4
80019: PUSH
80020: LD_INT 1
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: PUSH
80027: LD_INT 3
80029: PUSH
80030: LD_INT 1
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: PUSH
80037: LD_INT 2
80039: PUSH
80040: LD_INT 0
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 2
80049: PUSH
80050: LD_INT 1
80052: NEG
80053: PUSH
80054: EMPTY
80055: LIST
80056: LIST
80057: PUSH
80058: LD_INT 2
80060: PUSH
80061: LD_INT 2
80063: NEG
80064: PUSH
80065: EMPTY
80066: LIST
80067: LIST
80068: PUSH
80069: LD_INT 4
80071: PUSH
80072: LD_INT 2
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: PUSH
80079: LD_INT 4
80081: PUSH
80082: LD_INT 4
80084: PUSH
80085: EMPTY
80086: LIST
80087: LIST
80088: PUSH
80089: LD_INT 4
80091: PUSH
80092: LD_INT 3
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: PUSH
80099: LD_INT 5
80101: PUSH
80102: LD_INT 4
80104: PUSH
80105: EMPTY
80106: LIST
80107: LIST
80108: PUSH
80109: LD_INT 5
80111: PUSH
80112: LD_INT 5
80114: PUSH
80115: EMPTY
80116: LIST
80117: LIST
80118: PUSH
80119: LD_INT 4
80121: PUSH
80122: LD_INT 5
80124: PUSH
80125: EMPTY
80126: LIST
80127: LIST
80128: PUSH
80129: LD_INT 3
80131: PUSH
80132: LD_INT 4
80134: PUSH
80135: EMPTY
80136: LIST
80137: LIST
80138: PUSH
80139: LD_INT 3
80141: PUSH
80142: LD_INT 3
80144: PUSH
80145: EMPTY
80146: LIST
80147: LIST
80148: PUSH
80149: LD_INT 5
80151: PUSH
80152: LD_INT 3
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: PUSH
80159: LD_INT 3
80161: PUSH
80162: LD_INT 5
80164: PUSH
80165: EMPTY
80166: LIST
80167: LIST
80168: PUSH
80169: LD_INT 0
80171: PUSH
80172: LD_INT 3
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 0
80181: PUSH
80182: LD_INT 2
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: LD_INT 1
80191: PUSH
80192: LD_INT 3
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: PUSH
80199: LD_INT 1
80201: PUSH
80202: LD_INT 4
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PUSH
80209: LD_INT 0
80211: PUSH
80212: LD_INT 4
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PUSH
80219: LD_INT 1
80221: NEG
80222: PUSH
80223: LD_INT 3
80225: PUSH
80226: EMPTY
80227: LIST
80228: LIST
80229: PUSH
80230: LD_INT 1
80232: NEG
80233: PUSH
80234: LD_INT 2
80236: PUSH
80237: EMPTY
80238: LIST
80239: LIST
80240: PUSH
80241: LD_INT 2
80243: PUSH
80244: LD_INT 4
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PUSH
80251: LD_INT 2
80253: NEG
80254: PUSH
80255: LD_INT 2
80257: PUSH
80258: EMPTY
80259: LIST
80260: LIST
80261: PUSH
80262: LD_INT 4
80264: NEG
80265: PUSH
80266: LD_INT 0
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PUSH
80273: LD_INT 4
80275: NEG
80276: PUSH
80277: LD_INT 1
80279: NEG
80280: PUSH
80281: EMPTY
80282: LIST
80283: LIST
80284: PUSH
80285: LD_INT 3
80287: NEG
80288: PUSH
80289: LD_INT 0
80291: PUSH
80292: EMPTY
80293: LIST
80294: LIST
80295: PUSH
80296: LD_INT 3
80298: NEG
80299: PUSH
80300: LD_INT 1
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: PUSH
80307: LD_INT 4
80309: NEG
80310: PUSH
80311: LD_INT 1
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 5
80320: NEG
80321: PUSH
80322: LD_INT 0
80324: PUSH
80325: EMPTY
80326: LIST
80327: LIST
80328: PUSH
80329: LD_INT 5
80331: NEG
80332: PUSH
80333: LD_INT 1
80335: NEG
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PUSH
80341: LD_INT 5
80343: NEG
80344: PUSH
80345: LD_INT 2
80347: NEG
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: PUSH
80353: LD_INT 3
80355: NEG
80356: PUSH
80357: LD_INT 2
80359: PUSH
80360: EMPTY
80361: LIST
80362: LIST
80363: PUSH
80364: EMPTY
80365: LIST
80366: LIST
80367: LIST
80368: LIST
80369: LIST
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: LIST
80375: LIST
80376: LIST
80377: LIST
80378: LIST
80379: LIST
80380: LIST
80381: LIST
80382: LIST
80383: LIST
80384: LIST
80385: LIST
80386: LIST
80387: LIST
80388: LIST
80389: LIST
80390: LIST
80391: LIST
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: LIST
80397: LIST
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: ST_TO_ADDR
// end ; end ;
80411: GO 80414
80413: POP
// case btype of b_depot , b_warehouse :
80414: LD_VAR 0 1
80418: PUSH
80419: LD_INT 0
80421: DOUBLE
80422: EQUAL
80423: IFTRUE 80433
80425: LD_INT 1
80427: DOUBLE
80428: EQUAL
80429: IFTRUE 80433
80431: GO 80634
80433: POP
// case nation of nation_american :
80434: LD_VAR 0 5
80438: PUSH
80439: LD_INT 1
80441: DOUBLE
80442: EQUAL
80443: IFTRUE 80447
80445: GO 80503
80447: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
80448: LD_ADDR_VAR 0 9
80452: PUSH
80453: LD_VAR 0 11
80457: PUSH
80458: LD_VAR 0 12
80462: PUSH
80463: LD_VAR 0 13
80467: PUSH
80468: LD_VAR 0 14
80472: PUSH
80473: LD_VAR 0 15
80477: PUSH
80478: LD_VAR 0 16
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: PUSH
80491: LD_VAR 0 4
80495: PUSH
80496: LD_INT 1
80498: PLUS
80499: ARRAY
80500: ST_TO_ADDR
80501: GO 80632
80503: LD_INT 2
80505: DOUBLE
80506: EQUAL
80507: IFTRUE 80511
80509: GO 80567
80511: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
80512: LD_ADDR_VAR 0 9
80516: PUSH
80517: LD_VAR 0 17
80521: PUSH
80522: LD_VAR 0 18
80526: PUSH
80527: LD_VAR 0 19
80531: PUSH
80532: LD_VAR 0 20
80536: PUSH
80537: LD_VAR 0 21
80541: PUSH
80542: LD_VAR 0 22
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: PUSH
80555: LD_VAR 0 4
80559: PUSH
80560: LD_INT 1
80562: PLUS
80563: ARRAY
80564: ST_TO_ADDR
80565: GO 80632
80567: LD_INT 3
80569: DOUBLE
80570: EQUAL
80571: IFTRUE 80575
80573: GO 80631
80575: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
80576: LD_ADDR_VAR 0 9
80580: PUSH
80581: LD_VAR 0 23
80585: PUSH
80586: LD_VAR 0 24
80590: PUSH
80591: LD_VAR 0 25
80595: PUSH
80596: LD_VAR 0 26
80600: PUSH
80601: LD_VAR 0 27
80605: PUSH
80606: LD_VAR 0 28
80610: PUSH
80611: EMPTY
80612: LIST
80613: LIST
80614: LIST
80615: LIST
80616: LIST
80617: LIST
80618: PUSH
80619: LD_VAR 0 4
80623: PUSH
80624: LD_INT 1
80626: PLUS
80627: ARRAY
80628: ST_TO_ADDR
80629: GO 80632
80631: POP
80632: GO 81187
80634: LD_INT 2
80636: DOUBLE
80637: EQUAL
80638: IFTRUE 80648
80640: LD_INT 3
80642: DOUBLE
80643: EQUAL
80644: IFTRUE 80648
80646: GO 80704
80648: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
80649: LD_ADDR_VAR 0 9
80653: PUSH
80654: LD_VAR 0 29
80658: PUSH
80659: LD_VAR 0 30
80663: PUSH
80664: LD_VAR 0 31
80668: PUSH
80669: LD_VAR 0 32
80673: PUSH
80674: LD_VAR 0 33
80678: PUSH
80679: LD_VAR 0 34
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: LIST
80688: LIST
80689: LIST
80690: LIST
80691: PUSH
80692: LD_VAR 0 4
80696: PUSH
80697: LD_INT 1
80699: PLUS
80700: ARRAY
80701: ST_TO_ADDR
80702: GO 81187
80704: LD_INT 16
80706: DOUBLE
80707: EQUAL
80708: IFTRUE 80766
80710: LD_INT 17
80712: DOUBLE
80713: EQUAL
80714: IFTRUE 80766
80716: LD_INT 18
80718: DOUBLE
80719: EQUAL
80720: IFTRUE 80766
80722: LD_INT 19
80724: DOUBLE
80725: EQUAL
80726: IFTRUE 80766
80728: LD_INT 22
80730: DOUBLE
80731: EQUAL
80732: IFTRUE 80766
80734: LD_INT 20
80736: DOUBLE
80737: EQUAL
80738: IFTRUE 80766
80740: LD_INT 21
80742: DOUBLE
80743: EQUAL
80744: IFTRUE 80766
80746: LD_INT 23
80748: DOUBLE
80749: EQUAL
80750: IFTRUE 80766
80752: LD_INT 24
80754: DOUBLE
80755: EQUAL
80756: IFTRUE 80766
80758: LD_INT 25
80760: DOUBLE
80761: EQUAL
80762: IFTRUE 80766
80764: GO 80822
80766: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
80767: LD_ADDR_VAR 0 9
80771: PUSH
80772: LD_VAR 0 35
80776: PUSH
80777: LD_VAR 0 36
80781: PUSH
80782: LD_VAR 0 37
80786: PUSH
80787: LD_VAR 0 38
80791: PUSH
80792: LD_VAR 0 39
80796: PUSH
80797: LD_VAR 0 40
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: PUSH
80810: LD_VAR 0 4
80814: PUSH
80815: LD_INT 1
80817: PLUS
80818: ARRAY
80819: ST_TO_ADDR
80820: GO 81187
80822: LD_INT 6
80824: DOUBLE
80825: EQUAL
80826: IFTRUE 80878
80828: LD_INT 7
80830: DOUBLE
80831: EQUAL
80832: IFTRUE 80878
80834: LD_INT 8
80836: DOUBLE
80837: EQUAL
80838: IFTRUE 80878
80840: LD_INT 13
80842: DOUBLE
80843: EQUAL
80844: IFTRUE 80878
80846: LD_INT 12
80848: DOUBLE
80849: EQUAL
80850: IFTRUE 80878
80852: LD_INT 15
80854: DOUBLE
80855: EQUAL
80856: IFTRUE 80878
80858: LD_INT 11
80860: DOUBLE
80861: EQUAL
80862: IFTRUE 80878
80864: LD_INT 14
80866: DOUBLE
80867: EQUAL
80868: IFTRUE 80878
80870: LD_INT 10
80872: DOUBLE
80873: EQUAL
80874: IFTRUE 80878
80876: GO 80934
80878: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
80879: LD_ADDR_VAR 0 9
80883: PUSH
80884: LD_VAR 0 41
80888: PUSH
80889: LD_VAR 0 42
80893: PUSH
80894: LD_VAR 0 43
80898: PUSH
80899: LD_VAR 0 44
80903: PUSH
80904: LD_VAR 0 45
80908: PUSH
80909: LD_VAR 0 46
80913: PUSH
80914: EMPTY
80915: LIST
80916: LIST
80917: LIST
80918: LIST
80919: LIST
80920: LIST
80921: PUSH
80922: LD_VAR 0 4
80926: PUSH
80927: LD_INT 1
80929: PLUS
80930: ARRAY
80931: ST_TO_ADDR
80932: GO 81187
80934: LD_INT 36
80936: DOUBLE
80937: EQUAL
80938: IFTRUE 80942
80940: GO 80998
80942: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
80943: LD_ADDR_VAR 0 9
80947: PUSH
80948: LD_VAR 0 47
80952: PUSH
80953: LD_VAR 0 48
80957: PUSH
80958: LD_VAR 0 49
80962: PUSH
80963: LD_VAR 0 50
80967: PUSH
80968: LD_VAR 0 51
80972: PUSH
80973: LD_VAR 0 52
80977: PUSH
80978: EMPTY
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: PUSH
80986: LD_VAR 0 4
80990: PUSH
80991: LD_INT 1
80993: PLUS
80994: ARRAY
80995: ST_TO_ADDR
80996: GO 81187
80998: LD_INT 4
81000: DOUBLE
81001: EQUAL
81002: IFTRUE 81024
81004: LD_INT 5
81006: DOUBLE
81007: EQUAL
81008: IFTRUE 81024
81010: LD_INT 34
81012: DOUBLE
81013: EQUAL
81014: IFTRUE 81024
81016: LD_INT 37
81018: DOUBLE
81019: EQUAL
81020: IFTRUE 81024
81022: GO 81080
81024: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
81025: LD_ADDR_VAR 0 9
81029: PUSH
81030: LD_VAR 0 53
81034: PUSH
81035: LD_VAR 0 54
81039: PUSH
81040: LD_VAR 0 55
81044: PUSH
81045: LD_VAR 0 56
81049: PUSH
81050: LD_VAR 0 57
81054: PUSH
81055: LD_VAR 0 58
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: LIST
81064: LIST
81065: LIST
81066: LIST
81067: PUSH
81068: LD_VAR 0 4
81072: PUSH
81073: LD_INT 1
81075: PLUS
81076: ARRAY
81077: ST_TO_ADDR
81078: GO 81187
81080: LD_INT 31
81082: DOUBLE
81083: EQUAL
81084: IFTRUE 81130
81086: LD_INT 32
81088: DOUBLE
81089: EQUAL
81090: IFTRUE 81130
81092: LD_INT 33
81094: DOUBLE
81095: EQUAL
81096: IFTRUE 81130
81098: LD_INT 27
81100: DOUBLE
81101: EQUAL
81102: IFTRUE 81130
81104: LD_INT 26
81106: DOUBLE
81107: EQUAL
81108: IFTRUE 81130
81110: LD_INT 28
81112: DOUBLE
81113: EQUAL
81114: IFTRUE 81130
81116: LD_INT 29
81118: DOUBLE
81119: EQUAL
81120: IFTRUE 81130
81122: LD_INT 30
81124: DOUBLE
81125: EQUAL
81126: IFTRUE 81130
81128: GO 81186
81130: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
81131: LD_ADDR_VAR 0 9
81135: PUSH
81136: LD_VAR 0 59
81140: PUSH
81141: LD_VAR 0 60
81145: PUSH
81146: LD_VAR 0 61
81150: PUSH
81151: LD_VAR 0 62
81155: PUSH
81156: LD_VAR 0 63
81160: PUSH
81161: LD_VAR 0 64
81165: PUSH
81166: EMPTY
81167: LIST
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: PUSH
81174: LD_VAR 0 4
81178: PUSH
81179: LD_INT 1
81181: PLUS
81182: ARRAY
81183: ST_TO_ADDR
81184: GO 81187
81186: POP
// temp_list2 = [ ] ;
81187: LD_ADDR_VAR 0 10
81191: PUSH
81192: EMPTY
81193: ST_TO_ADDR
// for i in temp_list do
81194: LD_ADDR_VAR 0 8
81198: PUSH
81199: LD_VAR 0 9
81203: PUSH
81204: FOR_IN
81205: IFFALSE 81257
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
81207: LD_ADDR_VAR 0 10
81211: PUSH
81212: LD_VAR 0 10
81216: PUSH
81217: LD_VAR 0 8
81221: PUSH
81222: LD_INT 1
81224: ARRAY
81225: PUSH
81226: LD_VAR 0 2
81230: PLUS
81231: PUSH
81232: LD_VAR 0 8
81236: PUSH
81237: LD_INT 2
81239: ARRAY
81240: PUSH
81241: LD_VAR 0 3
81245: PLUS
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: PUSH
81251: EMPTY
81252: LIST
81253: ADD
81254: ST_TO_ADDR
81255: GO 81204
81257: POP
81258: POP
// result = temp_list2 ;
81259: LD_ADDR_VAR 0 7
81263: PUSH
81264: LD_VAR 0 10
81268: ST_TO_ADDR
// end ;
81269: LD_VAR 0 7
81273: RET
// export function EnemyInRange ( unit , dist ) ; begin
81274: LD_INT 0
81276: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
81277: LD_ADDR_VAR 0 3
81281: PUSH
81282: LD_VAR 0 1
81286: PPUSH
81287: CALL_OW 255
81291: PPUSH
81292: LD_VAR 0 1
81296: PPUSH
81297: CALL_OW 250
81301: PPUSH
81302: LD_VAR 0 1
81306: PPUSH
81307: CALL_OW 251
81311: PPUSH
81312: LD_VAR 0 2
81316: PPUSH
81317: CALL 54670 0 4
81321: PUSH
81322: LD_INT 4
81324: ARRAY
81325: ST_TO_ADDR
// end ;
81326: LD_VAR 0 3
81330: RET
// export function PlayerSeeMe ( unit ) ; begin
81331: LD_INT 0
81333: PPUSH
// result := See ( your_side , unit ) ;
81334: LD_ADDR_VAR 0 2
81338: PUSH
81339: LD_OWVAR 2
81343: PPUSH
81344: LD_VAR 0 1
81348: PPUSH
81349: CALL_OW 292
81353: ST_TO_ADDR
// end ;
81354: LD_VAR 0 2
81358: RET
// export function ReverseDir ( unit ) ; begin
81359: LD_INT 0
81361: PPUSH
// if not unit then
81362: LD_VAR 0 1
81366: NOT
81367: IFFALSE 81371
// exit ;
81369: GO 81394
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
81371: LD_ADDR_VAR 0 2
81375: PUSH
81376: LD_VAR 0 1
81380: PPUSH
81381: CALL_OW 254
81385: PUSH
81386: LD_INT 3
81388: PLUS
81389: PUSH
81390: LD_INT 6
81392: MOD
81393: ST_TO_ADDR
// end ;
81394: LD_VAR 0 2
81398: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
81399: LD_INT 0
81401: PPUSH
81402: PPUSH
81403: PPUSH
81404: PPUSH
81405: PPUSH
// if not hexes then
81406: LD_VAR 0 2
81410: NOT
81411: IFFALSE 81415
// exit ;
81413: GO 81563
// dist := 9999 ;
81415: LD_ADDR_VAR 0 5
81419: PUSH
81420: LD_INT 9999
81422: ST_TO_ADDR
// for i = 1 to hexes do
81423: LD_ADDR_VAR 0 4
81427: PUSH
81428: DOUBLE
81429: LD_INT 1
81431: DEC
81432: ST_TO_ADDR
81433: LD_VAR 0 2
81437: PUSH
81438: FOR_TO
81439: IFFALSE 81551
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
81441: LD_VAR 0 1
81445: PPUSH
81446: LD_VAR 0 2
81450: PUSH
81451: LD_VAR 0 4
81455: ARRAY
81456: PUSH
81457: LD_INT 1
81459: ARRAY
81460: PPUSH
81461: LD_VAR 0 2
81465: PUSH
81466: LD_VAR 0 4
81470: ARRAY
81471: PUSH
81472: LD_INT 2
81474: ARRAY
81475: PPUSH
81476: CALL_OW 297
81480: PUSH
81481: LD_VAR 0 5
81485: LESS
81486: IFFALSE 81549
// begin hex := hexes [ i ] ;
81488: LD_ADDR_VAR 0 7
81492: PUSH
81493: LD_VAR 0 2
81497: PUSH
81498: LD_VAR 0 4
81502: ARRAY
81503: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81504: LD_ADDR_VAR 0 5
81508: PUSH
81509: LD_VAR 0 1
81513: PPUSH
81514: LD_VAR 0 2
81518: PUSH
81519: LD_VAR 0 4
81523: ARRAY
81524: PUSH
81525: LD_INT 1
81527: ARRAY
81528: PPUSH
81529: LD_VAR 0 2
81533: PUSH
81534: LD_VAR 0 4
81538: ARRAY
81539: PUSH
81540: LD_INT 2
81542: ARRAY
81543: PPUSH
81544: CALL_OW 297
81548: ST_TO_ADDR
// end ; end ;
81549: GO 81438
81551: POP
81552: POP
// result := hex ;
81553: LD_ADDR_VAR 0 3
81557: PUSH
81558: LD_VAR 0 7
81562: ST_TO_ADDR
// end ;
81563: LD_VAR 0 3
81567: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
81568: LD_INT 0
81570: PPUSH
81571: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
81572: LD_VAR 0 1
81576: NOT
81577: PUSH
81578: LD_VAR 0 1
81582: PUSH
81583: LD_INT 21
81585: PUSH
81586: LD_INT 2
81588: PUSH
81589: EMPTY
81590: LIST
81591: LIST
81592: PUSH
81593: LD_INT 23
81595: PUSH
81596: LD_INT 2
81598: PUSH
81599: EMPTY
81600: LIST
81601: LIST
81602: PUSH
81603: EMPTY
81604: LIST
81605: LIST
81606: PPUSH
81607: CALL_OW 69
81611: IN
81612: NOT
81613: OR
81614: IFFALSE 81618
// exit ;
81616: GO 81665
// for i = 1 to 3 do
81618: LD_ADDR_VAR 0 3
81622: PUSH
81623: DOUBLE
81624: LD_INT 1
81626: DEC
81627: ST_TO_ADDR
81628: LD_INT 3
81630: PUSH
81631: FOR_TO
81632: IFFALSE 81663
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
81634: LD_VAR 0 1
81638: PPUSH
81639: CALL_OW 250
81643: PPUSH
81644: LD_VAR 0 1
81648: PPUSH
81649: CALL_OW 251
81653: PPUSH
81654: LD_INT 1
81656: PPUSH
81657: CALL_OW 453
81661: GO 81631
81663: POP
81664: POP
// end ;
81665: LD_VAR 0 2
81669: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
81670: LD_INT 0
81672: PPUSH
81673: PPUSH
81674: PPUSH
81675: PPUSH
81676: PPUSH
81677: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
81678: LD_VAR 0 1
81682: NOT
81683: PUSH
81684: LD_VAR 0 2
81688: NOT
81689: OR
81690: PUSH
81691: LD_VAR 0 1
81695: PPUSH
81696: CALL_OW 314
81700: OR
81701: IFFALSE 81705
// exit ;
81703: GO 82146
// x := GetX ( enemy_unit ) ;
81705: LD_ADDR_VAR 0 7
81709: PUSH
81710: LD_VAR 0 2
81714: PPUSH
81715: CALL_OW 250
81719: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
81720: LD_ADDR_VAR 0 8
81724: PUSH
81725: LD_VAR 0 2
81729: PPUSH
81730: CALL_OW 251
81734: ST_TO_ADDR
// if not x or not y then
81735: LD_VAR 0 7
81739: NOT
81740: PUSH
81741: LD_VAR 0 8
81745: NOT
81746: OR
81747: IFFALSE 81751
// exit ;
81749: GO 82146
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
81751: LD_ADDR_VAR 0 6
81755: PUSH
81756: LD_VAR 0 7
81760: PPUSH
81761: LD_INT 0
81763: PPUSH
81764: LD_INT 4
81766: PPUSH
81767: CALL_OW 272
81771: PUSH
81772: LD_VAR 0 8
81776: PPUSH
81777: LD_INT 0
81779: PPUSH
81780: LD_INT 4
81782: PPUSH
81783: CALL_OW 273
81787: PUSH
81788: EMPTY
81789: LIST
81790: LIST
81791: PUSH
81792: LD_VAR 0 7
81796: PPUSH
81797: LD_INT 1
81799: PPUSH
81800: LD_INT 4
81802: PPUSH
81803: CALL_OW 272
81807: PUSH
81808: LD_VAR 0 8
81812: PPUSH
81813: LD_INT 1
81815: PPUSH
81816: LD_INT 4
81818: PPUSH
81819: CALL_OW 273
81823: PUSH
81824: EMPTY
81825: LIST
81826: LIST
81827: PUSH
81828: LD_VAR 0 7
81832: PPUSH
81833: LD_INT 2
81835: PPUSH
81836: LD_INT 4
81838: PPUSH
81839: CALL_OW 272
81843: PUSH
81844: LD_VAR 0 8
81848: PPUSH
81849: LD_INT 2
81851: PPUSH
81852: LD_INT 4
81854: PPUSH
81855: CALL_OW 273
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: PUSH
81864: LD_VAR 0 7
81868: PPUSH
81869: LD_INT 3
81871: PPUSH
81872: LD_INT 4
81874: PPUSH
81875: CALL_OW 272
81879: PUSH
81880: LD_VAR 0 8
81884: PPUSH
81885: LD_INT 3
81887: PPUSH
81888: LD_INT 4
81890: PPUSH
81891: CALL_OW 273
81895: PUSH
81896: EMPTY
81897: LIST
81898: LIST
81899: PUSH
81900: LD_VAR 0 7
81904: PPUSH
81905: LD_INT 4
81907: PPUSH
81908: LD_INT 4
81910: PPUSH
81911: CALL_OW 272
81915: PUSH
81916: LD_VAR 0 8
81920: PPUSH
81921: LD_INT 4
81923: PPUSH
81924: LD_INT 4
81926: PPUSH
81927: CALL_OW 273
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: PUSH
81936: LD_VAR 0 7
81940: PPUSH
81941: LD_INT 5
81943: PPUSH
81944: LD_INT 4
81946: PPUSH
81947: CALL_OW 272
81951: PUSH
81952: LD_VAR 0 8
81956: PPUSH
81957: LD_INT 5
81959: PPUSH
81960: LD_INT 4
81962: PPUSH
81963: CALL_OW 273
81967: PUSH
81968: EMPTY
81969: LIST
81970: LIST
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: LIST
81976: LIST
81977: LIST
81978: LIST
81979: ST_TO_ADDR
// for i = tmp downto 1 do
81980: LD_ADDR_VAR 0 4
81984: PUSH
81985: DOUBLE
81986: LD_VAR 0 6
81990: INC
81991: ST_TO_ADDR
81992: LD_INT 1
81994: PUSH
81995: FOR_DOWNTO
81996: IFFALSE 82097
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
81998: LD_VAR 0 6
82002: PUSH
82003: LD_VAR 0 4
82007: ARRAY
82008: PUSH
82009: LD_INT 1
82011: ARRAY
82012: PPUSH
82013: LD_VAR 0 6
82017: PUSH
82018: LD_VAR 0 4
82022: ARRAY
82023: PUSH
82024: LD_INT 2
82026: ARRAY
82027: PPUSH
82028: CALL_OW 488
82032: NOT
82033: PUSH
82034: LD_VAR 0 6
82038: PUSH
82039: LD_VAR 0 4
82043: ARRAY
82044: PUSH
82045: LD_INT 1
82047: ARRAY
82048: PPUSH
82049: LD_VAR 0 6
82053: PUSH
82054: LD_VAR 0 4
82058: ARRAY
82059: PUSH
82060: LD_INT 2
82062: ARRAY
82063: PPUSH
82064: CALL_OW 428
82068: PUSH
82069: LD_INT 0
82071: NONEQUAL
82072: OR
82073: IFFALSE 82095
// tmp := Delete ( tmp , i ) ;
82075: LD_ADDR_VAR 0 6
82079: PUSH
82080: LD_VAR 0 6
82084: PPUSH
82085: LD_VAR 0 4
82089: PPUSH
82090: CALL_OW 3
82094: ST_TO_ADDR
82095: GO 81995
82097: POP
82098: POP
// j := GetClosestHex ( unit , tmp ) ;
82099: LD_ADDR_VAR 0 5
82103: PUSH
82104: LD_VAR 0 1
82108: PPUSH
82109: LD_VAR 0 6
82113: PPUSH
82114: CALL 81399 0 2
82118: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
82119: LD_VAR 0 1
82123: PPUSH
82124: LD_VAR 0 5
82128: PUSH
82129: LD_INT 1
82131: ARRAY
82132: PPUSH
82133: LD_VAR 0 5
82137: PUSH
82138: LD_INT 2
82140: ARRAY
82141: PPUSH
82142: CALL_OW 111
// end ;
82146: LD_VAR 0 3
82150: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
82151: LD_INT 0
82153: PPUSH
82154: PPUSH
82155: PPUSH
// uc_side = 0 ;
82156: LD_ADDR_OWVAR 20
82160: PUSH
82161: LD_INT 0
82163: ST_TO_ADDR
// uc_nation = 0 ;
82164: LD_ADDR_OWVAR 21
82168: PUSH
82169: LD_INT 0
82171: ST_TO_ADDR
// InitHc_All ( ) ;
82172: CALL_OW 584
// InitVc ;
82176: CALL_OW 20
// if mastodonts then
82180: LD_VAR 0 6
82184: IFFALSE 82251
// for i = 1 to mastodonts do
82186: LD_ADDR_VAR 0 11
82190: PUSH
82191: DOUBLE
82192: LD_INT 1
82194: DEC
82195: ST_TO_ADDR
82196: LD_VAR 0 6
82200: PUSH
82201: FOR_TO
82202: IFFALSE 82249
// begin vc_chassis := 31 ;
82204: LD_ADDR_OWVAR 37
82208: PUSH
82209: LD_INT 31
82211: ST_TO_ADDR
// vc_control := control_rider ;
82212: LD_ADDR_OWVAR 38
82216: PUSH
82217: LD_INT 4
82219: ST_TO_ADDR
// animal := CreateVehicle ;
82220: LD_ADDR_VAR 0 12
82224: PUSH
82225: CALL_OW 45
82229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82230: LD_VAR 0 12
82234: PPUSH
82235: LD_VAR 0 8
82239: PPUSH
82240: LD_INT 0
82242: PPUSH
82243: CALL 84439 0 3
// end ;
82247: GO 82201
82249: POP
82250: POP
// if horses then
82251: LD_VAR 0 5
82255: IFFALSE 82322
// for i = 1 to horses do
82257: LD_ADDR_VAR 0 11
82261: PUSH
82262: DOUBLE
82263: LD_INT 1
82265: DEC
82266: ST_TO_ADDR
82267: LD_VAR 0 5
82271: PUSH
82272: FOR_TO
82273: IFFALSE 82320
// begin hc_class := 21 ;
82275: LD_ADDR_OWVAR 28
82279: PUSH
82280: LD_INT 21
82282: ST_TO_ADDR
// hc_gallery :=  ;
82283: LD_ADDR_OWVAR 33
82287: PUSH
82288: LD_STRING 
82290: ST_TO_ADDR
// animal := CreateHuman ;
82291: LD_ADDR_VAR 0 12
82295: PUSH
82296: CALL_OW 44
82300: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82301: LD_VAR 0 12
82305: PPUSH
82306: LD_VAR 0 8
82310: PPUSH
82311: LD_INT 0
82313: PPUSH
82314: CALL 84439 0 3
// end ;
82318: GO 82272
82320: POP
82321: POP
// if birds then
82322: LD_VAR 0 1
82326: IFFALSE 82393
// for i = 1 to birds do
82328: LD_ADDR_VAR 0 11
82332: PUSH
82333: DOUBLE
82334: LD_INT 1
82336: DEC
82337: ST_TO_ADDR
82338: LD_VAR 0 1
82342: PUSH
82343: FOR_TO
82344: IFFALSE 82391
// begin hc_class = 18 ;
82346: LD_ADDR_OWVAR 28
82350: PUSH
82351: LD_INT 18
82353: ST_TO_ADDR
// hc_gallery =  ;
82354: LD_ADDR_OWVAR 33
82358: PUSH
82359: LD_STRING 
82361: ST_TO_ADDR
// animal := CreateHuman ;
82362: LD_ADDR_VAR 0 12
82366: PUSH
82367: CALL_OW 44
82371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82372: LD_VAR 0 12
82376: PPUSH
82377: LD_VAR 0 8
82381: PPUSH
82382: LD_INT 0
82384: PPUSH
82385: CALL 84439 0 3
// end ;
82389: GO 82343
82391: POP
82392: POP
// if tigers then
82393: LD_VAR 0 2
82397: IFFALSE 82481
// for i = 1 to tigers do
82399: LD_ADDR_VAR 0 11
82403: PUSH
82404: DOUBLE
82405: LD_INT 1
82407: DEC
82408: ST_TO_ADDR
82409: LD_VAR 0 2
82413: PUSH
82414: FOR_TO
82415: IFFALSE 82479
// begin hc_class = class_tiger ;
82417: LD_ADDR_OWVAR 28
82421: PUSH
82422: LD_INT 14
82424: ST_TO_ADDR
// hc_gallery =  ;
82425: LD_ADDR_OWVAR 33
82429: PUSH
82430: LD_STRING 
82432: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
82433: LD_ADDR_OWVAR 35
82437: PUSH
82438: LD_INT 7
82440: NEG
82441: PPUSH
82442: LD_INT 7
82444: PPUSH
82445: CALL_OW 12
82449: ST_TO_ADDR
// animal := CreateHuman ;
82450: LD_ADDR_VAR 0 12
82454: PUSH
82455: CALL_OW 44
82459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82460: LD_VAR 0 12
82464: PPUSH
82465: LD_VAR 0 8
82469: PPUSH
82470: LD_INT 0
82472: PPUSH
82473: CALL 84439 0 3
// end ;
82477: GO 82414
82479: POP
82480: POP
// if apemans then
82481: LD_VAR 0 3
82485: IFFALSE 82608
// for i = 1 to apemans do
82487: LD_ADDR_VAR 0 11
82491: PUSH
82492: DOUBLE
82493: LD_INT 1
82495: DEC
82496: ST_TO_ADDR
82497: LD_VAR 0 3
82501: PUSH
82502: FOR_TO
82503: IFFALSE 82606
// begin hc_class = class_apeman ;
82505: LD_ADDR_OWVAR 28
82509: PUSH
82510: LD_INT 12
82512: ST_TO_ADDR
// hc_gallery =  ;
82513: LD_ADDR_OWVAR 33
82517: PUSH
82518: LD_STRING 
82520: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
82521: LD_ADDR_OWVAR 35
82525: PUSH
82526: LD_INT 2
82528: NEG
82529: PPUSH
82530: LD_INT 2
82532: PPUSH
82533: CALL_OW 12
82537: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
82538: LD_ADDR_OWVAR 31
82542: PUSH
82543: LD_INT 1
82545: PPUSH
82546: LD_INT 3
82548: PPUSH
82549: CALL_OW 12
82553: PUSH
82554: LD_INT 1
82556: PPUSH
82557: LD_INT 3
82559: PPUSH
82560: CALL_OW 12
82564: PUSH
82565: LD_INT 0
82567: PUSH
82568: LD_INT 0
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: ST_TO_ADDR
// animal := CreateHuman ;
82577: LD_ADDR_VAR 0 12
82581: PUSH
82582: CALL_OW 44
82586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82587: LD_VAR 0 12
82591: PPUSH
82592: LD_VAR 0 8
82596: PPUSH
82597: LD_INT 0
82599: PPUSH
82600: CALL 84439 0 3
// end ;
82604: GO 82502
82606: POP
82607: POP
// if enchidnas then
82608: LD_VAR 0 4
82612: IFFALSE 82679
// for i = 1 to enchidnas do
82614: LD_ADDR_VAR 0 11
82618: PUSH
82619: DOUBLE
82620: LD_INT 1
82622: DEC
82623: ST_TO_ADDR
82624: LD_VAR 0 4
82628: PUSH
82629: FOR_TO
82630: IFFALSE 82677
// begin hc_class = 13 ;
82632: LD_ADDR_OWVAR 28
82636: PUSH
82637: LD_INT 13
82639: ST_TO_ADDR
// hc_gallery =  ;
82640: LD_ADDR_OWVAR 33
82644: PUSH
82645: LD_STRING 
82647: ST_TO_ADDR
// animal := CreateHuman ;
82648: LD_ADDR_VAR 0 12
82652: PUSH
82653: CALL_OW 44
82657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82658: LD_VAR 0 12
82662: PPUSH
82663: LD_VAR 0 8
82667: PPUSH
82668: LD_INT 0
82670: PPUSH
82671: CALL 84439 0 3
// end ;
82675: GO 82629
82677: POP
82678: POP
// if fishes then
82679: LD_VAR 0 7
82683: IFFALSE 82750
// for i = 1 to fishes do
82685: LD_ADDR_VAR 0 11
82689: PUSH
82690: DOUBLE
82691: LD_INT 1
82693: DEC
82694: ST_TO_ADDR
82695: LD_VAR 0 7
82699: PUSH
82700: FOR_TO
82701: IFFALSE 82748
// begin hc_class = 20 ;
82703: LD_ADDR_OWVAR 28
82707: PUSH
82708: LD_INT 20
82710: ST_TO_ADDR
// hc_gallery =  ;
82711: LD_ADDR_OWVAR 33
82715: PUSH
82716: LD_STRING 
82718: ST_TO_ADDR
// animal := CreateHuman ;
82719: LD_ADDR_VAR 0 12
82723: PUSH
82724: CALL_OW 44
82728: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
82729: LD_VAR 0 12
82733: PPUSH
82734: LD_VAR 0 9
82738: PPUSH
82739: LD_INT 0
82741: PPUSH
82742: CALL 84439 0 3
// end ;
82746: GO 82700
82748: POP
82749: POP
// end ;
82750: LD_VAR 0 10
82754: RET
// export function WantHeal ( sci , unit ) ; begin
82755: LD_INT 0
82757: PPUSH
// if GetTaskList ( sci ) > 0 then
82758: LD_VAR 0 1
82762: PPUSH
82763: CALL_OW 437
82767: PUSH
82768: LD_INT 0
82770: GREATER
82771: IFFALSE 82841
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
82773: LD_VAR 0 1
82777: PPUSH
82778: CALL_OW 437
82782: PUSH
82783: LD_INT 1
82785: ARRAY
82786: PUSH
82787: LD_INT 1
82789: ARRAY
82790: PUSH
82791: LD_STRING l
82793: EQUAL
82794: PUSH
82795: LD_VAR 0 1
82799: PPUSH
82800: CALL_OW 437
82804: PUSH
82805: LD_INT 1
82807: ARRAY
82808: PUSH
82809: LD_INT 4
82811: ARRAY
82812: PUSH
82813: LD_VAR 0 2
82817: EQUAL
82818: AND
82819: IFFALSE 82831
// result := true else
82821: LD_ADDR_VAR 0 3
82825: PUSH
82826: LD_INT 1
82828: ST_TO_ADDR
82829: GO 82839
// result := false ;
82831: LD_ADDR_VAR 0 3
82835: PUSH
82836: LD_INT 0
82838: ST_TO_ADDR
// end else
82839: GO 82849
// result := false ;
82841: LD_ADDR_VAR 0 3
82845: PUSH
82846: LD_INT 0
82848: ST_TO_ADDR
// end ;
82849: LD_VAR 0 3
82853: RET
// export function HealTarget ( sci ) ; begin
82854: LD_INT 0
82856: PPUSH
// if not sci then
82857: LD_VAR 0 1
82861: NOT
82862: IFFALSE 82866
// exit ;
82864: GO 82931
// result := 0 ;
82866: LD_ADDR_VAR 0 2
82870: PUSH
82871: LD_INT 0
82873: ST_TO_ADDR
// if GetTaskList ( sci ) then
82874: LD_VAR 0 1
82878: PPUSH
82879: CALL_OW 437
82883: IFFALSE 82931
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
82885: LD_VAR 0 1
82889: PPUSH
82890: CALL_OW 437
82894: PUSH
82895: LD_INT 1
82897: ARRAY
82898: PUSH
82899: LD_INT 1
82901: ARRAY
82902: PUSH
82903: LD_STRING l
82905: EQUAL
82906: IFFALSE 82931
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
82908: LD_ADDR_VAR 0 2
82912: PUSH
82913: LD_VAR 0 1
82917: PPUSH
82918: CALL_OW 437
82922: PUSH
82923: LD_INT 1
82925: ARRAY
82926: PUSH
82927: LD_INT 4
82929: ARRAY
82930: ST_TO_ADDR
// end ;
82931: LD_VAR 0 2
82935: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
82936: LD_INT 0
82938: PPUSH
82939: PPUSH
82940: PPUSH
82941: PPUSH
// if not base_units then
82942: LD_VAR 0 1
82946: NOT
82947: IFFALSE 82951
// exit ;
82949: GO 83038
// result := false ;
82951: LD_ADDR_VAR 0 2
82955: PUSH
82956: LD_INT 0
82958: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
82959: LD_ADDR_VAR 0 5
82963: PUSH
82964: LD_VAR 0 1
82968: PPUSH
82969: LD_INT 21
82971: PUSH
82972: LD_INT 3
82974: PUSH
82975: EMPTY
82976: LIST
82977: LIST
82978: PPUSH
82979: CALL_OW 72
82983: ST_TO_ADDR
// if not tmp then
82984: LD_VAR 0 5
82988: NOT
82989: IFFALSE 82993
// exit ;
82991: GO 83038
// for i in tmp do
82993: LD_ADDR_VAR 0 3
82997: PUSH
82998: LD_VAR 0 5
83002: PUSH
83003: FOR_IN
83004: IFFALSE 83036
// begin result := EnemyInRange ( i , 22 ) ;
83006: LD_ADDR_VAR 0 2
83010: PUSH
83011: LD_VAR 0 3
83015: PPUSH
83016: LD_INT 22
83018: PPUSH
83019: CALL 81274 0 2
83023: ST_TO_ADDR
// if result then
83024: LD_VAR 0 2
83028: IFFALSE 83034
// exit ;
83030: POP
83031: POP
83032: GO 83038
// end ;
83034: GO 83003
83036: POP
83037: POP
// end ;
83038: LD_VAR 0 2
83042: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
83043: LD_INT 0
83045: PPUSH
83046: PPUSH
// if not units then
83047: LD_VAR 0 1
83051: NOT
83052: IFFALSE 83056
// exit ;
83054: GO 83126
// result := [ ] ;
83056: LD_ADDR_VAR 0 3
83060: PUSH
83061: EMPTY
83062: ST_TO_ADDR
// for i in units do
83063: LD_ADDR_VAR 0 4
83067: PUSH
83068: LD_VAR 0 1
83072: PUSH
83073: FOR_IN
83074: IFFALSE 83124
// if GetTag ( i ) = tag then
83076: LD_VAR 0 4
83080: PPUSH
83081: CALL_OW 110
83085: PUSH
83086: LD_VAR 0 2
83090: EQUAL
83091: IFFALSE 83122
// result := Replace ( result , result + 1 , i ) ;
83093: LD_ADDR_VAR 0 3
83097: PUSH
83098: LD_VAR 0 3
83102: PPUSH
83103: LD_VAR 0 3
83107: PUSH
83108: LD_INT 1
83110: PLUS
83111: PPUSH
83112: LD_VAR 0 4
83116: PPUSH
83117: CALL_OW 1
83121: ST_TO_ADDR
83122: GO 83073
83124: POP
83125: POP
// end ;
83126: LD_VAR 0 3
83130: RET
// export function IsDriver ( un ) ; begin
83131: LD_INT 0
83133: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
83134: LD_ADDR_VAR 0 2
83138: PUSH
83139: LD_VAR 0 1
83143: PUSH
83144: LD_INT 55
83146: PUSH
83147: EMPTY
83148: LIST
83149: PPUSH
83150: CALL_OW 69
83154: IN
83155: ST_TO_ADDR
// end ;
83156: LD_VAR 0 2
83160: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
83161: LD_INT 0
83163: PPUSH
83164: PPUSH
// list := [ ] ;
83165: LD_ADDR_VAR 0 5
83169: PUSH
83170: EMPTY
83171: ST_TO_ADDR
// case d of 0 :
83172: LD_VAR 0 3
83176: PUSH
83177: LD_INT 0
83179: DOUBLE
83180: EQUAL
83181: IFTRUE 83185
83183: GO 83318
83185: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
83186: LD_ADDR_VAR 0 5
83190: PUSH
83191: LD_VAR 0 1
83195: PUSH
83196: LD_INT 4
83198: MINUS
83199: PUSH
83200: LD_VAR 0 2
83204: PUSH
83205: LD_INT 4
83207: MINUS
83208: PUSH
83209: LD_INT 2
83211: PUSH
83212: EMPTY
83213: LIST
83214: LIST
83215: LIST
83216: PUSH
83217: LD_VAR 0 1
83221: PUSH
83222: LD_INT 3
83224: MINUS
83225: PUSH
83226: LD_VAR 0 2
83230: PUSH
83231: LD_INT 1
83233: PUSH
83234: EMPTY
83235: LIST
83236: LIST
83237: LIST
83238: PUSH
83239: LD_VAR 0 1
83243: PUSH
83244: LD_INT 4
83246: PLUS
83247: PUSH
83248: LD_VAR 0 2
83252: PUSH
83253: LD_INT 4
83255: PUSH
83256: EMPTY
83257: LIST
83258: LIST
83259: LIST
83260: PUSH
83261: LD_VAR 0 1
83265: PUSH
83266: LD_INT 3
83268: PLUS
83269: PUSH
83270: LD_VAR 0 2
83274: PUSH
83275: LD_INT 3
83277: PLUS
83278: PUSH
83279: LD_INT 5
83281: PUSH
83282: EMPTY
83283: LIST
83284: LIST
83285: LIST
83286: PUSH
83287: LD_VAR 0 1
83291: PUSH
83292: LD_VAR 0 2
83296: PUSH
83297: LD_INT 4
83299: PLUS
83300: PUSH
83301: LD_INT 0
83303: PUSH
83304: EMPTY
83305: LIST
83306: LIST
83307: LIST
83308: PUSH
83309: EMPTY
83310: LIST
83311: LIST
83312: LIST
83313: LIST
83314: LIST
83315: ST_TO_ADDR
// end ; 1 :
83316: GO 84016
83318: LD_INT 1
83320: DOUBLE
83321: EQUAL
83322: IFTRUE 83326
83324: GO 83459
83326: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
83327: LD_ADDR_VAR 0 5
83331: PUSH
83332: LD_VAR 0 1
83336: PUSH
83337: LD_VAR 0 2
83341: PUSH
83342: LD_INT 4
83344: MINUS
83345: PUSH
83346: LD_INT 3
83348: PUSH
83349: EMPTY
83350: LIST
83351: LIST
83352: LIST
83353: PUSH
83354: LD_VAR 0 1
83358: PUSH
83359: LD_INT 3
83361: MINUS
83362: PUSH
83363: LD_VAR 0 2
83367: PUSH
83368: LD_INT 3
83370: MINUS
83371: PUSH
83372: LD_INT 2
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: LIST
83379: PUSH
83380: LD_VAR 0 1
83384: PUSH
83385: LD_INT 4
83387: MINUS
83388: PUSH
83389: LD_VAR 0 2
83393: PUSH
83394: LD_INT 1
83396: PUSH
83397: EMPTY
83398: LIST
83399: LIST
83400: LIST
83401: PUSH
83402: LD_VAR 0 1
83406: PUSH
83407: LD_VAR 0 2
83411: PUSH
83412: LD_INT 3
83414: PLUS
83415: PUSH
83416: LD_INT 0
83418: PUSH
83419: EMPTY
83420: LIST
83421: LIST
83422: LIST
83423: PUSH
83424: LD_VAR 0 1
83428: PUSH
83429: LD_INT 4
83431: PLUS
83432: PUSH
83433: LD_VAR 0 2
83437: PUSH
83438: LD_INT 4
83440: PLUS
83441: PUSH
83442: LD_INT 5
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: LIST
83449: PUSH
83450: EMPTY
83451: LIST
83452: LIST
83453: LIST
83454: LIST
83455: LIST
83456: ST_TO_ADDR
// end ; 2 :
83457: GO 84016
83459: LD_INT 2
83461: DOUBLE
83462: EQUAL
83463: IFTRUE 83467
83465: GO 83596
83467: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
83468: LD_ADDR_VAR 0 5
83472: PUSH
83473: LD_VAR 0 1
83477: PUSH
83478: LD_VAR 0 2
83482: PUSH
83483: LD_INT 3
83485: MINUS
83486: PUSH
83487: LD_INT 3
83489: PUSH
83490: EMPTY
83491: LIST
83492: LIST
83493: LIST
83494: PUSH
83495: LD_VAR 0 1
83499: PUSH
83500: LD_INT 4
83502: PLUS
83503: PUSH
83504: LD_VAR 0 2
83508: PUSH
83509: LD_INT 4
83511: PUSH
83512: EMPTY
83513: LIST
83514: LIST
83515: LIST
83516: PUSH
83517: LD_VAR 0 1
83521: PUSH
83522: LD_VAR 0 2
83526: PUSH
83527: LD_INT 4
83529: PLUS
83530: PUSH
83531: LD_INT 0
83533: PUSH
83534: EMPTY
83535: LIST
83536: LIST
83537: LIST
83538: PUSH
83539: LD_VAR 0 1
83543: PUSH
83544: LD_INT 3
83546: MINUS
83547: PUSH
83548: LD_VAR 0 2
83552: PUSH
83553: LD_INT 1
83555: PUSH
83556: EMPTY
83557: LIST
83558: LIST
83559: LIST
83560: PUSH
83561: LD_VAR 0 1
83565: PUSH
83566: LD_INT 4
83568: MINUS
83569: PUSH
83570: LD_VAR 0 2
83574: PUSH
83575: LD_INT 4
83577: MINUS
83578: PUSH
83579: LD_INT 2
83581: PUSH
83582: EMPTY
83583: LIST
83584: LIST
83585: LIST
83586: PUSH
83587: EMPTY
83588: LIST
83589: LIST
83590: LIST
83591: LIST
83592: LIST
83593: ST_TO_ADDR
// end ; 3 :
83594: GO 84016
83596: LD_INT 3
83598: DOUBLE
83599: EQUAL
83600: IFTRUE 83604
83602: GO 83737
83604: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
83605: LD_ADDR_VAR 0 5
83609: PUSH
83610: LD_VAR 0 1
83614: PUSH
83615: LD_INT 3
83617: PLUS
83618: PUSH
83619: LD_VAR 0 2
83623: PUSH
83624: LD_INT 4
83626: PUSH
83627: EMPTY
83628: LIST
83629: LIST
83630: LIST
83631: PUSH
83632: LD_VAR 0 1
83636: PUSH
83637: LD_INT 4
83639: PLUS
83640: PUSH
83641: LD_VAR 0 2
83645: PUSH
83646: LD_INT 4
83648: PLUS
83649: PUSH
83650: LD_INT 5
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: LIST
83657: PUSH
83658: LD_VAR 0 1
83662: PUSH
83663: LD_INT 4
83665: MINUS
83666: PUSH
83667: LD_VAR 0 2
83671: PUSH
83672: LD_INT 1
83674: PUSH
83675: EMPTY
83676: LIST
83677: LIST
83678: LIST
83679: PUSH
83680: LD_VAR 0 1
83684: PUSH
83685: LD_VAR 0 2
83689: PUSH
83690: LD_INT 4
83692: MINUS
83693: PUSH
83694: LD_INT 3
83696: PUSH
83697: EMPTY
83698: LIST
83699: LIST
83700: LIST
83701: PUSH
83702: LD_VAR 0 1
83706: PUSH
83707: LD_INT 3
83709: MINUS
83710: PUSH
83711: LD_VAR 0 2
83715: PUSH
83716: LD_INT 3
83718: MINUS
83719: PUSH
83720: LD_INT 2
83722: PUSH
83723: EMPTY
83724: LIST
83725: LIST
83726: LIST
83727: PUSH
83728: EMPTY
83729: LIST
83730: LIST
83731: LIST
83732: LIST
83733: LIST
83734: ST_TO_ADDR
// end ; 4 :
83735: GO 84016
83737: LD_INT 4
83739: DOUBLE
83740: EQUAL
83741: IFTRUE 83745
83743: GO 83878
83745: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
83746: LD_ADDR_VAR 0 5
83750: PUSH
83751: LD_VAR 0 1
83755: PUSH
83756: LD_VAR 0 2
83760: PUSH
83761: LD_INT 4
83763: PLUS
83764: PUSH
83765: LD_INT 0
83767: PUSH
83768: EMPTY
83769: LIST
83770: LIST
83771: LIST
83772: PUSH
83773: LD_VAR 0 1
83777: PUSH
83778: LD_INT 3
83780: PLUS
83781: PUSH
83782: LD_VAR 0 2
83786: PUSH
83787: LD_INT 3
83789: PLUS
83790: PUSH
83791: LD_INT 5
83793: PUSH
83794: EMPTY
83795: LIST
83796: LIST
83797: LIST
83798: PUSH
83799: LD_VAR 0 1
83803: PUSH
83804: LD_INT 4
83806: PLUS
83807: PUSH
83808: LD_VAR 0 2
83812: PUSH
83813: LD_INT 4
83815: PUSH
83816: EMPTY
83817: LIST
83818: LIST
83819: LIST
83820: PUSH
83821: LD_VAR 0 1
83825: PUSH
83826: LD_VAR 0 2
83830: PUSH
83831: LD_INT 3
83833: MINUS
83834: PUSH
83835: LD_INT 3
83837: PUSH
83838: EMPTY
83839: LIST
83840: LIST
83841: LIST
83842: PUSH
83843: LD_VAR 0 1
83847: PUSH
83848: LD_INT 4
83850: MINUS
83851: PUSH
83852: LD_VAR 0 2
83856: PUSH
83857: LD_INT 4
83859: MINUS
83860: PUSH
83861: LD_INT 2
83863: PUSH
83864: EMPTY
83865: LIST
83866: LIST
83867: LIST
83868: PUSH
83869: EMPTY
83870: LIST
83871: LIST
83872: LIST
83873: LIST
83874: LIST
83875: ST_TO_ADDR
// end ; 5 :
83876: GO 84016
83878: LD_INT 5
83880: DOUBLE
83881: EQUAL
83882: IFTRUE 83886
83884: GO 84015
83886: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
83887: LD_ADDR_VAR 0 5
83891: PUSH
83892: LD_VAR 0 1
83896: PUSH
83897: LD_INT 4
83899: MINUS
83900: PUSH
83901: LD_VAR 0 2
83905: PUSH
83906: LD_INT 1
83908: PUSH
83909: EMPTY
83910: LIST
83911: LIST
83912: LIST
83913: PUSH
83914: LD_VAR 0 1
83918: PUSH
83919: LD_VAR 0 2
83923: PUSH
83924: LD_INT 4
83926: MINUS
83927: PUSH
83928: LD_INT 3
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: LIST
83935: PUSH
83936: LD_VAR 0 1
83940: PUSH
83941: LD_INT 4
83943: PLUS
83944: PUSH
83945: LD_VAR 0 2
83949: PUSH
83950: LD_INT 4
83952: PLUS
83953: PUSH
83954: LD_INT 5
83956: PUSH
83957: EMPTY
83958: LIST
83959: LIST
83960: LIST
83961: PUSH
83962: LD_VAR 0 1
83966: PUSH
83967: LD_INT 3
83969: PLUS
83970: PUSH
83971: LD_VAR 0 2
83975: PUSH
83976: LD_INT 4
83978: PUSH
83979: EMPTY
83980: LIST
83981: LIST
83982: LIST
83983: PUSH
83984: LD_VAR 0 1
83988: PUSH
83989: LD_VAR 0 2
83993: PUSH
83994: LD_INT 3
83996: PLUS
83997: PUSH
83998: LD_INT 0
84000: PUSH
84001: EMPTY
84002: LIST
84003: LIST
84004: LIST
84005: PUSH
84006: EMPTY
84007: LIST
84008: LIST
84009: LIST
84010: LIST
84011: LIST
84012: ST_TO_ADDR
// end ; end ;
84013: GO 84016
84015: POP
// result := list ;
84016: LD_ADDR_VAR 0 4
84020: PUSH
84021: LD_VAR 0 5
84025: ST_TO_ADDR
// end ;
84026: LD_VAR 0 4
84030: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
84031: LD_INT 0
84033: PPUSH
84034: PPUSH
84035: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
84036: LD_VAR 0 1
84040: NOT
84041: PUSH
84042: LD_VAR 0 2
84046: PUSH
84047: LD_INT 1
84049: PUSH
84050: LD_INT 2
84052: PUSH
84053: LD_INT 3
84055: PUSH
84056: LD_INT 4
84058: PUSH
84059: EMPTY
84060: LIST
84061: LIST
84062: LIST
84063: LIST
84064: IN
84065: NOT
84066: OR
84067: IFFALSE 84071
// exit ;
84069: GO 84163
// tmp := [ ] ;
84071: LD_ADDR_VAR 0 5
84075: PUSH
84076: EMPTY
84077: ST_TO_ADDR
// for i in units do
84078: LD_ADDR_VAR 0 4
84082: PUSH
84083: LD_VAR 0 1
84087: PUSH
84088: FOR_IN
84089: IFFALSE 84132
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
84091: LD_ADDR_VAR 0 5
84095: PUSH
84096: LD_VAR 0 5
84100: PPUSH
84101: LD_VAR 0 5
84105: PUSH
84106: LD_INT 1
84108: PLUS
84109: PPUSH
84110: LD_VAR 0 4
84114: PPUSH
84115: LD_VAR 0 2
84119: PPUSH
84120: CALL_OW 259
84124: PPUSH
84125: CALL_OW 2
84129: ST_TO_ADDR
84130: GO 84088
84132: POP
84133: POP
// if not tmp then
84134: LD_VAR 0 5
84138: NOT
84139: IFFALSE 84143
// exit ;
84141: GO 84163
// result := SortListByListDesc ( units , tmp ) ;
84143: LD_ADDR_VAR 0 3
84147: PUSH
84148: LD_VAR 0 1
84152: PPUSH
84153: LD_VAR 0 5
84157: PPUSH
84158: CALL_OW 77
84162: ST_TO_ADDR
// end ;
84163: LD_VAR 0 3
84167: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
84168: LD_INT 0
84170: PPUSH
84171: PPUSH
84172: PPUSH
// result := false ;
84173: LD_ADDR_VAR 0 3
84177: PUSH
84178: LD_INT 0
84180: ST_TO_ADDR
// x := GetX ( building ) ;
84181: LD_ADDR_VAR 0 4
84185: PUSH
84186: LD_VAR 0 2
84190: PPUSH
84191: CALL_OW 250
84195: ST_TO_ADDR
// y := GetY ( building ) ;
84196: LD_ADDR_VAR 0 5
84200: PUSH
84201: LD_VAR 0 2
84205: PPUSH
84206: CALL_OW 251
84210: ST_TO_ADDR
// if not building or not x or not y then
84211: LD_VAR 0 2
84215: NOT
84216: PUSH
84217: LD_VAR 0 4
84221: NOT
84222: OR
84223: PUSH
84224: LD_VAR 0 5
84228: NOT
84229: OR
84230: IFFALSE 84234
// exit ;
84232: GO 84326
// if GetTaskList ( unit ) then
84234: LD_VAR 0 1
84238: PPUSH
84239: CALL_OW 437
84243: IFFALSE 84326
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
84245: LD_STRING e
84247: PUSH
84248: LD_VAR 0 1
84252: PPUSH
84253: CALL_OW 437
84257: PUSH
84258: LD_INT 1
84260: ARRAY
84261: PUSH
84262: LD_INT 1
84264: ARRAY
84265: EQUAL
84266: PUSH
84267: LD_VAR 0 4
84271: PUSH
84272: LD_VAR 0 1
84276: PPUSH
84277: CALL_OW 437
84281: PUSH
84282: LD_INT 1
84284: ARRAY
84285: PUSH
84286: LD_INT 2
84288: ARRAY
84289: EQUAL
84290: AND
84291: PUSH
84292: LD_VAR 0 5
84296: PUSH
84297: LD_VAR 0 1
84301: PPUSH
84302: CALL_OW 437
84306: PUSH
84307: LD_INT 1
84309: ARRAY
84310: PUSH
84311: LD_INT 3
84313: ARRAY
84314: EQUAL
84315: AND
84316: IFFALSE 84326
// result := true end ;
84318: LD_ADDR_VAR 0 3
84322: PUSH
84323: LD_INT 1
84325: ST_TO_ADDR
// end ;
84326: LD_VAR 0 3
84330: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
84331: LD_INT 0
84333: PPUSH
// result := false ;
84334: LD_ADDR_VAR 0 4
84338: PUSH
84339: LD_INT 0
84341: ST_TO_ADDR
// if GetTaskList ( unit ) then
84342: LD_VAR 0 1
84346: PPUSH
84347: CALL_OW 437
84351: IFFALSE 84434
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
84353: LD_STRING M
84355: PUSH
84356: LD_VAR 0 1
84360: PPUSH
84361: CALL_OW 437
84365: PUSH
84366: LD_INT 1
84368: ARRAY
84369: PUSH
84370: LD_INT 1
84372: ARRAY
84373: EQUAL
84374: PUSH
84375: LD_VAR 0 2
84379: PUSH
84380: LD_VAR 0 1
84384: PPUSH
84385: CALL_OW 437
84389: PUSH
84390: LD_INT 1
84392: ARRAY
84393: PUSH
84394: LD_INT 2
84396: ARRAY
84397: EQUAL
84398: AND
84399: PUSH
84400: LD_VAR 0 3
84404: PUSH
84405: LD_VAR 0 1
84409: PPUSH
84410: CALL_OW 437
84414: PUSH
84415: LD_INT 1
84417: ARRAY
84418: PUSH
84419: LD_INT 3
84421: ARRAY
84422: EQUAL
84423: AND
84424: IFFALSE 84434
// result := true ;
84426: LD_ADDR_VAR 0 4
84430: PUSH
84431: LD_INT 1
84433: ST_TO_ADDR
// end ; end ;
84434: LD_VAR 0 4
84438: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
84439: LD_INT 0
84441: PPUSH
84442: PPUSH
84443: PPUSH
84444: PPUSH
// if not unit or not area then
84445: LD_VAR 0 1
84449: NOT
84450: PUSH
84451: LD_VAR 0 2
84455: NOT
84456: OR
84457: IFFALSE 84461
// exit ;
84459: GO 84625
// tmp := AreaToList ( area , i ) ;
84461: LD_ADDR_VAR 0 6
84465: PUSH
84466: LD_VAR 0 2
84470: PPUSH
84471: LD_VAR 0 5
84475: PPUSH
84476: CALL_OW 517
84480: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
84481: LD_ADDR_VAR 0 5
84485: PUSH
84486: DOUBLE
84487: LD_INT 1
84489: DEC
84490: ST_TO_ADDR
84491: LD_VAR 0 6
84495: PUSH
84496: LD_INT 1
84498: ARRAY
84499: PUSH
84500: FOR_TO
84501: IFFALSE 84623
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
84503: LD_ADDR_VAR 0 7
84507: PUSH
84508: LD_VAR 0 6
84512: PUSH
84513: LD_INT 1
84515: ARRAY
84516: PUSH
84517: LD_VAR 0 5
84521: ARRAY
84522: PUSH
84523: LD_VAR 0 6
84527: PUSH
84528: LD_INT 2
84530: ARRAY
84531: PUSH
84532: LD_VAR 0 5
84536: ARRAY
84537: PUSH
84538: EMPTY
84539: LIST
84540: LIST
84541: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
84542: LD_VAR 0 7
84546: PUSH
84547: LD_INT 1
84549: ARRAY
84550: PPUSH
84551: LD_VAR 0 7
84555: PUSH
84556: LD_INT 2
84558: ARRAY
84559: PPUSH
84560: CALL_OW 428
84564: PUSH
84565: LD_INT 0
84567: EQUAL
84568: IFFALSE 84621
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
84570: LD_VAR 0 1
84574: PPUSH
84575: LD_VAR 0 7
84579: PUSH
84580: LD_INT 1
84582: ARRAY
84583: PPUSH
84584: LD_VAR 0 7
84588: PUSH
84589: LD_INT 2
84591: ARRAY
84592: PPUSH
84593: LD_VAR 0 3
84597: PPUSH
84598: CALL_OW 48
// result := IsPlaced ( unit ) ;
84602: LD_ADDR_VAR 0 4
84606: PUSH
84607: LD_VAR 0 1
84611: PPUSH
84612: CALL_OW 305
84616: ST_TO_ADDR
// exit ;
84617: POP
84618: POP
84619: GO 84625
// end ; end ;
84621: GO 84500
84623: POP
84624: POP
// end ;
84625: LD_VAR 0 4
84629: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
84630: LD_INT 0
84632: PPUSH
84633: PPUSH
84634: PPUSH
// if not side or side > 8 then
84635: LD_VAR 0 1
84639: NOT
84640: PUSH
84641: LD_VAR 0 1
84645: PUSH
84646: LD_INT 8
84648: GREATER
84649: OR
84650: IFFALSE 84654
// exit ;
84652: GO 84841
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
84654: LD_ADDR_VAR 0 4
84658: PUSH
84659: LD_INT 22
84661: PUSH
84662: LD_VAR 0 1
84666: PUSH
84667: EMPTY
84668: LIST
84669: LIST
84670: PUSH
84671: LD_INT 21
84673: PUSH
84674: LD_INT 3
84676: PUSH
84677: EMPTY
84678: LIST
84679: LIST
84680: PUSH
84681: EMPTY
84682: LIST
84683: LIST
84684: PPUSH
84685: CALL_OW 69
84689: ST_TO_ADDR
// if not tmp then
84690: LD_VAR 0 4
84694: NOT
84695: IFFALSE 84699
// exit ;
84697: GO 84841
// enable_addtolog := true ;
84699: LD_ADDR_OWVAR 81
84703: PUSH
84704: LD_INT 1
84706: ST_TO_ADDR
// AddToLog ( [ ) ;
84707: LD_STRING [
84709: PPUSH
84710: CALL_OW 561
// for i in tmp do
84714: LD_ADDR_VAR 0 3
84718: PUSH
84719: LD_VAR 0 4
84723: PUSH
84724: FOR_IN
84725: IFFALSE 84832
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
84727: LD_STRING [
84729: PUSH
84730: LD_VAR 0 3
84734: PPUSH
84735: CALL_OW 266
84739: STR
84740: PUSH
84741: LD_STRING , 
84743: STR
84744: PUSH
84745: LD_VAR 0 3
84749: PPUSH
84750: CALL_OW 250
84754: STR
84755: PUSH
84756: LD_STRING , 
84758: STR
84759: PUSH
84760: LD_VAR 0 3
84764: PPUSH
84765: CALL_OW 251
84769: STR
84770: PUSH
84771: LD_STRING , 
84773: STR
84774: PUSH
84775: LD_VAR 0 3
84779: PPUSH
84780: CALL_OW 254
84784: STR
84785: PUSH
84786: LD_STRING , 
84788: STR
84789: PUSH
84790: LD_VAR 0 3
84794: PPUSH
84795: LD_INT 1
84797: PPUSH
84798: CALL_OW 268
84802: STR
84803: PUSH
84804: LD_STRING , 
84806: STR
84807: PUSH
84808: LD_VAR 0 3
84812: PPUSH
84813: LD_INT 2
84815: PPUSH
84816: CALL_OW 268
84820: STR
84821: PUSH
84822: LD_STRING ],
84824: STR
84825: PPUSH
84826: CALL_OW 561
// end ;
84830: GO 84724
84832: POP
84833: POP
// AddToLog ( ]; ) ;
84834: LD_STRING ];
84836: PPUSH
84837: CALL_OW 561
// end ;
84841: LD_VAR 0 2
84845: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
84846: LD_INT 0
84848: PPUSH
84849: PPUSH
84850: PPUSH
84851: PPUSH
84852: PPUSH
// if not area or not rate or not max then
84853: LD_VAR 0 1
84857: NOT
84858: PUSH
84859: LD_VAR 0 2
84863: NOT
84864: OR
84865: PUSH
84866: LD_VAR 0 4
84870: NOT
84871: OR
84872: IFFALSE 84876
// exit ;
84874: GO 85068
// while 1 do
84876: LD_INT 1
84878: IFFALSE 85068
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
84880: LD_ADDR_VAR 0 9
84884: PUSH
84885: LD_VAR 0 1
84889: PPUSH
84890: LD_INT 1
84892: PPUSH
84893: CALL_OW 287
84897: PUSH
84898: LD_INT 10
84900: MUL
84901: ST_TO_ADDR
// r := rate / 10 ;
84902: LD_ADDR_VAR 0 7
84906: PUSH
84907: LD_VAR 0 2
84911: PUSH
84912: LD_INT 10
84914: DIVREAL
84915: ST_TO_ADDR
// time := 1 1$00 ;
84916: LD_ADDR_VAR 0 8
84920: PUSH
84921: LD_INT 2100
84923: ST_TO_ADDR
// if amount < min then
84924: LD_VAR 0 9
84928: PUSH
84929: LD_VAR 0 3
84933: LESS
84934: IFFALSE 84952
// r := r * 2 else
84936: LD_ADDR_VAR 0 7
84940: PUSH
84941: LD_VAR 0 7
84945: PUSH
84946: LD_INT 2
84948: MUL
84949: ST_TO_ADDR
84950: GO 84978
// if amount > max then
84952: LD_VAR 0 9
84956: PUSH
84957: LD_VAR 0 4
84961: GREATER
84962: IFFALSE 84978
// r := r / 2 ;
84964: LD_ADDR_VAR 0 7
84968: PUSH
84969: LD_VAR 0 7
84973: PUSH
84974: LD_INT 2
84976: DIVREAL
84977: ST_TO_ADDR
// time := time / r ;
84978: LD_ADDR_VAR 0 8
84982: PUSH
84983: LD_VAR 0 8
84987: PUSH
84988: LD_VAR 0 7
84992: DIVREAL
84993: ST_TO_ADDR
// if time < 0 then
84994: LD_VAR 0 8
84998: PUSH
84999: LD_INT 0
85001: LESS
85002: IFFALSE 85019
// time := time * - 1 ;
85004: LD_ADDR_VAR 0 8
85008: PUSH
85009: LD_VAR 0 8
85013: PUSH
85014: LD_INT 1
85016: NEG
85017: MUL
85018: ST_TO_ADDR
// wait ( time ) ;
85019: LD_VAR 0 8
85023: PPUSH
85024: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
85028: LD_INT 35
85030: PPUSH
85031: LD_INT 875
85033: PPUSH
85034: CALL_OW 12
85038: PPUSH
85039: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
85043: LD_INT 1
85045: PPUSH
85046: LD_INT 5
85048: PPUSH
85049: CALL_OW 12
85053: PPUSH
85054: LD_VAR 0 1
85058: PPUSH
85059: LD_INT 1
85061: PPUSH
85062: CALL_OW 55
// end ;
85066: GO 84876
// end ;
85068: LD_VAR 0 5
85072: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
85073: LD_INT 0
85075: PPUSH
85076: PPUSH
85077: PPUSH
85078: PPUSH
85079: PPUSH
85080: PPUSH
85081: PPUSH
85082: PPUSH
// if not turrets or not factories then
85083: LD_VAR 0 1
85087: NOT
85088: PUSH
85089: LD_VAR 0 2
85093: NOT
85094: OR
85095: IFFALSE 85099
// exit ;
85097: GO 85406
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
85099: LD_ADDR_VAR 0 10
85103: PUSH
85104: LD_INT 5
85106: PUSH
85107: LD_INT 6
85109: PUSH
85110: EMPTY
85111: LIST
85112: LIST
85113: PUSH
85114: LD_INT 2
85116: PUSH
85117: LD_INT 4
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: PUSH
85124: LD_INT 3
85126: PUSH
85127: LD_INT 5
85129: PUSH
85130: EMPTY
85131: LIST
85132: LIST
85133: PUSH
85134: EMPTY
85135: LIST
85136: LIST
85137: LIST
85138: PUSH
85139: LD_INT 24
85141: PUSH
85142: LD_INT 25
85144: PUSH
85145: EMPTY
85146: LIST
85147: LIST
85148: PUSH
85149: LD_INT 23
85151: PUSH
85152: LD_INT 27
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: PUSH
85159: EMPTY
85160: LIST
85161: LIST
85162: PUSH
85163: LD_INT 42
85165: PUSH
85166: LD_INT 43
85168: PUSH
85169: EMPTY
85170: LIST
85171: LIST
85172: PUSH
85173: LD_INT 44
85175: PUSH
85176: LD_INT 46
85178: PUSH
85179: EMPTY
85180: LIST
85181: LIST
85182: PUSH
85183: LD_INT 45
85185: PUSH
85186: LD_INT 47
85188: PUSH
85189: EMPTY
85190: LIST
85191: LIST
85192: PUSH
85193: EMPTY
85194: LIST
85195: LIST
85196: LIST
85197: PUSH
85198: EMPTY
85199: LIST
85200: LIST
85201: LIST
85202: ST_TO_ADDR
// result := [ ] ;
85203: LD_ADDR_VAR 0 3
85207: PUSH
85208: EMPTY
85209: ST_TO_ADDR
// for i in turrets do
85210: LD_ADDR_VAR 0 4
85214: PUSH
85215: LD_VAR 0 1
85219: PUSH
85220: FOR_IN
85221: IFFALSE 85404
// begin nat := GetNation ( i ) ;
85223: LD_ADDR_VAR 0 7
85227: PUSH
85228: LD_VAR 0 4
85232: PPUSH
85233: CALL_OW 248
85237: ST_TO_ADDR
// weapon := 0 ;
85238: LD_ADDR_VAR 0 8
85242: PUSH
85243: LD_INT 0
85245: ST_TO_ADDR
// if not nat then
85246: LD_VAR 0 7
85250: NOT
85251: IFFALSE 85255
// continue ;
85253: GO 85220
// for j in list [ nat ] do
85255: LD_ADDR_VAR 0 5
85259: PUSH
85260: LD_VAR 0 10
85264: PUSH
85265: LD_VAR 0 7
85269: ARRAY
85270: PUSH
85271: FOR_IN
85272: IFFALSE 85313
// if GetBWeapon ( i ) = j [ 1 ] then
85274: LD_VAR 0 4
85278: PPUSH
85279: CALL_OW 269
85283: PUSH
85284: LD_VAR 0 5
85288: PUSH
85289: LD_INT 1
85291: ARRAY
85292: EQUAL
85293: IFFALSE 85311
// begin weapon := j [ 2 ] ;
85295: LD_ADDR_VAR 0 8
85299: PUSH
85300: LD_VAR 0 5
85304: PUSH
85305: LD_INT 2
85307: ARRAY
85308: ST_TO_ADDR
// break ;
85309: GO 85313
// end ;
85311: GO 85271
85313: POP
85314: POP
// if not weapon then
85315: LD_VAR 0 8
85319: NOT
85320: IFFALSE 85324
// continue ;
85322: GO 85220
// for k in factories do
85324: LD_ADDR_VAR 0 6
85328: PUSH
85329: LD_VAR 0 2
85333: PUSH
85334: FOR_IN
85335: IFFALSE 85400
// begin weapons := AvailableWeaponList ( k ) ;
85337: LD_ADDR_VAR 0 9
85341: PUSH
85342: LD_VAR 0 6
85346: PPUSH
85347: CALL_OW 478
85351: ST_TO_ADDR
// if not weapons then
85352: LD_VAR 0 9
85356: NOT
85357: IFFALSE 85361
// continue ;
85359: GO 85334
// if weapon in weapons then
85361: LD_VAR 0 8
85365: PUSH
85366: LD_VAR 0 9
85370: IN
85371: IFFALSE 85398
// begin result := [ i , weapon ] ;
85373: LD_ADDR_VAR 0 3
85377: PUSH
85378: LD_VAR 0 4
85382: PUSH
85383: LD_VAR 0 8
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: ST_TO_ADDR
// exit ;
85392: POP
85393: POP
85394: POP
85395: POP
85396: GO 85406
// end ; end ;
85398: GO 85334
85400: POP
85401: POP
// end ;
85402: GO 85220
85404: POP
85405: POP
// end ;
85406: LD_VAR 0 3
85410: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
85411: LD_INT 0
85413: PPUSH
// if not side or side > 8 then
85414: LD_VAR 0 3
85418: NOT
85419: PUSH
85420: LD_VAR 0 3
85424: PUSH
85425: LD_INT 8
85427: GREATER
85428: OR
85429: IFFALSE 85433
// exit ;
85431: GO 85492
// if not range then
85433: LD_VAR 0 4
85437: NOT
85438: IFFALSE 85449
// range := - 12 ;
85440: LD_ADDR_VAR 0 4
85444: PUSH
85445: LD_INT 12
85447: NEG
85448: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
85449: LD_VAR 0 1
85453: PPUSH
85454: LD_VAR 0 2
85458: PPUSH
85459: LD_VAR 0 3
85463: PPUSH
85464: LD_VAR 0 4
85468: PPUSH
85469: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
85473: LD_VAR 0 1
85477: PPUSH
85478: LD_VAR 0 2
85482: PPUSH
85483: LD_VAR 0 3
85487: PPUSH
85488: CALL_OW 331
// end ;
85492: LD_VAR 0 5
85496: RET
// export function Video ( mode ) ; begin
85497: LD_INT 0
85499: PPUSH
// ingame_video = mode ;
85500: LD_ADDR_OWVAR 52
85504: PUSH
85505: LD_VAR 0 1
85509: ST_TO_ADDR
// interface_hidden = mode ;
85510: LD_ADDR_OWVAR 54
85514: PUSH
85515: LD_VAR 0 1
85519: ST_TO_ADDR
// end ;
85520: LD_VAR 0 2
85524: RET
// export function Join ( array , element ) ; begin
85525: LD_INT 0
85527: PPUSH
// result := Replace ( array , array + 1 , element ) ;
85528: LD_ADDR_VAR 0 3
85532: PUSH
85533: LD_VAR 0 1
85537: PPUSH
85538: LD_VAR 0 1
85542: PUSH
85543: LD_INT 1
85545: PLUS
85546: PPUSH
85547: LD_VAR 0 2
85551: PPUSH
85552: CALL_OW 1
85556: ST_TO_ADDR
// end ;
85557: LD_VAR 0 3
85561: RET
// export function JoinUnion ( array , element ) ; begin
85562: LD_INT 0
85564: PPUSH
// result := array union element ;
85565: LD_ADDR_VAR 0 3
85569: PUSH
85570: LD_VAR 0 1
85574: PUSH
85575: LD_VAR 0 2
85579: UNION
85580: ST_TO_ADDR
// end ;
85581: LD_VAR 0 3
85585: RET
// export function GetBehemoths ( side ) ; begin
85586: LD_INT 0
85588: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
85589: LD_ADDR_VAR 0 2
85593: PUSH
85594: LD_INT 22
85596: PUSH
85597: LD_VAR 0 1
85601: PUSH
85602: EMPTY
85603: LIST
85604: LIST
85605: PUSH
85606: LD_INT 31
85608: PUSH
85609: LD_INT 25
85611: PUSH
85612: EMPTY
85613: LIST
85614: LIST
85615: PUSH
85616: EMPTY
85617: LIST
85618: LIST
85619: PPUSH
85620: CALL_OW 69
85624: ST_TO_ADDR
// end ;
85625: LD_VAR 0 2
85629: RET
// export function Shuffle ( array ) ; var i , index ; begin
85630: LD_INT 0
85632: PPUSH
85633: PPUSH
85634: PPUSH
// result := [ ] ;
85635: LD_ADDR_VAR 0 2
85639: PUSH
85640: EMPTY
85641: ST_TO_ADDR
// if not array then
85642: LD_VAR 0 1
85646: NOT
85647: IFFALSE 85651
// exit ;
85649: GO 85750
// Randomize ;
85651: CALL_OW 10
// for i = array downto 1 do
85655: LD_ADDR_VAR 0 3
85659: PUSH
85660: DOUBLE
85661: LD_VAR 0 1
85665: INC
85666: ST_TO_ADDR
85667: LD_INT 1
85669: PUSH
85670: FOR_DOWNTO
85671: IFFALSE 85748
// begin index := rand ( 1 , array ) ;
85673: LD_ADDR_VAR 0 4
85677: PUSH
85678: LD_INT 1
85680: PPUSH
85681: LD_VAR 0 1
85685: PPUSH
85686: CALL_OW 12
85690: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
85691: LD_ADDR_VAR 0 2
85695: PUSH
85696: LD_VAR 0 2
85700: PPUSH
85701: LD_VAR 0 2
85705: PUSH
85706: LD_INT 1
85708: PLUS
85709: PPUSH
85710: LD_VAR 0 1
85714: PUSH
85715: LD_VAR 0 4
85719: ARRAY
85720: PPUSH
85721: CALL_OW 2
85725: ST_TO_ADDR
// array := Delete ( array , index ) ;
85726: LD_ADDR_VAR 0 1
85730: PUSH
85731: LD_VAR 0 1
85735: PPUSH
85736: LD_VAR 0 4
85740: PPUSH
85741: CALL_OW 3
85745: ST_TO_ADDR
// end ;
85746: GO 85670
85748: POP
85749: POP
// end ;
85750: LD_VAR 0 2
85754: RET
// export function GetBaseMaterials ( base ) ; begin
85755: LD_INT 0
85757: PPUSH
// result := [ 0 , 0 , 0 ] ;
85758: LD_ADDR_VAR 0 2
85762: PUSH
85763: LD_INT 0
85765: PUSH
85766: LD_INT 0
85768: PUSH
85769: LD_INT 0
85771: PUSH
85772: EMPTY
85773: LIST
85774: LIST
85775: LIST
85776: ST_TO_ADDR
// if not base then
85777: LD_VAR 0 1
85781: NOT
85782: IFFALSE 85786
// exit ;
85784: GO 85835
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
85786: LD_ADDR_VAR 0 2
85790: PUSH
85791: LD_VAR 0 1
85795: PPUSH
85796: LD_INT 1
85798: PPUSH
85799: CALL_OW 275
85803: PUSH
85804: LD_VAR 0 1
85808: PPUSH
85809: LD_INT 2
85811: PPUSH
85812: CALL_OW 275
85816: PUSH
85817: LD_VAR 0 1
85821: PPUSH
85822: LD_INT 3
85824: PPUSH
85825: CALL_OW 275
85829: PUSH
85830: EMPTY
85831: LIST
85832: LIST
85833: LIST
85834: ST_TO_ADDR
// end ;
85835: LD_VAR 0 2
85839: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
85840: LD_INT 0
85842: PPUSH
85843: PPUSH
// result := array ;
85844: LD_ADDR_VAR 0 3
85848: PUSH
85849: LD_VAR 0 1
85853: ST_TO_ADDR
// if size > 0 then
85854: LD_VAR 0 2
85858: PUSH
85859: LD_INT 0
85861: GREATER
85862: IFFALSE 85908
// for i := array downto size do
85864: LD_ADDR_VAR 0 4
85868: PUSH
85869: DOUBLE
85870: LD_VAR 0 1
85874: INC
85875: ST_TO_ADDR
85876: LD_VAR 0 2
85880: PUSH
85881: FOR_DOWNTO
85882: IFFALSE 85906
// result := Delete ( result , result ) ;
85884: LD_ADDR_VAR 0 3
85888: PUSH
85889: LD_VAR 0 3
85893: PPUSH
85894: LD_VAR 0 3
85898: PPUSH
85899: CALL_OW 3
85903: ST_TO_ADDR
85904: GO 85881
85906: POP
85907: POP
// end ;
85908: LD_VAR 0 3
85912: RET
// export function ComExit ( unit ) ; var tmp ; begin
85913: LD_INT 0
85915: PPUSH
85916: PPUSH
// if not IsInUnit ( unit ) then
85917: LD_VAR 0 1
85921: PPUSH
85922: CALL_OW 310
85926: NOT
85927: IFFALSE 85931
// exit ;
85929: GO 85991
// tmp := IsInUnit ( unit ) ;
85931: LD_ADDR_VAR 0 3
85935: PUSH
85936: LD_VAR 0 1
85940: PPUSH
85941: CALL_OW 310
85945: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
85946: LD_VAR 0 3
85950: PPUSH
85951: CALL_OW 247
85955: PUSH
85956: LD_INT 2
85958: EQUAL
85959: IFFALSE 85972
// ComExitVehicle ( unit ) else
85961: LD_VAR 0 1
85965: PPUSH
85966: CALL_OW 121
85970: GO 85981
// ComExitBuilding ( unit ) ;
85972: LD_VAR 0 1
85976: PPUSH
85977: CALL_OW 122
// result := tmp ;
85981: LD_ADDR_VAR 0 2
85985: PUSH
85986: LD_VAR 0 3
85990: ST_TO_ADDR
// end ;
85991: LD_VAR 0 2
85995: RET
// export function ComExitAll ( units ) ; var i ; begin
85996: LD_INT 0
85998: PPUSH
85999: PPUSH
// if not units then
86000: LD_VAR 0 1
86004: NOT
86005: IFFALSE 86009
// exit ;
86007: GO 86035
// for i in units do
86009: LD_ADDR_VAR 0 3
86013: PUSH
86014: LD_VAR 0 1
86018: PUSH
86019: FOR_IN
86020: IFFALSE 86033
// ComExit ( i ) ;
86022: LD_VAR 0 3
86026: PPUSH
86027: CALL 85913 0 1
86031: GO 86019
86033: POP
86034: POP
// end ;
86035: LD_VAR 0 2
86039: RET
// export function ResetHc ; begin
86040: LD_INT 0
86042: PPUSH
// InitHc ;
86043: CALL_OW 19
// hc_importance := 0 ;
86047: LD_ADDR_OWVAR 32
86051: PUSH
86052: LD_INT 0
86054: ST_TO_ADDR
// end ;
86055: LD_VAR 0 1
86059: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
86060: LD_INT 0
86062: PPUSH
86063: PPUSH
86064: PPUSH
// _x := ( x1 + x2 ) div 2 ;
86065: LD_ADDR_VAR 0 6
86069: PUSH
86070: LD_VAR 0 1
86074: PUSH
86075: LD_VAR 0 3
86079: PLUS
86080: PUSH
86081: LD_INT 2
86083: DIV
86084: ST_TO_ADDR
// if _x < 0 then
86085: LD_VAR 0 6
86089: PUSH
86090: LD_INT 0
86092: LESS
86093: IFFALSE 86110
// _x := _x * - 1 ;
86095: LD_ADDR_VAR 0 6
86099: PUSH
86100: LD_VAR 0 6
86104: PUSH
86105: LD_INT 1
86107: NEG
86108: MUL
86109: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
86110: LD_ADDR_VAR 0 7
86114: PUSH
86115: LD_VAR 0 2
86119: PUSH
86120: LD_VAR 0 4
86124: PLUS
86125: PUSH
86126: LD_INT 2
86128: DIV
86129: ST_TO_ADDR
// if _y < 0 then
86130: LD_VAR 0 7
86134: PUSH
86135: LD_INT 0
86137: LESS
86138: IFFALSE 86155
// _y := _y * - 1 ;
86140: LD_ADDR_VAR 0 7
86144: PUSH
86145: LD_VAR 0 7
86149: PUSH
86150: LD_INT 1
86152: NEG
86153: MUL
86154: ST_TO_ADDR
// result := [ _x , _y ] ;
86155: LD_ADDR_VAR 0 5
86159: PUSH
86160: LD_VAR 0 6
86164: PUSH
86165: LD_VAR 0 7
86169: PUSH
86170: EMPTY
86171: LIST
86172: LIST
86173: ST_TO_ADDR
// end ;
86174: LD_VAR 0 5
86178: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
86179: LD_INT 0
86181: PPUSH
86182: PPUSH
86183: PPUSH
86184: PPUSH
// task := GetTaskList ( unit ) ;
86185: LD_ADDR_VAR 0 7
86189: PUSH
86190: LD_VAR 0 1
86194: PPUSH
86195: CALL_OW 437
86199: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
86200: LD_VAR 0 7
86204: NOT
86205: PUSH
86206: LD_VAR 0 1
86210: PPUSH
86211: LD_VAR 0 2
86215: PPUSH
86216: CALL_OW 308
86220: NOT
86221: AND
86222: IFFALSE 86226
// exit ;
86224: GO 86344
// if IsInArea ( unit , area ) then
86226: LD_VAR 0 1
86230: PPUSH
86231: LD_VAR 0 2
86235: PPUSH
86236: CALL_OW 308
86240: IFFALSE 86258
// begin ComMoveToArea ( unit , goAway ) ;
86242: LD_VAR 0 1
86246: PPUSH
86247: LD_VAR 0 3
86251: PPUSH
86252: CALL_OW 113
// exit ;
86256: GO 86344
// end ; if task [ 1 ] [ 1 ] <> M then
86258: LD_VAR 0 7
86262: PUSH
86263: LD_INT 1
86265: ARRAY
86266: PUSH
86267: LD_INT 1
86269: ARRAY
86270: PUSH
86271: LD_STRING M
86273: NONEQUAL
86274: IFFALSE 86278
// exit ;
86276: GO 86344
// x := task [ 1 ] [ 2 ] ;
86278: LD_ADDR_VAR 0 5
86282: PUSH
86283: LD_VAR 0 7
86287: PUSH
86288: LD_INT 1
86290: ARRAY
86291: PUSH
86292: LD_INT 2
86294: ARRAY
86295: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
86296: LD_ADDR_VAR 0 6
86300: PUSH
86301: LD_VAR 0 7
86305: PUSH
86306: LD_INT 1
86308: ARRAY
86309: PUSH
86310: LD_INT 3
86312: ARRAY
86313: ST_TO_ADDR
// if InArea ( x , y , area ) then
86314: LD_VAR 0 5
86318: PPUSH
86319: LD_VAR 0 6
86323: PPUSH
86324: LD_VAR 0 2
86328: PPUSH
86329: CALL_OW 309
86333: IFFALSE 86344
// ComStop ( unit ) ;
86335: LD_VAR 0 1
86339: PPUSH
86340: CALL_OW 141
// end ;
86344: LD_VAR 0 4
86348: RET
// export function Abs ( value ) ; begin
86349: LD_INT 0
86351: PPUSH
// result := value ;
86352: LD_ADDR_VAR 0 2
86356: PUSH
86357: LD_VAR 0 1
86361: ST_TO_ADDR
// if value < 0 then
86362: LD_VAR 0 1
86366: PUSH
86367: LD_INT 0
86369: LESS
86370: IFFALSE 86387
// result := value * - 1 ;
86372: LD_ADDR_VAR 0 2
86376: PUSH
86377: LD_VAR 0 1
86381: PUSH
86382: LD_INT 1
86384: NEG
86385: MUL
86386: ST_TO_ADDR
// end ;
86387: LD_VAR 0 2
86391: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
86392: LD_INT 0
86394: PPUSH
86395: PPUSH
86396: PPUSH
86397: PPUSH
86398: PPUSH
86399: PPUSH
86400: PPUSH
86401: PPUSH
// if not unit or not building then
86402: LD_VAR 0 1
86406: NOT
86407: PUSH
86408: LD_VAR 0 2
86412: NOT
86413: OR
86414: IFFALSE 86418
// exit ;
86416: GO 86644
// x := GetX ( building ) ;
86418: LD_ADDR_VAR 0 4
86422: PUSH
86423: LD_VAR 0 2
86427: PPUSH
86428: CALL_OW 250
86432: ST_TO_ADDR
// y := GetY ( building ) ;
86433: LD_ADDR_VAR 0 6
86437: PUSH
86438: LD_VAR 0 2
86442: PPUSH
86443: CALL_OW 251
86447: ST_TO_ADDR
// d := GetDir ( building ) ;
86448: LD_ADDR_VAR 0 8
86452: PUSH
86453: LD_VAR 0 2
86457: PPUSH
86458: CALL_OW 254
86462: ST_TO_ADDR
// r := 4 ;
86463: LD_ADDR_VAR 0 9
86467: PUSH
86468: LD_INT 4
86470: ST_TO_ADDR
// for i := 1 to 5 do
86471: LD_ADDR_VAR 0 10
86475: PUSH
86476: DOUBLE
86477: LD_INT 1
86479: DEC
86480: ST_TO_ADDR
86481: LD_INT 5
86483: PUSH
86484: FOR_TO
86485: IFFALSE 86642
// begin _x := ShiftX ( x , d , r + i ) ;
86487: LD_ADDR_VAR 0 5
86491: PUSH
86492: LD_VAR 0 4
86496: PPUSH
86497: LD_VAR 0 8
86501: PPUSH
86502: LD_VAR 0 9
86506: PUSH
86507: LD_VAR 0 10
86511: PLUS
86512: PPUSH
86513: CALL_OW 272
86517: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
86518: LD_ADDR_VAR 0 7
86522: PUSH
86523: LD_VAR 0 6
86527: PPUSH
86528: LD_VAR 0 8
86532: PPUSH
86533: LD_VAR 0 9
86537: PUSH
86538: LD_VAR 0 10
86542: PLUS
86543: PPUSH
86544: CALL_OW 273
86548: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
86549: LD_VAR 0 5
86553: PPUSH
86554: LD_VAR 0 7
86558: PPUSH
86559: CALL_OW 488
86563: PUSH
86564: LD_VAR 0 5
86568: PPUSH
86569: LD_VAR 0 7
86573: PPUSH
86574: CALL_OW 428
86578: PPUSH
86579: CALL_OW 247
86583: PUSH
86584: LD_INT 3
86586: PUSH
86587: LD_INT 2
86589: PUSH
86590: EMPTY
86591: LIST
86592: LIST
86593: IN
86594: NOT
86595: AND
86596: IFFALSE 86640
// begin ComMoveXY ( unit , _x , _y ) ;
86598: LD_VAR 0 1
86602: PPUSH
86603: LD_VAR 0 5
86607: PPUSH
86608: LD_VAR 0 7
86612: PPUSH
86613: CALL_OW 111
// result := [ _x , _y ] ;
86617: LD_ADDR_VAR 0 3
86621: PUSH
86622: LD_VAR 0 5
86626: PUSH
86627: LD_VAR 0 7
86631: PUSH
86632: EMPTY
86633: LIST
86634: LIST
86635: ST_TO_ADDR
// exit ;
86636: POP
86637: POP
86638: GO 86644
// end ; end ;
86640: GO 86484
86642: POP
86643: POP
// end ;
86644: LD_VAR 0 3
86648: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
86649: LD_INT 0
86651: PPUSH
86652: PPUSH
86653: PPUSH
// result := 0 ;
86654: LD_ADDR_VAR 0 3
86658: PUSH
86659: LD_INT 0
86661: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
86662: LD_VAR 0 1
86666: PUSH
86667: LD_INT 0
86669: LESS
86670: PUSH
86671: LD_VAR 0 1
86675: PUSH
86676: LD_INT 8
86678: GREATER
86679: OR
86680: PUSH
86681: LD_VAR 0 2
86685: PUSH
86686: LD_INT 0
86688: LESS
86689: OR
86690: PUSH
86691: LD_VAR 0 2
86695: PUSH
86696: LD_INT 8
86698: GREATER
86699: OR
86700: IFFALSE 86704
// exit ;
86702: GO 86779
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
86704: LD_ADDR_VAR 0 4
86708: PUSH
86709: LD_INT 22
86711: PUSH
86712: LD_VAR 0 2
86716: PUSH
86717: EMPTY
86718: LIST
86719: LIST
86720: PPUSH
86721: CALL_OW 69
86725: PUSH
86726: FOR_IN
86727: IFFALSE 86777
// begin un := UnitShoot ( i ) ;
86729: LD_ADDR_VAR 0 5
86733: PUSH
86734: LD_VAR 0 4
86738: PPUSH
86739: CALL_OW 504
86743: ST_TO_ADDR
// if GetSide ( un ) = side1 then
86744: LD_VAR 0 5
86748: PPUSH
86749: CALL_OW 255
86753: PUSH
86754: LD_VAR 0 1
86758: EQUAL
86759: IFFALSE 86775
// begin result := un ;
86761: LD_ADDR_VAR 0 3
86765: PUSH
86766: LD_VAR 0 5
86770: ST_TO_ADDR
// exit ;
86771: POP
86772: POP
86773: GO 86779
// end ; end ;
86775: GO 86726
86777: POP
86778: POP
// end ;
86779: LD_VAR 0 3
86783: RET
// export function GetCargoBay ( units ) ; begin
86784: LD_INT 0
86786: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
86787: LD_ADDR_VAR 0 2
86791: PUSH
86792: LD_VAR 0 1
86796: PPUSH
86797: LD_INT 2
86799: PUSH
86800: LD_INT 34
86802: PUSH
86803: LD_INT 12
86805: PUSH
86806: EMPTY
86807: LIST
86808: LIST
86809: PUSH
86810: LD_INT 34
86812: PUSH
86813: LD_INT 51
86815: PUSH
86816: EMPTY
86817: LIST
86818: LIST
86819: PUSH
86820: LD_INT 34
86822: PUSH
86823: LD_INT 32
86825: PUSH
86826: EMPTY
86827: LIST
86828: LIST
86829: PUSH
86830: LD_INT 34
86832: PUSH
86833: LD_EXP 70
86837: PUSH
86838: EMPTY
86839: LIST
86840: LIST
86841: PUSH
86842: EMPTY
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: LIST
86848: PPUSH
86849: CALL_OW 72
86853: ST_TO_ADDR
// end ;
86854: LD_VAR 0 2
86858: RET
// export function Negate ( value ) ; begin
86859: LD_INT 0
86861: PPUSH
// result := not value ;
86862: LD_ADDR_VAR 0 2
86866: PUSH
86867: LD_VAR 0 1
86871: NOT
86872: ST_TO_ADDR
// end ;
86873: LD_VAR 0 2
86877: RET
// export function Inc ( value ) ; begin
86878: LD_INT 0
86880: PPUSH
// result := value + 1 ;
86881: LD_ADDR_VAR 0 2
86885: PUSH
86886: LD_VAR 0 1
86890: PUSH
86891: LD_INT 1
86893: PLUS
86894: ST_TO_ADDR
// end ;
86895: LD_VAR 0 2
86899: RET
// export function Dec ( value ) ; begin
86900: LD_INT 0
86902: PPUSH
// result := value - 1 ;
86903: LD_ADDR_VAR 0 2
86907: PUSH
86908: LD_VAR 0 1
86912: PUSH
86913: LD_INT 1
86915: MINUS
86916: ST_TO_ADDR
// end ;
86917: LD_VAR 0 2
86921: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
86922: LD_INT 0
86924: PPUSH
86925: PPUSH
86926: PPUSH
86927: PPUSH
86928: PPUSH
86929: PPUSH
86930: PPUSH
86931: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
86932: LD_VAR 0 1
86936: PPUSH
86937: LD_VAR 0 2
86941: PPUSH
86942: CALL_OW 488
86946: NOT
86947: PUSH
86948: LD_VAR 0 3
86952: PPUSH
86953: LD_VAR 0 4
86957: PPUSH
86958: CALL_OW 488
86962: NOT
86963: OR
86964: IFFALSE 86977
// begin result := - 1 ;
86966: LD_ADDR_VAR 0 5
86970: PUSH
86971: LD_INT 1
86973: NEG
86974: ST_TO_ADDR
// exit ;
86975: GO 87212
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
86977: LD_ADDR_VAR 0 12
86981: PUSH
86982: LD_VAR 0 1
86986: PPUSH
86987: LD_VAR 0 2
86991: PPUSH
86992: LD_VAR 0 3
86996: PPUSH
86997: LD_VAR 0 4
87001: PPUSH
87002: CALL 86060 0 4
87006: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
87007: LD_ADDR_VAR 0 11
87011: PUSH
87012: LD_VAR 0 1
87016: PPUSH
87017: LD_VAR 0 2
87021: PPUSH
87022: LD_VAR 0 12
87026: PUSH
87027: LD_INT 1
87029: ARRAY
87030: PPUSH
87031: LD_VAR 0 12
87035: PUSH
87036: LD_INT 2
87038: ARRAY
87039: PPUSH
87040: CALL_OW 298
87044: ST_TO_ADDR
// distance := 9999 ;
87045: LD_ADDR_VAR 0 10
87049: PUSH
87050: LD_INT 9999
87052: ST_TO_ADDR
// for i := 0 to 5 do
87053: LD_ADDR_VAR 0 6
87057: PUSH
87058: DOUBLE
87059: LD_INT 0
87061: DEC
87062: ST_TO_ADDR
87063: LD_INT 5
87065: PUSH
87066: FOR_TO
87067: IFFALSE 87210
// begin _x := ShiftX ( x1 , i , centerDist ) ;
87069: LD_ADDR_VAR 0 7
87073: PUSH
87074: LD_VAR 0 1
87078: PPUSH
87079: LD_VAR 0 6
87083: PPUSH
87084: LD_VAR 0 11
87088: PPUSH
87089: CALL_OW 272
87093: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
87094: LD_ADDR_VAR 0 8
87098: PUSH
87099: LD_VAR 0 2
87103: PPUSH
87104: LD_VAR 0 6
87108: PPUSH
87109: LD_VAR 0 11
87113: PPUSH
87114: CALL_OW 273
87118: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87119: LD_VAR 0 7
87123: PPUSH
87124: LD_VAR 0 8
87128: PPUSH
87129: CALL_OW 488
87133: NOT
87134: IFFALSE 87138
// continue ;
87136: GO 87066
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
87138: LD_ADDR_VAR 0 9
87142: PUSH
87143: LD_VAR 0 12
87147: PUSH
87148: LD_INT 1
87150: ARRAY
87151: PPUSH
87152: LD_VAR 0 12
87156: PUSH
87157: LD_INT 2
87159: ARRAY
87160: PPUSH
87161: LD_VAR 0 7
87165: PPUSH
87166: LD_VAR 0 8
87170: PPUSH
87171: CALL_OW 298
87175: ST_TO_ADDR
// if tmp < distance then
87176: LD_VAR 0 9
87180: PUSH
87181: LD_VAR 0 10
87185: LESS
87186: IFFALSE 87208
// begin result := i ;
87188: LD_ADDR_VAR 0 5
87192: PUSH
87193: LD_VAR 0 6
87197: ST_TO_ADDR
// distance := tmp ;
87198: LD_ADDR_VAR 0 10
87202: PUSH
87203: LD_VAR 0 9
87207: ST_TO_ADDR
// end ; end ;
87208: GO 87066
87210: POP
87211: POP
// end ;
87212: LD_VAR 0 5
87216: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
87217: LD_INT 0
87219: PPUSH
87220: PPUSH
// if not driver or not IsInUnit ( driver ) then
87221: LD_VAR 0 1
87225: NOT
87226: PUSH
87227: LD_VAR 0 1
87231: PPUSH
87232: CALL_OW 310
87236: NOT
87237: OR
87238: IFFALSE 87242
// exit ;
87240: GO 87332
// vehicle := IsInUnit ( driver ) ;
87242: LD_ADDR_VAR 0 3
87246: PUSH
87247: LD_VAR 0 1
87251: PPUSH
87252: CALL_OW 310
87256: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
87257: LD_VAR 0 1
87261: PPUSH
87262: LD_STRING \
87264: PUSH
87265: LD_INT 0
87267: PUSH
87268: LD_INT 0
87270: PUSH
87271: LD_INT 0
87273: PUSH
87274: LD_INT 0
87276: PUSH
87277: LD_INT 0
87279: PUSH
87280: LD_INT 0
87282: PUSH
87283: EMPTY
87284: LIST
87285: LIST
87286: LIST
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: PUSH
87292: LD_STRING E
87294: PUSH
87295: LD_INT 0
87297: PUSH
87298: LD_INT 0
87300: PUSH
87301: LD_VAR 0 3
87305: PUSH
87306: LD_INT 0
87308: PUSH
87309: LD_INT 0
87311: PUSH
87312: LD_INT 0
87314: PUSH
87315: EMPTY
87316: LIST
87317: LIST
87318: LIST
87319: LIST
87320: LIST
87321: LIST
87322: LIST
87323: PUSH
87324: EMPTY
87325: LIST
87326: LIST
87327: PPUSH
87328: CALL_OW 446
// end ;
87332: LD_VAR 0 2
87336: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
87337: LD_INT 0
87339: PPUSH
87340: PPUSH
// if not driver or not IsInUnit ( driver ) then
87341: LD_VAR 0 1
87345: NOT
87346: PUSH
87347: LD_VAR 0 1
87351: PPUSH
87352: CALL_OW 310
87356: NOT
87357: OR
87358: IFFALSE 87362
// exit ;
87360: GO 87452
// vehicle := IsInUnit ( driver ) ;
87362: LD_ADDR_VAR 0 3
87366: PUSH
87367: LD_VAR 0 1
87371: PPUSH
87372: CALL_OW 310
87376: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
87377: LD_VAR 0 1
87381: PPUSH
87382: LD_STRING \
87384: PUSH
87385: LD_INT 0
87387: PUSH
87388: LD_INT 0
87390: PUSH
87391: LD_INT 0
87393: PUSH
87394: LD_INT 0
87396: PUSH
87397: LD_INT 0
87399: PUSH
87400: LD_INT 0
87402: PUSH
87403: EMPTY
87404: LIST
87405: LIST
87406: LIST
87407: LIST
87408: LIST
87409: LIST
87410: LIST
87411: PUSH
87412: LD_STRING E
87414: PUSH
87415: LD_INT 0
87417: PUSH
87418: LD_INT 0
87420: PUSH
87421: LD_VAR 0 3
87425: PUSH
87426: LD_INT 0
87428: PUSH
87429: LD_INT 0
87431: PUSH
87432: LD_INT 0
87434: PUSH
87435: EMPTY
87436: LIST
87437: LIST
87438: LIST
87439: LIST
87440: LIST
87441: LIST
87442: LIST
87443: PUSH
87444: EMPTY
87445: LIST
87446: LIST
87447: PPUSH
87448: CALL_OW 447
// end ;
87452: LD_VAR 0 2
87456: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
87457: LD_INT 0
87459: PPUSH
87460: PPUSH
87461: PPUSH
// tmp := [ ] ;
87462: LD_ADDR_VAR 0 5
87466: PUSH
87467: EMPTY
87468: ST_TO_ADDR
// for i in units do
87469: LD_ADDR_VAR 0 4
87473: PUSH
87474: LD_VAR 0 1
87478: PUSH
87479: FOR_IN
87480: IFFALSE 87518
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
87482: LD_ADDR_VAR 0 5
87486: PUSH
87487: LD_VAR 0 5
87491: PPUSH
87492: LD_VAR 0 5
87496: PUSH
87497: LD_INT 1
87499: PLUS
87500: PPUSH
87501: LD_VAR 0 4
87505: PPUSH
87506: CALL_OW 256
87510: PPUSH
87511: CALL_OW 2
87515: ST_TO_ADDR
87516: GO 87479
87518: POP
87519: POP
// if not tmp then
87520: LD_VAR 0 5
87524: NOT
87525: IFFALSE 87529
// exit ;
87527: GO 87577
// if asc then
87529: LD_VAR 0 2
87533: IFFALSE 87557
// result := SortListByListAsc ( units , tmp ) else
87535: LD_ADDR_VAR 0 3
87539: PUSH
87540: LD_VAR 0 1
87544: PPUSH
87545: LD_VAR 0 5
87549: PPUSH
87550: CALL_OW 76
87554: ST_TO_ADDR
87555: GO 87577
// result := SortListByListDesc ( units , tmp ) ;
87557: LD_ADDR_VAR 0 3
87561: PUSH
87562: LD_VAR 0 1
87566: PPUSH
87567: LD_VAR 0 5
87571: PPUSH
87572: CALL_OW 77
87576: ST_TO_ADDR
// end ;
87577: LD_VAR 0 3
87581: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
87582: LD_INT 0
87584: PPUSH
87585: PPUSH
// task := GetTaskList ( mech ) ;
87586: LD_ADDR_VAR 0 4
87590: PUSH
87591: LD_VAR 0 1
87595: PPUSH
87596: CALL_OW 437
87600: ST_TO_ADDR
// if not task then
87601: LD_VAR 0 4
87605: NOT
87606: IFFALSE 87610
// exit ;
87608: GO 87652
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
87610: LD_ADDR_VAR 0 3
87614: PUSH
87615: LD_VAR 0 4
87619: PUSH
87620: LD_INT 1
87622: ARRAY
87623: PUSH
87624: LD_INT 1
87626: ARRAY
87627: PUSH
87628: LD_STRING r
87630: EQUAL
87631: PUSH
87632: LD_VAR 0 4
87636: PUSH
87637: LD_INT 1
87639: ARRAY
87640: PUSH
87641: LD_INT 4
87643: ARRAY
87644: PUSH
87645: LD_VAR 0 2
87649: EQUAL
87650: AND
87651: ST_TO_ADDR
// end ;
87652: LD_VAR 0 3
87656: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
87657: LD_INT 0
87659: PPUSH
// SetDir ( unit , d ) ;
87660: LD_VAR 0 1
87664: PPUSH
87665: LD_VAR 0 4
87669: PPUSH
87670: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
87674: LD_VAR 0 1
87678: PPUSH
87679: LD_VAR 0 2
87683: PPUSH
87684: LD_VAR 0 3
87688: PPUSH
87689: LD_VAR 0 5
87693: PPUSH
87694: CALL_OW 48
// end ;
87698: LD_VAR 0 6
87702: RET
// export function ToNaturalNumber ( number ) ; begin
87703: LD_INT 0
87705: PPUSH
// result := number div 1 ;
87706: LD_ADDR_VAR 0 2
87710: PUSH
87711: LD_VAR 0 1
87715: PUSH
87716: LD_INT 1
87718: DIV
87719: ST_TO_ADDR
// if number < 0 then
87720: LD_VAR 0 1
87724: PUSH
87725: LD_INT 0
87727: LESS
87728: IFFALSE 87738
// result := 0 ;
87730: LD_ADDR_VAR 0 2
87734: PUSH
87735: LD_INT 0
87737: ST_TO_ADDR
// end ;
87738: LD_VAR 0 2
87742: RET
// export function SortByClass ( units , class ) ; var un ; begin
87743: LD_INT 0
87745: PPUSH
87746: PPUSH
// if not units or not class then
87747: LD_VAR 0 1
87751: NOT
87752: PUSH
87753: LD_VAR 0 2
87757: NOT
87758: OR
87759: IFFALSE 87763
// exit ;
87761: GO 87858
// result := [ ] ;
87763: LD_ADDR_VAR 0 3
87767: PUSH
87768: EMPTY
87769: ST_TO_ADDR
// for un in units do
87770: LD_ADDR_VAR 0 4
87774: PUSH
87775: LD_VAR 0 1
87779: PUSH
87780: FOR_IN
87781: IFFALSE 87856
// if GetClass ( un ) = class then
87783: LD_VAR 0 4
87787: PPUSH
87788: CALL_OW 257
87792: PUSH
87793: LD_VAR 0 2
87797: EQUAL
87798: IFFALSE 87825
// result := Insert ( result , 1 , un ) else
87800: LD_ADDR_VAR 0 3
87804: PUSH
87805: LD_VAR 0 3
87809: PPUSH
87810: LD_INT 1
87812: PPUSH
87813: LD_VAR 0 4
87817: PPUSH
87818: CALL_OW 2
87822: ST_TO_ADDR
87823: GO 87854
// result := Replace ( result , result + 1 , un ) ;
87825: LD_ADDR_VAR 0 3
87829: PUSH
87830: LD_VAR 0 3
87834: PPUSH
87835: LD_VAR 0 3
87839: PUSH
87840: LD_INT 1
87842: PLUS
87843: PPUSH
87844: LD_VAR 0 4
87848: PPUSH
87849: CALL_OW 1
87853: ST_TO_ADDR
87854: GO 87780
87856: POP
87857: POP
// end ;
87858: LD_VAR 0 3
87862: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
87863: LD_INT 0
87865: PPUSH
87866: PPUSH
87867: PPUSH
87868: PPUSH
87869: PPUSH
87870: PPUSH
87871: PPUSH
// result := [ ] ;
87872: LD_ADDR_VAR 0 4
87876: PUSH
87877: EMPTY
87878: ST_TO_ADDR
// if x - r < 0 then
87879: LD_VAR 0 1
87883: PUSH
87884: LD_VAR 0 3
87888: MINUS
87889: PUSH
87890: LD_INT 0
87892: LESS
87893: IFFALSE 87905
// min_x := 0 else
87895: LD_ADDR_VAR 0 8
87899: PUSH
87900: LD_INT 0
87902: ST_TO_ADDR
87903: GO 87921
// min_x := x - r ;
87905: LD_ADDR_VAR 0 8
87909: PUSH
87910: LD_VAR 0 1
87914: PUSH
87915: LD_VAR 0 3
87919: MINUS
87920: ST_TO_ADDR
// if y - r < 0 then
87921: LD_VAR 0 2
87925: PUSH
87926: LD_VAR 0 3
87930: MINUS
87931: PUSH
87932: LD_INT 0
87934: LESS
87935: IFFALSE 87947
// min_y := 0 else
87937: LD_ADDR_VAR 0 7
87941: PUSH
87942: LD_INT 0
87944: ST_TO_ADDR
87945: GO 87963
// min_y := y - r ;
87947: LD_ADDR_VAR 0 7
87951: PUSH
87952: LD_VAR 0 2
87956: PUSH
87957: LD_VAR 0 3
87961: MINUS
87962: ST_TO_ADDR
// max_x := x + r ;
87963: LD_ADDR_VAR 0 9
87967: PUSH
87968: LD_VAR 0 1
87972: PUSH
87973: LD_VAR 0 3
87977: PLUS
87978: ST_TO_ADDR
// max_y := y + r ;
87979: LD_ADDR_VAR 0 10
87983: PUSH
87984: LD_VAR 0 2
87988: PUSH
87989: LD_VAR 0 3
87993: PLUS
87994: ST_TO_ADDR
// for _x = min_x to max_x do
87995: LD_ADDR_VAR 0 5
87999: PUSH
88000: DOUBLE
88001: LD_VAR 0 8
88005: DEC
88006: ST_TO_ADDR
88007: LD_VAR 0 9
88011: PUSH
88012: FOR_TO
88013: IFFALSE 88114
// for _y = min_y to max_y do
88015: LD_ADDR_VAR 0 6
88019: PUSH
88020: DOUBLE
88021: LD_VAR 0 7
88025: DEC
88026: ST_TO_ADDR
88027: LD_VAR 0 10
88031: PUSH
88032: FOR_TO
88033: IFFALSE 88110
// begin if not ValidHex ( _x , _y ) then
88035: LD_VAR 0 5
88039: PPUSH
88040: LD_VAR 0 6
88044: PPUSH
88045: CALL_OW 488
88049: NOT
88050: IFFALSE 88054
// continue ;
88052: GO 88032
// if GetResourceTypeXY ( _x , _y ) then
88054: LD_VAR 0 5
88058: PPUSH
88059: LD_VAR 0 6
88063: PPUSH
88064: CALL_OW 283
88068: IFFALSE 88108
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
88070: LD_ADDR_VAR 0 4
88074: PUSH
88075: LD_VAR 0 4
88079: PPUSH
88080: LD_VAR 0 4
88084: PUSH
88085: LD_INT 1
88087: PLUS
88088: PPUSH
88089: LD_VAR 0 5
88093: PUSH
88094: LD_VAR 0 6
88098: PUSH
88099: EMPTY
88100: LIST
88101: LIST
88102: PPUSH
88103: CALL_OW 1
88107: ST_TO_ADDR
// end ;
88108: GO 88032
88110: POP
88111: POP
88112: GO 88012
88114: POP
88115: POP
// end ;
88116: LD_VAR 0 4
88120: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
88121: LD_INT 0
88123: PPUSH
88124: PPUSH
88125: PPUSH
88126: PPUSH
88127: PPUSH
88128: PPUSH
88129: PPUSH
88130: PPUSH
// if not units then
88131: LD_VAR 0 1
88135: NOT
88136: IFFALSE 88140
// exit ;
88138: GO 88565
// result := UnitFilter ( units , [ f_ok ] ) ;
88140: LD_ADDR_VAR 0 3
88144: PUSH
88145: LD_VAR 0 1
88149: PPUSH
88150: LD_INT 50
88152: PUSH
88153: EMPTY
88154: LIST
88155: PPUSH
88156: CALL_OW 72
88160: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
88161: LD_ADDR_VAR 0 8
88165: PUSH
88166: LD_VAR 0 1
88170: PUSH
88171: LD_INT 1
88173: ARRAY
88174: PPUSH
88175: CALL_OW 255
88179: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
88180: LD_ADDR_VAR 0 10
88184: PUSH
88185: LD_INT 29
88187: PUSH
88188: LD_EXP 73
88192: PUSH
88193: EMPTY
88194: LIST
88195: LIST
88196: ST_TO_ADDR
// if not result then
88197: LD_VAR 0 3
88201: NOT
88202: IFFALSE 88206
// exit ;
88204: GO 88565
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
88206: LD_ADDR_VAR 0 5
88210: PUSH
88211: LD_INT 81
88213: PUSH
88214: LD_VAR 0 8
88218: PUSH
88219: EMPTY
88220: LIST
88221: LIST
88222: PPUSH
88223: CALL_OW 69
88227: ST_TO_ADDR
// for i in result do
88228: LD_ADDR_VAR 0 4
88232: PUSH
88233: LD_VAR 0 3
88237: PUSH
88238: FOR_IN
88239: IFFALSE 88563
// begin tag := GetTag ( i ) + 1 ;
88241: LD_ADDR_VAR 0 9
88245: PUSH
88246: LD_VAR 0 4
88250: PPUSH
88251: CALL_OW 110
88255: PUSH
88256: LD_INT 1
88258: PLUS
88259: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
88260: LD_ADDR_VAR 0 7
88264: PUSH
88265: LD_VAR 0 4
88269: PPUSH
88270: CALL_OW 250
88274: PPUSH
88275: LD_VAR 0 4
88279: PPUSH
88280: CALL_OW 251
88284: PPUSH
88285: LD_INT 6
88287: PPUSH
88288: CALL 87863 0 3
88292: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
88293: LD_VAR 0 7
88297: PUSH
88298: LD_VAR 0 4
88302: PPUSH
88303: CALL_OW 264
88307: PUSH
88308: LD_VAR 0 10
88312: IN
88313: NOT
88314: AND
88315: IFFALSE 88354
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
88317: LD_VAR 0 4
88321: PPUSH
88322: LD_VAR 0 7
88326: PUSH
88327: LD_INT 1
88329: ARRAY
88330: PUSH
88331: LD_INT 1
88333: ARRAY
88334: PPUSH
88335: LD_VAR 0 7
88339: PUSH
88340: LD_INT 1
88342: ARRAY
88343: PUSH
88344: LD_INT 2
88346: ARRAY
88347: PPUSH
88348: CALL_OW 116
88352: GO 88561
// if path > tag then
88354: LD_VAR 0 2
88358: PUSH
88359: LD_VAR 0 9
88363: GREATER
88364: IFFALSE 88531
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
88366: LD_ADDR_VAR 0 6
88370: PUSH
88371: LD_VAR 0 5
88375: PPUSH
88376: LD_INT 91
88378: PUSH
88379: LD_VAR 0 4
88383: PUSH
88384: LD_INT 12
88386: PUSH
88387: EMPTY
88388: LIST
88389: LIST
88390: LIST
88391: PPUSH
88392: CALL_OW 72
88396: ST_TO_ADDR
// if nearEnemy then
88397: LD_VAR 0 6
88401: IFFALSE 88429
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
88403: LD_VAR 0 4
88407: PPUSH
88408: LD_VAR 0 6
88412: PPUSH
88413: LD_VAR 0 4
88417: PPUSH
88418: CALL_OW 74
88422: PPUSH
88423: CALL_OW 115
88427: GO 88529
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
88429: LD_VAR 0 4
88433: PPUSH
88434: LD_VAR 0 2
88438: PUSH
88439: LD_VAR 0 9
88443: ARRAY
88444: PUSH
88445: LD_INT 1
88447: ARRAY
88448: PPUSH
88449: LD_VAR 0 2
88453: PUSH
88454: LD_VAR 0 9
88458: ARRAY
88459: PUSH
88460: LD_INT 2
88462: ARRAY
88463: PPUSH
88464: CALL_OW 297
88468: PUSH
88469: LD_INT 6
88471: GREATER
88472: IFFALSE 88515
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
88474: LD_VAR 0 4
88478: PPUSH
88479: LD_VAR 0 2
88483: PUSH
88484: LD_VAR 0 9
88488: ARRAY
88489: PUSH
88490: LD_INT 1
88492: ARRAY
88493: PPUSH
88494: LD_VAR 0 2
88498: PUSH
88499: LD_VAR 0 9
88503: ARRAY
88504: PUSH
88505: LD_INT 2
88507: ARRAY
88508: PPUSH
88509: CALL_OW 114
88513: GO 88529
// SetTag ( i , tag ) ;
88515: LD_VAR 0 4
88519: PPUSH
88520: LD_VAR 0 9
88524: PPUSH
88525: CALL_OW 109
// end else
88529: GO 88561
// if enemy then
88531: LD_VAR 0 5
88535: IFFALSE 88561
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
88537: LD_VAR 0 4
88541: PPUSH
88542: LD_VAR 0 5
88546: PPUSH
88547: LD_VAR 0 4
88551: PPUSH
88552: CALL_OW 74
88556: PPUSH
88557: CALL_OW 115
// end ;
88561: GO 88238
88563: POP
88564: POP
// end ;
88565: LD_VAR 0 3
88569: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
88570: LD_INT 0
88572: PPUSH
88573: PPUSH
88574: PPUSH
// if not unit or IsInUnit ( unit ) then
88575: LD_VAR 0 1
88579: NOT
88580: PUSH
88581: LD_VAR 0 1
88585: PPUSH
88586: CALL_OW 310
88590: OR
88591: IFFALSE 88595
// exit ;
88593: GO 88686
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
88595: LD_ADDR_VAR 0 4
88599: PUSH
88600: LD_VAR 0 1
88604: PPUSH
88605: CALL_OW 250
88609: PPUSH
88610: LD_VAR 0 2
88614: PPUSH
88615: LD_INT 1
88617: PPUSH
88618: CALL_OW 272
88622: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
88623: LD_ADDR_VAR 0 5
88627: PUSH
88628: LD_VAR 0 1
88632: PPUSH
88633: CALL_OW 251
88637: PPUSH
88638: LD_VAR 0 2
88642: PPUSH
88643: LD_INT 1
88645: PPUSH
88646: CALL_OW 273
88650: ST_TO_ADDR
// if ValidHex ( x , y ) then
88651: LD_VAR 0 4
88655: PPUSH
88656: LD_VAR 0 5
88660: PPUSH
88661: CALL_OW 488
88665: IFFALSE 88686
// ComTurnXY ( unit , x , y ) ;
88667: LD_VAR 0 1
88671: PPUSH
88672: LD_VAR 0 4
88676: PPUSH
88677: LD_VAR 0 5
88681: PPUSH
88682: CALL_OW 118
// end ;
88686: LD_VAR 0 3
88690: RET
// export function SeeUnits ( side , units ) ; var i ; begin
88691: LD_INT 0
88693: PPUSH
88694: PPUSH
// result := false ;
88695: LD_ADDR_VAR 0 3
88699: PUSH
88700: LD_INT 0
88702: ST_TO_ADDR
// if not units then
88703: LD_VAR 0 2
88707: NOT
88708: IFFALSE 88712
// exit ;
88710: GO 88757
// for i in units do
88712: LD_ADDR_VAR 0 4
88716: PUSH
88717: LD_VAR 0 2
88721: PUSH
88722: FOR_IN
88723: IFFALSE 88755
// if See ( side , i ) then
88725: LD_VAR 0 1
88729: PPUSH
88730: LD_VAR 0 4
88734: PPUSH
88735: CALL_OW 292
88739: IFFALSE 88753
// begin result := true ;
88741: LD_ADDR_VAR 0 3
88745: PUSH
88746: LD_INT 1
88748: ST_TO_ADDR
// exit ;
88749: POP
88750: POP
88751: GO 88757
// end ;
88753: GO 88722
88755: POP
88756: POP
// end ;
88757: LD_VAR 0 3
88761: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
88762: LD_INT 0
88764: PPUSH
88765: PPUSH
88766: PPUSH
88767: PPUSH
// if not unit or not points then
88768: LD_VAR 0 1
88772: NOT
88773: PUSH
88774: LD_VAR 0 2
88778: NOT
88779: OR
88780: IFFALSE 88784
// exit ;
88782: GO 88874
// dist := 99999 ;
88784: LD_ADDR_VAR 0 5
88788: PUSH
88789: LD_INT 99999
88791: ST_TO_ADDR
// for i in points do
88792: LD_ADDR_VAR 0 4
88796: PUSH
88797: LD_VAR 0 2
88801: PUSH
88802: FOR_IN
88803: IFFALSE 88872
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
88805: LD_ADDR_VAR 0 6
88809: PUSH
88810: LD_VAR 0 1
88814: PPUSH
88815: LD_VAR 0 4
88819: PUSH
88820: LD_INT 1
88822: ARRAY
88823: PPUSH
88824: LD_VAR 0 4
88828: PUSH
88829: LD_INT 2
88831: ARRAY
88832: PPUSH
88833: CALL_OW 297
88837: ST_TO_ADDR
// if tmpDist < dist then
88838: LD_VAR 0 6
88842: PUSH
88843: LD_VAR 0 5
88847: LESS
88848: IFFALSE 88870
// begin result := i ;
88850: LD_ADDR_VAR 0 3
88854: PUSH
88855: LD_VAR 0 4
88859: ST_TO_ADDR
// dist := tmpDist ;
88860: LD_ADDR_VAR 0 5
88864: PUSH
88865: LD_VAR 0 6
88869: ST_TO_ADDR
// end ; end ;
88870: GO 88802
88872: POP
88873: POP
// end ; end_of_file
88874: LD_VAR 0 3
88878: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88879: LD_VAR 0 1
88883: PUSH
88884: LD_INT 200
88886: DOUBLE
88887: GREATEREQUAL
88888: IFFALSE 88896
88890: LD_INT 299
88892: DOUBLE
88893: LESSEQUAL
88894: IFTRUE 88898
88896: GO 88930
88898: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88899: LD_VAR 0 1
88903: PPUSH
88904: LD_VAR 0 2
88908: PPUSH
88909: LD_VAR 0 3
88913: PPUSH
88914: LD_VAR 0 4
88918: PPUSH
88919: LD_VAR 0 5
88923: PPUSH
88924: CALL 44526 0 5
88928: GO 89007
88930: LD_INT 300
88932: DOUBLE
88933: GREATEREQUAL
88934: IFFALSE 88942
88936: LD_INT 399
88938: DOUBLE
88939: LESSEQUAL
88940: IFTRUE 88944
88942: GO 89006
88944: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88945: LD_VAR 0 1
88949: PPUSH
88950: LD_VAR 0 2
88954: PPUSH
88955: LD_VAR 0 3
88959: PPUSH
88960: LD_VAR 0 4
88964: PPUSH
88965: LD_VAR 0 5
88969: PPUSH
88970: LD_VAR 0 6
88974: PPUSH
88975: LD_VAR 0 7
88979: PPUSH
88980: LD_VAR 0 8
88984: PPUSH
88985: LD_VAR 0 9
88989: PPUSH
88990: LD_VAR 0 10
88994: PPUSH
88995: LD_VAR 0 11
88999: PPUSH
89000: CALL 42168 0 11
89004: GO 89007
89006: POP
// end ;
89007: PPOPN 11
89009: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89010: LD_VAR 0 1
89014: PPUSH
89015: LD_VAR 0 2
89019: PPUSH
89020: LD_VAR 0 3
89024: PPUSH
89025: LD_VAR 0 4
89029: PPUSH
89030: LD_VAR 0 5
89034: PPUSH
89035: CALL 44262 0 5
// end ; end_of_file
89039: PPOPN 5
89041: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
89042: LD_VAR 0 1
89046: PPUSH
89047: LD_VAR 0 2
89051: PPUSH
89052: LD_VAR 0 3
89056: PPUSH
89057: LD_VAR 0 4
89061: PPUSH
89062: LD_VAR 0 5
89066: PPUSH
89067: LD_VAR 0 6
89071: PPUSH
89072: CALL 29861 0 6
// end ;
89076: PPOPN 6
89078: END
