// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 88 0 0
// PrepareAmerican ;
  19: CALL 112 0 0
// PrepareRussian ;
  23: CALL 128 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: NOP4
  73: PPUSH
  74: NOP4
  78: PPUSH
  79: CALL 54376 0 9
// Action ;
  83: NOP4
// end ;
  87: END
// export debug , mission_prefix ; function Init ; begin
  88: LD_INT 0
  90: PPUSH
// debug := true ;
  91: LD_ADDR_EXP 1
  95: PUSH
  96: LD_INT 1
  98: ST_TO_ADDR
// mission_prefix := 08c_ ;
  99: LD_ADDR_EXP 2
 103: PUSH
 104: LD_STRING 08c_
 106: ST_TO_ADDR
// end ; end_of_file
 107: LD_VAR 0 1
 111: RET
// export function PrepareAmerican ; begin
 112: LD_INT 0
 114: PPUSH
// end ; end_of_file
 115: LD_VAR 0 1
 119: RET
// export function PrepareArabian ; begin
 120: LD_INT 0
 122: PPUSH
// end ; end_of_file
 123: LD_VAR 0 1
 127: RET
// export function PrepareRussian ; begin
 128: LD_INT 0
 130: PPUSH
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file
 131: LD_VAR 0 1
 135: RET
// export globalGameSaveCounter ; every 0 0$1 do
 136: GO 138
 138: DISABLE
// begin enable ;
 139: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
 140: LD_STRING updateTimer(
 142: PUSH
 143: LD_OWVAR 1
 147: STR
 148: PUSH
 149: LD_STRING );
 151: STR
 152: PPUSH
 153: CALL_OW 559
// end ;
 157: END
// every 0 0$1 do
 158: GO 160
 160: DISABLE
// begin globalGameSaveCounter := 0 ;
 161: LD_ADDR_EXP 3
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
 169: LD_STRING setGameSaveCounter(0)
 171: PPUSH
 172: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
 176: LD_STRING initStreamRollete();
 178: PPUSH
 179: CALL_OW 559
// InitStreamMode ;
 183: CALL 1509 0 0
// DefineStreamItems ( false ) ;
 187: LD_INT 0
 189: PPUSH
 190: CALL 1973 0 1
// end ;
 194: END
// export function SOS_MapStart ( ) ; begin
 195: LD_INT 0
 197: PPUSH
// if streamModeActive then
 198: LD_EXP 4
 202: IFFALSE 211
// DefineStreamItems ( true ) ;
 204: LD_INT 1
 206: PPUSH
 207: CALL 1973 0 1
// UpdateLuaVariables ( ) ;
 211: CALL 228 0 0
// UpdateFactoryWaypoints ( ) ;
 215: CALL 14834 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 219: CALL 15091 0 0
// end ;
 223: LD_VAR 0 1
 227: RET
// function UpdateLuaVariables ( ) ; begin
 228: LD_INT 0
 230: PPUSH
// if globalGameSaveCounter then
 231: LD_EXP 3
 235: IFFALSE 269
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 237: LD_ADDR_EXP 3
 241: PUSH
 242: LD_EXP 3
 246: PPUSH
 247: CALL 59048 0 1
 251: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 252: LD_STRING setGameSaveCounter(
 254: PUSH
 255: LD_EXP 3
 259: STR
 260: PUSH
 261: LD_STRING )
 263: STR
 264: PPUSH
 265: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 269: LD_STRING setGameDifficulty(
 271: PUSH
 272: LD_OWVAR 67
 276: STR
 277: PUSH
 278: LD_STRING )
 280: STR
 281: PPUSH
 282: CALL_OW 559
// end ;
 286: LD_VAR 0 1
 290: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 291: LD_INT 0
 293: PPUSH
// if p2 = stream_mode then
 294: LD_VAR 0 2
 298: PUSH
 299: LD_INT 100
 301: EQUAL
 302: IFFALSE 1305
// begin if not StreamModeActive then
 304: LD_EXP 4
 308: NOT
 309: IFFALSE 319
// StreamModeActive := true ;
 311: LD_ADDR_EXP 4
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// if p3 = 0 then
 319: LD_VAR 0 3
 323: PUSH
 324: LD_INT 0
 326: EQUAL
 327: IFFALSE 333
// InitStreamMode ;
 329: CALL 1509 0 0
// if p3 = 1 then
 333: LD_VAR 0 3
 337: PUSH
 338: LD_INT 1
 340: EQUAL
 341: IFFALSE 351
// sRocket := true ;
 343: LD_ADDR_EXP 9
 347: PUSH
 348: LD_INT 1
 350: ST_TO_ADDR
// if p3 = 2 then
 351: LD_VAR 0 3
 355: PUSH
 356: LD_INT 2
 358: EQUAL
 359: IFFALSE 369
// sSpeed := true ;
 361: LD_ADDR_EXP 8
 365: PUSH
 366: LD_INT 1
 368: ST_TO_ADDR
// if p3 = 3 then
 369: LD_VAR 0 3
 373: PUSH
 374: LD_INT 3
 376: EQUAL
 377: IFFALSE 387
// sEngine := true ;
 379: LD_ADDR_EXP 10
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// if p3 = 4 then
 387: LD_VAR 0 3
 391: PUSH
 392: LD_INT 4
 394: EQUAL
 395: IFFALSE 405
// sSpec := true ;
 397: LD_ADDR_EXP 7
 401: PUSH
 402: LD_INT 1
 404: ST_TO_ADDR
// if p3 = 5 then
 405: LD_VAR 0 3
 409: PUSH
 410: LD_INT 5
 412: EQUAL
 413: IFFALSE 423
// sLevel := true ;
 415: LD_ADDR_EXP 11
 419: PUSH
 420: LD_INT 1
 422: ST_TO_ADDR
// if p3 = 6 then
 423: LD_VAR 0 3
 427: PUSH
 428: LD_INT 6
 430: EQUAL
 431: IFFALSE 441
// sArmoury := true ;
 433: LD_ADDR_EXP 12
 437: PUSH
 438: LD_INT 1
 440: ST_TO_ADDR
// if p3 = 7 then
 441: LD_VAR 0 3
 445: PUSH
 446: LD_INT 7
 448: EQUAL
 449: IFFALSE 459
// sRadar := true ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_INT 1
 458: ST_TO_ADDR
// if p3 = 8 then
 459: LD_VAR 0 3
 463: PUSH
 464: LD_INT 8
 466: EQUAL
 467: IFFALSE 477
// sBunker := true ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: LD_INT 1
 476: ST_TO_ADDR
// if p3 = 9 then
 477: LD_VAR 0 3
 481: PUSH
 482: LD_INT 9
 484: EQUAL
 485: IFFALSE 495
// sHack := true ;
 487: LD_ADDR_EXP 15
 491: PUSH
 492: LD_INT 1
 494: ST_TO_ADDR
// if p3 = 10 then
 495: LD_VAR 0 3
 499: PUSH
 500: LD_INT 10
 502: EQUAL
 503: IFFALSE 513
// sFire := true ;
 505: LD_ADDR_EXP 16
 509: PUSH
 510: LD_INT 1
 512: ST_TO_ADDR
// if p3 = 11 then
 513: LD_VAR 0 3
 517: PUSH
 518: LD_INT 11
 520: EQUAL
 521: IFFALSE 531
// sRefresh := true ;
 523: LD_ADDR_EXP 17
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// if p3 = 12 then
 531: LD_VAR 0 3
 535: PUSH
 536: LD_INT 12
 538: EQUAL
 539: IFFALSE 549
// sExp := true ;
 541: LD_ADDR_EXP 18
 545: PUSH
 546: LD_INT 1
 548: ST_TO_ADDR
// if p3 = 13 then
 549: LD_VAR 0 3
 553: PUSH
 554: LD_INT 13
 556: EQUAL
 557: IFFALSE 567
// sDepot := true ;
 559: LD_ADDR_EXP 19
 563: PUSH
 564: LD_INT 1
 566: ST_TO_ADDR
// if p3 = 14 then
 567: LD_VAR 0 3
 571: PUSH
 572: LD_INT 14
 574: EQUAL
 575: IFFALSE 585
// sFlag := true ;
 577: LD_ADDR_EXP 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// if p3 = 15 then
 585: LD_VAR 0 3
 589: PUSH
 590: LD_INT 15
 592: EQUAL
 593: IFFALSE 603
// sKamikadze := true ;
 595: LD_ADDR_EXP 28
 599: PUSH
 600: LD_INT 1
 602: ST_TO_ADDR
// if p3 = 16 then
 603: LD_VAR 0 3
 607: PUSH
 608: LD_INT 16
 610: EQUAL
 611: IFFALSE 621
// sTroll := true ;
 613: LD_ADDR_EXP 29
 617: PUSH
 618: LD_INT 1
 620: ST_TO_ADDR
// if p3 = 17 then
 621: LD_VAR 0 3
 625: PUSH
 626: LD_INT 17
 628: EQUAL
 629: IFFALSE 639
// sSlow := true ;
 631: LD_ADDR_EXP 30
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// if p3 = 18 then
 639: LD_VAR 0 3
 643: PUSH
 644: LD_INT 18
 646: EQUAL
 647: IFFALSE 657
// sLack := true ;
 649: LD_ADDR_EXP 31
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// if p3 = 19 then
 657: LD_VAR 0 3
 661: PUSH
 662: LD_INT 19
 664: EQUAL
 665: IFFALSE 675
// sTank := true ;
 667: LD_ADDR_EXP 33
 671: PUSH
 672: LD_INT 1
 674: ST_TO_ADDR
// if p3 = 20 then
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 20
 682: EQUAL
 683: IFFALSE 693
// sRemote := true ;
 685: LD_ADDR_EXP 34
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// if p3 = 21 then
 693: LD_VAR 0 3
 697: PUSH
 698: LD_INT 21
 700: EQUAL
 701: IFFALSE 711
// sPowell := true ;
 703: LD_ADDR_EXP 35
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// if p3 = 22 then
 711: LD_VAR 0 3
 715: PUSH
 716: LD_INT 22
 718: EQUAL
 719: IFFALSE 729
// sTeleport := true ;
 721: LD_ADDR_EXP 38
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// if p3 = 23 then
 729: LD_VAR 0 3
 733: PUSH
 734: LD_INT 23
 736: EQUAL
 737: IFFALSE 747
// sOilTower := true ;
 739: LD_ADDR_EXP 40
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// if p3 = 24 then
 747: LD_VAR 0 3
 751: PUSH
 752: LD_INT 24
 754: EQUAL
 755: IFFALSE 765
// sShovel := true ;
 757: LD_ADDR_EXP 41
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// if p3 = 25 then
 765: LD_VAR 0 3
 769: PUSH
 770: LD_INT 25
 772: EQUAL
 773: IFFALSE 783
// sSheik := true ;
 775: LD_ADDR_EXP 42
 779: PUSH
 780: LD_INT 1
 782: ST_TO_ADDR
// if p3 = 26 then
 783: LD_VAR 0 3
 787: PUSH
 788: LD_INT 26
 790: EQUAL
 791: IFFALSE 801
// sEarthquake := true ;
 793: LD_ADDR_EXP 44
 797: PUSH
 798: LD_INT 1
 800: ST_TO_ADDR
// if p3 = 27 then
 801: LD_VAR 0 3
 805: PUSH
 806: LD_INT 27
 808: EQUAL
 809: IFFALSE 819
// sAI := true ;
 811: LD_ADDR_EXP 45
 815: PUSH
 816: LD_INT 1
 818: ST_TO_ADDR
// if p3 = 28 then
 819: LD_VAR 0 3
 823: PUSH
 824: LD_INT 28
 826: EQUAL
 827: IFFALSE 837
// sCargo := true ;
 829: LD_ADDR_EXP 48
 833: PUSH
 834: LD_INT 1
 836: ST_TO_ADDR
// if p3 = 29 then
 837: LD_VAR 0 3
 841: PUSH
 842: LD_INT 29
 844: EQUAL
 845: IFFALSE 855
// sDLaser := true ;
 847: LD_ADDR_EXP 49
 851: PUSH
 852: LD_INT 1
 854: ST_TO_ADDR
// if p3 = 30 then
 855: LD_VAR 0 3
 859: PUSH
 860: LD_INT 30
 862: EQUAL
 863: IFFALSE 873
// sExchange := true ;
 865: LD_ADDR_EXP 50
 869: PUSH
 870: LD_INT 1
 872: ST_TO_ADDR
// if p3 = 31 then
 873: LD_VAR 0 3
 877: PUSH
 878: LD_INT 31
 880: EQUAL
 881: IFFALSE 891
// sFac := true ;
 883: LD_ADDR_EXP 51
 887: PUSH
 888: LD_INT 1
 890: ST_TO_ADDR
// if p3 = 32 then
 891: LD_VAR 0 3
 895: PUSH
 896: LD_INT 32
 898: EQUAL
 899: IFFALSE 909
// sPower := true ;
 901: LD_ADDR_EXP 52
 905: PUSH
 906: LD_INT 1
 908: ST_TO_ADDR
// if p3 = 33 then
 909: LD_VAR 0 3
 913: PUSH
 914: LD_INT 33
 916: EQUAL
 917: IFFALSE 927
// sRandom := true ;
 919: LD_ADDR_EXP 53
 923: PUSH
 924: LD_INT 1
 926: ST_TO_ADDR
// if p3 = 34 then
 927: LD_VAR 0 3
 931: PUSH
 932: LD_INT 34
 934: EQUAL
 935: IFFALSE 945
// sShield := true ;
 937: LD_ADDR_EXP 54
 941: PUSH
 942: LD_INT 1
 944: ST_TO_ADDR
// if p3 = 35 then
 945: LD_VAR 0 3
 949: PUSH
 950: LD_INT 35
 952: EQUAL
 953: IFFALSE 963
// sTime := true ;
 955: LD_ADDR_EXP 55
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// if p3 = 36 then
 963: LD_VAR 0 3
 967: PUSH
 968: LD_INT 36
 970: EQUAL
 971: IFFALSE 981
// sTools := true ;
 973: LD_ADDR_EXP 56
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// if p3 = 101 then
 981: LD_VAR 0 3
 985: PUSH
 986: LD_INT 101
 988: EQUAL
 989: IFFALSE 999
// sSold := true ;
 991: LD_ADDR_EXP 21
 995: PUSH
 996: LD_INT 1
 998: ST_TO_ADDR
// if p3 = 102 then
 999: LD_VAR 0 3
1003: PUSH
1004: LD_INT 102
1006: EQUAL
1007: IFFALSE 1017
// sDiff := true ;
1009: LD_ADDR_EXP 22
1013: PUSH
1014: LD_INT 1
1016: ST_TO_ADDR
// if p3 = 103 then
1017: LD_VAR 0 3
1021: PUSH
1022: LD_INT 103
1024: EQUAL
1025: IFFALSE 1035
// sFog := true ;
1027: LD_ADDR_EXP 25
1031: PUSH
1032: LD_INT 1
1034: ST_TO_ADDR
// if p3 = 104 then
1035: LD_VAR 0 3
1039: PUSH
1040: LD_INT 104
1042: EQUAL
1043: IFFALSE 1053
// sReset := true ;
1045: LD_ADDR_EXP 26
1049: PUSH
1050: LD_INT 1
1052: ST_TO_ADDR
// if p3 = 105 then
1053: LD_VAR 0 3
1057: PUSH
1058: LD_INT 105
1060: EQUAL
1061: IFFALSE 1071
// sSun := true ;
1063: LD_ADDR_EXP 27
1067: PUSH
1068: LD_INT 1
1070: ST_TO_ADDR
// if p3 = 106 then
1071: LD_VAR 0 3
1075: PUSH
1076: LD_INT 106
1078: EQUAL
1079: IFFALSE 1089
// sTiger := true ;
1081: LD_ADDR_EXP 23
1085: PUSH
1086: LD_INT 1
1088: ST_TO_ADDR
// if p3 = 107 then
1089: LD_VAR 0 3
1093: PUSH
1094: LD_INT 107
1096: EQUAL
1097: IFFALSE 1107
// sBomb := true ;
1099: LD_ADDR_EXP 24
1103: PUSH
1104: LD_INT 1
1106: ST_TO_ADDR
// if p3 = 108 then
1107: LD_VAR 0 3
1111: PUSH
1112: LD_INT 108
1114: EQUAL
1115: IFFALSE 1125
// sWound := true ;
1117: LD_ADDR_EXP 32
1121: PUSH
1122: LD_INT 1
1124: ST_TO_ADDR
// if p3 = 109 then
1125: LD_VAR 0 3
1129: PUSH
1130: LD_INT 109
1132: EQUAL
1133: IFFALSE 1143
// sBetray := true ;
1135: LD_ADDR_EXP 36
1139: PUSH
1140: LD_INT 1
1142: ST_TO_ADDR
// if p3 = 110 then
1143: LD_VAR 0 3
1147: PUSH
1148: LD_INT 110
1150: EQUAL
1151: IFFALSE 1161
// sContamin := true ;
1153: LD_ADDR_EXP 37
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// if p3 = 111 then
1161: LD_VAR 0 3
1165: PUSH
1166: LD_INT 111
1168: EQUAL
1169: IFFALSE 1179
// sOil := true ;
1171: LD_ADDR_EXP 39
1175: PUSH
1176: LD_INT 1
1178: ST_TO_ADDR
// if p3 = 112 then
1179: LD_VAR 0 3
1183: PUSH
1184: LD_INT 112
1186: EQUAL
1187: IFFALSE 1197
// sStu := true ;
1189: LD_ADDR_EXP 43
1193: PUSH
1194: LD_INT 1
1196: ST_TO_ADDR
// if p3 = 113 then
1197: LD_VAR 0 3
1201: PUSH
1202: LD_INT 113
1204: EQUAL
1205: IFFALSE 1215
// sBazooka := true ;
1207: LD_ADDR_EXP 46
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
// if p3 = 114 then
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 114
1222: EQUAL
1223: IFFALSE 1233
// sMortar := true ;
1225: LD_ADDR_EXP 47
1229: PUSH
1230: LD_INT 1
1232: ST_TO_ADDR
// if p3 = 115 then
1233: LD_VAR 0 3
1237: PUSH
1238: LD_INT 115
1240: EQUAL
1241: IFFALSE 1251
// sRanger := true ;
1243: LD_ADDR_EXP 57
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// if p3 = 116 then
1251: LD_VAR 0 3
1255: PUSH
1256: LD_INT 116
1258: EQUAL
1259: IFFALSE 1269
// sComputer := true ;
1261: LD_ADDR_EXP 58
1265: PUSH
1266: LD_INT 1
1268: ST_TO_ADDR
// if p3 = 117 then
1269: LD_VAR 0 3
1273: PUSH
1274: LD_INT 117
1276: EQUAL
1277: IFFALSE 1287
// s30 := true ;
1279: LD_ADDR_EXP 59
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// if p3 = 118 then
1287: LD_VAR 0 3
1291: PUSH
1292: LD_INT 118
1294: EQUAL
1295: IFFALSE 1305
// s60 := true ;
1297: LD_ADDR_EXP 60
1301: PUSH
1302: LD_INT 1
1304: ST_TO_ADDR
// end ; if p2 = hack_mode then
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 101
1312: EQUAL
1313: IFFALSE 1441
// begin case p3 of 1 :
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: DOUBLE
1323: EQUAL
1324: IFTRUE 1328
1326: GO 1335
1328: POP
// hHackUnlimitedResources ; 2 :
1329: CALL 13580 0 0
1333: GO 1441
1335: LD_INT 2
1337: DOUBLE
1338: EQUAL
1339: IFTRUE 1343
1341: GO 1350
1343: POP
// hHackSetLevel10 ; 3 :
1344: CALL 13713 0 0
1348: GO 1441
1350: LD_INT 3
1352: DOUBLE
1353: EQUAL
1354: IFTRUE 1358
1356: GO 1365
1358: POP
// hHackSetLevel10YourUnits ; 4 :
1359: CALL 13798 0 0
1363: GO 1441
1365: LD_INT 4
1367: DOUBLE
1368: EQUAL
1369: IFTRUE 1373
1371: GO 1380
1373: POP
// hHackInvincible ; 5 :
1374: CALL 14246 0 0
1378: GO 1441
1380: LD_INT 5
1382: DOUBLE
1383: EQUAL
1384: IFTRUE 1388
1386: GO 1395
1388: POP
// hHackInvisible ; 6 :
1389: CALL 14357 0 0
1393: GO 1441
1395: LD_INT 6
1397: DOUBLE
1398: EQUAL
1399: IFTRUE 1403
1401: GO 1410
1403: POP
// hHackChangeYourSide ; 7 :
1404: CALL 14414 0 0
1408: GO 1441
1410: LD_INT 7
1412: DOUBLE
1413: EQUAL
1414: IFTRUE 1418
1416: GO 1425
1418: POP
// hHackChangeUnitSide ; 8 :
1419: CALL 14456 0 0
1423: GO 1441
1425: LD_INT 8
1427: DOUBLE
1428: EQUAL
1429: IFTRUE 1433
1431: GO 1440
1433: POP
// hHackFog ; end ;
1434: CALL 14557 0 0
1438: GO 1441
1440: POP
// end ; if p2 = game_save_mode then
1441: LD_VAR 0 2
1445: PUSH
1446: LD_INT 102
1448: EQUAL
1449: IFFALSE 1504
// begin if p3 = 1 then
1451: LD_VAR 0 3
1455: PUSH
1456: LD_INT 1
1458: EQUAL
1459: IFFALSE 1471
// globalGameSaveCounter := p4 ;
1461: LD_ADDR_EXP 3
1465: PUSH
1466: LD_VAR 0 4
1470: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1471: LD_VAR 0 3
1475: PUSH
1476: LD_INT 2
1478: EQUAL
1479: PUSH
1480: LD_EXP 3
1484: AND
1485: IFFALSE 1504
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1487: LD_STRING setGameSaveCounter(
1489: PUSH
1490: LD_EXP 3
1494: STR
1495: PUSH
1496: LD_STRING )
1498: STR
1499: PPUSH
1500: CALL_OW 559
// end ; end ;
1504: LD_VAR 0 7
1508: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1509: LD_INT 0
1511: PPUSH
// streamModeActive := false ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_INT 0
1519: ST_TO_ADDR
// normalCounter := 36 ;
1520: LD_ADDR_EXP 5
1524: PUSH
1525: LD_INT 36
1527: ST_TO_ADDR
// hardcoreCounter := 18 ;
1528: LD_ADDR_EXP 6
1532: PUSH
1533: LD_INT 18
1535: ST_TO_ADDR
// sRocket := false ;
1536: LD_ADDR_EXP 9
1540: PUSH
1541: LD_INT 0
1543: ST_TO_ADDR
// sSpeed := false ;
1544: LD_ADDR_EXP 8
1548: PUSH
1549: LD_INT 0
1551: ST_TO_ADDR
// sEngine := false ;
1552: LD_ADDR_EXP 10
1556: PUSH
1557: LD_INT 0
1559: ST_TO_ADDR
// sSpec := false ;
1560: LD_ADDR_EXP 7
1564: PUSH
1565: LD_INT 0
1567: ST_TO_ADDR
// sLevel := false ;
1568: LD_ADDR_EXP 11
1572: PUSH
1573: LD_INT 0
1575: ST_TO_ADDR
// sArmoury := false ;
1576: LD_ADDR_EXP 12
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// sRadar := false ;
1584: LD_ADDR_EXP 13
1588: PUSH
1589: LD_INT 0
1591: ST_TO_ADDR
// sBunker := false ;
1592: LD_ADDR_EXP 14
1596: PUSH
1597: LD_INT 0
1599: ST_TO_ADDR
// sHack := false ;
1600: LD_ADDR_EXP 15
1604: PUSH
1605: LD_INT 0
1607: ST_TO_ADDR
// sFire := false ;
1608: LD_ADDR_EXP 16
1612: PUSH
1613: LD_INT 0
1615: ST_TO_ADDR
// sRefresh := false ;
1616: LD_ADDR_EXP 17
1620: PUSH
1621: LD_INT 0
1623: ST_TO_ADDR
// sExp := false ;
1624: LD_ADDR_EXP 18
1628: PUSH
1629: LD_INT 0
1631: ST_TO_ADDR
// sDepot := false ;
1632: LD_ADDR_EXP 19
1636: PUSH
1637: LD_INT 0
1639: ST_TO_ADDR
// sFlag := false ;
1640: LD_ADDR_EXP 20
1644: PUSH
1645: LD_INT 0
1647: ST_TO_ADDR
// sKamikadze := false ;
1648: LD_ADDR_EXP 28
1652: PUSH
1653: LD_INT 0
1655: ST_TO_ADDR
// sTroll := false ;
1656: LD_ADDR_EXP 29
1660: PUSH
1661: LD_INT 0
1663: ST_TO_ADDR
// sSlow := false ;
1664: LD_ADDR_EXP 30
1668: PUSH
1669: LD_INT 0
1671: ST_TO_ADDR
// sLack := false ;
1672: LD_ADDR_EXP 31
1676: PUSH
1677: LD_INT 0
1679: ST_TO_ADDR
// sTank := false ;
1680: LD_ADDR_EXP 33
1684: PUSH
1685: LD_INT 0
1687: ST_TO_ADDR
// sRemote := false ;
1688: LD_ADDR_EXP 34
1692: PUSH
1693: LD_INT 0
1695: ST_TO_ADDR
// sPowell := false ;
1696: LD_ADDR_EXP 35
1700: PUSH
1701: LD_INT 0
1703: ST_TO_ADDR
// sTeleport := false ;
1704: LD_ADDR_EXP 38
1708: PUSH
1709: LD_INT 0
1711: ST_TO_ADDR
// sOilTower := false ;
1712: LD_ADDR_EXP 40
1716: PUSH
1717: LD_INT 0
1719: ST_TO_ADDR
// sShovel := false ;
1720: LD_ADDR_EXP 41
1724: PUSH
1725: LD_INT 0
1727: ST_TO_ADDR
// sSheik := false ;
1728: LD_ADDR_EXP 42
1732: PUSH
1733: LD_INT 0
1735: ST_TO_ADDR
// sEarthquake := false ;
1736: LD_ADDR_EXP 44
1740: PUSH
1741: LD_INT 0
1743: ST_TO_ADDR
// sAI := false ;
1744: LD_ADDR_EXP 45
1748: PUSH
1749: LD_INT 0
1751: ST_TO_ADDR
// sCargo := false ;
1752: LD_ADDR_EXP 48
1756: PUSH
1757: LD_INT 0
1759: ST_TO_ADDR
// sDLaser := false ;
1760: LD_ADDR_EXP 49
1764: PUSH
1765: LD_INT 0
1767: ST_TO_ADDR
// sExchange := false ;
1768: LD_ADDR_EXP 50
1772: PUSH
1773: LD_INT 0
1775: ST_TO_ADDR
// sFac := false ;
1776: LD_ADDR_EXP 51
1780: PUSH
1781: LD_INT 0
1783: ST_TO_ADDR
// sPower := false ;
1784: LD_ADDR_EXP 52
1788: PUSH
1789: LD_INT 0
1791: ST_TO_ADDR
// sRandom := false ;
1792: LD_ADDR_EXP 53
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// sShield := false ;
1800: LD_ADDR_EXP 54
1804: PUSH
1805: LD_INT 0
1807: ST_TO_ADDR
// sTime := false ;
1808: LD_ADDR_EXP 55
1812: PUSH
1813: LD_INT 0
1815: ST_TO_ADDR
// sTools := false ;
1816: LD_ADDR_EXP 56
1820: PUSH
1821: LD_INT 0
1823: ST_TO_ADDR
// sSold := false ;
1824: LD_ADDR_EXP 21
1828: PUSH
1829: LD_INT 0
1831: ST_TO_ADDR
// sDiff := false ;
1832: LD_ADDR_EXP 22
1836: PUSH
1837: LD_INT 0
1839: ST_TO_ADDR
// sFog := false ;
1840: LD_ADDR_EXP 25
1844: PUSH
1845: LD_INT 0
1847: ST_TO_ADDR
// sReset := false ;
1848: LD_ADDR_EXP 26
1852: PUSH
1853: LD_INT 0
1855: ST_TO_ADDR
// sSun := false ;
1856: LD_ADDR_EXP 27
1860: PUSH
1861: LD_INT 0
1863: ST_TO_ADDR
// sTiger := false ;
1864: LD_ADDR_EXP 23
1868: PUSH
1869: LD_INT 0
1871: ST_TO_ADDR
// sBomb := false ;
1872: LD_ADDR_EXP 24
1876: PUSH
1877: LD_INT 0
1879: ST_TO_ADDR
// sWound := false ;
1880: LD_ADDR_EXP 32
1884: PUSH
1885: LD_INT 0
1887: ST_TO_ADDR
// sBetray := false ;
1888: LD_ADDR_EXP 36
1892: PUSH
1893: LD_INT 0
1895: ST_TO_ADDR
// sContamin := false ;
1896: LD_ADDR_EXP 37
1900: PUSH
1901: LD_INT 0
1903: ST_TO_ADDR
// sOil := false ;
1904: LD_ADDR_EXP 39
1908: PUSH
1909: LD_INT 0
1911: ST_TO_ADDR
// sStu := false ;
1912: LD_ADDR_EXP 43
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// sBazooka := false ;
1920: LD_ADDR_EXP 46
1924: PUSH
1925: LD_INT 0
1927: ST_TO_ADDR
// sMortar := false ;
1928: LD_ADDR_EXP 47
1932: PUSH
1933: LD_INT 0
1935: ST_TO_ADDR
// sRanger := false ;
1936: LD_ADDR_EXP 57
1940: PUSH
1941: LD_INT 0
1943: ST_TO_ADDR
// sComputer := false ;
1944: LD_ADDR_EXP 58
1948: PUSH
1949: LD_INT 0
1951: ST_TO_ADDR
// s30 := false ;
1952: LD_ADDR_EXP 59
1956: PUSH
1957: LD_INT 0
1959: ST_TO_ADDR
// s60 := false ;
1960: LD_ADDR_EXP 60
1964: PUSH
1965: LD_INT 0
1967: ST_TO_ADDR
// end ;
1968: LD_VAR 0 1
1972: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
1981: PPUSH
// result := [ ] ;
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: EMPTY
1988: ST_TO_ADDR
// if campaign_id = 1 then
1989: LD_OWVAR 69
1993: PUSH
1994: LD_INT 1
1996: EQUAL
1997: IFFALSE 5163
// begin case mission_number of 1 :
1999: LD_OWVAR 70
2003: PUSH
2004: LD_INT 1
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2088
2012: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2013: LD_ADDR_VAR 0 2
2017: PUSH
2018: LD_INT 2
2020: PUSH
2021: LD_INT 4
2023: PUSH
2024: LD_INT 11
2026: PUSH
2027: LD_INT 12
2029: PUSH
2030: LD_INT 15
2032: PUSH
2033: LD_INT 16
2035: PUSH
2036: LD_INT 22
2038: PUSH
2039: LD_INT 23
2041: PUSH
2042: LD_INT 26
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 101
2058: PUSH
2059: LD_INT 102
2061: PUSH
2062: LD_INT 106
2064: PUSH
2065: LD_INT 116
2067: PUSH
2068: LD_INT 117
2070: PUSH
2071: LD_INT 118
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: ST_TO_ADDR
2086: GO 5161
2088: LD_INT 2
2090: DOUBLE
2091: EQUAL
2092: IFTRUE 2096
2094: GO 2180
2096: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2097: LD_ADDR_VAR 0 2
2101: PUSH
2102: LD_INT 2
2104: PUSH
2105: LD_INT 4
2107: PUSH
2108: LD_INT 11
2110: PUSH
2111: LD_INT 12
2113: PUSH
2114: LD_INT 15
2116: PUSH
2117: LD_INT 16
2119: PUSH
2120: LD_INT 22
2122: PUSH
2123: LD_INT 23
2125: PUSH
2126: LD_INT 26
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 101
2142: PUSH
2143: LD_INT 102
2145: PUSH
2146: LD_INT 105
2148: PUSH
2149: LD_INT 106
2151: PUSH
2152: LD_INT 108
2154: PUSH
2155: LD_INT 116
2157: PUSH
2158: LD_INT 117
2160: PUSH
2161: LD_INT 118
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: ST_TO_ADDR
2178: GO 5161
2180: LD_INT 3
2182: DOUBLE
2183: EQUAL
2184: IFTRUE 2188
2186: GO 2276
2188: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: LD_INT 2
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 5
2202: PUSH
2203: LD_INT 11
2205: PUSH
2206: LD_INT 12
2208: PUSH
2209: LD_INT 15
2211: PUSH
2212: LD_INT 16
2214: PUSH
2215: LD_INT 22
2217: PUSH
2218: LD_INT 26
2220: PUSH
2221: LD_INT 36
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 101
2238: PUSH
2239: LD_INT 102
2241: PUSH
2242: LD_INT 105
2244: PUSH
2245: LD_INT 106
2247: PUSH
2248: LD_INT 108
2250: PUSH
2251: LD_INT 116
2253: PUSH
2254: LD_INT 117
2256: PUSH
2257: LD_INT 118
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: ST_TO_ADDR
2274: GO 5161
2276: LD_INT 4
2278: DOUBLE
2279: EQUAL
2280: IFTRUE 2284
2282: GO 2380
2284: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_INT 2
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 5
2298: PUSH
2299: LD_INT 8
2301: PUSH
2302: LD_INT 11
2304: PUSH
2305: LD_INT 12
2307: PUSH
2308: LD_INT 15
2310: PUSH
2311: LD_INT 16
2313: PUSH
2314: LD_INT 22
2316: PUSH
2317: LD_INT 23
2319: PUSH
2320: LD_INT 26
2322: PUSH
2323: LD_INT 36
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 101
2342: PUSH
2343: LD_INT 102
2345: PUSH
2346: LD_INT 105
2348: PUSH
2349: LD_INT 106
2351: PUSH
2352: LD_INT 108
2354: PUSH
2355: LD_INT 116
2357: PUSH
2358: LD_INT 117
2360: PUSH
2361: LD_INT 118
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: ST_TO_ADDR
2378: GO 5161
2380: LD_INT 5
2382: DOUBLE
2383: EQUAL
2384: IFTRUE 2388
2386: GO 2500
2388: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 2
2396: PUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 5
2402: PUSH
2403: LD_INT 6
2405: PUSH
2406: LD_INT 8
2408: PUSH
2409: LD_INT 11
2411: PUSH
2412: LD_INT 12
2414: PUSH
2415: LD_INT 15
2417: PUSH
2418: LD_INT 16
2420: PUSH
2421: LD_INT 22
2423: PUSH
2424: LD_INT 23
2426: PUSH
2427: LD_INT 25
2429: PUSH
2430: LD_INT 26
2432: PUSH
2433: LD_INT 36
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 101
2454: PUSH
2455: LD_INT 102
2457: PUSH
2458: LD_INT 105
2460: PUSH
2461: LD_INT 106
2463: PUSH
2464: LD_INT 108
2466: PUSH
2467: LD_INT 109
2469: PUSH
2470: LD_INT 112
2472: PUSH
2473: LD_INT 116
2475: PUSH
2476: LD_INT 117
2478: PUSH
2479: LD_INT 118
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: ST_TO_ADDR
2498: GO 5161
2500: LD_INT 6
2502: DOUBLE
2503: EQUAL
2504: IFTRUE 2508
2506: GO 2640
2508: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2509: LD_ADDR_VAR 0 2
2513: PUSH
2514: LD_INT 2
2516: PUSH
2517: LD_INT 4
2519: PUSH
2520: LD_INT 5
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 8
2528: PUSH
2529: LD_INT 11
2531: PUSH
2532: LD_INT 12
2534: PUSH
2535: LD_INT 15
2537: PUSH
2538: LD_INT 16
2540: PUSH
2541: LD_INT 20
2543: PUSH
2544: LD_INT 21
2546: PUSH
2547: LD_INT 22
2549: PUSH
2550: LD_INT 23
2552: PUSH
2553: LD_INT 25
2555: PUSH
2556: LD_INT 26
2558: PUSH
2559: LD_INT 30
2561: PUSH
2562: LD_INT 31
2564: PUSH
2565: LD_INT 32
2567: PUSH
2568: LD_INT 36
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 101
2594: PUSH
2595: LD_INT 102
2597: PUSH
2598: LD_INT 105
2600: PUSH
2601: LD_INT 106
2603: PUSH
2604: LD_INT 108
2606: PUSH
2607: LD_INT 109
2609: PUSH
2610: LD_INT 112
2612: PUSH
2613: LD_INT 116
2615: PUSH
2616: LD_INT 117
2618: PUSH
2619: LD_INT 118
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: ST_TO_ADDR
2638: GO 5161
2640: LD_INT 7
2642: DOUBLE
2643: EQUAL
2644: IFTRUE 2648
2646: GO 2760
2648: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: LD_INT 5
2662: PUSH
2663: LD_INT 7
2665: PUSH
2666: LD_INT 11
2668: PUSH
2669: LD_INT 12
2671: PUSH
2672: LD_INT 15
2674: PUSH
2675: LD_INT 16
2677: PUSH
2678: LD_INT 20
2680: PUSH
2681: LD_INT 21
2683: PUSH
2684: LD_INT 22
2686: PUSH
2687: LD_INT 23
2689: PUSH
2690: LD_INT 25
2692: PUSH
2693: LD_INT 26
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 101
2714: PUSH
2715: LD_INT 102
2717: PUSH
2718: LD_INT 103
2720: PUSH
2721: LD_INT 105
2723: PUSH
2724: LD_INT 106
2726: PUSH
2727: LD_INT 108
2729: PUSH
2730: LD_INT 112
2732: PUSH
2733: LD_INT 116
2735: PUSH
2736: LD_INT 117
2738: PUSH
2739: LD_INT 118
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: ST_TO_ADDR
2758: GO 5161
2760: LD_INT 8
2762: DOUBLE
2763: EQUAL
2764: IFTRUE 2768
2766: GO 2908
2768: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2769: LD_ADDR_VAR 0 2
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 4
2779: PUSH
2780: LD_INT 5
2782: PUSH
2783: LD_INT 6
2785: PUSH
2786: LD_INT 7
2788: PUSH
2789: LD_INT 8
2791: PUSH
2792: LD_INT 11
2794: PUSH
2795: LD_INT 12
2797: PUSH
2798: LD_INT 15
2800: PUSH
2801: LD_INT 16
2803: PUSH
2804: LD_INT 20
2806: PUSH
2807: LD_INT 21
2809: PUSH
2810: LD_INT 22
2812: PUSH
2813: LD_INT 23
2815: PUSH
2816: LD_INT 25
2818: PUSH
2819: LD_INT 26
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 31
2827: PUSH
2828: LD_INT 32
2830: PUSH
2831: LD_INT 36
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: PUSH
2856: LD_INT 101
2858: PUSH
2859: LD_INT 102
2861: PUSH
2862: LD_INT 103
2864: PUSH
2865: LD_INT 105
2867: PUSH
2868: LD_INT 106
2870: PUSH
2871: LD_INT 108
2873: PUSH
2874: LD_INT 109
2876: PUSH
2877: LD_INT 112
2879: PUSH
2880: LD_INT 116
2882: PUSH
2883: LD_INT 117
2885: PUSH
2886: LD_INT 118
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: ST_TO_ADDR
2906: GO 5161
2908: LD_INT 9
2910: DOUBLE
2911: EQUAL
2912: IFTRUE 2916
2914: GO 3064
2916: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2917: LD_ADDR_VAR 0 2
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: LD_INT 4
2927: PUSH
2928: LD_INT 5
2930: PUSH
2931: LD_INT 6
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 8
2939: PUSH
2940: LD_INT 11
2942: PUSH
2943: LD_INT 12
2945: PUSH
2946: LD_INT 15
2948: PUSH
2949: LD_INT 16
2951: PUSH
2952: LD_INT 20
2954: PUSH
2955: LD_INT 21
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 23
2963: PUSH
2964: LD_INT 25
2966: PUSH
2967: LD_INT 26
2969: PUSH
2970: LD_INT 28
2972: PUSH
2973: LD_INT 30
2975: PUSH
2976: LD_INT 31
2978: PUSH
2979: LD_INT 32
2981: PUSH
2982: LD_INT 36
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 101
3010: PUSH
3011: LD_INT 102
3013: PUSH
3014: LD_INT 103
3016: PUSH
3017: LD_INT 105
3019: PUSH
3020: LD_INT 106
3022: PUSH
3023: LD_INT 108
3025: PUSH
3026: LD_INT 109
3028: PUSH
3029: LD_INT 112
3031: PUSH
3032: LD_INT 114
3034: PUSH
3035: LD_INT 116
3037: PUSH
3038: LD_INT 117
3040: PUSH
3041: LD_INT 118
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: ST_TO_ADDR
3062: GO 5161
3064: LD_INT 10
3066: DOUBLE
3067: EQUAL
3068: IFTRUE 3072
3070: GO 3268
3072: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: LD_INT 2
3080: PUSH
3081: LD_INT 4
3083: PUSH
3084: LD_INT 5
3086: PUSH
3087: LD_INT 6
3089: PUSH
3090: LD_INT 7
3092: PUSH
3093: LD_INT 8
3095: PUSH
3096: LD_INT 9
3098: PUSH
3099: LD_INT 10
3101: PUSH
3102: LD_INT 11
3104: PUSH
3105: LD_INT 12
3107: PUSH
3108: LD_INT 13
3110: PUSH
3111: LD_INT 14
3113: PUSH
3114: LD_INT 15
3116: PUSH
3117: LD_INT 16
3119: PUSH
3120: LD_INT 17
3122: PUSH
3123: LD_INT 18
3125: PUSH
3126: LD_INT 19
3128: PUSH
3129: LD_INT 20
3131: PUSH
3132: LD_INT 21
3134: PUSH
3135: LD_INT 22
3137: PUSH
3138: LD_INT 23
3140: PUSH
3141: LD_INT 24
3143: PUSH
3144: LD_INT 25
3146: PUSH
3147: LD_INT 26
3149: PUSH
3150: LD_INT 28
3152: PUSH
3153: LD_INT 30
3155: PUSH
3156: LD_INT 31
3158: PUSH
3159: LD_INT 32
3161: PUSH
3162: LD_INT 36
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 101
3198: PUSH
3199: LD_INT 102
3201: PUSH
3202: LD_INT 103
3204: PUSH
3205: LD_INT 104
3207: PUSH
3208: LD_INT 105
3210: PUSH
3211: LD_INT 106
3213: PUSH
3214: LD_INT 107
3216: PUSH
3217: LD_INT 108
3219: PUSH
3220: LD_INT 109
3222: PUSH
3223: LD_INT 110
3225: PUSH
3226: LD_INT 111
3228: PUSH
3229: LD_INT 112
3231: PUSH
3232: LD_INT 114
3234: PUSH
3235: LD_INT 116
3237: PUSH
3238: LD_INT 117
3240: PUSH
3241: LD_INT 118
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: ST_TO_ADDR
3266: GO 5161
3268: LD_INT 11
3270: DOUBLE
3271: EQUAL
3272: IFTRUE 3276
3274: GO 3480
3276: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 4
3290: PUSH
3291: LD_INT 5
3293: PUSH
3294: LD_INT 6
3296: PUSH
3297: LD_INT 7
3299: PUSH
3300: LD_INT 8
3302: PUSH
3303: LD_INT 9
3305: PUSH
3306: LD_INT 10
3308: PUSH
3309: LD_INT 11
3311: PUSH
3312: LD_INT 12
3314: PUSH
3315: LD_INT 13
3317: PUSH
3318: LD_INT 14
3320: PUSH
3321: LD_INT 15
3323: PUSH
3324: LD_INT 16
3326: PUSH
3327: LD_INT 17
3329: PUSH
3330: LD_INT 18
3332: PUSH
3333: LD_INT 19
3335: PUSH
3336: LD_INT 20
3338: PUSH
3339: LD_INT 21
3341: PUSH
3342: LD_INT 22
3344: PUSH
3345: LD_INT 23
3347: PUSH
3348: LD_INT 24
3350: PUSH
3351: LD_INT 25
3353: PUSH
3354: LD_INT 26
3356: PUSH
3357: LD_INT 28
3359: PUSH
3360: LD_INT 30
3362: PUSH
3363: LD_INT 31
3365: PUSH
3366: LD_INT 32
3368: PUSH
3369: LD_INT 34
3371: PUSH
3372: LD_INT 36
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_INT 101
3410: PUSH
3411: LD_INT 102
3413: PUSH
3414: LD_INT 103
3416: PUSH
3417: LD_INT 104
3419: PUSH
3420: LD_INT 105
3422: PUSH
3423: LD_INT 106
3425: PUSH
3426: LD_INT 107
3428: PUSH
3429: LD_INT 108
3431: PUSH
3432: LD_INT 109
3434: PUSH
3435: LD_INT 110
3437: PUSH
3438: LD_INT 111
3440: PUSH
3441: LD_INT 112
3443: PUSH
3444: LD_INT 114
3446: PUSH
3447: LD_INT 116
3449: PUSH
3450: LD_INT 117
3452: PUSH
3453: LD_INT 118
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: ST_TO_ADDR
3478: GO 5161
3480: LD_INT 12
3482: DOUBLE
3483: EQUAL
3484: IFTRUE 3488
3486: GO 3708
3488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3489: LD_ADDR_VAR 0 2
3493: PUSH
3494: LD_INT 1
3496: PUSH
3497: LD_INT 2
3499: PUSH
3500: LD_INT 3
3502: PUSH
3503: LD_INT 4
3505: PUSH
3506: LD_INT 5
3508: PUSH
3509: LD_INT 6
3511: PUSH
3512: LD_INT 7
3514: PUSH
3515: LD_INT 8
3517: PUSH
3518: LD_INT 9
3520: PUSH
3521: LD_INT 10
3523: PUSH
3524: LD_INT 11
3526: PUSH
3527: LD_INT 12
3529: PUSH
3530: LD_INT 13
3532: PUSH
3533: LD_INT 14
3535: PUSH
3536: LD_INT 15
3538: PUSH
3539: LD_INT 16
3541: PUSH
3542: LD_INT 17
3544: PUSH
3545: LD_INT 18
3547: PUSH
3548: LD_INT 19
3550: PUSH
3551: LD_INT 20
3553: PUSH
3554: LD_INT 21
3556: PUSH
3557: LD_INT 22
3559: PUSH
3560: LD_INT 23
3562: PUSH
3563: LD_INT 24
3565: PUSH
3566: LD_INT 25
3568: PUSH
3569: LD_INT 26
3571: PUSH
3572: LD_INT 27
3574: PUSH
3575: LD_INT 28
3577: PUSH
3578: LD_INT 30
3580: PUSH
3581: LD_INT 31
3583: PUSH
3584: LD_INT 32
3586: PUSH
3587: LD_INT 33
3589: PUSH
3590: LD_INT 34
3592: PUSH
3593: LD_INT 36
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: PUSH
3632: LD_INT 101
3634: PUSH
3635: LD_INT 102
3637: PUSH
3638: LD_INT 103
3640: PUSH
3641: LD_INT 104
3643: PUSH
3644: LD_INT 105
3646: PUSH
3647: LD_INT 106
3649: PUSH
3650: LD_INT 107
3652: PUSH
3653: LD_INT 108
3655: PUSH
3656: LD_INT 109
3658: PUSH
3659: LD_INT 110
3661: PUSH
3662: LD_INT 111
3664: PUSH
3665: LD_INT 112
3667: PUSH
3668: LD_INT 113
3670: PUSH
3671: LD_INT 114
3673: PUSH
3674: LD_INT 116
3676: PUSH
3677: LD_INT 117
3679: PUSH
3680: LD_INT 118
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: ST_TO_ADDR
3706: GO 5161
3708: LD_INT 13
3710: DOUBLE
3711: EQUAL
3712: IFTRUE 3716
3714: GO 3924
3716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3717: LD_ADDR_VAR 0 2
3721: PUSH
3722: LD_INT 1
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 4
3733: PUSH
3734: LD_INT 5
3736: PUSH
3737: LD_INT 8
3739: PUSH
3740: LD_INT 9
3742: PUSH
3743: LD_INT 10
3745: PUSH
3746: LD_INT 11
3748: PUSH
3749: LD_INT 12
3751: PUSH
3752: LD_INT 14
3754: PUSH
3755: LD_INT 15
3757: PUSH
3758: LD_INT 16
3760: PUSH
3761: LD_INT 17
3763: PUSH
3764: LD_INT 18
3766: PUSH
3767: LD_INT 19
3769: PUSH
3770: LD_INT 20
3772: PUSH
3773: LD_INT 21
3775: PUSH
3776: LD_INT 22
3778: PUSH
3779: LD_INT 23
3781: PUSH
3782: LD_INT 24
3784: PUSH
3785: LD_INT 25
3787: PUSH
3788: LD_INT 26
3790: PUSH
3791: LD_INT 27
3793: PUSH
3794: LD_INT 28
3796: PUSH
3797: LD_INT 30
3799: PUSH
3800: LD_INT 31
3802: PUSH
3803: LD_INT 32
3805: PUSH
3806: LD_INT 33
3808: PUSH
3809: LD_INT 34
3811: PUSH
3812: LD_INT 36
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 101
3850: PUSH
3851: LD_INT 102
3853: PUSH
3854: LD_INT 103
3856: PUSH
3857: LD_INT 104
3859: PUSH
3860: LD_INT 105
3862: PUSH
3863: LD_INT 106
3865: PUSH
3866: LD_INT 107
3868: PUSH
3869: LD_INT 108
3871: PUSH
3872: LD_INT 109
3874: PUSH
3875: LD_INT 110
3877: PUSH
3878: LD_INT 111
3880: PUSH
3881: LD_INT 112
3883: PUSH
3884: LD_INT 113
3886: PUSH
3887: LD_INT 114
3889: PUSH
3890: LD_INT 116
3892: PUSH
3893: LD_INT 117
3895: PUSH
3896: LD_INT 118
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: ST_TO_ADDR
3922: GO 5161
3924: LD_INT 14
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3932
3930: GO 4156
3932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 2
3943: PUSH
3944: LD_INT 3
3946: PUSH
3947: LD_INT 4
3949: PUSH
3950: LD_INT 5
3952: PUSH
3953: LD_INT 6
3955: PUSH
3956: LD_INT 7
3958: PUSH
3959: LD_INT 8
3961: PUSH
3962: LD_INT 9
3964: PUSH
3965: LD_INT 10
3967: PUSH
3968: LD_INT 11
3970: PUSH
3971: LD_INT 12
3973: PUSH
3974: LD_INT 13
3976: PUSH
3977: LD_INT 14
3979: PUSH
3980: LD_INT 15
3982: PUSH
3983: LD_INT 16
3985: PUSH
3986: LD_INT 17
3988: PUSH
3989: LD_INT 18
3991: PUSH
3992: LD_INT 19
3994: PUSH
3995: LD_INT 20
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 22
4003: PUSH
4004: LD_INT 23
4006: PUSH
4007: LD_INT 24
4009: PUSH
4010: LD_INT 25
4012: PUSH
4013: LD_INT 26
4015: PUSH
4016: LD_INT 27
4018: PUSH
4019: LD_INT 28
4021: PUSH
4022: LD_INT 29
4024: PUSH
4025: LD_INT 30
4027: PUSH
4028: LD_INT 31
4030: PUSH
4031: LD_INT 32
4033: PUSH
4034: LD_INT 33
4036: PUSH
4037: LD_INT 34
4039: PUSH
4040: LD_INT 36
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_INT 101
4082: PUSH
4083: LD_INT 102
4085: PUSH
4086: LD_INT 103
4088: PUSH
4089: LD_INT 104
4091: PUSH
4092: LD_INT 105
4094: PUSH
4095: LD_INT 106
4097: PUSH
4098: LD_INT 107
4100: PUSH
4101: LD_INT 108
4103: PUSH
4104: LD_INT 109
4106: PUSH
4107: LD_INT 110
4109: PUSH
4110: LD_INT 111
4112: PUSH
4113: LD_INT 112
4115: PUSH
4116: LD_INT 113
4118: PUSH
4119: LD_INT 114
4121: PUSH
4122: LD_INT 116
4124: PUSH
4125: LD_INT 117
4127: PUSH
4128: LD_INT 118
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 5161
4156: LD_INT 15
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4388
4164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: LD_INT 1
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 3
4178: PUSH
4179: LD_INT 4
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: LD_INT 6
4187: PUSH
4188: LD_INT 7
4190: PUSH
4191: LD_INT 8
4193: PUSH
4194: LD_INT 9
4196: PUSH
4197: LD_INT 10
4199: PUSH
4200: LD_INT 11
4202: PUSH
4203: LD_INT 12
4205: PUSH
4206: LD_INT 13
4208: PUSH
4209: LD_INT 14
4211: PUSH
4212: LD_INT 15
4214: PUSH
4215: LD_INT 16
4217: PUSH
4218: LD_INT 17
4220: PUSH
4221: LD_INT 18
4223: PUSH
4224: LD_INT 19
4226: PUSH
4227: LD_INT 20
4229: PUSH
4230: LD_INT 21
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 23
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: LD_INT 25
4244: PUSH
4245: LD_INT 26
4247: PUSH
4248: LD_INT 27
4250: PUSH
4251: LD_INT 28
4253: PUSH
4254: LD_INT 29
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: LD_INT 32
4265: PUSH
4266: LD_INT 33
4268: PUSH
4269: LD_INT 34
4271: PUSH
4272: LD_INT 36
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 102
4317: PUSH
4318: LD_INT 103
4320: PUSH
4321: LD_INT 104
4323: PUSH
4324: LD_INT 105
4326: PUSH
4327: LD_INT 106
4329: PUSH
4330: LD_INT 107
4332: PUSH
4333: LD_INT 108
4335: PUSH
4336: LD_INT 109
4338: PUSH
4339: LD_INT 110
4341: PUSH
4342: LD_INT 111
4344: PUSH
4345: LD_INT 112
4347: PUSH
4348: LD_INT 113
4350: PUSH
4351: LD_INT 114
4353: PUSH
4354: LD_INT 116
4356: PUSH
4357: LD_INT 117
4359: PUSH
4360: LD_INT 118
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: ST_TO_ADDR
4386: GO 5161
4388: LD_INT 16
4390: DOUBLE
4391: EQUAL
4392: IFTRUE 4396
4394: GO 4532
4396: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4397: LD_ADDR_VAR 0 2
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 7
4413: PUSH
4414: LD_INT 11
4416: PUSH
4417: LD_INT 12
4419: PUSH
4420: LD_INT 15
4422: PUSH
4423: LD_INT 16
4425: PUSH
4426: LD_INT 20
4428: PUSH
4429: LD_INT 21
4431: PUSH
4432: LD_INT 22
4434: PUSH
4435: LD_INT 23
4437: PUSH
4438: LD_INT 25
4440: PUSH
4441: LD_INT 26
4443: PUSH
4444: LD_INT 30
4446: PUSH
4447: LD_INT 31
4449: PUSH
4450: LD_INT 32
4452: PUSH
4453: LD_INT 33
4455: PUSH
4456: LD_INT 34
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 101
4482: PUSH
4483: LD_INT 102
4485: PUSH
4486: LD_INT 103
4488: PUSH
4489: LD_INT 106
4491: PUSH
4492: LD_INT 108
4494: PUSH
4495: LD_INT 112
4497: PUSH
4498: LD_INT 113
4500: PUSH
4501: LD_INT 114
4503: PUSH
4504: LD_INT 116
4506: PUSH
4507: LD_INT 117
4509: PUSH
4510: LD_INT 118
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
4530: GO 5161
4532: LD_INT 17
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4764
4540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: LD_INT 4
4557: PUSH
4558: LD_INT 5
4560: PUSH
4561: LD_INT 6
4563: PUSH
4564: LD_INT 7
4566: PUSH
4567: LD_INT 8
4569: PUSH
4570: LD_INT 9
4572: PUSH
4573: LD_INT 10
4575: PUSH
4576: LD_INT 11
4578: PUSH
4579: LD_INT 12
4581: PUSH
4582: LD_INT 13
4584: PUSH
4585: LD_INT 14
4587: PUSH
4588: LD_INT 15
4590: PUSH
4591: LD_INT 16
4593: PUSH
4594: LD_INT 17
4596: PUSH
4597: LD_INT 18
4599: PUSH
4600: LD_INT 19
4602: PUSH
4603: LD_INT 20
4605: PUSH
4606: LD_INT 21
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 23
4614: PUSH
4615: LD_INT 24
4617: PUSH
4618: LD_INT 25
4620: PUSH
4621: LD_INT 26
4623: PUSH
4624: LD_INT 27
4626: PUSH
4627: LD_INT 28
4629: PUSH
4630: LD_INT 29
4632: PUSH
4633: LD_INT 30
4635: PUSH
4636: LD_INT 31
4638: PUSH
4639: LD_INT 32
4641: PUSH
4642: LD_INT 33
4644: PUSH
4645: LD_INT 34
4647: PUSH
4648: LD_INT 36
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 101
4690: PUSH
4691: LD_INT 102
4693: PUSH
4694: LD_INT 103
4696: PUSH
4697: LD_INT 104
4699: PUSH
4700: LD_INT 105
4702: PUSH
4703: LD_INT 106
4705: PUSH
4706: LD_INT 107
4708: PUSH
4709: LD_INT 108
4711: PUSH
4712: LD_INT 109
4714: PUSH
4715: LD_INT 110
4717: PUSH
4718: LD_INT 111
4720: PUSH
4721: LD_INT 112
4723: PUSH
4724: LD_INT 113
4726: PUSH
4727: LD_INT 114
4729: PUSH
4730: LD_INT 116
4732: PUSH
4733: LD_INT 117
4735: PUSH
4736: LD_INT 118
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: ST_TO_ADDR
4762: GO 5161
4764: LD_INT 18
4766: DOUBLE
4767: EQUAL
4768: IFTRUE 4772
4770: GO 4920
4772: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 4
4783: PUSH
4784: LD_INT 5
4786: PUSH
4787: LD_INT 7
4789: PUSH
4790: LD_INT 11
4792: PUSH
4793: LD_INT 12
4795: PUSH
4796: LD_INT 15
4798: PUSH
4799: LD_INT 16
4801: PUSH
4802: LD_INT 20
4804: PUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 22
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 26
4819: PUSH
4820: LD_INT 30
4822: PUSH
4823: LD_INT 31
4825: PUSH
4826: LD_INT 32
4828: PUSH
4829: LD_INT 33
4831: PUSH
4832: LD_INT 34
4834: PUSH
4835: LD_INT 35
4837: PUSH
4838: LD_INT 36
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 101
4866: PUSH
4867: LD_INT 102
4869: PUSH
4870: LD_INT 103
4872: PUSH
4873: LD_INT 106
4875: PUSH
4876: LD_INT 108
4878: PUSH
4879: LD_INT 112
4881: PUSH
4882: LD_INT 113
4884: PUSH
4885: LD_INT 114
4887: PUSH
4888: LD_INT 115
4890: PUSH
4891: LD_INT 116
4893: PUSH
4894: LD_INT 117
4896: PUSH
4897: LD_INT 118
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: ST_TO_ADDR
4918: GO 5161
4920: LD_INT 19
4922: DOUBLE
4923: EQUAL
4924: IFTRUE 4928
4926: GO 5160
4928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_INT 1
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 3
4942: PUSH
4943: LD_INT 4
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: LD_INT 6
4951: PUSH
4952: LD_INT 7
4954: PUSH
4955: LD_INT 8
4957: PUSH
4958: LD_INT 9
4960: PUSH
4961: LD_INT 10
4963: PUSH
4964: LD_INT 11
4966: PUSH
4967: LD_INT 12
4969: PUSH
4970: LD_INT 13
4972: PUSH
4973: LD_INT 14
4975: PUSH
4976: LD_INT 15
4978: PUSH
4979: LD_INT 16
4981: PUSH
4982: LD_INT 17
4984: PUSH
4985: LD_INT 18
4987: PUSH
4988: LD_INT 19
4990: PUSH
4991: LD_INT 20
4993: PUSH
4994: LD_INT 21
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 23
5002: PUSH
5003: LD_INT 24
5005: PUSH
5006: LD_INT 25
5008: PUSH
5009: LD_INT 26
5011: PUSH
5012: LD_INT 27
5014: PUSH
5015: LD_INT 28
5017: PUSH
5018: LD_INT 29
5020: PUSH
5021: LD_INT 30
5023: PUSH
5024: LD_INT 31
5026: PUSH
5027: LD_INT 32
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 34
5035: PUSH
5036: LD_INT 35
5038: PUSH
5039: LD_INT 36
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 101
5082: PUSH
5083: LD_INT 102
5085: PUSH
5086: LD_INT 103
5088: PUSH
5089: LD_INT 104
5091: PUSH
5092: LD_INT 105
5094: PUSH
5095: LD_INT 106
5097: PUSH
5098: LD_INT 107
5100: PUSH
5101: LD_INT 108
5103: PUSH
5104: LD_INT 109
5106: PUSH
5107: LD_INT 110
5109: PUSH
5110: LD_INT 111
5112: PUSH
5113: LD_INT 112
5115: PUSH
5116: LD_INT 113
5118: PUSH
5119: LD_INT 114
5121: PUSH
5122: LD_INT 115
5124: PUSH
5125: LD_INT 116
5127: PUSH
5128: LD_INT 117
5130: PUSH
5131: LD_INT 118
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: ST_TO_ADDR
5158: GO 5161
5160: POP
// end else
5161: GO 5392
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5163: LD_ADDR_VAR 0 2
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 4
5179: PUSH
5180: LD_INT 5
5182: PUSH
5183: LD_INT 6
5185: PUSH
5186: LD_INT 7
5188: PUSH
5189: LD_INT 8
5191: PUSH
5192: LD_INT 9
5194: PUSH
5195: LD_INT 10
5197: PUSH
5198: LD_INT 11
5200: PUSH
5201: LD_INT 12
5203: PUSH
5204: LD_INT 13
5206: PUSH
5207: LD_INT 14
5209: PUSH
5210: LD_INT 15
5212: PUSH
5213: LD_INT 16
5215: PUSH
5216: LD_INT 17
5218: PUSH
5219: LD_INT 18
5221: PUSH
5222: LD_INT 19
5224: PUSH
5225: LD_INT 20
5227: PUSH
5228: LD_INT 21
5230: PUSH
5231: LD_INT 22
5233: PUSH
5234: LD_INT 23
5236: PUSH
5237: LD_INT 24
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 26
5245: PUSH
5246: LD_INT 27
5248: PUSH
5249: LD_INT 28
5251: PUSH
5252: LD_INT 29
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 31
5260: PUSH
5261: LD_INT 32
5263: PUSH
5264: LD_INT 33
5266: PUSH
5267: LD_INT 34
5269: PUSH
5270: LD_INT 35
5272: PUSH
5273: LD_INT 36
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 101
5316: PUSH
5317: LD_INT 102
5319: PUSH
5320: LD_INT 103
5322: PUSH
5323: LD_INT 104
5325: PUSH
5326: LD_INT 105
5328: PUSH
5329: LD_INT 106
5331: PUSH
5332: LD_INT 107
5334: PUSH
5335: LD_INT 108
5337: PUSH
5338: LD_INT 109
5340: PUSH
5341: LD_INT 110
5343: PUSH
5344: LD_INT 111
5346: PUSH
5347: LD_INT 112
5349: PUSH
5350: LD_INT 113
5352: PUSH
5353: LD_INT 114
5355: PUSH
5356: LD_INT 115
5358: PUSH
5359: LD_INT 116
5361: PUSH
5362: LD_INT 117
5364: PUSH
5365: LD_INT 118
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: ST_TO_ADDR
// if result then
5392: LD_VAR 0 2
5396: IFFALSE 6182
// begin normal :=  ;
5398: LD_ADDR_VAR 0 5
5402: PUSH
5403: LD_STRING 
5405: ST_TO_ADDR
// hardcore :=  ;
5406: LD_ADDR_VAR 0 6
5410: PUSH
5411: LD_STRING 
5413: ST_TO_ADDR
// active :=  ;
5414: LD_ADDR_VAR 0 7
5418: PUSH
5419: LD_STRING 
5421: ST_TO_ADDR
// for i = 1 to normalCounter do
5422: LD_ADDR_VAR 0 8
5426: PUSH
5427: DOUBLE
5428: LD_INT 1
5430: DEC
5431: ST_TO_ADDR
5432: LD_EXP 5
5436: PUSH
5437: FOR_TO
5438: IFFALSE 5539
// begin tmp := 0 ;
5440: LD_ADDR_VAR 0 3
5444: PUSH
5445: LD_STRING 0
5447: ST_TO_ADDR
// if result [ 1 ] then
5448: LD_VAR 0 2
5452: PUSH
5453: LD_INT 1
5455: ARRAY
5456: IFFALSE 5521
// if result [ 1 ] [ 1 ] = i then
5458: LD_VAR 0 2
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 1
5469: ARRAY
5470: PUSH
5471: LD_VAR 0 8
5475: EQUAL
5476: IFFALSE 5521
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_VAR 0 2
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: LD_VAR 0 2
5495: PUSH
5496: LD_INT 1
5498: ARRAY
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// tmp := 1 ;
5513: LD_ADDR_VAR 0 3
5517: PUSH
5518: LD_STRING 1
5520: ST_TO_ADDR
// end ; normal := normal & tmp ;
5521: LD_ADDR_VAR 0 5
5525: PUSH
5526: LD_VAR 0 5
5530: PUSH
5531: LD_VAR 0 3
5535: STR
5536: ST_TO_ADDR
// end ;
5537: GO 5437
5539: POP
5540: POP
// for i = 1 to hardcoreCounter do
5541: LD_ADDR_VAR 0 8
5545: PUSH
5546: DOUBLE
5547: LD_INT 1
5549: DEC
5550: ST_TO_ADDR
5551: LD_EXP 6
5555: PUSH
5556: FOR_TO
5557: IFFALSE 5662
// begin tmp := 0 ;
5559: LD_ADDR_VAR 0 3
5563: PUSH
5564: LD_STRING 0
5566: ST_TO_ADDR
// if result [ 2 ] then
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: IFFALSE 5644
// if result [ 2 ] [ 1 ] = 100 + i then
5577: LD_VAR 0 2
5581: PUSH
5582: LD_INT 2
5584: ARRAY
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PUSH
5590: LD_INT 100
5592: PUSH
5593: LD_VAR 0 8
5597: PLUS
5598: EQUAL
5599: IFFALSE 5644
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: LD_INT 2
5613: PPUSH
5614: LD_VAR 0 2
5618: PUSH
5619: LD_INT 2
5621: ARRAY
5622: PPUSH
5623: LD_INT 1
5625: PPUSH
5626: CALL_OW 3
5630: PPUSH
5631: CALL_OW 1
5635: ST_TO_ADDR
// tmp := 1 ;
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: LD_STRING 1
5643: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5644: LD_ADDR_VAR 0 6
5648: PUSH
5649: LD_VAR 0 6
5653: PUSH
5654: LD_VAR 0 3
5658: STR
5659: ST_TO_ADDR
// end ;
5660: GO 5556
5662: POP
5663: POP
// if isGameLoad then
5664: LD_VAR 0 1
5668: IFFALSE 6143
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5670: LD_ADDR_VAR 0 4
5674: PUSH
5675: LD_EXP 9
5679: PUSH
5680: LD_EXP 8
5684: PUSH
5685: LD_EXP 10
5689: PUSH
5690: LD_EXP 7
5694: PUSH
5695: LD_EXP 11
5699: PUSH
5700: LD_EXP 12
5704: PUSH
5705: LD_EXP 13
5709: PUSH
5710: LD_EXP 14
5714: PUSH
5715: LD_EXP 15
5719: PUSH
5720: LD_EXP 16
5724: PUSH
5725: LD_EXP 17
5729: PUSH
5730: LD_EXP 18
5734: PUSH
5735: LD_EXP 19
5739: PUSH
5740: LD_EXP 20
5744: PUSH
5745: LD_EXP 28
5749: PUSH
5750: LD_EXP 29
5754: PUSH
5755: LD_EXP 30
5759: PUSH
5760: LD_EXP 31
5764: PUSH
5765: LD_EXP 33
5769: PUSH
5770: LD_EXP 34
5774: PUSH
5775: LD_EXP 35
5779: PUSH
5780: LD_EXP 38
5784: PUSH
5785: LD_EXP 40
5789: PUSH
5790: LD_EXP 41
5794: PUSH
5795: LD_EXP 42
5799: PUSH
5800: LD_EXP 44
5804: PUSH
5805: LD_EXP 45
5809: PUSH
5810: LD_EXP 48
5814: PUSH
5815: LD_EXP 49
5819: PUSH
5820: LD_EXP 50
5824: PUSH
5825: LD_EXP 51
5829: PUSH
5830: LD_EXP 52
5834: PUSH
5835: LD_EXP 53
5839: PUSH
5840: LD_EXP 54
5844: PUSH
5845: LD_EXP 55
5849: PUSH
5850: LD_EXP 56
5854: PUSH
5855: LD_EXP 21
5859: PUSH
5860: LD_EXP 22
5864: PUSH
5865: LD_EXP 25
5869: PUSH
5870: LD_EXP 26
5874: PUSH
5875: LD_EXP 27
5879: PUSH
5880: LD_EXP 23
5884: PUSH
5885: LD_EXP 24
5889: PUSH
5890: LD_EXP 32
5894: PUSH
5895: LD_EXP 36
5899: PUSH
5900: LD_EXP 37
5904: PUSH
5905: LD_EXP 39
5909: PUSH
5910: LD_EXP 43
5914: PUSH
5915: LD_EXP 46
5919: PUSH
5920: LD_EXP 47
5924: PUSH
5925: LD_EXP 57
5929: PUSH
5930: LD_EXP 58
5934: PUSH
5935: LD_EXP 59
5939: PUSH
5940: LD_EXP 60
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: ST_TO_ADDR
// tmp :=  ;
6001: LD_ADDR_VAR 0 3
6005: PUSH
6006: LD_STRING 
6008: ST_TO_ADDR
// for i = 1 to normalCounter do
6009: LD_ADDR_VAR 0 8
6013: PUSH
6014: DOUBLE
6015: LD_INT 1
6017: DEC
6018: ST_TO_ADDR
6019: LD_EXP 5
6023: PUSH
6024: FOR_TO
6025: IFFALSE 6061
// begin if flags [ i ] then
6027: LD_VAR 0 4
6031: PUSH
6032: LD_VAR 0 8
6036: ARRAY
6037: IFFALSE 6059
// tmp := tmp & i & ; ;
6039: LD_ADDR_VAR 0 3
6043: PUSH
6044: LD_VAR 0 3
6048: PUSH
6049: LD_VAR 0 8
6053: STR
6054: PUSH
6055: LD_STRING ;
6057: STR
6058: ST_TO_ADDR
// end ;
6059: GO 6024
6061: POP
6062: POP
// for i = 1 to hardcoreCounter do
6063: LD_ADDR_VAR 0 8
6067: PUSH
6068: DOUBLE
6069: LD_INT 1
6071: DEC
6072: ST_TO_ADDR
6073: LD_EXP 6
6077: PUSH
6078: FOR_TO
6079: IFFALSE 6125
// begin if flags [ normalCounter + i ] then
6081: LD_VAR 0 4
6085: PUSH
6086: LD_EXP 5
6090: PUSH
6091: LD_VAR 0 8
6095: PLUS
6096: ARRAY
6097: IFFALSE 6123
// tmp := tmp & ( 100 + i ) & ; ;
6099: LD_ADDR_VAR 0 3
6103: PUSH
6104: LD_VAR 0 3
6108: PUSH
6109: LD_INT 100
6111: PUSH
6112: LD_VAR 0 8
6116: PLUS
6117: STR
6118: PUSH
6119: LD_STRING ;
6121: STR
6122: ST_TO_ADDR
// end ;
6123: GO 6078
6125: POP
6126: POP
// if tmp then
6127: LD_VAR 0 3
6131: IFFALSE 6143
// active := tmp ;
6133: LD_ADDR_VAR 0 7
6137: PUSH
6138: LD_VAR 0 3
6142: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6143: LD_STRING getStreamItemsFromMission("
6145: PUSH
6146: LD_VAR 0 5
6150: STR
6151: PUSH
6152: LD_STRING ","
6154: STR
6155: PUSH
6156: LD_VAR 0 6
6160: STR
6161: PUSH
6162: LD_STRING ","
6164: STR
6165: PUSH
6166: LD_VAR 0 7
6170: STR
6171: PUSH
6172: LD_STRING ")
6174: STR
6175: PPUSH
6176: CALL_OW 559
// end else
6180: GO 6189
// ToLua ( getStreamItemsFromMission("","","") ) ;
6182: LD_STRING getStreamItemsFromMission("","","")
6184: PPUSH
6185: CALL_OW 559
// end ;
6189: LD_VAR 0 2
6193: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6194: LD_EXP 4
6198: PUSH
6199: LD_EXP 9
6203: AND
6204: IFFALSE 6328
6206: GO 6208
6208: DISABLE
6209: LD_INT 0
6211: PPUSH
6212: PPUSH
// begin enable ;
6213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_INT 22
6221: PUSH
6222: LD_OWVAR 2
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 2
6233: PUSH
6234: LD_INT 34
6236: PUSH
6237: LD_INT 7
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 34
6246: PUSH
6247: LD_INT 45
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 34
6256: PUSH
6257: LD_INT 28
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 34
6266: PUSH
6267: LD_INT 47
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// if not tmp then
6290: LD_VAR 0 2
6294: NOT
6295: IFFALSE 6299
// exit ;
6297: GO 6328
// for i in tmp do
6299: LD_ADDR_VAR 0 1
6303: PUSH
6304: LD_VAR 0 2
6308: PUSH
6309: FOR_IN
6310: IFFALSE 6326
// begin SetLives ( i , 0 ) ;
6312: LD_VAR 0 1
6316: PPUSH
6317: LD_INT 0
6319: PPUSH
6320: CALL_OW 234
// end ;
6324: GO 6309
6326: POP
6327: POP
// end ;
6328: PPOPN 2
6330: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6331: LD_EXP 4
6335: PUSH
6336: LD_EXP 10
6340: AND
6341: IFFALSE 6425
6343: GO 6345
6345: DISABLE
6346: LD_INT 0
6348: PPUSH
6349: PPUSH
// begin enable ;
6350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6351: LD_ADDR_VAR 0 2
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_OWVAR 2
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 32
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 69
6386: ST_TO_ADDR
// if not tmp then
6387: LD_VAR 0 2
6391: NOT
6392: IFFALSE 6396
// exit ;
6394: GO 6425
// for i in tmp do
6396: LD_ADDR_VAR 0 1
6400: PUSH
6401: LD_VAR 0 2
6405: PUSH
6406: FOR_IN
6407: IFFALSE 6423
// begin SetLives ( i , 0 ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_INT 0
6416: PPUSH
6417: CALL_OW 234
// end ;
6421: GO 6406
6423: POP
6424: POP
// end ;
6425: PPOPN 2
6427: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6428: LD_EXP 4
6432: PUSH
6433: LD_EXP 7
6437: AND
6438: IFFALSE 6531
6440: GO 6442
6442: DISABLE
6443: LD_INT 0
6445: PPUSH
// begin enable ;
6446: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6447: LD_ADDR_VAR 0 1
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_OWVAR 2
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 5
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 9
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 8
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 69
6511: PUSH
6512: FOR_IN
6513: IFFALSE 6529
// begin SetClass ( i , 1 ) ;
6515: LD_VAR 0 1
6519: PPUSH
6520: LD_INT 1
6522: PPUSH
6523: CALL_OW 336
// end ;
6527: GO 6512
6529: POP
6530: POP
// end ;
6531: PPOPN 1
6533: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6534: LD_EXP 4
6538: PUSH
6539: LD_EXP 8
6543: AND
6544: PUSH
6545: LD_OWVAR 65
6549: PUSH
6550: LD_INT 7
6552: LESS
6553: AND
6554: IFFALSE 6568
6556: GO 6558
6558: DISABLE
// begin enable ;
6559: ENABLE
// game_speed := 7 ;
6560: LD_ADDR_OWVAR 65
6564: PUSH
6565: LD_INT 7
6567: ST_TO_ADDR
// end ;
6568: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6569: LD_EXP 4
6573: PUSH
6574: LD_EXP 11
6578: AND
6579: IFFALSE 6781
6581: GO 6583
6583: DISABLE
6584: LD_INT 0
6586: PPUSH
6587: PPUSH
6588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6589: LD_ADDR_VAR 0 3
6593: PUSH
6594: LD_INT 81
6596: PUSH
6597: LD_OWVAR 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 21
6608: PUSH
6609: LD_INT 1
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: CALL_OW 69
6624: ST_TO_ADDR
// if not tmp then
6625: LD_VAR 0 3
6629: NOT
6630: IFFALSE 6634
// exit ;
6632: GO 6781
// if tmp > 5 then
6634: LD_VAR 0 3
6638: PUSH
6639: LD_INT 5
6641: GREATER
6642: IFFALSE 6654
// k := 5 else
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 5
6651: ST_TO_ADDR
6652: GO 6664
// k := tmp ;
6654: LD_ADDR_VAR 0 2
6658: PUSH
6659: LD_VAR 0 3
6663: ST_TO_ADDR
// for i := 1 to k do
6664: LD_ADDR_VAR 0 1
6668: PUSH
6669: DOUBLE
6670: LD_INT 1
6672: DEC
6673: ST_TO_ADDR
6674: LD_VAR 0 2
6678: PUSH
6679: FOR_TO
6680: IFFALSE 6779
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6682: LD_VAR 0 3
6686: PUSH
6687: LD_VAR 0 1
6691: ARRAY
6692: PPUSH
6693: LD_VAR 0 1
6697: PUSH
6698: LD_INT 4
6700: MOD
6701: PUSH
6702: LD_INT 1
6704: PLUS
6705: PPUSH
6706: CALL_OW 259
6710: PUSH
6711: LD_INT 10
6713: LESS
6714: IFFALSE 6777
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6716: LD_VAR 0 3
6720: PUSH
6721: LD_VAR 0 1
6725: ARRAY
6726: PPUSH
6727: LD_VAR 0 1
6731: PUSH
6732: LD_INT 4
6734: MOD
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: LD_VAR 0 3
6744: PUSH
6745: LD_VAR 0 1
6749: ARRAY
6750: PPUSH
6751: LD_VAR 0 1
6755: PUSH
6756: LD_INT 4
6758: MOD
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: PPUSH
6764: CALL_OW 259
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: PPUSH
6773: CALL_OW 237
6777: GO 6679
6779: POP
6780: POP
// end ;
6781: PPOPN 3
6783: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6784: LD_EXP 4
6788: PUSH
6789: LD_EXP 12
6793: AND
6794: IFFALSE 6814
6796: GO 6798
6798: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6799: LD_INT 4
6801: PPUSH
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 0
6809: PPUSH
6810: CALL_OW 324
6814: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6815: LD_EXP 4
6819: PUSH
6820: LD_EXP 41
6824: AND
6825: IFFALSE 6845
6827: GO 6829
6829: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6830: LD_INT 19
6832: PPUSH
6833: LD_OWVAR 2
6837: PPUSH
6838: LD_INT 0
6840: PPUSH
6841: CALL_OW 324
6845: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6846: LD_EXP 4
6850: PUSH
6851: LD_EXP 13
6855: AND
6856: IFFALSE 6958
6858: GO 6860
6860: DISABLE
6861: LD_INT 0
6863: PPUSH
6864: PPUSH
// begin enable ;
6865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_OWVAR 2
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: LD_INT 34
6888: PUSH
6889: LD_INT 11
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 34
6898: PUSH
6899: LD_INT 30
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PPUSH
6915: CALL_OW 69
6919: ST_TO_ADDR
// if not tmp then
6920: LD_VAR 0 2
6924: NOT
6925: IFFALSE 6929
// exit ;
6927: GO 6958
// for i in tmp do
6929: LD_ADDR_VAR 0 1
6933: PUSH
6934: LD_VAR 0 2
6938: PUSH
6939: FOR_IN
6940: IFFALSE 6956
// begin SetLives ( i , 0 ) ;
6942: LD_VAR 0 1
6946: PPUSH
6947: LD_INT 0
6949: PPUSH
6950: CALL_OW 234
// end ;
6954: GO 6939
6956: POP
6957: POP
// end ;
6958: PPOPN 2
6960: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6961: LD_EXP 4
6965: PUSH
6966: LD_EXP 14
6970: AND
6971: IFFALSE 6991
6973: GO 6975
6975: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6976: LD_INT 32
6978: PPUSH
6979: LD_OWVAR 2
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: CALL_OW 324
6991: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6992: LD_EXP 4
6996: PUSH
6997: LD_EXP 15
7001: AND
7002: IFFALSE 7183
7004: GO 7006
7006: DISABLE
7007: LD_INT 0
7009: PPUSH
7010: PPUSH
7011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7012: LD_ADDR_VAR 0 2
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_OWVAR 2
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 33
7031: PUSH
7032: LD_INT 3
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: ST_TO_ADDR
// if not tmp then
7048: LD_VAR 0 2
7052: NOT
7053: IFFALSE 7057
// exit ;
7055: GO 7183
// side := 0 ;
7057: LD_ADDR_VAR 0 3
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// for i := 1 to 8 do
7065: LD_ADDR_VAR 0 1
7069: PUSH
7070: DOUBLE
7071: LD_INT 1
7073: DEC
7074: ST_TO_ADDR
7075: LD_INT 8
7077: PUSH
7078: FOR_TO
7079: IFFALSE 7127
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7081: LD_OWVAR 2
7085: PUSH
7086: LD_VAR 0 1
7090: NONEQUAL
7091: PUSH
7092: LD_OWVAR 2
7096: PPUSH
7097: LD_VAR 0 1
7101: PPUSH
7102: CALL_OW 81
7106: PUSH
7107: LD_INT 2
7109: EQUAL
7110: AND
7111: IFFALSE 7125
// begin side := i ;
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_VAR 0 1
7122: ST_TO_ADDR
// break ;
7123: GO 7127
// end ;
7125: GO 7078
7127: POP
7128: POP
// if not side then
7129: LD_VAR 0 3
7133: NOT
7134: IFFALSE 7138
// exit ;
7136: GO 7183
// for i := 1 to tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: DOUBLE
7144: LD_INT 1
7146: DEC
7147: ST_TO_ADDR
7148: LD_VAR 0 2
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7181
// if Prob ( 60 ) then
7156: LD_INT 60
7158: PPUSH
7159: CALL_OW 13
7163: IFFALSE 7179
// SetSide ( i , side ) ;
7165: LD_VAR 0 1
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: CALL_OW 235
7179: GO 7153
7181: POP
7182: POP
// end ;
7183: PPOPN 3
7185: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7186: LD_EXP 4
7190: PUSH
7191: LD_EXP 17
7195: AND
7196: IFFALSE 7315
7198: GO 7200
7200: DISABLE
7201: LD_INT 0
7203: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7204: LD_ADDR_VAR 0 1
7208: PUSH
7209: LD_INT 22
7211: PUSH
7212: LD_OWVAR 2
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 21
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 3
7233: PUSH
7234: LD_INT 23
7236: PUSH
7237: LD_INT 0
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: PPUSH
7253: CALL_OW 69
7257: PUSH
7258: FOR_IN
7259: IFFALSE 7313
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 257
7270: PUSH
7271: LD_INT 1
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 3
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: IN
7289: IFFALSE 7311
// SetClass ( un , rand ( 1 , 4 ) ) ;
7291: LD_VAR 0 1
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: LD_INT 4
7301: PPUSH
7302: CALL_OW 12
7306: PPUSH
7307: CALL_OW 336
7311: GO 7258
7313: POP
7314: POP
// end ;
7315: PPOPN 1
7317: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7318: LD_EXP 4
7322: PUSH
7323: LD_EXP 16
7327: AND
7328: IFFALSE 7407
7330: GO 7332
7332: DISABLE
7333: LD_INT 0
7335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7336: LD_ADDR_VAR 0 1
7340: PUSH
7341: LD_INT 22
7343: PUSH
7344: LD_OWVAR 2
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 21
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: ST_TO_ADDR
// if not tmp then
7372: LD_VAR 0 1
7376: NOT
7377: IFFALSE 7381
// exit ;
7379: GO 7407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 1
7388: PPUSH
7389: LD_VAR 0 1
7393: PPUSH
7394: CALL_OW 12
7398: ARRAY
7399: PPUSH
7400: LD_INT 100
7402: PPUSH
7403: CALL_OW 234
// end ;
7407: PPOPN 1
7409: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7410: LD_EXP 4
7414: PUSH
7415: LD_EXP 18
7419: AND
7420: IFFALSE 7518
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7428: LD_ADDR_VAR 0 1
7432: PUSH
7433: LD_INT 22
7435: PUSH
7436: LD_OWVAR 2
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 21
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: ST_TO_ADDR
// if not tmp then
7464: LD_VAR 0 1
7468: NOT
7469: IFFALSE 7473
// exit ;
7471: GO 7518
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7473: LD_VAR 0 1
7477: PUSH
7478: LD_INT 1
7480: PPUSH
7481: LD_VAR 0 1
7485: PPUSH
7486: CALL_OW 12
7490: ARRAY
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: LD_INT 4
7497: PPUSH
7498: CALL_OW 12
7502: PPUSH
7503: LD_INT 3000
7505: PPUSH
7506: LD_INT 9000
7508: PPUSH
7509: CALL_OW 12
7513: PPUSH
7514: CALL_OW 492
// end ;
7518: PPOPN 1
7520: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7521: LD_EXP 4
7525: PUSH
7526: LD_EXP 19
7530: AND
7531: IFFALSE 7551
7533: GO 7535
7535: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7536: LD_INT 1
7538: PPUSH
7539: LD_OWVAR 2
7543: PPUSH
7544: LD_INT 0
7546: PPUSH
7547: CALL_OW 324
7551: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7552: LD_EXP 4
7556: PUSH
7557: LD_EXP 20
7561: AND
7562: IFFALSE 7645
7564: GO 7566
7566: DISABLE
7567: LD_INT 0
7569: PPUSH
7570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7571: LD_ADDR_VAR 0 2
7575: PUSH
7576: LD_INT 22
7578: PUSH
7579: LD_OWVAR 2
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 21
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 69
7606: ST_TO_ADDR
// if not tmp then
7607: LD_VAR 0 2
7611: NOT
7612: IFFALSE 7616
// exit ;
7614: GO 7645
// for i in tmp do
7616: LD_ADDR_VAR 0 1
7620: PUSH
7621: LD_VAR 0 2
7625: PUSH
7626: FOR_IN
7627: IFFALSE 7643
// SetBLevel ( i , 10 ) ;
7629: LD_VAR 0 1
7633: PPUSH
7634: LD_INT 10
7636: PPUSH
7637: CALL_OW 241
7641: GO 7626
7643: POP
7644: POP
// end ;
7645: PPOPN 2
7647: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7648: LD_EXP 4
7652: PUSH
7653: LD_EXP 21
7657: AND
7658: IFFALSE 7769
7660: GO 7662
7662: DISABLE
7663: LD_INT 0
7665: PPUSH
7666: PPUSH
7667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7668: LD_ADDR_VAR 0 3
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_OWVAR 2
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: LD_INT 1
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 69
7703: ST_TO_ADDR
// if not tmp then
7704: LD_VAR 0 3
7708: NOT
7709: IFFALSE 7713
// exit ;
7711: GO 7769
// un := tmp [ rand ( 1 , tmp ) ] ;
7713: LD_ADDR_VAR 0 2
7717: PUSH
7718: LD_VAR 0 3
7722: PUSH
7723: LD_INT 1
7725: PPUSH
7726: LD_VAR 0 3
7730: PPUSH
7731: CALL_OW 12
7735: ARRAY
7736: ST_TO_ADDR
// if Crawls ( un ) then
7737: LD_VAR 0 2
7741: PPUSH
7742: CALL_OW 318
7746: IFFALSE 7757
// ComWalk ( un ) ;
7748: LD_VAR 0 2
7752: PPUSH
7753: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7757: LD_VAR 0 2
7761: PPUSH
7762: LD_INT 5
7764: PPUSH
7765: CALL_OW 336
// end ;
7769: PPOPN 3
7771: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7772: LD_EXP 4
7776: PUSH
7777: LD_EXP 22
7781: AND
7782: PUSH
7783: LD_OWVAR 67
7787: PUSH
7788: LD_INT 4
7790: LESS
7791: AND
7792: IFFALSE 7811
7794: GO 7796
7796: DISABLE
// begin Difficulty := Difficulty + 1 ;
7797: LD_ADDR_OWVAR 67
7801: PUSH
7802: LD_OWVAR 67
7806: PUSH
7807: LD_INT 1
7809: PLUS
7810: ST_TO_ADDR
// end ;
7811: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7812: LD_EXP 4
7816: PUSH
7817: LD_EXP 23
7821: AND
7822: IFFALSE 7925
7824: GO 7826
7826: DISABLE
7827: LD_INT 0
7829: PPUSH
// begin for i := 1 to 5 do
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: DOUBLE
7836: LD_INT 1
7838: DEC
7839: ST_TO_ADDR
7840: LD_INT 5
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7923
// begin uc_nation := nation_nature ;
7846: LD_ADDR_OWVAR 21
7850: PUSH
7851: LD_INT 0
7853: ST_TO_ADDR
// uc_side := 0 ;
7854: LD_ADDR_OWVAR 20
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7862: LD_ADDR_OWVAR 29
7866: PUSH
7867: LD_INT 12
7869: PUSH
7870: LD_INT 12
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: ST_TO_ADDR
// hc_agressivity := 20 ;
7877: LD_ADDR_OWVAR 35
7881: PUSH
7882: LD_INT 20
7884: ST_TO_ADDR
// hc_class := class_tiger ;
7885: LD_ADDR_OWVAR 28
7889: PUSH
7890: LD_INT 14
7892: ST_TO_ADDR
// hc_gallery :=  ;
7893: LD_ADDR_OWVAR 33
7897: PUSH
7898: LD_STRING 
7900: ST_TO_ADDR
// hc_name :=  ;
7901: LD_ADDR_OWVAR 26
7905: PUSH
7906: LD_STRING 
7908: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7909: CALL_OW 44
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 51
// end ;
7921: GO 7843
7923: POP
7924: POP
// end ;
7925: PPOPN 1
7927: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7928: LD_EXP 4
7932: PUSH
7933: LD_EXP 24
7937: AND
7938: IFFALSE 7947
7940: GO 7942
7942: DISABLE
// StreamSibBomb ;
7943: CALL 7948 0 0
7947: END
// export function StreamSibBomb ; var i , x , y ; begin
7948: LD_INT 0
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
// result := false ;
7954: LD_ADDR_VAR 0 1
7958: PUSH
7959: LD_INT 0
7961: ST_TO_ADDR
// for i := 1 to 16 do
7962: LD_ADDR_VAR 0 2
7966: PUSH
7967: DOUBLE
7968: LD_INT 1
7970: DEC
7971: ST_TO_ADDR
7972: LD_INT 16
7974: PUSH
7975: FOR_TO
7976: IFFALSE 8175
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: LD_INT 10
7985: PUSH
7986: LD_INT 20
7988: PUSH
7989: LD_INT 30
7991: PUSH
7992: LD_INT 40
7994: PUSH
7995: LD_INT 50
7997: PUSH
7998: LD_INT 60
8000: PUSH
8001: LD_INT 70
8003: PUSH
8004: LD_INT 80
8006: PUSH
8007: LD_INT 90
8009: PUSH
8010: LD_INT 100
8012: PUSH
8013: LD_INT 110
8015: PUSH
8016: LD_INT 120
8018: PUSH
8019: LD_INT 130
8021: PUSH
8022: LD_INT 140
8024: PUSH
8025: LD_INT 150
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 1
8047: PPUSH
8048: LD_INT 15
8050: PPUSH
8051: CALL_OW 12
8055: ARRAY
8056: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8057: LD_ADDR_VAR 0 4
8061: PUSH
8062: LD_INT 10
8064: PUSH
8065: LD_INT 20
8067: PUSH
8068: LD_INT 30
8070: PUSH
8071: LD_INT 40
8073: PUSH
8074: LD_INT 50
8076: PUSH
8077: LD_INT 60
8079: PUSH
8080: LD_INT 70
8082: PUSH
8083: LD_INT 80
8085: PUSH
8086: LD_INT 90
8088: PUSH
8089: LD_INT 100
8091: PUSH
8092: LD_INT 110
8094: PUSH
8095: LD_INT 120
8097: PUSH
8098: LD_INT 130
8100: PUSH
8101: LD_INT 140
8103: PUSH
8104: LD_INT 150
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 1
8126: PPUSH
8127: LD_INT 15
8129: PPUSH
8130: CALL_OW 12
8134: ARRAY
8135: ST_TO_ADDR
// if ValidHex ( x , y ) then
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 4
8145: PPUSH
8146: CALL_OW 488
8150: IFFALSE 8173
// begin result := [ x , y ] ;
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_VAR 0 3
8161: PUSH
8162: LD_VAR 0 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: ST_TO_ADDR
// break ;
8171: GO 8175
// end ; end ;
8173: GO 7975
8175: POP
8176: POP
// if result then
8177: LD_VAR 0 1
8181: IFFALSE 8241
// begin ToLua ( playSibBomb() ) ;
8183: LD_STRING playSibBomb()
8185: PPUSH
8186: CALL_OW 559
// wait ( 0 0$14 ) ;
8190: LD_INT 490
8192: PPUSH
8193: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8197: LD_VAR 0 1
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: PPUSH
8206: LD_VAR 0 1
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: PPUSH
8215: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8219: LD_VAR 0 1
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: PPUSH
8228: LD_VAR 0 1
8232: PUSH
8233: LD_INT 2
8235: ARRAY
8236: PPUSH
8237: CALL_OW 429
// end ; end ;
8241: LD_VAR 0 1
8245: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8246: LD_EXP 4
8250: PUSH
8251: LD_EXP 26
8255: AND
8256: IFFALSE 8268
8258: GO 8260
8260: DISABLE
// YouLost (  ) ;
8261: LD_STRING 
8263: PPUSH
8264: CALL_OW 104
8268: END
// every 0 0$1 trigger StreamModeActive and sFog do
8269: LD_EXP 4
8273: PUSH
8274: LD_EXP 25
8278: AND
8279: IFFALSE 8293
8281: GO 8283
8283: DISABLE
// FogOff ( your_side ) ;
8284: LD_OWVAR 2
8288: PPUSH
8289: CALL_OW 344
8293: END
// every 0 0$1 trigger StreamModeActive and sSun do
8294: LD_EXP 4
8298: PUSH
8299: LD_EXP 27
8303: AND
8304: IFFALSE 8332
8306: GO 8308
8308: DISABLE
// begin solar_recharge_percent := 0 ;
8309: LD_ADDR_OWVAR 79
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8317: LD_INT 10500
8319: PPUSH
8320: CALL_OW 67
// solar_recharge_percent := 100 ;
8324: LD_ADDR_OWVAR 79
8328: PUSH
8329: LD_INT 100
8331: ST_TO_ADDR
// end ;
8332: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8333: LD_EXP 4
8337: PUSH
8338: LD_EXP 28
8342: AND
8343: IFFALSE 8582
8345: GO 8347
8347: DISABLE
8348: LD_INT 0
8350: PPUSH
8351: PPUSH
8352: PPUSH
// begin tmp := [ ] ;
8353: LD_ADDR_VAR 0 3
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i := 1 to 6 do
8360: LD_ADDR_VAR 0 1
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_INT 6
8372: PUSH
8373: FOR_TO
8374: IFFALSE 8479
// begin uc_nation := nation_nature ;
8376: LD_ADDR_OWVAR 21
8380: PUSH
8381: LD_INT 0
8383: ST_TO_ADDR
// uc_side := 0 ;
8384: LD_ADDR_OWVAR 20
8388: PUSH
8389: LD_INT 0
8391: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8392: LD_ADDR_OWVAR 29
8396: PUSH
8397: LD_INT 12
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: ST_TO_ADDR
// hc_agressivity := 20 ;
8407: LD_ADDR_OWVAR 35
8411: PUSH
8412: LD_INT 20
8414: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8415: LD_ADDR_OWVAR 28
8419: PUSH
8420: LD_INT 17
8422: ST_TO_ADDR
// hc_gallery :=  ;
8423: LD_ADDR_OWVAR 33
8427: PUSH
8428: LD_STRING 
8430: ST_TO_ADDR
// hc_name :=  ;
8431: LD_ADDR_OWVAR 26
8435: PUSH
8436: LD_STRING 
8438: ST_TO_ADDR
// un := CreateHuman ;
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: CALL_OW 44
8448: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8449: LD_VAR 0 2
8453: PPUSH
8454: LD_INT 1
8456: PPUSH
8457: CALL_OW 51
// tmp := tmp ^ un ;
8461: LD_ADDR_VAR 0 3
8465: PUSH
8466: LD_VAR 0 3
8470: PUSH
8471: LD_VAR 0 2
8475: ADD
8476: ST_TO_ADDR
// end ;
8477: GO 8373
8479: POP
8480: POP
// repeat wait ( 0 0$1 ) ;
8481: LD_INT 35
8483: PPUSH
8484: CALL_OW 67
// for un in tmp do
8488: LD_ADDR_VAR 0 2
8492: PUSH
8493: LD_VAR 0 3
8497: PUSH
8498: FOR_IN
8499: IFFALSE 8573
// begin if IsDead ( un ) then
8501: LD_VAR 0 2
8505: PPUSH
8506: CALL_OW 301
8510: IFFALSE 8530
// begin tmp := tmp diff un ;
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: LD_VAR 0 3
8521: PUSH
8522: LD_VAR 0 2
8526: DIFF
8527: ST_TO_ADDR
// continue ;
8528: GO 8498
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8530: LD_VAR 0 2
8534: PPUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 22
8540: PUSH
8541: LD_INT 0
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: PPUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 74
8566: PPUSH
8567: CALL_OW 115
// end ;
8571: GO 8498
8573: POP
8574: POP
// until not tmp ;
8575: LD_VAR 0 3
8579: NOT
8580: IFFALSE 8481
// end ;
8582: PPOPN 3
8584: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8585: LD_EXP 4
8589: PUSH
8590: LD_EXP 29
8594: AND
8595: IFFALSE 8649
8597: GO 8599
8599: DISABLE
// begin ToLua ( displayTroll(); ) ;
8600: LD_STRING displayTroll();
8602: PPUSH
8603: CALL_OW 559
// wait ( 3 3$00 ) ;
8607: LD_INT 6300
8609: PPUSH
8610: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8614: LD_STRING hideTroll();
8616: PPUSH
8617: CALL_OW 559
// wait ( 1 1$00 ) ;
8621: LD_INT 2100
8623: PPUSH
8624: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8628: LD_STRING displayTroll();
8630: PPUSH
8631: CALL_OW 559
// wait ( 1 1$00 ) ;
8635: LD_INT 2100
8637: PPUSH
8638: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8642: LD_STRING hideTroll();
8644: PPUSH
8645: CALL_OW 559
// end ;
8649: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8650: LD_EXP 4
8654: PUSH
8655: LD_EXP 30
8659: AND
8660: IFFALSE 8723
8662: GO 8664
8664: DISABLE
8665: LD_INT 0
8667: PPUSH
// begin p := 0 ;
8668: LD_ADDR_VAR 0 1
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// repeat game_speed := 1 ;
8676: LD_ADDR_OWVAR 65
8680: PUSH
8681: LD_INT 1
8683: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8684: LD_INT 35
8686: PPUSH
8687: CALL_OW 67
// p := p + 1 ;
8691: LD_ADDR_VAR 0 1
8695: PUSH
8696: LD_VAR 0 1
8700: PUSH
8701: LD_INT 1
8703: PLUS
8704: ST_TO_ADDR
// until p >= 60 ;
8705: LD_VAR 0 1
8709: PUSH
8710: LD_INT 60
8712: GREATEREQUAL
8713: IFFALSE 8676
// game_speed := 4 ;
8715: LD_ADDR_OWVAR 65
8719: PUSH
8720: LD_INT 4
8722: ST_TO_ADDR
// end ;
8723: PPOPN 1
8725: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8726: LD_EXP 4
8730: PUSH
8731: LD_EXP 31
8735: AND
8736: IFFALSE 8882
8738: GO 8740
8740: DISABLE
8741: LD_INT 0
8743: PPUSH
8744: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_OWVAR 2
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 2
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: LD_INT 0
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 30
8777: PUSH
8778: LD_INT 1
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PPUSH
8794: CALL_OW 69
8798: ST_TO_ADDR
// if not depot then
8799: LD_VAR 0 1
8803: NOT
8804: IFFALSE 8808
// exit ;
8806: GO 8882
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_VAR 0 1
8817: PUSH
8818: LD_INT 1
8820: PPUSH
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 12
8830: ARRAY
8831: PPUSH
8832: CALL_OW 274
8836: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: LD_INT 0
8847: PPUSH
8848: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8852: LD_VAR 0 2
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: LD_INT 0
8862: PPUSH
8863: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8867: LD_VAR 0 2
8871: PPUSH
8872: LD_INT 3
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 277
// end ;
8882: PPOPN 2
8884: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8885: LD_EXP 4
8889: PUSH
8890: LD_EXP 32
8894: AND
8895: IFFALSE 8992
8897: GO 8899
8899: DISABLE
8900: LD_INT 0
8902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8903: LD_ADDR_VAR 0 1
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_OWVAR 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 0
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: ST_TO_ADDR
// if not tmp then
8957: LD_VAR 0 1
8961: NOT
8962: IFFALSE 8966
// exit ;
8964: GO 8992
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8966: LD_VAR 0 1
8970: PUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 12
8983: ARRAY
8984: PPUSH
8985: LD_INT 200
8987: PPUSH
8988: CALL_OW 234
// end ;
8992: PPOPN 1
8994: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8995: LD_EXP 4
8999: PUSH
9000: LD_EXP 33
9004: AND
9005: IFFALSE 9084
9007: GO 9009
9009: DISABLE
9010: LD_INT 0
9012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: ST_TO_ADDR
// if not tmp then
9049: LD_VAR 0 1
9053: NOT
9054: IFFALSE 9058
// exit ;
9056: GO 9084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9058: LD_VAR 0 1
9062: PUSH
9063: LD_INT 1
9065: PPUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 12
9075: ARRAY
9076: PPUSH
9077: LD_INT 60
9079: PPUSH
9080: CALL_OW 234
// end ;
9084: PPOPN 1
9086: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9087: LD_EXP 4
9091: PUSH
9092: LD_EXP 34
9096: AND
9097: IFFALSE 9196
9099: GO 9101
9101: DISABLE
9102: LD_INT 0
9104: PPUSH
9105: PPUSH
// begin enable ;
9106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9107: LD_ADDR_VAR 0 1
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_OWVAR 2
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 61
9126: PUSH
9127: EMPTY
9128: LIST
9129: PUSH
9130: LD_INT 33
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: PPUSH
9145: CALL_OW 69
9149: ST_TO_ADDR
// if not tmp then
9150: LD_VAR 0 1
9154: NOT
9155: IFFALSE 9159
// exit ;
9157: GO 9196
// for i in tmp do
9159: LD_ADDR_VAR 0 2
9163: PUSH
9164: LD_VAR 0 1
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9194
// if IsControledBy ( i ) then
9172: LD_VAR 0 2
9176: PPUSH
9177: CALL_OW 312
9181: IFFALSE 9192
// ComUnlink ( i ) ;
9183: LD_VAR 0 2
9187: PPUSH
9188: CALL_OW 136
9192: GO 9169
9194: POP
9195: POP
// end ;
9196: PPOPN 2
9198: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9199: LD_EXP 4
9203: PUSH
9204: LD_EXP 35
9208: AND
9209: IFFALSE 9349
9211: GO 9213
9213: DISABLE
9214: LD_INT 0
9216: PPUSH
9217: PPUSH
// begin ToLua ( displayPowell(); ) ;
9218: LD_STRING displayPowell();
9220: PPUSH
9221: CALL_OW 559
// uc_side := 0 ;
9225: LD_ADDR_OWVAR 20
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// uc_nation := 2 ;
9233: LD_ADDR_OWVAR 21
9237: PUSH
9238: LD_INT 2
9240: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9241: LD_ADDR_OWVAR 37
9245: PUSH
9246: LD_INT 14
9248: ST_TO_ADDR
// vc_engine := engine_siberite ;
9249: LD_ADDR_OWVAR 39
9253: PUSH
9254: LD_INT 3
9256: ST_TO_ADDR
// vc_control := control_apeman ;
9257: LD_ADDR_OWVAR 38
9261: PUSH
9262: LD_INT 5
9264: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9265: LD_ADDR_OWVAR 40
9269: PUSH
9270: LD_INT 29
9272: ST_TO_ADDR
// un := CreateVehicle ;
9273: LD_ADDR_VAR 0 2
9277: PUSH
9278: CALL_OW 45
9282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9283: LD_VAR 0 2
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9295: LD_INT 35
9297: PPUSH
9298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: LD_INT 22
9309: PUSH
9310: LD_OWVAR 2
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PPUSH
9319: CALL_OW 69
9323: PPUSH
9324: LD_VAR 0 2
9328: PPUSH
9329: CALL_OW 74
9333: PPUSH
9334: CALL_OW 115
// until IsDead ( un ) ;
9338: LD_VAR 0 2
9342: PPUSH
9343: CALL_OW 301
9347: IFFALSE 9295
// end ;
9349: PPOPN 2
9351: END
// every 0 0$1 trigger StreamModeActive and sStu do
9352: LD_EXP 4
9356: PUSH
9357: LD_EXP 43
9361: AND
9362: IFFALSE 9378
9364: GO 9366
9366: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9367: LD_STRING displayStucuk();
9369: PPUSH
9370: CALL_OW 559
// ResetFog ;
9374: CALL_OW 335
// end ;
9378: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9379: LD_EXP 4
9383: PUSH
9384: LD_EXP 36
9388: AND
9389: IFFALSE 9530
9391: GO 9393
9393: DISABLE
9394: LD_INT 0
9396: PPUSH
9397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9398: LD_ADDR_VAR 0 2
9402: PUSH
9403: LD_INT 22
9405: PUSH
9406: LD_OWVAR 2
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 21
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 69
9433: ST_TO_ADDR
// if not tmp then
9434: LD_VAR 0 2
9438: NOT
9439: IFFALSE 9443
// exit ;
9441: GO 9530
// un := tmp [ rand ( 1 , tmp ) ] ;
9443: LD_ADDR_VAR 0 1
9447: PUSH
9448: LD_VAR 0 2
9452: PUSH
9453: LD_INT 1
9455: PPUSH
9456: LD_VAR 0 2
9460: PPUSH
9461: CALL_OW 12
9465: ARRAY
9466: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9467: LD_VAR 0 1
9471: PPUSH
9472: LD_INT 0
9474: PPUSH
9475: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_OWVAR 3
9488: PUSH
9489: LD_VAR 0 1
9493: DIFF
9494: PPUSH
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 74
9504: PPUSH
9505: CALL_OW 115
// wait ( 0 0$20 ) ;
9509: LD_INT 700
9511: PPUSH
9512: CALL_OW 67
// SetSide ( un , your_side ) ;
9516: LD_VAR 0 1
9520: PPUSH
9521: LD_OWVAR 2
9525: PPUSH
9526: CALL_OW 235
// end ;
9530: PPOPN 2
9532: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9533: LD_EXP 4
9537: PUSH
9538: LD_EXP 37
9542: AND
9543: IFFALSE 9649
9545: GO 9547
9547: DISABLE
9548: LD_INT 0
9550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9551: LD_ADDR_VAR 0 1
9555: PUSH
9556: LD_INT 22
9558: PUSH
9559: LD_OWVAR 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 2
9570: PUSH
9571: LD_INT 30
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 30
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: ST_TO_ADDR
// if not depot then
9605: LD_VAR 0 1
9609: NOT
9610: IFFALSE 9614
// exit ;
9612: GO 9649
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9614: LD_VAR 0 1
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 250
9627: PPUSH
9628: LD_VAR 0 1
9632: PUSH
9633: LD_INT 1
9635: ARRAY
9636: PPUSH
9637: CALL_OW 251
9641: PPUSH
9642: LD_INT 70
9644: PPUSH
9645: CALL_OW 495
// end ;
9649: PPOPN 1
9651: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9652: LD_EXP 4
9656: PUSH
9657: LD_EXP 38
9661: AND
9662: IFFALSE 9873
9664: GO 9666
9666: DISABLE
9667: LD_INT 0
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9674: LD_ADDR_VAR 0 5
9678: PUSH
9679: LD_INT 22
9681: PUSH
9682: LD_OWVAR 2
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 21
9693: PUSH
9694: LD_INT 1
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// if not tmp then
9710: LD_VAR 0 5
9714: NOT
9715: IFFALSE 9719
// exit ;
9717: GO 9873
// for i in tmp do
9719: LD_ADDR_VAR 0 1
9723: PUSH
9724: LD_VAR 0 5
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9871
// begin d := rand ( 0 , 5 ) ;
9732: LD_ADDR_VAR 0 4
9736: PUSH
9737: LD_INT 0
9739: PPUSH
9740: LD_INT 5
9742: PPUSH
9743: CALL_OW 12
9747: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL_OW 250
9762: PPUSH
9763: LD_VAR 0 4
9767: PPUSH
9768: LD_INT 3
9770: PPUSH
9771: LD_INT 12
9773: PPUSH
9774: CALL_OW 12
9778: PPUSH
9779: CALL_OW 272
9783: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 251
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: LD_INT 3
9806: PPUSH
9807: LD_INT 12
9809: PPUSH
9810: CALL_OW 12
9814: PPUSH
9815: CALL_OW 273
9819: ST_TO_ADDR
// if ValidHex ( x , y ) then
9820: LD_VAR 0 2
9824: PPUSH
9825: LD_VAR 0 3
9829: PPUSH
9830: CALL_OW 488
9834: IFFALSE 9869
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9836: LD_VAR 0 1
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_INT 3
9853: PPUSH
9854: LD_INT 6
9856: PPUSH
9857: CALL_OW 12
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 483
// end ;
9869: GO 9729
9871: POP
9872: POP
// end ;
9873: PPOPN 5
9875: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9876: LD_EXP 4
9880: PUSH
9881: LD_EXP 39
9885: AND
9886: IFFALSE 9980
9888: GO 9890
9890: DISABLE
9891: LD_INT 0
9893: PPUSH
9894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9895: LD_ADDR_VAR 0 2
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_OWVAR 2
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 32
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 21
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// if not tmp then
9942: LD_VAR 0 2
9946: NOT
9947: IFFALSE 9951
// exit ;
9949: GO 9980
// for i in tmp do
9951: LD_ADDR_VAR 0 1
9955: PUSH
9956: LD_VAR 0 2
9960: PUSH
9961: FOR_IN
9962: IFFALSE 9978
// SetFuel ( i , 0 ) ;
9964: LD_VAR 0 1
9968: PPUSH
9969: LD_INT 0
9971: PPUSH
9972: CALL_OW 240
9976: GO 9961
9978: POP
9979: POP
// end ;
9980: PPOPN 2
9982: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9983: LD_EXP 4
9987: PUSH
9988: LD_EXP 40
9992: AND
9993: IFFALSE 10059
9995: GO 9997
9997: DISABLE
9998: LD_INT 0
10000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10001: LD_ADDR_VAR 0 1
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_OWVAR 2
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 30
10020: PUSH
10021: LD_INT 29
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PPUSH
10032: CALL_OW 69
10036: ST_TO_ADDR
// if not tmp then
10037: LD_VAR 0 1
10041: NOT
10042: IFFALSE 10046
// exit ;
10044: GO 10059
// DestroyUnit ( tmp [ 1 ] ) ;
10046: LD_VAR 0 1
10050: PUSH
10051: LD_INT 1
10053: ARRAY
10054: PPUSH
10055: CALL_OW 65
// end ;
10059: PPOPN 1
10061: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10062: LD_EXP 4
10066: PUSH
10067: LD_EXP 42
10071: AND
10072: IFFALSE 10201
10074: GO 10076
10076: DISABLE
10077: LD_INT 0
10079: PPUSH
// begin uc_side := 0 ;
10080: LD_ADDR_OWVAR 20
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// uc_nation := nation_arabian ;
10088: LD_ADDR_OWVAR 21
10092: PUSH
10093: LD_INT 2
10095: ST_TO_ADDR
// hc_gallery :=  ;
10096: LD_ADDR_OWVAR 33
10100: PUSH
10101: LD_STRING 
10103: ST_TO_ADDR
// hc_name :=  ;
10104: LD_ADDR_OWVAR 26
10108: PUSH
10109: LD_STRING 
10111: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10112: LD_INT 1
10114: PPUSH
10115: LD_INT 11
10117: PPUSH
10118: LD_INT 10
10120: PPUSH
10121: CALL_OW 380
// un := CreateHuman ;
10125: LD_ADDR_VAR 0 1
10129: PUSH
10130: CALL_OW 44
10134: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10135: LD_VAR 0 1
10139: PPUSH
10140: LD_INT 1
10142: PPUSH
10143: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10147: LD_INT 35
10149: PPUSH
10150: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 22
10161: PUSH
10162: LD_OWVAR 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: PPUSH
10176: LD_VAR 0 1
10180: PPUSH
10181: CALL_OW 74
10185: PPUSH
10186: CALL_OW 115
// until IsDead ( un ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: CALL_OW 301
10199: IFFALSE 10147
// end ;
10201: PPOPN 1
10203: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10204: LD_EXP 4
10208: PUSH
10209: LD_EXP 44
10213: AND
10214: IFFALSE 10226
10216: GO 10218
10218: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10219: LD_STRING earthquake(getX(game), 0, 32)
10221: PPUSH
10222: CALL_OW 559
10226: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10227: LD_EXP 4
10231: PUSH
10232: LD_EXP 45
10236: AND
10237: IFFALSE 10328
10239: GO 10241
10241: DISABLE
10242: LD_INT 0
10244: PPUSH
// begin enable ;
10245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10246: LD_ADDR_VAR 0 1
10250: PUSH
10251: LD_INT 22
10253: PUSH
10254: LD_OWVAR 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 33
10275: PUSH
10276: LD_INT 3
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: PPUSH
10288: CALL_OW 69
10292: ST_TO_ADDR
// if not tmp then
10293: LD_VAR 0 1
10297: NOT
10298: IFFALSE 10302
// exit ;
10300: GO 10328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10302: LD_VAR 0 1
10306: PUSH
10307: LD_INT 1
10309: PPUSH
10310: LD_VAR 0 1
10314: PPUSH
10315: CALL_OW 12
10319: ARRAY
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 234
// end ;
10328: PPOPN 1
10330: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10331: LD_EXP 4
10335: PUSH
10336: LD_EXP 46
10340: AND
10341: IFFALSE 10482
10343: GO 10345
10345: DISABLE
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
10350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10351: LD_ADDR_VAR 0 3
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_OWVAR 2
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 25
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 69
10386: ST_TO_ADDR
// if not tmp then
10387: LD_VAR 0 3
10391: NOT
10392: IFFALSE 10396
// exit ;
10394: GO 10482
// un := tmp [ rand ( 1 , tmp ) ] ;
10396: LD_ADDR_VAR 0 2
10400: PUSH
10401: LD_VAR 0 3
10405: PUSH
10406: LD_INT 1
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: CALL_OW 12
10418: ARRAY
10419: ST_TO_ADDR
// if Crawls ( un ) then
10420: LD_VAR 0 2
10424: PPUSH
10425: CALL_OW 318
10429: IFFALSE 10440
// ComWalk ( un ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10440: LD_VAR 0 2
10444: PPUSH
10445: LD_INT 9
10447: PPUSH
10448: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10452: LD_INT 28
10454: PPUSH
10455: LD_OWVAR 2
10459: PPUSH
10460: LD_INT 2
10462: PPUSH
10463: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10467: LD_INT 29
10469: PPUSH
10470: LD_OWVAR 2
10474: PPUSH
10475: LD_INT 2
10477: PPUSH
10478: CALL_OW 322
// end ;
10482: PPOPN 3
10484: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10485: LD_EXP 4
10489: PUSH
10490: LD_EXP 47
10494: AND
10495: IFFALSE 10606
10497: GO 10499
10499: DISABLE
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10505: LD_ADDR_VAR 0 3
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_OWVAR 2
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 25
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PPUSH
10536: CALL_OW 69
10540: ST_TO_ADDR
// if not tmp then
10541: LD_VAR 0 3
10545: NOT
10546: IFFALSE 10550
// exit ;
10548: GO 10606
// un := tmp [ rand ( 1 , tmp ) ] ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 3
10559: PUSH
10560: LD_INT 1
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: CALL_OW 12
10572: ARRAY
10573: ST_TO_ADDR
// if Crawls ( un ) then
10574: LD_VAR 0 2
10578: PPUSH
10579: CALL_OW 318
10583: IFFALSE 10594
// ComWalk ( un ) ;
10585: LD_VAR 0 2
10589: PPUSH
10590: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10594: LD_VAR 0 2
10598: PPUSH
10599: LD_INT 8
10601: PPUSH
10602: CALL_OW 336
// end ;
10606: PPOPN 3
10608: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10609: LD_EXP 4
10613: PUSH
10614: LD_EXP 48
10618: AND
10619: IFFALSE 10763
10621: GO 10623
10623: DISABLE
10624: LD_INT 0
10626: PPUSH
10627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10628: LD_ADDR_VAR 0 2
10632: PUSH
10633: LD_INT 22
10635: PUSH
10636: LD_OWVAR 2
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 21
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: LD_INT 34
10660: PUSH
10661: LD_INT 12
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 34
10670: PUSH
10671: LD_INT 51
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 34
10680: PUSH
10681: LD_INT 32
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 69
10703: ST_TO_ADDR
// if not tmp then
10704: LD_VAR 0 2
10708: NOT
10709: IFFALSE 10713
// exit ;
10711: GO 10763
// for i in tmp do
10713: LD_ADDR_VAR 0 1
10717: PUSH
10718: LD_VAR 0 2
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10761
// if GetCargo ( i , mat_artifact ) = 0 then
10726: LD_VAR 0 1
10730: PPUSH
10731: LD_INT 4
10733: PPUSH
10734: CALL_OW 289
10738: PUSH
10739: LD_INT 0
10741: EQUAL
10742: IFFALSE 10759
// SetCargo ( i , mat_siberit , 100 ) ;
10744: LD_VAR 0 1
10748: PPUSH
10749: LD_INT 3
10751: PPUSH
10752: LD_INT 100
10754: PPUSH
10755: CALL_OW 290
10759: GO 10723
10761: POP
10762: POP
// end ;
10763: PPOPN 2
10765: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10766: LD_EXP 4
10770: PUSH
10771: LD_EXP 49
10775: AND
10776: IFFALSE 10959
10778: GO 10780
10780: DISABLE
10781: LD_INT 0
10783: PPUSH
10784: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10785: LD_ADDR_VAR 0 2
10789: PUSH
10790: LD_INT 22
10792: PUSH
10793: LD_OWVAR 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: ST_TO_ADDR
// if not tmp then
10807: LD_VAR 0 2
10811: NOT
10812: IFFALSE 10816
// exit ;
10814: GO 10959
// for i := 1 to 2 do
10816: LD_ADDR_VAR 0 1
10820: PUSH
10821: DOUBLE
10822: LD_INT 1
10824: DEC
10825: ST_TO_ADDR
10826: LD_INT 2
10828: PUSH
10829: FOR_TO
10830: IFFALSE 10957
// begin uc_side := your_side ;
10832: LD_ADDR_OWVAR 20
10836: PUSH
10837: LD_OWVAR 2
10841: ST_TO_ADDR
// uc_nation := nation_american ;
10842: LD_ADDR_OWVAR 21
10846: PUSH
10847: LD_INT 1
10849: ST_TO_ADDR
// vc_chassis := us_morphling ;
10850: LD_ADDR_OWVAR 37
10854: PUSH
10855: LD_INT 5
10857: ST_TO_ADDR
// vc_engine := engine_siberite ;
10858: LD_ADDR_OWVAR 39
10862: PUSH
10863: LD_INT 3
10865: ST_TO_ADDR
// vc_control := control_computer ;
10866: LD_ADDR_OWVAR 38
10870: PUSH
10871: LD_INT 3
10873: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10874: LD_ADDR_OWVAR 40
10878: PUSH
10879: LD_INT 10
10881: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10882: LD_VAR 0 2
10886: PUSH
10887: LD_INT 1
10889: ARRAY
10890: PPUSH
10891: CALL_OW 310
10895: NOT
10896: IFFALSE 10943
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10898: CALL_OW 45
10902: PPUSH
10903: LD_VAR 0 2
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: CALL_OW 250
10916: PPUSH
10917: LD_VAR 0 2
10921: PUSH
10922: LD_INT 1
10924: ARRAY
10925: PPUSH
10926: CALL_OW 251
10930: PPUSH
10931: LD_INT 12
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 50
10941: GO 10955
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10943: CALL_OW 45
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 51
// end ;
10955: GO 10829
10957: POP
10958: POP
// end ;
10959: PPOPN 2
10961: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10962: LD_EXP 4
10966: PUSH
10967: LD_EXP 50
10971: AND
10972: IFFALSE 11194
10974: GO 10976
10976: DISABLE
10977: LD_INT 0
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10985: LD_ADDR_VAR 0 6
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_OWVAR 2
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 1
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: LD_INT 23
11017: PUSH
11018: LD_INT 0
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: PPUSH
11034: CALL_OW 69
11038: ST_TO_ADDR
// if not tmp then
11039: LD_VAR 0 6
11043: NOT
11044: IFFALSE 11048
// exit ;
11046: GO 11194
// s1 := rand ( 1 , 4 ) ;
11048: LD_ADDR_VAR 0 2
11052: PUSH
11053: LD_INT 1
11055: PPUSH
11056: LD_INT 4
11058: PPUSH
11059: CALL_OW 12
11063: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11064: LD_ADDR_VAR 0 4
11068: PUSH
11069: LD_VAR 0 6
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: LD_VAR 0 2
11082: PPUSH
11083: CALL_OW 259
11087: ST_TO_ADDR
// if s1 = 1 then
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11116
// s2 := rand ( 2 , 4 ) else
11098: LD_ADDR_VAR 0 3
11102: PUSH
11103: LD_INT 2
11105: PPUSH
11106: LD_INT 4
11108: PPUSH
11109: CALL_OW 12
11113: ST_TO_ADDR
11114: GO 11124
// s2 := 1 ;
11116: LD_ADDR_VAR 0 3
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11124: LD_ADDR_VAR 0 5
11128: PUSH
11129: LD_VAR 0 6
11133: PUSH
11134: LD_INT 1
11136: ARRAY
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: CALL_OW 259
11147: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11148: LD_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ARRAY
11156: PPUSH
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_VAR 0 5
11166: PPUSH
11167: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11171: LD_VAR 0 6
11175: PUSH
11176: LD_INT 1
11178: ARRAY
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_VAR 0 4
11189: PPUSH
11190: CALL_OW 237
// end ;
11194: PPOPN 6
11196: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11197: LD_EXP 4
11201: PUSH
11202: LD_EXP 51
11206: AND
11207: IFFALSE 11286
11209: GO 11211
11211: DISABLE
11212: LD_INT 0
11214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11215: LD_ADDR_VAR 0 1
11219: PUSH
11220: LD_INT 22
11222: PUSH
11223: LD_OWVAR 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 30
11234: PUSH
11235: LD_INT 3
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PPUSH
11246: CALL_OW 69
11250: ST_TO_ADDR
// if not tmp then
11251: LD_VAR 0 1
11255: NOT
11256: IFFALSE 11260
// exit ;
11258: GO 11286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11260: LD_VAR 0 1
11264: PUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_VAR 0 1
11272: PPUSH
11273: CALL_OW 12
11277: ARRAY
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: CALL_OW 234
// end ;
11286: PPOPN 1
11288: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11289: LD_EXP 4
11293: PUSH
11294: LD_EXP 52
11298: AND
11299: IFFALSE 11411
11301: GO 11303
11303: DISABLE
11304: LD_INT 0
11306: PPUSH
11307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11308: LD_ADDR_VAR 0 2
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_OWVAR 2
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 27
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 30
11340: PUSH
11341: LD_INT 26
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 30
11350: PUSH
11351: LD_INT 28
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PPUSH
11368: CALL_OW 69
11372: ST_TO_ADDR
// if not tmp then
11373: LD_VAR 0 2
11377: NOT
11378: IFFALSE 11382
// exit ;
11380: GO 11411
// for i in tmp do
11382: LD_ADDR_VAR 0 1
11386: PUSH
11387: LD_VAR 0 2
11391: PUSH
11392: FOR_IN
11393: IFFALSE 11409
// SetLives ( i , 1 ) ;
11395: LD_VAR 0 1
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: CALL_OW 234
11407: GO 11392
11409: POP
11410: POP
// end ;
11411: PPOPN 2
11413: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11414: LD_EXP 4
11418: PUSH
11419: LD_EXP 53
11423: AND
11424: IFFALSE 11711
11426: GO 11428
11428: DISABLE
11429: LD_INT 0
11431: PPUSH
11432: PPUSH
11433: PPUSH
// begin i := rand ( 1 , 7 ) ;
11434: LD_ADDR_VAR 0 1
11438: PUSH
11439: LD_INT 1
11441: PPUSH
11442: LD_INT 7
11444: PPUSH
11445: CALL_OW 12
11449: ST_TO_ADDR
// case i of 1 :
11450: LD_VAR 0 1
11454: PUSH
11455: LD_INT 1
11457: DOUBLE
11458: EQUAL
11459: IFTRUE 11463
11461: GO 11473
11463: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11464: LD_STRING earthquake(getX(game), 0, 32)
11466: PPUSH
11467: CALL_OW 559
11471: GO 11711
11473: LD_INT 2
11475: DOUBLE
11476: EQUAL
11477: IFTRUE 11481
11479: GO 11495
11481: POP
// begin ToLua ( displayStucuk(); ) ;
11482: LD_STRING displayStucuk();
11484: PPUSH
11485: CALL_OW 559
// ResetFog ;
11489: CALL_OW 335
// end ; 3 :
11493: GO 11711
11495: LD_INT 3
11497: DOUBLE
11498: EQUAL
11499: IFTRUE 11503
11501: GO 11607
11503: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_OWVAR 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 25
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PPUSH
11535: CALL_OW 69
11539: ST_TO_ADDR
// if not tmp then
11540: LD_VAR 0 2
11544: NOT
11545: IFFALSE 11549
// exit ;
11547: GO 11711
// un := tmp [ rand ( 1 , tmp ) ] ;
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_VAR 0 2
11558: PUSH
11559: LD_INT 1
11561: PPUSH
11562: LD_VAR 0 2
11566: PPUSH
11567: CALL_OW 12
11571: ARRAY
11572: ST_TO_ADDR
// if Crawls ( un ) then
11573: LD_VAR 0 3
11577: PPUSH
11578: CALL_OW 318
11582: IFFALSE 11593
// ComWalk ( un ) ;
11584: LD_VAR 0 3
11588: PPUSH
11589: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 8
11600: PPUSH
11601: CALL_OW 336
// end ; 4 :
11605: GO 11711
11607: LD_INT 4
11609: DOUBLE
11610: EQUAL
11611: IFTRUE 11615
11613: GO 11689
11615: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_OWVAR 2
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 30
11635: PUSH
11636: LD_INT 29
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// if not tmp then
11652: LD_VAR 0 2
11656: NOT
11657: IFFALSE 11661
// exit ;
11659: GO 11711
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11661: LD_VAR 0 2
11665: PUSH
11666: LD_INT 1
11668: ARRAY
11669: PPUSH
11670: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11674: LD_VAR 0 2
11678: PUSH
11679: LD_INT 1
11681: ARRAY
11682: PPUSH
11683: CALL_OW 65
// end ; 5 .. 7 :
11687: GO 11711
11689: LD_INT 5
11691: DOUBLE
11692: GREATEREQUAL
11693: IFFALSE 11701
11695: LD_INT 7
11697: DOUBLE
11698: LESSEQUAL
11699: IFTRUE 11703
11701: GO 11710
11703: POP
// StreamSibBomb ; end ;
11704: CALL 7948 0 0
11708: GO 11711
11710: POP
// end ;
11711: PPOPN 3
11713: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11714: LD_EXP 4
11718: PUSH
11719: LD_EXP 54
11723: AND
11724: IFFALSE 11880
11726: GO 11728
11728: DISABLE
11729: LD_INT 0
11731: PPUSH
11732: PPUSH
11733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 81
11741: PUSH
11742: LD_OWVAR 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 2
11753: PUSH
11754: LD_INT 21
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 21
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PPUSH
11783: CALL_OW 69
11787: ST_TO_ADDR
// if not tmp then
11788: LD_VAR 0 2
11792: NOT
11793: IFFALSE 11797
// exit ;
11795: GO 11880
// p := 0 ;
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11805: LD_INT 35
11807: PPUSH
11808: CALL_OW 67
// p := p + 1 ;
11812: LD_ADDR_VAR 0 3
11816: PUSH
11817: LD_VAR 0 3
11821: PUSH
11822: LD_INT 1
11824: PLUS
11825: ST_TO_ADDR
// for i in tmp do
11826: LD_ADDR_VAR 0 1
11830: PUSH
11831: LD_VAR 0 2
11835: PUSH
11836: FOR_IN
11837: IFFALSE 11868
// if GetLives ( i ) < 1000 then
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 256
11848: PUSH
11849: LD_INT 1000
11851: LESS
11852: IFFALSE 11866
// SetLives ( i , 1000 ) ;
11854: LD_VAR 0 1
11858: PPUSH
11859: LD_INT 1000
11861: PPUSH
11862: CALL_OW 234
11866: GO 11836
11868: POP
11869: POP
// until p > 20 ;
11870: LD_VAR 0 3
11874: PUSH
11875: LD_INT 20
11877: GREATER
11878: IFFALSE 11805
// end ;
11880: PPOPN 3
11882: END
// every 0 0$1 trigger StreamModeActive and sTime do
11883: LD_EXP 4
11887: PUSH
11888: LD_EXP 55
11892: AND
11893: IFFALSE 11928
11895: GO 11897
11897: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11898: LD_INT 28
11900: PPUSH
11901: LD_OWVAR 2
11905: PPUSH
11906: LD_INT 2
11908: PPUSH
11909: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11913: LD_INT 30
11915: PPUSH
11916: LD_OWVAR 2
11920: PPUSH
11921: LD_INT 2
11923: PPUSH
11924: CALL_OW 322
// end ;
11928: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11929: LD_EXP 4
11933: PUSH
11934: LD_EXP 56
11938: AND
11939: IFFALSE 12060
11941: GO 11943
11943: DISABLE
11944: LD_INT 0
11946: PPUSH
11947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11948: LD_ADDR_VAR 0 2
11952: PUSH
11953: LD_INT 22
11955: PUSH
11956: LD_OWVAR 2
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 21
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 23
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: PPUSH
11997: CALL_OW 69
12001: ST_TO_ADDR
// if not tmp then
12002: LD_VAR 0 2
12006: NOT
12007: IFFALSE 12011
// exit ;
12009: GO 12060
// for i in tmp do
12011: LD_ADDR_VAR 0 1
12015: PUSH
12016: LD_VAR 0 2
12020: PUSH
12021: FOR_IN
12022: IFFALSE 12058
// begin if Crawls ( i ) then
12024: LD_VAR 0 1
12028: PPUSH
12029: CALL_OW 318
12033: IFFALSE 12044
// ComWalk ( i ) ;
12035: LD_VAR 0 1
12039: PPUSH
12040: CALL_OW 138
// SetClass ( i , 2 ) ;
12044: LD_VAR 0 1
12048: PPUSH
12049: LD_INT 2
12051: PPUSH
12052: CALL_OW 336
// end ;
12056: GO 12021
12058: POP
12059: POP
// end ;
12060: PPOPN 2
12062: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12063: LD_EXP 4
12067: PUSH
12068: LD_EXP 57
12072: AND
12073: IFFALSE 12361
12075: GO 12077
12077: DISABLE
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
12082: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12083: LD_OWVAR 2
12087: PPUSH
12088: LD_INT 9
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12101: LD_INT 9
12103: PPUSH
12104: LD_OWVAR 2
12108: PPUSH
12109: CALL_OW 343
// uc_side := 9 ;
12113: LD_ADDR_OWVAR 20
12117: PUSH
12118: LD_INT 9
12120: ST_TO_ADDR
// uc_nation := 2 ;
12121: LD_ADDR_OWVAR 21
12125: PUSH
12126: LD_INT 2
12128: ST_TO_ADDR
// hc_name := Dark Warrior ;
12129: LD_ADDR_OWVAR 26
12133: PUSH
12134: LD_STRING Dark Warrior
12136: ST_TO_ADDR
// hc_gallery :=  ;
12137: LD_ADDR_OWVAR 33
12141: PUSH
12142: LD_STRING 
12144: ST_TO_ADDR
// hc_noskilllimit := true ;
12145: LD_ADDR_OWVAR 76
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12153: LD_ADDR_OWVAR 31
12157: PUSH
12158: LD_INT 30
12160: PUSH
12161: LD_INT 30
12163: PUSH
12164: LD_INT 30
12166: PUSH
12167: LD_INT 30
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: ST_TO_ADDR
// un := CreateHuman ;
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: CALL_OW 44
12185: ST_TO_ADDR
// hc_noskilllimit := false ;
12186: LD_ADDR_OWVAR 76
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 51
// ToLua ( playRanger() ) ;
12206: LD_STRING playRanger()
12208: PPUSH
12209: CALL_OW 559
// p := 0 ;
12213: LD_ADDR_VAR 0 2
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12221: LD_INT 35
12223: PPUSH
12224: CALL_OW 67
// p := p + 1 ;
12228: LD_ADDR_VAR 0 2
12232: PUSH
12233: LD_VAR 0 2
12237: PUSH
12238: LD_INT 1
12240: PLUS
12241: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12242: LD_VAR 0 3
12246: PPUSH
12247: CALL_OW 256
12251: PUSH
12252: LD_INT 1000
12254: LESS
12255: IFFALSE 12269
// SetLives ( un , 1000 ) ;
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1000
12264: PPUSH
12265: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 81
12276: PUSH
12277: LD_OWVAR 2
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 91
12288: PUSH
12289: LD_VAR 0 3
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: PPUSH
12311: LD_VAR 0 3
12315: PPUSH
12316: CALL_OW 74
12320: PPUSH
12321: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12325: LD_VAR 0 2
12329: PUSH
12330: LD_INT 80
12332: GREATER
12333: PUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: CALL_OW 301
12343: OR
12344: IFFALSE 12221
// if un then
12346: LD_VAR 0 3
12350: IFFALSE 12361
// RemoveUnit ( un ) ;
12352: LD_VAR 0 3
12356: PPUSH
12357: CALL_OW 64
// end ;
12361: PPOPN 3
12363: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12364: LD_EXP 58
12368: IFFALSE 12484
12370: GO 12372
12372: DISABLE
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12378: LD_ADDR_VAR 0 2
12382: PUSH
12383: LD_INT 81
12385: PUSH
12386: LD_OWVAR 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 21
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12414: LD_STRING playComputer()
12416: PPUSH
12417: CALL_OW 559
// if not tmp then
12421: LD_VAR 0 2
12425: NOT
12426: IFFALSE 12430
// exit ;
12428: GO 12484
// for i in tmp do
12430: LD_ADDR_VAR 0 1
12434: PUSH
12435: LD_VAR 0 2
12439: PUSH
12440: FOR_IN
12441: IFFALSE 12482
// for j := 1 to 4 do
12443: LD_ADDR_VAR 0 3
12447: PUSH
12448: DOUBLE
12449: LD_INT 1
12451: DEC
12452: ST_TO_ADDR
12453: LD_INT 4
12455: PUSH
12456: FOR_TO
12457: IFFALSE 12478
// SetSkill ( i , j , 10 ) ;
12459: LD_VAR 0 1
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 10
12471: PPUSH
12472: CALL_OW 237
12476: GO 12456
12478: POP
12479: POP
12480: GO 12440
12482: POP
12483: POP
// end ;
12484: PPOPN 3
12486: END
// every 0 0$1 trigger s30 do var i , tmp ;
12487: LD_EXP 59
12491: IFFALSE 12560
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
12499: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12500: LD_ADDR_VAR 0 2
12504: PUSH
12505: LD_INT 22
12507: PUSH
12508: LD_OWVAR 2
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 69
12521: ST_TO_ADDR
// if not tmp then
12522: LD_VAR 0 2
12526: NOT
12527: IFFALSE 12531
// exit ;
12529: GO 12560
// for i in tmp do
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_VAR 0 2
12540: PUSH
12541: FOR_IN
12542: IFFALSE 12558
// SetLives ( i , 300 ) ;
12544: LD_VAR 0 1
12548: PPUSH
12549: LD_INT 300
12551: PPUSH
12552: CALL_OW 234
12556: GO 12541
12558: POP
12559: POP
// end ;
12560: PPOPN 2
12562: END
// every 0 0$1 trigger s60 do var i , tmp ;
12563: LD_EXP 60
12567: IFFALSE 12636
12569: GO 12571
12571: DISABLE
12572: LD_INT 0
12574: PPUSH
12575: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12576: LD_ADDR_VAR 0 2
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_OWVAR 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: ST_TO_ADDR
// if not tmp then
12598: LD_VAR 0 2
12602: NOT
12603: IFFALSE 12607
// exit ;
12605: GO 12636
// for i in tmp do
12607: LD_ADDR_VAR 0 1
12611: PUSH
12612: LD_VAR 0 2
12616: PUSH
12617: FOR_IN
12618: IFFALSE 12634
// SetLives ( i , 600 ) ;
12620: LD_VAR 0 1
12624: PPUSH
12625: LD_INT 600
12627: PPUSH
12628: CALL_OW 234
12632: GO 12617
12634: POP
12635: POP
// end ;
12636: PPOPN 2
12638: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12639: LD_INT 0
12641: PPUSH
// case cmd of 301 :
12642: LD_VAR 0 1
12646: PUSH
12647: LD_INT 301
12649: DOUBLE
12650: EQUAL
12651: IFTRUE 12655
12653: GO 12687
12655: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12656: LD_VAR 0 6
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: LD_VAR 0 8
12670: PPUSH
12671: LD_VAR 0 4
12675: PPUSH
12676: LD_VAR 0 5
12680: PPUSH
12681: CALL 13888 0 5
12685: GO 12808
12687: LD_INT 302
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12732
12695: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12696: LD_VAR 0 6
12700: PPUSH
12701: LD_VAR 0 7
12705: PPUSH
12706: LD_VAR 0 8
12710: PPUSH
12711: LD_VAR 0 9
12715: PPUSH
12716: LD_VAR 0 4
12720: PPUSH
12721: LD_VAR 0 5
12725: PPUSH
12726: CALL 13979 0 6
12730: GO 12808
12732: LD_INT 303
12734: DOUBLE
12735: EQUAL
12736: IFTRUE 12740
12738: GO 12777
12740: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12741: LD_VAR 0 6
12745: PPUSH
12746: LD_VAR 0 7
12750: PPUSH
12751: LD_VAR 0 8
12755: PPUSH
12756: LD_VAR 0 9
12760: PPUSH
12761: LD_VAR 0 4
12765: PPUSH
12766: LD_VAR 0 5
12770: PPUSH
12771: CALL 12813 0 6
12775: GO 12808
12777: LD_INT 304
12779: DOUBLE
12780: EQUAL
12781: IFTRUE 12785
12783: GO 12807
12785: POP
// hHackTeleport ( unit , x , y ) ; end ;
12786: LD_VAR 0 2
12790: PPUSH
12791: LD_VAR 0 4
12795: PPUSH
12796: LD_VAR 0 5
12800: PPUSH
12801: CALL 14572 0 3
12805: GO 12808
12807: POP
// end ;
12808: LD_VAR 0 12
12812: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12813: LD_INT 0
12815: PPUSH
12816: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12817: LD_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: LESS
12825: PUSH
12826: LD_VAR 0 1
12830: PUSH
12831: LD_INT 3
12833: GREATER
12834: OR
12835: PUSH
12836: LD_VAR 0 5
12840: PPUSH
12841: LD_VAR 0 6
12845: PPUSH
12846: CALL_OW 428
12850: OR
12851: IFFALSE 12855
// exit ;
12853: GO 13575
// uc_side := your_side ;
12855: LD_ADDR_OWVAR 20
12859: PUSH
12860: LD_OWVAR 2
12864: ST_TO_ADDR
// uc_nation := nation ;
12865: LD_ADDR_OWVAR 21
12869: PUSH
12870: LD_VAR 0 1
12874: ST_TO_ADDR
// bc_level = 1 ;
12875: LD_ADDR_OWVAR 43
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// case btype of 1 :
12883: LD_VAR 0 2
12887: PUSH
12888: LD_INT 1
12890: DOUBLE
12891: EQUAL
12892: IFTRUE 12896
12894: GO 12907
12896: POP
// bc_type := b_depot ; 2 :
12897: LD_ADDR_OWVAR 42
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
12905: GO 13519
12907: LD_INT 2
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12926
12915: POP
// bc_type := b_warehouse ; 3 :
12916: LD_ADDR_OWVAR 42
12920: PUSH
12921: LD_INT 1
12923: ST_TO_ADDR
12924: GO 13519
12926: LD_INT 3
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12945
12934: POP
// bc_type := b_lab ; 4 .. 9 :
12935: LD_ADDR_OWVAR 42
12939: PUSH
12940: LD_INT 6
12942: ST_TO_ADDR
12943: GO 13519
12945: LD_INT 4
12947: DOUBLE
12948: GREATEREQUAL
12949: IFFALSE 12957
12951: LD_INT 9
12953: DOUBLE
12954: LESSEQUAL
12955: IFTRUE 12959
12957: GO 13011
12959: POP
// begin bc_type := b_lab_half ;
12960: LD_ADDR_OWVAR 42
12964: PUSH
12965: LD_INT 7
12967: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12968: LD_ADDR_OWVAR 44
12972: PUSH
12973: LD_INT 10
12975: PUSH
12976: LD_INT 11
12978: PUSH
12979: LD_INT 12
12981: PUSH
12982: LD_INT 15
12984: PUSH
12985: LD_INT 14
12987: PUSH
12988: LD_INT 13
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: PUSH
12999: LD_VAR 0 2
13003: PUSH
13004: LD_INT 3
13006: MINUS
13007: ARRAY
13008: ST_TO_ADDR
// end ; 10 .. 13 :
13009: GO 13519
13011: LD_INT 10
13013: DOUBLE
13014: GREATEREQUAL
13015: IFFALSE 13023
13017: LD_INT 13
13019: DOUBLE
13020: LESSEQUAL
13021: IFTRUE 13025
13023: GO 13102
13025: POP
// begin bc_type := b_lab_full ;
13026: LD_ADDR_OWVAR 42
13030: PUSH
13031: LD_INT 8
13033: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13034: LD_ADDR_OWVAR 44
13038: PUSH
13039: LD_INT 10
13041: PUSH
13042: LD_INT 12
13044: PUSH
13045: LD_INT 14
13047: PUSH
13048: LD_INT 13
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: PUSH
13057: LD_VAR 0 2
13061: PUSH
13062: LD_INT 9
13064: MINUS
13065: ARRAY
13066: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13067: LD_ADDR_OWVAR 45
13071: PUSH
13072: LD_INT 11
13074: PUSH
13075: LD_INT 15
13077: PUSH
13078: LD_INT 12
13080: PUSH
13081: LD_INT 15
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: PUSH
13090: LD_VAR 0 2
13094: PUSH
13095: LD_INT 9
13097: MINUS
13098: ARRAY
13099: ST_TO_ADDR
// end ; 14 :
13100: GO 13519
13102: LD_INT 14
13104: DOUBLE
13105: EQUAL
13106: IFTRUE 13110
13108: GO 13121
13110: POP
// bc_type := b_workshop ; 15 :
13111: LD_ADDR_OWVAR 42
13115: PUSH
13116: LD_INT 2
13118: ST_TO_ADDR
13119: GO 13519
13121: LD_INT 15
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13140
13129: POP
// bc_type := b_factory ; 16 :
13130: LD_ADDR_OWVAR 42
13134: PUSH
13135: LD_INT 3
13137: ST_TO_ADDR
13138: GO 13519
13140: LD_INT 16
13142: DOUBLE
13143: EQUAL
13144: IFTRUE 13148
13146: GO 13159
13148: POP
// bc_type := b_ext_gun ; 17 :
13149: LD_ADDR_OWVAR 42
13153: PUSH
13154: LD_INT 17
13156: ST_TO_ADDR
13157: GO 13519
13159: LD_INT 17
13161: DOUBLE
13162: EQUAL
13163: IFTRUE 13167
13165: GO 13195
13167: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13168: LD_ADDR_OWVAR 42
13172: PUSH
13173: LD_INT 19
13175: PUSH
13176: LD_INT 23
13178: PUSH
13179: LD_INT 19
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: LD_VAR 0 1
13191: ARRAY
13192: ST_TO_ADDR
13193: GO 13519
13195: LD_INT 18
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13214
13203: POP
// bc_type := b_ext_radar ; 19 :
13204: LD_ADDR_OWVAR 42
13208: PUSH
13209: LD_INT 20
13211: ST_TO_ADDR
13212: GO 13519
13214: LD_INT 19
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13233
13222: POP
// bc_type := b_ext_radio ; 20 :
13223: LD_ADDR_OWVAR 42
13227: PUSH
13228: LD_INT 22
13230: ST_TO_ADDR
13231: GO 13519
13233: LD_INT 20
13235: DOUBLE
13236: EQUAL
13237: IFTRUE 13241
13239: GO 13252
13241: POP
// bc_type := b_ext_siberium ; 21 :
13242: LD_ADDR_OWVAR 42
13246: PUSH
13247: LD_INT 21
13249: ST_TO_ADDR
13250: GO 13519
13252: LD_INT 21
13254: DOUBLE
13255: EQUAL
13256: IFTRUE 13260
13258: GO 13271
13260: POP
// bc_type := b_ext_computer ; 22 :
13261: LD_ADDR_OWVAR 42
13265: PUSH
13266: LD_INT 24
13268: ST_TO_ADDR
13269: GO 13519
13271: LD_INT 22
13273: DOUBLE
13274: EQUAL
13275: IFTRUE 13279
13277: GO 13290
13279: POP
// bc_type := b_ext_track ; 23 :
13280: LD_ADDR_OWVAR 42
13284: PUSH
13285: LD_INT 16
13287: ST_TO_ADDR
13288: GO 13519
13290: LD_INT 23
13292: DOUBLE
13293: EQUAL
13294: IFTRUE 13298
13296: GO 13309
13298: POP
// bc_type := b_ext_laser ; 24 :
13299: LD_ADDR_OWVAR 42
13303: PUSH
13304: LD_INT 25
13306: ST_TO_ADDR
13307: GO 13519
13309: LD_INT 24
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13328
13317: POP
// bc_type := b_control_tower ; 25 :
13318: LD_ADDR_OWVAR 42
13322: PUSH
13323: LD_INT 36
13325: ST_TO_ADDR
13326: GO 13519
13328: LD_INT 25
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13347
13336: POP
// bc_type := b_breastwork ; 26 :
13337: LD_ADDR_OWVAR 42
13341: PUSH
13342: LD_INT 31
13344: ST_TO_ADDR
13345: GO 13519
13347: LD_INT 26
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13366
13355: POP
// bc_type := b_bunker ; 27 :
13356: LD_ADDR_OWVAR 42
13360: PUSH
13361: LD_INT 32
13363: ST_TO_ADDR
13364: GO 13519
13366: LD_INT 27
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13385
13374: POP
// bc_type := b_turret ; 28 :
13375: LD_ADDR_OWVAR 42
13379: PUSH
13380: LD_INT 33
13382: ST_TO_ADDR
13383: GO 13519
13385: LD_INT 28
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13404
13393: POP
// bc_type := b_armoury ; 29 :
13394: LD_ADDR_OWVAR 42
13398: PUSH
13399: LD_INT 4
13401: ST_TO_ADDR
13402: GO 13519
13404: LD_INT 29
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13423
13412: POP
// bc_type := b_barracks ; 30 :
13413: LD_ADDR_OWVAR 42
13417: PUSH
13418: LD_INT 5
13420: ST_TO_ADDR
13421: GO 13519
13423: LD_INT 30
13425: DOUBLE
13426: EQUAL
13427: IFTRUE 13431
13429: GO 13442
13431: POP
// bc_type := b_solar_power ; 31 :
13432: LD_ADDR_OWVAR 42
13436: PUSH
13437: LD_INT 27
13439: ST_TO_ADDR
13440: GO 13519
13442: LD_INT 31
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13461
13450: POP
// bc_type := b_oil_power ; 32 :
13451: LD_ADDR_OWVAR 42
13455: PUSH
13456: LD_INT 26
13458: ST_TO_ADDR
13459: GO 13519
13461: LD_INT 32
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13469
13467: GO 13480
13469: POP
// bc_type := b_siberite_power ; 33 :
13470: LD_ADDR_OWVAR 42
13474: PUSH
13475: LD_INT 28
13477: ST_TO_ADDR
13478: GO 13519
13480: LD_INT 33
13482: DOUBLE
13483: EQUAL
13484: IFTRUE 13488
13486: GO 13499
13488: POP
// bc_type := b_oil_mine ; 34 :
13489: LD_ADDR_OWVAR 42
13493: PUSH
13494: LD_INT 29
13496: ST_TO_ADDR
13497: GO 13519
13499: LD_INT 34
13501: DOUBLE
13502: EQUAL
13503: IFTRUE 13507
13505: GO 13518
13507: POP
// bc_type := b_siberite_mine ; end ;
13508: LD_ADDR_OWVAR 42
13512: PUSH
13513: LD_INT 30
13515: ST_TO_ADDR
13516: GO 13519
13518: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13519: LD_ADDR_VAR 0 8
13523: PUSH
13524: LD_VAR 0 5
13528: PPUSH
13529: LD_VAR 0 6
13533: PPUSH
13534: LD_VAR 0 3
13538: PPUSH
13539: CALL_OW 47
13543: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13544: LD_OWVAR 42
13548: PUSH
13549: LD_INT 32
13551: PUSH
13552: LD_INT 33
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: IN
13559: IFFALSE 13575
// PlaceWeaponTurret ( b , weapon ) ;
13561: LD_VAR 0 8
13565: PPUSH
13566: LD_VAR 0 4
13570: PPUSH
13571: CALL_OW 431
// end ;
13575: LD_VAR 0 7
13579: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13580: LD_INT 0
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13586: LD_ADDR_VAR 0 4
13590: PUSH
13591: LD_INT 22
13593: PUSH
13594: LD_OWVAR 2
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: LD_INT 30
13608: PUSH
13609: LD_INT 0
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 30
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: ST_TO_ADDR
// if not tmp then
13640: LD_VAR 0 4
13644: NOT
13645: IFFALSE 13649
// exit ;
13647: GO 13708
// for i in tmp do
13649: LD_ADDR_VAR 0 2
13653: PUSH
13654: LD_VAR 0 4
13658: PUSH
13659: FOR_IN
13660: IFFALSE 13706
// for j = 1 to 3 do
13662: LD_ADDR_VAR 0 3
13666: PUSH
13667: DOUBLE
13668: LD_INT 1
13670: DEC
13671: ST_TO_ADDR
13672: LD_INT 3
13674: PUSH
13675: FOR_TO
13676: IFFALSE 13702
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: CALL_OW 274
13687: PPUSH
13688: LD_VAR 0 3
13692: PPUSH
13693: LD_INT 99999
13695: PPUSH
13696: CALL_OW 277
13700: GO 13675
13702: POP
13703: POP
13704: GO 13659
13706: POP
13707: POP
// end ;
13708: LD_VAR 0 1
13712: RET
// export function hHackSetLevel10 ; var i , j ; begin
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
13717: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 1
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: PUSH
13738: FOR_IN
13739: IFFALSE 13791
// if IsSelected ( i ) then
13741: LD_VAR 0 2
13745: PPUSH
13746: CALL_OW 306
13750: IFFALSE 13789
// begin for j := 1 to 4 do
13752: LD_ADDR_VAR 0 3
13756: PUSH
13757: DOUBLE
13758: LD_INT 1
13760: DEC
13761: ST_TO_ADDR
13762: LD_INT 4
13764: PUSH
13765: FOR_TO
13766: IFFALSE 13787
// SetSkill ( i , j , 10 ) ;
13768: LD_VAR 0 2
13772: PPUSH
13773: LD_VAR 0 3
13777: PPUSH
13778: LD_INT 10
13780: PPUSH
13781: CALL_OW 237
13785: GO 13765
13787: POP
13788: POP
// end ;
13789: GO 13738
13791: POP
13792: POP
// end ;
13793: LD_VAR 0 1
13797: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13798: LD_INT 0
13800: PPUSH
13801: PPUSH
13802: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13803: LD_ADDR_VAR 0 2
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_OWVAR 2
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: PUSH
13839: FOR_IN
13840: IFFALSE 13881
// begin for j := 1 to 4 do
13842: LD_ADDR_VAR 0 3
13846: PUSH
13847: DOUBLE
13848: LD_INT 1
13850: DEC
13851: ST_TO_ADDR
13852: LD_INT 4
13854: PUSH
13855: FOR_TO
13856: IFFALSE 13877
// SetSkill ( i , j , 10 ) ;
13858: LD_VAR 0 2
13862: PPUSH
13863: LD_VAR 0 3
13867: PPUSH
13868: LD_INT 10
13870: PPUSH
13871: CALL_OW 237
13875: GO 13855
13877: POP
13878: POP
// end ;
13879: GO 13839
13881: POP
13882: POP
// end ;
13883: LD_VAR 0 1
13887: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13888: LD_INT 0
13890: PPUSH
// uc_side := your_side ;
13891: LD_ADDR_OWVAR 20
13895: PUSH
13896: LD_OWVAR 2
13900: ST_TO_ADDR
// uc_nation := nation ;
13901: LD_ADDR_OWVAR 21
13905: PUSH
13906: LD_VAR 0 1
13910: ST_TO_ADDR
// InitHc ;
13911: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13915: LD_INT 0
13917: PPUSH
13918: LD_VAR 0 2
13922: PPUSH
13923: LD_VAR 0 3
13927: PPUSH
13928: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13932: LD_VAR 0 4
13936: PPUSH
13937: LD_VAR 0 5
13941: PPUSH
13942: CALL_OW 428
13946: PUSH
13947: LD_INT 0
13949: EQUAL
13950: IFFALSE 13974
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13952: CALL_OW 44
13956: PPUSH
13957: LD_VAR 0 4
13961: PPUSH
13962: LD_VAR 0 5
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 48
// end ;
13974: LD_VAR 0 6
13978: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13979: LD_INT 0
13981: PPUSH
13982: PPUSH
// uc_side := your_side ;
13983: LD_ADDR_OWVAR 20
13987: PUSH
13988: LD_OWVAR 2
13992: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 1
14000: PUSH
14001: LD_INT 2
14003: PUSH
14004: LD_INT 3
14006: PUSH
14007: LD_INT 4
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: IN
14020: IFFALSE 14032
// uc_nation := nation_american else
14022: LD_ADDR_OWVAR 21
14026: PUSH
14027: LD_INT 1
14029: ST_TO_ADDR
14030: GO 14075
// if chassis in [ 11 , 12 , 13 , 14 ] then
14032: LD_VAR 0 1
14036: PUSH
14037: LD_INT 11
14039: PUSH
14040: LD_INT 12
14042: PUSH
14043: LD_INT 13
14045: PUSH
14046: LD_INT 14
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: IN
14055: IFFALSE 14067
// uc_nation := nation_arabian else
14057: LD_ADDR_OWVAR 21
14061: PUSH
14062: LD_INT 2
14064: ST_TO_ADDR
14065: GO 14075
// uc_nation := nation_russian ;
14067: LD_ADDR_OWVAR 21
14071: PUSH
14072: LD_INT 3
14074: ST_TO_ADDR
// vc_chassis := chassis ;
14075: LD_ADDR_OWVAR 37
14079: PUSH
14080: LD_VAR 0 1
14084: ST_TO_ADDR
// vc_engine := engine ;
14085: LD_ADDR_OWVAR 39
14089: PUSH
14090: LD_VAR 0 2
14094: ST_TO_ADDR
// vc_control := control ;
14095: LD_ADDR_OWVAR 38
14099: PUSH
14100: LD_VAR 0 3
14104: ST_TO_ADDR
// vc_weapon := weapon ;
14105: LD_ADDR_OWVAR 40
14109: PUSH
14110: LD_VAR 0 4
14114: ST_TO_ADDR
// un := CreateVehicle ;
14115: LD_ADDR_VAR 0 8
14119: PUSH
14120: CALL_OW 45
14124: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14125: LD_VAR 0 8
14129: PPUSH
14130: LD_INT 0
14132: PPUSH
14133: LD_INT 5
14135: PPUSH
14136: CALL_OW 12
14140: PPUSH
14141: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14145: LD_VAR 0 8
14149: PPUSH
14150: LD_VAR 0 5
14154: PPUSH
14155: LD_VAR 0 6
14159: PPUSH
14160: LD_INT 1
14162: PPUSH
14163: CALL_OW 48
// end ;
14167: LD_VAR 0 7
14171: RET
// export hInvincible ; every 1 do
14172: GO 14174
14174: DISABLE
// hInvincible := [ ] ;
14175: LD_ADDR_EXP 61
14179: PUSH
14180: EMPTY
14181: ST_TO_ADDR
14182: END
// every 10 do var i ;
14183: GO 14185
14185: DISABLE
14186: LD_INT 0
14188: PPUSH
// begin enable ;
14189: ENABLE
// if not hInvincible then
14190: LD_EXP 61
14194: NOT
14195: IFFALSE 14199
// exit ;
14197: GO 14243
// for i in hInvincible do
14199: LD_ADDR_VAR 0 1
14203: PUSH
14204: LD_EXP 61
14208: PUSH
14209: FOR_IN
14210: IFFALSE 14241
// if GetLives ( i ) < 1000 then
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 256
14221: PUSH
14222: LD_INT 1000
14224: LESS
14225: IFFALSE 14239
// SetLives ( i , 1000 ) ;
14227: LD_VAR 0 1
14231: PPUSH
14232: LD_INT 1000
14234: PPUSH
14235: CALL_OW 234
14239: GO 14209
14241: POP
14242: POP
// end ;
14243: PPOPN 1
14245: END
// export function hHackInvincible ; var i ; begin
14246: LD_INT 0
14248: PPUSH
14249: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14250: LD_ADDR_VAR 0 2
14254: PUSH
14255: LD_INT 2
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: PUSH
14288: FOR_IN
14289: IFFALSE 14350
// if IsSelected ( i ) then
14291: LD_VAR 0 2
14295: PPUSH
14296: CALL_OW 306
14300: IFFALSE 14348
// begin if i in hInvincible then
14302: LD_VAR 0 2
14306: PUSH
14307: LD_EXP 61
14311: IN
14312: IFFALSE 14332
// hInvincible := hInvincible diff i else
14314: LD_ADDR_EXP 61
14318: PUSH
14319: LD_EXP 61
14323: PUSH
14324: LD_VAR 0 2
14328: DIFF
14329: ST_TO_ADDR
14330: GO 14348
// hInvincible := hInvincible union i ;
14332: LD_ADDR_EXP 61
14336: PUSH
14337: LD_EXP 61
14341: PUSH
14342: LD_VAR 0 2
14346: UNION
14347: ST_TO_ADDR
// end ;
14348: GO 14288
14350: POP
14351: POP
// end ;
14352: LD_VAR 0 1
14356: RET
// export function hHackInvisible ; var i , j ; begin
14357: LD_INT 0
14359: PPUSH
14360: PPUSH
14361: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14362: LD_ADDR_VAR 0 2
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PPUSH
14377: CALL_OW 69
14381: PUSH
14382: FOR_IN
14383: IFFALSE 14407
// if IsSelected ( i ) then
14385: LD_VAR 0 2
14389: PPUSH
14390: CALL_OW 306
14394: IFFALSE 14405
// ComForceInvisible ( i ) ;
14396: LD_VAR 0 2
14400: PPUSH
14401: CALL_OW 496
14405: GO 14382
14407: POP
14408: POP
// end ;
14409: LD_VAR 0 1
14413: RET
// export function hHackChangeYourSide ; begin
14414: LD_INT 0
14416: PPUSH
// if your_side = 8 then
14417: LD_OWVAR 2
14421: PUSH
14422: LD_INT 8
14424: EQUAL
14425: IFFALSE 14437
// your_side := 0 else
14427: LD_ADDR_OWVAR 2
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
14435: GO 14451
// your_side := your_side + 1 ;
14437: LD_ADDR_OWVAR 2
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: LD_INT 1
14449: PLUS
14450: ST_TO_ADDR
// end ;
14451: LD_VAR 0 1
14455: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14456: LD_INT 0
14458: PPUSH
14459: PPUSH
14460: PPUSH
// for i in all_units do
14461: LD_ADDR_VAR 0 2
14465: PUSH
14466: LD_OWVAR 3
14470: PUSH
14471: FOR_IN
14472: IFFALSE 14550
// if IsSelected ( i ) then
14474: LD_VAR 0 2
14478: PPUSH
14479: CALL_OW 306
14483: IFFALSE 14548
// begin j := GetSide ( i ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_VAR 0 2
14494: PPUSH
14495: CALL_OW 255
14499: ST_TO_ADDR
// if j = 8 then
14500: LD_VAR 0 3
14504: PUSH
14505: LD_INT 8
14507: EQUAL
14508: IFFALSE 14520
// j := 0 else
14510: LD_ADDR_VAR 0 3
14514: PUSH
14515: LD_INT 0
14517: ST_TO_ADDR
14518: GO 14534
// j := j + 1 ;
14520: LD_ADDR_VAR 0 3
14524: PUSH
14525: LD_VAR 0 3
14529: PUSH
14530: LD_INT 1
14532: PLUS
14533: ST_TO_ADDR
// SetSide ( i , j ) ;
14534: LD_VAR 0 2
14538: PPUSH
14539: LD_VAR 0 3
14543: PPUSH
14544: CALL_OW 235
// end ;
14548: GO 14471
14550: POP
14551: POP
// end ;
14552: LD_VAR 0 1
14556: RET
// export function hHackFog ; begin
14557: LD_INT 0
14559: PPUSH
// FogOff ( true ) ;
14560: LD_INT 1
14562: PPUSH
14563: CALL_OW 344
// end ;
14567: LD_VAR 0 1
14571: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14572: LD_INT 0
14574: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14575: LD_VAR 0 1
14579: PPUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: LD_INT 1
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 483
// CenterOnXY ( x , y ) ;
14600: LD_VAR 0 2
14604: PPUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: CALL_OW 84
// end ;
14614: LD_VAR 0 4
14618: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14619: LD_INT 0
14621: PPUSH
14622: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14623: LD_VAR 0 1
14627: NOT
14628: PUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: CALL_OW 488
14643: NOT
14644: OR
14645: PUSH
14646: LD_VAR 0 1
14650: PPUSH
14651: CALL_OW 266
14655: PUSH
14656: LD_INT 3
14658: NONEQUAL
14659: PUSH
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 247
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: NOT
14674: AND
14675: OR
14676: IFFALSE 14680
// exit ;
14678: GO 14829
// if GetType ( factory ) = unit_human then
14680: LD_VAR 0 1
14684: PPUSH
14685: CALL_OW 247
14689: PUSH
14690: LD_INT 1
14692: EQUAL
14693: IFFALSE 14710
// factory := IsInUnit ( factory ) ;
14695: LD_ADDR_VAR 0 1
14699: PUSH
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 310
14709: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 266
14719: PUSH
14720: LD_INT 3
14722: NONEQUAL
14723: IFFALSE 14727
// exit ;
14725: GO 14829
// if HexInfo ( x , y ) = factory then
14727: LD_VAR 0 2
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: CALL_OW 428
14741: PUSH
14742: LD_VAR 0 1
14746: EQUAL
14747: IFFALSE 14774
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
14749: LD_ADDR_EXP 62
14753: PUSH
14754: LD_EXP 62
14758: PPUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: LD_INT 0
14766: PPUSH
14767: CALL_OW 1
14771: ST_TO_ADDR
14772: GO 14825
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
14774: LD_ADDR_EXP 62
14778: PUSH
14779: LD_EXP 62
14783: PPUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 255
14798: PUSH
14799: LD_VAR 0 1
14803: PUSH
14804: LD_VAR 0 2
14808: PUSH
14809: LD_VAR 0 3
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 1
14824: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14825: CALL 14834 0 0
// end ;
14829: LD_VAR 0 4
14833: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
14834: LD_INT 0
14836: PPUSH
14837: PPUSH
14838: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
14839: LD_STRING resetFactoryWaypoint();
14841: PPUSH
14842: CALL_OW 559
// if factoryWaypoints then
14846: LD_EXP 62
14850: IFFALSE 14976
// begin list := PrepareArray ( factoryWaypoints ) ;
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_EXP 62
14861: PPUSH
14862: CALL 61445 0 1
14866: ST_TO_ADDR
// for i := 1 to list do
14867: LD_ADDR_VAR 0 2
14871: PUSH
14872: DOUBLE
14873: LD_INT 1
14875: DEC
14876: ST_TO_ADDR
14877: LD_VAR 0 3
14881: PUSH
14882: FOR_TO
14883: IFFALSE 14974
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
14885: LD_STRING setFactoryWaypointXY(
14887: PUSH
14888: LD_VAR 0 3
14892: PUSH
14893: LD_VAR 0 2
14897: ARRAY
14898: PUSH
14899: LD_INT 1
14901: ARRAY
14902: STR
14903: PUSH
14904: LD_STRING ,
14906: STR
14907: PUSH
14908: LD_VAR 0 3
14912: PUSH
14913: LD_VAR 0 2
14917: ARRAY
14918: PUSH
14919: LD_INT 2
14921: ARRAY
14922: STR
14923: PUSH
14924: LD_STRING ,
14926: STR
14927: PUSH
14928: LD_VAR 0 3
14932: PUSH
14933: LD_VAR 0 2
14937: ARRAY
14938: PUSH
14939: LD_INT 3
14941: ARRAY
14942: STR
14943: PUSH
14944: LD_STRING ,
14946: STR
14947: PUSH
14948: LD_VAR 0 3
14952: PUSH
14953: LD_VAR 0 2
14957: ARRAY
14958: PUSH
14959: LD_INT 4
14961: ARRAY
14962: STR
14963: PUSH
14964: LD_STRING )
14966: STR
14967: PPUSH
14968: CALL_OW 559
14972: GO 14882
14974: POP
14975: POP
// end ; end ;
14976: LD_VAR 0 1
14980: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
14981: LD_INT 0
14983: PPUSH
// if HexInfo ( x , y ) = warehouse then
14984: LD_VAR 0 2
14988: PPUSH
14989: LD_VAR 0 3
14993: PPUSH
14994: CALL_OW 428
14998: PUSH
14999: LD_VAR 0 1
15003: EQUAL
15004: IFFALSE 15031
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15006: LD_ADDR_EXP 63
15010: PUSH
15011: LD_EXP 63
15015: PPUSH
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_INT 0
15023: PPUSH
15024: CALL_OW 1
15028: ST_TO_ADDR
15029: GO 15082
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15031: LD_ADDR_EXP 63
15035: PUSH
15036: LD_EXP 63
15040: PPUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: CALL_OW 255
15055: PUSH
15056: LD_VAR 0 1
15060: PUSH
15061: LD_VAR 0 2
15065: PUSH
15066: LD_VAR 0 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL_OW 1
15081: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15082: CALL 15091 0 0
// end ;
15086: LD_VAR 0 4
15090: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
15095: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15096: LD_STRING resetWarehouseGatheringPoints();
15098: PPUSH
15099: CALL_OW 559
// if warehouseGatheringPoints then
15103: LD_EXP 63
15107: IFFALSE 15233
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_EXP 63
15118: PPUSH
15119: CALL 61445 0 1
15123: ST_TO_ADDR
// for i := 1 to list do
15124: LD_ADDR_VAR 0 2
15128: PUSH
15129: DOUBLE
15130: LD_INT 1
15132: DEC
15133: ST_TO_ADDR
15134: LD_VAR 0 3
15138: PUSH
15139: FOR_TO
15140: IFFALSE 15231
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15142: LD_STRING setWarehouseGatheringPointXY(
15144: PUSH
15145: LD_VAR 0 3
15149: PUSH
15150: LD_VAR 0 2
15154: ARRAY
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: STR
15160: PUSH
15161: LD_STRING ,
15163: STR
15164: PUSH
15165: LD_VAR 0 3
15169: PUSH
15170: LD_VAR 0 2
15174: ARRAY
15175: PUSH
15176: LD_INT 2
15178: ARRAY
15179: STR
15180: PUSH
15181: LD_STRING ,
15183: STR
15184: PUSH
15185: LD_VAR 0 3
15189: PUSH
15190: LD_VAR 0 2
15194: ARRAY
15195: PUSH
15196: LD_INT 3
15198: ARRAY
15199: STR
15200: PUSH
15201: LD_STRING ,
15203: STR
15204: PUSH
15205: LD_VAR 0 3
15209: PUSH
15210: LD_VAR 0 2
15214: ARRAY
15215: PUSH
15216: LD_INT 4
15218: ARRAY
15219: STR
15220: PUSH
15221: LD_STRING )
15223: STR
15224: PPUSH
15225: CALL_OW 559
15229: GO 15139
15231: POP
15232: POP
// end ; end ;
15233: LD_VAR 0 1
15237: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15238: LD_EXP 63
15242: IFFALSE 15927
15244: GO 15246
15246: DISABLE
15247: LD_INT 0
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
// begin enable ;
15258: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15259: LD_ADDR_VAR 0 3
15263: PUSH
15264: LD_EXP 63
15268: PPUSH
15269: CALL 61445 0 1
15273: ST_TO_ADDR
// if not list then
15274: LD_VAR 0 3
15278: NOT
15279: IFFALSE 15283
// exit ;
15281: GO 15927
// for i := 1 to list do
15283: LD_ADDR_VAR 0 1
15287: PUSH
15288: DOUBLE
15289: LD_INT 1
15291: DEC
15292: ST_TO_ADDR
15293: LD_VAR 0 3
15297: PUSH
15298: FOR_TO
15299: IFFALSE 15925
// begin depot := list [ i ] [ 2 ] ;
15301: LD_ADDR_VAR 0 8
15305: PUSH
15306: LD_VAR 0 3
15310: PUSH
15311: LD_VAR 0 1
15315: ARRAY
15316: PUSH
15317: LD_INT 2
15319: ARRAY
15320: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15321: LD_ADDR_VAR 0 5
15325: PUSH
15326: LD_VAR 0 3
15330: PUSH
15331: LD_VAR 0 1
15335: ARRAY
15336: PUSH
15337: LD_INT 1
15339: ARRAY
15340: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15341: LD_VAR 0 8
15345: PPUSH
15346: CALL_OW 301
15350: PUSH
15351: LD_VAR 0 5
15355: PUSH
15356: LD_VAR 0 8
15360: PPUSH
15361: CALL_OW 255
15365: NONEQUAL
15366: OR
15367: IFFALSE 15396
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15369: LD_ADDR_EXP 63
15373: PUSH
15374: LD_EXP 63
15378: PPUSH
15379: LD_VAR 0 8
15383: PPUSH
15384: LD_INT 0
15386: PPUSH
15387: CALL_OW 1
15391: ST_TO_ADDR
// exit ;
15392: POP
15393: POP
15394: GO 15927
// end ; x := list [ i ] [ 3 ] ;
15396: LD_ADDR_VAR 0 6
15400: PUSH
15401: LD_VAR 0 3
15405: PUSH
15406: LD_VAR 0 1
15410: ARRAY
15411: PUSH
15412: LD_INT 3
15414: ARRAY
15415: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15416: LD_ADDR_VAR 0 7
15420: PUSH
15421: LD_VAR 0 3
15425: PUSH
15426: LD_VAR 0 1
15430: ARRAY
15431: PUSH
15432: LD_INT 4
15434: ARRAY
15435: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15436: LD_ADDR_VAR 0 9
15440: PUSH
15441: LD_VAR 0 6
15445: PPUSH
15446: LD_VAR 0 7
15450: PPUSH
15451: LD_INT 16
15453: PPUSH
15454: CALL 60033 0 3
15458: ST_TO_ADDR
// if not cratesNearbyPoint then
15459: LD_VAR 0 9
15463: NOT
15464: IFFALSE 15470
// exit ;
15466: POP
15467: POP
15468: GO 15927
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15470: LD_ADDR_VAR 0 4
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_VAR 0 5
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 60
15492: PUSH
15493: EMPTY
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 91
15502: PUSH
15503: LD_VAR 0 8
15507: PUSH
15508: LD_INT 6
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 25
15531: PUSH
15532: LD_INT 16
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 69
15554: PUSH
15555: LD_VAR 0 8
15559: PPUSH
15560: CALL_OW 313
15564: PPUSH
15565: LD_INT 3
15567: PUSH
15568: LD_INT 60
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 2
15580: PUSH
15581: LD_INT 25
15583: PUSH
15584: LD_INT 2
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 25
15593: PUSH
15594: LD_INT 16
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 72
15614: UNION
15615: ST_TO_ADDR
// if tmp then
15616: LD_VAR 0 4
15620: IFFALSE 15700
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15622: LD_ADDR_VAR 0 4
15626: PUSH
15627: LD_VAR 0 4
15631: PPUSH
15632: LD_INT 3
15634: PPUSH
15635: CALL 58002 0 2
15639: ST_TO_ADDR
// for j in tmp do
15640: LD_ADDR_VAR 0 2
15644: PUSH
15645: LD_VAR 0 4
15649: PUSH
15650: FOR_IN
15651: IFFALSE 15694
// begin if IsInUnit ( j ) then
15653: LD_VAR 0 2
15657: PPUSH
15658: CALL_OW 310
15662: IFFALSE 15673
// ComExit ( j ) ;
15664: LD_VAR 0 2
15668: PPUSH
15669: CALL 58085 0 1
// AddComCollect ( j , x , y ) ;
15673: LD_VAR 0 2
15677: PPUSH
15678: LD_VAR 0 6
15682: PPUSH
15683: LD_VAR 0 7
15687: PPUSH
15688: CALL_OW 177
// end ;
15692: GO 15650
15694: POP
15695: POP
// exit ;
15696: POP
15697: POP
15698: GO 15927
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15700: LD_ADDR_VAR 0 4
15704: PUSH
15705: LD_INT 22
15707: PUSH
15708: LD_VAR 0 5
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 91
15719: PUSH
15720: LD_VAR 0 8
15724: PUSH
15725: LD_INT 8
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 2
15735: PUSH
15736: LD_INT 34
15738: PUSH
15739: LD_INT 12
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 34
15748: PUSH
15749: LD_INT 51
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 34
15758: PUSH
15759: LD_INT 32
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 34
15768: PUSH
15769: LD_INT 89
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 69
15792: ST_TO_ADDR
// if tmp then
15793: LD_VAR 0 4
15797: IFFALSE 15923
// begin for j in tmp do
15799: LD_ADDR_VAR 0 2
15803: PUSH
15804: LD_VAR 0 4
15808: PUSH
15809: FOR_IN
15810: IFFALSE 15921
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 262
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: PUSH
15826: LD_VAR 0 2
15830: PPUSH
15831: CALL_OW 261
15835: PUSH
15836: LD_INT 20
15838: GREATER
15839: OR
15840: PUSH
15841: LD_VAR 0 2
15845: PPUSH
15846: CALL_OW 314
15850: NOT
15851: AND
15852: PUSH
15853: LD_VAR 0 2
15857: PPUSH
15858: CALL_OW 263
15862: PUSH
15863: LD_INT 1
15865: NONEQUAL
15866: PUSH
15867: LD_VAR 0 2
15871: PPUSH
15872: CALL_OW 311
15876: OR
15877: AND
15878: IFFALSE 15919
// begin ComCollect ( j , x , y ) ;
15880: LD_VAR 0 2
15884: PPUSH
15885: LD_VAR 0 6
15889: PPUSH
15890: LD_VAR 0 7
15894: PPUSH
15895: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
15899: LD_VAR 0 2
15903: PPUSH
15904: LD_VAR 0 8
15908: PPUSH
15909: CALL_OW 172
// exit ;
15913: POP
15914: POP
15915: POP
15916: POP
15917: GO 15927
// end ;
15919: GO 15809
15921: POP
15922: POP
// end ; end ;
15923: GO 15298
15925: POP
15926: POP
// end ; end_of_file
15927: PPOPN 9
15929: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15930: LD_INT 0
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 264
15945: PUSH
15946: LD_INT 91
15948: EQUAL
15949: IFFALSE 16021
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15951: LD_INT 68
15953: PPUSH
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 255
15963: PPUSH
15964: CALL_OW 321
15968: PUSH
15969: LD_INT 2
15971: EQUAL
15972: IFFALSE 15984
// eff := 70 else
15974: LD_ADDR_VAR 0 4
15978: PUSH
15979: LD_INT 70
15981: ST_TO_ADDR
15982: GO 15992
// eff := 30 ;
15984: LD_ADDR_VAR 0 4
15988: PUSH
15989: LD_INT 30
15991: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 250
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 251
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 495
// end ; end ;
16021: LD_VAR 0 2
16025: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16026: LD_INT 0
16028: PPUSH
// end ;
16029: LD_VAR 0 4
16033: RET
// export function SOS_Command ( cmd ) ; begin
16034: LD_INT 0
16036: PPUSH
// end ;
16037: LD_VAR 0 2
16041: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16042: LD_INT 0
16044: PPUSH
// end ;
16045: LD_VAR 0 6
16049: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
16050: LD_INT 0
16052: PPUSH
16053: PPUSH
// if not vehicle or not factory then
16054: LD_VAR 0 1
16058: NOT
16059: PUSH
16060: LD_VAR 0 2
16064: NOT
16065: OR
16066: IFFALSE 16070
// exit ;
16068: GO 16301
// if factoryWaypoints >= factory then
16070: LD_EXP 62
16074: PUSH
16075: LD_VAR 0 2
16079: GREATEREQUAL
16080: IFFALSE 16301
// if factoryWaypoints [ factory ] then
16082: LD_EXP 62
16086: PUSH
16087: LD_VAR 0 2
16091: ARRAY
16092: IFFALSE 16301
// begin if GetControl ( vehicle ) = control_manual then
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 263
16103: PUSH
16104: LD_INT 1
16106: EQUAL
16107: IFFALSE 16188
// begin driver := IsDrivenBy ( vehicle ) ;
16109: LD_ADDR_VAR 0 4
16113: PUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 311
16123: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16124: LD_VAR 0 4
16128: PPUSH
16129: LD_EXP 62
16133: PUSH
16134: LD_VAR 0 2
16138: ARRAY
16139: PUSH
16140: LD_INT 3
16142: ARRAY
16143: PPUSH
16144: LD_EXP 62
16148: PUSH
16149: LD_VAR 0 2
16153: ARRAY
16154: PUSH
16155: LD_INT 4
16157: ARRAY
16158: PPUSH
16159: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16163: LD_VAR 0 4
16167: PPUSH
16168: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16172: LD_VAR 0 4
16176: PPUSH
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 180
// end else
16186: GO 16301
// if GetControl ( vehicle ) = control_remote then
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL_OW 263
16197: PUSH
16198: LD_INT 2
16200: EQUAL
16201: IFFALSE 16262
// begin wait ( 0 0$2 ) ;
16203: LD_INT 70
16205: PPUSH
16206: CALL_OW 67
// if Connect ( vehicle ) then
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL 28325 0 1
16219: IFFALSE 16260
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16221: LD_VAR 0 1
16225: PPUSH
16226: LD_EXP 62
16230: PUSH
16231: LD_VAR 0 2
16235: ARRAY
16236: PUSH
16237: LD_INT 3
16239: ARRAY
16240: PPUSH
16241: LD_EXP 62
16245: PUSH
16246: LD_VAR 0 2
16250: ARRAY
16251: PUSH
16252: LD_INT 4
16254: ARRAY
16255: PPUSH
16256: CALL_OW 171
// end else
16260: GO 16301
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
16262: LD_VAR 0 1
16266: PPUSH
16267: LD_EXP 62
16271: PUSH
16272: LD_VAR 0 2
16276: ARRAY
16277: PUSH
16278: LD_INT 3
16280: ARRAY
16281: PPUSH
16282: LD_EXP 62
16286: PUSH
16287: LD_VAR 0 2
16291: ARRAY
16292: PUSH
16293: LD_INT 4
16295: ARRAY
16296: PPUSH
16297: CALL_OW 171
// end ; end ;
16301: LD_VAR 0 3
16305: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16306: LD_INT 0
16308: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16309: LD_VAR 0 1
16313: PUSH
16314: LD_INT 250
16316: EQUAL
16317: PUSH
16318: LD_VAR 0 2
16322: PPUSH
16323: CALL_OW 264
16327: PUSH
16328: LD_INT 81
16330: EQUAL
16331: AND
16332: IFFALSE 16353
// MinerPlaceMine ( unit , x , y ) ;
16334: LD_VAR 0 2
16338: PPUSH
16339: LD_VAR 0 4
16343: PPUSH
16344: LD_VAR 0 5
16348: PPUSH
16349: CALL 18738 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16353: LD_VAR 0 1
16357: PUSH
16358: LD_INT 251
16360: EQUAL
16361: PUSH
16362: LD_VAR 0 2
16366: PPUSH
16367: CALL_OW 264
16371: PUSH
16372: LD_INT 81
16374: EQUAL
16375: AND
16376: IFFALSE 16397
// MinerDetonateMine ( unit , x , y ) ;
16378: LD_VAR 0 2
16382: PPUSH
16383: LD_VAR 0 4
16387: PPUSH
16388: LD_VAR 0 5
16392: PPUSH
16393: CALL 19013 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16397: LD_VAR 0 1
16401: PUSH
16402: LD_INT 252
16404: EQUAL
16405: PUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: CALL_OW 264
16415: PUSH
16416: LD_INT 81
16418: EQUAL
16419: AND
16420: IFFALSE 16441
// MinerCreateMinefield ( unit , x , y ) ;
16422: LD_VAR 0 2
16426: PPUSH
16427: LD_VAR 0 4
16431: PPUSH
16432: LD_VAR 0 5
16436: PPUSH
16437: CALL 19430 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16441: LD_VAR 0 1
16445: PUSH
16446: LD_INT 253
16448: EQUAL
16449: PUSH
16450: LD_VAR 0 2
16454: PPUSH
16455: CALL_OW 257
16459: PUSH
16460: LD_INT 5
16462: EQUAL
16463: AND
16464: IFFALSE 16485
// ComBinocular ( unit , x , y ) ;
16466: LD_VAR 0 2
16470: PPUSH
16471: LD_VAR 0 4
16475: PPUSH
16476: LD_VAR 0 5
16480: PPUSH
16481: CALL 19799 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16485: LD_VAR 0 1
16489: PUSH
16490: LD_INT 254
16492: EQUAL
16493: PUSH
16494: LD_VAR 0 2
16498: PPUSH
16499: CALL_OW 264
16503: PUSH
16504: LD_INT 99
16506: EQUAL
16507: AND
16508: PUSH
16509: LD_VAR 0 3
16513: PPUSH
16514: CALL_OW 263
16518: PUSH
16519: LD_INT 3
16521: EQUAL
16522: AND
16523: IFFALSE 16539
// HackDestroyVehicle ( unit , selectedUnit ) ;
16525: LD_VAR 0 2
16529: PPUSH
16530: LD_VAR 0 3
16534: PPUSH
16535: CALL 18102 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16539: LD_VAR 0 1
16543: PUSH
16544: LD_INT 255
16546: EQUAL
16547: PUSH
16548: LD_VAR 0 2
16552: PPUSH
16553: CALL_OW 264
16557: PUSH
16558: LD_INT 14
16560: PUSH
16561: LD_INT 53
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: IN
16568: AND
16569: PUSH
16570: LD_VAR 0 4
16574: PPUSH
16575: LD_VAR 0 5
16579: PPUSH
16580: CALL_OW 488
16584: AND
16585: IFFALSE 16609
// CutTreeXYR ( unit , x , y , 12 ) ;
16587: LD_VAR 0 2
16591: PPUSH
16592: LD_VAR 0 4
16596: PPUSH
16597: LD_VAR 0 5
16601: PPUSH
16602: LD_INT 12
16604: PPUSH
16605: CALL 16672 0 4
// if cmd = 256 then
16609: LD_VAR 0 1
16613: PUSH
16614: LD_INT 256
16616: EQUAL
16617: IFFALSE 16638
// SetFactoryWaypoint ( unit , x , y ) ;
16619: LD_VAR 0 2
16623: PPUSH
16624: LD_VAR 0 4
16628: PPUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL 14619 0 3
// if cmd = 257 then
16638: LD_VAR 0 1
16642: PUSH
16643: LD_INT 257
16645: EQUAL
16646: IFFALSE 16667
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16648: LD_VAR 0 2
16652: PPUSH
16653: LD_VAR 0 4
16657: PPUSH
16658: LD_VAR 0 5
16662: PPUSH
16663: CALL 14981 0 3
// end ;
16667: LD_VAR 0 6
16671: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16683: LD_VAR 0 1
16687: NOT
16688: PUSH
16689: LD_VAR 0 2
16693: PPUSH
16694: LD_VAR 0 3
16698: PPUSH
16699: CALL_OW 488
16703: NOT
16704: OR
16705: PUSH
16706: LD_VAR 0 4
16710: NOT
16711: OR
16712: IFFALSE 16716
// exit ;
16714: GO 17056
// list := [ ] ;
16716: LD_ADDR_VAR 0 13
16720: PUSH
16721: EMPTY
16722: ST_TO_ADDR
// if x - r < 0 then
16723: LD_VAR 0 2
16727: PUSH
16728: LD_VAR 0 4
16732: MINUS
16733: PUSH
16734: LD_INT 0
16736: LESS
16737: IFFALSE 16749
// min_x := 0 else
16739: LD_ADDR_VAR 0 7
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
16747: GO 16765
// min_x := x - r ;
16749: LD_ADDR_VAR 0 7
16753: PUSH
16754: LD_VAR 0 2
16758: PUSH
16759: LD_VAR 0 4
16763: MINUS
16764: ST_TO_ADDR
// if y - r < 0 then
16765: LD_VAR 0 3
16769: PUSH
16770: LD_VAR 0 4
16774: MINUS
16775: PUSH
16776: LD_INT 0
16778: LESS
16779: IFFALSE 16791
// min_y := 0 else
16781: LD_ADDR_VAR 0 8
16785: PUSH
16786: LD_INT 0
16788: ST_TO_ADDR
16789: GO 16807
// min_y := y - r ;
16791: LD_ADDR_VAR 0 8
16795: PUSH
16796: LD_VAR 0 3
16800: PUSH
16801: LD_VAR 0 4
16805: MINUS
16806: ST_TO_ADDR
// max_x := x + r ;
16807: LD_ADDR_VAR 0 9
16811: PUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_VAR 0 4
16821: PLUS
16822: ST_TO_ADDR
// max_y := y + r ;
16823: LD_ADDR_VAR 0 10
16827: PUSH
16828: LD_VAR 0 3
16832: PUSH
16833: LD_VAR 0 4
16837: PLUS
16838: ST_TO_ADDR
// for _x = min_x to max_x do
16839: LD_ADDR_VAR 0 11
16843: PUSH
16844: DOUBLE
16845: LD_VAR 0 7
16849: DEC
16850: ST_TO_ADDR
16851: LD_VAR 0 9
16855: PUSH
16856: FOR_TO
16857: IFFALSE 16974
// for _y = min_y to max_y do
16859: LD_ADDR_VAR 0 12
16863: PUSH
16864: DOUBLE
16865: LD_VAR 0 8
16869: DEC
16870: ST_TO_ADDR
16871: LD_VAR 0 10
16875: PUSH
16876: FOR_TO
16877: IFFALSE 16970
// begin if not ValidHex ( _x , _y ) then
16879: LD_VAR 0 11
16883: PPUSH
16884: LD_VAR 0 12
16888: PPUSH
16889: CALL_OW 488
16893: NOT
16894: IFFALSE 16898
// continue ;
16896: GO 16876
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16898: LD_VAR 0 11
16902: PPUSH
16903: LD_VAR 0 12
16907: PPUSH
16908: CALL_OW 351
16912: PUSH
16913: LD_VAR 0 11
16917: PPUSH
16918: LD_VAR 0 12
16922: PPUSH
16923: CALL_OW 554
16927: AND
16928: IFFALSE 16968
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16930: LD_ADDR_VAR 0 13
16934: PUSH
16935: LD_VAR 0 13
16939: PPUSH
16940: LD_VAR 0 13
16944: PUSH
16945: LD_INT 1
16947: PLUS
16948: PPUSH
16949: LD_VAR 0 11
16953: PUSH
16954: LD_VAR 0 12
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PPUSH
16963: CALL_OW 2
16967: ST_TO_ADDR
// end ;
16968: GO 16876
16970: POP
16971: POP
16972: GO 16856
16974: POP
16975: POP
// if not list then
16976: LD_VAR 0 13
16980: NOT
16981: IFFALSE 16985
// exit ;
16983: GO 17056
// for i in list do
16985: LD_ADDR_VAR 0 6
16989: PUSH
16990: LD_VAR 0 13
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17054
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16998: LD_VAR 0 1
17002: PPUSH
17003: LD_STRING M
17005: PUSH
17006: LD_VAR 0 6
17010: PUSH
17011: LD_INT 1
17013: ARRAY
17014: PUSH
17015: LD_VAR 0 6
17019: PUSH
17020: LD_INT 2
17022: ARRAY
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: LD_INT 0
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: PPUSH
17048: CALL_OW 447
17052: GO 16995
17054: POP
17055: POP
// end ;
17056: LD_VAR 0 5
17060: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17061: LD_EXP 65
17065: NOT
17066: IFFALSE 17116
17068: GO 17070
17070: DISABLE
// begin initHack := true ;
17071: LD_ADDR_EXP 65
17075: PUSH
17076: LD_INT 1
17078: ST_TO_ADDR
// hackTanks := [ ] ;
17079: LD_ADDR_EXP 66
17083: PUSH
17084: EMPTY
17085: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17086: LD_ADDR_EXP 67
17090: PUSH
17091: EMPTY
17092: ST_TO_ADDR
// hackLimit := 3 ;
17093: LD_ADDR_EXP 68
17097: PUSH
17098: LD_INT 3
17100: ST_TO_ADDR
// hackDist := 12 ;
17101: LD_ADDR_EXP 69
17105: PUSH
17106: LD_INT 12
17108: ST_TO_ADDR
// hackCounter := [ ] ;
17109: LD_ADDR_EXP 70
17113: PUSH
17114: EMPTY
17115: ST_TO_ADDR
// end ;
17116: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17117: LD_EXP 65
17121: PUSH
17122: LD_INT 34
17124: PUSH
17125: LD_INT 99
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PPUSH
17132: CALL_OW 69
17136: AND
17137: IFFALSE 17390
17139: GO 17141
17141: DISABLE
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
// begin enable ;
17146: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_INT 34
17154: PUSH
17155: LD_INT 99
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PPUSH
17162: CALL_OW 69
17166: PUSH
17167: FOR_IN
17168: IFFALSE 17388
// begin if not i in hackTanks then
17170: LD_VAR 0 1
17174: PUSH
17175: LD_EXP 66
17179: IN
17180: NOT
17181: IFFALSE 17264
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17183: LD_ADDR_EXP 66
17187: PUSH
17188: LD_EXP 66
17192: PPUSH
17193: LD_EXP 66
17197: PUSH
17198: LD_INT 1
17200: PLUS
17201: PPUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 1
17211: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17212: LD_ADDR_EXP 67
17216: PUSH
17217: LD_EXP 67
17221: PPUSH
17222: LD_EXP 67
17226: PUSH
17227: LD_INT 1
17229: PLUS
17230: PPUSH
17231: EMPTY
17232: PPUSH
17233: CALL_OW 1
17237: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17238: LD_ADDR_EXP 70
17242: PUSH
17243: LD_EXP 70
17247: PPUSH
17248: LD_EXP 70
17252: PUSH
17253: LD_INT 1
17255: PLUS
17256: PPUSH
17257: EMPTY
17258: PPUSH
17259: CALL_OW 1
17263: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 302
17273: NOT
17274: IFFALSE 17287
// begin HackUnlinkAll ( i ) ;
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL 17393 0 1
// continue ;
17285: GO 17167
// end ; HackCheckCapturedStatus ( i ) ;
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL 17836 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17296: LD_ADDR_VAR 0 2
17300: PUSH
17301: LD_INT 81
17303: PUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 255
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 33
17320: PUSH
17321: LD_INT 3
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 91
17330: PUSH
17331: LD_VAR 0 1
17335: PUSH
17336: LD_EXP 69
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 50
17348: PUSH
17349: EMPTY
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: ST_TO_ADDR
// if not tmp then
17363: LD_VAR 0 2
17367: NOT
17368: IFFALSE 17372
// continue ;
17370: GO 17167
// HackLink ( i , tmp ) ;
17372: LD_VAR 0 1
17376: PPUSH
17377: LD_VAR 0 2
17381: PPUSH
17382: CALL 17529 0 2
// end ;
17386: GO 17167
17388: POP
17389: POP
// end ;
17390: PPOPN 2
17392: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17393: LD_INT 0
17395: PPUSH
17396: PPUSH
17397: PPUSH
// if not hack in hackTanks then
17398: LD_VAR 0 1
17402: PUSH
17403: LD_EXP 66
17407: IN
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17524
// index := GetElementIndex ( hackTanks , hack ) ;
17413: LD_ADDR_VAR 0 4
17417: PUSH
17418: LD_EXP 66
17422: PPUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL 25141 0 2
17432: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17433: LD_EXP 67
17437: PUSH
17438: LD_VAR 0 4
17442: ARRAY
17443: IFFALSE 17524
// begin for i in hackTanksCaptured [ index ] do
17445: LD_ADDR_VAR 0 3
17449: PUSH
17450: LD_EXP 67
17454: PUSH
17455: LD_VAR 0 4
17459: ARRAY
17460: PUSH
17461: FOR_IN
17462: IFFALSE 17488
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17464: LD_VAR 0 3
17468: PUSH
17469: LD_INT 1
17471: ARRAY
17472: PPUSH
17473: LD_VAR 0 3
17477: PUSH
17478: LD_INT 2
17480: ARRAY
17481: PPUSH
17482: CALL_OW 235
17486: GO 17461
17488: POP
17489: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17490: LD_ADDR_EXP 67
17494: PUSH
17495: LD_EXP 67
17499: PPUSH
17500: LD_VAR 0 4
17504: PPUSH
17505: EMPTY
17506: PPUSH
17507: CALL_OW 1
17511: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17512: LD_VAR 0 1
17516: PPUSH
17517: LD_INT 0
17519: PPUSH
17520: CALL_OW 505
// end ; end ;
17524: LD_VAR 0 2
17528: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17529: LD_INT 0
17531: PPUSH
17532: PPUSH
17533: PPUSH
// if not hack in hackTanks or not vehicles then
17534: LD_VAR 0 1
17538: PUSH
17539: LD_EXP 66
17543: IN
17544: NOT
17545: PUSH
17546: LD_VAR 0 2
17550: NOT
17551: OR
17552: IFFALSE 17556
// exit ;
17554: GO 17831
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17556: LD_ADDR_VAR 0 2
17560: PUSH
17561: LD_VAR 0 1
17565: PPUSH
17566: LD_VAR 0 2
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: CALL 25791 0 4
17581: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17582: LD_ADDR_VAR 0 5
17586: PUSH
17587: LD_EXP 66
17591: PPUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: CALL 25141 0 2
17601: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17602: LD_EXP 67
17606: PUSH
17607: LD_VAR 0 5
17611: ARRAY
17612: PUSH
17613: LD_EXP 68
17617: LESS
17618: IFFALSE 17807
// begin for i := 1 to vehicles do
17620: LD_ADDR_VAR 0 4
17624: PUSH
17625: DOUBLE
17626: LD_INT 1
17628: DEC
17629: ST_TO_ADDR
17630: LD_VAR 0 2
17634: PUSH
17635: FOR_TO
17636: IFFALSE 17805
// begin if hackTanksCaptured [ index ] = hackLimit then
17638: LD_EXP 67
17642: PUSH
17643: LD_VAR 0 5
17647: ARRAY
17648: PUSH
17649: LD_EXP 68
17653: EQUAL
17654: IFFALSE 17658
// break ;
17656: GO 17805
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17658: LD_ADDR_EXP 70
17662: PUSH
17663: LD_EXP 70
17667: PPUSH
17668: LD_VAR 0 5
17672: PPUSH
17673: LD_EXP 70
17677: PUSH
17678: LD_VAR 0 5
17682: ARRAY
17683: PUSH
17684: LD_INT 1
17686: PLUS
17687: PPUSH
17688: CALL_OW 1
17692: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17693: LD_ADDR_EXP 67
17697: PUSH
17698: LD_EXP 67
17702: PPUSH
17703: LD_VAR 0 5
17707: PUSH
17708: LD_EXP 67
17712: PUSH
17713: LD_VAR 0 5
17717: ARRAY
17718: PUSH
17719: LD_INT 1
17721: PLUS
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: LD_VAR 0 2
17731: PUSH
17732: LD_VAR 0 4
17736: ARRAY
17737: PUSH
17738: LD_VAR 0 2
17742: PUSH
17743: LD_VAR 0 4
17747: ARRAY
17748: PPUSH
17749: CALL_OW 255
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL 25356 0 3
17762: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17763: LD_VAR 0 2
17767: PUSH
17768: LD_VAR 0 4
17772: ARRAY
17773: PPUSH
17774: LD_VAR 0 1
17778: PPUSH
17779: CALL_OW 255
17783: PPUSH
17784: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17788: LD_VAR 0 2
17792: PUSH
17793: LD_VAR 0 4
17797: ARRAY
17798: PPUSH
17799: CALL_OW 141
// end ;
17803: GO 17635
17805: POP
17806: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_EXP 67
17816: PUSH
17817: LD_VAR 0 5
17821: ARRAY
17822: PUSH
17823: LD_INT 0
17825: PLUS
17826: PPUSH
17827: CALL_OW 505
// end ;
17831: LD_VAR 0 3
17835: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
// if not hack in hackTanks then
17842: LD_VAR 0 1
17846: PUSH
17847: LD_EXP 66
17851: IN
17852: NOT
17853: IFFALSE 17857
// exit ;
17855: GO 18097
// index := GetElementIndex ( hackTanks , hack ) ;
17857: LD_ADDR_VAR 0 4
17861: PUSH
17862: LD_EXP 66
17866: PPUSH
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL 25141 0 2
17876: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17877: LD_ADDR_VAR 0 3
17881: PUSH
17882: DOUBLE
17883: LD_EXP 67
17887: PUSH
17888: LD_VAR 0 4
17892: ARRAY
17893: INC
17894: ST_TO_ADDR
17895: LD_INT 1
17897: PUSH
17898: FOR_DOWNTO
17899: IFFALSE 18071
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17901: LD_ADDR_VAR 0 5
17905: PUSH
17906: LD_EXP 67
17910: PUSH
17911: LD_VAR 0 4
17915: ARRAY
17916: PUSH
17917: LD_VAR 0 3
17921: ARRAY
17922: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17923: LD_VAR 0 5
17927: PUSH
17928: LD_INT 1
17930: ARRAY
17931: PPUSH
17932: CALL_OW 302
17936: NOT
17937: PUSH
17938: LD_VAR 0 5
17942: PUSH
17943: LD_INT 1
17945: ARRAY
17946: PPUSH
17947: CALL_OW 255
17951: PUSH
17952: LD_VAR 0 1
17956: PPUSH
17957: CALL_OW 255
17961: NONEQUAL
17962: OR
17963: IFFALSE 18069
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17965: LD_VAR 0 5
17969: PUSH
17970: LD_INT 1
17972: ARRAY
17973: PPUSH
17974: CALL_OW 305
17978: PUSH
17979: LD_VAR 0 5
17983: PUSH
17984: LD_INT 1
17986: ARRAY
17987: PPUSH
17988: CALL_OW 255
17992: PUSH
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 255
18002: EQUAL
18003: AND
18004: IFFALSE 18028
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18006: LD_VAR 0 5
18010: PUSH
18011: LD_INT 1
18013: ARRAY
18014: PPUSH
18015: LD_VAR 0 5
18019: PUSH
18020: LD_INT 2
18022: ARRAY
18023: PPUSH
18024: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18028: LD_ADDR_EXP 67
18032: PUSH
18033: LD_EXP 67
18037: PPUSH
18038: LD_VAR 0 4
18042: PPUSH
18043: LD_EXP 67
18047: PUSH
18048: LD_VAR 0 4
18052: ARRAY
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: CALL_OW 3
18063: PPUSH
18064: CALL_OW 1
18068: ST_TO_ADDR
// end ; end ;
18069: GO 17898
18071: POP
18072: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18073: LD_VAR 0 1
18077: PPUSH
18078: LD_EXP 67
18082: PUSH
18083: LD_VAR 0 4
18087: ARRAY
18088: PUSH
18089: LD_INT 0
18091: PLUS
18092: PPUSH
18093: CALL_OW 505
// end ;
18097: LD_VAR 0 2
18101: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18102: LD_INT 0
18104: PPUSH
18105: PPUSH
18106: PPUSH
18107: PPUSH
// if not hack in hackTanks then
18108: LD_VAR 0 1
18112: PUSH
18113: LD_EXP 66
18117: IN
18118: NOT
18119: IFFALSE 18123
// exit ;
18121: GO 18208
// index := GetElementIndex ( hackTanks , hack ) ;
18123: LD_ADDR_VAR 0 5
18127: PUSH
18128: LD_EXP 66
18132: PPUSH
18133: LD_VAR 0 1
18137: PPUSH
18138: CALL 25141 0 2
18142: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18143: LD_ADDR_VAR 0 4
18147: PUSH
18148: DOUBLE
18149: LD_INT 1
18151: DEC
18152: ST_TO_ADDR
18153: LD_EXP 67
18157: PUSH
18158: LD_VAR 0 5
18162: ARRAY
18163: PUSH
18164: FOR_TO
18165: IFFALSE 18206
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18167: LD_EXP 67
18171: PUSH
18172: LD_VAR 0 5
18176: ARRAY
18177: PUSH
18178: LD_VAR 0 4
18182: ARRAY
18183: PUSH
18184: LD_INT 1
18186: ARRAY
18187: PUSH
18188: LD_VAR 0 2
18192: EQUAL
18193: IFFALSE 18204
// KillUnit ( vehicle ) ;
18195: LD_VAR 0 2
18199: PPUSH
18200: CALL_OW 66
18204: GO 18164
18206: POP
18207: POP
// end ;
18208: LD_VAR 0 3
18212: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18213: LD_EXP 71
18217: NOT
18218: IFFALSE 18253
18220: GO 18222
18222: DISABLE
// begin initMiner := true ;
18223: LD_ADDR_EXP 71
18227: PUSH
18228: LD_INT 1
18230: ST_TO_ADDR
// minersList := [ ] ;
18231: LD_ADDR_EXP 72
18235: PUSH
18236: EMPTY
18237: ST_TO_ADDR
// minerMinesList := [ ] ;
18238: LD_ADDR_EXP 73
18242: PUSH
18243: EMPTY
18244: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18245: LD_ADDR_EXP 74
18249: PUSH
18250: LD_INT 5
18252: ST_TO_ADDR
// end ;
18253: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18254: LD_EXP 71
18258: PUSH
18259: LD_INT 34
18261: PUSH
18262: LD_INT 81
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: AND
18274: IFFALSE 18735
18276: GO 18278
18278: DISABLE
18279: LD_INT 0
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
// begin enable ;
18285: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18286: LD_ADDR_VAR 0 1
18290: PUSH
18291: LD_INT 34
18293: PUSH
18294: LD_INT 81
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 69
18305: PUSH
18306: FOR_IN
18307: IFFALSE 18379
// begin if not i in minersList then
18309: LD_VAR 0 1
18313: PUSH
18314: LD_EXP 72
18318: IN
18319: NOT
18320: IFFALSE 18377
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18322: LD_ADDR_EXP 72
18326: PUSH
18327: LD_EXP 72
18331: PPUSH
18332: LD_EXP 72
18336: PUSH
18337: LD_INT 1
18339: PLUS
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 1
18350: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18351: LD_ADDR_EXP 73
18355: PUSH
18356: LD_EXP 73
18360: PPUSH
18361: LD_EXP 73
18365: PUSH
18366: LD_INT 1
18368: PLUS
18369: PPUSH
18370: EMPTY
18371: PPUSH
18372: CALL_OW 1
18376: ST_TO_ADDR
// end end ;
18377: GO 18306
18379: POP
18380: POP
// for i := minerMinesList downto 1 do
18381: LD_ADDR_VAR 0 1
18385: PUSH
18386: DOUBLE
18387: LD_EXP 73
18391: INC
18392: ST_TO_ADDR
18393: LD_INT 1
18395: PUSH
18396: FOR_DOWNTO
18397: IFFALSE 18733
// begin if IsLive ( minersList [ i ] ) then
18399: LD_EXP 72
18403: PUSH
18404: LD_VAR 0 1
18408: ARRAY
18409: PPUSH
18410: CALL_OW 300
18414: IFFALSE 18442
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18416: LD_EXP 72
18420: PUSH
18421: LD_VAR 0 1
18425: ARRAY
18426: PPUSH
18427: LD_EXP 73
18431: PUSH
18432: LD_VAR 0 1
18436: ARRAY
18437: PPUSH
18438: CALL_OW 505
// if not minerMinesList [ i ] then
18442: LD_EXP 73
18446: PUSH
18447: LD_VAR 0 1
18451: ARRAY
18452: NOT
18453: IFFALSE 18457
// continue ;
18455: GO 18396
// for j := minerMinesList [ i ] downto 1 do
18457: LD_ADDR_VAR 0 2
18461: PUSH
18462: DOUBLE
18463: LD_EXP 73
18467: PUSH
18468: LD_VAR 0 1
18472: ARRAY
18473: INC
18474: ST_TO_ADDR
18475: LD_INT 1
18477: PUSH
18478: FOR_DOWNTO
18479: IFFALSE 18729
// begin side := GetSide ( minersList [ i ] ) ;
18481: LD_ADDR_VAR 0 3
18485: PUSH
18486: LD_EXP 72
18490: PUSH
18491: LD_VAR 0 1
18495: ARRAY
18496: PPUSH
18497: CALL_OW 255
18501: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18502: LD_ADDR_VAR 0 4
18506: PUSH
18507: LD_EXP 73
18511: PUSH
18512: LD_VAR 0 1
18516: ARRAY
18517: PUSH
18518: LD_VAR 0 2
18522: ARRAY
18523: PUSH
18524: LD_INT 1
18526: ARRAY
18527: PPUSH
18528: LD_EXP 73
18532: PUSH
18533: LD_VAR 0 1
18537: ARRAY
18538: PUSH
18539: LD_VAR 0 2
18543: ARRAY
18544: PUSH
18545: LD_INT 2
18547: ARRAY
18548: PPUSH
18549: CALL_OW 428
18553: ST_TO_ADDR
// if not tmp then
18554: LD_VAR 0 4
18558: NOT
18559: IFFALSE 18563
// continue ;
18561: GO 18478
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18563: LD_VAR 0 4
18567: PUSH
18568: LD_INT 81
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PPUSH
18580: CALL_OW 69
18584: IN
18585: PUSH
18586: LD_EXP 73
18590: PUSH
18591: LD_VAR 0 1
18595: ARRAY
18596: PUSH
18597: LD_VAR 0 2
18601: ARRAY
18602: PUSH
18603: LD_INT 1
18605: ARRAY
18606: PPUSH
18607: LD_EXP 73
18611: PUSH
18612: LD_VAR 0 1
18616: ARRAY
18617: PUSH
18618: LD_VAR 0 2
18622: ARRAY
18623: PUSH
18624: LD_INT 2
18626: ARRAY
18627: PPUSH
18628: CALL_OW 458
18632: AND
18633: IFFALSE 18727
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18635: LD_EXP 73
18639: PUSH
18640: LD_VAR 0 1
18644: ARRAY
18645: PUSH
18646: LD_VAR 0 2
18650: ARRAY
18651: PUSH
18652: LD_INT 1
18654: ARRAY
18655: PPUSH
18656: LD_EXP 73
18660: PUSH
18661: LD_VAR 0 1
18665: ARRAY
18666: PUSH
18667: LD_VAR 0 2
18671: ARRAY
18672: PUSH
18673: LD_INT 2
18675: ARRAY
18676: PPUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18686: LD_ADDR_EXP 73
18690: PUSH
18691: LD_EXP 73
18695: PPUSH
18696: LD_VAR 0 1
18700: PPUSH
18701: LD_EXP 73
18705: PUSH
18706: LD_VAR 0 1
18710: ARRAY
18711: PPUSH
18712: LD_VAR 0 2
18716: PPUSH
18717: CALL_OW 3
18721: PPUSH
18722: CALL_OW 1
18726: ST_TO_ADDR
// end ; end ;
18727: GO 18478
18729: POP
18730: POP
// end ;
18731: GO 18396
18733: POP
18734: POP
// end ;
18735: PPOPN 4
18737: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
// result := false ;
18742: LD_ADDR_VAR 0 4
18746: PUSH
18747: LD_INT 0
18749: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18750: LD_VAR 0 1
18754: PPUSH
18755: CALL_OW 264
18759: PUSH
18760: LD_INT 81
18762: EQUAL
18763: NOT
18764: IFFALSE 18768
// exit ;
18766: GO 19008
// index := GetElementIndex ( minersList , unit ) ;
18768: LD_ADDR_VAR 0 5
18772: PUSH
18773: LD_EXP 72
18777: PPUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL 25141 0 2
18787: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18788: LD_EXP 73
18792: PUSH
18793: LD_VAR 0 5
18797: ARRAY
18798: PUSH
18799: LD_EXP 74
18803: GREATEREQUAL
18804: IFFALSE 18808
// exit ;
18806: GO 19008
// ComMoveXY ( unit , x , y ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18827: LD_INT 35
18829: PPUSH
18830: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18834: LD_VAR 0 1
18838: PPUSH
18839: LD_VAR 0 2
18843: PPUSH
18844: LD_VAR 0 3
18848: PPUSH
18849: CALL 56496 0 3
18853: NOT
18854: PUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 314
18864: AND
18865: IFFALSE 18869
// exit ;
18867: GO 19008
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18869: LD_VAR 0 2
18873: PPUSH
18874: LD_VAR 0 3
18878: PPUSH
18879: CALL_OW 428
18883: PUSH
18884: LD_VAR 0 1
18888: EQUAL
18889: PUSH
18890: LD_VAR 0 1
18894: PPUSH
18895: CALL_OW 314
18899: NOT
18900: AND
18901: IFFALSE 18827
// PlaySoundXY ( x , y , PlantMine ) ;
18903: LD_VAR 0 2
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: LD_STRING PlantMine
18915: PPUSH
18916: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18920: LD_VAR 0 2
18924: PPUSH
18925: LD_VAR 0 3
18929: PPUSH
18930: LD_VAR 0 1
18934: PPUSH
18935: CALL_OW 255
18939: PPUSH
18940: LD_INT 0
18942: PPUSH
18943: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18947: LD_ADDR_EXP 73
18951: PUSH
18952: LD_EXP 73
18956: PPUSH
18957: LD_VAR 0 5
18961: PUSH
18962: LD_EXP 73
18966: PUSH
18967: LD_VAR 0 5
18971: ARRAY
18972: PUSH
18973: LD_INT 1
18975: PLUS
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: LD_VAR 0 2
18985: PUSH
18986: LD_VAR 0 3
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PPUSH
18995: CALL 25356 0 3
18999: ST_TO_ADDR
// result := true ;
19000: LD_ADDR_VAR 0 4
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// end ;
19008: LD_VAR 0 4
19012: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19013: LD_INT 0
19015: PPUSH
19016: PPUSH
19017: PPUSH
// if not unit in minersList then
19018: LD_VAR 0 1
19022: PUSH
19023: LD_EXP 72
19027: IN
19028: NOT
19029: IFFALSE 19033
// exit ;
19031: GO 19425
// index := GetElementIndex ( minersList , unit ) ;
19033: LD_ADDR_VAR 0 6
19037: PUSH
19038: LD_EXP 72
19042: PPUSH
19043: LD_VAR 0 1
19047: PPUSH
19048: CALL 25141 0 2
19052: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19053: LD_ADDR_VAR 0 5
19057: PUSH
19058: DOUBLE
19059: LD_EXP 73
19063: PUSH
19064: LD_VAR 0 6
19068: ARRAY
19069: INC
19070: ST_TO_ADDR
19071: LD_INT 1
19073: PUSH
19074: FOR_DOWNTO
19075: IFFALSE 19236
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19077: LD_EXP 73
19081: PUSH
19082: LD_VAR 0 6
19086: ARRAY
19087: PUSH
19088: LD_VAR 0 5
19092: ARRAY
19093: PUSH
19094: LD_INT 1
19096: ARRAY
19097: PUSH
19098: LD_VAR 0 2
19102: EQUAL
19103: PUSH
19104: LD_EXP 73
19108: PUSH
19109: LD_VAR 0 6
19113: ARRAY
19114: PUSH
19115: LD_VAR 0 5
19119: ARRAY
19120: PUSH
19121: LD_INT 2
19123: ARRAY
19124: PUSH
19125: LD_VAR 0 3
19129: EQUAL
19130: AND
19131: IFFALSE 19234
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19133: LD_EXP 73
19137: PUSH
19138: LD_VAR 0 6
19142: ARRAY
19143: PUSH
19144: LD_VAR 0 5
19148: ARRAY
19149: PUSH
19150: LD_INT 1
19152: ARRAY
19153: PPUSH
19154: LD_EXP 73
19158: PUSH
19159: LD_VAR 0 6
19163: ARRAY
19164: PUSH
19165: LD_VAR 0 5
19169: ARRAY
19170: PUSH
19171: LD_INT 2
19173: ARRAY
19174: PPUSH
19175: LD_VAR 0 1
19179: PPUSH
19180: CALL_OW 255
19184: PPUSH
19185: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19189: LD_ADDR_EXP 73
19193: PUSH
19194: LD_EXP 73
19198: PPUSH
19199: LD_VAR 0 6
19203: PPUSH
19204: LD_EXP 73
19208: PUSH
19209: LD_VAR 0 6
19213: ARRAY
19214: PPUSH
19215: LD_VAR 0 5
19219: PPUSH
19220: CALL_OW 3
19224: PPUSH
19225: CALL_OW 1
19229: ST_TO_ADDR
// exit ;
19230: POP
19231: POP
19232: GO 19425
// end ; end ;
19234: GO 19074
19236: POP
19237: POP
// for i := minerMinesList [ index ] downto 1 do
19238: LD_ADDR_VAR 0 5
19242: PUSH
19243: DOUBLE
19244: LD_EXP 73
19248: PUSH
19249: LD_VAR 0 6
19253: ARRAY
19254: INC
19255: ST_TO_ADDR
19256: LD_INT 1
19258: PUSH
19259: FOR_DOWNTO
19260: IFFALSE 19423
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19262: LD_EXP 73
19266: PUSH
19267: LD_VAR 0 6
19271: ARRAY
19272: PUSH
19273: LD_VAR 0 5
19277: ARRAY
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: LD_EXP 73
19287: PUSH
19288: LD_VAR 0 6
19292: ARRAY
19293: PUSH
19294: LD_VAR 0 5
19298: ARRAY
19299: PUSH
19300: LD_INT 2
19302: ARRAY
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: CALL_OW 298
19318: PUSH
19319: LD_INT 6
19321: LESS
19322: IFFALSE 19421
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19324: LD_EXP 73
19328: PUSH
19329: LD_VAR 0 6
19333: ARRAY
19334: PUSH
19335: LD_VAR 0 5
19339: ARRAY
19340: PUSH
19341: LD_INT 1
19343: ARRAY
19344: PPUSH
19345: LD_EXP 73
19349: PUSH
19350: LD_VAR 0 6
19354: ARRAY
19355: PUSH
19356: LD_VAR 0 5
19360: ARRAY
19361: PUSH
19362: LD_INT 2
19364: ARRAY
19365: PPUSH
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL_OW 255
19375: PPUSH
19376: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19380: LD_ADDR_EXP 73
19384: PUSH
19385: LD_EXP 73
19389: PPUSH
19390: LD_VAR 0 6
19394: PPUSH
19395: LD_EXP 73
19399: PUSH
19400: LD_VAR 0 6
19404: ARRAY
19405: PPUSH
19406: LD_VAR 0 5
19410: PPUSH
19411: CALL_OW 3
19415: PPUSH
19416: CALL_OW 1
19420: ST_TO_ADDR
// end ; end ;
19421: GO 19259
19423: POP
19424: POP
// end ;
19425: LD_VAR 0 4
19429: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19430: LD_INT 0
19432: PPUSH
19433: PPUSH
19434: PPUSH
19435: PPUSH
19436: PPUSH
19437: PPUSH
19438: PPUSH
19439: PPUSH
19440: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19441: LD_VAR 0 1
19445: PPUSH
19446: CALL_OW 264
19450: PUSH
19451: LD_INT 81
19453: EQUAL
19454: NOT
19455: PUSH
19456: LD_VAR 0 1
19460: PUSH
19461: LD_EXP 72
19465: IN
19466: NOT
19467: OR
19468: IFFALSE 19472
// exit ;
19470: GO 19794
// index := GetElementIndex ( minersList , unit ) ;
19472: LD_ADDR_VAR 0 6
19476: PUSH
19477: LD_EXP 72
19481: PPUSH
19482: LD_VAR 0 1
19486: PPUSH
19487: CALL 25141 0 2
19491: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19492: LD_ADDR_VAR 0 8
19496: PUSH
19497: LD_EXP 74
19501: PUSH
19502: LD_EXP 73
19506: PUSH
19507: LD_VAR 0 6
19511: ARRAY
19512: MINUS
19513: ST_TO_ADDR
// if not minesFreeAmount then
19514: LD_VAR 0 8
19518: NOT
19519: IFFALSE 19523
// exit ;
19521: GO 19794
// tmp := [ ] ;
19523: LD_ADDR_VAR 0 7
19527: PUSH
19528: EMPTY
19529: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19530: LD_ADDR_VAR 0 5
19534: PUSH
19535: DOUBLE
19536: LD_INT 1
19538: DEC
19539: ST_TO_ADDR
19540: LD_VAR 0 8
19544: PUSH
19545: FOR_TO
19546: IFFALSE 19741
// begin _d := rand ( 0 , 5 ) ;
19548: LD_ADDR_VAR 0 11
19552: PUSH
19553: LD_INT 0
19555: PPUSH
19556: LD_INT 5
19558: PPUSH
19559: CALL_OW 12
19563: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19564: LD_ADDR_VAR 0 12
19568: PUSH
19569: LD_INT 2
19571: PPUSH
19572: LD_INT 6
19574: PPUSH
19575: CALL_OW 12
19579: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19580: LD_ADDR_VAR 0 9
19584: PUSH
19585: LD_VAR 0 2
19589: PPUSH
19590: LD_VAR 0 11
19594: PPUSH
19595: LD_VAR 0 12
19599: PPUSH
19600: CALL_OW 272
19604: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19605: LD_ADDR_VAR 0 10
19609: PUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_VAR 0 11
19619: PPUSH
19620: LD_VAR 0 12
19624: PPUSH
19625: CALL_OW 273
19629: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19630: LD_VAR 0 9
19634: PPUSH
19635: LD_VAR 0 10
19639: PPUSH
19640: CALL_OW 488
19644: PUSH
19645: LD_VAR 0 9
19649: PUSH
19650: LD_VAR 0 10
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_VAR 0 7
19663: IN
19664: NOT
19665: AND
19666: PUSH
19667: LD_VAR 0 9
19671: PPUSH
19672: LD_VAR 0 10
19676: PPUSH
19677: CALL_OW 458
19681: NOT
19682: AND
19683: IFFALSE 19725
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19685: LD_ADDR_VAR 0 7
19689: PUSH
19690: LD_VAR 0 7
19694: PPUSH
19695: LD_VAR 0 7
19699: PUSH
19700: LD_INT 1
19702: PLUS
19703: PPUSH
19704: LD_VAR 0 9
19708: PUSH
19709: LD_VAR 0 10
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 1
19722: ST_TO_ADDR
19723: GO 19739
// i := i - 1 ;
19725: LD_ADDR_VAR 0 5
19729: PUSH
19730: LD_VAR 0 5
19734: PUSH
19735: LD_INT 1
19737: MINUS
19738: ST_TO_ADDR
// end ;
19739: GO 19545
19741: POP
19742: POP
// for i in tmp do
19743: LD_ADDR_VAR 0 5
19747: PUSH
19748: LD_VAR 0 7
19752: PUSH
19753: FOR_IN
19754: IFFALSE 19792
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19756: LD_VAR 0 1
19760: PPUSH
19761: LD_VAR 0 5
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: LD_VAR 0 5
19774: PUSH
19775: LD_INT 2
19777: ARRAY
19778: PPUSH
19779: CALL 18738 0 3
19783: NOT
19784: IFFALSE 19790
// exit ;
19786: POP
19787: POP
19788: GO 19794
19790: GO 19753
19792: POP
19793: POP
// end ;
19794: LD_VAR 0 4
19798: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19799: LD_INT 0
19801: PPUSH
19802: PPUSH
19803: PPUSH
19804: PPUSH
19805: PPUSH
19806: PPUSH
19807: PPUSH
// if not GetClass ( unit ) = class_sniper then
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 257
19817: PUSH
19818: LD_INT 5
19820: EQUAL
19821: NOT
19822: IFFALSE 19826
// exit ;
19824: GO 20214
// dist := 8 ;
19826: LD_ADDR_VAR 0 5
19830: PUSH
19831: LD_INT 8
19833: ST_TO_ADDR
// viewRange := 12 ;
19834: LD_ADDR_VAR 0 7
19838: PUSH
19839: LD_INT 12
19841: ST_TO_ADDR
// side := GetSide ( unit ) ;
19842: LD_ADDR_VAR 0 6
19846: PUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 255
19856: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19857: LD_INT 61
19859: PPUSH
19860: LD_VAR 0 6
19864: PPUSH
19865: CALL_OW 321
19869: PUSH
19870: LD_INT 2
19872: EQUAL
19873: IFFALSE 19883
// viewRange := 16 ;
19875: LD_ADDR_VAR 0 7
19879: PUSH
19880: LD_INT 16
19882: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19883: LD_VAR 0 1
19887: PPUSH
19888: LD_VAR 0 2
19892: PPUSH
19893: LD_VAR 0 3
19897: PPUSH
19898: CALL_OW 297
19902: PUSH
19903: LD_VAR 0 5
19907: GREATER
19908: IFFALSE 19987
// begin ComMoveXY ( unit , x , y ) ;
19910: LD_VAR 0 1
19914: PPUSH
19915: LD_VAR 0 2
19919: PPUSH
19920: LD_VAR 0 3
19924: PPUSH
19925: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19929: LD_INT 35
19931: PPUSH
19932: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_VAR 0 2
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: CALL 56496 0 3
19955: NOT
19956: IFFALSE 19960
// exit ;
19958: GO 20214
// until GetDistUnitXY ( unit , x , y ) < dist ;
19960: LD_VAR 0 1
19964: PPUSH
19965: LD_VAR 0 2
19969: PPUSH
19970: LD_VAR 0 3
19974: PPUSH
19975: CALL_OW 297
19979: PUSH
19980: LD_VAR 0 5
19984: LESS
19985: IFFALSE 19929
// end ; ComTurnXY ( unit , x , y ) ;
19987: LD_VAR 0 1
19991: PPUSH
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 3
20001: PPUSH
20002: CALL_OW 118
// wait ( 5 ) ;
20006: LD_INT 5
20008: PPUSH
20009: CALL_OW 67
// _d := GetDir ( unit ) ;
20013: LD_ADDR_VAR 0 10
20017: PUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 254
20027: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20028: LD_ADDR_VAR 0 8
20032: PUSH
20033: LD_VAR 0 1
20037: PPUSH
20038: CALL_OW 250
20042: PPUSH
20043: LD_VAR 0 10
20047: PPUSH
20048: LD_VAR 0 5
20052: PPUSH
20053: CALL_OW 272
20057: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20058: LD_ADDR_VAR 0 9
20062: PUSH
20063: LD_VAR 0 1
20067: PPUSH
20068: CALL_OW 251
20072: PPUSH
20073: LD_VAR 0 10
20077: PPUSH
20078: LD_VAR 0 5
20082: PPUSH
20083: CALL_OW 273
20087: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20088: LD_VAR 0 8
20092: PPUSH
20093: LD_VAR 0 9
20097: PPUSH
20098: CALL_OW 488
20102: NOT
20103: IFFALSE 20107
// exit ;
20105: GO 20214
// ComAnimCustom ( unit , 1 ) ;
20107: LD_VAR 0 1
20111: PPUSH
20112: LD_INT 1
20114: PPUSH
20115: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20119: LD_VAR 0 8
20123: PPUSH
20124: LD_VAR 0 9
20128: PPUSH
20129: LD_VAR 0 6
20133: PPUSH
20134: LD_VAR 0 7
20138: PPUSH
20139: CALL_OW 330
// repeat wait ( 1 ) ;
20143: LD_INT 1
20145: PPUSH
20146: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20150: LD_VAR 0 1
20154: PPUSH
20155: CALL_OW 316
20159: PUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 314
20169: OR
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 302
20180: NOT
20181: OR
20182: PUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 301
20192: OR
20193: IFFALSE 20143
// RemoveSeeing ( _x , _y , side ) ;
20195: LD_VAR 0 8
20199: PPUSH
20200: LD_VAR 0 9
20204: PPUSH
20205: LD_VAR 0 6
20209: PPUSH
20210: CALL_OW 331
// end ; end_of_file
20214: LD_VAR 0 4
20218: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20219: LD_INT 0
20221: PPUSH
20222: PPUSH
// if exist_mode then
20223: LD_VAR 0 2
20227: IFFALSE 20252
// unit := CreateCharacter ( prefix & ident ) else
20229: LD_ADDR_VAR 0 5
20233: PUSH
20234: LD_VAR 0 3
20238: PUSH
20239: LD_VAR 0 1
20243: STR
20244: PPUSH
20245: CALL_OW 34
20249: ST_TO_ADDR
20250: GO 20267
// unit := NewCharacter ( ident ) ;
20252: LD_ADDR_VAR 0 5
20256: PUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 25
20266: ST_TO_ADDR
// result := unit ;
20267: LD_ADDR_VAR 0 4
20271: PUSH
20272: LD_VAR 0 5
20276: ST_TO_ADDR
// end ;
20277: LD_VAR 0 4
20281: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20282: LD_INT 0
20284: PPUSH
20285: PPUSH
// if not side or not nation then
20286: LD_VAR 0 1
20290: NOT
20291: PUSH
20292: LD_VAR 0 2
20296: NOT
20297: OR
20298: IFFALSE 20302
// exit ;
20300: GO 21070
// case nation of nation_american :
20302: LD_VAR 0 2
20306: PUSH
20307: LD_INT 1
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20529
20315: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20316: LD_ADDR_VAR 0 4
20320: PUSH
20321: LD_INT 35
20323: PUSH
20324: LD_INT 45
20326: PUSH
20327: LD_INT 46
20329: PUSH
20330: LD_INT 47
20332: PUSH
20333: LD_INT 82
20335: PUSH
20336: LD_INT 83
20338: PUSH
20339: LD_INT 84
20341: PUSH
20342: LD_INT 85
20344: PUSH
20345: LD_INT 86
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: LD_INT 6
20356: PUSH
20357: LD_INT 15
20359: PUSH
20360: LD_INT 16
20362: PUSH
20363: LD_INT 7
20365: PUSH
20366: LD_INT 12
20368: PUSH
20369: LD_INT 13
20371: PUSH
20372: LD_INT 10
20374: PUSH
20375: LD_INT 14
20377: PUSH
20378: LD_INT 20
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 22
20386: PUSH
20387: LD_INT 25
20389: PUSH
20390: LD_INT 32
20392: PUSH
20393: LD_INT 27
20395: PUSH
20396: LD_INT 36
20398: PUSH
20399: LD_INT 69
20401: PUSH
20402: LD_INT 39
20404: PUSH
20405: LD_INT 34
20407: PUSH
20408: LD_INT 40
20410: PUSH
20411: LD_INT 48
20413: PUSH
20414: LD_INT 49
20416: PUSH
20417: LD_INT 50
20419: PUSH
20420: LD_INT 51
20422: PUSH
20423: LD_INT 52
20425: PUSH
20426: LD_INT 53
20428: PUSH
20429: LD_INT 54
20431: PUSH
20432: LD_INT 55
20434: PUSH
20435: LD_INT 56
20437: PUSH
20438: LD_INT 57
20440: PUSH
20441: LD_INT 58
20443: PUSH
20444: LD_INT 59
20446: PUSH
20447: LD_INT 60
20449: PUSH
20450: LD_INT 61
20452: PUSH
20453: LD_INT 62
20455: PUSH
20456: LD_INT 80
20458: PUSH
20459: LD_INT 82
20461: PUSH
20462: LD_INT 83
20464: PUSH
20465: LD_INT 84
20467: PUSH
20468: LD_INT 85
20470: PUSH
20471: LD_INT 86
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: ST_TO_ADDR
20527: GO 20994
20529: LD_INT 2
20531: DOUBLE
20532: EQUAL
20533: IFTRUE 20537
20535: GO 20763
20537: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20538: LD_ADDR_VAR 0 4
20542: PUSH
20543: LD_INT 35
20545: PUSH
20546: LD_INT 45
20548: PUSH
20549: LD_INT 46
20551: PUSH
20552: LD_INT 47
20554: PUSH
20555: LD_INT 82
20557: PUSH
20558: LD_INT 83
20560: PUSH
20561: LD_INT 84
20563: PUSH
20564: LD_INT 85
20566: PUSH
20567: LD_INT 87
20569: PUSH
20570: LD_INT 70
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: LD_INT 11
20578: PUSH
20579: LD_INT 3
20581: PUSH
20582: LD_INT 4
20584: PUSH
20585: LD_INT 5
20587: PUSH
20588: LD_INT 6
20590: PUSH
20591: LD_INT 15
20593: PUSH
20594: LD_INT 18
20596: PUSH
20597: LD_INT 7
20599: PUSH
20600: LD_INT 17
20602: PUSH
20603: LD_INT 8
20605: PUSH
20606: LD_INT 20
20608: PUSH
20609: LD_INT 21
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 72
20617: PUSH
20618: LD_INT 26
20620: PUSH
20621: LD_INT 69
20623: PUSH
20624: LD_INT 39
20626: PUSH
20627: LD_INT 40
20629: PUSH
20630: LD_INT 41
20632: PUSH
20633: LD_INT 42
20635: PUSH
20636: LD_INT 43
20638: PUSH
20639: LD_INT 48
20641: PUSH
20642: LD_INT 49
20644: PUSH
20645: LD_INT 50
20647: PUSH
20648: LD_INT 51
20650: PUSH
20651: LD_INT 52
20653: PUSH
20654: LD_INT 53
20656: PUSH
20657: LD_INT 54
20659: PUSH
20660: LD_INT 55
20662: PUSH
20663: LD_INT 56
20665: PUSH
20666: LD_INT 60
20668: PUSH
20669: LD_INT 61
20671: PUSH
20672: LD_INT 62
20674: PUSH
20675: LD_INT 66
20677: PUSH
20678: LD_INT 67
20680: PUSH
20681: LD_INT 68
20683: PUSH
20684: LD_INT 81
20686: PUSH
20687: LD_INT 82
20689: PUSH
20690: LD_INT 83
20692: PUSH
20693: LD_INT 84
20695: PUSH
20696: LD_INT 85
20698: PUSH
20699: LD_INT 87
20701: PUSH
20702: LD_INT 88
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: ST_TO_ADDR
20761: GO 20994
20763: LD_INT 3
20765: DOUBLE
20766: EQUAL
20767: IFTRUE 20771
20769: GO 20993
20771: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20772: LD_ADDR_VAR 0 4
20776: PUSH
20777: LD_INT 46
20779: PUSH
20780: LD_INT 47
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 82
20791: PUSH
20792: LD_INT 83
20794: PUSH
20795: LD_INT 84
20797: PUSH
20798: LD_INT 85
20800: PUSH
20801: LD_INT 86
20803: PUSH
20804: LD_INT 11
20806: PUSH
20807: LD_INT 9
20809: PUSH
20810: LD_INT 20
20812: PUSH
20813: LD_INT 19
20815: PUSH
20816: LD_INT 21
20818: PUSH
20819: LD_INT 24
20821: PUSH
20822: LD_INT 22
20824: PUSH
20825: LD_INT 25
20827: PUSH
20828: LD_INT 28
20830: PUSH
20831: LD_INT 29
20833: PUSH
20834: LD_INT 30
20836: PUSH
20837: LD_INT 31
20839: PUSH
20840: LD_INT 37
20842: PUSH
20843: LD_INT 38
20845: PUSH
20846: LD_INT 32
20848: PUSH
20849: LD_INT 27
20851: PUSH
20852: LD_INT 33
20854: PUSH
20855: LD_INT 69
20857: PUSH
20858: LD_INT 39
20860: PUSH
20861: LD_INT 34
20863: PUSH
20864: LD_INT 40
20866: PUSH
20867: LD_INT 71
20869: PUSH
20870: LD_INT 23
20872: PUSH
20873: LD_INT 44
20875: PUSH
20876: LD_INT 48
20878: PUSH
20879: LD_INT 49
20881: PUSH
20882: LD_INT 50
20884: PUSH
20885: LD_INT 51
20887: PUSH
20888: LD_INT 52
20890: PUSH
20891: LD_INT 53
20893: PUSH
20894: LD_INT 54
20896: PUSH
20897: LD_INT 55
20899: PUSH
20900: LD_INT 56
20902: PUSH
20903: LD_INT 57
20905: PUSH
20906: LD_INT 58
20908: PUSH
20909: LD_INT 59
20911: PUSH
20912: LD_INT 63
20914: PUSH
20915: LD_INT 64
20917: PUSH
20918: LD_INT 65
20920: PUSH
20921: LD_INT 82
20923: PUSH
20924: LD_INT 83
20926: PUSH
20927: LD_INT 84
20929: PUSH
20930: LD_INT 85
20932: PUSH
20933: LD_INT 86
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: ST_TO_ADDR
20991: GO 20994
20993: POP
// if state > - 1 and state < 3 then
20994: LD_VAR 0 3
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: GREATER
21003: PUSH
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 3
21011: LESS
21012: AND
21013: IFFALSE 21070
// for i in result do
21015: LD_ADDR_VAR 0 5
21019: PUSH
21020: LD_VAR 0 4
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21068
// if GetTech ( i , side ) <> state then
21028: LD_VAR 0 5
21032: PPUSH
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL_OW 321
21042: PUSH
21043: LD_VAR 0 3
21047: NONEQUAL
21048: IFFALSE 21066
// result := result diff i ;
21050: LD_ADDR_VAR 0 4
21054: PUSH
21055: LD_VAR 0 4
21059: PUSH
21060: LD_VAR 0 5
21064: DIFF
21065: ST_TO_ADDR
21066: GO 21025
21068: POP
21069: POP
// end ;
21070: LD_VAR 0 4
21074: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21075: LD_INT 0
21077: PPUSH
21078: PPUSH
21079: PPUSH
// result := true ;
21080: LD_ADDR_VAR 0 3
21084: PUSH
21085: LD_INT 1
21087: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21088: LD_ADDR_VAR 0 5
21092: PUSH
21093: LD_VAR 0 2
21097: PPUSH
21098: CALL_OW 480
21102: ST_TO_ADDR
// if not tmp then
21103: LD_VAR 0 5
21107: NOT
21108: IFFALSE 21112
// exit ;
21110: GO 21161
// for i in tmp do
21112: LD_ADDR_VAR 0 4
21116: PUSH
21117: LD_VAR 0 5
21121: PUSH
21122: FOR_IN
21123: IFFALSE 21159
// if GetTech ( i , side ) <> state_researched then
21125: LD_VAR 0 4
21129: PPUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 321
21139: PUSH
21140: LD_INT 2
21142: NONEQUAL
21143: IFFALSE 21157
// begin result := false ;
21145: LD_ADDR_VAR 0 3
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// exit ;
21153: POP
21154: POP
21155: GO 21161
// end ;
21157: GO 21122
21159: POP
21160: POP
// end ;
21161: LD_VAR 0 3
21165: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21166: LD_INT 0
21168: PPUSH
21169: PPUSH
21170: PPUSH
21171: PPUSH
21172: PPUSH
21173: PPUSH
21174: PPUSH
21175: PPUSH
21176: PPUSH
21177: PPUSH
21178: PPUSH
21179: PPUSH
21180: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21181: LD_VAR 0 1
21185: NOT
21186: PUSH
21187: LD_VAR 0 1
21191: PPUSH
21192: CALL_OW 257
21196: PUSH
21197: LD_INT 9
21199: NONEQUAL
21200: OR
21201: IFFALSE 21205
// exit ;
21203: GO 21778
// side := GetSide ( unit ) ;
21205: LD_ADDR_VAR 0 9
21209: PUSH
21210: LD_VAR 0 1
21214: PPUSH
21215: CALL_OW 255
21219: ST_TO_ADDR
// tech_space := tech_spacanom ;
21220: LD_ADDR_VAR 0 12
21224: PUSH
21225: LD_INT 29
21227: ST_TO_ADDR
// tech_time := tech_taurad ;
21228: LD_ADDR_VAR 0 13
21232: PUSH
21233: LD_INT 28
21235: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21236: LD_ADDR_VAR 0 11
21240: PUSH
21241: LD_VAR 0 1
21245: PPUSH
21246: CALL_OW 310
21250: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21251: LD_VAR 0 11
21255: PPUSH
21256: CALL_OW 247
21260: PUSH
21261: LD_INT 2
21263: EQUAL
21264: IFFALSE 21268
// exit ;
21266: GO 21778
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21268: LD_ADDR_VAR 0 8
21272: PUSH
21273: LD_INT 81
21275: PUSH
21276: LD_VAR 0 9
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 3
21287: PUSH
21288: LD_INT 21
21290: PUSH
21291: LD_INT 3
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PPUSH
21306: CALL_OW 69
21310: ST_TO_ADDR
// if not tmp then
21311: LD_VAR 0 8
21315: NOT
21316: IFFALSE 21320
// exit ;
21318: GO 21778
// if in_unit then
21320: LD_VAR 0 11
21324: IFFALSE 21348
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21326: LD_ADDR_VAR 0 10
21330: PUSH
21331: LD_VAR 0 8
21335: PPUSH
21336: LD_VAR 0 11
21340: PPUSH
21341: CALL_OW 74
21345: ST_TO_ADDR
21346: GO 21368
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21348: LD_ADDR_VAR 0 10
21352: PUSH
21353: LD_VAR 0 8
21357: PPUSH
21358: LD_VAR 0 1
21362: PPUSH
21363: CALL_OW 74
21367: ST_TO_ADDR
// if not enemy then
21368: LD_VAR 0 10
21372: NOT
21373: IFFALSE 21377
// exit ;
21375: GO 21778
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21377: LD_VAR 0 11
21381: PUSH
21382: LD_VAR 0 11
21386: PPUSH
21387: LD_VAR 0 10
21391: PPUSH
21392: CALL_OW 296
21396: PUSH
21397: LD_INT 13
21399: GREATER
21400: AND
21401: PUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: LD_VAR 0 10
21411: PPUSH
21412: CALL_OW 296
21416: PUSH
21417: LD_INT 12
21419: GREATER
21420: OR
21421: IFFALSE 21425
// exit ;
21423: GO 21778
// missile := [ 1 ] ;
21425: LD_ADDR_VAR 0 14
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: EMPTY
21434: LIST
21435: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21436: LD_VAR 0 9
21440: PPUSH
21441: LD_VAR 0 12
21445: PPUSH
21446: CALL_OW 325
21450: IFFALSE 21479
// missile := Replace ( missile , missile + 1 , 2 ) ;
21452: LD_ADDR_VAR 0 14
21456: PUSH
21457: LD_VAR 0 14
21461: PPUSH
21462: LD_VAR 0 14
21466: PUSH
21467: LD_INT 1
21469: PLUS
21470: PPUSH
21471: LD_INT 2
21473: PPUSH
21474: CALL_OW 1
21478: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21479: LD_VAR 0 9
21483: PPUSH
21484: LD_VAR 0 13
21488: PPUSH
21489: CALL_OW 325
21493: PUSH
21494: LD_VAR 0 10
21498: PPUSH
21499: CALL_OW 255
21503: PPUSH
21504: LD_VAR 0 13
21508: PPUSH
21509: CALL_OW 325
21513: NOT
21514: AND
21515: IFFALSE 21544
// missile := Replace ( missile , missile + 1 , 3 ) ;
21517: LD_ADDR_VAR 0 14
21521: PUSH
21522: LD_VAR 0 14
21526: PPUSH
21527: LD_VAR 0 14
21531: PUSH
21532: LD_INT 1
21534: PLUS
21535: PPUSH
21536: LD_INT 3
21538: PPUSH
21539: CALL_OW 1
21543: ST_TO_ADDR
// if missile < 2 then
21544: LD_VAR 0 14
21548: PUSH
21549: LD_INT 2
21551: LESS
21552: IFFALSE 21556
// exit ;
21554: GO 21778
// x := GetX ( enemy ) ;
21556: LD_ADDR_VAR 0 4
21560: PUSH
21561: LD_VAR 0 10
21565: PPUSH
21566: CALL_OW 250
21570: ST_TO_ADDR
// y := GetY ( enemy ) ;
21571: LD_ADDR_VAR 0 5
21575: PUSH
21576: LD_VAR 0 10
21580: PPUSH
21581: CALL_OW 251
21585: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21586: LD_ADDR_VAR 0 6
21590: PUSH
21591: LD_VAR 0 4
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PPUSH
21600: LD_INT 1
21602: PPUSH
21603: CALL_OW 12
21607: PLUS
21608: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21609: LD_ADDR_VAR 0 7
21613: PUSH
21614: LD_VAR 0 5
21618: PUSH
21619: LD_INT 1
21621: NEG
21622: PPUSH
21623: LD_INT 1
21625: PPUSH
21626: CALL_OW 12
21630: PLUS
21631: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21632: LD_VAR 0 6
21636: PPUSH
21637: LD_VAR 0 7
21641: PPUSH
21642: CALL_OW 488
21646: NOT
21647: IFFALSE 21669
// begin _x := x ;
21649: LD_ADDR_VAR 0 6
21653: PUSH
21654: LD_VAR 0 4
21658: ST_TO_ADDR
// _y := y ;
21659: LD_ADDR_VAR 0 7
21663: PUSH
21664: LD_VAR 0 5
21668: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_INT 1
21676: PPUSH
21677: LD_VAR 0 14
21681: PPUSH
21682: CALL_OW 12
21686: ST_TO_ADDR
// case i of 1 :
21687: LD_VAR 0 3
21691: PUSH
21692: LD_INT 1
21694: DOUBLE
21695: EQUAL
21696: IFTRUE 21700
21698: GO 21717
21700: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21701: LD_VAR 0 1
21705: PPUSH
21706: LD_VAR 0 10
21710: PPUSH
21711: CALL_OW 115
21715: GO 21778
21717: LD_INT 2
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21747
21725: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21726: LD_VAR 0 1
21730: PPUSH
21731: LD_VAR 0 6
21735: PPUSH
21736: LD_VAR 0 7
21740: PPUSH
21741: CALL_OW 153
21745: GO 21778
21747: LD_INT 3
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21777
21755: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21756: LD_VAR 0 1
21760: PPUSH
21761: LD_VAR 0 6
21765: PPUSH
21766: LD_VAR 0 7
21770: PPUSH
21771: CALL_OW 154
21775: GO 21778
21777: POP
// end ;
21778: LD_VAR 0 2
21782: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21783: LD_INT 0
21785: PPUSH
21786: PPUSH
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
// if not unit or not building then
21791: LD_VAR 0 1
21795: NOT
21796: PUSH
21797: LD_VAR 0 2
21801: NOT
21802: OR
21803: IFFALSE 21807
// exit ;
21805: GO 21965
// x := GetX ( building ) ;
21807: LD_ADDR_VAR 0 5
21811: PUSH
21812: LD_VAR 0 2
21816: PPUSH
21817: CALL_OW 250
21821: ST_TO_ADDR
// y := GetY ( building ) ;
21822: LD_ADDR_VAR 0 6
21826: PUSH
21827: LD_VAR 0 2
21831: PPUSH
21832: CALL_OW 251
21836: ST_TO_ADDR
// for i = 0 to 5 do
21837: LD_ADDR_VAR 0 4
21841: PUSH
21842: DOUBLE
21843: LD_INT 0
21845: DEC
21846: ST_TO_ADDR
21847: LD_INT 5
21849: PUSH
21850: FOR_TO
21851: IFFALSE 21963
// begin _x := ShiftX ( x , i , 3 ) ;
21853: LD_ADDR_VAR 0 7
21857: PUSH
21858: LD_VAR 0 5
21862: PPUSH
21863: LD_VAR 0 4
21867: PPUSH
21868: LD_INT 3
21870: PPUSH
21871: CALL_OW 272
21875: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21876: LD_ADDR_VAR 0 8
21880: PUSH
21881: LD_VAR 0 6
21885: PPUSH
21886: LD_VAR 0 4
21890: PPUSH
21891: LD_INT 3
21893: PPUSH
21894: CALL_OW 273
21898: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21899: LD_VAR 0 7
21903: PPUSH
21904: LD_VAR 0 8
21908: PPUSH
21909: CALL_OW 488
21913: NOT
21914: IFFALSE 21918
// continue ;
21916: GO 21850
// if HexInfo ( _x , _y ) = 0 then
21918: LD_VAR 0 7
21922: PPUSH
21923: LD_VAR 0 8
21927: PPUSH
21928: CALL_OW 428
21932: PUSH
21933: LD_INT 0
21935: EQUAL
21936: IFFALSE 21961
// begin ComMoveXY ( unit , _x , _y ) ;
21938: LD_VAR 0 1
21942: PPUSH
21943: LD_VAR 0 7
21947: PPUSH
21948: LD_VAR 0 8
21952: PPUSH
21953: CALL_OW 111
// exit ;
21957: POP
21958: POP
21959: GO 21965
// end ; end ;
21961: GO 21850
21963: POP
21964: POP
// end ;
21965: LD_VAR 0 3
21969: RET
// export function ScanBase ( side , base_area ) ; begin
21970: LD_INT 0
21972: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21973: LD_ADDR_VAR 0 3
21977: PUSH
21978: LD_VAR 0 2
21982: PPUSH
21983: LD_INT 81
21985: PUSH
21986: LD_VAR 0 1
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL_OW 70
21999: ST_TO_ADDR
// end ;
22000: LD_VAR 0 3
22004: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22005: LD_INT 0
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
// result := false ;
22011: LD_ADDR_VAR 0 2
22015: PUSH
22016: LD_INT 0
22018: ST_TO_ADDR
// side := GetSide ( unit ) ;
22019: LD_ADDR_VAR 0 3
22023: PUSH
22024: LD_VAR 0 1
22028: PPUSH
22029: CALL_OW 255
22033: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22034: LD_ADDR_VAR 0 4
22038: PUSH
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 248
22048: ST_TO_ADDR
// case nat of 1 :
22049: LD_VAR 0 4
22053: PUSH
22054: LD_INT 1
22056: DOUBLE
22057: EQUAL
22058: IFTRUE 22062
22060: GO 22073
22062: POP
// tech := tech_lassight ; 2 :
22063: LD_ADDR_VAR 0 5
22067: PUSH
22068: LD_INT 12
22070: ST_TO_ADDR
22071: GO 22112
22073: LD_INT 2
22075: DOUBLE
22076: EQUAL
22077: IFTRUE 22081
22079: GO 22092
22081: POP
// tech := tech_mortar ; 3 :
22082: LD_ADDR_VAR 0 5
22086: PUSH
22087: LD_INT 41
22089: ST_TO_ADDR
22090: GO 22112
22092: LD_INT 3
22094: DOUBLE
22095: EQUAL
22096: IFTRUE 22100
22098: GO 22111
22100: POP
// tech := tech_bazooka ; end ;
22101: LD_ADDR_VAR 0 5
22105: PUSH
22106: LD_INT 44
22108: ST_TO_ADDR
22109: GO 22112
22111: POP
// if Researched ( side , tech ) then
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_VAR 0 5
22121: PPUSH
22122: CALL_OW 325
22126: IFFALSE 22153
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22128: LD_ADDR_VAR 0 2
22132: PUSH
22133: LD_INT 5
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: LD_INT 9
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: PUSH
22147: LD_VAR 0 4
22151: ARRAY
22152: ST_TO_ADDR
// end ;
22153: LD_VAR 0 2
22157: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22158: LD_INT 0
22160: PPUSH
22161: PPUSH
22162: PPUSH
// if not mines then
22163: LD_VAR 0 2
22167: NOT
22168: IFFALSE 22172
// exit ;
22170: GO 22316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22172: LD_ADDR_VAR 0 5
22176: PUSH
22177: LD_INT 81
22179: PUSH
22180: LD_VAR 0 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 3
22191: PUSH
22192: LD_INT 21
22194: PUSH
22195: LD_INT 3
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PPUSH
22210: CALL_OW 69
22214: ST_TO_ADDR
// for i in mines do
22215: LD_ADDR_VAR 0 4
22219: PUSH
22220: LD_VAR 0 2
22224: PUSH
22225: FOR_IN
22226: IFFALSE 22314
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22228: LD_VAR 0 4
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: LD_VAR 0 4
22241: PUSH
22242: LD_INT 2
22244: ARRAY
22245: PPUSH
22246: CALL_OW 458
22250: NOT
22251: IFFALSE 22255
// continue ;
22253: GO 22225
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22255: LD_VAR 0 4
22259: PUSH
22260: LD_INT 1
22262: ARRAY
22263: PPUSH
22264: LD_VAR 0 4
22268: PUSH
22269: LD_INT 2
22271: ARRAY
22272: PPUSH
22273: CALL_OW 428
22277: PUSH
22278: LD_VAR 0 5
22282: IN
22283: IFFALSE 22312
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22285: LD_VAR 0 4
22289: PUSH
22290: LD_INT 1
22292: ARRAY
22293: PPUSH
22294: LD_VAR 0 4
22298: PUSH
22299: LD_INT 2
22301: ARRAY
22302: PPUSH
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 456
// end ;
22312: GO 22225
22314: POP
22315: POP
// end ;
22316: LD_VAR 0 3
22320: RET
// export function Count ( array ) ; var i ; begin
22321: LD_INT 0
22323: PPUSH
22324: PPUSH
// result := 0 ;
22325: LD_ADDR_VAR 0 2
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// for i in array do
22333: LD_ADDR_VAR 0 3
22337: PUSH
22338: LD_VAR 0 1
22342: PUSH
22343: FOR_IN
22344: IFFALSE 22368
// if i then
22346: LD_VAR 0 3
22350: IFFALSE 22366
// result := result + 1 ;
22352: LD_ADDR_VAR 0 2
22356: PUSH
22357: LD_VAR 0 2
22361: PUSH
22362: LD_INT 1
22364: PLUS
22365: ST_TO_ADDR
22366: GO 22343
22368: POP
22369: POP
// end ;
22370: LD_VAR 0 2
22374: RET
// export function IsEmpty ( building ) ; begin
22375: LD_INT 0
22377: PPUSH
// if not building then
22378: LD_VAR 0 1
22382: NOT
22383: IFFALSE 22387
// exit ;
22385: GO 22430
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22387: LD_ADDR_VAR 0 2
22391: PUSH
22392: LD_VAR 0 1
22396: PUSH
22397: LD_INT 22
22399: PUSH
22400: LD_VAR 0 1
22404: PPUSH
22405: CALL_OW 255
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 58
22416: PUSH
22417: EMPTY
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PPUSH
22424: CALL_OW 69
22428: IN
22429: ST_TO_ADDR
// end ;
22430: LD_VAR 0 2
22434: RET
// export function IsNotFull ( building ) ; var places ; begin
22435: LD_INT 0
22437: PPUSH
22438: PPUSH
// if not building then
22439: LD_VAR 0 1
22443: NOT
22444: IFFALSE 22448
// exit ;
22446: GO 22619
// result := false ;
22448: LD_ADDR_VAR 0 2
22452: PUSH
22453: LD_INT 0
22455: ST_TO_ADDR
// places := 0 ;
22456: LD_ADDR_VAR 0 3
22460: PUSH
22461: LD_INT 0
22463: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 266
22473: PUSH
22474: LD_INT 0
22476: DOUBLE
22477: EQUAL
22478: IFTRUE 22536
22480: LD_INT 1
22482: DOUBLE
22483: EQUAL
22484: IFTRUE 22536
22486: LD_INT 6
22488: DOUBLE
22489: EQUAL
22490: IFTRUE 22536
22492: LD_INT 7
22494: DOUBLE
22495: EQUAL
22496: IFTRUE 22536
22498: LD_INT 8
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22536
22504: LD_INT 4
22506: DOUBLE
22507: EQUAL
22508: IFTRUE 22536
22510: LD_INT 5
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22536
22516: LD_INT 2
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22536
22522: LD_INT 3
22524: DOUBLE
22525: EQUAL
22526: IFTRUE 22536
22528: LD_INT 35
22530: DOUBLE
22531: EQUAL
22532: IFTRUE 22536
22534: GO 22547
22536: POP
// places := 6 ; b_bunker , b_breastwork :
22537: LD_ADDR_VAR 0 3
22541: PUSH
22542: LD_INT 6
22544: ST_TO_ADDR
22545: GO 22592
22547: LD_INT 32
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22561
22553: LD_INT 31
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22572
22561: POP
// places := 1 ; b_control_tower :
22562: LD_ADDR_VAR 0 3
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
22570: GO 22592
22572: LD_INT 36
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22591
22580: POP
// places := 3 ; end ;
22581: LD_ADDR_VAR 0 3
22585: PUSH
22586: LD_INT 3
22588: ST_TO_ADDR
22589: GO 22592
22591: POP
// if places then
22592: LD_VAR 0 3
22596: IFFALSE 22619
// result := UnitsInside ( building ) < places ;
22598: LD_ADDR_VAR 0 2
22602: PUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 313
22612: PUSH
22613: LD_VAR 0 3
22617: LESS
22618: ST_TO_ADDR
// end ;
22619: LD_VAR 0 2
22623: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22624: LD_INT 0
22626: PPUSH
22627: PPUSH
22628: PPUSH
22629: PPUSH
// tmp := [ ] ;
22630: LD_ADDR_VAR 0 3
22634: PUSH
22635: EMPTY
22636: ST_TO_ADDR
// list := [ ] ;
22637: LD_ADDR_VAR 0 5
22641: PUSH
22642: EMPTY
22643: ST_TO_ADDR
// for i = 16 to 25 do
22644: LD_ADDR_VAR 0 4
22648: PUSH
22649: DOUBLE
22650: LD_INT 16
22652: DEC
22653: ST_TO_ADDR
22654: LD_INT 25
22656: PUSH
22657: FOR_TO
22658: IFFALSE 22731
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22660: LD_ADDR_VAR 0 3
22664: PUSH
22665: LD_VAR 0 3
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_VAR 0 1
22677: PPUSH
22678: CALL_OW 255
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 91
22689: PUSH
22690: LD_VAR 0 1
22694: PUSH
22695: LD_INT 6
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_VAR 0 4
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: PPUSH
22723: CALL_OW 69
22727: ADD
22728: ST_TO_ADDR
22729: GO 22657
22731: POP
22732: POP
// for i = 1 to tmp do
22733: LD_ADDR_VAR 0 4
22737: PUSH
22738: DOUBLE
22739: LD_INT 1
22741: DEC
22742: ST_TO_ADDR
22743: LD_VAR 0 3
22747: PUSH
22748: FOR_TO
22749: IFFALSE 22837
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22751: LD_ADDR_VAR 0 5
22755: PUSH
22756: LD_VAR 0 5
22760: PUSH
22761: LD_VAR 0 3
22765: PUSH
22766: LD_VAR 0 4
22770: ARRAY
22771: PPUSH
22772: CALL_OW 266
22776: PUSH
22777: LD_VAR 0 3
22781: PUSH
22782: LD_VAR 0 4
22786: ARRAY
22787: PPUSH
22788: CALL_OW 250
22792: PUSH
22793: LD_VAR 0 3
22797: PUSH
22798: LD_VAR 0 4
22802: ARRAY
22803: PPUSH
22804: CALL_OW 251
22808: PUSH
22809: LD_VAR 0 3
22813: PUSH
22814: LD_VAR 0 4
22818: ARRAY
22819: PPUSH
22820: CALL_OW 254
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: ADD
22834: ST_TO_ADDR
22835: GO 22748
22837: POP
22838: POP
// result := list ;
22839: LD_ADDR_VAR 0 2
22843: PUSH
22844: LD_VAR 0 5
22848: ST_TO_ADDR
// end ;
22849: LD_VAR 0 2
22853: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22854: LD_INT 0
22856: PPUSH
22857: PPUSH
22858: PPUSH
22859: PPUSH
22860: PPUSH
22861: PPUSH
22862: PPUSH
// if not factory then
22863: LD_VAR 0 1
22867: NOT
22868: IFFALSE 22872
// exit ;
22870: GO 23465
// if control = control_apeman then
22872: LD_VAR 0 4
22876: PUSH
22877: LD_INT 5
22879: EQUAL
22880: IFFALSE 22989
// begin tmp := UnitsInside ( factory ) ;
22882: LD_ADDR_VAR 0 8
22886: PUSH
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 313
22896: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22897: LD_VAR 0 8
22901: PPUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 12
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PPUSH
22912: CALL_OW 72
22916: NOT
22917: IFFALSE 22927
// control := control_manual ;
22919: LD_ADDR_VAR 0 4
22923: PUSH
22924: LD_INT 1
22926: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22927: LD_ADDR_VAR 0 8
22931: PUSH
22932: LD_VAR 0 1
22936: PPUSH
22937: CALL 22624 0 1
22941: ST_TO_ADDR
// if tmp then
22942: LD_VAR 0 8
22946: IFFALSE 22989
// begin for i in tmp do
22948: LD_ADDR_VAR 0 7
22952: PUSH
22953: LD_VAR 0 8
22957: PUSH
22958: FOR_IN
22959: IFFALSE 22987
// if i [ 1 ] = b_ext_radio then
22961: LD_VAR 0 7
22965: PUSH
22966: LD_INT 1
22968: ARRAY
22969: PUSH
22970: LD_INT 22
22972: EQUAL
22973: IFFALSE 22985
// begin control := control_remote ;
22975: LD_ADDR_VAR 0 4
22979: PUSH
22980: LD_INT 2
22982: ST_TO_ADDR
// break ;
22983: GO 22987
// end ;
22985: GO 22958
22987: POP
22988: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22989: LD_VAR 0 1
22993: PPUSH
22994: LD_VAR 0 2
22998: PPUSH
22999: LD_VAR 0 3
23003: PPUSH
23004: LD_VAR 0 4
23008: PPUSH
23009: LD_VAR 0 5
23013: PPUSH
23014: CALL_OW 448
23018: IFFALSE 23053
// begin result := [ chassis , engine , control , weapon ] ;
23020: LD_ADDR_VAR 0 6
23024: PUSH
23025: LD_VAR 0 2
23029: PUSH
23030: LD_VAR 0 3
23034: PUSH
23035: LD_VAR 0 4
23039: PUSH
23040: LD_VAR 0 5
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: ST_TO_ADDR
// exit ;
23051: GO 23465
// end ; _chassis := AvailableChassisList ( factory ) ;
23053: LD_ADDR_VAR 0 9
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 475
23067: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23068: LD_ADDR_VAR 0 11
23072: PUSH
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL_OW 476
23082: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23083: LD_ADDR_VAR 0 12
23087: PUSH
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 477
23097: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23098: LD_ADDR_VAR 0 10
23102: PUSH
23103: LD_VAR 0 1
23107: PPUSH
23108: CALL_OW 478
23112: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23113: LD_VAR 0 9
23117: NOT
23118: PUSH
23119: LD_VAR 0 11
23123: NOT
23124: OR
23125: PUSH
23126: LD_VAR 0 12
23130: NOT
23131: OR
23132: PUSH
23133: LD_VAR 0 10
23137: NOT
23138: OR
23139: IFFALSE 23174
// begin result := [ chassis , engine , control , weapon ] ;
23141: LD_ADDR_VAR 0 6
23145: PUSH
23146: LD_VAR 0 2
23150: PUSH
23151: LD_VAR 0 3
23155: PUSH
23156: LD_VAR 0 4
23160: PUSH
23161: LD_VAR 0 5
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: ST_TO_ADDR
// exit ;
23172: GO 23465
// end ; if not chassis in _chassis then
23174: LD_VAR 0 2
23178: PUSH
23179: LD_VAR 0 9
23183: IN
23184: NOT
23185: IFFALSE 23211
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23187: LD_ADDR_VAR 0 2
23191: PUSH
23192: LD_VAR 0 9
23196: PUSH
23197: LD_INT 1
23199: PPUSH
23200: LD_VAR 0 9
23204: PPUSH
23205: CALL_OW 12
23209: ARRAY
23210: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23211: LD_VAR 0 2
23215: PPUSH
23216: LD_VAR 0 3
23220: PPUSH
23221: CALL 23470 0 2
23225: NOT
23226: IFFALSE 23285
// repeat engine := _engine [ 1 ] ;
23228: LD_ADDR_VAR 0 3
23232: PUSH
23233: LD_VAR 0 11
23237: PUSH
23238: LD_INT 1
23240: ARRAY
23241: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23242: LD_ADDR_VAR 0 11
23246: PUSH
23247: LD_VAR 0 11
23251: PPUSH
23252: LD_INT 1
23254: PPUSH
23255: CALL_OW 3
23259: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23260: LD_VAR 0 2
23264: PPUSH
23265: LD_VAR 0 3
23269: PPUSH
23270: CALL 23470 0 2
23274: PUSH
23275: LD_VAR 0 11
23279: PUSH
23280: EMPTY
23281: EQUAL
23282: OR
23283: IFFALSE 23228
// if not control in _control then
23285: LD_VAR 0 4
23289: PUSH
23290: LD_VAR 0 12
23294: IN
23295: NOT
23296: IFFALSE 23322
// control := _control [ rand ( 1 , _control ) ] ;
23298: LD_ADDR_VAR 0 4
23302: PUSH
23303: LD_VAR 0 12
23307: PUSH
23308: LD_INT 1
23310: PPUSH
23311: LD_VAR 0 12
23315: PPUSH
23316: CALL_OW 12
23320: ARRAY
23321: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23322: LD_VAR 0 2
23326: PPUSH
23327: LD_VAR 0 5
23331: PPUSH
23332: CALL 23690 0 2
23336: NOT
23337: IFFALSE 23396
// repeat weapon := _weapon [ 1 ] ;
23339: LD_ADDR_VAR 0 5
23343: PUSH
23344: LD_VAR 0 10
23348: PUSH
23349: LD_INT 1
23351: ARRAY
23352: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23353: LD_ADDR_VAR 0 10
23357: PUSH
23358: LD_VAR 0 10
23362: PPUSH
23363: LD_INT 1
23365: PPUSH
23366: CALL_OW 3
23370: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23371: LD_VAR 0 2
23375: PPUSH
23376: LD_VAR 0 5
23380: PPUSH
23381: CALL 23690 0 2
23385: PUSH
23386: LD_VAR 0 10
23390: PUSH
23391: EMPTY
23392: EQUAL
23393: OR
23394: IFFALSE 23339
// result := [ ] ;
23396: LD_ADDR_VAR 0 6
23400: PUSH
23401: EMPTY
23402: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23403: LD_VAR 0 1
23407: PPUSH
23408: LD_VAR 0 2
23412: PPUSH
23413: LD_VAR 0 3
23417: PPUSH
23418: LD_VAR 0 4
23422: PPUSH
23423: LD_VAR 0 5
23427: PPUSH
23428: CALL_OW 448
23432: IFFALSE 23465
// result := [ chassis , engine , control , weapon ] ;
23434: LD_ADDR_VAR 0 6
23438: PUSH
23439: LD_VAR 0 2
23443: PUSH
23444: LD_VAR 0 3
23448: PUSH
23449: LD_VAR 0 4
23453: PUSH
23454: LD_VAR 0 5
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: ST_TO_ADDR
// end ;
23465: LD_VAR 0 6
23469: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23470: LD_INT 0
23472: PPUSH
// if not chassis or not engine then
23473: LD_VAR 0 1
23477: NOT
23478: PUSH
23479: LD_VAR 0 2
23483: NOT
23484: OR
23485: IFFALSE 23489
// exit ;
23487: GO 23685
// case engine of engine_solar :
23489: LD_VAR 0 2
23493: PUSH
23494: LD_INT 2
23496: DOUBLE
23497: EQUAL
23498: IFTRUE 23502
23500: GO 23540
23502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23503: LD_ADDR_VAR 0 3
23507: PUSH
23508: LD_INT 11
23510: PUSH
23511: LD_INT 12
23513: PUSH
23514: LD_INT 13
23516: PUSH
23517: LD_INT 14
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: LD_INT 3
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: ST_TO_ADDR
23538: GO 23669
23540: LD_INT 1
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23610
23548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23549: LD_ADDR_VAR 0 3
23553: PUSH
23554: LD_INT 11
23556: PUSH
23557: LD_INT 12
23559: PUSH
23560: LD_INT 13
23562: PUSH
23563: LD_INT 14
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: LD_INT 3
23574: PUSH
23575: LD_INT 4
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 21
23583: PUSH
23584: LD_INT 23
23586: PUSH
23587: LD_INT 22
23589: PUSH
23590: LD_INT 24
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 23669
23610: LD_INT 3
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23668
23618: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_INT 13
23626: PUSH
23627: LD_INT 14
23629: PUSH
23630: LD_INT 2
23632: PUSH
23633: LD_INT 3
23635: PUSH
23636: LD_INT 4
23638: PUSH
23639: LD_INT 5
23641: PUSH
23642: LD_INT 21
23644: PUSH
23645: LD_INT 22
23647: PUSH
23648: LD_INT 23
23650: PUSH
23651: LD_INT 24
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: ST_TO_ADDR
23666: GO 23669
23668: POP
// result := ( chassis in result ) ;
23669: LD_ADDR_VAR 0 3
23673: PUSH
23674: LD_VAR 0 1
23678: PUSH
23679: LD_VAR 0 3
23683: IN
23684: ST_TO_ADDR
// end ;
23685: LD_VAR 0 3
23689: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23690: LD_INT 0
23692: PPUSH
// if not chassis or not weapon then
23693: LD_VAR 0 1
23697: NOT
23698: PUSH
23699: LD_VAR 0 2
23703: NOT
23704: OR
23705: IFFALSE 23709
// exit ;
23707: GO 24769
// case weapon of us_machine_gun :
23709: LD_VAR 0 2
23713: PUSH
23714: LD_INT 2
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23722
23720: GO 23752
23722: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23723: LD_ADDR_VAR 0 3
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: LD_INT 3
23736: PUSH
23737: LD_INT 4
23739: PUSH
23740: LD_INT 5
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: ST_TO_ADDR
23750: GO 24753
23752: LD_INT 3
23754: DOUBLE
23755: EQUAL
23756: IFTRUE 23760
23758: GO 23790
23760: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23761: LD_ADDR_VAR 0 3
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: LD_INT 3
23774: PUSH
23775: LD_INT 4
23777: PUSH
23778: LD_INT 5
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
23788: GO 24753
23790: LD_INT 11
23792: DOUBLE
23793: EQUAL
23794: IFTRUE 23798
23796: GO 23828
23798: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23799: LD_ADDR_VAR 0 3
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: LD_INT 2
23809: PUSH
23810: LD_INT 3
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: ST_TO_ADDR
23826: GO 24753
23828: LD_INT 4
23830: DOUBLE
23831: EQUAL
23832: IFTRUE 23836
23834: GO 23862
23836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23837: LD_ADDR_VAR 0 3
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: LD_INT 3
23847: PUSH
23848: LD_INT 4
23850: PUSH
23851: LD_INT 5
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: ST_TO_ADDR
23860: GO 24753
23862: LD_INT 5
23864: DOUBLE
23865: EQUAL
23866: IFTRUE 23870
23868: GO 23896
23870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23871: LD_ADDR_VAR 0 3
23875: PUSH
23876: LD_INT 2
23878: PUSH
23879: LD_INT 3
23881: PUSH
23882: LD_INT 4
23884: PUSH
23885: LD_INT 5
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: ST_TO_ADDR
23894: GO 24753
23896: LD_INT 9
23898: DOUBLE
23899: EQUAL
23900: IFTRUE 23904
23902: GO 23930
23904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23905: LD_ADDR_VAR 0 3
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: LD_INT 4
23918: PUSH
23919: LD_INT 5
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: ST_TO_ADDR
23928: GO 24753
23930: LD_INT 7
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23964
23938: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23939: LD_ADDR_VAR 0 3
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: LD_INT 4
23952: PUSH
23953: LD_INT 5
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: ST_TO_ADDR
23962: GO 24753
23964: LD_INT 12
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 23998
23972: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23973: LD_ADDR_VAR 0 3
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 3
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 5
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: ST_TO_ADDR
23996: GO 24753
23998: LD_INT 13
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24032
24006: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24007: LD_ADDR_VAR 0 3
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: LD_INT 4
24020: PUSH
24021: LD_INT 5
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: ST_TO_ADDR
24030: GO 24753
24032: LD_INT 14
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24058
24040: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24041: LD_ADDR_VAR 0 3
24045: PUSH
24046: LD_INT 4
24048: PUSH
24049: LD_INT 5
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: ST_TO_ADDR
24056: GO 24753
24058: LD_INT 6
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24084
24066: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24067: LD_ADDR_VAR 0 3
24071: PUSH
24072: LD_INT 4
24074: PUSH
24075: LD_INT 5
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: ST_TO_ADDR
24082: GO 24753
24084: LD_INT 10
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24110
24092: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24093: LD_ADDR_VAR 0 3
24097: PUSH
24098: LD_INT 4
24100: PUSH
24101: LD_INT 5
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: ST_TO_ADDR
24108: GO 24753
24110: LD_INT 22
24112: DOUBLE
24113: EQUAL
24114: IFTRUE 24118
24116: GO 24144
24118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24119: LD_ADDR_VAR 0 3
24123: PUSH
24124: LD_INT 11
24126: PUSH
24127: LD_INT 12
24129: PUSH
24130: LD_INT 13
24132: PUSH
24133: LD_INT 14
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: ST_TO_ADDR
24142: GO 24753
24144: LD_INT 23
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24178
24152: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24153: LD_ADDR_VAR 0 3
24157: PUSH
24158: LD_INT 11
24160: PUSH
24161: LD_INT 12
24163: PUSH
24164: LD_INT 13
24166: PUSH
24167: LD_INT 14
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
24176: GO 24753
24178: LD_INT 24
24180: DOUBLE
24181: EQUAL
24182: IFTRUE 24186
24184: GO 24212
24186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: LD_INT 11
24194: PUSH
24195: LD_INT 12
24197: PUSH
24198: LD_INT 13
24200: PUSH
24201: LD_INT 14
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
24210: GO 24753
24212: LD_INT 30
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24246
24220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: LD_INT 11
24228: PUSH
24229: LD_INT 12
24231: PUSH
24232: LD_INT 13
24234: PUSH
24235: LD_INT 14
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 24753
24246: LD_INT 25
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24272
24254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 13
24262: PUSH
24263: LD_INT 14
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: ST_TO_ADDR
24270: GO 24753
24272: LD_INT 27
24274: DOUBLE
24275: EQUAL
24276: IFTRUE 24280
24278: GO 24298
24280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24281: LD_ADDR_VAR 0 3
24285: PUSH
24286: LD_INT 13
24288: PUSH
24289: LD_INT 14
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: ST_TO_ADDR
24296: GO 24753
24298: LD_INT 92
24300: DOUBLE
24301: EQUAL
24302: IFTRUE 24306
24304: GO 24332
24306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_INT 11
24314: PUSH
24315: LD_INT 12
24317: PUSH
24318: LD_INT 13
24320: PUSH
24321: LD_INT 14
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: ST_TO_ADDR
24330: GO 24753
24332: LD_INT 28
24334: DOUBLE
24335: EQUAL
24336: IFTRUE 24340
24338: GO 24358
24340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24341: LD_ADDR_VAR 0 3
24345: PUSH
24346: LD_INT 13
24348: PUSH
24349: LD_INT 14
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: ST_TO_ADDR
24356: GO 24753
24358: LD_INT 29
24360: DOUBLE
24361: EQUAL
24362: IFTRUE 24366
24364: GO 24384
24366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24367: LD_ADDR_VAR 0 3
24371: PUSH
24372: LD_INT 13
24374: PUSH
24375: LD_INT 14
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: ST_TO_ADDR
24382: GO 24753
24384: LD_INT 31
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24410
24392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24393: LD_ADDR_VAR 0 3
24397: PUSH
24398: LD_INT 13
24400: PUSH
24401: LD_INT 14
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: ST_TO_ADDR
24408: GO 24753
24410: LD_INT 26
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24436
24418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24419: LD_ADDR_VAR 0 3
24423: PUSH
24424: LD_INT 13
24426: PUSH
24427: LD_INT 14
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: ST_TO_ADDR
24434: GO 24753
24436: LD_INT 42
24438: DOUBLE
24439: EQUAL
24440: IFTRUE 24444
24442: GO 24470
24444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24445: LD_ADDR_VAR 0 3
24449: PUSH
24450: LD_INT 21
24452: PUSH
24453: LD_INT 22
24455: PUSH
24456: LD_INT 23
24458: PUSH
24459: LD_INT 24
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: ST_TO_ADDR
24468: GO 24753
24470: LD_INT 43
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24504
24478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24479: LD_ADDR_VAR 0 3
24483: PUSH
24484: LD_INT 21
24486: PUSH
24487: LD_INT 22
24489: PUSH
24490: LD_INT 23
24492: PUSH
24493: LD_INT 24
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: ST_TO_ADDR
24502: GO 24753
24504: LD_INT 44
24506: DOUBLE
24507: EQUAL
24508: IFTRUE 24512
24510: GO 24538
24512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24513: LD_ADDR_VAR 0 3
24517: PUSH
24518: LD_INT 21
24520: PUSH
24521: LD_INT 22
24523: PUSH
24524: LD_INT 23
24526: PUSH
24527: LD_INT 24
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: ST_TO_ADDR
24536: GO 24753
24538: LD_INT 45
24540: DOUBLE
24541: EQUAL
24542: IFTRUE 24546
24544: GO 24572
24546: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24547: LD_ADDR_VAR 0 3
24551: PUSH
24552: LD_INT 21
24554: PUSH
24555: LD_INT 22
24557: PUSH
24558: LD_INT 23
24560: PUSH
24561: LD_INT 24
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: ST_TO_ADDR
24570: GO 24753
24572: LD_INT 49
24574: DOUBLE
24575: EQUAL
24576: IFTRUE 24580
24578: GO 24606
24580: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: LD_INT 21
24588: PUSH
24589: LD_INT 22
24591: PUSH
24592: LD_INT 23
24594: PUSH
24595: LD_INT 24
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: ST_TO_ADDR
24604: GO 24753
24606: LD_INT 51
24608: DOUBLE
24609: EQUAL
24610: IFTRUE 24614
24612: GO 24640
24614: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24615: LD_ADDR_VAR 0 3
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_INT 23
24628: PUSH
24629: LD_INT 24
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: ST_TO_ADDR
24638: GO 24753
24640: LD_INT 52
24642: DOUBLE
24643: EQUAL
24644: IFTRUE 24648
24646: GO 24674
24648: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24649: LD_ADDR_VAR 0 3
24653: PUSH
24654: LD_INT 21
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_INT 23
24662: PUSH
24663: LD_INT 24
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 24753
24674: LD_INT 53
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24700
24682: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 23
24690: PUSH
24691: LD_INT 24
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: ST_TO_ADDR
24698: GO 24753
24700: LD_INT 46
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24726
24708: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_INT 23
24716: PUSH
24717: LD_INT 24
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: ST_TO_ADDR
24724: GO 24753
24726: LD_INT 47
24728: DOUBLE
24729: EQUAL
24730: IFTRUE 24734
24732: GO 24752
24734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24735: LD_ADDR_VAR 0 3
24739: PUSH
24740: LD_INT 23
24742: PUSH
24743: LD_INT 24
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: ST_TO_ADDR
24750: GO 24753
24752: POP
// result := ( chassis in result ) ;
24753: LD_ADDR_VAR 0 3
24757: PUSH
24758: LD_VAR 0 1
24762: PUSH
24763: LD_VAR 0 3
24767: IN
24768: ST_TO_ADDR
// end ;
24769: LD_VAR 0 3
24773: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24774: LD_INT 0
24776: PPUSH
24777: PPUSH
24778: PPUSH
24779: PPUSH
24780: PPUSH
24781: PPUSH
24782: PPUSH
// result := array ;
24783: LD_ADDR_VAR 0 5
24787: PUSH
24788: LD_VAR 0 1
24792: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24793: LD_VAR 0 1
24797: NOT
24798: PUSH
24799: LD_VAR 0 2
24803: NOT
24804: OR
24805: PUSH
24806: LD_VAR 0 3
24810: NOT
24811: OR
24812: PUSH
24813: LD_VAR 0 2
24817: PUSH
24818: LD_VAR 0 1
24822: GREATER
24823: OR
24824: PUSH
24825: LD_VAR 0 3
24829: PUSH
24830: LD_VAR 0 1
24834: GREATER
24835: OR
24836: IFFALSE 24840
// exit ;
24838: GO 25136
// if direction then
24840: LD_VAR 0 4
24844: IFFALSE 24908
// begin d := 1 ;
24846: LD_ADDR_VAR 0 9
24850: PUSH
24851: LD_INT 1
24853: ST_TO_ADDR
// if i_from > i_to then
24854: LD_VAR 0 2
24858: PUSH
24859: LD_VAR 0 3
24863: GREATER
24864: IFFALSE 24890
// length := ( array - i_from ) + i_to else
24866: LD_ADDR_VAR 0 11
24870: PUSH
24871: LD_VAR 0 1
24875: PUSH
24876: LD_VAR 0 2
24880: MINUS
24881: PUSH
24882: LD_VAR 0 3
24886: PLUS
24887: ST_TO_ADDR
24888: GO 24906
// length := i_to - i_from ;
24890: LD_ADDR_VAR 0 11
24894: PUSH
24895: LD_VAR 0 3
24899: PUSH
24900: LD_VAR 0 2
24904: MINUS
24905: ST_TO_ADDR
// end else
24906: GO 24969
// begin d := - 1 ;
24908: LD_ADDR_VAR 0 9
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: ST_TO_ADDR
// if i_from > i_to then
24917: LD_VAR 0 2
24921: PUSH
24922: LD_VAR 0 3
24926: GREATER
24927: IFFALSE 24947
// length := i_from - i_to else
24929: LD_ADDR_VAR 0 11
24933: PUSH
24934: LD_VAR 0 2
24938: PUSH
24939: LD_VAR 0 3
24943: MINUS
24944: ST_TO_ADDR
24945: GO 24969
// length := ( array - i_to ) + i_from ;
24947: LD_ADDR_VAR 0 11
24951: PUSH
24952: LD_VAR 0 1
24956: PUSH
24957: LD_VAR 0 3
24961: MINUS
24962: PUSH
24963: LD_VAR 0 2
24967: PLUS
24968: ST_TO_ADDR
// end ; if not length then
24969: LD_VAR 0 11
24973: NOT
24974: IFFALSE 24978
// exit ;
24976: GO 25136
// tmp := array ;
24978: LD_ADDR_VAR 0 10
24982: PUSH
24983: LD_VAR 0 1
24987: ST_TO_ADDR
// for i = 1 to length do
24988: LD_ADDR_VAR 0 6
24992: PUSH
24993: DOUBLE
24994: LD_INT 1
24996: DEC
24997: ST_TO_ADDR
24998: LD_VAR 0 11
25002: PUSH
25003: FOR_TO
25004: IFFALSE 25124
// begin for j = 1 to array do
25006: LD_ADDR_VAR 0 7
25010: PUSH
25011: DOUBLE
25012: LD_INT 1
25014: DEC
25015: ST_TO_ADDR
25016: LD_VAR 0 1
25020: PUSH
25021: FOR_TO
25022: IFFALSE 25110
// begin k := j + d ;
25024: LD_ADDR_VAR 0 8
25028: PUSH
25029: LD_VAR 0 7
25033: PUSH
25034: LD_VAR 0 9
25038: PLUS
25039: ST_TO_ADDR
// if k > array then
25040: LD_VAR 0 8
25044: PUSH
25045: LD_VAR 0 1
25049: GREATER
25050: IFFALSE 25060
// k := 1 ;
25052: LD_ADDR_VAR 0 8
25056: PUSH
25057: LD_INT 1
25059: ST_TO_ADDR
// if not k then
25060: LD_VAR 0 8
25064: NOT
25065: IFFALSE 25077
// k := array ;
25067: LD_ADDR_VAR 0 8
25071: PUSH
25072: LD_VAR 0 1
25076: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25077: LD_ADDR_VAR 0 10
25081: PUSH
25082: LD_VAR 0 10
25086: PPUSH
25087: LD_VAR 0 8
25091: PPUSH
25092: LD_VAR 0 1
25096: PUSH
25097: LD_VAR 0 7
25101: ARRAY
25102: PPUSH
25103: CALL_OW 1
25107: ST_TO_ADDR
// end ;
25108: GO 25021
25110: POP
25111: POP
// array := tmp ;
25112: LD_ADDR_VAR 0 1
25116: PUSH
25117: LD_VAR 0 10
25121: ST_TO_ADDR
// end ;
25122: GO 25003
25124: POP
25125: POP
// result := array ;
25126: LD_ADDR_VAR 0 5
25130: PUSH
25131: LD_VAR 0 1
25135: ST_TO_ADDR
// end ;
25136: LD_VAR 0 5
25140: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25141: LD_INT 0
25143: PPUSH
25144: PPUSH
// result := 0 ;
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: LD_INT 0
25152: ST_TO_ADDR
// if not array or not value in array then
25153: LD_VAR 0 1
25157: NOT
25158: PUSH
25159: LD_VAR 0 2
25163: PUSH
25164: LD_VAR 0 1
25168: IN
25169: NOT
25170: OR
25171: IFFALSE 25175
// exit ;
25173: GO 25229
// for i = 1 to array do
25175: LD_ADDR_VAR 0 4
25179: PUSH
25180: DOUBLE
25181: LD_INT 1
25183: DEC
25184: ST_TO_ADDR
25185: LD_VAR 0 1
25189: PUSH
25190: FOR_TO
25191: IFFALSE 25227
// if value = array [ i ] then
25193: LD_VAR 0 2
25197: PUSH
25198: LD_VAR 0 1
25202: PUSH
25203: LD_VAR 0 4
25207: ARRAY
25208: EQUAL
25209: IFFALSE 25225
// begin result := i ;
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_VAR 0 4
25220: ST_TO_ADDR
// exit ;
25221: POP
25222: POP
25223: GO 25229
// end ;
25225: GO 25190
25227: POP
25228: POP
// end ;
25229: LD_VAR 0 3
25233: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25234: LD_INT 0
25236: PPUSH
// vc_chassis := chassis ;
25237: LD_ADDR_OWVAR 37
25241: PUSH
25242: LD_VAR 0 1
25246: ST_TO_ADDR
// vc_engine := engine ;
25247: LD_ADDR_OWVAR 39
25251: PUSH
25252: LD_VAR 0 2
25256: ST_TO_ADDR
// vc_control := control ;
25257: LD_ADDR_OWVAR 38
25261: PUSH
25262: LD_VAR 0 3
25266: ST_TO_ADDR
// vc_weapon := weapon ;
25267: LD_ADDR_OWVAR 40
25271: PUSH
25272: LD_VAR 0 4
25276: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25277: LD_ADDR_OWVAR 41
25281: PUSH
25282: LD_VAR 0 5
25286: ST_TO_ADDR
// end ;
25287: LD_VAR 0 6
25291: RET
// export function WantPlant ( unit ) ; var task ; begin
25292: LD_INT 0
25294: PPUSH
25295: PPUSH
// result := false ;
25296: LD_ADDR_VAR 0 2
25300: PUSH
25301: LD_INT 0
25303: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25304: LD_ADDR_VAR 0 3
25308: PUSH
25309: LD_VAR 0 1
25313: PPUSH
25314: CALL_OW 437
25318: ST_TO_ADDR
// if task then
25319: LD_VAR 0 3
25323: IFFALSE 25351
// if task [ 1 ] [ 1 ] = p then
25325: LD_VAR 0 3
25329: PUSH
25330: LD_INT 1
25332: ARRAY
25333: PUSH
25334: LD_INT 1
25336: ARRAY
25337: PUSH
25338: LD_STRING p
25340: EQUAL
25341: IFFALSE 25351
// result := true ;
25343: LD_ADDR_VAR 0 2
25347: PUSH
25348: LD_INT 1
25350: ST_TO_ADDR
// end ;
25351: LD_VAR 0 2
25355: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25356: LD_INT 0
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
// if pos < 1 then
25362: LD_VAR 0 2
25366: PUSH
25367: LD_INT 1
25369: LESS
25370: IFFALSE 25374
// exit ;
25372: GO 25677
// if pos = 1 then
25374: LD_VAR 0 2
25378: PUSH
25379: LD_INT 1
25381: EQUAL
25382: IFFALSE 25415
// result := Replace ( arr , pos [ 1 ] , value ) else
25384: LD_ADDR_VAR 0 4
25388: PUSH
25389: LD_VAR 0 1
25393: PPUSH
25394: LD_VAR 0 2
25398: PUSH
25399: LD_INT 1
25401: ARRAY
25402: PPUSH
25403: LD_VAR 0 3
25407: PPUSH
25408: CALL_OW 1
25412: ST_TO_ADDR
25413: GO 25677
// begin tmp := arr ;
25415: LD_ADDR_VAR 0 6
25419: PUSH
25420: LD_VAR 0 1
25424: ST_TO_ADDR
// s_arr := [ tmp ] ;
25425: LD_ADDR_VAR 0 7
25429: PUSH
25430: LD_VAR 0 6
25434: PUSH
25435: EMPTY
25436: LIST
25437: ST_TO_ADDR
// for i = 1 to pos - 1 do
25438: LD_ADDR_VAR 0 5
25442: PUSH
25443: DOUBLE
25444: LD_INT 1
25446: DEC
25447: ST_TO_ADDR
25448: LD_VAR 0 2
25452: PUSH
25453: LD_INT 1
25455: MINUS
25456: PUSH
25457: FOR_TO
25458: IFFALSE 25503
// begin tmp := tmp [ pos [ i ] ] ;
25460: LD_ADDR_VAR 0 6
25464: PUSH
25465: LD_VAR 0 6
25469: PUSH
25470: LD_VAR 0 2
25474: PUSH
25475: LD_VAR 0 5
25479: ARRAY
25480: ARRAY
25481: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25482: LD_ADDR_VAR 0 7
25486: PUSH
25487: LD_VAR 0 7
25491: PUSH
25492: LD_VAR 0 6
25496: PUSH
25497: EMPTY
25498: LIST
25499: ADD
25500: ST_TO_ADDR
// end ;
25501: GO 25457
25503: POP
25504: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25505: LD_ADDR_VAR 0 6
25509: PUSH
25510: LD_VAR 0 6
25514: PPUSH
25515: LD_VAR 0 2
25519: PUSH
25520: LD_VAR 0 2
25524: ARRAY
25525: PPUSH
25526: LD_VAR 0 3
25530: PPUSH
25531: CALL_OW 1
25535: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25536: LD_ADDR_VAR 0 7
25540: PUSH
25541: LD_VAR 0 7
25545: PPUSH
25546: LD_VAR 0 7
25550: PPUSH
25551: LD_VAR 0 6
25555: PPUSH
25556: CALL_OW 1
25560: ST_TO_ADDR
// for i = s_arr downto 2 do
25561: LD_ADDR_VAR 0 5
25565: PUSH
25566: DOUBLE
25567: LD_VAR 0 7
25571: INC
25572: ST_TO_ADDR
25573: LD_INT 2
25575: PUSH
25576: FOR_DOWNTO
25577: IFFALSE 25661
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25579: LD_ADDR_VAR 0 6
25583: PUSH
25584: LD_VAR 0 7
25588: PUSH
25589: LD_VAR 0 5
25593: PUSH
25594: LD_INT 1
25596: MINUS
25597: ARRAY
25598: PPUSH
25599: LD_VAR 0 2
25603: PUSH
25604: LD_VAR 0 5
25608: PUSH
25609: LD_INT 1
25611: MINUS
25612: ARRAY
25613: PPUSH
25614: LD_VAR 0 7
25618: PUSH
25619: LD_VAR 0 5
25623: ARRAY
25624: PPUSH
25625: CALL_OW 1
25629: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25630: LD_ADDR_VAR 0 7
25634: PUSH
25635: LD_VAR 0 7
25639: PPUSH
25640: LD_VAR 0 5
25644: PUSH
25645: LD_INT 1
25647: MINUS
25648: PPUSH
25649: LD_VAR 0 6
25653: PPUSH
25654: CALL_OW 1
25658: ST_TO_ADDR
// end ;
25659: GO 25576
25661: POP
25662: POP
// result := s_arr [ 1 ] ;
25663: LD_ADDR_VAR 0 4
25667: PUSH
25668: LD_VAR 0 7
25672: PUSH
25673: LD_INT 1
25675: ARRAY
25676: ST_TO_ADDR
// end ; end ;
25677: LD_VAR 0 4
25681: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25682: LD_INT 0
25684: PPUSH
25685: PPUSH
// if not list then
25686: LD_VAR 0 1
25690: NOT
25691: IFFALSE 25695
// exit ;
25693: GO 25786
// i := list [ pos1 ] ;
25695: LD_ADDR_VAR 0 5
25699: PUSH
25700: LD_VAR 0 1
25704: PUSH
25705: LD_VAR 0 2
25709: ARRAY
25710: ST_TO_ADDR
// if not i then
25711: LD_VAR 0 5
25715: NOT
25716: IFFALSE 25720
// exit ;
25718: GO 25786
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25720: LD_ADDR_VAR 0 1
25724: PUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: LD_VAR 0 2
25734: PPUSH
25735: LD_VAR 0 1
25739: PUSH
25740: LD_VAR 0 3
25744: ARRAY
25745: PPUSH
25746: CALL_OW 1
25750: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25751: LD_ADDR_VAR 0 1
25755: PUSH
25756: LD_VAR 0 1
25760: PPUSH
25761: LD_VAR 0 3
25765: PPUSH
25766: LD_VAR 0 5
25770: PPUSH
25771: CALL_OW 1
25775: ST_TO_ADDR
// result := list ;
25776: LD_ADDR_VAR 0 4
25780: PUSH
25781: LD_VAR 0 1
25785: ST_TO_ADDR
// end ;
25786: LD_VAR 0 4
25790: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25791: LD_INT 0
25793: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25794: LD_ADDR_VAR 0 5
25798: PUSH
25799: LD_VAR 0 1
25803: PPUSH
25804: CALL_OW 250
25808: PPUSH
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 251
25818: PPUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: LD_VAR 0 3
25828: PPUSH
25829: LD_VAR 0 4
25833: PPUSH
25834: CALL 25844 0 5
25838: ST_TO_ADDR
// end ;
25839: LD_VAR 0 5
25843: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25844: LD_INT 0
25846: PPUSH
25847: PPUSH
25848: PPUSH
25849: PPUSH
// if not list then
25850: LD_VAR 0 3
25854: NOT
25855: IFFALSE 25859
// exit ;
25857: GO 26247
// result := [ ] ;
25859: LD_ADDR_VAR 0 6
25863: PUSH
25864: EMPTY
25865: ST_TO_ADDR
// for i in list do
25866: LD_ADDR_VAR 0 7
25870: PUSH
25871: LD_VAR 0 3
25875: PUSH
25876: FOR_IN
25877: IFFALSE 26079
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25879: LD_ADDR_VAR 0 9
25883: PUSH
25884: LD_VAR 0 7
25888: PPUSH
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_VAR 0 2
25898: PPUSH
25899: CALL_OW 297
25903: ST_TO_ADDR
// if not result then
25904: LD_VAR 0 6
25908: NOT
25909: IFFALSE 25935
// result := [ [ i , tmp ] ] else
25911: LD_ADDR_VAR 0 6
25915: PUSH
25916: LD_VAR 0 7
25920: PUSH
25921: LD_VAR 0 9
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: EMPTY
25931: LIST
25932: ST_TO_ADDR
25933: GO 26077
// begin if result [ result ] [ 2 ] < tmp then
25935: LD_VAR 0 6
25939: PUSH
25940: LD_VAR 0 6
25944: ARRAY
25945: PUSH
25946: LD_INT 2
25948: ARRAY
25949: PUSH
25950: LD_VAR 0 9
25954: LESS
25955: IFFALSE 25997
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25957: LD_ADDR_VAR 0 6
25961: PUSH
25962: LD_VAR 0 6
25966: PPUSH
25967: LD_VAR 0 6
25971: PUSH
25972: LD_INT 1
25974: PLUS
25975: PPUSH
25976: LD_VAR 0 7
25980: PUSH
25981: LD_VAR 0 9
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PPUSH
25990: CALL_OW 2
25994: ST_TO_ADDR
25995: GO 26077
// for j = 1 to result do
25997: LD_ADDR_VAR 0 8
26001: PUSH
26002: DOUBLE
26003: LD_INT 1
26005: DEC
26006: ST_TO_ADDR
26007: LD_VAR 0 6
26011: PUSH
26012: FOR_TO
26013: IFFALSE 26075
// begin if tmp < result [ j ] [ 2 ] then
26015: LD_VAR 0 9
26019: PUSH
26020: LD_VAR 0 6
26024: PUSH
26025: LD_VAR 0 8
26029: ARRAY
26030: PUSH
26031: LD_INT 2
26033: ARRAY
26034: LESS
26035: IFFALSE 26073
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26037: LD_ADDR_VAR 0 6
26041: PUSH
26042: LD_VAR 0 6
26046: PPUSH
26047: LD_VAR 0 8
26051: PPUSH
26052: LD_VAR 0 7
26056: PUSH
26057: LD_VAR 0 9
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PPUSH
26066: CALL_OW 2
26070: ST_TO_ADDR
// break ;
26071: GO 26075
// end ; end ;
26073: GO 26012
26075: POP
26076: POP
// end ; end ;
26077: GO 25876
26079: POP
26080: POP
// if result and not asc then
26081: LD_VAR 0 6
26085: PUSH
26086: LD_VAR 0 4
26090: NOT
26091: AND
26092: IFFALSE 26167
// begin tmp := result ;
26094: LD_ADDR_VAR 0 9
26098: PUSH
26099: LD_VAR 0 6
26103: ST_TO_ADDR
// for i = tmp downto 1 do
26104: LD_ADDR_VAR 0 7
26108: PUSH
26109: DOUBLE
26110: LD_VAR 0 9
26114: INC
26115: ST_TO_ADDR
26116: LD_INT 1
26118: PUSH
26119: FOR_DOWNTO
26120: IFFALSE 26165
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26122: LD_ADDR_VAR 0 6
26126: PUSH
26127: LD_VAR 0 6
26131: PPUSH
26132: LD_VAR 0 9
26136: PUSH
26137: LD_VAR 0 7
26141: MINUS
26142: PUSH
26143: LD_INT 1
26145: PLUS
26146: PPUSH
26147: LD_VAR 0 9
26151: PUSH
26152: LD_VAR 0 7
26156: ARRAY
26157: PPUSH
26158: CALL_OW 1
26162: ST_TO_ADDR
26163: GO 26119
26165: POP
26166: POP
// end ; tmp := [ ] ;
26167: LD_ADDR_VAR 0 9
26171: PUSH
26172: EMPTY
26173: ST_TO_ADDR
// if mode then
26174: LD_VAR 0 5
26178: IFFALSE 26247
// begin for i = 1 to result do
26180: LD_ADDR_VAR 0 7
26184: PUSH
26185: DOUBLE
26186: LD_INT 1
26188: DEC
26189: ST_TO_ADDR
26190: LD_VAR 0 6
26194: PUSH
26195: FOR_TO
26196: IFFALSE 26235
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26198: LD_ADDR_VAR 0 9
26202: PUSH
26203: LD_VAR 0 9
26207: PPUSH
26208: LD_VAR 0 7
26212: PPUSH
26213: LD_VAR 0 6
26217: PUSH
26218: LD_VAR 0 7
26222: ARRAY
26223: PUSH
26224: LD_INT 1
26226: ARRAY
26227: PPUSH
26228: CALL_OW 1
26232: ST_TO_ADDR
26233: GO 26195
26235: POP
26236: POP
// result := tmp ;
26237: LD_ADDR_VAR 0 6
26241: PUSH
26242: LD_VAR 0 9
26246: ST_TO_ADDR
// end ; end ;
26247: LD_VAR 0 6
26251: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26252: LD_INT 0
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
26259: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26260: LD_ADDR_VAR 0 5
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: ST_TO_ADDR
// if not x or not y then
26282: LD_VAR 0 2
26286: NOT
26287: PUSH
26288: LD_VAR 0 3
26292: NOT
26293: OR
26294: IFFALSE 26298
// exit ;
26296: GO 27948
// if not range then
26298: LD_VAR 0 4
26302: NOT
26303: IFFALSE 26313
// range := 10 ;
26305: LD_ADDR_VAR 0 4
26309: PUSH
26310: LD_INT 10
26312: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26313: LD_ADDR_VAR 0 8
26317: PUSH
26318: LD_INT 81
26320: PUSH
26321: LD_VAR 0 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 92
26332: PUSH
26333: LD_VAR 0 2
26337: PUSH
26338: LD_VAR 0 3
26342: PUSH
26343: LD_VAR 0 4
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 3
26356: PUSH
26357: LD_INT 21
26359: PUSH
26360: LD_INT 3
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 69
26380: ST_TO_ADDR
// if not tmp then
26381: LD_VAR 0 8
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 27948
// for i in tmp do
26390: LD_ADDR_VAR 0 6
26394: PUSH
26395: LD_VAR 0 8
26399: PUSH
26400: FOR_IN
26401: IFFALSE 27923
// begin points := [ 0 , 0 , 0 ] ;
26403: LD_ADDR_VAR 0 9
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: ST_TO_ADDR
// bpoints := 1 ;
26422: LD_ADDR_VAR 0 10
26426: PUSH
26427: LD_INT 1
26429: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26430: LD_VAR 0 6
26434: PPUSH
26435: CALL_OW 247
26439: PUSH
26440: LD_INT 1
26442: DOUBLE
26443: EQUAL
26444: IFTRUE 26448
26446: GO 27026
26448: POP
// begin if GetClass ( i ) = 1 then
26449: LD_VAR 0 6
26453: PPUSH
26454: CALL_OW 257
26458: PUSH
26459: LD_INT 1
26461: EQUAL
26462: IFFALSE 26483
// points := [ 10 , 5 , 3 ] ;
26464: LD_ADDR_VAR 0 9
26468: PUSH
26469: LD_INT 10
26471: PUSH
26472: LD_INT 5
26474: PUSH
26475: LD_INT 3
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26483: LD_VAR 0 6
26487: PPUSH
26488: CALL_OW 257
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 3
26498: PUSH
26499: LD_INT 4
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: IN
26507: IFFALSE 26528
// points := [ 3 , 2 , 1 ] ;
26509: LD_ADDR_VAR 0 9
26513: PUSH
26514: LD_INT 3
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: LIST
26527: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26528: LD_VAR 0 6
26532: PPUSH
26533: CALL_OW 257
26537: PUSH
26538: LD_INT 5
26540: EQUAL
26541: IFFALSE 26562
// points := [ 130 , 5 , 2 ] ;
26543: LD_ADDR_VAR 0 9
26547: PUSH
26548: LD_INT 130
26550: PUSH
26551: LD_INT 5
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26562: LD_VAR 0 6
26566: PPUSH
26567: CALL_OW 257
26571: PUSH
26572: LD_INT 8
26574: EQUAL
26575: IFFALSE 26596
// points := [ 35 , 35 , 30 ] ;
26577: LD_ADDR_VAR 0 9
26581: PUSH
26582: LD_INT 35
26584: PUSH
26585: LD_INT 35
26587: PUSH
26588: LD_INT 30
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26596: LD_VAR 0 6
26600: PPUSH
26601: CALL_OW 257
26605: PUSH
26606: LD_INT 9
26608: EQUAL
26609: IFFALSE 26630
// points := [ 20 , 55 , 40 ] ;
26611: LD_ADDR_VAR 0 9
26615: PUSH
26616: LD_INT 20
26618: PUSH
26619: LD_INT 55
26621: PUSH
26622: LD_INT 40
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: LIST
26629: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26630: LD_VAR 0 6
26634: PPUSH
26635: CALL_OW 257
26639: PUSH
26640: LD_INT 12
26642: PUSH
26643: LD_INT 16
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: IN
26650: IFFALSE 26671
// points := [ 5 , 3 , 2 ] ;
26652: LD_ADDR_VAR 0 9
26656: PUSH
26657: LD_INT 5
26659: PUSH
26660: LD_INT 3
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26671: LD_VAR 0 6
26675: PPUSH
26676: CALL_OW 257
26680: PUSH
26681: LD_INT 17
26683: EQUAL
26684: IFFALSE 26705
// points := [ 100 , 50 , 75 ] ;
26686: LD_ADDR_VAR 0 9
26690: PUSH
26691: LD_INT 100
26693: PUSH
26694: LD_INT 50
26696: PUSH
26697: LD_INT 75
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26705: LD_VAR 0 6
26709: PPUSH
26710: CALL_OW 257
26714: PUSH
26715: LD_INT 15
26717: EQUAL
26718: IFFALSE 26739
// points := [ 10 , 5 , 3 ] ;
26720: LD_ADDR_VAR 0 9
26724: PUSH
26725: LD_INT 10
26727: PUSH
26728: LD_INT 5
26730: PUSH
26731: LD_INT 3
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26739: LD_VAR 0 6
26743: PPUSH
26744: CALL_OW 257
26748: PUSH
26749: LD_INT 14
26751: EQUAL
26752: IFFALSE 26773
// points := [ 10 , 0 , 0 ] ;
26754: LD_ADDR_VAR 0 9
26758: PUSH
26759: LD_INT 10
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: LIST
26772: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26773: LD_VAR 0 6
26777: PPUSH
26778: CALL_OW 257
26782: PUSH
26783: LD_INT 11
26785: EQUAL
26786: IFFALSE 26807
// points := [ 30 , 10 , 5 ] ;
26788: LD_ADDR_VAR 0 9
26792: PUSH
26793: LD_INT 30
26795: PUSH
26796: LD_INT 10
26798: PUSH
26799: LD_INT 5
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26807: LD_VAR 0 1
26811: PPUSH
26812: LD_INT 5
26814: PPUSH
26815: CALL_OW 321
26819: PUSH
26820: LD_INT 2
26822: EQUAL
26823: IFFALSE 26840
// bpoints := bpoints * 1.8 ;
26825: LD_ADDR_VAR 0 10
26829: PUSH
26830: LD_VAR 0 10
26834: PUSH
26835: LD_REAL  1.80000000000000E+0000
26838: MUL
26839: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26840: LD_VAR 0 6
26844: PPUSH
26845: CALL_OW 257
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: LD_INT 4
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: IN
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: LD_INT 51
26876: PPUSH
26877: CALL_OW 321
26881: PUSH
26882: LD_INT 2
26884: EQUAL
26885: AND
26886: IFFALSE 26903
// bpoints := bpoints * 1.2 ;
26888: LD_ADDR_VAR 0 10
26892: PUSH
26893: LD_VAR 0 10
26897: PUSH
26898: LD_REAL  1.20000000000000E+0000
26901: MUL
26902: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26903: LD_VAR 0 6
26907: PPUSH
26908: CALL_OW 257
26912: PUSH
26913: LD_INT 5
26915: PUSH
26916: LD_INT 7
26918: PUSH
26919: LD_INT 9
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: IN
26927: PUSH
26928: LD_VAR 0 1
26932: PPUSH
26933: LD_INT 52
26935: PPUSH
26936: CALL_OW 321
26940: PUSH
26941: LD_INT 2
26943: EQUAL
26944: AND
26945: IFFALSE 26962
// bpoints := bpoints * 1.5 ;
26947: LD_ADDR_VAR 0 10
26951: PUSH
26952: LD_VAR 0 10
26956: PUSH
26957: LD_REAL  1.50000000000000E+0000
26960: MUL
26961: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26962: LD_VAR 0 1
26966: PPUSH
26967: LD_INT 66
26969: PPUSH
26970: CALL_OW 321
26974: PUSH
26975: LD_INT 2
26977: EQUAL
26978: IFFALSE 26995
// bpoints := bpoints * 1.1 ;
26980: LD_ADDR_VAR 0 10
26984: PUSH
26985: LD_VAR 0 10
26989: PUSH
26990: LD_REAL  1.10000000000000E+0000
26993: MUL
26994: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26995: LD_ADDR_VAR 0 10
26999: PUSH
27000: LD_VAR 0 10
27004: PUSH
27005: LD_VAR 0 6
27009: PPUSH
27010: LD_INT 1
27012: PPUSH
27013: CALL_OW 259
27017: PUSH
27018: LD_REAL  1.15000000000000E+0000
27021: MUL
27022: MUL
27023: ST_TO_ADDR
// end ; unit_vehicle :
27024: GO 27852
27026: LD_INT 2
27028: DOUBLE
27029: EQUAL
27030: IFTRUE 27034
27032: GO 27840
27034: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27035: LD_VAR 0 6
27039: PPUSH
27040: CALL_OW 264
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: LD_INT 42
27050: PUSH
27051: LD_INT 24
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: IN
27059: IFFALSE 27080
// points := [ 25 , 5 , 3 ] ;
27061: LD_ADDR_VAR 0 9
27065: PUSH
27066: LD_INT 25
27068: PUSH
27069: LD_INT 5
27071: PUSH
27072: LD_INT 3
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27080: LD_VAR 0 6
27084: PPUSH
27085: CALL_OW 264
27089: PUSH
27090: LD_INT 4
27092: PUSH
27093: LD_INT 43
27095: PUSH
27096: LD_INT 25
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: IN
27104: IFFALSE 27125
// points := [ 40 , 15 , 5 ] ;
27106: LD_ADDR_VAR 0 9
27110: PUSH
27111: LD_INT 40
27113: PUSH
27114: LD_INT 15
27116: PUSH
27117: LD_INT 5
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27125: LD_VAR 0 6
27129: PPUSH
27130: CALL_OW 264
27134: PUSH
27135: LD_INT 3
27137: PUSH
27138: LD_INT 23
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: IN
27145: IFFALSE 27166
// points := [ 7 , 25 , 8 ] ;
27147: LD_ADDR_VAR 0 9
27151: PUSH
27152: LD_INT 7
27154: PUSH
27155: LD_INT 25
27157: PUSH
27158: LD_INT 8
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27166: LD_VAR 0 6
27170: PPUSH
27171: CALL_OW 264
27175: PUSH
27176: LD_INT 5
27178: PUSH
27179: LD_INT 27
27181: PUSH
27182: LD_INT 44
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: IN
27190: IFFALSE 27211
// points := [ 14 , 50 , 16 ] ;
27192: LD_ADDR_VAR 0 9
27196: PUSH
27197: LD_INT 14
27199: PUSH
27200: LD_INT 50
27202: PUSH
27203: LD_INT 16
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27211: LD_VAR 0 6
27215: PPUSH
27216: CALL_OW 264
27220: PUSH
27221: LD_INT 6
27223: PUSH
27224: LD_INT 46
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: IN
27231: IFFALSE 27252
// points := [ 32 , 120 , 70 ] ;
27233: LD_ADDR_VAR 0 9
27237: PUSH
27238: LD_INT 32
27240: PUSH
27241: LD_INT 120
27243: PUSH
27244: LD_INT 70
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27252: LD_VAR 0 6
27256: PPUSH
27257: CALL_OW 264
27261: PUSH
27262: LD_INT 7
27264: PUSH
27265: LD_INT 28
27267: PUSH
27268: LD_INT 45
27270: PUSH
27271: LD_INT 92
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: IN
27280: IFFALSE 27301
// points := [ 35 , 20 , 45 ] ;
27282: LD_ADDR_VAR 0 9
27286: PUSH
27287: LD_INT 35
27289: PUSH
27290: LD_INT 20
27292: PUSH
27293: LD_INT 45
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: LIST
27300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27301: LD_VAR 0 6
27305: PPUSH
27306: CALL_OW 264
27310: PUSH
27311: LD_INT 47
27313: PUSH
27314: EMPTY
27315: LIST
27316: IN
27317: IFFALSE 27338
// points := [ 67 , 45 , 75 ] ;
27319: LD_ADDR_VAR 0 9
27323: PUSH
27324: LD_INT 67
27326: PUSH
27327: LD_INT 45
27329: PUSH
27330: LD_INT 75
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27338: LD_VAR 0 6
27342: PPUSH
27343: CALL_OW 264
27347: PUSH
27348: LD_INT 26
27350: PUSH
27351: EMPTY
27352: LIST
27353: IN
27354: IFFALSE 27375
// points := [ 120 , 30 , 80 ] ;
27356: LD_ADDR_VAR 0 9
27360: PUSH
27361: LD_INT 120
27363: PUSH
27364: LD_INT 30
27366: PUSH
27367: LD_INT 80
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27375: LD_VAR 0 6
27379: PPUSH
27380: CALL_OW 264
27384: PUSH
27385: LD_INT 22
27387: PUSH
27388: EMPTY
27389: LIST
27390: IN
27391: IFFALSE 27412
// points := [ 40 , 1 , 1 ] ;
27393: LD_ADDR_VAR 0 9
27397: PUSH
27398: LD_INT 40
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27412: LD_VAR 0 6
27416: PPUSH
27417: CALL_OW 264
27421: PUSH
27422: LD_INT 29
27424: PUSH
27425: EMPTY
27426: LIST
27427: IN
27428: IFFALSE 27449
// points := [ 70 , 200 , 400 ] ;
27430: LD_ADDR_VAR 0 9
27434: PUSH
27435: LD_INT 70
27437: PUSH
27438: LD_INT 200
27440: PUSH
27441: LD_INT 400
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27449: LD_VAR 0 6
27453: PPUSH
27454: CALL_OW 264
27458: PUSH
27459: LD_INT 14
27461: PUSH
27462: LD_INT 53
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: IN
27469: IFFALSE 27490
// points := [ 40 , 10 , 20 ] ;
27471: LD_ADDR_VAR 0 9
27475: PUSH
27476: LD_INT 40
27478: PUSH
27479: LD_INT 10
27481: PUSH
27482: LD_INT 20
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27490: LD_VAR 0 6
27494: PPUSH
27495: CALL_OW 264
27499: PUSH
27500: LD_INT 9
27502: PUSH
27503: EMPTY
27504: LIST
27505: IN
27506: IFFALSE 27527
// points := [ 5 , 70 , 20 ] ;
27508: LD_ADDR_VAR 0 9
27512: PUSH
27513: LD_INT 5
27515: PUSH
27516: LD_INT 70
27518: PUSH
27519: LD_INT 20
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27527: LD_VAR 0 6
27531: PPUSH
27532: CALL_OW 264
27536: PUSH
27537: LD_INT 10
27539: PUSH
27540: EMPTY
27541: LIST
27542: IN
27543: IFFALSE 27564
// points := [ 35 , 110 , 70 ] ;
27545: LD_ADDR_VAR 0 9
27549: PUSH
27550: LD_INT 35
27552: PUSH
27553: LD_INT 110
27555: PUSH
27556: LD_INT 70
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27564: LD_VAR 0 6
27568: PPUSH
27569: CALL_OW 265
27573: PUSH
27574: LD_INT 25
27576: EQUAL
27577: IFFALSE 27598
// points := [ 80 , 65 , 100 ] ;
27579: LD_ADDR_VAR 0 9
27583: PUSH
27584: LD_INT 80
27586: PUSH
27587: LD_INT 65
27589: PUSH
27590: LD_INT 100
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27598: LD_VAR 0 6
27602: PPUSH
27603: CALL_OW 263
27607: PUSH
27608: LD_INT 1
27610: EQUAL
27611: IFFALSE 27646
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27613: LD_ADDR_VAR 0 10
27617: PUSH
27618: LD_VAR 0 10
27622: PUSH
27623: LD_VAR 0 6
27627: PPUSH
27628: CALL_OW 311
27632: PPUSH
27633: LD_INT 3
27635: PPUSH
27636: CALL_OW 259
27640: PUSH
27641: LD_INT 4
27643: MUL
27644: MUL
27645: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27646: LD_VAR 0 6
27650: PPUSH
27651: CALL_OW 263
27655: PUSH
27656: LD_INT 2
27658: EQUAL
27659: IFFALSE 27710
// begin j := IsControledBy ( i ) ;
27661: LD_ADDR_VAR 0 7
27665: PUSH
27666: LD_VAR 0 6
27670: PPUSH
27671: CALL_OW 312
27675: ST_TO_ADDR
// if j then
27676: LD_VAR 0 7
27680: IFFALSE 27710
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27682: LD_ADDR_VAR 0 10
27686: PUSH
27687: LD_VAR 0 10
27691: PUSH
27692: LD_VAR 0 7
27696: PPUSH
27697: LD_INT 3
27699: PPUSH
27700: CALL_OW 259
27704: PUSH
27705: LD_INT 3
27707: MUL
27708: MUL
27709: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27710: LD_VAR 0 6
27714: PPUSH
27715: CALL_OW 264
27719: PUSH
27720: LD_INT 5
27722: PUSH
27723: LD_INT 6
27725: PUSH
27726: LD_INT 46
27728: PUSH
27729: LD_INT 44
27731: PUSH
27732: LD_INT 47
27734: PUSH
27735: LD_INT 45
27737: PUSH
27738: LD_INT 28
27740: PUSH
27741: LD_INT 7
27743: PUSH
27744: LD_INT 27
27746: PUSH
27747: LD_INT 29
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: IN
27762: PUSH
27763: LD_VAR 0 1
27767: PPUSH
27768: LD_INT 52
27770: PPUSH
27771: CALL_OW 321
27775: PUSH
27776: LD_INT 2
27778: EQUAL
27779: AND
27780: IFFALSE 27797
// bpoints := bpoints * 1.2 ;
27782: LD_ADDR_VAR 0 10
27786: PUSH
27787: LD_VAR 0 10
27791: PUSH
27792: LD_REAL  1.20000000000000E+0000
27795: MUL
27796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27797: LD_VAR 0 6
27801: PPUSH
27802: CALL_OW 264
27806: PUSH
27807: LD_INT 6
27809: PUSH
27810: LD_INT 46
27812: PUSH
27813: LD_INT 47
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: IN
27821: IFFALSE 27838
// bpoints := bpoints * 1.2 ;
27823: LD_ADDR_VAR 0 10
27827: PUSH
27828: LD_VAR 0 10
27832: PUSH
27833: LD_REAL  1.20000000000000E+0000
27836: MUL
27837: ST_TO_ADDR
// end ; unit_building :
27838: GO 27852
27840: LD_INT 3
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27851
27848: POP
// ; end ;
27849: GO 27852
27851: POP
// for j = 1 to 3 do
27852: LD_ADDR_VAR 0 7
27856: PUSH
27857: DOUBLE
27858: LD_INT 1
27860: DEC
27861: ST_TO_ADDR
27862: LD_INT 3
27864: PUSH
27865: FOR_TO
27866: IFFALSE 27919
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27868: LD_ADDR_VAR 0 5
27872: PUSH
27873: LD_VAR 0 5
27877: PPUSH
27878: LD_VAR 0 7
27882: PPUSH
27883: LD_VAR 0 5
27887: PUSH
27888: LD_VAR 0 7
27892: ARRAY
27893: PUSH
27894: LD_VAR 0 9
27898: PUSH
27899: LD_VAR 0 7
27903: ARRAY
27904: PUSH
27905: LD_VAR 0 10
27909: MUL
27910: PLUS
27911: PPUSH
27912: CALL_OW 1
27916: ST_TO_ADDR
27917: GO 27865
27919: POP
27920: POP
// end ;
27921: GO 26400
27923: POP
27924: POP
// result := Replace ( result , 4 , tmp ) ;
27925: LD_ADDR_VAR 0 5
27929: PUSH
27930: LD_VAR 0 5
27934: PPUSH
27935: LD_INT 4
27937: PPUSH
27938: LD_VAR 0 8
27942: PPUSH
27943: CALL_OW 1
27947: ST_TO_ADDR
// end ;
27948: LD_VAR 0 5
27952: RET
// export function DangerAtRange ( unit , range ) ; begin
27953: LD_INT 0
27955: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_VAR 0 1
27965: PPUSH
27966: CALL_OW 255
27970: PPUSH
27971: LD_VAR 0 1
27975: PPUSH
27976: CALL_OW 250
27980: PPUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: CALL_OW 251
27990: PPUSH
27991: LD_VAR 0 2
27995: PPUSH
27996: CALL 26252 0 4
28000: ST_TO_ADDR
// end ;
28001: LD_VAR 0 3
28005: RET
// export function DangerInArea ( side , area ) ; begin
28006: LD_INT 0
28008: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28009: LD_ADDR_VAR 0 3
28013: PUSH
28014: LD_VAR 0 2
28018: PPUSH
28019: LD_INT 81
28021: PUSH
28022: LD_VAR 0 1
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PPUSH
28031: CALL_OW 70
28035: ST_TO_ADDR
// end ;
28036: LD_VAR 0 3
28040: RET
// export function IsExtension ( b ) ; begin
28041: LD_INT 0
28043: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28044: LD_ADDR_VAR 0 2
28048: PUSH
28049: LD_VAR 0 1
28053: PUSH
28054: LD_INT 23
28056: PUSH
28057: LD_INT 20
28059: PUSH
28060: LD_INT 22
28062: PUSH
28063: LD_INT 17
28065: PUSH
28066: LD_INT 24
28068: PUSH
28069: LD_INT 21
28071: PUSH
28072: LD_INT 19
28074: PUSH
28075: LD_INT 16
28077: PUSH
28078: LD_INT 25
28080: PUSH
28081: LD_INT 18
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: IN
28096: ST_TO_ADDR
// end ;
28097: LD_VAR 0 2
28101: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28102: LD_INT 0
28104: PPUSH
28105: PPUSH
28106: PPUSH
// result := [ ] ;
28107: LD_ADDR_VAR 0 4
28111: PUSH
28112: EMPTY
28113: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28114: LD_ADDR_VAR 0 5
28118: PUSH
28119: LD_VAR 0 2
28123: PPUSH
28124: LD_INT 21
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PPUSH
28134: CALL_OW 70
28138: ST_TO_ADDR
// if not tmp then
28139: LD_VAR 0 5
28143: NOT
28144: IFFALSE 28148
// exit ;
28146: GO 28212
// if checkLink then
28148: LD_VAR 0 3
28152: IFFALSE 28202
// begin for i in tmp do
28154: LD_ADDR_VAR 0 6
28158: PUSH
28159: LD_VAR 0 5
28163: PUSH
28164: FOR_IN
28165: IFFALSE 28200
// if GetBase ( i ) <> base then
28167: LD_VAR 0 6
28171: PPUSH
28172: CALL_OW 274
28176: PUSH
28177: LD_VAR 0 1
28181: NONEQUAL
28182: IFFALSE 28198
// ComLinkToBase ( base , i ) ;
28184: LD_VAR 0 1
28188: PPUSH
28189: LD_VAR 0 6
28193: PPUSH
28194: CALL_OW 169
28198: GO 28164
28200: POP
28201: POP
// end ; result := tmp ;
28202: LD_ADDR_VAR 0 4
28206: PUSH
28207: LD_VAR 0 5
28211: ST_TO_ADDR
// end ;
28212: LD_VAR 0 4
28216: RET
// export function ComComplete ( units , b ) ; var i ; begin
28217: LD_INT 0
28219: PPUSH
28220: PPUSH
// if not units then
28221: LD_VAR 0 1
28225: NOT
28226: IFFALSE 28230
// exit ;
28228: GO 28320
// for i in units do
28230: LD_ADDR_VAR 0 4
28234: PUSH
28235: LD_VAR 0 1
28239: PUSH
28240: FOR_IN
28241: IFFALSE 28318
// if BuildingStatus ( b ) = bs_build then
28243: LD_VAR 0 2
28247: PPUSH
28248: CALL_OW 461
28252: PUSH
28253: LD_INT 1
28255: EQUAL
28256: IFFALSE 28316
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28258: LD_VAR 0 4
28262: PPUSH
28263: LD_STRING h
28265: PUSH
28266: LD_VAR 0 2
28270: PPUSH
28271: CALL_OW 250
28275: PUSH
28276: LD_VAR 0 2
28280: PPUSH
28281: CALL_OW 251
28285: PUSH
28286: LD_VAR 0 2
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: PPUSH
28312: CALL_OW 446
28316: GO 28240
28318: POP
28319: POP
// end ;
28320: LD_VAR 0 3
28324: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28325: LD_INT 0
28327: PPUSH
28328: PPUSH
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28333: LD_VAR 0 1
28337: NOT
28338: PUSH
28339: LD_VAR 0 1
28343: PPUSH
28344: CALL_OW 263
28348: PUSH
28349: LD_INT 2
28351: NONEQUAL
28352: OR
28353: IFFALSE 28357
// exit ;
28355: GO 28673
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28357: LD_ADDR_VAR 0 6
28361: PUSH
28362: LD_INT 22
28364: PUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 255
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 30
28384: PUSH
28385: LD_INT 36
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 34
28394: PUSH
28395: LD_INT 31
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PPUSH
28411: CALL_OW 69
28415: ST_TO_ADDR
// if not tmp then
28416: LD_VAR 0 6
28420: NOT
28421: IFFALSE 28425
// exit ;
28423: GO 28673
// result := [ ] ;
28425: LD_ADDR_VAR 0 2
28429: PUSH
28430: EMPTY
28431: ST_TO_ADDR
// for i in tmp do
28432: LD_ADDR_VAR 0 3
28436: PUSH
28437: LD_VAR 0 6
28441: PUSH
28442: FOR_IN
28443: IFFALSE 28514
// begin t := UnitsInside ( i ) ;
28445: LD_ADDR_VAR 0 4
28449: PUSH
28450: LD_VAR 0 3
28454: PPUSH
28455: CALL_OW 313
28459: ST_TO_ADDR
// if t then
28460: LD_VAR 0 4
28464: IFFALSE 28512
// for j in t do
28466: LD_ADDR_VAR 0 7
28470: PUSH
28471: LD_VAR 0 4
28475: PUSH
28476: FOR_IN
28477: IFFALSE 28510
// result := Replace ( result , result + 1 , j ) ;
28479: LD_ADDR_VAR 0 2
28483: PUSH
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_VAR 0 2
28493: PUSH
28494: LD_INT 1
28496: PLUS
28497: PPUSH
28498: LD_VAR 0 7
28502: PPUSH
28503: CALL_OW 1
28507: ST_TO_ADDR
28508: GO 28476
28510: POP
28511: POP
// end ;
28512: GO 28442
28514: POP
28515: POP
// if not result then
28516: LD_VAR 0 2
28520: NOT
28521: IFFALSE 28525
// exit ;
28523: GO 28673
// mech := result [ 1 ] ;
28525: LD_ADDR_VAR 0 5
28529: PUSH
28530: LD_VAR 0 2
28534: PUSH
28535: LD_INT 1
28537: ARRAY
28538: ST_TO_ADDR
// if result > 1 then
28539: LD_VAR 0 2
28543: PUSH
28544: LD_INT 1
28546: GREATER
28547: IFFALSE 28659
// begin for i = 2 to result do
28549: LD_ADDR_VAR 0 3
28553: PUSH
28554: DOUBLE
28555: LD_INT 2
28557: DEC
28558: ST_TO_ADDR
28559: LD_VAR 0 2
28563: PUSH
28564: FOR_TO
28565: IFFALSE 28657
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28567: LD_ADDR_VAR 0 4
28571: PUSH
28572: LD_VAR 0 2
28576: PUSH
28577: LD_VAR 0 3
28581: ARRAY
28582: PPUSH
28583: LD_INT 3
28585: PPUSH
28586: CALL_OW 259
28590: PUSH
28591: LD_VAR 0 2
28595: PUSH
28596: LD_VAR 0 3
28600: ARRAY
28601: PPUSH
28602: CALL_OW 432
28606: MINUS
28607: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28608: LD_VAR 0 4
28612: PUSH
28613: LD_VAR 0 5
28617: PPUSH
28618: LD_INT 3
28620: PPUSH
28621: CALL_OW 259
28625: PUSH
28626: LD_VAR 0 5
28630: PPUSH
28631: CALL_OW 432
28635: MINUS
28636: GREATEREQUAL
28637: IFFALSE 28655
// mech := result [ i ] ;
28639: LD_ADDR_VAR 0 5
28643: PUSH
28644: LD_VAR 0 2
28648: PUSH
28649: LD_VAR 0 3
28653: ARRAY
28654: ST_TO_ADDR
// end ;
28655: GO 28564
28657: POP
28658: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28659: LD_VAR 0 1
28663: PPUSH
28664: LD_VAR 0 5
28668: PPUSH
28669: CALL_OW 135
// end ;
28673: LD_VAR 0 2
28677: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28678: LD_INT 0
28680: PPUSH
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
28688: PPUSH
28689: PPUSH
28690: PPUSH
28691: PPUSH
28692: PPUSH
// result := [ ] ;
28693: LD_ADDR_VAR 0 7
28697: PUSH
28698: EMPTY
28699: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28700: LD_VAR 0 1
28704: PPUSH
28705: CALL_OW 266
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: IN
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 30359
// if name then
28725: LD_VAR 0 3
28729: IFFALSE 28745
// SetBName ( base_dep , name ) ;
28731: LD_VAR 0 1
28735: PPUSH
28736: LD_VAR 0 3
28740: PPUSH
28741: CALL_OW 500
// base := GetBase ( base_dep ) ;
28745: LD_ADDR_VAR 0 15
28749: PUSH
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL_OW 274
28759: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28760: LD_ADDR_VAR 0 16
28764: PUSH
28765: LD_VAR 0 1
28769: PPUSH
28770: CALL_OW 255
28774: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28775: LD_ADDR_VAR 0 17
28779: PUSH
28780: LD_VAR 0 1
28784: PPUSH
28785: CALL_OW 248
28789: ST_TO_ADDR
// if sources then
28790: LD_VAR 0 5
28794: IFFALSE 28841
// for i = 1 to 3 do
28796: LD_ADDR_VAR 0 8
28800: PUSH
28801: DOUBLE
28802: LD_INT 1
28804: DEC
28805: ST_TO_ADDR
28806: LD_INT 3
28808: PUSH
28809: FOR_TO
28810: IFFALSE 28839
// AddResourceType ( base , i , sources [ i ] ) ;
28812: LD_VAR 0 15
28816: PPUSH
28817: LD_VAR 0 8
28821: PPUSH
28822: LD_VAR 0 5
28826: PUSH
28827: LD_VAR 0 8
28831: ARRAY
28832: PPUSH
28833: CALL_OW 276
28837: GO 28809
28839: POP
28840: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28841: LD_ADDR_VAR 0 18
28845: PUSH
28846: LD_VAR 0 15
28850: PPUSH
28851: LD_VAR 0 2
28855: PPUSH
28856: LD_INT 1
28858: PPUSH
28859: CALL 28102 0 3
28863: ST_TO_ADDR
// InitHc ;
28864: CALL_OW 19
// InitUc ;
28868: CALL_OW 18
// uc_side := side ;
28872: LD_ADDR_OWVAR 20
28876: PUSH
28877: LD_VAR 0 16
28881: ST_TO_ADDR
// uc_nation := nation ;
28882: LD_ADDR_OWVAR 21
28886: PUSH
28887: LD_VAR 0 17
28891: ST_TO_ADDR
// if buildings then
28892: LD_VAR 0 18
28896: IFFALSE 30218
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28898: LD_ADDR_VAR 0 19
28902: PUSH
28903: LD_VAR 0 18
28907: PPUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 30
28913: PUSH
28914: LD_INT 29
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 30
28923: PUSH
28924: LD_INT 30
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: LIST
28935: PPUSH
28936: CALL_OW 72
28940: ST_TO_ADDR
// if tmp then
28941: LD_VAR 0 19
28945: IFFALSE 28993
// for i in tmp do
28947: LD_ADDR_VAR 0 8
28951: PUSH
28952: LD_VAR 0 19
28956: PUSH
28957: FOR_IN
28958: IFFALSE 28991
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28960: LD_VAR 0 8
28964: PPUSH
28965: CALL_OW 250
28969: PPUSH
28970: LD_VAR 0 8
28974: PPUSH
28975: CALL_OW 251
28979: PPUSH
28980: LD_VAR 0 16
28984: PPUSH
28985: CALL_OW 441
28989: GO 28957
28991: POP
28992: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28993: LD_VAR 0 18
28997: PPUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 30
29003: PUSH
29004: LD_INT 32
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 30
29013: PUSH
29014: LD_INT 33
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 72
29030: IFFALSE 29118
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29032: LD_ADDR_VAR 0 8
29036: PUSH
29037: LD_VAR 0 18
29041: PPUSH
29042: LD_INT 2
29044: PUSH
29045: LD_INT 30
29047: PUSH
29048: LD_INT 32
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 30
29057: PUSH
29058: LD_INT 33
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: LIST
29069: PPUSH
29070: CALL_OW 72
29074: PUSH
29075: FOR_IN
29076: IFFALSE 29116
// begin if not GetBWeapon ( i ) then
29078: LD_VAR 0 8
29082: PPUSH
29083: CALL_OW 269
29087: NOT
29088: IFFALSE 29114
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29090: LD_VAR 0 8
29094: PPUSH
29095: LD_VAR 0 8
29099: PPUSH
29100: LD_VAR 0 2
29104: PPUSH
29105: CALL 30364 0 2
29109: PPUSH
29110: CALL_OW 431
// end ;
29114: GO 29075
29116: POP
29117: POP
// end ; for i = 1 to personel do
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: DOUBLE
29124: LD_INT 1
29126: DEC
29127: ST_TO_ADDR
29128: LD_VAR 0 6
29132: PUSH
29133: FOR_TO
29134: IFFALSE 30198
// begin if i > 4 then
29136: LD_VAR 0 8
29140: PUSH
29141: LD_INT 4
29143: GREATER
29144: IFFALSE 29148
// break ;
29146: GO 30198
// case i of 1 :
29148: LD_VAR 0 8
29152: PUSH
29153: LD_INT 1
29155: DOUBLE
29156: EQUAL
29157: IFTRUE 29161
29159: GO 29241
29161: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29162: LD_ADDR_VAR 0 12
29166: PUSH
29167: LD_VAR 0 18
29171: PPUSH
29172: LD_INT 22
29174: PUSH
29175: LD_VAR 0 16
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 58
29186: PUSH
29187: EMPTY
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: LD_INT 30
29195: PUSH
29196: LD_INT 32
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 30
29205: PUSH
29206: LD_INT 4
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 30
29215: PUSH
29216: LD_INT 5
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: PPUSH
29234: CALL_OW 72
29238: ST_TO_ADDR
29239: GO 29463
29241: LD_INT 2
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29311
29249: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29250: LD_ADDR_VAR 0 12
29254: PUSH
29255: LD_VAR 0 18
29259: PPUSH
29260: LD_INT 22
29262: PUSH
29263: LD_VAR 0 16
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: LD_INT 30
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 30
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PPUSH
29304: CALL_OW 72
29308: ST_TO_ADDR
29309: GO 29463
29311: LD_INT 3
29313: DOUBLE
29314: EQUAL
29315: IFTRUE 29319
29317: GO 29381
29319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29320: LD_ADDR_VAR 0 12
29324: PUSH
29325: LD_VAR 0 18
29329: PPUSH
29330: LD_INT 22
29332: PUSH
29333: LD_VAR 0 16
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: LD_INT 30
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 30
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PPUSH
29374: CALL_OW 72
29378: ST_TO_ADDR
29379: GO 29463
29381: LD_INT 4
29383: DOUBLE
29384: EQUAL
29385: IFTRUE 29389
29387: GO 29462
29389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29390: LD_ADDR_VAR 0 12
29394: PUSH
29395: LD_VAR 0 18
29399: PPUSH
29400: LD_INT 22
29402: PUSH
29403: LD_VAR 0 16
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: LD_INT 30
29417: PUSH
29418: LD_INT 6
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 30
29427: PUSH
29428: LD_INT 7
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 30
29437: PUSH
29438: LD_INT 8
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 72
29459: ST_TO_ADDR
29460: GO 29463
29462: POP
// if i = 1 then
29463: LD_VAR 0 8
29467: PUSH
29468: LD_INT 1
29470: EQUAL
29471: IFFALSE 29582
// begin tmp := [ ] ;
29473: LD_ADDR_VAR 0 19
29477: PUSH
29478: EMPTY
29479: ST_TO_ADDR
// for j in f do
29480: LD_ADDR_VAR 0 9
29484: PUSH
29485: LD_VAR 0 12
29489: PUSH
29490: FOR_IN
29491: IFFALSE 29564
// if GetBType ( j ) = b_bunker then
29493: LD_VAR 0 9
29497: PPUSH
29498: CALL_OW 266
29502: PUSH
29503: LD_INT 32
29505: EQUAL
29506: IFFALSE 29533
// tmp := Insert ( tmp , 1 , j ) else
29508: LD_ADDR_VAR 0 19
29512: PUSH
29513: LD_VAR 0 19
29517: PPUSH
29518: LD_INT 1
29520: PPUSH
29521: LD_VAR 0 9
29525: PPUSH
29526: CALL_OW 2
29530: ST_TO_ADDR
29531: GO 29562
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29533: LD_ADDR_VAR 0 19
29537: PUSH
29538: LD_VAR 0 19
29542: PPUSH
29543: LD_VAR 0 19
29547: PUSH
29548: LD_INT 1
29550: PLUS
29551: PPUSH
29552: LD_VAR 0 9
29556: PPUSH
29557: CALL_OW 2
29561: ST_TO_ADDR
29562: GO 29490
29564: POP
29565: POP
// if tmp then
29566: LD_VAR 0 19
29570: IFFALSE 29582
// f := tmp ;
29572: LD_ADDR_VAR 0 12
29576: PUSH
29577: LD_VAR 0 19
29581: ST_TO_ADDR
// end ; x := personel [ i ] ;
29582: LD_ADDR_VAR 0 13
29586: PUSH
29587: LD_VAR 0 6
29591: PUSH
29592: LD_VAR 0 8
29596: ARRAY
29597: ST_TO_ADDR
// if x = - 1 then
29598: LD_VAR 0 13
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: EQUAL
29607: IFFALSE 29816
// begin for j in f do
29609: LD_ADDR_VAR 0 9
29613: PUSH
29614: LD_VAR 0 12
29618: PUSH
29619: FOR_IN
29620: IFFALSE 29812
// repeat InitHc ;
29622: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29626: LD_VAR 0 9
29630: PPUSH
29631: CALL_OW 266
29635: PUSH
29636: LD_INT 5
29638: EQUAL
29639: IFFALSE 29709
// begin if UnitsInside ( j ) < 3 then
29641: LD_VAR 0 9
29645: PPUSH
29646: CALL_OW 313
29650: PUSH
29651: LD_INT 3
29653: LESS
29654: IFFALSE 29690
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29656: LD_INT 0
29658: PPUSH
29659: LD_INT 5
29661: PUSH
29662: LD_INT 8
29664: PUSH
29665: LD_INT 9
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: PUSH
29673: LD_VAR 0 17
29677: ARRAY
29678: PPUSH
29679: LD_VAR 0 4
29683: PPUSH
29684: CALL_OW 380
29688: GO 29707
// PrepareHuman ( false , i , skill ) ;
29690: LD_INT 0
29692: PPUSH
29693: LD_VAR 0 8
29697: PPUSH
29698: LD_VAR 0 4
29702: PPUSH
29703: CALL_OW 380
// end else
29707: GO 29726
// PrepareHuman ( false , i , skill ) ;
29709: LD_INT 0
29711: PPUSH
29712: LD_VAR 0 8
29716: PPUSH
29717: LD_VAR 0 4
29721: PPUSH
29722: CALL_OW 380
// un := CreateHuman ;
29726: LD_ADDR_VAR 0 14
29730: PUSH
29731: CALL_OW 44
29735: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29736: LD_ADDR_VAR 0 7
29740: PUSH
29741: LD_VAR 0 7
29745: PPUSH
29746: LD_INT 1
29748: PPUSH
29749: LD_VAR 0 14
29753: PPUSH
29754: CALL_OW 2
29758: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29759: LD_VAR 0 14
29763: PPUSH
29764: LD_VAR 0 9
29768: PPUSH
29769: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29773: LD_VAR 0 9
29777: PPUSH
29778: CALL_OW 313
29782: PUSH
29783: LD_INT 6
29785: EQUAL
29786: PUSH
29787: LD_VAR 0 9
29791: PPUSH
29792: CALL_OW 266
29796: PUSH
29797: LD_INT 32
29799: PUSH
29800: LD_INT 31
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: IN
29807: OR
29808: IFFALSE 29622
29810: GO 29619
29812: POP
29813: POP
// end else
29814: GO 30196
// for j = 1 to x do
29816: LD_ADDR_VAR 0 9
29820: PUSH
29821: DOUBLE
29822: LD_INT 1
29824: DEC
29825: ST_TO_ADDR
29826: LD_VAR 0 13
29830: PUSH
29831: FOR_TO
29832: IFFALSE 30194
// begin InitHc ;
29834: CALL_OW 19
// if not f then
29838: LD_VAR 0 12
29842: NOT
29843: IFFALSE 29932
// begin PrepareHuman ( false , i , skill ) ;
29845: LD_INT 0
29847: PPUSH
29848: LD_VAR 0 8
29852: PPUSH
29853: LD_VAR 0 4
29857: PPUSH
29858: CALL_OW 380
// un := CreateHuman ;
29862: LD_ADDR_VAR 0 14
29866: PUSH
29867: CALL_OW 44
29871: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29872: LD_ADDR_VAR 0 7
29876: PUSH
29877: LD_VAR 0 7
29881: PPUSH
29882: LD_INT 1
29884: PPUSH
29885: LD_VAR 0 14
29889: PPUSH
29890: CALL_OW 2
29894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29895: LD_VAR 0 14
29899: PPUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 250
29909: PPUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL_OW 251
29919: PPUSH
29920: LD_INT 10
29922: PPUSH
29923: LD_INT 0
29925: PPUSH
29926: CALL_OW 50
// continue ;
29930: GO 29831
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29932: LD_VAR 0 12
29936: PUSH
29937: LD_INT 1
29939: ARRAY
29940: PPUSH
29941: CALL_OW 313
29945: PUSH
29946: LD_VAR 0 12
29950: PUSH
29951: LD_INT 1
29953: ARRAY
29954: PPUSH
29955: CALL_OW 266
29959: PUSH
29960: LD_INT 32
29962: PUSH
29963: LD_INT 31
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: IN
29970: AND
29971: PUSH
29972: LD_VAR 0 12
29976: PUSH
29977: LD_INT 1
29979: ARRAY
29980: PPUSH
29981: CALL_OW 313
29985: PUSH
29986: LD_INT 6
29988: EQUAL
29989: OR
29990: IFFALSE 30010
// f := Delete ( f , 1 ) ;
29992: LD_ADDR_VAR 0 12
29996: PUSH
29997: LD_VAR 0 12
30001: PPUSH
30002: LD_INT 1
30004: PPUSH
30005: CALL_OW 3
30009: ST_TO_ADDR
// if not f then
30010: LD_VAR 0 12
30014: NOT
30015: IFFALSE 30033
// begin x := x + 2 ;
30017: LD_ADDR_VAR 0 13
30021: PUSH
30022: LD_VAR 0 13
30026: PUSH
30027: LD_INT 2
30029: PLUS
30030: ST_TO_ADDR
// continue ;
30031: GO 29831
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30033: LD_VAR 0 12
30037: PUSH
30038: LD_INT 1
30040: ARRAY
30041: PPUSH
30042: CALL_OW 266
30046: PUSH
30047: LD_INT 5
30049: EQUAL
30050: IFFALSE 30124
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30052: LD_VAR 0 12
30056: PUSH
30057: LD_INT 1
30059: ARRAY
30060: PPUSH
30061: CALL_OW 313
30065: PUSH
30066: LD_INT 3
30068: LESS
30069: IFFALSE 30105
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30071: LD_INT 0
30073: PPUSH
30074: LD_INT 5
30076: PUSH
30077: LD_INT 8
30079: PUSH
30080: LD_INT 9
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: PUSH
30088: LD_VAR 0 17
30092: ARRAY
30093: PPUSH
30094: LD_VAR 0 4
30098: PPUSH
30099: CALL_OW 380
30103: GO 30122
// PrepareHuman ( false , i , skill ) ;
30105: LD_INT 0
30107: PPUSH
30108: LD_VAR 0 8
30112: PPUSH
30113: LD_VAR 0 4
30117: PPUSH
30118: CALL_OW 380
// end else
30122: GO 30141
// PrepareHuman ( false , i , skill ) ;
30124: LD_INT 0
30126: PPUSH
30127: LD_VAR 0 8
30131: PPUSH
30132: LD_VAR 0 4
30136: PPUSH
30137: CALL_OW 380
// un := CreateHuman ;
30141: LD_ADDR_VAR 0 14
30145: PUSH
30146: CALL_OW 44
30150: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30151: LD_ADDR_VAR 0 7
30155: PUSH
30156: LD_VAR 0 7
30160: PPUSH
30161: LD_INT 1
30163: PPUSH
30164: LD_VAR 0 14
30168: PPUSH
30169: CALL_OW 2
30173: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30174: LD_VAR 0 14
30178: PPUSH
30179: LD_VAR 0 12
30183: PUSH
30184: LD_INT 1
30186: ARRAY
30187: PPUSH
30188: CALL_OW 52
// end ;
30192: GO 29831
30194: POP
30195: POP
// end ;
30196: GO 29133
30198: POP
30199: POP
// result := result ^ buildings ;
30200: LD_ADDR_VAR 0 7
30204: PUSH
30205: LD_VAR 0 7
30209: PUSH
30210: LD_VAR 0 18
30214: ADD
30215: ST_TO_ADDR
// end else
30216: GO 30359
// begin for i = 1 to personel do
30218: LD_ADDR_VAR 0 8
30222: PUSH
30223: DOUBLE
30224: LD_INT 1
30226: DEC
30227: ST_TO_ADDR
30228: LD_VAR 0 6
30232: PUSH
30233: FOR_TO
30234: IFFALSE 30357
// begin if i > 4 then
30236: LD_VAR 0 8
30240: PUSH
30241: LD_INT 4
30243: GREATER
30244: IFFALSE 30248
// break ;
30246: GO 30357
// x := personel [ i ] ;
30248: LD_ADDR_VAR 0 13
30252: PUSH
30253: LD_VAR 0 6
30257: PUSH
30258: LD_VAR 0 8
30262: ARRAY
30263: ST_TO_ADDR
// if x = - 1 then
30264: LD_VAR 0 13
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: EQUAL
30273: IFFALSE 30277
// continue ;
30275: GO 30233
// PrepareHuman ( false , i , skill ) ;
30277: LD_INT 0
30279: PPUSH
30280: LD_VAR 0 8
30284: PPUSH
30285: LD_VAR 0 4
30289: PPUSH
30290: CALL_OW 380
// un := CreateHuman ;
30294: LD_ADDR_VAR 0 14
30298: PUSH
30299: CALL_OW 44
30303: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30304: LD_VAR 0 14
30308: PPUSH
30309: LD_VAR 0 1
30313: PPUSH
30314: CALL_OW 250
30318: PPUSH
30319: LD_VAR 0 1
30323: PPUSH
30324: CALL_OW 251
30328: PPUSH
30329: LD_INT 10
30331: PPUSH
30332: LD_INT 0
30334: PPUSH
30335: CALL_OW 50
// result := result ^ un ;
30339: LD_ADDR_VAR 0 7
30343: PUSH
30344: LD_VAR 0 7
30348: PUSH
30349: LD_VAR 0 14
30353: ADD
30354: ST_TO_ADDR
// end ;
30355: GO 30233
30357: POP
30358: POP
// end ; end ;
30359: LD_VAR 0 7
30363: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30364: LD_INT 0
30366: PPUSH
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
30371: PPUSH
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
30378: PPUSH
30379: PPUSH
30380: PPUSH
30381: PPUSH
// result := false ;
30382: LD_ADDR_VAR 0 3
30386: PUSH
30387: LD_INT 0
30389: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30390: LD_VAR 0 1
30394: NOT
30395: PUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 266
30405: PUSH
30406: LD_INT 32
30408: PUSH
30409: LD_INT 33
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: IN
30416: NOT
30417: OR
30418: IFFALSE 30422
// exit ;
30420: GO 31531
// nat := GetNation ( tower ) ;
30422: LD_ADDR_VAR 0 12
30426: PUSH
30427: LD_VAR 0 1
30431: PPUSH
30432: CALL_OW 248
30436: ST_TO_ADDR
// side := GetSide ( tower ) ;
30437: LD_ADDR_VAR 0 16
30441: PUSH
30442: LD_VAR 0 1
30446: PPUSH
30447: CALL_OW 255
30451: ST_TO_ADDR
// x := GetX ( tower ) ;
30452: LD_ADDR_VAR 0 10
30456: PUSH
30457: LD_VAR 0 1
30461: PPUSH
30462: CALL_OW 250
30466: ST_TO_ADDR
// y := GetY ( tower ) ;
30467: LD_ADDR_VAR 0 11
30471: PUSH
30472: LD_VAR 0 1
30476: PPUSH
30477: CALL_OW 251
30481: ST_TO_ADDR
// if not x or not y then
30482: LD_VAR 0 10
30486: NOT
30487: PUSH
30488: LD_VAR 0 11
30492: NOT
30493: OR
30494: IFFALSE 30498
// exit ;
30496: GO 31531
// weapon := 0 ;
30498: LD_ADDR_VAR 0 18
30502: PUSH
30503: LD_INT 0
30505: ST_TO_ADDR
// fac_list := [ ] ;
30506: LD_ADDR_VAR 0 17
30510: PUSH
30511: EMPTY
30512: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30513: LD_ADDR_VAR 0 6
30517: PUSH
30518: LD_VAR 0 1
30522: PPUSH
30523: CALL_OW 274
30527: PPUSH
30528: LD_VAR 0 2
30532: PPUSH
30533: LD_INT 0
30535: PPUSH
30536: CALL 28102 0 3
30540: PPUSH
30541: LD_INT 30
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PPUSH
30551: CALL_OW 72
30555: ST_TO_ADDR
// if not factories then
30556: LD_VAR 0 6
30560: NOT
30561: IFFALSE 30565
// exit ;
30563: GO 31531
// for i in factories do
30565: LD_ADDR_VAR 0 8
30569: PUSH
30570: LD_VAR 0 6
30574: PUSH
30575: FOR_IN
30576: IFFALSE 30601
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30578: LD_ADDR_VAR 0 17
30582: PUSH
30583: LD_VAR 0 17
30587: PUSH
30588: LD_VAR 0 8
30592: PPUSH
30593: CALL_OW 478
30597: UNION
30598: ST_TO_ADDR
30599: GO 30575
30601: POP
30602: POP
// if not fac_list then
30603: LD_VAR 0 17
30607: NOT
30608: IFFALSE 30612
// exit ;
30610: GO 31531
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30612: LD_ADDR_VAR 0 5
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: LD_INT 5
30622: PUSH
30623: LD_INT 9
30625: PUSH
30626: LD_INT 10
30628: PUSH
30629: LD_INT 6
30631: PUSH
30632: LD_INT 7
30634: PUSH
30635: LD_INT 11
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 27
30649: PUSH
30650: LD_INT 28
30652: PUSH
30653: LD_INT 26
30655: PUSH
30656: LD_INT 30
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 43
30667: PUSH
30668: LD_INT 44
30670: PUSH
30671: LD_INT 46
30673: PUSH
30674: LD_INT 45
30676: PUSH
30677: LD_INT 47
30679: PUSH
30680: LD_INT 49
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: PUSH
30696: LD_VAR 0 12
30700: ARRAY
30701: ST_TO_ADDR
// list := list isect fac_list ;
30702: LD_ADDR_VAR 0 5
30706: PUSH
30707: LD_VAR 0 5
30711: PUSH
30712: LD_VAR 0 17
30716: ISECT
30717: ST_TO_ADDR
// if not list then
30718: LD_VAR 0 5
30722: NOT
30723: IFFALSE 30727
// exit ;
30725: GO 31531
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30727: LD_VAR 0 12
30731: PUSH
30732: LD_INT 3
30734: EQUAL
30735: PUSH
30736: LD_INT 49
30738: PUSH
30739: LD_VAR 0 5
30743: IN
30744: AND
30745: PUSH
30746: LD_INT 31
30748: PPUSH
30749: LD_VAR 0 16
30753: PPUSH
30754: CALL_OW 321
30758: PUSH
30759: LD_INT 2
30761: EQUAL
30762: AND
30763: IFFALSE 30823
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30765: LD_INT 22
30767: PUSH
30768: LD_VAR 0 16
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 35
30779: PUSH
30780: LD_INT 49
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 91
30789: PUSH
30790: LD_VAR 0 1
30794: PUSH
30795: LD_INT 10
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: PPUSH
30808: CALL_OW 69
30812: NOT
30813: IFFALSE 30823
// weapon := ru_time_lapser ;
30815: LD_ADDR_VAR 0 18
30819: PUSH
30820: LD_INT 49
30822: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30823: LD_VAR 0 12
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: LD_INT 2
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: IN
30838: PUSH
30839: LD_INT 11
30841: PUSH
30842: LD_VAR 0 5
30846: IN
30847: PUSH
30848: LD_INT 30
30850: PUSH
30851: LD_VAR 0 5
30855: IN
30856: OR
30857: AND
30858: PUSH
30859: LD_INT 6
30861: PPUSH
30862: LD_VAR 0 16
30866: PPUSH
30867: CALL_OW 321
30871: PUSH
30872: LD_INT 2
30874: EQUAL
30875: AND
30876: IFFALSE 31041
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30878: LD_INT 22
30880: PUSH
30881: LD_VAR 0 16
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 35
30895: PUSH
30896: LD_INT 11
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 35
30905: PUSH
30906: LD_INT 30
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 91
30920: PUSH
30921: LD_VAR 0 1
30925: PUSH
30926: LD_INT 18
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: PPUSH
30939: CALL_OW 69
30943: NOT
30944: PUSH
30945: LD_INT 22
30947: PUSH
30948: LD_VAR 0 16
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: LD_INT 32
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 30
30972: PUSH
30973: LD_INT 33
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 91
30987: PUSH
30988: LD_VAR 0 1
30992: PUSH
30993: LD_INT 12
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: PPUSH
31009: CALL_OW 69
31013: PUSH
31014: LD_INT 2
31016: GREATER
31017: AND
31018: IFFALSE 31041
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31020: LD_ADDR_VAR 0 18
31024: PUSH
31025: LD_INT 11
31027: PUSH
31028: LD_INT 30
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_VAR 0 12
31039: ARRAY
31040: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31041: LD_VAR 0 18
31045: NOT
31046: PUSH
31047: LD_INT 40
31049: PPUSH
31050: LD_VAR 0 16
31054: PPUSH
31055: CALL_OW 321
31059: PUSH
31060: LD_INT 2
31062: EQUAL
31063: AND
31064: PUSH
31065: LD_INT 7
31067: PUSH
31068: LD_VAR 0 5
31072: IN
31073: PUSH
31074: LD_INT 28
31076: PUSH
31077: LD_VAR 0 5
31081: IN
31082: OR
31083: PUSH
31084: LD_INT 45
31086: PUSH
31087: LD_VAR 0 5
31091: IN
31092: OR
31093: AND
31094: IFFALSE 31348
// begin hex := GetHexInfo ( x , y ) ;
31096: LD_ADDR_VAR 0 4
31100: PUSH
31101: LD_VAR 0 10
31105: PPUSH
31106: LD_VAR 0 11
31110: PPUSH
31111: CALL_OW 546
31115: ST_TO_ADDR
// if hex [ 1 ] then
31116: LD_VAR 0 4
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: IFFALSE 31128
// exit ;
31126: GO 31531
// height := hex [ 2 ] ;
31128: LD_ADDR_VAR 0 15
31132: PUSH
31133: LD_VAR 0 4
31137: PUSH
31138: LD_INT 2
31140: ARRAY
31141: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31142: LD_ADDR_VAR 0 14
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: LD_INT 3
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: ST_TO_ADDR
// for i in tmp do
31165: LD_ADDR_VAR 0 8
31169: PUSH
31170: LD_VAR 0 14
31174: PUSH
31175: FOR_IN
31176: IFFALSE 31346
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31178: LD_ADDR_VAR 0 9
31182: PUSH
31183: LD_VAR 0 10
31187: PPUSH
31188: LD_VAR 0 8
31192: PPUSH
31193: LD_INT 5
31195: PPUSH
31196: CALL_OW 272
31200: PUSH
31201: LD_VAR 0 11
31205: PPUSH
31206: LD_VAR 0 8
31210: PPUSH
31211: LD_INT 5
31213: PPUSH
31214: CALL_OW 273
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31223: LD_VAR 0 9
31227: PUSH
31228: LD_INT 1
31230: ARRAY
31231: PPUSH
31232: LD_VAR 0 9
31236: PUSH
31237: LD_INT 2
31239: ARRAY
31240: PPUSH
31241: CALL_OW 488
31245: IFFALSE 31344
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31247: LD_ADDR_VAR 0 4
31251: PUSH
31252: LD_VAR 0 9
31256: PUSH
31257: LD_INT 1
31259: ARRAY
31260: PPUSH
31261: LD_VAR 0 9
31265: PUSH
31266: LD_INT 2
31268: ARRAY
31269: PPUSH
31270: CALL_OW 546
31274: ST_TO_ADDR
// if hex [ 1 ] then
31275: LD_VAR 0 4
31279: PUSH
31280: LD_INT 1
31282: ARRAY
31283: IFFALSE 31287
// continue ;
31285: GO 31175
// h := hex [ 2 ] ;
31287: LD_ADDR_VAR 0 13
31291: PUSH
31292: LD_VAR 0 4
31296: PUSH
31297: LD_INT 2
31299: ARRAY
31300: ST_TO_ADDR
// if h + 7 < height then
31301: LD_VAR 0 13
31305: PUSH
31306: LD_INT 7
31308: PLUS
31309: PUSH
31310: LD_VAR 0 15
31314: LESS
31315: IFFALSE 31344
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31317: LD_ADDR_VAR 0 18
31321: PUSH
31322: LD_INT 7
31324: PUSH
31325: LD_INT 28
31327: PUSH
31328: LD_INT 45
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: LIST
31335: PUSH
31336: LD_VAR 0 12
31340: ARRAY
31341: ST_TO_ADDR
// break ;
31342: GO 31346
// end ; end ; end ;
31344: GO 31175
31346: POP
31347: POP
// end ; if not weapon then
31348: LD_VAR 0 18
31352: NOT
31353: IFFALSE 31413
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31355: LD_ADDR_VAR 0 5
31359: PUSH
31360: LD_VAR 0 5
31364: PUSH
31365: LD_INT 11
31367: PUSH
31368: LD_INT 30
31370: PUSH
31371: LD_INT 49
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: DIFF
31379: ST_TO_ADDR
// if not list then
31380: LD_VAR 0 5
31384: NOT
31385: IFFALSE 31389
// exit ;
31387: GO 31531
// weapon := list [ rand ( 1 , list ) ] ;
31389: LD_ADDR_VAR 0 18
31393: PUSH
31394: LD_VAR 0 5
31398: PUSH
31399: LD_INT 1
31401: PPUSH
31402: LD_VAR 0 5
31406: PPUSH
31407: CALL_OW 12
31411: ARRAY
31412: ST_TO_ADDR
// end ; if weapon then
31413: LD_VAR 0 18
31417: IFFALSE 31531
// begin tmp := CostOfWeapon ( weapon ) ;
31419: LD_ADDR_VAR 0 14
31423: PUSH
31424: LD_VAR 0 18
31428: PPUSH
31429: CALL_OW 451
31433: ST_TO_ADDR
// j := GetBase ( tower ) ;
31434: LD_ADDR_VAR 0 9
31438: PUSH
31439: LD_VAR 0 1
31443: PPUSH
31444: CALL_OW 274
31448: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31449: LD_VAR 0 9
31453: PPUSH
31454: LD_INT 1
31456: PPUSH
31457: CALL_OW 275
31461: PUSH
31462: LD_VAR 0 14
31466: PUSH
31467: LD_INT 1
31469: ARRAY
31470: GREATEREQUAL
31471: PUSH
31472: LD_VAR 0 9
31476: PPUSH
31477: LD_INT 2
31479: PPUSH
31480: CALL_OW 275
31484: PUSH
31485: LD_VAR 0 14
31489: PUSH
31490: LD_INT 2
31492: ARRAY
31493: GREATEREQUAL
31494: AND
31495: PUSH
31496: LD_VAR 0 9
31500: PPUSH
31501: LD_INT 3
31503: PPUSH
31504: CALL_OW 275
31508: PUSH
31509: LD_VAR 0 14
31513: PUSH
31514: LD_INT 3
31516: ARRAY
31517: GREATEREQUAL
31518: AND
31519: IFFALSE 31531
// result := weapon ;
31521: LD_ADDR_VAR 0 3
31525: PUSH
31526: LD_VAR 0 18
31530: ST_TO_ADDR
// end ; end ;
31531: LD_VAR 0 3
31535: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31536: LD_INT 0
31538: PPUSH
31539: PPUSH
// result := true ;
31540: LD_ADDR_VAR 0 3
31544: PUSH
31545: LD_INT 1
31547: ST_TO_ADDR
// if array1 = array2 then
31548: LD_VAR 0 1
31552: PUSH
31553: LD_VAR 0 2
31557: EQUAL
31558: IFFALSE 31618
// begin for i = 1 to array1 do
31560: LD_ADDR_VAR 0 4
31564: PUSH
31565: DOUBLE
31566: LD_INT 1
31568: DEC
31569: ST_TO_ADDR
31570: LD_VAR 0 1
31574: PUSH
31575: FOR_TO
31576: IFFALSE 31614
// if array1 [ i ] <> array2 [ i ] then
31578: LD_VAR 0 1
31582: PUSH
31583: LD_VAR 0 4
31587: ARRAY
31588: PUSH
31589: LD_VAR 0 2
31593: PUSH
31594: LD_VAR 0 4
31598: ARRAY
31599: NONEQUAL
31600: IFFALSE 31612
// begin result := false ;
31602: LD_ADDR_VAR 0 3
31606: PUSH
31607: LD_INT 0
31609: ST_TO_ADDR
// break ;
31610: GO 31614
// end ;
31612: GO 31575
31614: POP
31615: POP
// end else
31616: GO 31626
// result := false ;
31618: LD_ADDR_VAR 0 3
31622: PUSH
31623: LD_INT 0
31625: ST_TO_ADDR
// end ;
31626: LD_VAR 0 3
31630: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
// if not array1 or not array2 then
31635: LD_VAR 0 1
31639: NOT
31640: PUSH
31641: LD_VAR 0 2
31645: NOT
31646: OR
31647: IFFALSE 31651
// exit ;
31649: GO 31715
// result := true ;
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_INT 1
31658: ST_TO_ADDR
// for i = 1 to array1 do
31659: LD_ADDR_VAR 0 4
31663: PUSH
31664: DOUBLE
31665: LD_INT 1
31667: DEC
31668: ST_TO_ADDR
31669: LD_VAR 0 1
31673: PUSH
31674: FOR_TO
31675: IFFALSE 31713
// if array1 [ i ] <> array2 [ i ] then
31677: LD_VAR 0 1
31681: PUSH
31682: LD_VAR 0 4
31686: ARRAY
31687: PUSH
31688: LD_VAR 0 2
31692: PUSH
31693: LD_VAR 0 4
31697: ARRAY
31698: NONEQUAL
31699: IFFALSE 31711
// begin result := false ;
31701: LD_ADDR_VAR 0 3
31705: PUSH
31706: LD_INT 0
31708: ST_TO_ADDR
// break ;
31709: GO 31713
// end ;
31711: GO 31674
31713: POP
31714: POP
// end ;
31715: LD_VAR 0 3
31719: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31720: LD_INT 0
31722: PPUSH
31723: PPUSH
31724: PPUSH
// pom := GetBase ( fac ) ;
31725: LD_ADDR_VAR 0 5
31729: PUSH
31730: LD_VAR 0 1
31734: PPUSH
31735: CALL_OW 274
31739: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31740: LD_ADDR_VAR 0 4
31744: PUSH
31745: LD_VAR 0 2
31749: PUSH
31750: LD_INT 1
31752: ARRAY
31753: PPUSH
31754: LD_VAR 0 2
31758: PUSH
31759: LD_INT 2
31761: ARRAY
31762: PPUSH
31763: LD_VAR 0 2
31767: PUSH
31768: LD_INT 3
31770: ARRAY
31771: PPUSH
31772: LD_VAR 0 2
31776: PUSH
31777: LD_INT 4
31779: ARRAY
31780: PPUSH
31781: CALL_OW 449
31785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31786: LD_ADDR_VAR 0 3
31790: PUSH
31791: LD_VAR 0 5
31795: PPUSH
31796: LD_INT 1
31798: PPUSH
31799: CALL_OW 275
31803: PUSH
31804: LD_VAR 0 4
31808: PUSH
31809: LD_INT 1
31811: ARRAY
31812: GREATEREQUAL
31813: PUSH
31814: LD_VAR 0 5
31818: PPUSH
31819: LD_INT 2
31821: PPUSH
31822: CALL_OW 275
31826: PUSH
31827: LD_VAR 0 4
31831: PUSH
31832: LD_INT 2
31834: ARRAY
31835: GREATEREQUAL
31836: AND
31837: PUSH
31838: LD_VAR 0 5
31842: PPUSH
31843: LD_INT 3
31845: PPUSH
31846: CALL_OW 275
31850: PUSH
31851: LD_VAR 0 4
31855: PUSH
31856: LD_INT 3
31858: ARRAY
31859: GREATEREQUAL
31860: AND
31861: ST_TO_ADDR
// end ;
31862: LD_VAR 0 3
31866: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31867: LD_INT 0
31869: PPUSH
31870: PPUSH
31871: PPUSH
31872: PPUSH
// pom := GetBase ( building ) ;
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_VAR 0 1
31882: PPUSH
31883: CALL_OW 274
31887: ST_TO_ADDR
// if not pom then
31888: LD_VAR 0 3
31892: NOT
31893: IFFALSE 31897
// exit ;
31895: GO 32067
// btype := GetBType ( building ) ;
31897: LD_ADDR_VAR 0 5
31901: PUSH
31902: LD_VAR 0 1
31906: PPUSH
31907: CALL_OW 266
31911: ST_TO_ADDR
// if btype = b_armoury then
31912: LD_VAR 0 5
31916: PUSH
31917: LD_INT 4
31919: EQUAL
31920: IFFALSE 31930
// btype := b_barracks ;
31922: LD_ADDR_VAR 0 5
31926: PUSH
31927: LD_INT 5
31929: ST_TO_ADDR
// if btype = b_depot then
31930: LD_VAR 0 5
31934: PUSH
31935: LD_INT 0
31937: EQUAL
31938: IFFALSE 31948
// btype := b_warehouse ;
31940: LD_ADDR_VAR 0 5
31944: PUSH
31945: LD_INT 1
31947: ST_TO_ADDR
// if btype = b_workshop then
31948: LD_VAR 0 5
31952: PUSH
31953: LD_INT 2
31955: EQUAL
31956: IFFALSE 31966
// btype := b_factory ;
31958: LD_ADDR_VAR 0 5
31962: PUSH
31963: LD_INT 3
31965: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31966: LD_ADDR_VAR 0 4
31970: PUSH
31971: LD_VAR 0 5
31975: PPUSH
31976: LD_VAR 0 1
31980: PPUSH
31981: CALL_OW 248
31985: PPUSH
31986: CALL_OW 450
31990: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31991: LD_ADDR_VAR 0 2
31995: PUSH
31996: LD_VAR 0 3
32000: PPUSH
32001: LD_INT 1
32003: PPUSH
32004: CALL_OW 275
32008: PUSH
32009: LD_VAR 0 4
32013: PUSH
32014: LD_INT 1
32016: ARRAY
32017: GREATEREQUAL
32018: PUSH
32019: LD_VAR 0 3
32023: PPUSH
32024: LD_INT 2
32026: PPUSH
32027: CALL_OW 275
32031: PUSH
32032: LD_VAR 0 4
32036: PUSH
32037: LD_INT 2
32039: ARRAY
32040: GREATEREQUAL
32041: AND
32042: PUSH
32043: LD_VAR 0 3
32047: PPUSH
32048: LD_INT 3
32050: PPUSH
32051: CALL_OW 275
32055: PUSH
32056: LD_VAR 0 4
32060: PUSH
32061: LD_INT 3
32063: ARRAY
32064: GREATEREQUAL
32065: AND
32066: ST_TO_ADDR
// end ;
32067: LD_VAR 0 2
32071: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32072: LD_INT 0
32074: PPUSH
32075: PPUSH
32076: PPUSH
// pom := GetBase ( building ) ;
32077: LD_ADDR_VAR 0 4
32081: PUSH
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 274
32091: ST_TO_ADDR
// if not pom then
32092: LD_VAR 0 4
32096: NOT
32097: IFFALSE 32101
// exit ;
32099: GO 32202
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32101: LD_ADDR_VAR 0 5
32105: PUSH
32106: LD_VAR 0 2
32110: PPUSH
32111: LD_VAR 0 1
32115: PPUSH
32116: CALL_OW 248
32120: PPUSH
32121: CALL_OW 450
32125: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32126: LD_ADDR_VAR 0 3
32130: PUSH
32131: LD_VAR 0 4
32135: PPUSH
32136: LD_INT 1
32138: PPUSH
32139: CALL_OW 275
32143: PUSH
32144: LD_VAR 0 5
32148: PUSH
32149: LD_INT 1
32151: ARRAY
32152: GREATEREQUAL
32153: PUSH
32154: LD_VAR 0 4
32158: PPUSH
32159: LD_INT 2
32161: PPUSH
32162: CALL_OW 275
32166: PUSH
32167: LD_VAR 0 5
32171: PUSH
32172: LD_INT 2
32174: ARRAY
32175: GREATEREQUAL
32176: AND
32177: PUSH
32178: LD_VAR 0 4
32182: PPUSH
32183: LD_INT 3
32185: PPUSH
32186: CALL_OW 275
32190: PUSH
32191: LD_VAR 0 5
32195: PUSH
32196: LD_INT 3
32198: ARRAY
32199: GREATEREQUAL
32200: AND
32201: ST_TO_ADDR
// end ;
32202: LD_VAR 0 3
32206: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
32211: PPUSH
32212: PPUSH
32213: PPUSH
32214: PPUSH
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
// result := false ;
32220: LD_ADDR_VAR 0 8
32224: PUSH
32225: LD_INT 0
32227: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32228: LD_VAR 0 5
32232: NOT
32233: PUSH
32234: LD_VAR 0 1
32238: NOT
32239: OR
32240: PUSH
32241: LD_VAR 0 2
32245: NOT
32246: OR
32247: PUSH
32248: LD_VAR 0 3
32252: NOT
32253: OR
32254: IFFALSE 32258
// exit ;
32256: GO 33072
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32258: LD_ADDR_VAR 0 14
32262: PUSH
32263: LD_VAR 0 1
32267: PPUSH
32268: LD_VAR 0 2
32272: PPUSH
32273: LD_VAR 0 3
32277: PPUSH
32278: LD_VAR 0 4
32282: PPUSH
32283: LD_VAR 0 5
32287: PUSH
32288: LD_INT 1
32290: ARRAY
32291: PPUSH
32292: CALL_OW 248
32296: PPUSH
32297: LD_INT 0
32299: PPUSH
32300: CALL 34305 0 6
32304: ST_TO_ADDR
// if not hexes then
32305: LD_VAR 0 14
32309: NOT
32310: IFFALSE 32314
// exit ;
32312: GO 33072
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32314: LD_ADDR_VAR 0 17
32318: PUSH
32319: LD_VAR 0 5
32323: PPUSH
32324: LD_INT 22
32326: PUSH
32327: LD_VAR 0 13
32331: PPUSH
32332: CALL_OW 255
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 30
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 30
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PPUSH
32373: CALL_OW 72
32377: ST_TO_ADDR
// for i = 1 to hexes do
32378: LD_ADDR_VAR 0 9
32382: PUSH
32383: DOUBLE
32384: LD_INT 1
32386: DEC
32387: ST_TO_ADDR
32388: LD_VAR 0 14
32392: PUSH
32393: FOR_TO
32394: IFFALSE 33070
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32396: LD_ADDR_VAR 0 13
32400: PUSH
32401: LD_VAR 0 14
32405: PUSH
32406: LD_VAR 0 9
32410: ARRAY
32411: PUSH
32412: LD_INT 1
32414: ARRAY
32415: PPUSH
32416: LD_VAR 0 14
32420: PUSH
32421: LD_VAR 0 9
32425: ARRAY
32426: PUSH
32427: LD_INT 2
32429: ARRAY
32430: PPUSH
32431: CALL_OW 428
32435: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32436: LD_VAR 0 14
32440: PUSH
32441: LD_VAR 0 9
32445: ARRAY
32446: PUSH
32447: LD_INT 1
32449: ARRAY
32450: PPUSH
32451: LD_VAR 0 14
32455: PUSH
32456: LD_VAR 0 9
32460: ARRAY
32461: PUSH
32462: LD_INT 2
32464: ARRAY
32465: PPUSH
32466: CALL_OW 351
32470: PUSH
32471: LD_VAR 0 14
32475: PUSH
32476: LD_VAR 0 9
32480: ARRAY
32481: PUSH
32482: LD_INT 1
32484: ARRAY
32485: PPUSH
32486: LD_VAR 0 14
32490: PUSH
32491: LD_VAR 0 9
32495: ARRAY
32496: PUSH
32497: LD_INT 2
32499: ARRAY
32500: PPUSH
32501: CALL_OW 488
32505: NOT
32506: OR
32507: PUSH
32508: LD_VAR 0 13
32512: PPUSH
32513: CALL_OW 247
32517: PUSH
32518: LD_INT 3
32520: EQUAL
32521: OR
32522: IFFALSE 32528
// exit ;
32524: POP
32525: POP
32526: GO 33072
// if not tmp then
32528: LD_VAR 0 13
32532: NOT
32533: IFFALSE 32537
// continue ;
32535: GO 32393
// result := true ;
32537: LD_ADDR_VAR 0 8
32541: PUSH
32542: LD_INT 1
32544: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32545: LD_VAR 0 6
32549: PUSH
32550: LD_VAR 0 13
32554: PPUSH
32555: CALL_OW 247
32559: PUSH
32560: LD_INT 2
32562: EQUAL
32563: AND
32564: PUSH
32565: LD_VAR 0 13
32569: PPUSH
32570: CALL_OW 263
32574: PUSH
32575: LD_INT 1
32577: EQUAL
32578: AND
32579: IFFALSE 32743
// begin if IsDrivenBy ( tmp ) then
32581: LD_VAR 0 13
32585: PPUSH
32586: CALL_OW 311
32590: IFFALSE 32594
// continue ;
32592: GO 32393
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32594: LD_VAR 0 6
32598: PPUSH
32599: LD_INT 3
32601: PUSH
32602: LD_INT 60
32604: PUSH
32605: EMPTY
32606: LIST
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: LD_INT 55
32617: PUSH
32618: EMPTY
32619: LIST
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PPUSH
32629: CALL_OW 72
32633: IFFALSE 32741
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32635: LD_ADDR_VAR 0 18
32639: PUSH
32640: LD_VAR 0 6
32644: PPUSH
32645: LD_INT 3
32647: PUSH
32648: LD_INT 60
32650: PUSH
32651: EMPTY
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 3
32660: PUSH
32661: LD_INT 55
32663: PUSH
32664: EMPTY
32665: LIST
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PPUSH
32675: CALL_OW 72
32679: PUSH
32680: LD_INT 1
32682: ARRAY
32683: ST_TO_ADDR
// if IsInUnit ( driver ) then
32684: LD_VAR 0 18
32688: PPUSH
32689: CALL_OW 310
32693: IFFALSE 32704
// ComExit ( driver ) ;
32695: LD_VAR 0 18
32699: PPUSH
32700: CALL 58085 0 1
// AddComEnterUnit ( driver , tmp ) ;
32704: LD_VAR 0 18
32708: PPUSH
32709: LD_VAR 0 13
32713: PPUSH
32714: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32718: LD_VAR 0 18
32722: PPUSH
32723: LD_VAR 0 7
32727: PPUSH
32728: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32732: LD_VAR 0 18
32736: PPUSH
32737: CALL_OW 181
// end ; continue ;
32741: GO 32393
// end ; if not cleaners or not tmp in cleaners then
32743: LD_VAR 0 6
32747: NOT
32748: PUSH
32749: LD_VAR 0 13
32753: PUSH
32754: LD_VAR 0 6
32758: IN
32759: NOT
32760: OR
32761: IFFALSE 33068
// begin if dep then
32763: LD_VAR 0 17
32767: IFFALSE 32903
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32769: LD_ADDR_VAR 0 16
32773: PUSH
32774: LD_VAR 0 17
32778: PUSH
32779: LD_INT 1
32781: ARRAY
32782: PPUSH
32783: CALL_OW 250
32787: PPUSH
32788: LD_VAR 0 17
32792: PUSH
32793: LD_INT 1
32795: ARRAY
32796: PPUSH
32797: CALL_OW 254
32801: PPUSH
32802: LD_INT 5
32804: PPUSH
32805: CALL_OW 272
32809: PUSH
32810: LD_VAR 0 17
32814: PUSH
32815: LD_INT 1
32817: ARRAY
32818: PPUSH
32819: CALL_OW 251
32823: PPUSH
32824: LD_VAR 0 17
32828: PUSH
32829: LD_INT 1
32831: ARRAY
32832: PPUSH
32833: CALL_OW 254
32837: PPUSH
32838: LD_INT 5
32840: PPUSH
32841: CALL_OW 273
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32850: LD_VAR 0 16
32854: PUSH
32855: LD_INT 1
32857: ARRAY
32858: PPUSH
32859: LD_VAR 0 16
32863: PUSH
32864: LD_INT 2
32866: ARRAY
32867: PPUSH
32868: CALL_OW 488
32872: IFFALSE 32903
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32874: LD_VAR 0 13
32878: PPUSH
32879: LD_VAR 0 16
32883: PUSH
32884: LD_INT 1
32886: ARRAY
32887: PPUSH
32888: LD_VAR 0 16
32892: PUSH
32893: LD_INT 2
32895: ARRAY
32896: PPUSH
32897: CALL_OW 111
// continue ;
32901: GO 32393
// end ; end ; r := GetDir ( tmp ) ;
32903: LD_ADDR_VAR 0 15
32907: PUSH
32908: LD_VAR 0 13
32912: PPUSH
32913: CALL_OW 254
32917: ST_TO_ADDR
// if r = 5 then
32918: LD_VAR 0 15
32922: PUSH
32923: LD_INT 5
32925: EQUAL
32926: IFFALSE 32936
// r := 0 ;
32928: LD_ADDR_VAR 0 15
32932: PUSH
32933: LD_INT 0
32935: ST_TO_ADDR
// for j = r to 5 do
32936: LD_ADDR_VAR 0 10
32940: PUSH
32941: DOUBLE
32942: LD_VAR 0 15
32946: DEC
32947: ST_TO_ADDR
32948: LD_INT 5
32950: PUSH
32951: FOR_TO
32952: IFFALSE 33066
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32954: LD_ADDR_VAR 0 11
32958: PUSH
32959: LD_VAR 0 13
32963: PPUSH
32964: CALL_OW 250
32968: PPUSH
32969: LD_VAR 0 10
32973: PPUSH
32974: LD_INT 2
32976: PPUSH
32977: CALL_OW 272
32981: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32982: LD_ADDR_VAR 0 12
32986: PUSH
32987: LD_VAR 0 13
32991: PPUSH
32992: CALL_OW 251
32996: PPUSH
32997: LD_VAR 0 10
33001: PPUSH
33002: LD_INT 2
33004: PPUSH
33005: CALL_OW 273
33009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33010: LD_VAR 0 11
33014: PPUSH
33015: LD_VAR 0 12
33019: PPUSH
33020: CALL_OW 488
33024: PUSH
33025: LD_VAR 0 11
33029: PPUSH
33030: LD_VAR 0 12
33034: PPUSH
33035: CALL_OW 428
33039: NOT
33040: AND
33041: IFFALSE 33064
// begin ComMoveXY ( tmp , _x , _y ) ;
33043: LD_VAR 0 13
33047: PPUSH
33048: LD_VAR 0 11
33052: PPUSH
33053: LD_VAR 0 12
33057: PPUSH
33058: CALL_OW 111
// break ;
33062: GO 33066
// end ; end ;
33064: GO 32951
33066: POP
33067: POP
// end ; end ;
33068: GO 32393
33070: POP
33071: POP
// end ;
33072: LD_VAR 0 8
33076: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33077: LD_INT 0
33079: PPUSH
// result := true ;
33080: LD_ADDR_VAR 0 3
33084: PUSH
33085: LD_INT 1
33087: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33088: LD_VAR 0 2
33092: PUSH
33093: LD_INT 24
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33107
33099: LD_INT 33
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33132
33107: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33108: LD_ADDR_VAR 0 3
33112: PUSH
33113: LD_INT 32
33115: PPUSH
33116: LD_VAR 0 1
33120: PPUSH
33121: CALL_OW 321
33125: PUSH
33126: LD_INT 2
33128: EQUAL
33129: ST_TO_ADDR
33130: GO 33448
33132: LD_INT 20
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33165
33140: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33141: LD_ADDR_VAR 0 3
33145: PUSH
33146: LD_INT 6
33148: PPUSH
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 321
33158: PUSH
33159: LD_INT 2
33161: EQUAL
33162: ST_TO_ADDR
33163: GO 33448
33165: LD_INT 22
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33179
33171: LD_INT 36
33173: DOUBLE
33174: EQUAL
33175: IFTRUE 33179
33177: GO 33204
33179: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33180: LD_ADDR_VAR 0 3
33184: PUSH
33185: LD_INT 15
33187: PPUSH
33188: LD_VAR 0 1
33192: PPUSH
33193: CALL_OW 321
33197: PUSH
33198: LD_INT 2
33200: EQUAL
33201: ST_TO_ADDR
33202: GO 33448
33204: LD_INT 30
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33237
33212: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33213: LD_ADDR_VAR 0 3
33217: PUSH
33218: LD_INT 20
33220: PPUSH
33221: LD_VAR 0 1
33225: PPUSH
33226: CALL_OW 321
33230: PUSH
33231: LD_INT 2
33233: EQUAL
33234: ST_TO_ADDR
33235: GO 33448
33237: LD_INT 28
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33251
33243: LD_INT 21
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33251
33249: GO 33276
33251: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33252: LD_ADDR_VAR 0 3
33256: PUSH
33257: LD_INT 21
33259: PPUSH
33260: LD_VAR 0 1
33264: PPUSH
33265: CALL_OW 321
33269: PUSH
33270: LD_INT 2
33272: EQUAL
33273: ST_TO_ADDR
33274: GO 33448
33276: LD_INT 16
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33309
33284: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33285: LD_ADDR_VAR 0 3
33289: PUSH
33290: LD_INT 84
33292: PPUSH
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 321
33302: PUSH
33303: LD_INT 2
33305: EQUAL
33306: ST_TO_ADDR
33307: GO 33448
33309: LD_INT 19
33311: DOUBLE
33312: EQUAL
33313: IFTRUE 33323
33315: LD_INT 23
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33348
33323: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_INT 83
33331: PPUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: CALL_OW 321
33341: PUSH
33342: LD_INT 2
33344: EQUAL
33345: ST_TO_ADDR
33346: GO 33448
33348: LD_INT 17
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33381
33356: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33357: LD_ADDR_VAR 0 3
33361: PUSH
33362: LD_INT 39
33364: PPUSH
33365: LD_VAR 0 1
33369: PPUSH
33370: CALL_OW 321
33374: PUSH
33375: LD_INT 2
33377: EQUAL
33378: ST_TO_ADDR
33379: GO 33448
33381: LD_INT 18
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33414
33389: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33390: LD_ADDR_VAR 0 3
33394: PUSH
33395: LD_INT 40
33397: PPUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: CALL_OW 321
33407: PUSH
33408: LD_INT 2
33410: EQUAL
33411: ST_TO_ADDR
33412: GO 33448
33414: LD_INT 27
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33422
33420: GO 33447
33422: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33423: LD_ADDR_VAR 0 3
33427: PUSH
33428: LD_INT 35
33430: PPUSH
33431: LD_VAR 0 1
33435: PPUSH
33436: CALL_OW 321
33440: PUSH
33441: LD_INT 2
33443: EQUAL
33444: ST_TO_ADDR
33445: GO 33448
33447: POP
// end ;
33448: LD_VAR 0 3
33452: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33453: LD_INT 0
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
// result := false ;
33466: LD_ADDR_VAR 0 6
33470: PUSH
33471: LD_INT 0
33473: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33474: LD_VAR 0 1
33478: NOT
33479: PUSH
33480: LD_VAR 0 1
33484: PPUSH
33485: CALL_OW 266
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: IN
33500: NOT
33501: OR
33502: PUSH
33503: LD_VAR 0 2
33507: NOT
33508: OR
33509: PUSH
33510: LD_VAR 0 5
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: LD_INT 3
33526: PUSH
33527: LD_INT 4
33529: PUSH
33530: LD_INT 5
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: IN
33541: NOT
33542: OR
33543: PUSH
33544: LD_VAR 0 3
33548: PPUSH
33549: LD_VAR 0 4
33553: PPUSH
33554: CALL_OW 488
33558: NOT
33559: OR
33560: IFFALSE 33564
// exit ;
33562: GO 34300
// side := GetSide ( depot ) ;
33564: LD_ADDR_VAR 0 9
33568: PUSH
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 255
33578: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33579: LD_VAR 0 9
33583: PPUSH
33584: LD_VAR 0 2
33588: PPUSH
33589: CALL 33077 0 2
33593: NOT
33594: IFFALSE 33598
// exit ;
33596: GO 34300
// pom := GetBase ( depot ) ;
33598: LD_ADDR_VAR 0 10
33602: PUSH
33603: LD_VAR 0 1
33607: PPUSH
33608: CALL_OW 274
33612: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33613: LD_ADDR_VAR 0 11
33617: PUSH
33618: LD_VAR 0 2
33622: PPUSH
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 248
33632: PPUSH
33633: CALL_OW 450
33637: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33638: LD_VAR 0 10
33642: PPUSH
33643: LD_INT 1
33645: PPUSH
33646: CALL_OW 275
33650: PUSH
33651: LD_VAR 0 11
33655: PUSH
33656: LD_INT 1
33658: ARRAY
33659: GREATEREQUAL
33660: PUSH
33661: LD_VAR 0 10
33665: PPUSH
33666: LD_INT 2
33668: PPUSH
33669: CALL_OW 275
33673: PUSH
33674: LD_VAR 0 11
33678: PUSH
33679: LD_INT 2
33681: ARRAY
33682: GREATEREQUAL
33683: AND
33684: PUSH
33685: LD_VAR 0 10
33689: PPUSH
33690: LD_INT 3
33692: PPUSH
33693: CALL_OW 275
33697: PUSH
33698: LD_VAR 0 11
33702: PUSH
33703: LD_INT 3
33705: ARRAY
33706: GREATEREQUAL
33707: AND
33708: NOT
33709: IFFALSE 33713
// exit ;
33711: GO 34300
// if GetBType ( depot ) = b_depot then
33713: LD_VAR 0 1
33717: PPUSH
33718: CALL_OW 266
33722: PUSH
33723: LD_INT 0
33725: EQUAL
33726: IFFALSE 33738
// dist := 28 else
33728: LD_ADDR_VAR 0 14
33732: PUSH
33733: LD_INT 28
33735: ST_TO_ADDR
33736: GO 33746
// dist := 36 ;
33738: LD_ADDR_VAR 0 14
33742: PUSH
33743: LD_INT 36
33745: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33746: LD_VAR 0 1
33750: PPUSH
33751: LD_VAR 0 3
33755: PPUSH
33756: LD_VAR 0 4
33760: PPUSH
33761: CALL_OW 297
33765: PUSH
33766: LD_VAR 0 14
33770: GREATER
33771: IFFALSE 33775
// exit ;
33773: GO 34300
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33775: LD_ADDR_VAR 0 12
33779: PUSH
33780: LD_VAR 0 2
33784: PPUSH
33785: LD_VAR 0 3
33789: PPUSH
33790: LD_VAR 0 4
33794: PPUSH
33795: LD_VAR 0 5
33799: PPUSH
33800: LD_VAR 0 1
33804: PPUSH
33805: CALL_OW 248
33809: PPUSH
33810: LD_INT 0
33812: PPUSH
33813: CALL 34305 0 6
33817: ST_TO_ADDR
// if not hexes then
33818: LD_VAR 0 12
33822: NOT
33823: IFFALSE 33827
// exit ;
33825: GO 34300
// hex := GetHexInfo ( x , y ) ;
33827: LD_ADDR_VAR 0 15
33831: PUSH
33832: LD_VAR 0 3
33836: PPUSH
33837: LD_VAR 0 4
33841: PPUSH
33842: CALL_OW 546
33846: ST_TO_ADDR
// if hex [ 1 ] then
33847: LD_VAR 0 15
33851: PUSH
33852: LD_INT 1
33854: ARRAY
33855: IFFALSE 33859
// exit ;
33857: GO 34300
// height := hex [ 2 ] ;
33859: LD_ADDR_VAR 0 13
33863: PUSH
33864: LD_VAR 0 15
33868: PUSH
33869: LD_INT 2
33871: ARRAY
33872: ST_TO_ADDR
// for i = 1 to hexes do
33873: LD_ADDR_VAR 0 7
33877: PUSH
33878: DOUBLE
33879: LD_INT 1
33881: DEC
33882: ST_TO_ADDR
33883: LD_VAR 0 12
33887: PUSH
33888: FOR_TO
33889: IFFALSE 34219
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33891: LD_VAR 0 12
33895: PUSH
33896: LD_VAR 0 7
33900: ARRAY
33901: PUSH
33902: LD_INT 1
33904: ARRAY
33905: PPUSH
33906: LD_VAR 0 12
33910: PUSH
33911: LD_VAR 0 7
33915: ARRAY
33916: PUSH
33917: LD_INT 2
33919: ARRAY
33920: PPUSH
33921: CALL_OW 488
33925: NOT
33926: PUSH
33927: LD_VAR 0 12
33931: PUSH
33932: LD_VAR 0 7
33936: ARRAY
33937: PUSH
33938: LD_INT 1
33940: ARRAY
33941: PPUSH
33942: LD_VAR 0 12
33946: PUSH
33947: LD_VAR 0 7
33951: ARRAY
33952: PUSH
33953: LD_INT 2
33955: ARRAY
33956: PPUSH
33957: CALL_OW 428
33961: PUSH
33962: LD_INT 0
33964: GREATER
33965: OR
33966: PUSH
33967: LD_VAR 0 12
33971: PUSH
33972: LD_VAR 0 7
33976: ARRAY
33977: PUSH
33978: LD_INT 1
33980: ARRAY
33981: PPUSH
33982: LD_VAR 0 12
33986: PUSH
33987: LD_VAR 0 7
33991: ARRAY
33992: PUSH
33993: LD_INT 2
33995: ARRAY
33996: PPUSH
33997: CALL_OW 351
34001: OR
34002: IFFALSE 34008
// exit ;
34004: POP
34005: POP
34006: GO 34300
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34008: LD_ADDR_VAR 0 8
34012: PUSH
34013: LD_VAR 0 12
34017: PUSH
34018: LD_VAR 0 7
34022: ARRAY
34023: PUSH
34024: LD_INT 1
34026: ARRAY
34027: PPUSH
34028: LD_VAR 0 12
34032: PUSH
34033: LD_VAR 0 7
34037: ARRAY
34038: PUSH
34039: LD_INT 2
34041: ARRAY
34042: PPUSH
34043: CALL_OW 546
34047: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34048: LD_VAR 0 8
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PUSH
34057: LD_VAR 0 8
34061: PUSH
34062: LD_INT 2
34064: ARRAY
34065: PUSH
34066: LD_VAR 0 13
34070: PUSH
34071: LD_INT 2
34073: PLUS
34074: GREATER
34075: OR
34076: PUSH
34077: LD_VAR 0 8
34081: PUSH
34082: LD_INT 2
34084: ARRAY
34085: PUSH
34086: LD_VAR 0 13
34090: PUSH
34091: LD_INT 2
34093: MINUS
34094: LESS
34095: OR
34096: PUSH
34097: LD_VAR 0 8
34101: PUSH
34102: LD_INT 3
34104: ARRAY
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 8
34111: PUSH
34112: LD_INT 9
34114: PUSH
34115: LD_INT 10
34117: PUSH
34118: LD_INT 11
34120: PUSH
34121: LD_INT 12
34123: PUSH
34124: LD_INT 13
34126: PUSH
34127: LD_INT 16
34129: PUSH
34130: LD_INT 17
34132: PUSH
34133: LD_INT 18
34135: PUSH
34136: LD_INT 19
34138: PUSH
34139: LD_INT 20
34141: PUSH
34142: LD_INT 21
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: IN
34160: NOT
34161: OR
34162: PUSH
34163: LD_VAR 0 8
34167: PUSH
34168: LD_INT 5
34170: ARRAY
34171: NOT
34172: OR
34173: PUSH
34174: LD_VAR 0 8
34178: PUSH
34179: LD_INT 6
34181: ARRAY
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: LD_INT 7
34191: PUSH
34192: LD_INT 9
34194: PUSH
34195: LD_INT 10
34197: PUSH
34198: LD_INT 11
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: IN
34209: NOT
34210: OR
34211: IFFALSE 34217
// exit ;
34213: POP
34214: POP
34215: GO 34300
// end ;
34217: GO 33888
34219: POP
34220: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34221: LD_VAR 0 9
34225: PPUSH
34226: LD_VAR 0 3
34230: PPUSH
34231: LD_VAR 0 4
34235: PPUSH
34236: LD_INT 20
34238: PPUSH
34239: CALL 26252 0 4
34243: PUSH
34244: LD_INT 4
34246: ARRAY
34247: IFFALSE 34251
// exit ;
34249: GO 34300
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34251: LD_VAR 0 2
34255: PUSH
34256: LD_INT 29
34258: PUSH
34259: LD_INT 30
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: IN
34266: PUSH
34267: LD_VAR 0 3
34271: PPUSH
34272: LD_VAR 0 4
34276: PPUSH
34277: LD_VAR 0 9
34281: PPUSH
34282: CALL_OW 440
34286: NOT
34287: AND
34288: IFFALSE 34292
// exit ;
34290: GO 34300
// result := true ;
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_INT 1
34299: ST_TO_ADDR
// end ;
34300: LD_VAR 0 6
34304: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34305: LD_INT 0
34307: PPUSH
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
// result = [ ] ;
34365: LD_ADDR_VAR 0 7
34369: PUSH
34370: EMPTY
34371: ST_TO_ADDR
// temp_list = [ ] ;
34372: LD_ADDR_VAR 0 9
34376: PUSH
34377: EMPTY
34378: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34379: LD_VAR 0 4
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 3
34395: PUSH
34396: LD_INT 4
34398: PUSH
34399: LD_INT 5
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: IN
34410: NOT
34411: PUSH
34412: LD_VAR 0 1
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: IN
34427: PUSH
34428: LD_VAR 0 5
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: IN
34447: NOT
34448: AND
34449: OR
34450: IFFALSE 34454
// exit ;
34452: GO 52845
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34454: LD_VAR 0 1
34458: PUSH
34459: LD_INT 6
34461: PUSH
34462: LD_INT 7
34464: PUSH
34465: LD_INT 8
34467: PUSH
34468: LD_INT 13
34470: PUSH
34471: LD_INT 12
34473: PUSH
34474: LD_INT 15
34476: PUSH
34477: LD_INT 11
34479: PUSH
34480: LD_INT 14
34482: PUSH
34483: LD_INT 10
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: IN
34497: IFFALSE 34507
// btype = b_lab ;
34499: LD_ADDR_VAR 0 1
34503: PUSH
34504: LD_INT 6
34506: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34507: LD_VAR 0 6
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: IN
34526: NOT
34527: PUSH
34528: LD_VAR 0 1
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: LD_INT 6
34547: PUSH
34548: LD_INT 36
34550: PUSH
34551: LD_INT 4
34553: PUSH
34554: LD_INT 5
34556: PUSH
34557: LD_INT 31
34559: PUSH
34560: LD_INT 32
34562: PUSH
34563: LD_INT 33
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: IN
34579: NOT
34580: PUSH
34581: LD_VAR 0 6
34585: PUSH
34586: LD_INT 1
34588: EQUAL
34589: AND
34590: OR
34591: PUSH
34592: LD_VAR 0 1
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: IN
34607: NOT
34608: PUSH
34609: LD_VAR 0 6
34613: PUSH
34614: LD_INT 2
34616: EQUAL
34617: AND
34618: OR
34619: IFFALSE 34629
// mode = 0 ;
34621: LD_ADDR_VAR 0 6
34625: PUSH
34626: LD_INT 0
34628: ST_TO_ADDR
// case mode of 0 :
34629: LD_VAR 0 6
34633: PUSH
34634: LD_INT 0
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34642
34640: GO 46095
34642: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34643: LD_ADDR_VAR 0 11
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: LD_INT 2
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34836: LD_ADDR_VAR 0 12
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 1
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: NEG
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: NEG
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35032: LD_ADDR_VAR 0 13
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: LD_INT 3
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 3
35191: NEG
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 3
35203: NEG
35204: PUSH
35205: LD_INT 3
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35231: LD_ADDR_VAR 0 14
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: LD_INT 1
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 3
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 3
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: LD_INT 2
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35427: LD_ADDR_VAR 0 15
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 0
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 3
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 3
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35620: LD_ADDR_VAR 0 16
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: LD_INT 3
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35813: LD_ADDR_VAR 0 17
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: NEG
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36043: LD_ADDR_VAR 0 18
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 2
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36273: LD_ADDR_VAR 0 19
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: LD_INT 2
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36503: LD_ADDR_VAR 0 20
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36733: LD_ADDR_VAR 0 21
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36963: LD_ADDR_VAR 0 22
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 2
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 2
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37193: LD_ADDR_VAR 0 23
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: LD_INT 1
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 2
37369: NEG
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: NEG
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: LD_INT 3
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 3
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37473: LD_ADDR_VAR 0 24
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 2
37649: NEG
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 3
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37749: LD_ADDR_VAR 0 25
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 2
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 3
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: LD_INT 3
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38023: LD_ADDR_VAR 0 26
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: LD_INT 3
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: NEG
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38299: LD_ADDR_VAR 0 27
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 3
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 3
38544: NEG
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38579: LD_ADDR_VAR 0 28
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 3
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 3
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 3
38814: NEG
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 3
38826: NEG
38827: PUSH
38828: LD_INT 2
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38861: LD_ADDR_VAR 0 29
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 2
39027: NEG
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: NEG
39040: PUSH
39041: LD_INT 2
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: LD_INT 3
39055: NEG
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 3
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39140: LD_ADDR_VAR 0 30
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: LD_INT 3
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: LD_INT 3
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39418: LD_ADDR_VAR 0 31
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 2
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 3
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 3
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 3
39661: NEG
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39696: LD_ADDR_VAR 0 32
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 3
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 3
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 3
39939: NEG
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39974: LD_ADDR_VAR 0 33
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: LD_INT 3
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 3
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: LD_INT 3
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 3
40218: NEG
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40253: LD_ADDR_VAR 0 34
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 2
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: PUSH
40478: LD_INT 3
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 3
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40533: LD_ADDR_VAR 0 35
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40645: LD_ADDR_VAR 0 36
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40757: LD_ADDR_VAR 0 37
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40869: LD_ADDR_VAR 0 38
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40981: LD_ADDR_VAR 0 39
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41093: LD_ADDR_VAR 0 40
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41205: LD_ADDR_VAR 0 41
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 3
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 3
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: LD_INT 3
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 3
41479: NEG
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 3
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: LD_INT 3
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41555: LD_ADDR_VAR 0 42
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: LD_INT 3
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 3
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 3
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 3
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 3
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 3
41864: NEG
41865: PUSH
41866: LD_INT 3
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41905: LD_ADDR_VAR 0 43
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 3
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: NEG
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42253: LD_ADDR_VAR 0 44
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: LD_INT 3
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 3
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 3
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 3
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: NEG
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 3
42562: NEG
42563: PUSH
42564: LD_INT 3
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42603: LD_ADDR_VAR 0 45
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: NEG
42794: PUSH
42795: LD_INT 3
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 3
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 3
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: NEG
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 3
42912: NEG
42913: PUSH
42914: LD_INT 3
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42953: LD_ADDR_VAR 0 46
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: LD_INT 3
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 3
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 3
43249: NEG
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43301: LD_ADDR_VAR 0 47
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43452: LD_ADDR_VAR 0 48
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43599: LD_ADDR_VAR 0 49
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43743: LD_ADDR_VAR 0 50
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43887: LD_ADDR_VAR 0 51
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44034: LD_ADDR_VAR 0 52
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44185: LD_ADDR_VAR 0 53
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44415: LD_ADDR_VAR 0 54
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44645: LD_ADDR_VAR 0 55
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 2
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 2
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44875: LD_ADDR_VAR 0 56
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45105: LD_ADDR_VAR 0 57
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45335: LD_ADDR_VAR 0 58
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45565: LD_ADDR_VAR 0 59
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45653: LD_ADDR_VAR 0 60
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45741: LD_ADDR_VAR 0 61
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45829: LD_ADDR_VAR 0 62
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45917: LD_ADDR_VAR 0 63
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46005: LD_ADDR_VAR 0 64
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: ST_TO_ADDR
// end ; 1 :
46093: GO 51990
46095: LD_INT 1
46097: DOUBLE
46098: EQUAL
46099: IFTRUE 46103
46101: GO 48726
46103: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46104: LD_ADDR_VAR 0 11
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 3
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46148: LD_ADDR_VAR 0 12
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46189: LD_ADDR_VAR 0 13
46193: PUSH
46194: LD_INT 3
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46229: LD_ADDR_VAR 0 14
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46270: LD_ADDR_VAR 0 15
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 3
46288: NEG
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46314: LD_ADDR_VAR 0 16
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 3
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46360: LD_ADDR_VAR 0 17
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: LD_INT 3
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46404: LD_ADDR_VAR 0 18
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46445: LD_ADDR_VAR 0 19
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46485: LD_ADDR_VAR 0 20
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46526: LD_ADDR_VAR 0 21
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 3
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 3
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46570: LD_ADDR_VAR 0 22
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46616: LD_ADDR_VAR 0 23
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 4
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46660: LD_ADDR_VAR 0 24
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 4
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46701: LD_ADDR_VAR 0 25
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 4
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 3
46728: PUSH
46729: LD_INT 4
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46741: LD_ADDR_VAR 0 26
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: LIST
46781: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46782: LD_ADDR_VAR 0 27
46786: PUSH
46787: LD_INT 3
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 4
46811: NEG
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46826: LD_ADDR_VAR 0 28
46830: PUSH
46831: LD_INT 3
46833: NEG
46834: PUSH
46835: LD_INT 3
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: NEG
46846: PUSH
46847: LD_INT 4
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 4
46857: NEG
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46872: LD_ADDR_VAR 0 29
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 4
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 4
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 3
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 5
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 5
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 4
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 6
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 6
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 5
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47027: LD_ADDR_VAR 0 30
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 3
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 4
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 4
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 5
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 5
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 5
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 6
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 6
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47170: LD_ADDR_VAR 0 31
47174: PUSH
47175: LD_INT 3
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 4
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 4
47217: PUSH
47218: LD_INT 4
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: LD_INT 4
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 5
47237: PUSH
47238: LD_INT 4
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 5
47247: PUSH
47248: LD_INT 5
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 4
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 6
47267: PUSH
47268: LD_INT 5
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 6
47277: PUSH
47278: LD_INT 6
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 5
47287: PUSH
47288: LD_INT 6
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47309: LD_ADDR_VAR 0 32
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 4
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 4
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 5
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 5
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 4
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 6
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 6
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 5
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47452: LD_ADDR_VAR 0 33
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: NEG
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 4
47504: NEG
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 4
47515: NEG
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 4
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 5
47538: NEG
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 5
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 5
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 6
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 6
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47607: LD_ADDR_VAR 0 34
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 3
47638: NEG
47639: PUSH
47640: LD_INT 3
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 3
47650: NEG
47651: PUSH
47652: LD_INT 4
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 4
47662: NEG
47663: PUSH
47664: LD_INT 3
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 4
47674: NEG
47675: PUSH
47676: LD_INT 4
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 4
47686: NEG
47687: PUSH
47688: LD_INT 5
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 5
47698: NEG
47699: PUSH
47700: LD_INT 4
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 5
47710: NEG
47711: PUSH
47712: LD_INT 5
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 5
47722: NEG
47723: PUSH
47724: LD_INT 6
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 6
47734: NEG
47735: PUSH
47736: LD_INT 5
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 6
47746: NEG
47747: PUSH
47748: LD_INT 6
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47770: LD_ADDR_VAR 0 41
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47814: LD_ADDR_VAR 0 42
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47855: LD_ADDR_VAR 0 43
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47895: LD_ADDR_VAR 0 44
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 3
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47936: LD_ADDR_VAR 0 45
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47980: LD_ADDR_VAR 0 46
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 3
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48026: LD_ADDR_VAR 0 47
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 3
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48059: LD_ADDR_VAR 0 48
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48090: LD_ADDR_VAR 0 49
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48119: LD_ADDR_VAR 0 50
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48148: LD_ADDR_VAR 0 51
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48179: LD_ADDR_VAR 0 52
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48212: LD_ADDR_VAR 0 53
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 3
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48256: LD_ADDR_VAR 0 54
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48297: LD_ADDR_VAR 0 55
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48337: LD_ADDR_VAR 0 56
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48378: LD_ADDR_VAR 0 57
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 3
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48422: LD_ADDR_VAR 0 58
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: LD_INT 3
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48468: LD_ADDR_VAR 0 59
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48512: LD_ADDR_VAR 0 60
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48553: LD_ADDR_VAR 0 61
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48593: LD_ADDR_VAR 0 62
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48634: LD_ADDR_VAR 0 63
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: LIST
48677: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48678: LD_ADDR_VAR 0 64
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: ST_TO_ADDR
// end ; 2 :
48724: GO 51990
48726: LD_INT 2
48728: DOUBLE
48729: EQUAL
48730: IFTRUE 48734
48732: GO 51989
48734: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48735: LD_ADDR_VAR 0 29
48739: PUSH
48740: LD_INT 4
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 4
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 5
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 5
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 4
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 5
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 4
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 4
48865: PUSH
48866: LD_INT 4
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: LD_INT 4
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 4
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: LD_INT 4
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 4
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 4
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 5
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 5
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 4
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 5
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 4
49074: NEG
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 4
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 4
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 4
49120: NEG
49121: PUSH
49122: LD_INT 4
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 4
49132: NEG
49133: PUSH
49134: LD_INT 5
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: LD_INT 4
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: LD_INT 3
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 4
49168: NEG
49169: PUSH
49170: LD_INT 3
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 5
49180: NEG
49181: PUSH
49182: LD_INT 4
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 5
49192: NEG
49193: PUSH
49194: LD_INT 5
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: LD_INT 5
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 5
49216: NEG
49217: PUSH
49218: LD_INT 3
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49273: LD_ADDR_VAR 0 30
49277: PUSH
49278: LD_INT 4
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 4
49290: PUSH
49291: LD_INT 3
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 5
49300: PUSH
49301: LD_INT 4
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 5
49310: PUSH
49311: LD_INT 5
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 4
49320: PUSH
49321: LD_INT 5
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 4
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 5
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 5
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 3
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 4
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 4
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 3
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 4
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 4
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 4
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 4
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 5
49519: NEG
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 5
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 5
49542: NEG
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 3
49577: NEG
49578: PUSH
49579: LD_INT 4
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 3
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 4
49625: NEG
49626: PUSH
49627: LD_INT 3
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 4
49637: NEG
49638: PUSH
49639: LD_INT 4
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 4
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 4
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 4
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 5
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 4
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 4
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 5
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 5
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49820: LD_ADDR_VAR 0 31
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 4
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 4
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 5
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 5
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 4
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: LD_INT 3
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: LD_INT 5
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 4
49976: NEG
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 4
49987: NEG
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 4
49999: NEG
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 4
50022: NEG
50023: PUSH
50024: LD_INT 4
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 4
50034: NEG
50035: PUSH
50036: LD_INT 5
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 3
50046: NEG
50047: PUSH
50048: LD_INT 4
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 4
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 5
50082: NEG
50083: PUSH
50084: LD_INT 4
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 5
50094: NEG
50095: PUSH
50096: LD_INT 5
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: LD_INT 5
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 5
50118: NEG
50119: PUSH
50120: LD_INT 3
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 4
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 3
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 4
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 2
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: LD_INT 4
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 5
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 5
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 4
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 5
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50370: LD_ADDR_VAR 0 32
50374: PUSH
50375: LD_INT 4
50377: NEG
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 4
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 4
50422: NEG
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 5
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 5
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 5
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: LD_INT 4
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: NEG
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 4
50539: NEG
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 4
50551: NEG
50552: PUSH
50553: LD_INT 4
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 4
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 4
50575: NEG
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 4
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 5
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 4
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 3
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 4
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 5
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 3
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: LD_INT 5
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 4
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 4
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 4
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 4
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: LD_INT 3
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 5
50802: PUSH
50803: LD_INT 4
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 5
50812: PUSH
50813: LD_INT 5
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: LD_INT 5
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 4
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 5
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: LD_INT 5
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50917: LD_ADDR_VAR 0 33
50921: PUSH
50922: LD_INT 4
50924: NEG
50925: PUSH
50926: LD_INT 4
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 4
50936: NEG
50937: PUSH
50938: LD_INT 5
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 4
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 4
50972: NEG
50973: PUSH
50974: LD_INT 3
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 5
50984: NEG
50985: PUSH
50986: LD_INT 4
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 5
50996: NEG
50997: PUSH
50998: LD_INT 5
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 5
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 5
51020: NEG
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 4
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 4
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 4
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 4
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 5
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 5
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 5
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 4
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 4
51257: PUSH
51258: LD_INT 4
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: LD_INT 4
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 4
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 4
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 3
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 4
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 5
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 4
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 5
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51455: LD_ADDR_VAR 0 34
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 4
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 5
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 4
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 3
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: LD_INT 3
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 4
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 5
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 3
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 5
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 4
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 4
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 4
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 5
51677: PUSH
51678: LD_INT 4
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 5
51687: PUSH
51688: LD_INT 5
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 4
51697: PUSH
51698: LD_INT 5
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 4
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 5
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 5
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 4
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: LD_INT 3
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 4
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 4
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 4
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 3
51863: NEG
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 4
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 5
51896: NEG
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 5
51907: NEG
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 5
51919: NEG
51920: PUSH
51921: LD_INT 2
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// end ; end ;
51987: GO 51990
51989: POP
// case btype of b_depot , b_warehouse :
51990: LD_VAR 0 1
51994: PUSH
51995: LD_INT 0
51997: DOUBLE
51998: EQUAL
51999: IFTRUE 52009
52001: LD_INT 1
52003: DOUBLE
52004: EQUAL
52005: IFTRUE 52009
52007: GO 52210
52009: POP
// case nation of nation_american :
52010: LD_VAR 0 5
52014: PUSH
52015: LD_INT 1
52017: DOUBLE
52018: EQUAL
52019: IFTRUE 52023
52021: GO 52079
52023: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52024: LD_ADDR_VAR 0 9
52028: PUSH
52029: LD_VAR 0 11
52033: PUSH
52034: LD_VAR 0 12
52038: PUSH
52039: LD_VAR 0 13
52043: PUSH
52044: LD_VAR 0 14
52048: PUSH
52049: LD_VAR 0 15
52053: PUSH
52054: LD_VAR 0 16
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: PUSH
52067: LD_VAR 0 4
52071: PUSH
52072: LD_INT 1
52074: PLUS
52075: ARRAY
52076: ST_TO_ADDR
52077: GO 52208
52079: LD_INT 2
52081: DOUBLE
52082: EQUAL
52083: IFTRUE 52087
52085: GO 52143
52087: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52088: LD_ADDR_VAR 0 9
52092: PUSH
52093: LD_VAR 0 17
52097: PUSH
52098: LD_VAR 0 18
52102: PUSH
52103: LD_VAR 0 19
52107: PUSH
52108: LD_VAR 0 20
52112: PUSH
52113: LD_VAR 0 21
52117: PUSH
52118: LD_VAR 0 22
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: PUSH
52131: LD_VAR 0 4
52135: PUSH
52136: LD_INT 1
52138: PLUS
52139: ARRAY
52140: ST_TO_ADDR
52141: GO 52208
52143: LD_INT 3
52145: DOUBLE
52146: EQUAL
52147: IFTRUE 52151
52149: GO 52207
52151: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52152: LD_ADDR_VAR 0 9
52156: PUSH
52157: LD_VAR 0 23
52161: PUSH
52162: LD_VAR 0 24
52166: PUSH
52167: LD_VAR 0 25
52171: PUSH
52172: LD_VAR 0 26
52176: PUSH
52177: LD_VAR 0 27
52181: PUSH
52182: LD_VAR 0 28
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: PUSH
52195: LD_VAR 0 4
52199: PUSH
52200: LD_INT 1
52202: PLUS
52203: ARRAY
52204: ST_TO_ADDR
52205: GO 52208
52207: POP
52208: GO 52763
52210: LD_INT 2
52212: DOUBLE
52213: EQUAL
52214: IFTRUE 52224
52216: LD_INT 3
52218: DOUBLE
52219: EQUAL
52220: IFTRUE 52224
52222: GO 52280
52224: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52225: LD_ADDR_VAR 0 9
52229: PUSH
52230: LD_VAR 0 29
52234: PUSH
52235: LD_VAR 0 30
52239: PUSH
52240: LD_VAR 0 31
52244: PUSH
52245: LD_VAR 0 32
52249: PUSH
52250: LD_VAR 0 33
52254: PUSH
52255: LD_VAR 0 34
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: PUSH
52268: LD_VAR 0 4
52272: PUSH
52273: LD_INT 1
52275: PLUS
52276: ARRAY
52277: ST_TO_ADDR
52278: GO 52763
52280: LD_INT 16
52282: DOUBLE
52283: EQUAL
52284: IFTRUE 52342
52286: LD_INT 17
52288: DOUBLE
52289: EQUAL
52290: IFTRUE 52342
52292: LD_INT 18
52294: DOUBLE
52295: EQUAL
52296: IFTRUE 52342
52298: LD_INT 19
52300: DOUBLE
52301: EQUAL
52302: IFTRUE 52342
52304: LD_INT 22
52306: DOUBLE
52307: EQUAL
52308: IFTRUE 52342
52310: LD_INT 20
52312: DOUBLE
52313: EQUAL
52314: IFTRUE 52342
52316: LD_INT 21
52318: DOUBLE
52319: EQUAL
52320: IFTRUE 52342
52322: LD_INT 23
52324: DOUBLE
52325: EQUAL
52326: IFTRUE 52342
52328: LD_INT 24
52330: DOUBLE
52331: EQUAL
52332: IFTRUE 52342
52334: LD_INT 25
52336: DOUBLE
52337: EQUAL
52338: IFTRUE 52342
52340: GO 52398
52342: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52343: LD_ADDR_VAR 0 9
52347: PUSH
52348: LD_VAR 0 35
52352: PUSH
52353: LD_VAR 0 36
52357: PUSH
52358: LD_VAR 0 37
52362: PUSH
52363: LD_VAR 0 38
52367: PUSH
52368: LD_VAR 0 39
52372: PUSH
52373: LD_VAR 0 40
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: PUSH
52386: LD_VAR 0 4
52390: PUSH
52391: LD_INT 1
52393: PLUS
52394: ARRAY
52395: ST_TO_ADDR
52396: GO 52763
52398: LD_INT 6
52400: DOUBLE
52401: EQUAL
52402: IFTRUE 52454
52404: LD_INT 7
52406: DOUBLE
52407: EQUAL
52408: IFTRUE 52454
52410: LD_INT 8
52412: DOUBLE
52413: EQUAL
52414: IFTRUE 52454
52416: LD_INT 13
52418: DOUBLE
52419: EQUAL
52420: IFTRUE 52454
52422: LD_INT 12
52424: DOUBLE
52425: EQUAL
52426: IFTRUE 52454
52428: LD_INT 15
52430: DOUBLE
52431: EQUAL
52432: IFTRUE 52454
52434: LD_INT 11
52436: DOUBLE
52437: EQUAL
52438: IFTRUE 52454
52440: LD_INT 14
52442: DOUBLE
52443: EQUAL
52444: IFTRUE 52454
52446: LD_INT 10
52448: DOUBLE
52449: EQUAL
52450: IFTRUE 52454
52452: GO 52510
52454: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52455: LD_ADDR_VAR 0 9
52459: PUSH
52460: LD_VAR 0 41
52464: PUSH
52465: LD_VAR 0 42
52469: PUSH
52470: LD_VAR 0 43
52474: PUSH
52475: LD_VAR 0 44
52479: PUSH
52480: LD_VAR 0 45
52484: PUSH
52485: LD_VAR 0 46
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: PUSH
52498: LD_VAR 0 4
52502: PUSH
52503: LD_INT 1
52505: PLUS
52506: ARRAY
52507: ST_TO_ADDR
52508: GO 52763
52510: LD_INT 36
52512: DOUBLE
52513: EQUAL
52514: IFTRUE 52518
52516: GO 52574
52518: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52519: LD_ADDR_VAR 0 9
52523: PUSH
52524: LD_VAR 0 47
52528: PUSH
52529: LD_VAR 0 48
52533: PUSH
52534: LD_VAR 0 49
52538: PUSH
52539: LD_VAR 0 50
52543: PUSH
52544: LD_VAR 0 51
52548: PUSH
52549: LD_VAR 0 52
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: PUSH
52562: LD_VAR 0 4
52566: PUSH
52567: LD_INT 1
52569: PLUS
52570: ARRAY
52571: ST_TO_ADDR
52572: GO 52763
52574: LD_INT 4
52576: DOUBLE
52577: EQUAL
52578: IFTRUE 52600
52580: LD_INT 5
52582: DOUBLE
52583: EQUAL
52584: IFTRUE 52600
52586: LD_INT 34
52588: DOUBLE
52589: EQUAL
52590: IFTRUE 52600
52592: LD_INT 37
52594: DOUBLE
52595: EQUAL
52596: IFTRUE 52600
52598: GO 52656
52600: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52601: LD_ADDR_VAR 0 9
52605: PUSH
52606: LD_VAR 0 53
52610: PUSH
52611: LD_VAR 0 54
52615: PUSH
52616: LD_VAR 0 55
52620: PUSH
52621: LD_VAR 0 56
52625: PUSH
52626: LD_VAR 0 57
52630: PUSH
52631: LD_VAR 0 58
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: PUSH
52644: LD_VAR 0 4
52648: PUSH
52649: LD_INT 1
52651: PLUS
52652: ARRAY
52653: ST_TO_ADDR
52654: GO 52763
52656: LD_INT 31
52658: DOUBLE
52659: EQUAL
52660: IFTRUE 52706
52662: LD_INT 32
52664: DOUBLE
52665: EQUAL
52666: IFTRUE 52706
52668: LD_INT 33
52670: DOUBLE
52671: EQUAL
52672: IFTRUE 52706
52674: LD_INT 27
52676: DOUBLE
52677: EQUAL
52678: IFTRUE 52706
52680: LD_INT 26
52682: DOUBLE
52683: EQUAL
52684: IFTRUE 52706
52686: LD_INT 28
52688: DOUBLE
52689: EQUAL
52690: IFTRUE 52706
52692: LD_INT 29
52694: DOUBLE
52695: EQUAL
52696: IFTRUE 52706
52698: LD_INT 30
52700: DOUBLE
52701: EQUAL
52702: IFTRUE 52706
52704: GO 52762
52706: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52707: LD_ADDR_VAR 0 9
52711: PUSH
52712: LD_VAR 0 59
52716: PUSH
52717: LD_VAR 0 60
52721: PUSH
52722: LD_VAR 0 61
52726: PUSH
52727: LD_VAR 0 62
52731: PUSH
52732: LD_VAR 0 63
52736: PUSH
52737: LD_VAR 0 64
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: PUSH
52750: LD_VAR 0 4
52754: PUSH
52755: LD_INT 1
52757: PLUS
52758: ARRAY
52759: ST_TO_ADDR
52760: GO 52763
52762: POP
// temp_list2 = [ ] ;
52763: LD_ADDR_VAR 0 10
52767: PUSH
52768: EMPTY
52769: ST_TO_ADDR
// for i in temp_list do
52770: LD_ADDR_VAR 0 8
52774: PUSH
52775: LD_VAR 0 9
52779: PUSH
52780: FOR_IN
52781: IFFALSE 52833
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52783: LD_ADDR_VAR 0 10
52787: PUSH
52788: LD_VAR 0 10
52792: PUSH
52793: LD_VAR 0 8
52797: PUSH
52798: LD_INT 1
52800: ARRAY
52801: PUSH
52802: LD_VAR 0 2
52806: PLUS
52807: PUSH
52808: LD_VAR 0 8
52812: PUSH
52813: LD_INT 2
52815: ARRAY
52816: PUSH
52817: LD_VAR 0 3
52821: PLUS
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: EMPTY
52828: LIST
52829: ADD
52830: ST_TO_ADDR
52831: GO 52780
52833: POP
52834: POP
// result = temp_list2 ;
52835: LD_ADDR_VAR 0 7
52839: PUSH
52840: LD_VAR 0 10
52844: ST_TO_ADDR
// end ;
52845: LD_VAR 0 7
52849: RET
// export function EnemyInRange ( unit , dist ) ; begin
52850: LD_INT 0
52852: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52853: LD_ADDR_VAR 0 3
52857: PUSH
52858: LD_VAR 0 1
52862: PPUSH
52863: CALL_OW 255
52867: PPUSH
52868: LD_VAR 0 1
52872: PPUSH
52873: CALL_OW 250
52877: PPUSH
52878: LD_VAR 0 1
52882: PPUSH
52883: CALL_OW 251
52887: PPUSH
52888: LD_VAR 0 2
52892: PPUSH
52893: CALL 26252 0 4
52897: PUSH
52898: LD_INT 4
52900: ARRAY
52901: ST_TO_ADDR
// end ;
52902: LD_VAR 0 3
52906: RET
// export function PlayerSeeMe ( unit ) ; begin
52907: LD_INT 0
52909: PPUSH
// result := See ( your_side , unit ) ;
52910: LD_ADDR_VAR 0 2
52914: PUSH
52915: LD_OWVAR 2
52919: PPUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: CALL_OW 292
52929: ST_TO_ADDR
// end ;
52930: LD_VAR 0 2
52934: RET
// export function ReverseDir ( unit ) ; begin
52935: LD_INT 0
52937: PPUSH
// if not unit then
52938: LD_VAR 0 1
52942: NOT
52943: IFFALSE 52947
// exit ;
52945: GO 52970
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52947: LD_ADDR_VAR 0 2
52951: PUSH
52952: LD_VAR 0 1
52956: PPUSH
52957: CALL_OW 254
52961: PUSH
52962: LD_INT 3
52964: PLUS
52965: PUSH
52966: LD_INT 6
52968: MOD
52969: ST_TO_ADDR
// end ;
52970: LD_VAR 0 2
52974: RET
// export function ReverseArray ( array ) ; var i ; begin
52975: LD_INT 0
52977: PPUSH
52978: PPUSH
// if not array then
52979: LD_VAR 0 1
52983: NOT
52984: IFFALSE 52988
// exit ;
52986: GO 53043
// result := [ ] ;
52988: LD_ADDR_VAR 0 2
52992: PUSH
52993: EMPTY
52994: ST_TO_ADDR
// for i := array downto 1 do
52995: LD_ADDR_VAR 0 3
52999: PUSH
53000: DOUBLE
53001: LD_VAR 0 1
53005: INC
53006: ST_TO_ADDR
53007: LD_INT 1
53009: PUSH
53010: FOR_DOWNTO
53011: IFFALSE 53041
// result := Join ( result , array [ i ] ) ;
53013: LD_ADDR_VAR 0 2
53017: PUSH
53018: LD_VAR 0 2
53022: PPUSH
53023: LD_VAR 0 1
53027: PUSH
53028: LD_VAR 0 3
53032: ARRAY
53033: PPUSH
53034: CALL 57687 0 2
53038: ST_TO_ADDR
53039: GO 53010
53041: POP
53042: POP
// end ;
53043: LD_VAR 0 2
53047: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53048: LD_INT 0
53050: PPUSH
53051: PPUSH
53052: PPUSH
53053: PPUSH
53054: PPUSH
53055: PPUSH
// if not unit or not hexes then
53056: LD_VAR 0 1
53060: NOT
53061: PUSH
53062: LD_VAR 0 2
53066: NOT
53067: OR
53068: IFFALSE 53072
// exit ;
53070: GO 53195
// dist := 9999 ;
53072: LD_ADDR_VAR 0 5
53076: PUSH
53077: LD_INT 9999
53079: ST_TO_ADDR
// for i = 1 to hexes do
53080: LD_ADDR_VAR 0 4
53084: PUSH
53085: DOUBLE
53086: LD_INT 1
53088: DEC
53089: ST_TO_ADDR
53090: LD_VAR 0 2
53094: PUSH
53095: FOR_TO
53096: IFFALSE 53183
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53098: LD_ADDR_VAR 0 6
53102: PUSH
53103: LD_VAR 0 1
53107: PPUSH
53108: LD_VAR 0 2
53112: PUSH
53113: LD_VAR 0 4
53117: ARRAY
53118: PUSH
53119: LD_INT 1
53121: ARRAY
53122: PPUSH
53123: LD_VAR 0 2
53127: PUSH
53128: LD_VAR 0 4
53132: ARRAY
53133: PUSH
53134: LD_INT 2
53136: ARRAY
53137: PPUSH
53138: CALL_OW 297
53142: ST_TO_ADDR
// if tdist < dist then
53143: LD_VAR 0 6
53147: PUSH
53148: LD_VAR 0 5
53152: LESS
53153: IFFALSE 53181
// begin hex := hexes [ i ] ;
53155: LD_ADDR_VAR 0 8
53159: PUSH
53160: LD_VAR 0 2
53164: PUSH
53165: LD_VAR 0 4
53169: ARRAY
53170: ST_TO_ADDR
// dist := tdist ;
53171: LD_ADDR_VAR 0 5
53175: PUSH
53176: LD_VAR 0 6
53180: ST_TO_ADDR
// end ; end ;
53181: GO 53095
53183: POP
53184: POP
// result := hex ;
53185: LD_ADDR_VAR 0 3
53189: PUSH
53190: LD_VAR 0 8
53194: ST_TO_ADDR
// end ;
53195: LD_VAR 0 3
53199: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53200: LD_INT 0
53202: PPUSH
53203: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53204: LD_VAR 0 1
53208: NOT
53209: PUSH
53210: LD_VAR 0 1
53214: PUSH
53215: LD_INT 21
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 23
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PPUSH
53239: CALL_OW 69
53243: IN
53244: NOT
53245: OR
53246: IFFALSE 53250
// exit ;
53248: GO 53297
// for i = 1 to 3 do
53250: LD_ADDR_VAR 0 3
53254: PUSH
53255: DOUBLE
53256: LD_INT 1
53258: DEC
53259: ST_TO_ADDR
53260: LD_INT 3
53262: PUSH
53263: FOR_TO
53264: IFFALSE 53295
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53266: LD_VAR 0 1
53270: PPUSH
53271: CALL_OW 250
53275: PPUSH
53276: LD_VAR 0 1
53280: PPUSH
53281: CALL_OW 251
53285: PPUSH
53286: LD_INT 1
53288: PPUSH
53289: CALL_OW 453
53293: GO 53263
53295: POP
53296: POP
// end ;
53297: LD_VAR 0 2
53301: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53302: LD_INT 0
53304: PPUSH
53305: PPUSH
53306: PPUSH
53307: PPUSH
53308: PPUSH
53309: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53310: LD_VAR 0 1
53314: NOT
53315: PUSH
53316: LD_VAR 0 2
53320: NOT
53321: OR
53322: PUSH
53323: LD_VAR 0 1
53327: PPUSH
53328: CALL_OW 314
53332: OR
53333: IFFALSE 53337
// exit ;
53335: GO 53804
// if GetLives ( i ) < 250 then
53337: LD_VAR 0 4
53341: PPUSH
53342: CALL_OW 256
53346: PUSH
53347: LD_INT 250
53349: LESS
53350: IFFALSE 53363
// begin ComAutodestruct ( i ) ;
53352: LD_VAR 0 4
53356: PPUSH
53357: CALL 53200 0 1
// exit ;
53361: GO 53804
// end ; x := GetX ( enemy_unit ) ;
53363: LD_ADDR_VAR 0 7
53367: PUSH
53368: LD_VAR 0 2
53372: PPUSH
53373: CALL_OW 250
53377: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53378: LD_ADDR_VAR 0 8
53382: PUSH
53383: LD_VAR 0 2
53387: PPUSH
53388: CALL_OW 251
53392: ST_TO_ADDR
// if not x or not y then
53393: LD_VAR 0 7
53397: NOT
53398: PUSH
53399: LD_VAR 0 8
53403: NOT
53404: OR
53405: IFFALSE 53409
// exit ;
53407: GO 53804
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53409: LD_ADDR_VAR 0 6
53413: PUSH
53414: LD_VAR 0 7
53418: PPUSH
53419: LD_INT 0
53421: PPUSH
53422: LD_INT 4
53424: PPUSH
53425: CALL_OW 272
53429: PUSH
53430: LD_VAR 0 8
53434: PPUSH
53435: LD_INT 0
53437: PPUSH
53438: LD_INT 4
53440: PPUSH
53441: CALL_OW 273
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_VAR 0 7
53454: PPUSH
53455: LD_INT 1
53457: PPUSH
53458: LD_INT 4
53460: PPUSH
53461: CALL_OW 272
53465: PUSH
53466: LD_VAR 0 8
53470: PPUSH
53471: LD_INT 1
53473: PPUSH
53474: LD_INT 4
53476: PPUSH
53477: CALL_OW 273
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_VAR 0 7
53490: PPUSH
53491: LD_INT 2
53493: PPUSH
53494: LD_INT 4
53496: PPUSH
53497: CALL_OW 272
53501: PUSH
53502: LD_VAR 0 8
53506: PPUSH
53507: LD_INT 2
53509: PPUSH
53510: LD_INT 4
53512: PPUSH
53513: CALL_OW 273
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_VAR 0 7
53526: PPUSH
53527: LD_INT 3
53529: PPUSH
53530: LD_INT 4
53532: PPUSH
53533: CALL_OW 272
53537: PUSH
53538: LD_VAR 0 8
53542: PPUSH
53543: LD_INT 3
53545: PPUSH
53546: LD_INT 4
53548: PPUSH
53549: CALL_OW 273
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_VAR 0 7
53562: PPUSH
53563: LD_INT 4
53565: PPUSH
53566: LD_INT 4
53568: PPUSH
53569: CALL_OW 272
53573: PUSH
53574: LD_VAR 0 8
53578: PPUSH
53579: LD_INT 4
53581: PPUSH
53582: LD_INT 4
53584: PPUSH
53585: CALL_OW 273
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_VAR 0 7
53598: PPUSH
53599: LD_INT 5
53601: PPUSH
53602: LD_INT 4
53604: PPUSH
53605: CALL_OW 272
53609: PUSH
53610: LD_VAR 0 8
53614: PPUSH
53615: LD_INT 5
53617: PPUSH
53618: LD_INT 4
53620: PPUSH
53621: CALL_OW 273
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// for i = tmp downto 1 do
53638: LD_ADDR_VAR 0 4
53642: PUSH
53643: DOUBLE
53644: LD_VAR 0 6
53648: INC
53649: ST_TO_ADDR
53650: LD_INT 1
53652: PUSH
53653: FOR_DOWNTO
53654: IFFALSE 53755
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53656: LD_VAR 0 6
53660: PUSH
53661: LD_VAR 0 4
53665: ARRAY
53666: PUSH
53667: LD_INT 1
53669: ARRAY
53670: PPUSH
53671: LD_VAR 0 6
53675: PUSH
53676: LD_VAR 0 4
53680: ARRAY
53681: PUSH
53682: LD_INT 2
53684: ARRAY
53685: PPUSH
53686: CALL_OW 488
53690: NOT
53691: PUSH
53692: LD_VAR 0 6
53696: PUSH
53697: LD_VAR 0 4
53701: ARRAY
53702: PUSH
53703: LD_INT 1
53705: ARRAY
53706: PPUSH
53707: LD_VAR 0 6
53711: PUSH
53712: LD_VAR 0 4
53716: ARRAY
53717: PUSH
53718: LD_INT 2
53720: ARRAY
53721: PPUSH
53722: CALL_OW 428
53726: PUSH
53727: LD_INT 0
53729: NONEQUAL
53730: OR
53731: IFFALSE 53753
// tmp := Delete ( tmp , i ) ;
53733: LD_ADDR_VAR 0 6
53737: PUSH
53738: LD_VAR 0 6
53742: PPUSH
53743: LD_VAR 0 4
53747: PPUSH
53748: CALL_OW 3
53752: ST_TO_ADDR
53753: GO 53653
53755: POP
53756: POP
// j := GetClosestHex ( unit , tmp ) ;
53757: LD_ADDR_VAR 0 5
53761: PUSH
53762: LD_VAR 0 1
53766: PPUSH
53767: LD_VAR 0 6
53771: PPUSH
53772: CALL 53048 0 2
53776: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53777: LD_VAR 0 1
53781: PPUSH
53782: LD_VAR 0 5
53786: PUSH
53787: LD_INT 1
53789: ARRAY
53790: PPUSH
53791: LD_VAR 0 5
53795: PUSH
53796: LD_INT 2
53798: ARRAY
53799: PPUSH
53800: CALL_OW 111
// end ;
53804: LD_VAR 0 3
53808: RET
// export function PrepareApemanSoldier ( ) ; begin
53809: LD_INT 0
53811: PPUSH
// uc_nation := 0 ;
53812: LD_ADDR_OWVAR 21
53816: PUSH
53817: LD_INT 0
53819: ST_TO_ADDR
// hc_sex := sex_male ;
53820: LD_ADDR_OWVAR 27
53824: PUSH
53825: LD_INT 1
53827: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53828: LD_ADDR_OWVAR 28
53832: PUSH
53833: LD_INT 15
53835: ST_TO_ADDR
// hc_gallery :=  ;
53836: LD_ADDR_OWVAR 33
53840: PUSH
53841: LD_STRING 
53843: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53844: LD_ADDR_OWVAR 31
53848: PUSH
53849: LD_INT 0
53851: PPUSH
53852: LD_INT 3
53854: PPUSH
53855: CALL_OW 12
53859: PUSH
53860: LD_INT 0
53862: PPUSH
53863: LD_INT 3
53865: PPUSH
53866: CALL_OW 12
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: ST_TO_ADDR
// end ;
53883: LD_VAR 0 1
53887: RET
// export function PrepareApemanEngineer ( ) ; begin
53888: LD_INT 0
53890: PPUSH
// uc_nation := 0 ;
53891: LD_ADDR_OWVAR 21
53895: PUSH
53896: LD_INT 0
53898: ST_TO_ADDR
// hc_sex := sex_male ;
53899: LD_ADDR_OWVAR 27
53903: PUSH
53904: LD_INT 1
53906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53907: LD_ADDR_OWVAR 28
53911: PUSH
53912: LD_INT 16
53914: ST_TO_ADDR
// hc_gallery :=  ;
53915: LD_ADDR_OWVAR 33
53919: PUSH
53920: LD_STRING 
53922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53923: LD_ADDR_OWVAR 31
53927: PUSH
53928: LD_INT 0
53930: PPUSH
53931: LD_INT 3
53933: PPUSH
53934: CALL_OW 12
53938: PUSH
53939: LD_INT 0
53941: PPUSH
53942: LD_INT 3
53944: PPUSH
53945: CALL_OW 12
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: ST_TO_ADDR
// end ;
53962: LD_VAR 0 1
53966: RET
// export function PrepareApeman ( agressivity ) ; begin
53967: LD_INT 0
53969: PPUSH
// uc_side := 0 ;
53970: LD_ADDR_OWVAR 20
53974: PUSH
53975: LD_INT 0
53977: ST_TO_ADDR
// uc_nation := 0 ;
53978: LD_ADDR_OWVAR 21
53982: PUSH
53983: LD_INT 0
53985: ST_TO_ADDR
// hc_sex := sex_male ;
53986: LD_ADDR_OWVAR 27
53990: PUSH
53991: LD_INT 1
53993: ST_TO_ADDR
// hc_class := class_apeman ;
53994: LD_ADDR_OWVAR 28
53998: PUSH
53999: LD_INT 12
54001: ST_TO_ADDR
// hc_gallery :=  ;
54002: LD_ADDR_OWVAR 33
54006: PUSH
54007: LD_STRING 
54009: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54010: LD_ADDR_OWVAR 35
54014: PUSH
54015: LD_VAR 0 1
54019: NEG
54020: PPUSH
54021: LD_VAR 0 1
54025: PPUSH
54026: CALL_OW 12
54030: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54031: LD_ADDR_OWVAR 31
54035: PUSH
54036: LD_INT 0
54038: PPUSH
54039: LD_INT 3
54041: PPUSH
54042: CALL_OW 12
54046: PUSH
54047: LD_INT 0
54049: PPUSH
54050: LD_INT 3
54052: PPUSH
54053: CALL_OW 12
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// end ;
54070: LD_VAR 0 2
54074: RET
// export function PrepareTiger ( agressivity ) ; begin
54075: LD_INT 0
54077: PPUSH
// uc_side := 0 ;
54078: LD_ADDR_OWVAR 20
54082: PUSH
54083: LD_INT 0
54085: ST_TO_ADDR
// uc_nation := 0 ;
54086: LD_ADDR_OWVAR 21
54090: PUSH
54091: LD_INT 0
54093: ST_TO_ADDR
// hc_class := class_tiger ;
54094: LD_ADDR_OWVAR 28
54098: PUSH
54099: LD_INT 14
54101: ST_TO_ADDR
// hc_gallery :=  ;
54102: LD_ADDR_OWVAR 33
54106: PUSH
54107: LD_STRING 
54109: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54110: LD_ADDR_OWVAR 35
54114: PUSH
54115: LD_VAR 0 1
54119: NEG
54120: PPUSH
54121: LD_VAR 0 1
54125: PPUSH
54126: CALL_OW 12
54130: ST_TO_ADDR
// end ;
54131: LD_VAR 0 2
54135: RET
// export function PrepareEnchidna ( ) ; begin
54136: LD_INT 0
54138: PPUSH
// uc_side := 0 ;
54139: LD_ADDR_OWVAR 20
54143: PUSH
54144: LD_INT 0
54146: ST_TO_ADDR
// uc_nation := 0 ;
54147: LD_ADDR_OWVAR 21
54151: PUSH
54152: LD_INT 0
54154: ST_TO_ADDR
// hc_class := class_baggie ;
54155: LD_ADDR_OWVAR 28
54159: PUSH
54160: LD_INT 13
54162: ST_TO_ADDR
// hc_gallery :=  ;
54163: LD_ADDR_OWVAR 33
54167: PUSH
54168: LD_STRING 
54170: ST_TO_ADDR
// end ;
54171: LD_VAR 0 1
54175: RET
// export function PrepareFrog ( ) ; begin
54176: LD_INT 0
54178: PPUSH
// uc_side := 0 ;
54179: LD_ADDR_OWVAR 20
54183: PUSH
54184: LD_INT 0
54186: ST_TO_ADDR
// uc_nation := 0 ;
54187: LD_ADDR_OWVAR 21
54191: PUSH
54192: LD_INT 0
54194: ST_TO_ADDR
// hc_class := class_frog ;
54195: LD_ADDR_OWVAR 28
54199: PUSH
54200: LD_INT 19
54202: ST_TO_ADDR
// hc_gallery :=  ;
54203: LD_ADDR_OWVAR 33
54207: PUSH
54208: LD_STRING 
54210: ST_TO_ADDR
// end ;
54211: LD_VAR 0 1
54215: RET
// export function PrepareFish ( ) ; begin
54216: LD_INT 0
54218: PPUSH
// uc_side := 0 ;
54219: LD_ADDR_OWVAR 20
54223: PUSH
54224: LD_INT 0
54226: ST_TO_ADDR
// uc_nation := 0 ;
54227: LD_ADDR_OWVAR 21
54231: PUSH
54232: LD_INT 0
54234: ST_TO_ADDR
// hc_class := class_fish ;
54235: LD_ADDR_OWVAR 28
54239: PUSH
54240: LD_INT 20
54242: ST_TO_ADDR
// hc_gallery :=  ;
54243: LD_ADDR_OWVAR 33
54247: PUSH
54248: LD_STRING 
54250: ST_TO_ADDR
// end ;
54251: LD_VAR 0 1
54255: RET
// export function PrepareBird ( ) ; begin
54256: LD_INT 0
54258: PPUSH
// uc_side := 0 ;
54259: LD_ADDR_OWVAR 20
54263: PUSH
54264: LD_INT 0
54266: ST_TO_ADDR
// uc_nation := 0 ;
54267: LD_ADDR_OWVAR 21
54271: PUSH
54272: LD_INT 0
54274: ST_TO_ADDR
// hc_class := class_phororhacos ;
54275: LD_ADDR_OWVAR 28
54279: PUSH
54280: LD_INT 18
54282: ST_TO_ADDR
// hc_gallery :=  ;
54283: LD_ADDR_OWVAR 33
54287: PUSH
54288: LD_STRING 
54290: ST_TO_ADDR
// end ;
54291: LD_VAR 0 1
54295: RET
// export function PrepareHorse ( ) ; begin
54296: LD_INT 0
54298: PPUSH
// uc_side := 0 ;
54299: LD_ADDR_OWVAR 20
54303: PUSH
54304: LD_INT 0
54306: ST_TO_ADDR
// uc_nation := 0 ;
54307: LD_ADDR_OWVAR 21
54311: PUSH
54312: LD_INT 0
54314: ST_TO_ADDR
// hc_class := class_horse ;
54315: LD_ADDR_OWVAR 28
54319: PUSH
54320: LD_INT 21
54322: ST_TO_ADDR
// hc_gallery :=  ;
54323: LD_ADDR_OWVAR 33
54327: PUSH
54328: LD_STRING 
54330: ST_TO_ADDR
// end ;
54331: LD_VAR 0 1
54335: RET
// export function PrepareMastodont ( ) ; begin
54336: LD_INT 0
54338: PPUSH
// uc_side := 0 ;
54339: LD_ADDR_OWVAR 20
54343: PUSH
54344: LD_INT 0
54346: ST_TO_ADDR
// uc_nation := 0 ;
54347: LD_ADDR_OWVAR 21
54351: PUSH
54352: LD_INT 0
54354: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54355: LD_ADDR_OWVAR 37
54359: PUSH
54360: LD_INT 31
54362: ST_TO_ADDR
// vc_control := control_rider ;
54363: LD_ADDR_OWVAR 38
54367: PUSH
54368: LD_INT 4
54370: ST_TO_ADDR
// end ;
54371: LD_VAR 0 1
54375: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54376: LD_INT 0
54378: PPUSH
54379: PPUSH
54380: PPUSH
// uc_side = 0 ;
54381: LD_ADDR_OWVAR 20
54385: PUSH
54386: LD_INT 0
54388: ST_TO_ADDR
// uc_nation = 0 ;
54389: LD_ADDR_OWVAR 21
54393: PUSH
54394: LD_INT 0
54396: ST_TO_ADDR
// InitHc_All ( ) ;
54397: CALL_OW 584
// InitVc ;
54401: CALL_OW 20
// if mastodonts then
54405: LD_VAR 0 6
54409: IFFALSE 54476
// for i = 1 to mastodonts do
54411: LD_ADDR_VAR 0 11
54415: PUSH
54416: DOUBLE
54417: LD_INT 1
54419: DEC
54420: ST_TO_ADDR
54421: LD_VAR 0 6
54425: PUSH
54426: FOR_TO
54427: IFFALSE 54474
// begin vc_chassis := 31 ;
54429: LD_ADDR_OWVAR 37
54433: PUSH
54434: LD_INT 31
54436: ST_TO_ADDR
// vc_control := control_rider ;
54437: LD_ADDR_OWVAR 38
54441: PUSH
54442: LD_INT 4
54444: ST_TO_ADDR
// animal := CreateVehicle ;
54445: LD_ADDR_VAR 0 12
54449: PUSH
54450: CALL_OW 45
54454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54455: LD_VAR 0 12
54459: PPUSH
54460: LD_VAR 0 8
54464: PPUSH
54465: LD_INT 0
54467: PPUSH
54468: CALL 56604 0 3
// end ;
54472: GO 54426
54474: POP
54475: POP
// if horses then
54476: LD_VAR 0 5
54480: IFFALSE 54547
// for i = 1 to horses do
54482: LD_ADDR_VAR 0 11
54486: PUSH
54487: DOUBLE
54488: LD_INT 1
54490: DEC
54491: ST_TO_ADDR
54492: LD_VAR 0 5
54496: PUSH
54497: FOR_TO
54498: IFFALSE 54545
// begin hc_class := 21 ;
54500: LD_ADDR_OWVAR 28
54504: PUSH
54505: LD_INT 21
54507: ST_TO_ADDR
// hc_gallery :=  ;
54508: LD_ADDR_OWVAR 33
54512: PUSH
54513: LD_STRING 
54515: ST_TO_ADDR
// animal := CreateHuman ;
54516: LD_ADDR_VAR 0 12
54520: PUSH
54521: CALL_OW 44
54525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54526: LD_VAR 0 12
54530: PPUSH
54531: LD_VAR 0 8
54535: PPUSH
54536: LD_INT 0
54538: PPUSH
54539: CALL 56604 0 3
// end ;
54543: GO 54497
54545: POP
54546: POP
// if birds then
54547: LD_VAR 0 1
54551: IFFALSE 54618
// for i = 1 to birds do
54553: LD_ADDR_VAR 0 11
54557: PUSH
54558: DOUBLE
54559: LD_INT 1
54561: DEC
54562: ST_TO_ADDR
54563: LD_VAR 0 1
54567: PUSH
54568: FOR_TO
54569: IFFALSE 54616
// begin hc_class = 18 ;
54571: LD_ADDR_OWVAR 28
54575: PUSH
54576: LD_INT 18
54578: ST_TO_ADDR
// hc_gallery =  ;
54579: LD_ADDR_OWVAR 33
54583: PUSH
54584: LD_STRING 
54586: ST_TO_ADDR
// animal := CreateHuman ;
54587: LD_ADDR_VAR 0 12
54591: PUSH
54592: CALL_OW 44
54596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54597: LD_VAR 0 12
54601: PPUSH
54602: LD_VAR 0 8
54606: PPUSH
54607: LD_INT 0
54609: PPUSH
54610: CALL 56604 0 3
// end ;
54614: GO 54568
54616: POP
54617: POP
// if tigers then
54618: LD_VAR 0 2
54622: IFFALSE 54706
// for i = 1 to tigers do
54624: LD_ADDR_VAR 0 11
54628: PUSH
54629: DOUBLE
54630: LD_INT 1
54632: DEC
54633: ST_TO_ADDR
54634: LD_VAR 0 2
54638: PUSH
54639: FOR_TO
54640: IFFALSE 54704
// begin hc_class = class_tiger ;
54642: LD_ADDR_OWVAR 28
54646: PUSH
54647: LD_INT 14
54649: ST_TO_ADDR
// hc_gallery =  ;
54650: LD_ADDR_OWVAR 33
54654: PUSH
54655: LD_STRING 
54657: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54658: LD_ADDR_OWVAR 35
54662: PUSH
54663: LD_INT 7
54665: NEG
54666: PPUSH
54667: LD_INT 7
54669: PPUSH
54670: CALL_OW 12
54674: ST_TO_ADDR
// animal := CreateHuman ;
54675: LD_ADDR_VAR 0 12
54679: PUSH
54680: CALL_OW 44
54684: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54685: LD_VAR 0 12
54689: PPUSH
54690: LD_VAR 0 8
54694: PPUSH
54695: LD_INT 0
54697: PPUSH
54698: CALL 56604 0 3
// end ;
54702: GO 54639
54704: POP
54705: POP
// if apemans then
54706: LD_VAR 0 3
54710: IFFALSE 54833
// for i = 1 to apemans do
54712: LD_ADDR_VAR 0 11
54716: PUSH
54717: DOUBLE
54718: LD_INT 1
54720: DEC
54721: ST_TO_ADDR
54722: LD_VAR 0 3
54726: PUSH
54727: FOR_TO
54728: IFFALSE 54831
// begin hc_class = class_apeman ;
54730: LD_ADDR_OWVAR 28
54734: PUSH
54735: LD_INT 12
54737: ST_TO_ADDR
// hc_gallery =  ;
54738: LD_ADDR_OWVAR 33
54742: PUSH
54743: LD_STRING 
54745: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54746: LD_ADDR_OWVAR 35
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PPUSH
54755: LD_INT 2
54757: PPUSH
54758: CALL_OW 12
54762: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54763: LD_ADDR_OWVAR 31
54767: PUSH
54768: LD_INT 1
54770: PPUSH
54771: LD_INT 3
54773: PPUSH
54774: CALL_OW 12
54778: PUSH
54779: LD_INT 1
54781: PPUSH
54782: LD_INT 3
54784: PPUSH
54785: CALL_OW 12
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// animal := CreateHuman ;
54802: LD_ADDR_VAR 0 12
54806: PUSH
54807: CALL_OW 44
54811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54812: LD_VAR 0 12
54816: PPUSH
54817: LD_VAR 0 8
54821: PPUSH
54822: LD_INT 0
54824: PPUSH
54825: CALL 56604 0 3
// end ;
54829: GO 54727
54831: POP
54832: POP
// if enchidnas then
54833: LD_VAR 0 4
54837: IFFALSE 54904
// for i = 1 to enchidnas do
54839: LD_ADDR_VAR 0 11
54843: PUSH
54844: DOUBLE
54845: LD_INT 1
54847: DEC
54848: ST_TO_ADDR
54849: LD_VAR 0 4
54853: PUSH
54854: FOR_TO
54855: IFFALSE 54902
// begin hc_class = 13 ;
54857: LD_ADDR_OWVAR 28
54861: PUSH
54862: LD_INT 13
54864: ST_TO_ADDR
// hc_gallery =  ;
54865: LD_ADDR_OWVAR 33
54869: PUSH
54870: LD_STRING 
54872: ST_TO_ADDR
// animal := CreateHuman ;
54873: LD_ADDR_VAR 0 12
54877: PUSH
54878: CALL_OW 44
54882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54883: LD_VAR 0 12
54887: PPUSH
54888: LD_VAR 0 8
54892: PPUSH
54893: LD_INT 0
54895: PPUSH
54896: CALL 56604 0 3
// end ;
54900: GO 54854
54902: POP
54903: POP
// if fishes then
54904: LD_VAR 0 7
54908: IFFALSE 54975
// for i = 1 to fishes do
54910: LD_ADDR_VAR 0 11
54914: PUSH
54915: DOUBLE
54916: LD_INT 1
54918: DEC
54919: ST_TO_ADDR
54920: LD_VAR 0 7
54924: PUSH
54925: FOR_TO
54926: IFFALSE 54973
// begin hc_class = 20 ;
54928: LD_ADDR_OWVAR 28
54932: PUSH
54933: LD_INT 20
54935: ST_TO_ADDR
// hc_gallery =  ;
54936: LD_ADDR_OWVAR 33
54940: PUSH
54941: LD_STRING 
54943: ST_TO_ADDR
// animal := CreateHuman ;
54944: LD_ADDR_VAR 0 12
54948: PUSH
54949: CALL_OW 44
54953: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54954: LD_VAR 0 12
54958: PPUSH
54959: LD_VAR 0 9
54963: PPUSH
54964: LD_INT 0
54966: PPUSH
54967: CALL 56604 0 3
// end ;
54971: GO 54925
54973: POP
54974: POP
// end ;
54975: LD_VAR 0 10
54979: RET
// export function WantHeal ( sci , unit ) ; begin
54980: LD_INT 0
54982: PPUSH
// if GetTaskList ( sci ) > 0 then
54983: LD_VAR 0 1
54987: PPUSH
54988: CALL_OW 437
54992: PUSH
54993: LD_INT 0
54995: GREATER
54996: IFFALSE 55066
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 437
55007: PUSH
55008: LD_INT 1
55010: ARRAY
55011: PUSH
55012: LD_INT 1
55014: ARRAY
55015: PUSH
55016: LD_STRING l
55018: EQUAL
55019: PUSH
55020: LD_VAR 0 1
55024: PPUSH
55025: CALL_OW 437
55029: PUSH
55030: LD_INT 1
55032: ARRAY
55033: PUSH
55034: LD_INT 4
55036: ARRAY
55037: PUSH
55038: LD_VAR 0 2
55042: EQUAL
55043: AND
55044: IFFALSE 55056
// result := true else
55046: LD_ADDR_VAR 0 3
55050: PUSH
55051: LD_INT 1
55053: ST_TO_ADDR
55054: GO 55064
// result := false ;
55056: LD_ADDR_VAR 0 3
55060: PUSH
55061: LD_INT 0
55063: ST_TO_ADDR
// end else
55064: GO 55074
// result := false ;
55066: LD_ADDR_VAR 0 3
55070: PUSH
55071: LD_INT 0
55073: ST_TO_ADDR
// end ;
55074: LD_VAR 0 3
55078: RET
// export function HealTarget ( sci ) ; begin
55079: LD_INT 0
55081: PPUSH
// if not sci then
55082: LD_VAR 0 1
55086: NOT
55087: IFFALSE 55091
// exit ;
55089: GO 55156
// result := 0 ;
55091: LD_ADDR_VAR 0 2
55095: PUSH
55096: LD_INT 0
55098: ST_TO_ADDR
// if GetTaskList ( sci ) then
55099: LD_VAR 0 1
55103: PPUSH
55104: CALL_OW 437
55108: IFFALSE 55156
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55110: LD_VAR 0 1
55114: PPUSH
55115: CALL_OW 437
55119: PUSH
55120: LD_INT 1
55122: ARRAY
55123: PUSH
55124: LD_INT 1
55126: ARRAY
55127: PUSH
55128: LD_STRING l
55130: EQUAL
55131: IFFALSE 55156
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55133: LD_ADDR_VAR 0 2
55137: PUSH
55138: LD_VAR 0 1
55142: PPUSH
55143: CALL_OW 437
55147: PUSH
55148: LD_INT 1
55150: ARRAY
55151: PUSH
55152: LD_INT 4
55154: ARRAY
55155: ST_TO_ADDR
// end ;
55156: LD_VAR 0 2
55160: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55161: LD_INT 0
55163: PPUSH
55164: PPUSH
55165: PPUSH
55166: PPUSH
// if not base_units then
55167: LD_VAR 0 1
55171: NOT
55172: IFFALSE 55176
// exit ;
55174: GO 55263
// result := false ;
55176: LD_ADDR_VAR 0 2
55180: PUSH
55181: LD_INT 0
55183: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55184: LD_ADDR_VAR 0 5
55188: PUSH
55189: LD_VAR 0 1
55193: PPUSH
55194: LD_INT 21
55196: PUSH
55197: LD_INT 3
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PPUSH
55204: CALL_OW 72
55208: ST_TO_ADDR
// if not tmp then
55209: LD_VAR 0 5
55213: NOT
55214: IFFALSE 55218
// exit ;
55216: GO 55263
// for i in tmp do
55218: LD_ADDR_VAR 0 3
55222: PUSH
55223: LD_VAR 0 5
55227: PUSH
55228: FOR_IN
55229: IFFALSE 55261
// begin result := EnemyInRange ( i , 22 ) ;
55231: LD_ADDR_VAR 0 2
55235: PUSH
55236: LD_VAR 0 3
55240: PPUSH
55241: LD_INT 22
55243: PPUSH
55244: CALL 52850 0 2
55248: ST_TO_ADDR
// if result then
55249: LD_VAR 0 2
55253: IFFALSE 55259
// exit ;
55255: POP
55256: POP
55257: GO 55263
// end ;
55259: GO 55228
55261: POP
55262: POP
// end ;
55263: LD_VAR 0 2
55267: RET
// export function FilterByTag ( units , tag ) ; begin
55268: LD_INT 0
55270: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55271: LD_ADDR_VAR 0 3
55275: PUSH
55276: LD_VAR 0 1
55280: PPUSH
55281: LD_INT 120
55283: PUSH
55284: LD_VAR 0 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PPUSH
55293: CALL_OW 72
55297: ST_TO_ADDR
// end ;
55298: LD_VAR 0 3
55302: RET
// export function IsDriver ( un ) ; begin
55303: LD_INT 0
55305: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55306: LD_ADDR_VAR 0 2
55310: PUSH
55311: LD_VAR 0 1
55315: PUSH
55316: LD_INT 55
55318: PUSH
55319: EMPTY
55320: LIST
55321: PPUSH
55322: CALL_OW 69
55326: IN
55327: ST_TO_ADDR
// end ;
55328: LD_VAR 0 2
55332: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55333: LD_INT 0
55335: PPUSH
55336: PPUSH
// list := [ ] ;
55337: LD_ADDR_VAR 0 5
55341: PUSH
55342: EMPTY
55343: ST_TO_ADDR
// case d of 0 :
55344: LD_VAR 0 3
55348: PUSH
55349: LD_INT 0
55351: DOUBLE
55352: EQUAL
55353: IFTRUE 55357
55355: GO 55490
55357: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55358: LD_ADDR_VAR 0 5
55362: PUSH
55363: LD_VAR 0 1
55367: PUSH
55368: LD_INT 4
55370: MINUS
55371: PUSH
55372: LD_VAR 0 2
55376: PUSH
55377: LD_INT 4
55379: MINUS
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: LIST
55388: PUSH
55389: LD_VAR 0 1
55393: PUSH
55394: LD_INT 3
55396: MINUS
55397: PUSH
55398: LD_VAR 0 2
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: PUSH
55411: LD_VAR 0 1
55415: PUSH
55416: LD_INT 4
55418: PLUS
55419: PUSH
55420: LD_VAR 0 2
55424: PUSH
55425: LD_INT 4
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: PUSH
55433: LD_VAR 0 1
55437: PUSH
55438: LD_INT 3
55440: PLUS
55441: PUSH
55442: LD_VAR 0 2
55446: PUSH
55447: LD_INT 3
55449: PLUS
55450: PUSH
55451: LD_INT 5
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: PUSH
55459: LD_VAR 0 1
55463: PUSH
55464: LD_VAR 0 2
55468: PUSH
55469: LD_INT 4
55471: PLUS
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// end ; 1 :
55488: GO 56188
55490: LD_INT 1
55492: DOUBLE
55493: EQUAL
55494: IFTRUE 55498
55496: GO 55631
55498: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55499: LD_ADDR_VAR 0 5
55503: PUSH
55504: LD_VAR 0 1
55508: PUSH
55509: LD_VAR 0 2
55513: PUSH
55514: LD_INT 4
55516: MINUS
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: PUSH
55526: LD_VAR 0 1
55530: PUSH
55531: LD_INT 3
55533: MINUS
55534: PUSH
55535: LD_VAR 0 2
55539: PUSH
55540: LD_INT 3
55542: MINUS
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: PUSH
55552: LD_VAR 0 1
55556: PUSH
55557: LD_INT 4
55559: MINUS
55560: PUSH
55561: LD_VAR 0 2
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: PUSH
55574: LD_VAR 0 1
55578: PUSH
55579: LD_VAR 0 2
55583: PUSH
55584: LD_INT 3
55586: PLUS
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: PUSH
55596: LD_VAR 0 1
55600: PUSH
55601: LD_INT 4
55603: PLUS
55604: PUSH
55605: LD_VAR 0 2
55609: PUSH
55610: LD_INT 4
55612: PLUS
55613: PUSH
55614: LD_INT 5
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// end ; 2 :
55629: GO 56188
55631: LD_INT 2
55633: DOUBLE
55634: EQUAL
55635: IFTRUE 55639
55637: GO 55768
55639: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55640: LD_ADDR_VAR 0 5
55644: PUSH
55645: LD_VAR 0 1
55649: PUSH
55650: LD_VAR 0 2
55654: PUSH
55655: LD_INT 3
55657: MINUS
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: PUSH
55667: LD_VAR 0 1
55671: PUSH
55672: LD_INT 4
55674: PLUS
55675: PUSH
55676: LD_VAR 0 2
55680: PUSH
55681: LD_INT 4
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: PUSH
55689: LD_VAR 0 1
55693: PUSH
55694: LD_VAR 0 2
55698: PUSH
55699: LD_INT 4
55701: PLUS
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: PUSH
55711: LD_VAR 0 1
55715: PUSH
55716: LD_INT 3
55718: MINUS
55719: PUSH
55720: LD_VAR 0 2
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: PUSH
55733: LD_VAR 0 1
55737: PUSH
55738: LD_INT 4
55740: MINUS
55741: PUSH
55742: LD_VAR 0 2
55746: PUSH
55747: LD_INT 4
55749: MINUS
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// end ; 3 :
55766: GO 56188
55768: LD_INT 3
55770: DOUBLE
55771: EQUAL
55772: IFTRUE 55776
55774: GO 55909
55776: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55777: LD_ADDR_VAR 0 5
55781: PUSH
55782: LD_VAR 0 1
55786: PUSH
55787: LD_INT 3
55789: PLUS
55790: PUSH
55791: LD_VAR 0 2
55795: PUSH
55796: LD_INT 4
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: LIST
55803: PUSH
55804: LD_VAR 0 1
55808: PUSH
55809: LD_INT 4
55811: PLUS
55812: PUSH
55813: LD_VAR 0 2
55817: PUSH
55818: LD_INT 4
55820: PLUS
55821: PUSH
55822: LD_INT 5
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: PUSH
55830: LD_VAR 0 1
55834: PUSH
55835: LD_INT 4
55837: MINUS
55838: PUSH
55839: LD_VAR 0 2
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: LIST
55851: PUSH
55852: LD_VAR 0 1
55856: PUSH
55857: LD_VAR 0 2
55861: PUSH
55862: LD_INT 4
55864: MINUS
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: PUSH
55874: LD_VAR 0 1
55878: PUSH
55879: LD_INT 3
55881: MINUS
55882: PUSH
55883: LD_VAR 0 2
55887: PUSH
55888: LD_INT 3
55890: MINUS
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// end ; 4 :
55907: GO 56188
55909: LD_INT 4
55911: DOUBLE
55912: EQUAL
55913: IFTRUE 55917
55915: GO 56050
55917: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55918: LD_ADDR_VAR 0 5
55922: PUSH
55923: LD_VAR 0 1
55927: PUSH
55928: LD_VAR 0 2
55932: PUSH
55933: LD_INT 4
55935: PLUS
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: PUSH
55945: LD_VAR 0 1
55949: PUSH
55950: LD_INT 3
55952: PLUS
55953: PUSH
55954: LD_VAR 0 2
55958: PUSH
55959: LD_INT 3
55961: PLUS
55962: PUSH
55963: LD_INT 5
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: PUSH
55971: LD_VAR 0 1
55975: PUSH
55976: LD_INT 4
55978: PLUS
55979: PUSH
55980: LD_VAR 0 2
55984: PUSH
55985: LD_INT 4
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: PUSH
55993: LD_VAR 0 1
55997: PUSH
55998: LD_VAR 0 2
56002: PUSH
56003: LD_INT 3
56005: MINUS
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: PUSH
56015: LD_VAR 0 1
56019: PUSH
56020: LD_INT 4
56022: MINUS
56023: PUSH
56024: LD_VAR 0 2
56028: PUSH
56029: LD_INT 4
56031: MINUS
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: ST_TO_ADDR
// end ; 5 :
56048: GO 56188
56050: LD_INT 5
56052: DOUBLE
56053: EQUAL
56054: IFTRUE 56058
56056: GO 56187
56058: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56059: LD_ADDR_VAR 0 5
56063: PUSH
56064: LD_VAR 0 1
56068: PUSH
56069: LD_INT 4
56071: MINUS
56072: PUSH
56073: LD_VAR 0 2
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: PUSH
56086: LD_VAR 0 1
56090: PUSH
56091: LD_VAR 0 2
56095: PUSH
56096: LD_INT 4
56098: MINUS
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: PUSH
56108: LD_VAR 0 1
56112: PUSH
56113: LD_INT 4
56115: PLUS
56116: PUSH
56117: LD_VAR 0 2
56121: PUSH
56122: LD_INT 4
56124: PLUS
56125: PUSH
56126: LD_INT 5
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: PUSH
56134: LD_VAR 0 1
56138: PUSH
56139: LD_INT 3
56141: PLUS
56142: PUSH
56143: LD_VAR 0 2
56147: PUSH
56148: LD_INT 4
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: PUSH
56156: LD_VAR 0 1
56160: PUSH
56161: LD_VAR 0 2
56165: PUSH
56166: LD_INT 3
56168: PLUS
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// end ; end ;
56185: GO 56188
56187: POP
// result := list ;
56188: LD_ADDR_VAR 0 4
56192: PUSH
56193: LD_VAR 0 5
56197: ST_TO_ADDR
// end ;
56198: LD_VAR 0 4
56202: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56203: LD_INT 0
56205: PPUSH
56206: PPUSH
56207: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56208: LD_VAR 0 1
56212: NOT
56213: PUSH
56214: LD_VAR 0 2
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 2
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: IN
56237: NOT
56238: OR
56239: IFFALSE 56243
// exit ;
56241: GO 56326
// tmp := [ ] ;
56243: LD_ADDR_VAR 0 5
56247: PUSH
56248: EMPTY
56249: ST_TO_ADDR
// for i in units do
56250: LD_ADDR_VAR 0 4
56254: PUSH
56255: LD_VAR 0 1
56259: PUSH
56260: FOR_IN
56261: IFFALSE 56295
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56263: LD_ADDR_VAR 0 5
56267: PUSH
56268: LD_VAR 0 5
56272: PPUSH
56273: LD_VAR 0 4
56277: PPUSH
56278: LD_VAR 0 2
56282: PPUSH
56283: CALL_OW 259
56287: PPUSH
56288: CALL 57687 0 2
56292: ST_TO_ADDR
56293: GO 56260
56295: POP
56296: POP
// if not tmp then
56297: LD_VAR 0 5
56301: NOT
56302: IFFALSE 56306
// exit ;
56304: GO 56326
// result := SortListByListDesc ( units , tmp ) ;
56306: LD_ADDR_VAR 0 3
56310: PUSH
56311: LD_VAR 0 1
56315: PPUSH
56316: LD_VAR 0 5
56320: PPUSH
56321: CALL_OW 77
56325: ST_TO_ADDR
// end ;
56326: LD_VAR 0 3
56330: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56331: LD_INT 0
56333: PPUSH
56334: PPUSH
56335: PPUSH
// result := false ;
56336: LD_ADDR_VAR 0 3
56340: PUSH
56341: LD_INT 0
56343: ST_TO_ADDR
// if not building then
56344: LD_VAR 0 2
56348: NOT
56349: IFFALSE 56353
// exit ;
56351: GO 56491
// x := GetX ( building ) ;
56353: LD_ADDR_VAR 0 4
56357: PUSH
56358: LD_VAR 0 2
56362: PPUSH
56363: CALL_OW 250
56367: ST_TO_ADDR
// y := GetY ( building ) ;
56368: LD_ADDR_VAR 0 5
56372: PUSH
56373: LD_VAR 0 2
56377: PPUSH
56378: CALL_OW 251
56382: ST_TO_ADDR
// if not x or not y then
56383: LD_VAR 0 4
56387: NOT
56388: PUSH
56389: LD_VAR 0 5
56393: NOT
56394: OR
56395: IFFALSE 56399
// exit ;
56397: GO 56491
// if GetTaskList ( unit ) then
56399: LD_VAR 0 1
56403: PPUSH
56404: CALL_OW 437
56408: IFFALSE 56491
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56410: LD_STRING e
56412: PUSH
56413: LD_VAR 0 1
56417: PPUSH
56418: CALL_OW 437
56422: PUSH
56423: LD_INT 1
56425: ARRAY
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: EQUAL
56431: PUSH
56432: LD_VAR 0 4
56436: PUSH
56437: LD_VAR 0 1
56441: PPUSH
56442: CALL_OW 437
56446: PUSH
56447: LD_INT 1
56449: ARRAY
56450: PUSH
56451: LD_INT 2
56453: ARRAY
56454: EQUAL
56455: AND
56456: PUSH
56457: LD_VAR 0 5
56461: PUSH
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 437
56471: PUSH
56472: LD_INT 1
56474: ARRAY
56475: PUSH
56476: LD_INT 3
56478: ARRAY
56479: EQUAL
56480: AND
56481: IFFALSE 56491
// result := true end ;
56483: LD_ADDR_VAR 0 3
56487: PUSH
56488: LD_INT 1
56490: ST_TO_ADDR
// end ;
56491: LD_VAR 0 3
56495: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56496: LD_INT 0
56498: PPUSH
// result := false ;
56499: LD_ADDR_VAR 0 4
56503: PUSH
56504: LD_INT 0
56506: ST_TO_ADDR
// if GetTaskList ( unit ) then
56507: LD_VAR 0 1
56511: PPUSH
56512: CALL_OW 437
56516: IFFALSE 56599
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56518: LD_STRING M
56520: PUSH
56521: LD_VAR 0 1
56525: PPUSH
56526: CALL_OW 437
56530: PUSH
56531: LD_INT 1
56533: ARRAY
56534: PUSH
56535: LD_INT 1
56537: ARRAY
56538: EQUAL
56539: PUSH
56540: LD_VAR 0 2
56544: PUSH
56545: LD_VAR 0 1
56549: PPUSH
56550: CALL_OW 437
56554: PUSH
56555: LD_INT 1
56557: ARRAY
56558: PUSH
56559: LD_INT 2
56561: ARRAY
56562: EQUAL
56563: AND
56564: PUSH
56565: LD_VAR 0 3
56569: PUSH
56570: LD_VAR 0 1
56574: PPUSH
56575: CALL_OW 437
56579: PUSH
56580: LD_INT 1
56582: ARRAY
56583: PUSH
56584: LD_INT 3
56586: ARRAY
56587: EQUAL
56588: AND
56589: IFFALSE 56599
// result := true ;
56591: LD_ADDR_VAR 0 4
56595: PUSH
56596: LD_INT 1
56598: ST_TO_ADDR
// end ; end ;
56599: LD_VAR 0 4
56603: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56604: LD_INT 0
56606: PPUSH
56607: PPUSH
56608: PPUSH
56609: PPUSH
// if not unit or not area then
56610: LD_VAR 0 1
56614: NOT
56615: PUSH
56616: LD_VAR 0 2
56620: NOT
56621: OR
56622: IFFALSE 56626
// exit ;
56624: GO 56790
// tmp := AreaToList ( area , i ) ;
56626: LD_ADDR_VAR 0 6
56630: PUSH
56631: LD_VAR 0 2
56635: PPUSH
56636: LD_VAR 0 5
56640: PPUSH
56641: CALL_OW 517
56645: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56646: LD_ADDR_VAR 0 5
56650: PUSH
56651: DOUBLE
56652: LD_INT 1
56654: DEC
56655: ST_TO_ADDR
56656: LD_VAR 0 6
56660: PUSH
56661: LD_INT 1
56663: ARRAY
56664: PUSH
56665: FOR_TO
56666: IFFALSE 56788
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56668: LD_ADDR_VAR 0 7
56672: PUSH
56673: LD_VAR 0 6
56677: PUSH
56678: LD_INT 1
56680: ARRAY
56681: PUSH
56682: LD_VAR 0 5
56686: ARRAY
56687: PUSH
56688: LD_VAR 0 6
56692: PUSH
56693: LD_INT 2
56695: ARRAY
56696: PUSH
56697: LD_VAR 0 5
56701: ARRAY
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56707: LD_VAR 0 7
56711: PUSH
56712: LD_INT 1
56714: ARRAY
56715: PPUSH
56716: LD_VAR 0 7
56720: PUSH
56721: LD_INT 2
56723: ARRAY
56724: PPUSH
56725: CALL_OW 428
56729: PUSH
56730: LD_INT 0
56732: EQUAL
56733: IFFALSE 56786
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56735: LD_VAR 0 1
56739: PPUSH
56740: LD_VAR 0 7
56744: PUSH
56745: LD_INT 1
56747: ARRAY
56748: PPUSH
56749: LD_VAR 0 7
56753: PUSH
56754: LD_INT 2
56756: ARRAY
56757: PPUSH
56758: LD_VAR 0 3
56762: PPUSH
56763: CALL_OW 48
// result := IsPlaced ( unit ) ;
56767: LD_ADDR_VAR 0 4
56771: PUSH
56772: LD_VAR 0 1
56776: PPUSH
56777: CALL_OW 305
56781: ST_TO_ADDR
// exit ;
56782: POP
56783: POP
56784: GO 56790
// end ; end ;
56786: GO 56665
56788: POP
56789: POP
// end ;
56790: LD_VAR 0 4
56794: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56795: LD_INT 0
56797: PPUSH
56798: PPUSH
56799: PPUSH
// if not side or side > 8 then
56800: LD_VAR 0 1
56804: NOT
56805: PUSH
56806: LD_VAR 0 1
56810: PUSH
56811: LD_INT 8
56813: GREATER
56814: OR
56815: IFFALSE 56819
// exit ;
56817: GO 57006
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56819: LD_ADDR_VAR 0 4
56823: PUSH
56824: LD_INT 22
56826: PUSH
56827: LD_VAR 0 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 21
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PPUSH
56850: CALL_OW 69
56854: ST_TO_ADDR
// if not tmp then
56855: LD_VAR 0 4
56859: NOT
56860: IFFALSE 56864
// exit ;
56862: GO 57006
// enable_addtolog := true ;
56864: LD_ADDR_OWVAR 81
56868: PUSH
56869: LD_INT 1
56871: ST_TO_ADDR
// AddToLog ( [ ) ;
56872: LD_STRING [
56874: PPUSH
56875: CALL_OW 561
// for i in tmp do
56879: LD_ADDR_VAR 0 3
56883: PUSH
56884: LD_VAR 0 4
56888: PUSH
56889: FOR_IN
56890: IFFALSE 56997
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56892: LD_STRING [
56894: PUSH
56895: LD_VAR 0 3
56899: PPUSH
56900: CALL_OW 266
56904: STR
56905: PUSH
56906: LD_STRING , 
56908: STR
56909: PUSH
56910: LD_VAR 0 3
56914: PPUSH
56915: CALL_OW 250
56919: STR
56920: PUSH
56921: LD_STRING , 
56923: STR
56924: PUSH
56925: LD_VAR 0 3
56929: PPUSH
56930: CALL_OW 251
56934: STR
56935: PUSH
56936: LD_STRING , 
56938: STR
56939: PUSH
56940: LD_VAR 0 3
56944: PPUSH
56945: CALL_OW 254
56949: STR
56950: PUSH
56951: LD_STRING , 
56953: STR
56954: PUSH
56955: LD_VAR 0 3
56959: PPUSH
56960: LD_INT 1
56962: PPUSH
56963: CALL_OW 268
56967: STR
56968: PUSH
56969: LD_STRING , 
56971: STR
56972: PUSH
56973: LD_VAR 0 3
56977: PPUSH
56978: LD_INT 2
56980: PPUSH
56981: CALL_OW 268
56985: STR
56986: PUSH
56987: LD_STRING ],
56989: STR
56990: PPUSH
56991: CALL_OW 561
// end ;
56995: GO 56889
56997: POP
56998: POP
// AddToLog ( ]; ) ;
56999: LD_STRING ];
57001: PPUSH
57002: CALL_OW 561
// end ;
57006: LD_VAR 0 2
57010: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57011: LD_INT 0
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
// if not area or not rate or not max then
57018: LD_VAR 0 1
57022: NOT
57023: PUSH
57024: LD_VAR 0 2
57028: NOT
57029: OR
57030: PUSH
57031: LD_VAR 0 4
57035: NOT
57036: OR
57037: IFFALSE 57041
// exit ;
57039: GO 57230
// while 1 do
57041: LD_INT 1
57043: IFFALSE 57230
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57045: LD_ADDR_VAR 0 9
57049: PUSH
57050: LD_VAR 0 1
57054: PPUSH
57055: LD_INT 1
57057: PPUSH
57058: CALL_OW 287
57062: PUSH
57063: LD_INT 10
57065: MUL
57066: ST_TO_ADDR
// r := rate / 10 ;
57067: LD_ADDR_VAR 0 7
57071: PUSH
57072: LD_VAR 0 2
57076: PUSH
57077: LD_INT 10
57079: DIVREAL
57080: ST_TO_ADDR
// time := 1 1$00 ;
57081: LD_ADDR_VAR 0 8
57085: PUSH
57086: LD_INT 2100
57088: ST_TO_ADDR
// if amount < min then
57089: LD_VAR 0 9
57093: PUSH
57094: LD_VAR 0 3
57098: LESS
57099: IFFALSE 57117
// r := r * 2 else
57101: LD_ADDR_VAR 0 7
57105: PUSH
57106: LD_VAR 0 7
57110: PUSH
57111: LD_INT 2
57113: MUL
57114: ST_TO_ADDR
57115: GO 57143
// if amount > max then
57117: LD_VAR 0 9
57121: PUSH
57122: LD_VAR 0 4
57126: GREATER
57127: IFFALSE 57143
// r := r / 2 ;
57129: LD_ADDR_VAR 0 7
57133: PUSH
57134: LD_VAR 0 7
57138: PUSH
57139: LD_INT 2
57141: DIVREAL
57142: ST_TO_ADDR
// time := time / r ;
57143: LD_ADDR_VAR 0 8
57147: PUSH
57148: LD_VAR 0 8
57152: PUSH
57153: LD_VAR 0 7
57157: DIVREAL
57158: ST_TO_ADDR
// if time < 0 then
57159: LD_VAR 0 8
57163: PUSH
57164: LD_INT 0
57166: LESS
57167: IFFALSE 57184
// time := time * - 1 ;
57169: LD_ADDR_VAR 0 8
57173: PUSH
57174: LD_VAR 0 8
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: MUL
57183: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57184: LD_VAR 0 8
57188: PUSH
57189: LD_INT 35
57191: PPUSH
57192: LD_INT 875
57194: PPUSH
57195: CALL_OW 12
57199: PLUS
57200: PPUSH
57201: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57205: LD_INT 1
57207: PPUSH
57208: LD_INT 5
57210: PPUSH
57211: CALL_OW 12
57215: PPUSH
57216: LD_VAR 0 1
57220: PPUSH
57221: LD_INT 1
57223: PPUSH
57224: CALL_OW 55
// end ;
57228: GO 57041
// end ;
57230: LD_VAR 0 5
57234: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57235: LD_INT 0
57237: PPUSH
57238: PPUSH
57239: PPUSH
57240: PPUSH
57241: PPUSH
57242: PPUSH
57243: PPUSH
57244: PPUSH
// if not turrets or not factories then
57245: LD_VAR 0 1
57249: NOT
57250: PUSH
57251: LD_VAR 0 2
57255: NOT
57256: OR
57257: IFFALSE 57261
// exit ;
57259: GO 57568
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57261: LD_ADDR_VAR 0 10
57265: PUSH
57266: LD_INT 5
57268: PUSH
57269: LD_INT 6
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: LD_INT 4
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: LD_INT 5
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 24
57303: PUSH
57304: LD_INT 25
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 23
57313: PUSH
57314: LD_INT 27
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 42
57327: PUSH
57328: LD_INT 43
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 44
57337: PUSH
57338: LD_INT 46
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 45
57347: PUSH
57348: LD_INT 47
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// result := [ ] ;
57365: LD_ADDR_VAR 0 3
57369: PUSH
57370: EMPTY
57371: ST_TO_ADDR
// for i in turrets do
57372: LD_ADDR_VAR 0 4
57376: PUSH
57377: LD_VAR 0 1
57381: PUSH
57382: FOR_IN
57383: IFFALSE 57566
// begin nat := GetNation ( i ) ;
57385: LD_ADDR_VAR 0 7
57389: PUSH
57390: LD_VAR 0 4
57394: PPUSH
57395: CALL_OW 248
57399: ST_TO_ADDR
// weapon := 0 ;
57400: LD_ADDR_VAR 0 8
57404: PUSH
57405: LD_INT 0
57407: ST_TO_ADDR
// if not nat then
57408: LD_VAR 0 7
57412: NOT
57413: IFFALSE 57417
// continue ;
57415: GO 57382
// for j in list [ nat ] do
57417: LD_ADDR_VAR 0 5
57421: PUSH
57422: LD_VAR 0 10
57426: PUSH
57427: LD_VAR 0 7
57431: ARRAY
57432: PUSH
57433: FOR_IN
57434: IFFALSE 57475
// if GetBWeapon ( i ) = j [ 1 ] then
57436: LD_VAR 0 4
57440: PPUSH
57441: CALL_OW 269
57445: PUSH
57446: LD_VAR 0 5
57450: PUSH
57451: LD_INT 1
57453: ARRAY
57454: EQUAL
57455: IFFALSE 57473
// begin weapon := j [ 2 ] ;
57457: LD_ADDR_VAR 0 8
57461: PUSH
57462: LD_VAR 0 5
57466: PUSH
57467: LD_INT 2
57469: ARRAY
57470: ST_TO_ADDR
// break ;
57471: GO 57475
// end ;
57473: GO 57433
57475: POP
57476: POP
// if not weapon then
57477: LD_VAR 0 8
57481: NOT
57482: IFFALSE 57486
// continue ;
57484: GO 57382
// for k in factories do
57486: LD_ADDR_VAR 0 6
57490: PUSH
57491: LD_VAR 0 2
57495: PUSH
57496: FOR_IN
57497: IFFALSE 57562
// begin weapons := AvailableWeaponList ( k ) ;
57499: LD_ADDR_VAR 0 9
57503: PUSH
57504: LD_VAR 0 6
57508: PPUSH
57509: CALL_OW 478
57513: ST_TO_ADDR
// if not weapons then
57514: LD_VAR 0 9
57518: NOT
57519: IFFALSE 57523
// continue ;
57521: GO 57496
// if weapon in weapons then
57523: LD_VAR 0 8
57527: PUSH
57528: LD_VAR 0 9
57532: IN
57533: IFFALSE 57560
// begin result := [ i , weapon ] ;
57535: LD_ADDR_VAR 0 3
57539: PUSH
57540: LD_VAR 0 4
57544: PUSH
57545: LD_VAR 0 8
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// exit ;
57554: POP
57555: POP
57556: POP
57557: POP
57558: GO 57568
// end ; end ;
57560: GO 57496
57562: POP
57563: POP
// end ;
57564: GO 57382
57566: POP
57567: POP
// end ;
57568: LD_VAR 0 3
57572: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57573: LD_INT 0
57575: PPUSH
// if not side or side > 8 then
57576: LD_VAR 0 3
57580: NOT
57581: PUSH
57582: LD_VAR 0 3
57586: PUSH
57587: LD_INT 8
57589: GREATER
57590: OR
57591: IFFALSE 57595
// exit ;
57593: GO 57654
// if not range then
57595: LD_VAR 0 4
57599: NOT
57600: IFFALSE 57611
// range := - 12 ;
57602: LD_ADDR_VAR 0 4
57606: PUSH
57607: LD_INT 12
57609: NEG
57610: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57611: LD_VAR 0 1
57615: PPUSH
57616: LD_VAR 0 2
57620: PPUSH
57621: LD_VAR 0 3
57625: PPUSH
57626: LD_VAR 0 4
57630: PPUSH
57631: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57635: LD_VAR 0 1
57639: PPUSH
57640: LD_VAR 0 2
57644: PPUSH
57645: LD_VAR 0 3
57649: PPUSH
57650: CALL_OW 331
// end ;
57654: LD_VAR 0 5
57658: RET
// export function Video ( mode ) ; begin
57659: LD_INT 0
57661: PPUSH
// ingame_video = mode ;
57662: LD_ADDR_OWVAR 52
57666: PUSH
57667: LD_VAR 0 1
57671: ST_TO_ADDR
// interface_hidden = mode ;
57672: LD_ADDR_OWVAR 54
57676: PUSH
57677: LD_VAR 0 1
57681: ST_TO_ADDR
// end ;
57682: LD_VAR 0 2
57686: RET
// export function Join ( array , element ) ; begin
57687: LD_INT 0
57689: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57690: LD_ADDR_VAR 0 3
57694: PUSH
57695: LD_VAR 0 1
57699: PPUSH
57700: LD_VAR 0 1
57704: PUSH
57705: LD_INT 1
57707: PLUS
57708: PPUSH
57709: LD_VAR 0 2
57713: PPUSH
57714: CALL_OW 1
57718: ST_TO_ADDR
// end ;
57719: LD_VAR 0 3
57723: RET
// export function JoinUnion ( array , element ) ; begin
57724: LD_INT 0
57726: PPUSH
// result := array union element ;
57727: LD_ADDR_VAR 0 3
57731: PUSH
57732: LD_VAR 0 1
57736: PUSH
57737: LD_VAR 0 2
57741: UNION
57742: ST_TO_ADDR
// end ;
57743: LD_VAR 0 3
57747: RET
// export function GetBehemoths ( side ) ; begin
57748: LD_INT 0
57750: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57751: LD_ADDR_VAR 0 2
57755: PUSH
57756: LD_INT 22
57758: PUSH
57759: LD_VAR 0 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 31
57770: PUSH
57771: LD_INT 25
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PPUSH
57782: CALL_OW 69
57786: ST_TO_ADDR
// end ;
57787: LD_VAR 0 2
57791: RET
// export function Shuffle ( array ) ; var i , index ; begin
57792: LD_INT 0
57794: PPUSH
57795: PPUSH
57796: PPUSH
// result := [ ] ;
57797: LD_ADDR_VAR 0 2
57801: PUSH
57802: EMPTY
57803: ST_TO_ADDR
// if not array then
57804: LD_VAR 0 1
57808: NOT
57809: IFFALSE 57813
// exit ;
57811: GO 57912
// Randomize ;
57813: CALL_OW 10
// for i = array downto 1 do
57817: LD_ADDR_VAR 0 3
57821: PUSH
57822: DOUBLE
57823: LD_VAR 0 1
57827: INC
57828: ST_TO_ADDR
57829: LD_INT 1
57831: PUSH
57832: FOR_DOWNTO
57833: IFFALSE 57910
// begin index := rand ( 1 , array ) ;
57835: LD_ADDR_VAR 0 4
57839: PUSH
57840: LD_INT 1
57842: PPUSH
57843: LD_VAR 0 1
57847: PPUSH
57848: CALL_OW 12
57852: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57853: LD_ADDR_VAR 0 2
57857: PUSH
57858: LD_VAR 0 2
57862: PPUSH
57863: LD_VAR 0 2
57867: PUSH
57868: LD_INT 1
57870: PLUS
57871: PPUSH
57872: LD_VAR 0 1
57876: PUSH
57877: LD_VAR 0 4
57881: ARRAY
57882: PPUSH
57883: CALL_OW 2
57887: ST_TO_ADDR
// array := Delete ( array , index ) ;
57888: LD_ADDR_VAR 0 1
57892: PUSH
57893: LD_VAR 0 1
57897: PPUSH
57898: LD_VAR 0 4
57902: PPUSH
57903: CALL_OW 3
57907: ST_TO_ADDR
// end ;
57908: GO 57832
57910: POP
57911: POP
// end ;
57912: LD_VAR 0 2
57916: RET
// export function GetBaseMaterials ( base ) ; begin
57917: LD_INT 0
57919: PPUSH
// result := [ 0 , 0 , 0 ] ;
57920: LD_ADDR_VAR 0 2
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// if not base then
57939: LD_VAR 0 1
57943: NOT
57944: IFFALSE 57948
// exit ;
57946: GO 57997
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57948: LD_ADDR_VAR 0 2
57952: PUSH
57953: LD_VAR 0 1
57957: PPUSH
57958: LD_INT 1
57960: PPUSH
57961: CALL_OW 275
57965: PUSH
57966: LD_VAR 0 1
57970: PPUSH
57971: LD_INT 2
57973: PPUSH
57974: CALL_OW 275
57978: PUSH
57979: LD_VAR 0 1
57983: PPUSH
57984: LD_INT 3
57986: PPUSH
57987: CALL_OW 275
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: ST_TO_ADDR
// end ;
57997: LD_VAR 0 2
58001: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58002: LD_INT 0
58004: PPUSH
58005: PPUSH
// result := array ;
58006: LD_ADDR_VAR 0 3
58010: PUSH
58011: LD_VAR 0 1
58015: ST_TO_ADDR
// if size >= result then
58016: LD_VAR 0 2
58020: PUSH
58021: LD_VAR 0 3
58025: GREATEREQUAL
58026: IFFALSE 58030
// exit ;
58028: GO 58080
// if size then
58030: LD_VAR 0 2
58034: IFFALSE 58080
// for i := array downto size do
58036: LD_ADDR_VAR 0 4
58040: PUSH
58041: DOUBLE
58042: LD_VAR 0 1
58046: INC
58047: ST_TO_ADDR
58048: LD_VAR 0 2
58052: PUSH
58053: FOR_DOWNTO
58054: IFFALSE 58078
// result := Delete ( result , result ) ;
58056: LD_ADDR_VAR 0 3
58060: PUSH
58061: LD_VAR 0 3
58065: PPUSH
58066: LD_VAR 0 3
58070: PPUSH
58071: CALL_OW 3
58075: ST_TO_ADDR
58076: GO 58053
58078: POP
58079: POP
// end ;
58080: LD_VAR 0 3
58084: RET
// export function ComExit ( unit ) ; var tmp ; begin
58085: LD_INT 0
58087: PPUSH
58088: PPUSH
// if not IsInUnit ( unit ) then
58089: LD_VAR 0 1
58093: PPUSH
58094: CALL_OW 310
58098: NOT
58099: IFFALSE 58103
// exit ;
58101: GO 58163
// tmp := IsInUnit ( unit ) ;
58103: LD_ADDR_VAR 0 3
58107: PUSH
58108: LD_VAR 0 1
58112: PPUSH
58113: CALL_OW 310
58117: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58118: LD_VAR 0 3
58122: PPUSH
58123: CALL_OW 247
58127: PUSH
58128: LD_INT 2
58130: EQUAL
58131: IFFALSE 58144
// ComExitVehicle ( unit ) else
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 121
58142: GO 58153
// ComExitBuilding ( unit ) ;
58144: LD_VAR 0 1
58148: PPUSH
58149: CALL_OW 122
// result := tmp ;
58153: LD_ADDR_VAR 0 2
58157: PUSH
58158: LD_VAR 0 3
58162: ST_TO_ADDR
// end ;
58163: LD_VAR 0 2
58167: RET
// export function ComExitAll ( units ) ; var i ; begin
58168: LD_INT 0
58170: PPUSH
58171: PPUSH
// if not units then
58172: LD_VAR 0 1
58176: NOT
58177: IFFALSE 58181
// exit ;
58179: GO 58207
// for i in units do
58181: LD_ADDR_VAR 0 3
58185: PUSH
58186: LD_VAR 0 1
58190: PUSH
58191: FOR_IN
58192: IFFALSE 58205
// ComExit ( i ) ;
58194: LD_VAR 0 3
58198: PPUSH
58199: CALL 58085 0 1
58203: GO 58191
58205: POP
58206: POP
// end ;
58207: LD_VAR 0 2
58211: RET
// export function ResetHc ; begin
58212: LD_INT 0
58214: PPUSH
// InitHc ;
58215: CALL_OW 19
// hc_importance := 0 ;
58219: LD_ADDR_OWVAR 32
58223: PUSH
58224: LD_INT 0
58226: ST_TO_ADDR
// end ;
58227: LD_VAR 0 1
58231: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58232: LD_INT 0
58234: PPUSH
58235: PPUSH
58236: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58237: LD_ADDR_VAR 0 6
58241: PUSH
58242: LD_VAR 0 1
58246: PUSH
58247: LD_VAR 0 3
58251: PLUS
58252: PUSH
58253: LD_INT 2
58255: DIV
58256: ST_TO_ADDR
// if _x < 0 then
58257: LD_VAR 0 6
58261: PUSH
58262: LD_INT 0
58264: LESS
58265: IFFALSE 58282
// _x := _x * - 1 ;
58267: LD_ADDR_VAR 0 6
58271: PUSH
58272: LD_VAR 0 6
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: MUL
58281: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58282: LD_ADDR_VAR 0 7
58286: PUSH
58287: LD_VAR 0 2
58291: PUSH
58292: LD_VAR 0 4
58296: PLUS
58297: PUSH
58298: LD_INT 2
58300: DIV
58301: ST_TO_ADDR
// if _y < 0 then
58302: LD_VAR 0 7
58306: PUSH
58307: LD_INT 0
58309: LESS
58310: IFFALSE 58327
// _y := _y * - 1 ;
58312: LD_ADDR_VAR 0 7
58316: PUSH
58317: LD_VAR 0 7
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: MUL
58326: ST_TO_ADDR
// result := [ _x , _y ] ;
58327: LD_ADDR_VAR 0 5
58331: PUSH
58332: LD_VAR 0 6
58336: PUSH
58337: LD_VAR 0 7
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: ST_TO_ADDR
// end ;
58346: LD_VAR 0 5
58350: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58351: LD_INT 0
58353: PPUSH
58354: PPUSH
58355: PPUSH
58356: PPUSH
// task := GetTaskList ( unit ) ;
58357: LD_ADDR_VAR 0 7
58361: PUSH
58362: LD_VAR 0 1
58366: PPUSH
58367: CALL_OW 437
58371: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58372: LD_VAR 0 7
58376: NOT
58377: PUSH
58378: LD_VAR 0 1
58382: PPUSH
58383: LD_VAR 0 2
58387: PPUSH
58388: CALL_OW 308
58392: NOT
58393: AND
58394: IFFALSE 58398
// exit ;
58396: GO 58516
// if IsInArea ( unit , area ) then
58398: LD_VAR 0 1
58402: PPUSH
58403: LD_VAR 0 2
58407: PPUSH
58408: CALL_OW 308
58412: IFFALSE 58430
// begin ComMoveToArea ( unit , goAway ) ;
58414: LD_VAR 0 1
58418: PPUSH
58419: LD_VAR 0 3
58423: PPUSH
58424: CALL_OW 113
// exit ;
58428: GO 58516
// end ; if task [ 1 ] [ 1 ] <> M then
58430: LD_VAR 0 7
58434: PUSH
58435: LD_INT 1
58437: ARRAY
58438: PUSH
58439: LD_INT 1
58441: ARRAY
58442: PUSH
58443: LD_STRING M
58445: NONEQUAL
58446: IFFALSE 58450
// exit ;
58448: GO 58516
// x := task [ 1 ] [ 2 ] ;
58450: LD_ADDR_VAR 0 5
58454: PUSH
58455: LD_VAR 0 7
58459: PUSH
58460: LD_INT 1
58462: ARRAY
58463: PUSH
58464: LD_INT 2
58466: ARRAY
58467: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58468: LD_ADDR_VAR 0 6
58472: PUSH
58473: LD_VAR 0 7
58477: PUSH
58478: LD_INT 1
58480: ARRAY
58481: PUSH
58482: LD_INT 3
58484: ARRAY
58485: ST_TO_ADDR
// if InArea ( x , y , area ) then
58486: LD_VAR 0 5
58490: PPUSH
58491: LD_VAR 0 6
58495: PPUSH
58496: LD_VAR 0 2
58500: PPUSH
58501: CALL_OW 309
58505: IFFALSE 58516
// ComStop ( unit ) ;
58507: LD_VAR 0 1
58511: PPUSH
58512: CALL_OW 141
// end ;
58516: LD_VAR 0 4
58520: RET
// export function Abs ( value ) ; begin
58521: LD_INT 0
58523: PPUSH
// result := value ;
58524: LD_ADDR_VAR 0 2
58528: PUSH
58529: LD_VAR 0 1
58533: ST_TO_ADDR
// if value < 0 then
58534: LD_VAR 0 1
58538: PUSH
58539: LD_INT 0
58541: LESS
58542: IFFALSE 58559
// result := value * - 1 ;
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_VAR 0 1
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: MUL
58558: ST_TO_ADDR
// end ;
58559: LD_VAR 0 2
58563: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58564: LD_INT 0
58566: PPUSH
58567: PPUSH
58568: PPUSH
58569: PPUSH
58570: PPUSH
58571: PPUSH
58572: PPUSH
58573: PPUSH
// if not unit or not building then
58574: LD_VAR 0 1
58578: NOT
58579: PUSH
58580: LD_VAR 0 2
58584: NOT
58585: OR
58586: IFFALSE 58590
// exit ;
58588: GO 58816
// x := GetX ( building ) ;
58590: LD_ADDR_VAR 0 4
58594: PUSH
58595: LD_VAR 0 2
58599: PPUSH
58600: CALL_OW 250
58604: ST_TO_ADDR
// y := GetY ( building ) ;
58605: LD_ADDR_VAR 0 6
58609: PUSH
58610: LD_VAR 0 2
58614: PPUSH
58615: CALL_OW 251
58619: ST_TO_ADDR
// d := GetDir ( building ) ;
58620: LD_ADDR_VAR 0 8
58624: PUSH
58625: LD_VAR 0 2
58629: PPUSH
58630: CALL_OW 254
58634: ST_TO_ADDR
// r := 4 ;
58635: LD_ADDR_VAR 0 9
58639: PUSH
58640: LD_INT 4
58642: ST_TO_ADDR
// for i := 1 to 5 do
58643: LD_ADDR_VAR 0 10
58647: PUSH
58648: DOUBLE
58649: LD_INT 1
58651: DEC
58652: ST_TO_ADDR
58653: LD_INT 5
58655: PUSH
58656: FOR_TO
58657: IFFALSE 58814
// begin _x := ShiftX ( x , d , r + i ) ;
58659: LD_ADDR_VAR 0 5
58663: PUSH
58664: LD_VAR 0 4
58668: PPUSH
58669: LD_VAR 0 8
58673: PPUSH
58674: LD_VAR 0 9
58678: PUSH
58679: LD_VAR 0 10
58683: PLUS
58684: PPUSH
58685: CALL_OW 272
58689: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58690: LD_ADDR_VAR 0 7
58694: PUSH
58695: LD_VAR 0 6
58699: PPUSH
58700: LD_VAR 0 8
58704: PPUSH
58705: LD_VAR 0 9
58709: PUSH
58710: LD_VAR 0 10
58714: PLUS
58715: PPUSH
58716: CALL_OW 273
58720: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58721: LD_VAR 0 5
58725: PPUSH
58726: LD_VAR 0 7
58730: PPUSH
58731: CALL_OW 488
58735: PUSH
58736: LD_VAR 0 5
58740: PPUSH
58741: LD_VAR 0 7
58745: PPUSH
58746: CALL_OW 428
58750: PPUSH
58751: CALL_OW 247
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: IN
58766: NOT
58767: AND
58768: IFFALSE 58812
// begin ComMoveXY ( unit , _x , _y ) ;
58770: LD_VAR 0 1
58774: PPUSH
58775: LD_VAR 0 5
58779: PPUSH
58780: LD_VAR 0 7
58784: PPUSH
58785: CALL_OW 111
// result := [ _x , _y ] ;
58789: LD_ADDR_VAR 0 3
58793: PUSH
58794: LD_VAR 0 5
58798: PUSH
58799: LD_VAR 0 7
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// exit ;
58808: POP
58809: POP
58810: GO 58816
// end ; end ;
58812: GO 58656
58814: POP
58815: POP
// end ;
58816: LD_VAR 0 3
58820: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58821: LD_INT 0
58823: PPUSH
58824: PPUSH
58825: PPUSH
// result := 0 ;
58826: LD_ADDR_VAR 0 3
58830: PUSH
58831: LD_INT 0
58833: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58834: LD_VAR 0 1
58838: PUSH
58839: LD_INT 0
58841: LESS
58842: PUSH
58843: LD_VAR 0 1
58847: PUSH
58848: LD_INT 8
58850: GREATER
58851: OR
58852: PUSH
58853: LD_VAR 0 2
58857: PUSH
58858: LD_INT 0
58860: LESS
58861: OR
58862: PUSH
58863: LD_VAR 0 2
58867: PUSH
58868: LD_INT 8
58870: GREATER
58871: OR
58872: IFFALSE 58876
// exit ;
58874: GO 58951
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58876: LD_ADDR_VAR 0 4
58880: PUSH
58881: LD_INT 22
58883: PUSH
58884: LD_VAR 0 2
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PPUSH
58893: CALL_OW 69
58897: PUSH
58898: FOR_IN
58899: IFFALSE 58949
// begin un := UnitShoot ( i ) ;
58901: LD_ADDR_VAR 0 5
58905: PUSH
58906: LD_VAR 0 4
58910: PPUSH
58911: CALL_OW 504
58915: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58916: LD_VAR 0 5
58920: PPUSH
58921: CALL_OW 255
58925: PUSH
58926: LD_VAR 0 1
58930: EQUAL
58931: IFFALSE 58947
// begin result := un ;
58933: LD_ADDR_VAR 0 3
58937: PUSH
58938: LD_VAR 0 5
58942: ST_TO_ADDR
// exit ;
58943: POP
58944: POP
58945: GO 58951
// end ; end ;
58947: GO 58898
58949: POP
58950: POP
// end ;
58951: LD_VAR 0 3
58955: RET
// export function GetCargoBay ( units ) ; begin
58956: LD_INT 0
58958: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58959: LD_ADDR_VAR 0 2
58963: PUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 34
58974: PUSH
58975: LD_INT 12
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 34
58984: PUSH
58985: LD_INT 51
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 34
58994: PUSH
58995: LD_INT 32
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 34
59004: PUSH
59005: LD_INT 89
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: PPUSH
59019: CALL_OW 72
59023: ST_TO_ADDR
// end ;
59024: LD_VAR 0 2
59028: RET
// export function Negate ( value ) ; begin
59029: LD_INT 0
59031: PPUSH
// result := not value ;
59032: LD_ADDR_VAR 0 2
59036: PUSH
59037: LD_VAR 0 1
59041: NOT
59042: ST_TO_ADDR
// end ;
59043: LD_VAR 0 2
59047: RET
// export function Inc ( value ) ; begin
59048: LD_INT 0
59050: PPUSH
// result := value + 1 ;
59051: LD_ADDR_VAR 0 2
59055: PUSH
59056: LD_VAR 0 1
59060: PUSH
59061: LD_INT 1
59063: PLUS
59064: ST_TO_ADDR
// end ;
59065: LD_VAR 0 2
59069: RET
// export function Dec ( value ) ; begin
59070: LD_INT 0
59072: PPUSH
// result := value - 1 ;
59073: LD_ADDR_VAR 0 2
59077: PUSH
59078: LD_VAR 0 1
59082: PUSH
59083: LD_INT 1
59085: MINUS
59086: ST_TO_ADDR
// end ;
59087: LD_VAR 0 2
59091: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59092: LD_INT 0
59094: PPUSH
59095: PPUSH
59096: PPUSH
59097: PPUSH
59098: PPUSH
59099: PPUSH
59100: PPUSH
59101: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59102: LD_VAR 0 1
59106: PPUSH
59107: LD_VAR 0 2
59111: PPUSH
59112: CALL_OW 488
59116: NOT
59117: PUSH
59118: LD_VAR 0 3
59122: PPUSH
59123: LD_VAR 0 4
59127: PPUSH
59128: CALL_OW 488
59132: NOT
59133: OR
59134: IFFALSE 59147
// begin result := - 1 ;
59136: LD_ADDR_VAR 0 5
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: ST_TO_ADDR
// exit ;
59145: GO 59382
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59147: LD_ADDR_VAR 0 12
59151: PUSH
59152: LD_VAR 0 1
59156: PPUSH
59157: LD_VAR 0 2
59161: PPUSH
59162: LD_VAR 0 3
59166: PPUSH
59167: LD_VAR 0 4
59171: PPUSH
59172: CALL 58232 0 4
59176: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59177: LD_ADDR_VAR 0 11
59181: PUSH
59182: LD_VAR 0 1
59186: PPUSH
59187: LD_VAR 0 2
59191: PPUSH
59192: LD_VAR 0 12
59196: PUSH
59197: LD_INT 1
59199: ARRAY
59200: PPUSH
59201: LD_VAR 0 12
59205: PUSH
59206: LD_INT 2
59208: ARRAY
59209: PPUSH
59210: CALL_OW 298
59214: ST_TO_ADDR
// distance := 9999 ;
59215: LD_ADDR_VAR 0 10
59219: PUSH
59220: LD_INT 9999
59222: ST_TO_ADDR
// for i := 0 to 5 do
59223: LD_ADDR_VAR 0 6
59227: PUSH
59228: DOUBLE
59229: LD_INT 0
59231: DEC
59232: ST_TO_ADDR
59233: LD_INT 5
59235: PUSH
59236: FOR_TO
59237: IFFALSE 59380
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59239: LD_ADDR_VAR 0 7
59243: PUSH
59244: LD_VAR 0 1
59248: PPUSH
59249: LD_VAR 0 6
59253: PPUSH
59254: LD_VAR 0 11
59258: PPUSH
59259: CALL_OW 272
59263: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59264: LD_ADDR_VAR 0 8
59268: PUSH
59269: LD_VAR 0 2
59273: PPUSH
59274: LD_VAR 0 6
59278: PPUSH
59279: LD_VAR 0 11
59283: PPUSH
59284: CALL_OW 273
59288: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59289: LD_VAR 0 7
59293: PPUSH
59294: LD_VAR 0 8
59298: PPUSH
59299: CALL_OW 488
59303: NOT
59304: IFFALSE 59308
// continue ;
59306: GO 59236
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59308: LD_ADDR_VAR 0 9
59312: PUSH
59313: LD_VAR 0 12
59317: PUSH
59318: LD_INT 1
59320: ARRAY
59321: PPUSH
59322: LD_VAR 0 12
59326: PUSH
59327: LD_INT 2
59329: ARRAY
59330: PPUSH
59331: LD_VAR 0 7
59335: PPUSH
59336: LD_VAR 0 8
59340: PPUSH
59341: CALL_OW 298
59345: ST_TO_ADDR
// if tmp < distance then
59346: LD_VAR 0 9
59350: PUSH
59351: LD_VAR 0 10
59355: LESS
59356: IFFALSE 59378
// begin result := i ;
59358: LD_ADDR_VAR 0 5
59362: PUSH
59363: LD_VAR 0 6
59367: ST_TO_ADDR
// distance := tmp ;
59368: LD_ADDR_VAR 0 10
59372: PUSH
59373: LD_VAR 0 9
59377: ST_TO_ADDR
// end ; end ;
59378: GO 59236
59380: POP
59381: POP
// end ;
59382: LD_VAR 0 5
59386: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59387: LD_INT 0
59389: PPUSH
59390: PPUSH
// if not driver or not IsInUnit ( driver ) then
59391: LD_VAR 0 1
59395: NOT
59396: PUSH
59397: LD_VAR 0 1
59401: PPUSH
59402: CALL_OW 310
59406: NOT
59407: OR
59408: IFFALSE 59412
// exit ;
59410: GO 59502
// vehicle := IsInUnit ( driver ) ;
59412: LD_ADDR_VAR 0 3
59416: PUSH
59417: LD_VAR 0 1
59421: PPUSH
59422: CALL_OW 310
59426: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59427: LD_VAR 0 1
59431: PPUSH
59432: LD_STRING \
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: PUSH
59462: LD_STRING E
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_VAR 0 3
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PPUSH
59498: CALL_OW 446
// end ;
59502: LD_VAR 0 2
59506: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59507: LD_INT 0
59509: PPUSH
59510: PPUSH
// if not driver or not IsInUnit ( driver ) then
59511: LD_VAR 0 1
59515: NOT
59516: PUSH
59517: LD_VAR 0 1
59521: PPUSH
59522: CALL_OW 310
59526: NOT
59527: OR
59528: IFFALSE 59532
// exit ;
59530: GO 59622
// vehicle := IsInUnit ( driver ) ;
59532: LD_ADDR_VAR 0 3
59536: PUSH
59537: LD_VAR 0 1
59541: PPUSH
59542: CALL_OW 310
59546: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59547: LD_VAR 0 1
59551: PPUSH
59552: LD_STRING \
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: PUSH
59582: LD_STRING E
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_VAR 0 3
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PPUSH
59618: CALL_OW 447
// end ;
59622: LD_VAR 0 2
59626: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59627: LD_INT 0
59629: PPUSH
59630: PPUSH
59631: PPUSH
// tmp := [ ] ;
59632: LD_ADDR_VAR 0 5
59636: PUSH
59637: EMPTY
59638: ST_TO_ADDR
// for i in units do
59639: LD_ADDR_VAR 0 4
59643: PUSH
59644: LD_VAR 0 1
59648: PUSH
59649: FOR_IN
59650: IFFALSE 59688
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59652: LD_ADDR_VAR 0 5
59656: PUSH
59657: LD_VAR 0 5
59661: PPUSH
59662: LD_VAR 0 5
59666: PUSH
59667: LD_INT 1
59669: PLUS
59670: PPUSH
59671: LD_VAR 0 4
59675: PPUSH
59676: CALL_OW 256
59680: PPUSH
59681: CALL_OW 2
59685: ST_TO_ADDR
59686: GO 59649
59688: POP
59689: POP
// if not tmp then
59690: LD_VAR 0 5
59694: NOT
59695: IFFALSE 59699
// exit ;
59697: GO 59747
// if asc then
59699: LD_VAR 0 2
59703: IFFALSE 59727
// result := SortListByListAsc ( units , tmp ) else
59705: LD_ADDR_VAR 0 3
59709: PUSH
59710: LD_VAR 0 1
59714: PPUSH
59715: LD_VAR 0 5
59719: PPUSH
59720: CALL_OW 76
59724: ST_TO_ADDR
59725: GO 59747
// result := SortListByListDesc ( units , tmp ) ;
59727: LD_ADDR_VAR 0 3
59731: PUSH
59732: LD_VAR 0 1
59736: PPUSH
59737: LD_VAR 0 5
59741: PPUSH
59742: CALL_OW 77
59746: ST_TO_ADDR
// end ;
59747: LD_VAR 0 3
59751: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59752: LD_INT 0
59754: PPUSH
59755: PPUSH
// task := GetTaskList ( mech ) ;
59756: LD_ADDR_VAR 0 4
59760: PUSH
59761: LD_VAR 0 1
59765: PPUSH
59766: CALL_OW 437
59770: ST_TO_ADDR
// if not task then
59771: LD_VAR 0 4
59775: NOT
59776: IFFALSE 59780
// exit ;
59778: GO 59822
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59780: LD_ADDR_VAR 0 3
59784: PUSH
59785: LD_VAR 0 4
59789: PUSH
59790: LD_INT 1
59792: ARRAY
59793: PUSH
59794: LD_INT 1
59796: ARRAY
59797: PUSH
59798: LD_STRING r
59800: EQUAL
59801: PUSH
59802: LD_VAR 0 4
59806: PUSH
59807: LD_INT 1
59809: ARRAY
59810: PUSH
59811: LD_INT 4
59813: ARRAY
59814: PUSH
59815: LD_VAR 0 2
59819: EQUAL
59820: AND
59821: ST_TO_ADDR
// end ;
59822: LD_VAR 0 3
59826: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59827: LD_INT 0
59829: PPUSH
// SetDir ( unit , d ) ;
59830: LD_VAR 0 1
59834: PPUSH
59835: LD_VAR 0 4
59839: PPUSH
59840: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59844: LD_VAR 0 1
59848: PPUSH
59849: LD_VAR 0 2
59853: PPUSH
59854: LD_VAR 0 3
59858: PPUSH
59859: LD_VAR 0 5
59863: PPUSH
59864: CALL_OW 48
// end ;
59868: LD_VAR 0 6
59872: RET
// export function ToNaturalNumber ( number ) ; begin
59873: LD_INT 0
59875: PPUSH
// result := number div 1 ;
59876: LD_ADDR_VAR 0 2
59880: PUSH
59881: LD_VAR 0 1
59885: PUSH
59886: LD_INT 1
59888: DIV
59889: ST_TO_ADDR
// if number < 0 then
59890: LD_VAR 0 1
59894: PUSH
59895: LD_INT 0
59897: LESS
59898: IFFALSE 59908
// result := 0 ;
59900: LD_ADDR_VAR 0 2
59904: PUSH
59905: LD_INT 0
59907: ST_TO_ADDR
// end ;
59908: LD_VAR 0 2
59912: RET
// export function SortByClass ( units , class ) ; var un ; begin
59913: LD_INT 0
59915: PPUSH
59916: PPUSH
// if not units or not class then
59917: LD_VAR 0 1
59921: NOT
59922: PUSH
59923: LD_VAR 0 2
59927: NOT
59928: OR
59929: IFFALSE 59933
// exit ;
59931: GO 60028
// result := [ ] ;
59933: LD_ADDR_VAR 0 3
59937: PUSH
59938: EMPTY
59939: ST_TO_ADDR
// for un in units do
59940: LD_ADDR_VAR 0 4
59944: PUSH
59945: LD_VAR 0 1
59949: PUSH
59950: FOR_IN
59951: IFFALSE 60026
// if GetClass ( un ) = class then
59953: LD_VAR 0 4
59957: PPUSH
59958: CALL_OW 257
59962: PUSH
59963: LD_VAR 0 2
59967: EQUAL
59968: IFFALSE 59995
// result := Insert ( result , 1 , un ) else
59970: LD_ADDR_VAR 0 3
59974: PUSH
59975: LD_VAR 0 3
59979: PPUSH
59980: LD_INT 1
59982: PPUSH
59983: LD_VAR 0 4
59987: PPUSH
59988: CALL_OW 2
59992: ST_TO_ADDR
59993: GO 60024
// result := Replace ( result , result + 1 , un ) ;
59995: LD_ADDR_VAR 0 3
59999: PUSH
60000: LD_VAR 0 3
60004: PPUSH
60005: LD_VAR 0 3
60009: PUSH
60010: LD_INT 1
60012: PLUS
60013: PPUSH
60014: LD_VAR 0 4
60018: PPUSH
60019: CALL_OW 1
60023: ST_TO_ADDR
60024: GO 59950
60026: POP
60027: POP
// end ;
60028: LD_VAR 0 3
60032: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60033: LD_INT 0
60035: PPUSH
60036: PPUSH
60037: PPUSH
60038: PPUSH
60039: PPUSH
60040: PPUSH
60041: PPUSH
// result := [ ] ;
60042: LD_ADDR_VAR 0 4
60046: PUSH
60047: EMPTY
60048: ST_TO_ADDR
// if x - r < 0 then
60049: LD_VAR 0 1
60053: PUSH
60054: LD_VAR 0 3
60058: MINUS
60059: PUSH
60060: LD_INT 0
60062: LESS
60063: IFFALSE 60075
// min_x := 0 else
60065: LD_ADDR_VAR 0 8
60069: PUSH
60070: LD_INT 0
60072: ST_TO_ADDR
60073: GO 60091
// min_x := x - r ;
60075: LD_ADDR_VAR 0 8
60079: PUSH
60080: LD_VAR 0 1
60084: PUSH
60085: LD_VAR 0 3
60089: MINUS
60090: ST_TO_ADDR
// if y - r < 0 then
60091: LD_VAR 0 2
60095: PUSH
60096: LD_VAR 0 3
60100: MINUS
60101: PUSH
60102: LD_INT 0
60104: LESS
60105: IFFALSE 60117
// min_y := 0 else
60107: LD_ADDR_VAR 0 7
60111: PUSH
60112: LD_INT 0
60114: ST_TO_ADDR
60115: GO 60133
// min_y := y - r ;
60117: LD_ADDR_VAR 0 7
60121: PUSH
60122: LD_VAR 0 2
60126: PUSH
60127: LD_VAR 0 3
60131: MINUS
60132: ST_TO_ADDR
// max_x := x + r ;
60133: LD_ADDR_VAR 0 9
60137: PUSH
60138: LD_VAR 0 1
60142: PUSH
60143: LD_VAR 0 3
60147: PLUS
60148: ST_TO_ADDR
// max_y := y + r ;
60149: LD_ADDR_VAR 0 10
60153: PUSH
60154: LD_VAR 0 2
60158: PUSH
60159: LD_VAR 0 3
60163: PLUS
60164: ST_TO_ADDR
// for _x = min_x to max_x do
60165: LD_ADDR_VAR 0 5
60169: PUSH
60170: DOUBLE
60171: LD_VAR 0 8
60175: DEC
60176: ST_TO_ADDR
60177: LD_VAR 0 9
60181: PUSH
60182: FOR_TO
60183: IFFALSE 60284
// for _y = min_y to max_y do
60185: LD_ADDR_VAR 0 6
60189: PUSH
60190: DOUBLE
60191: LD_VAR 0 7
60195: DEC
60196: ST_TO_ADDR
60197: LD_VAR 0 10
60201: PUSH
60202: FOR_TO
60203: IFFALSE 60280
// begin if not ValidHex ( _x , _y ) then
60205: LD_VAR 0 5
60209: PPUSH
60210: LD_VAR 0 6
60214: PPUSH
60215: CALL_OW 488
60219: NOT
60220: IFFALSE 60224
// continue ;
60222: GO 60202
// if GetResourceTypeXY ( _x , _y ) then
60224: LD_VAR 0 5
60228: PPUSH
60229: LD_VAR 0 6
60233: PPUSH
60234: CALL_OW 283
60238: IFFALSE 60278
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60240: LD_ADDR_VAR 0 4
60244: PUSH
60245: LD_VAR 0 4
60249: PPUSH
60250: LD_VAR 0 4
60254: PUSH
60255: LD_INT 1
60257: PLUS
60258: PPUSH
60259: LD_VAR 0 5
60263: PUSH
60264: LD_VAR 0 6
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PPUSH
60273: CALL_OW 1
60277: ST_TO_ADDR
// end ;
60278: GO 60202
60280: POP
60281: POP
60282: GO 60182
60284: POP
60285: POP
// end ;
60286: LD_VAR 0 4
60290: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60291: LD_INT 0
60293: PPUSH
60294: PPUSH
60295: PPUSH
60296: PPUSH
60297: PPUSH
60298: PPUSH
60299: PPUSH
60300: PPUSH
// if not units then
60301: LD_VAR 0 1
60305: NOT
60306: IFFALSE 60310
// exit ;
60308: GO 60834
// result := UnitFilter ( units , [ f_ok ] ) ;
60310: LD_ADDR_VAR 0 3
60314: PUSH
60315: LD_VAR 0 1
60319: PPUSH
60320: LD_INT 50
60322: PUSH
60323: EMPTY
60324: LIST
60325: PPUSH
60326: CALL_OW 72
60330: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60331: LD_ADDR_VAR 0 8
60335: PUSH
60336: LD_VAR 0 1
60340: PUSH
60341: LD_INT 1
60343: ARRAY
60344: PPUSH
60345: CALL_OW 255
60349: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60350: LD_ADDR_VAR 0 10
60354: PUSH
60355: LD_INT 29
60357: PUSH
60358: LD_INT 91
60360: PUSH
60361: LD_INT 49
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// if not result then
60369: LD_VAR 0 3
60373: NOT
60374: IFFALSE 60378
// exit ;
60376: GO 60834
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60378: LD_ADDR_VAR 0 5
60382: PUSH
60383: LD_INT 81
60385: PUSH
60386: LD_VAR 0 8
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PPUSH
60395: CALL_OW 69
60399: ST_TO_ADDR
// for i in result do
60400: LD_ADDR_VAR 0 4
60404: PUSH
60405: LD_VAR 0 3
60409: PUSH
60410: FOR_IN
60411: IFFALSE 60832
// begin tag := GetTag ( i ) + 1 ;
60413: LD_ADDR_VAR 0 9
60417: PUSH
60418: LD_VAR 0 4
60422: PPUSH
60423: CALL_OW 110
60427: PUSH
60428: LD_INT 1
60430: PLUS
60431: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60432: LD_ADDR_VAR 0 7
60436: PUSH
60437: LD_VAR 0 4
60441: PPUSH
60442: CALL_OW 250
60446: PPUSH
60447: LD_VAR 0 4
60451: PPUSH
60452: CALL_OW 251
60456: PPUSH
60457: LD_INT 6
60459: PPUSH
60460: CALL 60033 0 3
60464: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60465: LD_VAR 0 4
60469: PPUSH
60470: CALL_OW 247
60474: PUSH
60475: LD_INT 2
60477: EQUAL
60478: PUSH
60479: LD_VAR 0 7
60483: AND
60484: PUSH
60485: LD_VAR 0 4
60489: PPUSH
60490: CALL_OW 264
60494: PUSH
60495: LD_VAR 0 10
60499: IN
60500: NOT
60501: AND
60502: IFFALSE 60541
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60504: LD_VAR 0 4
60508: PPUSH
60509: LD_VAR 0 7
60513: PUSH
60514: LD_INT 1
60516: ARRAY
60517: PUSH
60518: LD_INT 1
60520: ARRAY
60521: PPUSH
60522: LD_VAR 0 7
60526: PUSH
60527: LD_INT 1
60529: ARRAY
60530: PUSH
60531: LD_INT 2
60533: ARRAY
60534: PPUSH
60535: CALL_OW 116
60539: GO 60830
// if path > tag then
60541: LD_VAR 0 2
60545: PUSH
60546: LD_VAR 0 9
60550: GREATER
60551: IFFALSE 60759
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60553: LD_ADDR_VAR 0 6
60557: PUSH
60558: LD_VAR 0 5
60562: PPUSH
60563: LD_INT 91
60565: PUSH
60566: LD_VAR 0 4
60570: PUSH
60571: LD_INT 8
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: PPUSH
60579: CALL_OW 72
60583: ST_TO_ADDR
// if nearEnemy then
60584: LD_VAR 0 6
60588: IFFALSE 60657
// begin if GetWeapon ( i ) = ru_time_lapser then
60590: LD_VAR 0 4
60594: PPUSH
60595: CALL_OW 264
60599: PUSH
60600: LD_INT 49
60602: EQUAL
60603: IFFALSE 60631
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60605: LD_VAR 0 4
60609: PPUSH
60610: LD_VAR 0 6
60614: PPUSH
60615: LD_VAR 0 4
60619: PPUSH
60620: CALL_OW 74
60624: PPUSH
60625: CALL_OW 112
60629: GO 60655
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60631: LD_VAR 0 4
60635: PPUSH
60636: LD_VAR 0 6
60640: PPUSH
60641: LD_VAR 0 4
60645: PPUSH
60646: CALL_OW 74
60650: PPUSH
60651: CALL_OW 115
// end else
60655: GO 60757
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60657: LD_VAR 0 4
60661: PPUSH
60662: LD_VAR 0 2
60666: PUSH
60667: LD_VAR 0 9
60671: ARRAY
60672: PUSH
60673: LD_INT 1
60675: ARRAY
60676: PPUSH
60677: LD_VAR 0 2
60681: PUSH
60682: LD_VAR 0 9
60686: ARRAY
60687: PUSH
60688: LD_INT 2
60690: ARRAY
60691: PPUSH
60692: CALL_OW 297
60696: PUSH
60697: LD_INT 6
60699: GREATER
60700: IFFALSE 60743
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60702: LD_VAR 0 4
60706: PPUSH
60707: LD_VAR 0 2
60711: PUSH
60712: LD_VAR 0 9
60716: ARRAY
60717: PUSH
60718: LD_INT 1
60720: ARRAY
60721: PPUSH
60722: LD_VAR 0 2
60726: PUSH
60727: LD_VAR 0 9
60731: ARRAY
60732: PUSH
60733: LD_INT 2
60735: ARRAY
60736: PPUSH
60737: CALL_OW 114
60741: GO 60757
// SetTag ( i , tag ) ;
60743: LD_VAR 0 4
60747: PPUSH
60748: LD_VAR 0 9
60752: PPUSH
60753: CALL_OW 109
// end else
60757: GO 60830
// if enemy then
60759: LD_VAR 0 5
60763: IFFALSE 60830
// begin if GetWeapon ( i ) = ru_time_lapser then
60765: LD_VAR 0 4
60769: PPUSH
60770: CALL_OW 264
60774: PUSH
60775: LD_INT 49
60777: EQUAL
60778: IFFALSE 60806
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60780: LD_VAR 0 4
60784: PPUSH
60785: LD_VAR 0 5
60789: PPUSH
60790: LD_VAR 0 4
60794: PPUSH
60795: CALL_OW 74
60799: PPUSH
60800: CALL_OW 112
60804: GO 60830
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60806: LD_VAR 0 4
60810: PPUSH
60811: LD_VAR 0 5
60815: PPUSH
60816: LD_VAR 0 4
60820: PPUSH
60821: CALL_OW 74
60825: PPUSH
60826: CALL_OW 115
// end ; end ;
60830: GO 60410
60832: POP
60833: POP
// end ;
60834: LD_VAR 0 3
60838: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60839: LD_INT 0
60841: PPUSH
60842: PPUSH
60843: PPUSH
// if not unit or IsInUnit ( unit ) then
60844: LD_VAR 0 1
60848: NOT
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 310
60859: OR
60860: IFFALSE 60864
// exit ;
60862: GO 60955
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60864: LD_ADDR_VAR 0 4
60868: PUSH
60869: LD_VAR 0 1
60873: PPUSH
60874: CALL_OW 250
60878: PPUSH
60879: LD_VAR 0 2
60883: PPUSH
60884: LD_INT 1
60886: PPUSH
60887: CALL_OW 272
60891: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60892: LD_ADDR_VAR 0 5
60896: PUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 251
60906: PPUSH
60907: LD_VAR 0 2
60911: PPUSH
60912: LD_INT 1
60914: PPUSH
60915: CALL_OW 273
60919: ST_TO_ADDR
// if ValidHex ( x , y ) then
60920: LD_VAR 0 4
60924: PPUSH
60925: LD_VAR 0 5
60929: PPUSH
60930: CALL_OW 488
60934: IFFALSE 60955
// ComTurnXY ( unit , x , y ) ;
60936: LD_VAR 0 1
60940: PPUSH
60941: LD_VAR 0 4
60945: PPUSH
60946: LD_VAR 0 5
60950: PPUSH
60951: CALL_OW 118
// end ;
60955: LD_VAR 0 3
60959: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
// result := false ;
60964: LD_ADDR_VAR 0 3
60968: PUSH
60969: LD_INT 0
60971: ST_TO_ADDR
// if not units then
60972: LD_VAR 0 2
60976: NOT
60977: IFFALSE 60981
// exit ;
60979: GO 61026
// for i in units do
60981: LD_ADDR_VAR 0 4
60985: PUSH
60986: LD_VAR 0 2
60990: PUSH
60991: FOR_IN
60992: IFFALSE 61024
// if See ( side , i ) then
60994: LD_VAR 0 1
60998: PPUSH
60999: LD_VAR 0 4
61003: PPUSH
61004: CALL_OW 292
61008: IFFALSE 61022
// begin result := true ;
61010: LD_ADDR_VAR 0 3
61014: PUSH
61015: LD_INT 1
61017: ST_TO_ADDR
// exit ;
61018: POP
61019: POP
61020: GO 61026
// end ;
61022: GO 60991
61024: POP
61025: POP
// end ;
61026: LD_VAR 0 3
61030: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61031: LD_INT 0
61033: PPUSH
61034: PPUSH
61035: PPUSH
61036: PPUSH
// if not unit or not points then
61037: LD_VAR 0 1
61041: NOT
61042: PUSH
61043: LD_VAR 0 2
61047: NOT
61048: OR
61049: IFFALSE 61053
// exit ;
61051: GO 61143
// dist := 99999 ;
61053: LD_ADDR_VAR 0 5
61057: PUSH
61058: LD_INT 99999
61060: ST_TO_ADDR
// for i in points do
61061: LD_ADDR_VAR 0 4
61065: PUSH
61066: LD_VAR 0 2
61070: PUSH
61071: FOR_IN
61072: IFFALSE 61141
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61074: LD_ADDR_VAR 0 6
61078: PUSH
61079: LD_VAR 0 1
61083: PPUSH
61084: LD_VAR 0 4
61088: PUSH
61089: LD_INT 1
61091: ARRAY
61092: PPUSH
61093: LD_VAR 0 4
61097: PUSH
61098: LD_INT 2
61100: ARRAY
61101: PPUSH
61102: CALL_OW 297
61106: ST_TO_ADDR
// if tmpDist < dist then
61107: LD_VAR 0 6
61111: PUSH
61112: LD_VAR 0 5
61116: LESS
61117: IFFALSE 61139
// begin result := i ;
61119: LD_ADDR_VAR 0 3
61123: PUSH
61124: LD_VAR 0 4
61128: ST_TO_ADDR
// dist := tmpDist ;
61129: LD_ADDR_VAR 0 5
61133: PUSH
61134: LD_VAR 0 6
61138: ST_TO_ADDR
// end ; end ;
61139: GO 61071
61141: POP
61142: POP
// end ;
61143: LD_VAR 0 3
61147: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61148: LD_INT 0
61150: PPUSH
// uc_side := side ;
61151: LD_ADDR_OWVAR 20
61155: PUSH
61156: LD_VAR 0 1
61160: ST_TO_ADDR
// uc_nation := 3 ;
61161: LD_ADDR_OWVAR 21
61165: PUSH
61166: LD_INT 3
61168: ST_TO_ADDR
// vc_chassis := 25 ;
61169: LD_ADDR_OWVAR 37
61173: PUSH
61174: LD_INT 25
61176: ST_TO_ADDR
// vc_engine := engine_siberite ;
61177: LD_ADDR_OWVAR 39
61181: PUSH
61182: LD_INT 3
61184: ST_TO_ADDR
// vc_control := control_computer ;
61185: LD_ADDR_OWVAR 38
61189: PUSH
61190: LD_INT 3
61192: ST_TO_ADDR
// vc_weapon := 59 ;
61193: LD_ADDR_OWVAR 40
61197: PUSH
61198: LD_INT 59
61200: ST_TO_ADDR
// result := CreateVehicle ;
61201: LD_ADDR_VAR 0 5
61205: PUSH
61206: CALL_OW 45
61210: ST_TO_ADDR
// SetDir ( result , d ) ;
61211: LD_VAR 0 5
61215: PPUSH
61216: LD_VAR 0 4
61220: PPUSH
61221: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61225: LD_VAR 0 5
61229: PPUSH
61230: LD_VAR 0 2
61234: PPUSH
61235: LD_VAR 0 3
61239: PPUSH
61240: LD_INT 0
61242: PPUSH
61243: CALL_OW 48
// end ;
61247: LD_VAR 0 5
61251: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61252: LD_INT 0
61254: PPUSH
61255: PPUSH
61256: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61257: LD_ADDR_VAR 0 2
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61280: LD_VAR 0 1
61284: NOT
61285: PUSH
61286: LD_VAR 0 1
61290: PPUSH
61291: CALL_OW 264
61295: PUSH
61296: LD_INT 12
61298: PUSH
61299: LD_INT 51
61301: PUSH
61302: LD_INT 32
61304: PUSH
61305: LD_INT 89
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: IN
61314: NOT
61315: OR
61316: IFFALSE 61320
// exit ;
61318: GO 61418
// for i := 1 to 3 do
61320: LD_ADDR_VAR 0 3
61324: PUSH
61325: DOUBLE
61326: LD_INT 1
61328: DEC
61329: ST_TO_ADDR
61330: LD_INT 3
61332: PUSH
61333: FOR_TO
61334: IFFALSE 61416
// begin tmp := GetCargo ( cargo , i ) ;
61336: LD_ADDR_VAR 0 4
61340: PUSH
61341: LD_VAR 0 1
61345: PPUSH
61346: LD_VAR 0 3
61350: PPUSH
61351: CALL_OW 289
61355: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61356: LD_ADDR_VAR 0 2
61360: PUSH
61361: LD_VAR 0 2
61365: PPUSH
61366: LD_VAR 0 3
61370: PPUSH
61371: LD_VAR 0 4
61375: PPUSH
61376: CALL_OW 1
61380: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61381: LD_ADDR_VAR 0 2
61385: PUSH
61386: LD_VAR 0 2
61390: PPUSH
61391: LD_INT 4
61393: PPUSH
61394: LD_VAR 0 2
61398: PUSH
61399: LD_INT 4
61401: ARRAY
61402: PUSH
61403: LD_VAR 0 4
61407: PLUS
61408: PPUSH
61409: CALL_OW 1
61413: ST_TO_ADDR
// end ;
61414: GO 61333
61416: POP
61417: POP
// end ;
61418: LD_VAR 0 2
61422: RET
// export function Length ( array ) ; begin
61423: LD_INT 0
61425: PPUSH
// result := array + 0 ;
61426: LD_ADDR_VAR 0 2
61430: PUSH
61431: LD_VAR 0 1
61435: PUSH
61436: LD_INT 0
61438: PLUS
61439: ST_TO_ADDR
// end ;
61440: LD_VAR 0 2
61444: RET
// export function PrepareArray ( array ) ; begin
61445: LD_INT 0
61447: PPUSH
// result := array diff 0 ;
61448: LD_ADDR_VAR 0 2
61452: PUSH
61453: LD_VAR 0 1
61457: PUSH
61458: LD_INT 0
61460: DIFF
61461: ST_TO_ADDR
// if not result [ 1 ] then
61462: LD_VAR 0 2
61466: PUSH
61467: LD_INT 1
61469: ARRAY
61470: NOT
61471: IFFALSE 61491
// result := Delete ( result , 1 ) ;
61473: LD_ADDR_VAR 0 2
61477: PUSH
61478: LD_VAR 0 2
61482: PPUSH
61483: LD_INT 1
61485: PPUSH
61486: CALL_OW 3
61490: ST_TO_ADDR
// end ;
61491: LD_VAR 0 2
61495: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61496: LD_INT 0
61498: PPUSH
61499: PPUSH
61500: PPUSH
61501: PPUSH
// sibRocketRange := 25 ;
61502: LD_ADDR_VAR 0 6
61506: PUSH
61507: LD_INT 25
61509: ST_TO_ADDR
// result := false ;
61510: LD_ADDR_VAR 0 4
61514: PUSH
61515: LD_INT 0
61517: ST_TO_ADDR
// for i := 0 to 5 do
61518: LD_ADDR_VAR 0 5
61522: PUSH
61523: DOUBLE
61524: LD_INT 0
61526: DEC
61527: ST_TO_ADDR
61528: LD_INT 5
61530: PUSH
61531: FOR_TO
61532: IFFALSE 61599
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61534: LD_VAR 0 1
61538: PPUSH
61539: LD_VAR 0 5
61543: PPUSH
61544: LD_VAR 0 6
61548: PPUSH
61549: CALL_OW 272
61553: PPUSH
61554: LD_VAR 0 2
61558: PPUSH
61559: LD_VAR 0 5
61563: PPUSH
61564: LD_VAR 0 6
61568: PPUSH
61569: CALL_OW 273
61573: PPUSH
61574: LD_VAR 0 3
61578: PPUSH
61579: CALL_OW 309
61583: IFFALSE 61597
// begin result := true ;
61585: LD_ADDR_VAR 0 4
61589: PUSH
61590: LD_INT 1
61592: ST_TO_ADDR
// exit ;
61593: POP
61594: POP
61595: GO 61601
// end ;
61597: GO 61531
61599: POP
61600: POP
// end ;
61601: LD_VAR 0 4
61605: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61606: LD_INT 0
61608: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61609: LD_VAR 0 1
61613: PPUSH
61614: LD_VAR 0 2
61618: PPUSH
61619: LD_INT 0
61621: PPUSH
61622: LD_INT 0
61624: PPUSH
61625: LD_INT 1
61627: PPUSH
61628: LD_INT 0
61630: PPUSH
61631: CALL_OW 587
// end ; end_of_file
61635: LD_VAR 0 3
61639: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61640: LD_VAR 0 1
61644: PUSH
61645: LD_INT 200
61647: DOUBLE
61648: GREATEREQUAL
61649: IFFALSE 61657
61651: LD_INT 299
61653: DOUBLE
61654: LESSEQUAL
61655: IFTRUE 61659
61657: GO 61691
61659: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61660: LD_VAR 0 1
61664: PPUSH
61665: LD_VAR 0 2
61669: PPUSH
61670: LD_VAR 0 3
61674: PPUSH
61675: LD_VAR 0 4
61679: PPUSH
61680: LD_VAR 0 5
61684: PPUSH
61685: CALL 16306 0 5
61689: GO 61768
61691: LD_INT 300
61693: DOUBLE
61694: GREATEREQUAL
61695: IFFALSE 61703
61697: LD_INT 399
61699: DOUBLE
61700: LESSEQUAL
61701: IFTRUE 61705
61703: GO 61767
61705: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61706: LD_VAR 0 1
61710: PPUSH
61711: LD_VAR 0 2
61715: PPUSH
61716: LD_VAR 0 3
61720: PPUSH
61721: LD_VAR 0 4
61725: PPUSH
61726: LD_VAR 0 5
61730: PPUSH
61731: LD_VAR 0 6
61735: PPUSH
61736: LD_VAR 0 7
61740: PPUSH
61741: LD_VAR 0 8
61745: PPUSH
61746: LD_VAR 0 9
61750: PPUSH
61751: LD_VAR 0 10
61755: PPUSH
61756: LD_VAR 0 11
61760: PPUSH
61761: CALL 12639 0 11
61765: GO 61768
61767: POP
// end ;
61768: PPOPN 11
61770: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61771: LD_VAR 0 1
61775: PPUSH
61776: LD_VAR 0 2
61780: PPUSH
61781: LD_VAR 0 3
61785: PPUSH
61786: LD_VAR 0 4
61790: PPUSH
61791: LD_VAR 0 5
61795: PPUSH
61796: CALL 16042 0 5
// end ; end_of_file
61800: PPOPN 5
61802: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61803: LD_VAR 0 1
61807: PPUSH
61808: LD_VAR 0 2
61812: PPUSH
61813: LD_VAR 0 3
61817: PPUSH
61818: LD_VAR 0 4
61822: PPUSH
61823: LD_VAR 0 5
61827: PPUSH
61828: LD_VAR 0 6
61832: PPUSH
61833: CALL 291 0 6
// end ;
61837: PPOPN 6
61839: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
61840: LD_INT 0
61842: PPUSH
// begin if not units then
61843: LD_VAR 0 1
61847: NOT
61848: IFFALSE 61852
// exit ;
61850: GO 61852
// end ;
61852: PPOPN 7
61854: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
61855: CALL 195 0 0
// end ;
61859: PPOPN 1
61861: END
